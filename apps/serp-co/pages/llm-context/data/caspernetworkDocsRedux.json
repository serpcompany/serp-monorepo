[
  {
    "owner": "casper-network",
    "repo": "docs-redux",
    "content": "TITLE: Installing the Rust Nightly Toolchain using rustup - Bash\nDESCRIPTION: This command downloads and installs the latest nightly version of the Rust toolchain via 'rustup', enabling compatibility with Casper contract compilation and features gated to nightly releases. Requires 'rustup' to be installed. No parameters are required beyond the toolchain identifier.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/docs/developers/writing-onchain-code/getting-started.md#2025-04-22_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nrustup toolchain install nightly\n```\n\n----------------------------------------\n\nTITLE: Sending Deploy Command in Casper Bash\nDESCRIPTION: This bash command utilizes the Casper client to send a deployment to a specified node. The 'input' parameter specifies the deploy file path, and 'node-address' is the URL of the node to which the deploy is sent. Ensure an active node address from the network for successful deployment.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/docs/developers/cli/transfers/multisig-deploy-transfer.md#2025-04-22_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\ncasper-client send-deploy \\\n--input transfer2.deploy \\\n--node-address https://node.testnet.casper.network\n```\n\n----------------------------------------\n\nTITLE: Defining Executable Deploy Variants in Casper Network JSON Schema - JSON\nDESCRIPTION: This JSON schema outlines the structure of possible executable deploy variants for Casper Network transactions. It specifies polymorphic deploy objects via the 'anyOf' keyword, supporting raw Wasm execution, stored contract invocation by hash or name, versioned contract calling, and native token transfers. Each variant requires specific properties, such as module_bytes, contract hash or name, entry points, version, and runtime arguments, enabling strict client-side or server-side validation and contract interaction consistency. Dependencies include the definition of 'RuntimeArgs' as per the referenced component schema.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/condor/jsonrpc-comp/rpc-1.5/schema/ExecutableDeployItem.json.md#2025-04-22_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"description\": \"Represents possible variants of an executable deploy.\",\n    \"anyOf\": [\n        {\n            \"description\": \"Executable specified as raw bytes that represent WASM code and an instance of [`RuntimeArgs`].\",\n            \"type\": \"object\",\n            \"required\": [\n                \"ModuleBytes\"\n            ],\n            \"properties\": {\n                \"ModuleBytes\": {\n                    \"type\": \"object\",\n                    \"required\": [\n                        \"args\",\n                        \"module_bytes\"\n                    ],\n                    \"properties\": {\n                        \"module_bytes\": {\n                            \"description\": \"Hex-encoded raw Wasm bytes.\",\n                            \"type\": \"string\"\n                        },\n                        \"args\": {\n                            \"description\": \"Runtime arguments.\",\n                            \"allOf\": [\n                                {\n                                    \"$ref\": \"#/components/schemas/RuntimeArgs\"\n                                }\n                            ]\n                        }\n                    },\n                    \"additionalProperties\": false\n                }\n            },\n            \"additionalProperties\": false\n        },\n        {\n            \"description\": \"Stored contract referenced by its [`ContractHash`], entry point and an instance of [`RuntimeArgs`].\",\n            \"type\": \"object\",\n            \"required\": [\n                \"StoredContractByHash\"\n            ],\n            \"properties\": {\n                \"StoredContractByHash\": {\n                    \"type\": \"object\",\n                    \"required\": [\n                        \"args\",\n                        \"entry_point\",\n                        \"hash\"\n                    ],\n                    \"properties\": {\n                        \"hash\": {\n                            \"description\": \"Hex-encoded hash.\",\n                            \"type\": \"string\"\n                        },\n                        \"entry_point\": {\n                            \"description\": \"Name of an entry point.\",\n                            \"type\": \"string\"\n                        },\n                        \"args\": {\n                            \"description\": \"Runtime arguments.\",\n                            \"allOf\": [\n                                {\n                                    \"$ref\": \"#/components/schemas/RuntimeArgs\"\n                                }\n                            ]\n                        }\n                    },\n                    \"additionalProperties\": false\n                }\n            },\n            \"additionalProperties\": false\n        },\n        {\n            \"description\": \"Stored contract referenced by a named key existing in the signer's account context, entry point and an instance of [`RuntimeArgs`].\",\n            \"type\": \"object\",\n            \"required\": [\n                \"StoredContractByName\"\n            ],\n            \"properties\": {\n                \"StoredContractByName\": {\n                    \"type\": \"object\",\n                    \"required\": [\n                        \"args\",\n                        \"entry_point\",\n                        \"name\"\n                    ],\n                    \"properties\": {\n                        \"name\": {\n                            \"description\": \"Named key.\",\n                            \"type\": \"string\"\n                        },\n                        \"entry_point\": {\n                            \"description\": \"Name of an entry point.\",\n                            \"type\": \"string\"\n                        },\n                        \"args\": {\n                            \"description\": \"Runtime arguments.\",\n                            \"allOf\": [\n                                {\n                                    \"$ref\": \"#/components/schemas/RuntimeArgs\"\n                                }\n                            ]\n                        }\n                    },\n                    \"additionalProperties\": false\n                }\n            },\n            \"additionalProperties\": false\n        },\n        {\n            \"description\": \"Stored versioned contract referenced by its [`ContractPackageHash`], entry point and an instance of [`RuntimeArgs`].\",\n            \"type\": \"object\",\n            \"required\": [\n                \"StoredVersionedContractByHash\"\n            ],\n            \"properties\": {\n                \"StoredVersionedContractByHash\": {\n                    \"type\": \"object\",\n                    \"required\": [\n                        \"args\",\n                        \"entry_point\",\n                        \"hash\"\n                    ],\n                    \"properties\": {\n                        \"hash\": {\n                            \"description\": \"Hex-encoded hash.\",\n                            \"type\": \"string\"\n                        },\n                        \"version\": {\n                            \"description\": \"An optional version of the contract to call. It will default to the highest enabled version if no value is specified.\",\n                            \"type\": [\n                                \"integer\",\n                                \"null\"\n                            ],\n                            \"format\": \"uint32\",\n                            \"minimum\": 0\n                        },\n                        \"entry_point\": {\n                            \"description\": \"Entry point name.\",\n                            \"type\": \"string\"\n                        },\n                        \"args\": {\n                            \"description\": \"Runtime arguments.\",\n                            \"allOf\": [\n                                {\n                                    \"$ref\": \"#/components/schemas/RuntimeArgs\"\n                                }\n                            ]\n                        }\n                    },\n                    \"additionalProperties\": false\n                }\n            },\n            \"additionalProperties\": false\n        },\n        {\n            \"description\": \"Stored versioned contract referenced by a named key existing in the signer's account context, entry point and an instance of [`RuntimeArgs`].\",\n            \"type\": \"object\",\n            \"required\": [\n                \"StoredVersionedContractByName\"\n            ],\n            \"properties\": {\n                \"StoredVersionedContractByName\": {\n                    \"type\": \"object\",\n                    \"required\": [\n                        \"args\",\n                        \"entry_point\",\n                        \"name\"\n                    ],\n                    \"properties\": {\n                        \"name\": {\n                            \"description\": \"Named key.\",\n                            \"type\": \"string\"\n                        },\n                        \"version\": {\n                            \"description\": \"An optional version of the contract to call. It will default to the highest enabled version if no value is specified.\",\n                            \"type\": [\n                                \"integer\",\n                                \"null\"\n                            ],\n                            \"format\": \"uint32\",\n                            \"minimum\": 0\n                        },\n                        \"entry_point\": {\n                            \"description\": \"Entry point name.\",\n                            \"type\": \"string\"\n                        },\n                        \"args\": {\n                            \"description\": \"Runtime arguments.\",\n                            \"allOf\": [\n                                {\n                                    \"$ref\": \"#/components/schemas/RuntimeArgs\"\n                                }\n                            ]\n                        }\n                    },\n                    \"additionalProperties\": false\n                }\n            },\n            \"additionalProperties\": false\n        },\n        {\n            \"description\": \"A native transfer which does not contain or reference a WASM code.\",\n            \"type\": \"object\",\n            \"required\": [\n                \"Transfer\"\n            ],\n            \"properties\": {\n                \"Transfer\": {\n                    \"type\": \"object\",\n                    \"required\": [\n                        \"args\"\n                    ],\n                    \"properties\": {\n                        \"args\": {\n                            \"description\": \"Runtime arguments.\",\n                            \"allOf\": [\n                                {\n                                    \"$ref\": \"#/components/schemas/RuntimeArgs\"\n                                }\n                            ]\n                        }\n                    },\n                    \"additionalProperties\": false\n                }\n            },\n            \"additionalProperties\": false\n        }\n    ]\n} \n```\n\n----------------------------------------\n\nTITLE: Transferring CSPR Tokens - JavaScript - javascript\nDESCRIPTION: Demonstrates how to construct, sign, and submit a transfer deploy using casper-js-sdk in Node.js. Involves setting up CasperClient, encoding recipient, preparing the deploy, signing, and pushing to the node's RPC. Requires an active RPC node and a previously created keypair. Inputs: recipient public key, amount, chain name. Outputs: signed deploy submitted and deploy hash logged.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/versioned_docs/version-2.0.0/developers/dapps/sdk/client-library-usage.md#2025-04-22_snippet_11\n\nLANGUAGE: javascript\nCODE:\n```\nconst { CasperClient, DeployUtil } = require(\"casper-js-sdk\");\n\nconst casperClient = new CasperClient(\"http://NODE_ADDRESS:7777/rpc\");\nconst receipientPublicKeyHex = \"01e8c84f4fbb58d37991ef373c08043a45c44cd7f499453fa2bd3e141cc0113b3c\"\n\nconst amount = 2.5e9 // Minimum transfer: 2.5 CSPR\nlet deployParams = new DeployUtil.DeployParams(\n  keypair.publicKey,\n  \"casper\" // or \"casper-test\" for Testnet\n);\n\nconst session = DeployUtil.ExecutableDeployItem.newTransferWithOptionalTransferId(\n  amount,\n  recipientPublicKeyHex\n);\n\nconst payment = DeployUtil.standardPayment(0.1e9); // Gas payment in motes: 0.1 CSPR\nconst deploy = DeployUtil.makeDeploy(deployParams, session, payment);\nconst signedDeploy = DeployUtil.signDeploy(deploy, keypair);\n\nconsole.log(await casperClient.putDeploy(signedDeploy));\n```\n\n----------------------------------------\n\nTITLE: Verbose Account Query in Casper Network\nDESCRIPTION: This command performs a verbose query of account information, providing detailed output including the JSON-RPC request and response.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/versioned_docs/version-1.5.X/resources/beginner/querying-network.md#2025-04-22_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\ncasper-client query-global-state -v \\\n  --id 4 \\\n  --node-address https://node.testnet.casper.network \\\n  --state-root-hash a306a9cf869e52fe9eacdc28aade94215112cc04b6737b3669c35568a47a7dc2 \\\n  --key 01360af61b50cdcb7b92cffe2c99315d413d34ef77fadee0c105cc4f1d4120f986\n```\n\n----------------------------------------\n\nTITLE: Creating a Reproducible Casper Project\nDESCRIPTION: Creates a Casper project with a rustc wrapper for cross-platform binary reproducibility, which is important for verifying smart contract binaries on the blockchain.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/versioned_docs/version-2.0.0/developers/writing-onchain-code/getting-started.md#2025-04-22_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ncargo casper my_project --wrapper\n```\n\n----------------------------------------\n\nTITLE: Setting up Smart Contract Entity Configuration in Casper Network\nDESCRIPTION: This defines a SmartContract entity configuration with protocol version, package hash, byte code hash, main purse, associated keys, and action thresholds. It represents the core contract entity registered on the Casper blockchain.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/docs/developers/json-rpc/json-rpc-transactional.md#2025-04-22_snippet_15\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"key\": \"entity-contract-eb1c971063155d461059292e91cfe2212d45b79a49294b8d90bdae18cda6e59e\",\n    \"kind\": {\n        \"Write\": {\n            \"AddressableEntity\": {\n                \"protocol_version\": \"2.0.0\",\n                \"entity_kind\": {\n                    \"SmartContract\": \"VmCasperV1\"\n                },\n                \"package_hash\": \"package-154847e85beee3b5cd1c769b8f01dbc4b93d1cea8370c0b3bc1858d0d248a48b\",\n                \"byte_code_hash\": \"byte-code-9639481569c3940ce272402f0e9bc0ea535435ea9ffc18d8696e4af02c841354\",\n                \"main_purse\": \"uref-7a9d9c0c33540e9fd4c1245f6ac687c7eacf98ac1072591adc3f83332a909d86-007\",\n                \"associated_keys\": [\n                    {\n                        \"account_hash\": \"account-hash-58749b769807d041002896ca59f55ec1c87197f66b82d9aee229c91eed7dfc8d\",\n                        \"weight\": 1\n                    }\n                ],\n                \"action_thresholds\": {\n                    \"deployment\": 1,\n                    \"upgrade_management\": 1,\n                    \"key_management\": 1\n                },\n                \"message_topics\": []\n            }\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Redelegating Tokens via Casper Client Auction Contract (Example) - Bash\nDESCRIPTION: This Bash command is a complete example of redelegating tokens via the Casper CLI against a private network. It demonstrates concrete parameter substitution including node address, chain name, secret key path, payment amount (2.5 CSPR), auction session hash, and properly formatted session arguments for validator, amount, delegator, and new validator. The main dependency is the casper-client CLI, and successful execution returns a deploy hash for verifying the redelegation. Users must adapt payment and hash values to their network configuration, and secret/public keys must be valid.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/versioned_docs/version-2.0.0/developers/cli/redelegate.md#2025-04-22_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ncasper-client put-deploy \\\n--node-address http://3.143.158.19:7777  \\\n--chain-name integration-test \\\n--secret-key ~/KEYS/integration/Test_secret_key.pem \\\n--payment-amount 2500000000 \\\n--session-hash hash-e22d38bcf3454a93face78a353feaccbf1d637d1ef9ef2e061a655728ff59bbe \\\n--session-entry-point redelegate \\\n--session-arg \"validator:public_key='017fec504c642f2b321b8591f1c3008348c57a81acafceb5a392cf8416a5fb4a3c'\" \\\n--session-arg \"amount:u512='500000000000'\" \\\n--session-arg \"delegator:public_key='01360af61b50cdcb7b92cffe2c99315d413d34ef77fadee0c105cc4f1d4120f986'\" \\\n--session-arg \"new_validator:public_key='019e7b8bdec03ba83be4f5443d9f7f9111c77fec984ce9bb5bb7eb3da1e689c02d'\"\n```\n\n----------------------------------------\n\nTITLE: Example: Submitting a Testnet Validator Bid via the System Auction Contract - Casper CLI (Bash)\nDESCRIPTION: This Bash command is a concrete example for the Casper Testnet demonstrating how to submit a bid of 10,000 CSPR for validation. The command initializes a deploy, specifying the node address, secret key, chain name, payment amount, contract session hash for Testnet, public key, amount, and delegation rate. The response is a deploy hash for later status querying. All parameters (especially session-args) must accurately reflect current Testnet values and account details.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/docs/operators/becoming-a-validator/bonding.md#2025-04-22_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nsudo -u casper casper-client put-deploy \\\n--node-address http://65.21.75.254:7777 \\\n--chain-name casper-test \\\n--secret-key /etc/casper/validator_keys/secret_key.pem \\\n--payment-amount 2500000000 \\\n--session-hash hash-93d923e336b20a4c4ca14d592b60e5bd3fe330775618290104f9beb326db7ae2 \\\n--session-entry-point add_bid \\\n--session-arg \"public_key:public_key='01c297d2931fec7e22b2fb1ae3ca5afdfacc2c82ba501e8ed158eecef82b4dcdee'\" \\\n--session-arg \"amount:U512='$[10000 * 1000000000]'\" \\\n--session-arg \"delegation_rate:u8='10'\"\n```\n\n----------------------------------------\n\nTITLE: Undelegating via System Auction Contract Example - Casper Client - Bash\nDESCRIPTION: This Bash example demonstrates undelegating 100 CSPR tokens from a validator on the Casper testnet using the system auction contract. It uses actual parameter values for network address, chain name, key file, fixed payment, validator and delegator public keys, and session hash. The command assumes the casper-client CLI is installed and proper keys/permissions are in place. The payment amount is set to 2.5 CSPR in motes, matching network requirements. The result provides a deploy hash for status tracking.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/versioned_docs/version-2.0.0/developers/cli/undelegate.md#2025-04-22_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ncasper-client put-deploy \\\n--node-address http://65.21.75.254:7777  \\\n--chain-name casper-test \\\n--secret-key ~/KEYS/secret_key.pem \\\n--payment-amount 2500000000 \\\n--session-hash hash-93d923e336b20a4c4ca14d592b60e5bd3fe330775618290104f9beb326db7ae2 \\\n--session-entry-point undelegate \\\n--session-arg \"validator:public_key='01aa17f7b9889480b1bd34c3f94f263b229c7a9b01dd4dda19c2dd1d38d176c7a0'\" \\\n--session-arg \"amount:u512='100000000000'\" \\\n--session-arg \"delegator:public_key='01e3d3392c2e0b943abe709b25de5c353e5e1e9d95c7a76e3dd343d8aa1aa08d51'\"\n```\n\n----------------------------------------\n\nTITLE: Calling Smart Contract Entry Points on Casper Network (Rust)\nDESCRIPTION: This command allows calling entry points (functions) defined in smart contracts already on the Casper network. It requires the node address, chain name, secret key path, payment amount, session name, and the entry point to be called.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/versioned_docs/version-1.5.X/resources/beginner/counter-testnet/commands.md#2025-04-22_snippet_3\n\nLANGUAGE: rust\nCODE:\n```\ncasper-client put-deploy \\\n    --node-address [NODE_SERVER_ADDRESS] \\\n    --chain-name casper-test \\\n    --secret-key [KEY_PATH]/secret_key.pem \\\n    --payment-amount [PAYMENT_AMOUNT_IN_MOTES] \\\n    --session-name \"counter\" \\\n    --session-entry-point \"counter_inc\"\n```\n\n----------------------------------------\n\nTITLE: Defining Executable Deploy Payload Schema - JSON\nDESCRIPTION: This snippet presents a JSON schema using a \"oneOf\" construct to represent multiple kinds of executables for a Casper Network Deploy. Each sub-schema describes a unique deployment method: uploading raw Wasm as bytes, executing stored contracts (by hash or name), versioned contract execution (by hash or name), and native transfers. Fields reference other reusable schemas such as `RuntimeArgs`, `Bytes`, `AddressableEntityHash`, and `PackageHash` for modular specification of contract parameters and runtime arguments. Required fields and property constraints ensure valid construction of deploy messages for the blockchain, supporting both flexible contract execution and strong input validation.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/condor/jsonrpc-comp/rpc-2.0/schema/ExecutableDeployItem.json.md#2025-04-22_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"description\": \"The executable component of a [`Deploy`].\",\n    \"oneOf\": [\n        {\n            \"description\": \"Executable specified as raw bytes that represent Wasm code and an instance of [`RuntimeArgs`].\",\n            \"type\": \"object\",\n            \"required\": [\n                \"ModuleBytes\"\n            ],\n            \"properties\": {\n                \"ModuleBytes\": {\n                    \"type\": \"object\",\n                    \"required\": [\n                        \"args\",\n                        \"module_bytes\"\n                    ],\n                    \"properties\": {\n                        \"module_bytes\": {\n                            \"description\": \"Hex-encoded raw Wasm bytes.\",\n                            \"allOf\": [\n                                {\n                                    \"$ref\": \"#/components/schemas/Bytes\"\n                                }\n                            ]\n                        },\n                        \"args\": {\n                            \"description\": \"Runtime arguments.\",\n                            \"allOf\": [\n                                {\n                                    \"$ref\": \"#/components/schemas/RuntimeArgs\"\n                                }\n                            ]\n                        }\n                    },\n                    \"additionalProperties\": false\n                }\n            },\n            \"additionalProperties\": false\n        },\n        {\n            \"description\": \"Stored contract referenced by its [`AddressableEntityHash`], entry point and an instance of [`RuntimeArgs`].\",\n            \"type\": \"object\",\n            \"required\": [\n                \"StoredContractByHash\"\n            ],\n            \"properties\": {\n                \"StoredContractByHash\": {\n                    \"type\": \"object\",\n                    \"required\": [\n                        \"args\",\n                        \"entry_point\",\n                        \"hash\"\n                    ],\n                    \"properties\": {\n                        \"hash\": {\n                            \"description\": \"Hex-encoded contract hash.\",\n                            \"allOf\": [\n                                {\n                                    \"$ref\": \"#/components/schemas/AddressableEntityHash\"\n                                }\n                            ]\n                        },\n                        \"entry_point\": {\n                            \"description\": \"Name of an entry point.\",\n                            \"type\": \"string\"\n                        },\n                        \"args\": {\n                            \"description\": \"Runtime arguments.\",\n                            \"allOf\": [\n                                {\n                                    \"$ref\": \"#/components/schemas/RuntimeArgs\"\n                                }\n                            ]\n                        }\n                    },\n                    \"additionalProperties\": false\n                }\n            },\n            \"additionalProperties\": false\n        },\n        {\n            \"description\": \"Stored contract referenced by a named key existing in the signer's account context, entry point and an instance of [`RuntimeArgs`].\",\n            \"type\": \"object\",\n            \"required\": [\n                \"StoredContractByName\"\n            ],\n            \"properties\": {\n                \"StoredContractByName\": {\n                    \"type\": \"object\",\n                    \"required\": [\n                        \"args\",\n                        \"entry_point\",\n                        \"name\"\n                    ],\n                    \"properties\": {\n                        \"name\": {\n                            \"description\": \"Named key.\",\n                            \"type\": \"string\"\n                        },\n                        \"entry_point\": {\n                            \"description\": \"Name of an entry point.\",\n                            \"type\": \"string\"\n                        },\n                        \"args\": {\n                            \"description\": \"Runtime arguments.\",\n                            \"allOf\": [\n                                {\n                                    \"$ref\": \"#/components/schemas/RuntimeArgs\"\n                                }\n                            ]\n                        }\n                    },\n                    \"additionalProperties\": false\n                }\n            },\n            \"additionalProperties\": false\n        },\n        {\n            \"description\": \"Stored versioned contract referenced by its [`PackageHash`], entry point and an instance of [`RuntimeArgs`].\",\n            \"type\": \"object\",\n            \"required\": [\n                \"StoredVersionedContractByHash\"\n            ],\n            \"properties\": {\n                \"StoredVersionedContractByHash\": {\n                    \"type\": \"object\",\n                    \"required\": [\n                        \"args\",\n                        \"entry_point\",\n                        \"hash\"\n                    ],\n                    \"properties\": {\n                        \"hash\": {\n                            \"description\": \"Hex-encoded contract package hash.\",\n                            \"allOf\": [\n                                {\n                                    \"$ref\": \"#/components/schemas/PackageHash\"\n                                }\n                            ]\n                        },\n                        \"version\": {\n                            \"description\": \"An optional version of the contract to call. It will default to the highest enabled version if no value is specified.\",\n                            \"type\": [\n                                \"integer\",\n                                \"null\"\n                            ],\n                            \"format\": \"uint32\",\n                            \"minimum\": 0\n                        },\n                        \"entry_point\": {\n                            \"description\": \"Entry point name.\",\n                            \"type\": \"string\"\n                        },\n                        \"args\": {\n                            \"description\": \"Runtime arguments.\",\n                            \"allOf\": [\n                                {\n                                    \"$ref\": \"#/components/schemas/RuntimeArgs\"\n                                }\n                            ]\n                        }\n                    },\n                    \"additionalProperties\": false\n                }\n            },\n            \"additionalProperties\": false\n        },\n        {\n            \"description\": \"Stored versioned contract referenced by a named key existing in the signer's account context, entry point and an instance of [`RuntimeArgs`].\",\n            \"type\": \"object\",\n            \"required\": [\n                \"StoredVersionedContractByName\"\n            ],\n            \"properties\": {\n                \"StoredVersionedContractByName\": {\n                    \"type\": \"object\",\n                    \"required\": [\n                        \"args\",\n                        \"entry_point\",\n                        \"name\"\n                    ],\n                    \"properties\": {\n                        \"name\": {\n                            \"description\": \"Named key.\",\n                            \"type\": \"string\"\n                        },\n                        \"version\": {\n                            \"description\": \"An optional version of the contract to call. It will default to the highest enabled version if no value is specified.\",\n                            \"type\": [\n                                \"integer\",\n                                \"null\"\n                            ],\n                            \"format\": \"uint32\",\n                            \"minimum\": 0\n                        },\n                        \"entry_point\": {\n                            \"description\": \"Entry point name.\",\n                            \"type\": \"string\"\n                        },\n                        \"args\": {\n                            \"description\": \"Runtime arguments.\",\n                            \"allOf\": [\n                                {\n                                    \"$ref\": \"#/components/schemas/RuntimeArgs\"\n                                }\n                            ]\n                        }\n                    },\n                    \"additionalProperties\": false\n                }\n            },\n            \"additionalProperties\": false\n        },\n        {\n            \"description\": \"A native transfer which does not contain or reference a Wasm code.\",\n            \"type\": \"object\",\n            \"required\": [\n                \"Transfer\"\n            ],\n            \"properties\": {\n                \"Transfer\": {\n                    \"type\": \"object\",\n                    \"required\": [\n                        \"args\"\n                    ],\n                    \"properties\": {\n                        \"args\": {\n                            \"description\": \"Runtime arguments.\",\n                            \"allOf\": [\n                                {\n                                    \"$ref\": \"#/components/schemas/RuntimeArgs\"\n                                }\n                            ]\n                        }\n                    },\n                    \"additionalProperties\": false\n                }\n            },\n            \"additionalProperties\": false\n        }\n    ]\n} \n```\n\n----------------------------------------\n\nTITLE: Evaluating and Comparing Results in Casper Contract Tests\nDESCRIPTION: This code snippet shows how to retrieve and verify the results of a Casper contract execution in a test environment. It demonstrates querying a value and comparing it to an expected result.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/versioned_docs/version-2.0.0/developers/writing-onchain-code/testing-contracts.md#2025-04-22_snippet_7\n\nLANGUAGE: rust\nCODE:\n```\nlet incremented_count = builder\n    .query(None, count_key, &[])\n    .expect(\"should be stored value.\")\n    .as_cl_value()\n    .expect(\"should be cl value.\")\n    .clone()\n    .into_t::<i32>()\n    .expect(\"should be i32.\");\n\nassert_eq!(incremented_count, 1);\n```\n\n----------------------------------------\n\nTITLE: Querying Dictionary Items via ContractNamedKey Using Casper Client\nDESCRIPTION: Command-line example for querying a dictionary item using the Casper client's get-dictionary-item command. This approach uses the contract hash and dictionary name to locate the item.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/versioned_docs/version-1.5.X/concepts/dictionaries.md#2025-04-22_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\ncasper-client get-dictionary-item \\\n    --node-address http://localhost:11101 \\\n    --state-root-hash 50c34ccbe1315d58ce22bf7518071164d16acd20a1becb0b423293418297416d \\\n    --contract-hash hash-09c8fa7c1441ae7c1cbe27ae3a722fd4ffc5290315f8546454454c1b9f85c842 \\\n    --dictionary-name <String> \\\n    --dictionary-item-key <String>\n```\n\n----------------------------------------\n\nTITLE: Generating Account Keys in JavaScript\nDESCRIPTION: Function to generate Ed25519 key pairs for Casper accounts, export them as PEM files, and return the account address. Creates a new directory 'casper_keys' to store the generated keys.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/docs/developers/dapps/sdk/script-sdk.md#2025-04-22_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nconst fs = require(\"fs\");\nconst path = require(\"path\");\nconst { Keys } = require(\"casper-js-sdk\");\n\nconst createAccountKeys = () => {\n    // Generating keys\n    const edKeyPair = Keys.Ed25519.new();\n    const { publicKey, privateKey } = edKeyPair;\n\n    // Create a hexadecimal representation of the public key\n    const accountAddress = publicKey.toHex();\n\n    // Get the account hash (Uint8Array) from the public key\n    const accountHash = publicKey.toAccountHash();\n\n    // Store keys as PEM files\n    const publicKeyInPem = edKeyPair.exportPublicKeyInPem();\n    const privateKeyInPem = edKeyPair.exportPrivateKeyInPem();\n\n    const folder = path.join(\"./\", \"casper_keys\");\n\n    if (!fs.existsSync(folder)) {\n        const tempDir = fs.mkdirSync(folder);\n    }\n\n    fs.writeFileSync(folder + \"/\" + accountAddress + \"_public.pem\", publicKeyInPem);\n    fs.writeFileSync(folder + \"/\" + accountAddress + \"_private.pem\", privateKeyInPem);\n\n    return accountAddress;\n};\n\nconst newAccountAddress = createAccountKeys();\n```\n\n----------------------------------------\n\nTITLE: Querying Contract Entry Points with Casper Client\nDESCRIPTION: This snippet demonstrates querying a contract's entry point, specifically querying the argument 'name', using the Casper client through a global state query command. It requires the `casper-client` tool and access to a node's address alongside the state root hash and key. The command returns the stored value of the queried entry point, with inputs including node address, state root hash, and account hash. Expected output is a JSON object detailing the queried CLValue, here exemplified by 'CasperTest'.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/versioned_docs/version-1.5.X/resources/tokens/cep18/full-tutorial.md#2025-04-22_snippet_16\n\nLANGUAGE: bash\nCODE:\n```\ncasper-client query-global-state --node-address http://95.216.24.237:7777 \\\n--state-root-hash D00dF8c35B0E9995c2911803F37A212d82c960D9bC5bA3C4F99a661e18D09411 \\\n--key account-hash-7f4bf39A311a7538d8C91BB86C71DF774023e16bc4a70ab7e4e8AE77DbF2Ef53 \\\n-q \"test_contract/name\"\n```\n\n----------------------------------------\n\nTITLE: Querying Account Information with Casper Client Bash Command\nDESCRIPTION: This Bash command queries the global state to obtain account information using the Casper client. It requires the state root hash, node address, and a hex-encoded public key or account hash as input parameters. Verbose output can be enabled to show the JSON-RPC request/response details.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/docs/resources/beginner/querying-network.md#2025-04-22_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ncasper-client query-global-state \\\n  --id 4 \\\n  --node-address http://<node-ip-address>:7777 \\\n  --state-root-hash <state-root-hash> \\\n  --key <hex-encoded-source-account-public-key>\n```\n\nLANGUAGE: bash\nCODE:\n```\ncasper-client query-global-state -v \\\n  --id 4 \\\n  --node-address https://node.testnet.casper.network \\\n  --state-root-hash a306a9cf869e52fe9eacdc28aade94215112cc04b6737b3669c35568a47a7dc2 \\\n  --key 01360af61b50cdcb7b92cffe2c99315d413d34ef77fadee0c105cc4f1d4120f986\n```\n\n----------------------------------------\n\nTITLE: Transferring CEP-18 Tokens from an Allowance using Casper Client\nDESCRIPTION: This command allows an account to transfer CEP-18 tokens held by another account up to their approved allowance. It specifies the owner, recipient, and amount of tokens to be transferred.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/docs/resources/tokens/cep18/transfer.md#2025-04-22_snippet_6\n\nLANGUAGE: json\nCODE:\n```\ncasper-client put-deploy -n http://<NODE IP>:<PORT> \\\n--chain-name <CHAIN NAME> \\\n--secret-key ~/casper/demo/user_a/secret_key.pem \\\n--session-hash hash-05d893e76c731729fc26339e5a970bd79fbf4a6adf743c8385431fb494bff45e \\\n--session-entry-point \"transfer_from\" \\\n--session-arg \"owner:key='account-hash-39f15c23df9be1244572bb499fac62cbcad3cab2dc1438609842f602f943d7d2'\" \\\n--session-arg \"recipient:key='account-hash-17192017d32db5dc9f598bf8ac6ac35ee4b64748669b00572d88335941479513'\" \\\n--session-arg \"amount:u256='10'\" \\\n--payment-amount \"10000000000\"\n```\n\n----------------------------------------\n\nTITLE: Sending Transfer Transaction in Casper Network using Go SDK\nDESCRIPTION: Demonstrates how to create and send a transfer transaction on the Casper network. Includes setting up the deploy header, payment, and session parameters for the transfer.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/docs/developers/dapps/sdk/go-sdk.md#2025-04-22_snippet_2\n\nLANGUAGE: go\nCODE:\n```\npackage main\n\nimport (\n    \"context\"\n    \"encoding/hex\"\n    \"log\"\n    \"math/big\"\n    \"net/http\"\n\n    \"github.com/make-software/casper-go-sdk/casper\"\n    \"github.com/make-software/casper-go-sdk/types/clvalue\"\n)\n\nfunc main() {\n    accountPublicKey, err := casper.NewPublicKey(\"012488699f9a31e36ecf002675cd7186b48e6a735d10ec1b308587ca719937752c\")\n    if err != nil { return }\n    amount := big.NewInt(100000000)\n    session := casper.ExecutableDeployItem{\n        ModuleBytes: &casper.ModuleBytes{\n            ModuleBytes: hex.EncodeToString([]byte(\"<Contract WASM>\")),\n            Args: (&casper.Args{}).\n                AddArgument(\"target\", clvalue.NewCLByteArray(accountPublicKey.AccountHash().Bytes())).\n                AddArgument(\"amount\", *clvalue.NewCLUInt512(amount)),\n        },\n    }\n\n    payment := casper.StandardPayment(amount)\n\n    deployHeader := casper.DefaultHeader()\n    deployHeader.Account = accountPublicKey\n    deployHeader.ChainName = \"casper-test\"\n\n    newDeploy, err := casper.MakeDeploy(deployHeader, payment, session)\n\n    handler := casper.NewRPCHandler(\"https://<Node Address>:7777/rpc\", http.DefaultClient)\n    client := casper.NewRPCClient(handler)\n    result, err := client.PutDeploy(context.Background(), *newDeploy)\n\n    log.Println(result.DeployHash)\n}\n```\n\n----------------------------------------\n\nTITLE: Retrieving Deploy Data via Casper Go SDK\nDESCRIPTION: The Go code snippet demonstrates how to retrieve a deploy object from the Casper network using the Go SDK. It initializes a new RPC handler and client, and fetches deploy data using the deploy hash. Dependencies include 'github.com/make-software/casper-go-sdk/casper' and net/http. The function's input is a deploy hash, and its output is the deploy hash printed to the console.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/versioned_docs/version-2.0.0/developers/dapps/sdk/go-sdk.md#2025-04-22_snippet_0\n\nLANGUAGE: go\nCODE:\n```\npackage main\n\nimport (\n    \"context\"\n    \"fmt\"\n    \"net/http\"\n\n    \"github.com/make-software/casper-go-sdk/casper\"\n)\n\nfunc main() {\n    handler := casper.NewRPCHandler(\"https://<Node Address and Port>/rpc\", http.DefaultClient)\n    client := casper.NewRPCClient(handler)\n    deployHash := \"62972eddc6fdc03b7ec53e52f7da7e24f01add9a74d68e3e21d924051c43f126\"\n    deploy, err := client.GetDeploy(context.Background(), deployHash)\n    if err != nil {\n        return\n    }\n    fmt.Println(deploy.Deploy.Hash)\n}\n```\n\n----------------------------------------\n\nTITLE: Specifying Rust Nightly Toolchain\nDESCRIPTION: Contents of the rust-toolchain file specifying a nightly version of Rust to be used for the project. This ensures consistent toolchain usage across development environments.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/versioned_docs/version-2.0.0/developers/writing-onchain-code/getting-started.md#2025-04-22_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nnightly-2022-08-03\n```\n\n----------------------------------------\n\nTITLE: Handling Deploy Processed Events with Casper Go SDK\nDESCRIPTION: This Go snippet illustrates how to listen and handle 'DeployProcessed' events on Casper Network using SSE client. It sets up an SSE client that registers an event handler and processes raw events by parsing them. Required libraries include 'github.com/make-software/casper-go-sdk/sse' and context. It logs the deploy hash when an event is processed and handles errors appropriately.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/versioned_docs/version-2.0.0/developers/dapps/sdk/go-sdk.md#2025-04-22_snippet_1\n\nLANGUAGE: go\nCODE:\n```\npackage main\n\nimport (\n    \"context\"\n    \"log\"\n\n    \"github.com/make-software/casper-go-sdk/sse\"\n)\n\nfunc main() {\n    client := sse.NewClient(\"https://<Node Address and Port>/events\")\n    defer client.Stop()\n    client.RegisterHandler(\n        sse.DeployProcessedEventType,\n        func(ctx context.Context, rawEvent sse.RawEvent) error {\n            deploy, err := rawEvent.ParseAsDeployProcessedEvent()\n            if err != nil {\n                return err\n            }\n            log.Printf(\"Deploy hash: %s\", deploy.DeployProcessed.DeployHash)\n            return nil\n        })\n    lastEventID := 1234\n    client.Start(context.TODO(), lastEventID)\n}\n```\n\n----------------------------------------\n\nTITLE: Test the Casper Contract\nDESCRIPTION: By running make test, this command builds the Casper smart contract in release mode and executes predefined tests within the Casper runtime environment, ensuring the contract behaves as expected.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/versioned_docs/version-1.5.X/developers/writing-onchain-code/getting-started.md#2025-04-22_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\nmake test\n```\n\n----------------------------------------\n\nTITLE: Initializing InMemoryWasmTestBuilder for Casper Contract Tests - Rust\nDESCRIPTION: Creates an instance of the in-memory test builder, which provides an isolated Casper execution environment for testing WASM contracts and session code. Use default() unless specific configuration is required. This builder is necessary for executing genesis, deploying contracts, and applying transaction requests in test contexts. The instance is mutable to allow further test environment manipulation.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/docs/developers/writing-onchain-code/testing-session-code.md#2025-04-22_snippet_6\n\nLANGUAGE: rust\nCODE:\n```\n    let mut builder = InMemoryWasmTestBuilder::default();\n```\n\n----------------------------------------\n\nTITLE: Calling Contract Entry Points from Session Code (Rust)\nDESCRIPTION: These lines show how to invoke entry points (`counter_get` and `counter_inc`) in a contract from session code using runtime::call_contract. The `contract_hash`, `COUNTER_GET`, and `COUNTER_INC` are expected to be defined elsewhere. Inputs: contract hash reference, entry point name, empty runtime arguments. Outputs: incremented counter or current value as u32. Requires casper-contract crate and proper Wasm build.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/versioned_docs/version-1.5.X/developers/writing-onchain-code/writing-session-code.md#2025-04-22_snippet_4\n\nLANGUAGE: rust\nCODE:\n```\n    // Call the counter to get the current value.\n    let current_counter_value: u32 =\n        runtime::call_contract(contract_hash, COUNTER_GET, RuntimeArgs::new());\n\n    // Call the counter to increment the value.\n    let _: () = runtime::call_contract(contract_hash, COUNTER_INC, RuntimeArgs::new());\n```\n\n----------------------------------------\n\nTITLE: Transferring Tokens to Public Key Using Session Code\nDESCRIPTION: Rust code example demonstrating how to transfer tokens to a public key using session code on the Casper Network.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/versioned_docs/version-2.0.0/developers/writing-onchain-code/writing-session-code.md#2025-04-22_snippet_7\n\nLANGUAGE: rust\nCODE:\n```\n#[no_mangle]\npub extern \"C\" fn call() {\n    let account_hash: PublicKey = runtime::get_named_arg(ARG_TARGET);\n    let transfer_amount: U512 = runtime::get_named_arg(ARG_AMOUNT);\n    system::transfer_to_public_key(account_hash, transfer_amount, None).unwrap_or_revert();\n}\n```\n\n----------------------------------------\n\nTITLE: Querying Global State for Account Details\nDESCRIPTION: This command queries the global state using an account hash to retrieve account details. It requires the node address, state root hash, and account hash.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/docs/developers/cli/querying-global-state.md#2025-04-22_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\ncasper-client query-global-state \\\n--node-address [NODE_SERVER_ADDRESS] \\\n--state-root-hash [STATE_ROOT_HASH] \\\n--key [ACCOUNT_HASH]\n```\n\n----------------------------------------\n\nTITLE: Implementing CEP-18 Token Transfer Test in Rust\nDESCRIPTION: A helper function that tests the ability to transfer CEP-18 tokens between addresses. It checks balances before and after transfers to ensure correct functionality.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/versioned_docs/version-2.0.0/resources/tokens/cep18/tests.md#2025-04-22_snippet_5\n\nLANGUAGE: rust\nCODE:\n```\npub(crate) fn test_cep18_transfer(\n    builder: &mut InMemoryWasmTestBuilder,\n    test_context: &TestContext,\n    sender1: Key,\n    recipient1: Key,\n    sender2: Key,\n    recipient2: Key) {\n    let TestContext { cep18_token, .. } = test_context;\n\n    // Defining the amount to be transferred to each account.\n\n    let transfer_amount_1 = U256::from(TRANSFER_AMOUNT_1);\n    let transfer_amount_2 = U256::from(TRANSFER_AMOUNT_2);\n\n    // Checking the pre-existing balances of the default address and the two receiving addresses.\n\n    let sender_balance_before = cep18_check_balance_of(builder, cep18_token, sender1);\n    assert_ne!(sender_balance_before, U256::zero());\n\n    let account_1_balance_before = cep18_check_balance_of(builder, cep18_token, recipient1);\n    assert_eq!(account_1_balance_before, U256::zero());\n\n    let account_2_balance_before = cep18_check_balance_of(builder, cep18_token, recipient1);\n    assert_eq!(account_2_balance_before, U256::zero());\n\n    // Creating the first transfer request.\n\n    let token_transfer_request_1 =\n        make_cep18_transfer_request(sender1, cep18_token, recipient1, transfer_amount_1);\n\n    builder\n        .exec(token_transfer_request_1)\n        .expect_success()\n        .commit();\n\n    // Checking the prior balance against the new balance to ensure the transfer occurred correctly.\n\n    let account_1_balance_after = cep18_check_balance_of(builder, cep18_token, recipient1);\n    assert_eq!(account_1_balance_after, transfer_amount_1);\n    let account_1_balance_before = account_1_balance_after;\n\n    let sender_balance_after = cep18_check_balance_of(builder, cep18_token, sender1);\n    assert_eq!(\n        sender_balance_after,\n        sender_balance_before - transfer_amount_1\n    );\n    let sender_balance_before = sender_balance_after;\n\n    // Creating the second transfer request.\n\n    let token_transfer_request_2 =\n        make_cep18_transfer_request(sender2, cep18_token, recipient2, transfer_amount_2);\n\n    builder\n        .exec(token_transfer_request_2)\n        .expect_success()\n        .commit();\n\n    // Checking prior balances against new balances.\n\n    let sender_balance_after = cep18_check_balance_of(builder, cep18_token, sender1);\n    assert_eq!(sender_balance_after, sender_balance_before);\n\n    let account_1_balance_after = cep18_check_balance_of(builder, cep18_token, recipient1);\n    assert!(account_1_balance_after < account_1_balance_before);\n    assert_eq!(\n        account_1_balance_after,\n        transfer_amount_1 - transfer_amount_2\n    );\n\n    let account_2_balance_after = cep18_check_balance_of(builder, cep18_token, recipient2);\n    assert_eq!(account_2_balance_after, transfer_amount_2);\n}\n```\n\n----------------------------------------\n\nTITLE: Installing supervisor Process Manager\nDESCRIPTION: Command to install supervisor, a cross-platform process manager, within the Python virtual environment using pip.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/versioned_docs/version-2.0.0/developers/dapps/setup-nctl.md#2025-04-22_snippet_11\n\nLANGUAGE: bash\nCODE:\n```\n(env) $ pip install supervisor\n```\n\n----------------------------------------\n\nTITLE: Transferring Funds Between Purses in Casper Network Using Python\nDESCRIPTION: Complete example of how to transfer funds between two purses on a Casper network. This script sets up a connection to a node, defines the sender and receiver, creates a transfer deploy, approves it, and sends it to the network.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/versioned_docs/version-2.0.0/developers/dapps/sdk/python-sdk.md#2025-04-22_snippet_2\n\nLANGUAGE: python\nCODE:\n```\n    import os\n    import pathlib\n    import random\n    import typing\n\n    import pycspr\n    from pycspr.client import NodeClient\n    from pycspr.client import NodeConnectionInfo\n    from pycspr.crypto import KeyAlgorithm\n    from pycspr.types import PrivateKey\n    from pycspr.types import Deploy\n    from pycspr.types import PublicKey\n\n    # path to cp1 secret key - defaults to NCTL user 1.\n    path_to_cp1_secret_key = pathlib.Path(os.getenv(\"NCTL\")) / \"assets\" / \"net-1\" / \"users\" / \"user-1\" / \"secret_key.pem\"\n\n    # type of cp1 secret key - defaults to ED25519.\n    type_of_cp1_secret_key = KeyAlgorithm.ED25519.name,\n\n    # path to cp2 account key - defaults to NCTL user 2.\n    path_to_cp2_account_key = pathlib.Path(os.getenv(\"NCTL\")) / \"assets\" / \"net-1\" / \"users\" / \"user-2\" / \"public_key_hex\"\n\n    # name of target chain - defaults to NCTL chain.\n    chain_name = \"casper-net-1\"\n\n    # host address of target node - defaults to NCTL node 1.\n    node_host = \"localhost\"\n\n    # Node API JSON-RPC port - defaults to 11101 @ NCTL node 1.\n    node_port_rpc = 11101\n\n    def _main(node_host, node_port_rpc, path_to_cp1_secret_key, type_of_cp1_secret_key,path_to_cp2_account_key, chain_name):\n        \"\"\"Main entry point.\n        :param args: Parsed command line arguments.\n        \"\"\"\n        # Set node client.\n        client = _get_client(node_host, node_port_rpc)\n\n        # Set counter-parties.\n        cp1, cp2 = _get_counter_parties(path_to_cp1_secret_key, type_of_cp1_secret_key,path_to_cp2_account_key)\n\n        # Set deploy.\n        deploy: Deploy = _get_deploy(chain_name, cp1, cp2)\n\n        # Approve deploy.\n        deploy.approve(cp1)\n\n        # Dispatch deploy to a node.\n        client.deploys.send(deploy)\n\n        #If deploy is successful send the indication\n        print(f\"Deploy dispatched to node [{node_host}]: {deploy.hash.hex()}\")\n\n\n    def _get_client(node_host, node_port_rpc) -> NodeClient:\n        \"\"\"Returns a pycspr client instance.\n        \"\"\"\n        return NodeClient(NodeConnectionInfo(\n            host=node_host,\n            port_rpc=node_port_rpc,\n        ))\n\n\n    def _get_counter_parties(path_to_cp1_secret_key, type_of_cp1_secret_key,path_to_cp2_account_key) -> typing.Tuple[PrivateKey, PublicKey]:\n        \"\"\"Returns the 2 counter-parties participating in the transfer.\n        \"\"\"\n        cp1 = pycspr.parse_private_key(\n            path_to_cp1_secret_key,\n            type_of_cp1_secret_key,\n            )\n        cp2 = pycspr.parse_public_key(\n            path_to_cp2_account_key\n            )    \n\n        return cp1, cp2\n\n\n    def _get_deploy(chain_name, cp1: PrivateKey, cp2: PublicKey) -> Deploy:\n        \"\"\"Returns transfer deploy to be dispatched to a node.\n        \"\"\"\n        # Set standard deploy parameters.\n        deploy_params = pycspr.create_deploy_parameters(\n            account = cp1,\n            chain_name = chain_name\n            )\n\n        # Set deploy.\n        deploy = pycspr.create_native_transfer(\n            params = deploy_params,\n            amount = int(2.5e9),\n            target = cp2.account_hash,\n            correlation_id = random.randint(1, 1e6)\n            )\n\n        return deploy\n\n\n    # Entry point.\n    if __name__ == '__main__':\n        _main(node_host, node_port_rpc, path_to_cp1_secret_key, type_of_cp1_secret_key, path_to_cp2_account_key, chain_name)\n```\n\n----------------------------------------\n\nTITLE: Deploying CEP-78 NFT Contract Using Casper CLI - Bash Example\nDESCRIPTION: Demonstrates how to deploy the CEP-78 NFT smart contract on the Casper Network using the Rust-based Casper client via the command line. This bash command specifies essential session arguments such as collection name, symbol, supply, modalities, and metadata configuration. Dependencies include the Casper CLI client, appropriate network and payment setup, a pre-built contract Wasm file, and the required installer arguments as specified in the documentation. Required inputs are session arguments (string, u8, u64 types) for contract initialization; output is a deploy submitted to the network. Ensure all prerequisites (CLI tools, Wasm/contract binaries, and key files) are met prior to execution.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/docs/resources/tokens/cep78/introduction.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ncasper-client put-deploy -n http://65.108.0.148:7777/rpc --chain-name \"casper-test\" --payment-amount 500000000000 -k keys/secret_key.pem --session-path contract/target/wasm32-unknown-unknown/release/contract.wasm \\\n--session-arg \"collection_name:string='enhanced-nft-1'\" \\\n--session-arg \"collection_symbol:string='ENFT-1'\" \\\n--session-arg \"total_token_supply:u64='10'\" \\\n--session-arg \"ownership_mode:u8='0'\" \\\n--session-arg \"nft_kind:u8='1'\" \\\n--session-arg \"json_schema:string='nft-schema'\" \\\n--session-arg \"allow_minting:bool='true'\" \\\n--session-arg \"owner_reverse_lookup_mode:u8='0'\" \\\n--session-arg \"nft_metadata_kind:u8='2'\" \\\n--session-arg \"identifier_mode:u8='0'\" \\\n--session-arg \"metadata_mutability:u8='1'\"\n```\n\n----------------------------------------\n\nTITLE: Defining Constants for a Casper Smart Contract in Rust\nDESCRIPTION: This code defines several string constants (`&str`) used throughout the counter contract. These constants represent names for the contract package, access URef, entry points (`counter_inc`, `counter_get`), and keys used for storing data in the contract's context (`version`, `counter`, `count`). Using constants improves code readability and maintainability by centralizing these key identifiers.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/docs/developers/writing-onchain-code/simple-contract.md#2025-04-22_snippet_9\n\nLANGUAGE: rust\nCODE:\n```\n// Creating constants for values within the contract package.\nconst CONTRACT_PACKAGE_NAME: &str = \"counter_package_name\";\nconst CONTRACT_ACCESS_UREF: &str = \"counter_access_uref\";\n\n// Creating constants for the various contract entry points.\nconst ENTRY_POINT_COUNTER_INC: &str = \"counter_inc\";\nconst ENTRY_POINT_COUNTER_GET: &str = \"counter_get\";\n\n// Creating constants for values within the contract.\nconst CONTRACT_VERSION_KEY: &str = \"version\";\nconst CONTRACT_KEY: &str = \"counter\";\nconst COUNT_KEY: &str = \"count\";\n```\n\n----------------------------------------\n\nTITLE: Linting a Casper Smart Contract using Make and Clippy - Bash\nDESCRIPTION: This command invokes the 'make check-lint' target within the smart contract project directory, which typically runs the 'clippy' linter against the Rust contract codebase. It ensures code quality and best practices. Requires a GNU Makefile with a 'check-lint' target configured to run linting tools. Prerequisites: Cache dependencies and clippy must be available in the toolchain.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/docs/developers/writing-onchain-code/getting-started.md#2025-04-22_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\nmake check-lint\n```\n\n----------------------------------------\n\nTITLE: Creating Named Keys in Casper Contract\nDESCRIPTION: This code snippet shows how to create named keys in a Casper smart contract to store data. It creates a named key for the counter value that can be referenced later in the contract.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/docs/developers/writing-onchain-code/simple-contract.md#2025-04-22_snippet_12\n\nLANGUAGE: rust\nCODE:\n```\n    // In the named keys of the counter contract, add a key for the count.\n    let mut counter_named_keys = NamedKeys::new();\n    let key_name = String::from(COUNT_KEY);\n    counter_named_keys.insert(key_name, count_start.into());\n```\n\n----------------------------------------\n\nTITLE: Implementing Entry Points in Casper Contract Call Function\nDESCRIPTION: This code snippet demonstrates how to define a call function and add entry points to a Casper smart contract. It initializes a counter value and sets up public entry points for getting and incrementing the counter.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/docs/developers/writing-onchain-code/simple-contract.md#2025-04-22_snippet_11\n\nLANGUAGE: rust\nCODE:\n```\n#[no_mangle]\npub extern \"C\" fn call() {\n    // Initialize the count to 0 locally\n    let count_start = storage::new_uref(0_i32);\n    // Create the entry points for this contract\n    let mut counter_entry_points = EntryPoints::new();\n\n    counter_entry_points.add_entry_point(EntryPoint::new(\n        ENTRY_POINT_COUNTER_GET,\n        Vec::new(),\n        CLType::I32,\n        EntryPointAccess::Public,\n        EntryPointType::Contract,\n    ));\n\n    counter_entry_points.add_entry_point(EntryPoint::new(\n        ENTRY_POINT_COUNTER_INC,\n        Vec::new(),\n        CLType::Unit,\n        EntryPointAccess::Public,\n        EntryPointType::Contract,\n    ));\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Rust Project for Optimal WASM Size in Casper Smart Contracts\nDESCRIPTION: This code snippet shows how to configure a Rust project's Cargo.toml file to optimize WASM size for Casper smart contracts. It includes settings for codegen units and link-time optimizations to reduce the overall size of the compiled WASM.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/versioned_docs/version-2.0.0/developers/writing-onchain-code/best-practices.md#2025-04-22_snippet_1\n\nLANGUAGE: rust\nCODE:\n```\n#![no_std]\n```\n\n----------------------------------------\n\nTITLE: Installing CEP-18 Main Token Contract\nDESCRIPTION: Command to deploy the main CEP-18 token contract with configurable parameters for name, symbol, total supply and decimals. Requires a node address and secret key for deployment.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/versioned_docs/version-2.0.0/resources/tokens/cep18/quickstart-guide.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ncasper-client put-deploy -n http://<NODE IP>:<PORT> \\\n--chain-name <CHAIN NAME> \\\n--secret-key ~/casper/demo/user_a/secret_key.pem \\\n--session-path ~/casper/demo/cep18.wasm \\\n--session-arg \"name:string='CEP18'\" \\\n--session-arg \"symbol:string='gris'\" \\\n--session-arg \"total_supply:u256='100'\" \\\n--session-arg \"decimals:u8='1'\" \\\n--payment-amount 150000000000\n```\n\n----------------------------------------\n\nTITLE: Querying Contract Entry Points with Casper CLI\nDESCRIPTION: A command to query the global state for a specific contract using an account hash and contract name. This allows verification of contract entry points, particularly to check if new entry points like counter_decrement are visible.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/docs/resources/beginner/upgrade-contract.md#2025-04-22_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\ncasper-client query-global-state \\\n    --node-address http://[NODE_IP]:7777 \\\n    --state-root-hash [STATE_ROOT_HASH] \\\n    --key [ACCOUNT_HASH] -q \"counter\"\n```\n\n----------------------------------------\n\nTITLE: Delegating Tokens for Staking using Python SDK\nDESCRIPTION: This snippet shows how to delegate CSPR tokens for staking using the `pycspr` Python library by deploying the `delegate.wasm` contract. It defines the validator's public key, creates deploy parameters, and uses the helper function `create_validator_delegation` to construct the deploy, specifying the amount (minimum 500 CSPR), delegator key, validator key, and the path to the `delegate.wasm` file. The deploy is then approved, sent, and its hash printed.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/docs/developers/dapps/sdk/client-library-usage.md#2025-04-22_snippet_13\n\nLANGUAGE: python\nCODE:\n```\nimport pycspr\n\nvalidator_public_key = pycspr.factory.accounts.create_public_key_from_account_key(\n    bytes.fromhex(\"01e8c84f4fbb58d37991ef373c08043a45c44cd7f499453fa2bd3e141cc0113b3c\")\n)\n\ndeploy_params = pycspr.create_deploy_parameters(\n    account = keypair, # Only the public key is used, see `create_deploy_parameters`\n    chain_name = \"casper\" # or \"casper-test\" for testnet\n)\n\ndeploy = pycspr.create_validator_delegation(\n    params = deploy_params,\n    amount = int(500e9), # Minimum delegation amount: 500 CSPR\n    public_key_of_delegator = keypair,\n    public_key_of_validator = validator_public_key,\n    path_to_wasm = \"./casper-node/target/wasm32-unknown-unknown/release/delegate.wasm\"\n)\n\ndeploy.approve(keypair)\nclient.send_deploy(deploy)\nprint(deploy.hash.hex())\n```\n\n----------------------------------------\n\nTITLE: Initializing Smart Contract Entry Point in Rust\nDESCRIPTION: This Rust code snippet demonstrates a self-initialization entry point for a Casper smart contract. It initializes a fundraising system by creating a purse and setting up a dictionary to track donations. Dependencies include the Casper SDK and system libraries. Inputs are derived from the platform, and the output includes initial contract state setup without further deployment needed.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/versioned_docs/version-1.5.X/developers/writing-onchain-code/best-practices.md#2025-04-22_snippet_0\n\nLANGUAGE: rust\nCODE:\n```\n#[no_mangle]\npub extern \"C\" fn init() {\n    let fundraising_purse = system::create_purse();\n    runtime::put_key(FUNDRAISING_PURSE, fundraising_purse.into());\n    storage::new_dictionary(LEDGER).unwrap_or_revert();\n}\n```\n\n----------------------------------------\n\nTITLE: Defining NextUpgrade and ActivationPoint Polymorphic Schemas - OpenAPI/Swagger - JSON\nDESCRIPTION: Models the 'NextUpgrade' object schema to specify upcoming protocol version changes, requiring both an activation point and protocol version. The 'ActivationPoint' schema uses 'anyOf' to allow representation by either era ID or genesis timestamp, promoting versioning flexibility within upgrade planning logic.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/condor/jsonrpc-comp/rpc-1.5/schema/components.json.md#2025-04-22_snippet_55\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"description\": \"Information about the next protocol upgrade.\",\n  \"type\": \"object\",\n  \"required\": [\n    \"activation_point\",\n    \"protocol_version\"\n  ],\n  \"properties\": {\n    \"activation_point\": {\n      \"$ref\": \"#/components/schemas/ActivationPoint\"\n    },\n    \"protocol_version\": {\n      \"type\": \"string\"\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Entry Points in Casper Call Function\nDESCRIPTION: Initial implementation of the call function showing how to define entry points for a counter contract. Demonstrates setting up public contract entry points for getting and incrementing a counter value.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/versioned_docs/version-2.0.0/developers/writing-onchain-code/simple-contract.md#2025-04-22_snippet_10\n\nLANGUAGE: rust\nCODE:\n```\n#[no_mangle]\npub extern \"C\" fn call() {\n    // Initialize the count to 0 locally\n    let count_start = storage::new_uref(0_i32);\n    // Create the entry points for this contract\n    let mut counter_entry_points = EntryPoints::new();\n\n    counter_entry_points.add_entry_point(EntryPoint::new(\n        ENTRY_POINT_COUNTER_GET,\n        Vec::new(),\n        CLType::I32,\n        EntryPointAccess::Public,\n        EntryPointType::Contract,\n    ));\n\n    counter_entry_points.add_entry_point(EntryPoint::new(\n        ENTRY_POINT_COUNTER_INC,\n        Vec::new(),\n        CLType::Unit,\n        EntryPointAccess::Public,\n        EntryPointType::Contract,\n    ));\n}\n```\n\n----------------------------------------\n\nTITLE: Transferring CEP-18 Tokens Using Casper Client\nDESCRIPTION: Command to transfer CEP-18 tokens from one account to another using the Casper client. This invokes the transfer entry point on a CEP-18 contract instance, specifying the recipient account and token amount.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/versioned_docs/version-2.0.0/resources/tokens/cep18/transfer.md#2025-04-22_snippet_0\n\nLANGUAGE: json\nCODE:\n```\ncasper-client put-deploy -n http://<node IP>:<PORT> \\\n// The chain name of the Casper network on which your CEP-18 instance was installed.\n--chain-name <CHAIN NAME>\\\n// The local path to your account's secret key.\n--secret-key ~/casper/demo/user_a/secret_key.pem \\\n// The contract hash of your CEP-18 contract instance.\n--session-hash hash-b568f50a64acc8bbe43462ffe243849a88111060b228dacb8f08d42e26985180 \\\n// The name of the entry point you are invoking.\n--session-entry-point \"transfer\" \\\n// The account hash of the account that you are sending CEP-18 tokens to.\n--session-arg \"recipient:key='account-hash-9f81014b9c7406c531ebf0477132283f4eb59143d7903a2fae54358b26cea44b\" \\\n// The amount of CEP-18 tokens you are sending to the receiving account.\n--session-arg \"amount:u256='10'\" \\\n// The gas payment you are allotting, in motes.\n--payment-amount \"10000000000\"\n```\n\n----------------------------------------\n\nTITLE: Implementing Entry Points in Casper Call Function\nDESCRIPTION: Initial implementation of the call function showing how to create and add entry points for contract interaction. Includes setting up a counter and defining public contract entry points for getting and incrementing values.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/versioned_docs/version-1.5.X/developers/writing-onchain-code/simple-contract.md#2025-04-22_snippet_11\n\nLANGUAGE: rust\nCODE:\n```\n#[no_mangle]\npub extern \"C\" fn call() {\n    // Initialize the count to 0 locally\n    let count_start = storage::new_uref(0_i32);\n    // Create the entry points for this contract\n    let mut counter_entry_points = EntryPoints::new();\n\n    counter_entry_points.add_entry_point(EntryPoint::new(\n        ENTRY_POINT_COUNTER_GET,\n        Vec::new(),\n        CLType::I32,\n        EntryPointAccess::Public,\n        EntryPointType::Contract,\n    ));\n\n    counter_entry_points.add_entry_point(EntryPoint::new(\n        ENTRY_POINT_COUNTER_INC,\n        Vec::new(),\n        CLType::Unit,\n        EntryPointAccess::Public,\n        EntryPointType::Contract,\n    ));\n}\n```\n\n----------------------------------------\n\nTITLE: Specifying Rust Toolchain Version (Text)\nDESCRIPTION: Example content for the `rust-toolchain` file, specifying a particular Rust toolchain version (`nightly-2022-08-03`) for the project. This ensures consistent and reproducible builds by locking the Rust compiler version. This file should be placed in the project root and is typically generated by `cargo casper` or created manually. Requires `rustup` to interpret.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/versioned_docs/version-1.5.X/developers/writing-onchain-code/simple-contract.md#2025-04-22_snippet_5\n\nLANGUAGE: text\nCODE:\n```\nnightly-2022-08-03\n```\n\n----------------------------------------\n\nTITLE: Creating Casper Project Automatically with cargo-casper (Bash)\nDESCRIPTION: Demonstrates using the `cargo casper` command to automatically scaffold a new Casper smart contract project named 'my-project'. This command generates the standard directory structure, example contract code, test setup, Makefile, and rust-toolchain file. Requires the `cargo-casper` tool to be installed.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/versioned_docs/version-1.5.X/developers/writing-onchain-code/simple-contract.md#2025-04-22_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ncargo casper my-project\n```\n\n----------------------------------------\n\nTITLE: Complete Cross-Contract Implementation in Rust\nDESCRIPTION: Full contract implementation combining the call and call_contract_2 entry points with all necessary imports and type definitions for cross-contract communication.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/docs/resources/advanced/cross-contract.md#2025-04-22_snippet_13\n\nLANGUAGE: rust\nCODE:\n```\n#![no_std]\n#![no_main]\n\n#[cfg(not(target_arch = \"wasm32\"))]\ncompile_error!(\"target arch should be wasm32: compile with '--target wasm32-unknown-unknown'\");\n\n// We need to explicitly import the std alloc crate and `alloc::string::String` as we are in a\n// `no_std` environment.\nextern crate alloc;\n\n// The elementary types \nuse alloc::string::String;\nuse alloc::vec::Vec;\nuse crate::alloc::string::ToString;\nuse crate::runtime_args::RuntimeArgs;\n\n// Casper crates\nuse casper_types::{\n    api_error::ApiError,\n    contracts::NamedKeys, runtime_args, CLType, Key, ContractHash, Parameter, EntryPoint, EntryPoints, EntryPointType, EntryPointAccess};\n\nuse casper_contract::{\n    unwrap_or_revert::UnwrapOrRevert,\n    contract_api::{runtime, storage},\n};\n\n// The contract key in the account named keys\nconst CONTRACT_HASH: &str = \"hello_world_contract\";\n\n#[no_mangle]\npub extern \"C\" fn call_contract_2() {\n\n    let contract_hash: ContractHash = runtime::get_named_arg::<Key>(CONTRACT_HASH)\n    .into_hash()\n    .map(|hash| ContractHash::new(hash))\n    .unwrap();\n\n    let new_value: String = runtime::get_named_arg(\"new_message\");\n\n    let _: () = runtime::call_contract(\n        contract_hash, \n        \"update_msg\", \n        runtime_args! {\n            // key    => value\n            \"message\" => new_value,\n        },\n     );\n\n}\n\n#[no_mangle]\npub extern \"C\" fn call() {\n    \n    // Create a new vector - this will be the signature of the entrypoint\n    let mut vec = Vec::new();\n    vec.push(Parameter::new(\"new_message\", CLType::String));\n    vec.push(Parameter::new(\"hello_world_contract\", CLType::Key));\n\n    // In the named keys of the contract, add a key for the count.\n    let named_keys = NamedKeys::new();\n\n    // Create an Entry Point Object\n    let mut entry_points = EntryPoints::new();\n\n    // Add the entry point to the entry points object\n    entry_points.add_entry_point(EntryPoint::new(\n       \"call_contract_2\",\n       vec,\n       CLType::Unit,\n       EntryPointAccess::Public,\n       EntryPointType::Contract\n    ));\n\n    // The contract is stored in global state\n    let (stored_contract_hash, _contract_version) = storage::new_contract(\n       entry_points,                                        // entry points\n       Some(named_keys),                                    // named keys \n       Some(\"contract2_package_name\".to_string()),          // package name\n       Some(\"contract2_access_uref\".to_string())            // access uref\n    );\n\n    // To access from the account - named keys of the account\n    runtime::put_key(\"cross_contract_2\", stored_contract_hash.into());\n\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a Locked Contract in Rust\nDESCRIPTION: Code sample showing how to create a locked contract package that can never be upgraded. The function new_locked_contract takes contract entry points, named keys, and optional name strings for the package and access URef.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/docs/resources/beginner/upgrade-contract.md#2025-04-22_snippet_13\n\nLANGUAGE: rust\nCODE:\n```\nlet (stored_contract_hash, _) = storage::new_locked_contract(\n    contract_entry_points, \n    Some(contract_named_keys), \n    Some(\"contract_package_name\".to_string()),\n    Some(\"contract_access_uref\".to_string()),\n);\n```\n\n----------------------------------------\n\nTITLE: Deploying Counter Contract Wasm using Casper Client\nDESCRIPTION: This command deploys the compiled `counter-v1.wasm` smart contract to the Casper Testnet. It requires specifying the node address, target chain name, the path to the deployer's secret key for signing, a payment amount in motes, and the path to the Wasm file (`--session-path`). The command returns a deploy hash upon successful submission.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/docs/resources/beginner/counter-testnet/walkthrough.md#2025-04-22_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\ncasper-client put-deploy \\\n    --node-address http://[NODE_IP]:7777 \\\n    --chain-name casper-test \\\n    --secret-key [PATH_TO_YOUR_KEY]/secret_key.pem \\\n    --payment-amount [PAYMENT_AMOUNT_IN_MOTES] \\\n    --session-path ./contract-v1/target/wasm32-unknown-unknown/release/counter-v1.wasm\n```\n\n----------------------------------------\n\nTITLE: Building Deploy Item With Authorization Keys - Casper Test Framework - Rust\nDESCRIPTION: This snippet demonstrates the construction of a deploy item for a Casper test using DeployItemBuilder, with session code and custom authorization keys. It highlights how to specify payment, set the deploy's address, and provide session arguments for contract interaction. Dependencies include the Casper test framework, runtime_args! macro, and properly configured account and contract wasm paths. The inputs are the contract WASM file, authorization keys, and payment arguments; the output is a DeployItem ready for execution in the test framework.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/versioned_docs/version-1.5.X/resources/advanced/list-auth-keys-tutorial.md#2025-04-22_snippet_14\n\nLANGUAGE: rust\nCODE:\n```\nlet session_code = PathBuf::from(CONTRACT_WASM);\n\nlet deploy_item = DeployItemBuilder::new()\n    .with_empty_payment_bytes(runtime_args! {ARG_AMOUNT => *DEFAULT_PAYMENT})\n    .with_authorization_keys(&[*DEFAULT_ACCOUNT_ADDR])\n    .with_address(*DEFAULT_ACCOUNT_ADDR)\n    .with_session_code(session_code, runtime_args! {})\n    .build();\n```\n\n----------------------------------------\n\nTITLE: Example JSON Output for Counter Value Query (Value 0)\nDESCRIPTION: Shows an example JSON response structure returned by the `casper-client query-global-state` command when querying the 'counter/count' value. It includes the API version, stored value details (bytes, CLType), and the parsed value (0 in this case).\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/docs/resources/quick-start.md#2025-04-22_snippet_18\n\nLANGUAGE: json\nCODE:\n```\n{\n\"id\": 8523290678829319485,\n\"jsonrpc\": \"2.0\",\n\"result\": {\n   \"api_version\": \"1.4.6\",\n   \"block_header\": null,\n   \"merkle_proof\": \"[85716 hex chars]\",\n   \"stored_value\": {\n      \"CLValue\": {\n      \"bytes\": \"01000000\",\n      \"cl_type\": \"I32\",\n      \"parsed\": 0\n      }\n   }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a New Account Keypair - Rust - rust\nDESCRIPTION: Generates a new ED25519 keypair and writes the keys to a provided file path using casper_client::keygen. The function can also be parameterized to use SECP256K1 instead and returns a Result that should be handled. Input: output path, algorithm name, overwrite flag. Output: key files on specified path.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/versioned_docs/version-2.0.0/developers/dapps/sdk/client-library-usage.md#2025-04-22_snippet_5\n\nLANGUAGE: rust\nCODE:\n```\n    casper_client::keygen::generate_files(\"PATH\", \"ED25519\", false).unwrap();\n```\n\n----------------------------------------\n\nTITLE: Creating Account Keys\nDESCRIPTION: Code examples for generating new account keypairs using Ed25519 or Secp256K1 algorithms across different SDKs\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/docs/developers/dapps/sdk/client-library-usage.md#2025-04-22_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nconst { Keys } = require(\"casper-js-sdk\");\nconst keypair = Keys.Ed25519.new();\nconst { publicKey, privateKey } = keypair;\n```\n\nLANGUAGE: python\nCODE:\n```\nfrom pycspr.crypto import KeyAlgorithm, get_key_pair\nkeypair = get_key_pair(KeyAlgorithm.ED25519)\n```\n\nLANGUAGE: rust\nCODE:\n```\ncasper_client::keygen::generate_files(\"PATH\", \"ED25519\", false).unwrap();\n```\n\n----------------------------------------\n\nTITLE: Calling Auction Contract with Session Arguments Example in Rust\nDESCRIPTION: This example demonstrates calling the Auction contract's 'delegate' entry point with three session arguments: validator, amount, and delegator. It uses a specific contract hash and includes the necessary node address and chain name for Testnet.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/docs/developers/cli/calling-contracts.md#2025-04-22_snippet_3\n\nLANGUAGE: rust\nCODE:\n```\ncasper-client put-deploy \\\n    --node-address http://65.21.235.219:7777 \\\n    --chain-name casper-test \\\n    --secret-key [KEY_PATH]/secret_key.pem \\\n    --payment-amount 2500000000 \\\n    --session-hash hash-93d923e336b20a4c4ca14d592b60e5bd3fe330775618290104f9beb326db7ae2 \\\n    --session-entry-point \"delegate\" \\\n    --session-arg \"validator:public_key='0145fb72c75e1b459839555d70356a5e6172e706efa204d86c86050e2f7878960f'\" \\\n    --session-arg \"amount:u512='500000000000'\" \\\n    --session-arg \"delegator:public_key='0154d828baafa6858b92919c4d78f26747430dcbecb9aa03e8b44077dc6266cabf'\"\n```\n\n----------------------------------------\n\nTITLE: Transaction V1 Structure\nDESCRIPTION: Defines version 1 of the transaction structure used to alter global state, including header, body and approvals.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/docs/concepts/serialization/structures.md#2025-04-22_snippet_3\n\nLANGUAGE: rust\nCODE:\n```\nstruct TransactionV1 {\n    hash: TransactionV1Hash,\n    header: TransactionV1Header,\n    body: TransactionV1Body,\n    approvals: Vec<Approval>\n}\n```\n\n----------------------------------------\n\nTITLE: Complete Call Function for Counter Contract in Casper\nDESCRIPTION: The complete implementation of a call function for a counter contract in Casper. This function initializes the counter, defines entry points, creates named keys, and sets up the contract hash and version for future reference.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/docs/developers/writing-onchain-code/simple-contract.md#2025-04-22_snippet_15\n\nLANGUAGE: rust\nCODE:\n```\n#[no_mangle]\npub extern \"C\" fn call() {\n    // Initialize the count to 0 locally\n    let count_start = storage::new_uref(0_i32);\n    // Create the entry points for this contract\n    let mut counter_entry_points = EntryPoints::new();\n\n    counter_entry_points.add_entry_point(EntryPoint::new(\n        ENTRY_POINT_COUNTER_GET,\n        Vec::new(),\n        CLType::I32,\n        EntryPointAccess::Public,\n        EntryPointType::Contract,\n    ));\n\n    counter_entry_points.add_entry_point(EntryPoint::new(\n        ENTRY_POINT_COUNTER_INC,\n        Vec::new(),\n        CLType::Unit,\n        EntryPointAccess::Public,\n        EntryPointType::Contract,\n    ));\n\n    // In the named keys of the counter contract, add a key for the count.\n    let mut counter_named_keys = NamedKeys::new();\n    let key_name = String::from(COUNT_KEY);\n    counter_named_keys.insert(key_name, count_start.into());\n\n    // Create a new contract package that can be upgraded.\n    let (stored_contract_hash, contract_version) = storage::new_contract(\n        counter_entry_points,\n        Some(counter_named_keys),\n        Some(CONTRACT_PACKAGE_NAME.to_string()),\n        Some(CONTRACT_ACCESS_UREF.to_string()),\n    );\n\n    /* To create a locked contract instead, use new_locked_contract and throw away the contract version returned\n    let (stored_contract_hash, _) =\n    storage::new_locked_contract(counter_entry_points, Some(counter_named_keys), None, None); */\n\n    // Store the contract version in the context's named keys.\n    let version_uref = storage::new_uref(contract_version);\n    runtime::put_key(CONTRACT_VERSION_KEY, version_uref.into());\n\n    // Create a named key for the contract hash.\n    runtime::put_key(CONTRACT_KEY, stored_contract_hash.into());\n}\n```\n\n----------------------------------------\n\nTITLE: Compiling the Counter Contract\nDESCRIPTION: Compile the counter contract to WebAssembly using the provided Makefile.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/versioned_docs/version-2.0.0/resources/beginner/counter/walkthrough.md#2025-04-22_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\ncd counter\nmake prepare\nmake test\n```\n\n----------------------------------------\n\nTITLE: Specifying Rust Toolchain Version (Bash/Text)\nDESCRIPTION: Shows the content of an example `rust-toolchain` file, which specifies the exact nightly Rust toolchain version (`nightly-2022-08-03`) to be used for the project. This ensures consistent compilation environments and is required for building Casper smart contracts. This file needs to be created manually in the project root for semi-automatic or manual setups.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/docs/developers/writing-onchain-code/simple-contract.md#2025-04-22_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\nnightly-2022-08-03\n```\n\n----------------------------------------\n\nTITLE: Creating New Upgradeable Contract in Casper\nDESCRIPTION: Implementation of contract creation using new_contract method, which creates an upgradeable contract with specified entry points and named keys.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/versioned_docs/version-1.5.X/developers/writing-onchain-code/simple-contract.md#2025-04-22_snippet_13\n\nLANGUAGE: rust\nCODE:\n```\n    // Create a new contract package that can be upgraded.\n    let (stored_contract_hash, contract_version) = storage::new_contract(\n        counter_entry_points,\n        Some(counter_named_keys),\n        Some(CONTRACT_PACKAGE_NAME.to_string()),\n        Some(CONTRACT_ACCESS_UREF.to_string()),\n    );\n```\n\n----------------------------------------\n\nTITLE: Adding a New Version to a Casper Contract Package in Rust\nDESCRIPTION: This Rust snippet illustrates adding a new version to an existing, unlocked contract package using `storage::add_contract_version`. It requires the `contract_package_hash` identifying the package, the new `entry_points`, and any `named_keys` for the updated version. This function registers the new Wasm as the current version within the specified contract package.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/docs/resources/beginner/upgrade-contract.md#2025-04-22_snippet_1\n\nLANGUAGE: rust\nCODE:\n```\n    let (contract_hash, contract_version) = \n    storage::add_contract_version(contract_package_hash, \n                                  entry_points, \n                                  named_keys);\n```\n\n----------------------------------------\n\nTITLE: Compiling Casper Smart Contract to WebAssembly\nDESCRIPTION: Commands for compiling a Casper smart contract to WebAssembly format. These commands add the wasm32 target to Rust and build the contract for deployment on the Casper network.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/docs/developers/writing-onchain-code/simple-contract.md#2025-04-22_snippet_17\n\nLANGUAGE: bash\nCODE:\n```\nrustup target add wasm32-unknown-unknown\ncargo build --release --target wasm32-unknown-unknown\n```\n\n----------------------------------------\n\nTITLE: Calling a Casper Contract Entrypoint and Handling Return URef in Session Code - Rust\nDESCRIPTION: This Rust session code demonstrates how to call a contract entrypoint (e.g., donate) via runtime::call_contract, providing it necessary arguments such as hash references and donation data. Dependencies include the Casper runtime and system libraries, expected named arguments (FUNDRAISER_CONTRACT_HASH, DONATING_ACCOUNT_KEY, DONATION_AMOUNT), and knowledge of entry point names and CLTypes. The function retrieves the donation purse URef returned from the contract and then initiates a transfer using system::transfer_from_purse_to_purse. It expects valid contract, key and funding parameters, reverting if any step fails, and does not persist the returned URef unless desired.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/versioned_docs/version-1.5.X/resources/advanced/return-values-tutorial.md#2025-04-22_snippet_1\n\nLANGUAGE: rust\nCODE:\n```\n\n\n#[no_mangle]\npub extern \"C\" fn call() {\n    let fundraiser_contract_hash: ContractHash = runtime::get_named_arg(FUNDRAISER_CONTRACT_HASH);\n    let donating_account_key: Key = runtime::get_named_arg(DONATING_ACCOUNT_KEY);\n    let donation_amount: U512 = runtime::get_named_arg(DONATION_AMOUNT);\n\n    let donating_purse_uref: URef = runtime::call_contract(\n        fundraiser_contract_hash,\n        ENTRY_POINT_DONATE,\n        runtime_args! {\n            DONATING_ACCOUNT_KEY => donating_account_key\n        },\n    );\n    system::transfer_from_purse_to_purse(\n        account::get_main_purse(),\n        donating_purse_uref,\n        donation_amount,\n        None\n    )\n        .unwrap_or_revert()\n}\n\n```\n\n----------------------------------------\n\nTITLE: Complete Casper Call Function Implementation\nDESCRIPTION: Complete implementation of the call function including initialization, entry points, named keys, contract creation, and version management.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/versioned_docs/version-1.5.X/developers/writing-onchain-code/simple-contract.md#2025-04-22_snippet_14\n\nLANGUAGE: rust\nCODE:\n```\n#[no_mangle]\npub extern \"C\" fn call() {\n    // Initialize the count to 0 locally\n    let count_start = storage::new_uref(0_i32);\n    // Create the entry points for this contract\n    let mut counter_entry_points = EntryPoints::new();\n\n    counter_entry_points.add_entry_point(EntryPoint::new(\n        ENTRY_POINT_COUNTER_GET,\n        Vec::new(),\n        CLType::I32,\n        EntryPointAccess::Public,\n        EntryPointType::Contract,\n    ));\n\n    counter_entry_points.add_entry_point(EntryPoint::new(\n        ENTRY_POINT_COUNTER_INC,\n        Vec::new(),\n        CLType::Unit,\n        EntryPointAccess::Public,\n        EntryPointType::Contract,\n    ));\n\n    // In the named keys of the counter contract, add a key for the count.\n    let mut counter_named_keys = NamedKeys::new();\n    let key_name = String::from(COUNT_KEY);\n    counter_named_keys.insert(key_name, count_start.into());\n\n    // Create a new contract package that can be upgraded.\n    let (stored_contract_hash, contract_version) = storage::new_contract(\n        counter_entry_points,\n        Some(counter_named_keys),\n        Some(CONTRACT_PACKAGE_NAME.to_string()),\n        Some(CONTRACT_ACCESS_UREF.to_string()),\n    );\n\n    /* To create a locked contract instead, use new_locked_contract and throw away the contract version returned\n    let (stored_contract_hash, _) =\n    storage::new_locked_contract(counter_entry_points, Some(counter_named_keys), None, None); */\n\n    // Store the contract version in the context's named keys.\n    let version_uref = storage::new_uref(contract_version);\n    runtime::put_key(CONTRACT_VERSION_KEY, version_uref.into());\n\n    // Create a named key for the contract hash.\n    runtime::put_key(CONTRACT_KEY, stored_contract_hash.into());\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Self-Initialization Entry Point in Rust for Casper Smart Contracts\nDESCRIPTION: This code snippet demonstrates how to create a self-initializing entry point for a Casper smart contract. It sets up a fundraising purse and creates a dictionary to track donations, showcasing efficient contract initialization without requiring a separate transaction.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/versioned_docs/version-2.0.0/developers/writing-onchain-code/best-practices.md#2025-04-22_snippet_0\n\nLANGUAGE: rust\nCODE:\n```\n#[no_mangle]\npub extern \"C\" fn init() {\n    let fundraising_purse = system::create_purse();\n    runtime::put_key(FUNDRAISING_PURSE, fundraising_purse.into());\n    // Create a dictionary to track the mapping of account hashes to number of donations made.\n    storage::new_dictionary(LEDGER).unwrap_or_revert();\n}\n\npub extern \"C\" fn call() {\n    let init_entry_point = EntryPoint::new(\n        ENTRY_POINT_INIT,\n        vec![],\n        CLType::Unit,\n        EntryPointAccess::Public,\n        EntryPointType::Contract,\n    );\n```\n\n----------------------------------------\n\nTITLE: Defining the CLType Enum in Rust for Casper Values\nDESCRIPTION: This Rust enum defines all possible data types (`CLType`) that can be part of a `CLValue` on the Casper Network. It includes primitive types (Bool, integers, Unit, String), complex types (Option, List, ByteArray, Result, Map, Tuples), and Casper-specific types (URef, Key, PublicKey). The `Any` type indicates an unknown type.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/versioned_docs/version-2.0.0/concepts/serialization/primitives.md#2025-04-22_snippet_0\n\nLANGUAGE: rust\nCODE:\n```\n```rust\nenum CLType {\n   Bool, // boolean primitive\n   I32, // signed 32-bit integer primitive\n   I64, // signed 64-bit integer primitive\n   U8, // unsigned 8-bit integer primitive\n   U32, // unsigned 32-bit integer primitive\n   U64, // unsigned 64-bit integer primitive\n   U128, // unsigned 128-bit integer primitive\n   U256, // unsigned 256-bit integer primitive\n   U512, // unsigned 512-bit integer primitive\n   Unit, // singleton value without additional semantics\n   String, // e.g. \"Hello, World!\"\n   URef, // unforgeable reference (see above)\n   Key, // global state key (see above)\n   PublicKey // A Casper system PublicKey type\n   Option(CLType), // optional value of the given type\n   List(CLType), // list of values of the given type (e.g. Vec in rust)\n   ByteArray(CLType, u32), // same as `List` above, but number of elements\n                           // is statically known (e.g. arrays in rust)\n   Result(CLType, CLType), // co-product of the given types;\n                           // one variant meaning success, the other failure\n   Map(CLType, CLType), // key-value association where keys and values have the given types\n   Tuple1(CLType), // single value of the given type\n   Tuple2(CLType, CLType), // pair consisting of elements of the given types\n   Tuple3(CLType, CLType, CLType), // triple consisting of elements of the given types\n   Any // Indicates the type is not known\n}\n```\n```\n\n----------------------------------------\n\nTITLE: Querying Contract Variable in Casper Network\nDESCRIPTION: This command demonstrates how to query a specific variable within a contract using the contract hash and the variable name. It's useful for checking the current state of contract variables.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/versioned_docs/version-1.5.X/developers/cli/querying-global-state.md#2025-04-22_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\ncasper-client query-global-state \\\n  --node-address http://localhost:11101 \\\n  --state-root-hash [STATE_ROOT_HASH] \\\n  --key [CONTRACT_HASH] \\\n  -q \"count\"\n```\n\n----------------------------------------\n\nTITLE: Creating a New Casper Project with Cargo\nDESCRIPTION: This Bash command initializes a new Casper smart contract project named my-project using the cargo casper crate. It creates the base structure with contract and tests crates necessary for developing Casper smart contracts.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/versioned_docs/version-1.5.X/developers/writing-onchain-code/getting-started.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ncargo casper my-project\n```\n\n----------------------------------------\n\nTITLE: Installing a Casper Contract using JavaScript SDK\nDESCRIPTION: This snippet demonstrates how to install a Wasm smart contract onto the Casper network using the `casper-js-sdk`. It initializes a Casper client, reads the contract Wasm file, defines runtime arguments, creates an installation deploy specifying payment, public key, chain name, and signs it with a keypair before sending it to the network via `putDeploy`.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/docs/developers/dapps/sdk/client-library-usage.md#2025-04-22_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\nconst { CasperClient, Contracts, RuntimeArgs, CLValueBuilder } = require(\"casper-js-sdk\")\nconst fs = require(\"fs\")\n\nconst casperClient = new CasperClient(\"http://NODE_ADDRESS:7777/rpc\")\nconst contract = new Contracts.Contract(casperClient)\n\nconst contractWasm = new Uint8Array(fs.readFileSync(\"/path/to/contract.wasm\").buffer)\n\nconst runtimeArguments = RuntimeArgs.fromMap({\n  \"argument\": CLValueBuilder.string(\"Hello world!\")\n})\n\nconst deploy = contract.install(\n  contractWasm,\n  runtimeArguments,\n  \"10000000000\", // Gas payment (10 CSPR)\n  keypair.publicKey,\n  \"casper\", // or \"casper-test\" for Testnet\n  [keypair]\n)\n\nconsole.log(await casperClient.putDeploy(deploy))\n```\n\n----------------------------------------\n\nTITLE: Defining Casper Contract Dependencies in Cargo.toml (TOML)\nDESCRIPTION: Provides an example snippet for the `[dependencies]` section of the `contract/Cargo.toml` file. It lists the essential crates `casper-contract` (SDK for interacting with the Casper execution engine) and `casper-types` (shared types understood by the Casper network) with example version numbers. These dependencies are required for developing Casper smart contracts in Rust and must be added manually when using semi-automatic or manual project setup.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/docs/developers/writing-onchain-code/simple-contract.md#2025-04-22_snippet_6\n\nLANGUAGE: toml\nCODE:\n```\n[dependencies]\n# A library for developing Casper network smart contracts.\ncasper-contract = \"1.4.4\"\n# Types shared by many Casper crates for use on a Casper network.\ncasper-types = \"1.5.0\"\n```\n\n----------------------------------------\n\nTITLE: Implementing Counter Increment Entry Point in Casper Smart Contract\nDESCRIPTION: Example entry point implementation for incrementing a counter value in the smart contract, demonstrating key retrieval and storage modification.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/versioned_docs/version-2.0.0/developers/writing-onchain-code/simple-contract.md#2025-04-22_snippet_9\n\nLANGUAGE: rust\nCODE:\n```\n#[no_mangle]\npub extern \"C\" fn counter_inc() {\n    let uref: URef = runtime::get_key(COUNT_KEY)\n        .unwrap_or_revert_with(ApiError::MissingKey)\n        .into_uref()\n        .unwrap_or_revert_with(ApiError::UnexpectedKeyVariant);\n    storage::add(uref, 1); // Increment the count by 1.\n}\n```\n\n----------------------------------------\n\nTITLE: Calling a Casper Contract Entry Point using JavaScript SDK\nDESCRIPTION: This snippet explains how to invoke an entry point (`update_msg`) of a previously deployed smart contract using the `casper-js-sdk`. It sets the target contract's hash, defines the runtime arguments required by the entry point, and creates a deploy using `callEntrypoint` with details like payment amount, sender public key, and chain name. The deploy is signed and sent asynchronously, with the deploy hash logged.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/docs/developers/dapps/sdk/client-library-usage.md#2025-04-22_snippet_15\n\nLANGUAGE: javascript\nCODE:\n```\nconst casperClient = new CasperClient(\"http://NODE_ADDRESS:7777/rpc\");\nconst contract = new Contracts.Contract(casperClient);\ncontract.setContractHash(\n\t\"hash-a3cac24aec9de1bbdb87083587b14d8aeffba5dfed27686512b7bb5dee60445d\"\n);\nconst runtimeArguments = RuntimeArgs.fromMap({\n  \"message\": CLValueBuilder.string(\"Hello world!\")\n})\nconst deploy = contract.callEntrypoint(\n  \"update_msg\",\n  runtimeArguments,\n  keypair.publicKey,\n  \"casper\", // or \"casper-test\" for Testnet\n  \"1000000000\", // 1 CSPR (10^9 Motes)\n  [keypair]\n);\n(async () => {\n  console.log(await casperClient.putDeploy(deploy))\n})();\n```\n\n----------------------------------------\n\nTITLE: Implementing Counter Increment Entry Point for Casper Smart Contract\nDESCRIPTION: This code defines the counter_inc entry point which increments a counter value stored in the blockchain. It retrieves the counter's URef from storage, handles potential errors with unwrap_or_revert, and increments the counter by 1.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/versioned_docs/version-1.5.X/developers/writing-onchain-code/simple-contract.md#2025-04-22_snippet_10\n\nLANGUAGE: rust\nCODE:\n```\n#[no_mangle]\npub extern \"C\" fn counter_inc() {\n    let uref: URef = runtime::get_key(COUNT_KEY)\n        .unwrap_or_revert_with(ApiError::MissingKey)\n        .into_uref()\n        .unwrap_or_revert_with(ApiError::UnexpectedKeyVariant);\n    storage::add(uref, 1); // Increment the count by 1.\n}\n```\n\n----------------------------------------\n\nTITLE: Adding a New Contract Version in Rust\nDESCRIPTION: This snippet shows how to add a new contract version to an existing package using the add_contract_version function. It requires the contract package hash, entry points, and named keys as parameters.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/versioned_docs/version-1.5.X/resources/beginner/upgrade-contract.md#2025-04-22_snippet_1\n\nLANGUAGE: rust\nCODE:\n```\nlet (contract_hash, contract_version) =\nstorage::add_contract_version(contract_package_hash,\n                              entry_points,\n                              named_keys);\n```\n\n----------------------------------------\n\nTITLE: Installing Contract with put-deploy Command\nDESCRIPTION: Command template for installing a smart contract to the Casper network using the casper-client CLI. Requires node address, chain name, secret key, payment amount, and contract path.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/versioned_docs/version-1.5.X/developers/cli/installing-contracts.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ncasper-client put-deploy \\\n  --node-address [NODE_SERVER_ADDRESS] \\\n  --chain-name [CHAIN_NAME] \\\n  --secret-key [KEY_PATH]/secret_key.pem \\\n  --payment-amount [PAYMENT_AMOUNT_IN_MOTES] \\\n  --session-path [CONTRACT_PATH]/[CONTRACT_NAME].wasm\n```\n\n----------------------------------------\n\nTITLE: Visualizing Casper Rust Project Structure (Bash)\nDESCRIPTION: Displays the standard folder layout for a Casper smart contract project written in Rust. This structure includes separate directories for the contract source code (`contract/`), integration tests (`tests/`), a `Makefile` for build commands, and a `rust-toolchain` file to specify the Rust version.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/docs/developers/writing-onchain-code/simple-contract.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nproject-directory/\n\n└── contract/\n    ├── src/\n        └── main.rs\n    └── Cargo.toml\n\n└── Makefile\n└── rust-toolchain\n\n└── tests/\n    ├── src/\n        └── integration-tests.rs\n    └── Cargo.toml\n```\n\n----------------------------------------\n\nTITLE: Creating Project Structure with cargo casper\nDESCRIPTION: Command to automatically set up the project structure for a Casper smart contract using the cargo casper tool.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/versioned_docs/version-2.0.0/developers/writing-onchain-code/simple-contract.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ncargo casper my-project\n```\n\n----------------------------------------\n\nTITLE: Installing CEP-78 Contract using Casper Client\nDESCRIPTION: A complete bash command for installing a CEP-78 NFT contract with all required session arguments, including collection name, symbol, token supply, ownership mode, and other configuration parameters.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/versioned_docs/version-2.0.0/resources/tokens/cep78/using-casper-client.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ncasper-client put-deploy -n http://localhost:11101/rpc --chain-name \"casper-net-1\" --payment-amount 500000000000 -k ~/casper/casper-node/utils/nctl/assets/net-1/nodes/node-1/keys/secret_key.pem --session-path ~/casper/enhanced-nft/contract/target/wasm32-unknown-unknown/release/contract.wasm \\\n--session-arg \"collection_name:string='CEP-78-collection'\" \\\n--session-arg \"collection_symbol:string='CEP78'\" \\\n--session-arg \"total_token_supply:u64='100'\" \\\n--session-arg \"ownership_mode:u8='2'\" \\\n--session-arg \"nft_kind:u8='1'\" \\\n--session-arg \"nft_metadata_kind:u8='0'\" \\\n--session-arg \"json_schema:string=''\" \\\n--session-arg \"identifier_mode:u8='0'\" \\\n--session-arg \"metadata_mutability:u8='0'\"\n```\n\n----------------------------------------\n\nTITLE: Installing pkg-config on Linux\nDESCRIPTION: Command to install pkg-config, a program used for compiling and linking against libraries, on Linux using apt.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/versioned_docs/version-2.0.0/developers/dapps/setup-nctl.md#2025-04-22_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\n$ sudo apt install pkg-config\n```\n\n----------------------------------------\n\nTITLE: Installing OpenSSL on MacOS\nDESCRIPTION: Command to install OpenSSL, a cryptography toolkit for TLS/SSL protocols, on MacOS using Homebrew.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/versioned_docs/version-2.0.0/developers/dapps/setup-nctl.md#2025-04-22_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\n$ brew install openssl\n```\n\n----------------------------------------\n\nTITLE: Testing the CEP-18 Contract in Bash\nDESCRIPTION: Command to build and verify the compiled CEP-18 contract through tests.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/versioned_docs/version-1.5.X/resources/beginner/cep18.md#2025-04-22_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nmake test\n```\n\n----------------------------------------\n\nTITLE: Evaluating Contract Results in Rust\nDESCRIPTION: This snippet demonstrates how to verify the results of a contract call by retrieving the stored value, converting it to the required type, and comparing it with the expected value using assert_eq!().\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/versioned_docs/version-1.5.X/developers/writing-onchain-code/testing-contracts.md#2025-04-22_snippet_11\n\nLANGUAGE: rust\nCODE:\n```\n    let incremented_count = builder\n        .query(None, count_key, &[])\n        .expect(\"should be stored value.\")\n        .as_cl_value()\n        .expect(\"should be cl value.\")\n        .clone()\n        .into_t::<i32>()\n        .expect(\"should be i32.\");\n\n    assert_eq!(incremented_count, 1);\n```\n\n----------------------------------------\n\nTITLE: Setting Up Main Function for Tests in Rust\nDESCRIPTION: This Rust code snippet initializes the test program by defining an empty main function used when running tests with 'cargo test'.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/docs/developers/writing-onchain-code/testing-contracts.md#2025-04-22_snippet_1\n\nLANGUAGE: rust\nCODE:\n```\nfn main() {\n panic!(\"Execute \\\"cargo test\\\" to test the contract, not \\\"cargo run\\\".\");\n}\n```\n\n----------------------------------------\n\nTITLE: Reading and Comparing Stored Values with runtime::get_key and storage::read in Rust\nDESCRIPTION: This Rust example retrieves a stored URef NamedKey using runtime::get_key, reconstructs a URef with access rights, and reads a boolean value from storage. It then compares the actual stored value with a runtime argument (ARG_MY_STORED_VALUE), reverting with a UserError if the values don't match. It concludes by printing the stored value. Dependencies include casper-contract APIs (runtime, storage, error types). Key parameters: MY_STORED_VALUE_UREF (URef NamedKey), ARG_MY_STORED_VALUE (input argument). Inputs: caller-provided boolean. Outputs: validation or contract reversion.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/docs/resources/advanced/storage-workflow.md#2025-04-22_snippet_1\n\nLANGUAGE: rust\nCODE:\n```\n\n    let my_stored_value_uref: URef = runtime::get_key(MY_STORED_VALUE_UREF)\n        .unwrap_or_revert()\n        .into_uref()\n        .map(|uref| URef::new(uref.addr(), AccessRights::default()))\n        .unwrap_or_revert()\n        .into_read();\n\n    let my_actual_stored_value: bool = storage::read(my_stored_value_uref).unwrap().unwrap();\n\n    // Compare my stored value with runtime arg\n    let my_expected_stored_value: bool = runtime::get_named_arg(ARG_MY_STORED_VALUE);\n    if my_actual_stored_value != my_expected_stored_value {\n        // We revert if my stored value is not what is expected from caller argument\n        runtime::revert(UserError::StoredValueError);\n    }\n\n    runtime::print(&my_actual_stored_value.to_string());\n}\n\n```\n\n----------------------------------------\n\nTITLE: Installing casper-client via Cargo - Bash\nDESCRIPTION: Installs the casper-client CLI tool from crates.io using cargo. Enables interaction with the Casper network, including sending deploys and managing accounts. Requires Rust/toolchain/cargo pre-installed.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/versioned_docs/version-1.5.X/developers/prerequisites.md#2025-04-22_snippet_14\n\nLANGUAGE: bash\nCODE:\n```\ncargo install casper-client\n```\n\n----------------------------------------\n\nTITLE: Transferring Tokens Using Session Code\nDESCRIPTION: Rust code example showing how to perform a token transfer using session code on the Casper Network.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/versioned_docs/version-2.0.0/developers/writing-onchain-code/writing-session-code.md#2025-04-22_snippet_6\n\nLANGUAGE: rust\nCODE:\n```\n#[no_mangle]\npub extern \"C\" fn call() {\n    let target_purse: URef = runtime::get_named_arg(ARG_TARGET_PURSE);\n    let amount: U512 = runtime::get_named_arg(ARG_AMOUNT);\n\n    let source_purse = account::get_main_purse();\n\n    system::transfer_from_purse_to_purse(source_purse, target_purse, amount, None)\n        .unwrap_or_revert();\n}\n```\n\n----------------------------------------\n\nTITLE: Fetching State Root Hash using casper-client (Bash)\nDESCRIPTION: Retrieves the latest state root hash from a specified Casper network node using the `casper-client get-state-root-hash` command. Requires the `casper-client` tool to be installed and accessible, and the URL of a running Casper node.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/docs/resources/beginner/cep18.md#2025-04-22_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\ncasper-client get-state-root-hash --node-address http://78.46.32.13:7777\n```\n\n----------------------------------------\n\nTITLE: JSON-RPC Request for Balance Query\nDESCRIPTION: JSON-RPC request object for querying an account balance using the state root hash and purse identifier on the Casper blockchain.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/docs/resources/beginner/querying-network.md#2025-04-22_snippet_7\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"jsonrpc\": \"2.0\",\n  \"method\": \"query_balance\",\n  \"params\": {\n    \"state_identifier\": {\n      \"StateRootHash\": \"a306a9cf869e52fe9eacdc28aade94215112cc04b6737b3669c35568a47a7dc2\"\n    },\n    \"purse_identifier\": {\n      \"main_purse_under_public_key\": \"01360af61b50cdcb7b92cffe2c99315d413d34ef77fadee0c105cc4f1d4120f986\"\n    }\n  },\n  \"id\": 6\n}\n```\n\n----------------------------------------\n\nTITLE: Declaring a Test Function with #[test] in Rust\nDESCRIPTION: Illustrates the Rust syntax for defining a unit test function. Annotated with #[test], such a function forms a self-contained test case that can use assertions to verify contract or session logic. Replace '<unit-test-name>' with a descriptive identifier. This structure is recognized and executed by Rust's built-in test runner.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/docs/developers/writing-onchain-code/testing-session-code.md#2025-04-22_snippet_5\n\nLANGUAGE: rust\nCODE:\n```\n#[test]\nfn <unit-test-name>{\n   // Test function implementation\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Token Transfer with Initial Signature\nDESCRIPTION: Command to create and sign a token transfer deploy, transferring 2.5 billion motes with a specified payment amount and chain name. The command saves the deploy to a file for additional signatures.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/docs/developers/cli/transfers/multisig-deploy-transfer.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ncasper-client make-transfer --amount 2500000000 \\\n--secret-key [PATH]/secret_key.pem \\\n--chain-name casper-test \\\n--target-account [PUBLIC_KEY_HEX] \\\n--transfer-id [ID] \\\n--payment-amount 100000000 \\\n--output transfer.deploy\n```\n\n----------------------------------------\n\nTITLE: Running CEP-78 Install Example using npm\nDESCRIPTION: Command to run the provided example script for installing a CEP-78 contract instance using npm.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/versioned_docs/version-1.5.X/resources/tokens/cep78/js-tutorial.md#2025-04-22_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\nnpm run example:install\n```\n\n----------------------------------------\n\nTITLE: Importing Dependencies for Casper Session Code\nDESCRIPTION: Rust code snippet showing the import of necessary crates and libraries for writing session code on the Casper Network.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/versioned_docs/version-2.0.0/developers/writing-onchain-code/writing-session-code.md#2025-04-22_snippet_1\n\nLANGUAGE: rust\nCODE:\n```\n#![no_std]\n#![no_main]\n\nuse casper_contract::contract_api::{account, runtime};\nuse casper_contract::unwrap_or_revert::UnwrapOrRevert;\nuse casper_types::account::{AccountHash, ActionType, Weight};\n```\n\n----------------------------------------\n\nTITLE: Creating New Unlocked Contract in Rust\nDESCRIPTION: Creates a new contract using new_contract function, specifying package name and access URef for modifications. Stores the contract hash and version in global state for later access.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/versioned_docs/version-2.0.0/resources/beginner/upgrade-contract.md#2025-04-22_snippet_0\n\nLANGUAGE: rust\nCODE:\n```\n    let (stored_contract_hash, contract_version) = storage::new_contract(\n        contract_entry_points,\n        Some(contract_named_keys),\n        Some(\"contract_package_name\".to_string()),\n        Some(\"contract_access_uref\".to_string()),\n    );\n\n    runtime::put_key(CONTRACT_KEY, stored_contract_hash.into());\n\n    let version_uref = storage::new_uref(contract_version);\n    runtime::put_key(CONTRACT_VERSION_KEY, version_uref.into());\n```\n\n----------------------------------------\n\nTITLE: Deploying Wasm Smart Contract to Casper Network\nDESCRIPTION: Creates and sends a deploy to the network for execution, installing a compiled Wasm contract. Requires specifying the node address, chain name, secret key for signing, payment amount in motes, and the path to the compiled Wasm contract.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/versioned_docs/version-2.0.0/resources/beginner/counter/commands.md#2025-04-22_snippet_3\n\nLANGUAGE: rust\nCODE:\n```\ncasper-client put-deploy \\\n    --node-address [NODE_SERVER_ADDRESS] \\\n    --chain-name casper-net-1 \\\n    --secret-key [KEY_PATH]/secret_key.pem \\\n    --payment-amount [PAYMENT_AMOUNT_IN_MOTES] \\\n    --session-path [CONTRACT_PATH]/counter-v1.wasm\n```\n\n----------------------------------------\n\nTITLE: Checking Deploy Status\nDESCRIPTION: Verifies that the contract deployment was successful by retrieving the deploy details using the deploy hash.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/versioned_docs/version-2.0.0/resources/beginner/counter-testnet/walkthrough.md#2025-04-22_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\ncasper-client get-deploy \\\n    --node-address http://[NODE_IP]:7777 [DEPLOY_HASH]\n```\n\n----------------------------------------\n\nTITLE: Initializing the Fungible Token Contract\nDESCRIPTION: Implementation of the call() function to initialize the fungible token contract with name, symbol, decimals, and total supply.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/versioned_docs/version-2.0.0/resources/tokens/cep18/full-tutorial.md#2025-04-22_snippet_4\n\nLANGUAGE: rust\nCODE:\n```\n#[no_mangle]\nfn call() {\n  let name: String = runtime::get_named_arg(NAME_RUNTIME_ARG_NAME);\n  let symbol: String = runtime::get_named_arg(SYMBOL_RUNTIME_ARG_NAME);\n  let decimals = runtime::get_named_arg(DECIMALS_RUNTIME_ARG_NAME);\n  let total_supply = runtime::get_named_arg(TOTAL_SUPPLY_RUNTIME_ARG_NAME);\n\n  let _token = CEP18::install(name, symbol, decimals, total_supply).unwrap_or_revert();\n}\n```\n\n----------------------------------------\n\nTITLE: Staking Tokens with Rust SDK\nDESCRIPTION: Demonstrates token delegation on the Casper Network using the Rust SDK. This code configures the delegate.wasm deployment with the required parameters for amount, delegator, and validator, then submits it to the network.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/versioned_docs/version-1.5.X/developers/dapps/sdk/client-library-usage.md#2025-04-22_snippet_22\n\nLANGUAGE: rust\nCODE:\n```\nextern crate casper_client;\nasync fn put_deploy(){\n    let maybe_rpc: &str = \"\";\n    let verbosity: u64 = 1;\n    let node_address: &str = \"http://135.181.216.142:7777\";\n    let deploy_params: casper_client::DeployStrParams = casper_client::DeployStrParams{\n        secret_key:\"./sk_testnet.pem\",\n        timestamp:\"\",\n        ttl:\"50s\",\n        gas_price:\"1000000000\",\n        chain_name:\"casper\", // or \"casper-test\" for testnet\n        dependencies: Vec::new(),\n        session_account: \"01daad67ebbcb725e02a1955a6617512b311435a21ca6d523085aa015d2d1b473a\"\n\n    };\n    let mut session_args: Vec<&str> = Vec::new();\n    session_args.push(\"amount:U512='500000000000'\");\n    \n    session_args.push(\"delegator:public_key='01daad67ebbcb725e02a1955a6617512b311435a21ca6d523085aa015d2d1b473a'\");\n    session_args.push(\"validator:public_key='validator_public_key'\");\n  \n    let session_params: casper_client::SessionStrParams = casper_client::SessionStrParams::with_path(\"./delegate.wasm\", session_args, \"\");\n    let payment_params: casper_client::PaymentStrParams = casper_client::PaymentStrParams::with_amount(\"5000000000\");\n    let result = casper_client::put_deploy(maybe_rpc, node_address, verbosity, deploy_params, session_params, payment_params).await.unwrap();\n    println!(\"Deploy result: {:?}\", result);\n}\n\n#[tokio::main]\nasync fn main(){\n    put_deploy().await;\n}\n```\n\n----------------------------------------\n\nTITLE: Initializing Contract with Dictionary and Fundraising Purse\nDESCRIPTION: Entry point that initializes a contract by creating a fundraising purse and a dictionary named 'ledger' to track donations. The dictionary will map account hashes to the number of donations made.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/versioned_docs/version-1.5.X/concepts/dictionaries.md#2025-04-22_snippet_1\n\nLANGUAGE: rust\nCODE:\n```\n#[no_mangle]\npub extern \"C\" fn init() {\n    let fundraising_purse = system::create_purse();\n    runtime::put_key(\"fundraising_purse\", fundraising_purse.into());\n    // Create a dictionary to track the mapping of account hashes to number of donations made.\n    storage::new_dictionary(\"ledger\").unwrap_or_revert();\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Validator Map Schema in OpenAPI JSON - JSON\nDESCRIPTION: This code snippet represents a JSON schema definition for an entry in the validator map, as used on the Casper network. It defines property types, descriptions, requirements, references to other object types via $ref, and constraints for each field relevant to a validator, including nested objects like delegators and vesting schedule. Inputs are validator objects to be validated/serialized; the output is conformance to the schema, with enforced required properties, types, and value restrictions. Dependencies include definitions for referenced schemas such as PublicKey, URef, U512, Delegator, and VestingSchedule.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/condor/jsonrpc-comp/rpc-1.5/schema/Bid.json.md#2025-04-22_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"description\": \"An entry in the validator map.\",\n    \"type\": \"object\",\n    \"required\": [\n        \"bonding_purse\",\n        \"delegation_rate\",\n        \"delegators\",\n        \"inactive\",\n        \"staked_amount\",\n        \"validator_public_key\"\n    ],\n    \"properties\": {\n        \"validator_public_key\": {\n            \"description\": \"Validator public key\",\n            \"allOf\": [\n                {\n                    \"$ref\": \"#/components/schemas/PublicKey\"\n                }\n            ]\n        },\n        \"bonding_purse\": {\n            \"description\": \"The purse that was used for bonding.\",\n            \"allOf\": [\n                {\n                    \"$ref\": \"#/components/schemas/URef\"\n                }\n            ]\n        },\n        \"staked_amount\": {\n            \"description\": \"The amount of tokens staked by a validator (not including delegators).\",\n            \"allOf\": [\n                {\n                    \"$ref\": \"#/components/schemas/U512\"\n                }\n            ]\n        },\n        \"delegation_rate\": {\n            \"description\": \"Delegation rate\",\n            \"type\": \"integer\",\n            \"format\": \"uint8\",\n            \"minimum\": 0\n        },\n        \"vesting_schedule\": {\n            \"description\": \"Vesting schedule for a genesis validator. `None` if non-genesis validator.\",\n            \"anyOf\": [\n                {\n                    \"$ref\": \"#/components/schemas/VestingSchedule\"\n                },\n                {\n                    \"type\": \"null\"\n                }\n            ]\n        },\n        \"delegators\": {\n            \"description\": \"This validator's delegators, indexed by their public keys\",\n            \"type\": \"object\",\n            \"additionalProperties\": {\n                \"$ref\": \"#/components/schemas/Delegator\"\n            }\n        },\n        \"inactive\": {\n            \"description\": \"`true` if validator has been \\\"evicted\\\"\",\n            \"type\": \"boolean\"\n        }\n    },\n    \"additionalProperties\": false\n}\n```\n\n----------------------------------------\n\nTITLE: Calling Auction Contract by Package Hash\nDESCRIPTION: Example of calling the Auction contract's delegate entry point with validator, amount, and delegator arguments.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/versioned_docs/version-2.0.0/developers/cli/calling-contracts.md#2025-04-22_snippet_8\n\nLANGUAGE: rust\nCODE:\n```\ncasper-client put-deploy \\\n    --node-address http://65.21.235.219:7777 \\\n    --chain-name casper-test \\\n    --secret-key [KEY_PATH]/secret_key.pem \\\n    --payment-amount 2500000000 \\\n    --session-package-hash hash-e375d42c29c0e4b2baefa63cf2d70af34439eda851e08129d8515515d63bd6a9 \\\n    --session-entry-point \"delegate\" \\\n    --session-arg \"validator:public_key='0145fb72c75e1b459839555d70356a5e6172e706efa204d86c86050e2f7878960f'\" \\\n    --session-arg \"amount:u512='500000000000'\" \\\n    --session-arg \"delegator:public_key='0154d828baafa6858b92919c4d78f26747430dcbecb9aa03e8b44077dc6266cabf'\"\n```\n\n----------------------------------------\n\nTITLE: Signing and Sending a Casper Network Deploy using Casper Signer in JavaScript\nDESCRIPTION: This snippet demonstrates how to sign a Casper Network deploy using the Casper Signer and send it to the network using the casper-js-sdk. It includes converting the deploy to JSON, signing it, and then sending it to the network.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/versioned_docs/version-2.0.0/resources/advanced/list-cspr.md#2025-04-22_snippet_8\n\nLANGUAGE: javascript\nCODE:\n```\nimport { Signer, CasperServiceByJsonRPC, DeployUtil } from 'casper-js-sdk';\n\nconst casperService = new CasperServiceByJsonRPC(GRPC_URL);\nconst deployJson = DeployUtil.deployToJson(deploy);\nSigner.sign(\n    deployJson,\n    accountPublicKey,\n    recipientPublicKey\n).then((signedDeployJson) => {\n    const signedDeploy = DeployUtil.deployFromJson(signedDeployJson);\n    if (signedDeploy.ok) {\n      casperService.deploy(signedDeploy.val! as DeployUtil.Deploy); // sent deploy\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Query Account Details\nDESCRIPTION: Example of querying account details using an account hash to retrieve information about named keys and associated contract data.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/versioned_docs/version-1.5.X/developers/cli/installing-contracts.md#2025-04-22_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\ncasper-client query-global-state \\\n  --node-address http://localhost:11101 \\\n  --state-root-hash fa968344a2000282686303f1664c474465f9a028f32ec4f51791d9fa64c0bcd7 \\\n  --key account-hash-1d17e3fdad268f866a73558d1ae45e1eea3924c247871cb63f67ebf1a116e66d\n```\n\n----------------------------------------\n\nTITLE: Implementing Self-Initializing Entry Point in Rust for Casper Smart Contract\nDESCRIPTION: Example of a self-initializing entry point implementation that creates a fundraising purse and initializes a donation tracking system. This pattern allows the contract to self-initialize without requiring subsequent transaction code.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/docs/developers/writing-onchain-code/best-practices.md#2025-04-22_snippet_0\n\nLANGUAGE: rust\nCODE:\n```\n#[no_mangle]\npub extern \"C\" fn init() {\n    let fundraising_purse = system::create_purse();\n    runtime::put_key(FUNDRAISING_PURSE, fundraising_purse.into());\n    // Create a dictionary to track the mapping of account hashes to number of donations made.\n    storage::new_dictionary(LEDGER).unwrap_or_revert();\n}\n\npub extern \"C\" fn call() {\n    let init_entry_point = EntryPoint::new(\n        ENTRY_POINT_INIT,\n        vec![],\n        CLType::Unit,\n        EntryPointAccess::Public,\n        EntryPointType::Contract,\n    );\n```\n\n----------------------------------------\n\nTITLE: Defining JSON Schema for an Array of Named Arguments\nDESCRIPTION: This JSON schema defines a data structure representing a list of named arguments for a smart contract. It specifies the type as an array (`\"type\": \"array\"`), where each element must conform to the `NamedArg` schema definition referenced via `$ref` (`\"$ref\": \"#/components/schemas/NamedArg\"`). This structure is likely used in API requests or documentation related to Casper Network smart contract interactions.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/condor/jsonrpc-comp/rpc-1.5/schema/RuntimeArgs.json.md#2025-04-22_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"description\": \"Represents a collection of arguments passed to a smart contract.\",\n    \"type\": \"array\",\n    \"items\": {\n        \"$ref\": \"#/components/schemas/NamedArg\"\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Example of CSPR Token Transfer on Testnet\nDESCRIPTION: A concrete example of transferring 5 CSPR tokens on the Casper Testnet network. This example includes all required parameters with actual values, demonstrating a real-world usage scenario of the transfer command.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/versioned_docs/version-2.0.0/developers/cli/transfers/direct-token-transfer.md#2025-04-22_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ncasper-client transfer -v \\\n--id 3 \\\n--transfer-id 11102023 \\\n--node-address https://node.testnet.casper.network  \\\n--amount 5000000000 \\\n--secret-key ~/KEYS/secret_key.pem \\\n--chain-name casper-test \\\n--target-account 01360af61b50cdcb7b92cffe2c99315d413d34ef77fadee0c105cc4f1d4120f986 \\\n--payment-amount 100000000\n```\n\n----------------------------------------\n\nTITLE: Loading Private Keys\nDESCRIPTION: Methods for securely loading private keys from files across different SDKs\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/docs/developers/dapps/sdk/client-library-usage.md#2025-04-22_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nconst { Keys } = require(\"casper-js-sdk\");\nconst keypair = Keys.Ed25519.loadKeyPairFromPrivateFile(\"./secret_key.pem\");\n```\n\nLANGUAGE: python\nCODE:\n```\nimport pycspr\nkeypair = pycspr.parse_private_key(\n    \"./secret_key.pem\",\n    pycspr.crypto.KeyAlgorithm.ED25519\n)\n```\n\nLANGUAGE: rust\nCODE:\n```\nlet deploy_params: casper_client::DeployStrParams = casper_client::DeployStrParams{\n    secret_key:\"./secret_key.pem\",\n    timestamp:\"\",\n    ...\n};\n```\n\n----------------------------------------\n\nTITLE: Registering Contract Under Named Key - runtime::put_key - Rust\nDESCRIPTION: Demonstrates contract-side registration of a deployed contract's hash under a named key using runtime::put_key. This snippet is Rust code intended to be part of a contract, taking the hash and mapping it for later global reference. Prerequisites are a valid contract hash and correct context for global Key management. Inputs: CONTRACT_KEY constant and stored_contract_hash object. Outputs: The contract is addressable via the named key on chain.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/docs/developers/cli/calling-contracts.md#2025-04-22_snippet_9\n\nLANGUAGE: rust\nCODE:\n```\nruntime::put_key(CONTRACT_KEY, stored_contract_hash.into());\n```\n\n----------------------------------------\n\nTITLE: Deploy Data Structure\nDESCRIPTION: Defines the structure of a deploy containing smart contract and signatures, including metadata in the header.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/docs/concepts/serialization/structures.md#2025-04-22_snippet_2\n\nLANGUAGE: rust\nCODE:\n```\nstruct Deploy {\n    hash: DeployHash,\n    header: DeployHeader,\n    payment: ExecutableDeployItem,\n    session: ExecutableDeployItem,\n    approvals: Vec<Approval>\n}\n```\n\n----------------------------------------\n\nTITLE: Deploying Counter Contract to Testnet using Casper Client (Bash)\nDESCRIPTION: Uses the `casper-client put-deploy` command to send a deploy containing the compiled contract Wasm (`counter-v1.wasm`) to the Casper Testnet. Requires specifying a node address, chain name, user's secret key file path for signing, payment amount (in motes), and the path to the session Wasm.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/docs/resources/quick-start.md#2025-04-22_snippet_11\n\nLANGUAGE: bash\nCODE:\n```\ncasper-client put-deploy \\\n--node-address [NODE_ADDRESS] \\\n--chain-name casper-test \\\n--secret-key [YOUR_PATH_TO_SECRET_KEY_FILE] \\\n--payment-amount 30000000000 \\\n--session-path contracts/counter-v1/target/wasm32-unknown-unknown/release/counter-v1.wasm\n```\n\n----------------------------------------\n\nTITLE: Installing Rust using curl\nDESCRIPTION: Install the Rust programming language using curl, as recommended by the official Rust guide.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/versioned_docs/version-2.0.0/developers/prerequisites.md#2025-04-22_snippet_8\n\nLANGUAGE: bash\nCODE:\n```\ncurl --proto '=https' --tlsv1.2 -sSf https://sh.rustup.rs | sh\n```\n\n----------------------------------------\n\nTITLE: Importing Casper Session Code Crates (Rust)\nDESCRIPTION: These import directives and attribute macros configure the Rust session code for Casper. `#![no_std]` and `#![no_main]` remove the standard library and main function, suitable for Wasm compilation. The use statements import essential Casper SDK modules and types for account management and contract API operations. Dependencies: casper-contract and casper-types crates as documented in Cargo.toml.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/versioned_docs/version-1.5.X/developers/writing-onchain-code/writing-session-code.md#2025-04-22_snippet_1\n\nLANGUAGE: rust\nCODE:\n```\n#![no_std]\n#![no_main]\n\nuse casper_contract::contract_api::{account, runtime};\nuse casper_contract::unwrap_or_revert::UnwrapOrRevert;\nuse casper_types::account::{AccountHash, ActionType, Weight};\n```\n\n----------------------------------------\n\nTITLE: Defining the Session call() Entry Point - Rust\nDESCRIPTION: This function signature creates the required entry point for Casper session code, using no_mangle and C FFI. The empty body implies starter or placeholder code; in practice, business logic (such as key management) is implemented here. Entry must remain named \"call\" for Casper compatibility, allowing the Wasm runtime to invoke it automatically.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/docs/developers/writing-onchain-code/writing-session-code.md#2025-04-22_snippet_4\n\nLANGUAGE: rust\nCODE:\n```\n#[no_mangle]\npub extern \"C\" fn call() {\n    // Open the repository for details\n}\n```\n\n----------------------------------------\n\nTITLE: Sending a Transfer on the Casper Network\nDESCRIPTION: This function sends a transfer on the Casper network using account keys. It requires public/private key pairs, Casper SDK, axios, and network URLs. The function returns a transfer hash for tracking transactions.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/versioned_docs/version-2.0.0/developers/dapps/sdk/script-sdk.md#2025-04-22_snippet_3\n\nLANGUAGE: JavaScript\nCODE:\n```\nconst fs = require(\"fs\");\nconst path = require(\"path\");\nconst axios = require(\"axios\");\nconst casperClientSDK = require(\"casper-js-sdk\");\n\nconst { Keys, CasperClient, CLPublicKey, DeployUtil } = require(\"casper-js-sdk\");\n\nconst RPC_API = \"http://159.65.203.12:7777/rpc\";\nconst STATUS_API = \"http://159.65.203.12:8888\";\n\nconst sendTransfer = async ({ from, to, amount }) => {\n    const casperClient = new CasperClient(RPC_API);\n\n    const folder = path.join(\"./\", \"casper_keys\");\n\n    // Read keys from the structure created in #Generating keys\n    const signKeyPair = Keys.Ed25519.parseKeyFiles(folder + \"/\" + from + \"_public.pem\", folder + \"/\" + from + \"_private.pem\");\n\n    // networkName can be taken from the status api\n    const response = await axios.get(STATUS_API + \"/status\");\n\n    let networkName = null;\n\n    if (response.status == 200) {\n        networkName = response.data.chainspec_name;\n    }\n\n    // For native-transfers the payment price is fixed\n    const paymentAmount = 100000000;\n\n    // transfer_id field in the request to tag the transaction and to correlate it to your back-end storage\n    const id = 187821;\n\n    // gasPrice for native transfers can be set to 1\n    const gasPrice = 1;\n\n    // Time that the deploy will remain valid for, in milliseconds\n    // The default value is 1800000 ms (30 minutes)\n    const ttl = 1800000;\n\n    let deployParams = new DeployUtil.DeployParams(signKeyPair.publicKey, networkName, gasPrice, ttl);\n\n    // We create a hex representation of the public key with an added prefix\n    const toPublicKey = CLPublicKey.fromHex(to);\n\n    const session = DeployUtil.ExecutableDeployItem.newTransfer(amount, toPublicKey, null, id);\n\n    const payment = DeployUtil.standardPayment(paymentAmount);\n    const deploy = DeployUtil.makeDeploy(deployParams, session, payment);\n    const signedDeploy = DeployUtil.signDeploy(deploy, signKeyPair);\n\n    // Here we are sending the signed deploy\n    return await casperClient.putDeploy(signedDeploy);\n};\n\nsendTransfer({\n    // Put here the public key of the sender's main purse. Note that it needs to have a balance greater than 2.5 CSPR\n    from: \"<sender-public-key>\",\n\n    // Put here the public key of the recipient's main purse. This account doesn't need to exist. If the key is correctly formatted, the network will create the account when the deploy is sent\n    to: \"<recipient-public-key>\",\n\n    // Minimal amount is 2.5 CSPR (1 CSPR = 1,000,000,000 motes)\n    amount: 25000000000,\n});\n```\n\n----------------------------------------\n\nTITLE: Verifying Casper client installation\nDESCRIPTION: Verify the installation of the Casper client by checking its version.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/versioned_docs/version-2.0.0/developers/prerequisites.md#2025-04-22_snippet_15\n\nLANGUAGE: bash\nCODE:\n```\ncasper-client --version\n```\n\n----------------------------------------\n\nTITLE: Compiling Casper Contract to WASM\nDESCRIPTION: Commands for compiling a Casper smart contract to WebAssembly, including setting up the WASM target and building the release version.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/versioned_docs/version-2.0.0/developers/writing-onchain-code/simple-contract.md#2025-04-22_snippet_14\n\nLANGUAGE: bash\nCODE:\n```\nrustup target add wasm32-unknown-unknown\ncargo build --release --target wasm32-unknown-unknown\n```\n\nLANGUAGE: bash\nCODE:\n```\nmake prepare\nmake build-contract\n```\n\n----------------------------------------\n\nTITLE: Installing a CEP-78 Contract using JavaScript Client\nDESCRIPTION: Code snippet demonstrating how to install a new CEP-78 NFT contract on Casper Network. The example configures collection details, token supply limits, ownership modes, metadata schema, and other contract parameters.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/versioned_docs/version-2.0.0/resources/tokens/cep78/js-tutorial.md#2025-04-22_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nconst cc = new CEP78Client(process.env.NODE_URL!, process.env.NETWORK_NAME!);\n\n  const installDeploy = await cc.install(\n    {\n      collectionName: \"my-collection\",\n      collectionSymbol: \"MY-NFTS\",\n      totalTokenSupply: \"1000\",\n      ownershipMode: NFTOwnershipMode.Transferable,\n      nftKind: NFTKind.Physical,\n      jsonSchema: {\n        properties: {\n          color: { name: \"color\", description: \"\", required: true },\n          size: { name: \"size\", description: \"\", required: true },\n          material: { name: \"material\", description: \"\", required: true },\n          condition: { name: \"condition\", description: \"\", required: false },\n        },\n      },\n      nftMetadataKind: NFTMetadataKind.CustomValidated,\n      identifierMode: NFTIdentifierMode.Ordinal,\n      metadataMutability: MetadataMutability.Immutable,\n      mintingMode: MintingMode.Installer,\n      ownerReverseLookupMode: OwnerReverseLookupMode.Complete\n    },\n    \"250000000000\",\n    FAUCET_KEYS.publicKey,\n    [FAUCET_KEYS]\n  );\n\n  const hash = await installDeploy.send(process.env.http://localhost:11101/rpc);\n```\n\n----------------------------------------\n\nTITLE: Implementing Entry Point in Casper Smart Contract\nDESCRIPTION: Demonstrates how to declare a public entry point function in a Casper smart contract. Entry points don't have input arguments in their definition but can access arguments using RuntimeArgs.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/versioned_docs/version-1.5.X/resources/moving-to-casper.md#2025-04-22_snippet_0\n\nLANGUAGE: rust\nCODE:\n```\n#[no_mangle]\npub extern \"C\" fn counter_inc() {\n    \n    // Entry point body\n}\n```\n\n----------------------------------------\n\nTITLE: Storing New Contract Details in Factory's Named Keys (Rust)\nDESCRIPTION: This Rust snippet demonstrates how the `installer` function, running within the factory contract's context, saves the `contract_version` and `contract_hash` of the newly created counter contract. It uses `runtime::put_key` to store these values under specific keys (`CONTRACT_VERSION` and the provided `name`) within the factory contract's own named keys, making them retrievable later.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/docs/developers/writing-onchain-code/factory-pattern.md#2025-04-22_snippet_5\n\nLANGUAGE: rust\nCODE:\n```\nruntime::put_key(CONTRACT_VERSION, storage::new_uref(contract_version).into());\nruntime::put_key(&name, contract_hash.into());\n\n```\n\n----------------------------------------\n\nTITLE: Speculative Execution Command with Casper CLI Client\nDESCRIPTION: This command shows how to use the speculative-exec flag with the Casper client to execute a deploy without committing it to global state. It requires node address, chain name, secret key path, session path, payment amount, and optionally a block identifier.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/versioned_docs/version-2.0.0/developers/dapps/speculative-exec.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ncasper client put-deploy /\n--node-address <HOST:PORT> /\n--chain-name <CHAIN_NAME> /\n--secret-key <PATH> /\n--session-path <PATH>  /\n--payment-amount <PAYMENT_AMOUNT_IN_MOTES>\n--speculative-exec <BLOCK HEIGHT OR HASH>\n```\n\n----------------------------------------\n\nTITLE: Replaying the Sidecar Event Stream with cURL\nDESCRIPTION: This cURL command snippet demonstrates replaying an event stream from a specified event ID using the Sidecar's SSE API. Modify NODE_ADDRESS, PORT, and ID to fit your configuration.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/versioned_docs/version-2.0.0/developers/dapps/monitor-and-consume-events.md#2025-04-22_snippet_7\n\nLANGUAGE: cURL\nCODE:\n```\ncurl -s http://NODE_ADDRESS:PORT/events?start_from=ID\n```\n\nLANGUAGE: cURL\nCODE:\n```\ncurl -sN http://65.21.235.219:19999/events?start_from=29267508\n```\n\n----------------------------------------\n\nTITLE: Calling Contract Entry Point to Increment Counter - Bash\nDESCRIPTION: This snippet shows how to increment the on-chain counter by sending a deploy to a named entry point (counter_inc) in the installed contract via casper-client put-deploy. Similar to contract installation, but uses --session-name and --session-entry-point instead of --session-path. Used for contract interaction post-installation. Dependencies include the account's secret key and sufficient payment.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/docs/resources/beginner/counter/walkthrough.md#2025-04-22_snippet_9\n\nLANGUAGE: bash\nCODE:\n```\ncasper-client put-deploy \\\n    --node-address http://localhost:11101 \\\n    --chain-name casper-net-1 \\\n    --secret-key [PATH_TO_YOUR_KEY]/secret_key.pem \\\n    --payment-amount [PAYMENT_AMOUNT_IN_MOTES] \\\n    --session-name \"counter\" \\\n    --session-entry-point \"counter_inc\"\n```\n\n----------------------------------------\n\nTITLE: Implementing Wallet Connection Function in JavaScript\nDESCRIPTION: Function to connect to the Casper Wallet, request connection permission, and retrieve the active public key, updating the parent component's state.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/versioned_docs/version-2.0.0/developers/dapps/template-frontend.md#2025-04-22_snippet_11\n\nLANGUAGE: javascript\nCODE:\n```\nconst connectToWallet = (props) => {\n    provider.requestConnection().then(connected => {\n        if (!connected) {\n            alert(\"Couldn't connect to wallet\");\n        } else {\n            provider.getActivePublicKey().then(publicKey => {\n                props.setPublicKey(publicKey);\n            }).catch(error => {\n                alert(error.message);\n            });\n        }\n    })\n    .catch(error => {\n        alert(error.message);\n    });\n}\n```\n\n----------------------------------------\n\nTITLE: Calling Contract Entry Points in Session Code\nDESCRIPTION: Rust code snippet demonstrating how to call entry points of a contract from session code on the Casper Network.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/versioned_docs/version-2.0.0/developers/writing-onchain-code/writing-session-code.md#2025-04-22_snippet_5\n\nLANGUAGE: rust\nCODE:\n```\n    // Call the counter to get the current value.\n    let current_counter_value: u32 =\n        runtime::call_contract(contract_hash, COUNTER_GET, RuntimeArgs::new());\n\n    // Call the counter to increment the value.\n    let _: () = runtime::call_contract(contract_hash, COUNTER_INC, RuntimeArgs::new());\n```\n\n----------------------------------------\n\nTITLE: Importing Casper Test Support Packages for Unit Tests - Rust\nDESCRIPTION: This set of use statements imports the essential functions, types, and constants required for writing Casper smart contract tests. It brings in tools for execution requests, test builder frameworks, default account constants, and runtime argument construction. Dependencies include 'casper_engine_test_support' and 'casper_types' crates. All imported items are necessary for preparing test environments and constructing/validating execution requests.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/docs/developers/writing-onchain-code/testing-session-code.md#2025-04-22_snippet_3\n\nLANGUAGE: rust\nCODE:\n```\n    use casper_engine_test_support::{\n        ExecuteRequestBuilder, InMemoryWasmTestBuilder, DEFAULT_ACCOUNT_ADDR,\n        DEFAULT_RUN_GENESIS_REQUEST,\n    };\n    use casper_types::account::AccountHash;\n    use casper_types::{runtime_args, RuntimeArgs};\n```\n\n----------------------------------------\n\nTITLE: Example Contract Installation on NCTL Network\nDESCRIPTION: A practical example of installing a counter contract on a local NCTL network, specifying a local node address, network name, user key, and the path to the counter installer Wasm file.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/versioned_docs/version-2.0.0/developers/cli/installing-contracts.md#2025-04-22_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ncasper-client put-transaction session \\\n--node-address http://localhost:11101 \\\n--chain-name casper-net-1 \\\n--secret-key ~/casper/casper-nctl/assets/net-1/users/user-1/secret_key.pem \\\n--gas-price-tolerance 10 \\\n--pricing-mode fixed \\\n--transaction-path ~/test_contracts/counter_installer.wasm \\\n--session-entry-point call \\\n--category 'install-upgrade'\n```\n\n----------------------------------------\n\nTITLE: Querying a Value Using Contract Address Hash and Named Key (Bash)\nDESCRIPTION: Queries a named key (count) associated with a contract, by passing its address hash and the -q argument to casper-client. Returns the value stored at the contract's named key path. Useful for retrieving module or storage variables.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/docs/developers/cli/querying-global-state.md#2025-04-22_snippet_19\n\nLANGUAGE: bash\nCODE:\n```\ncasper-client query-global-state \\\n--node-address http://localhost:11101 \\\n--state-root-hash [STATE_ROOT_HASH] \\\n--key [CONTRACT_ADDRESS_HASH] \\\n-q \"count\"\n```\n\n----------------------------------------\n\nTITLE: Updating Primary Key Weight using Casper CLI\nDESCRIPTION: This command updates the weight of a primary key to 3 using a Wasm session file. It is part of configuring Casper accounts, ensuring the key weight meets the necessary threshold for account management and deploy actions.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/versioned_docs/version-1.5.X/resources/advanced/multi-sig/multi-sig-workflow.md#2025-04-22_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\ncasper-client put-deploy --node-address https://node.testnet.casper.network \\\n--chain-name \"casper-test\" \\\n--payment-amount 500000000 \\\n--secret-key $PATH/secret_key.pem \\\n--session-path target/wasm32-unknown-unknown/release/update_associated_keys.wasm \\\n--session-arg \"associated_key:key='account-hash-<ACCOUNT_HASH>'\" \\\n--session-arg \"new_weight:u8='3'\"\n```\n\n----------------------------------------\n\nTITLE: Installing Contract Using casper-client CLI\nDESCRIPTION: Command to install a contract in global state using the put-transaction session command. Includes all required parameters like node address, chain name, secret key path, and gas settings.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/docs/developers/cli/installing-contracts.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ncasper-client put-transaction session \\\n--node-address [NODE_SERVER_ADDRESS] \\\n--chain-name [CHAIN_NAME] \\\n--secret-key [KEY_PATH]/secret_key.pem \\\n--gas-price-tolerance [MAX_GAS_AMOUNT] \\\n--pricing-mode fixed \\\n--transaction-path <PATH> \\\n--session-entry-point call \\\n--category 'install-upgrade'\n```\n\n----------------------------------------\n\nTITLE: Creating a Test Function for Casper Contract Installation\nDESCRIPTION: This code snippet shows how to create a test function that installs a Casper contract and checks its entry points. It uses the InMemoryWasmTestBuilder to simulate the execution engine.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/versioned_docs/version-2.0.0/developers/writing-onchain-code/testing-contracts.md#2025-04-22_snippet_3\n\nLANGUAGE: rust\nCODE:\n```\n#[test]\nfn install_version1_and_check_entry_points() {\n    let mut builder = InMemoryWasmTestBuilder::default();\n    builder.run_genesis(&*DEFAULT_RUN_GENESIS_REQUEST).commit();\n\n    // See the repository for the full function.\n}\n```\n\n----------------------------------------\n\nTITLE: Building an Execution Request for Casper Session Code - Rust\nDESCRIPTION: Constructs an execution request that represents a user session code invocation using ExecuteRequestBuilder. The builder standard method requires the account key, WASM binary file, and runtime argument values. It's used for creating requests to submit to the in-memory execution engine for testable simulation. This API requires account and session constants to be properly defined.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/docs/developers/writing-onchain-code/testing-session-code.md#2025-04-22_snippet_8\n\nLANGUAGE: rust\nCODE:\n```\n    let execute_request =\n        ExecuteRequestBuilder::standard(*DEFAULT_ACCOUNT_ADDR, CONTRACT_WASM, runtime_args)\n            .build();\n```\n\n----------------------------------------\n\nTITLE: Signing a Transfer Deploy with Another Secret Key - Bash\nDESCRIPTION: Executes the `sign-deploy` command to add another signature to an existing transfer deploy. The final output file contains multiple signatures, critical for multi-signature scenarios. Prerequisites include the source deploy file and an additional secret key.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/versioned_docs/version-2.0.0/developers/cli/transfers/multisig-deploy-transfer.md#2025-04-22_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\ncasper-client sign-deploy \\\n--input transfer.deploy \\\n--secret-key [PATH]/another_secret_key.pem \\\n--output transfer2.deploy\n```\n\nLANGUAGE: bash\nCODE:\n```\ncasper-client sign-deploy \\\n--input transfer.deploy \\\n--secret-key ~/KEYS/multi-sig/keys/user_1_secret_key.pem \\\n--output transfer2.deploy\n```\n\n----------------------------------------\n\nTITLE: Creating URefs with Different Access Rights in JavaScript\nDESCRIPTION: Example code demonstrating how to create URefs with various access rights combinations using the with_access_rights method. Shows all possible access rights settings from NONE to full READ_ADD_WRITE access.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/versioned_docs/version-2.0.0/developers/dapps/uref-security.md#2025-04-22_snippet_2\n\nLANGUAGE: js\nCODE:\n```\n// This example will create a version of the original URef with access rights stripped entirely.\nlet new_uref = uref.with_access_rights(AccessRights::NONE);\n// This example will create a version of the original URef with only READ access rights.\nlet new_uref = uref.with_access_rights(AccessRights::READ);\n// This example will create a version of the original URef with only WRITE access rights.\nlet new_uref = uref.with_access_rights(AccessRights::WRITE);\n// This example will create a version of the original URef with both READ and WRITE access rights.\nlet new_uref = uref.with_access_rights(AccessRights::READ_WRITE);\n// This example will create a version of the original URef with only ADD access rights.\nlet new_uref = uref.with_access_rights(AccessRights::ADD);\n// This example will create a version of the original URef with both READ and ADD access rights.\nlet new_uref = uref.with_access_rights(AccessRights::READ_ADD);\n// This example will create a version of the original URef with both ADD and WRITE access rights.\nlet new_uref = uref.with_access_rights(AccessRights::ADD_WRITE);\n// This example will create a version of the original URef with full access rights.\nlet new_uref = uref.with_access_rights(AccessRights::READ_ADD_WRITE);\n```\n\n----------------------------------------\n\nTITLE: Querying Block Data with chain_get_block\nDESCRIPTION: Example request for retrieving block information using chain_get_block method. The request includes a block identifier parameter to get a specific block by its hash.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/docs/developers/json-rpc/json-rpc-informational.md#2025-04-22_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"id\": 1,\n  \"jsonrpc\": \"2.0\",\n  \"method\": \"chain_get_block\",\n  \"params\": [\n    {\n      \"name\": \"block_identifier\",\n      \"value\": {\n        \"Hash\": \"0744fcb72af43c5cc372039bc5a8bfee48808a9ce414acc0d6338a628c20eb42\"\n      }\n    }\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Calling Casper Contract using Wasm File with Casper Client CLI\nDESCRIPTION: This command illustrates the generic structure for deploying session code or contract code directly from a compiled Wasm file using `casper-client put-deploy`. The key argument is `--session-path`, which specifies the local path to the `.wasm` file containing the code to be executed on the network. Requires node address, chain name, secret key, and payment amount.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/docs/developers/cli/calling-contracts.md#2025-04-22_snippet_16\n\nLANGUAGE: bash\nCODE:\n```\ncasper-client put-deploy \\\n    --node-address [NODE_SERVER_ADDRESS] \\\n    --chain-name [CHAIN_NAME] \\\n    --secret-key [KEY_PATH]/secret_key.pem \\\n    --payment-amount [PAYMENT_AMOUNT_IN_MOTES] \\\n    --session-path [PATH]/[FILE_NAME].wasm\n```\n\n----------------------------------------\n\nTITLE: Defining Casper Node JSON-RPC API Specification in OpenRPC Format\nDESCRIPTION: A comprehensive OpenRPC specification document that defines the JSON-RPC 2.0 API for the Casper network. It includes API metadata, server information, method definitions with their parameters and return schemas, and example requests and responses.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/condor/jsonrpc-comp/rpc-2.0/schema.json.md#2025-04-22_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"openrpc\": \"1.0.0-rc1\",\n  \"info\": {\n    \"version\": \"2.0.0\",\n    \"title\": \"Client API of Casper Node\",\n    \"description\": \"This describes the JSON-RPC 2.0 API of a node on the Casper network.\",\n    \"contact\": {\n      \"name\": \"Casper Labs\",\n      \"url\": \"https://casperlabs.io\"\n    },\n    \"license\": {\n      \"name\": \"APACHE LICENSE, VERSION 2.0\",\n      \"url\": \"https://www.apache.org/licenses/LICENSE-2.0\"\n    }\n  },\n  \"servers\": [\n    {\n      \"name\": \"any Sidecar with JSON RPC API enabled\",\n      \"url\": \"http://IP:PORT/rpc/\"\n    }\n  ],\n  \"methods\": [\n    {\n      \"name\": \"account_put_deploy\",\n      \"summary\": \"receives a Deploy to be executed by the network (DEPRECATED: use `account_put_transaction` instead)\",\n      \"params\": [\n        {\n          \"name\": \"deploy\",\n          \"schema\": {\n            \"description\": \"The `Deploy`.\",\n            \"$ref\": \"#/components/schemas/Deploy\"\n          },\n          \"required\": true\n        }\n      ],\n      \"result\": {\n        \"name\": \"account_put_deploy_result\",\n        \"schema\": {\n          \"description\": \"Result for \\\"account_put_deploy\\\" RPC response.\",\n          \"type\": \"object\",\n          \"required\": [\n            \"api_version\",\n            \"deploy_hash\"\n          ],\n          \"properties\": {\n            \"api_version\": {\n              \"description\": \"The RPC API version.\",\n              \"type\": \"string\"\n            },\n            \"deploy_hash\": {\n              \"description\": \"The deploy hash.\",\n              \"$ref\": \"#/components/schemas/DeployHash\"\n            }\n          },\n          \"additionalProperties\": false\n        }\n      },\n      \"examples\": [\n        {\n          \"name\": \"account_put_deploy_example\",\n          \"params\": [\n            {\n              \"name\": \"deploy\",\n              \"value\": {\n                \"hash\": \"5c9b3b099c1378aa8e4a5f07f59ff1fcdc69a83179427c7e67ae0377d94d93fa\",\n                \"header\": {\n                  \"account\": \"01d9bf2148748a85c89da5aad8ee0b0fc2d105fd39d41a4c796536354f0ae2900c\",\n                  \"timestamp\": \"2020-11-17T00:39:24.072Z\",\n                  \"ttl\": \"1h\",\n                  \"gas_price\": 1,\n                  \"body_hash\": \"d53cf72d17278fd47d399013ca389c50d589352f1a12593c0b8e01872a641b50\",\n                  \"dependencies\": [\n                    \"0101010101010101010101010101010101010101010101010101010101010101\"\n                  ],\n                  \"chain_name\": \"casper-example\"\n                },\n                \"payment\": {\n                  \"StoredContractByName\": {\n                    \"name\": \"casper-example\",\n                    \"entry_point\": \"example-entry-point\",\n                    \"args\": [\n                      [\n                        \"amount\",\n                        {\n                          \"cl_type\": \"I32\",\n                          \"bytes\": \"e8030000\",\n                          \"parsed\": 1000\n                        }\n                      ]\n                    ]\n                  }\n                },\n                \"session\": {\n                  \"Transfer\": {\n                    \"args\": [\n                      [\n                        \"amount\",\n                        {\n                          \"cl_type\": \"I32\",\n                          \"bytes\": \"e8030000\",\n                          \"parsed\": 1000\n                        }\n                      ]\n                    ]\n                  }\n                },\n                \"approvals\": [\n                  {\n                    \"signer\": \"01d9bf2148748a85c89da5aad8ee0b0fc2d105fd39d41a4c796536354f0ae2900c\",\n                    \"signature\": \"014c1a89f92e29dd74fc648f741137d9caf4edba97c5f9799ce0c9aa6b0c9b58db368c64098603dbecef645774c05dff057cb1f91f2cf390bbacce78aa6f084007\"\n                  }\n                ]\n              }\n            }\n          ],\n          \"result\": {\n            \"name\": \"account_put_deploy_example_result\",\n            \"value\": {\n              \"api_version\": \"2.0.0\",\n              \"deploy_hash\": \"5c9b3b099c1378aa8e4a5f07f59ff1fcdc69a83179427c7e67ae0377d94d93fa\"\n            }\n          }\n        }\n      ]\n    },\n    {\n      \"name\": \"account_put_transaction\",\n      \"summary\": \"receives a Transaction to be executed by the network\",\n      \"params\": [\n        {\n          \"name\": \"transaction\",\n          \"schema\": {\n            \"description\": \"The `Transaction`.\",\n            \"$ref\": \"#/components/schemas/Transaction\"\n          },\n          \"required\": true\n        }\n      ],\n      \"result\": {\n        \"name\": \"account_put_transaction_result\",\n        \"schema\": {\n          \"description\": \"Result for \\\"account_put_transaction\\\" RPC response.\",\n          \"type\": \"object\",\n          \"required\": [\n            \"api_version\",\n            \"transaction_hash\"\n          ],\n          \"properties\": {\n            \"api_version\": {\n              \"description\": \"The RPC API version.\",\n              \"type\": \"string\"\n            },\n            \"transaction_hash\": {\n              \"description\": \"The transaction hash.\",\n              \"$ref\": \"#/components/schemas/TransactionHash\"\n            }\n          },\n          \"additionalProperties\": false\n        }\n      },\n      \"examples\": [\n        {\n          \"name\": \"account_put_transaction_example\",\n          \"params\": [\n            {\n              \"name\": \"transaction\",\n              \"value\": {\n                \"Version1\": {\n                  \"hash\": \"f5582cb81a5abda63ebaa4edb3b05210ecbd63ffb8dd17bfbeb3b867f4014468\",\n                  \"header\": {\n                    \"chain_name\": \"casper-example\",\n                    \"timestamp\": \"2020-11-17T00:39:24.072Z\",\n                    \"ttl\": \"1h\",\n                    \"body_hash\": \"aa24833ffbf31d62c8c8c4265349e7c09cd71952fcbce6f7b12daf5e340bf2cc\",\n                    \"pricing_mode\": {\n                      \"Fixed\": {\n                        \"gas_price_tolerance\": 5\n                      }\n                    },\n                    \"initiator_addr\": {\n                      \"PublicKey\": \"01d9bf2148748a85c89da5aad8ee0b0fc2d105fd39d41a4c796536354f0ae2900c\"\n                    }\n                  },\n                  \"body\": {\n                    \"args\": [\n                      [\n                        \"source\",\n                        {\n                          \"cl_type\": {\n                            \"Option\": \"URef\"\n                          },\n                          \"bytes\": \"010a0a0a0a0a0a0a0a0a0a0a0a0a0a0a0a0a0a0a0a0a0a0a0a0a0a0a0a0a0a0a0a07\",\n                          \"parsed\": \"uref-0a0a0a0a0a0a0a0a0a0a0a0a0a0a0a0a0a0a0a0a0a0a0a0a0a0a0a0a0a0a0a0a-007\"\n                        }\n                      ],\n                      [\n                        \"target\",\n                        {\n                          \"cl_type\": \"URef\",\n                          \"bytes\": \"1b1b1b1b1b1b1b1b1b1b1b1b1b1b1b1b1b1b1b1b1b1b1b1b1b1b1b1b1b1b1b1b00\",\n                          \"parsed\": \"uref-1b1b1b1b1b1b1b1b1b1b1b1b1b1b1b1b1b1b1b1b1b1b1b1b1b1b1b1b1b1b1b1b-000\"\n                        }\n                      ],\n                      [\n                        \"amount\",\n                        {\n                          \"cl_type\": \"U512\",\n                          \"bytes\": \"0500ac23fc06\",\n                          \"parsed\": \"30000000000\"\n                        }\n                      ],\n                      [\n                        \"id\",\n                        {\n                          \"cl_type\": {\n                            \"Option\": \"U64\"\n                          },\n                          \"bytes\": \"01e703000000000000\",\n                          \"parsed\": 999\n                        }\n                      ]\n                    ],\n                    \"target\": \"Native\",\n                    \"entry_point\": \"Transfer\",\n                    \"transaction_category\": 0,\n                    \"scheduling\": \"Standard\"\n                  },\n                  \"approvals\": [\n                    {\n                      \"signer\": \"01d9bf2148748a85c89da5aad8ee0b0fc2d105fd39d41a4c796536354f0ae2900c\",\n                      \"signature\": \"0137d3f468d8f8a6e63f4110d79be29b8c8428e9cd858a92049660e7851ae16a299640d1fc1c930ab6cb424f1a6eec0b194df74bede14f4af1b5133106f1280d0b\"\n                    }\n                  ]\n                }\n              }\n            }\n          ],\n          \"result\": {\n            \"name\": \"account_put_transaction_example_result\",\n            \"value\": {\n              \"api_version\": \"2.0.0\",\n              \"transaction_hash\": {\n                \"Version1\": \"f5582cb81a5abda63ebaa4edb3b05210ecbd63ffb8dd17bfbeb3b867f4014468\"\n              }\n            }\n          }\n        }\n      ]\n    },\n    {\n      \"name\": \"info_get_deploy\",\n      \"summary\": \"returns a Deploy from the network (DEPRECATED: use `info_get_transaction` instead)\",\n      \"params\": [\n        {\n          \"name\": \"deploy_hash\",\n          \"schema\": {\n            \"description\": \"The deploy hash.\",\n            \"$ref\": \"#/components/schemas/DeployHash\"\n          },\n          \"required\": true\n        },\n        {\n          \"name\": \"finalized_approvals\",\n          \"schema\": {\n            \"description\": \"Whether to return the deploy with the finalized approvals substituted. If `false` or omitted, returns the deploy with the approvals that were originally received by the node.\",\n            \"default\": false,\n            \"type\": \"boolean\"\n          },\n          \"required\": false\n        }\n      ],\n      \"result\": {\n        \"name\": \"info_get_deploy_result\",\n        \"schema\": {\n          \"description\": \"Result for \\\"info_get_deploy\\\" RPC response.\",\n          \"type\": \"object\",\n          \"required\": [\n            \"api_version\",\n            \"deploy\"\n          ],\n          \"properties\": {\n            \"api_version\": {\n              \"description\": \"The RPC API version.\",\n              \"type\": \"string\"\n            },\n            \"deploy\": {\n              \"description\": \"The deploy.\",\n              \"$ref\": \"#/components/schemas/Deploy\"\n            },\n            \"execution_info\": {\n\n\n\n```\n\n----------------------------------------\n\nTITLE: Complete Casper Contract with Message Update Functionality in Rust\nDESCRIPTION: The final version of the Casper contract with both the call entry point and the update_msg entry point implemented. This contract stores a message during initialization and allows updating it through the update_msg entry point.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/versioned_docs/version-1.5.X/resources/advanced/cross-contract.md#2025-04-22_snippet_8\n\nLANGUAGE: rust\nCODE:\n```\n#![no_std]\n#![no_main]\n\n#[cfg(not(target_arch = \"wasm32\"))]\ncompile_error!(\"target arch should be wasm32: compile with '--target wasm32-unknown-unknown'\");\n\n// We need to explicitly import the std alloc crate and `alloc::string::String` as we are in a\n// `no_std` environment.\nextern crate alloc;\n\n// The elementary types\nuse alloc::string::String;\nuse alloc::vec::Vec;\nuse alloc::collections::BTreeMap;\nuse crate::alloc::string::ToString;\n\n\n// Casper crates\nuse casper_types::{Key, CLType, Parameter, EntryPoint, EntryPoints, EntryPointType, EntryPointAccess};\n\nuse casper_contract:{\n    contract_api::{runtime, storage},\n    unwrap_or_revert::UnwrapOrRevert,\n};\n\n#[no_mangle]\npub extern \"C\" fn update_msg() {\n\n    let value: String = runtime::get_named_arg(\"message\");\n    // Get the uref of the message stored in global state\n    let uref = runtime::get_key(\"message\").unwrap_or_revert().into_uref().unwrap_or_revert();\n    // Write the message to global state\n    storage::write(uref, String::from(value));\n}\n\n\n#[no_mangle]\npub extern \"C\" fn call() {\n    // Get the value of a passed parameter with the key \"message\"\n    let value: String = runtime::get_named_arg(\"message\");\n    // The value will be wraped in a URef\n    let value_ref = storage::new_uref(value);\n    // Creating the new set of named keys\n    // The keys are a Map of Key/Value\n    let mut named_keys: BTreeMap<String, Key> = BTreeMap::new();\n    // Insert the new value into the named keys\n    named_keys.insert(String::from(\"message\"),value_ref.into()); // use into to wrap the value to the key\n    // Create a new vector\n    let mut vec = Vec::new();\n    vec.push(Parameter::new(\"message\", CLType::String));\n    // Create an Entry Point Object\n    let mut entry_points = EntryPoints::new();\n\n    // Define the metadata for the entry point `update_msg`\n    entry_points.add_entry_point(EntryPoint::new(\n        \"update_msg\",\n        vec,\n        CLType::Unit,\n        EntryPointAccess::Public,\n        EntryPointType::Contract\n    ));\n\n    // The contract is stored in the global state\n    let (stored_contract_hash, _contract_version) = storage::new_contract(\n        entry_points,                                       // entry points metadata\n        Some(named_keys),                                   // named keys\n        Some(\"Hello_world_package_name\".to_string()),       // package name\n        Some(\"Hello_world_access_uref\".to_string())         // access uref\n    );\n\n    // To access from the account - named keys of the account\n    runtime::put_key(\"hello_world_contract\", stored_contract_hash.into());\n}\n```\n\n----------------------------------------\n\nTITLE: Using Session Code to Call Casper Contract in Tests\nDESCRIPTION: This code snippet shows how to use session code to call a Casper contract in tests. It includes creating a session code request and executing it using the test builder.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/versioned_docs/version-2.0.0/developers/writing-onchain-code/testing-session-code.md#2025-04-22_snippet_7\n\nLANGUAGE: rust\nCODE:\n```\nlet session_code_request = ExecuteRequestBuilder::standard(\n    *DEFAULT_ACCOUNT_ADDR,\n    COUNTER_CALL_WASM,\n    runtime_args! {\n        CONTRACT_KEY => contract_v1_hash\n    },\n)\n.build();\n\nbuilder.exec(session_code_request)\n    .expect_success()\n    .commit();\n```\n\n----------------------------------------\n\nTITLE: Implementing CEP-18 Token Transfer Test in Rust\nDESCRIPTION: This function tests the ability to transfer CEP-18 tokens between accounts. It checks initial balances, performs transfers, and verifies the resulting balances.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/docs/resources/tokens/cep18/tests.md#2025-04-22_snippet_5\n\nLANGUAGE: rust\nCODE:\n```\npub(crate) fn test_cep18_transfer(\n    builder: &mut InMemoryWasmTestBuilder,\n    test_context: &TestContext,\n    sender1: Key,\n    recipient1: Key,\n    sender2: Key,\n    recipient2: Key) {\n    let TestContext { cep18_token, .. } = test_context;\n\n    // Defining the amount to be transferred to each account.\n\n    let transfer_amount_1 = U256::from(TRANSFER_AMOUNT_1);\n    let transfer_amount_2 = U256::from(TRANSFER_AMOUNT_2);\n\n    // Checking the pre-existing balances of the default address and the two receiving addresses.\n\n    let sender_balance_before = cep18_check_balance_of(builder, cep18_token, sender1);\n    assert_ne!(sender_balance_before, U256::zero());\n\n    let account_1_balance_before = cep18_check_balance_of(builder, cep18_token, recipient1);\n    assert_eq!(account_1_balance_before, U256::zero());\n\n    let account_2_balance_before = cep18_check_balance_of(builder, cep18_token, recipient1);\n    assert_eq!(account_2_balance_before, U256::zero());\n\n    // Creating the first transfer request.\n\n    let token_transfer_request_1 =\n        make_cep18_transfer_request(sender1, cep18_token, recipient1, transfer_amount_1);\n\n    builder\n        .exec(token_transfer_request_1)\n        .expect_success()\n        .commit();\n\n    // Checking the prior balance against the new balance to ensure the transfer occurred correctly.\n\n    let account_1_balance_after = cep18_check_balance_of(builder, cep18_token, recipient1);\n    assert_eq!(account_1_balance_after, transfer_amount_1);\n    let account_1_balance_before = account_1_balance_after;\n\n    let sender_balance_after = cep18_check_balance_of(builder, cep18_token, sender1);\n    assert_eq!(\n        sender_balance_after,\n        sender_balance_before - transfer_amount_1\n    );\n    let sender_balance_before = sender_balance_after;\n\n    // Creating the second transfer request.\n\n    let token_transfer_request_2 =\n        make_cep18_transfer_request(sender2, cep18_token, recipient2, transfer_amount_2);\n\n    builder\n        .exec(token_transfer_request_2)\n        .expect_success()\n        .commit();\n\n    // Checking prior balances against new balances.\n\n    let sender_balance_after = cep18_check_balance_of(builder, cep18_token, sender1);\n    assert_eq!(sender_balance_after, sender_balance_before);\n\n    let account_1_balance_after = cep18_check_balance_of(builder, cep18_token, recipient1);\n    assert!(account_1_balance_after < account_1_balance_before);\n    assert_eq!(\n        account_1_balance_after,\n        transfer_amount_1 - transfer_amount_2\n    );\n\n    let account_2_balance_after = cep18_check_balance_of(builder, cep18_token, recipient2);\n    assert_eq!(account_2_balance_after, transfer_amount_2);\n}\n```\n\n----------------------------------------\n\nTITLE: Complete Hello World Contract with Message Update Functionality\nDESCRIPTION: A complete Casper contract implementation that includes both the call entry point (constructor) and an update_msg entry point. The contract stores a message in global state and provides functionality to update it later.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/versioned_docs/version-2.0.0/resources/advanced/cross-contract.md#2025-04-22_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\n#![no_std]\n#![no_main]\n\n#[cfg(not(target_arch = \"wasm32\"))]\ncompile_error!(\"target arch should be wasm32: compile with '--target wasm32-unknown-unknown'\");\n\n// We need to explicitly import the std alloc crate and `alloc::string::String` as we are in a\n// `no_std` environment.\nextern crate alloc;\n\n// The elementary types \nuse alloc::string::String;\nuse alloc::vec::Vec;\nuse alloc::collections::BTreeMap;\nuse crate::alloc::string::ToString;\n\n\n// Casper crates\nuse casper_types::{Key, CLType, Parameter, EntryPoint, EntryPoints, EntryPointType, EntryPointAccess};\n\nuse casper_contract:{\n    contract_api::{runtime, storage},\n    unwrap_or_revert::UnwrapOrRevert,\n};\n\n#[no_mangle]\npub extern \"C\" fn update_msg() {\n\n    let value: String = runtime::get_named_arg(\"message\");\n    // Get the uref of the message stored in global state\n    let uref = runtime::get_key(\"message\").unwrap_or_revert().into_uref().unwrap_or_revert();\n    // Write the message to global state\n    storage::write(uref, String::from(value));\n}\n\n\n#[no_mangle]\npub extern \"C\" fn call() {\n    // Get the value of a passed parameter with the key \"message\"\n    let value: String = runtime::get_named_arg(\"message\");\n    // The value will be wraped in a URef\n    let value_ref = storage::new_uref(value);\n    // Creating the new set of named keys\n    // The keys are a Map of Key/Value \n    let mut named_keys: BTreeMap<String, Key> = BTreeMap::new();\n    // Insert the new value into the named keys\n    named_keys.insert(String::from(\"message\"),value_ref.into()); // use into to wrap the value to the key\n    // Create a new vector \n    let mut vec = Vec::new();\n    vec.push(Parameter::new(\"message\", CLType::String));\n    // Create an Entry Point Object\n    let mut entry_points = EntryPoints::new();\n\n    // Define the metadata for the entry point `update_msg`\n    entry_points.add_entry_point(EntryPoint::new(\n        \"update_msg\",\n        vec,\n        CLType::Unit,\n        EntryPointAccess::Public,\n        EntryPointType::Contract\n    ));\n\n    // The contract is stored in the global state\n    let (stored_contract_hash, _contract_version) = storage::new_contract(\n        entry_points,                                       // entry points metadata\n        Some(named_keys),                                   // named keys \n        Some(\"Hello_world_package_name\".to_string()),       // package name\n        Some(\"Hello_world_access_uref\".to_string())         // access uref\n    );\n\n    // To access from the account - named keys of the account\n    runtime::put_key(\"hello_world_contract\", stored_contract_hash.into());\n}\n```\n\n----------------------------------------\n\nTITLE: Installing Smart Contracts with Rust SDK\nDESCRIPTION: Demonstrates the installation of a smart contract on the Casper Network using the Rust SDK. This code configures deployment parameters, session arguments, and payment settings before submitting the deploy to a node.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/versioned_docs/version-1.5.X/developers/dapps/sdk/client-library-usage.md#2025-04-22_snippet_18\n\nLANGUAGE: rust\nCODE:\n```\nextern crate casper_client;\nasync fn put_deploy(){\n    let maybe_rpc: &str = \"\";\n    let verbosity: u64 = 1;\n    let node_address: &str = \"http://135.181.216.142:7777\";\n    let deploy_params: casper_client::DeployStrParams = casper_client::DeployStrParams{\n        secret_key:\"./sk_testnet.pem\",\n        timestamp:\"\",\n        ttl:\"50s\",\n        gas_price:\"1000000000\",\n        chain_name:\"casper\", // or \"casper-test\"\n        dependencies: Vec::new(),\n        session_account: \"01daad67ebbcb725e02a1955a6617512b311435a21ca6d523085aa015d2d1b473a\"\n\n    };\n    // Without session args:\n    // let session_args: Vec<&str> = Vec::new();\n    // With session args:\n    let mut session_args: Vec<&str> = Vec::new();\n    session_args.push(\"argument:String='hello world'\");\n    let session_params: casper_client::SessionStrParams = casper_client::SessionStrParams::with_path(\"./contract.wasm\", session_args, \"\");\n    let payment_params: casper_client::PaymentStrParams = casper_client::PaymentStrParams::with_amount(\"10000000000\");\n    let result = casper_client::put_deploy(maybe_rpc_id, node_address, verbosity_level, deploy_params, session_params, payment_params).await.unwrap();\n    println!(\"Deploy response: {:?}\", result);\n}\n\n#[tokio::main]\nasync fn main(){\n    send_transfer().await;\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Token Transfer Using Reusable Purse in Rust\nDESCRIPTION: Implements a more sophisticated approach using a reusable purse maintained by the contract. This method involves getting a deposit purse from the contract, transferring tokens, and executing contract logic. While more complex, it's more efficient as it avoids creating new purses for each transfer.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/versioned_docs/version-2.0.0/resources/advanced/transfer-token-to-contract.md#2025-04-22_snippet_1\n\nLANGUAGE: rust\nCODE:\n```\n#[no_mangle]\npub extern \"C\" fn call() {\n    let amount: U512 = runtime::get_named_arg(\"amount\");\n    let contract_hash = runtime::get_named_arg(\"contract_hash\");\n    let deposit_point_name = runtime::get_named_arg(\"deposit_point_name\");\n    let other_entry_point_name = runtime::get_named_arg(\"other_entry_point_name\");\n\n    let deposit_purse: URef  = runtime::call_contract(contract_hash, deposit_point_name, runtime_args! {});\n\n    system::transfer_from_purse_to_purse(account::get_main_purse(), deposit_purse, amount, None)\n        .unwrap_or_revert();\n\n    runtime::call_contract(contract_hash, other_entry_point_name, runtime_args! {});\n}\n```\n\n----------------------------------------\n\nTITLE: Testing CEP-18 Token Properties in Rust\nDESCRIPTION: A unit test that verifies the queryable properties of the CEP-18 token, including name, symbol, decimals, total supply, and balances. It also checks for correct ownership handling.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/versioned_docs/version-2.0.0/resources/tokens/cep18/tests.md#2025-04-22_snippet_6\n\nLANGUAGE: rust\nCODE:\n```\n#[test]\nfn should_have_queryable_properties() {\n    let (mut builder, TestContext { cep18_token, .. }) = setup();\n\n    let name: String = builder.get_value(cep18_token, NAME_KEY);\n    assert_eq!(name, TOKEN_NAME);\n\n    let symbol: String = builder.get_value(cep18_token, SYMBOL_KEY);\n    assert_eq!(symbol, TOKEN_SYMBOL);\n\n    let decimals: u8 = builder.get_value(cep18_token, DECIMALS_KEY);\n    assert_eq!(decimals, TOKEN_DECIMALS);\n\n    let total_supply: U256 = builder.get_value(cep18_token, TOTAL_SUPPLY_KEY);\n    assert_eq!(total_supply, U256::from(TOKEN_TOTAL_SUPPLY));\n\n    let owner_key = Key::Account(*DEFAULT_ACCOUNT_ADDR);\n\n    let owner_balance = cep18_check_balance_of(&mut builder, &cep18_token, owner_key);\n    assert_eq!(owner_balance, total_supply);\n\n    let contract_balance =\n        cep18_check_balance_of(&mut builder, &cep18_token, Key::Hash(cep18_token.value()));\n    assert_eq!(contract_balance, U256::zero());\n\n    // Ensures that Account and Contract ownership is respected and we're not keying ownership under\n    // the raw bytes regardless of variant.\n    let inverted_owner_key = invert_cep18_address(owner_key);\n    let inverted_owner_balance =\n        cep18_check_balance_of(&mut builder, &cep18_token, inverted_owner_key);\n    assert_eq!(inverted_owner_balance, U256::zero());\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Entry Point in Casper Smart Contract\nDESCRIPTION: Demonstrates how to declare a public function (entry point) in a Casper smart contract. Entry points don't have input arguments in their definition but can access arguments using RuntimeArgs.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/versioned_docs/version-2.0.0/resources/moving-to-casper.md#2025-04-22_snippet_0\n\nLANGUAGE: rust\nCODE:\n```\n#[no_mangle]\npub extern \"C\" fn counter_inc() {\n    \n    // Entry point body\n}\n```\n\n----------------------------------------\n\nTITLE: Installing CEP-78 NFT Contract using Casper Client in Bash\nDESCRIPTION: A bash command for installing a CEP-78 NFT contract on the Casper network, including all required session arguments such as collection name, symbol, supply, ownership mode, and other modality settings.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/docs/resources/tokens/cep78/using-casper-client.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ncasper-client put-deploy -n http://localhost:11101/rpc --chain-name \"casper-net-1\" --payment-amount 500000000000 -k ~/casper/casper-node/utils/nctl/assets/net-1/nodes/node-1/keys/secret_key.pem --session-path ~/casper/enhanced-nft/contract/target/wasm32-unknown-unknown/release/contract.wasm \\\n--session-arg \"collection_name:string='CEP-78-collection'\" \\\n--session-arg \"collection_symbol:string='CEP78'\" \\\n--session-arg \"total_token_supply:u64='100'\" \\\n--session-arg \"ownership_mode:u8='2'\" \\\n--session-arg \"nft_kind:u8='1'\" \\\n--session-arg \"nft_metadata_kind:u8='0'\" \\\n--session-arg \"json_schema:string=''\" \\\n--session-arg \"identifier_mode:u8='0'\" \\\n--session-arg \"metadata_mutability:u8='0'\"\n```\n\n----------------------------------------\n\nTITLE: Initial Base Contract for Cross-Contract Communication in Rust\nDESCRIPTION: A basic Rust contract template with necessary imports for Casper blockchain development. This provides the foundation for implementing cross-contract communication with an empty call entry point.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/versioned_docs/version-1.5.X/resources/advanced/cross-contract.md#2025-04-22_snippet_6\n\nLANGUAGE: rust\nCODE:\n```\n#![no_std]\n#![no_main]\n\n#[cfg(not(target_arch = \"wasm32\"))]\ncompile_error!(\"target arch should be wasm32: compile with '--target wasm32-unknown-unknown'\");\n\n// We need to explicitly import the std alloc crate and `alloc::string::String` as we are in a\n// `no_std` environment.\nextern crate alloc;\n\n// The elementary types\nuse alloc::string::String;\nuse alloc::vec::Vec;\nuse alloc::collections::BTreeMap;\nuse crate::alloc::string::ToString;\n\n\n// Casper crates\nuse casper_types::{Key, CLType, Parameter, EntryPoint, EntryPoints, EntryPointType, EntryPointAccess};\n\nuse casper_contract:{\n    contract_api::{runtime, storage},\n    unwrap_or_revert::UnwrapOrRevert,\n};\n\n\n#[no_mangle]\npub extern \"C\" fn call() {\n\n}\n```\n\n----------------------------------------\n\nTITLE: Defining BlockHeaderV2 Schema in JSON\nDESCRIPTION: JSON schema for the header portion of a block in the Casper Network, including various block properties such as hashes, timestamps, and validator information.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/condor/jsonrpc-comp/rpc-2.0/schema/components.json.md#2025-04-22_snippet_72\n\nLANGUAGE: json\nCODE:\n```\n\"BlockHeaderV2\": {\n    \"description\": \"The header portion of a block.\",\n    \"type\": \"object\",\n    \"required\": [\n        \"accumulated_seed\",\n        \"body_hash\",\n        \"current_gas_price\",\n        \"era_id\",\n        \"height\",\n        \"parent_hash\",\n        \"proposer\",\n        \"protocol_version\",\n        \"random_bit\",\n        \"state_root_hash\",\n        \"timestamp\"\n    ],\n    \"properties\": {\n        \"parent_hash\": {\n            \"description\": \"The parent block's hash.\",\n            \"allOf\": [\n                {\n                    \"$ref\": \"#/components/schemas/BlockHash\"\n                }\n            ]\n        },\n        \"state_root_hash\": {\n            \"description\": \"The root hash of global state after the deploys in this block have been executed.\",\n            \"allOf\": [\n                {\n                    \"$ref\": \"#/components/schemas/Digest\"\n                }\n            ]\n        },\n        \"body_hash\": {\n            \"description\": \"The hash of the block's body.\",\n            \"allOf\": [\n                {\n                    \"$ref\": \"#/components/schemas/Digest\"\n                }\n            ]\n        },\n        \"random_bit\": {\n            \"description\": \"A random bit needed for initializing a future era.\",\n            \"type\": \"boolean\"\n        },\n        \"accumulated_seed\": {\n            \"description\": \"A seed needed for initializing a future era.\",\n            \"allOf\": [\n                {\n                    \"$ref\": \"#/components/schemas/Digest\"\n                }\n            ]\n        },\n        \"era_end\": {\n            \"description\": \"The `EraEnd` of a block if it is a switch block.\",\n            \"anyOf\": [\n                {\n                    \"$ref\": \"#/components/schemas/EraEndV2\"\n                },\n                {\n                    \"type\": \"null\"\n                }\n            ]\n        },\n        \"timestamp\": {\n            \"description\": \"The timestamp from when the block was proposed.\",\n            \"allOf\": [\n                {\n                    \"$ref\": \"#/components/schemas/Timestamp\"\n                }\n            ]\n        },\n        \"era_id\": {\n            \"description\": \"The era ID in which this block was created.\",\n            \"allOf\": [\n                {\n                    \"$ref\": \"#/components/schemas/EraId\"\n                }\n            ]\n        },\n        \"height\": {\n            \"description\": \"The height of this block, i.e. the number of ancestors.\",\n            \"type\": \"integer\",\n            \"format\": \"uint64\",\n            \"minimum\": 0.0\n        },\n        \"protocol_version\": {\n            \"description\": \"The protocol version of the network from when this block was created.\",\n            \"allOf\": [\n                {\n                    \"$ref\": \"#/components/schemas/ProtocolVersion\"\n                }\n            ]\n        },\n        \"proposer\": {\n            \"description\": \"The public key of the validator which proposed the block.\",\n            \"allOf\": [\n                {\n                    \"$ref\": \"#/components/schemas/PublicKey\"\n                }\n            ]\n        },\n        \"current_gas_price\": {\n            \"description\": \"The gas price of the era\",\n            \"type\": \"integer\",\n            \"format\": \"uint8\",\n            \"minimum\": 0.0\n        },\n        \"last_switch_block_hash\": {\n            \"description\": \"The most recent switch block hash.\",\n            \"anyOf\": [\n                {\n                    \"$ref\": \"#/components/schemas/BlockHash\"\n                },\n                {\n                    \"type\": \"null\"\n                }\n            ]\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Querying the Casper Network State with Arguments\nDESCRIPTION: This command queries the global state of the Casper Network for a specific contract entry point using additional arguments.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/versioned_docs/version-2.0.0/resources/tokens/cep18/full-tutorial.md#2025-04-22_snippet_13\n\nLANGUAGE: bash\nCODE:\n```\ncasper-client query-global-state \\\n--node-address http://<HOST:PORT> \\\n--state-root-hash [STATE_ROOT_HASH] \\\n--key [ACCOUNT_HASH] \\\n-q \"[CONTRACT_NAME/ARGUMENT]\"\n```\n\n----------------------------------------\n\nTITLE: Calling a Smart Contract Entry Point on Casper Network\nDESCRIPTION: This command creates a deploy that calls an entry point (function) in a smart contract already on the blockchain. Instead of deploying a new contract, it executes functionality in an existing contract referenced by a named key.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/versioned_docs/version-1.5.X/resources/beginner/counter/commands.md#2025-04-22_snippet_4\n\nLANGUAGE: rust\nCODE:\n```\ncasper-client put-deploy \\\n    --node-address [NODE_SERVER_ADDRESS] \\\n    --chain-name casper-net-1 \\\n    --secret-key [KEY_PATH]/secret_key.pem \\\n    --payment-amount [PAYMENT_AMOUNT_IN_MOTES] \\\n    --session-name \"counter\" \\\n    --session-entry-point \"counter_inc\"\n```\n\n----------------------------------------\n\nTITLE: Serializing and Deserializing Deploys\nDESCRIPTION: Functions to convert a deploy to and from JSON format for storage or transmission. Useful for database storage or external processing.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/versioned_docs/version-2.0.0/developers/dapps/sdk/script-sdk.md#2025-04-22_snippet_4\n\nLANGUAGE: JavaScript\nCODE:\n```\nconst jsonFromDeploy = DeployUtil.deployToJson(signedDeploy);\n\nconst deployFromJson = DeployUtil.deployFromJson(jsonFromDeploy);\n```\n\n----------------------------------------\n\nTITLE: CSPR Token Transfer Implementation\nDESCRIPTION: Complete implementation of CSPR token transfers including client setup, deploy creation, and transaction signing\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/docs/developers/dapps/sdk/client-library-usage.md#2025-04-22_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nconst { CasperClient, DeployUtil } = require(\"casper-js-sdk\");\n\nconst casperClient = new CasperClient(\"http://NODE_ADDRESS:7777/rpc\");\nconst receipientPublicKeyHex = \"01e8c84f4fbb58d37991ef373c08043a45c44cd7f499453fa2bd3e141cc0113b3c\"\n\nconst amount = 2.5e9 // Minimum transfer: 2.5 CSPR\nlet deployParams = new DeployUtil.DeployParams(\n  keypair.publicKey,\n  \"casper\" // or \"casper-test\" for Testnet\n);\n\nconst session = DeployUtil.ExecutableDeployItem.newTransferWithOptionalTransferId(\n  amount,\n  recipientPublicKeyHex\n);\n\nconst payment = DeployUtil.standardPayment(0.1e9); // Gas payment in motes: 0.1 CSPR\nconst deploy = DeployUtil.makeDeploy(deployParams, session, payment);\nconst signedDeploy = DeployUtil.signDeploy(deploy, keypair);\n\nconsole.log(await casperClient.putDeploy(signedDeploy));\n```\n\nLANGUAGE: python\nCODE:\n```\nimport pycspr\n\nclient = NodeClient(NodeConnection(host = \"NODE_ADDRESS\", port_rpc = 7777))\nrecipientPublicKeyHex = \"01e8c84f4fbb58d37991ef373c08043a45c44cd7f499453fa2bd3e141cc0113b3c\"\nrecipientPublicKeyBytes = pycspr.crypto.cl_checksum.decode(recipientPublicKeyHex)\n\ndeployParams = pycspr.create_deploy_parameters(\n    account = keypair,\n    chain_name = \"casper\" # or \"casper-test\" for Testnet\n)\n\ndeploy = pycspr.create_transfer(\n    params = deployParams,\n    amount = int(2.5e9), # Minimum transfer: 2.5 CSPR\n    target = recipientPublicKeyBytes\n)\n\ndeploy.approve(keypair)\nclient.send_deploy(deploy)\nprint(deploy.hash.hex())\n```\n\nLANGUAGE: rust\nCODE:\n```\nextern crate casper_client;\nasync fn send_transfer(){\n    let maybe_rpc_id: &str = \"\";\n    let node_address: &str = \"http://135.181.216.142:7777\";\n    let verbosity_level: u64 = 1;\n    let amount: &str = \"2500000000\";\n    let target_account: &str = recipient;\n    let transfer_id: &str = \"1\";\n    let deploy_params: casper_client::DeployStrParams = casper_client::DeployStrParams{\n        secret_key:\"./sk_testnet.pem\",\n        timestamp:\"\",\n        ttl:\"50s\",\n        gas_price:\"1000000000\",\n        chain_name:\"casper\", // or \"casper-test\" for testnet\n        dependencies: Vec::new(),\n        session_account: \"01daad67ebbcb725e02a1955a6617512b311435a21ca6d523085aa015d2d1b473a\"\n\n    };\n    let recipient: &str = \"0106ca7c39cd272dbf21a86eeb3b36b7c26e2e9b94af64292419f7862936bca2ca\";\n    let payment_params: casper_client::PaymentStrParams = casper_client::PaymentStrParams::with_amount(amount);\n    let result = casper_client::transfer(maybe_rpc_id, node_address, verbosity_level, amount, target_account, transfer_id, deploy_params, payment_params).await.unwrap();\n    println!(\"Deploy response: {:?}\", result);\n}\n\n#[tokio::main]\nasync fn main(){\n    send_transfer().await;\n}\n```\n\n----------------------------------------\n\nTITLE: Installing Smart Contracts on Casper Network\nDESCRIPTION: Demonstrates how to install a compiled Wasm contract on the Casper Network using the network's SDKs. Includes setting up the client, preparing runtime arguments, and submitting the deploy with proper gas payments.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/versioned_docs/version-2.0.0/developers/dapps/sdk/client-library-usage.md#2025-04-22_snippet_14\n\nLANGUAGE: javascript\nCODE:\n```\nconst { CasperClient, Contracts, RuntimeArgs, CLValueBuilder } = require(\"casper-js-sdk\")\nconst fs = require(\"fs\")\n\nconst casperClient = new CasperClient(\"http://NODE_ADDRESS:7777/rpc\")\nconst contract = new Contracts.Contract(casperClient)\n\nconst contractWasm = new Uint8Array(fs.readFileSync(\"/path/to/contract.wasm\").buffer)\n\nconst runtimeArguments = RuntimeArgs.fromMap({\n  \"argument\": CLValueBuilder.string(\"Hello world!\")\n})\n\nconst deploy = contract.install(\n  contractWasm,\n  runtimeArguments,\n  \"10000000000\", // Gas payment (10 CSPR)\n  keypair.publicKey,\n  \"casper\", // or \"casper-test\" for Testnet\n  [keypair]\n)\n\nconsole.log(await casperClient.putDeploy(deploy))\n```\n\nLANGUAGE: python\nCODE:\n```\nimport pycspr\nfrom pycspr.types import ModuleBytes, CL_String\n\nclient = NodeClient(NodeConnection(host = \"NODE_ADDRESS\", port_rpc = 7777))\n\ndeployParams = pycspr.create_deploy_parameters(\n    account = keypair,\n    chain_name = \"casper\" # or \"casper-test\" for Testnet\n)\npayment = pycspr.create_standard_payment(10000000000) # 10 CSPR\nsession = ModuleBytes(\n    module_bytes = pycspr.read_wasm(\"/path/to/contract.wasm\"),\n    args = {\n        \"message\": CL_String(\"Hello world!\"),\n    }\n)\n\ndeploy = pycspr.create_deploy(deployParams, payment, session)\n\ndeploy.approve(keypair)\nclient.send_deploy(deploy)\nprint(deploy.hash.hex())\n```\n\nLANGUAGE: rust\nCODE:\n```\nextern crate casper_client;\nasync fn put_deploy(){\n    let maybe_rpc: &str = \"\";\n    let verbosity: u64 = 1;\n    let node_address: &str = \"http://135.181.216.142:7777\";\n    let deploy_params: casper_client::DeployStrParams = casper_client::DeployStrParams{\n        secret_key:\"./sk_testnet.pem\",\n        timestamp:\"\",\n        ttl:\"50s\",\n        gas_price:\"1000000000\",\n        chain_name:\"casper\", // or \"casper-test\"\n        dependencies: Vec::new(),\n        session_account: \"01daad67ebbcb725e02a1955a6617512b311435a21ca6d523085aa015d2d1b473a\"\n\n    };\n    // Without session args:\n    // let session_args: Vec<&str> = Vec::new();\n    // With session args:\n    let mut session_args: Vec<&str> = Vec::new();\n    session_args.push(\"argument:String='hello world'\");\n    let session_params: casper_client::SessionStrParams = casper_client::SessionStrParams::with_path(\"./contract.wasm\", session_args, \"\");\n    let payment_params: casper_client::PaymentStrParams = casper_client::PaymentStrParams::with_amount(\"10000000000\");\n    let result = casper_client::put_deploy(maybe_rpc_id, node_address, verbosity_level, deploy_params, session_params, payment_params).await.unwrap();\n    println!(\"Deploy response: {:?}\", result);\n}\n\n#[tokio::main]\nasync fn main(){\n    send_transfer().await;\n}\n```\n\n----------------------------------------\n\nTITLE: Increasing CEP-18 Token Allowance using Casper Client\nDESCRIPTION: This command increases the designated allowance for a provided account. It specifies the spender's account hash and the additional amount of CEP-18 tokens that the authorized account may spend.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/docs/resources/tokens/cep18/transfer.md#2025-04-22_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\ncasper-client put-deploy -n http://<NODE IP>:<PORT> \\\n--secret-key ~/casper/demo/user_a/secret_key.pem \\\n--session-package-name \"cep18_contract_package_CEP18\" \\\n--session-entry-point \"increase_allowance\" \\\n--session-arg \"spender:key='account-hash-683f53f56926f54ef9584b07585b025c68415dc05f7b2e56749153574b83d5cd'\" \\\n--session-arg \"amount:U256='10'\" \\\n--chain-name <CHAIN NAME> \\\n--payment-amount 1000000000\n```\n\n----------------------------------------\n\nTITLE: Defining Casper Network Transfer Schema in JSON\nDESCRIPTION: This JSON schema definition represents a version 1 transfer from one purse to another in the Casper Network. It includes required properties like deploy_hash, from, source, target, amount, and gas, as well as optional properties like to and id. The schema references other component schemas such as DeployHash, AccountHash, URef, and U512.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/condor/jsonrpc-comp/rpc-2.0/schema/TransferV1.json.md#2025-04-22_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"description\": \"Represents a version 1 transfer from one purse to another.\",\n    \"type\": \"object\",\n    \"required\": [\n        \"amount\",\n        \"deploy_hash\",\n        \"from\",\n        \"gas\",\n        \"source\",\n        \"target\"\n    ],\n    \"properties\": {\n        \"deploy_hash\": {\n            \"description\": \"Hex-encoded Deploy hash of Deploy that created the transfer.\",\n            \"allOf\": [\n                {\n                    \"$ref\": \"#/components/schemas/DeployHash\"\n                }\n            ]\n        },\n        \"from\": {\n            \"description\": \"Account from which transfer was executed\",\n            \"allOf\": [\n                {\n                    \"$ref\": \"#/components/schemas/AccountHash\"\n                }\n            ]\n        },\n        \"to\": {\n            \"description\": \"Account to which funds are transferred\",\n            \"anyOf\": [\n                {\n                    \"$ref\": \"#/components/schemas/AccountHash\"\n                },\n                {\n                    \"type\": \"null\"\n                }\n            ]\n        },\n        \"source\": {\n            \"description\": \"Source purse\",\n            \"allOf\": [\n                {\n                    \"$ref\": \"#/components/schemas/URef\"\n                }\n            ]\n        },\n        \"target\": {\n            \"description\": \"Target purse\",\n            \"allOf\": [\n                {\n                    \"$ref\": \"#/components/schemas/URef\"\n                }\n            ]\n        },\n        \"amount\": {\n            \"description\": \"Transfer amount\",\n            \"allOf\": [\n                {\n                    \"$ref\": \"#/components/schemas/U512\"\n                }\n            ]\n        },\n        \"gas\": {\n            \"description\": \"Gas\",\n            \"allOf\": [\n                {\n                    \"$ref\": \"#/components/schemas/U512\"\n                }\n            ]\n        },\n        \"id\": {\n            \"description\": \"User-defined id\",\n            \"type\": [\n                \"integer\",\n                \"null\"\n            ],\n            \"format\": \"uint64\",\n            \"minimum\": 0\n        }\n    },\n    \"additionalProperties\": false\n}\n```\n\n----------------------------------------\n\nTITLE: Querying Specific Contract Details\nDESCRIPTION: Retrieve details about the deployed counter contract from the network state.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/versioned_docs/version-2.0.0/resources/beginner/counter/walkthrough.md#2025-04-22_snippet_8\n\nLANGUAGE: bash\nCODE:\n```\ncasper-client query-global-state --node-address http://localhost:11101 \\\n    --state-root-hash [STATE_ROOT_HASH] \\\n    --key [ACCOUNT_HASH] -q \"counter\"\n```\n\n----------------------------------------\n\nTITLE: Installing CEP-78 NFT Contract with casper-cep78-js-client - JavaScript\nDESCRIPTION: Illustrates how to deploy a new CEP-78 NFT contract instance using the install method of CEP78Client. This snippet constructs a deploy transaction with custom NFT collection parameters and sends it to the Casper network via a specified RPC URL. Required dependencies include casper-cep78-js-client and associated Casper key material, and several contract parameters such as collection name, symbol, and metadata options must be specified. The deploy returns a deployHash which can be used to track deployment status.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/docs/resources/tokens/cep78/js-tutorial.md#2025-04-22_snippet_1\n\nLANGUAGE: JavaScript\nCODE:\n```\n\n  const cc = new CEP78Client(process.env.NODE_URL!, process.env.NETWORK_NAME!);\n\n  const installDeploy = await cc.install(\n    {\n      collectionName: \"my-collection\",\n      collectionSymbol: \"MY-NFTS\",\n      totalTokenSupply: \"1000\",\n      ownershipMode: NFTOwnershipMode.Transferable,\n      nftKind: NFTKind.Physical,\n      jsonSchema: {\n        properties: {\n          color: { name: \"color\", description: \"\", required: true },\n          size: { name: \"size\", description: \"\", required: true },\n          material: { name: \"material\", description: \"\", required: true },\n          condition: { name: \"condition\", description: \"\", required: false },\n        },\n      },\n      nftMetadataKind: NFTMetadataKind.CustomValidated,\n      identifierMode: NFTIdentifierMode.Ordinal,\n      metadataMutability: MetadataMutability.Immutable,\n      mintingMode: MintingMode.Installer,\n      ownerReverseLookupMode: OwnerReverseLookupMode.Complete\n    },\n    \"250000000000\",\n    FAUCET_KEYS.publicKey,\n    [FAUCET_KEYS]\n  );\n\n  const hash = await installDeploy.send(process.env.http://localhost:11101/rpc);\n\n```\n\n----------------------------------------\n\nTITLE: Querying CEP-18 Contract Arguments in Casper Network\nDESCRIPTION: This snippet shows how to query the global state of a CEP-18 contract on the Casper Network. It uses the state root hash and account hash to retrieve the 'name' argument of the contract.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/versioned_docs/version-1.5.X/resources/beginner/cep18.md#2025-04-22_snippet_8\n\nLANGUAGE: bash\nCODE:\n```\ncasper-client query-global-state --node-address http://78.46.32.13:7777 \\\n--state-root-hash 7706d906fce25dcdadb2a9453f5243a6c72c4444e6c826cf2941157333a48705 \\\n--key account-hash-ee57bb3b39eb66b74a1dcf12f3f0e7d8e906e34b11f85dc05497bf33fbf3a1f9 \\\n-q \"cep18_contract_hash_CHF Coin/name\"\n```\n\n----------------------------------------\n\nTITLE: Transferring CSPR Tokens - Python - python\nDESCRIPTION: Shows how to send a transfer deploy using pycspr from a Python application. The NodeClient and account keypair are used to compose transaction parameters, encode recipient, configure deploy with the minimum transfer amount, sign, and submit to node. Inputs: recipient public key, keypair, amount, chain name. Output: deploy hash printed after successful submission.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/versioned_docs/version-2.0.0/developers/dapps/sdk/client-library-usage.md#2025-04-22_snippet_12\n\nLANGUAGE: python\nCODE:\n```\nimport pycspr\n\nclient = NodeClient(NodeConnection(host = \"NODE_ADDRESS\", port_rpc = 7777))\nrecipientPublicKeyHex = \"01e8c84f4fbb58d37991ef373c08043a45c44cd7f499453fa2bd3e141cc0113b3c\"\nrecipientPublicKeyBytes = pycspr.crypto.cl_checksum.decode(recipientPublicKeyHex)\n\ndeployParams = pycspr.create_deploy_parameters(\n    account = keypair,\n    chain_name = \"casper\" # or \"casper-test\" for Testnet\n)\n\ndeploy = pycspr.create_transfer(\n    params = deployParams,\n    amount = int(2.5e9), # Minimum transfer: 2.5 CSPR\n    target = recipientPublicKeyBytes\n)\n\ndeploy.approve(keypair)\nclient.send_deploy(deploy)\nprint(deploy.hash.hex())\n```\n\n----------------------------------------\n\nTITLE: Initializing Casper Contract with Parameter Parsing and Entry Point Metadata in Rust\nDESCRIPTION: This snippet extends the minimal contract by defining a 'call' entry point that receives a 'message' argument. It demonstrates storing the message as a URef in the contract's global state, preparing a named keys map, and constructing entry point metadata for cross-contract communication via a public 'update_msg' entry point. Proper use of Casper's runtime and storage APIs is illustrated. Dependencies as above are required, and entry point and parameter naming must match for correct contract behavior.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/docs/resources/advanced/cross-contract.md#2025-04-22_snippet_4\n\nLANGUAGE: Rust\nCODE:\n```\n#![no_std]\\n#![no_main]\\n\\n#[cfg(not(target_arch = \\\"wasm32\\\"))]\\ncompile_error!(\\\"target arch should be wasm32: compile with '--target wasm32-unknown-unknown'\\\");\\n\\n// We need to explicitly import the std alloc crate and `alloc::string::String` as we are in a\\n// `no_std` environment.\\nextern crate alloc;\\n\\n// The elementary types \\nuse alloc::string::String;\\nuse alloc::vec::Vec;\\nuse alloc::collections::BTreeMap;\\nuse crate::alloc::string::ToString;\\n\\n\\n// Casper crates\\nuse casper_types::{Key, CLType, Parameter, EntryPoint, EntryPoints, EntryPointType, EntryPointAccess};\\n\\nuse casper_contract::{\\n    contract_api::{runtime, storage},\\n    unwrap_or_revert::UnwrapOrRevert,\\n};\\n\\n\\n#[no_mangle]\\npub extern \\\"C\\\" fn call() {\\n\\n    // Get the value of the runtime argument named \\\"message\\\"\\n    let value: String = runtime::get_named_arg(\\\"message\\\");\\n\\n    // The value will be written under a URef\\n    let value_ref = storage::new_uref(value);\\n\\n    // Creating the new set of named keys\\n    // The keys are a Map of String/casper_types::Key\\n    let mut named_keys: BTreeMap<String, Key> = BTreeMap::new();\\n\\n    // Insert the new value into the named keys\\n    named_keys.insert(String::from(\\\"message\\\"),value_ref.into()); // use into to wrap the Uref into a casper_types::Key\\n    // Create a new vector \\n    let mut params = Vec::new();\\n    vec.push(Parameter::new(\\\"message\\\", CLType::String));\\n\\n    // Create an Entry Point Object\\n    let mut entry_points = EntryPoints::new();\\n\\n    // Describing the metadata for the entry point\\n    entry_points.add_entry_point(EntryPoint::new(\\n        \\\"update_msg\\\",                   // the name of the entry point\\n        vec,                            // the arguments which can be passed into the entry point\\n        CLType::Unit,                   // return type of the entry point\\n        EntryPointAccess::Public,       // access permissions - public can be accessed always\\n        EntryPointType::Contract        // in most cases it will be contract\\n    ));\\n\\n    // The contract is stored in the global state\\n    let (stored_contract_hash, _contract_version) = storage::new_contract(\\n        entry_points,                                       // entry points\\n        Some(named_keys),                                   // named keys \\n        Some(\\\"Hello_world_package_name\\\".to_string()),       // package name\\n        Some(\\\"Hello_world_access_uref\\\".to_string())         // access uref\\n    );\\n\\n    // To access the contract hash from the accounts named keys\\n    runtime::put_key(\\\"hello_world_contract\\\", stored_contract_hash.into());\\n\\n}\\n\n```\n\n----------------------------------------\n\nTITLE: Defining Entity Structure with Versioning and Access Control - JSON\nDESCRIPTION: Defines a JSON schema object representing an entity with metadata, version control, user group mappings, and security lock status for use within a Casper-based environment. This schema requires 'disabled_versions', 'groups', 'lock_status', and 'versions' properties, each documented and referencing further component schemas for array structures and package status. It expects input objects following this structure, enforces the uniqueness of disabled versions, and relies on schema components such as 'Array_of_EntityVersionAndHash', 'EntityVersionKey', 'Array_of_NamedUserGroup', and 'PackageStatus'. The output is a validated JSON object instance conforming to these rules; the schema assumes these $refs are resolvable within the broader specification context.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/condor/jsonrpc-comp/rpc-2.0/schema/Package.json.md#2025-04-22_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"description\": \"Entity definition, metadata, and security container.\",\n    \"type\": \"object\",\n    \"required\": [\n        \"disabled_versions\",\n        \"groups\",\n        \"lock_status\",\n        \"versions\"\n    ],\n    \"properties\": {\n        \"versions\": {\n            \"description\": \"All versions (enabled & disabled).\",\n            \"allOf\": [\n                {\n                    \"$ref\": \"#/components/schemas/Array_of_EntityVersionAndHash\"\n                }\n            ]\n        },\n        \"disabled_versions\": {\n            \"description\": \"Collection of disabled entity versions. The runtime will not permit disabled entity versions to be executed.\",\n            \"type\": \"array\",\n            \"items\": {\n                \"$ref\": \"#/components/schemas/EntityVersionKey\"\n            },\n            \"uniqueItems\": true\n        },\n        \"groups\": {\n            \"description\": \"Mapping maintaining the set of URefs associated with each \\\"user group\\\". This can be used to control access to methods in a particular version of the entity. A method is callable by any context which \\\"knows\\\" any of the URefs associated with the method's user group.\",\n            \"allOf\": [\n                {\n                    \"$ref\": \"#/components/schemas/Array_of_NamedUserGroup\"\n                }\n            ]\n        },\n        \"lock_status\": {\n            \"description\": \"A flag that determines whether a entity is locked\",\n            \"allOf\": [\n                {\n                    \"$ref\": \"#/components/schemas/PackageStatus\"\n                }\n            ]\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Cloning the CEP-18 Repository\nDESCRIPTION: Command to clone the Casper CEP-18 fungible token repository from GitHub. This is the first step in creating a new fungible token on Casper.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/versioned_docs/version-2.0.0/resources/beginner/cep18.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ngit clone https://github.com/casper-ecosystem/cep18.git\n```\n\n----------------------------------------\n\nTITLE: Creating a Casper Contract with Named Keys and Package Name in Rust\nDESCRIPTION: This Rust code snippet demonstrates how to create a new contract on the Casper network using the `storage::new_contract` function from the `casper-contract` crate. It associates entry points, defines named keys (including one for the contract package name, `counter_package_name`), and specifies an access URef. This setup is necessary for later invoking the contract using its package name.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/docs/developers/cli/calling-contracts.md#2025-04-22_snippet_13\n\nLANGUAGE: rust\nCODE:\n```\n    let (stored_contract_hash, contract_version) =\n        storage::new_contract(counter_entry_points, \n            Some(counter_named_keys), \n            Some(\"counter_package_name\".to_string()),\n            Some(\"counter_access_uref\".to_string())\n    );\n```\n\n----------------------------------------\n\nTITLE: Defining Dependencies for Casper Smart Contract Testing in Rust\nDESCRIPTION: This code snippet shows the '[dependencies]' section to add to '/tests/Cargo.toml' when setting up a test suite for Casper contracts using the official Rust libraries. It demonstrates how to require the Casper execution engine, test support, and shared types. Accurate dependency versions and using the 'test-support' feature are critical; prerequisites include Rust tooling and Casper contract sources. All versions should be updated as appropriate for your project.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/versioned_docs/version-1.5.X/developers/writing-onchain-code/testing-contracts.md#2025-04-22_snippet_0\n\nLANGUAGE: rust\nCODE:\n```\n[dependencies]\ncasper-execution-engine = \"5.0.0\"\ncasper-engine-test-support = { version = \"5.0.0\", features = [\"test-support\"] }\ncasper-types = \"3.0.0\"\n```\n\n----------------------------------------\n\nTITLE: Complete Casper Call Function Implementation\nDESCRIPTION: Complete implementation of the call function including entry points, named keys, contract creation, and version management for a counter contract.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/versioned_docs/version-2.0.0/developers/writing-onchain-code/simple-contract.md#2025-04-22_snippet_13\n\nLANGUAGE: rust\nCODE:\n```\n#[no_mangle]\npub extern \"C\" fn call() {\n    // Initialize the count to 0 locally\n    let count_start = storage::new_uref(0_i32);\n    // Create the entry points for this contract\n    let mut counter_entry_points = EntryPoints::new();\n\n    counter_entry_points.add_entry_point(EntryPoint::new(\n        ENTRY_POINT_COUNTER_GET,\n        Vec::new(),\n        CLType::I32,\n        EntryPointAccess::Public,\n        EntryPointType::Contract,\n    ));\n\n    counter_entry_points.add_entry_point(EntryPoint::new(\n        ENTRY_POINT_COUNTER_INC,\n        Vec::new(),\n        CLType::Unit,\n        EntryPointAccess::Public,\n        EntryPointType::Contract,\n    ));\n\n    // In the named keys of the counter contract, add a key for the count.\n    let mut counter_named_keys = NamedKeys::new();\n    let key_name = String::from(COUNT_KEY);\n    counter_named_keys.insert(key_name, count_start.into());\n\n    // Create a new contract package that can be upgraded.\n    let (stored_contract_hash, contract_version) = storage::new_contract(\n        counter_entry_points,\n        Some(counter_named_keys),\n        Some(CONTRACT_PACKAGE_NAME.to_string()),\n        Some(CONTRACT_ACCESS_UREF.to_string()),\n    );\n\n    /* To create a locked contract instead, use new_locked_contract and throw away the contract version returned\n    let (stored_contract_hash, _) =\n    storage::new_locked_contract(counter_entry_points, Some(counter_named_keys), None, None); */\n\n    // Store the contract version in the context's named keys.\n    let version_uref = storage::new_uref(contract_version);\n    runtime::put_key(CONTRACT_VERSION_KEY, version_uref.into());\n\n    // Create a named key for the contract hash.\n    runtime::put_key(CONTRACT_KEY, stored_contract_hash.into());\n}\n```\n\n----------------------------------------\n\nTITLE: Initiating Transfers on Casper Network using Go SDK\nDESCRIPTION: This Go example showcases sending a transfer on the Casper Network using the Go SDK. It involves initializing account keys, setting up session modules, and deploying transactions. Dependencies include 'github.com/make-software/casper-go-sdk/casper', 'github.com/make-software/casper-go-sdk/types/clvalue', and http. Inputs are the account public key and transfer details, with the output being the transfer deploy hash.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/versioned_docs/version-2.0.0/developers/dapps/sdk/go-sdk.md#2025-04-22_snippet_2\n\nLANGUAGE: go\nCODE:\n```\npackage main\n\nimport (\n    \"context\"\n    \"encoding/hex\"\n    \"log\"\n    \"math/big\"\n    \"net/http\"\n\n    \"github.com/make-software/casper-go-sdk/casper\"\n    \"github.com/make-software/casper-go-sdk/types/clvalue\"\n)\n\nfunc main() {\n    accountPublicKey, err := casper.NewPublicKey(\"012488699f9a31e36ecf002675cd7186b48e6a735d10ec1b308587ca719937752c\")\n    if err != nil { return }\n    amount := big.NewInt(100000000)\n    session := casper.ExecutableDeployItem{\n        ModuleBytes: &casper.ModuleBytes{\n            ModuleBytes: hex.EncodeToString([]byte(\"<Contract WASM>\")),\n            Args: (&casper.Args{}).\n                AddArgument(\"target\", clvalue.NewCLByteArray(accountPublicKey.AccountHash().Bytes())).\n                AddArgument(\"amount\", *clvalue.NewCLUInt512(amount)),\n        },\n    }\n\n    payment := casper.StandardPayment(amount)\n\n    deployHeader := casper.DefaultHeader()\n    deployHeader.Account = accountPublicKey\n    deployHeader.ChainName = \"casper-test\"\n\n    newDeploy, err := casper.MakeDeploy(deployHeader, payment, session)\n\n    handler := casper.NewRPCHandler(\"https://<Node Address>:7777/rpc\", http.DefaultClient)\n    client := casper.NewRPCClient(handler)\n    result, err := client.PutDeploy(context.Background(), *newDeploy)\n\n    log.Println(result.DeployHash)\n}\n```\n\n----------------------------------------\n\nTITLE: Calling Contract Entry Point (Increment Counter) using Casper Client (Bash)\nDESCRIPTION: Sends a deploy to execute a specific entry point (`counter_inc`) of a previously deployed contract (identified by `--session-name 'counter'`). This invokes the contract logic to increment the counter. Requires node address, chain name, secret key, and payment amount.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/docs/resources/quick-start.md#2025-04-22_snippet_19\n\nLANGUAGE: bash\nCODE:\n```\ncasper-client put-deploy \\\n--node-address [NODE_ADDRESS] \\\n--chain-name [CHAIN_NAME] \\\n--secret-key [PATH_TO_YOUR_KEY] \\\n--payment-amount 100000000 \\\n--session-name \"counter\" \\\n--session-entry-point \"counter_inc\"\n```\n\n----------------------------------------\n\nTITLE: Installing Linux Prerequisites\nDESCRIPTION: Essential package installations for Linux systems including curl, build tools, and Casper dependencies.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/docs/developers/prerequisites.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nsudo apt install curl\n```\n\nLANGUAGE: bash\nCODE:\n```\nsudo apt install build-essential\n```\n\nLANGUAGE: bash\nCODE:\n```\nsudo apt-get install pkg-config\nsudo apt-get install openssl\nsudo apt-get install libssl-dev\n```\n\nLANGUAGE: bash\nCODE:\n```\nsudo apt install cargo\n```\n\n----------------------------------------\n\nTITLE: Installing Cargo Casper and Casper Client in Rust\nDESCRIPTION: Commands to install Cargo Casper and the Casper client using Rust's package manager, Cargo. Additional steps for installing dependencies on MacOS and Ubuntu are included.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/versioned_docs/version-2.0.0/resources/quick-start.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ncargo install cargo-casper\ncargo install casper-client\n```\n\nLANGUAGE: bash\nCODE:\n```\nbrew install pkg-config\nbrew install openssl\n```\n\nLANGUAGE: bash\nCODE:\n```\nsudo apt-get install pkg-config\nsudo apt-get install openssl\nsudo apt-get install libssl-dev\n```\n\n----------------------------------------\n\nTITLE: Running Genesis Process in Casper Unit Test - Rust\nDESCRIPTION: Performs the genesis process for initializing on-chain state using Casper's test framework. Applies the default genesis configuration, after which contract and session code executions can safely proceed. This is a standard prerequisite in all Casper smart contract and session code test setups.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/docs/developers/writing-onchain-code/testing-session-code.md#2025-04-22_snippet_7\n\nLANGUAGE: rust\nCODE:\n```\n    builder.run_genesis(&*DEFAULT_RUN_GENESIS_REQUEST).commit();\n```\n\n----------------------------------------\n\nTITLE: Querying Deploy Details using Casper Client in Bash\nDESCRIPTION: This Bash snippet uses the 'casper-client' CLI to retrieve the details of a specific deploy by its hash from a specified Casper node endpoint. Prerequisites include having 'casper-client' installed and network access to the target Casper node. Replace '<HOST:PORT>' and the deploy hash as needed; the command outputs the detailed deploy status, including header, payment, session information, and execution results, in JSON format.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/versioned_docs/version-1.5.X/resources/tokens/cep18/full-tutorial.md#2025-04-22_snippet_14\n\nLANGUAGE: bash\nCODE:\n```\ncasper-client get-deploy \\\n--node-address http://<HOST:PORT> \\\nb00E59f8aBA5c7aB9.....\n```\n\n----------------------------------------\n\nTITLE: Return Value Implementation in Casper\nDESCRIPTION: Shows how to return values from a Casper smart contract entry point using the runtime module.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/versioned_docs/version-1.5.X/resources/moving-to-casper.md#2025-04-22_snippet_1\n\nLANGUAGE: rust\nCODE:\n```\nruntime::ret(value);\n```\n\n----------------------------------------\n\nTITLE: Casper Event Schema Definition\nDESCRIPTION: Defines the event schema for CEP-78 NFT contract events including Mint, Transfer, Burn, Approval, and other token-related operations. Each event type specifies the data fields and their types that are recorded in the __events dictionary.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/versioned_docs/version-1.5.X/resources/tokens/cep78/modalities.md#2025-04-22_snippet_9\n\nLANGUAGE: markdown\nCODE:\n```\n| Event name      | Included values and type                                                        |\n| --------------- | ------------------------------------------------------------------------------- |\n| Mint            | `recipient (Key)`, `token_id (String)`, `data (String)`                         |\n| Transfer        | `owner (Key)`, `operator (Option<Key>)`, `recipient (Key)`, `token_id (String)` |\n| Burn            | `owner (Key)`, `token_id (String)`                                              |\n| Approval        | `owner (Key)`, `spender (Key)`, `token_id (String)`                             |\n| ApprovalRevoked | `owner (Key)`, `token_id (String)`                                              |\n| ApprovalForAll  | `owner (Key)`, `operator (Key)`                                                 |\n| RevokedForAll   | `owner (Key)`, `operator (Key)`                                                 |\n| MetadataUpdated | `token_id (String)`, `data (String)`                                            |\n| Migration       | -                                                                               |\n| VariablesSet    | -                                                                               |\n```\n\n----------------------------------------\n\nTITLE: Retrieving Account Hash from Public Key in Casper Network\nDESCRIPTION: This command obtains the account hash given a public key. It's useful when you need the account hash for querying account details.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/versioned_docs/version-1.5.X/developers/cli/querying-global-state.md#2025-04-22_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\ncasper-client account-address --public-key [PATH_TO_PUBLIC_KEY]\n```\n\n----------------------------------------\n\nTITLE: Installing a Casper Contract using Rust Client\nDESCRIPTION: This snippet illustrates installing a Wasm contract using the `casper_client` Rust crate within an async `tokio` runtime. It defines deploy parameters (secret key path, TTL, gas price, chain name), session parameters (path to the Wasm file, runtime arguments), and payment parameters. The `put_deploy` function is called asynchronously to send the deploy to the specified node address, and the deploy response is printed.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/docs/developers/dapps/sdk/client-library-usage.md#2025-04-22_snippet_8\n\nLANGUAGE: rust\nCODE:\n```\nextern crate casper_client;\nasync fn put_deploy(){\n    let maybe_rpc: &str = \"\";\n    let verbosity: u64 = 1;\n    let node_address: &str = \"http://135.181.216.142:7777\";\n    let deploy_params: casper_client::DeployStrParams = casper_client::DeployStrParams{\n        secret_key:\"./sk_testnet.pem\",\n        timestamp:\"\",\n        ttl:\"50s\",\n        gas_price:\"1000000000\",\n        chain_name:\"casper\", // or \"casper-test\"\n        dependencies: Vec::new(),\n        session_account: \"01daad67ebbcb725e02a1955a6617512b311435a21ca6d523085aa015d2d1b473a\"\n\n    };\n    // Without session args:\n    // let session_args: Vec<&str> = Vec::new();\n    // With session args:\n    let mut session_args: Vec<&str> = Vec::new();\n    session_args.push(\"argument:String='hello world'\");\n    let session_params: casper_client::SessionStrParams = casper_client::SessionStrParams::with_path(\"./contract.wasm\", session_args, \"\");\n    let payment_params: casper_client::PaymentStrParams = casper_client::PaymentStrParams::with_amount(\"10000000000\");\n    let result = casper_client::put_deploy(maybe_rpc_id, node_address, verbosity_level, deploy_params, session_params, payment_params).await.unwrap();\n    println!(\"Deploy response: {:?}\", result);\n}\n\n#[tokio::main]\nasync fn main(){\n    send_transfer().await;\n}\n```\n\n----------------------------------------\n\nTITLE: Retrieving Purse Balance via Casper RPC (Bash/JSON)\nDESCRIPTION: Shows an example JSON response for the `query_balance` RPC method. The result object contains the `api_version` and the requested purse `balance`, represented in motes (the smallest unit of CSPR) as a large integer string.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/versioned_docs/version-1.5.X/developers/json-rpc/json-rpc-informational.md#2025-04-22_snippet_13\n\nLANGUAGE: bash\nCODE:\n```\n{\n  \"jsonrpc\": \"2.0\",\n  \"id\": -6143675785141640608,\n  \"result\": {\n    \"api_version\": \"1.0.0\",\n    \"balance\": \"1000000000000000000000000000000000\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Successful Deploy Response\nDESCRIPTION: Example of a successful response from the send-deploy command showing the deploy hash and API version.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/versioned_docs/version-2.0.0/developers/cli/transfers/multisig-deploy-transfer.md#2025-04-22_snippet_5\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"jsonrpc\": \"2.0\",\n  \"id\": -818883417884028030,\n  \"result\": {\n    \"api_version\": \"1.5.3\",\n    \"deploy_hash\": \"88c49fa9108485397a330f294914a6c2d614c581fbe0a31de1a954baad6d709b\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Getting Latest State Root Hash using Casper Client (Bash)\nDESCRIPTION: Retrieves the most recent state root hash from a specified node using `casper-client get-state-root-hash`. This hash represents a snapshot of the blockchain's global state and is needed for subsequent state queries.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/docs/resources/quick-start.md#2025-04-22_snippet_13\n\nLANGUAGE: bash\nCODE:\n```\ncasper-client get-state-root-hash --node-address [NODE_ADDRESS]\n```\n\n----------------------------------------\n\nTITLE: Defining an Increment Entry Point for a Casper Counter Contract in Rust\nDESCRIPTION: This snippet defines a public entry point function named `counter_inc` for the smart contract. The `#[no_mangle]` attribute prevents name mangling, and `extern \"C\"` specifies the C ABI, both crucial for Wasm interoperability. The function retrieves the URef associated with the `COUNT_KEY` constant from the contract's context using `runtime::get_key`, handles potential errors (missing key or wrong type) by reverting execution using `unwrap_or_revert_with`, and then uses `storage::add` to atomically increment the integer value stored at that URef by 1.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/docs/developers/writing-onchain-code/simple-contract.md#2025-04-22_snippet_10\n\nLANGUAGE: rust\nCODE:\n```\n#[no_mangle]\npub extern \"C\" fn counter_inc() {\n    let uref: URef = runtime::get_key(COUNT_KEY)\n        .unwrap_or_revert_with(ApiError::MissingKey)\n        .into_uref()\n        .unwrap_or_revert_with(ApiError::UnexpectedKeyVariant);\n    storage::add(uref, 1); // Increment the count by 1.\n}\n```\n\n----------------------------------------\n\nTITLE: Automatically Generating Casper Project Structure (Bash)\nDESCRIPTION: Demonstrates using the `cargo casper` command to automatically scaffold a new Casper smart contract project named 'my-project'. This is the recommended method as it creates the necessary directory structure, an example contract (`contract/src/main.rs`), example tests (`tests/src/integration-tests.rs`), a `Makefile`, and a `rust-toolchain` file.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/docs/developers/writing-onchain-code/simple-contract.md#2025-04-22_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ncargo casper my-project\n```\n\n----------------------------------------\n\nTITLE: Example: Calling Casper Contract using Session Wasm File with Casper Client CLI\nDESCRIPTION: This specific example demonstrates using `casper-client put-deploy` to execute session code compiled into `counter-call.wasm`. This session code is intended to interact with a previously deployed contract (e.g., `counter-v1.wasm`). It requires the node address, chain name, deployer's secret key, payment amount, and the path to the compiled session Wasm file.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/docs/developers/cli/calling-contracts.md#2025-04-22_snippet_17\n\nLANGUAGE: bash\nCODE:\n```\n\ncasper-client put-deploy \\\n    --node-address http://65.21.235.219:7777 \\\n    --chain-name casper-test \\\n    --secret-key [PATH_TO_YOUR_KEY]/secret_key.pem \\\n    --payment-amount 25000000000 \\\n    --session-path [PATH_TO_YOUR_COMPILED_WASM]/counter-call.wasm\n\n```\n\n----------------------------------------\n\nTITLE: Implementing Counter Factory Installer Function in Rust\nDESCRIPTION: This code snippet demonstrates the installer function for creating a new counter contract. It sets up named keys, defines entry points for increment and decrement operations, and stores the contract hash and version.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/versioned_docs/version-2.0.0/developers/writing-onchain-code/factory-pattern.md#2025-04-22_snippet_3\n\nLANGUAGE: rust\nCODE:\n```\nfn installer(name: String, initial_value: U512) {\n    let named_keys = {\n        let new_uref = storage::new_uref(initial_value);\n        let mut named_keys = NamedKeys::new();\n        named_keys.insert(CURRENT_VALUE_KEY.to_string(), new_uref.into());\n        named_keys\n    };\n\n    let entry_points = {\n        let mut entry_points = EntryPoints::new();\n        let entry_point: EntryPoint = EntryPoint::new(\n            INCREASE_ENTRY_POINT.to_string(),\n            Parameters::new(),\n            CLType::Unit,\n            EntryPointAccess::Public,\n            EntryPointType::Contract,\n        );\n        entry_points.add_entry_point(entry_point);\n        let entry_point: EntryPoint = EntryPoint::new(\n            DECREASE_ENTRY_POINT.to_string(),\n            Parameters::new(),\n            CLType::Unit,\n            EntryPointAccess::Public,\n            EntryPointType::Contract,\n        );\n        entry_points.add_entry_point(entry_point);\n\n        entry_points\n    };\n\n    let (contract_hash, contract_version) = storage::new_contract(\n        entry_points,\n        Some(named_keys),\n        Some(PACKAGE_HASH_KEY_NAME.to_string()),\n        Some(ACCESS_KEY_NAME.to_string()),\n    );\n\n    runtime::put_key(CONTRACT_VERSION, storage::new_uref(contract_version).into());\n    runtime::put_key(&name, contract_hash.into());\n}\n```\n\n----------------------------------------\n\nTITLE: Sample JSON Response from `put-deploy`\nDESCRIPTION: Shows an example JSON response received after successfully submitting a deploy using the `casper-client put-deploy` command. The response includes the API version and, most importantly, the `deploy_hash`, which is necessary to track and verify the deploy's execution and finalization on the blockchain.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/versioned_docs/version-2.0.0/developers/cli/calling-contracts.md#2025-04-22_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"id\": 1197172763279676268,\n  \"jsonrpc\": \"2.0\",\n  \"result\": {\n    \"api_version\": \"1.4.5\",\n    \"deploy_hash\": \"24b58fbc0cbbfa3be978e7b78b9b37fc1d17c887b1abed2b2e2e704f7ee5427c\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Default Counter Factory Entry Point in Rust\nDESCRIPTION: This snippet shows the 'contract_factory_default' entry point, which creates a counter contract with a given name and a zero initial value. It demonstrates how to use a default value when creating a contract.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/versioned_docs/version-2.0.0/developers/writing-onchain-code/factory-pattern.md#2025-04-22_snippet_2\n\nLANGUAGE: rust\nCODE:\n```\n#[no_mangle]\npub extern \"C\" fn contract_factory_default() {\n    let name: String = runtime::get_named_arg(ARG_NAME);\n    installer(name, U512::zero());\n}\n```\n\n----------------------------------------\n\nTITLE: Querying Global State using Casper CLI\nDESCRIPTION: Shows the basic command structure for querying the Casper network's global state using the `casper-client query-global-state` command. It requires specifying the target node's address (`--node-address`), the identifier for the data being queried (e.g., contract hash using `--key`), and a specific block identifier (`--block-identifier`) like a block hash or height.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/docs/developers/writing-onchain-code/emitting-contract-events.md#2025-04-22_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\ncasper-client query-global-state \\\n--node-address <HOST:PORT> \\\n--key [HASH_STRING] \\\n--block-identifier <BLOCK_HASH> \\\n```\n\n----------------------------------------\n\nTITLE: Complete Casper Cross-Contract Caller Implementation in Rust\nDESCRIPTION: This snippet presents the full Rust source code for the second smart contract. It includes necessary imports from `alloc` and Casper crates (`casper_types`, `casper_contract`), defines a constant for the named key holding the target contract hash, and combines the previously shown `call` and `call_contract_2` entry point implementations. The `call` function sets up the contract and its entry points, while `call_contract_2` performs the actual cross-contract call to the `update_msg` function of another contract.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/versioned_docs/version-1.5.X/resources/advanced/cross-contract.md#2025-04-22_snippet_16\n\nLANGUAGE: rust\nCODE:\n```\n#![no_std]\n#![no_main]\n\n#[cfg(not(target_arch = \"wasm32\"))]\ncompile_error!(\"target arch should be wasm32: compile with '--target wasm32-unknown-unknown'\");\n\n// We need to explicitly import the std alloc crate and `alloc::string::String` as we are in a\n// `no_std` environment.\nextern crate alloc;\n\n// The elementary types\nuse alloc::string::String;\nuse alloc::vec::Vec;\nuse crate::alloc::string::ToString;\nuse crate::runtime_args::RuntimeArgs;\n\n// Casper crates\nuse casper_types::{\n    api_error::ApiError,\n    contracts::NamedKeys, runtime_args, CLType, Key, ContractHash, Parameter, EntryPoint, EntryPoints, EntryPointType, EntryPointAccess};\n\nuse casper_contract::{\n    unwrap_or_revert::UnwrapOrRevert,\n    contract_api::{runtime, storage},\n};\n\n// The contract key in the account named keys\nconst CONTRACT_HASH: &str = \"hello_world_contract\";\n\n#[no_mangle]\npub extern \"C\" fn call_contract_2() {\n\n    let contract_hash: ContractHash = runtime::get_named_arg::<Key>(CONTRACT_HASH)\n    .into_hash()\n    .map(|hash| ContractHash::new(hash))\n    .unwrap();\n\n    let new_value: String = runtime::get_named_arg(\"new_message\");\n\n    let _: () = runtime::call_contract(\n        contract_hash,\n        \"update_msg\",\n        runtime_args! {\n            // key    => value\n            \"message\" => new_value,\n        },\n     );\n\n}\n\n#[no_mangle]\npub extern \"C\" fn call() {\n\n    // Create a new vector - this will be the signature of the entrypoint\n    let mut vec = Vec::new();\n    vec.push(Parameter::new(\"new_message\", CLType::String));\n    vec.push(Parameter::new(\"hello_world_contract\", CLType::Key));\n\n    // In the named keys of the contract, add a key for the count.\n    let named_keys = NamedKeys::new();\n\n    // Create an Entry Point Object\n    let mut entry_points = EntryPoints::new();\n\n    // Add the entry point to the entry points object\n    entry_points.add_entry_point(EntryPoint::new(\n       \"call_contract_2\",\n       vec,\n       CLType::Unit,\n       EntryPointAccess::Public,\n       EntryPointType::Contract\n    ));\n\n    // The contract is stored in global state\n    let (stored_contract_hash, _contract_version) = storage::new_contract(\n       entry_points,                                        // entry points\n       Some(named_keys),                                    // named keys\n       Some(\"contract2_package_name\".to_string()),          // package name\n       Some(\"contract2_access_uref\".to_string())            // access uref\n    );\n\n    // To access from the account - named keys of the account\n    runtime::put_key(\"cross_contract_2\", stored_contract_hash.into());\n\n}\n\n```\n\n----------------------------------------\n\nTITLE: Defining Transaction Execution Result Schema - JSON Schema - JSON\nDESCRIPTION: This snippet declares a JSON Schema object describing the structure of a transaction result, with properties such as initiator, error message, gas limits, cost, payment breakdown, transfer records, size estimation, and transaction effects. The schema uses external references (\\\"$ref\\\") for complex types and includes attribute descriptions for clear documentation and validation. Required dependencies include other schema definitions (such as InitiatorAddr, Gas, U512, PaymentInfo, Transfer, and Effects), and the resulting validated input is expected to conform to the constraints and types outlined, with additional properties disallowed. The file is intended for use with tools and systems that utilize JSON Schema validation or generate API documentation.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/condor/jsonrpc-comp/rpc-2.0/schema/ExecutionResultV2.json.md#2025-04-22_snippet_0\n\nLANGUAGE: JSON\nCODE:\n```\n{\n    \"description\": \"The result of executing a single transaction.\",\n    \"type\": \"object\",\n    \"required\": [\n        \"consumed\",\n        \"cost\",\n        \"effects\",\n        \"initiator\",\n        \"limit\",\n        \"payment\",\n        \"size_estimate\",\n        \"transfers\"\n    ],\n    \"properties\": {\n        \"initiator\": {\n            \"description\": \"Who initiated this transaction.\",\n            \"allOf\": [\n                {\n                    \"$ref\": \"#/components/schemas/InitiatorAddr\"\n                }\n            ]\n        },\n        \"error_message\": {\n            \"description\": \"If there is no error message, this execution was processed successfully. If there is an error message, this execution failed to fully process for the stated reason.\",\n            \"type\": [\n                \"string\",\n                \"null\"\n            ]\n        },\n        \"limit\": {\n            \"description\": \"What was the maximum allowed gas limit for this transaction? .\",\n            \"allOf\": [\n                {\n                    \"$ref\": \"#/components/schemas/Gas\"\n                }\n            ]\n        },\n        \"consumed\": {\n            \"description\": \"How much gas was consumed executing this transaction.\",\n            \"allOf\": [\n                {\n                    \"$ref\": \"#/components/schemas/Gas\"\n                }\n            ]\n        },\n        \"cost\": {\n            \"description\": \"How much was paid for this transaction.\",\n            \"allOf\": [\n                {\n                    \"$ref\": \"#/components/schemas/U512\"\n                }\n            ]\n        },\n        \"payment\": {\n            \"description\": \"Breakdown of payments made to cover the cost.\",\n            \"type\": \"array\",\n            \"items\": {\n                \"$ref\": \"#/components/schemas/PaymentInfo\"\n            }\n        },\n        \"transfers\": {\n            \"description\": \"A record of transfers performed while executing this transaction.\",\n            \"type\": \"array\",\n            \"items\": {\n                \"$ref\": \"#/components/schemas/Transfer\"\n            }\n        },\n        \"size_estimate\": {\n            \"description\": \"The size estimate of the transaction\",\n            \"type\": \"integer\",\n            \"format\": \"uint64\",\n            \"minimum\": 0\n        },\n        \"effects\": {\n            \"description\": \"The effects of executing this transaction.\",\n            \"allOf\": [\n                {\n                    \"$ref\": \"#/components/schemas/Effects\"\n                }\n            ]\n        }\n    },\n    \"additionalProperties\": false\n} \n```\n\n----------------------------------------\n\nTITLE: Storing Contract Hash and Version as Named Keys\nDESCRIPTION: This code shows how to store the contract hash and version as named keys in the runtime context, making them accessible for future operations and interactions with the contract.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/docs/developers/writing-onchain-code/simple-contract.md#2025-04-22_snippet_14\n\nLANGUAGE: rust\nCODE:\n```\n    // Store the contract version in the context's named keys.\n    let version_uref = storage::new_uref(contract_version);\n    runtime::put_key(CONTRACT_VERSION_KEY, version_uref.into());\n\n    // Create a named key for the contract hash.\n    runtime::put_key(CONTRACT_KEY, stored_contract_hash.into());\n```\n\n----------------------------------------\n\nTITLE: Installing CEP-78 NFT Contract using Casper Client\nDESCRIPTION: Example deploy command for installing a CEP-78 NFT contract on the Casper test network with specific configuration parameters. The command includes essential arguments like collection name, symbol, supply limit, and various modality settings.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/versioned_docs/version-2.0.0/resources/tokens/cep78/introduction.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ncasper-client put-deploy -n http://65.108.0.148:7777/rpc --chain-name \"casper-test\" --payment-amount 500000000000 -k keys/secret_key.pem --session-path contract/target/wasm32-unknown-unknown/release/contract.wasm \\\n--session-arg \"collection_name:string='enhanced-nft-1'\" \\\n--session-arg \"collection_symbol:string='ENFT-1'\" \\\n--session-arg \"total_token_supply:u64='10'\" \\\n--session-arg \"ownership_mode:u8='0'\" \\\n--session-arg \"nft_kind:u8='1'\" \\\n--session-arg \"json_schema:string='nft-schema'\" \\\n--session-arg \"allow_minting:bool='true'\" \\\n--session-arg \"owner_reverse_lookup_mode:u8='0'\" \\\n--session-arg \"nft_metadata_kind:u8='2'\" \\\n--session-arg \"identifier_mode:u8='0'\" \\\n--session-arg \"metadata_mutability:u8='1'\"\n```\n\n----------------------------------------\n\nTITLE: Implementing Counter Factory Entry Point in Rust\nDESCRIPTION: This code defines the 'contract_factory' entry point for creating a counter contract with a given name and initial value. It demonstrates how to retrieve named arguments and call the installer function.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/versioned_docs/version-2.0.0/developers/writing-onchain-code/factory-pattern.md#2025-04-22_snippet_1\n\nLANGUAGE: rust\nCODE:\n```\n#[no_mangle]\npub extern \"C\" fn contract_factory() {\n    let name: String = runtime::get_named_arg(ARG_NAME);\n    let initial_value: U512 = runtime::get_named_arg(ARG_INITIAL_VALUE);\n    installer(name, initial_value);\n}\n```\n\n----------------------------------------\n\nTITLE: Invoking a Contract Entry Point with Multiple Authorization Keys in Rust\nDESCRIPTION: This Rust snippet builds and executes a deploy to invoke the `ENTRYPOINT` of a stored contract. The call is made under the context of `account_addr_1` but requires authorization from both `account_addr_1` and `DEFAULT_ACCOUNT_ADDR` to meet the deploy threshold. It sets the payment, specifies both authorization keys, the target address (`account_addr_1`), and the stored contract hash/entry point. The test builder executes the request and expects success.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/versioned_docs/version-2.0.0/resources/advanced/list-auth-keys-tutorial.md#2025-04-22_snippet_12\n\nLANGUAGE: rust\nCODE:\n```\nlet entry_point_deploy_item = DeployItemBuilder::new()\n    .with_empty_payment_bytes(runtime_args! {ARG_AMOUNT => *DEFAULT_PAYMENT})\n    .with_authorization_keys(&[account_addr_1, *DEFAULT_ACCOUNT_ADDR])\n    .with_address(account_addr_1)\n    .with_stored_session_hash(contract_hash, ENTRYPOINT, runtime_args! {})\n    .build();\n\nlet entry_point_request =\n    ExecuteRequestBuilder::from_deploy_item(entry_point_deploy_item).build();\n\nbuilder.exec(entry_point_request).expect_success().commit();\n```\n\n----------------------------------------\n\nTITLE: Burning a Casper NFT using casper-client in Bash\nDESCRIPTION: This command demonstrates burning (permanently destroying) a CEP-78 NFT using the `casper-client put-deploy` command. It specifies the network node, chain name, payment amount, and the secret key of the account initiating the burn. Instead of a session Wasm path, it targets the NFT contract directly using `--session-hash`, specifies the `burn` function via `--session-entry-point`, and provides the `token_id` of the NFT to be burned as a session argument.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/versioned_docs/version-2.0.0/resources/tokens/cep78/using-casper-client.md#2025-04-22_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\ncasper-client put-deploy -n http://localhost:11101/rpc --chain-name \"casper-net-1\" \\\n--payment-amount 5000000000 \\\n-k ~/casper/casper-node/utils/nctl/assets/net-1/nodes/node-1/keys/secret_key.pem \\\n--session-hash hash-52e78ae3f6c485d036a74f65ebbb8c75fcc7c33fb42eb667fb32aeba72c63fb5 \\\n--session-entry-point \"burn\" \\\n--session-arg \"token_id:u64='1'\"\n```\n\n----------------------------------------\n\nTITLE: Storing Contract Hash and Values using put_key and storage::write in Rust\nDESCRIPTION: This code snippet demonstrates how to store a contract hash in global state using runtime::put_key and how to create, write to, and store a URef using storage functions. It initializes a value with one boolean and then overwrites it with another.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/versioned_docs/version-2.0.0/resources/advanced/storage-workflow.md#2025-04-22_snippet_0\n\nLANGUAGE: rust\nCODE:\n```\n    // Store contract hash under a Named key CONTRACT_HASH\n    runtime::put_key(CONTRACT_HASH, contract_hash.into());\n\n    // Store !MY_STORED_VALUE (false) as init value/type into a new URef\n    let my_value_uref = storage::new_uref(!MY_STORED_VALUE);\n\n    // Store MY_STORED_VALUE (true) under the URef value\n    storage::write(my_value_uref, MY_STORED_VALUE);\n\n    // Store the Uref under a Named key MY_STORED_VALUE_UREF\n    let my_value_key: Key = my_value_uref.into();\n    runtime::put_key(MY_STORED_VALUE_UREF, my_value_key);\n}\n```\n\n----------------------------------------\n\nTITLE: Minimal Session Code Entry Point Imports - Rust\nDESCRIPTION: This snippet initializes a Rust session code file with required attributes and imports. #![no_std] and #![no_main] ensure compilation to no-std-compatible Wasm, while imports bring in Casper's contract API, account utilities, and fundamental type traits. This setup is essential boilerplate for all Casper session modules.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/docs/developers/writing-onchain-code/writing-session-code.md#2025-04-22_snippet_2\n\nLANGUAGE: rust\nCODE:\n```\n#![no_std]\n#![no_main]\n\nuse casper_contract::contract_api::{account, runtime};\nuse casper_contract::unwrap_or_revert::UnwrapOrRevert;\nuse casper_types::account::{AccountHash, ActionType, Weight};\n```\n\n----------------------------------------\n\nTITLE: Delegating Tokens for Staking using JavaScript SDK\nDESCRIPTION: This snippet demonstrates delegating CSPR tokens for staking using the `casper-js-sdk`. It installs the pre-compiled `delegate.wasm` contract (obtained from the `casper-node` repo). The script reads the Wasm, defines runtime arguments specifying the delegation amount (minimum 500 CSPR), the delegator's public key, and the validator's public key. It then creates, signs, and sends the installation deploy, logging the deploy hash.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/docs/developers/dapps/sdk/client-library-usage.md#2025-04-22_snippet_12\n\nLANGUAGE: javascript\nCODE:\n```\nconst { CasperClient, Contracts, RuntimeArgs, CLValueBuilder, CLPublicKey } = require(\"casper-js-sdk\");\nconst fs = require(\"fs\");\n\nconst casperClient = new CasperClient(\"http://NODE_ADDRESS:7777/rpc\")\nconst contract = new Contracts.Contract(casperClient)\n\nconst contractWasm = new Uint8Array(fs.readFileSync(\"./casper-node/target/wasm32-unknown-unknown/release/delegate.wasm\").buffer);\n\nconst runtimeArguments = RuntimeArgs.fromMap({\n    \"amount\": CLValueBuilder.u512(500e9), // Minimum delegation amount: 500 CSPR\n    \"delegator\": keypair.publicKey,\n    \"validator\": CLPublicKey.fromHex(\"01e8c84f4fbb58d37991ef373c08043a45c44cd7f499453fa2bd3e141cc0113b3c\")\n});\n\nconst deploy = contract.install(\n    contractWasm,\n    runtimeArguments,\n    \"5000000000\", // Gas payment (5 CSPR)\n    keypair.publicKey,\n    \"casper\", // or \"casper-test\" for testnet\n    [keypair]\n);\n\n(async () => {\n    console.log(await casperClient.putDeploy(deploy));\n})();    \n```\n\n----------------------------------------\n\nTITLE: Example Casper Auction Info JSON Response (Bash/JSON)\nDESCRIPTION: Provides an example JSON output structure returned by the `casper-client get-auction-info` command. This structure includes details about current bids (public key, staked amount, delegation rate), the current block height, and the validator sets (`era_validators`) for upcoming eras, including validator public keys and their associated weights. This data is crucial for verifying if a bid has won a slot.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/versioned_docs/version-1.5.X/operators/becoming-a-validator/bonding.md#2025-04-22_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\n{\n\"jsonrpc\": \"2.0\",\n\"result\": {\n \"bids\": [\n   {\n     \"bid\": {\n       \"bonding_purse\": \"uref-488a0bbc3c3729f5696965da7a3aeee83805392944e36157909da273255fdb85-007\",\n       \"delegation_rate\": 0,\n       \"delegators\": [],\n       \"release_era\": null,\n       \"reward\": \"93328432442428418861229954179737\",\n       \"staked_amount\": \"10000000000000000\"\n     },\n     \"public_key\": \"013f774a58f4d40bd9b6cce7e306e53646913860ef2a111d00f0fe7794010c4012\"\n   },\n   {\n     \"bid\": {\n       \"bonding_purse\": \"uref-14e128b099b0c3680100520226e6999b322989586cc22db0630db5ec1329f0a7-007\",\n       \"delegation_rate\": 10,\n       \"delegators\": [],\n       \"release_era\": null,\n       \"reward\": \"0\",\n       \"staked_amount\": \"9000000000000000\"\n     },\n     \"public_key\": \"01405133e73ef2946fe3a2d76a4c75d305a04ad6b969f3c4a8a0d27235eb260f87\"\n   },\n   {\n     \"bid\": {\n       \"bonding_purse\": \"uref-6c0bf8cee1c0749dd9766376910867a84b2e826eaf6c118fcb0224c7d8d229dd-007\",\n       \"delegation_rate\": 10,\n       \"delegators\": [],\n       \"release_era\": null,\n       \"reward\": \"266185120443441810685787\",\n       \"staked_amount\": \"100000000\"\n     },\n     \"public_key\": \"01524a5f3567d7b5ea17ca518c9d0320fb4a75a28a5eab58d06c755c388f20a19f\"\n   },\n   {\n     \"bid\": {\n       \"bonding_purse\": \"uref-3880b3daf95f962f57e6a4b1589564abf7deef58a1fb0753d1108316bba7b3d7-007\",\n       \"delegation_rate\": 10,\n       \"delegators\": [],\n       \"release_era\": null,\n       \"reward\": \"0\",\n       \"staked_amount\": \"9000000000000000\"\n     },\n     \"public_key\": \"01a6901408eda702a653805f50060bfe00d5e962747ee7133df64bd7bab50b4643\"\n   },\n   {\n     \"bid\": {\n       \"bonding_purse\": \"uref-5a777c9cd53456b49eecf25dcc13e12ddff4106175a69f8e24a7c9a4c135df0d-007\",\n       \"delegation_rate\": 0,\n       \"delegators\": [],\n       \"release_era\": null,\n       \"reward\": \"93328432442428418861229954179737\",\n       \"staked_amount\": \"10000000000000000\"\n     },\n     \"public_key\": \"01d62fc9b894218bfbe8eebcc4a28a1fc4cb3a5c6120bb0027207ba8214439929e\"\n   }\n ],\n \"block_height\": 318,\n \"era_validators\": [\n   {\n     \"era_id\": 20,\n     \"validator_weights\": [\n       {\n         \"public_key\": \"013f774a58f4d40bd9b6cce7e306e53646913860ef2a111d00f0fe7794010c4012\",\n         \"weight\": \"10000000000000000\"\n       },\n       {\n         \"public_key\": \"01405133e73ef2946fe3a2d76a4c75d305a04ad6b969f3c4a8a0d27235eb260f87\",\n         \"weight\": \"9000000000000000\"\n       },\n       {\n         \"public_key\": \"01524a5f3567d7b5ea17ca518c9d0320fb4a75a28a5eab58d06c755c388f20a19f\",\n         \"weight\": \"100000000\"\n       },\n       {\n         \"public_key\": \"01a6901408eda702a653805f50060bfe00d5e962747ee7133df64bd7bab50b4643\",\n         \"weight\": \"9000000000000000\"\n       },\n       {\n         \"public_key\": \"01d62fc9b894218bfbe8eebcc4a28a1fc4cb3a5c6120bb0027207ba8214439929e\",\n         \"weight\": \"10000000000000000\"\n       }\n     ]\n   },\n   {\n     \"era_id\": 21,\n     \"validator_weights\": [\n       {\n         \"public_key\": \"013f774a58f4d40bd9b6cce7e306e53646913860ef2a111d00f0fe7794010c4012\",\n         \"weight\": \"10000000000000000\"\n       },\n       {\n         \"public_key\": \"01405133e73ef2946fe3a2d76a4c75d305a04ad6b969f3c4a8a0d27235eb260f87\",\n         \"weight\": \"9000000000000000\"\n       },\n       {\n         \"public_key\": \"01524a5f3567d7b5ea17ca518c9d0320fb4a75a28a5eab58d06c755c388f20a19f\",\n         \"weight\": \"100000000\"\n       },\n       {\n         \"public_key\": \"01a6901408eda702a653805f50060bfe00d5e962747ee7133df64bd7bab50b4643\",\n         \"weight\": \"9000000000000000\"\n       },\n       {\n         \"public_key\": \"01d62fc9b894218bfbe8eebcc4a28a1fc4cb3a5c6120bb0027207ba8214439929e\",\n         \"weight\": \"10000000000000000\"\n       }\n     ]\n   },\n   {\n     \"era_id\": 22,\n     \"validator_weights\": [\n       {\n         \"public_key\": \"013f774a58f4d40bd9b6cce7e306e53646913860ef2a111d00f0fe7794010c4012\",\n         \"weight\": \"10000000000000000\"\n       },\n       {\n         \"public_key\": \"01405133e73ef2946fe3a2d76a4c75d305a04ad6b969f3c4a8a0d27235eb260f87\",\n         \"weight\": \"9000000000000000\"\n       },\n       {\n         \"public_key\": \"01524a5f3567d7b5ea17ca518c9d0320fb4a75a28a5eab58d06c755c388f20a19f\",\n         \"weight\": \"100000000\"\n       },\n       {\n         \"public_key\": \"01a6901408eda702a653805f50060bfe00d5e962747ee7133df64bd7bab50b4643\",\n         \"weight\": \"9000000000000000\"\n       },\n       {\n         \"public_key\": \"01d62fc9b894218bfbe8eebcc4a28a1fc4cb3a5c6120bb0027207ba8214439929e\",\n         \"weight\": \"10000000000000000\"\n       }\n     ]\n   },\n   {\n     \"era_id\": 23,\n     \"validator_weights\": [\n       {\n         \"public_key\": \"013f774a58f4d40bd9b6cce7e306e53646913860ef2a111d00f0fe7794010c4012\",\n         \"weight\": \"10000000000000000\"\n       },\n       {\n         \"public_key\": \"01405133e73ef2946fe3a2d76a4c75d305a04ad6b969f3c4a8a0d27235eb260f87\",\n         \"weight\": \"9000000000000000\"\n       },\n       {\n         \"public_key\": \"01524a5f3567d7b5ea17ca518c9d0320fb4a75a28a5eab58d06c755c388f20a19f\",\n         \"weight\": \"100000000\"\n       },\n       {\n         \"public_key\": \"01a6901408eda702a653805f50060bfe00d5e962747ee7133df64bd7bab50b4643\",\n         \"weight\": \"9000000000000000\"\n       },\n       {\n         \"public_key\": \"01d62fc9b894218bfbe8eebcc4a28a1fc4cb3a5c6120bb0027207ba8214439929e\",\n         \"weight\": \"10000000000000000\"\n       }\n     ]\n   }\n ],\n \"state_root_hash\": \"c16ba80ea200d786008f8100ea79f9cfeb8d7d5ee8b133eda5a50dcf1c7131e8\"\n},\n\"id\": -3624528661787095850\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a Test Function for Casper Session Code in Rust\nDESCRIPTION: This snippet demonstrates how to create a test function for Casper session code in Rust. It includes initializing the execution engine, running genesis, and executing test-specific logic.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/versioned_docs/version-2.0.0/developers/writing-onchain-code/testing-session-code.md#2025-04-22_snippet_4\n\nLANGUAGE: rust\nCODE:\n```\n#[test]\nfn <unit-test-name>{\n   let mut builder = InMemoryWasmTestBuilder::default();\n   builder.run_genesis(&*DEFAULT_RUN_GENESIS_REQUEST).commit();\n   // Test function implementation\n}\n```\n\n----------------------------------------\n\nTITLE: Testing Contract Transfer Failure using Casper Engine Test Support in Rust\nDESCRIPTION: This Rust test snippet demonstrates how to verify transfer operations fail when the sender has insufficient balance in a Casper CEP-18 token contract. It uses the Casper engine test support library and expects a panic indicating user error code 65534. The fixture initializes the contract, checks balances, and deliberately attempts to exceed the balance, triggering the assert. Dependencies include casper-engine-test-support for testing and crate definitions for token contract logic.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/docs/resources/tokens/cep18/tests.md#2025-04-22_snippet_0\n\nLANGUAGE: rust\nCODE:\n```\n#[should_panic(expected = \"ApiError::User(65534) [131070]\")]\n#[test]\nfn should_not_transfer_with_insufficient_balance() {\n    let mut fixture = TestFixture::install_contract();\n\n    let initial_ali_balance = fixture.balance_of(Key::from(fixture.ali)).unwrap();\n    assert_eq!(fixture.balance_of(Key::from(fixture.bob)), None);\n\n    fixture.transfer(\n        Key::from(fixture.bob),\n        initial_ali_balance + U256::one(),\n        fixture.ali,\n    );\n}\n\n```\n\n----------------------------------------\n\nTITLE: Verifying Transaction with get-txn Command\nDESCRIPTION: Command to verify a transaction's details using the get-txn command with node address and transaction hash parameters.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/docs/developers/cli/sending-transactions.md#2025-04-22_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\ncasper-client get-txn \\\n    --node-address <HOST:PORT> <TRANSACTION-HASH>\n```\n\n----------------------------------------\n\nTITLE: Defining call_contract_2 Entry Point for Cross-Contract Invocation\nDESCRIPTION: This Rust code snippet defines the `call_contract_2` entry point for a Casper blockchain contract, which retrieves a contract hash from named arguments, gets a message string, and calls the `update_msg` entry point on another contract. It requires parameters like the contract hash and a new message, and is dependent on Casper's runtime and storage APIs.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/versioned_docs/version-2.0.0/resources/advanced/cross-contract.md#2025-04-22_snippet_14\n\nLANGUAGE: Rust\nCODE:\n```\n#[no_mangle]\npub extern \"C\" fn call_contract_2() {\n\n    // Get the contract hash from the named arguments passed to the `call_contract_2` entry point.\n    let contract_hash: ContractHash = runtime::get_named_arg::<Key>(CONTRACT_HASH)\n    .into_hash()\n    .map(|hash| ContractHash::new(hash))\n    .unwrap();\n\n    // Get the value of the message from the second parameter  \n    let new_value: String = runtime::get_named_arg(\"new_message\");\n\n    // Call the update_msg entry point on the other contract with the parameter values\n    let _: () = runtime::call_contract(\n        contract_hash, \n        \"update_msg\", \n        runtime_args! {\n            \"message\" => new_value,\n        },\n    );\n\n}\n```\n\n----------------------------------------\n\nTITLE: Sample Account Info Response\nDESCRIPTION: Example output from the get-account-info command showing account details including account hash, action thresholds, associated keys, main purse reference, and named keys.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/docs/concepts/accounts-and-keys.md#2025-04-22_snippet_13\n\nLANGUAGE: bash\nCODE:\n```\ncasper-client get-account-info --node-address http://65.21.75.254:7777  --public-key 0202ceafc0aa35f5a7bdda22f65c046b9b30b858459e18d3670f035839ad887fe5db\n{\n  \"id\": -2018234245556346849,\n  \"jsonrpc\": \"2.0\",\n  \"result\": {\n    \"account\": {\n      \"account_hash\": \"account-hash-0ea7998b2822afe5b62b08a21d54c941ad791279b089f3f7ede0d72b477eca34\",\n      \"action_thresholds\": {\n        \"deployment\": 1,\n        \"key_management\": 1\n      },\n      \"associated_keys\": [\n        {\n          \"account_hash\": \"account-hash-0ea7998b2822afe5b62b08a21d54c941ad791279b089f3f7ede0d72b477eca34\",\n          \"weight\": 1\n        }\n      ],\n      \"main_purse\": \"uref-974019c976b5f26412ce486158d2431967af35d91387dae8cbcd43c20fce6452-007\",\n      \"named_keys\": []\n    },\n    \"api_version\": \"1.4.15\",\n    \"merkle_proof\": \"[29712 hex chars]\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Deploy Header JSON Schema Definition\nDESCRIPTION: Defines the schema for a Deploy header including required fields like account, body hash, chain name, dependencies, gas price, timestamp and TTL. Contains property definitions with types and references to other schema components like PublicKey, Timestamp, and Digest.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/condor/jsonrpc-comp/rpc-1.5/schema/DeployHeader.json.md#2025-04-22_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"description\": \"The header portion of a [`Deploy`].\",\n    \"type\": \"object\",\n    \"required\": [\n        \"account\",\n        \"body_hash\",\n        \"chain_name\",\n        \"dependencies\",\n        \"gas_price\",\n        \"timestamp\",\n        \"ttl\"\n    ],\n    \"properties\": {\n        \"account\": {\n            \"$ref\": \"#/components/schemas/PublicKey\"\n        },\n        \"timestamp\": {\n            \"$ref\": \"#/components/schemas/Timestamp\"\n        },\n        \"ttl\": {\n            \"$ref\": \"#/components/schemas/TimeDiff\"\n        },\n        \"gas_price\": {\n            \"type\": \"integer\",\n            \"format\": \"uint64\",\n            \"minimum\": 0\n        },\n        \"body_hash\": {\n            \"$ref\": \"#/components/schemas/Digest\"\n        },\n        \"dependencies\": {\n            \"type\": \"array\",\n            \"items\": {\n                \"$ref\": \"#/components/schemas/DeployHash\"\n            }\n        },\n        \"chain_name\": {\n            \"type\": \"string\"\n        }\n    },\n    \"additionalProperties\": false\n}\n```\n\n----------------------------------------\n\nTITLE: Defining a Contract Entry Point with Return Value in Rust\nDESCRIPTION: This Rust code defines a contract entry point named `donate`. It retrieves the donating account key (`DONATING_ACCOUNT_KEY`) from runtime arguments, validates it, updates a ledger record, retrieves the URef of the fundraising purse (`FUNDRAISING_PURSE`), wraps it in a `CLValue`, and returns this `CLValue` (containing the purse URef with add-only permission) to the immediate caller using `runtime::ret()`. This allows the caller to interact with the donation purse.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/docs/resources/advanced/return-values-tutorial.md#2025-04-22_snippet_0\n\nLANGUAGE: rust\nCODE:\n```\n```rust\n\n#[no_mangle]\npub extern \"C\" fn donate() {\n    let donating_account_key: Key = runtime::get_named_arg(DONATING_ACCOUNT_KEY);\n    if let Key::Account(donating_account_hash) = donating_account_key {\n        update_ledger_record(donating_account_hash.to_string())\n    } else {\n        runtime::revert(FundRaisingError::InvalidKeyVariant)\n    }\n    let donation_purse = *runtime::get_key(FUNDRAISING_PURSE)\n        .unwrap_or_revert_with(FundRaisingError::MissingFundRaisingPurseURef)\n        .as_uref()\n        .unwrap_or_revert();\n    let value = CLValue::from_t(donation_purse.into_add()).unwrap_or_revert();\n    runtime::ret(value)\n}\n\n```\n```\n\n----------------------------------------\n\nTITLE: Grouping Test Functions with #[cfg(test)] and mod tests - Rust\nDESCRIPTION: Uses Rust's #[cfg(test)] attribute to conditionally include the tests module only during test builds. This is a standard Rust idiom to isolate test code from production builds, ensuring that all test-related items are grouped and compiled only when 'cargo test' is invoked. Place all test functions and necessary scaffolding within this module.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/docs/developers/writing-onchain-code/testing-session-code.md#2025-04-22_snippet_2\n\nLANGUAGE: rust\nCODE:\n```\n#[cfg(test)]\nmod tests {\n    // The entire test program resides here\n}\n```\n\n----------------------------------------\n\nTITLE: Transaction Hash Response\nDESCRIPTION: JSON response showing the transaction hash returned after successful contract installation request.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/docs/developers/cli/installing-contracts.md#2025-04-22_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"jsonrpc\": \"2.0\",\n  \"id\": 90342686534145684,\n  \"result\": {\n    \"api_version\": \"2.0.0\",\n    \"transaction_hash\": {\n      \"Version1\": \"49c36616a50962fa5a7dd7901677ae44667fa9f8c542e49eb2284ba2c900bba2\"\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Calling a Casper Contract using Session Code in a Test\nDESCRIPTION: This snippet demonstrates how to call a Casper contract using session code in a test environment. It uses the ExecuteRequestBuilder to simulate the execution of session code.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/versioned_docs/version-2.0.0/developers/writing-onchain-code/testing-contracts.md#2025-04-22_snippet_6\n\nLANGUAGE: rust\nCODE:\n```\nlet session_code_request = ExecuteRequestBuilder::standard(\n    *DEFAULT_ACCOUNT_ADDR,\n    COUNTER_CALL_WASM,\n    runtime_args! {\n        CONTRACT_KEY => contract_v1_hash\n    },\n)\n.build();\n\nbuilder.exec(session_code_request)\n    .expect_success()\n    .commit();\n```\n\n----------------------------------------\n\nTITLE: Defining Installer Entry Points for Counter Factory in Rust\nDESCRIPTION: This snippet shows how to define two installer entry points for a counter factory contract. These entry points are marked as public and of type Install, allowing them to produce new counter contracts when installed in global state.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/versioned_docs/version-2.0.0/developers/writing-onchain-code/factory-pattern.md#2025-04-22_snippet_0\n\nLANGUAGE: rust\nCODE:\n```\nlet entry_point: EntryPoint = EntryPoint::new(\n    CONTRACT_FACTORY_ENTRY_POINT.to_string(),\n    Parameters::new(),\n    CLType::Unit,\n    EntryPointAccess::Public,\n    EntryPointType::Install,\n);\nentry_points.add_entry_point(entry_point);\nlet entry_point: EntryPoint = EntryPoint::new(\n    CONTRACT_FACTORY_DEFAULT_ENTRY_POINT.to_string(),\n    Parameters::new(),\n    CLType::Unit,\n    EntryPointAccess::Public,\n    EntryPointType::Install,\n);\n```\n\n----------------------------------------\n\nTITLE: Emitting Messages with Runtime Function in Rust\nDESCRIPTION: This Rust snippet shows how to emit a message to a specific topic using the `emit_message` runtime function. The function takes the name of the topic, `EVENTS_TOPIC`, and a message that is converted and checked using the `try_into` and `unwrap` methods. Any failure in message emission will trigger a revert, thanks to `unwrap_or_revert`. This operation involves converting and safely handling a message in Rust before dispatching it to the network.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/versioned_docs/version-2.0.0/developers/writing-onchain-code/emitting-contract-events.md#2025-04-22_snippet_8\n\nLANGUAGE: rust\nCODE:\n```\nruntime::emit_message(EVENTS_TOPIC, &message.try_into().unwrap()).unwrap_or_revert();\n\n```\n\n----------------------------------------\n\nTITLE: Template for Deploying the CEP-18 Contract\nDESCRIPTION: Generic template for deploying a CEP-18 contract to a Casper network using the casper-client CLI tool, showing all required parameters.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/versioned_docs/version-2.0.0/resources/beginner/cep18.md#2025-04-22_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\ncasper-client put-deploy \\\n    --node-address http://<HOST:PORT> \\\n    --chain-name [NETWORK_NAME]] \\\n    --secret-key [PATH_TO_YOUR_KEY]/secret_key.pem \\\n    --payment-amount [AMOUNT] \\\n    --session-path [WASM_FILE_PATH]/[File_Name].wasm\n    --session-arg <\"NAME:TYPE='VALUE'\" OR \"NAME:TYPE=null\">\n```\n\n----------------------------------------\n\nTITLE: Creating Named Keys in Casper Contract\nDESCRIPTION: Implementation of named keys for storing contract data. Shows how to create and insert a named key for tracking the counter value in the contract's state.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/versioned_docs/version-1.5.X/developers/writing-onchain-code/simple-contract.md#2025-04-22_snippet_12\n\nLANGUAGE: rust\nCODE:\n```\n    // In the named keys of the counter contract, add a key for the count.\n    let mut counter_named_keys = NamedKeys::new();\n    let key_name = String::from(COUNT_KEY);\n    counter_named_keys.insert(key_name, count_start.into());\n```\n\n----------------------------------------\n\nTITLE: Checking Casper Deploy Status\nDESCRIPTION: Command to check the status of a deploy on the Casper network using the deploy hash.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/versioned_docs/version-2.0.0/resources/quick-start.md#2025-04-22_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\ncasper-client get-deploy --node-address [NODE_ADDRESS] [DEPLOY_HASH]\n```\n\n----------------------------------------\n\nTITLE: Defining Casper BlockV1 Schema - JSON Schema - JSON\nDESCRIPTION: This snippet defines a JSON Schema object for a finalized Casper network block with explicit required fields and referenced components. Dependencies include #/components/schemas/BlockHash, BlockHeaderV1, and BlockBodyV1 being defined elsewhere in the OpenAPI or JSON Schema document. Inputs are block objects to be validated, and outputs are validation results; all properties ('hash', 'header', 'body') must be present per the 'required' array. It is constrained to Version 1, as indicated in the description, and must align with the Casper blockchain standards.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/condor/jsonrpc-comp/rpc-2.0/schema/BlockV1.json.md#2025-04-22_snippet_0\n\nLANGUAGE: JSON\nCODE:\n```\n{\n    \"description\": \"A block after execution, with the resulting global state root hash. This is the core component of the Casper linear blockchain. Version 1.\",\n    \"type\": \"object\",\n    \"required\": [\n        \"body\",\n        \"hash\",\n        \"header\"\n    ],\n    \"properties\": {\n        \"hash\": {\n            \"description\": \"The block hash identifying this block.\",\n            \"allOf\": [\n                {\n                    \"$ref\": \"#/components/schemas/BlockHash\"\n                }\n            ]\n        },\n        \"header\": {\n            \"description\": \"The header portion of the block.\",\n            \"allOf\": [\n                {\n                    \"$ref\": \"#/components/schemas/BlockHeaderV1\"\n                }\n            ]\n        },\n        \"body\": {\n            \"description\": \"The body portion of the block.\",\n            \"allOf\": [\n                {\n                    \"$ref\": \"#/components/schemas/BlockBodyV1\"\n                }\n            ]\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Contract Package Creation Example\nDESCRIPTION: Example showing how to create a new contract with a package name that can be referenced later. Uses the new_contract function to store the contract with specific entry points and named keys.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/versioned_docs/version-2.0.0/developers/cli/calling-contracts.md#2025-04-22_snippet_14\n\nLANGUAGE: rust\nCODE:\n```\n    let (stored_contract_hash, contract_version) =\n        storage::new_contract(counter_entry_points, \n            Some(counter_named_keys), \n            Some(\"counter_package_name\".to_string()),\n            Some(\"counter_access_uref\".to_string())\n    );\n```\n\n----------------------------------------\n\nTITLE: Creating Message Topic in Casper Smart Contract\nDESCRIPTION: Code snippet demonstrating how to create a new message topic using the manage_message_topic runtime function. This allows the contract to emit messages under the specified topic EVENTS_TOPIC.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/docs/developers/writing-onchain-code/emitting-contract-events.md#2025-04-22_snippet_0\n\nLANGUAGE: rust\nCODE:\n```\nruntime::manage_message_topic(EVENTS_TOPIC, MessageTopicOperation::Add).unwrap_or_revert();\n```\n\n----------------------------------------\n\nTITLE: Dictionary Identifier Schema Definition\nDESCRIPTION: JSON Schema defining the structure for dictionary item lookups through various methods including Account Named Keys, Contract Named Keys, Entity Named Keys, URef, and Dictionary lookups.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/condor/jsonrpc-comp/rpc-2.0/schema/components.json.md#2025-04-22_snippet_60\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"DictionaryIdentifier\": {\n    \"description\": \"Options for dictionary item lookups.\",\n    \"oneOf\": [\n      {\n        \"description\": \"Lookup a dictionary item via an Account's named keys.\",\n        \"type\": \"object\",\n        \"required\": [\"AccountNamedKey\"],\n        \"properties\": {\n          \"AccountNamedKey\": {\n            \"type\": \"object\",\n            \"required\": [\"dictionary_item_key\", \"dictionary_name\", \"key\"],\n            \"properties\": {\n              \"key\": {\n                \"description\": \"The account key as a formatted string whose named keys contains dictionary_name.\",\n                \"type\": \"string\"\n              },\n              \"dictionary_name\": {\n                \"description\": \"The named key under which the dictionary seed URef is stored.\",\n                \"type\": \"string\"\n              },\n              \"dictionary_item_key\": {\n                \"description\": \"The dictionary item key formatted as a string.\",\n                \"type\": \"string\"\n              }\n            }\n          }\n        },\n        \"additionalProperties\": false\n      }\n    ]\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Querying Casper Network Deploy Details\nDESCRIPTION: Retrieve specific deploy details from the Casper network using the deploy hash.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/versioned_docs/version-1.5.X/resources/beginner/counter-testnet/walkthrough.md#2025-04-22_snippet_9\n\nLANGUAGE: bash\nCODE:\n```\ncasper-client query-global-state --node-address http://[NODE_IP]:7777 \\\n    --state-root-hash [STATE_ROOT_HASH] --key deploy-[DEPLOY_HASH]\n```\n\n----------------------------------------\n\nTITLE: Querying Account Balance in Casper Network\nDESCRIPTION: This command queries the balance of an account. It requires the state root hash and a purse identifier, which can be a public key, account hash, or purse URef.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/versioned_docs/version-1.5.X/resources/beginner/querying-network.md#2025-04-22_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\ncasper-client query-balance \\\n--id 6 \\\n--node-address http://<node-ip-address>:7777 \\\n--state-root-hash <state-root-hash> \\\n--purse-identifier <account>\n```\n\n----------------------------------------\n\nTITLE: Transfer from Purse to Purse using Session Code (Rust)\nDESCRIPTION: Demonstrates the use of system::transfer_from_purse_to_purse to move funds between purses in Casper. It retrieves runtime arguments, fetches the source purse, and attempts the transfer, reverting on failure. Inputs: named arguments ARG_TARGET_PURSE and ARG_AMOUNT. Outputs: transfer execution, no explicit return. Dependencies: casper-contract and casper-types, proper purse URef and amount handling. Reverts if transfer fails.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/versioned_docs/version-1.5.X/developers/writing-onchain-code/writing-session-code.md#2025-04-22_snippet_5\n\nLANGUAGE: rust\nCODE:\n```\n#[no_mangle]\npub extern \"C\" fn call() {\n    let target_purse: URef = runtime::get_named_arg(ARG_TARGET_PURSE);\n    let amount: U512 = runtime::get_named_arg(ARG_AMOUNT);\n\n    let source_purse = account::get_main_purse();\n\n    system::transfer_from_purse_to_purse(source_purse, target_purse, amount, None)\n        .unwrap_or_revert();\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Up and Starting Local Casper Network Using NCTL - Bash\nDESCRIPTION: These commands initialize a Casper local test network using NCTL, allocating assets and starting the nodes. Dependencies include NCTL and Docker if running in a containerized setup. The output is a fully operational multi-node Casper testnet on the user's machine, which is a prerequisite for deploying smart contracts.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/docs/resources/beginner/counter/walkthrough.md#2025-04-22_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nnctl-assets-setup && nctl-start\n```\n\n----------------------------------------\n\nTITLE: Returning a Value from Contract Code in Casper Network\nDESCRIPTION: A Rust example showing how to return a value from a contract entry point using runtime.ret(). This donation contract returns a purse URef with add permissions to the caller, allowing them to transfer funds into the donation purse.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/versioned_docs/version-2.0.0/resources/advanced/return-values-tutorial.md#2025-04-22_snippet_0\n\nLANGUAGE: rust\nCODE:\n```\n#[no_mangle]\npub extern \"C\" fn donate() {\n    let donating_account_key: Key = runtime::get_named_arg(DONATING_ACCOUNT_KEY);\n    if let Key::Account(donating_account_hash) = donating_account_key {\n        update_ledger_record(donating_account_hash.to_string())\n    } else {\n        runtime::revert(FundRaisingError::InvalidKeyVariant)\n    }\n    let donation_purse = *runtime::get_key(FUNDRAISING_PURSE)\n        .unwrap_or_revert_with(FundRaisingError::MissingFundRaisingPurseURef)\n        .as_uref()\n        .unwrap_or_revert();\n    let value = CLValue::from_t(donation_purse.into_add()).unwrap_or_revert();\n    runtime::ret(value)\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Package Structure\nDESCRIPTION: Defines the `Package` structure, which acts as an entity, metadata, and security container. It includes fields for an `access_key` (URef), `versions` (array of entity versions), `disabled_versions` (list of disabled version keys), `groups`, and `lock_status`. Serialization details for the overall structure are not provided, but fields reference other defined types.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/versioned_docs/version-2.0.0/concepts/serialization/types.md#2025-04-22_snippet_35\n\nLANGUAGE: text\nCODE:\n```\nA structure defining an entity, metadata and security container. The structure consists of the following fields:\n\n- [`access_key`](./primitives.md#clvalue-uref)\n\n- `versions`: An array of entity versions associated with given hashes.\n\n- [`disabled_versions`](#entityversionkey)\n\n- [`groups`](#group)\n\n- [`lock_status`](./structures.md#contractpackagestatus)\n```\n\n----------------------------------------\n\nTITLE: Implementing the Contract Installer Logic in Rust\nDESCRIPTION: The `installer` function in Rust contains the core logic for creating a new counter contract instance within the Casper factory pattern. It takes a `name` and `initial_value` as input. It creates named keys, including a URef holding the `initial_value`, and defines the contract's entry points (`INCREASE_ENTRY_POINT`, `DECREASE_ENTRY_POINT`) marked as `EntryPointType::Contract`. Finally, it uses `storage::new_contract` to instantiate the new contract, storing its hash and version.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/docs/developers/writing-onchain-code/factory-pattern.md#2025-04-22_snippet_4\n\nLANGUAGE: rust\nCODE:\n```\nfn installer(name: String, initial_value: U512) {\n    let named_keys = {\n        let new_uref = storage::new_uref(initial_value);\n        let mut named_keys = NamedKeys::new();\n        named_keys.insert(CURRENT_VALUE_KEY.to_string(), new_uref.into());\n        named_keys\n    };\n\n    let entry_points = {\n        let mut entry_points = EntryPoints::new();\n        let entry_point: EntryPoint = EntryPoint::new(\n            INCREASE_ENTRY_POINT.to_string(),\n            Parameters::new(),\n            CLType::Unit,\n            EntryPointAccess::Public,\n            EntryPointType::Contract,\n        );\n        entry_points.add_entry_point(entry_point);\n        let entry_point: EntryPoint = EntryPoint::new(\n            DECREASE_ENTRY_POINT.to_string(),\n            Parameters::new(),\n            CLType::Unit,\n            EntryPointAccess::Public,\n            EntryPointType::Contract,\n        );\n        entry_points.add_entry_point(entry_point);\n\n        entry_points\n    };\n\n    let (contract_hash, contract_version) = storage::new_contract(\n        entry_points,\n        Some(named_keys),\n        Some(PACKAGE_HASH_KEY_NAME.to_string()),\n        Some(ACCESS_KEY_NAME.to_string()),\n    );\n\n    runtime::put_key(CONTRACT_VERSION, storage::new_uref(contract_version).into());\n    runtime::put_key(&name, contract_hash.into());\n}\n\n```\n\n----------------------------------------\n\nTITLE: Installing a Casper Contract using Python SDK\nDESCRIPTION: This snippet shows how to install a Wasm contract on the Casper network using the `pycspr` Python library. It involves setting up a node client, creating deploy parameters, defining the payment amount, and specifying the session details including the Wasm module bytes read from a file and runtime arguments. The deploy is then created, approved with the keypair, sent to the node, and the deploy hash is printed.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/docs/developers/dapps/sdk/client-library-usage.md#2025-04-22_snippet_7\n\nLANGUAGE: python\nCODE:\n```\nimport pycspr\nfrom pycspr.types import ModuleBytes, CL_String\n\nclient = NodeClient(NodeConnection(host = \"NODE_ADDRESS\", port_rpc = 7777))\n\ndeployParams = pycspr.create_deploy_parameters(\n    account = keypair,\n    chain_name = \"casper\" # or \"casper-test\" for Testnet\n)\npayment = pycspr.create_standard_payment(10000000000) # 10 CSPR\nsession = ModuleBytes(\n    module_bytes = pycspr.read_wasm(\"/path/to/contract.wasm\"),\n    args = {\n        \"message\": CL_String(\"Hello world!\"),\n    }\n)\n\ndeploy = pycspr.create_deploy(deployParams, payment, session)\n\ndeploy.approve(keypair)\nclient.send_deploy(deploy)\nprint(deploy.hash.hex())\n```\n\n----------------------------------------\n\nTITLE: Building Casper Contracts (Rust and Make) - Bash\nDESCRIPTION: These commands prepare the Rust environment and compile Casper contracts using the provided Makefile, outputting Wasm binaries such as `delegate.wasm`. This process requires you to have Make and Rust (installed via `setup-rs`) on your machine. The resulting Wasm files are generated under `target/wasm32-unknown-unknown/release/`.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/versioned_docs/version-2.0.0/developers/cli/delegate.md#2025-04-22_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\ncd casper-node\nmake setup-rs\nmake build-contracts-rs\n```\n\n----------------------------------------\n\nTITLE: Retrieving Installed Contract Hash from Account Named Keys in Rust\nDESCRIPTION: This snippet gets the contract's hash from the named keys of the default account after contract installation, performing type conversions and validation. It's essential for subsequent invocation of contract entry points or upgrades via hash. Expects the named key to be present; fails if not found.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/versioned_docs/version-1.5.X/developers/writing-onchain-code/testing-contracts.md#2025-04-22_snippet_7\n\nLANGUAGE: rust\nCODE:\n```\n    // Check the contract hash.\n    let contract_v1_hash = builder\n        .get_expected_account(*DEFAULT_ACCOUNT_ADDR)\n        .named_keys()\n        .get(CONTRACT_KEY)\n        .expect(\"must have contract hash key as part of contract creation\")\n        .into_hash()\n        .map(ContractHash::new)\n        .expect(\"must get contract hash\");\n```\n\n----------------------------------------\n\nTITLE: Casper Contract Entry Point Function - WebAssembly\nDESCRIPTION: The required main entry point function for Casper smart contracts. Must be named 'call', take no arguments and return no values. Can use get_named_arg for accepting arguments and ret function for returning CLValues.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/docs/concepts/serialization/primitives.md#2025-04-22_snippet_1\n\nLANGUAGE: webassembly\nCODE:\n```\ncall() {\n  // Contract logic here\n  // Use get_named_arg to accept arguments\n  // Use ret to return CLValues\n}\n```\n\n----------------------------------------\n\nTITLE: Deploying Session Code via casper-client put-deploy - Bash\nDESCRIPTION: This Bash command sends a deploy containing session code to a Casper node using the casper-client CLI. Key parameters include node address, chain name, submitter secret key, payment amount, session Wasm path, and arguments. Requires the casper-client to be installed. Used for executing session code or contracts on the network, with flexible argument and chain configuration.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/docs/developers/writing-onchain-code/writing-session-code.md#2025-04-22_snippet_10\n\nLANGUAGE: bash\nCODE:\n```\ncasper-client put-deploy \\\n    --node-address <HOST:PORT> \\\n    --chain-name <NETWORK-NAME> \\\n    --secret-key <PATH> \\\n    --payment-amount <PAYMENT-AMOUNT> \\\n    --session-path <SESSION-PATH> \\\n    --session-arg <\"NAME:TYPE='VALUE'\" OR \"NAME:TYPE=null\">\n```\n\n----------------------------------------\n\nTITLE: Installing CEP-18 Test Contract\nDESCRIPTION: Command to deploy the CEP-18 helper contract used for checking balances and accessing approval features.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/versioned_docs/version-2.0.0/resources/tokens/cep18/quickstart-guide.md#2025-04-22_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ncasper-client put-deploy -n http://<NODE IP>:<PORT> \\\n--chain-name <CHAIN NAME> \\\n--secret-key ~/casper/demo/user_a/secret_key.pem \\\n--session-path ~/casper/demo/cep18_test_contract.wasm \\\n--payment-amount 50000000000\n```\n\n----------------------------------------\n\nTITLE: Building and Testing Casper Counter Contract with Makefile - Bash\nDESCRIPTION: This set of commands navigates to the counter contract directory, prepares the build environment for Wasm compilation, and runs all contract tests. Requires Make, Rust toolchain, and corresponding project dependencies. Output is tested, compiled Wasm artifacts ready for deployment.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/docs/resources/beginner/counter/walkthrough.md#2025-04-22_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\ncd counter\nmake prepare\nmake test\n```\n\n----------------------------------------\n\nTITLE: Installing Rust and Environment Setup\nDESCRIPTION: Installation and configuration of Rust programming language and environment variables.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/docs/developers/prerequisites.md#2025-04-22_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\ncurl --proto '=https' --tlsv1.2 -sSf https://sh.rustup.rs | sh\n```\n\nLANGUAGE: bash\nCODE:\n```\nsource $HOME/.cargo/env\n```\n\nLANGUAGE: bash\nCODE:\n```\nrustup --version\n```\n\n----------------------------------------\n\nTITLE: Defining Runtime Argument Constants for Casper Tests - Rust\nDESCRIPTION: This snippet defines constants for use as runtime argument names and values within contract tests. The constants must exactly match those expected by the deployed contract (e.g., account hash, account name, WASM filename). This practice prevents typos and enforces consistency between test and production contract interfaces. AccountHash is given as a 32-byte array, and all values should be set to align with contract argument expectations.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/docs/developers/writing-onchain-code/testing-session-code.md#2025-04-22_snippet_4\n\nLANGUAGE: rust\nCODE:\n```\nconst ASSOCIATED_ACCOUNT_HASH: AccountHash = AccountHash::new([1u8; 32]); // hash of the associated account\nconst ASSOCIATED_ACCOUNT: &str = \"deployment-account\"; // the associated account argument\nconst CONTRACT_WASM: &str = \"contract.wasm\"; // file to pass to the instance of the EE\n```\n\n----------------------------------------\n\nTITLE: Calculating Token Supply in Casper Network's Consensus\nDESCRIPTION: Formula for calculating the token supply at a given era index, based on the initial supply and issuance rate. This calculation forms the basis for determining validator rewards.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/versioned_docs/version-1.5.X/concepts/economics/consensus.md#2025-04-22_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\nsupply(i) = initial_supply * (1 + issuance_rate)^(tick_at_era_start(i) / ticks_per_year)\n```\n\n----------------------------------------\n\nTITLE: Initializing Contract and Storing Installer Authorization Keys (Rust)\nDESCRIPTION: This Rust function `init` is called upon contract installation. It retrieves the authorization keys (`AccountHash`es) of the deploy that installed the contract using `runtime::list_authorization_keys()`, collects them into a `Vec<AccountHash>`, stores this vector in a new URef using `storage::new_uref`, and saves the URef's key under the NamedKey `AUTHORIZATION_KEYS_INSTALLER` using `runtime::put_key`. This ensures the installer keys are persisted.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/versioned_docs/version-1.5.X/resources/advanced/list-auth-keys-tutorial.md#2025-04-22_snippet_3\n\nLANGUAGE: rust\nCODE:\n```\n```rust\n#[no_mangle]\npub extern \"C\" fn init() {\n    if runtime::get_key(AUTHORIZATION_KEYS_INSTALLER).is_none() {\n        let authorization_keys: Vec<AccountHash> =\n            runtime::list_authorization_keys().iter().cloned().collect();\n\n        let authorization_keys: Key = storage::new_uref(authorization_keys).into();\n        runtime::put_key(AUTHORIZATION_KEYS_INSTALLER, authorization_keys);\n    }\n}\n```\n```\n\n----------------------------------------\n\nTITLE: Calling Contract Entry Point by Hash (Generic Syntax)\nDESCRIPTION: Provides the generic command structure for using `casper-client put-deploy` to call a specific entry point of a deployed smart contract identified by its hash. It lists the required arguments like node address, chain name, secret key, payment amount, the contract's session hash, and the target entry point name. This command sends a deploy to the network to execute the specified function.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/versioned_docs/version-2.0.0/developers/cli/calling-contracts.md#2025-04-22_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\ncasper-client put-deploy \\\n    --node-address [NODE_SERVER_ADDRESS] \\\n    --chain-name [CHAIN_NAME] \\\n    --secret-key [KEY_PATH]/secret_key.pem \\\n    --payment-amount [PAYMENT_AMOUNT_IN_MOTES] \\\n    --session-hash [HEX_STRING] \\\n    --session-entry-point [ENTRY_POINT_FUNCTION]\n```\n\n----------------------------------------\n\nTITLE: Redelegating Tokens Using System Auction Contract in Bash\nDESCRIPTION: This snippet demonstrates how to redelegate tokens using the system auction contract's 'redelegate' entry point. It requires specifying node address, secret key, chain name, payment amount, session hash, and various arguments including delegator and validator public keys.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/versioned_docs/version-1.5.X/developers/cli/redelegate.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ncasper-client put-deploy \\\n--node-address <HOST:PORT> \\\n--secret-key <PATH_TO_DELEGATOR_SECRET_KEY> \\\n--chain-name <CHAIN_NAME> \\\n--payment-amount 2500000000 \\\n--session-hash <SESSION_HASH> \\\n--session-entry-point redelegate \\\n--session-arg \"delegator:public_key='<DELEGATOR_PUBLIC_KEY_HEX>'\" \\\n--session-arg \"validator:public_key='<CURRENT_VALIDATOR_PUBLIC_KEY_HEX>'\" \\\n--session-arg \"amount:u512='<DELEGATION_AMOUNT>'\" \\\n--session-arg \"new_validator:public_key='<NEW_VALIDATOR_PUBLIC_KEY_HEX>'\"\n```\n\n----------------------------------------\n\nTITLE: Streaming Decompression and Extraction from a URL\nDESCRIPTION: Downloads a `.tar.zst` file from a URL using `curl`, streams it directly to `zstd` for decompression (`-d --long=31`), and then pipes the decompressed tar stream to `tar` for extraction (`-xv`). Extraction is performed as the `casper` user via `sudo`. This avoids saving the compressed archive locally. Requires `curl`, `zstd`, `tar`, and `sudo`.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/docs/operators/maintenance/archiving-and-restoring.md#2025-04-22_snippet_11\n\nLANGUAGE: bash\nCODE:\n```\ncurl -s --output - <tar.zst URL> | zstd -d --long=31 | sudo -u casper tar -xv\n```\n\n----------------------------------------\n\nTITLE: Displaying Help for get-account-info (Bash)\nDESCRIPTION: This command utilizes the `--help` flag with the `casper-client get-account-info` subcommand to display detailed usage instructions, available options, and parameter descriptions directly in the terminal. This is useful for understanding all possible arguments for the subcommand.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/versioned_docs/version-2.0.0/concepts/accounts-and-keys.md#2025-04-22_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\ncasper-client get-account-info --help\n```\n\n----------------------------------------\n\nTITLE: Deploying Native Transfer via JSON-RPC\nDESCRIPTION: This JSON snippet demonstrates a native transfer deploy without using WebAssembly (Wasm). It includes payment and session details required for transferring tokens. The snippet outlines how approval signatures, transfer amounts, and target account information are arranged in a deploy object.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/versioned_docs/version-1.5.X/resources/advanced/list-cspr.md#2025-04-22_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n\n\"id\": 1,\n    \"jsonrpc\": \"2.0\",\n    \"method\": \"account_put_deploy\",\n    \"params\": {\n        \"deploy\": {\n            \"approvals\": [\n                {\n                    \"signature\": \"130 chars\",\n                    \"signer\": \"010f50b0116f213ef65b99d1bd54483f92bf6131de2f8aceb7e3f825a838292150\"\n                }\n            ],\n            \"hash\": \"ec2d477a532e00b08cfa9447b7841a645a27d34ee12ec55318263617e5740713\",\n            \"header\": {\n                \"account\": \"010f50b0116f213ef65b99d1bd54483f92bf6131de2f8aceb7e3f825a838292150\",\n                \"body_hash\": \"da35b095640a403324306c59ac6f18a446dfcc28faf753ce58b96b635587dd8e\",\n                \"chain_name\": \"casper-net-1\",\n                \"dependencies\": [],\n                \"gas_price\": 1,\n                \"timestamp\": \"2021-04-20T18:04:40.333Z\",\n                \"ttl\": \"1h\"\n            },\n            \"payment\": {\n                \"ModuleBytes\": {\n                    \"args\": [\n                        [\n                            \"amount\",\n                            {\n                                \"bytes\": \"021027\",\n                                \"cl_type\": \"U512\",\n                                \"parsed\": \"10000\"\n                            }\n                        ]\n                    ],\n                    \"module_bytes\": \"\"\n                }\n            },\n            \"session\": {\n                \"Transfer\": {\n                    \"args\": [\n                        [\n                            \"amount\",\n                            {\n                                \"bytes\": \"0400f90295\",\n                                \"cl_type\": \"U512\",\n                                \"parsed\": \"2500000000\"\n                            }\n                        ],\n                        [\n                            \"target\",\n                            {\n                                \"bytes\": \"8ae68a6902ff3c029cea32bb67ae76b25d26329219e4c9ceb676745981fd3668\",\n                                \"cl_type\": {\n                                    \"ByteArray\": 32\n                                },\n                                \"parsed\": \"8ae68a6902ff3c029cea32bb67ae76b25d26329219e4c9ceb676745981fd3668\"\n                            }\n                        ],\n                        [\n                            \"id\",\n                            {\n                                \"bytes\": \"00\",\n                                \"cl_type\": {\n                                    \"Option\": \"U64\"\n                                },\n                                \"parsed\": null\n                            }\n                        ]\n                    ]\n                }\n            }\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Setting REST HTTP Server Address in config.toml - TOML/Markdown\nDESCRIPTION: Defines the REST API's HTTP listener address in config.toml, under rest_server. Typically exposed on port 8888, allows network health queries and synchronization checks, but is not required for overall node operation.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/docs/operators/setup/node-endpoints.md#2025-04-22_snippet_2\n\nLANGUAGE: md\nCODE:\n```\naddress = '0.0.0.0:8888'\n```\n\n----------------------------------------\n\nTITLE: Deploying a Wasm Contract to Casper Network\nDESCRIPTION: This command creates a deploy containing a compiled Wasm contract and sends it to the network for execution. It requires the node address, chain name, secret key for signing, payment amount in motes (1 nano-CSPR), and the path to the compiled Wasm contract.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/versioned_docs/version-1.5.X/resources/beginner/counter/commands.md#2025-04-22_snippet_3\n\nLANGUAGE: rust\nCODE:\n```\ncasper-client put-deploy \\\n    --node-address [NODE_SERVER_ADDRESS] \\\n    --chain-name casper-net-1 \\\n    --secret-key [KEY_PATH]/secret_key.pem \\\n    --payment-amount [PAYMENT_AMOUNT_IN_MOTES] \\\n    --session-path [CONTRACT_PATH]/counter-v1.wasm\n```\n\n----------------------------------------\n\nTITLE: Querying Contract State by Hash - Casper casper-client - Bash\nDESCRIPTION: This snippet uses the casper-client CLI to query the global state of a deployed contract on the Casper network by providing the node address, state root hash, and contract hash key. It is essential to have the accurate state root hash and the contract hash to retrieve the contract's current state, including named keys and entry points. The output will be a JSON structure representing the contract's current on-chain state, useful for inspecting contract data and configuration.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/docs/resources/advanced/cross-contract.md#2025-04-22_snippet_14\n\nLANGUAGE: bash\nCODE:\n```\ncasper-client query-global-state \\\n  --node-address http://136.243.187.84:7777 \\\n  --state-root-hash 2f3e100324deb999107229dbec5c4b724653174328c99ea0836931248c3cc9cb \\\n  --key hash-b7a06298cc71d4cac05929cc0713dfd5a541c68b71cb500cd04547b5cd0385ea\n```\n\n----------------------------------------\n\nTITLE: Signing a Deploy with Ledger in JavaScript SDK\nDESCRIPTION: Signs a deploy using a Ledger hardware wallet. The process involves connecting to the Ledger device, deriving the BIP path, and using the Ledger app to sign the deploy bytes before sending to the network.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/versioned_docs/version-1.5.X/resources/advanced/list-cspr.md#2025-04-22_snippet_9\n\nLANGUAGE: javascript\nCODE:\n```\nimport TransportWebUSB from '@ledgerhq/hw-transport-webusb';\nimport LedgerApp, { ResponseBase } from '@zondax/ledger-casper';\nimport { DeployUtil } from 'casper-js-sdk';\n\nconst getBipPath = (index: number) => {\n  const idx = index.toString();\n  return `m/44'/506'/0'/0/${idx}`;\n};\n\nconst deployBytes = DeployUtil.deployToBytes(deploy) as Buffer;\nconst transport = await TransportWebUSB.create();\nconst ledgerApp = new LedgerApp(transport);\nconst res = await ledgerApp.sign(\n    getBipPath(selectedAccountIndex),\n    deployBytes\n);\n```\n\n----------------------------------------\n\nTITLE: Integrating UpdateMessage Component into App (JSX)\nDESCRIPTION: Updates the main `App.jsx` component to include the `UpdateMessage` component. It imports `UpdateMessage` and renders it conditionally, only when the `publicKey` state is not null (meaning the user's wallet is connected). The `publicKey` is passed as a prop to `UpdateMessage`.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/docs/developers/dapps/template-frontend.md#2025-04-22_snippet_11\n\nLANGUAGE: jsx\nCODE:\n```\nimport React from \"react\";\nimport Connect from \"./Connect\";\n// highlight-next-line-green\nimport UpdateMessage from \"./UpdateMessage\";\nimport './App.css'\n\nfunction App() {\n    const [publicKey, setPublicKey] = React.useState(null);\n    return (\n        <>\n            <Connect setPublicKey={ setPublicKey } />\n            <div>\n                {publicKey !== null && (<>\n                    Wallet connected: {publicKey}<br/>\n                    // highlight-next-line-green\n                    <UpdateMessage publicKey={ publicKey } />\n                </>)}\n            </div>\n        </>\n    );\n}\n```\n\n----------------------------------------\n\nTITLE: Getting State Root Hash in Casper Network\nDESCRIPTION: This command retrieves the current state root hash, which acts as an identifier for the current state of the Casper network. It requires specifying the node address.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/docs/developers/cli/querying-global-state.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ncasper-client get-state-root-hash --node-address [NODE_SERVER_ADDRESS]\n```\n\n----------------------------------------\n\nTITLE: Querying CEP-18 Contract Package without Comments\nDESCRIPTION: This Bash command, used without comments, queries the global state for the specified contract hash and state root hash, returning the current contract package data.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/docs/resources/tokens/cep18/query.md#2025-04-22_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ncasper-client query-global-state -n http://<HOST IP>:<PORT> \\\n--key hash-82bd86d2675b2dc44c19027fb7717a99db6fda5e0cad8d597f2495a9dbc9df7f \\\n--state-root-hash f9f73c3a4da5893b67c4cac94a5695d76cfefff61b050c98a7b19e2b8efd3933\n```\n\n----------------------------------------\n\nTITLE: Mint Contract Interface Methods\nDESCRIPTION: Definition of the primary interface methods exposed by the Casper mint system contract, including transfer, mint, create, and balance operations. Each method includes specifications for access rights and return values.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/versioned_docs/version-2.0.0/concepts/design/casper-design.md#2025-04-22_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\ntransfer(source: URef, target: URef, amount: Motes) -> TransferResult\\n    - source must have at least Write access rights, target must have at least Add access rights\\n    - TransferResult may be a success acknowledgment or an error in the case of invalid source or target or insufficient balance in the source purse\\n\\nmint(amount: Motes) -> MintResult\\n    - MintResult either gives the created URef (with full access rights), which now has a balance equal to the given amount; or an error due to the minting of new motes not being allowed\\n    - In the Casper mint, only the system account can call mint, and it has no private key to produce valid cryptographic signatures, which means only the software itself can execute contracts in the context of the system account\\n\\ncreate() -> URef\\n    - a convenience function for mint(0) which cannot fail because it is always allowed to create an empty purse\\n\\nbalance(purse: URef) -> Option<Motes>\\n    - purse must have at least Read access rights\\n    - BalanceResult either returns the number of motes held by the purse, or nothing if the URef is not valid\n```\n\n----------------------------------------\n\nTITLE: Organizing Test Functions with #[cfg(test)] Module in Rust\nDESCRIPTION: This code demonstrates wrapping all test logic within a module annotated with '#[cfg(test)]', ensuring that tests are compiled and executed only when running 'cargo test'. The strategy helps separate test code from production code and aligns with Rust conventions for test code organization. No direct parameters or outputs; instead, it scopes all test-related items.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/versioned_docs/version-1.5.X/developers/writing-onchain-code/testing-contracts.md#2025-04-22_snippet_2\n\nLANGUAGE: rust\nCODE:\n```\n#[cfg(test)]\nmod tests {\n    // The entire test program resides here\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Test Dependencies in Rust\nDESCRIPTION: This code snippet shows how to define dependencies required for testing smart contracts in the Casper test environment within a Cargo.toml file, including the execution engine and test support crates.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/docs/developers/writing-onchain-code/testing-contracts.md#2025-04-22_snippet_0\n\nLANGUAGE: rust\nCODE:\n```\n[dependencies]\ncasper-execution-engine = \"2.0.1\"\ncasper-engine-test-support = { version = \"2.2.0\", features = [\"test-support\"] }\ncasper-types = \"1.5.0\"\n```\n\n----------------------------------------\n\nTITLE: Defining Deploy and Related Schema Components in JSON Schema\nDESCRIPTION: A comprehensive JSON schema definition for Deploy objects and related components in the Casper Network. The schema defines the structure of a signed smart contract, including hash, header, payment, session, and approvals with proper validation rules and property requirements.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/condor/jsonrpc-comp/rpc-2.0/schema/components.json.md#2025-04-22_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"components\": {\n        \"schemas\": {\n            \"Deploy\": {\n                \"description\": \"A signed smart contract.\",\n                \"type\": \"object\",\n                \"required\": [\n                    \"approvals\",\n                    \"hash\",\n                    \"header\",\n                    \"payment\",\n                    \"session\"\n                ],\n                \"properties\": {\n                    \"hash\": {\n                        \"$ref\": \"#/components/schemas/DeployHash\"\n                    },\n                    \"header\": {\n                        \"$ref\": \"#/components/schemas/DeployHeader\"\n                    },\n                    \"payment\": {\n                        \"$ref\": \"#/components/schemas/ExecutableDeployItem\"\n                    },\n                    \"session\": {\n                        \"$ref\": \"#/components/schemas/ExecutableDeployItem\"\n                    },\n                    \"approvals\": {\n                        \"type\": \"array\",\n                        \"items\": {\n                            \"$ref\": \"#/components/schemas/Approval\"\n                        },\n                        \"uniqueItems\": true\n                    }\n                },\n                \"additionalProperties\": false\n            },\n            \"DeployHash\": {\n                \"description\": \"Hex-encoded deploy hash.\",\n                \"allOf\": [\n                    {\n                        \"$ref\": \"#/components/schemas/Digest\"\n                    }\n                ]\n            },\n            \"Digest\": {\n                \"description\": \"Hex-encoded hash digest.\",\n                \"type\": \"string\"\n            },\n            \"DeployHeader\": {\n                \"description\": \"The header portion of a [`Deploy`].\",\n                \"type\": \"object\",\n                \"required\": [\n                    \"account\",\n                    \"body_hash\",\n                    \"chain_name\",\n                    \"dependencies\",\n                    \"gas_price\",\n                    \"timestamp\",\n                    \"ttl\"\n                ],\n                \"properties\": {\n                    \"account\": {\n                        \"$ref\": \"#/components/schemas/PublicKey\"\n                    },\n                    \"timestamp\": {\n                        \"$ref\": \"#/components/schemas/Timestamp\"\n                    },\n                    \"ttl\": {\n                        \"$ref\": \"#/components/schemas/TimeDiff\"\n                    },\n                    \"gas_price\": {\n                        \"type\": \"integer\",\n                        \"format\": \"uint64\",\n                        \"minimum\": 0.0\n                    },\n                    \"body_hash\": {\n                        \"$ref\": \"#/components/schemas/Digest\"\n                    },\n                    \"dependencies\": {\n                        \"type\": \"array\",\n                        \"items\": {\n                            \"$ref\": \"#/components/schemas/DeployHash\"\n                        }\n                    },\n                    \"chain_name\": {\n                        \"type\": \"string\"\n                    }\n                },\n                \"additionalProperties\": false\n            },\n            \"PublicKey\": {\n                \"description\": \"Hex-encoded cryptographic public key, including the algorithm tag prefix.\",\n                \"examples\": [\n                    {\n                        \"name\": \"SystemPublicKey\",\n                        \"description\": \"A pseudo public key, used for example when the system proposes an immediate switch block after a network upgrade rather than a specific validator. Its hex-encoded value is always '00', as is the corresponding pseudo signature's\",\n                        \"value\": \"00\"\n                    },\n                    {\n                        \"name\": \"Ed25519PublicKey\",\n                        \"description\": \"An Ed25519 public key. Its hex-encoded value begins '01' and is followed by 64 characters\",\n                        \"value\": \"018a88e3dd7409f195fd52db2d3cba5d72ca6709bf1d94121bf3748801b40f6f5c\"\n                    },\n                    {\n                        \"name\": \"Secp256k1PublicKey\",\n                        \"description\": \"A secp256k1 public key. Its hex-encoded value begins '02' and is followed by 66 characters\",\n                        \"value\": \"0203408e9526316fd1f8def480dd45b2cc72ffd732771c9ceb5d92ffa4051e6ee084\"\n                    }\n                ],\n                \"type\": \"string\"\n            },\n            \"Timestamp\": {\n                \"description\": \"Timestamp formatted as per RFC 3339\",\n                \"type\": \"string\"\n            },\n            \"TimeDiff\": {\n                \"description\": \"Human-readable duration.\",\n                \"type\": \"string\"\n            },\n            \"ExecutableDeployItem\": {\n                \"description\": \"The executable component of a [`Deploy`].\",\n                \"oneOf\": [\n                    {\n                        \"description\": \"Executable specified as raw bytes that represent Wasm code and an instance of [`RuntimeArgs`].\",\n                        \"type\": \"object\",\n                        \"required\": [\n                            \"ModuleBytes\"\n                        ],\n                        \"properties\": {\n                            \"ModuleBytes\": {\n                                \"type\": \"object\",\n                                \"required\": [\n                                    \"args\",\n                                    \"module_bytes\"\n                                ],\n                                \"properties\": {\n                                    \"module_bytes\": {\n                                        \"description\": \"Hex-encoded raw Wasm bytes.\",\n                                        \"allOf\": [\n                                            {\n                                                \"$ref\": \"#/components/schemas/Bytes\"\n                                            }\n                                        ]\n                                    },\n                                    \"args\": {\n                                        \"description\": \"Runtime arguments.\",\n                                        \"allOf\": [\n                                            {\n                                                \"$ref\": \"#/components/schemas/RuntimeArgs\"\n                                            }\n                                        ]\n                                    }\n                                },\n                                \"additionalProperties\": false\n                            }\n                        },\n                        \"additionalProperties\": false\n                    },\n                    {\n                        \"description\": \"Stored contract referenced by its [`AddressableEntityHash`], entry point and an instance of [`RuntimeArgs`].\",\n                        \"type\": \"object\",\n                        \"required\": [\n                            \"StoredContractByHash\"\n                        ],\n                        \"properties\": {\n                            \"StoredContractByHash\": {\n                                \"type\": \"object\",\n                                \"required\": [\n                                    \"args\",\n                                    \"entry_point\",\n                                    \"hash\"\n                                ],\n                                \"properties\": {\n                                    \"hash\": {\n                                        \"description\": \"Hex-encoded contract hash.\",\n                                        \"allOf\": [\n                                            {\n                                                \"$ref\": \"#/components/schemas/AddressableEntityHash\"\n                                            }\n                                        ]\n                                    },\n                                    \"entry_point\": {\n                                        \"description\": \"Name of an entry point.\",\n                                        \"type\": \"string\"\n                                    },\n                                    \"args\": {\n                                        \"description\": \"Runtime arguments.\",\n                                        \"allOf\": [\n                                            {\n                                                \"$ref\": \"#/components/schemas/RuntimeArgs\"\n                                            }\n                                        ]\n                                    }\n                                },\n                                \"additionalProperties\": false\n                            }\n                        },\n                        \"additionalProperties\": false\n                    },\n                    {\n                        \"description\": \"Stored contract referenced by a named key existing in the signer's account context, entry point and an instance of [`RuntimeArgs`].\",\n                        \"type\": \"object\",\n                        \"required\": [\n                            \"StoredContractByName\"\n                        ],\n                        \"properties\": {\n                            \"StoredContractByName\": {\n                                \"type\": \"object\",\n                                \"required\": [\n                                    \"args\",\n                                    \"entry_point\",\n                                    \"name\"\n                                ],\n                                \"properties\": {\n                                    \"name\": {\n                                        \"description\": \"Named key.\",\n                                        \"type\": \"string\"\n                                    },\n                                    \"entry_point\": {\n                                        \"description\": \"Name of an entry point.\",\n                                        \"type\": \"string\"\n                                    }\n```\n\n----------------------------------------\n\nTITLE: Calling a Contract and Using its Return Value in Session Code (Rust)\nDESCRIPTION: This Rust session code demonstrates calling a contract's entry point. It retrieves the contract hash (`FUNDRAISER_CONTRACT_HASH`), donating account key (`DONATING_ACCOUNT_KEY`), and donation amount (`DONATION_AMOUNT`) as runtime arguments. It then calls the `donate` entry point of the specified contract using `runtime::call_contract`, passing the `donating_account_key`. The returned value (the `donating_purse_uref`) is captured and subsequently used to transfer the specified `donation_amount` from the caller's main purse to the contract's donation purse using `system::transfer_from_purse_to_purse`.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/docs/resources/advanced/return-values-tutorial.md#2025-04-22_snippet_1\n\nLANGUAGE: rust\nCODE:\n```\n```rust\n\n#[no_mangle]\npub extern \"C\" fn call() {\n    let fundraiser_contract_hash: ContractHash = runtime::get_named_arg(FUNDRAISER_CONTRACT_HASH);\n    let donating_account_key: Key = runtime::get_named_arg(DONATING_ACCOUNT_KEY);\n    let donation_amount: U512 = runtime::get_named_arg(DONATION_AMOUNT);\n\n    let donating_purse_uref: URef = runtime::call_contract(\n        fundraiser_contract_hash,\n        ENTRY_POINT_DONATE,\n        runtime_args! {\n            DONATING_ACCOUNT_KEY => donating_account_key\n        },\n    );\n    system::transfer_from_purse_to_purse(\n        account::get_main_purse(),\n        donating_purse_uref,\n        donation_amount,\n        None\n    )\n        .unwrap_or_revert()\n}\n\n```\n```\n\n----------------------------------------\n\nTITLE: Monitor Node Peers, Block Height, and RPC Status - Bash\nDESCRIPTION: Enhances real-time node monitoring by also querying block height from the RPC port, combining REST-based metrics with CLI output. Assumes casper-client is installed and accessible. Queries peers count, last block info, and issues a get-block command for comprehensive node health analysis.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/docs/operators/setup/node-endpoints.md#2025-04-22_snippet_12\n\nLANGUAGE: bash\nCODE:\n```\nwatch -n 15 'curl -s http://<node_address>:8888/status | jq \".peers | length\"; curl -s http://<node_address>:8888/status | jq .last_added_block_info; casper-client get-block -n http://<node_address>:8888/status'\n```\n\n----------------------------------------\n\nTITLE: Test: Successful Contract Installation with Default Authorization Key (Rust)\nDESCRIPTION: This Rust test code prepares a contract install deploy signed only by the default account's authorization key. It builds the deploy item with required payment, authorization keys, contract session code, and address fields, then uses builder APIs to execute the deploy. Inputs include account addresses and wasm file path, with output being verification of deploy acceptance by the node. Dependencies include Casper test infrastructure and types.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/docs/resources/advanced/list-auth-keys-tutorial.md#2025-04-22_snippet_6\n\nLANGUAGE: rust\nCODE:\n```\nlet session_code = PathBuf::from(CONTRACT_WASM);\nlet session_args = RuntimeArgs::new();\n\nlet deploy_item = DeployItemBuilder::new()\n    .with_empty_payment_bytes(runtime_args! {ARG_AMOUNT => *DEFAULT_PAYMENT})\n    .with_authorization_keys(&[*DEFAULT_ACCOUNT_ADDR])\n    .with_address(*DEFAULT_ACCOUNT_ADDR)\n    .with_session_code(session_code, session_args)\n    .build();\n\n```\n\n----------------------------------------\n\nTITLE: Checking Key Presence with Assertion in Casper Contract Test - Rust\nDESCRIPTION: Demonstrates direct verification of resulting contract state using Rust assertions. This example checks if a given account hash exists among associated keys, validating session or contract logic. Such assertions provide concrete pass/fail feedback during automated test runs. Replace 'associated_keys' and 'ASSOCIATED_ACCOUNT_HASH' as appropriate for your contract logic.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/docs/developers/writing-onchain-code/testing-session-code.md#2025-04-22_snippet_10\n\nLANGUAGE: rust\nCODE:\n```\n    assert!(associated_keys.contains_key(&ASSOCIATED_ACCOUNT_HASH));\n```\n\n----------------------------------------\n\nTITLE: CLValue Transaction Data in Casper Network\nDESCRIPTION: JSON representation of transaction data in the Casper Network blockchain, showing various key operations including Write operations, Identity operations, and balance modifications. The data includes account hashes, URefs, messages, and balance changes that occurred during blockchain transactions.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/docs/developers/writing-onchain-code/emitting-contract-events.md#2025-04-22_snippet_10\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"key\": \"dictionary-3344eae47d44ef595de8219a32c69e9ac51ee14f020bd5da24f899fd49d12abf\",\n    \"kind\": {\n        \"Write\": {\n            \"CLValue\": {\n                \"cl_type\": \"Any\",\n                \"bytes\": \"08000000010000000000000005200000000c08f3df6e05e509000cd57646b98983481b8bcd46b98f0aae1a5abccc1e114f4000000032313266666464303430623635343935343139663430353763383339323933306534313066376266323462616565633864653539613631313762363365343563\",\n                \"parsed\": null\n            }\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Example of Deploying a CEP-18 Token to Testnet\nDESCRIPTION: Complete example of deploying a CEP-18 token called 'CHF Coin' to the Casper testnet with specific parameters for name, symbol, decimals, and total supply.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/versioned_docs/version-2.0.0/resources/beginner/cep18.md#2025-04-22_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\ncasper-client put-deploy \\\n--node-address http://78.46.32.13:7777 \\\n--chain-name casper-test \\\n--secret-key \"./keys/secret_key.pem\" \\\n--payment-amount 150000000000 \\\n--session-path \"./target/wasm32-unknown-unknown/release/cep18.wasm\" \\\n--session-arg \"name:string='CHF Coin'\" \\\n--session-arg \"symbol:string='CHFC'\" \\\n--session-arg \"decimals:u8='10'\" \\\n--session-arg \"total_supply:u256='1000'\"\n```\n\n----------------------------------------\n\nTITLE: Testing Disallowed Contract Installation with Unauthorized Key (Rust)\nDESCRIPTION: This Rust test snippet demonstrates an attempt to install a contract using an authorization key (`account_addr_1`) that is not associated with the deploy's target account (`DEFAULT_ACCOUNT_ADDR`). It builds the `DeployItem` with both keys, creates an `ExecuteRequest`, executes it expecting failure (`expect_failure()`), retrieves the error, and asserts that the error message indicates an authorization failure, confirming that only associated keys can authorize deploys.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/versioned_docs/version-1.5.X/resources/advanced/list-auth-keys-tutorial.md#2025-04-22_snippet_7\n\nLANGUAGE: rust\nCODE:\n```\n```rust\nlet session_code = PathBuf::from(CONTRACT_WASM);\nlet session_args = RuntimeArgs::new();\n\nlet deploy_item = DeployItemBuilder::new()\n    .with_empty_payment_bytes(runtime_args! {ARG_AMOUNT => *DEFAULT_PAYMENT})\n    .with_authorization_keys(&[*DEFAULT_ACCOUNT_ADDR, account_addr_1])\n    .with_address(*DEFAULT_ACCOUNT_ADDR)\n    .with_session_code(session_code, session_args)\n    .build();\n\nlet execute_request = ExecuteRequestBuilder::from_deploy_item(deploy_item).build();\nbuilder.exec(execute_request).commit().expect_failure();\nlet error = builder.get_error().expect(\"must have error\");\nassert_eq!(error.to_string(), \"Authorization failure: not authorized.\");\n```\n```\n\n----------------------------------------\n\nTITLE: Compiling Casper Contract to WebAssembly\nDESCRIPTION: Commands to prepare the environment and build the Casper smart contract, compiling it to WebAssembly. This process creates the contract.wasm file in the specified output directory.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/versioned_docs/version-2.0.0/developers/writing-onchain-code/getting-started.md#2025-04-22_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\ncd my-project\nmake prepare\nmake build-contract\n```\n\n----------------------------------------\n\nTITLE: Calling a Smart Contract by Named Key with Casper-Client in Rust\nDESCRIPTION: Sends a deploy to call an entry point in an existing smart contract rather than installing a new Wasm contract. Requires specifying session name and entry point, along with the node address, chain name, secret key, and payment amount. Used for invoking contract logic on-chain without adding new Wasm files.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/docs/resources/beginner/counter/commands.md#2025-04-22_snippet_4\n\nLANGUAGE: rust\nCODE:\n```\ncasper-client put-deploy \\\n    --node-address [NODE_SERVER_ADDRESS] \\\n    --chain-name casper-net-1 \\\n    --secret-key [KEY_PATH]/secret_key.pem \\\n    --payment-amount [PAYMENT_AMOUNT_IN_MOTES] \\\n    --session-name \"counter\" \\\n    --session-entry-point \"counter_inc\"\n```\n\n----------------------------------------\n\nTITLE: Retrieving and Comparing Stored Values using get_key and storage::read in Rust\nDESCRIPTION: This code snippet shows how to retrieve a previously stored URef using runtime::get_key, read its value with storage::read, and compare it with a runtime argument. It includes error handling that reverts execution if values don't match.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/versioned_docs/version-2.0.0/resources/advanced/storage-workflow.md#2025-04-22_snippet_1\n\nLANGUAGE: rust\nCODE:\n```\n    let my_stored_value_uref: URef = runtime::get_key(MY_STORED_VALUE_UREF)\n        .unwrap_or_revert()\n        .into_uref()\n        .map(|uref| URef::new(uref.addr(), AccessRights::default()))\n        .unwrap_or_revert()\n        .into_read();\n\n    let my_actual_stored_value: bool = storage::read(my_stored_value_uref).unwrap().unwrap();\n\n    // Compare my stored value with runtime arg\n    let my_expected_stored_value: bool = runtime::get_named_arg(ARG_MY_STORED_VALUE);\n    if my_actual_stored_value != my_expected_stored_value {\n        // We revert if my stored value is not what is expected from caller argument\n        runtime::revert(UserError::StoredValueError);\n    }\n\n    runtime::print(&my_actual_stored_value.to_string());\n}\n```\n\n----------------------------------------\n\nTITLE: Installing the CEP-18 Main Contract with Casper Client (Bash)\nDESCRIPTION: This Bash code snippet demonstrates how to use the Casper client to deploy the main CEP-18 fungible token contract with user-supplied arguments. It requires the Casper command-line client and a built Wasm contract file. Parameters such as contract name, symbol, total supply, and decimals are passed as session arguments. Inputs include chain name, node address, secret key, session Wasm path, and payment amount. The output is the deploy request for the main CEP-18 contract; ensure all environment paths and arguments are correctly specified, and that you hold a sufficient CSPR token balance.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/docs/resources/tokens/cep18/quickstart-guide.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ncasper-client put-deploy -n http://<NODE IP>:<PORT> \\\n--chain-name <CHAIN NAME> \\\n--secret-key ~/casper/demo/user_a/secret_key.pem \\\n--session-path ~/casper/demo/cep18.wasm \\\n--session-arg \"name:string='CEP18'\" \\\n--session-arg \"symbol:string='gris'\" \\\n--session-arg \"total_supply:u256='100'\" \\\n--session-arg \"decimals:u8='1'\" \\\n--payment-amount 150000000000\n```\n\n----------------------------------------\n\nTITLE: Deploying Compiled Wasm Contract via Casper-Client CLI - Rust\nDESCRIPTION: This snippet shows how to deploy a compiled Wasm smart contract to the Casper testnet using casper-client. Required parameters include node address, chain name (such as 'casper-test'), path to the deployer's secret key, payment amount in motes (1 nano-CSPR per mote), and the file path to the compiled Wasm contract. Replace all placeholders before executing to ensure correct contract installation and fee payment.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/versioned_docs/version-2.0.0/resources/beginner/counter-testnet/commands.md#2025-04-22_snippet_3\n\nLANGUAGE: rust\nCODE:\n```\ncasper-client put-deploy \\\n    --node-address [NODE_SERVER_ADDRESS] \\\n    --chain-name casper-test \\\n    --secret-key [KEY_PATH]/secret_key.pem \\\n    --payment-amount [PAYMENT_AMOUNT_IN_MOTES] \\\n    --session-path [CONTRACT_PATH]/counter-v1.wasm\n```\n\n----------------------------------------\n\nTITLE: Defining Entry Point: migrate_user_balance_keys in Casper Network\nDESCRIPTION: This snippet defines the 'migrate_user_balance_keys' entry point for a Casper Network smart contract. It takes two boolean arguments 'events' and 'revert', returns Unit, and has public access with caller-based entry point payment.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/versioned_docs/version-2.0.0/developers/cli/sending-transactions.md#2025-04-22_snippet_8\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"name\": \"migrate_user_balance_keys\",\n  \"args\": [\n    {\n      \"name\": \"events\",\n      \"cl_type\": \"Bool\"\n    },\n    {\n      \"name\": \"revert\",\n      \"cl_type\": \"Bool\"\n    }\n  ],\n  \"ret\": \"Unit\",\n  \"access\": \"Public\",\n  \"entry_point_type\": \"Called\",\n  \"entry_point_payment\": \"Caller\"\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Locked Contract Package in Rust\nDESCRIPTION: Example of creating a locked contract package that cannot be upgraded, including entry points and named keys configuration.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/versioned_docs/version-1.5.X/resources/beginner/upgrade-contract.md#2025-04-22_snippet_9\n\nLANGUAGE: rust\nCODE:\n```\nlet (stored_contract_hash, _) = storage::new_locked_contract(\n    contract_entry_points,\n    Some(contract_named_keys),\n    Some(\"contract_package_name\".to_string()),\n    Some(\"contract_access_uref\".to_string()),\n);\n```\n\n----------------------------------------\n\nTITLE: Creating a New Account Keypair - JavaScript - javascript\nDESCRIPTION: Generates a new Ed25519 keypair for a Casper account using casper-js-sdk. The resulting keypair object contains both public and private keys for use in signing and account authentication. Replace Ed25519 with Secp256K1 to use a different signature scheme. Input: none (function call). Output: keypair object.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/versioned_docs/version-2.0.0/developers/dapps/sdk/client-library-usage.md#2025-04-22_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nconst { Keys } = require(\"casper-js-sdk\");\nconst keypair = Keys.Ed25519.new();\nconst { publicKey, privateKey } = keypair;\n```\n\n----------------------------------------\n\nTITLE: Acquiring Dictionary Seed URef from Contract Context\nDESCRIPTION: First part of the update_ledger_record function that retrieves the seed URef for the 'ledger' dictionary from the contract's runtime. This URef is required to access the dictionary.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/versioned_docs/version-1.5.X/concepts/dictionaries.md#2025-04-22_snippet_3\n\nLANGUAGE: rust\nCODE:\n```\nfn update_ledger_record(dictionary_item_key: String) {\n    // Acquiring the LEDGER seed URef to properly assign the dictionary item.\n    let ledger_seed_uref = *runtime::get_key(\"ledger\")\n        .unwrap_or_revert_with(FundRaisingError::MissingLedgerSeedURef)\n        .as_uref()\n        .unwrap_or_revert();\n```\n\n----------------------------------------\n\nTITLE: Defining Transform Error Types Schema in JSON\nDESCRIPTION: A JSON schema that defines error types for transform operations. The schema includes serialization errors, type mismatch errors when incompatible data types interact (e.g., adding a number to a string), and a deprecated flag for types no longer supported.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/condor/jsonrpc-comp/rpc-2.0/schema/TransformError.json.md#2025-04-22_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"description\": \"Error type for applying and combining transforms.\\n\\nA `TypeMismatch` occurs when a transform cannot be applied because the types are not compatible (e.g. trying to add a number to a string).\",\n    \"oneOf\": [\n        {\n            \"description\": \"Error while (de)serializing data.\",\n            \"type\": \"object\",\n            \"required\": [\n                \"Serialization\"\n            ],\n            \"properties\": {\n                \"Serialization\": {\n                    \"$ref\": \"#/components/schemas/BytesreprError\"\n                }\n            },\n            \"additionalProperties\": false\n        },\n        {\n            \"description\": \"Type mismatch error.\",\n            \"type\": \"object\",\n            \"required\": [\n                \"TypeMismatch\"\n            ],\n            \"properties\": {\n                \"TypeMismatch\": {\n                    \"$ref\": \"#/components/schemas/TypeMismatch\"\n                }\n            },\n            \"additionalProperties\": false\n        },\n        {\n            \"description\": \"Type no longer supported.\",\n            \"type\": \"string\",\n            \"enum\": [\n                \"Deprecated\"\n            ]\n        }\n    ]\n}\n```\n\n----------------------------------------\n\nTITLE: Specifying Dependencies in Cargo.toml for Casper Testing - Rust\nDESCRIPTION: This snippet defines the minimal set of required dependencies in Cargo.toml to enable contract testing using the Casper unit-testing ecosystem. It specifies the 'casper-engine-test-support' for the test framework, 'casper-execution-engine' for execution engine simulation, and 'casper-types' for blockchain primitive types. All dependencies should be added as [dev-dependencies] in your project's tests/Cargo.toml. Versions and features must match the requirements of your project and Casper network version.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/docs/developers/writing-onchain-code/testing-session-code.md#2025-04-22_snippet_0\n\nLANGUAGE: rust\nCODE:\n```\n[dev-dependencies]\ncasper-engine-test-support = { version = \"2.2.0\", features = [\"test-support\"] }\ncasper-execution-engine = \"2.0.0\"\ncasper-types = \"1.5.0\"\n```\n\n----------------------------------------\n\nTITLE: Requesting Deploy Information with info_get_deploy\nDESCRIPTION: This example shows how to query for a specific deploy using its hash with the info_get_deploy RPC method. The second parameter indicates whether to return finalized approvals.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/versioned_docs/version-1.5.X/developers/json-rpc/json-rpc-informational.md#2025-04-22_snippet_10\n\nLANGUAGE: bash\nCODE:\n```\n{\n  \"id\": 1,\n  \"jsonrpc\": \"2.0\",\n  \"method\": \"info_get_deploy\",\n  \"params\": [\n    \"5c9b3b099c1378aa8e4a5f07f59ff1fcdc69a83179427c7e67ae0377d94d93fa\",\n    true\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: chain_get_block Response Example\nDESCRIPTION: Example response from a chain_get_block request showing the complete block structure including header, body, and proofs. Contains detailed information about the block including timestamps, hashes, and validator data.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/versioned_docs/version-1.5.X/developers/json-rpc/json-rpc-informational.md#2025-04-22_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n{\n  \"id\": 1,\n  \"jsonrpc\": \"2.0\",\n  \"result\": {\n    \"api_version\": \"1.4.13\",\n    \"block\": {\n      \"body\": {\n        \"deploy_hashes\": [],\n        \"proposer\": \"01d9bf2148748a85c89da5aad8ee0b0fc2d105fd39d41a4c796536354f0ae2900c\",\n        \"transfer_hashes\": [\n          \"5c9b3b099c1378aa8e4a5f07f59ff1fcdc69a83179427c7e67ae0377d94d93fa\"\n        ]\n      },\n      \"hash\": \"13c2d7a68ecdd4b74bf4393c88915c836c863fc4bf11d7f2bd930a1bbccacdcb\",\n      \"header\": {\n        \"accumulated_seed\": \"ac979f51525cfd979b14aa7dc0737c5154eabe0db9280eceaa8dc8d2905b20d5\",\n        \"body_hash\": \"cd502c5393a3c8b66d6979ad7857507c9baf5a8ba16ba99c28378d3a970fff42\",\n        \"era_end\": {\n          \"era_report\": {\n            \"equivocators\": [\n              \"013b6a27bcceb6a42d62a3a8d02a6f0d73653215771de243a63ac048a18b59da29\"\n            ],\n            \"inactive_validators\": [\n              \"018139770ea87d175f56a35466c34c7ecccb8d8a91b4ee37a25df60f5b8fc9b394\"\n            ],\n            \"rewards\": [\n              {\n                \"amount\": 1000,\n                \"validator\": \"018a88e3dd7409f195fd52db2d3cba5d72ca6709bf1d94121bf3748801b40f6f5c\"\n              }\n            ]\n          },\n          \"next_era_validator_weights\": [\n            {\n              \"validator\": \"016e7a1cdd29b0b78fd13af4c5598feff4ef2a97166e3ca6f2e4fbfccd80505bf1\",\n              \"weight\": \"456\"\n            },\n            {\n              \"validator\": \"018a875fff1eb38451577acd5afee405456568dd7c89e090863a0557bc7af49f17\",\n              \"weight\": \"789\"\n            },\n            {\n              \"validator\": \"01d9bf2148748a85c89da5aad8ee0b0fc2d105fd39d41a4c796536354f0ae2900c\",\n              \"weight\": \"123\"\n            }\n          ]\n        },\n        \"era_id\": 1,\n        \"height\": 10,\n        \"parent_hash\": \"0707070707070707070707070707070707070707070707070707070707070707\",\n        \"protocol_version\": \"1.0.0\",\n        \"random_bit\": true,\n        \"state_root_hash\": \"0808080808080808080808080808080808080808080808080808080808080808\",\n        \"timestamp\": \"2020-11-17T00:39:24.072Z\"\n      },\n      \"proofs\": [\n        {\n          \"public_key\": \"01d9bf2148748a85c89da5aad8ee0b0fc2d105fd39d41a4c796536354f0ae2900c\",\n          \"signature\": \"016291a7b2689e2edcc6e79030be50edd02f9bd7d809921ae2654012f808c7b9a0f125bc32d6aa610cbd012395a9832ccfaa9262023339f1db71ca073a13bb9707\"\n        }\n      ]\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Installing Smart Contracts with Python SDK\nDESCRIPTION: Shows how to install a smart contract on the Casper Network using Python with pycspr. This example reads a WASM file, creates the necessary deployment parameters, and sends the deploy to the network.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/versioned_docs/version-1.5.X/developers/dapps/sdk/client-library-usage.md#2025-04-22_snippet_17\n\nLANGUAGE: python\nCODE:\n```\nimport pycspr\nfrom pycspr.types import ModuleBytes, CL_String\n\nclient = NodeClient(NodeConnection(host = \"NODE_ADDRESS\", port_rpc = 7777))\n\ndeployParams = pycspr.create_deploy_parameters(\n    account = keypair,\n    chain_name = \"casper\" # or \"casper-test\" for Testnet\n)\npayment = pycspr.create_standard_payment(10000000000) # 10 CSPR\nsession = ModuleBytes(\n    module_bytes = pycspr.read_wasm(\"/path/to/contract.wasm\"),\n    args = {\n        \"message\": CL_String(\"Hello world!\"),\n    }\n)\n\ndeploy = pycspr.create_deploy(deployParams, payment, session)\n\ndeploy.approve(keypair)\nclient.send_deploy(deploy)\nprint(deploy.hash.hex())\n```\n\n----------------------------------------\n\nTITLE: Example: Unbonding 5 CSPR via System Auction Contract on Testnet (Bash)\nDESCRIPTION: This is an example command demonstrating the withdrawal of 5 CSPR (5 * 10^9 motes) from a validator bid on the Casper Testnet. It uses the `casper-client put-deploy` command, specifying the `withdraw_bid` entry point of the system auction contract with concrete values for node address, secret key path, chain name (casper-test), payment (2.5 CSPR), Testnet session hash, public key, and the withdrawal amount.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/docs/operators/becoming-a-validator/unbonding.md#2025-04-22_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nsudo -u casper casper-client put-deploy \\\n--node-address http://65.21.75.254:7777 \\\n--secret-key /etc/casper/validator_keys/secret_key.pem \\\n--chain-name casper-test \\\n--payment-amount 2500000000 \\\n--session-hash hash-93d923e336b20a4c4ca14d592b60e5bd3fe330775618290104f9beb326db7ae2 \\\n--session-entry-point withdraw_bid \\\n--session-arg \"public_key:public_key='01c297d2931fec7e22b2fb1ae3ca5afdfacc2c82ba501e8ed158eecef82b4dcdee'\" \\\n--session-arg \"amount:U512='$[5 * 1000000000]'\"\n```\n\n----------------------------------------\n\nTITLE: Defining Call Function in Casper Session Code\nDESCRIPTION: Skeleton of the 'call' function, which serves as the entry point for Casper Network session code.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/versioned_docs/version-2.0.0/developers/writing-onchain-code/writing-session-code.md#2025-04-22_snippet_3\n\nLANGUAGE: rust\nCODE:\n```\n#[no_mangle]\npub extern \"C\" fn call() {\n    // Open the repository for details\n}\n```\n\n----------------------------------------\n\nTITLE: Transferring Tokens with Throw-Away Purse\nDESCRIPTION: This Rust snippet demonstrates creating a single-use purse to transfer tokens securely to a smart contract on the Casper Network. It requires contract hash, entry point name, and an amount to proceed. The snippet ensures the caller's main purse isn't exposed during the operation.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/docs/resources/advanced/transfer-token-to-contract.md#2025-04-22_snippet_0\n\nLANGUAGE: Rust\nCODE:\n```\n#[no_mangle]\npub extern \"C\" fn call() {\n    let amount: U512 = runtime::get_named_arg(\"amount\");\n    let contract_hash = runtime::get_named_arg(\"contract_hash\");\n    let entry_point_name = runtime::get_named_arg(\"entry_point_name\");\n    let new_purse = system::create_purse();\n    system::transfer_from_purse_to_purse(account::get_main_purse(), new_purse, amount, None)\n        .unwrap_or_revert();\n    runtime::call_contract(contract_hash, entry_point_name, runtime_args! {\n        \"????\" => new_purse\n    });\n}\n\n```\n\n----------------------------------------\n\nTITLE: Defining Validator Summary Schema with JSON Schema in JSON\nDESCRIPTION: This code snippet defines a JSON schema object specifying the arrangement and validation of validator equivocation, rewards, and inactivity information. Dependencies include references to external components such as the PublicKey and EraReward schemas, so these must exist within the referenced schema file. The schema enforces that 'equivocators', 'inactive_validators', and 'rewards' must be present, with each property providing array structures of well-defined types and descriptive details. The expected input is a JSON object matching this schema, and the output is validation for such objects; improper structure or missing properties will fail validation. No actual data processing logic is included—this snippet is strictly for schema definition.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/condor/jsonrpc-comp/rpc-2.0/schema/EraReport_for_PublicKey.json.md#2025-04-22_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"description\": \"Equivocation, reward and validator inactivity information.\",\n    \"type\": \"object\",\n    \"required\": [\n        \"equivocators\",\n        \"inactive_validators\",\n        \"rewards\"\n    ],\n    \"properties\": {\n        \"equivocators\": {\n            \"description\": \"The set of equivocators.\",\n            \"type\": \"array\",\n            \"items\": {\n                \"$ref\": \"#/components/schemas/PublicKey\"\n            }\n        },\n        \"rewards\": {\n            \"description\": \"Rewards for finalization of earlier blocks.\",\n            \"allOf\": [\n                {\n                    \"$ref\": \"#/components/schemas/Array_of_EraReward\"\n                }\n            ]\n        },\n        \"inactive_validators\": {\n            \"description\": \"Validators that haven't produced any unit during the era.\",\n            \"type\": \"array\",\n            \"items\": {\n                \"$ref\": \"#/components/schemas/PublicKey\"\n            }\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Deploying a Wasm Contract with Casper-Client in Rust\nDESCRIPTION: Creates and submits a deploy to the blockchain, installing a compiled Wasm contract on the specified chain. Requires node address, chain name, secret key for signing, payment amount in motes, and path to the Wasm contract. Outputs details of the submitted deploy; errors if payment is insufficient or paths are invalid.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/docs/resources/beginner/counter/commands.md#2025-04-22_snippet_3\n\nLANGUAGE: rust\nCODE:\n```\ncasper-client put-deploy \\\n    --node-address [NODE_SERVER_ADDRESS] \\\n    --chain-name casper-net-1 \\\n    --secret-key [KEY_PATH]/secret_key.pem \\\n    --payment-amount [PAYMENT_AMOUNT_IN_MOTES] \\\n    --session-path [CONTRACT_PATH]/counter-v1.wasm\n```\n\n----------------------------------------\n\nTITLE: Retrieving Account Balance Example with Casper .NET SDK\nDESCRIPTION: A complete C# program that demonstrates how to connect to a Casper testnet node and retrieve an account's main purse balance using the public key. It shows error handling for RPC client exceptions.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/versioned_docs/version-2.0.0/developers/dapps/sdk/csharp-sdk.md#2025-04-22_snippet_3\n\nLANGUAGE: C#\nCODE:\n```\nusing System;\nusing System.Threading.Tasks;\nusing Casper.Network.SDK;\nusing Casper.Network.SDK.JsonRpc;\nusing Casper.Network.SDK.Types;\n\nnamespace Casper.NET.SDK.Examples\n{\n    public class GetAccountBalance\n    {\n        public static async Task Main(string[] args)\n        {\n            string nodeAddress = \"http://testnet-node.make.services:7777\";\n\n            var hex = \"0203914289b334f57366541099a52156b149436fdb0422b3c48fe4115d0578abf690\";\n            var publicKey = PublicKey.FromHexString(hex);\n\n            try\n            {\n                var casperSdk = new NetCasperClient(nodeAddress);\n\n                // Get the balance using the account public key\n                //\n                var rpcResponse = await casperSdk.GetAccountBalance(publicKey);\n                Console.WriteLine(\"Public Key Balance: \" + rpcResponse.Parse().BalanceValue);\n            }\n            catch (RpcClientException e)\n            {\n                Console.WriteLine(\"ERROR:\\n\" + e.RpcError.Message);\n            }\n            catch (Exception e)\n            {\n                Console.WriteLine(e);\n            }\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Generating Casper Account Keys\nDESCRIPTION: JavaScript code to generate Ed25519 key pairs for Casper accounts and save them as PEM files. Creates public and private keys for signing deploys.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/versioned_docs/version-1.5.X/developers/dapps/sdk/script-sdk.md#2025-04-22_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nconst fs = require(\"fs\");\nconst path = require(\"path\");\nconst { Keys } = require(\"casper-js-sdk\");\n\nconst createAccountKeys = () => {\n    // Generating keys\n    const edKeyPair = Keys.Ed25519.new();\n    const { publicKey, privateKey } = edKeyPair;\n\n    // Create a hexadecimal representation of the public key\n    const accountAddress = publicKey.toHex();\n\n    // Get the account hash (Uint8Array) from the public key\n    const accountHash = publicKey.toAccountHash();\n\n    // Store keys as PEM files\n    const publicKeyInPem = edKeyPair.exportPublicKeyInPem();\n    const privateKeyInPem = edKeyPair.exportPrivateKeyInPem();\n\n    const folder = path.join(\"./\", \"casper_keys\");\n\n    if (!fs.existsSync(folder)) {\n        const tempDir = fs.mkdirSync(folder);\n    }\n\n    fs.writeFileSync(folder + \"/\" + accountAddress + \"_public.pem\", publicKeyInPem);\n    fs.writeFileSync(folder + \"/\" + accountAddress + \"_private.pem\", privateKeyInPem);\n\n    return accountAddress;\n};\n\nconst newAccountAddress = createAccountKeys();\n```\n\n----------------------------------------\n\nTITLE: Implementing Fund Transfer Between Purses\nDESCRIPTION: Python script demonstrating how to transfer funds between purses on a Casper network. Includes client setup, key management, and deploy creation.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/docs/developers/dapps/sdk/python-sdk.md#2025-04-22_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nimport os\nimport pathlib\nimport random\nimport typing\n\nimport pycspr\nfrom pycspr.client import NodeClient\nfrom pycspr.client import NodeConnectionInfo\nfrom pycspr.crypto import KeyAlgorithm\nfrom pycspr.types import PrivateKey\nfrom pycspr.types import Deploy\nfrom pycspr.types import PublicKey\n\n# path to cp1 secret key - defaults to NCTL user 1.\npath_to_cp1_secret_key = pathlib.Path(os.getenv(\"NCTL\")) / \"assets\" / \"net-1\" / \"users\" / \"user-1\" / \"secret_key.pem\"\n\n# type of cp1 secret key - defaults to ED25519.\ntype_of_cp1_secret_key = KeyAlgorithm.ED25519.name,\n\n# path to cp2 account key - defaults to NCTL user 2.\npath_to_cp2_account_key = pathlib.Path(os.getenv(\"NCTL\")) / \"assets\" / \"net-1\" / \"users\" / \"user-2\" / \"public_key_hex\"\n\n# name of target chain - defaults to NCTL chain.\nchain_name = \"casper-net-1\"\n\n# host address of target node - defaults to NCTL node 1.\nnode_host = \"localhost\"\n\n# Node API JSON-RPC port - defaults to 11101 @ NCTL node 1.\nnode_port_rpc = 11101\n\ndef _main(node_host, node_port_rpc, path_to_cp1_secret_key, type_of_cp1_secret_key,path_to_cp2_account_key, chain_name):\n    \"\"\"Main entry point.\n    :param args: Parsed command line arguments.\n    \"\"\"\n    # Set node client.\n    client = _get_client(node_host, node_port_rpc)\n\n    # Set counter-parties.\n    cp1, cp2 = _get_counter_parties(path_to_cp1_secret_key, type_of_cp1_secret_key,path_to_cp2_account_key)\n\n    # Set deploy.\n    deploy: Deploy = _get_deploy(chain_name, cp1, cp2)\n\n    # Approve deploy.\n    deploy.approve(cp1)\n\n    # Dispatch deploy to a node.\n    client.deploys.send(deploy)\n\n    #If deploy is successful send the indication\n    print(f\"Deploy dispatched to node [{node_host}]: {deploy.hash.hex()}\")\n\n\ndef _get_client(node_host, node_port_rpc) -> NodeClient:\n    \"\"\"Returns a pycspr client instance.\n    \"\"\"\n    return NodeClient(NodeConnectionInfo(\n        host=node_host,\n        port_rpc=node_port_rpc,\n    ))\n\n\ndef _get_counter_parties(path_to_cp1_secret_key, type_of_cp1_secret_key,path_to_cp2_account_key) -> typing.Tuple[PrivateKey, PublicKey]:\n    \"\"\"Returns the 2 counter-parties participating in the transfer.\n    \"\"\"\n    cp1 = pycspr.parse_private_key(\n        path_to_cp1_secret_key,\n        type_of_cp1_secret_key,\n        )\n    cp2 = pycspr.parse_public_key(\n        path_to_cp2_account_key\n        )    \n\n    return cp1, cp2\n\n\ndef _get_deploy(chain_name, cp1: PrivateKey, cp2: PublicKey) -> Deploy:\n    \"\"\"Returns transfer deploy to be dispatched to a node.\n    \"\"\"\n    # Set standard deploy parameters.\n    deploy_params = pycspr.create_deploy_parameters(\n        account = cp1,\n        chain_name = chain_name\n        )\n\n    # Set deploy.\n    deploy = pycspr.create_native_transfer(\n        params = deploy_params,\n        amount = int(2.5e9),\n        target = cp2.account_hash,\n        correlation_id = random.randint(1, 1e6)\n        )\n\n    return deploy\n\n\n# Entry point.\nif __name__ == '__main__':\n    _main(node_host, node_port_rpc, path_to_cp1_secret_key, type_of_cp1_secret_key, path_to_cp2_account_key, chain_name)\n```\n\n----------------------------------------\n\nTITLE: Transfer to Public Key using Session Code (Rust)\nDESCRIPTION: This function initiates a transfer to an account identified by a PublicKey using system::transfer_to_public_key. It retrieves required parameters from runtime arguments and performs the operation, reverting if unsuccessful. Inputs: ARG_TARGET (PublicKey) and ARG_AMOUNT (U512). No return value. dependencies: casper-contract and casper-types, expects valid public key and balance.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/versioned_docs/version-1.5.X/developers/writing-onchain-code/writing-session-code.md#2025-04-22_snippet_6\n\nLANGUAGE: rust\nCODE:\n```\n#[no_mangle]\npub extern \"C\" fn call() {\n    let account_hash: PublicKey = runtime::get_named_arg(ARG_TARGET);\n    let transfer_amount: U512 = runtime::get_named_arg(ARG_AMOUNT);\n    system::transfer_to_public_key(account_hash, transfer_amount, None).unwrap_or_revert();\n}\n```\n\n----------------------------------------\n\nTITLE: Initializing CEP-18 Fungible Token Contract in Rust\nDESCRIPTION: This Rust function serves as the main contract entry point and is marked as a Casper deployable contract. It retrieves initialization parameters (name, symbol, decimals, total_supply) from deploy runtime arguments and uses them to install a new CEP-18 fungible token via the CEP18::install method. Requires the casper-contract and cep18 crates, and expects deployment arguments named NAME_RUNTIME_ARG_NAME, SYMBOL_RUNTIME_ARG_NAME, DECIMALS_RUNTIME_ARG_NAME, and TOTAL_SUPPLY_RUNTIME_ARG_NAME. On failure, the call will revert. All parameters are required and must conform to expected types.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/docs/resources/tokens/cep18/full-tutorial.md#2025-04-22_snippet_5\n\nLANGUAGE: rust\nCODE:\n```\n\n#[no_mangle]\nfn call() {\n  let name: String = runtime::get_named_arg(NAME_RUNTIME_ARG_NAME);\n  let symbol: String = runtime::get_named_arg(SYMBOL_RUNTIME_ARG_NAME);\n  let decimals = runtime::get_named_arg(DECIMALS_RUNTIME_ARG_NAME);\n  let total_supply = runtime::get_named_arg(TOTAL_SUPPLY_RUNTIME_ARG_NAME);\n\n  let _token = CEP18::install(name, symbol, decimals, total_supply).unwrap_or_revert();\n}\n\n```\n\n----------------------------------------\n\nTITLE: Defining Transaction Scheduling Modes Schema in JSON\nDESCRIPTION: This JSON Schema defines the structure for specifying a transaction's scheduling mode. It uses `oneOf` to allow three options: a simple 'Standard' string for immediate scheduling, an object with 'FutureEra' referencing an `EraId` schema for era-based scheduling, or an object with 'FutureTimestamp' referencing a `Timestamp` schema for time-based scheduling. It requires specific properties for the future scheduling options and disallows additional properties.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/condor/jsonrpc-comp/rpc-2.0/schema/TransactionScheduling.json.md#2025-04-22_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"description\": \"Scheduling mode of a Transaction.\",\n    \"oneOf\": [\n        {\n            \"description\": \"No special scheduling applied.\",\n            \"type\": \"string\",\n            \"enum\": [\n                \"Standard\"\n            ]\n        },\n        {\n            \"description\": \"Execution should be scheduled for the specified era.\",\n            \"type\": \"object\",\n            \"required\": [\n                \"FutureEra\"\n            ],\n            \"properties\": {\n                \"FutureEra\": {\n                    \"$ref\": \"#/components/schemas/EraId\"\n                }\n            },\n            \"additionalProperties\": false\n        },\n        {\n            \"description\": \"Execution should be scheduled for the specified timestamp or later.\",\n            \"type\": \"object\",\n            \"required\": [\n                \"FutureTimestamp\"\n            ],\n            \"properties\": {\n                \"FutureTimestamp\": {\n                    \"$ref\": \"#/components/schemas/Timestamp\"\n                }\n            },\n            \"additionalProperties\": false\n        }\n    ]\n} \n```\n\n----------------------------------------\n\nTITLE: Installing a Casper Contract using ExecuteRequestBuilder in Rust\nDESCRIPTION: This code demonstrates building and executing a deploy request to install a smart contract in a test environment using the 'ExecuteRequestBuilder'. It specifies the sender account, the contract Wasm file, and initializes with empty runtime arguments. After execution, the test expects the deploy to succeed, simulating standard installation as on a Casper node.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/versioned_docs/version-1.5.X/developers/writing-onchain-code/testing-contracts.md#2025-04-22_snippet_6\n\nLANGUAGE: rust\nCODE:\n```\n    // Install the contract.\n    let contract_v1_installation_request = ExecuteRequestBuilder::standard(\n        *DEFAULT_ACCOUNT_ADDR,\n        COUNTER_V1_WASM,\n        runtime_args! {},\n    )\n    .build();\n\n    builder\n        .exec(contract_v1_installation_request)\n        .expect_success()\n        .commit();\n```\n\n----------------------------------------\n\nTITLE: Staking Tokens with a Validator in Casper Network Using Python\nDESCRIPTION: Complete example of how to stake tokens with a validator on a Casper network. This script sets up a connection to a node, defines the validator, creates a staking deploy, approves it, and sends it to the network.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/versioned_docs/version-2.0.0/developers/dapps/sdk/python-sdk.md#2025-04-22_snippet_3\n\nLANGUAGE: python\nCODE:\n```\n\n    import os\n    import pathlib\n\n    import pycspr\n    from pycspr.client import NodeClient\n    from pycspr.client import NodeConnectionInfo\n    from pycspr.crypto import KeyAlgorithm\n    from pycspr.types import Deploy\n    from pycspr.types import PrivateKey\n\n    # path to cp1 secret key - defaults to NCTL user 1.\n    path_to_validator_secret_key = pathlib.Path(os.getenv(\"NCTL\")) / \"assets\" / \"net-1\" / \"users\" / \"user-1\" / \"secret_key.pem\"\n\n    # type of cp1 secret key - defaults to ED25519.\n    type_of_validator_secret_key = KeyAlgorithm.ED25519.name\n\n    # path to session code wasm binary - defaults to NCTL bin/eco/add_bid.wasm.\n    path_to_wasm = pathlib.Path(os.getenv(\"NCTL\")) / \"assets\" / \"net-1\" / \"bin\" / \"auction\" / \"add_bid.wasm\"\n\n    # amount to stake, i.e. bond, into the network.\n    amount = int(2.5e9)\n\n    # amount to charge delegators for service provision.\n    delegation_rate = 2\n\n    # name of target chain - defaults to NCTL chain.\n    chain_name = \"casper-net-1\"\n\n    # host address of target node - defaults to NCTL node 1.\n    node_host = \"localhost\"\n\n    # Node API JSON-RPC port - defaults to 11101 @ NCTL node 1.\n    node_port_rpc = 11101\n\n    def _main(node_host, node_port_rpc, path_to_validator_secret_key, type_of_validator_secret_key, chain_name, amount, delegation_rate, path_to_wasm):\n        \"\"\"Main entry point.\n        :param args: Parsed command line arguments.\n        \"\"\"\n        # Set node client.\n        client: NodeClient = _get_client(node_host, node_port_rpc)\n\n        # Set validator key.\n        validator: PrivateKey = pycspr.parse_private_key(\n            path_to_validator_secret_key,\n            type_of_validator_secret_key,\n            )\n\n        # Set deploy.\n        deploy: Deploy = _get_deploy(validator, chain_name, amount, delegation_rate, path_to_wasm)\n\n        # Approve deploy.\n        deploy.approve(validator)\n\n        # Dispatch deploy to a node.\n        client.deploys.send(deploy)\n\n        print(f\"Deploy dispatched to node [{node_host}]: {deploy.hash.hex()}\")\n\n\n    def _get_client(node_host, node_port_rpc) -> NodeClient:\n        \"\"\"Returns a pycspr client instance.\n        \"\"\"\n        return NodeClient(NodeConnectionInfo(\n            host = node_host,\n            port_rpc = node_port_rpc,\n        ))\n\n\n    def _get_deploy(validator: PrivateKey, chain_name, amount, delegation_rate, path_to_wasm) -> Deploy:\n        \"\"\"Returns delegation deploy to be dispatched to a node.\n        \"\"\"\n        # Set standard deploy parameters.\n        deploy_params = pycspr.create_deploy_parameters(\n            account = validator,\n            chain_name = chain_name\n            )\n\n        # Set deploy.\n        deploy = pycspr.create_validator_auction_bid(\n            params = deploy_params,\n            amount = amount,\n            delegation_rate = delegation_rate,\n            public_key = validator.as_public_key(),\n            path_to_wasm = path_to_wasm\n            )\n\n        return deploy\n\n\n    # Entry point.\n    if __name__ == '__main__':\n        _main(node_host, node_port_rpc, path_to_validator_secret_key, type_of_validator_secret_key, chain_name, amount, delegation_rate, path_to_wasm)\n```\n\n----------------------------------------\n\nTITLE: Verifying Incremented Contract State Value in Casper Test - Rust\nDESCRIPTION: Retrieves and checks a specific value from the smart contract state after execution (for example, the incremented value of a counter). Makes use of the 'query' API to fetch values, expect/unwrap methods to access deeply nested result types, and assert_eq! to validate the outcome. The pattern ensures contract operations have their intended effect and that values in global state update as expected.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/docs/developers/writing-onchain-code/testing-session-code.md#2025-04-22_snippet_14\n\nLANGUAGE: rust\nCODE:\n```\n    let incremented_count = builder\n        .query(None, count_key, &[])\n        .expect(\"should be stored value.\")\n        .as_cl_value()\n        .expect(\"should be cl value.\")\n        .clone()\n        .into_t::<i32>()\n        .expect(\"should be i32.\");\n\n    assert_eq!(incremented_count, 1);\n```\n\n----------------------------------------\n\nTITLE: Installing Version 1 Counter Contract and Verifying Entry Points in Rust\nDESCRIPTION: This test function initializes the in-memory test builder, runs genesis using system contract definitions, and prepares to validate the available entry points of the installed contract. Critical for establishing test state and system contract dependencies; this layout is a starting point, with additional logic appended to verify runtime behavior post-installation.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/versioned_docs/version-1.5.X/developers/writing-onchain-code/testing-contracts.md#2025-04-22_snippet_5\n\nLANGUAGE: rust\nCODE:\n```\n    #[test]\n    /// Install version 1 of the counter contract and check its available entry points. ...\n    fn install_version1_and_check_entry_points() {\n        let mut builder = InMemoryWasmTestBuilder::default();\n        builder.run_genesis(&PRODUCTION_RUN_GENESIS_REQUEST).commit();\n\n        // See the repository for the full function.\n    }\n```\n\n----------------------------------------\n\nTITLE: Implementing a Custom Factory Entry Point in Rust\nDESCRIPTION: This Rust function `contract_factory` serves as a public entry point for a Casper smart contract. It retrieves runtime arguments for `ARG_NAME` (String) and `ARG_INITIAL_VALUE` (U512) and passes them to the `installer` function to create a new counter contract instance with the specified name and initial value. The `#[no_mangle]` and `extern \"C\"` attributes ensure it's exposed correctly for the Wasm runtime.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/docs/developers/writing-onchain-code/factory-pattern.md#2025-04-22_snippet_2\n\nLANGUAGE: rust\nCODE:\n```\n#[no_mangle]\npub extern \"C\" fn contract_factory() {\n    let name: String = runtime::get_named_arg(ARG_NAME);\n    let initial_value: U512 = runtime::get_named_arg(ARG_INITIAL_VALUE);\n    installer(name, initial_value);\n}\n\n```\n\n----------------------------------------\n\nTITLE: Accessing Call Stack Information in Casper Contracts\nDESCRIPTION: Code examples showing how to access caller information and call stack data in Casper smart contracts using the contract_api::runtime functions. The get_caller function retrieves the account that initiated the transaction, while get_call_stack provides access to the full call stack.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/versioned_docs/version-2.0.0/concepts/callstack.md#2025-04-22_snippet_0\n\nLANGUAGE: rust\nCODE:\n```\ncontract_api::runtime::get_caller()\n```\n\nLANGUAGE: rust\nCODE:\n```\ncontract_api::runtime::get_call_stack()\n```\n\n----------------------------------------\n\nTITLE: Executing Direct Token Transfer with Casper CLI\nDESCRIPTION: This command allows transferring CSPR tokens from one account to another using the casper-client CLI. It requires specifying the transfer amount in Motes (where 1 CSPR = 1,000,000,000 Motes), the sender's secret key, target account, and other parameters.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/versioned_docs/version-2.0.0/developers/cli/transfers/direct-token-transfer.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ncasper-client transfer \\\n--id <ID> \\\n--transfer-id <TRANSFER_ID> \\\n--node-address [NODE_SERVER_ADDRESS]  \\\n--amount [AMOUNT_TO_TRANSFER] \\\n--secret-key [KEY_PATH]/secret_key.pem \\\n--chain-name [CHAIN_NAME] \\\n--target-account [TARGET_PUBLIC_KEY_HEX] \\\n--payment-amount [PAYMENT_AMOUNT_IN_MOTES]\n```\n\n----------------------------------------\n\nTITLE: Calling a Contract and Using Return Values in Casper Network Session Code\nDESCRIPTION: Session code that calls a contract's entry point using runtime::call_contract and uses the returned value. The code retrieves a donation purse URef from the contract and transfers funds from the caller's account to the donation purse.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/versioned_docs/version-2.0.0/resources/advanced/return-values-tutorial.md#2025-04-22_snippet_1\n\nLANGUAGE: rust\nCODE:\n```\n#[no_mangle]\npub extern \"C\" fn call() {\n    let fundraiser_contract_hash: ContractHash = runtime::get_named_arg(FUNDRAISER_CONTRACT_HASH);\n    let donating_account_key: Key = runtime::get_named_arg(DONATING_ACCOUNT_KEY);\n    let donation_amount: U512 = runtime::get_named_arg(DONATION_AMOUNT);\n\n    let donating_purse_uref: URef = runtime::call_contract(\n        fundraiser_contract_hash,\n        ENTRY_POINT_DONATE,\n        runtime_args! {\n            DONATING_ACCOUNT_KEY => donating_account_key\n        },\n    );\n    system::transfer_from_purse_to_purse(\n        account::get_main_purse(),\n        donating_purse_uref,\n        donation_amount,\n        None\n    )\n        .unwrap_or_revert()\n}\n```\n\n----------------------------------------\n\nTITLE: Deploying a Contract using casper-client put-deploy - Bash\nDESCRIPTION: This snippet demonstrates sending a new deploy to a Casper node using the casper-client put-deploy command. It specifies node address, chain, secret key path, payment amount, WASM path, and session arguments. Required prerequisites include casper-client CLI installed, a valid funded account, and a compiled contract WASM file. The args such as --session-arg should be adapted as needed. Output will be a deploy response JSON containing a deploy hash.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/versioned_docs/version-2.0.0/resources/advanced/cross-contract.md#2025-04-22_snippet_10\n\nLANGUAGE: bash\nCODE:\n```\ncasper-client put-deploy \\\\\\n    --node-address http://136.243.187.84:7777 \\\\\\n    --chain-name casper-test \\\\\\n    --secret-key ./keys/secret_key.pem \\\\\\n    --payment-amount 20000000000 \\\\\\n    --session-path ./contract/target/wasm32-unknown-unknown/release/contract.wasm \\\\\\n    --session-arg \"message:string='hello world'\"\\n\n```\n\n----------------------------------------\n\nTITLE: Increasing CEP-18 Allowance using Casper Client - Bash (No Comments)\nDESCRIPTION: This bash command enables an account to increase the spending allowance of another within a CEP-18 contract without inline comments. It expects values for session-package-name, chain name, payment amount, and the session entry point increase_allowance, as well as spender and amount session arguments. Used for granting additional token spend rights to an approved account.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/versioned_docs/version-2.0.0/resources/tokens/cep18/transfer.md#2025-04-22_snippet_17\n\nLANGUAGE: bash\nCODE:\n```\ncasper-client put-deploy -n http://<NODE IP>:<PORT> \\\n--secret-key ~/casper/demo/user_a/secret_key.pem \\\n--session-package-name \"cep18_contract_package_CEP18\" \\\n--session-entry-point \"increase_allowance\" \\\n--session-arg \"spender:key='account-hash-683f53f56926f54ef9584b07585b025c68415dc05f7b2e56749153574b83d5cd'\" \\\n--session-arg \"amount:U256='10'\" \\\n--chain-name <CHAIN NAME> \\\n--payment-amount 1000000000\n```\n\n----------------------------------------\n\nTITLE: Minting a CEP-78 NFT Token\nDESCRIPTION: Example of minting a new NFT token using the CEP-78 JavaScript client. The code creates a deploy that specifies the token owner and metadata properties, then sends it to the network for processing.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/versioned_docs/version-2.0.0/resources/tokens/cep78/js-tutorial.md#2025-04-22_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nconst mintDeploy = cc.mint(\n    {\n      owner: FAUCET_KEYS.publicKey,\n      meta: {\n        color: \"Blue\",\n        size: \"Medium\",\n        material: \"Aluminum\",\n        condition: \"Used\",\n      },\n    },\n    { useSessionCode: true },\n    \"2000000000\",\n    FAUCET_KEYS.publicKey,\n    [FAUCET_KEYS]\n  );\n\n  const mintDeployHash = await mintDeploy.send(\"http://localhost:11101/rpc\");\n```\n\n----------------------------------------\n\nTITLE: Implementing Smart Contract Call Function\nDESCRIPTION: JavaScript function for building and sending a deploy to update messages on the Casper Network, including wallet interaction and error handling.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/versioned_docs/version-2.0.0/developers/dapps/template-frontend.md#2025-04-22_snippet_16\n\nLANGUAGE: javascript\nCODE:\n```\nconst NODE_URL = \"http://65.108.127.242:7777/rpc\";\nconst NETWORK_NAME = \"casper-test\"; // \"casper\" for mainnet\nconst CONTRACT_HASH = \"hash-75143aa708275b7dead20ac2cc06c1c3eccff4ffcf1eb9aebb8cce7c35cea041\";\n\nconst updateMessage = (props, message) => {\n    const casperClient = new CasperClient(NODE_URL);\n    const contract = new Contracts.Contract(casperClient);\n    contract.setContractHash(CONTRACT_HASH);\n    const runtimeArguments = RuntimeArgs.fromMap({\n        \"message\": CLValueBuilder.string(message)\n    });\n    const deploy = contract.callEntrypoint(\n        \"update_message\",\n        runtimeArguments,\n        CLPublicKey.fromHex(props.publicKey),\n        NETWORK_NAME,\n        \"1000000000\", // 1 CSPR (10^9 Motes)\n    );\n    const deployJSON = DeployUtil.deployToJson(deploy);\n    provider.sign(JSON.stringify(deployJSON), props.publicKey).then((signedDeploy) => { // Initiates sign request\n        axios.post(\"/sendDeploy\", signedDeploy, {\n            headers: {\n                'Content-Type': 'application/json'\n            }\n        }).then((response) => {\n            alert(response.data);\n        }).catch((error) => {\n            console.error(error.message);\n        });\n    }).catch((error) => {\n        console.error(error.message);\n    });\n}\n```\n\n----------------------------------------\n\nTITLE: Defining and Implementing Update Entry Point in Casper Contract with Rust\nDESCRIPTION: This final, complete contract implements a public 'update_msg' entry point for updating the stored message, as well as the standard 'call' entry point for initializing contract state. It demonstrates fetching arguments, storing values in named keys, preparing entry point metadata, and persisting the contract to the chain. Requires 'casper-contract' and 'casper-types' dependencies, builds for a no_std/wasm32 target, and entry points' names and metadata must be consistent for correct operation.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/docs/resources/advanced/cross-contract.md#2025-04-22_snippet_5\n\nLANGUAGE: Rust\nCODE:\n```\n#![no_std]\\n#![no_main]\\n\\n#[cfg(not(target_arch = \\\"wasm32\\\"))]\\ncompile_error!(\\\"target arch should be wasm32: compile with '--target wasm32-unknown-unknown'\\\");\\n\\n// We need to explicitly import the std alloc crate and `alloc::string::String` as we are in a\\n// `no_std` environment.\\nextern crate alloc;\\n\\n// The elementary types \\nuse alloc::string::String;\\nuse alloc::vec::Vec;\\nuse alloc::collections::BTreeMap;\\nuse crate::alloc::string::ToString;\\n\\n\\n// Casper crates\\nuse casper_types::{Key, CLType, Parameter, EntryPoint, EntryPoints, EntryPointType, EntryPointAccess};\\n\\nuse casper_contract::{\\n    contract_api::{runtime, storage},\\n    unwrap_or_revert::UnwrapOrRevert,\\n};\\n\\n#[no_mangle]\\npub extern \\\"C\\\" fn update_msg() {\\n\\n    let value: String = runtime::get_named_arg(\\\"message\\\");\\n    // Get the uref of the message stored in global state\\n    let uref = runtime::get_key(\\\"message\\\").unwrap_or_revert().into_uref().unwrap_or_revert();\\n    // Write the message to global state\\n    storage::write(uref, String::from(value));\\n}\\n\\n\\n#[no_mangle]\\npub extern \\\"C\\\" fn call() {\\n    // Get the value of a passed parameter with the key \\\"message\\\"\\n    let value: String = runtime::get_named_arg(\\\"message\\\");\\n    // The value will be wraped in a URef\\n    let value_ref = storage::new_uref(value);\\n    // Creating the new set of named keys\\n    // The keys are a Map of Key/Value \\n    let mut named_keys: BTreeMap<String, Key> = BTreeMap::new();\\n    // Insert the new value into the named keys\\n    named_keys.insert(String::from(\\\"message\\\"),value_ref.into()); // use into to wrap the value to the key\\n    // Create a new vector \\n    let mut vec = Vec::new();\\n    vec.push(Parameter::new(\\\"message\\\", CLType::String));\\n    // Create an Entry Point Object\\n    let mut entry_points = EntryPoints::new();\\n\\n    // Define the metadata for the entry point `update_msg`\\n    entry_points.add_entry_point(EntryPoint::new(\\n        \\\"update_msg\\\",\\n        vec,\\n        CLType::Unit,\\n        EntryPointAccess::Public,\\n        EntryPointType::Contract\\n    ));\\n\\n    // The contract is stored in the global state\\n    let (stored_contract_hash, _contract_version) = storage::new_contract(\\n        entry_points,                                       // entry points metadata\\n        Some(named_keys),                                   // named keys \\n        Some(\\\"Hello_world_package_name\\\".to_string()),       // package name\\n        Some(\\\"Hello_world_access_uref\\\".to_string())         // access uref\\n    );\\n\\n    // To access from the account - named keys of the account\\n    runtime::put_key(\\\"hello_world_contract\\\", stored_contract_hash.into());\\n}\\n\n```\n\n----------------------------------------\n\nTITLE: Building Deploy for Contract Installation Test (Rust)\nDESCRIPTION: This Rust test code snippet demonstrates building a `DeployItem` for installing the contract WASM (`CONTRACT_WASM`). It uses `DeployItemBuilder`, specifies standard payment, sets the authorization key to the default account address (`DEFAULT_ACCOUNT_ADDR`), sets the deploy's execution address also to the default account, and includes the session code path and arguments. This setup simulates a valid contract installation authorized by the account's primary key.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/versioned_docs/version-1.5.X/resources/advanced/list-auth-keys-tutorial.md#2025-04-22_snippet_6\n\nLANGUAGE: rust\nCODE:\n```\n```rust\nlet session_code = PathBuf::from(CONTRACT_WASM);\nlet session_args = RuntimeArgs::new();\n\nlet deploy_item = DeployItemBuilder::new()\n    .with_empty_payment_bytes(runtime_args! {ARG_AMOUNT => *DEFAULT_PAYMENT})\n    .with_authorization_keys(&[*DEFAULT_ACCOUNT_ADDR])\n    .with_address(*DEFAULT_ACCOUNT_ADDR)\n    .with_session_code(session_code, session_args)\n    .build();\n\n```\n```\n\n----------------------------------------\n\nTITLE: Listening to Event Stream in JavaScript\nDESCRIPTION: Sets up an event listener using the Casper JavaScript SDK to consume the event stream from a Casper node.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/docs/developers/dapps/monitor-and-consume-events.md#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconst { EventStream, EventName } = require(\"casper-js-sdk\")\n\nconst es = new EventStream(\"http://NODE_ADDRESS:PORT/events/\")\nes.start()\nes.subscribe(EventName.EVENT_NAME, eventHandler)\n\nconst eventHandler = (event) => {\n    console.log(event)\n}\n```\n\n----------------------------------------\n\nTITLE: Unit Test for CEP-18 Token Properties in Rust\nDESCRIPTION: Unit test that verifies the queryable properties of a CEP-18 token contract including name, symbol, decimals, total supply, and balance checks.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/versioned_docs/version-1.5.X/resources/tokens/cep18/tests.md#2025-04-22_snippet_6\n\nLANGUAGE: rust\nCODE:\n```\n#[test]\nfn should_have_queryable_properties() {\n    let (mut builder, TestContext { cep18_token, .. }) = setup();\n\n    let name: String = builder.get_value(cep18_token, NAME_KEY);\n    assert_eq!(name, TOKEN_NAME);\n\n    let symbol: String = builder.get_value(cep18_token, SYMBOL_KEY);\n    assert_eq!(symbol, TOKEN_SYMBOL);\n\n    let decimals: u8 = builder.get_value(cep18_token, DECIMALS_KEY);\n    assert_eq!(decimals, TOKEN_DECIMALS);\n\n    let total_supply: U256 = builder.get_value(cep18_token, TOTAL_SUPPLY_KEY);\n    assert_eq!(total_supply, U256::from(TOKEN_TOTAL_SUPPLY));\n\n    let owner_key = Key::Account(*DEFAULT_ACCOUNT_ADDR);\n\n    let owner_balance = cep18_check_balance_of(&mut builder, &cep18_token, owner_key);\n    assert_eq!(owner_balance, total_supply);\n\n    let contract_balance =\n        cep18_check_balance_of(&mut builder, &cep18_token, Key::Hash(cep18_token.value()));\n    assert_eq!(contract_balance, U256::zero());\n\n    // Ensures that Account and Contract ownership is respected and we're not keying ownership under\n    // the raw bytes regardless of variant.\n    let inverted_owner_key = invert_cep18_address(owner_key);\n    let inverted_owner_balance =\n        cep18_check_balance_of(&mut builder, &cep18_token, inverted_owner_key);\n    assert_eq!(inverted_owner_balance, U256::zero());\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing CEP-18 Token Transfer Test Helper in Rust\nDESCRIPTION: Helper function that tests the CEP-18 token transfer functionality between accounts. It verifies initial balances, executes transfers, and validates resulting balances after transfers.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/versioned_docs/version-1.5.X/resources/tokens/cep18/tests.md#2025-04-22_snippet_5\n\nLANGUAGE: rust\nCODE:\n```\npub(crate) fn test_cep18_transfer(\n    builder: &mut InMemoryWasmTestBuilder,\n    test_context: &TestContext,\n    sender1: Key,\n    recipient1: Key,\n    sender2: Key,\n    recipient2: Key) {\n    let TestContext { cep18_token, .. } = test_context;\n\n    // Defining the amount to be transferred to each account.\n\n    let transfer_amount_1 = U256::from(TRANSFER_AMOUNT_1);\n    let transfer_amount_2 = U256::from(TRANSFER_AMOUNT_2);\n\n    // Checking the pre-existing balances of the default address and the two receiving addresses.\n\n    let sender_balance_before = cep18_check_balance_of(builder, cep18_token, sender1);\n    assert_ne!(sender_balance_before, U256::zero());\n\n    let account_1_balance_before = cep18_check_balance_of(builder, cep18_token, recipient1);\n    assert_eq!(account_1_balance_before, U256::zero());\n\n    let account_2_balance_before = cep18_check_balance_of(builder, cep18_token, recipient1);\n    assert_eq!(account_2_balance_before, U256::zero());\n\n    // Creating the first transfer request.\n\n    let token_transfer_request_1 =\n        make_cep18_transfer_request(sender1, cep18_token, recipient1, transfer_amount_1);\n\n    builder\n        .exec(token_transfer_request_1)\n        .expect_success()\n        .commit();\n\n    // Checking the prior balance against the new balance to ensure the transfer occurred correctly.\n\n    let account_1_balance_after = cep18_check_balance_of(builder, cep18_token, recipient1);\n    assert_eq!(account_1_balance_after, transfer_amount_1);\n    let account_1_balance_before = account_1_balance_after;\n\n    let sender_balance_after = cep18_check_balance_of(builder, cep18_token, sender1);\n    assert_eq!(\n        sender_balance_after,\n        sender_balance_before - transfer_amount_1\n    );\n    let sender_balance_before = sender_balance_after;\n\n    // Creating the second transfer request.\n\n    let token_transfer_request_2 =\n        make_cep18_transfer_request(sender2, cep18_token, recipient2, transfer_amount_2);\n\n    builder\n        .exec(token_transfer_request_2)\n        .expect_success()\n        .commit();\n\n    // Checking prior balances against new balances.\n\n    let sender_balance_after = cep18_check_balance_of(builder, cep18_token, sender1);\n    assert_eq!(sender_balance_after, sender_balance_before);\n\n    let account_1_balance_after = cep18_check_balance_of(builder, cep18_token, recipient1);\n    assert!(account_1_balance_after < account_1_balance_before);\n    assert_eq!(\n        account_1_balance_after,\n        transfer_amount_1 - transfer_amount_2\n    );\n\n    let account_2_balance_after = cep18_check_balance_of(builder, cep18_token, recipient2);\n    assert_eq!(account_2_balance_after, transfer_amount_2);\n}\n```\n\n----------------------------------------\n\nTITLE: Interpreting Casper Deploy Query Results in JSON\nDESCRIPTION: This JSON snippet represents a possible response returned from the Casper node after querying for a deploy. It includes nested structures such as deployment approvals, headers (account, chain, gas, etc.), session and payment details, and a comprehensive execution_results array with transformation operations. Users should expect large base16-encoded byte fields and must parse or visualize the structure for detailed network or contract activity. Inputs are the deploy hash; outputs are the full status and execution effect of the deploy.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/versioned_docs/version-1.5.X/resources/tokens/cep18/full-tutorial.md#2025-04-22_snippet_15\n\nLANGUAGE: json\nCODE:\n```\n{\n  {\n  \"id\": -870982079597140956,\n  \"jsonrpc\": \"2.0\",\n  \"result\": {\n    \"api_version\": \"1.4.3\",\n    \"deploy\": {\n      \"approvals\": [\n        {\n          \"signature\": \"[130 hex chars]\",\n          \"signer\": \"017B8CE645c728.......................\"\n        }\n      ],\n      \"hash\": \"F9D4C649Fa78Da07E.......................\",\n      \"header\": {\n        \"account\": \"017B8CE645c7285.......................\",\n        \"body_hash\": \"8eAEd6B7bCBB493d75d.......................\",\n        \"chain_name\": \"casper-test\",\n        \"dependencies\": [],\n        \"gas_price\": 1,\n        \"timestamp\": \"2022-01-04T15:14:29.203Z\",\n        \"ttl\": \"30m\"\n      },\n      \"payment\": {\n        \"ModuleBytes\": {\n          \"args\": [\n            [\n              \"amount\",\n              {\n                \"bytes\": \"0500e8764817\",\n                \"cl_type\": \"U512\",\n                \"parsed\": \"100000000000\"\n              }\n            ]\n          ],\n          \"module_bytes\": \"\"\n        }\n      },\n      \"session\": {\n        \"ModuleBytes\": {\n          \"args\": [],\n          \"module_bytes\": \"[417800 hex chars]\"\n        }\n      }\n    },\n    \"execution_results\": [\n      {\n        \"block_hash\": \"d3644f0306F20fa6.......................\",\n        \"result\": {\n          \"Success\": {\n            \"cost\": \"45040980830\",\n            \"effect\": {\n              \"operations\": [],\n              \"transforms\": [\n                {\n                  \"key\": \"hash-8cf5E4aCF51f54Eb5.......................\",\n                  \"transform\": \"Identity\"\n                },\n                {\n                  \"key\": \"hash-624dBE2395b9D9503FB.......................\",\n                  \"transform\": \"Identity\"\n                },\n                {\n                  \"key\": \"hash-010c3Fe81B7b862E50C77.......................\",\n                  \"transform\": \"Identity\"\n                },\n                {\n                  \"key\": \"hash-9824d60dC3A5c44A20b.......................\",\n                  \"transform\": \"Identity\"\n                },\n                {\n                  \"key\": \"balance-C051e7EC16e08De.......................\",\n                  \"transform\": \"Identity\"\n                },\n                {\n                  \"key\": \"balance-98d945f5324F865243.......................\",\n                  \"transform\": \"Identity\"\n                },\n                {\n                  \"key\": \"balance-C051e7EC16e08Def8b556\",\n                  \"transform\": {\n                    \"WriteCLValue\": {\n                      \"bytes\": \"06E07f3abEa001\",\n                      \"cl_type\": \"U512\",\n                      \"parsed\": \"1789897900000\"\n                    }\n                  }\n                },\n                {\n                  \"key\": \"balance-98d945f5324F865243B7c02C0417AB6eaC361c5c56602FD42ced834a1Ba201B6\",\n                  \"transform\": {\n                    \"AddUInt512\": \"100000000000\"\n                  }\n                },\n                {\n                  \"key\": \"uref-d29a34C29769D4BaC250CF9efD3c6372d8e6a89B62fAD122b3BF009990Ae61CD-000\",\n                  \"transform\": {\n                    \"WriteCLValue\": {\n                      \"bytes\": \"\",\n                      \"cl_type\": \"Unit\",\n                      \"parsed\": null\n                    }\n                  }\n                },\n                {\n                  \"key\": \"account-hash-7f4bf39A3...................................................\",\n                  \"transform\": {\n                    \"AddKeys\": [\n                      {\n                        \"key\": \"uref-d29a34C29769D4BaC250CF9efD3c6372d8e6a89B62fAD122b3BF009990Ae61CD-007\",\n                        \"name\": \"balances\"\n                      }\n                    ]\n                  }\n                },\n                {\n                  \"key\": \"uref-075874B98e3CF57Ea6326746336A0Aa908e770D3ADe0cf953f7E146f8B64F837-000\",\n                  \"transform\": {\n                    \"WriteCLValue\": {\n                      \"bytes\": \"\",\n                      \"cl_type\": \"Unit\",\n                      \"parsed\": null\n                    }\n                  }\n                },\n                {\n                  \"key\": \"account-hash-7f4bf39A311...................................................\",\n                  \"transform\": {\n                    \"AddKeys\": [\n                      {\n                        \"key\": \"uref-075874B98e3CF57Ea6326746336A0Aa908e770D3ADe0cf953f7E146f8B64F837-007\",\n                        \"name\": \"allowances\"\n                      }\n                    ]\n                  }\n                },\n                {\n                  \"key\": \"uref-66Bf928E1F6A28b174A48Fca4c002Bc8b77Dd851d7EFFb9Dc1A450cB211E484a-000\",\n                  \"transform\": {\n                    \"WriteCLValue\": {\n                      \"bytes\": \"0400ca9A3B\",\n                      \"cl_type\": \"U256\",\n                      \"parsed\": \"1000000000\"\n                    }\n                  }\n                },\n                {\n                  \"key\": \"uref-4EB0a2A42afBb1d3D5ae9BD4781dc96E528C7AD3f0eEC240Cf1DbDaDF4f3D486-000\",\n                  \"transform\": {\n                    \"WriteCLValue\": {\n                      \"bytes\": \"0A00000043617370657254657374\",\n                      \"cl_type\": \"String\",\n                      \"parsed\": \"CasperTest\"\n                    }\n                  }\n                },\n                {\n                  \"key\": \"uref-6e87fd661D5a65aF95f02baDfEb64f8E0F44C006661d4903A68E9dF8dEAa413d-000\",\n                  \"transform\": {\n                    \"WriteCLValue\": {\n                      \"bytes\": \"050000004353505254\",\n                      \"cl_type\": \"String\",\n                      \"parsed\": \"CSPRT\"\n                    }\n                  }\n                },\n                {\n                  \"key\": \"uref-aCA2425C80584391fB883603460578B1472d13a429Ebbd1a18a55cE19cE8F3C6-000\",\n                  \"transform\": {\n                    \"WriteCLValue\": {\n                      \"bytes\": \"08\",\n                      \"cl_type\": \"U8\",\n                      \"parsed\": 8\n                    }\n                  }\n                },\n                {\n                  \"key\": \"dictionary-baA61231F04B1c2Ee97025f425eaD2F70CAd9c1E8c24355246d159038AdCb2e9\",\n                  \"transform\": {\n                    \"WriteCLValue\": {\n                      \"bytes\": \"[188 hex chars]\",\n                      \"cl_type\": \"Any\",\n                      \"parsed\": null\n                    }\n                  }\n                },\n                {\n                  \"key\": \"account-hash-7f4bf39A311a7538d8C...................................................\",\n                  \"transform\": \"Identity\"\n                },\n                {\n                  \"key\": \"account-hash-7f4bf39A311a75...................................................\",\n                  \"transform\": {\n                    \"WriteAccount\": \"account-hash-7f4bf39A311a7538d8C91BB86C71DF774023e16bc4a70ab7e4e8AE77DbF2Ef53\"\n                  }\n                },\n                {\n                  \"key\": \"account-hash-7f4bf39A311a7538...................................................\",\n                  \"transform\": \"Identity\"\n                },\n                {\n                  \"key\": \"account-hash-7f4bf39A311a7538d8C...................................................\",\n                  \"transform\": {\n                    \"WriteAccount\": \"account-hash-7f4bf39A311a75...................................................\"\n                  }\n                },\n                {\n                  \"key\": \"uref-868c0e0BEB2EB3C10e893be96E6D6bE7FC6375f3f038e46c3262509245c117a0-000\",\n                  \"transform\": {\n                    \"WriteCLValue\": {\n                      \"bytes\": \"\",\n                      \"cl_type\": \"Unit\",\n                      \"parsed\": null\n                    }\n                  }\n                },\n                {\n                  \"key\": \"hash-28f982A396052b5068383E725ab48965AB941167f53DB36a0911ba0C98bc39F0\",\n                  \"transform\": \"WriteContractPackage\"\n                },\n                {\n                  \"key\": \"hash-28f982A396052b5068383E725ab48965AB941167f53DB36a0911ba0C98bc39F0\",\n                  \"transform\": \"Identity\"\n                },\n                {\n                  \"key\": \"hash-AdF81845d77907054ACb250c196392c7DAEE5481d4EabEB76c318A307c11E5cB\",\n                  \"transform\": \"WriteContractWasm\"\n                },\n                {\n                  \"key\": \"hash-Faa81ED758ecE1B99E2Ce48073D13D7f6185d9dc5233E39DE5c192Bebb9483D6\",\n                  \"transform\": \"WriteContract\"\n                },\n                {\n                  \"key\": \"hash-28f982A396052b5068383E725ab48965AB941167f53DB36a0911ba0C98bc39F0\",\n                  \"transform\": \"WriteContractPackage\"\n                },\n                {\n                  \"key\": \"account-hash-7f4bf39A311a7538d8...................................................\",\n                  \"transform\": {\n                    \"AddKeys\": [\n                      {\n                        \"key\": \"hash-Faa81ED758ecE1B99E2Ce48073D13D7f6185d9dc5233E39DE5c192Bebb9483D6\",\n                        \"name\": \"test_contract\"\n                      }\n                    ]\n                  }\n                },\n                {\n                  \"key\": \"uref-66Bf928E1F6A28b174A48Fca4c002Bc8b77Dd851d7EFFb9Dc1A450cB211E484a-000\",\n                  \"transform\": \"Identity\"\n                },\n                {\n\n```\n\n----------------------------------------\n\nTITLE: Activating Bid on Casper Mainnet using System Auction Contract in Bash\nDESCRIPTION: This command demonstrates how to activate a bid on the Casper Mainnet using the system auction contract, with specific values for the Mainnet.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/versioned_docs/version-2.0.0/operators/becoming-a-validator/recovering.md#2025-04-22_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\nsudo -u casper casper-client put-deploy \\\n--node-address https://node.mainnet.casper.network \\\n--secret-key /etc/casper/validator_keys/secret_key.pem \\\n--chain-name casper  \\\n--payment-amount 2500000000 \\\n--session-hash hash-ccb576d6ce6dec84a551e48f0d0b7af89ddba44c7390b690036257a04a3ae9ea \\\n--session-entry-point activate_bid \\\n--session-arg \"validator:public_key='$(cat /etc/casper/validator_keys/public_key_hex)'\"\n```\n\n----------------------------------------\n\nTITLE: Initializing Minimal Casper Contract Template in Rust\nDESCRIPTION: This snippet shows the minimal boilerplate required to define a Casper smart contract in Rust with no standard library usage, targeting wasm32. It imports necessary crates and dependencies, sets up the contract environment for Casper, and creates an empty 'call' entry point ready for further extension. To compile successfully, dependencies such as 'casper-contract' and 'casper-types' must be included, and compilation must target 'wasm32-unknown-unknown'.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/docs/resources/advanced/cross-contract.md#2025-04-22_snippet_3\n\nLANGUAGE: Rust\nCODE:\n```\n#![no_std]\\n#![no_main]\\n\\n#[cfg(not(target_arch = \\\"wasm32\\\"))]\\ncompile_error!(\\\"target arch should be wasm32: compile with '--target wasm32-unknown-unknown'\\\");\\n\\n// We need to explicitly import the std alloc crate and `alloc::string::String` as we are in a\\n// `no_std` environment.\\nextern crate alloc;\\n\\n// The elementary types \\nuse alloc::string::String;\\nuse alloc::vec::Vec;\\nuse alloc::collections::BTreeMap;\\nuse crate::alloc::string::ToString;\\n\\n\\n// Casper crates\\nuse casper_types::{Key, CLType, Parameter, EntryPoint, EntryPoints, EntryPointType, EntryPointAccess};\\n\\nuse casper_contract::{\\n    contract_api::{runtime, storage},\\n    unwrap_or_revert::UnwrapOrRevert,\\n};\\n\\n\\n#[no_mangle]\\npub extern \\\"C\\\" fn call() {\\n\\n}\\n\n```\n\n----------------------------------------\n\nTITLE: Minting NFT with StoredVersionByHash\nDESCRIPTION: Example command for directly invoking the mint entrypoint of a CEP-78 contract using StoredVersionByHash. This approach uses fewer runtime arguments, resulting in lower gas costs compared to using client Wasm.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/versioned_docs/version-2.0.0/resources/tokens/cep78/using-casper-client.md#2025-04-22_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ncasper-client put-deploy -n http://localhost:11101/rpc --chain-name \"casper-net-1\" \\ --payment-amount 7500000000 \\ -k ~/secret_key.pem \\\n--session-package-hash hash-b3b7a74ae9ef2ea8afc06d6a0830961259605e417e95a53c0cb1ca9737bb0ec7 \\\n--session-entry-point \"mint\" \\\n--session-arg \"token_owner:key='account-hash-e9ff87766a1d2bab2565bfd5799054946200b51b20c3ca7e54a9269e00fe7cfb'\" \\\n--session-arg \"token_meta_data:string='{\\\"name\\\": \\\"John Doe\\\",\\\"token_uri\\\": \\\"https:\\\\/\\\\/www.barfoo.com\\\",\\\"checksum\\\": \\\"940bffb3f2bba35f84313aa26da09ece3ad47045c6a1292c2bbd2df4ab1a55fb\\\"}'\"\n```\n\n----------------------------------------\n\nTITLE: Transferring Tokens using a Throw-Away Purse in Rust for Casper Network\nDESCRIPTION: This session code demonstrates transferring tokens to a contract using a single-use purse. The code creates a new purse, funds it from the caller's main purse, then passes the new purse to the target contract. This approach is simple but wasteful as the created purse remains permanent but unused after initial operation.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/versioned_docs/version-1.5.X/resources/advanced/transfer-token-to-contract.md#2025-04-22_snippet_0\n\nLANGUAGE: rust\nCODE:\n```\n#[no_mangle]\npub extern \"C\" fn call() {\n    let amount: U512 = runtime::get_named_arg(\"amount\");\n    // This is demonstrating the most direct case, wherein you pass in the contract_hash and\n    // the entry_point_name of the target contract as args.\n    // With prior setup having been done, this can also be simplified.\n    let contract_hash = runtime::get_named_arg(\"contract_hash\");\n    let entry_point_name = runtime::get_named_arg(\"entry_point_name\");\n\n    // This creates a new empty purse that the caller will use just this one time.\n    let new_purse = system::create_purse();\n    \n    // Transfer from the caller's main purse to the new purse that was just created.\n    // Note that transfer is done safely by the host logic.\n    system::transfer_from_purse_to_purse(account::get_main_purse(), new_purse, amount, None)\n        .unwrap_or_revert();\n        \n    // Pass the newly created purse to the smart contract with full access rights;    \n    // the called contract should receive the new purse, extract the token from it, and then do\n    // whatever else it is meant to do if a valid amount was transferred to it. Note that the\n    // caller's main purse is never exposed to the called contract; the newly created purse\n    // is provided instead.\n    runtime::call_contract(contract_hash, entry_point_name, runtime_args! {\n        // The arg names are defined by the contract that you are calling,\n        // there is no canonical name. The contract you are calling may have other\n        // runtime args that it requires.\n        \"????\" => new_purse\n    });\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Constants for Casper Test Runtime Arguments (Rust)\nDESCRIPTION: Illustrates defining constants within the test module to represent runtime argument names (e.g., `ASSOCIATED_ACCOUNT`), expected values (e.g., `ASSOCIATED_ACCOUNT_HASH`), and the Wasm file name (`CONTRACT_WASM`). These constants improve readability and maintainability of the tests.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/versioned_docs/version-1.5.X/developers/writing-onchain-code/testing-session-code.md#2025-04-22_snippet_4\n\nLANGUAGE: rust\nCODE:\n```\nconst ASSOCIATED_ACCOUNT_HASH: AccountHash = AccountHash::new([1u8; 32]); // hash of the associated account\nconst ASSOCIATED_ACCOUNT: &str = \"deployment-account\"; // the associated account argument\nconst CONTRACT_WASM: &str = \"contract.wasm\"; // file to pass to the instance of the EE\n```\n\n----------------------------------------\n\nTITLE: Reacting to Contract-Level Events with Python\nDESCRIPTION: This snippet shows how to react to specific contract-level events using a Python event handler. It evaluates if a transaction's account matches a predetermined account for further actions.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/versioned_docs/version-2.0.0/developers/dapps/monitor-and-consume-events.md#2025-04-22_snippet_4\n\nLANGUAGE: Python\nCODE:\n```\ndef eventHandler(event):\n  if event[\"TransactionAccepted\"][\"header\"][\"account\"] == \"012481699f9231e36ecf002675cd7186b48e6a735d10ec1b30f587ca716937752c\":\n    # Perform an action\n```\n\n----------------------------------------\n\nTITLE: Query Node Status and Parse JSON With jq - Bash\nDESCRIPTION: Fetches the node's status via REST and pipes the JSON response to jq for pretty-printing or further filtering. Requires curl and jq utilities; <node_address> must be replaced as appropriate. This aids in easily inspecting or extracting information from status output.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/docs/operators/setup/node-endpoints.md#2025-04-22_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\ncurl -s http://<node_address>:8888/status | jq\n```\n\n----------------------------------------\n\nTITLE: Configuring Secret Key as File Path - Rust - rust\nDESCRIPTION: In Rust, secret key files are provided as arguments to deploy structures/functions without explicit object import. The field 'secret_key' in DeployStrParams receives the path as a string. Used for authentication and signing on transaction deploy. Input: file path string.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/versioned_docs/version-2.0.0/developers/dapps/sdk/client-library-usage.md#2025-04-22_snippet_10\n\nLANGUAGE: rust\nCODE:\n```\nlet deploy_params: casper_client::DeployStrParams = casper_client::DeployStrParams{\n    secret_key:\"./secret_key.pem\",\n    timestamp:\"\",\n    ...\n};\n```\n\n----------------------------------------\n\nTITLE: Event Stream Setup in Python\nDESCRIPTION: Implementation of an event listener using the Casper Python SDK to connect to a node's event stream and handle events.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/versioned_docs/version-1.5.X/developers/dapps/monitor-and-consume-events.md#2025-04-22_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nfrom pycspr import NodeClient, NodeConnection, NodeEventChannel, NodeEventType\n\ndef eventHandler(event):\n    print(event)\n\nclient = NodeClient(NodeConnection(host = \"NODE_ADDRESS\", port_rpc = 7777))\nclient.get_events(eventHandler, NodeEventChannel.CHANNEL, NodeEventType.EVENT_NAME)\n```\n\n----------------------------------------\n\nTITLE: Retrieving Transaction Information via RPC in JSON\nDESCRIPTION: This JSON defines the RPC call 'info_get_transaction' which is used to obtain a transaction's details from the network utilizing a transaction hash. It specifies required parameters such as 'transaction_hash' and provides an option for 'finalized_approvals'. The response includes transaction data, execution info, and relevant schema references.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/condor/jsonrpc-comp/rpc-2.0/info_get_transaction.json.md#2025-04-22_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"name\": \"info_get_transaction\",\n  \"summary\": \"returns a Transaction from the network\",\n  \"params\": [\n    {\n      \"name\": \"transaction_hash\",\n      \"schema\": {\n        \"description\": \"The transaction hash.\",\n        \"$ref\": \"#/components/schemas/TransactionHash\"\n      },\n      \"required\": true\n    },\n    {\n      \"name\": \"finalized_approvals\",\n      \"schema\": {\n        \"description\": \"Whether to return the transaction with the finalized approvals substituted. If `false` or omitted, returns the transaction with the approvals that were originally received by the node.\",\n        \"default\": false,\n        \"type\": \"boolean\"\n      },\n      \"required\": false\n    }\n  ],\n  \"result\": {\n    \"name\": \"info_get_transaction_result\",\n    \"schema\": {\n      \"description\": \"Result for \\\"info_get_transaction\\\" RPC response.\",\n      \"type\": \"object\",\n      \"required\": [\n        \"api_version\",\n        \"transaction\"\n      ],\n      \"properties\": {\n        \"api_version\": {\n          \"description\": \"The RPC API version.\",\n          \"type\": \"string\"\n        },\n        \"transaction\": {\n          \"description\": \"The transaction.\",\n          \"$ref\": \"#/components/schemas/Transaction\"\n        },\n        \"execution_info\": {\n          \"description\": \"Execution info, if available.\",\n          \"anyOf\": [\n            {\n              \"$ref\": \"#/components/schemas/ExecutionInfo\"\n            },\n            {\n              \"type\": \"null\"\n            }\n          ]\n        }\n      },\n      \"additionalProperties\": false\n    }\n  },\n  \"examples\": [\n    {\n      \"name\": \"info_get_transaction_example\",\n      \"params\": [\n        {\n          \"name\": \"transaction_hash\",\n          \"value\": {\n            \"Version1\": \"f5582cb81a5abda63ebaa4edb3b05210ecbd63ffb8dd17bfbeb3b867f4014468\"\n          }\n        },\n        {\n          \"name\": \"finalized_approvals\",\n          \"value\": true\n        }\n      ],\n      \"result\": {\n        \"name\": \"info_get_transaction_example_result\",\n        \"value\": {\n          \"api_version\": \"2.0.0\",\n          \"transaction\": {\n            \"Version1\": {\n              \"hash\": \"f5582cb81a5abda63ebaa4edb3b05210ecbd63ffb8dd17bfbeb3b867f4014468\",\n              \"header\": {\n                \"chain_name\": \"casper-example\",\n                \"timestamp\": \"2020-11-17T00:39:24.072Z\",\n                \"ttl\": \"1h\",\n                \"body_hash\": \"aa24833ffbf31d62c8c8c4265349e7c09cd71952fcbce6f7b12daf5e340bf2cc\",\n                \"pricing_mode\": {\n                  \"Fixed\": {\n                    \"gas_price_tolerance\": 5\n                  }\n                },\n                \"initiator_addr\": {\n                  \"PublicKey\": \"01d9bf2148748a85c89da5aad8ee0b0fc2d105fd39d41a4c796536354f0ae2900c\"\n                }\n              },\n              \"body\": {\n                \"args\": [\n                  [\n                    \"source\",\n                    {\n                      \"cl_type\": {\n                        \"Option\": \"URef\"\n                      },\n                      \"bytes\": \"010a0a0a0a0a0a0a0a0a0a0a0a0a0a0a0a0a0a0a0a0a0a0a0a0a0a0a0a0a0a0a0a07\",\n                      \"parsed\": \"uref-0a0a0a0a0a0a0a0a0a0a0a0a0a0a0a0a0a0a0a0a0a0a0a0a0a0a0a0a0a0a0a0a-007\"\n                    }\n                  ],\n                  [\n                    \"target\",\n                    {\n                      \"cl_type\": \"URef\",\n                      \"bytes\": \"1b1b1b1b1b1b1b1b1b1b1b1b1b1b1b1b1b1b1b1b1b1b1b1b1b1b1b1b1b1b1b1b00\",\n                      \"parsed\": \"uref-1b1b1b1b1b1b1b1b1b1b1b1b1b1b1b1b1b1b1b1b1b1b1b1b1b1b1b1b1b1b1b1b-000\"\n                    }\n                  ],\n                  [\n                    \"amount\",\n                    {\n                      \"cl_type\": \"U512\",\n                      \"bytes\": \"0500ac23fc06\",\n                      \"parsed\": \"30000000000\"\n                    }\n                  ],\n                  [\n                    \"id\",\n                    {\n                      \"cl_type\": {\n                        \"Option\": \"U64\"\n                      },\n                      \"bytes\": \"01e703000000000000\",\n                      \"parsed\": 999\n                    }\n                  ]\n                ],\n                \"target\": \"Native\",\n                \"entry_point\": \"Transfer\",\n                \"transaction_category\": 0,\n                \"scheduling\": \"Standard\"\n              },\n              \"approvals\": [\n                {\n                  \"signer\": \"01d9bf2148748a85c89da5aad8ee0b0fc2d105fd39d41a4c796536354f0ae2900c\",\n                  \"signature\": \"0137d3f468d8f8a6e63f4110d79be29b8c8428e9cd858a92049660e7851ae16a299640d1fc1c930ab6cb424f1a6eec0b194df74bede14f4af1b5133106f1280d0b\"\n                }\n              ]\n            }\n          },\n          \"execution_info\": {\n            \"block_hash\": \"0744fcb72af43c5cc372039bc5a8bfee48808a9ce414acc0d6338a628c20eb42\",\n            \"block_height\": 10,\n            \"execution_result\": {\n              \"Version2\": {\n                \"initiator\": {\n                  \"PublicKey\": \"01d9bf2148748a85c89da5aad8ee0b0fc2d105fd39d41a4c796536354f0ae2900c\"\n                },\n                \"error_message\": null,\n                \"limit\": \"123456\",\n                \"consumed\": \"100000\",\n                \"cost\": \"246912\",\n                \"payment\": [\n                  {\n                    \"source\": \"uref-0101010101010101010101010101010101010101010101010101010101010101-001\"\n                  }\n                ],\n                \"transfers\": [\n                  {\n                    \"Version2\": {\n                      \"transaction_hash\": {\n                        \"Version1\": \"0101010101010101010101010101010101010101010101010101010101010101\"\n                      },\n                      \"from\": {\n                        \"AccountHash\": \"account-hash-0202020202020202020202020202020202020202020202020202020202020202\"\n                      },\n                      \"to\": \"account-hash-0303030303030303030303030303030303030303030303030303030303030303\",\n                      \"source\": \"uref-0a0a0a0a0a0a0a0a0a0a0a0a0a0a0a0a0a0a0a0a0a0a0a0a0a0a0a0a0a0a0a0a-007\",\n                      \"target\": \"uref-1b1b1b1b1b1b1b1b1b1b1b1b1b1b1b1b1b1b1b1b1b1b1b1b1b1b1b1b1b1b1b1b-000\",\n                      \"amount\": \"1000000000000\",\n                      \"gas\": \"2500000000\",\n                      \"id\": 999\n                    }\n                  }\n                ],\n                \"size_estimate\": 186,\n                \"effects\": [\n                  {\n                    \"key\": \"account-hash-2c4a11c062a8a337bfc97e27fd66291caeb2c65865dcb5d3ef3759c4c97efecb\",\n                    \"kind\": {\n                      \"AddUInt64\": 8\n                    }\n                  },\n                  {\n                    \"key\": \"deploy-af684263911154d26fa05be9963171802801a0b6aff8f199b7391eacb8edc9e1\",\n                    \"kind\": \"Identity\"\n                  }\n                ]\n              }\n            }\n          }\n        }\n      }\n    }\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Rust API Functions for Global State Operations\nDESCRIPTION: Core Rust API functions provided by Casper for reading and writing data to global state. These functions handle operations with NamedKeys, URefs, and Dictionary storage.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/versioned_docs/version-2.0.0/concepts/design/reading-and-writing-to-the-blockchain.md#2025-04-22_snippet_0\n\nLANGUAGE: rust\nCODE:\n```\nput_key(name: &str, key: Key) -> ()\nget_key(name: &str) -> Option<Key>\nstorage::new_uref<T>(init: T) -> URef\nstorage::write<T>(uref: URef, value: T) -> ()\nstorage::read<T>(uref: URef) -> Option<T>\ndictionary_put<T>(dictionary_uref: URef, dictionary_item_key: &str, value: T) -> ()\ndictionary_get<T>(dictionary_uref: URef, dictionary_item_key: &str) -> Option<T>\n```\n\n----------------------------------------\n\nTITLE: Query Balance Details Response in Casper Network API\nDESCRIPTION: Example JSON response for the query_balance_details method showing the structure of balance information including total balance, available balance, and holds with their associated proofs.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/versioned_docs/version-2.0.0/developers/json-rpc/json-rpc-informational.md#2025-04-22_snippet_17\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"jsonrpc\": \"2.0\",\n  \"id\": -6143675785141640608,\n  \"result\": {\n    \"name\": \"query_balance_details_result\",\n    \"value\": {\n      \"api_version\": \"2.0.0\",\n      \"total_balance\": \"123456\",\n      \"available_balance\": \"123456\",\n      \"total_balance_proof\": \"01000000006ef2e0949ac76e55812421f755abe129b6244fe7168b77f47a72536147614625016ef2e0949ac76e55812421f755abe129b6244fe7168b77f47a7253614761462500000000352‌9cde5c621f857f75f3810611eb4af3f998caaa9d4a3413cf799f99c67db0307010000006ef2e0949ac76e55812421f755abe129b6244fe7168b77f47a7253614761462501010102000000006e06000000000074769d28aac597a36a03a932d4b43e4f10bf0403ee5c41dd035102553f5773631200b9e173e8f05361b681513c14e25e3138639eb03232581db7557c9e8dbbc83ce94500226a9a7fe4f2b7b88d5103a4fc7400f02bf89c860c9ccdd56951a2afe9be0e0267006d820fb5676eb2960e15722f7725f3f8f41030078f8b2e44bf0dc03f71b176d6e800dc5ae9805068c5be6da1a90b2528ee85db0609cc0fb4bd60bbd559f497a98b67f500e1e3e846592f4918234647fca39830b7e1e6ad6f5b7a99b39af823d82ba1873d000003000000010186ff500f287e9b53f823ae1582b1fa429dfede28015125fd233a31ca04d5012002015cc42669a55467a1fdf49750772bfc1aed59b9b085558eb81510e9b015a7c83b0301e3cf4a34b1db6bfa58808b686cb8fe21ebe0c1bcbcee522649d2b135fe510fe3\",\n      \"holds\": [\n        {\n          \"time\": 0,\n          \"amount\": \"123456\",\n          \"proof\": \"01000000006ef2e0949ac76e55812421f755abe129b6244fe7168b77f47a72536147614625016ef2e0949ac76e55812421f755abe129b6244fe7168b77f47a7253614761462500000000352‌9cde5c621f857f75f3810611eb4af3f998caaa9d4a3413cf799f99c67db0307010000006ef2e0949ac76e55812421f755abe129b6244fe7168b77f47a7253614761462501010102000000006e06000000000074769d28aac597a36a03a932d4b43e4f10bf0403ee5c41dd035102553f5773631200b9e173e8f05361b681513c14e25e3138639eb03232581db7557c9e8dbbc83ce94500226a9a7fe4f2b7b88d5103a4fc7400f02bf89c860c9ccdd56951a2afe9be0e0267006d820fb5676eb2960e15722f7725f3f8f41030078f8b2e44bf0dc03f71b176d6e800dc5ae9805068c5be6da1a90b2528ee85db0609cc0fb4bd60bbd559f497a98b67f500e1e3e846592f4918234647fca39830b7e1e6ad6f5b7a99b39af823d82ba1873d000003000000010186ff500f287e9b53f823ae1582b1fa429dfede28015125fd233a31ca04d5012002015cc42669a55467a1fdf49750772bfc1aed59b9b085558eb81510e9b015a7c83b0301e3cf4a34b1db6bfa58808b686cb8fe21ebe0c1bcbcee522649d2b135fe510fe3\"\n        }\n      ]\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Initializing Casper Client Connection - JavaScript\nDESCRIPTION: Creates a new CasperClient instance to connect to a Casper node's RPC endpoint. Requires specifying the node address and port 7777 for RPC communication.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/docs/developers/dapps/technology-stack.md#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconst client = new CasperClient(\"http://NODE_ADDRESS:7777/rpc\");\n```\n\n----------------------------------------\n\nTITLE: Sample Request for Getting State Root Hash\nDESCRIPTION: An example of how to use the get-state-root-hash command with a specific node address.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/docs/developers/cli/querying-global-state.md#2025-04-22_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ncasper-client get-state-root-hash --node-address http://localhost:11101\n```\n\n----------------------------------------\n\nTITLE: Building and Running Tests for CEP-18 Contract via Makefile in Bash\nDESCRIPTION: This bash command executes the default Makefile target to compile, build, and test the CEP-18 Casper contract. It automates both contract compilation and test execution, and includes steps to deploy the compiled contract and run tests in release mode. Prerequisites are a valid Makefile and appropriate dependency installations for the project.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/docs/resources/tokens/cep18/tests.md#2025-04-22_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nmake test\n\n```\n\n----------------------------------------\n\nTITLE: Defining the 'chain_get_block_transfers' RPC Method (JSON)\nDESCRIPTION: This JSON object defines the structure and provides an example for the 'chain_get_block_transfers' RPC method. It specifies the method name, a summary, parameters (an optional 'block_identifier' referencing the BlockIdentifier schema), and the expected result structure ('chain_get_block_transfers_result'). The result includes 'api_version', an optional 'block_hash' (referencing BlockHash schema or null), and an optional array of 'transfers' (referencing Transfer schema or null). An example request/response pair demonstrates usage with a specific block hash.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/condor/jsonrpc-comp/rpc-2.0/chain_get_block_transfers.json.md#2025-04-22_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"name\": \"chain_get_block_transfers\",\n  \"summary\": \"returns all transfers for a Block from the network\",\n  \"params\": [\n    {\n      \"name\": \"block_identifier\",\n      \"schema\": {\n        \"description\": \"The block hash.\",\n        \"$ref\": \"#/components/schemas/BlockIdentifier\"\n      },\n      \"required\": false\n    }\n  ],\n  \"result\": {\n    \"name\": \"chain_get_block_transfers_result\",\n    \"schema\": {\n      \"description\": \"Result for \\\"chain_get_block_transfers\\\" RPC response.\",\n      \"type\": \"object\",\n      \"required\": [\n        \"api_version\"\n      ],\n      \"properties\": {\n        \"api_version\": {\n          \"description\": \"The RPC API version.\",\n          \"type\": \"string\"\n        },\n        \"block_hash\": {\n          \"description\": \"The block hash, if found.\",\n          \"anyOf\": [\n            {\n              \"$ref\": \"#/components/schemas/BlockHash\"\n            },\n            {\n              \"type\": \"null\"\n            }\n          ]\n        },\n        \"transfers\": {\n          \"description\": \"The block's transfers, if found.\",\n          \"type\": [\n            \"array\",\n            \"null\"\n          ],\n          \"items\": {\n            \"$ref\": \"#/components/schemas/Transfer\"\n          }\n        }\n      },\n      \"additionalProperties\": false\n    }\n  },\n  \"examples\": [\n    {\n      \"name\": \"chain_get_block_transfers_example\",\n      \"params\": [\n        {\n          \"name\": \"block_identifier\",\n          \"value\": {\n            \"Hash\": \"0707070707070707070707070707070707070707070707070707070707070707\"\n          }\n        }\n      ],\n      \"result\": {\n        \"name\": \"chain_get_block_transfers_example_result\",\n        \"value\": {\n          \"api_version\": \"2.0.0\",\n          \"block_hash\": \"0707070707070707070707070707070707070707070707070707070707070707\",\n          \"transfers\": [\n            {\n              \"Version2\": {\n                \"transaction_hash\": {\n                  \"Version1\": \"0101010101010101010101010101010101010101010101010101010101010101\"\n                },\n                \"from\": {\n                  \"AccountHash\": \"account-hash-0202020202020202020202020202020202020202020202020202020202020202\"\n                },\n                \"to\": \"account-hash-0303030303030303030303030303030303030303030303030303030303030303\",\n                \"source\": \"uref-0a0a0a0a0a0a0a0a0a0a0a0a0a0a0a0a0a0a0a0a0a0a0a0a0a0a0a0a0a0a0a0a-007\",\n                \"target\": \"uref-1b1b1b1b1b1b1b1b1b1b1b1b1b1b1b1b1b1b1b1b1b1b1b1b1b1b1b1b1b1b1b1b-000\",\n                \"amount\": \"1000000000000\",\n                \"gas\": \"2500000000\",\n                \"id\": 999\n              }\n            }\n          ]\n        }\n      }\n    }\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Deploying an Upgraded Casper Contract using casper-client\nDESCRIPTION: This Bash command demonstrates deploying a compiled Casper contract Wasm file (specifically, version 2 of the counter contract) to a Casper network using the `casper-client put-deploy` command. It requires specifying the target node address, chain name, secret key for signing, payment amount, and the path to the Wasm file containing the new contract version.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/docs/resources/beginner/upgrade-contract.md#2025-04-22_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\ncasper-client put-deploy \\\n    --node-address http://[NODE_IP]:7777 \\\n    --chain-name [CHAIN_NAME] \\\n    --secret-key [PATH_TO_YOUR_KEY]/secret_key.pem \\\n    --payment-amount [PAYMENT_AMOUNT_IN_MOTES] \\\n    --session-path [PATH]/contract-v2/target/wasm32-unknown-unknown/release/counter-v2.wasm\n```\n\n----------------------------------------\n\nTITLE: Defining JSON Schema for Era Transition Object - JSON\nDESCRIPTION: This snippet defines a JSON schema for an object containing two required fields: 'era_report', which is validated against a referenced 'JsonEraReport' schema, and 'next_era_validator_weights', an array of 'ValidatorWeight' objects. Additional properties are disallowed, enforcing a strict object structure. This is typically used for API request or response validation in a service dealing with Casper Network era data.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/condor/jsonrpc-comp/rpc-1.5/schema/JsonEraEnd.json.md#2025-04-22_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"type\": \"object\",\n    \"required\": [\n        \"era_report\",\n        \"next_era_validator_weights\"\n    ],\n    \"properties\": {\n        \"era_report\": {\n            \"$ref\": \"#/components/schemas/JsonEraReport\"\n        },\n        \"next_era_validator_weights\": {\n            \"type\": \"array\",\n            \"items\": {\n                \"$ref\": \"#/components/schemas/ValidatorWeight\"\n            }\n        }\n    },\n    \"additionalProperties\": false\n} \n```\n\n----------------------------------------\n\nTITLE: Initializing CasperClient Connection in JavaScript\nDESCRIPTION: Creates a new CasperClient instance by specifying the node address and RPC port for connecting to a Casper network. This connection is required for backend communication with the blockchain.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/versioned_docs/version-2.0.0/developers/dapps/technology-stack.md#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconst client = new CasperClient(\"http://NODE_ADDRESS:7777/rpc\");\n```\n\n----------------------------------------\n\nTITLE: Defining Auction Data Contract Schema Using JSON Schema in JavaScript/JSON\nDESCRIPTION: This snippet defines a JSON schema for the auction contract data structure, specifying required object properties (bids, block_height, era_validators, state_root_hash) and their respective types, as well as references to other schema components through $ref. The schema enforces required fields, prevents additional properties beyond those listed, and documents each property, supporting tools that rely on explicit data schemas. Dependencies include definitions for Digest, JsonEraValidators, and Array_of_PublicKeyAndBid, which must be available in the parent schema context.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/condor/jsonrpc-comp/rpc-2.0/schema/AuctionState.json.md#2025-04-22_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"description\": \"Data structure summarizing auction contract data.\",\n    \"type\": \"object\",\n    \"required\": [\n        \"bids\",\n        \"block_height\",\n        \"era_validators\",\n        \"state_root_hash\"\n    ],\n    \"properties\": {\n        \"state_root_hash\": {\n            \"description\": \"Global state hash.\",\n            \"allOf\": [\n                {\n                    \"$ref\": \"#/components/schemas/Digest\"\n                }\n            ]\n        },\n        \"block_height\": {\n            \"description\": \"Block height.\",\n            \"type\": \"integer\",\n            \"format\": \"uint64\",\n            \"minimum\": 0\n        },\n        \"era_validators\": {\n            \"description\": \"Era validators.\",\n            \"type\": \"array\",\n            \"items\": {\n                \"$ref\": \"#/components/schemas/JsonEraValidators\"\n            }\n        },\n        \"bids\": {\n            \"description\": \"All bids.\",\n            \"allOf\": [\n                {\n                    \"$ref\": \"#/components/schemas/Array_of_PublicKeyAndBid\"\n                }\n            ]\n        }\n    },\n    \"additionalProperties\": false\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Entry Point: transfer in Casper Network\nDESCRIPTION: This snippet defines the 'transfer' entry point for a Casper Network smart contract. It takes 'recipient' (Key) and 'amount' (U256) as arguments, returns Unit, and has public access with caller-based entry point payment.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/versioned_docs/version-2.0.0/developers/cli/sending-transactions.md#2025-04-22_snippet_13\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"name\": \"transfer\",\n  \"args\": [\n    {\n      \"name\": \"recipient\",\n      \"cl_type\": \"Key\"\n    },\n    {\n      \"name\": \"amount\",\n      \"cl_type\": \"U256\"\n    }\n  ],\n  \"ret\": \"Unit\",\n  \"access\": \"Public\",\n  \"entry_point_type\": \"Called\",\n  \"entry_point_payment\": \"Caller\"\n}\n```\n\n----------------------------------------\n\nTITLE: Building and Testing the Contract with Make (Bash)\nDESCRIPTION: This snippet invokes make targets to build the smart contract into WebAssembly bytecode and then to run contract unit tests. It assumes a properly configured Makefile present in the project root. Successful execution is required before deploying or customizing the contract.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/docs/resources/tokens/cep18/full-tutorial.md#2025-04-22_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nmake build-contract\nmake test\n```\n\n----------------------------------------\n\nTITLE: Example: Calling Specific Contract Version by Package Name (Bash)\nDESCRIPTION: Provides a concrete example using `casper-client put-deploy` to call the `counter-inc` entry point of the contract package named `counter_package_name`, specifically targeting version 1. It requires prior deployment of the contract associated with this package name and version.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/versioned_docs/version-1.5.X/developers/cli/calling-contracts.md#2025-04-22_snippet_14\n\nLANGUAGE: bash\nCODE:\n```\ncasper-client put-deploy \\\n    --node-address http://65.21.235.219:7777 \\\n    --chain-name casper-test \\\n    --secret-key [KEY_PATH]/secret_key.pem \\\n    --payment-amount 100000000 \\\n    --session-package-name \"counter_package_name\" \\\n    --session-entry-point \"counter-inc\" \\\n    --session-version 1\n```\n\n----------------------------------------\n\nTITLE: Defining Stored Versioned Contract by Named Key - JSON Schema - JSON\nDESCRIPTION: Describes a schema for executing a stored versioned contract referenced by a named key (existing in the signer\\'s context), an entry point, an instance of runtime arguments, and an optional version. Ensures only contracts to which the account has access via named keys can be targeted; depends on references to 'RuntimeArgs'.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/condor/jsonrpc-comp/rpc-2.0/schema/components.json.md#2025-04-22_snippet_3\n\nLANGUAGE: JSON\nCODE:\n```\n{\n    \"StoredVersionedContractByName\": {\n        \"type\": \"object\",\n        \"required\": [\n            \"args\",\n            \"entry_point\",\n            \"name\"\n        ],\n        \"properties\": {\n            \"name\": {\n                \"description\": \"Named key.\",\n                \"type\": \"string\"\n            },\n            \"version\": {\n                \"description\": \"An optional version of the contract to call. It will default to the highest enabled version if no value is specified.\",\n                \"type\": [\n                    \"integer\",\n                    \"null\"\n                ],\n                \"format\": \"uint32\",\n                \"minimum\": 0.0\n            },\n            \"entry_point\": {\n                \"description\": \"Entry point name.\",\n                \"type\": \"string\"\n            },\n            \"args\": {\n                \"description\": \"Runtime arguments.\",\n                \"allOf\": [\n                    {\n                        \"$ref\": \"#/components/schemas/RuntimeArgs\"\n                    }\n                ]\n            }\n        },\n        \"additionalProperties\": false\n    }\n}\n\n```\n\n----------------------------------------\n\nTITLE: Transferring CSPR with JavaScript Casper SDK - JavaScript\nDESCRIPTION: Signs and submits a CSPR transfer deploy to a Casper network node using casper-js-sdk. Accepts keypair, recipient public key hex, and transfer amount in motes. Requires live node URL, correct SDK initialization, and minimum balances. Output is the deploy hash printed to the console.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/versioned_docs/version-1.5.X/developers/dapps/sdk/client-library-usage.md#2025-04-22_snippet_13\n\nLANGUAGE: javascript\nCODE:\n```\nconst { CasperClient, DeployUtil } = require(\"casper-js-sdk\");\n\nconst casperClient = new CasperClient(\"http://NODE_ADDRESS:7777/rpc\");\nconst receipientPublicKeyHex = \"01e8c84f4fbb58d37991ef373c08043a45c44cd7f499453fa2bd3e141cc0113b3c\"\n\nconst amount = 2.5e9 // Minimum transfer: 2.5 CSPR\nlet deployParams = new DeployUtil.DeployParams(\n  keypair.publicKey,\n  \"casper\" // or \"casper-test\" for Testnet\n);\n\nconst session = DeployUtil.ExecutableDeployItem.newTransferWithOptionalTransferId(\n  amount,\n  recipientPublicKeyHex\n);\n\nconst payment = DeployUtil.standardPayment(0.1e9); // Gas payment in motes: 0.1 CSPR\nconst deploy = DeployUtil.makeDeploy(deployParams, session, payment);\nconst signedDeploy = DeployUtil.signDeploy(deploy, keypair);\n\nconsole.log(await casperClient.putDeploy(signedDeploy));\n```\n\n----------------------------------------\n\nTITLE: Retrieving Deploy Information from Casper Network\nDESCRIPTION: Retrieves information about a specific deploy from the network using its deploy hash. This command is useful for checking the status of a deploy and verifying that it was executed successfully. The deploy hash is returned by the put-deploy command.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/versioned_docs/version-2.0.0/resources/beginner/counter/commands.md#2025-04-22_snippet_5\n\nLANGUAGE: rust\nCODE:\n```\ncasper-client get-deploy \\\n    --node-address [NODE_SERVER_ADDRESS] \\\n    [DEPLOY_HASH]\n```\n\n----------------------------------------\n\nTITLE: Defining the Contract Initialization Entry Point in Rust\nDESCRIPTION: This Rust snippet defines the `call` entry point for a Casper smart contract. Its primary function is to set up the contract's structure upon deployment. It defines the metadata for another entry point named `call_contract_2` (specifying its parameters: `new_message` of type String and `hello_world_contract` of type Key), initializes an empty set of named keys, stores the new contract in global state, and registers the contract's hash under the name `cross_contract_2` in the deploying account's named keys.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/versioned_docs/version-1.5.X/resources/advanced/cross-contract.md#2025-04-22_snippet_14\n\nLANGUAGE: rust\nCODE:\n```\n#[no_mangle]\npub extern \"C\" fn call() {\n\n    // Create the list of required runtime arguments for the given entry point.\n    let mut vec = Vec::new();\n    vec.push(Parameter::new(\"new_message\", CLType::String));\n    vec.push(Parameter::new(\"hello_world_contract\", CLType::Key));\n\n    // In the named keys of the contract, add a key for the count.\n    let mut named_keys = NamedKeys::new();\n\n    // Create an Entry Point Object\n    let mut entry_points = EntryPoints::new();\n\n    // Add the entry point metadata definition.\n    entry_points.add_entry_point(EntryPoint::new(\n       \"call_contract_2\",\n       vec,\n       CLType::Unit,\n       EntryPointAccess::Public,\n       EntryPointType::Contract\n    ));\n\n    // The contract is stored in the global state\n    let (stored_contract_hash, _contract_version) = storage::new_contract(\n       entry_points,                                        // entry points\n       Some(named_keys),                                    // named keys\n       Some(\"contract2_package_name\".to_string()),          // package name\n       Some(\"contract2_access_uref\".to_string())            // access uref\n    );\n\n    // To access from the account - named keys of the account\n    runtime::put_key(\"cross_contract_2\", stored_contract_hash.into());\n}\n\n```\n\n----------------------------------------\n\nTITLE: Transferring CSPR with Rust casper_client SDK - Rust\nDESCRIPTION: Performs an asynchronous CSPR transfer deploy using casper_client in Rust. This provides all required parameters, creates Rust DeployStrParams and PaymentStrParams, and submits the transfer from the specified secret key. Outputs the deploy hash if successful. Requires an async runtime and live node connection; all string literals (especially secret_key and recipient) must exist and be correct.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/versioned_docs/version-1.5.X/developers/dapps/sdk/client-library-usage.md#2025-04-22_snippet_15\n\nLANGUAGE: rust\nCODE:\n```\nextern crate casper_client;\nasync fn send_transfer(){\n    let maybe_rpc_id: &str = \"\";\n    let node_address: &str = \"http://135.181.216.142:7777\";\n    let verbosity_level: u64 = 1;\n    let amount: &str = \"2500000000\";\n    let target_account: &str = recipient;\n    let transfer_id: &str = \"1\";\n    let deploy_params: casper_client::DeployStrParams = casper_client::DeployStrParams{\n        secret_key:\"./sk_testnet.pem\",\n        timestamp:\"\",\n        ttl:\"50s\",\n        gas_price:\"1000000000\",\n        chain_name:\"casper\", // or \"casper-test\" for testnet\n        dependencies: Vec::new(),\n        session_account: \"01daad67ebbcb725e02a1955a6617512b311435a21ca6d523085aa015d2d1b473a\"\n\n    };\n    let recipient: &str = \"0106ca7c39cd272dbf21a86eeb3b36b7c26e2e9b94af64292419f7862936bca2ca\";\n    let payment_params: casper_client::PaymentStrParams = casper_client::PaymentStrParams::with_amount(amount);\n    let result = casper_client::transfer(maybe_rpc_id, node_address, verbosity_level, amount, target_account, transfer_id, deploy_params, payment_params).await.unwrap();\n    println!(\"Deploy response: {:?}\", result);\n}\n\n#[tokio::main]\nasync fn main(){\n    send_transfer().await;\n}\n```\n\n----------------------------------------\n\nTITLE: Defining the ActionThresholds JSON Schema\nDESCRIPTION: This JSON schema defines the structure for `ActionThresholds`. It requires `deployment` and `key_management` properties, both referencing the `AccountAssociatedKeyWeight` schema to specify the necessary weight thresholds for performing these actions on an account.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/condor/jsonrpc-comp/rpc-2.0/schema/AccountActionThresholds.json.md#2025-04-22_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"description\": \"Thresholds that have to be met when executing an action of a certain type.\",\n    \"type\": \"object\",\n    \"required\": [\n        \"deployment\",\n        \"key_management\"\n    ],\n    \"properties\": {\n        \"deployment\": {\n            \"description\": \"Threshold for deploy execution.\",\n            \"allOf\": [\n                {\n                    \"$ref\": \"#/components/schemas/AccountAssociatedKeyWeight\"\n                }\n            ]\n        },\n        \"key_management\": {\n            \"description\": \"Threshold for managing action threshold.\",\n            \"allOf\": [\n                {\n                    \"$ref\": \"#/components/schemas/AccountAssociatedKeyWeight\"\n                }\n            ]\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Sample Request for Retrieving Entity Details (Account Hash) in Bash\nDESCRIPTION: Alternative example usage of the `casper-client get-entity` command, using the account hash directly as the identifier to fetch detailed account information. This produces the same output as using the entity identifier.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/versioned_docs/version-2.0.0/developers/cli/querying-global-state.md#2025-04-22_snippet_8\n\nLANGUAGE: bash\nCODE:\n```\n```bash\ncasper-client get-entity \\\n--node-address http://localhost:11101 \\\n--entity-identifier account-hash-6a56c4eee172043975aea72221eaf09f3c3a24f09a379935e44c9979f1ae9463\n```\n```\n\n----------------------------------------\n\nTITLE: Response for account_put_deploy in JSON-RPC\nDESCRIPTION: Example of an account_put_deploy response. It includes the API version and the deploy hash, which is the primary identifier of the deploy within the Casper network.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/versioned_docs/version-2.0.0/developers/json-rpc/json-rpc-transactional.md#2025-04-22_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"id\": 1,\n  \"jsonrpc\": \"2.0\",\n  \"result\": {\n    \"name\": \"account_put_deploy_result\",\n    \"value\": {\n      \"api_version\": \"2.0.0\",\n      \"deploy_hash\": \"5c9b3b099c1378aa8e4a5f07f59ff1fcdc69a83179427c7e67ae0377d94d93fa\"\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Generating Ed25519 Keys with Casper Client\nDESCRIPTION: Commands to create an account using the Casper command-line client, which generates EdDSA (Ed25519) keys by default. Creates the necessary key files in the specified directory.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/versioned_docs/version-1.5.X/concepts/accounts-and-keys.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nmkdir ed25519-keys\ncasper-client keygen ed25519-keys/\ntree ed25519-keys/\n```\n\n----------------------------------------\n\nTITLE: Example Contract Package Query Result\nDESCRIPTION: Example output from querying a contract package, showing the access key, disabled versions (empty in this case), and available versions. The result shows two contract versions (1 and 2) with their respective contract hashes.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/docs/resources/beginner/upgrade-contract.md#2025-04-22_snippet_11\n\nLANGUAGE: rust\nCODE:\n```\n{\n  \"id\": 6933525663267881367,\n  \"jsonrpc\": \"2.0\",\n  \"result\": {\n    \"api_version\": \"1.4.13\",\n    \"block_header\": null,\n    \"merkle_proof\": \"[52174 hex chars]\",\n    \"stored_value\": {\n      \"ContractPackage\": {\n        \"access_key\": \"uref-101817ffd5aa47b08ca710649dbdc41edf0a20d7802c736d34053656c0a99eaf-007\",\n        \"disabled_versions\": [],\n        \"groups\": [],\n        \"versions\": [\n          {\n            \"contract_hash\": \"contract-4ee8a4cfbc0a183d189611b6a14c0f7b57e7635fa17a8acfc5c645fec4c36316\",\n            \"contract_version\": 1,\n            \"protocol_version_major\": 1\n          },\n          {\n            \"contract_hash\": \"contract-2cd9f6485423ba846fae83729016b03df26d9babb939466906c8f1d168b40949\",\n            \"contract_version\": 2,\n            \"protocol_version_major\": 1\n          }\n        ]\n      }\n    }\n  }\n}\n\n\n```\n\n----------------------------------------\n\nTITLE: Signing Deploy using Ledger Hardware Wallet in JavaScript\nDESCRIPTION: Shows how to sign a deploy using a Ledger hardware wallet connected via WebUSB. It establishes a connection using `@ledgerhq/hw-transport-webusb`, initializes the Casper Ledger app (`@zondax/ledger-casper`), converts the deploy to bytes, and calls the `ledgerApp.sign` method with the BIP path and deploy bytes to get the signature. Depends on the Ledger transport and app libraries, `DeployUtil` from `casper-js-sdk`, and the account index.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/docs/resources/advanced/list-cspr.md#2025-04-22_snippet_9\n\nLANGUAGE: javascript\nCODE:\n```\nimport TransportWebUSB from '@ledgerhq/hw-transport-webusb';\nimport LedgerApp, { ResponseBase } from '@zondax/ledger-casper';\nimport { DeployUtil } from 'casper-js-sdk';\n\nconst getBipPath = (index: number) => {\n  const idx = index.toString();\n  return `m/44'/506'/0'/0/${idx}`;\n};\n\nconst deployBytes = DeployUtil.deployToBytes(deploy) as Buffer;\nconst transport = await TransportWebUSB.create();\nconst ledgerApp = new LedgerApp(transport);\nconst res = await ledgerApp.sign(\n    getBipPath(selectedAccountIndex),\n    deployBytes\n);\n```\n\n----------------------------------------\n\nTITLE: Incrementing Contract Counter Using Session Code and ExecuteRequestBuilder - Rust\nDESCRIPTION: Shows how to send a contract call via session code using ExecuteRequestBuilder, with account, contract Wasm, and runtime arguments. Here, the runtime_args! macro provides the contract key. This is typical for Casper integration tests that want to invoke contract functionality in a controlled session context.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/docs/developers/writing-onchain-code/testing-session-code.md#2025-04-22_snippet_13\n\nLANGUAGE: rust\nCODE:\n```\n    // Use session code to increment the counter.\n    let session_code_request = ExecuteRequestBuilder::standard(\n        *DEFAULT_ACCOUNT_ADDR,\n        COUNTER_CALL_WASM,\n        runtime_args! {\n            CONTRACT_KEY => contract_v1_hash\n        },\n    )\n    .build();\n\n    builder.exec(session_code_request)\n        .expect_success()\n        .commit();\n```\n\n----------------------------------------\n\nTITLE: Registering NFT Owner for CEP-78 with casper-cep78-js-client - JavaScript\nDESCRIPTION: Demonstrates registration of an NFT owner (recipient) using the register method on the CEP-78 client. This is required when the contract's owner reverse lookup mode is set to Complete. The register deploy is constructed for a specific public key and then sent to the node RPC. Dependencies include the casper-cep78-js-client and user keys. The deploy hash returned can be used to monitor registration status.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/docs/resources/tokens/cep78/js-tutorial.md#2025-04-22_snippet_3\n\nLANGUAGE: JavaScript\nCODE:\n```\n\n    const registerDeploy = cc.register(\n      {\n        tokenOwner: USER1_KEYS.publicKey,\n      },\n      \"1000000000\",\n      USER1_KEYS.publicKey,\n      [USER1_KEYS]\n    );\n\n    const registerDeployHash = await registerDeploy.send(\"http://localhost:11101/rpc\");\n    \n```\n\n----------------------------------------\n\nTITLE: Initializing Casper Client Connection - Python\nDESCRIPTION: Establishes a NodeClient connection to a Casper node using Python SDK. Creates a connection with specified host address and RPC port 7777.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/docs/developers/dapps/technology-stack.md#2025-04-22_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nclient = NodeClient(NodeConnection(host = \"NODE_ADDRESS\", port_rpc = 7777))\n```\n\n----------------------------------------\n\nTITLE: Defining the BlockV2 Schema in JSON\nDESCRIPTION: This JSON schema defines the structure for a `BlockV2` object, representing a core component of the Casper linear blockchain (version 2). It specifies that a block must contain `body`, `hash`, and `header` properties. The `hash` references the `BlockHash` schema, the `header` references the `BlockHeaderV2` schema, and the `body` references the `BlockBodyV2` schema.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/condor/jsonrpc-comp/rpc-2.0/schema/BlockV2.json.md#2025-04-22_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"description\": \"A block after execution, with the resulting global state root hash. This is the core component of the Casper linear blockchain. Version 2.\",\n    \"type\": \"object\",\n    \"required\": [\n        \"body\",\n        \"hash\",\n        \"header\"\n    ],\n    \"properties\": {\n        \"hash\": {\n            \"description\": \"The block hash identifying this block.\",\n            \"allOf\": [\n                {\n                    \"$ref\": \"#/components/schemas/BlockHash\"\n                }\n            ]\n        },\n        \"header\": {\n            \"description\": \"The header portion of the block.\",\n            \"allOf\": [\n                {\n                    \"$ref\": \"#/components/schemas/BlockHeaderV2\"\n                }\n            ]\n        },\n        \"body\": {\n            \"description\": \"The body portion of the block.\",\n            \"allOf\": [\n                {\n                    \"$ref\": \"#/components/schemas/BlockBodyV2\"\n                }\n            ]\n        }\n    }\n} \n```\n\n----------------------------------------\n\nTITLE: Querying Global State\nDESCRIPTION: Queries the global state of the Casper network using the state root hash and account hash. This shows the current state of the account on the blockchain.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/versioned_docs/version-2.0.0/resources/beginner/counter-testnet/walkthrough.md#2025-04-22_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\ncasper-client query-global-state \\\n    --node-address http://[NODE_IP]:7777 \\\n    --state-root-hash [STATE_ROOT_HASH] \\\n    --key [ACCOUNT_HASH]\n```\n\n----------------------------------------\n\nTITLE: Transferring Tokens with transfer_to_public_key - Rust\nDESCRIPTION: This function implements a session entry point to transfer tokens to a public key. Expects ARG_TARGET (PublicKey) and ARG_AMOUNT (U512) as arguments. Invokes system::transfer_to_public_key; any error causes revert. Enables third-party transfers from deployer accounts on Casper and is used for direct, permissioned value transfers.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/docs/developers/writing-onchain-code/writing-session-code.md#2025-04-22_snippet_7\n\nLANGUAGE: rust\nCODE:\n```\n#[no_mangle]\npub extern \"C\" fn call() {\n    let account_hash: PublicKey = runtime::get_named_arg(ARG_TARGET);\n    let transfer_amount: U512 = runtime::get_named_arg(ARG_AMOUNT);\n    system::transfer_to_public_key(account_hash, transfer_amount, None).unwrap_or_revert();\n}\n```\n\n----------------------------------------\n\nTITLE: Minting NFT Tokens with casper-cep78-js-client - JavaScript\nDESCRIPTION: Shows how to create and send a deploy to mint a new NFT token using the mint method on an existing CEP-78 client instance. Metadata for the NFT and minting mode are provided, and the session code mode can be toggled. The code sends the mint deploy to the node RPC endpoint and receives a deploy hash in return. Required dependencies are casper-cep78-js-client, contract deployment, and accessible key objects.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/docs/resources/tokens/cep78/js-tutorial.md#2025-04-22_snippet_2\n\nLANGUAGE: JavaScript\nCODE:\n```\n\n  const mintDeploy = cc.mint(\n    {\n      owner: FAUCET_KEYS.publicKey,\n      meta: {\n        color: \"Blue\",\n        size: \"Medium\",\n        material: \"Aluminum\",\n        condition: \"Used\",\n      },\n    },\n    { useSessionCode: true },\n    \"2000000000\",\n    FAUCET_KEYS.publicKey,\n    [FAUCET_KEYS]\n  );\n\n  const mintDeployHash = await mintDeploy.send(\"http://localhost:11101/rpc\");\n\n```\n\n----------------------------------------\n\nTITLE: Calling a Contract Entry Point with Arguments - Casper casper-client - Bash\nDESCRIPTION: This command submits a deploy to call the 'call_contract_2' entry point in a smart contract using casper-client. It passes two arguments: a new message string and a reference to the 'hello world' contract as a Key. Prerequisites include having the correct contract hash for the session, prepared session arguments, chain metadata, secret key for signing, and sufficient payment amount. The intended use is cross-contract invocation and updating on-chain state, and the command returns a JSON deploy status including the deploy hash for tracking. The command requires proper file permissions for secret keys and sufficient account balance for the deploy to succeed.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/docs/resources/advanced/cross-contract.md#2025-04-22_snippet_17\n\nLANGUAGE: bash\nCODE:\n```\ncasper-client put-deploy \\\n    --node-address http://136.243.187.84:7777 \\\n    --chain-name casper-test \\\n    --secret-key ./keys/secret_key.pem \\\n    --payment-amount 20000000000 \\\n    --session-hash hash-32ad0e54e874f68706708ebfd2c5aba7803eb64ccff71a50d3c4d4f29db15c92 \\\n    --session-entry-point \"call_contract_2\" \\\n    --session-arg \"new_message:string='Hello new message!'\" \\\n    --session-arg \"hello_world_contract:Key='hash-b7a06298cc71d4cac05929cc0713dfd5a541c68b71cb500cd04547b5cd0385ea'\"\n```\n\n----------------------------------------\n\nTITLE: Example Bonding Command for Testnet\nDESCRIPTION: Example command for bidding 10,000 CSPR on the Casper Testnet using the system auction contract\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/versioned_docs/version-2.0.0/operators/becoming-a-validator/bonding.md#2025-04-22_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nsudo -u casper casper-client put-deploy \\\n--node-address http://65.21.75.254:7777 \\\n--chain-name casper-test \\\n--secret-key /etc/casper/validator_keys/secret_key.pem \\\n--payment-amount 2500000000 \\\n--session-hash hash-93d923e336b20a4c4ca14d592b60e5bd3fe330775618290104f9beb326db7ae2 \\\n--session-entry-point add_bid \\\n--session-arg \"public_key:public_key='01c297d2931fec7e22b2fb1ae3ca5afdfacc2c82ba501e8ed158eecef82b4dcdee'\" \\\n--session-arg \"amount:U512='$[10000 * 1000000000]'\" \\\n--session-arg \"delegation_rate:u8='10'\"\n```\n\n----------------------------------------\n\nTITLE: Transferring CSPR Tokens - Rust - rust\nDESCRIPTION: Implements a Rust async function to send a CSPR transfer using casper_client. It configures DeployStrParams and PaymentStrParams, using the secret key file, RPC node address, and deploy parameters, then awaits transfer response. Tokio runtime is required. Inputs: deployment and payment settings, recipient. Outputs: deploy response printed.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/versioned_docs/version-2.0.0/developers/dapps/sdk/client-library-usage.md#2025-04-22_snippet_13\n\nLANGUAGE: rust\nCODE:\n```\nextern crate casper_client;\nasync fn send_transfer(){\n    let maybe_rpc_id: &str = \"\";\n    let node_address: &str = \"http://135.181.216.142:7777\";\n    let verbosity_level: u64 = 1;\n    let amount: &str = \"2500000000\";\n    let target_account: &str = recipient;\n    let transfer_id: &str = \"1\";\n    let deploy_params: casper_client::DeployStrParams = casper_client::DeployStrParams{\n        secret_key:\"./sk_testnet.pem\",\n        timestamp:\"\",\n        ttl:\"50s\",\n        gas_price:\"1000000000\",\n        chain_name:\"casper\", // or \"casper-test\" for testnet\n        dependencies: Vec::new(),\n        session_account: \"01daad67ebbcb725e02a1955a6617512b311435a21ca6d523085aa015d2d1b473a\"\n\n    };\n    let recipient: &str = \"0106ca7c39cd272dbf21a86eeb3b36b7c26e2e9b94af64292419f7862936bca2ca\";\n    let payment_params: casper_client::PaymentStrParams = casper_client::PaymentStrParams::with_amount(amount);\n    let result = casper_client::transfer(maybe_rpc_id, node_address, verbosity_level, amount, target_account, transfer_id, deploy_params, payment_params).await.unwrap();\n    println!(\"Deploy response: {:?}\", result);\n}\n\n#[tokio::main]\nasync fn main(){\n    send_transfer().await;\n}\n```\n\n----------------------------------------\n\nTITLE: Describing Delegator Structure and Serialization (Casper Network)\nDESCRIPTION: Defines the Delegator structure, representing a party delegating stake. It includes the delegator's public key, staked amount (U512), bonding purse (URef), the validator's public key, and an optional vesting schedule. The description specifies the serialization type for each field (PublicKey, U512, URef, Option).\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/versioned_docs/version-2.0.0/concepts/serialization/types.md#2025-04-22_snippet_15\n\nLANGUAGE: Text\nCODE:\n```\n## Delegator {#delegator}\n\nRepresents a party delegating their stake to a validator (or \"delegatee\"). The structure consists of the following fields:\n\n-   `delegator_public_key`: The public key of the delegator, serialized as a [`PublicKey`](./primitives.md#clvalue-publickey).\n\n-   `staked_amount`: The amount staked by the delegator, serialized as a [`U512` value](./primitives.md#clvalue-numeric).\n\n-   `bonding_purse`: The bonding purse associated with the delegation. It serializes as a [`URef` value](./primitives.md#clvalue-uref).\n\n-   `validator_public_key`: The public key of the validator that the delegator will be delegating to, serialized as a [`PublicKey`](./primitives.md#clvalue-publickey).\n\n-   `vesting_schedule`: The vesting schedule for the provided delegator bid. `None` if it is a non-genesis validator. It serializes as an [`Option`](./primitives.md#clvalue-option).\n```\n\n----------------------------------------\n\nTITLE: Adding an Authorization Key to an Account in Rust\nDESCRIPTION: This Rust snippet prepares and executes a deploy item to add `account_addr_1` as an associated key to the `DEFAULT_ACCOUNT_ADDR`. It uses the `ADD_KEYS_WASM` session code, specifies the `ASSOCIATED_ACCOUNT` argument, sets the payment, authorization key (default account), and target address. The deploy is then built into an execute request and executed using the test builder, expecting success.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/versioned_docs/version-2.0.0/resources/advanced/list-auth-keys-tutorial.md#2025-04-22_snippet_8\n\nLANGUAGE: rust\nCODE:\n```\n// Add account_addr_1 to the default account's associated keys\nlet session_code = PathBuf::from(ADD_KEYS_WASM);\nlet session_args = runtime_args! {\n    ASSOCIATED_ACCOUNT => account_addr_1\n};\n\nlet add_keys_deploy_item = DeployItemBuilder::new()\n    .with_empty_payment_bytes(runtime_args! {ARG_AMOUNT => *DEFAULT_PAYMENT})\n    .with_authorization_keys(&[*DEFAULT_ACCOUNT_ADDR])\n    .with_address(*DEFAULT_ACCOUNT_ADDR)\n    .with_session_code(session_code, session_args)\n    .build();\n\nlet add_keys_execute_request =\n    ExecuteRequestBuilder::from_deploy_item(add_keys_deploy_item).build();\n\nbuilder\n    .exec(add_keys_execute_request)\n    .commit()\n    .expect_success();\n```\n\n----------------------------------------\n\nTITLE: Storing Contract Version and Hash in Rust\nDESCRIPTION: This snippet shows how to store the newly created contract version and contract hash under the factory contract's named keys. This is done within the factory contract context.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/versioned_docs/version-2.0.0/developers/writing-onchain-code/factory-pattern.md#2025-04-22_snippet_4\n\nLANGUAGE: rust\nCODE:\n```\nruntime::put_key(CONTRACT_VERSION, storage::new_uref(contract_version).into());\nruntime::put_key(&name, contract_hash.into());\n```\n\n----------------------------------------\n\nTITLE: Extracting AccountHash and ContractHash from AddressableEntity Key in Rust\nDESCRIPTION: This snippet demonstrates how to extract AccountHash or ContractHash from a Key::AddressableEntity using pattern matching in Rust. It handles both account and contract key types.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/condor/addressable-entity.md#2025-04-22_snippet_2\n\nLANGUAGE: rust\nCODE:\n```\n//For Accounts\nlet account_hash = match addressable_entity_key {\n    Key::AddressableEntity(EntityAddr::Account(hash)) => hash,\n    _ => panic!(\"Not an account key\"), \n};\n//For Contracts\nlet contract_hash = match addressable_entity_key {\n    Key::AddressableEntity(EntityAddr::SmartContract(hash)) => hash,\n    _ => panic!(\"Not a contract key\"), \n};\n```\n\n----------------------------------------\n\nTITLE: Structuring Rust Tests within a `#[cfg(test)]` Module\nDESCRIPTION: Demonstrates the standard Rust practice for organizing test code. The `#[cfg(test)]` attribute ensures the enclosed `mod tests { ... }` module and its contents are only compiled and included when running tests via `cargo test`.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/versioned_docs/version-1.5.X/developers/writing-onchain-code/testing-session-code.md#2025-04-22_snippet_2\n\nLANGUAGE: rust\nCODE:\n```\n#[cfg(test)]\nmod tests {\n    // The entire test program resides here\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Ed25519 Keypair in Python with pycspr - Python\nDESCRIPTION: Creates a new Ed25519 keypair using pycspr. Requires the pycspr.crypto module. The resulting keypair object contains public and private keys. Change ED25519 to SECP256K1 to use that algorithm.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/versioned_docs/version-1.5.X/developers/dapps/sdk/client-library-usage.md#2025-04-22_snippet_6\n\nLANGUAGE: python\nCODE:\n```\nfrom pycspr.crypto import KeyAlgorithm, get_key_pair\nkeypair = get_key_pair(KeyAlgorithm.ED25519)\n```\n\n----------------------------------------\n\nTITLE: Transferring Tokens with transfer_from_purse_to_purse - Rust\nDESCRIPTION: This session code defines a call() entry point that transfers tokens from the deployer's main purse to a specified target purse. It expects named arguments ARG_TARGET_PURSE (URef) and ARG_AMOUNT (U512). Source purse is acquired from account utilities, and the system transfer is invoked; error handling uses unwrap_or_revert. Used for intra-account fund movement inside Casper contracts.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/docs/developers/writing-onchain-code/writing-session-code.md#2025-04-22_snippet_6\n\nLANGUAGE: rust\nCODE:\n```\n#[no_mangle]\npub extern \"C\" fn call() {\n    let target_purse: URef = runtime::get_named_arg(ARG_TARGET_PURSE);\n    let amount: U512 = runtime::get_named_arg(ARG_AMOUNT);\n\n    let source_purse = account::get_main_purse();\n\n    system::transfer_from_purse_to_purse(source_purse, target_purse, amount, None)\n        .unwrap_or_revert();\n}\n```\n\n----------------------------------------\n\nTITLE: Calling a Contract Entry Point Using Session Code in Rust\nDESCRIPTION: This code creates a session code execution request using the standard builder, targeting the installed contract via hash and calling the increment entry point. It's essential when distinguishing between native contract calls and session code invocations, as is common in Casper workflows. Inputs include sender address, session Wasm, and runtime arguments (e.g., contract hash). The test expects this call to succeed.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/versioned_docs/version-1.5.X/developers/writing-onchain-code/testing-contracts.md#2025-04-22_snippet_9\n\nLANGUAGE: rust\nCODE:\n```\n    // Use session code to increment the counter.\n    let session_code_request = ExecuteRequestBuilder::standard(\n        *DEFAULT_ACCOUNT_ADDR,\n        COUNTER_CALL_WASM,\n        runtime_args! {\n            CONTRACT_KEY => contract_v1_hash\n        },\n    )\n    .build();\n\n    builder.exec(session_code_request)\n        .expect_success()\n        .commit();\n```\n\n----------------------------------------\n\nTITLE: Creating a New Contract with a Package Name in Rust\nDESCRIPTION: Rust code snippet illustrating how to create a new contract using `storage::new_contract` from the `casper-contract` crate. It demonstrates associating the contract with entry points, named keys, a specific package name (`counter_package_name`), and an access URef, returning the contract hash and version. This setup is prerequisite for calling the contract by its package name.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/versioned_docs/version-1.5.X/developers/cli/calling-contracts.md#2025-04-22_snippet_13\n\nLANGUAGE: rust\nCODE:\n```\n    let (stored_contract_hash, contract_version) =\n        storage::new_contract(counter_entry_points, \n            Some(counter_named_keys), \n            Some(\"counter_package_name\".to_string()),\n            Some(\"counter_access_uref\".to_string())\n    );\n```\n\n----------------------------------------\n\nTITLE: Transferring a CEP-78 NFT Token\nDESCRIPTION: Example showing how to transfer an NFT token from one account to another. The code specifies the token ID, source account, and target account, then creates and sends a deploy to execute the transfer.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/versioned_docs/version-2.0.0/resources/tokens/cep78/js-tutorial.md#2025-04-22_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nconst transferDeploy = cc.transfer(\n    {\n      tokenId: \"0\",\n      source: FAUCET_KEYS.publicKey,\n      target: USER1_KEYS.publicKey,\n    },\n    { useSessionCode: true },\n    \"13000000000\",\n    FAUCET_KEYS.publicKey,\n    [FAUCET_KEYS]\n  );\n\n  const transferDeployHash = await transferDeploy.send(\"http://localhost:11101/rpc\");\n```\n\n----------------------------------------\n\nTITLE: Querying State Root Hash in Bash\nDESCRIPTION: This Bash command retrieves the current state root hash from a Casper node, which is necessary for subsequent queries to the global state.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/versioned_docs/version-2.0.0/resources/beginner/upgrade-contract.md#2025-04-22_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\ncasper-client get-state-root-hash --node-address http://[NODE_IP]:7777\n```\n\n----------------------------------------\n\nTITLE: Installing CEP-78 Contract using JavaScript Client\nDESCRIPTION: Example of installing a CEP-78 contract using the JavaScript client. It demonstrates setting various parameters for the NFT collection and sending the installation deploy.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/versioned_docs/version-1.5.X/resources/tokens/cep78/js-tutorial.md#2025-04-22_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nconst cc = new CEP78Client(process.env.NODE_URL!, process.env.NETWORK_NAME!);\n\nconst installDeploy = await cc.install(\n  {\n    collectionName: \"my-collection\",\n    collectionSymbol: \"MY-NFTS\",\n    totalTokenSupply: \"1000\",\n    ownershipMode: NFTOwnershipMode.Transferable,\n    nftKind: NFTKind.Physical,\n    jsonSchema: {\n      properties: {\n        color: { name: \"color\", description: \"\", required: true },\n        size: { name: \"size\", description: \"\", required: true },\n        material: { name: \"material\", description: \"\", required: true },\n        condition: { name: \"condition\", description: \"\", required: false },\n      },\n    },\n    nftMetadataKind: NFTMetadataKind.CustomValidated,\n    identifierMode: NFTIdentifierMode.Ordinal,\n    metadataMutability: MetadataMutability.Immutable,\n    mintingMode: MintingMode.Installer,\n    ownerReverseLookupMode: OwnerReverseLookupMode.Complete\n  },\n  \"250000000000\",\n  FAUCET_KEYS.publicKey,\n  [FAUCET_KEYS]\n);\n\nconst hash = await installDeploy.send(process.env.http://localhost:11101/rpc);\n```\n\n----------------------------------------\n\nTITLE: Deploying Delegate Contract in JavaScript\nDESCRIPTION: JavaScript code to deploy the delegate contract using the Casper JS SDK. It demonstrates loading the WASM file, setting up runtime arguments, and submitting the deploy.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/docs/developers/dapps/sdk/client-library-usage.md#2025-04-22_snippet_19\n\nLANGUAGE: javascript\nCODE:\n```\nconst { CasperClient, Contracts, RuntimeArgs, CLValueBuilder, CLPublicKey } = require(\"casper-js-sdk\");\nconst fs = require(\"fs\");\n\nconst casperClient = new CasperClient(\"http://NODE_ADDRESS:7777/rpc\")\nconst contract = new Contracts.Contract(casperClient)\n\nconst contractWasm = new Uint8Array(fs.readFileSync(\"./casper-node/target/wasm32-unknown-unknown/release/delegate.wasm\").buffer);\n\nconst runtimeArguments = RuntimeArgs.fromMap({\n    \"amount\": CLValueBuilder.u512(500e9), // Minimum delegation amount: 500 CSPR\n    \"delegator\": keypair.publicKey,\n    \"validator\": CLPublicKey.fromHex(\"01e8c84f4fbb58d37991ef373c08043a45c44cd7f499453fa2bd3e141cc0113b3c\")\n});\n\nconst deploy = contract.install(\n    contractWasm,\n    runtimeArguments,\n    \"5000000000\", // Gas payment (5 CSPR)\n    keypair.publicKey,\n    \"casper\", // or \"casper-test\" for testnet\n    [keypair]\n);\n\n(async () => {\n    console.log(await casperClient.putDeploy(deploy));\n})();\n```\n\n----------------------------------------\n\nTITLE: Example: Calling Latest Contract Version by Package Name with Arguments (Bash)\nDESCRIPTION: Demonstrates calling the `check_balance_of` entry point within the `erc20_test_call` contract package using `casper-client put-deploy`. By omitting `--session-version`, it defaults to the latest enabled version. The example also shows how to pass runtime arguments (`token_contract` and `address`) using the `--session-arg` flag.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/versioned_docs/version-1.5.X/developers/cli/calling-contracts.md#2025-04-22_snippet_15\n\nLANGUAGE: bash\nCODE:\n```\n    casper-client put-deploy \\\n    --node-address http://3.143.158.19:7777 \\\n    --chain-name integration-test \\\n    --secret-key ~/casper/demo/user_a/secret_key.pem \\\n    --payment-amount 1000000000 \\\n    --session-package-name \"erc20_test_call\" \\\n    --session-entry-point \"check_balance_of\" \\\n    --session-arg \"token_contract:account_hash='account-hash-b568f50a64acc8bbe43462ffe243849a88111060b228dacb8f08d42e26985180'\" \\\n    --session-arg \"address:key='account-hash-303c0f8208220fe9a4de40e1ada1d35fdd6c678877908f01fddb2a56502d67fd'\" \n```\n\n----------------------------------------\n\nTITLE: Defining CLValue Structure for Argument Passing - JSON Schema - JSON\nDESCRIPTION: Specifies the 'CLValue' type as an object containing serialized bytes, a type indicator, and an optional parsed field for convenience. Requires that 'bytes' and 'cl_type' are provided. The value encapsulates type-erased binary data and associated type metadata for use in smart contract argument passing.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/condor/jsonrpc-comp/rpc-2.0/schema/components.json.md#2025-04-22_snippet_8\n\nLANGUAGE: JSON\nCODE:\n```\n{\n    \"CLValue\": {\n        \"description\": \"A Casper value, i.e. a value which can be stored and manipulated by smart contracts.\\n\\nIt holds the underlying data as a type-erased, serialized `Vec<u8>` and also holds the CLType of the underlying data as a separate member.\\n\\nThe `parsed` field, representing the original value, is a convenience only available when a CLValue is encoded to JSON, and can always be set to null if preferred.\",\n        \"type\": \"object\",\n        \"required\": [\n            \"bytes\",\n            \"cl_type\"\n        ],\n        \"properties\": {\n            \"cl_type\": {\n                \"$ref\": \"#/components/schemas/CLType\"\n            },\n            \"bytes\": {\n                \"type\": \"string\"\n            },\n            \"parsed\": true\n        },\n        \"additionalProperties\": false\n    }\n}\n\n```\n\n----------------------------------------\n\nTITLE: Cloning and Preparing the Tutorial Example Repository (Bash)\nDESCRIPTION: These Bash commands instruct the user on how to clone the `tutorials-example-wasm` repository from GitHub, navigate into the specific `authorization-keys-example` directory, set up the Rust environment using `make prepare`, and build/run the tests using `make test`.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/versioned_docs/version-1.5.X/resources/advanced/list-auth-keys-tutorial.md#2025-04-22_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n```bash\ngit clone https://github.com/casper-ecosystem/tutorials-example-wasm\ncd tutorials-example-wasm/authorization-keys-example\nmake prepare\nmake test\n```\n```\n\n----------------------------------------\n\nTITLE: Defining Transfer Schema Object with References in JSON (Casper Network)\nDESCRIPTION: Defines the structure of a 'Transfer' object for the Casper network, specifying required parameters such as amount, deploy_hash, from, gas, source, and target. Dependencies include reusable schema components (DeployHash, AccountHash, URef, U512) referenced via $ref to ensure consistency and type validation. Inputs are objects adhering to this schema; outputs are validated JSON objects or detailed error messages if the schema is not satisfied. Limitations include strict enforcement of types, required fields, and prohibition of additional properties.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/condor/jsonrpc-comp/rpc-1.5/schema/Transfer.json.md#2025-04-22_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"description\": \"Represents a transfer from one purse to another\",\n    \"type\": \"object\",\n    \"required\": [\n        \"amount\",\n        \"deploy_hash\",\n        \"from\",\n        \"gas\",\n        \"source\",\n        \"target\"\n    ],\n    \"properties\": {\n        \"deploy_hash\": {\n            \"description\": \"Deploy that created the transfer\",\n            \"allOf\": [\n                {\n                    \"$ref\": \"#/components/schemas/DeployHash\"\n                }\n            ]\n        },\n        \"from\": {\n            \"description\": \"Account from which transfer was executed\",\n            \"allOf\": [\n                {\n                    \"$ref\": \"#/components/schemas/AccountHash\"\n                }\n            ]\n        },\n        \"to\": {\n            \"description\": \"Account to which funds are transferred\",\n            \"anyOf\": [\n                {\n                    \"$ref\": \"#/components/schemas/AccountHash\"\n                },\n                {\n                    \"type\": \"null\"\n                }\n            ]\n        },\n        \"source\": {\n            \"description\": \"Source purse\",\n            \"allOf\": [\n                {\n                    \"$ref\": \"#/components/schemas/URef\"\n                }\n            ]\n        },\n        \"target\": {\n            \"description\": \"Target purse\",\n            \"allOf\": [\n                {\n                    \"$ref\": \"#/components/schemas/URef\"\n                }\n            ]\n        },\n        \"amount\": {\n            \"description\": \"Transfer amount\",\n            \"allOf\": [\n                {\n                    \"$ref\": \"#/components/schemas/U512\"\n                }\n            ]\n        },\n        \"gas\": {\n            \"description\": \"Gas\",\n            \"allOf\": [\n                {\n                    \"$ref\": \"#/components/schemas/U512\"\n                }\n            ]\n        },\n        \"id\": {\n            \"description\": \"User-defined id\",\n            \"type\": [\n                \"integer\",\n                \"null\"\n            ],\n            \"format\": \"uint64\",\n            \"minimum\": 0\n        }\n    },\n    \"additionalProperties\": false\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Initial Call Entry Point in Rust\nDESCRIPTION: Core implementation of the contract's call entry point that sets up the contract metadata, entry points and storage. This establishes the contract structure for cross-contract communication.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/docs/resources/advanced/cross-contract.md#2025-04-22_snippet_11\n\nLANGUAGE: rust\nCODE:\n```\n#[no_mangle]\npub extern \"C\" fn call() {\n    \n    // Create the list of required runtime arguments for the given entry point.\n    let mut vec = Vec::new();\n    vec.push(Parameter::new(\"new_message\", CLType::String));\n    vec.push(Parameter::new(\"hello_world_contract\", CLType::Key));\n\n    // In the named keys of the contract, add a key for the count.\n    let mut named_keys = NamedKeys::new();\n\n    // Create an Entry Point Object\n    let mut entry_points = EntryPoints::new();\n\n    // Add the entry point metadata definition.\n    entry_points.add_entry_point(EntryPoint::new(\n       \"call_contract_2\",\n       vec,\n       CLType::Unit,\n       EntryPointAccess::Public,\n       EntryPointType::Contract\n    ));\n\n    // The contract is stored in the global state\n    let (stored_contract_hash, _contract_version) = storage::new_contract(\n       entry_points,                                        // entry points\n       Some(named_keys),                                    // named keys \n       Some(\"contract2_package_name\".to_string()),          // package name\n       Some(\"contract2_access_uref\".to_string())            // access uref\n    );\n\n    // To access from the account - named keys of the account\n    runtime::put_key(\"cross_contract_2\", stored_contract_hash.into());\n}\n```\n\n----------------------------------------\n\nTITLE: Burning CEP-18 Tokens via Casper Client\nDESCRIPTION: Sends a deploy using `casper-client` to call the `burn` entry point of a CEP-18 contract package, provided the contract allows burning and the caller has permission. This destroys tokens from the specified `owner` account, decreasing the total supply. Requires node address, caller's (burner) secret key, CEP-18 package name, owner account hash (from which to burn), the amount to burn, chain name, and payment amount.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/versioned_docs/version-1.5.X/resources/tokens/cep18/transfer.md#2025-04-22_snippet_22\n\nLANGUAGE: bash\nCODE:\n```\ncasper-client put-deploy -n http://<NODE IP>:<PORT> \\\n--secret-key ~/casper/demo/user_a/secret_key.pem \\\n--session-package-name \"cep18_contract_package_CEP18\" \\\n--session-entry-point \"burn\" \\\n// This is the account that the tokens will be burned from.\n--session-arg \"owner:key='account-hash-683f53f56926f54ef9584b07585b025c68415dc05f7b2e56749153574b83d5cd'\" \\\n// This is the number of CEP-18 tokens to remove from the total supply.\n--session-arg \"amount:U256='10'\" \\\n--chain-name <CHAIN NAME> \\\n--payment-amount 1000000000\n```\n\n----------------------------------------\n\nTITLE: Sample Request for Retrieving Entity Details (Entity Identifier) in Bash\nDESCRIPTION: Example usage of the `casper-client get-entity` command specifying the entity identifier obtained from a previous `query-global-state` call to fetch detailed account information.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/versioned_docs/version-2.0.0/developers/cli/querying-global-state.md#2025-04-22_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\n```bash\ncasper-client get-entity \\\n--node-address http://localhost:11101 \\\n--entity-identifier entity-account-6a56c4eee172043975aea72221eaf09f3c3a24f09a379935e44c9979f1ae9463\n```\n```\n\n----------------------------------------\n\nTITLE: Defining JSON Schema Structure for Body Object\nDESCRIPTION: Defines a JSON schema for a `Body` representation within the Casper Network. This schema requires three properties: `deploy_hashes`, `proposer`, and `transfer_hashes`. The `proposer` is linked to a `PublicKey` reference, while `deploy_hashes` and `transfer_hashes` are arrays referencing `DeployHash`. Additional properties are not allowed, ensuring compliance with the defined schema.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/condor/jsonrpc-comp/rpc-1.5/schema/JsonBlockBody.json.md#2025-04-22_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"description\": \"A JSON-friendly representation of `Body`\",\n    \"type\": \"object\",\n    \"required\": [\n        \"deploy_hashes\",\n        \"proposer\",\n        \"transfer_hashes\"\n    ],\n    \"properties\": {\n        \"proposer\": {\n            \"$ref\": \"#/components/schemas/PublicKey\"\n        },\n        \"deploy_hashes\": {\n            \"type\": \"array\",\n            \"items\": {\n                \"$ref\": \"#/components/schemas/DeployHash\"\n            }\n        },\n        \"transfer_hashes\": {\n            \"type\": \"array\",\n            \"items\": {\n                \"$ref\": \"#/components/schemas/DeployHash\"\n            }\n        }\n    },\n    \"additionalProperties\": false\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Query Component to Fetch Blockchain Data\nDESCRIPTION: This React component uses 'axios' to send a GET request to a backend endpoint, querying the smart contract data related to the user's account. It derives the account hash from the given public key and alerts the user on successful data retrieval.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/versioned_docs/version-1.5.X/developers/dapps/template-frontend.md#2025-04-22_snippet_10\n\nLANGUAGE: jsx\nCODE:\n```\nimport axios from \"axios\";\nimport { CLPublicKey } from \"casper-js-sdk\";\n\nconst Query = (props) => {\n  return <button onClick={ () => query(props) }>Query</button>;\n}\n\nconst query = (props) => {\n  const accountHash = CLPublicKey.fromHex(props.publicKey).toAccountHashStr().substring(13);\n  axios.get(\"/queryMessage?accountHash=\" + accountHash).then((response) => {\n    alert(response.data)\n  }).catch((error) => {\n    console.error(error.message);\n  });\n}\n\nexport default Query;\n```\n\n----------------------------------------\n\nTITLE: Defining AvailableBlockRange Schema - OpenAPI/Swagger - JSON\nDESCRIPTION: Specifies an 'AvailableBlockRange' object schema defining inclusive high and low bounds for blockchain block height ranges. Restricts to two required unsigned integer properties ('high', 'low') with minimum value constraints, disallows unrelated properties, and documents usage for block range queries or reporting.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/condor/jsonrpc-comp/rpc-1.5/schema/components.json.md#2025-04-22_snippet_53\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"description\": \"An unbroken, inclusive range of blocks.\",\n  \"type\": \"object\",\n  \"required\": [\n    \"high\",\n    \"low\"\n  ],\n  \"properties\": {\n    \"low\": {\n      \"description\": \"The inclusive lower bound of the range.\",\n      \"type\": \"integer\",\n      \"format\": \"uint64\",\n      \"minimum\": 0.0\n    },\n    \"high\": {\n      \"description\": \"The inclusive upper bound of the range.\",\n      \"type\": \"integer\",\n      \"format\": \"uint64\",\n      \"minimum\": 0.0\n    }\n  },\n  \"additionalProperties\": false\n}\n```\n\n----------------------------------------\n\nTITLE: Transferring Tokens from an Allowance using Casper Client - JSON\nDESCRIPTION: This JSON-formatted command demonstrates how to use casper-client to submit a deploy transferring CEP-18 tokens from another account's balance based on a pre-approved allowance. It requires a valid node endpoint, correct chain name, the spender's secret key, session hash to the CEP-18 contract, the transfer_from entry point, and specific owner/recipient/amount arguments. Comments in the snippet explain each line; exceeding the approved allowance will cause the deploy to fail.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/versioned_docs/version-2.0.0/resources/tokens/cep18/transfer.md#2025-04-22_snippet_14\n\nLANGUAGE: json\nCODE:\n```\ncasper-client put-deploy -n http://<NODE IP>:<PORT> \\\n--chain-name <CHAIN NAME> \\\n// This is the secret key for the account that is spending their `allowance` from another account's balance.\n--secret-key ~/casper/demo/user_a/secret_key.pem \\\n// This is the CEP-18 token contract.\n--session-hash hash-05d893e76c731729fc26339e5a970bd79fbf4a6adf743c8385431fb494bff45e \\\n--session-entry-point \"transfer_from\" \\\n// This is the account hash of the account that holds the CEP-18 in their balance.\n--session-arg \"owner:key='account-hash-39f15c23df9be1244572bb499fac62cbcad3cab2dc1438609842f602f943d7d2'\" \\\n// This is the account hash of the account that will receive the transferred CEP-18 tokens.\n--session-arg \"recipient:key='account-hash-17192017d32db5dc9f598bf8ac6ac35ee4b64748669b00572d88335941479513'\" \\\n// This is the amount of tokens to be transferred. If this amount exceeds the `allowance` of the account sending the Deploy, it will fail.\n--session-arg \"amount:u256='10'\" \\\n--payment-amount \"10000000000\"\n```\n\n----------------------------------------\n\nTITLE: Storing Contract Hash with put_key and Overwriting with storage::write in Rust\nDESCRIPTION: This Rust snippet demonstrates storing a contract hash in the global state using `runtime::put_key` and subsequently overwriting the stored value with `storage::write`. The `put_key` function stores the contract hash under a named key, while `storage::write` updates the value in a previously created URef, stored as a `NamedKey`.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/versioned_docs/version-1.5.X/resources/advanced/storage-workflow.md#2025-04-22_snippet_0\n\nLANGUAGE: rust\nCODE:\n```\n\n    // Store contract hash under a Named key CONTRACT_HASH\n    runtime::put_key(CONTRACT_HASH, contract_hash.into());\n\n    // Store !MY_STORED_VALUE (false) as init value/type into a new URef\n    let my_value_uref = storage::new_uref(!MY_STORED_VALUE);\n\n    // Store MY_STORED_VALUE (true) under the URef value\n    storage::write(my_value_uref, MY_STORED_VALUE);\n\n    // Store the Uref under a Named key MY_STORED_VALUE_UREF\n    let my_value_key: Key = my_value_uref.into();\n    runtime::put_key(MY_STORED_VALUE_UREF, my_value_key);\n}\n\n```\n\n----------------------------------------\n\nTITLE: Retrieving State Root Hash in Casper Network via RPC\nDESCRIPTION: Example of using the chain_get_state_root_hash RPC endpoint to retrieve the state root hash at a specific block height. The response includes the API version and the hex-encoded hash of the state root.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/condor/jsonrpc-comp/rpc-1.5/schema.json.md#2025-04-22_snippet_20\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"name\": \"block_identifier\",\n  \"value\": {\n    \"Height\": 10\n  }\n}\n```\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"api_version\": \"1.5.6\",\n  \"state_root_hash\": \"0808080808080808080808080808080808080808080808080808080808080808\"\n}\n```\n\n----------------------------------------\n\nTITLE: Calling Contract Entry Point by Name Key - Casper CLI - Rust\nDESCRIPTION: Shows general usage of casper-client to deploy to a contract by its registered name key, providing node address, chain name, session name, entry point, and authentication details. Requires correct association of the contract's name key, as well as node and key access. Primary inputs: session-name and session-entry-point. Intended output is a deploy to the smart contract.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/docs/developers/cli/calling-contracts.md#2025-04-22_snippet_8\n\nLANGUAGE: rust\nCODE:\n```\ncasper-client put-deploy \\\n    --node-address [NODE_SERVER_ADDRESS] \\\n    --chain-name [CHAIN_NAME] \\\n    --secret-key [KEY_PATH]/secret_key.pem \\\n    --payment-amount [PAYMENT_AMOUNT_IN_MOTES] \\\n    --session-name [NAMED_KEY_FOR_SMART_CONTRACT] \\\n    --session-entry-point [ENTRY_POINT_FUNCTION]\n```\n\n----------------------------------------\n\nTITLE: Generating Account Keys using Casper JS SDK\nDESCRIPTION: This JavaScript function generates account keys (a public/private key pair) for signing deploys on the Casper network. It saves the keys as PEM files. The Keys module from Casper JS SDK is a prerequisite to run this code.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/versioned_docs/version-2.0.0/developers/dapps/sdk/script-sdk.md#2025-04-22_snippet_2\n\nLANGUAGE: JavaScript\nCODE:\n```\nconst fs = require(\"fs\");\nconst path = require(\"path\");\nconst { Keys } = require(\"casper-js-sdk\");\n\nconst createAccountKeys = () => {\n    // Generating keys\n    const edKeyPair = Keys.Ed25519.new();\n    const { publicKey, privateKey } = edKeyPair;\n\n    // Create a hexadecimal representation of the public key\n    const accountAddress = publicKey.toHex();\n\n    // Get the account hash (Uint8Array) from the public key\n    const accountHash = publicKey.toAccountHash();\n\n    // Store keys as PEM files\n    const publicKeyInPem = edKeyPair.exportPublicKeyInPem();\n    const privateKeyInPem = edKeyPair.exportPrivateKeyInPem();\n\n    const folder = path.join(\"./\", \"casper_keys\");\n\n    if (!fs.existsSync(folder)) {\n        const tempDir = fs.mkdirSync(folder);\n    }\n\n    fs.writeFileSync(folder + \"/\" + accountAddress + \"_public.pem\", publicKeyInPem);\n    fs.writeFileSync(folder + \"/\" + accountAddress + \"_private.pem\", privateKeyInPem);\n\n    return accountAddress;\n};\n\nconst newAccountAddress = createAccountKeys();\n```\n\n----------------------------------------\n\nTITLE: Installing a Casper Contract in a Test Environment\nDESCRIPTION: This snippet demonstrates how to install a Casper contract in a test environment using the ExecuteRequestBuilder. It simulates the process of installing the contract on the chain.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/versioned_docs/version-2.0.0/developers/writing-onchain-code/testing-contracts.md#2025-04-22_snippet_4\n\nLANGUAGE: rust\nCODE:\n```\nlet contract_v1_installation_request = ExecuteRequestBuilder::standard(\n    *DEFAULT_ACCOUNT_ADDR,\n    COUNTER_V1_WASM,\n    runtime_args! {},\n)\n.build();\n\nbuilder\n    .exec(contract_v1_installation_request)\n    .expect_success()\n    .commit();\n```\n\n----------------------------------------\n\nTITLE: Querying Global State Request Example in Casper Network RPC API\nDESCRIPTION: Example JSON request format for the query_global_state endpoint used to retrieve values stored under specified keys in the global state using a block hash identifier.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/docs/developers/json-rpc/json-rpc-informational.md#2025-04-22_snippet_20\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"id\": 1,\n  \"jsonrpc\": \"2.0\",\n  \"method\": \"query_global_state\",\n  \"params\": [\n    {\n      \"name\": \"state_identifier\",\n      \"value\": {\n        \"BlockHash\": \"0744fcb72af43c5cc372039bc5a8bfee48808a9ce414acc0d6338a628c20eb42\"\n      }\n    },\n    {\n      \"name\": \"key\",\n      \"value\": \"deploy-af684263911154d26fa05be9963171802801a0b6aff8f199b7391eacb8edc9e1\"\n    },\n    {\n      \"name\": \"path\",\n      \"value\": []\n    }\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Hex-Encoded Hash Digest Type in JSON Schema - JSON\nDESCRIPTION: This JSON snippet defines a schema fragment with a description property and a type of string, specifying that the relevant field should contain a hex-encoded hash digest. There are no external dependencies but usage assumes integration into a larger JSON schema for structured validation. The expected input for this type is any string formatted as a hex digest, and there are no explicit constraints on length or content in the snippet itself, so additional validation may be required elsewhere.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/condor/jsonrpc-comp/rpc-2.0/schema/Digest.json.md#2025-04-22_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\\n    \\\"description\\\": \\\"Hex-encoded hash digest.\\\",\\n    \\\"type\\\": \\\"string\\\"\\n} \n```\n\n----------------------------------------\n\nTITLE: Defining Hex-Encoded Bytes Schema in JSON\nDESCRIPTION: This snippet defines a JSON object used to document or validate fields that hold hex-encoded byte strings. It specifies two properties: 'description', which gives human-readable context, and 'type', explicitly set to 'string' to indicate the value's datatype. No external dependencies are needed, and both fields are required for clarity. This snippet is typically used in API documentation or JSON schema specifications to denote values that should be formatted as hex strings. Inputs and outputs should follow this structure without additional properties.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/condor/jsonrpc-comp/rpc-2.0/schema/Bytes.json.md#2025-04-22_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"description\": \"Hex-encoded bytes.\",\n    \"type\": \"string\"\n}\n```\n\n----------------------------------------\n\nTITLE: Defining info_get_peers RPC Endpoint Schema in JSON\nDESCRIPTION: JSON schema specification for the info_get_peers RPC endpoint. This endpoint takes no parameters and returns a list of connected peers with their node IDs and network addresses. The response includes API version information and follows a strictly defined schema.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/condor/jsonrpc-comp/rpc-1.5/info_get_peers.json.md#2025-04-22_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"name\": \"info_get_peers\",\n  \"summary\": \"returns a list of peers connected to the node\",\n  \"params\": [],\n  \"result\": {\n    \"name\": \"info_get_peers_result\",\n    \"schema\": {\n      \"description\": \"Result for \\\"info_get_peers\\\" RPC response.\",\n      \"type\": \"object\",\n      \"required\": [\n        \"api_version\",\n        \"peers\"\n      ],\n      \"properties\": {\n        \"api_version\": {\n          \"description\": \"The RPC API version.\",\n          \"type\": \"string\"\n        },\n        \"peers\": {\n          \"description\": \"The node ID and network address of each connected peer.\",\n          \"$ref\": \"#/components/schemas/PeersMap\"\n        }\n      },\n      \"additionalProperties\": false\n    }\n  },\n  \"examples\": [\n    {\n      \"name\": \"info_get_peers_example\",\n      \"params\": [],\n      \"result\": {\n        \"name\": \"info_get_peers_example_result\",\n        \"value\": {\n          \"api_version\": \"1.5.6\",\n          \"peers\": [\n            {\n              \"node_id\": \"tls:0101..0101\",\n              \"address\": \"127.0.0.1:54321\"\n            }\n          ]\n        }\n      }\n    }\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Handling Deploy Processed Events in Casper Network using Go SDK\nDESCRIPTION: Shows how to handle deploy processed events using the Server-Sent Events (SSE) client. Registers a handler for deploy processed events and processes them asynchronously.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/docs/developers/dapps/sdk/go-sdk.md#2025-04-22_snippet_1\n\nLANGUAGE: go\nCODE:\n```\npackage main\n\nimport (\n    \"context\"\n    \"log\"\n\n    \"github.com/make-software/casper-go-sdk/sse\"\n)\n\nfunc main() {\n    client := sse.NewClient(\"https://<Node Address and Port>/events\")\n    defer client.Stop()\n    client.RegisterHandler(\n        sse.DeployProcessedEventType,\n        func(ctx context.Context, rawEvent sse.RawEvent) error {\n            deploy, err := rawEvent.ParseAsDeployProcessedEvent()\n            if err != nil {\n                return err\n            }\n            log.Printf(\"Deploy hash: %s\", deploy.DeployProcessed.DeployHash)\n            return nil\n        })\n    lastEventID := 1234\n    client.Start(context.TODO(), lastEventID)\n}\n```\n\n----------------------------------------\n\nTITLE: Reacting to Contract-Level Events with JavaScript\nDESCRIPTION: This snippet shows how to react to specific contract-level events using the Casper JavaScript SDK. It checks if a transaction's account matches a specific account to determine further actions.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/versioned_docs/version-2.0.0/developers/dapps/monitor-and-consume-events.md#2025-04-22_snippet_3\n\nLANGUAGE: JavaScript\nCODE:\n```\nconst eventHandler = (event) => {\n  if (event.body.TransactionAccepted.header.account == \"012481699f9231e36ecf002675cd7186b48e6a735d10ec1b30f587ca716937752c\") {\n    // Perform an action\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Loading a Secret Key from File in Python with pycspr - Python\nDESCRIPTION: Reads a secret key from a PEM file and loads it into a keypair object using pycspr. Requires valid path and the appropriate KeyAlgorithm. Does not expose private key in code.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/versioned_docs/version-1.5.X/developers/dapps/sdk/client-library-usage.md#2025-04-22_snippet_11\n\nLANGUAGE: python\nCODE:\n```\nimport pycspr\nkeypair = pycspr.parse_private_key(\n    \"./secret_key.pem\",\n    pycspr.crypto.KeyAlgorithm.ED25519\n)\n```\n\n----------------------------------------\n\nTITLE: Calling Casper Contract by Package Name using Casper Client CLI\nDESCRIPTION: This command demonstrates the generic structure for calling a specific entry point within a Casper contract package using the `casper-client put-deploy` command. Key arguments include `--session-package-name` for the target package, `--session-entry-point` for the function to call, and optionally `--session-version` for a specific contract version (defaults to latest if omitted). Requires node address, chain name, secret key, and payment amount.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/docs/developers/cli/calling-contracts.md#2025-04-22_snippet_12\n\nLANGUAGE: bash\nCODE:\n```\ncasper-client put-deploy \\\n    --node-address [NODE_SERVER_ADDRESS] \\\n    --chain-name [CHAIN_NAME] \\\n    --secret-key [KEY_PATH]/secret_key.pem \\\n    --payment-amount [PAYMENT_AMOUNT_IN_MOTES] \\\n    --session-package-name [NAMED_KEY_FOR_PACKAGE] \\\n    --session-entry-point [ENTRY_POINT_FUNCTION] \\\n    --session-version [INTEGER]\n```\n\n----------------------------------------\n\nTITLE: Getting Current State Root Hash using casper-client\nDESCRIPTION: This Bash command uses `casper-client get-state-root-hash` to retrieve the latest state root hash from a Casper node. This hash represents a snapshot of the network's global state and is required for querying specific state items.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/versioned_docs/version-1.5.X/resources/advanced/cross-contract.md#2025-04-22_snippet_23\n\nLANGUAGE: bash\nCODE:\n```\ncasper-client get-state-root-hash --node-address http://136.243.187.84:7777\n\n```\n\n----------------------------------------\n\nTITLE: Cloning the Casper Node Repository using Git\nDESCRIPTION: Provides the necessary Git commands to clone the `casper-node` repository from GitHub and navigate into the cloned directory. This step is a prerequisite for obtaining the `delegate.wasm` contract used for staking.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/docs/developers/dapps/sdk/client-library-usage.md#2025-04-22_snippet_9\n\nLANGUAGE: bash\nCODE:\n```\ngit clone https://github.com/casper-network/casper-node.git\ncd casper-node/\n```\n\n----------------------------------------\n\nTITLE: Calling Latest Version of Casper Contract by Package Name with Arguments using Casper Client CLI\nDESCRIPTION: This example command uses `casper-client put-deploy` to invoke the `check_balance_of` entry point within the `erc20_test_call` contract package. By omitting `--session-version`, it defaults to calling the latest enabled version of the contract. It also demonstrates passing runtime arguments using multiple `--session-arg` flags, specifying the argument name, type, and value.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/docs/developers/cli/calling-contracts.md#2025-04-22_snippet_15\n\nLANGUAGE: bash\nCODE:\n```\n    casper-client put-deploy \\\n    --node-address http://3.143.158.19:7777 \\\n    --chain-name integration-test \\\n    --secret-key ~/casper/demo/user_a/secret_key.pem \\\n    --payment-amount 1000000000 \\\n    --session-package-name \"erc20_test_call\" \\\n    --session-entry-point \"check_balance_of\" \\\n    --session-arg \"token_contract:account_hash='account-hash-b568f50a64acc8bbe43462ffe243849a88111060b228dacb8f08d42e26985180'\" \\\n    --session-arg \"address:key='account-hash-303c0f8208220fe9a4de40e1ada1d35fdd6c678877908f01fddb2a56502d67fd'\" \n```\n\n----------------------------------------\n\nTITLE: Dictionary Identifier Schema Definition - JSON\nDESCRIPTION: JSON Schema definition for dictionary item lookups in Casper Network. Supports multiple lookup methods including Account Named Keys, Contract Named Keys, Entity Named Keys, URef, and Dictionary identifier.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/condor/jsonrpc-comp/rpc-2.0/schema.json.md#2025-04-22_snippet_81\n\nLANGUAGE: json\nCODE:\n```\n\"DictionaryIdentifier\": {\n  \"description\": \"Options for dictionary item lookups.\",\n  \"oneOf\": [...]\n}\n```\n\n----------------------------------------\n\nTITLE: Querying Global State with casper-client (Bash)\nDESCRIPTION: Demonstrates how to use the casper-client command-line tool to query the global state on a Casper blockchain node by contract address. Requires casper-client to be installed, a node address, state root hash, and the contract address hash. Returns basic information about a deployed contract such as hashes, purses, and keys but not named keys or entry points.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/docs/developers/cli/querying-global-state.md#2025-04-22_snippet_9\n\nLANGUAGE: bash\nCODE:\n```\ncasper-client query-global-state \\\n--node-address [NODE_SERVER_ADDRESS] \\\n--state-root-hash [STATE_ROOT_HASH] \\\n--key [CONTRACT_ADDRESS_HASH]\n```\n\n----------------------------------------\n\nTITLE: Burn Function Entry Point for Casper Token Contract\nDESCRIPTION: Entry point definition for the burn function that allows reducing token supply by burning tokens from a specified owner. Takes owner key and amount parameters and requires caller payment.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/docs/developers/cli/sending-transactions.md#2025-04-22_snippet_6\n\nLANGUAGE: JSON\nCODE:\n```\n{\n  \"key\": \"entry-point-v1-entity-contract-363996106630892a964565574fcdfd2435f21a17a3ad1ed2054146e7d8461640-768c370eb010604bd19029a409dca8b5fbf9af9bc14a36c2b294a2a7a922161e\",\n  \"kind\": {\n    \"Write\": {\n      \"EntryPoint\": {\n        \"V1CasperVm\": {\n          \"name\": \"burn\",\n          \"args\": [\n            {\n              \"name\": \"owner\",\n              \"cl_type\": \"Key\"\n            },\n            {\n              \"name\": \"amount\",\n              \"cl_type\": \"U256\"\n            }\n          ],\n          \"ret\": \"Unit\",\n          \"access\": \"Public\",\n          \"entry_point_type\": \"Called\",\n          \"entry_point_payment\": \"Caller\"\n        }\n      }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Building the CEP-18 Fungible Token Contract in Bash\nDESCRIPTION: Commands to navigate to the cep18 directory, prepare the environment, and build the contract to generate the target Wasm file.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/docs/resources/tokens/cep18/full-tutorial.md#2025-04-22_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\ncd cep18\nmake prepare\nmake build-contracts\n```\n\n----------------------------------------\n\nTITLE: Defining Casper Contract Entry Points in JSON\nDESCRIPTION: This JSON snippet defines the structure and parameters for multiple entry points of a Casper Network smart contract. It includes initialization ('init'), NFT operations ('mint', 'transfer', 'burn_mode'), metadata management ('set_token_metadata', 'metadata'), approval checks ('is_approved_for_all', 'set_approval_for_all'), ownership details ('owner_of', 'register_owner'), configuration ('set_variables'), migration ('migrate'), and receipt tracking ('updated_receipts'). Each entry point specifies its arguments with corresponding CL types (e.g., Bool, String, U8, Key, Option<Key>, List, Tuple) and its return type.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/versioned_docs/version-1.5.X/resources/tokens/cep78/using-casper-client/querying-NFTs.md#2025-04-22_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n                \"name\": \"package_operator_mode\",\n                \"cl_type\": \"Bool\"\n              },\n              {\n                \"name\": \"json_schema\",\n                \"cl_type\": \"String\"\n              },\n              {\n                \"name\": \"receipt_name\",\n                \"cl_type\": \"String\"\n              },\n              {\n                \"name\": \"identifier_mode\",\n                \"cl_type\": \"U8\"\n              },\n              {\n                \"name\": \"burn_mode\",\n                \"cl_type\": \"U8\"\n              },\n              {\n                \"name\": \"operator_burn_mode\",\n                \"cl_type\": \"Bool\"\n              },\n              {\n                \"name\": \"nft_metadata_kind\",\n                \"cl_type\": \"U8\"\n              },\n              {\n                \"name\": \"metadata_mutability\",\n                \"cl_type\": \"U8\"\n              },\n              {\n                \"name\": \"owner_reverse_lookup_mode\",\n                \"cl_type\": \"U8\"\n              },\n              {\n                \"name\": \"events_mode\",\n                \"cl_type\": \"U8\"\n              },\n              {\n                \"name\": \"transfer_filter_contract\",\n                \"cl_type\": {\n                  \"Option\": \"Key\"\n                }\n              }\n            ],\n            \"ret\": \"Unit\",\n            \"access\": \"Public\",\n            \"entry_point_type\": \"Contract\"\n          },\n          {\n            \"name\": \"is_approved_for_all\",\n            \"args\": [\n              {\n                \"name\": \"token_owner\",\n                \"cl_type\": \"Key\"\n              },\n              {\n                \"name\": \"operator\",\n                \"cl_type\": \"Key\"\n              }\n            ],\n            \"ret\": \"Bool\",\n            \"access\": \"Public\",\n            \"entry_point_type\": \"Contract\"\n          },\n          {\n            \"name\": \"metadata\",\n            \"args\": [],\n            \"ret\": \"String\",\n            \"access\": \"Public\",\n            \"entry_point_type\": \"Contract\"\n          },\n          {\n            \"name\": \"migrate\",\n            \"args\": [\n              {\n                \"name\": \"cep78_package_key\",\n                \"cl_type\": \"Any\"\n              }\n            ],\n            \"ret\": \"Unit\",\n            \"access\": \"Public\",\n            \"entry_point_type\": \"Contract\"\n          },\n          {\n            \"name\": \"mint\",\n            \"args\": [\n              {\n                \"name\": \"token_owner\",\n                \"cl_type\": \"Key\"\n              },\n              {\n                \"name\": \"token_meta_data\",\n                \"cl_type\": \"String\"\n              }\n            ],\n            \"ret\": {\n              \"Tuple3\": [\n                \"String\",\n                \"Key\",\n                \"String\"\n              ]\n            },\n            \"access\": \"Public\",\n            \"entry_point_type\": \"Contract\"\n          },\n          {\n            \"name\": \"owner_of\",\n            \"args\": [],\n            \"ret\": \"Key\",\n            \"access\": \"Public\",\n            \"entry_point_type\": \"Contract\"\n          },\n          {\n            \"name\": \"register_owner\",\n            \"args\": [],\n            \"ret\": {\n              \"Tuple2\": [\n                \"String\",\n                \"URef\"\n              ]\n            },\n            \"access\": \"Public\",\n            \"entry_point_type\": \"Contract\"\n          },\n          {\n            \"name\": \"revoke\",\n            \"args\": [],\n            \"ret\": \"Unit\",\n            \"access\": \"Public\",\n            \"entry_point_type\": \"Contract\"\n          },\n          {\n            \"name\": \"set_approval_for_all\",\n            \"args\": [\n              {\n                \"name\": \"approve_all\",\n                \"cl_type\": \"Bool\"\n              },\n              {\n                \"name\": \"operator\",\n                \"cl_type\": \"Key\"\n              }\n            ],\n            \"ret\": \"Unit\",\n            \"access\": \"Public\",\n            \"entry_point_type\": \"Contract\"\n          },\n          {\n            \"name\": \"set_token_metadata\",\n            \"args\": [\n              {\n                \"name\": \"token_meta_data\",\n                \"cl_type\": \"String\"\n              }\n            ],\n            \"ret\": \"Unit\",\n            \"access\": \"Public\",\n            \"entry_point_type\": \"Contract\"\n          },\n          {\n            \"name\": \"set_variables\",\n            \"args\": [\n              {\n                \"name\": \"allow_minting\",\n                \"cl_type\": \"Bool\"\n              },\n              {\n                \"name\": \"contract_whitelist\",\n                \"cl_type\": {\n                  \"List\": {\n                    \"ByteArray\": 32\n                  }\n                }\n              },\n              {\n                \"name\": \"acl_whitelist\",\n                \"cl_type\": {\n                  \"List\": \"Key\"\n                }\n              },\n              {\n                \"name\": \"acl_package_mode\",\n                \"cl_type\": \"Bool\"\n              },\n              {\n                \"name\": \"package_operator_mode\",\n                \"cl_type\": \"Bool\"\n              },\n              {\n                \"name\": \"operator_burn_mode\",\n                \"cl_type\": \"Bool\"\n              }\n            ],\n            \"ret\": \"Unit\",\n            \"access\": \"Public\",\n            \"entry_point_type\": \"Contract\"\n          },\n          {\n            \"name\": \"transfer\",\n            \"args\": [\n              {\n                \"name\": \"source_key\",\n                \"cl_type\": \"Key\"\n              },\n              {\n                \"name\": \"target_key\",\n                \"cl_type\": \"Key\"\n              }\n            ],\n            \"ret\": {\n              \"Tuple2\": [\n                \"String\",\n                \"Key\"\n              ]\n            },\n            \"access\": \"Public\",\n            \"entry_point_type\": \"Contract\"\n          },\n          {\n            \"name\": \"updated_receipts\",\n            \"args\": [],\n            \"ret\": {\n              \"List\": {\n                \"Tuple2\": [\n                  \"String\",\n                  \"Key\"\n                ]\n              }\n            },\n            \"access\": \"Public\",\n            \"entry_point_type\": \"Contract\"\n          }\n        ],\n        \"protocol_version\": \"1.5.6\"\n      }\n    },\n    \"merkle_proof\": \"[33244 hex chars]\"\n  }\n}\n```\n```\n\n----------------------------------------\n\nTITLE: Token Staking on Casper Network\nDESCRIPTION: Implementation of token staking functionality using the delegate contract. Shows how to set up delegation parameters and submit the staking deploy across different SDKs.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/versioned_docs/version-2.0.0/developers/dapps/sdk/client-library-usage.md#2025-04-22_snippet_16\n\nLANGUAGE: javascript\nCODE:\n```\nconst { CasperClient, Contracts, RuntimeArgs, CLValueBuilder, CLPublicKey } = require(\"casper-js-sdk\");\nconst fs = require(\"fs\");\n\nconst casperClient = new CasperClient(\"http://NODE_ADDRESS:7777/rpc\")\nconst contract = new Contracts.Contract(casperClient)\n\nconst contractWasm = new Uint8Array(fs.readFileSync(\"./casper-node/target/wasm32-unknown-unknown/release/delegate.wasm\").buffer);\n\nconst runtimeArguments = RuntimeArgs.fromMap({\n    \"amount\": CLValueBuilder.u512(500e9), // Minimum delegation amount: 500 CSPR\n    \"delegator\": keypair.publicKey,\n    \"validator\": CLPublicKey.fromHex(\"01e8c84f4fbb58d37991ef373c08043a45c44cd7f499453fa2bd3e141cc0113b3c\")\n});\n\nconst deploy = contract.install(\n    contractWasm,\n    runtimeArguments,\n    \"5000000000\", // Gas payment (5 CSPR)\n    keypair.publicKey,\n    \"casper\", // or \"casper-test\" for testnet\n    [keypair]\n);\n\n(async () => {\n    console.log(await casperClient.putDeploy(deploy));\n})();\n```\n\nLANGUAGE: python\nCODE:\n```\nimport pycspr\n\nvalidator_public_key = pycspr.factory.accounts.create_public_key_from_account_key(\n    bytes.fromhex(\"01e8c84f4fbb58d37991ef373c08043a45c44cd7f499453fa2bd3e141cc0113b3c\")\n)\n\ndeploy_params = pycspr.create_deploy_parameters(\n    account = keypair, # Only the public key is used, see `create_deploy_parameters`\n    chain_name = \"casper\" # or \"casper-test\" for testnet\n)\n\ndeploy = pycspr.create_validator_delegation(\n    params = deploy_params,\n    amount = int(500e9), # Minimum delegation amount: 500 CSPR\n    public_key_of_delegator = keypair,\n    public_key_of_validator = validator_public_key,\n    path_to_wasm = \"./casper-node/target/wasm32-unknown-unknown/release/delegate.wasm\"\n)\n\ndeploy.approve(keypair)\nclient.send_deploy(deploy)\nprint(deploy.hash.hex())\n```\n\n----------------------------------------\n\nTITLE: Passing Arguments to Casper Contracts via Command Line\nDESCRIPTION: This snippet demonstrates how to pass named arguments to a Casper contract's entry point using the casper-client CLI. Arguments are passed as strings with type specifiers.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/docs/resources/moving-to-casper.md#2025-04-22_snippet_10\n\nLANGUAGE: bash\nCODE:\n```\ncasper-client put-deploy \\\n  --node-address http://65.21.235.219:7777 \\\n  --chain-name casper-test \\\n  --secret-key [KEY_PATH]/secret_key.pem \\\n  --payment-amount 2500000000 \\\n  --session-hash hash-93d923e336b20a4c4ca14d592b60e5bd3fe330775618290104f9beb326db7ae2 \\\n  --session-entry-point \"delegate\" \\\n  --session-arg \"validator:public_key='0145fb72c75e1b459839555d70356a5e6172e706efa204d86c86050e2f7878960f'\" \\\n  --session-arg \"amount:u512='500000000000'\" \\\n  --session-arg \"delegator:public_key='0154d828baafa6858b92919c4d78f26747430dcbecb9aa03e8b44077dc6266cabf'\"\n```\n\n----------------------------------------\n\nTITLE: Staking Tokens with Python SDK\nDESCRIPTION: Shows how to delegate CSPR tokens using the Python SDK. This code creates a validator delegation deploy with the required parameters including amount and validator's public key, then signs and sends it to the network.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/versioned_docs/version-1.5.X/developers/dapps/sdk/client-library-usage.md#2025-04-22_snippet_21\n\nLANGUAGE: python\nCODE:\n```\nimport pycspr\n\nvalidator_public_key = pycspr.factory.accounts.create_public_key_from_account_key(\n    bytes.fromhex(\"01e8c84f4fbb58d37991ef373c08043a45c44cd7f499453fa2bd3e141cc0113b3c\")\n)\n\ndeploy_params = pycspr.create_deploy_parameters(\n    account = keypair, # Only the public key is used, see `create_deploy_parameters`\n    chain_name = \"casper\" # or \"casper-test\" for testnet\n)\n\ndeploy = pycspr.create_validator_delegation(\n    params = deploy_params,\n    amount = int(500e9), # Minimum delegation amount: 500 CSPR\n    public_key_of_delegator = keypair,\n    public_key_of_validator = validator_public_key,\n    path_to_wasm = \"./casper-node/target/wasm32-unknown-unknown/release/delegate.wasm\"\n)\n\ndeploy.approve(keypair)\nclient.send_deploy(deploy)\nprint(deploy.hash.hex())\n```\n\n----------------------------------------\n\nTITLE: Example: Executing Session Code from Wasm File (Bash)\nDESCRIPTION: Provides a concrete example using `casper-client put-deploy` to execute session code contained in the `counter-call.wasm` file. This session code is intended to interact with a previously deployed contract (like the counter contract from the tutorial). The `--session-path` points to the compiled Wasm.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/versioned_docs/version-1.5.X/developers/cli/calling-contracts.md#2025-04-22_snippet_17\n\nLANGUAGE: bash\nCODE:\n```\n\ncasper-client put-deploy \\\n    --node-address http://65.21.235.219:7777 \\\n    --chain-name casper-test \\\n    --secret-key [PATH_TO_YOUR_KEY]/secret_key.pem \\\n    --payment-amount 25000000000 \\\n    --session-path [PATH_TO_YOUR_COMPILED_WASM]/counter-call.wasm\n\n```\n\n----------------------------------------\n\nTITLE: Native Token Transfer Deploy Structure in JSON\nDESCRIPTION: Example JSON structure for a native token transfer deploy on the Casper network. Shows the required fields including approvals, header, payment, and session details for executing a transfer.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/versioned_docs/version-2.0.0/resources/advanced/list-cspr.md#2025-04-22_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"id\": 1,\n    \"jsonrpc\": \"2.0\",\n    \"method\": \"account_put_deploy\",\n    \"params\": {\n        \"deploy\": {\n            \"approvals\": [\n                {\n                    \"signature\": \"130 chars\",\n                    \"signer\": \"010f50b0116f213ef65b99d1bd54483f92bf6131de2f8aceb7e3f825a838292150\"\n                }\n            ],\n            \"hash\": \"ec2d477a532e00b08cfa9447b7841a645a27d34ee12ec55318263617e5740713\",\n            \"header\": {\n                \"account\": \"010f50b0116f213ef65b99d1bd54483f92bf6131de2f8aceb7e3f825a838292150\",\n                \"body_hash\": \"da35b095640a403324306c59ac6f18a446dfcc28faf753ce58b96b635587dd8e\",\n                \"chain_name\": \"casper-net-1\",\n                \"dependencies\": [],\n                \"gas_price\": 1,\n                \"timestamp\": \"2021-04-20T18:04:40.333Z\",\n                \"ttl\": \"1h\"\n            },\n            \"payment\": {\n                \"ModuleBytes\": {\n                    \"args\": [\n                        [\n                            \"amount\",\n                            {\n                                \"bytes\": \"021027\",\n                                \"cl_type\": \"U512\",\n                                \"parsed\": \"10000\"\n                            }\n                        ]\n                    ],\n                    \"module_bytes\": \"\"\n                }\n            },\n            \"session\": {\n                \"Transfer\": {\n                    \"args\": [\n                        [\n                            \"amount\",\n                            {\n                                \"bytes\": \"0400f90295\",\n                                \"cl_type\": \"U512\",\n                                \"parsed\": \"2500000000\"\n                            }\n                        ],\n                        [\n                            \"target\",\n                            {\n                                \"bytes\": \"8ae68a6902ff3c029cea32bb67ae76b25d26329219e4c9ceb676745981fd3668\",\n                                \"cl_type\": {\n                                    \"ByteArray\": 32\n                                },\n                                \"parsed\": \"8ae68a6902ff3c029cea32bb67ae76b25d26329219e4c9ceb676745981fd3668\"\n                            }\n                        ],\n                        [\n                            \"id\",\n                            {\n                                \"bytes\": \"00\",\n                                \"cl_type\": {\n                                    \"Option\": \"U64\"\n                                },\n                                \"parsed\": null\n                            }\n                        ]\n                    ]\n                }\n            }\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Retrieving the Transaction Caller in Casper Smart Contracts\nDESCRIPTION: Function for retrieving the account that initiated the transaction. This returns the address of the account that signed and sent the transaction containing the session code.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/docs/concepts/callstack.md#2025-04-22_snippet_0\n\nLANGUAGE: rust\nCODE:\n```\ncontract_api::runtime::get_caller\n```\n\n----------------------------------------\n\nTITLE: Sample Response: Querying Contract State (JSON)\nDESCRIPTION: This JSON response shows the result structure from the casper-client query-global-state command against a contract. It provides API versioning, block header (null in this case), a stored contract entity (with package and code hashes, purse, associated keys/thresholds), and a proof. All contract-wide data except named keys and entry points are included.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/docs/developers/cli/querying-global-state.md#2025-04-22_snippet_11\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"jsonrpc\": \"2.0\",\n  \"id\": -750547909804067196,\n  \"result\": {\n    \"api_version\": \"2.0.0\",\n    \"block_header\": null,\n    \"stored_value\": {\n      \"AddressableEntity\": {\n        \"protocol_version\": \"2.0.0\",\n        \"entity_kind\": {\n          \"SmartContract\": \"VmCasperV1\"\n        },\n        \"package_hash\": \"package-50d487af45f8cec533c6813801a7630ff97e5ee3964daf7915d5451b4812ac94\",\n        \"byte_code_hash\": \"byte-code-0577a7c92fd20e1af76aa9e257631cb240e8187191bba2025e88663d0288e936\",\n        \"main_purse\": \"uref-2cb7e46fcde2c4d395a6850bb3b7edbb0b4db6018643e535fa0dfdeeb006d6ef-007\",\n        \"associated_keys\": [\n          {\n            \"account_hash\": \"account-hash-6a56c4eee172043975aea72221eaf09f3c3a24f09a379935e44c9979f1ae9463\",\n            \"weight\": 1\n          }\n        ],\n        \"action_thresholds\": {\n          \"deployment\": 1,\n          \"upgrade_management\": 1,\n          \"key_management\": 1\n        },\n        \"message_topics\": []\n      }\n    },\n    \"merkle_proof\": \"[1508 hex chars]\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Calling Contracts by Hash with put-deploy in Rust\nDESCRIPTION: This snippet demonstrates the basic syntax for calling a contract by its hash using the put-deploy command. It includes options for specifying the node address, chain name, secret key, payment amount, session hash, and entry point.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/docs/developers/cli/calling-contracts.md#2025-04-22_snippet_0\n\nLANGUAGE: rust\nCODE:\n```\ncasper-client put-deploy \\\n    --node-address [NODE_SERVER_ADDRESS] \\\n    --chain-name [CHAIN_NAME] \\\n    --secret-key [KEY_PATH]/secret_key.pem \\\n    --payment-amount [PAYMENT_AMOUNT_IN_MOTES] \\\n    --session-hash [HEX_STRING] \\\n    --session-entry-point [ENTRY_POINT_FUNCTION]\n```\n\n----------------------------------------\n\nTITLE: Defining a Single Bid Object Structure using JSON Schema\nDESCRIPTION: This JSON Schema defines the structure for a single bid object. It mandates the presence of 'bid' and 'public_key' properties, referencing external schemas '#/components/schemas/PublicKey' and '#/components/schemas/JsonBid' for their respective structures. The 'additionalProperties: false' constraint ensures no extra fields are permitted.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/condor/jsonrpc-comp/rpc-1.5/schema/JsonBids.json.md#2025-04-22_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"description\": \"A Json representation of a single bid.\",\n    \"type\": \"object\",\n    \"required\": [\n        \"bid\",\n        \"public_key\"\n    ],\n    \"properties\": {\n        \"public_key\": {\n            \"$ref\": \"#/components/schemas/PublicKey\"\n        },\n        \"bid\": {\n            \"$ref\": \"#/components/schemas/JsonBid\"\n        }\n    },\n    \"additionalProperties\": false\n}\n```\n\n----------------------------------------\n\nTITLE: Calling Auction Contract by Named Key - Casper CLI - Rust\nDESCRIPTION: Shows how to call the 'delegate' entry point of the system Auction contract via its registered name key. Includes validator, amount, and delegator arguments, referencing the system's built-in 'auction' named key. Inputs include all deployed session-args; outputs are a deploy operation, requiring valid keys and RPC access.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/docs/developers/cli/calling-contracts.md#2025-04-22_snippet_11\n\nLANGUAGE: rust\nCODE:\n```\ncasper-client put-deploy \\\n    --node-address http://65.21.235.219:7777 \\\n    --chain-name casper-test \\\n    --secret-key [KEY_PATH]/secret_key.pem \\\n    --payment-amount 2500000000 \\\n    --session-name \"auction\" \\\n    --session-entry-point \"delegate\" \\\n    --session-arg \"validator:public_key='0145fb72c75e1b459839555d70356a5e6172e706efa204d86c86050e2f7878960f'\" \\\n    --session-arg \"amount:u512='500000000000'\" \\\n    --session-arg \"delegator:public_key='0154d828baafa6858b92919c4d78f26747430dcbecb9aa03e8b44077dc6266cabf'\"\n```\n\n----------------------------------------\n\nTITLE: Retrieving Stored Value in Casper Network via RPC\nDESCRIPTION: Example of using the deprecated state_get_item RPC endpoint to retrieve a stored value from the network using a state root hash, key, and path. The response includes the API version, stored value, and a Merkle proof.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/condor/jsonrpc-comp/rpc-1.5/schema.json.md#2025-04-22_snippet_21\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"name\": \"state_root_hash\",\n  \"value\": \"0808080808080808080808080808080808080808080808080808080808080808\"\n},\n{\n  \"name\": \"key\",\n  \"value\": \"deploy-af684263911154d26fa05be9963171802801a0b6aff8f199b7391eacb8edc9e1\"\n},\n{\n  \"name\": \"path\",\n  \"value\": [\n    \"inner\"\n  ]\n}\n```\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"api_version\": \"1.5.6\",\n  \"stored_value\": {\n    \"CLValue\": {\n      \"cl_type\": \"U64\",\n      \"bytes\": \"0100000000000000\",\n      \"parsed\": 1\n    }\n  },\n  \"merkle_proof\": \"01000000006ef2e0949ac76e55812421f755abe129b6244fe7168b77f47a72536147614625016ef2e0949ac76e55812421f755abe129b6244fe7168b77f47a72536147614625000000003529cde5c621f857f75f3810611eb4af3f998caaa9d4a3413cf799f99c67db0307010000006ef2e0949ac76e55812421f755abe129b6244fe7168b77f47a7253614761462501010102000000006e06000000000074769d28aac597a36a03a932d4b43e4f10bf0403ee5c41dd035102553f5773631200b9e173e8f05361b681513c14e25e3138639eb03232581db7557c9e8dbbc83ce94500226a9a7fe4f2b7b88d5103a4fc7400f02bf89c860c9ccdd56951a2afe9be0e0267006d820fb5676eb2960e15722f7725f3f8f41030078f8b2e44bf0dc03f71b176d6e800dc5ae9805068c5be6da1a90b2528ee85db0609cc0fb4bd60bbd559f497a98b67f500e1e3e846592f4918234647fca39830b7e1e6ad6f5b7a99b39af823d82ba1873d000003000000010186ff500f287e9b53f823ae1582b1fa429dfede28015125fd233a31ca04d5012002015cc42669a55467a1fdf49750772bfc1aed59b9b085558eb81510e9b015a7c83b0301e3cf4a34b1db6bfa58808b686cb8fe21ebe0c1bcbcee522649d2b135fe510fe3\"\n}\n```\n\n----------------------------------------\n\nTITLE: Querying Global State via Casper-Client CLI - Rust\nDESCRIPTION: This command queries the Casper network's global state at a specific state root hash. It requires the node address, the state root hash, and a key identifying the account, contract, or other state item. Optionally, the -q parameter can be used to further refine the query (for example, querying a specific named key under a contract or account). Proper replacement of placeholders is required for actual execution.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/versioned_docs/version-2.0.0/resources/beginner/counter-testnet/commands.md#2025-04-22_snippet_2\n\nLANGUAGE: rust\nCODE:\n```\ncasper-client query-global-state \\\n    --node-address [NODE_SERVER_ADDRESS] \\\n    --state-root-hash [STATE_ROOT_HASH] \\\n    --key [ACCOUNT_HASH] \\\n    -q \"[SESSION_NAME]/[SESSION_NAMED_KEY]\" (OPTIONAL)\n```\n\n----------------------------------------\n\nTITLE: Querying Node Status with info_get_status RPC Method in JSON\nDESCRIPTION: Example request for the info_get_status method which returns the current status of a node. This method requires no parameters.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/versioned_docs/version-2.0.0/developers/json-rpc/json-rpc-informational.md#2025-04-22_snippet_28\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"id\": 1,\n  \"jsonrpc\": \"2.0\",\n  \"method\": \"info_get_status\",\n  \"params\": []\n}\n```\n\n----------------------------------------\n\nTITLE: Verifying Smart Contracts with Casper Client in Bash\nDESCRIPTION: This Bash snippet demonstrates how to verify smart contracts with the Casper client's verify-contract command. Dependencies include a built and installed smart contract, access to a verification service, and a Rust project setup. Key parameters include the verification URL, transaction hash, and path to the contract's source. The command outputs a success status upon matching binaries.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/versioned_docs/version-2.0.0/developers/cli/verifying-contracts.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ncasper-client verify-contract --verification-url-basepath <HOST:PORT> <TRANSACTION-HASH> <PATH>\n```\n\n----------------------------------------\n\nTITLE: Querying Global State Root Hash with Casper Client Bash Command\nDESCRIPTION: This Bash command obtains the latest global state root hash, which is required to make global state queries on the Casper blockchain. It requires the `node-address` parameter, which is the IP address of a network node. The `id` parameter is optional and acts as a JSON-RPC identifier.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/docs/resources/beginner/querying-network.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ncasper-client get-state-root-hash \\\n     --id 1 \\\n     --node-address http://<node-ip-address>:7777\n```\n\n----------------------------------------\n\nTITLE: Event Stream Setup in JavaScript\nDESCRIPTION: Implementation of an event listener using the Casper JavaScript SDK to connect to a node's event stream and handle events.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/versioned_docs/version-1.5.X/developers/dapps/monitor-and-consume-events.md#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconst { EventStream, EventName } = require(\"casper-js-sdk\")\n\nconst es = new EventStream(\"http://NODE_ADDRESS:9999/events/\" + CHANNEL)\nes.start()\nes.subscribe(EventName.EVENT_NAME, eventHandler)\n\nconst eventHandler = (event) => {\n    console.log(event)\n}\n```\n\n----------------------------------------\n\nTITLE: Example of Node Status Result\nDESCRIPTION: This JSON provides an example output for the \"info_get_status\" RPC call, capturing node and block state details such as last added block info, public signing key, and block synchronizer status. No external inputs are required, and the information is structured according to the schema definitions.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/condor/jsonrpc-comp/rpc-1.5/schema.json.md#2025-04-22_snippet_12\n\nLANGUAGE: json\nCODE:\n```\n{ \"name\": \"info_get_status_example\", \"params\": [], \"result\": { \"name\": \"info_get_status_example_result\", \"value\": { \"peers\": [ { \"node_id\": \"tls:0101..0101\", \"address\": \"127.0.0.1:54321\" } ], \"api_version\": \"1.5.6\", \"build_version\": \"1.5.6\", \"chainspec_name\": \"casper-example\", \"starting_state_root_hash\": \"0000000000000000000000000000000000000000000000000000000000000000\", \"last_added_block_info\": { \"hash\": \"13c2d7a68ecdd4b74bf4393c88915c836c863fc4bf11d7f2bd930a1bbccacdcb\", \"timestamp\": \"2020-11-17T00:39:24.072Z\", \"era_id\": 1, \"height\": 10, \"state_root_hash\": \"0808080808080808080808080808080808080808080808080808080808080808\", \"creator\": \"01d9bf2148748a85c89da5aad8ee0b0fc2d105fd39d41a4c796536354f0ae2900c\" }, \"our_public_signing_key\": \"01d9bf2148748a85c89da5aad8ee0b0fc2d105fd39d41a4c796536354f0ae2900c\", \"round_length\": \"1m 5s 536ms\", \"next_upgrade\": { \"activation_point\": 42, \"protocol_version\": \"2.0.1\" }, \"uptime\": \"13s\", \"reactor_state\": \"Initialize\", \"last_progress\": \"1970-01-01T00:00:00.000Z\", \"available_block_range\": { \"low\": 0, \"high\": 0 }, \"block_sync\": { \"historical\": { \"block_hash\": \"16ddf28e2b3d2e17f4cef36f8b58827eca917af225d139b0c77df3b4a67dc55e\", \"block_height\": 40, \"acquisition_state\": \"have strict finality(40) for: block hash 16dd..c55e\" }, \"forward\": { \"block_hash\": \"59907b1e32a9158169c4d89d9ce5ac9164fc31240bfcfb0969227ece06d74983\", \"block_height\": 6701, \"acquisition_state\": \"have block body(6701) for: block hash 5990..4983\" } } } } }\n```\n\n----------------------------------------\n\nTITLE: Calling Specific Version of Casper Contract by Package Name using Casper Client CLI\nDESCRIPTION: This example command uses `casper-client put-deploy` to call the `counter-inc` entry point of the contract package named `counter_package_name`, specifically targeting version 1. It requires the node address, chain name, deployer's secret key, payment amount, and the specific package name, entry point, and version.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/docs/developers/cli/calling-contracts.md#2025-04-22_snippet_14\n\nLANGUAGE: bash\nCODE:\n```\ncasper-client put-deploy \\\n    --node-address http://65.21.235.219:7777 \\\n    --chain-name casper-test \\\n    --secret-key [KEY_PATH]/secret_key.pem \\\n    --payment-amount 100000000 \\\n    --session-package-name \"counter_package_name\" \\\n    --session-entry-point \"counter-inc\" \\\n    --session-version 1\n```\n\n----------------------------------------\n\nTITLE: Response from state_get_auction_info in JSON-RPC\nDESCRIPTION: Example JSON-RPC response from the state_get_auction_info method showing the auction state including validators, bids, and delegators for a specific block.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/versioned_docs/version-2.0.0/developers/json-rpc/json-rpc-pos.md#2025-04-22_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"id\": 1,\n  \"jsonrpc\": \"2.0\",\n  \"result\": {\n    \"name\": \"state_get_auction_info_result\",\n    \"value\": {\n      \"api_version\": \"2.0.0\",\n      \"auction_state\": {\n        \"state_root_hash\": \"0b0b0b0b0b0b0b0b0b0b0b0b0b0b0b0b0b0b0b0b0b0b0b0b0b0b0b0b0b0b0b0b\",\n        \"block_height\": 10,\n        \"era_validators\": [\n          {\n            \"era_id\": 10,\n            \"validator_weights\": [\n              {\n                \"public_key\": \"01197f6b23e16c8532c6abc838facd5ea789be0c76b2920334039bfa8b3d368d61\",\n                \"weight\": \"10\"\n              }\n            ]\n          }\n        ],\n        \"bids\": [\n          {\n            \"public_key\": \"01197f6b23e16c8532c6abc838facd5ea789be0c76b2920334039bfa8b3d368d61\",\n            \"bid\": {\n              \"validator_public_key\": \"01197f6b23e16c8532c6abc838facd5ea789be0c76b2920334039bfa8b3d368d61\",\n              \"bonding_purse\": \"uref-fafafafafafafafafafafafafafafafafafafafafafafafafafafafafafafafa-007\",\n              \"staked_amount\": \"20\",\n              \"delegation_rate\": 0,\n              \"vesting_schedule\": null,\n              \"delegators\": [\n                {\n                  \"delegator_public_key\": \"014508a07aa941707f3eb2db94c8897a80b2c1197476b6de213ac273df7d86c4ff\",\n                  \"delegator\": {\n                    \"delegator_public_key\": \"014508a07aa941707f3eb2db94c8897a80b2c1197476b6de213ac273df7d86c4ff\",\n                    \"staked_amount\": \"10\",\n                    \"bonding_purse\": \"uref-fbfbfbfbfbfbfbfbfbfbfbfbfbfbfbfbfbfbfbfbfbfbfbfbfbfbfbfbfbfbfbfb-007\",\n                    \"validator_public_key\": \"01197f6b23e16c8532c6abc838facd5ea789be0c76b2920334039bfa8b3d368d61\",\n                    \"vesting_schedule\": null\n                  }\n                }\n              ],\n              \"inactive\": false\n            }\n          }\n        ]\n      }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Monitoring Casper Node Live Event Stream using cURL (Bash)\nDESCRIPTION: Demonstrates how to use the `curl` command to connect to a Casper node's Server-Sent Events (SSE) endpoint (`/events/`) and monitor the live event stream. Requires the node's IP address (`HOST`) and the configured event stream port (`PORT`, default 9999).\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/docs/operators/setup/node-events.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ncurl -s http://HOST:PORT/events/\n```\n\n----------------------------------------\n\nTITLE: Defining Contract Test Steps in a Makefile\nDESCRIPTION: A Makefile target named 'test' that orchestrates the contract testing process. It depends on 'build-contract', creates a 'tests/wasm' directory, copies compiled Wasm files (counter-v1.wasm, counter-v2.wasm, counter-call.wasm) into it, and then runs the Rust integration tests using 'cargo test' within the 'tests' subdirectory. This setup is necessary for testing contracts that call other contracts, ensuring all required Wasm files are available.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/docs/developers/writing-onchain-code/testing-contracts.md#2025-04-22_snippet_11\n\nLANGUAGE: makefile\nCODE:\n```\ntest: build-contract\n\tmkdir -p tests/wasm\n\tcp contract-v1/target/wasm32-unknown-unknown/release/counter-v1.wasm tests/wasm\n\tcp contract-v2/target/wasm32-unknown-unknown/release/counter-v2.wasm tests/wasm\n\tcp counter-call/target/wasm32-unknown-unknown/release/counter-call.wasm tests/wasm\n\tcd tests && cargo test\n```\n\n----------------------------------------\n\nTITLE: Querying Node Status with Casper RPC Schema - JSON\nDESCRIPTION: Defines the full JSON schema for the \"info_get_status\" RPC endpoint response for a Casper network node. Requires only a compatible JSON schema-aware codebase or documentation system. Key properties include network version information, peer lists, block sync status, node uptime, and protocol upgrade data. Input is an empty params array (no parameters required); output is a structured JSON object conforming to the provided schema. Limitations: Actual nested schemas (e.g., ProtocolVersion, Peers) must be defined elsewhere; this is an excerpt. Example illustrates expected structure for actual API integration.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/condor/jsonrpc-comp/rpc-2.0/info_get_status.json.md#2025-04-22_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\\n  \"name\": \"info_get_status\",\\n  \"summary\": \"returns the current status of the node\",\\n  \"params\": [],\\n  \"result\": {\\n    \"name\": \"info_get_status_result\",\\n    \"schema\": {\\n      \"description\": \"Result for \\\"info_get_status\\\" RPC response.\",\\n      \"type\": \"object\",\\n      \"required\": [\\n        \"api_version\",\\n        \"available_block_range\",\\n        \"block_sync\",\\n        \"build_version\",\\n        \"chainspec_name\",\\n        \"last_progress\",\\n        \"peers\",\\n        \"protocol_version\",\\n        \"reactor_state\",\\n        \"starting_state_root_hash\",\\n        \"uptime\"\\n      ],\\n      \"properties\": {\\n        \"api_version\": {\\n          \"description\": \"The RPC API version.\",\\n          \"type\": \"string\"\\n        },\\n        \"protocol_version\": {\\n          \"description\": \"The current Casper protocol version.\",\\n          \"$ref\": \"#/components/schemas/ProtocolVersion\"\\n        },\\n        \"peers\": {\\n          \"description\": \"The node ID and network address of each connected peer.\",\\n          \"$ref\": \"#/components/schemas/Peers\"\\n        },\\n        \"build_version\": {\\n          \"description\": \"The compiled node version.\",\\n          \"type\": \"string\"\\n        },\\n        \"chainspec_name\": {\\n          \"description\": \"The chainspec name.\",\\n          \"type\": \"string\"\\n        },\\n        \"starting_state_root_hash\": {\\n          \"description\": \"The state root hash of the lowest block in the available block range.\",\\n          \"$ref\": \"#/components/schemas/Digest\"\\n        },\\n        \"last_added_block_info\": {\\n          \"description\": \"The minimal info of the last block from the linear chain.\",\\n          \"anyOf\": [\\n            {\\n              \"$ref\": \"#/components/schemas/MinimalBlockInfo\"\\n            },\\n            {\\n              \"type\": \"null\"\\n            }\\n          ]\\n        },\\n        \"our_public_signing_key\": {\\n          \"description\": \"Our public signing key.\",\\n          \"anyOf\": [\\n            {\\n              \"$ref\": \"#/components/schemas/PublicKey\"\\n            },\\n            {\\n              \"type\": \"null\"\\n            }\\n          ]\\n        },\\n        \"round_length\": {\\n          \"description\": \"The next round length if this node is a validator.\",\\n          \"anyOf\": [\\n            {\\n              \"$ref\": \"#/components/schemas/TimeDiff\"\\n            },\\n            {\\n              \"type\": \"null\"\\n            }\\n          ]\\n        },\\n        \"next_upgrade\": {\\n          \"description\": \"Information about the next scheduled upgrade.\",\\n          \"anyOf\": [\\n            {\\n              \"$ref\": \"#/components/schemas/NextUpgrade\"\\n            },\\n            {\\n              \"type\": \"null\"\\n            }\\n          ]\\n        },\\n        \"uptime\": {\\n          \"description\": \"Time that passed since the node has started.\",\\n          \"$ref\": \"#/components/schemas/TimeDiff\"\\n        },\\n        \"reactor_state\": {\\n          \"description\": \"The name of the current state of node reactor.\",\\n          \"type\": \"string\"\\n        },\\n        \"last_progress\": {\\n          \"description\": \"Timestamp of the last recorded progress in the reactor.\",\\n          \"$ref\": \"#/components/schemas/Timestamp\"\\n        },\\n        \"available_block_range\": {\\n          \"description\": \"The available block range in storage.\",\\n          \"$ref\": \"#/components/schemas/AvailableBlockRange\"\\n        },\\n        \"block_sync\": {\\n          \"description\": \"The status of the block synchronizer builders.\",\\n          \"$ref\": \"#/components/schemas/BlockSynchronizerStatus\"\\n        },\\n        \"latest_switch_block_hash\": {\\n          \"description\": \"The hash of the latest switch block.\",\\n          \"anyOf\": [\\n            {\\n              \"$ref\": \"#/components/schemas/BlockHash\"\\n            },\\n            {\\n              \"type\": \"null\"\\n            }\\n          ]\\n        }\\n      },\\n      \"additionalProperties\": false\\n    }\\n  },\\n  \"examples\": [\\n    {\\n      \"name\": \"info_get_status_example\",\\n      \"params\": [],\\n      \"result\": {\\n        \"name\": \"info_get_status_example_result\",\\n        \"value\": {\\n          \"api_version\": \"2.0.0\",\\n          \"protocol_version\": \"2.0.0\",\\n          \"peers\": [\\n            {\\n              \"node_id\": \"tls:0101..0101\",\\n              \"address\": \"127.0.0.1:54321\"\\n            }\\n          ],\\n          \"build_version\": \"1.0.0\",\\n          \"chainspec_name\": \"casper-example\",\\n          \"starting_state_root_hash\": \"0000000000000000000000000000000000000000000000000000000000000000\",\\n          \"last_added_block_info\": {\\n            \"hash\": \"0744fcb72af43c5cc372039bc5a8bfee48808a9ce414acc0d6338a628c20eb42\",\\n            \"timestamp\": \"2020-11-17T00:39:24.072Z\",\\n            \"era_id\": 1,\\n            \"height\": 10,\\n            \"state_root_hash\": \"0808080808080808080808080808080808080808080808080808080808080808\",\\n            \"creator\": \"01d9bf2148748a85c89da5aad8ee0b0fc2d105fd39d41a4c796536354f0ae2900c\"\\n          },\\n          \"our_public_signing_key\": \"01d9bf2148748a85c89da5aad8ee0b0fc2d105fd39d41a4c796536354f0ae2900c\",\\n          \"round_length\": \"1m 5s 536ms\",\\n          \"next_upgrade\": {\\n            \"activation_point\": 42,\\n            \"protocol_version\": \"2.0.1\"\\n          },\\n          \"uptime\": \"13s\",\\n          \"reactor_state\": \"Initialize\",\\n          \"last_progress\": \"1970-01-01T00:00:00.000Z\",\\n          \"available_block_range\": {\\n            \"low\": 0,\\n            \"high\": 0\\n          },\\n          \"block_sync\": {\\n            \"historical\": {\\n              \"block_hash\": \"16ddf28e2b3d2e17f4cef36f8b58827eca917af225d139b0c77df3b4a67dc55e\",\\n              \"block_height\": 40,\\n              \"acquisition_state\": \"have strict finality(40) for: block hash 16dd..c55e\"\\n            },\\n            \"forward\": {\\n              \"block_hash\": \"59907b1e32a9158169c4d89d9ce5ac9164fc31240bfcfb0969227ece06d74983\",\\n              \"block_height\": 6701,\\n              \"acquisition_state\": \"have block body(6701) for: block hash 5990..4983\"\\n            }\\n          },\\n          \"latest_switch_block_hash\": \"0000000000000000000000000000000000000000000000000000000000000000\"\\n        }\\n      }\\n    }\\n  ]\\n}\\n\n```\n\n----------------------------------------\n\nTITLE: Deploying Delegate Contract Using JavaScript SDK\nDESCRIPTION: This JavaScript snippet demonstrates using the Casper JavaScript SDK to deploy the delegate contract on the Casper network. Dependencies include 'casper-js-sdk' and 'fs'. It initializes a Casper client, reads a WASM contract, and prepares deployment arguments. Involves a network RPC endpoint and requires a user keypair for signing the transaction.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/versioned_docs/version-2.0.0/developers/dapps/sdk/client-library-usage.md#2025-04-22_snippet_19\n\nLANGUAGE: javascript\nCODE:\n```\nconst { CasperClient, Contracts, RuntimeArgs, CLValueBuilder, CLPublicKey } = require(\"casper-js-sdk\");\\nconst fs = require(\"fs\");\\n\\nconst casperClient = new CasperClient(\"http://NODE_ADDRESS:7777/rpc\")\\nconst contract = new Contracts.Contract(casperClient)\\n\\nconst contractWasm = new Uint8Array(fs.readFileSync(\"./casper-node/target/wasm32-unknown-unknown/release/delegate.wasm\").buffer);\\n\\nconst runtimeArguments = RuntimeArgs.fromMap({\\n    \"amount\": CLValueBuilder.u512(500e9), // Minimum delegation amount: 500 CSPR\\n    \"delegator\": keypair.publicKey,\\n    \"validator\": CLPublicKey.fromHex(\"01e8c84f4fbb58d37991ef373c08043a45c44cd7f499453fa2bd3e141cc0113b3c\")\\n});\\n\\nconst deploy = contract.install(\\n    contractWasm,\\n    runtimeArguments,\\n    \"5000000000\", // Gas payment (5 CSPR)\\n    keypair.publicKey,\\n    \"casper\", // or \"casper-test\" for testnet\\n    [keypair]\\n);\\n\\n(async () => {\\n    console.log(await casperClient.putDeploy(deploy));\\n})();\n```\n\n----------------------------------------\n\nTITLE: Creating a New Upgradeable Contract in Casper\nDESCRIPTION: This code snippet demonstrates how to create a new upgradeable contract on the Casper network using the new_contract method. It returns the contract hash and version which can be used for later interactions.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/docs/developers/writing-onchain-code/simple-contract.md#2025-04-22_snippet_13\n\nLANGUAGE: rust\nCODE:\n```\n    // Create a new contract package that can be upgraded.\n    let (stored_contract_hash, contract_version) = storage::new_contract(\n        counter_entry_points,\n        Some(counter_named_keys),\n        Some(CONTRACT_PACKAGE_NAME.to_string()),\n        Some(CONTRACT_ACCESS_UREF.to_string()),\n    );\n```\n\n----------------------------------------\n\nTITLE: Retrieving and Validating Stored Value using get_key and storage::read in Rust\nDESCRIPTION: This Rust example retrieves a stored value using `runtime::get_key` and validates it against an expected value acquired from runtime arguments. It shows how to convert a key into a URef, read the stored boolean value, and compare it with a provided argument. If the values differ, it reverts the state to prevent unintended changes.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/versioned_docs/version-1.5.X/resources/advanced/storage-workflow.md#2025-04-22_snippet_1\n\nLANGUAGE: rust\nCODE:\n```\n\n    let my_stored_value_uref: URef = runtime::get_key(MY_STORED_VALUE_UREF)\n        .unwrap_or_revert()\n        .into_uref()\n        .map(|uref| URef::new(uref.addr(), AccessRights::default()))\n        .unwrap_or_revert()\n        .into_read();\n\n    let my_actual_stored_value: bool = storage::read(my_stored_value_uref).unwrap().unwrap();\n\n    // Compare my stored value with runtime arg\n    let my_expected_stored_value: bool = runtime::get_named_arg(ARG_MY_STORED_VALUE);\n    if my_actual_stored_value != my_expected_stored_value {\n        // We revert if my stored value is not what is expected from caller argument\n        runtime::revert(UserError::StoredValueError);\n    }\n\n    runtime::print(&my_actual_stored_value.to_string());\n}\n\n```\n\n----------------------------------------\n\nTITLE: Initializing the Casper InMemoryWasmTestBuilder (Rust)\nDESCRIPTION: Demonstrates the initial step in a Casper test function: creating a mutable instance of `InMemoryWasmTestBuilder`. This builder provides the interface for setting up the test environment and executing contract code.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/versioned_docs/version-1.5.X/developers/writing-onchain-code/testing-session-code.md#2025-04-22_snippet_6\n\nLANGUAGE: rust\nCODE:\n```\n    let mut builder = InMemoryWasmTestBuilder::default();\n```\n\n----------------------------------------\n\nTITLE: Calling Contract by Name using Casper-client in Rust\nDESCRIPTION: Sample 'put-deploy' command to call a contract using a named key. Demonstrates using session-name and session-entry-point arguments, where the session-name serves as the global state reference for the contract.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/versioned_docs/version-1.5.X/developers/cli/calling-contracts.md#2025-04-22_snippet_8\n\nLANGUAGE: rust\nCODE:\n```\ncasper-client put-deploy \\\n    --node-address [NODE_SERVER_ADDRESS] \\\n    --chain-name [CHAIN_NAME] \\\n    --secret-key [KEY_PATH]/secret_key.pem \\\n    --payment-amount [PAYMENT_AMOUNT_IN_MOTES] \\\n    --session-name [NAMED_KEY_FOR_SMART_CONTRACT] \\\n    --session-entry-point [ENTRY_POINT_FUNCTION]\n```\n\n----------------------------------------\n\nTITLE: Testing Failed Token Transfer in Rust\nDESCRIPTION: Example test case that verifies a token transfer fails when attempting to send more tokens than the account balance. The test uses the TestFixture to install the contract and then attempts to transfer more tokens than available.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/versioned_docs/version-1.5.X/resources/tokens/cep18/tests.md#2025-04-22_snippet_0\n\nLANGUAGE: rust\nCODE:\n```\n#[should_panic(expected = \"ApiError::User(65534) [131070]\")]\n#[test]\nfn should_not_transfer_with_insufficient_balance() {\n    let mut fixture = TestFixture::install_contract();\n\n    let initial_ali_balance = fixture.balance_of(Key::from(fixture.ali)).unwrap();\n    assert_eq!(fixture.balance_of(Key::from(fixture.bob)), None);\n\n    fixture.transfer(\n        Key::from(fixture.bob),\n        initial_ali_balance + U256::one(),\n        fixture.ali,\n    );\n}\n```\n\n----------------------------------------\n\nTITLE: Assembling the Complete Deploy Object in JavaScript\nDESCRIPTION: Combines the previously created `deployParams`, `session`, and `payment` objects into a final, unsigned deploy object using the `DeployUtil.makeDeploy` method. Depends on `DeployUtil` from `casper-js-sdk` and the prerequisite `deployParams`, `session`, and `payment` variables.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/docs/resources/advanced/list-cspr.md#2025-04-22_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\nimport { DeployUtil } from 'casper-js-sdk';\n\nDeployUtil.makeDeploy(deployParams, session, payment);\n```\n\n----------------------------------------\n\nTITLE: Calling Contract Entry Point and Storing Result (Rust Session Code)\nDESCRIPTION: This Rust snippet represents session code (`contract_call.wasm`) that calls a specified entry point (`ENTRY_POINT`) on a target contract (`contract_hash`). It retrieves a key name (`ARG_KEY_NAME`) from runtime arguments, executes the contract call expecting a `Vec<AccountHash>` (the intersection result) in return, creates a new URef for the result using `storage::new_uref`, and stores this URef under the provided key name in the caller's account context using `runtime::put_key`.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/versioned_docs/version-1.5.X/resources/advanced/list-auth-keys-tutorial.md#2025-04-22_snippet_5\n\nLANGUAGE: rust\nCODE:\n```\n```rust\nlet key_name: String = runtime::get_named_arg(ARG_KEY_NAME);\nlet intersection =\n    runtime::call_contract::<Vec<AccountHash>>(contract_hash, ENTRY_POINT, runtime_args! {});\nruntime::put_key(&key_name, storage::new_uref(intersection).into());\n}\n```\n```\n\n----------------------------------------\n\nTITLE: Installing CEP-78 NFT Contract using Casper CLI Client\nDESCRIPTION: This bash command demonstrates how to install the CEP-78 NFT contract using the Rust CLI Casper client. It includes various session arguments to configure the NFT contract's behavior and properties.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/versioned_docs/version-1.5.X/resources/tokens/cep78/introduction.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ncasper-client put-deploy -n http://65.108.0.148:7777/rpc --chain-name \"casper-test\" --payment-amount 500000000000 -k keys/secret_key.pem --session-path contract/target/wasm32-unknown-unknown/release/contract.wasm \\\n--session-arg \"collection_name:string='enhanced-nft-1'\" \\\n--session-arg \"collection_symbol:string='ENFT-1'\" \\\n--session-arg \"total_token_supply:u64='10'\" \\\n--session-arg \"ownership_mode:u8='0'\" \\\n--session-arg \"nft_kind:u8='1'\" \\\n--session-arg \"json_schema:string='nft-schema'\" \\\n--session-arg \"allow_minting:bool='true'\" \\\n--session-arg \"owner_reverse_lookup_mode:u8='0'\" \\\n--session-arg \"nft_metadata_kind:u8='2'\" \\\n--session-arg \"identifier_mode:u8='0'\" \\\n--session-arg \"metadata_mutability:u8='1'\"\n```\n\n----------------------------------------\n\nTITLE: Querying Target Account Purse Balance (Verbose, Bash)\nDESCRIPTION: This command queries the balance of a target account\\'s main purse using the verbose flag for detailed output, specifying the testnet node address, state root hash, account hash as purse identifier, and a tracking id. Useful for confirming the purse balance of a destination account in a test scenario. Requires an active network node and correct input values.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/docs/developers/cli/transfers/verify-transfer.md#2025-04-22_snippet_9\n\nLANGUAGE: bash\nCODE:\n```\ncasper-client query-balance -v --id 7 \\\n--node-address https://node.testnet.casper.network \\\n--state-root-hash fdb1474d441ec0fcbf2e088f1630dbf98d3bcf7f7a7fe298303797f35b8cb4e1 \\\n--purse-identifier account-hash-1ed5a1c39bea93c105f2d22c965a84b205b36734a377d05dbb103b6bfaa595a7\n```\n\n----------------------------------------\n\nTITLE: Installing Contract via Command Line\nDESCRIPTION: Commands for deploying the upgraded contract version to the Casper network using the casper-client CLI tool.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/versioned_docs/version-2.0.0/resources/beginner/upgrade-contract.md#2025-04-22_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\ncasper-client put-deploy \\\n    --node-address http://[NODE_IP]:7777 \\\n    --chain-name [CHAIN_NAME] \\\n    --secret-key [PATH_TO_YOUR_KEY]/secret_key.pem \\\n    --payment-amount [PAYMENT_AMOUNT_IN_MOTES] \\\n    --session-path [PATH]/contract-v2/target/wasm32-unknown-unknown/release/counter-v2.wasm\n```\n\n----------------------------------------\n\nTITLE: Querying a Deploy Status by deploy_hash - Bash\nDESCRIPTION: This snippet queries the status of a previously submitted deploy using casper-client get-deploy, passing the node address and the returned deploy_hash. It will return details such as approvals, payments, and deployment status. Prerequisites include having received a deploy_hash from put-deploy and access to the appropriate Casper node endpoint.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/versioned_docs/version-2.0.0/resources/advanced/cross-contract.md#2025-04-22_snippet_12\n\nLANGUAGE: bash\nCODE:\n```\ncasper-client get-deploy \\\\\\n    --node-address http://136.243.187.84:7777 af42bc6dbc58f677d138eb968d897f965f1ed118a40980bc16efbcc2a0c71832\\n\n```\n\n----------------------------------------\n\nTITLE: Calling Contract using Session Wasm via casper-client (Bash)\nDESCRIPTION: Shows the general syntax for executing session code compiled into a Wasm file using `casper-client put-deploy`. The `--session-path` argument specifies the local path to the Wasm file containing the code to be executed on the network.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/versioned_docs/version-1.5.X/developers/cli/calling-contracts.md#2025-04-22_snippet_16\n\nLANGUAGE: bash\nCODE:\n```\ncasper-client put-deploy \\\n    --node-address [NODE_SERVER_ADDRESS] \\\n    --chain-name [CHAIN_NAME] \\\n    --secret-key [KEY_PATH]/secret_key.pem \\\n    --payment-amount [PAYMENT_AMOUNT_IN_MOTES] \\\n    --session-path [PATH]/[FILE_NAME].wasm\n```\n\n----------------------------------------\n\nTITLE: Retrieving Authorization Keys in a Casper Contract (Rust)\nDESCRIPTION: This snippet demonstrates calling the `runtime::list_authorization_keys()` function within a Casper smart contract (written in Rust) to retrieve the set of `AccountHash`es representing the public keys used to sign the current deploy.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/versioned_docs/version-1.5.X/resources/advanced/list-auth-keys-tutorial.md#2025-04-22_snippet_0\n\nLANGUAGE: rust\nCODE:\n```\n```rust\nlet authorization_keys = runtime::list_authorization_keys();\n```\n```\n\n----------------------------------------\n\nTITLE: Verifying Contract Version Test in Rust\nDESCRIPTION: Rust test function to verify the contract version has been properly upgraded to version 2 by querying the account's named keys and checking stored values.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/versioned_docs/version-1.5.X/resources/beginner/upgrade-contract.md#2025-04-22_snippet_3\n\nLANGUAGE: rust\nCODE:\n```\n    // Verify the contract version is now 2.\n    let account = builder\n        .get_account(*DEFAULT_ACCOUNT_ADDR)\n        .expect(\"should have account\");\n\n    let version_key = *account\n        .named_keys()\n        .get(CONTRACT_VERSION_KEY)\n        .expect(\"version uref should exist\");\n\n    let version = builder\n        .query(None, version_key, &[])\n        .expect(\"should be stored value.\")\n        .as_cl_value()\n        .expect(\"should be cl value.\")\n        .clone()\n        .into_t::<u32>()\n        .expect(\"should be u32.\");\n\n    assert_eq!(version, 2);\n```\n\n----------------------------------------\n\nTITLE: Issuing JSON-RPC info_get_deploy Request - JSON\nDESCRIPTION: This JSON-RPC request body is crafted for use with compatible HTTP POST clients to query deploy status from a Casper node. It invokes the info_get_deploy method, passing the deploy_hash, and optionally requests approvals. The payload expects a response containing deploy metadata and execution results. Required is an endpoint exposing compliant Casper JSON-RPC methods.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/docs/developers/cli/transfers/direct-token-transfer.md#2025-04-22_snippet_6\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"jsonrpc\": \"2.0\",\n  \"method\": \"info_get_deploy\",\n  \"params\": {\n    \"deploy_hash\": \"1f17a0bdeaaf71abd03492c854cdf97f746432751721ce555e95b9cefe641e3c\",\n    \"finalized_approvals\": false\n  },\n  \"id\": -3447643973713335073\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Contract with Message Storage and Update Capability in Rust\nDESCRIPTION: Enhanced version of the Casper contract with a defined call entry point that initializes the contract. It creates named keys, defines metadata for the update_msg entry point, and stores the contract in global state.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/versioned_docs/version-1.5.X/resources/advanced/cross-contract.md#2025-04-22_snippet_7\n\nLANGUAGE: rust\nCODE:\n```\n#![no_std]\n#![no_main]\n\n#[cfg(not(target_arch = \"wasm32\"))]\ncompile_error!(\"target arch should be wasm32: compile with '--target wasm32-unknown-unknown'\");\n\n// We need to explicitly import the std alloc crate and `alloc::string::String` as we are in a\n// `no_std` environment.\nextern crate alloc;\n\n// The elementary types\nuse alloc::string::String;\nuse alloc::vec::Vec;\nuse alloc::collections::BTreeMap;\nuse crate::alloc::string::ToString;\n\n\n// Casper crates\nuse casper_types::{Key, CLType, Parameter, EntryPoint, EntryPoints, EntryPointType, EntryPointAccess};\n\nuse casper_contract:{\n    contract_api::{runtime, storage},\n    unwrap_or_revert::UnwrapOrRevert,\n};\n\n\n#[no_mangle]\npub extern \"C\" fn call() {\n\n    // Get the value of the runtime argument named \"message\"\n    let value: String = runtime::get_named_arg(\"message\");\n\n    // The value will be written under a URef\n    let value_ref = storage::new_uref(value);\n\n    // Creating the new set of named keys\n    // The keys are a Map of String/casper_types::Key\n    let mut named_keys: BTreeMap<String, Key> = BTreeMap::new();\n\n    // Insert the new value into the named keys\n    named_keys.insert(String::from(\"message\"),value_ref.into()); // use into to wrap the Uref into a casper_types::Key\n    // Create a new vector\n    let mut params = Vec::new();\n    vec.push(Parameter::new(\"message\", CLType::String));\n\n    // Create an Entry Point Object\n    let mut entry_points = EntryPoints::new();\n\n    // Describing the metadata for the entry point\n    entry_points.add_entry_point(EntryPoint::new(\n        \"update_msg\",                   // the name of the entry point\n        vec,                            // the arguments which can be passed into the entry point\n        CLType::Unit,                   // return type of the entry point\n        EntryPointAccess::Public,       // access permissions - public can be accessed always\n        EntryPointType::Contract        // in most cases it will be contract\n    ));\n\n    // The contract is stored in the global state\n    let (stored_contract_hash, _contract_version) = storage::new_contract(\n        entry_points,                                       // entry points\n        Some(named_keys),                                   // named keys\n        Some(\"Hello_world_package_name\".to_string()),       // package name\n        Some(\"Hello_world_access_uref\".to_string())         // access uref\n    );\n\n    // To access the contract hash from the accounts named keys\n    runtime::put_key(\"hello_world_contract\", stored_contract_hash.into());\n\n}\n```\n\n----------------------------------------\n\nTITLE: Preparing Counter Contract Dependencies using Make (Bash)\nDESCRIPTION: Navigates into the cloned 'counter' directory and runs the `make prepare` command. This command typically sets up the necessary dependencies or environment for building the smart contract.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/docs/resources/quick-start.md#2025-04-22_snippet_9\n\nLANGUAGE: bash\nCODE:\n```\ncd counter\nmake prepare\n```\n\n----------------------------------------\n\nTITLE: Querying Dictionary Item with state_get_dictionary_item in Casper Network\nDESCRIPTION: This example shows how to request a dictionary item from the Casper Network using the state_get_dictionary_item JSON-RPC method. The request uses a URef-based dictionary identifier with a specific item key and state root hash.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/versioned_docs/version-1.5.X/developers/json-rpc/json-rpc-informational.md#2025-04-22_snippet_18\n\nLANGUAGE: bash\nCODE:\n```\n{\n  \"id\": 1,\n  \"jsonrpc\": \"2.0\",\n  \"method\": \"state_get_dictionary_item\",\n  \"params\": [\n    {\n      \"URef\": {\n        \"dictionary_item_key\": \"a_unique_entry_identifier\",\n        \"seed_uref\": \"uref-09480c3248ef76b603d386f3f4f8a5f87f597d4eaffd475433f861af187ab5db-007\"\n      }\n    },\n    \"0808080808080808080808080808080808080808080808080808080808080808\"\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Merkle Trie Data Structure in Rust\nDESCRIPTION: Core implementation of the Merkle trie data structure in the Casper blockchain. The structure supports leaf nodes, branch nodes with up to 256 children using blake2b256 hashes, and extension nodes for path compression.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/versioned_docs/version-1.5.X/concepts/global-state.md#2025-04-22_snippet_0\n\nLANGUAGE: rust\nCODE:\n```\n// From execution_engine/src/storage/trie/mod.rs\n// Definition of the trie data structure\n```\n\n----------------------------------------\n\nTITLE: Minting Additional CEP-18 Tokens via Casper Client\nDESCRIPTION: Sends a deploy using `casper-client` to call the `mint` entry point of a CEP-18 contract package, provided the contract allows minting and the caller has permission. This creates new tokens and assigns them to the specified `owner` account, increasing the total supply. Requires node address, caller's (minter) secret key, CEP-18 package name, recipient owner account hash, the amount to mint, chain name, and payment amount.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/versioned_docs/version-1.5.X/resources/tokens/cep18/transfer.md#2025-04-22_snippet_20\n\nLANGUAGE: bash\nCODE:\n```\ncasper-client put-deploy -n http://<NODE IP>:<PORT> \\\n--secret-key ~/casper/demo/user_a/secret_key.pem \\\n--session-package-name \"cep18_contract_package_CEP18\" \\\n--session-entry-point \"mint\" \\\n// This is the account that will receive the newly minted CEP-18 tokens.\n--session-arg \"owner:key='account-hash-683f53f56926f54ef9584b07585b025c68415dc05f7b2e56749153574b83d5cd'\" \\\n// This is the number of additional CEP-18 tokens to add to the total supply.\n--session-arg \"amount:U256='10'\" \\\n--chain-name <CHAIN NAME> \\\n--payment-amount 1000000000\n```\n\n----------------------------------------\n\nTITLE: Defining Casper CLType Schema and Variants - JSON\nDESCRIPTION: This snippet provides a discriminated-union style definition for all allowed Casper types (scalar, option, list, map, result, and tuple types), supporting deeply nested and composite types for smart contract arguments. Used by other schemas (e.g., CLValue), this schema enables accurate type checking and interpretation for serialization/deserialization purposes. Limitations arise from strict enum/options enforcement according to type variant used.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/condor/jsonrpc-comp/rpc-1.5/schema.json.md#2025-04-22_snippet_36\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"description\": \"Casper types, i.e. types which can be stored and manipulated by smart contracts.\\n\\nProvides a description of the underlying data type of a [`CLValue`](crate::CLValue).\",\n  \"anyOf\": [\n    {\n      \"type\": \"string\",\n      \"enum\": [\n        \"Bool\",\n        \"I32\",\n        \"I64\",\n        \"U8\",\n        \"U32\",\n        \"U64\",\n        \"U128\",\n        \"U256\",\n        \"U512\",\n        \"Unit\",\n        \"String\",\n        \"Key\",\n        \"URef\",\n        \"PublicKey\",\n        \"Any\"\n      ]\n    },\n    {\n      \"description\": \"`Option` of a `CLType`.\",\n      \"type\": \"object\",\n      \"required\": [\n        \"Option\"\n      ],\n      \"properties\": {\n        \"Option\": {\n          \"$ref\": \"#/components/schemas/CLType\"\n        }\n      },\n      \"additionalProperties\": false\n    },\n    {\n      \"description\": \"Variable-length list of a single `CLType` (comparable to a `Vec`).\",\n      \"type\": \"object\",\n      \"required\": [\n        \"List\"\n      ],\n      \"properties\": {\n        \"List\": {\n          \"$ref\": \"#/components/schemas/CLType\"\n        }\n      },\n      \"additionalProperties\": false\n    },\n    {\n      \"description\": \"Fixed-length list of a single `CLType` (comparable to a Rust array).\",\n      \"type\": \"object\",\n      \"required\": [\n        \"ByteArray\"\n      ],\n      \"properties\": {\n        \"ByteArray\": {\n          \"type\": \"integer\",\n          \"format\": \"uint32\",\n          \"minimum\": 0.0\n        }\n      },\n      \"additionalProperties\": false\n    },\n    {\n      \"description\": \"`Result` with `Ok` and `Err` variants of `CLType`s.\",\n      \"type\": \"object\",\n      \"required\": [\n        \"Result\"\n      ],\n      \"properties\": {\n        \"Result\": {\n          \"type\": \"object\",\n          \"required\": [\n            \"err\",\n            \"ok\"\n          ],\n          \"properties\": {\n            \"ok\": {\n              \"$ref\": \"#/components/schemas/CLType\"\n            },\n            \"err\": {\n              \"$ref\": \"#/components/schemas/CLType\"\n            }\n          },\n          \"additionalProperties\": false\n        }\n      },\n      \"additionalProperties\": false\n    },\n    {\n      \"description\": \"Map with keys of a single `CLType` and values of a single `CLType`.\",\n      \"type\": \"object\",\n      \"required\": [\n        \"Map\"\n      ],\n      \"properties\": {\n        \"Map\": {\n          \"type\": \"object\",\n          \"required\": [\n            \"key\",\n            \"value\"\n          ],\n          \"properties\": {\n            \"key\": {\n              \"$ref\": \"#/components/schemas/CLType\"\n            },\n            \"value\": {\n              \"$ref\": \"#/components/schemas/CLType\"\n            }\n          },\n          \"additionalProperties\": false\n        }\n      },\n      \"additionalProperties\": false\n    },\n    {\n      \"description\": \"1-ary tuple of a `CLType`.\",\n      \"type\": \"object\",\n      \"required\": [\n        \"Tuple1\"\n      ],\n      \"properties\": {\n        \"Tuple1\": {\n          \"type\": \"array\",\n          \"items\": {\n            \"$ref\": \"#/components/schemas/CLType\"\n          },\n          \"maxItems\": 1,\n          \"minItems\": 1\n        }\n      },\n      \"additionalProperties\": false\n    },\n    {\n      \"description\": \"2-ary tuple of `CLType`s.\",\n      \"type\": \"object\",\n      \"required\": [\n        \"Tuple2\"\n      ],\n      \"properties\": {\n        \"Tuple2\": {\n\n```\n\n----------------------------------------\n\nTITLE: Defining Block Identification Schema in JSON\nDESCRIPTION: JSON schema definition for identifying and retrieving a block by its height, specifying the required properties and validation rules.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/condor/jsonrpc-comp/rpc-1.5/schema.json.md#2025-04-22_snippet_52\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"description\": \"Identify and retrieve the block with its height.\",\n  \"type\": \"object\",\n  \"required\": [\n    \"Height\"\n  ],\n  \"properties\": {\n    \"Height\": {\n      \"type\": \"integer\",\n      \"format\": \"uint64\",\n      \"minimum\": 0.0\n    }\n  },\n  \"additionalProperties\": false\n}\n```\n\n----------------------------------------\n\nTITLE: Creating an Unlocked Casper Contract Package in Rust\nDESCRIPTION: This Rust snippet demonstrates creating a new, upgradable contract package on the Casper network using `storage::new_contract`. It specifies entry points, named keys, a package name, and an access URef, which is crucial for enabling future upgrades. The resulting contract hash and version URef are stored under predefined named keys (`CONTRACT_KEY`, `CONTRACT_VERSION_KEY`) for retrieval.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/docs/resources/beginner/upgrade-contract.md#2025-04-22_snippet_0\n\nLANGUAGE: rust\nCODE:\n```\n    // Create a new contract and specify a package name and access URef for further modifications\n    let (stored_contract_hash, contract_version) = storage::new_contract(\n        contract_entry_points,\n        Some(contract_named_keys),\n        Some(\"contract_package_name\".to_string()),\n        Some(\"contract_access_uref\".to_string()),\n    );\n\n    // The hash of the installed contract will be reachable through a named key\n    runtime::put_key(CONTRACT_KEY, stored_contract_hash.into());\n\n    // The current version of the contract will be reachable through a named key\n    let version_uref = storage::new_uref(contract_version);\n    runtime::put_key(CONTRACT_VERSION_KEY, version_uref.into());\n```\n\n----------------------------------------\n\nTITLE: Building the CEP-18 Contract in Bash\nDESCRIPTION: Commands to prepare the environment and build the CEP-18 fungible token contract, generating the WebAssembly file needed for deployment.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/versioned_docs/version-1.5.X/resources/beginner/cep18.md#2025-04-22_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ncd cep18\nmake prepare\nmake build-contract\n```\n\n----------------------------------------\n\nTITLE: Parsing Contract Package Response in Bash\nDESCRIPTION: This Bash snippet shows the expected JSON response after querying the contract package, highlighting contract package details such as access keys and contract versions.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/docs/resources/tokens/cep18/query.md#2025-04-22_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n{\n  \"id\": -1489823435760214673,\n  \"jsonrpc\": \"2.0\",\n  \"result\": {\n    \"api_version\": \"1.0.0\",\n    \"block_header\": null,\n    \"merkle_proof\": \"[2048 hex chars]\",\n    \"stored_value\": {\n      \"ContractPackage\": {\n        \"access_key\": \"uref-8dac847ce0ae20f0156cf37dd233cc1d166fde8269fc9a393b0ea04174be1167-007\",\n        \"disabled_versions\": [],\n        \"groups\": [],\n        \"versions\": [\n          {\n            \"contract_hash\": \"contract-05d893e76c731729fc26339e5a970bd79fbf4a6adf743c8385431fb494bff45e\",\n            \"contract_version\": 1,\n            \"protocol_version_major\": 1\n          }\n        ]\n      }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Transferring CEP-18 Tokens Using Casper Client Bash\nDESCRIPTION: This code snippet shows a bash version of the Casper client command to transfer CEP-18 tokens. The process includes setting up the node URL, chain name, secret key path, contract hash, entry point, recipient account hash, token amount, and gas payment. The result is a deploy hash that needs further querying to confirm execution status.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/docs/resources/tokens/cep18/transfer.md#2025-04-22_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ncasper-client put-deploy -n http://<node IP>:<PORT> \\\n--chain-name <CHAIN NAME>\\\n--secret-key ~/casper/demo/user_a/secret_key.pem \\\n--session-hash hash-b568f50a64acc8bbe43462ffe243849a88111060b228dacb8f08d42e26985180 \\\n--session-entry-point \"transfer\" \\\n--session-arg \"recipient:key='account-hash-9f81014b9c7406c531ebf0477132283f4eb59143d7903a2fae54358b26cea44b\" \\\n--session-arg \"amount:u256='50'\" \\\n--payment-amount \"10000000000\"\n```\n\n----------------------------------------\n\nTITLE: Serializing SystemEntityType Enum\nDESCRIPTION: Defines `SystemEntityType` used to identify system contracts. It serializes as a single `u8` tag according to a specific mapping: 0 for Mint, 1 for Auction, 2 for StandardPayment, 3 for HandlePayment.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/versioned_docs/version-2.0.0/concepts/serialization/types.md#2025-04-22_snippet_49\n\nLANGUAGE: text\nCODE:\n```\nEntity types for system contracts, serialized as a single `u8` tag identifying the contract as per the following table:\n\n| Tag | System Contract |\n| --- | --------------- |\n| 0 | `Mint` |\n| 1 | `Auction` |\n| 2 | `StandardPayment` |\n| 3 | `HandlePayment` |\n```\n\n----------------------------------------\n\nTITLE: Calling Contract Entry Point ('counter_inc')\nDESCRIPTION: This command sends a deploy to call a specific entry point (`counter_inc`) of an already installed contract identified by its name (`counter`). Instead of providing a Wasm path, it uses `--session-name` and `--session-entry-point`. This executes the increment function within the deployed counter contract.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/docs/resources/beginner/counter-testnet/walkthrough.md#2025-04-22_snippet_12\n\nLANGUAGE: bash\nCODE:\n```\ncasper-client put-deploy \\\n    --node-address http://[NODE_IP]:7777 \\\n    --chain-name casper-test \\\n    --secret-key [PATH_TO_YOUR_KEY]/secret_key.pem \\\n    --payment-amount [PAYMENT_AMOUNT_IN_MOTES] \\\n    --session-name \"counter\" \\\n    --session-entry-point \"counter_inc\"\n```\n\n----------------------------------------\n\nTITLE: Deploying the Casper Delegate Contract via JavaScript SDK - JavaScript\nDESCRIPTION: Demonstrates how to load the compiled delegate.wasm file and deploy it to a Casper node using the casper-js-sdk. Utilizes the CasperClient, Contracts.Contract, and RuntimeArgs to prepare deploy arguments, including the delegation amount, delegator keypair, and validator public key. Expects the contract Wasm path relative to the backend and requires the user to provide a valid keypair object and RPC endpoint. Outputs the resulting deploy hash; suitable for integration into dApp backends or scripts.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/versioned_docs/version-1.5.X/developers/dapps/sdk/client-library-usage.md#2025-04-22_snippet_26\n\nLANGUAGE: javascript\nCODE:\n```\nconst { CasperClient, Contracts, RuntimeArgs, CLValueBuilder, CLPublicKey } = require(\"casper-js-sdk\");\\nconst fs = require(\"fs\");\\n\\nconst casperClient = new CasperClient(\"http://NODE_ADDRESS:7777/rpc\")\\nconst contract = new Contracts.Contract(casperClient)\\n\\nconst contractWasm = new Uint8Array(fs.readFileSync(\"./casper-node/target/wasm32-unknown-unknown/release/delegate.wasm\").buffer);\\n\\nconst runtimeArguments = RuntimeArgs.fromMap({\\n    \"amount\": CLValueBuilder.u512(500e9), // Minimum delegation amount: 500 CSPR\\n    \"delegator\": keypair.publicKey,\\n    \"validator\": CLPublicKey.fromHex(\"01e8c84f4fbb58d37991ef373c08043a45c44cd7f499453fa2bd3e141cc0113b3c\")\\n});\\n\\nconst deploy = contract.install(\\n    contractWasm,\\n    runtimeArguments,\\n    \"5000000000\", // Gas payment (5 CSPR)\\n    keypair.publicKey,\\n    \"casper\", // or \"casper-test\" for testnet\\n    [keypair]\\n);\\n\\n(async () => {\\n    console.log(await casperClient.putDeploy(deploy));\\n})();    \n```\n\n----------------------------------------\n\nTITLE: Querying Auction Information with Casper Client (Bash)\nDESCRIPTION: This command utilizes the `casper-client` to query the auction contract state on a specified Casper node (`<HOST:PORT>`). The returned information includes current bids and the validator sets for upcoming eras, allowing verification of whether a submitted bid was accepted and the bidder is included in a future validator set.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/docs/operators/becoming-a-validator/bonding.md#2025-04-22_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\ncasper-client get-auction-info --node-address http://<HOST:PORT>\n```\n\n----------------------------------------\n\nTITLE: Initializing a CEP-18 Token Contract in Rust\nDESCRIPTION: The call() function implementation that initializes a CEP-18 token with name, symbol, decimals, and total supply parameters from runtime arguments.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/versioned_docs/version-1.5.X/resources/tokens/cep18/full-tutorial.md#2025-04-22_snippet_5\n\nLANGUAGE: rust\nCODE:\n```\n#[no_mangle]\nfn call() {\n  let name: String = runtime::get_named_arg(NAME_RUNTIME_ARG_NAME);\n  let symbol: String = runtime::get_named_arg(SYMBOL_RUNTIME_ARG_NAME);\n  let decimals = runtime::get_named_arg(DECIMALS_RUNTIME_ARG_NAME);\n  let total_supply = runtime::get_named_arg(TOTAL_SUPPLY_RUNTIME_ARG_NAME);\n\n  let _token = CEP18::install(name, symbol, decimals, total_supply).unwrap_or_revert();\n}\n```\n\n----------------------------------------\n\nTITLE: Cloning Sample Counter Contract Repository using Git (Bash)\nDESCRIPTION: Downloads the source code for a simple counter smart contract from its GitHub repository using the `git clone` command. This provides the sample contract code to be built and deployed.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/docs/resources/quick-start.md#2025-04-22_snippet_8\n\nLANGUAGE: bash\nCODE:\n```\ngit clone https://github.com/casper-ecosystem/counter\n```\n\n----------------------------------------\n\nTITLE: Submitting a Smart Contract Transaction to NCTL via Casper CLI - Bash\nDESCRIPTION: This bash command installs or interacts with a smart contract session on the local Casper NCTL network using the Casper CLI `put-transaction session` subcommand. It requires parameters such as the chain name, secret key, gas price tolerance, pricing mode, transaction WASM path, category, entry point, and node address; these enable precise configuration and deployment of the smart contract for testing. Output is a deploy hash if successful; intended for developers wishing to test contract execution without incurring real network cost.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/versioned_docs/version-2.0.0/developers/dapps/nctl-test.md#2025-04-22_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n$(get_path_to_client) put-transaction session \\\n--chain-name \\\"casper-net-1\\\" \\\n--secret-key /casper/casper-node/utils/nctl/assets/net-1/nodes/node-1/keys/secret_key.pem \\\n--gas-price-tolerance 10 \\\n--pricing-mode fixed \\\n--transaction-path <PATH> \\\n--category 'install-upgrade' \\\n--session-entry-point call \\\n--node-address http://localhost:11101\n```\n\n----------------------------------------\n\nTITLE: ApiVersion Event Structure\nDESCRIPTION: Example of the ApiVersion event JSON structure that is emitted when a new client connects to a node's SSE server.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/versioned_docs/version-1.5.X/developers/dapps/monitor-and-consume-events.md#2025-04-22_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\ndata:{\"ApiVersion\":\"1.0.0\"}\n```\n\n----------------------------------------\n\nTITLE: Defining state_get_dictionary_item JSON-RPC Method Schema\nDESCRIPTION: JSON schema definition for the state_get_dictionary_item RPC method that retrieves dictionary items from the Casper blockchain state. It specifies required parameters including state_root_hash and dictionary_identifier, along with the response structure and an example usage.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/condor/jsonrpc-comp/rpc-2.0/state_get_dictionary_item.json.md#2025-04-22_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"name\": \"state_get_dictionary_item\",\n  \"summary\": \"returns an item from a Dictionary\",\n  \"params\": [\n    {\n      \"name\": \"state_root_hash\",\n      \"schema\": {\n        \"description\": \"Hash of the state root\",\n        \"$ref\": \"#/components/schemas/Digest\"\n      },\n      \"required\": true\n    },\n    {\n      \"name\": \"dictionary_identifier\",\n      \"schema\": {\n        \"description\": \"The Dictionary query identifier.\",\n        \"$ref\": \"#/components/schemas/DictionaryIdentifier\"\n      },\n      \"required\": true\n    }\n  ],\n  \"result\": {\n    \"name\": \"state_get_dictionary_item_result\",\n    \"schema\": {\n      \"description\": \"Result for \\\"state_get_dictionary_item\\\" RPC response.\",\n      \"type\": \"object\",\n      \"required\": [\n        \"api_version\",\n        \"dictionary_key\",\n        \"merkle_proof\",\n        \"stored_value\"\n      ],\n      \"properties\": {\n        \"api_version\": {\n          \"description\": \"The RPC API version.\",\n          \"type\": \"string\"\n        },\n        \"dictionary_key\": {\n          \"description\": \"The key under which the value is stored.\",\n          \"type\": \"string\"\n        },\n        \"stored_value\": {\n          \"description\": \"The stored value.\",\n          \"$ref\": \"#/components/schemas/StoredValue\"\n        },\n        \"merkle_proof\": {\n          \"description\": \"The Merkle proof.\",\n          \"type\": \"string\"\n        }\n      },\n      \"additionalProperties\": false\n    }\n  },\n  \"examples\": [\n    {\n      \"name\": \"state_get_dictionary_item_example\",\n      \"params\": [\n        {\n          \"name\": \"state_root_hash\",\n          \"value\": \"0808080808080808080808080808080808080808080808080808080808080808\"\n        },\n        {\n          \"name\": \"dictionary_identifier\",\n          \"value\": {\n            \"URef\": {\n              \"seed_uref\": \"uref-09480c3248ef76b603d386f3f4f8a5f87f597d4eaffd475433f861af187ab5db-007\",\n              \"dictionary_item_key\": \"a_unique_entry_identifier\"\n            }\n          }\n        }\n      ],\n      \"result\": {\n        \"name\": \"state_get_dictionary_item_example_result\",\n        \"value\": {\n          \"api_version\": \"2.0.0\",\n          \"dictionary_key\": \"dictionary-67518854aa916c97d4e53df8570c8217ccc259da2721b692102d76acd0ee8d1f\",\n          \"stored_value\": {\n            \"CLValue\": {\n              \"cl_type\": \"U64\",\n              \"bytes\": \"0100000000000000\",\n              \"parsed\": 1\n            }\n          },\n          \"merkle_proof\": \"01000000006ef2e0949ac76e55812421f755abe129b6244fe7168b77f47a72536147614625016ef2e0949ac76e55812421f755abe129b6244fe7168b77f47a72536147614625000000003529cde5c621f857f75f3810611eb4af3f998caaa9d4a3413cf799f99c67db0307010000006ef2e0949ac76e55812421f755abe129b6244fe7168b77f47a7253614761462501010102000000006e06000000000074769d28aac597a36a03a932d4b43e4f10bf0403ee5c41dd035102553f5773631200b9e173e8f05361b681513c14e25e3138639eb03232581db7557c9e8dbbc83ce94500226a9a7fe4f2b7b88d5103a4fc7400f02bf89c860c9ccdd56951a2afe9be0e0267006d820fb5676eb2960e15722f7725f3f8f41030078f8b2e44bf0dc03f71b176d6e800dc5ae9805068c5be6da1a90b2528ee85db0609cc0fb4bd60bbd559f497a98b67f500e1e3e846592f4918234647fca39830b7e1e6ad6f5b7a99b39af823d82ba1873d000003000000010186ff500f287e9b53f823ae1582b1fa429dfede28015125fd233a31ca04d5012002015cc42669a55467a1fdf49750772bfc1aed59b9b085558eb81510e9b015a7c83b0301e3cf4a34b1db6bfa58808b686cb8fe21ebe0c1bcbcee522649d2b135fe510fe3\"\n        }\n      }\n    }\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Example: Unbonding 1000 CSPR via Compiled Wasm on Testnet (Bash)\nDESCRIPTION: This is an example command showing how to unbond 1000 CSPR (1000 * 10^9 motes) on the Casper Testnet using the compiled `withdraw_bid.wasm`. It uses `casper-client put-deploy` with specific values for node address, secret key path, chain name (casper-test), Wasm path, payment (4 CSPR), public key, and withdrawal amount. Note that the payment amount might need adjustment based on the current network's chainspec.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/docs/operators/becoming-a-validator/unbonding.md#2025-04-22_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\nsudo -u casper casper-client put-deploy \\\n--node-address http://65.21.75.254:7777 \\\n--secret-key /etc/casper/validator_keys/secret_key.pem \\\n--chain-name casper-test \\\n--session-path $HOME/casper-node/target/wasm32-unknown-unknown/release/withdraw_bid.wasm \\\n--payment-amount 4000000000 \\\n--session-arg=\"public_key:public_key='01c297d2931fec7e22b2fb1ae3ca5afdfacc2c82ba501e8ed158eecef82b4dcdee'\" \\\n--session-arg=\"amount:u512='1000000000000'\"\n```\n\n----------------------------------------\n\nTITLE: Executing Invocable Entity Transaction in Casper Network\nDESCRIPTION: This command allows a user to invoke an entry point on a given AddressableEntity using an Entity Address. It requires the entity address, session entry point, gas price tolerance, and either a secret key or initiator address.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/docs/concepts/transactions.md#2025-04-22_snippet_5\n\nLANGUAGE: json\nCODE:\n```\ncasper-client put-txn invocable-entity\n/// The [`entity-hash`](../developers/json-rpc/types_chain.md#addressableentityhash) of the entity to invoke.\n  --entity-address <FORMATTED STRING or PATH>\n/// The entry point on the invocable entity.\n  --session-entry-point <NAME>\n/// The maximum gas price that the user is willing to pay for this transaction.\n  --gas-price-tolerance <INTEGER>\n/// The path to the local secret key file, or the [`initiator address`](../developers/json-rpc/types_chain.md#initiatoraddr) sending the transaction.\n  <--secret-key <PATH>|--initiator-address <HEX STRING>>\n```\n\n----------------------------------------\n\nTITLE: Decrease Allowance Entry Point for Casper Token Contract\nDESCRIPTION: Entry point definition for decreasing the amount of tokens that a spender is allowed to transfer from the caller's account. Takes spender key and amount parameters and requires caller payment.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/docs/developers/cli/sending-transactions.md#2025-04-22_snippet_11\n\nLANGUAGE: JSON\nCODE:\n```\n{\n  \"key\": \"entry-point-v1-entity-contract-363996106630892a964565574fcdfd2435f21a17a3ad1ed2054146e7d8461640-ac07c23dc90a33282d553af890e30e62335c5ae986629d643778e2d4516f26ad\",\n  \"kind\": {\n    \"Write\": {\n      \"EntryPoint\": {\n        \"V1CasperVm\": {\n          \"name\": \"decrease_allowance\",\n          \"args\": [\n            {\n              \"name\": \"spender\",\n              \"cl_type\": \"Key\"\n            },\n            {\n              \"name\": \"amount\",\n              \"cl_type\": \"U256\"\n            }\n          ],\n          \"ret\": \"Unit\",\n          \"access\": \"Public\",\n          \"entry_point_type\": \"Called\",\n          \"entry_point_payment\": \"Caller\"\n        }\n      }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Querying Global State using Casper-Client\nDESCRIPTION: Command to query the global state of the Casper network at a specific point in time defined by the state root hash. It requires the node address, the state root hash, and a key (like account hash, contract hash, etc.). An optional query path (`-q`) can be used to access specific data within the key's context.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/docs/resources/beginner/counter-testnet/commands.md#2025-04-22_snippet_2\n\nLANGUAGE: rust\nCODE:\n```\ncasper-client query-global-state \\\n    --node-address [NODE_SERVER_ADDRESS] \\\n    --state-root-hash [STATE_ROOT_HASH] \\\n    --key [ACCOUNT_HASH] \\\n    -q \"[SESSION_NAME]/[SESSION_NAMED_KEY]\" (OPTIONAL)\n```\n\n----------------------------------------\n\nTITLE: Deploying the Casper Delegate Contract via PYCSPR SDK - Python\nDESCRIPTION: Shows how to build and submit a validator delegation deploy using pycspr, providing all necessary arguments, including required keypairs and validator public key. Assumes valid setup of the pycspr client and access to the delegate.wasm produced by prior compilation. Highlights constructing deploy parameters and approving/signing the deploy before submitting to the network. Prints the deploy hash as output, facilitating backend workflow automation.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/versioned_docs/version-1.5.X/developers/dapps/sdk/client-library-usage.md#2025-04-22_snippet_27\n\nLANGUAGE: python\nCODE:\n```\nimport pycspr\\n\\nvalidator_public_key = pycspr.factory.accounts.create_public_key_from_account_key(\\n    bytes.fromhex(\"01e8c84f4fbb58d37991ef373c08043a45c44cd7f499453fa2bd3e141cc0113b3c\")\\n)\\n\\ndeploy_params = pycspr.create_deploy_parameters(\\n    account = keypair, # Only the public key is used, see `create_deploy_parameters`\\n    chain_name = \"casper\" # or \"casper-test\" for testnet\\n)\\n\\ndeploy = pycspr.create_validator_delegation(\\n    params = deploy_params,\\n    amount = int(500e9), # Minimum delegation amount: 500 CSPR\\n    public_key_of_delegator = keypair,\\n    public_key_of_validator = validator_public_key,\\n    path_to_wasm = \"./casper-node/target/wasm32-unknown-unknown/release/delegate.wasm\"\\n)\\n\\ndeploy.approve(keypair)\\nclient.send_deploy(deploy)\\nprint(deploy.hash.hex())\n```\n\n----------------------------------------\n\nTITLE: Implementing Wallet Disconnect Function in JavaScript\nDESCRIPTION: Function to disconnect the Casper Wallet from the website, resetting the public key state to null and showing a disconnection alert.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/versioned_docs/version-2.0.0/developers/dapps/template-frontend.md#2025-04-22_snippet_12\n\nLANGUAGE: javascript\nCODE:\n```\nconst disconnect = (props) => {\n    provider.disconnectFromSite().then(disconnected => {\n        if (disconnected) {\n            props.setPublicKey(null);\n            alert(\"Disconnected\");\n        } \n    }).catch(error => {\n        alert(error.message);\n    });\n}\n```\n\n----------------------------------------\n\nTITLE: Examining Step Event Structure in JSON\nDESCRIPTION: The Step event is emitted at the end of every era and contains execution effects from running the auction contract's step function. It includes era ID, operations, and transform data showing state changes.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/versioned_docs/version-1.5.X/developers/dapps/monitor-and-consume-events.md#2025-04-22_snippet_10\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"Step\": {\n    \"era_id\": 1,\n    \"execution_effect\": {\n      \"operations\": [],\n      \"transforms\": [\n        {\n          \"key\": \"uref-53df18bf01396fbd1ef3a8757c7bdffc684c407d90f2cfeebff166db1d923613-000\",\n          \"transform\": \"Identity\"\n        },\n        {\n          \"key\": \"uref-f268de37fcea55f8fb1abeba8536a1cc041b2aed2691f1cf34aeaaf0ae379aa5-000\",\n          \"transform\": \"Identity\"\n        },\n        {\n          \"key\": \"bid-278e5af1ca6cddf5d5438999cb072b47f0d65e1484799f692c3c9c40304be30e\",\n          \"transform\": \"Identity\"\n        },\n        {\n          \"key\": \"bid-278e5af1ca6cddf5d5438999cb072b47f0d65e1484799f692c3c9c40304be30e\",\n          \"transform\": {\n            \"WriteBid\": {\n              \"validator_public_key\": \"0133eaae2821f090ac3ba0eadc0a897742094c0604df72b465c41d4b773298a7b9\",\n              \"bonding_purse\": \"uref-136552c255d4d737bf7e43d2be250f9f38691b9fe5d9e34446bff18d6d1cf984-007\",\n              \"staked_amount\": \"1000000000000005\",\n              \"delegation_rate\": 5,\n              \"vesting_schedule\": {\n                \"initial_release_timestamp_millis\": 1664475057182,\n                \"locked_amounts\": null\n              },\n              \"delegators\": {\n                \"012a241eaa9fa3bd6ccb0e0aaaf4658538f3540e04e2f58973614a168f2f2f813d\": {\n                  \"delegator_public_key\": \"012a241eaa9fa3bd6ccb0e0aaaf4658538f3540e04e2f58973614a168f2f2f813d\",\n                  \"staked_amount\": \"51312014671568117976319379\",\n                  \"bonding_purse\": \"uref-c5ad00f9e6b2f2631ca647ad188187e63799a278a0a46ca25f6b4da64d556662-007\",\n                  \"validator_public_key\": \"0133eaae2821f090ac3ba0eadc0a897742094c0604df72b465c41d4b773298a7b9\",\n                  \"vesting_schedule\": {\n                    \"initial_release_timestamp_millis\": 1664475057182,\n                    \"locked_amounts\": null\n                  }\n                }\n              },\n              \"inactive\": false\n            }\n          }\n        }\n      ]\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Minting Additional CEP-18 Tokens using Casper Client - Bash\nDESCRIPTION: This bash command calls the mint entry point on a CEP-18 token contract to create additional tokens. It requires the secret key, contract package name, chain name, payment amount, and session arguments for the owner and the amount to be minted. Used for increasing circulating supply, it's essential that the contract permits minting and that the owner is specified correctly.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/versioned_docs/version-2.0.0/resources/tokens/cep18/transfer.md#2025-04-22_snippet_20\n\nLANGUAGE: bash\nCODE:\n```\ncasper-client put-deploy -n http://<NODE IP>:<PORT> \\\n--secret-key ~/casper/demo/user_a/secret_key.pem \\\n--session-package-name \"cep18_contract_package_CEP18\" \\\n--session-entry-point \"mint\" \\\n// This is the account that will receive the newly minted CEP-18 tokens.\n--session-arg \"owner:key='account-hash-683f53f56926f54ef9584b07585b025c68415dc05f7b2e56749153574b83d5cd'\" \\\n// This is the number of additional CEP-18 tokens to add to the total supply.\n--session-arg \"amount:U256='10'\" \\\n--chain-name <CHAIN NAME> \\\n--payment-amount 1000000000\n```\n\n----------------------------------------\n\nTITLE: Defining a Single-Key Casper Account in JSON\nDESCRIPTION: This snippet defines a Casper account with a single primary key, assigning it a weight equal to both the deployment and key management thresholds (both set to 1). No additional associated keys or named keys exist, and the configuration allows the key to perform all account actions without further authorization. The main purse is specified, and the setup is useful for basic single-user accounts. No external dependencies are required; the structure adheres to Casper's on-chain account schema.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/docs/resources/advanced/multi-sig/other-scenarios.md#2025-04-22_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\\n\\\"Account\\\": {\\n   \\\"account_address\\\": \\\"account-hash-a1…\\\",\\n      \\\"action_thresholds\\\": {\\n         \\\"deployment\\\": 1,\\n         \\\"key_management\\\": 1\\n   },\\n   \\\"associated_keys\\\": [\\n      {\\n         \\\"account_address\\\": \\\"account-hash-a1…\\\", // primary key\\n         \\\"weight\\\": 1\\n      }\\n   ],\\n   \\\"main_purse\\\": \\\"uref-1234…\\\",\\n   \\\"named_keys\\\": []\\n}\\n}\n```\n\n----------------------------------------\n\nTITLE: Defining BlockV1 and BlockBodyV1 Schemas in JSON\nDESCRIPTION: Defines the schemas for BlockV1 and BlockBodyV1, which represent version 1 of a block and its body after execution. It includes properties for hash, header, and body components.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/condor/jsonrpc-comp/rpc-2.0/schema/components.json.md#2025-04-22_snippet_86\n\nLANGUAGE: JSON\nCODE:\n```\n\"BlockV1\": {\n    \"description\": \"A block after execution, with the resulting global state root hash. This is the core component of the Casper linear blockchain. Version 1.\",\n    \"type\": \"object\",\n    \"required\": [\n        \"body\",\n        \"hash\",\n        \"header\"\n    ],\n    \"properties\": {\n        \"hash\": {\n            \"description\": \"The block hash identifying this block.\",\n            \"allOf\": [\n                {\n                    \"$ref\": \"#/components/schemas/BlockHash\"\n                }\n            ]\n        },\n        \"header\": {\n            \"description\": \"The header portion of the block.\",\n            \"allOf\": [\n                {\n                    \"$ref\": \"#/components/schemas/BlockHeaderV1\"\n                }\n            ]\n        },\n        \"body\": {\n            \"description\": \"The body portion of the block.\",\n            \"allOf\": [\n                {\n                    \"$ref\": \"#/components/schemas/BlockBodyV1\"\n                }\n            ]\n        }\n    }\n},\n\"BlockBodyV1\": {\n    \"description\": \"The body portion of a block. Version 1.\",\n    \"type\": \"object\",\n    \"required\": [\n        \"deploy_hashes\",\n        \"proposer\",\n        \"transfer_hashes\"\n    ],\n    \"properties\": {\n        \"proposer\": {\n            \"description\": \"The public key of the validator which proposed the block.\",\n            \"allOf\": [\n                {\n                    \"$ref\": \"#/components/schemas/PublicKey\"\n                }\n            ]\n        },\n        \"deploy_hashes\": {\n            \"description\": \"The deploy hashes of the non-transfer deploys within the block.\",\n            \"type\": \"array\",\n            \"items\": {\n                \"$ref\": \"#/components/schemas/DeployHash\"\n            }\n        },\n        \"transfer_hashes\": {\n            \"description\": \"The deploy hashes of the transfers within the block.\",\n            \"type\": \"array\",\n            \"items\": {\n                \"$ref\": \"#/components/schemas/DeployHash\"\n            }\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Minting a CEP-78 Token using JavaScript Client\nDESCRIPTION: Example of minting a CEP-78 token using the JavaScript client. It shows how to set token metadata and send the minting deploy.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/versioned_docs/version-1.5.X/resources/tokens/cep78/js-tutorial.md#2025-04-22_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nconst mintDeploy = cc.mint(\n  {\n    owner: FAUCET_KEYS.publicKey,\n    meta: {\n      color: \"Blue\",\n      size: \"Medium\",\n      material: \"Aluminum\",\n      condition: \"Used\",\n    },\n  },\n  { useSessionCode: true },\n  \"2000000000\",\n  FAUCET_KEYS.publicKey,\n  [FAUCET_KEYS]\n);\n\nconst mintDeployHash = await mintDeploy.send(\"http://localhost:11101/rpc\");\n```\n\n----------------------------------------\n\nTITLE: Approving Casper NFT Management (Bash)\nDESCRIPTION: This command uses `casper-client put-deploy` to call the `approve` entry point of a CEP-78 NFT contract. This allows the specified `spender` account to manage the NFT identified by `token_id`. Key arguments include the node RPC endpoint (`-n`), chain name, payment amount, owner's secret key (`-k`), the contract hash (`--session-hash`), the entry point name (`--session-entry-point`), and session arguments for the spender's account hash and the token ID. This requires the contract's `ownership_mode` to be set to `Transferable` (2).\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/versioned_docs/version-1.5.X/resources/tokens/cep78/using-casper-client/interacting-with-NFTs.md#2025-04-22_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\ncasper-client put-deploy -n http://localhost:11101/rpc/ \\\n--chain-name \"casper-net-1\" \\\n--payment-amount 5000000000 \\\n-k ~/casper/casper-node/utils/nctl/assets/net-1/nodes/node-1/keys/secret_key.pem \\\n--session-entry-point \"approve\" \\\n--session-hash hash-52e78ae3f6c485d036a74f65ebbb8c75fcc7c33fb42eb667fb32aeba72c63fb5 \\\n--session-arg \"spender:key='account-hash-17192017d32db5dc9f598bf8ac6ac35ee4b64748669b00572d88335941479513'\" \\\n--session-arg \"token_id:u64='1'\"\n```\n\n----------------------------------------\n\nTITLE: Creating a New Account Keypair - Python - python\nDESCRIPTION: Generates a new Ed25519 keypair using the pycspr.crypto package. The generated keypair is used for account operations and signing in the Casper network. Key algorithm can be swapped to SECP256K1 if required. Input: none (function call). Output: keypair structure.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/versioned_docs/version-2.0.0/developers/dapps/sdk/client-library-usage.md#2025-04-22_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nfrom pycspr.crypto import KeyAlgorithm, get_key_pair\nkeypair = get_key_pair(KeyAlgorithm.ED25519)\n```\n\n----------------------------------------\n\nTITLE: Invoking Contract Package Entry Point via Casper Client CLI (JSON)\nDESCRIPTION: This CLI command template demonstrates how to invoke an entry point on a specific contract package using its address with the 'package' transaction. It requires the package address, entry point, gas price, and signing credentials. Casper client and appropriate key files are mandatory; invalid addresses or entry points prevent successful transaction submission.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/versioned_docs/version-2.0.0/concepts/transactions.md#2025-04-22_snippet_7\n\nLANGUAGE: json\nCODE:\n```\ncasper-client put-txn package\n/// The address of the contract package.\n  --package-address <FORMATTED STRING or PATH>\n/// The entry point to invoke on the package.\n  --session-entry-point <NAME>\n/// The maximum gas price that the user is willing to pay for this transaction.\n  --gas-price-tolerance <INTEGER>\n/// The path to the local secret key file, or the [`initiator address`](../developers/json-rpc/types_chain.md#initiatoraddr) sending the transaction.\n  <--secret-key <PATH>|--initiator-address <HEX STRING>>\n\n```\n\n----------------------------------------\n\nTITLE: Deploying Session Code ('counter-call.wasm')\nDESCRIPTION: This command deploys and executes session code (`counter-call.wasm`) using `put-deploy`. Similar to deploying the contract initially, it requires node address, chain name, secret key, payment amount, and the path to the compiled session code Wasm file via `--session-path`. This session code is designed to call the previously deployed counter contract.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/docs/resources/beginner/counter-testnet/walkthrough.md#2025-04-22_snippet_15\n\nLANGUAGE: bash\nCODE:\n```\ncasper-client put-deploy \\\n    --node-address http://[NODE_IP]:7777 \\\n    --chain-name casper-test \\\n    --secret-key [PATH_TO_YOUR_KEY]/secret_key.pem \\\n    --payment-amount [PAYMENT_AMOUNT_IN_MOTES] \\\n    --session-path ./counter/target/wasm32-unknown-unknown/release/counter-call.wasm\n```\n\n----------------------------------------\n\nTITLE: Placing Validator Bid via Casper Client CLI (JSON)\nDESCRIPTION: This command template allows validators to submit an auction bid using the 'add-bid' transaction type in the Casper client. The user must supply the public key, delegation rate, bid amount, stake limits, gas price tolerance, and authentication method. It requires Casper client installation and the referenced key files or addresses; the command submits the transaction, and incorrect parameters or authentication will cause execution to fail.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/versioned_docs/version-2.0.0/concepts/transactions.md#2025-04-22_snippet_1\n\nLANGUAGE: json\nCODE:\n```\ncasper-client put-txn add-bid\n/// The [delegation rate](../concepts/economics/staking.md#delegation-rate) for delegators staking on to this validator.\n  --delegation-rate <INTEGER>\n/// The public key of the bidder.\n  --public-key <FORMATTED STRING or PATH>\n/// The amount in motes to be bid.\n  --transaction-amount <INTEGER>\n/// The minimum amount of motes that a delegator can stake to this validator.\n  --minimum-delegation-amount <INTEGER>\n/// The maximum amount of motes that a delegator can stake to this validator.\n  --maximum-delegation-amount <INTEGER>\n/// The maximum gas price that the user is willing to pay for this transaction.\n  --gas-price-tolerance <INTEGER>\n/// The path to the local secret key file, or the [`initiator address`](../developers/json-rpc/types_chain.md#initiatoraddr) sending the transaction.\n  <--secret-key <PATH>|--initiator-address <HEX STRING>>\n\n```\n\n----------------------------------------\n\nTITLE: Calling Entry Point With Multiple Authorization Keys - Casper Test Framework - Rust\nDESCRIPTION: This snippet constructs and executes a deploy item simulating a contract call by multiple authorized signers. It sets authorization keys for both account_addr_1 and DEFAULT_ACCOUNT_ADDR, assigns the correct session code and arguments, and uses ExecuteRequestBuilder to package and submit the deploy. Prerequisites include initialized Casper test builder, proper contract installation, and declared key constants. Expected input is a valid contract call setup, and the expected result is a successful commit; the builder's state is advanced to reflect deployment.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/versioned_docs/version-1.5.X/resources/advanced/list-auth-keys-tutorial.md#2025-04-22_snippet_15\n\nLANGUAGE: rust\nCODE:\n```\nlet entry_point_deploy_item = DeployItemBuilder::new()\n    .with_empty_payment_bytes(runtime_args! {ARG_AMOUNT => *DEFAULT_PAYMENT})\n    .with_authorization_keys(&[account_addr_1, *DEFAULT_ACCOUNT_ADDR])\n    .with_address(account_addr_1)\n    .with_session_code(session_code, session_args)\n    .build();\n\nlet entry_point_request =\n    ExecuteRequestBuilder::from_deploy_item(entry_point_deploy_item).build();\nbuilder.exec(entry_point_request).expect_success().commit();\n```\n\n----------------------------------------\n\nTITLE: Retrieving Deploy from Casper Network using Go SDK\nDESCRIPTION: Demonstrates how to retrieve a deploy from the Casper network using the Go SDK. Uses the RPC client to fetch deploy details by hash.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/docs/developers/dapps/sdk/go-sdk.md#2025-04-22_snippet_0\n\nLANGUAGE: go\nCODE:\n```\npackage main\n\nimport (\n    \"context\"\n    \"fmt\"\n    \"net/http\"\n\n    \"github.com/make-software/casper-go-sdk/casper\"\n)\n\nfunc main() {\n    handler := casper.NewRPCHandler(\"https://<Node Address and Port>/rpc\", http.DefaultClient)\n    client := casper.NewRPCClient(handler)\n    deployHash := \"62972eddc6fdc03b7ec53e52f7da7e24f01add9a74d68e3e21d924051c43f126\"\n    deploy, err := client.GetDeploy(context.Background(), deployHash)\n    if err != nil {\n        return\n    }\n    fmt.Println(deploy.Deploy.Hash)\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Array Property with Item Reference - JSON\nDESCRIPTION: Specifies a JSON schema for an array type where each item must conform to the 'PublicKeyAndDelegator' schema, referenced via '$ref'. Designed for use in API documentation or validation engines such as Swagger/OpenAPI. No additional dependencies are required beyond standard JSON schema conventions. Expected input is any valid JSON array; output is structurally validated data conforming to the referenced schema for each array item. Limitations: only schemas that exist at the given reference can be resolved; this does not handle runtime validation or non-JSON formats.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/condor/jsonrpc-comp/rpc-2.0/schema/Array_of_PublicKeyAndDelegator.json.md#2025-04-22_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"type\": \"array\",\n    \"items\": {\n        \"$ref\": \"#/components/schemas/PublicKeyAndDelegator\"\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Incrementing Counter Using Session Code - Bash\nDESCRIPTION: This command demonstrates incrementing the counter by deploying session code (counter-call.wasm) instead of using contract entry points. The cosntruction and usage are similar to contract deployment but with --session-path pointing to a different Wasm binary. This approach provides flexibility for executing more complex logic as a session.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/docs/resources/beginner/counter/walkthrough.md#2025-04-22_snippet_10\n\nLANGUAGE: bash\nCODE:\n```\ncasper-client put-deploy \\\n    --node-address http://localhost:11101 \\\n    --chain-name casper-net-1 \\\n    --secret-key [PATH_TO_YOUR_KEY]/secret_key.pem \\\n    --payment-amount [PAYMENT_AMOUNT_IN_MOTES] \\\n    --session-path ./counter/counter-call/target/wasm32-unknown-unknown/release/counter-call.wasm\n```\n\n----------------------------------------\n\nTITLE: Replaying Event Stream Using cURL\nDESCRIPTION: These cURL commands show how to replay the Casper event stream from a specific event ID onward. This is useful for recovering events that occurred during a disconnection or for analyzing past events.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/versioned_docs/version-1.5.X/developers/dapps/monitor-and-consume-events.md#2025-04-22_snippet_16\n\nLANGUAGE: bash\nCODE:\n```\ncurl -sN http://NODE_ADDRESS:9999/events/CHANNEL?start_from=ID\n```\n\nLANGUAGE: bash\nCODE:\n```\ncurl -sN http://65.21.235.219:9999/events/main?start_from=29267508\n```\n\n----------------------------------------\n\nTITLE: Exporting Public Key and Account Hash - JavaScript - javascript\nDESCRIPTION: Extracts and encodes the public key and account hash from a casper-js-sdk keypair. The .toHex() method gives the hex-encoded public key, while .toAccountHashStr() gives an 'account-hash-' prefixed hex string for referencing within contracts. Input: keypair.publicKey. Output: hex strings for public key and account hash.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/versioned_docs/version-2.0.0/developers/dapps/sdk/client-library-usage.md#2025-04-22_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\n// Create a hexadecimal representation of the public key and account hash.\nconst publicKeyHex = publicKey.toHex();\nconst accountHashHex = publicKey.toAccountHashStr();\n```\n\n----------------------------------------\n\nTITLE: Calling Contract Entry Point with Session Arguments (Generic Syntax)\nDESCRIPTION: Provides the generic command structure for using `casper-client put-deploy` to call a contract entry point by hash while also passing runtime arguments. It introduces the `--session-arg` flag, which can be used multiple times to pass named, typed arguments to the contract's entry point function. The format for simple CLTypes is shown ('NAME:TYPE='VALUE'').\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/versioned_docs/version-2.0.0/developers/cli/calling-contracts.md#2025-04-22_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\ncasper-client put-deploy \\\n    --node-address [NODE_SERVER_ADDRESS] \\\n    --chain-name [CHAIN_NAME] \\\n    --secret-key [KEY_PATH]/secret_key.pem \\\n    --payment-amount [PAYMENT_AMOUNT_IN_MOTES] \\\n    --session-hash [HEX_STRING] \\\n    --session-entry-point [ENTRY_POINT_FUNCTION] \\\n    --session-arg [\"NAME:TYPE='VALUE'\" OR \"NAME:TYPE=null\"]...\n```\n\n----------------------------------------\n\nTITLE: Querying Entity Details with casper-client get-entity (Bash)\nDESCRIPTION: Uses the casper-client get-entity command to fetch detailed addressable entity (such as smart contract) information, including entry points and named keys. Requires node address and entity identifier (contract or account). Returns richer contract metadata than query-global-state.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/docs/developers/cli/querying-global-state.md#2025-04-22_snippet_12\n\nLANGUAGE: bash\nCODE:\n```\ncasper-client get-entity \\\n--node-address [NODE_SERVER_ADDRESS] \\\n--entity-identifier [FORMATTED_STRING_OR_PATH]\n```\n\n----------------------------------------\n\nTITLE: Defining JSON Schema for 128-bit Integer Decimal Representation\nDESCRIPTION: This JSON schema specifies that 128-bit integers should be represented as strings containing their decimal representation. Using string type ensures the full precision of large integers is preserved when they exceed the safe integer range in JSON.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/condor/jsonrpc-comp/rpc-2.0/schema/U128.json.md#2025-04-22_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"description\": \"Decimal representation of a 128-bit integer.\",\n    \"type\": \"string\"\n}\n```\n\n----------------------------------------\n\nTITLE: Querying Casper Global State\nDESCRIPTION: Commands to query the global state of the Casper network using different key types (public key or account hash).\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/versioned_docs/version-2.0.0/resources/quick-start.md#2025-04-22_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\ncasper-client query-global-state \\\n--node-address [NODE_ADDRESS] \\\n--state-root-hash [STATE_ROOT_HASH] \\\n--key [PATH_TO_PUBLIC_KEY]\n```\n\nLANGUAGE: bash\nCODE:\n```\ncasper-client account-address --public-key [PATH_TO_PUBLIC_KEY]\n```\n\nLANGUAGE: bash\nCODE:\n```\ncasper-client query-global-state \\\n--node-address [NODE_ADDRESS] \\\n--state-root-hash [STATE_ROOT_HASH] \\\n--key [ACCOUNT_HASH]\n```\n\n----------------------------------------\n\nTITLE: Executing Cross-Contract Call Deploy\nDESCRIPTION: Executes a deploy that calls one contract from another, passing a new message value and the target contract hash as arguments.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/versioned_docs/version-2.0.0/resources/advanced/cross-contract.md#2025-04-22_snippet_22\n\nLANGUAGE: bash\nCODE:\n```\ncasper-client put-deploy \\\n    --node-address http://136.243.187.84:7777 \\\n    --chain-name casper-test \\\n    --secret-key ./keys/secret_key.pem \\\n    --payment-amount 20000000000 \\\n    --session-hash hash-32ad0e54e874f68706708ebfd2c5aba7803eb64ccff71a50d3c4d4f29db15c92 \\\n    --session-entry-point \"call_contract_2\" \\\n    --session-arg \"new_message:string='Hello new message!'\" \\\n    --session-arg \"hello_world_contract:Key='hash-b7a06298cc71d4cac05929cc0713dfd5a541c68b71cb500cd04547b5cd0385ea'\"\n```\n\n----------------------------------------\n\nTITLE: Redelegating Tokens via Casper Client Auction Contract - Bash\nDESCRIPTION: This Bash snippet submits a deploy request to redelegate staked tokens from one validator to another by invoking the 'redelegate' entry point of the Casper system auction contract with the casper-client CLI. It requires a node address, the payer's secret key, chain name, payment amount (minimum 2.5 CSPR in motes), session hash for the auction contract, and well-formed session arguments for the delegator, current validator, amount, and new validator. The expected input is customized values for each argument, and the output is a deploy hash. Dependencies: casper-client CLI must be installed, and valid keys and network connectivity are required. The session hash varies based on network.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/versioned_docs/version-2.0.0/developers/cli/redelegate.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ncasper-client put-deploy \\\n--node-address <HOST:PORT> \\\n--secret-key <PATH_TO_DELEGATOR_SECRET_KEY> \\\n--chain-name <CHAIN_NAME> \\\n--payment-amount 2500000000 \\\n--session-hash <SESSION_HASH> \\\n--session-entry-point redelegate \\\n--session-arg \"delegator:public_key='<DELEGATOR_PUBLIC_KEY_HEX>'\" \\\n--session-arg \"validator:public_key='<CURRENT_VALIDATOR_PUBLIC_KEY_HEX>'\" \\\n--session-arg \"amount:u512='<DELEGATION_AMOUNT>'\" \\\n--session-arg \"new_validator:public_key='<NEW_VALIDATOR_PUBLIC_KEY_HEX>'\"\n```\n\n----------------------------------------\n\nTITLE: Creating Multi-Signature Transfer Deploy with Casper CLI - Bash\nDESCRIPTION: Utilizes the `make-transfer` command to create and sign a transfer on the Casper test network. Outputs a signed deploy file for further multi-signature processing. Requires Casper command-line client, source/target accounts' key information, and parameters such as amount, payment amount, and transfer ID.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/versioned_docs/version-2.0.0/developers/cli/transfers/multisig-deploy-transfer.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ncasper-client make-transfer --amount 2500000000 \\\n--secret-key [PATH]/secret_key.pem \\\n--chain-name casper-test \\\n--target-account [PUBLIC_KEY_HEX] \\\n--transfer-id [ID] \\\n--payment-amount 100000000 \\\n--output transfer.deploy\n```\n\nLANGUAGE: bash\nCODE:\n```\ncasper-client make-transfer --amount 2500000000 \\\n--secret-key ~/KEYS/multi-sig/keys/default_secret_key.pem \\\n--chain-name casper-test \\\n--target-account 0154d828baafa6858b92919c4d78f26747430dcbecb9aa03e8b44077dc6266cabf \\\n--transfer-id 1 \\\n--payment-amount 100000000 \\\n--output transfer.deploy\n```\n\n----------------------------------------\n\nTITLE: Transfer Operation JSON-RPC Request\nDESCRIPTION: The JSON-RPC request generated by the casper-client for token transfer. It contains the deploy details including account information, timestamp, gas price, payment specifics, session details with transfer arguments, and approval signatures.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/versioned_docs/version-2.0.0/developers/cli/transfers/direct-token-transfer.md#2025-04-22_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"jsonrpc\": \"2.0\",\n  \"method\": \"account_put_deploy\",\n  \"params\": {\n    \"deploy\": {\n      \"hash\": \"1f17a0bdeaaf71abd03492c854cdf97f746432751721ce555e95b9cefe641e3c\",\n      \"header\": {\n        \"account\": \"0154d828baafa6858b92919c4d78f26747430dcbecb9aa03e8b44077dc6266cabf\",\n        \"timestamp\": \"2023-10-12T14:59:40.760Z\",\n        \"ttl\": \"30m\",\n        \"gas_price\": 1,\n        \"body_hash\": \"ea7e6a6cbdd4d761827cb627e162896bee3e771beda000550615c9b4fafa3a2d\",\n        \"dependencies\": [],\n        \"chain_name\": \"casper-test\"\n      },\n      \"payment\": {\n        \"ModuleBytes\": {\n          \"module_bytes\": \"\",\n          \"args\": [\n            [\n              \"amount\",\n              {\n                \"cl_type\": \"U512\",\n                \"bytes\": \"0400e1f505\",\n                \"parsed\": \"100000000\"\n              }\n            ]\n          ]\n        }\n      },\n      \"session\": {\n        \"Transfer\": {\n          \"args\": [\n            [\n              \"amount\",\n              {\n                \"cl_type\": \"U512\",\n                \"bytes\": \"0500f2052a01\",\n                \"parsed\": \"5000000000\"\n              }\n            ],\n            [\n              \"target\",\n              {\n                \"cl_type\": \"PublicKey\",\n                \"bytes\": \"01360af61b50cdcb7b92cffe2c99315d413d34ef77fadee0c105cc4f1d4120f986\",\n                \"parsed\": \"01360af61b50cdcb7b92cffe2c99315d413d34ef77fadee0c105cc4f1d4120f986\"\n              }\n            ],\n            [\n              \"id\",\n              {\n                \"cl_type\": {\n                  \"Option\": \"U64\"\n                },\n                \"bytes\": \"014767a90000000000\",\n                \"parsed\": 11102023\n              }\n            ]\n          ]\n        }\n      },\n      \"approvals\": [\n        {\n          \"signer\": \"0154d828baafa6858b92919c4d78f26747430dcbecb9aa03e8b44077dc6266cabf\",\n          \"signature\": \"01e53cb742ed13ff4f0584a3da0f22f5942a33e010965adf640c91204ae4bc7436f1e5534d338ffa117d193295214816445439781229d24a372085c316eac5e305\"\n        }\n      ]\n    }\n  },\n  \"id\": 3\n}\n```\n\n----------------------------------------\n\nTITLE: Serializing NamedArg Structure\nDESCRIPTION: Defines `NamedArg` for representing named arguments passed to a contract. It serializes as a combination of a `String` (the argument name) followed by its corresponding `CLValue` (the argument value).\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/versioned_docs/version-2.0.0/concepts/serialization/types.md#2025-04-22_snippet_29\n\nLANGUAGE: text\nCODE:\n```\nNamed arguments to a contract. It is serialized by the combination of a [`String`](./primitives.md#clvalue-string) followed by the associated [`CLValue`](./primitives.md#clvalue).\n```\n\n----------------------------------------\n\nTITLE: Sample Casper Smart Contract in AssemblyScript (Error Return)\nDESCRIPTION: This TypeScript snippet demonstrates a minimal Casper smart contract (`index.ts` located in the `assembly` directory). It imports `Error` and `ErrorCode` from the `casper-contract` package and defines an exported `call` function. When executed on a Casper network, this function immediately reverts the transaction by throwing `ErrorCode.None`, illustrating basic error handling.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/versioned_docs/version-1.5.X/developers/writing-onchain-code/assembly-script.md#2025-04-22_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\n//@ts-nocheck\nimport { Error, ErrorCode } from \"casper-contract/error\";\n\n// simplest possible feedback loop\nexport function call(): void {\n    Error.fromErrorCode(ErrorCode.None).revert(); // ErrorCode: 1\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing call Entry Point for Cross-Contract Calls in Rust\nDESCRIPTION: This Rust code snippet demonstrates the implementation of an entry point `call` within a Casper smart contract. It defines parameters for the entry point and stores the contract in global state, allowing it to be accessed from named keys of the account. The contract requires dependencies on `casper_contract` and `casper_types` crates and expects key-value parameters such as 'new_message' and 'hello_world_contract'.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/versioned_docs/version-2.0.0/resources/advanced/cross-contract.md#2025-04-22_snippet_13\n\nLANGUAGE: Rust\nCODE:\n```\n#[no_mangle]\npub extern \"C\" fn call() {\n    \n    // Create the list of required runtime arguments for the given entry point.\n    let mut vec = Vec::new();\n    vec.push(Parameter::new(\"new_message\", CLType::String));\n    vec.push(Parameter::new(\"hello_world_contract\", CLType::Key));\n\n    // In the named keys of the contract, add a key for the count.\n    let mut named_keys = NamedKeys::new();\n\n    // Create an Entry Point Object\n    let mut entry_points = EntryPoints::new();\n\n    // Add the entry point metadata definition.\n    entry_points.add_entry_point(EntryPoint::new(\n       \"call_contract_2\",\n       vec,\n       CLType::Unit,\n       EntryPointAccess::Public,\n       EntryPointType::Contract\n    ));\n\n    // The contract is stored in the global state\n    let (stored_contract_hash, _contract_version) = storage::new_contract(\n       entry_points,                                        // entry points\n       Some(named_keys),                                    // named keys \n       Some(\"contract2_package_name\".to_string()),          // package name\n       Some(\"contract2_access_uref\".to_string())            // access uref\n    );\n\n    // To access from the account - named keys of the account\n    runtime::put_key(\"cross_contract_2\", stored_contract_hash.into());\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing a Default Factory Entry Point in Rust\nDESCRIPTION: This Rust function `contract_factory_default` acts as another public entry point for the Casper factory contract. It retrieves only the `ARG_NAME` runtime argument and calls the `installer` function with the provided name and a default initial value of `U512::zero()`. This allows creating counter contracts with a predefined starting value.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/docs/developers/writing-onchain-code/factory-pattern.md#2025-04-22_snippet_3\n\nLANGUAGE: rust\nCODE:\n```\n#[no_mangle]\npub extern \"C\" fn contract_factory_default() {\n    let name: String = runtime::get_named_arg(ARG_NAME);\n    installer(name, U512::zero());\n}\n\n```\n\n----------------------------------------\n\nTITLE: Asserting Expected Outcomes in Casper Tests (Rust)\nDESCRIPTION: Demonstrates a simple assertion (`assert!`) used to verify the results of the session code execution. In this example, it checks if a specific key (`ASSOCIATED_ACCOUNT_HASH`) exists within a retrieved map (`associated_keys`).\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/versioned_docs/version-1.5.X/developers/writing-onchain-code/testing-session-code.md#2025-04-22_snippet_10\n\nLANGUAGE: rust\nCODE:\n```\n    assert!(associated_keys.contains_key(&ASSOCIATED_ACCOUNT_HASH));\n```\n\n----------------------------------------\n\nTITLE: Installing Contract with Default Account Authorization in Rust\nDESCRIPTION: Deploy code that installs a contract using the default account as the sole authorization key. This contract will later be accessed by another account without proper authorization to demonstrate permission errors.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/docs/resources/advanced/list-auth-keys-tutorial.md#2025-04-22_snippet_13\n\nLANGUAGE: rust\nCODE:\n```\nlet session_code = PathBuf::from(CONTRACT_WASM);\n\nlet deploy_item = DeployItemBuilder::new()\n    .with_empty_payment_bytes(runtime_args! {ARG_AMOUNT => *DEFAULT_PAYMENT})\n    .with_authorization_keys(&[*DEFAULT_ACCOUNT_ADDR])\n    .with_address(*DEFAULT_ACCOUNT_ADDR)\n    .with_session_code(session_code, runtime_args! {})\n    .build();\n```\n\n----------------------------------------\n\nTITLE: Building and Executing Caller Deploy with Valid Authorization Keys in Rust\nDESCRIPTION: This Rust code (from Test 7) constructs a `DeployItem` to call a contract entry point, using `account_addr_1` and `DEFAULT_ACCOUNT_ADDR` as authorization keys and `account_addr_1` as the source address. Since `DEFAULT_ACCOUNT_ADDR` was used during installation, this call is expected to be authorized. It then builds an `ExecuteRequest` and executes it using the test builder (`builder.exec`), asserting that the execution succeeds (`expect_success()`).\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/versioned_docs/version-2.0.0/resources/advanced/list-auth-keys-tutorial.md#2025-04-22_snippet_16\n\nLANGUAGE: rust\nCODE:\n```\n```rust\nlet entry_point_deploy_item = DeployItemBuilder::new()\n    .with_empty_payment_bytes(runtime_args! {ARG_AMOUNT => *DEFAULT_PAYMENT})\n    .with_authorization_keys(&[account_addr_1, *DEFAULT_ACCOUNT_ADDR])\n    .with_address(account_addr_1)\n    .with_session_code(session_code, session_args)\n    .build();\n\nlet entry_point_request =\n    ExecuteRequestBuilder::from_deploy_item(entry_point_deploy_item).build();\nbuilder.exec(entry_point_request).expect_success().commit();\n```\n```\n\n----------------------------------------\n\nTITLE: Listening to the Event Stream with Python\nDESCRIPTION: This snippet demonstrates how to set up an event listener in a Python application using the PyCSPR library. It connects to a Casper node and processes NodeEventType events with a specified event handler.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/versioned_docs/version-2.0.0/developers/dapps/monitor-and-consume-events.md#2025-04-22_snippet_1\n\nLANGUAGE: Python\nCODE:\n```\nfrom pycspr import NodeClient, NodeConnection, NodeEventType\n\ndef eventHandler(event):\n    print(event)\n\nclient = NodeClient(NodeConnection(host = \"NODE_ADDRESS\", port_rpc = \"PORT\"))\nclient.get_events(eventHandler, NodeEventType.EVENT_NAME)\n```\n\n----------------------------------------\n\nTITLE: Deploying the Fungible Token Contract to the Casper Network\nDESCRIPTION: This command deploys the compiled fungible token contract to the Casper Network, specifying network parameters, payment amount, and contract arguments.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/versioned_docs/version-2.0.0/resources/tokens/cep18/full-tutorial.md#2025-04-22_snippet_11\n\nLANGUAGE: bash\nCODE:\n```\ncasper-client put-deploy \\\n--node-address http://95.216.24.237:7777 \\\n--chain-name casper-test \\\n--secret-key \"/home/ubuntu/secret_key.pem\" \\\n--payment-amount 1000000 \\\n--session-path \"<machine-path>/cep18/target/wasm32-unknown-unknown/release/cep18.wasm\"\n--session-arg \"name='Token test', symbol='TEST', decimals:u8=10, total_supply:u256=1000\"\n```\n\n----------------------------------------\n\nTITLE: Transferring CSPR Tokens Using Casper Client\nDESCRIPTION: Command to transfer 10 CSPR tokens using the Casper command-line client. The target account is specified with a Secp256k1 public key prefixed with '02'.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/versioned_docs/version-1.5.X/concepts/accounts-and-keys.md#2025-04-22_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\ncasper-client transfer \\\n--transfer-id 1234567 \\\n--node-address http://localhost:7777 \\\n--chain-name casper \\\n--target-account 020470fecd1f7ae5c1cd53a52c4ca88cd5b76c2926d7e1d831addaa2a64bea9cc3ede6a8e9981c609ee7ab7e3fa37ba914f2fc52f6eea9b746b6fe663afa96750d66 \\\n--amount 10000000000 \\\n--secret-key <path-to-secret_key.pem> \\\n--payment-amount 100000000\n```\n\n----------------------------------------\n\nTITLE: Querying the Global State of the Casper Network\nDESCRIPTION: This command queries the global state of the Casper Network for a specific account using the state root hash and account hash.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/versioned_docs/version-2.0.0/resources/tokens/cep18/full-tutorial.md#2025-04-22_snippet_10\n\nLANGUAGE: bash\nCODE:\n```\ncasper-client query-global-state \\\n--node-address http://<HOST:PORT> \\\n--state-root-hash [STATE_ROOT_HASH] \\\n--key [ACCOUNT_HASH]\n```\n\n----------------------------------------\n\nTITLE: Initializing Wasm Environment in Rust Smart Contract\nDESCRIPTION: File attributes to support WebAssembly execution environment by disabling standard library and main function entry point.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/versioned_docs/version-2.0.0/developers/writing-onchain-code/simple-contract.md#2025-04-22_snippet_6\n\nLANGUAGE: rust\nCODE:\n```\n#![no_std]\n#![no_main]\n```\n\n----------------------------------------\n\nTITLE: Example Token Transfer Command\nDESCRIPTION: Practical example of a token transfer command that moves 5 CSPR tokens using the Casper testnet. Includes specific values for all required parameters including transfer ID, node address, and target account.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/versioned_docs/version-1.5.X/developers/cli/transfers/direct-token-transfer.md#2025-04-22_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ncasper-client transfer -v \\\n--id 3 \\\n--transfer-id 11102023 \\\n--node-address https://node.testnet.casper.network  \\\n--amount 5000000000 \\\n--secret-key ~/KEYS/secret_key.pem \\\n--chain-name casper-test \\\n--target-account 01360af61b50cdcb7b92cffe2c99315d413d34ef77fadee0c105cc4f1d4120f986 \\\n--payment-amount 100000000\n```\n\n----------------------------------------\n\nTITLE: Calling Contract by Package Name using put-deploy\nDESCRIPTION: Basic command structure for calling a contract entry point using the contract package name. Includes parameters for node address, chain name, payment amount, and session details.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/versioned_docs/version-2.0.0/developers/cli/calling-contracts.md#2025-04-22_snippet_13\n\nLANGUAGE: rust\nCODE:\n```\ncasper-client put-deploy \\\n    --node-address [NODE_SERVER_ADDRESS] \\\n    --chain-name [CHAIN_NAME] \\\n    --secret-key [KEY_PATH]/secret_key.pem \\\n    --payment-amount [PAYMENT_AMOUNT_IN_MOTES] \\\n    --session-package-name [NAMED_KEY_FOR_PACKAGE] \\\n    --session-entry-point [ENTRY_POINT_FUNCTION] \\\n    --session-version [INTEGER]\n```\n\n----------------------------------------\n\nTITLE: Serializing Signature Type\nDESCRIPTION: Describes the serialization format for a `Signature`. It consists of the byte representation of the underlying cryptographic signature, prefixed with a single byte tag indicating the algorithm: `1` for Ed25519 or `2` for Secp256k1.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/versioned_docs/version-2.0.0/concepts/serialization/types.md#2025-04-22_snippet_46\n\nLANGUAGE: text\nCODE:\n```\nThe signature serializes the byte representation of the underlying cryptographic primitive signature. The first byte within the signature is 1 in the case of an `Ed25519` signature or 2 in the case of `Secp256k1`.\n```\n\n----------------------------------------\n\nTITLE: Installing a Contract with Multiple Authorization Keys in Rust\nDESCRIPTION: This Rust code demonstrates building and executing a deploy item to install a contract (`CONTRACT_WASM`). The installation is authorized by two keys: `DEFAULT_ACCOUNT_ADDR` and `account_addr_1`. It sets the payment, specifies both authorization keys, the target address (`DEFAULT_ACCOUNT_ADDR`), and uses the `CONTRACT_WASM` session code. The test builder executes the request and expects it to succeed.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/versioned_docs/version-2.0.0/resources/advanced/list-auth-keys-tutorial.md#2025-04-22_snippet_9\n\nLANGUAGE: rust\nCODE:\n```\nlet session_code = PathBuf::from(CONTRACT_WASM);\n\nlet deploy_item = DeployItemBuilder::new()\n    .with_empty_payment_bytes(runtime_args! {ARG_AMOUNT => *DEFAULT_PAYMENT})\n    .with_authorization_keys(&[*DEFAULT_ACCOUNT_ADDR, account_addr_1])\n    .with_address(*DEFAULT_ACCOUNT_ADDR)\n    .with_session_code(session_code, session_args)\n    .build();\n\nlet execute_request = ExecuteRequestBuilder::from_deploy_item(deploy_item).build();\nbuilder.exec(execute_request).commit().expect_success();\n```\n\n----------------------------------------\n\nTITLE: Defining Test Modules in Rust\nDESCRIPTION: This code snippet illustrates the definition of a test module in Rust, enabling the compilation and execution of test functions organized within it.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/docs/developers/writing-onchain-code/testing-contracts.md#2025-04-22_snippet_2\n\nLANGUAGE: rust\nCODE:\n```\n#[cfg(test)]\nmod tests {\n    // The entire test program resides here\n}\n```\n\n----------------------------------------\n\nTITLE: Calling a Casper Contract by Hash in a Test\nDESCRIPTION: This code snippet shows how to retrieve a contract hash and call a contract's entry point using the contract_call_by_hash function in a Casper contract test.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/versioned_docs/version-2.0.0/developers/writing-onchain-code/testing-contracts.md#2025-04-22_snippet_5\n\nLANGUAGE: rust\nCODE:\n```\nlet contract_v1_hash = builder\n    .get_expected_account(*DEFAULT_ACCOUNT_ADDR)\n    .named_keys()\n    .get(CONTRACT_KEY)\n    .expect(\"must have contract hash key as part of contract creation\")\n    .into_hash()\n    .map(ContractHash::new)\n    .expect(\"must get contract hash\");\n\nlet contract_decrement_request = ExecuteRequestBuilder::contract_call_by_hash(\n    *DEFAULT_ACCOUNT_ADDR,\n    contract_v1_hash,\n    ENTRY_POINT_COUNTER_DECREMENT,\n    runtime_args! {},\n)\n.build();\n\nbuilder\n    .exec(contract_decrement_request)\n    .expect_failure()\n    .commit();\n```\n\n----------------------------------------\n\nTITLE: Querying Global State using Casper Client\nDESCRIPTION: This command queries the global state of the Casper network at a specific state root hash for information associated with a given account hash. It requires the node address, the previously obtained state root hash, and the account hash. Initially, this query might return no specific data if nothing has been deployed by the account.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/docs/resources/beginner/counter-testnet/walkthrough.md#2025-04-22_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\ncasper-client query-global-state \\\n    --node-address http://[NODE_IP]:7777 \\\n    --state-root-hash [STATE_ROOT_HASH] \\\n    --key [ACCOUNT_HASH]\n```\n\n----------------------------------------\n\nTITLE: Testing Disallowed Entry Point Call Due to Missing Authorization Key in Rust\nDESCRIPTION: This Rust code (from Test 8) tests the scenario where a contract entry point call should be disallowed due to authorization key mismatch. It builds a deploy using `DeployItemBuilder` with authorization keys (`account_addr_1`, `account_addr_2`) that do not include the installer's key (`DEFAULT_ACCOUNT_ADDR`). The test executes the deploy via `builder.exec()`, expects it to fail (`expect_failure()`), retrieves the resulting error using `builder.get_error()`, and asserts that it corresponds to the expected permission denied error (User error 0).\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/versioned_docs/version-2.0.0/resources/advanced/list-auth-keys-tutorial.md#2025-04-22_snippet_18\n\nLANGUAGE: rust\nCODE:\n```\n```rust\n let session_code = PathBuf::from(CONTRACT_CALL_WASM);\n\nlet session_args = runtime_args! {\n    ARG_CONTRACT_HASH => Key::from(contract_hash),\n    ARG_KEY_NAME => INTERSECTION_RECEIPT\n};\n\n// account_addr_2 as an associated key is not among the default account's associated keys\n// The deploy will therefore revert with PermissionDenied\nlet entry_point_deploy_item = DeployItemBuilder::new()\n    .with_empty_payment_bytes(runtime_args! {ARG_AMOUNT => *DEFAULT_PAYMENT})\n    .with_authorization_keys(&[account_addr_1, account_addr_2])\n    .with_address(account_addr_1)\n    .with_session_code(session_code, session_args)\n    .build();\n\nlet entry_point_request =\n    ExecuteRequestBuilder::from_deploy_item(entry_point_deploy_item).build();\n\nbuilder.exec(entry_point_request).commit().expect_failure();\n\nlet error = builder.get_error().expect(\"must have User error: 0\");\nassert_expected_error(\n    error,\n    0,\n    \"should fail execution since ACCOUNT_USER_2 as associated key is not in installer (DEFAULT_ACCOUNT_ADDR) associated keys\",\n);\n```\n```\n\n----------------------------------------\n\nTITLE: Example account_put_transaction Request\nDESCRIPTION: Example JSON-RPC request for the account_put_transaction method, demonstrating the structure of a transaction including header, body, and approval signatures.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/docs/developers/json-rpc/json-rpc-transactional.md#2025-04-22_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"id\": 1,\n  \"jsonrpc\": \"2.0\",\n  \"method\": \"account_put_transaction\",\n  \"params\": [\n    {\n      \"name\": \"transaction\",\n      \"value\": {\n        \"Version1\": {\n          \"hash\": \"f5582cb81a5abda63ebaa4edb3b05210ecbd63ffb8dd17bfbeb3b867f4014468\",\n          \"header\": {\n            \"chain_name\": \"casper-example\",\n            \"timestamp\": \"2020-11-17T00:39:24.072Z\",\n            \"ttl\": \"1h\",\n            \"body_hash\": \"aa24833ffbf31d62c8c8c4265349e7c09cd71952fcbce6f7b12daf5e340bf2cc\",\n            \"pricing_mode\": {\n              \"Fixed\": {\n                \"gas_price_tolerance\": 5\n              }\n            },\n            \"initiator_addr\": {\n              \"PublicKey\": \"01d9bf2148748a85c89da5aad8ee0b0fc2d105fd39d41a4c796536354f0ae2900c\"\n            }\n          },\n          \"body\": {\n            \"args\": [\n              [\n                \"source\",\n                {\n                  \"cl_type\": {\n                    \"Option\": \"URef\"\n                  },\n                  \"bytes\": \"010a0a0a0a0a0a0a0a0a0a0a0a0a0a0a0a0a0a0a0a0a0a0a0a0a0a0a0a0a0a0a0a07\",\n                  \"parsed\": \"uref-0a0a0a0a0a0a0a0a0a0a0a0a0a0a0a0a0a0a0a0a0a0a0a0a0a0a0a0a0a0a0a0a-007\"\n                }\n              ],\n              [\n                \"target\",\n                {\n                  \"cl_type\": \"URef\",\n                  \"bytes\": \"1b1b1b1b1b1b1b1b1b1b1b1b1b1b1b1b1b1b1b1b1b1b1b1b1b1b1b1b1b1b1b1b00\",\n                  \"parsed\": \"uref-1b1b1b1b1b1b1b1b1b1b1b1b1b1b1b1b1b1b1b1b1b1b1b1b1b1b1b1b1b1b1b1b-000\"\n                }\n              ],\n              [\n                \"amount\",\n                {\n                  \"cl_type\": \"U512\",\n                  \"bytes\": \"0500ac23fc06\",\n                  \"parsed\": \"30000000000\"\n                }\n              ],\n              [\n                \"id\",\n                {\n                  \"cl_type\": {\n                    \"Option\": \"U64\"\n                  },\n                  \"bytes\": \"01e703000000000000\",\n                  \"parsed\": 999\n                }\n              ]\n            ],\n            \"target\": \"Native\",\n            \"entry_point\": \"Transfer\",\n            \"transaction_category\": 0,\n            \"scheduling\": \"Standard\"\n          },\n          \"approvals\": [\n            {\n              \"signer\": \"01d9bf2148748a85c89da5aad8ee0b0fc2d105fd39d41a4c796536354f0ae2900c\",\n              \"signature\": \"0137d3f468d8f8a6e63f4110d79be29b8c8428e9cd858a92049660e7851ae16a299640d1fc1c930ab6cb424f1a6eec0b194df74bede14f4af1b5133106f1280d0b\"\n            }\n          ]\n        }\n      }\n    }\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Preparing the Development Environment\nDESCRIPTION: Command to prepare the development environment by adding the WebAssembly target for Rust.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/versioned_docs/version-2.0.0/resources/tokens/cep18/full-tutorial.md#2025-04-22_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nmake prepare\n```\n\n----------------------------------------\n\nTITLE: Verifying Threshold Update Deploy Status using Casper CLI\nDESCRIPTION: Uses the `casper-client get-deploy` command to confirm the successful execution and retrieve results of the deploy that updated the account's action thresholds. Requires the Testnet node address and the deploy hash (`<DEPLOY_HASH>`) from the threshold update transaction.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/docs/resources/advanced/multi-sig/multi-sig-workflow.md#2025-04-22_snippet_9\n\nLANGUAGE: bash\nCODE:\n```\ncasper-client get-deploy --node-address https://node.testnet.casper.network <DEPLOY_HASH>\n```\n\n----------------------------------------\n\nTITLE: Configuring Gas Hold Duration in Casper Node\nDESCRIPTION: TOML configuration snippet from the Casper node chainspec that defines the duration for which gas holds are placed on user balances. This setting controls the time interval after which balance holds expire when using the no_fee handling option.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/condor/fee-elimination.md#2025-04-22_snippet_0\n\nLANGUAGE: toml\nCODE:\n```\ngas_hold_interval = '24 hours'\n```\n\n----------------------------------------\n\nTITLE: Retrieving State Root Hash from Casper Network\nDESCRIPTION: This command uses the casper-client to get the current state root hash from a Casper node. The state root hash is essential for subsequent queries to the network.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/versioned_docs/version-2.0.0/resources/beginner/cep18.md#2025-04-22_snippet_8\n\nLANGUAGE: bash\nCODE:\n```\ncasper-client get-state-root-hash --node-address http://78.46.32.13:7777\n```\n\n----------------------------------------\n\nTITLE: Querying Connected Peers with info_get_peers in Casper Network\nDESCRIPTION: This example demonstrates how to request information about peers connected to a Casper Network node using the info_get_peers JSON-RPC method. This method takes no parameters.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/versioned_docs/version-1.5.X/developers/json-rpc/json-rpc-informational.md#2025-04-22_snippet_20\n\nLANGUAGE: bash\nCODE:\n```\n{\n  \"id\": 1,\n  \"jsonrpc\": \"2.0\",\n  \"method\": \"info_get_peers\",\n  \"params\": []\n}\n```\n\n----------------------------------------\n\nTITLE: Building a Casper Smart Contract\nDESCRIPTION: Commands to prepare and build a Casper smart contract, compiling it to WebAssembly format (.wasm) that can be deployed to the Casper network.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/docs/resources/advanced/cross-contract.md#2025-04-22_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\ncd cross-contract\nmake prepare\nmake build-contract\n```\n\n----------------------------------------\n\nTITLE: Query Contract State\nDESCRIPTION: Example of querying contract state using a contract hash to get information about entry points and named keys.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/versioned_docs/version-1.5.X/developers/cli/installing-contracts.md#2025-04-22_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\ncasper-client query-global-state \\\n  --node-address http://localhost:11101  \\\n  --state-root-hash fa968344a2000282686303f1664c474465f9a028f32ec4f51791d9fa64c0bcd7 \\\n  --key hash-22228188b85b6ee4a4a41c7e98225c3918139e9a5eb4b865711f2e409d85e88e\n```\n\n----------------------------------------\n\nTITLE: Deploying the Multi-Sig Contract to Casper Network via Casper-Client CLI in Bash\nDESCRIPTION: This Bash snippet uses the casper-client CLI to put a deploy that configures two-party multi-signature by executing the compiled Wasm contract. Dependencies include the casper-client tool, a running Casper node, and all relevant keys. Key parameters: 'node-address', 'secret-key', 'chain-name', 'payment-amount', 'session-path', and 'session-arg'. Outputs a deploy hash used for further verification. Replace bracketed values (<...>) with actual configuration.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/docs/resources/advanced/two-party-multi-sig.md#2025-04-22_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\ncasper-client put-deploy \\\n--node-address http://<peer-ip-address>:7777 \\\n--secret-key <secret-key-MA>.pem \\\n--chain-name casper-test \\\n--payment-amount 2500000000 \\\n--session-path <path-to-contract-wasm> \\\n--session-arg \"deployment-account:account_hash='account-hash-<hash-AA>'\"\n```\n\n----------------------------------------\n\nTITLE: Defining Native Transfer Operation Schema - JSON\nDESCRIPTION: This snippet describes a schema for a native transfer operation on the Casper network, which bypasses WASM code and only requires runtime arguments (such as amount, target, and optional ID). This is used by API clients to serialize transfer deploys and ensure correct parameterization. Only 'args' is required, and all additional properties are disallowed, enforcing strict type safety.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/condor/jsonrpc-comp/rpc-1.5/schema.json.md#2025-04-22_snippet_32\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"description\": \"A native transfer which does not contain or reference a WASM code.\",\n  \"type\": \"object\",\n  \"required\": [\n    \"Transfer\"\n  ],\n  \"properties\": {\n    \"Transfer\": {\n      \"type\": \"object\",\n      \"required\": [\n        \"args\"\n      ],\n      \"properties\": {\n        \"args\": {\n          \"description\": \"Runtime arguments.\",\n          \"allOf\": [\n            {\n              \"$ref\": \"#/components/schemas/RuntimeArgs\"\n            }\n          ]\n        }\n      },\n      \"additionalProperties\": false\n    }\n  },\n  \"additionalProperties\": false\n}\n```\n\n----------------------------------------\n\nTITLE: Calculating Validator Rewards Formula in Casper 2.0\nDESCRIPTION: This mathematical formula calculates the era rewards for a validator in Casper 2.0, consisting of three components: block production rewards, finality signature publication rewards, and finality signature contribution rewards. The formula takes into account validator weight, block production, and signature activities.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/condor/validator-rewards.md#2025-04-22_snippet_0\n\nLANGUAGE: mathematical notation\nCODE:\n```\nEra rewards for validator i = \n\n**Σ** (n in **N***) **i(n)** * (**rR/N**) (block production)\n\n+ **Σ** (n in **N***) **i(n)** * **Σ** (j in **S(n)**) (**w(j)/W**) * (**f(1-r)R/N**) (finality signature publication)  \n\n+ **Σ** (n in **N***) **s_i(n)** * (**w(i)/W**) * (**(1-f)(1-r)R/N**) (finality signature contribution)\n```\n\n----------------------------------------\n\nTITLE: Generating Ed25519 Keys with Casper Client\nDESCRIPTION: Commands to create Ed25519 keys using the Casper command-line client. This creates a directory with the public and private key files, which are used to create and manage accounts on the Casper network.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/docs/concepts/accounts-and-keys.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nmkdir ed25519-keys\ncasper-client keygen ed25519-keys/\ntree ed25519-keys/\n```\n\n----------------------------------------\n\nTITLE: Adding an Associated Key via Deploy (Bash)\nDESCRIPTION: Sends a deploy to the specified Casper node to add a new associated key to the account identified by the secret key. It uses the `add_account.wasm` session code, passing the new key's account hash and its weight as session arguments. Requires `casper-client`, a valid node address, chain name, secret key file path, and the compiled `add_account.wasm` file.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/docs/resources/advanced/multi-sig/multi-sig-workflow.md#2025-04-22_snippet_18\n\nLANGUAGE: bash\nCODE:\n```\ncasper-client put-deploy --node-address https://node.testnet.casper.network \\\n--chain-name \"casper-test\" \\\n--payment-amount 500000000 \\\n--secret-key $PATH/secret_key.pem \\\n--session-path target/wasm32-unknown-unknown/release/add_account.wasm \\\n--session-arg \"new_key:key='account-hash-1fed34baa6807a7868bb18f91b161d99ebf21763810fe4c92e39775d10bbf1f8\" \\\n--session-arg \"weight:u8='1'\"\n```\n\n----------------------------------------\n\nTITLE: Executing Native Transfer via Casper Client CLI\nDESCRIPTION: This Bash command snippet shows how to perform a native transfer using the casper-client command-line tool. The command transfers CSPR from one account to another, specifying necessary parameters such as node address, transfer amount, secret key, and target account.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/versioned_docs/version-1.5.X/resources/advanced/list-cspr.md#2025-04-22_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ncasper-client transfer \\\n--id 1 \\\n--transfer-id 123456 \\\n--node-address http://<node-ip-address>:7777 \\\n--amount 10000000000 \\\n--secret-key <accountA-secret-key>.pem \\\n--chain-name casper \\\n--target-account <accountB-hex-encoded-public-key> \\\n--payment-amount <payment-in-motes>\n```\n\n----------------------------------------\n\nTITLE: Sending a Transaction with account_put_transaction in JSON-RPC\nDESCRIPTION: Example of an account_put_transaction request to send a transaction for execution. This is the recommended method for users to send compiled Wasm to a Casper network node. The request includes transaction details such as version, hash, header, body, and approvals.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/versioned_docs/version-2.0.0/developers/json-rpc/json-rpc-transactional.md#2025-04-22_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"id\": 1,\n  \"jsonrpc\": \"2.0\",\n  \"method\": \"account_put_transaction\",\n  \"params\": [\n    {\n      \"name\": \"transaction\",\n      \"value\": {\n        \"Version1\": {\n          \"hash\": \"f5582cb81a5abda63ebaa4edb3b05210ecbd63ffb8dd17bfbeb3b867f4014468\",\n          \"header\": {\n            \"chain_name\": \"casper-example\",\n            \"timestamp\": \"2020-11-17T00:39:24.072Z\",\n            \"ttl\": \"1h\",\n            \"body_hash\": \"aa24833ffbf31d62c8c8c4265349e7c09cd71952fcbce6f7b12daf5e340bf2cc\",\n            \"pricing_mode\": {\n              \"Fixed\": {\n                \"gas_price_tolerance\": 5\n              }\n            },\n            \"initiator_addr\": {\n              \"PublicKey\": \"01d9bf2148748a85c89da5aad8ee0b0fc2d105fd39d41a4c796536354f0ae2900c\"\n            }\n          },\n          \"body\": {\n            \"args\": [\n              [\n                \"source\",\n                {\n                  \"cl_type\": {\n                    \"Option\": \"URef\"\n                  },\n                  \"bytes\": \"010a0a0a0a0a0a0a0a0a0a0a0a0a0a0a0a0a0a0a0a0a0a0a0a0a0a0a0a0a0a0a0a07\",\n                  \"parsed\": \"uref-0a0a0a0a0a0a0a0a0a0a0a0a0a0a0a0a0a0a0a0a0a0a0a0a0a0a0a0a0a0a0a0a-007\"\n                }\n              ],\n              [\n                \"target\",\n                {\n                  \"cl_type\": \"URef\",\n                  \"bytes\": \"1b1b1b1b1b1b1b1b1b1b1b1b1b1b1b1b1b1b1b1b1b1b1b1b1b1b1b1b1b1b1b1b00\",\n                  \"parsed\": \"uref-1b1b1b1b1b1b1b1b1b1b1b1b1b1b1b1b1b1b1b1b1b1b1b1b1b1b1b1b1b1b1b1b-000\"\n                }\n              ],\n              [\n                \"amount\",\n                {\n                  \"cl_type\": \"U512\",\n                  \"bytes\": \"0500ac23fc06\",\n                  \"parsed\": \"30000000000\"\n                }\n              ],\n              [\n                \"id\",\n                {\n                  \"cl_type\": {\n                    \"Option\": \"U64\"\n                  },\n                  \"bytes\": \"01e703000000000000\",\n                  \"parsed\": 999\n                }\n              ]\n            ],\n            \"target\": \"Native\",\n            \"entry_point\": \"Transfer\",\n            \"transaction_category\": 0,\n            \"scheduling\": \"Standard\"\n          },\n          \"approvals\": [\n            {\n              \"signer\": \"01d9bf2148748a85c89da5aad8ee0b0fc2d105fd39d41a4c796536354f0ae2900c\",\n              \"signature\": \"0137d3f468d8f8a6e63f4110d79be29b8c8428e9cd858a92049660e7851ae16a299640d1fc1c930ab6cb424f1a6eec0b194df74bede14f4af1b5133106f1280d0b\"\n            }\n          ]\n        }\n      }\n    }\n  ],\n}\n```\n\n----------------------------------------\n\nTITLE: Decompressing and Extracting a Zstandard Tar Archive as Casper User\nDESCRIPTION: Decompresses a `.tar.zst` file using `zstd` (`-cd --long=31`) and pipes the output to `tar` (`-xv`) to extract the contents. The extraction is performed as the `casper` user using `sudo -u casper` to ensure correct file ownership for the Casper node. Requires `zstd`, `tar`, and `sudo` privileges.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/docs/operators/maintenance/archiving-and-restoring.md#2025-04-22_snippet_8\n\nLANGUAGE: bash\nCODE:\n```\nzstd -cd --long=31 <.tar.zst file> | sudo -u casper tar -xv\n```\n\n----------------------------------------\n\nTITLE: Setting Up and Starting the Local Network\nDESCRIPTION: Command to set up all assets required to run a local network and then start it. This creates a network with 10 nodes and 10 sidecar instances.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/versioned_docs/version-2.0.0/developers/dapps/setup-nctl.md#2025-04-22_snippet_22\n\nLANGUAGE: bash\nCODE:\n```\n$ nctl-assets-setup && nctl-start\n```\n\n----------------------------------------\n\nTITLE: Interacting with Installed Contract\nDESCRIPTION: Command to interact with an installed contract by sending a deploy with specific session arguments including ContractHash\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/versioned_docs/version-1.5.X/developers/dapps/nctl-test.md#2025-04-22_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\n$(get_path_to_client) put-deploy \\\n--node-address http://localhost:11101 \\\n--chain-name \"casper-net-1\" \\\n--payment-amount 500000000 \\\n--session-path <PATH> \\\n--session-arg \"contract_key:key='hash-8c13aaeef50ae7f447ee21276965c31cfa45c4ea3abb03d35d078cdd6a40e4a'\"\n```\n\n----------------------------------------\n\nTITLE: Burning NFT Tokens via casper-cep78-js-client - JavaScript\nDESCRIPTION: Shows how to send a deploy to burn (destroy) an NFT by its tokenId using the burn method, which must be signed by the token holder. This process requires the tokenId, user keys and an RPC endpoint, and returns a deploy hash. Burning is available only if the contract was installed with burn mode enabled.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/docs/resources/tokens/cep78/js-tutorial.md#2025-04-22_snippet_5\n\nLANGUAGE: JavaScript\nCODE:\n```\n\n  const burnDeploy = await contractClient.burn(\n    { tokenId: \"0\" },\n    \"13000000000\",\n    USER1_KEYS.publicKey,\n    [USER1_KEYS]\n  );\n\n  const burnDeployHash = await burnDeploy.send(\"http://localhost:11101/rpc\");\n\n```\n\n----------------------------------------\n\nTITLE: Initializing Rust Test Program for Casper Contracts\nDESCRIPTION: This code snippet shows how to initialize a Rust test program for Casper contracts. It includes an empty main function to ensure the tests are run with 'cargo test' instead of 'cargo run'.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/versioned_docs/version-2.0.0/developers/writing-onchain-code/testing-contracts.md#2025-04-22_snippet_1\n\nLANGUAGE: rust\nCODE:\n```\nfn main() {\n panic!(\"Execute \\\"cargo test\\\" to test the contract, not \\\"cargo run\\\".\");\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Hex-Encoded Block Hash Schema with Inheritance in JSON\nDESCRIPTION: This JSON code snippet specifies a schema that describes a hex-encoded cryptographic hash of a block for use in API contracts or documentation. It inherits from an existing 'Digest' schema using 'allOf' for reuse and conformity, and includes a 'description' property for clear documentation. No external libraries are required, but the 'Digest' schema must be defined elsewhere in the document. Inputs and outputs are structured objects conforming to JSON Schema standards, and the schema is expected to be consumed by API generators or validators.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/condor/jsonrpc-comp/rpc-2.0/schema/BlockHash.json.md#2025-04-22_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"description\": \"Hex-encoded cryptographic hash of a block.\",\n    \"allOf\": [\n        {\n            \"$ref\": \"#/components/schemas/Digest\"\n        }\n    ]\n} \n```\n\n----------------------------------------\n\nTITLE: Storing Values with runtime::put_key and storage::write in Rust\nDESCRIPTION: This Rust snippet demonstrates how to store a contract hash as a Named Key using runtime::put_key, create a new URef to hold a boolean value using storage::new_uref, and then overwrite that value with storage::write. The URef is subsequently stored as a NamedKey entitled MY_STORED_VALUE_UREF. Prerequisites include the casper-contract crate and its dependencies. Key parameters: CONTRACT_HASH (the NamedKey identifier), MY_STORED_VALUE (boolean for storage), and MY_STORED_VALUE_UREF (the URef NamedKey label). Inputs: contract hash and initial boolean. Outputs: contract hash reference and value stored in contract's global state.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/docs/resources/advanced/storage-workflow.md#2025-04-22_snippet_0\n\nLANGUAGE: rust\nCODE:\n```\n\n    // Store contract hash under a Named key CONTRACT_HASH\n    runtime::put_key(CONTRACT_HASH, contract_hash.into());\n\n    // Store !MY_STORED_VALUE (false) as init value/type into a new URef\n    let my_value_uref = storage::new_uref(!MY_STORED_VALUE);\n\n    // Store MY_STORED_VALUE (true) under the URef value\n    storage::write(my_value_uref, MY_STORED_VALUE);\n\n    // Store the Uref under a Named key MY_STORED_VALUE_UREF\n    let my_value_key: Key = my_value_uref.into();\n    runtime::put_key(MY_STORED_VALUE_UREF, my_value_key);\n}\n\n```\n\n----------------------------------------\n\nTITLE: Preparing the CEP-18 Contract Development Environment with Make (Bash)\nDESCRIPTION: This bash code is used to prepare the project for compilation by downloading dependencies and performing setup tasks defined by the contract's Makefile. Requires make to be installed. It should be run from within the token contract's main directory.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/docs/resources/tokens/cep18/full-tutorial.md#2025-04-22_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nmake prepare\n```\n\n----------------------------------------\n\nTITLE: Changing CEP-18 Security Permissions via Casper Client - Bash\nDESCRIPTION: This casper-client put-deploy command invokes the change_security entry point to manage account role assignments (e.g., Admin, MintAndBurn, Burner, Minter, None) for a CEP-18 smart contract. Various --session-arg parameters can be provided, each containing a string of account hashes for each permission level. All arguments are optional, but removing all admins revokes future admin access. Requires the secret key, contract package, and chain info.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/versioned_docs/version-2.0.0/resources/tokens/cep18/transfer.md#2025-04-22_snippet_25\n\nLANGUAGE: bash\nCODE:\n```\ncasper-client put-deploy -n http://<NODE IP>:<PORT> \\\n--secret-key ~/casper/demo/user_a/secret_key.pem \\\n--session-package-name \"cep18_contract_package_CEP18\" \\\n--session-entry-point \"change_security\" \\\n/// The following arguments are all optional and each consists of a string of the account hashes to be added to the list specified, separated by commas.\n--session-arg \"none_list:string:'<List of account hashes>'\" \\\n--session-arg \"admin_list:string:'<List of account hashes>'\" \\\n--session-arg \"mint_and_burn_list:string:'<List of account hashes>'\" \\\n--session-arg \"burner_list:string:'<List of account hashes>'\" \\\n--chain-name <CHAIN NAME> \\\n--payment-amount 1000000000\n```\n\n----------------------------------------\n\nTITLE: Invoking Entity Entry Point via Casper Client CLI (JSON)\nDESCRIPTION: This command enables users to directly invoke an entry point on a specified AddressableEntity using its entity address, via the 'invocable-entity' transaction. Required parameters include the entity address, entry point name, gas price, and signing credentials. Casper client and associated keys are prerequisites; incorrect paths or names will prevent proper transaction submission.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/versioned_docs/version-2.0.0/concepts/transactions.md#2025-04-22_snippet_5\n\nLANGUAGE: json\nCODE:\n```\ncasper-client put-txn invocable-entity\n/// The [`entity-hash`](../developers/json-rpc/types_chain.md#addressableentityhash) of the entity to invoke.\n  --entity-address <FORMATTED STRING or PATH>\n/// The entry point on the invocable entity.\n  --session-entry-point <NAME>\n/// The maximum gas price that the user is willing to pay for this transaction.\n  --gas-price-tolerance <INTEGER>\n/// The path to the local secret key file, or the [`initiator address`](../developers/json-rpc/types_chain.md#initiatoraddr) sending the transaction.\n  <--secret-key <PATH>|--initiator-address <HEX STRING>>\n\n```\n\n----------------------------------------\n\nTITLE: Querying Account Information in Casper Network\nDESCRIPTION: Command to query account information from the global state using the query-global-state command.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/versioned_docs/version-2.0.0/resources/beginner/querying-network.md#2025-04-22_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\ncasper-client query-global-state \\\n  --id 4 \\\n  --node-address http://<node-ip-address>:7777 \\\n  --state-root-hash <state-root-hash> \\\n  --key <hex-encoded-source-account-public-key>\n```\n\n----------------------------------------\n\nTITLE: Fetching State Root Hash\nDESCRIPTION: Gets the current state root hash from a Casper node, which is needed for state queries. This hash represents the current state of the blockchain.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/versioned_docs/version-2.0.0/resources/beginner/counter-testnet/walkthrough.md#2025-04-22_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\ncasper-client get-state-root-hash --node-address http://[NODE_IP]:7777\n```\n\n----------------------------------------\n\nTITLE: Creating Caller Deploy with Multiple Authorization Keys in Rust\nDESCRIPTION: This code creates a deploy item for calling an entry point, using multiple authorization keys. It demonstrates how to set up a deploy with specific account addresses and session arguments.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/docs/resources/advanced/list-auth-keys-tutorial.md#2025-04-22_snippet_16\n\nLANGUAGE: rust\nCODE:\n```\nlet entry_point_deploy_item = DeployItemBuilder::new()\n    .with_empty_payment_bytes(runtime_args! {ARG_AMOUNT => *DEFAULT_PAYMENT})\n    .with_authorization_keys(&[account_addr_1, *DEFAULT_ACCOUNT_ADDR])\n    .with_address(account_addr_1)\n    .with_session_code(session_code, session_args)\n    .build();\n\nlet entry_point_request =\n    ExecuteRequestBuilder::from_deploy_item(entry_point_deploy_item).build();\nbuilder.exec(entry_point_request).expect_success().commit();\n```\n\n----------------------------------------\n\nTITLE: Creating a Test Function in Rust\nDESCRIPTION: This snippet demonstrates creating a test function that installs a smart contract and asserts its behavior using the InMemoryWasmTestBuilder in Rust.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/docs/developers/writing-onchain-code/testing-contracts.md#2025-04-22_snippet_5\n\nLANGUAGE: rust\nCODE:\n```\n    #[test]\n    /// Install version 1 of the counter contract and check its available entry points. ...\n    fn install_version1_and_check_entry_points() {\n        let mut builder = InMemoryWasmTestBuilder::default();\n        builder.run_genesis(&*DEFAULT_RUN_GENESIS_REQUEST).commit();\n\n        // See the repository for the full function.\n    }\n```\n\n----------------------------------------\n\nTITLE: Burning a Casper NFT (Bash)\nDESCRIPTION: This command uses `casper-client put-deploy` to invoke the `burn` entry point of a CEP-78 NFT contract, effectively destroying the specified NFT. Key arguments include the node RPC endpoint (`-n`), chain name, payment amount, owner's secret key (`-k`), the contract hash (`--session-hash`), the entry point name (`--session-entry-point`), and a session argument specifying the `token_id` (or `token_hash` if identifier mode is not Ordinal) of the NFT to be burned. Once burned, the NFT is permanently inaccessible.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/versioned_docs/version-1.5.X/resources/tokens/cep78/using-casper-client/interacting-with-NFTs.md#2025-04-22_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\ncasper-client put-deploy -n http://localhost:11101/rpc --chain-name \"casper-net-1\" \\\n--payment-amount 5000000000 \\\n-k ~/casper/casper-node/utils/nctl/assets/net-1/nodes/node-1/keys/secret_key.pem \\\n--session-hash hash-52e78ae3f6c485d036a74f65ebbb8c75fcc7c33fb42eb667fb32aeba72c63fb5 \\\n--session-entry-point \"burn\" \\\n--session-arg \"token_id:u64='1'\"\n```\n\n----------------------------------------\n\nTITLE: Serializing PricingMode Enum\nDESCRIPTION: Defines the `PricingMode` enum for transaction pricing, having two variants: Classic and Fixed. It serializes with a `u8` tag (0 for Classic, 1 for Fixed). Classic mode serialization follows the tag with `u64` payment_amount and `u64` gas_price. Fixed mode serialization follows the tag with `u64` gas_price_tolerance.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/versioned_docs/version-2.0.0/concepts/serialization/types.md#2025-04-22_snippet_39\n\nLANGUAGE: text\nCODE:\n```\nThe pricing mode of a transaction, with two possible variants. It serializes as a `u8` tag followed by additional data based on the following table:\n\n| Tag | PricingMode| Description |\n| --- | ---------- | ----------- |\n| 0 | Classic | The original payment model, in which the creator of a transaction specifies how much they will pay and at which gas price. |\n| 1 | Fixed | The cost of the transaction is determined by the cost table, per the transaction kind. |\n\n### Classic {#pricingmode-classic}\n\nAfter the `0` tag, a `Classic` `PricingMode` serializes as the [`u64`](./primitives.md#clvalue-numeric) `payment_amount` followed by the `u64` value of the `gas_price`.\n\n### Fixed {#pricingmode-fixed}\n\nAfter the `1` tag, a `Fixed` `PricingMode` serializes as the [`u64`](./primitives.md#clvalue-numeric) `gas_price_tolerance`.\n```\n\n----------------------------------------\n\nTITLE: Example: Submitting a Testnet Validator Bid with Compiled Wasm - Casper CLI (Bash)\nDESCRIPTION: This Bash command is a full example for Testnet, showing how to use a compiled add_bid.wasm for submitting a validator bid of 10,000 CSPR with a 10% delegation rate and a payment of 3 CSPR. The command specifies node address, secret key, Testnet chain name, payment, path to the Wasm contract, public key, amount, and delegation rate. Realistic values are needed for keys and file paths; output is a deploy hash for follow-up querying. Ensure the session-path points to a valid compiled Wasm file and arguments use up-to-date network configuration.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/docs/operators/becoming-a-validator/bonding.md#2025-04-22_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\nsudo -u casper casper-client put-deploy \\\n--node-address http://65.21.235.219:7777 \\\n--secret-key /etc/casper/validator_keys/secret_key.pem \\\n--chain-name casper-test \\\n--payment-amount 3000000000 \\\n--session-path ~/casper-node/target/wasm32-unknown-unknown/release/add_bid.wasm \\\n--session-arg \"public_key:public_key='01c297d2931fec7e22b2fb1ae3ca5afdfacc2c82ba501e8ed158eecef82b4dcdee'\" \\\n--session-arg \"amount:U512='$[10000 * 1000000000]'\" \\\n--session-arg \"delegation_rate:u8='10'\"\n```\n\n----------------------------------------\n\nTITLE: Invoking Entity via Alias Using Casper Client CLI (JSON)\nDESCRIPTION: This snippet shows how to invoke an entry point on an AddressableEntity by referencing an alias in named keys using the 'invocable-entity-alias' transaction. The command requires the entity alias, session entry point, gas price, and valid authentication method. Using Casper client and correct alias setup are required; invalid aliases or missing credentials will cause failure.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/versioned_docs/version-2.0.0/concepts/transactions.md#2025-04-22_snippet_6\n\nLANGUAGE: json\nCODE:\n```\ncasper-client put-txn invocable-entity-alias\n/// The entity alias stored in the calling entity's named keys.\n  --entity-alias <STRING>\n/// The entry point on the invocable entity. \n  --session-entry-point <NAME>\n/// The maximum gas price that the user is willing to pay for this transaction.\n  --gas-price-tolerance <INTEGER>\n/// The path to the local secret key file, or the [`initiator address`](../developers/json-rpc/types_chain.md#initiatoraddr) sending the transaction.\n  <--secret-key <PATH>|--initiator-address <HEX STRING>>\n\n```\n\n----------------------------------------\n\nTITLE: Sample Query for Message Topic Information in Casper Network\nDESCRIPTION: Example command demonstrating how to query information about a specific message topic from global state, showing the actual composite key structure for the topic and a specific block identifier.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/versioned_docs/version-2.0.0/developers/writing-onchain-code/emitting-contract-events.md#2025-04-22_snippet_15\n\nLANGUAGE: bash\nCODE:\n```\ncasper-client query-global-state --node-address http://127.0.0.1:11101 \\\n--key \"message-topic-803c759a466a84a0ab12147857f49e269369796a66ad37e94ab8343ddddb7823-topic-name-5721a6d9d7a9afe5dfdb35276fb823bed0f825350e4d865a5ec0110c380de4e1\" \\\n--block-identifier d9642c5d90c7fc05a23d83a3abcf56d63cb71316402ecefe0962fdeccad2c99c\n```\n\n----------------------------------------\n\nTITLE: Updating Associated Key Weight on Casper Testnet using Casper CLI\nDESCRIPTION: Sends a deploy to the Casper Testnet using `casper-client put-deploy` to update the weight of an associated key for the account identified by the `--secret-key`. It executes the `update_associated_keys.wasm` session code, passing the target `associated_key` (as an account hash) and the `new_weight` (3 in this example) as arguments. Requires a funded account, its secret key file, the compiled Wasm, and specification of the node address and chain name.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/docs/resources/advanced/multi-sig/multi-sig-workflow.md#2025-04-22_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\ncasper-client put-deploy --node-address https://node.testnet.casper.network \\\n--chain-name \"casper-test\" \\\n--payment-amount 500000000 \\\n--secret-key $PATH/secret_key.pem \\\n--session-path target/wasm32-unknown-unknown/release/update_associated_keys.wasm \\\n--session-arg \"associated_key:key='account-hash-<ACCOUNT_HASH>'\" \\\n--session-arg \"new_weight:u8='3'\"\n```\n\n----------------------------------------\n\nTITLE: Adding New Contract Version in Rust\nDESCRIPTION: Adds a new contract version to an existing package using add_contract_version function. Takes contract package hash, entry points, and named keys as parameters.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/versioned_docs/version-2.0.0/resources/beginner/upgrade-contract.md#2025-04-22_snippet_1\n\nLANGUAGE: rust\nCODE:\n```\n    let (contract_hash, contract_version) = \n    storage::add_contract_version(contract_package_hash, \n                                  entry_points, \n                                  named_keys);\n```\n\n----------------------------------------\n\nTITLE: Casper Wallet Provider Implementation\nDESCRIPTION: JavaScript implementation for getting the Casper Wallet provider instance with timeout configuration.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/docs/developers/dapps/template-frontend.md#2025-04-22_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nconst REQUESTS_TIMEOUT_MS = 30 * 60 * 1000;\n\nexport const getProvider = () => {\n    let providerConstructor = window.CasperWalletProvider;\n    if (providerConstructor === undefined) {\n        alert(\"Casper Wallet extension is not installed!\");\n        return;\n    }\n    let provider = providerConstructor({\n        timeout: REQUESTS_TIMEOUT_MS\n    });\n    return provider;\n}\n```\n\n----------------------------------------\n\nTITLE: Changing Account Security Permissions for CEP-18 Tokens using Casper Client\nDESCRIPTION: This command allows an admin to change security permissions for accounts. It can modify none, admin, mint and burn, burner, and minter lists. The command accepts optional arguments for each security level list.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/docs/resources/tokens/cep18/transfer.md#2025-04-22_snippet_11\n\nLANGUAGE: bash\nCODE:\n```\ncasper-client put-deploy -n http://<NODE IP>:<PORT> \\\n--secret-key ~/casper/demo/user_a/secret_key.pem \\\n--session-package-name \"cep18_contract_package_CEP18\" \\\n--session-entry-point \"change_security\" \\\n--session-arg \"none_list:string:'<List of account hashes>'\" \\\n--session-arg \"admin_list:string:'<List of account hashes>'\" \\\n--session-arg \"mint_and_burn_list:string:'<List of account hashes>'\" \\\n--session-arg \"burner_list:string:'<List of account hashes>'\" \\\n--chain-name <CHAIN NAME> \\\n--payment-amount 1000000000\n```\n\n----------------------------------------\n\nTITLE: Retrieving Account Hash from Public Key\nDESCRIPTION: Uses the casper-client to get the account hash from a public key. This account hash is needed for querying the network state.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/versioned_docs/version-2.0.0/resources/beginner/counter-testnet/walkthrough.md#2025-04-22_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ncasper-client account-address --public-key [PATH_TO_PUBLIC_KEY]\n```\n\n----------------------------------------\n\nTITLE: Example Response for state_get_account_info RPC Method (JSON)\nDESCRIPTION: Shows an example JSON response returned by the `state_get_account_info` RPC method. The response includes the API version, detailed account information (account hash, named keys, main purse URef, associated keys with weights, action thresholds), and the Merkle proof for state verification.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/condor/jsonrpc-comp/rpc-1.5/schema.json.md#2025-04-22_snippet_4\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"api_version\": \"1.5.6\",\n  \"account\": {\n    \"account_hash\": \"account-hash-e94daaff79c2ab8d9c31d9c3058d7d0a0dd31204a5638dc1451fa67b2e3fb88c\",\n    \"named_keys\": [],\n    \"main_purse\": \"uref-09480c3248ef76b603d386f3f4f8a5f87f597d4eaffd475433f861af187ab5db-007\",\n    \"associated_keys\": [\n      {\n        \"account_hash\": \"account-hash-e94daaff79c2ab8d9c31d9c3058d7d0a0dd31204a5638dc1451fa67b2e3fb88c\",\n        \"weight\": 1\n      }\n    ],\n    \"action_thresholds\": {\n      \"deployment\": 1,\n      \"key_management\": 1\n    }\n  },\n  \"merkle_proof\": \"01000000006ef2e0949ac76e55812421f755abe129b6244fe7168b77f47a72536147614625016ef2e0949ac76e55812421f755abe129b6244fe7168b77f47a72536147614625000000003529cde5c621f857f75f3810611eb4af3f998caaa9d4a3413cf799f99c67db0307010000006ef2e0949ac76e55812421f755abe129b6244fe7168b77f47a7253614761462501010102000000006e06000000000074769d28aac597a36a03a932d4b43e4f10bf0403ee5c41dd035102553f5773631200b9e173e8f05361b681513c14e25e3138639eb03232581db7557c9e8dbbc83ce94500226a9a7fe4f2b7b88d5103a4fc7400f02bf89c860c9ccdd56951a2afe9be0e0267006d820fb5676eb2960e15722f7725f3f8f41030078f8b2e44bf0dc03f71b176d6e800dc5ae9805068c5be6da1a90b2528ee85db0609cc0fb4bd60bbd559f497a98b67f500e1e3e846592f4918234647fca39830b7e1e6ad6f5b7a99b39af823d82ba1873d000003000000010186ff500f287e9b53f823ae1582b1fa429dfede28015125fd233a31ca04d5012002015cc42669a55467a1fdf49750772bfc1aed59b9b085558eb81510e9b015a7c83b0301e3cf4a34b1db6bfa58808b686cb8fe21ebe0c1bcbcee522649d2b135fe510fe3\"\n}\n```\n\n----------------------------------------\n\nTITLE: Querying Deploy Information with casper-client in Bash\nDESCRIPTION: This snippet shows how to use the casper-client CLI tool to check the execution status of a deploy in the Casper Network. It includes the command structure and explains the key parameters required for the query.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/docs/resources/beginner/querying-network.md#2025-04-22_snippet_12\n\nLANGUAGE: bash\nCODE:\n```\ncasper-client get-deploy \\\n      --id 2 \\\n      --node-address http://<node-ip-address>:7777 \\\n      <deploy-hash>\n```\n\n----------------------------------------\n\nTITLE: Querying Deploy Status using casper-client CLI\nDESCRIPTION: Command to check the execution status of a deploy using the casper-client CLI tool. Requires a node address and deploy hash as input parameters.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/versioned_docs/version-1.5.X/resources/beginner/querying-network.md#2025-04-22_snippet_8\n\nLANGUAGE: bash\nCODE:\n```\ncasper-client get-deploy \\\n      --id 2 \\\n      --node-address http://<node-ip-address>:7777 \\\n      <deploy-hash>\n```\n\n----------------------------------------\n\nTITLE: Verifying Deploy with get-deploy\nDESCRIPTION: Command to verify deploy details using the get-deploy command with a node address and deploy hash.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/versioned_docs/version-1.5.X/developers/cli/sending-deploys.md#2025-04-22_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\ncasper-client get-deploy \\\n    --node-address <HOST:PORT> <DEPLOY-HASH>\n```\n\n----------------------------------------\n\nTITLE: Creating Locked Contracts in Casper\nDESCRIPTION: Example of creating a locked contract that cannot be upgraded, useful for high-security applications where contract immutability is required.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/versioned_docs/version-1.5.X/developers/writing-onchain-code/simple-contract.md#2025-04-22_snippet_15\n\nLANGUAGE: rust\nCODE:\n```\nlet (stored_contract_hash, _) =\n        storage::new_locked_contract(counter_entry_points, Some(counter_named_keys), None, None);\n```\n\n----------------------------------------\n\nTITLE: Describing DisabledVersions Structure and Serialization (Casper Network)\nDESCRIPTION: Defines the DisabledVersions structure, indicating contract versions that are disabled. It contains the contract version (u32) and the major protocol version (u32) it's associated with, specifying their serialization as u32 values.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/versioned_docs/version-2.0.0/concepts/serialization/types.md#2025-04-22_snippet_17\n\nLANGUAGE: Text\nCODE:\n```\n## DisabledVersions {#disabledversions}\n\nDisabled contract versions, containing the following:\n\n-   `contract_version`: The version of the contract within the protocol major version. It serializes as a [`u32` value](./primitives.md#clvalue-numeric).\n\n-   `protocol_version_major`: The major element of the protocol version this contract is compatible with. It serializes as a [`u32` value](./primitives.md#clvalue-numeric).\n```\n\n----------------------------------------\n\nTITLE: Sample Response: Querying Package State (JSON-like Bash Output)\nDESCRIPTION: Returns the result of querying a package with casper-client, including version info, addressable entity hash, lock status, and a Merkle proof. Technically emitted as bash-formatted text but forms valid JSON content.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/docs/developers/cli/querying-global-state.md#2025-04-22_snippet_17\n\nLANGUAGE: bash\nCODE:\n```\n{\n  \"jsonrpc\": \"2.0\",\n  \"id\": -8280509649720542989,\n  \"result\": {\n    \"api_version\": \"2.0.0\",\n    \"block_header\": null,\n    \"stored_value\": {\n      \"Package\": {\n        \"versions\": [\n          {\n            \"entity_version_key\": {\n              \"protocol_version_major\": 2,\n              \"entity_version\": 1\n            },\n            \"addressable_entity_hash\": \"addressable-entity-6a56c4eee172043975aea72221eaf09f3c3a24f09a379935e44c9979f1ae9463\"\n          }\n        ],\n        \"disabled_versions\": [],\n        \"groups\": [],\n        \"lock_status\": \"Unlocked\"\n      }\n    },\n    \"merkle_proof\": \"[2934 hex chars]\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Calling Contract Package with Version\nDESCRIPTION: Example of calling a specific version of a contract package, demonstrating the counter increment entry point call with version 1 specified.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/versioned_docs/version-2.0.0/developers/cli/calling-contracts.md#2025-04-22_snippet_15\n\nLANGUAGE: rust\nCODE:\n```\ncasper-client put-deploy \\\n    --node-address http://65.21.235.219:7777 \\\n    --chain-name casper-test \\\n    --secret-key [KEY_PATH]/secret_key.pem \\\n    --payment-amount 100000000 \\\n    --session-package-name \"counter_package_name\" \\\n    --session-entry-point \"counter-inc\" \\\n    --session-version 1\n```\n\n----------------------------------------\n\nTITLE: Creating New Dictionary in Casper Contract\nDESCRIPTION: Basic example of creating a new dictionary using the casper_contract API\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/docs/concepts/dictionaries.md#2025-04-22_snippet_0\n\nLANGUAGE: rust\nCODE:\n```\ncasper_contract::contract_api::storage::new_dictionary(dict_name)\n```\n\n----------------------------------------\n\nTITLE: Simulating Block Time in Casper Tests using with_block_time in Rust\nDESCRIPTION: This example extends a session code request by setting a custom block time with '.with_block_time(desired_time)'. This is required for testing logic dependent on block timestamps, enabling assertion of time-sensitive contract behaviors in unit tests. Can be appended to any ExecuteRequestBuilder chain before '.build()'. Supply a numerical value representing the simulated timestamp.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/versioned_docs/version-1.5.X/developers/writing-onchain-code/testing-contracts.md#2025-04-22_snippet_10\n\nLANGUAGE: rust\nCODE:\n```\n    let session_code_request = ExecuteRequestBuilder::standard(\n        *DEFAULT_ACCOUNT_ADDR,\n        COUNTER_CALL_WASM,\n        runtime_args! {\n            CONTRACT_KEY => contract_v1_hash\n        },\n    .with_block_time(5000)\n    .build();\n```\n\n----------------------------------------\n\nTITLE: Verifying Contract Version with Rust Unit Test\nDESCRIPTION: A Rust test function that verifies the contract version has been upgraded to version 2 by querying a named key. It retrieves the account, gets the version key, and asserts that the stored version matches the expected value.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/docs/resources/beginner/upgrade-contract.md#2025-04-22_snippet_4\n\nLANGUAGE: rust\nCODE:\n```\n    // Verify the contract version is now 2.\n    let account = builder\n        .get_account(*DEFAULT_ACCOUNT_ADDR)\n        .expect(\"should have account\");\n\n    let version_key = *account\n        .named_keys()\n        .get(CONTRACT_VERSION_KEY)\n        .expect(\"version uref should exist\");\n\n    let version = builder\n        .query(None, version_key, &[])\n        .expect(\"should be stored value.\")\n        .as_cl_value()\n        .expect(\"should be cl value.\")\n        .clone()\n        .into_t::<u32>()\n        .expect(\"should be u32.\");\n\n    assert_eq!(version, 2);\n```\n\n----------------------------------------\n\nTITLE: Creating Runtime Arguments for Delegation in JavaScript SDK\nDESCRIPTION: Prepares runtime arguments for a delegation operation, including delegator and validator public keys, and the amount to delegate in motes. These arguments are required for the deploy on Casper network.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/versioned_docs/version-1.5.X/resources/advanced/list-cspr.md#2025-04-22_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nimport { RuntimeArgs, CLValueBuilder, CLPublicKey } from 'casper-js-sdk';\n\nconst args = RuntimeArgs.fromMap({\n  delegator: CLPublicKey.fromHex(delegatorPublicKeyHex),\n  validator: CLPublicKey.fromHex(validatorPublicKeyHex),\n  amount: CLValueBuilder.u512(amountMotes) // in motes\n});\n```\n\n----------------------------------------\n\nTITLE: Signing a Deploy with Casper Signer in JavaScript SDK\nDESCRIPTION: Signs a deploy using the Casper Signer wallet. The function converts the deploy to JSON, signs it, converts it back to a deploy object, and sends it to the network via the Casper service.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/versioned_docs/version-1.5.X/resources/advanced/list-cspr.md#2025-04-22_snippet_8\n\nLANGUAGE: javascript\nCODE:\n```\nimport { Signer, CasperServiceByJsonRPC, DeployUtil } from 'casper-js-sdk';\n\nconst casperService = new CasperServiceByJsonRPC(GRPC_URL);\nconst deployJson = DeployUtil.deployToJson(deploy);\nSigner.sign(\n    deployJson,\n    accountPublicKey,\n    recipientPublicKey\n).then((signedDeployJson) => {\n    const signedDeploy = DeployUtil.deployFromJson(signedDeployJson);\n    if (signedDeploy.ok) {\n      casperService.deploy(signedDeploy.val! as DeployUtil.Deploy); // sent deploy\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Extracting AccountHash or ContractHash from AddressableEntity Keys in Rust\nDESCRIPTION: This code snippet shows how to extract the AccountHash or ContractHash from a Key::AddressableEntity using pattern matching in Casper 2.0.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/src/pages/condor/addressable-entity.md#2025-04-22_snippet_2\n\nLANGUAGE: rust\nCODE:\n```\n//For Accounts\nlet account_hash = match addressable_entity_key {\n    Key::AddressableEntity(EntityAddr::Account(hash)) => hash,\n    _ => panic!(\"Not an account key\"), \n};\n//For Contracts\nlet contract_hash = match addressable_entity_key {\n    Key::AddressableEntity(EntityAddr::SmartContract(hash)) => hash,\n    _ => panic!(\"Not a contract key\"), \n};\n```\n\n----------------------------------------\n\nTITLE: Defining CallStackElement Enum for Contract Caller Identification - Rust\nDESCRIPTION: This Rust code snippet defines the CallStackElement enum, representing possible origins in the Casper contract call stack as returned by the casper_load_call_stack FFI method. It distinguishes between Session (called by an account), StoredSession (a session stored as an entry point), and StoredContract (a contract call), each carrying account and/or contract identifiers. Dependencies include casper-types for associated type definitions (AccountHash, ContractHash, ContractPackageHash). The enum is fundamental for contract authors seeking to programmatically determine the caller and manage custom access controls or internal tracking in smart contracts.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/versioned_docs/version-1.5.X/developers/writing-onchain-code/contract-hash-vs-package-hash.md#2025-04-22_snippet_0\n\nLANGUAGE: rust\nCODE:\n```\n/// Represents the origin of a sub-call.\\n#[derive(Clone, Debug, PartialEq, Eq)]\\npub enum CallStackElement {\\n    /// Session\\n    Session {\\n        /// The account hash of the caller\\n        account_hash: AccountHash,\\n    },\\n    /// Effectively an EntryPointType::Session - stored access to a session.\\n    StoredSession {\\n        /// The account hash of the caller\\n        account_hash: AccountHash,\\n        /// The contract package hash\\n        contract_package_hash: ContractPackageHash,\\n        /// The contract hash\\n        contract_hash: ContractHash,\\n    },\\n    /// contract\\n    StoredContract {\\n        /// The contract package hash\\n        contract_package_hash: ContractPackageHash,\\n        /// The contract hash\\n        contract_hash: ContractHash,\\n    },\\n}\n```\n\n----------------------------------------\n\nTITLE: Calculating Base Round Reward in Casper Network\nDESCRIPTION: Formula for calculating the maximum amount of CSPR tokens that validators can collectively receive from a proposed block, based on the round issuance rate and current supply.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/versioned_docs/version-2.0.0/concepts/economics/consensus.md#2025-04-22_snippet_2\n\nLANGUAGE: plaintext\nCODE:\n```\nbase_round_reward(i) = round_issuance_rate * supply(i)\n```\n\n----------------------------------------\n\nTITLE: Testing Failed Transfer in Rust\nDESCRIPTION: Test case demonstrating a failed token transfer due to insufficient balance. The test verifies that attempting to transfer more tokens than available throws the expected error.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/versioned_docs/version-2.0.0/resources/tokens/cep18/tests.md#2025-04-22_snippet_0\n\nLANGUAGE: rust\nCODE:\n```\n#[should_panic(expected = \"ApiError::User(65534) [131070]\")]\n#[test]\nfn should_not_transfer_with_insufficient_balance() {\n    let mut fixture = TestFixture::install_contract();\n\n    let initial_ali_balance = fixture.balance_of(Key::from(fixture.ali)).unwrap();\n    assert_eq!(fixture.balance_of(Key::from(fixture.bob)), None);\n\n    fixture.transfer(\n        Key::from(fixture.bob),\n        initial_ali_balance + U256::one(),\n        fixture.ali,\n    );\n}\n```\n\n----------------------------------------\n\nTITLE: Primary Account Deploy Execution\nDESCRIPTION: Command to execute a deploy from the primary account using contract.wasm to add a named key.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/docs/resources/advanced/multi-sig/multi-sig-workflow.md#2025-04-22_snippet_16\n\nLANGUAGE: bash\nCODE:\n```\ncasper-client put-deploy --chain-name casper-test \\\n--payment-amount 3000000000 \\\n--session-path tests/wasm/contract.wasm \\\n--secret-key $PATH/secret_key.pem \\\n--session-arg \"my-key-name:string='primary_account_key'\" \\\n--session-arg \"message:string='Hello, World'\"\n```\n\n----------------------------------------\n\nTITLE: Deploying with Casper Client Bash Commands\nDESCRIPTION: This snippet shows how to deploy smart contracts using the Casper Client bash commands. It involves setting up a deploy with necessary session arguments and executing the deployment on the Casper network.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/versioned_docs/version-2.0.0/resources/advanced/multi-sig/multi-sig-workflow.md#2025-04-22_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\ncasper-client put-deploy --node-address https://node.testnet.casper.network \\\n--chain-name \"casper-test\" \\\n--payment-amount 500000000 \\\n--secret-key $PATH/secret_key.pem \\\n--session-path target/wasm32-unknown-unknown/release/add_account.wasm \\\n--session-arg \"new_key:key='account-hash-e2d00525cac31ae2756fb155f289d276c6945b6914923fe275de0cb127bffee7\" \\\n--session-arg \"weight:u8='1'\"\n```\n\nLANGUAGE: bash\nCODE:\n```\ncasper-client get-deploy --node-address https://node.testnet.casper.network <DEPLOY_HASH>\n```\n\nLANGUAGE: bash\nCODE:\n```\ncasper-client put-deploy --node-address https://node.testnet.casper.network \\\n--chain-name \"casper-test\" \\\n--payment-amount 500000000 \\\n--secret-key $PATH/secret_key.pem \\\n--session-path target/wasm32-unknown-unknown/release/add_account.wasm \\\n--session-arg \"new_key:key='account-hash-04a9691a9f8f05a0f08bd686f188b27c7dbcd644b415759fd3ca043d916ea02f\" \\\n--session-arg \"weight:u8='1'\"\n```\n\nLANGUAGE: bash\nCODE:\n```\ncasper-client get-deploy --node-address https://node.testnet.casper.network <DEPLOY_HASH>\n```\n\nLANGUAGE: bash\nCODE:\n```\ncasper-client get-state-root-hash --node-address https://node.testnet.casper.network\n\ncasper-client query-global-state \\\n--node-address https://node.testnet.casper.network \\\n--state-root-hash <STATE_ROOT_HASH> \\\n--key account-hash-<PRIMARY_ACCOUNT_HASH>\n```\n\n----------------------------------------\n\nTITLE: Deploying a Contract using Casper-Client\nDESCRIPTION: This Bash snippet uses `casper-client` to deploy a compiled smart contract to the Casper blockchain. It requires specifying the node address, chain name, secret key for signing, payment amount, and path to the compiled WebAssembly binary.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/versioned_docs/version-2.0.0/resources/advanced/cross-contract.md#2025-04-22_snippet_16\n\nLANGUAGE: Bash\nCODE:\n```\ncasper-client put-deploy \\\n    --node-address http://136.243.187.84:7777 \\\n    --chain-name casper-test \\\n    --secret-key ./keys/secret_key.pem \\\n    --payment-amount 20000000000 \\\n    --session-path ./contract/target/wasm32-unknown-unknown/release/contract.wasm\n```\n\n----------------------------------------\n\nTITLE: Calling Auction Contract with Package Hash - Casper CLI - Rust\nDESCRIPTION: Provides a casper-client command to call the 'delegate' entry point of the system Auction contract, specifying the package hash but omitting contract version to default to the highest enabled version. Includes detailed arguments for validator, amount, and delegator. Dependencies are the casper-client, node access, and necessary public/private keys. Expected input: properly formatted session-args; output is a deploy hash.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/docs/developers/cli/calling-contracts.md#2025-04-22_snippet_7\n\nLANGUAGE: rust\nCODE:\n```\ncasper-client put-deploy \\\n    --node-address http://65.21.235.219:7777 \\\n    --chain-name casper-test \\\n    --secret-key [KEY_PATH]/secret_key.pem \\\n    --payment-amount 2500000000 \\\n    --session-package-hash hash-e375d42c29c0e4b2baefa63cf2d70af34439eda851e08129d8515515d63bd6a9 \\\n    --session-entry-point \"delegate\" \\\n    --session-arg \"validator:public_key='0145fb72c75e1b459839555d70356a5e6172e706efa204d86c86050e2f7878960f'\" \\\n    --session-arg \"amount:u512='500000000000'\" \\\n    --session-arg \"delegator:public_key='0154d828baafa6858b92919c4d78f26747430dcbecb9aa03e8b44077dc6266cabf'\"\n```\n\n----------------------------------------\n\nTITLE: Defining System Contract Types - OpenAPI Schema - YAML/JSON\nDESCRIPTION: Defines the 'SystemEntityType' OpenAPI schema, representing built-in Casper system contracts such as Mint and Auction. This provides enumeration and strong typing for system contract references, which are translated both in API models and as arguments to Casper's FFI layer. Required for object validation referencing system-level contracts.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/condor/jsonrpc-comp/rpc-2.0/schema/components.json.md#2025-04-22_snippet_50\n\nLANGUAGE: yaml\nCODE:\n```\nSystemEntityType:\n  description: |\n    System contract types.\n    \n    Used by converting to a `u32` and passing as the `system_contract_index` argument of `ext_ffi::casper_get_system_contract()`.\n  oneOf:\n    - description: \"Mint contract.\"\n      type: string\n      enum:\n        - Mint\n    - description: \"Handle Payment contract.\"\n      type: string\n      enum:\n        - HandlePayment\n    - description: \"Standard Payment contract.\"\n      type: string\n      enum:\n        - StandardPayment\n    - description: \"Auction contract.\"\n      type: string\n      enum:\n        - Auction\n```\n\n----------------------------------------\n\nTITLE: Calling Counter Contract by Hash Example in Rust\nDESCRIPTION: This example shows how to call the Counter contract's 'counter-inc' entry point using its hash. It specifies a Testnet node, chain name, secret key path, payment amount, and the contract's session hash.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/docs/developers/cli/calling-contracts.md#2025-04-22_snippet_1\n\nLANGUAGE: rust\nCODE:\n```\ncasper-client put-deploy \\\n    --node-address http://65.21.235.219:7777 \\\n    --chain-name casper-test \\\n    --secret-key [KEY_PATH]/secret_key.pem \\\n    --payment-amount 100000000 \\\n    --session-hash hash-22228188b85b6ee4a4a41c7e98225c3918139e9a5eb4b865711f2e409d85e88e \\\n    --session-entry-point \"counter-inc\"\n```\n\n----------------------------------------\n\nTITLE: Implementing query Function for Contract State (JavaScript)\nDESCRIPTION: This `query` function, intended to be used within the `Query.jsx` component, retrieves data from the smart contract via a backend endpoint. It first derives the user's account hash string (removing the 'account-hash-' prefix) from their public key using `CLPublicKey.fromHex().toAccountHashStr().substring(13)`. Then, it makes a GET request to a backend endpoint `/queryMessage`, passing the account hash as a query parameter. The response data (presumably the message stored for that account) is displayed using a JavaScript `alert`.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/docs/developers/dapps/template-frontend.md#2025-04-22_snippet_14\n\nLANGUAGE: javascript\nCODE:\n```\nconst query = (props) => {\n  const accountHash = CLPublicKey.fromHex(props.publicKey).toAccountHashStr().substring(13);\n  axios.get(\"/queryMessage?accountHash=\" + accountHash).then((response) => {\n    alert(response.data)\n  }).catch((error) => {\n    console.error(error.message);\n  });\n}\n```\n\n----------------------------------------\n\nTITLE: Illustrating Casper Network State Changes with JSON Transforms\nDESCRIPTION: This JSON snippet details the execution effects of a deploy on the Casper Network's global state. It lists various state items (identified by keys like URefs, hashes, account hashes, and balance URefs) and the transformations applied to them, such as writing Casperledger (CL) values (`WriteCLValue`), adding named keys (`AddKeys`), updating unsigned 512-bit integers (`AddUInt512`), recording deploy details (`WriteDeployInfo`), or indicating no change (`Identity`). It demonstrates updates to specific data types like `U8`, `Bool`, and `U512`, along with associated costs and deploy metadata.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/versioned_docs/version-1.5.X/resources/tokens/cep78/using-casper-client/full-installation-tutorial.md#2025-04-22_snippet_14\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"key\": \"uref-05c2868f179f6b2323f1d4ea069858956c9666d14073748aae4a748d27a8a894-000\",\n  \"transform\": {\n    \"AddKeys\": [\n      {\n        \"name\": \"owner\",\n        \"key\": \"uref-05c2868f179f6b2323f1d4ea069858956c9666d14073748aae4a748d27a8a894-007\"\n      }\n    ]\n  }\n},\n{\n  \"key\": \"uref-4d851152d7b89dff805dcf6eb61a33870dab9345084a5874575476a584d71b83-000\",\n  \"transform\": {\n    \"WriteCLValue\": {\n      \"cl_type\": \"U8\",\n      \"bytes\": \"00\",\n      \"parsed\": 0\n    }\n  }\n},\n{\n  \"key\": \"hash-378a43e38bc5129d8aa3bcd04f5c9a97be73f85b5be574182ac1346f04520796\",\n  \"transform\": {\n    \"AddKeys\": [\n      {\n        \"name\": \"reporting_mode\",\n        \"key\": \"uref-4d851152d7b89dff805dcf6eb61a33870dab9345084a5874575476a584d71b83-007\"\n      }\n    ]\n  }\n},\n{\n  \"key\": \"uref-2e3b8aafb27aae47c9b7d3728d20d8815b706e2245c23b84f0e712cd1d1e9124-000\",\n  \"transform\": {\n    \"WriteCLValue\": {\n      \"cl_type\": \"Bool\",\n      \"bytes\": \"00\",\n      \"parsed\": false\n    }\n  }\n},\n{\n  \"key\": \"hash-378a43e38bc5129d8aa3bcd04f5c9a97be73f85b5be574182ac1346f04520796\",\n  \"transform\": {\n    \"AddKeys\": [\n      {\n        \"name\": \"rlo_mflag\",\n        \"key\": \"uref-2e3b8aafb27aae47c9b7d3728d20d8815b706e2245c23b84f0e712cd1d1e9124-007\"\n      }\n    ]\n  }\n},\n{\n  \"key\": \"deploy-1d1f66b26eb648b5f15bc958a552036e8521b508706056817b0d41c71f6d7afe\",\n  \"transform\": {\n    \"WriteDeployInfo\": {\n      \"deploy_hash\": \"1d1f66b26eb648b5f15bc958a552036e8521b508706056817b0d41c71f6d7afe\",\n      \"transfers\": [],\n      \"from\": \"account-hash-e70dbca48c2d31bc2d754e51860ceaa8a1a49dc627b20320b0ecee1b6d9ce655\",\n      \"source\": \"uref-11e6fc5354f61a004df98482376c45964b8b1557e8f2f13fb5f3adab5faa8be1-007\",\n      \"gas\": \"443359442322\"\n    }\n  }\n},\n{\n  \"key\": \"hash-8cf5e4acf51f54eb59291599187838dc3bc234089c46fc6ca8ad17e762ae4401\",\n  \"transform\": \"Identity\"\n},\n{\n  \"key\": \"hash-8cf5e4acf51f54eb59291599187838dc3bc234089c46fc6ca8ad17e762ae4401\",\n  \"transform\": \"Identity\"\n},\n{\n  \"key\": \"hash-8cf5e4acf51f54eb59291599187838dc3bc234089c46fc6ca8ad17e762ae4401\",\n  \"transform\": \"Identity\"\n},\n{\n  \"key\": \"hash-624dbe2395b9d9503fbee82162f1714ebff6b639f96d2084d26d944c354ec4c5\",\n  \"transform\": \"Identity\"\n},\n{\n  \"key\": \"hash-8cf5e4acf51f54eb59291599187838dc3bc234089c46fc6ca8ad17e762ae4401\",\n  \"transform\": \"Identity\"\n},\n{\n  \"key\": \"balance-98d945f5324f865243b7c02c0417ab6eac361c5c56602fd42ced834a1ba201b6\",\n  \"transform\": \"Identity\"\n},\n{\n  \"key\": \"hash-8cf5e4acf51f54eb59291599187838dc3bc234089c46fc6ca8ad17e762ae4401\",\n  \"transform\": \"Identity\"\n},\n{\n  \"key\": \"account-hash-e70dbca48c2d31bc2d754e51860ceaa8a1a49dc627b20320b0ecee1b6d9ce655\",\n  \"transform\": \"Identity\"\n},\n{\n  \"key\": \"hash-010c3fe81b7b862e50c77ef9a958a05bfa98444f26f96f23d37a13c96244cfb7\",\n  \"transform\": \"Identity\"\n},\n{\n  \"key\": \"hash-9824d60dc3a5c44a20b9fd260a412437933835b52fc683d8ae36e4ec2114843e\",\n  \"transform\": \"Identity\"\n},\n{\n  \"key\": \"hash-010c3fe81b7b862e50c77ef9a958a05bfa98444f26f96f23d37a13c96244cfb7\",\n  \"transform\": \"Identity\"\n},\n{\n  \"key\": \"balance-98d945f5324f865243b7c02c0417ab6eac361c5c56602fd42ced834a1ba201b6\",\n  \"transform\": \"Identity\"\n},\n{\n  \"key\": \"balance-11e6fc5354f61a004df98482376c45964b8b1557e8f2f13fb5f3adab5faa8be1\",\n  \"transform\": \"Identity\"\n},\n{\n  \"key\": \"balance-98d945f5324f865243b7c02c0417ab6eac361c5c56602fd42ced834a1ba201b6\",\n  \"transform\": {\n    \"WriteCLValue\": {\n      \"cl_type\": \"U512\",\n      \"bytes\": \"055bdf0a5c67\",\n      \"parsed\": \"443925847899\"\n    }\n  }\n},\n{\n  \"key\": \"balance-11e6fc5354f61a004df98482376c45964b8b1557e8f2f13fb5f3adab5faa8be1\",\n  \"transform\": {\n    \"AddUInt512\": \"56074152101\"\n  }\n},\n{\n  \"key\": \"hash-010c3fe81b7b862e50c77ef9a958a05bfa98444f26f96f23d37a13c96244cfb7\",\n  \"transform\": \"Identity\"\n},\n{\n  \"key\": \"hash-9824d60dc3a5c44a20b9fd260a412437933835b52fc683d8ae36e4ec2114843e\",\n  \"transform\": \"Identity\"\n},\n{\n  \"key\": \"hash-010c3fe81b7b862e50c77ef9a958a05bfa98444f26f96f23d37a13c96244cfb7\",\n  \"transform\": \"Identity\"\n},\n{\n  \"key\": \"balance-98d945f5324f865243b7c02c0417ab6eac361c5c56602fd42ced834a1ba201b6\",\n  \"transform\": \"Identity\"\n},\n{\n  \"key\": \"balance-dcf5abbbe00715e9a05f7449109b1d297cb1584560ec4f3f5a86401452e40d85\",\n  \"transform\": \"Identity\"\n},\n{\n  \"key\": \"balance-98d945f5324f865243b7c02c0417ab6eac361c5c56602fd42ced834a1ba201b6\",\n  \"transform\": {\n    \"WriteCLValue\": {\n      \"cl_type\": \"U512\",\n      \"bytes\": \"00\",\n      \"parsed\": \"0\"\n    }\n  }\n},\n{\n  \"key\": \"balance-dcf5abbbe00715e9a05f7449109b1d297cb1584560ec4f3f5a86401452e40d85\",\n  \"transform\": {\n    \"AddUInt512\": \"443925847899\"\n  }\n}\n\n```\n\n----------------------------------------\n\nTITLE: Checking CEP-18 Token Allowance\nDESCRIPTION: Command to check the allowance granted to a spender account using the utility contract. This invokes the check_allowance_of entry point, requiring the token contract hash, owner account, and spender account.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/versioned_docs/version-2.0.0/resources/tokens/cep18/transfer.md#2025-04-22_snippet_9\n\nLANGUAGE: json\nCODE:\n```\ncasper-client put-deploy -n http://<node IP>:<PORT>\\\n--secret-key ~/casper/demo/user_a/secret_key.pem \\\n--session-package-name \"cep18_test_contract\" \\\n--session-entry-point \"check_allowance_of\" \\\n// This is the contract hash for the CEP-18 token.\n--session-arg \"token_contract:account_hash='account-hash-05d893e76c731729fc26339e5a970bd79fbf4a6adf743c8385431fb494bff45e'\" \\\n// This is the account hash for the account that owns the CEP-18 tokens.\n--session-arg \"owner:key='account-hash-39f15c23df9be1244572bb499fac62cbcad3cab2dc1438609842f602f943d7d2'\" \\\n// This is the account hash for the account previously authorized to spend an allowance of the owning account's CEP-18 tokens.\n--session-arg \"spender:key='account-hash-17192017d32db5dc9f598bf8ac6ac35ee4b64748669b00572d88335941479513'\" \\\n--chain-name <CHAIN NAME> \\\n--payment-amount 10000000000\n```\n\n----------------------------------------\n\nTITLE: Setting Up Test Context for CEP-18 Contract\nDESCRIPTION: Implementation of TestContext struct and setup functions for CEP-18 token testing. Creates a virtual machine instance that deploys the contract and establishes test accounts with initial balances to use in tests.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/versioned_docs/version-1.5.X/resources/tokens/cep18/tests.md#2025-04-22_snippet_4\n\nLANGUAGE: rust\nCODE:\n```\n// File https://github.com/casper-ecosystem/cep18/blob/dev/tests/src/utility/installer_request_builders.rs\n\n// Creating the `TestContext` struct.\n\npub(crate) struct TestContext {\npub(crate) cep18_token: ContractHash,\npub(crate) cep18_test_contract_package: ContractPackageHash,\n}\n\n// Setting up the test instance of CEP-18.\n\npub(crate) fn setup() -> (InMemoryWasmTestBuilder, TestContext) {\n    setup_with_args(runtime_args! {\n        ARG_NAME => TOKEN_NAME,\n        ARG_SYMBOL => TOKEN_SYMBOL,\n        ARG_DECIMALS => TOKEN_DECIMALS,\n        ARG_TOTAL_SUPPLY => U256::from(TOKEN_TOTAL_SUPPLY),\n    })\n}\n\n// Establishing test accounts.\n\npub(crate) fn setup_with_args(install_args: RuntimeArgs) -> (InMemoryWasmTestBuilder, TestContext) {\n    let mut builder = InMemoryWasmTestBuilder::default();\n    builder.run_genesis(&PRODUCTION_RUN_GENESIS_REQUEST);\n\n    let id: Option<u64> = None;\n    let transfer_1_args = runtime_args! {\n        mint::ARG_TARGET => *ACCOUNT_1_ADDR,\n        mint::ARG_AMOUNT => MINIMUM_ACCOUNT_CREATION_BALANCE,\n        mint::ARG_ID => id,\n    };\n    let transfer_2_args = runtime_args! {\n        mint::ARG_TARGET => *ACCOUNT_2_ADDR,\n        mint::ARG_AMOUNT => MINIMUM_ACCOUNT_CREATION_BALANCE,\n        mint::ARG_ID => id,\n    };\n\n    let transfer_request_1 =\n        ExecuteRequestBuilder::transfer(*DEFAULT_ACCOUNT_ADDR, transfer_1_args).build();\n    let transfer_request_2 =\n        ExecuteRequestBuilder::transfer(*DEFAULT_ACCOUNT_ADDR, transfer_2_args).build();\n\n    // Installing the test version of CEP-18 with the default account.\n\n    let install_request_1 =\n        ExecuteRequestBuilder::standard(*DEFAULT_ACCOUNT_ADDR, CEP18_CONTRACT_WASM, install_args)\n            .build();\n\n    let install_request_2 = ExecuteRequestBuilder::standard(\n        *DEFAULT_ACCOUNT_ADDR,\n        CEP18_TEST_CONTRACT_WASM,\n        RuntimeArgs::default(),\n    )\n    .build();\n\n    builder.exec(transfer_request_1).expect_success().commit();\n    builder.exec(transfer_request_2).expect_success().commit();\n    builder.exec(install_request_1).expect_success().commit();\n    builder.exec(install_request_2).expect_success().commit();\n\n    let account = builder\n        .get_account(*DEFAULT_ACCOUNT_ADDR)\n        .expect(\"should have account\");\n\n    let cep18_token = account\n        .named_keys()\n        .get(CEP18_TOKEN_CONTRACT_KEY)\n        .and_then(|key| key.into_hash())\n        .map(ContractHash::new)\n        .expect(\"should have contract hash\");\n\n    let cep18_test_contract_package = account\n        .named_keys()\n        .get(CEP18_TEST_CONTRACT_KEY)\n        .and_then(|key| key.into_hash())\n        .map(ContractPackageHash::new)\n        .expect(\"should have contract package hash\");\n\n    let test_context = TestContext {\n        cep18_token,\n        cep18_test_contract_package,\n    };\n\n    (builder, test_context)\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing the Constructor (call) Entry Point in Casper Contract\nDESCRIPTION: Implementation of the call entry point that serves as the contract constructor. This code stores a message in global state, defines named keys, and configures an update_msg entry point for later interaction.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/versioned_docs/version-2.0.0/resources/advanced/cross-contract.md#2025-04-22_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\n#![no_std]\n#![no_main]\n\n#[cfg(not(target_arch = \"wasm32\"))]\ncompile_error!(\"target arch should be wasm32: compile with '--target wasm32-unknown-unknown'\");\n\n// We need to explicitly import the std alloc crate and `alloc::string::String` as we are in a\n// `no_std` environment.\nextern crate alloc;\n\n// The elementary types \nuse alloc::string::String;\nuse alloc::vec::Vec;\nuse alloc::collections::BTreeMap;\nuse crate::alloc::string::ToString;\n\n\n// Casper crates\nuse casper_types::{Key, CLType, Parameter, EntryPoint, EntryPoints, EntryPointType, EntryPointAccess};\n\nuse casper_contract:{\n    contract_api::{runtime, storage},\n    unwrap_or_revert::UnwrapOrRevert,\n};\n\n\n#[no_mangle]\npub extern \"C\" fn call() {\n\n    // Get the value of the runtime argument named \"message\"\n    let value: String = runtime::get_named_arg(\"message\");\n\n    // The value will be written under a URef\n    let value_ref = storage::new_uref(value);\n\n    // Creating the new set of named keys\n    // The keys are a Map of String/casper_types::Key\n    let mut named_keys: BTreeMap<String, Key> = BTreeMap::new();\n\n    // Insert the new value into the named keys\n    named_keys.insert(String::from(\"message\"),value_ref.into()); // use into to wrap the Uref into a casper_types::Key\n    // Create a new vector \n    let mut params = Vec::new();\n    vec.push(Parameter::new(\"message\", CLType::String));\n\n    // Create an Entry Point Object\n    let mut entry_points = EntryPoints::new();\n\n    // Describing the metadata for the entry point\n    entry_points.add_entry_point(EntryPoint::new(\n        \"update_msg\",                   // the name of the entry point\n        vec,                            // the arguments which can be passed into the entry point\n        CLType::Unit,                   // return type of the entry point\n        EntryPointAccess::Public,       // access permissions - public can be accessed always\n        EntryPointType::Contract        // in most cases it will be contract\n    ));\n\n    // The contract is stored in the global state\n    let (stored_contract_hash, _contract_version) = storage::new_contract(\n        entry_points,                                       // entry points\n        Some(named_keys),                                   // named keys \n        Some(\"Hello_world_package_name\".to_string()),       // package name\n        Some(\"Hello_world_access_uref\".to_string())         // access uref\n    );\n\n    // To access the contract hash from the accounts named keys\n    runtime::put_key(\"hello_world_contract\", stored_contract_hash.into());\n\n}\n```\n\n----------------------------------------\n\nTITLE: Installing Contract with Multiple Authorization Keys in Rust\nDESCRIPTION: Deploy code that installs a contract using multiple authorization keys (DEFAULT_ACCOUNT_ADDR and account_addr_1). This demonstrates how to meet a higher deploy threshold with multiple signers.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/docs/resources/advanced/list-auth-keys-tutorial.md#2025-04-22_snippet_9\n\nLANGUAGE: rust\nCODE:\n```\nlet session_code = PathBuf::from(CONTRACT_WASM);\n\nlet deploy_item = DeployItemBuilder::new()\n    .with_empty_payment_bytes(runtime_args! {ARG_AMOUNT => *DEFAULT_PAYMENT})\n    .with_authorization_keys(&[*DEFAULT_ACCOUNT_ADDR, account_addr_1])\n    .with_address(*DEFAULT_ACCOUNT_ADDR)\n    .with_session_code(session_code, session_args)\n    .build();\n\nlet execute_request = ExecuteRequestBuilder::from_deploy_item(deploy_item).build();\nbuilder.exec(execute_request).commit().expect_success();\n```\n\n----------------------------------------\n\nTITLE: Example Auction Info Response (JSON)\nDESCRIPTION: This snippet shows an example JSON response structure returned by the `casper-client get-auction-info` command. It details the current bids (including public key, staked amount, delegation rate), the validator sets for future eras (`era_validators` containing `era_id` and `validator_weights`), the current block height, and the state root hash. This data is used to determine if a specific public key's bid was successful.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/docs/operators/becoming-a-validator/bonding.md#2025-04-22_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\n{\n\"jsonrpc\": \"2.0\",\n\"result\": {\n \"bids\": [\n   {\n     \"bid\": {\n       \"bonding_purse\": \"uref-488a0bbc3c3729f5696965da7a3aeee83805392944e36157909da273255fdb85-007\",\n       \"delegation_rate\": 0,\n       \"delegators\": [],\n       \"release_era\": null,\n       \"reward\": \"93328432442428418861229954179737\",\n       \"staked_amount\": \"10000000000000000\"\n     },\n     \"public_key\": \"013f774a58f4d40bd9b6cce7e306e53646913860ef2a111d00f0fe7794010c4012\"\n   },\n   {\n     \"bid\": {\n       \"bonding_purse\": \"uref-14e128b099b0c3680100520226e6999b322989586cc22db0630db5ec1329f0a7-007\",\n       \"delegation_rate\": 10,\n       \"delegators\": [],\n       \"release_era\": null,\n       \"reward\": \"0\",\n       \"staked_amount\": \"9000000000000000\"\n     },\n     \"public_key\": \"01405133e73ef2946fe3a2d76a4c75d305a04ad6b969f3c4a8a0d27235eb260f87\"\n   },\n   {\n     \"bid\": {\n       \"bonding_purse\": \"uref-6c0bf8cee1c0749dd9766376910867a84b2e826eaf6c118fcb0224c7d8d229dd-007\",\n       \"delegation_rate\": 10,\n       \"delegators\": [],\n       \"release_era\": null,\n       \"reward\": \"266185120443441810685787\",\n       \"staked_amount\": \"100000000\"\n     },\n     \"public_key\": \"01524a5f3567d7b5ea17ca518c9d0320fb4a75a28a5eab58d06c755c388f20a19f\"\n   },\n   {\n     \"bid\": {\n       \"bonding_purse\": \"uref-3880b3daf95f962f57e6a4b1589564abf7deef58a1fb0753d1108316bba7b3d7-007\",\n       \"delegation_rate\": 10,\n       \"delegators\": [],\n       \"release_era\": null,\n       \"reward\": \"0\",\n       \"staked_amount\": \"9000000000000000\"\n     },\n     \"public_key\": \"01a6901408eda702a653805f50060bfe00d5e962747ee7133df64bd7bab50b4643\"\n   },\n   {\n     \"bid\": {\n       \"bonding_purse\": \"uref-5a777c9cd53456b49eecf25dcc13e12ddff4106175a69f8e24a7c9a4c135df0d-007\",\n       \"delegation_rate\": 0,\n       \"delegators\": [],\n       \"release_era\": null,\n       \"reward\": \"93328432442428418861229954179737\",\n       \"staked_amount\": \"10000000000000000\"\n     },\n     \"public_key\": \"01d62fc9b894218bfbe8eebcc4a28a1fc4cb3a5c6120bb0027207ba8214439929e\"\n   }\n ],\n \"block_height\": 318,\n \"era_validators\": [\n   {\n     \"era_id\": 20,\n     \"validator_weights\": [\n       {\n         \"public_key\": \"013f774a58f4d40bd9b6cce7e306e53646913860ef2a111d00f0fe7794010c4012\",\n         \"weight\": \"10000000000000000\"\n       },\n       {\n         \"public_key\": \"01405133e73ef2946fe3a2d76a4c75d305a04ad6b969f3c4a8a0d27235eb260f87\",\n         \"weight\": \"9000000000000000\"\n       },\n       {\n         \"public_key\": \"01524a5f3567d7b5ea17ca518c9d0320fb4a75a28a5eab58d06c755c388f20a19f\",\n         \"weight\": \"100000000\"\n       },\n       {\n         \"public_key\": \"01a6901408eda702a653805f50060bfe00d5e962747ee7133df64bd7bab50b4643\",\n         \"weight\": \"9000000000000000\"\n       },\n       {\n         \"public_key\": \"01d62fc9b894218bfbe8eebcc4a28a1fc4cb3a5c6120bb0027207ba8214439929e\",\n         \"weight\": \"10000000000000000\"\n       }\n     ]\n   },\n   {\n     \"era_id\": 21,\n     \"validator_weights\": [\n       {\n         \"public_key\": \"013f774a58f4d40bd9b6cce7e306e53646913860ef2a111d00f0fe7794010c4012\",\n         \"weight\": \"10000000000000000\"\n       },\n       {\n         \"public_key\": \"01405133e73ef2946fe3a2d76a4c75d305a04ad6b969f3c4a8a0d27235eb260f87\",\n         \"weight\": \"9000000000000000\"\n       },\n       {\n         \"public_key\": \"01524a5f3567d7b5ea17ca518c9d0320fb4a75a28a5eab58d06c755c388f20a19f\",\n         \"weight\": \"100000000\"\n       },\n       {\n         \"public_key\": \"01a6901408eda702a653805f50060bfe00d5e962747ee7133df64bd7bab50b4643\",\n         \"weight\": \"9000000000000000\"\n       },\n       {\n         \"public_key\": \"01d62fc9b894218bfbe8eebcc4a28a1fc4cb3a5c6120bb0027207ba8214439929e\",\n         \"weight\": \"10000000000000000\"\n       }\n     ]\n   },\n   {\n     \"era_id\": 22,\n     \"validator_weights\": [\n       {\n         \"public_key\": \"013f774a58f4d40bd9b6cce7e306e53646913860ef2a111d00f0fe7794010c4012\",\n         \"weight\": \"10000000000000000\"\n       },\n       {\n         \"public_key\": \"01405133e73ef2946fe3a2d76a4c75d305a04ad6b969f3c4a8a0d27235eb260f87\",\n         \"weight\": \"9000000000000000\"\n       },\n       {\n         \"public_key\": \"01524a5f3567d7b5ea17ca518c9d0320fb4a75a28a5eab58d06c755c388f20a19f\",\n         \"weight\": \"100000000\"\n       },\n       {\n         \"public_key\": \"01a6901408eda702a653805f50060bfe00d5e962747ee7133df64bd7bab50b4643\",\n         \"weight\": \"9000000000000000\"\n       },\n       {\n         \"public_key\": \"01d62fc9b894218bfbe8eebcc4a28a1fc4cb3a5c6120bb0027207ba8214439929e\",\n         \"weight\": \"10000000000000000\"\n       }\n     ]\n   },\n   {\n     \"era_id\": 23,\n     \"validator_weights\": [\n       {\n         \"public_key\": \"013f774a58f4d40bd9b6cce7e306e53646913860ef2a111d00f0fe7794010c4012\",\n         \"weight\": \"10000000000000000\"\n       },\n       {\n         \"public_key\": \"01405133e73ef2946fe3a2d76a4c75d305a04ad6b969f3c4a8a0d27235eb260f87\",\n         \"weight\": \"9000000000000000\"\n       },\n       {\n         \"public_key\": \"01524a5f3567d7b5ea17ca518c9d0320fb4a75a28a5eab58d06c755c388f20a19f\",\n         \"weight\": \"100000000\"\n       },\n       {\n         \"public_key\": \"01a6901408eda702a653805f50060bfe00d5e962747ee7133df64bd7bab50b4643\",\n         \"weight\": \"9000000000000000\"\n       },\n       {\n         \"public_key\": \"01d62fc9b894218bfbe8eebcc4a28a1fc4cb3a5c6120bb0027207ba8214439929e\",\n         \"weight\": \"10000000000000000\"\n       }\n     ]\n   }\n ],\n \"state_root_hash\": \"c16ba80ea200d786008f8100ea79f9cfeb8d7d5ee8b133eda5a50dcf1c7131e8\"\n},\n\"id\": -3624528661787095850\n}\n```\n\n----------------------------------------\n\nTITLE: Processing Casper State Transform Results - JSON\nDESCRIPTION: This JSON snippet demonstrates outcomes of various Casper Network state transformations resulting from deploy and transfer operations. It covers different actions including balance updates using WriteCLValue, balance incrementation via AddUInt512, the creation and recording of transfer objects, and deploy metadata registration. Each entry shows a key (e.g., account balance, deploy or transfer object), the transformation performed (such as Identity where no change occurred), and relevant data payloads. Prerequisites include understanding Casper Network's state model and key naming conventions. Inputs are state change descriptors, outputs are modified storage states; limitations include network-specific context and structure that may differ between protocol versions.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/docs/developers/cli/transfers/direct-token-transfer.md#2025-04-22_snippet_8\n\nLANGUAGE: JSON\nCODE:\n```\n[\n                {\n                  \"key\": \"hash-010c3fe81b7b862e50c77ef9a958a05bfa98444f26f96f23d37a13c96244cfb7\",\n                  \"transform\": \"Identity\"\n                },\n                {\n                  \"key\": \"balance-11e6fc5354f61a004df98482376c45964b8b1557e8f2f13fb5f3adab5faa8be1\",\n                  \"transform\": \"Identity\"\n                },\n                {\n                  \"key\": \"balance-8294864177c2c1ec887a11dae095e487b5256ce6bd2a1f2740d0e4f28bd3251c\",\n                  \"transform\": \"Identity\"\n                },\n                {\n                  \"key\": \"balance-11e6fc5354f61a004df98482376c45964b8b1557e8f2f13fb5f3adab5faa8be1\",\n                  \"transform\": {\n                    \"WriteCLValue\": {\n                      \"cl_type\": \"U512\",\n                      \"bytes\": \"06622a383c0201\",\n                      \"parsed\": \"1109111876194\"\n                    }\n                  }\n                },\n                {\n                  \"key\": \"balance-8294864177c2c1ec887a11dae095e487b5256ce6bd2a1f2740d0e4f28bd3251c\",\n                  \"transform\": {\n                    \"AddUInt512\": \"5000000000\"\n                  }\n                },\n                {\n                  \"key\": \"transfer-0de7250864e67aa76626a844dcc931e615284a13a110df3f97cec9e3e97af405\",\n                  \"transform\": {\n                    \"WriteTransfer\": {\n                      \"deploy_hash\": \"1f17a0bdeaaf71abd03492c854cdf97f746432751721ce555e95b9cefe641e3c\",\n                      \"from\": \"account-hash-e70dbca48c2d31bc2d754e51860ceaa8a1a49dc627b20320b0ecee1b6d9ce655\",\n                      \"to\": \"account-hash-1ed5a1c39bea93c105f2d22c965a84b205b36734a377d05dbb103b6bfaa595a7\",\n                      \"source\": \"uref-11e6fc5354f61a004df98482376c45964b8b1557e8f2f13fb5f3adab5faa8be1-007\",\n                      \"target\": \"uref-8294864177c2c1ec887a11dae095e487b5256ce6bd2a1f2740d0e4f28bd3251c-004\",\n                      \"amount\": \"5000000000\",\n                      \"gas\": \"0\",\n                      \"id\": 11102023\n                    }\n                  }\n                },\n                {\n                  \"key\": \"deploy-1f17a0bdeaaf71abd03492c854cdf97f746432751721ce555e95b9cefe641e3c\",\n                  \"transform\": {\n                    \"WriteDeployInfo\": {\n                      \"deploy_hash\": \"1f17a0bdeaaf71abd03492c854cdf97f746432751721ce555e95b9cefe641e3c\",\n                      \"transfers\": [\n                        \"transfer-0de7250864e67aa76626a844dcc931e615284a13a110df3f97cec9e3e97af405\"\n                      ],\n                      \"from\": \"account-hash-e70dbca48c2d31bc2d754e51860ceaa8a1a49dc627b20320b0ecee1b6d9ce655\",\n                      \"source\": \"uref-11e6fc5354f61a004df98482376c45964b8b1557e8f2f13fb5f3adab5faa8be1-007\",\n                      \"gas\": \"100000000\"\n                    }\n                  }\n                },\n                {\n                  \"key\": \"hash-8cf5e4acf51f54eb59291599187838dc3bc234089c46fc6ca8ad17e762ae4401\",\n                  \"transform\": \"Identity\"\n                },\n                {\n                  \"key\": \"hash-8cf5e4acf51f54eb59291599187838dc3bc234089c46fc6ca8ad17e762ae4401\",\n                  \"transform\": \"Identity\"\n                },\n                {\n                  \"key\": \"hash-624dbe2395b9d9503fbee82162f1714ebff6b639f96d2084d26d944c354ec4c5\",\n                  \"transform\": \"Identity\"\n                },\n                {\n                  \"key\": \"hash-8cf5e4acf51f54eb59291599187838dc3bc234089c46fc6ca8ad17e762ae4401\",\n                  \"transform\": \"Identity\"\n                },\n                {\n                  \"key\": \"balance-98d945f5324f865243b7c02c0417ab6eac361c5c56602fd42ced834a1ba201b6\",\n                  \"transform\": \"Identity\"\n                },\n                {\n                  \"key\": \"hash-8cf5e4acf51f54eb59291599187838dc3bc234089c46fc6ca8ad17e762ae4401\",\n                  \"transform\": \"Identity\"\n                },\n                {\n                  \"key\": \"hash-010c3fe81b7b862e50c77ef9a958a05bfa98444f26f96f23d37a13c96244cfb7\",\n                  \"transform\": \"Identity\"\n                },\n                {\n                  \"key\": \"hash-9824d60dc3a5c44a20b9fd260a412437933835b52fc683d8ae36e4ec2114843e\",\n                  \"transform\": \"Identity\"\n                },\n                {\n                  \"key\": \"hash-010c3fe81b7b862e50c77ef9a958a05bfa98444f26f96f23d37a13c96244cfb7\",\n                  \"transform\": \"Identity\"\n                },\n                {\n                  \"key\": \"balance-98d945f5324f865243b7c02c0417ab6eac361c5c56602fd42ced834a1ba201b6\",\n                  \"transform\": \"Identity\"\n                },\n                {\n                  \"key\": \"balance-da632bfba17f4a7882581de2a37219be71628600ccd0df83f1d42465bd018537\",\n                  \"transform\": \"Identity\"\n                },\n                {\n                  \"key\": \"balance-98d945f5324f865243b7c02c0417ab6eac361c5c56602fd42ced834a1ba201b6\",\n                  \"transform\": {\n                    \"WriteCLValue\": {\n                      \"cl_type\": \"U512\",\n                      \"bytes\": \"00\",\n                      \"parsed\": \"0\"\n                    }\n                  }\n                },\n                {\n                  \"key\": \"balance-da632bfba17f4a7882581de2a37219be71628600ccd0df83f1d42465bd018537\",\n                  \"transform\": {\n                    \"AddUInt512\": \"100000000\"\n                  }\n                }\n              ]\n```\n\n----------------------------------------\n\nTITLE: Retrieving Balance Information in Casper Network - JSON\nDESCRIPTION: This snippet demonstrates the JSON schema and example response for the 'state_get_balance' method in the Casper blockchain network. It provides the API version, balance value, and Merkle proof of the balance request. The expected parameters include 'state_root_hash' and 'purse_uref', both required to fetch the balance accurately.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/condor/jsonrpc-comp/rpc-2.0/schema.json.md#2025-04-22_snippet_23\n\nLANGUAGE: JSON\nCODE:\n```\n{\n  \"name\": \"state_get_balance_example\",\n  \"params\": [\n    {\n      \"name\": \"state_root_hash\",\n      \"value\": \"0808080808080808080808080808080808080808080808080808080808080808\"\n    },\n    {\n      \"name\": \"purse_uref\",\n      \"value\": \"uref-09480c3248ef76b603d386f3f4f8a5f87f597d4eaffd475433f861af187ab5db-007\"\n    }\n  ],\n  \"result\": {\n    \"name\": \"state_get_balance_example_result\",\n    \"value\": {\n      \"api_version\": \"2.0.0\",\n      \"balance_value\": \"123456\",\n      \"merkle_proof\": \"01000000006ef2e0949ac76e55812421f755abe129b6244fe7168b77f47a72536147614625016ef2e0949ac76e55812421f755abe129b6244fe7168b77f47a72536147614625000000003529cde5c621f857f75f3810611eb4af3f998caaa9d4a3413cf799f99c67db0307010000006ef2e0949ac76e55812421f755abe129b6244fe7168b77f47a7253614761462501010102000000006e06000000000074769d28aac597a36a03a932d4b43e4f10bf0403ee5c41dd035102553f5773631200b9e173e8f05361b681513c14e25e3138639eb03232581db7557c9e8dbbc83ce94500226a9a7fe4f2b7b88d5103a4fc7400f02bf89c860c9ccdd56951a2afe9be0e0267006d820fb5676eb2960e15722f7725f3f8f41030078f8b2e44bf0dc03f71b176d6e800dc5ae9805068c5be6da1a90b2528ee85db0609cc0fb4bd60bbd559f497a98b67f500e1e3e846592f4918234647fca39830b7e1e6ad6f5b7a99b39af823d82ba1873d000003000000010186ff500f287e9b53f823ae1582b1fa429dfede28015125fd233a31ca04d5012002015cc42669a55467a1fdf49750772bfc1aed59b9b085558eb81510e9b015a7c83b0301e3cf4a34b1db6bfa58808b686cb8fe21ebe0c1bcbcee522649d2b135fe510fe3\"\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing UpdateMessage Component in React using casper-js-sdk\nDESCRIPTION: This React component uses 'casper-js-sdk' and 'axios' to create an interface for updating a message on the Casper blockchain. It defines an input field and a button to trigger a function that calls the smart contract's \"update_message\" entrypoint. Required libraries include 'casper-js-sdk', 'axios', and 'react'.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/versioned_docs/version-1.5.X/developers/dapps/template-frontend.md#2025-04-22_snippet_7\n\nLANGUAGE: jsx\nCODE:\n```\nimport { useState } from 'react';\nimport { Contracts, CasperClient, RuntimeArgs, CLValueBuilder, CLPublicKey, DeployUtil } from \"casper-js-sdk\";\nimport axios from \"axios\";\nimport { getProvider } from \"./casper-wallet\";\n\nconst provider = getProvider();\n\nconst UpdateMessage = (props) => {\n    const [message, setMessage] = useState(\"\");\n\n    return (\n        <>\n            <input id=\"message\" type=\"text\" value={message} onChange={(e) => {setMessage(e.target.value)}} />\n            <button onClick={ () => updateMessage(props, message) }>Update Message</button>\n        </>\n    );\n}\n\nexport default UpdateMessage;\n```\n\n----------------------------------------\n\nTITLE: Querying Global State with query-global-state Command\nDESCRIPTION: Command structure for querying a contract's global state using the state root hash and contract address hash. Returns basic contract information like package_hash and main_purse.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/versioned_docs/version-2.0.0/developers/cli/querying-global-state.md#2025-04-22_snippet_11\n\nLANGUAGE: bash\nCODE:\n```\ncasper-client query-global-state \\\n--node-address [NODE_SERVER_ADDRESS] \\\n--state-root-hash [STATE_ROOT_HASH] \\\n--key [CONTRACT_ADDRESS_HASH]\n```\n\n----------------------------------------\n\nTITLE: Defining EraEndV1 Schema in JSON\nDESCRIPTION: JSON schema for EraEndV1 which contains information about the end of an era, including validator reports and weights for the next era.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/condor/jsonrpc-comp/rpc-2.0/schema/components.json.md#2025-04-22_snippet_66\n\nLANGUAGE: json\nCODE:\n```\n\"EraEndV1\": {\n    \"description\": \"Information related to the end of an era, and validator weights for the following era.\",\n    \"type\": \"object\",\n    \"required\": [\n        \"era_report\",\n        \"next_era_validator_weights\"\n    ],\n    \"properties\": {\n        \"era_report\": {\n            \"description\": \"Equivocation, reward and validator inactivity information.\",\n            \"allOf\": [\n                {\n                    \"$ref\": \"#/components/schemas/EraReport_for_PublicKey\"\n                }\n            ]\n        },\n        \"next_era_validator_weights\": {\n            \"description\": \"The validators for the upcoming era and their respective weights.\",\n            \"allOf\": [\n                {\n                    \"$ref\": \"#/components/schemas/Array_of_ValidatorWeight\"\n                }\n            ]\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Withdrawing Bid via System Auction Contract Entry Point (Bash)\nDESCRIPTION: This command demonstrates how to withdraw a validator's bid by directly calling the `withdraw_bid` entry point of the system auction contract using `casper-client`. This method requires specifying the session hash of the auction contract, the public key of the validator, and the amount to withdraw. It avoids the need to build or deploy custom Wasm.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/versioned_docs/version-1.5.X/operators/becoming-a-validator/unbonding.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nsudo -u casper casper-client put-deploy \\\n--node-address <HOST:PORT> \\\n--secret-key <PATH> \\\n--chain-name <CHAIN_NAME> \\\n--payment-amount <PAYMENT_AMOUNT_IN_MOTES> \\\n--session-hash <SESSION_HASH> \\\n--session-entry-point withdraw_bid \\\n--session-arg=\"public_key:public_key='<PUBLIC_KEY_HEX>'\" \\\n--session-arg=\"amount:u512='<AMOUNT_TO_WITHDRAW>'\"\n```\n\n----------------------------------------\n\nTITLE: Querying State Root Hash and Account Details in Casper - Bash\nDESCRIPTION: Retrieves the latest state root hash and queries specific account details on the Casper network using the CLI client. This step helps confirm associated keys and thresholds after deploy execution. Requires node address, state root hash, and targeted account hash as inputs; responses include up-to-date on-chain account state.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/versioned_docs/version-1.5.X/resources/advanced/multi-sig/multi-sig-workflow.md#2025-04-22_snippet_20\n\nLANGUAGE: bash\nCODE:\n```\ncasper-client get-state-root-hash --node-address https://node.testnet.casper.network/\n\ncasper-client query-global-state \\\n--node-address https://node.testnet.casper.network/ \\\n--state-root-hash <STATE_ROOT_HASH> \\\n--key account-hash-<PRIMARY_ACCOUNT_HASH>\n```\n\n----------------------------------------\n\nTITLE: JSON-RPC Response for Account Query\nDESCRIPTION: Sample JSON-RPC response showing details of a queried account, including account hash, named keys, main purse, associated keys, and action thresholds.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/docs/resources/beginner/querying-network.md#2025-04-22_snippet_5\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"jsonrpc\": \"2.0\",\n  \"id\": 4,\n  \"result\": {\n    \"api_version\": \"1.5.2\",\n    \"block_header\": null,\n    \"stored_value\": {\n      \"Account\": {\n        \"account_hash\": \"account-hash-1ed5a1c39bea93c105f2d22c965a84b205b36734a377d05dbb103b6bfaa595a7\",\n        \"named_keys\": [\n          {\n            \"name\": \"counter\",\n            \"key\": \"hash-4bf23564c8849a0a3193781f0a9df7d27c4bce2cc585d6e9bb161a7a1ce5cd7e\"\n          },\n          {\n            \"name\": \"counter_access_uref\",\n            \"key\": \"uref-76b6c7e7a87b752d34a8c3ccdc070dbfd1940960016c537525b2ab9076b61a3e-007\"\n          },\n          {\n            \"name\": \"counter_package_name\",\n            \"key\": \"hash-e4b2060f098fa763f9a68c5c98a2d98a4fa80815ec0fd6b93ac9efbb0c18f19b\"\n          },\n          {\n            \"name\": \"my-key-name\",\n            \"key\": \"uref-09376d4202d32457ceefa4d9cdf1db6ab2324981ade06ba6f495cdf14124c3b9-007\"\n          },\n          {\n            \"name\": \"version\",\n            \"key\": \"uref-244a270207dd13ef5ff190f75d84efe4ab54bd5787be0bbb175c3fb154b7f5ed-007\"\n          }\n        ],\n        \"main_purse\": \"uref-8294864177c2c1ec887a11dae095e487b5256ce6bd2a1f2740d0e4f28bd3251c-007\",\n        \"associated_keys\": [\n          {\n            \"account_hash\": \"account-hash-0ea7998b2822afe5b62b08a21d54c941ad791279b089f3f7ede0d72b477eca34\",\n            \"weight\": 1\n          },\n          {\n            \"account_hash\": \"account-hash-1ed5a1c39bea93c105f2d22c965a84b205b36734a377d05dbb103b6bfaa595a7\",\n            \"weight\": 3\n          },\n          {\n            \"account_hash\": \"account-hash-77ea2e433c94c9cb8303942335da458672249d38c1fa5d1d7a7500b862ff52a4\",\n            \"weight\": 1\n          },\n          {\n            \"account_hash\": \"account-hash-d65d053f5017af101b752a9a12ba4c41fe3054b8632998a69193b891eab4caf5\",\n            \"weight\": 1\n          },\n          {\n            \"account_hash\": \"account-hash-e70dbca48c2d31bc2d754e51860ceaa8a1a49dc627b20320b0ecee1b6d9ce655\",\n            \"weight\": 1\n          },\n          {\n            \"account_hash\": \"account-hash-f1802d2dbd83e41f638eb9b046f762e481d56b27d4aa00817fec77fbb21f944a\",\n            \"weight\": 1\n          }\n        ],\n        \"action_thresholds\": {\n          \"deployment\": 2,\n          \"key_management\": 3\n        }\n      }\n    },\n    \"merkle_proof\": \"[32054 hex chars]\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Casper Network API Schema Components in OpenAPI JSON\nDESCRIPTION: This JSON object defines various schemas within the `components` section of an OpenAPI specification for the Casper Network. It details the structure of core elements like `Deploy` (representing a smart contract deployment), `DeployHeader`, `DeployHash`, `PublicKey`, `Timestamp`, `TimeDiff`, and `ExecutableDeployItem` (specifying different ways to execute code, e.g., via WASM bytes or stored contracts). Each schema specifies properties, types, required fields, descriptions, and references to other schemas, providing a formal definition for API data structures.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/condor/jsonrpc-comp/rpc-1.5/schema/components.json.md#2025-04-22_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"components\": {\n        \"schemas\": {\n            \"Deploy\": {\n                \"description\": \"A deploy; an item containing a smart contract along with the requester's signature(s).\",\n                \"type\": \"object\",\n                \"required\": [\n                    \"approvals\",\n                    \"hash\",\n                    \"header\",\n                    \"payment\",\n                    \"session\"\n                ],\n                \"properties\": {\n                    \"hash\": {\n                        \"$ref\": \"#/components/schemas/DeployHash\"\n                    },\n                    \"header\": {\n                        \"$ref\": \"#/components/schemas/DeployHeader\"\n                    },\n                    \"payment\": {\n                        \"$ref\": \"#/components/schemas/ExecutableDeployItem\"\n                    },\n                    \"session\": {\n                        \"$ref\": \"#/components/schemas/ExecutableDeployItem\"\n                    },\n                    \"approvals\": {\n                        \"type\": \"array\",\n                        \"items\": {\n                            \"$ref\": \"#/components/schemas/Approval\"\n                        },\n                        \"uniqueItems\": true\n                    }\n                },\n                \"additionalProperties\": false\n            },\n            \"DeployHash\": {\n                \"description\": \"Hex-encoded deploy hash.\",\n                \"allOf\": [\n                    {\n                        \"$ref\": \"#/components/schemas/Digest\"\n                    }\n                ]\n            },\n            \"Digest\": {\n                \"description\": \"Hex-encoded hash digest.\",\n                \"type\": \"string\"\n            },\n            \"DeployHeader\": {\n                \"description\": \"The header portion of a [`Deploy`].\",\n                \"type\": \"object\",\n                \"required\": [\n                    \"account\",\n                    \"body_hash\",\n                    \"chain_name\",\n                    \"dependencies\",\n                    \"gas_price\",\n                    \"timestamp\",\n                    \"ttl\"\n                ],\n                \"properties\": {\n                    \"account\": {\n                        \"$ref\": \"#/components/schemas/PublicKey\"\n                    },\n                    \"timestamp\": {\n                        \"$ref\": \"#/components/schemas/Timestamp\"\n                    },\n                    \"ttl\": {\n                        \"$ref\": \"#/components/schemas/TimeDiff\"\n                    },\n                    \"gas_price\": {\n                        \"type\": \"integer\",\n                        \"format\": \"uint64\",\n                        \"minimum\": 0.0\n                    },\n                    \"body_hash\": {\n                        \"$ref\": \"#/components/schemas/Digest\"\n                    },\n                    \"dependencies\": {\n                        \"type\": \"array\",\n                        \"items\": {\n                            \"$ref\": \"#/components/schemas/DeployHash\"\n                        }\n                    },\n                    \"chain_name\": {\n                        \"type\": \"string\"\n                    }\n                },\n                \"additionalProperties\": false\n            },\n            \"PublicKey\": {\n                \"description\": \"Hex-encoded cryptographic public key, including the algorithm tag prefix.\",\n                \"examples\": [\n                    {\n                        \"name\": \"SystemPublicKey\",\n                        \"description\": \"A pseudo public key, used for example when the system proposes an immediate switch block after a network upgrade rather than a specific validator. Its hex-encoded value is always '00', as is the corresponding pseudo signature's\",\n                        \"value\": \"00\"\n                    },\n                    {\n                        \"name\": \"Ed25519PublicKey\",\n                        \"description\": \"An Ed25519 public key. Its hex-encoded value begins '01' and is followed by 64 characters\",\n                        \"value\": \"018a88e3dd7409f195fd52db2d3cba5d72ca6709bf1d94121bf3748801b40f6f5c\"\n                    },\n                    {\n                        \"name\": \"Secp256k1PublicKey\",\n                        \"description\": \"A secp256k1 public key. Its hex-encoded value begins '02' and is followed by 66 characters\",\n                        \"value\": \"0203408e9526316fd1f8def480dd45b2cc72ffd732771c9ceb5d92ffa4051e6ee084\"\n                    }\n                ],\n                \"type\": \"string\"\n            },\n            \"Timestamp\": {\n                \"description\": \"Timestamp formatted as per RFC 3339\",\n                \"type\": \"integer\",\n                \"format\": \"uint64\",\n                \"minimum\": 0.0\n            },\n            \"TimeDiff\": {\n                \"description\": \"Human-readable duration.\",\n                \"type\": \"integer\",\n                \"format\": \"uint64\",\n                \"minimum\": 0.0\n            },\n            \"ExecutableDeployItem\": {\n                \"description\": \"Represents possible variants of an executable deploy.\",\n                \"anyOf\": [\n                    {\n                        \"description\": \"Executable specified as raw bytes that represent WASM code and an instance of [`RuntimeArgs`].\",\n                        \"type\": \"object\",\n                        \"required\": [\n                            \"ModuleBytes\"\n                        ],\n                        \"properties\": {\n                            \"ModuleBytes\": {\n                                \"type\": \"object\",\n                                \"required\": [\n                                    \"args\",\n                                    \"module_bytes\"\n                                ],\n                                \"properties\": {\n                                    \"module_bytes\": {\n                                        \"description\": \"Hex-encoded raw Wasm bytes.\",\n                                        \"type\": \"string\"\n                                    },\n                                    \"args\": {\n                                        \"description\": \"Runtime arguments.\",\n                                        \"allOf\": [\n                                            {\n                                                \"$ref\": \"#/components/schemas/RuntimeArgs\"\n                                            }\n                                        ]\n                                    }\n                                },\n                                \"additionalProperties\": false\n                            }\n                        },\n                        \"additionalProperties\": false\n                    },\n                    {\n                        \"description\": \"Stored contract referenced by its [`ContractHash`], entry point and an instance of [`RuntimeArgs`].\",\n                        \"type\": \"object\",\n                        \"required\": [\n                            \"StoredContractByHash\"\n                        ],\n                        \"properties\": {\n                            \"StoredContractByHash\": {\n                                \"type\": \"object\",\n                                \"required\": [\n                                    \"args\",\n                                    \"entry_point\",\n                                    \"hash\"\n                                ],\n                                \"properties\": {\n                                    \"hash\": {\n                                        \"description\": \"Hex-encoded hash.\",\n                                        \"type\": \"string\"\n                                    },\n                                    \"entry_point\": {\n                                        \"description\": \"Name of an entry point.\",\n                                        \"type\": \"string\"\n                                    },\n                                    \"args\": {\n                                        \"description\": \"Runtime arguments.\",\n                                        \"allOf\": [\n                                            {\n                                                \"$ref\": \"#/components/schemas/RuntimeArgs\"\n                                            }\n                                        ]\n                                    }\n                                },\n                                \"additionalProperties\": false\n                            }\n                        },\n                        \"additionalProperties\": false\n                    },\n                    {\n                        \"description\": \"Stored contract referenced by a named key existing in the signer's account context, entry point and an instance of [`RuntimeArgs`].\",\n                        \"type\": \"object\",\n                        \"required\": [\n                            \"StoredContractByName\"\n                        ],\n                        \"properties\": {\n                            \"StoredContractByName\": {\n                                \"type\": \"object\",\n                                \"required\": [\n                                    \"args\",\n                                    \"entry_point\",\n                                    \"name\"\n                                ],\n                                \"properties\": {\n                                    \"name\": {\n                                        \"description\": \"Named key.\",\n                                        \"type\": \"string\"\n                                    },\n                                    \"entry_point\": {\n                                        \"description\": \"Name of an entry point.\",\n                                        \"type\": \"string\"\n                                    },\n                                    \"args\": {\n                                        \"description\": \"Runtime arguments.\",\n                                        \"allOf\": [\n                                            {\n                                                \"$ref\": \"#/components/schemas/RuntimeArgs\"\n                                            }\n                                        ]\n                                    }\n                                }\n                            }\n                        }\n                    }\n                ]\n            }\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Querying Global State for Transfer Details\nDESCRIPTION: Command to query the global state for transfer details using the transfer hash and state root hash.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/versioned_docs/version-1.5.X/developers/cli/transfers/verify-transfer.md#2025-04-22_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\ncasper-client query-global-state \\\n--id [ID] \\\n--node-address [NODE_SERVER_ADDRESS]  \\\n--state-root-hash [STATE_ROOT_HASH] \\\n--key [TRANSFER_HASH]\n```\n\n----------------------------------------\n\nTITLE: Retrieving Transaction Information from Casper Network using JSON\nDESCRIPTION: This JSON snippet demonstrates how to retrieve transaction information using API version 2.0.0 from the Casper network. It details key transaction attributes such as hash, header, and body alongside the execution information when available. The snippet is dependent on a transaction hash, which is mandatory to perform the lookup. Optional finalized approvals can modify the returned data.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/condor/jsonrpc-comp/rpc-2.0/schema.json.md#2025-04-22_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n{\"name\": \"info_get_transaction\", \"summary\": \"returns a Transaction from the network\", \"params\": [{\"name\": \"transaction_hash\", \"schema\": {\"description\": \"The transaction hash.\", \"$ref\": \"#/components/schemas/TransactionHash\"}, \"required\": true}, {\"name\": \"finalized_approvals\", \"schema\": {\"description\": \"Whether to return the transaction with the finalized approvals substituted. If `false` or omitted, returns the transaction with the approvals that were originally received by the node.\", \"default\": false, \"type\": \"boolean\"}, \"required\": false}], \"result\": {\"name\": \"info_get_transaction_result\", \"schema\": {\"description\": \"Result for \\\"info_get_transaction\\\" RPC response.\", \"type\": \"object\", \"required\": [\"api_version\", \"transaction\"], \"properties\": {\"api_version\": {\"description\": \"The RPC API version.\", \"type\": \"string\"}, \"transaction\": {\"description\": \"The transaction.\", \"$ref\": \"#/components/schemas/Transaction\"}, \"execution_info\": {\"description\": \"Execution info, if available.\", \"anyOf\": [{\"$ref\": \"#/components/schemas/ExecutionInfo\"}, {\"type\": \"null\"}]}}, \"additionalProperties\": false}}, \"examples\": [{\"name\": \"info_get_transaction_example\", \"params\": [{\"name\": \"transaction_hash\", \"value\": {\"Version1\": \"f5582cb81a5abda63ebaa4edb3b05210ecbd63ffb8dd17bfbeb3b867f4014468\"}}, {\"name\": \"finalized_approvals\", \"value\": true}], \"result\": {\"name\": \"info_get_transaction_example_result\", \"value\": {\"api_version\": \"2.0.0\", \"transaction\": {\"Version1\": {\"hash\": \"f5582cb81a5abda63ebaa4edb3b05210ecbd63ffb8dd17bfbeb3b867f4014468\", \"header\": {\"chain_name\": \"casper-example\", \"timestamp\": \"2020-11-17T00:39:24.072Z\", \"ttl\": \"1h\", \"body_hash\": \"aa24833ffbf31d62c8c8c4265349e7c09cd71952fcbce6f7b12daf5e340bf2cc\", \"pricing_mode\": {\"Fixed\": {\"gas_price_tolerance\": 5}}, \"initiator_addr\": {\"PublicKey\": \"01d9bf2148748a85c89da5aad8ee0b0fc2d105fd39d41a4c796536354f0ae2900c\"}}, \"body\": {\"args\": [[\"source\", {\"cl_type\": {\"Option\": \"URef\"}, \"bytes\": \"010a0a0a0a0a0a0a0a0a0a0a0a0a0a0a0a0a0a0a0a0a0a0a0a0a0a0a0a0a0a0a0a07\", \"parsed\": \"uref-0a0a0a0a0a0a0a0a0a0a0a0a0a0a0a0a0a0a0a0a0a0a0a0a0a0a0a0a0a0a0a0a-007\"}}, [\"target\", {\"cl_type\": \"URef\", \"bytes\": \"1b1b1b1b1b1b1b1b1b1b1b1b1b1b1b1b1b1b1b1b1b1b1b1b1b1b1b1b1b1b1b1bbb00\n```\n\n----------------------------------------\n\nTITLE: Submitting a Validator Bid via the System Auction Contract - Casper CLI (Bash)\nDESCRIPTION: This Bash command uses the casper-client CLI to submit a bid (bonding request) to the system auction contract through the put-deploy functionality. It requires setting network node address, chain name, secret key path, payment amount, contract session hash, entrypoint, and validator-specific parameters (public key, bid amount, delegation rate, etc.). This method only needs the network's built-in contract and not custom WASM; thus it is simpler and more cost-effective. All parameters must be set according to network and account context; the response is a deploy hash.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/docs/operators/becoming-a-validator/bonding.md#2025-04-22_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nsudo -u casper casper-client put-deploy \\\n--node-address <HOST:PORT> \\\n--secret-key <PATH> \\\n--chain-name <CHAIN_NAME> \\\n--payment-amount <PAYMENT_AMOUNT_IN_MOTES> \\\n--session-hash <SESSION_HASH> \\\n--session-entry-point add_bid \\\n--session-arg \"public_key:public_key='<PUBLIC_KEY_HEX>'\" \\\n--session-arg \"amount:u512='<BID_AMOUNT>'\" \\\n--session-arg \"delegation_rate:u8='<PERCENT_TO_KEEP_FROM_DELEGATORS>'\"\n--session-arg \"minimum_delegation_amount:u64='<MINIMUM_DELEGATION_AMOUNT>'\"\n--session-arg \"maximum_delegation_amount:u64='<MAXIMUM_DELEGATION_AMOUNT>'\"\n```\n\n----------------------------------------\n\nTITLE: Generating Keys with OpenSSL\nDESCRIPTION: Commands to generate Ed25519 keys using OpenSSL cryptography toolkit on Linux.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/versioned_docs/version-2.0.0/concepts/accounts-and-keys.md#2025-04-22_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\nopenssl genpkey -algorithm ed25519 -out secret_key.pem\n\n{ echo -n 01; openssl pkey -outform DER -pubout -in \"secret_key.pem\" | tail -c +13 | openssl base64 | openssl base64 -d | hexdump -ve '/1 \"%02x\" ' | tr -d \"/n\"; } > public_key_hex\n```\n\n----------------------------------------\n\nTITLE: Generating Administrator Accounts with global-state-update-gen in Casper Network\nDESCRIPTION: Command to generate new administrator accounts in a private Casper network by creating the necessary entries in global_state.toml. This requires specifying the data directory, state root hash, and administrator public key with balance.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/docs/operators/setup-network/create-private.md#2025-04-22_snippet_8\n\nLANGUAGE: sh\nCODE:\n```\nglobal-state-update-gen \\\n  generate-admins --data-dir $DATA_DIR/global_state \\\n  --state-hash $STATE_ROOT_HASH \\\n  --admin $PUBLIC_KEY_HEX, $BALANCE\n```\n\n----------------------------------------\n\nTITLE: Defining PricingMode Schema in JSON for Casper Network API\nDESCRIPTION: JSON schema definition for the PricingMode component, which specifies different pricing models for transactions. It includes Classic, Fixed, and Reserved modes with their respective properties.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/condor/jsonrpc-comp/rpc-2.0/schema/components.json.md#2025-04-22_snippet_15\n\nLANGUAGE: json\nCODE:\n```\n\"PricingMode\": {\n    \"description\": \"Pricing mode of a Transaction.\",\n    \"oneOf\": [\n        {\n            \"description\": \"The original payment model, where the creator of the transaction specifies how much they will pay, at what gas price.\",\n            \"type\": \"object\",\n            \"required\": [\n                \"Classic\"\n            ],\n            \"properties\": {\n                \"Classic\": {\n                    \"type\": \"object\",\n                    \"required\": [\n                        \"gas_price_tolerance\",\n                        \"payment_amount\",\n                        \"standard_payment\"\n                    ],\n                    \"properties\": {\n                        \"payment_amount\": {\n                            \"description\": \"User-specified payment amount.\",\n                            \"type\": \"integer\",\n                            \"format\": \"uint64\",\n                            \"minimum\": 0.0\n                        },\n                        \"gas_price_tolerance\": {\n                            \"description\": \"User-specified gas_price tolerance (minimum 1). This is interpreted to mean \\\"do not include this transaction in a block if the current gas price is greater than this number\\\"\",\n                            \"type\": \"integer\",\n                            \"format\": \"uint8\",\n                            \"minimum\": 0.0\n                        },\n                        \"standard_payment\": {\n                            \"description\": \"Standard payment.\",\n                            \"type\": \"boolean\"\n                        }\n                    },\n                    \"additionalProperties\": false\n                }\n            },\n            \"additionalProperties\": false\n        },\n        {\n            \"description\": \"The cost of the transaction is determined by the cost table, per the transaction kind.\",\n            \"type\": \"object\",\n            \"required\": [\n                \"Fixed\"\n            ],\n            \"properties\": {\n                \"Fixed\": {\n                    \"type\": \"object\",\n                    \"required\": [\n                        \"gas_price_tolerance\"\n                    ],\n                    \"properties\": {\n                        \"gas_price_tolerance\": {\n                            \"description\": \"User-specified gas_price tolerance (minimum 1). This is interpreted to mean \\\"do not include this transaction in a block if the current gas price is greater than this number\\\"\",\n                            \"type\": \"integer\",\n                            \"format\": \"uint8\",\n                            \"minimum\": 0.0\n                        }\n                    },\n                    \"additionalProperties\": false\n                }\n            },\n            \"additionalProperties\": false\n        },\n        {\n            \"description\": \"The payment for this transaction was previously reserved, as proven by the receipt hash (this is for future use, not currently implemented).\",\n            \"type\": \"object\",\n            \"required\": [\n                \"Reserved\"\n            ],\n            \"properties\": {\n                \"Reserved\": {\n                    \"type\": \"object\",\n                    \"required\": [\n                        \"receipt\"\n                    ],\n                    \"properties\": {\n                        \"receipt\": {\n                            \"description\": \"Pre-paid receipt.\",\n                            \"allOf\": [\n                                {\n                                    \"$ref\": \"#/components/schemas/Digest\"\n                                }\n                            ]\n                        }\n                    },\n                    \"additionalProperties\": false\n                }\n            },\n            \"additionalProperties\": false\n        }\n    ]\n}\n```\n\n----------------------------------------\n\nTITLE: Fetching State Root Hash Example - Casper-Client CLI - Rust\nDESCRIPTION: This example shows the casper-client command for retrieving the state root hash, replacing the placeholder node address with a concrete HTTP endpoint. It demonstrates practical syntax for real usage; [IP] must be the node server's public IP address and port 7777 is commonly used.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/versioned_docs/version-2.0.0/resources/beginner/counter-testnet/commands.md#2025-04-22_snippet_1\n\nLANGUAGE: rust\nCODE:\n```\ncasper-client get-state-root-hash --node-address http://[IP]:7777\n```\n\n----------------------------------------\n\nTITLE: Wallet Connection Handler\nDESCRIPTION: JavaScript function to handle wallet connection and public key retrieval.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/docs/developers/dapps/template-frontend.md#2025-04-22_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\nconst connectToWallet = (props) => {\n    provider.requestConnection().then(connected => {\n        if (!connected) {\n            alert(\"Couldn't connect to wallet\");\n        } else {\n            provider.getActivePublicKey().then(publicKey => {\n                props.setPublicKey(publicKey);\n            }).catch(error => {\n                alert(error.message);\n            });\n        }\n    })\n    .catch(error => {\n        alert(error.message);\n    });\n}\n```\n\n----------------------------------------\n\nTITLE: Defining TransactionV1 Header Schema - JSON\nDESCRIPTION: This JSON Schema snippet defines the structure and validation rules for the header segment of a TransactionV1 object. It requires six properties, some of which reference other predefined schemas via $ref, enforcing modularity and reusability. Required fields include body_hash, chain_name, initiator_addr, pricing_mode, timestamp, and ttl, each ensuring the object conforms to the expected structure. The schema prohibits any unspecified properties, enforcing strict validation. Inputs must include valid strings and referenced subcomponents; outputs of validation will be success or schema violations. Prerequisites include the referenced schema definitions for Timestamp, TimeDiff, Digest, PricingMode, and InitiatorAddr.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/condor/jsonrpc-comp/rpc-2.0/schema/TransactionV1Header.json.md#2025-04-22_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"description\": \"The header portion of a TransactionV1.\",\n    \"type\": \"object\",\n    \"required\": [\n        \"body_hash\",\n        \"chain_name\",\n        \"initiator_addr\",\n        \"pricing_mode\",\n        \"timestamp\",\n        \"ttl\"\n    ],\n    \"properties\": {\n        \"chain_name\": {\n            \"type\": \"string\"\n        },\n        \"timestamp\": {\n            \"$ref\": \"#/components/schemas/Timestamp\"\n        },\n        \"ttl\": {\n            \"$ref\": \"#/components/schemas/TimeDiff\"\n        },\n        \"body_hash\": {\n            \"$ref\": \"#/components/schemas/Digest\"\n        },\n        \"pricing_mode\": {\n            \"$ref\": \"#/components/schemas/PricingMode\"\n        },\n        \"initiator_addr\": {\n            \"$ref\": \"#/components/schemas/InitiatorAddr\"\n        }\n    },\n    \"additionalProperties\": false\n} \n```\n\n----------------------------------------\n\nTITLE: Creating a Locked Contract in Casper\nDESCRIPTION: This code snippet demonstrates how to create a locked contract in Casper that cannot be upgraded. This is useful for scenarios requiring high security where contract immutability is important.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/docs/developers/writing-onchain-code/simple-contract.md#2025-04-22_snippet_16\n\nLANGUAGE: rust\nCODE:\n```\nlet (stored_contract_hash, _) =\n        storage::new_locked_contract(counter_entry_points, Some(counter_named_keys), None, None);\n```\n\n----------------------------------------\n\nTITLE: Compiling Casper Contract to WebAssembly using Cargo\nDESCRIPTION: This Bash snippet displays commands to compile a Rust contract targeting Casper blockchain into WebAssembly using `cargo build` with specific options. The process involves setting the target to `wasm32-unknown-unknown` and optimizing the release build. It assumes the `cargo` tool is installed and configured.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/versioned_docs/version-2.0.0/resources/advanced/cross-contract.md#2025-04-22_snippet_15\n\nLANGUAGE: Bash\nCODE:\n```\ncd contract && cargo build --release --target wasm32-unknown-unknown\n   Compiling contract v0.1.0 (/Users/karolmarter/Desktop/Rust_Projects/cross-contract-2/contract)\n    Finished release [optimized] target(s) in 0.69s\nwasm-strip contract/target/wasm32-unknown-unknown/release/contract.wasm 2>/dev/null | true\n```\n\n----------------------------------------\n\nTITLE: Defining Canonical Deploy, DeployHeader, and Related Schemas - JSON\nDESCRIPTION: Declares JSON schemas for core objects used in Casper, including Deploy, DeployHash, Digest, DeployHeader, and PublicKey. These schemas establish required fields, supported data encodings, and appropriate types for client- or server-side validation and generation of deploy objects. Dependencies among components are managed by referencing shared definitions. Inputs/outputs must conform to the specified types; limitations include strict property requirements and mutually exclusive fields as per the oneOf/anyOf clauses for executable variants.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/condor/jsonrpc-comp/rpc-2.0/schema.json.md#2025-04-22_snippet_28\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"Deploy\": {\n    \"description\": \"A signed smart contract.\",\n    \"type\": \"object\",\n    \"required\": [\n      \"approvals\",\n      \"hash\",\n      \"header\",\n      \"payment\",\n      \"session\"\n    ],\n    \"properties\": {\n      \"hash\": { \"$ref\": \"#/components/schemas/DeployHash\" },\n      \"header\": { \"$ref\": \"#/components/schemas/DeployHeader\" },\n      \"payment\": { \"$ref\": \"#/components/schemas/ExecutableDeployItem\" },\n      \"session\": { \"$ref\": \"#/components/schemas/ExecutableDeployItem\" },\n      \"approvals\": {\n        \"type\": \"array\",\n        \"items\": { \"$ref\": \"#/components/schemas/Approval\" },\n        \"uniqueItems\": true\n      }\n    },\n    \"additionalProperties\": false\n  },\n  \"DeployHash\": {\n    \"description\": \"Hex-encoded deploy hash.\",\n    \"allOf\": [ { \"$ref\": \"#/components/schemas/Digest\" } ]\n  },\n  \"Digest\": {\n    \"description\": \"Hex-encoded hash digest.\",\n    \"type\": \"string\"\n  },\n  \"DeployHeader\": {\n    \"description\": \"The header portion of a [`Deploy`].\",\n    \"type\": \"object\",\n    \"required\": [\n      \"account\",\n      \"body_hash\",\n      \"chain_name\",\n      \"dependencies\",\n      \"gas_price\",\n      \"timestamp\",\n      \"ttl\"\n    ],\n    \"properties\": {\n      \"account\": { \"$ref\": \"#/components/schemas/PublicKey\" },\n      \"timestamp\": { \"$ref\": \"#/components/schemas/Timestamp\" },\n      \"ttl\": { \"$ref\": \"#/components/schemas/TimeDiff\" },\n      \"gas_price\": {\n        \"type\": \"integer\",\n        \"format\": \"uint64\",\n        \"minimum\": 0.0\n      },\n      \"body_hash\": { \"$ref\": \"#/components/schemas/Digest\" },\n      \"dependencies\": {\n        \"type\": \"array\",\n        \"items\": { \"$ref\": \"#/components/schemas/DeployHash\" }\n      },\n      \"chain_name\": { \"type\": \"string\" }\n    },\n    \"additionalProperties\": false\n  },\n  \"PublicKey\": {\n    \"description\": \"Hex-encoded cryptographic public key, including the algorithm tag prefix.\",\n    \"examples\": [\n      { \"name\": \"SystemPublicKey\", \"description\": \"A pseudo public key, used for example when the system proposes an immediate switch block after a network upgrade rather than a specific validator. Its hex-encoded value is always '00', as is the corresponding pseudo signature's\", \"value\": \"00\" },\n      { \"name\": \"Ed25519PublicKey\", \"description\": \"An Ed25519 public key. Its hex-encoded value begins '01' and is followed by 64 characters\", \"value\": \"018a88e3dd7409f195fd52db2d3cba5d72ca6709bf1d94121bf3748801b40f6f5c\" },\n      { \"name\": \"Secp256k1PublicKey\", \"description\": \"A secp256k1 public key. Its hex-encoded value begins '02' and is followed by 66 characters\", \"value\": \"0203408e9526316fd1f8def480dd45b2cc72ffd732771c9ceb5d92ffa4051e6ee084\" }\n    ],\n    \"type\": \"string\"\n  },\n  \"Timestamp\": {\n    \"description\": \"Timestamp formatted as per RFC 3339\",\n    \"type\": \"string\"\n  },\n  \"TimeDiff\": {\n    \"description\": \"Human-readable duration.\",\n    \"type\": \"string\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Sending a Transfer using Casper Go SDK (Go)\nDESCRIPTION: Illustrates constructing and sending a token transfer deploy over the Casper network using the Go SDK. The example walks through public key generation, amount creation, deployment items setup (session and payment), header configuration, and network submission. Relies on the \\\\\"github.com/make-software/casper-go-sdk/casper\\\\\" and \\\\\"github.com/make-software/casper-go-sdk/types/clvalue\\\\\" packages. Inputs include the sender's public key, transfer amount, contract Wasm, and chain parameters. Outputs the resulting deploy hash to the log.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/versioned_docs/version-1.5.X/developers/dapps/sdk/go-sdk.md#2025-04-22_snippet_2\n\nLANGUAGE: go\nCODE:\n```\npackage main\\n\\nimport (\\n    \\\"context\\\"\\n    \\\"encoding/hex\\\"\\n    \\\"log\\\"\\n    \\\"math/big\\\"\\n    \\\"net/http\\\"\\n\\n    \\\"github.com/make-software/casper-go-sdk/casper\\\"\\n    \\\"github.com/make-software/casper-go-sdk/types/clvalue\\\"\\n)\\n\\nfunc main() {\\n    accountPublicKey, err := casper.NewPublicKey(\\\"012488699f9a31e36ecf002675cd7186b48e6a735d10ec1b308587ca719937752c\\\")\\n    if err != nil { return }\\n    amount := big.NewInt(100000000)\\n    session := casper.ExecutableDeployItem{\\n        ModuleBytes: &casper.ModuleBytes{\\n            ModuleBytes: hex.EncodeToString([]byte(\\\"<Contract WASM>\\\")),\\n            Args: (&casper.Args{}).\\n                AddArgument(\\\"target\\\", clvalue.NewCLByteArray(accountPublicKey.AccountHash().Bytes())).\\n                AddArgument(\\\"amount\\\", *clvalue.NewCLUInt512(amount)),\\n        },\\n    }\\n\\n    payment := casper.StandardPayment(amount)\\n\\n    deployHeader := casper.DefaultHeader()\\n    deployHeader.Account = accountPublicKey\\n    deployHeader.ChainName = \\\"casper-test\\\"\\n\\n    newDeploy, err := casper.MakeDeploy(deployHeader, payment, session)\\n\\n    handler := casper.NewRPCHandler(\\\"https://<Node Address>:7777/rpc\\\", http.DefaultClient)\\n    client := casper.NewRPCClient(handler)\\n    result, err := client.PutDeploy(context.Background(), *newDeploy)\\n\\n    log.Println(result.DeployHash)\\n}\n```\n\n----------------------------------------\n\nTITLE: Querying Casper Counter Contract State\nDESCRIPTION: Command to query the state of the counter contract on the Casper network, specifically the 'count' value.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/versioned_docs/version-2.0.0/resources/quick-start.md#2025-04-22_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\ncasper-client query-global-state \\\n--node-address [NODE_ADDRESS] \\\n--state-root-hash [STATE_ROOT_HASH] \\\n--key [ACCOUNT_HASH] \\\n-q \"counter/count\"\n```\n\n----------------------------------------\n\nTITLE: Building Sample Wasm Files\nDESCRIPTION: Commands to prepare the environment, build and test the provided session code by updating Rust, setting the Wasm target, and running tests.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/versioned_docs/version-2.0.0/resources/advanced/multi-sig/multi-sig-workflow.md#2025-04-22_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nrustup update\nmake prepare\nmake test\n```\n\n----------------------------------------\n\nTITLE: Importing Casper Test Support and Types in Rust\nDESCRIPTION: This snippet lists all necessary 'use' statements to import core test builder types and contract types needed for Casper smart contract testing. It includes builders for test requests, in-memory chain simulation, and constants for default account addresses, as well as type helpers used in contract interaction. These imports should appear at the start of your test module to provide test access to all key helpers and types.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/versioned_docs/version-1.5.X/developers/writing-onchain-code/testing-contracts.md#2025-04-22_snippet_3\n\nLANGUAGE: rust\nCODE:\n```\n    // Outlining aspects of the Casper test support crate to include.\n    use casper_engine_test_support::{\n        ExecuteRequestBuilder, InMemoryWasmTestBuilder, DEFAULT_ACCOUNT_ADDR,\n        PRODUCTION_RUN_GENESIS_REQUEST,\n    };\n    // Custom Casper types that will be used within this test.\n    use casper_types::{runtime_args, ContractHash, RuntimeArgs};\n```\n\n----------------------------------------\n\nTITLE: Adding Associated Key with Casper Client CLI - Bash\nDESCRIPTION: Illustrates how to add a new associated key and assign a weight using the Casper command-line client. This step uses the `add_account.wasm` contract, specifying session arguments for the key and its weight, and requires the Casper CLI tool and appropriate secret key. Inputs include network addresses, session arguments, and keys; output is a deploy sent to the network.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/versioned_docs/version-1.5.X/resources/advanced/multi-sig/multi-sig-workflow.md#2025-04-22_snippet_18\n\nLANGUAGE: bash\nCODE:\n```\ncasper-client put-deploy --node-address https://node.testnet.casper.network \\\n--chain-name \"casper-test\" \\\n--payment-amount 500000000 \\\n--secret-key $PATH/secret_key.pem \\\n--session-path target/wasm32-unknown-unknown/release/add_account.wasm \\\n--session-arg \"new_key:key='account-hash-1fed34baa6807a7868bb18f91b161d99ebf21763810fe4c92e39775d10bbf1f8\" \\\n--session-arg \"weight:u8='1'\"\n```\n\n----------------------------------------\n\nTITLE: Serializing StoredValue Enum\nDESCRIPTION: Defines `StoredValue`, representing a value stored in Casper's global state. It can be one of three variants: `CLValue`, `Account`, or `Contract`. Serialization starts with a single byte tag (0 for CLValue, 1 for Account, 2 for Contract) followed by the serialization of the specific variant. Serialization rules for `Contract` and `Account` are defined based on specific tuple structures of other CLTypes.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/versioned_docs/version-2.0.0/concepts/serialization/types.md#2025-04-22_snippet_47\n\nLANGUAGE: text\nCODE:\n```\nA value stored in the global state is a `StoredValue`. A `StoredValue` is one of three possible variants:\n\n-   A `CLValue`\n-   A contract\n-   An account\n\nWe discuss `CLValue` and contract in more detail below. Details about accounts can be found in [accounts-head](../design/casper-design.md#accounts-head).\n\nEach `StoredValue` is serialized when written to the global state. The serialization format consists of a single byte tag, indicating which variant of `StoredValue` it is, followed by the serialization of that variant. The tag for each variant is as follows:\n\n-   `CLValue` is `0`\n-   `Account` is `1`\n-   `Contract` is `2`\n\nThe details of `CLType` serialization are in the following section. Using the serialization format for `CLValue` as a basis, we can succinctly write the serialization rules for contracts and accounts:\n\n-   contracts serialize in the same way as data with `CLType` equal to `Tuple3(List(U8), Map(String, Key), Tuple3(U32, U32, U32))`;\n-   accounts serialize in the same way as data with `CLType` equal to `Tuple5(ByteArray(U8, 32), Map(String, Key), URef, Map(ByteArray(U8, 32), U8), Tuple2(U8, U8))`.\n\nNote: `Tuple5` is not a presently supported `CLType`. However, it is clear how to generalize the rules for `Tuple1`, `Tuple2`, `Tuple3` to any size tuple.\n```\n\n----------------------------------------\n\nTITLE: Casper Network Contract Transform Operations\nDESCRIPTION: JSON example showing various contract state transformations on the Casper blockchain. Includes dictionary writes, URef transforms, WriteCLValue operations with different types (U256, U512), Identity transforms, and balance operations.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/versioned_docs/version-2.0.0/resources/tokens/cep18/full-tutorial.md#2025-04-22_snippet_18\n\nLANGUAGE: json\nCODE:\n```\n\"key\": \"dictionary-04932d42aff9367579770E219ce1C4Da83D1Fd42Fa0FaA4Ae98AE07914c4c1E4\",\n                  \"transform\": {\n                    \"WriteCLValue\": {\n                      \"bytes\": \"[186 hex chars]\",\n                      \"cl_type\": \"Any\",\n                      \"parsed\": null\n                    }\n                  }\n```\n\nLANGUAGE: json\nCODE:\n```\n\"key\": \"uref-66Bf928E1F6A28b174A48Fca4c002Bc8b77Dd851d7EFFb9Dc1A450cB211E484a-000\",\n                  \"transform\": {\n                    \"WriteCLValue\": {\n                      \"bytes\": \"04400cAa3b\",\n                      \"cl_type\": \"U256\",\n                      \"parsed\": \"1001000000\"\n                    }\n                  }\n```\n\nLANGUAGE: json\nCODE:\n```\n\"key\": \"uref-66Bf928E1F6A28b174A48Fca4c002Bc8b77Dd851d7EFFb9Dc1A450cB211E484a-000\",\n                  \"transform\": \"Identity\"\n```\n\nLANGUAGE: json\nCODE:\n```\n\"key\": \"deploy-F9D4C649Fa78Da...................................................\",\n                  \"transform\": {\n                    \"WriteDeployInfo\": {\n                      \"deploy_hash\": \"F9D4C649Fa78Da07Ec6EFcFC615ff1Bd3B68347750FA0C81B6a74C3f9582d7E4\",\n                      \"from\": \"account-hash-7f4bf39A311a...................................................\",\n                      \"gas\": \"45040980830\",\n                      \"source\": \"uref-C051e7EC16e08Def8b556F9...................................................\",\n                      \"transfers\": []\n                    }\n                  }\n```\n\nLANGUAGE: json\nCODE:\n```\n\"key\": \"balance-98d945f5324F865243B7c02C0417AB6eaC361c5c56602FD42ced834a1Ba201B6\",\n                  \"transform\": {\n                    \"WriteCLValue\": {\n                      \"bytes\": \"00\",\n                      \"cl_type\": \"U512\",\n                      \"parsed\": \"0\"\n                    }\n                  }\n```\n\nLANGUAGE: json\nCODE:\n```\n\"key\": \"balance-c69d353A5a3b6433368A8FC2F6b308ce4Ec10291782f61BA15C96F260f91FFC0\",\n                  \"transform\": {\n                    \"AddUInt512\": \"100000000000\"\n                  }\n```\n\n----------------------------------------\n\nTITLE: Defining Transaction Schema in JSON for Casper Network API\nDESCRIPTION: JSON schema definition for the Transaction component, which can be either a Deploy or a Version1 transaction. It includes references to other schema components like Deploy and TransactionV1.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/condor/jsonrpc-comp/rpc-2.0/schema/components.json.md#2025-04-22_snippet_13\n\nLANGUAGE: json\nCODE:\n```\n\"Transaction\": {\n    \"description\": \"A versioned wrapper for a transaction or deploy.\",\n    \"oneOf\": [\n        {\n            \"description\": \"A deploy.\",\n            \"type\": \"object\",\n            \"required\": [\n                \"Deploy\"\n            ],\n            \"properties\": {\n                \"Deploy\": {\n                    \"$ref\": \"#/components/schemas/Deploy\"\n                }\n            },\n            \"additionalProperties\": false\n        },\n        {\n            \"description\": \"A version 1 transaction.\",\n            \"type\": \"object\",\n            \"required\": [\n                \"Version1\"\n            ],\n            \"properties\": {\n                \"Version1\": {\n                    \"$ref\": \"#/components/schemas/TransactionV1\"\n                }\n            },\n            \"additionalProperties\": false\n        }\n    ]\n}\n```\n\n----------------------------------------\n\nTITLE: Defining UpdateMessage React Component (JSX)\nDESCRIPTION: Defines the `UpdateMessage` React functional component. It uses the `useState` hook to manage the input field's state. It renders an input field for the user to type a message and a button that triggers the `updateMessage` function when clicked, passing the component props and the current message state.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/docs/developers/dapps/template-frontend.md#2025-04-22_snippet_9\n\nLANGUAGE: jsx\nCODE:\n```\nimport { useState } from 'react';\nimport { Contracts, CasperClient, RuntimeArgs, CLValueBuilder, CLPublicKey, DeployUtil } from \"casper-js-sdk\";\nimport axios from \"axios\";\nimport { getProvider } from \"./casper-wallet\";\n\nconst provider = getProvider();\n\nconst UpdateMessage = (props) => {\n    const [message, setMessage] = useState(\"\");\n\n    return (\n        <>\n            <input id=\"message\" type=\"text\" value={message} onChange={(e) => {setMessage(e.target.value)}} />\n            <button onClick={ () => updateMessage(props, message) }>Update Message</button>\n        </>\n    );\n}\n\nexport default UpdateMessage;\n```\n\n----------------------------------------\n\nTITLE: Retrieving Entity Information Result in Casper Network (JSON)\nDESCRIPTION: Example JSON response for the state_get_entity_result method, which returns detailed information about an addressable entity including its type, associated keys, action thresholds, and merkle proof.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/versioned_docs/version-2.0.0/developers/json-rpc/json-rpc-informational.md#2025-04-22_snippet_25\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"id\": 1,\n  \"jsonrpc\": \"2.0\",\n  \"result\": {\n    \"name\": \"state_get_entity_result\",\n    \"value\": {\n      \"api_version\": \"2.0.0\",\n      \"entity\": {\n        \"AddressableEntity\": {\n          \"entity\": {\n            \"protocol_version\": \"2.0.0\",\n            \"entity_kind\": {\n              \"Account\": \"account-hash-e94daaff79c2ab8d9c31d9c3058d7d0a0dd31204a5638dc1451fa67b2e3fb88c\"\n            },\n            \"package_hash\": \"package-0000000000000000000000000000000000000000000000000000000000000000\",\n            \"byte_code_hash\": \"byte-code-0000000000000000000000000000000000000000000000000000000000000000\",\n            \"main_purse\": \"uref-09480c3248ef76b603d386f3f4f8a5f87f597d4eaffd475433f861af187ab5db-007\",\n            \"associated_keys\": [\n              {\n                \"account_hash\": \"account-hash-e94daaff79c2ab8d9c31d9c3058d7d0a0dd31204a5638dc1451fa67b2e3fb88c\",\n                \"weight\": 1\n              }\n            ],\n            \"action_thresholds\": {\n              \"deployment\": 1,\n              \"upgrade_management\": 1,\n              \"key_management\": 1\n            },\n            \"message_topics\": [\n              {\n                \"topic_name\": \"topic\",\n                \"topic_name_hash\": \"0000000000000000000000000000000000000000000000000000000000000000\"\n              }\n            ]\n          },\n          \"named_keys\": [\n            {\n              \"name\": \"key\",\n              \"key\": \"hash-0000000000000000000000000000000000000000000000000000000000000000\"\n            }\n          ],\n          \"entry_points\": [\n            {\n              \"V1CasperVm\": {\n                \"name\": \"entry_point\",\n                \"args\": [],\n                \"ret\": \"Unit\",\n                \"access\": \"Public\",\n                \"entry_point_type\": \"Caller\",\n                \"entry_point_payment\": \"Caller\"\n              }\n            }\n          ]\n        }\n      },\n      \"merkle_proof\": \"01000000006ef2e0949ac76e55812421f755abe129b6244fe7168b77f47a72536147614625016ef2e0949ac76e55812421f755abe129b6244fe7168b77f47a72536147614625000000003529cde5c621f857f75f3810611eb4af3f998caaa9d4a3413cf799f99c67db0307010000006ef2e0949ac76e55812421f755abe129b6244fe7168b77f47a7253614761462501010102000000006e06000000000074769d28aac597a36a03a932d4b43e4f10bf0403ee5c41dd035102553f5773631200b9e173e8f05361b681513c14e25e3138639eb03232581db7557c9e8dbbc83ce94500226a9a7fe4f2b7b88d5103a4fc7400f02bf89c860c9ccdd56951a2afe9be0e0267006d820fb5676eb2960e15722f7725f3f8f41030078f8b2e44bf0dc03f71b176d6e800dc5ae9805068c5be6da1a90b2528ee85db0609cc0fb4bd60bbd559f497a98b67f500e1e3e846592f4918234647fca39830b7e1e6ad6f5b7a99b39af823d82ba1873d000003000000010186ff500f287e9b53f823ae1582b1fa429dfede28015125fd233a31ca04d5012002015cc42669a55467a1fdf49750772bfc1aed59b9b085558eb81510e9b015a7c83b0301e3cf4a34b1db6bfa58808b686cb8fe21ebe0c1bcbcee522649d2b135fe510fe3\"\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Withdrawing Validator Bid via Casper Client CLI (JSON)\nDESCRIPTION: This CLI command template enables validators to withdraw their auction bid from the Casper network using the 'withdraw-bid' transaction type. Required dependencies include the Casper client and access to a valid secret key or initiator address file. Key parameters specify the bidder's public key, withdrawal amount in motes, gas price tolerance, and signing credentials; the command outputs the result of the transaction submission and will fail if any required fields or the transaction context are invalid.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/versioned_docs/version-2.0.0/concepts/transactions.md#2025-04-22_snippet_0\n\nLANGUAGE: json\nCODE:\n```\ncasper-client put-txn withdraw-bid\n/// The public key of the bidder.\n  --public-key <FORMATTED STRING or PATH>\n/// The amount in motes to be withdrawn.\n  --transaction-amount <INTEGER>\n/// The maximum gas price that the user is willing to pay for this transaction.\n  --gas-price-tolerance <INTEGER>\n/// The path to the local secret key file, or the [`initiator address`](../developers/json-rpc/types_chain.md#initiatoraddr) sending the transaction.\n  <--secret-key <PATH>|--initiator-address <HEX STRING>>\n\n```\n\n----------------------------------------\n\nTITLE: Calling Contract Entry Point via Named Key using Casper-Client\nDESCRIPTION: Command to execute an entry point (function) within an existing smart contract already deployed on the Casper network. Instead of a Wasm path, it uses `--session-name` to identify the contract and `--session-entry-point` to specify the function to call. Requires node address, chain name, secret key, and payment amount.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/docs/resources/beginner/counter-testnet/commands.md#2025-04-22_snippet_4\n\nLANGUAGE: rust\nCODE:\n```\ncasper-client put-deploy \\\n    --node-address [NODE_SERVER_ADDRESS] \\\n    --chain-name casper-test \\\n    --secret-key [KEY_PATH]/secret_key.pem \\\n    --payment-amount [PAYMENT_AMOUNT_IN_MOTES] \\\n    --session-name \"counter\" \\\n    --session-entry-point \"counter_inc\"\n```\n\n----------------------------------------\n\nTITLE: Example Transaction Result Retrieval using JSON-RPC\nDESCRIPTION: This JSON snippet is a response from the `info_get_transaction_result` method. It returns details about the transaction, including execution results and associated block hash. It allows users to track the execution status of a transaction.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/versioned_docs/version-2.0.0/developers/json-rpc/json-rpc-informational.md#2025-04-22_snippet_13\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"id\": 1,\n  \"jsonrpc\": \"2.0\",\n  \"result\": {\n    \"name\": \"info_get_transaction_result\",\n    \"value\": {\n      \"api_version\": \"2.0.0\",\n      \"transaction\": {\n        \"Version1\": {\n          \"hash\": \"f5582cb81a5abda63ebaa4edb3b05210ecbd63ffb8dd17bfbeb3b867f4014468\",\n          \"header\": {\n            \"chain_name\": \"casper-example\",\n            \"timestamp\": \"2020-11-17T00:39:24.072Z\",\n            \"ttl\": \"1h\",\n            \"body_hash\": \"aa24833ffbf31d62c8c8c4265349e7c09cd71952fcbce6f7b12daf5e340bf2cc\",\n            \"pricing_mode\": {\n              \"Fixed\": {\n                \"gas_price_tolerance\": 5\n              }\n            },\n            \"initiator_addr\": {\n              \"PublicKey\": \"01d9bf2148748a85c89da5aad8ee0b0fc2d105fd39d41a4c796536354f0ae2900c\"\n            }\n          },\n          \"body\": {\n            \"args\": [\n              [\n                \"source\",\n                {\n                  \"cl_type\": {\n                    \"Option\": \"URef\"\n                  },\n                  \"bytes\": \"010a0a0a0a0a0a0a0a0a0a0a0a0a0a0a0a0a0a0a0a0a0a0a0a0a0a0a0a0a0a0a0a07\",\n                  \"parsed\": \"uref-0a0a0a0a0a0a0a0a0a0a0a0a0a0a0a0a0a0a0a0a0a0a0a0a0a0a0a0a0a0a0a0a-007\"\n                }\n              ],\n              [\n                \"target\",\n                {\n                  \"cl_type\": \"URef\",\n                  \"bytes\": \"1b1b1b1b1b1b1b1b1b1b1b1b1b1b1b1b1b1b1b1b1b1b1b1b1b1b1b1b1b1b1b1b00\",\n                  \"parsed\": \"uref-1b1b1b1b1b1b1b1b1b1b1b1b1b1b1b1b1b1b1b1b1b1b1b1b1b1b1b1b1b1b1b1b-000\"\n                }\n              ],\n              [\n                \"amount\",\n                {\n                  \"cl_type\": \"U512\",\n                  \"bytes\": \"0500ac23fc06\",\n                  \"parsed\": \"30000000000\"\n                }\n              ],\n              [\n                \"id\",\n                {\n                  \"cl_type\": {\n                    \"Option\": \"U64\"\n                  },\n                  \"bytes\": \"01e703000000000000\",\n                  \"parsed\": 999\n                }\n              ]\n            ],\n            \"target\": \"Native\",\n            \"entry_point\": \"Transfer\",\n            \"transaction_category\": 0,\n            \"scheduling\": \"Standard\"\n          },\n          \"approvals\": [\n            {\n              \"signer\": \"01d9bf2148748a85c89da5aad8ee0b0fc2d105fd39d41a4c796536354f0ae2900c\",\n              \"signature\": \"0137d3f468d8f8a6e63f4110d79be29b8c8428e9cd858a92049660e7851ae16a299640d1fc1c930ab6cb424f1a6eec0b194df74bede14f4af1b5133106f1280d0b\"\n            }\n          ]\n        }\n      },\n      \"execution_info\": {\n        \"block_hash\": \"0744fcb72af43c5cc372039bc5a8bfee48808a9ce414acc0d6338a628c20eb42\",\n        \"block_height\": 10,\n        \"execution_result\": {\n          \"Version2\": {\n            \"initiator\": {\n              \"PublicKey\": \"01d9bf2148748a85c89da5aad8ee0b0fc2d105fd39d41a4c796536354f0ae2900c\"\n            },\n            \"error_message\": null,\n            \"limit\": \"123456\",\n            \"consumed\": \"100000\",\n            \"cost\": \"246912\",\n            \"payment\": [\n              {\n                \"source\": \"uref-0101010101010101010101010101010101010101010101010101010101010101-001\"\n              }\n            ],\n            \"transfers\": [\n              {\n                \"Version2\": {\n                  \"transaction_hash\": {\n                    \"Version1\": \"0101010101010101010101010101010101010101010101010101010101010101\"\n                  },\n                  \"from\": {\n                    \"AccountHash\": \"account-hash-0202020202020202020202020202020202020202020202020202020202020202\"\n                  },\n                  \"to\": \"account-hash-0303030303030303030303030303030303030303030303030303030303030303\",\n                  \"source\": \"uref-0a0a0a0a0a0a0a0a0a0a0a0a0a0a0a0a0a0a0a0a0a0a0a0a0a0a0a0a0a0a0a0a-007\",\n                  \"target\": \"uref-1b1b1b1b1b1b1b1b1b1b1b1b1b1b1b1b1b1b1b1b1b1b1b1b1b1b1b1b1b1b1b1b-000\",\n                  \"amount\": \"1000000000000\",\n                  \"gas\": \"2500000000\",\n                  \"id\": 999\n                }\n              }\n            ],\n            \"size_estimate\": 186,\n            \"effects\": [\n              {\n                \"key\": \"account-hash-2c4a11c062a8a337bfc97e27fd66291caeb2c65865dcb5d3ef3759c4c97efecb\",\n                \"kind\": {\n                  \"AddUInt64\": 8\n                }\n              },\n              {\n                \"key\": \"deploy-af684263911154d26fa05be9963171802801a0b6aff8f199b7391eacb8edc9e1\",\n                \"kind\": \"Identity\"\n              }\n            ]\n          }\n        }\n      }\n    }\n  }  \n}\n```\n\n----------------------------------------\n\nTITLE: Defining the Block Synchronizer Status Object Schema in JSON\nDESCRIPTION: This JSON schema defines the structure for an object reporting the block synchronizer status. It includes optional 'historical' and 'forward' properties, each potentially holding a `BlockSyncStatus` object or being null. No additional properties beyond these two are allowed. It depends on the `BlockSyncStatus` schema definition.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/condor/jsonrpc-comp/rpc-2.0/schema/BlockSynchronizerStatus.json.md#2025-04-22_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"description\": \"The status of the block synchronizer.\",\n    \"type\": \"object\",\n    \"properties\": {\n        \"historical\": {\n            \"description\": \"The status of syncing a historical block, if any.\",\n            \"anyOf\": [\n                {\n                    \"$ref\": \"#/components/schemas/BlockSyncStatus\"\n                },\n                {\n                    \"type\": \"null\"\n                }\n            ]\n        },\n        \"forward\": {\n            \"description\": \"The status of syncing a forward block, if any.\",\n            \"anyOf\": [\n                {\n                    \"$ref\": \"#/components/schemas/BlockSyncStatus\"\n                },\n                {\n                    \"type\": \"null\"\n                }\n            ]\n        }\n    },\n    \"additionalProperties\": false\n} \n```\n\n----------------------------------------\n\nTITLE: Using Session Code to Call Contract in Rust\nDESCRIPTION: This snippet illustrates using session code in Rust to call a contract entry point, utilizing the contract hash for transaction execution within the Casper Network.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/docs/developers/writing-onchain-code/testing-contracts.md#2025-04-22_snippet_8\n\nLANGUAGE: rust\nCODE:\n```\n    // Use session code to increment the counter.\n    let session_code_request = ExecuteRequestBuilder::standard(\n        *DEFAULT_ACCOUNT_ADDR,\n        COUNTER_CALL_WASM,\n        runtime_args! {\n            CONTRACT_KEY => contract_v1_hash\n        },\n    )\n    .build();\n\n    builder.exec(session_code_request)\n        .expect_success()\n        .commit();\n```\n\n----------------------------------------\n\nTITLE: Generating Ed25519 Secret Key with OpenSSL\nDESCRIPTION: Command to generate an Ed25519 private key file using OpenSSL without requiring the Casper client. This creates a secret_key.pem file.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/docs/concepts/accounts-and-keys.md#2025-04-22_snippet_9\n\nLANGUAGE: bash\nCODE:\n```\nopenssl genpkey -algorithm ed25519 -out secret_key.pem\n```\n\n----------------------------------------\n\nTITLE: Request for chain_get_era_info_by_switch_block in JSON-RPC\nDESCRIPTION: Example JSON-RPC request for the chain_get_era_info_by_switch_block method that retrieves era information from a specific switch block identified by its hash.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/versioned_docs/version-2.0.0/developers/json-rpc/json-rpc-pos.md#2025-04-22_snippet_4\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"id\": 1,\n  \"jsonrpc\": \"2.0\",\n  \"method\": \"chain_get_era_info_by_switch_block\",\n  \"params\": [\n    {\n      \"name\": \"block_identifier\",\n      \"value\": {\n        \"Hash\": \"0744fcb72af43c5cc372039bc5a8bfee48808a9ce414acc0d6338a628c20eb42\"\n      }\n    }\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Example Source Account Query with Verbose Output\nDESCRIPTION: A concrete example of querying the source account's state to verify its main purse, which should match the source purse in the transfer details.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/versioned_docs/version-2.0.0/developers/cli/transfers/verify-transfer.md#2025-04-22_snippet_9\n\nLANGUAGE: bash\nCODE:\n```\ncasper-client query-global-state -v \\\n--id 4 \\\n--node-address https://node.testnet.casper.network  \\\n--state-root-hash fdb1474d441ec0fcbf2e088f1630dbf98d3bcf7f7a7fe298303797f35b8cb4e1 \\\n--key 0154d828baafa6858b92919c4d78f26747430dcbecb9aa03e8b44077dc6266cabf\n```\n\n----------------------------------------\n\nTITLE: Defining Entry Point: total_supply in Casper Network\nDESCRIPTION: This snippet defines the 'total_supply' entry point for a Casper Network smart contract. It takes no arguments, returns a U256, and has public access with caller-based entry point payment.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/versioned_docs/version-2.0.0/developers/cli/sending-transactions.md#2025-04-22_snippet_12\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"name\": \"total_supply\",\n  \"args\": [],\n  \"ret\": \"U256\",\n  \"access\": \"Public\",\n  \"entry_point_type\": \"Called\",\n  \"entry_point_payment\": \"Caller\"\n}\n```\n\n----------------------------------------\n\nTITLE: Serializing ExecutableDeployItems in Casper Network - Plaintext\nDESCRIPTION: The provided serialization examples demonstrate how different types of ExecutableDeployItems like ModuleBytes and StoredContracts are converted into byte buffers. Each example shows the initial data structure followed by its serialized hexadecimal representation. This understanding is crucial for developers working on low-level deployment and contract execution on the Casper blockchain.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/versioned_docs/version-1.5.X/concepts/serialization-standard.md#2025-04-22_snippet_3\n\nLANGUAGE: plaintext\nCODE:\n```\n\n    ModuleBytes { module_bytes: \"[72 bytes]\", args: 434705a38470ec2b008bb693426f47f330802f3bd63588ee275e943407649d3bab1898897ab0400d7fa09fe02ab7b7e8ea443d28069ca557e206916515a7e21d15e5be5eb46235f5 }\n    0x0048000000420481b0d5a665c8a7678398103d4333c684461a71e9ee2a13f6e859fb6cd419ed5f8876fc6c3e12dce4385acc777edf42dcf8d8d844bf6a704e5b2446750559911a4a328d649ddd48000000434705a38470ec2b008bb693426f47f330802f3bd63588ee275e943407649d3bab1898897ab0400d7fa09fe02ab7b7e8ea443d28069ca557e206916515a7e21d15e5be5eb46235f5\n    StoredContractByHash { hash: c4c411864f7b717c27839e56f6f1ebe5da3f35ec0043f437324325d65a22afa4, entry_point: \"pclphXwfYmCmdITj8hnh\", args: d8b59728274edd2334ea328b3292ed15eaf9134f9a00dce31a87d9050570fb0267a4002c85f3a8384d2502733b2e46f44981df85fed5e4854200bbca313e3bca8d888a84a76a1c5b1b3d236a12401a2999d3cad003c9b9d98c92ab1850 }\n    0x01c4c411864f7b717c27839e56f6f1ebe5da3f35ec0043f437324325d65a22afa41400000070636c7068587766596d436d6449546a38686e685d000000d8b59728274edd2334ea328b3292ed15eaf9134f9a00dce31a87d9050570fb0267a4002c85f3a8384d2502733b2e46f44981df85fed5e4854200bbca313e3bca8d888a84a76a1c5b1b3d236a12401a2999d3cad003c9b9d98c92ab1850\n    StoredContractByName { name: \"U5A74bSZH8abT8HqVaK9\", entry_point: \"gIetSxltnRDvMhWdxTqQ\", args: 07beadc3da884faa17454a }\n    0x0214000000553541373462535a483861625438487156614b39140000006749657453786c746e5244764d685764785471510b00000007beadc3da884faa17454a\n    StoredVersionedContractByHash { hash: b348fdd0d0b3f66468687df93141b5924f6bb957d5893c08b60d5a78d0b9a423, version: None, entry_point: \"PsLz5c7JsqT8BK8ll0kF\", args: 3d0d7f193f70740386cb78b383e2e30c4f976cf3fa834bafbda4ed9dbfeb52ce1777817e8ed8868cfac6462b7cd31028aa5a7a60066db35371a2f8 }\n    0x03b348fdd0d0b3f66468687df93141b5924f6bb957d5893c08b60d5a78d0b9a423001400000050734c7a3563374a73715438424b386c6c306b463b0000003d0d7f193f70740386cb78b383e2e30c4f976cf3fa834bafbda4ed9dbfeb52ce1777817e8ed8868cfac6462b7cd31028aa5a7a60066db35371a2f8\n    StoredVersionedContractByName { name: \"lWJWKdZUEudSakJzw1tn\", version: Some(1632552656), entry_point: \"S1cXRT3E1jyFlWBAIVQ8\", args: 9975e6957ea6b07176c7d8471478fb28df9f02a61689ef58234b1a3cffaebf9f303e3ef60ae0d8 }\n    0x04140000006c574a574b645a5545756453616b4a7a7731746e01d0c64e61140000005331635852543345316a79466c57424149565138270000009975e6957ea6b07176c7d8471478fb28df9f02a61689ef58234b1a3cffaebf9f303e3ef60ae0d8\n```\n\n----------------------------------------\n\nTITLE: Importing Dependencies for Casper Smart Contract\nDESCRIPTION: Required imports and dependencies for a Casper smart contract including external crates, Rust types, Casper platform APIs, and specific Casper types.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/versioned_docs/version-2.0.0/developers/writing-onchain-code/simple-contract.md#2025-04-22_snippet_7\n\nLANGUAGE: rust\nCODE:\n```\nextern crate alloc;\n\nuse alloc::{\n    string::{String, ToString},\n    vec::Vec,\n};\nuse casper_contract::{\n    contract_api::{runtime, storage},\n    unwrap_or_revert::UnwrapOrRevert,\n};\nuse casper_types::{\n    api_error::ApiError,\n    contracts::{EntryPoint, EntryPointAccess, EntryPointType, EntryPoints, NamedKeys},\n    CLType, CLValue, URef,\n};\n```\n\n----------------------------------------\n\nTITLE: Calling Contract by Name - Basic Structure\nDESCRIPTION: Basic command structure for calling a contract using its named key reference.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/versioned_docs/version-2.0.0/developers/cli/calling-contracts.md#2025-04-22_snippet_9\n\nLANGUAGE: rust\nCODE:\n```\ncasper-client put-deploy \\\n    --node-address [NODE_SERVER_ADDRESS] \\\n    --chain-name [CHAIN_NAME] \\\n    --secret-key [KEY_PATH]/secret_key.pem \\\n    --payment-amount [PAYMENT_AMOUNT_IN_MOTES] \\\n    --session-name [NAMED_KEY_FOR_SMART_CONTRACT] \\\n    --session-entry-point [ENTRY_POINT_FUNCTION]\n```\n\n----------------------------------------\n\nTITLE: Query Contract Package State\nDESCRIPTION: Example of querying contract package information to get details about contract versions and access keys.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/versioned_docs/version-1.5.X/developers/cli/installing-contracts.md#2025-04-22_snippet_10\n\nLANGUAGE: bash\nCODE:\n```\ncasper-client query-global-state \\\n  --node-address http://localhost:11101 \\\n  --key hash-76a8c3daa6d6ac799ce9f46d82ac98efb271d2d64b517861ec89a06051ef019e \\\n  --state-root-hash 763e737cf55a298d54bcdfb4ee55526538a1a086128914b9cc25ccbdebbbb966\n```\n\n----------------------------------------\n\nTITLE: Installing Smart Contracts with JavaScript SDK\nDESCRIPTION: Demonstrates how to install a smart contract on the Casper Network using the JavaScript SDK. This snippet loads a compiled WASM contract, sets runtime arguments, and submits the deploy to the network with appropriate gas payment.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/versioned_docs/version-1.5.X/developers/dapps/sdk/client-library-usage.md#2025-04-22_snippet_16\n\nLANGUAGE: javascript\nCODE:\n```\nconst { CasperClient, Contracts, RuntimeArgs, CLValueBuilder } = require(\"casper-js-sdk\")\nconst fs = require(\"fs\")\n\nconst casperClient = new CasperClient(\"http://NODE_ADDRESS:7777/rpc\")\nconst contract = new Contracts.Contract(casperClient)\n\nconst contractWasm = new Uint8Array(fs.readFileSync(\"/path/to/contract.wasm\").buffer)\n\nconst runtimeArguments = RuntimeArgs.fromMap({\n  \"argument\": CLValueBuilder.string(\"Hello world!\")\n})\n\nconst deploy = contract.install(\n  contractWasm,\n  runtimeArguments,\n  \"10000000000\", // Gas payment (10 CSPR)\n  keypair.publicKey,\n  \"casper\", // or \"casper-test\" for Testnet\n  [keypair]\n)\n\nconsole.log(await casperClient.putDeploy(deploy))\n```\n\n----------------------------------------\n\nTITLE: Session Code for Contract Call and Storing Key Intersection in Named Key (Rust)\nDESCRIPTION: This example provides session code where the client contract retrieves the intersection of two sets of authorization keys by invoking a contract entry point. It fetches a key name argument, calls the contract via call_contract (expecting a Vec<AccountHash> return), and stores the intersection result with a new URef in the account's named keys. Dependencies include casper-contract and runtime APIs. The input is a contract_hash and key name argument; the result is persisted on chain.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/docs/resources/advanced/list-auth-keys-tutorial.md#2025-04-22_snippet_5\n\nLANGUAGE: rust\nCODE:\n```\nlet key_name: String = runtime::get_named_arg(ARG_KEY_NAME);\nlet intersection =\n    runtime::call_contract::<Vec<AccountHash>>(contract_hash, ENTRY_POINT, runtime_args! {});\nruntime::put_key(&key_name, storage::new_uref(intersection).into());\n}\n```\n\n----------------------------------------\n\nTITLE: Example JSON RPC Response for Speculative Execution (JSON)\nDESCRIPTION: Illustrates a sample successful JSON RPC response received after submitting a Deploy using the `speculative_exec` endpoint or the `--speculative-exec` CLI flag. The response includes the API version, the hash of the block the execution was based on, and the `execution_result` object. Within `execution_result`, the `Success` status contains the estimated `cost` in motes, alongside effects (omitted for brevity) and transfers.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/docs/developers/dapps/speculative-exec.md#2025-04-22_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"jsonrpc\": \"2.0\",\n  \"id\": -4571113357017152230,\n  \"result\": {\n    \"api_version\": \"1.0.0\",\n    \"block_hash\": \"6ca035b08de092e7f5e8fff771b880c5b4d7463a8f7a9b108888aaad958e5b0f\",\n    \"execution_result\": {\n      \"Success\": {\n        \"effect\": {\n          <Deploy effects removed for conciseness.>\n        },\n        \"transfers\": [],\n        \"cost\": \"87300473670\"\n      }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining GossiperMessage Enum in Rust for Casper Network\nDESCRIPTION: This code snippet defines the GossiperMessage enum used in the Casper Network's gossiping protocol. It includes two variants: Gossip for announcing new items, and GossipResponse for responding to gossip messages with item status.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/versioned_docs/version-1.5.X/concepts/design/networking-protocol.md#2025-04-22_snippet_2\n\nLANGUAGE: rust\nCODE:\n```\nenum GossiperMessage {\n    Gossip(Id),\n    GossipResponse {\n        item_id: Id,\n        is_already_held: bool,\n    },\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Template Entry Points in a Casper Factory Contract (Rust)\nDESCRIPTION: This Rust code shows how to define potential entry points (`INCREASE_ENTRY_POINT`, `DECREASE_ENTRY_POINT`) within the main session logic of a factory contract. They are marked with `EntryPointAccess::Template` and `EntryPointType::Contract`. This declaration makes these entry point definitions available as templates that can be included in the contracts created by the factory's installer entry points.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/docs/developers/writing-onchain-code/factory-pattern.md#2025-04-22_snippet_6\n\nLANGUAGE: rust\nCODE:\n```\nlet entry_point: EntryPoint = EntryPoint::new(\n    INCREASE_ENTRY_POINT.to_string(),\n    Parameters::new(),\n    CLType::Unit,\n    EntryPointAccess::Template,\n    EntryPointType::Contract,\n);\nentry_points.add_entry_point(entry_point);\nlet entry_point: EntryPoint = EntryPoint::new(\n    DECREASE_ENTRY_POINT.to_string(),\n    Parameters::new(),\n    CLType::Unit,\n    EntryPointAccess::Template,\n    EntryPointType::Contract,\n);\n\n```\n\n----------------------------------------\n\nTITLE: Specifying Casper Dependencies in Cargo.toml - Rust\nDESCRIPTION: This code lists minimum required Rust dependencies for session code using Cargo. Dependencies include the casper-contract SDK for interacting with the contract runtime and casper-types for serializable network types. Version numbers must be adapted per project needs. The section provides guidance for editing Cargo.toml, affecting how the code compiles and interacts with the Casper platform.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/docs/developers/writing-onchain-code/writing-session-code.md#2025-04-22_snippet_1\n\nLANGUAGE: rust\nCODE:\n```\ncasper-contract = \"1.4.4\" // Required Casper SDK (adjust version)\ncasper-types = \"1.5.0\"   // Casper types (adjust version)\n```\n\n----------------------------------------\n\nTITLE: Querying a Value Using Account Hash and Nested Named Keys (Bash)\nDESCRIPTION: Retrieves the value of a variable in global state by querying under an account's hash and a path reflecting nested named keys. The -q argument provides a path such as counter/count, allowing access to contract data installed under an account.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/docs/developers/cli/querying-global-state.md#2025-04-22_snippet_22\n\nLANGUAGE: bash\nCODE:\n```\ncasper-client query-global-state \\\n  --node-address http://localhost:11101 \\\n  --state-root-hash [STATE_ROOT_HASH] \\\n  --key [ACCOUNT_HASH] \\\n  -q \"counter/count\"\n```\n\n----------------------------------------\n\nTITLE: Transferring Motes via Casper Client - JSON\nDESCRIPTION: This snippet demonstrates the JSON command for transferring motes using the casper-client tool on the Casper blockchain. Required dependencies include the casper-client software installed locally. Key parameters include --target (the recipient address), --transfer-amount (amount of motes to be transferred), --gas-price-tolerance (maximum gas price), and either --secret-key (path to the initiator's secret key) or --initiator-address (hexadecimal address). The command expects numeric amounts, formatted string addresses, and secure access to the initiator's credentials. Output is a transaction submission to the Casper network; improper formatting or credentials will result in command errors.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/docs/concepts/transactions.md#2025-04-22_snippet_10\n\nLANGUAGE: json\nCODE:\n```\ncasper-client put-txn transfer\n/// The recipient of the transfer.\n  --target <FORMATTED STRING>\n/// The amount in motes to be transferred.\n  --transfer-amount <INTEGER>\n/// The maximum gas price that the user is willing to pay for this transaction.\n  --gas-price-tolerance <INTEGER>\n/// The path to the local secret key file, or the [`initiator address`](../developers/json-rpc/types_chain.md#initiatoraddr) sending the transaction.\n  <--secret-key <PATH>|--initiator-address <HEX STRING>>\n\n```\n\n----------------------------------------\n\nTITLE: Defining Rust Test Package Dependencies and Metadata with Cargo.toml\nDESCRIPTION: This snippet represents an excerpt from the tests package's Cargo.toml file, specifying package metadata and the Rust crate dependencies required to build and run tests for the Casper CEP-18 smart contract. Essential dependencies include Casper types and test support libraries. The configuration is necessary for proper package setup in the Rust build and test system.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/docs/resources/tokens/cep18/tests.md#2025-04-22_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n[package]\nname = \"tests\"\nversion = \"1.0.0\"\n...\n\n[dependencies]\ncasper-types = \"2.0.0\"\ncasper-engine-test-support = \"4.0.0\"\ncasper-execution-engine = \"4.0.0\"\nonce_cell = \"1.16.0\"\n\n[lib]\nname = \"tests\"\n...\n\n```\n\n----------------------------------------\n\nTITLE: Verifying Deploy Status using Casper Client\nDESCRIPTION: This command retrieves the status and details of a specific deploy using its deploy hash. It requires the node address and the deploy hash returned by the `put-deploy` command. This is used to confirm if the contract deployment was successfully processed by the network.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/docs/resources/beginner/counter-testnet/walkthrough.md#2025-04-22_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\ncasper-client get-deploy \\\n    --node-address http://[NODE_IP]:7777 [DEPLOY_HASH]\n```\n\n----------------------------------------\n\nTITLE: Simplified CEP-18 Token Transfer Command\nDESCRIPTION: A simplified version of the token transfer command without comments, providing a cleaner view of the Casper client syntax for transferring CEP-18 tokens between accounts.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/versioned_docs/version-1.5.X/resources/tokens/cep18/transfer.md#2025-04-22_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ncasper-client put-deploy -n http://<node IP>:<PORT> \\\n--chain-name <CHAIN NAME>\\\n--secret-key ~/casper/demo/user_a/secret_key.pem \\\n--session-hash hash-b568f50a64acc8bbe43462ffe243849a88111060b228dacb8f08d42e26985180 \\\n--session-entry-point \"transfer\" \\\n--session-arg \"recipient:key='account-hash-9f81014b9c7406c531ebf0477132283f4eb59143d7903a2fae54358b26cea44b\" \\\n--session-arg \"amount:u256='50'\" \\\n--payment-amount \"10000000000\"\n```\n\n----------------------------------------\n\nTITLE: Test Package Configuration\nDESCRIPTION: Cargo.toml configuration for the CEP-18 test package, specifying dependencies including casper-types, casper-engine-test-support, and casper-execution-engine\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/versioned_docs/version-2.0.0/resources/tokens/cep18/tests.md#2025-04-22_snippet_2\n\nLANGUAGE: toml\nCODE:\n```\n[package]\nname = \"tests\"\nversion = \"1.0.0\"\n...\n\n[dependencies]\ncasper-types = \"2.0.0\"\ncasper-engine-test-support = \"4.0.0\"\ncasper-execution-engine = \"4.0.0\"\nonce_cell = \"1.16.0\"\n\n[lib]\nname = \"tests\"\n...\n```\n\n----------------------------------------\n\nTITLE: JSON-RPC Request for Querying Block Information in Casper Network\nDESCRIPTION: This JSON snippet shows the structure of a JSON-RPC request for querying block information from the Casper Network. It includes the method name and parameters for specifying the block identifier.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/versioned_docs/version-2.0.0/resources/beginner/querying-network.md#2025-04-22_snippet_7\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"id\": 3,\n    \"jsonrpc\": \"2.0\",\n    \"method\": \"chain_get_block\",\n    \"params\": {\n        \"block_identifier\": {\n            \"Hash\": \"7c7e9b0f087bba5ce6fc4bd067b57f69ea3c8109157a3ad7f6d98b8da77d97f9\"\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Deploying Token Contract\nDESCRIPTION: Deploys the token contract to the Casper network with initialization parameters.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/versioned_docs/version-1.5.X/resources/tokens/cep18/full-tutorial.md#2025-04-22_snippet_12\n\nLANGUAGE: bash\nCODE:\n```\ncasper-client put-deploy \\\n--node-address http://95.216.24.237:7777 \\\n--chain-name casper-test \\\n--secret-key \"/home/ubuntu/secret_key.pem\" \\\n--payment-amount 1000000 \\\n--session-path \"<machine-path>/cep18/target/wasm32-unknown-unknown/release/cep18.wasm\"\n--session-arg \"name='Token test', symbol='TEST', decimals:u8=10, total_supply:u256=1000\"\n```\n\n----------------------------------------\n\nTITLE: Loading a Secret Key from File in JavaScript - JavaScript\nDESCRIPTION: Loads an Ed25519 private key from a PEM file using casper-js-sdk, restoring the keypair object for account operations. File path must point to an existing PEM-encoded key file. Replace Ed25519 with Secp256K1 for other keys.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/versioned_docs/version-1.5.X/developers/dapps/sdk/client-library-usage.md#2025-04-22_snippet_10\n\nLANGUAGE: javascript\nCODE:\n```\nconst { Keys } = require(\"casper-js-sdk\");\nconst keypair = Keys.Ed25519.loadKeyPairFromPrivateFile(\"./secret_key.pem\");\n```\n\n----------------------------------------\n\nTITLE: Calling Contracts with Session Arguments in Rust\nDESCRIPTION: This snippet shows the syntax for calling a contract with session arguments using put-deploy. It includes options for specifying session hash, entry point, and multiple session arguments with their types and values.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/docs/developers/cli/calling-contracts.md#2025-04-22_snippet_2\n\nLANGUAGE: rust\nCODE:\n```\ncasper-client put-deploy \\\n    --node-address [NODE_SERVER_ADDRESS] \\\n    --chain-name [CHAIN_NAME] \\\n    --secret-key [KEY_PATH]/secret_key.pem \\\n    --payment-amount [PAYMENT_AMOUNT_IN_MOTES] \\\n    --session-hash [HEX_STRING] \\\n    --session-entry-point [ENTRY_POINT_FUNCTION] \\\n    --session-arg [\"NAME:TYPE='VALUE'\" OR \"NAME:TYPE=null\"]...\n```\n\n----------------------------------------\n\nTITLE: Querying CEP-18 Utility Contract with Casper Client\nDESCRIPTION: Command to query the CEP-18 utility contract using the Casper client. This contract contains entry points that help interact with the main token contract's balance and allowance functionality.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/versioned_docs/version-1.5.X/resources/tokens/cep18/query.md#2025-04-22_snippet_3\n\nLANGUAGE: json\nCODE:\n```\ncasper-client query-global-state -n http://<HOST IP>:<PORT> \\\n// This is the contract hash for the `cep18_test_contract` as found from the installing account's `NamedKeys`\n--key hash-015b99020edb40e7e1e2b31a8e104bc226242f960a2d10dc1d91ae3eb6fa41b6 \\\n--state-root-hash f9f73c3a4da5893b67c4cac94a5695d76cfefff61b050c98a7b19e2b8efd3933\n```\n\n----------------------------------------\n\nTITLE: Sample Response for CEP-18 Contract Query\nDESCRIPTION: This snippet shows an example response from querying the 'name' key in the CEP-18 contract. It includes the stored value, which is a CLValue containing the contract name.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/versioned_docs/version-2.0.0/resources/beginner/cep18.md#2025-04-22_snippet_11\n\nLANGUAGE: bash\nCODE:\n```\n{\n  \"id\": -7058786841478812744,\n  \"jsonrpc\": \"2.0\",\n  \"result\": {\n    \"api_version\": \"1.4.15\",\n    \"block_header\": null,\n    \"merkle_proof\": \"[94526 hex chars]\",\n    \"stored_value\": {\n      \"CLValue\": {\n        \"bytes\": \"0800000043484620436f696e\",\n        \"cl_type\": \"String\",\n        \"parsed\": \"CHF Coin\"\n      }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Adding Default Account Key to User Account in Rust\nDESCRIPTION: Session code that adds the default account's key to an user account's associated keys. This demonstrates how to share authorization keys between accounts to enable contract access.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/docs/resources/advanced/list-auth-keys-tutorial.md#2025-04-22_snippet_11\n\nLANGUAGE: rust\nCODE:\n```\nlet session_code = PathBuf::from(ADD_KEYS_WASM);\nlet session_args = runtime_args! {\n    ASSOCIATED_ACCOUNT => *DEFAULT_ACCOUNT_ADDR\n};\n\nlet add_keys_deploy_item = DeployItemBuilder::new()\n    .with_empty_payment_bytes(runtime_args! {ARG_AMOUNT => *DEFAULT_PAYMENT})\n    .with_authorization_keys(&[account_addr_1])\n    .with_address(account_addr_1)\n    .with_session_code(session_code, session_args)\n    .build();\n```\n\n----------------------------------------\n\nTITLE: Building the Casper Contract Wasm using Make\nDESCRIPTION: These Bash commands use `make` to prepare the build environment and compile the Casper smart contract source code into a Wasm file. The `prepare` target handles setup, and `build-contract` executes the compilation process, typically involving `cargo build --release --target wasm32-unknown-unknown`.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/docs/resources/beginner/upgrade-contract.md#2025-04-22_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nmake prepare\n\nmake build-contract\n```\n\n----------------------------------------\n\nTITLE: Sending a Transaction with put-txn Command in Bash\nDESCRIPTION: This snippet demonstrates how to use the casper-client put-txn command to send a transaction to the Casper network. It includes various parameters such as node-address, chain-name, transaction-path, and others required for the transaction.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/versioned_docs/version-2.0.0/developers/cli/sending-transactions.md#2025-04-22_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ncasper-client put-txn session\\\n    --node-address <HOST:PORT> \\\n    --chain-name casper-net-1 \\\n    --transaction-path <transaction-PATH> \\\n    --session-entry-point <NAME> \\\n    --category <INSTALL-UPGRADE|LARGE|MEDIUM|SMALL> \\\n    --gas-price-tolerance <INTEGER> \\\n    --pricing-mode fixed \\\n    --secret-key <PATH> | --initiator-address <HEX STRING>\n```\n\n----------------------------------------\n\nTITLE: Session Code Entry Point Declaration (Rust)\nDESCRIPTION: This skeleton defines a Casper session code entry point function with the #[no_mangle] attribute, required for the execution engine to locate the entry point in the Wasm binary. The function signature is fixed for Casper session contracts. Dependencies: runtime libraries from casper-contract and Rust with Wasm target.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/versioned_docs/version-1.5.X/developers/writing-onchain-code/writing-session-code.md#2025-04-22_snippet_3\n\nLANGUAGE: rust\nCODE:\n```\n#[no_mangle]\npub extern \"C\" fn call() {\n    // Open the repository for details\n}\n```\n\n----------------------------------------\n\nTITLE: Transaction Entry Point Type Mapping\nDESCRIPTION: Defines the mapping between numeric tags and transaction entry point types, where each entry point is serialized as a u8 value. Represents different types of transaction operations supported by the system.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/docs/concepts/serialization/structures.md#2025-04-22_snippet_4\n\nLANGUAGE: markdown\nCODE:\n```\n| Tag | Entry Point |\n| --- | ----------- |\n| 0 | Custom |\n| 1 | Transfer |\n| 2 | Add_Bid |\n| 3 | Withdraw_Bid |\n| 4 | Delegate |\n| 5 | Undelegate |\n| 6 | Redelegate |\n| 7 | Activate_Bid |\n| 8 | ChangePublicKey |\n| 9 | Call |\n```\n\n----------------------------------------\n\nTITLE: Sending a Deploy with account_put_deploy in JSON-RPC\nDESCRIPTION: Example of an account_put_deploy request to send a deploy for execution. This method is deprecated and account_put_transaction should be used instead. The request includes deploy details such as hash, header, payment, session, and approvals.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/versioned_docs/version-2.0.0/developers/json-rpc/json-rpc-transactional.md#2025-04-22_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"id\": 1,\n  \"jsonrpc\": \"2.0\",\n  \"method\": \"account_put_deploy\",\n  \"params\": [\n    {\n      \"name\": \"deploy\",\n      \"value\": {\n        \"hash\": \"5c9b3b099c1378aa8e4a5f07f59ff1fcdc69a83179427c7e67ae0377d94d93fa\",\n        \"header\": {\n          \"account\": \"01d9bf2148748a85c89da5aad8ee0b0fc2d105fd39d41a4c796536354f0ae2900c\",\n          \"timestamp\": \"2020-11-17T00:39:24.072Z\",\n          \"ttl\": \"1h\",\n          \"gas_price\": 1,\n          \"body_hash\": \"d53cf72d17278fd47d399013ca389c50d589352f1a12593c0b8e01872a641b50\",\n          \"dependencies\": [\n            \"0101010101010101010101010101010101010101010101010101010101010101\"\n          ],\n          \"chain_name\": \"casper-example\"\n        },\n        \"payment\": {\n          \"StoredContractByName\": {\n            \"name\": \"casper-example\",\n            \"entry_point\": \"example-entry-point\",\n            \"args\": [\n              [\n                \"amount\",\n                {\n                  \"cl_type\": \"I32\",\n                  \"bytes\": \"e8030000\",\n                  \"parsed\": 1000\n                }\n              ]\n            ]\n          }\n        },\n        \"session\": {\n          \"Transfer\": {\n            \"args\": [\n              [\n                \"amount\",\n                {\n                  \"cl_type\": \"I32\",\n                  \"bytes\": \"e8030000\",\n                  \"parsed\": 1000\n                }\n              ]\n            ]\n          }\n        },\n        \"approvals\": [\n          {\n            \"signer\": \"01d9bf2148748a85c89da5aad8ee0b0fc2d105fd39d41a4c796536354f0ae2900c\",\n            \"signature\": \"014c1a89f92e29dd74fc648f741137d9caf4edba97c5f9799ce0c9aa6b0c9b58db368c64098603dbecef645774c05dff057cb1f91f2cf390bbacce78aa6f084007\"\n          }\n        ]\n      }\n    }\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Redelegating Tokens Using System Auction Contract\nDESCRIPTION: Command to redelegate tokens using the system auction contract's redelegate entry point. Requires validator public keys, delegation amount, and network details. Fixed cost is 2.5 CSPR with minimum delegation of 500 CSPR.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/docs/developers/cli/redelegate.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ncasper-client put-deploy \\\n--node-address <HOST:PORT> \\\n--secret-key <PATH_TO_DELEGATOR_SECRET_KEY> \\\n--chain-name <CHAIN_NAME> \\\n--payment-amount 2500000000 \\\n--session-hash <SESSION_HASH> \\\n--session-entry-point redelegate \\\n--session-arg \"delegator:public_key='<DELEGATOR_PUBLIC_KEY_HEX>'\" \\\n--session-arg \"validator:public_key='<CURRENT_VALIDATOR_PUBLIC_KEY_HEX>'\" \\\n--session-arg \"amount:u512='<DELEGATION_AMOUNT>'\" \\\n--session-arg \"new_validator:public_key='<NEW_VALIDATOR_PUBLIC_KEY_HEX>'\"\n```\n\n----------------------------------------\n\nTITLE: Undelegating Tokens Using System Auction Contract\nDESCRIPTION: Command to undelegate tokens using the system auction contract's undelegate entry point. This is the recommended method as it's more cost-effective and simpler than using compiled Wasm.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/docs/developers/cli/undelegate.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ncasper-client put-deploy \\\n--node-address <HOST:PORT> \\\n--secret-key <PATH> \\\n--chain-name <CHAIN_NAME> \\\n--payment-amount <PAYMENT_AMOUNT_IN_MOTES> \\\n--session-hash <SESSION_HASH> \\\n--session-entry-point undelegate \\\n--session-arg \"validator:public_key='<HEX_ENCODED_VALIDATOR_PULIC_KEY>'\" \\\n--session-arg \"amount:u512='<AMOUNT_TO_UNDELEGATE>'\" \\\n--session-arg \"delegator:public_key='<HEX_ENCODED_DELEGATOR_PULIC_KEY>'\"\n```\n\n----------------------------------------\n\nTITLE: Example State Root Hash Query for Testnet\nDESCRIPTION: A concrete example of querying the state root hash from a testnet node, which returns the current snapshot identifier of the blockchain state.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/versioned_docs/version-2.0.0/developers/cli/transfers/verify-transfer.md#2025-04-22_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ncasper-client get-state-root-hash --node-address https://node.testnet.casper.network \n```\n\n----------------------------------------\n\nTITLE: JSON-RPC Response for Block Information Query in Casper Network\nDESCRIPTION: This JSON snippet illustrates the structure of a JSON-RPC response containing detailed block information from the Casper Network. It includes block header details, body information, and validator proofs.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/versioned_docs/version-2.0.0/resources/beginner/querying-network.md#2025-04-22_snippet_8\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"id\": 3,\n    \"jsonrpc\": \"2.0\",\n    \"result\": {\n        \"api_version\": \"1.0.0\",\n        \"block\": {\n            \"body\": {\n                \"deploy_hashes\": [],\n                \"proposer\": \"012c6775c0e9e09f93b9450f1c5348c5f6b97895b0f52bb438f781f96ba2675a94\",\n                \"transfer_hashes\": [\"ec2d477a532e00b08cfa9447b7841a645a27d34ee12ec55318263617e5740713\"]\n            },\n            \"hash\": \"7c7e9b0f087bba5ce6fc4bd067b57f69ea3c8109157a3ad7f6d98b8da77d97f9\",\n            \"header\": {\n                \"accumulated_seed\": \"50b8ac019b7300cd1fdeec050310e61b900e9238aa879929745900a91bd0fc4f\",\n                \"body_hash\": \"224076b19c04279ae9b97f620801d5ff40ba64f431fe0d5089ef7cb84fdff45a\",\n                \"era_end\": null,\n                \"era_id\": 0,\n                \"height\": 8,\n                \"parent_hash\": \"416f339c4c2ff299c64a4b3271c5ef2ac2297bb40a477ceacce1483451a4db16\",\n                \"protocol_version\": \"1.0.0\",\n                \"random_bit\": true,\n                \"state_root_hash\": \"cfdbf775b6671de3787cfb1f62f0c5319605a7c1711d6ece4660b37e57e81aa3\",\n                \"timestamp\": \"2021-04-20T18:04:42.368Z\"\n            },\n            \"proofs\": [\n                {\n                    \"public_key\": \"010f50b0116f213ef65b99d1bd54483f92bf6131de2f8aceb7e3f825a838292150\",\n                    \"signature\": \"130 chars\"\n                },\n                {\n                    \"public_key\": \"012c6775c0e9e09f93b9450f1c5348c5f6b97895b0f52bb438f781f96ba2675a94\",\n                    \"signature\": \"130 chars\"\n                },\n                {\n                    \"public_key\": \"018d5da83f22c9b65cdfdf9f9fdf9f7c98aa2b8c7bcf14bf855177bbb9c1ac7f0a\",\n                    \"signature\": \"130 chars\"\n                },\n                {\n                    \"public_key\": \"01b9088b92c8a8d592f6ec8c3e8153d7c55fc0c38b5999a214e37e73a2edd6fe0f\",\n                    \"signature\": \"130 chars\"\n                },\n                {\n                    \"public_key\": \"01b9e3484d96d5693e6c5fe789e7b28972aa392b054a76d175f079692967f604de\",\n                    \"signature\": \"130 chars\"\n                }\n            ]\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Querying Global State for Contract Entry Points\nDESCRIPTION: Command to check contract entry points using the Casper command-line client by querying the global state.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/versioned_docs/version-1.5.X/resources/beginner/upgrade-contract.md#2025-04-22_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\ncasper-client query-global-state \\\n    --node-address http://[NODE_IP]:7777 \\\n    --state-root-hash [STATE_ROOT_HASH] \\\n    --key [ACCOUNT_HASH] -q \"counter\"\n```\n\n----------------------------------------\n\nTITLE: Defining info_get_validator_changes RPC Schema - JSON\nDESCRIPTION: This JSON snippet defines the schema and example for the \"info_get_validator_changes\" RPC endpoint of the Casper network. It documents the API's main attributes, required parameters (none), and the response structure, focusing on validators' status change history. The result schema enforces required fields such as \"api_version\" and \"changes\", referencing further structured arrays and nested objects. Sample usage demonstrates expected inputs (empty params array) and outputs (version and changes list). Limitations include strict property constraints and prerequisite understanding of referenced JSON schemas (like JsonValidatorChanges).\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/condor/jsonrpc-comp/rpc-2.0/info_get_validator_changes.json.md#2025-04-22_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"name\": \"info_get_validator_changes\",\n  \"summary\": \"returns status changes of active validators\",\n  \"params\": [],\n  \"result\": {\n    \"name\": \"info_get_validator_changes_result\",\n    \"schema\": {\n      \"description\": \"Result for the \\\"info_get_validator_changes\\\" RPC.\",\n      \"type\": \"object\",\n      \"required\": [\n        \"api_version\",\n        \"changes\"\n      ],\n      \"properties\": {\n        \"api_version\": {\n          \"description\": \"The RPC API version.\",\n          \"type\": \"string\"\n        },\n        \"changes\": {\n          \"description\": \"The validators' status changes.\",\n          \"type\": \"array\",\n          \"items\": {\n            \"$ref\": \"#/components/schemas/JsonValidatorChanges\"\n          }\n        }\n      },\n      \"additionalProperties\": false\n    }\n  },\n  \"examples\": [\n    {\n      \"name\": \"info_get_validator_changes_example\",\n      \"params\": [],\n      \"result\": {\n        \"name\": \"info_get_validator_changes_example_result\",\n        \"value\": {\n          \"api_version\": \"2.0.0\",\n          \"changes\": [\n            {\n              \"public_key\": \"01d9bf2148748a85c89da5aad8ee0b0fc2d105fd39d41a4c796536354f0ae2900c\",\n              \"status_changes\": [\n                {\n                  \"era_id\": 1,\n                  \"validator_change\": \"Added\"\n                }\n              ]\n            }\n          ]\n        }\n      }\n    }\n  ]\n}\n\n```\n\n----------------------------------------\n\nTITLE: Querying Block Transfers in Casper Network (JSON)\nDESCRIPTION: Example of using the chain_get_block_transfers RPC method to retrieve all transfers for a specific block. It includes the request parameters and the expected response structure.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/condor/jsonrpc-comp/rpc-2.0/schema.json.md#2025-04-22_snippet_20\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"name\": \"block_identifier\",\n  \"value\": {\n    \"Hash\": \"0707070707070707070707070707070707070707070707070707070707070707\"\n  }\n}\n```\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"api_version\": \"2.0.0\",\n  \"block_hash\": \"0707070707070707070707070707070707070707070707070707070707070707\",\n  \"transfers\": [\n    {\n      \"Version2\": {\n        \"transaction_hash\": {\n          \"Version1\": \"0101010101010101010101010101010101010101010101010101010101010101\"\n        },\n        \"from\": {\n          \"AccountHash\": \"account-hash-0202020202020202020202020202020202020202020202020202020202020202\"\n        },\n        \"to\": \"account-hash-0303030303030303030303030303030303030303030303030303030303030303\",\n        \"source\": \"uref-0a0a0a0a0a0a0a0a0a0a0a0a0a0a0a0a0a0a0a0a0a0a0a0a0a0a0a0a0a0a0a0a-007\",\n        \"target\": \"uref-1b1b1b1b1b1b1b1b1b1b1b1b1b1b1b1b1b1b1b1b1b1b1b1b1b1b1b1b1b1b1b1b-000\",\n        \"amount\": \"1000000000000\",\n        \"gas\": \"2500000000\",\n        \"id\": 999\n      }\n    }\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Querying Purse Balance with casper-client CLI (Bash)\nDESCRIPTION: This bash command runs the casper-client utility with the query-balance subcommand to retrieve the balance of a purse using either a public key, account hash, or URef as the identifier. Required arguments include the node address (IP or URL), hex-encoded state root hash, and the purse identifier. Optional parameters such as \\'id\\' can be provided to correlate requests and responses. Outputs are returned in CLI, potentially as human-readable or JSON-formatted data. No explicit dependencies except for the casper-client binary with network access.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/docs/developers/cli/transfers/verify-transfer.md#2025-04-22_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\ncasper-client query-balance --help\n```\n\nLANGUAGE: bash\nCODE:\n```\ncasper-client query-balance \\\n--id 6 \\\n--node-address [NODE_SERVER_ADDRESS] \\\n--state-root-hash [STATE_ROOT_HAHS] \\\n--purse-identifier [SOURCE_PUBLIC_KEY_HEX] \n```\n\n----------------------------------------\n\nTITLE: Generated Project Directory Structure\nDESCRIPTION: This snippet outlines the directory structure for a cross-contract project, comprising contract code, tests, and build configurations. It is automatically generated by the Cargo command and includes key files like `Cargo.toml` and `main.rs` necessary for development.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/versioned_docs/version-1.5.X/resources/advanced/cross-contract.md#2025-04-22_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ncross-contract\n├──contract\n│   ├── Cargo.toml\n│   ├── rust-toolchain\n│   ├── src\n│   │   └── main.rs\n│   └── target\n├──tests\n│   ├── Cargo.toml\n│   ├── src\n│   │   └── integration_tests.rs\n│   └── target\n└── Makefile\n```\n\n----------------------------------------\n\nTITLE: Signing and Sending Deploy via Casper Signer in JavaScript\nDESCRIPTION: Demonstrates how to sign a deploy using the Casper Signer browser extension and then send it to the network. It converts the deploy to JSON, calls `Signer.sign` with the deploy JSON and public keys, parses the resulting signed deploy JSON, and uses `CasperServiceByJsonRPC.deploy` to submit it. Depends on `Signer`, `CasperServiceByJsonRPC`, `DeployUtil` from `casper-js-sdk`, a GRPC endpoint URL, and the public keys.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/docs/resources/advanced/list-cspr.md#2025-04-22_snippet_8\n\nLANGUAGE: javascript\nCODE:\n```\nimport { Signer, CasperServiceByJsonRPC, DeployUtil } from 'casper-js-sdk';\n\nconst casperService = new CasperServiceByJsonRPC(GRPC_URL);\nconst deployJson = DeployUtil.deployToJson(deploy);\nSigner.sign(\n    deployJson,\n    accountPublicKey,\n    recipientPublicKey\n).then((signedDeployJson) => {\n    const signedDeploy = DeployUtil.deployFromJson(signedDeployJson);\n    if (signedDeploy.ok) {\n      casperService.deploy(signedDeploy.val! as DeployUtil.Deploy); // sent deploy\n    }\n}\n\n```\n\n----------------------------------------\n\nTITLE: Example Zstandard Decompression Error Output\nDESCRIPTION: Shows an example error message from `zstd` when attempting to decompress an archive created with long-distance matching without specifying the corresponding `--long` option during decompression. The error message suggests the correct option (`--long=31` or `--memory=2048MB`).\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/docs/operators/maintenance/archiving-and-restoring.md#2025-04-22_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\n./casper.tar.zst : Decoding error (36) : Frame requires too much memory for decoding \n./casper.tar.zst : Window size larger than maximum : 2147483648 > 134217728\n./casper.tar.zst : Use --long=31 or --memory=2048MB\n```\n\n----------------------------------------\n\nTITLE: Fetching State Root Hash using casper-client in Bash\nDESCRIPTION: Command to retrieve the current state root hash from a Casper network node using the `casper-client get-state-root-hash` command. Requires the node's server address (`--node-address`). The state root hash acts as an identifier for the current state of the network, necessary for subsequent state queries.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/versioned_docs/version-2.0.0/developers/cli/querying-global-state.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n```bash\ncasper-client get-state-root-hash --node-address [NODE_SERVER_ADDRESS]\n```\n```\n\n----------------------------------------\n\nTITLE: Querying a Value Using Contract Address Hash and Named Key - Sample (Bash)\nDESCRIPTION: A copy-paste ready command to fetch the named key \"count\" from a deployed contract using query-global-state. Demonstrates syntax for accessing named keys directly.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/docs/developers/cli/querying-global-state.md#2025-04-22_snippet_20\n\nLANGUAGE: bash\nCODE:\n```\ncasper-client query-global-state \\\n--node-address http://localhost:11101 \\\n--state-root-hash 6b5849caa605acdc29564f303764396a27ef7a6b1a61f7b13109b129e7e70d81 \\\n--key \"entity-contract-a1d0bf9d96f3efc9ea67f627df3a7cba390bfc582956032db91060ca5d413e68\" \\\n-q \"count\"\n```\n\n----------------------------------------\n\nTITLE: Compiling the Counter Contract\nDESCRIPTION: Uses the provided Makefile to prepare and test the counter contract, compiling it to WebAssembly (Wasm).\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/versioned_docs/version-2.0.0/resources/beginner/counter-testnet/walkthrough.md#2025-04-22_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\ncd counter\nmake prepare\nmake test\n```\n\n----------------------------------------\n\nTITLE: Listing Available RPCs using Casper Client\nDESCRIPTION: Command to list all supported RPCs using the Casper client. The command requires specifying a node address in HOST:PORT format.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/docs/developers/json-rpc/index.md#2025-04-22_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\ncasper-client list-rpcs --node-address <HOST:PORT>\n```\n\n----------------------------------------\n\nTITLE: Updating Trusted Hash in config.toml via Command Line (Bash)\nDESCRIPTION: Updates the `trusted_hash` setting within a specific version's `config.toml` file. It uses `casper-client` to fetch the latest block hash from a specified node's status endpoint, processes it with `jq` and `tr`, and then uses `sed` to replace the existing `trusted_hash` line in the configuration file (`/etc/casper/1_0_0/config.toml` in this example). Requires `sudo`, `casper-client`, `jq`, and `tr` utilities.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/versioned_docs/version-1.5.X/operators/setup/basic-node-configuration.md#2025-04-22_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nsudo sed -i \"/trusted_hash =/c\\trusted_hash = '$(casper-client get-block --node-address http://3.14.161.135:7777 | jq -r .result.block.hash | tr -d '\\n')'\" /etc/casper/1_0_0/config.toml\n```\n\n----------------------------------------\n\nTITLE: Deploying Delegate Contract Using Python SDK\nDESCRIPTION: This Python snippet uses the PyCSPR SDK to configure and send a deploy for the delegate contract to the Casper network. Dependencies include 'pycspr'. It constructs deploy parameters with chain and account details, creates a delegation deploy, and sends it to the network. The script assumes availability of a keypair and a valid path to the WASM binary.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/versioned_docs/version-2.0.0/developers/dapps/sdk/client-library-usage.md#2025-04-22_snippet_20\n\nLANGUAGE: python\nCODE:\n```\nimport pycspr\\n\\nvalidator_public_key = pycspr.factory.accounts.create_public_key_from_account_key(\\n    bytes.fromhex(\"01e8c84f4fbb58d37991ef373c08043a45c44cd7f499453fa2bd3e141cc0113b3c\")\\n)\\n\\ndeploy_params = pycspr.create_deploy_parameters(\\n    account = keypair, # Only the public key is used, see `create_deploy_parameters`\\n    chain_name = \"casper\" # or \"casper-test\" for testnet\\n)\\n\\ndeploy = pycspr.create_validator_delegation(\\n    params = deploy_params,\\n    amount = int(500e9), // Minimum delegation amount: 500 CSPR\\n    public_key_of_delegator = keypair,\\n    public_key_of_validator = validator_public_key,\\n    path_to_wasm = \"./casper-node/target/wasm32-unknown-unknown/release/delegate.wasm\"\\n)\\n\\ndeploy.approve(keypair)\\nclient.send_deploy(deploy)\\nprint(deploy.hash.hex())\n```\n\n----------------------------------------\n\nTITLE: Defining Identifier Schema with JSON\nDESCRIPTION: This JSON snippet defines a schema for identifying addressable entities on the Casper Network. It supports identification through three properties: PublicKey, AccountHash, and EntityAddr, each referencing specific schema components. Required dependencies include JSON schema definitions for PublicKey, AccountHash, and EntityAddr. The expected output is a JSON object conforming to one of the defined structures.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/condor/jsonrpc-comp/rpc-2.0/schema/EntityIdentifier.json.md#2025-04-22_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"description\": \"Identifier of an addressable entity.\",\n    \"oneOf\": [\n        {\n            \"description\": \"The public key of an account.\",\n            \"type\": \"object\",\n            \"required\": [\n                \"PublicKey\"\n            ],\n            \"properties\": {\n                \"PublicKey\": {\n                    \"$ref\": \"#/components/schemas/PublicKey\"\n                }\n            },\n            \"additionalProperties\": false\n        },\n        {\n            \"description\": \"The account hash of an account.\",\n            \"type\": \"object\",\n            \"required\": [\n                \"AccountHash\"\n            ],\n            \"properties\": {\n                \"AccountHash\": {\n                    \"$ref\": \"#/components/schemas/AccountHash\"\n                }\n            },\n            \"additionalProperties\": false\n        },\n        {\n            \"description\": \"The address of an addressable entity.\",\n            \"type\": \"object\",\n            \"required\": [\n                \"EntityAddr\"\n            ],\n            \"properties\": {\n                \"EntityAddr\": {\n                    \"$ref\": \"#/components/schemas/EntityAddr\"\n                }\n            },\n            \"additionalProperties\": false\n        }\n    ]\n}\n```\n\n----------------------------------------\n\nTITLE: Example: Calling Counter Contract using Named Key in Rust\nDESCRIPTION: A command example for invoking a contract via a named key 'counter' on the Casper test network. Demonstrates using the session-entry-point 'counter_inc' with the named contract.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/versioned_docs/version-1.5.X/developers/cli/calling-contracts.md#2025-04-22_snippet_10\n\nLANGUAGE: rust\nCODE:\n```\ncasper-client put-deploy \\\n    --node-address http://65.21.235.219:7777 \\\n    --chain-name casper-test \\\n    --secret-key [PATH_TO_YOUR_KEY]/secret_key.pem \\\n    --payment-amount 100000000 \\\n    --session-name \"counter\" \\\n    --session-entry-point \"counter_inc\"\n```\n\n----------------------------------------\n\nTITLE: Viewing Faucet Account Info with NCTL in Rust\nDESCRIPTION: Retrieves information about the default faucet account using NCTL, such as the account's secret key location and account hash, which are necessary for signing deploys and querying network state. Requires NCTL to be installed and configured. The command outputs details for use with signing and querying but does not modify state.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/docs/resources/beginner/counter/commands.md#2025-04-22_snippet_0\n\nLANGUAGE: rust\nCODE:\n```\nnctl-view-faucet-account\n```\n\n----------------------------------------\n\nTITLE: Defining CallStackElement Enum in Rust for Casper Contracts\nDESCRIPTION: This code snippet defines the CallStackElement enum used in the Casper call stack. It represents different origins of sub-calls in the contract execution, including Session, StoredSession, and StoredContract variants.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/versioned_docs/version-2.0.0/developers/writing-onchain-code/contract-hash-vs-package-hash.md#2025-04-22_snippet_0\n\nLANGUAGE: rust\nCODE:\n```\n/// Represents the origin of a sub-call.\n#[derive(Clone, Debug, PartialEq, Eq)]\npub enum CallStackElement {\n    /// Session\n    Session {\n        /// The account hash of the caller\n        account_hash: AccountHash,\n    },\n    /// Effectively an EntryPointType::Session - stored access to a session.\n    StoredSession {\n        /// The account hash of the caller\n        account_hash: AccountHash,\n        /// The contract package hash\n        contract_package_hash: ContractPackageHash,\n        /// The contract hash\n        contract_hash: ContractHash,\n    },\n    /// contract\n    StoredContract {\n        /// The contract package hash\n        contract_package_hash: ContractPackageHash,\n        /// The contract hash\n        contract_hash: ContractHash,\n    },\n}\n```\n\n----------------------------------------\n\nTITLE: Writing Dictionary Entries\nDESCRIPTION: Basic syntax for adding or updating entries in a dictionary using dictionary_put\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/docs/concepts/dictionaries.md#2025-04-22_snippet_2\n\nLANGUAGE: rust\nCODE:\n```\nstorage::dictionary_put(dictionary_uref, &dictionary_item_key, value);\n```\n\n----------------------------------------\n\nTITLE: Retrieving Casper Account Hash using Casper CLI\nDESCRIPTION: Uses the `casper-client account-address` command to retrieve the account hash associated with a specific public key provided in hexadecimal format. Requires the Casper CLI client installation and configuration. The placeholder `<INSERT_PUBLIC_KEY_HEX>` must be replaced with an actual public key hex string.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/docs/resources/advanced/multi-sig/multi-sig-workflow.md#2025-04-22_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\ncasper-client account-address --public-key <INSERT_PUBLIC_KEY_HEX>\n```\n\n----------------------------------------\n\nTITLE: Enabling Casper Network Account via Shell Command\nDESCRIPTION: Enables Alice's account on Casper network using Casper client by lowering action thresholds. Requires admin secret key and session path. Restores the ability for Alice to execute deploys.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/versioned_docs/version-2.0.0/operators/setup-network/create-private.md#2025-04-22_snippet_18\n\nLANGUAGE: sh\nCODE:\n```\ncasper-client \\\n  put-deploy \\\n  -n $NODE_ADDR \\\n  --chain-name $CHAIN_NAME \\\n  --secret-key admin/secret_key.pem \\\n  --session-account=alice/public_key_hex\n  --session-path set_action_thresholds.wasm \\\n  --payment-amount=2500000000 \\\n  --session-arg \"key_management_threshold:u8='0'\" \\\n  --session-arg \"deploy_threshold:u8='1'\"\n```\n\n----------------------------------------\n\nTITLE: Deploying NFT Contract to Testnet\nDESCRIPTION: Command to deploy the NFT contract to the Casper Testnet with configuration parameters including collection name, symbol, token supply, and various mode settings.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/versioned_docs/version-1.5.X/resources/tokens/cep78/using-casper-client/quickstart-guide.md#2025-04-22_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\ncasper-client put-deploy --node-address http://localhost:11101/rpc/ \\\n--chain-name \"casper-net-1\" \\\n--payment-amount 5000000000 \\\n--secret-key ~/casper/casper-node/utils/nctl/assets/net-1/nodes/node-1/keys/secret_key.pem \\\n--session-path contract/target/wasm32-unknown-unknown/release/contract.wasm \\\n--session-arg \"collection_name:string='CEP-78-collection'\" \\\n--session-arg \"collection_symbol:string='CEP78'\" \\\n--session-arg \"total_token_supply:u64='100'\" \\\n--session-arg \"ownership_mode:u8='2'\" \\\n--session-arg \"nft_kind:u8='1'\" \\\n--session-arg \"nft_metadata_kind:u8='0'\" \\\n--session-arg \"json_schema:string='nft-schema'\" \\\n--session-arg \"identifier_mode:u8='0'\" \\\n--session-arg \"metadata_mutability:u8='0'\"\n```\n\n----------------------------------------\n\nTITLE: Defining ValidatorWeight Schema in JSON\nDESCRIPTION: JSON schema for a validator's public key paired with its weight, representing the total number of motes staked by the validator and its delegators.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/condor/jsonrpc-comp/rpc-2.0/schema/components.json.md#2025-04-22_snippet_71\n\nLANGUAGE: json\nCODE:\n```\n\"ValidatorWeight\": {\n    \"description\": \"A validator's public key paired with its weight, i.e. the total number of motes staked by it and its delegators.\",\n    \"type\": \"object\",\n    \"required\": [\n        \"validator\",\n        \"weight\"\n    ],\n    \"properties\": {\n        \"validator\": {\n            \"description\": \"The validator's public key.\",\n            \"allOf\": [\n                {\n                    \"$ref\": \"#/components/schemas/PublicKey\"\n                }\n            ]\n        },\n        \"weight\": {\n            \"description\": \"The validator's weight.\",\n            \"allOf\": [\n                {\n                    \"$ref\": \"#/components/schemas/U512\"\n                }\n            ]\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Changing CEP-18 Account Security Permissions via Casper Client\nDESCRIPTION: Sends a deploy using `casper-client` to call the `change_security` entry point of a CEP-18 contract package. This allows an admin account (identified by `--secret-key`) to modify the security permissions (None, Admin, MintAndBurn, Burner, Minter) for other accounts by providing comma-separated lists of account hashes for the desired security levels via optional session arguments (`none_list`, `admin_list`, etc.). Requires node address, admin's secret key, package name, chain name, payment amount, and at least one optional session argument list.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/versioned_docs/version-1.5.X/resources/tokens/cep18/transfer.md#2025-04-22_snippet_25\n\nLANGUAGE: bash\nCODE:\n```\ncasper-client put-deploy -n http://<NODE IP>:<PORT> \\\n--secret-key ~/casper/demo/user_a/secret_key.pem \\\n--session-package-name \"cep18_contract_package_CEP18\" \\\n--session-entry-point \"change_security\" \\\n/// The following arguments are all optional and each consists of a string of the account hashes to be added to the list specified, separated by commas.\n--session-arg \"none_list:string:'<List of account hashes>'\" \\\n--session-arg \"admin_list:string:'<List of account hashes>'\" \\\n--session-arg \"mint_and_burn_list:string:'<List of account hashes>'\" \\\n--session-arg \"burner_list:string:'<List of account hashes>'\" \\\n--chain-name <CHAIN NAME> \\\n--payment-amount 1000000000\n```\n\n----------------------------------------\n\nTITLE: Defining CLType Enum in Markdown\nDESCRIPTION: This snippet lists all available CLTypes in the Casper network, including primitives, system types, and complex types. Each type is briefly described.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/versioned_docs/version-2.0.0/developers/json-rpc/types_cl.md#2025-04-22_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n* `Bool` Primitive\n* `I32` Primitive\n* `I64` Primitive\n* `U8` Primitive\n* `U32` Primitive\n* `U64` Primitive\n* `U128` Large unsigned integer type\n* `U256` Large unsigned integer type\n* `U512` Large unsigned integer type\n* `Unit` Primitive\n* `String` Primitive\n* `Key` System type\n* `URef` System type\n* `PublicKey` System type\n* `Option` Option of a `CLType`\n* `List` Variable-length list of a single `CLType` (comparable to a `Vec`)\n* `ByteArray` Fixed-length list of a single `CLType` (comparable to a Rust array)\n* `Result` `Result` with `Ok` and `Err` variants of `CLType`'s\n* `Map` Map with keys of a single `CLType` and values of a single `CLType`\n* `Tuple1` 1-ary tuple of a `CLType`\n* `Tuple2` 2-ary tuple of `CLType`s\n* `Tuple3` 3-ary tuple of `CLType`s\n* `Any` Unspecified type\n```\n\n----------------------------------------\n\nTITLE: Defining JSON Schema for Transaction Initiator in JSON\nDESCRIPTION: This JSON schema snippet details how to represent the address of the initiator of a transaction in the Casper Network. It specifies two alternatives: using a public key or an account hash, both represented as objects with required fields. Dependencies include JSON schema structure and component schemas for PublicKey and AccountHash. Expected input is a JSON object, determining the properties based on type.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/condor/jsonrpc-comp/rpc-2.0/schema/InitiatorAddr.json.md#2025-04-22_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"description\": \"The address of the initiator of a TransactionV1.\",\n    \"oneOf\": [\n        {\n            \"description\": \"The public key of the initiator.\",\n            \"type\": \"object\",\n            \"required\": [\n                \"PublicKey\"\n            ],\n            \"properties\": {\n                \"PublicKey\": {\n                    \"$ref\": \"#/components/schemas/PublicKey\"\n                }\n            },\n            \"additionalProperties\": false\n        },\n        {\n            \"description\": \"The account hash derived from the public key of the initiator.\",\n            \"type\": \"object\",\n            \"required\": [\n                \"AccountHash\"\n            ],\n            \"properties\": {\n                \"AccountHash\": {\n                    \"$ref\": \"#/components/schemas/AccountHash\"\n                }\n            },\n            \"additionalProperties\": false\n        }\n    ]\n}\n```\n\n----------------------------------------\n\nTITLE: Serializing RuntimeArgs Structure\nDESCRIPTION: Defines `RuntimeArgs`, representing a collection of arguments passed to a smart contract. These arguments are serialized as a `List` where each element is a `Tuple`.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/versioned_docs/version-2.0.0/concepts/serialization/types.md#2025-04-22_snippet_43\n\nLANGUAGE: text\nCODE:\n```\nRepresents a collection of arguments passed to a smart contract. They serialize as a [`List`](./primitives.md#clvalue-list) comprised of [`Tuples`](./primitives.md#clvalue-tuple).\n```\n\n----------------------------------------\n\nTITLE: Output Structure for Deploy Command - JSON\nDESCRIPTION: This JSON snippet represents the expected structure of the success response upon executing a deployment command. The key element is the 'deploy_hash', which serves as an identifier for the deployment process. Requires a valid deployment and connection to the Casper network for accurate response.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/versioned_docs/version-1.5.X/resources/tokens/cep78/using-casper-client/full-installation-tutorial.md#2025-04-22_snippet_8\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"jsonrpc\": \"2.0\",\n  \"id\": 3104428017957320684,\n  \"result\": {\n    \"api_version\": \"1.0.0\",\n    \"deploy_hash\": \"2b084bdccbaaae2b9c6e4de2f5a6cdf06c72f0d02eaeb7d681a29ebdbe3c92b7\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Handling Deploy Processed Events via Casper Go SDK (Go)\nDESCRIPTION: Shows how to subscribe to and handle DeployProcessed events from the Casper event stream using the Go SDK. Sets up an SSE client to connect to the main event endpoint, registers a handler that parses and logs deploy hashes, and starts listening from a specific event ID. Dependencies include \\\\\"github.com/make-software/casper-go-sdk/sse\\\\\". Listeners must manage context and event lifecycles, and ensure that the node endpoint is accessible.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/versioned_docs/version-1.5.X/developers/dapps/sdk/go-sdk.md#2025-04-22_snippet_1\n\nLANGUAGE: go\nCODE:\n```\npackage main\\n\\nimport (\\n    \\\"context\\\"\\n    \\\"log\\\"\\n\\n    \\\"github.com/make-software/casper-go-sdk/sse\\\"\\n)\\n\\nfunc main() {\\n    client := sse.NewClient(\\\"https://<Node Address and Port>/events/main\\\")\\n    defer client.Stop()\\n    client.RegisterHandler(\\n        sse.DeployProcessedEventType,\\n        func(ctx context.Context, rawEvent sse.RawEvent) error {\\n            deploy, err := rawEvent.ParseAsDeployProcessedEvent()\\n            if err != nil {\\n                return err\\n            }\\n            log.Printf(\\\"Deploy hash: %s\\\", deploy.DeployProcessed.DeployHash)\\n            return nil\\n        })\\n    lastEventID := 1234\\n    client.Start(context.TODO(), lastEventID)\\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing the Cross-Contract Call Logic in Rust\nDESCRIPTION: This Rust snippet defines the `call_contract_2` entry point. It retrieves the target contract's hash (`hello_world_contract`) and a message (`new_message`) from the runtime arguments provided during the call. It then uses `runtime::call_contract` to invoke the `update_msg` entry point on the target contract, passing the retrieved message as an argument. This demonstrates the core mechanism for one Casper contract calling another.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/versioned_docs/version-1.5.X/resources/advanced/cross-contract.md#2025-04-22_snippet_15\n\nLANGUAGE: rust\nCODE:\n```\n#[no_mangle]\npub extern \"C\" fn call_contract_2() {\n\n    // Get the contract hash from the named arguments passed to the `call_contract_2` entry point.\n    let contract_hash: ContractHash = runtime::get_named_arg::<Key>(CONTRACT_HASH)\n    .into_hash()\n    .map(|hash| ContractHash::new(hash))\n    .unwrap();\n\n    // Get the value of the message from the second parameter\n    let new_value: String = runtime::get_named_arg(\"new_message\");\n\n    // Call the update_msg entry point on the other contract with the parameter values\n    let _: () = runtime::call_contract(\n        contract_hash,\n        \"update_msg\",\n        runtime_args! {\n            \"message\" => new_value,\n        },\n    );\n\n}\n\n```\n\n----------------------------------------\n\nTITLE: Invoke check_balance_of Entry Point on Casper Client\nDESCRIPTION: This snippet involves using the Casper client to check the balance of a specific account by invoking the `check_balance_of` entry point on the `cep18_test_contract`. Required inputs are the node URL, secret key path, contract hash as account hash, target account hash for balance check, chain name, and payment amount.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/docs/resources/tokens/cep18/transfer.md#2025-04-22_snippet_2\n\nLANGUAGE: json\nCODE:\n```\ncasper-client put-deploy -n http://<node IP>:<PORT>\\\n--secret-key ~/casper/demo/user_a/secret_key.pem \\\n--session-package-name \"cep18_test_contract\" \\\n--session-entry-point \"check_balance_of\" \\\n// This is the contract hash of your CEP-18 contract instance, passed in as an `account-hash-`.\n--session-arg \"token_contract:account_hash='account-hash-b568f50a64acc8bbe43462ffe243849a88111060b228dacb8f08d42e26985180'\" \\\n// This is the account hash of the account you are checking the balance of.\n--session-arg \"address:key='account-hash-303c0f8208220fe9a4de40e1ada1d35fdd6c678877908f01fddb2a56502d67fd'\" \\\n--chain-name <CHAIN NAME> \\\n--payment-amount 1000000000\n```\n\n----------------------------------------\n\nTITLE: Monitoring Casper Node Event Stream with cURL\nDESCRIPTION: Command to monitor the real-time event stream from a Casper node. Requires the host IP address and event stream port (default 9999 for Testnet and Mainnet).\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/versioned_docs/version-2.0.0/operators/setup/node-events.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ncurl -s http://HOST:PORT/events/\n```\n\n----------------------------------------\n\nTITLE: Transaction Entry Point Schema Definition in JSON\nDESCRIPTION: Defines the schema for the entry point of a transaction, which can be the standard Call entry point, a Custom entry point, or the Transfer native entry point.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/condor/jsonrpc-comp/rpc-2.0/schema.json.md#2025-04-22_snippet_42\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"description\": \"Entry point of a Transaction.\",\n  \"oneOf\": [\n    {\n      \"description\": \"The standard `call` entry point used in session code.\",\n      \"type\": \"string\",\n      \"enum\": [\n        \"Call\"\n      ]\n    },\n    {\n      \"description\": \"A non-native, arbitrary entry point.\",\n      \"type\": \"object\",\n      \"required\": [\n        \"Custom\"\n      ],\n      \"properties\": {\n        \"Custom\": {\n          \"type\": \"string\"\n        }\n      },\n      \"additionalProperties\": false\n    },\n    {\n      \"description\": \"The `transfer` native entry point, used to transfer `Motes` from a source purse to a target purse.\",\n      \"type\": \"string\",\n      \"enum\": [\n        \"Transfer\"\n      ]\n    },\n    {\n      \"description\": \"The `add_bid` native entry point, used to create or top off a bid purse.\"\n    }\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Verifying Contract Version in Rust\nDESCRIPTION: This code snippet demonstrates how to verify the contract version after an upgrade using Rust. It queries the account's named keys to retrieve the version and asserts that it matches the expected value.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/versioned_docs/version-2.0.0/resources/beginner/upgrade-contract.md#2025-04-22_snippet_3\n\nLANGUAGE: rust\nCODE:\n```\n    // Verify the contract version is now 2.\n    let account = builder\n        .get_account(*DEFAULT_ACCOUNT_ADDR)\n        .expect(\"should have account\");\n\n    let version_key = *account\n        .named_keys()\n        .get(CONTRACT_VERSION_KEY)\n        .expect(\"version uref should exist\");\n\n    let version = builder\n        .query(None, version_key, &[])\n        .expect(\"should be stored value.\")\n        .as_cl_value()\n        .expect(\"should be cl value.\")\n        .clone()\n        .into_t::<u32>()\n        .expect(\"should be u32.\");\n\n    assert_eq!(version, 2);\n```\n\n----------------------------------------\n\nTITLE: Retrieving State Root Hash using Casper Client (Bash)\nDESCRIPTION: Fetches the latest state root hash from a specified Casper node. This hash is required for querying the global state at a specific point in time.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/versioned_docs/version-2.0.0/resources/advanced/multi-sig/multi-sig-workflow.md#2025-04-22_snippet_14\n\nLANGUAGE: bash\nCODE:\n```\ncasper-client get-state-root-hash --node-address https://node.testnet.casper.network\n```\n\n----------------------------------------\n\nTITLE: Embedding Casper WASM Bytecode as Hex String - Binary Data - Text File\nDESCRIPTION: This snippet assigns a property named 'bytes' with a long hexadecimal string representing a compiled WebAssembly module for the Casper Network. It is intended for direct loading by tools or runtimes that process WASM bytecode. No external dependencies are required except for systems or libraries capable of decoding and executing WASM hexadecimal strings, with expected input being the entire string and the output as a parsed binary or executable module.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/docs/developers/json-rpc/json-rpc-transactional.md#2025-04-22_snippet_11\n\nLANGUAGE: wasm-binary\nCODE:\n```\n\"0061736d0100000001540c60027f7f017f60017f0060037f7f7f017f60047f7f7f7f017f60077f7f7f7f7f7f7f017f60087f7f7f7f7f7f7f7f017f60037f7f7f0060047f7f7f7f0060017f017f60000060057f7f7f7f7f017f60027f7f000289020a03656e760d6361737065725f726576657274000103656e76196361737065725f6765745f6e616d65645f6172675f73697a65000203656e76146361737065725f6765745f6e616d65645f617267000303656e76156361737065725f6765745f6d61696e5f7075727365000103656e761a6361737065725f6765745f73797374656d5f636f6e7472616374000203656e76146361737065725f63616c6c5f636f6e7472616374000403656e76176361737065725f726561645f686f73745f627566666572000203656e76236361737065725f7472616e736665725f66726f6d5f70757273655f746f5f7075727365000503656e76066d656d6f72790201114003656e760367617300010324230108080809080006060a080b07090b090701070008000802020202080907070008000804050170010808060e027f01418080c0000b7f0141000b070701037061790025090d010041010b071a262a2b2728290afc970123270041d4ab0810082000230141016a2401230141f4034b0440000b100a230141016b24011000000b240041a6960410082000230141046a2401230141f4034b0440000b100c230141046b24010b1b0041d8221008200041187441187541027441c481c0006a2802000bd20501027f41da880410082000410876210141012102024002400240024002400240024002400240024002400240024002400240024002400240024002400240024002400240024002400240024002400240024002400240024002400240024002400240024002400240024002400240024002400240024002400240024002400240200041ff01710e3635000102030405060708090a0b0c0d0e0f101112131415161718191a1b1c1d1e1f202122232425262728292a2b2c2d2e2f3031323334350b41a604100841020f0b41a604100841030f0b41a604100841040f0b41a604100841050f0b41a604100841060f0b41a604100841070f0b41a604100841080f0b41a604100841090f0b41a6041008410a0f0b41a6041008410b0f0b41a6041008410c0f0b41a6041008410d0f0b41a6041008410e0f0b41a6041008410f0f0b41a604100841100f0b41a604100841110f0b41a604100841120f0b41a604100841130f0b41a604100841140f0b41a604100841150f0b41a604100841160f0b41a604100841170f0b41a604100841180f0b41a604100841190f0b41a6041008411a0f0b41a6041008411b0f0b41a6041008411c0f0b41a6041008411d0f0b41a6041008411e0f0b41a6041008411f0f0b41a604100841200f0b41a604100841210f0b41a604100841220f0b41a604100841230f0b41a604100841240f0b41a604100841250f0b41a604100841260f0b41a604100841270f0b41a604100841280f0b41f20c1008200141ff01714180f803720f0b41f20c1008200141ff01714180fa03720f0b41f20c1008200141ff01714180fc03720f0b41f20c1008200141ff01714180fe03720f0b41f20c1008200041107641808004720f0b41a604100841290f0b41a6041008412a0f0b41a6041008412b0f0b41a6041008412c0f0b41a6041008412d0f0b41a6041008412e0f0b41a6041008412f0f0b41a604100841300f0b41f4031008413121020b418603100820020bab6309087f017e017f017e017f017e017f017e087f41b8f0111008230041e0026b2200240020004100360290020240024002400240024002400240418080c000410620004190026a1001230141086a2401230141f4034b0440000b100e230141086b2401220141ff017122024136460d0041a69702100820024101470d01419c960410084101230141016a2401230141f4034b0440000b1009230141016b2401000b41f2b3021008024002402000280290022202450d0041a6970210082002417f4c0d0341ccad06100820024101230141096a2401230141f4034b0440000b100f230141096b24012203450d0441d8cf0a100802400240418080c0004106200320021002230141086a2401230141f4034b0440000b100e230141086b2401220141ff01714136470d0041f0ad02100820032d0000220141c0004b0d0141849f0210082002417f6a22042001490d0141e28a12100820004190026a20016a410041c00020016b230141036a2401230141f4034b0440000b1020230141036b24011a20004190026a200341016a2001230141036a2401230141f4034b0440000b1023230141036b24011a20004180016a41376a2205200041c8026a29000037000020004180016a41306a2206200041c1026a29000037030020004180016a41286a2207200041b9026a290000220837030020004180016a41206a2209200041b1026a290000220a37030020004180016a41186a220b200041a9026a290000220c37030020004180016a41106a220d200041a1026a290000220e370300200041c0016a41086a220f20004190026a41096a290000370300200041c0016a41106a2210200e370300200041c0016a41186a2211200c370300200041c0016a41206a2212200a370300200041c0016a41286a22132008370300200041c0016a41306a22142006290300370300200041c0016a41376a2215200529000037000020002000290091023703c001200420016b450d0341d2ab061008200320024101230141086a2401230141f4034b0440000b1010230141086b24010c020b41ceb2081008200320024101230141036a2401230141f4034b0440000b1011230141036b24012001230141016a2401230141f4034b0440000b1009230141016b2401000b419a9a041008200320024101230141086a2401230141f4034b0440000b1010230141086b24010b419c960410084102230141016a2401230141f4034b0440000b1009230141016b2401000b419ef613100820002d0090022116200041c0006a41376a22012015290000370000200041c0006a41306a22042014290300370300200041c0006a41286a22142013290300370300200041c0006a41206a22132012290300370300200041c0006a41186a22122011290300370300200041c0006a41106a22112010290300370300200041c0006a41086a2210200f290300370300200020002903c001370340200320024101230141086a2401230141f4034b0440000b1010230141086b240120004180016a41086a2010290300370300200d2011290300370300200b2012290300370300200920132903003703002007201429030037030020062004290300370300200520012900003700002000200029034037038001200041c48ac000360240200041002802e482403602c001024041094101200041c0016a200041c0006a419481c0002301410b6a2401230141f4034b0440000b10122301410b6b24012202450d0041cccd021008410020002802c0013602e482400c060b41848b071008200020002802402201280200360290020240418010410420004190026a419481c00041ac81c0002301410b6a2401230141f4034b0440000b10122301410b6b24012202450d0041e4cf02100820012000280290023602000c040b4184f2101008024002404101230141036a2401230141f4034b0440000b1024230141036b24012202417f470d0041e4cf02100820012000280290023602000c010b41bab7081008200241107422024100360204200220002802900236020820022002418280046a3602002000200236029002418010410420004190026a419481c00041ac81c0002301410b6a2401230141f4034b0440000b10122301410b6b24012102200120002802900236020020020d040b41cccd021008410020002802c0013602e482400c040b41b4980410082001230141016a2401230141f4034b0440000b1009230141016b2401000b419c960410084122230141016a2401230141f4034b0440000b1009230141016b2401000b419c960410084113230141016a2401230141f4034b0440000b1009230141016b2401000b41f4b608100820024100360204200220002802c001360208200220024180c0006a410272360200200020023602c00141094101200041c0016a200041c0006a419481c0002301410b6a2401230141f4034b0440000b10122301410b6b24012102410020002802c0013602e482402002450d010b41b2d60d1008200220002903c0013700052002410d6a200041c0016a41086a290300370000200241156a200041c0016a41106a2903003700002002411c6a200041c0016a41176a280000360000200220033a000020022005200641107472410874200172360001200041206a41086a200241096a290000370300200041206a41106a200241116a290000370300200041206a41176a200241186a29000037000041002802e082402105200229000121084100200241786a22013602e0824020002008370320200128020021062002200536020020012006417e71360200200041c48ac000360240200020013602c0010240024041084101200041c0016a200041c0006a419481c0002301410b6a2401230141f4034b0440000b10122301410b6b24012202450d0041cccd021008410020002802c0013602e082400c010b41aac70f10082000200028024022012802003602900202400240418010410420004190026a419481c00041ac81c0002301410b6a2401230141f4034b0440000b10122301410b6b24012202450d0041e4cf02100820012000280290023602000c010b4184f2101008024002404101230141036a2401230141f4034b0440000b1024230141036b24012202417f470d0041e4cf02100820012000280290023602000c010b41bab7081008200241107422024100360204200220002802900236020820022002418280046a3602002000200236029002418010410420004190026a419481c00041ac81c0002301410b6a2401230141f4034b0440000b10122301410b6b24012102200120002802900236020020020d010b41b0c0001008410020002802c0013602e0824000000b20024100360204200220002802c001360208200220024180c0006a410272360200200020023602c00141084101200041c0016a200041c0006a419481c0002301410b6a2401230141f4034b0440000b10122301410b6b24012102410020002802c0013602e082402002450d010b419ad609100820022000290320370001200220033a0000200241186a200041376a290000370000200241116a200041306a290300370000200241096a200041286a290300370000200041c48ac0\"\n```\n\n----------------------------------------\n\nTITLE: Generating Casper account hash\nDESCRIPTION: Generate the account hash for a Casper account using the Casper CLI client.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/versioned_docs/version-2.0.0/developers/prerequisites.md#2025-04-22_snippet_23\n\nLANGUAGE: bash\nCODE:\n```\ncasper-client account-address --public-key <path-to-public_key.pem/public-key-hex>\n```\n\n----------------------------------------\n\nTITLE: Calling a Casper Contract Entry Point using Python SDK\nDESCRIPTION: This snippet demonstrates calling a specific entry point (`update_msg`) of an existing contract identified by its hash, using the `pycspr` Python library. It involves setting up a node client, creating deploy parameters, defining payment, and specifying the session as a `StoredContractByHash` with the entry point name, contract hash, and necessary arguments. The deploy is approved, sent, and the resulting hash is printed.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/docs/developers/dapps/sdk/client-library-usage.md#2025-04-22_snippet_16\n\nLANGUAGE: python\nCODE:\n```\nimport pycspr\nclient = NodeClient(NodeConnection(host = \"NODE_ADDRESS\", port_rpc = 7777))\ndeployParams = pycspr.create_deploy_parameters(\n    account = keypair,\n    chain_name = \"casper-test\"\n)\npayment = pycspr.create_standard_payment(10_000_000_000)\nsession = pycspr.types.StoredContractByHash(\n    entry_point = \"update_msg\",\n    hash = bytes.fromhex(\"a3cac24aec9de1bbdb87083587b14d8aeffba5dfed27686512b7bb5dee60445d\"),\n    args = {\n        \"message\": pycspr.types.CL_String(\"Hello world!\"),\n    }\n)\ndeploy = pycspr.create_deploy(deployParams, payment, session)\ndeploy.approve(keypair)\nclient.send_deploy(deploy)\nprint(deploy.hash.hex())\n```\n\n----------------------------------------\n\nTITLE: Invoking Contract Entry Point with Single Authorization Key in Rust\nDESCRIPTION: Code that calls a contract's entry point using a deploy authorized with a single key (account_addr_1). The entry point will return the intersection between the caller's and installer's authorization keys.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/docs/resources/advanced/list-auth-keys-tutorial.md#2025-04-22_snippet_10\n\nLANGUAGE: rust\nCODE:\n```\nlet contract_hash = builder\n    .get_expected_account(*DEFAULT_ACCOUNT_ADDR)\n    .named_keys()\n    .get(CONTRACT_HASH)\n    .expect(\"must have this entry in named keys\")\n    .into_hash()\n    .map(ContractHash::new)\n    .unwrap();\n\nlet entry_point_deploy_item = DeployItemBuilder::new()\n    .with_empty_payment_bytes(runtime_args! {ARG_AMOUNT => *DEFAULT_PAYMENT})\n    .with_authorization_keys(&[account_addr_1])\n    .with_address(account_addr_1)\n    .with_stored_session_hash(contract_hash, ENTRYPOINT, runtime_args! {})\n    .build();\n\nlet entry_point_request =\n    ExecuteRequestBuilder::from_deploy_item(entry_point_deploy_item).build();\n\nbuilder.exec(entry_point_request).expect_success().commit();\n```\n\n----------------------------------------\n\nTITLE: Defining Block Retrieval Methods\nDESCRIPTION: This JSON schema defines two methods for retrieving a block in the Casper network: by \"Hash\" and by \"Height\". It includes the necessary properties for each method, dictating the required parameters and their types. The first method uses a block hash reference while the second employs a block height integer. No additional properties are allowed, ensuring that the input strictly adheres to one of these two schemas.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/condor/jsonrpc-comp/rpc-2.0/schema/BlockIdentifier.json.md#2025-04-22_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"description\": \"Identifier for possible ways to retrieve a block.\",\n    \"oneOf\": [\n        {\n            \"description\": \"Identify and retrieve the block with its hash.\",\n            \"type\": \"object\",\n            \"required\": [\n                \"Hash\"\n            ],\n            \"properties\": {\n                \"Hash\": {\n                    \"$ref\": \"#/components/schemas/BlockHash\"\n                }\n            },\n            \"additionalProperties\": false\n        },\n        {\n            \"description\": \"Identify and retrieve the block with its height.\",\n            \"type\": \"object\",\n            \"required\": [\n                \"Height\"\n            ],\n            \"properties\": {\n                \"Height\": {\n                    \"type\": \"integer\",\n                    \"format\": \"uint64\",\n                    \"minimum\": 0\n                }\n            },\n            \"additionalProperties\": false\n        }\n    ]\n}\n```\n\n----------------------------------------\n\nTITLE: Calling Contract Entry Points on Casper Network\nDESCRIPTION: Examples of how to call entry points on deployed smart contracts using different SDK implementations. Includes setting up contract hash, runtime arguments, and handling deploy responses.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/versioned_docs/version-2.0.0/developers/dapps/sdk/client-library-usage.md#2025-04-22_snippet_17\n\nLANGUAGE: javascript\nCODE:\n```\nconst casperClient = new CasperClient(\"http://NODE_ADDRESS:7777/rpc\");\nconst contract = new Contracts.Contract(casperClient);\ncontract.setContractHash(\n\t\"hash-a3cac24aec9de1bbdb87083587b14d8aeffba5dfed27686512b7bb5dee60445d\"\n);\nconst runtimeArguments = RuntimeArgs.fromMap({\n  \"message\": CLValueBuilder.string(\"Hello world!\")\n})\nconst deploy = contract.callEntrypoint(\n  \"update_msg\",\n  runtimeArguments,\n  keypair.publicKey,\n  \"casper\", // or \"casper-test\" for Testnet\n  \"1000000000\", // 1 CSPR (10^9 Motes)\n  [keypair]\n);\n(async () => {\n  console.log(await casperClient.putDeploy(deploy))\n})();\n```\n\nLANGUAGE: python\nCODE:\n```\nimport pycspr\nclient = NodeClient(NodeConnection(host = \"NODE_ADDRESS\", port_rpc = 7777))\ndeployParams = pycspr.create_deploy_parameters(\n    account = keypair,\n    chain_name = \"casper-test\"\n)\npayment = pycspr.create_standard_payment(10_000_000_000)\nsession = pycspr.types.StoredContractByHash(\n    entry_point = \"update_msg\",\n    hash = bytes.fromhex(\"a3cac24aec9de1bbdb87083587b14d8aeffba5dfed27686512b7bb5dee60445d\"),\n    args = {\n        \"message\": pycspr.types.CL_String(\"Hello world!\"),\n    }\n)\ndeploy = pycspr.create_deploy(deployParams, payment, session)\ndeploy.approve(keypair)\nclient.send_deploy(deploy)\nprint(deploy.hash.hex())\n```\n\n----------------------------------------\n\nTITLE: Enabling Contract - Casper Network CLI\nDESCRIPTION: Command to enable a contract using its contract hash and package hash.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/docs/operators/setup-network/create-private.md#2025-04-22_snippet_21\n\nLANGUAGE: sh\nCODE:\n```\ncasper-client \\\n  put-deploy \\\n  -n $NODE_ADDR \\\n  --chain-name $CHAIN_NAME \\\n  --secret-key admin/secret_key.pem \\\n  --session-account=$(<alice/public_key_hex) \\\n  --session-path enable_contract.wasm \\\n  --payment-amount 3000000000 \\\n  --session-arg \"contract_package_hash:account_hash='account-hash-$CONTRACT_PACKAGE_HASH'\" \\\n  --session-arg \"contract_hash:account_hash='account-hash-$CONTRACT_HASH'\"\n```\n\n----------------------------------------\n\nTITLE: Querying Entity Information in Casper Global State - Bash\nDESCRIPTION: This bash command queries for information about a specific entity (like an account or contract) identified by an entity identifier within the global state using the Casper CLI. It requires the node address and entity identifier as parameters. The result will include relevant metadata such as NamedKeys and other stateful information, assisting in smart contract introspection during tests.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/versioned_docs/version-2.0.0/developers/dapps/nctl-test.md#2025-04-22_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\n$(get_path_to_client) get-entity \\\n--node-address http://localhost:11101 \\\n--entity-identifier <ENTITY IDENTIFIER>\n```\n\n----------------------------------------\n\nTITLE: Creating and Sending a Signed Casper Network Deploy in JavaScript\nDESCRIPTION: This snippet demonstrates how to create a signed deploy for the Casper Network using the signature from a Ledger device and send it to the network using the casper-js-sdk.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/versioned_docs/version-2.0.0/resources/advanced/list-cspr.md#2025-04-22_snippet_10\n\nLANGUAGE: javascript\nCODE:\n```\nimport { DeployUtil, CLPublicKey } from 'casper-js-sdk';\n\nconst signedDeploy = DeployUtil.setSignature(\n  deploy,\n  signatureRS,\n  CLPublicKey.fromHex(accountPublicKey)\n);\n\ncasperService.deploy(signedDeploy)\n```\n\n----------------------------------------\n\nTITLE: Testing CEP-18 Token Properties in Rust\nDESCRIPTION: This unit test verifies the queryable properties of the CEP-18 token contract, including name, symbol, decimals, total supply, and account balances.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/docs/resources/tokens/cep18/tests.md#2025-04-22_snippet_6\n\nLANGUAGE: rust\nCODE:\n```\n#[test]\nfn should_have_queryable_properties() {\n    let (mut builder, TestContext { cep18_token, .. }) = setup();\n\n    let name: String = builder.get_value(cep18_token, NAME_KEY);\n    assert_eq!(name, TOKEN_NAME);\n\n    let symbol: String = builder.get_value(cep18_token, SYMBOL_KEY);\n    assert_eq!(symbol, TOKEN_SYMBOL);\n\n    let decimals: u8 = builder.get_value(cep18_token, DECIMALS_KEY);\n    assert_eq!(decimals, TOKEN_DECIMALS);\n\n    let total_supply: U256 = builder.get_value(cep18_token, TOTAL_SUPPLY_KEY);\n    assert_eq!(total_supply, U256::from(TOKEN_TOTAL_SUPPLY));\n\n    let owner_key = Key::Account(*DEFAULT_ACCOUNT_ADDR);\n\n    let owner_balance = cep18_check_balance_of(&mut builder, &cep18_token, owner_key);\n    assert_eq!(owner_balance, total_supply);\n\n    let contract_balance =\n        cep18_check_balance_of(&mut builder, &cep18_token, Key::Hash(cep18_token.value()));\n    assert_eq!(contract_balance, U256::zero());\n\n    // Ensures that Account and Contract ownership is respected and we're not keying ownership under\n    // the raw bytes regardless of variant.\n    let inverted_owner_key = invert_cep18_address(owner_key);\n    let inverted_owner_balance =\n        cep18_check_balance_of(&mut builder, &cep18_token, inverted_owner_key);\n    assert_eq!(inverted_owner_balance, U256::zero());\n}\n```\n\n----------------------------------------\n\nTITLE: Registering a Recipient for CEP-78 NFTs\nDESCRIPTION: Code snippet for registering a token recipient when using OwnerReverseLookupMode.Complete. This registration is required before an account can receive NFTs in contracts with reverse lookup enabled.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/versioned_docs/version-2.0.0/resources/tokens/cep78/js-tutorial.md#2025-04-22_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nconst registerDeploy = cc.register(\n      {\n        tokenOwner: USER1_KEYS.publicKey,\n      },\n      \"1000000000\",\n      USER1_KEYS.publicKey,\n      [USER1_KEYS]\n    );\n\n    const registerDeployHash = await registerDeploy.send(\"http://localhost:11101/rpc\");\n```\n\n----------------------------------------\n\nTITLE: Approve Token Allowance Using Casper Client Bash\nDESCRIPTION: This code snippet presents a bash command for approving a token allowance in which an account permits another account to spend a specific number of CEP-18 tokens. Key parameters include node URL, chain name, secret key path, contract hash, entry point, spender's account hash, token allowance amount, and gas payment.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/docs/resources/tokens/cep18/transfer.md#2025-04-22_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\ncasper-client put-deploy -n http://<node IP>:<PORT>\\\n--chain-name <CHAIN NAME> \\\n--secret-key ~/casper/demo/user_a/secret_key.pem \\\n--session-hash hash-05d893e76c731729fc26339e5a970bd79fbf4a6adf743c8385431fb494bff45e \\\n--session-entry-point \"approve\" \\\n--session-arg \"spender:key='account-hash-17192017d32db5dc9f598bf8ac6ac35ee4b64748669b00572d88335941479513'\" \\\n--session-arg \"amount:u256='15'\" \\\n--payment-amount \"10000000000\"\n```\n\n----------------------------------------\n\nTITLE: Increasing CEP-18 Token Allowance via Casper Client\nDESCRIPTION: Sends a deploy using `casper-client` to call the `increase_allowance` entry point of a CEP-18 contract package. This increases the amount of tokens the specified `spender` account is allowed to transfer from the caller's (`--secret-key`) balance. Requires node address, caller's secret key, CEP-18 package name, spender account hash, the amount to increase the allowance by, chain name, and payment amount.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/versioned_docs/version-1.5.X/resources/tokens/cep18/transfer.md#2025-04-22_snippet_16\n\nLANGUAGE: bash\nCODE:\n```\ncasper-client put-deploy -n http://<NODE IP>:<PORT> \\\n--secret-key ~/casper/demo/user_a/secret_key.pem \\\n--session-package-name \"cep18_contract_package_CEP18\" \\\n--session-entry-point \"increase_allowance\" \\\n// This is the account hash of the previously authorized allowance account.\n--session-arg \"spender:key='account-hash-683f53f56926f54ef9584b07585b025c68415dc05f7b2e56749153574b83d5cd'\" \\\n// This is the additional number of CEP-18 tokens that the authorized account may spend.\n--session-arg \"amount:U256='10'\" \\\n--chain-name <CHAIN NAME> \\\n--payment-amount 1000000000\n```\n\n----------------------------------------\n\nTITLE: Creating a Message Topic in Rust for Casper Network Contracts\nDESCRIPTION: This code snippet demonstrates how to create a new message topic called 'EVENTS_TOPIC' using the manage_message_topic runtime function. This allows the contract to emit messages under this topic.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/versioned_docs/version-2.0.0/developers/writing-onchain-code/emitting-contract-events.md#2025-04-22_snippet_0\n\nLANGUAGE: rust\nCODE:\n```\nruntime::manage_message_topic(EVENTS_TOPIC, MessageTopicOperation::Add).unwrap_or_revert();\n```\n\n----------------------------------------\n\nTITLE: Writing Dictionary Entries\nDESCRIPTION: Basic syntax for writing entries into a dictionary using dictionary_put.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/versioned_docs/version-2.0.0/concepts/dictionaries.md#2025-04-22_snippet_2\n\nLANGUAGE: rust\nCODE:\n```\nstorage::dictionary_put(dictionary_uref, &dictionary_item_key, value);\n```\n\n----------------------------------------\n\nTITLE: Example Speculative Execution Request in Casper Network\nDESCRIPTION: A sample JSON-RPC request demonstrating how to call the speculative_exec endpoint. The request includes a complete Deploy object with header information, payment details, session details for a transfer operation, and approval signatures.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/versioned_docs/version-2.0.0/developers/json-rpc/json-rpc-transactional.md#2025-04-22_snippet_4\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"jsonrpc\": \"2.0\",\n  \"method\": \"speculative_exec\",\n  \"params\": {\n    \"deploy\": {\n      \"hash\": \"b6aa46333fb858deee7f259a5bca581251c6200a5d902aeb1244c3a7169b5971\",\n      \"header\": {\n        \"account\": \"01a2905e4680aa49e0b44100d9dfc861b9605bb35f9956b1e99eb43863363d80aa\",\n        \"timestamp\": \"2023-05-23T13:32:45.554Z\",\n        \"ttl\": \"30m\",\n        \"gas_price\": 1,\n        \"body_hash\": \"74db109805bb20de43ef89a5b084544a858908b236601519d5827cd9b7fbb925\",\n        \"dependencies\": [],\n        \"chain_name\": \"integration-test\"\n      },\n      \"payment\": {\n        \"ModuleBytes\": {\n          \"module_bytes\": \"\",\n          \"args\": [\n            [\n              \"amount\",\n              {\n                \"cl_type\": \"U512\",\n                \"bytes\": \"0400e1f505\",\n                \"parsed\": \"100000000\"\n              }\n            ]\n          ]\n        }\n      },\n      \"session\": {\n        \"Transfer\": {\n          \"args\": [\n            [\n              \"amount\",\n              {\n                \"cl_type\": \"U512\",\n                \"bytes\": \"0400f90295\",\n                \"parsed\": \"2500000000\"\n              }\n            ],\n            [\n              \"target\",\n              {\n                \"cl_type\": \"PublicKey\",\n                \"bytes\": \"01265ea737411b349ad3d0fc724c2c588acd2765c057e5c690cd5e3dade401782b\",\n                \"parsed\": \"01265ea737411b349ad3d0fc724c2c588acd2765c057e5c690cd5e3dade401782b\"\n              }\n            ],\n            [\n              \"id\",\n              {\n                \"cl_type\": {\n                  \"Option\": \"U64\"\n                },\n                \"bytes\": \"010000000000000000\",\n                \"parsed\": 0\n              }\n            ]\n          ]\n        }\n      },\n      \"approvals\": [\n        {\n          \"signer\": \"01a2905e4680aa49e0b44100d9dfc861b9605bb35f9956b1e99eb43863363d80aa\",\n          \"signature\": \"01c94d517d5bbc8d5c74e0e68b8cb308561ff979a1c91907b56d427cc90156c437726c0b736d17f7303f2db66e405c7e5c8175b8b863703938eff1659766dff808\"\n        }\n      ]\n    }\n  },\n  \"id\": 6889533540839698701\n}\n```\n\n----------------------------------------\n\nTITLE: Example Delegation Using System Auction Contract - Casper Client - Bash\nDESCRIPTION: This Bash snippet is a real-world example of delegating 500 CSPR on the Casper Testnet using the system auction contract. It demonstrates actual parameter values including network address, chain name, key file path, payment amount, session hash, and typical validator and delegator public keys. This example is intended for users to modify or replicate in their own testing or deployments. The output is a deploy hash.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/versioned_docs/version-2.0.0/developers/cli/delegate.md#2025-04-22_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ncasper-client put-deploy \\\n--node-address http://65.21.75.254:7777  \\\n--chain-name casper-test \\\n--secret-key ~/KEYS/secret_key.pem \\\n--payment-amount 2500000000 \\\n--session-hash hash-93d923e336b20a4c4ca14d592b60e5bd3fe330775618290104f9beb326db7ae2 \\\n--session-entry-point delegate \\\n--session-arg \"validator:public_key='01aa17f7b9889480b1bd34c3f94f263b229c7a9b01dd4dda19c2dd1d38d176c7a0'\" \\\n--session-arg \"amount:u512='500000000000'\" \\\n--session-arg \"delegator:public_key='01e3d3392c2e0b943abe709b25de5c353e5e1e9d95c7a76e3dd343d8aa1aa08d51'\"\n```\n\n----------------------------------------\n\nTITLE: Calling Auction Contract with Arguments\nDESCRIPTION: Complete example showing how to call the Auction contract's delegate entry point with three session arguments: validator, amount, and delegator. Demonstrates passing multiple typed arguments to a contract.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/versioned_docs/version-1.5.X/developers/cli/calling-contracts.md#2025-04-22_snippet_3\n\nLANGUAGE: rust\nCODE:\n```\ncasper-client put-deploy \\\n    --node-address http://65.21.235.219:7777 \\\n    --chain-name casper-test \\\n    --secret-key [KEY_PATH]/secret_key.pem \\\n    --payment-amount 2500000000 \\\n    --session-hash hash-93d923e336b20a4c4ca14d592b60e5bd3fe330775618290104f9beb326db7ae2 \\\n    --session-entry-point \"delegate\" \\\n    --session-arg \"validator:public_key='0145fb72c75e1b459839555d70356a5e6172e706efa204d86c86050e2f7878960f'\" \\\n    --session-arg \"amount:u512='500000000000'\" \\\n    --session-arg \"delegator:public_key='0154d828baafa6858b92919c4d78f26747430dcbecb9aa03e8b44077dc6266cabf'\"\n```\n\n----------------------------------------\n\nTITLE: Calling Counter Contract by Package Hash\nDESCRIPTION: Example of calling the Counter contract's counter-inc entry point using its package hash and version 1.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/versioned_docs/version-2.0.0/developers/cli/calling-contracts.md#2025-04-22_snippet_6\n\nLANGUAGE: rust\nCODE:\n```\ncasper-client put-deploy \\\n    --node-address http://65.21.235.219:7777 \\\n    --chain-name casper-test \\\n    --secret-key [KEY_PATH]/secret_key.pem \\\n    --payment-amount 100000000 \\\n    --session-package-hash hash-76a8c3daa6d6ac799ce9f46d82ac98efb271d2d64b517861ec89a06051ef019e \\\n    --session-entry-point \"counter-inc\" \\\n    --session-version 1\n```\n\n----------------------------------------\n\nTITLE: Transferring NFT using Stored Contract Hash\nDESCRIPTION: Example of transferring an NFT using the stored contract hash via the Casper client. This command invokes the 'transfer' entrypoint, specifying the source and target accounts, and the token ID.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/versioned_docs/version-1.5.X/resources/tokens/cep78/using-casper-client/interacting-with-NFTs.md#2025-04-22_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ncasper-client put-deploy --node-address http://localhost:11101/rpc/ \\\n--chain-name \"casper-net-1\" \\\n--payment-amount 5000000000 \\\n--secret-key ~/casper/casper-node/utils/nctl/assets/net-1/nodes/node-1/keys/secret_key.pem \\\n--session-hash hash-378a43e38bc5129d8aa3bcd04f5c9a97be73f85b5be574182ac1346f04520796 \\\n--session-entry-point \"transfer\" \\\n--session-arg \"source_key:key='account-hash-e70dbca48c2d31bc2d754e51860ceaa8a1a49dc627b20320b0ecee1b6d9ce655'\" \\\n--session-arg \"target_key:key='account-hash-0ea7998b2822afe5b62b08a21d54c941ad791279b089f3f7ede0d72b477eca34'\" \\\n--session-arg \"token_id:u64='0'\"\n```\n\n----------------------------------------\n\nTITLE: Defining \"info_get_reward\" RPC Endpoint in JSON\nDESCRIPTION: This JSON structure defines the \"info_get_reward\" RPC endpoint, which returns reward information for a validator or delegator for a specified era. It requires a public key for a validator and can optionally accept an era identifier and a delegator's public key. This RPC call returns an object containing details such as the API version, era ID, reward amount, and delegation rate. The JSON schema ensures proper request and response validation.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/condor/jsonrpc-comp/rpc-2.0/info_get_reward.json.md#2025-04-22_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"name\": \"info_get_reward\",\n  \"summary\": \"returns the reward for a given era and a validator or a delegator\",\n  \"params\": [\n    {\n      \"name\": \"validator\",\n      \"schema\": {\n        \"description\": \"The public key of the validator.\",\n        \"$ref\": \"#/components/schemas/PublicKey\"\n      },\n      \"required\": true\n    },\n    {\n      \"name\": \"era_identifier\",\n      \"schema\": {\n        \"description\": \"The era identifier. If `None`, the last finalized era is used.\",\n        \"anyOf\": [\n          {\n            \"$ref\": \"#/components/schemas/EraIdentifier\"\n          },\n          {\n            \"type\": \"null\"\n          }\n        ]\n      },\n      \"required\": false\n    },\n    {\n      \"name\": \"delegator\",\n      \"schema\": {\n        \"description\": \"The public key of the delegator. If `Some`, the rewards for the delegator are returned. If `None`, the rewards for the validator are returned.\",\n        \"anyOf\": [\n          {\n            \"$ref\": \"#/components/schemas/PublicKey\"\n          },\n          {\n            \"type\": \"null\"\n          }\n        ]\n      },\n      \"required\": false\n    }\n  ],\n  \"result\": {\n    \"name\": \"info_get_reward_result\",\n    \"schema\": {\n      \"description\": \"Result for \\\"info_get_reward\\\" RPC response.\",\n      \"type\": \"object\",\n      \"required\": [\n        \"api_version\",\n        \"delegation_rate\",\n        \"era_id\",\n        \"reward_amount\"\n      ],\n      \"properties\": {\n        \"api_version\": {\n          \"description\": \"The RPC API version.\",\n          \"type\": \"string\"\n        },\n        \"reward_amount\": {\n          \"description\": \"The total reward amount in the requested era.\",\n          \"$ref\": \"#/components/schemas/U512\"\n        },\n        \"era_id\": {\n          \"description\": \"The era for which the reward was calculated.\",\n          \"$ref\": \"#/components/schemas/EraId\"\n        },\n        \"delegation_rate\": {\n          \"description\": \"The delegation rate of the validator.\",\n          \"type\": \"integer\",\n          \"format\": \"uint8\",\n          \"minimum\": 0.0\n        }\n      },\n      \"additionalProperties\": false\n    }\n  },\n  \"examples\": [\n    {\n      \"name\": \"info_get_reward_example\",\n      \"params\": [\n        {\n          \"name\": \"era_identifier\",\n          \"value\": {\n            \"Era\": 1\n          }\n        },\n        {\n          \"name\": \"validator\",\n          \"value\": \"01d9bf2148748a85c89da5aad8ee0b0fc2d105fd39d41a4c796536354f0ae2900c\"\n        },\n        {\n          \"name\": \"delegator\",\n          \"value\": \"01d9bf2148748a85c89da5aad8ee0b0fc2d105fd39d41a4c796536354f0ae2900c\"\n        }\n      ],\n      \"result\": {\n        \"name\": \"info_get_reward_example_result\",\n        \"value\": {\n          \"api_version\": \"2.0.0\",\n          \"reward_amount\": \"42\",\n          \"era_id\": 1,\n          \"delegation_rate\": 20\n        }\n      }\n    }\n  ]\n}\n\n```\n\n----------------------------------------\n\nTITLE: Retrieving Account Hash using Casper Client\nDESCRIPTION: This command uses the `casper-client` tool to retrieve the account hash associated with a given public key. The user must provide the path to their public key file. The account hash is needed for querying the network state related to the account.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/docs/resources/beginner/counter-testnet/walkthrough.md#2025-04-22_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ncasper-client account-address --public-key [PATH_TO_PUBLIC_KEY]\n```\n\n----------------------------------------\n\nTITLE: Compiling and Preparing Casper Smart Contracts - Bash\nDESCRIPTION: This snippet demonstrates preparing and compiling a smart contract for the Casper blockchain using a Makefile-driven workflow in Bash. The commands navigate to the contract directory, prepare the build environment, and compile the contract to WASM format, which is required for upload to the Casper network. Ensure Make and Cargo are installed and that the contract source code is present in the specified directories.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/versioned_docs/version-2.0.0/resources/advanced/cross-contract.md#2025-04-22_snippet_8\n\nLANGUAGE: bash\nCODE:\n```\ncd cross-contract\\nmake prepare\\nmake build-contract\\n\n```\n\n----------------------------------------\n\nTITLE: Querying Global State on Casper Network\nDESCRIPTION: This Bash script allows querying the global state of the Casper network using the `casper-client`. Users need the node address, state root hash, and account hash to execute the query, examining the state of deployed contracts and account named keys.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/versioned_docs/version-2.0.0/resources/advanced/cross-contract.md#2025-04-22_snippet_19\n\nLANGUAGE: Bash\nCODE:\n```\ncasper-client query-global-state \\\n  --node-address http://136.243.187.84:7777 \\\n  --state-root-hash 2f3e100324deb999107229dbec5c4b724653174328c99ea0836931248c3cc9cb \\\n  --key account-hash-ee57bb3b39eb66b74a1dcf12f3f0e7d8e906e34b11f85dc05497bf33fbf3a1f9\n```\n\n----------------------------------------\n\nTITLE: Configuring Contract Package Versioning in Casper Network\nDESCRIPTION: This snippet defines a Package configuration with version information for a smart contract. It tracks the entity version, addressable entity hash, disabled versions, groups, and lock status of the contract package.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/docs/developers/json-rpc/json-rpc-transactional.md#2025-04-22_snippet_16\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"key\": \"package-154847e85beee3b5cd1c769b8f01dbc4b93d1cea8370c0b3bc1858d0d248a48b\",\n    \"kind\": {\n        \"Write\": {\n            \"Package\": {\n                \"versions\": [\n                    {\n                        \"entity_version_key\": {\n                            \"protocol_version_major\": 2,\n                            \"entity_version\": 1\n                        },\n                        \"addressable_entity_hash\": \"addressable-entity-eb1c971063155d461059292e91cfe2212d45b79a49294b8d90bdae18cda6e59e\"\n                    }\n                ],\n                \"disabled_versions\": [],\n                \"groups\": [],\n                \"lock_status\": \"Unlocked\"\n            }\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Transferring NFT Between Users using Casper Client\nDESCRIPTION: Command to transfer an NFT from one user to another on the Casper Network. Uses the transfer function with parameters including contract hash, source and target account hashes, identifier mode, and token ID. Requires a payment amount of 5000000000.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/docs/resources/tokens/cep78/using-casper-client.md#2025-04-22_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\ncasper-client put-deploy -n http://localhost:11101/rpc --chain-name \"casper-net-1\" \\\n--payment-amount 5000000000 \\\n-k ~/casper/casper-node/utils/nctl/assets/net-1/nodes/node-2/keys/secret_key.pem \\\n--session-path ~/casper/enhanced-nft/client/transfer_session/target/wasm32-unknown-unknown/release/transfer_call.wasm \\\n--session-arg \"nft_contract_hash:key='hash-52e78ae3f6c485d036a74f65ebbb8c75fcc7c33fb42eb667fb32aeba72c63fb5'\" \\\n--session-arg \"source_key:key='account-hash-e9ff87766a1d2bab2565bfd5799054946200b51b20c3ca7e54a9269e00fe7cfb'\" \\\n--session-arg \"target_key:key='account-hash-b4772e7c47e4deca5bd90b7adb2d6e884f2d331825d5419d6cbfb59e17642aab'\" \\\n--session-arg \"is_hash_identifier_mode:bool='false'\" \\\n--session-arg \"token_id:u64='0'\"\n```\n\n----------------------------------------\n\nTITLE: Basic Contract Call Using put-deploy\nDESCRIPTION: Template command for calling a contract using its hash. Shows the basic structure for executing a put-deploy command with required parameters like node address, chain name, secret key, payment amount, session hash and entry point.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/versioned_docs/version-1.5.X/developers/cli/calling-contracts.md#2025-04-22_snippet_0\n\nLANGUAGE: rust\nCODE:\n```\ncasper-client put-deploy \\\n    --node-address [NODE_SERVER_ADDRESS] \\\n    --chain-name [CHAIN_NAME] \\\n    --secret-key [KEY_PATH]/secret_key.pem \\\n    --payment-amount [PAYMENT_AMOUNT_IN_MOTES] \\\n    --session-hash [HEX_STRING] \\\n    --session-entry-point [ENTRY_POINT_FUNCTION]\n```\n\n----------------------------------------\n\nTITLE: Verifying Transaction Command\nDESCRIPTION: Command to verify the transaction status using the transaction hash.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/docs/developers/cli/installing-contracts.md#2025-04-22_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\ncasper-client get-transaction --node-address http://localhost:11101 [TRANSACTION_HASH]\n```\n\n----------------------------------------\n\nTITLE: Simplified CEP-18 Token Transfer Command\nDESCRIPTION: A simplified version of the transfer command without explanatory comments, showing the essential parameters needed for transferring CEP-18 tokens between accounts.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/versioned_docs/version-2.0.0/resources/tokens/cep18/transfer.md#2025-04-22_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ncasper-client put-deploy -n http://<node IP>:<PORT> \\\n--chain-name <CHAIN NAME>\\\n--secret-key ~/casper/demo/user_a/secret_key.pem \\\n--session-hash hash-b568f50a64acc8bbe43462ffe243849a88111060b228dacb8f08d42e26985180 \\\n--session-entry-point \"transfer\" \\\n--session-arg \"recipient:key='account-hash-9f81014b9c7406c531ebf0477132283f4eb59143d7903a2fae54358b26cea44b\" \\\n--session-arg \"amount:u256='50'\" \\\n--payment-amount \"10000000000\"\n```\n\n----------------------------------------\n\nTITLE: Emitting Messages in Casper Network using Rust\nDESCRIPTION: Demonstrates how to emit a message on a previously-created topic using the emit_message runtime function. The code shows error handling with unwrap_or_revert pattern.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/docs/developers/writing-onchain-code/emitting-contract-events.md#2025-04-22_snippet_7\n\nLANGUAGE: rust\nCODE:\n```\nruntime::emit_message(EVENTS_TOPIC, &message.try_into().unwrap()).unwrap_or_revert();\n```\n\n----------------------------------------\n\nTITLE: Querying Block Information with chain_get_block in JSON-RPC\nDESCRIPTION: This snippet demonstrates how to use the chain_get_block method to retrieve information about a specific block on the Casper network. It includes the request format with a block identifier parameter and shows the expected response structure.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/versioned_docs/version-2.0.0/developers/json-rpc/json-rpc-informational.md#2025-04-22_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"id\": 1,\n  \"jsonrpc\": \"2.0\",\n  \"method\": \"chain_get_block\",\n  \"params\": [\n    {\n      \"name\": \"block_identifier\",\n      \"value\": {\n        \"Hash\": \"0744fcb72af43c5cc372039bc5a8bfee48808a9ce414acc0d6338a628c20eb42\"\n      }\n    }\n  ]\n}\n```\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"id\": 1,\n  \"jsonrpc\": \"2.0\",\n  \"result\": {\n    \"name\": \"chain_get_block_result\",\n    \"value\": {\n      \"api_version\": \"2.0.0\",\n      \"block_with_signatures\": {\n        \"block\": {\n          \"Version2\": {\n            \"hash\": \"0744fcb72af43c5cc372039bc5a8bfee48808a9ce414acc0d6338a628c20eb42\",\n            \"header\": {\n              \"parent_hash\": \"0707070707070707070707070707070707070707070707070707070707070707\",\n              \"state_root_hash\": \"0808080808080808080808080808080808080808080808080808080808080808\",\n              \"body_hash\": \"48859fb4865d8637d6a35cb224e222cd0e1b1c2dd72928932c1e35ac0550818b\",\n              \"random_bit\": true,\n              \"accumulated_seed\": \"ac979f51525cfd979b14aa7dc0737c5154eabe0db9280eceaa8dc8d2905b20d5\",\n              \"era_end\": {\n                \"equivocators\": [\n                  \"013b6a27bcceb6a42d62a3a8d02a6f0d73653215771de243a63ac048a18b59da29\"\n                ],\n                \"inactive_validators\": [\n                  \"018139770ea87d175f56a35466c34c7ecccb8d8a91b4ee37a25df60f5b8fc9b394\"\n                ],\n                \"next_era_validator_weights\": [\n                  {\n                    \"validator\": \"013b6a27bcceb6a42d62a3a8d02a6f0d73653215771de243a63ac048a18b59da29\",\n                    \"weight\": \"123\"\n                  },\n                  {\n                    \"validator\": \"016e7a1cdd29b0b78fd13af4c5598feff4ef2a97166e3ca6f2e4fbfccd80505bf1\",\n                    \"weight\": \"456\"\n                  },\n                  {\n                    \"validator\": \"018a875fff1eb38451577acd5afee405456568dd7c89e090863a0557bc7af49f17\",\n                    \"weight\": \"789\"\n                  }\n                ],\n                \"rewards\": {},\n                \"next_era_gas_price\": 1\n              },\n              \"timestamp\": \"2020-11-17T00:39:24.072Z\",\n              \"era_id\": 1,\n              \"height\": 10,\n              \"protocol_version\": \"1.0.0\",\n              \"proposer\": \"01d9bf2148748a85c89da5aad8ee0b0fc2d105fd39d41a4c796536354f0ae2900c\",\n              \"current_gas_price\": 1,\n              \"last_switch_block_hash\": \"0a0a0a0a0a0a0a0a0a0a0a0a0a0a0a0a0a0a0a0a0a0a0a0a0a0a0a0a0a0a0a0a\"\n            },\n            \"body\": {\n              \"transactions\": {\n                \"0\": [\n                  {\n                    \"Version1\": \"1414141414141414141414141414141414141414141414141414141414141414\"\n                  }\n                ],\n                \"1\": [\n                  {\n                    \"Version1\": \"1515151515151515151515151515151515151515151515151515151515151515\"\n                  }\n                ],\n                \"2\": [\n                  {\n                    \"Version1\": \"1616161616161616161616161616161616161616161616161616161616161616\"\n                  }\n                ],\n                \"3\": [\n                  {\n                    \"Version1\": \"1717171717171717171717171717171717171717171717171717171717171717\"\n                  }\n                ]\n              },\n              \"rewarded_signatures\": []\n            }\n          }\n        },\n        \"proofs\": [\n          {\n            \"public_key\": \"01d9bf2148748a85c89da5aad8ee0b0fc2d105fd39d41a4c796536354f0ae2900c\",\n            \"signature\": \"01e18ca03d2ef0238a6a2460a222e0b818406bda99d4c05502c80232013559b926d1c8bca6bf65386f54a847d7850cb76c0c5fd5e633c34c749b8b9958a638d806\"\n          }\n        ]\n      }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Minting NFT Using Mint Session Wasm in Bash\nDESCRIPTION: A bash command for minting an NFT using the mint_call.wasm session code, specifying the contract hash, collection name, token owner, and metadata for the NFT to be created.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/docs/resources/tokens/cep78/using-casper-client.md#2025-04-22_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\ncasper-client put-deploy -n http://localhost:11101/rpc --chain-name \"casper-net-1\" \\\n--payment-amount 5000000000 \\\n-k ~/casper/casper-node/utils/nctl/assets/net-1/nodes/node-1/keys/secret_key.pem \\\n--session-path ~/casper/enhanced-nft/client/mint_session/target/wasm32-unknown-unknown/release/mint_call.wasm \\\n--session-arg \"nft_contract_hash:key='hash-206339c3deb8e6146974125bb271eb510795be6f250c21b1bd4b698956669f95'\" \\\n--session-arg \"collection_name:string='cep78_<collection_name>'\"` \\\n--session-arg \"token_owner:key='account-hash-e9ff87766a1d2bab2565bfd5799054946200b51b20c3ca7e54a9269e00fe7cfb'\"  \\\n--session-arg \"token_meta_data:string='{\\\"name\\\": \\\"John Doe\\\",\\\"token_uri\\\": \\\"https:\\/\\/www.barfoo.com\\\",\\\"checksum\\\": \\\"940bffb3f2bba35f84313aa26da09ece3ad47045c6a1292c2bbd2df4ab1a55fb\\\"}'\"\n```\n\n----------------------------------------\n\nTITLE: Transferring NFT Tokens Between Accounts - casper-cep78-js-client - JavaScript\nDESCRIPTION: Presents how to transfer an NFT from one account (source) to another (target) using the transfer method. You must specify the tokenId, source public key, and target public key. The session code usage depends on the contract's lookup mode, and transfer requires sender's keys and an RPC URL. A deploy hash is returned that can be checked for transfer completion.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/docs/resources/tokens/cep78/js-tutorial.md#2025-04-22_snippet_4\n\nLANGUAGE: JavaScript\nCODE:\n```\n\n  const transferDeploy = cc.transfer(\n    {\n      tokenId: \"0\",\n      source: FAUCET_KEYS.publicKey,\n      target: USER1_KEYS.publicKey,\n    },\n    { useSessionCode: true },\n    \"13000000000\",\n    FAUCET_KEYS.publicKey,\n    [FAUCET_KEYS]\n  );\n\n  const transferDeployHash = await transferDeploy.send(\"http://localhost:11101/rpc\");\n\n```\n\n----------------------------------------\n\nTITLE: Describing BlockTime Serialization (Casper Network)\nDESCRIPTION: Specifies that BlockTime, representing the time associated with a block, is serialized simply as a single u64 value.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/versioned_docs/version-2.0.0/concepts/serialization/types.md#2025-04-22_snippet_4\n\nLANGUAGE: Text\nCODE:\n```\n## BlockTime {#blocktime}\n\nThe block time serialized as a single `u64` value.\n```\n\n----------------------------------------\n\nTITLE: Contract Named Keys Definition\nDESCRIPTION: Definition of named keys for a CEP18 token contract including token metadata like decimals, name, symbol and configuration flags.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/versioned_docs/version-2.0.0/developers/cli/sending-transactions.md#2025-04-22_snippet_5\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"named_key\": {\n    \"cl_type\": \"Key\",\n    \"bytes\": \"02303ab2a4aeb6a057a7a256aabf491dad6f0decbfd880d80f9052d5b2df83ba5f07\",\n    \"parsed\": \"uref-303ab2a4aeb6a057a7a256aabf491dad6f0decbfd880d80f9052d5b2df83ba5f-007\"\n  },\n  \"name\": {\n    \"cl_type\": \"String\", \n    \"bytes\": \"08000000646563696d616c73\",\n    \"parsed\": \"decimals\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Transferring NFT via Direct Entrypoint Using StoredContractByHash in Bash\nDESCRIPTION: A bash command showing how to transfer an NFT between accounts by directly invoking the transfer entrypoint using StoredContractByHash, referencing the token by ID or hash depending on the contract's identifier mode.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/docs/resources/tokens/cep78/using-casper-client.md#2025-04-22_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\ncasper-client put-deploy -n http://localhost:11101/rpc --chain-name \"casper-net-1\" \\ --payment-amount 7500000000 \\ -k ~/secret_key.pem \\\n--session-hash hash-b3b7a74ae9ef2ea8afc06d6a0830961259605e417e95a53c0cb1ca9737bb0ec7 \\\n--session-entry-point \"transfer\" \\\n--session-arg \"source_key:key='account-hash-e9ff87766a1d2bab2565bfd5799054946200b51b20c3ca7e54a9269e00fe7cfb'\" \\\n--session-arg \"target_key:key='account-hash-b4782e7c47e4deca5bd90b7adb2d6e884f2d331825d5419d6cbfb59e17642aab'\" \\\n--session-arg \"token_id:u64='0'\"\n```\n\n----------------------------------------\n\nTITLE: Querying Deploy Details in Bash\nDESCRIPTION: Command to query the specific deploy details using the deploy hash. This provides information about that specific deployment only.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/versioned_docs/version-1.5.X/resources/beginner/counter/walkthrough.md#2025-04-22_snippet_10\n\nLANGUAGE: bash\nCODE:\n```\ncasper-client query-global-state --node-address http://localhost:11101 \\\n    --state-root-hash [STATE_ROOT_HASH] --key deploy-[DEPLOY_HASH]\n```\n\n----------------------------------------\n\nTITLE: Example: Calling Auction Contract by Package Hash in Rust\nDESCRIPTION: The example demonstrates how to call the Auction contract by specifying its package hash and using the delegate entry point. It shows how without specifying the session version, the highest enabled version is selected automatically.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/versioned_docs/version-1.5.X/developers/cli/calling-contracts.md#2025-04-22_snippet_7\n\nLANGUAGE: rust\nCODE:\n```\ncasper-client put-deploy \\\n    --node-address http://65.21.235.219:7777 \\\n    --chain-name casper-test \\\n    --secret-key [KEY_PATH]/secret_key.pem \\\n    --payment-amount 2500000000 \\\n    --session-package-hash hash-e375d42c29c0e4b2baefa63cf2d70af34439eda851e08129d8515515d63bd6a9 \\\n    --session-entry-point \"delegate\" \\\n    --session-arg \"validator:public_key='0145fb72c75e1b459839555d70356a5e6172e706efa204d86c86050e2f7878960f'\" \\\n    --session-arg \"amount:u512='500000000000'\" \\\n    --session-arg \"delegator:public_key='0154d828baafa6858b92919c4d78f26747430dcbecb9aa03e8b44077dc6266cabf'\"\n```\n\n----------------------------------------\n\nTITLE: Calling Counter Contract Example\nDESCRIPTION: Specific example of calling the Counter contract's counter-inc entry point using its contract hash on Testnet. Demonstrates a real-world usage of the put-deploy command with actual values.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/versioned_docs/version-1.5.X/developers/cli/calling-contracts.md#2025-04-22_snippet_1\n\nLANGUAGE: rust\nCODE:\n```\ncasper-client put-deploy \\\n    --node-address http://65.21.235.219:7777 \\\n    --chain-name casper-test \\\n    --secret-key [KEY_PATH]/secret_key.pem \\\n    --payment-amount 100000000 \\\n    --session-hash hash-22228188b85b6ee4a4a41c7e98225c3918139e9a5eb4b865711f2e409d85e88e \\\n    --session-entry-point \"counter-inc\"\n```\n\n----------------------------------------\n\nTITLE: State Get Auction Info Response Schema Definition\nDESCRIPTION: JSON schema defining the response structure for the state_get_auction_info RPC endpoint. Includes auction state data with validator weights and bids.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/condor/jsonrpc-comp/rpc-1.5/schema.json.md#2025-04-22_snippet_24\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"api_version\": \"1.5.6\",\n  \"auction_state\": {\n    \"state_root_hash\": \"0b0b0b0b0b0b0b0b0b0b0b0b0b0b0b0b0b0b0b0b0b0b0b0b0b0b0b0b0b0b0b0b\",\n    \"block_height\": 10,\n    \"era_validators\": [...],\n    \"bids\": [...]\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Querying Account Balance with Casper Client Bash Command\nDESCRIPTION: This command queries the account balance by providing the state root hash and purse identifier. The purse identifier can be a public key or account hash of the main purse or a URef, and verbose output can reveal detailed JSON-RPC interactions.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/docs/resources/beginner/querying-network.md#2025-04-22_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\ncasper-client query-balance --help\n```\n\nLANGUAGE: bash\nCODE:\n```\ncasper-client query-balance \\\n--id 6 \\\n--node-address http://<node-ip-address>:7777 \\\n--state-root-hash <state-root-hash> \\\n--purse-identifier <account>\n```\n\nLANGUAGE: bash\nCODE:\n```\ncasper-client query-balance -v \\\n  --id 6 \\\n  --node-address https://node.testnet.casper.network \\\n  --state-root-hash a306a9cf869e52fe9eacdc28aade94215112cc04b6737b3669c35568a47a7dc2 \\\n  --purse-identifier 01360af61b50cdcb7b92cffe2c99315d413d34ef77fadee0c105cc4f1d4120f986\n```\n\n----------------------------------------\n\nTITLE: Sample Fungible Token Deployment Command on Casper Testnet in Bash\nDESCRIPTION: Complete example of deploying a fungible token on the Casper Testnet with specific token parameters.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/docs/resources/tokens/cep18/full-tutorial.md#2025-04-22_snippet_17\n\nLANGUAGE: bash\nCODE:\n```\ncasper-client put-deploy \\\n--node-address http://<HOST:PORT>  \\\n--chain-name casper-test \\\n--secret-key \"/home/ubuntu/secret_key.pem\" \\\n--payment-amount 1000000 \\\n--session-path \"<machine-path>/cep18/target/wasm32-unknown-unknown/release/cep18.wasm\"\n--session-arg \"name='Token test', symbol='TEST', decimals:u8=10, total_supply:u256=1000\"\n```\n\n----------------------------------------\n\nTITLE: Exporting Public Key and Account Hash in Python with pycspr - Python\nDESCRIPTION: Obtains hex-encoded public key and account hash from a pycspr keypair. Utilizes pycspr.crypto.cl_checksum and cl_operations for conversion. Expects a previously created keypair object.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/versioned_docs/version-1.5.X/developers/dapps/sdk/client-library-usage.md#2025-04-22_snippet_9\n\nLANGUAGE: python\nCODE:\n```\nimport pycspr.crypto\n\npublicKeyBytes = keypair.account_key\npublicKeyHex = pycspr.crypto.cl_checksum.encode(publicKeyBytes)\naccountHashBytes = pycspr.crypto.cl_operations.get_account_hash(publicKeyBytes)\naccountHashHex = pycspr.crypto.cl_checksum.encode(accountHashBytes)\n```\n\n----------------------------------------\n\nTITLE: Checking Protocol Versions with cURL\nDESCRIPTION: Command to check the current protocol versions available on the Mainnet using curl\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/versioned_docs/version-2.0.0/operators/setup-network/staging-files-for-new-network.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n$ curl -s genesis.casper.network/casper/protocol_versions\n1_4_5\n1_4_6\n```\n\n----------------------------------------\n\nTITLE: Installing Casper Node Launcher with apt - Bash\nDESCRIPTION: These Bash commands update the package list and install the casper-node-launcher on a Debian-based system. The installer also sets up the 'casper' user/group and related directory structures, as well as systemd services. Prerequisites include root or sudo privileges, access to the Casper Debian package repository, and a compatible Linux environment. Outputs are status messages from apt and the installed binaries/configuration folders; errors will occur if the repo is not set or privileges are insufficient.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/docs/operators/setup/basic-node-configuration.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nsudo apt update\\nsudo apt install casper-node-launcher\n```\n\n----------------------------------------\n\nTITLE: Incrementing the Counter via Entry-Point\nDESCRIPTION: Calls the counter_inc entry-point in the installed contract to increment the counter value by one.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/versioned_docs/version-2.0.0/resources/beginner/counter-testnet/walkthrough.md#2025-04-22_snippet_10\n\nLANGUAGE: bash\nCODE:\n```\ncasper-client put-deploy \\\n    --node-address http://[NODE_IP]:7777 \\\n    --chain-name casper-test \\\n    --secret-key [PATH_TO_YOUR_KEY]/secret_key.pem \\\n    --payment-amount [PAYMENT_AMOUNT_IN_MOTES] \\\n    --session-name \"counter\" \\\n    --session-entry-point \"counter_inc\"\n```\n\n----------------------------------------\n\nTITLE: Defining Block Header JSON Schema Specification - JSON\nDESCRIPTION: This JSON snippet specifies the schema for a block header object, used to validate block header representations in the Casper Network. Dependencies include referenced schemas (BlockHash, Digest, JsonEraEnd, Timestamp, EraId, ProtocolVersion) defined elsewhere in the specification. The schema enforces the presence of required fields such as \\\"accumulated_seed\\\", \\\"body_hash\\\", \\\"era_id\\\", \\\"height\\\", \\\"parent_hash\\\", \\\"protocol_version\\\", \\\"random_bit\\\", \\\"state_root_hash\\\", and \\\"timestamp\\\", and provides structural constraints suitable for schema-based validation frameworks.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/condor/jsonrpc-comp/rpc-1.5/schema/JsonBlockHeader.json.md#2025-04-22_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"description\": \"JSON representation of a block header.\",\n    \"type\": \"object\",\n    \"required\": [\n        \"accumulated_seed\",\n        \"body_hash\",\n        \"era_id\",\n        \"height\",\n        \"parent_hash\",\n        \"protocol_version\",\n        \"random_bit\",\n        \"state_root_hash\",\n        \"timestamp\"\n    ],\n    \"properties\": {\n        \"parent_hash\": {\n            \"description\": \"The parent hash.\",\n            \"allOf\": [\n                {\n                    \"$ref\": \"#/components/schemas/BlockHash\"\n                }\n            ]\n        },\n        \"state_root_hash\": {\n            \"description\": \"The state root hash.\",\n            \"allOf\": [\n                {\n                    \"$ref\": \"#/components/schemas/Digest\"\n                }\n            ]\n        },\n        \"body_hash\": {\n            \"description\": \"The body hash.\",\n            \"allOf\": [\n                {\n                    \"$ref\": \"#/components/schemas/Digest\"\n                }\n            ]\n        },\n        \"random_bit\": {\n            \"description\": \"Randomness bit.\",\n            \"type\": \"boolean\"\n        },\n        \"accumulated_seed\": {\n            \"description\": \"Accumulated seed.\",\n            \"allOf\": [\n                {\n                    \"$ref\": \"#/components/schemas/Digest\"\n                }\n            ]\n        },\n        \"era_end\": {\n            \"description\": \"The era end.\",\n            \"anyOf\": [\n                {\n                    \"$ref\": \"#/components/schemas/JsonEraEnd\"\n                },\n                {\n                    \"type\": \"null\"\n                }\n            ]\n        },\n        \"timestamp\": {\n            \"description\": \"The block timestamp.\",\n            \"allOf\": [\n                {\n                    \"$ref\": \"#/components/schemas/Timestamp\"\n                }\n            ]\n        },\n        \"era_id\": {\n            \"description\": \"The block era id.\",\n            \"allOf\": [\n                {\n                    \"$ref\": \"#/components/schemas/EraId\"\n                }\n            ]\n        },\n        \"height\": {\n            \"description\": \"The block height.\",\n            \"type\": \"integer\",\n            \"format\": \"uint64\",\n            \"minimum\": 0\n        },\n        \"protocol_version\": {\n            \"description\": \"The protocol version.\",\n            \"allOf\": [\n                {\n                    \"$ref\": \"#/components/schemas/ProtocolVersion\"\n                }\n            ]\n        }\n    },\n    \"additionalProperties\": false\n} \n```\n\n----------------------------------------\n\nTITLE: Defining Casper Network Block Header Schema in JSON\nDESCRIPTION: This JSON Schema defines the structure of a `BlockHeader` object for the Casper Network. It lists required properties like `parent_hash`, `state_root_hash`, `timestamp`, and `height`, specifies their data types or references other defined schemas (e.g., `BlockHash`, `Digest`, `Timestamp`), and includes descriptions for clarity. The schema ensures that block headers conform to a specific format.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/condor/jsonrpc-comp/rpc-2.0/schema/BlockHeaderV1.json.md#2025-04-22_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"description\": \"The header portion of a block.\",\n    \"type\": \"object\",\n    \"required\": [\n        \"accumulated_seed\",\n        \"body_hash\",\n        \"era_id\",\n        \"height\",\n        \"parent_hash\",\n        \"protocol_version\",\n        \"random_bit\",\n        \"state_root_hash\",\n        \"timestamp\"\n    ],\n    \"properties\": {\n        \"parent_hash\": {\n            \"description\": \"The parent block's hash.\",\n            \"allOf\": [\n                {\n                    \"$ref\": \"#/components/schemas/BlockHash\"\n                }\n            ]\n        },\n        \"state_root_hash\": {\n            \"description\": \"The root hash of global state after the deploys in this block have been executed.\",\n            \"allOf\": [\n                {\n                    \"$ref\": \"#/components/schemas/Digest\"\n                }\n            ]\n        },\n        \"body_hash\": {\n            \"description\": \"The hash of the block's body.\",\n            \"allOf\": [\n                {\n                    \"$ref\": \"#/components/schemas/Digest\"\n                }\n            ]\n        },\n        \"random_bit\": {\n            \"description\": \"A random bit needed for initializing a future era.\",\n            \"type\": \"boolean\"\n        },\n        \"accumulated_seed\": {\n            \"description\": \"A seed needed for initializing a future era.\",\n            \"allOf\": [\n                {\n                    \"$ref\": \"#/components/schemas/Digest\"\n                }\n            ]\n        },\n        \"era_end\": {\n            \"description\": \"The `EraEnd` of a block if it is a switch block.\",\n            \"anyOf\": [\n                {\n                    \"$ref\": \"#/components/schemas/EraEndV1\"\n                },\n                {\n                    \"type\": \"null\"\n                }\n            ]\n        },\n        \"timestamp\": {\n            \"description\": \"The timestamp from when the block was proposed.\",\n            \"allOf\": [\n                {\n                    \"$ref\": \"#/components/schemas/Timestamp\"\n                }\n            ]\n        },\n        \"era_id\": {\n            \"description\": \"The era ID in which this block was created.\",\n            \"allOf\": [\n                {\n                    \"$ref\": \"#/components/schemas/EraId\"\n                }\n            ]\n        },\n        \"height\": {\n            \"description\": \"The height of this block, i.e. the number of ancestors.\",\n            \"type\": \"integer\",\n            \"format\": \"uint64\",\n            \"minimum\": 0\n        },\n        \"protocol_version\": {\n            \"description\": \"The protocol version of the network from when this block was created.\",\n            \"allOf\": [\n                {\n                    \"$ref\": \"#/components/schemas/ProtocolVersion\"\n                }\n            ]\n        }\n    }\n} \n```\n\n----------------------------------------\n\nTITLE: Example Contract Installation\nDESCRIPTION: Example of installing a counter-v1.wasm contract to a local NCTL network using specific parameters including the node address, chain name, and payment amount.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/versioned_docs/version-1.5.X/developers/cli/installing-contracts.md#2025-04-22_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ncasper-client put-deploy \\\n  --node-address http://localhost:11101 \\\n  --chain-name casper-net-1 \\\n  --secret-key [PATH_TO_YOUR_KEY]/secret_key.pem \\\n  --payment-amount 5000000000000 \\\n  --session-path ./counter/target/wasm32-unknown-unknown/release/counter-v1.wasm\n```\n\n----------------------------------------\n\nTITLE: Activating Validator Bid via System Auction Contract - Bash\nDESCRIPTION: This `put-deploy` Bash script demonstrates activating a validator's bid using the system auction contract's built-in `activate_bid` entry point. It requires `casper-client`, `sudo`, and access to the validator's key files. Parameters: node address, secret key path, chain name, payment amount (in motes), session hash (depending on the network), and validator's public key. Returns a deploy hash for monitoring execution. Ensure the provided values match the deployment network and validator keys. Used for cost-effective bid reactivation.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/versioned_docs/version-1.5.X/operators/becoming-a-validator/recovering.md#2025-04-22_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\nsudo -u casper casper-client put-deploy \\\n--node-address <HOST:PORT> \\\n--secret-key <PATH> \\\n--chain-name <CHAIN_NAME> \\\n--payment-amount <PAYMENT_AMOUNT_IN_MOTES> \\\n--session-hash <SESSION_HASH> \\\n--session-entry-point activate_bid \\\n--session-arg \"validator_public_key:public_key='$(cat /etc/casper/validator_keys/public_key_hex)'\"\n```\n\n----------------------------------------\n\nTITLE: Calling Counter Contract by Named Key - Casper CLI - Rust\nDESCRIPTION: Presents the casper-client command to invoke the 'counter_inc' method on the Counter contract using its registered name. This example specifies actual endpoints and payment, assuming the contract was registered during installation. Required: the Counter contract set under 'counter' as session-name, valid node, and authentication. Inputs: CLI params; output: deploy issued.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/docs/developers/cli/calling-contracts.md#2025-04-22_snippet_10\n\nLANGUAGE: rust\nCODE:\n```\ncasper-client put-deploy \\\n    --node-address http://65.21.235.219:7777 \\\n    --chain-name casper-test \\\n    --secret-key [PATH_TO_YOUR_KEY]/secret_key.pem \\\n    --payment-amount 100000000 \\\n    --session-name \"counter\" \\\n    --session-entry-point \"counter_inc\"\n```\n\n----------------------------------------\n\nTITLE: Example of CEP-18 Token Deployment to Testnet in Bash\nDESCRIPTION: Concrete example of deploying a CEP-18 token named 'CHF Coin' with symbol 'CHFC' to the Casper Testnet, including all required parameters.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/versioned_docs/version-1.5.X/resources/beginner/cep18.md#2025-04-22_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\ncasper-client put-deploy \\\n--node-address http://78.46.32.13:7777 \\\n--chain-name casper-test \\\n--secret-key \"./keys/secret_key.pem\" \\\n--payment-amount 150000000000 \\\n--session-path \"./target/wasm32-unknown-unknown/release/cep18.wasm\" \\\n--session-arg \"name:string='CHF Coin'\" \\\n--session-arg \"symbol:string='CHFC'\" \\\n--session-arg \"decimals:u8='10'\" \\\n--session-arg \"total_supply:u256='1000'\"\n```\n\n----------------------------------------\n\nTITLE: Creating Ed25519 Keypair in JavaScript - JavaScript\nDESCRIPTION: Generates a new Ed25519 keypair using casper-js-sdk. Requires the SDK module and Node.js. Outputs an object with publicKey and privateKey fields. Swap Ed25519 with Secp256K1 for that signature scheme.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/versioned_docs/version-1.5.X/developers/dapps/sdk/client-library-usage.md#2025-04-22_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nconst { Keys } = require(\"casper-js-sdk\");\nconst keypair = Keys.Ed25519.new();\nconst { publicKey, privateKey } = keypair;\n```\n\n----------------------------------------\n\nTITLE: Key Types and Available Actions in Casper Network\nDESCRIPTION: A table showing the available actions (permissions) for different key types in the Casper Network. This defines which operations are allowed on each key type, including read, write, and add operations.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/versioned_docs/version-2.0.0/concepts/serialization/types.md#2025-04-22_snippet_26\n\nLANGUAGE: markdown\nCODE:\n```\n| Key      | Type Available Actions  |\n| -------- | ----------------------- |\n| Account  | Read + Add (via API)    |\n| Hash     | Read                    |\n| URef     | Read + Write and/or Add |\n| Transfer | System                  |\n| Deploy   | System                  |\n| EraInfo  | System                  |\n| Balance  | Read (via API)          |\n| Bid      | System                  |\n| Withdraw | System                  |\n| Dictionary | Read (via API)        |\n| SystemContractRegistry | Read (via API)|\n| Unbond   | System                  |\n| ChainspecRegistry | Read (via API) |\n```\n\n----------------------------------------\n\nTITLE: Defining JSON Schema for Delegator Data in Casper Network\nDESCRIPTION: This schema defines the structure of a delegator object, including properties such as public key, staked amount, bonding purse, and delegatee. It specifies required fields and references to other schema components.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/condor/jsonrpc-comp/rpc-1.5/schema.json.md#2025-04-22_snippet_64\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"description\": \"A delegator associated with the given validator.\",\n  \"type\": \"object\",\n  \"required\": [\n    \"bonding_purse\",\n    \"delegatee\",\n    \"public_key\",\n    \"staked_amount\"\n  ],\n  \"properties\": {\n    \"public_key\": {\n      \"$ref\": \"#/components/schemas/PublicKey\"\n    },\n    \"staked_amount\": {\n      \"$ref\": \"#/components/schemas/U512\"\n    },\n    \"bonding_purse\": {\n      \"$ref\": \"#/components/schemas/URef\"\n    },\n    \"delegatee\": {\n      \"$ref\": \"#/components/schemas/PublicKey\"\n    }\n  },\n  \"additionalProperties\": false\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Complex CLType Structures in JSON Schema\nDESCRIPTION: JSON schema definitions for complex Casper Network CLType structures including Option, List, ByteArray, Result, Map, and Tuple variants. Each structure has specific validation rules and references to other CLType definitions.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/condor/jsonrpc-comp/rpc-2.0/schema/components.json.md#2025-04-22_snippet_10\n\nLANGUAGE: JSON\nCODE:\n```\n{\n    \"description\": \"`Option` of a `CLType`.\",\n    \"type\": \"object\",\n    \"required\": [\n        \"Option\"\n    ],\n    \"properties\": {\n        \"Option\": {\n            \"$ref\": \"#/components/schemas/CLType\"\n        }\n    },\n    \"additionalProperties\": false\n},\n{\n    \"description\": \"Variable-length list of a single `CLType` (comparable to a `Vec`).\",\n    \"type\": \"object\",\n    \"required\": [\n        \"List\"\n    ],\n    \"properties\": {\n        \"List\": {\n            \"$ref\": \"#/components/schemas/CLType\"\n        }\n    },\n    \"additionalProperties\": false\n},\n{\n    \"description\": \"Fixed-length list of a single `CLType` (comparable to a Rust array).\",\n    \"type\": \"object\",\n    \"required\": [\n        \"ByteArray\"\n    ],\n    \"properties\": {\n        \"ByteArray\": {\n            \"type\": \"integer\",\n            \"format\": \"uint32\",\n            \"minimum\": 0.0\n        }\n    },\n    \"additionalProperties\": false\n},\n{\n    \"description\": \"`Result` with `Ok` and `Err` variants of `CLType`s.\",\n    \"type\": \"object\",\n    \"required\": [\n        \"Result\"\n    ],\n    \"properties\": {\n        \"Result\": {\n            \"type\": \"object\",\n            \"required\": [\n                \"err\",\n                \"ok\"\n            ],\n            \"properties\": {\n                \"ok\": {\n                    \"$ref\": \"#/components/schemas/CLType\"\n                },\n                \"err\": {\n                    \"$ref\": \"#/components/schemas/CLType\"\n                }\n            },\n            \"additionalProperties\": false\n        }\n    },\n    \"additionalProperties\": false\n},\n{\n    \"description\": \"Map with keys of a single `CLType` and values of a single `CLType`.\",\n    \"type\": \"object\",\n    \"required\": [\n        \"Map\"\n    ],\n    \"properties\": {\n        \"Map\": {\n            \"type\": \"object\",\n            \"required\": [\n                \"key\",\n                \"value\"\n            ],\n            \"properties\": {\n                \"key\": {\n                    \"$ref\": \"#/components/schemas/CLType\"\n                },\n                \"value\": {\n                    \"$ref\": \"#/components/schemas/CLType\"\n                }\n            },\n            \"additionalProperties\": false\n        }\n    },\n    \"additionalProperties\": false\n}\n```\n\n----------------------------------------\n\nTITLE: Defining DictionaryIdentifier Schema in JSON\nDESCRIPTION: Schema for dictionary item lookups with multiple identification methods including Account Named Keys, Contract Named Keys, URef, and Dictionary lookup options.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/condor/jsonrpc-comp/rpc-1.5/schema/components.json.md#2025-04-22_snippet_39\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"description\": \"Options for dictionary item lookups.\",\n    \"anyOf\": [\n        {\n            \"description\": \"Lookup a dictionary item via an Account's named keys.\",\n            \"type\": \"object\",\n            \"required\": [\"AccountNamedKey\"],\n            \"properties\": {...}\n        },\n        {\n            \"description\": \"Lookup a dictionary item via a Contract's named keys.\",\n            \"type\": \"object\",\n            \"required\": [\"ContractNamedKey\"],\n            \"properties\": {...}\n        },\n        {\n            \"description\": \"Lookup a dictionary item via its seed URef.\",\n            \"type\": \"object\",\n            \"required\": [\"URef\"],\n            \"properties\": {...}\n        },\n        {\n            \"description\": \"Lookup a dictionary item via its unique key.\",\n            \"type\": \"object\",\n            \"required\": [\"Dictionary\"],\n            \"properties\": {...}\n        }\n    ]\n}\n```\n\n----------------------------------------\n\nTITLE: Testing the Smart Contract\nDESCRIPTION: This command runs tests defined in the integration test file to ensure correct functionality of the smart contracts. The output clarifies if tests pass or fail, critical for ensuring code reliability before deployment. Needs Rust toolchain and dependencies fully resolved for reliable test execution.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/versioned_docs/version-1.5.X/resources/advanced/cross-contract.md#2025-04-22_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nmake test\n```\n\n----------------------------------------\n\nTITLE: Defining RuntimeArgs as Array of NamedArg - JSON Schema - JSON\nDESCRIPTION: Structures 'RuntimeArgs' as an array of 'NamedArg' elements, supporting contract method invocation with parameter collections. It requires a reference to the 'NamedArg' schema, ensuring arguments follow the expected naming and value format for contract calls.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/condor/jsonrpc-comp/rpc-2.0/schema/components.json.md#2025-04-22_snippet_6\n\nLANGUAGE: JSON\nCODE:\n```\n{\n    \"RuntimeArgs\": {\n        \"description\": \"Represents a collection of arguments passed to a smart contract.\",\n        \"type\": \"array\",\n        \"items\": {\n            \"$ref\": \"#/components/schemas/NamedArg\"\n        }\n    }\n}\n\n```\n\n----------------------------------------\n\nTITLE: Querying Deploy Details\nDESCRIPTION: Command to get deploy information using the deploy hash to identify corresponding transfers.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/docs/developers/cli/transfers/verify-transfer.md#2025-04-22_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ncasper-client get-deploy \\\n--node-address [NODE_SERVER_ADDRESS]  \\\n[DEPLOY_HASH]\n```\n\n----------------------------------------\n\nTITLE: Updating trusted_hash in Protocol Config.toml - Bash\nDESCRIPTION: This bash pipeline fetches the latest block hash from NODE_ADDR using casper-client, parses it with jq, and inserts it into the protocol's config.toml file as trusted_hash. Dependencies: casper-client, jq, appropriate environment variables (NODE_ADDR and PROTOCOL) set. Expected input: network access to a Casper node endpoint. The output is an in-place config replacement for seamless fast sync. Make sure to backup config prior to bulk sed.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/docs/operators/setup/install-node.md#2025-04-22_snippet_11\n\nLANGUAGE: bash\nCODE:\n```\nNODE_ADDR=https://node.mainnet.casper.network\\nPROTOCOL=1_5_8\\nsudo sed -i \"/trusted_hash =/c\\\\trusted_hash = '$(casper-client get-block --node-address $NODE_ADDR | jq -r .result.block.hash | tr -d '\\\\n')'\" /etc/casper/$PROTOCOL/config.toml\n```\n\n----------------------------------------\n\nTITLE: Querying Named Key Value from Contract State - Casper casper-client - Bash\nDESCRIPTION: This command queries the value stored at a specific named key (here, 'message') of a contract by providing the contract hash and key name. The '-q' flag is used to specify the particular named key under the contract. It requires the contract hash, state root hash, node address, and the relevant named key. The output will be a JSON representation of the current value stored at that key, which is useful for application logic or monitoring contract state.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/docs/resources/advanced/cross-contract.md#2025-04-22_snippet_16\n\nLANGUAGE: bash\nCODE:\n```\ncasper-client query-global-state \\\n  --node-address http://136.243.187.84:7777 \\\n  --state-root-hash 2f3e100324deb999107229dbec5c4b724653174328c99ea0836931248c3cc9cb \\\n  --key hash-b7a06298cc71d4cac05929cc0713dfd5a541c68b71cb500cd04547b5cd0385ea -q \"message\"\n```\n\n----------------------------------------\n\nTITLE: Increasing CEP-18 Token Allowance (Uncommented)\nDESCRIPTION: A concise version of the `casper-client` command to execute the `increase_allowance` entry point of a CEP-18 contract package. This command excludes inline comments but performs the same function as the commented version, requiring node address, caller's secret key, package name, entry point, spender, amount, chain name, and payment amount.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/versioned_docs/version-1.5.X/resources/tokens/cep18/transfer.md#2025-04-22_snippet_17\n\nLANGUAGE: bash\nCODE:\n```\ncasper-client put-deploy -n http://<NODE IP>:<PORT> \\\n--secret-key ~/casper/demo/user_a/secret_key.pem \\\n--session-package-name \"cep18_contract_package_CEP18\" \\\n--session-entry-point \"increase_allowance\" \\\n--session-arg \"spender:key='account-hash-683f53f56926f54ef9584b07585b025c68415dc05f7b2e56749153574b83d5cd'\" \\\n--session-arg \"amount:U256='10'\" \\\n--chain-name <CHAIN NAME> \\\n--payment-amount 1000000000\n```\n\n----------------------------------------\n\nTITLE: Defining Execution Transform Schema with JSON\nDESCRIPTION: This JSON snippet defines a schema for the output of a single deploy, detailing required properties 'operations' and 'transforms', both of which are arrays referencing other schema components. It enforces type safety and restricts additional unspecified properties. Dependencies include the referenced 'Operation' and 'TransformV1' schemas, which must exist in '#/components/schemas/'. Inputs are JSON objects that represent deploy results; outputs are validated or generated objects conforming to this structure. The schema must be used with a JSON Schema validator or API documentation tool supporting the defined references.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/condor/jsonrpc-comp/rpc-2.0/schema/ExecutionEffect.json.md#2025-04-22_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"description\": \"The sequence of execution transforms from a single deploy.\",\n    \"type\": \"object\",\n    \"required\": [\n        \"operations\",\n        \"transforms\"\n    ],\n    \"properties\": {\n        \"operations\": {\n            \"description\": \"The resulting operations.\",\n            \"type\": \"array\",\n            \"items\": {\n                \"$ref\": \"#/components/schemas/Operation\"\n            }\n        },\n        \"transforms\": {\n            \"description\": \"The sequence of execution transforms.\",\n            \"type\": \"array\",\n            \"items\": {\n                \"$ref\": \"#/components/schemas/TransformV1\"\n            }\n        }\n    },\n    \"additionalProperties\": false\n} \n```\n\n----------------------------------------\n\nTITLE: Creating Tests Package with Cargo (Bash)\nDESCRIPTION: Illustrates using `cargo new` to generate a separate Rust package named 'tests' within the project directory for housing integration tests. This is the second step in the semi-automatic or manual setup process, creating the `tests` folder with `src/main.rs` (often renamed to `integration-tests.rs`) and `Cargo.toml`.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/docs/developers/writing-onchain-code/simple-contract.md#2025-04-22_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\ncargo new tests\n```\n\n----------------------------------------\n\nTITLE: Defining TransactionV1 Schema in JSON for Casper Network API\nDESCRIPTION: JSON schema definition for the TransactionV1 component, which represents a unit of work sent by a client to the network. It includes properties for hash, header, body, and approvals.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/condor/jsonrpc-comp/rpc-2.0/schema/components.json.md#2025-04-22_snippet_14\n\nLANGUAGE: json\nCODE:\n```\n\"TransactionV1\": {\n    \"description\": \"A unit of work sent by a client to the network, which when executed can cause global state to be altered.\",\n    \"type\": \"object\",\n    \"required\": [\n        \"approvals\",\n        \"body\",\n        \"hash\",\n        \"header\"\n    ],\n    \"properties\": {\n        \"hash\": {\n            \"$ref\": \"#/components/schemas/TransactionV1Hash\"\n        },\n        \"header\": {\n            \"$ref\": \"#/components/schemas/TransactionV1Header\"\n        },\n        \"body\": {\n            \"$ref\": \"#/components/schemas/TransactionV1Body\"\n        },\n        \"approvals\": {\n            \"type\": \"array\",\n            \"items\": {\n                \"$ref\": \"#/components/schemas/Approval\"\n            },\n            \"uniqueItems\": true\n        }\n    },\n    \"additionalProperties\": false\n}\n```\n\n----------------------------------------\n\nTITLE: Defining the state_get_balance RPC Method JSON Schema\nDESCRIPTION: This JSON object defines the `state_get_balance` RPC method for the Casper Network. It specifies the method's name, provides a summary, lists required parameters (`state_root_hash`, `purse_uref`) with their descriptions and schemas, and defines the structure of the result object (`state_get_balance_result`), which includes `api_version`, `balance_value` (a U512 type), and `merkle_proof`. An example (`state_get_balance_example`) demonstrates sample input parameters and the corresponding expected output.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/condor/jsonrpc-comp/rpc-1.5/state_get_balance.json.md#2025-04-22_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"name\": \"state_get_balance\",\n  \"summary\": \"returns a purse's balance from the network\",\n  \"params\": [\n    {\n      \"name\": \"state_root_hash\",\n      \"schema\": {\n        \"description\": \"The hash of state root.\",\n        \"$ref\": \"#/components/schemas/Digest\"\n      },\n      \"required\": true\n    },\n    {\n      \"name\": \"purse_uref\",\n      \"schema\": {\n        \"description\": \"Formatted URef.\",\n        \"type\": \"string\"\n      },\n      \"required\": true\n    }\n  ],\n  \"result\": {\n    \"name\": \"state_get_balance_result\",\n    \"schema\": {\n      \"description\": \"Result for \\\"state_get_balance\\\" RPC response.\",\n      \"type\": \"object\",\n      \"required\": [\n        \"api_version\",\n        \"balance_value\",\n        \"merkle_proof\"\n      ],\n      \"properties\": {\n        \"api_version\": {\n          \"description\": \"The RPC API version.\",\n          \"type\": \"string\"\n        },\n        \"balance_value\": {\n          \"description\": \"The balance value.\",\n          \"$ref\": \"#/components/schemas/U512\"\n        },\n        \"merkle_proof\": {\n          \"description\": \"The Merkle proof.\",\n          \"type\": \"string\"\n        }\n      },\n      \"additionalProperties\": false\n    }\n  },\n  \"examples\": [\n    {\n      \"name\": \"state_get_balance_example\",\n      \"params\": [\n        {\n          \"name\": \"state_root_hash\",\n          \"value\": \"0808080808080808080808080808080808080808080808080808080808080808\"\n        },\n        {\n          \"name\": \"purse_uref\",\n          \"value\": \"uref-09480c3248ef76b603d386f3f4f8a5f87f597d4eaffd475433f861af187ab5db-007\"\n        }\n      ],\n      \"result\": {\n        \"name\": \"state_get_balance_example_result\",\n        \"value\": {\n          \"api_version\": \"1.5.6\",\n          \"balance_value\": \"123456\",\n          \"merkle_proof\": \"01000000006ef2e0949ac76e55812421f755abe129b6244fe7168b77f47a72536147614625016ef2e0949ac76e55812421f755abe129b6244fe7168b77f47a72536147614625000000003529cde5c621f857f75f3810611eb4af3f998caaa9d4a3413cf799f99c67db0307010000006ef2e0949ac76e55812421f755abe129b6244fe7168b77f47a7253614761462501010102000000006e06000000000074769d28aac597a36a03a932d4b43e4f10bf0403ee5c41dd035102553f5773631200b9e173e8f05361b681513c14e25e3138639eb03232581db7557c9e8dbbc83ce94500226a9a7fe4f2b7b88d5103a4fc7400f02bf89c860c9ccdd56951a2afe9be0e0267006d820fb5676eb2960e15722f7725f3f8f41030078f8b2e44bf0dc03f71b176d6e800dc5ae9805068c5be6da1a90b2528ee85db0609cc0fb4bd60bbd559f497a98b67f500e1e3e846592f4918234647fca39830b7e1e6ad6f5b7a99b39af823d82ba1873d000003000000010186ff500f287e9b53f823ae1582b1fa429dfede28015125fd233a31ca04d5012002015cc42669a55467a1fdf49750772bfc1aed59b9b085558eb81510e9b015a7c83b0301e3cf4a34b1db6bfa58808b686cb8fe21ebe0c1bcbcee522649d2b135fe510fe3\"\n        }\n      }\n    }\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Purse Identifier Schema using oneOf in JSON\nDESCRIPTION: This JSON snippet defines the schema for a 'PurseIdentifier' using the 'oneOf' construct. It specifies that a valid purse identifier must match exactly one of four possible structures: referencing the main purse via a 'PublicKey', an 'AccountHash', an 'EntityAddr', or directly via a 'URef'. Each structure references a corresponding schema definition and disallows additional properties.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/condor/jsonrpc-comp/rpc-2.0/schema/PurseIdentifier.json.md#2025-04-22_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"description\": \"Identifier of a purse.\",\n    \"oneOf\": [\n        {\n            \"description\": \"The main purse of the account identified by this public key.\",\n            \"type\": \"object\",\n            \"required\": [\n                \"main_purse_under_public_key\"\n            ],\n            \"properties\": {\n                \"main_purse_under_public_key\": {\n                    \"$ref\": \"#/components/schemas/PublicKey\"\n                }\n            },\n            \"additionalProperties\": false\n        },\n        {\n            \"description\": \"The main purse of the account identified by this account hash.\",\n            \"type\": \"object\",\n            \"required\": [\n                \"main_purse_under_account_hash\"\n            ],\n            \"properties\": {\n                \"main_purse_under_account_hash\": {\n                    \"$ref\": \"#/components/schemas/AccountHash\"\n                }\n            },\n            \"additionalProperties\": false\n        },\n        {\n            \"description\": \"The main purse of the account identified by this entity address.\",\n            \"type\": \"object\",\n            \"required\": [\n                \"main_purse_under_entity_addr\"\n            ],\n            \"properties\": {\n                \"main_purse_under_entity_addr\": {\n                    \"$ref\": \"#/components/schemas/EntityAddr\"\n                }\n            },\n            \"additionalProperties\": false\n        },\n        {\n            \"description\": \"The purse identified by this URef.\",\n            \"type\": \"object\",\n            \"required\": [\n                \"purse_uref\"\n            ],\n            \"properties\": {\n                \"purse_uref\": {\n                    \"$ref\": \"#/components/schemas/URef\"\n                }\n            },\n            \"additionalProperties\": false\n        }\n    ]\n} \n```\n\n----------------------------------------\n\nTITLE: Retrieving Deploy Status with Casper-Client in Rust\nDESCRIPTION: Fetches and displays the status and details of a previously submitted deploy using its unique deploy hash. Requires targeting a Casper node by address. Outputs deploy information for review or debugging; must supply a valid deploy hash returned from put-deploy.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/docs/resources/beginner/counter/commands.md#2025-04-22_snippet_5\n\nLANGUAGE: rust\nCODE:\n```\ncasper-client get-deploy \\\n    --node-address [NODE_SERVER_ADDRESS] \\\n    [DEPLOY_HASH]\n```\n\n----------------------------------------\n\nTITLE: Defining Entry Point: name in Casper Network\nDESCRIPTION: This snippet defines the 'name' entry point for a Casper Network smart contract. It takes no arguments, returns a String, and has public access with caller-based entry point payment.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/versioned_docs/version-2.0.0/developers/cli/sending-transactions.md#2025-04-22_snippet_10\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"name\": \"name\",\n  \"args\": [],\n  \"ret\": \"String\",\n  \"access\": \"Public\",\n  \"entry_point_type\": \"Called\",\n  \"entry_point_payment\": \"Caller\"\n}\n```\n\n----------------------------------------\n\nTITLE: Minting NFT using Wasm\nDESCRIPTION: Example of minting an NFT using a Wasm session code via the Casper client. This command invokes the 'mint_call.wasm' session, specifying the contract hash, collection name, token owner, and metadata.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/versioned_docs/version-1.5.X/resources/tokens/cep78/using-casper-client/interacting-with-NFTs.md#2025-04-22_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\ncasper-client put-deploy --node-address http://localhost:11101/rpc/ \\\n--chain-name \"casper-net-1\" \\\n--payment-amount 5000000000 \\\n--secret-key ~/casper/casper-node/utils/nctl/assets/net-1/nodes/node-1/keys/secret_key.pem \\\n--session-path ~/casper/enhanced-nft/client/mint_session/target/wasm32-unknown-unknown/release/mint_call.wasm \\\n--session-arg \"nft_contract_hash:key='hash-206339c3deb8e6146974125bb271eb510795be6f250c21b1bd4b698956669f95'\" \\\n--session-arg \"collection_name:string='cep78_<collection_name>'\" \\\n--session-arg \"token_owner:key='account-hash-e9ff87766a1d2bab2565bfd5799054946200b51b20c3ca7e54a9269e00fe7cfb'\"  \\\n--session-arg \"token_meta_data:string='{\\\"name\\\": \\\"John Doe\\\",\\\"token_uri\\\": \\\"https:\\/\\/www.barfoo.com\\\",\\\"checksum\\\": \\\"940bffb3f2bba35f84313aa26da09ece3ad47045c6a1292c2bbd2df4ab1a55fb\\\"}'\"\n```\n\n----------------------------------------\n\nTITLE: Testing Absent Entry Point Using ExecuteRequestBuilder.contract_call_by_hash in Rust\nDESCRIPTION: This test simulates calling a contract entry point expected to be absent (e.g., decrement, before an upgrade) using the 'contract_call_by_hash' request builder. It expects the execution to fail, validating correct contract behavior and versioning. The key inputs are the sender address, contract hash, missing entry point name, and empty arguments.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/versioned_docs/version-1.5.X/developers/writing-onchain-code/testing-contracts.md#2025-04-22_snippet_8\n\nLANGUAGE: rust\nCODE:\n```\n    // Call the decrement entry point, which should not be in version 1 before the upgrade.\n    let contract_decrement_request = ExecuteRequestBuilder::contract_call_by_hash(\n        *DEFAULT_ACCOUNT_ADDR,\n        contract_v1_hash,\n        ENTRY_POINT_COUNTER_DECREMENT,\n        runtime_args! {},\n    )\n    .build();\n\n    // Try executing the decrement entry point and expect an error.\n    builder\n        .exec(contract_decrement_request)\n        .expect_failure()\n        .commit();\n```\n\n----------------------------------------\n\nTITLE: Defining Transfer Component JSON Schema\nDESCRIPTION: This JSON schema defines the 'Transfer' component, which represents a transfer from one purse to another within the Casper Network. It includes required properties such as 'amount', 'deploy_hash', 'from', 'gas', 'source', and 'target'. Dependencies include references to 'DeployHash', 'AccountHash', 'URef', and other components. Inputs include transaction details, and outputs describe the schema structure.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/condor/jsonrpc-comp/rpc-1.5/schema.json.md#2025-04-22_snippet_41\n\nLANGUAGE: JSON\nCODE:\n```\n{\"WriteTransfer\": {\"$ref\": \"#/components/schemas/Transfer\"}}\n```\n\n----------------------------------------\n\nTITLE: Defining Account Schema in JSON for Casper Network API\nDESCRIPTION: JSON schema definition for the Account object in Casper Network, specifying required fields and their types. It includes account hash, named keys, main purse, associated keys, and action thresholds.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/condor/jsonrpc-comp/rpc-2.0/schema/components.json.md#2025-04-22_snippet_46\n\nLANGUAGE: json\nCODE:\n```\n\"Account\": {\n    \"description\": \"Represents an Account in the global state.\",\n    \"type\": \"object\",\n    \"required\": [\n        \"account_hash\",\n        \"action_thresholds\",\n        \"associated_keys\",\n        \"main_purse\",\n        \"named_keys\"\n    ],\n    \"properties\": {\n        \"account_hash\": {\n            \"$ref\": \"#/components/schemas/AccountHash\"\n        },\n        \"named_keys\": {\n            \"$ref\": \"#/components/schemas/NamedKeys\"\n        },\n        \"main_purse\": {\n            \"$ref\": \"#/components/schemas/URef\"\n        },\n        \"associated_keys\": {\n            \"$ref\": \"#/components/schemas/AccountAssociatedKeys\"\n        },\n        \"action_thresholds\": {\n            \"$ref\": \"#/components/schemas/AccountActionThresholds\"\n        }\n    },\n    \"additionalProperties\": false\n}\n```\n\n----------------------------------------\n\nTITLE: Transferring CEP-18 Tokens Using Allowance via Casper Client\nDESCRIPTION: Sends a deploy using `casper-client` to execute the `transfer_from` entry point of a CEP-18 contract. This allows an authorized account (identified by `--secret-key`) to transfer tokens owned by another account (`owner` session-arg) to a recipient (`recipient` session-arg), up to the spender's approved allowance. The command requires the node address, chain name, spender's secret key, the CEP-18 contract hash, owner account hash, recipient account hash, the amount to transfer, and payment amount.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/versioned_docs/version-1.5.X/resources/tokens/cep18/transfer.md#2025-04-22_snippet_14\n\nLANGUAGE: bash\nCODE:\n```\ncasper-client put-deploy -n http://<NODE IP>:<PORT> \\\n--chain-name <CHAIN NAME> \\\n// This is the secret key for the account that is spending their `allowance` from another account's balance.\n--secret-key ~/casper/demo/user_a/secret_key.pem \\\n// This is the CEP-18 token contract.\n--session-hash hash-05d893e76c731729fc26339e5a970bd79fbf4a6adf743c8385431fb494bff45e \\\n--session-entry-point \"transfer_from\" \\\n// This is the account hash of the account that holds the CEP-18 in their balance.\n--session-arg \"owner:key='account-hash-39f15c23df9be1244572bb499fac62cbcad3cab2dc1438609842f602f943d7d2'\" \\\n// This is the account hash of the account that will receive the transferred CEP-18 tokens.\n--session-arg \"recipient:key='account-hash-17192017d32db5dc9f598bf8ac6ac35ee4b64748669b00572d88335941479513'\" \\\n// This is the amount of tokens to be transferred. If this amount exceeds the `allowance` of the account sending the Deploy, it will fail.\n--session-arg \"amount:u256='10'\" \\\n--payment-amount \"10000000000\"\n```\n\n----------------------------------------\n\nTITLE: Signing a Casper Network Deploy using Ledger in JavaScript\nDESCRIPTION: This code snippet shows how to sign a Casper Network deploy using a Ledger hardware wallet with the casper-js-sdk. It includes connecting to the Ledger, preparing the deploy bytes, and signing the deploy.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/versioned_docs/version-2.0.0/resources/advanced/list-cspr.md#2025-04-22_snippet_9\n\nLANGUAGE: javascript\nCODE:\n```\nimport TransportWebUSB from '@ledgerhq/hw-transport-webusb';\nimport LedgerApp, { ResponseBase } from '@zondax/ledger-casper';\nimport { DeployUtil } from 'casper-js-sdk';\n\nconst getBipPath = (index: number) => {\n  const idx = index.toString();\n  return `m/44'/506'/0'/0/${idx}`;\n};\n\nconst deployBytes = DeployUtil.deployToBytes(deploy) as Buffer;\nconst transport = await TransportWebUSB.create();\nconst ledgerApp = new LedgerApp(transport);\nconst res = await ledgerApp.sign(\n    getBipPath(selectedAccountIndex),\n    deployBytes\n);\n```\n\n----------------------------------------\n\nTITLE: Increasing CEP-18 Allowance using Casper Client - Bash\nDESCRIPTION: This bash command increases the spending allowance for a specified spender account within a CEP-18 token contract. The command uses the put-deploy subcommand, session entry point increase_allowance, and expects 'spender' and 'amount' as session arguments. Required inputs include the secret key, CEP-18 package name, and payment amount. The command enables programmatic extension of permitted transfer rights for another account.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/versioned_docs/version-2.0.0/resources/tokens/cep18/transfer.md#2025-04-22_snippet_16\n\nLANGUAGE: bash\nCODE:\n```\ncasper-client put-deploy -n http://<NODE IP>:<PORT> \\\n--secret-key ~/casper/demo/user_a/secret_key.pem \\\n--session-package-name \"cep18_contract_package_CEP18\" \\\n--session-entry-point \"increase_allowance\" \\\n// This is the account hash of the previously authorized allowance account.\n--session-arg \"spender:key='account-hash-683f53f56926f54ef9584b07585b025c68415dc05f7b2e56749153574b83d5cd'\" \\\n// This is the additional number of CEP-18 tokens that the authorized account may spend.\n--session-arg \"amount:U256='10'\" \\\n--chain-name <CHAIN NAME> \\\n--payment-amount 1000000000\n```\n\n----------------------------------------\n\nTITLE: Evaluating and Validating Results in Rust\nDESCRIPTION: After executing a contract, this snippet checks the modified state and confirms expected changes using assertions in Rust.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/docs/developers/writing-onchain-code/testing-contracts.md#2025-04-22_snippet_9\n\nLANGUAGE: rust\nCODE:\n```\n    // Verify the value of count is now 1.\n    let incremented_count = builder\n        .query(None, count_key, &[])\n        .expect(\"should be stored value.\")\n        .as_cl_value()\n        .expect(\"should be cl value.\")\n        .clone()\n        .into_t::<i32>()\n        .expect(\"should be i32.\");\n\n    assert_eq!(incremented_count, 1);\n```\n\n----------------------------------------\n\nTITLE: Transferring a Casper NFT using casper-client in Bash\nDESCRIPTION: This command demonstrates transferring a CEP-78 NFT using the `casper-client put-deploy` command. It specifies the network node, chain name, payment amount, sender's secret key, and path to the transfer session Wasm. Key session arguments include the NFT contract hash, the source account key, the target account key, the identifier mode (set to ordinal, requiring `token_id`), and the specific `token_id` of the NFT being transferred.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/versioned_docs/version-2.0.0/resources/tokens/cep78/using-casper-client.md#2025-04-22_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\ncasper-client put-deploy -n http://localhost:11101/rpc --chain-name \"casper-net-1\" \\\n--payment-amount 5000000000 \\\n-k ~/casper/casper-node/utils/nctl/assets/net-1/nodes/node-2/keys/secret_key.pem \\\n--session-path ~/casper/enhanced-nft/client/transfer_session/target/wasm32-unknown-unknown/release/transfer_call.wasm \\\n--session-arg \"nft_contract_hash:key='hash-52e78ae3f6c485d036a74f65ebbb8c75fcc7c33fb42eb667fb32aeba72c63fb5'\" \\\n--session-arg \"source_key:key='account-hash-e9ff87766a1d2bab2565bfd5799054946200b51b20c3ca7e54a9269e00fe7cfb'\" \\\n--session-arg \"target_key:key='account-hash-b4772e7c47e4deca5bd90b7adb2d6e884f2d331825d5419d6cbfb59e17642aab'\" \\\n--session-arg \"is_hash_identifier_mode:bool='false'\" \\\n--session-arg \"token_id:u64='0'\"\n```\n\n----------------------------------------\n\nTITLE: Building Counter Contract and Tests using Make (Bash)\nDESCRIPTION: Executes the `make test` command within the contract directory. This typically compiles the Rust smart contract code to Wasm and runs associated tests.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/docs/resources/quick-start.md#2025-04-22_snippet_10\n\nLANGUAGE: bash\nCODE:\n```\nmake test\n```\n\n----------------------------------------\n\nTITLE: Querying Package Information\nDESCRIPTION: Command structure for querying package information using the package hash with query-global-state command.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/versioned_docs/version-2.0.0/developers/cli/querying-global-state.md#2025-04-22_snippet_15\n\nLANGUAGE: bash\nCODE:\n```\ncasper-client query-global-state \\\n--node-address [NODE_SERVER_ADDRESS] \\\n--state-root-hash [STATE_ROOT_HASH] \\\n--key [PACKAGE_ADDRESS]\n```\n\n----------------------------------------\n\nTITLE: Transferring CSPR Tokens with Casper Client\nDESCRIPTION: Command to transfer CSPR tokens using the Casper command-line client. The example shows a transfer of 10 CSPR tokens to an account specified by a Secp256k1 public key (with '02' prefix for Ethereum keys).\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/docs/concepts/accounts-and-keys.md#2025-04-22_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\ncasper-client transfer \\\n--transfer-id 1234567 \\\n--node-address http://localhost:7777 \\\n--chain-name casper \\\n--target-account 020470fecd1f7ae5c1cd53a52c4ca88cd5b76c2926d7e1d831addaa2a64bea9cc3ede6a8e9981c609ee7ab7e3fa37ba914f2fc52f6eea9b746b6fe663afa96750d66 \\\n--amount 10000000000 \\\n--secret-key <path-to-secret_key.pem> \\\n--payment-amount 100000000\n```\n\n----------------------------------------\n\nTITLE: Memory Operations with Size Validation in WebAssembly\nDESCRIPTION: Implements a function for memory operations with size validation in WebAssembly. Validates input parameters and manages memory allocation within constraints.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/versioned_docs/version-2.0.0/developers/json-rpc/json-rpc-transactional.md#2025-04-22_snippet_10\n\nLANGUAGE: webassembly\nCODE:\n```\ne10201017f41a89d021008024002402002450d004186a5021008024002400240024020014100480d0041fca90210082003280208450d014182ad02100820032802042204450d01419cc70610082003280200210320014101230141096a2401230141f4034b0440000b100f230141096b24012202450d0341bccb0a1008200220032004230141036a2401230141f4034b0440000b1023230141036b24011a200320044101230141086a2401230141f4034b0440000b1010230141086b24010c020b41c8bc021008200041086a41003602000c040b41ccad06100820014101230141096a2401230141f4034b0440000b100f230141096b24012202450d010b41988401100820002002360204200041086a2001360200200041003602000f0b41808201100820002001360204200041086a4101360200200041013602000f0b41f8d500100820002001360204200041086a41003602000b41d0281008200041013602000b\n```\n\n----------------------------------------\n\nTITLE: Printing Account Hash from Public Key Using casper-client - Bash\nDESCRIPTION: Uses casper-client's account-address option to print an account hash for a given public key file or hex string. Designed for developer use in Casper workflows. Must provide the correct path to the public key.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/versioned_docs/version-1.5.X/developers/prerequisites.md#2025-04-22_snippet_23\n\nLANGUAGE: bash\nCODE:\n```\ncasper-client account-address --public-key <path-to-public_key.pem/public-key-hex>\n```\n\n----------------------------------------\n\nTITLE: Defining state_get_auction_info RPC Method Schema in JSON\nDESCRIPTION: JSON schema definition for the state_get_auction_info RPC method, which retrieves auction information from the Casper Network. The schema defines the method parameters, expected result structure, and includes a comprehensive example showing the response format with validator and delegation details.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/condor/jsonrpc-comp/rpc-2.0/state_get_auction_info.json.md#2025-04-22_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"name\": \"state_get_auction_info\",\n  \"summary\": \"returns the bids and validators as of either a specific block (by height or hash), or the most recently added block\",\n  \"params\": [\n    {\n      \"name\": \"block_identifier\",\n      \"schema\": {\n        \"description\": \"The block identifier.\",\n        \"$ref\": \"#/components/schemas/BlockIdentifier\"\n      },\n      \"required\": false\n    }\n  ],\n  \"result\": {\n    \"name\": \"state_get_auction_info_result\",\n    \"schema\": {\n      \"description\": \"Result for \\\"state_get_auction_info\\\" RPC response.\",\n      \"type\": \"object\",\n      \"required\": [\n        \"api_version\",\n        \"auction_state\"\n      ],\n      \"properties\": {\n        \"api_version\": {\n          \"description\": \"The RPC API version.\",\n          \"type\": \"string\"\n        },\n        \"auction_state\": {\n          \"description\": \"The auction state.\",\n          \"$ref\": \"#/components/schemas/AuctionState\"\n        }\n      },\n      \"additionalProperties\": false\n    }\n  },\n  \"examples\": [\n    {\n      \"name\": \"state_get_auction_info_example\",\n      \"params\": [\n        {\n          \"name\": \"block_identifier\",\n          \"value\": {\n            \"Hash\": \"0707070707070707070707070707070707070707070707070707070707070707\"\n          }\n        }\n      ],\n      \"result\": {\n        \"name\": \"state_get_auction_info_example_result\",\n        \"value\": {\n          \"api_version\": \"2.0.0\",\n          \"auction_state\": {\n            \"state_root_hash\": \"0b0b0b0b0b0b0b0b0b0b0b0b0b0b0b0b0b0b0b0b0b0b0b0b0b0b0b0b0b0b0b0b\",\n            \"block_height\": 10,\n            \"era_validators\": [\n              {\n                \"era_id\": 10,\n                \"validator_weights\": [\n                  {\n                    \"public_key\": \"01197f6b23e16c8532c6abc838facd5ea789be0c76b2920334039bfa8b3d368d61\",\n                    \"weight\": \"10\"\n                  }\n                ]\n              }\n            ],\n            \"bids\": [\n              {\n                \"public_key\": \"01197f6b23e16c8532c6abc838facd5ea789be0c76b2920334039bfa8b3d368d61\",\n                \"bid\": {\n                  \"validator_public_key\": \"01197f6b23e16c8532c6abc838facd5ea789be0c76b2920334039bfa8b3d368d61\",\n                  \"bonding_purse\": \"uref-fafafafafafafafafafafafafafafafafafafafafafafafafafafafafafafafa-007\",\n                  \"staked_amount\": \"20\",\n                  \"delegation_rate\": 0,\n                  \"vesting_schedule\": null,\n                  \"delegators\": [\n                    {\n                      \"delegator_public_key\": \"014508a07aa941707f3eb2db94c8897a80b2c1197476b6de213ac273df7d86c4ff\",\n                      \"delegator\": {\n                        \"delegator_public_key\": \"014508a07aa941707f3eb2db94c8897a80b2c1197476b6de213ac273df7d86c4ff\",\n                        \"staked_amount\": \"10\",\n                        \"bonding_purse\": \"uref-fbfbfbfbfbfbfbfbfbfbfbfbfbfbfbfbfbfbfbfbfbfbfbfbfbfbfbfbfbfbfbfb-007\",\n                        \"validator_public_key\": \"01197f6b23e16c8532c6abc838facd5ea789be0c76b2920334039bfa8b3d368d61\",\n                        \"vesting_schedule\": null\n                      }\n                    }\n                  ],\n                  \"inactive\": false\n                }\n              }\n            ]\n          }\n        }\n      }\n    }\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Message Topics Structure in Casper Network\nDESCRIPTION: Defines the structure of message topics in Casper Network, showing how topics are stored with their names and corresponding hashes. The composite key is derived from the caller's entity address and topic name hash.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/docs/developers/writing-onchain-code/emitting-contract-events.md#2025-04-22_snippet_6\n\nLANGUAGE: json\nCODE:\n```\n\"message_topics\": [\n  {\n    \"topic_name\": \"events\",\n    \"topic_name_hash\": \"topic-name-5721a6d9d7a9afe5dfdb35276fb823bed0f825350e4d865a5ec0110c380de4e1\"\n  }\n]\n```\n\n----------------------------------------\n\nTITLE: Executing Transfer Transaction with Casper Client CLI\nDESCRIPTION: This command initiates a transfer transaction using the Casper client command-line interface. It specifies the target address, transfer amount, gas price tolerance, and the sender's secret key or address.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/versioned_docs/version-2.0.0/concepts/transactions.md#2025-04-22_snippet_10\n\nLANGUAGE: json\nCODE:\n```\ncasper-client put-txn transfer\n/// The recipient of the transfer.\n  --target <FORMATTED STRING>\n/// The amount in motes to be transferred.\n  --transfer-amount <INTEGER>\n/// The maximum gas price that the user is willing to pay for this transaction.\n  --gas-price-tolerance <INTEGER>\n/// The path to the local secret key file, or the [`initiator address`](../developers/json-rpc/types_chain.md#initiatoraddr) sending the transaction.\n  <--secret-key <PATH>|--initiator-address <HEX STRING>>\n```\n\n----------------------------------------\n\nTITLE: Example: Unbonding Stake Using withdraw_bid.wasm on Casper Testnet\nDESCRIPTION: This example shows a specific command to unbond stake using the 'withdraw_bid.wasm' on the Casper Testnet. It includes actual values for node address, secret key path, chain name, session path, payment amount, and public key.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/versioned_docs/version-2.0.0/operators/becoming-a-validator/unbonding.md#2025-04-22_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nsudo -u casper casper-client put-deploy \\\n--node-address http://65.21.75.254:7777 \\\n--secret-key /etc/casper/validator_keys/secret_key.pem \\\n--chain-name casper-test \\\n--session-path $HOME/casper-node/target/wasm32-unknown-unknown/release/withdraw_bid.wasm \\\n--payment-amount 4000000000 \\\n--session-arg=\"public_key:public_key='01c297d2931fec7e22b2fb1ae3ca5afdfacc2c82ba501e8ed158eecef82b4dcdee'\" \\\n--session-arg=\"amount:u512='1000000000000'\"\n```\n\n----------------------------------------\n\nTITLE: Burning CEP-18 Tokens (Uncommented)\nDESCRIPTION: A concise version of the `casper-client` command to execute the `burn` entry point of a CEP-18 contract package. This command excludes inline comments but performs the same function as the commented version, requiring node address, caller's secret key, package name, entry point, owner, amount, chain name, and payment amount.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/versioned_docs/version-1.5.X/resources/tokens/cep18/transfer.md#2025-04-22_snippet_23\n\nLANGUAGE: bash\nCODE:\n```\ncasper-client put-deploy -n http://<NODE IP>:<PORT> \\\n--secret-key ~/casper/demo/user_a/secret_key.pem \\\n--session-package-name \"cep18_contract_package_CEP18\" \\\n--session-entry-point \"burn\" \\\n// This is the account that the tokens will be burned from.\n--session-arg \"owner:key='account-hash-683f53f56926f54ef9584b07585b025c68415dc05f7b2e56749153574b83d5cd'\" \\\n// This is the number of CEP-18 tokens to remove from the total supply.\n--session-arg \"amount:U256='10'\" \\\n--chain-name <CHAIN NAME> \\\n--payment-amount 1000000000\n```\n\n----------------------------------------\n\nTITLE: Writing an Entry to a Dictionary\nDESCRIPTION: Example of writing to a dictionary using the dictionary_put function. This stores a value at the specified dictionary item key within the dictionary referenced by the dictionary URef.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/versioned_docs/version-1.5.X/concepts/dictionaries.md#2025-04-22_snippet_2\n\nLANGUAGE: rust\nCODE:\n```\nstorage::dictionary_put(dictionary_uref, &dictionary_item_key, value);\n```\n\n----------------------------------------\n\nTITLE: Generating Certificates for Casper Network Access Control\nDESCRIPTION: Shell commands to generate the necessary certificates for securing a Casper private network. This includes creating a certificate authority, generating node keys, and signing node certificates with the CA.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/docs/operators/setup-network/create-private.md#2025-04-22_snippet_14\n\nLANGUAGE: sh\nCODE:\n```\n# Recommended EC curve algorithm to use\nexport CURVE=\"secp521r1\"\n\n# Generate secret key for CA and save it to ca_key.pem\nopenssl ecparam -out ca_key.pem -name $CURVE -genkey\n# Create ca_cert.pem signed by ca_key.pem\nopenssl req -new -x509 -days 3650 -extensions v3_ca -key ca_key.pem -out ca_cert.pem\n\n# Generate secret key for a node and a certificate signed by the CA\nopenssl ecparam -out node_1.pem -name $CURVE -genkey\nopenssl req -new -key node_1.pem -out node_1.csr -sha256\nopenssl x509 -req -days 3650 -CA ca_cert.pem -CAkey ca_key.pem -CAcreateserial -in node_1.csr -out node_1_cert.pem\n```\n\n----------------------------------------\n\nTITLE: NFT Contract State Configuration JSON\nDESCRIPTION: Defines the initial state configuration for an NFT contract including metadata kinds, identifier modes, burn settings, minting permissions, and token tracking structures. Each configuration is stored as a key-value pair with specific access rights denoted by URef addresses.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/versioned_docs/version-1.5.X/resources/tokens/cep78/using-casper-client/full-installation-tutorial.md#2025-04-22_snippet_12\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"key\": \"uref-05c0eb8e7ef4caa6f228e8ee91874dc64926b95926d839b458fdce356063a817-000\",\n  \"transform\": {\n    \"WriteCLValue\": {\n      \"cl_type\": {\n        \"Map\": {\n          \"key\": \"U8\",\n          \"value\": \"U8\"\n        }\n      },\n      \"bytes\": \"010000000000\",\n      \"parsed\": [\n        {\n          \"key\": 0,\n          \"value\": 0\n        }\n      ]\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Setting URef Access Rights - JavaScript\nDESCRIPTION: Code examples demonstrating how to create URefs with different access rights combinations using the with_access_rights method. Shows all possible access right combinations from NONE to READ_ADD_WRITE.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/docs/developers/dapps/uref-security.md#2025-04-22_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\n// This example will create a version of the original URef with access rights stripped entirely.\nlet new_uref = uref.with_access_rights(AccessRights::NONE);\n// This example will create a version of the original URef with only READ access rights.\nlet new_uref = uref.with_access_rights(AccessRights::READ);\n// This example will create a version of the original URef with only WRITE access rights.\nlet new_uref = uref.with_access_rights(AccessRights::WRITE);\n// This example will create a version of the original URef with both READ and WRITE access rights.\nlet new_uref = uref.with_access_rights(AccessRights::READ_WRITE);\n// This example will create a version of the original URef with only ADD access rights.\nlet new_uref = uref.with_access_rights(AccessRights::ADD);\n// This example will create a version of the original URef with both READ and ADD access rights.\nlet new_uref = uref.with_access_rights(AccessRights::READ_ADD);\n// This example will create a version of the original URef with both ADD and WRITE access rights.\nlet new_uref = uref.with_access_rights(AccessRights::ADD_WRITE);\n// This example will create a version of the original URef with full access rights.\nlet new_uref = uref.with_access_rights(AccessRights::READ_ADD_WRITE);\n```\n\n----------------------------------------\n\nTITLE: Sample Response for State Root Hash Query\nDESCRIPTION: This snippet shows an example response from the state root hash query. It includes the API version and the current state root hash, which is used in subsequent queries.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/versioned_docs/version-2.0.0/resources/beginner/cep18.md#2025-04-22_snippet_9\n\nLANGUAGE: bash\nCODE:\n```\n{\n  \"id\": 2950480729544096556,\n  \"jsonrpc\": \"2.0\",\n  \"result\": {\n    \"api_version\": \"1.4.15\",\n    \"state_root_hash\": \"7706d906fce25dcdadb2a9453f5243a6c72c4444e6c826cf2941157333a48705\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Installing the Casper Python SDK using pip (Bash)\nDESCRIPTION: Installs the `pycspr` package, the official Casper Python SDK, using the pip package manager for Python 3. This command requires `pip3` to be available in the system's environment and assumes Python 3.12+ is installed. It fetches and installs the necessary library from the Python Package Index (PyPI).\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/versioned_docs/version-1.5.X/developers/dapps/sdk/python-sdk.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\npip3 install pycspr\n```\n\n----------------------------------------\n\nTITLE: Installing the Casper SDK Client Library - Python - bash\nDESCRIPTION: Installs the pycspr SDK via pip for Python environments. This enables access to Casper network client functionality for applications written in Python. Input: command-line interface. Output: installed pycspr package in the Python environment.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/versioned_docs/version-2.0.0/developers/dapps/sdk/client-library-usage.md#2025-04-22_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\npip install pycspr\n```\n\n----------------------------------------\n\nTITLE: Installing Casper .NET SDK via Package Manager\nDESCRIPTION: Command to install the Casper Network SDK package using the Package Manager in Windows.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/versioned_docs/version-2.0.0/developers/dapps/sdk/csharp-sdk.md#2025-04-22_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nInstall-Package Casper.Network.SDK\n```\n\n----------------------------------------\n\nTITLE: Compiling a Casper Smart Contract to WebAssembly - Bash\nDESCRIPTION: This sequence of shell commands compiles the smart contract code to a WebAssembly target suitable for Casper's runtime. 'cd' changes into the project directory; 'make prepare' likely installs any dependencies and sets up build prerequisites; 'make build-contract' triggers the contract build process, outputting a .wasm file in the appropriate target folder. The workflow uses GNU Make and expects a Makefile with these targets. Fails if the directory or Makefile is missing.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/docs/developers/writing-onchain-code/getting-started.md#2025-04-22_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\ncd my-project\nmake prepare\nmake build-contract\n```\n\n----------------------------------------\n\nTITLE: Deploying CEP-18 Contract on Casper Testnet using Bash\nDESCRIPTION: Instructions for deploying the CEP-18 token contract on the Casper test network. Includes commands for submitting the deploy and verifying it using the state root hash. Ensure the Casper client is installed.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/docs/resources/beginner/cep18.md#2025-04-22_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ncasper-client put-deploy \\\n    --node-address http://<HOST:PORT> \\\n    --chain-name [NETWORK_NAME]] \\\n    --secret-key [PATH_TO_YOUR_KEY]/secret_key.pem \\\n    --payment-amount [AMOUNT] \\\n    --session-path [WASM_FILE_PATH]/[File_Name].wasm\n    --session-arg <\"NAME:TYPE='VALUE'\" OR \"NAME:TYPE=null\">\n```\n\nLANGUAGE: bash\nCODE:\n```\ncasper-client get-state-root-hash --node-address http://78.46.32.13:7777\n```\n\nLANGUAGE: bash\nCODE:\n```\ncasper-client put-deploy \\\n--node-address http://78.46.32.13:7777 \\\n--chain-name casper-test \\\n--secret-key \"./keys/secret_key.pem\" \\\n--payment-amount 150000000000 \\\n--session-path \"./target/wasm32-unknown-unknown/release/cep18.wasm\" \\\n--session-arg \"name:string='CHF Coin'\" \\\n--session-arg \"symbol:string='CHFC'\" \\\n--session-arg \"decimals:u8='10'\" \\\n--session-arg \"total_supply:u256='1000'\"\n```\n\n----------------------------------------\n\nTITLE: Importing Casper Crates for Smart Contract Development in Rust\nDESCRIPTION: This Rust code imports essential crates and modules needed to write Casper smart contracts, specifically for fungible tokens. Dependencies include casper_contract (provides contract APIs), casper_types (holds blockchain-related types like U256 and CLValue), and casper_erc20 (providing ERC-20 abstractions for Casper, implied by context). These imports must be present at the beginning of the main.rs or lib.rs contract file.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/docs/resources/tokens/cep18/full-tutorial.md#2025-04-22_snippet_4\n\nLANGUAGE: rust\nCODE:\n```\n\nuse casper_contract::{contract_api::runtime, unwrap_or_revert::UnwrapOrRevert};\n\nuse casper_types::{CLValue, U256};\n\n```\n\n----------------------------------------\n\nTITLE: Retrieving State Root Hash in Casper Network\nDESCRIPTION: This snippet demonstrates how to use the casper-client to get the current state root hash from a Casper Network node. The state root hash is essential for subsequent queries to the network.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/versioned_docs/version-1.5.X/resources/beginner/cep18.md#2025-04-22_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\ncasper-client get-state-root-hash --node-address http://78.46.32.13:7777\n```\n\n----------------------------------------\n\nTITLE: Creating a JavaScript Loader for the Compiled Wasm Contract\nDESCRIPTION: This JavaScript code defines a Node.js module (`index.js`) located in the project root. It uses the `fs` module to read the compiled Wasm file (`dist/your-contract-name.wasm`), defines necessary environment imports (including a basic `abort` function for error handling), instantiates the Wasm module, and exports its functionalities. Replace `your-contract-name` with the actual contract name.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/versioned_docs/version-1.5.X/developers/writing-onchain-code/assembly-script.md#2025-04-22_snippet_5\n\nLANGUAGE: js\nCODE:\n```\nconst fs = require(\"fs\");\n\nconst compiled = new WebAssembly.Module(fs.readFileSync(__dirname + \"/dist/your-contract-name.wasm\"));\n\nconst imports = {\n    env: {\n        abort(_msg, _file, line, column) {\n            console.error(\"abort called at index.ts:\" + line + \":\" + column);\n        },\n    },\n};\n\nObject.defineProperty(module, \"exports\", {\n    get: () => new WebAssembly.Instance(compiled, imports).exports,\n});\n```\n\n----------------------------------------\n\nTITLE: Minting Additional CEP-18 Tokens using Casper Client\nDESCRIPTION: This command mints a number of CEP-18 tokens directly to the provided account, increasing the total supply. It specifies the recipient's account hash and the amount of tokens to mint.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/docs/resources/tokens/cep18/transfer.md#2025-04-22_snippet_9\n\nLANGUAGE: bash\nCODE:\n```\ncasper-client put-deploy -n http://<NODE IP>:<PORT> \\\n--secret-key ~/casper/demo/user_a/secret_key.pem \\\n--session-package-name \"cep18_contract_package_CEP18\" \\\n--session-entry-point \"mint\" \\\n--session-arg \"owner:key='account-hash-683f53f56926f54ef9584b07585b025c68415dc05f7b2e56749153574b83d5cd'\" \\\n--session-arg \"amount:U256='10'\" \\\n--chain-name <CHAIN NAME> \\\n--payment-amount 1000000000\n```\n\n----------------------------------------\n\nTITLE: Defining Stored Versioned Contract by Named Key Schema - JSON\nDESCRIPTION: This snippet defines a schema for calls to a stored versioned contract addressed by a named key within a signer's account context, including support for specifying the entry point, named key identifier, arguments, and an optional version. It depends on the definition of 'RuntimeArgs' and is meant to standardize contract invocations via API. Inputs must match the prescribed object structure to ensure compatibility with Casper execution, with strict validation enforced by the schema.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/condor/jsonrpc-comp/rpc-1.5/schema.json.md#2025-04-22_snippet_31\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"description\": \"Stored versioned contract referenced by a named key existing in the signer's account context, entry point and an instance of [`RuntimeArgs`].\",\n  \"type\": \"object\",\n  \"required\": [\n    \"StoredVersionedContractByName\"\n  ],\n  \"properties\": {\n    \"StoredVersionedContractByName\": {\n      \"type\": \"object\",\n      \"required\": [\n        \"args\",\n        \"entry_point\",\n        \"name\"\n      ],\n      \"properties\": {\n        \"name\": {\n          \"description\": \"Named key.\",\n          \"type\": \"string\"\n        },\n        \"version\": {\n          \"description\": \"An optional version of the contract to call. It will default to the highest enabled version if no value is specified.\",\n          \"type\": [\n            \"integer\",\n            \"null\"\n          ],\n          \"format\": \"uint32\",\n          \"minimum\": 0.0\n        },\n        \"entry_point\": {\n          \"description\": \"Entry point name.\",\n          \"type\": \"string\"\n        },\n        \"args\": {\n          \"description\": \"Runtime arguments.\",\n          \"allOf\": [\n            {\n              \"$ref\": \"#/components/schemas/RuntimeArgs\"\n            }\n          ]\n        }\n      },\n      \"additionalProperties\": false\n    }\n  },\n  \"additionalProperties\": false\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Fee Elimination Settings in Casper Chainspec\nDESCRIPTION: TOML configuration block defining the fee elimination settings for the Condor release on Mainnet. Includes settings for refund handling, fee handling, validator credit cap, pricing handling, gas hold balance handling, and gas hold interval.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/docs/concepts/economics/fee-elimination.md#2025-04-22_snippet_0\n\nLANGUAGE: toml\nCODE:\n```\nrefund_handling = { type = 'no_refund' }\nfee_handling = { type = 'no_fee' }\nvalidator_credit_cap = [1, 5]\npricing_handling = { type = 'fixed' }\ngas_hold_balance_handling = { type = 'accrued' }\ngas_hold_interval = '24 hours'\n```\n\n----------------------------------------\n\nTITLE: Querying Casper Network State\nDESCRIPTION: This command allows querying the state of a Casper network at a given moment specified by the state root hash. It requires the node address, state root hash, an identifier key (account hash, contract address, etc.), and optionally a query path to access specific information.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/versioned_docs/version-1.5.X/resources/beginner/counter/commands.md#2025-04-22_snippet_2\n\nLANGUAGE: rust\nCODE:\n```\ncasper-client query-global-state \\\n    --node-address [NODE_SERVER_ADDRESS] \\\n    --state-root-hash [STATE_ROOT_HASH] \\\n    --key [ACCOUNT_HASH] \\\n    -q \"[SESSION_NAME]/[SESSION_NAMED_KEY]\" (OPTIONAL)\n```\n\n----------------------------------------\n\nTITLE: Querying Auction Info Request in Casper Network\nDESCRIPTION: JSON-RPC request to get auction information including bids and validators from a specific block. Requires an optional block identifier parameter.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/docs/developers/json-rpc/json-rpc-pos.md#2025-04-22_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"id\": 1,\n  \"jsonrpc\": \"2.0\",\n  \"method\": \"state_get_auction_info\",\n  \"params\": [\n    {\n      \"name\": \"block_identifier\",\n      \"value\": {\n        \"Hash\": \"0707070707070707070707070707070707070707070707070707070707070707\"\n      }\n    }\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Building and Testing NFT Contract\nDESCRIPTION: Commands to prepare the environment, build the contract.wasm file, and run the test suite.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/versioned_docs/version-1.5.X/resources/tokens/cep78/using-casper-client/quickstart-guide.md#2025-04-22_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nmake prepare\nmake test\n```\n\n----------------------------------------\n\nTITLE: Loading Secret Key from File - JavaScript - javascript\nDESCRIPTION: Loads an Ed25519 keypair from a PEM-formatted secret key file using casper-js-sdk. The method reads private key materials securely from disk without hard-coding in source. Requires proper file path and permission to read. Replace Ed25519 with Secp256K1 as needed.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/versioned_docs/version-2.0.0/developers/dapps/sdk/client-library-usage.md#2025-04-22_snippet_8\n\nLANGUAGE: javascript\nCODE:\n```\nconst { Keys } = require(\"casper-js-sdk\");\nconst keypair = Keys.Ed25519.loadKeyPairFromPrivateFile(\"./secret_key.pem\");\n```\n\n----------------------------------------\n\nTITLE: Defining Account Schema in JSON\nDESCRIPTION: This code snippet defines a JSON object schema representing an account, specifying its properties and their types, with references to other schema components. Key properties include account_hash, named_keys, main_purse, associated_keys, and action_thresholds, all necessary for consistent account representation. The schema restricts additional properties, ensuring only predefined properties are used.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/condor/jsonrpc-comp/rpc-2.0/schema/Account.json.md#2025-04-22_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"description\": \"Represents an Account in the global state.\",\n    \"type\": \"object\",\n    \"required\": [\n        \"account_hash\",\n        \"action_thresholds\",\n        \"associated_keys\",\n        \"main_purse\",\n        \"named_keys\"\n    ],\n    \"properties\": {\n        \"account_hash\": {\n            \"$ref\": \"#/components/schemas/AccountHash\"\n        },\n        \"named_keys\": {\n            \"$ref\": \"#/components/schemas/NamedKeys\"\n        },\n        \"main_purse\": {\n            \"$ref\": \"#/components/schemas/URef\"\n        },\n        \"associated_keys\": {\n            \"$ref\": \"#/components/schemas/AccountAssociatedKeys\"\n        },\n        \"action_thresholds\": {\n            \"$ref\": \"#/components/schemas/AccountActionThresholds\"\n        }\n    },\n    \"additionalProperties\": false\n}\n```\n\n----------------------------------------\n\nTITLE: Redelegating Tokens Using Compiled Wasm Contract via Casper Client - Bash\nDESCRIPTION: This Bash snippet shows how to submit a deploy to the network using a compiled 'redelegate.wasm' contract for redelegation, with the casper-client CLI. Required arguments include the node address, secret key for deploy payment, chain name, deploy payment amount, path to the redelegate.wasm file, and session arguments for delegator, validator, amount, and new validator. This approach is more costly than the direct contract call but allows flexibility if modifying or testing custom contracts; dependencies include a compiled redelegate.wasm and the casper-client CLI.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/versioned_docs/version-2.0.0/developers/cli/redelegate.md#2025-04-22_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\ncasper-client put-deploy \\\n--node-address <HOST:PORT> \\\n--secret-key <PATH_TO_DELEGATOR_SECRET_KEY> \\\n--chain-name <CHAIN_NAME> \\\n--payment-amount <PAYMENT_AMOUNT> \\\n--session-path <PATH_TO_WASM>/redelegate.wasm \\\n--session-arg \"delegator:public_key='<DELEGATOR_PUBLIC_KEY_HEX>'\" \\\n--session-arg \"validator:public_key='<CURRENT_VALIDATOR_PUBLIC_KEY_HEX>'\" \\\n--session-arg \"amount:u512='<DELEGATION_AMOUNT>'\" \\\n--session-arg \"new_validator:public_key='<NEW_VALIDATOR_PUBLIC_KEY_HEX>'\"\n```\n\n----------------------------------------\n\nTITLE: Bonding Using System Auction Contract\nDESCRIPTION: Command template for submitting a validator bid using the system auction contract's add_bid entry point. Requires node address, secret key, chain name and other parameters.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/versioned_docs/version-2.0.0/operators/becoming-a-validator/bonding.md#2025-04-22_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nsudo -u casper casper-client put-deploy \\\n--node-address <HOST:PORT> \\\n--secret-key <PATH> \\\n--chain-name <CHAIN_NAME> \\\n--payment-amount <PAYMENT_AMOUNT_IN_MOTES> \\\n--session-hash <SESSION_HASH> \\\n--session-entry-point add_bid \\\n--session-arg \"public_key:public_key='<PUBLIC_KEY_HEX>'\" \\\n--session-arg \"amount:u512='<BID_AMOUNT>'\" \\\n--session-arg \"delegation_rate:u8='<PERCENT_TO_KEEP_FROM_DELEGATORS>'\" \\\n--session-arg \"minimum_delegation_amount:u64='<MINIMUM_DELEGATION_AMOUNT>'\" \\\n--session-arg \"maximum_delegation_amount:u64='<MAXIMUM_DELEGATION_AMOUNT>'\"\n```\n\n----------------------------------------\n\nTITLE: Adding an Associated Key using Casper Client (Bash)\nDESCRIPTION: Sends a deploy to a Casper node to add a new associated key to an account using the `add_account.wasm` session code. It specifies the node address, chain name, payment amount, secret key file, path to the WASM file, the new key's account hash, and its assigned weight.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/versioned_docs/version-2.0.0/resources/advanced/multi-sig/multi-sig-workflow.md#2025-04-22_snippet_12\n\nLANGUAGE: bash\nCODE:\n```\ncasper-client put-deploy --node-address https://node.testnet.casper.network \\\n--chain-name \"casper-test\" \\\n--payment-amount 500000000 \\\n--secret-key $PATH/secret_key.pem \\\n--session-path target/wasm32-unknown-unknown/release/add_account.wasm \\\n--session-arg \"new_key:key='account-hash-1fed34baa6807a7868bb18f91b161d99ebf21763810fe4c92e39775d10bbf1f8\" \\\n--session-arg \"weight:u8='1'\"\n```\n\n----------------------------------------\n\nTITLE: Calling Counter Contract by Name\nDESCRIPTION: Example of calling the Counter contract's counter_inc entry point using its named key reference.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/versioned_docs/version-2.0.0/developers/cli/calling-contracts.md#2025-04-22_snippet_11\n\nLANGUAGE: rust\nCODE:\n```\ncasper-client put-deploy \\\n    --node-address http://65.21.235.219:7777 \\\n    --chain-name casper-test \\\n    --secret-key [PATH_TO_YOUR_KEY]/secret_key.pem \\\n    --payment-amount 100000000 \\\n    --session-name \"counter\" \\\n    --session-entry-point \"counter_inc\"\n```\n\n----------------------------------------\n\nTITLE: Defining JSON Schema Components for Casper Network API\nDESCRIPTION: Comprehensive schema definitions for Casper Network API components including CLValue, Account, Contract, Deploy Info, and various blockchain-specific data structures. Each component has required properties and references to other schema definitions.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/condor/jsonrpc-comp/rpc-2.0/schema/components.json.md#2025-04-22_snippet_45\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"description\": \"An account.\",\n  \"type\": \"object\",\n  \"required\": [\"Account\"],\n  \"properties\": {\n    \"Account\": {\n      \"$ref\": \"#/components/schemas/Account\"\n    }\n  },\n  \"additionalProperties\": false\n},\n{\n  \"description\": \"Contract wasm.\",\n  \"type\": \"object\",\n  \"required\": [\"ContractWasm\"],\n  \"properties\": {\n    \"ContractWasm\": {\n      \"$ref\": \"#/components/schemas/ContractWasm\"\n    }\n  },\n  \"additionalProperties\": false\n}\n```\n\n----------------------------------------\n\nTITLE: Serializing Motes Structure\nDESCRIPTION: Describes the `Motes` struct, which represents a quantity of Motes (the native token of the Casper Network). This struct is serialized directly as a `U512` numeric value.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/versioned_docs/version-2.0.0/concepts/serialization/types.md#2025-04-22_snippet_28\n\nLANGUAGE: text\nCODE:\n```\nA `struct` representing a number of `Motes` serialized as a [`U512`](./primitives.md#clvalue-numeric) value.\n```\n\n----------------------------------------\n\nTITLE: Executing Cross-Contract Call in Casper Network\nDESCRIPTION: This snippet shows how to execute a cross-contract call on the Casper network using the casper-client CLI. It calls the 'call_contract_2' entry point of one contract, passing a new message and the hash of another contract as arguments.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/versioned_docs/version-1.5.X/resources/advanced/cross-contract.md#2025-04-22_snippet_28\n\nLANGUAGE: bash\nCODE:\n```\ncasper-client put-deploy \\\n    --node-address http://136.243.187.84:7777 \\\n    --chain-name casper-test \\\n    --secret-key ./keys/secret_key.pem \\\n    --payment-amount 20000000000 \\\n    --session-hash hash-32ad0e54e874f68706708ebfd2c5aba7803eb64ccff71a50d3c4d4f29db15c92 \\\n    --session-entry-point \"call_contract_2\" \\\n    --session-arg \"new_message:string='Hello new message!'\" \\\n    --session-arg \"hello_world_contract:Key='hash-b7a06298cc71d4cac05929cc0713dfd5a541c68b71cb500cd04547b5cd0385ea'\"\n```\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"id\": -6419793201665396463,\n  \"jsonrpc\": \"2.0\",\n  \"result\": {\n    \"api_version\": \"1.4.13\",\n    \"deploy_hash\": \"15e11340d92fc9e64deb38bd942f4efb69caad0851eec24fd577070309d18537\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Contract Schema Definition in JSON Schema\nDESCRIPTION: Defines the JSON schema for a Casper smart contract including required fields like package hash, wasm hash, entry points, named keys and protocol version. Includes nested type definitions for contract components.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/condor/jsonrpc-comp/rpc-1.5/schema.json.md#2025-04-22_snippet_58\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"description\": \"A contract struct that can be serialized as  JSON object.\",\n  \"type\": \"object\",\n  \"required\": [\n    \"contract_package_hash\",\n    \"contract_wasm_hash\", \n    \"entry_points\",\n    \"named_keys\",\n    \"protocol_version\"\n  ],\n  \"properties\": {\n    \"contract_package_hash\": {\n      \"$ref\": \"#/components/schemas/ContractPackageHash\"\n    },\n    \"contract_wasm_hash\": {\n      \"$ref\": \"#/components/schemas/ContractWasmHash\"\n    },\n    \"named_keys\": {\n      \"type\": \"array\",\n      \"items\": {\n        \"$ref\": \"#/components/schemas/NamedKey\"\n      }\n    },\n    \"entry_points\": {\n      \"type\": \"array\",\n      \"items\": {\n        \"$ref\": \"#/components/schemas/EntryPoint\"\n      }\n    },\n    \"protocol_version\": {\n      \"type\": \"string\"\n    }\n  },\n  \"additionalProperties\": false\n}\n```\n\n----------------------------------------\n\nTITLE: Example account_put_deploy Request\nDESCRIPTION: JSON-RPC request example for the account_put_deploy method, showing how to send a deploy with approvals, header information, payment, and session details to a Casper network node.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/versioned_docs/version-1.5.X/developers/json-rpc/json-rpc-transactional.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n{\n  \"id\": 1,\n  \"jsonrpc\": \"2.0\",\n  \"method\": \"account_put_deploy\",\n  \"params\": [\n    {\n      \"approvals\": [\n        {\n          \"signer\": \"01f8b29f39c38600ecb3bbb082951e04ab63a4ad4f7c9048a5057e461a5a8d58a5\",\n          \"signature\": \"019d6ef5c62c80ad4e50df343fba6f0fced17dea4c65e7976f66335ffcfcde2a7f02e928c8507cef3c76c3151e0e9cc9c3f7838b9f7a99ac4be5522ca092841100\"\n        }\n      ],\n      \"hash\": \"00a8677713222df88b6988926e0b14adeda6c663957f5075003395da4e5c6888\",\n      \"header\": {\n        \"account\": \"01f8b29f39c38600ecb3bbb082951e04ab63a4ad4f7c9048a5057e461a5a8d58a5\",\n        \"body_hash\": \"145ae09d6da5bc290051db8cb7132a41a30473d5900eaaf409d92b666325ca00\",\n        \"chain_name\": \"casper-net-1\",\n        \"dependencies\": [\n          \"0101010101010101010101010101010101010101010101010101010101010101\"\n        ],\n        \"gas_price\": 1,\n        \"timestamp\": \"2023-09-26T14:07:10.024Z\",\n        \"ttl\": \"1h\"\n      },\n      \"payment\": {\n        \"StoredContractByName\": {\n          \"args\": [\n            [\n              \"amount\",\n              {\n                \"bytes\": \"0400f90295\",\n                \"cl_type\": \"U512\"\n              }\n            ]\n          ],\n          \"entry_point\": \"example-entry-point\",\n          \"name\": \"casper-example\"\n        }\n      },\n      \"session\": {\n        \"Transfer\": {\n          \"args\": [\n            [\n              \"amount\",\n              {\n                \"cl_type\": \"U512\",\n                \"bytes\": \"0400f90295\"\n              }\n            ],\n            [\n              \"target\",\n              {\n                \"cl_type\": \"URef\",\n                \"bytes\": \"09480c3248ef76b603d386f3f4f8a5f87f597d4eaffd475433f861af187ab5db07\"\n              }\n            ]\n          ]\n        }\n      }\n    }\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: EntryPoint Structure Definition\nDESCRIPTION: Defines the structure of contract entry points including name, arguments, return type, access control and entry point type.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/docs/concepts/serialization/types.md#2025-04-22_snippet_1\n\nLANGUAGE: rust\nCODE:\n```\nstruct EntryPoint {\n    name: String,\n    args: Vec<Parameter>,\n    ret: Unit,\n    access: Access,          // u8(1) for public, u8(2) + List for authorized\n    entry_point_type: u8     // 0 for Session, 1 for Contract\n}\n```\n\n----------------------------------------\n\nTITLE: Installing Casper JavaScript SDK\nDESCRIPTION: Command to install the Casper JavaScript SDK using Node.js package manager.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/docs/developers/dapps/sdk/script-sdk.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm install casper-js-sdk@next --save\n```\n\n----------------------------------------\n\nTITLE: Exporting Public Key and Account Hash in JavaScript - JavaScript\nDESCRIPTION: Extracts the hexadecimal representations of a public key and account hash from a Casper keypair. Assumes previous generation of the publicKey variable. publicKey.toHex() returns the hex public key; toAccountHashStr() returns the account hash with 'account-hash-' prefix.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/versioned_docs/version-1.5.X/developers/dapps/sdk/client-library-usage.md#2025-04-22_snippet_8\n\nLANGUAGE: javascript\nCODE:\n```\n// Create a hexadecimal representation of the public key and account hash.\nconst publicKeyHex = publicKey.toHex();\nconst accountHashHex = publicKey.toAccountHashStr();\n```\n\n----------------------------------------\n\nTITLE: Building the Two-Party Multi-Sig Contract Using Bash Make Commands\nDESCRIPTION: This Bash code navigates to the previously cloned directory and uses 'make' to build the Rust session contract, compiling it to Wasm bytecode. It assumes Make and Rust toolchains are installed. The command outputs the final Wasm file needed for deployment with Casper.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/docs/resources/advanced/two-party-multi-sig.md#2025-04-22_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ncd two-party-multi-sig\nmake build-contract\n```\n\n----------------------------------------\n\nTITLE: Sample JSON Response for State Root Hash Query\nDESCRIPTION: Example JSON response received after successfully executing the `get-state-root-hash` command. Contains the JSON-RPC version, request ID, API version, and the requested `state_root_hash`, which is needed for subsequent global state queries.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/versioned_docs/version-2.0.0/developers/cli/querying-global-state.md#2025-04-22_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n```json\n{\n  \"jsonrpc\": \"2.0\",\n  \"id\": -4225403855447288375,\n  \"result\": {\n    \"api_version\": \"2.0.0\",\n    \"state_root_hash\": \"6b5849caa605acdc29564f303764396a27ef7a6b1a61f7b13109b129e7e70d81\"\n  }\n}\n```\n```\n\n----------------------------------------\n\nTITLE: Defining Global Constants for Casper Counter Contract\nDESCRIPTION: This code defines constants used within the contract, including contract package name, access URefs, entry point names, and key names for storing values. These constants provide consistent naming across the contract.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/versioned_docs/version-1.5.X/developers/writing-onchain-code/simple-contract.md#2025-04-22_snippet_9\n\nLANGUAGE: rust\nCODE:\n```\n// Creating constants for values within the contract package.\nconst CONTRACT_PACKAGE_NAME: &str = \"counter_package_name\";\nconst CONTRACT_ACCESS_UREF: &str = \"counter_access_uref\";\n\n// Creating constants for the various contract entry points.\nconst ENTRY_POINT_COUNTER_INC: &str = \"counter_inc\";\nconst ENTRY_POINT_COUNTER_GET: &str = \"counter_get\";\n\n// Creating constants for values within the contract.\nconst CONTRACT_VERSION_KEY: &str = \"version\";\nconst CONTRACT_KEY: &str = \"counter\";\nconst COUNT_KEY: &str = \"count\";\n```\n\n----------------------------------------\n\nTITLE: Querying Account Details from Casper Testnet Global State using Casper CLI\nDESCRIPTION: Retrieves detailed information about a specific Casper account using the `casper-client query-global-state` command. Requires the Testnet node address, a valid `--state-root-hash` (obtained previously), and the account identifier (`--key` argument, typically an account hash) to query. Replace `<STATE_ROOT_HASH>` and `<PRIMARY_ACCOUNT_HASH>`.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/docs/resources/advanced/multi-sig/multi-sig-workflow.md#2025-04-22_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\ncasper-client query-global-state \\\n--node-address https://node.testnet.casper.network \\\n--state-root-hash <STATE_ROOT_HASH> \\\n--key account-hash-<PRIMARY_ACCOUNT_HASH>\n```\n\n----------------------------------------\n\nTITLE: Running Basic Tests for a Casper Smart Contract using Make - Bash\nDESCRIPTION: This snippet demonstrates how to execute all the autogenerated and custom tests for a Casper smart contract project using 'make test'. When triggered, the Makefile builds the contract code and runs unit or integration tests using the Casper virtual machine. A successful run validates correct test and contract integration. Requires a project-specific Makefile with an appropriate 'test' target, as well as all Rust and build tool dependencies.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/docs/developers/writing-onchain-code/getting-started.md#2025-04-22_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\nmake test\n```\n\n----------------------------------------\n\nTITLE: Setting Up Payment for Casper Network Deploys in JavaScript\nDESCRIPTION: This code snippet demonstrates how to set up the payment for a Casper Network deploy using the casper-js-sdk. It uses the standard payment method with a specified deploy cost.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/versioned_docs/version-2.0.0/resources/advanced/list-cspr.md#2025-04-22_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nimport { DeployUtil } from 'casper-js-sdk';\n\nconst payment = DeployUtil.standardPayment(deployCost);\n```\n\n----------------------------------------\n\nTITLE: Defining Contract Schema in JSON for Casper Network API\nDESCRIPTION: JSON schema definition for the Contract object in Casper Network. It specifies required fields including contract package hash, contract WASM hash, entry points, named keys, and protocol version.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/condor/jsonrpc-comp/rpc-2.0/schema/components.json.md#2025-04-22_snippet_47\n\nLANGUAGE: json\nCODE:\n```\n\"Contract\": {\n    \"description\": \"Methods and type signatures supported by a contract.\",\n    \"type\": \"object\",\n    \"required\": [\n        \"contract_package_hash\",\n        \"contract_wasm_hash\",\n        \"entry_points\",\n        \"named_keys\",\n        \"protocol_version\"\n    ],\n    \"properties\": {\n        \"contract_package_hash\": {\n            \"$ref\": \"#/components/schemas/ContractPackageHash\"\n        },\n        \"contract_wasm_hash\": {\n            \"$ref\": \"#/components/schemas/ContractWasmHash\"\n        },\n        \"named_keys\": {\n            \"$ref\": \"#/components/schemas/NamedKeys\"\n        },\n        \"entry_points\": {\n            \"$ref\": \"#/components/schemas/Array_of_NamedEntryPoint\"\n        },\n        \"protocol_version\": {\n            \"$ref\": \"#/components/schemas/ProtocolVersion\"\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Compiling Delegate Contract\nDESCRIPTION: Commands to set up the Rust environment and compile the delegate contract. This step prepares the WASM file needed for deployment.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/docs/developers/dapps/sdk/client-library-usage.md#2025-04-22_snippet_18\n\nLANGUAGE: bash\nCODE:\n```\nmake setup-rs\nmake build-contract-rs/delegate\n```\n\n----------------------------------------\n\nTITLE: Installing the CEP-18 Main Token Contract on Casper Network\nDESCRIPTION: This command deploys the CEP-18 token contract to a Casper network with customizable parameters including name, symbol, total supply, and decimals. It requires a proper node address, chain name, and a funded account to pay for the transaction.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/versioned_docs/version-1.5.X/resources/tokens/cep18/quickstart-guide.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ncasper-client put-deploy -n http://<NODE IP>:<PORT> \\\n--chain-name <CHAIN NAME> \\\n--secret-key ~/casper/demo/user_a/secret_key.pem \\\n--session-path ~/casper/demo/cep18.wasm \\\n--session-arg \"name:string='CEP18'\" \\\n--session-arg \"symbol:string='gris'\" \\\n--session-arg \"total_supply:u256='100'\" \\\n--session-arg \"decimals:u8='1'\" \\\n--payment-amount 150000000000\n```\n\n----------------------------------------\n\nTITLE: Setting Up Basic Contract Structure in Rust for Casper Network\nDESCRIPTION: Initial setup for a Casper smart contract showing the base structure with import statements and an empty call entry point. This provides the foundation for implementing cross-contract communication.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/versioned_docs/version-2.0.0/resources/advanced/cross-contract.md#2025-04-22_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\n#![no_std]\n#![no_main]\n\n#[cfg(not(target_arch = \"wasm32\"))]\ncompile_error!(\"target arch should be wasm32: compile with '--target wasm32-unknown-unknown'\");\n\n// We need to explicitly import the std alloc crate and `alloc::string::String` as we are in a\n// `no_std` environment.\nextern crate alloc;\n\n// The elementary types \nuse alloc::string::String;\nuse alloc::vec::Vec;\nuse alloc::collections::BTreeMap;\nuse crate::alloc::string::ToString;\n\n\n// Casper crates\nuse casper_types::{Key, CLType, Parameter, EntryPoint, EntryPoints, EntryPointType, EntryPointAccess};\n\nuse casper_contract:{\n    contract_api::{runtime, storage},\n    unwrap_or_revert::UnwrapOrRevert,\n};\n\n\n#[no_mangle]\npub extern \"C\" fn call() {\n\n}\n```\n\n----------------------------------------\n\nTITLE: Function to Deploy UpdateMessage Smart Contract Entry Point\nDESCRIPTION: This JavaScript function 'updateMessage' prepares and sends a smart contract deployment to the Casper blockchain using the 'casper-js-sdk'. It constructs an entrypoint call of 'update_message' with user input and manages user signature through the Casper Wallet. The response alerts the user of the deployment status.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/versioned_docs/version-1.5.X/developers/dapps/template-frontend.md#2025-04-22_snippet_8\n\nLANGUAGE: javascript\nCODE:\n```\nconst NODE_URL = \"http://65.108.127.242:7777/rpc\";\nconst NETWORK_NAME = \"casper-test\"; // \"casper\" for mainnet\nconst CONTRACT_HASH = \"hash-75143aa708275b7dead20ac2cc06c1c3eccff4ffcf1eb9aebb8cce7c35cea041\";\n\nconst updateMessage = (props, message) => {\n    const casperClient = new CasperClient(NODE_URL);\n    const contract = new Contracts.Contract(casperClient);\n    contract.setContractHash(CONTRACT_HASH);\n    const runtimeArguments = RuntimeArgs.fromMap({\n        \"message\": CLValueBuilder.string(message)\n    });\n    const deploy = contract.callEntrypoint(\n        \"update_message\",\n        runtimeArguments,\n        CLPublicKey.fromHex(props.publicKey),\n        NETWORK_NAME,\n        \"1000000000\", // 1 CSPR (10^9 Motes)\n    );\n    const deployJSON = DeployUtil.deployToJson(deploy);\n    provider.sign(JSON.stringify(deployJSON), props.publicKey).then((signedDeploy) => { // Initiates sign request\n        axios.post(\"/sendDeploy\", signedDeploy, {\n            headers: {\n                'Content-Type': 'application/json'\n            }\n        }).then((response) => {\n            alert(response.data);\n        }).catch((error) => {\n            console.error(error.message);\n        });\n    }).catch((error) => {\n        console.error(error.message);\n    });\n}\n```\n\n----------------------------------------\n\nTITLE: Incrementing Casper Counter Contract Value\nDESCRIPTION: Command to increment the counter value in the deployed contract by calling the 'counter_inc' entry point.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/versioned_docs/version-2.0.0/resources/quick-start.md#2025-04-22_snippet_8\n\nLANGUAGE: bash\nCODE:\n```\ncasper-client put-deploy \\\n--node-address [NODE_ADDRESS] \\\n--chain-name [CHAIN_NAME] \\\n--secret-key [PATH_TO_YOUR_KEY] \\\n--payment-amount 100000000 \\\n--session-name \"counter\" \\\n--session-entry-point \"counter_inc\"\n```\n\n----------------------------------------\n\nTITLE: Verbose Balance Query in Casper Network\nDESCRIPTION: This command performs a verbose query of an account's balance, providing detailed output including the JSON-RPC request and response.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/versioned_docs/version-1.5.X/resources/beginner/querying-network.md#2025-04-22_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\ncasper-client query-balance -v \\\n  --id 6 \\\n  --node-address https://node.testnet.casper.network \\\n  --state-root-hash a306a9cf869e52fe9eacdc28aade94215112cc04b6737b3669c35568a47a7dc2 \\\n  --purse-identifier 01360af61b50cdcb7b92cffe2c99315d413d34ef77fadee0c105cc4f1d4120f986\n```\n\n----------------------------------------\n\nTITLE: Defining User Group Schema in JSON\nDESCRIPTION: Defines a JSON schema property representing a 'user group' as a string with descriptive documentation. Intended for use in a versioned contract context, where methods may be restricted to labeled user groups. The 'description' field explains the access control relationship, while the 'type' field enforces a string value.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/condor/jsonrpc-comp/rpc-2.0/schema/Group.json.md#2025-04-22_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\\n    \\\"description\\\": \\\"A (labelled) \\\\\\\"user group\\\\\\\". Each method of a versioned contract may be associated with one or more user groups which are allowed to call it.\\\",\\n    \\\"type\\\": \\\"string\\\"\\n} \n```\n\n----------------------------------------\n\nTITLE: Importing Dependencies for a Casper Smart Contract in Rust\nDESCRIPTION: This snippet imports necessary crates and types for developing a Casper smart contract. It includes the `alloc` crate for dynamic data structures like `String` and `Vec`, the `casper_contract` crate for accessing the Casper runtime API (`runtime`, `storage`) and error handling (`UnwrapOrRevert`), and the `casper_types` crate for Casper-specific data types (`ApiError`, `EntryPoint`, `CLType`, `CLValue`, `URef`, etc.).\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/docs/developers/writing-onchain-code/simple-contract.md#2025-04-22_snippet_8\n\nLANGUAGE: rust\nCODE:\n```\n// This code imports necessary aspects of external crates that we will use in our contract code.\nextern crate alloc;\n\n// Importing Rust types.\nuse alloc::{\n    string::{String, ToString},\n    vec::Vec,\n};\n// Importing aspects of the Casper platform.\nuse casper_contract::{\n    contract_api::{runtime, storage},\n    unwrap_or_revert::UnwrapOrRevert,\n};\n// Importing specific Casper types.\nuse casper_types::{\n    api_error::ApiError,\n    contracts::{EntryPoint, EntryPointAccess, EntryPointType, EntryPoints, NamedKeys},\n    CLType, CLValue, URef,\n};\n```\n\n----------------------------------------\n\nTITLE: Example: Querying Specific Contract State with Casper CLI\nDESCRIPTION: Provides a concrete example of using the `casper-client query-global-state` command to retrieve the state of a specific contract. It includes sample values for the node address (`http://127.0.0.1:11101`), the contract key (`addressable-entity-contract-b51...`), and a block identifier (block hash `58d26b...`).\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/docs/developers/writing-onchain-code/emitting-contract-events.md#2025-04-22_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\ncasper-client query-global-state \\\n--node-address http://127.0.0.1:11101 \\\n--key \"addressable-entity-contract-b51b0f9d94e5744af4dce6b4a9990c5f3e652c1a0a946e680e83f97d8846eff5\" \\\n--block-identifier 58d26bf0eeeefb698d76b319014efd2eaa2198ad754a489a23131948ef41fdd2\n```\n\n----------------------------------------\n\nTITLE: Approving CEP-18 Token Allowance\nDESCRIPTION: Command to approve another account to spend a specified amount of CEP-18 tokens from the sender's balance. This invokes the approve entry point on the CEP-18 contract.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/versioned_docs/version-2.0.0/resources/tokens/cep18/transfer.md#2025-04-22_snippet_7\n\nLANGUAGE: json\nCODE:\n```\ncasper-client put-deploy -n http://<node IP>:<PORT>\\\n--chain-name <CHAIN NAME> \\\n--secret-key ~/casper/demo/user_a/secret_key.pem \\\n// This is the contract hash of the CEP-18 token contract.\n--session-hash hash-05d893e76c731729fc26339e5a970bd79fbf4a6adf743c8385431fb494bff45e \\\n--session-entry-point \"approve\" \\\n// This is the account hash of the account that will receive an allowance from the balance of the account that sent the Deploy.\n--session-arg \"spender:key='account-hash-17192017d32db5dc9f598bf8ac6ac35ee4b64748669b00572d88335941479513'\" \\\n// This is the number of CEP-18 tokens included in the allowance.\n--session-arg \"amount:u256='15'\" \\\n--payment-amount \"10000000000\"\n```\n\n----------------------------------------\n\nTITLE: Retrieving Caller Deploy Authorization Keys in Entry Point (Rust)\nDESCRIPTION: This Rust snippet, intended for use within a contract entry point, retrieves the authorization keys associated with the *calling* deploy. It uses `runtime::list_authorization_keys()` and collects the resulting set of `AccountHash`es into a vector named `authorization_keys_caller`.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/versioned_docs/version-1.5.X/resources/advanced/list-auth-keys-tutorial.md#2025-04-22_snippet_4\n\nLANGUAGE: rust\nCODE:\n```\n```rust\nlet authorization_keys_caller: Vec<AccountHash> =\n    runtime::list_authorization_keys().iter().cloned().collect();\n```\n```\n\n----------------------------------------\n\nTITLE: Defining ActionThresholds Schema in JSON\nDESCRIPTION: JSON schema for ActionThresholds that defines thresholds that must be met when executing actions of certain types, specifying deployment and key management thresholds.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/condor/jsonrpc-comp/rpc-1.5/schema.json.md#2025-04-22_snippet_55\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"description\": \"Thresholds that have to be met when executing an action of a certain type.\",\n  \"type\": \"object\",\n  \"required\": [\n    \"deployment\",\n    \"key_management\"\n  ],\n  \"properties\": {\n    \"deployment\": {\n      \"type\": \"integer\",\n      \"format\": \"uint8\",\n      \"minimum\": 0.0\n    },\n    \"key_management\": {\n      \"type\": \"integer\",\n      \"format\": \"uint8\",\n      \"minimum\": 0.0\n    }\n  },\n  \"additionalProperties\": false\n}\n```\n\n----------------------------------------\n\nTITLE: Cloning and Compiling CEP-18 Contract using Bash\nDESCRIPTION: This snippet demonstrates how to clone the CEP-18 token contract repository from GitHub and compile it to create the WebAssembly (Wasm) target file. Prerequisites include Git and Make tools.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/docs/resources/beginner/cep18.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ngit clone https://github.com/casper-ecosystem/cep18.git\n```\n\nLANGUAGE: bash\nCODE:\n```\ncd cep18\nmake prepare\nmake build-contract\n```\n\nLANGUAGE: bash\nCODE:\n```\nbrew install wabt\n```\n\nLANGUAGE: bash\nCODE:\n```\nmake test\n```\n\n----------------------------------------\n\nTITLE: Creating Cross-Contract Project Structure with Cargo\nDESCRIPTION: This Bash command sets up a new cross-contract communication project within the Casper network environment using Cargo. It requires an existing Rust environment configured for Casper contracts. The command initializes a directory structure for a smart contract project, which includes configuration files and source directories.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/docs/resources/advanced/cross-contract.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ncargo casper cross-contract\n```\n\n----------------------------------------\n\nTITLE: Querying a Transaction's Status by Hash - Bash\nDESCRIPTION: This bash command uses the Casper CLI to verify the execution status of a submitted transaction on the NCTL network. Pass the unique transaction hash and node address as arguments; output includes the deploy's status and any executed outcomes. This is critical for confirming whether a contract deploy succeeded or failed during local testing.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/versioned_docs/version-2.0.0/developers/dapps/nctl-test.md#2025-04-22_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\n$(get_path_to_client) get-transaction efad4a969064b5f8189ea4d6dd2fba2926d01d583a35178c07d7b827de16789e -n http://localhost:11101\n```\n\n----------------------------------------\n\nTITLE: Building the Casper Contract Wasm File using Cargo\nDESCRIPTION: This Bash snippet shows the commands used to compile the Rust smart contract code into a WebAssembly (Wasm) binary, suitable for deployment on the Casper network. It first navigates into the `contract` directory, then uses `cargo build` with the `--release` flag for optimization and `--target wasm32-unknown-unknown` to specify the correct architecture. Finally, `wasm-strip` is used to potentially reduce the size of the resulting `contract.wasm` file located in the `target/wasm32-unknown-unknown/release/` directory.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/versioned_docs/version-1.5.X/resources/advanced/cross-contract.md#2025-04-22_snippet_17\n\nLANGUAGE: bash\nCODE:\n```\ncd contract && cargo build --release --target wasm32-unknown-unknown\n   Compiling contract v0.1.0 (/Users/karolmarter/Desktop/Rust_Projects/cross-contract-2/contract)\n    Finished release [optimized] target(s) in 0.69s\nwasm-strip contract/target/wasm32-unknown-unknown/release/contract.wasm 2>/dev/null | true\n\n```\n\n----------------------------------------\n\nTITLE: Defining JSON Schema for Transaction Signature Object\nDESCRIPTION: This JSON schema defines the structure for an object representing a transaction signature. It mandates the presence of 'signature' and 'signer' properties, referencing external 'Signature' and 'PublicKey' component schemas respectively. The schema enforces that no properties other than the specified ones are allowed (`additionalProperties: false`).\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/condor/jsonrpc-comp/rpc-2.0/schema/Approval.json.md#2025-04-22_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"description\": \"A struct containing a signature of a transaction hash and the public key of the signer.\",\n    \"type\": \"object\",\n    \"required\": [\n        \"signature\",\n        \"signer\"\n    ],\n    \"properties\": {\n        \"signer\": {\n            \"$ref\": \"#/components/schemas/PublicKey\"\n        },\n        \"signature\": {\n            \"$ref\": \"#/components/schemas/Signature\"\n        }\n    },\n    \"additionalProperties\": false\n}\n```\n\n----------------------------------------\n\nTITLE: Adding Auction Bid Using Casper Client Shell\nDESCRIPTION: Attempts to add an auction bid as Alice using the casper-client CLI, expecting a specific auction-related error if not permitted by the network configuration. Requires specific chain specifications, network address, session path, secret key, and payment amounts.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/versioned_docs/version-2.0.0/operators/setup-network/create-private.md#2025-04-22_snippet_16\n\nLANGUAGE: sh\nCODE:\n```\ncasper-client \\\n  put-deploy \\\n  -n $NODE_ADDR \\\n  --chain-name $CHAIN_NAME \\\n  --secret-key alice/secret_key.pem \\\n  --session-path add_bid.wasm \\\n  --payment-amount 5000000000 \\\n  --session-arg \"public_key:public_key='$(<alice/public_key_hex)'\" \\\n  --session-arg \"amount:u512='10000'\" \\\n  --session-arg \"delegation_rate:u8='5'\"\n\n# Error: ApiError::AuctionError(AuctionBidsDisabled) [64559]\n```\n\n----------------------------------------\n\nTITLE: Accessing the Call Stack in Casper Smart Contracts\nDESCRIPTION: Function for retrieving the entire call stack, which contains the chronological order of contract calls initiated by session code. This allows contracts to inspect the chain of contract calls that led to their execution.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/docs/concepts/callstack.md#2025-04-22_snippet_1\n\nLANGUAGE: rust\nCODE:\n```\ncontract_api::runtime::get_call_stack\n```\n\n----------------------------------------\n\nTITLE: Querying Contract Details with get-entity Command\nDESCRIPTION: Command structure for retrieving detailed contract information including entry points and named keys using the get-entity command.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/versioned_docs/version-2.0.0/developers/cli/querying-global-state.md#2025-04-22_snippet_13\n\nLANGUAGE: bash\nCODE:\n```\ncasper-client get-entity \\\n--node-address [NODE_SERVER_ADDRESS] \\\n--entity-identifier [FORMATTED_STRING_OR_PATH]\n```\n\n----------------------------------------\n\nTITLE: Example Delegation Using Compiled Wasm - Casper Client - Bash\nDESCRIPTION: This command provides a real-world Bash example of delegating 500 CSPR on the Casper Testnet through a custom `delegate.wasm` binary, with all necessary file paths, public keys, and values filled in. The payment amount, session Wasm location, validator, and delegator addresses are explicitly included. The command returns a deploy hash and is intended for copying or direct use by developers.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/versioned_docs/version-2.0.0/developers/cli/delegate.md#2025-04-22_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\ncasper-client put-deploy \\\n--node-address http://65.21.75.254:7777  \\\n--chain-name casper-test \\\n--secret-key ~/KEYS/secret_key.pem \\\n--payment-amount 20000000000 \\\n--session-path ~/delegate.wasm \\\n--session-arg \"validator:public_key='01aa17f7b9889480b1bd34c3f94f263b229c7a9b01dd4dda19c2dd1d38d176c7a0'\" \\\n--session-arg \"amount:u512='500000000000'\" \\\n--session-arg \"delegator:public_key='01e3d3392c2e0b943abe709b25de5c353e5e1e9d95c7a76e3dd343d8aa1aa08d51'\"\n```\n\n----------------------------------------\n\nTITLE: Retrieving Block Data JSON Schema in JSON\nDESCRIPTION: Defines the JSON-RPC method 'chain_get_block' to request block data, detailing the parameters and the result format. Dependencies include an understanding of the blockchain network's RPC interface, and familiarity with JSON schema constructs. The input 'block_identifier' is optional and if not specified, defaults are applied. The result includes 'api_version' and potentially null 'block' data. Includes constraints where additional properties are not allowed in the result object.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/condor/jsonrpc-comp/rpc-1.5/chain_get_block.json.md#2025-04-22_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"name\": \"chain_get_block\",\n  \"summary\": \"returns a Block from the network\",\n  \"params\": [\n    {\n      \"name\": \"block_identifier\",\n      \"schema\": {\n        \"description\": \"The block identifier.\",\n        \"$ref\": \"#/components/schemas/BlockIdentifier\"\n      },\n      \"required\": false\n    }\n  ],\n  \"result\": {\n    \"name\": \"chain_get_block_result\",\n    \"schema\": {\n      \"description\": \"Result for \\\"chain_get_block\\\" RPC response.\",\n      \"type\": \"object\",\n      \"required\": [\n        \"api_version\"\n      ],\n      \"properties\": {\n        \"api_version\": {\n          \"description\": \"The RPC API version.\",\n          \"type\": \"string\"\n        },\n        \"block\": {\n          \"description\": \"The block, if found.\",\n          \"anyOf\": [\n            {\n              \"$ref\": \"#/components/schemas/JsonBlock\"\n            },\n            {\n              \"type\": \"null\"\n            }\n          ]\n        }\n      },\n      \"additionalProperties\": false\n    }\n  },\n  \"examples\": [\n    {\n      \"name\": \"chain_get_block_example\",\n      \"params\": [\n        {\n          \"name\": \"block_identifier\",\n          \"value\": {\n            \"Hash\": \"13c2d7a68ecdd4b74bf4393c88915c836c863fc4bf11d7f2bd930a1bbccacdcb\"\n          }\n        }\n      ],\n      \"result\": {\n        \"name\": \"chain_get_block_example_result\",\n        \"value\": {\n          \"api_version\": \"1.5.6\",\n          \"block\": {\n            \"hash\": \"13c2d7a68ecdd4b74bf4393c88915c836c863fc4bf11d7f2bd930a1bbccacdcb\",\n            \"header\": {\n              \"parent_hash\": \"0707070707070707070707070707070707070707070707070707070707070707\",\n              \"state_root_hash\": \"0808080808080808080808080808080808080808080808080808080808080808\",\n              \"body_hash\": \"cd502c5393a3c8b66d6979ad7857507c9baf5a8ba16ba99c28378d3a970fff42\",\n              \"random_bit\": true,\n              \"accumulated_seed\": \"ac979f51525cfd979b14aa7dc0737c5154eabe0db9280eceaa8dc8d2905b20d5\",\n              \"era_end\": {\n                \"era_report\": {\n                  \"equivocators\": [\n                    \"013b6a27bcceb6a42d62a3a8d02a6f0d73653215771de243a63ac048a18b59da29\"\n                  ],\n                  \"rewards\": [\n                    {\n                      \"validator\": \"018a88e3dd7409f195fd52db2d3cba5d72ca6709bf1d94121bf3748801b40f6f5c\",\n                      \"amount\": 1000\n                    }\n                  ],\n                  \"inactive_validators\": [\n                    \"018139770ea87d175f56a35466c34c7ecccb8d8a91b4ee37a25df60f5b8fc9b394\"\n                  ]\n                },\n                \"next_era_validator_weights\": [\n                  {\n                    \"validator\": \"016e7a1cdd29b0b78fd13af4c5598feff4ef2a97166e3ca6f2e4fbfccd80505bf1\",\n                    \"weight\": \"456\"\n                  },\n                  {\n                    \"validator\": \"018a875fff1eb38451577acd5afee405456568dd7c89e090863a0557bc7af49f17\",\n                    \"weight\": \"789\"\n                  },\n                  {\n                    \"validator\": \"01d9bf2148748a85c89da5aad8ee0b0fc2d105fd39d41a4c796536354f0ae2900c\",\n                    \"weight\": \"123\"\n                  }\n                ]\n              },\n              \"timestamp\": \"2020-11-17T00:39:24.072Z\",\n              \"era_id\": 1,\n              \"height\": 10,\n              \"protocol_version\": \"1.0.0\"\n            },\n            \"body\": {\n              \"proposer\": \"01d9bf2148748a85c89da5aad8ee0b0fc2d105fd39d41a4c796536354f0ae2900c\",\n              \"deploy_hashes\": [],\n              \"transfer_hashes\": [\n                \"5c9b3b099c1378aa8e4a5f07f59ff1fcdc69a83179427c7e67ae0377d94d93fa\"\n              ]\n            },\n            \"proofs\": [\n              {\n                \"public_key\": \"01d9bf2148748a85c89da5aad8ee0b0fc2d105fd39d41a4c796536354f0ae2900c\",\n                \"signature\": \"016291a7b2689e2edcc6e79030be50edd02f9bd7d809921ae2654012f808c7b9a0f125bc32d6aa610cbd012395a9832ccfaa9262023339f1db71ca073a13bb9707\"\n              }\n            ]\n          }\n        }\n      }\n    }\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Checking CEP-18 Token Allowance with Utility Contract\nDESCRIPTION: This command invokes the 'check_allowance_of' entry point on the utility contract to verify an account's token spending allowance. It requires the CEP-18 contract hash, token owner account hash, and spender account hash as parameters.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/versioned_docs/version-1.5.X/resources/tokens/cep18/transfer.md#2025-04-22_snippet_9\n\nLANGUAGE: json\nCODE:\n```\ncasper-client put-deploy -n http://<node IP>:<PORT>\\\n--secret-key ~/casper/demo/user_a/secret_key.pem \\\n--session-package-name \"cep18_test_contract\" \\\n--session-entry-point \"check_allowance_of\" \\\n// This is the contract hash for the CEP-18 token.\n--session-arg \"token_contract:account_hash='account-hash-05d893e76c731729fc26339e5a970bd79fbf4a6adf743c8385431fb494bff45e'\" \\\n// This is the account hash for the account that owns the CEP-18 tokens.\n--session-arg \"owner:key='account-hash-39f15c23df9be1244572bb499fac62cbcad3cab2dc1438609842f602f943d7d2'\" \\\n// This is the account hash for the account previously authorized to spend an allowance of the owning account's CEP-18 tokens.\n--session-arg \"spender:key='account-hash-17192017d32db5dc9f598bf8ac6ac35ee4b64748669b00572d88335941479513'\" \\\n--chain-name <CHAIN NAME> \\\n--payment-amount 10000000000\n```\n\n----------------------------------------\n\nTITLE: Retrieving Deploy Information by Hash - Bash\nDESCRIPTION: This command fetches details of a specific deploy on the Casper network using casper-client and the deploy hash that resulted from a previous put-deploy. Requires the deploy hash and node address; provides deploy status and other metadata, aiding in deployment verification.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/docs/resources/beginner/counter/walkthrough.md#2025-04-22_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\ncasper-client get-deploy \\\n    --node-address http://localhost:11101 [DEPLOY_HASH]\n```\n\n----------------------------------------\n\nTITLE: Querying Account Information in Casper Network\nDESCRIPTION: This command queries the global state for account information. It requires the state root hash and the account's public key.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/versioned_docs/version-1.5.X/resources/beginner/querying-network.md#2025-04-22_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ncasper-client query-global-state \\\n  --id 4 \\\n  --node-address http://<node-ip-address>:7777 \\\n  --state-root-hash <state-root-hash> \\\n  --key <hex-encoded-source-account-public-key>\n```\n\n----------------------------------------\n\nTITLE: Configuring Rust for Wasm Compilation\nDESCRIPTION: This Rust attribute configures a smart contract to not use Rust's standard library, reducing the binary size, making it suitable for WebAssembly deployment on Casper. It is applied at the top of the main source file.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/versioned_docs/version-1.5.X/developers/writing-onchain-code/best-practices.md#2025-04-22_snippet_3\n\nLANGUAGE: rust\nCODE:\n```\n#![no_std]\n```\n\n----------------------------------------\n\nTITLE: Transferring CEP-18 Tokens with Casper Client\nDESCRIPTION: This command invokes the 'transfer' entry point on a CEP-18 contract to transfer tokens to another account. It requires the contract hash, recipient account hash, and transfer amount as parameters.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/versioned_docs/version-1.5.X/resources/tokens/cep18/transfer.md#2025-04-22_snippet_0\n\nLANGUAGE: json\nCODE:\n```\ncasper-client put-deploy -n http://<node IP>:<PORT> \\\n// The chain name of the Casper network on which your CEP-18 instance was installed.\n--chain-name <CHAIN NAME>\\\n// The local path to your account's secret key.\n--secret-key ~/casper/demo/user_a/secret_key.pem \\\n// The contract hash of your CEP-18 contract instance.\n--session-hash hash-b568f50a64acc8bbe43462ffe243849a88111060b228dacb8f08d42e26985180 \\\n// The name of the entry point you are invoking.\n--session-entry-point \"transfer\" \\\n// The account hash of the account that you are sending CEP-18 tokens to.\n--session-arg \"recipient:key='account-hash-9f81014b9c7406c531ebf0477132283f4eb59143d7903a2fae54358b26cea44b\" \\\n// The amount of CEP-18 tokens you are sending to the receiving account.\n--session-arg \"amount:u256='10'\" \\\n// The gas payment you are allotting, in motes.\n--payment-amount \"10000000000\"\n```\n\n----------------------------------------\n\nTITLE: Defining Entry Point: mint in Casper Network\nDESCRIPTION: This snippet defines the 'mint' entry point for a Casper Network smart contract. It takes 'owner' (Key) and 'amount' (U256) as arguments, returns Unit, and has public access with caller-based entry point payment.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/versioned_docs/version-2.0.0/developers/cli/sending-transactions.md#2025-04-22_snippet_9\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"name\": \"mint\",\n  \"args\": [\n    {\n      \"name\": \"owner\",\n      \"cl_type\": \"Key\"\n    },\n    {\n      \"name\": \"amount\",\n      \"cl_type\": \"U256\"\n    }\n  ],\n  \"ret\": \"Unit\",\n  \"access\": \"Public\",\n  \"entry_point_type\": \"Called\",\n  \"entry_point_payment\": \"Caller\"\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring CEP-18 Test Suite in Rust\nDESCRIPTION: This code snippet configures the test modules for the CEP-18 token contract, including allowance, installation, minting and burning, and transfer tests.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/docs/resources/tokens/cep18/tests.md#2025-04-22_snippet_7\n\nLANGUAGE: rust\nCODE:\n```\n#[cfg(test)]\nmod allowance;\n#[cfg(test)]\nmod install;\n#[cfg(test)]\nmod mint_and_burn;\n#[cfg(test)]\nmod transfer;\n#[cfg(test)]\nmod utility;\n```\n\n----------------------------------------\n\nTITLE: Querying Node Status with info_get_status in Casper Network\nDESCRIPTION: This example demonstrates how to request the current status of a Casper Network node using the info_get_status JSON-RPC method. This method takes no parameters and returns information about the node's current state.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/versioned_docs/version-1.5.X/developers/json-rpc/json-rpc-informational.md#2025-04-22_snippet_22\n\nLANGUAGE: bash\nCODE:\n```\n{\n  \"id\": 1,\n  \"jsonrpc\": \"2.0\",\n  \"method\": \"info_get_status\",\n  \"params\": []\n}\n```\n\n----------------------------------------\n\nTITLE: Executing Session Code Request with Success Expectation in Casper Test - Rust\nDESCRIPTION: Submits the prepared execution request to the builder and asserts successful execution. This step processes the runtime in the test context and advances state. If execution fails, the test will fail. The pattern is suitable for integration and scenario-based tests against contract/session logic.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/docs/developers/writing-onchain-code/testing-session-code.md#2025-04-22_snippet_9\n\nLANGUAGE: rust\nCODE:\n```\n    builder.exec(execute_request).expect_success().commit();\n```\n\n----------------------------------------\n\nTITLE: Installing Required Casper Tools using Bash\nDESCRIPTION: Installs the core Casper node tools (`casper-client`, `casper-node-launcher`) and the `jq` utility (for JSON processing) using the `apt` package manager.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/versioned_docs/version-1.5.X/operators/setup/install-node.md#2025-04-22_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\nsudo apt install -y casper-client casper-node-launcher jq\n```\n\n----------------------------------------\n\nTITLE: Defining EntityKind Variants - OpenAPI Schema - YAML/JSON\nDESCRIPTION: Defines the 'EntityKind' schema as a polymorphic type within the Casper Network, distinguishing between system contracts, account-based packages, and on-chain WASM smart contracts. This is used for structural validation of API objects referencing entity kinds. Dependencies include references to other schemas like SystemEntityType, AccountHash, and TransactionRuntime.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/condor/jsonrpc-comp/rpc-2.0/schema/components.json.md#2025-04-22_snippet_49\n\nLANGUAGE: yaml\nCODE:\n```\nEntityKind:\n  description: \"The type of Package.\"\n  oneOf:\n    - description: \"Package associated with a native contract implementation.\"\n      type: object\n      required:\n        - System\n      properties:\n        System:\n          $ref: \"#/components/schemas/SystemEntityType\"\n      additionalProperties: false\n    - description: \"Package associated with an Account hash.\"\n      type: object\n      required:\n        - Account\n      properties:\n        Account:\n          $ref: \"#/components/schemas/AccountHash\"\n      additionalProperties: false\n    - description: \"Packages associated with Wasm stored on chain.\"\n      type: object\n      required:\n        - SmartContract\n      properties:\n        SmartContract:\n          $ref: \"#/components/schemas/TransactionRuntime\"\n      additionalProperties: false\n```\n\n----------------------------------------\n\nTITLE: Single Primary Key Account Configuration\nDESCRIPTION: Basic account setup with a single primary key that has full control over deployments and key management. The key has weight 1 matching both thresholds.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/versioned_docs/version-2.0.0/resources/advanced/multi-sig/other-scenarios.md#2025-04-22_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n\"Account\": {\n   \"account_address\": \"account-hash-a1…\",\n      \"action_thresholds\": {\n         \"deployment\": 1,\n         \"key_management\": 1\n   },\n   \"associated_keys\": [\n      {\n         \"account_address\": \"account-hash-a1…\",\n         \"weight\": 1\n      }\n   ],\n   \"main_purse\": \"uref-1234…\",\n   \"named_keys\": []\n}\n```\n\n----------------------------------------\n\nTITLE: Node Status Query\nDESCRIPTION: Commands to query and parse node status information via the REST endpoint.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/versioned_docs/version-2.0.0/operators/setup/node-endpoints.md#2025-04-22_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\ncurl -s http://<node_address>:8888/status\ncurl -s http://<node_address>:8888/status | jq\n```\n\n----------------------------------------\n\nTITLE: Get Node Status Schema in JSON\nDESCRIPTION: Schema definition for the info_get_status endpoint that provides current node status including peers, version info, and chain details.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/condor/jsonrpc-comp/rpc-1.5/schema.json.md#2025-04-22_snippet_10\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"description\": \"Result for \\\"info_get_status\\\" RPC response.\",\n  \"type\": \"object\",\n  \"required\": [\n    \"api_version\",\n    \"available_block_range\",\n    \"block_sync\",\n    \"build_version\",\n    \"chainspec_name\",\n    \"last_progress\", \n    \"peers\",\n    \"reactor_state\",\n    \"starting_state_root_hash\",\n    \"uptime\"\n  ],\n  \"properties\": {\n    \"peers\": {\n      \"description\": \"The node ID and network address of each connected peer.\",\n      \"$ref\": \"#/components/schemas/PeersMap\"\n    },\n    \"api_version\": {\n      \"description\": \"The RPC API version.\",\n      \"type\": \"string\"\n    },\n    \"build_version\": {\n      \"description\": \"The compiled node version.\",\n      \"type\": \"string\" \n    },\n    \"chainspec_name\": {\n      \"description\": \"The chainspec name.\",\n      \"type\": \"string\"\n    },\n    \"starting_state_root_hash\": {\n      \"description\": \"The state root hash of the lowest block in the available block range.\",\n      \"$ref\": \"#/components/schemas/Digest\"\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: State Root Hash RPC Schema Definition\nDESCRIPTION: JSON schema defining the chain_get_state_root_hash RPC endpoint including parameters, result format, and example usage. The endpoint accepts an optional block_identifier parameter and returns the API version and state root hash.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/condor/jsonrpc-comp/rpc-1.5/chain_get_state_root_hash.json.md#2025-04-22_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"name\": \"chain_get_state_root_hash\",\n  \"summary\": \"returns a state root hash at a given Block\",\n  \"params\": [\n    {\n      \"name\": \"block_identifier\",\n      \"schema\": {\n        \"description\": \"The block hash.\",\n        \"$ref\": \"#/components/schemas/BlockIdentifier\"\n      },\n      \"required\": false\n    }\n  ],\n  \"result\": {\n    \"name\": \"chain_get_state_root_hash_result\",\n    \"schema\": {\n      \"description\": \"Result for \\\"chain_get_state_root_hash\\\" RPC response.\",\n      \"type\": \"object\",\n      \"required\": [\n        \"api_version\"\n      ],\n      \"properties\": {\n        \"api_version\": {\n          \"description\": \"The RPC API version.\",\n          \"type\": \"string\"\n        },\n        \"state_root_hash\": {\n          \"description\": \"Hex-encoded hash of the state root.\",\n          \"anyOf\": [\n            {\n              \"$ref\": \"#/components/schemas/Digest\"\n            },\n            {\n              \"type\": \"null\"\n            }\n          ]\n        }\n      },\n      \"additionalProperties\": false\n    }\n  },\n  \"examples\": [\n    {\n      \"name\": \"chain_get_state_root_hash_example\",\n      \"params\": [\n        {\n          \"name\": \"block_identifier\",\n          \"value\": {\n            \"Height\": 10\n          }\n        }\n      ],\n      \"result\": {\n        \"name\": \"chain_get_state_root_hash_example_result\",\n        \"value\": {\n          \"api_version\": \"1.5.6\",\n          \"state_root_hash\": \"0808080808080808080808080808080808080808080808080808080808080808\"\n        }\n      }\n    }\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Casper Transfer Transaction Example\nDESCRIPTION: Example of sending CSPR tokens using the Casper command-line client with specific transaction parameters.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/versioned_docs/version-2.0.0/concepts/accounts-and-keys.md#2025-04-22_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\ncasper-client transfer \\\n--transfer-id 1234567 \\\n--node-address http://localhost:7777 \\\n--chain-name casper \\\n--target-account 020470fecd1f7ae5c1cd53a52c4ca88cd5b76c2926d7e1d831addaa2a64bea9cc3ede6a8e9981c609ee7ab7e3fa37ba914f2fc52f6eea9b746b6fe663afa96750d66 \\\n--amount 10000000000 \\\n--secret-key <path-to-secret_key.pem> \\\n--payment-amount 100000000\n```\n\n----------------------------------------\n\nTITLE: Example Redelegation Using System Auction Contract\nDESCRIPTION: Practical example of redelegating tokens using the system auction contract on a private Casper network running version 1.5. Shows actual parameter values and formatting.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/docs/developers/cli/redelegate.md#2025-04-22_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ncasper-client put-deploy \\\n--node-address http://3.143.158.19:7777  \\\n--chain-name integration-test \\\n--secret-key ~/KEYS/integration/Test_secret_key.pem \\\n--payment-amount 2500000000 \\\n--session-hash hash-e22d38bcf3454a93face78a353feaccbf1d637d1ef9ef2e061a655728ff59bbe \\\n--session-entry-point redelegate \\\n--session-arg \"validator:public_key='017fec504c642f2b321b8591f1c3008348c57a81acafceb5a392cf8416a5fb4a3c'\" \\\n--session-arg \"amount:u512='500000000000'\" \\\n--session-arg \"delegator:public_key='01360af61b50cdcb7b92cffe2c99315d413d34ef77fadee0c105cc4f1d4120f986'\" \\\n--session-arg \"new_validator:public_key='019e7b8bdec03ba83be4f5443d9f7f9111c77fec984ce9bb5bb7eb3da1e689c02d'\"\n```\n\n----------------------------------------\n\nTITLE: Setting Block Gas and Size Limits – Casper Network TOML\nDESCRIPTION: This TOML snippet defines the maximum allowable sizes for blocks and the total gas for all transactions within a block in Casper Mainnet. It is to be placed under the [transactions] section in the TOML configuration. Dependencies include the Casper node reading these parameters upon startup, and enforcing these constraints during block proposal and validation. 'max_block_size' (in bytes) controls overall transaction payload, and 'block_gas_limit' (in motes) caps aggregate computation per block. Setting 'max_block_size=0' removes byte-size limitations, but practical deployments should specify limits to prevent resource exhaustion attacks.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/versioned_docs/version-2.0.0/concepts/economics/runtime.md#2025-04-22_snippet_1\n\nLANGUAGE: toml\nCODE:\n```\n[transactions]\n...\n# Maximum block size in bytes including transactions contained by the block.  0 means unlimited.\nmax_block_size = 5_242_880\n# The upper limit of total gas of all transactions in a block.\nblock_gas_limit = 3_300_000_000_000\n```\n\n----------------------------------------\n\nTITLE: Verifying Rust Installation using Rustup (Bash)\nDESCRIPTION: Checks if Rust and its toolchain manager `rustup` are correctly installed and available in the system's PATH. This is a prerequisite for installing other Casper tools.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/docs/resources/quick-start.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nrustup --version\n```\n\n----------------------------------------\n\nTITLE: Adding an Associated Key to a Primary Account using Casper Client\nDESCRIPTION: Command to add an associated key 'user_1' to the primary account using the add_account.wasm contract. The key is specified with its account hash and assigned a weight of 1.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/versioned_docs/version-1.5.X/resources/advanced/multi-sig/multi-sig-workflow.md#2025-04-22_snippet_8\n\nLANGUAGE: bash\nCODE:\n```\ncasper-client put-deploy --node-address https://node.testnet.casper.network \\\n--chain-name \"casper-test\" \\\n--payment-amount 500000000 \\\n--secret-key $PATH/secret_key.pem \\\n--session-path target/wasm32-unknown-unknown/release/add_account.wasm \\\n--session-arg \"new_key:key='account-hash-e2d00525cac31ae2756fb155f289d276c6945b6914923fe275de0cb127bffee7\" \\\n--session-arg \"weight:u8='1'\"\n```\n\n----------------------------------------\n\nTITLE: Importing Required Casper Crates in Rust\nDESCRIPTION: Rust code snippet showing how to import the necessary Casper crates for implementing a CEP-18 fungible token contract.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/versioned_docs/version-1.5.X/resources/tokens/cep18/full-tutorial.md#2025-04-22_snippet_4\n\nLANGUAGE: rust\nCODE:\n```\nuse casper_contract::{contract_api::runtime, unwrap_or_revert::UnwrapOrRevert};\n\nuse casper_types::{CLValue, U256};\n```\n\n----------------------------------------\n\nTITLE: Withdraw Purse Schema Definition in JSON\nDESCRIPTION: Defines the schema for a withdraw purse object including bonding purse references, validator and unbonder public keys, era creation timestamp, and amount fields. All fields are required and no additional properties are allowed. The schema uses references to other component schemas for specific data types.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/condor/jsonrpc-comp/rpc-2.0/schema/WithdrawPurse.json.md#2025-04-22_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"description\": \"A withdraw purse, a legacy structure.\",\n    \"type\": \"object\",\n    \"required\": [\n        \"amount\",\n        \"bonding_purse\",\n        \"era_of_creation\",\n        \"unbonder_public_key\",\n        \"validator_public_key\"\n    ],\n    \"properties\": {\n        \"bonding_purse\": {\n            \"description\": \"Bonding Purse\",\n            \"allOf\": [\n                {\n                    \"$ref\": \"#/components/schemas/URef\"\n                }\n            ]\n        },\n        \"validator_public_key\": {\n            \"description\": \"Validators public key.\",\n            \"allOf\": [\n                {\n                    \"$ref\": \"#/components/schemas/PublicKey\"\n                }\n            ]\n        },\n        \"unbonder_public_key\": {\n            \"description\": \"Unbonders public key.\",\n            \"allOf\": [\n                {\n                    \"$ref\": \"#/components/schemas/PublicKey\"\n                }\n            ]\n        },\n        \"era_of_creation\": {\n            \"description\": \"Era in which this unbonding request was created.\",\n            \"allOf\": [\n                {\n                    \"$ref\": \"#/components/schemas/EraId\"\n                }\n            ]\n        },\n        \"amount\": {\n            \"description\": \"Unbonding Amount.\",\n            \"allOf\": [\n                {\n                    \"$ref\": \"#/components/schemas/U512\"\n                }\n            ]\n        }\n    },\n    \"additionalProperties\": false\n}\n```\n\n----------------------------------------\n\nTITLE: Redelegating Tokens Using Compiled Wasm Contract (Example) via Casper Client - Bash\nDESCRIPTION: This Bash code provides an example of invoking redelegation using a compiled redelegate.wasm on a private Casper network, specifying node address, chain name, secret key path, payment (8 CSPR), path to the wasm, and appropriate session arguments. The snippet demonstrates real parameter values and expects a deploy hash as output for subsequent verification. Dependencies are the casper-client CLI and an already built redelegate.wasm file. Organizational chainspec and payment parameters must match the target Casper network.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/versioned_docs/version-2.0.0/developers/cli/redelegate.md#2025-04-22_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\ncasper-client put-deploy \\\n--node-address http://3.143.158.19:7777  \\\n--chain-name integration-test \\\n--secret-key ~/KEYS/integration/Test_secret_key.pem \\\n--payment-amount 8000000000 \\\n--session-path ~/redelegate.wasm \\\n--session-arg \"validator:public_key='017fec504c642f2b321b8591f1c3008348c57a81acafceb5a392cf8416a5fb4a3c'\" \\\n--session-arg \"amount:u512='500000000000'\" \\\n--session-arg \"delegator:public_key='01360af61b50cdcb7b92cffe2c99315d413d34ef77fadee0c105cc4f1d4120f986'\" \\\n--session-arg \"new_validator:public_key='019e7b8bdec03ba83be4f5443d9f7f9111c77fec984ce9bb5bb7eb3da1e689c02d'\"\n```\n\n----------------------------------------\n\nTITLE: Configuring Minimum Bid Amount in Chainspec - TOML\nDESCRIPTION: This TOML configuration snippet sets the minimum allowed bid amount for validator bonding in the Casper network by specifying minimum_bid_amount in motes. Setting this value in chainspec.toml determines the threshold below which a validator will be considered fully unbonded along with their delegators. Proper configuration ensures only nodes with adequate stake can enter the validator set; this file must be present and correctly set for the network to function as intended.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/docs/operators/becoming-a-validator/bonding.md#2025-04-22_snippet_0\n\nLANGUAGE: toml\nCODE:\n```\n# Minimum bid amount allowed in motes. Withdrawing one's bid to an amount strictly less than\n# the value specified will be treated as a full unbond of a validator and their associated delegators\nminimum_bid_amount = 100_000_000_000_000\n```\n\n----------------------------------------\n\nTITLE: Building Delegation WASM Contract\nDESCRIPTION: Commands to clone the casper-node repository and build the delegation WASM contract from source code. Required for the compiled WASM delegation method.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/versioned_docs/version-1.5.X/developers/cli/delegate.md#2025-04-22_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\ngit clone https://github.com/casper-network/casper-node\ncd casper-node\nmake setup-rs\nmake build-contracts-rs\nls target/wasm32-unknown-unknown/release/delegate.wasm\n```\n\n----------------------------------------\n\nTITLE: Calling Auction Contract by Name\nDESCRIPTION: Example of calling the Auction contract's delegate entry point using its named key reference with validator, amount, and delegator arguments.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/versioned_docs/version-2.0.0/developers/cli/calling-contracts.md#2025-04-22_snippet_12\n\nLANGUAGE: rust\nCODE:\n```\ncasper-client put-deploy \\\n    --node-address http://65.21.235.219:7777 \\\n    --chain-name casper-test \\\n    --secret-key [KEY_PATH]/secret_key.pem \\\n    --payment-amount 2500000000 \\\n    --session-name \"auction\" \\\n    --session-entry-point \"delegate\" \\\n    --session-arg \"validator:public_key='0145fb72c75e1b459839555d70356a5e6172e706efa204d86c86050e2f7878960f'\" \\\n    --session-arg \"amount:u512='500000000000'\" \\\n    --session-arg \"delegator:public_key='0154d828baafa6858b92919c4d78f26747430dcbecb9aa03e8b44077dc6266cabf'\"\n```\n\n----------------------------------------\n\nTITLE: Defining Native Transfer - JSON\nDESCRIPTION: This JSON schema represents a native transfer, which lacks any WASM code reference. It specifies runtime arguments under the 'args' property as a required field.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/condor/jsonrpc-comp/rpc-1.5/schema/components.json.md#2025-04-22_snippet_3\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"description\": \"A native transfer which does not contain or reference a WASM code.\",\n  \"type\": \"object\",\n  \"required\": [\n    \"Transfer\"\n  ],\n  \"properties\": {\n    \"Transfer\": {\n      \"type\": \"object\",\n      \"required\": [\n        \"args\"\n      ],\n      \"properties\": {\n        \"args\": {\n          \"description\": \"Runtime arguments.\",\n          \"allOf\": [\n            {\n              \"$ref\": \"#/components/schemas/RuntimeArgs\"\n            }\n          ]\n        }\n      },\n      \"additionalProperties\": false\n    }\n  },\n  \"additionalProperties\": false\n}\n```\n\n----------------------------------------\n\nTITLE: Query Target Account Balance Template\nDESCRIPTION: Template for querying target account balance using the casper-client.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/versioned_docs/version-1.5.X/developers/cli/transfers/verify-transfer.md#2025-04-22_snippet_9\n\nLANGUAGE: bash\nCODE:\n```\ncasper-client get-balance \\\n--id 7 \\\n--node-address [NODE_SERVER_ADDRESS] \\\n--state-root-hash [STATE_ROOT_HAHS] \\\n--purse-identifier [TARGET_PUBLIC_KEY_HEX] \n```\n\n----------------------------------------\n\nTITLE: Defining JSON Schemas for Casper Network Validator System\nDESCRIPTION: Comprehensive JSON schema definitions for validator weights, bids, and delegator data structures. The schema enforces required fields, defines property types, and references common components like PublicKey and U512 for blockchain-specific data types.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/condor/jsonrpc-comp/rpc-1.5/schema/components.json.md#2025-04-22_snippet_58\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"JsonValidatorWeights\": {\n        \"description\": \"A validator's weight.\",\n        \"type\": \"object\",\n        \"required\": [\n            \"public_key\",\n            \"weight\"\n        ],\n        \"properties\": {\n            \"public_key\": {\n                \"$ref\": \"#/components/schemas/PublicKey\"\n            },\n            \"weight\": {\n                \"$ref\": \"#/components/schemas/U512\"\n            }\n        },\n        \"additionalProperties\": false\n    },\n    \"JsonBids\": {\n        \"description\": \"A Json representation of a single bid.\",\n        \"type\": \"object\",\n        \"required\": [\n            \"bid\",\n            \"public_key\"\n        ],\n        \"properties\": {\n            \"public_key\": {\n                \"$ref\": \"#/components/schemas/PublicKey\"\n            },\n            \"bid\": {\n                \"$ref\": \"#/components/schemas/JsonBid\"\n            }\n        },\n        \"additionalProperties\": false\n    },\n    \"JsonBid\": {\n        \"description\": \"An entry in a founding validator map representing a bid.\",\n        \"type\": \"object\",\n        \"required\": [\n            \"bonding_purse\",\n            \"delegation_rate\",\n            \"delegators\",\n            \"inactive\",\n            \"staked_amount\"\n        ],\n        \"properties\": {\n            \"bonding_purse\": {\n                \"description\": \"The purse that was used for bonding.\",\n                \"allOf\": [\n                    {\n                        \"$ref\": \"#/components/schemas/URef\"\n                    }\n                ]\n            },\n            \"staked_amount\": {\n                \"description\": \"The amount of tokens staked by a validator (not including delegators).\",\n                \"allOf\": [\n                    {\n                        \"$ref\": \"#/components/schemas/U512\"\n                    }\n                ]\n            },\n            \"delegation_rate\": {\n                \"description\": \"The delegation rate.\",\n                \"type\": \"integer\",\n                \"format\": \"uint8\",\n                \"minimum\": 0.0\n            },\n            \"delegators\": {\n                \"description\": \"The delegators.\",\n                \"type\": \"array\",\n                \"items\": {\n                    \"$ref\": \"#/components/schemas/JsonDelegator\"\n                }\n            },\n            \"inactive\": {\n                \"description\": \"Is this an inactive validator.\",\n                \"type\": \"boolean\"\n            }\n        },\n        \"additionalProperties\": false\n    },\n    \"JsonDelegator\": {\n        \"description\": \"A delegator associated with the given validator.\",\n        \"type\": \"object\",\n        \"required\": [\n            \"bonding_purse\",\n            \"delegatee\",\n            \"public_key\",\n            \"staked_amount\"\n        ],\n        \"properties\": {\n            \"public_key\": {\n                \"$ref\": \"#/components/schemas/PublicKey\"\n            },\n            \"staked_amount\": {\n                \"$ref\": \"#/components/schemas/U512\"\n            },\n            \"bonding_purse\": {\n                \"$ref\": \"#/components/schemas/URef\"\n            },\n            \"delegatee\": {\n                \"$ref\": \"#/components/schemas/PublicKey\"\n            }\n        },\n        \"additionalProperties\": false\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining JSON Schema for 256-bit Integer as Decimal String\nDESCRIPTION: A JSON schema fragment defining a string type property that represents a 256-bit integer in decimal format. This schema can be used for validation in API specifications or data models.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/condor/jsonrpc-comp/rpc-2.0/schema/U256.json.md#2025-04-22_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"description\": \"Decimal representation of a 256-bit integer.\",\n    \"type\": \"string\"\n}\n```\n\n----------------------------------------\n\nTITLE: Declaring Casper Smart Contract Entry Points - JSON\nDESCRIPTION: Lists and describes the set of public entry points (functions) available in a Casper smart contract using a structured JSON format. Each entry defines the function name, argument names and types (e.g., String, Key, U8), return type, access level, and whether the function is addressable. This snippet serves as a reference for developers and integration tools to interact with the contract programmatically, ensuring compatibility with the deployed interface. No code execution is possible as this is a declarative interface specification.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/versioned_docs/version-2.0.0/developers/writing-onchain-code/emitting-contract-events.md#2025-04-22_snippet_5\n\nLANGUAGE: JSON\nCODE:\n```\n{\n  \"name\": \"init\",\n  \"entry_point\": {\n    \"name\": \"init\",\n    \"args\": [\n      { \"name\": \"collection_name\", \"cl_type\": \"String\" },\n      { \"name\": \"collection_symbol\", \"cl_type\": \"String\" },\n      { \"name\": \"total_token_supply\", \"cl_type\": \"U64\" },\n      { \"name\": \"allow_minting\", \"cl_type\": \"Bool\" },\n      { \"name\": \"minting_mode\", \"cl_type\": \"U8\" },\n      { \"name\": \"ownership_mode\", \"cl_type\": \"U8\" },\n      { \"name\": \"nft_kind\", \"cl_type\": \"U8\" },\n      { \"name\": \"holder_mode\", \"cl_type\": \"U8\" },\n      { \"name\": \"whitelist_mode\", \"cl_type\": \"U8\" },\n      { \"name\": \"acl_whitelist\", \"cl_type\": { \"List\": \"Key\" } },\n      { \"name\": \"acl_package_mode\", \"cl_type\": \"Bool\" },\n      { \"name\": \"package_operator_mode\", \"cl_type\": \"Bool\" },\n      { \"name\": \"json_schema\", \"cl_type\": \"String\" },\n      { \"name\": \"receipt_name\", \"cl_type\": \"String\" },\n      { \"name\": \"identifier_mode\", \"cl_type\": \"U8\" },\n      { \"name\": \"burn_mode\", \"cl_type\": \"U8\" },\n      { \"name\": \"operator_burn_mode\", \"cl_type\": \"Bool\" },\n      { \"name\": \"nft_metadata_kind\", \"cl_type\": \"U8\" },\n      { \"name\": \"metadata_mutability\", \"cl_type\": \"U8\" },\n      { \"name\": \"owner_reverse_lookup_mode\", \"cl_type\": \"U8\" },\n      { \"name\": \"events_mode\", \"cl_type\": \"U8\" },\n      { \"name\": \"transfer_filter_contract\", \"cl_type\": { \"Option\": \"Key\" } }\n    ],\n    \"ret\": \"Unit\",\n    \"access\": \"Public\",\n    \"entry_point_type\": \"AddressableEntity\"\n  }\n}\n```\n\nLANGUAGE: JSON\nCODE:\n```\n{\n  \"name\": \"mint\",\n  \"entry_point\": {\n    \"name\": \"mint\",\n    \"args\": [\n      { \"name\": \"token_owner\", \"cl_type\": \"Key\" },\n      { \"name\": \"token_meta_data\", \"cl_type\": \"String\" }\n    ],\n    \"ret\": { \"Tuple3\": [\"String\", \"Key\", \"String\"] },\n    \"access\": \"Public\",\n    \"entry_point_type\": \"AddressableEntity\"\n  }\n}\n```\n\nLANGUAGE: JSON\nCODE:\n```\n{\n  \"name\": \"set_variables\",\n  \"entry_point\": {\n    \"name\": \"set_variables\",\n    \"args\": [\n      { \"name\": \"allow_minting\", \"cl_type\": \"Bool\" },\n      { \"name\": \"contract_whitelist\", \"cl_type\": { \"List\": { \"ByteArray\": 32 } } },\n      { \"name\": \"acl_whitelist\", \"cl_type\": { \"List\": \"Key\" } },\n      { \"name\": \"acl_package_mode\", \"cl_type\": \"Bool\" },\n      { \"name\": \"package_operator_mode\", \"cl_type\": \"Bool\" },\n      { \"name\": \"operator_burn_mode\", \"cl_type\": \"Bool\" }\n    ],\n    \"ret\": \"Unit\",\n    \"access\": \"Public\",\n    \"entry_point_type\": \"AddressableEntity\"\n  }\n}\n```\n\nLANGUAGE: JSON\nCODE:\n```\n{\n  \"name\": \"transfer\",\n  \"entry_point\": {\n    \"name\": \"transfer\",\n    \"args\": [\n      { \"name\": \"source_key\", \"cl_type\": \"Key\" },\n      { \"name\": \"target_key\", \"cl_type\": \"Key\" }\n    ],\n    \"ret\": { \"Tuple2\": [\"String\", \"Key\"] },\n    \"access\": \"Public\",\n    \"entry_point_type\": \"AddressableEntity\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining UnbondingPurse Schema in JSON\nDESCRIPTION: Schema definition for an UnbondingPurse object that represents an unbonding request in the Casper Network. It includes details about the bonding purse, validators, unbonders, and creation era with optional redelegation information.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/condor/jsonrpc-comp/rpc-2.0/schema.json.md#2025-04-22_snippet_60\n\nLANGUAGE: json\nCODE:\n```\n\"UnbondingPurse\": {\n  \"description\": \"Unbonding purse.\",\n  \"type\": \"object\",\n  \"required\": [\n    \"amount\",\n    \"bonding_purse\",\n    \"era_of_creation\",\n    \"unbonder_public_key\",\n    \"validator_public_key\"\n  ],\n  \"properties\": {\n    \"bonding_purse\": {\n      \"description\": \"Bonding Purse\",\n      \"allOf\": [\n        {\n          \"$ref\": \"#/components/schemas/URef\"\n        }\n      ]\n    },\n    \"validator_public_key\": {\n      \"description\": \"Validators public key.\",\n      \"allOf\": [\n        {\n          \"$ref\": \"#/components/schemas/PublicKey\"\n        }\n      ]\n    },\n    \"unbonder_public_key\": {\n      \"description\": \"Unbonders public key.\",\n      \"allOf\": [\n        {\n          \"$ref\": \"#/components/schemas/PublicKey\"\n        }\n      ]\n    },\n    \"era_of_creation\": {\n      \"description\": \"Era in which this unbonding request was created.\",\n      \"allOf\": [\n        {\n          \"$ref\": \"#/components/schemas/EraId\"\n        }\n      ]\n    },\n    \"amount\": {\n      \"description\": \"Unbonding Amount.\",\n      \"allOf\": [\n        {\n          \"$ref\": \"#/components/schemas/U512\"\n        }\n      ]\n    },\n    \"new_validator\": {\n      \"description\": \"The validator public key to re-delegate to.\",\n      \"anyOf\": [\n        {\n          \"$ref\": \"#/components/schemas/PublicKey\"\n        },\n        {\n          \"type\": \"null\"\n        }\n      ]\n    }\n  },\n  \"additionalProperties\": false\n}\n```\n\n----------------------------------------\n\nTITLE: Viewing Casper Rust Client Key Generation Options (Bash)\nDESCRIPTION: This Bash command displays the help and usage options for the keygen command in the casper-client utility. It provides information on parameters, flags, and usage for key generation. Requires the casper-client binary installed on the system and outputs help content directly to the terminal.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/docs/operators/setup/basic-node-configuration.md#2025-04-22_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\nsudo -u casper casper-client keygen --help\n```\n\n----------------------------------------\n\nTITLE: Finality Signature Protocol Documentation\nDESCRIPTION: Defines the broadcasting mechanism for finality signatures in the Casper network. Active validator nodes must generate and broadcast finality signatures for every valid block they receive or create using the Payload::FinalitySignature variant.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/versioned_docs/version-2.0.0/concepts/design/networking-protocol.md#2025-04-22_snippet_9\n\n\n\n----------------------------------------\n\nTITLE: Querying Updated Casper Counter Contract State\nDESCRIPTION: Command to query the updated state of the counter contract after incrementing the value.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/versioned_docs/version-2.0.0/resources/quick-start.md#2025-04-22_snippet_9\n\nLANGUAGE: bash\nCODE:\n```\ncasper-client query-state \\\n--node-address [NODE_ADDRESS] \\\n--state-root-hash [STATE_ROOT_HASH] \\\n--key [ACCOUNT_HASH] \\\n-q \"counter/count\"\n```\n\n----------------------------------------\n\nTITLE: Creating a Network Configuration File (Bash/Config)\nDESCRIPTION: Shows the content of a basic network configuration file (e.g., `our-network.conf`). This file defines the `SOURCE_URL` (the HTTP(S) server hosting protocol files) and the `NETWORK_NAME` used by `node_util.py` and other Casper tools to identify the target network.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/docs/operators/setup-network/staging-files-for-new-network.md#2025-04-22_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nSOURCE_URL=casper.mydomain.com\nNETWORK_NAME=our-network\n```\n\n----------------------------------------\n\nTITLE: Redelegating Tokens Using Compiled Wasm\nDESCRIPTION: Command to redelegate tokens using compiled redelegate.wasm file. More expensive than using the system auction contract but provides an alternative method.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/docs/developers/cli/redelegate.md#2025-04-22_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\ncasper-client put-deploy \\\n--node-address <HOST:PORT> \\\n--secret-key <PATH_TO_DELEGATOR_SECRET_KEY> \\\n--chain-name <CHAIN_NAME> \\\n--payment-amount <PAYMENT_AMOUNT> \\\n--session-path <PATH_TO_WASM>/redelegate.wasm \\\n--session-arg \"delegator:public_key='<DELEGATOR_PUBLIC_KEY_HEX>'\" \\\n--session-arg \"validator:public_key='<CURRENT_VALIDATOR_PUBLIC_KEY_HEX>'\" \\\n--session-arg \"amount:u512='<DELEGATION_AMOUNT>'\" \\\n--session-arg \"new_validator:public_key='<NEW_VALIDATOR_PUBLIC_KEY_HEX>'\"\n```\n\n----------------------------------------\n\nTITLE: Verifying Delegate Wasm Build Output - Bash\nDESCRIPTION: This snippet lists the built `delegate.wasm` contract in its output directory, enabling verification that the compilation succeeded. It requires the previous build steps to complete successfully and assumes the current working directory is the repository root. The expected output is the file path to the `delegate.wasm` binary.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/versioned_docs/version-2.0.0/developers/cli/delegate.md#2025-04-22_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\nls target/wasm32-unknown-unknown/release/delegate.wasm\n```\n\n----------------------------------------\n\nTITLE: Example JSON Response Value for info_get_status RPC\nDESCRIPTION: This JSON object illustrates the structure of the 'value' field within an example response for the 'info_get_status' RPC method on a Casper node. It provides comprehensive status information, including API/protocol versions, peer list, build version, chainspec, block details, node state, block synchronization status, and uptime.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/condor/jsonrpc-comp/rpc-2.0/schema.json.md#2025-04-22_snippet_15\n\nLANGUAGE: json\nCODE:\n```\n            \"value\": {\n              \"api_version\": \"2.0.0\",\n              \"protocol_version\": \"2.0.0\",\n              \"peers\": [\n                {\n                  \"node_id\": \"tls:0101..0101\",\n                  \"address\": \"127.0.0.1:54321\"\n                }\n              ],\n              \"build_version\": \"1.0.0\",\n              \"chainspec_name\": \"casper-example\",\n              \"starting_state_root_hash\": \"0000000000000000000000000000000000000000000000000000000000000000\",\n              \"last_added_block_info\": {\n                \"hash\": \"0744fcb72af43c5cc372039bc5a8bfee48808a9ce414acc0d6338a628c20eb42\",\n                \"timestamp\": \"2020-11-17T00:39:24.072Z\",\n                \"era_id\": 1,\n                \"height\": 10,\n                \"state_root_hash\": \"0808080808080808080808080808080808080808080808080808080808080808\",\n                \"creator\": \"01d9bf2148748a85c89da5aad8ee0b0fc2d105fd39d41a4c796536354f0ae2900c\"\n              },\n              \"our_public_signing_key\": \"01d9bf2148748a85c89da5aad8ee0b0fc2d105fd39d41a4c796536354f0ae2900c\",\n              \"round_length\": \"1m 5s 536ms\",\n              \"next_upgrade\": {\n                \"activation_point\": 42,\n                \"protocol_version\": \"2.0.1\"\n              },\n              \"uptime\": \"13s\",\n              \"reactor_state\": \"Initialize\",\n              \"last_progress\": \"1970-01-01T00:00:00.000Z\",\n              \"available_block_range\": {\n                \"low\": 0,\n                \"high\": 0\n              },\n              \"block_sync\": {\n                \"historical\": {\n                  \"block_hash\": \"16ddf28e2b3d2e17f4cef36f8b58827eca917af225d139b0c77df3b4a67dc55e\",\n                  \"block_height\": 40,\n                  \"acquisition_state\": \"have strict finality(40) for: block hash 16dd..c55e\"\n                },\n                \"forward\": {\n                  \"block_hash\": \"59907b1e32a9158169c4d89d9ce5ac9164fc31240bfcfb0969227ece06d74983\",\n                  \"block_height\": 6701,\n                  \"acquisition_state\": \"have block body(6701) for: block hash 5990..4983\"\n                }\n              },\n              \"latest_switch_block_hash\": \"0000000000000000000000000000000000000000000000000000000000000000\"\n            }\n```\n\n----------------------------------------\n\nTITLE: Cargo.toml Dependencies for Casper Smart Contract\nDESCRIPTION: The required dependencies to be added to the Cargo.toml file for developing a Casper smart contract, including casper-contract and casper-types crates.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/versioned_docs/version-2.0.0/developers/writing-onchain-code/simple-contract.md#2025-04-22_snippet_5\n\nLANGUAGE: toml\nCODE:\n```\n[dependencies]\n# A library for developing Casper network smart contracts.\ncasper-contract = \"1.4.4\"\n# Types shared by many Casper crates for use on a Casper network.\ncasper-types = \"1.5.0\"\n```\n\n----------------------------------------\n\nTITLE: Installing the CEP-18 Test Helper Contract on Casper Network\nDESCRIPTION: This command deploys a helper contract that allows users to check balances and access approval features for the CEP-18 token. The helper contract facilitates interactions with the main CEP-18 token contract.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/versioned_docs/version-1.5.X/resources/tokens/cep18/quickstart-guide.md#2025-04-22_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ncasper-client put-deploy -n http://<NODE IP>:<PORT> \\\n--chain-name <CHAIN NAME> \\\n--secret-key ~/casper/demo/user_a/secret_key.pem \\\n--session-path ~/casper/demo/cep18_test_contract.wasm \\\n--payment-amount 50000000000\n```\n\n----------------------------------------\n\nTITLE: Rendering UpdateMessage and Query Components in App\nDESCRIPTION: This code renders 'UpdateMessage' and 'Query' components within the main 'App' component, passing the 'publicKey' as a prop. It checks if the wallet is connected before rendering the components to the interface.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/versioned_docs/version-1.5.X/developers/dapps/template-frontend.md#2025-04-22_snippet_11\n\nLANGUAGE: jsx\nCODE:\n```\nimport React from \"react\";\nimport Connect from \"./Connect\";\nimport UpdateMessage from \"./UpdateMessage\";\n// highlight-next-line-green\nimport Query from \"./Query\";\nimport './App.css'\n\nfunction App() {\n    const [publicKey, setPublicKey] = React.useState(null);\n    return (\n        <>\n            <Connect setPublicKey={ setPublicKey } />\n            <div>\n                {publicKey !== null && (<>\n                    Wallet connected: {publicKey}<br/>\n                    <UpdateMessage publicKey={ publicKey } />\n                    // highlight-next-line-green\n                    <Query publicKey={ publicKey } />\n                </>)}\n            </div>\n        </>\n    );\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Stored Versioned Contract by Hash - JSON Schema - JSON\nDESCRIPTION: Specifies the format for referencing a stored versioned contract on Casper by its package hash. Required fields include a hexadecimal hash, entry point, runtime arguments, and an optional version. This schema ensures only valid structured objects are allowed and enforces required contract invocation fields. Dependencies are references to 'PackageHash' and 'RuntimeArgs' schemas.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/condor/jsonrpc-comp/rpc-2.0/schema/components.json.md#2025-04-22_snippet_2\n\nLANGUAGE: JSON\nCODE:\n```\n{\n    \"StoredVersionedContractByHash\": {\n        \"type\": \"object\",\n        \"required\": [\n            \"args\",\n            \"entry_point\",\n            \"hash\"\n        ],\n        \"properties\": {\n            \"hash\": {\n                \"description\": \"Hex-encoded contract package hash.\",\n                \"allOf\": [\n                    {\n                        \"$ref\": \"#/components/schemas/PackageHash\"\n                    }\n                ]\n            },\n            \"version\": {\n                \"description\": \"An optional version of the contract to call. It will default to the highest enabled version if no value is specified.\",\n                \"type\": [\n                    \"integer\",\n                    \"null\"\n                ],\n                \"format\": \"uint32\",\n                \"minimum\": 0.0\n            },\n            \"entry_point\": {\n                \"description\": \"Entry point name.\",\n                \"type\": \"string\"\n            },\n            \"args\": {\n                \"description\": \"Runtime arguments.\",\n                \"allOf\": [\n                    {\n                        \"$ref\": \"#/components/schemas/RuntimeArgs\"\n                    }\n                ]\n            }\n        },\n        \"additionalProperties\": false\n    }\n}\n\n```\n\n----------------------------------------\n\nTITLE: Calling Contract Entry Points with Python SDK\nDESCRIPTION: Shows how to call an entry point on an existing smart contract using the Python SDK. This code creates a deploy that calls the 'update_msg' entry point on a contract identified by its hash, with a string argument and standard payment.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/versioned_docs/version-1.5.X/developers/dapps/sdk/client-library-usage.md#2025-04-22_snippet_24\n\nLANGUAGE: python\nCODE:\n```\nimport pycspr\nclient = NodeClient(NodeConnection(host = \"NODE_ADDRESS\", port_rpc = 7777))\ndeployParams = pycspr.create_deploy_parameters(\n    account = keypair,\n    chain_name = \"casper-test\"\n)\npayment = pycspr.create_standard_payment(10_000_000_000)\nsession = pycspr.types.StoredContractByHash(\n    entry_point = \"update_msg\",\n    hash = bytes.fromhex(\"a3cac24aec9de1bbdb87083587b14d8aeffba5dfed27686512b7bb5dee60445d\"),\n    args = {\n        \"message\": pycspr.types.CL_String(\"Hello world!\"),\n    }\n)\ndeploy = pycspr.create_deploy(deployParams, payment, session)\ndeploy.approve(keypair)\nclient.send_deploy(deploy)\nprint(deploy.hash.hex())\n```\n\n----------------------------------------\n\nTITLE: Querying Global State after Contract Installation\nDESCRIPTION: This command queries the global state again using the newly obtained state root hash and the account hash. After successful contract deployment, this query should show the named keys (like 'counter') associated with the contract under the account's context.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/docs/resources/beginner/counter-testnet/walkthrough.md#2025-04-22_snippet_8\n\nLANGUAGE: bash\nCODE:\n```\ncasper-client query-global-state \\\n    --node-address http://[NODE_IP]:7777 \\\n    --state-root-hash [STATE_ROOT_HASH] \\\n    --key [ACCOUNT_HASH]\n```\n\n----------------------------------------\n\nTITLE: Defining JSON Schema for Validator Data Structure\nDESCRIPTION: This JSON schema snippet defines the structure for representing validators within a specific era in the Casper Network. The schema requires two main properties: 'era_id', referring to the specific era, and 'validator_weights', an array containing 'JsonValidatorWeights' objects. It restricts additional properties to maintain data consistency.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/condor/jsonrpc-comp/rpc-2.0/schema/JsonEraValidators.json.md#2025-04-22_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"description\": \"The validators for the given era.\",\n    \"type\": \"object\",\n    \"required\": [\n        \"era_id\",\n        \"validator_weights\"\n    ],\n    \"properties\": {\n        \"era_id\": {\n            \"$ref\": \"#/components/schemas/EraId\"\n        },\n        \"validator_weights\": {\n            \"type\": \"array\",\n            \"items\": {\n                \"$ref\": \"#/components/schemas/JsonValidatorWeights\"\n            }\n        }\n    },\n    \"additionalProperties\": false\n}\n```\n\n----------------------------------------\n\nTITLE: Sample Output of make-transfer Command - JSON\nDESCRIPTION: Demonstrates the JSON output of a `make-transfer` command. Contains deploy hash, header information including account, timestamp, TTL, gas price, and session transfer details such as amount, target, and ID. Useful for understanding the output structure of a Casper transfer deploy.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/versioned_docs/version-2.0.0/developers/cli/transfers/multisig-deploy-transfer.md#2025-04-22_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"hash\": \"88c49fa9108485397a330f294914a6c2d614c581fbe0a31de1a954baad6d709b\",\n  \"header\": {\n    \"account\": \"01360af61b50cdcb7b92cffe2c99315d413d34ef77fadee0c105cc4f1d4120f986\",\n    \"timestamp\": \"2023-10-12T19:14:22.080Z\",\n    \"ttl\": \"30m\",\n    \"gas_price\": 1,\n    \"body_hash\": \"1bb7436d4703816b5cbeef245dd83c0520f1c7173cdf609c664a29487cc5de1c\",\n    \"dependencies\": [],\n    \"chain_name\": \"casper-test\"\n  },\n  \"payment\": {\n    \"ModuleBytes\": {\n      \"module_bytes\": \"\",\n      \"args\": [\n        [\n          \"amount\",\n          {\n            \"cl_type\": \"U512\",\n            \"bytes\": \"0400e1f505\",\n            \"parsed\": \"100000000\"\n          }\n        ]\n      ]\n    }\n  },\n  \"session\": {\n    \"Transfer\": {\n      \"args\": [\n        [\n          \"amount\",\n          {\n            \"cl_type\": \"U512\",\n            \"bytes\": \"0400f90295\",\n            \"parsed\": \"2500000000\"\n          }\n        ],\n        [\n          \"target\",\n          {\n            \"cl_type\": \"PublicKey\",\n            \"bytes\": \"0154d828baafa6858b92919c4d78f26747430dcbecb9aa03e8b44077dc6266cabf\",\n            \"parsed\": \"0154d828baafa6858b92919c4d78f26747430dcbecb9aa03e8b44077dc6266cabf\"\n          }\n        ],\n        [\n          \"id\",\n          {\n            \"cl_type\": {\n              \"Option\": \"U64\"\n            },\n            \"bytes\": \"010100000000000000\",\n            \"parsed\": 1\n          }\n        ]\n      ]\n    }\n  },\n  \"approvals\": [\n    {\n      \"signer\": \"01360af61b50cdcb7b92cffe2c99315d413d34ef77fadee0c105cc4f1d4120f986\",\n      \"signature\": \"015e0db50b174f3627e0e27cb503f0836b30bd0e0f2c4b989366b0df57500a1cb2b0945408c938bc3c33c40dab59a9c6af6f4e01e474330cd27262bfc87680030e\"\n    }\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Example Redelegation Using Compiled Wasm\nDESCRIPTION: Practical example of redelegating tokens using compiled Wasm on a private Casper network with a payment of 8 CSPR. Shows actual parameter values and formatting.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/docs/developers/cli/redelegate.md#2025-04-22_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\ncasper-client put-deploy \\\n--node-address http://3.143.158.19:7777  \\\n--chain-name integration-test \\\n--secret-key ~/KEYS/integration/Test_secret_key.pem \\\n--payment-amount 8000000000 \\\n--session-path ~/redelegate.wasm \\\n--session-arg \"validator:public_key='017fec504c642f2b321b8591f1c3008348c57a81acafceb5a392cf8416a5fb4a3c'\" \\\n--session-arg \"amount:u512='500000000000'\" \\\n--session-arg \"delegator:public_key='01360af61b50cdcb7b92cffe2c99315d413d34ef77fadee0c105cc4f1d4120f986'\" \\\n--session-arg \"new_validator:public_key='019e7b8bdec03ba83be4f5443d9f7f9111c77fec984ce9bb5bb7eb3da1e689c02d'\"\n```\n\n----------------------------------------\n\nTITLE: Retrieving State Root Hash from Casper Network\nDESCRIPTION: Gets the current state root hash, which is an identifier of the current network state (similar to a Git commit ID). This hash serves as a snapshot of the blockchain state at a moment in time and is required for querying the network state.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/versioned_docs/version-2.0.0/resources/beginner/counter/commands.md#2025-04-22_snippet_1\n\nLANGUAGE: rust\nCODE:\n```\ncasper-client get-state-root-hash --node-address [NODE_SERVER_ADDRESS]\n```\n\n----------------------------------------\n\nTITLE: Calling Auction Contract's 'delegate' Entry Point with Arguments (Example)\nDESCRIPTION: Demonstrates a specific example of calling the 'delegate' entry point of the system Auction contract on Testnet, passing necessary arguments using `--session-arg`. It shows how to provide the `validator` (PublicKey), `amount` (U512), and `delegator` (PublicKey) arguments with their respective types and values to execute the delegation.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/versioned_docs/version-2.0.0/developers/cli/calling-contracts.md#2025-04-22_snippet_4\n\nLANGUAGE: shell\nCODE:\n```\ncasper-client put-deploy \\\n    --node-address http://65.21.235.219:7777 \\\n    --chain-name casper-test \\\n    --secret-key [KEY_PATH]/secret_key.pem \\\n    --payment-amount 2500000000 \\\n    --session-hash hash-93d923e336b20a4c4ca14d592b60e5bd3fe330775618290104f9beb326db7ae2 \\\n    --session-entry-point \"delegate\" \\\n    --session-arg \"validator:public_key='0145fb72c75e1b459839555d70356a5e6172e706efa204d86c86050e2f7878960f'\" \\\n    --session-arg \"amount:u512='500000000000'\" \\\n    --session-arg \"delegator:public_key='0154d828baafa6858b92919c4d78f26747430dcbecb9aa03e8b44077dc6266cabf'\"\n```\n\n----------------------------------------\n\nTITLE: Deploy Serialization in Casper SDK\nDESCRIPTION: JavaScript code snippets demonstrating how to serialize and deserialize deploys to and from JSON format\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/versioned_docs/version-1.5.X/developers/dapps/sdk/script-sdk.md#2025-04-22_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nconst jsonFromDeploy = DeployUtil.deployToJson(signedDeploy);\n```\n\nLANGUAGE: javascript\nCODE:\n```\nconst deployFromJson = DeployUtil.deployFromJson(jsonFromDeploy);\n```\n\n----------------------------------------\n\nTITLE: Defining JSON Schema for Casper Network Data Types\nDESCRIPTION: Comprehensive JSON Schema definitions specifying the structure and validation rules for Casper Network data types including validator changes, blocks, proofs, era summaries, and auction states. The schema includes detailed property definitions with types, requirements, and descriptions.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/condor/jsonrpc-comp/rpc-1.5/schema.json.md#2025-04-22_snippet_62\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"JsonValidatorChanges\": {\n    \"description\": \"The changes in a validator's status.\",\n    \"type\": \"object\",\n    \"required\": [\n      \"public_key\",\n      \"status_changes\"\n    ],\n    \"properties\": {\n      \"public_key\": {\n        \"description\": \"The public key of the validator.\",\n        \"allOf\": [\n          {\n            \"$ref\": \"#/components/schemas/PublicKey\"\n          }\n        ]\n      },\n      \"status_changes\": {\n        \"description\": \"The set of changes to the validator's status.\",\n        \"type\": \"array\",\n        \"items\": {\n          \"$ref\": \"#/components/schemas/JsonValidatorStatusChange\"\n        }\n      }\n    },\n    \"additionalProperties\": false\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Executing Genesis Process in Casper Tests (Rust)\nDESCRIPTION: Shows how to run the genesis process using the `InMemoryWasmTestBuilder` instance. This step initializes the simulated blockchain state using default genesis parameters (`DEFAULT_RUN_GENESIS_REQUEST`) and commits the changes.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/versioned_docs/version-1.5.X/developers/writing-onchain-code/testing-session-code.md#2025-04-22_snippet_7\n\nLANGUAGE: rust\nCODE:\n```\n    builder.run_genesis(&*DEFAULT_RUN_GENESIS_REQUEST).commit();\n```\n\n----------------------------------------\n\nTITLE: Example: Replaying Casper Node Event Stream using cURL (Bash)\nDESCRIPTION: Provides a concrete example of the `curl` command used to replay events from event ID `29267508` onwards, connecting to a specific node at IP `65.21.235.219` on the default event stream port `9999`. This illustrates the practical usage of the replay functionality.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/docs/operators/setup/node-events.md#2025-04-22_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\ncurl -sN http://65.21.235.219:9999/events?start_from=29267508\n```\n\n----------------------------------------\n\nTITLE: Querying Era Summary with chain_get_era_summary in JSON-RPC\nDESCRIPTION: This snippet demonstrates how to use the chain_get_era_summary method to retrieve the era summary at a given block on the Casper network. It shows the request format with an optional block identifier parameter.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/versioned_docs/version-2.0.0/developers/json-rpc/json-rpc-informational.md#2025-04-22_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"id\": 1,\n  \"jsonrpc\":\"2.0\",\n  \"method\":\"chain_get_era_summary\",\n  \"params\": [\n    {\n      \"name\": \"block_identifier\",\n      \"value\": {\n        \"Hash\": \"0744fcb72af43c5cc372039bc5a8bfee48808a9ce414acc0d6338a628c20eb42\"\n      }\n    }\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Installing CEP-78 JavaScript Client with npm\nDESCRIPTION: Command to install the casper-cep78-js-client package using npm. This client provides functionality for interacting with CEP-78 Enhanced NFT contracts on the Casper Network.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/versioned_docs/version-2.0.0/resources/tokens/cep78/js-tutorial.md#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nnpm install casper-cep78-js-client\n```\n\n----------------------------------------\n\nTITLE: Building Casper Validator Contracts using Make and Rust\nDESCRIPTION: These commands navigate into the cloned `casper-node` directory, set up the Rust environment using `make setup-rs`, and then build the client-side smart contracts required for validator operations (like bonding and withdrawing bids) using `make build-client-contracts`. Prerequisites include Rust, CMake, pkg-config, openssl, and libssl-dev.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/docs/operators/setup/joining.md#2025-04-22_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ncd casper-node\nmake setup-rs\nmake build-client-contracts\n```\n\n----------------------------------------\n\nTITLE: Activating Bid on Casper Testnet using Compiled Wasm in Bash\nDESCRIPTION: This command demonstrates how to activate a bid on the Casper Testnet using a compiled Wasm file, with specific values for the Testnet.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/versioned_docs/version-2.0.0/operators/becoming-a-validator/recovering.md#2025-04-22_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\nsudo -u casper casper-client put-deploy \\\n--node-address https://node.mainnet.casper.network  \\\n--secret-key /etc/casper/validator_keys/secret_key.pem \\\n--chain-name casper-test \\\n--payment-amount 5000000000 \\\n--session-path \"$HOME/casper-node/target/wasm32-unknown-unknown/release/activate_bid.wasm\" \\\n--session-arg \"validator:public_key='$(cat /etc/casper/validator_keys/public_key_hex)'\"\n```\n\n----------------------------------------\n\nTITLE: Querying Contract Variable Using Account Hash in Casper Network\nDESCRIPTION: This command shows how to query a contract variable using the account hash under which the contract was installed and the variable's named key path.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/versioned_docs/version-1.5.X/developers/cli/querying-global-state.md#2025-04-22_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\ncasper-client query-global-state \\\n  --node-address http://localhost:11101 \\\n  --state-root-hash fa968344a2000282686303f1664c474465f9a028f32ec4f51791d9fa64c0bcd7 \\\n  --key account-hash-1d17e3fdad268f866a73558d1ae45e1eea3924c247871cb63f67ebf1a116e66d \\\n  -q \"counter/count\"\n```\n\n----------------------------------------\n\nTITLE: Undelegating via System Auction Contract - Casper Client - Bash\nDESCRIPTION: This Bash snippet illustrates how to send an undelegation request using the casper-client tool by calling the undelegate entry point on the system auction contract. Dependencies include the casper-client CLI, a valid node address, secret key, and correct session hash for your network. Parameters specify network connection, key, session details, and required public keys. The command outputs a deploy hash, which can be used to track the operation. Replace all placeholders (in angle brackets) with actual network and account values. No contract compilation is required with this method.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/versioned_docs/version-2.0.0/developers/cli/undelegate.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ncasper-client put-deploy \\\n--node-address <HOST:PORT> \\\n--secret-key <PATH> \\\n--chain-name <CHAIN_NAME> \\\n--payment-amount <PAYMENT_AMOUNT_IN_MOTES> \\\n--session-hash <SESSION_HASH> \\\n--session-entry-point undelegate \\\n--session-arg \"validator:public_key='<HEX_ENCODED_VALIDATOR_PULIC_KEY>'\" \\\n--session-arg \"amount:u512='<AMOUNT_TO_UNDELEGATE>'\" \\\n--session-arg \"delegator:public_key='<HEX_ENCODED_DELEGATOR_PULIC_KEY>'\"\n```\n\n----------------------------------------\n\nTITLE: Querying Deploy Status with Casper Client - Bash\nDESCRIPTION: This snippet demonstrates the use of the casper-client command-line tool to query the status of a specific deploy by its hash from a Casper node. The user must replace [DEPLOY_HASH] with their actual deploy hash value. Ensure that casper-client is installed and accessible in the system PATH, and that the node address is reachable. The command returns JSON-formatted deploy information, facilitating deployment verification.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/versioned_docs/version-1.5.X/resources/tokens/cep78/using-casper-client/full-installation-tutorial.md#2025-04-22_snippet_9\n\nLANGUAGE: bash\nCODE:\n```\ncasper-client get-deploy --node-address http://localhost:11101/rpc/ [DEPLOY_HASH]\n```\n\n----------------------------------------\n\nTITLE: Minting Additional CEP-18 Tokens using Casper Client - Bash (No Comments)\nDESCRIPTION: This command will mint new CEP-18 tokens directly to a recipient account, specifying contract package, minter's secret key, amount, and chain details. It is only functional if the contract allows minting. The concise, comment-free version suits automated or production deployment scenarios.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/versioned_docs/version-2.0.0/resources/tokens/cep18/transfer.md#2025-04-22_snippet_21\n\nLANGUAGE: bash\nCODE:\n```\ncasper-client put-deploy -n http://<NODE IP>:<PORT> \\\n--secret-key ~/casper/demo/user_a/secret_key.pem \\\n--session-package-name \"cep18_contract_package_CEP18\" \\\n--session-entry-point \"mint\" \\\n--session-arg \"owner:key='account-hash-683f53f56926f54ef9584b07585b025c68415dc05f7b2e56749153574b83d5cd'\" \\\n--session-arg \"amount:U256='10'\" \\\n--chain-name <CHAIN NAME> \\\n--payment-amount 1000000000\n```\n\n----------------------------------------\n\nTITLE: Defining PeersMap and PeerEntry List/Mapping Schemas - OpenAPI/Swagger - JSON\nDESCRIPTION: Declares 'PeersMap' as an array of 'PeerEntry' objects to model peer network participants. Each 'PeerEntry' enforces strict requirements for identification and network address, aiding discovery, statistics, and connection management across nodes.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/condor/jsonrpc-comp/rpc-1.5/schema/components.json.md#2025-04-22_snippet_56\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"description\": \"Map of peer IDs to network addresses.\",\n  \"type\": \"array\",\n  \"items\": {\n    \"$ref\": \"#/components/schemas/PeerEntry\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Retrieving State Root Hash From a Local Casper Node - Bash\nDESCRIPTION: Retrieves the current state root hash from a local Casper node using casper-client. The state root hash is necessary for all subsequent global state queries to ensure the correct blockchain state snapshot is referenced. Requires casper-client CLI and a running node at the specified address.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/docs/resources/beginner/counter/walkthrough.md#2025-04-22_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\ncasper-client get-state-root-hash --node-address http://localhost:11101\n```\n\n----------------------------------------\n\nTITLE: Invoking Contract Package via Alias Using Casper Client CLI (JSON)\nDESCRIPTION: This command enables invocation of a contract package's entry point using a named alias with the 'package-name' transaction. Users must provide the package alias, entry point, gas price, and secret key or initiator address. Prerequisites are a valid Casper client and properly configured named keys; the command fails on incorrect aliases, entry points, or authentication.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/versioned_docs/version-2.0.0/concepts/transactions.md#2025-04-22_snippet_8\n\nLANGUAGE: json\nCODE:\n```\ncasper-client put-txn package-name\n/// The package alias stored in the calling entity's named keys.\n  --package-alias <STRING>\n/// The entry point to invoke on the package.\n  --session-entry-point <NAME>\n/// The maximum gas price that the user is willing to pay for this transaction.\n  --gas-price-tolerance <INTEGER>\n/// The path to the local secret key file, or the [`initiator address`](../developers/json-rpc/types_chain.md#initiatoraddr) sending the transaction.\n  <--secret-key <PATH>|--initiator-address <HEX STRING>>\n\n```\n\n----------------------------------------\n\nTITLE: Checking Deployment Status on Casper using Bash\nDESCRIPTION: This snippet allows the user to check the deployment status using the deployment hash obtained from the previous step. The command requires Casper client connectivity.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/docs/resources/beginner/cep18.md#2025-04-22_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\ncasper-client get-deploy \\\n    --node-address http://78.46.32.13:7777 19853d1569fec2b0fa36e81f2f24bea77ccf039a399071cb7d4b377202a073d6\n```\n\n----------------------------------------\n\nTITLE: Test Package Configuration in Cargo.toml\nDESCRIPTION: Configuration for the test package in Cargo.toml, specifying dependencies required for testing Casper contracts including casper-types, casper-engine-test-support, and casper-execution-engine.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/versioned_docs/version-1.5.X/resources/tokens/cep18/tests.md#2025-04-22_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n[package]\nname = \"tests\"\nversion = \"1.0.0\"\n...\n\n[dependencies]\ncasper-types = \"2.0.0\"\ncasper-engine-test-support = \"4.0.0\"\ncasper-execution-engine = \"4.0.0\"\nonce_cell = \"1.16.0\"\n\n[lib]\nname = \"tests\"\n...\n```\n\n----------------------------------------\n\nTITLE: JSON-RPC Response for State Root Hash\nDESCRIPTION: Sample JSON-RPC response providing the state root hash and API version for a request made to obtain the global state root hash from a node in the Casper network.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/docs/resources/beginner/querying-network.md#2025-04-22_snippet_3\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"jsonrpc\": \"2.0\",\n    \"result\": {\n        \"api_version\": \"1.0.0\",\n        \"state_root_hash\": \"f97d8d36630a8f4acdb323223596f6fa01ee3b0d49ad70d84d715c156c5dbec6\"\n    },\n    \"id\": 1\n}\n```\n\n----------------------------------------\n\nTITLE: Core Configuration Example for Casper Mainnet (TOML)\nDESCRIPTION: This TOML snippet illustrates the typical configuration within the `[core]` section of `chainspec.toml` for the Casper Mainnet (public network). It allows unrestricted transfers, computes rewards, permits auction bids, implements 'no_refund' and 'no_fee' policies, and has no predefined administrators, contrasting with private network settings.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/docs/operators/setup-network/create-private.md#2025-04-22_snippet_2\n\nLANGUAGE: toml\nCODE:\n```\n[core]\nallow_unrestricted_transfers = true\ncompute_rewards = true\nallow_auction_bids = true\nrefund_handling = { type = 'no_refund' }\nfee_handling = { type = 'no_fee' }\nadministrators = []\n```\n\n----------------------------------------\n\nTITLE: Defining Block Schema in JSON\nDESCRIPTION: Defines the schema for Block, which represents a block after execution. It includes two versions of the block structure: Version1 and Version2.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/condor/jsonrpc-comp/rpc-2.0/schema/components.json.md#2025-04-22_snippet_85\n\nLANGUAGE: JSON\nCODE:\n```\n\"Block\": {\n    \"description\": \"A block after execution.\",\n    \"oneOf\": [\n        {\n            \"description\": \"The legacy, initial version of the block.\",\n            \"type\": \"object\",\n            \"required\": [\n                \"Version1\"\n            ],\n            \"properties\": {\n                \"Version1\": {\n                    \"$ref\": \"#/components/schemas/BlockV1\"\n                }\n            },\n            \"additionalProperties\": false\n        },\n        {\n            \"description\": \"The version 2 of the block.\",\n            \"type\": \"object\",\n            \"required\": [\n                \"Version2\"\n            ],\n            \"properties\": {\n                \"Version2\": {\n                    \"$ref\": \"#/components/schemas/BlockV2\"\n                }\n            },\n            \"additionalProperties\": false\n        }\n    ]\n}\n```\n\n----------------------------------------\n\nTITLE: Example Contract Installation on NCTL Network\nDESCRIPTION: Practical example of installing a counter contract on a local NCTL network using specific network parameters and file paths.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/docs/developers/cli/installing-contracts.md#2025-04-22_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ncasper-client put-transaction session \\\n--node-address http://localhost:11101 \\\n--chain-name casper-net-1 \\\n--secret-key ~/casper/casper-nctl/assets/net-1/users/user-1/secret_key.pem \\\n--gas-price-tolerance 10 \\\n--pricing-mode fixed \\\n--transaction-path ~/test_contracts/counter_installer.wasm \\\n--session-entry-point call \\\n--category 'install-upgrade'\n```\n\n----------------------------------------\n\nTITLE: Parsing Era Validators JSON Response\nDESCRIPTION: This JSON snippet demonstrates the structure of the 'era_validators' field in the auction info response. It shows the list of active validators for a specific era, including their public keys and weights.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/versioned_docs/version-2.0.0/developers/cli/delegate.md#2025-04-22_snippet_9\n\nLANGUAGE: json\nCODE:\n```\n\"block_height\":105,\n     \"era_validators\":[\n        {\n           \"era_id\":9,\n           \"validator_weights\":[\n              {\n                 \"public_key\":\"0102db4e11bccb3f9d823c82b9389625d383867d00d09b343043cdbe5ca56dd1fd\",\n                 \"weight\":\"648151805935226166098427654\"\n              },\n              {\n                 \"public_key\":\"01aa67009b37a23c7ad0ca632da5da239d5db46067d4b34125f61b04611f610baf\",\n                 \"weight\":\"648151805938466925128109996\"\n              },\n              {\n                 \"public_key\":\"01b7afa2beeddffd13458b763d7a00259f7dc0fa45498dfed05b4d7df4b7d65e2c\",\n                 \"weight\":\"648151805935226166098427656\"\n              },\n              {\n                 \"public_key\":\"01ca5463dac047cbd750d97ee42dd810cf1e081ece7d83ae4fc03b25a9ecad3b6a\",\n                 \"weight\":\"648151805938466925128109998\"\n              },\n              {\n                 \"public_key\":\"01f4a7644695aa129eba09fb3f11d0277b2bea1a3d5bc1933bcda93fdb4ad17e55\",\n                 \"weight\":\"648151805938466925128110000\"\n              }\n           ]\n        },\n```\n\n----------------------------------------\n\nTITLE: Activating Validator Bid with Compiled Wasm Contract - Bash\nDESCRIPTION: This Bash script shows how to reactivate a validator bid by calling a locally compiled `activate_bid.wasm` contract. Dependencies: `sudo`, `casper-client`, and access to the contract Wasm file. Parameters: node address, secret key path, chain name, payment amount, Wasm contract path, and validator's public key. The validator should adjust payment according to network requirements. Returns a deploy hash for further status inquiry.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/versioned_docs/version-1.5.X/operators/becoming-a-validator/recovering.md#2025-04-22_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\nsudo -u casper casper-client put-deploy \\\n--node-address <HOST:PORT> \\\n--secret-key <PATH> \\\n--chain-name <CHAIN_NAME> \\\n--payment-amount <PAYMENT_AMOUNT_IN_MOTES> \\\n--session-path \"$HOME/casper-node/target/wasm32-unknown-unknown/release/activate_bid.wasm\" \\\n--session-arg \"validator_public_key:public_key='$(cat /etc/casper/validator_keys/public_key_hex)'\"\n```\n\n----------------------------------------\n\nTITLE: Example Contract Package Hash Discovery - JSON Representation\nDESCRIPTION: Shows the JSON structure of an account's named keys mapping to locate a contract package hash for use in deployments. Requires access to account information (via node RPC or similar). The sample maps a hash key to a user-readable contract name.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/docs/developers/cli/calling-contracts.md#2025-04-22_snippet_6\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"key\": \"hash-76a8c3daa6d6ac799ce9f46d82ac98efb271d2d64b517861ec89a06051ef019e\",\n    \"name\": \"counter_package_name\"\n}\n```\n\n----------------------------------------\n\nTITLE: Request for state_get_auction_info with Block Hash in JSON-RPC\nDESCRIPTION: Example JSON-RPC request for the state_get_auction_info method that retrieves bid and validator information from a specific block identified by its hash.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/versioned_docs/version-2.0.0/developers/json-rpc/json-rpc-pos.md#2025-04-22_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"id\": 1,\n  \"jsonrpc\": \"2.0\",\n  \"method\": \"state_get_auction_info\",\n  \"params\": [\n    {\n      \"name\": \"block_identifier\",\n      \"value\": {\n        \"Hash\": \"0707070707070707070707070707070707070707070707070707070707070707\"\n      }\n    }\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Block and Era Related Schemas in JSON\nDESCRIPTION: JSON schema definitions for Casper Network block and era related structures including JsonBlockHeader, JsonEraEnd, JsonEraReport, Reward, and ValidatorWeight. These schemas define the core blockchain data structures that represent blocks and validator information.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/condor/jsonrpc-comp/rpc-1.5/schema/components.json.md#2025-04-22_snippet_48\n\nLANGUAGE: json\nCODE:\n```\n\"JsonBlockHeader\": {\n    \"description\": \"JSON representation of a block header.\",\n    \"type\": \"object\",\n    \"required\": [\n        \"accumulated_seed\",\n        \"body_hash\",\n        \"era_id\",\n        \"height\",\n        \"parent_hash\",\n        \"protocol_version\",\n        \"random_bit\",\n        \"state_root_hash\",\n        \"timestamp\"\n    ],\n    \"properties\": {\n        \"parent_hash\": {\n            \"description\": \"The parent hash.\",\n            \"allOf\": [\n                {\n                    \"$ref\": \"#/components/schemas/BlockHash\"\n                }\n            ]\n        },\n        \"state_root_hash\": {\n            \"description\": \"The state root hash.\",\n            \"allOf\": [\n                {\n                    \"$ref\": \"#/components/schemas/Digest\"\n                }\n            ]\n        },\n        \"body_hash\": {\n            \"description\": \"The body hash.\",\n            \"allOf\": [\n                {\n                    \"$ref\": \"#/components/schemas/Digest\"\n                }\n            ]\n        },\n        \"random_bit\": {\n            \"description\": \"Randomness bit.\",\n            \"type\": \"boolean\"\n        },\n        \"accumulated_seed\": {\n            \"description\": \"Accumulated seed.\",\n            \"allOf\": [\n                {\n                    \"$ref\": \"#/components/schemas/Digest\"\n                }\n            ]\n        },\n        \"era_end\": {\n            \"description\": \"The era end.\",\n            \"anyOf\": [\n                {\n                    \"$ref\": \"#/components/schemas/JsonEraEnd\"\n                },\n                {\n                    \"type\": \"null\"\n                }\n            ]\n        },\n        \"timestamp\": {\n            \"description\": \"The block timestamp.\",\n            \"allOf\": [\n                {\n                    \"$ref\": \"#/components/schemas/Timestamp\"\n                }\n            ]\n        },\n        \"era_id\": {\n            \"description\": \"The block era id.\",\n            \"allOf\": [\n                {\n                    \"$ref\": \"#/components/schemas/EraId\"\n                }\n            ]\n        },\n        \"height\": {\n            \"description\": \"The block height.\",\n            \"type\": \"integer\",\n            \"format\": \"uint64\",\n            \"minimum\": 0.0\n        },\n        \"protocol_version\": {\n            \"description\": \"The protocol version.\",\n            \"allOf\": [\n                {\n                    \"$ref\": \"#/components/schemas/ProtocolVersion\"\n                }\n            ]\n        }\n    },\n    \"additionalProperties\": false\n},\n\"JsonEraEnd\": {\n    \"type\": \"object\",\n    \"required\": [\n        \"era_report\",\n        \"next_era_validator_weights\"\n    ],\n    \"properties\": {\n        \"era_report\": {\n            \"$ref\": \"#/components/schemas/JsonEraReport\"\n        },\n        \"next_era_validator_weights\": {\n            \"type\": \"array\",\n            \"items\": {\n                \"$ref\": \"#/components/schemas/ValidatorWeight\"\n            }\n        }\n    },\n    \"additionalProperties\": false\n},\n\"JsonEraReport\": {\n    \"description\": \"Equivocation and reward information to be included in the terminal block.\",\n    \"type\": \"object\",\n    \"required\": [\n        \"equivocators\",\n        \"inactive_validators\",\n        \"rewards\"\n    ],\n    \"properties\": {\n        \"equivocators\": {\n            \"type\": \"array\",\n            \"items\": {\n                \"$ref\": \"#/components/schemas/PublicKey\"\n            }\n        },\n        \"rewards\": {\n            \"type\": \"array\",\n            \"items\": {\n                \"$ref\": \"#/components/schemas/Reward\"\n            }\n        },\n        \"inactive_validators\": {\n            \"type\": \"array\",\n            \"items\": {\n                \"$ref\": \"#/components/schemas/PublicKey\"\n            }\n        }\n    },\n    \"additionalProperties\": false\n},\n\"Reward\": {\n    \"type\": \"object\",\n    \"required\": [\n        \"amount\",\n        \"validator\"\n    ],\n    \"properties\": {\n        \"validator\": {\n            \"$ref\": \"#/components/schemas/PublicKey\"\n        },\n        \"amount\": {\n            \"type\": \"integer\",\n            \"format\": \"uint64\",\n            \"minimum\": 0.0\n        }\n    },\n    \"additionalProperties\": false\n},\n\"ValidatorWeight\": {\n    \"type\": \"object\",\n    \"required\": [\n        \"validator\",\n        \"weight\"\n    ],\n    \"properties\": {\n        \"validator\": {\n            \"$ref\": \"#/components/schemas/PublicKey\"\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Importing Required Crates for Casper Rust Tests\nDESCRIPTION: Shows the `use` statements required within the test module to bring necessary components into scope. This includes builders and constants from `casper_engine_test_support` and types like `AccountHash` and `RuntimeArgs` from `casper_types`.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/versioned_docs/version-1.5.X/developers/writing-onchain-code/testing-session-code.md#2025-04-22_snippet_3\n\nLANGUAGE: rust\nCODE:\n```\n    use casper_engine_test_support::{\n        ExecuteRequestBuilder, InMemoryWasmTestBuilder, DEFAULT_ACCOUNT_ADDR,\n        DEFAULT_RUN_GENESIS_REQUEST,\n    };\n    use casper_types::account::AccountHash;\n    use casper_types::{runtime_args, RuntimeArgs};\n```\n\n----------------------------------------\n\nTITLE: Querying Global State on Casper Network - Bash\nDESCRIPTION: This sequence queries the global state of the Casper blockchain using account hash and state root hash. Replace [STATE_ROOT_HASH] and [ACCOUNT_HASH] with the actual values retrieved earlier. Output is the current state associated with the provided account for the given chain snapshot.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/docs/resources/beginner/counter/walkthrough.md#2025-04-22_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\ncasper-client query-global-state \\\n    --node-address http://localhost:11101 \\\n    --state-root-hash [STATE_ROOT_HASH] \\\n    --key [ACCOUNT_HASH]\n```\n\n----------------------------------------\n\nTITLE: Configuring Chainspec Parameters for Casper Network Rewards\nDESCRIPTION: Sample chainspec configuration showing the parameter values that control rewards distribution in the Casper network. It includes settings for finality signature proportion, finder's fee, signature rewards delay, and round seigniorage rate which determines annual issuance.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/docs/concepts/design/rewards.md#2025-04-22_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n# The split in finality signature rewards between block producer and participating signers.\nfinders_fee = [1, 5]\n# The proportion of baseline rewards going to reward finality signatures specifically.\nfinality_signature_proportion = [1, 2]\n# Lookback interval indicating which past block we are looking at to reward.\nsignature_rewards_max_delay = 3\n...\n# Round seigniorage rate represented as a fraction of the total supply.\n#\n# Annual issuance: 8%\n# Minimum block time: 2^14 milliseconds\n# Ticks per year: 31536000000\n#\n# (1+0.08)^((2^14)/31536000000)-1 is expressed as a fractional number below\n# Python:\n# from fractions import Fraction\n# Fraction((1 + 0.08)**((2**14)/31536000000) - 1).limit_denominator(1000000000)\nround_seigniorage_rate = [7, 175070816]\n```\n\n----------------------------------------\n\nTITLE: Building Counter Contract Example with Make\nDESCRIPTION: Commands for building the counter contract example using Make. These commands prepare the environment and build the contract using the provided Makefile in the project directory.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/docs/developers/writing-onchain-code/simple-contract.md#2025-04-22_snippet_18\n\nLANGUAGE: bash\nCODE:\n```\nmake prepare\nmake build-contract\n```\n\n----------------------------------------\n\nTITLE: Reading and Updating Dictionary Entries\nDESCRIPTION: Second part of the update_ledger_record function that reads an entry from the dictionary and either creates a new entry with value 1 or increments the existing value. It demonstrates how to use dictionary_get and dictionary_put together.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/versioned_docs/version-1.5.X/concepts/dictionaries.md#2025-04-22_snippet_4\n\nLANGUAGE: rust\nCODE:\n```\n    // This identifies an item within the dictionary and either creates or updates the associated value.\n    match storage::dictionary_get::<u64>(ledger_seed_uref, &dictionary_item_key).unwrap_or_revert()\n    {\n        None => storage::dictionary_put(ledger_seed_uref, &dictionary_item_key, 1u64),\n        Some(current_number_of_donations) => storage::dictionary_put(\n            ledger_seed_uref,\n            &dictionary_item_key,\n            current_number_of_donations + 1u64,\n        ),\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Executing Add Bid Transaction in Casper Network\nDESCRIPTION: This command allows validators to place an auction bid. It requires the delegation rate, bidder's public key, bid amount, minimum and maximum delegation amounts, gas price tolerance, and either a secret key or initiator address.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/docs/concepts/transactions.md#2025-04-22_snippet_1\n\nLANGUAGE: json\nCODE:\n```\ncasper-client put-txn add-bid\n/// The [delegation rate](../concepts/economics/staking.md#delegation-rate) for delegators staking on to this validator.\n  --delegation-rate <INTEGER>\n/// The public key of the bidder.\n  --public-key <FORMATTED STRING or PATH>\n/// The amount in motes to be bid.\n  --transaction-amount <INTEGER>\n/// The minimum amount of motes that a delegator can stake to this validator.\n  --minimum-delegation-amount <INTEGER>\n/// The maximum amount of motes that a delegator can stake to this validator.\n  --maximum-delegation-amount <INTEGER>\n/// The maximum gas price that the user is willing to pay for this transaction.\n  --gas-price-tolerance <INTEGER>\n/// The path to the local secret key file, or the [`initiator address`](../developers/json-rpc/types_chain.md#initiatoraddr) sending the transaction.\n  <--secret-key <PATH>|--initiator-address <HEX STRING>>\n```\n\n----------------------------------------\n\nTITLE: Testing Contract Entry Point Access Denial in Rust\nDESCRIPTION: Code that demonstrates an unsuccessful attempt to call a contract's entry point using an unauthorized key. The test verifies that the contract properly denies access when the caller's keys don't intersect with the installer's keys.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/docs/resources/advanced/list-auth-keys-tutorial.md#2025-04-22_snippet_14\n\nLANGUAGE: rust\nCODE:\n```\n// Here ACCOUNT_USER_2 does not have DEFAULT_ACCOUNT_ADDR (from the contract installer) in its associated keys\n// The deploy will therefore revert with PermissionDenied\nlet entry_point_deploy_item = DeployItemBuilder::new()\n    .with_empty_payment_bytes(runtime_args! {ARG_AMOUNT => *DEFAULT_PAYMENT})\n    .with_authorization_keys(&[account_addr_2])\n    .with_address(account_addr_2)\n    .with_stored_session_hash(contract_hash, ENTRYPOINT, runtime_args! {})\n    .build();\n\nlet entry_point_request =\n    ExecuteRequestBuilder::from_deploy_item(entry_point_deploy_item).build();\n\nbuilder.exec(entry_point_request).commit().expect_failure();\nlet error = builder.get_error().expect(\"must have User error: 0\");\nassert_expected_error(\n    error,\n    0,\n    \"should fail execution since DEFAULT_ACCOUNT_ADDR is not in ACCOUNT_USER_2 associated keys\",\n);\n```\n\n----------------------------------------\n\nTITLE: Installing Casper Tool Dependencies on macOS - Bash\nDESCRIPTION: Installs pkg-config and openssl packages using Homebrew for macOS. These are required for building Casper client and related tools. Homebrew must be pre-installed and accessible from the terminal.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/versioned_docs/version-1.5.X/developers/prerequisites.md#2025-04-22_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\nbrew install pkg-config\nbrew install openssl\n```\n\n----------------------------------------\n\nTITLE: Activating NCTL Scripts in Bash\nDESCRIPTION: Command to source the nctl-activate.sh script, which makes the NCTL commands available in your shell.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/condor/local-setup.md#2025-04-22_snippet_9\n\nLANGUAGE: bash\nCODE:\n```\nsource nctl-activate.sh casper-nctl\n```\n\n----------------------------------------\n\nTITLE: Deploy Data Structure\nDESCRIPTION: Defines the core deploy data structure used for smart contract execution, including header metadata, payment and session code, and approvals.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/versioned_docs/version-1.5.X/concepts/serialization-standard.md#2025-04-22_snippet_1\n\nLANGUAGE: rust\nCODE:\n```\nstruct Deploy {\n    hash: Hash,\n    header: DeployHeader,\n    payment: ExecutableDeployItem,\n    session: ExecutableDeployItem,\n    approvals: Vec<Signature>\n}\n```\n\n----------------------------------------\n\nTITLE: Changing Bid Public Key via Compiled WASM (Bash)\nDESCRIPTION: Uses the `casper-client put-txn session` command to execute the compiled `change_bid_public_key.wasm` binary. Requires the node address, secret key, chain name, gas parameters, path to the WASM file, the current public key, and the new public key. This method is typically more expensive than the direct contract call.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/docs/operators/becoming-a-validator/change-bid-public-key.md#2025-04-22_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nsudo -u casper casper-client put-txn session \\\n--node-address http://<HOST:PORT> \\\n--secret-key /etc/casper/validator_keys/secret_key.pem \\\n--chain-name <CHAIN_NAME> \\\n--category <INSTALL-UPGRADE|LARGE|MEDIUM|SMALL> \\\n--pricing-mode fixed \\\n--gas-price-tolerance <GAS_PRICE_TOLERANCE> \\\n--transaction-path $HOME/casper-node/target/wasm32-unknown-unknown/release/change_bid_public_key.wasm \\\n--session-entry-point call \\\n--session-arg=\"public_key:public_key='<PUBLIC_KEY_HEX>'\" \\\n--session-arg=\"new_public_key:public_key='<PUBLIC_KEY_HEX>'\"\n```\n\n----------------------------------------\n\nTITLE: Defining Unbonding Purse Schema in JSON\nDESCRIPTION: JSON schema definition for an unbonding purse with required properties for amount, bonding purse, creation era, and public keys. It includes property descriptions, references to other schema components, and an optional new_validator field for re-delegation scenarios.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/condor/jsonrpc-comp/rpc-2.0/schema/UnbondingPurse.json.md#2025-04-22_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"description\": \"Unbonding purse.\",\n    \"type\": \"object\",\n    \"required\": [\n        \"amount\",\n        \"bonding_purse\",\n        \"era_of_creation\",\n        \"unbonder_public_key\",\n        \"validator_public_key\"\n    ],\n    \"properties\": {\n        \"bonding_purse\": {\n            \"description\": \"Bonding Purse\",\n            \"allOf\": [\n                {\n                    \"$ref\": \"#/components/schemas/URef\"\n                }\n            ]\n        },\n        \"validator_public_key\": {\n            \"description\": \"Validators public key.\",\n            \"allOf\": [\n                {\n                    \"$ref\": \"#/components/schemas/PublicKey\"\n                }\n            ]\n        },\n        \"unbonder_public_key\": {\n            \"description\": \"Unbonders public key.\",\n            \"allOf\": [\n                {\n                    \"$ref\": \"#/components/schemas/PublicKey\"\n                }\n            ]\n        },\n        \"era_of_creation\": {\n            \"description\": \"Era in which this unbonding request was created.\",\n            \"allOf\": [\n                {\n                    \"$ref\": \"#/components/schemas/EraId\"\n                }\n            ]\n        },\n        \"amount\": {\n            \"description\": \"Unbonding Amount.\",\n            \"allOf\": [\n                {\n                    \"$ref\": \"#/components/schemas/U512\"\n                }\n            ]\n        },\n        \"new_validator\": {\n            \"description\": \"The validator public key to re-delegate to.\",\n            \"anyOf\": [\n                {\n                    \"$ref\": \"#/components/schemas/PublicKey\"\n                },\n                {\n                    \"type\": \"null\"\n                }\n            ]\n        }\n    },\n    \"additionalProperties\": false\n}\n```\n\n----------------------------------------\n\nTITLE: Installing Casper Client Dependencies on MacOS (Bash)\nDESCRIPTION: Installs necessary development libraries (`pkg-config`, `openssl`) on MacOS using Homebrew. These libraries are required dependencies for building the `casper-client`.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/docs/resources/quick-start.md#2025-04-22_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\nbrew install pkg-config\nbrew install openssl\n```\n\n----------------------------------------\n\nTITLE: Example of Redelegating Tokens on a Private Network in Bash\nDESCRIPTION: This example demonstrates redelegating tokens on a private Casper network using the system auction contract. It includes specific values for node address, chain name, secret key path, and public keys for the delegator and validators.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/versioned_docs/version-1.5.X/developers/cli/redelegate.md#2025-04-22_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ncasper-client put-deploy \\\n--node-address http://3.143.158.19:7777  \\\n--chain-name integration-test \\\n--secret-key ~/KEYS/integration/Test_secret_key.pem \\\n--payment-amount 2500000000 \\\n--session-hash hash-e22d38bcf3454a93face78a353feaccbf1d637d1ef9ef2e061a655728ff59bbe \\\n--session-entry-point redelegate \\\n--session-arg \"validator:public_key='017fec504c642f2b321b8591f1c3008348c57a81acafceb5a392cf8416a5fb4a3c'\" \\\n--session-arg \"amount:u512='500000000000'\" \\\n--session-arg \"delegator:public_key='01360af61b50cdcb7b92cffe2c99315d413d34ef77fadee0c105cc4f1d4120f986'\" \\\n--session-arg \"new_validator:public_key='019e7b8bdec03ba83be4f5443d9f7f9111c77fec984ce9bb5bb7eb3da1e689c02d'\"\n```\n\n----------------------------------------\n\nTITLE: Supplying Private Key Path for Deploy in Rust with casper_client - Rust\nDESCRIPTION: Takes the path to a PEM-encoded secret key and supplies it as an argument for deploy parameter construction in casper_client. Rust generally passes file paths instead of loading private keys into memory directly. The deploy_params structure requires a valid key path string for secret_key.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/versioned_docs/version-1.5.X/developers/dapps/sdk/client-library-usage.md#2025-04-22_snippet_12\n\nLANGUAGE: rust\nCODE:\n```\nlet deploy_params: casper_client::DeployStrParams = casper_client::DeployStrParams{\n    secret_key:\"./secret_key.pem\",\n    timestamp:\"\",\n    ...\n};\n```\n\n----------------------------------------\n\nTITLE: Activating Validator Bid via System Auction Contract on Testnet - Bash\nDESCRIPTION: This Bash snippet is a filled example of activating a bid on the Casper Testnet using the system auction contract's entry point. It shows concrete values for node address, secret key, chain name, session hash for testnet, and payment amount. Outputs a deploy hash on success. Used as a verified operational example for real validator recovery on the Testnet.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/versioned_docs/version-1.5.X/operators/becoming-a-validator/recovering.md#2025-04-22_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\nsudo -u casper casper-client put-deploy \\\n--node-address http://65.21.75.254:7777  \\\n--secret-key /etc/casper/validator_keys/secret_key.pem \\\n--chain-name casper-test \\\n--payment-amount 10000 \\\n--session-hash hash-93d923e336b20a4c4ca14d592b60e5bd3fe330775618290104f9beb326db7ae2 \\\n--session-entry-point activate_bid \\\n--session-arg \"validator_public_key:public_key='$(cat /etc/casper/validator_keys/public_key_hex)'\"\n```\n\n----------------------------------------\n\nTITLE: Defining the state_get_dictionary_item RPC Method Schema and Example (JSON)\nDESCRIPTION: This JSON object defines the specification for the `state_get_dictionary_item` RPC method on the Casper Network. It details required parameters (`state_root_hash`, `dictionary_identifier`), the structure of the expected result (including `api_version`, `dictionary_key`, `stored_value`, `merkle_proof`), and provides a concrete example demonstrating its usage with sample input and output values. The method retrieves an item from a specified dictionary using a state root hash and a dictionary identifier (like a URef).\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/condor/jsonrpc-comp/rpc-1.5/state_get_dictionary_item.json.md#2025-04-22_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"name\": \"state_get_dictionary_item\",\n  \"summary\": \"returns an item from a Dictionary\",\n  \"params\": [\n    {\n      \"name\": \"state_root_hash\",\n      \"schema\": {\n        \"description\": \"Hash of the state root\",\n        \"$ref\": \"#/components/schemas/Digest\"\n      },\n      \"required\": true\n    },\n    {\n      \"name\": \"dictionary_identifier\",\n      \"schema\": {\n        \"description\": \"The Dictionary query identifier.\",\n        \"$ref\": \"#/components/schemas/DictionaryIdentifier\"\n      },\n      \"required\": true\n    }\n  ],\n  \"result\": {\n    \"name\": \"state_get_dictionary_item_result\",\n    \"schema\": {\n      \"description\": \"Result for \\\"state_get_dictionary_item\\\" RPC response.\",\n      \"type\": \"object\",\n      \"required\": [\n        \"api_version\",\n        \"dictionary_key\",\n        \"merkle_proof\",\n        \"stored_value\"\n      ],\n      \"properties\": {\n        \"api_version\": {\n          \"description\": \"The RPC API version.\",\n          \"type\": \"string\"\n        },\n        \"dictionary_key\": {\n          \"description\": \"The key under which the value is stored.\",\n          \"type\": \"string\"\n        },\n        \"stored_value\": {\n          \"description\": \"The stored value.\",\n          \"$ref\": \"#/components/schemas/StoredValue\"\n        },\n        \"merkle_proof\": {\n          \"description\": \"The Merkle proof.\",\n          \"type\": \"string\"\n        }\n      },\n      \"additionalProperties\": false\n    }\n  },\n  \"examples\": [\n    {\n      \"name\": \"state_get_dictionary_item_example\",\n      \"params\": [\n        {\n          \"name\": \"state_root_hash\",\n          \"value\": \"0808080808080808080808080808080808080808080808080808080808080808\"\n        },\n        {\n          \"name\": \"dictionary_identifier\",\n          \"value\": {\n            \"URef\": {\n              \"seed_uref\": \"uref-09480c3248ef76b603d386f3f4f8a5f87f597d4eaffd475433f861af187ab5db-007\",\n              \"dictionary_item_key\": \"a_unique_entry_identifier\"\n            }\n          }\n        }\n      ],\n      \"result\": {\n        \"name\": \"state_get_dictionary_item_example_result\",\n        \"value\": {\n          \"api_version\": \"1.5.6\",\n          \"dictionary_key\": \"dictionary-67518854aa916c97d4e53df8570c8217ccc259da2721b692102d76acd0ee8d1f\",\n          \"stored_value\": {\n            \"CLValue\": {\n              \"cl_type\": \"U64\",\n              \"bytes\": \"0100000000000000\",\n              \"parsed\": 1\n            }\n          },\n          \"merkle_proof\": \"01000000006ef2e0949ac76e55812421f755abe129b6244fe7168b77f47a72536147614625016ef2e0949ac76e55812421f755abe129b6244fe7168b77f47a72536147614625000000003529cde5c621f857f75f3810611eb4af3f998caaa9d4a3413cf799f99c67db0307010000006ef2e0949ac76e55812421f755abe129b6244fe7168b77f47a7253614761462501010102000000006e06000000000074769d28aac597a36a03a932d4b43e4f10bf0403ee5c41dd035102553f5773631200b9e173e8f05361b681513c14e25e3138639eb03232581db7557c9e8dbbc83ce94500226a9a7fe4f2b7b88d5103a4fc7400f02bf89c860c9ccdd56951a2afe9be0e0267006d820fb5676eb2960e15722f7725f3f8f41030078f8b2e44bf0dc03f71b176d6e800dc5ae9805068c5be6da1a90b2528ee85db0609cc0fb4bd60bbd559f497a98b67f500e1e3e846592f4918234647fca39830b7e1e6ad6f5b7a99b39af823d82ba1873d000003000000010186ff500f287e9b53f823ae1582b1fa429dfede28015125fd233a31ca04d5012002015cc42669a55467a1fdf49750772bfc1aed59b9b085558eb81510e9b015a7c83b0301e3cf4a34b1db6bfa58808b686cb8fe21ebe0c1bcbcee522649d2b135fe510fe3\"\n        }\n      }\n    }\n  ]\n}\n \n```\n\n----------------------------------------\n\nTITLE: Memory Fill Operation Implementation in WebAssembly\nDESCRIPTION: Implements a memory fill operation similar to memset in WebAssembly. Optimizes filling for different alignment cases and block sizes.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/versioned_docs/version-2.0.0/developers/json-rpc/json-rpc-transactional.md#2025-04-22_snippet_15\n\nLANGUAGE: webassembly\nCODE:\n```\ne80101037f418cbb041008024002402002410f4b0d0041c497021008200021030c010b419aea0410082000410020006b41037122046a210502402004450d0041c409100820002103034041ecc9021008200320013a0000200341016a22032005490d000b0b2005200220046b2204417c7122026a2103024020024101480d0041bc0f1008200141ff017141818284086c2102034041ecc902100820052002360200200541046a22052003490d000b0b200441037121020b02402002450d00419c0e1008200320026a2105034041ecc9021008200320013a0000200341016a22032005490d000b0b20000b\n```\n\n----------------------------------------\n\nTITLE: Packaging Binary Files (bin.tar.gz)\nDESCRIPTION: Bash commands to package the necessary binary files (at minimum, the `casper-node` executable) into a compressed archive (`bin.tar.gz`). Similar to packaging configuration, it uses a temporary directory and `tar` to create the archive without parent directory paths.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/versioned_docs/version-1.5.X/operators/setup-network/staging-files-for-new-network.md#2025-04-22_snippet_8\n\nLANGUAGE: bash\nCODE:\n```\nmkdir bin\ncd bin\ncp [source of casper-node] ./casper-node\ntar -czvf ../bin.tar.gz .\n\n```\n\n----------------------------------------\n\nTITLE: Querying Global State\nDESCRIPTION: Query the global state of the Casper network using the account hash and state root hash.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/versioned_docs/version-2.0.0/resources/beginner/counter/walkthrough.md#2025-04-22_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\ncasper-client query-global-state \\\n    --node-address http://localhost:11101 \\\n    --state-root-hash [STATE_ROOT_HASH] \\\n    --key [ACCOUNT_HASH]\n```\n\n----------------------------------------\n\nTITLE: Defining ValidatorBid Schema in JSON\nDESCRIPTION: Schema definition for a ValidatorBid object representing an entry in the validator map. It contains details about the validator's public key, bonding purse, staked amount, delegation rate, and delegation limits.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/condor/jsonrpc-comp/rpc-2.0/schema.json.md#2025-04-22_snippet_62\n\nLANGUAGE: json\nCODE:\n```\n\"ValidatorBid\": {\n  \"description\": \"An entry in the validator map.\",\n  \"type\": \"object\",\n  \"required\": [\n    \"bonding_purse\",\n    \"delegation_rate\",\n    \"inactive\",\n    \"maximum_delegation_amount\",\n    \"minimum_delegation_amount\",\n    \"staked_amount\",\n    \"validator_public_key\"\n  ],\n  \"properties\": {\n    \"validator_public_key\": {\n      \"description\": \"Validator public key\",\n      \"allOf\": [\n        {\n          \"$ref\": \"#/components/schemas/PublicKey\"\n        }\n      ]\n    },\n    \"bonding_purse\": {\n      \"description\": \"The purse that was used for bonding.\",\n      \"allOf\": [\n        {\n          \"$ref\": \"#/components/schemas/URef\"\n        }\n      ]\n    },\n    \"staked_amount\": {\n      \"description\": \"The amount of tokens staked by a validator (not including delegators).\",\n      \"allOf\": [\n        {\n          \"$ref\": \"#/components/schemas/U512\"\n        }\n      ]\n    },\n    \"delegation_rate\": {\n      \"description\": \"Delegation rate\",\n      \"type\": \"integer\",\n      \"format\": \"uint8\",\n      \"minimum\": 0.0\n    },\n    \"vesting_schedule\": {\n      \"description\": \"Vesting schedule for a genesis validator. `None` if non-genesis validator.\",\n      \"anyOf\": [\n\n\n```\n\n----------------------------------------\n\nTITLE: Defining Method Parameter Schema in JSON\nDESCRIPTION: This JSON Schema defines the expected structure for a method parameter object. It mandates the presence of a `name` property (string type) and a `cl_type` property, which must conform to the `CLType` schema definition referenced by `$ref`. This ensures consistency and validity of method parameters passed to methods within the Casper Network context.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/condor/jsonrpc-comp/rpc-1.5/schema/Parameter.json.md#2025-04-22_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"description\": \"Parameter to a method\",\n    \"type\": \"object\",\n    \"required\": [\n        \"cl_type\",\n        \"name\"\n    ],\n    \"properties\": {\n        \"name\": {\n            \"type\": \"string\"\n        },\n        \"cl_type\": {\n            \"$ref\": \"#/components/schemas/CLType\"\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Response Structure for info_get_peers RPC Method in JSON\nDESCRIPTION: Example response from the info_get_peers method showing the API version and a list of connected peers with their node IDs and network addresses.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/versioned_docs/version-2.0.0/developers/json-rpc/json-rpc-informational.md#2025-04-22_snippet_27\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"id\": 1,\n  \"jsonrpc\": \"2.0\",\n  \"result\": {\n    \"name\": \"info_get_peers_result\",\n    \"value\": {\n      \"api_version\": \"2.0.0\",\n      \"peers\": [\n        {\n          \"node_id\": \"tls:0101..0101\",\n          \"address\": \"127.0.0.1:54321\"\n        }\n      ]\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Block RPC Schema\nDESCRIPTION: JSON schema defining the response structure for the chain_get_block RPC endpoint, which returns block information from the network.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/condor/jsonrpc-comp/rpc-2.0/schema.json.md#2025-04-22_snippet_19\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"description\": \"Result for \\\"chain_get_block\\\" RPC response.\",\n  \"type\": \"object\",\n  \"required\": [\n    \"api_version\"\n  ],\n  \"properties\": {\n    \"api_version\": {\n      \"description\": \"The RPC API version.\",\n      \"type\": \"string\"\n    },\n    \"block_with_signatures\": {\n      \"description\": \"The block, if found.\",\n      \"anyOf\": [\n        {\n          \"$ref\": \"#/components/schemas/JsonBlockWithSignatures\"\n        },\n        {\n          \"type\": \"null\"\n        }\n      ]\n    }\n  },\n  \"additionalProperties\": false\n}\n```\n\n----------------------------------------\n\nTITLE: Info Get Deploy Request Example\nDESCRIPTION: Example JSON request for the deprecated info_get_deploy endpoint to retrieve deploy details using a deploy hash.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/versioned_docs/version-2.0.0/developers/json-rpc/json-rpc-informational.md#2025-04-22_snippet_8\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"id\": 1,\n  \"jsonrpc\": \"2.0\",\n  \"method\": \"info_get_deploy\",\n  \"params\": [\n    {\n      \"name\": \"deploy_hash\",\n      \"value\": \"5c9b3b099c1378aa8e4a5f07f59ff1fcdc69a83179427c7e67ae0377d94d93fa\"\n    },\n    {\n      \"name\": \"finalized_approvals\",\n      \"value\": true\n    }\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Minimum Bid Configuration in TOML\nDESCRIPTION: TOML configuration extract showing the minimum bid amount of 100,000 CSPR required for validator bonding\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/versioned_docs/version-2.0.0/operators/becoming-a-validator/bonding.md#2025-04-22_snippet_0\n\nLANGUAGE: toml\nCODE:\n```\n# Minimum bid amount allowed in motes. Withdrawing one's bid to an amount strictly less than\n# the value specified will be treated as a full unbond of a validator and their associated delegators\nminimum_bid_amount = 100_000_000_000_000\n```\n\n----------------------------------------\n\nTITLE: Installing cargo on Linux\nDESCRIPTION: Install Cargo, the package manager for Rust, on Linux systems.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/versioned_docs/version-2.0.0/developers/prerequisites.md#2025-04-22_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nsudo apt install cargo\n```\n\n----------------------------------------\n\nTITLE: Creating a Locked Contract Package in Rust\nDESCRIPTION: This Rust code snippet shows how to create a locked contract package using the new_locked_contract function. This type of contract cannot be upgraded once deployed.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/versioned_docs/version-2.0.0/resources/beginner/upgrade-contract.md#2025-04-22_snippet_9\n\nLANGUAGE: rust\nCODE:\n```\nlet (stored_contract_hash, _) = storage::new_locked_contract(\n    contract_entry_points, \n    Some(contract_named_keys), \n    Some(\"contract_package_name\".to_string()),\n    Some(\"contract_access_uref\".to_string()),\n);\n```\n\n----------------------------------------\n\nTITLE: Building Delegation Wasm Contract\nDESCRIPTION: Commands to clone the casper-node repository and build the delegation Wasm contract using make commands.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/docs/developers/cli/delegate.md#2025-04-22_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\ngit clone https://github.com/casper-network/casper-node\ncd casper-node\nmake setup-rs\nmake build-contracts-rs\n```\n\n----------------------------------------\n\nTITLE: Defining Constants for Casper Session Code Testing in Rust\nDESCRIPTION: This code snippet shows how to define constants for Casper session code testing in Rust. It includes constants for the associated account hash, account name, and contract WASM file.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/versioned_docs/version-2.0.0/developers/writing-onchain-code/testing-session-code.md#2025-04-22_snippet_3\n\nLANGUAGE: rust\nCODE:\n```\nconst ASSOCIATED_ACCOUNT_HASH: AccountHash = AccountHash::new([1u8; 32]); // hash of the associated account\nconst ASSOCIATED_ACCOUNT: &str = \"deployment-account\"; // the associated account argument\nconst CONTRACT_WASM: &str = \"contract.wasm\"; // file to pass to the instance of the EE\n```\n\n----------------------------------------\n\nTITLE: JSON-RPC Request for Account Query\nDESCRIPTION: JSON-RPC request example illustrating how to query account information on the Casper blockchain. It uses the method `query_global_state`, requiring state identifier and account hash details in the parameters.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/docs/resources/beginner/querying-network.md#2025-04-22_snippet_4\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"jsonrpc\": \"2.0\",\n  \"method\": \"query_global_state\",\n  \"params\": {\n    \"state_identifier\": {\n      \"StateRootHash\": \"a306a9cf869e52fe9eacdc28aade94215112cc04b6737b3669c35568a47a7dc2\"\n    },\n    \"key\": \"account-hash-1ed5a1c39bea93c105f2d22c965a84b205b36734a377d05dbb103b6bfaa595a7\",\n    \"path\": []\n  },\n  \"id\": 4\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Associated Account Constant (Rust)\nDESCRIPTION: This snippet declares a string constant for an associated deployment account. Such constants are typically used for account configuration or authorization logic in session code. No external dependencies are required beyond standard Rust and session context.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/versioned_docs/version-1.5.X/developers/writing-onchain-code/writing-session-code.md#2025-04-22_snippet_2\n\nLANGUAGE: rust\nCODE:\n```\nconst ASSOCIATED_ACCOUNT: &str = \"deployment-account\";\n```\n\n----------------------------------------\n\nTITLE: Querying Global State for Contract Named Key using casper-client (Bash)\nDESCRIPTION: Queries the value of a specific named key ('name') within a CEP-18 contract using the `casper-client query-global-state` command. Requires the node address, the state root hash obtained previously, the account hash under which the contract is stored, and the query path (`-q`) formatted as 'contract_hash_name/named_key_name'.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/docs/resources/beginner/cep18.md#2025-04-22_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\ncasper-client query-global-state --node-address http://78.46.32.13:7777 \\\n--state-root-hash 7706d906fce25dcdadb2a9453f5243a6c72c4444e6c826cf2941157333a48705 \\\n--key account-hash-ee57bb3b39eb66b74a1dcf12f3f0e7d8e906e34b11f85dc05497bf33fbf3a1f9 \\\n-q \"cep18_contract_hash_CHF Coin/name\"\n```\n\n----------------------------------------\n\nTITLE: Querying Source Account Purse Balance (Verbose, Bash)\nDESCRIPTION: This command queries the balance of a specific source account\\'s main purse on Casper\\'s testnet using verbose output to display detailed result data. Important arguments include the node address, state root hash, purse identifier (as account hash), and an optional id for tracking. Suitable for verifying correct purse balance retrieval in test environments. Requires an available node endpoint and valid account hash.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/docs/developers/cli/transfers/verify-transfer.md#2025-04-22_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\ncasper-client query-balance -v --id 6 \\\n--node-address https://node.testnet.casper.network \\\n--state-root-hash fdb1474d441ec0fcbf2e088f1630dbf98d3bcf7f7a7fe298303797f35b8cb4e1 \\\n--purse-identifier account-hash-e70dbca48c2d31bc2d754e51860ceaa8a1a49dc627b20320b0ecee1b6d9ce655\n```\n\n----------------------------------------\n\nTITLE: Sending Deploy with Casper Client CLI\nDESCRIPTION: Command to send a transfer deploy to the Casper testnet using casper-client. Requires a prepared deploy file and node address.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/versioned_docs/version-2.0.0/developers/cli/transfers/multisig-deploy-transfer.md#2025-04-22_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\ncasper-client send-deploy \\\n--input transfer2.deploy \\\n--node-address https://node.testnet.casper.network\n```\n\n----------------------------------------\n\nTITLE: Deploying CEP-78 Contract with Casper Client - Bash\nDESCRIPTION: This bash snippet demonstrates how to issue a deployment command using the Casper client to install a CEP-78 contract. The command requires specifying session arguments such as collection name, symbol, total supply, and more. It assumes the Casper client is properly installed and connected to the correct Casper testnet or mainnet. Key parameters include node address, chain name, payment amount, and session file path. The expected output includes a deploy hash for verification.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/versioned_docs/version-1.5.X/resources/tokens/cep78/using-casper-client/full-installation-tutorial.md#2025-04-22_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\ncasper-client put-deploy --node-address http://localhost:11101/rpc/ \\\n--chain-name \"casper-net-1\" \\\n--payment-amount 500000000000 \\\n--secret-key ~/casper/casper-node/utils/nctl/assets/net-1/nodes/node-1/keys/secret_key.pem \\\n--session-path contract/target/wasm32-unknown-unknown/release/contract.wasm \\\n--session-arg \"collection_name:string='CEP-78-collection'\" \\\n--session-arg \"collection_symbol:string='CEP78'\" \\\n--session-arg \"total_token_supply:u64='100'\" \\\n--session-arg \"ownership_mode:u8='2'\" \\\n--session-arg \"nft_kind:u8='1'\" \\\n--session-arg \"nft_metadata_kind:u8='0'\" \\\n--session-arg \"json_schema:string='nft-schema'\" \\\n--session-arg \"identifier_mode:u8='0'\" \\\n--session-arg \"metadata_mutability:u8='0'\"\n```\n\n----------------------------------------\n\nTITLE: Getting State Root Hash using Casper Client\nDESCRIPTION: This command fetches the current state root hash from a specified Casper network node. The state root hash represents a snapshot of the blockchain's global state at a specific point in time and is required for querying the state. The node address of a peer on the target network (e.g., Testnet) must be provided.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/docs/resources/beginner/counter-testnet/walkthrough.md#2025-04-22_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\ncasper-client get-state-root-hash --node-address http://[NODE_IP]:7777\n```\n\n----------------------------------------\n\nTITLE: Defining Core Casper Data Structures in Rust\nDESCRIPTION: These Rust structs and enums define the core data types exchanged via the network, primarily through `GetRequest`/`GetResponse` and potentially gossiping. Structures like `Deploy`, `Block`, `BlockHeader`, `PublicKey`, `Signature`, `CLValue`, `FinalizedApprovals`, etc., represent fundamental concepts in the Casper blockchain. They detail the components of deploys (transactions), blocks, cryptographic keys, signatures, and execution engine values.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/versioned_docs/version-2.0.0/concepts/design/networking-protocol.md#2025-04-22_snippet_5\n\nLANGUAGE: rust\nCODE:\n```\n```rust\npub struct Deploy {\n    hash: DeployHash,\n    header: DeployHeader,\n    payment: ExecutableDeployItem,\n    session: ExecutableDeployItem,\n    approvals: BTreeSet<Approval>,\n}\n\nstruct DeployHeader {\n    account: PublicKey,\n    timestamp: u64,\n    ttl: u64,\n    gas_price: u64,\n    body_hash: Digest,\n    dependencies: Vec<DeployHash>,\n    chain_name: String,\n}\n\nenum PublicKey {\n    System,\n    Ed25519(Vec<u8>),\n    Secp256k1(Vec<u8>),\n}\n\nenum ExecutableDeployItem {\n    ModuleBytes {\n        module_bytes: Vec<u8>,\n        args: RuntimeArgs,\n    },\n    StoredContractByHash {\n        hash: [u8; 32],\n        entry_point: String,\n        args: RuntimeArgs,\n    },\n    StoredContractByName {\n        name: String,\n        entry_point: String,\n        args: RuntimeArgs,\n    },\n    StoredVersionedContractByHash {\n        hash: [u8; 32],\n        version: Option<u32>,\n        entry_point: String,\n        args: RuntimeArgs,\n    },\n    StoredVersionedContractByName {\n        name: String,\n        version: Option<u32>,\n        entry_point: String,\n        args: RuntimeArgs,\n    },\n    Transfer { args: RuntimeArgs },\n}\n\nstruct RuntimeArgs(Vec<NamedArg>);\n\nstruct NamedArg(String, CLValue);\n\nstruct CLValue(CLType, Vec<u8>);\n\nenum CLType {\n    Bool,\n    I32,\n    I64,\n    U8,\n    U32,\n    U64,\n    U128,\n    U256,\n    U512,\n    Unit,\n    String,\n    Key,\n    URef,\n    PublicKey,\n    Option(Box<CLType>),\n    List(Box<CLType>),\n    ByteArray(u32),\n    Result { ok: Box<CLType>, err: Box<CLType> },\n    Map { key: Box<CLType>, value: Box<CLType> },\n    Tuple1([Box<CLType>; 1]),\n    Tuple2([Box<CLType>; 2]),\n    Tuple3([Box<CLType>; 3]),\n    Any,\n}\n\nstruct Approval {\n    signer: PublicKey,\n    signature: Signature,\n}\n\nenum Signature {\n    System,\n    Ed25519(Vec<u8>),\n    Secp256k1(Vec<u8>),\n}\n\nstruct FinalizedApprovalsWithId {\n    id: DeployHash,\n    approvals: FinalizedApprovals,\n}\n\nstruct FinalizedApprovals(BTreeSet<Approval>);\n\nstruct Block {\n    hash: BlockHash,\n    header: BlockHeader,\n    body: BlockBody,\n}\n\nstruct BlockHash(Digest);\n\nstruct BlockHeader {\n    parent_hash: BlockHash,\n    state_root_hash: Digest,\n    body_hash: Digest,\n    random_bit: bool,\n    accumulated_seed: Digest,\n    era_end: Option<EraEnd>,\n    timestamp: u64,\n    era_id: u64,\n    height: u64,\n    protocol_version: ProtocolVersion,\n}\n\nstruct EraEnd {\n    era_report: EraReport,\n    next_era_validator_weights: BTreeMap<PublicKey, U512>,\n}\n\nstruct EraReport<VID> {\n    equivocators: Vec<PublicKey>,\n    rewards: BTreeMap<PublicKey, u64>,\n    inactive_validators: Vec<PublicKey>,\n}\n\nstruct ProtocolVersion {\n    major: u32,\n    minor: u32,\n    patch: u32,\n}\n\nstruct BlockBody {\n    proposer: PublicKey,\n    deploy_hashes: Vec<DeployHash>,\n    transfer_hashes: Vec<DeployHash>,\n}\n```\n```\n\n----------------------------------------\n\nTITLE: Calling Smart Contract Entry Points via Session Code - Rust\nDESCRIPTION: These two lines demonstrate how session code invokes methods within an existing contract. runtime::call_contract is used with the contract hash, entry point name, and supplied runtime args. The first line retrieves a counter's current value (as u32); the second increments the counter (return type is unit). These patterns enable composition of contract logic and chaining of contract or session logic in Rust.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/docs/developers/writing-onchain-code/writing-session-code.md#2025-04-22_snippet_5\n\nLANGUAGE: rust\nCODE:\n```\n    // Call the counter to get the current value.\n    let current_counter_value: u32 =\n        runtime::call_contract(contract_hash, COUNTER_GET, RuntimeArgs::new());\n\n    // Call the counter to increment the value.\n    let _: () = runtime::call_contract(contract_hash, COUNTER_INC, RuntimeArgs::new());\n```\n\n----------------------------------------\n\nTITLE: Delegating Stake via Casper Client CLI (JSON)\nDESCRIPTION: This CLI command facilitates delegation of CSPR tokens to a validator with the 'delegate' transaction, requiring a delegator and validator public key, stake amount, gas price, and authentication credentials. The template depends on the Casper client and proper key or address input. The command submits the delegation transaction, failing if account information or transaction parameters are incorrect.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/versioned_docs/version-2.0.0/concepts/transactions.md#2025-04-22_snippet_2\n\nLANGUAGE: json\nCODE:\n```\ncasper-client put-txn delegate\n/// The delegator's public key.\n  --delegator <STRING>\n/// The validator's public key.\n  --validator <STRING>\n/// The amount in motes to stake with this validator.\n  --transaction-amount <INTEGER>\n/// The maximum gas price that the user is willing to pay for this transaction.\n  --gas-price-tolerance <INTEGER>\n/// The path to the local secret key file, or the [`initiator address`](../developers/json-rpc/types_chain.md#initiatoraddr) sending the transaction.\n  <--secret-key <PATH>|--initiator-address <HEX STRING>>\n\n```\n\n----------------------------------------\n\nTITLE: Querying Global State in Casper Network\nDESCRIPTION: This command queries the global state of a Casper network at a specific point in time, identified by the state root hash. It allows for optional query paths to dive into specific data.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/versioned_docs/version-1.5.X/developers/cli/querying-global-state.md#2025-04-22_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ncasper-client query-global-state \\\n  --node-address [NODE_SERVER_ADDRESS] \\\n  --state-root-hash [STATE_ROOT_HASH] \\\n  --key [HASH_STRING] \\\n  -q \"[SESSION_NAME]/[SESSION_NAMED_KEY]\"\n```\n\n----------------------------------------\n\nTITLE: Delegating With Compiled Wasm - Casper Client - Bash\nDESCRIPTION: This generic Casper client command demonstrates how to delegate tokens using a custom-compiled `delegate.wasm` contract file. Like the system auction contract method, it requires correct network, key, and session arguments, but references the Wasm binary location for session execution. All parameters—validator, amount, delegator public keys—are required, and the result is a deploy hash for tracking status.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/versioned_docs/version-2.0.0/developers/cli/delegate.md#2025-04-22_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\ncasper-client put-deploy \\\n--node-address <HOST:PORT> \\\n--secret-key <PATH> \\\n--chain-name <CHAIN_NAME> \\\n--payment-amount <PAYMENT_AMOUNT_IN_MOTES> \\\n--session-path <PATH_TO_WASM>/delegate.wasm \\\n--session-arg \"validator:public_key='<HEX_ENCODED_VALIDATOR_PULIC_KEY>'\" \\\n--session-arg \"amount:u512='<AMOUNT_TO_DELEGATE>'\" \\\n--session-arg \"delegator:public_key='<HEX_ENCODED_DELEGATOR_PULIC_KEY>'\"\n```\n\n----------------------------------------\n\nTITLE: Defining Auction Metadata Schema using JSON Schema (JavaScript/JSON)\nDESCRIPTION: This snippet defines a JSON schema for auction metadata, intended to be recorded at each era in a Casper Network context. It enforces that the \"seigniorage_allocations\" field is an array composed of objects conforming to the \"SeigniorageAllocation\" schema and prohibits the inclusion of unspecified properties. Dependencies include understanding JSON Schema and referencing appropriate schema components, especially \"SeigniorageAllocation\". The main input is an object with the required array property, and the output is validated metadata objects; omission of the required field or use of additional properties will trigger validation errors.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/condor/jsonrpc-comp/rpc-2.0/schema/EraInfo.json.md#2025-04-22_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\\n    \\\"description\\\": \\\"Auction metadata.  Intended to be recorded at each era.\\\",\\n    \\\"type\\\": \\\"object\\\",\\n    \\\"required\\\": [\\n        \\\"seigniorage_allocations\\\"\\n    ],\\n    \\\"properties\\\": {\\n        \\\"seigniorage_allocations\\\": {\\n            \\\"type\\\": \\\"array\\\",\\n            \\\"items\\\": {\\n                \\\"$ref\\\": \\\"#/components/schemas/SeigniorageAllocation\\\"\\n            }\\n        }\\n    },\\n    \\\"additionalProperties\\\": false\\n} \n```\n\n----------------------------------------\n\nTITLE: Example Response for state_get_dictionary_item RPC Method (JSON)\nDESCRIPTION: Shows an example JSON response returned by the `state_get_dictionary_item` RPC method. The response includes the API version, the specific dictionary key derived from the identifier, the retrieved stored value (represented as a CLValue with type, bytes, and parsed value), and the Merkle proof for state verification.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/condor/jsonrpc-comp/rpc-1.5/schema.json.md#2025-04-22_snippet_6\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"api_version\": \"1.5.6\",\n  \"dictionary_key\": \"dictionary-67518854aa916c97d4e53df8570c8217ccc259da2721b692102d76acd0ee8d1f\",\n  \"stored_value\": {\n    \"CLValue\": {\n      \"cl_type\": \"U64\",\n      \"bytes\": \"0100000000000000\",\n      \"parsed\": 1\n    }\n  },\n  \"merkle_proof\": \"01000000006ef2e0949ac76e55812421f755abe129b6244fe7168b77f47a72536147614625016ef2e0949ac76e55812421f755abe129b6244fe7168b77f47a72536147614625000000003529cde5c621f857f75f3810611eb4af3f998caaa9d4a3413cf799f99c67db0307010000006ef2e0949ac76e55812421f755abe129b6244fe7168b77f47a7253614761462501010102000000006e06000000000074769d28aac597a36a03a932d4b43e4f10bf0403ee5c41dd035102553f5773631200b9e173e8f05361b681513c14e25e3138639eb03232581db7557c9e8dbbc83ce94500226a9a7fe4f2b7b88d5103a4fc7400f02bf89c860c9ccdd56951a2afe9be0e0267006d820fb5676eb2960e15722f7725f3f8f41030078f8b2e44bf0dc03f71b176d6e800dc5ae9805068c5be6da1a90b2528ee85db0609cc0fb4bd60bbd559f497a98b67f500e1e3e846592f4918234647fca39830b7e1e6ad6f5b7a99b39af823d82ba1873d000003000000010186ff500f287e9b53f823ae1582b1fa429dfede28015125fd233a31ca04d5012002015cc42669a55467a1fdf49750772bfc1aed59b9b085558eb81510e9b015a7c83b0301e3cf4a34b1db6bfa58808b686cb8fe21ebe0c1bcbcee522649d2b135fe510fe3\"\n}\n```\n\n----------------------------------------\n\nTITLE: Rust SDK Configuration\nDESCRIPTION: Configuration steps for setting up Casper client in Rust projects including dependencies and imports\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/docs/developers/dapps/sdk/client-library-usage.md#2025-04-22_snippet_1\n\nLANGUAGE: toml\nCODE:\n```\n[dependencies]\ncasper-client=\"1.5.1\"\n```\n\nLANGUAGE: rust\nCODE:\n```\nextern crate casper_client;\n```\n\nLANGUAGE: rust\nCODE:\n```\nuse casper_client::transfer;\nuse casper_client::put_deploy;\n//...\n```\n\n----------------------------------------\n\nTITLE: Configuring Deploy Signing and Account Update Restrictions in JSON\nDESCRIPTION: This JSON showcases a configuration scenario focused on securing account updates by configuring a primary key with higher key management weight. The associated keys together meet deployment thresholds but lack the necessary weight to perform account updates independently, providing security measure for the account, especially in case of a compromised primary key.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/versioned_docs/version-1.5.X/resources/advanced/multi-sig/other-scenarios.md#2025-04-22_snippet_3\n\nLANGUAGE: json\nCODE:\n```\n{\n   \"account_address\": \"account-hash-a1…\",\n   \"action_thresholds\": {\n      \"deployment\": 2,\n      \"key_management\": 3\n   },\n   \"associated_keys\": [\n      {\n         \"account_address\": \"account-hash-a1…\", // primary key\n         \"weight\": 3\n      },\n      {\n         \"account_address\": \"account-hash-b2…\", // associated key\n         \"weight\": 1\n      },\n      {\n         \"account_address\": \"account-hash-c3…\", // associated key\n         \"weight\": 1\n      }\n   ],\n   \"main_purse\": \"uref-1234…\",\n   \"named_keys\": []\n}\n```\n\n----------------------------------------\n\nTITLE: Querying Contract State in Casper Network\nDESCRIPTION: This command queries the global state for a specific contract using its hash. It retrieves detailed information about the contract, including its package hash and entry points.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/versioned_docs/version-1.5.X/developers/cli/querying-global-state.md#2025-04-22_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\ncasper-client query-global-state \\\n  --node-address http://localhost:11101  \\\n  --state-root-hash fa968344a2000282686303f1664c474465f9a028f32ec4f51791d9fa64c0bcd7 \\\n  --key hash-22228188b85b6ee4a4a41c7e98225c3918139e9a5eb4b865711f2e409d85e88e\n```\n\n----------------------------------------\n\nTITLE: Querying Balance using JSON-RPC\nDESCRIPTION: This request shows how to use the `query_balance` method via JSON-RPC to fetch the balance of a purse. Parameters include a `PurseIdentifier` and a `StateIdentifier`. The default state is used if no identifier is provided.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/versioned_docs/version-2.0.0/developers/json-rpc/json-rpc-informational.md#2025-04-22_snippet_14\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"id\": 1,\n  \"jsonrpc\": \"2.0\",\n  \"method\": \"query_balance\",\n  \"params\": [\n      {\n        \"name\": \"state_identifier\",\n        \"value\": {\n          \"BlockHash\": \"13c2d7a68ecdd4b74bf4393c88915c836c863fc4bf11d7f2bd930a1bbccacdcb\"\n        }\n    },\n      {\n        \"name\": \"purse_identifier\",\n        \"value\": {\n          \"main_purse_under_account_hash\": \"account-hash-0909090909090909090909090909090909090909090909090909090909090909\"\n        }\n      }\n    ]\n}\n```\n\n----------------------------------------\n\nTITLE: Querying a Deploy via Casper Go SDK (Go)\nDESCRIPTION: Demonstrates how to retrieve a deploy by its hash from the Casper network using the Go SDK. This code initializes an RPC handler and client, sends a get deploy request, and prints the deploy hash if found. Requires the \\\\\"github.com/make-software/casper-go-sdk/casper\\\\\" package, and expects a valid RPC node endpoint and deploy hash as input. The output is printed to stdout, and errors are silently suppressed.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/versioned_docs/version-1.5.X/developers/dapps/sdk/go-sdk.md#2025-04-22_snippet_0\n\nLANGUAGE: go\nCODE:\n```\npackage main\\n\\nimport (\\n    \\\"context\\\"\\n    \\\"fmt\\\"\\n    \\\"net/http\\\"\\n\\n    \\\"github.com/make-software/casper-go-sdk/casper\\\"\\n)\\n\\nfunc main() {\\n    handler := casper.NewRPCHandler(\\\"https://<Node Address and Port>/rpc\\\", http.DefaultClient)\\n    client := casper.NewRPCClient(handler)\\n    deployHash := \\\"62972eddc6fdc03b7ec53e52f7da7e24f01add9a74d68e3e21d924051c43f126\\\"\\n    deploy, err := client.GetDeploy(context.Background(), deployHash)\\n    if err != nil {\\n        return\\n    }\\n    fmt.Println(deploy.Deploy.Hash)\\n}\n```\n\n----------------------------------------\n\nTITLE: Installing Zstandard on Debian/Ubuntu using apt\nDESCRIPTION: Installs the Zstandard compression tool using the apt package manager on Debian-based Linux distributions like Ubuntu. Requires root privileges (`sudo`).\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/docs/operators/maintenance/archiving-and-restoring.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nsudo apt install zstd\n```\n\n----------------------------------------\n\nTITLE: Transferring Tokens to a User Account in Casper Network\nDESCRIPTION: Command to transfer tokens from an administrator account to a user (Alice) in a private Casper network. This funds the user's main purse with the specified amount.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/versioned_docs/version-2.0.0/operators/setup-network/create-private.md#2025-04-22_snippet_14\n\nLANGUAGE: sh\nCODE:\n```\ncasper-client \\\n  transfer \\\n  -n $NODE_ADDR \\\n  --chain-name $CHAIN_NAME \\\n  --secret-key admin/secret_key.pem \\\n  --session-account=$(<admin/public_key_hex) \\\n  --target-account=$(<alice/public_key_hex) \\\n  --amount=100000000000 \\\n  --payment-amount=3000000000 \\\n  --transfer-id=123\n```\n\n----------------------------------------\n\nTITLE: Sending a Multi-Signature Deploy to the Casper Network\nDESCRIPTION: Command to send the fully signed multi-signature deploy to the Casper network. The deploy contains signatures from both associated keys, meeting the deployment threshold requirements.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/versioned_docs/version-1.5.X/resources/advanced/multi-sig/multi-sig-workflow.md#2025-04-22_snippet_17\n\nLANGUAGE: bash\nCODE:\n```\ncasper-client send-deploy --node-address https://node.testnet.casper.network -i hello_world_two_signatures\n```\n\n----------------------------------------\n\nTITLE: Listening to Event Stream in Python\nDESCRIPTION: Sets up an event listener using the Casper Python SDK to consume the event stream from a Casper node.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/docs/developers/dapps/monitor-and-consume-events.md#2025-04-22_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nfrom pycspr import NodeClient, NodeConnection, NodeEventType\n\ndef eventHandler(event):\n    print(event)\n\nclient = NodeClient(NodeConnection(host = \"NODE_ADDRESS\", port_rpc = \"PORT\"))\nclient.get_events(eventHandler, NodeEventType.EVENT_NAME)\n```\n\n----------------------------------------\n\nTITLE: Node Clean Up Before Installation - Bash\nDESCRIPTION: This bash sequence completely stops and removes any existing Casper node components and associated state files from the system. It includes service shutdown, package removal via apt, and clearing directories and files related to the node. The commands assume sudo privileges and system paths consistent with Casper Network node defaults. Errors from removing non-existent packages or files are not critical and can be ignored. This step ensures a clean environment for fresh node installation.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/docs/operators/setup/install-node.md#2025-04-22_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nsudo /etc/casper/node_util.py stop\\nsudo apt remove -y casper-client\\nsudo apt remove -y casper-node\\nsudo apt remove -y casper-node-launcher\\nsudo rm /etc/casper/casper-node-launcher-state.toml\\nsudo rm -rf /etc/casper/1_*\\nsudo rm -rf /etc/casper/2_*\\nsudo rm -rf /var/lib/casper/*\n```\n\n----------------------------------------\n\nTITLE: Executing Undelegate Transaction in Casper Network\nDESCRIPTION: This command allows a user to undelegate their previously staked CSPR from a validator. It requires the delegator's public key, validator's public key, undelegation amount, gas price tolerance, and either a secret key or initiator address.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/docs/concepts/transactions.md#2025-04-22_snippet_3\n\nLANGUAGE: json\nCODE:\n```\ncasper-client put-txn undelegate\n/// The delegator's public key.\n  --delegator <STRING>\n/// The validator's public key.\n  --validator <STRING>\n/// The amount in motes to undelegate from this validator.\n  --transaction-amount <INTEGER>\n/// The maximum gas price that the user is willing to pay for this transaction. \n  --gas-price-tolerance <INTEGER>\n/// The path to the local secret key file, or the [`initiator address`](../developers/json-rpc/types_chain.md#initiatoraddr) sending the transaction.\n  <--secret-key <PATH>|--initiator-address <HEX STRING>>\n```\n\n----------------------------------------\n\nTITLE: Undelegating via Compiled Wasm Contract - Casper Client - Bash\nDESCRIPTION: This Bash snippet shows how to initiate token undelegation by deploying the undelegate.wasm contract using the casper-client CLI. Required dependencies include the compiled undelegate.wasm from the casper-node contracts, the casper-client tool, a valid node address, secret key, and network configuration. Key parameters are the path to undelegate.wasm, payment amount, and public keys for both delegator and validator. This method is generally more expensive due to contract deployment costs, and the payment amount may need to be adjusted per network chainspec.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/versioned_docs/version-2.0.0/developers/cli/undelegate.md#2025-04-22_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\ncasper-client put-deploy \\\n--node-address <HOST:PORT> \\\n--secret-key <PATH> \\\n--chain-name <CHAIN_NAME> \\\n--payment-amount <PAYMENT_AMOUNT_IN_MOTES> \\\n--session-path <PATH_TO_WASM>/undelegate.wasm \\\n--session-arg \"validator:public_key='<HEX_ENCODED_VALIDATOR_PULIC_KEY>'\" \\\n--session-arg \"amount:u512='<AMOUNT_TO_UNDELEGATE>'\" \\\n--session-arg \"delegator:public_key='<HEX_ENCODED_DELEGATOR_PULIC_KEY>'\"\n```\n\n----------------------------------------\n\nTITLE: Querying Global State in Bash\nDESCRIPTION: Command to query the global state of the Casper network using the account hash and state root hash. This returns information about the account's state on the blockchain.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/versioned_docs/version-1.5.X/resources/beginner/counter/walkthrough.md#2025-04-22_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\ncasper-client query-global-state \\\n    --node-address http://localhost:11101 \\\n    --state-root-hash [STATE_ROOT_HASH] \\\n    --key [ACCOUNT_HASH]\n```\n\n----------------------------------------\n\nTITLE: Installing the Casper SDK Client Libraries - JavaScript - bash\nDESCRIPTION: Installs the casper-js-sdk package in JavaScript projects using either npm or yarn package manager. This is a prerequisite to using the Casper SDK functionalities in JS or Node.js environments. Input: command-line interface. Output: added casper-js-sdk dependency in package.json.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/versioned_docs/version-2.0.0/developers/dapps/sdk/client-library-usage.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm install casper-js-sdk\n```\n\nLANGUAGE: bash\nCODE:\n```\nyarn install casper-js-sdk\n```\n\n----------------------------------------\n\nTITLE: Deploying Compiled Casper Smart Contract to Network - Bash\nDESCRIPTION: Installs the compiled counter contract's Wasm binary onto a running local Casper chain using casper-client put-deploy. Requires the user's secret key path, payment amount, and path to the compiled Wasm file. Produces a deploy hash for tracking the deployment status. Key parameters: --node-address (Casper node), --chain-name (network name), --secret-key (key file), --payment-amount (motes), --session-path (Wasm contract path).\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/docs/resources/beginner/counter/walkthrough.md#2025-04-22_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\ncasper-client put-deploy \\\n    --node-address http://localhost:11101 \\\n    --chain-name casper-net-1 \\\n    --secret-key [PATH_TO_YOUR_KEY]/secret_key.pem \\\n    --payment-amount [PAYMENT_AMOUNT_IN_MOTES] \\\n    --session-path ./contract-v1/target/wasm32-unknown-unknown/release/counter-v1.wasm\n```\n\n----------------------------------------\n\nTITLE: Cloning and Preparing NFT Contract Repository\nDESCRIPTION: Commands to clone the CEP-78 NFT contract repository from GitHub and prepare the development environment by adding the required Wasm target.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/versioned_docs/version-1.5.X/resources/tokens/cep78/using-casper-client/full-installation-tutorial.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ngit clone https://github.com/casper-ecosystem/cep-78-enhanced-nft/ && cd cep-78-enhanced-nft\n```\n\nLANGUAGE: bash\nCODE:\n```\nmake prepare\n```\n\n----------------------------------------\n\nTITLE: Sample Response: Getting Entity Details (JSON)\nDESCRIPTION: This JSON sample shows the output of casper-client get-entity for a smart contract. It details protocol version, package/byte code hashes, purse, keys, version thresholds, named keys, and contract entry points. Also includes a Merkle proof of the state.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/docs/developers/cli/querying-global-state.md#2025-04-22_snippet_14\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"jsonrpc\": \"2.0\",\n  \"id\": -530362264865678930,\n  \"result\": {\n    \"api_version\": \"2.0.0\",\n    \"entity\": {\n      \"AddressableEntity\": {\n        \"entity\": {\n          \"protocol_version\": \"2.0.0\",\n          \"entity_kind\": {\n            \"SmartContract\": \"VmCasperV1\"\n          },\n          \"package_hash\": \"package-50d487af45f8cec533c6813801a7630ff97e5ee3964daf7915d5451b4812ac94\",\n          \"byte_code_hash\": \"byte-code-0577a7c92fd20e1af76aa9e257631cb240e8187191bba2025e88663d0288e936\",\n          \"main_purse\": \"uref-2cb7e46fcde2c4d395a6850bb3b7edbb0b4db6018643e535fa0dfdeeb006d6ef-007\",\n          \"associated_keys\": [\n            {\n              \"account_hash\": \"account-hash-6a56c4eee172043975aea72221eaf09f3c3a24f09a379935e44c9979f1ae9463\",\n              \"weight\": 1\n            }\n          ],\n          \"action_thresholds\": {\n            \"deployment\": 1,\n            \"upgrade_management\": 1,\n            \"key_management\": 1\n          },\n          \"message_topics\": []\n        },\n        \"named_keys\": [\n          {\n            \"name\": \"count\",\n            \"key\": \"uref-65f3f583bf1ac01b6c90d9c9478bd239c09e46f48fb693918726eaab03631407-007\"\n          }\n        ],\n        \"entry_points\": [\n          {\n            \"V1CasperVm\": {\n              \"name\": \"counter_get\",\n              \"args\": [],\n              \"ret\": \"I32\",\n              \"access\": \"Public\",\n              \"entry_point_type\": \"Called\",\n              \"entry_point_payment\": \"Caller\"\n            }\n          },\n          {\n            \"V1CasperVm\": {\n              \"name\": \"counter_inc\",\n              \"args\": [],\n              \"ret\": \"Unit\",\n              \"access\": \"Public\",\n              \"entry_point_type\": \"Called\",\n              \"entry_point_payment\": \"Caller\"\n            }\n          }\n        ]\n      }\n    },\n    \"merkle_proof\": \"[1508 hex chars]\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Stopping and Cleaning NCTL Network\nDESCRIPTION: Commands to stop the NCTL network and clean up the environment.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/versioned_docs/version-1.5.X/developers/dapps/setup-nctl.md#2025-04-22_snippet_13\n\nLANGUAGE: bash\nCODE:\n```\nnctl-stop\nnctl-clean\n```\n\n----------------------------------------\n\nTITLE: Configuring Trusted Hash for Node\nDESCRIPTION: Commands to set up the trusted hash configuration for connecting to the Casper network.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/versioned_docs/version-2.0.0/operators/setup/install-node.md#2025-04-22_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\nNODE_ADDR=https://node.mainnet.casper.network\nPROTOCOL=1_5_8\nsudo sed -i \"/trusted_hash =/c\\trusted_hash = '$(casper-client get-block --node-address $NODE_ADDR | jq -r .result.block.hash | tr -d '\\n')'\" /etc/casper/$PROTOCOL/config.toml\n```\n\n----------------------------------------\n\nTITLE: Declaring a Static Associated Account Name - Rust\nDESCRIPTION: This constant specifies the string key for an associated deployment account. Used later for retrieving or referencing account data within the contract, it supports multi-signature and access-management functionalities. The Rust static string simplifies parameter naming and avoids hardcoding in multiple locations.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/docs/developers/writing-onchain-code/writing-session-code.md#2025-04-22_snippet_3\n\nLANGUAGE: rust\nCODE:\n```\nconst ASSOCIATED_ACCOUNT: &str = \"deployment-account\";\n```\n\n----------------------------------------\n\nTITLE: Retrieving Account Hash for Primary Key\nDESCRIPTION: The purpose of this snippet is to retrieve the account hash of a primary key using the Casper CLI client. The retrieved hash can be used in subsequent operations such as updating key weights or thresholds.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/versioned_docs/version-1.5.X/resources/advanced/multi-sig/multi-sig-workflow.md#2025-04-22_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\ncasper-client account-address --public-key <INSERT_PUBLIC_KEY_HEX>\n```\n\n----------------------------------------\n\nTITLE: Response Structure for state_get_account_info in Casper Network\nDESCRIPTION: This example shows the response structure for the state_get_account_info method. It includes account details such as account hash, action thresholds, associated keys, main purse, and named keys along with a merkle proof.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/versioned_docs/version-1.5.X/developers/json-rpc/json-rpc-informational.md#2025-04-22_snippet_17\n\nLANGUAGE: bash\nCODE:\n```\n{\n  \"id\": 1,\n  \"jsonrpc\": \"2.0\",\n  \"result\": {\n    \"account\": {\n      \"account_hash\": \"account-hash-e94daaff79c2ab8d9c31d9c3058d7d0a0dd31204a5638dc1451fa67b2e3fb88c\",\n      \"action_thresholds\": {\n        \"deployment\": 1,\n        \"key_management\": 1\n      },\n      \"associated_keys\": [\n        {\n          \"account_hash\": \"account-hash-e94daaff79c2ab8d9c31d9c3058d7d0a0dd31204a5638dc1451fa67b2e3fb88c\",\n          \"weight\": 1\n        }\n      ],\n      \"main_purse\": \"uref-09480c3248ef76b603d386f3f4f8a5f87f597d4eaffd475433f861af187ab5db-007\",\n      \"named_keys\": []\n    },\n    \"api_version\": \"1.4.13\",\n    \"merkle_proof\": \"01000000006ef2e0949ac76e55812421f755abe129b6244fe7168b77f47a72536147614625016ef2e0949ac76e55812421f755abe129b6244fe7168b77f47a72536147614625000000003529cde5c621f857f75f3810611eb4af3f998caaa9d4a3413cf799f99c67db0307010000006ef2e0949ac76e55812421f755abe129b6244fe7168b77f47a7253614761462501010102000000006e06000000000074769d28aac597a36a03a932d4b43e4f10bf0403ee5c41dd035102553f5773631200b9e173e8f05361b681513c14e25e3138639eb03232581db7557c9e8dbbc83ce94500226a9a7fe4f2b7b88d5103a4fc7400f02bf89c860c9ccdd56951a2afe9be0e0267006d820fb5676eb2960e15722f7725f3f8f41030078f8b2e44bf0dc03f71b176d6e800dc5ae9805068c5be6da1a90b2528ee85db0609cc0fb4bd60bbd559f497a98b67f500e1e3e846592f4918234647fca39830b7e1e6ad6f5b7a99b39af823d82ba1873d000003000000010186ff500f287e9b53f823ae1582b1fa429dfede28015125fd233a31ca04d5012002015cc42669a55467a1fdf49750772bfc1aed59b9b085558eb81510e9b015a7c83b0301e3cf4a34b1db6bfa58808b686cb8fe21ebe0c1bcbcee522649d2b135fe510fe3\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: ExecutionResult Serialization Format\nDESCRIPTION: Defines the serialization format for execution results, with variants for Success (1) and Failure (0), including effects, transfers, costs and error messages.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/versioned_docs/version-2.0.0/concepts/serialization/types.md#2025-04-22_snippet_23\n\nLANGUAGE: Rust\nCODE:\n```\nenum ExecutionResultV2 {\n    Success {\n        effects: Effects,\n        transfers: Vec<Transfer>,\n        cost: U512\n    },\n    Failure {\n        effects: Effects,\n        transfers: Vec<Transfer>,\n        cost: U512,\n        error_message: String\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Example JSON Response Value for info_get_peers RPC\nDESCRIPTION: This JSON object demonstrates the structure of the 'value' field within an example response for the 'info_get_peers' RPC method on a Casper node. It contains the API version and a list of connected peers, each with a node ID and network address.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/condor/jsonrpc-comp/rpc-2.0/schema.json.md#2025-04-22_snippet_14\n\nLANGUAGE: json\nCODE:\n```\n            \"value\": {\n              \"api_version\": \"2.0.0\",\n              \"peers\": [\n                {\n                  \"node_id\": \"tls:0101..0101\",\n                  \"address\": \"127.0.0.1:54321\"\n                }\n              ]\n            }\n```\n\n----------------------------------------\n\nTITLE: Starting Casper Node\nDESCRIPTION: System command to start the casper-node-launcher service using systemctl.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/versioned_docs/version-2.0.0/operators/setup/joining.md#2025-04-22_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nsudo systemctl start casper-node-launcher\n```\n\n----------------------------------------\n\nTITLE: Defining Transaction Hash\nDESCRIPTION: Template for a transaction or deploy hash, detailing either a 'Deploy' or 'Version1' transaction hash formats.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/condor/jsonrpc-comp/rpc-2.0/schema/components.json.md#2025-04-22_snippet_25\n\nLANGUAGE: JSON\nCODE:\n```\n{\n    \"description\": \"A versioned wrapper for a transaction hash or deploy hash.\",\n    \"oneOf\": [\n        {\n            \"description\": \"A deploy hash.\",\n            \"type\": \"object\",\n            \"required\": [\n                \"Deploy\"\n            ],\n            \"properties\": {\n                \"Deploy\": {\n                    \"$ref\": \"#/components/schemas/DeployHash\"\n                }\n            },\n            \"additionalProperties\": false\n        },\n        {\n            \"description\": \"A version 1 transaction hash.\",\n            \"type\": \"object\",\n            \"required\": [\n                \"Version1\"\n            ],\n            \"properties\": {\n                \"Version1\": {\n                    \"$ref\": \"#/components/schemas/TransactionV1Hash\"\n                }\n            },\n            \"additionalProperties\": false\n        }\n    ]\n}\n```\n\n----------------------------------------\n\nTITLE: Cloning and Building Casper Counter Contract\nDESCRIPTION: Commands to clone the Casper counter contract repository, prepare dependencies, and build the contract and tests.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/versioned_docs/version-2.0.0/resources/quick-start.md#2025-04-22_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\ngit clone https://github.com/casper-ecosystem/counter\ncd counter\nmake prepare\nmake test\n```\n\n----------------------------------------\n\nTITLE: Example JSON Response for State Root Hash\nDESCRIPTION: Illustrates the typical JSON response format returned by the `casper-client get-state-root-hash` command. The response includes the JSON-RPC version, request ID, and a result object containing the API version and the retrieved `state_root_hash`.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/docs/resources/beginner/cep18.md#2025-04-22_snippet_4\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"id\": 2950480729544096556,\n  \"jsonrpc\": \"2.0\",\n  \"result\": {\n    \"api_version\": \"1.4.15\",\n    \"state_root_hash\": \"7706d906fce25dcdadb2a9453f5243a6c72c4444e6c826cf2941157333a48705\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Era Info Query Method via JSON RPC Schema - JSON\nDESCRIPTION: Defines the schema for the chain_get_era_info_by_switch_block RPC method, specifying parameters, result structure, and a sample invocation. This schema requires a BlockIdentifier parameter (optional), and the response includes an api_version and an era_summary object (or null). Sample values demonstrate how the method is to be called and the expected result structure, helping implementers build requests and parse responses. Dependencies include knowledge of Casper network block structure and relevant key formats (public key and hash values).\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/condor/jsonrpc-comp/rpc-2.0/chain_get_era_info_by_switch_block.json.md#2025-04-22_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"name\": \"chain_get_era_info_by_switch_block\",\n  \"summary\": \"returns an EraInfo from the network\",\n  \"params\": [\n    {\n      \"name\": \"block_identifier\",\n      \"schema\": {\n        \"description\": \"The block identifier.\",\n        \"$ref\": \"#/components/schemas/BlockIdentifier\"\n      },\n      \"required\": false\n    }\n  ],\n  \"result\": {\n    \"name\": \"chain_get_era_info_by_switch_block_result\",\n    \"schema\": {\n      \"description\": \"Result for \\\"chain_get_era_info\\\" RPC response.\",\n      \"type\": \"object\",\n      \"required\": [\n        \"api_version\"\n      ],\n      \"properties\": {\n        \"api_version\": {\n          \"description\": \"The RPC API version.\",\n          \"type\": \"string\"\n        },\n        \"era_summary\": {\n          \"description\": \"The era summary.\",\n          \"anyOf\": [\n            {\n              \"$ref\": \"#/components/schemas/EraSummary\"\n            },\n            {\n              \"type\": \"null\"\n            }\n          ]\n        }\n      },\n      \"additionalProperties\": false\n    }\n  },\n  \"examples\": [\n    {\n      \"name\": \"chain_get_era_info_by_switch_block_example\",\n      \"params\": [\n        {\n          \"name\": \"block_identifier\",\n          \"value\": {\n            \"Hash\": \"0744fcb72af43c5cc372039bc5a8bfee48808a9ce414acc0d6338a628c20eb42\"\n          }\n        }\n      ],\n      \"result\": {\n        \"name\": \"chain_get_era_info_by_switch_block_example_result\",\n        \"value\": {\n          \"api_version\": \"2.0.0\",\n          \"era_summary\": {\n            \"block_hash\": \"0744fcb72af43c5cc372039bc5a8bfee48808a9ce414acc0d6338a628c20eb42\",\n            \"era_id\": 42,\n            \"stored_value\": {\n              \"EraInfo\": {\n                \"seigniorage_allocations\": [\n                  {\n                    \"Delegator\": {\n                      \"delegator_public_key\": \"01e1b46a25baa8a5c28beb3c9cfb79b572effa04076f00befa57eb70b016153f18\",\n                      \"validator_public_key\": \"012a1732addc639ea43a89e25d3ad912e40232156dcaa4b9edfc709f43d2fb0876\",\n                      \"amount\": \"1000\"\n                    }\n                  },\n                  {\n                    \"Validator\": {\n                      \"validator_public_key\": \"012a1732addc639ea43a89e25d3ad912e40232156dcaa4b9edfc709f43d2fb0876\",\n                      \"amount\": \"2000\"\n                    }\n                  }\n                ]\n              }\n            },\n            \"state_root_hash\": \"0808080808080808080808080808080808080808080808080808080808080808\",\n            \"merkle_proof\": \"01000000006ef2e0949ac76e55812421f755abe129b6244fe7168b77f47a72536147614625016ef2e0949ac76e55812421f755abe129b6244fe7168b77f47a72536147614625000000003529cde5c621f857f75f3810611eb4af3f998caaa9d4a3413cf799f99c67db0307010000006ef2e0949ac76e55812421f755abe129b6244fe7168b77f47a7253614761462501010102000000006e06000000000074769d28aac597a36a03a932d4b43e4f10bf0403ee5c41dd035102553f5773631200b9e173e8f05361b681513c14e25e3138639eb03232581db7557c9e8dbbc83ce94500226a9a7fe4f2b7b88d5103a4fc7400f02bf89c860c9ccdd56951a2afe9be0e0267006d820fb5676eb2960e15722f7725f3f8f41030078f8b2e44bf0dc03f71b176d6e800dc5ae9805068c5be6da1a90b2528ee85db0609cc0fb4bd60bbd559f497a98b67f500e1e3e846592f4918234647fca39830b7e1e6ad6f5b7a99b39af823d82ba1873d000003000000010186ff500f287e9b53f823ae1582b1fa429dfede28015125fd233a31ca04d5012002015cc42669a55467a1fdf49750772bfc1aed59b9b085558eb81510e9b015a7c83b0301e3cf4a34b1db6bfa58808b686cb8fe21ebe0c1bcbcee522649d2b135fe510fe3\"\n          }\n        }\n      }\n    }\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Entity Hash and Approval Types in JSON Schema\nDESCRIPTION: JSON schema definitions for Casper Network's entity addressing and approval systems. Includes AddressableEntityHash, PackageHash, and Approval structures that are used for transaction signing.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/condor/jsonrpc-comp/rpc-2.0/schema/components.json.md#2025-04-22_snippet_12\n\nLANGUAGE: JSON\nCODE:\n```\n\"AddressableEntityHash\": {\n    \"description\": \"The hex-encoded address of the addressable entity.\",\n    \"type\": \"string\"\n},\n\"PackageHash\": {\n    \"description\": \"The hex-encoded address of the Package.\",\n    \"type\": \"string\"\n},\n\"Approval\": {\n    \"description\": \"A struct containing a signature of a transaction hash and the public key of the signer.\",\n    \"type\": \"object\",\n    \"required\": [\n        \"signature\",\n        \"signer\"\n    ],\n    \"properties\": {\n        \"signer\": {\n            \"$ref\": \"#/components/schemas/PublicKey\"\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Retrieving Account Balance using Casper .NET SDK\nDESCRIPTION: C# code example demonstrating how to connect to a Casper testnet node and retrieve an account's main purse balance using the SDK\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/docs/developers/dapps/sdk/csharp-sdk.md#2025-04-22_snippet_3\n\nLANGUAGE: csharp\nCODE:\n```\nusing System;\nusing System.Threading.Tasks;\nusing Casper.Network.SDK;\nusing Casper.Network.SDK.JsonRpc;\nusing Casper.Network.SDK.Types;\n\nnamespace Casper.NET.SDK.Examples\n{\n    public class GetAccountBalance\n    {\n        public static async Task Main(string[] args)\n        {\n            string nodeAddress = \"http://testnet-node.make.services:7777\";\n\n            var hex = \"0203914289b334f57366541099a52156b149436fdb0422b3c48fe4115d0578abf690\";\n            var publicKey = PublicKey.FromHexString(hex);\n\n            try\n            {\n                var casperSdk = new NetCasperClient(nodeAddress);\n\n                // Get the balance using the account public key\n                //\n                var rpcResponse = await casperSdk.GetAccountBalance(publicKey);\n                Console.WriteLine(\"Public Key Balance: \" + rpcResponse.Parse().BalanceValue);\n            }\n            catch (RpcClientException e)\n            {\n                Console.WriteLine(\"ERROR:\\n\" + e.RpcError.Message);\n            }\n            catch (Exception e)\n            {\n                Console.WriteLine(e);\n            }\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Example Query and Response for Account Info Endpoint - JSON\nDESCRIPTION: This snippet demonstrates an example call to the 'state_get_account_info' endpoint, supplying an 'account_identifier' as a public key and a 'block_identifier' as a hash, and the corresponding result structure containing the API version, full account details, and Merkle proof. The example illustrates usage of the endpoint and can be utilized in testing, documentation, or as a reference in client SDKs. All parameter/value types and structure must match the described endpoint specification and are only valid if the provided keys and hashes exist on the queried Casper network.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/condor/jsonrpc-comp/rpc-1.5/state_get_account_info.json.md#2025-04-22_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"name\": \"state_get_account_info_example\",\n  \"params\": [\n    {\n      \"name\": \"account_identifier\",\n      \"value\": \"013b6a27bcceb6a42d62a3a8d02a6f0d73653215771de243a63ac048a18b59da29\"\n    },\n    {\n      \"name\": \"block_identifier\",\n      \"value\": {\n        \"Hash\": \"13c2d7a68ecdd4b74bf4393c88915c836c863fc4bf11d7f2bd930a1bbccacdcb\"\n      }\n    }\n  ],\n  \"result\": {\n    \"name\": \"state_get_account_info_example_result\",\n    \"value\": {\n      \"api_version\": \"1.5.6\",\n      \"account\": {\n        \"account_hash\": \"account-hash-e94daaff79c2ab8d9c31d9c3058d7d0a0dd31204a5638dc1451fa67b2e3fb88c\",\n        \"named_keys\": [],\n        \"main_purse\": \"uref-09480c3248ef76b603d386f3f4f8a5f87f597d4eaffd475433f861af187ab5db-007\",\n        \"associated_keys\": [\n          {\n            \"account_hash\": \"account-hash-e94daaff79c2ab8d9c31d9c3058d7d0a0dd31204a5638dc1451fa67b2e3fb88c\",\n            \"weight\": 1\n          }\n        ],\n        \"action_thresholds\": {\n          \"deployment\": 1,\n          \"key_management\": 1\n        }\n      },\n      \"merkle_proof\": \"01000000006ef2e0949ac76e55812421f755abe129b6244fe7168b77f47a72536147614625016ef2e0949ac76e55812421f755abe129b6244fe7168b77f47a72536147614625000000003529cde5c621f857f75f3810611eb4af3f998caaa9d4a3413cf799f99c67db0307010000006ef2e0949ac76e55812421f755abe129b6244fe7168b77f47a7253614761462501010102000000006e06000000000074769d28aac597a36a03a932d4b43e4f10bf0403ee5c41dd035102553f5773631200b9e173e8f05361b681513c14e25e3138639eb03232581db7557c9e8dbbc83ce94500226a9a7fe4f2b7b88d5103a4fc7400f02bf89c860c9ccdd56951a2afe9be0e0267006d820fb5676eb2960e15722f7725f3f8f41030078f8b2e44bf0dc03f71b176d6e800dc5ae9805068c5be6da1a90b2528ee85db0609cc0fb4bd60bbd559f497a98b67f500e1e3e846592f4918234647fca39830b7e1e6ad6f5b7a99b39af823d82ba1873d000003000000010186ff500f287e9b53f823ae1582b1fa429dfede28015125fd233a31ca04d5012002015cc42669a55467a1fdf49750772bfc1aed59b9b085558eb81510e9b015a7c83b0301e3cf4a34b1db6bfa58808b686cb8fe21ebe0c1bcbcee522649d2b135fe510fe3\"\n    }\n  }\n}\n\n```\n\n----------------------------------------\n\nTITLE: Getting Updated State Root Hash after Entry Point Call\nDESCRIPTION: This command fetches the new state root hash after calling the 'counter_inc' entry point. Since the entry point call modifies the contract's state (the count value), a new state root hash is needed to query the updated state.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/docs/resources/beginner/counter-testnet/walkthrough.md#2025-04-22_snippet_13\n\nLANGUAGE: bash\nCODE:\n```\ncasper-client get-state-root-hash --node-address http://[NODE_IP]:7777\n```\n\n----------------------------------------\n\nTITLE: Incrementing Casper Contract Counter\nDESCRIPTION: Call the counter_inc entry point of the deployed counter contract to increment the count.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/versioned_docs/version-1.5.X/resources/beginner/counter-testnet/walkthrough.md#2025-04-22_snippet_10\n\nLANGUAGE: bash\nCODE:\n```\ncasper-client put-deploy \\\n    --node-address http://[NODE_IP]:7777 \\\n    --chain-name casper-test \\\n    --secret-key [PATH_TO_YOUR_KEY]/secret_key.pem \\\n    --payment-amount [PAYMENT_AMOUNT_IN_MOTES] \\\n    --session-name \"counter\" \\\n    --session-entry-point \"counter_inc\"\n```\n\n----------------------------------------\n\nTITLE: Installing Rust Nightly Toolchain - Bash\nDESCRIPTION: Installs the Rust nightly toolchain, which may be needed to compile casper-client from source. Ensures compatibility with source code requiring nightly-only features.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/versioned_docs/version-1.5.X/developers/prerequisites.md#2025-04-22_snippet_18\n\nLANGUAGE: bash\nCODE:\n```\nrustup toolchain install nightly\n```\n\n----------------------------------------\n\nTITLE: WebAssembly Function Call Wrappers\nDESCRIPTION: Implements function call wrappers and utilities in WebAssembly. These provide a standardized interface for calling memory management functions.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/versioned_docs/version-2.0.0/developers/json-rpc/json-rpc-transactional.md#2025-04-22_snippet_16\n\nLANGUAGE: webassembly\nCODE:\n```\n280041b29c0410082000200120022301410c6a2401230141f4034b0440000b10212301410c6b24010b0f00200020004180d30e6c100840000b1c002301411f6a2401230141f4034b0440000b100d2301411f6b24010b24002000200120022003230141096a2401230141f4034b0440000b1019230141096b24010b24002000200120022003230141046a2401230141f4034b0440000b101b230141046b24010b200020002001230141016a2401230141f4034b0440000b101c230141016b24010b1e002000230141016a2401230141f4034b0440000b101d230141016b24010b200020002001230141016a2401230141f4034b0440000b101e230141016b24010b1e002000230141016a2401230141f4034b0440000b101f230141016b24010b0bce020100418080c0000bc402616d6f756e746765745f7061796d656e745f7075727365706179746573745f7061796d656e745f7061636b6167655f68617368746573745f7061796d656e745f\n```\n\n----------------------------------------\n\nTITLE: Redelegating Stake via Casper Client CLI (JSON)\nDESCRIPTION: This CLI command enables users to move a delegated CSPR stake from one validator to another using the 'redelegate' transaction. It requires delegator, old and new validator public keys, redelegation amount, gas price, and path to either a secret key or initiator address. The Casper client must be installed, and command execution will fail with incorrect account data or missing files.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/versioned_docs/version-2.0.0/concepts/transactions.md#2025-04-22_snippet_4\n\nLANGUAGE: json\nCODE:\n```\ncasper-client put-txn redelegate\n/// The delegator's public key.\n  --delegator <STRING>\n/// The old validator's public key.\n  --validator <STRING>\n/// The new validator's public key.\n  --new-validator <STRING>\n/// The amount in motes to redelegate from the old validator to the new validator.\n  --transaction-amount <INTEGER>\n/// The maximum gas price that the user is willing to pay for this transaction. \n  --gas-price-tolerance <INTEGER>\n/// The path to the local secret key file, or the [`initiator address`](../developers/json-rpc/types_chain.md#initiatoraddr) sending the transaction.\n  <--secret-key <PATH>|--initiator-address <HEX STRING>>\n\n```\n\n----------------------------------------\n\nTITLE: Example account_put_deploy Response\nDESCRIPTION: Example JSON-RPC response for the account_put_deploy method, containing the API version and deploy hash identifier.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/docs/developers/json-rpc/json-rpc-transactional.md#2025-04-22_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"id\": 1,\n  \"jsonrpc\": \"2.0\",\n  \"result\": {\n    \"name\": \"account_put_deploy_result\",\n    \"value\": {\n      \"api_version\": \"2.0.0\",\n      \"deploy_hash\": \"5c9b3b099c1378aa8e4a5f07f59ff1fcdc69a83179427c7e67ae0377d94d93fa\"\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Delegator Schema in JSON\nDESCRIPTION: This JSON schema defines the structure representing a delegator, a party delegating stake to a validator. It requires the bonding purse URef, the delegator's public key, the staked amount (U512), and the validator's public key. It references external schemas for 'PublicKey', 'U512', and 'URef'.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/condor/jsonrpc-comp/rpc-1.5/schema/components.json.md#2025-04-22_snippet_36\n\nLANGUAGE: json\nCODE:\n```\n\"description\": \"Represents a party delegating their stake to a validator (or \\\"delegatee\\\")\",\n\"type\": \"object\",\n\"required\": [\n    \"bonding_purse\",\n    \"delegator_public_key\",\n    \"staked_amount\",\n    \"validator_public_key\"\n],\n\"properties\": {\n    \"delegator_public_key\": {\n        \"$ref\": \"#/components/schemas/PublicKey\"\n    },\n    \"staked_amount\": {\n        \"$ref\": \"#/components/schemas/U512\"\n    },\n    \"bonding_purse\": {\n        \"$ref\": \"#/components/schemas/URef\"\n    },\n    \"validator_public_key\": {\n        \"$ref\": \"#/components/schemas/PublicKey\"\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Compiling Casper Contract to WASM\nDESCRIPTION: Commands for compiling the smart contract to WebAssembly, including adding the WASM target and building the release version.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/versioned_docs/version-1.5.X/developers/writing-onchain-code/simple-contract.md#2025-04-22_snippet_16\n\nLANGUAGE: bash\nCODE:\n```\nrustup target add wasm32-unknown-unknown\ncargo build --release --target wasm32-unknown-unknown\n```\n\nLANGUAGE: bash\nCODE:\n```\nmake prepare\nmake build-contract\n```\n\n----------------------------------------\n\nTITLE: CEP-18 Utility Contract Details Response\nDESCRIPTION: This is a condensed version of the expected response when querying the full details of a CEP-18 utility contract. It shows the named keys, including the 'result' URef used for viewing check results.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/versioned_docs/version-2.0.0/resources/tokens/cep18/query.md#2025-04-22_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\n{\n  \"id\": -1426549275795832481,\n  \"jsonrpc\": \"2.0\",\n  \"result\": {\n    \"api_version\": \"1.0.0\",\n    \"block_header\": null,\n    \"merkle_proof\": \"[3370 hex chars]\",\n    \"stored_value\": {\n      \"Contract\": {\n        \"contract_package_hash\": \"contract-package-015b99020edb40e7e1e2b31a8e104bc226242f960a2d10dc1d91ae3eb6fa41b6\",\n        \"contract_wasm_hash\": \"contract-wasm-7959083a4df983ddcd3a9ae46af092dbf126031181ab2619ddc64db09bde8c27\",\n        \"named_keys\": [\n          {\n            \"key\": \"uref-a46ad389b53715d9991a513c8ca48e1502facc4c563c0700a31e830c4cb8a7d4-007\",\n            \"name\": \"result\"\n          }\n        ],\n        \"protocol_version\": \"1.0.0\"\n      }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Example chain_get_era_summary Result in JSON Format\nDESCRIPTION: This example shows the response structure for the chain_get_era_summary RPC method, which includes the era summary information with seigniorage allocations for validators and delegators.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/versioned_docs/version-1.5.X/developers/json-rpc/json-rpc-informational.md#2025-04-22_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\n{\n  \"jsonrpc\": \"2.0\",\n  \"id\": 1,\n  \"result\": {\n    \"api_version\": \"1.0.0\",\n    \"era_summary\": {\n      \"block_hash\": \"9bfa58709058935882a095ca6adf844b72a2ddf0f49b8575ef1ceda987452fb8\",\n      \"era_id\": 1,\n      \"stored_value\": {\n        \"EraInfo\": {\n          \"seigniorage_allocations\": [\n            {\n              \"Delegator\": {\n                \"delegator_public_key\": \"01c08939bf1ecd1139448d435989a761c975466d30b96c2dd74e9d23c7b12bc9ff\",\n                \"validator_public_key\": \"01039c258651e04597d786142d9749922245cf44b6cc0c93c58bd6c1783ac3be9b\",\n                \"amount\": \"53472520551166781393617756\"\n              }\n            },\n            {\n              \"Validator\": {\n                \"validator_public_key\": \"01039c258651e04597d786142d9749922245cf44b6cc0c93c58bd6c1783ac3be9b\",\n                \"amount\": \"54552773491594393138943367\"\n              }\n            },\n            {\n              \"Delegator\": {\n                \"delegator_public_key\": \"01264689a5b4c57dac1088cd0aae8074de105f2269f6041e2c120e80df7a95e6b5\",\n                \"validator_public_key\": \"013e193dec433a73a0b41b924243c62311689648a10b4468f9c609c75674c18726\",\n                \"amount\": \"51312014670568117976319374\"\n              }\n            },\n            {\n              \"Validator\": {\n                \"validator_public_key\": \"013e193dec433a73a0b41b924243c62311689648a10b4468f9c609c75674c18726\",\n                \"amount\": \"56713279372733183026458256\"\n              }\n            },\n            {\n              \"Delegator\": {\n                \"delegator_public_key\": \"016f571eaf1d3a442e684ecdb31d00a51448dcbaa06d00b340983311f0ba3e76db\",\n                \"validator_public_key\": \"0186d12379939682ae9669b354f7a637ec106369074d567b969cc0e2127c904f12\",\n                \"amount\": \"51852141140784624481333262\"\n              }\n            },\n            {\n              \"Validator\": {\n                \"validator_public_key\": \"0186d12379939682ae9669b354f7a637ec106369074d567b969cc0e2127c904f12\",\n                \"amount\": \"56173152902516676521444368\"\n              }\n            },\n            {\n              \"Delegator\": {\n                \"delegator_public_key\": \"0161e7ed5c592f16b507b9dd196662b530f9bde6c5b2cfd957fe8d0700ecfbe20b\",\n                \"validator_public_key\": \"01d4cbef55ed9968171102aa136c9564286211ee46c5ab65b6fd68fab5b14d4c4b\",\n                \"amount\": \"52392267611001130986347150\"\n              }\n            },\n            {\n              \"Validator\": {\n                \"validator_public_key\": \"01d4cbef55ed9968171102aa136c9564286211ee46c5ab65b6fd68fab5b14d4c4b\",\n                \"amount\": \"55633026432300170016430480\"\n              }\n            },\n            {\n              \"Delegator\": {\n                \"delegator_public_key\": \"01b1339a1d114036d84d7b65c804669166d38456114657abbb0e53e67bf1667c60\",\n                \"validator_public_key\": \"01dbce10c8418c21daf16bc1052a486cdb557ba66b09a84605bc1f4b3df364960f\",\n                \"amount\": \"52932394080952975520954950\"\n              }\n            },\n            {\n              \"Validator\": {\n                \"validator_public_key\": \"01dbce10c8418c21daf16bc1052a486cdb557ba66b09a84605bc1f4b3df364960f\",\n                \"amount\": \"55092899961808199011606173\"\n              }\n            }\n          ]\n        }\n      },\n      \"state_root_hash\": \"918abd1973171867e03c1e6e56fd7dd9da35c92461784f9a15c0df23e437d850\",\n      \"merkle_proof\": \"010000000e0000000000000000000000000000000000000000000000000000000000000000070a0000000101c08939bf1ecd1139448d435989a761c975466d30b96c2dd74e9d23c7b12bc9ff01039c258651e04597d786142d9749922245cf44b6cc0c93c58bd6c1783ac3be9b0b5c4316483512c2253f3b2c0001039c258651e04597d786142d9749922245cf44b6cc0c93c58bd6c1783ac3be9b0b87d59268bf17d8c6ff1f2d0101264689a5b4c57dac1088cd0aae8074de105f2269f6041e2c120e80df7a95e6b5013e193dec433a73a0b41b924243c62311689648a10b4468f9c609c75674c187260b8e45261378f096e3bd712a00013e193dec433a73a0b41b924243c62311689648a10b4468f9c609c75674c187260b90eee69bba24050981e92e01016f571eaf1d3a442e684ecdb31d00a51448dcbaa06d00b340983311f0ba3e76db0186d12379939682ae9669b354f7a637ec106369074d567b969cc0e2127c904f120b0ef09fedb1f521341ee42a000186d12379939682ae9669b354f7a637ec106369074d567b969cc0e2127c904f120b10446dc1801f7ab820772e010161e7ed5c592f16b507b9dd196662b530f9bde6c5b2cfd957fe8d0700ecfbe20b01d4cbef55ed9968171102aa136c9564286211ee46c5ab65b6fd68fab5b14d4c4b0b8e9a19c8ebfaac847e562b0001d4cbef55ed9968171102aa136c9564286211ee46c5ab65b6fd68fab5b14d4c4b0b9099f3e6461aef67c0042e0101b1339a1d114036d84d7b65c804669166d38456114657abbb0e53e67bf1667c6001dbce10c8418c21daf16bc1052a486cdb557ba66b09a84605bc1f4b3df364960f0b46fad737700f37d5dec82b0001dbce10c8418c21daf16bc1052a486cdb557ba66b09a84605bc1f4b3df364960f0b9d1ed178841a631760922d01000000000e060000000001fb7043fe388fef916937aa899a0dda9b042168149e600fb068ecb16839d545d60101a0676758b903440b28c8f4a1d46404e9879fcfc0b90dad20962536de493aecc302013584bc9d5c00ac639fe14410b4cfa480b12eddd8f3dce08d7b76ae47977c1c680601664224aca1272e2a5632da4a56399dee6c585318ebbb7bb4040039792d3ad33c07013b48237cd26eb35ec3c864e1ae250ca656d00893de1dfc4c951e0d779adeda1d0a002c722cac61792676eb19d773fd3c41e37a63f54f78bdf7712ca96a5c5e5c4986\"\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Method Type Signatures Schema - JSON\nDESCRIPTION: This JSON schema defines the structure for a method or function signature, specifying required fields such as method name, argument list, return type, access type, entry point type, and payment entry point. Dependencies include references to other schemas (Parameter, CLType, EntryPointAccess, EntryPointType, EntryPointPayment) that must be available in the same components object. Inputs must include the specified properties, and the 'args' array must align with its referenced schema. Outputs described by this schema allow for strict validation of method signatures in API documentation or contract definition workflows. Limitation: referenced schemas must be properly defined elsewhere in the file or application.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/condor/jsonrpc-comp/rpc-2.0/schema/EntryPoint2.json.md#2025-04-22_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"description\": \"Type signature of a method. Order of arguments matter since can be referenced by index as well as name.\",\n    \"type\": \"object\",\n    \"required\": [\n        \"access\",\n        \"args\",\n        \"entry_point_payment\",\n        \"entry_point_type\",\n        \"name\",\n        \"ret\"\n    ],\n    \"properties\": {\n        \"name\": {\n            \"type\": \"string\"\n        },\n        \"args\": {\n            \"type\": \"array\",\n            \"items\": {\n                \"$ref\": \"#/components/schemas/Parameter\"\n            }\n        },\n        \"ret\": {\n            \"$ref\": \"#/components/schemas/CLType\"\n        },\n        \"access\": {\n            \"$ref\": \"#/components/schemas/EntryPointAccess\"\n        },\n        \"entry_point_type\": {\n            \"$ref\": \"#/components/schemas/EntryPointType\"\n        },\n        \"entry_point_payment\": {\n            \"$ref\": \"#/components/schemas/EntryPointPayment\"\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Response from info_get_validator_changes in JSON-RPC\nDESCRIPTION: Example JSON-RPC response from the info_get_validator_changes method showing status changes of validators, including when they were added, removed, banned, or experienced other state changes.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/versioned_docs/version-2.0.0/developers/json-rpc/json-rpc-pos.md#2025-04-22_snippet_3\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"id\": 1,\n  \"jsonrpc\": \"2.0\",\n  \"result\": {\n    \"name\": \"info_get_validator_changes_result\",\n    \"value\": {\n      \"api_version\": \"2.0.0\",\n      \"changes\": [\n        {\n          \"public_key\": \"01d9bf2148748a85c89da5aad8ee0b0fc2d105fd39d41a4c796536354f0ae2900c\",\n          \"status_changes\": [\n            {\n              \"era_id\": 1,\n              \"validator_change\": \"Added\"\n            }\n          ]\n        }\n      ]\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Owner Reverse Lookup Mode Table\nDESCRIPTION: Table showing the u8 values for different owner reverse lookup modes that control how token ownership is tracked and queried.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/versioned_docs/version-1.5.X/resources/tokens/cep78/modalities.md#2025-04-22_snippet_6\n\nLANGUAGE: markdown\nCODE:\n```\n| OwnerReverseLookupMode | u8  |\n| ---------------------- | --- |\n| NoLookup               | 0   |\n| Complete               | 1   |\n| TransfersOnly          | 2   |\n```\n\n----------------------------------------\n\nTITLE: Filtering Node Status Output With jq - Bash\nDESCRIPTION: Queries the status endpoint and uses jq to extract specific top-level fields, such as api_version, last_added_block_info, build_version, and uptime. Demonstrates extracting multiple values using jq's dot notation and raw output option. Ensures quick access to summary info for monitoring.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/docs/operators/setup/node-endpoints.md#2025-04-22_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\ncurl -s http://<node_address>:8888/status | jq -r '.api_version, .last_added_block_info, .build_version, .uptime'\n```\n\n----------------------------------------\n\nTITLE: Defining Action Thresholds in JSON Schema\nDESCRIPTION: This JSON schema defines thresholds that must be met for executing various actions within the Casper network. Dependencies include references to 'EntityAssociatedKeyWeight'. Key functions include specifying thresholds for deployment, key management, and upgrade management. These properties ensure that the necessary permissions are in place before actions are executed.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/condor/jsonrpc-comp/rpc-2.0/schema/EntityActionThresholds.json.md#2025-04-22_snippet_0\n\nLANGUAGE: JSON\nCODE:\n```\n{\n    \"description\": \"Thresholds that have to be met when executing an action of a certain type.\",\n    \"type\": \"object\",\n    \"required\": [\n        \"deployment\",\n        \"key_management\",\n        \"upgrade_management\"\n    ],\n    \"properties\": {\n        \"deployment\": {\n            \"description\": \"Threshold for deploy execution.\",\n            \"allOf\": [\n                {\n                    \"$ref\": \"#/components/schemas/EntityAssociatedKeyWeight\"\n                }\n            ]\n        },\n        \"upgrade_management\": {\n            \"description\": \"Threshold for upgrading contracts.\",\n            \"allOf\": [\n                {\n                    \"$ref\": \"#/components/schemas/EntityAssociatedKeyWeight\"\n                }\n            ]\n        },\n        \"key_management\": {\n            \"description\": \"Threshold for managing action threshold.\",\n            \"allOf\": [\n                {\n                    \"$ref\": \"#/components/schemas/EntityAssociatedKeyWeight\"\n                }\n            ]\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Generating Validator Keys Using Casper Rust Client (Bash)\nDESCRIPTION: This Bash command generates a cryptographic key pair for a Casper node validator using the casper-client Rust binary. It stores the keys in /etc/casper/validator_keys with the casper system user for proper permissions. The casper-client binary must be installed and available in the system path. The keys are used for node authentication and signing transactions on the network; no inputs are required beyond write access to the destination directory.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/docs/operators/setup/basic-node-configuration.md#2025-04-22_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\nsudo -u casper casper-client keygen /etc/casper/validator_keys\n```\n\n----------------------------------------\n\nTITLE: Cloning Example Session Code Repositories (Git/Bash)\nDESCRIPTION: These commands clone example repositories from GitHub which contain sample session code for Casper operations, such as multi-signature setups and interacting with counter contracts. Ensure you have git installed to use these commands. The git repositories provide starting points to explore and test Casper session code in a local development environment.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/versioned_docs/version-1.5.X/developers/writing-onchain-code/writing-session-code.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ngit clone https://github.com/casper-ecosystem/two-party-multi-sig/\n```\n\nLANGUAGE: bash\nCODE:\n```\ngit clone https://github.com/casper-ecosystem/counter/\n```\n\n----------------------------------------\n\nTITLE: Checking CEP-18 Token Balance Using Utility Contract\nDESCRIPTION: Command to check an account's CEP-18 token balance by invoking the check_balance_of entry point on the cep18_test_contract utility contract. This requires specifying both the token contract hash and the address to check.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/versioned_docs/version-2.0.0/resources/tokens/cep18/transfer.md#2025-04-22_snippet_2\n\nLANGUAGE: json\nCODE:\n```\ncasper-client put-deploy -n http://<node IP>:<PORT>\\\n--secret-key ~/casper/demo/user_a/secret_key.pem \\\n--session-package-name \"cep18_test_contract\" \\\n--session-entry-point \"check_balance_of\" \\\n// This is the contract hash of your CEP-18 contract instance, passed in as an `account-hash-`.\n--session-arg \"token_contract:account_hash='account-hash-b568f50a64acc8bbe43462ffe243849a88111060b228dacb8f08d42e26985180'\" \\\n// This is the account hash of the account you are checking the balance of.\n--session-arg \"address:key='account-hash-303c0f8208220fe9a4de40e1ada1d35fdd6c678877908f01fddb2a56502d67fd'\" \\\n--chain-name <CHAIN NAME> \\\n--payment-amount 1000000000\n```\n\n----------------------------------------\n\nTITLE: Querying Global State by Contract Address - Sample (Bash)\nDESCRIPTION: An explicit example calling casper-client's query-global-state for a contract at a given address hash, with provided node address and state root hash. Shows the required option format for practical invocation. Useful for directly copying, modifying, or testing real network and state data.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/docs/developers/cli/querying-global-state.md#2025-04-22_snippet_10\n\nLANGUAGE: bash\nCODE:\n```\ncasper-client query-global-state \\\n--node-address http://localhost:11101 \\\n--state-root-hash 6b5849caa605acdc29564f303764396a27ef7a6b1a61f7b13109b129e7e70d81 \\\n--key \"entity-contract-a1d0bf9d96f3efc9ea67f627df3a7cba390bfc582956032db91060ca5d413e68\"\n```\n\n----------------------------------------\n\nTITLE: JSON-RPC Request for Deploy Information\nDESCRIPTION: This JSON-RPC request is sent to the Casper node to retrieve information about a specific deploy. It includes the deploy hash and a flag for finalized approvals.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/versioned_docs/version-2.0.0/developers/cli/transfers/direct-token-transfer.md#2025-04-22_snippet_6\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"jsonrpc\": \"2.0\",\n  \"method\": \"info_get_deploy\",\n  \"params\": {\n    \"deploy_hash\": \"1f17a0bdeaaf71abd03492c854cdf97f746432751721ce555e95b9cefe641e3c\",\n    \"finalized_approvals\": false\n  },\n  \"id\": -3447643973713335073\n}\n```\n\n----------------------------------------\n\nTITLE: Deploying Native Transfer JSON-RPC Casper\nDESCRIPTION: This JSON snippet is an example of a native transfer deploy on the Casper network, showing how to specify the source, target, amount, and other transaction details. Dependencies include a Casper node with JSON-RPC enabled. Key parameters are the 'account', 'amount', and 'target'. Expected input is a structured JSON RPC request, and the output is the transaction status. Valid only on the Casper Mainnet.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/docs/resources/advanced/list-cspr.md#2025-04-22_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"id\": 1,\n  \"jsonrpc\": \"2.0\",\n  \"method\": \"account_put_deploy\",\n  \"params\": {\n      \"deploy\": {\n          \"approvals\": [\n              {\n                  \"signature\": \"130 chars\",\n                  \"signer\": \"010f50b0116f213ef65b99d1bd54483f92bf6131de2f8aceb7e3f825a838292150\"\n              }\n          ],\n          \"hash\": \"ec2d477a532e00b08cfa9447b7841a645a27d34ee12ec55318263617e5740713\",\n          \"header\": {\n              \"account\": \"010f50b0116f213ef65b99d1bd54483f92bf6131de2f8aceb7e3f825a838292150\",\n              \"body_hash\": \"da35b095640a403324306c59ac6f18a446dfcc28faf753ce58b96b635587dd8e\",\n              \"chain_name\": \"casper-net-1\",\n              \"dependencies\": [],\n              \"gas_price\": 1,\n              \"timestamp\": \"2021-04-20T18:04:40.333Z\",\n              \"ttl\": \"1h\"\n          },\n          \"payment\": {\n              \"ModuleBytes\": {\n                  \"args\": [\n                      [\n                          \"amount\",\n                          {\n                              \"bytes\": \"021027\",\n                              \"cl_type\": \"U512\",\n                              \"parsed\": \"10000\"\n                          }\n                      ]\n                  ],\n                  \"module_bytes\": \"\"\n              }\n          },\n          \"session\": {\n              \"Transfer\": {\n                  \"args\": [\n                      [\n                          \"amount\",\n                          {\n                              \"bytes\": \"0400f90295\",\n                              \"cl_type\": \"U512\",\n                              \"parsed\": \"2500000000\"\n                          }\n                      ],\n                      [\n                          \"target\",\n                          {\n                              \"bytes\": \"8ae68a6902ff3c029cea32bb67ae76b25d26329219e4c9ceb676745981fd3668\",\n                              \"cl_type\": {\n                                  \"ByteArray\": 32\n                              },\n                              \"parsed\": \"8ae68a6902ff3c029cea32bb67ae76b25d26329219e4c9ceb676745981fd3668\"\n                          }\n                      ],\n                      [\n                          \"id\",\n                          {\n                              \"bytes\": \"00\",\n                              \"cl_type\": {\n                                  \"Option\": \"U64\"\n                              },\n                              \"parsed\": null\n                          }\n                      ]\n                  ]\n              }\n          }\n      }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Recoverable Primary Key Configuration\nDESCRIPTION: Advanced account setup with primary key and three associated keys, enabling account recovery if primary key is lost. Associated keys can collectively manage the account.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/versioned_docs/version-2.0.0/resources/advanced/multi-sig/other-scenarios.md#2025-04-22_snippet_4\n\nLANGUAGE: json\nCODE:\n```\n\"Account\": {\n   \"account_address\": \"account-hash-a1…\",\n   \"action_thresholds\": {\n      \"deployment\": 2,\n      \"key_management\": 3\n   },\n   \"associated_keys\": [\n      {\n         \"account_address\": \"account-hash-a1…\",\n         \"weight\": 3\n      },\n      {\n         \"account_address\": \"account-hash-b2…\",\n         \"weight\": 1\n      },\n      {\n         \"account_address\": \"account-hash-c3…\",\n         \"weight\": 1\n      },\n      {\n         \"account_address\": \"account-hash-d4…\",\n         \"weight\": 1\n      }\n   ],\n   \"main_purse\": \"uref-1234…\",\n   \"named_keys\": []\n}\n```\n\n----------------------------------------\n\nTITLE: EntryPoint Structure\nDESCRIPTION: Defines the structure of contract entry points including name, arguments, return type, access control, and entry point type.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/versioned_docs/version-2.0.0/concepts/serialization/types.md#2025-04-22_snippet_22\n\nLANGUAGE: Rust\nCODE:\n```\nstruct EntryPoint {\n    name: String,\n    args: Vec<Parameter>,\n    ret: Unit,\n    access: Access,    // u8(1) for public, u8(2) + List for authorized\n    entry_point_type: EntryPointType  // u8(0) for Session, u8(1) for Contract\n}\n```\n\n----------------------------------------\n\nTITLE: Retrieving Post-Threshold-Update State Root Hash using Casper CLI\nDESCRIPTION: Fetches the latest global state root hash from the specified Casper Testnet node using `casper-client get-state-root-hash` after the account thresholds have been updated via a deploy. This hash is needed to query the updated account state.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/docs/resources/advanced/multi-sig/multi-sig-workflow.md#2025-04-22_snippet_10\n\nLANGUAGE: bash\nCODE:\n```\ncasper-client get-state-root-hash --node-address https://node.testnet.casper.network\n```\n\n----------------------------------------\n\nTITLE: Checking Contract Version with Casper CLI\nDESCRIPTION: A command to query the current version of a contract using the Casper client. This retrieves a stored CLValue representing the contract version from a named key.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/docs/resources/beginner/upgrade-contract.md#2025-04-22_snippet_8\n\nLANGUAGE: bash\nCODE:\n```\ncasper-client query-global-state \\\n    --node-address http://[NODE_IP]:7777 \\\n    --state-root-hash [STATE_ROOT_HASH] \\\n    --key [ACCOUNT_HASH] -q \"version\"\n```\n\n----------------------------------------\n\nTITLE: Describing Contract Package Information - Casper Contract - JSON\nDESCRIPTION: This snippet outlines the package object for a Casper contract, specifying available versions, the main entity association, and lock status. It's primarily used for contract versioning management and upgradability tracking. The code expects valid entities and version info; no disabled versions or groups are specified, indicating an active and unlocked contract package.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/docs/developers/cli/sending-transactions.md#2025-04-22_snippet_18\n\nLANGUAGE: JSON\nCODE:\n```\n{\n  \"versions\": [\n    {\n      \"entity_version_key\": {\n        \"protocol_version_major\": 2,\n        \"entity_version\": 1\n      },\n      \"addressable_entity_hash\": \"addressable-entity-363996106630892a964565574fcdfd2435f21a17a3ad1ed2054146e7d8461640\"\n    }\n  ],\n  \"disabled_versions\": [],\n  \"groups\": [],\n  \"lock_status\": \"Unlocked\"\n}\n\n```\n\n----------------------------------------\n\nTITLE: Underlying Shell Commands for Running Casper Tests (Bash)\nDESCRIPTION: Details the individual shell commands that are typically executed when running `make test`. This involves creating a directory for Wasm (`tests/wasm`), copying the compiled contract Wasm into it, changing to the `tests` directory, and finally running `cargo test`.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/versioned_docs/version-1.5.X/developers/writing-onchain-code/testing-session-code.md#2025-04-22_snippet_12\n\nLANGUAGE: bash\nCODE:\n```\nmkdir -p tests/wasm\ncp contract/target/wasm32-unknown-unknown/release/contract.wasm tests/wasm\ncd tests && cargo test\n```\n\n----------------------------------------\n\nTITLE: Defining JSON Schema for Casper Network API Components\nDESCRIPTION: A comprehensive JSON Schema definition that describes the various components of the Casper Network blockchain API, including contract versions, package status, bytecode containers, message topics, block time, named keys, gas reservations, and entry point specifications. Each schema includes detailed type information, required fields, and descriptions.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/condor/jsonrpc-comp/rpc-2.0/schema/components.json.md#2025-04-22_snippet_55\n\nLANGUAGE: json\nCODE:\n```\n\"properties\": {\n    \"protocol_version_major\": {\n        \"description\": \"Major element of `ProtocolVersion` a `ContractVersion` is compatible with.\",\n        \"type\": \"integer\",\n        \"format\": \"uint32\",\n        \"minimum\": 0.0\n    },\n    \"entity_version\": {\n        \"description\": \"Automatically incremented value for a contract version within a major `ProtocolVersion`.\",\n        \"type\": \"integer\",\n        \"format\": \"uint32\",\n        \"minimum\": 0.0\n    }\n},\n\"PackageStatus\": {\n    \"description\": \"A enum to determine the lock status of the package.\",\n    \"oneOf\": [\n        {\n            \"description\": \"The package is locked and cannot be versioned.\",\n            \"type\": \"string\",\n            \"enum\": [\n                \"Locked\"\n            ]\n        },\n        {\n            \"description\": \"The package is unlocked and can be versioned.\",\n            \"type\": \"string\",\n            \"enum\": [\n                \"Unlocked\"\n            ]\n        }\n    ]\n},\n\"ByteCode\": {\n    \"description\": \"A container for contract's Wasm bytes.\",\n    \"type\": \"object\",\n    \"required\": [\n        \"bytes\",\n        \"kind\"\n    ],\n    \"properties\": {\n        \"kind\": {\n            \"$ref\": \"#/components/schemas/ByteCodeKind\"\n        },\n        \"bytes\": {\n            \"$ref\": \"#/components/schemas/Bytes\"\n        }\n    }\n},\n\"ByteCodeKind\": {\n    \"description\": \"The type of Byte code.\",\n    \"oneOf\": [\n        {\n            \"description\": \"Empty byte code.\",\n            \"type\": \"string\",\n            \"enum\": [\n                \"Empty\"\n            ]\n        },\n        {\n            \"description\": \"Byte code to be executed with the version 1 Casper execution engine.\",\n            \"type\": \"string\",\n            \"enum\": [\n                \"V1CasperWasm\"\n            ]\n        }\n    ]\n},\n\"MessageTopicSummary\": {\n    \"description\": \"Summary of a message topic that will be stored in global state.\",\n    \"type\": \"object\",\n    \"required\": [\n        \"blocktime\",\n        \"message_count\"\n    ],\n    \"properties\": {\n        \"message_count\": {\n            \"description\": \"Number of messages in this topic.\",\n            \"type\": \"integer\",\n            \"format\": \"uint32\",\n            \"minimum\": 0.0\n        },\n        \"blocktime\": {\n            \"description\": \"Block timestamp in which these messages were emitted.\",\n            \"allOf\": [\n                {\n                    \"$ref\": \"#/components/schemas/BlockTime\"\n                }\n            ]\n        }\n    }\n},\n\"BlockTime\": {\n    \"description\": \"A newtype wrapping a [`u64`] which represents the block time.\",\n    \"type\": \"integer\",\n    \"format\": \"uint64\",\n    \"minimum\": 0.0\n},\n\"MessageChecksum\": {\n    \"description\": \"Message checksum as a formatted string.\",\n    \"type\": \"string\"\n},\n\"NamedKeyValue\": {\n    \"description\": \"A NamedKey value.\",\n    \"type\": \"object\",\n    \"required\": [\n        \"name\",\n        \"named_key\"\n    ],\n    \"properties\": {\n        \"named_key\": {\n            \"description\": \"The actual `Key` encoded as a CLValue.\",\n            \"allOf\": [\n                {\n                    \"$ref\": \"#/components/schemas/CLValue\"\n                }\n            ]\n        },\n        \"name\": {\n            \"description\": \"The name of the `Key` encoded as a CLValue.\",\n            \"allOf\": [\n                {\n                    \"$ref\": \"#/components/schemas/CLValue\"\n                }\n            ]\n        }\n    }\n},\n\"ReservationKind\": {\n    \"description\": \"Container for bytes recording location, type and data for a gas reservation\",\n    \"type\": \"object\",\n    \"required\": [\n        \"receipt\",\n        \"reservation_data\",\n        \"reservation_kind\"\n    ],\n    \"properties\": {\n        \"receipt\": {\n            \"$ref\": \"#/components/schemas/Digest\"\n        },\n        \"reservation_kind\": {\n            \"type\": \"integer\",\n            \"format\": \"uint8\",\n            \"minimum\": 0.0\n        },\n        \"reservation_data\": {\n            \"$ref\": \"#/components/schemas/Bytes\"\n        }\n    }\n},\n\"EntryPointValue\": {\n    \"description\": \"The encaspulated representation of entrypoints.\",\n    \"oneOf\": [\n        {\n            \"description\": \"Entrypoints to be executed against the V1 Casper VM.\",\n            \"type\": \"object\",\n            \"required\": [\n                \"V1CasperVm\"\n            ],\n            \"properties\": {\n                \"V1CasperVm\": {\n                    \"$ref\": \"#/components/schemas/EntryPoint2\"\n                }\n            },\n            \"additionalProperties\": false\n        },\n        {\n            \"description\": \"Entrypoints to be executed against the V2 Casper VM.\",\n            \"type\": \"object\",\n            \"required\": [\n                \"V2CasperVm\"\n            ],\n            \"properties\": {\n                \"V2CasperVm\": {\n                    \"$ref\": \"#/components/schemas/EntryPointV2\"\n                }\n            },\n            \"additionalProperties\": false\n        }\n    ]\n},\n\"EntryPoint2\": {\n    \"description\": \"Type signature of a method. Order of arguments matter since can be referenced by index as well as name.\",\n    \"type\": \"object\",\n    \"required\": [\n        \"access\",\n        \"args\",\n        \"entry_point_payment\",\n        \"entry_point_type\",\n        \"name\",\n        \"ret\"\n    ],\n    \"properties\": {\n        \"name\": {\n            \"type\": \"string\"\n        },\n        \"args\": {\n            \"type\": \"array\",\n            \"items\": {\n                \"$ref\": \"#/components/schemas/Parameter\"\n            }\n        },\n        \"ret\": {\n            \"$ref\": \"#/components/schemas/CLType\"\n        },\n        \"access\": {\n            \"$ref\": \"#/components/schemas/EntryPointAccess\"\n        },\n        \"entry_point_type\": {\n            \"$ref\": \"#/components/schemas/EntryPointType\"\n        },\n        \"entry_point_payment\": {\n            \"$ref\": \"#/components/schemas/EntryPointPayment\"\n        }\n    }\n},\n\"EntryPointPayment\": {\n    \"description\": \"An enum specifying who pays for the invocation and execution of the entrypoint.\",\n    \"oneOf\": [\n        {\n            \"description\": \"The caller must cover cost\",\n            \"type\": \"string\",\n            \"enum\": [\n                \"Caller\"\n            ]\n        },\n        {\n            \"description\": \"Will cover cost to execute self but not cost of any subsequent invoked contracts\",\n            \"type\": \"string\",\n            \"enum\": [\n                \"SelfOnly\"\n            ]\n        },\n        {\n            \"description\": \"will cover cost to execute self and the cost of any subsequent invoked contracts\",\n            \"type\": \"string\",\n            \"enum\": [\n                \"SelfOnward\"\n            ]\n        }\n    ]\n},\n\"EntryPointV2\": {\n    \"description\": \"The entry point for the V2 Casper VM.\",\n    \"type\": \"object\",\n    \"required\": [\n        \"flags\",\n        \"function_index\"\n    ],\n    \"properties\": {\n        \"function_index\": {\n            \"description\": \"The selector.\",\n            \"type\": \"integer\",\n            \"format\": \"uint32\",\n```\n\n----------------------------------------\n\nTITLE: Attaching Ledger Signature to Deploy in JavaScript\nDESCRIPTION: Applies the signature obtained from a Ledger device (expected in `signatureRS`) to the original deploy object. It uses `DeployUtil.setSignature` along with the deploy, the signature, and the public key corresponding to the Ledger account used for signing. Depends on `DeployUtil` and `CLPublicKey` from `casper-js-sdk`, the original `deploy` object, and the `signatureRS` from the Ledger response.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/docs/resources/advanced/list-cspr.md#2025-04-22_snippet_10\n\nLANGUAGE: javascript\nCODE:\n```\nimport { DeployUtil, CLPublicKey } from 'casper-js-sdk';\n\nconst signedDeploy = DeployUtil.setSignature(\n  deploy,\n  signatureRS,\n  CLPublicKey.fromHex(accountPublicKey)\n);\n```\n\n----------------------------------------\n\nTITLE: Send Caser Deploy with the Primary Account\nDESCRIPTION: Demonstrates sending a deploy from the primary account with a Wasm contract using Casper Client bash commands. This snippet requires the Casper Client and appropriate access to secret keys with necessary permissions.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/versioned_docs/version-2.0.0/resources/advanced/multi-sig/multi-sig-workflow.md#2025-04-22_snippet_9\n\nLANGUAGE: bash\nCODE:\n```\ncasper-client put-deploy --chain-name casper-test \\\n--payment-amount 3000000000 \\\n--session-path tests/wasm/contract.wasm \\\n--secret-key $PATH/secret_key.pem \\\n--session-arg \"my-key-name:string='primary_account_key'\" \\\n--session-arg \"message:string='Hello, World'\"\n```\n\nLANGUAGE: bash\nCODE:\n```\ncasper-client get-deploy --node-address https://node.testnet.casper.network <DEPLOY_HASH>\n```\n\nLANGUAGE: bash\nCODE:\n```\ncasper-client get-state-root-hash --node-address https://node.testnet.casper.network\n\ncasper-client query-global-state \\\n--node-address https://node.testnet.casper.network \\\n--state-root-hash <STATE_ROOT_HASH> \\\n--key account-hash-<PRIMARY_ACCOUNT_HASH>\n```\n\n----------------------------------------\n\nTITLE: Defining Message Types in Rust for Casper Node Networking Protocol\nDESCRIPTION: Definition of the Message enum which serves as the foundation for the Casper node networking protocol. It includes variants for handshakes and various payload types that handle node communication.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/docs/concepts/design/networking-protocol.md#2025-04-22_snippet_0\n\nLANGUAGE: rust\nCODE:\n```\nenum Message {\n    Handshake {\n        network_name: String,\n        public_addr: SocketAddr,\n        // default: 1.0\n        protocol_version: ProtocolVersion,\n        // default: `None`\n        consensus_certificate: Option<ConsensusCertificate>,\n        // default: false\n        is_syncing: bool,\n        // default: `None`\n        chainspec_hash: Option<Digest>,\n    },\n    Payload(Payload),\n}\n\nstruct ConsensusCertificate {\n    public_key: PublicKey,\n    signature: Signature,\n}\n\nstruct Digest([u8; 32]);\n```\n\n----------------------------------------\n\nTITLE: Detailed Transaction Verification Response\nDESCRIPTION: Comprehensive JSON response from the get-transaction command showing the transaction details including chain name, timestamp, execution effects, and stored contract data. This demonstrates a successful contract installation.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/versioned_docs/version-2.0.0/developers/cli/installing-contracts.md#2025-04-22_snippet_4\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"jsonrpc\": \"2.0\",\n  \"id\": 5297043714444661948,\n  \"result\": {\n    \"api_version\": \"2.0.0\",\n    \"transaction\": {\n      \"Version1\": {\n        \"hash\": \"49c36616a50962fa5a7dd7901677ae44667fa9f8c542e49eb2284ba2c900bba2\",\n        \"header\": {\n          \"chain_name\": \"casper-net-1\",\n          \"timestamp\": \"2024-08-21T11:21:36.201Z\",\n          \"ttl\": \"30m\",\n          \"body_hash\": \"543df05d05c456e9b6b5d657029e9ad20c674c6e6b56f498af0052ec87ee9f80\",\n          \"pricing_mode\": {\n            \"Fixed\": {\n              \"gas_price_tolerance\": 10\n            }\n          },\n          \"initiator_addr\": {\n            \"PublicKey\": \"0149d133f697b5867d312e18ae0b129ef0c63499df2815fe339dca727963edb80d\"\n          }\n        },\n        \"body\": {\n          \"args\": [],\n          \"target\": {\n            \"Session\": {\n              \"module_bytes\": \"[105936 hex chars]\",\n              \"runtime\": \"VmCasperV1\"\n            }\n          },\n          \"entry_point\": \"Call\",\n          \"transaction_category\": 2,\n          \"scheduling\": \"Standard\"\n        },\n        \"approvals\": [\n          {\n            \"signer\": \"0149d133f697b5867d312e18ae0b129ef0c63499df2815fe339dca727963edb80d\",\n            \"signature\": \"01537684dd531ce6a4c9383ba7ea565e9408ed2c5dd8bb12787f131e1148fd0f057f45dbaa7bbc0230743cc5740c67db64f66bab1df57547722899f7d7289c1f0c\"\n          }\n        ]\n      }\n    },\n    \"execution_info\": {\n      \"block_hash\": \"24ead40278a71966e16823150b06c06675a216dbef761c1d6ad1439da4147f4a\",\n      \"block_height\": 8463,\n      \"execution_result\": {\n        \"Version2\": {\n          \"initiator\": {\n            \"PublicKey\": \"0149d133f697b5867d312e18ae0b129ef0c63499df2815fe339dca727963edb80d\"\n          },\n          \"error_message\": null,\n          \"limit\": \"1000000000000\",\n          \"consumed\": \"46747144601\",\n          \"cost\": \"1000000000000\",\n          \"payment\": [],\n          \"transfers\": [],\n          \"size_estimate\": 53215,\n          \"effects\": [\n            {\n              \"key\": \"balance-hold-0121dc8fc358c4e30ae29786bd4842a5f99da83efa0b9ca8461cd2196ffbfd07f172b7ab7491010000\",\n              \"kind\": {\n                \"Write\": {\n                  \"CLValue\": {\n                    \"cl_type\": \"U512\",\n                    \"bytes\": \"050010a5d4e8\",\n                    \"parsed\": \"1000000000000\"\n                  }\n                }\n              }\n            },\n            {\n              \"key\": \"uref-65f3f583bf1ac01b6c90d9c9478bd239c09e46f48fb693918726eaab03631407-000\",\n              \"kind\": {\n                \"Write\": {\n                  \"CLValue\": {\n                    \"cl_type\": \"I32\",\n                    \"bytes\": \"00000000\",\n                    \"parsed\": 0\n                  }\n                }\n              }\n            },\n            {\n              \"key\": \"uref-29feb2af8a9d7b6d2ef6be875a0aa326b646a00b7cdd2dd4a65365e84e9f2e9a-000\",\n              \"kind\": {\n                \"Write\": {\n                  \"CLValue\": {\n                    \"cl_type\": \"Unit\",\n                    \"bytes\": \"\",\n                    \"parsed\": null\n                  }\n                }\n              }\n            },\n            {\n              \"key\": \"package-50d487af45f8cec533c6813801a7630ff97e5ee3964daf7915d5451b4812ac94\",\n              \"kind\": {\n                \"Write\": {\n                  \"Package\": {\n                    \"versions\": [],\n                    \"disabled_versions\": [],\n                    \"groups\": [],\n                    \"lock_status\": \"Unlocked\"\n                  }\n                }\n              }\n            },\n            {\n              \"key\": \"named-key-entity-account-6a56c4eee172043975aea72221eaf09f3c3a24f09a379935e44c9979f1ae9463-05c3e063406ddde43671e0d47c45e31a10e9204137171f96ce818bdc725a4e1b\",\n              \"kind\": {\n                \"Write\": {\n                  \"NamedKey\": {\n                    \"named_key\": {\n                      \"cl_type\": \"Key\",\n                      \"bytes\": \"1050d487af45f8cec533c6813801a7630ff97e5ee3964daf7915d5451b4812ac94\",\n                      \"parsed\": \"package-50d487af45f8cec533c6813801a7630ff97e5ee3964daf7915d5451b4812ac94\"\n                    },\n                    \"name\": {\n                      \"cl_type\": \"String\",\n                      \"bytes\": \"14000000636f756e7465725f7061636b6167655f6e616d65\",\n                      \"parsed\": \"counter_package_name\"\n                    }\n                  }\n                }\n              }\n            },\n            {\n              \"key\": \"named-key-entity-account-6a56c4eee172043975aea72221eaf09f3c3a24f09a379935e44c9979f1ae9463-6409273bf327d5a6a39a29dbd07c5cd2f48ee4f227fd443d025adc51e1bd5103\",\n              \"kind\": {\n                \"Write\": {\n                  \"NamedKey\": {\n                    \"named_key\": {\n                      \"cl_type\": \"Key\",\n                      \"bytes\": \"0229feb2af8a9d7b6d2ef6be875a0aa326b646a00b7cdd2dd4a65365e84e9f2e9a07\",\n                      \"parsed\": \"uref-29feb2af8a9d7b6d2ef6be875a0aa326b646a00b7cdd2dd4a65365e84e9f2e9a-007\"\n                    },\n                    \"name\": {\n                      \"cl_type\": \"String\",\n                      \"bytes\": \"13000000636f756e7465725f6163636573735f75726566\",\n                      \"parsed\": \"counter_access_uref\"\n                    }\n                  }\n                }\n              }\n            },\n            {\n              \"key\": \"package-50d487af45f8cec533c6813801a7630ff97e5ee3964daf7915d5451b4812ac94\",\n              \"kind\": \"Identity\"\n            },\n            {\n              \"key\": \"entity-system-1f15cf43df68e8b382415a8ef687521f61f1ecce6960b72eaa13f43bfc448139\",\n              \"kind\": \"Identity\"\n            },\n            {\n              \"key\": \"package-f1c97c9b6228be3f316753e4e1289d910071fb880dddccce18881abfb9f53526\",\n              \"kind\": \"Identity\"\n            },\n            {\n              \"key\": \"entry-point-v1-entity-system-1f15cf43df68e8b382415a8ef687521f61f1ecce6960b72eaa13f43bfc448139-21bddc7e4379ba445c7118cb51962954e0d1e5aa5cacc0c4ff6095b57eb9fb33\",\n              \"kind\": \"Identity\"\n            },\n            {\n              \"key\": \"uref-2cb7e46fcde2c4d395a6850bb3b7edbb0b4db6018643e535fa0dfdeeb006d6ef-000\",\n              \"kind\": {\n                \"Write\": {\n                  \"CLValue\": {\n                    \"cl_type\": \"Unit\",\n                    \"bytes\": \"\",\n                    \"parsed\": null\n                  }\n                }\n              }\n            },\n            {\n              \"key\": \"balance-2cb7e46fcde2c4d395a6850bb3b7edbb0b4db6018643e535fa0dfdeeb006d6ef\",\n              \"kind\": {\n                \"Write\": {\n                  \"CLValue\": {\n                    \"cl_type\": \"U512\",\n                    \"bytes\": \"00\",\n                    \"parsed\": \"0\"\n                  }\n                }\n              }\n            },\n            {\n              \"key\": \"byte-code-v1-wasm-0577a7c92fd20e1af76aa9e257631cb240e8187191bba2025e88663d0288e936\",\n              \"kind\": {\n                \"Write\": {\n                  \"ByteCode\": {\n\n\n```\n\n----------------------------------------\n\nTITLE: Installing AssemblyScript via npm\nDESCRIPTION: This shell command installs the AssemblyScript compiler using the Node Package Manager (npm). Node.js must be installed as a prerequisite. This command can be used for global or local installation depending on the context.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/versioned_docs/version-1.5.X/developers/writing-onchain-code/assembly-script.md#2025-04-22_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\nnpm i assemblyscript\n```\n\n----------------------------------------\n\nTITLE: Wallet Connect Component Implementation\nDESCRIPTION: React component for handling wallet connection with connect and disconnect functionality\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/versioned_docs/version-1.5.X/developers/dapps/template-frontend.md#2025-04-22_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\ntouch src/Connect.jsx\n```\n\nLANGUAGE: jsx\nCODE:\n```\nimport { getProvider } from \"./casper-wallet\";\n\nconst provider = getProvider();\n\nconst Connect = (props) => {\n    return (\n        <>\n            <button onClick={ () => connectToWallet(props) }>Connect Wallet</button>\n            <button onClick={ () => disconnect(props) }>Disconnect</button>\n        </>\n    );\n}\n\nexport default Connect;\n```\n\nLANGUAGE: javascript\nCODE:\n```\nconst connectToWallet = (props) => {\n    provider.requestConnection().then(connected => {\n        if (!connected) {\n            alert(\"Couldn't connect to wallet\");\n        } else {\n            provider.getActivePublicKey().then(publicKey => {\n                props.setPublicKey(publicKey);\n            }).catch(error => {\n                alert(error.message);\n            });\n        }\n    })\n    .catch(error => {\n        alert(error.message);\n    });\n}\n```\n\nLANGUAGE: javascript\nCODE:\n```\nconst disconnect = (props) => {\n    provider.disconnectFromSite().then(disconnected => {\n        if (disconnected) {\n            props.setPublicKey(null);\n            alert(\"Disconnected\");\n        } \n    }).catch(error => {\n        alert(error.message);\n    });\n}\n```\n\n----------------------------------------\n\nTITLE: Installing Contract with Default Account Authorization in Rust\nDESCRIPTION: This snippet demonstrates how to create a deploy item for installing a contract using the default account's authorization key. It sets up the session code, payment, and authorization keys for the deploy.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/docs/resources/advanced/list-auth-keys-tutorial.md#2025-04-22_snippet_15\n\nLANGUAGE: rust\nCODE:\n```\nlet session_code = PathBuf::from(CONTRACT_WASM);\n\nlet deploy_item = DeployItemBuilder::new()\n    .with_empty_payment_bytes(runtime_args! {ARG_AMOUNT => *DEFAULT_PAYMENT})\n    .with_authorization_keys(&[*DEFAULT_ACCOUNT_ADDR])\n    .with_address(*DEFAULT_ACCOUNT_ADDR)\n    .with_session_code(session_code, runtime_args! {})\n    .build();\n```\n\n----------------------------------------\n\nTITLE: JSON Structure of Transaction's Authorization Keys\nDESCRIPTION: This snippet presents the JSON representation of authorization keys used in transactions on the Casper Network. Authorization keys are a subset of associated keys, required for signing transactions. Each entry includes a signer and a signature, indicating authorization for transaction approval.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/versioned_docs/version-2.0.0/concepts/list-auth-keys.md#2025-04-22_snippet_1\n\nLANGUAGE: JSON\nCODE:\n```\n\"approvals\": [\\n    {\\n      \\\"signer\\\": \\\" 2cd...22\\\",\\n      \\\"signature\\\": \\\"02df8c...f481\\\"\\n    },\\n    {\\n      \\\"signer\\\": \\\"4fg...44\\\",\\n      \\\"signature\\\": \\\"02ef21...756a\\\"\\n    }\\n]\n```\n\n----------------------------------------\n\nTITLE: Sourcing the Auto-Completion Script - Bash\nDESCRIPTION: This command enables tab-completion for casper-client in the current bash session by sourcing the auto-completion script. Users can also re-login to activate globally. Dependency: the completion script must have been generated previously, typically placed in /usr/share/bash-completion/completions/.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/docs/operators/setup/install-node.md#2025-04-22_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\nsource /usr/share/bash-completion/completions/casper-client\n```\n\n----------------------------------------\n\nTITLE: Simplified CEP-18 Allowance Check Command\nDESCRIPTION: A simplified version of the allowance check command without explanatory comments, showing the essential parameters needed for checking token allowances.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/versioned_docs/version-2.0.0/resources/tokens/cep18/transfer.md#2025-04-22_snippet_10\n\nLANGUAGE: bash\nCODE:\n```\ncasper-client put-deploy -n http://<node IP>:<PORT>\\\n--secret-key ~/casper/demo/user_a/secret_key.pem \\\n--session-package-name \"cep18_test_contract\" \\\n--session-entry-point \"check_allowance_of\" \\\n--session-arg \"token_contract:account_hash='account-hash-05d893e76c731729fc26339e5a970bd79fbf4a6adf743c8385431fb494bff45e'\" \\\n--session-arg \"owner:key='account-hash-39f15c23df9be1244572bb499fac62cbcad3cab2dc1438609842f602f943d7d2'\" \\\n--session-arg \"spender:key='account-hash-17192017d32db5dc9f598bf8ac6ac35ee4b64748669b00572d88335941479513'\" \\\n--chain-name <CHAIN NAME> \\\n--payment-amount 10000000000\n```\n\n----------------------------------------\n\nTITLE: Decreasing CEP-18 Allowance using Casper Client - Bash\nDESCRIPTION: This bash command reduces the allowance for an existing authorized spender in a CEP-18 token contract, using the decrease_allowance entry point. The spender account hash and reduction amount must be specified in the session arguments, alongside session package, secret key, chain info, and payment amount. The functionality helps restrict previously granted transfer permissions.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/versioned_docs/version-2.0.0/resources/tokens/cep18/transfer.md#2025-04-22_snippet_18\n\nLANGUAGE: bash\nCODE:\n```\ncasper-client put-deploy -n http://<NODE IP>:<PORT> \\\n--secret-key ~/casper/demo/user_a/secret_key.pem \\\n--session-package-name \"cep18_contract_package_CEP18\" \\\n--session-entry-point \"decrease_allowance\" \\\n// This is the account hash of the previously authorized allowance account.\n--session-arg \"spender:key='account-hash-683f53f56926f54ef9584b07585b025c68415dc05f7b2e56749153574b83d5cd'\" \\\n// This is the additional number of CEP-18 tokens that the authorized account may spend.\n--session-arg \"amount:U256='10'\" \\\n--chain-name <CHAIN NAME> \\\n--payment-amount 1000000000\n```\n\n----------------------------------------\n\nTITLE: Bonding Using Compiled Wasm\nDESCRIPTION: Command template for submitting a validator bid using compiled add_bid.wasm file\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/versioned_docs/version-2.0.0/operators/becoming-a-validator/bonding.md#2025-04-22_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nsudo -u casper casper-client put-deploy \\\n--node-address http://<HOST:PORT> \\\n--secret-key /etc/casper/validator_keys/secret_key.pem \\\n--chain-name <CHAIN_NAME> \\\n--payment-amount <PAYMENT_AMOUNT> \\\n--session-path $HOME/casper-node/target/wasm32-unknown-unknown/release/add_bid.wasm \\\n--session-arg \"public_key:public_key='<PUBLIC_KEY_HEX>'\" \\\n--session-arg \"amount:u512='<BID-AMOUNT>'\" \\\n--session-arg \"delegation_rate:u8='<PERCENT_TO_KEEP_FROM_DELEGATORS>'\" \\\n--session-arg \"minimum_delegation_amount:u64='<MINIMUM_DELEGATION_AMOUNT>'\" \\\n--session-arg \"maximum_delegation_amount:u64='<MAXIMUM_DELEGATION_AMOUNT>'\"\n```\n\n----------------------------------------\n\nTITLE: Creating AddressableEntity Keys from Account Hash in Rust\nDESCRIPTION: This code shows how to create an AddressableEntity key from an account hash in Casper 2.0.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/src/pages/condor/addressable-entity.md#2025-04-22_snippet_0\n\nLANGUAGE: rust\nCODE:\n```\nlet addressable_entity_key = Key::AddressableEntity(EntityAddr::Account(account_hash));\n```\n\n----------------------------------------\n\nTITLE: Sample Output of Signed Transfer Deploy - JSON\nDESCRIPTION: Represents the output JSON of a multi-signature transfer deploy after the `sign-deploy` command. Highlights the additional approval signature added to the deploy file. Essential for verifying the successful addition of multiple signatures.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/versioned_docs/version-2.0.0/developers/cli/transfers/multisig-deploy-transfer.md#2025-04-22_snippet_3\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"hash\": \"88c49fa9108485397a330f294914a6c2d614c581fbe0a31de1a954baad6d709b\",\n  \"header\": {\n    \"account\": \"01360af61b50cdcb7b92cffe2c99315d413d34ef77fadee0c105cc4f1d4120f986\",\n    \"timestamp\": \"2023-10-12T19:14:22.080Z\",\n    \"ttl\": \"30m\",\n    \"gas_price\": 1,\n    \"body_hash\": \"1bb7436d4703816b5cbeef245dd83c0520f1c7173cdf609c664a29487cc5de1c\",\n    \"dependencies\": [],\n    \"chain_name\": \"casper-test\"\n  },\n  \"payment\": {\n    \"ModuleBytes\": {\n      \"module_bytes\": \"\",\n      \"args\": [\n        [\n          \"amount\",\n          {\n            \"cl_type\": \"U512\",\n            \"bytes\": \"0400e1f505\",\n            \"parsed\": \"100000000\"\n          }\n        ]\n      ]\n    }\n  },\n  \"session\": {\n    \"Transfer\": {\n      \"args\": [\n        [\n          \"amount\",\n          {\n            \"cl_type\": \"U512\",\n            \"bytes\": \"0400f90295\",\n            \"parsed\": \"2500000000\"\n          }\n        ],\n        [\n          \"target\",\n          {\n            \"cl_type\": \"PublicKey\",\n            \"bytes\": \"0154d828baafa6858b92919c4d78f26747430dcbecb9aa03e8b44077dc6266cabf\",\n            \"parsed\": \"0154d828baafa6858b92919c4d78f26747430dcbecb9aa03e8b44077dc6266cabf\"\n          }\n        ],\n        [\n          \"id\",\n          {\n            \"cl_type\": {\n              \"Option\": \"U64\"\n            },\n            \"bytes\": \"010100000000000000\",\n            \"parsed\": 1\n          }\n        ]\n      ]\n    }\n  },\n  \"approvals\": [\n    {\n      \"signer\": \"01360af61b50cdcb7b92cffe2c99315d413d34ef77fadee0c105cc4f1d4120f986\",\n      \"signature\": \"015e0db50b174f3627e0e27cb503f0836b30bd0e0f2c4b989366b0df57500a1cb2b0945408c938bc3c33c40dab59a9c6af6f4e01e474330cd27262bfc87680030e\"\n    },\n    {\n      \"signer\": \"01e3d3392c2e0b943abe709b25de5c353e5e1e9d95c7a76e3dd343d8aa1aa08d51\",\n      \"signature\": \"017793ad52d27393b1aa8ff5bb9bdbcb48708910d6cdabd9a89b44690ca174edf8924aad340bf901ac343391cb4cba7cf4db07390372f28ecf471fd522e0b63803\"\n    }\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Withdrawing Bid Using System Auction Contract in Bash\nDESCRIPTION: This snippet demonstrates how to withdraw a bid using the system auction contract's 'withdraw_bid' entry point. It includes required arguments such as node address, secret key, chain name, payment amount, session hash, and session arguments.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/versioned_docs/version-2.0.0/operators/becoming-a-validator/unbonding.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nsudo -u casper casper-client put-deploy \\\n--node-address <HOST:PORT> \\\n--secret-key <PATH> \\\n--chain-name <CHAIN_NAME> \\\n--payment-amount <PAYMENT_AMOUNT_IN_MOTES> \\\n--session-hash <SESSION_HASH> \\\n--session-entry-point withdraw_bid \\\n--session-arg=\"public_key:public_key='<PUBLIC_KEY_HEX>'\" \\\n--session-arg=\"amount:u512='<AMOUNT_TO_WITHDRAW>'\"\n```\n\n----------------------------------------\n\nTITLE: Defining Entry Point: symbol in Casper Network\nDESCRIPTION: This snippet defines the 'symbol' entry point for a Casper Network smart contract. It takes no arguments, returns a String, and has public access with caller-based entry point payment.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/versioned_docs/version-2.0.0/developers/cli/sending-transactions.md#2025-04-22_snippet_11\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"name\": \"symbol\",\n  \"args\": [],\n  \"ret\": \"String\",\n  \"access\": \"Public\",\n  \"entry_point_type\": \"Called\",\n  \"entry_point_payment\": \"Caller\"\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a Casper Project with Cargo\nDESCRIPTION: Uses the cargo casper crate to create a new Casper smart contract project. This command sets up the basic project structure including contract and test crates.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/versioned_docs/version-2.0.0/developers/writing-onchain-code/getting-started.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ncargo casper my-project\n```\n\n----------------------------------------\n\nTITLE: Installing Casper Node Launcher with apt\nDESCRIPTION: Commands to update apt repositories and install the casper-node-launcher package.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/versioned_docs/version-2.0.0/operators/setup/basic-node-configuration.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nsudo apt update\nsudo apt install casper-node-launcher\n```\n\n----------------------------------------\n\nTITLE: Sample Response: Querying Named Key Value by Account (JSON)\nDESCRIPTION: Illustrates the CLValue result of accessing a variable by account named key path, with the output including the value type, bytes, parsed integer, and merkle proof for verification. Ensures correct nested key access format for state queries.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/docs/developers/cli/querying-global-state.md#2025-04-22_snippet_24\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"jsonrpc\": \"2.0\",\n  \"id\": -8997536139716357387,\n  \"result\": {\n    \"api_version\": \"2.0.0\",\n    \"block_header\": null,\n    \"stored_value\": {\n      \"CLValue\": {\n        \"cl_type\": \"I32\",\n        \"bytes\": \"00000000\",\n        \"parsed\": 0\n      }\n    },\n    \"merkle_proof\": \"[14486 hex chars]\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Validator Entry Schema for Casper Network - JSON\nDESCRIPTION: This JSON code defines the schema for a founding validator entry in Casper Network, specifying required object properties for validator bids, including detailed constraints on datatypes and references to reusable schema components. Dependencies include references to definitions for URef, U512, and JsonDelegator components, which must be provided elsewhere in the API documentation. The schema enforces presence and structure for properties like bonding_purse, delegation_rate, delegators, inactive, and staked_amount, ensuring strict type checking for validator bid objects and forbidding additional properties.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/condor/jsonrpc-comp/rpc-1.5/schema/JsonBid.json.md#2025-04-22_snippet_0\n\nLANGUAGE: JSON\nCODE:\n```\n{\n    \"description\": \"An entry in a founding validator map representing a bid.\",\n    \"type\": \"object\",\n    \"required\": [\n        \"bonding_purse\",\n        \"delegation_rate\",\n        \"delegators\",\n        \"inactive\",\n        \"staked_amount\"\n    ],\n    \"properties\": {\n        \"bonding_purse\": {\n            \"description\": \"The purse that was used for bonding.\",\n            \"allOf\": [\n                {\n                    \"$ref\": \"#/components/schemas/URef\"\n                }\n            ]\n        },\n        \"staked_amount\": {\n            \"description\": \"The amount of tokens staked by a validator (not including delegators).\",\n            \"allOf\": [\n                {\n                    \"$ref\": \"#/components/schemas/U512\"\n                }\n            ]\n        },\n        \"delegation_rate\": {\n            \"description\": \"The delegation rate.\",\n            \"type\": \"integer\",\n            \"format\": \"uint8\",\n            \"minimum\": 0\n        },\n        \"delegators\": {\n            \"description\": \"The delegators.\",\n            \"type\": \"array\",\n            \"items\": {\n                \"$ref\": \"#/components/schemas/JsonDelegator\"\n            }\n        },\n        \"inactive\": {\n            \"description\": \"Is this an inactive validator.\",\n            \"type\": \"boolean\"\n        }\n    },\n    \"additionalProperties\": false\n} \n```\n\n----------------------------------------\n\nTITLE: Cloning the Counter Contract Repository in Bash\nDESCRIPTION: Command to clone the Casper ecosystem counter contract repository from GitHub to your local machine.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/versioned_docs/version-1.5.X/resources/beginner/counter/walkthrough.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ngit clone https://github.com/casper-ecosystem/counter\n```\n\n----------------------------------------\n\nTITLE: Example of Validator Changes Result\nDESCRIPTION: An example illustrating the output format of the \"info_get_validator_changes\" RPC call. This JSON includes details like API version and a list of validator changes, depicting a validator addition during a specific era. It helps in diagnosing or validating changes in validator status.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/condor/jsonrpc-comp/rpc-1.5/schema.json.md#2025-04-22_snippet_14\n\nLANGUAGE: json\nCODE:\n```\n{ \"name\": \"info_get_validator_changes_example\", \"params\": [], \"result\": { \"name\": \"info_get_validator_changes_example_result\", \"value\": { \"api_version\": \"1.5.6\", \"changes\": [ { \"public_key\": \"01d9bf2148748a85c89da5aad8ee0b0fc2d105fd39d41a4c796536354f0ae2900c\", \"status_changes\": [ { \"era_id\": 1, \"validator_change\": \"Added\" } ] } ] } } }\n```\n\n----------------------------------------\n\nTITLE: Speculative Execution JSON Response Example\nDESCRIPTION: This snippet shows a sample JSON response from the speculative execution command, highlighting the execution_result field which contains the estimated gas cost (87300473670 in this example) and other execution details.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/versioned_docs/version-2.0.0/developers/dapps/speculative-exec.md#2025-04-22_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n{\n  \"jsonrpc\": \"2.0\",\n  \"id\": -4571113357017152230,\n  \"result\": {\n    \"api_version\": \"1.0.0\",\n    \"block_hash\": \"6ca035b08de092e7f5e8fff771b880c5b4d7463a8f7a9b108888aaad958e5b0f\",\n    \"execution_result\": {\n      \"Success\": {\n        \"effect\": {\n          <Deploy effects removed for conciseness.>\n        },\n        \"transfers\": [],\n        \"cost\": \"87300473670\"\n      }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining EraReport Schema in JSON\nDESCRIPTION: JSON schema for EraReport which tracks equivocators, rewards, and inactive validators during an era in the Casper blockchain.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/condor/jsonrpc-comp/rpc-2.0/schema/components.json.md#2025-04-22_snippet_67\n\nLANGUAGE: json\nCODE:\n```\n\"EraReport_for_PublicKey\": {\n    \"description\": \"Equivocation, reward and validator inactivity information.\",\n    \"type\": \"object\",\n    \"required\": [\n        \"equivocators\",\n        \"inactive_validators\",\n        \"rewards\"\n    ],\n    \"properties\": {\n        \"equivocators\": {\n            \"description\": \"The set of equivocators.\",\n            \"type\": \"array\",\n            \"items\": {\n                \"$ref\": \"#/components/schemas/PublicKey\"\n            }\n        },\n        \"rewards\": {\n            \"description\": \"Rewards for finalization of earlier blocks.\",\n            \"allOf\": [\n                {\n                    \"$ref\": \"#/components/schemas/Array_of_EraReward\"\n                }\n            ]\n        },\n        \"inactive_validators\": {\n            \"description\": \"Validators that haven't produced any unit during the era.\",\n            \"type\": \"array\",\n            \"items\": {\n                \"$ref\": \"#/components/schemas/PublicKey\"\n            }\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Entity Query Result Example\nDESCRIPTION: Example response showing the structure of a state_get_entity_result containing detailed entity information and merkle proof.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/docs/developers/json-rpc/json-rpc-informational.md#2025-04-22_snippet_27\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"id\": 1,\n  \"jsonrpc\": \"2.0\",\n  \"result\": {\n    \"name\": \"state_get_entity_result\",\n    \"value\": {\n      \"api_version\": \"2.0.0\",\n      \"entity\": {\n        \"AddressableEntity\": {\n          \"entity\": {\n            \"protocol_version\": \"2.0.0\",\n            \"entity_kind\": {\n              \"Account\": \"account-hash-e94daaff79c2ab8d9c31d9c3058d7d0a0dd31204a5638dc1451fa67b2e3fb88c\"\n            },\n            \"package_hash\": \"package-0000000000000000000000000000000000000000000000000000000000000000\",\n            \"byte_code_hash\": \"byte-code-0000000000000000000000000000000000000000000000000000000000000000\",\n            \"main_purse\": \"uref-09480c3248ef76b603d386f3f4f8a5f87f597d4eaffd475433f861af187ab5db-007\",\n            \"associated_keys\": [\n              {\n                \"account_hash\": \"account-hash-e94daaff79c2ab8d9c31d9c3058d7d0a0dd31204a5638dc1451fa67b2e3fb88c\",\n                \"weight\": 1\n              }\n            ],\n            \"action_thresholds\": {\n              \"deployment\": 1,\n              \"upgrade_management\": 1,\n              \"key_management\": 1\n            },\n            \"message_topics\": [\n              {\n                \"topic_name\": \"topic\",\n                \"topic_name_hash\": \"0000000000000000000000000000000000000000000000000000000000000000\"\n              }\n            ]\n          },\n          \"named_keys\": [\n            {\n              \"name\": \"key\",\n              \"key\": \"hash-0000000000000000000000000000000000000000000000000000000000000000\"\n            }\n          ],\n          \"entry_points\": [\n            {\n              \"V1CasperVm\": {\n                \"name\": \"entry_point\",\n                \"args\": [],\n                \"ret\": \"Unit\",\n                \"access\": \"Public\",\n                \"entry_point_type\": \"Caller\",\n                \"entry_point_payment\": \"Caller\"\n              }\n            }\n          ]\n        }\n      },\n      \"merkle_proof\": \"01000000006ef2e0949ac76e55812421f755abe129b6244fe7168b77f47a72536147614625016ef2e0949ac76e55812421f755abe129b6244fe7168b77f47a72536147614625000000003529cde5c621f857f75f3810611eb4af3f998caaa9d4a3413cf799f99c67db0307010000006ef2e0949ac76e55812421f755abe129b6244fe7168b77f47a7253614761462501010102000000006e06000000000074769d28aac597a36a03a932d4b43e4f10bf0403ee5c41dd035102553f5773631200b9e173e8f05361b681513c14e25e3138639eb03232581db7557c9e8dbbc83ce94500226a9a7fe4f2b7b88d5103a4fc7400f02bf89c860c9ccdd56951a2afe9be0e0267006d820fb5676eb2960e15722f7725f3f8f41030078f8b2e44bf0dc03f71b176d6e800dc5ae9805068c5be6da1a90b2528ee85db0609cc0fb4bd60bbd559f497a98b67f500e1e3e846592f4918234647fca39830b7e1e6ad6f5b7a99b39af823d82ba1873d000003000000010186ff500f287e9b53f823ae1582b1fa429dfede28015125fd233a31ca04d5012002015cc42669a55467a1fdf49750772bfc1aed59b9b085558eb81510e9b015a7c83b0301e3cf4a34b1db6bfa58808b686cb8fe21ebe0c1bcbcee522649d2b135fe510fe3\"\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Executing Delegate Transaction in Casper Network\nDESCRIPTION: This command allows a user to delegate a stake of CSPR to a validator. It requires the delegator's public key, validator's public key, stake amount, gas price tolerance, and either a secret key or initiator address.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/docs/concepts/transactions.md#2025-04-22_snippet_2\n\nLANGUAGE: json\nCODE:\n```\ncasper-client put-txn delegate\n/// The delegator's public key.\n  --delegator <STRING>\n/// The validator's public key.\n  --validator <STRING>\n/// The amount in motes to stake with this validator.\n  --transaction-amount <INTEGER>\n/// The maximum gas price that the user is willing to pay for this transaction.\n  --gas-price-tolerance <INTEGER>\n/// The path to the local secret key file, or the [`initiator address`](../developers/json-rpc/types_chain.md#initiatoraddr) sending the transaction.\n  <--secret-key <PATH>|--initiator-address <HEX STRING>>\n```\n\n----------------------------------------\n\nTITLE: Example of Block Retrieval Output\nDESCRIPTION: An example result illustrating the output format for the \"chain_get_block\" RPC. It provides the API version and detailed block information, such as hashes, validator awards, and block position within the chain. This data is critical for validating and synchronizing block data across the network.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/condor/jsonrpc-comp/rpc-1.5/schema.json.md#2025-04-22_snippet_18\n\nLANGUAGE: json\nCODE:\n```\n{ \"name\": \"chain_get_block_example\", \"params\": [ { \"name\": \"block_identifier\", \"value\": { \"Hash\": \"13c2d7a68ecdd4b74bf4393c88915c836c863fc4bf11d7f2bd930a1bbccacdcb\" } } ], \"result\": { \"name\": \"chain_get_block_example_result\", \"value\": { \"api_version\": \"1.5.6\", \"block\": { \"hash\": \"13c2d7a68ecdd4b74bf4393c88915c836c863fc4bf11d7f2bd930a1bbccacdcb\", \"header\": { \"parent_hash\": \"0707070707070707070707070707070707070707070707070707070707070707\", \"state_root_hash\": \"0808080808080808080808080808080808080808080808080808080808080808\", \"body_hash\": \"cd502c5393a3c8b66d6979ad7857507c9baf5a8ba16ba99c28378d3a970fff42\", \"random_bit\": true, \"accumulated_seed\": \"ac979f51525cfd979b14aa7dc0737c5154eabe0db9280eceaa8dc8d2905b20d5\", \"era_end\": { \"era_report\": { \"equivocators\": [ \"013b6a27bcceb6a42d62a3a8d02a6f0d73653215771de243a63ac048a18b59da29\" ], \"rewards\": [ { \"validator\": \"018a88e3dd7409f195fd52db2d3cba5d72ca6709bf1d94121bf3748801b40f6f5c\", \"amount\": 1000 } ], \"inactive_validators\": [ \"018139770ea87d175f56a35466c34c7ecccb8d8a91b4ee37a25df60f5b8fc9b394\" ] }, \"next_era_validator_weights\": [ {\n```\n\n----------------------------------------\n\nTITLE: Verifying Deploy Execution with Casper Client - Bash\nDESCRIPTION: Verifies the execution status of the recently submitted deploy using the Casper CLI. This is necessary to ensure the key addition or removal operation has completed successfully. Requires a valid deploy hash as input and outputs deploy execution details.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/versioned_docs/version-1.5.X/resources/advanced/multi-sig/multi-sig-workflow.md#2025-04-22_snippet_19\n\nLANGUAGE: bash\nCODE:\n```\ncasper-client get-deploy --node-address https://node.testnet.casper.network <DEPLOY_HASH>\n```\n\n----------------------------------------\n\nTITLE: Example: Retrieving Casper Account Info with CLI (Bash)\nDESCRIPTION: This snippet demonstrates a practical example of using the `casper-client get-account-info` command with a specific node address and public key. It also shows the structure of the JSON response containing account details like `account_hash`, `action_thresholds`, `associated_keys`, and `main_purse` URef.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/versioned_docs/version-2.0.0/concepts/accounts-and-keys.md#2025-04-22_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\ncasper-client get-account-info --node-address http://65.21.75.254:7777  --public-key 0202ceafc0aa35f5a7bdda22f65c046b9b30b858459e18d3670f035839ad887fe5db\n{\n  \"id\": -2018234245556346849,\n  \"jsonrpc\": \"2.0\",\n  \"result\": {\n    \"account\": {\n      \"account_hash\": \"account-hash-0ea7998b2822afe5b62b08a21d54c941ad791279b089f3f7ede0d72b477eca34\",\n      \"action_thresholds\": {\n        \"deployment\": 1,\n        \"key_management\": 1\n      },\n      \"associated_keys\": [\n        {\n          \"account_hash\": \"account-hash-0ea7998b2822afe5b62b08a21d54c941ad791279b089f3f7ede0d72b477eca34\",\n          \"weight\": 1\n        }\n      ],\n      \"main_purse\": \"uref-974019c976b5f26412ce486158d2431967af35d91387dae8cbcd43c20fce6452-007\",\n      \"named_keys\": []\n    },\n    \"api_version\": \"1.4.15\",\n    \"merkle_proof\": \"[29712 hex chars]\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Query React Component (JSX)\nDESCRIPTION: Defines the `Query` React functional component. It renders a simple button labeled \"Query\". When clicked, this button triggers the `query` function, passing along the component's props (which should include the user's public key).\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/docs/developers/dapps/template-frontend.md#2025-04-22_snippet_13\n\nLANGUAGE: jsx\nCODE:\n```\nimport axios from \"axios\";\nimport { CLPublicKey } from \"casper-js-sdk\";\n\nconst Query = (props) => {\n  return <button onClick={ () => query(props) }>Query</button>;\n}\n\nconst query = (props) => {\n  const accountHash = CLPublicKey.fromHex(props.publicKey).toAccountHashStr().substring(13);\n  axios.get(\"/queryMessage?accountHash=\" + accountHash).then((response) => {\n    alert(response.data)\n  }).catch((error) => {\n    console.error(error.message);\n  });\n}\n\nexport default Query;\n```\n\n----------------------------------------\n\nTITLE: Checking Node Status via JSON RPC Endpoint\nDESCRIPTION: This JSON object shows a sample response from the node's `/status` RPC endpoint. It provides crucial information like the API version, connected peers, and details about the last processed block, including `era_id` and `height`. These values are used to determine if the node has fully synchronized with the network.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/docs/operators/setup/joining.md#2025-04-22_snippet_3\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"api_version\": \"1.4.3\",\n  \"chainspec_name\": \"casper-test\",\n  \"starting_state_root_hash\": \"e2218b6bdb8137a178f242e9de24ef5db06af7925e8e4c65fa82d41df38f4576\",\n  \"peers\": [\n    {\n      \"node_id\": \"tls:0097..b253\",\n      \"address\": \"18.163.249.168:35000\"\n    },\n    ...\n    ...\n    ...\n    {\n      \"node_id\": \"tls:ff95..c014\",\n      \"address\": \"93.186.201.14:35000\"\n    }\n  ],\n  \"last_added_block_info\": {\n    \"hash\": \"8280de05cb34071f276fbe7c69a07cb325ddd373f685877911238b614bdcc5b1\",\n    \"timestamp\": \"2022-01-04T15:33:08.224Z\",\n    \"era_id\": 3240,\n    \"height\": 430162,\n    \"state_root_hash\": \"ec4ff5c4d0a9021984b56e2b6de4a57188101c24e09b765c3fee740353690076\",\n    \"creator\": \"01ace6578907bfe6eba3a618e863bbe7274284c88e405e2857be80dd094726a223\"\n  },\n  \"our_public_signing_key\": \"01cb41ee07d1827e243588711d45040fe46402bf3901fb550abfd08d1341700270\",\n  \"round_length\": null,\n  \"next_upgrade\": null,\n  \"build_version\": \"1.4.3-a44bed1fd-casper-mainnet\",\n  \"uptime\": \"25days 1h 48m 22s 47ms\"\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Rust File Attributes for Wasm Environment\nDESCRIPTION: These attributes are added at the beginning of the `main.rs` file to configure the Rust compiler for a WebAssembly (Wasm) target suitable for the Casper execution environment. `#![no_main]` disables the standard Rust `main` function entry point, and `#![no_std]` prevents the automatic inclusion of the Rust standard library, which is necessary for Wasm environments.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/docs/developers/writing-onchain-code/simple-contract.md#2025-04-22_snippet_7\n\nLANGUAGE: rust\nCODE:\n```\n#![no_std]\n#![no_main]\n```\n\n----------------------------------------\n\nTITLE: Querying Account State\nDESCRIPTION: Commands to get the latest state root hash and query account details from the network.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/versioned_docs/version-2.0.0/resources/advanced/multi-sig/multi-sig-workflow.md#2025-04-22_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\ncasper-client get-state-root-hash --node-address https://node.testnet.casper.network\n\ncasper-client query-global-state \\\n--node-address https://node.testnet.casper.network \\\n--state-root-hash <STATE_ROOT_HASH> \\\n--key account-hash-<PRIMARY_ACCOUNT_HASH>\n```\n\n----------------------------------------\n\nTITLE: Entity and Account Schemas\nDESCRIPTION: Definitions for entity and account identification including AccountIdentifier, BlockIdentifier, EntityIdentifier and EntityAddr. Specifies how different types of accounts and entities are referenced in the system.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/condor/jsonrpc-comp/rpc-2.0/schema/components.json.md#2025-04-22_snippet_58\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"EntityOrAccount\": {\n        \"description\": \"An addressable entity or a legacy account.\",\n        \"oneOf\": [\n            {\n                \"description\": \"An addressable entity.\",\n                \"type\": \"object\",\n                \"required\": [\n                    \"AddressableEntity\"\n                ],\n                \"properties\": {\n                    \"AddressableEntity\": {\n                        \"type\": \"object\",\n                        \"required\": [\n                            \"entity\",\n                            \"entry_points\",\n                            \"named_keys\"\n                        ],\n                        \"properties\": {}\n                    }\n                }\n            }\n        ]\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Installing required packages for Casper tools on Linux\nDESCRIPTION: Install additional packages required for Casper tools, including pkg-config, openssl, and libssl-dev.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/versioned_docs/version-2.0.0/developers/prerequisites.md#2025-04-22_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nsudo apt-get install pkg-config\nsudo apt-get install openssl\nsudo apt-get install libssl-dev\n```\n\n----------------------------------------\n\nTITLE: Example: Withdrawing Bid via System Auction on Testnet (Bash)\nDESCRIPTION: An example `casper-client` command withdrawing 5 CSPR (5 * 10^9 motes) from a validator bid on the Casper Testnet. It calls the `withdraw_bid` entry point of the system auction contract identified by its specific `--session-hash` for Testnet. The payment amount is set to 2.5 CSPR as required.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/versioned_docs/version-1.5.X/operators/becoming-a-validator/unbonding.md#2025-04-22_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nsudo -u casper casper-client put-deploy \\\n--node-address http://65.21.75.254:7777 \\\n--secret-key /etc/casper/validator_keys/secret_key.pem \\\n--chain-name casper-test \\\n--payment-amount 2500000000 \\\n--session-hash hash-93d923e336b20a4c4ca14d592b60e5bd3fe330775618290104f9beb326db7ae2 \\\n--session-entry-point withdraw_bid \\\n--session-arg \"public_key:public_key='01c297d2931fec7e22b2fb1ae3ca5afdfacc2c82ba501e8ed158eecef82b4dcdee'\" \\\n--session-arg \"amount:U512='$[5 * 1000000000]'\"\n```\n\n----------------------------------------\n\nTITLE: Deploying Casper Counter Contract to Testnet\nDESCRIPTION: Command to deploy the counter contract to the Casper Testnet using the casper-client CLI tool. It requires specifying the node address, chain name, secret key, payment amount, and session path.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/versioned_docs/version-2.0.0/resources/quick-start.md#2025-04-22_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\ncasper-client put-deploy \\\n--node-address [NODE_ADDRESS] \\\n--chain-name casper-test \\\n--secret-key [YOUR_PATH_TO_SECRET_KEY_FILE] \\\n--payment-amount 30000000000 \\\n--session-path contracts/counter-v1/target/wasm32-unknown-unknown/release/counter-v1.wasm\n```\n\n----------------------------------------\n\nTITLE: Configuring Gas Costs for Message Interface FFIs in JSON Chainspec\nDESCRIPTION: Defines the gas costs for contract-level message interface host functions in the Casper Network chainspec. Includes base costs for managing message topics and emitting messages, plus an incremental cost structure for multiple messages within a single execution.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/versioned_docs/version-2.0.0/developers/writing-onchain-code/emitting-contract-events.md#2025-04-22_snippet_18\n\nLANGUAGE: json\nCODE:\n```\n[wasm.host_function_costs]\nmanage_message_topic = { cost = 200, arguments = [0, 0, 0, 0] }\nemit_message = { cost = 200, arguments = [0, 0, 0, 0] }\ncost_increase_per_message = 50\n```\n\n----------------------------------------\n\nTITLE: Querying Global State with Casper Client\nDESCRIPTION: Example command for querying the global state of an NFT contract using casper-client with a specific contract hash and state root hash\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/versioned_docs/version-1.5.X/resources/tokens/cep78/using-casper-client/querying-NFTs.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ncasper-client query-global-state -n http://localhost:11101/rpc/ \\\n--key hash-378a43e38bc5129d8aa3bcd04f5c9a97be73f85b5be574182ac1346f04520796 \\\n--state-root-hash 2a8cfc20d24b4bc629ea6d26cc820560a1baf3d4275079d5382242c9fa1e86fe\n```\n\n----------------------------------------\n\nTITLE: Requesting Chainspec in JSON\nDESCRIPTION: This snippet illustrates a JSON request to retrieve chainspec bytes using the 'info_get_chainspec' method. It demonstrates calling the method without parameters, and the expected output includes the chainspec bytes and possibly null genesis accounts or global state bytes.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/docs/developers/json-rpc/json-rpc-informational.md#2025-04-22_snippet_8\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"id\": 5510244237763930243,\n  \"jsonrpc\": \"2.0\",\n  \"method\": \"info_get_chainspec\",\n  \"params\": []\n}\n```\n\n----------------------------------------\n\nTITLE: Setting up Python Virtual Environment\nDESCRIPTION: Commands to create and activate a Python virtual environment.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/versioned_docs/version-1.5.X/developers/dapps/setup-nctl.md#2025-04-22_snippet_8\n\nLANGUAGE: bash\nCODE:\n```\npython3 -m venv env\nsource env/bin/activate\n```\n\n----------------------------------------\n\nTITLE: Viewing Ed25519 Public Key Hex Format\nDESCRIPTION: Command to display the hexadecimal format of the Ed25519 public key. The public key starts with prefix '01' and is 66 bytes long.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/docs/concepts/accounts-and-keys.md#2025-04-22_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ncat ed25519-keys/public_key_hex\n```\n\n----------------------------------------\n\nTITLE: Defining 'state_get_auction_info' RPC Method Schema in JSON\nDESCRIPTION: This JSON object defines the schema for the 'state_get_auction_info' RPC method. It specifies the method name, a summary, optional parameters like 'block_identifier' (referencing '#/components/schemas/BlockIdentifier'), the structure of the result including 'api_version' and 'auction_state' (referencing '#/components/schemas/AuctionState'), and provides an example request and response. The method retrieves auction information (bids and validators) for a given block or the latest block.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/condor/jsonrpc-comp/rpc-1.5/state_get_auction_info.json.md#2025-04-22_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"name\": \"state_get_auction_info\",\n  \"summary\": \"returns the bids and validators as of either a specific block (by height or hash), or the most recently added block\",\n  \"params\": [\n    {\n      \"name\": \"block_identifier\",\n      \"schema\": {\n        \"description\": \"The block identifier.\",\n        \"$ref\": \"#/components/schemas/BlockIdentifier\"\n      },\n      \"required\": false\n    }\n  ],\n  \"result\": {\n    \"name\": \"state_get_auction_info_result\",\n    \"schema\": {\n      \"description\": \"Result for \\\"state_get_auction_info\\\" RPC response.\",\n      \"type\": \"object\",\n      \"required\": [\n        \"api_version\",\n        \"auction_state\"\n      ],\n      \"properties\": {\n        \"api_version\": {\n          \"description\": \"The RPC API version.\",\n          \"type\": \"string\"\n        },\n        \"auction_state\": {\n          \"description\": \"The auction state.\",\n          \"$ref\": \"#/components/schemas/AuctionState\"\n        }\n      },\n      \"additionalProperties\": false\n    }\n  },\n  \"examples\": [\n    {\n      \"name\": \"state_get_auction_info_example\",\n      \"params\": [\n        {\n          \"name\": \"block_identifier\",\n          \"value\": {\n            \"Hash\": \"13c2d7a68ecdd4b74bf4393c88915c836c863fc4bf11d7f2bd930a1bbccacdcb\"\n          }\n        }\n      ],\n      \"result\": {\n        \"name\": \"state_get_auction_info_example_result\",\n        \"value\": {\n          \"api_version\": \"1.5.6\",\n          \"auction_state\": {\n            \"state_root_hash\": \"0b0b0b0b0b0b0b0b0b0b0b0b0b0b0b0b0b0b0b0b0b0b0b0b0b0b0b0b0b0b0b0b\",\n            \"block_height\": 10,\n            \"era_validators\": [\n              {\n                \"era_id\": 10,\n                \"validator_weights\": [\n                  {\n                    \"public_key\": \"01197f6b23e16c8532c6abc838facd5ea789be0c76b2920334039bfa8b3d368d61\",\n                    \"weight\": \"10\"\n                  }\n                ]\n              }\n            ],\n            \"bids\": [\n              {\n                \"public_key\": \"01197f6b23e16c8532c6abc838facd5ea789be0c76b2920334039bfa8b3d368d61\",\n                \"bid\": {\n                  \"bonding_purse\": \"uref-fafafafafafafafafafafafafafafafafafafafafafafafafafafafafafafafa-007\",\n                  \"staked_amount\": \"10\",\n                  \"delegation_rate\": 0,\n                  \"delegators\": [],\n                  \"inactive\": false\n                }\n              }\n            ]\n          }\n        }\n      }\n    }\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Verifying Intersection Result in Named Keys - Casper Test Framework - Rust\nDESCRIPTION: This snippet queries the result of a contract execution saved in an account's named keys and asserts the expected intersection of authorization keys. It retrieves the receipt, performs a query, extracts CLValue data, and compares the actual intersection against expectations. Dependencies are test builder API, expected account data, and correct constants for key names. The input is the post-deploy builder state; output is an assertion of intersection correctness. Main limitation: expects only a single intersection scenario.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/versioned_docs/version-1.5.X/resources/advanced/list-auth-keys-tutorial.md#2025-04-22_snippet_16\n\nLANGUAGE: rust\nCODE:\n```\nlet intersection_receipt: Key = *builder\n    .get_expected_account(account_addr_1)\n    .named_keys()\n    .get(INTERSECTION_RECEIPT)\n    .expect(\"must have this entry in named keys\");\n\nlet actual_intersection = builder\n    .query(None, intersection_receipt, &[])\n    .expect(\"must have stored_value\")\n    .as_cl_value()\n    .map(|intersection_cl_value| {\n        CLValue::into_t::<Vec<AccountHash>>(intersection_cl_value.clone())\n    })\n    .unwrap()\n    .unwrap();\n\nlet expected_intersection = vec![*DEFAULT_ACCOUNT_ADDR];\n\nassert_eq!(actual_intersection, expected_intersection);\n```\n\n----------------------------------------\n\nTITLE: Cloning CEP-18 Token Repository Using Bash\nDESCRIPTION: This bash snippet demonstrates how to clone the official CEP-18 token implementation repository and change the current directory to the cloned project. Users must have Git installed to execute this command. It is the first file operation needed to obtain and work with the contract's code.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/docs/resources/tokens/cep18/full-tutorial.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ngit clone https://github.com/casper-ecosystem/cep18 && cd cep18\n```\n\n----------------------------------------\n\nTITLE: Querying Account Details in Casper Network\nDESCRIPTION: This command retrieves account details from the global state using an account hash. It demonstrates how to query specific account information.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/versioned_docs/version-1.5.X/developers/cli/querying-global-state.md#2025-04-22_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\ncasper-client query-global-state \\\n  --node-address http://localhost:11101 \\\n  --state-root-hash fa968344a2000282686303f1664c474465f9a028f32ec4f51791d9fa64c0bcd7 \\\n  --key account-hash-1d17e3fdad268f866a73558d1ae45e1eea3924c247871cb63f67ebf1a116e66d\n```\n\n----------------------------------------\n\nTITLE: Defining Block Retrieval Options in JSON Schema\nDESCRIPTION: This JSON schema defines two methods for retrieving a block: by 'Hash' and by 'Height'. The schema uses 'anyOf' to specify these options, allowing a block to be identified either with a unique hash reference or by specifying its numeric height. This ensures flexibility and precision in accessing blocks. Prerequisites include understanding of JSON schema and Casper Network's block structure. No additional properties are allowed, ensuring strict data structure compliance.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/condor/jsonrpc-comp/rpc-1.5/schema/BlockIdentifier.json.md#2025-04-22_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"description\": \"Identifier for possible ways to retrieve a block.\",\n    \"anyOf\": [\n        {\n            \"description\": \"Identify and retrieve the block with its hash.\",\n            \"type\": \"object\",\n            \"required\": [\n                \"Hash\"\n            ],\n            \"properties\": {\n                \"Hash\": {\n                    \"$ref\": \"#/components/schemas/BlockHash\"\n                }\n            },\n            \"additionalProperties\": false\n        },\n        {\n            \"description\": \"Identify and retrieve the block with its height.\",\n            \"type\": \"object\",\n            \"required\": [\n                \"Height\"\n            ],\n            \"properties\": {\n                \"Height\": {\n                    \"type\": \"integer\",\n                    \"format\": \"uint64\",\n                    \"minimum\": 0\n                }\n            },\n            \"additionalProperties\": false\n        }\n    ]\n}\n```\n\n----------------------------------------\n\nTITLE: Submitting Speculative Execution Request via Casper JSON-RPC (JSON)\nDESCRIPTION: This JSON snippet shows a full request body for invoking the deprecated speculative_exec JSON-RPC endpoint on a Casper node. It demonstrates how to structure both the Deploy object and RPC parameters, including Deploy header fields, payment and session arguments, and cryptographic approvals. The snippet requires a Casper node with the endpoint and port (default 7778) enabled and expects Deploys to be formatted per the schema shown. The endpoint is deprecated and should be replaced with speculative_exec_txn in new integrations.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/docs/developers/json-rpc/json-rpc-transactional.md#2025-04-22_snippet_4\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"jsonrpc\": \"2.0\",\n  \"method\": \"speculative_exec\",\n  \"params\": {\n    \"deploy\": {\n      \"hash\": \"b6aa46333fb858deee7f259a5bca581251c6200a5d902aeb1244c3a7169b5971\",\n      \"header\": {\n        \"account\": \"01a2905e4680aa49e0b44100d9dfc861b9605bb35f9956b1e99eb43863363d80aa\",\n        \"timestamp\": \"2023-05-23T13:32:45.554Z\",\n        \"ttl\": \"30m\",\n        \"gas_price\": 1,\n        \"body_hash\": \"74db109805bb20de43ef89a5b084544a858908b236601519d5827cd9b7fbb925\",\n        \"dependencies\": [],\n        \"chain_name\": \"integration-test\"\n      },\n      \"payment\": {\n        \"ModuleBytes\": {\n          \"module_bytes\": \"\",\n          \"args\": [\n            [\n              \"amount\",\n              {\n                \"cl_type\": \"U512\",\n                \"bytes\": \"0400e1f505\",\n                \"parsed\": \"100000000\"\n              }\n            ]\n          ]\n        }\n      },\n      \"session\": {\n        \"Transfer\": {\n          \"args\": [\n            [\n              \"amount\",\n              {\n                \"cl_type\": \"U512\",\n                \"bytes\": \"0400f90295\",\n                \"parsed\": \"2500000000\"\n              }\n            ],\n            [\n              \"target\",\n              {\n                \"cl_type\": \"PublicKey\",\n                \"bytes\": \"01265ea737411b349ad3d0fc724c2c588acd2765c057e5c690cd5e3dade401782b\",\n                \"parsed\": \"01265ea737411b349ad3d0fc724c2c588acd2765c057e5c690cd5e3dade401782b\"\n              }\n            ],\n            [\n              \"id\",\n              {\n                \"cl_type\": {\n                  \"Option\": \"U64\"\n                },\n                \"bytes\": \"010000000000000000\",\n                \"parsed\": 0\n              }\n            ]\n          ]\n        }\n      },\n      \"approvals\": [\n        {\n          \"signer\": \"01a2905e4680aa49e0b44100d9dfc861b9605bb35f9956b1e99eb43863363d80aa\",\n          \"signature\": \"01c94d517d5bbc8d5c74e0e68b8cb308561ff979a1c91907b56d427cc90156c437726c0b736d17f7303f2db66e405c7e5c8175b8b863703938eff1659766dff808\"\n        }\n      ]\n    }\n  },\n  \"id\": 6889533540839698701\n}\n```\n\n----------------------------------------\n\nTITLE: Viewing Help for casper-client put-deploy Arguments - Bash\nDESCRIPTION: This Bash command displays the help screen for the put-deploy subcommand, detailing all configurable options for session code deployment. Useful for exploring arguments, defaults, and examples before running deploys on the Casper network. Only dependency is the casper-client CLI tool.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/docs/developers/writing-onchain-code/writing-session-code.md#2025-04-22_snippet_11\n\nLANGUAGE: bash\nCODE:\n```\ncasper-client put-deploy --help\n```\n\n----------------------------------------\n\nTITLE: Refund Handling Configuration\nDESCRIPTION: Defines how refunds are managed post-deploy execution by specifying a refund ratio. This affects how unused gas fees are reallocated to users. Dependencies focus on 'core' configurations in 'chainspec.toml'.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/versioned_docs/version-1.5.X/operators/setup-network/create-private.md#2025-04-22_snippet_2\n\nLANGUAGE: toml\nCODE:\n```\n[core]\nrefund_handling = { type = \"refund\", refund_ratio = [1, 1] }\n```\n\n----------------------------------------\n\nTITLE: Submitting a Bonding Request with Compiled Wasm in Bash\nDESCRIPTION: This Bash command showcases how to deploy a bonding transaction to the Casper network using a compiled `add_bid.wasm` file. Users must provide a node address, secret key, chain name, path to the compiled Wasm, payment amount, public key, bid amount, and delegation rate. The command generates a deploy hash that can be utilized for tracking the processing status. The method outlined is generally more expensive than using the system auction contract method.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/versioned_docs/version-1.5.X/operators/becoming-a-validator/bonding.md#2025-04-22_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nsudo -u casper casper-client put-deploy \\\n--node-address http://<HOST:PORT> \\\n--secret-key /etc/casper/validator_keys/secret_key.pem \\\n--chain-name <CHAIN_NAME> \\\n--payment-amount <PAYMENT_AMOUNT> \\\n--session-path $HOME/casper-node/target/wasm32-unknown-unknown/release/add_bid.wasm \\\n--session-arg=\"public_key:public_key='<PUBLIC_KEY_HEX>'\" \\\n--session-arg=\"amount:u512='<BID-AMOUNT>'\" \\\n--session-arg=\"delegation_rate:u8='<PERCENT_TO_KEEP_FROM_DELEGATORS>'\"\n```\n\n----------------------------------------\n\nTITLE: Streamed Decompression of Casper Node Database\nDESCRIPTION: Process for streaming a compressed Casper node database directly from a URL using curl and decompressing it using Zstandard. Suitable for scenarios where storage is limited or files are hosted online.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/versioned_docs/version-1.5.X/operators/maintenance/archiving-and-restoring.md#2025-04-22_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\ncurl -s --output - <URL for tar.zstd file>\n```\n\nLANGUAGE: bash\nCODE:\n```\ncurl -s --output - <tar.zst URL> | zstd -d --long=31 | sudo -u casper tar -xv\n```\n\n----------------------------------------\n\nTITLE: Info Get Chainspec Request Example\nDESCRIPTION: Example JSON request for the info_get_chainspec endpoint to retrieve raw bytes of chainspec configuration files.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/versioned_docs/version-2.0.0/developers/json-rpc/json-rpc-informational.md#2025-04-22_snippet_6\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"id\": 5510244237763930243,\n  \"jsonrpc\": \"2.0\",\n  \"method\": \"info_get_chainspec\",\n  \"params\": []\n}\n```\n\n----------------------------------------\n\nTITLE: CEP-18 Test Context Implementation\nDESCRIPTION: Implementation of the TestContext struct and setup functions for CEP-18 token testing, including contract installation and test account creation\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/versioned_docs/version-2.0.0/resources/tokens/cep18/tests.md#2025-04-22_snippet_4\n\nLANGUAGE: rust\nCODE:\n```\npub(crate) struct TestContext {\npub(crate) cep18_token: ContractHash,\npub(crate) cep18_test_contract_package: ContractPackageHash,\n}\n\npub(crate) fn setup() -> (InMemoryWasmTestBuilder, TestContext) {\n    setup_with_args(runtime_args! {\n        ARG_NAME => TOKEN_NAME,\n        ARG_SYMBOL => TOKEN_SYMBOL,\n        ARG_DECIMALS => TOKEN_DECIMALS,\n        ARG_TOTAL_SUPPLY => U256::from(TOKEN_TOTAL_SUPPLY),\n    })\n}\n```\n\n----------------------------------------\n\nTITLE: Removing an Associated Key using Casper Client (Bash)\nDESCRIPTION: Sends a deploy to a Casper node to remove an associated key from an account using the `remove_account.wasm` session code. It specifies the node address, chain name, payment amount, secret key file, path to the WASM file, and the account hash of the key to be removed.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/versioned_docs/version-2.0.0/resources/advanced/multi-sig/multi-sig-workflow.md#2025-04-22_snippet_17\n\nLANGUAGE: bash\nCODE:\n```\ncasper-client put-deploy --node-address https://node.testnet.casper.network \\\n--chain-name \"casper-test\" \\\n--payment-amount 500000000 \\\n--secret-key $PATH/secret_key.pem \\\n--session-path target/wasm32-unknown-unknown/release/remove_account.wasm \\\n--session-arg \"remove_key:key='account-hash-1fed34baa6807a7868bb18f91b161d99ebf21763810fe4c92e39775d10bbf1f8\"\n```\n\n----------------------------------------\n\nTITLE: Initializing Test Context and Accounts for Casper CEP-18 Contract in Rust\nDESCRIPTION: This Rust snippet defines the TestContext struct and functions to set up and initialize the test environment for the CEP-18 contract, including test accounts and contract instances. The setup functions use the InMemoryWasmTestBuilder to create a simulated blockchain, execute account transfers for initialization, deploy necessary contracts, and store references to the created contract hashes and package hashes for test use. Prerequisites include setup of required constants and the Casper contract binaries, proper test account addresses, and runtime arguments.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/docs/resources/tokens/cep18/tests.md#2025-04-22_snippet_4\n\nLANGUAGE: rust\nCODE:\n```\n// File https://github.com/casper-ecosystem/cep18/blob/dev/tests/src/utility/installer_request_builders.rs\n\n// Creating the `TestContext` struct.\n\npub(crate) struct TestContext {\npub(crate) cep18_token: ContractHash,\npub(crate) cep18_test_contract_package: ContractPackageHash,\n}\n\n// Setting up the test instance of CEP-18.\n\npub(crate) fn setup() -> (InMemoryWasmTestBuilder, TestContext) {\n    setup_with_args(runtime_args! {\n        ARG_NAME => TOKEN_NAME,\n        ARG_SYMBOL => TOKEN_SYMBOL,\n        ARG_DECIMALS => TOKEN_DECIMALS,\n        ARG_TOTAL_SUPPLY => U256::from(TOKEN_TOTAL_SUPPLY),\n    })\n}\n\n// Establishing test accounts.\n\npub(crate) fn setup_with_args(install_args: RuntimeArgs) -> (InMemoryWasmTestBuilder, TestContext) {\n    let mut builder = InMemoryWasmTestBuilder::default();\n    builder.run_genesis(&PRODUCTION_RUN_GENESIS_REQUEST);\n\n    let id: Option<u64> = None;\n    let transfer_1_args = runtime_args! {\n        mint::ARG_TARGET => *ACCOUNT_1_ADDR,\n        mint::ARG_AMOUNT => MINIMUM_ACCOUNT_CREATION_BALANCE,\n        mint::ARG_ID => id,\n    };\n    let transfer_2_args = runtime_args! {\n        mint::ARG_TARGET => *ACCOUNT_2_ADDR,\n        mint::ARG_AMOUNT => MINIMUM_ACCOUNT_CREATION_BALANCE,\n        mint::ARG_ID => id,\n    };\n\n    let transfer_request_1 =\n        ExecuteRequestBuilder::transfer(*DEFAULT_ACCOUNT_ADDR, transfer_1_args).build();\n    let transfer_request_2 =\n        ExecuteRequestBuilder::transfer(*DEFAULT_ACCOUNT_ADDR, transfer_2_args).build();\n\n    // Installing the test version of CEP-18 with the default account.\n\n    let install_request_1 =\n        ExecuteRequestBuilder::standard(*DEFAULT_ACCOUNT_ADDR, CEP18_CONTRACT_WASM, install_args)\n            .build();\n\n    let install_request_2 = ExecuteRequestBuilder::standard(\n        *DEFAULT_ACCOUNT_ADDR,\n        CEP18_TEST_CONTRACT_WASM,\n        RuntimeArgs::default(),\n    )\n    .build();\n\n    builder.exec(transfer_request_1).expect_success().commit();\n    builder.exec(transfer_request_2).expect_success().commit();\n    builder.exec(install_request_1).expect_success().commit();\n    builder.exec(install_request_2).expect_success().commit();\n\n    let account = builder\n        .get_account(*DEFAULT_ACCOUNT_ADDR)\n        .expect(\"should have account\");\n\n    let cep18_token = account\n        .named_keys()\n        .get(CEP18_TOKEN_CONTRACT_KEY)\n        .and_then(|key| key.into_hash())\n        .map(ContractHash::new)\n        .expect(\"should have contract hash\");\n\n    let cep18_test_contract_package = account\n        .named_keys()\n        .get(CEP18_TEST_CONTRACT_KEY)\n        .and_then(|key| key.into_hash())\n        .map(ContractPackageHash::new)\n        .expect(\"should have contract package hash\");\n\n    let test_context = TestContext {\n        cep18_token,\n        cep18_test_contract_package,\n    };\n\n    (builder, test_context)\n}\n\n```\n\n----------------------------------------\n\nTITLE: Recovering from Lost Primary Key using Casper Associated Keys in JSON\nDESCRIPTION: This JSON example illustrates a Casper account with a primary key (weight 3) and three associated keys (each weight 1), where two associated keys are sufficient to sign deploys (deployment threshold: 2), and all three can jointly perform account updates (key management threshold: 3). The design enables associated keys to remove a compromised primary key, supporting robust multisig recovery flows per Casper standards. No other software dependencies are needed.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/docs/resources/advanced/multi-sig/other-scenarios.md#2025-04-22_snippet_4\n\nLANGUAGE: json\nCODE:\n```\n{\\n\\\"Account\\\": {\\n   \\\"account_address\\\": \\\"account-hash-a1…\\\",\\n   \\\"action_thresholds\\\": {\\n      \\\"deployment\\\": 2,\\n      \\\"key_management\\\": 3\\n   },\\n   \\\"associated_keys\\\": [\\n      {\\n         \\\"account_address\\\": \\\"account-hash-a1…\\\", // primary key\\n         \\\"weight\\\": 3\\n      },\\n      {\\n         \\\"account_address\\\": \\\"account-hash-b2…\\\", // associated key\\n         \\\"weight\\\": 1\\n      },\\n      {\\n         \\\"account_address\\\": \\\"account-hash-c3…\\\", // associated key\\n         \\\"weight\\\": 1\\n      },\\n      {\\n         \\\"account_address\\\": \\\"account-hash-d4…\\\", // associated key\\n         \\\"weight\\\": 1\\n      }\\n   ],\\n   \\\"main_purse\\\": \\\"uref-1234…\\\",\\n   \\\"named_keys\\\": []\\n}\\n}\n```\n\n----------------------------------------\n\nTITLE: Source Account JSON-RPC Response\nDESCRIPTION: Sample JSON-RPC response showing the balance for the source account.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/versioned_docs/version-1.5.X/developers/cli/transfers/verify-transfer.md#2025-04-22_snippet_8\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"jsonrpc\": \"2.0\",\n  \"result\": {\n    \"api_version\": \"1.5.3\",\n    \"balance\": \"1109111876194\"\n  },\n  \"id\": 6\n}\n```\n\n----------------------------------------\n\nTITLE: Sample put-deploy Response\nDESCRIPTION: Example JSON response from a successful put-deploy command showing the deploy hash and API version.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/versioned_docs/version-1.5.X/developers/cli/sending-deploys.md#2025-04-22_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"id\": -6958186952964949950,\n  \"jsonrpc\": \"2.0\",\n  \"result\": {\n    \"api_version\": \"1.4.5\",\n    \"deploy_hash\": \"34550c8b86d5e38260882466e98427c62a27a96d85c13f49041a1579ebf84496\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Checking CEP-18 Token Balance with Utility Contract\nDESCRIPTION: This command invokes the 'check_balance_of' entry point on the utility contract to check an account's token balance. It requires the CEP-18 contract hash and the target account hash as parameters.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/versioned_docs/version-1.5.X/resources/tokens/cep18/transfer.md#2025-04-22_snippet_2\n\nLANGUAGE: json\nCODE:\n```\ncasper-client put-deploy -n http://<node IP>:<PORT>\\\n--secret-key ~/casper/demo/user_a/secret_key.pem \\\n--session-package-name \"cep18_test_contract\" \\\n--session-entry-point \"check_balance_of\" \\\n// This is the contract hash of your CEP-18 contract instance, passed in as an `account-hash-`.\n--session-arg \"token_contract:account_hash='account-hash-b568f50a64acc8bbe43462ffe243849a88111060b228dacb8f08d42e26985180'\" \\\n// This is the account hash of the account you are checking the balance of.\n--session-arg \"address:key='account-hash-303c0f8208220fe9a4de40e1ada1d35fdd6c678877908f01fddb2a56502d67fd'\" \\\n--chain-name <CHAIN NAME> \\\n--payment-amount 1000000000\n```\n\n----------------------------------------\n\nTITLE: Defining CLType Schema in JSON\nDESCRIPTION: JSON schema definition for CLType, including various subtypes like ByteArray, Result, Map, and Tuple types. This schema describes the structure of Casper Network's CLType, which is used for type representation in the network.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/condor/jsonrpc-comp/rpc-2.0/schema.json.md#2025-04-22_snippet_31\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"description\": \"Fixed-length list of a single `CLType` (comparable to a Rust array).\",\n  \"type\": \"object\",\n  \"required\": [\n    \"ByteArray\"\n  ],\n  \"properties\": {\n    \"ByteArray\": {\n      \"type\": \"integer\",\n      \"format\": \"uint32\",\n      \"minimum\": 0.0\n    }\n  },\n  \"additionalProperties\": false\n}\n```\n\n----------------------------------------\n\nTITLE: Calling Counter Contract with Package Hash and Version - Casper CLI - Rust\nDESCRIPTION: Demonstrates usage of casper-client to invoke the 'counter-inc' entry point of a Counter contract by specifying its package hash and version. Key parameters include the real network endpoint, chain name, payment amount, and the target contract's package hash. The inputs are the CLI parameters, and the response should be a deploy hash for tracking. Requires access to the specified node and possession of appropriate keys.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/docs/developers/cli/calling-contracts.md#2025-04-22_snippet_5\n\nLANGUAGE: rust\nCODE:\n```\ncasper-client put-deploy \\\n    --node-address http://65.21.235.219:7777 \\\n    --chain-name casper-test \\\n    --secret-key [KEY_PATH]/secret_key.pem \\\n    --payment-amount 100000000 \\\n    --session-package-hash hash-76a8c3daa6d6ac799ce9f46d82ac98efb271d2d64b517861ec89a06051ef019e \\\n    --session-entry-point \"counter-inc\" \\\n    --session-version 1\n```\n\n----------------------------------------\n\nTITLE: Requesting Purse Balance via query_balance (Casper RPC) - JSON\nDESCRIPTION: This snippet shows a JSON-RPC 2.0 request to the query_balance method on the Casper blockchain, used to retrieve the balance for a specific purse. Dependencies include network connectivity to a Casper node and valid identifiers. The main parameters are the 'state_identifier' (to specify the chain state, such as a block hash) and the 'purse_identifier' (to select the purse), with expected output being a balance object if successful.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/docs/developers/json-rpc/json-rpc-informational.md#2025-04-22_snippet_16\n\nLANGUAGE: json\nCODE:\n```\n{\\n  \"id\": 1,\\n  \"jsonrpc\": \"2.0\",\\n  \"method\": \"query_balance\",\\n  \"params\": [\\n      {\\n        \"name\": \"state_identifier\",\\n        \"value\": {\\n          \"BlockHash\": \"13c2d7a68ecdd4b74bf4393c88915c836c863fc4bf11d7f2bd930a1bbccacdcb\"\\n        }\\n    },\\n      {\\n        \"name\": \"purse_identifier\",\\n        \"value\": {\\n          \"main_purse_under_account_hash\": \"account-hash-0909090909090909090909090909090909090909090909090909090909090909\"\\n        }\\n      }\\n    ]\\n}\\n\n```\n\n----------------------------------------\n\nTITLE: Reacting to Events in JavaScript\nDESCRIPTION: Demonstrates how to parse and react to specific events in JavaScript, such as TransactionAccepted events.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/docs/developers/dapps/monitor-and-consume-events.md#2025-04-22_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nconst eventHandler = (event) => {\n  if (event.body.TransactionAccepted.header.account == \"012481699f9231e36ecf002675cd7186b48e6a735d10ec1b30f587ca716937752c\") {\n    // Perform an action\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Query React Component\nDESCRIPTION: React component implementation for querying messages from the smart contract, including account hash derivation and API interaction.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/versioned_docs/version-2.0.0/developers/dapps/template-frontend.md#2025-04-22_snippet_18\n\nLANGUAGE: jsx\nCODE:\n```\nimport axios from \"axios\";\nimport { CLPublicKey } from \"casper-js-sdk\";\n\nconst Query = (props) => {\n  return <button onClick={ () => query(props) }>Query</button>;\n}\n\nconst query = (props) => {\n  const accountHash = CLPublicKey.fromHex(props.publicKey).toAccountHashStr().substring(13);\n  axios.get(\"/queryMessage?accountHash=\" + accountHash).then((response) => {\n    alert(response.data)\n  }).catch((error) => {\n    console.error(error.message);\n  });\n}\n\nexport default Query;\n```\n\n----------------------------------------\n\nTITLE: Contract Package Schema Definition - JSON\nDESCRIPTION: JSON schema definition for a ContractPackage object that represents a contract's definition, metadata, and security container. Includes fields for access control, versioning, and user group management.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/condor/jsonrpc-comp/rpc-2.0/schema.json.md#2025-04-22_snippet_68\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"description\": \"Contract definition, metadata, and security container.\",\n  \"type\": \"object\",\n  \"required\": [\n    \"access_key\",\n    \"disabled_versions\",\n    \"groups\",\n    \"lock_status\",\n    \"versions\"\n  ],\n  \"properties\": {\n    \"access_key\": {\n      \"description\": \"Key used to add or disable versions\",\n      \"allOf\": [\n        {\n          \"$ref\": \"#/components/schemas/URef\"\n        }\n      ]\n    },\n    \"versions\": {\n      \"description\": \"All versions (enabled & disabled)\",\n      \"type\": \"array\",\n      \"items\": {\n        \"$ref\": \"#/components/schemas/ContractVersion\"\n      }\n    },\n    \"disabled_versions\": {\n      \"description\": \"Disabled versions\",\n      \"type\": \"array\", \n      \"items\": {\n        \"$ref\": \"#/components/schemas/ContractVersionKey\"\n      },\n      \"uniqueItems\": true\n    },\n    \"groups\": {\n      \"description\": \"Mapping maintaining the set of URefs associated with each \\\"user group\\\". This can be used to control access to methods in a particular version of the contract. A method is callable by any context which \\\"knows\\\" any of the URefs associated with the method's user group.\",\n      \"allOf\": [\n        {\n          \"$ref\": \"#/components/schemas/Array_of_NamedUserGroup\"\n        }\n      ]\n    },\n    \"lock_status\": {\n      \"description\": \"A flag that determines whether a contract is locked\",\n      \"allOf\": [\n        {\n          \"$ref\": \"#/components/schemas/ContractPackageStatus\"\n        }\n      ]\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Accessing Session Arguments in Casper\nDESCRIPTION: Shows how to access session arguments within a Casper smart contract using the get_key function.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/versioned_docs/version-2.0.0/resources/moving-to-casper.md#2025-04-22_snippet_8\n\nLANGUAGE: bash\nCODE:\n```\nlet uref: URef = runtime::get_key(Key_Name)\n```\n\n----------------------------------------\n\nTITLE: Installing Casper Node, Client, and Tools - Bash\nDESCRIPTION: This bash command installs the Casper node client, node launcher, and jq (for JSON parsing). Run as sudo, it ensures all main components necessary for Casper node operations and related command-line utility tasks are present. It assumes the repository setup was performed as shown in the previous snippet. Inputs: none. Outputs: installed OS packages.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/docs/operators/setup/install-node.md#2025-04-22_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nsudo apt install -y casper-client casper-node-launcher jq\n```\n\n----------------------------------------\n\nTITLE: Defining Array Schema with AssociatedKey Reference in JSON\nDESCRIPTION: This JSON schema snippet defines an array where each item references the AssociatedKey schema via a $ref field. It is intended for validating or generating documentation for collections of associated key objects within API components. The snippet requires the existence of a 'components/schemas/AssociatedKey' schema definition in the wider schema, and expects an array input containing objects conforming to the AssociatedKey schema. No additional constraints on array length or item uniqueness are specified.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/condor/jsonrpc-comp/rpc-2.0/schema/Array_of_AssociatedKey.json.md#2025-04-22_snippet_0\n\nLANGUAGE: JSON\nCODE:\n```\n{\\n    \\\"type\\\": \\\"array\\\",\\n    \\\"items\\\": {\\n        \\\"$ref\\\": \\\"#/components/schemas/AssociatedKey\\\"\\n    }\\n} \n```\n\n----------------------------------------\n\nTITLE: Installing the Casper Contract Package via npm\nDESCRIPTION: This shell command installs the `casper-contract` package using npm. This package provides the necessary APIs and types for developing Casper smart contracts in AssemblyScript. It should be run within the project directory.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/versioned_docs/version-1.5.X/developers/writing-onchain-code/assembly-script.md#2025-04-22_snippet_1\n\nLANGUAGE: sh\nCODE:\n```\nnpm i casper-contract\n```\n\n----------------------------------------\n\nTITLE: Specifying Dependencies for Casper Testing in Cargo.toml\nDESCRIPTION: This snippet shows how to specify the necessary dependencies in Cargo.toml for testing Casper session code. It includes the casper-engine-test-support, casper-execution-engine, and casper-types crates.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/versioned_docs/version-2.0.0/developers/writing-onchain-code/testing-session-code.md#2025-04-22_snippet_0\n\nLANGUAGE: toml\nCODE:\n```\n[dev-dependencies]\ncasper-engine-test-support = { version = \"2.2.0\", features = [\"test-support\"] }\ncasper-execution-engine = \"2.0.0\"\ncasper-types = \"1.5.0\"\n```\n\n----------------------------------------\n\nTITLE: Adding Second Signature to a Multi-Signature Deploy\nDESCRIPTION: Command to add a second signature to the deploy using the second associated key. This completes the multi-signature requirements to meet the deployment threshold for the account.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/versioned_docs/version-1.5.X/resources/advanced/multi-sig/multi-sig-workflow.md#2025-04-22_snippet_16\n\nLANGUAGE: bash\nCODE:\n```\ncasper-client sign-deploy -i hello_world_one_signature -k $PATH/user_2_secret_key.pem  -o hello_world_two_signatures\n```\n\n----------------------------------------\n\nTITLE: JSON-RPC Dictionary Lookup via URef\nDESCRIPTION: Command line example for looking up dictionary items using seed URef through the Casper client.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/versioned_docs/version-2.0.0/concepts/dictionaries.md#2025-04-22_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\ncasper-client get-dictionary-item \\\n    --node-address http://localhost:11101 \\\n    --state-root-hash 50c34ccbe1315d58ce22bf7518071164d16acd20a1becb0b423293418297416d \\\n    --dictionary-item-key <String> \\\n    --seed-uref uref-90b4a8d936b881d3b45b73a102adb2b652181d75c76b7547ae9d1bb213f8db6b-007\n```\n\n----------------------------------------\n\nTITLE: Requesting State Root Hash in JSON\nDESCRIPTION: This snippet showcases a JSON request for the 'chain_get_state_root_hash' method, demonstrating how to specify parameters such as the block identifier to retrieve the state root hash from the Casper blockchain. It outputs a JSON response with the requested state root hash.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/docs/developers/json-rpc/json-rpc-informational.md#2025-04-22_snippet_6\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"id\": 1,\n  \"jsonrpc\": \"2.0\",\n  \"method\": \"chain_get_state_root_hash\",\n  \"params\": [\n    {\n      \"name\": \"block_identifier\",\n      \"value\": {\n        \"Height\": 10\n      }\n    }\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Generating Default Bash Auto-Completion for casper-client\nDESCRIPTION: Executes the `casper-client` command with the `generate-completion` subcommand to create a bash auto-completion script. Requires `sudo` privileges to write to the default system location.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/versioned_docs/version-1.5.X/operators/setup/install-node.md#2025-04-22_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\nsudo casper-client generate-completion\n```\n\n----------------------------------------\n\nTITLE: Querying Contract Version\nDESCRIPTION: Command to check the current version of a contract using the Casper command-line client.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/versioned_docs/version-1.5.X/resources/beginner/upgrade-contract.md#2025-04-22_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\ncasper-client query-global-state \\\n    --node-address http://[NODE_IP]:7777 \\\n    --state-root-hash [STATE_ROOT_HASH] \\\n    --key [ACCOUNT_HASH] -q \"version\"\n```\n\n----------------------------------------\n\nTITLE: Example: Withdrawing Bid via Compiled Wasm on Testnet (Bash)\nDESCRIPTION: An example `casper-client` command demonstrating how to unbond stake (withdraw 1000 CSPR) on the Casper Testnet by deploying the `withdraw_bid.wasm` contract. It specifies the path to the compiled Wasm, the validator's public key, the amount to withdraw, and sets a payment amount of 4 CSPR.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/versioned_docs/version-1.5.X/operators/becoming-a-validator/unbonding.md#2025-04-22_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\nsudo -u casper casper-client put-deploy \\\n--node-address http://65.21.75.254:7777 \\\n--secret-key /etc/casper/validator_keys/secret_key.pem \\\n--chain-name casper-test \\\n--session-path $HOME/casper-node/target/wasm32-unknown-unknown/release/withdraw_bid.wasm \\\n--payment-amount 4000000000 \\\n--session-arg=\"public_key:public_key='01c297d2931fec7e22b2fb1ae3ca5afdfacc2c82ba501e8ed158eecef82b4dcdee'\" \\\n--session-arg=\"amount:u512='1000000000000'\"\n```\n\n----------------------------------------\n\nTITLE: Changing Bid Public Key via Compiled WASM\nDESCRIPTION: Alternative method using compiled WASM binary to change a validator bid's public key. More expensive than the direct entry point method but provides the same functionality. Requires compiled change_bid_public_key.wasm and various transaction parameters.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/versioned_docs/version-2.0.0/operators/becoming-a-validator/change-bid-public-key.md#2025-04-22_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nsudo -u casper casper-client put-txn session \\\n--node-address http://<HOST:PORT> \\\n--secret-key /etc/casper/validator_keys/secret_key.pem \\\n--chain-name <CHAIN_NAME> \\\n--category <INSTALL-UPGRADE|LARGE|MEDIUM|SMALL> \\\n--pricing-mode fixed \\\n--gas-price-tolerance <GAS_PRICE_TOLERANCE> \\\n--transaction-path $HOME/casper-node/target/wasm32-unknown-unknown/release/change_bid_public_key.wasm \\\n--session-entry-point call \\\n--session-arg=\"public_key:public_key='<PUBLIC_KEY_HEX>'\" \\\n--session-arg=\"new_public_key:public_key='<PUBLIC_KEY_HEX>'\"\n```\n\n----------------------------------------\n\nTITLE: Creating Signed Deploy with Ledger Signature in JavaScript SDK\nDESCRIPTION: Creates a signed deploy using the signature received from a Ledger hardware wallet and the signer's public key. This completes the signing process using Ledger.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/versioned_docs/version-1.5.X/resources/advanced/list-cspr.md#2025-04-22_snippet_10\n\nLANGUAGE: javascript\nCODE:\n```\nimport { DeployUtil, CLPublicKey } from 'casper-js-sdk';\n\nconst signedDeploy = DeployUtil.setSignature(\n  deploy,\n  signatureRS,\n  CLPublicKey.fromHex(accountPublicKey)\n);\n```\n\n----------------------------------------\n\nTITLE: Deploying Wasm Contract using Casper-Client\nDESCRIPTION: Command to deploy a compiled Wasm smart contract to the Casper network. It requires the node address, the target chain name (e.g., 'casper-test'), the path to the sender's secret key file, the payment amount in motes for transaction fees, and the path to the compiled Wasm file.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/docs/resources/beginner/counter-testnet/commands.md#2025-04-22_snippet_3\n\nLANGUAGE: rust\nCODE:\n```\ncasper-client put-deploy \\\n    --node-address [NODE_SERVER_ADDRESS] \\\n    --chain-name casper-test \\\n    --secret-key [KEY_PATH]/secret_key.pem \\\n    --payment-amount [PAYMENT_AMOUNT_IN_MOTES] \\\n    --session-path [CONTRACT_PATH]/counter-v1.wasm\n```\n\n----------------------------------------\n\nTITLE: Transferring NFT using Contract Entrypoint\nDESCRIPTION: Example of transferring an NFT by directly invoking the contract's 'transfer' entrypoint via the Casper client. This command specifies the contract hash, source and target accounts, and the token ID to be transferred.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/versioned_docs/version-1.5.X/resources/tokens/cep78/using-casper-client/interacting-with-NFTs.md#2025-04-22_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\ncasper-client put-deploy -n http://localhost:11101/rpc --chain-name \"casper-net-1\" \\\n--payment-amount 5000000000 \\\n-k ~/casper/casper-node/utils/nctl/assets/net-1/nodes/node-1/keys/secret_key.pem \\\n--session-entry-point \"transfer\" \\\n--session-hash hash-52e78ae3f6c485d036a74f65ebbb8c75fcc7c33fb42eb667fb32aeba72c63fb5 \\\n--session-arg \"source_key:key='account-hash-e9ff87766a1d2bab2565bfd5799054946200b51b20c3ca7e54a9269e00fe7cfb'\" \\\n--session-arg \"target_key:key='account-hash-b4772e7c47e4deca5bd90b7adb2d6e884f2d331825d5419d6cbfb59e17642aab'\" \\\n--session-arg \"is_hash_identifier_mode:bool='false'\" \\\n--session-arg \"token_id:u64='0'\"\n```\n\n----------------------------------------\n\nTITLE: Defining Entry Point: transfer_from in Casper Network\nDESCRIPTION: This snippet defines the 'transfer_from' entry point for a Casper Network smart contract. It takes 'owner' (Key), 'recipient' (Key), and 'amount' (U256) as arguments, returns Unit, and has public access with caller-based entry point payment.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/versioned_docs/version-2.0.0/developers/cli/sending-transactions.md#2025-04-22_snippet_14\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"name\": \"transfer_from\",\n  \"args\": [\n    {\n      \"name\": \"owner\",\n      \"cl_type\": \"Key\"\n    },\n    {\n      \"name\": \"recipient\",\n      \"cl_type\": \"Key\"\n    },\n    {\n      \"name\": \"amount\",\n      \"cl_type\": \"U256\"\n    }\n  ],\n  \"ret\": \"Unit\",\n  \"access\": \"Public\",\n  \"entry_point_type\": \"Called\",\n  \"entry_point_payment\": \"Caller\"\n}\n```\n\n----------------------------------------\n\nTITLE: Querying Block Information using casper-client CLI\nDESCRIPTION: Command to retrieve detailed block information using the casper-client CLI tool. Requires a node address and block identifier (hash or height) as input parameters.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/versioned_docs/version-1.5.X/resources/beginner/querying-network.md#2025-04-22_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\ncasper-client get-block \\\n      --id 3 \\\n      --node-address http://<node-ip-address>:7777 \\\n      --block-identifier <block-hash> \\\n```\n\n----------------------------------------\n\nTITLE: Adding Rust to system PATH\nDESCRIPTION: Add Rust to the system PATH immediately after installation without restarting the terminal.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/versioned_docs/version-2.0.0/developers/prerequisites.md#2025-04-22_snippet_9\n\nLANGUAGE: bash\nCODE:\n```\nsource $HOME/.cargo/env\n```\n\n----------------------------------------\n\nTITLE: Querying Global State for Account Details via Casper CLI - Bash\nDESCRIPTION: This command queries the Casper global state for details about a specific account using its public key and the current state root hash. The command requires specifying the node address, public key of the account, and state root hash (retrievable via `casper client get-state-root-hash`). The returned data includes account properties such as NamedKeys, which help in identifying deployed contract hashes.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/versioned_docs/version-2.0.0/developers/dapps/nctl-test.md#2025-04-22_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\n$(get_path_to_client) query-global-state \\\n--node-address http://localhost:11101 \\\n--key <PUBLIC KEY> \\\n--state-root-hash <STATE ROOT HASH>\n```\n\n----------------------------------------\n\nTITLE: Burning CEP-18 Tokens using Casper Client - Bash\nDESCRIPTION: This bash command burns a specified amount of CEP-18 tokens from the given account using the burn entry point. The command accepts owner, contract package, amount, and authentication details. This is typically used to permanently remove supply from circulation if burning is allowed by the contract.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/versioned_docs/version-2.0.0/resources/tokens/cep18/transfer.md#2025-04-22_snippet_22\n\nLANGUAGE: bash\nCODE:\n```\ncasper-client put-deploy -n http://<NODE IP>:<PORT> \\\n--secret-key ~/casper/demo/user_a/secret_key.pem \\\n--session-package-name \"cep18_contract_package_CEP18\" \\\n--session-entry-point \"burn\" \\\n// This is the account that the tokens will be burned from.\n--session-arg \"owner:key='account-hash-683f53f56926f54ef9584b07585b025c68415dc05f7b2e56749153574b83d5cd'\" \\\n// This is the number of CEP-18 tokens to remove from the total supply.\n--session-arg \"amount:U256='10'\" \\\n--chain-name <CHAIN NAME> \\\n--payment-amount 1000000000\n```\n\n----------------------------------------\n\nTITLE: Querying Account Information in Casper Network (JSON)\nDESCRIPTION: Example JSON response for the state_get_account_info_result method, which returns detailed information about an account including its hash, named keys, main purse, associated keys, action thresholds, and a merkle proof.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/versioned_docs/version-2.0.0/developers/json-rpc/json-rpc-informational.md#2025-04-22_snippet_21\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"id\": 1,\n  \"jsonrpc\": \"2.0\",\n  \"result\": {\n    \"name\": \"state_get_account_info_result\",\n    \"value\": {\n      \"api_version\": \"2.0.0\",\n      \"account\": {\n        \"account_hash\": \"account-hash-e94daaff79c2ab8d9c31d9c3058d7d0a0dd31204a5638dc1451fa67b2e3fb88c\",\n        \"named_keys\": [\n          {\n            \"name\": \"main_purse\",\n            \"key\": \"uref-09480c3248ef76b603d386f3f4f8a5f87f597d4eaffd475433f861af187ab5db-007\"\n          }\n        ],\n        \"main_purse\": \"uref-09480c3248ef76b603d386f3f4f8a5f87f597d4eaffd475433f861af187ab5db-007\",\n        \"associated_keys\": [\n          {\n            \"account_hash\": \"account-hash-e94daaff79c2ab8d9c31d9c3058d7d0a0dd31204a5638dc1451fa67b2e3fb88c\",\n            \"weight\": 1\n          }\n        ],\n        \"action_thresholds\": {\n          \"deployment\": 1,\n          \"key_management\": 1\n        }\n      },\n      \"merkle_proof\": \"01000000006ef2e0949ac76e55812421f755abe129b6244fe7168b77f47a72536147614625016ef2e0949ac76e55812421f755abe129b6244fe7168b77f47a72536147614625000000003529cde5c621f857f75f3810611eb4af3f998caaa9d4a3413cf799f99c67db0307010000006ef2e0949ac76e55812421f755abe129b6244fe7168b77f47a7253614761462501010102000000006e06000000000074769d28aac597a36a03a932d4b43e4f10bf0403ee5c41dd035102553f5773631200b9e173e8f05361b681513c14e25e3138639eb03232581db7557c9e8dbbc83ce94500226a9a7fe4f2b7b88d5103a4fc7400f02bf89c860c9ccdd56951a2afe9be0e0267006d820fb5676eb2960e15722f7725f3f8f41030078f8b2e44bf0dc03f71b176d6e800dc5ae9805068c5be6da1a90b2528ee85db0609cc0fb4bd60bbd559f497a98b67f500e1e3e846592f4918234647fca39830b7e1e6ad6f5b7a99b39af823d82ba1873d000003000000010186ff500f287e9b53f823ae1582b1fa429dfede28015125fd233a31ca04d5012002015cc42669a55467a1fdf49750772bfc1aed59b9b085558eb81510e9b015a7c83b0301e3cf4a34b1db6bfa58808b686cb8fe21ebe0c1bcbcee522649d2b135fe510fe3\"\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Account and Entity Schema in JSON\nDESCRIPTION: Schema definition for addressable entities, named keys and entry points in the Casper Network API. Includes specifications for legacy accounts and their properties.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/condor/jsonrpc-comp/rpc-2.0/schema/components.json.md#2025-04-22_snippet_59\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"entity\": {\n    \"description\": \"The addressable entity.\",\n    \"allOf\": [\n      {\n        \"$ref\": \"#/components/schemas/AddressableEntity\"\n      }\n    ]\n  },\n  \"named_keys\": {\n    \"description\": \"The named keys of the addressable entity.\",\n    \"allOf\": [\n      {\n        \"$ref\": \"#/components/schemas/NamedKeys\"\n      }\n    ]\n  },\n  \"entry_points\": {\n    \"description\": \"The entry points of the addressable entity.\",\n    \"type\": \"array\",\n    \"items\": {\n      \"$ref\": \"#/components/schemas/EntryPointValue\"\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Importing Constants and Dependencies for CEP-18 Tests\nDESCRIPTION: Rust code for importing necessary constants and dependencies for CEP-18 testing. Sets up the required imports from Casper engine test support, execution engine, and utility constants needed for tests.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/versioned_docs/version-1.5.X/resources/tokens/cep18/tests.md#2025-04-22_snippet_3\n\nLANGUAGE: rust\nCODE:\n```\n// File https://github.com/casper-ecosystem/cep18/blob/dev/tests/src/utility/installer_request_builders.rs\n\nuse casper_engine_test_support:{\n    ExecuteRequestBuilder, InMemoryWasmTestBuilder, DEFAULT_ACCOUNT_ADDR,\n    MINIMUM_ACCOUNT_CREATION_BALANCE, PRODUCTION_RUN_GENESIS_REQUEST,\n};\nuse casper_execution_engine::core::engine_state::ExecuteRequest;\nuse casper_types:{\n    account::AccountHash, bytesrepr::FromBytes, runtime_args, system::mint, CLTyped, ContractHash, ContractPackageHash, Key, RuntimeArgs, U256,\n};\n\nuse crate::utility::constants:{\n    ALLOWANCE_AMOUNT_1, ALLOWANCE_AMOUNT_2, TOTAL_SUPPLY_KEY, TRANSFER_AMOUNT_1, TRANSFER_AMOUNT_2,\n};\n\nuse super::constants:{\n    ACCOUNT_1_ADDR, ACCOUNT_2_ADDR, ARG_ADDRESS, ARG_AMOUNT, ARG_DECIMALS, ARG_NAME, ARG_OWNER, ARG_RECIPIENT, ARG_SPENDER, ARG_SYMBOL, ARG_TOKEN_CONTRACT, ARG_TOTAL_SUPPLY, CEP18_CONTRACT_WASM, CEP18_TEST_CONTRACT_KEY, CEP18_TEST_CONTRACT_WASM, CEP18_TOKEN_CONTRACT_KEY, CHECK_ALLOWANCE_OF_ENTRYPOINT, CHECK_BALANCE_OF_ENTRYPOINT,CHECK_TOTAL_SUPPLY_ENTRYPOINT, METHOD_APPROVE, METHOD_APPROVE_AS_STORED_CONTRACT,METHOD_TRANSFER, METHOD_TRANSFER_AS_STORED_CONTRACT, RESULT_KEY, TOKEN_DECIMALS, TOKEN_NAME, TOKEN_SYMBOL, TOKEN_TOTAL_SUPPLY,\n};\n```\n\n----------------------------------------\n\nTITLE: Example account_put_transaction Response\nDESCRIPTION: Example JSON-RPC response for the account_put_transaction method, containing the API version and transaction hash identifier.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/docs/developers/json-rpc/json-rpc-transactional.md#2025-04-22_snippet_3\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"id\": 1,\n  \"jsonrpc\": \"2.0\",\n  \"result\": {\n    \"name\": \"account_put_transaction_result\",\n    \"value\": {\n      \"api_version\": \"2.0.0\",\n      \"transaction_hash\": {\n        \"Version1\": \"f5582cb81a5abda63ebaa4edb3b05210ecbd63ffb8dd17bfbeb3b867f4014468\"\n      }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Network Configuration File Example\nDESCRIPTION: Example configuration file for setting up a new Casper network with custom domain and network name\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/versioned_docs/version-2.0.0/operators/setup-network/staging-files-for-new-network.md#2025-04-22_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nSOURCE_URL=casper.mydomain.com\nNETWORK_NAME=our-network\n```\n\n----------------------------------------\n\nTITLE: Serialization Tags for Key Types in Casper Network\nDESCRIPTION: A table defining the serialization tag values used to identify different key types in the Casper Network. The leading byte of the serialized buffer serves as a tag indicating the specific key variant.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/versioned_docs/version-2.0.0/concepts/serialization/types.md#2025-04-22_snippet_24\n\nLANGUAGE: markdown\nCODE:\n```\n| `Key`        | Serialization Tag |\n| ------------ | ----------------- |\n| `Account`    |  0               |\n| `Hash`       |  1               |\n| `URef`       |  2               |\n| `Transfer`   |  3               |\n| `DeployInfo` |  4               |\n| `EraInfo`    |  5               |\n| `Balance`    |  6               |\n| `Bid`        |  7               |\n| `Withdraw`   |  8               |\n| `Dictionary` |  9               |\n| `SystemContractRegistry`| 10    |\n| `EraSummary` | 11               |\n| `Unbond`     | 12               |\n| `ChainspecRegistry` | 13        |\n| `ChecksumRegistry` | 14         |\n| `BidAddr`    | 15               |\n```\n\n----------------------------------------\n\nTITLE: Retrieving Reward Result - Casper Network - JSON\nDESCRIPTION: This snippet shows a sample response from the 'info_get_reward' method on Casper Network, delivered in JSON format. It includes API version, total reward amount as a string, and the era ID for which the reward was calculated. Dependencies are valid request parameters matching validator/delegator and era; inputs are validator/delegator keys and era; output is reward amount for the queried era.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/versioned_docs/version-2.0.0/developers/json-rpc/json-rpc-informational.md#2025-04-22_snippet_11\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"id\": 1,\n  \"jsonrpc\": \"2.0\",\n  \"result\": {\n    \"name\": \"info_get_reward_result\",\n    \"value\": {\n      \"api_version\": \"2.0.0\",\n      \"reward_amount\": \"42\",\n      \"era_id\": 1\n    }\n  } \n\n```\n\n----------------------------------------\n\nTITLE: Defining Transform Schema in JSON for Casper Network\nDESCRIPTION: This JSON schema defines all possible transformations that can be performed during deploy execution in the Casper Network. It includes operations for writing various data types to global state (CLValue, Account, Contract, etc.), arithmetic operations for different integer types, collection manipulation, and state management operations.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/condor/jsonrpc-comp/rpc-2.0/schema/TransformKindV1.json.md#2025-04-22_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"description\": \"The actual transformation performed while executing a deploy.\",\n    \"oneOf\": [\n        {\n            \"description\": \"A transform having no effect.\",\n            \"type\": \"string\",\n            \"enum\": [\n                \"Identity\"\n            ]\n        },\n        {\n            \"description\": \"Writes the given CLValue to global state.\",\n            \"type\": \"object\",\n            \"required\": [\n                \"WriteCLValue\"\n            ],\n            \"properties\": {\n                \"WriteCLValue\": {\n                    \"$ref\": \"#/components/schemas/CLValue\"\n                }\n            },\n            \"additionalProperties\": false\n        },\n        {\n            \"description\": \"Writes the given Account to global state.\",\n            \"type\": \"object\",\n            \"required\": [\n                \"WriteAccount\"\n            ],\n            \"properties\": {\n                \"WriteAccount\": {\n                    \"$ref\": \"#/components/schemas/AccountHash\"\n                }\n            },\n            \"additionalProperties\": false\n        },\n        {\n            \"description\": \"Writes a smart contract as Wasm to global state.\",\n            \"type\": \"string\",\n            \"enum\": [\n                \"WriteContractWasm\"\n            ]\n        },\n        {\n            \"description\": \"Writes a smart contract to global state.\",\n            \"type\": \"string\",\n            \"enum\": [\n                \"WriteContract\"\n            ]\n        },\n        {\n            \"description\": \"Writes a smart contract package to global state.\",\n            \"type\": \"string\",\n            \"enum\": [\n                \"WriteContractPackage\"\n            ]\n        },\n        {\n            \"description\": \"Writes the given DeployInfo to global state.\",\n            \"type\": \"object\",\n            \"required\": [\n                \"WriteDeployInfo\"\n            ],\n            \"properties\": {\n                \"WriteDeployInfo\": {\n                    \"$ref\": \"#/components/schemas/DeployInfo\"\n                }\n            },\n            \"additionalProperties\": false\n        },\n        {\n            \"description\": \"Writes the given EraInfo to global state.\",\n            \"type\": \"object\",\n            \"required\": [\n                \"WriteEraInfo\"\n            ],\n            \"properties\": {\n                \"WriteEraInfo\": {\n                    \"$ref\": \"#/components/schemas/EraInfo\"\n                }\n            },\n            \"additionalProperties\": false\n        },\n        {\n            \"description\": \"Writes the given version 1 Transfer to global state.\",\n            \"type\": \"object\",\n            \"required\": [\n                \"WriteTransfer\"\n            ],\n            \"properties\": {\n                \"WriteTransfer\": {\n                    \"$ref\": \"#/components/schemas/TransferV1\"\n                }\n            },\n            \"additionalProperties\": false\n        },\n        {\n            \"description\": \"Writes the given Bid to global state.\",\n            \"type\": \"object\",\n            \"required\": [\n                \"WriteBid\"\n            ],\n            \"properties\": {\n                \"WriteBid\": {\n                    \"$ref\": \"#/components/schemas/Bid\"\n                }\n            },\n            \"additionalProperties\": false\n        },\n        {\n            \"description\": \"Writes the given Withdraw to global state.\",\n            \"type\": \"object\",\n            \"required\": [\n                \"WriteWithdraw\"\n            ],\n            \"properties\": {\n                \"WriteWithdraw\": {\n                    \"type\": \"array\",\n                    \"items\": {\n                        \"$ref\": \"#/components/schemas/WithdrawPurse\"\n                    }\n                }\n            },\n            \"additionalProperties\": false\n        },\n        {\n            \"description\": \"Adds the given `i32`.\",\n            \"type\": \"object\",\n            \"required\": [\n                \"AddInt32\"\n            ],\n            \"properties\": {\n                \"AddInt32\": {\n                    \"type\": \"integer\",\n                    \"format\": \"int32\"\n                }\n            },\n            \"additionalProperties\": false\n        },\n        {\n            \"description\": \"Adds the given `u64`.\",\n            \"type\": \"object\",\n            \"required\": [\n                \"AddUInt64\"\n            ],\n            \"properties\": {\n                \"AddUInt64\": {\n                    \"type\": \"integer\",\n                    \"format\": \"uint64\",\n                    \"minimum\": 0\n                }\n            },\n            \"additionalProperties\": false\n        },\n        {\n            \"description\": \"Adds the given `U128`.\",\n            \"type\": \"object\",\n            \"required\": [\n                \"AddUInt128\"\n            ],\n            \"properties\": {\n                \"AddUInt128\": {\n                    \"$ref\": \"#/components/schemas/U128\"\n                }\n            },\n            \"additionalProperties\": false\n        },\n        {\n            \"description\": \"Adds the given `U256`.\",\n            \"type\": \"object\",\n            \"required\": [\n                \"AddUInt256\"\n            ],\n            \"properties\": {\n                \"AddUInt256\": {\n                    \"$ref\": \"#/components/schemas/U256\"\n                }\n            },\n            \"additionalProperties\": false\n        },\n        {\n            \"description\": \"Adds the given `U512`.\",\n            \"type\": \"object\",\n            \"required\": [\n                \"AddUInt512\"\n            ],\n            \"properties\": {\n                \"AddUInt512\": {\n                    \"$ref\": \"#/components/schemas/U512\"\n                }\n            },\n            \"additionalProperties\": false\n        },\n        {\n            \"description\": \"Adds the given collection of named keys.\",\n            \"type\": \"object\",\n            \"required\": [\n                \"AddKeys\"\n            ],\n            \"properties\": {\n                \"AddKeys\": {\n                    \"type\": \"array\",\n                    \"items\": {\n                        \"$ref\": \"#/components/schemas/NamedKey\"\n                    }\n                }\n            },\n            \"additionalProperties\": false\n        },\n        {\n            \"description\": \"A failed transformation, containing an error message.\",\n            \"type\": \"object\",\n            \"required\": [\n                \"Failure\"\n            ],\n            \"properties\": {\n                \"Failure\": {\n                    \"type\": \"string\"\n                }\n            },\n            \"additionalProperties\": false\n        },\n        {\n            \"description\": \"Writes the given Unbonding to global state.\",\n            \"type\": \"object\",\n            \"required\": [\n                \"WriteUnbonding\"\n            ],\n            \"properties\": {\n                \"WriteUnbonding\": {\n                    \"type\": \"array\",\n                    \"items\": {\n                        \"$ref\": \"#/components/schemas/UnbondingPurse\"\n                    }\n                }\n            },\n            \"additionalProperties\": false\n        },\n        {\n            \"description\": \"Writes the addressable entity to global state.\",\n            \"type\": \"string\",\n            \"enum\": [\n                \"WriteAddressableEntity\"\n            ]\n        },\n        {\n            \"description\": \"Removes pathing to keyed value within global state. This is a form of soft delete; the underlying value remains in global state and is reachable from older global state root hashes where it was included in the hash up.\",\n            \"type\": \"object\",\n            \"required\": [\n                \"Prune\"\n            ],\n            \"properties\": {\n                \"Prune\": {\n                    \"$ref\": \"#/components/schemas/Key\"\n                }\n            },\n            \"additionalProperties\": false\n        },\n        {\n            \"description\": \"Writes the given BidKind to global state.\",\n            \"type\": \"object\",\n            \"required\": [\n                \"WriteBidKind\"\n            ],\n            \"properties\": {\n                \"WriteBidKind\": {\n                    \"$ref\": \"#/components/schemas/BidKind\"\n                }\n            },\n            \"additionalProperties\": false\n        }\n    ]\n}\n```\n\n----------------------------------------\n\nTITLE: Verifying the Docker Image in Bash\nDESCRIPTION: Command to list Docker images to verify that the casper-nctl:rc3 image was successfully built.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/condor/local-setup.md#2025-04-22_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\ndocker image ls\n```\n\n----------------------------------------\n\nTITLE: Executing Session Code Using Casper Client\nDESCRIPTION: Command structure for executing session code on a Casper network using the Casper command-line client.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/versioned_docs/version-2.0.0/developers/writing-onchain-code/writing-session-code.md#2025-04-22_snippet_10\n\nLANGUAGE: bash\nCODE:\n```\ncasper-client put-deploy \\\n    --node-address <HOST:PORT> \\\n    --chain-name <NETWORK-NAME> \\\n    --secret-key <PATH> \\\n    --payment-amount <PAYMENT-AMOUNT> \\\n    --session-path <SESSION-PATH> \\\n    --session-arg <\"NAME:TYPE='VALUE'\" OR \"NAME:TYPE=null\">\n```\n\n----------------------------------------\n\nTITLE: Installing npm Dependencies for Project Setup - JavaScript\nDESCRIPTION: Installs all npm dependencies defined in the local package.json file, required before running example scripts and the casper-cep78-js-client. This must be done in the project directory to ensure the runtime environment is prepared.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/docs/resources/tokens/cep78/js-tutorial.md#2025-04-22_snippet_6\n\nLANGUAGE: JavaScript\nCODE:\n```\nnpm i\n```\n\n----------------------------------------\n\nTITLE: Installing CMake on MacOS using Homebrew (Bash)\nDESCRIPTION: Installs the CMake build system generator on a MacOS system using the Homebrew package manager. This is a prerequisite step if CMake is not already installed.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/docs/resources/quick-start.md#2025-04-22_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nbrew install cmake\n```\n\n----------------------------------------\n\nTITLE: Compile and Test Smart Contracts with Makefile Commands\nDESCRIPTION: These commands navigate to the project directory and build the smart contracts, resulting in a `.wasm` file. Dependencies include a Makefile with defined targets like `prepare`, `build-contract`, and `test`. Successful execution indicates that the compilation is complete and tests pass, verifying contract integrity.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/versioned_docs/version-1.5.X/resources/advanced/cross-contract.md#2025-04-22_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\ncd cross-contract\nmake prepare\nmake build-contract\n```\n\n----------------------------------------\n\nTITLE: Querying Global State by Account Hash using Casper Client (Bash)\nDESCRIPTION: Queries the blockchain's global state at a specific state root hash for information associated with a given account, identified by its account hash (`--key`). Requires a node address and the state root hash.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/docs/resources/quick-start.md#2025-04-22_snippet_16\n\nLANGUAGE: bash\nCODE:\n```\ncasper-client query-global-state \\\n--node-address [NODE_ADDRESS] \\\n--state-root-hash [STATE_ROOT_HASH] \\\n--key [ACCOUNT_HASH]\n```\n\n----------------------------------------\n\nTITLE: Simplified Casper Client Command for Utility Contract Query\nDESCRIPTION: Clean version of the command to query the CEP-18 utility contract, showing just the essential parameters without comments.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/versioned_docs/version-1.5.X/resources/tokens/cep18/query.md#2025-04-22_snippet_4\n\nLANGUAGE: json\nCODE:\n```\ncasper-client query-global-state -n http://<HOST IP>:<PORT> \\\n--key hash-015b99020edb40e7e1e2b31a8e104bc226242f960a2d10dc1d91ae3eb6fa41b6 \\\n--state-root-hash f9f73c3a4da5893b67c4cac94a5695d76cfefff61b050c98a7b19e2b8efd3933\n```\n\n----------------------------------------\n\nTITLE: Defining CLType ByteArray Schema in JSON\nDESCRIPTION: JSON schema definition for a ByteArray type in Casper's type system. This represents a fixed-length list of a single CLType, comparable to a Rust array.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/condor/jsonrpc-comp/rpc-1.5/schema/components.json.md#2025-04-22_snippet_5\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"description\": \"Fixed-length list of a single `CLType` (comparable to a Rust array).\",\n    \"type\": \"object\",\n    \"required\": [\n        \"ByteArray\"\n    ],\n    \"properties\": {\n        \"ByteArray\": {\n            \"type\": \"integer\",\n            \"format\": \"uint32\",\n            \"minimum\": 0.0\n        }\n    },\n    \"additionalProperties\": false\n}\n```\n\n----------------------------------------\n\nTITLE: Querying Contract Package Details with Casper CLI\nDESCRIPTION: A command to query global state for a contract package's details, providing information about all versions of a contract in the package, including both active and disabled versions.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/docs/resources/beginner/upgrade-contract.md#2025-04-22_snippet_10\n\nLANGUAGE: bash\nCODE:\n```\ncasper-client query-global-state \\\n    --node-address http://[NODE_IP]:7777 \\\n    --state-root-hash [STATE_ROOT_HASH] \\\n    --key [ACCOUNT_HASH] -q \"counter_package_name\"\n```\n\n----------------------------------------\n\nTITLE: Retrieving State Root Hash Result in JSON\nDESCRIPTION: This code snippet provides a JSON response example for the 'chain_get_state_root_hash' method. It includes details such as the RPC API version and the hex-encoded state root hash. The input is a request to the 'chain_get_state_root_hash' method, and the output is the associated state root hash encapsulated in a JSON object.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/docs/developers/json-rpc/json-rpc-informational.md#2025-04-22_snippet_7\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"id\": 1,\n  \"jsonrpc\": \"2.0\",\n  \"result\": {\n    \"name\": \"chain_get_state_root_hash_result\",\n    \"value\": {\n      \"api_version\": \"2.0.0\",\n      \"state_root_hash\": \"0808080808080808080808080808080808080808080808080808080808080808\"\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining StoredValue Schema in JSON\nDESCRIPTION: Schema for values stored in global state including CLValue, Account, ContractWasm, Contract, ContractPackage and Transfer representations.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/condor/jsonrpc-comp/rpc-1.5/schema/components.json.md#2025-04-22_snippet_40\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"description\": \"Representation of a value stored in global state.\",\n    \"anyOf\": [\n        {\n            \"description\": \"An instance of any variant of CLValue\",\n            \"type\": \"object\",\n            \"required\": [\"CLValue\"],\n            \"properties\": {...}\n        },\n        {\n            \"description\": \"An account.\",\n            \"type\": \"object\",\n            \"required\": [\"Account\"],\n            \"properties\": {...}\n        },\n        {\n            \"description\": \"A contract's Wasm\",\n            \"type\": \"object\",\n            \"required\": [\"ContractWasm\"],\n            \"properties\": {...}\n        },\n        {\n            \"description\": \"Methods and type signatures supported by a contract.\",\n            \"type\": \"object\",\n            \"required\": [\"Contract\"],\n            \"properties\": {...}\n        },\n        {\n            \"description\": \"A contract definition, metadata, and security container.\",\n            \"type\": \"object\",\n            \"required\": [\"ContractPackage\"],\n            \"properties\": {...}\n        },\n        {\n            \"description\": \"A record of a transfer\",\n            \"type\": \"object\",\n            \"required\": [\"Transfer\"],\n            \"properties\": {...}\n        }\n    ]\n}\n```\n\n----------------------------------------\n\nTITLE: CLValue JSON Schema Definition\nDESCRIPTION: JSON schema that defines the structure of a Casper value (CLValue). It requires bytes for serialized data storage and cl_type for type information. Includes an optional parsed field for JSON encoding convenience.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/condor/jsonrpc-comp/rpc-1.5/schema/CLValue.json.md#2025-04-22_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"description\": \"A Casper value, i.e. a value which can be stored and manipulated by smart contracts.\\n\\nIt holds the underlying data as a type-erased, serialized `Vec<u8>` and also holds the CLType of the underlying data as a separate member.\\n\\nThe `parsed` field, representing the original value, is a convenience only available when a CLValue is encoded to JSON, and can always be set to null if preferred.\",\n    \"type\": \"object\",\n    \"required\": [\n        \"bytes\",\n        \"cl_type\"\n    ],\n    \"properties\": {\n        \"cl_type\": {\n            \"$ref\": \"#/components/schemas/CLType\"\n        },\n        \"bytes\": {\n            \"type\": \"string\"\n        },\n        \"parsed\": true\n    },\n    \"additionalProperties\": false\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Gossiper Message Structure in Rust\nDESCRIPTION: This Rust enum defines the structure for messages exchanged during the gossiping process. `Gossip(Id)` is used to announce the availability of an item identified by `Id`. `GossipResponse` is sent in reply, indicating whether the recipient already holds the item (`is_already_held`).\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/versioned_docs/version-2.0.0/concepts/design/networking-protocol.md#2025-04-22_snippet_2\n\nLANGUAGE: rust\nCODE:\n```\n```rust\nenum GossiperMessage {\n    Gossip(Id),\n    GossipResponse {\n        item_id: Id,\n        is_already_held: bool,\n    },\n}\n```\n```\n\n----------------------------------------\n\nTITLE: Generating Secp256k1 Keys with Casper Client\nDESCRIPTION: Commands to create Secp256k1 keys using the ECDSA algorithm with the P-256 curve. The '-a secp256k1' flag specifies the key type.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/versioned_docs/version-1.5.X/concepts/accounts-and-keys.md#2025-04-22_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nmkdir secp256k1-keys\ncasper-client keygen -a secp256k1 secp256k1-keys/\ntree secp256k1-keys/\n```\n\n----------------------------------------\n\nTITLE: Retrieving Account Hash from Public Key using casper-client in Bash\nDESCRIPTION: Command to derive an account hash from a public key file using `casper-client account-address`. Requires the path to the public key file (`--public-key`). This is useful if you know the public key but not the corresponding account hash.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/versioned_docs/version-2.0.0/developers/cli/querying-global-state.md#2025-04-22_snippet_10\n\nLANGUAGE: bash\nCODE:\n```\n```bash\ncasper-client account-address --public-key [PATH_TO_PUBLIC_KEY]\n```\n```\n\n----------------------------------------\n\nTITLE: Defining Casper CLValue Schema for Smart Contracts - JSON\nDESCRIPTION: This schema defines a single CLValue, encapsulating value bytes (serialized), type information ('cl_type'), and an optional parsed representation used during JSON encoding. It is key for serialization and deserialization of contract argument values in API payloads, requiring other schemas such as 'CLType' for interpreting the 'cl_type' property. Inputs must include compliant structure for successful Casper contract invocation.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/condor/jsonrpc-comp/rpc-1.5/schema.json.md#2025-04-22_snippet_35\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"description\": \"A Casper value, i.e. a value which can be stored and manipulated by smart contracts.\\n\\nIt holds the underlying data as a type-erased, serialized `Vec<u8>` and also holds the CLType of the underlying data as a separate member.\\n\\nThe `parsed` field, representing the original value, is a convenience only available when a CLValue is encoded to JSON, and can always be set to null if preferred.\",\n  \"type\": \"object\",\n  \"required\": [\n    \"bytes\",\n    \"cl_type\"\n  ],\n  \"properties\": {\n    \"cl_type\": {\n      \"$ref\": \"#/components/schemas/CLType\"\n    },\n    \"bytes\": {\n      \"type\": \"string\"\n    },\n    \"parsed\": true\n  },\n  \"additionalProperties\": false\n}\n```\n\n----------------------------------------\n\nTITLE: Account Details JSON Structure with Associated Keys\nDESCRIPTION: JSON representation of a Casper account showing the account hash, action thresholds for deployment and key management, associated keys with their weights, main purse, and named keys. This demonstrates the multi-signature setup.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/versioned_docs/version-1.5.X/resources/advanced/multi-sig/multi-sig-workflow.md#2025-04-22_snippet_12\n\nLANGUAGE: json\nCODE:\n```\n\"Account\": {\n  \"account_hash\": \"account-hash-1ed5a1c39bea93c105f2d22c965a84b205b36734a377d05dbb103b6bfaa595a7\",\n  \"action_thresholds\": {\n    \"deployment\": 2,\n    \"key_management\": 3\n  },\n  \"associated_keys\": [\n    {\n      \"account_hash\": \"account-hash-04a9691a9f8f05a0f08bd686f188b27c7dbcd644b415759fd3ca043d916ea02f\",\n      \"weight\": 1\n    },\n    {\n      \"account_hash\": \"account-hash-1ed5a1c39bea93c105f2d22c965a84b205b36734a377d05dbb103b6bfaa595a7\",\n      \"weight\": 3\n    },\n    {\n      \"account_hash\": \"account-hash-e2d00525cac31ae2756fb155f289d276c6945b6914923fe275de0cb127bffee7\",\n      \"weight\": 1\n    }\n  ],\n  \"main_purse\": \"uref-8294864177c2c1ec887a11dae095e487b5256ce6bd2a1f2740d0e4f28bd3251c-007\",\n  \"named_keys\": []\n}\n```\n\n----------------------------------------\n\nTITLE: Transaction Lane Configuration Table\nDESCRIPTION: Settings for transaction lanes including native mint, auction and Wasm lanes with their respective parameters.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/versioned_docs/version-2.0.0/operators/setup-network/chain-spec.md#2025-04-22_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n|Attribute         | Mainnet Setting |\n|----------------- |-----------------|\n|native_mint_lane | [0, 1024, 1024, 65_000_000_000, 650] |\n|native_auction_lane | [1, 2048, 2048, 362_500_000_000, 145] |\n|wasm_lanes | [[2, 1_048_576, 2048, 1_000_000_000_000, 1], [3, 344_064, 1024, 500_000_000_000, 3], [4, 172_032, 1024, 50_000_000_000, 7], [5, 12_288, 512, 1_500_000_000, 15]] |\n```\n\n----------------------------------------\n\nTITLE: Defining TransactionV1 Body Schema - JSON - JSON\nDESCRIPTION: This schema describes the body for a TransactionV1 within Casper, outlining required fields such as 'args', 'entry_point', 'scheduling', and 'target'. Each property references additional schema definitions, supporting structured and validated composition of transaction data. The fields must conform to referenced schemas, and no extra properties are accepted.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/condor/jsonrpc-comp/rpc-2.0/schema/components.json.md#2025-04-22_snippet_18\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"description\": \"Body of a `TransactionV1`.\",\n    \"type\": \"object\",\n    \"required\": [\n        \"args\",\n        \"entry_point\",\n        \"scheduling\",\n        \"target\"\n    ],\n    \"properties\": {\n        \"args\": {\n            \"$ref\": \"#/components/schemas/RuntimeArgs\"\n        },\n        \"target\": {\n            \"$ref\": \"#/components/schemas/TransactionTarget\"\n        },\n        \"entry_point\": {\n            \"$ref\": \"#/components/schemas/TransactionEntryPoint\"\n        },\n        \"scheduling\": {\n            \"$ref\": \"#/components/schemas/TransactionScheduling\"\n        }\n    },\n    \"additionalProperties\": false\n}\n```\n\n----------------------------------------\n\nTITLE: Info Get Chainspec Response Example\nDESCRIPTION: Example JSON response from the info_get_chainspec endpoint showing chainspec bytes and optional genesis/global state bytes.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/versioned_docs/version-2.0.0/developers/json-rpc/json-rpc-informational.md#2025-04-22_snippet_7\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"jsonrpc\": \"2.0\",\n  \"result\": {\n    \"name\": \"info_get_chainspec_result\",\n    \"value\": {\n      \"api_version\": \"2.0.0\",\n      \"chainspec_bytes\": {\n        \"chainspec_bytes\": \"[22040 hex chars]\",\n        \"maybe_genesis_accounts_bytes\": null,\n        \"maybe_global_state_bytes\": null\n      }\n    }\n  },\n  \"id\": 5510244237763930243\n}\n```\n\n----------------------------------------\n\nTITLE: Building casper-client from Source - Bash\nDESCRIPTION: Compiles the casper-client binary from source in release mode using cargo. Assumes Rust and all build dependencies (including nightly if needed) are installed. Outputs the executable to target/release.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/versioned_docs/version-1.5.X/developers/prerequisites.md#2025-04-22_snippet_19\n\nLANGUAGE: bash\nCODE:\n```\ncargo build --release\n```\n\n----------------------------------------\n\nTITLE: Example of NFT-721 Metadata JSON Structure\nDESCRIPTION: This example demonstrates the NFT-721 metadata format, which includes name, symbol, and token_uri fields. This format is used when the NFTMetadataKind is set to 'NFT721'.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/versioned_docs/version-2.0.0/resources/tokens/cep78/modalities.md#2025-04-22_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"name\": \"John Doe\",\n  \"symbol\": \"abc\",\n  \"token_uri\": \"https://www.barfoo.com\"\n}\n```\n\n----------------------------------------\n\nTITLE: Delegating Tokens for Staking using Rust Client\nDESCRIPTION: This snippet illustrates delegating CSPR tokens using the `casper_client` Rust crate by deploying the `delegate.wasm` contract within an async `tokio` runtime. It sets up deploy parameters, payment parameters, and session parameters including the path to `delegate.wasm` and the necessary arguments: 'amount' (U512), 'delegator' (public key), and 'validator' (public key). The `put_deploy` function sends the delegation deploy, and the result is printed.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/docs/developers/dapps/sdk/client-library-usage.md#2025-04-22_snippet_14\n\nLANGUAGE: rust\nCODE:\n```\nextern crate casper_client;\nasync fn put_deploy(){\n    let maybe_rpc: &str = \"\";\n    let verbosity: u64 = 1;\n    let node_address: &str = \"http://135.181.216.142:7777\";\n    let deploy_params: casper_client::DeployStrParams = casper_client::DeployStrParams{\n        secret_key:\"./sk_testnet.pem\",\n        timestamp:\"\",\n        ttl:\"50s\",\n        gas_price:\"1000000000\",\n        chain_name:\"casper\", // or \"casper-test\" for testnet\n        dependencies: Vec::new(),\n        session_account: \"01daad67ebbcb725e02a1955a6617512b311435a21ca6d523085aa015d2d1b473a\"\n\n    };\n    let mut session_args: Vec<&str> = Vec::new();\n    session_args.push(\"amount:U512='500000000000'\");\n    \n    session_args.push(\"delegator:public_key='01daad67ebbcb725e02a1955a6617512b311435a21ca6d523085aa015d2d1b473a'\");\n    session_args.push(\"validator:public_key='validator_public_key'\");\n  \n    let session_params: casper_client::SessionStrParams = casper_client::SessionStrParams::with_path(\"./delegate.wasm\", session_args, \"\");\n    let payment_params: casper_client::PaymentStrParams = casper_client::PaymentStrParams::with_amount(\"5000000000\");\n    let result = casper_client::put_deploy(maybe_rpc, node_address, verbosity, deploy_params, session_params, payment_params).await.unwrap();\n    println!(\"Deploy result: {:?}\", result);\n}\n\n#[tokio::main]\nasync fn main(){\n    put_deploy().await;\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Multi-Signature Casper Account Control in JSON\nDESCRIPTION: Here, the account is structured with a primary key (weight 2) and two associated keys (each weight 1), with both the deployment and key management thresholds set to 2. Any combination of keys with a combined weight reaching 2 can sign deploys or manage keys, enabling flexible multi-sig approval. All field names and comments comply with Casper’s expected JSON account representation, and no external libraries are required.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/docs/resources/advanced/multi-sig/other-scenarios.md#2025-04-22_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n{\\n\\\"Account\\\": {\\n   \\\"account_address\\\": \\\"account-hash-a1…\\\",\\n   \\\"action_thresholds\\\": {\\n      \\\"deployment\\\": 2,\\n      \\\"key_management\\\": 2\\n   },\\n   \\\"associated_keys\\\": [\\n      {\\n         \\\"account_address\\\": \\\"account-hash-a1…\\\", // primary key\\n         \\\"weight\\\": 2\\n      },\\n      {\\n         \\\"account_address\\\": \\\"account-hash-b2…\\\", // associated key\\n         \\\"weight\\\": 1\\n      },\\n      {\\n         \\\"account_address\\\": \\\"account-hash-c3…\\\", // associated key\\n         \\\"weight\\\": 1\\n      }\\n   ],\\n   \\\"main_purse\\\": \\\"uref-1234…\\\",\\n   \\\"named_keys\\\": []\\n}\\n}\n```\n\n----------------------------------------\n\nTITLE: DeployProcessed Event Structure\nDESCRIPTION: JSON structure of a DeployProcessed event showing the execution result of a processed deploy.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/versioned_docs/version-1.5.X/developers/dapps/monitor-and-consume-events.md#2025-04-22_snippet_6\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"DeployProcessed\": {\n    \"deploy_hash\": \"0f33be8f56ff23d7d503a9804675472e043830a6c17e6141dce717b4f0973c7d\",\n    \"account\": \"0201cbff12155b6ae1e99d571c01d56e9e1ba0def6719a6f06bc3e4a08f30a887444\",\n    \"timestamp\": \"2023-01-01T10:07:00.401Z\",\n    \"ttl\": \"30m\",\n    \"dependencies\": [],\n    \"block_hash\": \"509b754648168a73e6ab67e64d4a783cf580d6fc0c7c0ec560c6650f717841e0\",\n    \"execution_result\": {\n      \"Success\": {\n        \"effect\": {\n          \"operations\": [],\n          \"transforms\": [\n            {\n              \"key\": \"account-hash-a8261377ef9cf8e7411d6858801c71e28c9322e66355586549c75ab24cdd73f2\",\n              \"transform\": \"Identity\"\n            }\n          ]\n        },\n        \"transfers\": [\n          \"transfer-3389144d15238240f48f5966f2dc299b6b20eb19c13d834409b4d28fc50fa909\"\n        ],\n        \"cost\": \"100000000\"\n      }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Contract Interaction Documentation in Markdown\nDESCRIPTION: Markdown documentation describing different transaction variants for interacting with contracts on Casper network, including ModuleBytes for deploying contracts, various StoredContract variants for invoking on-chain Wasm, and native Transfer functionality.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/docs/developers/writing-onchain-code/calling-contracts.md#2025-04-22_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n# Calling Contracts\n\nCalling a contract on a Casper network requires the use of a transaction. When using the Casper Rust client, JavaScript SDK, or any other client, the intermediary client crafts the transaction for you, using the arguments you provide. This document outlines the various transaction variants through which you can execute Wasm or invoke the execution of on-chain Wasm.\n\n\n<!-- TODO Include Transaction variants. -->\n\n## Using Legacy Deploy Variants\n\n### ModuleBytes\n\n`ModuleBytes` is a deploy variant that allows you to pass opaque Wasm bytes to a network. This variant is used to install a contract on the chain or execute Wasm.\n\nHowever, you can also use `ModuleBytes` to deploy session code that calls a contract.\n\nFurther information on the structure of `ModuleBytes` can be found in [here](../json-rpc/types_chain.md#modulebytes).\n\n### StoredContractByHash\n\n`StoredContractByHash` is a deploy variant that invokes on-chain Wasm by specifying the contract hash and an entry point within the contract. When you don't need to send additional Wasm, you can use this deploy variant to invoke on-chain Wasm. It accepts any runtime arguments necessary for the entry point in question.\n\nWhile there is no Wasm associated with this variant, it is still a deploy sent to a node that invokes an installed contract.\n\nFurther information on the structure of `StoredContractByHash` can be found [here](../json-rpc/types_chain.md#storedcontractbyhash).\n\n### StoredContractByName\n\n`StoredContractByName` is similar to `StoredContractByHash`, with the main difference being the reference used to invoke on-chain Wasm. Where `StoredContractByHash` requires the contract hash, `StoredContractByName` uses a string stored as a [`NamedKey`](../json-rpc/types_chain.md#namedkey) in the caller's account.\n\nThis allows the caller to more easily reference a contract stored on-chain for later use but requires pre-planning to store the name within their account's `NamedKeys`.\n\n### StoredVersionedContractByHash\n\n`StoredVersionedContractByHash` is a deploy variant that invokes on-chain Wasm based on the contract package hash rather than the contract hash directly. This variant allows the caller to specify a version within the contract package, but if a specific version is not supplied, it will use the most recent version of the contract within the package.\n\nThis makes `StoredVersionedContractByHash` more stable than `StoredContractByHash`, as any caller will be directed to the most recent version of the internal contract without needing to specify the hash of that specific contract. Callers that regularly interact with a contract that they know will be upgraded can use this variant to ensure they are always using the most up-to-date version.\n\nDApp developers that use contracts developed by other parties can use `StoredVersionedContractByHash` to avoid interruptions from contract version changes.\n\nFurther information on the structure of `StoredVersionedContractByHash` can be found [here](../json-rpc/types_chain.md#storedversioncontractbyhash).\n\n### StoredVersionedContractByName\n\n`StoredVersionedContractByName` combines the functionality of `StoredContractByName` and `StoredVersionedContractByHash`. It allows a developer to store a reference string as a `NamedKey` within their account context that references a contract by its contract package hash.\n\nFurther information on the structure of `StoredVersionedContractByName` can be found [here](../json-rpc/types_chain.md#storedversioncontractbyname).\n\n### Transfer\n\nNative `Transfer`s are Wasmless transfers on a Casper network. This is how most transfers take place, albeit through a system like the Rust client that crafts the associated deploy and sends it to the network.\n\nFurther information on the structure of a native `Transfer` can be found [here](../json-rpc/types_chain.md#transfer).\n```\n\n----------------------------------------\n\nTITLE: Querying Casper Global State for Account Info using casper-client\nDESCRIPTION: This Bash command demonstrates querying the Casper network's global state for information related to a specific account using `casper-client query-global-state`. It requires the node address, a specific `state-root-hash` (obtained previously), and the `key` representing the account hash (`account-hash-...`).\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/versioned_docs/version-1.5.X/resources/advanced/cross-contract.md#2025-04-22_snippet_25\n\nLANGUAGE: bash\nCODE:\n```\n  casper-client query-global-state \\\n  --node-address http://136.243.187.84:7777 \\\n  --state-root-hash 2f3e100324deb999107229dbec5c4b724653174328c99ea0836931248c3cc9cb \\\n  --key account-hash-ee57bb3b39eb66b74a1dcf12f3f0e7d8e906e34b11f85dc05497bf33fbf3a1f9\n\n```\n\n----------------------------------------\n\nTITLE: Building the Multi-Sig Contract in Bash\nDESCRIPTION: Commands to navigate to the project directory and compile the contract into WebAssembly (Wasm) format using the provided Makefile.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/versioned_docs/version-1.5.X/resources/advanced/two-party-multi-sig.md#2025-04-22_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ncd two-party-multi-sig\nmake build-contract\n```\n\n----------------------------------------\n\nTITLE: Defining TransactionV1 Schema in JSON\nDESCRIPTION: This JSON schema defines the body of a TransactionV1 object. It specifies the required properties such as args, entry_point, scheduling, target, and transaction_category, and their corresponding types or references to other schema components. This definition ensures that any data conforming to this schema will adhere to the expected structure and constraints.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/condor/jsonrpc-comp/rpc-2.0/schema/TransactionV1Body.json.md#2025-04-22_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"description\": \"Body of a `TransactionV1`.\",\n    \"type\": \"object\",\n    \"required\": [\n        \"args\",\n        \"entry_point\",\n        \"scheduling\",\n        \"target\",\n        \"transaction_category\"\n    ],\n    \"properties\": {\n        \"args\": {\n            \"$ref\": \"#/components/schemas/RuntimeArgs\"\n        },\n        \"target\": {\n            \"$ref\": \"#/components/schemas/TransactionTarget\"\n        },\n        \"entry_point\": {\n            \"$ref\": \"#/components/schemas/TransactionEntryPoint\"\n        },\n        \"transaction_category\": {\n            \"type\": \"integer\",\n            \"format\": \"uint8\",\n            \"minimum\": 0\n        },\n        \"scheduling\": {\n            \"$ref\": \"#/components/schemas/TransactionScheduling\"\n        }\n    },\n    \"additionalProperties\": false\n}\n```\n\n----------------------------------------\n\nTITLE: Checking Casper NFT Balance (Bash)\nDESCRIPTION: These commands first retrieve the latest state root hash using `casper-client get-state-root-hash` and then query an account's NFT balance using `casper-client get-dictionary-item`. The query targets the `balances` dictionary within the specified NFT contract hash (`--contract-hash`), using the provided state root hash (`--state-root-hash`) and the user's account hash (without prefix) as the dictionary item key (`--dictionary-item-key`).\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/versioned_docs/version-1.5.X/resources/tokens/cep78/using-casper-client/interacting-with-NFTs.md#2025-04-22_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\ncasper-client get-state-root-hash --node-address https://node.testnet.casper.network\n\ncasper-client get-dictionary-item -n http://localhost:11101/rpc/ \\\n--state-root-hash f22e8ecfb3d2700d5f902c83da456c32f130b73d0d35037fe89b2d4b4933673f \\\n--contract-hash hash-378a43e38bc5129d8aa3bcd04f5c9a97be73f85b5be574182ac1346f04520796 \\\n--dictionary-name \"balances\" \\\n--dictionary-item-key \"0ea7998b2822afe5b62b08a21d54c941ad791279b089f3f7ede0d72b477eca34\"\n```\n\n----------------------------------------\n\nTITLE: Transferring Tokens from an Allowance using Casper Client - Bash\nDESCRIPTION: This bash command is a concise version (with comments removed) of transferring CEP-18 tokens via an allowance. It requires parameters for node address, chain name, secret key, contract hash, entry point, owner and recipient account hashes, token amount, and payment amount. The command facilitates a token transfer from one account's balance by another through pre-approved allowances.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/versioned_docs/version-2.0.0/resources/tokens/cep18/transfer.md#2025-04-22_snippet_15\n\nLANGUAGE: bash\nCODE:\n```\ncasper-client put-deploy -n http://<NODE IP>:<PORT> \\\n--chain-name <CHAIN NAME> \\\n--secret-key ~/casper/demo/user_a/secret_key.pem \\\n--session-hash hash-05d893e76c731729fc26339e5a970bd79fbf4a6adf743c8385431fb494bff45e \\\n--session-entry-point \"transfer_from\" \\\n--session-arg \"owner:key='account-hash-39f15c23df9be1244572bb499fac62cbcad3cab2dc1438609842f602f943d7d2'\" \\\n--session-arg \"recipient:key='account-hash-17192017d32db5dc9f598bf8ac6ac35ee4b64748669b00572d88335941479513'\" \\\n--session-arg \"amount:u256='10'\" \\\n--payment-amount \"10000000000\"\n```\n\n----------------------------------------\n\nTITLE: Core RPC Methods List\nDESCRIPTION: A comprehensive list of required RPC methods for minimal Casper SDK compliance, including block retrieval, deploy management, state queries, and balance operations.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/docs/developers/json-rpc/minimal-compliance.md#2025-04-22_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n* `chain_get_block` - This method returns the JSON representation of a Block from the network.\n* `info_get_deploy` - This method allows retrieval of a Deploy from a Casper network.\n* `account_put_deploy` - This method allows users to send their compiled Wasm to a node.\n* `chain_get_state_root_hash` - The state root hash used to query the network state.\n* `state_get_account_info` - This method returns a JSON representation of an Account.\n* `query_balance` - This method returns a purse's balance from a network.\n* `state_get_dictionary_item` - This method returns an item from a Dictionary.\n* `query_global_state` - This method allows for querying values stored under certain keys.\n```\n\n----------------------------------------\n\nTITLE: Example Request and Response for state_get_entity\nDESCRIPTION: Demonstrates the parameters and expected response format for the state_get_entity RPC method which retrieves an addressable entity from the Casper network. The request includes an entity identifier and optional block identifier, with the response containing entity details and a Merkle proof.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/condor/jsonrpc-comp/rpc-2.0/schema.json.md#2025-04-22_snippet_4\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"name\": \"state_get_entity_example\",\n  \"params\": [\n    {\n      \"name\": \"entity_identifier\",\n      \"value\": {\n        \"EntityAddr\": \"entity-account-0000000000000000000000000000000000000000000000000000000000000000\"\n      }\n    },\n    {\n      \"name\": \"block_identifier\",\n      \"value\": {\n        \"Hash\": \"0707070707070707070707070707070707070707070707070707070707070707\"\n      }\n    }\n  ],\n  \"result\": {\n    \"name\": \"state_get_entity_example_result\",\n    \"value\": {\n      \"api_version\": \"2.0.0\",\n      \"entity\": {\n        \"AddressableEntity\": {\n          \"entity\": {\n            \"protocol_version\": \"2.0.0\",\n            \"entity_kind\": {\n              \"Account\": \"account-hash-e94daaff79c2ab8d9c31d9c3058d7d0a0dd31204a5638dc1451fa67b2e3fb88c\"\n            },\n            \"package_hash\": \"package-0000000000000000000000000000000000000000000000000000000000000000\",\n            \"byte_code_hash\": \"byte-code-0000000000000000000000000000000000000000000000000000000000000000\"\n          }\n        }\n      }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Setting URef Access Rights in JavaScript\nDESCRIPTION: Code examples showing how to create new URefs with different access rights combinations using the with_access_rights method\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/versioned_docs/version-1.5.X/developers/dapps/uref-security.md#2025-04-22_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\n// This example will create a version of the original URef with access rights stripped entirely.\nlet new_uref = uref.with_access_rights(AccessRights::NONE);\n// This example will create a version of the original URef with only READ access rights.\nlet new_uref = uref.with_access_rights(AccessRights::READ);\n// This example will create a version of the original URef with only WRITE access rights.\nlet new_uref = uref.with_access_rights(AccessRights::WRITE);\n// This example will create a version of the original URef with both READ and WRITE access rights.\nlet new_uref = uref.with_access_rights(AccessRights::READ_WRITE);\n// This example will create a version of the original URef with only ADD access rights.\nlet new_uref = uref.with_access_rights(AccessRights::ADD);\n// This example will create a version of the original URef with both READ and ADD access rights.\nlet new_uref = uref.with_access_rights(AccessRights::READ_ADD);\n// This example will create a version of the original URef with both ADD and WRITE access rights.\nlet new_uref = uref.with_access_rights(AccessRights::ADD_WRITE);\n// This example will create a version of the original URef with full access rights.\nlet new_uref = uref.with_access_rights(AccessRights::READ_ADD_WRITE);\n```\n\n----------------------------------------\n\nTITLE: Checking Deploy Status by Hash - Casper casper-client - Bash\nDESCRIPTION: This command queries the status and details of a specific deploy by its hash using the casper-client CLI. It is necessary to provide the deploy hash and node address. The command returns detailed information about the deploy, including approvals, header, session details, and any execution results, which are presented as a JSON object. This is essential for application state monitoring, debugging deploy outcomes, and ensuring successful contract state mutation.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/docs/resources/advanced/cross-contract.md#2025-04-22_snippet_19\n\nLANGUAGE: bash\nCODE:\n```\ncasper-client get-deploy \\\n    --node-address http://136.243.187.84:7777 15e11340d92fc9e64deb38bd942f4efb69caad0851eec24fd577070309d18537\n```\n\n----------------------------------------\n\nTITLE: Defining Block Header and Metadata Structures in Rust\nDESCRIPTION: Specifies structures for block headers, batches, and related metadata used in the Casper network, including BlockHeadersBatchId, BlockWithMetadata, BlockHeaderWithMetadata, BlockSignatures, BlockAndDeploys, and BlockHeadersBatch.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/docs/concepts/design/networking-protocol.md#2025-04-22_snippet_7\n\nLANGUAGE: rust\nCODE:\n```\nstruct BlockHeadersBatchId {\n    highest: u64,\n    lowest: u64,\n}\n\nstruct BlockWithMetadata {\n    block: Block,\n    finality_signatures: BlockSignatures,\n}\n\nstruct BlockHeaderWithMetadata {\n    block_header: BlockHeader,\n    block_signatures: BlockSignatures,\n}\n\nstruct BlockSignatures {\n    block_hash: BlockHash,\n    era_id: u64,\n    proofs: BTreeMap<PublicKey, Signature>,\n}\n\nstruct BlockAndDeploys {\n    block: Block,\n    deploys: Vec<Deploy>,\n}\n\nstruct BlockHeadersBatch(Vec<BlockHeader>);\n```\n\n----------------------------------------\n\nTITLE: Comprehensive Private Network Configuration\nDESCRIPTION: Detailed configuration for setting up a Casper private network, focusing on admin-controlled fund transfers, disabling minting, and setting auction and fee handling policies. Constraints include restricted funding maintenance and prohibiting auction bids, significant for privacy-focused setups.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/versioned_docs/version-1.5.X/operators/setup-network/create-private.md#2025-04-22_snippet_1\n\nLANGUAGE: toml\nCODE:\n```\n[core]\nallow_unrestricted_transfers = false\ncompute_rewards = false\nallow_auction_bids = false\nrefund_handling = { type = \"refund\", refund_ratio = [1, 1] }\nfee_handling = { type = \"accumulate\" }\nadministrators = [\"ADMIN_PUBLIC_KEY\"]\n```\n\n----------------------------------------\n\nTITLE: Example Wasm Contract Deployment\nDESCRIPTION: Specific example of deploying a counter contract using a Wasm file on the Casper test network.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/versioned_docs/version-2.0.0/developers/cli/calling-contracts.md#2025-04-22_snippet_18\n\nLANGUAGE: rust\nCODE:\n```\ncasper-client put-deploy \\\n    --node-address http://65.21.235.219:7777 \\\n    --chain-name casper-test \\\n    --secret-key [PATH_TO_YOUR_KEY]/secret_key.pem \\\n    --payment-amount 25000000000 \\\n    --session-path [PATH_TO_YOUR_COMPILED_WASM]/counter-call.wasm\n```\n\n----------------------------------------\n\nTITLE: Query Node Status Using curl - Bash\nDESCRIPTION: Sends an HTTP GET request to the node's REST /status endpoint to retrieve current status and configuration. Outputs a JSON object describing state, peers, block info, and more. Requires curl and the correct <node_address> substitution. No auth required; output can be piped to jq for parsing.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/docs/operators/setup/node-endpoints.md#2025-04-22_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\ncurl -s http://<node_address>:8888/status\n```\n\n----------------------------------------\n\nTITLE: Deploy and Header Data Structures\nDESCRIPTION: Defines the core data structures for deployments including headers, public keys, and executable deploy items with their associated types.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/versioned_docs/version-1.5.X/concepts/design/networking-protocol.md#2025-04-22_snippet_5\n\nLANGUAGE: rust\nCODE:\n```\npub struct Deploy {\n    hash: DeployHash,\n    header: DeployHeader,\n    payment: ExecutableDeployItem,\n    session: ExecutableDeployItem,\n    approvals: BTreeSet<Approval>,\n}\n\nstruct DeployHeader {\n    account: PublicKey,\n    timestamp: u64,\n    ttl: u64,\n    gas_price: u64,\n    body_hash: Digest,\n    dependencies: Vec<DeployHash>,\n    chain_name: String,\n}\n\nenum PublicKey {\n    System,\n    Ed25519(Vec<u8>),\n    Secp256k1(Vec<u8>),\n}\n\nenum ExecutableDeployItem {\n    ModuleBytes {\n        module_bytes: Vec<u8>,\n        args: RuntimeArgs,\n    },\n    StoredContractByHash {\n        hash: [u8; 32],\n        entry_point: String,\n        args: RuntimeArgs,\n    },\n    StoredContractByName {\n        name: String,\n        entry_point: String,\n        args: RuntimeArgs,\n    },\n    StoredVersionedContractByHash {\n        hash: [u8; 32],\n        version: Option<u32>,\n        entry_point: String,\n        args: RuntimeArgs,\n    },\n    StoredVersionedContractByName {\n        name: String,\n        version: Option<u32>,\n        entry_point: String,\n        args: RuntimeArgs,\n    },\n    Transfer { args: RuntimeArgs },\n}\n```\n\n----------------------------------------\n\nTITLE: Deploying Casper Contract Session Code\nDESCRIPTION: Deploy the counter-call session code to increment the counter using a separate Wasm file.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/versioned_docs/version-1.5.X/resources/beginner/counter-testnet/walkthrough.md#2025-04-22_snippet_11\n\nLANGUAGE: bash\nCODE:\n```\ncasper-client put-deploy \\\n    --node-address http://[NODE_IP]:7777 \\\n    --chain-name casper-test \\\n    --secret-key [PATH_TO_YOUR_KEY]/secret_key.pem \\\n    --payment-amount [PAYMENT_AMOUNT_IN_MOTES] \\\n    --session-path ./counter-call/target/wasm32-unknown-unknown/release/counter-call.wasm\n```\n\n----------------------------------------\n\nTITLE: Example Output of Node Watch Command\nDESCRIPTION: Shows typical output from the `/etc/casper/node_util.py watch` command when the node is running and synchronized (`RPC: Ready`). It includes details like the last block, era, peer count, uptime, build version, node key, next upgrade status, and the status of the `casper-node-launcher.service`.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/versioned_docs/version-1.5.X/operators/setup/install-node.md#2025-04-22_snippet_16\n\nLANGUAGE: text\nCODE:\n```\nLast Block: 630151 (Era: 4153)\nPeer Count: 297\nUptime: 4days 6h 40m 18s 553ms\nBuild: 1.4.5-a7f6a648d-casper-mainnet\nKey: 0147b4cae09d64ab6acd02dd0868722be9a9bcc355c2fdff7c2c244cbfcd30f158\nNext Upgrade: None\n\nRPC: Ready\n\n● casper-node-launcher.service - Casper Node Launcher\n   Loaded: loaded (/lib/systemd/system/casper-node-launcher.service; enabled; vendor preset: enabled)\n   Active: active (running) since Wed 2022-03-16 21:08:50 UTC; 4 days ago\n     Docs: https://docs.casper.network\n Main PID: 2934 (casper-node-lau)\n    Tasks: 12 (limit: 4915)\n   CGroup: /system.slice/casper-node-launcher.service\n           ├─ 2934 /usr/bin/casper-node-launcher\n           └─16842 /var/lib/casper/bin/1_4_5/casper-node validator /etc/casper/1_4_5/config.toml\n```\n\n----------------------------------------\n\nTITLE: Querying Node Status with info_get_status in Casper Network\nDESCRIPTION: This JSON-RPC request retrieves comprehensive status information about a Casper Network node. The request requires no parameters and returns details about the node's state, connected peers, and blockchain information.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/docs/developers/json-rpc/json-rpc-informational.md#2025-04-22_snippet_30\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"id\": 1,\n  \"jsonrpc\": \"2.0\",\n  \"method\": \"info_get_status\",\n  \"params\": []\n}\n```\n\n----------------------------------------\n\nTITLE: Changing Bid Public Key via System Auction Contract (Bash)\nDESCRIPTION: Uses the `casper-client put-txn` command to directly call the `change_bid_public_key` entry point on the system auction contract. Requires the node address, secret key, chain name, payment amount (5 CSPR), auction contract hash, the current public key, and the new public key. This method has a fixed cost.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/docs/operators/becoming-a-validator/change-bid-public-key.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nsudo -u casper casper-client put-txn \\\n--node-address <HOST:PORT> \\\n--secret-key <PATH> \\\n--chain-name <CHAIN_NAME> \\\n--payment-amount <PAYMENT_AMOUNT_IN_MOTES> \\\n--session-hash <SESSION_HASH> \\\n--session-entry-point change_bid_public_key \\\n--session-arg=\"public_key:public_key='<PUBLIC_KEY_HEX>'\" \\\n--session-arg=\"new_public_key:public_key='<PUBLIC_KEY_HEX>'\"\n```\n\n----------------------------------------\n\nTITLE: Executing Redelegate Transaction in Casper Network\nDESCRIPTION: This command allows a user to redelegate their previously staked CSPR to a new validator. It requires the delegator's public key, old and new validator's public keys, redelegation amount, gas price tolerance, and either a secret key or initiator address.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/docs/concepts/transactions.md#2025-04-22_snippet_4\n\nLANGUAGE: json\nCODE:\n```\ncasper-client put-txn redelegate\n/// The delegator's public key.\n  --delegator <STRING>\n/// The old validator's public key.\n  --validator <STRING>\n/// The new validator's public key.\n  --new-validator <STRING>\n/// The amount in motes to redelegate from the old validator to the new validator.\n  --transaction-amount <INTEGER>\n/// The maximum gas price that the user is willing to pay for this transaction. \n  --gas-price-tolerance <INTEGER>\n/// The path to the local secret key file, or the [`initiator address`](../developers/json-rpc/types_chain.md#initiatoraddr) sending the transaction.\n  <--secret-key <PATH>|--initiator-address <HEX STRING>>\n```\n\n----------------------------------------\n\nTITLE: Querying NCTL Node Status via Bash Command-Line - Bash\nDESCRIPTION: This command checks the status of NCTL nodes in your local Casper network environment. Prerequisite: NCTL must be installed and running. It outputs information about the status of the network nodes and sidecars, helping ensure that the testing network is properly established before executing further contract tests.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/versioned_docs/version-2.0.0/developers/dapps/nctl-test.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnctl-status\n```\n\n----------------------------------------\n\nTITLE: Redelegating Tokens Using Compiled Wasm in Bash\nDESCRIPTION: This snippet shows how to redelegate tokens using a compiled redelegate.wasm file. It requires specifying the node address, secret key, chain name, payment amount, path to the Wasm file, and various arguments including delegator and validator public keys.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/versioned_docs/version-1.5.X/developers/cli/redelegate.md#2025-04-22_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\ncasper-client put-deploy \\\n--node-address <HOST:PORT> \\\n--secret-key <PATH_TO_DELEGATOR_SECRET_KEY> \\\n--chain-name <CHAIN_NAME> \\\n--payment-amount <PAYMENT_AMOUNT> \\\n--session-path <PATH_TO_WASM>/redelegate.wasm \\\n--session-arg \"delegator:public_key='<DELEGATOR_PUBLIC_KEY_HEX>'\" \\\n--session-arg \"validator:public_key='<CURRENT_VALIDATOR_PUBLIC_KEY_HEX>'\" \\\n--session-arg \"amount:u512='<DELEGATION_AMOUNT>'\" \\\n--session-arg \"new_validator:public_key='<NEW_VALIDATOR_PUBLIC_KEY_HEX>'\"\n```\n\n----------------------------------------\n\nTITLE: Example Makefile for Casper Contract Build/Test (Makefile)\nDESCRIPTION: Presents a sample Makefile containing common targets for managing a Casper Rust smart contract project during development. It includes commands to prepare the Wasm target (`prepare`), build the contract targeting Wasm and strip debug symbols (`build-contract`), copy the built Wasm and run tests (`test`), perform code quality checks (`clippy`), check formatting (`check-lint`), and apply formatting (`lint`). This file needs to be created manually in the project root for semi-automatic or manual setups.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/docs/developers/writing-onchain-code/simple-contract.md#2025-04-22_snippet_4\n\nLANGUAGE: makefile\nCODE:\n```\nprepare:\n        rustup target add wasm32-unknown-unknown\n\nbuild-contract:\n        cd contract && cargo build --release --target wasm32-unknown-unknown\n        wasm-strip contract/target/wasm32-unknown-unknown/release/contract.wasm 2>/dev/null | true\n\ntest: build-contract\n        mkdir -p tests/wasm\n        cp contract/target/wasm32-unknown-unknown/release/contract.wasm tests/wasm\n        cd tests && cargo test\n\nclippy:\n        cd contract && cargo clippy --all-targets -- -D warnings\n        cd tests && cargo clippy --all-targets -- -D warnings\n\ncheck-lint: clippy\n        cd contract && cargo fmt -- --check\n        cd tests && cargo fmt -- --check\n\nlint: clippy\n        cd contract && cargo fmt\n        cd tests && cargo fmt\n```\n\n----------------------------------------\n\nTITLE: Managing CEP-18 Security Permissions - Example session-arg for Account List - Bash\nDESCRIPTION: This snippet illustrates an example --session-arg passed to casper-client, defining a comma-separated list of account-hash strings for the mint_and_burn_list argument when changing contract-level security permissions. Used for specifying which accounts receive a particular security level ('MintAndBurn'). Accepts a string input and should be provided along with a change_security deploy.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/versioned_docs/version-2.0.0/resources/tokens/cep18/transfer.md#2025-04-22_snippet_24\n\nLANGUAGE: bash\nCODE:\n```\n--session-arg \"mint_and_burn_list:string='account-hash-1ed5a1c39bea93c105f2d22c965a84b205b36734a377d05dbb103b6bfaa595a7,account-hash-0ea7998b2822afe5b62b08a21d54c941ad791279b089f3f7ede0d72b477eca34,account-hash-e70dbca48c2d31bc2d754e51860ceaa8a1a49dc627b20320b0ecee1b6d9ce655'\"\n```\n\n----------------------------------------\n\nTITLE: Querying Global State for Counter Value\nDESCRIPTION: Command to query the global state of the Casper network for a specific counter variable value using the state root hash and account hash.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/versioned_docs/version-1.5.X/resources/beginner/counter-testnet/walkthrough.md#2025-04-22_snippet_13\n\nLANGUAGE: bash\nCODE:\n```\ncasper-client query-global-state --node-address http://[NODE_IP]:7777 \\\n    --state-root-hash [STATE_ROOT_HASH]\n    --key [ACCOUNT_HASH] -q \"counter/count\"\n```\n\n----------------------------------------\n\nTITLE: Compiling Casper client from source\nDESCRIPTION: Compile the Casper client from source code using Cargo.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/versioned_docs/version-2.0.0/developers/prerequisites.md#2025-04-22_snippet_19\n\nLANGUAGE: bash\nCODE:\n```\ncargo build --release\n```\n\n----------------------------------------\n\nTITLE: Defining CEP-78 Metadata Schema in JSON\nDESCRIPTION: Example of a valid metadata schema for the CEP-78 NFT standard. It includes name, token URI, and checksum fields.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/versioned_docs/version-1.5.X/resources/tokens/cep78/modalities.md#2025-04-22_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"name\": \"John Doe\",\n  \"token_uri\": \"https://www.barfoo.com\",\n  \"checksum\": \"940bffb3f2bba35f84313aa26da09ece3ad47045c6a1292c2bbd2df4ab1a55fb\"\n}\n```\n\n----------------------------------------\n\nTITLE: Verifying Deploy with get-deploy\nDESCRIPTION: Command to verify a contract deployment by querying its status using the deploy hash returned from put-deploy.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/versioned_docs/version-1.5.X/developers/cli/installing-contracts.md#2025-04-22_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\ncasper-client get-deploy \\\n  --node-address http://localhost:11101 [DEPLOY_HASH]\n```\n\n----------------------------------------\n\nTITLE: Building Management Contracts in Rust for Casper Private Network\nDESCRIPTION: Command to generate administrator contracts for managing accounts and smart contracts in a private Casper network. These contracts allow enabling and disabling accounts and smart contracts.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/versioned_docs/version-1.5.X/operators/setup-network/create-private.md#2025-04-22_snippet_8\n\nLANGUAGE: sh\nCODE:\n```\nmake build-contracts-rs\n```\n\n----------------------------------------\n\nTITLE: Representing the Era Rewards Formula for Validators in Casper 2.0\nDESCRIPTION: A mathematical formula that calculates validator rewards in Casper 2.0, consisting of three components: rewards for block production, finality signature publication, and finality signature contribution. The formula uses weighted calculations based on validator stake and participation.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/src/pages/condor/validator-rewards.md#2025-04-22_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\nEra rewards for validator i = \n\n**Σ** (n in **N***) **i(n)** * (**rR/N**) (block production)\n\n&#43; **Σ** (n in **N***) **i(n)** * **Σ** (j in **S(n)**) (**w(j)/W**) * (**f(1-r)R/N**) (finality signature publication)  \n\n&#43; **Σ** (n in **N***) **s_i(n)** * (**w(i)/W**) * (**(1-f)(1-r)R/N**) (finality signature contribution)\n```\n\n----------------------------------------\n\nTITLE: Sample Named Key Query with Contract Address\nDESCRIPTION: Example of querying a named key 'count' using contract address hash with actual values.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/versioned_docs/version-2.0.0/developers/cli/querying-global-state.md#2025-04-22_snippet_18\n\nLANGUAGE: bash\nCODE:\n```\ncasper-client query-global-state \\\n--node-address http://localhost:11101 \\\n--state-root-hash 6b5849caa605acdc29564f303764396a27ef7a6b1a61f7b13109b129e7e70d81 \\\n--key \"entity-contract-a1d0bf9d96f3efc9ea67f627df3a7cba390bfc582956032db91060ca5d413e68\" \\\n-q \"count\"\n```\n\n----------------------------------------\n\nTITLE: Creating Vite Project\nDESCRIPTION: Commands to install Vite globally and create a new React project\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/versioned_docs/version-1.5.X/developers/dapps/template-frontend.md#2025-04-22_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nnpm install -g vite\nnpm create vite@latest\n```\n\n----------------------------------------\n\nTITLE: Cloning Casper Network Repositories\nDESCRIPTION: Commands to clone the required Casper network repositories.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/versioned_docs/version-1.5.X/developers/dapps/setup-nctl.md#2025-04-22_snippet_11\n\nLANGUAGE: bash\nCODE:\n```\ncd <WORKING_DIRECTORY>\ngit clone https://github.com/casper-network/casper-node-launcher\ngit clone https://github.com/casper-network/casper-node\ngit clone https://github.com/casper-ecosystem/casper-client-rs\n```\n\n----------------------------------------\n\nTITLE: Verifying CMake Installation (Bash)\nDESCRIPTION: Checks if CMake, a build system generator, is installed and accessible. CMake is required for building certain dependencies, including the Casper client.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/docs/resources/quick-start.md#2025-04-22_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ncmake --version\n```\n\n----------------------------------------\n\nTITLE: Global State Root Hash Request/Response Format\nDESCRIPTION: JSON-RPC request and response format for obtaining the global state root hash.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/versioned_docs/version-2.0.0/resources/beginner/querying-network.md#2025-04-22_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"jsonrpc\": \"2.0\",\n    \"method\": \"chain_get_state_root_hash\",\n    \"params\": null,\n    \"id\": 1\n}\n```\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"jsonrpc\": \"2.0\",\n    \"result\": {\n        \"api_version\": \"1.0.0\",\n        \"state_root_hash\": \"f97d8d36630a8f4acdb323223596f6fa01ee3b0d49ad70d84d715c156c5dbec6\"\n    },\n    \"id\": 1\n}\n```\n\n----------------------------------------\n\nTITLE: Reusable Purse Management in Contract\nDESCRIPTION: This Rust snippet presents a method for using a reusable purse within contract logic. Using contract hash and entry points, this approach allows the contract to track and manage purses associated with callers. It requires more sophisticated contract logic compared to the throw-away purse method.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/docs/resources/advanced/transfer-token-to-contract.md#2025-04-22_snippet_1\n\nLANGUAGE: Rust\nCODE:\n```\n// Scenario 2: with this style, the contract being called has some internal accounting\n// to keep track of a reusable purse associated to the calling account; this avoids\n// wasteful creation of one time purses but requires the smart contract being called\n// to have more sophisticated internal logic. \n#[no_mangle]\npub extern \"C\" fn call() {\n    let amount: U512 = runtime::get_named_arg(\"amount\");\n    let contract_hash = runtime::get_named_arg(\"contract_hash\");\n    let deposit_point_name = runtime::get_named_arg(\"deposit_point_name\");\n    let other_entry_point_name = runtime::get_named_arg(\"other_entry_point_name\");\n    let deposit_purse: URef  = runtime::call_contract(contract_hash, deposit_point_name, runtime_args! {});\n    system::transfer_from_purse_to_purse(account::get_main_purse(), deposit_purse, amount, None)\n        .unwrap_or_revert();\n    runtime::call_contract(contract_hash, other_entry_point_name, runtime_args! {});\n}\n\n```\n\n----------------------------------------\n\nTITLE: Defining Validator Map Entry Schema in JSON\nDESCRIPTION: A JSON schema that defines the structure of validator map entries in the Casper Network. The schema specifies required properties such as the validator's public key, bonding purse, staked amount, delegation rate, and status flags. It also includes optional properties like vesting schedules for genesis validators.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/condor/jsonrpc-comp/rpc-2.0/schema/ValidatorBid.json.md#2025-04-22_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"description\": \"An entry in the validator map.\",\n    \"type\": \"object\",\n    \"required\": [\n        \"bonding_purse\",\n        \"delegation_rate\",\n        \"inactive\",\n        \"maximum_delegation_amount\",\n        \"minimum_delegation_amount\",\n        \"staked_amount\",\n        \"validator_public_key\"\n    ],\n    \"properties\": {\n        \"validator_public_key\": {\n            \"description\": \"Validator public key\",\n            \"allOf\": [\n                {\n                    \"$ref\": \"#/components/schemas/PublicKey\"\n                }\n            ]\n        },\n        \"bonding_purse\": {\n            \"description\": \"The purse that was used for bonding.\",\n            \"allOf\": [\n                {\n                    \"$ref\": \"#/components/schemas/URef\"\n                }\n            ]\n        },\n        \"staked_amount\": {\n            \"description\": \"The amount of tokens staked by a validator (not including delegators).\",\n            \"allOf\": [\n                {\n                    \"$ref\": \"#/components/schemas/U512\"\n                }\n            ]\n        },\n        \"delegation_rate\": {\n            \"description\": \"Delegation rate\",\n            \"type\": \"integer\",\n            \"format\": \"uint8\",\n            \"minimum\": 0\n        },\n        \"vesting_schedule\": {\n            \"description\": \"Vesting schedule for a genesis validator. `None` if non-genesis validator.\",\n            \"anyOf\": [\n                {\n                    \"$ref\": \"#/components/schemas/VestingSchedule\"\n                },\n                {\n                    \"type\": \"null\"\n                }\n            ]\n        },\n        \"inactive\": {\n            \"description\": \"`true` if validator has been \\\"evicted\\\"\",\n            \"type\": \"boolean\"\n        },\n        \"minimum_delegation_amount\": {\n            \"description\": \"Minimum allowed delegation amount in motes\",\n            \"type\": \"integer\",\n            \"format\": \"uint64\",\n            \"minimum\": 0\n        },\n        \"maximum_delegation_amount\": {\n            \"description\": \"Maximum allowed delegation amount in motes\",\n            \"type\": \"integer\",\n            \"format\": \"uint64\",\n            \"minimum\": 0\n        }\n    },\n    \"additionalProperties\": false\n}\n```\n\n----------------------------------------\n\nTITLE: Security Configuration Entry Point for Casper Token Contract\nDESCRIPTION: Entry point definition for changing security settings of the token contract. Takes no parameters but requires caller payment, likely restricted to contract administrators.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/docs/developers/cli/sending-transactions.md#2025-04-22_snippet_8\n\nLANGUAGE: JSON\nCODE:\n```\n{\n  \"key\": \"entry-point-v1-entity-contract-363996106630892a964565574fcdfd2435f21a17a3ad1ed2054146e7d8461640-82a811993cf9ccb5e46c9608c69d86e3c9b7b499520fd48cdca1424f2a08efdc\",\n  \"kind\": {\n    \"Write\": {\n      \"EntryPoint\": {\n        \"V1CasperVm\": {\n          \"name\": \"change_security\",\n          \"args\": [],\n          \"ret\": \"Unit\",\n          \"access\": \"Public\",\n          \"entry_point_type\": \"Called\",\n          \"entry_point_payment\": \"Caller\"\n        }\n      }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Installing Casper Python SDK with pip - Bash\nDESCRIPTION: Installs the pycspr Python package using pip. Python 3 and pip must be installed. Run this command in your terminal or virtual environment to enable Casper interactions in Python applications.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/versioned_docs/version-1.5.X/developers/dapps/sdk/client-library-usage.md#2025-04-22_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\npip install pycspr\n```\n\n----------------------------------------\n\nTITLE: Installing Cargo Casper Tool (Bash)\nDESCRIPTION: Installs the `cargo-casper` tool using Rust's package manager, Cargo. This tool is essential for building Casper smart contracts written in Rust.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/docs/resources/quick-start.md#2025-04-22_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\ncargo install cargo-casper\n```\n\n----------------------------------------\n\nTITLE: Unbonding via Compiled Wasm using Casper Client (Bash)\nDESCRIPTION: This command uses `casper-client put-deploy` to deploy and execute a pre-compiled Wasm contract (`withdraw_bid.wasm`) for unbonding validator stake. It requires specifying the node address, validator secret key path, chain name, an estimated payment amount, the path to the `withdraw_bid.wasm` file, the validator's public key, and the amount to withdraw in motes. This method is generally more expensive than calling the system auction contract directly.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/docs/operators/becoming-a-validator/unbonding.md#2025-04-22_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nsudo -u casper casper-client put-deploy \\\n--node-address <HOST:PORT> \\\n--secret-key <PATH> \\\n--chain-name <CHAIN_NAME> \\\n--payment-amount <PAYMENT_AMOUNT> \\\n--session-path <PATH>/casper-node/target/wasm32-unknown-unknown/release/withdraw_bid.wasm \\\n--session-arg=\"public_key:public_key='<PUBLIC_KEY_HEX>'\" \\\n--session-arg=\"amount:u512='<AMOUNT_TO_WITHDRAW>'\"\n```\n\n----------------------------------------\n\nTITLE: Retrieving Account Info Using Casper CLI\nDESCRIPTION: Command to fetch account information using casper-client. Requires specifying a node address and public key. The node address should include host and port (default 7777), while the public key can be provided as a formatted string or file path.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/docs/concepts/accounts-and-keys.md#2025-04-22_snippet_12\n\nLANGUAGE: bash\nCODE:\n```\ncasper-client get-account-info \\\n--node-address <HOST:PORT>  \\\n--public-key <FORMATTED STRING or PATH>\n```\n\n----------------------------------------\n\nTITLE: User Privilege Specification in Sudoers\nDESCRIPTION: Specifies the required line to be added to the sudoers file to grant the new user passwordless sudo privileges. Ensures the new user can perform administrative tasks with ease.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/docs/operators/setup/non-root-user.md#2025-04-22_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\n# User privilege specification\nroot    ALL=(ALL:ALL) ALL\n<username>  ALL=(ALL:ALL) NOPASSWD:ALL\n```\n\n----------------------------------------\n\nTITLE: Activating Bash Auto-Completion for casper-client\nDESCRIPTION: Sources the generated bash auto-completion script for `casper-client` into the current shell session, enabling tab completion for its commands. Alternatively, logging out and back in achieves the same result.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/versioned_docs/version-1.5.X/operators/setup/install-node.md#2025-04-22_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\nsource /usr/share/bash-completion/completions/casper-client\n```\n\n----------------------------------------\n\nTITLE: Installing Build Essential on Linux\nDESCRIPTION: Commands to install and verify gcc/g++ compiler tools on Linux.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/versioned_docs/version-1.5.X/developers/dapps/setup-nctl.md#2025-04-22_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\nsudo apt install build-essential\ngcc --version\ng++ --version\n```\n\n----------------------------------------\n\nTITLE: Querying Transaction by Hash - Casper Network - JSON\nDESCRIPTION: This snippet demonstrates a JSON-RPC request for the 'info_get_transaction' method on Casper Network, issued in JSON format. It requests transaction information by transaction hash, with an option to request finalized approvals via parameters. Dependencies include a Casper node and the presence of the given transaction hash on chain; required parameters are transaction_hash (with version info) and optionally finalized_approvals; return includes the transaction details or an error if the hash is not found.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/versioned_docs/version-2.0.0/developers/json-rpc/json-rpc-informational.md#2025-04-22_snippet_12\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"id\": 1,\n  \"jsonrpc\": \"2.0\",\n  \"method\": \"info_get_transaction\",\n  \"params\": [\n    {\n      \"name\": \"transaction_hash\",\n      \"value\": {\n        \"Version1\": \"f5582cb81a5abda63ebaa4edb3b05210ecbd63ffb8dd17bfbeb3b867f4014468\"\n      }\n    },\n    {\n      \"name\": \"finalized_approvals\",\n      \"value\": true\n    }\n  ],\n}\n\n```\n\n----------------------------------------\n\nTITLE: Updating Rust Toolchain - Bash\nDESCRIPTION: Updates all installed Rust toolchains to the latest version, mitigating compatibility issues. Required if cargo-casper or other Rust tools request a newer Rust version.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/versioned_docs/version-1.5.X/developers/prerequisites.md#2025-04-22_snippet_12\n\nLANGUAGE: bash\nCODE:\n```\nrustup update\n```\n\n----------------------------------------\n\nTITLE: Defining Signature Schema in JSON\nDESCRIPTION: JSON schema definition for a Signature in Casper's system. This represents a hex-encoded cryptographic signature, including the algorithm tag prefix.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/condor/jsonrpc-comp/rpc-1.5/schema/components.json.md#2025-04-22_snippet_12\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"description\": \"Hex-encoded cryptographic signature, including the algorithm tag prefix.\",\n    \"type\": \"string\"\n}\n```\n\n----------------------------------------\n\nTITLE: Sample Global State Query Request\nDESCRIPTION: Example of querying a contract's global state with actual values for node address, state root hash, and contract address.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/versioned_docs/version-2.0.0/developers/cli/querying-global-state.md#2025-04-22_snippet_12\n\nLANGUAGE: bash\nCODE:\n```\ncasper-client query-global-state \\\n--node-address http://localhost:11101 \\\n--state-root-hash 6b5849caa605acdc29564f303764396a27ef7a6b1a61f7b13109b129e7e70d81 \\\n--key \"entity-contract-a1d0bf9d96f3efc9ea67f627df3a7cba390bfc582956032db91060ca5d413e68\"\n```\n\n----------------------------------------\n\nTITLE: Defining Account Hash Schema - JSON - JSON\nDESCRIPTION: This snippet defines a simple schema for representing an account hash as a formatted string. No additional properties are allowed, ensuring the field strictly contains a properly formatted account hash. It is intended to validate account identifiers in the Casper Network and requires no dependencies.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/condor/jsonrpc-comp/rpc-2.0/schema/components.json.md#2025-04-22_snippet_17\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"description\": \"Account hash as a formatted string.\",\n    \"type\": \"string\"\n}\n```\n\n----------------------------------------\n\nTITLE: Stopping the Event Stream with JavaScript\nDESCRIPTION: This JavaScript snippet shows how to stop listening to all events emitted by a Casper node using the stop function of the EventStream object.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/versioned_docs/version-2.0.0/developers/dapps/monitor-and-consume-events.md#2025-04-22_snippet_6\n\nLANGUAGE: JavaScript\nCODE:\n```\nes.stop()\n```\n\n----------------------------------------\n\nTITLE: Calculating Round Issuance Rate in Casper Network\nDESCRIPTION: Formula for calculating the round issuance rate, which adjusts the annual issuance rate to a single round length determined by the minimum_round_exponent chainspec parameter.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/versioned_docs/version-2.0.0/concepts/economics/consensus.md#2025-04-22_snippet_1\n\nLANGUAGE: plaintext\nCODE:\n```\nround_issuance_rate = (1 + issuance_rate)^(2^minimum_round_exponent / ticks_per_year) - 1\n```\n\n----------------------------------------\n\nTITLE: Handling Events in Python\nDESCRIPTION: This Python code shows how to handle events from a Casper node by checking if the account that submitted a deploy matches a specific public key. The eventHandler function processes event data received from the Casper network.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/versioned_docs/version-1.5.X/developers/dapps/monitor-and-consume-events.md#2025-04-22_snippet_13\n\nLANGUAGE: python\nCODE:\n```\ndef eventHandler(event):\n  if event[\"DeployAccepted\"][\"header\"][\"account\"] == \"012481699f9231e36ecf002675cd7186b48e6a735d10ec1b30f587ca716937752c\":\n    # Perform an action\n```\n\n----------------------------------------\n\nTITLE: Generating Admin Entries in Global State via TOML\nDESCRIPTION: Generates entries required to update global state, creating new admin accounts using specified public keys and balances. Outputs are directed to the global_state.toml file.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/versioned_docs/version-2.0.0/operators/setup-network/create-private.md#2025-04-22_snippet_24\n\nLANGUAGE: toml\nCODE:\n```\n[[entries]]\nkey = \"balance-97bbcc2425b3eda5149a893c6180b62f1472d5143bb1450d01c8e1e96be09f13\"\nvalue = \"AAIAAAABCgg=\"\n\n[[entries]]\nkey = \"uref-97bbcc2425b3eda5149a893c6180b62f1472d5143bb1450d01c8e1e96be09f13-007\"\nvalue = \"AAAAAAAJ\"\n\n[[entries]]\nkey = \"account-hash-ac2f4caa3e3ce1cd1dfb3d089854020b18a50cac49977d0a4c873c4d3d5a2409\"\nvalue = \"AawvTKo+POHNHfs9CJhUAgsYpQysSZd9CkyHPE09WiQJAAAAAJe7zCQls+2lFJqJPGGAti8UctUUO7FFDQHI4elr4J8TBwEAAACsL0yqPjzhzR37PQiYVAILGKUMrEmXfQpMhzxNPVokCQEBAQ==\"\n\n# total supply increases from 200000000000000000 to 200000000000000010\n[[entries]]\nkey = \"uref-f8475fd4125484be39a0793530f09a29d220ffda8e48387b3d2194ddfc22894e-007\"\nvalue = \"AAkAAAAICgAUu/CKxgII\"\n```\n\n----------------------------------------\n\nTITLE: Example Contract Query Result with Entry Points\nDESCRIPTION: Example output from querying a contract's global state, showing contract details including package hash, WASM hash, and entry points. This particular example shows three entry points including a newly added counter_decrement function.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/docs/resources/beginner/upgrade-contract.md#2025-04-22_snippet_7\n\nLANGUAGE: rust\nCODE:\n```\n {\n  \"id\": 5602352547578277096,\n  \"jsonrpc\": \"2.0\",\n  \"result\": {\n    \"api_version\": \"1.4.13\",\n    \"block_header\": null,\n    \"merkle_proof\": \"[54054 hex chars]\",\n    \"stored_value\": {\n      \"Contract\": {\n        \"contract_package_hash\": \"contract-package-wasmc014187ccf3366cca70317d6d567cd56a05ecf1ee50ed3bd02727c2864e3d3a8\",\n        \"contract_wasm_hash\": \"contract-wasm-64d252f1ab72c7295a85d15c3f456f8bdda586580b0b7106e203fa4fd83f05d7\",\n        \"entry_points\": [\n          {\n            \"access\": \"Public\",\n            \"args\": [],\n            \"entry_point_type\": \"Contract\",\n            \"name\": \"counter_decrement\",\n            \"ret\": \"Unit\"\n          },\n          {\n            \"access\": \"Public\",\n            \"args\": [],\n            \"entry_point_type\": \"Contract\",\n            \"name\": \"counter_get\",\n            \"ret\": \"I32\"\n          },\n          {\n            \"access\": \"Public\",\n            \"args\": [],\n            \"entry_point_type\": \"Contract\",\n            \"name\": \"counter_inc\",\n            \"ret\": \"Unit\"\n          }\n        ],\n        \"named_keys\": [\n          {\n            \"key\": \"uref-ca980a2e4c08dc3f233b728b22b909cd4e894295155a7902bf88a59eac1531d1-007\",\n            \"name\": \"count\"\n          }\n        ],\n        \"protocol_version\": \"1.4.13\"\n      }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining `state_get_dictionary_item` RPC Method in JSON (Casper Network)\nDESCRIPTION: This JSON object defines the specification for the `state_get_dictionary_item` RPC method in the Casper Network API. It includes a summary, required parameters (`state_root_hash`, `dictionary_identifier`), the expected result structure (`api_version`, `dictionary_key`, `stored_value`, `merkle_proof`), and a detailed example demonstrating its usage with sample parameter values and the corresponding result.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/condor/jsonrpc-comp/rpc-2.0/schema.json.md#2025-04-22_snippet_8\n\nLANGUAGE: json\nCODE:\n```\n{\n      \"name\": \"state_get_dictionary_item\",\n      \"summary\": \"returns an item from a Dictionary\",\n      \"params\": [\n        {\n          \"name\": \"state_root_hash\",\n          \"schema\": {\n            \"description\": \"Hash of the state root\",\n            \"$ref\": \"#/components/schemas/Digest\"\n          },\n          \"required\": true\n        },\n        {\n          \"name\": \"dictionary_identifier\",\n          \"schema\": {\n            \"description\": \"The Dictionary query identifier.\",\n            \"$ref\": \"#/components/schemas/DictionaryIdentifier\"\n          },\n          \"required\": true\n        }\n      ],\n      \"result\": {\n        \"name\": \"state_get_dictionary_item_result\",\n        \"schema\": {\n          \"description\": \"Result for \\\"state_get_dictionary_item\\\" RPC response.\",\n          \"type\": \"object\",\n          \"required\": [\n            \"api_version\",\n            \"dictionary_key\",\n            \"merkle_proof\",\n            \"stored_value\"\n          ],\n          \"properties\": {\n            \"api_version\": {\n              \"description\": \"The RPC API version.\",\n              \"type\": \"string\"\n            },\n            \"dictionary_key\": {\n              \"description\": \"The key under which the value is stored.\",\n              \"type\": \"string\"\n            },\n            \"stored_value\": {\n              \"description\": \"The stored value.\",\n              \"$ref\": \"#/components/schemas/StoredValue\"\n            },\n            \"merkle_proof\": {\n              \"description\": \"The Merkle proof.\",\n              \"type\": \"string\"\n            }\n          },\n          \"additionalProperties\": false\n        }\n      },\n      \"examples\": [\n        {\n          \"name\": \"state_get_dictionary_item_example\",\n          \"params\": [\n            {\n              \"name\": \"state_root_hash\",\n              \"value\": \"0808080808080808080808080808080808080808080808080808080808080808\"\n            },\n            {\n              \"name\": \"dictionary_identifier\",\n              \"value\": {\n                \"URef\": {\n                  \"seed_uref\": \"uref-09480c3248ef76b603d386f3f4f8a5f87f597d4eaffd475433f861af187ab5db-007\",\n                  \"dictionary_item_key\": \"a_unique_entry_identifier\"\n                }\n              }\n            }\n          ],\n          \"result\": {\n            \"name\": \"state_get_dictionary_item_example_result\",\n            \"value\": {\n              \"api_version\": \"2.0.0\",\n              \"dictionary_key\": \"dictionary-67518854aa916c97d4e53df8570c8217ccc259da2721b692102d76acd0ee8d1f\",\n              \"stored_value\": {\n                \"CLValue\": {\n                  \"cl_type\": \"U64\",\n                  \"bytes\": \"0100000000000000\",\n                  \"parsed\": 1\n                }\n              },\n              \"merkle_proof\": \"01000000006ef2e0949ac76e55812421f755abe129b6244fe7168b77f47a72536147614625016ef2e0949ac76e55812421f755abe129b6244fe7168b77f47a72536147614625000000003529cde5c621f857f75f3810611eb4af3f998caaa9d4a3413cf799f99c67db0307010000006ef2e0949ac76e55812421f755abe129b6244fe7168b77f47a7253614761462501010102000000006e06000000000074769d28aac597a36a03a932d4b43e4f10bf0403ee5c41dd035102553f5773631200b9e173e8f05361b681513c14e25e3138639eb03232581db7557c9e8dbbc83ce94500226a9a7fe4f2b7b88d5103a4fc7400f02bf89c860c9ccdd56951a2afe9be0e0267006d820fb5676eb2960e15722f7725f3f8f41030078f8b2e44bf0dc03f71b176d6e800dc5ae9805068c5be6da1a90b2528ee85db0609cc0fb4bd60bbd559f497a98b67f500e1e3e846592f4918234647fca39830b7e1e6ad6f5b7a99b39af823d82ba1873d000003000000010186ff500f287e9b53f823ae1582b1fa429dfede28015125fd233a31ca04d5012002015cc42669a55467a1fdf49750772bfc1aed59b9b085558eb81510e9b015a7c83b0301e3cf4a34b1db6bfa58808b686cb8fe21ebe0c1bcbcee522649d2b135fe510fe3\"\n            }\n          }\n        }\n      ]\n    }\n```\n\n----------------------------------------\n\nTITLE: Example Account Details after Key Addition (JSON)\nDESCRIPTION: Illustrates the JSON structure representing account details retrieved from the global state after successfully adding an associated key. It shows the account hash, action thresholds (deployment and key management), the list of associated keys with their weights (including the newly added one), the main purse URef, and named keys.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/docs/resources/advanced/multi-sig/multi-sig-workflow.md#2025-04-22_snippet_21\n\nLANGUAGE: json\nCODE:\n```\n\"Account\": {\n  \"account_hash\": \"account-hash-1ed5a1c39bea93c105f2d22c965a84b205b36734a377d05dbb103b6bfaa595a7\",\n  \"action_thresholds\": {\n    \"deployment\": 2,\n    \"key_management\": 3\n  },\n  \"associated_keys\": [\n    {\n      \"account_hash\": \"account-hash-04a9691a9f8f05a0f08bd686f188b27c7dbcd644b415759fd3ca043d916ea02f\",\n      \"weight\": 1\n    },\n    {\n      \"account_hash\": \"account-hash-1fed34baa6807a7868bb18f91b161d99ebf21763810fe4c92e39775d10bbf1f8\",\n      \"weight\": 1\n    },\n    {\n      \"account_hash\": \"account-hash-1ed5a1c39bea93c105f2d22c965a84b205b36734a377d05dbb103b6bfaa595a7\",\n      \"weight\": 3\n    },\n    {\n      \"account_hash\": \"account-hash-e2d00525cac31ae2756fb155f289d276c6945b6914923fe275de0cb127bffee7\",\n      \"weight\": 1\n    }\n  ],\n  \"main_purse\": \"uref-8294864177c2c1ec887a11dae095e487b5256ce6bd2a1f2740d0e4f28bd3251c-007\",\n  \"named_keys\": []\n}\n```\n\n----------------------------------------\n\nTITLE: Installing cargo-casper CLI Tool - Bash\nDESCRIPTION: Installs cargo-casper, a helper CLI for bootstrapping Casper smart contract projects, via cargo. Requires Rust, cargo, and internet connection. Installs to user cargo binary path.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/versioned_docs/version-1.5.X/developers/prerequisites.md#2025-04-22_snippet_11\n\nLANGUAGE: bash\nCODE:\n```\ncargo install cargo-casper\n```\n\n----------------------------------------\n\nTITLE: Compiling Casper Smart Contract with Make\nDESCRIPTION: Compile the counter contract to WebAssembly using Make commands.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/versioned_docs/version-1.5.X/resources/beginner/counter-testnet/walkthrough.md#2025-04-22_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\ncd counter\nmake prepare\nmake test\n```\n\n----------------------------------------\n\nTITLE: JSON Schema Definitions for Casper Network Components\nDESCRIPTION: Comprehensive OpenAPI/Swagger schema definitions for Casper Network components including JsonEraEnd, JsonEraReport, Reward, ValidatorWeight, ProtocolVersion, PurseIdentifier, PeersMap, MinimalBlockInfo, NextUpgrade, ActivationPoint, ReactorState, AvailableBlockRange, and BlockSynchronizerStatus structures. Each schema defines required properties, data types, and validation rules.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/condor/jsonrpc-comp/rpc-1.5/schema.json.md#2025-04-22_snippet_61\n\nLANGUAGE: json\nCODE:\n```\n{\n\"JsonEraEnd\": {\n  \"type\": \"object\",\n  \"required\": [\n    \"era_report\",\n    \"next_era_validator_weights\"\n  ],\n  \"properties\": {\n    \"era_report\": {\n      \"$ref\": \"#/components/schemas/JsonEraReport\"\n    },\n    \"next_era_validator_weights\": {\n      \"type\": \"array\",\n      \"items\": {\n        \"$ref\": \"#/components/schemas/ValidatorWeight\"\n      }\n    }\n  },\n  \"additionalProperties\": false\n}\n}\n```\n\n----------------------------------------\n\nTITLE: Chain Get Era Summary Response Example\nDESCRIPTION: Example JSON response from the chain_get_era_summary endpoint showing era summary details including block hash, era ID, seigniorage allocations and merkle proof.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/versioned_docs/version-2.0.0/developers/json-rpc/json-rpc-informational.md#2025-04-22_snippet_3\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"jsonrpc\": \"2.0\",\n  \"id\": 1,\n  \"result\": {\n    \"name\": \"chain_get_era_summary_result\",\n    \"value\": {\n      \"api_version\": \"2.0.0\",\n      \"era_summary\": {\n        \"block_hash\": \"0744fcb72af43c5cc372039bc5a8bfee48808a9ce414acc0d6338a628c20eb42\",\n        \"era_id\": 42,\n        \"stored_value\": {\n          \"EraInfo\": {\n            \"seigniorage_allocations\": [\n              {\n                \"Delegator\": {\n                  \"delegator_public_key\": \"01e1b46a25baa8a5c28beb3c9cfb79b572effa04076f00befa57eb70b016153f18\",\n                  \"validator_public_key\": \"012a1732addc639ea43a89e25d3ad912e40232156dcaa4b9edfc709f43d2fb0876\",\n                  \"amount\": \"1000\"\n                }\n              },\n              {\n                \"Validator\": {\n                  \"validator_public_key\": \"012a1732addc639ea43a89e25d3ad912e40232156dcaa4b9edfc709f43d2fb0876\",\n                  \"amount\": \"2000\"\n                }\n              }\n            ]\n          }\n        },\n        \"state_root_hash\": \"0808080808080808080808080808080808080808080808080808080808080808\",\n        \"merkle_proof\": \"01000000006ef2e0949ac76e55812421f755abe129b6244fe7168b77f47a72536147614625016ef2e0949ac76e55812421f755abe129b6244fe7168b77f47a72536147614625000000003529cde5c621f857f75f3810611eb4af3f998caaa9d4a3413cf799f99c67db0307010000006ef2e0949ac76e55812421f755abe129b6244fe7168b77f47a7253614761462501010102000000006e06000000000074769d28aac597a36a03a932d4b43e4f10bf0403ee5c41dd035102553f5773631200b9e173e8f05361b681513c14e25e3138639eb03232581db7557c9e8dbbc83ce94500226a9a7fe4f2b7b88d5103a4fc7400f02bf89c860c9ccdd56951a2afe9be0e0267006d820fb5676eb2960e15722f7725f3f8f41030078f8b2e44bf0dc03f71b176d6e800dc5ae9805068c5be6da1a90b2528ee85db0609cc0fb4bd60bbd559f497a98b67f500e1e3e846592f4918234647fca39830b7e1e6ad6f5b7a99b39af823d82ba1873d000003000000010186ff500f287e9b53f823ae1582b1fa429dfede28015125fd233a31ca04d5012002015cc42669a55467a1fdf49750772bfc1aed59b9b085558eb81510e9b015a7c83b0301e3cf4a34b1db6bfa58808b686cb8fe21ebe0c1bcbcee522649d2b135fe510fe3\"\n      }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Querying Account Balance Example in C#\nDESCRIPTION: Complete C# program demonstrating how to connect to a Casper testnet node and retrieve an account's main purse balance using the SDK.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/versioned_docs/version-1.5.X/developers/dapps/sdk/csharp-sdk.md#2025-04-22_snippet_3\n\nLANGUAGE: csharp\nCODE:\n```\nusing System;\nusing System.Threading.Tasks;\nusing Casper.Network.SDK;\nusing Casper.Network.SDK.JsonRpc;\nusing Casper.Network.SDK.Types;\n\nnamespace Casper.NET.SDK.Examples\n{\n    public class GetAccountBalance\n    {\n        public static async Task Main(string[] args)\n        {\n            string nodeAddress = \"http://testnet-node.make.services:7777\";\n\n            var hex = \"0203914289b334f57366541099a52156b149436fdb0422b3c48fe4115d0578abf690\";\n            var publicKey = PublicKey.FromHexString(hex);\n\n            try\n            {\n                var casperSdk = new NetCasperClient(nodeAddress);\n\n                // Get the balance using the account public key\n                //\n                var rpcResponse = await casperSdk.GetAccountBalance(publicKey);\n                Console.WriteLine(\"Public Key Balance: \" + rpcResponse.Parse().BalanceValue);\n            }\n            catch (RpcClientException e)\n            {\n                Console.WriteLine(\"ERROR:\\n\" + e.RpcError.Message);\n            }\n            catch (Exception e)\n            {\n                Console.WriteLine(e);\n            }\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Invoking Contract Entry Point with Multiple Authorization Keys in Rust\nDESCRIPTION: Code that calls a contract's entry point using a deploy authorized with multiple keys (account_addr_1 and DEFAULT_ACCOUNT_ADDR). This demonstrates how to satisfy a contract that requires installer key authorization.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/docs/resources/advanced/list-auth-keys-tutorial.md#2025-04-22_snippet_12\n\nLANGUAGE: rust\nCODE:\n```\nlet entry_point_deploy_item = DeployItemBuilder::new()\n    .with_empty_payment_bytes(runtime_args! {ARG_AMOUNT => *DEFAULT_PAYMENT})\n    .with_authorization_keys(&[account_addr_1, *DEFAULT_ACCOUNT_ADDR])\n    .with_address(account_addr_1)\n    .with_stored_session_hash(contract_hash, ENTRYPOINT, runtime_args! {})\n    .build();\n\nlet entry_point_request =\n    ExecuteRequestBuilder::from_deploy_item(entry_point_deploy_item).build();\n\nbuilder.exec(entry_point_request).expect_success().commit();\n```\n\n----------------------------------------\n\nTITLE: Account Configuration in JSON Format\nDESCRIPTION: This JSON output snippet shows the account configuration details including account hash, action thresholds, and associated keys. It is used to verify that changes in weights and thresholds have been applied correctly.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/versioned_docs/version-1.5.X/resources/advanced/multi-sig/multi-sig-workflow.md#2025-04-22_snippet_6\n\nLANGUAGE: json\nCODE:\n```\n\"Account\": {\n  \"account_hash\": \"account-hash-1ed5a1c39bea93c105f2d22c965a84b205b36734a377d05dbb103b6bfaa595a7\",\n  \"action_thresholds\": {\n    \"deployment\": 1,\n    \"key_management\": 1\n  },\n  \"associated_keys\": [\n    {\n      \"account_hash\": \"account-hash-1ed5a1c39bea93c105f2d22c965a84b205b36734a377d05dbb103b6bfaa595a7\",\n      \"weight\": 3\n    }\n  ],\n  \"main_purse\": \"uref-8294864177c2c1ec887a11dae095e487b5256ce6bd2a1f2740d0e4f28bd3251c-007\",\n  \"named_keys\": []\n}\n```\n\n----------------------------------------\n\nTITLE: Calling a Rust Contract by Hash\nDESCRIPTION: After installing a contract, this snippet retrieves its hash and attempts to call an entry point, checking for failure in case it does not exist using Rust.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/docs/developers/writing-onchain-code/testing-contracts.md#2025-04-22_snippet_7\n\nLANGUAGE: rust\nCODE:\n```\n    // Check the contract hash.\n    let contract_v1_hash = builder\n        .get_expected_account(*DEFAULT_ACCOUNT_ADDR)\n        .named_keys()\n        .get(CONTRACT_KEY)\n        .expect(\"must have contract hash key as part of contract creation\")\n        .into_hash()\n        .map(ContractHash::new)\n        .expect(\"must get contract hash\");\n```\n\n----------------------------------------\n\nTITLE: Querying Global State Root Hash in Casper Network\nDESCRIPTION: Command to obtain the latest global state hash from a Casper node. This hash is required for all queries made to global state.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/versioned_docs/version-2.0.0/resources/beginner/querying-network.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ncasper-client get-state-root-hash \\\n     --id 1 \\\n     --node-address http://<node-ip-address>:7777\n```\n\n----------------------------------------\n\nTITLE: Verifying CMake installation\nDESCRIPTION: Verify the installation of CMake by checking its version.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/versioned_docs/version-2.0.0/developers/prerequisites.md#2025-04-22_snippet_22\n\nLANGUAGE: bash\nCODE:\n```\ncmake --version\n```\n\n----------------------------------------\n\nTITLE: Defining Minimal Block Information Schema with References - JSON\nDESCRIPTION: This snippet provides a JSON schema for a Block object containing the minimal fields necessary to satisfy a node status request in the Casper Network. It enforces presence of creator, era_id, hash, height, state_root_hash, and timestamp fields, with some fields referencing external schema components for validation and typing. This definition is intended for use in API validation, documentation, or automated tooling, and constrains additional properties, ensuring only the listed keys are accepted.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/condor/jsonrpc-comp/rpc-2.0/schema/MinimalBlockInfo.json.md#2025-04-22_snippet_0\n\nLANGUAGE: JSON\nCODE:\n```\n{\n    \"description\": \"Minimal info about a `Block` needed to satisfy the node status request.\",\n    \"type\": \"object\",\n    \"required\": [\n        \"creator\",\n        \"era_id\",\n        \"hash\",\n        \"height\",\n        \"state_root_hash\",\n        \"timestamp\"\n    ],\n    \"properties\": {\n        \"hash\": {\n            \"$ref\": \"#/components/schemas/BlockHash\"\n        },\n        \"timestamp\": {\n            \"$ref\": \"#/components/schemas/Timestamp\"\n        },\n        \"era_id\": {\n            \"$ref\": \"#/components/schemas/EraId\"\n        },\n        \"height\": {\n            \"type\": \"integer\",\n            \"format\": \"uint64\",\n            \"minimum\": 0\n        },\n        \"state_root_hash\": {\n            \"$ref\": \"#/components/schemas/Digest\"\n        },\n        \"creator\": {\n            \"$ref\": \"#/components/schemas/PublicKey\"\n        }\n    },\n    \"additionalProperties\": false\n}\n```\n\n----------------------------------------\n\nTITLE: Activating Backup Node as New Validator (Bash)\nDESCRIPTION: Stops the `casper-node-launcher` service on the `backup_node`, navigates into the pre-configured `/etc/casper/validator_keys/current_node` directory, copies the original validator keys (`*`) up one level to `/etc/casper/validator_keys/` using `sudo -u casper` to ensure correct ownership, and then restarts the `casper-node-launcher` service. This sequence effectively promotes the backup node to become the active validator using the original node's keys. Requires `systemctl` for service management and the pre-defined key structure.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/versioned_docs/version-1.5.X/operators/maintenance/moving-node.md#2025-04-22_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nsudo systemctl stop casper-node-launcher\ncd /etc/casper/validator_keys/current_node\nsudo -u casper cp * ../\nsudo systemctl start casper-node-launcher\n```\n\n----------------------------------------\n\nTITLE: Approve Token Allowance Using Casper Client JSON\nDESCRIPTION: This snippet shows how to approve a third-party account to spend a specified allowance of CEP-18 tokens using the Casper client via JSON. This involves specifying the node URL, chain name, secret key path, contract hash, entry point, spender's account hash, amount of tokens, and gas payment. Outputs can be verified through subsequent state queries.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/docs/resources/tokens/cep18/transfer.md#2025-04-22_snippet_3\n\nLANGUAGE: json\nCODE:\n```\ncasper-client put-deploy -n http://<node IP>:<PORT>\\\n--chain-name <CHAIN NAME> \\\n--secret-key ~/casper/demo/user_a/secret_key.pem \\\n// This is the contract hash of the CEP-18 token contract.\n--session-hash hash-05d893e76c731729fc26339e5a970bd79fbf4a6adf743c8385431fb494bff45e \\\n--session-entry-point \"approve\" \\\n// This is the account hash of the account that will receive an allowance from the balance of the account that sent the Deploy.\n--session-arg \"spender:key='account-hash-17192017d32db5dc9f598bf8ac6ac35ee4b64748669b00572d88335941479513'\" \\\n// This is the number of CEP-18 tokens included in the allowance.\n--session-arg \"amount:u256='15'\" \\\n--payment-amount \"10000000000\"\n```\n\n----------------------------------------\n\nTITLE: Describing BlockSyncStatus Serialization (Casper Network)\nDESCRIPTION: Explains the serialization format for BlockSyncStatus, representing the sync status of a block. It serializes as the block hash (bytes), followed by an optional block height (u64), and finally the acquisition state (string bytes).\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/versioned_docs/version-2.0.0/concepts/serialization/types.md#2025-04-22_snippet_3\n\nLANGUAGE: Text\nCODE:\n```\n## BlockSyncStatus {#blocksyncstatus}\n\nThe status of syncing an individual block. It serializes as the byte representation of the [block hash](./structures.md#block-hash) of the block in question, followed by an [`option`](./primitives.md#clvalue-option) representing a [`u64`](./primitives.md#clvalue-numeric) of the block height and the remainder is the byte representation of the `acquisition_state` as a [string](./primitives.md#clvalue-string).\n```\n\n----------------------------------------\n\nTITLE: Defining TransformV1 Schema for Casper Network API\nDESCRIPTION: JSON schema definition for a TransformV1 object, which represents a transformation performed while executing a deploy in the Casper Network. It includes properties for the key and the transformation type.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/condor/jsonrpc-comp/rpc-2.0/schema/components.json.md#2025-04-22_snippet_27\n\nLANGUAGE: json\nCODE:\n```\n\"TransformV1\": {\n    \"description\": \"A transformation performed while executing a deploy.\",\n    \"type\": \"object\",\n    \"required\": [\n        \"key\",\n        \"transform\"\n    ],\n    \"properties\": {\n        \"key\": {\n            \"description\": \"The formatted string of the `Key`.\",\n            \"type\": \"string\"\n        },\n        \"transform\": {\n            \"description\": \"The transformation.\",\n            \"allOf\": [\n                {\n                    \"$ref\": \"#/components/schemas/TransformKindV1\"\n                }\n            ]\n        }\n    },\n    \"additionalProperties\": false\n}\n```\n\n----------------------------------------\n\nTITLE: Querying Auction Information\nDESCRIPTION: Command to retrieve current auction information to verify bid acceptance and validator status.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/versioned_docs/version-2.0.0/operators/becoming-a-validator/bonding.md#2025-04-22_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\ncasper-client get-auction-info --node-address http://<HOST:PORT>\n```\n\n----------------------------------------\n\nTITLE: Defining Casper Smart Contract Account and Protocol Settings - JSON\nDESCRIPTION: Specifies key contract configuration data including protocol version, purse URef, authorized account hashes and weights, key management and upgrade thresholds, and message topic hashes. This snippet is crucial for contract setup, account control, and event monitoring, ensuring only the correct keys and topics are recognized by the contract. Intended for use by contract deployers, operators, or integration libraries needing to parse or enforce access/usage policies.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/versioned_docs/version-2.0.0/developers/writing-onchain-code/emitting-contract-events.md#2025-04-22_snippet_6\n\nLANGUAGE: JSON\nCODE:\n```\n{\n  \"protocol_version\": \"1.0.0\",\n  \"main_purse\": \"uref-596d134ad1078315a5e0cd2f40802b65cf53b6c789f0a38ba04157d04e15ab2b-007\",\n  \"associated_keys\": [\n    {\n      \"account_hash\": \"account-hash-212ffdd040b65495419f4057c8392930e410f7bf24baeec8de59a6117b63e45c\",\n      \"weight\": 1\n    }\n  ],\n  \"action_thresholds\": {\n    \"deployment\": 1,\n    \"upgrade_management\": 1,\n    \"key_management\": 1\n  },\n  \"message_topics\": [\n    {\n      \"topic_name\": \"events\",\n      \"topic_name_hash\": \"topic-name-5721a6d9d7a9afe5dfdb35276fb823bed0f825350e4d865a5ec0110c380de4e1\"\n    }\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Trie Chunking Protocol Documentation\nDESCRIPTION: Specifies how large trie nodes are split and transferred across the network using a chunk size of 8MB. Includes validation requirements for receiving nodes and chunk request protocols using TrieOrChunkId.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/versioned_docs/version-2.0.0/concepts/design/networking-protocol.md#2025-04-22_snippet_10\n\n\n\n----------------------------------------\n\nTITLE: Rotating Validators in Casper Network via CLI\nDESCRIPTION: Rotates the validator set by leveraging global state updates using the global-state-update-gen tool. Needed parameters include data directory, state hash, and details of new validators.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/versioned_docs/version-2.0.0/operators/setup-network/create-private.md#2025-04-22_snippet_26\n\nLANGUAGE: sh\nCODE:\n```\nglobal-state-update-gen validators \\\n  --data-dir $DATA_DIR \\\n  --state-hash $STATE_ROOT_HASH \\\n  --validator NEW_PUBLIC_KEY,NEW_STAKE \\\n  --validator NEW_PUBLIC_KEY2,NEW_STAKE2\n```\n\n----------------------------------------\n\nTITLE: Example Delegation Using System Auction Contract\nDESCRIPTION: Example command demonstrating the delegation of 500 CSPR tokens on the Casper Testnet using the system auction contract method.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/docs/developers/cli/delegate.md#2025-04-22_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ncasper-client put-deploy \\\n--node-address http://65.21.75.254:7777  \\\n--chain-name casper-test \\\n--secret-key ~/KEYS/secret_key.pem \\\n--payment-amount 2500000000 \\\n--session-hash hash-93d923e336b20a4c4ca14d592b60e5bd3fe330775618290104f9beb326db7ae2 \\\n--session-entry-point delegate \\\n--session-arg \"validator:public_key='01aa17f7b9889480b1bd34c3f94f263b229c7a9b01dd4dda19c2dd1d38d176c7a0'\" \\\n--session-arg \"amount:u512='500000000000'\" \\\n--session-arg \"delegator:public_key='01e3d3392c2e0b943abe709b25de5c353e5e1e9d95c7a76e3dd343d8aa1aa08d51'\"\n```\n\n----------------------------------------\n\nTITLE: Creating a New Unlocked Contract in Rust\nDESCRIPTION: This code snippet demonstrates how to create a new unlocked contract using the new_contract function. It specifies a package name and access URef for future modifications, and stores the contract hash and version in global state.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/versioned_docs/version-1.5.X/resources/beginner/upgrade-contract.md#2025-04-22_snippet_0\n\nLANGUAGE: rust\nCODE:\n```\nlet (stored_contract_hash, contract_version) = storage::new_contract(\n    contract_entry_points,\n    Some(contract_named_keys),\n    Some(\"contract_package_name\".to_string()),\n    Some(\"contract_access_uref\".to_string()),\n);\n\nruntime::put_key(CONTRACT_KEY, stored_contract_hash.into());\n\nlet version_uref = storage::new_uref(contract_version);\nruntime::put_key(CONTRACT_VERSION_KEY, version_uref.into());\n```\n\n----------------------------------------\n\nTITLE: Querying Entity Information in Casper Network (JSON)\nDESCRIPTION: Example JSON request for the state_get_entity method, which retrieves information about an addressable entity using an entity identifier and optional block identifier.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/versioned_docs/version-2.0.0/developers/json-rpc/json-rpc-informational.md#2025-04-22_snippet_24\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"id\": 1,\n  \"jsonrpc\": \"2.0\",\n  \"method\": \"state_get_entity\",\n  \"params\": [\n    {\n      \"name\": \"entity_identifier\",\n      \"value\": {\n        \"EntityAddr\": \"entity-account-0000000000000000000000000000000000000000000000000000000000000000\"\n      }\n    },\n    {\n      \"name\": \"block_identifier\",\n      \"value\": {\n        \"Hash\": \"0707070707070707070707070707070707070707070707070707070707070707\"\n      }\n    }\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Serializing SeigniorageAllocation Structure\nDESCRIPTION: Describes `SeigniorageAllocation`, containing information about seigniorage distribution. Serialization depends on whether it's for a validator or a delegator. For a validator, it serializes as the validator's `PublicKey` followed by the `U512` amount. For a delegator, it serializes as the delegator's `PublicKey`, the validator's `PublicKey`, and then the `U512` amount.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/versioned_docs/version-2.0.0/concepts/serialization/types.md#2025-04-22_snippet_44\n\nLANGUAGE: text\nCODE:\n```\nInformation about seigniorage allocation.\n\nIf the seigniorage allocation in question is for a validator, it serializes as the validator's [`PublicKey`](./primitives.md#clvalue-publickey) followed by the [`U512` amount](./primitives.md#clvalue-numeric).\n\nIf it is a delegator, it serializes as the delegator's [`PublicKey`](./primitives.md#clvalue-publickey), followed by the validator's [`PublicKey`](./primitives.md#clvalue-publickey) and finally the [`U512` amount](./primitives.md#clvalue-numeric).\n```\n\n----------------------------------------\n\nTITLE: Inspecting Casper Node Service Status Output - Plaintext\nDESCRIPTION: Example output from systemctl status for the casper-node-launcher.service unit, showing process hierarchy, build, and status. This is reference output, not a command. Used for verification and understanding node status during troubleshooting.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/docs/operators/setup/install-node.md#2025-04-22_snippet_15\n\nLANGUAGE: plaintext\nCODE:\n```\n● casper-node-launcher.service - Casper Node Launcher\\n   Loaded: loaded (/lib/systemd/system/casper-node-launcher.service; enabled; vendor preset: enabled)\\n   Active: active (running) since Wed 2022-03-16 21:08:50 UTC; 4 days ago\\n     Docs: https://docs.casper.network\\n Main PID: 2934 (casper-node-lau)\\n    Tasks: 12 (limit: 4915)\\n   CGroup: /system.slice/casper-node-launcher.service\\n           ├─ 2934 /usr/bin/casper-node-launcher\\n           └─16842 /var/lib/casper/bin/1_4_5/casper-node validator /etc/casper/1_4_5/config.toml\n```\n\n----------------------------------------\n\nTITLE: Querying Auction State After Undelegation - Casper Client - Bash\nDESCRIPTION: This Bash command uses the casper-client get-auction-info command to query the network node for current auction status, allowing verification that undelegation has completed. A valid peer's node address and the correct port (default 7777) are required. The resulting data shows the current bids and associated public keys; absence of the undelegator's key from the bids indicates undelegation success. This can be used in both automated and manual verification flows after submitting the undelegation request.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/versioned_docs/version-2.0.0/developers/cli/undelegate.md#2025-04-22_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\ncasper-client get-auction-info \\\n--node-address http://<peer-ip-address>:7777\n```\n\n----------------------------------------\n\nTITLE: Transferring CSPR with Python pycspr SDK - Python\nDESCRIPTION: Creates, signs, and submits a Casper transfer deploy with pycspr. Requires configuration of client, recipient key, deploy parameters, and keypair approval. Prints the deploy hash upon submission. All parameters, such as node address and chain name, must match the target Casper network.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/versioned_docs/version-1.5.X/developers/dapps/sdk/client-library-usage.md#2025-04-22_snippet_14\n\nLANGUAGE: python\nCODE:\n```\nimport pycspr\n\nclient = NodeClient(NodeConnection(host = \"NODE_ADDRESS\", port_rpc = 7777))\nrecipientPublicKeyHex = \"01e8c84f4fbb58d37991ef373c08043a45c44cd7f499453fa2bd3e141cc0113b3c\"\nrecipientPublicKeyBytes = pycspr.crypto.cl_checksum.decode(recipientPublicKeyHex)\n\ndeployParams = pycspr.create_deploy_parameters(\n    account = keypair,\n    chain_name = \"casper\" # or \"casper-test\" for Testnet\n)\n\ndeploy = pycspr.create_transfer(\n    params = deployParams,\n    amount = int(2.5e9), # Minimum transfer: 2.5 CSPR\n    target = recipientPublicKeyBytes\n)\n\ndeploy.approve(keypair)\nclient.send_deploy(deploy)\nprint(deploy.hash.hex())\n```\n\n----------------------------------------\n\nTITLE: Retrieving Entity Details using casper-client in Bash\nDESCRIPTION: Command to fetch detailed information about an addressable entity (like an account or contract) using `casper-client get-entity`. Requires the node address (`--node-address`) and an identifier (`--entity-identifier`) which can be an entity hash, public key, or account hash.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/versioned_docs/version-2.0.0/developers/cli/querying-global-state.md#2025-04-22_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\n```bash\ncasper-client get-entity \\\n--node-address [NODE_SERVER_ADDRESS] \\\n--entity-identifier [FORMATTED_STRING_OR_PATH]\n```\n```\n\n----------------------------------------\n\nTITLE: GetRequests Tag Enumeration in Rust\nDESCRIPTION: Defines the available tags for GetRequest operations, indicating which type of item is being retrieved and the corresponding key type.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/versioned_docs/version-1.5.X/concepts/design/networking-protocol.md#2025-04-22_snippet_3\n\nLANGUAGE: rust\nCODE:\n```\npub enum Tag {\n    Deploy,\n    FinalizedApprovals,\n    Block,\n    GossipedAddress,\n    BlockAndMetadataByHeight,\n    BlockHeaderByHash,\n    BlockHeaderAndFinalitySignaturesByHeight,\n    TrieOrChunk,\n    BlockAndDeploysByHash,\n    BlockHeaderBatch,\n    FinalitySignaturesByHash,\n}\n```\n\n----------------------------------------\n\nTITLE: Direct CSPR Token Transfer Command\nDESCRIPTION: CLI command example showing how to perform a direct token transfer between two accounts using the casper-client. The command transfers 10 CSPR tokens between purses and requires specifying node address, chain name, and account keys.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/versioned_docs/version-2.0.0/resources/advanced/list-cspr.md#2025-04-22_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ncasper-client transfer \\\n--id 1 \\\n--transfer-id 123456 \\\n--node-address http://<node-ip-address>:7777 \\\n--amount 10000000000 \\\n--secret-key <accountA-secret-key>.pem \\\n--chain-name casper \\\n--target-account <accountB-hex-encoded-public-key> \\\n--payment-amount <payment-in-motes>\n```\n\n----------------------------------------\n\nTITLE: Querying Global State\nDESCRIPTION: Queries the network status for a specific account using state root hash.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/versioned_docs/version-1.5.X/resources/tokens/cep18/full-tutorial.md#2025-04-22_snippet_11\n\nLANGUAGE: bash\nCODE:\n```\ncasper-client query-global-state \\\n--node-address http://<HOST:PORT> \\\n--state-root-hash [STATE_ROOT_HASH] \\\n--key [ACCOUNT_HASH]\n```\n\n----------------------------------------\n\nTITLE: Decreasing CEP-18 Token Allowance via Casper Client\nDESCRIPTION: Sends a deploy using `casper-client` to call the `decrease_allowance` entry point of a CEP-18 contract package. This decreases the amount of tokens the specified `spender` account is allowed to transfer from the caller's (`--secret-key`) balance. Requires node address, caller's secret key, CEP-18 package name, spender account hash, the amount to decrease the allowance by, chain name, and payment amount.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/versioned_docs/version-1.5.X/resources/tokens/cep18/transfer.md#2025-04-22_snippet_18\n\nLANGUAGE: bash\nCODE:\n```\ncasper-client put-deploy -n http://<NODE IP>:<PORT> \\\n--secret-key ~/casper/demo/user_a/secret_key.pem \\\n--session-package-name \"cep18_contract_package_CEP18\" \\\n--session-entry-point \"decrease_allowance\" \\\n// This is the account hash of the previously authorized allowance account.\n--session-arg \"spender:key='account-hash-683f53f56926f54ef9584b07585b025c68415dc05f7b2e56749153574b83d5cd'\" \\\n// This is the additional number of CEP-18 tokens that the authorized account may spend.\n--session-arg \"amount:U256='10'\" \\\n--chain-name <CHAIN NAME> \\\n--payment-amount 1000000000\n```\n\n----------------------------------------\n\nTITLE: Monitoring Transaction Events with curl in Casper Network\nDESCRIPTION: Command to monitor the event stream from a Casper node, specifically watching for transaction events. This allows users to follow the lifecycle of their transactions on the network by connecting to a node's event stream server.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/versioned_docs/version-2.0.0/developers/cli/sending-transactions.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ncurl -s http://65.21.235.219:9999/events\n```\n\n----------------------------------------\n\nTITLE: Installing Casper Sidecar with apt - Bash\nDESCRIPTION: This snippet installs the Casper Sidecar Debian package using the 'apt install' command. It assumes you have downloaded the .deb file locally and are running the command on a Debian-based Linux system with appropriate user privileges. The package installs the Sidecar application, creates system user and group, and configures it to run as a service. Standard installation output is shown as a sample for verification.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/docs/operators/setup/casper-sidecar.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nsudo apt install ./casper-sidecar_0.1.0-0_amd64.deb\n```\n\nLANGUAGE: bash\nCODE:\n```\nReading package lists... Done\nBuilding dependency tree       \nReading state information... Done\nNote, selecting 'casper-sidecar' instead of './casper-sidecar_0.1.0-0_amd64.deb'\nThe following NEW packages will be installed:\n  casper-sidecar\n0 upgraded, 1 newly installed, 0 to remove and 18 not upgraded.\nNeed to get 0 B/4162 kB of archives.\nAfter this operation, 20.2 MB of additional disk space will be used.\nGet:1 /home/ubuntu/casper-sidecar_0.1.0-0_amd64.deb casper-sidecar amd64 0.1.0-0 [4162 kB]\nSelecting previously unselected package casper-sidecar.\n(Reading database ... 102241 files and directories currently installed.)\nPreparing to unpack .../casper-sidecar_0.1.0-0_amd64.deb ...\nUnpacking casper-sidecar (0.1.0-0) ...\nSetting up casper-sidecar (0.1.0-0) ...\nAdding system user `csidecar' (UID 114) ...\nAdding new group `csidecar' (GID 120) ...\nAdding new user `csidecar' (UID 114) with group `csidecar' ...\nNot creating home directory `/home/csidecar'.\nCreated symlink /etc/systemd/system/multi-user.target.wants/casper-sidecar.service → /lib/systemd/system/casper-sidecar.service.\n```\n\n----------------------------------------\n\nTITLE: Approving CEP-18 Token Allowance for Another Account\nDESCRIPTION: This command invokes the 'approve' entry point on a CEP-18 contract to grant another account permission to spend tokens on behalf of the sender. It requires the contract hash, spender account hash, and allowance amount as parameters.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/versioned_docs/version-1.5.X/resources/tokens/cep18/transfer.md#2025-04-22_snippet_7\n\nLANGUAGE: json\nCODE:\n```\ncasper-client put-deploy -n http://<node IP>:<PORT>\\\n--chain-name <CHAIN NAME> \\\n--secret-key ~/casper/demo/user_a/secret_key.pem \\\n// This is the contract hash of the CEP-18 token contract.\n--session-hash hash-05d893e76c731729fc26339e5a970bd79fbf4a6adf743c8385431fb494bff45e \\\n--session-entry-point \"approve\" \\\n// This is the account hash of the account that will receive an allowance from the balance of the account that sent the Deploy.\n--session-arg \"spender:key='account-hash-17192017d32db5dc9f598bf8ac6ac35ee4b64748669b00572d88335941479513'\" \\\n// This is the number of CEP-18 tokens included in the allowance.\n--session-arg \"amount:u256='15'\" \\\n--payment-amount \"10000000000\"\n```\n\n----------------------------------------\n\nTITLE: Configuring Fee Elimination in Casper Network Chainspec\nDESCRIPTION: TOML configuration for fee elimination settings in the Mainnet Condor release, including refund handling, fee handling, validator credit cap, pricing handling, gas hold balance handling, and gas hold interval settings.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/versioned_docs/version-2.0.0/concepts/economics/fee-elimination.md#2025-04-22_snippet_0\n\nLANGUAGE: toml\nCODE:\n```\nrefund_handling = { type = 'no_refund' }\nfee_handling = { type = 'no_fee' }\nvalidator_credit_cap = [1, 5]\npricing_handling = { type = 'fixed' }\ngas_hold_balance_handling = { type = 'accrued' }\ngas_hold_interval = '24 hours'\n```\n\n----------------------------------------\n\nTITLE: Defining Transfer-like Object Schema in JSON\nDESCRIPTION: Defines the JSON schema for an object likely representing a transfer operation or event. It specifies required fields such as `amount`, `deploy_hash`, `from`, `gas`, `source`, and `target`, along with their expected types and descriptions. It references other component schemas like `DeployHash`, `AccountHash`, `URef`, and `U512` for complex types.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/condor/jsonrpc-comp/rpc-2.0/schema/components.json.md#2025-04-22_snippet_31\n\nLANGUAGE: json\nCODE:\n```\n\"type\": \"object\",\n\"required\": [\n    \"amount\",\n    \"deploy_hash\",\n    \"from\",\n    \"gas\",\n    \"source\",\n    \"target\"\n],\n\"properties\": {\n    \"deploy_hash\": {\n        \"description\": \"Hex-encoded Deploy hash of Deploy that created the transfer.\",\n        \"allOf\": [\n            {\n                \"$ref\": \"#/components/schemas/DeployHash\"\n            }\n        ]\n    },\n    \"from\": {\n        \"description\": \"Account from which transfer was executed\",\n        \"allOf\": [\n            {\n                \"$ref\": \"#/components/schemas/AccountHash\"\n            }\n        ]\n    },\n    \"to\": {\n        \"description\": \"Account to which funds are transferred\",\n        \"anyOf\": [\n            {\n                \"$ref\": \"#/components/schemas/AccountHash\"\n            },\n            {\n                \"type\": \"null\"\n            }\n        ]\n    },\n    \"source\": {\n        \"description\": \"Source purse\",\n        \"allOf\": [\n            {\n                \"$ref\": \"#/components/schemas/URef\"\n            }\n        ]\n    },\n    \"target\": {\n        \"description\": \"Target purse\",\n        \"allOf\": [\n            {\n                \"$ref\": \"#/components/schemas/URef\"\n            }\n        ]\n    },\n    \"amount\": {\n        \"description\": \"Transfer amount\",\n        \"allOf\": [\n            {\n                \"$ref\": \"#/components/schemas/U512\"\n            }\n        ]\n    },\n    \"gas\": {\n        \"description\": \"Gas\",\n        \"allOf\": [\n            {\n                \"$ref\": \"#/components/schemas/U512\"\n            }\n        ]\n    },\n    \"id\": {\n        \"description\": \"User-defined id\",\n        \"type\": [\n            \"integer\",\n            \"null\"\n        ],\n        \"format\": \"uint64\",\n        \"minimum\": 0.0\n    }\n},\n\"additionalProperties\": false\n```\n\n----------------------------------------\n\nTITLE: Deploying Casper Smart Contract\nDESCRIPTION: Install the compiled counter contract on the Casper network using the Casper client.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/versioned_docs/version-1.5.X/resources/beginner/counter-testnet/walkthrough.md#2025-04-22_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\ncasper-client put-deploy \\\n    --node-address http://[NODE_IP]:7777 \\\n    --chain-name casper-test \\\n    --secret-key [PATH_TO_YOUR_KEY]/secret_key.pem \\\n    --payment-amount [PAYMENT_AMOUNT_IN_MOTES] \\\n    --session-path ./contract-v1/target/wasm32-unknown-unknown/release/counter-v1.wasm\n```\n\n----------------------------------------\n\nTITLE: Configuring sync_to_genesis Setting in config.toml\nDESCRIPTION: Illustrates how to set the `sync_to_genesis` option to `false` within the node's `config.toml` file. This configuration prevents the node from syncing historical data back to genesis, which can improve performance for validator nodes.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/versioned_docs/version-1.5.X/operators/setup/install-node.md#2025-04-22_snippet_13\n\nLANGUAGE: bash\nCODE:\n```\nsync_to_genesis = false\n```\n\n----------------------------------------\n\nTITLE: Database Decompression Command\nDESCRIPTION: Command to decompress zstd compressed database files with required long-distance matching parameter.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/versioned_docs/version-2.0.0/operators/maintenance/archiving-and-restoring.md#2025-04-22_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\nzstd -cd --long=31 <.tar.zst file>\n```\n\n----------------------------------------\n\nTITLE: Listing Available RPCs Using Casper Client\nDESCRIPTION: Command to list all supported RPCs using the Casper client CLI tool. This requires specifying the node address including host and port.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/versioned_docs/version-1.5.X/developers/json-rpc/index.md#2025-04-22_snippet_1\n\nLANGUAGE: sh\nCODE:\n```\ncasper-client list-rpcs --node-address <HOST:PORT>\n```\n\n----------------------------------------\n\nTITLE: Defining PricingMode Enum Types in Casper\nDESCRIPTION: Defines the three possible pricing modes for transactions: Classic (user-specified), Fixed (cost table based), and Reserved (pre-reserved payment).\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/versioned_docs/version-2.0.0/developers/json-rpc/types_chain.md#2025-04-22_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n* `Classic` The original payment model, where the creator of the transaction specifies how much they will pay, at what gas price.\n\n* `Fixed` The cost of the transaction is determined by the cost table, per the transaction category.\n\n* `Reserved` The payment for this transaction was previously reserved (Not currently implemented).\n```\n\n----------------------------------------\n\nTITLE: Retrieving Dictionary Item in Casper Network (JSON)\nDESCRIPTION: Example JSON request for the state_get_dictionary_item method, which retrieves an item from a Dictionary using a state root hash and dictionary identifier.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/versioned_docs/version-2.0.0/developers/json-rpc/json-rpc-informational.md#2025-04-22_snippet_22\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"id\": 1,\n  \"jsonrpc\": \"2.0\",\n  \"method\": \"state_get_dictionary_item\",\n  \"params\": [\n    {\n      \"name\": \"state_root_hash\",\n      \"value\": \"0808080808080808080808080808080808080808080808080808080808080808\"\n    },\n    {\n      \"name\": \"dictionary_identifier\",\n      \"value\": {\n        \"URef\": {\n          \"seed_uref\": \"uref-09480c3248ef76b603d386f3f4f8a5f87f597d4eaffd475433f861af187ab5db-007\",\n          \"dictionary_item_key\": \"a_unique_entry_identifier\"\n        }\n      }\n    }\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: JSON Response from Casper Global State Query\nDESCRIPTION: JSON response showing the result of querying a contract's global state. The response includes API version, merkle proof, and the stored CLValue which is a string with the value \"Hello new message!\", confirming the successful cross-contract communication.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/docs/resources/advanced/cross-contract.md#2025-04-22_snippet_25\n\nLANGUAGE: bash\nCODE:\n```\n{\n  \"id\": -5477027327608594231,\n  \"jsonrpc\": \"2.0\",\n  \"result\": {\n    \"api_version\": \"1.4.13\",\n    \"block_header\": null,\n    \"merkle_proof\": \"[61444 hex chars]\",\n    \"stored_value\": {\n      \"CLValue\": {\n        \"bytes\": \"1200000048656c6c6f206e6577206d65737361676521\",\n        \"cl_type\": \"String\",\n        \"parsed\": \"Hello new message!\"\n      }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Enum for Lock Status in JSON Schema - JSON\nDESCRIPTION: Defines a JSON schema enum to represent whether a contract package is locked or unlocked. No external libraries are required beyond a standard JSON schema validator. The schema provides 'Locked' and 'Unlocked' as string enum options, with detailed descriptions for each state. Expected input is a string that must be one of these values; output depends on the consuming validator or tool, typically enforcing valid state assignment. The object is limited to these two discrete options, suitable for status management in smart contract systems.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/condor/jsonrpc-comp/rpc-2.0/schema/ContractPackageStatus.json.md#2025-04-22_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"description\": \"A enum to determine the lock status of the contract package.\",\n    \"oneOf\": [\n        {\n            \"description\": \"The package is locked and cannot be versioned.\",\n            \"type\": \"string\",\n            \"enum\": [\n                \"Locked\"\n            ]\n        },\n        {\n            \"description\": \"The package is unlocked and can be versioned.\",\n            \"type\": \"string\",\n            \"enum\": [\n                \"Unlocked\"\n            ]\n        }\n    ]\n} \n```\n\n----------------------------------------\n\nTITLE: Querying Global State for Transfer Details\nDESCRIPTION: Command to query global state using transfer hash to get detailed information about a specific transfer.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/docs/developers/cli/transfers/verify-transfer.md#2025-04-22_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\ncasper-client query-global-state \\\n--id [ID] \\\n--node-address [NODE_SERVER_ADDRESS]  \\\n--state-root-hash [STATE_ROOT_HASH] \\\n--key [TRANSFER_HASH]\n```\n\n----------------------------------------\n\nTITLE: Generating Command-Line Auto-Completion for casper-client - Bash\nDESCRIPTION: This snippet generates a bash auto-completion script for the casper-client command-line tool. It improves CLI usability by enabling autocompletion via the tab key. After running, users must source the generated script or re-login. No extra dependencies required beyond casper-client. For use with bash or other shells with --shell argument.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/docs/operators/setup/install-node.md#2025-04-22_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\nsudo casper-client generate-completion\n```\n\n----------------------------------------\n\nTITLE: NFT Contract Burn Mode Table\nDESCRIPTION: Table defining the u8 values for burn mode settings that determine if tokens can be burnt after minting.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/versioned_docs/version-1.5.X/resources/tokens/cep78/modalities.md#2025-04-22_snippet_5\n\nLANGUAGE: markdown\nCODE:\n```\n| BurnMode    | u8  |\n| ----------- | --- |\n| Burnable    | 0   |\n| NonBurnable | 1   |\n```\n\n----------------------------------------\n\nTITLE: Sample Output from Casper Contract Test Run - Bash\nDESCRIPTION: This snippet provides an example of the terminal output produced when running Casper contract tests. It includes a summary count of tests executed, passed, and their respective status. No execution is performed; this is static expected output for the developer to validate successful testing, indicating a properly functioning test environment for smart contracts.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/docs/developers/writing-onchain-code/getting-started.md#2025-04-22_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\nrunning 2 tests\ntest tests::should_error_on_missing_runtime_arg ... ok\ntest tests::should_store_hello_world ... ok\n\ntest result: ok. 2 passed; 0 failed; 0 ignored; 0 measured; 0 filtered out; finished in 0.09s\n```\n\n----------------------------------------\n\nTITLE: Defining Deploy JSON Schema in Casper\nDESCRIPTION: This JSON snippet defines a schema for a Deploy object expected to be used within the Casper Network. It outlines required properties including 'deploy_hash', 'from', 'gas', 'source', and 'transfers', referencing other schema components like 'DeployHash', 'AccountHash', and 'URef'. The schema aims to ensure JSON validity by specifying types and structure. No additional properties are permitted beyond those listed.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/condor/jsonrpc-comp/rpc-2.0/schema/DeployInfo.json.md#2025-04-22_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"description\": \"Information relating to the given Deploy.\",\n    \"type\": \"object\",\n    \"required\": [\n        \"deploy_hash\",\n        \"from\",\n        \"gas\",\n        \"source\",\n        \"transfers\"\n    ],\n    \"properties\": {\n        \"deploy_hash\": {\n            \"description\": \"Hex-encoded Deploy hash.\",\n            \"allOf\": [\n                {\n                    \"$ref\": \"#/components/schemas/DeployHash\"\n                }\n            ]\n        },\n        \"transfers\": {\n            \"description\": \"Version 1 transfers performed by the Deploy.\",\n            \"type\": \"array\",\n            \"items\": {\n                \"$ref\": \"#/components/schemas/TransferAddr\"\n            }\n        },\n        \"from\": {\n            \"description\": \"Account identifier of the creator of the Deploy.\",\n            \"allOf\": [\n                {\n                    \"$ref\": \"#/components/schemas/AccountHash\"\n                }\n            ]\n        },\n        \"source\": {\n            \"description\": \"Source purse used for payment of the Deploy.\",\n            \"allOf\": [\n                {\n                    \"$ref\": \"#/components/schemas/URef\"\n                }\n            ]\n        },\n        \"gas\": {\n            \"description\": \"Gas cost of executing the Deploy.\",\n            \"allOf\": [\n                {\n                    \"$ref\": \"#/components/schemas/U512\"\n                }\n            ]\n        }\n    },\n    \"additionalProperties\": false\n}\n```\n\n----------------------------------------\n\nTITLE: Executing Withdraw Bid Transaction in Casper Network\nDESCRIPTION: This command allows validators to withdraw their auction bid. It requires the bidder's public key, withdrawal amount, gas price tolerance, and either a secret key or initiator address.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/docs/concepts/transactions.md#2025-04-22_snippet_0\n\nLANGUAGE: json\nCODE:\n```\ncasper-client put-txn withdraw-bid\n/// The public key of the bidder.\n  --public-key <FORMATTED STRING or PATH>\n/// The amount in motes to be withdrawn.\n  --transaction-amount <INTEGER>\n/// The maximum gas price that the user is willing to pay for this transaction.\n  --gas-price-tolerance <INTEGER>\n/// The path to the local secret key file, or the [`initiator address`](../developers/json-rpc/types_chain.md#initiatoraddr) sending the transaction.\n  <--secret-key <PATH>|--initiator-address <HEX STRING>>\n```\n\n----------------------------------------\n\nTITLE: Query Next Upgrade Info From Node - Bash\nDESCRIPTION: Uses curl and jq to extract the full next_upgrade object from the node's REST /status endpoint, which conveys details about any scheduled upgrades. Requires a running node, open 8888 port, and provides null if no upgrade is currently planned.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/docs/operators/setup/node-endpoints.md#2025-04-22_snippet_9\n\nLANGUAGE: bash\nCODE:\n```\ncurl -s http://<node_address>:8888/status | jq .next_upgrade\n```\n\n----------------------------------------\n\nTITLE: Defining NextUpgrade Schema in OpenAPI\nDESCRIPTION: Defines the schema for information about the next protocol upgrade, containing the activation point and protocol version.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/condor/jsonrpc-comp/rpc-2.0/schema.json.md#2025-04-22_snippet_92\n\nLANGUAGE: json\nCODE:\n```\n\"NextUpgrade\": {\n  \"description\": \"Information about the next protocol upgrade.\",\n  \"type\": \"object\",\n  \"required\": [\n    \"activation_point\",\n    \"protocol_version\"\n  ],\n  \"properties\": {\n    \"activation_point\": {\n      \"$ref\": \"#/components/schemas/ActivationPoint\"\n    },\n    \"protocol_version\": {\n      \"$ref\": \"#/components/schemas/ProtocolVersion\"\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Sample JSON Response for Entity Details Query\nDESCRIPTION: Example detailed JSON response from a `get-entity` request for an account. It includes comprehensive information such as the account hash, package hash, main purse URef, associated keys, action thresholds, named keys (like contract references or URefs), and entry points.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/versioned_docs/version-2.0.0/developers/cli/querying-global-state.md#2025-04-22_snippet_9\n\nLANGUAGE: json\nCODE:\n```\n```json\n{\n  \"jsonrpc\": \"2.0\",\n  \"id\": 4470312592511523509,\n  \"result\": {\n    \"api_version\": \"2.0.0\",\n    \"entity\": {\n      \"AddressableEntity\": {\n        \"entity\": {\n          \"protocol_version\": \"2.0.0\",\n          \"entity_kind\": {\n            \"Account\": \"account-hash-6a56c4eee172043975aea72221eaf09f3c3a24f09a379935e44c9979f1ae9463\"\n          },\n          \"package_hash\": \"package-1bf60faed9931e95e99912aa82f545a85f374dcbcd0c145ee2a5820b39b31d51\",\n          \"byte_code_hash\": \"byte-code-0000000000000000000000000000000000000000000000000000000000000000\",\n          \"main_purse\": \"uref-21dc8fc358c4e30ae29786bd4842a5f99da83efa0b9ca8461cd2196ffbfd07f1-007\",\n          \"associated_keys\": [\n            {\n              \"account_hash\": \"account-hash-6a56c4eee172043975aea72221eaf09f3c3a24f09a379935e44c9979f1ae9463\",\n              \"weight\": 1\n            }\n          ],\n          \"action_thresholds\": {\n            \"deployment\": 1,\n            \"upgrade_management\": 1,\n            \"key_management\": 1\n          },\n          \"message_topics\": []\n        },\n        \"named_keys\": [\n          {\n            \"name\": \"counter\",\n            \"key\": \"entity-contract-a1d0bf9d96f3efc9ea67f627df3a7cba390bfc582956032db91060ca5d413e68\"\n          },\n          {\n            \"name\": \"counter_access_uref\",\n            \"key\": \"uref-29feb2af8a9d7b6d2ef6be875a0aa326b646a00b7cdd2dd4a65365e84e9f2e9a-007\"\n          },\n          {\n            \"name\": \"counter_package_name\",\n            \"key\": \"package-50d487af45f8cec533c6813801a7630ff97e5ee3964daf7915d5451b4812ac94\"\n          },\n          {\n            \"name\": \"version\",\n            \"key\": \"uref-7bc25880db57763fccfa858185becd8de40a890d9e006e067352f011bdcf03bf-007\"\n          }\n        ],\n        \"entry_points\": []\n      }\n    },\n    \"merkle_proof\": \"[3010 hex chars]\"\n  }\n}\n```\n```\n\n----------------------------------------\n\nTITLE: Configuring Genesis Block Files for Casper Network\nDESCRIPTION: Two key configuration files are required to create a genesis block: chainspec.toml for network parameters and accounts.toml for validator set information and initial account balances. These files are typically downloaded via the pull_casper_node_version.sh script based on network configuration.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/versioned_docs/version-2.0.0/operators/setup-network/genesis.md#2025-04-22_snippet_0\n\n\n\n----------------------------------------\n\nTITLE: Cloning Sample Session Code Repository\nDESCRIPTION: Command to clone a repository containing sample session code for configuring an account on the Casper Network.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/versioned_docs/version-2.0.0/developers/writing-onchain-code/writing-session-code.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ngit clone https://github.com/casper-ecosystem/two-party-multi-sig/\n```\n\n----------------------------------------\n\nTITLE: Staging Protocol Upgrade on Mainnet\nDESCRIPTION: Command to stage protocol upgrades on the Casper Mainnet using node_util.py script.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/versioned_docs/version-2.0.0/operators/setup/upgrade.md#2025-04-22_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nsudo -u casper /etc/casper/node_util.py stage_protocols casper.conf\n```\n\n----------------------------------------\n\nTITLE: Describing a Multi-Signature Account Setup for Blockchain Transactions\nDESCRIPTION: This JSON structure showcases a multi-signature account setup, where both the primary and associated keys collectively fulfill transaction signing thresholds. It assigns the necessary key weights to ensure deployment and update capabilities are verified by multiple keyholders, helping mitigate risks tied to single key management.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/versioned_docs/version-1.5.X/resources/advanced/multi-sig/other-scenarios.md#2025-04-22_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n{\n   \"account_address\": \"account-hash-a1…\",\n   \"action_thresholds\": {\n      \"deployment\": 2,\n      \"key_management\": 2\n   },\n   \"associated_keys\": [\n      {\n         \"account_address\": \"account-hash-a1…\", // primary key\n         \"weight\": 2\n      },\n      {\n         \"account_address\": \"account-hash-b2…\", // associated key\n         \"weight\": 1\n      },\n      {\n         \"account_address\": \"account-hash-c3…\", // associated key\n         \"weight\": 1\n      }\n   ],\n   \"main_purse\": \"uref-1234…\",\n   \"named_keys\": []\n}\n```\n\n----------------------------------------\n\nTITLE: Sample Contract Global State Response (JSON)\nDESCRIPTION: This JSON snippet shows a sample response from querying a contract's global state. It includes details about the contract package, bytecode, named keys, and entry points.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/versioned_docs/version-2.0.0/developers/writing-onchain-code/emitting-contract-events.md#2025-04-22_snippet_4\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"jsonrpc\": \"2.0\",\n  \"id\": -4994937296370433409,\n  \"result\": {\n    \"api_version\": \"1.0.0\",\n    \"block_header\": {\n      \"Version2\": {\n        \"parent_hash\": \"deafd8e5c1aff47ae8528fa2d343b711c2f5cb18ee29527961b37d4d173ad42a\",\n        \"state_root_hash\": \"96d8962c03899277f9a4bd667c0510c0eab490dd6253ae0b8cee4ebfbcd52be6\",\n        \"body_hash\": \"28812ec460ab82f94f3c658e946bb4779c6b76dea9c55d18beaf1e47fe8dd9c9\",\n        \"random_bit\": false,\n        \"accumulated_seed\": \"96a09ea136bb7e4e99b039ee0f1f6d9dd88d663927faffc7eb5c60804056354c\",\n        \"era_end\": null,\n        \"timestamp\": \"2023-11-28T23:59:53.856Z\",\n        \"era_id\": 112,\n        \"height\": 1066,\n        \"protocol_version\": \"1.0.0\"\n      }\n    },\n    \"stored_value\": {\n      \"AddressableEntity\": {\n        \"package_hash\": \"contract-package-66cf48b3ccf32269ccc5d93059eef461bcf2c8b2460309ff3a442190688d5275\",\n        \"byte_code_hash\": \"contract-wasm-23e042b941e45ea7fe4f81496fd778349f2002b2f786f9fddbdd1298450b60ad\",\n        \"named_keys\": [\n          {\n            \"name\": \"acl_package_mode\",\n            \"key\": \"uref-2a088bc6c30d1499cd9348d388a03c8162ab26d09b0484f634e6f4022581fe99-007\"\n          },\n          {\n            \"name\": \"acl_whitelist\",\n            \"key\": \"uref-d17ecf3fe6e46f9a6063cfb31cdb03cdd6b99d095b71d2247319c293f864c4d1-007\"\n          },\n          {\n            \"name\": \"allow_minting\",\n            \"key\": \"uref-c737324d1caa1885ad0f22f628933cfce91400ea259147186d330cf167eb6843-007\"\n          },\n          {\n            \"name\": \"approved\",\n            \"key\": \"uref-87a0de173fd6a56fb867bab46d8a508a43259a244ffdd8b0d98e5c286261f9af-007\"\n          },\n          {\n            \"name\": \"balances\",\n            \"key\": \"uref-0c08f3df6e05e509000cd57646b98983481b8bcd46b98f0aae1a5abccc1e114f-007\"\n          },\n          {\n            \"name\": \"burn_mode\",\n            \"key\": \"uref-e507551382a6217b9165dd222854e6c877d33eab9845c4b7e8444559303e5b8a-007\"\n          },\n          {\n            \"name\": \"burnt_tokens\",\n            \"key\": \"uref-4711c3ee36ac9639af509f45164fdb5a88692b109c3b2360e57d09fcdd702f63-007\"\n          },\n          {\n            \"name\": \"cep78_CEP-78\",\n            \"key\": \"uref-a02fc32366a7187448afb8263a8f3716e933d28d84db6c6403893d94917cf98d-007\"\n          },\n          {\n            \"name\": \"collection_name\",\n            \"key\": \"uref-89e904724d79a9f6d41958a3621b437c9e220ad081805f39040ff51c79a8d67c-007\"\n          },\n          {\n            \"name\": \"collection_symbol\",\n            \"key\": \"uref-d41a40789a84cc8e0314135695acc279875d6c7455daafe517cc4ae5329d95de-007\"\n          },\n          {\n            \"name\": \"events_mode\",\n            \"key\": \"uref-d950666b546fe7afcf123f833ba4166b395c03bdbfd5de86dab051af3c1cdac0-007\"\n          },\n          {\n            \"name\": \"hash_by_index\",\n            \"key\": \"uref-7c9751097762ad778a6a11151780d377cbc57e0807e289d278831ca9263aa844-007\"\n          },\n          {\n            \"name\": \"holder_mode\",\n            \"key\": \"uref-e7acd748f4f82e609aa49f577e78e1ce6b1ab1dad5b5b1b59c8ff965598a6f34-007\"\n          },\n          {\n            \"name\": \"identifier_mode\",\n            \"key\": \"uref-bf32824dddf12dd16668581211ed22bef4b36c22db0165bde4986508f363940e-007\"\n          },\n          {\n            \"name\": \"index_by_hash\",\n            \"key\": \"uref-e67fecb85654def8b1440907728491f4f1ae125a97f3fed93872c075e6fb4ad5-007\"\n          },\n          {\n            \"name\": \"installer\",\n            \"key\": \"account-hash-212ffdd040b65495419f4057c8392930e410f7bf24baeec8de59a6117b63e45c\"\n          },\n          {\n            \"name\": \"json_schema\",\n            \"key\": \"uref-f8b2f63a4c69a84c795908e9abd0f66b857790b8df627a21336d6d1e07bf7103-007\"\n          },\n          {\n            \"name\": \"metadata_cep78\",\n            \"key\": \"uref-5cf8084639c2b7b8f54ab78700e0a82107c0bb28966cdc3ffdd4bd0877a47f64-007\"\n          },\n          {\n            \"name\": \"metadata_custom_validated\",\n            \"key\": \"uref-f5ce01c02a1942a4833159d72414c014b0838b607b4f419af9e19cd2fb123658-007\"\n          },\n          {\n            \"name\": \"metadata_mutability\",\n            \"key\": \"uref-c11c8e99c52477efaae636890a49625f54e32b832e23e288e00952c8bf34610a-007\"\n          },\n          {\n            \"name\": \"metadata_nft721\",\n            \"key\": \"uref-d39ee0c77f9864b05297ac504ee5919d60dddb6c8c0d6ccce8225801885f8972-007\"\n          },\n          {\n            \"name\": \"metadata_raw\",\n            \"key\": \"uref-dc660363cb2b4dfea2c01d8c3bf2258a3700fb6c830d13972ff206e330fd791a-007\"\n          },\n          {\n            \"name\": \"minting_mode\",\n            \"key\": \"uref-962f6e020971031eb1bdd37f705df498cd4ee90c15aae901df9654a10461184d-007\"\n          },\n          {\n            \"name\": \"nft_kind\",\n            \"key\": \"uref-001ffa305e021b5d411a3e04707b3c17f0d31ee400e6c5faa9b8f66e0ebfdc99-007\"\n          },\n          {\n            \"name\": \"nft_metadata_kind\",\n            \"key\": \"uref-8dfb98ccdd030aae1e0dcda03dc728dd4332eb18c945fd25a55b43f9e487141e-007\"\n          },\n          {\n            \"name\": \"nft_metadata_kinds\",\n            \"key\": \"uref-cb9799861587032b55d391604c8a9f016d1237b0b600413d6c050da3e0fc81d1-007\"\n          },\n          {\n            \"name\": \"number_of_minted_tokens\",\n            \"key\": \"uref-cd0871a7e69b91a05dbf81068115e45380de3a35bd2258369e3a24b7958cd77f-007\"\n          },\n          {\n            \"name\": \"operator_burn_mode\",\n            \"key\": \"uref-40977d32bbfb85454c9e7b5ca03192efcd406f228d5c2e593210b3960e05604e-007\"\n          },\n          {\n            \"name\": \"operators\",\n            \"key\": \"uref-cbcb06403fbd8cb9f397029718f1f7e66bf5ec4e33aa58315dd3d5ecf5d078a7-007\"\n          },\n          {\n            \"name\": \"ownership_mode\",\n            \"key\": \"uref-bba9996be36b1526113a0aaa030db658edd3c8719a60d55b35b7312f01f2e6da-007\"\n          },\n          {\n            \"name\": \"package_operator_mode\",\n            \"key\": \"uref-c05e3e87f5a64fbc20615afffaa6e4c81d98431b698f681322f5d8730ff40590-007\"\n          },\n          {\n            \"name\": \"page_table\",\n            \"key\": \"uref-4c545e6e4860629fd138fcb91f24d21498e69b076d472660ff769dfc2a994301-007\"\n          },\n          {\n            \"name\": \"receipt_name\",\n            \"key\": \"uref-6ddba59f56a5d52df5b8f85d03d19003feec3307a9d9ac6b420486d1a440a586-007\"\n          },\n          {\n            \"name\": \"reporting_mode\",\n            \"key\": \"uref-b6c48cfa2fa090b71912b209638b33bbf8b670a8d8a1065d73b54c70f5cc414c-007\"\n          },\n          {\n            \"name\": \"rlo_mflag\",\n            \"key\": \"uref-d520d8cbca2b28a42f0db9493e94bdbb93f74702e20eac1a77b48dda39367afe-007\"\n          },\n          {\n            \"name\": \"token_issuers\",\n            \"key\": \"uref-c1993c045f9e656b4bcb40639705d232cb6ecb4a2c6a04aeb33baffe9869cb9a-007\"\n          },\n          {\n            \"name\": \"token_owners\",\n            \"key\": \"uref-1cabd90eac707493056418a62d8b82057af0d7c1e1b90d6139a46120fff4187d-007\"\n          },\n          {\n            \"name\": \"total_token_supply\",\n            \"key\": \"uref-09b6f0901eb8cd9c6272be8199aeff4c6f5d2e3989980b548dbd595b40c033bf-007\"\n          },\n          {\n            \"name\": \"whitelist_mode\",\n            \"key\": \"uref-af7ba884bbddf91530279c0ea005c56a4951f5330ebe5395528471302b791b3e-007\"\n          }\n        ],\n        \"entry_points\": [\n          {\n            \"name\": \"approve\",\n            \"entry_point\": {\n              \"name\": \"approve\",\n              \"args\": [\n                {\n                  \"name\": \"spender\",\n                  \"cl_type\": \"Key\"\n                }\n              ],\n              \"ret\": \"Unit\",\n              \"access\": \"Public\",\n              \"entry_point_type\": \"AddressableEntity\"\n            }\n          },\n          {\n            \"name\": \"balance_of\",\n            \"entry_point\": {\n              \"name\": \"balance_of\",\n              \"args\": [\n                {\n                  \"name\": \"token_owner\",\n                  \"cl_type\": \"Key\"\n                }\n              ],\n              \"ret\": \"U64\",\n              \"access\": \"Public\",\n              \"entry_point_type\": \"AddressableEntity\"\n            }\n          },\n          {\n            \"name\": \"burn\",\n            \"entry_point\": {\n              \"name\": \"burn\",\n              \"args\": [],\n              \"ret\": \"Unit\",\n              \"access\": \"Public\",\n              \"entry_point_type\": \"AddressableEntity\"\n            }\n          },\n          {\n            \"name\": \"get_approved\",\n            \"entry_point\": {\n              \"name\": \"get_approved\",\n              \"args\": [],\n              \"ret\": {\n\n\n```\n\n----------------------------------------\n\nTITLE: Defining DictionaryIdentifier Schema in JSON\nDESCRIPTION: JSON schema for DictionaryIdentifier that defines options for dictionary item lookups via account named keys, contract named keys, seed URef, or unique key.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/condor/jsonrpc-comp/rpc-1.5/schema.json.md#2025-04-22_snippet_56\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"description\": \"Options for dictionary item lookups.\",\n  \"anyOf\": [\n    {\n      \"description\": \"Lookup a dictionary item via an Account's named keys.\",\n      \"type\": \"object\",\n      \"required\": [\n        \"AccountNamedKey\"\n      ],\n      \"properties\": {\n        \"AccountNamedKey\": {\n          \"type\": \"object\",\n          \"required\": [\n            \"dictionary_item_key\",\n            \"dictionary_name\",\n            \"key\"\n          ],\n          \"properties\": {\n            \"key\": {\n              \"description\": \"The account key as a formatted string whose named keys contains dictionary_name.\",\n              \"type\": \"string\"\n            },\n            \"dictionary_name\": {\n              \"description\": \"The named key under which the dictionary seed URef is stored.\",\n              \"type\": \"string\"\n            },\n            \"dictionary_item_key\": {\n              \"description\": \"The dictionary item key formatted as a string.\",\n              \"type\": \"string\"\n            }\n          }\n        }\n      },\n      \"additionalProperties\": false\n    },\n    {\n      \"description\": \"Lookup a dictionary item via a Contract's named keys.\",\n      \"type\": \"object\",\n      \"required\": [\n        \"ContractNamedKey\"\n      ],\n      \"properties\": {\n        \"ContractNamedKey\": {\n          \"type\": \"object\",\n          \"required\": [\n            \"dictionary_item_key\",\n            \"dictionary_name\",\n            \"key\"\n          ],\n          \"properties\": {\n            \"key\": {\n              \"description\": \"The contract key as a formatted string whose named keys contains dictionary_name.\",\n              \"type\": \"string\"\n            },\n            \"dictionary_name\": {\n              \"description\": \"The named key under which the dictionary seed URef is stored.\",\n              \"type\": \"string\"\n            },\n            \"dictionary_item_key\": {\n              \"description\": \"The dictionary item key formatted as a string.\",\n              \"type\": \"string\"\n            }\n          }\n        }\n      },\n      \"additionalProperties\": false\n    },\n    {\n      \"description\": \"Lookup a dictionary item via its seed URef.\",\n      \"type\": \"object\",\n      \"required\": [\n        \"URef\"\n      ],\n      \"properties\": {\n        \"URef\": {\n          \"type\": \"object\",\n          \"required\": [\n            \"dictionary_item_key\",\n            \"seed_uref\"\n          ],\n          \"properties\": {\n            \"seed_uref\": {\n              \"description\": \"The dictionary's seed URef.\",\n              \"type\": \"string\"\n            },\n            \"dictionary_item_key\": {\n              \"description\": \"The dictionary item key formatted as a string.\",\n              \"type\": \"string\"\n            }\n          }\n        }\n      },\n      \"additionalProperties\": false\n    },\n    {\n      \"description\": \"Lookup a dictionary item via its unique key.\",\n      \"type\": \"object\",\n      \"required\": [\n        \"Dictionary\"\n      ],\n      \"properties\": {\n        \"Dictionary\": {\n          \"type\": \"string\"\n        }\n      },\n      \"additionalProperties\": false\n    }\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Dynamic Gas Pricing in TOML for Casper Network\nDESCRIPTION: Configuration settings for block vacancy (dynamic gas pricing) on Casper Network Mainnet. Defines thresholds and limits for gas price adjustments based on network utilization, with prices ranging from 1 to 3 motes per gas unit.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/versioned_docs/version-2.0.0/concepts/economics/dynamic-gas-pricing.md#2025-04-22_snippet_0\n\nLANGUAGE: toml\nCODE:\n```\n[vacancy]\nupper_threshold = 90\nlower_threshold = 50\nmax_gas_price = 3\nmin_gas_price = 1\n```\n\n----------------------------------------\n\nTITLE: Defining Transaction Runtime Enum\nDESCRIPTION: Defines the available virtual machines (VMs) used to execute a transaction in the Casper network. It specifies two versions: 'VmCasperV1' and 'VmCasperV2'.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/condor/jsonrpc-comp/rpc-2.0/schema/components.json.md#2025-04-22_snippet_21\n\nLANGUAGE: JSON\nCODE:\n```\n{\n    \"description\": \"Runtime used to execute a Transaction.\",\n    \"oneOf\": [\n        {\n            \"description\": \"The Casper Version 1 Virtual Machine.\",\n            \"type\": \"string\",\n            \"enum\": [\n                \"VmCasperV1\"\n            ]\n        },\n        {\n            \"description\": \"The Casper Version 2 Virtual Machine.\",\n            \"type\": \"string\",\n            \"enum\": [\n                \"VmCasperV2\"\n            ]\n        }\n    ]\n}\n```\n\n----------------------------------------\n\nTITLE: Staging Protocol Upgrade on Testnet\nDESCRIPTION: Command to stage protocol upgrades on the Casper Testnet using node_util.py script.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/versioned_docs/version-2.0.0/operators/setup/upgrade.md#2025-04-22_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nsudo -u casper /etc/casper/node_util.py stage_protocols casper-test.conf\n```\n\n----------------------------------------\n\nTITLE: Example Receipt Format for CEP-78 NFT Collection\nDESCRIPTION: Demonstrates the format of updated receipts in the CEP-78 contract when OwnerReverseLookupMode is enabled. Shows how receipt names are constructed using collection name, modulo, and page number.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/versioned_docs/version-2.0.0/resources/tokens/cep78/reverse-lookup.md#2025-04-22_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\ncep78_collection_m_350_p_2\n```\n\n----------------------------------------\n\nTITLE: Querying a Named Key in Global State (Bash)\nDESCRIPTION: Shows the query-global-state command with the optional -q or --query-path flag to drill into the value of a named key associated with a contract, account, or other entity. Requires node address, state root hash, key, and specific query path. Outputs the underlying state found at the queried path.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/docs/developers/cli/querying-global-state.md#2025-04-22_snippet_18\n\nLANGUAGE: bash\nCODE:\n```\ncasper-client query-global-state \\\n--node-address [NODE_SERVER_ADDRESS] \\\n--state-root-hash [STATE_ROOT_HASH] \\\n--key [HASH_STRING] \\\n-q \"PATH_FROM_KEY\"\n```\n\n----------------------------------------\n\nTITLE: Generating Public Keys from Secret Key with OpenSSL\nDESCRIPTION: Commands to generate public_key.pem and public_key_hex files from an existing secret_key.pem file using OpenSSL for Ed25519 keys.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/versioned_docs/version-1.5.X/concepts/accounts-and-keys.md#2025-04-22_snippet_10\n\nLANGUAGE: bash\nCODE:\n```\nopenssl pkey -in secret_key.pem -pubout -out public_key.pem\n\n{ echo -n 01; openssl pkey -outform DER -pubout -in \"secret_key.pem\" | tail -c +13 | openssl base64 | openssl base64 -d | hexdump -ve '/1 \"%02x\" ' | tr -d \"/n\"; } > public_key_hex\n```\n\n----------------------------------------\n\nTITLE: Multi-Signature Deploy Creation and Signing\nDESCRIPTION: Series of commands to create, sign, and send a multi-signature deploy using associated keys.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/docs/resources/advanced/multi-sig/multi-sig-workflow.md#2025-04-22_snippet_17\n\nLANGUAGE: bash\nCODE:\n```\ncasper-client make-deploy --chain-name casper-test \\\n--payment-amount 300000000 \\\n--session-path tests/wasm/contract.wasm \\\n--secret-key $PATH/user_1_secret_key.pem \\\n--session-arg \"my-key-name:string='user_1_key'\" \\\n--session-arg \"message:string='Hello, World'\" \\\n--session-account 01360af61b50cdcb7b92cffe2c99315d413d34ef77fadee0c105cc4f1d4120f986 \\\n--output hello_world_one_signature\n```\n\n----------------------------------------\n\nTITLE: Retrieving Era Info via Switch Block in Casper Network - JSON\nDESCRIPTION: This snippet details the schema and example response for 'chain_get_era_info_by_switch_block'. It's designed to fetch era information using a specific block identifier. Key parameters include the 'block_identifier'. The response includes the API version and an optional 'era_summary', providing essential details about the block and era ID.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/condor/jsonrpc-comp/rpc-2.0/schema.json.md#2025-04-22_snippet_24\n\nLANGUAGE: JSON\nCODE:\n```\n{\n  \"name\": \"chain_get_era_info_by_switch_block_example\",\n  \"params\": [\n    {\n      \"name\": \"block_identifier\",\n      \"value\": {\n        \"Hash\": \"0744fcb72af43c5cc372039bc5a8bfee48808a9ce414acc0d6338a628c20eb42\"\n      }\n    }\n  ],\n  \"result\": {\n    \"name\": \"chain_get_era_info_by_switch_block_example_result\",\n    \"value\": {\n      \"api_version\": \"2.0.0\",\n      \"era_summary\": {\n        \"block_hash\": \"0744fcb72af43c5cc372039bc5a8bfee48808a9ce414acc0d6338a628c20eb42\",\n        \"era_id\": 42,\n        \"stored_value\": {\n          \"EraInfo\": {\n            \"seigniorage_allocations\": [\n              {\n                \"Delegator\": {\n                  \"delegator_public_key\": \"01e1b46a25baa8a5c28beb3c9cfb79b572effa04076f00befa57eb70b016153f18\",\n                  \"validator_public_key\": \"012a1732addc639ea43a89e25d3ad912e40232156dcaa4b9edfc709f43d2fb0876\",\n                  \"amount\": \"1000\"\n                }\n              },\n              {\n                \"Validator\": {\n                  \"validator_public_key\": \"012a1732addc639ea43a89e25d3ad912e40232156dcaa4b9edfc709f43d2fb0876\",\n                  \"amount\": \"2000\"\n                }\n              }\n            ]\n          }\n        },\n        \"state_root_hash\": \"0808080808080808080808080808080808080808080808080808080808080808\",\n        \"merkle_proof\": \"01000000006ef2e0949ac76e55812421f755abe129b6244fe7168b77f47a72536147614625016ef2e0949ac76e55812421f755abe129b6244fe7168b77f47a72536147614625000000003529cde5c621f857f75f3810611eb4af3f998caaa9d4a3413cf799f99c67db0307010000006ef2e0949ac76e55812421f755abe129b6244fe7168b77f47a7253614761462501010102000000006e06000000000074769d28aac597a36a03a932d4b43e4f10bf0403ee5c41dd035102553f5773631200b9e173e8f05361b681513c14e25e3138639eb03232581db7557c9e8dbbc83ce94500226a9a7fe4f2b7b88d5103a4fc7400f02bf89c860c9ccdd56951a2afe9be0e0267006d820fb5676eb2960e15722f7725f3f8f41030078f8b2e44bf0dc03f71b176d6e800dc5ae9805068c5be6da1a90b2528ee85db0609cc0fb4bd60bbd559f497a98b67f500e1e3e846592f4918234647fca39830b7e1e6ad6f5b7a99b39af823d82ba1873d000003000000010186ff500f287e9b53f823ae1582b1fa429dfede28015125fd233a31ca04d5012002015cc42669a55467a1fdf49750772bfc1aed59b9b085558eb81510e9b015a7c83b0301e3cf4a34b1db6bfa58808b686cb8fe21ebe0c1bcbcee522649d2b135fe510fe3\"\n      }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Smart Contract Entity on Casper Network\nDESCRIPTION: Configures a smart contract entity on the Casper Network with protocol version 2.0.0. Includes package hash, bytecode hash, main purse, associated account keys with weights, and action thresholds for various operations.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/versioned_docs/version-2.0.0/developers/json-rpc/json-rpc-transactional.md#2025-04-22_snippet_23\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"key\": \"entity-contract-eb1c971063155d461059292e91cfe2212d45b79a49294b8d90bdae18cda6e59e\",\n    \"kind\": {\n        \"Write\": {\n            \"AddressableEntity\": {\n                \"protocol_version\": \"2.0.0\",\n                \"entity_kind\": {\n                    \"SmartContract\": \"VmCasperV1\"\n                },\n                \"package_hash\": \"package-154847e85beee3b5cd1c769b8f01dbc4b93d1cea8370c0b3bc1858d0d248a48b\",\n                \"byte_code_hash\": \"byte-code-9639481569c3940ce272402f0e9bc0ea535435ea9ffc18d8696e4af02c841354\",\n                \"main_purse\": \"uref-7a9d9c0c33540e9fd4c1245f6ac687c7eacf98ac1072591adc3f83332a909d86-007\",\n                \"associated_keys\": [\n                    {\n                        \"account_hash\": \"account-hash-58749b769807d041002896ca59f55ec1c87197f66b82d9aee229c91eed7dfc8d\",\n                        \"weight\": 1\n                    }\n                ],\n                \"action_thresholds\": {\n                    \"deployment\": 1,\n                    \"upgrade_management\": 1,\n                    \"key_management\": 1\n                },\n                \"message_topics\": []\n            }\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Adding Additional Signature to Deploy\nDESCRIPTION: Command to add another signature to an existing deploy file, demonstrating the multi-signature process using the sign-deploy command.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/docs/developers/cli/transfers/multisig-deploy-transfer.md#2025-04-22_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\ncasper-client sign-deploy \\\n--input transfer.deploy \\\n--secret-key [PATH]/another_secret_key.pem \\\n--output transfer2.deploy\n```\n\n----------------------------------------\n\nTITLE: Querying Reward Amount - Casper Network - JSON\nDESCRIPTION: This snippet demonstrates a JSON-RPC request to the 'info_get_reward' method on the Casper Network, formatted in JSON. It requests the reward for a specific era, validator, and (optionally) delegator, by passing their public keys and era identifier. Dependencies include an operational Casper node and valid account keys; required parameters are era_identifier, validator, and optionally delegator; the output will summarize rewards for the given context.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/versioned_docs/version-2.0.0/developers/json-rpc/json-rpc-informational.md#2025-04-22_snippet_10\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"id\": 1,\n  \"jsonrpc\": \"2.0\",\n  \"method\": \"info_get_reward\",\n  \"params\": [\n      {\n          \"name\": \"era_identifier\",\n          \"value\": {\n              \"Era\": 1\n          }\n      },\n      {\n          \"name\": \"validator\",\n          \"value\": \"01d9bf2148748a85c89da5aad8ee0b0fc2d105fd39d41a4c796536354f0ae2900c\"\n      },\n      {\n          \"name\": \"delegator\",\n          \"value\": \"01d9bf2148748a85c89da5aad8ee0b0fc2d105fd39d41a4c796536354f0ae2900c\"\n      }\n  ],\n}\n\n```\n\n----------------------------------------\n\nTITLE: Querying Auction Information using Casper Client (Bash)\nDESCRIPTION: This command utilizes `casper-client get-auction-info` to retrieve the current state and information from the auction contract on the specified node. It's useful for checking the status of bids and validator stakes, including verifying changes after an unbonding operation. Requires the node address (IP and port) as an argument.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/docs/operators/becoming-a-validator/unbonding.md#2025-04-22_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\ncasper-client get-auction-info --node-address http://<HOST:PORT>\n```\n\n----------------------------------------\n\nTITLE: Sample Named Key Query with Account Hash\nDESCRIPTION: Example of querying a contract variable using account hash and nested path to the named key.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/versioned_docs/version-2.0.0/developers/cli/querying-global-state.md#2025-04-22_snippet_19\n\nLANGUAGE: bash\nCODE:\n```\ncasper-client query-global-state \\\n  --node-address http://localhost:11101 \\\n  --state-root-hash 6b5849caa605acdc29564f303764396a27ef7a6b1a61f7b13109b129e7e70d81 \\\n  --key account-hash-6a56c4eee172043975aea72221eaf09f3c3a24f09a379935e44c9979f1ae9463 \\\n  -q \"counter/count\"\n```\n\n----------------------------------------\n\nTITLE: Querying Block Information with casper-client in Bash\nDESCRIPTION: This snippet demonstrates how to use the casper-client CLI tool to query block information from a Casper Network node. It includes options for specifying the JSON-RPC ID, node address, and block identifier.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/versioned_docs/version-2.0.0/resources/beginner/querying-network.md#2025-04-22_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\ncasper-client get-block \\\n      --id 3 \\\n      --node-address http://<node-ip-address>:7777 \\\n      --block-identifier <block-hash>\n```\n\n----------------------------------------\n\nTITLE: Adding Casper Repository and APT Keyrings - Bash\nDESCRIPTION: This set of bash commands creates a secure APT keyring directory, downloads the Casper repository public GPG key, sets up the apt source entry, and updates the package lists. Dependencies include curl and tee, and the actions must be performed with root/sudo privileges. The signing key is stored outside trusted.gpg to limit its global trust. Required for enabling Casper Network software installations via apt-get.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/docs/operators/setup/install-node.md#2025-04-22_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nsudo mkdir -m 0755 -p /etc/apt/keyrings/\\nsudo curl https://repo.casper.network/casper-repo-pubkey.gpg --output /etc/apt/keyrings/casper-repo-pubkey.gpg\\necho \"deb [arch=amd64 signed-by=/etc/apt/keyrings/casper-repo-pubkey.gpg] https://repo.casper.network/releases focal main\" | sudo tee -a /etc/apt/sources.list.d/casper.list\\nsudo apt update\n```\n\n----------------------------------------\n\nTITLE: Burning CEP-18 Tokens using Casper Client\nDESCRIPTION: This command burns a number of CEP-18 tokens directly from the provided account, decreasing the total supply. It specifies the account to burn tokens from and the amount of tokens to burn.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/docs/resources/tokens/cep18/transfer.md#2025-04-22_snippet_10\n\nLANGUAGE: bash\nCODE:\n```\ncasper-client put-deploy -n http://<NODE IP>:<PORT> \\\n--secret-key ~/casper/demo/user_a/secret_key.pem \\\n--session-package-name \"cep18_contract_package_CEP18\" \\\n--session-entry-point \"burn\" \\\n--session-arg \"owner:key='account-hash-683f53f56926f54ef9584b07585b025c68415dc05f7b2e56749153574b83d5cd'\" \\\n--session-arg \"amount:U256='10'\" \\\n--chain-name <CHAIN NAME> \\\n--payment-amount 1000000000\n```\n\n----------------------------------------\n\nTITLE: Defining Array of PublicKeyAndBid References in JSON Schema (JSON)\nDESCRIPTION: This JSON schema code defines a structure named 'array', indicating the type is an array whose items reference the 'PublicKeyAndBid' schema component. Dependencies include having a 'PublicKeyAndBid' schema defined under the components section. The 'type' describes the structure, 'items' provides a reference to enforce item conformity, and the output is a valid JSON array of such objects. This schema pattern is commonly used for validating lists of similarly structured objects or entities in data models.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/condor/jsonrpc-comp/rpc-2.0/schema/Array_of_PublicKeyAndBid.json.md#2025-04-22_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\\n    \\\"type\\\": \\\"array\\\",\\n    \\\"items\\\": {\\n        \\\"$ref\\\": \\\"#/components/schemas/PublicKeyAndBid\\\"\\n    }\\n} \n```\n\n----------------------------------------\n\nTITLE: Entity Types Schema Definition - JSON\nDESCRIPTION: JSON schema definition for EntityKind that specifies different types of packages including system contracts, accounts, and smart contracts.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/condor/jsonrpc-comp/rpc-2.0/schema.json.md#2025-04-22_snippet_69\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"description\": \"The type of Package.\",\n  \"oneOf\": [\n    {\n      \"description\": \"Package associated with a native contract implementation.\",\n      \"type\": \"object\",\n      \"required\": [\n        \"System\"\n      ],\n      \"properties\": {\n        \"System\": {\n          \"$ref\": \"#/components/schemas/SystemEntityType\"\n        }\n      },\n      \"additionalProperties\": false\n    },\n    {\n      \"description\": \"Package associated with an Account hash.\",\n      \"type\": \"object\",\n      \"required\": [\n        \"Account\"\n      ],\n      \"properties\": {\n        \"Account\": {\n          \"$ref\": \"#/components/schemas/AccountHash\"\n        }\n      },\n      \"additionalProperties\": false\n    },\n    {\n      \"description\": \"Packages associated with Wasm stored on chain.\",\n      \"type\": \"object\",\n      \"required\": [\n        \"SmartContract\"\n      ],\n      \"properties\": {\n        \"SmartContract\": {\n          \"$ref\": \"#/components/schemas/TransactionRuntime\"\n        }\n      },\n      \"additionalProperties\": false\n    }\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Testing Entry Point Access Control\nDESCRIPTION: Test demonstrating entry point access control with multiple authorization keys and deploy threshold validation.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/versioned_docs/version-1.5.X/resources/advanced/list-auth-keys-tutorial.md#2025-04-22_snippet_12\n\nLANGUAGE: rust\nCODE:\n```\nlet entry_point_deploy_item = DeployItemBuilder::new()\n    .with_empty_payment_bytes(runtime_args! {ARG_AMOUNT => *DEFAULT_PAYMENT})\n    .with_authorization_keys(&[account_addr_1, *DEFAULT_ACCOUNT_ADDR])\n    .with_address(account_addr_1)\n    .with_stored_session_hash(contract_hash, ENTRYPOINT, runtime_args! {})\n    .build();\n\nlet entry_point_request =\n    ExecuteRequestBuilder::from_deploy_item(entry_point_deploy_item).build();\n\nbuilder.exec(entry_point_request).expect_success().commit();\n```\n\n----------------------------------------\n\nTITLE: Querying Message Checksum in Global State\nDESCRIPTION: Command to query the global state for a message checksum using casper-client CLI. Requires node address, composite message key, and block identifier.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/docs/developers/writing-onchain-code/emitting-contract-events.md#2025-04-22_snippet_11\n\nLANGUAGE: bash\nCODE:\n```\ncasper-client query-global-state \\\n--node-address <HOST:PORT> \\\n--key [HASH_STRING] \\\n--block-identifier <BLOCK_HASH>\n```\n\n----------------------------------------\n\nTITLE: Defining Core Data Structures in Rust\nDESCRIPTION: Defines key data structures used in the Casper network, including Deploy, DeployHeader, PublicKey, ExecutableDeployItem, and various other types essential for node communication and blockchain operations.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/docs/concepts/design/networking-protocol.md#2025-04-22_snippet_5\n\nLANGUAGE: rust\nCODE:\n```\npub struct Deploy {\n    hash: DeployHash,\n    header: DeployHeader,\n    payment: ExecutableDeployItem,\n    session: ExecutableDeployItem,\n    approvals: BTreeSet<Approval>,\n}\n\nstruct DeployHeader {\n    account: PublicKey,\n    timestamp: u64,\n    ttl: u64,\n    gas_price: u64,\n    body_hash: Digest,\n    dependencies: Vec<DeployHash>,\n    chain_name: String,\n}\n\nenum PublicKey {\n    System,\n    Ed25519(Vec<u8>),\n    Secp256k1(Vec<u8>),\n}\n\nenum ExecutableDeployItem {\n    ModuleBytes {\n        module_bytes: Vec<u8>,\n        args: RuntimeArgs,\n    },\n    StoredContractByHash {\n        hash: [u8; 32],\n        entry_point: String,\n        args: RuntimeArgs,\n    },\n    StoredContractByName {\n        name: String,\n        entry_point: String,\n        args: RuntimeArgs,\n    },\n    StoredVersionedContractByHash {\n        hash: [u8; 32],\n        version: Option<u32>,\n        entry_point: String,\n        args: RuntimeArgs,\n    },\n    StoredVersionedContractByName {\n        name: String,\n        version: Option<u32>,\n        entry_point: String,\n        args: RuntimeArgs,\n    },\n    Transfer { args: RuntimeArgs },\n}\n\nstruct RuntimeArgs(Vec<NamedArg>);\n\nstruct NamedArg(String, CLValue);\n\nstruct CLValue(CLType, Vec<u8>);\n\nenum CLType {\n    Bool,\n    I32,\n    I64,\n    U8,\n    U32,\n    U64,\n    U128,\n    U256,\n    U512,\n    Unit,\n    String,\n    Key,\n    URef,\n    PublicKey,\n    Option(Box<CLType>),\n    List(Box<CLType>),\n    ByteArray(u32),\n    Result { ok: Box<CLType>, err: Box<CLType> },\n    Map { key: Box<CLType>, value: Box<CLType> },\n    Tuple1([Box<CLType>; 1]),\n    Tuple2([Box<CLType>; 2]),\n    Tuple3([Box<CLType>; 3]),\n    Any,\n}\n\nstruct Approval {\n    signer: PublicKey,\n    signature: Signature,\n}\n\nenum Signature {\n    System,\n    Ed25519(Vec<u8>),\n    Secp256k1(Vec<u8>),\n}\n\nstruct FinalizedApprovalsWithId {\n    id: DeployHash,\n    approvals: FinalizedApprovals,\n}\n\nstruct FinalizedApprovals(BTreeSet<Approval>);\n\nstruct Block {\n    hash: BlockHash,\n    header: BlockHeader,\n    body: BlockBody,\n}\n\nstruct BlockHash(Digest);\n\nstruct BlockHeader {\n    parent_hash: BlockHash,\n    state_root_hash: Digest,\n    body_hash: Digest,\n    random_bit: bool,\n    accumulated_seed: Digest,\n    era_end: Option<EraEnd>,\n    timestamp: u64,\n    era_id: u64,\n    height: u64,\n    protocol_version: ProtocolVersion,\n}\n\nstruct EraEnd {\n    era_report: EraReport,\n    next_era_validator_weights: BTreeMap<PublicKey, U512>,\n}\n\nstruct EraReport<VID> {\n    equivocators: Vec<PublicKey>,\n    rewards: BTreeMap<PublicKey, u64>,\n    inactive_validators: Vec<PublicKey>,\n}\n\nstruct ProtocolVersion {\n    major: u32,\n    minor: u32,\n    patch: u32,\n}\n\nstruct BlockBody {\n    proposer: PublicKey,\n    deploy_hashes: Vec<DeployHash>,\n    transfer_hashes: Vec<DeployHash>,\n}\n```\n\n----------------------------------------\n\nTITLE: System Costs Configuration for Delegation in Casper Network\nDESCRIPTION: TOML configuration showing the delegation and undelegation costs specified in the Casper Network chainspec file. Both operations cost 2.5 CSPR (2,500,000,000 motes).\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/docs/users/delegating.md#2025-04-22_snippet_0\n\nLANGUAGE: toml\nCODE:\n```\n[system_costs.auction_costs]\n...\ndelegate = 2_500_000_000\nundelegate = 2_500_000_000\n...\n```\n\n----------------------------------------\n\nTITLE: Querying Contract Version in Bash\nDESCRIPTION: This Bash command queries the global state to retrieve the current version of a contract after an upgrade.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/versioned_docs/version-2.0.0/resources/beginner/upgrade-contract.md#2025-04-22_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\ncasper-client query-global-state \\\n    --node-address http://[NODE_IP]:7777 \\\n    --state-root-hash [STATE_ROOT_HASH] \\\n    --key [ACCOUNT_HASH] -q \"version\"\n```\n\n----------------------------------------\n\nTITLE: Get Account Hash from Public Key\nDESCRIPTION: Command to retrieve an account hash using a public key file.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/versioned_docs/version-1.5.X/developers/cli/installing-contracts.md#2025-04-22_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\ncasper-client account-address --public-key [PATH_TO_PUBLIC_KEY]\n```\n\n----------------------------------------\n\nTITLE: Defining StoredValue Types in Casper\nDESCRIPTION: Enumerates the possible types of values that can be stored in Casper's global state, including CLValues, Accounts, Contracts, and other core data structures.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/versioned_docs/version-2.0.0/developers/json-rpc/types_chain.md#2025-04-22_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n* [`CLValue`](#clvalue) A Casper-specific value.\n\n* [`Account`](#account) An Account.\n\n* `ContractWasm` A contract's Wasm.\n\n* [`Contract`](#contract) Entry points supported by a contract.\n\n* [`ContractPackage`](#contractpackage) A contract definition, metadata, and security container.\n\n* [`LegacyTransfer`](#transfer) A version 1 (legacy) transfer.\n\n* [`DeployInfo`](#deployinfo) A record of a Deploy.\n\n* [`EraInfo`](#erainfo) Information about an era.\n\n* [`Bid`](#bid) A bid.\n\n* [`Withdraw`](#unbondingpurse) A withdraw.\n\n* [`Unbonding`](#unbondingpurse) Unbonding information.\n\n* [`AddressableEntity`](#addressableentity) An AddressableEntity.\n\n* [`BidKind`](#bidkind) A variant that stored `BidKind`.\n\n* [`Package`] A `Package`.\n\n* [`ByteCode`] A record of byte code.\n\n* [`MessageTopic`](#messagetopic) A variant that stores a message topic.\n\n* [`Message`](#messagechecksum) A variant that stores a message digest.\n\n* [`NamedKey`](#namedkey) A NamedKey record.\n\n* [`Reservation`](#reservationkind) A reservation record.\n\n* [`EntryPoint`](#entrypoint) An entrypoint record.\n```\n\n----------------------------------------\n\nTITLE: Defining Trie Chunking Data Structures in Rust\nDESCRIPTION: These Rust structs and enums define the types used for requesting and transferring parts of the global state trie. `TrieOrChunkId` identifies a specific trie node or chunk. `TrieOrChunk` is an enum that holds either the raw trie data (`Bytes`) or a `ChunkWithProof`, which includes the chunk data and an `IndexedMerkleProof` for verification.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/versioned_docs/version-2.0.0/concepts/design/networking-protocol.md#2025-04-22_snippet_7\n\nLANGUAGE: rust\nCODE:\n```\n```rust\nstruct TrieOrChunkId(u64, Digest);\n\nenum TrieOrChunk {\n    Trie(Bytes),\n    ChunkWithProof(ChunkWithProof),\n}\n\nstruct ChunkWithProof {\n    proof: IndexedMerkleProof,\n    chunk: Bytes,\n}\n\nstruct IndexedMerkleProof {\n    index: u64,\n    count: u64,\n    merkle_proof: Vec<Digest>,\n}\n```\n```\n\n----------------------------------------\n\nTITLE: Installing Python Dependencies\nDESCRIPTION: Commands to install required Python packages (pip, jq, supervisor, toml) in the virtual environment.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/docs/developers/dapps/setup-nctl.md#2025-04-22_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\n(env) $ pip install --upgrade pip\n(env) $ pip install jq\n(env) $ pip install supervisor\n(env) $ pip install toml\n```\n\n----------------------------------------\n\nTITLE: Querying Block Data with chain_get_block Request\nDESCRIPTION: JSON-RPC request to retrieve block information using a block hash identifier. Returns a complete JSON representation of a Block from the Casper network.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/versioned_docs/version-1.5.X/developers/json-rpc/json-rpc-informational.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n{\n  \"id\": 1,\n  \"jsonrpc\": \"2.0\",\n  \"method\": \"chain_get_block\",\n  \"params\": [\n    {\n      \"Hash\": \"13c2d7a68ecdd4b74bf4393c88915c836c863fc4bf11d7f2bd930a1bbccacdcb\"\n    }\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Viewing Message Structure in Casper SSE Events\nDESCRIPTION: Sample message structure showing entity address, message payload, topic name, topic hash and index as part of a TransactionProcessed event\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/docs/developers/writing-onchain-code/emitting-contract-events.md#2025-04-22_snippet_8\n\nLANGUAGE: json\nCODE:\n```\n\"messages\": [\n    {\n        \"entity_addr\": \"addressable-entity-b51b0f9d94e5744af4dce6b4a9990c5f3e652c1a0a946e680e83f97d8846eff5\",\n        \"message\": {\n            \"String\": \"{\\\"Mint\\\":{\\\"recipient\\\":\\\"account-hash-212ffdd040b65495419f4057c8392930e410f7bf24baeec8de59a6117b63e45c\\\",\\\"token_id\\\":{\\\"Index\\\":0}}}\"\n        },\n        \"topic_name\": \"events\",\n        \"topic_name_hash\": \"topic-name-5721a6d9d7a9afe5dfdb35276fb823bed0f825350e4d865a5ec0110c380de4e1\",\n        \"index\": 0\n    }\n]\n```\n\n----------------------------------------\n\nTITLE: Querying a Value Using Account Hash and Nested Named Keys - Sample (Bash)\nDESCRIPTION: Full example command to fetch the 'count' named key stored under a 'counter' contract, both installed to an account. Demonstrates querying nested named keys using casper-client.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/docs/developers/cli/querying-global-state.md#2025-04-22_snippet_23\n\nLANGUAGE: bash\nCODE:\n```\ncasper-client query-global-state \\\n  --node-address http://localhost:11101 \\\n  --state-root-hash 6b5849caa605acdc29564f303764396a27ef7a6b1a61f7b13109b129e7e70d81 \\\n  --key account-hash-6a56c4eee172043975aea72221eaf09f3c3a24f09a379935e44c9979f1ae9463 \\\n  -q \"counter/count\"\n```\n\n----------------------------------------\n\nTITLE: Describing ChainspecRegistry Structure and Serialization (Casper Network)\nDESCRIPTION: Defines ChainspecRegistry as a BTreeMap mapping specific filenames (like Chainspec.toml, potentially Accounts.toml, GlobalState.toml) to their file hashes (digests). It serializes as a standard BTreeMap: u32 count followed by serialized string keys and digest values. It notes that `chainspec_raw_hash` is always included, while others are conditional.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/versioned_docs/version-2.0.0/concepts/serialization/types.md#2025-04-22_snippet_13\n\nLANGUAGE: Text\nCODE:\n```\n## ChainspecRegistry {#chainspecregistry}\n\nChainspecRegistry is a unique key variant which contains a mapping of file names to the hash of the file itself. This map includes *Chainspec.toml* and may include *Accounts.toml* and *GlobalState.toml*. It is serialized as a `BTreeMap` where the first 4 bytes represent a `u32` value describing the number of names as strings and [digests](#digest) held within. The remainder consists of a repeating pattern of serialized strings and then digests of the length dictated by the first four bytes. Digests and their inclusion criteria are as follows:\n\n-   `chainspec_raw_hash` will always be included.\n\n-   `genesis_accounts_raw_hash` may be included in specific circumstances.\n\n-   `global_state_raw_hash` may be included in specific circumstances.\n```\n\n----------------------------------------\n\nTITLE: Deploying a Casper Smart Contract\nDESCRIPTION: Command to deploy a compiled smart contract to the Casper Testnet using the casper-client CLI tool, specifying node address, chain name, payment amount, and session arguments.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/docs/resources/advanced/cross-contract.md#2025-04-22_snippet_8\n\nLANGUAGE: bash\nCODE:\n```\ncasper-client put-deploy \\\n    --node-address http://136.243.187.84:7777 \\\n    --chain-name casper-test \\\n    --secret-key ./keys/secret_key.pem \\\n    --payment-amount 20000000000 \\\n    --session-path ./contract/target/wasm32-unknown-unknown/release/contract.wasm \\\n    --session-arg \"message:string='hello world'\"\n```\n\n----------------------------------------\n\nTITLE: Storing Named Keys for Contract References - Casper Contract - JSON\nDESCRIPTION: This snippet documents a named key mapping holding a reference from an account to the contract, typically used by client systems to locate smart contracts by human-readable names. The structure includes both the key value and a string name (e.g., \"cep18_contract_hash_CEP18\"). Dependencies include a valid contract key, and the key mapping is essential for user and application contract discovery.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/docs/developers/cli/sending-transactions.md#2025-04-22_snippet_19\n\nLANGUAGE: JSON\nCODE:\n```\n{\n  \"named_key\": {\n    \"cl_type\": \"Key\",\n    \"bytes\": \"1102363996106630892a964565574fcdfd2435f21a17a3ad1ed2054146e7d8461640\",\n    \"parsed\": \"entity-contract-363996106630892a964565574fcdfd2435f21a17a3ad1ed2054146e7d8461640\"\n  },\n  \"name\": {\n    \"cl_type\": \"String\",\n    \"bytes\": \"1900000063657031385f636f6e74726163745f686173685f4345503138\",\n    \"parsed\": \"cep18_contract_hash_CEP18\"\n  }\n}\n\n```\n\n----------------------------------------\n\nTITLE: Burning CEP-18 Tokens using Casper Client - Bash (No Comments)\nDESCRIPTION: This concise burn command allows directly reducing total CEP-18 token supply by burning a defined amount from an owner's account. It omits inline comments, requiring all needed session and key arguments for a successful deploy if burning is permitted by the contract.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/versioned_docs/version-2.0.0/resources/tokens/cep18/transfer.md#2025-04-22_snippet_23\n\nLANGUAGE: bash\nCODE:\n```\ncasper-client put-deploy -n http://<NODE IP>:<PORT> \\\n--secret-key ~/casper/demo/user_a/secret_key.pem \\\n--session-package-name \"cep18_contract_package_CEP18\" \\\n--session-entry-point \"burn\" \\\n// This is the account that the tokens will be burned from.\n--session-arg \"owner:key='account-hash-683f53f56926f54ef9584b07585b025c68415dc05f7b2e56749153574b83d5cd'\" \\\n// This is the number of CEP-18 tokens to remove from the total supply.\n--session-arg \"amount:U256='10'\" \\\n--chain-name <CHAIN NAME> \\\n--payment-amount 1000000000\n```\n\n----------------------------------------\n\nTITLE: Delegating CSPR Using Compiled WASM\nDESCRIPTION: Command structure for delegating CSPR tokens using the compiled delegate.wasm file. Includes all required parameters and arguments for the delegation deploy.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/versioned_docs/version-1.5.X/developers/cli/delegate.md#2025-04-22_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\ncasper-client put-deploy \\\n--node-address <HOST:PORT> \\\n--secret-key <PATH> \\\n--chain-name <CHAIN_NAME> \\\n--payment-amount <PAYMENT_AMOUNT_IN_MOTES> \\\n--session-path <PATH_TO_WASM>/delegate.wasm \\\n--session-arg \"validator:public_key='<HEX_ENCODED_VALIDATOR_PULIC_KEY>'\" \\\n--session-arg \"amount:u512='<AMOUNT_TO_DELEGATE>'\" \\\n--session-arg \"delegator:public_key='<HEX_ENCODED_DELEGATOR_PULIC_KEY>'\"\n```\n\n----------------------------------------\n\nTITLE: Installing WebAssembly Tools on MacOS\nDESCRIPTION: Command to install WebAssembly tools on MacOS to resolve the 'wasm-strip: command not found' error when building the contract.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/versioned_docs/version-2.0.0/resources/beginner/cep18.md#2025-04-22_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nbrew install wabt\n```\n\n----------------------------------------\n\nTITLE: Installing the Counter Contract on the Blockchain\nDESCRIPTION: Deploys the compiled counter contract to the Casper Testnet using the put-deploy command. This installs the contract on the blockchain.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/versioned_docs/version-2.0.0/resources/beginner/counter-testnet/walkthrough.md#2025-04-22_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\ncasper-client put-deploy \\\n    --node-address http://[NODE_IP]:7777 \\\n    --chain-name casper-test \\\n    --secret-key [PATH_TO_YOUR_KEY]/secret_key.pem \\\n    --payment-amount [PAYMENT_AMOUNT_IN_MOTES] \\\n    --session-path ./contract-v1/target/wasm32-unknown-unknown/release/counter-v1.wasm\n```\n\n----------------------------------------\n\nTITLE: Defining Block Schema with Versioning using JSON Schema\nDESCRIPTION: This JSON Schema defines the structure for a block object after execution. It utilizes the `oneOf` keyword to specify that the block must conform to either the `Version1` schema (referencing `#/components/schemas/BlockV1`) or the `Version2` schema (referencing `#/components/schemas/BlockV2`). Each version is defined within its own object structure, requiring the corresponding version key (`Version1` or `Version2`) and disallowing additional properties.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/condor/jsonrpc-comp/rpc-2.0/schema/Block.json.md#2025-04-22_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"description\": \"A block after execution.\",\n    \"oneOf\": [\n        {\n            \"description\": \"The legacy, initial version of the block.\",\n            \"type\": \"object\",\n            \"required\": [\n                \"Version1\"\n            ],\n            \"properties\": {\n                \"Version1\": {\n                    \"$ref\": \"#/components/schemas/BlockV1\"\n                }\n            },\n            \"additionalProperties\": false\n        },\n        {\n            \"description\": \"The version 2 of the block.\",\n            \"type\": \"object\",\n            \"required\": [\n                \"Version2\"\n            ],\n            \"properties\": {\n                \"Version2\": {\n                    \"$ref\": \"#/components/schemas/BlockV2\"\n                }\n            },\n            \"additionalProperties\": false\n        }\n    ]\n} \n```\n\n----------------------------------------\n\nTITLE: Compiling the AssemblyScript Contract to Wasm using npm\nDESCRIPTION: This shell command executes the `asbuild` script defined in the project's `package.json`. Running this command from the project root triggers the AssemblyScript compilation process, which takes the TypeScript source code (e.g., `assembly/index.ts`) and outputs a compiled Wasm file (e.g., `dist/your-contract-name.wasm`).\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/versioned_docs/version-1.5.X/developers/writing-onchain-code/assembly-script.md#2025-04-22_snippet_8\n\nLANGUAGE: sh\nCODE:\n```\nnpm run asbuild\n```\n\n----------------------------------------\n\nTITLE: Starting the Casper Node Service using systemctl\nDESCRIPTION: Starts the Casper node launcher service (`casper-node-launcher`) using the `systemctl start` command with `sudo` for necessary permissions. This command assumes the Casper node was installed via a Debian package which sets up a systemd service.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/versioned_docs/version-1.5.X/operators/setup/joining.md#2025-04-22_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nsudo systemctl start casper-node-launcher\n```\n\n----------------------------------------\n\nTITLE: Installing Smart Contract via Transaction\nDESCRIPTION: Command to install a smart contract using put-transaction with necessary parameters including chain name, secret key, and gas settings\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/docs/developers/dapps/nctl-test.md#2025-04-22_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n$(get_path_to_client) put-transaction session \\\n--chain-name \"casper-net-1\" \\\n--secret-key /casper/casper-node/utils/nctl/assets/net-1/nodes/node-1/keys/secret_key.pem \\\n--gas-price-tolerance 10 \\\n--pricing-mode fixed \\\n--transaction-path <PATH> \\\n--category 'install-upgrade' \\\n--session-entry-point call \\\n--node-address http://localhost:11101\n```\n\n----------------------------------------\n\nTITLE: Switching to Casper 2.0 Branch in Bash\nDESCRIPTION: Command to checkout the feat-2.0 branch of the casper-nctl-docker repository, which contains the Casper 2.0 specific configurations.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/condor/local-setup.md#2025-04-22_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ngit checkout feat-2.0\n```\n\n----------------------------------------\n\nTITLE: Query State for Allowance Verification Using Casper Client\nDESCRIPTION: This snippet demonstrates how to verify a previously granted token allowance by querying the global state using the Casper client. It involves specifying the node URL, `result` URef, and state root hash to confirm the stored allowance under the utility contract's `NamedKeys`.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/docs/resources/tokens/cep18/transfer.md#2025-04-22_snippet_5\n\nLANGUAGE: json\nCODE:\n```\ncasper-client query-global-state -n http://<node IP>:<PORT>\\\n// This is the previously identified `result` URef from the utility contract's `NamedKeys`\n--key uref-a46ad389b53715d9991a513c8ca48e1502facc4c563c0700a31e830c4cb8a7d4-007 \\\n--state-root-hash e64f877f65df26db74300bb175c244d589bd88a23b91abf9ceb73ac5e65e90f1\n```\n\n----------------------------------------\n\nTITLE: Defining Vesting Schedule Schema in JSON\nDESCRIPTION: This JSON schema defines the structure for a vesting schedule, typically associated with genesis validators. It requires an 'initial_release_timestamp_millis' (uint64) and includes an optional 'locked_amounts' property, which must be a null or an array of exactly 14 U512 values. It references the 'U512' schema.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/condor/jsonrpc-comp/rpc-1.5/schema/components.json.md#2025-04-22_snippet_35\n\nLANGUAGE: json\nCODE:\n```\n\"type\": \"object\",\n\"required\": [\n    \"initial_release_timestamp_millis\"\n],\n\"properties\": {\n    \"initial_release_timestamp_millis\": {\n        \"type\": \"integer\",\n        \"format\": \"uint64\",\n        \"minimum\": 0.0\n    },\n    \"locked_amounts\": {\n        \"type\": [\n            \"array\",\n            \"null\"\n        ],\n        \"items\": {\n            \"$ref\": \"#/components/schemas/U512\"\n        },\n        \"maxItems\": 14,\n        \"minItems\": 14\n    }\n},\n\"additionalProperties\": false\n\n```\n\n----------------------------------------\n\nTITLE: Optimizing WebAssembly Size with wasm-strip\nDESCRIPTION: This Bash command uses `wasm-strip` to reduce the size of the compiled Wasm bytecode, which is crucial for staying within deployment size limits. The prerequisite is having WABT installed on the system.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/versioned_docs/version-1.5.X/developers/writing-onchain-code/best-practices.md#2025-04-22_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nwasm-strip target/wasm32-unknown-unknown/release/contract.wasm\n```\n\n----------------------------------------\n\nTITLE: Defining CLValue Structure for Casper Contracts - JSON\nDESCRIPTION: This JSON code defines the schema for a CLValue, specifying that it must contain 'bytes' and 'cl_type' fields, where 'cl_type' references another schema and 'bytes' is a base64-encoded string. The optional 'parsed' field, when present, represents the deserialized underlying value, but may also be set to null. The description field documents usage and intent, and the schema restricts any additional properties to ensure data consistency. No code dependencies are required but consumers should understand the structure for proper usage. The schema expects input adhering to this format and outputs validation results or parsed CLValue representations.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/condor/jsonrpc-comp/rpc-2.0/schema/CLValue.json.md#2025-04-22_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"description\": \"A Casper value, i.e. a value which can be stored and manipulated by smart contracts.\\n\\nIt holds the underlying data as a type-erased, serialized `Vec<u8>` and also holds the CLType of the underlying data as a separate member.\\n\\nThe `parsed` field, representing the original value, is a convenience only available when a CLValue is encoded to JSON, and can always be set to null if preferred.\",\n    \"type\": \"object\",\n    \"required\": [\n        \"bytes\",\n        \"cl_type\"\n    ],\n    \"properties\": {\n        \"cl_type\": {\n            \"$ref\": \"#/components/schemas/CLType\"\n        },\n        \"bytes\": {\n            \"type\": \"string\"\n        },\n        \"parsed\": true\n    },\n    \"additionalProperties\": false\n} \n```\n\n----------------------------------------\n\nTITLE: Cloning the Casper Client Repository in Bash\nDESCRIPTION: Optional commands to clone the Casper Client repository if you prefer using a local client instead of the one in the Docker image.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/condor/local-setup.md#2025-04-22_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\ngit clone https://github.com/casper-ecosystem/casper-client-rs.git\ncd casper-client-rs\n```\n\n----------------------------------------\n\nTITLE: NFT Contract Metadata Mutability Table\nDESCRIPTION: Table showing the u8 values corresponding to different metadata mutability modes that control whether NFT metadata can be updated after minting.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/versioned_docs/version-1.5.X/resources/tokens/cep78/modalities.md#2025-04-22_snippet_4\n\nLANGUAGE: markdown\nCODE:\n```\n| MetadataMutability | u8  |\n| ------------------ | --- |\n| Immutable          | 0   |\n| Mutable            | 1   |\n```\n\n----------------------------------------\n\nTITLE: Querying Contract State with Global State Query\nDESCRIPTION: Query to retrieve the contract state using a contract hash. Shows the contract's entry points and named keys.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/versioned_docs/version-2.0.0/resources/advanced/cross-contract.md#2025-04-22_snippet_20\n\nLANGUAGE: bash\nCODE:\n```\ncasper-client query-global-state \\\n  --node-address http://136.243.187.84:7777 \\\n  --state-root-hash 2f3e100324deb999107229dbec5c4b724653174328c99ea0836931248c3cc9cb \\\n  --key hash-b7a06298cc71d4cac05929cc0713dfd5a541c68b71cb500cd04547b5cd0385ea\n```\n\n----------------------------------------\n\nTITLE: Initializing Main Method for Contract Test Binary in Rust\nDESCRIPTION: This snippet implements a 'main' function in the test entrypoint that purposely fails if run with 'cargo run' instead of 'cargo test'. Its role is to prevent accidental use of 'cargo run', which is not intended for test execution. Important for test discoverability and error prevention. No parameters; outputs a panic message.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/versioned_docs/version-1.5.X/developers/writing-onchain-code/testing-contracts.md#2025-04-22_snippet_1\n\nLANGUAGE: rust\nCODE:\n```\nfn main() {\n panic!(\"Execute \\\"cargo test\\\" to test the contract, not \\\"cargo run\\\".\");\n}\n```\n\n----------------------------------------\n\nTITLE: Runtime Arguments and Contract Types\nDESCRIPTION: Defines structures for runtime arguments and contract language value types used in deployments.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/versioned_docs/version-1.5.X/concepts/design/networking-protocol.md#2025-04-22_snippet_6\n\nLANGUAGE: rust\nCODE:\n```\nstruct RuntimeArgs(Vec<NamedArg>);\n\nstruct NamedArg(String, CLValue);\n\nstruct CLValue(CLType, Vec<u8>);\n\nenum CLType {\n    Bool,\n    I32,\n    I64,\n    U8,\n    U32,\n    U64,\n    U128,\n    U256,\n    U512,\n    Unit,\n    String,\n    Key,\n    URef,\n    PublicKey,\n    Option(Box<CLType>),\n    List(Box<CLType>),\n    ByteArray(u32),\n    Result { ok: Box<CLType>, err: Box<CLType> },\n    Map { key: Box<CLType>, value: Box<CLType> },\n    Tuple1([Box<CLType>; 1]),\n    Tuple2([Box<CLType>; 2]),\n    Tuple3([Box<CLType>; 3]),\n    Any,\n}\n```\n\n----------------------------------------\n\nTITLE: Querying Account Configuration\nDESCRIPTION: Command to query the global state to verify the account's multi-signature configuration using the state root hash.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/versioned_docs/version-2.0.0/resources/advanced/two-party-multi-sig.md#2025-04-22_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\ncasper-client query-global-state \\\n--node-address http://<peer-ip-address>:7777 \\\n--state-root-hash <state-root-hash-from-block> \\\n--key <hex-encoded-public-key-MA>\n```\n\n----------------------------------------\n\nTITLE: Simplified CEP-18 Balance Check Command\nDESCRIPTION: A simplified version of the balance check command without explanatory comments, showing the essential parameters needed for checking an account's CEP-18 token balance.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/versioned_docs/version-2.0.0/resources/tokens/cep18/transfer.md#2025-04-22_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\ncasper-client put-deploy -n http://<node IP>:<PORT>\\\n--secret-key ~/casper/demo/user_a/secret_key.pem \\\n--session-package-name \"cep18_test_contract\" \\\n--session-entry-point \"check_balance_of\" \\\n--session-arg \"token_contract:account_hash='account-hash-b568f50a64acc8bbe43462ffe243849a88111060b228dacb8f08d42e26985180'\" \\\n--session-arg \"address:key='account-hash-303c0f8208220fe9a4de40e1ada1d35fdd6c678877908f01fddb2a56502d67fd'\" \\\n--chain-name <CHAIN NAME> \\\n--payment-amount 1000000000\n```\n\n----------------------------------------\n\nTITLE: Multi-Signature Deploy with Associated Keys\nDESCRIPTION: This example outlines a multi-signature deployment process on the Casper network. It uses Casper Client commands to prepare and send deployments, requiring multiple associated keys for signing.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/versioned_docs/version-2.0.0/resources/advanced/multi-sig/multi-sig-workflow.md#2025-04-22_snippet_11\n\nLANGUAGE: bash\nCODE:\n```\ncasper-client make-deploy --chain-name casper-test \\\n--payment-amount 300000000 \\\n--session-path tests/wasm/contract.wasm \\\n--secret-key $PATH/user_1_secret_key.pem \\\n--session-arg \"my-key-name:string='user_1_key'\" \\\n--session-arg \"message:string='Hello, World'\" \\\n--session-account 01360af61b50cdcb7b92cffe2c99315d413d34ef77fadee0c105cc4f1d4120f986 \\\n--output hello_world_one_signature\n```\n\nLANGUAGE: bash\nCODE:\n```\ncasper-client sign-deploy -i hello_world_one_signature -k $PATH/user_2_secret_key.pem  -o hello_world_two_signatures\n```\n\nLANGUAGE: bash\nCODE:\n```\ncasper-client send-deploy --node-address https://node.testnet.casper.network -i hello_world_two_signatures\n```\n\nLANGUAGE: bash\nCODE:\n```\ncasper-client get-deploy --node-address https://node.testnet.casper.network <DEPLOY_HASH>\n```\n\nLANGUAGE: bash\nCODE:\n```\ncasper-client get-state-root-hash --node-address https://node.testnet.casper.network\n\ncasper-client query-global-state \\\n--node-address https://node.testnet.casper.network \\\n--state-root-hash <STATE_ROOT_HASH> \\\n--key account-hash-<PRIMARY_ACCOUNT_HASH>\n```\n\n----------------------------------------\n\nTITLE: Contract Version Data Structure\nDESCRIPTION: Defines the version information for a contract including contract hash, version number and protocol compatibility version.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/docs/concepts/serialization/structures.md#2025-04-22_snippet_0\n\nLANGUAGE: rust\nCODE:\n```\nstruct ContractVersion {\n    contract_hash: Hash,\n    contract_version: u32,\n    protocol_version_major: u32\n}\n```\n\n----------------------------------------\n\nTITLE: Retrieving Account Information in Casper Network API\nDESCRIPTION: Example JSON request for the state_get_account_info method showing how to retrieve account information using a public key and specific block identifier.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/versioned_docs/version-2.0.0/developers/json-rpc/json-rpc-informational.md#2025-04-22_snippet_20\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"id\": 1,\n  \"jsonrpc\": \"2.0\",\n  \"method\": \"state_get_account_info\",\n  \"params\": [\n    {\n      \"name\": \"account_identifier\",\n      \"value\": \"013b6a27bcceb6a42d62a3a8d02a6f0d73653215771de243a63ac048a18b59da29\"\n    },\n    {\n      \"name\": \"block_identifier\",\n      \"value\": {\n        \"Hash\": \"0707070707070707070707070707070707070707070707070707070707070707\"\n      }\n    }\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Representing Associated Keys in JSON - JSON\nDESCRIPTION: This snippet illustrates the JSON representation of an account's associated keys as stored or returned by Casper Network. Each entry contains an account_hash to identify the key and a weight for multi-signature schemes. This structure is typically used in Casper account data, where the full list is required for permission checks or wallet logic. Input is not required as this is typically read-only data, and output is the structured list of keys and weights.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/docs/concepts/list-auth-keys.md#2025-04-22_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n\"associated_keys\": [\\n{\\n    \\\"account_hash\\\": \\\"account-hash-1ab…11\\\",\\n    \\\"weight\\\": 1\\n},\\n{\\n    \\\"account_hash\\\": \\\"account-hash-2cd…22\\\",\\n    \\\"weight\\\": 1\\n},\\n{\\n    \\\"account_hash\\\": \\\"account-hash-3de…33\\\",\\n    \\\"weight\\\": 1\\n   },\\n{\\n    \\\"account_hash\\\": \\\"account-hash-4fg…44\\\",\\n      \\\"weight\\\": 1\\n}\\n ], ...\n```\n\n----------------------------------------\n\nTITLE: Creating AddressableEntity Key from Account Hash in Rust\nDESCRIPTION: This snippet demonstrates how to create an AddressableEntity key from an account hash in Casper 2.0. It uses the Key::AddressableEntity constructor with EntityAddr::Account.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/condor/addressable-entity.md#2025-04-22_snippet_0\n\nLANGUAGE: rust\nCODE:\n```\nlet addressable_entity_key = Key::AddressableEntity(EntityAddr::Account(account_hash));\n```\n\n----------------------------------------\n\nTITLE: Querying Global State for Message Checksums in Casper Network\nDESCRIPTION: Command to query global state to retrieve a message checksum using the casper-client CLI tool. The command requires the node address, the composite message key (containing contract hash, topic hash, and message index), and a block identifier.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/versioned_docs/version-2.0.0/developers/writing-onchain-code/emitting-contract-events.md#2025-04-22_snippet_12\n\nLANGUAGE: bash\nCODE:\n```\ncasper-client query-global-state \\\n--node-address <HOST:PORT> \\\n--key [HASH_STRING] \\\n--block-identifier <BLOCK_HASH> \\\n```\n\n----------------------------------------\n\nTITLE: Staging All Protocols on Casper Node (Testnet) - Bash\nDESCRIPTION: A variant of the protocol staging command for testnet, this runs stage_protocols with casper-test.conf. Required for validator/test operations in the testnet environment. Assumes casper-test.conf is present and accessible to the casper user.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/docs/operators/setup/install-node.md#2025-04-22_snippet_8\n\nLANGUAGE: bash\nCODE:\n```\nsudo -u casper /etc/casper/node_util.py stage_protocols casper-test.conf\n```\n\n----------------------------------------\n\nTITLE: Querying State Root Hash Using Casper CLI\nDESCRIPTION: Command to retrieve the current state root hash from a Casper node using the command-line client.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/versioned_docs/version-1.5.X/resources/beginner/upgrade-contract.md#2025-04-22_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\ncasper-client get-state-root-hash --node-address http://[NODE_IP]:7777\n```\n\n----------------------------------------\n\nTITLE: Funding an Account on Casper Private Network\nDESCRIPTION: Command to transfer tokens from an administrator account to a user account (Alice). This demonstrates how to fund accounts on a private Casper network.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/versioned_docs/version-1.5.X/operators/setup-network/create-private.md#2025-04-22_snippet_15\n\nLANGUAGE: sh\nCODE:\n```\ncasper-client \\\n  transfer \\\n  -n $NODE_ADDR \\\n  --chain-name $CHAIN_NAME \\\n  --secret-key admin/secret_key.pem \\\n  --session-account=$(<admin/public_key_hex) \\\n  --target-account=$(<alice/public_key_hex) \\\n  --amount=100000000000 \\\n  --payment-amount=3000000000 \\\n  --transfer-id=123\n```\n\n----------------------------------------\n\nTITLE: Defining Peers and PeerEntry Schemas in JSON\nDESCRIPTION: These schemas define the structure for peer information, including an array of peer entries with node IDs and addresses.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/condor/jsonrpc-comp/rpc-2.0/schema/components.json.md#2025-04-22_snippet_76\n\nLANGUAGE: JSON\nCODE:\n```\n\"Peers\": {\n    \"description\": \"Map of peer IDs to network addresses.\",\n    \"type\": \"array\",\n    \"items\": {\n        \"$ref\": \"#/components/schemas/PeerEntry\"\n    }\n},\n\"PeerEntry\": {\n    \"description\": \"Node peer entry.\",\n    \"type\": \"object\",\n    \"required\": [\n        \"address\",\n        \"node_id\"\n    ],\n    \"properties\": {\n        \"node_id\": {\n            \"description\": \"Node id.\",\n            \"type\": \"string\"\n        },\n        \"address\": {\n            \"description\": \"Node address.\",\n            \"type\": \"string\"\n        }\n    },\n    \"additionalProperties\": false\n}\n```\n\n----------------------------------------\n\nTITLE: Defining BlockV2 Schema in JSON\nDESCRIPTION: Defines the schema for BlockV2, which represents version 2 of a block after execution. It includes properties for hash, header, and body components.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/condor/jsonrpc-comp/rpc-2.0/schema/components.json.md#2025-04-22_snippet_87\n\nLANGUAGE: JSON\nCODE:\n```\n\"BlockV2\": {\n    \"description\": \"A block after execution, with the resulting global state root hash. This is the core component of the Casper linear blockchain. Version 2.\",\n    \"type\": \"object\",\n    \"required\": [\n        \"body\",\n        \"hash\",\n        \"header\"\n    ],\n    \"properties\": {\n        \"hash\": {\n            \"description\": \"The block hash identifying this block.\",\n            \"allOf\": [\n                {\n                    \"$ref\": \"#/components/schemas/BlockHash\"\n                }\n            ]\n        },\n        \"header\": {\n            \"description\": \"The header portion of the block.\",\n            \"allOf\": [\n                {\n                    \"$ref\": \"#/components/schemas/BlockHeaderV2\"\n                }\n            ]\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Protocol Version and Network Name in chainspec.toml (TOML)\nDESCRIPTION: Example snippet from a `chainspec.toml` file showing how to define the initial protocol `version` (e.g., '1.0.0'), its `activation_point` (genesis time in ISO 8601 format), and the unique `name` for the network under the `[network]` section. This file contains critical network parameters and must be identical across all genesis nodes.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/docs/operators/setup-network/staging-files-for-new-network.md#2025-04-22_snippet_4\n\nLANGUAGE: toml\nCODE:\n```\n[protocol]\nversion = '1.0.0'\nactivation_point = '2022-08-01T10:00:00Z'\n\n[network]\nname = 'mynetwork'\n```\n\n----------------------------------------\n\nTITLE: Response Format for info_get_status in Casper Network\nDESCRIPTION: The response includes detailed information about the node, including API version, peers, build version, chainspec name, block information, synchronization status, and other operational metrics. This provides a comprehensive overview of the node's current state.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/docs/developers/json-rpc/json-rpc-informational.md#2025-04-22_snippet_31\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"id\": 1,\n  \"jsonrpc\": \"2.0\",\n  \"result\": {\n    \"name\": \"info_get_status_result\",\n    \"value\": {\n      \"api_version\": \"2.0.0\",\n      \"peers\": [\n        {\n          \"node_id\": \"tls:0101..0101\",\n          \"address\": \"127.0.0.1:54321\"\n        }\n      ],\n      \"build_version\": \"1.0.0-xxxxxxxxx@DEBUG\",\n      \"chainspec_name\": \"casper-example\",\n      \"starting_state_root_hash\": \"0000000000000000000000000000000000000000000000000000000000000000\",\n      \"last_added_block_info\": {\n        \"hash\": \"0744fcb72af43c5cc372039bc5a8bfee48808a9ce414acc0d6338a628c20eb42\",\n        \"timestamp\": \"2020-11-17T00:39:24.072Z\",\n        \"era_id\": 1,\n        \"height\": 10,\n        \"state_root_hash\": \"0808080808080808080808080808080808080808080808080808080808080808\",\n        \"creator\": \"01d9bf2148748a85c89da5aad8ee0b0fc2d105fd39d41a4c796536354f0ae2900c\"\n      },\n      \"our_public_signing_key\": \"01d9bf2148748a85c89da5aad8ee0b0fc2d105fd39d41a4c796536354f0ae2900c\",\n      \"round_length\": \"1m 5s 536ms\",\n      \"next_upgrade\": {\n        \"activation_point\": 42,\n        \"protocol_version\": \"2.0.1\"\n      },\n      \"uptime\": \"13s\",\n      \"reactor_state\": \"Initialize\",\n      \"last_progress\": \"1970-01-01T00:00:00.000Z\",\n      \"available_block_range\": {\n        \"low\": 0,\n        \"high\": 0\n      },\n      \"block_sync\": {\n        \"historical\": {\n          \"block_hash\": \"16ddf28e2b3d2e17f4cef36f8b58827eca917af225d139b0c77df3b4a67dc55e\",\n          \"block_height\": 40,\n          \"acquisition_state\": \"have strict finality(40) for: block hash 16dd..c55e\"\n        },\n        \"forward\": {\n          \"block_hash\": \"59907b1e32a9158169c4d89d9ce5ac9164fc31240bfcfb0969227ece06d74983\",\n          \"block_height\": 6701,\n          \"acquisition_state\": \"have block body(6701) for: block hash 5990..4983\"\n        }\n      },\n      \"latest_switch_block_hash\": \"0000000000000000000000000000000000000000000000000000000000000000\"\n    }\n  }\n}}\n```\n\n----------------------------------------\n\nTITLE: Wallet Connection Component\nDESCRIPTION: React component for handling Casper Wallet connection with connect and disconnect functionality.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/docs/developers/dapps/template-frontend.md#2025-04-22_snippet_5\n\nLANGUAGE: jsx\nCODE:\n```\nimport { getProvider } from \"./casper-wallet\";\n\nconst provider = getProvider();\n\nconst Connect = (props) => {\n    return (\n        <>\n            <button onClick={ () => connectToWallet(props) }>Connect Wallet</button>\n            <button onClick={ () => disconnect(props) }>Disconnect</button>\n        </>\n    );\n}\n\nexport default Connect;\n```\n\n----------------------------------------\n\nTITLE: Minting NFT via Direct Entrypoint Using StoredVersionByHash in Bash\nDESCRIPTION: A bash command demonstrating how to mint an NFT by directly invoking the mint entrypoint using StoredVersionByHash, which is more gas-efficient for contracts not using ReverseLookupMode.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/docs/resources/tokens/cep78/using-casper-client.md#2025-04-22_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ncasper-client put-deploy -n http://localhost:11101/rpc --chain-name \"casper-net-1\" \\ --payment-amount 7500000000 \\ -k ~/secret_key.pem \\\n--session-package-hash hash-b3b7a74ae9ef2ea8afc06d6a0830961259605e417e95a53c0cb1ca9737bb0ec7 \\\n--session-entry-point \"mint\" \\\n--session-arg \"token_owner:key='account-hash-e9ff87766a1d2bab2565bfd5799054946200b51b20c3ca7e54a9269e00fe7cfb'\" \\\n--session-arg \"token_meta_data:string='{\\\"name\\\": \\\"John Doe\\\",\\\"token_uri\\\": \\\"https:\\/\\/www.barfoo.com\\\",\\\"checksum\\\": \\\"940bffb3f2bba35f84313aa26da09ece3ad47045c6a1292c2bbd2df4ab1a55fb\\\"}'\"\n```\n\n----------------------------------------\n\nTITLE: Rotating Validators in Casper Private Network using Shell\nDESCRIPTION: Command to generate new validator configurations for the next era. This is used during network upgrades to modify the validator set by specifying which validators will be included in the next era.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/versioned_docs/version-2.0.0/operators/setup-network/create-private.md#2025-04-22_snippet_9\n\nLANGUAGE: sh\nCODE:\n```\nglobal-state-update-gen validators \\\n  --data-dir $DATA_DIR/global_state \\\n  --state-hash $STATE_ROOT_HASH \\\n  –-validator $PUBLIC_KEY_HEX,$STAKE \\\n  –-validator $PUBLIC_KEY_HEX,$STAKE\n```\n\n----------------------------------------\n\nTITLE: Defining Transaction Target Schema - JSON - JSON\nDESCRIPTION: This snippet provides the schema for a transaction execution target, which can be a native operation, a stored entity or package, or supplied Wasm module bytes. The schema uses 'oneOf' to support polymorphism, with additional object structures for stored entities and sessions, guaranteeing all necessary properties are specified with strict validation. Inputs vary based on the target type, supporting extensibility for multiple transaction execution paths.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/condor/jsonrpc-comp/rpc-2.0/schema/components.json.md#2025-04-22_snippet_19\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"description\": \"Execution target of a Transaction.\",\n    \"oneOf\": [\n        {\n            \"description\": \"The execution target is a native operation (e.g. a transfer).\",\n            \"type\": \"string\",\n            \"enum\": [\n                \"Native\"\n            ]\n        },\n        {\n            \"description\": \"The execution target is a stored entity or package.\",\n            \"type\": \"object\",\n            \"required\": [\n                \"Stored\"\n            ],\n            \"properties\": {\n                \"Stored\": {\n                    \"type\": \"object\",\n                    \"required\": [\n                        \"id\",\n                        \"runtime\"\n                    ],\n                    \"properties\": {\n                        \"id\": {\n                            \"description\": \"The identifier of the stored execution target.\",\n                            \"allOf\": [\n                                {\n                                    \"$ref\": \"#/components/schemas/TransactionInvocationTarget\"\n                                }\n                            ]\n                        },\n                        \"runtime\": {\n                            \"description\": \"The execution runtime to use.\",\n                            \"allOf\": [\n                                {\n                                    \"$ref\": \"#/components/schemas/TransactionRuntime\"\n                                }\n                            ]\n                        }\n                    },\n                    \"additionalProperties\": false\n                }\n            },\n            \"additionalProperties\": false\n        },\n        {\n            \"description\": \"The execution target is the included module bytes, i.e. compiled Wasm.\",\n            \"type\": \"object\",\n            \"required\": [\n                \"Session\"\n            ],\n            \"properties\": {\n                \"Session\": {\n                    \"type\": \"object\",\n                    \"required\": [\n                        \"kind\",\n                        \"module_bytes\",\n                        \"runtime\"\n                    ],\n                    \"properties\": {\n                        \"kind\": {\n                            \"description\": \"The kind of session.\",\n                            \"allOf\": [\n                                {\n                                    \"$ref\": \"#/components/schemas/TransactionSessionKind\"\n                                }\n                            ]\n                        },\n                        \"module_bytes\": {\n                            \"description\": \"The compiled Wasm.\",\n                            \"allOf\": [\n                                {\n                                    \"$ref\": \"#/components/schemas/Bytes\"\n                                }\n                            ]\n                        },\n                        \"runtime\": {\n                            \"description\": \"The execution runtime to use.\",\n                            \"allOf\": [\n                                {\n                                    \"$ref\": \"#/components/schemas/TransactionRuntime\"\n                                }\n                            ]\n                        }\n                    },\n                    \"additionalProperties\": false\n                }\n            },\n            \"additionalProperties\": false\n        }\n    ]\n}\n```\n\n----------------------------------------\n\nTITLE: Querying Global State API Request and Response - Casper JSON Specification - JSON\nDESCRIPTION: This snippet defines the JSON schema for the \"query_global_state\" RPC endpoint on the Casper network, outlining its parameters, expected result structure, and a full worked example input and output. Dependencies include knowledge of RPC schemas, specifically referencing objects like \"GlobalStateIdentifier\", \"StoredValue\", and \"JsonBlockHeader\". Key parameters are \"key\" (a base key in global state), \"state_identifier\" (defining the root from which to query; block hash or state root hash), and \"path\" (an array denoting path components to traverse from the key). The response details block information, Merkle proof, and the returned stored value; users must input valid properly-formatted keys and valid state identifiers.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/condor/jsonrpc-comp/rpc-1.5/query_global_state.json.md#2025-04-22_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"name\": \"query_global_state\",\n  \"summary\": \"a query to global state using either a Block hash or state root hash\",\n  \"params\": [\n    {\n      \"name\": \"key\",\n      \"schema\": {\n        \"description\": \"`casper_types::Key` as formatted string.\",\n        \"type\": \"string\"\n      },\n      \"required\": true\n    },\n    {\n      \"name\": \"state_identifier\",\n      \"schema\": {\n        \"description\": \"The identifier used for the query. If none is passed the tip of the chain will be used.\",\n        \"anyOf\": [\n          {\n            \"$ref\": \"#/components/schemas/GlobalStateIdentifier\"\n          },\n          {\n            \"type\": \"null\"\n          }\n        ]\n      },\n      \"required\": false\n    },\n    {\n      \"name\": \"path\",\n      \"schema\": {\n        \"description\": \"The path components starting from the key as base.\",\n        \"default\": [],\n        \"type\": \"array\",\n        \"items\": {\n          \"type\": \"string\"\n        }\n      },\n      \"required\": false\n    }\n  ],\n  \"result\": {\n    \"name\": \"query_global_state_result\",\n    \"schema\": {\n      \"description\": \"Result for \\\"query_global_state\\\" RPC response.\",\n      \"type\": \"object\",\n      \"required\": [\n        \"api_version\",\n        \"merkle_proof\",\n        \"stored_value\"\n      ],\n      \"properties\": {\n        \"api_version\": {\n          \"description\": \"The RPC API version.\",\n          \"type\": \"string\"\n        },\n        \"block_header\": {\n          \"description\": \"The block header if a Block hash was provided.\",\n          \"anyOf\": [\n            {\n              \"$ref\": \"#/components/schemas/JsonBlockHeader\"\n            },\n            {\n              \"type\": \"null\"\n            }\n          ]\n        },\n        \"stored_value\": {\n          \"description\": \"The stored value.\",\n          \"$ref\": \"#/components/schemas/StoredValue\"\n        },\n        \"merkle_proof\": {\n          \"description\": \"The Merkle proof.\",\n          \"type\": \"string\"\n        }\n      },\n      \"additionalProperties\": false\n    }\n  },\n  \"examples\": [\n    {\n      \"name\": \"query_global_state_example\",\n      \"params\": [\n        {\n          \"name\": \"state_identifier\",\n          \"value\": {\n            \"BlockHash\": \"13c2d7a68ecdd4b74bf4393c88915c836c863fc4bf11d7f2bd930a1bbccacdcb\"\n          }\n        },\n        {\n          \"name\": \"key\",\n          \"value\": \"deploy-af684263911154d26fa05be9963171802801a0b6aff8f199b7391eacb8edc9e1\"\n        },\n        {\n          \"name\": \"path\",\n          \"value\": []\n        }\n      ],\n      \"result\": {\n        \"name\": \"query_global_state_example_result\",\n        \"value\": {\n          \"api_version\": \"1.5.6\",\n          \"block_header\": {\n            \"parent_hash\": \"0707070707070707070707070707070707070707070707070707070707070707\",\n            \"state_root_hash\": \"0808080808080808080808080808080808080808080808080808080808080808\",\n            \"body_hash\": \"cd502c5393a3c8b66d6979ad7857507c9baf5a8ba16ba99c28378d3a970fff42\",\n            \"random_bit\": true,\n            \"accumulated_seed\": \"ac979f51525cfd979b14aa7dc0737c5154eabe0db9280eceaa8dc8d2905b20d5\",\n            \"era_end\": {\n              \"era_report\": {\n                \"equivocators\": [\n                  \"013b6a27bcceb6a42d62a3a8d02a6f0d73653215771de243a63ac048a18b59da29\"\n                ],\n                \"rewards\": [\n                  {\n                    \"validator\": \"018a88e3dd7409f195fd52db2d3cba5d72ca6709bf1d94121bf3748801b40f6f5c\",\n                    \"amount\": 1000\n                  }\n                ],\n                \"inactive_validators\": [\n                  \"018139770ea87d175f56a35466c34c7ecccb8d8a91b4ee37a25df60f5b8fc9b394\"\n                ]\n              },\n              \"next_era_validator_weights\": [\n                {\n                  \"validator\": \"016e7a1cdd29b0b78fd13af4c5598feff4ef2a97166e3ca6f2e4fbfccd80505bf1\",\n                  \"weight\": \"456\"\n                },\n                {\n                  \"validator\": \"018a875fff1eb38451577acd5afee405456568dd7c89e090863a0557bc7af49f17\",\n                  \"weight\": \"789\"\n                },\n                {\n                  \"validator\": \"01d9bf2148748a85c89da5aad8ee0b0fc2d105fd39d41a4c796536354f0ae2900c\",\n                  \"weight\": \"123\"\n                }\n              ]\n            },\n            \"timestamp\": \"2020-11-17T00:39:24.072Z\",\n            \"era_id\": 1,\n            \"height\": 10,\n            \"protocol_version\": \"1.0.0\"\n          },\n          \"stored_value\": {\n            \"Account\": {\n              \"account_hash\": \"account-hash-e94daaff79c2ab8d9c31d9c3058d7d0a0dd31204a5638dc1451fa67b2e3fb88c\",\n              \"named_keys\": [],\n              \"main_purse\": \"uref-09480c3248ef76b603d386f3f4f8a5f87f597d4eaffd475433f861af187ab5db-007\",\n              \"associated_keys\": [\n                {\n                  \"account_hash\": \"account-hash-e94daaff79c2ab8d9c31d9c3058d7d0a0dd31204a5638dc1451fa67b2e3fb88c\",\n                  \"weight\": 1\n                }\n              ],\n              \"action_thresholds\": {\n                \"deployment\": 1,\n                \"key_management\": 1\n              }\n            }\n          },\n          \"merkle_proof\": \"01000000006ef2e0949ac76e55812421f755abe129b6244fe7168b77f47a72536147614625016ef2e0949ac76e55812421f755abe129b6244fe7168b77f47a72536147614625000000003529cde5c621f857f75f3810611eb4af3f998caaa9d4a3413cf799f99c67db0307010000006ef2e0949ac76e55812421f755abe129b6244fe7168b77f47a7253614761462501010102000000006e06000000000074769d28aac597a36a03a932d4b43e4f10bf0403ee5c41dd035102553f5773631200b9e173e8f05361b681513c14e25e3138639eb03232581db7557c9e8dbbc83ce94500226a9a7fe4f2b7b88d5103a4fc7400f02bf89c860c9ccdd56951a2afe9be0e0267006d820fb5676eb2960e15722f7725f3f8f41030078f8b2e44bf0dc03f71b176d6e800dc5ae9805068c5be6da1a90b2528ee85db0609cc0fb4bd60bbd559f497a98b67f500e1e3e846592f4918234647fca39830b7e1e6ad6f5b7a99b39af823d82ba1873d000003000000010186ff500f287e9b53f823ae1582b1fa429dfede28015125fd233a31ca04d5012002015cc42669a55467a1fdf49750772bfc1aed59b9b085558eb81510e9b015a7c83b0301e3cf4a34b1db6bfa58808b686cb8fe21ebe0c1bcbcee522649d2b135fe510fe3\"\n        }\n      }\n    }\n  ]\n}\n\n```\n\n----------------------------------------\n\nTITLE: Installing the CEP-18 Test Contract with Casper Client (Bash)\nDESCRIPTION: This Bash snippet shows how to deploy the CEP-18 test/helper contract with the Casper client, which is used for querying balances and allowances. Like the main contract deployment, this command requires a valid Wasm file, secret key, chain name, and node address, but omits session arguments. The helper contract assists with reading various aspects of token state. The output is a contract deploy for the test package; ensure all paths and payment arguments are properly provided.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/docs/resources/tokens/cep18/quickstart-guide.md#2025-04-22_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ncasper-client put-deploy -n http://<NODE IP>:<PORT> \\\n--chain-name <CHAIN NAME> \\\n--secret-key ~/casper/demo/user_a/secret_key.pem \\\n--session-path ~/casper/demo/cep18_test_contract.wasm \\\n--payment-amount 50000000000\n```\n\n----------------------------------------\n\nTITLE: Test: Failed Contract Installation with Unauthorized Key (Rust)\nDESCRIPTION: This test executes a deploy signed by both a default account and an unauthorized account, expecting deployment failure due to Casper's associated keys rules. The snippet builds the deploy, executes it, and asserts that an authorization failure error is returned. It demonstrates enforcement of the rule that authorization keys must be a subset of associated keys. Dependencies are the Casper test builder and error handling APIs.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/docs/resources/advanced/list-auth-keys-tutorial.md#2025-04-22_snippet_7\n\nLANGUAGE: rust\nCODE:\n```\nlet session_code = PathBuf::from(CONTRACT_WASM);\nlet session_args = RuntimeArgs::new();\n\nlet deploy_item = DeployItemBuilder::new()\n    .with_empty_payment_bytes(runtime_args! {ARG_AMOUNT => *DEFAULT_PAYMENT})\n    .with_authorization_keys(&[*DEFAULT_ACCOUNT_ADDR, account_addr_1])\n    .with_address(*DEFAULT_ACCOUNT_ADDR)\n    .with_session_code(session_code, session_args)\n    .build();\n\nlet execute_request = ExecuteRequestBuilder::from_deploy_item(deploy_item).build();\nbuilder.exec(execute_request).commit().expect_failure();\nlet error = builder.get_error().expect(\"must have error\");\nassert_eq!(error.to_string(), \"Authorization failure: not authorized.\");\n```\n\n----------------------------------------\n\nTITLE: Decompressing Casper Node Database with Zstandard\nDESCRIPTION: Instructions for decompressing a Casper node database using Zstandard's decompression command. Emphasizes the need for using consistent long-distance matching settings as used during compression. The output can be used with tar to expand contents in the target directory.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/versioned_docs/version-1.5.X/operators/maintenance/archiving-and-restoring.md#2025-04-22_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nzstd -d\n```\n\nLANGUAGE: bash\nCODE:\n```\nzstd -cd --long=31 <.tar.zst file>\n```\n\nLANGUAGE: bash\nCODE:\n```\nzstd -cd --long=31 <.tar.zst file> | sudo -u casper tar -xv\n```\n\nLANGUAGE: bash\nCODE:\n```\nsudo /etc/casper/node_util.py fix_permissions\n```\n\n----------------------------------------\n\nTITLE: Account Structure After CEP-18 Contract Installation (JSON)\nDESCRIPTION: This JSON snippet displays the structure of an account after both the CEP-18 token contract and the cep18_test_contract have been installed. It contains the account hash, named keys for the installed contracts, main purse reference, associated keys, and action thresholds. This representation serves as an output reference for users to verify contract hashes and configuration post-deployment. Limitations include static example hashes—replace with your actual contract and account data in practice.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/docs/resources/tokens/cep18/quickstart-guide.md#2025-04-22_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n{\n\t\"src\": {\n\t\"Account\": {\n\t\"_accountHash\": \"account-hash-303c0f8208220fe9a4de40e1ada1d35fdd6c678877908f01fddb2a56502d67fd\",\n\t\"namedKeys\": [\n\t\t{\n\t\t\"name\": \"cep18_test_contract\",\n\t\t\"key\": \"hash-999326ca8408dfd37da023eb6fd82f174151be64f83f9fb837632a0d69fd4c7e\"\n\t\t},\n\t\t{\n\t\t\"name\": \"cep18_token_contract\",\n\t\t\"key\": \"hash-b568f50a64acc8bbe43462ffe243849a88111060b228dacb8f08d42e26985180\"\n\t\t}\n\t],\n\t\"mainPurse\": \"uref-6c062525debdee18d5cad083ca530fcb65ef8741574fba4c97673f4ed00093f7-007\",\n\t\"associatedKeys\": [\n\t\t{\n\t\t\"accountHash\": \"account-hash-303c0f8208220fe9a4de40e1ada1d35fdd6c678877908f01fddb2a56502d67fd\",\n\t\t\"weight\": 1\n\t\t}\n\t],\n\t\"actionThresholds\": {\n\t\t\"deployment\": 1,\n\t\t\"keyManagement\": 1\n\t\t}\n\t\t}\n\t}\n}\n```\n\n----------------------------------------\n\nTITLE: Replaying Casper Node Event Stream\nDESCRIPTION: Command to replay the event stream from a specific event ID. If ID is 0 or already purged, replays all cached events. Requires host IP, port, and event ID.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/versioned_docs/version-2.0.0/operators/setup/node-events.md#2025-04-22_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ncurl -sN http://HOST:PORT/events?start_from=ID\n```\n\n----------------------------------------\n\nTITLE: Example Transfer Details Query with Verbose Output\nDESCRIPTION: A concrete example of querying a specific transfer's details using its hash, with the verbose flag to see the complete JSON-RPC request and response for detailed inspection.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/versioned_docs/version-2.0.0/developers/cli/transfers/verify-transfer.md#2025-04-22_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\ncasper-client query-global-state -v \\\n--id 3 \\\n--node-address https://node.testnet.casper.network  \\\n--state-root-hash fdb1474d441ec0fcbf2e088f1630dbf98d3bcf7f7a7fe298303797f35b8cb4e1 \\\n--key transfer-ab3e11fd612ccf9ddf5ddb3e5c0b3d3b5e5c0921fd1b45e8c657a63f01d6adcb\n```\n\n----------------------------------------\n\nTITLE: Executing Token Transfer Command - Casper CLI\nDESCRIPTION: Command structure for transferring CSPR tokens between accounts using the Casper command-line client. Requires specifying transfer details including amount in Motes, chain name, and target account.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/docs/developers/cli/transfers/direct-token-transfer.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ncasper-client transfer \\\n--id <ID> \\\n--transfer-id <TRANSFER_ID> \\\n--node-address [NODE_SERVER_ADDRESS]  \\\n--amount [AMOUNT_TO_TRANSFER] \\\n--secret-key [KEY_PATH]/secret_key.pem \\\n--chain-name [CHAIN_NAME] \\\n--target-account [TARGET_PUBLIC_KEY_HEX] \\\n--payment-amount [PAYMENT_AMOUNT_IN_MOTES]\n```\n\n----------------------------------------\n\nTITLE: Cloning the casper-node Repository\nDESCRIPTION: Command to clone the casper-node repository from GitHub into your working directory.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/versioned_docs/version-2.0.0/developers/dapps/setup-nctl.md#2025-04-22_snippet_14\n\nLANGUAGE: bash\nCODE:\n```\n$ git clone https://github.com/casper-network/casper-node\n```\n\n----------------------------------------\n\nTITLE: Defining Deploy, Auction, Bid, and Related Models - JSON Schema - JSON\nDESCRIPTION: Defines JSON schemas for blockchain entities such as DeployInfo, EraInfo, Bid, Withdraw, and Unbonding. Each schema contains a description, required properties, property types, and references to other components. These are used to validate and structure domain objects for Casper Network operations, ensuring data validity and consistency.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/condor/jsonrpc-comp/rpc-1.5/schema/components.json.md#2025-04-22_snippet_41\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"description\": \"A record of a deploy\",\n    \"type\": \"object\",\n    \"required\": [\n        \"DeployInfo\"\n    ],\n    \"properties\": {\n        \"DeployInfo\": {\n            \"$ref\": \"#/components/schemas/DeployInfo\"\n        }\n    },\n    \"additionalProperties\": false\n},\n{\n    \"description\": \"Auction metadata\",\n    \"type\": \"object\",\n    \"required\": [\n        \"EraInfo\"\n    ],\n    \"properties\": {\n        \"EraInfo\": {\n            \"$ref\": \"#/components/schemas/EraInfo\"\n        }\n    },\n    \"additionalProperties\": false\n},\n{\n    \"description\": \"A bid\",\n    \"type\": \"object\",\n    \"required\": [\n        \"Bid\"\n    ],\n    \"properties\": {\n        \"Bid\": {\n            \"$ref\": \"#/components/schemas/Bid\"\n        }\n    },\n    \"additionalProperties\": false\n},\n{\n    \"description\": \"A withdraw\",\n    \"type\": \"object\",\n    \"required\": [\n        \"Withdraw\"\n    ],\n    \"properties\": {\n        \"Withdraw\": {\n            \"type\": \"array\",\n            \"items\": {\n                \"$ref\": \"#/components/schemas/WithdrawPurse\"\n            }\n        }\n    },\n    \"additionalProperties\": false\n},\n{\n    \"description\": \"A collection of unbonding purses\",\n    \"type\": \"object\",\n    \"required\": [\n        \"Unbonding\"\n    ],\n    \"properties\": {\n        \"Unbonding\": {\n            \"type\": \"array\",\n            \"items\": {\n                \"$ref\": \"#/components/schemas/UnbondingPurse\"\n            }\n        }\n    },\n    \"additionalProperties\": false\n}\n```\n\n----------------------------------------\n\nTITLE: Updating config.toml with Trusted Hash using Bash\nDESCRIPTION: Sets shell variables `NODE_ADDR` (to a Mainnet RPC endpoint) and `PROTOCOL` (to the desired protocol version). It then uses `casper-client get-block`, `jq`, and `sed` to fetch the latest block hash from the specified node, extract the hash, and insert it as the `trusted_hash` value into the `config.toml` file corresponding to the specified protocol version.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/versioned_docs/version-1.5.X/operators/setup/install-node.md#2025-04-22_snippet_12\n\nLANGUAGE: bash\nCODE:\n```\nNODE_ADDR=https://rpc.mainnet.casperlabs.io\nPROTOCOL=1_5_2\nsudo sed -i \"/trusted_hash =/c\\trusted_hash = '$(casper-client get-block --node-address $NODE_ADDR | jq -r .result.block.hash | tr -d '\\n')'\" /etc/casper/$PROTOCOL/config.toml\n```\n\n----------------------------------------\n\nTITLE: Minting NFT using Client Wasm\nDESCRIPTION: A complete bash command for minting an NFT using the provided client Wasm. This example specifies the contract hash, collection name, token owner, and metadata for the NFT to be minted.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/versioned_docs/version-2.0.0/resources/tokens/cep78/using-casper-client.md#2025-04-22_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\ncasper-client put-deploy -n http://localhost:11101/rpc --chain-name \"casper-net-1\" \\\n--payment-amount 5000000000 \\\n-k ~/casper/casper-node/utils/nctl/assets/net-1/nodes/node-1/keys/secret_key.pem \\\n--session-path ~/casper/enhanced-nft/client/mint_session/target/wasm32-unknown-unknown/release/mint_call.wasm \\\n--session-arg \"nft_contract_hash:key='hash-206339c3deb8e6146974125bb271eb510795be6f250c21b1bd4b698956669f95'\" \\\n--session-arg \"collection_name:string='cep78_<collection_name>'\"` \\\n--session-arg \"token_owner:key='account-hash-e9ff87766a1d2bab2565bfd5799054946200b51b20c3ca7e54a9269e00fe7cfb'\"  \\\n--session-arg \"token_meta_data:string='{\\\"name\\\": \\\"John Doe\\\",\\\"token_uri\\\": \\\"https:\\\\/\\\\/www.barfoo.com\\\",\\\"checksum\\\": \\\"940bffb3f2bba35f84313aa26da09ece3ad47045c6a1292c2bbd2df4ab1a55fb\\\"}'\"\n```\n\n----------------------------------------\n\nTITLE: Listing Casper Primitive CLTypes\nDESCRIPTION: This snippet lists the primitive CLTypes available in the Casper Network. These types represent fundamental data units that can be stored and manipulated within smart contracts. They include various integer sizes, booleans, units, strings, keys, URefs, and public keys.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/versioned_docs/version-1.5.X/developers/json-rpc/types_cl.md#2025-04-22_snippet_0\n\nLANGUAGE: text\nCODE:\n```\n`Bool`\n`I32`\n`I64`\n`U8`\n`U32`\n`U64`\n`U128`\n`U256`\n`U512`\n`Unit`\n`String`\n`Key`\n`URef`\n`PublicKey`\n`Any`\n```\n\n----------------------------------------\n\nTITLE: Defining Bytecode Type Schema in JSON\nDESCRIPTION: This JSON schema defines the possible types for bytecode. It uses the `oneOf` keyword to specify that the value must be one of the enumerated string values: \"Empty\" (representing empty bytecode) or \"V1CasperWasm\" (representing bytecode for the version 1 Casper execution engine). This structure is common in API specifications (like OpenAPI) or configuration files.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/condor/jsonrpc-comp/rpc-2.0/schema/ByteCodeKind.json.md#2025-04-22_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"description\": \"The type of Byte code.\",\n    \"oneOf\": [\n        {\n            \"description\": \"Empty byte code.\",\n            \"type\": \"string\",\n            \"enum\": [\n                \"Empty\"\n            ]\n        },\n        {\n            \"description\": \"Byte code to be executed with the version 1 Casper execution engine.\",\n            \"type\": \"string\",\n            \"enum\": [\n                \"V1CasperWasm\"\n            ]\n        }\n    ]\n} \n```\n\n----------------------------------------\n\nTITLE: Checking Staged Casper Node Protocols (Bash)\nDESCRIPTION: This command allows users to view the list of staged and unstaged protocol versions without initiating the staging process. It uses the `node_util.py` script with the `check_protocols` command and the `casper.conf` file, executed as the `casper` user.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/versioned_docs/version-1.5.X/operators/setup/upgrade.md#2025-04-22_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nsudo -u casper /etc/casper/node_util.py check_protocols casper.conf\n```\n\n----------------------------------------\n\nTITLE: Describing BlockSignaturesV2 Structure (Casper Network)\nDESCRIPTION: Details the current BlockSignaturesV2 structure, used after the Condor release. It includes the block hash, block height (u64), era ID (u64), chain name hash, and proofs (a BTreeMap of public keys to signatures, prefixed with a u32 count). The description specifies the serialization format for each field.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/versioned_docs/version-2.0.0/concepts/serialization/types.md#2025-04-22_snippet_2\n\nLANGUAGE: Text\nCODE:\n```\n### BlockSignaturesV2 {#block-signatures-v2}\n\n`BlockSignaturesV2` is the current version of `BlockSignatures` that applies to blocks created after the Condor release. The structure is as follows:\n\n-   [`block_hash`](./structures.md#block-hash): The block hash of the associated block. It serializes as the byte representation of the hash itself.\n\n-   `block_height`: The block height. It serializes as a single `u64` value.\n\n-   [`era_id`](#eraid): The era ID in which this block was created. It serializes as a single [`u64` value](./primitives.md#clvalue-numeric).\n\n-   [`chain_name_hash`](#chain-name-digest): The hash of the chain name of the associated block. It serializes as the byte representation of the hash itself.\n\n-   `proofs`: The proofs of the block, a collection of validator's signatures of the block hash. It serializes as a `BTreeMap` where the first 4 bytes represent a `u32` value describing the number of [`PublicKeys`](#publickey) and [`signatures`](#signature) held within. The remainder consists of a repeating pattern of serialized public keys and signatures of the length dictated by the first four bytes.\n```\n\n----------------------------------------\n\nTITLE: EntityKind Structure Implementation\nDESCRIPTION: Defines the serialization format for different types of packages in the Casper Network - System (0), Account (1), and SmartContract (2).\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/docs/concepts/serialization/types.md#2025-04-22_snippet_0\n\nLANGUAGE: rust\nCODE:\n```\nenum EntityKind {\n    System(SystemEntityType),     // u8(0) + SystemEntityType\n    Account(AccountHash),        // u8(1) + AccountHash\n    SmartContract(Runtime)      // u8(2) + TransactionRuntime\n}\n```\n\n----------------------------------------\n\nTITLE: Querying CEP-18 Contract Arguments on Casper Network\nDESCRIPTION: This command demonstrates how to query a specific named key ('name') in the CEP-18 contract. It uses the state root hash obtained earlier and the account hash that performed the deploy.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/versioned_docs/version-2.0.0/resources/beginner/cep18.md#2025-04-22_snippet_10\n\nLANGUAGE: bash\nCODE:\n```\ncasper-client query-global-state --node-address http://78.46.32.13:7777 \\\n--state-root-hash 7706d906fce25dcdadb2a9453f5243a6c72c4444e6c826cf2941157333a48705 \\\n--key account-hash-ee57bb3b39eb66b74a1dcf12f3f0e7d8e906e34b11f85dc05497bf33fbf3a1f9 \\\n-q \"cep18_contract_hash_CHF Coin/name\"\n```\n\n----------------------------------------\n\nTITLE: Defining a Bid Object Schema in JSON\nDESCRIPTION: This JSON schema defines the structure for an object representing a bid associated with a public key. It mandates the presence of 'public_key' and 'bid' properties, referencing '#/components/schemas/PublicKey' and '#/components/schemas/Bid' respectively for their detailed structure definitions. This schema ensures data consistency for bid-related information.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/condor/jsonrpc-comp/rpc-2.0/schema/PublicKeyAndBid.json.md#2025-04-22_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"description\": \"A bid associated with the given public key.\",\n    \"type\": \"object\",\n    \"required\": [\n        \"bid\",\n        \"public_key\"\n    ],\n    \"properties\": {\n        \"public_key\": {\n            \"description\": \"The public key of the bidder.\",\n            \"allOf\": [\n                {\n                    \"$ref\": \"#/components/schemas/PublicKey\"\n                }\n            ]\n        },\n        \"bid\": {\n            \"description\": \"The bid details.\",\n            \"allOf\": [\n                {\n                    \"$ref\": \"#/components/schemas/Bid\"\n                }\n            ]\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining EntryPoint Schema in JSON for Casper Network API\nDESCRIPTION: JSON schema definition for the EntryPoint object in Casper Network. It describes the type signature of a method, including name, arguments, return type, access control, and entry point type.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/condor/jsonrpc-comp/rpc-2.0/schema/components.json.md#2025-04-22_snippet_48\n\nLANGUAGE: json\nCODE:\n```\n\"EntryPoint\": {\n    \"description\": \"Type signature of a method. Order of arguments matter since can be referenced by index as well as name.\",\n    \"type\": \"object\",\n    \"required\": [\n        \"access\",\n        \"args\",\n        \"entry_point_type\",\n        \"name\",\n        \"ret\"\n    ],\n    \"properties\": {\n        \"name\": {\n            \"type\": \"string\"\n        },\n        \"args\": {\n            \"type\": \"array\",\n            \"items\": {\n                \"$ref\": \"#/components/schemas/Parameter\"\n            }\n        },\n        \"ret\": {\n            \"$ref\": \"#/components/schemas/CLType\"\n        },\n        \"access\": {\n            \"$ref\": \"#/components/schemas/EntryPointAccess\"\n        },\n        \"entry_point_type\": {\n            \"$ref\": \"#/components/schemas/EntryPointType\"\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: JSON Schema Definition for EraInfo and SeigniorageAllocation\nDESCRIPTION: Defines the schema for EraInfo containing auction metadata and seigniorage allocations. Includes detailed structures for validator and delegator allocations.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/condor/jsonrpc-comp/rpc-2.0/schema/components.json.md#2025-04-22_snippet_30\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"EraInfo\": {\n    \"description\": \"Auction metadata. Intended to be recorded at each era.\",\n    \"type\": \"object\",\n    \"required\": [\n      \"seigniorage_allocations\"\n    ],\n    \"properties\": {\n      \"seigniorage_allocations\": {\n        \"type\": \"array\",\n        \"items\": {\n          \"$ref\": \"#/components/schemas/SeigniorageAllocation\"\n        }\n      }\n    },\n    \"additionalProperties\": false\n  },\n  \"SeigniorageAllocation\": {\n    \"description\": \"Information about a seigniorage allocation\",\n    \"oneOf\": [\n      {\n        \"description\": \"Info about a seigniorage allocation for a validator\",\n        \"type\": \"object\",\n        \"required\": [\n          \"Validator\"\n        ],\n        \"properties\": {\n          \"Validator\": {\n            \"type\": \"object\",\n            \"required\": [\n              \"amount\",\n              \"validator_public_key\"\n            ],\n            \"properties\": {\n              \"validator_public_key\": {\n                \"description\": \"Validator's public key\",\n                \"allOf\": [\n                  {\n                    \"$ref\": \"#/components/schemas/PublicKey\"\n                  }\n                ]\n              },\n              \"amount\": {\n                \"description\": \"Allocated amount\",\n                \"allOf\": [\n                  {\n                    \"$ref\": \"#/components/schemas/U512\"\n                  }\n                ]\n              }\n            },\n            \"additionalProperties\": false\n          }\n        },\n        \"additionalProperties\": false\n      }\n    ]\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Submitting a Deploy Using Casper Client CLI - Bash\nDESCRIPTION: This Bash snippet illustrates how to invoke the casper-client tool to submit a deploy (e.g., a smart contract) to a Casper network. The command uses placeholder parameters for node address, chain name, secret key path, payment amount, and session file, reinforcing the importance of flexible scripting practices. Required dependencies include the 'casper-client' CLI and appropriate access rights to the node and secret key; inputs are provided via command line flags, and the output will be the result of the deploy submission.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/README/STANDARDS.md#2025-04-22_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\ncasper-client put-deploy \\\n    --node-address [NODE_SERVER_ADDRESS] \\\n    --chain-name [CHAIN_NAME] \\\n    --secret-key [KEY_PATH]/secret_key.pem \\\n    --payment-amount [PAYMENT_AMOUNT_IN_MOTES] \\\n    --session-path [PATH]/[FILE_NAME].wasm\n```\n\n----------------------------------------\n\nTITLE: Sourcing Cargo Environment Variables - Bash\nDESCRIPTION: Updates the current shell session with environment variables for Rust tools immediately after installation. Ensures cargo and rustc commands are available without needing to restart the terminal.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/versioned_docs/version-1.5.X/developers/prerequisites.md#2025-04-22_snippet_9\n\nLANGUAGE: bash\nCODE:\n```\nsource $HOME/.cargo/env\n```\n\n----------------------------------------\n\nTITLE: Generating Account Hash from Public Key\nDESCRIPTION: Command to generate the account hash for a public key using the Casper client. The public key can be provided as a formatted string or as a path to the public_key_hex or public_key.pem file.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/docs/concepts/accounts-and-keys.md#2025-04-22_snippet_11\n\nLANGUAGE: bash\nCODE:\n```\ncasper-client account-address --public-key <FORMATTED STRING or PATH>\n```\n\n----------------------------------------\n\nTITLE: Implementing updateMessage Function for Contract Call (JavaScript)\nDESCRIPTION: This function constructs and sends a deploy to call the `update_message` entrypoint of a specified smart contract. It initializes `CasperClient`, sets the contract hash, prepares runtime arguments with the user's message, builds the deploy using `contract.callEntrypoint`, serializes it, requests user signature via Casper Wallet (`provider.sign`), and sends the signed deploy to a backend endpoint (`/sendDeploy`) using `axios`. It requires the user's public key passed via props.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/docs/developers/dapps/template-frontend.md#2025-04-22_snippet_10\n\nLANGUAGE: javascript\nCODE:\n```\nconst NODE_URL = \"http://65.108.127.242:7777/rpc\";\nconst NETWORK_NAME = \"casper-test\"; // \"casper\" for mainnet\nconst CONTRACT_HASH = \"hash-75143aa708275b7dead20ac2cc06c1c3eccff4ffcf1eb9aebb8cce7c35cea041\";\n\nconst updateMessage = (props, message) => {\n    const casperClient = new CasperClient(NODE_URL);\n    const contract = new Contracts.Contract(casperClient);\n    contract.setContractHash(CONTRACT_HASH);\n    const runtimeArguments = RuntimeArgs.fromMap({\n        \"message\": CLValueBuilder.string(message)\n    });\n    const deploy = contract.callEntrypoint(\n        \"update_message\",\n        runtimeArguments,\n        CLPublicKey.fromHex(props.publicKey),\n        NETWORK_NAME,\n        \"1000000000\", // 1 CSPR (10^9 Motes)\n    );\n    const deployJSON = DeployUtil.deployToJson(deploy);\n    provider.sign(JSON.stringify(deployJSON), props.publicKey).then((signedDeploy) => { // Initiates sign request\n        axios.post(\"/sendDeploy\", signedDeploy, {\n            headers: {\n                'Content-Type': 'application/json'\n            }\n        }).then((response) => {\n            alert(response.data);\n        }).catch((error) => {\n            console.error(error.message);\n        });\n    }).catch((error) => {\n        console.error(error.message);\n    });\n}\n```\n\n----------------------------------------\n\nTITLE: Querying Final 'count' Value\nDESCRIPTION: This command queries the global state for the 'counter/count' value using the final state root hash. This verifies the outcome of running the `counter-call.wasm` session code, checking if the count has been incremented as expected (e.g., to 2 if incremented twice).\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/docs/resources/beginner/counter-testnet/walkthrough.md#2025-04-22_snippet_17\n\nLANGUAGE: bash\nCODE:\n```\ncasper-client query-global-state --node-address http://[NODE_IP]:7777 \\\n    --state-root-hash [STATE_ROOT_HASH]\n    --key [ACCOUNT_HASH] -q \"counter/count\"\n```\n\n----------------------------------------\n\nTITLE: Defining JSON Schema for Versioned Transfer Wrapper\nDESCRIPTION: This JSON schema defines a versioned wrapper for transfer objects, supporting both version 1 and version 2 transfers. It uses the oneOf validator to allow either format, with each version referencing its corresponding schema definition through the $ref keyword.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/condor/jsonrpc-comp/rpc-2.0/schema/Transfer.json.md#2025-04-22_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"description\": \"A versioned wrapper for a transfer.\",\n    \"oneOf\": [\n        {\n            \"description\": \"A version 1 transfer.\",\n            \"type\": \"object\",\n            \"required\": [\n                \"Version1\"\n            ],\n            \"properties\": {\n                \"Version1\": {\n                    \"$ref\": \"#/components/schemas/TransferV1\"\n                }\n            },\n            \"additionalProperties\": false\n        },\n        {\n            \"description\": \"A version 2 transfer.\",\n            \"type\": \"object\",\n            \"required\": [\n                \"Version2\"\n            ],\n            \"properties\": {\n                \"Version2\": {\n                    \"$ref\": \"#/components/schemas/TransferV2\"\n                }\n            },\n            \"additionalProperties\": false\n        }\n    ]\n}\n```\n\n----------------------------------------\n\nTITLE: Example of Redelegating Tokens Using Wasm on a Private Network in Bash\nDESCRIPTION: This example demonstrates redelegating tokens on a private Casper network using a compiled redelegate.wasm file. It includes specific values for node address, chain name, secret key path, and public keys for the delegator and validators.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/versioned_docs/version-1.5.X/developers/cli/redelegate.md#2025-04-22_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\ncasper-client put-deploy \\\n--node-address http://3.143.158.19:7777  \\\n--chain-name integration-test \\\n--secret-key ~/KEYS/integration/Test_secret_key.pem \\\n--payment-amount 8000000000 \\\n--session-path ~/redelegate.wasm \\\n--session-arg \"validator:public_key='017fec504c642f2b321b8591f1c3008348c57a81acafceb5a392cf8416a5fb4a3c'\" \\\n--session-arg \"amount:u512='500000000000'\" \\\n--session-arg \"delegator:public_key='01360af61b50cdcb7b92cffe2c99315d413d34ef77fadee0c105cc4f1d4120f986'\" \\\n--session-arg \"new_validator:public_key='019e7b8bdec03ba83be4f5443d9f7f9111c77fec984ce9bb5bb7eb3da1e689c02d'\"\n```\n\n----------------------------------------\n\nTITLE: Detecting Eviction using Casper Client in Bash\nDESCRIPTION: This command uses the Casper client to retrieve auction information and filter it for a specific public key, helping detect if a validator has been evicted.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/versioned_docs/version-2.0.0/operators/becoming-a-validator/recovering.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ncasper-client get-auction-info | jq '.result.auction_state.bids[] | select( .public_key == \"<public_key>\")'\n```\n\n----------------------------------------\n\nTITLE: Example JSON Response for Global State Query\nDESCRIPTION: Illustrates the typical JSON response format returned by the `casper-client query-global-state` command when querying a named key. The response includes the API version, merkle proof, and the stored value as a CLValue object, which contains the raw bytes, CLType ('String'), and the parsed value ('CHF Coin').\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/docs/resources/beginner/cep18.md#2025-04-22_snippet_6\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"id\": -7058786841478812744,\n  \"jsonrpc\": \"2.0\",\n  \"result\": {\n    \"api_version\": \"1.4.15\",\n    \"block_header\": null,\n    \"merkle_proof\": \"[94526 hex chars]\",\n    \"stored_value\": {\n      \"CLValue\": {\n        \"bytes\": \"0800000043484620436f696e\",\n        \"cl_type\": \"String\",\n        \"parsed\": \"CHF Coin\"\n      }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Starting Casper Node Launcher Service using Bash\nDESCRIPTION: This command starts the `casper-node-launcher` service using `systemctl`, which is common on systems using systemd (like Ubuntu). It assumes the Casper node Debian package has been installed, setting up the service. This initiates the node process.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/docs/operators/setup/joining.md#2025-04-22_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nsudo systemctl start casper-node-launcher\n```\n\n----------------------------------------\n\nTITLE: Viewing Converted PEM Secret Key\nDESCRIPTION: Command to display the contents of the PEM-formatted secret key file converted from an Ethereum private key.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/versioned_docs/version-1.5.X/concepts/accounts-and-keys.md#2025-04-22_snippet_8\n\nLANGUAGE: bash\nCODE:\n```\ncat eth-secret.pem\n```\n\n----------------------------------------\n\nTITLE: Dictionary Item Query Request Example\nDESCRIPTION: Example request for retrieving a dictionary item using state_get_dictionary_item method, requiring state root hash and dictionary identifier parameters.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/docs/developers/json-rpc/json-rpc-informational.md#2025-04-22_snippet_24\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"id\": 1,\n  \"jsonrpc\": \"2.0\",\n  \"method\": \"state_get_dictionary_item\",\n  \"params\": [\n    {\n      \"name\": \"state_root_hash\",\n      \"value\": \"0808080808080808080808080808080808080808080808080808080808080808\"\n    },\n    {\n      \"name\": \"dictionary_identifier\",\n      \"value\": {\n        \"URef\": {\n          \"seed_uref\": \"uref-09480c3248ef76b603d386f3f4f8a5f87f597d4eaffd475433f861af187ab5db-007\",\n          \"dictionary_item_key\": \"a_unique_entry_identifier\"\n        }\n      }\n    }\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Verifying Transaction Details with get-txn Command in Bash\nDESCRIPTION: This bash command demonstrates how to use the casper-client get-txn command to verify the details of a transaction using its transaction hash. This step is crucial to confirm the success of the transaction.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/versioned_docs/version-2.0.0/developers/cli/sending-transactions.md#2025-04-22_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\ncasper-client get-txn \\\n    --node-address <HOST:PORT> <TRANSACTION-HASH>\n```\n\n----------------------------------------\n\nTITLE: Defining EraEndV2 Schema in JSON\nDESCRIPTION: JSON schema for information related to the end of an era, including validator weights, rewards, and gas price for the next era in the Casper Network.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/condor/jsonrpc-comp/rpc-2.0/schema/components.json.md#2025-04-22_snippet_73\n\nLANGUAGE: json\nCODE:\n```\n\"EraEndV2\": {\n    \"description\": \"Information related to the end of an era, and validator weights for the following era.\",\n    \"type\": \"object\",\n    \"required\": [\n        \"equivocators\",\n        \"inactive_validators\",\n        \"next_era_gas_price\",\n        \"next_era_validator_weights\",\n        \"rewards\"\n    ],\n    \"properties\": {\n        \"equivocators\": {\n            \"description\": \"The set of equivocators.\",\n            \"type\": \"array\",\n            \"items\": {\n                \"$ref\": \"#/components/schemas/PublicKey\"\n            }\n        },\n        \"inactive_validators\": {\n            \"description\": \"Validators that haven't produced any unit during the era.\",\n            \"type\": \"array\",\n            \"items\": {\n                \"$ref\": \"#/components/schemas/PublicKey\"\n            }\n        },\n        \"next_era_validator_weights\": {\n            \"description\": \"The validators for the upcoming era and their respective weights.\",\n            \"allOf\": [\n                {\n                    \"$ref\": \"#/components/schemas/Array_of_ValidatorWeight\"\n                }\n            ]\n        },\n        \"rewards\": {\n            \"description\": \"The rewards distributed to the validators.\",\n            \"type\": \"object\",\n            \"additionalProperties\": {\n                \"$ref\": \"#/components/schemas/U512\"\n            }\n        },\n        \"next_era_gas_price\": {\n            \"type\": \"integer\",\n            \"format\": \"uint8\",\n            \"minimum\": 0.0\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Simplified Balance Check Command\nDESCRIPTION: A simplified version of the balance check command without comments, showing the essential Casper client syntax for checking an account's CEP-18 token balance.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/versioned_docs/version-1.5.X/resources/tokens/cep18/transfer.md#2025-04-22_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\ncasper-client put-deploy -n http://<node IP>:<PORT>\\\n--secret-key ~/casper/demo/user_a/secret_key.pem \\\n--session-package-name \"cep18_test_contract\" \\\n--session-entry-point \"check_balance_of\" \\\n--session-arg \"token_contract:account_hash='account-hash-b568f50a64acc8bbe43462ffe243849a88111060b228dacb8f08d42e26985180'\" \\\n--session-arg \"address:key='account-hash-303c0f8208220fe9a4de40e1ada1d35fdd6c678877908f01fddb2a56502d67fd'\" \\\n--chain-name <CHAIN NAME> \\\n--payment-amount 1000000000\n```\n\n----------------------------------------\n\nTITLE: Sample Filtered Status Output - JSON\nDESCRIPTION: Shows expected output for the filtered status query. The output includes the API version string, a block information object, build version string, and node uptime, in that order. Note this mix of primitive and object JSON types, which matches the order of jq extract fields.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/docs/operators/setup/node-endpoints.md#2025-04-22_snippet_8\n\nLANGUAGE: json\nCODE:\n```\n\"1.4.15\"\\n{\\n  \"hash\": \"dca9959b21df52633f85cd373a8117fe8e89629dd2a0455781484a439f7d9f62\",\\n  \"timestamp\": \"2023-05-10T09:26:43.968Z\",\\n  \"era_id\": 9085,\\n  \"height\": 1711266,\\n  \"state_root_hash\": \"5f374529e747a06ec825e07a030df7b9d80d1f7ffac9156779b4466620721872\",\\n  \"creator\": \"0107cba5b4826a87ddbe0ba8cda8064881b75882f05094c1a5f95e957512a3450e\"\\n}\\n\"1.4.15-039d438f2-casper-mainnet\"\\n\"5days 13h 53m 10s 763ms\"\n```\n\n----------------------------------------\n\nTITLE: Example sign-deploy Command Implementation\nDESCRIPTION: Concrete example of the sign-deploy command showing how to add a second signature to an existing deploy file.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/versioned_docs/version-1.5.X/developers/cli/transfers/multisig-deploy-transfer.md#2025-04-22_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\ncasper-client sign-deploy \\\n--input transfer.deploy \\\n--secret-key ~/KEYS/multi-sig/keys/user_1_secret_key.pem \\\n--output transfer2.deploy\n```\n\n----------------------------------------\n\nTITLE: Reacting to Events in Python\nDESCRIPTION: Demonstrates how to parse and react to specific events in Python, such as TransactionAccepted events.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/docs/developers/dapps/monitor-and-consume-events.md#2025-04-22_snippet_4\n\nLANGUAGE: python\nCODE:\n```\ndef eventHandler(event):\n  if event[\"TransactionAccepted\"][\"header\"][\"account\"] == \"012481699f9231e36ecf002675cd7186b48e6a735d10ec1b30f587ca716937752c\":\n    # Perform an action\n```\n\n----------------------------------------\n\nTITLE: Creating Session Parameter for Stored Contract Call in JavaScript\nDESCRIPTION: Creates the `session` part of a deploy, specifying a call to a stored contract by its hash (the auction manager contract). It requires the auction manager contract hash (decoded from Base16), the contract entry point (`delegate`, `undelegate`, or `redelegate`), and the previously defined runtime arguments (`args`). Depends on `decodeBase16` and `DeployUtil` from `casper-js-sdk`.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/docs/resources/advanced/list-cspr.md#2025-04-22_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nimport { decodeBase16, DeployUtil } from 'casper-js-sdk';\n\nconst session = DeployUtil.ExecutableDeployItem.newStoredContractByHash(\n  decodeBase16(auction_manager_contract_hash), // auction manager contract hash\n  contractEntryPoint, // auction manager entry point\n  args\n);\n```\n\n----------------------------------------\n\nTITLE: Defining Deploy Hash Schema in JSON\nDESCRIPTION: This JSON schema snippet defines a hex-encoded deploy hash, ensuring it adheres to the generic Digest schema defined elsewhere. It is used within the context of the Casper network documentation to specify a standardized format for deploy hashes, crucial for maintaining data integrity and interoperability. The schema depends on the pre-defined Digest schema and expects the deploy hash to be a string encoded in hexadecimal format.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/condor/jsonrpc-comp/rpc-1.5/schema/DeployHash.json.md#2025-04-22_snippet_0\n\nLANGUAGE: JSON\nCODE:\n```\n{\\n    \\\"description\\\": \\\"Hex-encoded deploy hash.\\\",\\n    \\\"allOf\\\": [\\n        {\\n            \\\"$ref\\\": \\\"#/components/schemas/Digest\\\"\\n        }\\n    ]\\n}\n```\n\n----------------------------------------\n\nTITLE: Viewing Query Results of Contract State in JSON Format\nDESCRIPTION: This JSON response shows the result of querying the state of the contract after the cross-contract call. It displays the CLValue containing the updated message string \"Hello new message!\" which confirms the cross-contract communication succeeded.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/versioned_docs/version-2.0.0/resources/advanced/cross-contract.md#2025-04-22_snippet_26\n\nLANGUAGE: bash\nCODE:\n```\n{\n  \"id\": -5477027327608594231,\n  \"jsonrpc\": \"2.0\",\n  \"result\": {\n    \"api_version\": \"1.4.13\",\n    \"block_header\": null,\n    \"merkle_proof\": \"[61444 hex chars]\",\n    \"stored_value\": {\n      \"CLValue\": {\n        \"bytes\": \"1200000048656c6c6f206e6577206d65737361676521\",\n        \"cl_type\": \"String\",\n        \"parsed\": \"Hello new message!\"\n      }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Installing Yarn globally using npm\nDESCRIPTION: Command to install Yarn package manager globally using npm. This is a prerequisite for setting up the documentation website.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/README/SETUP.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm install --global yarn\n```\n\n----------------------------------------\n\nTITLE: Calculating Base Round Reward in Casper Network\nDESCRIPTION: Formula for computing the maximum amount of CSPR that validators can collectively receive from a proposed block, based on the round issuance rate and current token supply.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/docs/concepts/economics/consensus.md#2025-04-22_snippet_2\n\nLANGUAGE: plaintext\nCODE:\n```\nbase_round_reward(i) = round_issuance_rate * supply(i)\n```\n\n----------------------------------------\n\nTITLE: Defining Contract Dependencies in Cargo.toml (TOML)\nDESCRIPTION: Example snippet showing the necessary dependencies within the `contract/Cargo.toml` file for a Casper smart contract. It includes `casper-contract` for the smart contract SDK and `casper-types` for shared types, along with example version numbers (1.4.4 and 1.5.0 respectively). These dependencies must be added manually when not using the automatic `cargo casper` setup.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/versioned_docs/version-1.5.X/developers/writing-onchain-code/simple-contract.md#2025-04-22_snippet_6\n\nLANGUAGE: toml\nCODE:\n```\n[dependencies]\n# A library for developing Casper network smart contracts.\ncasper-contract = \"1.4.4\"\n# Types shared by many Casper crates for use on a Casper network.\ncasper-types = \"1.5.0\"\n```\n\n----------------------------------------\n\nTITLE: Checking Auction Contract Information (Bash)\nDESCRIPTION: This command uses `casper-client get-auction-info` to query the state of the auction contract on a specified Casper node. It retrieves current auction information, including validator bids and their amounts, which is useful for verifying the status after an unbonding operation.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/versioned_docs/version-1.5.X/operators/becoming-a-validator/unbonding.md#2025-04-22_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\ncasper-client get-auction-info --node-address http://<HOST:PORT>\n```\n\n----------------------------------------\n\nTITLE: Using Makefile to Build Casper Contract\nDESCRIPTION: Command to use a provided Makefile for building a Casper contract.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/versioned_docs/version-2.0.0/developers/writing-onchain-code/writing-session-code.md#2025-04-22_snippet_9\n\nLANGUAGE: bash\nCODE:\n```\nmake build-contract\n```\n\n----------------------------------------\n\nTITLE: Querying Updated 'count' Value after Increment\nDESCRIPTION: This command queries the global state specifically for the 'counter/count' value using the latest state root hash. This is done to verify that calling the 'counter_inc' entry point successfully incremented the count stored by the contract.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/docs/resources/beginner/counter-testnet/walkthrough.md#2025-04-22_snippet_14\n\nLANGUAGE: bash\nCODE:\n```\ncasper-client query-global-state --node-address http://[NODE_IP]:7777 \\\n    --state-root-hash [STATE_ROOT_HASH] \\\n    --key [ACCOUNT_HASH] -q \"counter/count\"\n```\n\n----------------------------------------\n\nTITLE: GetRequests Response Type Definition\nDESCRIPTION: Generic enum defining the possible response types for a GetRequest - either the fetched item or a not found response containing the original ID.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/versioned_docs/version-1.5.X/concepts/design/networking-protocol.md#2025-04-22_snippet_4\n\nLANGUAGE: rust\nCODE:\n```\npub enum FetchedOrNotFound<T, Id> {\n    Fetched(T),\n    NotFound(Id),\n}\n```\n\n----------------------------------------\n\nTITLE: Requesting State Root Hash with chain_get_state_root_hash\nDESCRIPTION: This example shows how to request a state root hash at a specific block height using the chain_get_state_root_hash RPC method. The method requires a block identifier parameter.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/versioned_docs/version-1.5.X/developers/json-rpc/json-rpc-informational.md#2025-04-22_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\n{\n  \"id\": 1,\n  \"jsonrpc\": \"2.0\",\n  \"method\": \"chain_get_state_root_hash\",\n  \"params\": [\n    {\n      \"Height\": 10\n    }\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Defining a JSON Schema Array with Referenced Items (JSON)\nDESCRIPTION: This JSON snippet defines a schema for an array. The `type` property specifies it's an array. The `items` property defines the schema for each element within the array by referencing (`$ref`) another schema component named `NamedUserGroup`, typically found elsewhere in the same document under `components/schemas`. This structure indicates that the expected data is an array where each element adheres to the `NamedUserGroup` schema definition.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/condor/jsonrpc-comp/rpc-2.0/schema/Array_of_NamedUserGroup.json.md#2025-04-22_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"type\": \"array\",\n    \"items\": {\n        \"$ref\": \"#/components/schemas/NamedUserGroup\"\n    }\n} \n```\n\n----------------------------------------\n\nTITLE: Backup Node Key Swap Commands\nDESCRIPTION: Commands to stop the backup node, swap keys, and restart the node during the migration process.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/versioned_docs/version-2.0.0/operators/maintenance/moving-node.md#2025-04-22_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nsudo systemctl stop casper-node-launcher\ncd /etc/casper/validator_keys/current_node\nsudo -u casper cp * ../\nsudo systemctl start casper-node-launcher\n```\n\n----------------------------------------\n\nTITLE: Starting a Local Casper Network with NCTL in Bash\nDESCRIPTION: Command to set up and start a local Casper network using NCTL (Network Control). This initializes the network assets and launches the local blockchain.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/versioned_docs/version-1.5.X/resources/beginner/counter/walkthrough.md#2025-04-22_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nnctl-assets-setup && nctl-start\n```\n\n----------------------------------------\n\nTITLE: Enabling Alice's Account using Casper Client (Shell)\nDESCRIPTION: This command enables Alice's account by setting low action thresholds, allowing successful deploy executions.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/versioned_docs/version-1.5.X/operators/setup-network/create-private.md#2025-04-22_snippet_19\n\nLANGUAGE: sh\nCODE:\n```\ncasper-client \\\n  put-deploy \\\n  -n $NODE_ADDR \\\n  --chain-name $CHAIN_NAME \\\n  --secret-key admin/secret_key.pem \\\n  --session-account=alice/public_key_hex\n  --session-path set_action_thresholds.wasm \\\n  --payment-amount=2500000000 \\\n  --session-arg \"key_management_threshold:u8='0'\" \\\n  --session-arg \"deploy_threshold:u8='1'\"\n```\n\n----------------------------------------\n\nTITLE: Configuring Seigniorage Allocations (TOML)\nDESCRIPTION: This TOML configuration disables compute rewards, which should result in zero seigniorage allocations at each switch block.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/versioned_docs/version-1.5.X/operators/setup-network/create-private.md#2025-04-22_snippet_22\n\nLANGUAGE: toml\nCODE:\n```\n[core]\ncompute_rewards = false\n```\n\n----------------------------------------\n\nTITLE: Defining EraReward Array Schema in JSON\nDESCRIPTION: JSON schema for an array of EraReward objects which represent validator rewards in the Casper blockchain.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/condor/jsonrpc-comp/rpc-2.0/schema/components.json.md#2025-04-22_snippet_68\n\nLANGUAGE: json\nCODE:\n```\n\"Array_of_EraReward\": {\n    \"type\": \"array\",\n    \"items\": {\n        \"$ref\": \"#/components/schemas/EraReward\"\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining the Top-Level Network Message Enum in Rust\nDESCRIPTION: Defines the main `Message` enum in Rust, used for Casper node communication. It includes variants for `Handshake` (initial connection setup with network details, address, version, optional certificate, syncing status, and chainspec hash) and `Payload` (subsequent data exchange). Also defines the `ConsensusCertificate` and `Digest` structs used within the `Handshake` variant. The `Handshake` message is encoded using MessagePack, while `Payload` uses bincode. Dependencies include standard Rust types (`String`, `SocketAddr`, `Option`) and Casper-specific types (`ProtocolVersion`, `PublicKey`, `Signature`, `Digest`).\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/versioned_docs/version-2.0.0/concepts/design/networking-protocol.md#2025-04-22_snippet_0\n\nLANGUAGE: rust\nCODE:\n```\nenum Message {\n    Handshake {\n        network_name: String,\n        public_addr: SocketAddr,\n        // default: 1.0\n        protocol_version: ProtocolVersion,\n        // default: `None`\n        consensus_certificate: Option<ConsensusCertificate>,\n        // default: false\n        is_syncing: bool,\n        // default: `None`\n        chainspec_hash: Option<Digest>,\n    },\n    Payload(Payload),\n}\n\nstruct ConsensusCertificate {\n    public_key: PublicKey,\n    signature: Signature,\n}\n\nstruct Digest([u8; 32]);\n```\n\n----------------------------------------\n\nTITLE: Setting Up Package Versioning in Casper Network\nDESCRIPTION: Defines a package configuration with version management for a Casper Network smart contract. Includes version tracking with protocol version 2 and entity version 1, with unlocked status for future updates.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/versioned_docs/version-2.0.0/developers/json-rpc/json-rpc-transactional.md#2025-04-22_snippet_24\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"key\": \"package-154847e85beee3b5cd1c769b8f01dbc4b93d1cea8370c0b3bc1858d0d248a48b\",\n    \"kind\": {\n        \"Write\": {\n            \"Package\": {\n                \"versions\": [\n                    {\n                        \"entity_version_key\": {\n                            \"protocol_version_major\": 2,\n                            \"entity_version\": 1\n                        },\n                        \"addressable_entity_hash\": \"addressable-entity-eb1c971063155d461059292e91cfe2212d45b79a49294b8d90bdae18cda6e59e\"\n                    }\n                ],\n                \"disabled_versions\": [],\n                \"groups\": [],\n                \"lock_status\": \"Unlocked\"\n            }\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Querying CEP-18 Contract Package Hash (Without Comments)\nDESCRIPTION: This is the same command as above but without comments, for easier copy-pasting when interacting with a CEP-18 contract package.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/versioned_docs/version-2.0.0/resources/tokens/cep18/query.md#2025-04-22_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ncasper-client query-global-state -n http://<HOST IP>:<PORT> \\\n--key hash-82bd86d2675b2dc44c19027fb7717a99db6fda5e0cad8d597f2495a9dbc9df7f \\\n--state-root-hash f9f73c3a4da5893b67c4cac94a5695d76cfefff61b050c98a7b19e2b8efd3933\n```\n\n----------------------------------------\n\nTITLE: Retrieving Deploy Information from Casper Network\nDESCRIPTION: This command retrieves a deploy from the network using its deploy hash, allowing you to check the status of the deploy. The deploy hash is returned when a deploy is put onto the chain using the put-deploy command.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/versioned_docs/version-1.5.X/resources/beginner/counter/commands.md#2025-04-22_snippet_5\n\nLANGUAGE: rust\nCODE:\n```\ncasper-client get-deploy \\\n    --node-address [NODE_SERVER_ADDRESS] \\\n    [DEPLOY_HASH]\n```\n\n----------------------------------------\n\nTITLE: Defining JSON Schema for Casper Network Components\nDESCRIPTION: JSON Schema definitions for core Casper Network components including validator vesting schedules, bridge records, validator credits, execution results, gas usage, payment info, and transfer types. The schema enforces strict typing and validation rules for API responses.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/condor/jsonrpc-comp/rpc-2.0/schema/components.json.md#2025-04-22_snippet_41\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"vesting_schedule\": {\n        \"description\": \"Vesting schedule for a genesis validator. `None` if non-genesis validator.\",\n        \"anyOf\": [\n            {\n                \"$ref\": \"#/components/schemas/VestingSchedule\"\n            },\n            {\n                \"type\": \"null\"\n            }\n        ]\n    },\n    \"inactive\": {\n        \"description\": \"`true` if validator has been \\\"evicted\\\"\",\n        \"type\": \"boolean\"\n    },\n    \"Bridge\": {\n        \"description\": \"A bridge record pointing to a new `ValidatorBid` after the public key was changed.\",\n        \"type\": \"object\",\n        \"required\": [\n            \"era_id\",\n            \"new_validator_public_key\",\n            \"old_validator_public_key\"\n        ],\n        \"properties\": {\n            \"old_validator_public_key\": {\n                \"description\": \"Previous validator public key associated with the bid.\",\n                \"allOf\": [\n                    {\n                        \"$ref\": \"#/components/schemas/PublicKey\"\n                    }\n                ]\n            },\n            \"new_validator_public_key\": {\n                \"description\": \"New validator public key associated with the bid.\",\n                \"allOf\": [\n                    {\n                        \"$ref\": \"#/components/schemas/PublicKey\"\n                    }\n                ]\n            },\n            \"era_id\": {\n                \"description\": \"Era when bridge record was created.\",\n                \"allOf\": [\n                    {\n                        \"$ref\": \"#/components/schemas/EraId\"\n                    }\n                ]\n            }\n        },\n        \"additionalProperties\": false\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Rotating Validator Accounts with global-state-update-gen\nDESCRIPTION: Command to generate a new global_state.toml file with an updated validator set. This is used during network upgrades to rotate validators, requiring the data directory, state hash from the switch block, and the public keys and stakes of the new validators.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/docs/operators/setup-network/create-private.md#2025-04-22_snippet_11\n\nLANGUAGE: sh\nCODE:\n```\nglobal-state-update-gen validators \\\n  --data-dir $DATA_DIR/global_state \\\n  --state-hash $STATE_ROOT_HASH \\\n  –-validator $PUBLIC_KEY_HEX,$STAKE \\\n  –-validator $PUBLIC_KEY_HEX,$STAKE\n```\n\n----------------------------------------\n\nTITLE: Retrieving Deploy Information using Casper-Client\nDESCRIPTION: Command to fetch details and status of a specific deploy previously submitted to the network using `put-deploy`. It requires the node address and the unique hash of the deploy (`DEPLOY_HASH`) which is typically returned by the `put-deploy` command.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/docs/resources/beginner/counter-testnet/commands.md#2025-04-22_snippet_5\n\nLANGUAGE: rust\nCODE:\n```\ncasper-client get-deploy \\\n    --node-address [NODE_SERVER_ADDRESS] \\\n    [DEPLOY_HASH]\n```\n\n----------------------------------------\n\nTITLE: URef Without Access Rights Example - Bash\nDESCRIPTION: Example of a URef string representation without any associated access rights, shown with a '000' suffix.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/docs/developers/dapps/uref-security.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nuref-974019c976b5f26412ce486158d2431967af35d91387dae8cbcd43c20fce6452-000\n```\n\n----------------------------------------\n\nTITLE: Calling a Contract Entry Point with Casper CLI\nDESCRIPTION: A command to execute an entry point on a deployed contract using the Casper client. This example calls the counter_decrement entry point in the contract referenced by counter_package_name.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/docs/resources/beginner/upgrade-contract.md#2025-04-22_snippet_12\n\nLANGUAGE: bash\nCODE:\n```\ncasper-client put-deploy \\\n    --node-address http://[NODE_IP]:7777 \\\n    --chain-name [CHAIN_NAME] \\\n    --secret-key [PATH_TO_YOUR_KEY]/secret_key.pem \\\n    --payment-amount [PAYMENT_AMOUNT_IN_MOTES] \\\n    --session-package-name \"counter_package_name\" \\\n    --session-entry-point \"counter_decrement\"\n```\n\n----------------------------------------\n\nTITLE: Example Account State After Removing Key (JSON)\nDESCRIPTION: Shows the JSON representation of an account's details after successfully removing the associated key (`account-hash-1fed...`). The `associated_keys` list no longer contains the removed key.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/versioned_docs/version-2.0.0/resources/advanced/multi-sig/multi-sig-workflow.md#2025-04-22_snippet_21\n\nLANGUAGE: json\nCODE:\n```\n\"Account\": {\n  \"account_hash\": \"account-hash-1ed5a1c39bea93c105f2d22c965a84b205b36734a377d05dbb103b6bfaa595a7\",\n  \"action_thresholds\": {\n    \"deployment\": 2,\n    \"key_management\": 3\n  },\n  \"associated_keys\": [\n    {\n      \"account_hash\": \"account-hash-04a9691a9f8f05a0f08bd686f188b27c7dbcd644b415759fd3ca043d916ea02f\",\n      \"weight\": 1\n    },\n    {\n      \"account_hash\": \"account-hash-1ed5a1c39bea93c105f2d22c965a84b205b36734a377d05dbb103b6bfaa595a7\",\n      \"weight\": 3\n    },\n    {\n      \"account_hash\": \"account-hash-e2d00525cac31ae2756fb155f289d276c6945b6914923fe275de0cb127bffee7\",\n      \"weight\": 1\n    }\n  ],\n  \"main_purse\": \"uref-8294864177c2c1ec887a11dae095e487b5256ce6bd2a1f2740d0e4f28bd3251c-007\",\n  \"named_keys\": []\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Required Object Schema with References in OpenAPI using JSON\nDESCRIPTION: This snippet defines a JSON schema for an object containing two required properties: 'addressable_entity_hash' and 'entity_version_key', both of which reference existing schema components via $ref pointers. It uses the 'allOf' composition keyword to inherit schema definitions, ensuring type consistency and reusability across the OpenAPI spec. Inputs are expected to be JSON objects matching these constraints, and this schema depends on proper definitions of 'EntityVersionKey' and 'AddressableEntityHash' in the OpenAPI components section.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/condor/jsonrpc-comp/rpc-2.0/schema/EntityVersionAndHash.json.md#2025-04-22_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"type\": \"object\",\n    \"required\": [\n        \"addressable_entity_hash\",\n        \"entity_version_key\"\n    ],\n    \"properties\": {\n        \"entity_version_key\": {\n            \"allOf\": [\n                {\n                    \"$ref\": \"#/components/schemas/EntityVersionKey\"\n                }\n            ]\n        },\n        \"addressable_entity_hash\": {\n            \"allOf\": [\n                {\n                    \"$ref\": \"#/components/schemas/AddressableEntityHash\"\n                }\n            ]\n        }\n    }\n} \n```\n\n----------------------------------------\n\nTITLE: Chain Get State Root Hash Request Example\nDESCRIPTION: Example JSON request for the chain_get_state_root_hash endpoint to retrieve the state root hash at a specific block height.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/versioned_docs/version-2.0.0/developers/json-rpc/json-rpc-informational.md#2025-04-22_snippet_4\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"id\": 1,\n  \"jsonrpc\": \"2.0\",\n  \"method\": \"chain_get_state_root_hash\",\n  \"params\": [\n    {\n      \"name\": \"block_identifier\",\n      \"value\": {\n        \"Height\": 10\n      }\n    }\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Querying Auction Bid with Automatic Public Key Extraction - Bash\nDESCRIPTION: This Bash command queries auction info and filters for the validator's own bid by reading the public key from the standard location. Dependencies: `casper-client`, `jq`, `cat`, and expects the public key at `/etc/casper/validator_keys/public_key_hex`. Automatically matches public key ignoring case. Useful for validators who have previously set up their node according to documentation. Outputs the relevant bid information for that public key.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/versioned_docs/version-1.5.X/operators/becoming-a-validator/recovering.md#2025-04-22_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ncasper-client get-auction-info | jq --arg pk \"$(cat /etc/casper/validator_keys/public_key_hex)\" '.result.auction_state.bids[] | select( (.public_key | ascii_downcase) == ($pk | ascii_downcase) )'\n```\n\n----------------------------------------\n\nTITLE: Defining Smart Contract Deployment Schema with JSON\nDESCRIPTION: This JSON snippet declares a schema for a signed smart contract object, requiring fields like approvals, hash, header, payment, and session. It references several component schemas (DeployHash, DeployHeader, ExecutableDeployItem, Approval) to enforce type consistency across multiple objects. Key parameters include unique approvals (an array), and strict property inclusion via \\\"additionalProperties\\\": false; inputs must meet the schema or be invalid, which helps ensure secure and predictable contract deployment data.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/condor/jsonrpc-comp/rpc-2.0/schema/Deploy.json.md#2025-04-22_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"description\": \"A signed smart contract.\",\n    \"type\": \"object\",\n    \"required\": [\n        \"approvals\",\n        \"hash\",\n        \"header\",\n        \"payment\",\n        \"session\"\n    ],\n    \"properties\": {\n        \"hash\": {\n            \"$ref\": \"#/components/schemas/DeployHash\"\n        },\n        \"header\": {\n            \"$ref\": \"#/components/schemas/DeployHeader\"\n        },\n        \"payment\": {\n            \"$ref\": \"#/components/schemas/ExecutableDeployItem\"\n        },\n        \"session\": {\n            \"$ref\": \"#/components/schemas/ExecutableDeployItem\"\n        },\n        \"approvals\": {\n            \"type\": \"array\",\n            \"items\": {\n                \"$ref\": \"#/components/schemas/Approval\"\n            },\n            \"uniqueItems\": true\n        }\n    },\n    \"additionalProperties\": false\n} \n```\n\n----------------------------------------\n\nTITLE: Querying Contract Package Details\nDESCRIPTION: Command to retrieve contract package information using the Casper command-line client.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/versioned_docs/version-1.5.X/resources/beginner/upgrade-contract.md#2025-04-22_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\ncasper-client query-global-state \\\n    --node-address http://[NODE_IP]:7777 \\\n    --state-root-hash [STATE_ROOT_HASH] \\\n    --key [ACCOUNT_HASH] -q \"counter_package_name\"\n```\n\n----------------------------------------\n\nTITLE: Initializing Installer Authorization Keys in Casper Contract (Rust)\nDESCRIPTION: This Rust code defines the contract's init entry point which, on installation, stores the installer deploy's authorization keys under a named key if not already present. It uses the runtime and storage Casper SDK APIs to list keys, store them as a URef, and associate them with a named key. Dependencies include casper-contract and the runtime/storage APIs. The entry point takes no arguments and outputs nothing unless called during installation.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/docs/resources/advanced/list-auth-keys-tutorial.md#2025-04-22_snippet_3\n\nLANGUAGE: rust\nCODE:\n```\n#[no_mangle]\npub extern \"C\" fn init() {\n    if runtime::get_key(AUTHORIZATION_KEYS_INSTALLER).is_none() {\n        let authorization_keys: Vec<AccountHash> =\n            runtime::list_authorization_keys().iter().cloned().collect();\n\n        let authorization_keys: Key = storage::new_uref(authorization_keys).into();\n        runtime::put_key(AUTHORIZATION_KEYS_INSTALLER, authorization_keys);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Updating Account Thresholds on Casper Testnet using Casper CLI\nDESCRIPTION: Sends a deploy to the Casper Testnet using `casper-client put-deploy` to update the action thresholds of an account. It executes the `update_thresholds.wasm` session code, passing the new `deployment_threshold` (2) and `key_management_threshold` (3) as arguments. Requires a funded account, its secret key file, the compiled Wasm, node address, and chain name.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/docs/resources/advanced/multi-sig/multi-sig-workflow.md#2025-04-22_snippet_8\n\nLANGUAGE: bash\nCODE:\n```\ncasper-client put-deploy \\\n--node-address https://node.testnet.casper.network \\\n--chain-name casper-test \\\n--payment-amount 500000000 \\\n--secret-key $PATH/secret_key.pem \\\n--session-path target/wasm32-unknown-unknown/release/update_thresholds.wasm \\\n--session-arg \"deployment_threshold:u8='2'\" \\\n--session-arg \"key_management_threshold:u8='3'\"\n```\n\n----------------------------------------\n\nTITLE: Defining a JSON Schema Field for a 256-bit Integer (JSON)\nDESCRIPTION: This JSON snippet defines a schema for a field. The field is described as a \"Decimal representation of a 256-bit integer\" and its data type is specified as \"string\". This approach is necessary when representing large integers that might exceed the limits of standard numeric types in JSON or need precise decimal representation without loss.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/condor/jsonrpc-comp/rpc-1.5/schema/U256.json.md#2025-04-22_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"description\": \"Decimal representation of a 256-bit integer.\",\n    \"type\": \"string\"\n} \n```\n\n----------------------------------------\n\nTITLE: Defining Schema for Global State Key in JSON\nDESCRIPTION: This JSON object defines the schema for a key used within the Casper Network's global state. It specifies that the key must be a formatted string (`type: \"string\"`) and provides a `description` explaining its role in storing various data types like `CLValue`s, smart contracts, and user accounts.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/condor/jsonrpc-comp/rpc-2.0/schema/Key.json.md#2025-04-22_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"description\": \"The key as a formatted string, under which data (e.g. `CLValue`s, smart contracts, user accounts) are stored in global state.\",\n    \"type\": \"string\"\n} \n```\n\n----------------------------------------\n\nTITLE: Installing Required Casper Tools\nDESCRIPTION: Command to install essential Casper node tools including client, node launcher and jq.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/versioned_docs/version-2.0.0/operators/setup/install-node.md#2025-04-22_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nsudo apt install -y casper-client casper-node-launcher jq\n```\n\n----------------------------------------\n\nTITLE: Removing an Associated Key via Deploy (Bash)\nDESCRIPTION: Sends a deploy to the specified Casper node to remove an associated key from the account identified by the secret key. It utilizes the `remove_account.wasm` session code, passing the account hash of the key to be removed as a session argument. Requires `casper-client`, a valid node address, chain name, secret key file path, and the compiled `remove_account.wasm` file.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/docs/resources/advanced/multi-sig/multi-sig-workflow.md#2025-04-22_snippet_22\n\nLANGUAGE: bash\nCODE:\n```\ncasper-client put-deploy --node-address https://node.testnet.casper.network \\\n--chain-name \"casper-test\" \\\n--payment-amount 500000000 \\\n--secret-key $PATH/secret_key.pem \\\n--session-path target/wasm32-unknown-unknown/release/remove_account.wasm \\\n--session-arg \"remove_key:key='account-hash-1fed34baa6807a7868bb18f91b161d99ebf21763810fe4c92e39775d10bbf1f8\"\n```\n\n----------------------------------------\n\nTITLE: Defining Addressable Entity and Legacy Account JSON Schema\nDESCRIPTION: This JSON schema delineates the structure for defining either an addressable entity or a legacy account, specifying necessary fields and referencing other schema components. It requires either an 'AddressableEntity' or 'LegacyAccount' object and includes properties for named keys and entry points in the case of an addressable entity.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/condor/jsonrpc-comp/rpc-2.0/schema/EntityOrAccount.json.md#2025-04-22_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"description\": \"An addressable entity or a legacy account.\",\n    \"oneOf\": [\n        {\n            \"description\": \"An addressable entity.\",\n            \"type\": \"object\",\n            \"required\": [\n                \"AddressableEntity\"\n            ],\n            \"properties\": {\n                \"AddressableEntity\": {\n                    \"type\": \"object\",\n                    \"required\": [\n                        \"entity\",\n                        \"entry_points\",\n                        \"named_keys\"\n                    ],\n                    \"properties\": {\n                        \"entity\": {\n                            \"description\": \"The addressable entity.\",\n                            \"allOf\": [\n                                {\n                                    \"$ref\": \"#/components/schemas/AddressableEntity\"\n                                }\n                            ]\n                        },\n                        \"named_keys\": {\n                            \"description\": \"The named keys of the addressable entity.\",\n                            \"allOf\": [\n                                {\n                                    \"$ref\": \"#/components/schemas/NamedKeys\"\n                                }\n                            ]\n                        },\n                        \"entry_points\": {\n                            \"description\": \"The entry points of the addressable entity.\",\n                            \"type\": \"array\",\n                            \"items\": {\n                                \"$ref\": \"#/components/schemas/EntryPointValue\"\n                            }\n                        }\n                    }\n                }\n            },\n            \"additionalProperties\": false\n        },\n        {\n            \"description\": \"A legacy account.\",\n            \"type\": \"object\",\n            \"required\": [\n                \"LegacyAccount\"\n            ],\n            \"properties\": {\n                \"LegacyAccount\": {\n                    \"$ref\": \"#/components/schemas/Account\"\n                }\n            },\n            \"additionalProperties\": false\n        }\n    ]\n}\n```\n\n----------------------------------------\n\nTITLE: Serializing PackageHash Type\nDESCRIPTION: Describes `PackageHash`, the hex-encoded address of a package associated with an `AddressableEntity`. It is serialized simply as the byte representation of the hash itself.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/versioned_docs/version-2.0.0/concepts/serialization/types.md#2025-04-22_snippet_36\n\nLANGUAGE: text\nCODE:\n```\nThe hex-encoded address of a package associated with an [`AddressableEntity`](./structures.md#addressable-entity), serialized as the byte representation of itself.\n```\n\n----------------------------------------\n\nTITLE: Example: Unbonding via System Auction Contract (Optional Purse Mentioned) (Bash)\nDESCRIPTION: This example demonstrates unbonding using the system auction contract, identical to the previous example, withdrawing 5 CSPR on Testnet. The surrounding text mentions an optional purse argument can be specified to receive the withdrawn amount, though it's not explicitly added in this command example. Ensure all values are adjusted according to your specific use case.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/docs/operators/becoming-a-validator/unbonding.md#2025-04-22_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nsudo -u casper casper-client put-deploy \\\n--node-address http://65.21.75.254:7777 \\\n--secret-key /etc/casper/validator_keys/secret_key.pem \\\n--chain-name casper-test \\\n--payment-amount 2500000000 \\\n--session-hash hash-93d923e336b20a4c4ca14d592b60e5bd3fe330775618290104f9beb326db7ae2 \\\n--session-entry-point withdraw_bid \\\n--session-arg \"public_key:public_key='01c297d2931fec7e22b2fb1ae3ca5afdfacc2c82ba501e8ed158eecef82b4dcdee'\" \\\n--session-arg \"amount:U512='$[5 * 1000000000]'\"\n```\n\n----------------------------------------\n\nTITLE: Modeling Contract Packages, Versions, and Metadata - JSON Schema - JSON\nDESCRIPTION: Describes the contract package object and its required properties, including access keys, version lists, group assignments, and lock status. This schema ensures that contract deployment, versioning, and access control are comprehensively tracked for upgrades, security, and compatibility in Casper contracts.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/condor/jsonrpc-comp/rpc-1.5/schema/components.json.md#2025-04-22_snippet_45\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"description\": \"Contract definition, metadata, and security container.\",\n    \"type\": \"object\",\n    \"required\": [\n        \"access_key\",\n        \"disabled_versions\",\n        \"groups\",\n        \"lock_status\",\n        \"versions\"\n    ],\n    \"properties\": {\n        \"access_key\": {\n            \"$ref\": \"#/components/schemas/URef\"\n        },\n        \"versions\": {\n            \"type\": \"array\",\n            \"items\": {\n                \"$ref\": \"#/components/schemas/ContractVersion\"\n            }\n        },\n        \"disabled_versions\": {\n            \"type\": \"array\",\n            \"items\": {\n                \"$ref\": \"#/components/schemas/DisabledVersion\"\n            }\n        },\n        \"groups\": {\n            \"type\": \"array\",\n            \"items\": {\n                \"$ref\": \"#/components/schemas/Groups\"\n            }\n        },\n        \"lock_status\": {\n            \"$ref\": \"#/components/schemas/ContractPackageStatus\"\n        }\n    },\n    \"additionalProperties\": false\n}\n\n```\n\n----------------------------------------\n\nTITLE: Example JSON Output: Casper Account Details After Key Weight Update\nDESCRIPTION: Shows an example JSON structure representing Casper account details retrieved from global state after the primary key's weight has been successfully updated to 3. It includes the account hash, action thresholds (still default 1), the list of associated keys with their weights, the main purse URef, and named keys.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/docs/resources/advanced/multi-sig/multi-sig-workflow.md#2025-04-22_snippet_7\n\nLANGUAGE: json\nCODE:\n```\n\"Account\": {\n  \"account_hash\": \"account-hash-1ed5a1c39bea93c105f2d22c965a84b205b36734a377d05dbb103b6bfaa595a7\",\n  \"action_thresholds\": {\n    \"deployment\": 1,\n    \"key_management\": 1\n  },\n  \"associated_keys\": [\n    {\n      \"account_hash\": \"account-hash-1ed5a1c39bea93c105f2d22c965a84b205b36734a377d05dbb103b6bfaa595a7\",\n      \"weight\": 3\n    }\n  ],\n  \"main_purse\": \"uref-8294864177c2c1ec887a11dae095e487b5256ce6bd2a1f2740d0e4f28bd3251c-007\",\n  \"named_keys\": []\n}\n```\n\n----------------------------------------\n\nTITLE: Adding Associated Keys to Default Account in Rust\nDESCRIPTION: Session code that adds an associated account to the default account's authorization keys. This increases the deploy threshold to 2, requiring multiple signatures for future deploys.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/docs/resources/advanced/list-auth-keys-tutorial.md#2025-04-22_snippet_8\n\nLANGUAGE: rust\nCODE:\n```\n// Add account_addr_1 to the default account's associated keys\nlet session_code = PathBuf::from(ADD_KEYS_WASM);\nlet session_args = runtime_args! {\n    ASSOCIATED_ACCOUNT => account_addr_1\n};\n\nlet add_keys_deploy_item = DeployItemBuilder::new()\n    .with_empty_payment_bytes(runtime_args! {ARG_AMOUNT => *DEFAULT_PAYMENT})\n    .with_authorization_keys(&[*DEFAULT_ACCOUNT_ADDR])\n    .with_address(*DEFAULT_ACCOUNT_ADDR)\n    .with_session_code(session_code, session_args)\n    .build();\n\nlet add_keys_execute_request =\n    ExecuteRequestBuilder::from_deploy_item(add_keys_deploy_item).build();\n\nbuilder\n    .exec(add_keys_execute_request)\n    .commit()\n    .expect_success();\n```\n\n----------------------------------------\n\nTITLE: Manual Build and Execution Steps for Casper Contract Unit Tests - Bash\nDESCRIPTION: Provides explicit Bash commands to create a Wasm output directory, copy contract Wasm artifact, and run integration tests via cargo test. These commands assume the contract is built for the wasm32-unknown-unknown target and that the directory structure aligns with typical Casper project conventions. Useful when you need to replicate or debug Makefile behavior.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/docs/developers/writing-onchain-code/testing-session-code.md#2025-04-22_snippet_12\n\nLANGUAGE: bash\nCODE:\n```\nmkdir -p tests/wasm\ncp contract/target/wasm32-unknown-unknown/release/contract.wasm tests/wasm\ncd tests && cargo test\n```\n\n----------------------------------------\n\nTITLE: Find Contract Package Hash in JSON\nDESCRIPTION: This JSON structure demonstrates how a contract package hash and its associated name might appear in an account's named keys. Knowing this information is key for calling contracts via package hash.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/versioned_docs/version-1.5.X/developers/cli/calling-contracts.md#2025-04-22_snippet_6\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"key\": \"hash-76a8c3daa6d6ac799ce9f46d82ac98efb271d2d64b517861ec89a06051ef019e\",\n    \"name\": \"counter_package_name\"\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Test Package with cargo (Bash)\nDESCRIPTION: Shows using `cargo new` to generate the package structure (`tests`) for the integration tests accompanying the smart contract. This command is part of the semi-automatic project setup and requires Rust and Cargo. It creates `tests/src/main.rs` (often renamed, e.g., to `integration-tests.rs`) and `tests/Cargo.toml`.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/versioned_docs/version-1.5.X/developers/writing-onchain-code/simple-contract.md#2025-04-22_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\ncargo new tests\n```\n\n----------------------------------------\n\nTITLE: Querying Counter Value\nDESCRIPTION: Retrieve the current value of the counter from the network state.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/versioned_docs/version-2.0.0/resources/beginner/counter/walkthrough.md#2025-04-22_snippet_9\n\nLANGUAGE: bash\nCODE:\n```\ncasper-client query-global-state --node-address http://localhost:11101 \\\n    --state-root-hash [STATE_ROOT_HASH] \\\n    --key [ACCOUNT_HASH] -q \"counter/count\"\n```\n\n----------------------------------------\n\nTITLE: Retrieving Caller's Authorization Keys\nDESCRIPTION: Code snippet showing how to retrieve authorization keys for the caller's deploy.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/versioned_docs/version-2.0.0/resources/advanced/list-auth-keys-tutorial.md#2025-04-22_snippet_4\n\nLANGUAGE: rust\nCODE:\n```\nlet authorization_keys_caller: Vec<AccountHash> =\n    runtime::list_authorization_keys().iter().cloned().collect();\n```\n\n----------------------------------------\n\nTITLE: Querying Global State in Casper Network\nDESCRIPTION: This command queries the global state of a Casper Network for a specific variable ('counter/count'). It requires the state root hash and account hash as parameters. This is used to verify the result of a previously executed session code.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/versioned_docs/version-1.5.X/resources/beginner/counter/walkthrough.md#2025-04-22_snippet_14\n\nLANGUAGE: bash\nCODE:\n```\ncasper-client query-global-state --node-address http://localhost:11101 \\\n    --state-root-hash [STATE_ROOT_HASH]\n    --key [ACCOUNT_HASH] -q \"counter/count\"\n```\n\n----------------------------------------\n\nTITLE: Retrieving Deploy Information for Transfer Verification\nDESCRIPTION: Command to get details about a specific deploy using its hash. This is the first step in verifying a transfer, as it helps identify the transfer hash within the deploy.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/versioned_docs/version-2.0.0/developers/cli/transfers/verify-transfer.md#2025-04-22_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\ncasper-client get-deploy \\\n--node-address [NODE_SERVER_ADDRESS]  \\\n[DEPLOY_HASH]\n```\n\n----------------------------------------\n\nTITLE: Example Token Balance Query Response\nDESCRIPTION: This is an example response from querying global state for a CEP-18 token balance. It shows the stored value in CLValue format with the parsed balance of 10 tokens.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/versioned_docs/version-1.5.X/resources/tokens/cep18/transfer.md#2025-04-22_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\n{\n  \"id\": -8841145064950441692,\n  \"jsonrpc\": \"2.0\",\n  \"result\": {\n    \"api_version\": \"1.0.0\",\n    \"block_header\": null,\n    \"merkle_proof\": \"[3796 hex chars]\",\n    \"stored_value\": {\n      \"CLValue\": {\n        \"bytes\": \"010a\",\n        \"cl_type\": \"U256\",\n        \"parsed\": \"10\"\n      }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Fixing Casper Node File Permissions\nDESCRIPTION: Executes the `node_util.py` script (typically located at `/etc/casper/`) with the `fix_permissions` command using `sudo`. This ensures that the files within the Casper node's data directory have the correct ownership and permissions, often needed after manual extraction or restoration.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/docs/operators/maintenance/archiving-and-restoring.md#2025-04-22_snippet_9\n\nLANGUAGE: bash\nCODE:\n```\nsudo /etc/casper/node_util.py fix_permissions\n```\n\n----------------------------------------\n\nTITLE: Verifying Deploy Status using Casper Client (Bash)\nDESCRIPTION: Retrieves the status and execution results of a specific deploy from a Casper node using its deploy hash. This command is used to confirm whether a deploy, such as adding or removing a key, has been successfully processed by the network.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/versioned_docs/version-2.0.0/resources/advanced/multi-sig/multi-sig-workflow.md#2025-04-22_snippet_13\n\nLANGUAGE: bash\nCODE:\n```\ncasper-client get-deploy --node-address https://node.testnet.casper.network <DEPLOY_HASH>\n```\n\n----------------------------------------\n\nTITLE: Defining CLType List Schema in JSON\nDESCRIPTION: JSON schema definition for a List type in Casper's type system. This represents a variable-length list of a single CLType.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/condor/jsonrpc-comp/rpc-1.5/schema/components.json.md#2025-04-22_snippet_4\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"required\": [\n        \"List\"\n    ],\n    \"properties\": {\n        \"List\": {\n            \"$ref\": \"#/components/schemas/CLType\"\n        }\n    },\n    \"additionalProperties\": false\n}\n```\n\n----------------------------------------\n\nTITLE: Sample Test Output for Casper Contract\nDESCRIPTION: This is a sample output from running tests on the Casper smart contract. It shows a successful test run with two tests passing and none failing.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/versioned_docs/version-1.5.X/developers/writing-onchain-code/getting-started.md#2025-04-22_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\nrunning 2 tests\ntest tests::should_error_on_missing_runtime_arg ... ok\ntest tests::should_store_hello_world ... ok\n\ntest result: ok. 2 passed; 0 failed; 0 ignored; 0 measured; 0 filtered out; finished in 0.09s\n```\n\n----------------------------------------\n\nTITLE: Installing pkg-config on MacOS\nDESCRIPTION: Command to install pkg-config utility on MacOS using Homebrew.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/docs/developers/dapps/setup-nctl.md#2025-04-22_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n$ brew install pkg-config\n```\n\n----------------------------------------\n\nTITLE: Changing Bid Public Key via Auction Contract Entry Point\nDESCRIPTION: Command to change a validator bid's public key by calling the auction contract's change_bid_public_key entry point directly. Requires 5 CSPR payment and various parameters including node address, chain name, and both current and new public keys.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/versioned_docs/version-2.0.0/operators/becoming-a-validator/change-bid-public-key.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nsudo -u casper casper-client put-txn \\\n--node-address <HOST:PORT> \\\n--secret-key <PATH> \\\n--chain-name <CHAIN_NAME> \\\n--payment-amount <PAYMENT_AMOUNT_IN_MOTES> \\\n--session-hash <SESSION_HASH> \\\n--session-entry-point change_bid_public_key \\\n--session-arg=\"public_key:public_key='<PUBLIC_KEY_HEX>'\" \\\n--session-arg=\"new_public_key:public_key='<PUBLIC_KEY_HEX>'\"\n```\n\n----------------------------------------\n\nTITLE: Rotating Logs and Starting Casper Node - Bash\nDESCRIPTION: These bash commands rotate the node logs and start the Casper node service using the provided node_util.py utility script. Must be executed with sudo privileges, typically after configuration is complete. This ensures the node launches in a clean state and begins block syncing.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/docs/operators/setup/install-node.md#2025-04-22_snippet_13\n\nLANGUAGE: bash\nCODE:\n```\nsudo /etc/casper/node_util.py rotate_logs\\nsudo /etc/casper/node_util.py start\n```\n\n----------------------------------------\n\nTITLE: Administrator Configuration - Casper Network\nDESCRIPTION: TOML configuration for specifying network administrators in chainspec.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/docs/operators/setup-network/create-private.md#2025-04-22_snippet_29\n\nLANGUAGE: toml\nCODE:\n```\n[core]\nadministrators = [\"NEW_PUBLIC_KEY\"]\n```\n\n----------------------------------------\n\nTITLE: Defining ExecutionResult Schema in JSON\nDESCRIPTION: JSON schema definition for an ExecutionResult in Casper's system. This schema includes the Failure variant which represents the result of a failed execution.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/condor/jsonrpc-comp/rpc-1.5/schema/components.json.md#2025-04-22_snippet_15\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"description\": \"The result of executing a single deploy.\",\n    \"anyOf\": [\n        {\n            \"description\": \"The result of a failed execution.\",\n            \"type\": \"object\",\n            \"required\": [\n                \"Failure\"\n            ],\n            \"properties\": {\n                \"Failure\": {\n                    \"type\": \"object\",\n                    \"required\": [\n                        \"cost\",\n                        \"effect\",\n                        \"error_message\",\n                        \"transfers\"\n                    ],\n                    \"properties\": {\n                        \"effect\": {\n                            \"description\": \"The effect of executing the deploy.\",\n                            \"allOf\": [\n                                {\n                                    \"$ref\": \"#/components/schemas/ExecutionEffect\"\n                                }\n                            ]\n                        },\n                        \"transfers\": {\n                            \"description\": \"A record of Transfers performed while executing the deploy.\",\n                            \"type\": \"array\",\n                            \"items\": {\n                                \"$ref\": \"#/components/schemas/TransferAddr\"\n                            }\n                        },\n                        \"cost\": {\n                            \"description\": \"The cost of executing the deploy.\",\n                            \"allOf\": [\n                                {\n                                    \"$ref\": \"#/components/schemas/U512\"\n                                }\n                            ]\n                        },\n                        \"error_message\": {\n                        }\n                    }\n                }\n            }\n        }\n    ]\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Standard Payment Parameter for Deploy in JavaScript\nDESCRIPTION: Creates the `payment` part of a deploy using a standard payment amount. It takes the `deployCost` (in motes, typically obtained from the network's chainspec) as input. Depends on `DeployUtil` from the `casper-js-sdk`.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/docs/resources/advanced/list-cspr.md#2025-04-22_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nimport { DeployUtil } from 'casper-js-sdk';\n\nconst payment = DeployUtil.standardPayment(deployCost);\n```\n\n----------------------------------------\n\nTITLE: Defining PurseIdentifier Schema in JSON\nDESCRIPTION: JSON schema for identifying a purse in the Casper Network, allowing for identification by public key, account hash, or entity address.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/condor/jsonrpc-comp/rpc-2.0/schema/components.json.md#2025-04-22_snippet_74\n\nLANGUAGE: json\nCODE:\n```\n\"PurseIdentifier\": {\n    \"description\": \"Identifier of a purse.\",\n    \"oneOf\": [\n        {\n            \"description\": \"The main purse of the account identified by this public key.\",\n            \"type\": \"object\",\n            \"required\": [\n                \"main_purse_under_public_key\"\n            ],\n            \"properties\": {\n                \"main_purse_under_public_key\": {\n                    \"$ref\": \"#/components/schemas/PublicKey\"\n                }\n            },\n            \"additionalProperties\": false\n        },\n        {\n            \"description\": \"The main purse of the account identified by this account hash.\",\n            \"type\": \"object\",\n            \"required\": [\n                \"main_purse_under_account_hash\"\n            ],\n            \"properties\": {\n                \"main_purse_under_account_hash\": {\n                    \"$ref\": \"#/components/schemas/AccountHash\"\n                }\n            },\n            \"additionalProperties\": false\n        },\n        {\n            \"description\": \"The main purse of the account identified by this entity address.\",\n            \"type\": \"object\",\n            \"required\": [\n                \"main_purse_under_entity_addr\"\n            ],\n            \"properties\": {\n                \"main_purse_under_entity_addr\": {\n                    \"$ref\": \"#/components/schemas/EntityAddr\"\n                }\n            },\n            \"additionalProperties\": false\n        }\n    ]\n}\n```\n\n----------------------------------------\n\nTITLE: Querying Account State\nDESCRIPTION: Command to query the global state for a specific account using the node address, state root hash, and account hash.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/versioned_docs/version-1.5.X/resources/tokens/cep78/using-casper-client/full-installation-tutorial.md#2025-04-22_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\ncasper-client query-global-state --node-address http://<HOST:PORT> \\\n--state-root-hash [STATE_ROOT_HASH] \\\n--key [ACCOUNT_HASH]\n```\n\n----------------------------------------\n\nTITLE: Example Undelegation via Compiled WASM\nDESCRIPTION: Example command showing undelegation of 100 CSPR on the Casper Testnet using the compiled WASM method with a 6 CSPR payment.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/versioned_docs/version-1.5.X/developers/cli/undelegate.md#2025-04-22_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\ncasper-client put-deploy \\\n--node-address http://65.21.75.254:7777  \\\n--chain-name casper-test \\\n--secret-key ~/KEYS/secret_key.pem \\\n--payment-amount 6000000000 \\\n--session-path ~/undelegate.wasm \\\n--session-arg \"validator:public_key='01aa17f7b9889480b1bd34c3f94f263b229c7a9b01dd4dda19c2dd1d38d176c7a0'\" \\\n--session-arg \"amount:u512='100000000000'\" \\\n--session-arg \"delegator:public_key='01e3d3392c2e0b943abe709b25de5c353e5e1e9d95c7a76e3dd343d8aa1aa08d51'\"\n```\n\n----------------------------------------\n\nTITLE: Creating a Tar Archive with Sparse File Handling\nDESCRIPTION: Uses the `tar` command to create an archive (`-c`) of the current directory (`.`), verbose output (`-v`), while efficiently handling sparse files (`--sparse`). This is recommended as a pre-filter before Zstandard compression for Casper node databases.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/docs/operators/maintenance/archiving-and-restoring.md#2025-04-22_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ntar -cv --sparse .\n```\n\n----------------------------------------\n\nTITLE: Defining JSON Schema for Chainspec\nDESCRIPTION: The JSON schema for the \"info_get_chainspec\" RPC. This RPC fetches the raw bytes of the chainspec, genesis accounts, and global state TOML files. It requires the API version and chainspec bytes as mandatory fields. ChainspecRawBytes is another component related to this schema.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/condor/jsonrpc-comp/rpc-1.5/schema.json.md#2025-04-22_snippet_15\n\nLANGUAGE: json\nCODE:\n```\n{ \"name\": \"info_get_chainspec\", \"summary\": \"returns the raw bytes of the chainspec.toml, genesis accounts.toml, and global_state.toml files\", \"params\": [], \"result\": { \"name\": \"info_get_chainspec_result\", \"schema\": { \"description\": \"Result for the \\\"info_get_chainspec\\\" RPC.\", \"type\": \"object\", \"required\": [ \"api_version\", \"chainspec_bytes\" ], \"properties\": { \"api_version\": { \"description\": \"The RPC API version.\", \"type\": \"string\" }, \"chainspec_bytes\": { \"description\": \"The chainspec file bytes.\", \"$ref\": \"#/components/schemas/ChainspecRawBytes\" } } } } }\n```\n\n----------------------------------------\n\nTITLE: Installing Network Configuration\nDESCRIPTION: Commands to download and install network configuration for a new Casper network\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/versioned_docs/version-2.0.0/operators/setup-network/staging-files-for-new-network.md#2025-04-22_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\ncd /etc/casper/network_configs\nsudo -u casper curl -JLO casper.mydomain.com/our-network/our-network.conf\n```\n\n----------------------------------------\n\nTITLE: Defining Constants for Casper Smart Contract\nDESCRIPTION: Global constants definition for contract package name, access URefs, entry points, and other contract values used within the counter contract.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/versioned_docs/version-2.0.0/developers/writing-onchain-code/simple-contract.md#2025-04-22_snippet_8\n\nLANGUAGE: rust\nCODE:\n```\nconst CONTRACT_PACKAGE_NAME: &str = \"counter_package_name\";\nconst CONTRACT_ACCESS_UREF: &str = \"counter_access_uref\";\n\nconst ENTRY_POINT_COUNTER_INC: &str = \"counter_inc\";\nconst ENTRY_POINT_COUNTER_GET: &str = \"counter_get\";\n\nconst CONTRACT_VERSION_KEY: &str = \"version\";\nconst CONTRACT_KEY: &str = \"counter\";\nconst COUNT_KEY: &str = \"count\";\n```\n\n----------------------------------------\n\nTITLE: Checking Node Sync Status in Bash\nDESCRIPTION: This command retrieves the last added block information from the local node, which can be compared with the network's current block height to check sync status.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/versioned_docs/version-2.0.0/operators/becoming-a-validator/recovering.md#2025-04-22_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\ncurl -s localhost:8888/status | jq .last_added_block_info\n```\n\n----------------------------------------\n\nTITLE: Sample Message Topic Query\nDESCRIPTION: Example of querying message topic information using actual hash values and node address.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/docs/developers/writing-onchain-code/emitting-contract-events.md#2025-04-22_snippet_14\n\nLANGUAGE: bash\nCODE:\n```\ncasper-client query-global-state --node-address http://127.0.0.1:11101 \\\n--key \"message-topic-803c759a466a84a0ab12147857f49e269369796a66ad37e94ab8343ddddb7823-topic-name-5721a6d9d7a9afe5dfdb35276fb823bed0f825350e4d865a5ec0110c380de4e1\" \\\n--block-identifier d9642c5d90c7fc05a23d83a3abcf56d63cb71316402ecefe0962fdeccad2c99c\n```\n\n----------------------------------------\n\nTITLE: Casper Account State Structure After Key Removal - JSON\nDESCRIPTION: Shows the account's JSON state after the associated key has been removed by the `remove_account.wasm`. Reveals updated list of associated keys and action thresholds, confirming effect of the removal operation. Used to validate correct outcome post-removal in multi-key scenarios.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/versioned_docs/version-1.5.X/resources/advanced/multi-sig/multi-sig-workflow.md#2025-04-22_snippet_23\n\nLANGUAGE: json\nCODE:\n```\n\"Account\": {\n  \"account_hash\": \"account-hash-1ed5a1c39bea93c105f2d22c965a84b205b36734a377d05dbb103b6bfaa595a7\",\n  \"action_thresholds\": {\n    \"deployment\": 2,\n    \"key_management\": 3\n  },\n  \"associated_keys\": [\n    {\n      \"account_hash\": \"account-hash-04a9691a9f8f05a0f08bd686f188b27c7dbcd644b415759fd3ca043d916ea02f\",\n      \"weight\": 1\n    },\n    {\n      \"account_hash\": \"account-hash-1ed5a1c39bea93c105f2d22c965a84b205b36734a377d05dbb103b6bfaa595a7\",\n      \"weight\": 3\n    },\n    {\n      \"account_hash\": \"account-hash-e2d00525cac31ae2756fb155f289d276c6945b6914923fe275de0cb127bffee7\",\n      \"weight\": 1\n    }\n  ],\n  \"main_purse\": \"uref-8294864177c2c1ec887a11dae095e487b5256ce6bd2a1f2740d0e4f28bd3251c-007\",\n  \"named_keys\": []\n}\n```\n\n----------------------------------------\n\nTITLE: Deploying Multi-Sig Contract\nDESCRIPTION: Command to deploy the multi-signature contract using the Casper client. Includes configuration for node address, secret key, chain name, and session arguments.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/versioned_docs/version-2.0.0/resources/advanced/two-party-multi-sig.md#2025-04-22_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\ncasper-client put-deploy \\\n--node-address http://<peer-ip-address>:7777 \\\n--secret-key <secret-key-MA>.pem \\\n--chain-name casper-test \\\n--payment-amount 2500000000 \\\n--session-path <path-to-contract-wasm> \\\n--session-arg \"deployment-account:account_hash='account-hash-<hash-AA>'\"\n```\n\n----------------------------------------\n\nTITLE: Defining StateRootHash Query Schema in JSON\nDESCRIPTION: JSON schema for querying using a state root hash, which requires the StateRootHash property referencing the Digest schema.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/condor/jsonrpc-comp/rpc-2.0/schema/components.json.md#2025-04-22_snippet_63\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"description\": \"Query using the state root hash.\",\n    \"type\": \"object\",\n    \"required\": [\n        \"StateRootHash\"\n    ],\n    \"properties\": {\n        \"StateRootHash\": {\n            \"$ref\": \"#/components/schemas/Digest\"\n        }\n    },\n    \"additionalProperties\": false\n}\n```\n\n----------------------------------------\n\nTITLE: Retrieving Deploy Information with casper-client\nDESCRIPTION: This command uses the casper-client to retrieve information about a specific deploy using its hash. It requires the node address and deploy hash as parameters.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/versioned_docs/version-2.0.0/developers/cli/transfers/direct-token-transfer.md#2025-04-22_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\ncasper-client get-deploy \\\n--node-address [NODE_SERVER_ADDRESS] [DEPLOY_HASH]\n```\n\n----------------------------------------\n\nTITLE: Defining Contract Hash Schema in JSON\nDESCRIPTION: JSON schema definition that specifies the contract hash address should be a string value. This schema is used to validate the format of contract hash addresses in the system.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/condor/jsonrpc-comp/rpc-1.5/schema/ContractHash.json.md#2025-04-22_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"description\": \"The hash address of the contract\",\n    \"type\": \"string\"\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Constants for Smart Contract Tests in Rust\nDESCRIPTION: This snippet defines global constants that are used across smart contract tests to reference contract details and entry points in the Casper Network.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/docs/developers/writing-onchain-code/testing-contracts.md#2025-04-22_snippet_4\n\nLANGUAGE: rust\nCODE:\n```\n    const COUNTER_V1_WASM: &str = \"counter-v1.wasm\"; // The first version of the contract\n    const COUNTER_V2_WASM: &str = \"counter-v2.wasm\"; // The second version of the contract\n    const COUNTER_CALL_WASM: &str = \"counter-call.wasm\"; // Session code that calls the contract\n\n    const CONTRACT_KEY: &str = \"counter\"; // Named key referencing this contract\n    const COUNT_KEY: &str = \"count\"; // Named key referencing the value to increment/decrement\n    const CONTRACT_VERSION_KEY: &str = \"version\"; // Key maintaining the version of a contract package\n\n    const ENTRY_POINT_COUNTER_DECREMENT: &str = \"counter_decrement\"; // Entry point to decrement the count value\n    const ENTRY_POINT_COUNTER_INC: &str = \"counter_inc\"; // Entry point to increment the count value\n```\n\n----------------------------------------\n\nTITLE: Querying Casper Network Contract Value\nDESCRIPTION: Retrieve the specific count value from the counter contract on the Casper network.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/versioned_docs/version-1.5.X/resources/beginner/counter-testnet/walkthrough.md#2025-04-22_snippet_8\n\nLANGUAGE: bash\nCODE:\n```\ncasper-client query-global-state --node-address http://[NODE_IP]:7777 \\\n    --state-root-hash [STATE_ROOT_HASH] \\\n    --key [ACCOUNT_HASH] -q \"counter/count\"\n```\n\n----------------------------------------\n\nTITLE: Installing Pip on MacOS\nDESCRIPTION: Commands to download and install the pip package manager for Python 3 on MacOS systems.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/versioned_docs/version-1.5.X/developers/dapps/setup-nctl.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ncurl https://bootstrap.pypa.io/get-pip.py -o get-pip.py\npython3 get-pip.py\n```\n\n----------------------------------------\n\nTITLE: Building the Sample Wasm for Key Management\nDESCRIPTION: This snippet includes commands to update Rust, prepare the environment, and run tests for the session code. It involves updating the Rust installation, setting the Wasm target, and verifying the code.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/versioned_docs/version-1.5.X/resources/advanced/multi-sig/multi-sig-workflow.md#2025-04-22_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nrustup update\nmake prepare\nmake test\n```\n\n----------------------------------------\n\nTITLE: Querying Utility Contract for CEP-18 in JSON\nDESCRIPTION: A Casper client command to query the utility contract associated with CEP-18. It retrieves data from the utility contract by specifying its contract hash and state root hash. It requires finding the utility contract's hash within the installing account's `NamedKeys`.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/docs/resources/tokens/cep18/query.md#2025-04-22_snippet_3\n\nLANGUAGE: json\nCODE:\n```\ncasper-client query-global-state -n http://<HOST IP>:<PORT> \\\n// This is the contract hash for the `cep18_test_contract` as found from the installing account's `NamedKeys`\n--key hash-015b99020edb40e7e1e2b31a8e104bc226242f960a2d10dc1d91ae3eb6fa41b6 \\\n--state-root-hash f9f73c3a4da5893b67c4cac94a5695d76cfefff61b050c98a7b19e2b8efd3933\n```\n\n----------------------------------------\n\nTITLE: Defining EntryPoint Configuration for a Smart Contract in Casper Network\nDESCRIPTION: This code snippet defines a 'pay' entry point for a Casper smart contract. The entry point accepts a U512 amount parameter, returns Unit, has public access, and is configured as a 'Called' type with 'Caller' payment responsibility.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/docs/developers/json-rpc/json-rpc-transactional.md#2025-04-22_snippet_14\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"key\": \"entry-point-v1-entity-contract-eb1c971063155d461059292e91cfe2212d45b79a49294b8d90bdae18cda6e59e-0c5d85bbfb4ae1310aff9ce7b0699549e6d5d5094eba44c5fe2b1e278a673166\",\n    \"kind\": {\n        \"Write\": {\n            \"EntryPoint\": {\n                \"V1CasperVm\": {\n                    \"name\": \"pay\",\n                    \"args\": [\n                        {\n                            \"name\": \"amount\",\n                            \"cl_type\": \"U512\"\n                        }\n                    ],\n                    \"ret\": \"Unit\",\n                    \"access\": \"Public\",\n                    \"entry_point_type\": \"Called\",\n                    \"entry_point_payment\": \"Caller\"\n                }\n            }\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Multi-Key Account Configuration in JSON\nDESCRIPTION: This JSON snippet details an account with both primary and associated keys. The primary key has a higher weight, allowing it to conduct both account updates and deploys. In contrast, the associated key has a lower weight, permitting only deployment signing. This configuration uses a weighted key system to segregate account operations, attributing different responsibilities based on key weights.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/versioned_docs/version-1.5.X/resources/advanced/multi-sig/other-scenarios.md#2025-04-22_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n   \"account_address\": \"account-hash-a1…\",\n   \"action_thresholds\": {\n      \"deployment\": 1,\n      \"key_management\": 2\n   },\n   \"associated_keys\": [\n      {\n         \"account_address\": \"account-hash-a1…\", // primary key for key management\n         \"weight\": 2\n      },\n      {\n         \"account_address\": \"account-hash-b2…\", // associated key used for deploys\n         \"weight\": 1\n      }\n   ],\n   \"main_purse\": \"uref-1234…\",\n   \"named_keys\": []\n}\n```\n\n----------------------------------------\n\nTITLE: Describing Entity Action Thresholds Serialization (Casper Network)\nDESCRIPTION: Defines Entity Action Thresholds, specifying minimum weight thresholds for actions. It serializes as three consecutive u8 values representing the thresholds for deployment, upgrade management, and key management, respectively.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/versioned_docs/version-2.0.0/concepts/serialization/types.md#2025-04-22_snippet_19\n\nLANGUAGE: Text\nCODE:\n```\n## Entity Action Thresholds {#entity-action-thresholds}\n\nThe minimum weight thresholds that have to be met when executing an action of a certain type. It serializes as three consecutive [`u8` values](./primitives.md#clvalue-numeric) as follows.\n\n-   `deployment`: The minimum weight threshold required to perform deployment actions as a `u8` value.\n\n-   `upgrade_management`: The minimum weight threshold required to perform upgrade management actions as a `u8` value.\n\n-   `key_management`: The minimum weight threshold required to perform key management actions as a `u8` value.\n```\n\n----------------------------------------\n\nTITLE: Importing Dependencies for Casper Smart Contract\nDESCRIPTION: This code imports necessary external crates and types for developing a Casper smart contract. It includes Rust standard types, Casper contract API functions, and specific Casper types needed for contract functionality.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/versioned_docs/version-1.5.X/developers/writing-onchain-code/simple-contract.md#2025-04-22_snippet_8\n\nLANGUAGE: rust\nCODE:\n```\n// This code imports necessary aspects of external crates that we will use in our contract code.\nextern crate alloc;\n\n// Importing Rust types.\nuse alloc::\n    string::{String, ToString},\n    vec::Vec,\n};\n// Importing aspects of the Casper platform.\nuse casper_contract::\n    contract_api::{runtime, storage},\n    unwrap_or_revert::UnwrapOrRevert,\n};\n// Importing specific Casper types.\nuse casper_types::\n    api_error::ApiError,\n    contracts::{EntryPoint, EntryPointAccess, EntryPointType, EntryPoints, NamedKeys},\n    CLType, CLValue, URef,\n};\n```\n\n----------------------------------------\n\nTITLE: Installing Rust Nightly Toolchain\nDESCRIPTION: Command to install the nightly Rust toolchain, which is recommended for Casper smart contract development.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/versioned_docs/version-2.0.0/developers/writing-onchain-code/getting-started.md#2025-04-22_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nrustup toolchain install nightly\n```\n\n----------------------------------------\n\nTITLE: Defining BlockHash Schema in JSON\nDESCRIPTION: JSON schema definition for a BlockHash in Casper's system. This represents a cryptographic hash identifying a Block.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/condor/jsonrpc-comp/rpc-1.5/schema/components.json.md#2025-04-22_snippet_14\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"description\": \"A cryptographic hash identifying a [`Block`](struct.Block.html).\",\n    \"allOf\": [\n        {\n            \"$ref\": \"#/components/schemas/Digest\"\n        }\n    ]\n}\n```\n\n----------------------------------------\n\nTITLE: Defining BlockHeaderV1 Schema in JSON\nDESCRIPTION: Detailed JSON schema for BlockHeaderV1 which contains fields like parent_hash, state_root_hash, body_hash, and other metadata about a block in the Casper blockchain.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/condor/jsonrpc-comp/rpc-2.0/schema/components.json.md#2025-04-22_snippet_65\n\nLANGUAGE: json\nCODE:\n```\n\"BlockHeaderV1\": {\n    \"description\": \"The header portion of a block.\",\n    \"type\": \"object\",\n    \"required\": [\n        \"accumulated_seed\",\n        \"body_hash\",\n        \"era_id\",\n        \"height\",\n        \"parent_hash\",\n        \"protocol_version\",\n        \"random_bit\",\n        \"state_root_hash\",\n        \"timestamp\"\n    ],\n    \"properties\": {\n        \"parent_hash\": {\n            \"description\": \"The parent block's hash.\",\n            \"allOf\": [\n                {\n                    \"$ref\": \"#/components/schemas/BlockHash\"\n                }\n            ]\n        },\n        \"state_root_hash\": {\n            \"description\": \"The root hash of global state after the deploys in this block have been executed.\",\n            \"allOf\": [\n                {\n                    \"$ref\": \"#/components/schemas/Digest\"\n                }\n            ]\n        },\n        \"body_hash\": {\n            \"description\": \"The hash of the block's body.\",\n            \"allOf\": [\n                {\n                    \"$ref\": \"#/components/schemas/Digest\"\n                }\n            ]\n        },\n        \"random_bit\": {\n            \"description\": \"A random bit needed for initializing a future era.\",\n            \"type\": \"boolean\"\n        },\n        \"accumulated_seed\": {\n            \"description\": \"A seed needed for initializing a future era.\",\n            \"allOf\": [\n                {\n                    \"$ref\": \"#/components/schemas/Digest\"\n                }\n            ]\n        },\n        \"era_end\": {\n            \"description\": \"The `EraEnd` of a block if it is a switch block.\",\n            \"anyOf\": [\n                {\n                    \"$ref\": \"#/components/schemas/EraEndV1\"\n                },\n                {\n                    \"type\": \"null\"\n                }\n            ]\n        },\n        \"timestamp\": {\n            \"description\": \"The timestamp from when the block was proposed.\",\n            \"allOf\": [\n                {\n                    \"$ref\": \"#/components/schemas/Timestamp\"\n                }\n            ]\n        },\n        \"era_id\": {\n            \"description\": \"The era ID in which this block was created.\",\n            \"allOf\": [\n                {\n                    \"$ref\": \"#/components/schemas/EraId\"\n                }\n            ]\n        },\n        \"height\": {\n            \"description\": \"The height of this block, i.e. the number of ancestors.\",\n            \"type\": \"integer\",\n            \"format\": \"uint64\",\n            \"minimum\": 0.0\n        },\n        \"protocol_version\": {\n            \"description\": \"The protocol version of the network from when this block was created.\",\n            \"allOf\": [\n                {\n                    \"$ref\": \"#/components/schemas/ProtocolVersion\"\n                }\n            ]\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Sending a Speculative Execution Deploy with Casper Rust CLI (Bash)\nDESCRIPTION: Demonstrates the command structure for sending a Deploy for speculative execution using the Casper Rust client CLI. The `--speculative-exec` flag signals the node to execute the Deploy against a specified block (or the latest if none is provided) without committing it, allowing for cost estimation. Requires the Casper client, node address, chain name, secret key path, session code path, payment amount, and optionally a block identifier.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/docs/developers/dapps/speculative-exec.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ncasper client put-deploy / \\\n--node-address <HOST:PORT> / \\\n--chain-name <CHAIN_NAME> / \\\n--secret-key <PATH> / \\\n--session-path <PATH>  / \\\n--payment-amount <PAYMENT_AMOUNT_IN_MOTES> \\\n--speculative-exec <BLOCK HEIGHT OR HASH>\n```\n\n----------------------------------------\n\nTITLE: Casper Client Deploy Command\nDESCRIPTION: Example of passing named arguments to a Casper smart contract entry point using the casper-client CLI.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/versioned_docs/version-2.0.0/resources/moving-to-casper.md#2025-04-22_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\ncasper-client put-deploy \\\n  --node-address http://65.21.235.219:7777 \\\n  --chain-name casper-test \\\n  --secret-key [KEY_PATH]/secret_key.pem \\\n  --payment-amount 2500000000 \\\n  --session-hash hash-93d923e336b20a4c4ca14d592b60e5bd3fe330775618290104f9beb326db7ae2 \\\n  --session-entry-point \"delegate\" \\\n  --session-arg \"validator:public_key='0145fb72c75e1b459839555d70356a5e6172e706efa204d86c86050e2f7878960f'\" \\\n  --session-arg \"amount:u512='500000000000'\" \\\n  --session-arg \"delegator:public_key='0154d828baafa6858b92919c4d78f26747430dcbecb9aa03e8b44077dc6266cabf'\"\n```\n\n----------------------------------------\n\nTITLE: Query CEP-18 Test Contract with Modified Contract Hash\nDESCRIPTION: This command queries the CEP-18 test contract by converting the `contract` prefix to `hash` in the result hash obtained earlier and executing a query-global-state command to obtain detailed contract information.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/docs/resources/tokens/cep18/query.md#2025-04-22_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\ncasper-client query-global-state -n http://<HOST IP>:<PORT> \\\n--key hash-a8fe057675930f0951d45816c55615228ac8af2b7b231788278dffcf1dd8c0ca \\\n--state-root-hash f9f73c3a4da5893b67c4cac94a5695d76cfefff61b050c98a7b19e2b8efd3933\n```\n\n----------------------------------------\n\nTITLE: Setting Maximum Message Size in TOML\nDESCRIPTION: Configuration setting that defines the maximum allowed size in bytes for serialized message payloads.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/docs/developers/writing-onchain-code/emitting-contract-events.md#2025-04-22_snippet_16\n\nLANGUAGE: toml\nCODE:\n```\nmax_message_size = 1_024\n```\n\n----------------------------------------\n\nTITLE: Building Installer Deploy Item in Rust for Casper Contract Test\nDESCRIPTION: This Rust snippet demonstrates building a `DeployItem` for installing a contract in a Casper integration test (Test 7). It sets the session code from `CONTRACT_WASM`, configures payment using `ARG_AMOUNT` and `DEFAULT_PAYMENT`, specifies `DEFAULT_ACCOUNT_ADDR` as the sole authorization key, and sets the deploy's source address also to `DEFAULT_ACCOUNT_ADDR`. This setup prepares the contract environment for subsequent authorization tests.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/versioned_docs/version-2.0.0/resources/advanced/list-auth-keys-tutorial.md#2025-04-22_snippet_15\n\nLANGUAGE: rust\nCODE:\n```\n```rust\nlet session_code = PathBuf::from(CONTRACT_WASM);\n\nlet deploy_item = DeployItemBuilder::new()\n    .with_empty_payment_bytes(runtime_args! {ARG_AMOUNT => *DEFAULT_PAYMENT})\n    .with_authorization_keys(&[*DEFAULT_ACCOUNT_ADDR])\n    .with_address(*DEFAULT_ACCOUNT_ADDR)\n    .with_session_code(session_code, runtime_args! {})\n    .build();\n```\n```\n\n----------------------------------------\n\nTITLE: Defining JSON Schema for Contract Metadata\nDESCRIPTION: This JSON schema defines the structure required for contract metadata in the Casper network. It specifies mandatory fields such as 'contract_hash', 'contract_version', and 'protocol_version_major'. The 'protocol_version_major' and 'contract_version' are integers with a minimum value of 0 and formatted as uint32, whereas 'contract_hash' references a 'ContractHash' schema. The schema ensures data integrity and type safety by enforcing these requirements.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/condor/jsonrpc-comp/rpc-2.0/schema/ContractVersion.json.md#2025-04-22_snippet_0\n\nLANGUAGE: JSON\nCODE:\n```\n{\n    \"type\": \"object\",\n    \"required\": [\n        \"contract_hash\",\n        \"contract_version\",\n        \"protocol_version_major\"\n    ],\n    \"properties\": {\n        \"protocol_version_major\": {\n            \"type\": \"integer\",\n            \"format\": \"uint32\",\n            \"minimum\": 0\n        },\n        \"contract_version\": {\n            \"type\": \"integer\",\n            \"format\": \"uint32\",\n            \"minimum\": 0\n        },\n        \"contract_hash\": {\n            \"$ref\": \"#/components/schemas/ContractHash\"\n        }\n    }\n} \n```\n\n----------------------------------------\n\nTITLE: Defining the JSON Schema for a Block Object (JSON)\nDESCRIPTION: This JSON snippet defines the schema for a `Block` object intended for JSON representation, likely within the Casper Network API. It mandates the presence of `body`, `hash`, `header`, and `proofs` properties. The `hash`, `header`, `body`, and `proofs` fields reference other schema definitions (`BlockHash`, `JsonBlockHeader`, `JsonBlockBody`, and `JsonProof` respectively) for their specific structures. The schema explicitly prohibits any additional properties not defined.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/condor/jsonrpc-comp/rpc-1.5/schema/JsonBlock.json.md#2025-04-22_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"description\": \"A JSON-friendly representation of `Block`.\",\n    \"type\": \"object\",\n    \"required\": [\n        \"body\",\n        \"hash\",\n        \"header\",\n        \"proofs\"\n    ],\n    \"properties\": {\n        \"hash\": {\n            \"description\": \"`BlockHash`\",\n            \"allOf\": [\n                {\n                    \"$ref\": \"#/components/schemas/BlockHash\"\n                }\n            ]\n        },\n        \"header\": {\n            \"description\": \"JSON-friendly block header.\",\n            \"allOf\": [\n                {\n                    \"$ref\": \"#/components/schemas/JsonBlockHeader\"\n                }\n            ]\n        },\n        \"body\": {\n            \"description\": \"JSON-friendly block body.\",\n            \"allOf\": [\n                {\n                    \"$ref\": \"#/components/schemas/JsonBlockBody\"\n                }\n            ]\n        },\n        \"proofs\": {\n            \"description\": \"JSON-friendly list of proofs for this block.\",\n            \"type\": \"array\",\n            \"items\": {\n                \"$ref\": \"#/components/schemas/JsonProof\"\n            }\n        }\n    },\n    \"additionalProperties\": false\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Approval and Signature Schemas in JSON\nDESCRIPTION: JSON schema definitions for Approval and Signature types, specifying required properties and references to other schemas.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/condor/jsonrpc-comp/rpc-1.5/schema.json.md#2025-04-22_snippet_38\n\nLANGUAGE: json\nCODE:\n```\n\"Approval\": {\n  \"description\": \"A struct containing a signature of a deploy hash and the public key of the signer.\",\n  \"type\": \"object\",\n  \"required\": [\n    \"signature\",\n    \"signer\"\n  ],\n  \"properties\": {\n    \"signer\": {\n      \"$ref\": \"#/components/schemas/PublicKey\"\n    },\n    \"signature\": {\n      \"$ref\": \"#/components/schemas/Signature\"\n    }\n  },\n  \"additionalProperties\": false\n},\n\"Signature\": {\n  \"description\": \"Hex-encoded cryptographic signature, including the algorithm tag prefix.\",\n  \"type\": \"string\"\n}\n```\n\n----------------------------------------\n\nTITLE: Checking Auction Info Endpoint Status - Bash\nDESCRIPTION: This simple Bash command queries the Casper node for auction information to verify if the RPC endpoint is online. Dependencies: `casper-client`. It will output current auction status or display an error if the endpoint is unavailable. Used primarily for troubleshooting network or synchronization issues.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/versioned_docs/version-1.5.X/operators/becoming-a-validator/recovering.md#2025-04-22_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\ncasper-client get-auction-info\n```\n\n----------------------------------------\n\nTITLE: Example Upgrade Status Output\nDESCRIPTION: Expected JSON output from the status endpoint showing successful upgrade staging with activation point and protocol version.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/versioned_docs/version-2.0.0/operators/setup/upgrade.md#2025-04-22_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\n$ curl -s localhost:8888/status | jq .next_upgrade\n{\n  \"activation_point\": 4968,\n  \"protocol_version\": \"1.4.6\"\n}\n```\n\n----------------------------------------\n\nTITLE: Querying Account State Using Casper-Client Query-Global-State in Bash\nDESCRIPTION: This Bash snippet demonstrates querying the global state of the Casper blockchain for a specific account, using the casper-client CLI. Required dependencies include casper-client and access to the network. Parameters: 'node-address', 'state-root-hash', and 'key' for the main account public key. Output is the full account details in JSON format, crucial for verifying associated keys and action thresholds.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/docs/resources/advanced/two-party-multi-sig.md#2025-04-22_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\ncasper-client query-global-state \\\n--node-address http://<peer-ip-address>:7777 \\\n--state-root-hash <state-root-hash-from-block> \\\n--key <hex-encoded-public-key-MA>\n```\n\n----------------------------------------\n\nTITLE: Adding Authorization Keys in Casper Network Test\nDESCRIPTION: Test code demonstrating how to add authorization keys to a default account using session code. Sets up the test framework and adds account_addr_1 to the default account's associated keys.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/versioned_docs/version-1.5.X/resources/advanced/list-auth-keys-tutorial.md#2025-04-22_snippet_8\n\nLANGUAGE: rust\nCODE:\n```\nlet session_code = PathBuf::from(ADD_KEYS_WASM);\nlet session_args = runtime_args! {\n    ASSOCIATED_ACCOUNT => account_addr_1\n};\n\nlet add_keys_deploy_item = DeployItemBuilder::new()\n    .with_empty_payment_bytes(runtime_args! {ARG_AMOUNT => *DEFAULT_PAYMENT})\n    .with_authorization_keys(&[*DEFAULT_ACCOUNT_ADDR])\n    .with_address(*DEFAULT_ACCOUNT_ADDR)\n    .with_session_code(session_code, session_args)\n    .build();\n\nlet add_keys_execute_request =\n    ExecuteRequestBuilder::from_deploy_item(add_keys_deploy_item).build();\n\nbuilder\n    .exec(add_keys_execute_request)\n    .commit()\n    .expect_success();\n```\n\n----------------------------------------\n\nTITLE: Defining JSON Schema for Weighted Public Keys\nDESCRIPTION: This JSON snippet defines a schema for a collection of weighted public keys associated with an account. It utilizes a reference to another schema indicating it is part of a larger document structure. Key components include the description, and the allOf construct which references an array of associated keys. This structure is likely used in a blockchain context like the Casper Network.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/condor/jsonrpc-comp/rpc-2.0/schema/EntityAssociatedKeys.json.md#2025-04-22_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"description\": \"A collection of weighted public keys (represented as account hashes) associated with an account.\",\n    \"allOf\": [\n        {\n            \"$ref\": \"#/components/schemas/Array_of_AssociatedKey\"\n        }\n    ]\n}\n```\n\n----------------------------------------\n\nTITLE: Installing CMake Build Tool\nDESCRIPTION: Installation commands for CMake build system on Linux and macOS.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/docs/developers/prerequisites.md#2025-04-22_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\nsudo apt-get -y install cmake\n```\n\nLANGUAGE: bash\nCODE:\n```\nbrew install cmake\n```\n\nLANGUAGE: bash\nCODE:\n```\ncmake --version\n```\n\n----------------------------------------\n\nTITLE: Example Account Query with Verbose Output\nDESCRIPTION: Detailed example of querying account information with verbose output from a specific testnet node.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/versioned_docs/version-2.0.0/resources/beginner/querying-network.md#2025-04-22_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\ncasper-client query-global-state -v \\\n  --id 4 \\\n  --node-address https://node.testnet.casper.network \\\n  --state-root-hash a306a9cf869e52fe9eacdc28aade94215112cc04b6737b3669c35568a47a7dc2 \\\n  --key 01360af61b50cdcb7b92cffe2c99315d413d34ef77fadee0c105cc4f1d4120f986\n```\n\n----------------------------------------\n\nTITLE: Defining Cryptographic Public Keys\nDESCRIPTION: The snippet defines a JSON structure that describes hex-encoded cryptographic public keys with an algorithm tag prefix. It lists different types of public keys (System, Ed25519, and secp256k1), providing specific examples for each type. Key parameters include the 'name', a brief 'description', and a sample 'value' in hex format, ensuring clarity on each key's structure and format.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/condor/jsonrpc-comp/rpc-1.5/schema/PublicKey.json.md#2025-04-22_snippet_0\n\nLANGUAGE: JSON\nCODE:\n```\n{\n    \"description\": \"Hex-encoded cryptographic public key, including the algorithm tag prefix.\",\n    \"examples\": [\n        {\n            \"name\": \"SystemPublicKey\",\n            \"description\": \"A pseudo public key, used for example when the system proposes an immediate switch block after a network upgrade rather than a specific validator. Its hex-encoded value is always '00', as is the corresponding pseudo signature's\",\n            \"value\": \"00\"\n        },\n        {\n            \"name\": \"Ed25519PublicKey\",\n            \"description\": \"An Ed25519 public key. Its hex-encoded value begins '01' and is followed by 64 characters\",\n            \"value\": \"018a88e3dd7409f195fd52db2d3cba5d72ca6709bf1d94121bf3748801b40f6f5c\"\n        },\n        {\n            \"name\": \"Secp256k1PublicKey\",\n            \"description\": \"A secp256k1 public key. Its hex-encoded value begins '02' and is followed by 66 characters\",\n            \"value\": \"0203408e9526316fd1f8def480dd45b2cc72ffd732771c9ceb5d92ffa4051e6ee084\"\n        }\n    ],\n    \"type\": \"string\"\n}\n```\n\n----------------------------------------\n\nTITLE: Describing BlockSignaturesV1 Structure (Casper Network)\nDESCRIPTION: Details the legacy BlockSignaturesV1 structure, used before the Condor release. It contains the block hash, era ID (u64), and proofs (a BTreeMap of public keys to signatures, prefixed with a u32 count). The description specifies the serialization format for each field.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/versioned_docs/version-2.0.0/concepts/serialization/types.md#2025-04-22_snippet_1\n\nLANGUAGE: Text\nCODE:\n```\n### BlockSignaturesV1 {#block-signatures-v1}\n\n`BlockSignaturesV1` is a legacy version of `BlockSignatures` that applies to blocks created before the Condor release. The structure is as follows:\n\n-   [`block_hash`](./structures.md#block-hash): The block hash of the associated block. It serializes as the byte representation of the hash itself.\n\n-   [`era_id`](#eraid): The era ID in which this block was created. It serializes as a single [`u64` value](./primitives.md#clvalue-numeric).\n\n-   `proofs`: The proofs of the block, a collection of validator's signatures of the block hash. It serializes as a `BTreeMap` where the first 4 bytes represent a `u32` value describing the number of [`PublicKeys`](#publickey) and [`signatures`](#signature) held within. The remainder consists of a repeating pattern of serialized public keys and signatures of the length dictated by the first four bytes.\n```\n\n----------------------------------------\n\nTITLE: Detecting Eviction using Casper Client with Automatic Public Key in Bash\nDESCRIPTION: This command automatically retrieves the public key from a file and uses it to filter auction information, helping detect validator eviction.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/versioned_docs/version-2.0.0/operators/becoming-a-validator/recovering.md#2025-04-22_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ncasper-client get-auction-info | jq --arg pk \"$(cat /etc/casper/validator_keys/public_key_hex)\" '.result.auction_state.bids[] | select( (.public_key | ascii_downcase) == ($pk | ascii_downcase) )'\n```\n\n----------------------------------------\n\nTITLE: Compiling Session Code to Wasm (Cargo & Make) (Bash)\nDESCRIPTION: These commands compile session code targeting Wasm for Casper. The `cargo build` command generates Wasm binaries with required rustflags. The `make build-contract` invokes a Makefile recipe, commonly used for automating build steps. Prerequisites: Rust toolchain, wasm32-unknown-unknown target, and Cargo or Make installed.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/versioned_docs/version-1.5.X/developers/writing-onchain-code/writing-session-code.md#2025-04-22_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\ncargo build --release --target wasm32-unknown-unknown\n```\n\nLANGUAGE: bash\nCODE:\n```\nmake build-contract\n```\n\n----------------------------------------\n\nTITLE: Example speculative_exec_txn_result JSON Response\nDESCRIPTION: This JSON snippet demonstrates the structure and content of a speculative_exec_txn_result response from the Casper Network API. It includes the API version and detailed execution results with block hash, transfers, resource consumption, and various effects on the blockchain state.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/versioned_docs/version-2.0.0/developers/json-rpc/json-rpc-transactional.md#2025-04-22_snippet_18\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"jsonrpc\": \"2.0\",\n  \"id\": 1,\n  \"result\": {\n    \"name\": \"speculative_exec_txn_result\",\n    \"value\": {\n      \"api_version\": \"2.0.0\",\n      \"execution_result\": {\n          \"block_hash\": \"b597865a5f96ea23932173601bf6b170a482f562f6dd3598b2d37a86c1f01371\",\n          \"transfers\": [],\n          \"limit\": \"100000000000\",\n          \"consumed\": \"23289743502\",\n          \"effects\": [\n              {\n                  \"key\": \"uref-65d264188c3cf9e61862415424c99900ec1c858f168d94d98b332fe738bf2249-000\",\n                  \"kind\": {\n                      \"Write\": {\n                          \"CLValue\": {\n                              \"cl_type\": \"Unit\",\n                              \"bytes\": \"\",\n                              \"parsed\": null\n                          }\n                      }\n                  }\n              },\n              {\n                  \"key\": \"package-154847e85beee3b5cd1c769b8f01dbc4b93d1cea8370c0b3bc1858d0d248a48b\",\n                  \"kind\": {\n                      \"Write\": {\n                          \"Package\": {\n                              \"versions\": [],\n                              \"disabled_versions\": [],\n                              \"groups\": [],\n                              \"lock_status\": \"Unlocked\"\n                          }\n                      }\n                  }\n              },\n              {\n                  \"key\": \"named-key-entity-account-7ba7c904427d5fe653b99584c07c3c5963b6ea2e75ad87aea69b71a65bf6fcea-7f292691d790433e131a5ea69c70b85a959a454f5d928de437b11bf4e7c06930\",\n                  \"kind\": {\n                      \"Write\": {\n                          \"NamedKey\": {\n                              \"named_key\": {\n                                  \"cl_type\": \"Key\",\n                                  \"bytes\": \"10154847e85beee3b5cd1c769b8f01dbc4b93d1cea8370c0b3bc1858d0d248a48b\",\n                                  \"parsed\": \"package-154847e85beee3b5cd1c769b8f01dbc4b93d1cea8370c0b3bc1858d0d248a48b\"\n                              },\n                              \"name\": {\n                                  \"cl_type\": \"String\",\n                                  \"bytes\": \"19000000746573745f7061796d656e745f7061636b6167655f68617368\",\n                                  \"parsed\": \"test_payment_package_hash\"\n                              }\n                          }\n                      }\n                  }\n              },\n              {\n                  \"key\": \"named-key-entity-account-7ba7c904427d5fe653b99584c07c3c5963b6ea2e75ad87aea69b71a65bf6fcea-814d93d21458dd90914dba42395ec9c075bc105cf3ef7ae0215f2107f3b47848\",\n                  \"kind\": {\n                      \"Write\": {\n                          \"NamedKey\": {\n                              \"named_key\": {\n                                  \"cl_type\": \"Key\",\n                                  \"bytes\": \"0265d264188c3cf9e61862415424c99900ec1c858f168d94d98b332fe738bf224907\",\n                                  \"parsed\": \"uref-65d264188c3cf9e61862415424c99900ec1c858f168d94d98b332fe738bf2249-007\"\n                              },\n                              \"name\": {\n                                  \"cl_type\": \"String\",\n                                  \"bytes\": \"13000000746573745f7061796d656e745f616363657373\",\n                                  \"parsed\": \"test_payment_access\"\n                              }\n                          }\n                      }\n                  }\n              },\n              {\n                  \"key\": \"package-154847e85beee3b5cd1c769b8f01dbc4b93d1cea8370c0b3bc1858d0d248a48b\",\n                  \"kind\": \"Identity\"\n              },\n              {\n                  \"key\": \"entity-system-63448411a9dac7fd2e4a1dc9287ddb95b6f26ebe549b1387e44685d6b56dab08\",\n                  \"kind\": \"Identity\"\n              },\n              {\n                  \"key\": \"package-63227f4db8d0d09e3b4b64416125ac35023e1054e38127780ec241b2b60d8b3d\",\n                  \"kind\": \"Identity\"\n              },\n              {\n                  \"key\": \"entry-point-v1-entity-system-63448411a9dac7fd2e4a1dc9287ddb95b6f26ebe549b1387e44685d6b56dab08-21bddc7e4379ba445c7118cb51962954e0d1e5aa5cacc0c4ff6095b57eb9fb33\",\n                  \"kind\": \"Identity\"\n              },\n              {\n                  \"key\": \"uref-7a9d9c0c33540e9fd4c1245f6ac687c7eacf98ac1072591adc3f83332a909d86-000\",\n                  \"kind\": {\n                      \"Write\": {\n                          \"CLValue\": {\n                              \"cl_type\": \"Unit\",\n                              \"bytes\": \"\",\n                              \"parsed\": null\n                          }\n                      }\n                  }\n              },\n              {\n                  \"key\": \"balance-7a9d9c0c33540e9fd4c1245f6ac687c7eacf98ac1072591adc3f83332a909d86\",\n                  \"kind\": {\n                      \"Write\": {\n                          \"CLValue\": {\n                              \"cl_type\": \"U512\",\n                              \"bytes\": \"00\",\n                              \"parsed\": \"0\"\n                          }\n                      }\n                  }\n              },\n              {\n                  \"key\": \"byte-code-v1-wasm-9639481569c3940ce272402f0e9bc0ea535435ea9ffc18d8696e4af02c841354\",\n                  \"kind\": {\n                      \"Write\": {\n                          \"ByteCode\": {\n                              \"kind\": \"V1CasperWasm\"\n                          }\n                      }\n                  }\n              }\n          ]\n      }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Tuple CLTypes and Any Type in JSON Schema\nDESCRIPTION: JSON schema definitions for tuple CLTypes (Tuple1, Tuple2, Tuple3) and the unspecified 'Any' type. Each tuple definition includes validation for the exact number of required elements.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/condor/jsonrpc-comp/rpc-2.0/schema/components.json.md#2025-04-22_snippet_11\n\nLANGUAGE: JSON\nCODE:\n```\n{\n    \"description\": \"1-ary tuple of a `CLType`.\",\n    \"type\": \"object\",\n    \"required\": [\n        \"Tuple1\"\n    ],\n    \"properties\": {\n        \"Tuple1\": {\n            \"type\": \"array\",\n            \"items\": {\n                \"$ref\": \"#/components/schemas/CLType\"\n            },\n            \"maxItems\": 1,\n            \"minItems\": 1\n        }\n    },\n    \"additionalProperties\": false\n},\n{\n    \"description\": \"2-ary tuple of `CLType`s.\",\n    \"type\": \"object\",\n    \"required\": [\n        \"Tuple2\"\n    ],\n    \"properties\": {\n        \"Tuple2\": {\n            \"type\": \"array\",\n            \"items\": {\n                \"$ref\": \"#/components/schemas/CLType\"\n            },\n            \"maxItems\": 2,\n            \"minItems\": 2\n        }\n    },\n    \"additionalProperties\": false\n},\n{\n    \"description\": \"3-ary tuple of `CLType`s.\",\n    \"type\": \"object\",\n    \"required\": [\n        \"Tuple3\"\n    ],\n    \"properties\": {\n        \"Tuple3\": {\n            \"type\": \"array\",\n            \"items\": {\n                \"$ref\": \"#/components/schemas/CLType\"\n            },\n            \"maxItems\": 3,\n            \"minItems\": 3\n        }\n    },\n    \"additionalProperties\": false\n},\n{\n    \"description\": \"Unspecified type.\",\n    \"type\": \"string\",\n    \"enum\": [\n        \"Any\"\n    ]\n}\n```\n\n----------------------------------------\n\nTITLE: Installing Contract with Multiple Authorization Keys\nDESCRIPTION: Demonstrates contract installation using multiple authorization keys (DEFAULT_ACCOUNT_ADDR and account_addr_1) with a deploy threshold of 2.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/versioned_docs/version-1.5.X/resources/advanced/list-auth-keys-tutorial.md#2025-04-22_snippet_9\n\nLANGUAGE: rust\nCODE:\n```\nlet session_code = PathBuf::from(CONTRACT_WASM);\n\nlet deploy_item = DeployItemBuilder::new()\n    .with_empty_payment_bytes(runtime_args! {ARG_AMOUNT => *DEFAULT_PAYMENT})\n    .with_authorization_keys(&[*DEFAULT_ACCOUNT_ADDR, account_addr_1])\n    .with_address(*DEFAULT_ACCOUNT_ADDR)\n    .with_session_code(session_code, session_args)\n    .build();\n\nlet execute_request = ExecuteRequestBuilder::from_deploy_item(deploy_item).build();\nbuilder.exec(execute_request).commit().expect_success();\n```\n\n----------------------------------------\n\nTITLE: Staging Protocol Command\nDESCRIPTION: Command to stage protocols for a new network or upcoming upgrade\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/versioned_docs/version-2.0.0/operators/setup-network/staging-files-for-new-network.md#2025-04-22_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nsudo -u casper /etc/casper/node_util.py stage_protocols our-network.conf\n```\n\n----------------------------------------\n\nTITLE: Monitoring Node Synchronization using Python Utility via Bash\nDESCRIPTION: Runs the `node_util.py` Python script with the `watch` command to continuously display the node's synchronization status, peer count, uptime, build version, and RPC readiness.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/versioned_docs/version-1.5.X/operators/setup/install-node.md#2025-04-22_snippet_15\n\nLANGUAGE: bash\nCODE:\n```\n/etc/casper/node_util.py watch\n```\n\n----------------------------------------\n\nTITLE: Installing Axios for HTTP Requests\nDESCRIPTION: Command to install the Axios library, which will be used for making HTTP requests to the Casper network backend services.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/versioned_docs/version-2.0.0/developers/dapps/template-frontend.md#2025-04-22_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\nnpm install axios\n```\n\n----------------------------------------\n\nTITLE: Querying Auction Info with Casper CLI\nDESCRIPTION: This command uses the Casper command-line client to retrieve auction information from a specified node on the network. It requires the node's IP address and port.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/versioned_docs/version-2.0.0/developers/cli/delegate.md#2025-04-22_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\ncasper-client get-auction-info \\\n--node-address http://<peer-ip-address>:7777\n```\n\n----------------------------------------\n\nTITLE: Defining CLType Tuple Schemas in JSON\nDESCRIPTION: JSON schema definitions for 2-ary and 3-ary tuple CLTypes, specifying array constraints and references to the CLType schema.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/condor/jsonrpc-comp/rpc-1.5/schema.json.md#2025-04-22_snippet_37\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"description\": \"2-ary tuple of `CLType`s.\",\n  \"type\": \"object\",\n  \"required\": [\n    \"Tuple2\"\n  ],\n  \"properties\": {\n    \"Tuple2\": {\n      \"type\": \"array\",\n      \"items\": {\n        \"$ref\": \"#/components/schemas/CLType\"\n      },\n      \"maxItems\": 2,\n      \"minItems\": 2\n    }\n  },\n  \"additionalProperties\": false\n},\n{\n  \"description\": \"3-ary tuple of `CLType`s.\",\n  \"type\": \"object\",\n  \"required\": [\n    \"Tuple3\"\n  ],\n  \"properties\": {\n    \"Tuple3\": {\n      \"type\": \"array\",\n      \"items\": {\n        \"$ref\": \"#/components/schemas/CLType\"\n      },\n      \"maxItems\": 3,\n      \"minItems\": 3\n    }\n  },\n  \"additionalProperties\": false\n}\n```\n\n----------------------------------------\n\nTITLE: Querying Package: Sample Command (Bash)\nDESCRIPTION: Practical usage of casper-client query-global-state to fetch package details by hash. Designed for users wanting to audit package info on a given node/state.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/docs/developers/cli/querying-global-state.md#2025-04-22_snippet_16\n\nLANGUAGE: bash\nCODE:\n```\ncasper-client query-global-state \\\n--node-address http://localhost:11101 \\\n--state-root-hash 6b5849caa605acdc29564f303764396a27ef7a6b1a61f7b13109b129e7e70d81 \\\n--key package-1bf60faed9931e95e99912aa82f545a85f374dcbcd0c145ee2a5820b39b31d51\n```\n\n----------------------------------------\n\nTITLE: Verifying Entry Point Result via Named Key Query in Rust Test\nDESCRIPTION: This Rust snippet (from Test 7) demonstrates how to verify the outcome of a successful contract call in a Casper integration test. It retrieves the key (`INTERSECTION_RECEIPT`) from the named keys of `account_addr_1`, queries the global state for the value stored at that key using `builder.query()`, deserializes the result from a `CLValue` into a `Vec<AccountHash>`, and asserts that it matches the expected intersection (`vec![*DEFAULT_ACCOUNT_ADDR]`).\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/versioned_docs/version-2.0.0/resources/advanced/list-auth-keys-tutorial.md#2025-04-22_snippet_17\n\nLANGUAGE: rust\nCODE:\n```\n```rust\nlet intersection_receipt: Key = *builder\n    .get_expected_account(account_addr_1)\n    .named_keys()\n    .get(INTERSECTION_RECEIPT)\n    .expect(\"must have this entry in named keys\");\n\nlet actual_intersection = builder\n    .query(None, intersection_receipt, &[])\n    .expect(\"must have stored_value\")\n    .as_cl_value()\n    .map(|intersection_cl_value| {\n        CLValue::into_t::<Vec<AccountHash>>(intersection_cl_value.clone())\n    })\n    .unwrap()\n    .unwrap();\n\nlet expected_intersection = vec![*DEFAULT_ACCOUNT_ADDR];\n\nassert_eq!(actual_intersection, expected_intersection);\n```\n```\n\n----------------------------------------\n\nTITLE: Query Target Account Balance Template\nDESCRIPTION: Template for querying target purse balance with required parameters\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/versioned_docs/version-2.0.0/developers/cli/transfers/verify-transfer.md#2025-04-22_snippet_20\n\nLANGUAGE: bash\nCODE:\n```\ncasper-client get-balance \\\n--id 7 \\\n--node-address [NODE_SERVER_ADDRESS] \\\n--state-root-hash [STATE_ROOT_HAHS] \\\n--purse-identifier [TARGET_PUBLIC_KEY_HEX]\n```\n\n----------------------------------------\n\nTITLE: Building Casper Client from Source\nDESCRIPTION: Instructions for compiling the Casper client from source code using nightly Rust toolchain.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/docs/developers/prerequisites.md#2025-04-22_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\nrustup toolchain install nightly\n```\n\nLANGUAGE: bash\nCODE:\n```\ncargo build --release\n```\n\n----------------------------------------\n\nTITLE: Example Casper Deploy Query Command\nDESCRIPTION: This Bash snippet provides an example command to retrieve the execution status of a specific deploy hash from a Casper test network node. It reflects critical response fields such as execution results and allows for validation against expected results by using the specific deploy hash.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/versioned_docs/version-1.5.X/developers/cli/transfers/direct-token-transfer.md#2025-04-22_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\ncasper-client get-deploy \\\n--node-address https://node.testnet.casper.network \\\n1f17a0bdeaaf71abd03492c854cdf97f746432751721ce555e95b9cefe641e3c\n```\n\n----------------------------------------\n\nTITLE: Transferring NFT using StoredContractByHash\nDESCRIPTION: Example command for directly invoking the transfer entrypoint of a CEP-78 contract using StoredContractByHash. This example passes token_id for contracts using ordinal identifier mode.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/versioned_docs/version-2.0.0/resources/tokens/cep78/using-casper-client.md#2025-04-22_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\ncasper-client put-deploy -n http://localhost:11101/rpc --chain-name \"casper-net-1\" \\ --payment-amount 7500000000 \\ -k ~/secret_key.pem \\\n--session-hash hash-b3b7a74ae9ef2ea8afc06d6a0830961259605e417e95a53c0cb1ca9737bb0ec7 \\\n--session-entry-point \"transfer\" \\\n--session-arg \"source_key:key='account-hash-e9ff87766a1d2bab2565bfd5799054946200b51b20c3ca7e54a9269e00fe7cfb'\" \\\n--session-arg \"target_key:key='account-hash-b4782e7c47e4deca5bd90b7adb2d6e884f2d331825d5419d6cbfb59e17642aab'\" \\\n--session-arg \"token_id:u64='0'\"\n```\n\n----------------------------------------\n\nTITLE: Sample Requests for Getting Entity Details\nDESCRIPTION: Examples of how to use the get-entity command with both an entity identifier and an account hash.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/docs/developers/cli/querying-global-state.md#2025-04-22_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\ncasper-client get-entity \\\n--node-address http://localhost:11101 \\\n--entity-identifier entity-account-6a56c4eee172043975aea72221eaf09f3c3a24f09a379935e44c9979f1ae9463\n```\n\nLANGUAGE: bash\nCODE:\n```\ncasper-client get-entity \\\n--node-address http://localhost:11101 \\\n--entity-identifier account-hash-6a56c4eee172043975aea72221eaf09f3c3a24f09a379935e44c9979f1ae9463\n```\n\n----------------------------------------\n\nTITLE: Setting Protocol Version Environment Variable - Bash\nDESCRIPTION: This snippet demonstrates how to set a bash environment variable (PROTOCOL) to the latest protocol version (example shows 1_5_8). The variable is later used to reference protocol-dependent configuration and commands. There are no dependencies, and it should be set in the shell before further configuration steps.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/docs/operators/setup/install-node.md#2025-04-22_snippet_10\n\nLANGUAGE: bash\nCODE:\n```\nPROTOCOL=1_5_8\n```\n\n----------------------------------------\n\nTITLE: Declaring Entry Points in Solana\nDESCRIPTION: This code shows how to define an entry point in Solana using the entrypoint! macro. Entry points in Solana act as interfaces visible to the network.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/docs/resources/moving-to-casper.md#2025-04-22_snippet_8\n\nLANGUAGE: rust\nCODE:\n```\nentrypoint!(process_instruction);\n```\n\n----------------------------------------\n\nTITLE: Serving the built website\nDESCRIPTION: Yarn command to serve the built static website. This should be run after the production build is complete.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/README/SETUP.md#2025-04-22_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\nyarn serve\n```\n\n----------------------------------------\n\nTITLE: Example Token Transfer Implementation - Casper CLI\nDESCRIPTION: Practical example of a token transfer command with specific values, transferring 5000000000 Motes on the Casper testnet.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/docs/developers/cli/transfers/direct-token-transfer.md#2025-04-22_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ncasper-client transfer -v \\\n--id 3 \\\n--transfer-id 11102023 \\\n--node-address https://node.testnet.casper.network  \\\n--amount 5000000000 \\\n--secret-key ~/KEYS/secret_key.pem \\\n--chain-name casper-test \\\n--target-account 01360af61b50cdcb7b92cffe2c99315d413d34ef77fadee0c105cc4f1d4120f986 \\\n--payment-amount 100000000\n```\n\n----------------------------------------\n\nTITLE: Building the CEP-18 Contract\nDESCRIPTION: Commands to prepare the development environment, build the contract, and create the WebAssembly file that will be deployed to the Casper network.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/versioned_docs/version-2.0.0/resources/beginner/cep18.md#2025-04-22_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ncd cep18\nmake prepare\nmake build-contract\n```\n\n----------------------------------------\n\nTITLE: Generating New Administrator Accounts\nDESCRIPTION: Shell command to create new admin accounts in a private network, updating 'global_state.toml' using admin public key and balance. It requires the global state directory, state root hash, and admin details.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/versioned_docs/version-1.5.X/operators/setup-network/create-private.md#2025-04-22_snippet_7\n\nLANGUAGE: sh\nCODE:\n```\nglobal-state-update-gen \\\n  generate-admins --data-dir $DATA_DIR/global_state \\\n  --state-hash $STATE_ROOT_HASH \\\n  --admin $PUBLIC_KEY_HEX, $BALANCE\n```\n\n----------------------------------------\n\nTITLE: Sample Package Query Request\nDESCRIPTION: Example of querying package information with actual values for node address, state root hash, and package address.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/versioned_docs/version-2.0.0/developers/cli/querying-global-state.md#2025-04-22_snippet_16\n\nLANGUAGE: bash\nCODE:\n```\ncasper-client query-global-state \\\n--node-address http://localhost:11101 \\\n--state-root-hash 6b5849caa605acdc29564f303764396a27ef7a6b1a61f7b13109b129e7e70d81 \\\n--key package-1bf60faed9931e95e99912aa82f545a85f374dcbcd0c145ee2a5820b39b31d51\n```\n\n----------------------------------------\n\nTITLE: Retrieving Caller Authorization Keys in Casper Contract Entry Point (Rust)\nDESCRIPTION: This snippet retrieves the set of authorization keys that signed the caller's deploy for an on-chain contract entry point. The contract uses list_authorization_keys and converts the result to a vector for further computation, such as set intersection. Dependencies include casper-contract/types, with input/output handled via Casper runtime context. This code is used when implementing contract entry points that require signature checks.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/docs/resources/advanced/list-auth-keys-tutorial.md#2025-04-22_snippet_4\n\nLANGUAGE: rust\nCODE:\n```\nlet authorization_keys_caller: Vec<AccountHash> =\n    runtime::list_authorization_keys().iter().cloned().collect();\n```\n\n----------------------------------------\n\nTITLE: Defining TransferAddr\nDESCRIPTION: This schema defines a hex-encoded string representing a transfer address. It is used for identifying transfer operations.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/condor/jsonrpc-comp/rpc-1.5/schema/components.json.md#2025-04-22_snippet_27\n\nLANGUAGE: JSON\nCODE:\n```\n{\\n    \\\"description\\\": \\\"Hex-encoded transfer address.\\\",\\n    \\\"type\\\": \\\"string\\\"\\n}\n```\n\n----------------------------------------\n\nTITLE: Example Makefile for Casper Smart Contract Project\nDESCRIPTION: A Makefile containing commands for preparing the environment, building the contract, running tests, and performing linting tasks for a Casper smart contract project.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/versioned_docs/version-2.0.0/developers/writing-onchain-code/simple-contract.md#2025-04-22_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nprepare:\n        rustup target add wasm32-unknown-unknown\n\nbuild-contract:\n        cd contract && cargo build --release --target wasm32-unknown-unknown\n        wasm-strip contract/target/wasm32-unknown-unknown/release/contract.wasm 2>/dev/null | true\n\ntest: build-contract\n        mkdir -p tests/wasm\n        cp contract/target/wasm32-unknown-unknown/release/contract.wasm tests/wasm\n        cd tests && cargo test\n\nclippy:\n        cd contract && cargo clippy --all-targets -- -D warnings\n        cd tests && cargo clippy --all-targets -- -D warnings\n\ncheck-lint: clippy\n        cd contract && cargo fmt -- --check\n        cd tests && cargo fmt -- --check\n\nlint: clippy\n        cd contract && cargo fmt\n        cd tests && cargo fmt\n```\n\n----------------------------------------\n\nTITLE: Querying Deploy Details with casper-client in Bash\nDESCRIPTION: This command uses casper-client to retrieve the details of a sent deploy. It requires specifying the node address and the deploy hash.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/docs/resources/tokens/cep18/full-tutorial.md#2025-04-22_snippet_18\n\nLANGUAGE: bash\nCODE:\n```\ncasper-client get-deploy \\\n--node-address http://<HOST:PORT> \\\nb00E59f8aBA5c7aB9.....\n```\n\n----------------------------------------\n\nTITLE: Extern crate import and usage in Rust main.rs - Rust\nDESCRIPTION: Imports the casper_client crate in Rust code and demonstrates module usage for transfers and deploys. This is necessary for utilizing Casper-related functions. The SDK must be included in Cargo.toml first.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/versioned_docs/version-1.5.X/developers/dapps/sdk/client-library-usage.md#2025-04-22_snippet_3\n\nLANGUAGE: rust\nCODE:\n```\nextern crate casper_client;\n```\n\nLANGUAGE: rust\nCODE:\n```\nuse casper_client::transfer;\nuse casper_client::put_deploy;\n//...\n```\n\n----------------------------------------\n\nTITLE: Creating New Contract with Storage\nDESCRIPTION: Demonstrates how to create a new upgradeable contract using storage::new_contract. Sets up the contract with entry points, named keys, and access permissions.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/versioned_docs/version-2.0.0/developers/writing-onchain-code/simple-contract.md#2025-04-22_snippet_12\n\nLANGUAGE: rust\nCODE:\n```\n    // Create a new contract package that can be upgraded.\n    let (stored_contract_hash, contract_version) = storage::new_contract(\n        counter_entry_points,\n        Some(counter_named_keys),\n        Some(CONTRACT_PACKAGE_NAME.to_string()),\n        Some(CONTRACT_ACCESS_UREF.to_string()),\n    );\n```\n\n----------------------------------------\n\nTITLE: State Root Hash Response Structure\nDESCRIPTION: Example JSON response from a state root hash query, showing the API version and the hex-encoded hash representing the current state of the blockchain.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/versioned_docs/version-2.0.0/developers/cli/transfers/verify-transfer.md#2025-04-22_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"jsonrpc\": \"2.0\",\n  \"id\": 6458079936180872466,\n  \"result\": {\n    \"api_version\": \"1.5.3\",\n    \"state_root_hash\": \"fdb1474d441ec0fcbf2e088f1630dbf98d3bcf7f7a7fe298303797f35b8cb4e1\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Displaying libssl Dependency Error on Ubuntu 22.04\nDESCRIPTION: Shows the error message encountered when attempting to install Casper packages on Ubuntu 22.04 due to the missing `libssl1.1` dependency, as the default OpenSSL version has been updated.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/versioned_docs/version-1.5.X/operators/setup/install-node.md#2025-04-22_snippet_0\n\nLANGUAGE: text\nCODE:\n```\ncasper-client : Depends: libssl1.1 (>= 1.1.0) but it is not installable\n```\n\n----------------------------------------\n\nTITLE: Serializing Parameter Structure\nDESCRIPTION: Describes the `Parameter` structure used for defining parameters to methods. It consists of a name and a `CLType`. Serialization involves serializing the name as a `String` followed by the serialized `CLType`.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/versioned_docs/version-2.0.0/concepts/serialization/types.md#2025-04-22_snippet_38\n\nLANGUAGE: text\nCODE:\n```\nParameter to a method, structured as a name followed by a `CLType`. It is serialized as a [`String`](./primitives.md#clvalue-string) followed by a [`CLType`](./primitives.md#clvalue-cltype).\n```\n\n----------------------------------------\n\nTITLE: Example Account State After Adding Key (JSON)\nDESCRIPTION: Shows the JSON representation of an account's details after successfully adding a new associated key (`account-hash-1fed...`). It includes the account hash, action thresholds, the list of associated keys with their weights, the main purse URef, and named keys.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/versioned_docs/version-2.0.0/resources/advanced/multi-sig/multi-sig-workflow.md#2025-04-22_snippet_16\n\nLANGUAGE: json\nCODE:\n```\n\"Account\": {\n  \"account_hash\": \"account-hash-1ed5a1c39bea93c105f2d22c965a84b205b36734a377d05dbb103b6bfaa595a7\",\n  \"action_thresholds\": {\n    \"deployment\": 2,\n    \"key_management\": 3\n  },\n  \"associated_keys\": [\n    {\n      \"account_hash\": \"account-hash-04a9691a9f8f05a0f08bd686f188b27c7dbcd644b415759fd3ca043d916ea02f\",\n      \"weight\": 1\n    },\n    {\n      \"account_hash\": \"account-hash-1fed34baa6807a7868bb18f91b161d99ebf21763810fe4c92e39775d10bbf1f8\",\n      \"weight\": 1\n    },\n    {\n      \"account_hash\": \"account-hash-1ed5a1c39bea93c105f2d22c965a84b205b36734a377d05dbb103b6bfaa595a7\",\n      \"weight\": 3\n    },\n    {\n      \"account_hash\": \"account-hash-e2d00525cac31ae2756fb155f289d276c6945b6914923fe275de0cb127bffee7\",\n      \"weight\": 1\n    }\n  ],\n  \"main_purse\": \"uref-8294864177c2c1ec887a11dae095e487b5256ce6bd2a1f2740d0e4f28bd3251c-007\",\n  \"named_keys\": []\n}\n```\n\n----------------------------------------\n\nTITLE: Example Query for Deploy Information\nDESCRIPTION: This is an example of using the casper-client to get deploy information from a specific testnet node. It includes a real deploy hash for demonstration.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/versioned_docs/version-2.0.0/developers/cli/transfers/direct-token-transfer.md#2025-04-22_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\ncasper-client get-deploy \\\n--node-address https://node.testnet.casper.network \n1f17a0bdeaaf71abd03492c854cdf97f746432751721ce555e95b9cefe641e3c\n```\n\n----------------------------------------\n\nTITLE: Defining Access Control for Methods - JSON Schema\nDESCRIPTION: This JSON schema defines possible access control options for contract entry points. Dependencies include a Group schema for specifying user groups. Key components are 'Public' for unrestricted access, an object structure for group-specific restrictions, and 'Template' for inaccessible methods within compiled outputs. Inputs are defined in 'oneOf', which includes both string enums and an object with group properties. The schema is essential for implementing access-control measures in smart contract frameworks.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/condor/jsonrpc-comp/rpc-2.0/schema/EntryPointAccess.json.md#2025-04-22_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"description\": \"Enum describing the possible access control options for a contract entry point (method).\",\n    \"oneOf\": [\n        {\n            \"description\": \"Anyone can call this method (no access controls).\",\n            \"type\": \"string\",\n            \"enum\": [\n                \"Public\"\n            ]\n        },\n        {\n            \"description\": \"Only users from the listed groups may call this method. Note: if the list is empty then this method is not callable from outside the contract.\",\n            \"type\": \"object\",\n            \"required\": [\n                \"Groups\"\n            ],\n            \"properties\": {\n                \"Groups\": {\n                    \"type\": \"array\",\n                    \"items\": {\n                        \"$ref\": \"#/components/schemas/Group\"\n                    }\n                }\n            },\n            \"additionalProperties\": false\n        },\n        {\n            \"description\": \"Can\\'t be accessed directly but are kept in the derived wasm bytes.\",\n            \"type\": \"string\",\n            \"enum\": [\n                \"Template\"\n            ]\n        }\n    ]\n}\n```\n\n----------------------------------------\n\nTITLE: Verifying Xcode Command Line Tools Installation on macOS - Bash\nDESCRIPTION: Checks that Xcode command line tools are installed by outputting the path. Used for troubleshooting and ensuring development prerequisites are satisfied. macOS only, outputs install path.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/versioned_docs/version-1.5.X/developers/prerequisites.md#2025-04-22_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\nxcode-select -p\n```\n\n----------------------------------------\n\nTITLE: Querying Casper Network Contract Details\nDESCRIPTION: Retrieve specific counter contract details from the Casper network.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/versioned_docs/version-1.5.X/resources/beginner/counter-testnet/walkthrough.md#2025-04-22_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\ncasper-client query-global-state --node-address http://[NODE_IP]:7777 \\\n    --state-root-hash [STATE_ROOT_HASH] \\\n    --key [ACCOUNT_HASH] -q \"counter\"\n```\n\n----------------------------------------\n\nTITLE: Example SSH Command with Private Key\nDESCRIPTION: A specific example of using SSH with a private key to demonstrate login with a known user and server address.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/docs/operators/setup/non-root-user.md#2025-04-22_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\nssh -i ~/.ssh/id_rsa casper@10.21.10.200\n```\n\n----------------------------------------\n\nTITLE: Declaring Smart Contract Wasm Paths and Constants in Rust\nDESCRIPTION: This snippet defines string constants for contract Wasm file paths, contract storage keys, and entry point names. These constants provide centralized, reusable references for use throughout the test code. Essential for maintainability, clarity, and reducing typo risk when interacting with contract APIs in tests. Update paths/names as required for your contracts.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/versioned_docs/version-1.5.X/developers/writing-onchain-code/testing-contracts.md#2025-04-22_snippet_4\n\nLANGUAGE: rust\nCODE:\n```\n    // Contract Wasm File Paths (Constants)\n    const COUNTER_V1_WASM: &str = \"counter-v1.wasm\";\n    const COUNTER_V2_WASM: &str = \"counter-v2.wasm\";\n    const COUNTER_V3_WASM: &str = \"counter-v3.wasm\";\n    const COUNTER_CALL_WASM: &str = \"counter-call.wasm\";\n\n    // Contract Storage Keys (Constants)\n    const CONTRACT_KEY: &str = \"counter\";\n    const COUNT_KEY: &str = \"count\";\n    const LAST_UPDATED_KEY: &str = \"last_updated\";\n    const CONTRACT_VERSION_KEY: &str = \"version\";\n\n    // Contract Entry Points (Constants)\n    const ENTRY_POINT_COUNTER_DECREMENT: &str = \"counter_decrement\";\n    const ENTRY_POINT_COUNTER_INC: &str = \"counter_inc\";\n    const ENTRY_POINT_COUNTER_LAST_UPDATED_AT: &str = \"counter_last_updated_at\";\n```\n\n----------------------------------------\n\nTITLE: Defining Era or Block Identifier Schema in JSON\nDESCRIPTION: This JSON schema defines an identifier that must be either an era identifier or a block identifier. It uses the `oneOf` constraint, requiring the object to have either a single `Era` property (referencing the `EraId` schema) or a single `Block` property (referencing the `BlockIdentifier` schema), with no additional properties allowed. This structure is likely used in API requests or responses where either type of identifier is acceptable.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/condor/jsonrpc-comp/rpc-2.0/schema/EraIdentifier.json.md#2025-04-22_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"description\": \"Identifier for an era.\",\n    \"oneOf\": [\n        {\n            \"type\": \"object\",\n            \"required\": [\n                \"Era\"\n            ],\n            \"properties\": {\n                \"Era\": {\n                    \"$ref\": \"#/components/schemas/EraId\"\n                }\n            },\n            \"additionalProperties\": false\n        },\n        {\n            \"type\": \"object\",\n            \"required\": [\n                \"Block\"\n            ],\n            \"properties\": {\n                \"Block\": {\n                    \"$ref\": \"#/components/schemas/BlockIdentifier\"\n                }\n            },\n            \"additionalProperties\": false\n        }\n    ]\n}\n```\n\n----------------------------------------\n\nTITLE: Restricting Casper Deploys Versus Account Updates in JSON\nDESCRIPTION: This snippet defines a Casper account where a primary key (weight 3) can exclusively perform account updates due to the key management threshold equaling its weight (3), while two associated keys (each weight 1) can collectively reach the deployment threshold (2) but cannot manage the account. This setup demonstrates how deploy signing and account management permissions are separated. The configuration is standard JSON following Casper schemas, and no external tooling is required.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/docs/resources/advanced/multi-sig/other-scenarios.md#2025-04-22_snippet_3\n\nLANGUAGE: json\nCODE:\n```\n{\\n\\\"Account\\\": {\\n   \\\"account_address\\\": \\\"account-hash-a1…\\\",\\n   \\\"action_thresholds\\\": {\\n      \\\"deployment\\\": 2,\\n      \\\"key_management\\\": 3\\n   },\\n   \\\"associated_keys\\\": [\\n      {\\n         \\\"account_address\\\": \\\"account-hash-a1…\\\", // primary key\\n         \\\"weight\\\": 3\\n      },\\n      {\\n         \\\"account_address\\\": \\\"account-hash-b2…\\\", // associated key\\n         \\\"weight\\\": 1\\n      },\\n      {\\n         \\\"account_address\\\": \\\"account-hash-c3…\\\", // associated key\\n         \\\"weight\\\": 1\\n      }\\n   ],\\n   \\\"main_purse\\\": \\\"uref-1234…\\\",\\n   \\\"named_keys\\\": []\\n}\\n}\n```\n\n----------------------------------------\n\nTITLE: Transfer Command Structure\nDESCRIPTION: Command structure for transferring CSPR tokens between accounts using the Casper command-line client. The command requires various parameters including transfer ID, node address, amount, secret key, chain name, target account, and payment amount.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/versioned_docs/version-1.5.X/developers/cli/transfers/direct-token-transfer.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ncasper-client transfer \\\n--id <ID> \\\n--transfer-id <TRANSFER_ID> \\\n--node-address [NODE_SERVER_ADDRESS]  \\\n--amount [AMOUNT_TO_TRANSFER] \\\n--secret-key [KEY_PATH]/secret_key.pem \\\n--chain-name [CHAIN_NAME] \\\n--target-account [TARGET_PUBLIC_KEY_HEX] \\\n--payment-amount [PAYMENT_AMOUNT_IN_MOTES]\n```\n\n----------------------------------------\n\nTITLE: Building and Installing the Updated Contract\nDESCRIPTION: These commands demonstrate how to build the new contract version and install it on the Casper network using the casper-client CLI tool.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/versioned_docs/version-1.5.X/resources/beginner/upgrade-contract.md#2025-04-22_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nmake prepare\n\nmake build-contract\n```\n\nLANGUAGE: bash\nCODE:\n```\ncasper-client put-deploy \\\n    --node-address http://[NODE_IP]:7777 \\\n    --chain-name [CHAIN_NAME] \\\n    --secret-key [PATH_TO_YOUR_KEY]/secret_key.pem \\\n    --payment-amount [PAYMENT_AMOUNT_IN_MOTES] \\\n    --session-path [PATH]/contract-v2/target/wasm32-unknown-unknown/release/counter-v2.wasm\n```\n\n----------------------------------------\n\nTITLE: Cloning Casper Repositories\nDESCRIPTION: Commands to clone required Casper repositories for NCTL setup.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/docs/developers/dapps/setup-nctl.md#2025-04-22_snippet_8\n\nLANGUAGE: bash\nCODE:\n```\n$ cd <WORKING_DIRECTORY>\n$ git clone https://github.com/casper-network/casper-nctl\n$ git clone https://github.com/casper-network/casper-node\n$ git clone https://github.com/casper-ecosystem/casper-client-rs\n$ git clone https://github.com/casper-network/casper-node-launcher\n$ git clone https://github.com/casper-network/casper-sidecar\n```\n\n----------------------------------------\n\nTITLE: Recording Deploy Information with WriteDeployInfo in Casper Network\nDESCRIPTION: This JSON demonstrates a WriteDeployInfo transformation that records metadata about a deploy execution. It includes the deploy hash, associated transfers, source account, source purse URef, and gas consumed by the deploy.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/versioned_docs/version-2.0.0/developers/cli/transfers/direct-token-transfer.md#2025-04-22_snippet_12\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"key\": \"deploy-1f17a0bdeaaf71abd03492c854cdf97f746432751721ce555e95b9cefe641e3c\",\n  \"transform\": {\n    \"WriteDeployInfo\": {\n      \"deploy_hash\": \"1f17a0bdeaaf71abd03492c854cdf97f746432751721ce555e95b9cefe641e3c\",\n      \"transfers\": [\n        \"transfer-0de7250864e67aa76626a844dcc931e615284a13a110df3f97cec9e3e97af405\"\n      ],\n      \"from\": \"account-hash-e70dbca48c2d31bc2d754e51860ceaa8a1a49dc627b20320b0ecee1b6d9ce655\",\n      \"source\": \"uref-11e6fc5354f61a004df98482376c45964b8b1557e8f2f13fb5f3adab5faa8be1-007\",\n      \"gas\": \"100000000\"\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Execution Information Object\nDESCRIPTION: Captures the block hash and height for a deploy, along with its execution result if available, identifying the required and optional parameters.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/condor/jsonrpc-comp/rpc-2.0/schema/components.json.md#2025-04-22_snippet_26\n\nLANGUAGE: JSON\nCODE:\n```\n{\n    \"description\": \"The block hash and height in which a given deploy was executed, along with the execution result if known.\",\n    \"type\": \"object\",\n    \"required\": [\n        \"block_hash\",\n        \"block_height\"\n    ],\n    \"properties\": {\n        \"block_hash\": {\n            \"description\": \"The hash of the block in which the deploy was executed.\",\n            \"allOf\": [\n                {\n                    \"$ref\": \"#/components/schemas/BlockHash\"\n                }\n            ]\n        },\n        \"block_height\": {\n            \"description\": \"The height of the block in which the deploy was executed.\",\n            \"type\": \"integer\",\n            \"format\": \"uint64\",\n            \"minimum\": 0.0\n        },\n        \"execution_result\": {}\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Verifying a Deployment on the Casper Network\nDESCRIPTION: This command retrieves the details of a specific deployment using its deploy hash.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/versioned_docs/version-2.0.0/resources/tokens/cep18/full-tutorial.md#2025-04-22_snippet_12\n\nLANGUAGE: bash\nCODE:\n```\ncasper-client get-deploy \\\n--node-address http://<HOST:PORT> [DEPLOY_HASH]\n```\n\n----------------------------------------\n\nTITLE: Example rust-toolchain File for Casper Smart Contract Project\nDESCRIPTION: A rust-toolchain file specifying the nightly version of Rust to be used for the project.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/versioned_docs/version-2.0.0/developers/writing-onchain-code/simple-contract.md#2025-04-22_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\nnightly-2022-08-03\n```\n\n----------------------------------------\n\nTITLE: Scaffolding a Casper Smart Contract Project using Cargo Casper - Bash\nDESCRIPTION: This snippet demonstrates creating a new Casper smart contract project using the 'cargo casper' crate on the command line. The command initializes a new project directory with separate subdirectories for contract logic and associated tests. Requires the 'cargo-casper' crate to be installed globally. The positional argument specifies the project folder's name; additional options may be supported by 'cargo-casper'. Outputs a directory structure intended for contract and test code.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/docs/developers/writing-onchain-code/getting-started.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ncargo casper my-project\n```\n\n----------------------------------------\n\nTITLE: Defining VestingSchedule Object Schema in JSON\nDESCRIPTION: Defines the JSON schema for a `VestingSchedule` object. It requires an `initial_release_timestamp_millis` property (uint64) and includes an optional `locked_amounts` array property, which must contain exactly 14 items referencing the `U512` schema or be null.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/condor/jsonrpc-comp/rpc-2.0/schema/components.json.md#2025-04-22_snippet_33\n\nLANGUAGE: json\nCODE:\n```\n\"VestingSchedule\": {\n    \"type\": \"object\",\n    \"required\": [\n        \"initial_release_timestamp_millis\"\n    ],\n    \"properties\": {\n        \"initial_release_timestamp_millis\": {\n            \"type\": \"integer\",\n            \"format\": \"uint64\",\n            \"minimum\": 0.0\n        },\n        \"locked_amounts\": {\n            \"type\": [\n                \"array\",\n                \"null\"\n            ],\n            \"items\": {\n                \"$ref\": \"#/components/schemas/U512\"\n            },\n            \"maxItems\": 14,\n            \"minItems\": 14\n        }\n    },\n    \"additionalProperties\": false\n}\n```\n\n----------------------------------------\n\nTITLE: Transferring Tokens using a Reusable Purse in Rust for Casper Network\nDESCRIPTION: This session code demonstrates transferring tokens to a contract using a reusable purse maintained by the contract. The code retrieves a deposit purse from the contract, funds it from the caller's main purse, then calls another entry point to process the transaction. This approach is more efficient but requires more complex contract logic.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/versioned_docs/version-1.5.X/resources/advanced/transfer-token-to-contract.md#2025-04-22_snippet_1\n\nLANGUAGE: rust\nCODE:\n```\n// Scenario 2: with this style, the contract being called has some internal accounting\n// to keep track of a reusable purse associated to the calling account; this avoids\n// wasteful creation of one time purses but requires the smart contract being called\n// to have more sophisticated internal logic. \n#[no_mangle]\npub extern \"C\" fn call() {\n    let amount: U512 = runtime::get_named_arg(\"amount\");\n\n    // This is demonstrating the most direct case, wherein you pass in the contract_hash and\n    // the entry_point_names of the target contract as args.\n    // With prior setup having been done, this can also be simplified.\n    let contract_hash = runtime::get_named_arg(\"contract_hash\");\n    // the name of the entry point on the contract that returns a purse uref to receive token at\n    // the actual name of the entry point is up to the smart contract authors\n    let deposit_point_name = runtime::get_named_arg(\"deposit_point_name\");\n    // whatever entry point on the smart contract does the actual work if token has been transferred\n    // the actual name of which is up to the smart contract authors.\n    let other_entry_point_name = runtime::get_named_arg(\"other_entry_point_name\");\n\n    // The smart contract returns a purse URef of a deposit purse (with ADD access rights only)\n    // for the caller to transfer to.\n    let deposit_purse: URef  = runtime::call_contract(contract_hash, deposit_point_name, runtime_args! {});\n\n    // transfer from the caller's purse to the purse provided by the contract; the transfer is handled\n    // safely by the host and the caller's purse is never exposed to the called smart contract.\n    system::transfer_from_purse_to_purse(account::get_main_purse(), deposit_purse, amount, None)\n        .unwrap_or_revert();\n\n    // The contract being interacted with looks up the associated purse, checks its balance, etc.\n    // within its logic. That side of it is entirely up to the smart contract authors to code; the caller\n    // merely calls the logic. Also, the entry point might require one or more runtime arguments. \n    // In all cases some discovery of the API of the contract you are calling is necessary.\n    runtime::call_contract(contract_hash, other_entry_point_name, runtime_args! {});\n}\n```\n\n----------------------------------------\n\nTITLE: Defining state_get_balance JSON-RPC Method in Casper Network\nDESCRIPTION: Complete JSON schema definition for the 'state_get_balance' RPC method that retrieves a purse's balance from the Casper network. It specifies required parameters (state_root_hash and purse_uref), defines the expected response structure, and includes a working example with sample values and response.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/condor/jsonrpc-comp/rpc-2.0/state_get_balance.json.md#2025-04-22_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"name\": \"state_get_balance\",\n  \"summary\": \"returns a purse's balance from the network\",\n  \"params\": [\n    {\n      \"name\": \"state_root_hash\",\n      \"schema\": {\n        \"description\": \"The hash of state root.\",\n        \"$ref\": \"#/components/schemas/Digest\"\n      },\n      \"required\": true\n    },\n    {\n      \"name\": \"purse_uref\",\n      \"schema\": {\n        \"description\": \"Formatted URef.\",\n        \"type\": \"string\"\n      },\n      \"required\": true\n    }\n  ],\n  \"result\": {\n    \"name\": \"state_get_balance_result\",\n    \"schema\": {\n      \"description\": \"Result for \\\"state_get_balance\\\" RPC response.\",\n      \"type\": \"object\",\n      \"required\": [\n        \"api_version\",\n        \"balance_value\",\n        \"merkle_proof\"\n      ],\n      \"properties\": {\n        \"api_version\": {\n          \"description\": \"The RPC API version.\",\n          \"type\": \"string\"\n        },\n        \"balance_value\": {\n          \"description\": \"The available balance in motes (total balance - sum of all active holds).\",\n          \"$ref\": \"#/components/schemas/U512\"\n        },\n        \"merkle_proof\": {\n          \"description\": \"The Merkle proof.\",\n          \"type\": \"string\"\n        }\n      },\n      \"additionalProperties\": false\n    }\n  },\n  \"examples\": [\n    {\n      \"name\": \"state_get_balance_example\",\n      \"params\": [\n        {\n          \"name\": \"state_root_hash\",\n          \"value\": \"0808080808080808080808080808080808080808080808080808080808080808\"\n        },\n        {\n          \"name\": \"purse_uref\",\n          \"value\": \"uref-09480c3248ef76b603d386f3f4f8a5f87f597d4eaffd475433f861af187ab5db-007\"\n        }\n      ],\n      \"result\": {\n        \"name\": \"state_get_balance_example_result\",\n        \"value\": {\n          \"api_version\": \"2.0.0\",\n          \"balance_value\": \"123456\",\n          \"merkle_proof\": \"01000000006ef2e0949ac76e55812421f755abe129b6244fe7168b77f47a72536147614625016ef2e0949ac76e55812421f755abe129b6244fe7168b77f47a72536147614625000000003529cde5c621f857f75f3810611eb4af3f998caaa9d4a3413cf799f99c67db0307010000006ef2e0949ac76e55812421f755abe129b6244fe7168b77f47a7253614761462501010102000000006e06000000000074769d28aac597a36a03a932d4b43e4f10bf0403ee5c41dd035102553f5773631200b9e173e8f05361b681513c14e25e3138639eb03232581db7557c9e8dbbc83ce94500226a9a7fe4f2b7b88d5103a4fc7400f02bf89c860c9ccdd56951a2afe9be0e0267006d820fb5676eb2960e15722f7725f3f8f41030078f8b2e44bf0dc03f71b176d6e800dc5ae9805068c5be6da1a90b2528ee85db0609cc0fb4bd60bbd559f497a98b67f500e1e3e846592f4918234647fca39830b7e1e6ad6f5b7a99b39af823d82ba1873d000003000000010186ff500f287e9b53f823ae1582b1fa429dfede28015125fd233a31ca04d5012002015cc42669a55467a1fdf49750772bfc1aed59b9b085558eb81510e9b015a7c83b0301e3cf4a34b1db6bfa58808b686cb8fe21ebe0c1bcbcee522649d2b135fe510fe3\"\n        }\n      }\n    }\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Contract Package with cargo\nDESCRIPTION: Command to create a new binary package called 'contract' using cargo, as part of the semi-automatic project setup process.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/versioned_docs/version-2.0.0/developers/writing-onchain-code/simple-contract.md#2025-04-22_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ncargo new contract\n```\n\n----------------------------------------\n\nTITLE: Inspecting Node Status with JSON-RPC in Bash\nDESCRIPTION: This example demonstrates a JSON-RPC response from querying the 'info_get_status_result' on a Casper node. It returns comprehensive node status details, including connected peers, API version, and current network parameters. Key parameters like the last added block info, reactor state, and next upgrade are included. The expected input is a JSON-RPC request, and the output is a structured JSON object encapsulating node-specific details.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/versioned_docs/version-1.5.X/developers/json-rpc/json-rpc-informational.md#2025-04-22_snippet_23\n\nLANGUAGE: bash\nCODE:\n```\n{\n  \"id\": 1,\n  \"jsonrpc\": \"2.0\",\n  \"result\": {\n    \"name\": \"info_get_status_result\",\n    \"value\": {\n      \"peers\": [\n      {\n        \"node_id\": \"tls:0101..0101\",\n        \"address\": \"127.0.0.1:54321\"\n      }\n    ],\n    \"api_version\": \"1.4.8\",\n    \"build_version\": \"1.0.0-xxxxxxxxx@DEBUG\",\n    \"chainspec_name\": \"casper-example\",\n    \"starting_state_root_hash\": null,\n    \"last_added_block_info\": {\n      \"hash\": \"13c2d7a68ecdd4b74bf4393c88915c836c863fc4bf11d7f2bd930a1bbccacdcb\",\n      \"timestamp\": \"2020-11-17T00:39:24.072Z\",\n      \"era_id\": 1,\n      \"height\": 10,\n      \"state_root_hash\": \"0808080808080808080808080808080808080808080808080808080808080808\",\n      \"creator\": \"01d9bf2148748a85c89da5aad8ee0b0fc2d105fd39d41a4c796536354f0ae2900c\"\n    },\n    \"our_public_signing_key\": \"01d9bf2148748a85c89da5aad8ee0b0fc2d105fd39d41a4c796536354f0ae2900c\",\n    \"round_length\": \"1m 5s 536ms\",\n    \"next_upgrade\": {\n      \"activation_point\": 42,\n      \"protocol_version\": \"2.0.1\"\n    },\n    \"uptime\": \"13s\",\n    \"reactor_state\": \"Initialize\",\n    \"last_progress\": \"1970-01-01T00:00:00.000Z\",\n    \"available_block_range\": {\n      \"low\": 0,\n      \"high\": 0\n    },\n    \"block_sync\": {\n      \"historical\": {\n        \"block_hash\": \"16ddf28e2b3d2e17f4cef36f8b58827eca917af225d139b0c77df3b4a67dc55e\",\n        \"block_height\": 40,\n        \"acquisition_state\": \"have strict finality(40) for: block hash 16dd..c55e\"\n      },\n      \"forward\": {\n        \"block_hash\": \"59907b1e32a9158169c4d89d9ce5ac9164fc31240bfcfb0969227ece06d74983\",\n        \"block_height\": 6701,\n        \"acquisition_state\": \"have block body(6701) for: block hash 5990..4983\"\n      }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Running Contract Tests with Make (Bash)\nDESCRIPTION: Executes the test suite for the Casper contract project using the 'make test' command. This command relies on a Makefile being present in the directory to define the specific test steps, as shown in the subsequent Makefile snippet.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/docs/developers/writing-onchain-code/testing-contracts.md#2025-04-22_snippet_10\n\nLANGUAGE: bash\nCODE:\n```\nmake test\n```\n\n----------------------------------------\n\nTITLE: Defining Era ID Schema Object - JSON (OpenAPI/Swagger Format)\nDESCRIPTION: This snippet defines a schema object for an Era ID, used as a newtype integer in API specifications (such as OpenAPI or Swagger). It sets the type to integer, the format to uint64, and constrains valid values to non-negative integers. The schema aids in automated validation, documentation, and type-checking for API endpoints dealing with Era IDs. There are no direct dependencies, but use of this schema assumes integration with tools that parse OpenAPI or JSON-based schemas. Key properties are \\\"description\\\", \\\"type\\\", \\\"format\\\", and \\\"minimum\\\".\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/condor/jsonrpc-comp/rpc-2.0/schema/EraId.json.md#2025-04-22_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"description\": \"Era ID newtype.\",\n    \"type\": \"integer\",\n    \"format\": \"uint64\",\n    \"minimum\": 0\n}\n```\n\n----------------------------------------\n\nTITLE: Building a Session Code Execution Request in Casper Tests (Rust)\nDESCRIPTION: Constructs an `ExecuteRequest` using `ExecuteRequestBuilder::standard`. This specifies the account executing the session code (`DEFAULT_ACCOUNT_ADDR`), the Wasm file (`CONTRACT_WASM`), and the necessary `runtime_args` required by the session code.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/versioned_docs/version-1.5.X/developers/writing-onchain-code/testing-session-code.md#2025-04-22_snippet_8\n\nLANGUAGE: rust\nCODE:\n```\n    let execute_request =\n        ExecuteRequestBuilder::standard(*DEFAULT_ACCOUNT_ADDR, CONTRACT_WASM, runtime_args)\n            .build();\n```\n\n----------------------------------------\n\nTITLE: Retrieving Latest State Root Hash\nDESCRIPTION: This snippet retrieves the latest state root hash from the Casper network and queries global state for details on the primary account, essential for reviewing account configuration changes.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/versioned_docs/version-1.5.X/resources/advanced/multi-sig/multi-sig-workflow.md#2025-04-22_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\ncasper-client get-state-root-hash --node-address https://node.testnet.casper.network\n\ncasper-client query-global-state \\\n--node-address https://node.testnet.casper.network \\\n--state-root-hash <STATE_ROOT_HASH> \\\n--key account-hash-<PRIMARY_ACCOUNT_HASH>\n```\n\n----------------------------------------\n\nTITLE: Transaction Payment Schema Definition in JSON\nDESCRIPTION: Defines the schema for transaction payment using a reserved receipt hash, including required properties and validation constraints.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/condor/jsonrpc-comp/rpc-2.0/schema.json.md#2025-04-22_snippet_35\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"description\": \"The payment for this transaction was previously reserved, as proven by the receipt hash (this is for future use, not currently implemented).\",\n  \"type\": \"object\",\n  \"required\": [\n    \"Reserved\"\n  ],\n  \"properties\": {\n    \"Reserved\": {\n      \"type\": \"object\",\n      \"required\": [\n        \"receipt\"\n      ],\n      \"properties\": {\n        \"receipt\": {\n          \"description\": \"Pre-paid receipt.\",\n          \"allOf\": [\n            {\n              \"$ref\": \"#/components/schemas/Digest\"\n            }\n          ]\n        }\n      },\n      \"additionalProperties\": false\n    }\n  },\n  \"additionalProperties\": false\n}\n```\n\n----------------------------------------\n\nTITLE: Query Balance API Specification in JSON\nDESCRIPTION: Defines the RPC endpoint for querying account balances using purse and state identifiers. The endpoint returns the balance in motes and includes API version information. The specification includes parameter definitions, response schema, and a complete example.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/condor/jsonrpc-comp/rpc-1.5/query_balance.json.md#2025-04-22_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"name\": \"query_balance\",\n  \"summary\": \"query for a balance using a purse identifier and a state identifier\",\n  \"params\": [\n    {\n      \"name\": \"purse_identifier\",\n      \"schema\": {\n        \"description\": \"The identifier to obtain the purse corresponding to balance query.\",\n        \"$ref\": \"#/components/schemas/PurseIdentifier\"\n      },\n      \"required\": true\n    },\n    {\n      \"name\": \"state_identifier\",\n      \"schema\": {\n        \"description\": \"The state identifier used for the query, if none is passed the tip of the chain will be used.\",\n        \"anyOf\": [\n          {\n            \"$ref\": \"#/components/schemas/GlobalStateIdentifier\"\n          },\n          {\n            \"type\": \"null\"\n          }\n        ]\n      },\n      \"required\": false\n    }\n  ],\n  \"result\": {\n    \"name\": \"query_balance_result\",\n    \"schema\": {\n      \"description\": \"Result for \\\"query_balance\\\" RPC response.\",\n      \"type\": \"object\",\n      \"required\": [\n        \"api_version\",\n        \"balance\"\n      ],\n      \"properties\": {\n        \"api_version\": {\n          \"description\": \"The RPC API version.\",\n          \"type\": \"string\"\n        },\n        \"balance\": {\n          \"description\": \"The balance represented in motes.\",\n          \"$ref\": \"#/components/schemas/U512\"\n        }\n      }\n    }\n  },\n  \"examples\": [\n    {\n      \"name\": \"query_balance_example\",\n      \"params\": [\n        {\n          \"name\": \"state_identifier\",\n          \"value\": {\n            \"BlockHash\": \"13c2d7a68ecdd4b74bf4393c88915c836c863fc4bf11d7f2bd930a1bbccacdcb\"\n          }\n        },\n        {\n          \"name\": \"purse_identifier\",\n          \"value\": {\n            \"main_purse_under_account_hash\": \"account-hash-0909090909090909090909090909090909090909090909090909090909090909\"\n          }\n        }\n      ],\n      \"result\": {\n        \"name\": \"query_balance_example_result\",\n        \"value\": {\n          \"api_version\": \"1.5.6\",\n          \"balance\": \"123456\"\n        }\n      }\n    }\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Installing macOS Prerequisites\nDESCRIPTION: Essential package installations for macOS systems including Xcode tools, Homebrew, and Casper dependencies.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/docs/developers/prerequisites.md#2025-04-22_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nxcode-select --install\n```\n\nLANGUAGE: bash\nCODE:\n```\nxcode-select -p\n```\n\nLANGUAGE: bash\nCODE:\n```\n/bin/bash -c \"$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/HEAD/install.sh)\"\n```\n\nLANGUAGE: bash\nCODE:\n```\nbrew install pkg-config\nbrew install openssl\n```\n\n----------------------------------------\n\nTITLE: Query Global State Response in Casper Network API\nDESCRIPTION: Example JSON response for the query_global_state method showing the returned data including block header, stored value (an Account in this case), and Merkle proof verification data.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/versioned_docs/version-2.0.0/developers/json-rpc/json-rpc-informational.md#2025-04-22_snippet_19\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"id\": 1,\n  \"jsonrpc\": \"2.0\",\n  \"result\": {\n    \"api_version\": \"2.0.0\",\n    \"block_header\": {\n      \"Version2\": {\n        \"parent_hash\": \"0707070707070707070707070707070707070707070707070707070707070707\",\n        \"state_root_hash\": \"0808080808080808080808080808080808080808080808080808080808080808\",\n        \"body_hash\": \"0505050505050505050505050505050505050505050505050505050505050505\",\n        \"random_bit\": true,\n        \"accumulated_seed\": \"ac979f51525cfd979b14aa7dc0737c5154eabe0db9280eceaa8dc8d2905b20d5\",\n        \"era_end\": {\n          \"equivocators\": [\n            \"013b6a27bcceb6a42d62a3a8d02a6f0d73653215771de243a63ac048a18b59da29\"\n          ],\n          \"inactive_validators\": [\n            \"018139770ea87d175f56a35466c34c7ecccb8d8a91b4ee37a25df60f5b8fc9b394\"\n          ],\n          \"next_era_validator_weights\": [\n            {\n              \"validator\": \"013b6a27bcceb6a42d62a3a8d02a6f0d73653215771de243a63ac048a18b59da29\",\n              \"weight\": \"123\"\n            },\n            {\n              \"validator\": \"016e7a1cdd29b0b78fd13af4c5598feff4ef2a97166e3ca6f2e4fbfccd80505bf1\",\n              \"weight\": \"456\"\n            },\n            {\n              \"validator\": \"018a875fff1eb38451577acd5afee405456568dd7c89e090863a0557bc7af49f17\",\n              \"weight\": \"789\"\n            }\n          ],\n          \"rewards\": {},\n          \"next_era_gas_price\": 1\n        },\n        \"timestamp\": \"2020-11-17T00:39:24.072Z\",\n        \"era_id\": 1,\n        \"height\": 10,\n        \"protocol_version\": \"1.0.0\",\n        \"proposer\": \"01d9bf2148748a85c89da5aad8ee0b0fc2d105fd39d41a4c796536354f0ae2900c\",\n        \"current_gas_price\": 1,\n        \"last_switch_block_hash\": \"0909090909090909090909090909090909090909090909090909090909090909\"\n      }\n    },\n    \"stored_value\": {\n      \"Account\": {\n        \"account_hash\": \"account-hash-e94daaff79c2ab8d9c31d9c3058d7d0a0dd31204a5638dc1451fa67b2e3fb88c\",\n        \"named_keys\": [\n          {\n            \"name\": \"main_purse\",\n            \"key\": \"uref-09480c3248ef76b603d386f3f4f8a5f87f597d4eaffd475433f861af187ab5db-007\"\n          }\n        ],\n        \"main_purse\": \"uref-09480c3248ef76b603d386f3f4f8a5f87f597d4eaffd475433f861af187ab5db-007\",\n        \"associated_keys\": [\n          {\n            \"account_hash\": \"account-hash-e94daaff79c2ab8d9c31d9c3058d7d0a0dd31204a5638dc1451fa67b2e3fb88c\",\n            \"weight\": 1\n          }\n        ],\n        \"action_thresholds\": {\n          \"deployment\": 1,\n          \"key_management\": 1\n        }\n      }\n    },\n    \"merkle_proof\": \"01000000006ef2e0949ac76e55812421f755abe129b6244fe7168b77f47a72536147614625016ef2e0949ac76e55812421f755abe129b6244fe7168b77f47a7253614761462500000000352‌9cde5c621f857f75f3810611eb4af3f998caaa9d4a3413cf799f99c67db0307010000006ef2e0949ac76e55812421f755abe129b6244fe7168b77f47a7253614761462501010102000000006e06000000000074769d28aac597a36a03a932d4b43e4f10bf0403ee5c41dd035102553f5773631200b9e173e8f05361b681513c14e25e3138639eb03232581db7557c9e8dbbc83ce94500226a9a7fe4f2b7b88d5103a4fc7400f02bf89c860c9ccdd56951a2afe9be0e0267006d820fb5676eb2960e15722f7725f3f8f41030078f8b2e44bf0dc03f71b176d6e800dc5ae9805068c5be6da1a90b2528ee85db0609cc0fb4bd60bbd559f497a98b67f500e1e3e846592f4918234647fca39830b7e1e6ad6f5b7a99b39af823d82ba1873d000003000000010186ff500f287e9b53f823ae1582b1fa429dfede28015125fd233a31ca04d5012002015cc42669a55467a1fdf49750772bfc1aed59b9b085558eb81510e9b015a7c83b0301e3cf4a34b1db6bfa58808b686cb8fe21ebe0c1bcbcee522649d2b135fe510fe3\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Transaction Lanes and Limits – Casper Network TOML\nDESCRIPTION: This TOML snippet specifies the configuration for Casper's transaction lanes on Mainnet, delineating native and WASM-based lane parameters including transaction size and gas limits. It requires Casper nodes to parse the TOML format and interpret each option correctly. Key parameters include lane labels (reserved numeric types for mint, auction, install, etc.), max transaction sizes per lane, max argument lengths, gas limits, and the maximum transaction count per lane. All numeric values must follow TOML syntax, and correct labeling of lanes is crucial for mainnet validation. The configuration affects which transactions are accepted and how computational resources are limited within blocks.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/versioned_docs/version-2.0.0/concepts/economics/runtime.md#2025-04-22_snippet_0\n\nLANGUAGE: toml\nCODE:\n```\n[transactions.v1]\n# The configuration settings for the lanes of transactions including both native and Wasm based interactions.\n# Currently the node supports two native interactions the mint and auction and have the reserved identifiers of 0 and 1\n# respectively\n# The remaining wasm based lanes specify the range of configuration settings for a given Wasm based transaction\n# within a given lane.\n# The maximum length in bytes of runtime args per V1 transaction.\n# [0] -> Transaction lane label (apart from the reserved native identifiers these are simply labels)\n# Note: For the given mainnet implementation we specially reserve the label 2 for install and upgrades and\n# the lane must be present and defined.\n# Different casper networks may not impose such a restriction.\n# [1] -> Max transaction size in bytes for a given transaction in a certain lane\n# [2] -> Max args length size in bytes for a given transaction in a certain lane\n# [3] -> Transaction gas limit size in bytes for a given transaction in a certain lane\n# [4] -> The maximum number of transactions the lane can contain\nnative_mint_lane = [0, 1024, 1024, 65_000_000_000, 650]\nnative_auction_lane = [1, 2048, 2048, 362_500_000_000, 145]\nwasm_lanes = [[2, 1_048_576, 2048, 1_000_000_000_000, 1], [3, 344_064, 1024, 500_000_000_000, 3], [4, 172_032, 1024, 50_000_000_000, 7], [5, 12_288, 512, 1_500_000_000, 15]]\n```\n\n----------------------------------------\n\nTITLE: Defining Package Lock Status Enum in JSON\nDESCRIPTION: This JSON schema defines an enumeration for the lock status of a package, indicating whether a package is 'Locked' or 'Unlocked'. The 'Locked' status implies the package cannot be versioned, while 'Unlocked' means it can be versioned. This schema requires no additional dependencies and serves to enforce state constraints in package management.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/condor/jsonrpc-comp/rpc-2.0/schema/PackageStatus.json.md#2025-04-22_snippet_0\n\nLANGUAGE: JSON\nCODE:\n```\n{\n    \"description\": \"A enum to determine the lock status of the package.\",\n    \"oneOf\": [\n        {\n            \"description\": \"The package is locked and cannot be versioned.\",\n            \"type\": \"string\",\n            \"enum\": [\n                \"Locked\"\n            ]\n        },\n        {\n            \"description\": \"The package is unlocked and can be versioned.\",\n            \"type\": \"string\",\n            \"enum\": [\n                \"Unlocked\"\n            ]\n        }\n    ]\n}\n```\n\n----------------------------------------\n\nTITLE: Obtaining Global State Root Hash in Casper Network\nDESCRIPTION: This command retrieves the latest global state root hash from a Casper node. It requires specifying an ID and the node address.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/versioned_docs/version-1.5.X/resources/beginner/querying-network.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ncasper-client get-state-root-hash \\\n     --id 1 \\\n     --node-address http://<node-ip-address>:7777\n```\n\n----------------------------------------\n\nTITLE: Parsing Speculative Execution Result JSON in Casper Network API\nDESCRIPTION: This JSON snippet demonstrates the structure of a speculative_exec_result returned by the Casper Network API. It includes the API version and detailed execution results with block hash, transfers, gas usage, and effects.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/versioned_docs/version-2.0.0/developers/json-rpc/json-rpc-transactional.md#2025-04-22_snippet_5\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"jsonrpc\": \"2.0\",\n  \"id\": 1,\n  \"result\": {\n    \"name\": \"speculative_exec_result\",\n    \"value\": {\n      \"api_version\": \"2.0.0\",\n      \"execution_result\": {\n          \"block_hash\": \"b597865a5f96ea23932173601bf6b170a482f562f6dd3598b2d37a86c1f01371\",\n          \"transfers\": [],\n          \"limit\": \"100000000000\",\n          \"consumed\": \"23289743502\",\n          \"effects\": [\n              {\n                  \"key\": \"uref-65d264188c3cf9e61862415424c99900ec1c858f168d94d98b332fe738bf2249-000\",\n                  \"kind\": {\n                      \"Write\": {\n                          \"CLValue\": {\n                              \"cl_type\": \"Unit\",\n                              \"bytes\": \"\",\n                              \"parsed\": null\n                          }\n                      }\n                  }\n              },\n              {\n                  \"key\": \"package-154847e85beee3b5cd1c769b8f01dbc4b93d1cea8370c0b3bc1858d0d248a48b\",\n                  \"kind\": {\n                      \"Write\": {\n                          \"Package\": {\n                              \"versions\": [],\n                              \"disabled_versions\": [],\n                              \"groups\": [],\n                              \"lock_status\": \"Unlocked\"\n                          }\n                      }\n                  }\n              },\n              {\n                  \"key\": \"named-key-entity-account-7ba7c904427d5fe653b99584c07c3c5963b6ea2e75ad87aea69b71a65bf6fcea-7f292691d790433e131a5ea69c70b85a959a454f5d928de437b11bf4e7c06930\",\n                  \"kind\": {\n                      \"Write\": {\n                          \"NamedKey\": {\n                              \"named_key\": {\n                                  \"cl_type\": \"Key\",\n                                  \"bytes\": \"10154847e85beee3b5cd1c769b8f01dbc4b93d1cea8370c0b3bc1858d0d248a48b\",\n                                  \"parsed\": \"package-154847e85beee3b5cd1c769b8f01dbc4b93d1cea8370c0b3bc1858d0d248a48b\"\n                              },\n                              \"name\": {\n                                  \"cl_type\": \"String\",\n                                  \"bytes\": \"19000000746573745f7061796d656e745f7061636b6167655f68617368\",\n                                  \"parsed\": \"test_payment_package_hash\"\n                              }\n                          }\n                      }\n                  }\n              },\n              {\n                  \"key\": \"named-key-entity-account-7ba7c904427d5fe653b99584c07c3c5963b6ea2e75ad87aea69b71a65bf6fcea-814d93d21458dd90914dba42395ec9c075bc105cf3ef7ae0215f2107f3b47848\",\n                  \"kind\": {\n                      \"Write\": {\n                          \"NamedKey\": {\n                              \"named_key\": {\n                                  \"cl_type\": \"Key\",\n                                  \"bytes\": \"0265d264188c3cf9e61862415424c99900ec1c858f168d94d98b332fe738bf224907\",\n                                  \"parsed\": \"uref-65d264188c3cf9e61862415424c99900ec1c858f168d94d98b332fe738bf2249-007\"\n                              },\n                              \"name\": {\n                                  \"cl_type\": \"String\",\n                                  \"bytes\": \"13000000746573745f7061796d656e745f616363657373\",\n                                  \"parsed\": \"test_payment_access\"\n                              }\n                          }\n                      }\n                  }\n              },\n              {\n                  \"key\": \"package-154847e85beee3b5cd1c769b8f01dbc4b93d1cea8370c0b3bc1858d0d248a48b\",\n                  \"kind\": \"Identity\"\n              },\n              {\n                  \"key\": \"entity-system-63448411a9dac7fd2e4a1dc9287ddb95b6f26ebe549b1387e44685d6b56dab08\",\n                  \"kind\": \"Identity\"\n              },\n              {\n                  \"key\": \"package-63227f4db8d0d09e3b4b64416125ac35023e1054e38127780ec241b2b60d8b3d\",\n                  \"kind\": \"Identity\"\n              },\n              {\n                  \"key\": \"entry-point-v1-entity-system-63448411a9dac7fd2e4a1dc9287ddb95b6f26ebe549b1387e44685d6b56dab08-21bddc7e4379ba445c7118cb51962954e0d1e5aa5cacc0c4ff6095b57eb9fb33\",\n                  \"kind\": \"Identity\"\n              },\n              {\n                  \"key\": \"uref-7a9d9c0c33540e9fd4c1245f6ac687c7eacf98ac1072591adc3f83332a909d86-000\",\n                  \"kind\": {\n                      \"Write\": {\n                          \"CLValue\": {\n                              \"cl_type\": \"Unit\",\n                              \"bytes\": \"\",\n                              \"parsed\": null\n                          }\n                      }\n                  }\n              },\n              {\n                  \"key\": \"balance-7a9d9c0c33540e9fd4c1245f6ac687c7eacf98ac1072591adc3f83332a909d86\",\n                  \"kind\": {\n                      \"Write\": {\n                          \"CLValue\": {\n                              \"cl_type\": \"U512\",\n                              \"bytes\": \"00\",\n                              \"parsed\": \"0\"\n                          }\n                      }\n                  }\n              },\n              {\n                  \"key\": \"byte-code-v1-wasm-9639481569c3940ce272402f0e9bc0ea535435ea9ffc18d8696e4af02c841354\",\n                  \"kind\": {\n                      \"Write\": {\n                          \"ByteCode\": {\n                              \"kind\": \"V1CasperWasm\"\n\n```\n\n----------------------------------------\n\nTITLE: Delegating CSPR Using System Auction Contract\nDESCRIPTION: Command to delegate CSPR tokens using the system auction contract's delegate entry point. Requires node address, secret key, chain name, and validator details. The minimum delegation amount is 500 CSPR with a fixed cost of 2.5 CSPR.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/docs/developers/cli/delegate.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ncasper-client put-deploy \\\n--node-address <HOST:PORT> \\\n--secret-key <PATH> \\\n--chain-name <CHAIN_NAME> \\\n--payment-amount <PAYMENT_AMOUNT_IN_MOTES> \\\n--session-hash <SESSION_HASH> \\\n--session-entry-point delegate \\\n--session-arg \"validator:public_key='<HEX_ENCODED_VALIDATOR_PULIC_KEY>'\" \\\n--session-arg \"amount:u512='<AMOUNT_TO_DELEGATE>'\" \\\n--session-arg \"delegator:public_key='<HEX_ENCODED_DELEGATOR_PULIC_KEY>'\"\n```\n\n----------------------------------------\n\nTITLE: Getting the Account Hash in Bash\nDESCRIPTION: Command to derive an account hash from a public key, which is needed for querying account-specific information on the Casper Network.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/docs/resources/tokens/cep18/full-tutorial.md#2025-04-22_snippet_10\n\nLANGUAGE: bash\nCODE:\n```\ncasper-client account-address --public-key \"[PATH_TO_YOUR_KEY]/public_key_hex\"\n```\n\n----------------------------------------\n\nTITLE: Contract Call Implementation\nDESCRIPTION: Session code that calls the contract's entry point and stores the intersection result.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/versioned_docs/version-2.0.0/resources/advanced/list-auth-keys-tutorial.md#2025-04-22_snippet_5\n\nLANGUAGE: rust\nCODE:\n```\nlet key_name: String = runtime::get_named_arg(ARG_KEY_NAME);\nlet intersection =\n    runtime::call_contract::<Vec<AccountHash>>(contract_hash, ENTRY_POINT, runtime_args! {});\nruntime::put_key(&key_name, storage::new_uref(intersection).into());\n}\n```\n\n----------------------------------------\n\nTITLE: Staging Protocols on Testnet using Python Utility via Bash\nDESCRIPTION: Executes the `node_util.py` Python script as the `casper` user to stage protocol versions required for Testnet, using the `casper-test.conf` configuration file.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/versioned_docs/version-1.5.X/operators/setup/install-node.md#2025-04-22_snippet_9\n\nLANGUAGE: bash\nCODE:\n```\nsudo -u casper /etc/casper/node_util.py stage_protocols casper-test.conf\n```\n\n----------------------------------------\n\nTITLE: Cloning Multi-Sig Repository\nDESCRIPTION: Command to clone the two-party multi-signature implementation repository from GitHub.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/versioned_docs/version-2.0.0/resources/advanced/two-party-multi-sig.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ngit clone https://github.com/casper-ecosystem/two-party-multi-sig\n```\n\n----------------------------------------\n\nTITLE: Parsing Auction Bids JSON Response\nDESCRIPTION: This JSON snippet shows the structure of the 'bids' field in the auction info response. It includes details about validators, their bonding purses, delegation rates, and delegators.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/versioned_docs/version-2.0.0/developers/cli/delegate.md#2025-04-22_snippet_8\n\nLANGUAGE: json\nCODE:\n```\n\"bids\": [\n{\n  \"bid\": {\n    \"bonding_purse\": \"uref-a5ce7dbc5f7e02ef52048e64b2ff4693a472a1a56fe71e83b180cd33271b2ed9-007\",\n    \"delegation_rate\": 1,\n    \"delegators\": [\n      {\n        \"bonding_purse\": \"uref-ca9247ad56a4d5be70484303133e2d6db97f7d7385772155763749af98ace0b0-007\",\n        \"delegatee\": \"0102db4e11bccb3f9d823c82b9389625d383867d00d09b343043cdbe5ca56dd1fd\",\n        \"public_key\": \"010c7fef89bf1fc38363bd2ec20bbfb5e1152d6a9579c8847615c59c7e461ece89\",\n        \"staked_amount\": \"1\"\n      },\n      {\n        \"bonding_purse\": \"uref-38a2e9cad51b380e478c9a325578f4bbdaa0337b99b9ab9bf1dc2a114eb948b9-007\",\n        \"delegatee\": \"0102db4e11bccb3f9d823c82b9389625d383867d00d09b343043cdbe5ca56dd1fd\",\n        \"public_key\": \"016ebb38d613f2550e7c21ff9d99f6249b4ae5fb9e30938f6ece2d84a22a36b035\",\n        \"staked_amount\": \"478473232415318176495746923\"\n      }\n    ],\n    \"inactive\": false,\n    \"staked_amount\": \"493754513995516852173468935\"\n  },\n  \"public_key\": \"0102db4e11bccb3f9d823c82b9389625d383867d00d09b343043cdbe5ca56dd1fd\"\n},\n```\n\n----------------------------------------\n\nTITLE: Defining PurseIdentifier Polymorphic Schema - OpenAPI/Swagger - JSON\nDESCRIPTION: Defines a polymorphic schema 'PurseIdentifier' to represent multiple modes of identifying a 'purse' within Casper: via public key, account hash, or URef. Uses OpenAPI 'anyOf' to encapsulate the three object shapes with strict property requirements. The pattern requires referenced schemas like 'PublicKey', 'AccountHash', and 'URef' to be defined elsewhere in the OpenAPI components. Each variant of the identifier enforces a specific property and prohibits additional properties.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/condor/jsonrpc-comp/rpc-1.5/schema/components.json.md#2025-04-22_snippet_49\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"description\": \"Identifier of a purse.\",\n  \"anyOf\": [\n    {\n      \"description\": \"The main purse of the account identified by this public key.\",\n      \"type\": \"object\",\n      \"required\": [\n        \"main_purse_under_public_key\"\n      ],\n      \"properties\": {\n        \"main_purse_under_public_key\": {\n          \"$ref\": \"#/components/schemas/PublicKey\"\n        }\n      },\n      \"additionalProperties\": false\n    },\n    {\n      \"description\": \"The main purse of the account identified by this account hash.\",\n      \"type\": \"object\",\n      \"required\": [\n        \"main_purse_under_account_hash\"\n      ],\n      \"properties\": {\n        \"main_purse_under_account_hash\": {\n          \"$ref\": \"#/components/schemas/AccountHash\"\n        }\n      },\n      \"additionalProperties\": false\n    },\n    {\n      \"description\": \"The purse identified by this URef.\",\n      \"type\": \"object\",\n      \"required\": [\n        \"purse_uref\"\n      ],\n      \"properties\": {\n        \"purse_uref\": {\n          \"$ref\": \"#/components/schemas/URef\"\n        }\n      },\n      \"additionalProperties\": false\n    }\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Retrieving Deploy Details\nDESCRIPTION: Command to fetch details of a specific deploy using its hash, which helps identify transfer information.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/versioned_docs/version-1.5.X/developers/cli/transfers/verify-transfer.md#2025-04-22_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ncasper-client get-deploy \\\n  --node-address [NODE_SERVER_ADDRESS]  \\\n  [DEPLOY_HASH]\n```\n\n----------------------------------------\n\nTITLE: Defining CLType Enum in Rust for Casper\nDESCRIPTION: This code snippet defines the CLType enum, which describes the types of values used in Casper smart contracts. It includes primitive types, complex structures, and Casper-specific types.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/docs/concepts/serialization/primitives.md#2025-04-22_snippet_0\n\nLANGUAGE: rust\nCODE:\n```\nenum CLType {\n   Bool, // boolean primitive\n   I32, // signed 32-bit integer primitive\n   I64, // signed 64-bit integer primitive\n   U8, // unsigned 8-bit integer primitive\n   U32, // unsigned 32-bit integer primitive\n   U64, // unsigned 64-bit integer primitive\n   U128, // unsigned 128-bit integer primitive\n   U256, // unsigned 256-bit integer primitive\n   U512, // unsigned 512-bit integer primitive\n   Unit, // singleton value without additional semantics\n   String, // e.g. \"Hello, World!\"\n   URef, // unforgeable reference (see above)\n   Key, // global state key (see above)\n   PublicKey // A Casper system PublicKey type\n   Option(CLType), // optional value of the given type\n   List(CLType), // list of values of the given type (e.g. Vec in rust)\n   ByteArray(CLType, u32), // same as `List` above, but number of elements\n                           // is statically known (e.g. arrays in rust)\n   Result(CLType, CLType), // co-product of the given types;\n                           // one variant meaning success, the other failure\n   Map(CLType, CLType), // key-value association where keys and values have the given types\n   Tuple1(CLType), // single value of the given type\n   Tuple2(CLType, CLType), // pair consisting of elements of the given types\n   Tuple3(CLType, CLType, CLType), // triple consisting of elements of the given types\n   Any // Indicates the type is not known\n}\n```\n\n----------------------------------------\n\nTITLE: Querying Era Summary with chain_get_era_summary Request\nDESCRIPTION: JSON-RPC request to retrieve the era summary information at a given block hash. Returns era-specific data about the network state.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/versioned_docs/version-1.5.X/developers/json-rpc/json-rpc-informational.md#2025-04-22_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\n{\n  \"id\": 1,\n  \"jsonrpc\":\"2.0\",\n  \"method\":\"chain_get_era_summary\",\n  \"params\": [\n    {\n      \"Hash\":\"9bfa58709058935882a095ca6adf844b72a2ddf0f49b8575ef1ceda987452fb8\"\n    }\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Installing Casper Client Dependencies on Ubuntu (Bash)\nDESCRIPTION: Installs necessary development libraries (`pkg-config`, `openssl`, `libssl-dev`) on Ubuntu using the apt package manager. These are required dependencies for building the `casper-client`.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/docs/resources/quick-start.md#2025-04-22_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\nsudo apt-get install pkg-config\nsudo apt-get install openssl\nsudo apt-get install libssl-dev\n```\n\n----------------------------------------\n\nTITLE: Block Query JSON-RPC Request Format\nDESCRIPTION: Example of the JSON-RPC request format for querying block information. Shows the structure required when making a direct API call to the node.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/versioned_docs/version-1.5.X/resources/beginner/querying-network.md#2025-04-22_snippet_6\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"id\": 3,\n    \"jsonrpc\": \"2.0\",\n    \"method\": \"chain_get_block\",\n    \"params\": {\n        \"block_identifier\": {\n            \"Hash\": \"7c7e9b0f087bba5ce6fc4bd067b57f69ea3c8109157a3ad7f6d98b8da77d97f9\"\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Sample Response for Global State Query\nDESCRIPTION: The JSON response from a successful global state query, including the API version, stored value, and merkle proof.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/docs/developers/cli/querying-global-state.md#2025-04-22_snippet_5\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"jsonrpc\": \"2.0\",\n  \"id\": 2591514718461273084,\n  \"result\": {\n    \"api_version\": \"2.0.0\",\n    \"block_header\": null,\n    \"stored_value\": {\n      \"CLValue\": {\n        \"cl_type\": \"Key\",\n        \"bytes\": \"11016a56c4eee172043975aea72221eaf09f3c3a24f09a379935e44c9979f1ae9463\",\n        \"parsed\": \"entity-account-6a56c4eee172043975aea72221eaf09f3c3a24f09a379935e44c9979f1ae9463\"\n      }\n    },\n    \"merkle_proof\": \"[2566 hex chars]\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining CLType Schema Structure in JSON\nDESCRIPTION: A comprehensive JSON schema that defines the valid structure of CLType values used in Casper smart contracts. It includes primitive types (Bool, numbers, String etc.), container types (Option, List, Map), and fixed-size types like ByteArray and Tuples. The schema enforces type constraints and validation rules for each variant.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/condor/jsonrpc-comp/rpc-1.5/schema/CLType.json.md#2025-04-22_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"description\": \"Casper types, i.e. types which can be stored and manipulated by smart contracts.\\n\\nProvides a description of the underlying data type of a [`CLValue`](crate::CLValue).\",\n    \"anyOf\": [\n        {\n            \"type\": \"string\",\n            \"enum\": [\n                \"Bool\",\n                \"I32\",\n                \"I64\",\n                \"U8\",\n                \"U32\",\n                \"U64\",\n                \"U128\",\n                \"U256\",\n                \"U512\",\n                \"Unit\",\n                \"String\",\n                \"Key\",\n                \"URef\",\n                \"PublicKey\",\n                \"Any\"\n            ]\n        },\n        {\n            \"description\": \"`Option` of a `CLType`.\",\n            \"type\": \"object\",\n            \"required\": [\n                \"Option\"\n            ],\n            \"properties\": {\n                \"Option\": {\n                    \"$ref\": \"#/components/schemas/CLType\"\n                }\n            },\n            \"additionalProperties\": false\n        },\n        {\n            \"description\": \"Variable-length list of a single `CLType` (comparable to a `Vec`).\",\n            \"type\": \"object\",\n            \"required\": [\n                \"List\"\n            ],\n            \"properties\": {\n                \"List\": {\n                    \"$ref\": \"#/components/schemas/CLType\"\n                }\n            },\n            \"additionalProperties\": false\n        },\n        {\n            \"description\": \"Fixed-length list of a single `CLType` (comparable to a Rust array).\",\n            \"type\": \"object\",\n            \"required\": [\n                \"ByteArray\"\n            ],\n            \"properties\": {\n                \"ByteArray\": {\n                    \"type\": \"integer\",\n                    \"format\": \"uint32\",\n                    \"minimum\": 0\n                }\n            },\n            \"additionalProperties\": false\n        },\n        {\n            \"description\": \"`Result` with `Ok` and `Err` variants of `CLType`s.\",\n            \"type\": \"object\",\n            \"required\": [\n                \"Result\"\n            ],\n            \"properties\": {\n                \"Result\": {\n                    \"type\": \"object\",\n                    \"required\": [\n                        \"err\",\n                        \"ok\"\n                    ],\n                    \"properties\": {\n                        \"ok\": {\n                            \"$ref\": \"#/components/schemas/CLType\"\n                        },\n                        \"err\": {\n                            \"$ref\": \"#/components/schemas/CLType\"\n                        }\n                    },\n                    \"additionalProperties\": false\n                }\n            },\n            \"additionalProperties\": false\n        },\n        {\n            \"description\": \"Map with keys of a single `CLType` and values of a single `CLType`.\",\n            \"type\": \"object\",\n            \"required\": [\n                \"Map\"\n            ],\n            \"properties\": {\n                \"Map\": {\n                    \"type\": \"object\",\n                    \"required\": [\n                        \"key\",\n                        \"value\"\n                    ],\n                    \"properties\": {\n                        \"key\": {\n                            \"$ref\": \"#/components/schemas/CLType\"\n                        },\n                        \"value\": {\n                            \"$ref\": \"#/components/schemas/CLType\"\n                        }\n                    },\n                    \"additionalProperties\": false\n                }\n            },\n            \"additionalProperties\": false\n        },\n        {\n            \"description\": \"1-ary tuple of a `CLType`.\",\n            \"type\": \"object\",\n            \"required\": [\n                \"Tuple1\"\n            ],\n            \"properties\": {\n                \"Tuple1\": {\n                    \"type\": \"array\",\n                    \"items\": {\n                        \"$ref\": \"#/components/schemas/CLType\"\n                    },\n                    \"maxItems\": 1,\n                    \"minItems\": 1\n                }\n            },\n            \"additionalProperties\": false\n        },\n        {\n            \"description\": \"2-ary tuple of `CLType`s.\",\n            \"type\": \"object\",\n            \"required\": [\n                \"Tuple2\"\n            ],\n            \"properties\": {\n                \"Tuple2\": {\n                    \"type\": \"array\",\n                    \"items\": {\n                        \"$ref\": \"#/components/schemas/CLType\"\n                    },\n                    \"maxItems\": 2,\n                    \"minItems\": 2\n                }\n            },\n            \"additionalProperties\": false\n        },\n        {\n            \"description\": \"3-ary tuple of `CLType`s.\",\n            \"type\": \"object\",\n            \"required\": [\n                \"Tuple3\"\n            ],\n            \"properties\": {\n                \"Tuple3\": {\n                    \"type\": \"array\",\n                    \"items\": {\n                        \"$ref\": \"#/components/schemas/CLType\"\n                    },\n                    \"maxItems\": 3,\n                    \"minItems\": 3\n                }\n            },\n            \"additionalProperties\": false\n        }\n    ]\n}\n```\n\n----------------------------------------\n\nTITLE: Combined Process ID and Limit Check\nDESCRIPTION: Single command that combines finding the PID and checking its open files limit\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/versioned_docs/version-2.0.0/operators/setup/open-files.md#2025-04-22_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nsudo prlimit -n -p $(pgrep \"casper-node$\")\n```\n\n----------------------------------------\n\nTITLE: Installing Homebrew on macOS\nDESCRIPTION: Install Homebrew, the package manager for macOS, using a curl command.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/versioned_docs/version-2.0.0/developers/prerequisites.md#2025-04-22_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\n/bin/bash -c \"$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/HEAD/install.sh)\"\n```\n\n----------------------------------------\n\nTITLE: Defining NamedArg Tuple Structure - JSON Schema - JSON\nDESCRIPTION: Defines 'NamedArg' as an array containing exactly two elements: a string and a contract value (CLValue). This tuple structure enforces that each argument in runtime calls has both a name and a value explicitly specified. Relies on the referenced 'CLValue' schema for the value encoding.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/condor/jsonrpc-comp/rpc-2.0/schema/components.json.md#2025-04-22_snippet_7\n\nLANGUAGE: JSON\nCODE:\n```\n{\n    \"NamedArg\": {\n        \"description\": \"Named arguments to a contract.\",\n        \"type\": \"array\",\n        \"items\": [\n            {\n                \"type\": \"string\"\n            },\n            {\n                \"$ref\": \"#/components/schemas/CLValue\"\n            }\n        ],\n        \"maxItems\": 2,\n        \"minItems\": 2\n    }\n}\n\n```\n\n----------------------------------------\n\nTITLE: Preparing and Executing Entry Point Call Without Authorization Intersection - Casper Test Framework - Rust\nDESCRIPTION: This snippet sets up a contract call where the caller's authorization keys do not overlap with the installer's keys, expecting a permission denial. It builds session arguments, constructs a DeployItem with mismatching authorization, executes the request, and verifies the error code and message. Dependencies include contract hash data, Casper builder, and assertion helpers. Input prerequisites are available contract_hash, key name, and account info; output is explicit failure with the correct error code. Particularly, this checks error handling for missing authorization scenarios.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/versioned_docs/version-1.5.X/resources/advanced/list-auth-keys-tutorial.md#2025-04-22_snippet_17\n\nLANGUAGE: rust\nCODE:\n```\n let session_code = PathBuf::from(CONTRACT_CALL_WASM);\n\nlet session_args = runtime_args! {\n    ARG_CONTRACT_HASH => Key::from(contract_hash),\n    ARG_KEY_NAME => INTERSECTION_RECEIPT\n};\n\n// account_addr_2 as an associated key is not among the default account's associated keys\n// The deploy will therefore revert with PermissionDenied\nlet entry_point_deploy_item = DeployItemBuilder::new()\n    .with_empty_payment_bytes(runtime_args! {ARG_AMOUNT => *DEFAULT_PAYMENT})\n    .with_authorization_keys(&[account_addr_1, account_addr_2])\n    .with_address(account_addr_1)\n    .with_session_code(session_code, session_args)\n    .build();\n\nlet entry_point_request =\n    ExecuteRequestBuilder::from_deploy_item(entry_point_deploy_item).build();\n\nbuilder.exec(entry_point_request).commit().expect_failure();\n\nlet error = builder.get_error().expect(\"must have User error: 0\");\nassert_expected_error(\n    error,\n    0,\n    \"should fail execution since ACCOUNT_USER_2 as associated key is not in installer (DEFAULT_ACCOUNT_ADDR) associated keys\",\n);\n```\n\n----------------------------------------\n\nTITLE: Running Example Installation Script - casper-cep78-js-client - JavaScript\nDESCRIPTION: Shows the npm command to execute the example script for CEP-78 contract installation provided in the project. Assumes previous steps are complete and all configuration variables (.env) and dependencies are present. Running this prints deploy status and contract information upon success.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/docs/resources/tokens/cep78/js-tutorial.md#2025-04-22_snippet_7\n\nLANGUAGE: JavaScript\nCODE:\n```\nnpm run example:install\n```\n\n----------------------------------------\n\nTITLE: Query Contract Variable via Account\nDESCRIPTION: Example of querying a contract variable using account hash and named keys path.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/versioned_docs/version-1.5.X/developers/cli/installing-contracts.md#2025-04-22_snippet_9\n\nLANGUAGE: bash\nCODE:\n```\ncasper-client query-global-state \\\n  --node-address http://localhost:11101 \\\n  --state-root-hash fa968344a2000282686303f1664c474465f9a028f32ec4f51791d9fa64c0bcd7 \\\n  --key account-hash-1d17e3fdad268f866a73558d1ae45e1eea3924c247871cb63f67ebf1a116e66d \\\n  -q \"counter/count\"\n```\n\n----------------------------------------\n\nTITLE: Viewing Casper Sidecar Service Logs\nDESCRIPTION: Command to view the service logs for Casper Sidecar using journalctl.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/versioned_docs/version-2.0.0/operators/setup/casper-sidecar.md#2025-04-22_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\njournalctl --no-pager -u casper-sidecar\n```\n\n----------------------------------------\n\nTITLE: Sample Deploy Details Output in JSON\nDESCRIPTION: This is a comprehensive example of the deploy details returned by the casper-client get-deploy command. It includes the deploy header, payment, session, and execution results.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/docs/resources/tokens/cep18/full-tutorial.md#2025-04-22_snippet_19\n\nLANGUAGE: bash\nCODE:\n```\n{\n  {\n  \"id\": -870982079597140956,\n  \"jsonrpc\": \"2.0\",\n  \"result\": {\n    \"api_version\": \"1.4.3\",\n    \"deploy\": {\n      \"approvals\": [\n        {\n          \"signature\": \"[130 hex chars]\",\n          \"signer\": \"017B8CE645c728...............................\"\n        }\n      ],\n      \"hash\": \"F9D4C649Fa78Da07E.......................\",\n      \"header\": {\n        \"account\": \"017B8CE645c7285.......................\",\n        \"body_hash\": \"8eAEd6B7bCBB493d75d.......................\",\n        \"chain_name\": \"casper-test\",\n        \"dependencies\": [],\n        \"gas_price\": 1,\n        \"timestamp\": \"2022-01-04T15:14:29.203Z\",\n        \"ttl\": \"30m\"\n      },\n      \"payment\": {\n        \"ModuleBytes\": {\n          \"args\": [\n            [\n              \"amount\",\n              {\n                \"bytes\": \"0500e8764817\",\n                \"cl_type\": \"U512\",\n                \"parsed\": \"100000000000\"\n              }\n            ]\n          ],\n          \"module_bytes\": \"\"\n        }\n      },\n      \"session\": {\n        \"ModuleBytes\": {\n          \"args\": [],\n          \"module_bytes\": \"[417800 hex chars]\"\n        }\n      }\n    },\n    \"execution_results\": [\n      {\n        \"block_hash\": \"d3644f0306F20fa6.......................\",\n        \"result\": {\n          \"Success\": {\n            \"cost\": \"45040980830\",\n            \"effect\": {\n              \"operations\": [],\n              \"transforms\": [\n                {\n                  \"key\": \"hash-8cf5E4aCF51f54Eb5.......................\",\n                  \"transform\": \"Identity\"\n                },\n                {\n                  \"key\": \"hash-624dBE2395b9D9503FB.......................\",\n                  \"transform\": \"Identity\"\n                },\n                {\n                  \"key\": \"hash-010c3Fe81B7b862E50C77.......................\",\n                  \"transform\": \"Identity\"\n                },\n                {\n                  \"key\": \"hash-9824d60dC3A5c44A20b.......................\",\n                  \"transform\": \"Identity\"\n                },\n                {\n                  \"key\": \"balance-C051e7EC16e08De.......................\",\n                  \"transform\": \"Identity\"\n                },\n                {\n                  \"key\": \"balance-98d945f5324F865243.......................\",\n                  \"transform\": \"Identity\"\n                },\n                {\n                  \"key\": \"balance-C051e7EC16e08Def8b556\",\n                  \"transform\": {\n                    \"WriteCLValue\": {\n                      \"bytes\": \"06E07f3abEa001\",\n                      \"cl_type\": \"U512\",\n                      \"parsed\": \"1789897900000\"\n                    }\n                  }\n                },\n                {\n                  \"key\": \"balance-98d945f5324F865243B7c02C0417AB6eaC361c5c56602FD42ced834a1Ba201B6\",\n                  \"transform\": {\n                    \"AddUInt512\": \"100000000000\"\n                  }\n                },\n                {\n                  \"key\": \"uref-d29a34C29769D4BaC250CF9efD3c6372d8e6a89B62fAD122b3BF009990Ae61CD-000\",\n                  \"transform\": {\n                    \"WriteCLValue\": {\n                      \"bytes\": \"\",\n                      \"cl_type\": \"Unit\",\n                      \"parsed\": null\n                    }\n                  }\n                },\n                {\n                  \"key\": \"account-hash-7f4bf39A3...................................................\",\n                  \"transform\": {\n                    \"AddKeys\": [\n                      {\n                        \"key\": \"uref-d29a34C29769D4BaC250CF9efD3c6372d8e6a89B62fAD122b3BF009990Ae61CD-007\",\n                        \"name\": \"balances\"\n                      }\n                    ]\n                  }\n                },\n                {\n                  \"key\": \"uref-075874B98e3CF57Ea6326746336A0Aa908e770D3ADe0cf953f7E146f8B64F837-000\",\n                  \"transform\": {\n                    \"WriteCLValue\": {\n                      \"bytes\": \"\",\n                      \"cl_type\": \"Unit\",\n                      \"parsed\": null\n                    }\n                  }\n                },\n                {\n                  \"key\": \"account-hash-7f4bf39A311...................................................\",\n                  \"transform\": {\n                    \"AddKeys\": [\n                      {\n                        \"key\": \"uref-075874B98e3CF57Ea6326746336A0Aa908e770D3ADe0cf953f7E146f8B64F837-007\",\n                        \"name\": \"allowances\"\n                      }\n                    ]\n                  }\n                },\n                {\n                  \"key\": \"uref-66Bf928E1F6A28b174A48Fca4c002Bc8b77Dd851d7EFFb9Dc1A450cB211E484a-000\",\n                  \"transform\": {\n                    \"WriteCLValue\": {\n                      \"bytes\": \"0400ca9A3B\",\n                      \"cl_type\": \"U256\",\n                      \"parsed\": \"1000000000\"\n                    }\n                  }\n                },\n                {\n                  \"key\": \"uref-4EB0a2A42afBb1d3D5ae9BD4781dc96E528C7AD3f0eEC240Cf1DbDaDF4f3D486-000\",\n                  \"transform\": {\n                    \"WriteCLValue\": {\n                      \"bytes\": \"0A00000043617370657254657374\",\n                      \"cl_type\": \"String\",\n                      \"parsed\": \"CasperTest\"\n                    }\n                  }\n                },\n                {\n                  \"key\": \"uref-6e87fd661D5a65aF95f02baDfEb64f8E0F44C006661d4903A68E9dF8dEAa413d-000\",\n                  \"transform\": {\n                    \"WriteCLValue\": {\n                      \"bytes\": \"050000004353505254\",\n                      \"cl_type\": \"String\",\n                      \"parsed\": \"CSPRT\"\n                    }\n                  }\n                },\n                {\n                  \"key\": \"uref-aCA2425C80584391fB883603460578B1472d13a429Ebbd1a18a55cE19cE8F3C6-000\",\n                  \"transform\": {\n                    \"WriteCLValue\": {\n                      \"bytes\": \"08\",\n                      \"cl_type\": \"U8\",\n                      \"parsed\": 8\n                    }\n                  }\n                },\n                {\n                  \"key\": \"dictionary-baA61231F04B1c2Ee97025f425eaD2F70CAd9c1E8c24355246d159038AdCb2e9\",\n                  \"transform\": {\n                    \"WriteCLValue\": {\n                      \"bytes\": \"[188 hex chars]\",\n                      \"cl_type\": \"Any\",\n                      \"parsed\": null\n                    }\n                  }\n                },\n                {\n                  \"key\": \"account-hash-7f4bf39A311a7538d8C...................................................\",\n                  \"transform\": \"Identity\"\n                },\n                {\n                  \"key\": \"account-hash-7f4bf39A311a75...................................................\",\n                  \"transform\": {\n                    \"WriteAccount\": \"account-hash-7f4bf39A311a7538d8C91BB86C71DF774023e16bc4a70ab7e4e8AE77DbF2Ef53\"\n                  }\n                },\n                {\n                  \"key\": \"account-hash-7f4bf39A311a7538...................................................\",\n                  \"transform\": \"Identity\"\n                },\n                {\n                  \"key\": \"account-hash-7f4bf39A311a7538d8C...................................................\",\n                  \"transform\": {\n                    \"WriteAccount\": \"account-hash-7f4bf39A311a75...................................................\"\n                  }\n                },\n                {\n                  \"key\": \"uref-868c0e0BEB2EB3C10e893be96E6D6bE7FC6375f3f038e46c3262509245c117a0-000\",\n                  \"transform\": {\n                    \"WriteCLValue\": {\n                      \"bytes\": \"\",\n                      \"cl_type\": \"Unit\",\n                      \"parsed\": null\n                    }\n                  }\n                },\n                {\n                  \"key\": \"hash-28f982A396052b5068383E725ab48965AB941167f53DB36a0911ba0C98bc39F0\",\n                  \"transform\": \"WriteContractPackage\"\n                },\n                {\n                  \"key\": \"hash-28f982A396052b5068383E725ab48965AB941167f53DB36a0911ba0C98bc39F0\",\n                  \"transform\": \"Identity\"\n                },\n                {\n                  \"key\": \"hash-AdF81845d77907054ACb250c196392c7DAEE5481d4EabEB76c318A307c11E5cB\",\n                  \"transform\": \"WriteContractWasm\"\n                },\n                {\n                  \"key\": \"hash-Faa81ED758ecE1B99E2Ce48073D13D7f6185d9dc5233E39DE5c192Bebb9483D6\",\n                  \"transform\": \"WriteContract\"\n                },\n                {\n                  \"key\": \"hash-28f982A396052b5068383E725ab48965AB941167f53DB36a0911ba0C98bc39F0\",\n                  \"transform\": \"WriteContractPackage\"\n                },\n                {\n                  \"key\": \"account-hash-7f4bf39A311a7538d8...................................................\",\n                  \"transform\": {\n                    \"AddKeys\": [\n                      {\n                        \"key\": \"hash-Faa81ED758ecE1B99E2Ce48073D13D7f6185d9dc5233E39DE5c192Bebb9483D6\",\n                        \"name\": \"test_contract\"\n                      }\n                    ]\n                  }\n                },\n                {\n                  \"key\": \"uref-66Bf928E1F6A28b174A48Fca4c002Bc8b77Dd851d7EFFb9Dc1A450cB211E484a-000\",\n                  \"transform\": \"Identity\"\n                },\n                {\n```\n\n----------------------------------------\n\nTITLE: Running Python SDK Tests\nDESCRIPTION: Command to run tests using pytest framework in the tests directory.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/docs/developers/dapps/sdk/python-sdk.md#2025-04-22_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\npytest ./tests\n```\n\n----------------------------------------\n\nTITLE: Examining FinalitySignature Event Structure in JSON\nDESCRIPTION: The FinalitySignature event indicates that validators have signed final approvals for a block, preventing further alterations. It contains the block hash, era ID, validator signature, and the public key of the validator who signed.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/versioned_docs/version-1.5.X/developers/dapps/monitor-and-consume-events.md#2025-04-22_snippet_9\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"FinalitySignature\": {\n    \"block_hash\": \"eceed827e11f7969a7d3fe91d6fa4ce9749dd79d9f3ea26474fe2014db90e98d\",\n    \"era_id\": 8419,\n    \"signature\": \"0117087ef4b9a786e5a0ea8f198050e9de93dd94f87469b8124c346aeae5f36ad9adf80f670ee9c5887263267ed32cf932dce9b370353c596d59f91fbd57a1a205\",\n    \"public_key\": \"01c375b425a36de25dc325c9182861679db2f634abcacd9ae2ee27b84ba62ac1f7\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Sample Deploy Submission Output - Casper casper-client - JSON\nDESCRIPTION: The JSON response here is the result of submitting a deploy through the casper-client tool. It contains the submitted deploy's hash, the JSON-RPC version, and the API version, confirming that the deploy request was accepted by the node for processing. The 'deploy_hash' is required to reference or query deploy status in follow-up commands. This is a direct result to a 'put-deploy' call and does not guarantee contract execution, only acceptance.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/docs/resources/advanced/cross-contract.md#2025-04-22_snippet_18\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"id\": -6419793201665396463,\n  \"jsonrpc\": \"2.0\",\n  \"result\": {\n    \"api_version\": \"1.4.13\",\n    \"deploy_hash\": \"15e11340d92fc9e64deb38bd942f4efb69caad0851eec24fd577070309d18537\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Installer Entry Points for a Casper Factory Contract in Rust\nDESCRIPTION: This snippet shows how to define two entry points (`CONTRACT_FACTORY_ENTRY_POINT` and `CONTRACT_FACTORY_DEFAULT_ENTRY_POINT`) within a Casper smart contract using Rust. Both are marked with `EntryPointType::Install`, indicating they will create new contract instances when the Wasm is installed. They are also `EntryPointAccess::Public`, allowing them to be called from session code. These entry points serve as factories for creating new counter contracts.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/docs/developers/writing-onchain-code/factory-pattern.md#2025-04-22_snippet_1\n\nLANGUAGE: rust\nCODE:\n```\nlet entry_point: EntryPoint = EntryPoint::new(\n    CONTRACT_FACTORY_ENTRY_POINT.to_string(),\n    Parameters::new(),\n    CLType::Unit,\n    EntryPointAccess::Public,\n    EntryPointType::Install,\n);\nentry_points.add_entry_point(entry_point);\nlet entry_point: EntryPoint = EntryPoint::new(\n    CONTRACT_FACTORY_DEFAULT_ENTRY_POINT.to_string(),\n    Parameters::new(),\n    CLType::Unit,\n    EntryPointAccess::Public,\n    EntryPointType::Install,\n);\n\n```\n\n----------------------------------------\n\nTITLE: Stopping and Cleaning the NCTL Setup\nDESCRIPTION: Commands to stop the running network and clean the NCTL setup when finished.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/versioned_docs/version-2.0.0/developers/dapps/setup-nctl.md#2025-04-22_snippet_23\n\nLANGUAGE: bash\nCODE:\n```\n$ nctl-stop\n$ nctl-clean\n```\n\n----------------------------------------\n\nTITLE: Adding Known Peer Addresses in config-example.toml (TOML)\nDESCRIPTION: Snippet showing how to specify the `known_addresses` list within the `[network]` section of the `config-example.toml` file. This list should include the IP addresses and ports (default 35000) of other nodes, particularly the genesis validators, that the node should attempt to connect to for network discovery.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/docs/operators/setup-network/staging-files-for-new-network.md#2025-04-22_snippet_5\n\nLANGUAGE: toml\nCODE:\n```\n[network]\nknown_addresses = ['<ip 1>:35000','<ip 2>:35000','<ip 3>:35000']\n```\n\n----------------------------------------\n\nTITLE: Creating Named Key for Contract Hash in Casper Network\nDESCRIPTION: This defines a NamedKey that assigns the name 'test_payment_hash' to a contract entity hash. This creates a reference to the contract's hash in the account's namespace for easy access.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/docs/developers/json-rpc/json-rpc-transactional.md#2025-04-22_snippet_19\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"key\": \"named-key-entity-account-7ba7c904427d5fe653b99584c07c3c5963b6ea2e75ad87aea69b71a65bf6fcea-9dbabf5ba4a0f30fd2fc8085b3b0baccf6bedc38c362d571b7912387d0bd8f39\",\n    \"kind\": {\n        \"Write\": {\n            \"NamedKey\": {\n                \"named_key\": {\n                    \"cl_type\": \"Key\",\n                    \"bytes\": \"1102eb1c971063155d461059292e91cfe2212d45b79a49294b8d90bdae18cda6e59e\",\n                    \"parsed\": \"entity-contract-eb1c971063155d461059292e91cfe2212d45b79a49294b8d90bdae18cda6e59e\"\n                },\n                \"name\": {\n                    \"cl_type\": \"String\",\n                    \"bytes\": \"11000000746573745f7061796d656e745f68617368\",\n                    \"parsed\": \"test_payment_hash\"\n                }\n            }\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Querying Package Information in Global State (Bash)\nDESCRIPTION: Shows using casper-client query-global-state to obtain information about a package via its package hash. Requires node address, state root hash, and package hash. Returns details such as entity hash, lock status, and entity version for the package.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/docs/developers/cli/querying-global-state.md#2025-04-22_snippet_15\n\nLANGUAGE: bash\nCODE:\n```\ncasper-client query-global-state \\\n--node-address [NODE_SERVER_ADDRESS] \\\n--state-root-hash [STATE_ROOT_HASH] \\\n--key [PACKAGE_ADDRESS]\n```\n\n----------------------------------------\n\nTITLE: Sample Deploy Status Output - Casper casper-client - JSON\nDESCRIPTION: This JSON structure represents a detailed deploy status report from the Casper network. It includes all data associated with a specific deploy such as block hash, session arguments and their encoding, approvals (signatures), and execution results (including gas cost and state transformations). This output aids developers in verifying the execution of their contract calls, field-level debugging, and tracking contract state changes resulting from deploy execution. It assumes familiarity with Casper deploy schemas for full interpretation.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/docs/resources/advanced/cross-contract.md#2025-04-22_snippet_20\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"id\": 3968762702269106998,\n  \"jsonrpc\": \"2.0\",\n  \"result\": {\n    \"api_version\": \"1.4.13\",\n    \"deploy\": {\n      \"approvals\": [\n        {\n          \"signature\": \"01319eee9bcfde6963e5b47164dd2c8044f0c20dd59f0c2993db55bec6bd3802fec2c9c6cae6ca8993c8aee0440be43f6c38bdc4bbdce501837ff5ca66fbd7c902\",\n          \"signer\": \"010e732fe2fbbcf62f2e46500d4cd8ff58a3bfd8dcb44c8b6f9a87dc5d573556af\"\n        }\n      ],\n      \"hash\": \"15e11340d92fc9e64deb38bd942f4efb69caad0851eec24fd577070309d18537\",\n      \"header\": {\n        \"account\": \"010e732fe2fbbcf62f2e46500d4cd8ff58a3bfd8dcb44c8b6f9a87dc5d573556af\",\n        \"body_hash\": \"26282fa50b8e7c240025d683f197661ca846f2c1a3521a5dd604e6066d89d6d7\",\n        \"chain_name\": \"casper-test\",\n        \"dependencies\": [],\n        \"gas_price\": 1,\n        \"timestamp\": \"2023-03-09T14:39:24.974Z\",\n        \"ttl\": \"30m\"\n      },\n      \"payment\": {\n        \"ModuleBytes\": {\n          \"args\": [\n            [\n              \"amount\",\n              {\n                \"bytes\": \"0500c817a804\",\n                \"cl_type\": \"U512\",\n                \"parsed\": \"20000000000\"\n              }\n            ]\n          ],\n          \"module_bytes\": \"\"\n        }\n      },\n      \"session\": {\n        \"StoredContractByHash\": {\n          \"args\": [\n            [\n              \"new_message\",\n              {\n                \"bytes\": \"1200000048656c6c6f206e6577206d65737361676521\",\n                \"cl_type\": \"String\",\n                \"parsed\": \"Hello new message!\"\n              }\n            ],\n            [\n              \"hello_world_contract\",\n              {\n                \"bytes\": \"01b7a06298cc71d4cac05929cc0713dfd5a541c68b71cb500cd04547b5cd0385ea\",\n                \"cl_type\": \"Key\",\n                \"parsed\": {\n                  \"Hash\": \"hash-b7a06298cc71d4cac05929cc0713dfd5a541c68b71cb500cd04547b5cd0385ea\"\n                }\n              }\n            ]\n          ],\n          \"entry_point\": \"call_contract_2\",\n          \"hash\": \"32ad0e54e874f68706708ebfd2c5aba7803eb64ccff71a50d3c4d4f29db15c92\"\n        }\n      }\n    },\n    \"execution_results\": [\n      {\n        \"block_hash\": \"9c81259ac5ef7b953656a9327a479ae771a15c5ef131c91216e9e697dfdb09eb\",\n        \"result\": {\n          \"Success\": {\n            \"cost\": \"462273650\",\n            \"effect\": {\n              \"operations\": [],\n              \"transforms\": [\n                {\n                  \"key\": \"hash-8cf5e4acf51f54eb59291599187838dc3bc234089c46fc6ca8ad17e762ae4401\",\n                  \"transform\": \"Identity\"\n                },\n                {\n                  \"key\": \"hash-624dbe2395b9d9503fbee82162f1714ebff6b639f96d2084d26d944c354ec4c5\",\n                  \"transform\": \"Identity\"\n                },\n                {\n                  \"key\": \"hash-010c3fe81b7b862e50c77ef9a958a05bfa98444f26f96f23d37a13c96244cfb7\",\n                  \"transform\": \"Identity\"\n                },\n                {\n                  \"key\": \"hash-9824d60dc3a5c44a20b9fd260a412437933835b52fc683d8ae36e4ec2114843e\",\n                  \"transform\": \"Identity\"\n                },\n                {\n                  \"key\": \"balance-453534c5c380862c2d814b5879f08fe6b5a3d4f031eaf20e08cf091d274035a5\",\n                  \"transform\": \"Identity\"\n                },\n                {\n                  \"key\": \"balance-98d945f5324f865243b7c02c0417ab6eac361c5c56602fd42ced834a1ba201b6\",\n                  \"transform\": \"Identity\"\n                },\n                {\n                  \"key\": \"balance-453534c5c380862c2d814b5879f08fe6b5a3d4f031eaf20e08cf091d274035a5\",\n                  \"transform\": {\n                    \"WriteCLValue\": {\n                      \"bytes\": \"0600876bf27301\",\n                      \"cl_type\": \"U512\",\n                      \"parsed\": \"1597500000000\"\n                    }\n                  }\n                },\n                {\n                  \"key\": \"balance-98d945f5324f865243b7c02c0417ab6eac361c5c56602fd42ced834a1ba201b6\",\n                  \"transform\": {\n                    \"AddUInt512\": \"20000000000\"\n                  }\n                },\n                {\n                  \"key\": \"hash-32ad0e54e874f68706708ebfd2c5aba7803eb64ccff71a50d3c4d4f29db15c92\",\n                  \"transform\": \"Identity\"\n                },\n                {\n                  \"key\": \"hash-a7810282c275d525f083a756aba6912513a4a494ae317503cf6018c0fbaf9c4d\",\n                  \"transform\": \"Identity\"\n                },\n                {\n                  \"key\": \"hash-b48ccc725ba948405d01205e64acff09ac24c899aed8d649f7bc1572216266c2\",\n                  \"transform\": \"Identity\"\n                },\n                {\n                  \"key\": \"hash-b7a06298cc71d4cac05929cc0713dfd5a541c68b71cb500cd04547b5cd0385ea\",\n                  \"transform\": \"Identity\"\n                },\n                {\n                  \"key\": \"hash-7a581d353665b74779dc8d446d33a5086bb367a29a558490d1e524f9c12002d3\",\n                  \"transform\": \"Identity\"\n                },\n                {\n                  \"key\": \"hash-c0384d4041950780bd3b167b4516a306e308e2d4729d08f6d2b10dfa1dbdaad6\",\n                  \"transform\": \"Identity\"\n                },\n                {\n                  \"key\": \"uref-aa758090d9bc1364754180f9f6bfc8821275038fd5d794a5dfb60bd2838a8670-000\",\n                  \"transform\": {\n                    \"WriteCLValue\": {\n                      \"bytes\": \"1200000048656c6c6f206e6577206d65737361676521\",\n                      \"cl_type\": \"String\",\n                      \"parsed\": \"Hello new message!\"\n                    }\n                  }\n                },\n                {\n                  \"key\": \"deploy-15e11340d92fc9e64deb38bd942f4efb69caad0851eec24fd577070309d18537\",\n\n```\n\n----------------------------------------\n\nTITLE: Querying Account State in Global State\nDESCRIPTION: Command to retrieve information about an account using its public key. This is used to verify account details including the main purse, which is essential for confirming transfers.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/versioned_docs/version-2.0.0/developers/cli/transfers/verify-transfer.md#2025-04-22_snippet_8\n\nLANGUAGE: bash\nCODE:\n```\ncasper-client query-global-state \\\n--id [ID] \\\n--node-address [NODE_SERVER_ADDRESS] \\\n--state-root-hash [STATE_ROOT_HASH] \\\n--key [SOURCE_PUBLIC_KEY]\n```\n\n----------------------------------------\n\nTITLE: Complete TransactionProcessed Event Structure\nDESCRIPTION: Full example of a TransactionProcessed event showing all details including transaction hash, account, timestamp, block hash and execution results\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/docs/developers/writing-onchain-code/emitting-contract-events.md#2025-04-22_snippet_9\n\nLANGUAGE: json\nCODE:\n```\ndata: {\n    \"TransactionProcessed\": {\n        \"transaction_hash\": {\n            \"Deploy\": \"09b90ada8b456e342f3209b3330c1d3bba0452d453c7f37106fed9799b280e26\"\n        },\n        \"account\": \"0130a16c8b0918cbfa8da00b6c0910ae0f2799dfd5ef7f092d0c4c1688031d60ac\",\n        \"timestamp\": \"2023-11-29T01:35:41.522Z\",\n        \"ttl\": \"30m\",\n        \"block_hash\": \"b90c61cd1e3bc3be36110f04a7aec97b22bcfe9f36291cb011a14c4a663753bd\",\n        \"execution_result\": {\n            \"Version2\": {\n                \"Success\": {\n                    \"effects\": [\n                        {\n                            \"key\": \"account-hash-212ffdd040b65495419f4057c8392930e410f7bf24baeec8de59a6117b63e45c\",\n                            \"kind\": \"Identity\"\n                        },\n                        {\n                            \"key\": \"package-c092060112b445d1706f6962d7ad2da72a2e8312000e99d2b58f6a3e1624649a\",\n                            \"kind\": \"Identity\"\n                        },\n                        {\n                            \"key\": \"addressable-entity-system-f4952351cd81d38e205cd31a938b802241b70ac539d0fba5c5d2e0dc825f8944\",\n                            \"kind\": \"Identity\"\n                        },\n                        {\n                            \"key\": \"addressable-entity-system-f4952351cd81d38e205cd31a938b802241b70ac539d0fba5c5d2e0dc825f8944\",\n                            \"kind\": \"Identity\"\n                        },\n                        {\n                            \"key\": \"addressable-entity-system-f4952351cd81d38e205cd31a938b802241b70ac539d0fba5c5d2e0dc825f8944\",\n                            \"kind\": \"Identity\"\n                        },\n                        {\n                            \"key\": \"package-42c6bbc82e3fc9dc4f890f507812a49c19aa998ed09b9d97996d9257e3c8c1c1\",\n                            \"kind\": \"Identity\"\n                        },\n                        {\n                            \"key\": \"addressable-entity-system-f4952351cd81d38e205cd31a938b802241b70ac539d0fba5c5d2e0dc825f8944\",\n                            \"kind\": \"Identity\"\n                        },\n                        {\n                            \"key\": \"addressable-entity-system-f5a58fd26fb2200445eb04363affcc1240cb9e1882c6a86612de41e06e1082d1\",\n                            \"kind\": \"Identity\"\n                        },\n                        {\n                            \"key\": \"addressable-entity-system-f5a58fd26fb2200445eb04363affcc1240cb9e1882c6a86612de41e06e1082d1\",\n                            \"kind\": \"Identity\"\n                        },\n                        {\n                            \"key\": \"package-aabcd5869e1e47a6e66ca2430fcabbe9687241e55e0a070204b150771f7aef74\",\n                            \"kind\": \"Identity\"\n                        },\n                        {\n                            \"key\": \"addressable-entity-system-f5a58fd26fb2200445eb04363affcc1240cb9e1882c6a86612de41e06e1082d1\",\n                            \"kind\": \"Identity\"\n                        },\n                        {\n                            \"key\": \"balance-cfe2039aa5f3eca8a00d3444c4421e2034b77330d614b0c47c47d6af09113861\",\n                            \"kind\": \"Identity\"\n                        },\n                        {\n                            \"key\": \"balance-278862691b1d6698c02c82b302aa391f1cd10a3637e4a8c633b4560917bc607b\",\n                            \"kind\": \"Identity\"\n                        },\n                        {\n                            \"key\": \"balance-cfe2039aa5f3eca8a00d3444c4421e2034b77330d614b0c47c47d6af09113861\",\n                            \"kind\": {\n                                \"Write\": {\n                                    \"CLValue\": {\n                                        \"cl_type\": \"U512\",\n                                        \"bytes\": \"0e9a6a8aff995ac138938d44c64d31\",\n                                        \"parsed\": \"999999999999999999999518955956890\"\n                                    }\n                                }\n                            }\n                        },\n                        {\n                            \"key\": \"balance-278862691b1d6698c02c82b302aa391f1cd10a3637e4a8c633b4560917bc607b\",\n                            \"kind\": {\n                                \"AddUInt512\": \"7500000000\"\n                            }\n                        },\n                        {\n                            \"key\": \"addressable-entity-contract-b51b0f9d94e5744af4dce6b4a9990c5f3e652c1a0a946e680e83f97d8846eff5\",\n                            \"kind\": \"Identity\"\n                        },\n                        {\n                            \"key\": \"package-66cf48b3ccf32269ccc5d93059eef461bcf2c8b2460309ff3a442190688d5275\",\n                            \"kind\": \"Identity\"\n                        },\n                        {\n                            \"key\": \"byte-code-v1-wasm-23e042b941e45ea7fe4f81496fd778349f2002b2f786f9fddbdd1298450b60ad\",\n                            \"kind\": \"Identity\"\n                        },\n                        {\n                            \"key\": \"uref-c737324d1caa1885ad0f22f628933cfce91400ea259147186d330cf167eb6843-000\",\n                            \"kind\": \"Identity\"\n                        },\n                        {\n                            \"key\": \"uref-09b6f0901eb8cd9c6272be8199aeff4c6f5d2e3989980b548dbd595b40c033bf-000\",\n                            \"kind\": \"Identity\"\n                        },\n                        {\n                            \"key\": \"uref-cd0871a7e69b91a05dbf81068115e45380de3a35bd2258369e3a24b7958cd77f-000\",\n                            \"kind\": \"Identity\"\n                        },\n                        {\n                            \"key\": \"uref-962f6e020971031eb1bdd37f705df498cd4ee90c15aae901df9654a10461184d-000\",\n                            \"kind\": \"Identity\"\n                        },\n                        {\n                            \"key\": \"uref-e7acd748f4f82e609aa49f577e78e1ce6b1ab1dad5b5b1b59c8ff965598a6f34-000\",\n                            \"kind\": \"Identity\"\n                        },\n                        {\n                            \"key\": \"uref-cb9799861587032b55d391604c8a9f016d1237b0b600413d6c050da3e0fc81d1-000\",\n                            \"kind\": \"Identity\"\n                        },\n                        {\n                            \"key\": \"uref-bf32824dddf12dd16668581211ed22bef4b36c22db0165bde4986508f363940e-000\",\n                            \"kind\": \"Identity\"\n                        },\n                        {\n                            \"key\": \"dictionary-79bb2f90d7ab9cef266efe53e70722dc6e4fa56372ce8cd859b89cec3ff05307\",\n                            \"kind\": {\n                                \"Write\": {\n                                    \"CLValue\": {\n                                        \"cl_type\": \"Any\",\n                                        \"bytes\": \"8f0000008b0000007b226e616d65223a20224a6f686e20446f65222c22746f6b656e5f757269223a202268747470733a5c2f5c2f7777772e626172666f6f2e636f6d222c22636865636b73756d223a202239343062666662336632626261333566383433313361613236646130396563653361643437303435633661313239326332626264326466346162316135356662227d0a20000000dc660363cb2b4dfea2c01d8c3bf2258a3700fb6c830d13972ff206e330fd791a0100000030\",\n                                        \"parsed\": null\n                                    }\n                                }\n                            }\n                        },\n                        {\n                            \"key\": \"uref-bba9996be36b1526113a0aaa030db658edd3c8719a60d55b35b7312f01f2e6da-000\",\n                            \"kind\": \"Identity\"\n                        },\n                        {\n                            \"key\": \"dictionary-203953bdea81a8373a987786d74eb94d8626c401a28625bb66c006079fd2bde7\",\n                            \"kind\": {\n                                \"Write\": {\n                                    \"CLValue\": {\n                                        \"cl_type\": \"Any\",\n                                        \"bytes\": \"2100000000212ffdd040b65495419f4057c8392930e410f7bf24baeec8de59a6117b63e45c0b200000001cabd90eac707493056418a62d8b82057af0d7c1e1b90d6139a46120fff4187d0100000030\",\n                                        \"parsed\": null\n                                    }\n                                }\n                            }\n                        },\n                        {\n                            \"key\": \"dictionary-453603548bb0d677edaa9bbc014bff6e30801a8d86eb85f884ad08e874fdc0f1\",\n                            \"kind\": {\n                                \"Write\": {\n                                    \"CLValue\": {\n                                        \"cl_type\": \"Any\",\n```\n\n----------------------------------------\n\nTITLE: Implementing UpdateMessage React Component\nDESCRIPTION: React component implementation that provides UI for updating messages on the smart contract, including state management and input handling.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/versioned_docs/version-2.0.0/developers/dapps/template-frontend.md#2025-04-22_snippet_15\n\nLANGUAGE: jsx\nCODE:\n```\nimport { useState } from 'react';\nimport { Contracts, CasperClient, RuntimeArgs, CLValueBuilder, CLPublicKey, DeployUtil } from \"casper-js-sdk\";\nimport axios from \"axios\";\nimport { getProvider } from \"./casper-wallet\";\n\nconst provider = getProvider();\n\nconst UpdateMessage = (props) => {\n    const [message, setMessage] = useState(\"\");\n\n    return (\n        <>\n            <input id=\"message\" type=\"text\" value={message} onChange={(e) => {setMessage(e.target.value)}} />\n            <button onClick={ () => updateMessage(props, message) }>Update Message</button>\n        </>\n    );\n}\n\nexport default UpdateMessage;\n```\n\n----------------------------------------\n\nTITLE: JSON-RPC Request to Get State Root Hash\nDESCRIPTION: Example JSON-RPC request to retrieve the state root hash from the Casper blockchain. This requires specifying the JSON-RPC method `chain_get_state_root_hash` and an optional ID.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/docs/resources/beginner/querying-network.md#2025-04-22_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"jsonrpc\": \"2.0\",\n    \"method\": \"chain_get_state_root_hash\",\n    \"params\": null,\n    \"id\": 1\n}\n```\n\n----------------------------------------\n\nTITLE: Running NFT Contract Tests with Make in Bash\nDESCRIPTION: This command uses the project's Makefile to compile the contract and run tests in release mode. It also copies the contract.wasm file to the appropriate version folder in the tests/wasm directory.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/versioned_docs/version-1.5.X/resources/tokens/cep78/using-casper-client/testing-NFTs.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nmake test\n```\n\n----------------------------------------\n\nTITLE: Test Context Setup in Rust\nDESCRIPTION: Implementation of test context setup including constants definition and test environment initialization for CEP-18 token testing\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/versioned_docs/version-2.0.0/resources/tokens/cep18/tests.md#2025-04-22_snippet_3\n\nLANGUAGE: rust\nCODE:\n```\nuse casper_engine_test_support::{\n    ExecuteRequestBuilder, InMemoryWasmTestBuilder, DEFAULT_ACCOUNT_ADDR,\n    MINIMUM_ACCOUNT_CREATION_BALANCE, PRODUCTION_RUN_GENESIS_REQUEST,\n};\nuse casper_execution_engine::core::engine_state::ExecuteRequest;\nuse casper_types::{\n    account::AccountHash, bytesrepr::FromBytes, runtime_args, system::mint, CLTyped, ContractHash, ContractPackageHash, Key, RuntimeArgs, U256,\n};\n\nuse crate::utility::constants::{\n    ALLOWANCE_AMOUNT_1, ALLOWANCE_AMOUNT_2, TOTAL_SUPPLY_KEY, TRANSFER_AMOUNT_1, TRANSFER_AMOUNT_2,\n};\n```\n\n----------------------------------------\n\nTITLE: Describing Access Control Options for Contract Entry Points - JSON Schema - JSON\nDESCRIPTION: Defines a JSON schema object to specify access control on contract entry points by accepting either a public string literal (\\\"Public\\\") or a group restriction object. Dependencies include the JSON Schema standard and may reference a separate Group schema. The schema supports two cases: a string indicating public access or an object indicating restricted access via group membership, with explicit properties and required fields. This structure is intended for use with contract method definitions, ensuring clear API documentation and validation.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/condor/jsonrpc-comp/rpc-1.5/schema/EntryPointAccess.json.md#2025-04-22_snippet_0\n\nLANGUAGE: JSON\nCODE:\n```\n{\n    \"description\": \"Enum describing the possible access control options for a contract entry point (method).\",\n    \"anyOf\": [\n        {\n            \"type\": \"string\",\n            \"enum\": [\n                \"Public\"\n            ]\n        },\n        {\n            \"description\": \"Only users from the listed groups may call this method. Note: if the list is empty then this method is not callable from outside the contract.\",\n            \"type\": \"object\",\n            \"required\": [\n                \"Groups\"\n            ],\n            \"properties\": {\n                \"Groups\": {\n                    \"type\": \"array\",\n                    \"items\": {\n                        \"$ref\": \"#/components/schemas/Group\"\n                    }\n                }\n            },\n            \"additionalProperties\": false\n        }\n    ]\n} \n```\n\n----------------------------------------\n\nTITLE: Contract Deploy Transform Data in JSON\nDESCRIPTION: JSON data showing deploy information and transform operations including deploy hash, account information, gas usage, and various balance and hash transformations.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/versioned_docs/version-1.5.X/resources/advanced/cross-contract.md#2025-04-22_snippet_30\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"transform\": {\n    \"WriteDeployInfo\": {\n      \"deploy_hash\": \"15e11340d92fc9e64deb38bd942f4efb69caad0851eec24fd577070309d18537\",\n      \"from\": \"account-hash-ee57bb3b39eb66b74a1dcf12f3f0e7d8e906e34b11f85dc05497bf33fbf3a1f9\",\n      \"gas\": \"462273650\",\n      \"source\": \"uref-453534c5c380862c2d814b5879f08fe6b5a3d4f031eaf20e08cf091d274035a5-007\",\n      \"transfers\": []\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Unbonding via System Auction Contract using Casper Client (Bash)\nDESCRIPTION: This command uses `casper-client put-deploy` to interact with the Casper network's system auction contract by calling its `withdraw_bid` entry point. This initiates the unbonding process for a validator's stake. Key parameters include the node address, validator's secret key path, chain name, payment amount (fixed 2.5 CSPR for this method as per node v1.5.1), the network-specific auction contract hash (`session-hash`), the validator's public key, and the amount to withdraw in motes.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/docs/operators/becoming-a-validator/unbonding.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nsudo -u casper casper-client put-deploy \\\n--node-address <HOST:PORT> \\\n--secret-key <PATH> \\\n--chain-name <CHAIN_NAME> \\\n--payment-amount <PAYMENT_AMOUNT_IN_MOTES> \\\n--session-hash <SESSION_HASH> \\\n--session-entry-point withdraw_bid \\\n--session-arg=\"public_key:public_key='<PUBLIC_KEY_HEX>'\" \\\n--session-arg=\"amount:u512='<AMOUNT_TO_WITHDRAW>'\"\n```\n\n----------------------------------------\n\nTITLE: Updating Account Action Thresholds using Wasm\nDESCRIPTION: This command updates the deployment and key management thresholds to create a multi-signature scheme. The update_thresholds.wasm session is used to set specific thresholds for account actions.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/versioned_docs/version-1.5.X/resources/advanced/multi-sig/multi-sig-workflow.md#2025-04-22_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\ncasper-client put-deploy \\\n--node-address https://node.testnet.casper.network \\\n--chain-name casper-test \\\n--payment-amount 500000000 \\\n--secret-key $PATH/secret_key.pem \\\n--session-path target/wasm32-unknown-unknown/release/update_thresholds.wasm \\\n--session-arg \"deployment_threshold:u8='2'\" \\\n--session-arg \"key_management_threshold:u8='3'\"\n```\n\n----------------------------------------\n\nTITLE: Cleaning Up Previous Node Installation\nDESCRIPTION: Commands to remove existing Casper node installation and clean up associated files and directories.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/versioned_docs/version-2.0.0/operators/setup/install-node.md#2025-04-22_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nsudo /etc/casper/node_util.py stop\nsudo apt remove -y casper-client\nsudo apt remove -y casper-node\nsudo apt remove -y casper-node-launcher\nsudo rm /etc/casper/casper-node-launcher-state.toml\nsudo rm -rf /etc/casper/1_*\nsudo rm -rf /etc/casper/2_*\nsudo rm -rf /var/lib/casper/*\n```\n\n----------------------------------------\n\nTITLE: Installing curl on Ubuntu - Bash\nDESCRIPTION: Installs the curl utility on Ubuntu via apt. curl is required for downloading scripts and packages, especially for Rust setup. Requires Ubuntu 20.04 or compatible. No input parameters, outputs installation status.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/versioned_docs/version-1.5.X/developers/prerequisites.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nsudo apt install curl\n```\n\n----------------------------------------\n\nTITLE: Cloning Multi-Sig Repository\nDESCRIPTION: Command to clone the tutorials example Wasm repository containing multi-signature session code and navigate to the multi-sig directory.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/versioned_docs/version-2.0.0/resources/advanced/multi-sig/multi-sig-workflow.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ngit clone https://github.com/casper-ecosystem/tutorials-example-wasm/ && cd multi-sig\n```\n\n----------------------------------------\n\nTITLE: Deactivating Current Node and Preparing as Backup (Bash)\nDESCRIPTION: Stops the `casper-node-launcher` service on the `current_node`, navigates into the pre-configured `/etc/casper/validator_keys/backup_node` directory, and copies the backup node's keys (`*`) up one level to `/etc/casper/validator_keys/` using `sudo -u casper`. This prepares the `current_node` to act as the new backup by replacing its active keys with the backup keys. The node service is left stopped, intended to be restarted later. Requires `systemctl` and the defined key structure.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/versioned_docs/version-1.5.X/operators/maintenance/moving-node.md#2025-04-22_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nsudo systemctl stop casper-node-launcher\ncd /etc/casper/validator_keys/backup_node\nsudo -u casper cp * ../\n```\n\n----------------------------------------\n\nTITLE: Calling Entry Points on Deployed Casper Smart Contracts\nDESCRIPTION: Executes an entry point (function) in a previously deployed smart contract. Instead of providing a new contract, this command references an existing contract by name and specifies which entry point to call. Requires payment in motes to cover transaction fees.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/versioned_docs/version-2.0.0/resources/beginner/counter/commands.md#2025-04-22_snippet_4\n\nLANGUAGE: rust\nCODE:\n```\ncasper-client put-deploy \\\n    --node-address [NODE_SERVER_ADDRESS] \\\n    --chain-name casper-net-1 \\\n    --secret-key [KEY_PATH]/secret_key.pem \\\n    --payment-amount [PAYMENT_AMOUNT_IN_MOTES] \\\n    --session-name \"counter\" \\\n    --session-entry-point \"counter_inc\"\n```\n\n----------------------------------------\n\nTITLE: Retrieving the Casper Network State Root Hash\nDESCRIPTION: This command fetches the current state root hash of the Casper Network, which represents a snapshot of the network state.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/versioned_docs/version-2.0.0/resources/tokens/cep18/full-tutorial.md#2025-04-22_snippet_8\n\nLANGUAGE: bash\nCODE:\n```\ncasper-client get-state-root-hash --node-address http://<HOST:PORT>\n```\n\n----------------------------------------\n\nTITLE: Executing Invocable Entity Alias Transaction in Casper Network\nDESCRIPTION: This command allows a user to invoke an entry point on a given AddressableEntity using an alias stored in their named keys. It requires the entity alias, session entry point, gas price tolerance, and either a secret key or initiator address.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/docs/concepts/transactions.md#2025-04-22_snippet_6\n\nLANGUAGE: json\nCODE:\n```\ncasper-client put-txn invocable-entity-alias\n/// The entity alias stored in the calling entity's named keys.\n  --entity-alias <STRING>\n/// The entry point on the invocable entity. \n  --session-entry-point <NAME>\n/// The maximum gas price that the user is willing to pay for this transaction.\n  --gas-price-tolerance <INTEGER>\n/// The path to the local secret key file, or the [`initiator address`](../developers/json-rpc/types_chain.md#initiatoraddr) sending the transaction.\n  <--secret-key <PATH>|--initiator-address <HEX STRING>>\n```\n\n----------------------------------------\n\nTITLE: Defining JsonExecutionResult Schema in JSON\nDESCRIPTION: JSON schema definition for a JsonExecutionResult, which represents the execution result of a single deploy in Casper's system.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/condor/jsonrpc-comp/rpc-1.5/schema/components.json.md#2025-04-22_snippet_13\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"description\": \"The execution result of a single deploy.\",\n    \"type\": \"object\",\n    \"required\": [\n        \"block_hash\",\n        \"result\"\n    ],\n    \"properties\": {\n        \"block_hash\": {\n            \"description\": \"The block hash.\",\n            \"allOf\": [\n                {\n                    \"$ref\": \"#/components/schemas/BlockHash\"\n                }\n            ]\n        },\n        \"result\": {\n            \"description\": \"Execution result.\",\n            \"allOf\": [\n                {\n                    \"$ref\": \"#/components/schemas/ExecutionResult\"\n                }\n            ]\n        }\n    },\n    \"additionalProperties\": false\n}\n```\n\n----------------------------------------\n\nTITLE: Installing a Contract in Rust\nDESCRIPTION: This snippet details using the ExecuteRequestBuilder in Rust to install a smart contract, simulating the transaction within the Casper test environment.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/docs/developers/writing-onchain-code/testing-contracts.md#2025-04-22_snippet_6\n\nLANGUAGE: rust\nCODE:\n```\n    // Install the contract.\n    let contract_v1_installation_request = ExecuteRequestBuilder::standard(\n        *DEFAULT_ACCOUNT_ADDR,\n        COUNTER_V1_WASM,\n        runtime_args! {},\n    )\n    .build();\n\n    builder\n        .exec(contract_v1_installation_request)\n        .expect_success()\n        .commit();\n```\n\n----------------------------------------\n\nTITLE: Defining Validator Credit Record Schema in JSON\nDESCRIPTION: JSON schema that defines the structure of a validator credit record. It requires three properties: validator_public_key (referencing PublicKey schema), era_id (referencing EraId schema), and amount (referencing U512 schema). The schema prohibits additional properties.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/condor/jsonrpc-comp/rpc-2.0/schema/ValidatorCredit.json.md#2025-04-22_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"description\": \"Validator credit record.\",\n    \"type\": \"object\",\n    \"required\": [\n        \"amount\",\n        \"era_id\",\n        \"validator_public_key\"\n    ],\n    \"properties\": {\n        \"validator_public_key\": {\n            \"description\": \"Validator public key\",\n            \"allOf\": [\n                {\n                    \"$ref\": \"#/components/schemas/PublicKey\"\n                }\n            ]\n        },\n        \"era_id\": {\n            \"description\": \"The era id the credit was created.\",\n            \"allOf\": [\n                {\n                    \"$ref\": \"#/components/schemas/EraId\"\n                }\n            ]\n        },\n        \"amount\": {\n            \"description\": \"The credit amount.\",\n            \"allOf\": [\n                {\n                    \"$ref\": \"#/components/schemas/U512\"\n                }\n            ]\n        }\n    },\n    \"additionalProperties\": false\n}\n```\n\n----------------------------------------\n\nTITLE: Exporting Public Key and Account Hash - Python - python\nDESCRIPTION: Uses pycspr modules to extract bytes of the public key and account hash from the keypair, then encode both into hex for easier use and representation. Functions pycspr.crypto.cl_checksum.encode and pycspr.crypto.cl_operations.get_account_hash are used for conversion. Input: keypair object. Output: publicKeyHex and accountHashHex strings.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/versioned_docs/version-2.0.0/developers/dapps/sdk/client-library-usage.md#2025-04-22_snippet_7\n\nLANGUAGE: python\nCODE:\n```\nimport pycspr.crypto\n\npublicKeyBytes = keypair.account_key\npublicKeyHex = pycspr.crypto.cl_checksum.encode(publicKeyBytes)\naccountHashBytes = pycspr.crypto.cl_operations.get_account_hash(publicKeyBytes)\naccountHashHex = pycspr.crypto.cl_checksum.encode(accountHashBytes)\n```\n\n----------------------------------------\n\nTITLE: Verifying Deploy Execution Status after Removal (Bash)\nDESCRIPTION: Queries the Casper node using `casper-client get-deploy` to confirm the status of the deploy sent to remove the associated key. This step ensures the removal operation was successfully processed. Replace `<DEPLOY_HASH>` with the deploy hash returned by the `put-deploy` command used for removal.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/docs/resources/advanced/multi-sig/multi-sig-workflow.md#2025-04-22_snippet_23\n\nLANGUAGE: bash\nCODE:\n```\ncasper-client get-deploy --node-address https://node.testnet.casper.network/ <DEPLOY_HASH>\n```\n\n----------------------------------------\n\nTITLE: Packaging Configuration Files (config.tar.gz)\nDESCRIPTION: Bash commands to package the network configuration files (`chainspec.toml`, `config-example.toml`) into a compressed archive (`config.tar.gz`). It creates a temporary directory, moves the source configuration files into it, and then uses `tar` from within that directory to create the archive without including parent directory paths.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/versioned_docs/version-1.5.X/operators/setup-network/staging-files-for-new-network.md#2025-04-22_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\nmkdir config\ncd config\nmv [source of chainspec.toml] ./chainspec.toml\nmv [source of config-example.toml] ./config-example.toml\ntar -czvf ../config.tar.gz .\n\n```\n\n----------------------------------------\n\nTITLE: Testing Disallowed Entry Point Call in Rust\nDESCRIPTION: This code tests a scenario where an entry point call is disallowed due to no intersection between caller and installer authorization keys. It sets up the deploy with specific keys and expects a failure with a permission denied error.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/docs/resources/advanced/list-auth-keys-tutorial.md#2025-04-22_snippet_18\n\nLANGUAGE: rust\nCODE:\n```\nlet session_code = PathBuf::from(CONTRACT_CALL_WASM);\n\nlet session_args = runtime_args! {\n    ARG_CONTRACT_HASH => Key::from(contract_hash),\n    ARG_KEY_NAME => INTERSECTION_RECEIPT\n};\n\n// account_addr_2 as an associated key is not among the default account's associated keys\n// The deploy will therefore revert with PermissionDenied\nlet entry_point_deploy_item = DeployItemBuilder::new()\n    .with_empty_payment_bytes(runtime_args! {ARG_AMOUNT => *DEFAULT_PAYMENT})\n    .with_authorization_keys(&[account_addr_1, account_addr_2])\n    .with_address(account_addr_1)\n    .with_session_code(session_code, session_args)\n    .build();\n\nlet entry_point_request =\n    ExecuteRequestBuilder::from_deploy_item(entry_point_deploy_item).build();\n\nbuilder.exec(entry_point_request).commit().expect_failure();\n\nlet error = builder.get_error().expect(\"must have User error: 0\");\nassert_expected_error(\n    error,\n    0,\n    \"should fail execution since ACCOUNT_USER_2 as associated key is not in installer (DEFAULT_ACCOUNT_ADDR) associated keys\",\n);\n```\n\n----------------------------------------\n\nTITLE: Initializing Casper Node Connection in Python\nDESCRIPTION: Establishes a NodeClient connection to a Casper node's RPC endpoint using the Python SDK.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/versioned_docs/version-1.5.X/developers/dapps/technology-stack.md#2025-04-22_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nclient = NodeClient(NodeConnection(host = \"NODE_ADDRESS\", port_rpc = 7777))\n```\n\n----------------------------------------\n\nTITLE: Verifying a Casper Smart Contract Deployment\nDESCRIPTION: Command to verify the deployment status of a smart contract on the Casper network using the get-deploy subcommand with the deploy hash obtained from the previous step.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/docs/resources/advanced/cross-contract.md#2025-04-22_snippet_10\n\nLANGUAGE: bash\nCODE:\n```\ncasper-client get-deploy \\\n    --node-address http://136.243.187.84:7777 af42bc6dbc58f677d138eb968d897f965f1ed118a40980bc16efbcc2a0c71832\n```\n\n----------------------------------------\n\nTITLE: Querying Updated Contract State (Counter Value) using Casper Client (Bash)\nDESCRIPTION: Queries the 'counter/count' value again using `casper-client query-state` (note: uses `query-state` here, though `query-global-state` also works), providing the *new* state root hash obtained after the increment operation. This verifies the contract interaction was successful.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/docs/resources/quick-start.md#2025-04-22_snippet_21\n\nLANGUAGE: bash\nCODE:\n```\ncasper-client query-state \\\n--node-address [NODE_ADDRESS] \\\n--state-root-hash [STATE_ROOT_HASH] \\\n--key [ACCOUNT_HASH] \\\n-q \"counter/count\"\n```\n\n----------------------------------------\n\nTITLE: Describing CallStackElement Enum and Serialization (Casper Network)\nDESCRIPTION: Describes the legacy CallStackElement enum (pre-Condor release), representing the origin of a sub-call. It starts with a u8 tag: 0 for 'Session' (followed by account hash), 1 for 'StoredSession' (account hash, package hash, contract hash), or 2 for 'StoredContract' (package hash, contract hash).\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/versioned_docs/version-2.0.0/concepts/serialization/types.md#2025-04-22_snippet_11\n\nLANGUAGE: Text\nCODE:\n```\n## CallStackElement {#call-stack-element}\n\n`CallStackElement` is a legacy `enum` created pre-Condor release that represents the origin of a sub-call in a call stack. It begins with a `u8` tag that describes the type of caller as follows:\n\n-   `Session`: Session code, which serializes as a `u8` tag of 0 followed by the [`account_hash`](#account-hash) of the calling account.\n\n-   `StoredSession`: Stored access to a session, serializing as a `u8` of 1 followed by the [`account_hash`](#account-hash), [`contract_package_hash`](./structures.md#contractpackagehash) and the [`contract_hash`](./structures.md#contracthash).\n\n-   `StoredContract`: A contract, which serializes as a `u8` tag of 2 followed by the [`contract_package_hash`](./structures.md#contractpackagehash) and the [`contract_hash`](./structures.md#contracthash).\n```\n\n----------------------------------------\n\nTITLE: Installing Nightly Rust Toolchain\nDESCRIPTION: This command installs the nightly version of the Rust toolchain, which is required for the development of Casper smart contracts in Rust.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/versioned_docs/version-1.5.X/developers/writing-onchain-code/getting-started.md#2025-04-22_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nrustup toolchain install nightly\n```\n\n----------------------------------------\n\nTITLE: Querying Purse Balance Result via Casper RPC - JSON\nDESCRIPTION: This snippet presents the typical JSON-RPC 2.0 response for a successful query_balance call, returning the balance for a specified purse. Its dependencies are a valid RPC call and identifiers, and its parameters include 'api_version' and the resulting 'balance' in motes as a string. The output format is consistent with other Casper RPC result objects and shows the supported API version for compatibility.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/docs/developers/json-rpc/json-rpc-informational.md#2025-04-22_snippet_17\n\nLANGUAGE: json\nCODE:\n```\n{\\n\\n{\\n  \"jsonrpc\": \"2.0\",\\n  \"id\": -6143675785141640608,\\n  \"result\": {\\n    \"name\": \"query_balance_result\",\\n    \"value\": {\\n      \"api_version\": \"2.0.0\",\\n      \"balance\": \"123456\"\\n    }\\n  }\\n}\\n\\n\n```\n\n----------------------------------------\n\nTITLE: Era Info Request by Switch Block\nDESCRIPTION: JSON-RPC request to get era information from a switch block using a block identifier.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/docs/developers/json-rpc/json-rpc-pos.md#2025-04-22_snippet_4\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"id\": 1,\n  \"jsonrpc\": \"2.0\",\n  \"method\": \"chain_get_era_info_by_switch_block\",\n  \"params\": [\n    {\n      \"name\": \"block_identifier\",\n      \"value\": {\n        \"Hash\": \"0744fcb72af43c5cc372039bc5a8bfee48808a9ce414acc0d6338a628c20eb42\"\n      }\n    }\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Target Account Query JSON-RPC Request\nDESCRIPTION: Example JSON-RPC request structure for querying a target account's state using the account hash, which is needed to verify the transfer destination.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/versioned_docs/version-2.0.0/developers/cli/transfers/verify-transfer.md#2025-04-22_snippet_13\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"jsonrpc\": \"2.0\",\n  \"method\": \"query_global_state\",\n  \"params\": {\n    \"state_identifier\": {\n      \"StateRootHash\": \"fdb1474d441ec0fcbf2e088f1630dbf98d3bcf7f7a7fe298303797f35b8cb4e1\"\n    },\n    \"key\": \"account-hash-1ed5a1c39bea93c105f2d22c965a84b205b36734a377d05dbb103b6bfaa595a7\",\n    \"path\": []\n  },\n  \"id\": 5\n}\n```\n\n----------------------------------------\n\nTITLE: Example of info_get_transaction Request in Casper Network\nDESCRIPTION: This JSON request demonstrates how to use the info_get_transaction RPC method to retrieve transaction details. It requires a transaction hash and optionally specifies whether to include finalized approvals.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/docs/developers/json-rpc/json-rpc-informational.md#2025-04-22_snippet_14\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"id\": 1,\n  \"jsonrpc\": \"2.0\",\n  \"method\": \"info_get_transaction\",\n  \"params\": [\n    {\n      \"name\": \"transaction_hash\",\n      \"value\": {\n        \"Version1\": \"f5582cb81a5abda63ebaa4edb3b05210ecbd63ffb8dd17bfbeb3b867f4014468\"\n      }\n    },\n    {\n      \"name\": \"finalized_approvals\",\n      \"value\": true\n    }\n  ],\n}\n```\n\n----------------------------------------\n\nTITLE: Installing C++ Development Tools\nDESCRIPTION: Commands to install and verify gcc and g++ compiler installations on MacOS and Linux.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/docs/developers/dapps/setup-nctl.md#2025-04-22_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\n$ xcode-select --install\n$ gcc --version\n$ g++ --version\n```\n\nLANGUAGE: bash\nCODE:\n```\n$ sudo apt install build-essential\n$ gcc --version\n$ g++ --version\n```\n\n----------------------------------------\n\nTITLE: Checking Casper Deploy Status using casper-client\nDESCRIPTION: This Bash command demonstrates how to query the status of a specific deployment on the Casper network using `casper-client get-deploy`. It requires the node address and the `deploy_hash` (obtained from the `put-deploy` result) of the deployment to check.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/versioned_docs/version-1.5.X/resources/advanced/cross-contract.md#2025-04-22_snippet_21\n\nLANGUAGE: bash\nCODE:\n```\ncasper-client get-deploy \\\n    --node-address http://136.243.187.84:7777 af42bc6dbc58f677d138eb968d897f965f1ed118a40980bc16efbcc2a0c71832\n\n```\n\n----------------------------------------\n\nTITLE: Getting Updated State Root Hash after Deploy\nDESCRIPTION: This command fetches the new state root hash from a specified Casper network node. It's necessary to get the updated hash after a deploy modifies the blockchain state (like installing a contract) to ensure subsequent queries reflect the latest changes.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/docs/resources/beginner/counter-testnet/walkthrough.md#2025-04-22_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\ncasper-client get-state-root-hash --node-address http://[NODE_IP]:7777\n```\n\n----------------------------------------\n\nTITLE: Testing Invalid Authorization Access\nDESCRIPTION: Test verifying that entry point access is denied when there is no intersection between caller and installer authorization keys.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/versioned_docs/version-1.5.X/resources/advanced/list-auth-keys-tutorial.md#2025-04-22_snippet_13\n\nLANGUAGE: rust\nCODE:\n```\nlet session_code = PathBuf::from(CONTRACT_WASM);\n\nlet deploy_item = DeployItemBuilder::new()\n    .with_empty_payment_bytes(runtime_args! {ARG_AMOUNT => *DEFAULT_PAYMENT})\n    .with_authorization_keys(&[*DEFAULT_ACCOUNT_ADDR])\n    .with_address(*DEFAULT_ACCOUNT_ADDR)\n    .with_session_code(session_code, runtime_args! {})\n    .build();\n```\n\nLANGUAGE: rust\nCODE:\n```\nlet entry_point_deploy_item = DeployItemBuilder::new()\n    .with_empty_payment_bytes(runtime_args! {ARG_AMOUNT => *DEFAULT_PAYMENT})\n    .with_authorization_keys(&[account_addr_2])\n    .with_address(account_addr_2)\n    .with_stored_session_hash(contract_hash, ENTRYPOINT, runtime_args! {})\n    .build();\n\nlet entry_point_request =\n    ExecuteRequestBuilder::from_deploy_item(entry_point_deploy_item).build();\n\nbuilder.exec(entry_point_request).commit().expect_failure();\nlet error = builder.get_error().expect(\"must have User error: 0\");\nassert_expected_error(\n    error,\n    0,\n    \"should fail execution since DEFAULT_ACCOUNT_ADDR is not in ACCOUNT_USER_2 associated keys\",\n);\n```\n\n----------------------------------------\n\nTITLE: Installing libssl1.1 on Ubuntu 22.04 using Bash\nDESCRIPTION: Provides the bash commands to download and install the required `libssl1.1` package from Ubuntu security archives, resolving the dependency issue for Casper packages on Ubuntu 22.04.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/versioned_docs/version-1.5.X/operators/setup/install-node.md#2025-04-22_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ncurl -f -JLO http://security.ubuntu.com/ubuntu/pool/main/o/openssl/libssl1.1_1.1.1f-1ubuntu2.20_amd64.deb\nsudo apt install ./libssl1.1_1.1.1f-1ubuntu2.19_amd64.deb\n```\n\n----------------------------------------\n\nTITLE: Defining the Casper Node Message Types in Rust\nDESCRIPTION: This code defines the core message types used in the Casper node network protocol, including the Message enum with Handshake and Payload variants, along with supporting types like ConsensusCertificate and Digest.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/versioned_docs/version-1.5.X/concepts/design/networking-protocol.md#2025-04-22_snippet_0\n\nLANGUAGE: rust\nCODE:\n```\nenum Message {\n    Handshake {\n        network_name: String,\n        public_addr: SocketAddr,\n        // default: 1.0\n        protocol_version: ProtocolVersion,\n        // default: `None`\n        consensus_certificate: Option<ConsensusCertificate>,\n        // default: false\n        is_syncing: bool,\n        // default: `None`\n        chainspec_hash: Option<Digest>,\n    },\n    Payload(Payload),\n}\n\nstruct ConsensusCertificate {\n    public_key: PublicKey,\n    signature: Signature,\n}\n\nstruct Digest([u8; 32]);\n```\n\n----------------------------------------\n\nTITLE: Starting NCTL Docker Container\nDESCRIPTION: This snippet shows the command to start the NCTL Docker container, mapping the necessary port.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/src/pages/condor/setting-up-condor-local.md#2025-04-22_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\ndocker run -d --name mynctl -p 11101:11101 casper-nctl:rc3\n```\n\n----------------------------------------\n\nTITLE: Calling Contract Package with Runtime Arguments\nDESCRIPTION: Example showing how to call a contract package with runtime arguments, demonstrating the check_balance_of entry point with multiple session arguments.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/versioned_docs/version-2.0.0/developers/cli/calling-contracts.md#2025-04-22_snippet_16\n\nLANGUAGE: rust\nCODE:\n```\n    casper-client put-deploy \\\n    --node-address http://3.143.158.19:7777 \\\n    --chain-name integration-test \\\n    --secret-key ~/casper/demo/user_a/secret_key.pem \\\n    --payment-amount 1000000000 \\\n    --session-package-name \"erc20_test_call\" \\\n    --session-entry-point \"check_balance_of\" \\\n    --session-arg \"token_contract:account_hash='account-hash-b568f50a64acc8bbe43462ffe243849a88111060b228dacb8f08d42e26985180'\" \\\n    --session-arg \"address:key='account-hash-303c0f8208220fe9a4de40e1ada1d35fdd6c678877908f01fddb2a56502d67fd'\" \n```\n\n----------------------------------------\n\nTITLE: Querying Auction Info with state_get_auction_info\nDESCRIPTION: JSON-RPC request to get auction information including bids and validators for a specific block hash. Returns auction state including bid details and validator weights.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/versioned_docs/version-1.5.X/developers/json-rpc/json-rpc-pos.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n{\n  \"id\": 1,\n  \"jsonrpc\": \"2.0\",\n  \"method\": \"state_get_auction_info\",\n  \"params\": [\n    {\n      \"Hash\": \"13c2d7a68ecdd4b74bf4393c88915c836c863fc4bf11d7f2bd930a1bbccacdcb\"\n    }\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Switching to Casper 2.0-Compatible Branch for Client in Bash\nDESCRIPTION: Optional command to checkout the feat-track-node-2.0 branch of the Casper Client repository, which is compatible with Casper 2.0.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/condor/local-setup.md#2025-04-22_snippet_8\n\nLANGUAGE: bash\nCODE:\n```\ngit checkout feat-track-node-2.0\n```\n\n----------------------------------------\n\nTITLE: Querying Global State Result Example in Casper Network RPC API\nDESCRIPTION: Example JSON response from the query_global_state endpoint showing the block header, stored value (account details), and Merkle proof for verification.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/docs/developers/json-rpc/json-rpc-informational.md#2025-04-22_snippet_21\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"id\": 1,\n  \"jsonrpc\": \"2.0\",\n  \"result\": {\n    \"api_version\": \"2.0.0\",\n    \"block_header\": {\n      \"Version2\": {\n        \"parent_hash\": \"0707070707070707070707070707070707070707070707070707070707070707\",\n        \"state_root_hash\": \"0808080808080808080808080808080808080808080808080808080808080808\",\n        \"body_hash\": \"0505050505050505050505050505050505050505050505050505050505050505\",\n        \"random_bit\": true,\n        \"accumulated_seed\": \"ac979f51525cfd979b14aa7dc0737c5154eabe0db9280eceaa8dc8d2905b20d5\",\n        \"era_end\": {\n          \"equivocators\": [\n            \"013b6a27bcceb6a42d62a3a8d02a6f0d73653215771de243a63ac048a18b59da29\"\n          ],\n          \"inactive_validators\": [\n            \"018139770ea87d175f56a35466c34c7ecccb8d8a91b4ee37a25df60f5b8fc9b394\"\n          ],\n          \"next_era_validator_weights\": [\n            {\n              \"validator\": \"013b6a27bcceb6a42d62a3a8d02a6f0d73653215771de243a63ac048a18b59da29\",\n              \"weight\": \"123\"\n            },\n            {\n              \"validator\": \"016e7a1cdd29b0b78fd13af4c5598feff4ef2a97166e3ca6f2e4fbfccd80505bf1\",\n              \"weight\": \"456\"\n            },\n            {\n              \"validator\": \"018a875fff1eb38451577acd5afee405456568dd7c89e090863a0557bc7af49f17\",\n              \"weight\": \"789\"\n            }\n          ],\n          \"rewards\": {},\n          \"next_era_gas_price\": 1\n        },\n        \"timestamp\": \"2020-11-17T00:39:24.072Z\",\n        \"era_id\": 1,\n        \"height\": 10,\n        \"protocol_version\": \"1.0.0\",\n        \"proposer\": \"01d9bf2148748a85c89da5aad8ee0b0fc2d105fd39d41a4c796536354f0ae2900c\",\n        \"current_gas_price\": 1,\n        \"last_switch_block_hash\": \"0909090909090909090909090909090909090909090909090909090909090909\"\n      }\n    },\n    \"stored_value\": {\n      \"Account\": {\n        \"account_hash\": \"account-hash-e94daaff79c2ab8d9c31d9c3058d7d0a0dd31204a5638dc1451fa67b2e3fb88c\",\n        \"named_keys\": [\n          {\n            \"name\": \"main_purse\",\n            \"key\": \"uref-09480c3248ef76b603d386f3f4f8a5f87f597d4eaffd475433f861af187ab5db-007\"\n          }\n        ],\n        \"main_purse\": \"uref-09480c3248ef76b603d386f3f4f8a5f87f597d4eaffd475433f861af187ab5db-007\",\n        \"associated_keys\": [\n          {\n            \"account_hash\": \"account-hash-e94daaff79c2ab8d9c31d9c3058d7d0a0dd31204a5638dc1451fa67b2e3fb88c\",\n            \"weight\": 1\n          }\n        ],\n        \"action_thresholds\": {\n          \"deployment\": 1,\n          \"key_management\": 1\n        }\n      }\n    },\n    \"merkle_proof\": \"01000000006ef2e0949ac76e55812421f755abe129b6244fe7168b77f47a72536147614625016ef2e0949ac76e55812421f755abe129b6244fe7168b77f47a7253614761462500000000352...fe3\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Query Named Key Value\nDESCRIPTION: Example of querying a specific named key value from a contract using the contract hash.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/versioned_docs/version-1.5.X/developers/cli/installing-contracts.md#2025-04-22_snippet_8\n\nLANGUAGE: bash\nCODE:\n```\ncasper-client query-global-state \\\n  --node-address http://localhost:11101 \\\n  --state-root-hash [STATE_ROOT_HASH] \\\n  --key [CONTRACT_HASH] \\\n  -q \"count\"\n```\n\n----------------------------------------\n\nTITLE: Querying Message Topic Count\nDESCRIPTION: Command to query the global state for message topic information including message count and block timestamp.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/docs/developers/writing-onchain-code/emitting-contract-events.md#2025-04-22_snippet_13\n\nLANGUAGE: bash\nCODE:\n```\ncasper-client query-global-state \\\n--node-address <HOST:PORT> \\\n--key [HASH_STRING] \\\n--block-identifier <BLOCK_HASH>\n```\n\n----------------------------------------\n\nTITLE: Monitoring Transaction Events using cURL\nDESCRIPTION: Command to monitor the event stream from a Casper node, specifically watching for TransactionAccepted events. The stream is accessed through the node's event_stream_server address, typically port 9999 on Mainnet and Testnet.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/docs/developers/cli/sending-transactions.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ncurl -s http://65.21.235.219:9999/events\n```\n\n----------------------------------------\n\nTITLE: Defining Era ID as uint64 in JSON Schema\nDESCRIPTION: This JSON snippet defines the schema for an Era ID. It specifies the data type as an integer, formatted as a 64-bit unsigned integer (`uint64`), with a minimum allowed value of 0. This schema is likely used for validating or documenting Era ID values within the Casper Network.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/condor/jsonrpc-comp/rpc-1.5/schema/EraId.json.md#2025-04-22_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"description\": \"Era ID newtype.\",\n    \"type\": \"integer\",\n    \"format\": \"uint64\",\n    \"minimum\": 0\n} \n```\n\n----------------------------------------\n\nTITLE: Sample Validator Bids Structure Returned by Auction Info - JSON\nDESCRIPTION: This snippet provides a structural example of the \"bids\" field returned in the auction-info JSON response. It shows the hierarchical organization of bids, including bonding purses, delegation rates, delegators (with their public keys and staked amounts), and overall staked amounts. Dependencies: Output from a valid casper-client get-auction-info query; input is for reference/validation purposes only.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/versioned_docs/version-1.5.X/developers/cli/delegate.md#2025-04-22_snippet_6\n\nLANGUAGE: json\nCODE:\n```\n\"bids\": [\n{\n  \"bid\": {\n    \"bonding_purse\": \"uref-a5ce7dbc5f7e02ef52048e64b2ff4693a472a1a56fe71e83b180cd33271b2ed9-007\",\n    \"delegation_rate\": 1,\n    \"delegators\": [\n      {\n        \"bonding_purse\": \"uref-ca9247ad56a4d5be70484303133e2d6db97f7d7385772155763749af98ace0b0-007\",\n        \"delegatee\": \"0102db4e11bccb3f9d823c82b9389625d383867d00d09b343043cdbe5ca56dd1fd\",\n        \"public_key\": \"010c7fef89bf1fc38363bd2ec20bbfb5e1152d6a9579c8847615c59c7e461ece89\",\n        \"staked_amount\": \"1\"\n      },\n      {\n        \"bonding_purse\": \"uref-38a2e9cad51b380e478c9a325578f4bbdaa0337b99b9ab9bf1dc2a114eb948b9-007\",\n        \"delegatee\": \"0102db4e11bccb3f9d823c82b9389625d383867d00d09b343043cdbe5ca56dd1fd\",\n        \"public_key\": \"016ebb38d613f2550e7c21ff9d99f6249b4ae5fb9e30938f6ece2d84a22a36b035\",\n        \"staked_amount\": \"478473232415318176495746923\"\n      }\n    ],\n    \"inactive\": false,\n    \"staked_amount\": \"493754513995516852173468935\"\n  },\n  \"public_key\": \"0102db4e11bccb3f9d823c82b9389625d383867d00d09b343043cdbe5ca56dd1fd\"\n},\n```\n\n----------------------------------------\n\nTITLE: Initiator Address Schema Definition in JSON\nDESCRIPTION: Defines the schema for the initiator address of a TransactionV1, which can be either a PublicKey or an AccountHash with references to their respective schemas.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/condor/jsonrpc-comp/rpc-2.0/schema.json.md#2025-04-22_snippet_36\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"description\": \"The address of the initiator of a TransactionV1.\",\n  \"oneOf\": [\n    {\n      \"description\": \"The public key of the initiator.\",\n      \"type\": \"object\",\n      \"required\": [\n        \"PublicKey\"\n      ],\n      \"properties\": {\n        \"PublicKey\": {\n          \"$ref\": \"#/components/schemas/PublicKey\"\n        }\n      },\n      \"additionalProperties\": false\n    },\n    {\n      \"description\": \"The account hash derived from the public key of the initiator.\",\n      \"type\": \"object\",\n      \"required\": [\n        \"AccountHash\"\n      ],\n      \"properties\": {\n        \"AccountHash\": {\n          \"$ref\": \"#/components/schemas/AccountHash\"\n        }\n      },\n      \"additionalProperties\": false\n    }\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Identity Transformations from Contract Execution\nDESCRIPTION: JSON output showing identity transformations for various hash and balance keys in the Casper network. These transformations indicate state values that were accessed but not modified during contract execution.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/docs/resources/advanced/cross-contract.md#2025-04-22_snippet_22\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"key\": \"hash-8cf5e4acf51f54eb59291599187838dc3bc234089c46fc6ca8ad17e762ae4401\",\n  \"transform\": \"Identity\"\n},\n{\n  \"key\": \"hash-624dbe2395b9d9503fbee82162f1714ebff6b639f96d2084d26d944c354ec4c5\",\n  \"transform\": \"Identity\"\n},\n{\n  \"key\": \"balance-98d945f5324f865243b7c02c0417ab6eac361c5c56602fd42ced834a1ba201b6\",\n  \"transform\": \"Identity\"\n},\n{\n  \"key\": \"hash-8cf5e4acf51f54eb59291599187838dc3bc234089c46fc6ca8ad17e762ae4401\",\n  \"transform\": \"Identity\"\n},\n{\n  \"key\": \"hash-010c3fe81b7b862e50c77ef9a958a05bfa98444f26f96f23d37a13c96244cfb7\",\n  \"transform\": \"Identity\"\n},\n{\n  \"key\": \"hash-9824d60dc3a5c44a20b9fd260a412437933835b52fc683d8ae36e4ec2114843e\",\n  \"transform\": \"Identity\"\n},\n{\n  \"key\": \"balance-98d945f5324f865243b7c02c0417ab6eac361c5c56602fd42ced834a1ba201b6\",\n  \"transform\": \"Identity\"\n},\n{\n  \"key\": \"balance-bb9f47c30ddbe192438fad10b7db8200247529d6592af7159d92c5f3aa7716a1\",\n  \"transform\": \"Identity\"\n}\n```\n\n----------------------------------------\n\nTITLE: Memory Management Implementation in WebAssembly\nDESCRIPTION: Low-level WebAssembly code handling memory allocation, deallocation, and pointer management. Includes operations for memory block allocation, pointer arithmetic, and memory alignment.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/docs/developers/json-rpc/json-rpc-transactional.md#2025-04-22_snippet_12\n\nLANGUAGE: webassembly\nCODE:\n```\n00360240200041002802d882403602c0010240024041064101200041c0016a200041c0006a419481c0002301410b6a2401230141f4034b0440000b10122301410b6b24012203450d0041cccd021008410020002802c0013602d882400c010b41aac70f10082000200028024022032802003602900202400240418010410420004190026a419481c00041ac81c0002301410b6a2401230141f4034b0440000b10122301410b6b24012201450d0041e4cf02100820032000280290023602000c010b4184f2101008024002404101230141036a2401230141f4034b0440000b1024230141036b24012201417f470d0041e4cf02100820032000280290023602000c010b41bab7081008200141107422014100360204200120002802900236020820012001418280046a3602002000200136029002418010410420004190026a419481c00041ac81c0002301410b6a2401230141f4034b0440000b10122301410b6b24012101200320002802900236020020010d010b41b0c0001008410020002802c0013602d8824000000b20014100360204200120002802c001360208200120014180c0006a410272360200200020013602c00141064101200041c0016a200041c0006a419481c0002301410b6a2401230141f4034b0440000b10122301410b6b24012103410020002802c0013602d882402003450d010b41c08d081008200341113600002003410029008680403700042003410c6a410029008e8040370000200341146a41002d009680403a000041044101230141096a2401230141f4034b0440000b100f230141096b24012206450d0041daa00b1008200641003600000240024002400240024002400240024002400240024020024120200341152006410420004190026a1005230141086a2401230141f4034b0440000b100e230141086b2401220141ff01714136470d004182ad0210082000280290022201450d0441a6970210082001417f4c0d0141ccad06100820014101230141096a2401230141f4034b0440000b100f230141096b24012205450d0241d2cc0a100820052001200041c0016a1006230141086a2401230141f4034b0440000b100e230141086b2401220441ff01714136470d03419a9b0210084100210420014120490d0541a69702100820014120460d0541e4b10210084101210420052d0020221241074b0d0541dadf05100820052d00002113200041c0016a41176a2207200541016a220441176a290000370000200041c0016a41106a2209200441106a29000037030020004190026a41086a220f200441086a29000037030020004190026a41106a2210200929030037030020004190026a41176a221120072900003700002000200429000037039002024020014121460d0041c6af061008200520014101230141086a2401230141f4034b0440000b1010230141086b2401410221040c0d0b41c0b81b1008200041c0006a41176a22042011290000370000200041c0006a41106a22112010290300370300200041c0006a41086a2210200f2903003703002000200029039002370340200520014101230141086a2401230141f4034b0440000b1010230141086b2401200041c0016a41086a20102903003703002009201129030037030020072004290000370000200020002903403703c001200641044101230141086a2401230141f4034b0440000b1010230141086b2401200341154101230141086a2401230141f4034b0440000b1010230141086b2401200241002802e082403602004100200241786a22023602e0824020022002280200417e7136020020004199026a2202200041086a290300370000200041a1026a2201200041106a290300370000200041a8026a2203200041176a2900003700002000200d3a00900220002000290300370091022000200b3a00b002200041c0006a20004190026a230141086a2401230141f4034b0440000b1014230141086b24012000280244220b450d06418eda091008200028024821112000280240210d\n```\n\n----------------------------------------\n\nTITLE: Block Transfers Response Example\nDESCRIPTION: Example response from the chain_get_block_transfers method showing transfer details including transaction hash, source, target, and amount.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/docs/developers/json-rpc/json-rpc-informational.md#2025-04-22_snippet_3\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"id\": 1,\n  \"jsonrpc\": \"2.0\",\n  \"result\": {\n    \"name\": \"chain_get_block_transfers_result\",\n    \"value\": {\n      \"api_version\": \"2.0.0\",\n      \"block_hash\": \"0707070707070707070707070707070707070707070707070707070707070707\",\n      \"transfers\": [\n        {\n          \"Version2\": {\n            \"transaction_hash\": {\n              \"Version1\": \"0101010101010101010101010101010101010101010101010101010101010101\"\n            },\n            \"from\": {\n              \"AccountHash\": \"account-hash-0202020202020202020202020202020202020202020202020202020202020202\"\n            },\n            \"to\": \"account-hash-0303030303030303030303030303030303030303030303030303030303030303\",\n            \"source\": \"uref-0a0a0a0a0a0a0a0a0a0a0a0a0a0a0a0a0a0a0a0a0a0a0a0a0a0a0a0a0a0a0a0a-007\",\n            \"target\": \"uref-1b1b1b1b1b1b1b1b1b1b1b1b1b1b1b1b1b1b1b1b1b1b1b1b1b1b1b1b1b1b1b1b-000\",\n            \"amount\": \"1000000000000\",\n            \"gas\": \"2500000000\",\n            \"id\": 999\n          }\n        }\n      ]\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Interacting with Installed Contract\nDESCRIPTION: Command to interact with an installed contract by sending a transaction with specific package address and session arguments\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/docs/developers/dapps/nctl-test.md#2025-04-22_snippet_8\n\nLANGUAGE: bash\nCODE:\n```\n$(get_path_to_client) put-transaction package \\\n--node-address http://localhost:11101 \\\n--chain-name \"casper-net-1\" \\\n--package-address package-47b8b489d54c378144bf85429f4b29c8b47142d542272086f378b9d4e29cada4 \\\n--gas-price-tolerance 10 \\\n--pricing-mode fixed \\\n--session-arg \"amount:u256='100'\"\n```\n\n----------------------------------------\n\nTITLE: Invoking a Contract Entry Point with a Specific Authorization Key in Rust\nDESCRIPTION: This Rust snippet retrieves the hash of the previously installed contract and builds a deploy item to call its `ENTRYPOINT`. The deploy is executed under the context of `account_addr_1` and authorized solely by `account_addr_1`. It sets the payment, specifies the authorization key and address, and targets the stored contract hash and entry point. The test builder executes the request, expecting success.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/versioned_docs/version-2.0.0/resources/advanced/list-auth-keys-tutorial.md#2025-04-22_snippet_10\n\nLANGUAGE: rust\nCODE:\n```\nlet contract_hash = builder\n    .get_expected_account(*DEFAULT_ACCOUNT_ADDR)\n    .named_keys()\n    .get(CONTRACT_HASH)\n    .expect(\"must have this entry in named keys\")\n    .into_hash()\n    .map(ContractHash::new)\n    .unwrap();\n\nlet entry_point_deploy_item = DeployItemBuilder::new()\n    .with_empty_payment_bytes(runtime_args! {ARG_AMOUNT => *DEFAULT_PAYMENT})\n    .with_authorization_keys(&[account_addr_1])\n    .with_address(account_addr_1)\n    .with_stored_session_hash(contract_hash, ENTRYPOINT, runtime_args! {})\n    .build();\n\nlet entry_point_request =\n    ExecuteRequestBuilder::from_deploy_item(entry_point_deploy_item).build();\n\nbuilder.exec(entry_point_request).expect_success().commit();\n```\n\n----------------------------------------\n\nTITLE: Defining JSON Schema for Auction Contract Data Structure\nDESCRIPTION: JSON schema that defines the structure of auction contract data. It requires four main properties: bids (array of JsonBids), block_height (unsigned 64-bit integer), era_validators (array of JsonEraValidators), and state_root_hash (Digest reference). Additional properties are not allowed.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/condor/jsonrpc-comp/rpc-1.5/schema/AuctionState.json.md#2025-04-22_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"description\": \"Data structure summarizing auction contract data.\",\n    \"type\": \"object\",\n    \"required\": [\n        \"bids\",\n        \"block_height\",\n        \"era_validators\",\n        \"state_root_hash\"\n    ],\n    \"properties\": {\n        \"state_root_hash\": {\n            \"description\": \"Global state hash.\",\n            \"allOf\": [\n                {\n                    \"$ref\": \"#/components/schemas/Digest\"\n                }\n            ]\n        },\n        \"block_height\": {\n            \"description\": \"Block height.\",\n            \"type\": \"integer\",\n            \"format\": \"uint64\",\n            \"minimum\": 0\n        },\n        \"era_validators\": {\n            \"description\": \"Era validators.\",\n            \"type\": \"array\",\n            \"items\": {\n                \"$ref\": \"#/components/schemas/JsonEraValidators\"\n            }\n        },\n        \"bids\": {\n            \"description\": \"All bids contained within a vector.\",\n            \"type\": \"array\",\n            \"items\": {\n                \"$ref\": \"#/components/schemas/JsonBids\"\n            }\n        }\n    },\n    \"additionalProperties\": false\n}\n```\n\n----------------------------------------\n\nTITLE: Checking Rustup Version - Bash\nDESCRIPTION: Verifies Rustup installation by outputting the current toolchain version. Confirms Rust toolchain availability before installing further Casper dependencies.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/versioned_docs/version-1.5.X/developers/prerequisites.md#2025-04-22_snippet_10\n\nLANGUAGE: bash\nCODE:\n```\nrustup --version\n```\n\n----------------------------------------\n\nTITLE: Retrieving Dictionary Item Result in Casper Network (JSON)\nDESCRIPTION: Example JSON response for the state_get_dictionary_item_result method, which returns the stored value and merkle proof for a dictionary item.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/versioned_docs/version-2.0.0/developers/json-rpc/json-rpc-informational.md#2025-04-22_snippet_23\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"id\": 1,\n  \"jsonrpc\": \"2.0\",\n  \"result\": {\n    \"name\": \"state_get_dictionary_item_result\",\n    \"value\": {\n      \"api_version\": \"2.0.0\",\n      \"dictionary_key\": \"dictionary-67518854aa916c97d4e53df8570c8217ccc259da2721b692102d76acd0ee8d1f\",\n      \"stored_value\": {\n        \"CLValue\": {\n          \"cl_type\": \"U64\",\n          \"bytes\": \"0100000000000000\",\n          \"parsed\": 1\n        }\n      },\n      \"merkle_proof\": \"01000000006ef2e0949ac76e55812421f755abe129b6244fe7168b77f47a72536147614625016ef2e0949ac76e55812421f755abe129b6244fe7168b77f47a72536147614625000000003529cde5c621f857f75f3810611eb4af3f998caaa9d4a3413cf799f99c67db0307010000006ef2e0949ac76e55812421f755abe129b6244fe7168b77f47a7253614761462501010102000000006e06000000000074769d28aac597a36a03a932d4b43e4f10bf0403ee5c41dd035102553f5773631200b9e173e8f05361b681513c14e25e3138639eb03232581db7557c9e8dbbc83ce94500226a9a7fe4f2b7b88d5103a4fc7400f02bf89c860c9ccdd56951a2afe9be0e0267006d820fb5676eb2960e15722f7725f3f8f41030078f8b2e44bf0dc03f71b176d6e800dc5ae9805068c5be6da1a90b2528ee85db0609cc0fb4bd60bbd559f497a98b67f500e1e3e846592f4918234647fca39830b7e1e6ad6f5b7a99b39af823d82ba1873d000003000000010186ff500f287e9b53f823ae1582b1fa429dfede28015125fd233a31ca04d5012002015cc42669a55467a1fdf49750772bfc1aed59b9b085558eb81510e9b015a7c83b0301e3cf4a34b1db6bfa58808b686cb8fe21ebe0c1bcbcee522649d2b135fe510fe3\"\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Example Contract State Query Output - Casper Client - JSON\nDESCRIPTION: This JSON output represents the result of querying the global state for a given contract hash. It provides detailed contract metadata, including entry points, named keys, and protocol version. This output helps developers inspect the structure and state of a deployed contract, verify entry points and argument types, and facilitates debugging or client integration. No external dependencies are required to parse this JSON, but domain knowledge of Casper contract structure is necessary to interpret it.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/docs/resources/advanced/cross-contract.md#2025-04-22_snippet_15\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"id\": 2434670480361972874,\n  \"jsonrpc\": \"2.0\",\n  \"result\": {\n    \"api_version\": \"1.4.13\",\n    \"block_header\": null,\n    \"merkle_proof\": \"[25224 hex chars]\",\n    \"stored_value\": {\n      \"Contract\": {\n        \"contract_package_hash\": \"contract-package-wasm7a581d353665b74779dc8d446d33a5086bb367a29a558490d1e524f9c12002d3\",\n        \"contract_wasm_hash\": \"contract-wasm-c0384d4041950780bd3b167b4516a306e308e2d4729d08f6d2b10dfa1dbdaad6\",\n        \"entry_points\": [\n          {\n            \"access\": \"Public\",\n            \"args\": [\n              {\n                \"cl_type\": \"String\",\n                \"name\": \"message\"\n              }\n            ],\n            \"entry_point_type\": \"Contract\",\n            \"name\": \"update_msg\",\n            \"ret\": \"Unit\"\n          }\n        ],\n        \"named_keys\": [\n          {\n            \"key\": \"uref-aa758090d9bc1364754180f9f6bfc8821275038fd5d794a5dfb60bd2838a8670-007\",\n            \"name\": \"message\"\n          }\n        ],\n        \"protocol_version\": \"1.4.13\"\n      }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Querying Account State\nDESCRIPTION: Command to query global state for account information using public key and state root hash.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/docs/developers/cli/transfers/verify-transfer.md#2025-04-22_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\ncasper-client query-global-state \\\n--id [ID] \\\n--node-address [NODE_SERVER_ADDRESS] \\\n--state-root-hash [STATE_ROOT_HASH] \\\n--key [SOURCE_PUBLIC_KEY]\n```\n\n----------------------------------------\n\nTITLE: Defining Casper Network Data Structures and Parameters in Markdown\nDESCRIPTION: This Markdown snippet provides type-level documentation for Casper Network entities such as contracts, blocks, transfers, validators, and protocol operations. It describes the purpose, required and optional fields, and detailed relationships using headings, bullet lists, and parameter annotation hyperlinks. There are no code dependencies or imports; instead, the Markdown serves as a canonical source of schema and API usage for both human readers and potential code generation from documentation. Inputs are conceptual references and linked data types; outputs are human-readable technical guides. Constraints include the absence of executable logic and the intent to describe, not implement.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/versioned_docs/version-1.5.X/developers/json-rpc/types_chain.md#2025-04-22_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n### `StoredVersionContractByHash` {#storedversioncontractbyhash}\n\nStored versioned contract referenced by its `ContractPackageHash`, entry point and an instance of `RuntimeArgs`.\n\nRequired Parameters:\n\n* [`args`](#runtimeargs) Runtime arguments.\n\n* `entry_point` The name of an entry point.\n\n* `hash` A hex-encoded hash.\n\nAdditional Parameters:\n\n* `version` An optional version of the contract to call. It will default to the highest enabled version if no value is specified.\n\n### `StoredVersionContractByName` {#storedversioncontractbyname}\n\nStored versioned contract referenced by a named key existing in the signer's Account context, entry point and an instance of `RuntimeArgs`.\n\nRequired Parameters:\n\n* [`args`](#runtimeargs) Runtime arguments.\n\n* `entry_point` The name of an entry point.\n\n* `name` A named key.\n\nAdditional Parameters:\n\n* `version` An optional version of the contract to call. It will default to the highest enabled version if no value is specified.\n\n### `Transfer` {#transfer}\n\nA native transfer which does not contain or reference a Wasm code.\n\nRequired Parameters:\n\n* [`args`](#runtimeargs)\n\n## ExecutionEffect {#executioneffect}\n\nThe journal of execution transforms from a single Deploy.\n\nRequired Parameters:\n\n* [`operations`](#operation)\n\n* [`transforms`](#transformentry)\n\n## ExecutionResult {#executionresult}\n\nThe result of executing a single Deploy.\n\n* `Failure` The result of a failed execution`\n\n    Required Parameters:\n\n    [`effect`](#executioneffect)\n\n    [`transfers`](#transferaddr)\n\n    [`cost`](#u512)\n\n    `error_message` The error message associated with executing the Deploy.\n\n* `Success` The result of a successful execution.\n\n    Required Parameters:\n\n    [`effect`](#executioneffect)\n\n    [`transfers`](#transferaddr)\n\n    [`cost`](#u512)\n\n## FinalizedApprovals {#finalizedapprovals}\n\nA boolean value that determines whether to return the deploy with the finalized approvals substituted. If `false` or omitted, returns the deploy with the approvals that were originally received by the node.\n\n## GlobalStateIdentifier {#globalstateidentifier}\n\nIdentifier for possible ways to query global state.\n\n* [`BlockHash`](#blockhash) Query using a Block hash.\n\n* [`StateRootHash`](#digest) Query using the state root hash.\n\n## Group {#group}\n\nA (labelled) \"user group\". Each entry point of a versioned contract may be associated with one or more user groups which are allowed to call it.\n\n### Groups {#groups}\n\nRequired Parameters:\n\n* `group`\n\n* [`keys`](#uref)\n\n## JsonBid {#jsonbid}\n\nAn entry in a founding validator map representing a bid.\n\nRequired Parameters:\n\n* [`bonding_purse`](#uref) The purse that was used for bonding.\n\n* `delegation_rate` The delegation rate.\n\n* [`delegators`](#jsondelegator) The delegators.\n\n* `inactive` Is this an inactive validator.\n\n* [`staked_amount`](#u512) The amount of tokens staked by a validator (not including delegators).\n\n## JsonBids {#jsonbids}\n\nA Json representation of a single bid.\n\nRequired Parameters:\n\n* [`bid`](#jsonbid)\n\n* [`public_key`](#publickey)\n\n## JsonBlock {#jsonblock}\n\nA JSON-friendly representation of `Block`.\n\nRequired Parameters:\n\n* [`body`](#jsonblockbody) JSON-friendly Block body.\n\n* [`hash`](#blockhash) BlockHash.\n\n* [`header`](#jsonblockheader) JSON-friendly Block header.\n\n* [`proofs`](#jsonproof) JSON-friendly list of proofs for this Block.\n\n## JsonBlockBody {#jsonblockbody}\n\nA JSON-friendly representation of `Body`.\n\nRequired Parameters:\n\n* [`deploy_hashes`](#deployhash)\n\n* [`proposer`](#publickey)\n\n* [`transfer_hashes`](#deployhash)\n\n## JsonBlockHeader {#jsonblockheader}\n\nJSON representation of a Block header.\n\n* [`accumulated_seed`](#digest) Accumulated seed.\n\n* [`body_hash`](#digest) The body hash.\n\n* [`era_id`](#eraid) The Block era id.\n\n* `height` The Block height.\n\n* [`parent_hash`](#blockhash) The parent hash.\n\n* [`protocol_version`](#protocolversion) The protocol version.\n\n* `random_bit` Randomness bit.\n\n* [`state_root_hash`](#digest) The state root hash.\n\n* [`timestamp`](#timestamp) The Block timestamp.\n\nAdditional Parameters:\n\n* [`era_end`](#jsoneraend) The era end.\n\n## JsonDelegator {#jsondelegator}\n\nA delegator associated with the given validator.\n\nRequired Parameters:\n\n* [`bonding_purse`](#uref)\n\n* [`delegatee`](#publickey)\n\n* [`public_key`](#publickey)\n\n* [`staked_amount`](#u512)\n\n## JsonEraEnd {#jsoneraend}\n\nRequired Parameters:\n\n* [`era_report](#jsonerareport)\n\n* [`next_era_validator_weight`](#validatorweight)\n\n## JsonEraReport {#jsonerareport}\n\nEquivocation and reward information to be included in the terminal Block.\n\nRequired Parameters:\n\n* [`equivocators`](#publickey)\n\n* [`inactive_validators`](#publickey)\n\n* [`rewards`](#reward)\n\n## JsonEraValidators {#jsoneravalidators}\n\nThe validators for the given era.\n\nRequired Parameters:\n\n* [`era_id`](#eraid)\n\n* [`validator_weights`](#jsonvalidatorweights)\n\n## JsonExecutionResult {#jsonexecutionresult}\n\nThe execution result of a single Deploy.\n\n* [`block_hash`](#blockhash)\n\n* [`result`](#executionresult)\n\n## JsonProof {#jsonproof}\n\nA JSON-friendly representation of a proof, i.e. a Block's finality signature.\n\nRequired Parameters:\n\n* [`public_key`](#publickey)\n\n* [`signature`](#signature)\n\n## JsonValidatorChanges {#jsonvalidatorchanges}\n\nThe changes in a validator's status.\n\nRequired Parameters:\n\n* [`public_key`](#publickey) The public key of the validator.\n\n* [`status_changes`](#jsonvalidatorstatuschange) The set of changes to the validator's status.\n\n## JsonValidatorStatusChange {#jsonvalidatorstatuschange}\n\nA single change to a validator's status in the given era.\n\nRequired Parameters:\n\n* [`era_id`](#eraid) The era in which the change occurred.\n\n* [`validator_change`](#validatorchange) The change in validator status.\n\n## JsonValidatorsWeights {#jsonvalidatorweights}\n\nA validator's weight.\n\nRequired Parameters:\n\n* [`public_key`](#publickey)\n\n* [`weight`](#u512)\n\n## Merkle_Proof {#merkle-proof}\n\nA merkle proof is a construction created using a merkle trie that allows verification of the associated hashes.\n\n## MinimalBlockInfo {#minimalblockinfo}\n\nMinimal info of a `Block`.\n\nRequired Parameters:\n\n* [`creator`](#publickey)\n\n* [`era_id`](#eraid)\n\n* [`hash`](#blockhash)\n\n* `height`\n\n* [`state_root_hash`](#digest)\n\n* [`timestamp`](#timestamp)\n\n## NamedArg {#namedarg}\n\nNamed arguments to a contract.\n\n## NamedKey {#namedkey}\n\nA named key.\n\nRequired Parameters:\n\n* `key` The value of the entry: a casper `Key` type.\n\n* `name` The name of the entry.\n\n## NextUpgrade {#nextupgrade}\n\nInformation about the next protocol upgrade.\n\nRequired Parameters:\n\n* [`activation_point`](#activationpoint)\n\n* `protocol_version`\n\n## NewValidator {#newvalidator}\n\nThe public key for the new validator in a redelegation using [UnbondingPurse](#unbondingpurse).\n\n## Operation {#operation}\n\nAn operation performed while executing a Deploy.\n\nRequired Parameters:\n\n* `key` The formatted string of the `Key`.\n\n* [`kind`](#opkind)\n\n## OpKind {#opkind}\n\nThe type of operation performed while executing a Deploy.\n\n## Parameter {#parameter}\n\nParameter to an entry point.\n\nRequired Parameters:\n\n* [`cl_type`](types_cl.md)\n\n* `name`\n\n## PeerEntry {#peerentry}\n\nRequired Parameters:\n\n* `address`\n\n* `node_id`\n\n## PeersMap {#peersmap}\n\nMap of peer IDs to network addresses.\n\n## ProtocolVersion {#protocolversion}\n\nCasper Platform protocol version.\n\n## PublicKey {#publickey}\n\nHex-encoded cryptographic public key, including the algorithm tag prefix.\n\n## PurseIdentifier {#purseidentifier}\n\nThe identifier to obtain the purse corresponding to a balance query. Valid identifiers include:\n\n* `main_purse_under_public_key` The main purse under a provided [`PublicKey`](./types_chain.md#publickey).\n\n* `main_purse_under_account_hash` The main purse under a provided [`AccountHash`](./types_chain.md#accounthash).\n\n* `purse_uref` A specific purse identified by the associated [`URef`](./types_chain.md#uref).\n\n## ReactorState {#reactorstate}\n\nThe state of the reactor, which will return one of the following:\n\n* `Initialize` Get all components and reactor state set up on start.\n\n* `CatchUp` Orient to the network and attempt to catch up to tip.\n\n* `Upgrading` Running commit upgrade and creating immediate switch block.\n\n* `KeepUp` Stay caught up with tip.\n\n* `Validate` Node is currently caught up and is an active validator.\n\n* `ShutdownForUpgrade` Node should be shut down for upgrade.\n\n## Reward {#reward}\n\nRequired Parameters:\n\n* `amount`\n\n* [`validator`](#publickey)\n\n## RuntimeArgs {#runtimeargs}\n\nRepresents a collection of arguments passed to a smart contract.\n\n## SeigniorageAllocation {#seigniorageallocation}\n\nInformation about a seigniorage allocation.\n\n* `Validator` Info about a seigniorage allocation for a validator.\n\n    Required Parameters:\n\n    [`amount`](#u512) Allocated amount.\n\n    [`validator_public_key`](#publickey) Validator's public key.\n\n* `Delegator` Info about a seigniorage allocation for a delegator.\n\n    Require Parameters:\n\n    [`amount`](#u512) Allocated amount.\n\n    [`delegator_public_key`](#publickey) Delegator's public key.\n\n    [`validator_public_key`](#publickey) Validator's public key.\n\n## Signature {#signature}\n\nHex-encoded cryptographic signature, including the algorithm tag prefix.\n\n## StoredValue {#storedvalue}\n\nRepresentation of a value stored in global state. `Account`, `Contract` and `ContractPackage` have their own `json_compatibility` representation (see their docs for further info).\n\n* [`CLValue`](types_cl.md) A Casper-specific value.\n\n* [`Account`](#account) An Account.\n\n* `ContractWasm` A contract's Wasm.\n\n* [`Contract`](#contract) Entry points supported by a contract.\n\n* [`ContractPackage`](#contractpackage) A contract definition, metadata, and security container.\n\n* [`Transfer`](#transfer) A record of a transfer.\n\n* [`DeployInfo`](#deployinfo) A record of a Deploy.\n\n* [`EraInfo`](#erainfo) Auction metadata.\n\n* [`Bid`](#bid) A bid.\n\n* [`Withdraw`](#unbondingpurse) A withdraw.\n\n## TimeDiff {#timediff}\n\nHuman-readable duration.\n\n```\n\n----------------------------------------\n\nTITLE: Creating UpdateMessage Component File\nDESCRIPTION: Command to create a new React component file for updating messages on the smart contract.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/versioned_docs/version-2.0.0/developers/dapps/template-frontend.md#2025-04-22_snippet_14\n\nLANGUAGE: bash\nCODE:\n```\ntouch src/UpdateMessage.jsx\n```\n\n----------------------------------------\n\nTITLE: Providing CEP-78 Metadata Example - JSON\nDESCRIPTION: This snippet demonstrates a sample NFT metadata object conforming to the CEP-78 schema. Required fields include 'name', 'token_uri', and 'checksum'. Such metadata is passed as part of minting operations using the CEP-78 modality, and all fields should be validated according to the contract schema requirements. Intended for use as the value to the 'token_metadata' runtime argument.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/docs/resources/tokens/cep78/modalities.md#2025-04-22_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\\n  \\\"name\\\": \\\"John Doe\\\",\\n  \\\"token_uri\\\": \\\"https://www.barfoo.com\\\",\\n  \\\"checksum\\\": \\\"940bffb3f2bba35f84313aa26da09ece3ad47045c6a1292c2bbd2df4ab1a55fb\\\"\\n}\n```\n\n----------------------------------------\n\nTITLE: Sample Account Info Query and Response\nDESCRIPTION: Example of querying account information with actual values and the JSON response showing account details including account hash, action thresholds, associated keys, main purse URef, and named keys.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/versioned_docs/version-1.5.X/concepts/accounts-and-keys.md#2025-04-22_snippet_13\n\nLANGUAGE: bash\nCODE:\n```\ncasper-client get-account-info --node-address http://65.21.75.254:7777  --public-key 0202ceafc0aa35f5a7bdda22f65c046b9b30b858459e18d3670f035839ad887fe5db\n{\n  \"id\": -2018234245556346849,\n  \"jsonrpc\": \"2.0\",\n  \"result\": {\n    \"account\": {\n      \"account_hash\": \"account-hash-0ea7998b2822afe5b62b08a21d54c941ad791279b089f3f7ede0d72b477eca34\",\n      \"action_thresholds\": {\n        \"deployment\": 1,\n        \"key_management\": 1\n      },\n      \"associated_keys\": [\n        {\n          \"account_hash\": \"account-hash-0ea7998b2822afe5b62b08a21d54c941ad791279b089f3f7ede0d72b477eca34\",\n          \"weight\": 1\n        }\n      ],\n      \"main_purse\": \"uref-974019c976b5f26412ce486158d2431967af35d91387dae8cbcd43c20fce6452-007\",\n      \"named_keys\": []\n    },\n    \"api_version\": \"1.4.15\",\n    \"merkle_proof\": \"[29712 hex chars]\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Entrypoint Payment Responsibility Options with JSON Schema - JSON\nDESCRIPTION: This JSON Schema snippet defines an enumeration for specifying which party is responsible for paying invocation and execution costs of a smart contract entrypoint. It provides three options—\\\"Caller\\\", \\\"SelfOnly\\\", and \\\"SelfOnward\\\"—each with specific descriptions about their payment scope. The schema uses the \\\"oneOf\\\" and \\\"enum\\\" constructs and is intended for validation or documentation of contract APIs, with no external dependencies required.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/condor/jsonrpc-comp/rpc-2.0/schema/EntryPointPayment.json.md#2025-04-22_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\\n    \\\"description\\\": \\\"An enum specifying who pays for the invocation and execution of the entrypoint.\\\",\\n    \\\"oneOf\\\": [\\n        {\\n            \\\"description\\\": \\\"The caller must cover cost\\\",\\n            \\\"type\\\": \\\"string\\\",\\n            \\\"enum\\\": [\\n                \\\"Caller\\\"\\n            ]\\n        },\\n        {\\n            \\\"description\\\": \\\"Will cover cost to execute self but not cost of any subsequent invoked contracts\\\",\\n            \\\"type\\\": \\\"string\\\",\\n            \\\"enum\\\": [\\n                \\\"SelfOnly\\\"\\n            ]\\n        },\\n        {\\n            \\\"description\\\": \\\"will cover cost to execute self and the cost of any subsequent invoked contracts\\\",\\n            \\\"type\\\": \\\"string\\\",\\n            \\\"enum\\\": [\\n                \\\"SelfOnward\\\"\\n            ]\\n        }\\n    ]\\n} \n```\n\n----------------------------------------\n\nTITLE: Example of Custom Validated JSON Schema for CEP-78 - JSON\nDESCRIPTION: This snippet provides a JSON schema definition for custom-validated NFT metadata, as used when the NFTMetadataKind is set to CustomValidated. It includes a top-level 'properties' object that specifies constraints, description, and required fields for each metadata property. This schema must be passed as a string to the 'json_schema' runtime argument during contract installation.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/docs/resources/tokens/cep78/modalities.md#2025-04-22_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n{\\n  \\\"properties\\\": {\\n    \\\"deity_name\\\": {\\n      \\\"name\\\": \\\"deity_name\\\",\\n      \\\"description\\\": \\\"The name of deity from a particular pantheon.\\\",\\n      \\\"required\\\": true\\n    },\\n    \\\"mythology\\\": {\\n      \\\"name\\\": \\\"mythology\\\",\\n      \\\"description\\\": \\\"The mythology the deity belongs to.\\\",\\n      \\\"required\\\": true\\n    }\\n  }\\n}\n```\n\n----------------------------------------\n\nTITLE: Sample put-txn Result in JSON\nDESCRIPTION: This JSON snippet shows a sample result of a successful put-txn command execution. It includes the API version and the transaction hash, which is crucial for verifying the transaction's execution results.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/versioned_docs/version-2.0.0/developers/cli/sending-transactions.md#2025-04-22_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"jsonrpc\": \"2.0\",\n  \"id\": 1294011212530641270,\n  \"result\": {\n    \"api_version\": \"2.0.0\",\n    \"transaction_hash\": {\n      \"Version1\": \"efad4a969064b5f8189ea4d6dd2fba2926d01d583a35178c07d7b827de16789e\"\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Disabling Alice's Account using Casper Client (Shell)\nDESCRIPTION: This command disables Alice's account by setting high action thresholds, preventing successful deploy executions.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/versioned_docs/version-1.5.X/operators/setup-network/create-private.md#2025-04-22_snippet_18\n\nLANGUAGE: sh\nCODE:\n```\ncasper-client \\\n  put-deploy \\\n  -n $NODE_ADDR \\\n  --chain-name $CHAIN_NAME \\\n  --secret-key admin/secret_key.pem \\\n  --session-account=alice/public_key_hex\n  --session-path set_action_thresholds.wasm \\\n  --payment-amount=2500000000 \\\n  --session-arg \"key_management_threshold:u8='255'\" \\\n  --session-arg \"deploy_threshold:u8='255'\"\n```\n\n----------------------------------------\n\nTITLE: Defining Transaction Scheduling Mode Enum\nDESCRIPTION: Specifies scheduling options for transactions, allowing for 'Standard' execution, or future-scheduled using 'FutureEra' or 'FutureTimestamp'.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/condor/jsonrpc-comp/rpc-2.0/schema/components.json.md#2025-04-22_snippet_24\n\nLANGUAGE: JSON\nCODE:\n```\n{\n    \"description\": \"Scheduling mode of a Transaction.\",\n    \"oneOf\": [\n        {\n            \"description\": \"No special scheduling applied.\",\n            \"type\": \"string\",\n            \"enum\": [\n                \"Standard\"\n            ]\n        },\n        {\n            \"description\": \"Execution should be scheduled for the specified era.\",\n            \"type\": \"object\",\n            \"required\": [\n                \"FutureEra\"\n            ],\n            \"properties\": {\n                \"FutureEra\": {\n                    \"$ref\": \"#/components/schemas/EraId\"\n                }\n            },\n            \"additionalProperties\": false\n        },\n        {\n            \"description\": \"Execution should be scheduled for the specified timestamp or later.\",\n            \"type\": \"object\",\n            \"required\": [\n                \"FutureTimestamp\"\n            ],\n            \"properties\": {\n                \"FutureTimestamp\": {\n                    \"$ref\": \"#/components/schemas/Timestamp\"\n                }\n            },\n            \"additionalProperties\": false\n        }\n    ]\n}\n```\n\n----------------------------------------\n\nTITLE: Querying Global State Root Hash\nDESCRIPTION: Command to query the network state using the casper-client CLI tool. Requires connection to a node's RPC endpoint.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/versioned_docs/version-1.5.X/resources/tokens/cep78/using-casper-client/full-installation-tutorial.md#2025-04-22_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\ncasper-client get-state-root-hash --node-address http://localhost:11101/rpc/\n```\n\n----------------------------------------\n\nTITLE: Simplified Global State Query Command\nDESCRIPTION: A simplified version of the global state query command without comments, showing the essential syntax for retrieving CEP-18 token balance results from global state.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/versioned_docs/version-1.5.X/resources/tokens/cep18/transfer.md#2025-04-22_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\ncasper-client query-global-state -n http://<NODE IP>:<PORT> \\\n--key uref-a46ad389b53715d9991a513c8ca48e1502facc4c563c0700a31e830c4cb8a7d4-007 \\\n--state-root-hash 3aecd0e4b6ec29ee7c1eed701132eabfe6e66a1e0f1595c9c65bfed447e474f7\n```\n\n----------------------------------------\n\nTITLE: Generating Validator Keys Using casper-client - Bash\nDESCRIPTION: This command uses casper-client's keygen subcommand to generate a validator keypair in /etc/casper/validator_keys, run as the casper user. Dependencies: the casper-client binary must be installed; the target directory must be writable. The output will be the public/private key pair needed for validator operations.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/docs/operators/setup/install-node.md#2025-04-22_snippet_9\n\nLANGUAGE: bash\nCODE:\n```\nsudo -u casper casper-client keygen /etc/casper/validator_keys\n```\n\n----------------------------------------\n\nTITLE: Defining DeployInfo Object\nDESCRIPTION: This schema defines information related to a deployment. It includes properties like `deploy_hash`, `from`, `gas`, `source`, and `transfers`, with references to other schemas like `DeployHash`, `AccountHash`, `URef`, and `U512`.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/condor/jsonrpc-comp/rpc-1.5/schema/components.json.md#2025-04-22_snippet_26\n\nLANGUAGE: JSON\nCODE:\n```\n{\\n    \\\"description\\\": \\\"Information relating to the given Deploy.\\\",\\n    \\\"type\\\": \\\"object\\\",\\n    \\\"required\\\": [\\n        \\\"deploy_hash\\\",\\n        \\\"from\\\",\\n        \\\"gas\\\",\\n        \\\"source\\\",\\n        \\\"transfers\\\"\\n    ],\\n    \\\"properties\\\": {\\n        \\\"deploy_hash\\\": {\\n            \\\"description\\\": \\\"The relevant Deploy.\\\",\\n            \\\"allOf\\\": [\\n                {\\n                    \\\"$ref\\\": \\\"#/components/schemas/DeployHash\\\"\\n                }\\n            ]\\n        },\\n        \\\"transfers\\\": {\\n            \\\"description\\\": \\\"Transfers performed by the Deploy.\\\",\\n            \\\"type\\\": \\\"array\\\",\\n            \\\"items\\\": {\\n                \\\"$ref\\\": \\\"#/components/schemas/TransferAddr\\\"\\n            }\\n        },\\n        \\\"from\\\": {\\n            \\\"description\\\": \\\"Account identifier of the creator of the Deploy.\\\",\\n            \\\"allOf\\\": [\\n                {\\n                    \\\"$ref\\\": \\\"#/components/schemas/AccountHash\\\"\\n                }\\n            ]\\n        },\\n        \\\"source\\\": {\\n            \\\"description\\\": \\\"Source purse used for payment of the Deploy.\\\",\\n            \\\"allOf\\\": [\\n                {\\n                    \\\"$ref\\\": \\\"#/components/schemas/URef\\\"\\n                }\\n            ]\\n        },\\n        \\\"gas\\\": {\\n            \\\"description\\\": \\\"Gas cost of executing the Deploy.\\\",\\n            \\\"allOf\\\": [\\n                {\\n                    \\\"$ref\\\": \\\"#/components/schemas/U512\\\"\\n                }\\n            ]\\n        }\\n    },\\n    \\\"additionalProperties\\\": false\\n}\n```\n\n----------------------------------------\n\nTITLE: Installing cargo-casper\nDESCRIPTION: Install cargo-casper, the command-line tool for creating Wasm smart contracts for Casper networks.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/versioned_docs/version-2.0.0/developers/prerequisites.md#2025-04-22_snippet_11\n\nLANGUAGE: bash\nCODE:\n```\ncargo install cargo-casper\n```\n\n----------------------------------------\n\nTITLE: Defining JSON Schema for Topics\nDESCRIPTION: This JSON schema defines the structure for topic-related data objects. It requires the 'topic_name' and 'topic_name_hash' properties. 'topic_name' is defined as a string, while 'topic_name_hash' references another schema, 'TopicNameHash', to enforce complex constraints or reuse across multiple definitions.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/condor/jsonrpc-comp/rpc-2.0/schema/MessageTopic.json.md#2025-04-22_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"type\": \"object\",\n    \"required\": [\n        \"topic_name\",\n        \"topic_name_hash\"\n    ],\n    \"properties\": {\n        \"topic_name\": {\n            \"type\": \"string\"\n        },\n        \"topic_name_hash\": {\n            \"allOf\": [\n                {\n                    \"$ref\": \"#/components/schemas/TopicNameHash\"\n                }\n            ]\n        }\n    }\n} \n```\n\n----------------------------------------\n\nTITLE: Global State Query Response in Casper Network\nDESCRIPTION: JSON response from a global state query showing the CLValue of a contract's \"name\" parameter. The response includes the API version, merkle proof (truncated), and the stored value which is parsed as \"CasperTest\".\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/versioned_docs/version-2.0.0/resources/tokens/cep18/full-tutorial.md#2025-04-22_snippet_17\n\nLANGUAGE: json\nCODE:\n```\n{\n \"id\": -3650676146668320186,\n \"jsonrpc\": \"2.0\",\n \"result\": {\n  \"api_version\": \"1.4.3\",\n  \"block_header\": null,\n  \"merkle_proof\": \"[80252 hex chars]\",\n  \"stored_value\": {\n   \"CLValue\": {\n    \"bytes\": \"0A00000043617370657254657374\",\n    \"cl_type\": \"String\",\n    \"parsed\": \"CasperTest\"\n   }\n  }\n }\n}\n```\n\n----------------------------------------\n\nTITLE: Getting Final Updated State Root Hash\nDESCRIPTION: This command retrieves the latest state root hash after deploying and executing the `counter-call.wasm` session code. This is necessary because the session code interacted with the contract, modifying its state.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/docs/resources/beginner/counter-testnet/walkthrough.md#2025-04-22_snippet_16\n\nLANGUAGE: bash\nCODE:\n```\ncasper-client get-state-root-hash --node-address http://[NODE_IP]:7777\n```\n\n----------------------------------------\n\nTITLE: Defining Contract Schema with JSON Schema\nDESCRIPTION: This JSON snippet defines the structure of a contract object in the Casper network, specifying properties such as contract_package_hash, contract_wasm_hash, named_keys, entry_points, and protocol_version. Each property is linked to a specific component schema reference, mandating certain characteristics. This schema is essential for ensuring that contract interactions conform to expected formats during execution.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/condor/jsonrpc-comp/rpc-2.0/schema/Contract.json.md#2025-04-22_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"description\": \"Methods and type signatures supported by a contract.\",\n    \"type\": \"object\",\n    \"required\": [\n        \"contract_package_hash\",\n        \"contract_wasm_hash\",\n        \"entry_points\",\n        \"named_keys\",\n        \"protocol_version\"\n    ],\n    \"properties\": {\n        \"contract_package_hash\": {\n            \"$ref\": \"#/components/schemas/ContractPackageHash\"\n        },\n        \"contract_wasm_hash\": {\n            \"$ref\": \"#/components/schemas/ContractWasmHash\"\n        },\n        \"named_keys\": {\n            \"$ref\": \"#/components/schemas/NamedKeys\"\n        },\n        \"entry_points\": {\n            \"$ref\": \"#/components/schemas/Array_of_NamedEntryPoint\"\n        },\n        \"protocol_version\": {\n            \"$ref\": \"#/components/schemas/ProtocolVersion\"\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Block Header JSON Schema\nDESCRIPTION: Defines the structure for blockchain block headers including parent hash, state root hash, body hash and other block metadata fields.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/condor/jsonrpc-comp/rpc-1.5/schema.json.md#2025-04-22_snippet_60\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"description\": \"JSON representation of a block header.\",\n  \"type\": \"object\",\n  \"required\": [\n    \"accumulated_seed\",\n    \"body_hash\",\n    \"era_id\", \n    \"height\",\n    \"parent_hash\",\n    \"protocol_version\",\n    \"random_bit\",\n    \"state_root_hash\",\n    \"timestamp\"\n  ],\n  \"properties\": {\n    \"parent_hash\": {\n      \"description\": \"The parent hash.\",\n      \"allOf\": [\n        {\n          \"$ref\": \"#/components/schemas/BlockHash\"\n        }\n      ]\n    },\n    \"state_root_hash\": {\n      \"description\": \"The state root hash.\",\n      \"allOf\": [\n        {\n          \"$ref\": \"#/components/schemas/Digest\"\n        }\n      ]\n    },\n    \"body_hash\": {\n      \"description\": \"The body hash.\",\n      \"allOf\": [\n        {\n          \"$ref\": \"#/components/schemas/Digest\"\n        }\n      ]\n    },\n    \"random_bit\": {\n      \"description\": \"Randomness bit.\",\n      \"type\": \"boolean\"\n    },\n    \"accumulated_seed\": {\n      \"description\": \"Accumulated seed.\",\n      \"allOf\": []\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Installing casper-cep78-js-client Library Using npm - JavaScript\nDESCRIPTION: Demonstrates how to install the casper-cep78-js-client library in a Node.js TypeScript/JavaScript environment using npm. This prepares your project for all subsequent CEP-78-related development. The npm package manager must be available in your environment and the install command should be executed from your project root.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/docs/resources/tokens/cep78/js-tutorial.md#2025-04-22_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nnpm install casper-cep78-js-client\n```\n\n----------------------------------------\n\nTITLE: Querying Specific Contract Details by Name\nDESCRIPTION: This command queries the global state for a specific named key ('counter') associated with an account. It uses the `-q` (query path) argument to narrow down the query results to the details stored under the 'counter' named key, typically the contract's URef or hash.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/docs/resources/beginner/counter-testnet/walkthrough.md#2025-04-22_snippet_9\n\nLANGUAGE: bash\nCODE:\n```\ncasper-client query-global-state --node-address http://[NODE_IP]:7777 \\\n    --state-root-hash [STATE_ROOT_HASH] \\\n    --key [ACCOUNT_HASH] -q \"counter\"\n```\n\n----------------------------------------\n\nTITLE: Approval and Block Structures\nDESCRIPTION: Defines structures for deployment approvals, signatures, and block-related data types including headers and bodies.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/versioned_docs/version-1.5.X/concepts/design/networking-protocol.md#2025-04-22_snippet_7\n\nLANGUAGE: rust\nCODE:\n```\nstruct Approval {\n    signer: PublicKey,\n    signature: Signature,\n}\n\nenum Signature {\n    System,\n    Ed25519(Vec<u8>),\n    Secp256k1(Vec<u8>),\n}\n\nstruct FinalizedApprovalsWithId {\n    id: DeployHash,\n    approvals: FinalizedApprovals,\n}\n\nstruct FinalizedApprovals(BTreeSet<Approval>);\n\nstruct Block {\n    hash: BlockHash,\n    header: BlockHeader,\n    body: BlockBody,\n}\n\nstruct BlockHash(Digest);\n\nstruct BlockHeader {\n    parent_hash: BlockHash,\n    state_root_hash: Digest,\n    body_hash: Digest,\n    random_bit: bool,\n    accumulated_seed: Digest,\n    era_end: Option<EraEnd>,\n    timestamp: u64,\n    era_id: u64,\n    height: u64,\n    protocol_version: ProtocolVersion,\n}\n```\n\n----------------------------------------\n\nTITLE: Specify Nightly Rust Toolchain\nDESCRIPTION: This snippet shows how to specify the nightly version of Rust for the Rust toolchain to be used in the project by setting the content of the rust-toolchain file.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/versioned_docs/version-1.5.X/developers/writing-onchain-code/getting-started.md#2025-04-22_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nnightly-2022-08-03\n```\n\n----------------------------------------\n\nTITLE: Response for info_get_chainspec\nDESCRIPTION: Example response from the info_get_chainspec RPC method, containing API version and chainspec bytes. The full byte data is truncated in this example.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/versioned_docs/version-1.5.X/developers/json-rpc/json-rpc-informational.md#2025-04-22_snippet_9\n\nLANGUAGE: bash\nCODE:\n```\n{\n  \"jsonrpc\": \"2.0\",\n  \"result\": {\n    \"api_version\": \"1.5.0\",\n    \"chainspec_bytes\": {\n      \"chainspec_bytes\": \"[22040 hex chars]\",\n      \"maybe_genesis_accounts_bytes\": null,\n      \"maybe_global_state_bytes\": null\n    }\n  },\n  \"id\": 5510244237763930243\n}\n```\n\n----------------------------------------\n\nTITLE: Handling Events in JavaScript\nDESCRIPTION: This JavaScript code demonstrates how to handle events from a Casper node by checking if the account that submitted a deploy matches a specific public key. The eventHandler function is typically passed as a callback to an event subscription.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/versioned_docs/version-1.5.X/developers/dapps/monitor-and-consume-events.md#2025-04-22_snippet_12\n\nLANGUAGE: javascript\nCODE:\n```\nconst eventHandler = (event) => {\n  if (event.body.DeployAccepted.header.account == \"012481699f9231e36ecf002675cd7186b48e6a735d10ec1b30f587ca716937752c\") {\n    // Perform an action\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining the state_get_item RPC Method Schema and Example in JSON\nDESCRIPTION: This JSON object defines the structure for the `state_get_item` RPC method within the Casper network's API specification. It includes a summary indicating the method is deprecated, lists required parameters (`state_root_hash`, `key`) and an optional parameter (`path`), defines the result schema with fields like `api_version`, `stored_value`, and `merkle_proof`, and provides a complete example request and response.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/condor/jsonrpc-comp/rpc-1.5/state_get_item.json.md#2025-04-22_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"name\": \"state_get_item\",\n  \"summary\": \"returns a stored value from the network. This RPC is deprecated, use `query_global_state` instead.\",\n  \"params\": [\n    {\n      \"name\": \"state_root_hash\",\n      \"schema\": {\n        \"description\": \"Hash of the state root.\",\n        \"$ref\": \"#/components/schemas/Digest\"\n      },\n      \"required\": true\n    },\n    {\n      \"name\": \"key\",\n      \"schema\": {\n        \"description\": \"`casper_types::Key` as formatted string.\",\n        \"type\": \"string\"\n      },\n      \"required\": true\n    },\n    {\n      \"name\": \"path\",\n      \"schema\": {\n        \"description\": \"The path components starting from the key as base.\",\n        \"default\": [],\n        \"type\": \"array\",\n        \"items\": {\n          \"type\": \"string\"\n        }\n      },\n      \"required\": false\n    }\n  ],\n  \"result\": {\n    \"name\": \"state_get_item_result\",\n    \"schema\": {\n      \"description\": \"Result for \\\"state_get_item\\\" RPC response.\",\n      \"type\": \"object\",\n      \"required\": [\n        \"api_version\",\n        \"merkle_proof\",\n        \"stored_value\"\n      ],\n      \"properties\": {\n        \"api_version\": {\n          \"description\": \"The RPC API version.\",\n          \"type\": \"string\"\n        },\n        \"stored_value\": {\n          \"description\": \"The stored value.\",\n          \"$ref\": \"#/components/schemas/StoredValue\"\n        },\n        \"merkle_proof\": {\n          \"description\": \"The Merkle proof.\",\n          \"type\": \"string\"\n        }\n      },\n      \"additionalProperties\": false\n    }\n  },\n  \"examples\": [\n    {\n      \"name\": \"state_get_item_example\",\n      \"params\": [\n        {\n          \"name\": \"state_root_hash\",\n          \"value\": \"0808080808080808080808080808080808080808080808080808080808080808\"\n        },\n        {\n          \"name\": \"key\",\n          \"value\": \"deploy-af684263911154d26fa05be9963171802801a0b6aff8f199b7391eacb8edc9e1\"\n        },\n        {\n          \"name\": \"path\",\n          \"value\": [\n            \"inner\"\n          ]\n        }\n      ],\n      \"result\": {\n        \"name\": \"state_get_item_example_result\",\n        \"value\": {\n          \"api_version\": \"1.5.6\",\n          \"stored_value\": {\n            \"CLValue\": {\n              \"cl_type\": \"U64\",\n              \"bytes\": \"0100000000000000\",\n              \"parsed\": 1\n            }\n          },\n          \"merkle_proof\": \"01000000006ef2e0949ac76e55812421f755abe129b6244fe7168b77f47a72536147614625016ef2e0949ac76e55812421f755abe129b6244fe7168b77f47a72536147614625000000003529cde5c621f857f75f3810611eb4af3f998caaa9d4a3413cf799f99c67db0307010000006ef2e0949ac76e55812421f755abe129b6244fe7168b77f47a7253614761462501010102000000006e06000000000074769d28aac597a36a03a932d4b43e4f10bf0403ee5c41dd035102553f5773631200b9e173e8f05361b681513c14e25e3138639eb03232581db7557c9e8dbbc83ce94500226a9a7fe4f2b7b88d5103a4fc7400f02bf89c860c9ccdd56951a2afe9be0e0267006d820fb5676eb2960e15722f7725f3f8f41030078f8b2e44bf0dc03f71b176d6e800dc5ae9805068c5be6da1a90b2528ee85db0609cc0fb4bd60bbd559f497a98b67f500e1e3e846592f4918234647fca39830b7e1e6ad6f5b7a99b39af823d82ba1873d000003000000010186ff500f287e9b53f823ae1582b1fa429dfede28015125fd233a31ca04d5012002015cc42669a55467a1fdf49750772bfc1aed59b9b085558eb81510e9b015a7c83b0301e3cf4a34b1db6bfa58808b686cb8fe21ebe0c1bcbcee522649d2b135fe510fe3\"\n        }\n      }\n    }\n  ]\n}\n\n```\n\n----------------------------------------\n\nTITLE: Sample JSON-RPC Request for Target Purse Balance (JSON)\nDESCRIPTION: This JSON object defines a JSON-RPC payload for requesting the balance of a target purse (main purse under target account hash) from a Casper node. Fields include state root hash and the account hash as purse identifier, and a corresponding id. It should be used as an HTTP request payload to Casper node endpoints conforming to the JSON-RPC 2.0 standard.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/docs/developers/cli/transfers/verify-transfer.md#2025-04-22_snippet_10\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"jsonrpc\": \"2.0\",\n  \"method\": \"query_balance\",\n  \"params\": {\n    \"state_identifier\": {\n      \"StateRootHash\": \"fdb1474d441ec0fcbf2e088f1630dbf98d3bcf7f7a7fe298303797f35b8cb4e1\"\n    },\n    \"purse_identifier\": {\n      \"main_purse_under_account_hash\": \"account-hash-1ed5a1c39bea93c105f2d22c965a84b205b36734a377d05dbb103b6bfaa595a7\"\n    }\n  },\n  \"id\": 7\n}\n```\n\n----------------------------------------\n\nTITLE: Querying Deploy Details\nDESCRIPTION: Retrieve details about a specific deploy using its hash.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/versioned_docs/version-2.0.0/resources/beginner/counter/walkthrough.md#2025-04-22_snippet_10\n\nLANGUAGE: bash\nCODE:\n```\ncasper-client query-global-state --node-address http://localhost:11101 \\\n    --state-root-hash [STATE_ROOT_HASH] --key deploy-[DEPLOY_HASH]\n```\n\n----------------------------------------\n\nTITLE: Undelegating Stake via Casper Client CLI (JSON)\nDESCRIPTION: This command template supports the withdrawal of previously delegated CSPR from a validator using the 'undelegate' transaction. Dependencies include the Casper client and required key files or initiator address. Input parameters are the delegator and validator public keys, undelegation amount, gas price, and authentication credentials; the transaction fails if any data is invalid or permissions are insufficient.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/versioned_docs/version-2.0.0/concepts/transactions.md#2025-04-22_snippet_3\n\nLANGUAGE: json\nCODE:\n```\ncasper-client put-txn undelegate\n/// The delegator's public key.\n  --delegator <STRING>\n/// The validator's public key.\n  --validator <STRING>\n/// The amount in motes to undelegate from this validator.\n  --transaction-amount <INTEGER>\n/// The maximum gas price that the user is willing to pay for this transaction. \n  --gas-price-tolerance <INTEGER>\n/// The path to the local secret key file, or the [`initiator address`](../developers/json-rpc/types_chain.md#initiatoraddr) sending the transaction.\n  <--secret-key <PATH>|--initiator-address <HEX STRING>>\n\n```\n\n----------------------------------------\n\nTITLE: Pulling Specific Casper Node Version (Bash)\nDESCRIPTION: Executes the `pull_casper_node_version.sh` script as the `casper` user to download and install a specific version of the `casper-node`. The version (e.g., `1_0_2`) is specified as an argument using underscores.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/versioned_docs/version-1.5.X/operators/setup/basic-node-configuration.md#2025-04-22_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nsudo -u casper /etc/casper/pull_casper_node_version.sh 1_0_2\n```\n\n----------------------------------------\n\nTITLE: Defining Contract Entry Point in Casper Network\nDESCRIPTION: Defines a public 'pay' entry point for a Casper Network smart contract. The entry point accepts a U512 amount parameter, returns Unit, has public access, and uses the 'Caller' payment strategy.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/versioned_docs/version-2.0.0/developers/json-rpc/json-rpc-transactional.md#2025-04-22_snippet_22\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"key\": \"entry-point-v1-entity-contract-eb1c971063155d461059292e91cfe2212d45b79a49294b8d90bdae18cda6e59e-0c5d85bbfb4ae1310aff9ce7b0699549e6d5d5094eba44c5fe2b1e278a673166\",\n    \"kind\": {\n        \"Write\": {\n            \"EntryPoint\": {\n                \"V1CasperVm\": {\n                    \"name\": \"pay\",\n                    \"args\": [\n                        {\n                            \"name\": \"amount\",\n                            \"cl_type\": \"U512\"\n                        }\n                    ],\n                    \"ret\": \"Unit\",\n                    \"access\": \"Public\",\n                    \"entry_point_type\": \"Called\",\n                    \"entry_point_payment\": \"Caller\"\n                }\n            }\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Installing Casper SDK Dependencies\nDESCRIPTION: Installation commands for Casper Network SDKs across different languages using package managers\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/docs/developers/dapps/sdk/client-library-usage.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm install casper-js-sdk\n```\n\nLANGUAGE: bash\nCODE:\n```\nyarn install casper-js-sdk\n```\n\nLANGUAGE: bash\nCODE:\n```\npip install pycspr\n```\n\n----------------------------------------\n\nTITLE: Staging Casper Node Protocol Upgrade on Mainnet (Bash)\nDESCRIPTION: This command initiates the staging process for a protocol upgrade on a Casper Mainnet node. It uses the `node_util.py` script with the `stage_protocols` command and the `casper.conf` configuration file. The command should be executed as the `casper` user.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/versioned_docs/version-1.5.X/operators/setup/upgrade.md#2025-04-22_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nsudo -u casper /etc/casper/node_util.py stage_protocols casper.conf\n```\n\n----------------------------------------\n\nTITLE: Replaying Casper Node Event Stream from Specific ID using cURL (Bash)\nDESCRIPTION: Shows how to use `curl` with the `start_from` query parameter to replay events from a specific event ID (`ID`) onwards from a Casper node's event stream endpoint. Requires the node's IP address (`HOST`) and the event stream port (`PORT`). Replays all cached events if the ID is 0 or invalid.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/docs/operators/setup/node-events.md#2025-04-22_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ncurl -sN http://HOST:PORT/events?start_from=ID\n```\n\n----------------------------------------\n\nTITLE: Installing Casper SDK via .NET CLI\nDESCRIPTION: Command to install the Casper Network SDK using the dotnet CLI tool, compatible with Windows, Mac, and Linux\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/docs/developers/dapps/sdk/csharp-sdk.md#2025-04-22_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\ndotnet add package Casper.Network.SDK\n```\n\n----------------------------------------\n\nTITLE: Viewing Contract Message Topics Structure in JSON\nDESCRIPTION: Illustrates the JSON structure of the `message_topics` field found within a Casper contract's data in the global state. This field contains an array of objects, each mapping a human-readable `topic_name` to its unique `topic_name_hash`.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/docs/developers/writing-onchain-code/emitting-contract-events.md#2025-04-22_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n\"message_topics\": [\n    {\n    \"topic_name\": \"events\",\n    \"topic_name_hash\": \"topic-name-5721a6d9d7a9afe5dfdb35276fb823bed0f825350e4d865a5ec0110c380de4e1\"\n    }\n]\n```\n\n----------------------------------------\n\nTITLE: Serializing NamedKeyAddr Structure\nDESCRIPTION: Defines `NamedKeyAddr`, representing the address of a NamedKey. It serializes as an `EntityAddr` followed by a `u8` indicating the length of the key's name, which is then followed by the 32-byte representation of the name string.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/versioned_docs/version-2.0.0/concepts/serialization/types.md#2025-04-22_snippet_31\n\nLANGUAGE: text\nCODE:\n```\nA NamedKey address, serialized as an [`EntityAddr`](#entity-addr) followed by a [`u8`](./primitives.md#clvalue-numeric) describing the length of a string and the 32-byte representation of the string itself.\n```\n\n----------------------------------------\n\nTITLE: Defining Account Info Query Endpoint - JSON\nDESCRIPTION: This snippet defines the 'state_get_account_info' JSON-RPC endpoint, specifying parameters such as 'account_identifier' (public key) and optional 'block_identifier', along with the shape of the expected result, including the API version, account object, and Merkle proof. It is used within Casper node client/server implementations or SDKs to specify how to request account details and what to expect in response. Dependencies may include conformance to Casper OpenRPC schemas, and usage assumes client familiarity with Casper serialization and account concepts; requests expect valid public keys and, optionally, a block hash or height.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/condor/jsonrpc-comp/rpc-1.5/state_get_account_info.json.md#2025-04-22_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"name\": \"state_get_account_info\",\n  \"summary\": \"returns an Account from the network\",\n  \"params\": [\n    {\n      \"name\": \"account_identifier\",\n      \"schema\": {\n        \"description\": \"The public key of the Account.\",\n        \"$ref\": \"#/components/schemas/AccountIdentifier\"\n      },\n      \"required\": true\n    },\n    {\n      \"name\": \"block_identifier\",\n      \"schema\": {\n        \"description\": \"The block identifier.\",\n        \"anyOf\": [\n          {\n            \"$ref\": \"#/components/schemas/BlockIdentifier\"\n          },\n          {\n            \"type\": \"null\"\n          }\n        ]\n      },\n      \"required\": false\n    }\n  ],\n  \"result\": {\n    \"name\": \"state_get_account_info_result\",\n    \"schema\": {\n      \"description\": \"Result for \\\"state_get_account_info\\\" RPC response.\",\n      \"type\": \"object\",\n      \"required\": [\n        \"account\",\n        \"api_version\",\n        \"merkle_proof\"\n      ],\n      \"properties\": {\n        \"api_version\": {\n          \"description\": \"The RPC API version.\",\n          \"type\": \"string\"\n        },\n        \"account\": {\n          \"description\": \"The account.\",\n          \"$ref\": \"#/components/schemas/Account\"\n        },\n        \"merkle_proof\": {\n          \"description\": \"The Merkle proof.\",\n          \"type\": \"string\"\n        }\n      },\n      \"additionalProperties\": false\n    }\n  },\n  \"examples\": [\n    {\n      \"name\": \"state_get_account_info_example\",\n      \"params\": [\n        {\n          \"name\": \"account_identifier\",\n          \"value\": \"013b6a27bcceb6a42d62a3a8d02a6f0d73653215771de243a63ac048a18b59da29\"\n        },\n        {\n          \"name\": \"block_identifier\",\n          \"value\": {\n            \"Hash\": \"13c2d7a68ecdd4b74bf4393c88915c836c863fc4bf11d7f2bd930a1bbccacdcb\"\n          }\n        }\n      ],\n      \"result\": {\n        \"name\": \"state_get_account_info_example_result\",\n        \"value\": {\n          \"api_version\": \"1.5.6\",\n          \"account\": {\n            \"account_hash\": \"account-hash-e94daaff79c2ab8d9c31d9c3058d7d0a0dd31204a5638dc1451fa67b2e3fb88c\",\n            \"named_keys\": [],\n            \"main_purse\": \"uref-09480c3248ef76b603d386f3f4f8a5f87f597d4eaffd475433f861af187ab5db-007\",\n            \"associated_keys\": [\n              {\n                \"account_hash\": \"account-hash-e94daaff79c2ab8d9c31d9c3058d7d0a0dd31204a5638dc1451fa67b2e3fb88c\",\n                \"weight\": 1\n              }\n            ],\n            \"action_thresholds\": {\n              \"deployment\": 1,\n              \"key_management\": 1\n            }\n          },\n          \"merkle_proof\": \"01000000006ef2e0949ac76e55812421f755abe129b6244fe7168b77f47a72536147614625016ef2e0949ac76e55812421f755abe129b6244fe7168b77f47a72536147614625000000003529cde5c621f857f75f3810611eb4af3f998caaa9d4a3413cf799f99c67db0307010000006ef2e0949ac76e55812421f755abe129b6244fe7168b77f47a7253614761462501010102000000006e06000000000074769d28aac597a36a03a932d4b43e4f10bf0403ee5c41dd035102553f5773631200b9e173e8f05361b681513c14e25e3138639eb03232581db7557c9e8dbbc83ce94500226a9a7fe4f2b7b88d5103a4fc7400f02bf89c860c9ccdd56951a2afe9be0e0267006d820fb5676eb2960e15722f7725f3f8f41030078f8b2e44bf0dc03f71b176d6e800dc5ae9805068c5be6da1a90b2528ee85db0609cc0fb4bd60bbd559f497a98b67f500e1e3e846592f4918234647fca39830b7e1e6ad6f5b7a99b39af823d82ba1873d000003000000010186ff500f287e9b53f823ae1582b1fa429dfede28015125fd233a31ca04d5012002015cc42669a55467a1fdf49750772bfc1aed59b9b085558eb81510e9b015a7c83b0301e3cf4a34b1db6bfa58808b686cb8fe21ebe0c1bcbcee522649d2b135fe510fe3\"\n        }\n      }\n    }\n  ]\n}\n\n```\n\n----------------------------------------\n\nTITLE: SSH Login with Private Key in Bash\nDESCRIPTION: Command to log in to a remote server using SSH, specifying the private key and username. This replaces traditional password authentication and is used to access the server securely.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/docs/operators/setup/non-root-user.md#2025-04-22_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\nssh -i <your ssh private key> <username>@<server ip>\n```\n\n----------------------------------------\n\nTITLE: Retrieving Global State via Casper RPC (Bash/JSON)\nDESCRIPTION: Presents an example JSON response for the `query_global_state` RPC method. The result includes the `api_version`, the `block_header` (if queried using a `BlockHash`), the `merkle_proof` for the queried value, and the `stored_value` itself. In this example, the `stored_value` is an `Account` object containing details like the account hash, action thresholds, associated keys, main purse URef, and named keys.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/versioned_docs/version-1.5.X/developers/json-rpc/json-rpc-informational.md#2025-04-22_snippet_15\n\nLANGUAGE: bash\nCODE:\n```\n{\n  \"id\": 1,\n  \"jsonrpc\": \"2.0\",\n  \"result\": {\n    \"api_version\": \"1.4.13\",\n    \"block_header\": {\n      \"accumulated_seed\": \"ac979f51525cfd979b14aa7dc0737c5154eabe0db9280eceaa8dc8d2905b20d5\",\n      \"body_hash\": \"cd502c5393a3c8b66d6979ad7857507c9baf5a8ba16ba99c28378d3a970fff42\",\n      \"era_end\": {\n        \"era_report\": {\n          \"equivocators\": [\n            \"013b6a27bcceb6a42d62a3a8d02a6f0d73653215771de243a63ac048a18b59da29\"\n          ],\n          \"inactive_validators\": [\n            \"018139770ea87d175f56a35466c34c7ecccb8d8a91b4ee37a25df60f5b8fc9b394\"\n          ],\n          \"rewards\": [\n            {\n              \"amount\": 1000,\n              \"validator\": \"018a88e3dd7409f195fd52db2d3cba5d72ca6709bf1d94121bf3748801b40f6f5c\"\n            }\n          ]\n        },\n        \"next_era_validator_weights\": [\n          {\n            \"validator\": \"016e7a1cdd29b0b78fd13af4c5598feff4ef2a97166e3ca6f2e4fbfccd80505bf1\",\n            \"weight\": \"456\"\n          },\n          {\n            \"validator\": \"018a875fff1eb38451577acd5afee405456568dd7c89e090863a0557bc7af49f17\",\n            \"weight\": \"789\"\n          },\n          {\n            \"validator\": \"01d9bf2148748a85c89da5aad8ee0b0fc2d105fd39d41a4c796536354f0ae2900c\",\n            \"weight\": \"123\"\n          }\n        ]\n      },\n      \"era_id\": 1,\n      \"height\": 10,\n      \"parent_hash\": \"0707070707070707070707070707070707070707070707070707070707070707\",\n      \"protocol_version\": \"1.0.0\",\n      \"random_bit\": true,\n      \"state_root_hash\": \"0808080808080808080808080808080808080808080808080808080808080808\",\n      \"timestamp\": \"2020-11-17T00:39:24.072Z\"\n    },\n    \"merkle_proof\": \"01000000006ef2e0949ac76e55812421f755abe129b6244fe7168b77f47a72536147614625016ef2e0949ac76e55812421f755abe129b6244fe7168b77f47a72536147614625000000003529cde5c621f857f75f3810611eb4af3f998caaa9d4a3413cf799f99c67db0307010000006ef2e0949ac76e55812421f755abe129b6244fe7168b77f47a7253614761462501010102000000006e06000000000074769d28aac597a36a03a932d4b43e4f10bf0403ee5c41dd035102553f5773631200b9e173e8f05361b681513c14e25e3138639eb03232581db7557c9e8dbbc83ce94500226a9a7fe4f2b7b88d5103a4fc7400f02bf89c860c9ccdd56951a2afe9be0e0267006d820fb5676eb2960e15722f7725f3f8f41030078f8b2e44bf0dc03f71b176d6e800dc5ae9805068c5be6da1a90b2528ee85db0609cc0fb4bd60bbd559f497a98b67f500e1e3e846592f4918234647fca39830b7e1e6ad6f5b7a99b39af823d82ba1873d000003000000010186ff500f287e9b53f823ae1582b1fa429dfede28015125fd233a31ca04d5012002015cc42669a55467a1fdf49750772bfc1aed59b9b085558eb81510e9b015a7c83b0301e3cf4a34b1db6bfa58808b686cb8fe21ebe0c1bcbcee522649d2b135fe510fe3\",\n    \"stored_value\": {\n      \"Account\": {\n        \"account_hash\": \"account-hash-e94daaff79c2ab8d9c31d9c3058d7d0a0dd31204a5638dc1451fa67b2e3fb88c\",\n        \"action_thresholds\": {\n          \"deployment\": 1,\n          \"key_management\": 1\n        },\n        \"associated_keys\": [\n          {\n            \"account_hash\": \"account-hash-e94daaff79c2ab8d9c31d9c3058d7d0a0dd31204a5638dc1451fa67b2e3fb88c\",\n            \"weight\": 1\n          }\n        ],\n        \"main_purse\": \"uref-09480c3248ef76b603d386f3f4f8a5f87f597d4eaffd475433f861af187ab5db-007\",\n        \"named_keys\": []\n      }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Deploy Serialization in JavaScript\nDESCRIPTION: Functions to serialize and deserialize deploy objects to and from JSON format for storage or transmission.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/docs/developers/dapps/sdk/script-sdk.md#2025-04-22_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nconst jsonFromDeploy = DeployUtil.deployToJson(signedDeploy);\n```\n\nLANGUAGE: javascript\nCODE:\n```\nconst deployFromJson = DeployUtil.deployFromJson(jsonFromDeploy);\n```\n\n----------------------------------------\n\nTITLE: Representing Account/Contract Details in JSON (Casper Network)\nDESCRIPTION: This JSON snippet illustrates the structure used to represent details of an account or contract within the Casper Network state. It includes fields like `main_purse`, `associated_keys` with weights, `action_thresholds` for different operations, `message_topics`, `named_keys` referencing stored data, and `entry_points` defining callable functions. A `merkle_proof` is also included, likely associated with the query that retrieved this data.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/condor/jsonrpc-comp/rpc-2.0/schema.json.md#2025-04-22_snippet_7\n\nLANGUAGE: json\nCODE:\n```\n                    \"main_purse\": \"uref-09480c3248ef76b603d386f3f4f8a5f87f597d4eaffd475433f861af187ab5db-007\",\n                    \"associated_keys\": [\n                      {\n                        \"account_hash\": \"account-hash-e94daaff79c2ab8d9c31d9c3058d7d0a0dd31204a5638dc1451fa67b2e3fb88c\",\n                        \"weight\": 1\n                      }\n                    ],\n                    \"action_thresholds\": {\n                      \"deployment\": 1,\n                      \"upgrade_management\": 1,\n                      \"key_management\": 1\n                    },\n                    \"message_topics\": [\n                      {\n                        \"topic_name\": \"topic\",\n                        \"topic_name_hash\": \"0000000000000000000000000000000000000000000000000000000000000000\"\n                      }\n                    ]\n                  },\n                  \"named_keys\": [\n                    {\n                      \"name\": \"key\",\n                      \"key\": \"hash-0000000000000000000000000000000000000000000000000000000000000000\"\n                    }\n                  ],\n                  \"entry_points\": [\n                    {\n                      \"V1CasperVm\": {\n                        \"name\": \"entry_point\",\n                        \"args\": [],\n                        \"ret\": \"Unit\",\n                        \"access\": \"Public\",\n                        \"entry_point_type\": \"Caller\",\n                        \"entry_point_payment\": \"Caller\"\n                      }\n                    }\n                  ]\n                }\n              },\n              \"merkle_proof\": \"01000000006ef2e0949ac76e55812421f755abe129b6244fe7168b77f47a72536147614625016ef2e0949ac76e55812421f755abe129b6244fe7168b77f47a72536147614625000000003529cde5c621f857f75f3810611eb4af3f998caaa9d4a3413cf799f99c67db0307010000006ef2e0949ac76e55812421f755abe129b6244fe7168b77f47a7253614761462501010102000000006e06000000000074769d28aac597a36a03a932d4b43e4f10bf0403ee5c41dd035102553f5773631200b9e173e8f05361b681513c14e25e3138639eb03232581db7557c9e8dbbc83ce94500226a9a7fe4f2b7b88d5103a4fc7400f02bf89c860c9ccdd56951a2afe9be0e0267006d820fb5676eb2960e15722f7725f3f8f41030078f8b2e44bf0dc03f71b176d6e800dc5ae9805068c5be6da1a90b2528ee85db0609cc0fb4bd60bbd559f497a98b67f500e1e3e846592f4918234647fca39830b7e1e6ad6f5b7a99b39af823d82ba1873d000003000000010186ff500f287e9b53f823ae1582b1fa429dfede28015125fd233a31ca04d5012002015cc42669a55467a1fdf49750772bfc1aed59b9b085558eb81510e9b015a7c83b0301e3cf4a34b1db6bfa58808b686cb8fe21ebe0c1bcbcee522649d2b135fe510fe3\"\n            }\n          }\n        }\n      ]\n    }\n```\n\n----------------------------------------\n\nTITLE: Block Body Schema Definition\nDESCRIPTION: JSON schema definition for BlockBodyV2 which represents the body portion of a block. Contains transaction mappings and rewarded signatures.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/condor/jsonrpc-comp/rpc-2.0/schema/components.json.md#2025-04-22_snippet_88\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"description\": \"The body portion of a block. Version 2.\",\n    \"type\": \"object\",\n    \"required\": [\n        \"rewarded_signatures\",\n        \"transactions\"\n    ],\n    \"properties\": {\n        \"transactions\": {\n            \"description\": \"Map of transactions mapping categories to a list of transaction hashes.\",\n            \"type\": \"object\",\n            \"additionalProperties\": {\n                \"type\": \"array\",\n                \"items\": {\n                    \"$ref\": \"#/components/schemas/TransactionHash\"\n                }\n            }\n        },\n        \"rewarded_signatures\": {\n            \"description\": \"List of identifiers for finality signatures for a particular past block.\",\n            \"allOf\": [\n                {\n                    \"$ref\": \"#/components/schemas/RewardedSignatures\"\n                }\n            ]\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Serializing Tuple CLValue in Casper Network\nDESCRIPTION: Tuples serialize as the concatenation of their serialized elements without including the number of elements since it's statically known in the type.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/versioned_docs/version-1.5.X/concepts/serialization-standard.md#2025-04-22_snippet_7\n\nLANGUAGE: text\nCODE:\n```\n    -   E.g. `(1u32, \"Hello, World!\", true)` serializes as `0x010000000d00000048656c6c6f2c20576f726c642101`\n```\n\n----------------------------------------\n\nTITLE: Incrementing Counter with Session Code\nDESCRIPTION: Use the counter-call session code to increment the counter value on the network.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/versioned_docs/version-2.0.0/resources/beginner/counter/walkthrough.md#2025-04-22_snippet_12\n\nLANGUAGE: bash\nCODE:\n```\ncasper-client put-deploy \\\n    --node-address http://localhost:11101 \\\n    --chain-name casper-net-1 \\\n    --secret-key [PATH_TO_YOUR_KEY]/secret_key.pem \\\n    --payment-amount [PAYMENT_AMOUNT_IN_MOTES] \\\n    --session-path ./counter/counter-call/target/wasm32-unknown-unknown/release/counter-call.wasm\n```\n\n----------------------------------------\n\nTITLE: Events Mode Configuration Entry Point for Casper Token Contract\nDESCRIPTION: Entry point definition for changing the events mode of the token contract. Takes a single U8 parameter to specify the new events mode and requires caller payment.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/docs/developers/cli/sending-transactions.md#2025-04-22_snippet_7\n\nLANGUAGE: JSON\nCODE:\n```\n{\n  \"key\": \"entry-point-v1-entity-contract-363996106630892a964565574fcdfd2435f21a17a3ad1ed2054146e7d8461640-bab8615f758ed79acb7dd7577b1a6c12d625d1a19592a2b1ded0dc352407e4d5\",\n  \"kind\": {\n    \"Write\": {\n      \"EntryPoint\": {\n        \"V1CasperVm\": {\n          \"name\": \"change_events_mode\",\n          \"args\": [\n            {\n              \"name\": \"events_mode\",\n              \"cl_type\": \"U8\"\n            }\n          ],\n          \"ret\": \"Unit\",\n          \"access\": \"Public\",\n          \"entry_point_type\": \"Called\",\n          \"entry_point_payment\": \"Caller\"\n        }\n      }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Importing Utility and Constant Modules for Caser Test Support in Rust\nDESCRIPTION: This Rust snippet showcases the use statements necessary for importing Casper test support utilities, core Casper types, and project-specific constants. It ensures all types required for constructing requests, handling runtime arguments, and referencing entrypoint constants and addresses are in scope. This setup is essential for cohesive test utilities and allows use of builder patterns and contract data throughout test files.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/docs/resources/tokens/cep18/tests.md#2025-04-22_snippet_3\n\nLANGUAGE: rust\nCODE:\n```\n// File https://github.com/casper-ecosystem/cep18/blob/dev/tests/src/utility/installer_request_builders.rs\n\nuse casper_engine_test_support::{\n    ExecuteRequestBuilder, InMemoryWasmTestBuilder, DEFAULT_ACCOUNT_ADDR,\n    MINIMUM_ACCOUNT_CREATION_BALANCE, PRODUCTION_RUN_GENESIS_REQUEST,\n};\nuse casper_execution_engine::core::engine_state::ExecuteRequest;\nuse casper_types::{\n    account::AccountHash, bytesrepr::FromBytes, runtime_args, system::mint, CLTyped, ContractHash, ContractPackageHash, Key, RuntimeArgs, U256,\n};\n\nuse crate::utility::constants::{\n    ALLOWANCE_AMOUNT_1, ALLOWANCE_AMOUNT_2, TOTAL_SUPPLY_KEY, TRANSFER_AMOUNT_1, TRANSFER_AMOUNT_2,\n};\n\nuse super::constants::{\n    ACCOUNT_1_ADDR, ACCOUNT_2_ADDR, ARG_ADDRESS, ARG_AMOUNT, ARG_DECIMALS, ARG_NAME, ARG_OWNER, ARG_RECIPIENT, ARG_SPENDER, ARG_SYMBOL, ARG_TOKEN_CONTRACT, ARG_TOTAL_SUPPLY, CEP18_CONTRACT_WASM, CEP18_TEST_CONTRACT_KEY, CEP18_TEST_CONTRACT_WASM, CEP18_TOKEN_CONTRACT_KEY, CHECK_ALLOWANCE_OF_ENTRYPOINT, CHECK_BALANCE_OF_ENTRYPOINT,CHECK_TOTAL_SUPPLY_ENTRYPOINT, METHOD_APPROVE, METHOD_APPROVE_AS_STORED_CONTRACT,METHOD_TRANSFER, METHOD_TRANSFER_AS_STORED_CONTRACT, RESULT_KEY, TOKEN_DECIMALS, TOKEN_NAME, TOKEN_SYMBOL, TOKEN_TOTAL_SUPPLY,\n};\n\n```\n\n----------------------------------------\n\nTITLE: Declaring Public Functions in Aptos\nDESCRIPTION: This code shows how to declare a basic public function in Aptos blockchain. Public functions in Aptos are similar to public methods in other blockchain networks.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/docs/resources/moving-to-casper.md#2025-04-22_snippet_6\n\nLANGUAGE: rust\nCODE:\n```\npublic fun start_collection(account: &signer) {}\n```\n\n----------------------------------------\n\nTITLE: Displaying URef with READ and ADD Access Rights in Bash\nDESCRIPTION: Example of a URef representation with READ and ADD access rights (value 5), showing the same URef address now followed by '-005' suffix indicating the combined access rights.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/versioned_docs/version-2.0.0/developers/dapps/uref-security.md#2025-04-22_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nuref-974019c976b5f26412ce486158d2431967af35d91387dae8cbcd43c20fce6452-005\n```\n\n----------------------------------------\n\nTITLE: Submitting a Bonding Request with System Auction Contract in Bash\nDESCRIPTION: This Bash command submits a bonding request to the Casper network using the system auction contract's `add_bid` entry point. It requires specifying the node address, chain name, secret key, session hash, payment amount, public key, bid amount, and delegation rate. The command relies on the `casper-client` utility and assumes the availability of the network's session hash for the auction contract. The expected outcome is the retrieval of a deploy hash, which can be used to verify processing results.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/versioned_docs/version-1.5.X/operators/becoming-a-validator/bonding.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nsudo -u casper casper-client put-deploy \\\n--node-address <HOST:PORT> \\\n--secret-key <PATH> \\\n--chain-name <CHAIN_NAME> \\\n--payment-amount <PAYMENT_AMOUNT_IN_MOTES> \\\n--session-hash <SESSION_HASH> \\\n--session-entry-point add_bid \\\n--session-arg=\"public_key:public_key='<PUBLIC_KEY_HEX>'\" \\\n--session-arg=\"amount:u512='<BID_AMOUNT>'\" \\\n--session-arg=\"delegation_rate:u8='<PERCENT_TO_KEEP_FROM_DELEGATORS>'\"\n```\n\n----------------------------------------\n\nTITLE: Monitoring DeployAccepted Events with cURL in Bash\nDESCRIPTION: This command uses cURL to monitor the event stream for DeployAccepted events on a Casper node. It connects to a specific node's IP address and port to watch for deploy-related events.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/versioned_docs/version-1.5.X/developers/cli/sending-deploys.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ncurl -s http://65.21.235.219:9999/events/deploys\n```\n\n----------------------------------------\n\nTITLE: Sending a Signed Deploy to Casper Network in JavaScript SDK\nDESCRIPTION: Sends a signed deploy to the Casper network using the Casper service. This is the final step in the deploy process after signing with either Casper Signer or Ledger.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/versioned_docs/version-1.5.X/resources/advanced/list-cspr.md#2025-04-22_snippet_11\n\nLANGUAGE: javascript\nCODE:\n```\ncasperService.deploy(signedDeploy)\n```\n\n----------------------------------------\n\nTITLE: Memory Allocation and Deallocation in WebAssembly\nDESCRIPTION: Implements memory allocation and deallocation functions in WebAssembly. Handles memory block management with size calculations, alignment, and pointer operations.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/versioned_docs/version-2.0.0/developers/json-rpc/json-rpc-transactional.md#2025-04-22_snippet_7\n\nLANGUAGE: webassembly\nCODE:\n```\n0b41f4031008412921040b41800a100841002103200021010b41a4171008200420037220014108744180fe03717221020b20020bda0401047f4198db021008230041106b22022400200041036a220341027621000240024002400240417f200141044720014104491b2204417f460d0041d897021008200441ff01710d010b41f29f0210082000417f6a22044180024922050d010b41a4c2091008200241002802c48a4036020c0240200020012002410c6a419481c00041ac81c0002301410b6a2401230141f4034b0440000b10122301410b6b240122040d0041c497111008410021042003417c7122032001410374418080016a2205200320054b1b418780046a2203411076230141036a2401230141f4034b0440000b1024230141036b24012205417f460d0041ccf10510082005411074220441003602042004200228020c3602082004200420034180807c716a4102723602002002200436020c200020012002410c6a419481c00041ac81c0002301410b6a2401230141f4034b0440000b10122301410b6b240121040b4100200228020c3602c48a400c010b41d0f2071008200241c48ac0003602082002200441027441c482c0006a410020051b220328020036020c0240200020012002410c6a200241086a419481c0002301410b6a2401230141f4034b0440000b10122301410b6b240122040d0041eecd0610082002200241086a20002002230141096a2401230141f4034b0440000b1019230141096b24014100210420022802000d00418aa805100820022802042204200228020c3602082002200436020c200020012002410c6a200241086a419481c0002301410b6a2401230141f4034b0440000b10122301410b6b240121040b2003200228020c3602000b200241106a240020040bbc0401047f41e0a00210080240024002402000450d0041b8960210082001450d0041d0b1021008024002400240417f200241044720024104491b2202417f460d0041d897021008200241ff01710d010b41c6a2021008200141036a410276417f6a2201418002490d010b41ecc603100820004100360200200041786a220120012802002202417e7136020041002802c48a40210302400240200141046a2204280200417c712205450d0041a2ae021008200528020022064101710d0041a6b10510080240024002402002417c7122000d0041c497021008200521020c010b418a9d02100802402002410271450d0041c497021008200521020c010b419afa0210082000200028020441037120057236020420042802002200417c712202450d0141ba3610082001280200417c712100200228020021060b4184cd00100820022006410371200072360200200428020021000b200420004103713602002001200128020022004103713602002000410271450d0141fed2021008200520052802004102723602000c010b41d89c0210082002417c712205450d0341d89702100820024102710d03419cab02100820052d00004101710d03418ef50010082000200541086a2202280200417c71360200200220014101723602000b41c497021008200321010c030b4180b90110082000200141027441c482c0006a2201280200360200200041786a22002000280200417e71360200200120003602000b41b80310080f0b41e82a1008200020033602000b41d0281008410020013602c48a400b\n```\n\n----------------------------------------\n\nTITLE: Creating Session Object for Staking Operations in JavaScript SDK\nDESCRIPTION: Creates a session object for staking operations by specifying the auction manager contract hash, entry point, and the previously defined runtime arguments. This is part of the deploy creation process.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/versioned_docs/version-1.5.X/resources/advanced/list-cspr.md#2025-04-22_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nimport { decodeBase16, DeployUtil } from 'casper-js-sdk';\n\nconst session = DeployUtil.ExecutableDeployItem.newStoredContractByHash(\n  decodeBase16(auction_manager_contract_hash), // auction manager contract hash\n  contractEntryPoint, // auction manager entry point\n  args\n);\n```\n\n----------------------------------------\n\nTITLE: Describing Account Configuration in JSON\nDESCRIPTION: This JSON snippet describes a blockchain account setup with a single key capable of signing transactions. It highlights the primary key's weight and explains how it matches the deployment and key management thresholds, enabling transaction signing and key management operations. This setup only involves one key, rendering a straightforward signing scheme for basic transaction and management actions.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/versioned_docs/version-1.5.X/resources/advanced/multi-sig/other-scenarios.md#2025-04-22_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n   \"account_address\": \"account-hash-a1…\",\n   \"action_thresholds\": {\n      \"deployment\": 1,\n      \"key_management\": 1\n   },\n   \"associated_keys\": [\n      {\n         \"account_address\": \"account-hash-a1…\", // primary key\n         \"weight\": 1\n      }\n   ],\n   \"main_purse\": \"uref-1234…\",\n   \"named_keys\": []\n}\n```\n\n----------------------------------------\n\nTITLE: Cloning the Casper Node Repository using Bash\nDESCRIPTION: Clones the official `casper-node` repository from GitHub using the `git clone` command. This step is necessary to obtain the source code required for building the validator contracts.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/versioned_docs/version-1.5.X/operators/setup/joining.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ngit clone https://github.com/casper-network/casper-node\n```\n\n----------------------------------------\n\nTITLE: Example of info_get_deploy JSON Response in Casper Network\nDESCRIPTION: This example shows the JSON response structure for the info_get_deploy RPC method. It includes the API version, deploy details with hash, header, payment, session, and approvals, along with execution information including block details and execution results.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/docs/developers/json-rpc/json-rpc-informational.md#2025-04-22_snippet_11\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"id\": 1,\n  \"jsonrpc\": \"2.0\",\n  \"result\": {\n    \"name\": \"info_get_deploy_result\",\n    \"value\": {\n      \"api_version\": \"2.0.0\",\n      \"deploy\": {\n        \"hash\": \"5c9b3b099c1378aa8e4a5f07f59ff1fcdc69a83179427c7e67ae0377d94d93fa\",\n        \"header\": {\n          \"account\": \"01d9bf2148748a85c89da5aad8ee0b0fc2d105fd39d41a4c796536354f0ae2900c\",\n          \"timestamp\": \"2020-11-17T00:39:24.072Z\",\n          \"ttl\": \"1h\",\n          \"gas_price\": 1,\n          \"body_hash\": \"d53cf72d17278fd47d399013ca389c50d589352f1a12593c0b8e01872a641b50\",\n          \"dependencies\": [\n            \"0101010101010101010101010101010101010101010101010101010101010101\"\n          ],\n          \"chain_name\": \"casper-example\"\n        },\n        \"payment\": {\n          \"StoredContractByName\": {\n            \"name\": \"casper-example\",\n            \"entry_point\": \"example-entry-point\",\n            \"args\": [\n              [\n                \"amount\",\n                {\n                  \"cl_type\": \"I32\",\n                  \"bytes\": \"e8030000\",\n                  \"parsed\": 1000\n                }\n              ]\n            ]\n          }\n        },\n        \"session\": {\n          \"Transfer\": {\n            \"args\": [\n              [\n                \"amount\",\n                {\n                  \"cl_type\": \"I32\",\n                  \"bytes\": \"e8030000\",\n                  \"parsed\": 1000\n                }\n              ]\n            ]\n          }\n        },\n        \"approvals\": [\n          {\n            \"signer\": \"01d9bf2148748a85c89da5aad8ee0b0fc2d105fd39d41a4c796536354f0ae2900c\",\n            \"signature\": \"014c1a89f92e29dd74fc648f741137d9caf4edba97c5f9799ce0c9aa6b0c9b58db368c64098603dbecef645774c05dff057cb1f91f2cf390bbacce78aa6f084007\"\n          }\n        ]\n      },\n      \"execution_info\": {\n        \"block_hash\": \"0744fcb72af43c5cc372039bc5a8bfee48808a9ce414acc0d6338a628c20eb42\",\n        \"block_height\": 10,\n        \"execution_result\": {\n          \"Version2\": {\n            \"initiator\": {\n              \"PublicKey\": \"01d9bf2148748a85c89da5aad8ee0b0fc2d105fd39d41a4c796536354f0ae2900c\"\n            },\n            \"error_message\": null,\n            \"limit\": \"123456\",\n            \"consumed\": \"100000\",\n            \"cost\": \"246912\",\n            \"payment\": [\n              {\n                \"source\": \"uref-0101010101010101010101010101010101010101010101010101010101010101-001\"\n              }\n            ],\n            \"transfers\": [\n              {\n                \"Version2\": {\n                  \"transaction_hash\": {\n                    \"Version1\": \"0101010101010101010101010101010101010101010101010101010101010101\"\n                  },\n                  \"from\": {\n                    \"AccountHash\": \"account-hash-0202020202020202020202020202020202020202020202020202020202020202\"\n                  },\n                  \"to\": \"account-hash-0303030303030303030303030303030303030303030303030303030303030303\",\n                  \"source\": \"uref-0a0a0a0a0a0a0a0a0a0a0a0a0a0a0a0a0a0a0a0a0a0a0a0a0a0a0a0a0a0a0a0a-007\",\n                  \"target\": \"uref-1b1b1b1b1b1b1b1b1b1b1b1b1b1b1b1b1b1b1b1b1b1b1b1b1b1b1b1b1b1b1b1b-000\",\n                  \"amount\": \"1000000000000\",\n                  \"gas\": \"2500000000\",\n                  \"id\": 999\n                }\n              }\n            ],\n            \"size_estimate\": 186,\n            \"effects\": [\n              {\n                \"key\": \"account-hash-2c4a11c062a8a337bfc97e27fd66291caeb2c65865dcb5d3ef3759c4c97efecb\",\n                \"kind\": {\n                  \"AddUInt64\": 8\n                }\n              },\n              {\n                \"key\": \"deploy-af684263911154d26fa05be9963171802801a0b6aff8f199b7391eacb8edc9e1\",\n                \"kind\": \"Identity\"\n              }\n            ]\n          }\n        }\n      }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Source Account Query JSON-RPC Response\nDESCRIPTION: Example JSON-RPC response showing source account details including the main purse. This information is used to verify that the source purse in the transfer matches the account's main purse.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/versioned_docs/version-2.0.0/developers/cli/transfers/verify-transfer.md#2025-04-22_snippet_11\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"jsonrpc\": \"2.0\",\n  \"result\": {\n    \"api_version\": \"1.5.3\",\n    \"block_header\": null,\n    \"stored_value\": {\n      \"Account\": {\n        \"account_hash\": \"account-hash-e70dbca48c2d31bc2d754e51860ceaa8a1a49dc627b20320b0ecee1b6d9ce655\",\n        \"named_keys\": [...],\n        \"main_purse\": \"uref-11e6fc5354f61a004df98482376c45964b8b1557e8f2f13fb5f3adab5faa8be1-007\",\n        \"associated_keys\": [\n          {\n            \"account_hash\": \"account-hash-e70dbca48c2d31bc2d754e51860ceaa8a1a49dc627b20320b0ecee1b6d9ce655\",\n            \"weight\": 1\n          }\n        ],\n        \"action_thresholds\": {\n          \"deployment\": 1,\n          \"key_management\": 1\n        }\n      }\n    },\n    \"merkle_proof\": \"[31406 hex chars]\"\n  },\n  \"id\": 4\n}\n```\n\n----------------------------------------\n\nTITLE: Sample Node Status API Response - JSON\nDESCRIPTION: Example output structure for the /status endpoint of Casper REST API. This response includes node version, peers, block info, uptime, and other chain/node metadata. Fields can vary slightly depending on node state and network configuration.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/docs/operators/setup/node-endpoints.md#2025-04-22_snippet_6\n\nLANGUAGE: json\nCODE:\n```\n{\\n  \"api_version\": \"1.4.15\",\\n  \"chainspec_name\": \"casper-test\",\\n  \"starting_state_root_hash\": \"4c3856bd6a95b566301b9da61aaf84589a51ee2980f3cc7bbef78e7745386955\",\\n  \"peers\": [\\n    {\\n      \"node_id\": \"tls:007e..e14b\",\\n      \"address\": \"89.58.52.245:35000\"\\n    },\\n    {\\n      \"node_id\": \"tls:00eb..ac11\",\\n      \"address\": \"65.109.17.120:35000\"\\n    },\\n    ...\\n    {\\n      \"node_id\": \"tls:ffc0..555b\",\\n      \"address\": \"95.217.228.224:35000\"\\n    }\\n  ],\\n  \"last_added_block_info\": {\\n    \"hash\": \"7acd2f48b573704e96eab54322f7e91a0624252baca3583ad2aae38229fe1715\",\\n    \"timestamp\": \"2023-05-10T09:20:10.752Z\",\\n    \"era_id\": 9085,\\n    \"height\": 1711254,\\n    \"state_root_hash\": \"1ac74071c1e76937c372c8d2ae22ea036a77578aad03821ec98021fdc1c5d06b\",\\n    \"creator\": \"0106ca7c39cd272dbf21a86eeb3b36b7c26e2e9b94af64292419f7862936bca2ca\"\\n  },\\n  \"our_public_signing_key\": \"0107cba5b4826a87ddbe0ba8cda8064881b75882f05094c1a5f95e957512a3450e\",\\n  \"round_length\": \"32s 768ms\",\\n  \"next_upgrade\": null,\\n  \"build_version\": \"1.4.15-039d438f2-casper-mainnet\",\\n  \"uptime\": \"5days 13h 46m 54s 520ms\"\\n}\n```\n\n----------------------------------------\n\nTITLE: Deploy Header Structure\nDESCRIPTION: Defines the structure of a deploy header containing metadata about the deploy including account, timestamps, gas price and dependencies.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/versioned_docs/version-1.5.X/concepts/serialization-standard.md#2025-04-22_snippet_2\n\nLANGUAGE: rust\nCODE:\n```\nstruct DeployHeader {\n    account: PublicKey,     // Ed25519 (1) or Secp256k1 (2)\n    timestamp: u64,         // Milliseconds since UNIX epoch\n    ttl: u64,              // Time to live\n    gas_price: u64,\n    body_hash: Hash,\n    dependencies: Vec<DeployHash>,\n    chain_name: String\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Block Batch and Metadata Structures in Rust\nDESCRIPTION: These Rust structs define types used for requesting multiple block headers (`BlockHeadersBatchId`, `BlockHeadersBatch`) and for bundling blocks or headers with related data like finality signatures (`BlockWithMetadata`, `BlockHeaderWithMetadata`, `BlockSignatures`) or associated deploys (`BlockAndDeploys`). These are typically used in `GetRequest`/`GetResponse` interactions.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/versioned_docs/version-2.0.0/concepts/design/networking-protocol.md#2025-04-22_snippet_8\n\nLANGUAGE: rust\nCODE:\n```\n```rust\nstruct BlockHeadersBatchId {\n    highest: u64,\n    lowest: u64,\n}\n\nstruct BlockWithMetadata {\n    block: Block,\n    finality_signatures: BlockSignatures,\n}\n\nstruct BlockHeaderWithMetadata {\n    block_header: BlockHeader,\n    block_signatures: BlockSignatures,\n}\n\nstruct BlockSignatures {\n    block_hash: BlockHash,\n    era_id: u64,\n    proofs: BTreeMap<PublicKey, Signature>,\n}\n\nstruct BlockAndDeploys {\n    block: Block,\n    deploys: Vec<Deploy>,\n}\n\nstruct BlockHeadersBatch(Vec<BlockHeader>);\n```\n```\n\n----------------------------------------\n\nTITLE: Example Makefile for Casper Rust Contract Build/Test (Makefile)\nDESCRIPTION: Provides a sample Makefile for automating common tasks in a Casper Rust smart contract project. Includes targets for preparing the build environment (`prepare`), building the Wasm contract (`build-contract`), running tests (`test`), and linting the code (`clippy`, `check-lint`, `lint`). This file needs to be created manually when not using `cargo casper`. Requires `rustup`, `cargo`, and `wasm-strip`.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/versioned_docs/version-1.5.X/developers/writing-onchain-code/simple-contract.md#2025-04-22_snippet_4\n\nLANGUAGE: makefile\nCODE:\n```\nprepare:\n        rustup target add wasm32-unknown-unknown\n\nbuild-contract:\n        cd contract && cargo build --release --target wasm32-unknown-unknown\n        wasm-strip contract/target/wasm32-unknown-unknown/release/contract.wasm 2>/dev/null | true\n\ntest: build-contract\n        mkdir -p tests/wasm\n        cp contract/target/wasm32-unknown-unknown/release/contract.wasm tests/wasm\n        cd tests && cargo test\n\nclippy:\n        cd contract && cargo clippy --all-targets -- -D warnings\n        cd tests && cargo clippy --all-targets -- -D warnings\n\ncheck-lint: clippy\n        cd contract && cargo fmt -- --check\n        cd tests && cargo fmt -- --check\n\nlint: clippy\n        cd contract && cargo fmt\n        cd tests && cargo fmt\n```\n\n----------------------------------------\n\nTITLE: Installing Homebrew on macOS - Bash\nDESCRIPTION: Downloads and runs the Homebrew installation script using bash and curl. Homebrew is used for package management on macOS, making it easier to install other dependencies like OpenSSL. Requires macOS terminal.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/versioned_docs/version-1.5.X/developers/prerequisites.md#2025-04-22_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\n/bin/bash -c \"$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/HEAD/install.sh)\"\n```\n\n----------------------------------------\n\nTITLE: Defining chain_get_block_transfers RPC Method in JSON\nDESCRIPTION: This code snippet provides the JSON schema for the 'chain_get_block_transfers' RPC method on the Casper blockchain network. It outlines the parameters, notably 'block_identifier', and expected results, including 'api_version', 'block_hash', and associated transfers. The RPC method does not require the block identifier; hence, it's optional. The result includes an 'api_version' and conditionally a 'block_hash' if available.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/condor/jsonrpc-comp/rpc-1.5/chain_get_block_transfers.json.md#2025-04-22_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"name\": \"chain_get_block_transfers\",\n  \"summary\": \"returns all transfers for a Block from the network\",\n  \"params\": [\n    {\n      \"name\": \"block_identifier\",\n      \"schema\": {\n        \"description\": \"The block hash.\",\n        \"$ref\": \"#/components/schemas/BlockIdentifier\"\n      },\n      \"required\": false\n    }\n  ],\n  \"result\": {\n    \"name\": \"chain_get_block_transfers_result\",\n    \"schema\": {\n      \"description\": \"Result for \\\"chain_get_block_transfers\\\" RPC response.\",\n      \"type\": \"object\",\n      \"required\": [\n        \"api_version\"\n      ],\n      \"properties\": {\n        \"api_version\": {\n          \"description\": \"The RPC API version.\",\n          \"type\": \"string\"\n        },\n        \"block_hash\": {\n          \"description\": \"The block hash, if found.\",\n          \"anyOf\": [\n            {\n              \"$ref\": \"#/components/schemas/BlockHash\"\n            },\n            {\n              \"type\": \"null\"\n            }\n          ]\n        },\n        \"transfers\": {\n          \"description\": \"The block's transfers, if found.\",\n          \"type\": [\n            \"array\",\n            \"null\"\n          ],\n          \"items\": {\n            \"$ref\": \"#/components/schemas/Transfer\"\n          }\n        }\n      },\n      \"additionalProperties\": false\n    }\n  },\n  \"examples\": [\n    {\n      \"name\": \"chain_get_block_transfers_example\",\n      \"params\": [\n        {\n          \"name\": \"block_identifier\",\n          \"value\": {\n            \"Hash\": \"13c2d7a68ecdd4b74bf4393c88915c836c863fc4bf11d7f2bd930a1bbccacdcb\"\n          }\n        }\n      ],\n      \"result\": {\n        \"name\": \"chain_get_block_transfers_example_result\",\n        \"value\": {\n          \"api_version\": \"1.5.6\",\n          \"block_hash\": \"13c2d7a68ecdd4b74bf4393c88915c836c863fc4bf11d7f2bd930a1bbccacdcb\",\n          \"transfers\": [\n            {\n              \"deploy_hash\": \"0000000000000000000000000000000000000000000000000000000000000000\",\n              \"from\": \"account-hash-0000000000000000000000000000000000000000000000000000000000000000\",\n              \"to\": null,\n              \"source\": \"uref-0000000000000000000000000000000000000000000000000000000000000000-000\",\n              \"target\": \"uref-0000000000000000000000000000000000000000000000000000000000000000-000\",\n              \"amount\": \"0\",\n              \"gas\": \"0\",\n              \"id\": null\n            }\n          ]\n        }\n      }\n    }\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: DeployAccepted Event Structure\nDESCRIPTION: JSON structure of a DeployAccepted event containing details of a deploy received by a network node.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/versioned_docs/version-1.5.X/developers/dapps/monitor-and-consume-events.md#2025-04-22_snippet_5\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"DeployAccepted\": {\n    \"hash\": \"db84ba229ea37716230ac9874f66c0f12b9731d8d42f28060e481ef3d7263ead\",\n    \"header\": {\n      \"account\": \"012481699f9231e36ecf002675cd7186b48e6a735d10ec1b30f587ca716937752c\",\n      \"timestamp\": \"2023-01-01T20:22:45.383Z\",\n      \"ttl\": \"30m\",\n      \"gas_price\": 1,\n      \"body_hash\": \"8a377b07a01ac23905b2e416ff388508301feffbb9bdf275c59f87be1e9d0de5\",\n      \"dependencies\": [],\n      \"chain_name\": \"casper-test\"\n    },\n    \"payment\": {\n      \"ModuleBytes\": {\n        \"module_bytes\": \"\",\n        \"args\": [\n          [\n            \"amount\",\n            {\n              \"cl_type\": \"U512\",\n              \"bytes\": \"040008af2f\",\n              \"parsed\": \"800000000\"\n            }\n          ]\n        ]\n      }\n    },\n    \"session\": {\n      \"StoredContractByHash\": {\n        \"hash\": \"1040f40d06f0355a80149befc4b5d1f203231231d66c4903688e178c36066539\",\n        \"entry_point\": \"test_entry_point\",\n        \"args\": [\n          [\n            \"cost\",\n            {\n              \"cl_type\": \"U512\",\n              \"bytes\": \"0500c817a804\",\n              \"parsed\": \"20000000000\"\n            }\n          ]\n        ]\n      }\n    },\n    \"approvals\": [\n      {\n        \"signer\": \"012481699f9231e36ecf002675cd7186b48e6a735d10ec1b30f587ca716937752c\",\n        \"signature\": \"01d81d4dc9504a356c23d3c161b87b39b1708cd282b59d3e44d9b999e787643ab495f168475bed8dc48d1056605e06c8ba74d96c69ae5b506c4312be8871c0c701\"\n      }\n    ]\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Casper Environment Function Imports\nDESCRIPTION: Import section declaring required functions from the Casper runtime environment including revert, get_named_arg, get_main_purse, and other system calls.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/docs/developers/json-rpc/json-rpc-transactional.md#2025-04-22_snippet_7\n\nLANGUAGE: webassembly\nCODE:\n```\n0289020a03656e760d6361737065725f726576657274000103656e76196361737065725f6765745f6e616d65645f6172675f73697a65000203656e76146361737065725f6765745f6e616d65645f617267000303656e76156361737065725f6765745f6d61696e5f7075727365000103656e761a6361737065725f6765745f73797374656d5f636f6e7472616374000203656e76146361737065725f63616c6c5f636f6e7472616374000403656e76176361737065725f726561645f686f73745f627566666572000203656e76236361737065725f7472616e736665725f66726f6d5f70757273655f746f5f7075727365000503656e76066d656d6f72790201114003656e760367617300010\n```\n\n----------------------------------------\n\nTITLE: Example Balance Query with Verbose Output\nDESCRIPTION: Detailed example of querying account balance with verbose output from a specific testnet node.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/versioned_docs/version-2.0.0/resources/beginner/querying-network.md#2025-04-22_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\ncasper-client query-balance -v \\\n  --id 6 \\\n  --node-address https://node.testnet.casper.network \\\n  --state-root-hash a306a9cf869e52fe9eacdc28aade94215112cc04b6737b3669c35568a47a7dc2 \\\n  --purse-identifier 01360af61b50cdcb7b92cffe2c99315d413d34ef77fadee0c105cc4f1d4120f986\n```\n\n----------------------------------------\n\nTITLE: Getting casper-client Subcommand Help - Bash\nDESCRIPTION: Displays help and usage information for a specific casper-client subcommand. Replace <command> with the target command. Ensures up-to-date arguments and documentation.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/versioned_docs/version-1.5.X/developers/prerequisites.md#2025-04-22_snippet_17\n\nLANGUAGE: bash\nCODE:\n```\ncasper-client <command> --help\n```\n\n----------------------------------------\n\nTITLE: Defining Package Metadata and Access Control - OpenAPI Schema - YAML/JSON\nDESCRIPTION: Defines the 'Package' schema for Casper Network, representing an entity's metadata, enabled/disabled versions, group-based access policies, and lock status. It references arrays and objects for versioning, user group mapping, and runtime locking, serving as the top-level structure for on-chain package module definitions and access rights enforcement. Key properties include 'groups' for permission mapping, 'lock_status' for write control, and 'versions' as an ordered list of entities.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/condor/jsonrpc-comp/rpc-2.0/schema/components.json.md#2025-04-22_snippet_51\n\nLANGUAGE: yaml\nCODE:\n```\nPackage:\n  description: \"Entity definition, metadata, and security container.\"\n  type: object\n  required:\n    - disabled_versions\n    - groups\n    - lock_status\n    - versions\n  properties:\n    versions:\n      description: \"All versions (enabled & disabled).\"\n      allOf:\n        - $ref: \"#/components/schemas/Array_of_EntityVersionAndHash\"\n    disabled_versions:\n      description: \"Collection of disabled entity versions. The runtime will not permit disabled entity versions to be executed.\"\n      type: array\n      items:\n        $ref: \"#/components/schemas/EntityVersionKey\"\n      uniqueItems: true\n    groups:\n      description: \"Mapping maintaining the set of URefs associated with each \\\"user group\\\". This can be used to control access to methods in a particular version of the entity. A method is callable by any context which \\\"knows\\\" any of the URefs associated with the method's user group.\"\n      allOf:\n        - $ref: \"#/components/schemas/Array_of_NamedUserGroup\"\n    lock_status:\n      description: \"A flag that determines whether a entity is locked\"\n      allOf:\n        - $ref: \"#/components/schemas/PackageStatus\"\n```\n\n----------------------------------------\n\nTITLE: Checking Deploy Status\nDESCRIPTION: Retrieves the status and details of a previously submitted deploy using its deploy hash.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/versioned_docs/version-2.0.0/resources/advanced/cross-contract.md#2025-04-22_snippet_23\n\nLANGUAGE: bash\nCODE:\n```\ncasper-client get-deploy \\\n    --node-address http://136.243.187.84:7777 15e11340d92fc9e64deb38bd942f4efb69caad0851eec24fd577070309d18537\n```\n\n----------------------------------------\n\nTITLE: Packaging Configuration Files into config.tar.gz (Bash)\nDESCRIPTION: A sequence of shell commands demonstrating how to create the `config.tar.gz` archive needed for staging. It involves creating a temporary directory (`config`), moving the required configuration files (`chainspec.toml`, `config-example.toml`) into it, and then using `tar` to create a compressed gzip archive (`config.tar.gz`) containing these files. Using `.` ensures paths within the archive are relative.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/docs/operators/setup-network/staging-files-for-new-network.md#2025-04-22_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\nmkdir config\ncd config\nmv [source of chainspec.toml] ./chainspec.toml\nmv [source of config-example.toml] ./config-example.toml\ntar -czvf ../config.tar.gz .\n```\n\n----------------------------------------\n\nTITLE: Loading Secret Key from File - Python - python\nDESCRIPTION: Uses pycspr to read a PEM-format private key and construct a Keypair object, using ED25519 algorithm. The path to the private key file must be provided and the file must be readable. Replace ED25519 with SECP256K1 if another key type is needed. Output: keypair object.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/versioned_docs/version-2.0.0/developers/dapps/sdk/client-library-usage.md#2025-04-22_snippet_9\n\nLANGUAGE: python\nCODE:\n```\nimport pycspr\nkeypair = pycspr.parse_private_key(\n    \"./secret_key.pem\",\n    pycspr.crypto.KeyAlgorithm.ED25519\n)\n```\n\n----------------------------------------\n\nTITLE: Defining the Operation Object Schema in JSON\nDESCRIPTION: This JSON schema defines the structure for an 'Operation' object, representing an action performed during a Casper Network deploy execution. It requires a 'key' (formatted string representation of the Key) and a 'kind' (referencing the OpKind schema for the operation type). No additional properties are allowed.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/condor/jsonrpc-comp/rpc-1.5/schema/Operation.json.md#2025-04-22_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"description\": \"An operation performed while executing a deploy.\",\n    \"type\": \"object\",\n    \"required\": [\n        \"key\",\n        \"kind\"\n    ],\n    \"properties\": {\n        \"key\": {\n            \"description\": \"The formatted string of the `Key`.\",\n            \"type\": \"string\"\n        },\n        \"kind\": {\n            \"description\": \"The type of operation.\",\n            \"allOf\": [\n                {\n                    \"$ref\": \"#/components/schemas/OpKind\"\n                }\n            ]\n        }\n    },\n    \"additionalProperties\": false\n}\n```\n\n----------------------------------------\n\nTITLE: Declaring an Entry Point Function in Casper\nDESCRIPTION: This snippet shows how to declare a public function (entry point) in a Casper smart contract. Entry points in Casper do not have input arguments in their definition but can access arguments using RuntimeArgs.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/docs/resources/moving-to-casper.md#2025-04-22_snippet_0\n\nLANGUAGE: rust\nCODE:\n```\n#[no_mangle]\npub extern \"C\" fn counter_inc() {\n    \n    // Entry point body\n}\n```\n\n----------------------------------------\n\nTITLE: Starting and Stopping NCTL Network\nDESCRIPTION: Commands to compile, start, stop, and clean the NCTL network setup.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/docs/developers/dapps/setup-nctl.md#2025-04-22_snippet_10\n\nLANGUAGE: bash\nCODE:\n```\n$ source casper-node/utils/nctl/activate\n$ nctl-compile\n$ nctl-assets-setup && nctl-start\n$ nctl-stop\n$ nctl-clean\n```\n\n----------------------------------------\n\nTITLE: Defining Transaction Scheduling Schema in JSON Schema\nDESCRIPTION: JSON Schema definition for the TransactionScheduling data structure, which describes different scheduling modes for transactions including standard, future era, and future timestamp options.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/condor/jsonrpc-comp/rpc-2.0/schema.json.md#2025-04-22_snippet_43\n\nLANGUAGE: json\nCODE:\n```\n\"TransactionScheduling\": {\n  \"description\": \"Scheduling mode of a Transaction.\",\n  \"oneOf\": [\n    {\n      \"description\": \"No special scheduling applied.\",\n      \"type\": \"string\",\n      \"enum\": [\n        \"Standard\"\n      ]\n    },\n    {\n      \"description\": \"Execution should be scheduled for the specified era.\",\n      \"type\": \"object\",\n      \"required\": [\n        \"FutureEra\"\n      ],\n      \"properties\": {\n        \"FutureEra\": {\n          \"$ref\": \"#/components/schemas/EraId\"\n        }\n      },\n      \"additionalProperties\": false\n    },\n    {\n      \"description\": \"Execution should be scheduled for the specified timestamp or later.\",\n      \"type\": \"object\",\n      \"required\": [\n        \"FutureTimestamp\"\n      ],\n      \"properties\": {\n        \"FutureTimestamp\": {\n          \"$ref\": \"#/components/schemas/Timestamp\"\n        }\n      },\n      \"additionalProperties\": false\n    }\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Defining AvailableBlockRange Schema in JSON\nDESCRIPTION: This schema defines the structure for an unbroken, inclusive range of blocks with lower and upper bounds.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/condor/jsonrpc-comp/rpc-2.0/schema/components.json.md#2025-04-22_snippet_79\n\nLANGUAGE: JSON\nCODE:\n```\n\"AvailableBlockRange\": {\n    \"description\": \"An unbroken, inclusive range of blocks.\",\n    \"type\": \"object\",\n    \"required\": [\n        \"high\",\n        \"low\"\n    ],\n    \"properties\": {\n        \"low\": {\n            \"description\": \"The inclusive lower bound of the range.\",\n            \"type\": \"integer\",\n            \"format\": \"uint64\",\n            \"minimum\": 0.0\n        },\n        \"high\": {\n            \"description\": \"The inclusive upper bound of the range.\",\n            \"type\": \"integer\",\n            \"format\": \"uint64\",\n            \"minimum\": 0.0\n        }\n    },\n    \"additionalProperties\": false\n}\n```\n\n----------------------------------------\n\nTITLE: CEP-18 Contract Package Object Response\nDESCRIPTION: This is the expected response when querying a CEP-18 contract package. It includes details such as the access key, versions, and most importantly, the contract hash for invoking the contract.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/versioned_docs/version-2.0.0/resources/tokens/cep18/query.md#2025-04-22_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n{\n  \"id\": -1489823435760214673,\n  \"jsonrpc\": \"2.0\",\n  \"result\": {\n    \"api_version\": \"1.0.0\",\n    \"block_header\": null,\n    \"merkle_proof\": \"[2048 hex chars]\",\n    \"stored_value\": {\n      \"ContractPackage\": {\n        \"access_key\": \"uref-8dac847ce0ae20f0156cf37dd233cc1d166fde8269fc9a393b0ea04174be1167-007\",\n        \"disabled_versions\": [],\n        \"groups\": [],\n        \"versions\": [\n          {\n            \"contract_hash\": \"contract-05d893e76c731729fc26339e5a970bd79fbf4a6adf743c8385431fb494bff45e\",\n            \"contract_version\": 1,\n            \"protocol_version_major\": 1\n          }\n        ]\n      }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Getting State Root Hash with Casper-Client in Rust\nDESCRIPTION: Queries the current state root hash of the Casper network with the Casper-Client command-line tool. Requires a valid node address as the target for the query. Outputs the hash representing the blockchain's latest state, which is needed for subsequent network queries or operations.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/docs/resources/beginner/counter/commands.md#2025-04-22_snippet_1\n\nLANGUAGE: rust\nCODE:\n```\ncasper-client get-state-root-hash --node-address [NODE_SERVER_ADDRESS]\n```\n\n----------------------------------------\n\nTITLE: Retrieving Account State on Casper Network\nDESCRIPTION: Commands to retrieve the latest state root hash and query the global state to check the primary account details, including its associated keys, thresholds, and other account information.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/versioned_docs/version-1.5.X/resources/advanced/multi-sig/multi-sig-workflow.md#2025-04-22_snippet_11\n\nLANGUAGE: bash\nCODE:\n```\ncasper-client get-state-root-hash --node-address https://node.testnet.casper.network\n\ncasper-client query-global-state \\\n--node-address https://node.testnet.casper.network \\\n--state-root-hash <STATE_ROOT_HASH> \\\n--key account-hash-<PRIMARY_ACCOUNT_HASH>\n```\n\n----------------------------------------\n\nTITLE: Dictionary Item Query Result Example\nDESCRIPTION: Example response showing the structure of a state_get_dictionary_item_result containing the stored value and merkle proof.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/docs/developers/json-rpc/json-rpc-informational.md#2025-04-22_snippet_25\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"id\": 1,\n  \"jsonrpc\": \"2.0\",\n  \"result\": {\n    \"name\": \"state_get_dictionary_item_result\",\n    \"value\": {\n      \"api_version\": \"2.0.0\",\n      \"dictionary_key\": \"dictionary-67518854aa916c97d4e53df8570c8217ccc259da2721b692102d76acd0ee8d1f\",\n      \"stored_value\": {\n        \"CLValue\": {\n          \"cl_type\": \"U64\",\n          \"bytes\": \"0100000000000000\",\n          \"parsed\": 1\n        }\n      },\n      \"merkle_proof\": \"01000000006ef2e0949ac76e55812421f755abe129b6244fe7168b77f47a72536147614625016ef2e0949ac76e55812421f755abe129b6244fe7168b77f47a72536147614625000000003529cde5c621f857f75f3810611eb4af3f998caaa9d4a3413cf799f99c67db0307010000006ef2e0949ac76e55812421f755abe129b6244fe7168b77f47a7253614761462501010102000000006e06000000000074769d28aac597a36a03a932d4b43e4f10bf0403ee5c41dd035102553f5773631200b9e173e8f05361b681513c14e25e3138639eb03232581db7557c9e8dbbc83ce94500226a9a7fe4f2b7b88d5103a4fc7400f02bf89c860c9ccdd56951a2afe9be0e0267006d820fb5676eb2960e15722f7725f3f8f41030078f8b2e44bf0dc03f71b176d6e800dc5ae9805068c5be6da1a90b2528ee85db0609cc0fb4bd60bbd559f497a98b67f500e1e3e846592f4918234647fca39830b7e1e6ad6f5b7a99b39af823d82ba1873d000003000000010186ff500f287e9b53f823ae1582b1fa429dfede28015125fd233a31ca04d5012002015cc42669a55467a1fdf49750772bfc1aed59b9b085558eb81510e9b015a7c83b0301e3cf4a34b1db6bfa58808b686cb8fe21ebe0c1bcbcee522649d2b135fe510fe3\"\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Query Component File\nDESCRIPTION: Command to create a new React component file for querying the smart contract.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/versioned_docs/version-2.0.0/developers/dapps/template-frontend.md#2025-04-22_snippet_17\n\nLANGUAGE: bash\nCODE:\n```\ntouch src/Query.jsx\n```\n\n----------------------------------------\n\nTITLE: Delegating With the System Auction Contract - Casper Client - Bash\nDESCRIPTION: This snippet shows how to delegate tokens using the Casper system auction contract by invoking its `delegate` entry point directly through the Casper command-line client. It requires the Casper client installed and access to a Casper node endpoint, as well as secret keys for signing. Key arguments specify network, payment, session hash, entry point, validator, amount, and delegator public keys. The command outputs a deploy hash for later status tracking.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/versioned_docs/version-2.0.0/developers/cli/delegate.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ncasper-client put-deploy \\\n--node-address <HOST:PORT> \\\n--secret-key <PATH> \\\n--chain-name <CHAIN_NAME> \\\n--payment-amount <PAYMENT_AMOUNT_IN_MOTES> \\\n--session-hash <SESSION_HASH> \\\n--session-entry-point delegate \\\n--session-arg \"validator:public_key='<HEX_ENCODED_VALIDATOR_PULIC_KEY>'\" \\\n--session-arg \"amount:u512='<AMOUNT_TO_DELEGATE>'\" \\\n--session-arg \"delegator:public_key='<HEX_ENCODED_DELEGATOR_PULIC_KEY>'\"\n```\n\n----------------------------------------\n\nTITLE: JSON-RPC Response for Balance Query\nDESCRIPTION: The response gives the balance in motes for the queried purse, along with the API version. This is an example of the server response for a request querying balance on the Casper blockchain.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/docs/resources/beginner/querying-network.md#2025-04-22_snippet_8\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"jsonrpc\": \"2.0\",\n  \"result\": {\n    \"api_version\": \"1.5.2\",\n    \"balance\": \"164000000000\"\n  },\n  \"id\": 6\n}\n```\n\n----------------------------------------\n\nTITLE: Example JSON Output for get-deploy Command (JSON)\nDESCRIPTION: This JSON object represents a typical successful response from the `casper-client get-deploy` command. It includes essential deploy information such as the API version, the deploy object itself (containing hash, header, payment, session, approvals), and an array of `execution_results`, detailing the outcome, cost, and state changes (transforms) caused by the deploy's execution on a specific block. Note the structure includes nested objects for header, payment, session, and detailed transforms within the execution result. An empty `execution_results` array indicates the deploy has not yet been executed.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/versioned_docs/version-2.0.0/resources/tokens/cep18/full-tutorial.md#2025-04-22_snippet_15\n\nLANGUAGE: json\nCODE:\n```\n{\n  {\n  \"id\": -870982079597140956,\n  \"jsonrpc\": \"2.0\",\n  \"result\": {\n    \"api_version\": \"1.4.3\",\n    \"deploy\": {\n      \"approvals\": [\n        {\n          \"signature\": \"[130 hex chars]\",\n          \"signer\": \"017B8CE645c728.......................\"\n        }\n      ],\n      \"hash\": \"F9D4C649Fa78Da07E.......................\",\n      \"header\": {\n        \"account\": \"017B8CE645c7285.......................\",\n        \"body_hash\": \"8eAEd6B7bCBB493d75d.......................\",\n        \"chain_name\": \"casper-test\",\n        \"dependencies\": [],\n        \"gas_price\": 1,\n        \"timestamp\": \"2022-01-04T15:14:29.203Z\",\n        \"ttl\": \"30m\"\n      },\n      \"payment\": {\n        \"ModuleBytes\": {\n          \"args\": [\n            [\n              \"amount\",\n              {\n                \"bytes\": \"0500e8764817\",\n                \"cl_type\": \"U512\",\n                \"parsed\": \"100000000000\"\n              }\n            ]\n          ],\n          \"module_bytes\": \"\"\n        }\n      },\n      \"session\": {\n        \"ModuleBytes\": {\n          \"args\": [],\n          \"module_bytes\": \"[417800 hex chars]\"\n        }\n      }\n    },\n    \"execution_results\": [\n      {\n        \"block_hash\": \"d3644f0306F20fa6.......................\",\n        \"result\": {\n          \"Success\": {\n            \"cost\": \"45040980830\",\n            \"effect\": {\n              \"operations\": [],\n              \"transforms\": [\n                {\n                  \"key\": \"hash-8cf5E4aCF51f54Eb5.......................\",\n                  \"transform\": \"Identity\"\n                },\n                {\n                  \"key\": \"hash-624dBE2395b9D9503FB.......................\",\n                  \"transform\": \"Identity\"\n                },\n                {\n                  \"key\": \"hash-010c3Fe81B7b862E50C77.......................\",\n                  \"transform\": \"Identity\"\n                },\n                {\n                  \"key\": \"hash-9824d60dC3A5c44A20b.......................\",\n                  \"transform\": \"Identity\"\n                },\n                {\n                  \"key\": \"balance-C051e7EC16e08De.......................\",\n                  \"transform\": \"Identity\"\n                },\n                {\n                  \"key\": \"balance-98d945f5324F865243.......................\",\n                  \"transform\": \"Identity\"\n                },\n                {\n                  \"key\": \"balance-C051e7EC16e08Def8b556\",\n                  \"transform\": {\n                    \"WriteCLValue\": {\n                      \"bytes\": \"06E07f3abEa001\",\n                      \"cl_type\": \"U512\",\n                      \"parsed\": \"1789897900000\"\n                    }\n                  }\n                },\n                {\n                  \"key\": \"balance-98d945f5324F865243B7c02C0417AB6eaC361c5c56602FD42ced834a1Ba201B6\",\n                  \"transform\": {\n                    \"AddUInt512\": \"100000000000\"\n                  }\n                },\n                {\n                  \"key\": \"uref-d29a34C29769D4BaC250CF9efD3c6372d8e6a89B62fAD122b3BF009990Ae61CD-000\",\n                  \"transform\": {\n                    \"WriteCLValue\": {\n                      \"bytes\": \"\",\n                      \"cl_type\": \"Unit\",\n                      \"parsed\": null\n                    }\n                  }\n                },\n                {\n                  \"key\": \"account-hash-7f4bf39A3...................................................\",\n                  \"transform\": {\n                    \"AddKeys\": [\n                      {\n                        \"key\": \"uref-d29a34C29769D4BaC250CF9efD3c6372d8e6a89B62fAD122b3BF009990Ae61CD-007\",\n                        \"name\": \"balances\"\n                      }\n                    ]\n                  }\n                },\n                {\n                  \"key\": \"uref-075874B98e3CF57Ea6326746336A0Aa908e770D3ADe0cf953f7E146f8B64F837-000\",\n                  \"transform\": {\n                    \"WriteCLValue\": {\n                      \"bytes\": \"\",\n                      \"cl_type\": \"Unit\",\n                      \"parsed\": null\n                    }\n                  }\n                },\n                {\n                  \"key\": \"account-hash-7f4bf39A311...................................................\",\n                  \"transform\": {\n                    \"AddKeys\": [\n                      {\n                        \"key\": \"uref-075874B98e3CF57Ea6326746336A0Aa908e770D3ADe0cf953f7E146f8B64F837-007\",\n                        \"name\": \"allowances\"\n                      }\n                    ]\n                  }\n                },\n                {\n                  \"key\": \"uref-66Bf928E1F6A28b174A48Fca4c002Bc8b77Dd851d7EFFb9Dc1A450cB211E484a-000\",\n                  \"transform\": {\n                    \"WriteCLValue\": {\n                      \"bytes\": \"0400ca9A3B\",\n                      \"cl_type\": \"U256\",\n                      \"parsed\": \"1000000000\"\n                    }\n                  }\n                },\n                {\n                  \"key\": \"uref-4EB0a2A42afBb1d3D5ae9BD4781dc96E528C7AD3f0eEC240Cf1DbDaDF4f3D486-000\",\n                  \"transform\": {\n                    \"WriteCLValue\": {\n                      \"bytes\": \"0A00000043617370657254657374\",\n                      \"cl_type\": \"String\",\n                      \"parsed\": \"CasperTest\"\n                    }\n                  }\n                },\n                {\n                  \"key\": \"uref-6e87fd661D5a65aF95f02baDfEb64f8E0F44C006661d4903A68E9dF8dEAa413d-000\",\n                  \"transform\": {\n                    \"WriteCLValue\": {\n                      \"bytes\": \"050000004353505254\",\n                      \"cl_type\": \"String\",\n                      \"parsed\": \"CSPRT\"\n                    }\n                  }\n                },\n                {\n                  \"key\": \"uref-aCA2425C80584391fB883603460578B1472d13a429Ebbd1a18a55cE19cE8F3C6-000\",\n                  \"transform\": {\n                    \"WriteCLValue\": {\n                      \"bytes\": \"08\",\n                      \"cl_type\": \"U8\",\n                      \"parsed\": 8\n                    }\n                  }\n                },\n                {\n                  \"key\": \"dictionary-baA61231F04B1c2Ee97025f425eaD2F70CAd9c1E8c24355246d159038AdCb2e9\",\n                  \"transform\": {\n                    \"WriteCLValue\": {\n                      \"bytes\": \"[188 hex chars]\",\n                      \"cl_type\": \"Any\",\n                      \"parsed\": null\n                    }\n                  }\n                },\n                {\n                  \"key\": \"account-hash-7f4bf39A311a7538d8C...................................................\",\n                  \"transform\": \"Identity\"\n                },\n                {\n                  \"key\": \"account-hash-7f4bf39A311a75...................................................\",\n                  \"transform\": {\n                    \"WriteAccount\": \"account-hash-7f4bf39A311a7538d8C91BB86C71DF774023e16bc4a70ab7e4e8AE77DbF2Ef53\"\n                  }\n                },\n                {\n                  \"key\": \"account-hash-7f4bf39A311a7538...................................................\",\n                  \"transform\": \"Identity\"\n                },\n                {\n                  \"key\": \"account-hash-7f4bf39A311a7538d8C...................................................\",\n                  \"transform\": {\n                    \"WriteAccount\": \"account-hash-7f4bf39A311a75...................................................\"\n                  }\n                },\n                {\n                  \"key\": \"uref-868c0e0BEB2EB3C10e893be96E6D6bE7FC6375f3f038e46c3262509245c117a0-000\",\n                  \"transform\": {\n                    \"WriteCLValue\": {\n                      \"bytes\": \"\",\n                      \"cl_type\": \"Unit\",\n                      \"parsed\": null\n                    }\n                  }\n                },\n                {\n                  \"key\": \"hash-28f982A396052b5068383E725ab48965AB941167f53DB36a0911ba0C98bc39F0\",\n                  \"transform\": \"WriteContractPackage\"\n                },\n                {\n                  \"key\": \"hash-28f982A396052b5068383E725ab48965AB941167f53DB36a0911ba0C98bc39F0\",\n                  \"transform\": \"Identity\"\n                },\n                {\n                  \"key\": \"hash-AdF81845d77907054ACb250c196392c7DAEE5481d4EabEB76c318A307c11E5cB\",\n                  \"transform\": \"WriteContractWasm\"\n                },\n                {\n                  \"key\": \"hash-Faa81ED758ecE1B99E2Ce48073D13D7f6185d9dc5233E39DE5c192Bebb9483D6\",\n                  \"transform\": \"WriteContract\"\n                },\n                {\n                  \"key\": \"hash-28f982A396052b5068383E725ab48965AB941167f53DB36a0911ba0C98bc39F0\",\n                  \"transform\": \"WriteContractPackage\"\n                },\n                {\n                  \"key\": \"account-hash-7f4bf39A311a7538d8...................................................\",\n                  \"transform\": {\n                    \"AddKeys\": [\n                      {\n                        \"key\": \"hash-Faa81ED758ecE1B99E2Ce48073D13D7f6185d9dc5233E39DE5c192Bebb9483D6\",\n                        \"name\": \"test_contract\"\n                      }\n                    ]\n                  }\n                },\n                {\n                  \"key\": \"uref-66Bf928E1F6A28b174A48Fca4c002Bc8b77Dd851d7EFFb9Dc1A450cB211E484a-000\",\n                  \"transform\": \"Identity\"\n                }\n              ]\n            }\n          }\n        }\n      }\n    ]\n  }\n}\n}\n```\n\n----------------------------------------\n\nTITLE: Global State Identifier Schema Definition - JSON\nDESCRIPTION: JSON Schema for querying global state in Casper Network. Defines three query methods: by block hash, block height, or state root hash.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/condor/jsonrpc-comp/rpc-2.0/schema.json.md#2025-04-22_snippet_82\n\nLANGUAGE: json\nCODE:\n```\n\"GlobalStateIdentifier\": {\n  \"description\": \"Identifier for possible ways to query Global State\",\n  \"oneOf\": [...]\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Seigniorage Allocation Schema Using JSON Schema in JavaScript\nDESCRIPTION: This snippet defines a JSON Schema for seigniorage allocations, supporting two variants: allocations for validators and delegators. It specifies required fields, such as public keys and allocated amounts, and references existing public key and big integer schemas for type consistency. This schema depends on referenced components (PublicKey, U512) and is intended for validation of protocol data objects, enforcing strict field requirements and structure.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/condor/jsonrpc-comp/rpc-1.5/schema/SeigniorageAllocation.json.md#2025-04-22_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"description\": \"Information about a seigniorage allocation\",\n    \"anyOf\": [\n        {\n            \"description\": \"Info about a seigniorage allocation for a validator\",\n            \"type\": \"object\",\n            \"required\": [\n                \"Validator\"\n            ],\n            \"properties\": {\n                \"Validator\": {\n                    \"type\": \"object\",\n                    \"required\": [\n                        \"amount\",\n                        \"validator_public_key\"\n                    ],\n                    \"properties\": {\n                        \"validator_public_key\": {\n                            \"description\": \"Validator's public key\",\n                            \"allOf\": [\n                                {\n                                    \"$ref\": \"#/components/schemas/PublicKey\"\n                                }\n                            ]\n                        },\n                        \"amount\": {\n                            \"description\": \"Allocated amount\",\n                            \"allOf\": [\n                                {\n                                    \"$ref\": \"#/components/schemas/U512\"\n                                }\n                            ]\n                        }\n                    },\n                    \"additionalProperties\": false\n                }\n            },\n            \"additionalProperties\": false\n        },\n        {\n            \"description\": \"Info about a seigniorage allocation for a delegator\",\n            \"type\": \"object\",\n            \"required\": [\n                \"Delegator\"\n            ],\n            \"properties\": {\n                \"Delegator\": {\n                    \"type\": \"object\",\n                    \"required\": [\n                        \"amount\",\n                        \"delegator_public_key\",\n                        \"validator_public_key\"\n                    ],\n                    \"properties\": {\n                        \"delegator_public_key\": {\n                            \"description\": \"Delegator's public key\",\n                            \"allOf\": [\n                                {\n                                    \"$ref\": \"#/components/schemas/PublicKey\"\n                                }\n                            ]\n                        },\n                        \"validator_public_key\": {\n                            \"description\": \"Validator's public key\",\n                            \"allOf\": [\n                                {\n                                    \"$ref\": \"#/components/schemas/PublicKey\"\n                                }\n                            ]\n                        },\n                        \"amount\": {\n                            \"description\": \"Allocated amount\",\n                            \"allOf\": [\n                                {\n                                    \"$ref\": \"#/components/schemas/U512\"\n                                }\n                            ]\n                        }\n                    },\n                    \"additionalProperties\": false\n                }\n            },\n            \"additionalProperties\": false\n        }\n    ]\n} \n```\n\n----------------------------------------\n\nTITLE: Querying Balance Details Result Example in Casper Network RPC API\nDESCRIPTION: Example JSON response format for the query_balance_details endpoint showing the account's available balance, total balance, proof, and holds information.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/docs/developers/json-rpc/json-rpc-informational.md#2025-04-22_snippet_19\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"jsonrpc\": \"2.0\",\n  \"id\": -6143675785141640608,\n  \"result\": {\n    \"name\": \"query_balance_details_result\",\n    \"value\": {\n      \"api_version\": \"2.0.0\",\n      \"total_balance\": \"123456\",\n      \"available_balance\": \"123456\",\n      \"total_balance_proof\": \"01000000006ef2e0949ac76e55812421f755abe129b6244fe7168b77f47a72536147614625016ef2e0949ac76e55812421f755abe129b6244fe7168b77f47a7253614761462500000000352...fe3\",\n      \"holds\": [\n        {\n          \"time\": 0,\n          \"amount\": \"123456\",\n          \"proof\": \"01000000006ef2e0949ac76e55812421f755abe129b6244fe7168b77f47a72536147614625016ef2e0949ac76e55812421f755abe129b6244fe7168b77f47a7253614761462500000000352...fe3\"\n        }\n      ]\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining ExecutionInfo Schema in JSON Schema\nDESCRIPTION: JSON Schema definition for the ExecutionInfo data structure, which contains information about a deploy's execution context, including the block hash, height, and optional execution result.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/condor/jsonrpc-comp/rpc-2.0/schema.json.md#2025-04-22_snippet_46\n\nLANGUAGE: json\nCODE:\n```\n\"ExecutionInfo\": {\n  \"description\": \"The block hash and height in which a given deploy was executed, along with the execution result if known.\",\n  \"type\": \"object\",\n  \"required\": [\n    \"block_hash\",\n    \"block_height\"\n  ],\n  \"properties\": {\n    \"block_hash\": {\n      \"description\": \"The hash of the block in which the deploy was executed.\",\n      \"allOf\": [\n        {\n          \"$ref\": \"#/components/schemas/BlockHash\"\n        }\n      ]\n    },\n    \"block_height\": {\n      \"description\": \"The height of the block in which the deploy was executed.\",\n      \"type\": \"integer\",\n      \"format\": \"uint64\",\n      \"minimum\": 0.0\n    },\n    \"execution_result\": {\n      \"description\": \"The execution result if known.\",\n      \"anyOf\": [\n        {\n          \"$ref\": \"#/components/schemas/ExecutionResult\"\n        },\n        {\n          \"type\": \"null\"\n        }\n      ]\n    }\n  },\n  \"additionalProperties\": false\n}\n```\n\n----------------------------------------\n\nTITLE: Casper Call Stack Element Definition in Rust\nDESCRIPTION: Definition of the CallStackElement enum that represents the origin of a sub-call in the Casper execution engine. It includes variants for Session, StoredSession, and StoredContract calls with their associated data fields.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/docs/developers/writing-onchain-code/contract-hash-vs-package-hash.md#2025-04-22_snippet_0\n\nLANGUAGE: rust\nCODE:\n```\n#[derive(Clone, Debug, PartialEq, Eq)]\npub enum CallStackElement {\n    /// Session\n    Session {\n        /// The account hash of the caller\n        account_hash: AccountHash,\n    },\n    /// Effectively an EntryPointType::Session - stored access to a session.\n    StoredSession {\n        /// The account hash of the caller\n        account_hash: AccountHash,\n        /// The contract package hash\n        contract_package_hash: ContractPackageHash,\n        /// The contract hash\n        contract_hash: ContractHash,\n    },\n    /// contract\n    StoredContract {\n        /// The contract package hash\n        contract_package_hash: ContractPackageHash,\n        /// The contract hash\n        contract_hash: ContractHash,\n    },\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Speculative Execution in TOML\nDESCRIPTION: Configuration options for enabling and setting up the speculative execution JSON-RPC HTTP server in the Casper node's config.toml file. This allows developers to estimate gas costs without committing to global state.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/versioned_docs/version-1.5.X/operators/setup/basic-node-configuration.md#2025-04-22_snippet_6\n\nLANGUAGE: toml\nCODE:\n```\n# ========================================================================\n# Configuration options for the speculative execution JSON-RPC HTTP server\n# ========================================================================\n[speculative_exec_server]\n\n# Flag which enables the speculative execution JSON-RPC HTTP server.\nenable_server = true\n\n# Listening address for speculative execution JSON-RPC HTTP server.  If the port\n# is set to 0, a random port will be used.\n#\n# If the specified port cannot be bound to, a random port will be tried instead.\n# If binding fails, the speculative execution JSON-RPC HTTP server will not run,\n# but the node will be otherwise unaffected.\n#\n# The actual bound address will be reported via a log line if logging is enabled.\naddress = '0.0.0.0:7778'\n\n# The global max rate of requests (per second) before they are limited.\n# Request will be delayed to the next 1 second bucket once limited.\nqps_limit = 1\n\n# Maximum number of bytes to accept in a single request body.\nmax_body_bytes = 2_621_440\n\n# Specifies which origin will be reported as allowed by speculative execution server.\n#\n# If left empty, CORS will be disabled.\n# If set to '*', any origin is allowed.\n# Otherwise, only a specified origin is allowed. The given string must conform to the [origin scheme](https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Origin).\ncors_origin = ''\n```\n\n----------------------------------------\n\nTITLE: Handling OpenSSL Dependency Error in Ubuntu 22.04+ - Bash\nDESCRIPTION: These bash commands resolve the missing libssl1.1 dependency when using Casper binaries on Ubuntu 22.04 or newer. They download the specific OpenSSL 1.1 library package and install it manually via dpkg/apt. Required prerequisites: curl, sudo privileges, and network access to the Ubuntu archive. The method ensures compatibility with Casper client/node binaries that require OpenSSL 1.1, allowing the installation to proceed on modern Ubuntu versions.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/docs/operators/setup/install-node.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ncurl -f -JLO http://security.ubuntu.com/ubuntu/pool/main/o/openssl/libssl1.1_1.1.1f-1ubuntu2_amd64.deb\\nsudo apt install ./libssl1.1_1.1.1f-1ubuntu2_amd64.deb\n```\n\n----------------------------------------\n\nTITLE: Requesting Full Purse Balance Details via query_balance_details (Casper RPC) - JSON\nDESCRIPTION: This snippet illustrates a JSON-RPC request to the query_balance_details method, which returns comprehensive balance information for a given purse at a specified state. It is intended for use with nodes supporting the query_balance_details method and requires proper purse and state identification. The 'params' array needs both a state_identifier and purse_identifier field, with the expected result containing detailed balance and metadata.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/docs/developers/json-rpc/json-rpc-informational.md#2025-04-22_snippet_18\n\nLANGUAGE: json\nCODE:\n```\n{\\n  \"id\": 1,\\n  \"jsonrpc\": \"2.0\",\\n  \"method\": \"query_balance_details\",\\n  \"params\": [\\n    {\\n      \"name\": \"state_identifier\",\\n      \"value\": {\\n        \"BlockHash\": \"0707070707070707070707070707070707070707070707070707070707070707\"\\n      }\\n    },\\n    {\\n      \"name\": \"purse_identifier\",\\n      \"value\": {\\n        \"main_purse_under_account_hash\": \"account-hash-0909090909090909090909090909090909090909090909090909090909090909\"\\n      }\\n    }\\n  ]\\n}\\n\n```\n\n----------------------------------------\n\nTITLE: Project Build and Preparation Commands\nDESCRIPTION: Commands for navigating to project directory, preparing the environment and building the contract\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/versioned_docs/version-2.0.0/resources/advanced/cross-contract.md#2025-04-22_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ncd cross-contract\nmake prepare\nmake build-contract\n```\n\n----------------------------------------\n\nTITLE: Dual-Key Account with Primary and Associated Key\nDESCRIPTION: Account configuration with a primary key (weight 2) for full control and an associated key (weight 1) for deployments only.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/versioned_docs/version-2.0.0/resources/advanced/multi-sig/other-scenarios.md#2025-04-22_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n\"Account\": {\n   \"account_address\": \"account-hash-a1…\",\n   \"action_thresholds\": {\n         \"deployment\": 1,\n         \"key_management\": 2\n   },\n   \"associated_keys\": [\n      {\n         \"account_address\": \"account-hash-a1…\",\n         \"weight\": 2\n      },\n      {\n         \"account_address\": \"account-hash-b2…\",\n         \"weight\": 1\n      }\n   ],\n   \"main_purse\": \"uref-1234…\",\n   \"named_keys\": []\n}\n```\n\n----------------------------------------\n\nTITLE: Querying CEP-18 Utility Contract Hash\nDESCRIPTION: This command queries the global state to retrieve the utility contract hash for a CEP-18 token. It requires the cep18_test_contract hash and the current state root hash.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/versioned_docs/version-2.0.0/resources/tokens/cep18/query.md#2025-04-22_snippet_3\n\nLANGUAGE: json\nCODE:\n```\ncasper-client query-global-state -n http://<HOST IP>:<PORT> \\\n// This is the contract hash for the `cep18_test_contract` as found from the installing account's `NamedKeys`\n--key hash-015b99020edb40e7e1e2b31a8e104bc226242f960a2d10dc1d91ae3eb6fa41b6 \\\n--state-root-hash f9f73c3a4da5893b67c4cac94a5695d76cfefff61b050c98a7b19e2b8efd3933\n```\n\n----------------------------------------\n\nTITLE: Submitting a Deploy via Casper Node JSON-RPC in JSON\nDESCRIPTION: This snippet provides an example JSON-RPC 2.0 request for the \"account_put_deploy\" method of a Casper network node, including all required parameters for submitting a Deploy object. It demonstrates how the deploy payload, payment and session code, and cryptographic approvals are structured, as well as the expected JSON response including API version and deploy hash. To use this, a valid Casper node endpoint and properly signed deploy object are required as prerequisites.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/condor/jsonrpc-comp/rpc-1.5/schema.json.md#2025-04-22_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"method\": \"account_put_deploy\",\n  \"params\": [\n    {\n      \"deploy\": {\n        \"hash\": \"5c9b3b099c1378aa8e4a5f07f59ff1fcdc69a83179427c7e67ae0377d94d93fa\",\n        \"header\": {\n          \"account\": \"01d9bf2148748a85c89da5aad8ee0b0fc2d105fd39d41a4c796536354f0ae2900c\",\n          \"timestamp\": \"2020-11-17T00:39:24.072Z\",\n          \"ttl\": \"1h\",\n          \"gas_price\": 1,\n          \"body_hash\": \"d53cf72d17278fd47d399013ca389c50d589352f1a12593c0b8e01872a641b50\",\n          \"dependencies\": [\n            \"0101010101010101010101010101010101010101010101010101010101010101\"\n          ],\n          \"chain_name\": \"casper-example\"\n        },\n        \"payment\": {\n          \"StoredContractByName\": {\n            \"name\": \"casper-example\",\n            \"entry_point\": \"example-entry-point\",\n            \"args\": [\n              [\n                \"amount\",\n                {\n                  \"cl_type\": \"I32\",\n                  \"bytes\": \"e8030000\",\n                  \"parsed\": 1000\n                }\n              ]\n            ]\n          }\n        },\n        \"session\": {\n          \"Transfer\": {\n            \"args\": [\n              [\n                \"amount\",\n                {\n                  \"cl_type\": \"I32\",\n                  \"bytes\": \"e8030000\",\n                  \"parsed\": 1000\n                }\n              ]\n            ]\n          }\n        },\n        \"approvals\": [\n          {\n            \"signer\": \"01d9bf2148748a85c89da5aad8ee0b0fc2d105fd39d41a4c796536354f0ae2900c\",\n            \"signature\": \"014c1a89f92e29dd74fc648f741137d9caf4edba97c5f9799ce0c9aa6b0c9b58db368c64098603dbecef645774c05dff057cb1f91f2cf390bbacce78aa6f084007\"\n          }\n        ]\n      }\n    }\n  ],\n  \"result\": {\n    \"api_version\": \"1.5.6\",\n    \"deploy_hash\": \"5c9b3b099c1378aa8e4a5f07f59ff1fcdc69a83179427c7e67ae0377d94d93fa\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Running CEP-78 Installation Example with npm\nDESCRIPTION: Command to run the example installation script provided with the CEP-78 JavaScript client. This will install a CEP-78 contract using the environment variables defined in the .env file.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/versioned_docs/version-2.0.0/resources/tokens/cep78/js-tutorial.md#2025-04-22_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\nnpm run example:install\n```\n\n----------------------------------------\n\nTITLE: Creating Connect Component File\nDESCRIPTION: Command to create a new JSX file for the Connect component that will handle wallet connection functionality.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/versioned_docs/version-2.0.0/developers/dapps/template-frontend.md#2025-04-22_snippet_9\n\nLANGUAGE: bash\nCODE:\n```\ntouch src/Connect.jsx\n```\n\n----------------------------------------\n\nTITLE: Querying CEP-18 Contract Package with Casper Client\nDESCRIPTION: Command to query the global state using the Casper client to retrieve the contract package hash for a CEP-18 token. This command includes the contract package hash and the state root hash.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/versioned_docs/version-1.5.X/resources/tokens/cep18/query.md#2025-04-22_snippet_0\n\nLANGUAGE: json\nCODE:\n```\ncasper-client query-global-state -n http://<HOST IP>:<PORT> \\\n// This is the contract package hash, which can be found within the `NamedKeys` of the account that sent the installing deploy.\n--key hash-82bd86d2675b2dc44c19027fb7717a99db6fda5e0cad8d597f2495a9dbc9df7f \\\n// This is the most up to date state root hash, which can found by using the `get-state-root-hash` command in the Casper client.\n--state-root-hash f9f73c3a4da5893b67c4cac94a5695d76cfefff61b050c98a7b19e2b8efd3933\n```\n\n----------------------------------------\n\nTITLE: Querying State Root Hash in Casper Network\nDESCRIPTION: Command to retrieve the current state root hash, which provides a snapshot of the blockchain state at a specific moment. This hash is required for subsequent state queries.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/versioned_docs/version-2.0.0/developers/cli/transfers/verify-transfer.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ncasper-client get-state-root-hash --node-address [NODE_SERVER_ADDRESS]\n```\n\n----------------------------------------\n\nTITLE: Describing Addressable Entity Metadata - Casper Contract - JSON\nDESCRIPTION: This snippet captures the metadata for a smart contract's addressable entity on Casper, including keys, protocol version, contract kind, and management thresholds. It tracks the contract's operational configuration and access, used by node operators or client code to verify and interact with the contract. Dependencies include correct formatting for key hashes and protocol version, with key fields for package hash, byte code hash, purse, and management action weights.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/docs/developers/cli/sending-transactions.md#2025-04-22_snippet_17\n\nLANGUAGE: JSON\nCODE:\n```\n{\n  \"protocol_version\": \"2.0.0\",\n  \"entity_kind\": {\n    \"SmartContract\": \"VmCasperV1\"\n  },\n  \"package_hash\": \"package-dea470cf75f60abafcca7c68313f18fc2e21881d607ad75fa65e2bfe547da25c\",\n  \"byte_code_hash\": \"byte-code-d1db7551d7b5e40760763d2e4e5a253a9c865ab4367e83341bca16548afd5bcd\",\n  \"main_purse\": \"uref-4d2ab9ebd75542172d2d94e2c8ebc107e9354c362b9542fdb5c667cb937704fd-007\",\n  \"associated_keys\": [\n    {\n      \"account_hash\": \"account-hash-dc1e638c71901f1e8fd375ce7a9c6eb2f240241b4ca9cbb7abd65ce16f879a22\",\n      \"weight\": 1\n    }\n  ],\n  \"action_thresholds\": {\n    \"deployment\": 1,\n    \"upgrade_management\": 1,\n    \"key_management\": 1\n  },\n  \"message_topics\": [\n    {\n      \"topic_name\": \"errors\",\n      \"topic_name_hash\": \"b38b3a8f7a7cb169b9869f1b660e328df63941f4f078d284a0058140375ec7fc\"\n    }\n  ]\n}\n\n```\n\n----------------------------------------\n\nTITLE: Generating Ed25519 Secret Key with OpenSSL\nDESCRIPTION: Command to generate a new Ed25519 secret key using OpenSSL without requiring the Casper client. This creates the secret_key.pem file.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/versioned_docs/version-1.5.X/concepts/accounts-and-keys.md#2025-04-22_snippet_9\n\nLANGUAGE: bash\nCODE:\n```\nopenssl genpkey -algorithm ed25519 -out secret_key.pem\n```\n\n----------------------------------------\n\nTITLE: Implementing Casper Node Payload Types in Rust\nDESCRIPTION: This code defines the Payload enum and related message types for the Casper node's inter-node communication, including consensus messages, deployment gossip, address gossip, and get/response requests for data exchange.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/versioned_docs/version-1.5.X/concepts/design/networking-protocol.md#2025-04-22_snippet_1\n\nLANGUAGE: rust\nCODE:\n```\nenum Payload {\n    Consensus(ConsensusMessage),\n    DeployGossiper(DeployGossiperMessage),\n    AddressGossiper(AddressGossiperMessage),\n    GetRequest {\n        tag: Tag,\n        serialized_id: Vec<u8>,\n    },\n    GetResponse {\n        tag: Tag,\n        serialized_item: Vec<[u8]>,\n    },\n    FinalitySignature(FinalitySignature),\n}\n\nenum DeployGossiperMessage {\n    Gossip(DeployHash),\n    GossipResponse {\n        item_id: DeployHash,\n        is_already_held: bool,\n    },\n}\n\nenum AddressGossiperMessage {\n    Gossip(GossippedAddress),\n    GossipResponse {\n        item_id: GossippedAddress,\n        is_already_held: bool,\n    },\n}\n\nstruct DeployHash(Digest);\nstruct GossipedAddress(SocketAddr);\n```\n\n----------------------------------------\n\nTITLE: Defining ExecutionResultV1 Schema in JSON Schema\nDESCRIPTION: JSON Schema definition for the ExecutionResultV1 data structure, which represents the outcome of executing a deploy, containing either Success or Failure variants with associated execution effects, transfers, and costs.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/condor/jsonrpc-comp/rpc-2.0/schema.json.md#2025-04-22_snippet_49\n\nLANGUAGE: json\nCODE:\n```\n\"ExecutionResultV1\": {\n  \"description\": \"The result of executing a single deploy.\",\n  \"oneOf\": [\n    {\n      \"description\": \"The result of a failed execution.\",\n      \"type\": \"object\",\n      \"required\": [\n        \"Failure\"\n      ],\n      \"properties\": {\n        \"Failure\": {\n          \"type\": \"object\",\n          \"required\": [\n            \"cost\",\n            \"effect\",\n            \"error_message\",\n            \"transfers\"\n          ],\n          \"properties\": {\n            \"effect\": {\n              \"description\": \"The effect of executing the deploy.\",\n              \"allOf\": [\n                {\n                  \"$ref\": \"#/components/schemas/ExecutionEffect\"\n                }\n              ]\n            },\n            \"transfers\": {\n              \"description\": \"A record of version 1 Transfers performed while executing the deploy.\",\n              \"type\": \"array\",\n              \"items\": {\n                \"$ref\": \"#/components/schemas/TransferAddr\"\n              }\n            },\n            \"cost\": {\n              \"description\": \"The cost of executing the deploy.\",\n              \"allOf\": [\n                {\n                  \"$ref\": \"#/components/schemas/U512\"\n                }\n              ]\n            },\n            \"error_message\": {\n              \"description\": \"The error message associated with executing the deploy.\",\n              \"type\": \"string\"\n            }\n          },\n          \"additionalProperties\": false\n        }\n      },\n      \"additionalProperties\": false\n    },\n    {\n      \"description\": \"The result of a successful execution.\",\n      \"type\": \"object\",\n      \"required\": [\n        \"Success\"\n      ],\n      \"properties\": {\n        \"Success\": {\n          \"type\": \"object\",\n          \"required\": [\n            \"cost\",\n            \"effect\",\n            \"transfers\"\n          ],\n          \"properties\": {\n            \"effect\": {\n              \"description\": \"The effect of executing the deploy.\",\n              \"allOf\": [\n                {\n                  \"$ref\": \"#/components/schemas/ExecutionEffect\"\n                }\n              ]\n            },\n            \"transfers\": {\n              \"description\": \"A record of Transfers performed while executing the deploy.\",\n              \"type\": \"array\",\n              \"items\": {\n                \"$ref\": \"#/components/schemas/TransferAddr\"\n              }\n            },\n            \"cost\": {\n              \"description\": \"The cost of executing the deploy.\",\n              \"allOf\": [\n                {\n                  \"$ref\": \"#/components/schemas/U512\"\n                }\n              ]\n            }\n          },\n          \"additionalProperties\": false\n        }\n      },\n      \"additionalProperties\": false\n    }\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Defining EraId Schema in JSON Schema\nDESCRIPTION: JSON Schema definition for the EraId data type, which represents a unique era identifier in the Casper Network as an unsigned 64-bit integer.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/condor/jsonrpc-comp/rpc-2.0/schema.json.md#2025-04-22_snippet_44\n\nLANGUAGE: json\nCODE:\n```\n\"EraId\": {\n  \"description\": \"Era ID newtype.\",\n  \"type\": \"integer\",\n  \"format\": \"uint64\",\n  \"minimum\": 0.0\n}\n```\n\n----------------------------------------\n\nTITLE: Monitor Node Peers and Latest Block in Real Time - Bash\nDESCRIPTION: Runs a loop using watch that polls the node every 15 seconds, querying current peers count and last block info. Combines two curl and jq commands in a single invocation for lightweight node status dashboarding. Replace <node_address> as needed.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/docs/operators/setup/node-endpoints.md#2025-04-22_snippet_11\n\nLANGUAGE: bash\nCODE:\n```\nwatch -n 15 'curl -s http://<node_address>:8888/status | jq \".peers | length\"; curl -s http://<node_address>:8888/status | jq .last_added_block_info'\n```\n\n----------------------------------------\n\nTITLE: Querying Auction Bid Status with Casper Client and jq - Bash\nDESCRIPTION: This Bash snippet uses `casper-client get-auction-info` piped to `jq` to filter bids by a specified public key. This allows a validator to check their bid status, such as 'inactive', after suspected eviction. Dependencies: `casper-client`, `jq`. The `<public_key>` placeholder must be replaced with the validator's hexadecimal public key. The output is a subset of the full auction state JSON corresponding to the selected public key. Limitations: Assumes the node's RPC port is live and returns valid auction state data.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/versioned_docs/version-1.5.X/operators/becoming-a-validator/recovering.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ncasper-client get-auction-info | jq '.result.auction_state.bids[] | select( .public_key == \"<public_key>\")'\n```\n\n----------------------------------------\n\nTITLE: Example JSON Snippet: Updated Casper Account Action Thresholds\nDESCRIPTION: Illustrates the expected JSON structure for the `action_thresholds` field within a Casper account's details after they have been updated, showing a deployment threshold of 2 and a key management threshold of 3.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/docs/resources/advanced/multi-sig/multi-sig-workflow.md#2025-04-22_snippet_12\n\nLANGUAGE: json\nCODE:\n```\n\"action_thresholds\": {\n  \"deployment\": 2,\n  \"key_management\": 3\n},\n```\n\n----------------------------------------\n\nTITLE: Getting State Root Hash in Bash\nDESCRIPTION: Command to retrieve the current state root hash from the local Casper network. This hash is required for querying the network's global state.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/versioned_docs/version-1.5.X/resources/beginner/counter/walkthrough.md#2025-04-22_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\ncasper-client get-state-root-hash --node-address http://localhost:11101\n```\n\n----------------------------------------\n\nTITLE: Target Account JSON-RPC Response\nDESCRIPTION: Sample JSON-RPC response showing the balance for the target account.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/versioned_docs/version-1.5.X/developers/cli/transfers/verify-transfer.md#2025-04-22_snippet_12\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"jsonrpc\": \"2.0\",\n  \"result\": {\n    \"api_version\": \"1.5.3\",\n    \"balance\": \"46200000000\"\n  },\n  \"id\": 7\n}\n```\n\n----------------------------------------\n\nTITLE: Response for chain_get_state_root_hash\nDESCRIPTION: Example response from the chain_get_state_root_hash RPC method, showing the API version and the hex-encoded state root hash.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/versioned_docs/version-1.5.X/developers/json-rpc/json-rpc-informational.md#2025-04-22_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\n{\n  \"id\": 1,\n  \"jsonrpc\": \"2.0\",\n  \"result\": {\n    \"api_version\": \"1.4.13\",\n    \"state_root_hash\": \"0808080808080808080808080808080808080808080808080808080808080808\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Sample Deploy Query Response - Casper Network - JSON\nDESCRIPTION: This snippet provides a sample JSON response retrieved from the casper-client get-deploy command, representing the status of a blockchain deploy on the Casper Network. It contains deploy metadata, payment/session arguments, approvals, and a list of execution results including status and blockchain state changes. No dependencies are required for the JSON itself; it is meant for reference and validation. Values must be checked against actual node responses for live deployments; some fields (like module_bytes) are abbreviated in this example.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/versioned_docs/version-1.5.X/resources/tokens/cep78/using-casper-client/full-installation-tutorial.md#2025-04-22_snippet_10\n\nLANGUAGE: json\nCODE:\n```\n{\\n  \"jsonrpc\": \"2.0\",\\n  \"id\": -7282936875867676694,\\n  \"result\": {\\n    \"api_version\": \"1.5.6\",\\n    \"deploy\": {\\n      \"hash\": \"1d1f66b26eb648b5f15bc958a552036e8521b508706056817b0d41c71f6d7afe\",\\n      \"header\": {\\n        \"account\": \"0154d828baafa6858b92919c4d78f26747430dcbecb9aa03e8b44077dc6266cabf\",\\n        \"timestamp\": \"2024-02-29T18:28:16.104Z\",\\n        \"ttl\": \"30m\",\\n        \"gas_price\": 1,\\n        \"body_hash\": \"90866126c3dbb9a27f672307102bf651663934ee34715d46f9f02caa70226743\",\\n        \"dependencies\": [],\\n        \"chain_name\": \"casper-test\"\\n      },\\n      \"payment\": {\\n        \"ModuleBytes\": {\\n          \"module_bytes\": \"\",\\n          \"args\": [\\n            [\\n              \"amount\",\\n              {\\n                \"cl_type\": \"U512\",\\n                \"bytes\": \"050088526a74\",\\n                \"parsed\": \"500000000000\"\\n              }\\n            ]\\n          ]\\n        }\\n      },\\n      \"session\": {\\n        \"ModuleBytes\": {\\n          \"module_bytes\": \"[621680 hex chars]\",\\n          \"args\": [\\n            [\\n              \"collection_name\",\\n              {\\n                \"cl_type\": \"String\",\\n                \"bytes\": \"120000004345502d37382d636f6c6c656374696f6e32\",\\n                \"parsed\": \"CEP-78-collection\"\\n              }\\n            ],\\n            [\\n              \"collection_symbol\",\\n              {\\n                \"cl_type\": \"String\",\\n                \"bytes\": \"050000004345503738\",\\n                \"parsed\": \"CEP78\"\\n              }\\n            ],\\n            [\\n              \"total_token_supply\",\\n              {\\n                \"cl_type\": \"U64\",\\n                \"bytes\": \"6400000000000000\",\\n                \"parsed\": 100\\n              }\\n            ],\\n            [\\n              \"ownership_mode\",\\n              {\\n                \"cl_type\": \"U8\",\\n                \"bytes\": \"02\",\\n                \"parsed\": 2\\n              }\\n            ],\\n            [\\n              \"nft_kind\",\\n              {\\n                \"cl_type\": \"U8\",\\n                \"bytes\": \"01\",\\n                \"parsed\": 1\\n              }\\n            ],\\n            [\\n              \"nft_metadata_kind\",\\n              {\\n                \"cl_type\": \"U8\",\\n                \"bytes\": \"00\",\\n                \"parsed\": 0\\n              }\\n            ],\\n            [\\n              \"json_schema\",\\n              {\\n                \"cl_type\": \"String\",\\n                \"bytes\": \"0a0000006e66742d736368656d61\",\\n                \"parsed\": \"nft-schema\"\\n              }\\n            ],\\n            [\\n              \"identifier_mode\",\\n              {\\n                \"cl_type\": \"U8\",\\n                \"bytes\": \"00\",\\n                \"parsed\": 0\\n              }\\n            ],\\n            [\\n              \"metadata_mutability\",\\n              {\\n                \"cl_type\": \"U8\",\\n                \"bytes\": \"00\",\\n                \"parsed\": 0\\n              }\\n            ]\\n          ]\\n        }\\n      },\\n      \"approvals\": [\\n        {\\n          \"signer\": \"0154d828baafa6858b92919c4d78f26747430dcbecb9aa03e8b44077dc6266cabf\",\\n          \"signature\": \"01f866dd88fd179fd214262d0451a92be2673e6d4095eb79beef9e5b8bbbc18862e76c3085dcb1b1ae669a185cb80d94c5084325913b8118338645952bb5ee2200\"\\n        }\\n      ]\\n    },\\n    \"execution_results\": [\\n      {\\n        \"block_hash\": \"dca9ff6e9ad7baeead715504dee098069f30dbb9975730be3d3926ab1c58f332\",\\n        \"result\": {\\n          \"Success\": {\\n            \"effect\": {\\n              \"operations\": [],\\n              \"transforms\": [\\n                {\\n                  \"key\": \"account-hash-6174cf2e6f8fed1715c9a3bace9c50bfe572eecb763b0ed3f644532616452008\",\\n                  \"transform\": \"Identity\"\\n                },\\n                {\\n                  \"key\": \"hash-8cf5e4acf51f54eb59291599187838dc3bc234089c46fc6ca8ad17e762ae4401\",\\n                  \"transform\": \"Identity\"\\n                },\\n                {\\n                  \"key\": \"hash-8cf5e4acf51f54eb59291599187838dc3bc234089c46fc6ca8ad17e762ae4401\",\\n                  \"transform\": \"Identity\"\\n                },\\n                {\\n                  \"key\": \"hash-624dbe2395b9d9503fbee82162f1714ebff6b639f96d2084d26d944c354ec4c5\",\\n                  \"transform\": \"Identity\"\\n                },\\n                {\\n                  \"key\": \"hash-8cf5e4acf51f54eb59291599187838dc3bc234089c46fc6ca8ad17e762ae4401\",\\n                  \"transform\": \"Identity\"\\n                },\\n                {\\n                  \"key\": \"hash-010c3fe81b7b862e50c77ef9a958a05bfa98444f26f96f23d37a13c96244cfb7\",\\n                  \"transform\": \"Identity\"\\n                },\\n                {\\n                  \"key\": \"hash-9824d60dc3a5c44a20b9fd260a412437933835b52fc683d8ae36e4ec2114843e\",\\n                  \"transform\": \"Identity\"\\n                },\\n                {\\n                  \"key\": \"hash-010c3fe81b7b862e50c77ef9a958a05bfa98444f26f96f23d37a13c96244cfb7\",\\n                  \"transform\": \"Identity\"\\n                },\\n                {\\n                  \"key\": \"balance-11e6fc5354f61a004df98482376c45964b8b1557e8f2f13fb5f3adab5faa8be1\",\\n                  \"transform\": \"Identity\"\\n                },\\n                {\\n                  \"key\": \"balance-98d945f5324f865243b7c02c0417ab6eac361c5c56602fd42ced834a1ba201b6\",\\n                  \"transform\": \"Identity\"\\n                },\\n                {\\n                  \"key\": \"balance-11e6fc5354f61a004df98482376c45964b8b1557e8f2f13fb5f3adab5faa8be1\",\\n                  \"transform\": {\\n                    \"WriteCLValue\": {\\n                      \"cl_type\": \"U512\",\\n                      \"bytes\": \"05c2d627778f\",\\n                      \"parsed\": \"616179422914\"\\n                    }\\n                  }\\n                },\\n                {\\n                  \"key\": \"balance-98d945f5324f865243b7c02c0417ab6eac361c5c56602fd42ced834a1ba201b6\",\\n                  \"transform\": {\\n                    \"AddUInt512\": \"500000000000\"\\n                  }\\n                },\\n                {\\n                  \"key\": \"uref-e42cd3ae8b4bd60306a72f0f4e9faa4e114e2e2cce5db03bfdd109a8db888e14-000\",\\n                  \"transform\": {\\n                    \"WriteCLValue\": {\\n                      \"cl_type\": \"Unit\",\\n                      \"bytes\": \"\",\\n                      \"parsed\": null\\n                    }\\n                  }\\n                },\\n                {\\n                  \"key\": \"hash-2b61207cd0e94ce1b1d40801b0abb1ab55fd7dae94c9dcf670292243f3791a30\",\\n                  \"transform\": \"WriteContractPackage\"\\n                },\\n                {\\n                  \"key\": \"account-hash-e70dbca48c2d31bc2d754e51860ceaa8a1a49dc627b20320b0ecee1b6d9ce655\",\\n                  \"transform\": {\\n                    \"AddKeys\": [\\n                      {\\n                        \"name\": \"cep78_contract_package_CEP-78-collection\",\\n                        \"key\": \"hash-2b61207cd0e94ce1b1d40801b0abb1ab55fd7dae94c9dcf670292243f3791a30\"\\n                      }\\n                    ]\\n                  }\\n                },\\n                {\\n                  \"key\": \"account-hash-e70dbca48c2d31bc2d754e51860ceaa8a1a49dc627b20320b0ecee1b6d9ce655\",\\n                  \"transform\": {\\n                    \"AddKeys\": [\\n                      {\\n                        \"name\": \"cep78_contract_package_access_CEP-78-collection\",\\n                        \"key\": \"uref-e42cd3ae8b4bd60306a72f0f4e9faa4e114e2e2cce5db03bfdd109a8db888e14-007\"\\n                      }\\n                    ]\\n                  }\\n                },\\n                {\\n                  \"key\": \"hash-2b61207cd0e94ce1b1d40801b0abb1ab55fd7dae94c9dcf670292243f3791a30\",\\n                  \"transform\": \"Identity\"\\n                },\\n                {\\n                  \"key\": \"hash-845d3d08e29642afba35704bcb6e38f3c40f1469763bff7a88674c9a5be3f01b\",\\n                  \"transform\": \"WriteContractWasm\"\\n                },\\n                {\\n                  \"key\": \"hash-378a43e38bc5129d8aa3bcd04f5c9a97be73f85b5be574182ac1346f04520796\",\\n                  \"transform\": \"WriteContract\"\\n                },\\n                {\\n                  \"key\": \"hash-2b61207cd0e94ce1b1d40801b0abb1ab55fd7dae94c9dcf670292243f3791a30\",\\n                  \"transform\": \"WriteContractPackage\"\\n                },\\n                {\\n                  \"key\": \"account-hash-e70dbca48c2d31bc2d754e51860ceaa8a1a49dc627b20320b0ecee1b6d9ce655\",\\n                  \"transform\": {\\n                    \"AddKeys\": [\\n                      {\\n                        \"name\": \"cep78_contract_hash_CEP-78-collection\",\\n                        \"key\": \"hash-378a43e38bc5129d8aa3bcd04f5c9a97be73f85b5be574182ac1346f04520796\"\\n                      }\\n                    ]\\n                  }\\n                },\\n                {\\n                  \"key\": \"uref-0545c60c0a55e4d8a10fe0c3b2d356150b082e2243b6795b34f67643e4ca13d0-000\",\\n                  \"transform\": {\\n                    \"WriteCLValue\": {\\n                      \"cl_type\": \"U32\",\\n                      \"bytes\": \"01000000\",\\n                      \"parsed\": 1\\n                    }\\n                  }\\n                },\\n                {\\n                  \"key\": \"account-hash-e70dbca48c2d31bc2d754e51860ceaa8a1a49dc627b20320b0ecee1b6d9ce655\",\\n                  \"transform\": {\\n                    \"AddKeys\": [\\n                      {\\n                        \"name\": \"cep78_contract_version_CEP-78-collection\",\\n                        \"key\": \"uref-0545c60c0a55e4d8a10fe0c3b2d356150b082e2243b6795b34f67643e4ca13d0-007\"\\n                      }\\n                    ]\\n                  }\\n                },\\n                {\\n                  \"key\": \"hash-378a43e38bc5129d8aa3bcd04f5c9a97be73f85b5be574182ac1346f04520796\",\\n                  \"transform\": \"Identity\"\\n                },\\n                {\\n                  \"key\": \"hash-2b61207cd0e94ce1b1d40801b0abb1ab55fd7dae94c9dcf670292243f3791a30\",\\n                  \"transform\": \"Identity\"\n```\n\n----------------------------------------\n\nTITLE: Specifying Network Bind Address in config.toml - TOML/Markdown\nDESCRIPTION: Defines the network interface and port where the Casper node will listen for P2P traffic. This setting under the network section of config.toml is required for node operation. The example assigns the bind_address to all IPv4 interfaces on port 35000. Only one such network bind address entry should be present for a node.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/docs/operators/setup/node-endpoints.md#2025-04-22_snippet_0\n\nLANGUAGE: md\nCODE:\n```\nbind_address = '0.0.0.0:35000'\n```\n\n----------------------------------------\n\nTITLE: Account Details Structure\nDESCRIPTION: JSON structure showing the account details including associated keys, action thresholds, and main purse information.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/docs/resources/advanced/multi-sig/multi-sig-workflow.md#2025-04-22_snippet_15\n\nLANGUAGE: json\nCODE:\n```\n\"Account\": {\n  \"account_hash\": \"account-hash-1ed5a1c39bea93c105f2d22c965a84b205b36734a377d05dbb103b6bfaa595a7\",\n  \"action_thresholds\": {\n    \"deployment\": 2,\n    \"key_management\": 3\n  },\n  \"associated_keys\": [\n    {\n      \"account_hash\": \"account-hash-04a9691a9f8f05a0f08bd686f188b27c7dbcd644b415759fd3ca043d916ea02f\",\n      \"weight\": 1\n    },\n    {\n      \"account_hash\": \"account-hash-1ed5a1c39bea93c105f2d22c965a84b205b36734a377d05dbb103b6bfaa595a7\",\n      \"weight\": 3\n    },\n    {\n      \"account_hash\": \"account-hash-e2d00525cac31ae2756fb155f289d276c6945b6914923fe275de0cb127bffee7\",\n      \"weight\": 1\n    }\n  ],\n  \"main_purse\": \"uref-8294864177c2c1ec887a11dae095e487b5256ce6bd2a1f2740d0e4f28bd3251c-007\",\n  \"named_keys\": []\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Named Argument Pair for Contracts - JSON\nDESCRIPTION: This snippet models a single contract argument as a two-element array: the parameter name and the value as a 'CLValue', enabling type-safe, positionally enforced argument passing to contracts. This schema is essential for building valid contract invocation packets and depends on the referenced 'CLValue' schema. Ensures exactly two elements: name and value.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/condor/jsonrpc-comp/rpc-1.5/schema.json.md#2025-04-22_snippet_34\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"description\": \"Named arguments to a contract.\",\n  \"type\": \"array\",\n  \"items\": [\n    {\n      \"type\": \"string\"\n    },\n    {\n      \"$ref\": \"#/components/schemas/CLValue\"\n    }\n  ],\n  \"maxItems\": 2,\n  \"minItems\": 2\n}\n```\n\n----------------------------------------\n\nTITLE: Adding Known Addresses in config-example.toml\nDESCRIPTION: An excerpt from `config-example.toml` showing how to specify `known_addresses` under the `[network]` section. This list should include the IP addresses and ports (typically 35000) of other nodes in the network, especially genesis validators. This file serves as a template for generating the node-specific `config.toml`.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/versioned_docs/version-1.5.X/operators/setup-network/staging-files-for-new-network.md#2025-04-22_snippet_5\n\nLANGUAGE: toml\nCODE:\n```\n[network]\nknown_addresses = ['<ip 1>:35000','<ip 2>:35000','<ip 3>:35000']\n\n```\n\n----------------------------------------\n\nTITLE: CLType System Documentation in Markdown\nDESCRIPTION: Comprehensive list of CLTypes available in the Casper system, including primitive types, system types, and composite types. Each type is documented with its category and purpose.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/docs/developers/json-rpc/types_cl.md#2025-04-22_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n* `Bool` Primitive\n* `I32` Primitive\n* `I64` Primitive\n* `U8` Primitive\n* `U32` Primitive\n* `U64` Primitive\n* `U128` Large unsigned integer type\n* `U256` Large unsigned integer type\n* `U512` Large unsigned integer type\n* `Unit` Primitive\n* `String` Primitive\n* `Key` System type\n* `URef` System type\n* `PublicKey` System type\n* `Option` Option of a `CLType`\n* `List` Variable-length list of a single `CLType` (comparable to a `Vec`)\n* `ByteArray` Fixed-length list of a single `CLType` (comparable to a Rust array)\n* `Result` `Result` with `Ok` and `Err` variants of `CLType`'s\n* `Map` Map with keys of a single `CLType` and values of a single `CLType`\n* `Tuple1` 1-ary tuple of a `CLType`\n* `Tuple2` 2-ary tuple of `CLType`s\n* `Tuple3` 3-ary tuple of `CLType`s\n* `Any` Unspecified type\n```\n\n----------------------------------------\n\nTITLE: Transferring CEP-18 Tokens Using Casper Client JSON\nDESCRIPTION: This snippet demonstrates how to use the Casper client to transfer CEP-18 tokens from one account to another on the Casper network. It requires specifying the node URL, chain name, secret key path, contract hash, entry point, recipient account hash, token amount, and gas payment. The output is a deploy hash which can be queried to verify execution.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/docs/resources/tokens/cep18/transfer.md#2025-04-22_snippet_0\n\nLANGUAGE: json\nCODE:\n```\ncasper-client put-deploy -n http://<node IP>:<PORT> \\\n// The chain name of the Casper network on which your CEP-18 instance was installed.\n--chain-name <CHAIN NAME>\\\n// The local path to your account's secret key.\n--secret-key ~/casper/demo/user_a/secret_key.pem \\\n// The contract hash of your CEP-18 contract instance.\n--session-hash hash-b568f50a64acc8bbe43462ffe243849a88111060b228dacb8f08d42e26985180 \\\n// The name of the entry point you are invoking.\n--session-entry-point \"transfer\" \\\n// The account hash of the account that you are sending CEP-18 tokens to.\n--session-arg \"recipient:key='account-hash-9f81014b9c7406c531ebf0477132283f4eb59143d7903a2fae54358b26cea44b\" \\\n// The amount of CEP-18 tokens you are sending to the receiving account.\n--session-arg \"amount:u256='10'\" \\\n// The gas payment you are allotting, in motes.\n--payment-amount \"10000000000\"\n```\n\n----------------------------------------\n\nTITLE: Sending a Deploy from Primary Account on Casper Network\nDESCRIPTION: Command to send a deploy containing a Wasm contract that adds a named key to the account. This deploy uses the primary account key, which has sufficient weight to exceed the deployment threshold.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/versioned_docs/version-1.5.X/resources/advanced/multi-sig/multi-sig-workflow.md#2025-04-22_snippet_13\n\nLANGUAGE: bash\nCODE:\n```\ncasper-client put-deploy --chain-name casper-test \\\n--payment-amount 3000000000 \\\n--session-path tests/wasm/contract.wasm \\\n--secret-key $PATH/secret_key.pem \\\n--session-arg \"my-key-name:string='primary_account_key'\" \\\n--session-arg \"message:string='Hello, World'\"\n```\n\n----------------------------------------\n\nTITLE: Retrieving Deploy Execution Results via Casper RPC (Bash/JSON)\nDESCRIPTION: Provides an example JSON response for the `info_get_deploy` RPC method. It includes the API version, the original deploy details (hash, header, payment, session, approvals), and the execution results, which contain the block hash where the deploy was included and the outcome of the execution (success/failure, cost, effects like operations and transforms, and transfers). An empty `execution_results` array indicates the deploy has been processed but not yet executed.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/versioned_docs/version-1.5.X/developers/json-rpc/json-rpc-informational.md#2025-04-22_snippet_11\n\nLANGUAGE: bash\nCODE:\n```\n{\n  \"id\": 1,\n  \"jsonrpc\": \"2.0\",\n  \"result\": {\n    \"api_version\": \"1.4.13\",\n    \"deploy\": {\n      \"approvals\": [\n        {\n          \"signature\": \"014c1a89f92e29dd74fc648f741137d9caf4edba97c5f9799ce0c9aa6b0c9b58db368c64098603dbecef645774c05dff057cb1f91f2cf390bbacce78aa6f084007\",\n          \"signer\": \"01d9bf2148748a85c89da5aad8ee0b0fc2d105fd39d41a4c796536354f0ae2900c\"\n        }\n      ],\n      \"hash\": \"5c9b3b099c1378aa8e4a5f07f59ff1fcdc69a83179427c7e67ae0377d94d93fa\",\n      \"header\": {\n        \"account\": \"01d9bf2148748a85c89da5aad8ee0b0fc2d105fd39d41a4c796536354f0ae2900c\",\n        \"body_hash\": \"d53cf72d17278fd47d399013ca389c50d589352f1a12593c0b8e01872a641b50\",\n        \"chain_name\": \"casper-example\",\n        \"dependencies\": [\n          \"0101010101010101010101010101010101010101010101010101010101010101\"\n        ],\n        \"gas_price\": 1,\n        \"timestamp\": \"2020-11-17T00:39:24.072Z\",\n        \"ttl\": \"1h\"\n      },\n      \"payment\": {\n        \"StoredContractByName\": {\n          \"args\": [\n            [\n              \"amount\",\n              {\n                \"bytes\": \"e8030000\",\n                \"cl_type\": \"I32\",\n                \"parsed\": 1000\n              }\n            ]\n          ],\n          \"entry_point\": \"example-entry-point\",\n          \"name\": \"casper-example\"\n        }\n      },\n      \"session\": {\n        \"Transfer\": {\n          \"args\": [\n            [\n              \"amount\",\n              {\n                \"bytes\": \"e8030000\",\n                \"cl_type\": \"I32\",\n                \"parsed\": 1000\n              }\n            ]\n          ]\n        }\n      }\n    },\n    \"execution_results\": [\n      {\n        \"block_hash\": \"13c2d7a68ecdd4b74bf4393c88915c836c863fc4bf11d7f2bd930a1bbccacdcb\",\n        \"result\": {\n          \"Success\": {\n            \"cost\": \"123456\",\n            \"effect\": {\n              \"operations\": [\n                {\n                  \"key\": \"account-hash-2c4a11c062a8a337bfc97e27fd66291caeb2c65865dcb5d3ef3759c4c97efecb\",\n                  \"kind\": \"Write\"\n                },\n                {\n                  \"key\": \"deploy-af684263911154d26fa05be9963171802801a0b6aff8f199b7391eacb8edc9e1\",\n                  \"kind\": \"Read\"\n                }\n              ],\n              \"transforms\": [\n                {\n                  \"key\": \"uref-2c4a11c062a8a337bfc97e27fd66291caeb2c65865dcb5d3ef3759c4c97efecb-007\",\n                  \"transform\": {\n                    \"AddUInt64\": 8\n                  }\n                },\n                {\n                  \"key\": \"deploy-af684263911154d26fa05be9963171802801a0b6aff8f199b7391eacb8edc9e1\",\n                  \"transform\": \"Identity\"\n                }\n              ]\n            },\n            \"transfers\": [\n              \"transfer-5959595959595959595959595959595959595959595959595959595959595959\",\n              \"transfer-8282828282828282828282828282828282828282828282828282828282828282\"\n            ]\n          }\n        }\n      }\n    ]\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Calling Counter Contract Entry Point by Hash (Example)\nDESCRIPTION: Demonstrates a specific example of calling the 'counter-inc' entry point of a previously deployed Counter contract on Testnet using its contract hash. This command utilizes `casper-client put-deploy` with concrete values for node address, chain name, payment, session hash, and entry point. Since the contract is already on-chain, `--session-hash` is used instead of `--session-path`.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/versioned_docs/version-2.0.0/developers/cli/calling-contracts.md#2025-04-22_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\ncasper-client put-deploy \\\n    --node-address http://65.21.235.219:7777 \\\n    --chain-name casper-test \\\n    --secret-key [KEY_PATH]/secret_key.pem \\\n    --payment-amount 100000000 \\\n    --session-hash hash-22228188b85b6ee4a4a41c7e98225c3918139e9a5eb4b865711f2e409d85e88e \\\n    --session-entry-point \"counter-inc\"\n```\n\n----------------------------------------\n\nTITLE: Defining a JSON Schema for an Array of BlockProof Objects (JSON)\nDESCRIPTION: This JSON snippet defines a schema for an array. The 'type' property specifies it's an array. The 'items' property indicates that each element in the array must conform to the schema defined at the reference path '#/components/schemas/BlockProof'. This is a common pattern in OpenAPI specifications for defining arrays of complex objects.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/condor/jsonrpc-comp/rpc-2.0/schema/Array_of_BlockProof.json.md#2025-04-22_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n```json copy \n{\n    \"type\": \"array\",\n    \"items\": {\n        \"$ref\": \"#/components/schemas/BlockProof\"\n    }\n} \n``` \n```\n\n----------------------------------------\n\nTITLE: No Standard Library Attribute for Casper Smart Contracts\nDESCRIPTION: Example showing how to disable the standard library import in Casper smart contracts to reduce WASM size.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/docs/developers/writing-onchain-code/best-practices.md#2025-04-22_snippet_2\n\nLANGUAGE: rust\nCODE:\n```\n#![no_std]\n```\n\n----------------------------------------\n\nTITLE: Defining Entry Point Access, Groups, and Types - JSON Schema - JSON\nDESCRIPTION: Specifies schemas for controlling method access in contracts, including enums for public and group-based access models, and for execution context ('Session' or 'Contract'). These definitions facilitate precise authorization and grouping for contract methods, making contracts more secure and flexible for different user segments.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/condor/jsonrpc-comp/rpc-1.5/schema/components.json.md#2025-04-22_snippet_44\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"description\": \"Enum describing the possible access control options for a contract entry point (method).\",\n    \"anyOf\": [\n        {\n            \"type\": \"string\",\n            \"enum\": [\n                \"Public\"\n            ]\n        },\n        {\n            \"description\": \"Only users from the listed groups may call this method. Note: if the list is empty then this method is not callable from outside the contract.\",\n            \"type\": \"object\",\n            \"required\": [\n                \"Groups\"\n            ],\n            \"properties\": {\n                \"Groups\": {\n                    \"type\": \"array\",\n                    \"items\": {\n                        \"$ref\": \"#/components/schemas/Group\"\n                    }\n                }\n            },\n            \"additionalProperties\": false\n        }\n    ]\n},\n{\n    \"description\": \"A (labelled) \\\"user group\\\". Each method of a versioned contract may be associated with one or more user groups which are allowed to call it.\",\n    \"type\": \"string\"\n},\n{\n    \"description\": \"Context of method execution\",\n    \"type\": \"string\",\n    \"enum\": [\n        \"Session\",\n        \"Contract\"\n    ]\n}\n\n```\n\n----------------------------------------\n\nTITLE: Initializing Test Program in Rust\nDESCRIPTION: This code snippet shows how to initialize a test program in Rust for Casper session code testing. It includes an empty main function and the test module declaration.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/versioned_docs/version-2.0.0/developers/writing-onchain-code/testing-session-code.md#2025-04-22_snippet_1\n\nLANGUAGE: rust\nCODE:\n```\nfn main() {\n panic!(\"Execute \\\"cargo test\\\" to test the contract, not \\\"cargo run\\\".\");\n}\n\n#[cfg(test)]\nmod tests {\n    // The entire test program resides here\n}\n```\n\n----------------------------------------\n\nTITLE: Example Request and Response for state_get_account_info\nDESCRIPTION: Shows the parameters and expected response format for the state_get_account_info RPC method which retrieves account information from the Casper network. The request includes an account identifier and optional block identifier, while the response contains account details and a Merkle proof.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/condor/jsonrpc-comp/rpc-2.0/schema.json.md#2025-04-22_snippet_3\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"name\": \"state_get_account_info_example\",\n  \"params\": [\n    {\n      \"name\": \"account_identifier\",\n      \"value\": \"013b6a27bcceb6a42d62a3a8d02a6f0d73653215771de243a63ac048a18b59da29\"\n    },\n    {\n      \"name\": \"block_identifier\",\n      \"value\": {\n        \"Hash\": \"0707070707070707070707070707070707070707070707070707070707070707\"\n      }\n    }\n  ],\n  \"result\": {\n    \"name\": \"state_get_account_info_example_result\",\n    \"value\": {\n      \"api_version\": \"2.0.0\",\n      \"account\": {\n        \"account_hash\": \"account-hash-e94daaff79c2ab8d9c31d9c3058d7d0a0dd31204a5638dc1451fa67b2e3fb88c\",\n        \"named_keys\": [\n          {\n            \"name\": \"main_purse\",\n            \"key\": \"uref-09480c3248ef76b603d386f3f4f8a5f87f597d4eaffd475433f861af187ab5db-007\"\n          }\n        ],\n        \"main_purse\": \"uref-09480c3248ef76b603d386f3f4f8a5f87f597d4eaffd475433f861af187ab5db-007\",\n        \"associated_keys\": [\n          {\n            \"account_hash\": \"account-hash-e94daaff79c2ab8d9c31d9c3058d7d0a0dd31204a5638dc1451fa67b2e3fb88c\",\n            \"weight\": 1\n          }\n        ],\n        \"action_thresholds\": {\n          \"deployment\": 1,\n          \"key_management\": 1\n        }\n      },\n      \"merkle_proof\": \"01000000006ef2e0949ac76e55812421f755abe129b6244fe7168b77f47a72536147614625016ef2e0949ac76e55812421f755abe129b6244fe7168b77f47a72536147614625000000003529cde5c621f857f75f3810611eb4af3f998caaa9d4a3413cf799f99c67db0307010000006ef2e0949ac76e55812421f755abe129b6244fe7168b77f47a7253614761462501010102000000006e06000000000074769d28aac597a36a03a932d4b43e4f10bf0403ee5c41dd035102553f5773631200b9e173e8f05361b681513c14e25e3138639eb03232581db7557c9e8dbbc83ce94500226a9a7fe4f2b7b88d5103a4fc7400f02bf89c860c9ccdd56951a2afe9be0e0267006d820fb5676eb2960e15722f7725f3f8f41030078f8b2e44bf0dc03f71b176d6e800dc5ae9805068c5be6da1a90b2528ee85db0609cc0fb4bd60bbd559f497a98b67f500e1e3e846592f4918234647fca39830b7e1e6ad6f5b7a99b39af823d82ba1873d000003000000010186ff500f287e9b53f823ae1582b1fa429dfede28015125fd233a31ca04d5012002015cc42669a55467a1fdf49750772bfc1aed59b9b085558eb81510e9b015a7c83b0301e3cf4a34b1db6bfa58808b686cb8fe21ebe0c1bcbcee522649d2b135fe510fe3\"\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Basic Global State Query with Casper Client\nDESCRIPTION: Basic command structure for querying global state using casper-client with node address, state root hash, key, and optional query path parameters.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/versioned_docs/version-1.5.X/developers/cli/installing-contracts.md#2025-04-22_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\ncasper-client query-global-state \\\n  --node-address [NODE_SERVER_ADDRESS] \\\n  --state-root-hash [STATE_ROOT_HASH] \\\n  --key [HASH_STRING] \\\n  -q \"[SESSION_NAME]/[SESSION_NAMED_KEY]\"\n```\n\n----------------------------------------\n\nTITLE: Example of Balance Query Result using JSON-RPC\nDESCRIPTION: This JSON structure represents the response from a `query_balance` request, showing the API version and the balance value in motes. This response indicates successful retrieval of the balance.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/versioned_docs/version-2.0.0/developers/json-rpc/json-rpc-informational.md#2025-04-22_snippet_15\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"jsonrpc\": \"2.0\",\n  \"id\": -6143675785141640608,\n  \"result\": {\n    \"name\": \"query_balance_result\",\n    \"value\": {\n      \"api_version\": \"2.0.0\",\n      \"balance\": \"123456\"\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Creating and Activating a Python Virtual Environment\nDESCRIPTION: Commands to create and activate a Python virtual environment on MacOS and Linux for isolating NCTL dependencies.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/versioned_docs/version-2.0.0/developers/dapps/setup-nctl.md#2025-04-22_snippet_8\n\nLANGUAGE: bash\nCODE:\n```\n$ python3 -m venv env\n$ source env/bin/activate\n(env) $\n```\n\n----------------------------------------\n\nTITLE: Defining Balance Hold with Proof Schema in OpenAPI\nDESCRIPTION: Defines a schema for balance holds with proof in the Casper Network API. It contains time, amount, and proof properties with appropriate references to other schema components.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/condor/jsonrpc-comp/rpc-2.0/schema.json.md#2025-04-22_snippet_88\n\nLANGUAGE: json\nCODE:\n```\n\"BalanceHoldWithProof\": {\n  \"type\": \"object\",\n  \"required\": [\n    \"amount\",\n    \"proof\",\n    \"time\"\n  ],\n  \"properties\": {\n    \"time\": {\n      \"description\": \"The block time at which the hold was created.\",\n      \"allOf\": [\n        {\n          \"$ref\": \"#/components/schemas/BlockTime\"\n        }\n      ]\n    },\n    \"amount\": {\n      \"description\": \"The amount in the hold.\",\n      \"allOf\": [\n        {\n          \"$ref\": \"#/components/schemas/U512\"\n        }\n      ]\n    },\n    \"proof\": {\n      \"description\": \"A proof that the given value is present in the Merkle trie.\",\n      \"type\": \"string\"\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Querying CEP-18 Utility Contract Hash (Without Comments)\nDESCRIPTION: This is the same command as above but without comments, for easier copy-pasting when interacting with a CEP-18 utility contract.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/versioned_docs/version-2.0.0/resources/tokens/cep18/query.md#2025-04-22_snippet_4\n\nLANGUAGE: json\nCODE:\n```\ncasper-client query-global-state -n http://<HOST IP>:<PORT> \\\n--key hash-015b99020edb40e7e1e2b31a8e104bc226242f960a2d10dc1d91ae3eb6fa41b6 \\\n--state-root-hash f9f73c3a4da5893b67c4cac94a5695d76cfefff61b050c98a7b19e2b8efd3933\n```\n\n----------------------------------------\n\nTITLE: Retrieving State Root Hash in Casper Network (Rust)\nDESCRIPTION: This command retrieves the current state root hash of the Casper network. The state root hash is an identifier of the current network state, similar to a Git commit ID. It's used to query the network state after sending deploys.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/versioned_docs/version-1.5.X/resources/beginner/counter-testnet/commands.md#2025-04-22_snippet_0\n\nLANGUAGE: rust\nCODE:\n```\ncasper-client get-state-root-hash --node-address [NODE_SERVER_ADDRESS]\n```\n\nLANGUAGE: rust\nCODE:\n```\ncasper-client get-state-root-hash --node-address http://[IP]:7777\n```\n\n----------------------------------------\n\nTITLE: Defining Bid Object Schema in JSON\nDESCRIPTION: Specifies the JSON schema for a `Bid` object, representing an entry in the validator map on the Casper Network. It includes required fields like `bonding_purse`, `delegation_rate`, `delegators`, `inactive`, `staked_amount`, and `validator_public_key`, referencing other schemas such as `PublicKey`, `URef`, `U512`, `VestingSchedule`, and `Array_of_PublicKeyAndDelegator`.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/condor/jsonrpc-comp/rpc-2.0/schema/components.json.md#2025-04-22_snippet_32\n\nLANGUAGE: json\nCODE:\n```\n\"Bid\": {\n    \"description\": \"An entry in the validator map.\",\n    \"type\": \"object\",\n    \"required\": [\n        \"bonding_purse\",\n        \"delegation_rate\",\n        \"delegators\",\n        \"inactive\",\n        \"staked_amount\",\n        \"validator_public_key\"\n    ],\n    \"properties\": {\n        \"validator_public_key\": {\n            \"description\": \"Validator public key.\",\n            \"allOf\": [\n                {\n                    \"$ref\": \"#/components/schemas/PublicKey\"\n                }\n            ]\n        },\n        \"bonding_purse\": {\n            \"description\": \"The purse that was used for bonding.\",\n            \"allOf\": [\n                {\n                    \"$ref\": \"#/components/schemas/URef\"\n                }\n            ]\n        },\n        \"staked_amount\": {\n            \"description\": \"The amount of tokens staked by a validator (not including delegators).\",\n            \"allOf\": [\n                {\n                    \"$ref\": \"#/components/schemas/U512\"\n                }\n            ]\n        },\n        \"delegation_rate\": {\n            \"description\": \"Delegation rate.\",\n            \"type\": \"integer\",\n            \"format\": \"uint8\",\n            \"minimum\": 0.0\n        },\n        \"vesting_schedule\": {\n            \"description\": \"Vesting schedule for a genesis validator. `None` if non-genesis validator.\",\n            \"anyOf\": [\n                {\n                    \"$ref\": \"#/components/schemas/VestingSchedule\"\n                },\n                {\n                    \"type\": \"null\"\n                }\n            ]\n        },\n        \"delegators\": {\n            \"description\": \"This validator's delegators, indexed by their public keys.\",\n            \"allOf\": [\n                {\n                    \"$ref\": \"#/components/schemas/Array_of_PublicKeyAndDelegator\"\n                }\n            ]\n        },\n        \"inactive\": {\n            \"description\": \"`true` if validator has been \\\"evicted\\\".\",\n            \"type\": \"boolean\"\n        }\n    },\n    \"additionalProperties\": false\n}\n```\n\n----------------------------------------\n\nTITLE: Updating Casper Network State for Transfer Operation in JSON\nDESCRIPTION: This JSON snippet represents a series of state transformations in the Casper Network, including balance updates, transfer records, and deploy information. It captures the details of a transfer operation, including source and target accounts, amount transferred, and associated metadata.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/versioned_docs/version-1.5.X/developers/cli/transfers/direct-token-transfer.md#2025-04-22_snippet_8\n\nLANGUAGE: json\nCODE:\n```\n[\n  {\n    \"key\": \"hash-010c3fe81b7b862e50c77ef9a958a05bfa98444f26f96f23d37a13c96244cfb7\",\n    \"transform\": \"Identity\"\n  },\n  {\n    \"key\": \"balance-11e6fc5354f61a004df98482376c45964b8b1557e8f2f13fb5f3adab5faa8be1\",\n    \"transform\": \"Identity\"\n  },\n  {\n    \"key\": \"balance-8294864177c2c1ec887a11dae095e487b5256ce6bd2a1f2740d0e4f28bd3251c\",\n    \"transform\": \"Identity\"\n  },\n  {\n    \"key\": \"balance-11e6fc5354f61a004df98482376c45964b8b1557e8f2f13fb5f3adab5faa8be1\",\n    \"transform\": {\n      \"WriteCLValue\": {\n        \"cl_type\": \"U512\",\n        \"bytes\": \"06622a383c0201\",\n        \"parsed\": \"1109111876194\"\n      }\n    }\n  },\n  {\n    \"key\": \"balance-8294864177c2c1ec887a11dae095e487b5256ce6bd2a1f2740d0e4f28bd3251c\",\n    \"transform\": {\n      \"AddUInt512\": \"5000000000\"\n    }\n  },\n  {\n    \"key\": \"transfer-0de7250864e67aa76626a844dcc931e615284a13a110df3f97cec9e3e97af405\",\n    \"transform\": {\n      \"WriteTransfer\": {\n        \"deploy_hash\": \"1f17a0bdeaaf71abd03492c854cdf97f746432751721ce555e95b9cefe641e3c\",\n        \"from\": \"account-hash-e70dbca48c2d31bc2d754e51860ceaa8a1a49dc627b20320b0ecee1b6d9ce655\",\n        \"to\": \"account-hash-1ed5a1c39bea93c105f2d22c965a84b205b36734a377d05dbb103b6bfaa595a7\",\n        \"source\": \"uref-11e6fc5354f61a004df98482376c45964b8b1557e8f2f13fb5f3adab5faa8be1-007\",\n        \"target\": \"uref-8294864177c2c1ec887a11dae095e487b5256ce6bd2a1f2740d0e4f28bd3251c-004\",\n        \"amount\": \"5000000000\",\n        \"gas\": \"0\",\n        \"id\": 11102023\n      }\n    }\n  },\n  {\n    \"key\": \"deploy-1f17a0bdeaaf71abd03492c854cdf97f746432751721ce555e95b9cefe641e3c\",\n    \"transform\": {\n      \"WriteDeployInfo\": {\n        \"deploy_hash\": \"1f17a0bdeaaf71abd03492c854cdf97f746432751721ce555e95b9cefe641e3c\",\n        \"transfers\": [\n          \"transfer-0de7250864e67aa76626a844dcc931e615284a13a110df3f97cec9e3e97af405\"\n        ],\n        \"from\": \"account-hash-e70dbca48c2d31bc2d754e51860ceaa8a1a49dc627b20320b0ecee1b6d9ce655\",\n        \"source\": \"uref-11e6fc5354f61a004df98482376c45964b8b1557e8f2f13fb5f3adab5faa8be1-007\",\n        \"gas\": \"100000000\"\n      }\n    }\n  },\n  {\n    \"key\": \"hash-8cf5e4acf51f54eb59291599187838dc3bc234089c46fc6ca8ad17e762ae4401\",\n    \"transform\": \"Identity\"\n  },\n  {\n    \"key\": \"hash-8cf5e4acf51f54eb59291599187838dc3bc234089c46fc6ca8ad17e762ae4401\",\n    \"transform\": \"Identity\"\n  },\n  {\n    \"key\": \"hash-624dbe2395b9d9503fbee82162f1714ebff6b639f96d2084d26d944c354ec4c5\",\n    \"transform\": \"Identity\"\n  },\n  {\n    \"key\": \"hash-8cf5e4acf51f54eb59291599187838dc3bc234089c46fc6ca8ad17e762ae4401\",\n    \"transform\": \"Identity\"\n  },\n  {\n    \"key\": \"balance-98d945f5324f865243b7c02c0417ab6eac361c5c56602fd42ced834a1ba201b6\",\n    \"transform\": \"Identity\"\n  },\n  {\n    \"key\": \"hash-8cf5e4acf51f54eb59291599187838dc3bc234089c46fc6ca8ad17e762ae4401\",\n    \"transform\": \"Identity\"\n  },\n  {\n    \"key\": \"hash-010c3fe81b7b862e50c77ef9a958a05bfa98444f26f96f23d37a13c96244cfb7\",\n    \"transform\": \"Identity\"\n  },\n  {\n    \"key\": \"hash-9824d60dc3a5c44a20b9fd260a412437933835b52fc683d8ae36e4ec2114843e\",\n    \"transform\": \"Identity\"\n  },\n  {\n    \"key\": \"hash-010c3fe81b7b862e50c77ef9a958a05bfa98444f26f96f23d37a13c96244cfb7\",\n    \"transform\": \"Identity\"\n  },\n  {\n    \"key\": \"balance-98d945f5324f865243b7c02c0417ab6eac361c5c56602fd42ced834a1ba201b6\",\n    \"transform\": \"Identity\"\n  },\n  {\n    \"key\": \"balance-da632bfba17f4a7882581de2a37219be71628600ccd0df83f1d42465bd018537\",\n    \"transform\": \"Identity\"\n  },\n  {\n    \"key\": \"balance-98d945f5324f865243b7c02c0417ab6eac361c5c56602fd42ced834a1ba201b6\",\n    \"transform\": {\n      \"WriteCLValue\": {\n        \"cl_type\": \"U512\",\n        \"bytes\": \"00\",\n        \"parsed\": \"0\"\n      }\n    }\n  },\n  {\n    \"key\": \"balance-da632bfba17f4a7882581de2a37219be71628600ccd0df83f1d42465bd018537\",\n    \"transform\": {\n      \"AddUInt512\": \"100000000\"\n    }\n  }\n]\n```\n\n----------------------------------------\n\nTITLE: Rebuilding the Casper Contract using Make\nDESCRIPTION: This Bash snippet shows optional `make` commands that can be used to manage the contract build process, potentially after modifying the `Makefile` to change the output filename. `make prepare` likely handles setup or dependency tasks, while `make build-contract` triggers the compilation process similar to the direct `cargo build` command shown earlier.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/versioned_docs/version-1.5.X/resources/advanced/cross-contract.md#2025-04-22_snippet_19\n\nLANGUAGE: bash\nCODE:\n```\nmake prepare\nmake build-contract\n\n```\n\n----------------------------------------\n\nTITLE: Defining Entry Point Access Controls in JSON\nDESCRIPTION: JSON Schema definition for contract entry point access controls, specifying public, group-based or template access patterns. This schema ensures proper configuration of method-level access restrictions.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/condor/jsonrpc-comp/rpc-2.0/schema.json.md#2025-04-22_snippet_67\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"description\": \"Enum describing the possible access control options for a contract entry point (method).\",\n  \"oneOf\": [\n    {\n      \"description\": \"Anyone can call this method (no access controls).\",\n      \"type\": \"string\",\n      \"enum\": [\n        \"Public\"\n      ]\n    },\n    {\n      \"description\": \"Only users from the listed groups may call this method. Note: if the list is empty then this method is not callable from outside the contract.\",\n      \"type\": \"object\",\n      \"required\": [\n        \"Groups\"\n      ],\n      \"properties\": {\n        \"Groups\": {\n          \"type\": \"array\",\n          \"items\": {\n            \"$ref\": \"#/components/schemas/Group\"\n          }\n        }\n      },\n      \"additionalProperties\": false\n    },\n    {\n      \"description\": \"Can't be accessed directly but are kept in the derived wasm bytes.\",\n      \"type\": \"string\",\n      \"enum\": [\n        \"Template\"\n      ]\n    }\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Undelegating Tokens via System Auction Contract\nDESCRIPTION: Command to undelegate tokens using the system auction contract's undelegate entry point. This is the recommended method as it's more cost-effective, requiring 2.5 CSPR payment. Requires node address, secret key, chain name, and validator details.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/versioned_docs/version-1.5.X/developers/cli/undelegate.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ncasper-client put-deploy \\\n--node-address <HOST:PORT> \\\n--secret-key <PATH> \\\n--chain-name <CHAIN_NAME> \\\n--payment-amount <PAYMENT_AMOUNT_IN_MOTES> \\\n--session-hash <SESSION_HASH> \\\n--session-entry-point undelegate \\\n--session-arg \"validator:public_key='<HEX_ENCODED_VALIDATOR_PULIC_KEY>'\" \\\n--session-arg \"amount:u512='<AMOUNT_TO_UNDELEGATE>'\" \\\n--session-arg \"delegator:public_key='<HEX_ENCODED_DELEGATOR_PULIC_KEY>'\"\n```\n\n----------------------------------------\n\nTITLE: Running the Ethereum Key Conversion Script\nDESCRIPTION: Command to execute the key conversion script and save the output to a PEM file. This creates a PEM-formatted private key that can be used with the Casper client.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/docs/concepts/accounts-and-keys.md#2025-04-22_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\nnode convert-to-pem.js > eth-secret.pem\n```\n\n----------------------------------------\n\nTITLE: Getting Updated State Root Hash using Casper Client (Bash)\nDESCRIPTION: Retrieves the latest state root hash from the specified node *after* the increment operation deploy has been processed. This is crucial for querying the updated state.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/docs/resources/quick-start.md#2025-04-22_snippet_20\n\nLANGUAGE: bash\nCODE:\n```\ncasper-client get-state-root-hash --node-address [NODE_ADDRESS]\n```\n\n----------------------------------------\n\nTITLE: CLValue and Balance Transformations in Casper Contract\nDESCRIPTION: JSON showing transformations that modify contract state, including writing a CLValue of type U512 with value 0 to one balance key and adding 20000000000 units to another balance key. These represent actual state changes from the contract execution.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/docs/resources/advanced/cross-contract.md#2025-04-22_snippet_23\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"key\": \"balance-98d945f5324f865243b7c02c0417ab6eac361c5c56602fd42ced834a1ba201b6\",\n  \"transform\": {\n    \"WriteCLValue\": {\n      \"bytes\": \"00\",\n      \"cl_type\": \"U512\",\n      \"parsed\": \"0\"\n    }\n  }\n},\n{\n  \"key\": \"balance-bb9f47c30ddbe192438fad10b7db8200247529d6592af7159d92c5f3aa7716a1\",\n  \"transform\": {\n    \"AddUInt512\": \"20000000000\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining MinimalBlockInfo Schema - OpenAPI/Swagger - JSON\nDESCRIPTION: Describes the 'MinimalBlockInfo' object for representing essential block details in the Casper blockchain. Specifies required fields (creator, era_id, hash, height, state_root_hash, timestamp) and their types or schema references. Ensures validation by prohibiting any properties beyond those defined, making it suitable for concise block metadata exposure. Relies on referenced schemas (e.g., BlockHash, Timestamp) elsewhere in the API specification.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/condor/jsonrpc-comp/rpc-1.5/schema/components.json.md#2025-04-22_snippet_50\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"description\": \"Minimal info of a `Block`.\",\n  \"type\": \"object\",\n  \"required\": [\n    \"creator\",\n    \"era_id\",\n    \"hash\",\n    \"height\",\n    \"state_root_hash\",\n    \"timestamp\"\n  ],\n  \"properties\": {\n    \"hash\": {\n      \"$ref\": \"#/components/schemas/BlockHash\"\n    },\n    \"timestamp\": {\n      \"$ref\": \"#/components/schemas/Timestamp\"\n    },\n    \"era_id\": {\n      \"$ref\": \"#/components/schemas/EraId\"\n    },\n    \"height\": {\n      \"type\": \"integer\",\n      \"format\": \"uint64\",\n      \"minimum\": 0.0\n    },\n    \"state_root_hash\": {\n      \"$ref\": \"#/components/schemas/Digest\"\n    },\n    \"creator\": {\n      \"$ref\": \"#/components/schemas/PublicKey\"\n    }\n  },\n  \"additionalProperties\": false\n}\n```\n\n----------------------------------------\n\nTITLE: Example of CEP-78 Metadata JSON Structure\nDESCRIPTION: This example shows the standard format for CEP-78 metadata, which includes name, token_uri, and checksum fields. This format is used when the NFTMetadataKind is set to 'CEP78'.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/versioned_docs/version-2.0.0/resources/tokens/cep78/modalities.md#2025-04-22_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"name\": \"John Doe\",\n  \"token_uri\": \"https://www.barfoo.com\",\n  \"checksum\": \"940bffb3f2bba35f84313aa26da09ece3ad47045c6a1292c2bbd2df4ab1a55fb\"\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Payload Types in Rust for Casper Node Communication\nDESCRIPTION: Definition of the Payload enum and related message types used for node-to-node communication in the Casper network. These structures handle various communication needs like consensus, gossiping, and data requests/responses.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/docs/concepts/design/networking-protocol.md#2025-04-22_snippet_1\n\nLANGUAGE: rust\nCODE:\n```\nenum Payload {\n    Consensus(ConsensusMessage),\n    DeployGossiper(DeployGossiperMessage),\n    AddressGossiper(AddressGossiperMessage),\n    GetRequest {\n        tag: Tag,\n        serialized_id: Vec<u8>,\n    },\n    GetResponse {\n        tag: Tag,\n        serialized_item: Vec<[u8]>,\n    },\n    FinalitySignature(FinalitySignature),\n}\n\nenum DeployGossiperMessage {\n    Gossip(DeployHash),\n    GossipResponse {\n        item_id: DeployHash,\n        is_already_held: bool,\n    },\n}\n\nenum AddressGossiperMessage {\n    Gossip(GossippedAddress),\n    GossipResponse {\n        item_id: GossippedAddress,\n        is_already_held: bool,\n    },\n}\n\nstruct DeployHash(Digest);\nstruct GossipedAddress(SocketAddr);\n```\n\n----------------------------------------\n\nTITLE: Creating A Non-Root User Without Password in Bash\nDESCRIPTION: The snippet shows how to add a new user without a password, utilizing the public SSH key for authentication instead. The command uses bash to execute the user creation with a disabled password feature.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/docs/operators/setup/non-root-user.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nsudo adduser <username> --disabled-password\n```\n\n----------------------------------------\n\nTITLE: Force Node Version Command\nDESCRIPTION: Command to set specific protocol version for node startup after database restoration.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/versioned_docs/version-2.0.0/operators/maintenance/archiving-and-restoring.md#2025-04-22_snippet_11\n\nLANGUAGE: bash\nCODE:\n```\nsudo /etc/casper/node_util.py force_run_version 1_4_5\n```\n\n----------------------------------------\n\nTITLE: Querying Target Purse Balance with casper-client CLI (Bash)\nDESCRIPTION: This casper-client command retrieves the balance of a target purse using a specified purse identifier (e.g. public key of the target account), a node address, and a state root hash. The id is used for request tracking. It is essential for verifying the target account’s purse balance post-transaction. The command requires a working casper-client and correct purse and state identifiers.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/docs/developers/cli/transfers/verify-transfer.md#2025-04-22_snippet_8\n\nLANGUAGE: bash\nCODE:\n```\ncasper-client get-balance \\\n--id 7 \\\n--node-address [NODE_SERVER_ADDRESS] \\\n--state-root-hash [STATE_ROOT_HAHS] \\\n--purse-identifier [TARGET_PUBLIC_KEY_HEX] \n```\n\n----------------------------------------\n\nTITLE: Configuring Web Crawler Access Controls for Casper Network Documentation\nDESCRIPTION: A robots.txt configuration that instructs web crawlers on which parts of the site to avoid indexing. It blocks access to CNAME, opensearch.xml, and .nojekyll files, while directing crawlers to the sitemap and including Algolia crawler verification.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/static/robots.txt#2025-04-22_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\nUser-agent: *\nDisallow: /CNAME\nDisallow: /opensearch.xml\nDisallow: /.nojekyll\nSitemap: https://docs.casper.network/sitemap.xml\n# Algolia-Crawler-Verif: CE382CF3AA18FA59\n```\n\n----------------------------------------\n\nTITLE: Configuring Core Private Network Settings\nDESCRIPTION: Comprehensive TOML configuration for private network settings including transfer restrictions, rewards computation, auction bids, refund handling, and administrator definitions.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/versioned_docs/version-2.0.0/operators/setup-network/create-private.md#2025-04-22_snippet_1\n\nLANGUAGE: toml\nCODE:\n```\n[core]\nallow_unrestricted_transfers = false\ncompute_rewards = false\nallow_auction_bids = false\nrefund_handling = { type = \"refund\", refund_ratio = [1, 1] }\nfee_handling = { type = \"accumulate\" }\nadministrators = [\"ADMIN_PUBLIC_KEY\"]\n```\n\n----------------------------------------\n\nTITLE: Generating Casper Node Keys with Bash\nDESCRIPTION: Command for generating cryptographic keys for a Casper node using the casper-client tool. Creates keys in the /etc/casper/validator_keys directory.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/versioned_docs/version-2.0.0/operators/setup/basic-node-configuration.md#2025-04-22_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\nsudo -u casper casper-client keygen /etc/casper/validator_keys\n```\n\n----------------------------------------\n\nTITLE: Defining `account_put_transaction` RPC Method (JSON)\nDESCRIPTION: This JSON object defines the structure and provides an example for the `account_put_transaction` RPC method. It specifies that the method takes a single required parameter `transaction` (referencing the `Transaction` schema) and returns an object containing `api_version` (string) and `transaction_hash` (referencing the `TransactionHash` schema). An example demonstrates the structure of a transaction request and the corresponding result.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/condor/jsonrpc-comp/rpc-2.0/account_put_transaction.json.md#2025-04-22_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"name\": \"account_put_transaction\",\n  \"summary\": \"receives a Transaction to be executed by the network\",\n  \"params\": [\n    {\n      \"name\": \"transaction\",\n      \"schema\": {\n        \"description\": \"The `Transaction`.\",\n        \"$ref\": \"#/components/schemas/Transaction\"\n      },\n      \"required\": true\n    }\n  ],\n  \"result\": {\n    \"name\": \"account_put_transaction_result\",\n    \"schema\": {\n      \"description\": \"Result for \\\"account_put_transaction\\\" RPC response.\",\n      \"type\": \"object\",\n      \"required\": [\n        \"api_version\",\n        \"transaction_hash\"\n      ],\n      \"properties\": {\n        \"api_version\": {\n          \"description\": \"The RPC API version.\",\n          \"type\": \"string\"\n        },\n        \"transaction_hash\": {\n          \"description\": \"The transaction hash.\",\n          \"$ref\": \"#/components/schemas/TransactionHash\"\n        }\n      },\n      \"additionalProperties\": false\n    }\n  },\n  \"examples\": [\n    {\n      \"name\": \"account_put_transaction_example\",\n      \"params\": [\n        {\n          \"name\": \"transaction\",\n          \"value\": {\n            \"Version1\": {\n              \"hash\": \"f5582cb81a5abda63ebaa4edb3b05210ecbd63ffb8dd17bfbeb3b867f4014468\",\n              \"header\": {\n                \"chain_name\": \"casper-example\",\n                \"timestamp\": \"2020-11-17T00:39:24.072Z\",\n                \"ttl\": \"1h\",\n                \"body_hash\": \"aa24833ffbf31d62c8c8c4265349e7c09cd71952fcbce6f7b12daf5e340bf2cc\",\n                \"pricing_mode\": {\n                  \"Fixed\": {\n                    \"gas_price_tolerance\": 5\n                  }\n                },\n                \"initiator_addr\": {\n                  \"PublicKey\": \"01d9bf2148748a85c89da5aad8ee0b0fc2d105fd39d41a4c796536354f0ae2900c\"\n                }\n              },\n              \"body\": {\n                \"args\": [\n                  [\n                    \"source\",\n                    {\n                      \"cl_type\": {\n                        \"Option\": \"URef\"\n                      },\n                      \"bytes\": \"010a0a0a0a0a0a0a0a0a0a0a0a0a0a0a0a0a0a0a0a0a0a0a0a0a0a0a0a0a0a0a0a07\",\n                      \"parsed\": \"uref-0a0a0a0a0a0a0a0a0a0a0a0a0a0a0a0a0a0a0a0a0a0a0a0a0a0a0a0a0a0a0a0a-007\"\n                    }\n                  ],\n                  [\n                    \"target\",\n                    {\n                      \"cl_type\": \"URef\",\n                      \"bytes\": \"1b1b1b1b1b1b1b1b1b1b1b1b1b1b1b1b1b1b1b1b1b1b1b1b1b1b1b1b1b1b1b1b00\",\n                      \"parsed\": \"uref-1b1b1b1b1b1b1b1b1b1b1b1b1b1b1b1b1b1b1b1b1b1b1b1b1b1b1b1b1b1b1b1b-000\"\n                    }\n                  ],\n                  [\n                    \"amount\",\n                    {\n                      \"cl_type\": \"U512\",\n                      \"bytes\": \"0500ac23fc06\",\n                      \"parsed\": \"30000000000\"\n                    }\n                  ],\n                  [\n                    \"id\",\n                    {\n                      \"cl_type\": {\n                        \"Option\": \"U64\"\n                      },\n                      \"bytes\": \"01e703000000000000\",\n                      \"parsed\": 999\n                    }\n                  ]\n                ],\n                \"target\": \"Native\",\n                \"entry_point\": \"Transfer\",\n                \"transaction_category\": 0,\n                \"scheduling\": \"Standard\"\n              },\n              \"approvals\": [\n                {\n                  \"signer\": \"01d9bf2148748a85c89da5aad8ee0b0fc2d105fd39d41a4c796536354f0ae2900c\",\n                  \"signature\": \"0137d3f468d8f8a6e63f4110d79be29b8c8428e9cd858a92049660e7851ae16a299640d1fc1c930ab6cb424f1a6eec0b194df74bede14f4af1b5133106f1280d0b\"\n                }\n              ]\n            }\n          }\n        }\n      ],\n      \"result\": {\n        \"name\": \"account_put_transaction_example_result\",\n        \"value\": {\n          \"api_version\": \"2.0.0\",\n          \"transaction_hash\": {\n            \"Version1\": \"f5582cb81a5abda63ebaa4edb3b05210ecbd63ffb8dd17bfbeb3b867f4014468\"\n          }\n        }\n      }\n    }\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Retrieving Account Information in a Casper Network\nDESCRIPTION: Command to query and display account information for a user (Alice) in a Casper network. This uses the casper-client to retrieve details about an account using its public key.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/docs/operators/setup-network/create-private.md#2025-04-22_snippet_17\n\nLANGUAGE: sh\nCODE:\n```\ncasper-client get-account-info -n $NODE_ADDR\n  --public-key alice/public_key.pem\n```\n\n----------------------------------------\n\nTITLE: Creating Contract Binary Package with cargo (Bash)\nDESCRIPTION: Illustrates using the standard `cargo new` command to create the binary package directory (`contract`) for the smart contract source code. This is a step in the semi-automatic project setup method and requires Rust and Cargo to be installed. It generates the `contract/src/main.rs` file and `contract/Cargo.toml`.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/versioned_docs/version-1.5.X/developers/writing-onchain-code/simple-contract.md#2025-04-22_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\ncargo new contract\n```\n\n----------------------------------------\n\nTITLE: Calling Contract Entry Point\nDESCRIPTION: Command to invoke a contract entry point using the package name via the Casper command-line client.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/versioned_docs/version-1.5.X/resources/beginner/upgrade-contract.md#2025-04-22_snippet_8\n\nLANGUAGE: bash\nCODE:\n```\ncasper-client put-deploy \\\n    --node-address http://[NODE_IP]:7777 \\\n    --chain-name [CHAIN_NAME] \\\n    --secret-key [PATH_TO_YOUR_KEY]/secret_key.pem \\\n    --payment-amount [PAYMENT_AMOUNT_IN_MOTES] \\\n    --session-package-name \"counter_package_name\" \\\n    --session-entry-point \"counter_decrement\"\n```\n\n----------------------------------------\n\nTITLE: Defining ValidatorWeight Array Schema in JSON\nDESCRIPTION: JSON schema for an array of ValidatorWeight objects which represent validators and their weights in the Casper blockchain.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/condor/jsonrpc-comp/rpc-2.0/schema/components.json.md#2025-04-22_snippet_70\n\nLANGUAGE: json\nCODE:\n```\n\"Array_of_ValidatorWeight\": {\n    \"type\": \"array\",\n    \"items\": {\n        \"$ref\": \"#/components/schemas/ValidatorWeight\"\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining ExecutionResult Schema in JSON Schema\nDESCRIPTION: JSON Schema definition for the ExecutionResult data structure, which provides a versioned wrapper for deploy execution results, supporting both Version1 and Version2 formats.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/condor/jsonrpc-comp/rpc-2.0/schema.json.md#2025-04-22_snippet_48\n\nLANGUAGE: json\nCODE:\n```\n\"ExecutionResult\": {\n  \"description\": \"The versioned result of executing a single deploy.\",\n  \"oneOf\": [\n    {\n      \"description\": \"Version 1 of execution result type.\",\n      \"type\": \"object\",\n      \"required\": [\n        \"Version1\"\n      ],\n      \"properties\": {\n        \"Version1\": {\n          \"$ref\": \"#/components/schemas/ExecutionResultV1\"\n        }\n      },\n      \"additionalProperties\": false\n    },\n    {\n      \"description\": \"Version 2 of execution result type.\",\n      \"type\": \"object\",\n      \"required\": [\n        \"Version2\"\n      ],\n      \"properties\": {\n        \"Version2\": {\n          \"$ref\": \"#/components/schemas/ExecutionResultV2\"\n        }\n      },\n      \"additionalProperties\": false\n    }\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Defining CLType Tuple1 Schema in JSON\nDESCRIPTION: JSON schema definition for a 1-ary tuple type in Casper's type system. This represents a tuple containing a single CLType.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/condor/jsonrpc-comp/rpc-1.5/schema/components.json.md#2025-04-22_snippet_8\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"description\": \"1-ary tuple of a `CLType`.\",\n    \"type\": \"object\",\n    \"required\": [\n        \"Tuple1\"\n    ],\n    \"properties\": {\n        \"Tuple1\": {\n            \"type\": \"array\",\n            \"items\": {\n                \"$ref\": \"#/components/schemas/CLType\"\n            },\n            \"maxItems\": 1,\n            \"minItems\": 1\n        }\n    },\n    \"additionalProperties\": false\n}\n```\n\n----------------------------------------\n\nTITLE: JSON-RPC Request for Querying Block Information in Casper Network\nDESCRIPTION: This JSON-RPC request demonstrates the structure of a query to retrieve block information from the Casper Network. It includes the method name and parameters required for the request.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/docs/resources/beginner/querying-network.md#2025-04-22_snippet_10\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"id\": 3,\n    \"jsonrpc\": \"2.0\",\n    \"method\": \"chain_get_block\",\n    \"params\": {\n        \"block_identifier\": {\n            \"Hash\": \"7c7e9b0f087bba5ce6fc4bd067b57f69ea3c8109157a3ad7f6d98b8da77d97f9\"\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Contract Call with Session Arguments Template\nDESCRIPTION: Template showing how to call a contract with session arguments. Includes all basic parameters plus the session-arg option for passing named and typed arguments to the contract.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/versioned_docs/version-1.5.X/developers/cli/calling-contracts.md#2025-04-22_snippet_2\n\nLANGUAGE: rust\nCODE:\n```\ncasper-client put-deploy \\\n    --node-address [NODE_SERVER_ADDRESS] \\\n    --chain-name [CHAIN_NAME] \\\n    --secret-key [KEY_PATH]/secret_key.pem \\\n    --payment-amount [PAYMENT_AMOUNT_IN_MOTES] \\\n    --session-hash [HEX_STRING] \\\n    --session-entry-point [ENTRY_POINT_FUNCTION] \\\n    --session-arg [\"NAME:TYPE='VALUE'\" OR \"NAME:TYPE=null\"]...\n```\n\n----------------------------------------\n\nTITLE: Defining Bid (Validator Entry) Schema in JSON\nDESCRIPTION: This JSON schema defines the structure for a 'Bid', representing an entry in the validator map. It includes required properties like the bonding purse URef, delegation rate, delegators map, inactivity status, staked amount, and validator public key. It also includes optional properties like the vesting schedule (nullable). It references external schemas for 'PublicKey', 'URef', 'U512', 'VestingSchedule', and 'Delegator'.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/condor/jsonrpc-comp/rpc-1.5/schema/components.json.md#2025-04-22_snippet_34\n\nLANGUAGE: json\nCODE:\n```\n\"description\": \"An entry in the validator map.\",\n\"type\": \"object\",\n\"required\": [\n    \"bonding_purse\",\n    \"delegation_rate\",\n    \"delegators\",\n    \"inactive\",\n    \"staked_amount\",\n    \"validator_public_key\"\n],\n\"properties\": {\n    \"validator_public_key\": {\n        \"description\": \"Validator public key\",\n        \"allOf\": [\n            {\n                \"$ref\": \"#/components/schemas/PublicKey\"\n            }\n        ]\n    },\n    \"bonding_purse\": {\n        \"description\": \"The purse that was used for bonding.\",\n        \"allOf\": [\n            {\n                \"$ref\": \"#/components/schemas/URef\"\n            }\n        ]\n    },\n    \"staked_amount\": {\n        \"description\": \"The amount of tokens staked by a validator (not including delegators).\",\n        \"allOf\": [\n            {\n                \"$ref\": \"#/components/schemas/U512\"\n            }\n        ]\n    },\n    \"delegation_rate\": {\n        \"description\": \"Delegation rate\",\n        \"type\": \"integer\",\n        \"format\": \"uint8\",\n        \"minimum\": 0.0\n    },\n    \"vesting_schedule\": {\n        \"description\": \"Vesting schedule for a genesis validator. `None` if non-genesis validator.\",\n        \"anyOf\": [\n            {\n                \"$ref\": \"#/components/schemas/VestingSchedule\"\n            },\n            {\n                \"type\": \"null\"\n            }\n        ]\n    },\n    \"delegators\": {\n        \"description\": \"This validator's delegators, indexed by their public keys\",\n        \"type\": \"object\",\n        \"additionalProperties\": {\n            \"$ref\": \"#/components/schemas/Delegator\"\n        }\n    },\n    \"inactive\": {\n        \"description\": \"`true` if validator has been \\\"evicted\\\"\",\n        \"type\": \"boolean\"\n    }\n},\n\"additionalProperties\": false\n\n```\n\n----------------------------------------\n\nTITLE: Defining Validator Bid Bridge Schema using JSON Schema - JSON\nDESCRIPTION: This JSON Schema snippet defines a bridge record object detailing the transition from an old validator public key to a new one, referencing existing PublicKey and EraId components for typed validation. Required properties are 'era_id', 'old_validator_public_key', and 'new_validator_public_key', ensuring all fields critical to a bridge event are present. The schema restricts additional properties to disallow any fields beyond those specified, supporting API consistency and contract compliance.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/condor/jsonrpc-comp/rpc-2.0/schema/Bridge.json.md#2025-04-22_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\\n    \\\"description\\\": \\\"A bridge record pointing to a new `ValidatorBid` after the public key was changed.\\\",\\n    \\\"type\\\": \\\"object\\\",\\n    \\\"required\\\": [\\n        \\\"era_id\\\",\\n        \\\"new_validator_public_key\\\",\\n        \\\"old_validator_public_key\\\"\\n    ],\\n    \\\"properties\\\": {\\n        \\\"old_validator_public_key\\\": {\\n            \\\"description\\\": \\\"Previous validator public key associated with the bid.\\\",\\n            \\\"allOf\\\": [\\n                {\\n                    \\\"$ref\\\": \\\"#/components/schemas/PublicKey\\\"\\n                }\\n            ]\\n        },\\n        \\\"new_validator_public_key\\\": {\\n            \\\"description\\\": \\\"New validator public key associated with the bid.\\\",\\n            \\\"allOf\\\": [\\n                {\\n                    \\\"$ref\\\": \\\"#/components/schemas/PublicKey\\\"\\n                }\\n            ]\\n        },\\n        \\\"era_id\\\": {\\n            \\\"description\\\": \\\"Era when bridge record was created.\\\",\\n            \\\"allOf\\\": [\\n                {\\n                    \\\"$ref\\\": \\\"#/components/schemas/EraId\\\"\\n                }\\n            ]\\n        }\\n    },\\n    \\\"additionalProperties\\\": false\\n} \n```\n\n----------------------------------------\n\nTITLE: Example Account Configuration Response\nDESCRIPTION: Sample JSON response showing the account configuration after multi-signature setup, including associated keys and action thresholds.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/versioned_docs/version-2.0.0/resources/advanced/two-party-multi-sig.md#2025-04-22_snippet_4\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"id\": 1126043166167626077,\n    \"jsonrpc\": \"2.0\",\n    \"result\": {\n        \"api_version\": \"1.0.0\",\n        \"merkle_proof\": \"2226 chars\",\n        \"stored_value\": {\n            \"Account\": {\n                \"account_hash\": \"account-hash-dc88a1819381c5ebbc3432e5c1d94df18cdcd7253b85259eeebe0ec8661bb84a\",\n                \"action_thresholds\": {\n                    \"deployment\": 2,\n                    \"key_management\": 2\n                },\n                \"associated_keys\": [\n                    {\n                        \"account_hash\": \"account-hash-12dee9fe535bfd8fd335fce1ba1f972f26bb60029a303b310d85419357d18f51\",\n                        \"weight\": 1\n                    },\n                    {\n                        \"account_hash\": \"account-hash-dc88a1819381c5ebbc3432e5c1d94df18cdcd7253b85259eeebe0ec8661bb84a\",\n                        \"weight\": 1\n                    }\n                ],\n                \"main_purse\": \"uref-74b20e9722d3f087f9dc431e9f0fcc6a803c256e005fa45b64a101512001cb78-007\",\n                \"named_keys\": []\n            }\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Token Transfer Deploy with make-transfer Command\nDESCRIPTION: Command to create a transfer deploy with initial signature, transferring 2.5 billion motes with specified parameters including chain name, target account, and payment amount. The output is saved to transfer.deploy file.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/versioned_docs/version-1.5.X/developers/cli/transfers/multisig-deploy-transfer.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ncasper-client make-transfer --amount 2500000000 \\\n--secret-key [PATH]/secret_key.pem \\\n--chain-name casper-test \\\n--target-account [PUBLIC_KEY_HEX] \\\n--transfer-id [ID] \\\n--payment-amount 100000000 \\\n--output transfer.deploy\n```\n\n----------------------------------------\n\nTITLE: Configuring Chainspec Reward Parameters in JSON\nDESCRIPTION: Sample chainspec configuration showing the key parameters that control reward calculations in the Casper network. Includes settings for finality signature proportion, finder's fee, signature rewards delay, and round seigniorage rate.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/versioned_docs/version-2.0.0/concepts/design/rewards.md#2025-04-22_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n# The split in finality signature rewards between block producer and participating signers.\nfinders_fee = [1, 5]\n# The proportion of baseline rewards going to reward finality signatures specifically.\nfinality_signature_proportion = [1, 2]\n# Lookback interval indicating which past block we are looking at to reward.\nsignature_rewards_max_delay = 3\n...\n# Round seigniorage rate represented as a fraction of the total supply.\n#\n# Annual issuance: 8%\n# Minimum block time: 2^14 milliseconds\n# Ticks per year: 31536000000\n#\n# (1+0.08)^((2^14)/31536000000)-1 is expressed as a fractional number below\n# Python:\n# from fractions import Fraction\n# Fraction((1 + 0.08)**((2**14)/31536000000) - 1).limit_denominator(1000000000)\nround_seigniorage_rate = [7, 175070816]\n```\n\n----------------------------------------\n\nTITLE: Defining Parameter Schema for Methods - JSON\nDESCRIPTION: This JSON snippet defines a schema object for a method parameter, specifying that the 'name' property must be a string and the 'cl_type' property must reference the 'CLType' schema. The structure enforces that both properties are required, aiding in API request validation and documentation generation. Dependencies include the existence of the referenced 'CLType' schema within the '#/components/schemas' path. Inputs conforming to this schema must include 'cl_type' and 'name', with strict adherence to type constraints.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/condor/jsonrpc-comp/rpc-2.0/schema/Parameter.json.md#2025-04-22_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\\n    \\\"description\\\": \\\"Parameter to a method\\\",\\n    \\\"type\\\": \\\"object\\\",\\n    \\\"required\\\": [\\n        \\\"cl_type\\\",\\n        \\\"name\\\"\\n    ],\\n    \\\"properties\\\": {\\n        \\\"name\\\": {\\n            \\\"type\\\": \\\"string\\\"\\n        },\\n        \\\"cl_type\\\": {\\n            \\\"$ref\\\": \\\"#/components/schemas/CLType\\\"\\n        }\\n    }\\n} \n```\n\n----------------------------------------\n\nTITLE: Retrieving Deploy Information with Casper Network JSON RPC\nDESCRIPTION: This snippet defines the parameters and response schema for the 'info_get_deploy' operation in the Casper Network JSON RPC API. It includes the 'deploy_hash' as a required parameter and an optional 'finalized_approvals' boolean, which defaults to false. The result part of the JSON provides details on the expected structure, including required properties such as 'api_version', 'deploy', and 'execution_results'. This structure is crucial for interacting with the Casper Network to access deploy information.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/condor/jsonrpc-comp/rpc-1.5/info_get_deploy.json.md#2025-04-22_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"name\": \"info_get_deploy\",\n  \"summary\": \"returns a Deploy from the network\",\n  \"params\": [\n    {\n      \"name\": \"deploy_hash\",\n      \"schema\": {\n        \"description\": \"The deploy hash.\",\n        \"$ref\": \"#/components/schemas/DeployHash\"\n      },\n      \"required\": true\n    },\n    {\n      \"name\": \"finalized_approvals\",\n      \"schema\": {\n        \"description\": \"Whether to return the deploy with the finalized approvals substituted. If `false` or omitted, returns the deploy with the approvals that were originally received by the node.\",\n        \"default\": false,\n        \"type\": \"boolean\"\n      },\n      \"required\": false\n    }\n  ],\n  \"result\": {\n    \"name\": \"info_get_deploy_result\",\n    \"schema\": {\n      \"description\": \"Result for \\\"info_get_deploy\\\" RPC response.\",\n      \"type\": \"object\",\n      \"required\": [\n        \"api_version\",\n        \"deploy\",\n        \"execution_results\"\n      ],\n      \"properties\": {\n        \"api_version\": {\n          \"description\": \"The RPC API version.\",\n          \"type\": \"string\"\n        },\n        \"deploy\": {\n          \"description\": \"The deploy.\",\n          \"$ref\": \"#/components/schemas/Deploy\"\n        },\n        \"execution_results\": {\n          \"description\": \"The map of block hash to execution result.\",\n          \"type\": \"array\",\n          \"items\": {\n            \"$ref\": \"#/components/schemas/JsonExecutionResult\"\n          }\n        },\n        \"block_hash\": {\n          \"description\": \"The hash of this deploy's block.\",\n          \"$ref\": \"#/components/schemas/BlockHash\"\n        },\n        \"block_height\": {\n          \"description\": \"The height of this deploy's block.\",\n          \"type\": \"integer\",\n          \"format\": \"uint64\",\n          \"minimum\": 0.0\n        }\n      },\n      \"additionalProperties\": false\n    }\n  },\n  \"examples\": [\n    {\n      \"name\": \"info_get_deploy_example\",\n      \"params\": [\n        {\n          \"name\": \"deploy_hash\",\n          \"value\": \"5c9b3b099c1378aa8e4a5f07f59ff1fcdc69a83179427c7e67ae0377d94d93fa\"\n        },\n        {\n          \"name\": \"finalized_approvals\",\n          \"value\": true\n        }\n      ],\n      \"result\": {\n        \"name\": \"info_get_deploy_example_result\",\n        \"value\": {\n          \"api_version\": \"1.5.6\",\n          \"deploy\": {\n            \"hash\": \"5c9b3b099c1378aa8e4a5f07f59ff1fcdc69a83179427c7e67ae0377d94d93fa\",\n            \"header\": {\n              \"account\": \"01d9bf2148748a85c89da5aad8ee0b0fc2d105fd39d41a4c796536354f0ae2900c\",\n              \"timestamp\": \"2020-11-17T00:39:24.072Z\",\n              \"ttl\": \"1h\",\n              \"gas_price\": 1,\n              \"body_hash\": \"d53cf72d17278fd47d399013ca389c50d589352f1a12593c0b8e01872a641b50\",\n              \"dependencies\": [\n                \"0101010101010101010101010101010101010101010101010101010101010101\"\n              ],\n              \"chain_name\": \"casper-example\"\n            },\n            \"payment\": {\n              \"StoredContractByName\": {\n                \"name\": \"casper-example\",\n                \"entry_point\": \"example-entry-point\",\n                \"args\": [\n                  [\n                    \"amount\",\n                    {\n                      \"cl_type\": \"I32\",\n                      \"bytes\": \"e8030000\",\n                      \"parsed\": 1000\n                    }\n                  ]\n                ]\n              }\n            },\n            \"session\": {\n              \"Transfer\": {\n                \"args\": [\n                  [\n                    \"amount\",\n                    {\n                      \"cl_type\": \"I32\",\n                      \"bytes\": \"e8030000\",\n                      \"parsed\": 1000\n                    }\n                  ]\n                ]\n              }\n            },\n            \"approvals\": [\n              {\n                \"signer\": \"01d9bf2148748a85c89da5aad8ee0b0fc2d105fd39d41a4c796536354f0ae2900c\",\n                \"signature\": \"014c1a89f92e29dd74fc648f741137d9caf4edba97c5f9799ce0c9aa6b0c9b58db368c64098603dbecef645774c05dff057cb1f91f2cf390bbacce78aa6f084007\"\n              }\n            ]\n          },\n          \"execution_results\": [\n            {\n              \"block_hash\": \"13c2d7a68ecdd4b74bf4393c88915c836c863fc4bf11d7f2bd930a1bbccacdcb\",\n              \"result\": {\n                \"Success\": {\n                  \"effect\": {\n                    \"operations\": [\n                      {\n                        \"key\": \"account-hash-2c4a11c062a8a337bfc97e27fd66291caeb2c65865dcb5d3ef3759c4c97efecb\",\n                        \"kind\": \"Write\"\n                      },\n                      {\n                        \"key\": \"deploy-af684263911154d26fa05be9963171802801a0b6aff8f199b7391eacb8edc9e1\",\n                        \"kind\": \"Read\"\n                      }\n                    ],\n                    \"transforms\": [\n                      {\n                        \"key\": \"uref-2c4a11c062a8a337bfc97e27fd66291caeb2c65865dcb5d3ef3759c4c97efecb-007\",\n                        \"transform\": {\n                          \"AddUInt64\": 8\n                        }\n                      },\n                      {\n                        \"key\": \"deploy-af684263911154d26fa05be9963171802801a0b6aff8f199b7391eacb8edc9e1\",\n                        \"transform\": \"Identity\"\n                      }\n                    ]\n                  },\n                  \"transfers\": [\n                    \"transfer-5959595959595959595959595959595959595959595959595959595959595959\",\n                    \"transfer-8282828282828282828282828282828282828282828282828282828282828282\"\n                  ],\n                  \"cost\": \"123456\"\n                }\n              }\n            }\n          ]\n        }\n      }\n    }\n  ]\n}\n\n```\n\n----------------------------------------\n\nTITLE: Example Request for state_get_account_info RPC Method (JSON)\nDESCRIPTION: An example JSON payload illustrating the parameters required for the `state_get_account_info` RPC call on the Casper Network. It includes the `account_identifier` (public key as a hex string) and an optional `block_identifier` (using a block hash).\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/condor/jsonrpc-comp/rpc-1.5/schema.json.md#2025-04-22_snippet_3\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"account_identifier\": \"013b6a27bcceb6a42d62a3a8d02a6f0d73653215771de243a63ac048a18b59da29\",\n  \"block_identifier\": {\n    \"Hash\": \"13c2d7a68ecdd4b74bf4393c88915c836c863fc4bf11d7f2bd930a1bbccacdcb\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Providing Example RPC Request and Response ('chain_get_era_summary') - JSON\nDESCRIPTION: Presents a concrete example for the 'chain_get_era_summary' RPC method, including both the input parameters (e.g., specifying a block by hash) and the expected result, which contains all required fields as dictated by the schema. All values (API version, hashes, public keys, allocations) use realistic test net-style data. Intended for client library implementers or API consumers to understand correct formatting, and for use in automated API testing or documentation. No external dependencies are required beyond basic JSON parsing; limitations include that field values are illustrative and may not correspond to a live network state.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/condor/jsonrpc-comp/rpc-2.0/schema.json.md#2025-04-22_snippet_27\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"name\": \"chain_get_era_summary_example\",\n  \"params\": [\n    {\n      \"name\": \"block_identifier\",\n      \"value\": {\n        \"Hash\": \"0744fcb72af43c5cc372039bc5a8bfee48808a9ce414acc0d6338a628c20eb42\"\n      }\n    }\n  ],\n  \"result\": {\n    \"name\": \"chain_get_era_summary_example_result\",\n    \"value\": {\n      \"api_version\": \"2.0.0\",\n      \"era_summary\": {\n        \"block_hash\": \"0744fcb72af43c5cc372039bc5a8bfee48808a9ce414acc0d6338a628c20eb42\",\n        \"era_id\": 42,\n        \"stored_value\": {\n          \"EraInfo\": {\n            \"seigniorage_allocations\": [\n              {\n                \"Delegator\": {\n                  \"delegator_public_key\": \"01e1b46a25baa8a5c28beb3c9cfb79b572effa04076f00befa57eb70b016153f18\",\n                  \"validator_public_key\": \"012a1732addc639ea43a89e25d3ad912e40232156dcaa4b9edfc709f43d2fb0876\",\n                  \"amount\": \"1000\"\n                }\n              },\n              {\n                \"Validator\": {\n                  \"validator_public_key\": \"012a1732addc639ea43a89e25d3ad912e40232156dcaa4b9edfc709f43d2fb0876\",\n                  \"amount\": \"2000\"\n                }\n              }\n            ]\n          }\n        },\n        \"state_root_hash\": \"0808080808080808080808080808080808080808080808080808080808080808\",\n        \"merkle_proof\": \"01000000006ef2e0949ac76e55812421f755abe129b6244fe7168b77f47a72536147614625016ef2e0949ac76e55812421f755abe129b6244fe7168b77f47a72536147614625000000003529cde5c621f857f75f3810611eb4af3f998caaa9d4a3413cf799f99c67db0307010000006ef2e0949ac76e55812421f755abe129b6244fe7168b77f47a7253614761462501010102000000006e06000000000074769d28aac597a36a03a932d4b43e4f10bf0403ee5c41dd035102553f5773631200b9e173e8f05361b681513c14e25e3138639eb03232581db7557c9e8dbbc83ce94500226a9a7fe4f2b7b88d5103a4fc7400f02bf89c860c9ccdd56951a2afe9be0e0267006d820fb5676eb2960e15722f7725f3f8f41030078f8b2e44bf0dc03f71b176d6e800dc5ae9805068c5be6da1a90b2528ee85db0609cc0fb4bd60bbd559f497a98b67f500e1e3e846592f4918234647fca39830b7e1e6ad6f5b7a99b39af823d82ba1873d000003000000010186ff500f287e9b53f823ae1582b1fa429dfede28015125fd233a31ca04d5012002015cc42669a55467a1fdf49750772bfc1aed59b9b085558eb81510e9b015a7c83b0301e3cf4a34b1db6bfa58808b686cb8fe21ebe0c1bcbcee522649d2b135fe510fe3\"\n      }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: CEP-18 Test Contract Response with Named Keys\nDESCRIPTION: Response showing the named keys of the CEP-18 utility contract, including the important 'result' URef that will be used to view the results of any checks run through the utility contract.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/versioned_docs/version-1.5.X/resources/tokens/cep18/query.md#2025-04-22_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\n{\n  \"id\": -1426549275795832481,\n  \"jsonrpc\": \"2.0\",\n  \"result\": {\n    \"api_version\": \"1.0.0\",\n    \"block_header\": null,\n    \"merkle_proof\": \"[3370 hex chars]\",\n    \"stored_value\": {\n      \"Contract\": {\n        \"contract_package_hash\": \"contract-package-015b99020edb40e7e1e2b31a8e104bc226242f960a2d10dc1d91ae3eb6fa41b6\",\n        \"contract_wasm_hash\": \"contract-wasm-7959083a4df983ddcd3a9ae46af092dbf126031181ab2619ddc64db09bde8c27\",\n        \"named_keys\": [\n          {\n            \"key\": \"uref-a46ad389b53715d9991a513c8ca48e1502facc4c563c0700a31e830c4cb8a7d4-007\",\n            \"name\": \"result\"\n          }\n        ],\n        \"protocol_version\": \"1.0.0\"\n      }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Example speculative_exec JSON response in Casper Network RPC API\nDESCRIPTION: This example shows the JSON response format for a speculative execution request, containing the API version and execution results with block hash, transfers, gas limits, and state effects. The response includes various key operations such as writes to URefs, packages, named keys, and other blockchain state elements.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/docs/developers/json-rpc/json-rpc-transactional.md#2025-04-22_snippet_5\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"jsonrpc\": \"2.0\",\n  \"id\": 1,\n  \"result\": {\n    \"name\": \"speculative_exec_result\",\n    \"value\": {\n      \"api_version\": \"2.0.0\",\n      \"execution_result\": {\n          \"block_hash\": \"b597865a5f96ea23932173601bf6b170a482f562f6dd3598b2d37a86c1f01371\",\n          \"transfers\": [],\n          \"limit\": \"100000000000\",\n          \"consumed\": \"23289743502\",\n          \"effects\": [\n              {\n                  \"key\": \"uref-65d264188c3cf9e61862415424c99900ec1c858f168d94d98b332fe738bf2249-000\",\n                  \"kind\": {\n                      \"Write\": {\n                          \"CLValue\": {\n                              \"cl_type\": \"Unit\",\n                              \"bytes\": \"\",\n                              \"parsed\": null\n                          }\n                      }\n                  }\n              },\n              {\n                  \"key\": \"package-154847e85beee3b5cd1c769b8f01dbc4b93d1cea8370c0b3bc1858d0d248a48b\",\n                  \"kind\": {\n                      \"Write\": {\n                          \"Package\": {\n                              \"versions\": [],\n                              \"disabled_versions\": [],\n                              \"groups\": [],\n                              \"lock_status\": \"Unlocked\"\n                          }\n                      }\n                  }\n              },\n              {\n                  \"key\": \"named-key-entity-account-7ba7c904427d5fe653b99584c07c3c5963b6ea2e75ad87aea69b71a65bf6fcea-7f292691d790433e131a5ea69c70b85a959a454f5d928de437b11bf4e7c06930\",\n                  \"kind\": {\n                      \"Write\": {\n                          \"NamedKey\": {\n                              \"named_key\": {\n                                  \"cl_type\": \"Key\",\n                                  \"bytes\": \"10154847e85beee3b5cd1c769b8f01dbc4b93d1cea8370c0b3bc1858d0d248a48b\",\n                                  \"parsed\": \"package-154847e85beee3b5cd1c769b8f01dbc4b93d1cea8370c0b3bc1858d0d248a48b\"\n                              },\n                              \"name\": {\n                                  \"cl_type\": \"String\",\n                                  \"bytes\": \"19000000746573745f7061796d656e745f7061636b6167655f68617368\",\n                                  \"parsed\": \"test_payment_package_hash\"\n                              }\n                          }\n                      }\n                  }\n              },\n              {\n                  \"key\": \"named-key-entity-account-7ba7c904427d5fe653b99584c07c3c5963b6ea2e75ad87aea69b71a65bf6fcea-814d93d21458dd90914dba42395ec9c075bc105cf3ef7ae0215f2107f3b47848\",\n                  \"kind\": {\n                      \"Write\": {\n                          \"NamedKey\": {\n                              \"named_key\": {\n                                  \"cl_type\": \"Key\",\n                                  \"bytes\": \"0265d264188c3cf9e61862415424c99900ec1c858f168d94d98b332fe738bf224907\",\n                                  \"parsed\": \"uref-65d264188c3cf9e61862415424c99900ec1c858f168d94d98b332fe738bf2249-007\"\n                              },\n                              \"name\": {\n                                  \"cl_type\": \"String\",\n                                  \"bytes\": \"13000000746573745f7061796d656e745f616363657373\",\n                                  \"parsed\": \"test_payment_access\"\n                              }\n                          }\n                      }\n                  }\n              },\n              {\n                  \"key\": \"package-154847e85beee3b5cd1c769b8f01dbc4b93d1cea8370c0b3bc1858d0d248a48b\",\n                  \"kind\": \"Identity\"\n              },\n              {\n                  \"key\": \"entity-system-63448411a9dac7fd2e4a1dc9287ddb95b6f26ebe549b1387e44685d6b56dab08\",\n                  \"kind\": \"Identity\"\n              },\n              {\n                  \"key\": \"package-63227f4db8d0d09e3b4b64416125ac35023e1054e38127780ec241b2b60d8b3d\",\n                  \"kind\": \"Identity\"\n              },\n              {\n                  \"key\": \"entry-point-v1-entity-system-63448411a9dac7fd2e4a1dc9287ddb95b6f26ebe549b1387e44685d6b56dab08-21bddc7e4379ba445c7118cb51962954e0d1e5aa5cacc0c4ff6095b57eb9fb33\",\n                  \"kind\": \"Identity\"\n              },\n              {\n                  \"key\": \"uref-7a9d9c0c33540e9fd4c1245f6ac687c7eacf98ac1072591adc3f83332a909d86-000\",\n                  \"kind\": {\n                      \"Write\": {\n                          \"CLValue\": {\n                              \"cl_type\": \"Unit\",\n                              \"bytes\": \"\",\n                              \"parsed\": null\n                          }\n                      }\n                  }\n              },\n              {\n                  \"key\": \"balance-7a9d9c0c33540e9fd4c1245f6ac687c7eacf98ac1072591adc3f83332a909d86\",\n                  \"kind\": {\n                      \"Write\": {\n                          \"CLValue\": {\n                              \"cl_type\": \"U512\",\n                              \"bytes\": \"00\",\n                              \"parsed\": \"0\"\n                          }\n                      }\n                  }\n              },\n              {\n                  \"key\": \"byte-code-v1-wasm-9639481569c3940ce272402f0e9bc0ea535435ea9ffc18d8696e4af02c841354\",\n                  \"kind\": {\n                      \"Write\": {\n                          \"ByteCode\": {\n                              \"kind\": \"V1CasperWasm\"\n```\n\n----------------------------------------\n\nTITLE: Handle Payment System Contract Costs Configuration\nDESCRIPTION: Configuration settings for the handle_payment system contract entrypoint costs. Defines costs for payment purse operations and payment finalization.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/versioned_docs/version-2.0.0/operators/setup-network/chain-spec.md#2025-04-22_snippet_3\n\nLANGUAGE: markdown\nCODE:\n```\n|Attribute         |Description                                    | Mainnet Setting |\n|----------------- |-----------------------------------------------|------------------|\n|get_payment_purse | Cost of calling the `get_payment_purse` entrypoint. |10_000|\n|set_refund_purse  | Cost of calling the `set_refund_purse` entrypoint. |10_000|\n|get_refund_purse  | Cost of calling the `get_refund_purse` entrypoint. |10_000|\n|finalize_payment  | Cost of calling the `finalize_payment` entrypoint. |10_000|\n```\n\n----------------------------------------\n\nTITLE: Querying Connected Peers with info_get_peers in Casper Network\nDESCRIPTION: This JSON-RPC request retrieves a list of peers connected to a Casper Network node. The request requires no parameters and returns peer information including node IDs and network addresses.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/docs/developers/json-rpc/json-rpc-informational.md#2025-04-22_snippet_28\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"id\": 1,\n  \"jsonrpc\": \"2.0\",\n  \"method\": \"info_get_peers\",\n  \"params\": []\n}\n```\n\n----------------------------------------\n\nTITLE: Generating Validator Keys using casper-client via Bash\nDESCRIPTION: Uses the `casper-client keygen` command, executed as the `casper` user, to generate new validator key pairs and save them to the specified directory `/etc/casper/validator_keys`.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/versioned_docs/version-1.5.X/operators/setup/install-node.md#2025-04-22_snippet_10\n\nLANGUAGE: bash\nCODE:\n```\nsudo -u casper casper-client keygen /etc/casper/validator_keys\n```\n\n----------------------------------------\n\nTITLE: Successful Deploy Response Structure\nDESCRIPTION: Example of a successful response from the send-deploy command showing the deploy hash and API version.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/versioned_docs/version-1.5.X/developers/cli/transfers/multisig-deploy-transfer.md#2025-04-22_snippet_5\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"jsonrpc\": \"2.0\",\n  \"id\": -818883417884028030,\n  \"result\": {\n    \"api_version\": \"1.5.3\",\n    \"deploy_hash\": \"88c49fa9108485397a330f294914a6c2d614c581fbe0a31de1a954baad6d709b\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: State Get Account Info Request Example in Casper Network RPC API\nDESCRIPTION: Example JSON request format for the state_get_account_info endpoint used to retrieve account information by public key at a specific block in the blockchain.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/docs/developers/json-rpc/json-rpc-informational.md#2025-04-22_snippet_22\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"id\": 1,\n  \"jsonrpc\": \"2.0\",\n  \"method\": \"state_get_account_info\",\n  \"params\": [\n    {\n      \"name\": \"account_identifier\",\n      \"value\": \"013b6a27bcceb6a42d62a3a8d02a6f0d73653215771de243a63ac048a18b59da29\"\n    },\n    {\n      \"name\": \"block_identifier\",\n      \"value\": {\n        \"Hash\": \"0707070707070707070707070707070707070707070707070707070707070707\"\n      }\n    }\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Template Entry Points for Counter Factory in Rust\nDESCRIPTION: This code defines the non-installer entry points (increment and decrement) in the factory contract, marking them with EntryPointAccess::Template and EntryPointType::Contract. This is necessary for these entry points to be available in the produced counter contracts.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/versioned_docs/version-2.0.0/developers/writing-onchain-code/factory-pattern.md#2025-04-22_snippet_5\n\nLANGUAGE: rust\nCODE:\n```\nlet entry_point: EntryPoint = EntryPoint::new(\n    INCREASE_ENTRY_POINT.to_string(),\n    Parameters::new(),\n    CLType::Unit,\n    EntryPointAccess::Template,\n    EntryPointType::Contract,\n);\nentry_points.add_entry_point(entry_point);\nlet entry_point: EntryPoint = EntryPoint::new(\n    DECREASE_ENTRY_POINT.to_string(),\n    Parameters::new(),\n    CLType::Unit,\n    EntryPointAccess::Template,\n    EntryPointType::Contract,\n);\n```\n\n----------------------------------------\n\nTITLE: Transferring Tokens in a Casper Private Network\nDESCRIPTION: Command to transfer tokens from an administrator account to a user account (Alice) in a Casper private network. This uses the casper-client to execute a transfer with specified parameters.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/docs/operators/setup-network/create-private.md#2025-04-22_snippet_16\n\nLANGUAGE: sh\nCODE:\n```\ncasper-client \\\n  transfer \\\n  -n $NODE_ADDR \\\n  --chain-name $CHAIN_NAME \\\n  --secret-key admin/secret_key.pem \\\n  --session-account=$(<admin/public_key_hex) \\\n  --target-account=$(<alice/public_key_hex) \\\n  --amount=100000000000 \\\n  --payment-amount=3000000000 \\\n  --transfer-id=123\n```\n\n----------------------------------------\n\nTITLE: Querying Global State by Deploy Hash\nDESCRIPTION: This command queries the global state using a deploy hash as the key (`--key deploy-[DEPLOY_HASH]`). This retrieves information directly related to that specific deployment transaction stored on the blockchain.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/docs/resources/beginner/counter-testnet/walkthrough.md#2025-04-22_snippet_11\n\nLANGUAGE: bash\nCODE:\n```\ncasper-client query-global-state --node-address http://[NODE_IP]:7777 \\\n    --state-root-hash [STATE_ROOT_HASH] --key deploy-[DEPLOY_HASH]\n```\n\n----------------------------------------\n\nTITLE: Checking Auction Contract Info in Bash\nDESCRIPTION: This command retrieves the current auction information from a specified node, allowing validators to check for updates to bid amounts after unbonding operations.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/versioned_docs/version-2.0.0/operators/becoming-a-validator/unbonding.md#2025-04-22_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\ncasper-client get-auction-info --node-address http://<HOST:PORT>\n```\n\n----------------------------------------\n\nTITLE: Installing the Counter Contract in Bash\nDESCRIPTION: Command to deploy the compiled counter contract to the local Casper network. This uses the casper-client tool with the put-deploy subcommand and specifies the session path to the compiled Wasm.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/versioned_docs/version-1.5.X/resources/beginner/counter/walkthrough.md#2025-04-22_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\ncasper-client put-deploy \\\n    --node-address http://localhost:11101 \\\n    --chain-name casper-net-1 \\\n    --secret-key [PATH_TO_YOUR_KEY]/secret_key.pem \\\n    --payment-amount [PAYMENT_AMOUNT_IN_MOTES] \\\n    --session-path ./contract-v1/target/wasm32-unknown-unknown/release/counter-v1.wasm\n```\n\n----------------------------------------\n\nTITLE: Starting a Casper Node with systemctl\nDESCRIPTION: Command to start the Casper node service after configuring administrator accounts and validator nodes. This uses systemctl to manage the casper-node-launcher service.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/docs/operators/setup-network/create-private.md#2025-04-22_snippet_10\n\nLANGUAGE: sh\nCODE:\n```\nsudo systemctl start casper-node-launcher\n```\n\n----------------------------------------\n\nTITLE: Defining JsonBlockWithSignatures Schema in JSON\nDESCRIPTION: Defines the schema for JsonBlockWithSignatures, which represents a JSON-friendly representation of a block and its signatures. It includes properties for the block and its proofs.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/condor/jsonrpc-comp/rpc-2.0/schema/components.json.md#2025-04-22_snippet_84\n\nLANGUAGE: JSON\nCODE:\n```\n\"JsonBlockWithSignatures\": {\n    \"description\": \"A JSON-friendly representation of a block and the signatures for that block.\",\n    \"type\": \"object\",\n    \"required\": [\n        \"block\",\n        \"proofs\"\n    ],\n    \"properties\": {\n        \"block\": {\n            \"description\": \"The block.\",\n            \"allOf\": [\n                {\n                    \"$ref\": \"#/components/schemas/Block\"\n                }\n            ]\n        },\n        \"proofs\": {\n            \"description\": \"The proofs of the block, i.e. a collection of validators' signatures of the block hash.\",\n            \"allOf\": [\n                {\n                    \"$ref\": \"#/components/schemas/Array_of_BlockProof\"\n                }\n            ]\n        }\n    },\n    \"additionalProperties\": false\n}\n```\n\n----------------------------------------\n\nTITLE: Querying the Counter Contract in Bash\nDESCRIPTION: Command to query the specific counter contract details from the global state using the account hash and query path argument.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/versioned_docs/version-1.5.X/resources/beginner/counter/walkthrough.md#2025-04-22_snippet_8\n\nLANGUAGE: bash\nCODE:\n```\ncasper-client query-global-state --node-address http://localhost:11101 \\\n    --state-root-hash [STATE_ROOT_HASH] \\\n    --key [ACCOUNT_HASH] -q \"counter\"\n```\n\n----------------------------------------\n\nTITLE: Retrieving Chainspec Result in JSON\nDESCRIPTION: This snippet provides a JSON example displaying how the 'info_get_chainspec_result' responds with the RPC API version and raw bytes of the chainspec.toml, with optional genesis accounts or global state bytes. This response showcases the returned data in a structured JSON format.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/docs/developers/json-rpc/json-rpc-informational.md#2025-04-22_snippet_9\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"jsonrpc\": \"2.0\",\n  \"result\": {\n    \"name\": \"info_get_chainspec_result\",\n    \"value\": {\n      \"api_version\": \"2.0.0\",\n      \"chainspec_bytes\": {\n        \"chainspec_bytes\": \"[22040 hex chars]\",\n        \"maybe_genesis_accounts_bytes\": null,\n        \"maybe_global_state_bytes\": null\n      }\n    }\n  },\n  \"id\": 5510244237763930243\n}\n```\n\n----------------------------------------\n\nTITLE: Cloning the Example Wasm for Multi-Signature Workflow\nDESCRIPTION: This snippet demonstrates how to clone the multi-signature repository from GitHub and navigate to the necessary directory. This step is essential for accessing session code used in configuring Casper accounts for multi-signature deploys.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/versioned_docs/version-1.5.X/resources/advanced/multi-sig/multi-sig-workflow.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ngit clone https://github.com/casper-ecosystem/tutorials-example-wasm/ && cd multi-sig\n```\n\n----------------------------------------\n\nTITLE: Events Mode Table\nDESCRIPTION: Table showing the u8 values for different events modes that control how contract events are recorded and tracked.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/versioned_docs/version-1.5.X/resources/tokens/cep78/modalities.md#2025-04-22_snippet_8\n\nLANGUAGE: markdown\nCODE:\n```\n| EventsMode | u8  |\n| ---------- | --- |\n| NoEvents   | 0   |\n| CEP47      | 1   |\n| CES        | 2   |\n```\n\n----------------------------------------\n\nTITLE: Defining Versioned Execution Result Type JSON Schema\nDESCRIPTION: This JSON schema defines execution results for different version types in the context of deploy executions. It includes versions 1 and 2 which rely on schemas 'ExecutionResultV1' and 'ExecutionResultV2', respectively. It's essential for applications that may handle results across these version types, ensuring appropriate validation and structure conformity.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/condor/jsonrpc-comp/rpc-2.0/schema/ExecutionResult.json.md#2025-04-22_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"description\": \"The versioned result of executing a single deploy.\",\n    \"oneOf\": [\n        {\n            \"description\": \"Version 1 of execution result type.\",\n            \"type\": \"object\",\n            \"required\": [\n                \"Version1\"\n            ],\n            \"properties\": {\n                \"Version1\": {\n                    \"$ref\": \"#/components/schemas/ExecutionResultV1\"\n                }\n            },\n            \"additionalProperties\": false\n        },\n        {\n            \"description\": \"Version 2 of execution result type.\",\n            \"type\": \"object\",\n            \"required\": [\n                \"Version2\"\n            ],\n            \"properties\": {\n                \"Version2\": {\n                    \"$ref\": \"#/components/schemas/ExecutionResultV2\"\n                }\n            },\n            \"additionalProperties\": false\n        }\n    ]\n}\n```\n\n----------------------------------------\n\nTITLE: Checking Deploy Status with Casper Client (Bash)\nDESCRIPTION: This command uses the `casper-client` to check the execution status of a specific deploy, identified by its hash. It's used here to verify if the deploy submitting a bid was successfully processed by the network. Requires the node address and the deploy hash as parameters.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/versioned_docs/version-1.5.X/operators/becoming-a-validator/bonding.md#2025-04-22_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\ncasper-client get-deploy --node-address http://<HOST:PORT> <DEPLOY_HASH>\n```\n\n----------------------------------------\n\nTITLE: Example Session Argument for Changing Security Permissions\nDESCRIPTION: Provides an example `--session-arg` for the `change_security` entry point of a CEP-18 contract. This specific argument sets the `mint_and_burn_list`, providing a comma-separated string of account hashes that will be granted minting and burning permissions. This argument would be used within a larger `casper-client put-deploy` command.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/versioned_docs/version-1.5.X/resources/tokens/cep18/transfer.md#2025-04-22_snippet_24\n\nLANGUAGE: bash\nCODE:\n```\n--session-arg \"mint_and_burn_list:string='account-hash-1ed5a1c39bea93c105f2d22c965a84b205b36734a377d05dbb103b6bfaa595a7,account-hash-0ea7998b2822afe5b62b08a21d54c941ad791279b089f3f7ede0d72b477eca34,account-hash-e70dbca48c2d31bc2d754e51860ceaa8a1a49dc627b20320b0ecee1b6d9ce655'\"\n```\n\n----------------------------------------\n\nTITLE: Querying Global State for Transfer Details\nDESCRIPTION: Command to retrieve information about a specific transfer using its transfer hash. This query returns details such as source, target, and amount transferred.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/versioned_docs/version-2.0.0/developers/cli/transfers/verify-transfer.md#2025-04-22_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\ncasper-client query-global-state \\\n--id [ID] \\\n--node-address [NODE_SERVER_ADDRESS]  \\\n--state-root-hash [STATE_ROOT_HASH] \\\n--key [TRANSFER_HASH]\n```\n\n----------------------------------------\n\nTITLE: Executing Native Token Transfer Bash\nDESCRIPTION: This bash command executes a native token transfer using the casper-client CLI, transferring CSPR between accounts. Dependencies include the casper-client and access to a Casper node. Key parameters are 'node-address', 'amount', 'secret-key', and 'target-account'. Input is CLI arguments and the output is the transaction result status. Limitations include requiring a valid secret key and access to the target node.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/docs/resources/advanced/list-cspr.md#2025-04-22_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ncasper-client transfer \\\n--id 1 \\\n--transfer-id 123456 \\\n--node-address http://<node-ip-address>:7777 \\\n--amount 10000000000 \\\n--secret-key <accountA-secret-key>.pem \\\n--chain-name casper \\\n--target-account <accountB-hex-encoded-public-key> \\\n--payment-amount <payment-in-motes>\n```\n\n----------------------------------------\n\nTITLE: Describing Bytes Serialization (Casper Network)\nDESCRIPTION: Specifies the serialization format for hex-encoded bytes. It consists of a u32 value indicating the length of the byte sequence, followed by the actual bytes.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/versioned_docs/version-2.0.0/concepts/serialization/types.md#2025-04-22_snippet_8\n\nLANGUAGE: Text\nCODE:\n```\n## Bytes {#bytes}\n\nHex-encoded bytes serialized as a `u32` value describing the length of the bytes, followed by the bytes themselves.\n```\n\n----------------------------------------\n\nTITLE: Transaction Configuration Table\nDESCRIPTION: Table defining transaction-related settings including TTL, block sizes, gas limits and transfer minimums.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/versioned_docs/version-2.0.0/operators/setup-network/chain-spec.md#2025-04-22_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n|Attribute         |Description                                    | Mainnet Setting |\n|----------------- |-----------------------------------------------|------------------|\n|max_ttl | The duration after the transaction timestamp during which the transaction can be included in a block. | '2 hours'|\n|block_max_approval_count | The maximum number of approvals permitted in a single block. | 2600|\n|max_block_size | Maximum block size in bytes, including transactions contained by the block. 0 means unlimited. | 5_242_880|\n|block_gas_limit | The upper limit of the total gas of all transactions in a block. | 3_300_000_000_000|\n|native_transfer_minimum_motes | The minimum amount in motes for a valid native transfer. | 2_500_000_000|\n|max_timestamp_leeway | The maximum value to which `transaction_acceptor.timestamp_leeway` can be set in the config.toml file. | '5 seconds' |\n```\n\n----------------------------------------\n\nTITLE: Block Header V1 Schema Definition - JSON\nDESCRIPTION: Detailed JSON Schema for version 1 block headers in Casper Network. Specifies required fields including hashes, timestamps, and era information with their respective data types and constraints.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/condor/jsonrpc-comp/rpc-2.0/schema.json.md#2025-04-22_snippet_84\n\nLANGUAGE: json\nCODE:\n```\n\"BlockHeaderV1\": {\n  \"description\": \"The header portion of a block.\",\n  \"type\": \"object\",\n  \"required\": [...],\n  \"properties\": {...}\n}\n```\n\n----------------------------------------\n\nTITLE: Transferring Casper NFT Ownership using Wasm (Bash)\nDESCRIPTION: This command uses `casper-client put-deploy` to send a deploy that executes the `transfer_call.wasm` session code. It transfers ownership of a specific NFT from a source account to a target account. Key arguments include the Casper node RPC endpoint (`-n`), chain name, payment amount, sender's secret key (`-k`), path to the Wasm file (`--session-path`), and session arguments specifying the NFT contract hash, source key, target key, identifier mode (ordinal), and token ID.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/versioned_docs/version-1.5.X/resources/tokens/cep78/using-casper-client/interacting-with-NFTs.md#2025-04-22_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\ncasper-client put-deploy -n http://localhost:11101/rpc --chain-name \"casper-net-1\" \\\n--payment-amount 5000000000 \\\n-k ~/casper/casper-node/utils/nctl/assets/net-1/nodes/node-2/keys/secret_key.pem \\\n--session-path ~/casper/enhanced-nft/client/transfer_session/target/wasm32-unknown-unknown/release/transfer_call.wasm \\\n--session-arg \"nft_contract_hash:key='hash-52e78ae3f6c485d036a74f65ebbb8c75fcc7c33fb42eb667fb32aeba72c63fb5'\" \\\n--session-arg \"source_key:key='account-hash-e9ff87766a1d2bab2565bfd5799054946200b51b20c3ca7e54a9269e00fe7cfb'\" \\\n--session-arg \"target_key:key='account-hash-b4772e7c47e4deca5bd90b7adb2d6e884f2d331825d5419d6cbfb59e17642aab'\" \\\n--session-arg \"is_hash_identifier_mode:bool='false'\" \\\n--session-arg \"token_id:u64='0'\"\n```\n\n----------------------------------------\n\nTITLE: Running CEP-18 Tests in Bash\nDESCRIPTION: This command runs the CEP-18 token contract tests using the make utility.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/docs/resources/tokens/cep18/tests.md#2025-04-22_snippet_8\n\nLANGUAGE: bash\nCODE:\n```\nmake test\n```\n\n----------------------------------------\n\nTITLE: Solana Entry Point Implementation\nDESCRIPTION: Shows the implementation of a Solana program entry point with required parameters.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/versioned_docs/version-1.5.X/resources/moving-to-casper.md#2025-04-22_snippet_9\n\nLANGUAGE: rust\nCODE:\n```\npub fn process_instruction(\n    program_id: &Pubkey,\n    accounts: &[AccountInfo],\n    _instruction_data: &[u8],\n) -> ProgramResult {}\n```\n\n----------------------------------------\n\nTITLE: Message Structure Definition\nDESCRIPTION: Defines a message emitted by an addressable entity during execution, containing entity hash, payload, topic name and indices.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/docs/concepts/serialization/structures.md#2025-04-22_snippet_1\n\nLANGUAGE: rust\nCODE:\n```\nstruct Message {\n    entity_hash: EntityAddr,\n    message: MessagePayload,\n    topic_name: String,\n    topic_name_hash: TopicNameHash,\n    topic_index: u32,\n    block_index: u64\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Named Contract Version Reference in Casper Account\nDESCRIPTION: Creates a named key in an account that references the contract version URef. This allows the account to access the contract version through a human-readable name 'contract_version'.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/versioned_docs/version-2.0.0/developers/json-rpc/json-rpc-transactional.md#2025-04-22_snippet_26\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"key\": \"named-key-entity-account-7ba7c904427d5fe653b99584c07c3c5963b6ea2e75ad87aea69b71a65bf6fcea-1a77e4ba31d02a3941319349f259d5fb02ef3ed70f92775cd18b8aba359441e2\",\n    \"kind\": {\n        \"Write\": {\n            \"NamedKey\": {\n                \"named_key\": {\n                    \"cl_type\": \"Key\",\n                    \"bytes\": \"022e024fc493ffb93847290be74a6f921a4226c142b5b196654b5a9c724cb2a72607\",\n                    \"parsed\": \"uref-2e024fc493ffb93847290be74a6f921a4226c142b5b196654b5a9c724cb2a726-007\"\n                },\n                \"name\": {\n                    \"cl_type\": \"String\",\n                    \"bytes\": \"10000000636f6e74726163745f76657273696f6e\",\n                    \"parsed\": \"contract_version\"\n                }\n            }\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Checking Deploy Status using Casper Client (Bash)\nDESCRIPTION: Retrieves the status and details of a previously sent deploy using the `casper-client get-deploy` command. Requires the deploy hash (obtained from the `put-deploy` output) and a node address.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/docs/resources/quick-start.md#2025-04-22_snippet_12\n\nLANGUAGE: bash\nCODE:\n```\ncasper-client get-deploy --node-address [NODE_ADDRESS] [DEPLOY_HASH]\n```\n\n----------------------------------------\n\nTITLE: Creating AddressableEntity Key from Smart Contract Hash in Rust\nDESCRIPTION: This code shows the creation of an AddressableEntity key from a smart contract hash in Casper 2.0. It utilizes the Key::AddressableEntity constructor with EntityAddr::SmartContract.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/condor/addressable-entity.md#2025-04-22_snippet_1\n\nLANGUAGE: rust\nCODE:\n```\nlet addressable_entity_key = Key::AddressableEntity(EntityAddr::SmartContract(contract_hash));\n```\n\n----------------------------------------\n\nTITLE: Implementing Main App Component with React\nDESCRIPTION: React component for the main App that manages the public key state and renders the Connect component. It displays the connected wallet's public key when available.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/versioned_docs/version-2.0.0/developers/dapps/template-frontend.md#2025-04-22_snippet_8\n\nLANGUAGE: jsx\nCODE:\n```\nimport React from \"react\";\nimport Connect from \"./Connect\";\nimport './App.css'\n\nfunction App() {\n    const [publicKey, setPublicKey] = React.useState(null);\n    return (\n        <>\n            <Connect setPublicKey={ setPublicKey } />\n            <div>\n                {publicKey !== null && (<>\n                    Wallet connected: {publicKey}<br/>\n                </>)}\n            </div>\n        </>\n    );\n}\n\nexport default App;\n```\n\n----------------------------------------\n\nTITLE: Defining NFT-721 Metadata Schema in JSON\nDESCRIPTION: Example of a valid metadata schema for the NFT-721 standard. It includes name, symbol, and token URI fields.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/versioned_docs/version-1.5.X/resources/tokens/cep78/modalities.md#2025-04-22_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"name\": \"John Doe\",\n  \"symbol\": \"abc\",\n  \"token_uri\": \"https://www.barfoo.com\"\n}\n```\n\n----------------------------------------\n\nTITLE: Full Database Decompression Pipeline\nDESCRIPTION: Complete command for decompressing and extracting database files with proper permissions.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/versioned_docs/version-2.0.0/operators/maintenance/archiving-and-restoring.md#2025-04-22_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\nzstd -cd --long=31 <.tar.zst file> | sudo -u casper tar -xv\n```\n\n----------------------------------------\n\nTITLE: Sample JSON-RPC Response for Target Purse Balance Query (JSON)\nDESCRIPTION: This JSON-RPC response returns the balance for the queried target purse, including the API version and the balance as a string. It mirrors the structure of the query request for correlation, with the id field matching the original request. The response is standard for direct JSON-RPC interaction and can be parsed programmatically for result validation.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/docs/developers/cli/transfers/verify-transfer.md#2025-04-22_snippet_11\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"jsonrpc\": \"2.0\",\n  \"result\": {\n    \"api_version\": \"1.5.3\",\n    \"balance\": \"46200000000\"\n  },\n  \"id\": 7\n}\n```\n\n----------------------------------------\n\nTITLE: Finding Casper Node Process ID\nDESCRIPTION: Command to find the Process ID (PID) of the running casper-node process\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/versioned_docs/version-2.0.0/operators/setup/open-files.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\npgrep \"casper-node$\"\n```\n\n----------------------------------------\n\nTITLE: Generating TLS Certificates for Casper Node Security in Shell\nDESCRIPTION: Commands to generate CA certificates and node certificates for secure Casper network communication. This establishes a certificate authority and generates signed certificates for the nodes.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/versioned_docs/version-2.0.0/operators/setup-network/create-private.md#2025-04-22_snippet_12\n\nLANGUAGE: sh\nCODE:\n```\n# Recommended EC curve algorithm to use\nexport CURVE=\"secp521r1\"\n\n# Generate secret key for CA and save it to ca_key.pem\nopenssl ecparam -out ca_key.pem -name $CURVE -genkey\n# Create ca_cert.pem signed by ca_key.pem\nopenssl req -new -x509 -days 3650 -extensions v3_ca -key ca_key.pem -out ca_cert.pem\n\n# Generate secret key for a node and a certificate signed by the CA\nopenssl ecparam -out node_1.pem -name $CURVE -genkey\nopenssl req -new -key node_1.pem -out node_1.csr -sha256\nopenssl x509 -req -days 3650 -CA ca_cert.pem -CAkey ca_key.pem -CAcreateserial -in node_1.csr -out node_1_cert.pem\n```\n\n----------------------------------------\n\nTITLE: Defining CLType Tuple2 Schema in JSON\nDESCRIPTION: JSON schema definition for a 2-ary tuple type in Casper's type system. This represents a tuple containing two CLTypes.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/condor/jsonrpc-comp/rpc-1.5/schema/components.json.md#2025-04-22_snippet_9\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"description\": \"2-ary tuple of `CLType`s.\",\n    \"type\": \"object\",\n    \"required\": [\n        \"Tuple2\"\n    ],\n    \"properties\": {\n        \"Tuple2\": {\n            \"type\": \"array\",\n            \"items\": {\n                \"$ref\": \"#/components/schemas/CLType\"\n            },\n            \"maxItems\": 2,\n            \"minItems\": 2\n        }\n    },\n    \"additionalProperties\": false\n}\n```\n\n----------------------------------------\n\nTITLE: Representing Authorization Keys for a Casper Deploy - JSON\nDESCRIPTION: This JSON example details the structure of the 'approvals' field in a Casper Deploy, which lists the public keys used as deploy authorization along with their cryptographic signatures. Each entry contains a signer (truncated key) and a deploy signature. This structure is crucial for deploy authentication and authorization within Casper smart contract operations, and expects an array of objects for the approvals field.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/versioned_docs/version-1.5.X/concepts/list-auth-keys.md#2025-04-22_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n\"approvals\": [\\n    {\\n      \\\"signer\\\": \\\" 2cd...22\\\",\\n      \\\"signature\\\": \\\"02df8c...f481\\\"\\n    },\\n    {\\n      \\\"signer\\\": \\\"4fg...44\\\",\\n      \\\"signature\\\": \\\"02ef21...756a\\\"\\n    }\\n]\n```\n\n----------------------------------------\n\nTITLE: Getting Account Hash from Public Key\nDESCRIPTION: Command to retrieve the account hash using a public key in hexadecimal format.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/versioned_docs/version-1.5.X/resources/tokens/cep78/using-casper-client/full-installation-tutorial.md#2025-04-22_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\ncasper-client account-address --public-key [PATH_TO_PUBLIC_KEY_HEX]\n```\n\n----------------------------------------\n\nTITLE: Setting Up Wasm Environment Attributes in Rust for Casper Smart Contract\nDESCRIPTION: File attributes that configure the Rust compiler for WebAssembly (Wasm) execution environment. These attributes disable the standard library and main function, which are necessary for Casper smart contracts.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/versioned_docs/version-1.5.X/developers/writing-onchain-code/simple-contract.md#2025-04-22_snippet_7\n\nLANGUAGE: rust\nCODE:\n```\n#![no_std]\n#![no_main]\n```\n\n----------------------------------------\n\nTITLE: Defining Deploy Operation Schema Using JSON Schema (JavaScript/JSON)\nDESCRIPTION: Defines a JSON schema object for validating the structure of an 'operation' performed as part of a deploy within the Casper blockchain documentation. This schema enforces the presence of the 'key' (a string representing the formatted key) and 'kind' (referencing the 'OpKind' definition), and restricts additional properties. Requires understanding of JSON Schema standards, and expects the 'OpKind' schema to be defined elsewhere in the components. The expected input is an object with only the 'key' and 'kind' properties; extra fields will invalidate the object.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/condor/jsonrpc-comp/rpc-2.0/schema/Operation.json.md#2025-04-22_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"description\": \"An operation performed while executing a deploy.\",\n    \"type\": \"object\",\n    \"required\": [\n        \"key\",\n        \"kind\"\n    ],\n    \"properties\": {\n        \"key\": {\n            \"description\": \"The formatted string of the `Key`.\",\n            \"type\": \"string\"\n        },\n        \"kind\": {\n            \"description\": \"The type of operation.\",\n            \"allOf\": [\n                {\n                    \"$ref\": \"#/components/schemas/OpKind\"\n                }\n            ]\n        }\n    },\n    \"additionalProperties\": false\n} \n```\n\n----------------------------------------\n\nTITLE: Example Delegation Using Compiled WASM\nDESCRIPTION: Example command showing delegation of 500 CSPR on the Casper Testnet using the compiled WASM method. Demonstrates actual values for all required parameters.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/versioned_docs/version-1.5.X/developers/cli/delegate.md#2025-04-22_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\ncasper-client put-deploy \\\n--node-address http://65.21.75.254:7777  \\\n--chain-name casper-test \\\n--secret-key ~/KEYS/secret_key.pem \\\n--payment-amount 20000000000 \\\n--session-path ~/delegate.wasm \\\n--session-arg \"validator:public_key='01aa17f7b9889480b1bd34c3f94f263b229c7a9b01dd4dda19c2dd1d38d176c7a0'\" \\\n--session-arg \"amount:u512='500000000000'\" \\\n--session-arg \"delegator:public_key='01e3d3392c2e0b943abe709b25de5c353e5e1e9d95c7a76e3dd343d8aa1aa08d51'\"\n```\n\n----------------------------------------\n\nTITLE: JSON-RPC Request Structure - Token Transfer\nDESCRIPTION: The JSON-RPC request format generated for a token transfer operation, including deploy details, header information, and payment specifications.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/docs/developers/cli/transfers/direct-token-transfer.md#2025-04-22_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"jsonrpc\": \"2.0\",\n  \"method\": \"account_put_deploy\",\n  \"params\": {\n    \"deploy\": {\n      \"hash\": \"1f17a0bdeaaf71abd03492c854cdf97f746432751721ce555e95b9cefe641e3c\",\n      \"header\": {\n        \"account\": \"0154d828baafa6858b92919c4d78f26747430dcbecb9aa03e8b44077dc6266cabf\",\n        \"timestamp\": \"2023-10-12T14:59:40.760Z\",\n        \"ttl\": \"30m\",\n        \"gas_price\": 1,\n        \"body_hash\": \"ea7e6a6cbdd4d761827cb627e162896bee3e771beda000550615c9b4fafa3a2d\",\n        \"dependencies\": [],\n        \"chain_name\": \"casper-test\"\n      },\n      \"payment\": {\n        \"ModuleBytes\": {\n          \"module_bytes\": \"\",\n          \"args\": [\n            [\n              \"amount\",\n              {\n                \"cl_type\": \"U512\",\n                \"bytes\": \"0400e1f505\",\n                \"parsed\": \"100000000\"\n              }\n            ]\n          ]\n        }\n      },\n      \"session\": {\n        \"Transfer\": {\n          \"args\": [\n            [\n              \"amount\",\n              {\n                \"cl_type\": \"U512\",\n                \"bytes\": \"0500f2052a01\",\n                \"parsed\": \"5000000000\"\n              }\n            ],\n            [\n              \"target\",\n              {\n                \"cl_type\": \"PublicKey\",\n                \"bytes\": \"01360af61b50cdcb7b92cffe2c99315d413d34ef77fadee0c105cc4f1d4120f986\",\n                \"parsed\": \"01360af61b50cdcb7b92cffe2c99315d413d34ef77fadee0c105cc4f1d4120f986\"\n              }\n            ],\n            [\n              \"id\",\n              {\n                \"cl_type\": {\n                  \"Option\": \"U64\"\n                },\n                \"bytes\": \"014767a90000000000\",\n                \"parsed\": 11102023\n              }\n            ]\n          ]\n        }\n      },\n      \"approvals\": [\n        {\n          \"signer\": \"0154d828baafa6858b92919c4d78f26747430dcbecb9aa03e8b44077dc6266cabf\",\n          \"signature\": \"01e53cb742ed13ff4f0584a3da0f22f5942a33e010965adf640c91204ae4bc7436f1e5534d338ffa117d193295214816445439781229d24a372085c316eac5e305\"\n        }\n      ]\n    }\n  },\n  \"id\": 3\n}\n```\n\n----------------------------------------\n\nTITLE: Initializing CEP-78 NFT Collection Properties in Casper Network\nDESCRIPTION: This code snippet demonstrates the initialization of various properties for a CEP-78 NFT collection on the Casper Network. It sets up key-value pairs for collection name, symbol, total token supply, ownership mode, NFT kind, JSON schema, minting mode, holder mode, whitelist mode, and receipt name. Each property is stored using a unique key and appropriate data type.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/versioned_docs/version-1.5.X/resources/tokens/cep78/using-casper-client/full-installation-tutorial.md#2025-04-22_snippet_11\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"key\": \"uref-5aed76a73089e7e32f6fbf5d9a9597843215d4810cd5822c0f5c6e65a0bbb7a3-000\",\n  \"transform\": {\n    \"WriteCLValue\": {\n      \"cl_type\": \"String\",\n      \"bytes\": \"120000004345502d37382d636f6c6c656374696f6e32\",\n      \"parsed\": \"CEP-78-collection\"\n    }\n  }\n},\n{\n  \"key\": \"hash-378a43e38bc5129d8aa3bcd04f5c9a97be73f85b5be574182ac1346f04520796\",\n  \"transform\": {\n    \"AddKeys\": [\n      {\n        \"name\": \"collection_name\",\n        \"key\": \"uref-5aed76a73089e7e32f6fbf5d9a9597843215d4810cd5822c0f5c6e65a0bbb7a3-007\"\n      }\n    ]\n  }\n},\n{\n  \"key\": \"uref-ba4247cc0354644474758d1292924c5115c61c8012cae3f094a91060d9dff779-000\",\n  \"transform\": {\n    \"WriteCLValue\": {\n      \"cl_type\": \"String\",\n      \"bytes\": \"050000004345503738\",\n      \"parsed\": \"CEP78\"\n    }\n  }\n},\n{\n  \"key\": \"hash-378a43e38bc5129d8aa3bcd04f5c9a97be73f85b5be574182ac1346f04520796\",\n  \"transform\": {\n    \"AddKeys\": [\n      {\n        \"name\": \"collection_symbol\",\n        \"key\": \"uref-ba4247cc0354644474758d1292924c5115c61c8012cae3f094a91060d9dff779-007\"\n      }\n    ]\n  }\n},\n{\n  \"key\": \"uref-e5f06deadcbfe5a469e7c162346580744746bfdc0ec67002e0ecba5b11096827-000\",\n  \"transform\": {\n    \"WriteCLValue\": {\n      \"cl_type\": \"U64\",\n      \"bytes\": \"6400000000000000\",\n      \"parsed\": 100\n    }\n  }\n},\n{\n  \"key\": \"hash-378a43e38bc5129d8aa3bcd04f5c9a97be73f85b5be574182ac1346f04520796\",\n  \"transform\": {\n    \"AddKeys\": [\n      {\n        \"name\": \"total_token_supply\",\n        \"key\": \"uref-e5f06deadcbfe5a469e7c162346580744746bfdc0ec67002e0ecba5b11096827-007\"\n      }\n    ]\n  }\n},\n{\n  \"key\": \"uref-89711af74265427dc65d7c5a421cedde82de69d192cad36f34efa36504108572-000\",\n  \"transform\": {\n    \"WriteCLValue\": {\n      \"cl_type\": \"U8\",\n      \"bytes\": \"02\",\n      \"parsed\": 2\n    }\n  }\n},\n{\n  \"key\": \"hash-378a43e38bc5129d8aa3bcd04f5c9a97be73f85b5be574182ac1346f04520796\",\n  \"transform\": {\n    \"AddKeys\": [\n      {\n        \"name\": \"ownership_mode\",\n        \"key\": \"uref-89711af74265427dc65d7c5a421cedde82de69d192cad36f34efa36504108572-007\"\n      }\n    ]\n  }\n},\n{\n  \"key\": \"uref-e02c29a6120d5da7f14fb664ca60c3ade56a3171a670c292d0a4ea0f9ae4f0c8-000\",\n  \"transform\": {\n    \"WriteCLValue\": {\n      \"cl_type\": \"U8\",\n      \"bytes\": \"01\",\n      \"parsed\": 1\n    }\n  }\n},\n{\n  \"key\": \"hash-378a43e38bc5129d8aa3bcd04f5c9a97be73f85b5be574182ac1346f04520796\",\n  \"transform\": {\n    \"AddKeys\": [\n      {\n        \"name\": \"nft_kind\",\n        \"key\": \"uref-e02c29a6120d5da7f14fb664ca60c3ade56a3171a670c292d0a4ea0f9ae4f0c8-007\"\n      }\n    ]\n  }\n},\n{\n  \"key\": \"uref-772103052d4559fcc2f8f2c2568eb75214462d463009106938e6f20e1cc0a7c0-000\",\n  \"transform\": {\n    \"WriteCLValue\": {\n      \"cl_type\": \"String\",\n      \"bytes\": \"0a0000006e66742d736368656d61\",\n      \"parsed\": \"nft-schema\"\n    }\n  }\n},\n{\n  \"key\": \"hash-378a43e38bc5129d8aa3bcd04f5c9a97be73f85b5be574182ac1346f04520796\",\n  \"transform\": {\n    \"AddKeys\": [\n      {\n        \"name\": \"json_schema\",\n        \"key\": \"uref-772103052d4559fcc2f8f2c2568eb75214462d463009106938e6f20e1cc0a7c0-007\"\n      }\n    ]\n  }\n},\n{\n  \"key\": \"uref-3b45a30c98d90de2c62812c6689aa2fac0cb4d08772fcfdee0584c5db2b1d12a-000\",\n  \"transform\": {\n    \"WriteCLValue\": {\n      \"cl_type\": \"U8\",\n      \"bytes\": \"00\",\n      \"parsed\": 0\n    }\n  }\n},\n{\n  \"key\": \"hash-378a43e38bc5129d8aa3bcd04f5c9a97be73f85b5be574182ac1346f04520796\",\n  \"transform\": {\n    \"AddKeys\": [\n      {\n        \"name\": \"minting_mode\",\n        \"key\": \"uref-3b45a30c98d90de2c62812c6689aa2fac0cb4d08772fcfdee0584c5db2b1d12a-007\"\n      }\n    ]\n  }\n},\n{\n  \"key\": \"uref-8443151d736bb3268815ad7848708d44ccc661799f969697c64b1cddb5ce89a7-000\",\n  \"transform\": {\n    \"WriteCLValue\": {\n      \"cl_type\": \"U8\",\n      \"bytes\": \"02\",\n      \"parsed\": 2\n    }\n  }\n},\n{\n  \"key\": \"hash-378a43e38bc5129d8aa3bcd04f5c9a97be73f85b5be574182ac1346f04520796\",\n  \"transform\": {\n    \"AddKeys\": [\n      {\n        \"name\": \"holder_mode\",\n        \"key\": \"uref-8443151d736bb3268815ad7848708d44ccc661799f969697c64b1cddb5ce89a7-007\"\n      }\n    ]\n  }\n},\n{\n  \"key\": \"uref-a77f2ac1f5e72c6b096ca414ae2c986a5387442ddf8e89a35b787a756adc4bb4-000\",\n  \"transform\": {\n    \"WriteCLValue\": {\n      \"cl_type\": \"U8\",\n      \"bytes\": \"00\",\n      \"parsed\": 0\n    }\n  }\n},\n{\n  \"key\": \"hash-378a43e38bc5129d8aa3bcd04f5c9a97be73f85b5be574182ac1346f04520796\",\n  \"transform\": {\n    \"AddKeys\": [\n      {\n        \"name\": \"whitelist_mode\",\n        \"key\": \"uref-a77f2ac1f5e72c6b096ca414ae2c986a5387442ddf8e89a35b787a756adc4bb4-007\"\n      }\n    ]\n  }\n},\n{\n  \"key\": \"uref-1ec63ea6442d9b4ef40d926280f8b72704b763d3ef7cdaccd9ecb04af5562d99-000\",\n  \"transform\": {\n    \"WriteCLValue\": {\n      \"cl_type\": \"String\",\n      \"bytes\": \"1800000063657037385f4345502d37382d636f6c6c656374696f6e32\",\n      \"parsed\": \"cep78_CEP-78-collection\"\n    }\n  }\n},\n{\n  \"key\": \"hash-378a43e38bc5129d8aa3bcd04f5c9a97be73f85b5be574182ac1346f04520796\",\n  \"transform\": {\n    \"AddKeys\": [\n      {\n        \"name\": \"receipt_name\",\n        \"key\": \"uref-1ec63ea6442d9b4ef40d926280f8b72704b763d3ef7cdaccd9ecb04af5562d99-007\"\n      }\n    ]\n  }\n},\n{\n  \"key\": \"uref-ac99c07d666f45ff5c86a2c1bb6cc44b612ddd5d39a9de88045b441ff6e6b327-000\",\n  \"transform\": {\n    \"WriteCLValue\": {\n      \"cl_type\": \"String\",\n      \"bytes\": \"[170 hex chars]\",\n      \"parsed\": \"contract-package-2b61207cd0e94ce1b1d40801b0abb1ab55fd7dae94c9dcf670292243f3791a30\"\n    }\n  }\n},\n{\n  \"key\": \"hash-378a43e38bc5129d8aa3bcd04f5c9a97be73f85b5be574182ac1346f04520796\",\n  \"transform\": {\n    \"AddKeys\": [\n      {\n        \"name\": \"cep78_CEP-78-collection\",\n        \"key\": \"uref-ac99c07d666f45ff5c86a2c1bb6cc44b612ddd5d39a9de88045b441ff6e6b327-007\"\n      }\n    ]\n  }\n},\n{\n  \"key\": \"uref-45e1bc671353ae58c41a703055959da243deefc7f4c3f121f3f9828d97475bda-000\",\n  \"transform\": {\n    \"WriteCLValue\": {\n      \"cl_type\": \"U8\",\n      \"bytes\": \"00\",\n      \"parsed\": 0\n    }\n  }\n},\n{\n  \"key\": \"hash-378a43e38bc5129d8aa3bcd04f5c9a97be73f85b5be574182ac1346f04520796\",\n  \"transform\": {\n    \"AddKeys\": [\n    ]\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Example Target Account Query with Verbose Output\nDESCRIPTION: A concrete example of querying the target account's state to verify its main purse, which should match the target purse in the transfer details.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/versioned_docs/version-2.0.0/developers/cli/transfers/verify-transfer.md#2025-04-22_snippet_12\n\nLANGUAGE: bash\nCODE:\n```\ncasper-client query-global-state -v \\\n--id 5 \\\n--node-address https://node.testnet.casper.network  \\\n--state-root-hash fdb1474d441ec0fcbf2e088f1630dbf98d3bcf7f7a7fe298303797f35b8cb4e1 \\\n--key 01360af61b50cdcb7b92cffe2c99315d413d34ef77fadee0c105cc4f1d4120f986\n```\n\n----------------------------------------\n\nTITLE: Defining Block Header Schema in JSON Schema\nDESCRIPTION: Schema definition for block header data structure including parent hash, state root, timestamps and other block metadata. Specifies required fields and data types.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/condor/jsonrpc-comp/rpc-2.0/schema.json.md#2025-04-22_snippet_86\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"description\": \"The header portion of a block.\",\n  \"type\": \"object\",\n  \"required\": [\n    \"accumulated_seed\",\n    \"body_hash\", \n    \"current_gas_price\",\n    \"era_id\",\n    \"height\",\n    \"parent_hash\",\n    \"proposer\",\n    \"protocol_version\",\n    \"random_bit\",\n    \"state_root_hash\",\n    \"timestamp\"\n  ],\n  \"properties\": {\n    \"parent_hash\": {\n      \"description\": \"The parent block's hash.\",\n      \"allOf\": [\n        {\n          \"$ref\": \"#/components/schemas/BlockHash\"\n        }\n      ]\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Integrating Query Component into App (JSX)\nDESCRIPTION: Updates the main `App.jsx` component to include the newly created `Query` component. It imports `Query` and renders it alongside the `UpdateMessage` component, conditionally based on the presence of the `publicKey`. The `publicKey` is passed as a prop to the `Query` component.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/docs/developers/dapps/template-frontend.md#2025-04-22_snippet_15\n\nLANGUAGE: jsx\nCODE:\n```\nimport React from \"react\";\nimport Connect from \"./Connect\";\nimport UpdateMessage from \"./UpdateMessage\";\n// highlight-next-line-green\nimport Query from \"./Query\";\nimport './App.css'\n\nfunction App() {\n    const [publicKey, setPublicKey] = React.useState(null);\n    return (\n        <>\n            <Connect setPublicKey={ setPublicKey } />\n            <div>\n                {publicKey !== null && (<>\n                    Wallet connected: {publicKey}<br/>\n                    <UpdateMessage publicKey={ publicKey } />\n                    // highlight-next-line-green\n                    <Query publicKey={ publicKey } />\n                </>)}\n            </div>\n        </>\n    );\n}\n```\n\n----------------------------------------\n\nTITLE: Viewing the PEM-Formatted Secret Key\nDESCRIPTION: Command to display the contents of the PEM-formatted secret key file generated from an Ethereum private key.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/docs/concepts/accounts-and-keys.md#2025-04-22_snippet_8\n\nLANGUAGE: bash\nCODE:\n```\ncat eth-secret.pem\n```\n\n----------------------------------------\n\nTITLE: Defining Global State Query Identifiers in JSON Schema\nDESCRIPTION: This JSON Schema defines the structure for identifying a specific state within the Casper Network's Global State for querying purposes. It uses the `anyOf` keyword to allow one of three methods: providing a `BlockHash` (referencing another schema component), a `BlockHeight` (a non-negative 64-bit unsigned integer), or a `StateRootHash` (referencing the `Digest` schema component). Each option is an object with a single required property corresponding to the chosen identifier type.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/condor/jsonrpc-comp/rpc-1.5/schema/GlobalStateIdentifier.json.md#2025-04-22_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"description\": \"Identifier for possible ways to query Global State\",\n    \"anyOf\": [\n        {\n            \"description\": \"Query using a block hash.\",\n            \"type\": \"object\",\n            \"required\": [\n                \"BlockHash\"\n            ],\n            \"properties\": {\n                \"BlockHash\": {\n                    \"$ref\": \"#/components/schemas/BlockHash\"\n                }\n            },\n            \"additionalProperties\": false\n        },\n        {\n            \"description\": \"Query using a block height.\",\n            \"type\": \"object\",\n            \"required\": [\n                \"BlockHeight\"\n            ],\n            \"properties\": {\n                \"BlockHeight\": {\n                    \"type\": \"integer\",\n                    \"format\": \"uint64\",\n                    \"minimum\": 0\n                }\n            },\n            \"additionalProperties\": false\n        },\n        {\n            \"description\": \"Query using the state root hash.\",\n            \"type\": \"object\",\n            \"required\": [\n                \"StateRootHash\"\n            ],\n            \"properties\": {\n                \"StateRootHash\": {\n                    \"$ref\": \"#/components/schemas/Digest\"\n                }\n            },\n            \"additionalProperties\": false\n        }\n    ]\n} \n```\n\n----------------------------------------\n\nTITLE: Adding tokio dependency for async client functions in Rust - Rust/TOML\nDESCRIPTION: Specifies the tokio async runtime as a dependency in Cargo.toml, required for running asynchronous Casper client functions in Rust. Set feature \"full\" for maximum compatibility. Place this snippet alongside other dependencies.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/versioned_docs/version-1.5.X/developers/dapps/sdk/client-library-usage.md#2025-04-22_snippet_4\n\nLANGUAGE: toml\nCODE:\n```\n[dependencies]\ntokio = { version = \"^1.27.0\", features = [\"full\"] }\n```\n\n----------------------------------------\n\nTITLE: Installing Casper Sidecar Package on Linux\nDESCRIPTION: Command to install the Debian package for Casper Sidecar service on Linux systems. The command uses apt package manager to install a local .deb package.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/versioned_docs/version-2.0.0/operators/setup/casper-sidecar.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nsudo apt install ./casper-sidecar_0.1.0-0_amd64.deb\n```\n\n----------------------------------------\n\nTITLE: Control Flow Operation Costs Configuration\nDESCRIPTION: Cost settings for control flow operations including block, loop, if statements, and function calls in the Casper Network.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/docs/developers/cli/opcode-costs.md#2025-04-22_snippet_1\n\nLANGUAGE: toml\nCODE:\n```\nblock = 440\nloop = 440\nif = 440\nelse = 440\nend = 440\nbr = 35000\nbr_if = 35000\nreturn = 440\nselect = 440\ncall = 68000\ncall_indirect = 68000\ndrop = 440\n```\n\n----------------------------------------\n\nTITLE: Aptos Function with Return Values\nDESCRIPTION: Shows how to declare a public function in Aptos that returns multiple values.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/versioned_docs/version-1.5.X/resources/moving-to-casper.md#2025-04-22_snippet_7\n\nLANGUAGE: rust\nCODE:\n```\npublic fun max(a: u8, b: u8): (u8, bool) {}\n```\n\n----------------------------------------\n\nTITLE: Assembling a Deploy Object in JavaScript SDK\nDESCRIPTION: Creates the final deploy object by combining the deploy parameters, session, and payment. This object will be signed before sending to the Casper network.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/versioned_docs/version-1.5.X/resources/advanced/list-cspr.md#2025-04-22_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\nimport { DeployUtil } from 'casper-js-sdk';\n\nDeployUtil.makeDeploy(deployParams, session, payment);\n```\n\n----------------------------------------\n\nTITLE: Parsing Utility Contract Response in Bash\nDESCRIPTION: Shows an example of the JSON response from the utility contract query on the Casper network, illustrating stored contract details including access keys and named keys.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/docs/resources/tokens/cep18/query.md#2025-04-22_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\n{\n  \"id\": 5359405942597097786,\n  \"jsonrpc\": \"2.0\",\n  \"result\": {\n    \"api_version\": \"1.0.0\",\n    \"block_header\": null,\n    \"merkle_proof\": \"[2048 hex chars]\",\n    \"stored_value\": {\n      \"ContractPackage\": {\n        \"access_key\": \"uref-1b867a3751f505762c69c8d92ba7462818cd0c2a705bb5d4270bce479410ee55-007\",\n        \"disabled_versions\": [],\n        \"groups\": [],\n        \"versions\": [\n          {\n            \"contract_hash\": \"contract-a8fe057675930f0951d45816c55615228ac8af2b7b231788278dffcf1dd8c0ca\",\n            \"contract_version\": 1,\n            \"protocol_version_major\": 1\n          }\n        ]\n      }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Payment Breakdown Schema in JSON\nDESCRIPTION: This JSON schema snippet specifies the structure required to describe payment transactions in a system. It mandates the inclusion of a 'source', representing the payment source purse, which must reference a predefined schema component 'URef'. The code snippet details necessary structure using JSON schema properties.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/condor/jsonrpc-comp/rpc-2.0/schema/PaymentInfo.json.md#2025-04-22_snippet_0\n\nLANGUAGE: JSON\nCODE:\n```\n{\n    \"description\": \"Breakdown of payments made to cover the cost.\",\n    \"type\": \"object\",\n    \"required\": [\n        \"source\"\n    ],\n    \"properties\": {\n        \"source\": {\n            \"description\": \"Source purse used for payment of the transaction.\",\n            \"allOf\": [\n                {\n                    \"$ref\": \"#/components/schemas/URef\"\n                }\n            ]\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Example of info_get_reward Request in Casper Network\nDESCRIPTION: This JSON request demonstrates how to use the info_get_reward RPC method to retrieve validator or delegator rewards for a specific era. It includes parameters for era_identifier, validator public key, and delegator public key.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/docs/developers/json-rpc/json-rpc-informational.md#2025-04-22_snippet_12\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"id\": 1,\n  \"jsonrpc\": \"2.0\",\n  \"method\": \"info_get_reward\",\n  \"params\": [\n      {\n          \"name\": \"era_identifier\",\n          \"value\": {\n              \"Era\": 1\n          }\n      },\n      {\n          \"name\": \"validator\",\n          \"value\": \"01d9bf2148748a85c89da5aad8ee0b0fc2d105fd39d41a4c796536354f0ae2900c\"\n      },\n      {\n          \"name\": \"delegator\",\n          \"value\": \"01d9bf2148748a85c89da5aad8ee0b0fc2d105fd39d41a4c796536354f0ae2900c\"\n      }\n  ],\n}\n```\n\n----------------------------------------\n\nTITLE: Building and Testing Wasm Session Code using Bash\nDESCRIPTION: Prepares the Rust environment and builds/tests the cloned Wasm session code. It updates the Rust installation using `rustup update`, sets the Wasm build target using `make prepare`, and builds/verifies the session code using `make test`. Requires Rust toolchain (`rustup`) and `make` to be installed.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/docs/resources/advanced/multi-sig/multi-sig-workflow.md#2025-04-22_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nrustup update\nmake prepare\nmake test\n```\n\n----------------------------------------\n\nTITLE: Creating a Cross-Contract Project with Cargo\nDESCRIPTION: This Bash command initializes a new cross-contract project using Cargo with the Casper framework. It sets up the project directory structure necessary for writing smart contracts. Dependencies include Cargo and Casper framework pre-installed.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/versioned_docs/version-1.5.X/resources/advanced/cross-contract.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ncargo casper cross-contract\n```\n\n----------------------------------------\n\nTITLE: Defining JSON Schema for Validator Changes\nDESCRIPTION: Describes the JSON schema for the \"info_get_validator_changes\" RPC. This RPC returns the status changes of validators on the network. The schema requires an API version and an array of validator status changes. Validators changes include fields such as public key and status changes, which are detailed in JsonValidatorChanges.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/condor/jsonrpc-comp/rpc-1.5/schema.json.md#2025-04-22_snippet_13\n\nLANGUAGE: json\nCODE:\n```\n{ \"name\": \"info_get_validator_changes\", \"summary\": \"returns status changes of active validators\", \"params\": [], \"result\": { \"name\": \"info_get_validator_changes_result\", \"schema\": { \"description\": \"Result for the \\\"info_get_validator_changes\\\" RPC.\", \"type\": \"object\", \"required\": [ \"api_version\", \"changes\" ], \"properties\": { \"api_version\": { \"description\": \"The RPC API version.\", \"type\": \"string\" }, \"changes\": { \"description\": \"The validators' status changes.\", \"type\": \"array\", \"items\": { \"$ref\": \"#/components/schemas/JsonValidatorChanges\" } } }, \"additionalProperties\": false } } }\n```\n\n----------------------------------------\n\nTITLE: Navigating and Building Contracts with Makefile\nDESCRIPTION: This sequence of Bash commands is used to navigate into the project directory, prepare the environment, and compile the smart contracts. It assumes that Makefile is properly configured with targets to prepare and build the contracts. The output includes a WebAssembly (WASM) file in the target directory. It is essential to have all dependencies set up in advance.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/docs/resources/advanced/cross-contract.md#2025-04-22_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ncd cross-contract\nmake prepare\nmake build-contract\n```\n\n----------------------------------------\n\nTITLE: Sample Deploy Response from Casper Node - JSON\nDESCRIPTION: This JSON output is returned from the casper-client after successfully submitting a deploy using the put-deploy command. It includes the API version and deploy_hash which can be used for tracking and verification. Expected output occurs if all prerequisites are met and the deploy request is accepted by the node.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/versioned_docs/version-2.0.0/resources/advanced/cross-contract.md#2025-04-22_snippet_11\n\nLANGUAGE: json\nCODE:\n```\n{\\n  \\\"id\\\": -9119604526598719721,\\n  \\\"jsonrpc\\\": \\\"2.0\\\",\\n  \\\"result\\\": {\\n    \\\"api_version\\\": \\\"1.4.13\\\",\\n    \\\"deploy_hash\\\": \\\"af42bc6dbc58f677d138eb968d897f965f1ed118a40980bc16efbcc2a0c71832\\\"\\n  }\\n}\\n\n```\n\n----------------------------------------\n\nTITLE: Reading Operations for Merkle Trie in Rust\nDESCRIPTION: Implementation of read operations for the Merkle trie, allowing retrieval of values stored in the global state.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/versioned_docs/version-1.5.X/concepts/global-state.md#2025-04-22_snippet_1\n\nLANGUAGE: rust\nCODE:\n```\n// From execution_engine/src/storage/trie_store/operations/mod.rs\n// Reading from the trie\n```\n\n----------------------------------------\n\nTITLE: Creating Casper Cross-Contract Project\nDESCRIPTION: Command to create a new Casper cross-contract project using cargo\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/versioned_docs/version-2.0.0/resources/advanced/cross-contract.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ncargo casper cross-contract\n```\n\n----------------------------------------\n\nTITLE: Aptos Public Function Implementation\nDESCRIPTION: Examples of implementing public functions in Aptos blockchain with and without return values.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/versioned_docs/version-2.0.0/resources/moving-to-casper.md#2025-04-22_snippet_5\n\nLANGUAGE: rust\nCODE:\n```\npublic fun start_collection(account: &signer) {}\n```\n\nLANGUAGE: rust\nCODE:\n```\npublic fun max(a: u8, b: u8): (u8, bool) {}\n```\n\n----------------------------------------\n\nTITLE: Example: Calling Auction Contract using Named Key in Rust\nDESCRIPTION: This example shows how to call the Auction contract using 'put-deploy' with the 'auction' named key. The entry point 'delegate' is accessed without specifying a version number, defaulting to the latest version.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/versioned_docs/version-1.5.X/developers/cli/calling-contracts.md#2025-04-22_snippet_11\n\nLANGUAGE: rust\nCODE:\n```\ncasper-client put-deploy \\\n    --node-address http://65.21.235.219:7777 \\\n    --chain-name casper-test \\\n    --secret-key [KEY_PATH]/secret_key.pem \\\n    --payment-amount 2500000000 \\\n    --session-name \"auction\" \\\n    --session-entry-point \"delegate\" \\\n    --session-arg \"validator:public_key='0145fb72c75e1b459839555d70356a5e6172e706efa204d86c86050e2f7878960f'\" \\\n    --session-arg \"amount:u512='500000000000'\" \\\n    --session-arg \"delegator:public_key='0154d828baafa6858b92919c4d78f26747430dcbecb9aa03e8b44077dc6266cabf'\"\n```\n\n----------------------------------------\n\nTITLE: Sample get-txn Response in JSON\nDESCRIPTION: Detailed JSON response from a get-txn command showing full transaction details including header, body, approvals and execution info.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/docs/developers/cli/sending-transactions.md#2025-04-22_snippet_4\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"jsonrpc\": \"2.0\",\n  \"id\": -3929997047953574815,\n  \"result\": {\n    \"api_version\": \"2.0.0\",\n    \"transaction\": {\n      \"Version1\": {\n        \"hash\": \"efad4a969064b5f8189ea4d6dd2fba2926d01d583a35178c07d7b827de16789e\",\n        \"header\": {\n          \"chain_name\": \"casper-net-1\",\n          \"timestamp\": \"2024-07-17T16:45:43.821Z\",\n          \"ttl\": \"30m\",\n          \"body_hash\": \"c5c4f7ae2fecb68937c19a1439eefddd8d4c32de779fe3ffee292977f161b234\",\n          \"pricing_mode\": {\n            \"Fixed\": {\n              \"gas_price_tolerance\": 10\n            }\n          },\n          \"initiator_addr\": {\n            \"PublicKey\": \"01f4ed68f99591d583426d1700b9be6ebd34d8cd395710596bce3db8b127ea3f65\"\n          }\n        },\n        \"body\": {\n          \"args\": [\n            [\n              \"name\",\n              {\n                \"cl_type\": \"String\",\n                \"bytes\": \"050000004345503138\",\n                \"parsed\": \"CEP18\"\n              }\n            ],\n            [\n              \"symbol\",\n              {\n                \"cl_type\": \"String\",\n                \"bytes\": \"0400000067726973\",\n                \"parsed\": \"gris\"\n              }\n            ],\n            [\n              \"total_supply\",\n              {\n                \"cl_type\": \"U256\",\n                \"bytes\": \"0164\",\n                \"parsed\": \"100\"\n              }\n            ],\n            [\n              \"decimals\",\n              {\n                \"cl_type\": \"U8\",\n                \"bytes\": \"01\",\n                \"parsed\": 1\n              }\n            ]\n          ],\n          \"target\": {\n            \"Session\": {\n              \"module_bytes\": \"[655810 hex chars]\",\n              \"runtime\": \"VmCasperV1\"\n            }\n          },\n          \"entry_point\": \"Call\",\n          \"transaction_category\": 2,\n          \"scheduling\": \"Standard\"\n        },\n        \"approvals\": [\n          {\n            \"signer\": \"01f4ed68f99591d583426d1700b9be6ebd34d8cd395710596bce3db8b127ea3f65\",\n            \"signature\": \"012ac4fc94d4ba269eb94aad1b9e90d1f701ed0e660995c1a15afc69010b74b51dd1334f9a59a9587aaf6aa6ab5ad35a7e86a9dcba39c2d21843e56d5d4014f00f\"\n          }\n        ]\n      }\n    },\n    \"execution_info\": {\n      \"block_hash\": \"23f21d3af261dd830790926b240dbded4362bb3c1183d9ee4ec1aea132bfa5e0\",\n      \"block_height\": 624,\n      \"execution_result\": {\n        \"Version2\": {\n          \"initiator\": {\n            \"PublicKey\": \"01f4ed68f99591d583426d1700b9be6ebd34d8cd395710596bce3db8b127ea3f65\"\n          },\n          \"error_message\": null,\n          \"limit\": \"1000000000000\",\n          \"consumed\": \"371736413663\",\n          \"cost\": \"1000000000000\",\n          \"payment\": [],\n          \"transfers\": [],\n          \"size_estimate\": 328238,\n          \"effects\": [\n            {\n              \"key\": \"balance-hold-014c3f3c8ae53f894ff181b1c2aaa7b5bbea5eb26b30c51887f8e4995a59e933b463f295c190010000\",\n              \"kind\": {\n                \"Write\": {\n                  \"CLValue\": {\n                    \"cl_type\": \"U512\",\n                    \"bytes\": \"050010a5d4e8\",\n                    \"parsed\": \"1000000000000\"\n                  }\n                }\n              }\n            },\n            {\n              \"key\": \"uref-4bb9770e4b7dfa5e9d12cfb35b55d862d6eebdced3205e422b48d7fb207b874d-000\",\n              \"kind\": {\n                \"Write\": {\n                  \"CLValue\": {\n                    \"cl_type\": \"String\",\n                    \"bytes\": \"050000004345503138\",\n                    \"parsed\": \"CEP18\"\n                  }\n                }\n              }\n            },\n            {\n              \"key\": \"uref-21a2ada35583cfe2a63c59a70d5df464f9bd90833c261871b44e9cf7f7d28c1a-000\",\n              \"kind\": {\n                \"Write\": {\n                  \"CLValue\": {\n                    \"cl_type\": \"String\",\n                    \"bytes\": \"0400000067726973\",\n                    \"parsed\": \"gris\"\n                  }\n                }\n              }\n            },\n            {\n              \"key\": \"uref-303ab2a4aeb6a057a7a256aabf491dad6f0decbfd880d80f9052d5b2df83ba5f-000\",\n              \"kind\": {\n                \"Write\": {\n                  \"CLValue\": {\n                    \"cl_type\": \"U8\",\n                    \"bytes\": \"01\",\n                    \"parsed\": 1\n                  }\n                }\n              }\n            },\n            {\n              \"key\": \"uref-456742d5cec63a743907e61935567da1c8f73f95c5aba2c84801189fce936ad1-000\",\n              \"kind\": {\n                \"Write\": {\n                  \"CLValue\": {\n                    \"cl_type\": \"U256\",\n                    \"bytes\": \"0164\",\n                    \"parsed\": \"100\"\n                  }\n                }\n              }\n            },\n            {\n              \"key\": \"uref-16baf770d6b97cfa6abe0017ea33f17efdc51236db3b2fa44052080282e19e03-000\",\n              \"kind\": {\n                \"Write\": {\n                  \"CLValue\": {\n                    \"cl_type\": \"U8\",\n                    \"bytes\": \"00\",\n                    \"parsed\": 0\n                  }\n                }\n              }\n            },\n            {\n              \"key\": \"uref-de4523d10773c2ee1fd48adb32d7121380c0febbf4f36f1029dc61ff079b83ce-000\",\n              \"kind\": {\n                \"Write\": {\n                  \"CLValue\": {\n                    \"cl_type\": \"U8\",\n                    \"bytes\": \"00\",\n                    \"parsed\": 0\n                  }\n                }\n              }\n            },\n            {\n              \"key\": \"uref-efcac4a17c93c5ba3d3213ea4a00631c5da3fb8bba36c70ae1431db6ea93b8b5-000\",\n              \"kind\": {\n                \"Write\": {\n                  \"CLValue\": {\n                    \"cl_type\": \"Unit\",\n                    \"bytes\": \"\",\n                    \"parsed\": null\n                  }\n                }\n              }\n            },\n            {\n              \"key\": \"package-dea470cf75f60abafcca7c68313f18fc2e21881d607ad75fa65e2bfe547da25c\",\n              \"kind\": {\n                \"Write\": {\n                  \"Package\": {\n                    \"versions\": [],\n                    \"disabled_versions\": [],\n                    \"groups\": [],\n                    \"lock_status\": \"Unlocked\"\n                  }\n                }\n              }\n            },\n            {\n              \"key\": \"named-key-entity-account-b2ba71785a4e071a467a03c3a4d3ca827ce5319e4ca92d148e8bcb2142eb4b8e-987369d1ce9ffff037841f4a221d7fc63924d565196de9e67ea8bdb897bc22e7\",\n              \"kind\": {\n                \"Write\": {\n                  \"NamedKey\": {\n                    \"named_key\": {\n                      \"cl_type\": \"Key\",\n                      \"bytes\": \"10dea470cf75f60abafcca7c68313f18fc2e21881d607ad75fa65e2bfe547da25c\"\n                    }\n                  }\n                }\n              }\n            }\n          ]\n        }\n      }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Designing Key Recovery Mechanism Using JSON for Blockchain Accounts\nDESCRIPTION: This JSON snippet outlines a thorough key management and recovery setup for a blockchain account. It employs a primary key and additional associated keys, structured so that the weighted combined input from all associated keys can match the key management threshold, allowing for account update capabilities even if the primary key is compromised.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/versioned_docs/version-1.5.X/resources/advanced/multi-sig/other-scenarios.md#2025-04-22_snippet_4\n\nLANGUAGE: json\nCODE:\n```\n{\n   \"account_address\": \"account-hash-a1…\",\n   \"action_thresholds\": {\n      \"deployment\": 2,\n      \"key_management\": 3\n   },\n   \"associated_keys\": [\n      {\n         \"account_address\": \"account-hash-a1…\", // primary key\n         \"weight\": 3\n      },\n      {\n         \"account_address\": \"account-hash-b2…\", // associated key\n         \"weight\": 1\n      },\n      {\n         \"account_address\": \"account-hash-c3…\", // associated key\n         \"weight\": 1\n      },\n      {\n         \"account_address\": \"account-hash-d4…\", // associated key\n         \"weight\": 1\n      }\n   ],\n   \"main_purse\": \"uref-1234…\",\n   \"named_keys\": []\n}\n```\n\n----------------------------------------\n\nTITLE: Verifying Contracts Using Casper Client Command\nDESCRIPTION: Command syntax for verifying smart contracts using the casper-client CLI tool. The command requires the verification service URL, transaction hash, and path to the contract source code. This allows for byte-by-byte comparison between the compiled source and the deployed contract on the blockchain.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/docs/developers/cli/verifying-contracts.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ncasper-client verify-contract --verification-url-basepath <HOST:PORT> <TRANSACTION-HASH> <PATH>\n```\n\n----------------------------------------\n\nTITLE: Querying Counter Value\nDESCRIPTION: Queries the blockchain for the specific count value stored in the counter contract using a nested query path.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/versioned_docs/version-2.0.0/resources/beginner/counter-testnet/walkthrough.md#2025-04-22_snippet_8\n\nLANGUAGE: bash\nCODE:\n```\ncasper-client query-global-state --node-address http://[NODE_IP]:7777 \\\n    --state-root-hash [STATE_ROOT_HASH] \\\n    --key [ACCOUNT_HASH] -q \"counter/count\"\n```\n\n----------------------------------------\n\nTITLE: Write Unbonding JSON Schema\nDESCRIPTION: This schema specifies writing an 'Unbonding' transaction to the global state, requiring a 'WriteUnbonding' property defined as an array of 'UnbondingPurse' references. It integrates into the broader schema through precise formatting rules.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/condor/jsonrpc-comp/rpc-1.5/schema.json.md#2025-04-22_snippet_51\n\nLANGUAGE: JSON\nCODE:\n```\n{\"WriteUnbonding\": {\"type\": \"array\", \"items\": {\"$ref\": \"#/components/schemas/UnbondingPurse\"}}}\n```\n\n----------------------------------------\n\nTITLE: Running Tests with Makefile for Casper Contracts\nDESCRIPTION: This bash snippet shows the content of a Makefile used to run tests for Casper contracts. It creates a tests/wasm folder, copies the necessary Wasm files, and executes the tests using cargo test.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/versioned_docs/version-1.5.X/developers/writing-onchain-code/testing-contracts.md#2025-04-22_snippet_12\n\nLANGUAGE: bash\nCODE:\n```\ntest: build-contract\n\tmkdir -p tests/wasm\n\tcp contract-v1/target/wasm32-unknown-unknown/release/counter-v1.wasm tests/wasm\n\tcp contract-v2/target/wasm32-unknown-unknown/release/counter-v2.wasm tests/wasm\n\tcp counter-call/target/wasm32-unknown-unknown/release/counter-call.wasm tests/wasm\n\tcd tests && cargo test\n```\n\n----------------------------------------\n\nTITLE: Defining GetRequest Data Tags in Rust\nDESCRIPTION: This Rust enum `Tag` specifies the type of data being requested in a `GetRequest` message. Each variant corresponds to a specific data item (e.g., `Deploy`, `Block`, `TrieOrChunk`) and implies the expected ID type and payload type, as detailed in the accompanying table. The `serialized_id` in the `GetRequest` payload uses one of these tags.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/versioned_docs/version-2.0.0/concepts/design/networking-protocol.md#2025-04-22_snippet_3\n\nLANGUAGE: rust\nCODE:\n```\n```rust\npub enum Tag {\n    Deploy,\n    FinalizedApprovals,\n    Block,\n    GossipedAddress,\n    BlockAndMetadataByHeight,\n    BlockHeaderByHash,\n    BlockHeaderAndFinalitySignaturesByHeight,\n    TrieOrChunk,\n    BlockAndDeploysByHash,\n    BlockHeaderBatch,\n    FinalitySignaturesByHash,\n}\n```\n```\n\n----------------------------------------\n\nTITLE: Querying Auction Info with Casper Client\nDESCRIPTION: This Bash snippet demonstrates how to retrieve auction info from the Casper Network to detect validator eviction. It uses 'casper-client' and 'jq' tools to filter information specific to a validator's public key, which must be manually substituted.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/docs/operators/becoming-a-validator/recovering.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ncasper-client get-auction-info | jq '.result.auction_state.bids[] | select( .public_key == \\\"<public_key>\\\")'\n```\n\n----------------------------------------\n\nTITLE: Serializing ProtocolVersion Structure\nDESCRIPTION: Describes `ProtocolVersion`, a type indicating the Casper Platform protocol version. It serializes as three consecutive `u32` values representing the major, minor, and patch versions, respectively.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/versioned_docs/version-2.0.0/concepts/serialization/types.md#2025-04-22_snippet_40\n\nLANGUAGE: text\nCODE:\n```\nA newtype indicating the Casper Platform protocol version. It is serialized as three [`u32`](./primitives.md#clvalue-numeric) values indicating major, minor and patch versions in that order.\n```\n\n----------------------------------------\n\nTITLE: Serializing TransferAddr Type\nDESCRIPTION: Defines `TransferAddr`, a hex-encoded transfer address. It serializes directly as the byte representation of the address itself.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/versioned_docs/version-2.0.0/concepts/serialization/types.md#2025-04-22_snippet_53\n\nLANGUAGE: text\nCODE:\n```\nHex-encoded transfer address, which serializes as a byte representation of itself.\n```\n\n----------------------------------------\n\nTITLE: SSH Login Command Template\nDESCRIPTION: Generic command format for SSH login using private key authentication\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/versioned_docs/version-2.0.0/operators/setup/non-root-user.md#2025-04-22_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\nssh -i <your ssh private key> <username>@<server ip>\n```\n\n----------------------------------------\n\nTITLE: Defining ValidatorChangeInEra Object Schema in JSON\nDESCRIPTION: This JSON schema defines the structure for an object representing a validator status change within a specific era. It requires an `era_id` (referencing the `EraId` schema) and a `validator_change` (referencing the `ValidatorChange` schema). No additional properties are permitted beyond these.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/condor/jsonrpc-comp/rpc-2.0/schema/JsonValidatorStatusChange.json.md#2025-04-22_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"description\": \"A single change to a validator's status in the given era.\",\n    \"type\": \"object\",\n    \"required\": [\n        \"era_id\",\n        \"validator_change\"\n    ],\n    \"properties\": {\n        \"era_id\": {\n            \"description\": \"The era in which the change occurred.\",\n            \"allOf\": [\n                {\n                    \"$ref\": \"#/components/schemas/EraId\"\n                }\n            ]\n        },\n        \"validator_change\": {\n            \"description\": \"The change in validator status.\",\n            \"allOf\": [\n                {\n                    \"$ref\": \"#/components/schemas/ValidatorChange\"\n                }\n            ]\n        }\n    },\n    \"additionalProperties\": false\n} \n```\n\n----------------------------------------\n\nTITLE: Deploying the Casper Contract using casper-client\nDESCRIPTION: This Bash command demonstrates how to deploy the compiled Wasm contract to a Casper network (casper-test) using the `casper-client put-deploy` command. It specifies the node address, chain name, the path to the deployer's secret key, the payment amount for the deployment, and the path to the compiled `contract.wasm` file.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/versioned_docs/version-1.5.X/resources/advanced/cross-contract.md#2025-04-22_snippet_18\n\nLANGUAGE: bash\nCODE:\n```\ncasper-client put-deploy \\\n    --node-address http://136.243.187.84:7777 \\\n    --chain-name casper-test \\\n    --secret-key ./keys/secret_key.pem \\\n    --payment-amount 20000000000 \\\n    --session-path ./contract/target/wasm32-unknown-unknown/release/contract.wasm\n\n```\n\n----------------------------------------\n\nTITLE: Installing CMake on Ubuntu - Bash\nDESCRIPTION: Installs or updates CMake on Ubuntu Linux using apt-get. Used for compiling many native-code dependencies, including those in casper-node source. Requires sudo privileges.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/versioned_docs/version-1.5.X/developers/prerequisites.md#2025-04-22_snippet_20\n\nLANGUAGE: bash\nCODE:\n```\nsudo apt-get -y install cmake\n```\n\n----------------------------------------\n\nTITLE: Configuring NCTL Bash Environment\nDESCRIPTION: Commands to set up NCTL command aliases in .bashrc and activate the environment.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/docs/developers/dapps/setup-nctl.md#2025-04-22_snippet_9\n\nLANGUAGE: bash\nCODE:\n```\ncd YOUR_WORKING_DIRECTORY/casper-nctl\n\ncat >> $HOME/.bashrc <<- EOM\n\n# ----------------------------------------------------------------------\n# CASPER - NCTL\n# ----------------------------------------------------------------------\n\n# Activate NCTL shell.\n. $(pwd)/activate\n\nEOM\n```\n\n----------------------------------------\n\nTITLE: Defining Contract Hash Address Schema in JSON\nDESCRIPTION: This JSON snippet defines a schema object for a contract hash address. It specifies that the value should be a string (`type`: \"string\") and provides a description explaining its purpose (`description`: \"The hash address of the contract\"). This structure is commonly used in API definitions or configuration files.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/condor/jsonrpc-comp/rpc-2.0/schema/ContractHash.json.md#2025-04-22_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"description\": \"The hash address of the contract\",\n    \"type\": \"string\"\n} \n```\n\n----------------------------------------\n\nTITLE: Automated Detection of Validator Eviction\nDESCRIPTION: This Bash snippet automates the process of detecting validator eviction by dynamically reading the validator's public key from a preconfigured file, eliminating manual substitution.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/docs/operators/becoming-a-validator/recovering.md#2025-04-22_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ncasper-client get-auction-info | jq --arg pk \"$(cat /etc/casper/validator_keys/public_key_hex)\" '.result.auction_state.bids[] | select( (.public_key | ascii_downcase) == ($pk | ascii_downcase) )'\n```\n\n----------------------------------------\n\nTITLE: Compiling Casper Session Code to Wasm\nDESCRIPTION: Command to compile Rust session code to WebAssembly for deployment on the Casper Network.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/versioned_docs/version-2.0.0/developers/writing-onchain-code/writing-session-code.md#2025-04-22_snippet_8\n\nLANGUAGE: bash\nCODE:\n```\ncargo build --release --target wasm32-unknown-unknown\n```\n\n----------------------------------------\n\nTITLE: Viewing Deploy Information and Transaction Results in JSON Format\nDESCRIPTION: This JSON snippet shows the deploy information including hash, account, gas usage, and various transaction transforms following a cross-contract call execution. It contains the details of state changes resulting from executing a contract that calls another contract.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/versioned_docs/version-2.0.0/resources/advanced/cross-contract.md#2025-04-22_snippet_24\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"transform\": {\n    \"WriteDeployInfo\": {\n      \"deploy_hash\": \"15e11340d92fc9e64deb38bd942f4efb69caad0851eec24fd577070309d18537\",\n      \"from\": \"account-hash-ee57bb3b39eb66b74a1dcf12f3f0e7d8e906e34b11f85dc05497bf33fbf3a1f9\",\n      \"gas\": \"462273650\",\n      \"source\": \"uref-453534c5c380862c2d814b5879f08fe6b5a3d4f031eaf20e08cf091d274035a5-007\",\n      \"transfers\": []\n    }\n  }\n},\n{\n  \"key\": \"hash-8cf5e4acf51f54eb59291599187838dc3bc234089c46fc6ca8ad17e762ae4401\",\n  \"transform\": \"Identity\"\n},\n{\n  \"key\": \"hash-624dbe2395b9d9503fbee82162f1714ebff6b639f96d2084d26d944c354ec4c5\",\n  \"transform\": \"Identity\"\n},\n{\n  \"key\": \"balance-98d945f5324f865243b7c02c0417ab6eac361c5c56602fd42ced834a1ba201b6\",\n  \"transform\": \"Identity\"\n},\n{\n  \"key\": \"hash-8cf5e4acf51f54eb59291599187838dc3bc234089c46fc6ca8ad17e762ae4401\",\n  \"transform\": \"Identity\"\n},\n{\n  \"key\": \"hash-010c3fe81b7b862e50c77ef9a958a05bfa98444f26f96f23d37a13c96244cfb7\",\n  \"transform\": \"Identity\"\n},\n{\n  \"key\": \"hash-9824d60dc3a5c44a20b9fd260a412437933835b52fc683d8ae36e4ec2114843e\",\n  \"transform\": \"Identity\"\n},\n{\n  \"key\": \"balance-98d945f5324f865243b7c02c0417ab6eac361c5c56602fd42ced834a1ba201b6\",\n  \"transform\": \"Identity\"\n},\n{\n  \"key\": \"balance-bb9f47c30ddbe192438fad10b7db8200247529d6592af7159d92c5f3aa7716a1\",\n  \"transform\": \"Identity\"\n},\n{\n  \"key\": \"balance-98d945f5324f865243b7c02c0417ab6eac361c5c56602fd42ced834a1ba201b6\",\n  \"transform\": {\n    \"WriteCLValue\": {\n      \"bytes\": \"00\",\n      \"cl_type\": \"U512\",\n      \"parsed\": \"0\"\n    }\n  }\n},\n{\n  \"key\": \"balance-bb9f47c30ddbe192438fad10b7db8200247529d6592af7159d92c5f3aa7716a1\",\n  \"transform\": {\n    \"AddUInt512\": \"20000000000\"\n  }\n}\n]\n```\n\n----------------------------------------\n\nTITLE: Querying Global State in Bash\nDESCRIPTION: Command to query the Casper Network's global state for a specific account using the state root hash and account hash.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/docs/resources/tokens/cep18/full-tutorial.md#2025-04-22_snippet_11\n\nLANGUAGE: bash\nCODE:\n```\ncasper-client query-global-state \\\n--node-address http://<HOST:PORT> \\\n--state-root-hash [STATE_ROOT_HASH] \\\n--key [ACCOUNT_HASH]\n```\n\n----------------------------------------\n\nTITLE: Fix Database Permissions\nDESCRIPTION: Command to correct file permissions after database restoration.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/versioned_docs/version-2.0.0/operators/maintenance/archiving-and-restoring.md#2025-04-22_snippet_8\n\nLANGUAGE: bash\nCODE:\n```\nsudo /etc/casper/node_util.py fix_permissions\n```\n\n----------------------------------------\n\nTITLE: Speculative Transaction Execution Request in JSON\nDESCRIPTION: Example JSON-RPC request for speculatively executing a transaction on the Casper network. Includes a Version1 transaction with transfer details, approvals, and associated parameters.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/docs/developers/json-rpc/json-rpc-transactional.md#2025-04-22_snippet_9\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"jsonrpc\": \"2.0\",\n  \"method\": \"speculative_exec_txn\",\n  \"params\": {\n    \"transaction\": {\n      \"Version1\": {\n        \"hash\": \"f5582cb81a5abda63ebaa4edb3b05210ecbd63ffb8dd17bfbeb3b867f4014468\",\n        \"header\": {\n          \"chain_name\": \"casper-example\",\n          \"timestamp\": \"2020-11-17T00:39:24.072Z\",\n          \"ttl\": \"1h\",\n          \"body_hash\": \"aa24833ffbf31d62c8c8c4265349e7c09cd71952fcbce6f7b12daf5e340bf2cc\",\n          \"pricing_mode\": {\n            \"Fixed\": {\n              \"gas_price_tolerance\": 5\n            }\n          },\n          \"initiator_addr\": {\n            \"PublicKey\": \"01d9bf2148748a85c89da5aad8ee0b0fc2d105fd39d41a4c796536354f0ae2900c\"\n          }\n        },\n        \"body\": {\n          \"args\": [\n            [\n              \"source\",\n              {\n                \"cl_type\": {\n                  \"Option\": \"URef\"\n                },\n                \"bytes\": \"010a0a0a0a0a0a0a0a0a0a0a0a0a0a0a0a0a0a0a0a0a0a0a0a0a0a0a0a0a0a0a0a07\",\n                \"parsed\": \"uref-0a0a0a0a0a0a0a0a0a0a0a0a0a0a0a0a0a0a0a0a0a0a0a0a0a0a0a0a0a0a0a0a-007\"\n              }\n            ],\n            [\n              \"target\",\n              {\n                \"cl_type\": \"URef\",\n                \"bytes\": \"1b1b1b1b1b1b1b1b1b1b1b1b1b1b1b1b1b1b1b1b1b1b1b1b1b1b1b1b1b1b1b1b00\",\n                \"parsed\": \"uref-1b1b1b1b1b1b1b1b1b1b1b1b1b1b1b1b1b1b1b1b1b1b1b1b1b1b1b1b1b1b1b1b-000\"\n              }\n            ],\n            [\n              \"amount\",\n              {\n                \"cl_type\": \"U512\",\n                \"bytes\": \"0500ac23fc06\",\n                \"parsed\": \"30000000000\"\n              }\n            ],\n            [\n              \"id\",\n              {\n                \"cl_type\": {\n                  \"Option\": \"U64\"\n                },\n                \"bytes\": \"01e703000000000000\",\n                \"parsed\": 999\n              }\n            ]\n          ],\n          \"target\": \"Native\",\n          \"entry_point\": \"Transfer\",\n          \"transaction_category\": 0,\n          \"scheduling\": \"Standard\"\n        },\n        \"approvals\": [\n          {\n            \"signer\": \"01d9bf2148748a85c89da5aad8ee0b0fc2d105fd39d41a4c796536354f0ae2900c\",\n            \"signature\": \"0137d3f468d8f8a6e63f4110d79be29b8c8428e9cd858a92049660e7851ae16a299640d1fc1c930ab6cb424f1a6eec0b194df74bede14f4af1b5133106f1280d0b\"\n          }\n        ]\n      }\n    }\n  },\n  \"id\": 6889533540839698701\n}\n```\n\n----------------------------------------\n\nTITLE: Building Casper Contract Management Wasm Files in Shell\nDESCRIPTION: Command to build Casper smart contracts needed for administrator functions. These contracts are used to manage, enable, and disable contracts and accounts in the private network.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/versioned_docs/version-2.0.0/operators/setup-network/create-private.md#2025-04-22_snippet_7\n\nLANGUAGE: sh\nCODE:\n```\nmake build-contracts-rs\n```\n\n----------------------------------------\n\nTITLE: Directory Structure for Validator Keys\nDESCRIPTION: File system layout showing the required directory structure for validator keys under /etc/casper/validator_keys/ with subdirectories for current and backup nodes.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/versioned_docs/version-2.0.0/operators/maintenance/moving-node.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n    /etc/casper/validator_keys/\n    ├── public_key.pem\n    ├── public_key_hex\n    ├── secret_key.pem\n    ├── current_node\n    │   ├── public_key.pem\n    │   ├── public_key_hex\n    │   └── secret_key.pem\n    └── backup_node\n    |   ├── public_key.pem\n    |   ├── public_key_hex\n    |   └── secret_key.pem\n```\n\n----------------------------------------\n\nTITLE: Successful Deploy Response from Casper Network\nDESCRIPTION: The JSON response returned after successfully sending a deploy to the Casper network, containing the API version and deploy hash which can be used to track the deployment.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/docs/resources/advanced/cross-contract.md#2025-04-22_snippet_9\n\nLANGUAGE: bash\nCODE:\n```\n{\n  \"id\": -9119604526598719721,\n  \"jsonrpc\": \"2.0\",\n  \"result\": {\n    \"api_version\": \"1.4.13\",\n    \"deploy_hash\": \"af42bc6dbc58f677d138eb968d897f965f1ed118a40980bc16efbcc2a0c71832\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Query Balance Help Command\nDESCRIPTION: Displays help information for the query-balance command\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/versioned_docs/version-2.0.0/developers/cli/transfers/verify-transfer.md#2025-04-22_snippet_15\n\nLANGUAGE: bash\nCODE:\n```\ncasper-client query-balance --help\n```\n\n----------------------------------------\n\nTITLE: Running Casper Tests Using Makefile\nDESCRIPTION: This snippet demonstrates how to run Casper tests using a Makefile. It includes commands to create a test folder, copy the WASM file, and run the tests.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/versioned_docs/version-2.0.0/developers/writing-onchain-code/testing-session-code.md#2025-04-22_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\nmkdir -p tests/wasm\ncp contract/target/wasm32-unknown-unknown/release/contract.wasm tests/wasm\ncd tests && cargo test\n```\n\n----------------------------------------\n\nTITLE: Retrieving Era Summary Result in JSON\nDESCRIPTION: This snippet provides a JSON response example of the 'chain_get_era_summary' method, showcasing the RPC API version, the era summary containing block hash, era ID, stored values like seigniorage allocations, state root hash, and merkle proof. No external dependencies are required. Inputs include the API method call, and outputs include all relevant era details encapsulated in a JSON object.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/docs/developers/json-rpc/json-rpc-informational.md#2025-04-22_snippet_5\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"jsonrpc\": \"2.0\",\n  \"id\": 1,\n  \"result\": {\n    \"name\": \"chain_get_era_summary_result\",\n    \"value\": {\n      \"api_version\": \"2.0.0\",\n      \"era_summary\": {\n        \"block_hash\": \"0744fcb72af43c5cc372039bc5a8bfee48808a9ce414acc0d6338a628c20eb42\",\n        \"era_id\": 42,\n        \"stored_value\": {\n          \"EraInfo\": {\n            \"seigniorage_allocations\": [\n              {\n                \"Delegator\": {\n                  \"delegator_public_key\": \"01e1b46a25baa8a5c28beb3c9cfb79b572effa04076f00befa57eb70b016153f18\",\n                  \"validator_public_key\": \"012a1732addc639ea43a89e25d3ad912e40232156dcaa4b9edfc709f43d2fb0876\",\n                  \"amount\": \"1000\"\n                }\n              },\n              {\n                \"Validator\": {\n                  \"validator_public_key\": \"012a1732addc639ea43a89e25d3ad912e40232156dcaa4b9edfc709f43d2fb0876\",\n                  \"amount\": \"2000\"\n                }\n              }\n            ]\n          }\n        },\n        \"state_root_hash\": \"0808080808080808080808080808080808080808080808080808080808080808\",\n        \"merkle_proof\": \"01000000006ef2e0949ac76e55812421f755abe129b6244fe7168b77f47a72536147614625016ef2e0949ac76e55812421f755abe129b6244fe7168b77f47a72536147614625000000003529cde5c621f857f75f3810611eb4af3f998caaa9d4a3413cf799f99c67db0307010000006ef2e0949ac76e55812421f755abe129b6244fe7168b77f47a7253614761462501010102000000006e06000000000074769d28aac597a36a03a932d4b43e4f10bf0403ee5c41dd035102553f5773631200b9e173e8f05361b681513c14e25e3138639eb03232581db7557c9e8dbbc83ce94500226a9a7fe4f2b7b88d5103a4fc7400f02bf89c860c9ccdd56951a2afe9be0e0267006d820fb5676eb2960e15722f7725f3f8f41030078f8b2e44bf0dc03f71b176d6e800dc5ae9805068c5be6da1a90b2528ee85db0609cc0fb4bd60bbd559f497a98b67f500e1e3e846592f4918234647fca39830b7e1e6ad6f5b7a99b39af823d82ba1873d000003000000010186ff500f287e9b53f823ae1582b1fa429dfede28015125fd233a31ca04d5012002015cc42669a55467a1fdf49750772bfc1aed59b9b085558eb81510e9b015a7c83b0301e3cf4a34b1db6bfa58808b686cb8fe21ebe0c1bcbcee522649d2b135fe510fe3\"\n      }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Verifying Deploy Status\nDESCRIPTION: Command to check if a deploy was executed successfully using the deploy hash.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/versioned_docs/version-2.0.0/resources/advanced/multi-sig/multi-sig-workflow.md#2025-04-22_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\ncasper-client get-deploy --node-address https://node.testnet.casper.network <DEPLOY_HASH>\n```\n\n----------------------------------------\n\nTITLE: Querying Account Configuration with Casper Client\nDESCRIPTION: Command to verify the account's configuration after the multi-signature setup. It queries the network's global state using the state root hash from the deploy's block and the account's public key.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/versioned_docs/version-1.5.X/resources/advanced/two-party-multi-sig.md#2025-04-22_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\ncasper-client query-global-state \\\n--node-address http://<peer-ip-address>:7777 \\\n--state-root-hash <state-root-hash-from-block> \\\n--key <hex-encoded-public-key-MA>\n```\n\n----------------------------------------\n\nTITLE: Memory Size Calculation and Allocation in WebAssembly\nDESCRIPTION: Implements memory size calculation and allocation in WebAssembly. Handles size boundaries and alignment requirements for memory allocation.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/versioned_docs/version-2.0.0/developers/json-rpc/json-rpc-transactional.md#2025-04-22_snippet_13\n\nLANGUAGE: webassembly\nCODE:\n```\n02000b9801004190f011100802400240200241027422022003410374418080016a2203200220034b1b418780046a2203411076230141036a2401230141f4034b0440000b1024230141036b24012202417f470d0041a09902100841012103410021020c010b41d8e80010082002411074220242003702042002200220034180807c716a410272360200410021030b20002002360204200020033602000b\n```\n\n----------------------------------------\n\nTITLE: Deploy Information Schema Structure - JSON Schema\nDESCRIPTION: Defines a JSON schema for deploy information including deploy hash, transfers, account details, source purse, and gas costs. The schema enforces required fields and references external schema definitions for specific data types like DeployHash, TransferAddr, AccountHash, URef, and U512.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/condor/jsonrpc-comp/rpc-1.5/schema/DeployInfo.json.md#2025-04-22_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"description\": \"Information relating to the given Deploy.\",\n    \"type\": \"object\",\n    \"required\": [\n        \"deploy_hash\",\n        \"from\",\n        \"gas\",\n        \"source\",\n        \"transfers\"\n    ],\n    \"properties\": {\n        \"deploy_hash\": {\n            \"description\": \"The relevant Deploy.\",\n            \"allOf\": [\n                {\n                    \"$ref\": \"#/components/schemas/DeployHash\"\n                }\n            ]\n        },\n        \"transfers\": {\n            \"description\": \"Transfers performed by the Deploy.\",\n            \"type\": \"array\",\n            \"items\": {\n                \"$ref\": \"#/components/schemas/TransferAddr\"\n            }\n        },\n        \"from\": {\n            \"description\": \"Account identifier of the creator of the Deploy.\",\n            \"allOf\": [\n                {\n                    \"$ref\": \"#/components/schemas/AccountHash\"\n                }\n            ]\n        },\n        \"source\": {\n            \"description\": \"Source purse used for payment of the Deploy.\",\n            \"allOf\": [\n                {\n                    \"$ref\": \"#/components/schemas/URef\"\n                }\n            ]\n        },\n        \"gas\": {\n            \"description\": \"Gas cost of executing the Deploy.\",\n            \"allOf\": [\n                {\n                    \"$ref\": \"#/components/schemas/U512\"\n                }\n            ]\n        }\n    },\n    \"additionalProperties\": false\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Validator Key Directory Structure in Bash\nDESCRIPTION: This Bash code snippet shows how to create directory structures for storing validator keys on both the current and backup nodes. The setup is essential for key swapping, as it organizes public and secret keys into respective nodes' directories. This structure simplifies running commands to swap keys and start the new validator with correct credentials.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/docs/operators/maintenance/moving-node.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n    /etc/casper/validator_keys/\n    ├── public_key.pem\n    ├── public_key_hex\n    ├── secret_key.pem\n    ├── current_node\n    │   ├── public_key.pem\n    │   ├── public_key_hex\n    │   └── secret_key.pem\n    └── backup_node\n    |   ├── public_key.pem\n    |   ├── public_key_hex\n    |   └── secret_key.pem\n\n```\n\n----------------------------------------\n\nTITLE: JSON-RPC Response for Deploy Information\nDESCRIPTION: This is the JSON-RPC response containing detailed information about the requested deploy. It includes the deploy header, payment, session, approvals, and execution results.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/versioned_docs/version-2.0.0/developers/cli/transfers/direct-token-transfer.md#2025-04-22_snippet_7\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"jsonrpc\": \"2.0\",\n  \"result\": {\n    \"api_version\": \"1.5.3\",\n    \"deploy\": {\n      \"hash\": \"1f17a0bdeaaf71abd03492c854cdf97f746432751721ce555e95b9cefe641e3c\",\n      \"header\": {\n        \"account\": \"0154d828baafa6858b92919c4d78f26747430dcbecb9aa03e8b44077dc6266cabf\",\n        \"timestamp\": \"2023-10-12T14:59:40.760Z\",\n        \"ttl\": \"30m\",\n        \"gas_price\": 1,\n        \"body_hash\": \"ea7e6a6cbdd4d761827cb627e162896bee3e771beda000550615c9b4fafa3a2d\",\n        \"dependencies\": [],\n        \"chain_name\": \"casper-test\"\n      },\n      \"payment\": {\n        \"ModuleBytes\": {\n          \"module_bytes\": \"\",\n          \"args\": [\n            [\n              \"amount\",\n              {\n                \"cl_type\": \"U512\",\n                \"bytes\": \"0400e1f505\",\n                \"parsed\": \"100000000\"\n              }\n            ]\n          ]\n        }\n      },\n      \"session\": {\n        \"Transfer\": {\n          \"args\": [\n            [\n              \"amount\",\n              {\n                \"cl_type\": \"U512\",\n                \"bytes\": \"0500f2052a01\",\n                \"parsed\": \"5000000000\"\n              }\n            ],\n            [\n              \"target\",\n              {\n                \"cl_type\": \"PublicKey\",\n                \"bytes\": \"01360af61b50cdcb7b92cffe2c99315d413d34ef77fadee0c105cc4f1d4120f986\",\n                \"parsed\": \"01360af61b50cdcb7b92cffe2c99315d413d34ef77fadee0c105cc4f1d4120f986\"\n              }\n            ],\n            [\n              \"id\",\n              {\n                \"cl_type\": {\n                  \"Option\": \"U64\"\n                },\n                \"bytes\": \"014767a90000000000\",\n                \"parsed\": 11102023\n              }\n            ]\n          ]\n        }\n      },\n      \"approvals\": [\n        {\n          \"signer\": \"0154d828baafa6858b92919c4d78f26747430dcbecb9aa03e8b44077dc6266cabf\",\n          \"signature\": \"01e53cb742ed13ff4f0584a3da0f22f5942a33e010965adf640c91204ae4bc7436f1e5534d338ffa117d193295214816445439781229d24a372085c316eac5e305\"\n        }\n      ]\n    },\n    \"execution_results\": [\n      {\n        \"block_hash\": \"aac51dad028ba8b3d6fec86a39252bbc4285d513fd57a8af4696ab5390ac5c2b\",\n        \"result\": {\n          \"Success\": {\n            \"effect\": {\n              \"operations\": [],\n              \"transforms\": [\n                {\n                  \"key\": \"hash-8cf5e4acf51f54eb59291599187838dc3bc234089c46fc6ca8ad17e762ae4401\",\n                  \"transform\": \"Identity\"\n                },\n                {\n                  \"key\": \"account-hash-1ed5a1c39bea93c105f2d22c965a84b205b36734a377d05dbb103b6bfaa595a7\",\n                  \"transform\": \"Identity\"\n                },\n                {\n                  \"key\": \"account-hash-1ed5a1c39bea93c105f2d22c965a84b205b36734a377d05dbb103b6bfaa595a7\",\n                  \"transform\": \"Identity\"\n                },\n                {\n                  \"key\": \"hash-8cf5e4acf51f54eb59291599187838dc3bc234089c46fc6ca8ad17e762ae4401\",\n                  \"transform\": \"Identity\"\n                },\n                {\n                  \"key\": \"hash-8cf5e4acf51f54eb59291599187838dc3bc234089c46fc6ca8ad17e762ae4401\",\n                  \"transform\": \"Identity\"\n                },\n                {\n                  \"key\": \"hash-624dbe2395b9d9503fbee82162f1714ebff6b639f96d2084d26d944c354ec4c5\",\n                  \"transform\": \"Identity\"\n                },\n                {\n                  \"key\": \"hash-8cf5e4acf51f54eb59291599187838dc3bc234089c46fc6ca8ad17e762ae4401\",\n                  \"transform\": \"Identity\"\n                },\n                {\n                  \"key\": \"hash-010c3fe81b7b862e50c77ef9a958a05bfa98444f26f96f23d37a13c96244cfb7\",\n                  \"transform\": \"Identity\"\n                },\n                {\n                  \"key\": \"hash-010c3fe81b7b862e50c77ef9a958a05bfa98444f26f96f23d37a13c96244cfb7\",\n                  \"transform\": \"Identity\"\n                },\n                {\n                  \"key\": \"hash-9824d60dc3a5c44a20b9fd260a412437933835b52fc683d8ae36e4ec2114843e\",\n                  \"transform\": \"Identity\"\n                },\n                {\n                  \"key\": \"hash-010c3fe81b7b862e50c77ef9a958a05bfa98444f26f96f23d37a13c96244cfb7\",\n                  \"transform\": \"Identity\"\n                },\n                {\n                  \"key\": \"balance-11e6fc5354f61a004df98482376c45964b8b1557e8f2f13fb5f3adab5faa8be1\",\n                  \"transform\": \"Identity\"\n                },\n                {\n                  \"key\": \"balance-98d945f5324f865243b7c02c0417ab6eac361c5c56602fd42ced834a1ba201b6\",\n                  \"transform\": \"Identity\"\n                },\n                {\n                  \"key\": \"balance-11e6fc5354f61a004df98482376c45964b8b1557e8f2f13fb5f3adab5faa8be1\",\n                  \"transform\": {\n                    \"WriteCLValue\": {\n                      \"cl_type\": \"U512\",\n                      \"bytes\": \"06621c3e660301\",\n                      \"parsed\": \"1114111876194\"\n                    }\n                  }\n                },\n                {\n                  \"key\": \"balance-98d945f5324f865243b7c02c0417ab6eac361c5c56602fd42ced834a1ba201b6\",\n                  \"transform\": {\n                    \"AddUInt512\": \"100000000\"\n                  }\n                },\n                {\n                  \"key\": \"hash-8cf5e4acf51f54eb59291599187838dc3bc234089c46fc6ca8ad17e762ae4401\",\n                  \"transform\": \"Identity\"\n                },\n                {\n                  \"key\": \"account-hash-1ed5a1c39bea93c105f2d22c965a84b205b36734a377d05dbb103b6bfaa595a7\",\n                  \"transform\": \"Identity\"\n                },\n                {\n                  \"key\": \"account-hash-1ed5a1c39bea93c105f2d22c965a84b205b36734a377d05dbb103b6bfaa595a7\",\n                  \"transform\": \"Identity\"\n                },\n                {\n                  \"key\": \"hash-8cf5e4acf51f54eb59291599187838dc3bc234089c46fc6ca8ad17e762ae4401\",\n                  \"transform\": \"Identity\"\n                },\n                {\n                  \"key\": \"hash-8cf5e4acf51f54eb59291599187838dc3bc234089c46fc6ca8ad17e762ae4401\",\n                  \"transform\": \"Identity\"\n                },\n                {\n                  \"key\": \"hash-624dbe2395b9d9503fbee82162f1714ebff6b639f96d2084d26d944c354ec4c5\",\n                  \"transform\": \"Identity\"\n                },\n                {\n                  \"key\": \"hash-8cf5e4acf51f54eb59291599187838dc3bc234089c46fc6ca8ad17e762ae4401\",\n                  \"transform\": \"Identity\"\n                },\n                {\n                  \"key\": \"hash-010c3fe81b7b862e50c77ef9a958a05bfa98444f26f96f23d37a13c96244cfb7\",\n                  \"transform\": \"Identity\"\n                },\n                {\n                  \"key\": \"hash-010c3fe81b7b862e50c77ef9a958a05bfa98444f26f96f23d37a13c96244cfb7\",\n                  \"transform\": \"Identity\"\n                },\n                {\n                  \"key\": \"hash-9824d60dc3a5c44a20b9fd260a412437933835b52fc683d8ae36e4ec2114843e\",\n                  \"transform\": \"Identity\"\n                },\n                {\n                  \"key\": \"hash-010c3fe81b7b862e50c77ef9a958a05bfa98444f26f96f23d37a13c96244cfb7\",\n                  \"transform\": \"Identity\"\n                },\n                {\n                  \"key\": \"balance-11e6fc5354f61a004df98482376c45964b8b1557e8f2f13fb5f3adab5faa8be1\",\n                  \"transform\": \"Identity\"\n                },\n                {\n                  \"key\": \"balance-98d945f5324f865243b7c02c0417ab6eac361c5c56602fd42ced834a1ba201b6\",\n                  \"transform\": \"Identity\"\n                },\n                {\n                  \"key\": \"balance-11e6fc5354f61a004df98482376c45964b8b1557e8f2f13fb5f3adab5faa8be1\",\n                  \"transform\": {\n                    \"WriteCLValue\": {\n                      \"cl_type\": \"U512\",\n                      \"bytes\": \"06621c3e660301\",\n                      \"parsed\": \"1114111876194\"\n                    }\n                  }\n                },\n                {\n                  \"key\": \"balance-98d945f5324f865243b7c02c0417ab6eac361c5c56602fd42ced834a1ba201b6\",\n                  \"transform\": {\n                    \"AddUInt512\": \"100000000\"\n                  }\n                },\n                {\n                  \"key\": \"hash-010c3fe81b7b862e50c77ef9a958a05bfa98444f26f96f23d37a13c96244cfb7\",\n                  \"transform\": \"Identity\"\n                },\n                {\n                  \"key\": \"hash-010c3fe81b7b862e50c77ef9a958a05bfa98444f26f96f23d37a13c96244cfb7\",\n                  \"transform\": \"Identity\"\n                },\n                {\n                  \"key\": \"hash-9824d60dc3a5c44a20b9fd260a412437933835b52fc683d8ae36e4ec2114843e\",\n                  \"transform\": \"Identity\"\n                }\n```\n\n----------------------------------------\n\nTITLE: Maximum Transaction Size Configuration for Casper Network\nDESCRIPTION: Configuration example showing the maximum transaction size setting in bytes for Casper networks running node version 2.0.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/docs/developers/writing-onchain-code/best-practices.md#2025-04-22_snippet_1\n\nLANGUAGE: rust\nCODE:\n```\nmax_transaction_size = 1_048_576\n```\n\n----------------------------------------\n\nTITLE: JSON-RPC Dictionary Lookup via Address\nDESCRIPTION: Command line example for looking up dictionary items using dictionary address through the Casper client.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/versioned_docs/version-2.0.0/concepts/dictionaries.md#2025-04-22_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\ncasper-client get-dictionary-item \\\n    --node-address http://localhost:11101 \\\n    --state-root-hash 50c34ccbe1315d58ce22bf7518071164d16acd20a1becb0b423293418297416d \\\n    --dictionary-address dictionary-<string>\n```\n\n----------------------------------------\n\nTITLE: Query Balance Help Command\nDESCRIPTION: Command to display help information for the query-balance functionality.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/versioned_docs/version-1.5.X/developers/cli/transfers/verify-transfer.md#2025-04-22_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\ncasper-client query-balance --help\n```\n\n----------------------------------------\n\nTITLE: Cloning and Configuring the Casper Node Repository in Bash\nDESCRIPTION: Commands to clone the casper-node repository and checkout the release-2.0.0-rc3 branch. This provides the node software needed for the local network.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/condor/local-setup.md#2025-04-22_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\ngit clone https://github.com/casper-network/casper-node.git\ncd casper-node\ngit checkout release-2.0.0-rc3\n```\n\n----------------------------------------\n\nTITLE: Preparing the Development Environment\nDESCRIPTION: Command to prepare the development environment by running the make prepare script, which adds the WebAssembly compilation target.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/versioned_docs/version-1.5.X/resources/tokens/cep18/full-tutorial.md#2025-04-22_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nmake prepare\n```\n\n----------------------------------------\n\nTITLE: Sending Transaction with put-txn Command in Casper CLI\nDESCRIPTION: Command to send a transaction to the Casper network using the put-txn command. Includes parameters for node address, chain name, transaction path, entry point, category, gas price, pricing mode and authorization.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/docs/developers/cli/sending-transactions.md#2025-04-22_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ncasper-client put-txn session\\\n    --node-address <HOST:PORT> \\\n    --chain-name casper-net-1 \\\n    --transaction-path <transaction-PATH> \\\n    --session-entry-point <NAME> \\\n    --category <INSTALL-UPGRADE|LARGE|MEDIUM|SMALL> \\\n    --gas-price-tolerance <INTEGER> \\\n    --pricing-mode fixed \\\n    --secret-key <PATH> | --initiator-address <HEX STRING>\n```\n\n----------------------------------------\n\nTITLE: Configuring Refund Handling with Ratio in chainspec.toml (TOML)\nDESCRIPTION: This configuration within the `[core]` section of `chainspec.toml` defines how refunds are processed after deploy execution. Setting the `type` to `\"refund\"` enables refunds, and `refund_ratio` specifies the fraction of the remaining payment (after deducting gas fees) returned to the user. A ratio of `[1, 1]` means 100% of the remainder is refunded.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/docs/operators/setup-network/create-private.md#2025-04-22_snippet_3\n\nLANGUAGE: toml\nCODE:\n```\n[core]\nrefund_handling = { type = \"refund\", refund_ratio = [1, 1] }\n```\n\n----------------------------------------\n\nTITLE: Transferring a CEP-78 Token using JavaScript Client\nDESCRIPTION: Example of transferring a CEP-78 token between accounts using the JavaScript client. It demonstrates setting the token ID, source, and target for the transfer.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/versioned_docs/version-1.5.X/resources/tokens/cep78/js-tutorial.md#2025-04-22_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nconst transferDeploy = cc.transfer(\n  {\n    tokenId: \"0\",\n    source: FAUCET_KEYS.publicKey,\n    target: USER1_KEYS.publicKey,\n  },\n  { useSessionCode: true },\n  \"13000000000\",\n  FAUCET_KEYS.publicKey,\n  [FAUCET_KEYS]\n);\n\nconst transferDeployHash = await transferDeploy.send(\"http://localhost:11101/rpc\");\n```\n\n----------------------------------------\n\nTITLE: Defining BlockSynchronizerStatus Schema in OpenAPI\nDESCRIPTION: Defines the schema for block synchronizer status, containing information about both historical and forward block synchronization.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/condor/jsonrpc-comp/rpc-2.0/schema.json.md#2025-04-22_snippet_95\n\nLANGUAGE: json\nCODE:\n```\n\"BlockSynchronizerStatus\": {\n  \"description\": \"The status of the block synchronizer.\",\n  \"type\": \"object\",\n  \"properties\": {\n    \"historical\": {\n      \"description\": \"The status of syncing a historical block, if any.\",\n      \"anyOf\": [\n        {\n          \"$ref\": \"#/components/schemas/BlockSyncStatus\"\n        },\n        {\n          \"type\": \"null\"\n        }\n      ]\n    },\n    \"forward\": {\n      \"description\": \"The status of syncing a forward block, if any.\",\n      \"anyOf\": [\n        {\n          \"$ref\": \"#/components/schemas/BlockSyncStatus\"\n        },\n        {\n          \"type\": \"null\"\n        }\n      ]\n    }\n  },\n  \"additionalProperties\": false\n}\n```\n\n----------------------------------------\n\nTITLE: Retrieving Account Info with Casper CLI (Bash)\nDESCRIPTION: This command uses the `casper-client` tool's `get-account-info` subcommand to fetch details about a Casper account. It requires the `--node-address` (IP:Port, default port 7777) of a network peer and the account's `--public-key`, provided either as a formatted string or a path to a key file (`public_key_hex` or `public_key.pem` generated by `keygen`).\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/versioned_docs/version-2.0.0/concepts/accounts-and-keys.md#2025-04-22_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\ncasper-client get-account-info \\\n--node-address <HOST:PORT>  \\\n--public-key <FORMATTED STRING or PATH>\n```\n\n----------------------------------------\n\nTITLE: Enabling a Contract using Casper Client (Shell)\nDESCRIPTION: This command enables a contract using its hash. It requires the contract package hash and contract hash as arguments.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/versioned_docs/version-1.5.X/operators/setup-network/create-private.md#2025-04-22_snippet_20\n\nLANGUAGE: sh\nCODE:\n```\ncasper-client \\\n  put-deploy \\\n  -n $NODE_ADDR \\\n  --chain-name $CHAIN_NAME \\\n  --secret-key admin/secret_key.pem \\\n  --session-account=$(<alice/public_key_hex) \\\n  --session-path enable_contract.wasm \\\n  --payment-amount 3000000000 \\\n  --session-arg \"contract_package_hash:account_hash='account-hash-$CONTRACT_PACKAGE_HASH'\" \\\n  --session-arg \"contract_hash:account_hash='account-hash-$CONTRACT_HASH'\"\n```\n\n----------------------------------------\n\nTITLE: Casper Account State Structure After Key Addition - JSON\nDESCRIPTION: Describes the JSON structure for an account after adding an associated key with the `add_account.wasm`. Displays account hash, action thresholds, a list of associated keys with their weights, and purse and named keys. Used to verify effect of deploys and validate correct key state.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/versioned_docs/version-1.5.X/resources/advanced/multi-sig/multi-sig-workflow.md#2025-04-22_snippet_21\n\nLANGUAGE: json\nCODE:\n```\n\"Account\": {\n  \"account_hash\": \"account-hash-1ed5a1c39bea93c105f2d22c965a84b205b36734a377d05dbb103b6bfaa595a7\",\n  \"action_thresholds\": {\n    \"deployment\": 2,\n    \"key_management\": 3\n  },\n  \"associated_keys\": [\n    {\n      \"account_hash\": \"account-hash-04a9691a9f8f05a0f08bd686f188b27c7dbcd644b415759fd3ca043d916ea02f\",\n      \"weight\": 1\n    },\n    {\n      \"account_hash\": \"account-hash-1fed34baa6807a7868bb18f91b161d99ebf21763810fe4c92e39775d10bbf1f8\",\n      \"weight\": 1\n    },\n    {\n      \"account_hash\": \"account-hash-1ed5a1c39bea93c105f2d22c965a84b205b36734a377d05dbb103b6bfaa595a7\",\n      \"weight\": 3\n    },\n    {\n      \"account_hash\": \"account-hash-e2d00525cac31ae2756fb155f289d276c6945b6914923fe275de0cb127bffee7\",\n      \"weight\": 1\n    }\n  ],\n  \"main_purse\": \"uref-8294864177c2c1ec887a11dae095e487b5256ce6bd2a1f2740d0e4f28bd3251c-007\",\n  \"named_keys\": []\n}\n```\n\n----------------------------------------\n\nTITLE: Querying Post-Threshold-Update Account Details using Casper CLI\nDESCRIPTION: Uses `casper-client query-global-state` to inspect the account's details on the Casper Testnet after updating the `deployment` and `key_management` thresholds. Requires the node address, the latest state root hash (`<STATE_ROOT_HASH>`), and the account hash (`<PRIMARY_ACCOUNT_HASH>`).\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/docs/resources/advanced/multi-sig/multi-sig-workflow.md#2025-04-22_snippet_11\n\nLANGUAGE: bash\nCODE:\n```\ncasper-client query-global-state \\\n--node-address https://node.testnet.casper.network \\\n--state-root-hash <STATE_ROOT_HASH> \\\n--key account-hash-<PRIMARY_ACCOUNT_HASH>\n```\n\n----------------------------------------\n\nTITLE: Example Wasm Bonding Command for Testnet\nDESCRIPTION: Example command for bidding 10,000 CSPR on the Casper Testnet using compiled add_bid.wasm\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/versioned_docs/version-2.0.0/operators/becoming-a-validator/bonding.md#2025-04-22_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\nsudo -u casper casper-client put-deploy \\\n--node-address http://65.21.235.219:7777 \\\n--secret-key /etc/casper/validator_keys/secret_key.pem \\\n--chain-name casper-test \\\n--payment-amount 3000000000 \\\n--session-path ~/casper-node/target/wasm32-unknown-unknown/release/add_bid.wasm \\\n--session-arg \"public_key:public_key='01c297d2931fec7e22b2fb1ae3ca5afdfacc2c82ba501e8ed158eecef82b4dcdee'\" \\\n--session-arg \"amount:U512='$[10000 * 1000000000]'\" \\\n--session-arg \"delegation_rate:u8='10'\"\n```\n\n----------------------------------------\n\nTITLE: Verifying Contract Deployment\nDESCRIPTION: Command to verify the deployment status using the deploy hash obtained from the previous step.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/versioned_docs/version-1.5.X/resources/advanced/cross-contract.md#2025-04-22_snippet_13\n\nLANGUAGE: bash\nCODE:\n```\ncasper-client get-deploy \\\n    --node-address http://136.243.187.84:7777 af42bc6dbc58f677d138eb968d897f965f1ed118a40980bc16efbcc2a0c71832\n```\n\n----------------------------------------\n\nTITLE: Creating a Deploy Parameters Object in JavaScript SDK\nDESCRIPTION: Creates the initial deploy parameters object using the delegator's public key and network name for staking operations on the Casper network.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/versioned_docs/version-1.5.X/resources/advanced/list-cspr.md#2025-04-22_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nimport { DeployUtil, CLPublicKey } from 'casper-js-sdk';\n\nconst deployParams = new DeployUtil.DeployParams(\n  CLPublicKey.fromHex(publicKeyHex),\n  network_name // 'testnet' | 'mainnet'\n);\n```\n\n----------------------------------------\n\nTITLE: Creating a Casper Project with Reproducible Binary Builds using Cargo Casper --wrapper - Bash\nDESCRIPTION: This command line snippet shows how to utilize cargo-casper's '--wrapper' option to enable reproducible builds for contract binaries, working around known unreproducibility in Rust's default cargo behavior. It invokes a special 'rustc' wrapper that ensures binary outputs are deterministic, which is critical for validating blockchain contract sources. Requires the 'cargo-casper' crate and its reproducibility feature. The argument after '--wrapper' is the project name.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/docs/developers/writing-onchain-code/getting-started.md#2025-04-22_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ncargo casper my_project --wrapper\n```\n\n----------------------------------------\n\nTITLE: Configuring Administrator Accounts in chainspec.toml (TOML)\nDESCRIPTION: This configuration snippet within the `[core]` section of `chainspec.toml` defines the administrator accounts for a private Casper network. The `administrators` key takes a list of public keys. At least one administrator is mandatory for a private network setup, granting special privileges like unrestricted transfers and validator set management.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/docs/operators/setup-network/create-private.md#2025-04-22_snippet_7\n\nLANGUAGE: toml\nCODE:\n```\n[core]\nadministrators = [\"NEW_ACCOUNT_PUBLIC_KEY\"]\n```\n\n----------------------------------------\n\nTITLE: Executing NFT Contract Example with NPM\nDESCRIPTION: Command to run the NFT contract usage example that demonstrates minting, transferring, and burning operations. The example acquires contract hashes and sends three separate deploys to test core NFT functions.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/versioned_docs/version-1.5.X/resources/tokens/cep78/js-tutorial.md#2025-04-22_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\nnpm run example:usage\n```\n\n----------------------------------------\n\nTITLE: Querying Node for State Root Hash using Casper Client (Bash)\nDESCRIPTION: Uses the `casper-client` to query a specific Casper network node (identified by its address) for the latest state root hash. This verifies client installation and network connectivity.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/docs/resources/quick-start.md#2025-04-22_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\ncasper-client get-state-root-hash --node-address http://65.21.235.219:7777\n```\n\n----------------------------------------\n\nTITLE: Querying Casper Network Global State\nDESCRIPTION: Query the global state of the Casper network using the account hash and state root hash.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/versioned_docs/version-1.5.X/resources/beginner/counter-testnet/walkthrough.md#2025-04-22_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\ncasper-client query-global-state \\\n    --node-address http://[NODE_IP]:7777 \\\n    --state-root-hash [STATE_ROOT_HASH] \\\n    --key [ACCOUNT_HASH]\n```\n\n----------------------------------------\n\nTITLE: Configuring Dynamic Gas Pricing with TOML in Casper Network\nDESCRIPTION: This snippet shows the TOML configuration for Casper Network's dynamic gas pricing (block vacancy) settings. It defines upper and lower thresholds for utilization, along with minimum and maximum gas price limits that control how the gas price multiplier adjusts based on network usage.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/docs/concepts/economics/dynamic-gas-pricing.md#2025-04-22_snippet_0\n\nLANGUAGE: toml\nCODE:\n```\n[vacancy]\n# The cost of a transaction is based on a multiplier. This allows for economic disincentives for misuse of the network.\n#\n# The network starts with a current_gas_price of min_gas_price.\n#\n# Each block has multiple limits (bytes, transactions, transfers, gas, etc.)\n# The utilization for a block is determined by the highest percentage utilization of each these limits.\n#\n# Ex: transfers limit is 650 and transactions limit is 20 (assume other limits are not a factor here)\n#     19 transactons -> 19/20 or 95%\n#     600 transfers -> 600/650 or 92.3%\n#     resulting block utilization is 95\n#\n# The utilization for an era is the average of all block utilizations. At the switch block, the dynamic gas_price is\n# adjusted with the following:\n#\n# If utilization was below the lower_threshold, current_gas_price is decremented by one if higher than min_gas_price.\n# If utilization falls between the thresholds, current_gas_price is not changed.\n# If utilization was above the upper_threshold, current_gas_price is incremented by one if lower than max_gas_price.\n#\n# The cost charged for the transaction is simply the gas_used * current_gas_price.\nupper_threshold = 90\nlower_threshold = 50\nmax_gas_price = 3\nmin_gas_price = 1\n```\n\n----------------------------------------\n\nTITLE: Memory Allocation with Error Handling in WebAssembly\nDESCRIPTION: Implements a memory allocation function with error handling in WebAssembly. Manages system state and allocates memory blocks with appropriate alignment and size calculations.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/versioned_docs/version-2.0.0/developers/json-rpc/json-rpc-transactional.md#2025-04-22_snippet_9\n\nLANGUAGE: webassembly\nCODE:\n```\n1b0041d82210082000411874411875410274418c82c0006a2802000bed0401037f4184fa0a1008230041106b22022400200241c48ac000360204200241002802e482403602080240024041094101200241086a200241046a419481c0002301410b6a2401230141f4034b0440000b10122301410b6b24012203450d0041cccd021008410020022802083602e482400c010b41f49107100820022002280204220428020036020c02400240024041801041042002410c6a419481c00041ac81c0002301410b6a2401230141f4034b0440000b10122301410b6b24012203450d0041e4cf0210082004200228020c3602000c010b4184f2101008024002404101230141036a2401230141f4034b0440000b1024230141036b24012203417f470d0041e4cf0210082004200228020c3602000c010b41bab70810082003411074220341003602042003200228020c36020820032003418280046a3602002002200336020c41801041042002410c6a419481c00041ac81c0002301410b6a2401230141f4034b0440000b10122301410b6b240121032004200228020c36020020030d010b41cccd021008410020022802083602e482400c010b41f4b60810082003410036020420032002280208360208200320034180c0006a4102723602002002200336020841094101200241086a200241046a419481c0002301410b6a2401230141f4034b0440000b10122301410b6b24012103410020022802083602e4824020030d010b419c04100800000b20004121360208200020033602042000412136020020032001290000370000200320012d00203a0020200341186a200141186a290000370000200341106a200141106a290000370000200341086a200141086a290000370000200241106a24000b\n```\n\n----------------------------------------\n\nTITLE: Querying Casper Network State (Rust)\nDESCRIPTION: This command allows querying the state of a Casper network at a specific moment, identified by the state root hash. It requires the node address, state root hash, and a key identifier. An optional query path can be specified to drill into specific details.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/versioned_docs/version-1.5.X/resources/beginner/counter-testnet/commands.md#2025-04-22_snippet_1\n\nLANGUAGE: rust\nCODE:\n```\ncasper-client query-global-state \\\n    --node-address [NODE_SERVER_ADDRESS] \\\n    --state-root-hash [STATE_ROOT_HASH] \\\n    --key [ACCOUNT_HASH] \\\n    -q \"[SESSION_NAME]/[SESSION_NAMED_KEY]\" (OPTIONAL)\n```\n\n----------------------------------------\n\nTITLE: Implementation of Error Handling for WebAssembly Memory Operations\nDESCRIPTION: Implements error handling for memory operations in WebAssembly. Manages errors during memory allocation and provides fallback mechanisms.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/versioned_docs/version-2.0.0/developers/json-rpc/json-rpc-transactional.md#2025-04-22_snippet_12\n\nLANGUAGE: webassembly\nCODE:\n```\n0900419c04100800000b9d0301047f41d698081008230041106b2204240020042001280200220528020036020c024002400240200241026a220120016c220141801020014180104b1b220241042004410c6a419481c00041ac81c0002301410b6a2401230141f4034b0440000b10122301410b6b24012201450d00418ad90210082005200428020c360200200241027421060c010b41b08d111008024002402002410274220641a08001200641a080014b1b418780046a2207411076230141036a2401230141f4034b0440000b1024230141036b24012201417f470d0041e4cf0210082005200428020c3602000c010b419ec20810082001411074220141003602042001200428020c3602082001200120074180807c716a4102723602002004200136020c200241042004410c6a419481c00041ac81c0002301410b6a2401230141f4034b0440000b10122301410b6b240121012005200428020c36020020010d010b41a09902100841012102410021010c010b419edf001008200142003702042001200120066a410272360200410021020b2000200136020420002002360200200441106a24000b\n```\n\n----------------------------------------\n\nTITLE: Querying State and Asserting in Counter Contract Test (Rust)\nDESCRIPTION: Illustrates the verification step from the counter example test. It queries the contract's state (`count_key`) using the test builder, parses the returned `CLValue` into an `i32`, and asserts that the incremented count equals 1.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/versioned_docs/version-1.5.X/developers/writing-onchain-code/testing-session-code.md#2025-04-22_snippet_14\n\nLANGUAGE: rust\nCODE:\n```\n\n    let incremented_count = builder\n        .query(None, count_key, &[])\n        .expect(\"should be stored value.\")\n        .as_cl_value()\n        .expect(\"should be cl value.\")\n        .clone()\n        .into_t::<i32>()\n        .expect(\"should be i32.\");\n\n    assert_eq!(incremented_count, 1);\n```\n\n----------------------------------------\n\nTITLE: Viewing Faucet Account Details\nDESCRIPTION: Command to view the NCTL faucet account information\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/docs/developers/dapps/nctl-test.md#2025-04-22_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\nnctl-view-faucet-account\n```\n\n----------------------------------------\n\nTITLE: Viewing Faucet Account Information with NCTL\nDESCRIPTION: This command displays details about the faucet account, which is the default account created on the network. It provides the account's secret key location and account hash, which are used for signing deploys and querying network state.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/versioned_docs/version-1.5.X/resources/beginner/counter/commands.md#2025-04-22_snippet_0\n\nLANGUAGE: rust\nCODE:\n```\nnctl-view-faucet-account\n```\n\n----------------------------------------\n\nTITLE: Response Format for info_get_peers in Casper Network\nDESCRIPTION: The response includes the API version and an array of connected peers with their node IDs and network addresses. This example shows a single peer connected to the node.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/docs/developers/json-rpc/json-rpc-informational.md#2025-04-22_snippet_29\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"id\": 1,\n  \"jsonrpc\": \"2.0\",\n  \"result\": {\n    \"name\": \"info_get_peers_result\",\n    \"value\": {\n      \"api_version\": \"2.0.0\",\n      \"peers\": [\n        {\n          \"node_id\": \"tls:0101..0101\",\n          \"address\": \"127.0.0.1:54321\"\n        }\n      ]\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Querying Metrics for trie_or_chunk Fetch Progress - Bash\nDESCRIPTION: This command queries the metrics endpoint exposed by the running node (default port 8888) and filters for trie_or_chunk-related statistics. Useful for monitoring block sync progress and node health during catch-up or fast sync. Requires curl and grep.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/docs/operators/setup/install-node.md#2025-04-22_snippet_16\n\nLANGUAGE: bash\nCODE:\n```\ncurl -s 127.0.0.1:8888/metrics | grep trie_or_chunk\n```\n\n----------------------------------------\n\nTITLE: Writing Balance Changes with WriteCLValue in Casper Network\nDESCRIPTION: This JSON shows a WriteCLValue transformation that updates an account balance. The transformation writes a new U512 value to a balance key, providing both the raw bytes representation and the parsed value (1109111876194).\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/versioned_docs/version-2.0.0/developers/cli/transfers/direct-token-transfer.md#2025-04-22_snippet_9\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"key\": \"balance-11e6fc5354f61a004df98482376c45964b8b1557e8f2f13fb5f3adab5faa8be1\",\n  \"transform\": {\n    \"WriteCLValue\": {\n      \"cl_type\": \"U512\",\n      \"bytes\": \"06622a383c0201\",\n      \"parsed\": \"1109111876194\"\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: React App Component Implementation\nDESCRIPTION: Main React component implementation with wallet connection state management\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/versioned_docs/version-1.5.X/developers/dapps/template-frontend.md#2025-04-22_snippet_4\n\nLANGUAGE: jsx\nCODE:\n```\nimport React from \"react\";\nimport Connect from \"./Connect\";\nimport './App.css'\n\nfunction App() {\n    const [publicKey, setPublicKey] = React.useState(null);\n    return (\n        <>\n            <Connect setPublicKey={ setPublicKey } />\n            <div>\n                {publicKey !== null && (<>\n                    Wallet connected: {publicKey}<br/>\n                </>)}\n            </div>\n        </>\n    );\n}\n\nexport default App;\n```\n\n----------------------------------------\n\nTITLE: Authorization Error Response in JSON\nDESCRIPTION: This JSON output represents an error object indicating a deployment failure due to invalid account authorization related to a prestate hash. It typically requires configuring the source account for multi-signature deploys.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/docs/developers/cli/transfers/multisig-deploy-transfer.md#2025-04-22_snippet_6\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"code\": -32008,\n  \"message\": \"deploy parameter failure: account authorization invalid at prestate_hash: 5f0392de8ac3512a48a110acfc5bc10d4a6a07109b350ae14cbec0428656c8ac\"\n}\n```\n\n----------------------------------------\n\nTITLE: Defining JSON Array Schema for Validator Weights\nDESCRIPTION: This JSON schema defines an array structure where each item refers to a pre-defined schema named 'ValidatorWeight'. It's used for validating collections of validator weight data, which is crucial for maintaining the integrity of data related to validators in the Casper Network. The schema ensures that every element in the array adheres to the 'ValidatorWeight' format.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/condor/jsonrpc-comp/rpc-2.0/schema/Array_of_ValidatorWeight.json.md#2025-04-22_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"type\": \"array\",\n    \"items\": {\n        \"$ref\": \"#/components/schemas/ValidatorWeight\"\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Querying Global State by Public Key using Casper Client (Bash)\nDESCRIPTION: Queries the blockchain's global state at a specific state root hash for information associated with a given account, identified by the path to its public key file (`--key`). Requires a node address and the state root hash.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/docs/resources/quick-start.md#2025-04-22_snippet_14\n\nLANGUAGE: bash\nCODE:\n```\ncasper-client query-global-state \\\n--node-address [NODE_ADDRESS] \\\n--state-root-hash [STATE_ROOT_HASH] \\\n--key [PATH_TO_PUBLIC_KEY]\n```\n\n----------------------------------------\n\nTITLE: Upgrading pip in Virtual Environment\nDESCRIPTION: Command to upgrade pip to the latest version within the activated Python virtual environment.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/versioned_docs/version-2.0.0/developers/dapps/setup-nctl.md#2025-04-22_snippet_9\n\nLANGUAGE: bash\nCODE:\n```\n(env) $ pip install --upgrade pip\n```\n\n----------------------------------------\n\nTITLE: Creating Casper Wallet Helper File\nDESCRIPTION: Command to create a new JavaScript file that will contain helper functions for interacting with the Casper Wallet.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/versioned_docs/version-2.0.0/developers/dapps/template-frontend.md#2025-04-22_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\ntouch src/casper-wallet.js\n```\n\n----------------------------------------\n\nTITLE: Querying Global State in Casper Network API\nDESCRIPTION: Example JSON request for the query_global_state method showing how to retrieve a value stored under a specific key using a Block hash as the state identifier.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/versioned_docs/version-2.0.0/developers/json-rpc/json-rpc-informational.md#2025-04-22_snippet_18\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"id\": 1,\n  \"jsonrpc\": \"2.0\",\n  \"method\": \"query_global_state\",\n  \"params\": [\n    {\n      \"name\": \"state_identifier\",\n      \"value\": {\n        \"BlockHash\": \"0744fcb72af43c5cc372039bc5a8bfee48808a9ce414acc0d6338a628c20eb42\"\n      }\n    },\n    {\n      \"name\": \"key\",\n      \"value\": \"deploy-af684263911154d26fa05be9963171802801a0b6aff8f199b7391eacb8edc9e1\"\n    },\n    {\n      \"name\": \"path\",\n      \"value\": []\n    }\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Hex-Encoded Hash Digest in JSON\nDESCRIPTION: This JSON snippet defines a property for a hex-encoded hash digest. The type is specified as a string, indicating that the hash digest will be represented in string format. This is useful for conveying cryptographic hash values in a consistent and readable manner. Dependencies include a JSON parser to interpret the structure.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/condor/jsonrpc-comp/rpc-1.5/schema/Digest.json.md#2025-04-22_snippet_0\n\nLANGUAGE: JSON\nCODE:\n```\n{\n    \"description\": \"Hex-encoded hash digest.\",\n    \"type\": \"string\"\n}\n```\n\n----------------------------------------\n\nTITLE: Parsing WebAssembly Binary Module Header and Instructions\nDESCRIPTION: WebAssembly binary module data containing the module header (0x0061736d), version (0x01000000), and subsequent sections including type definitions, imports, and function bodies.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/versioned_docs/version-2.0.0/developers/json-rpc/json-rpc-transactional.md#2025-04-22_snippet_19\n\nLANGUAGE: hex\nCODE:\n```\n0061736d0100000001540c60027f7f017f60017f0060037f7f7f017f60047f7f7f7f017f60077f7f7f7f7f7f7f017f60087f7f7f7f7f7f7f7f017f60037f7f7f0060047f7f7f7f0060017f017f60000060057f7f7f7f7f017f60027f7f000289020a03656e760d6361737065725f726576657274000103656e76196361737065725f6765745f6e616d65645f6172675f73697a65000203656e76146361737065725f6765745f6e616d65645f617267000303656e76156361737065725f6765745f6d61696e5f7075727365000103656e761a6361737065725f6765745f73797374656d5f636f6e7472616374000203656e76146361737065725f63616c6c5f636f6e7472616374000403656e76176361737065725f726561645f686f73745f627566666572000203656e76236361737065725f7472616e736665725f66726f6d5f70757273655f746f5f7075727365000503656e76066d656d6f72790201114003656e760367617300010324230108080809080006060a080b07090b090701070008000802020202080907070008000804050170010808060e027f01418080c0000b7f0141000b\n```\n\n----------------------------------------\n\nTITLE: EntityKind Serialization Format\nDESCRIPTION: Defines the serialization format for different types of packages in the Casper network, including System (0), Account (1), and SmartContract (2) variants.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/versioned_docs/version-2.0.0/concepts/serialization/types.md#2025-04-22_snippet_21\n\nLANGUAGE: Rust\nCODE:\n```\nenum EntityKind {\n    System(SystemEntityType),     // u8(0) + SystemEntityType\n    Account(AccountHash),        // u8(1) + AccountHash\n    SmartContract(RuntimeEnv),  // u8(2) + TransactionRuntime\n}\n```\n\n----------------------------------------\n\nTITLE: Verifying Messages from Casper SSE TransactionProcessed Events - JSON\nDESCRIPTION: This snippet demonstrates the structure of a typical 'messages' array embedded in a TransactionProcessed event received from the Casper node SSE endpoint. The sample shows each message's producer, payload, emission topic, hashed topic name, and topic index. No external dependencies are required. The key parameters include 'entity_addr' (the entity's identifier), 'message' (the payload), 'topic_name' (the human-readable topic), 'topic_name_hash' (hash of the topic), and 'index' (message order). The array is intended as part of the event JSON stream, and can be parsed or inspected using standard JSON tools.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/versioned_docs/version-2.0.0/developers/writing-onchain-code/emitting-contract-events.md#2025-04-22_snippet_9\n\nLANGUAGE: json\nCODE:\n```\n\"messages\": [\n    {\n        \"entity_addr\": \"addressable-entity-b51b0f9d94e5744af4dce6b4a9990c5f3e652c1a0a946e680e83f97d8846eff5\",\n        \"message\": {\n            \"String\": \"{\\\"Mint\\\":{\\\"recipient\\\":\\\"account-hash-212ffdd040b65495419f4057c8392930e410f7bf24baeec8de59a6117b63e45c\\\",\\\"token_id\\\":{\\\"Index\\\":0}}}\"\n        },\n        \"topic_name\": \"events\",\n        \"topic_name_hash\": \"topic-name-5721a6d9d7a9afe5dfdb35276fb823bed0f825350e4d865a5ec0110c380de4e1\",\n        \"index\": 0\n    }\n]\n```\n\n----------------------------------------\n\nTITLE: Source Account Query JSON-RPC Request\nDESCRIPTION: Example JSON-RPC request structure for querying a source account's state using the account hash, which is needed to verify the transfer source.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/versioned_docs/version-2.0.0/developers/cli/transfers/verify-transfer.md#2025-04-22_snippet_10\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"jsonrpc\": \"2.0\",\n  \"method\": \"query_global_state\",\n  \"params\": {\n    \"state_identifier\": {\n      \"StateRootHash\": \"fdb1474d441ec0fcbf2e088f1630dbf98d3bcf7f7a7fe298303797f35b8cb4e1\"\n    },\n    \"key\": \"account-hash-e70dbca48c2d31bc2d754e51860ceaa8a1a49dc627b20320b0ecee1b6d9ce655\",\n    \"path\": []\n  },\n  \"id\": 4\n}\n```\n\n----------------------------------------\n\nTITLE: Setting JSON-RPC Server Address in config.toml - TOML/Markdown\nDESCRIPTION: Configures the HTTP listener address for the node's JSON-RPC API, located in the rpc_server section of config.toml. DApps, validators, and command-line users use this port to interact with the network. The address should match the desired network interface/port accessibility.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/docs/operators/setup/node-endpoints.md#2025-04-22_snippet_1\n\nLANGUAGE: md\nCODE:\n```\naddress = '0.0.0.0:7777'\n```\n\n----------------------------------------\n\nTITLE: JSON Structure of Account's Associated Keys\nDESCRIPTION: This snippet shows the JSON format for representing an account's associated keys in the Casper Network. Associated keys are linked to accounts and have specific weights, signifying their roles or permissions. The snippet demonstrates how keys are structured with an account hash and a weight.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/versioned_docs/version-2.0.0/concepts/list-auth-keys.md#2025-04-22_snippet_0\n\nLANGUAGE: JSON\nCODE:\n```\n\"associated_keys\": [\\n{\\n    \\\"account_hash\\\": \\\"account-hash-1ab\\u202611\\\",\\n    \\\"weight\\\": 1\\n},\\n{\\n    \\\"account_hash\\\": \\\"account-hash-2cd\\u202622\\\",\\n    \\\"weight\\\": 1\\n},\\n{\\n    \\\"account_hash\\\": \\\"account-hash-3de\\u202633\\\",\\n    \\\"weight\\\": 1\\n   },\\n{\\n    \\\"account_hash\\\": \\\"account-hash-4fg\\u202644\\\",\\n      \\\"weight\\\": 1\\n}\\n ], ...\n```\n\n----------------------------------------\n\nTITLE: Init Function Entry Point for Casper Token Contract\nDESCRIPTION: Entry point definition for initializing the token contract. Takes no parameters and requires caller payment, typically called only once during contract deployment.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/docs/developers/cli/sending-transactions.md#2025-04-22_snippet_13\n\nLANGUAGE: JSON\nCODE:\n```\n{\n  \"key\": \"entry-point-v1-entity-contract-363996106630892a964565574fcdfd2435f21a17a3ad1ed2054146e7d8461640-4ca60287ae6129662475a8ce0d41c450d072b2430a8759f6178adeeff38523da\",\n  \"kind\": {\n    \"Write\": {\n      \"EntryPoint\": {\n        \"V1CasperVm\": {\n          \"name\": \"init\",\n          \"args\": [],\n          \"ret\": \"Unit\",\n          \"access\": \"Public\",\n          \"entry_point_type\": \"Called\",\n          \"entry_point_payment\": \"Caller\"\n        }\n      }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Packaging Binary Files into bin.tar.gz (Bash)\nDESCRIPTION: Shell commands for creating the `bin.tar.gz` archive required for staging a protocol version. This involves making a directory (`bin`), copying the essential Casper node binary executable (`casper-node`) into it, and using `tar` to create a compressed gzip archive (`bin.tar.gz`) containing the binary. Using `.` ensures paths are relative within the archive.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/docs/operators/setup-network/staging-files-for-new-network.md#2025-04-22_snippet_8\n\nLANGUAGE: bash\nCODE:\n```\nmkdir bin\ncd bin\ncp [source of casper-node] ./casper-node\ntar -czvf ../bin.tar.gz .\n```\n\n----------------------------------------\n\nTITLE: Getting Account Hash\nDESCRIPTION: Retrieves the account hash from a public key.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/versioned_docs/version-1.5.X/resources/tokens/cep18/full-tutorial.md#2025-04-22_snippet_10\n\nLANGUAGE: bash\nCODE:\n```\ncasper-client account-address --public-key \"[PATH_TO_YOUR_KEY]/public_key_hex\"\n```\n\n----------------------------------------\n\nTITLE: Building Release WASM for Casper Contracts - Bash\nDESCRIPTION: This code snippet provides the detailed build steps used within the compilation process. It switches into the contract directory, builds the contract for the wasm32-unknown-unknown target in release mode with Cargo, then strips the resulting WASM binary. Dependencies include Cargo with wasm32 target installed, and the wasm-strip tool from Binaryen. The resulting contract.wasm is optimized for deployment to Casper nodes.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/versioned_docs/version-2.0.0/resources/advanced/cross-contract.md#2025-04-22_snippet_9\n\nLANGUAGE: bash\nCODE:\n```\ncd contract && cargo build --release --target wasm32-unknown-unknown\\n    Finished release [optimized] target(s) in 0.13s\\nwasm-strip contract/target/wasm32-unknown-unknown/release/contract.wasm 2>/dev/null | true\\n\n```\n\n----------------------------------------\n\nTITLE: Simplified Allowance Query Command\nDESCRIPTION: A simplified version of the global state query command for allowances without comments, showing the essential syntax for retrieving token allowance results from global state.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/versioned_docs/version-1.5.X/resources/tokens/cep18/transfer.md#2025-04-22_snippet_12\n\nLANGUAGE: bash\nCODE:\n```\ncasper-client query-global-state -n http://<node IP>:<PORT> \\\n--key uref-a46ad389b53715d9991a513c8ca48e1502facc4c563c0700a31e830c4cb8a7d4-007 \\\n--state-root-hash e64f877f65df26db74300bb175c244d589bd88a23b91abf9ceb73ac5e65e90f1\n```\n\n----------------------------------------\n\nTITLE: Example Outcome of Running Contract Tests\nDESCRIPTION: The sample output indicates two successful tests, ensuring that the functionality needed by the contract is working as expected. This helps in confirming the correctness of contract business logic before deployment onto the Casper network.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/versioned_docs/version-1.5.X/resources/advanced/cross-contract.md#2025-04-22_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\nrunning 2 tests\ntest tests::should_error_on_missing_runtime_arg ... ok\ntest tests::should_store_hello_world ... ok\n\ntest result: ok. 2 passed; 0 failed; 0 ignored; 0 measured; 0 filtered out; finished in 0.09s\n```\n\n----------------------------------------\n\nTITLE: Burning a CEP-78 NFT Token\nDESCRIPTION: Code demonstrating how to burn (permanently destroy) an NFT token. The operation requires the tokenId of the NFT to be burned and can only be performed by an account with proper access rights.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/versioned_docs/version-2.0.0/resources/tokens/cep78/js-tutorial.md#2025-04-22_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nconst burnDeploy = await contractClient.burn(\n    { tokenId: \"0\" },\n    \"13000000000\",\n    USER1_KEYS.publicKey,\n    [USER1_KEYS]\n  );\n\n  const burnDeployHash = await burnDeploy.send(\"http://localhost:11101/rpc\");\n```\n\n----------------------------------------\n\nTITLE: Defining EntryPointPayment Schema in JSON\nDESCRIPTION: Specifies the schema for EntryPointPayment, which determines who pays for the invocation and execution of an entry point. It includes three possible options: Caller, SelfOnly, and SelfOnward.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/condor/jsonrpc-comp/rpc-2.0/schema.json.md#2025-04-22_snippet_71\n\nLANGUAGE: json\nCODE:\n```\n\"EntryPointPayment\": {\n  \"description\": \"An enum specifying who pays for the invocation and execution of the entrypoint.\",\n  \"oneOf\": [\n    {\n      \"description\": \"The caller must cover cost\",\n      \"type\": \"string\",\n      \"enum\": [\n        \"Caller\"\n      ]\n    },\n    {\n      \"description\": \"Will cover cost to execute self but not cost of any subsequent invoked contracts\",\n      \"type\": \"string\",\n      \"enum\": [\n        \"SelfOnly\"\n      ]\n    },\n    {\n      \"description\": \"will cover cost to execute self and the cost of any subsequent invoked contracts\",\n      \"type\": \"string\",\n      \"enum\": [\n        \"SelfOnward\"\n      ]\n    }\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Verifying Era Info - Casper Network CLI\nDESCRIPTION: Command to retrieve era information for verifying validator stakes and rewards.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/docs/operators/setup-network/create-private.md#2025-04-22_snippet_24\n\nLANGUAGE: sh\nCODE:\n```\ncasper-client get-era-info -n $NODE_ADDR -b 153\n```\n\n----------------------------------------\n\nTITLE: Obtaining the Account Hash from a Public Key\nDESCRIPTION: This command generates the account hash from a given public key file in hexadecimal format.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/versioned_docs/version-2.0.0/resources/tokens/cep18/full-tutorial.md#2025-04-22_snippet_9\n\nLANGUAGE: bash\nCODE:\n```\ncasper-client account-address --public-key \"[PATH_TO_YOUR_KEY]/public_key_hex\"\n```\n\n----------------------------------------\n\nTITLE: Generating Secp256k1 Keys with Casper Client\nDESCRIPTION: Commands to create Secp256k1 keys using the Casper command-line client with the -a flag to specify the algorithm. This creates ECDSA keys compatible with the P-256 curve.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/docs/concepts/accounts-and-keys.md#2025-04-22_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nmkdir secp256k1-keys\ncasper-client keygen -a secp256k1 secp256k1-keys/\ntree secp256k1-keys/\n```\n\n----------------------------------------\n\nTITLE: Defining the ExecutionResultItem JSON Schema\nDESCRIPTION: This JSON schema defines the structure for an `ExecutionResultItem`. It mandates the presence of `block_hash` (referencing the `BlockHash` schema) and `result` (referencing the `ExecutionResult` schema). The `additionalProperties: false` constraint ensures no unspecified fields are allowed in objects conforming to this schema. This schema is likely used for validating API responses or data related to deploy execution results on the Casper Network.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/condor/jsonrpc-comp/rpc-1.5/schema/JsonExecutionResult.json.md#2025-04-22_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"description\": \"The execution result of a single deploy.\",\n    \"type\": \"object\",\n    \"required\": [\n        \"block_hash\",\n        \"result\"\n    ],\n    \"properties\": {\n        \"block_hash\": {\n            \"description\": \"The block hash.\",\n            \"allOf\": [\n                {\n                    \"$ref\": \"#/components/schemas/BlockHash\"\n                }\n            ]\n        },\n        \"result\": {\n            \"description\": \"Execution result.\",\n            \"allOf\": [\n                {\n                    \"$ref\": \"#/components/schemas/ExecutionResult\"\n                }\n            ]\n        }\n    },\n    \"additionalProperties\": false\n}\n```\n\n----------------------------------------\n\nTITLE: Network Bind Address Configuration\nDESCRIPTION: Configuration setting for the node's networking port in config.toml. This port (35000) must be open for the node to function and communicate with other nodes.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/versioned_docs/version-2.0.0/operators/setup/node-endpoints.md#2025-04-22_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\nbind_address = '0.0.0.0:35000'\n```\n\n----------------------------------------\n\nTITLE: Declaring View Methods in Ethereum\nDESCRIPTION: This snippet shows how to declare a public view method in Ethereum that only retrieves data without modifying the state. View methods do not consume gas since they don't change state.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/docs/resources/moving-to-casper.md#2025-04-22_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nfunction balanceOf(address _owner) public view returns (uint256 return_parameter) { }\n```\n\n----------------------------------------\n\nTITLE: Verifying Deploy Status on Casper Testnet using Casper CLI\nDESCRIPTION: Checks the status and execution results of a previously sent deploy on the Casper Testnet using the `casper-client get-deploy` command. Requires the node address and the unique hash of the deploy (`<DEPLOY_HASH>`) to be specified.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/docs/resources/advanced/multi-sig/multi-sig-workflow.md#2025-04-22_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\ncasper-client get-deploy --node-address https://node.testnet.casper.network <DEPLOY_HASH>\n```\n\n----------------------------------------\n\nTITLE: React App Component Implementation\nDESCRIPTION: Main React component implementation with wallet connection state management.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/docs/developers/dapps/template-frontend.md#2025-04-22_snippet_4\n\nLANGUAGE: jsx\nCODE:\n```\nimport React from \"react\";\nimport Connect from \"./Connect\";\nimport './App.css'\n\nfunction App() {\n    const [publicKey, setPublicKey] = React.useState(null);\n    return (\n        <>\n            <Connect setPublicKey={ setPublicKey } />\n            <div>\n                {publicKey !== null && (<>\n                    Wallet connected: {publicKey}<br/>\n                </>)}\n            </div>\n        </>\n    );\n}\n\nexport default App;\n```\n\n----------------------------------------\n\nTITLE: Retrieving Era Info on Casper Network\nDESCRIPTION: Fetches era information from Casper network to validate validator stakes. Requires node address and block number as parameters for retrieving data through casper-client.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/versioned_docs/version-2.0.0/operators/setup-network/create-private.md#2025-04-22_snippet_22\n\nLANGUAGE: sh\nCODE:\n```\ncasper-client get-era-info -n $NODE_ADDR -b 153\n```\n\n----------------------------------------\n\nTITLE: Serializing TimeDiff Type\nDESCRIPTION: Describes `TimeDiff`, representing a human-readable duration between two timestamps. It serializes as a single `u64` value.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/versioned_docs/version-2.0.0/concepts/serialization/types.md#2025-04-22_snippet_50\n\nLANGUAGE: text\nCODE:\n```\nA human-readable duration between two timestamps. It serializes as a single [`u64`](./primitives.md#clvalue-numeric) value.\n```\n\n----------------------------------------\n\nTITLE: Executing Package Transaction in Casper Network\nDESCRIPTION: This command allows a user to invoke an entry point on a given contract package using the associated package-address. It requires the package address, session entry point, gas price tolerance, and either a secret key or initiator address.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/docs/concepts/transactions.md#2025-04-22_snippet_7\n\nLANGUAGE: json\nCODE:\n```\ncasper-client put-txn package\n/// The address of the contract package.\n  --package-address <FORMATTED STRING or PATH>\n/// The entry point to invoke on the package.\n  --session-entry-point <NAME>\n/// The maximum gas price that the user is willing to pay for this transaction.\n  --gas-price-tolerance <INTEGER>\n/// The path to the local secret key file, or the [`initiator address`](../developers/json-rpc/types_chain.md#initiatoraddr) sending the transaction.\n  <--secret-key <PATH>|--initiator-address <HEX STRING>>\n```\n\n----------------------------------------\n\nTITLE: Defining JSON Schema for Casper Network API Components\nDESCRIPTION: A comprehensive schema definition for Casper Network API components related to auction state, era validators, and bid information. The schema describes the structure, required fields, and data types for various API objects including AuctionState, JsonEraValidators, JsonValidatorWeights, and PublicKeyAndBid.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/condor/jsonrpc-comp/rpc-2.0/schema.json.md#2025-04-22_snippet_101\n\nLANGUAGE: json\nCODE:\n```\n                \"$ref\": \"#/components/schemas/Digest\"\n              }\n            ]\n          },\n          \"merkle_proof\": {\n            \"description\": \"The Merkle proof\",\n            \"type\": \"string\"\n          }\n        },\n        \"additionalProperties\": false\n      },\n      \"AuctionState\": {\n        \"description\": \"Data structure summarizing auction contract data.\",\n        \"type\": \"object\",\n        \"required\": [\n          \"bids\",\n          \"block_height\",\n          \"era_validators\",\n          \"state_root_hash\"\n        ],\n        \"properties\": {\n          \"state_root_hash\": {\n            \"description\": \"Global state hash.\",\n            \"allOf\": [\n              {\n                \"$ref\": \"#/components/schemas/Digest\"\n              }\n            ]\n          },\n          \"block_height\": {\n            \"description\": \"Block height.\",\n            \"type\": \"integer\",\n            \"format\": \"uint64\",\n            \"minimum\": 0.0\n          },\n          \"era_validators\": {\n            \"description\": \"Era validators.\",\n            \"type\": \"array\",\n            \"items\": {\n              \"$ref\": \"#/components/schemas/JsonEraValidators\"\n            }\n          },\n          \"bids\": {\n            \"description\": \"All bids.\",\n            \"allOf\": [\n              {\n                \"$ref\": \"#/components/schemas/Array_of_PublicKeyAndBid\"\n              }\n            ]\n          }\n        },\n        \"additionalProperties\": false\n      },\n      \"JsonEraValidators\": {\n        \"description\": \"The validators for the given era.\",\n        \"type\": \"object\",\n        \"required\": [\n          \"era_id\",\n          \"validator_weights\"\n        ],\n        \"properties\": {\n          \"era_id\": {\n            \"$ref\": \"#/components/schemas/EraId\"\n          },\n          \"validator_weights\": {\n            \"type\": \"array\",\n            \"items\": {\n              \"$ref\": \"#/components/schemas/JsonValidatorWeights\"\n            }\n          }\n        },\n        \"additionalProperties\": false\n      },\n      \"JsonValidatorWeights\": {\n        \"description\": \"A validator's weight.\",\n        \"type\": \"object\",\n        \"required\": [\n          \"public_key\",\n          \"weight\"\n        ],\n        \"properties\": {\n          \"public_key\": {\n            \"$ref\": \"#/components/schemas/PublicKey\"\n          },\n          \"weight\": {\n            \"$ref\": \"#/components/schemas/U512\"\n          }\n        },\n        \"additionalProperties\": false\n      },\n      \"Array_of_PublicKeyAndBid\": {\n        \"type\": \"array\",\n        \"items\": {\n          \"$ref\": \"#/components/schemas/PublicKeyAndBid\"\n        }\n      },\n      \"PublicKeyAndBid\": {\n        \"description\": \"A bid associated with the given public key.\",\n        \"type\": \"object\",\n        \"required\": [\n          \"bid\",\n          \"public_key\"\n        ],\n        \"properties\": {\n          \"public_key\": {\n            \"description\": \"The public key of the bidder.\",\n            \"allOf\": [\n              {\n                \"$ref\": \"#/components/schemas/PublicKey\"\n              }\n            ]\n          },\n          \"bid\": {\n            \"description\": \"The bid details.\",\n            \"allOf\": [\n              {\n                \"$ref\": \"#/components/schemas/Bid\"\n              }\n            ]\n          }\n        }\n      }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Generating Account Information\nDESCRIPTION: Commands for generating and viewing Casper account information using the CLI client.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/docs/developers/prerequisites.md#2025-04-22_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\ncasper-client account-address --public-key <path-to-public_key.pem/public-key-hex>\n```\n\n----------------------------------------\n\nTITLE: Deploying the Counter Contract\nDESCRIPTION: Deploy the compiled counter contract to the local Casper network using the casper-client.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/versioned_docs/version-2.0.0/resources/beginner/counter/walkthrough.md#2025-04-22_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\ncasper-client put-deploy \\\n    --node-address http://localhost:11101 \\\n    --chain-name casper-net-1 \\\n    --secret-key [PATH_TO_YOUR_KEY]/secret_key.pem \\\n    --payment-amount [PAYMENT_AMOUNT_IN_MOTES] \\\n    --session-path ./contract-v1/target/wasm32-unknown-unknown/release/counter-v1.wasm\n```\n\n----------------------------------------\n\nTITLE: Verifying Deploy Status (Repeated Context) using Casper Client (Bash)\nDESCRIPTION: Retrieves the status and execution results of a specific deploy from a Casper node using its deploy hash. This command is used after removing a key to confirm the removal deploy was successfully processed.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/versioned_docs/version-2.0.0/resources/advanced/multi-sig/multi-sig-workflow.md#2025-04-22_snippet_18\n\nLANGUAGE: bash\nCODE:\n```\ncasper-client get-deploy --node-address https://node.testnet.casper.network/ <DEPLOY_HASH>\n```\n\n----------------------------------------\n\nTITLE: Running SDK Tests\nDESCRIPTION: Command to execute the test suite for the Casper JavaScript SDK.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/docs/developers/dapps/sdk/script-sdk.md#2025-04-22_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nnpm run test\n```\n\n----------------------------------------\n\nTITLE: Activating and Setting Up NCTL\nDESCRIPTION: Commands to activate NCTL environment, compile binaries, and set up the network.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/versioned_docs/version-1.5.X/developers/dapps/setup-nctl.md#2025-04-22_snippet_12\n\nLANGUAGE: bash\nCODE:\n```\nsource casper-node/utils/nctl/activate\nnctl-compile\nnctl-assets-setup && nctl-start\n```\n\n----------------------------------------\n\nTITLE: Sending Ledger-Signed Deploy to Network in JavaScript\nDESCRIPTION: Sends a deploy previously signed using a Ledger device to the Casper network. It calls the `deploy` method of an initialized `CasperServiceByJsonRPC` instance (`casperService`) with the `signedDeploy` object created in the previous step. Depends on an active `casperService` connection and the `signedDeploy` object.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/docs/resources/advanced/list-cspr.md#2025-04-22_snippet_11\n\nLANGUAGE: javascript\nCODE:\n```\ncasperService.deploy(signedDeploy)\n```\n\n----------------------------------------\n\nTITLE: Cloning and Preparing the Delegation Contract\nDESCRIPTION: Shows how to clone the Casper Node repository and compile the delegation contract for staking. This bash script sets up the required environment and builds the delegate.wasm file needed for token staking.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/versioned_docs/version-1.5.X/developers/dapps/sdk/client-library-usage.md#2025-04-22_snippet_19\n\nLANGUAGE: bash\nCODE:\n```\ngit clone https://github.com/casper-network/casper-node.git\ncd casper-node/\nmake setup-rs\nmake build-contract-rs/delegate\ncd ../\n```\n\n----------------------------------------\n\nTITLE: Running the Casper .NET SDK Example\nDESCRIPTION: Command to execute the .NET application example that retrieves an account balance from the Casper testnet.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/versioned_docs/version-2.0.0/developers/dapps/sdk/csharp-sdk.md#2025-04-22_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\ndotnet run\n```\n\n----------------------------------------\n\nTITLE: Query Target Account Balance Example\nDESCRIPTION: Complete example of querying a target account balance on the testnet with actual values\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/versioned_docs/version-2.0.0/developers/cli/transfers/verify-transfer.md#2025-04-22_snippet_21\n\nLANGUAGE: bash\nCODE:\n```\ncasper-client query-balance -v --id 7 \\\n--node-address https://node.testnet.casper.network \\\n--state-root-hash fdb1474d441ec0fcbf2e088f1630dbf98d3bcf7f7a7fe298303797f35b8cb4e1 \\\n--purse-identifier account-hash-1ed5a1c39bea93c105f2d22c965a84b205b36734a377d05dbb103b6bfaa595a7\n```\n\n----------------------------------------\n\nTITLE: Getting State Root Hash\nDESCRIPTION: Retrieve the current state root hash of the local Casper network.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/versioned_docs/version-2.0.0/resources/beginner/counter/walkthrough.md#2025-04-22_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\ncasper-client get-state-root-hash --node-address http://localhost:11101\n```\n\n----------------------------------------\n\nTITLE: Failed Test Execution Output\nDESCRIPTION: Example output of failed test execution due to dependency errors\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/versioned_docs/version-2.0.0/resources/advanced/cross-contract.md#2025-04-22_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\nwarning: `tests` (bin \"integration-tests\" test) generated 2 warnings\nerror: could not compile `tests` due to 3 previous errors; 2 warnings emitted\nmake: *** [test] Error 101\n```\n\n----------------------------------------\n\nTITLE: Configuring WASM Host Function Costs in JSON\nDESCRIPTION: Gas cost configuration for message-related host functions including topic management, message emission, and cost increase parameters for subsequent messages.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/docs/developers/writing-onchain-code/emitting-contract-events.md#2025-04-22_snippet_17\n\nLANGUAGE: json\nCODE:\n```\n[wasm.host_function_costs]\nmanage_message_topic = { cost = 200, arguments = [0, 0, 0, 0] }\nemit_message = { cost = 200, arguments = [0, 0, 0, 0] }\ncost_increase_per_message = 50\n```\n\n----------------------------------------\n\nTITLE: Defining Session Type Enums with Descriptions - JSON\nDESCRIPTION: This snippet presents a JSON schema that enumerates all possible session types for a transaction: Standard, Installer, Upgrader, and Isolated. It uses the 'oneOf' construct to describe restrictions, prerequisites, and specific behaviors of each session type, including requirements like the presence of a 'package_id' argument for Upgrader sessions. Inputs include the session type string, while outputs enforce collectible validation and documentation for these transaction sessions. There are no external runtime dependencies beyond standard JSON parsing and validation mechanisms.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/condor/jsonrpc-comp/rpc-2.0/schema/TransactionSessionKind.json.md#2025-04-22_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"description\": \"Session kind of a Transaction.\",\n    \"oneOf\": [\n        {\n            \"description\": \"A standard (non-special-case) session.\\n\\nThis kind of session is not allowed to install or upgrade a stored contract, but can call stored contracts.\",\n            \"type\": \"string\",\n            \"enum\": [\n                \"Standard\"\n            ]\n        },\n        {\n            \"description\": \"A session which installs a stored contract.\",\n            \"type\": \"string\",\n            \"enum\": [\n                \"Installer\"\n            ]\n        },\n        {\n            \"description\": \"A session which upgrades a previously-installed stored contract.  Such a session must have \\\"package_id: PackageIdentifier\\\" runtime arg present.\",\n            \"type\": \"string\",\n            \"enum\": [\n                \"Upgrader\"\n            ]\n        },\n        {\n            \"description\": \"A session which doesn't call any stored contracts.\\n\\nThis kind of session is not allowed to install or upgrade a stored contract.\",\n            \"type\": \"string\",\n            \"enum\": [\n                \"Isolated\"\n            ]\n        }\n    ]\n} \n```\n\n----------------------------------------\n\nTITLE: Describing ByteCode Structure and Serialization (Casper Network)\nDESCRIPTION: Defines the ByteCode structure, which contains a contract's Wasm bytes. It serializes as a single u8 BidKind tag, followed by a u32 representing the size of the subsequent Wasm bytes, and finally the Wasm bytes themselves.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/versioned_docs/version-2.0.0/concepts/serialization/types.md#2025-04-22_snippet_7\n\nLANGUAGE: Text\nCODE:\n```\n## ByteCode {#bytecode}\n\nA container for a contract's Wasm bytes. It serializes as the single `u8` [BidKind](#bid-kind), followed by a [`u32`](./primitives.md#clvalue-numeric) value describing the size of the remaining [Bytes](#bytes) and then the bytes as described.\n```\n\n----------------------------------------\n\nTITLE: Generating PowerShell Auto-Completion for casper-client\nDESCRIPTION: Shows how to use the `--shell` argument with `casper-client generate-completion` to specify a different shell type (e.g., `powershell`) for the auto-completion script generation. Lists possible values for the `--shell` argument.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/versioned_docs/version-1.5.X/operators/setup/install-node.md#2025-04-22_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\n--shell <STRING>    The type of shell to generate the completion script for [default: bash]  [possible values:\n                            zsh, bash, fish, powershell, elvish]\n\nsudo casper-client generate-completion --shell powershell\n```\n\n----------------------------------------\n\nTITLE: Testing Contract Factory Implementation in Rust\nDESCRIPTION: This test verifies the installation and usage of a factory pattern contract. It creates two counters via different factory methods, verifies their contract hashes, and tests their exported functions.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/versioned_docs/version-2.0.0/developers/writing-onchain-code/factory-pattern.md#2025-04-22_snippet_6\n\nLANGUAGE: rust\nCODE:\n```\nshould_install_and_use_factory_pattern\nlet counter_factory_hash = setup();\nlet mut builder = InMemoryWasmTestBuilder::default();\n\n// Call contract_factory with counter name new-counter-1 and value 1\nlet counter_name_1 = String::from(\"new-counter-1\");\nlet args = runtime_args! {\n    CONTRACT_NAME => counter_name_1.clone(),\n    COUNT => 1u32\n};\n\n// Call contract_factory_default with counter name new-counter-2\nlet counter_name_2 = String::from(\"new-counter-2\");\nlet default_args = runtime_args! {\n    CONTRACT_NAME => counter_name_2.clone()\n};\n\n// Verify contract hashes\nlet factory_hash = builder.get_expected_account(ACCOUNT_1_ADDR).named_keys()[&FACTORY_NAME];\nlet counter_1_hash = builder.get_expected_account(ACCOUNT_1_ADDR).named_keys()[&counter_name_1];\nlet counter_2_hash = builder.get_expected_account(ACCOUNT_1_ADDR).named_keys()[&counter_name_2];\n```\n\n----------------------------------------\n\nTITLE: Verifying Transaction Status\nDESCRIPTION: Command to check the status of a transaction using its hash\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/docs/developers/dapps/nctl-test.md#2025-04-22_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\n$(get_path_to_client) get-transaction efad4a969064b5f8189ea4d6dd2fba2926d01d583a35178c07d7b827de16789e -n http://localhost:11101\n```\n\n----------------------------------------\n\nTITLE: Adding Int32 Value JSON Schema\nDESCRIPTION: This JSON schema defines the addition of an 'i32' integer to the global state. It requires an 'AddInt32' property, specifying an 'integer' type with 'int32' format. The focus is on ensuring that added values meet the 32-bit integer constraints.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/condor/jsonrpc-comp/rpc-1.5/schema.json.md#2025-04-22_snippet_44\n\nLANGUAGE: JSON\nCODE:\n```\n{\"AddInt32\": {\"type\": \"integer\", \"format\": \"int32\"}}\n```\n\n----------------------------------------\n\nTITLE: Examining Casper Network Transform Operations in JSON Response\nDESCRIPTION: JSON response showing a series of blockchain transform operations including WriteCLValue transforms for dictionaries and URefs, Identity transforms, and balance operations. Demonstrates how the Casper blockchain records state changes.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/docs/resources/tokens/cep18/full-tutorial.md#2025-04-22_snippet_20\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"key\": \"dictionary-04932d42aff9367579770E219ce1C4Da83D1Fd42Fa0FaA4Ae98AE07914c4c1E4\",\n  \"transform\": {\n    \"WriteCLValue\": {\n      \"bytes\": \"[186 hex chars]\",\n      \"cl_type\": \"Any\",\n      \"parsed\": null\n    }\n  }\n},\n{\n  \"key\": \"uref-66Bf928E1F6A28b174A48Fca4c002Bc8b77Dd851d7EFFb9Dc1A450cB211E484a-000\",\n  \"transform\": {\n    \"WriteCLValue\": {\n      \"bytes\": \"04400cAa3b\",\n      \"cl_type\": \"U256\",\n      \"parsed\": \"1001000000\"\n    }\n  }\n},\n{\n  \"key\": \"uref-66Bf928E1F6A28b174A48Fca4c002Bc8b77Dd851d7EFFb9Dc1A450cB211E484a-000\",\n  \"transform\": \"Identity\"\n},\n{\n  \"key\": \"dictionary-Ec3f20485A29255dd2c2D7b8c008207A0d139dFDCE89224DA8b63F21c157A97F\",\n  \"transform\": {\n    \"WriteCLValue\": {\n      \"bytes\": \"[186 hex chars]\",\n      \"cl_type\": \"Any\",\n      \"parsed\": null\n    }\n  }\n},\n{\n  \"key\": \"uref-66Bf928E1F6A28b174A48Fca4c002Bc8b77Dd851d7EFFb9Dc1A450cB211E484a-000\",\n  \"transform\": {\n    \"WriteCLValue\": {\n      \"bytes\": \"04C090c83b\",\n      \"cl_type\": \"U256\",\n      \"parsed\": \"1003000000\"\n    }\n  }\n},\n{\n  \"key\": \"deploy-F9D4C649Fa78Da...................................................\",\n  \"transform\": {\n    \"WriteDeployInfo\": {\n      \"deploy_hash\": \"F9D4C649Fa78Da07Ec6EFcFC615ff1Bd3B68347750FA0C81B6a74C3f9582d7E4\",\n      \"from\": \"account-hash-7f4bf39A311a...................................................\",\n      \"gas\": \"45040980830\",\n      \"source\": \"uref-C051e7EC16e08Def8b556F9...................................................\",\n      \"transfers\": []\n    }\n  }\n},\n{\n  \"key\": \"balance-98d945f5324F865243B7c02C0417AB6eaC361c5c56602FD42ced834a1Ba201B6\",\n  \"transform\": \"Identity\"\n},\n{\n  \"key\": \"hash-8cf5E4aCF51f54Eb59291599187838Dc3BC234089c46fc6cA8AD17e762aE4401\",\n  \"transform\": \"Identity\"\n},\n{\n  \"key\": \"hash-010c3Fe81B7b862E50C77EF9A958a05BfA98444F26f96f23d37A13c96244cFB7\",\n  \"transform\": \"Identity\"\n},\n{\n  \"key\": \"hash-9824d60dC3A5c44A20b9FD260a412437933835B52Fc683d8AE36e4ec2114843e\",\n  \"transform\": \"Identity\"\n},\n{\n  \"key\": \"balance-98d945f5324F865243B7c02C0417AB6eaC361c5c56602FD42ced834a1Ba201B6\",\n  \"transform\": \"Identity\"\n},\n{\n  \"key\": \"balance-c69d353A5a3b6433368A8FC2F6b308ce4Ec10291782f61BA15C96F260f91FFC0\",\n  \"transform\": \"Identity\"\n},\n{\n  \"key\": \"balance-98d945f5324F865243B7c02C0417AB6eaC361c5c56602FD42ced834a1Ba201B6\",\n  \"transform\": {\n    \"WriteCLValue\": {\n      \"bytes\": \"00\",\n      \"cl_type\": \"U512\",\n      \"parsed\": \"0\"\n    }\n  }\n},\n{\n  \"key\": \"balance-c69d353A5a3b6433368A8FC2F6b308ce4Ec10291782f61BA15C96F260f91FFC0\",\n  \"transform\": {\n    \"AddUInt512\": \"100000000000\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Adding UInt512 Value JSON Schema\nDESCRIPTION: Defines the addition of a 'U512' value in the global state schema. Requires an 'AddUInt512' property, referencing the 'U512' component schema to maintain consistent data handling.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/condor/jsonrpc-comp/rpc-1.5/schema.json.md#2025-04-22_snippet_48\n\nLANGUAGE: JSON\nCODE:\n```\n{\"AddUInt512\": {\"$ref\": \"#/components/schemas/U512\"}}\n```\n\n----------------------------------------\n\nTITLE: chain_get_block_transfers Response Example\nDESCRIPTION: Example response showing the transfers made within a block, including transfer details such as amount, deploy hash, source, and target addresses.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/versioned_docs/version-1.5.X/developers/json-rpc/json-rpc-informational.md#2025-04-22_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\n{\n  \"id\": 1,\n  \"jsonrpc\": \"2.0\",\n  \"result\": {\n    \"api_version\": \"1.4.13\",\n    \"block_hash\": \"13c2d7a68ecdd4b74bf4393c88915c836c863fc4bf11d7f2bd930a1bbccacdcb\",\n    \"transfers\": [\n      {\n        \"amount\": \"0\",\n        \"deploy_hash\": \"0000000000000000000000000000000000000000000000000000000000000000\",\n        \"from\": \"account-hash-0000000000000000000000000000000000000000000000000000000000000000\",\n        \"gas\": \"0\",\n        \"id\": null,\n        \"source\": \"uref-0000000000000000000000000000000000000000000000000000000000000000-000\",\n        \"target\": \"uref-0000000000000000000000000000000000000000000000000000000000000000-000\",\n        \"to\": null\n      }\n    ]\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Converting Ethereum Keys to PEM Format\nDESCRIPTION: JavaScript code that converts an Ethereum private key to PEM format using the key-encoder library. This conversion is necessary to use existing Ethereum keys with the Casper command-line client.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/docs/concepts/accounts-and-keys.md#2025-04-22_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nvar KeyEncoder = require('key-encoder'),\nkeyEncoder = new KeyEncoder.default('secp256k1');\nlet priv_hex = \"THE SECRET KEY TO ENCODE\";\nlet priv_pem = keyEncoder.encodePrivate(priv_hex, \"raw\", \"pem\");\nconsole.log(priv_pem);\n```\n\n----------------------------------------\n\nTITLE: Implementing Basic Connect Component in React\nDESCRIPTION: Initial implementation of the Connect component that imports the Casper wallet provider and renders a connect button that calls the connectToWallet function.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/versioned_docs/version-2.0.0/developers/dapps/template-frontend.md#2025-04-22_snippet_10\n\nLANGUAGE: jsx\nCODE:\n```\nimport { getProvider } from \"./casper-wallet\";\n\nconst provider = getProvider();\n\nconst Connect = (props) => {\n    return (\n        <>\n            <button onClick={ () => connectToWallet(props) }>Connect Wallet</button>\n            {/* Place for disconnect button */}\n        </>\n    );\n}\n\nexport default Connect;\n```\n\n----------------------------------------\n\nTITLE: Illustrative Top Section of config.toml (TOML)\nDESCRIPTION: Shows the beginning comment block of a `config.toml` file, indicating the start of configuration options. This section typically includes settings like `trusted_hash` that might need modification.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/versioned_docs/version-1.5.X/operators/setup/basic-node-configuration.md#2025-04-22_snippet_4\n\nLANGUAGE: toml\nCODE:\n```\n# ================================\n# Configuration options for a node\n```\n\n----------------------------------------\n\nTITLE: Serializing SystemContractRegistry Structure\nDESCRIPTION: Describes `SystemContractRegistry`, a unique `Key` holding a mapping of system contract names (like Mint, Auction) to their `ContractHashes`. It serializes like a `BTreeMap`, starting with a `u32` count, followed by serialized `String` names and `ContractHash` values.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/versioned_docs/version-2.0.0/concepts/serialization/types.md#2025-04-22_snippet_48\n\nLANGUAGE: text\nCODE:\n```\nSystemContractRegistry is a unique `Key` under which a mapping of the names and `ContractHashes` for system contracts. This includes `Mint`, `Auction`, `HandlePayment` and `StandardPayment`. It is serialized as a `BTreeMap` where the first 4 bytes represent a `u32` value describing the number of names as strings and [ContractHashes](./structures.md#contracthash) held within. The remainder consists of a repeating pattern of serialized strings and then ContractHashes of the length dictated by the first four bytes.\n```\n\n----------------------------------------\n\nTITLE: Querying CEP-18 Contract Package in JSON\nDESCRIPTION: This command queries the global state of a CEP-18 contract package using `casper-client`, specifying both the contract hash and state root hash. It requires the network host and port, as well as the correct contract and state root hashes. It returns details of the contract package, including version information.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/docs/resources/tokens/cep18/query.md#2025-04-22_snippet_0\n\nLANGUAGE: json\nCODE:\n```\ncasper-client query-global-state -n http://<HOST IP>:<PORT> \\\n// This is the contract package hash, which can be found within the `NamedKeys` of the account that sent the installing transaction.\n--key hash-82bd86d2675b2dc44c19027fb7717a99db6fda5e0cad8d597f2495a9dbc9df7f \\\n// This is the most up to date state root hash, which can found by using the `get-state-root-hash` command in the Casper client.\n--state-root-hash f9f73c3a4da5893b67c4cac94a5695d76cfefff61b050c98a7b19e2b8efd3933\n```\n\n----------------------------------------\n\nTITLE: Installing GCC and G++ Compilers on Linux\nDESCRIPTION: Commands to install the GCC and G++ compilers on Linux using apt and verify their installation.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/versioned_docs/version-2.0.0/developers/dapps/setup-nctl.md#2025-04-22_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\n$ sudo apt install build-essential\n$ gcc --version\n$ g++ --version\n```\n\n----------------------------------------\n\nTITLE: Checking CMake Version - Bash\nDESCRIPTION: Outputs the installed CMake version to confirm presence and correct setup. Should display a version of 3.20.0 or newer for Casper build compatibility.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/versioned_docs/version-1.5.X/developers/prerequisites.md#2025-04-22_snippet_22\n\nLANGUAGE: bash\nCODE:\n```\ncmake --version\n```\n\n----------------------------------------\n\nTITLE: Defining Type Mismatch Error Schema in JSON for Casper Network\nDESCRIPTION: JSON schema that defines a type mismatch error structure for StoredValue operations in Casper Network. The schema requires two string properties: 'expected' which indicates the type that was expected, and 'found' which indicates the actual type encountered during the operation.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/condor/jsonrpc-comp/rpc-2.0/schema/TypeMismatch.json.md#2025-04-22_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"description\": \"An error struct representing a type mismatch in [`StoredValue`](crate::StoredValue) operations.\",\n    \"type\": \"object\",\n    \"required\": [\n        \"expected\",\n        \"found\"\n    ],\n    \"properties\": {\n        \"expected\": {\n            \"description\": \"The name of the expected type.\",\n            \"type\": \"string\"\n        },\n        \"found\": {\n            \"description\": \"The actual type found.\",\n            \"type\": \"string\"\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Checking cargo-casper Version - Bash\nDESCRIPTION: Prints installed cargo-casper version for verification. Ensures CLI helper is correctly installed and available.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/versioned_docs/version-1.5.X/developers/prerequisites.md#2025-04-22_snippet_13\n\nLANGUAGE: bash\nCODE:\n```\ncargo-casper --version\n```\n\n----------------------------------------\n\nTITLE: Generating Updated Receipt Format for CEP-78 NFT Collection\nDESCRIPTION: This snippet demonstrates the format of updated receipts in the CEP-78 Enhanced NFT Standard. It shows how the receipt name is constructed using the collection name, modulo (token number within the page), and page number.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/versioned_docs/version-1.5.X/resources/tokens/cep78/reverse-lookup.md#2025-04-22_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\ncep78_collection_m_350_p_2\n```\n\n----------------------------------------\n\nTITLE: Solana Entry Point Declaration\nDESCRIPTION: Demonstrates how to declare an entry point in a Solana program.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/versioned_docs/version-1.5.X/resources/moving-to-casper.md#2025-04-22_snippet_8\n\nLANGUAGE: rust\nCODE:\n```\nentrypoint!(process_instruction);\n```\n\n----------------------------------------\n\nTITLE: Target Account JSON-RPC Response\nDESCRIPTION: Example JSON-RPC response showing the balance query result for target account\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/versioned_docs/version-2.0.0/developers/cli/transfers/verify-transfer.md#2025-04-22_snippet_23\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"jsonrpc\": \"2.0\",\n  \"result\": {\n    \"api_version\": \"1.5.3\",\n    \"balance\": \"46200000000\"\n  },\n  \"id\": 7\n}\n```\n\n----------------------------------------\n\nTITLE: Query Node Health Metrics Using curl - Bash\nDESCRIPTION: Invokes the node's REST API /metrics endpoint to retrieve health metrics using an HTTP GET request. Requires curl and the node's address. Outputs diagnostic information for monitoring tools or manual inspection. Replace <node_address> with the actual address. No authentication by default.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/docs/operators/setup/node-endpoints.md#2025-04-22_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\ncurl -s http://<node_address>:8888/metrics\n```\n\n----------------------------------------\n\nTITLE: Target Account JSON-RPC Request\nDESCRIPTION: Example JSON-RPC request format for querying target account balance\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/versioned_docs/version-2.0.0/developers/cli/transfers/verify-transfer.md#2025-04-22_snippet_22\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"jsonrpc\": \"2.0\",\n  \"method\": \"query_balance\",\n  \"params\": {\n    \"state_identifier\": {\n      \"StateRootHash\": \"fdb1474d441ec0fcbf2e088f1630dbf98d3bcf7f7a7fe298303797f35b8cb4e1\"\n    },\n    \"purse_identifier\": {\n      \"main_purse_under_account_hash\": \"account-hash-1ed5a1c39bea93c105f2d22c965a84b205b36734a377d05dbb103b6bfaa595a7\"\n    }\n  },\n  \"id\": 7\n}\n```\n\n----------------------------------------\n\nTITLE: Mint System Contract Costs Configuration\nDESCRIPTION: Configuration settings for the mint system contract entrypoint costs. Includes costs for operations like minting, burning, transfers, and supply management.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/versioned_docs/version-2.0.0/operators/setup-network/chain-spec.md#2025-04-22_snippet_2\n\nLANGUAGE: markdown\nCODE:\n```\n|Attribute         |Description                                    | Mainnet Setting |\n|----------------- |-----------------------------------------------|------------------|\n|mint | Cost of calling the `mint` entrypoint. | 2_500_000_000|\n|reduce_total_supply | Cost of calling the `reduce_total_supply` entrypoint. | 10_000|\n|create | Cost of calling the `create` entrypoint. | 2_500_000_000|\n|balance | Cost of calling the `balance` entrypoint. | 10_000|\n|burn | Cost of calling the `burn` entrypoint. | 10_000|\n|transfer | Cost of calling the `transfer` entrypoint. | 10_000|\n|read_base_round_reward | Cost of calling the `read_base_round_reward` entrypoint. | 10_000|\n|mint_into_existing_purse | Cost of calling the `mint_into_existing_purse` entrypoint. | 2_500_000_000|\n```\n\n----------------------------------------\n\nTITLE: Node Version Installation Command\nDESCRIPTION: Command to install a specific version of the casper-node software.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/versioned_docs/version-2.0.0/operators/setup/basic-node-configuration.md#2025-04-22_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nsudo -u casper /etc/casper/pull_casper_node_version.sh 1_5_8\n```\n\n----------------------------------------\n\nTITLE: Updating Associated Key Weight\nDESCRIPTION: Command to update the weight of the primary key using the update_associated_keys.wasm session code.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/versioned_docs/version-2.0.0/resources/advanced/multi-sig/multi-sig-workflow.md#2025-04-22_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\ncasper-client put-deploy --node-address https://node.testnet.casper.network \\\n--chain-name \"casper-test\" \\\n--payment-amount 500000000 \\\n--secret-key $PATH/secret_key.pem \\\n--session-path target/wasm32-unknown-unknown/release/update_associated_keys.wasm \\\n--session-arg \"associated_key:key='account-hash-<ACCOUNT_HASH>'\" \\\n--session-arg \"new_weight:u8='3'\"\n```\n\n----------------------------------------\n\nTITLE: Example Delegation Using Compiled Wasm\nDESCRIPTION: Example command showing delegation of 500 CSPR on the Testnet using the compiled Wasm method with a higher payment amount of 6 CSPR.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/docs/developers/cli/delegate.md#2025-04-22_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\ncasper-client put-deploy \\\n--node-address http://65.21.75.254:7777  \\\n--chain-name casper-test \\\n--secret-key ~/KEYS/secret_key.pem \\\n--payment-amount 20000000000 \\\n--session-path ~/delegate.wasm \\\n--session-arg \"validator:public_key='01aa17f7b9889480b1bd34c3f94f263b229c7a9b01dd4dda19c2dd1d38d176c7a0'\" \\\n--session-arg \"amount:u512='500000000000'\" \\\n--session-arg \"delegator:public_key='01e3d3392c2e0b943abe709b25de5c353e5e1e9d95c7a76e3dd343d8aa1aa08d51'\"\n```\n\n----------------------------------------\n\nTITLE: Cloning Two-Party Multi-Sig Session Code Repositories with Bash\nDESCRIPTION: This Bash snippet shows how to clone the two-party multi-sig smart contract code from a GitHub repository, which contains session code for configuring associated keys on a Casper account. No dependencies are required beyond Git itself. The repository must then be built to generate the required Wasm contract for deployment.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/docs/resources/advanced/two-party-multi-sig.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ngit clone https://github.com/casper-ecosystem/two-party-multi-sig\n```\n\n----------------------------------------\n\nTITLE: Defining TransformError Schema in JSON\nDESCRIPTION: Specifies the schema for TransformError, which represents errors that can occur when applying and combining transforms. It includes options for Serialization errors, TypeMismatch errors, and Deprecated type errors.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/condor/jsonrpc-comp/rpc-2.0/schema.json.md#2025-04-22_snippet_73\n\nLANGUAGE: json\nCODE:\n```\n\"TransformError\": {\n  \"description\": \"Error type for applying and combining transforms.\\n\\nA `TypeMismatch` occurs when a transform cannot be applied because the types are not compatible (e.g. trying to add a number to a string).\",\n  \"oneOf\": [\n    {\n      \"description\": \"Error while (de)serializing data.\",\n      \"type\": \"object\",\n      \"required\": [\n        \"Serialization\"\n      ],\n      \"properties\": {\n        \"Serialization\": {\n          \"$ref\": \"#/components/schemas/BytesreprError\"\n        }\n      },\n      \"additionalProperties\": false\n    },\n    {\n      \"description\": \"Type mismatch error.\",\n      \"type\": \"object\",\n      \"required\": [\n        \"TypeMismatch\"\n      ],\n      \"properties\": {\n        \"TypeMismatch\": {\n          \"$ref\": \"#/components/schemas/TypeMismatch\"\n        }\n      },\n      \"additionalProperties\": false\n    },\n    {\n      \"description\": \"Type no longer supported.\",\n      \"type\": \"string\",\n      \"enum\": [\n        \"Deprecated\"\n      ]\n    }\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Trie Chunking Structures\nDESCRIPTION: Defines structures for handling large trie nodes that are split into chunks for network transfer.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/versioned_docs/version-1.5.X/concepts/design/networking-protocol.md#2025-04-22_snippet_10\n\nLANGUAGE: rust\nCODE:\n```\nstruct TrieOrChunkId(u64, Digest);\n\nenum TrieOrChunk {\n    Trie(Bytes),\n    ChunkWithProof(ChunkWithProof),\n}\n\nstruct ChunkWithProof {\n    proof: IndexedMerkleProof,\n    chunk: Bytes,\n}\n\nstruct IndexedMerkleProof {\n    index: u64,\n    count: u64,\n    merkle_proof: Vec<Digest>,\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Native Transfer Operation Schema - JSON Schema - JSON\nDESCRIPTION: Defines the structure for native transfer operations, which are not based on Wasm code but require runtime arguments. Ensures only transfer objects with correctly formatted arguments are validated against the schema. Relies on the referenced 'RuntimeArgs' schema for argument format compliance.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/condor/jsonrpc-comp/rpc-2.0/schema/components.json.md#2025-04-22_snippet_4\n\nLANGUAGE: JSON\nCODE:\n```\n{\n    \"Transfer\": {\n        \"type\": \"object\",\n        \"required\": [\n            \"args\"\n        ],\n        \"properties\": {\n            \"args\": {\n                \"description\": \"Runtime arguments.\",\n                \"allOf\": [\n                    {\n                        \"$ref\": \"#/components/schemas/RuntimeArgs\"\n                    }\n                ]\n            }\n        },\n        \"additionalProperties\": false\n    }\n}\n\n```\n\n----------------------------------------\n\nTITLE: Example account_put_deploy Request\nDESCRIPTION: Example JSON-RPC request for the deprecated account_put_deploy method, showing the structure of a deploy containing contract execution details, payment terms, and approval signatures.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/docs/developers/json-rpc/json-rpc-transactional.md#2025-04-22_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"id\": 1,\n  \"jsonrpc\": \"2.0\",\n  \"method\": \"account_put_deploy\",\n  \"params\": [\n    {\n      \"name\": \"deploy\",\n      \"value\": {\n        \"hash\": \"5c9b3b099c1378aa8e4a5f07f59ff1fcdc69a83179427c7e67ae0377d94d93fa\",\n        \"header\": {\n          \"account\": \"01d9bf2148748a85c89da5aad8ee0b0fc2d105fd39d41a4c796536354f0ae2900c\",\n          \"timestamp\": \"2020-11-17T00:39:24.072Z\",\n          \"ttl\": \"1h\",\n          \"gas_price\": 1,\n          \"body_hash\": \"d53cf72d17278fd47d399013ca389c50d589352f1a12593c0b8e01872a641b50\",\n          \"dependencies\": [\n            \"0101010101010101010101010101010101010101010101010101010101010101\"\n          ],\n          \"chain_name\": \"casper-example\"\n        },\n        \"payment\": {\n          \"StoredContractByName\": {\n            \"name\": \"casper-example\",\n            \"entry_point\": \"example-entry-point\",\n            \"args\": [\n              [\n                \"amount\",\n                {\n                  \"cl_type\": \"I32\",\n                  \"bytes\": \"e8030000\",\n                  \"parsed\": 1000\n                }\n              ]\n            ]\n          }\n        },\n        \"session\": {\n          \"Transfer\": {\n            \"args\": [\n              [\n                \"amount\",\n                {\n                  \"cl_type\": \"I32\",\n                  \"bytes\": \"e8030000\",\n                  \"parsed\": 1000\n                }\n              ]\n            ]\n          }\n        },\n        \"approvals\": [\n          {\n            \"signer\": \"01d9bf2148748a85c89da5aad8ee0b0fc2d105fd39d41a4c796536354f0ae2900c\",\n            \"signature\": \"014c1a89f92e29dd74fc648f741137d9caf4edba97c5f9799ce0c9aa6b0c9b58db368c64098603dbecef645774c05dff057cb1f91f2cf390bbacce78aa6f084007\"\n          }\n        ]\n      }\n    }\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Querying Contract Entry Points in Casper Network\nDESCRIPTION: Example of querying a contract's entry point using the casper-client CLI, showing both the command and JSON response. This snippet demonstrates how to query the 'name' parameter from a contract deployed on the Casper network.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/docs/resources/tokens/cep18/full-tutorial.md#2025-04-22_snippet_21\n\nLANGUAGE: bash\nCODE:\n```\ncasper-client query-global-state --node-address http://95.216.24.237:7777 \\\n--state-root-hash D00dF8c35B0E9995c2911803F37A212d82c960D9bC5bA3C4F99a661e18D09411 \\\n--key account-hash-7f4bf39A311a7538d8C91BB86C71DF774023e16bc4a70ab7e4e8AE77DbF2Ef53 \\\n-q \"test_contract/name\"\n```\n\nLANGUAGE: json\nCODE:\n```\n{\n \"id\": -3650676146668320186,\n \"jsonrpc\": \"2.0\",\n \"result\": {\n  \"api_version\": \"1.4.3\",\n  \"block_header\": null,\n  \"merkle_proof\": \"[80252 hex chars]\",\n  \"stored_value\": {\n   \"CLValue\": {\n    \"bytes\": \"0A00000043617370657254657374\",\n    \"cl_type\": \"String\",\n    \"parsed\": \"CasperTest\"\n   }\n  }\n }\n}\n```\n\n----------------------------------------\n\nTITLE: Updating Dictionary Records\nDESCRIPTION: Function that updates a ledger record by either creating a new entry or incrementing an existing one\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/docs/concepts/dictionaries.md#2025-04-22_snippet_3\n\nLANGUAGE: rust\nCODE:\n```\nfn update_ledger_record(dictionary_item_key: String) {\n    // Acquiring the LEDGER seed URef to properly assign the dictionary item.\n    let ledger_seed_uref = *runtime::get_key(\"ledger\")\n        .unwrap_or_revert_with(FundRaisingError::MissingLedgerSeedURef)\n        .as_uref()\n        .unwrap_or_revert();\n```\n\nLANGUAGE: rust\nCODE:\n```\n    // This identifies an item within the dictionary and either creates or updates the associated value.\n    match storage::dictionary_get::<u64>(ledger_seed_uref, &dictionary_item_key).unwrap_or_revert()\n    {\n        None => storage::dictionary_put(ledger_seed_uref, &dictionary_item_key, 1u64),\n        Some(current_number_of_donations) => storage::dictionary_put(\n            ledger_seed_uref,\n            &dictionary_item_key,\n            current_number_of_donations + 1u64,\n        ),\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Adding Associated Key to Primary Account\nDESCRIPTION: Command to add a new associated key to the primary account with a specified weight using the add_account.wasm contract.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/docs/resources/advanced/multi-sig/multi-sig-workflow.md#2025-04-22_snippet_14\n\nLANGUAGE: bash\nCODE:\n```\ncasper-client put-deploy --node-address https://node.testnet.casper.network \\\n--chain-name \"casper-test\" \\\n--payment-amount 500000000 \\\n--secret-key $PATH/secret_key.pem \\\n--session-path target/wasm32-unknown-unknown/release/add_account.wasm \\\n--session-arg \"new_key:key='account-hash-e2d00525cac31ae2756fb155f289d276c6945b6914923fe275de0cb127bffee7\" \\\n--session-arg \"weight:u8='1'\"\n```\n\n----------------------------------------\n\nTITLE: Retrieving State Root Hash in Casper Network (JSON)\nDESCRIPTION: Example of using the chain_get_state_root_hash RPC method to get the state root hash for a specific block. It shows the request parameters and the expected response format.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/condor/jsonrpc-comp/rpc-2.0/schema.json.md#2025-04-22_snippet_21\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"name\": \"block_identifier\",\n  \"value\": {\n    \"Height\": 10\n  }\n}\n```\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"api_version\": \"2.0.0\",\n  \"state_root_hash\": \"0808080808080808080808080808080808080808080808080808080808080808\"\n}\n```\n\n----------------------------------------\n\nTITLE: Casper Network Contract Storage Configuration JSON\nDESCRIPTION: Defines storage transforms for a Casper Network smart contract including URefs and hash keys. The configuration sets up storage for contract features like operators, balances, metadata, and access control with specific naming and permissions.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/versioned_docs/version-1.5.X/resources/tokens/cep78/using-casper-client/full-installation-tutorial.md#2025-04-22_snippet_13\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"key\": \"hash-378a43e38bc5129d8aa3bcd04f5c9a97be73f85b5be574182ac1346f04520796\",\n  \"transform\": {\n    \"AddKeys\": [\n      {\n        \"name\": \"operators\",\n        \"key\": \"uref-ff8ad952307b57a051ef6cb597a55cc2007e587c575584addf6a6fc12c0efd7b-007\"\n      }\n    ]\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Ethereum Public Method Implementation\nDESCRIPTION: Example of declaring a public method in Ethereum smart contract that updates contract state.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/versioned_docs/version-2.0.0/resources/moving-to-casper.md#2025-04-22_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nfunction update_name(string value) public {\n    dapp_name = value;\n}\n```\n\n----------------------------------------\n\nTITLE: Installing required packages for Casper tools on macOS\nDESCRIPTION: Install pkg-config and openssl packages required for Casper tools on macOS using Homebrew.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/versioned_docs/version-2.0.0/developers/prerequisites.md#2025-04-22_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\nbrew install pkg-config\nbrew install openssl\n```\n\n----------------------------------------\n\nTITLE: Linting the Casper Contract\nDESCRIPTION: This command runs clippy lint checks on the smart contract using the make check-lint command, ensuring the Rust code adheres to standards and is free of common issues.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/versioned_docs/version-1.5.X/developers/writing-onchain-code/getting-started.md#2025-04-22_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\nmake check-lint\n```\n\n----------------------------------------\n\nTITLE: Configuring Transaction Lanes in Casper Network Chainspec\nDESCRIPTION: TOML configuration settings for transaction lanes in the Casper Network, including native mint and auction lanes, and various WASM lanes with different size and gas limits. Each lane has specific limits for transaction size, args length, gas, and maximum number of transactions.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/docs/concepts/economics/runtime.md#2025-04-22_snippet_0\n\nLANGUAGE: toml\nCODE:\n```\n[transactions.v1]\n# The configuration settings for the lanes of transactions including both native and Wasm based interactions.\n# Currently the node supports two native interactions the mint and auction and have the reserved identifiers of 0 and 1\n# respectively\n# The remaining wasm based lanes specify the range of configuration settings for a given Wasm based transaction\n# within a given lane.\n# The maximum length in bytes of runtime args per V1 transaction.\n# [0] -> Transaction lane label (apart from the reserved native identifiers these are simply labels)\n# Note: For the given mainnet implementation we specially reserve the label 2 for install and upgrades and\n# the lane must be present and defined.\n# Different casper networks may not impose such a restriction.\n# [1] -> Max transaction size in bytes for a given transaction in a certain lane\n# [2] -> Max args length size in bytes for a given transaction in a certain lane\n# [3] -> Transaction gas limit size in bytes for a given transaction in a certain lane\n# [4] -> The maximum number of transactions the lane can contain\nnative_mint_lane = [0, 1024, 1024, 65_000_000_000, 650]\nnative_auction_lane = [1, 2048, 2048, 362_500_000_000, 145]\nwasm_lanes = [[2, 1_048_576, 2048, 1_000_000_000_000, 1], [3, 344_064, 1024, 500_000_000_000, 3], [4, 172_032, 1024, 50_000_000_000, 7], [5, 12_288, 512, 1_500_000_000, 15]]\n```\n\n----------------------------------------\n\nTITLE: Executing Session Transaction in Casper Network\nDESCRIPTION: This command allows the user to send Wasm in a manner similar to legacy Deploys, but through the new Transaction structure. It requires the transaction path, optional session entry point, transaction category, gas price tolerance, and either a secret key or initiator address.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/docs/concepts/transactions.md#2025-04-22_snippet_9\n\nLANGUAGE: json\nCODE:\n```\ncasper-client put-txn session\n/// The local path pointing to Wasm that will be sent to global state.\n  --transaction-path <PATH>\n/// An entry point on a previously installed contract, if applicable.\n  --session-entry-point <NAME>\n/// The category of the Transaction, in decreasing size order.\n  --category <install-upgrade|large|medium|small>\n/// The maximum gas price that the user is willing to pay for this transaction.\n  --gas-price-tolerance <INTEGER>\n/// The path to the local secret key file, or the [`initiator address`](../developers/json-rpc/types_chain.md#initiatoraddr) sending the transaction.\n  <--secret-key <PATH>|--initiator-address <HEX STRING>>\n```\n\n----------------------------------------\n\nTITLE: Defining JSON Schema for VM Entry Point\nDESCRIPTION: The JSON schema defines the entry point for the V2 Casper VM, specifying necessary fields such as 'flags' and 'function_index'. These fields are required and are restricted to unsigned 32-bit integers. The schema establishes structural requirements for data integrity within the VM.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/condor/jsonrpc-comp/rpc-2.0/schema/EntryPointV2.json.md#2025-04-22_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"description\": \"The entry point for the V2 Casper VM.\",\n    \"type\": \"object\",\n    \"required\": [\n        \"flags\",\n        \"function_index\"\n    ],\n    \"properties\": {\n        \"function_index\": {\n            \"description\": \"The selector.\",\n            \"type\": \"integer\",\n            \"format\": \"uint32\",\n            \"minimum\": 0\n        },\n        \"flags\": {\n            \"description\": \"The flags.\",\n            \"type\": \"integer\",\n            \"format\": \"uint32\",\n            \"minimum\": 0\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Installing essential Linux packages\nDESCRIPTION: Install the build-essential package, which includes necessary compilation tools for Linux.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/versioned_docs/version-2.0.0/developers/prerequisites.md#2025-04-22_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nsudo apt install build-essential\n```\n\n----------------------------------------\n\nTITLE: RPC Method Schema and Example - info_get_chainspec\nDESCRIPTION: JSON schema defining the info_get_chainspec RPC method structure, parameters, and response format. The method returns chainspec.toml, genesis_accounts.toml, and global_state.toml file contents as raw bytes. Includes an example response showing the expected format with API version and chainspec bytes.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/condor/jsonrpc-comp/rpc-1.5/info_get_chainspec.json.md#2025-04-22_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"name\": \"info_get_chainspec\",\n  \"summary\": \"returns the raw bytes of the chainspec.toml, genesis accounts.toml, and global_state.toml files\",\n  \"params\": [],\n  \"result\": {\n    \"name\": \"info_get_chainspec_result\",\n    \"schema\": {\n      \"description\": \"Result for the \\\"info_get_chainspec\\\" RPC.\",\n      \"type\": \"object\",\n      \"required\": [\n        \"api_version\",\n        \"chainspec_bytes\"\n      ],\n      \"properties\": {\n        \"api_version\": {\n          \"description\": \"The RPC API version.\",\n          \"type\": \"string\"\n        },\n        \"chainspec_bytes\": {\n          \"description\": \"The chainspec file bytes.\",\n          \"$ref\": \"#/components/schemas/ChainspecRawBytes\"\n        }\n      }\n    }\n  },\n  \"examples\": [\n    {\n      \"name\": \"info_get_chainspec_example\",\n      \"params\": [],\n      \"result\": {\n        \"name\": \"info_get_chainspec_example_result\",\n        \"value\": {\n          \"api_version\": \"1.5.6\",\n          \"chainspec_bytes\": {\n            \"chainspec_bytes\": \"2a2a\",\n            \"maybe_genesis_accounts_bytes\": null,\n            \"maybe_global_state_bytes\": null\n          }\n        }\n      }\n    }\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Validator Changes Request\nDESCRIPTION: JSON-RPC request to get information about validator status changes in the current era.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/docs/developers/json-rpc/json-rpc-pos.md#2025-04-22_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"id\": 1,\n  \"jsonrpc\": \"2.0\",\n  \"method\": \"info_get_validator_changes\",\n  \"params\": []\n}\n```\n\n----------------------------------------\n\nTITLE: Block Body Structure\nDESCRIPTION: Defines the structure and serialization format of a block body in the Casper Network, including proposer key, deploy hashes and transfer hashes.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/versioned_docs/version-1.5.X/concepts/serialization-standard.md#2025-04-22_snippet_0\n\nLANGUAGE: rust\nCODE:\n```\nstruct BlockBody {\n    proposer: PublicKey,         // Ed25519 (1) or Secp256k1 (2)\n    deploy_hashes: Vec<String>,  // Vector of hex-encoded hashes\n    transfer_hashes: Vec<String> // Vector of hex-encoded hashes\n}\n```\n\n----------------------------------------\n\nTITLE: Installing Required Python Packages\nDESCRIPTION: Commands to install necessary Python packages (jq, supervisor, toml) in the virtual environment.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/versioned_docs/version-1.5.X/developers/dapps/setup-nctl.md#2025-04-22_snippet_10\n\nLANGUAGE: bash\nCODE:\n```\npip install jq\npip install supervisor\npip install toml\n```\n\n----------------------------------------\n\nTITLE: Installing Xcode Command Line Tools on macOS - Bash\nDESCRIPTION: Installs the necessary Apple developer command line utilities, which are required for compiling many dependencies. For macOS users only. Prompts the user for system password if required.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/versioned_docs/version-1.5.X/developers/prerequisites.md#2025-04-22_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\nxcode-select --install\n```\n\n----------------------------------------\n\nTITLE: Staking Tokens with JavaScript SDK\nDESCRIPTION: Demonstrates how to delegate CSPR tokens to a validator using the JavaScript SDK. This code loads the delegate.wasm contract, specifies delegation parameters including amount and validator public key, and deploys it to the network.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/versioned_docs/version-1.5.X/developers/dapps/sdk/client-library-usage.md#2025-04-22_snippet_20\n\nLANGUAGE: javascript\nCODE:\n```\nconst { CasperClient, Contracts, RuntimeArgs, CLValueBuilder, CLPublicKey } = require(\"casper-js-sdk\");\nconst fs = require(\"fs\");\n\nconst casperClient = new CasperClient(\"http://NODE_ADDRESS:7777/rpc\")\nconst contract = new Contracts.Contract(casperClient)\n\nconst contractWasm = new Uint8Array(fs.readFileSync(\"./casper-node/target/wasm32-unknown-unknown/release/delegate.wasm\").buffer);\n\nconst runtimeArguments = RuntimeArgs.fromMap({\n    \"amount\": CLValueBuilder.u512(500e9), // Minimum delegation amount: 500 CSPR\n    \"delegator\": keypair.publicKey,\n    \"validator\": CLPublicKey.fromHex(\"01e8c84f4fbb58d37991ef373c08043a45c44cd7f499453fa2bd3e141cc0113b3c\")\n});\n\nconst deploy = contract.install(\n    contractWasm,\n    runtimeArguments,\n    \"5000000000\", // Gas payment (5 CSPR)\n    keypair.publicKey,\n    \"casper\", // or \"casper-test\" for testnet\n    [keypair]\n);\n\n(async () => {\n    console.log(await casperClient.putDeploy(deploy));\n})();\n```\n\n----------------------------------------\n\nTITLE: Sample Network Status Query on Casper Testnet in Bash\nDESCRIPTION: Example command for querying the state of an account on the Casper Testnet using a specific state root hash.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/docs/resources/tokens/cep18/full-tutorial.md#2025-04-22_snippet_16\n\nLANGUAGE: bash\nCODE:\n```\ncasper-client query-global-state \\\n--key account-hash-<account-address> \\\n--node-address http://<HOST:PORT> \\\n--state-root-hash E5B679BD1562fE6257257F5f969A79482E8DCEBBD501501BfA6d5844b61cBE3f\n```\n\n----------------------------------------\n\nTITLE: Example Global State Update for Admin Generation (TOML)\nDESCRIPTION: This TOML snippet shows an example output of the global-state-update-gen tool when generating new admin accounts.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/versioned_docs/version-1.5.X/operators/setup-network/create-private.md#2025-04-22_snippet_25\n\nLANGUAGE: toml\nCODE:\n```\n[[entries]]\nkey = \"balance-97bbcc2425b3eda5149a893c6180b62f1472d5143bb1450d01c8e1e96be09f13\"\nvalue = \"AAIAAAABCgg=\"\n\n[[entries]]\nkey = \"uref-97bbcc2425b3eda5149a893c6180b62f1472d5143bb1450d01c8e1e96be09f13-007\"\nvalue = \"AAAAAAAJ\"\n\n[[entries]]\nkey = \"account-hash-ac2f4caa3e3ce1cd1dfb3d089854020b18a50cac49977d0a4c873c4d3d5a2409\"\nvalue = \"AawvTKo+POHNHfs9CJhUAgsYpQysSZd9CkyHPE09WiQJAAAAAJe7zCQls+2lFJqJPGGAti8UctUUO7FFDQHI4elr4J8TBwEAAACsL0yqPjzhzR37PQiYVAILGKUMrEmXfQpMhzxNPVokCQEBAQ==\"\n\n# total supply increases from 200000000000000000 to 200000000000000010\n[[entries]]\nkey = \"uref-f8475fd4125484be39a0793530f09a29d220ffda8e48387b3d2194ddfc22894e-007\"\nvalue = \"AAkAAAAICgAUu/CKxgII\"\n```\n\n----------------------------------------\n\nTITLE: Defining Withdraw Component JSON Schema\nDESCRIPTION: This JSON schema specifies the structure for writing a withdraw action in the Casper Network's global state. It requires a 'WriteWithdraw' property, structured as an array of 'WithdrawPurse' references. Inputs must match the 'WithdrawPurse' format, ensuring compatibility with the global state.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/condor/jsonrpc-comp/rpc-1.5/schema.json.md#2025-04-22_snippet_43\n\nLANGUAGE: JSON\nCODE:\n```\n{\"WriteWithdraw\": {\"type\": \"array\", \"items\": {\"$ref\": \"#/components/schemas/WithdrawPurse\"}}}\n```\n\n----------------------------------------\n\nTITLE: Sample Request for Querying Global State\nDESCRIPTION: An example of how to use the query-global-state command with specific node address, state root hash, and account hash values.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/docs/developers/cli/querying-global-state.md#2025-04-22_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\ncasper-client query-global-state \\\n--node-address http://localhost:11101 \\\n--state-root-hash 6b5849caa605acdc29564f303764396a27ef7a6b1a61f7b13109b129e7e70d81 \\\n--key account-hash-6a56c4eee172043975aea72221eaf09f3c3a24f09a379935e44c9979f1ae9463\n```\n\n----------------------------------------\n\nTITLE: Auction Info Response Structure\nDESCRIPTION: Example response from the state_get_auction_info method showing auction state data including validators, bids, and delegators.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/docs/developers/json-rpc/json-rpc-pos.md#2025-04-22_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"id\": 1,\n  \"jsonrpc\": \"2.0\",\n  \"result\": {\n    \"name\": \"state_get_auction_info_result\",\n    \"value\": {\n      \"api_version\": \"2.0.0\",\n      \"auction_state\": {\n        \"state_root_hash\": \"0b0b0b0b0b0b0b0b0b0b0b0b0b0b0b0b0b0b0b0b0b0b0b0b0b0b0b0b0b0b0b0b\",\n        \"block_height\": 10,\n        \"era_validators\": [\n          {\n            \"era_id\": 10,\n            \"validator_weights\": [\n              {\n                \"public_key\": \"01197f6b23e16c8532c6abc838facd5ea789be0c76b2920334039bfa8b3d368d61\",\n                \"weight\": \"10\"\n              }\n            ]\n          }\n        ],\n        \"bids\": [\n          {\n            \"public_key\": \"01197f6b23e16c8532c6abc838facd5ea789be0c76b2920334039bfa8b3d368d61\",\n            \"bid\": {\n              \"validator_public_key\": \"01197f6b23e16c8532c6abc838facd5ea789be0c76b2920334039bfa8b3d368d61\",\n              \"bonding_purse\": \"uref-fafafafafafafafafafafafafafafafafafafafafafafafafafafafafafafafa-007\",\n              \"staked_amount\": \"20\",\n              \"delegation_rate\": 0,\n              \"vesting_schedule\": null,\n              \"delegators\": [\n                {\n                  \"delegator_public_key\": \"014508a07aa941707f3eb2db94c8897a80b2c1197476b6de213ac273df7d86c4ff\",\n                  \"delegator\": {\n                    \"delegator_public_key\": \"014508a07aa941707f3eb2db94c8897a80b2c1197476b6de213ac273df7d86c4ff\",\n                    \"staked_amount\": \"10\",\n                    \"bonding_purse\": \"uref-fbfbfbfbfbfbfbfbfbfbfbfbfbfbfbfbfbfbfbfbfbfbfbfbfbfbfbfbfbfbfbfb-007\",\n                    \"validator_public_key\": \"01197f6b23e16c8532c6abc838facd5ea789be0c76b2920334039bfa8b3d368d61\",\n                    \"vesting_schedule\": null\n                  }\n                }\n              ],\n              \"inactive\": false\n            }\n          }\n        ]\n      }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Account Identifier with Public Key or Hash (JSON)\nDESCRIPTION: This JSON Schema snippet defines an account identifier that may be either a public key or an account hash. It references other schema definitions—PublicKey and AccountHash—using the '$ref' property and leverages 'anyOf' to allow for either form. This pattern is commonly used in APIs or data validation to provide flexibility for identifying accounts; dependencies include the referenced schema components and adherence to JSON Schema standards.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/condor/jsonrpc-comp/rpc-2.0/schema/AccountIdentifier.json.md#2025-04-22_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"description\": \"Identifier of an account.\",\n    \"anyOf\": [\n        {\n            \"description\": \"The public key of an account\",\n            \"allOf\": [\n                {\n                    \"$ref\": \"#/components/schemas/PublicKey\"\n                }\n            ]\n        },\n        {\n            \"description\": \"The account hash of an account\",\n            \"allOf\": [\n                {\n                    \"$ref\": \"#/components/schemas/AccountHash\"\n                }\n            ]\n        }\n    ]\n} \n```\n\n----------------------------------------\n\nTITLE: WebAssembly Memory Management Operations\nDESCRIPTION: Low-level implementation of memory management operations in WebAssembly text format, including pointer arithmetic, memory allocation and deallocation, and bit manipulation operations.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/versioned_docs/version-2.0.0/developers/json-rpc/json-rpc-transactional.md#2025-04-22_snippet_20\n\nLANGUAGE: wat\nCODE:\n```\n00360240200041002802d882403602c0010240024041064101200041c0016a200041c0006a419481c0002301410b6a2401230141f4034b0440000b10122301410b6b24012203450d0041cccd021008410020002802c0013602d882400c010b41aac70f1008200020002802402203280200360290020240024041801041042000419...\n```\n\n----------------------------------------\n\nTITLE: Installing Casper client\nDESCRIPTION: Install the Casper client, which can transmit transactions to a Casper network.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/versioned_docs/version-2.0.0/developers/prerequisites.md#2025-04-22_snippet_14\n\nLANGUAGE: bash\nCODE:\n```\ncargo install casper-client\n```\n\n----------------------------------------\n\nTITLE: Viewing Casper Network Transaction Storage Effects in JSON Format\nDESCRIPTION: This snippet shows the storage effects part of a Casper Network transaction. It includes operations on keys such as dictionaries, URefs, messages, and balances. Each entry represents a storage operation performed during transaction execution with its corresponding value or operation type.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/versioned_docs/version-2.0.0/developers/writing-onchain-code/emitting-contract-events.md#2025-04-22_snippet_11\n\nLANGUAGE: json\nCODE:\n```\n\"bytes\": \"2100000000212ffdd040b65495419f4057c8392930e410f7bf24baeec8de59a6117b63e45c0b20000000c1993c045f9e656b4bcb40639705d232cb6ecb4a2c6a04aeb33baffe9869cb9a0100000030\",\n\"parsed\": null\n}\n}\n}\n},\n{\n\"key\": \"dictionary-3344eae47d44ef595de8219a32c69e9ac51ee14f020bd5da24f899fd49d12abf\",\n\"kind\": {\n\"Write\": {\n\"CLValue\": {\n\"cl_type\": \"Any\",\n\"bytes\": \"08000000010000000000000005200000000c08f3df6e05e509000cd57646b98983481b8bcd46b98f0aae1a5abccc1e114f4000000032313266666464303430623635343935343139663430353763383339323933306534313066376266323462616565633864653539613631313762363365343563\",\n\"parsed\": null\n}\n}\n}\n},\n{\n\"key\": \"uref-cd0871a7e69b91a05dbf81068115e45380de3a35bd2258369e3a24b7958cd77f-000\",\n\"kind\": {\n\"Write\": {\n\"CLValue\": {\n\"cl_type\": \"U64\",\n\"bytes\": \"0100000000000000\",\n\"parsed\": 1\n}\n}\n}\n},\n{\n\"key\": \"uref-d950666b546fe7afcf123f833ba4166b395c03bdbfd5de86dab051af3c1cdac0-000\",\n\"kind\": \"Identity\"\n},\n{\n\"key\": \"message-topic-b51b0f9d94e5744af4dce6b4a9990c5f3e652c1a0a946e680e83f97d8846eff5-topic-name-5721a6d9d7a9afe5dfdb35276fb823bed0f825350e4d865a5ec0110c380de4e1\",\n\"kind\": \"Identity\"\n},\n{\n\"key\": \"message-b51b0f9d94e5744af4dce6b4a9990c5f3e652c1a0a946e680e83f97d8846eff5-topic-name-5721a6d9d7a9afe5dfdb35276fb823bed0f825350e4d865a5ec0110c380de4e1-0\",\n\"kind\": {\n\"Write\": {\n\"Message\": \"message-checksum-d4854042c69aac1bc64e6f9cb2e41f306fc106f79951429d1dfef56d638be3c0\"\n}\n}\n},\n{\n\"key\": \"message-topic-b51b0f9d94e5744af4dce6b4a9990c5f3e652c1a0a946e680e83f97d8846eff5-topic-name-5721a6d9d7a9afe5dfdb35276fb823bed0f825350e4d865a5ec0110c380de4e1\",\n\"kind\": {\n\"Write\": {\n\"MessageTopic\": {\n\"message_count\": 1,\n\"blocktime\": 1701221761024\n}\n}\n}\n},\n{\n\"key\": \"uref-b6c48cfa2fa090b71912b209638b33bbf8b670a8d8a1065d73b54c70f5cc414c-000\",\n\"kind\": \"Identity\"\n},\n{\n\"key\": \"deploy-09b90ada8b456e342f3209b3330c1d3bba0452d453c7f37106fed9799b280e26\",\n\"kind\": {\n\"Write\": {\n\"DeployInfo\": {\n\"deploy_hash\": \"09b90ada8b456e342f3209b3330c1d3bba0452d453c7f37106fed9799b280e26\",\n\"transfers\": [],\n\"from\": \"account-hash-212ffdd040b65495419f4057c8392930e410f7bf24baeec8de59a6117b63e45c\",\n\"source\": \"uref-cfe2039aa5f3eca8a00d3444c4421e2034b77330d614b0c47c47d6af09113861-007\",\n\"gas\": \"610139570\"\n}\n}\n}\n},\n{\n\"key\": \"addressable-entity-system-f4952351cd81d38e205cd31a938b802241b70ac539d0fba5c5d2e0dc825f8944\",\n\"kind\": \"Identity\"\n},\n{\n\"key\": \"addressable-entity-system-f4952351cd81d38e205cd31a938b802241b70ac539d0fba5c5d2e0dc825f8944\",\n\"kind\": \"Identity\"\n},\n{\n\"key\": \"addressable-entity-system-f4952351cd81d38e205cd31a938b802241b70ac539d0fba5c5d2e0dc825f8944\",\n\"kind\": \"Identity\"\n},\n{\n\"key\": \"package-42c6bbc82e3fc9dc4f890f507812a49c19aa998ed09b9d97996d9257e3c8c1c1\",\n\"kind\": \"Identity\"\n},\n{\n\"key\": \"addressable-entity-system-f4952351cd81d38e205cd31a938b802241b70ac539d0fba5c5d2e0dc825f8944\",\n\"kind\": \"Identity\"\n},\n{\n\"key\": \"balance-278862691b1d6698c02c82b302aa391f1cd10a3637e4a8c633b4560917bc607b\",\n\"kind\": \"Identity\"\n},\n{\n\"key\": \"addressable-entity-system-f4952351cd81d38e205cd31a938b802241b70ac539d0fba5c5d2e0dc825f8944\",\n\"kind\": \"Identity\"\n},\n{\n\"key\": \"account-hash-212ffdd040b65495419f4057c8392930e410f7bf24baeec8de59a6117b63e45c\",\n\"kind\": \"Identity\"\n},\n{\n\"key\": \"addressable-entity-account-a4cb74407b8da22b5dbf8cec4b2280fd2f2276bfeaa34ec64753071adf8960f5\",\n\"kind\": \"Identity\"\n},\n{\n\"key\": \"addressable-entity-system-f5a58fd26fb2200445eb04363affcc1240cb9e1882c6a86612de41e06e1082d1\",\n\"kind\": \"Identity\"\n},\n{\n\"key\": \"package-aabcd5869e1e47a6e66ca2430fcabbe9687241e55e0a070204b150771f7aef74\",\n\"kind\": \"Identity\"\n},\n{\n\"key\": \"addressable-entity-system-f5a58fd26fb2200445eb04363affcc1240cb9e1882c6a86612de41e06e1082d1\",\n\"kind\": \"Identity\"\n},\n{\n\"key\": \"balance-278862691b1d6698c02c82b302aa391f1cd10a3637e4a8c633b4560917bc607b\",\n\"kind\": \"Identity\"\n},\n{\n\"key\": \"balance-cfe2039aa5f3eca8a00d3444c4421e2034b77330d614b0c47c47d6af09113861\",\n\"kind\": \"Identity\"\n},\n{\n\"key\": \"balance-278862691b1d6698c02c82b302aa391f1cd10a3637e4a8c633b4560917bc607b\",\n\"kind\": {\n\"Write\": {\n\"CLValue\": {\n\"cl_type\": \"U512\",\n\"bytes\": \"04df4c7928\",\n\"parsed\": \"679038175\"\n}\n}\n}\n},\n{\n\"key\": \"balance-cfe2039aa5f3eca8a00d3444c4421e2034b77330d614b0c47c47d6af09113861\",\n\"kind\": {\n\"AddUInt512\": \"6820961825\"\n}\n},\n{\n\"key\": \"addressable-entity-system-f5a58fd26fb2200445eb04363affcc1240cb9e1882c6a86612de41e06e1082d1\",\n\"kind\": \"Identity\"\n},\n{\n\"key\": \"package-aabcd5869e1e47a6e66ca2430fcabbe9687241e55e0a070204b150771f7aef74\",\n\"kind\": \"Identity\"\n},\n{\n\"key\": \"addressable-entity-system-f5a58fd26fb2200445eb04363affcc1240cb9e1882c6a86612de41e06e1082d1\",\n\"kind\": \"Identity\"\n},\n{\n\"key\": \"balance-278862691b1d6698c02c82b302aa391f1cd10a3637e4a8c633b4560917bc607b\",\n\"kind\": \"Identity\"\n},\n{\n\"key\": \"balance-a3fceeee68671ef97338bbe16a31782a8e262b23c52116e0c73f02a1f25d14ac\",\n\"kind\": \"Identity\"\n},\n{\n\"key\": \"balance-278862691b1d6698c02c82b302aa391f1cd10a3637e4a8c633b4560917bc607b\",\n\"kind\": {\n\"Write\": {\n\"CLValue\": {\n\"cl_type\": \"U512\",\n\"bytes\": \"00\",\n```\n\n----------------------------------------\n\nTITLE: Casper Wallet Provider Implementation\nDESCRIPTION: JavaScript implementation for getting the Casper Wallet provider instance with timeout configuration\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/versioned_docs/version-1.5.X/developers/dapps/template-frontend.md#2025-04-22_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nconst REQUESTS_TIMEOUT_MS = 30 * 60 * 1000;\n\nexport const getProvider = () => {\n    let providerConstructor = window.CasperWalletProvider;\n    if (providerConstructor === undefined) {\n        alert(\"Casper Wallet extension is not installed!\");\n        return;\n    }\n    let provider = providerConstructor({\n        timeout: REQUESTS_TIMEOUT_MS\n    });\n    return provider;\n}\n```\n\n----------------------------------------\n\nTITLE: Sample Node Status Response\nDESCRIPTION: Example JSON response from a node status query showing various node metrics and information.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/versioned_docs/version-2.0.0/operators/setup/node-endpoints.md#2025-04-22_snippet_6\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"api_version\": \"1.4.15\",\n  \"chainspec_name\": \"casper-test\",\n  \"starting_state_root_hash\": \"4c3856bd6a95b566301b9da61aaf84589a51ee2980f3cc7bbef78e7745386955\",\n  \"peers\": [\n    {\n      \"node_id\": \"tls:007e..e14b\",\n      \"address\": \"89.58.52.245:35000\"\n    },\n    {\n      \"node_id\": \"tls:00eb..ac11\",\n      \"address\": \"65.109.17.120:35000\"\n    }\n  ],\n  \"last_added_block_info\": {\n    \"hash\": \"7acd2f48b573704e96eab54322f7e91a0624252baca3583ad2aae38229fe1715\",\n    \"timestamp\": \"2023-05-10T09:20:10.752Z\",\n    \"era_id\": 9085,\n    \"height\": 1711254,\n    \"state_root_hash\": \"1ac74071c1e76937c372c8d2ae22ea036a77578aad03821ec98021fdc1c5d06b\",\n    \"creator\": \"0106ca7c39cd272dbf21a86eeb3b36b7c26e2e9b94af64292419f7862936bca2ca\"\n  },\n  \"our_public_signing_key\": \"0107cba5b4826a87ddbe0ba8cda8064881b75882f05094c1a5f95e957512a3450e\",\n  \"round_length\": \"32s 768ms\",\n  \"next_upgrade\": null,\n  \"build_version\": \"1.4.15-039d438f2-casper-mainnet\",\n  \"uptime\": \"5days 13h 46m 54s 520ms\"\n}\n```\n\n----------------------------------------\n\nTITLE: Unsubscribing from Events in JavaScript\nDESCRIPTION: This JavaScript code shows how to unsubscribe from a specific event type on the Casper network. The unsubscribe method takes an event name parameter to specify which event to stop listening for.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/versioned_docs/version-1.5.X/developers/dapps/monitor-and-consume-events.md#2025-04-22_snippet_14\n\nLANGUAGE: javascript\nCODE:\n```\nes.unsubscribe(EventName.EVENT_NAME)\n```\n\n----------------------------------------\n\nTITLE: Defining Stored Versioned Contract Call Schema using JSON Schema - JSON\nDESCRIPTION: This snippet defines an object schema for invoking a specific version of a stored contract on the Casper network, referenced by its contract package hash. Required fields include the hex-encoded hash, entry point name, runtime arguments, and an optional explicit version. Dependencies include prior definitions for 'RuntimeArgs'. Expected input is a JSON object matching the schema for external API interaction; output is validation and serialization for contract invocation upon the network. Limitations include strict typing and reliance on full property compliance.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/condor/jsonrpc-comp/rpc-1.5/schema.json.md#2025-04-22_snippet_30\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"description\": \"Stored versioned contract referenced by its [`ContractPackageHash`], entry point and an instance of [`RuntimeArgs`].\",\n  \"type\": \"object\",\n  \"required\": [\n    \"StoredVersionedContractByHash\"\n  ],\n  \"properties\": {\n    \"StoredVersionedContractByHash\": {\n      \"type\": \"object\",\n      \"required\": [\n        \"args\",\n        \"entry_point\",\n        \"hash\"\n      ],\n      \"properties\": {\n        \"hash\": {\n          \"description\": \"Hex-encoded hash.\",\n          \"type\": \"string\"\n        },\n        \"version\": {\n          \"description\": \"An optional version of the contract to call. It will default to the highest enabled version if no value is specified.\",\n          \"type\": [\n            \"integer\",\n            \"null\"\n          ],\n          \"format\": \"uint32\",\n          \"minimum\": 0.0\n        },\n        \"entry_point\": {\n          \"description\": \"Entry point name.\",\n          \"type\": \"string\"\n        },\n        \"args\": {\n          \"description\": \"Runtime arguments.\",\n          \"allOf\": [\n            {\n              \"$ref\": \"#/components/schemas/RuntimeArgs\"\n            }\n          ]\n        }\n      },\n      \"additionalProperties\": false\n    }\n  },\n  \"additionalProperties\": false\n}\n```\n\n----------------------------------------\n\nTITLE: Near Public Method Implementation\nDESCRIPTION: Examples of implementing public methods in Near blockchain for both state modification and data retrieval.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/versioned_docs/version-2.0.0/resources/moving-to-casper.md#2025-04-22_snippet_4\n\nLANGUAGE: rust\nCODE:\n```\npub fn add_message(&mut self, ...) { }\n```\n\nLANGUAGE: rust\nCODE:\n```\npub fn get_messages(&self, from_index: Option<U128>, limit: Option<u64>) -> Vec<PostedMessage> { }\n```\n\n----------------------------------------\n\nTITLE: Monitoring Casper Node Synchronization Process - Bash\nDESCRIPTION: Runs the node_util.py watch command to show real-time status of the node's synchronization to the tip. It can display readiness, block height, peer count, and other live telemetry. Requires node_util.py and an operating Casper node. Expects watcher output in terminal.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/docs/operators/setup/install-node.md#2025-04-22_snippet_14\n\nLANGUAGE: bash\nCODE:\n```\n/etc/casper/node_util.py watch\n```\n\n----------------------------------------\n\nTITLE: Creating a Vite Project with React\nDESCRIPTION: Commands to install Vite globally and create a new React project using the Vite template system.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/versioned_docs/version-2.0.0/developers/dapps/template-frontend.md#2025-04-22_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nnpm install -g vite\nnpm create vite@latest\n```\n\n----------------------------------------\n\nTITLE: Providing Custom Metadata Example for CEP-78 - JSON\nDESCRIPTION: This snippet is a sample custom NFT metadata object, constructed according to a user-supplied JSON schema. Each property (e.g., 'deity_name', 'mythology') must match the required fields and types as dictated by the schema defined at install time. Used during the minting call when NFTMetadataKind is set to CustomValidated.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/docs/resources/tokens/cep78/modalities.md#2025-04-22_snippet_3\n\nLANGUAGE: json\nCODE:\n```\n{\\n  \\\"deity_name\\\": \\\"Baldur\\\",\\n  \\\"mythology\\\": \\\"Nordic\\\"\\n}\n```\n\n----------------------------------------\n\nTITLE: Serializing PublicKey Type\nDESCRIPTION: Defines `PublicKey` as a hex-encoded cryptographic public key, which includes an algorithm tag prefix. Its specific serialization format is detailed under the `PublicKey` primitive type definition.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/versioned_docs/version-2.0.0/concepts/serialization/types.md#2025-04-22_snippet_41\n\nLANGUAGE: text\nCODE:\n```\nHex-encoded cryptographic public key, including the algorithm tag prefix. Serialization can be found under [`PublicKey`](./primitives.md#clvalue-publickey).\n```\n\n----------------------------------------\n\nTITLE: Querying Dictionary Items via Seed URef Using Casper Client\nDESCRIPTION: Command-line example for querying a dictionary item using the Casper client's get-dictionary-item command. This approach directly uses the dictionary's seed URef rather than going through the contract's named keys.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/versioned_docs/version-1.5.X/concepts/dictionaries.md#2025-04-22_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\ncasper-client get-dictionary-item \\\n    --node-address http://localhost:11101 \\\n    --state-root-hash 50c34ccbe1315d58ce22bf7518071164d16acd20a1becb0b423293418297416d \\\n    --dictionary-item-key <String> \\\n    --seed-uref uref-90b4a8d936b881d3b45b73a102adb2b652181d75c76b7547ae9d1bb213f8db6b-007\n```\n\n----------------------------------------\n\nTITLE: Running Tests with Make Command in Casper Network\nDESCRIPTION: Simple make command to execute contract tests\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/versioned_docs/version-2.0.0/developers/writing-onchain-code/testing-contracts.md#2025-04-22_snippet_8\n\nLANGUAGE: bash\nCODE:\n```\nmake test\n```\n\n----------------------------------------\n\nTITLE: Viewing Ed25519 Public Key Contents\nDESCRIPTION: Command to display the hexadecimal-encoded public key for Ed25519 keys, which starts with '01' and is 66 bytes long.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/versioned_docs/version-1.5.X/concepts/accounts-and-keys.md#2025-04-22_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ncat ed25519-keys/public_key_hex\n```\n\n----------------------------------------\n\nTITLE: Query Global State Result Schema in JSON\nDESCRIPTION: Schema definition for the query_global_state endpoint response, showing examples of querying the global state with BlockHash and key parameters.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/condor/jsonrpc-comp/rpc-1.5/schema.json.md#2025-04-22_snippet_7\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"name\": \"query_global_state_example_result\",\n  \"value\": {\n    \"api_version\": \"1.5.6\",\n    \"block_header\": {\n      \"parent_hash\": \"0707070707070707070707070707070707070707070707070707070707070707\",\n      \"state_root_hash\": \"0808080808080808080808080808080808080808080808080808080808080808\",\n      \"body_hash\": \"cd502c5393a3c8b66d6979ad7857507c9baf5a8ba16ba99c28378d3a970fff42\",\n      \"random_bit\": true,\n      \"accumulated_seed\": \"ac979f51525cfd979b14aa7dc0737c5154eabe0db9280eceaa8dc8d2905b20d5\",\n      \"era_end\": {\n        \"era_report\": {\n          \"equivocators\": [\n            \"013b6a27bcceb6a42d62a3a8d02a6f0d73653215771de243a63ac048a18b59da29\"\n          ],\n          \"rewards\": [\n            {\n              \"validator\": \"018a88e3dd7409f195fd52db2d3cba5d72ca6709bf1d94121bf3748801b40f6f5c\",\n              \"amount\": 1000\n            }\n          ],\n          \"inactive_validators\": [\n            \"018139770ea87d175f56a35466c34c7ecccb8d8a91b4ee37a25df60f5b8fc9b394\"\n          ]\n        }\n      }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Installing Casper JavaScript SDK\nDESCRIPTION: Command to install the Casper JavaScript SDK using npm package manager\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/versioned_docs/version-1.5.X/developers/dapps/sdk/script-sdk.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm install casper-js-sdk@next --save\n```\n\n----------------------------------------\n\nTITLE: Example Contract Version Query Result\nDESCRIPTION: Example output showing the result of querying a contract's version. The output is a CLValue containing a U32 value of 2, indicating this is version 2 of the contract.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/docs/resources/beginner/upgrade-contract.md#2025-04-22_snippet_9\n\nLANGUAGE: rust\nCODE:\n```\n{\n  \"id\": 9084525900533244372,\n  \"jsonrpc\": \"2.0\",\n  \"result\": {\n    \"api_version\": \"1.4.13\",\n    \"block_header\": null,\n    \"merkle_proof\": \"[64874 hex chars]\",\n    \"stored_value\": {\n      \"CLValue\": {\n        \"bytes\": \"02000000\",\n        \"cl_type\": \"U32\",\n        \"parsed\": 2\n      }\n    }\n  }\n\n```\n\n----------------------------------------\n\nTITLE: Defining PricingMode Schema in JSON\nDESCRIPTION: JSON schema definition for PricingMode, which describes the pricing model for a transaction in the Casper Network. It includes definitions for both Classic and Fixed pricing modes, specifying the structure and properties of each.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/condor/jsonrpc-comp/rpc-2.0/schema.json.md#2025-04-22_snippet_34\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"description\": \"Pricing mode of a Transaction.\",\n  \"oneOf\": [\n    {\n      \"description\": \"The original payment model, where the creator of the transaction specifies how much they will pay, at what gas price.\",\n      \"type\": \"object\",\n      \"required\": [\n        \"Classic\"\n      ],\n      \"properties\": {\n        \"Classic\": {\n          \"type\": \"object\",\n          \"required\": [\n            \"gas_price_tolerance\",\n            \"payment_amount\",\n            \"standard_payment\"\n          ],\n          \"properties\": {\n            \"payment_amount\": {\n              \"description\": \"User-specified payment amount.\",\n              \"type\": \"integer\",\n              \"format\": \"uint64\",\n              \"minimum\": 0.0\n            },\n            \"gas_price_tolerance\": {\n              \"description\": \"User-specified gas_price tolerance (minimum 1). This is interpreted to mean \\\"do not include this transaction in a block if the current gas price is greater than this number\\\"\",\n              \"type\": \"integer\",\n              \"format\": \"uint8\",\n              \"minimum\": 0.0\n            },\n            \"standard_payment\": {\n              \"description\": \"Standard payment.\",\n              \"type\": \"boolean\"\n            }\n          },\n          \"additionalProperties\": false\n        }\n      },\n      \"additionalProperties\": false\n    },\n    {\n      \"description\": \"The cost of the transaction is determined by the cost table, per the transaction category.\",\n      \"type\": \"object\",\n      \"required\": [\n        \"Fixed\"\n      ],\n      \"properties\": {\n        \"Fixed\": {\n          \"type\": \"object\",\n          \"required\": [\n            \"gas_price_tolerance\"\n          ],\n          \"properties\": {\n            \"gas_price_tolerance\": {\n              \"description\": \"User-specified gas_price tolerance (minimum 1). This is interpreted to mean \\\"do not include this transaction in a block if the current gas price is greater than this number\\\"\",\n              \"type\": \"integer\",\n              \"format\": \"uint8\",\n              \"minimum\": 0.0\n            }\n          },\n          \"additionalProperties\": false\n        }\n      },\n      \"additionalProperties\": false\n    }\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Defining RPC Method Structure for Casper Node - JSON\nDESCRIPTION: Defines the full structure, summary, parameters, result schema, and example for the 'info_get_peers' RPC endpoint. This snippet leverages JSON Schema to enforce the shape and types of the response, specifying required fields and reference types. Dependencies include the JSON Schema standard, and input parameters are empty, with output providing an API version and a detailed peers list.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/condor/jsonrpc-comp/rpc-2.0/info_get_peers.json.md#2025-04-22_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"name\": \"info_get_peers\",\n  \"summary\": \"returns a list of peers connected to the node\",\n  \"params\": [],\n  \"result\": {\n    \"name\": \"info_get_peers_result\",\n    \"schema\": {\n      \"description\": \"Result for \\\"info_get_peers\\\" RPC response.\",\n      \"type\": \"object\",\n      \"required\": [\n        \"api_version\",\n        \"peers\"\n      ],\n      \"properties\": {\n        \"api_version\": {\n          \"description\": \"The RPC API version.\",\n          \"type\": \"string\"\n        },\n        \"peers\": {\n          \"description\": \"The node ID and network address of each connected peer.\",\n          \"$ref\": \"#/components/schemas/Peers\"\n        }\n      },\n      \"additionalProperties\": false\n    }\n  },\n  \"examples\": [\n    {\n      \"name\": \"info_get_peers_example\",\n      \"params\": [],\n      \"result\": {\n        \"name\": \"info_get_peers_example_result\",\n        \"value\": {\n          \"api_version\": \"2.0.0\",\n          \"peers\": [\n            {\n              \"node_id\": \"tls:0101..0101\",\n              \"address\": \"127.0.0.1:54321\"\n            }\n          ]\n        }\n      }\n    }\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Example Auction Info Response\nDESCRIPTION: Sample JSON response from the auction info query showing validator bids, delegation rates, rewards, and era validator weights.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/versioned_docs/version-2.0.0/operators/becoming-a-validator/bonding.md#2025-04-22_snippet_7\n\nLANGUAGE: json\nCODE:\n```\n{\n\"jsonrpc\": \"2.0\",\n\"result\": {\n \"bids\": [\n   {\n     \"bid\": {\n       \"bonding_purse\": \"uref-488a0bbc3c3729f5696965da7a3aeee83805392944e36157909da273255fdb85-007\",\n       \"delegation_rate\": 0,\n       \"delegators\": [],\n       \"release_era\": null,\n       \"reward\": \"93328432442428418861229954179737\",\n       \"staked_amount\": \"10000000000000000\"\n     },\n     \"public_key\": \"013f774a58f4d40bd9b6cce7e306e53646913860ef2a111d00f0fe7794010c4012\"\n   },\n   {\n     \"bid\": {\n       \"bonding_purse\": \"uref-14e128b099b0c3680100520226e6999b322989586cc22db0630db5ec1329f0a7-007\",\n       \"delegation_rate\": 10,\n       \"delegators\": [],\n       \"release_era\": null,\n       \"reward\": \"0\",\n       \"staked_amount\": \"9000000000000000\"\n     },\n     \"public_key\": \"01405133e73ef2946fe3a2d76a4c75d305a04ad6b969f3c4a8a0d27235eb260f87\"\n   },\n   {\n     \"bid\": {\n       \"bonding_purse\": \"uref-6c0bf8cee1c0749dd9766376910867a84b2e826eaf6c118fcb0224c7d8d229dd-007\",\n       \"delegation_rate\": 10,\n       \"delegators\": [],\n       \"release_era\": null,\n       \"reward\": \"266185120443441810685787\",\n       \"staked_amount\": \"100000000\"\n     },\n     \"public_key\": \"01524a5f3567d7b5ea17ca518c9d0320fb4a75a28a5eab58d06c755c388f20a19f\"\n   },\n   {\n     \"bid\": {\n       \"bonding_purse\": \"uref-3880b3daf95f962f57e6a4b1589564abf7deef58a1fb0753d1108316bba7b3d7-007\",\n       \"delegation_rate\": 10,\n       \"delegators\": [],\n       \"release_era\": null,\n       \"reward\": \"0\",\n       \"staked_amount\": \"9000000000000000\"\n     },\n     \"public_key\": \"01a6901408eda702a653805f50060bfe00d5e962747ee7133df64bd7bab50b4643\"\n   },\n   {\n     \"bid\": {\n       \"bonding_purse\": \"uref-5a777c9cd53456b49eecf25dcc13e12ddff4106175a69f8e24a7c9a4c135df0d-007\",\n       \"delegation_rate\": 0,\n       \"delegators\": [],\n       \"release_era\": null,\n       \"reward\": \"93328432442428418861229954179737\",\n       \"staked_amount\": \"10000000000000000\"\n     },\n     \"public_key\": \"01d62fc9b894218bfbe8eebcc4a28a1fc4cb3a5c6120bb0027207ba8214439929e\"\n   }\n ],\n \"block_height\": 318,\n \"era_validators\": [\n   {\n     \"era_id\": 20,\n     \"validator_weights\": [\n       {\n         \"public_key\": \"013f774a58f4d40bd9b6cce7e306e53646913860ef2a111d00f0fe7794010c4012\",\n         \"weight\": \"10000000000000000\"\n       },\n       {\n         \"public_key\": \"01405133e73ef2946fe3a2d76a4c75d305a04ad6b969f3c4a8a0d27235eb260f87\",\n         \"weight\": \"9000000000000000\"\n       },\n       {\n         \"public_key\": \"01524a5f3567d7b5ea17ca518c9d0320fb4a75a28a5eab58d06c755c388f20a19f\",\n         \"weight\": \"100000000\"\n       },\n       {\n         \"public_key\": \"01a6901408eda702a653805f50060bfe00d5e962747ee7133df64bd7bab50b4643\",\n         \"weight\": \"9000000000000000\"\n       },\n       {\n         \"public_key\": \"01d62fc9b894218bfbe8eebcc4a28a1fc4cb3a5c6120bb0027207ba8214439929e\",\n         \"weight\": \"10000000000000000\"\n       }\n     ]\n   },\n   {\n     \"era_id\": 21,\n     \"validator_weights\": [\n       {\n         \"public_key\": \"013f774a58f4d40bd9b6cce7e306e53646913860ef2a111d00f0fe7794010c4012\",\n         \"weight\": \"10000000000000000\"\n       },\n       {\n         \"public_key\": \"01405133e73ef2946fe3a2d76a4c75d305a04ad6b969f3c4a8a0d27235eb260f87\",\n         \"weight\": \"9000000000000000\"\n       },\n       {\n         \"public_key\": \"01524a5f3567d7b5ea17ca518c9d0320fb4a75a28a5eab58d06c755c388f20a19f\",\n         \"weight\": \"100000000\"\n       },\n       {\n         \"public_key\": \"01a6901408eda702a653805f50060bfe00d5e962747ee7133df64bd7bab50b4643\",\n         \"weight\": \"9000000000000000\"\n       },\n       {\n         \"public_key\": \"01d62fc9b894218bfbe8eebcc4a28a1fc4cb3a5c6120bb0027207ba8214439929e\",\n         \"weight\": \"10000000000000000\"\n       }\n     ]\n   },\n   {\n     \"era_id\": 22,\n     \"validator_weights\": [\n       {\n         \"public_key\": \"013f774a58f4d40bd9b6cce7e306e53646913860ef2a111d00f0fe7794010c4012\",\n         \"weight\": \"10000000000000000\"\n       },\n       {\n         \"public_key\": \"01405133e73ef2946fe3a2d76a4c75d305a04ad6b969f3c4a8a0d27235eb260f87\",\n         \"weight\": \"9000000000000000\"\n       },\n       {\n         \"public_key\": \"01524a5f3567d7b5ea17ca518c9d0320fb4a75a28a5eab58d06c755c388f20a19f\",\n         \"weight\": \"100000000\"\n       },\n       {\n         \"public_key\": \"01a6901408eda702a653805f50060bfe00d5e962747ee7133df64bd7bab50b4643\",\n         \"weight\": \"9000000000000000\"\n       },\n       {\n         \"public_key\": \"01d62fc9b894218bfbe8eebcc4a28a1fc4cb3a5c6120bb0027207ba8214439929e\",\n         \"weight\": \"10000000000000000\"\n       }\n     ]\n   },\n   {\n     \"era_id\": 23,\n     \"validator_weights\": [\n       {\n         \"public_key\": \"013f774a58f4d40bd9b6cce7e306e53646913860ef2a111d00f0fe7794010c4012\",\n         \"weight\": \"10000000000000000\"\n       },\n       {\n         \"public_key\": \"01405133e73ef2946fe3a2d76a4c75d305a04ad6b969f3c4a8a0d27235eb260f87\",\n         \"weight\": \"9000000000000000\"\n       },\n       {\n         \"public_key\": \"01524a5f3567d7b5ea17ca518c9d0320fb4a75a28a5eab58d06c755c388f20a19f\",\n         \"weight\": \"100000000\"\n       },\n       {\n         \"public_key\": \"01a6901408eda702a653805f50060bfe00d5e962747ee7133df64bd7bab50b4643\",\n         \"weight\": \"9000000000000000\"\n       },\n       {\n         \"public_key\": \"01d62fc9b894218bfbe8eebcc4a28a1fc4cb3a5c6120bb0027207ba8214439929e\",\n         \"weight\": \"10000000000000000\"\n       }\n     ]\n   }\n ],\n \"state_root_hash\": \"c16ba80ea200d786008f8100ea79f9cfeb8d7d5ee8b133eda5a50dcf1c7131e8\"\n},\n\"id\": -3624528661787095850\n}\n```\n\n----------------------------------------\n\nTITLE: Query Global State Response\nDESCRIPTION: Example JSON response from querying the global state showing the counter value.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/versioned_docs/version-1.5.X/resources/quick-start.md#2025-04-22_snippet_4\n\nLANGUAGE: json\nCODE:\n```\n{\n\"id\": 8523290678829319485,\n\"jsonrpc\": \"2.0\",\n\"result\": {\n   \"api_version\": \"1.4.6\",\n   \"block_header\": null,\n   \"merkle_proof\": \"[85716 hex chars]\",\n   \"stored_value\": {\n      \"CLValue\": {\n      \"bytes\": \"01000000\",\n      \"cl_type\": \"I32\",\n      \"parsed\": 0\n      }\n   }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Recording Token Transfer with WriteTransfer in Casper Network\nDESCRIPTION: This JSON shows a WriteTransfer transformation that records the details of a token transfer between accounts. It includes deploy hash, source and target accounts, URefs, amount transferred, gas used, and a unique transfer ID.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/versioned_docs/version-2.0.0/developers/cli/transfers/direct-token-transfer.md#2025-04-22_snippet_11\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"key\": \"transfer-0de7250864e67aa76626a844dcc931e615284a13a110df3f97cec9e3e97af405\",\n  \"transform\": {\n    \"WriteTransfer\": {\n      \"deploy_hash\": \"1f17a0bdeaaf71abd03492c854cdf97f746432751721ce555e95b9cefe641e3c\",\n      \"from\": \"account-hash-e70dbca48c2d31bc2d754e51860ceaa8a1a49dc627b20320b0ecee1b6d9ce655\",\n      \"to\": \"account-hash-1ed5a1c39bea93c105f2d22c965a84b205b36734a377d05dbb103b6bfaa595a7\",\n      \"source\": \"uref-11e6fc5354f61a004df98482376c45964b8b1557e8f2f13fb5f3adab5faa8be1-007\",\n      \"target\": \"uref-8294864177c2c1ec887a11dae095e487b5256ce6bd2a1f2740d0e4f28bd3251c-004\",\n      \"amount\": \"5000000000\",\n      \"gas\": \"0\",\n      \"id\": 11102023\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Cloning Casper Client Repository\nDESCRIPTION: This snippet demonstrates how to clone the Casper Client repository for local usage.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/src/pages/condor/setting-up-condor-local.md#2025-04-22_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\ngit clone https://github.com/casper-ecosystem/casper-client-rs.git\ncd casper-client-rs\n```\n\n----------------------------------------\n\nTITLE: Setting Temporary Open Files Limit\nDESCRIPTION: Command to temporarily set the nofile limit for an active casper-node process\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/versioned_docs/version-2.0.0/operators/setup/open-files.md#2025-04-22_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nsudo prlimit --nofile=64000 --pid=$(pgrep \"casper-node$\")`\n```\n\n----------------------------------------\n\nTITLE: Defining AddUInt128 Object\nDESCRIPTION: This schema defines an object for adding a `U128` value. It requires a `AddUInt128` property which references the `U128` schema. No additional properties are allowed.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/condor/jsonrpc-comp/rpc-1.5/schema/components.json.md#2025-04-22_snippet_19\n\nLANGUAGE: JSON\nCODE:\n```\n{\\n    \\\"description\\\": \\\"Adds the given `U128`.\\\",\\n    \\\"type\\\": \\\"object\\\",\\n    \\\"required\\\": [\\n        \\\"AddUInt128\\\"\\n    ],\\n    \\\"properties\\\": {\\n        \\\"AddUInt128\\\": {\\n            \\\"$ref\\\": \\\"#/components/schemas/U128\\\"\\n        }\\n    },\\n    \\\"additionalProperties\\\": false\\n}\n```\n\n----------------------------------------\n\nTITLE: Testing the Compiled Fungible Token Contract\nDESCRIPTION: This command runs tests to verify the correctness of the compiled contract.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/versioned_docs/version-2.0.0/resources/tokens/cep18/full-tutorial.md#2025-04-22_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\nmake test\n```\n\n----------------------------------------\n\nTITLE: Makefile Configuration for Contract Testing\nDESCRIPTION: Makefile script that builds contracts, creates a test WASM directory, copies WASM files, and runs cargo tests. It handles multiple contract versions and testing dependencies.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/versioned_docs/version-2.0.0/developers/writing-onchain-code/testing-contracts.md#2025-04-22_snippet_9\n\nLANGUAGE: bash\nCODE:\n```\ntest: build-contract\n\tmkdir -p tests/wasm\n\tcp contract-v1/target/wasm32-unknown-unknown/release/counter-v1.wasm tests/wasm\n\tcp contract-v2/target/wasm32-unknown-unknown/release/counter-v2.wasm tests/wasm\n\tcp counter-call/target/wasm32-unknown-unknown/release/counter-call.wasm tests/wasm\n\tcd tests && cargo test\n```\n\n----------------------------------------\n\nTITLE: Calling Contract Entry Points with JavaScript SDK\nDESCRIPTION: Demonstrates how to call an entry point on an existing smart contract using the JavaScript SDK. This code connects to a contract by hash, creates runtime arguments, and calls the 'update_msg' entry point with appropriate payment.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/versioned_docs/version-1.5.X/developers/dapps/sdk/client-library-usage.md#2025-04-22_snippet_23\n\nLANGUAGE: javascript\nCODE:\n```\nconst casperClient = new CasperClient(\"http://NODE_ADDRESS:7777/rpc\");\nconst contract = new Contracts.Contract(casperClient);\ncontract.setContractHash(\n\t\"hash-a3cac24aec9de1bbdb87083587b14d8aeffba5dfed27686512b7bb5dee60445d\"\n);\nconst runtimeArguments = RuntimeArgs.fromMap({\n  \"message\": CLValueBuilder.string(\"Hello world!\")\n})\nconst deploy = contract.callEntrypoint(\n  \"update_msg\",\n  runtimeArguments,\n  keypair.publicKey,\n  \"casper\", // or \"casper-test\" for Testnet\n  \"1000000000\", // 1 CSPR (10^9 Motes)\n  [keypair]\n);\n(async () => {\n  console.log(await casperClient.putDeploy(deploy))\n})();\n```\n\n----------------------------------------\n\nTITLE: Creating UpdateMessage Component File (Bash)\nDESCRIPTION: Creates a new file named `UpdateMessage.jsx` in the `src` directory. This file will contain the React component responsible for updating the message in the smart contract.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/docs/developers/dapps/template-frontend.md#2025-04-22_snippet_8\n\nLANGUAGE: bash\nCODE:\n```\ntouch src/UpdateMessage.jsx\n```\n\n----------------------------------------\n\nTITLE: Querying Global State for Token Allowance Results\nDESCRIPTION: This command queries global state to retrieve the token allowance result from the utility contract. It requires the 'result' URef from the utility contract's NamedKeys and the current state root hash.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/versioned_docs/version-1.5.X/resources/tokens/cep18/transfer.md#2025-04-22_snippet_11\n\nLANGUAGE: json\nCODE:\n```\ncasper-client query-global-state -n http://<node IP>:<PORT> \\\n// This is the previously identified `result` URef from the utility contract's `NamedKeys`\n--key uref-a46ad389b53715d9991a513c8ca48e1502facc4c563c0700a31e830c4cb8a7d4-007 \\\n--state-root-hash e64f877f65df26db74300bb175c244d589bd88a23b91abf9ceb73ac5e65e90f1\n```\n\n----------------------------------------\n\nTITLE: Defining CLType Enum Values for Casper Network in JSON Schema\nDESCRIPTION: JSON schema definition for Casper Network CLType enum values including primitive types (U8, U32, U64, U128, U256, U512), system types (Key, URef, PublicKey), and composite types (Option, List, ByteArray, Result, Map, Tuple variants).\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/condor/jsonrpc-comp/rpc-2.0/schema/components.json.md#2025-04-22_snippet_9\n\nLANGUAGE: JSON\nCODE:\n```\n{\n    \"type\": \"string\",\n    \"enum\": [\n        \"U8\"\n    ]\n},\n{\n    \"description\": \"`u32` primitive.\",\n    \"type\": \"string\",\n    \"enum\": [\n        \"U32\"\n    ]\n},\n{\n    \"description\": \"`u64` primitive.\",\n    \"type\": \"string\",\n    \"enum\": [\n        \"U64\"\n    ]\n},\n{\n    \"description\": \"[`U128`] large unsigned integer type.\",\n    \"type\": \"string\",\n    \"enum\": [\n        \"U128\"\n    ]\n},\n{\n    \"description\": \"[`U256`] large unsigned integer type.\",\n    \"type\": \"string\",\n    \"enum\": [\n        \"U256\"\n    ]\n},\n{\n    \"description\": \"[`U512`] large unsigned integer type.\",\n    \"type\": \"string\",\n    \"enum\": [\n        \"U512\"\n    ]\n},\n{\n    \"description\": \"`()` primitive.\",\n    \"type\": \"string\",\n    \"enum\": [\n        \"Unit\"\n    ]\n},\n{\n    \"description\": \"`String` primitive.\",\n    \"type\": \"string\",\n    \"enum\": [\n        \"String\"\n    ]\n},\n{\n    \"description\": \"[`Key`] system type.\",\n    \"type\": \"string\",\n    \"enum\": [\n        \"Key\"\n    ]\n},\n{\n    \"description\": \"[`URef`] system type.\",\n    \"type\": \"string\",\n    \"enum\": [\n        \"URef\"\n    ]\n},\n{\n    \"description\": \"[`PublicKey`](crate::PublicKey) system type.\",\n    \"type\": \"string\",\n    \"enum\": [\n        \"PublicKey\"\n    ]\n}\n```\n\n----------------------------------------\n\nTITLE: Retrieving Block Transfers with chain_get_block_transfers in JSON-RPC\nDESCRIPTION: This snippet shows how to use the chain_get_block_transfers method to get all successful native transfers within a specific block on the Casper network. It includes the request format with a block identifier parameter and demonstrates the expected response structure.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/versioned_docs/version-2.0.0/developers/json-rpc/json-rpc-informational.md#2025-04-22_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"id\": 1,\n  \"jsonrpc\": \"2.0\",\n  \"method\": \"chain_get_block_transfers\",\n  \"params\": [\n    {\n      \"name\": \"block_identifier\",\n      \"value\": {\n        \"Hash\": \"0707070707070707070707070707070707070707070707070707070707070707\"\n      }\n    }\n  ]\n}\n```\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"id\": 1,\n  \"jsonrpc\": \"2.0\",\n  \"result\": {\n    \"name\": \"chain_get_block_transfers_result\",\n    \"value\": {\n      \"api_version\": \"2.0.0\",\n      \"block_hash\": \"0707070707070707070707070707070707070707070707070707070707070707\",\n      \"transfers\": [\n        {\n          \"Version2\": {\n            \"transaction_hash\": {\n              \"Version1\": \"0101010101010101010101010101010101010101010101010101010101010101\"\n            },\n            \"from\": {\n              \"AccountHash\": \"account-hash-0202020202020202020202020202020202020202020202020202020202020202\"\n            },\n            \"to\": \"account-hash-0303030303030303030303030303030303030303030303030303030303030303\",\n            \"source\": \"uref-0a0a0a0a0a0a0a0a0a0a0a0a0a0a0a0a0a0a0a0a0a0a0a0a0a0a0a0a0a0a0a0a-007\",\n            \"target\": \"uref-1b1b1b1b1b1b1b1b1b1b1b1b1b1b1b1b1b1b1b1b1b1b1b1b1b1b1b1b1b1b1b1b-000\",\n            \"amount\": \"1000000000000\",\n            \"gas\": \"2500000000\",\n            \"id\": 999\n          }\n        }\n      ]\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Purse Identifier Schema with anyOf - JSON\nDESCRIPTION: This snippet defines a JSON schema supporting multiple methods for identifying a purse in the Casper Network. It leverages the 'anyOf' construct to allow specification either via public key, account hash, or URef, each referencing another schema component. Dependencies include schema definitions for PublicKey, AccountHash, and URef. Required parameters vary by identification method, and the schema enforces strict property validation with 'additionalProperties' set to false for each variant.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/condor/jsonrpc-comp/rpc-1.5/schema/PurseIdentifier.json.md#2025-04-22_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\\n    \\\"description\\\": \\\"Identifier of a purse.\\\",\\n    \\\"anyOf\\\": [\\n        {\\n            \\\"description\\\": \\\"The main purse of the account identified by this public key.\\\",\\n            \\\"type\\\": \\\"object\\\",\\n            \\\"required\\\": [\\n                \\\"main_purse_under_public_key\\\"\\n            ],\\n            \\\"properties\\\": {\\n                \\\"main_purse_under_public_key\\\": {\\n                    \\\"$ref\\\": \\\"#/components/schemas/PublicKey\\\"\\n                }\\n            },\\n            \\\"additionalProperties\\\": false\\n        },\\n        {\\n            \\\"description\\\": \\\"The main purse of the account identified by this account hash.\\\",\\n            \\\"type\\\": \\\"object\\\",\\n            \\\"required\\\": [\\n                \\\"main_purse_under_account_hash\\\"\\n            ],\\n            \\\"properties\\\": {\\n                \\\"main_purse_under_account_hash\\\": {\\n                    \\\"$ref\\\": \\\"#/components/schemas/AccountHash\\\"\\n                }\\n            },\\n            \\\"additionalProperties\\\": false\\n        },\\n        {\\n            \\\"description\\\": \\\"The purse identified by this URef.\\\",\\n            \\\"type\\\": \\\"object\\\",\\n            \\\"required\\\": [\\n                \\\"purse_uref\\\"\\n            ],\\n            \\\"properties\\\": {\\n                \\\"purse_uref\\\": {\\n                    \\\"$ref\\\": \\\"#/components/schemas/URef\\\"\\n                }\\n            },\\n            \\\"additionalProperties\\\": false\\n        }\\n    ]\\n}\n```\n\n----------------------------------------\n\nTITLE: Cloning Counter Contract Repository\nDESCRIPTION: Command to clone a repository containing an example of session code calling a contract on the Casper Network.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/versioned_docs/version-2.0.0/developers/writing-onchain-code/writing-session-code.md#2025-04-22_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\ngit clone https://github.com/casper-ecosystem/counter/\n```\n\n----------------------------------------\n\nTITLE: Defining NFT Contract Entry Points Schema in JSON\nDESCRIPTION: Comprehensive schema defining the contract entry points, arguments, return types and access modifiers for a Casper Network NFT implementation. Includes initialization parameters, token management functions, ownership controls and metadata handling.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/docs/developers/writing-onchain-code/emitting-contract-events.md#2025-04-22_snippet_5\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"Option\": \"Key\"\n},\n\"access\": \"Public\",\n\"entry_point_type\": \"AddressableEntity\"\n},\n{\n  \"name\": \"init\",\n  \"entry_point\": {\n    \"name\": \"init\",\n    \"args\": [\n      {\n        \"name\": \"collection_name\",\n        \"cl_type\": \"String\"\n      },\n      // Additional args omitted for brevity\n    ],\n    \"ret\": \"Unit\",\n    \"access\": \"Public\",\n    \"entry_point_type\": \"AddressableEntity\"\n  }\n}\n// Additional entry points omitted\n```\n\n----------------------------------------\n\nTITLE: Defining the Block Header Structure using JSON Schema\nDESCRIPTION: This JSON schema defines the structure of a block header object for the Casper Network. It specifies required properties such as `parent_hash`, `state_root_hash`, `timestamp`, and `proposer`, along with their data types, formats, and constraints. It references other component schemas like `BlockHash`, `Digest`, `Timestamp`, `EraId`, `ProtocolVersion`, and `PublicKey` for complex types, ensuring data validation and consistency.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/condor/jsonrpc-comp/rpc-2.0/schema/BlockHeaderV2.json.md#2025-04-22_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"description\": \"The header portion of a block.\",\n    \"type\": \"object\",\n    \"required\": [\n        \"accumulated_seed\",\n        \"body_hash\",\n        \"current_gas_price\",\n        \"era_id\",\n        \"height\",\n        \"parent_hash\",\n        \"proposer\",\n        \"protocol_version\",\n        \"random_bit\",\n        \"state_root_hash\",\n        \"timestamp\"\n    ],\n    \"properties\": {\n        \"parent_hash\": {\n            \"description\": \"The parent block's hash.\",\n            \"allOf\": [\n                {\n                    \"$ref\": \"#/components/schemas/BlockHash\"\n                }\n            ]\n        },\n        \"state_root_hash\": {\n            \"description\": \"The root hash of global state after the deploys in this block have been executed.\",\n            \"allOf\": [\n                {\n                    \"$ref\": \"#/components/schemas/Digest\"\n                }\n            ]\n        },\n        \"body_hash\": {\n            \"description\": \"The hash of the block's body.\",\n            \"allOf\": [\n                {\n                    \"$ref\": \"#/components/schemas/Digest\"\n                }\n            ]\n        },\n        \"random_bit\": {\n            \"description\": \"A random bit needed for initializing a future era.\",\n            \"type\": \"boolean\"\n        },\n        \"accumulated_seed\": {\n            \"description\": \"A seed needed for initializing a future era.\",\n            \"allOf\": [\n                {\n                    \"$ref\": \"#/components/schemas/Digest\"\n                }\n            ]\n        },\n        \"era_end\": {\n            \"description\": \"The `EraEnd` of a block if it is a switch block.\",\n            \"anyOf\": [\n                {\n                    \"$ref\": \"#/components/schemas/EraEndV2\"\n                },\n                {\n                    \"type\": \"null\"\n                }\n            ]\n        },\n        \"timestamp\": {\n            \"description\": \"The timestamp from when the block was proposed.\",\n            \"allOf\": [\n                {\n                    \"$ref\": \"#/components/schemas/Timestamp\"\n                }\n            ]\n        },\n        \"era_id\": {\n            \"description\": \"The era ID in which this block was created.\",\n            \"allOf\": [\n                {\n                    \"$ref\": \"#/components/schemas/EraId\"\n                }\n            ]\n        },\n        \"height\": {\n            \"description\": \"The height of this block, i.e. the number of ancestors.\",\n            \"type\": \"integer\",\n            \"format\": \"uint64\",\n            \"minimum\": 0\n        },\n        \"protocol_version\": {\n            \"description\": \"The protocol version of the network from when this block was created.\",\n            \"allOf\": [\n                {\n                    \"$ref\": \"#/components/schemas/ProtocolVersion\"\n                }\n            ]\n        },\n        \"proposer\": {\n            \"description\": \"The public key of the validator which proposed the block.\",\n            \"allOf\": [\n                {\n                    \"$ref\": \"#/components/schemas/PublicKey\"\n                }\n            ]\n        },\n        \"current_gas_price\": {\n            \"description\": \"The gas price of the era\",\n            \"type\": \"integer\",\n            \"format\": \"uint8\",\n            \"minimum\": 0\n        },\n        \"last_switch_block_hash\": {\n            \"description\": \"The most recent switch block hash.\",\n            \"anyOf\": [\n                {\n                    \"$ref\": \"#/components/schemas/BlockHash\"\n                },\n                {\n                    \"type\": \"null\"\n                }\n            ]\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Response from chain_get_era_info_by_switch_block in JSON-RPC\nDESCRIPTION: Example JSON-RPC response from the chain_get_era_info_by_switch_block method showing era summary information including seigniorage allocations for validators and delegators.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/versioned_docs/version-2.0.0/developers/json-rpc/json-rpc-pos.md#2025-04-22_snippet_5\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"id\": 1,\n  \"jsonrpc\": \"2.0\",\n  \"result\": {\n    \"name\": \"chain_get_era_info_by_switch_block_result\",\n    \"value\": {\n      \"api_version\": \"2.0.0\",\n      \"era_summary\": {\n        \"block_hash\": \"0744fcb72af43c5cc372039bc5a8bfee48808a9ce414acc0d6338a628c20eb42\",\n        \"era_id\": 42,\n        \"stored_value\": {\n          \"EraInfo\": {\n            \"seigniorage_allocations\": [\n              {\n                \"Delegator\": {\n                  \"delegator_public_key\": \"01e1b46a25baa8a5c28beb3c9cfb79b572effa04076f00befa57eb70b016153f18\",\n                  \"validator_public_key\": \"012a1732addc639ea43a89e25d3ad912e40232156dcaa4b9edfc709f43d2fb0876\",\n                  \"amount\": \"1000\"\n                }\n              },\n              {\n                \"Validator\": {\n                  \"validator_public_key\": \"012a1732addc639ea43a89e25d3ad912e40232156dcaa4b9edfc709f43d2fb0876\",\n                  \"amount\": \"2000\"\n                }\n              }\n            ]\n          }\n        },\n        \"state_root_hash\": \"0808080808080808080808080808080808080808080808080808080808080808\",\n        \"merkle_proof\": \"01000000006ef2e0949ac76e55812421f755abe129b6244fe7168b77f47a72536147614625016ef2e0949ac76e55812421f755abe129b6244fe7168b77f47a72536147614625000000003529cde5c621f857f75f3810611eb4af3f998caaa9d4a3413cf799f99c67db0307010000006ef2e0949ac76e55812421f755abe129b6244fe7168b77f47a7253614761462501010102000000006e06000000000074769d28aac597a36a03a932d4b43e4f10bf0403ee5c41dd035102553f5773631200b9e173e8f05361b681513c14e25e3138639eb03232581db7557c9e8dbbc83ce94500226a9a7fe4f2b7b88d5103a4fc7400f02bf89c860c9ccdd56951a2afe9be0e0267006d820fb5676eb2960e15722f7725f3f8f41030078f8b2e44bf0dc03f71b176d6e800dc5ae9805068c5be6da1a90b2528ee85db0609cc0fb4bd60bbd559f497a98b67f500e1e3e846592f4918234647fca39830b7e1e6ad6f5b7a99b39af823d82ba1873d000003000000010186ff500f287e9b53f823ae1582b1fa429dfede28015125fd233a31ca04d5012002015cc42669a55467a1fdf49750772bfc1aed59b9b085558eb81510e9b015a7c83b0301e3cf4a34b1db6bfa58808b686cb8fe21ebe0c1bcbcee522649d2b135fe510fe3\"\n      }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Contract Wasm Hash Schema in JSON\nDESCRIPTION: This snippet outlines a JSON schema object that documents a string property representing the hash address of a contract's wasm. It is typically used for schema validation in API specifications or contract documentation. The 'description' field details the property's intent, while the 'type' field enforces the value to be a string. No additional dependencies are required; the schema assumes use within JSON Schema-compatible tools. Input is a string representing the hash, output is validation or documentation compliance. Limitations: does not enforce format constraints beyond the type.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/condor/jsonrpc-comp/rpc-2.0/schema/ByteCodeHash.json.md#2025-04-22_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"description\": \"The hash address of the contract wasm\",\n    \"type\": \"string\"\n}\n```\n\n----------------------------------------\n\nTITLE: Staging Protocol Upgrades on Testnet - Bash\nDESCRIPTION: Gives the Bash command for staging a protocol upgrade on the Casper Testnet by specifying the casper-test.conf config file. Like the Mainnet version, it utilizes node_util.py under the 'casper' user account. Dependencies include Python and the configuration of paths to node_util.py and casper-test.conf. Outputs are staged protocol files and readiness for automatic upgrade at the next activation point.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/docs/operators/setup/upgrade.md#2025-04-22_snippet_2\n\nLANGUAGE: Bash\nCODE:\n```\nsudo -u casper /etc/casper/node_util.py stage_protocols casper-test.conf\n```\n\n----------------------------------------\n\nTITLE: Expected Output from Environment Preparation\nDESCRIPTION: The expected console output when the WebAssembly target is successfully added to the Rust toolchain.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/versioned_docs/version-1.5.X/resources/tokens/cep18/full-tutorial.md#2025-04-22_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nrustup target add wasm32-unknown-unknown\ninfo: component 'rust-std' for target 'wasm32-unknown-unknown' is up to date\n```\n\n----------------------------------------\n\nTITLE: Deriving Account Hash from Public Key using Casper Client (Bash)\nDESCRIPTION: Calculates and displays the account hash corresponding to a given public key file using the `casper-client account-address` command. The account hash is an alternative identifier for querying account state.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/docs/resources/quick-start.md#2025-04-22_snippet_15\n\nLANGUAGE: bash\nCODE:\n```\ncasper-client account-address --public-key [PATH_TO_PUBLIC_KEY]\n```\n\n----------------------------------------\n\nTITLE: Defining Array Schema for PublicKeyAndDelegator in JSON\nDESCRIPTION: Defines a JSON schema specifically for an array type. Each element within this array is expected to conform to the structure defined by the `PublicKeyAndDelegator` schema. This is typically used to represent a collection of delegators associated with a validator.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/condor/jsonrpc-comp/rpc-2.0/schema/components.json.md#2025-04-22_snippet_34\n\nLANGUAGE: json\nCODE:\n```\n\"Array_of_PublicKeyAndDelegator\": {\n    \"type\": \"array\",\n    \"items\": {\n        \"$ref\": \"#/components/schemas/PublicKeyAndDelegator\"\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Named Keys in Casper Contract\nDESCRIPTION: Shows how to create named keys for storing contract data. Creates a key-value pair for storing the counter value that can be referenced later in the contract.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/versioned_docs/version-2.0.0/developers/writing-onchain-code/simple-contract.md#2025-04-22_snippet_11\n\nLANGUAGE: rust\nCODE:\n```\n    // In the named keys of the counter contract, add a key for the count.\n    let mut counter_named_keys = NamedKeys::new();\n    let key_name = String::from(COUNT_KEY);\n    counter_named_keys.insert(key_name, count_start.into());\n```\n\n----------------------------------------\n\nTITLE: Defining Stored Versioned Contract by Name - JSON\nDESCRIPTION: This snippet defines a JSON schema for a stored versioned contract referenced by a named key existing in a signer's account. Required properties include 'args', 'entry_point', and 'name', with support for versioning.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/condor/jsonrpc-comp/rpc-1.5/schema/components.json.md#2025-04-22_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"description\": \"Stored versioned contract referenced by a named key existing in the signer's account context, entry point and an instance of [`RuntimeArgs`].\",\n  \"type\": \"object\",\n  \"required\": [\n    \"StoredVersionedContractByName\"\n  ],\n  \"properties\": {\n    \"StoredVersionedContractByName\": {\n      \"type\": \"object\",\n      \"required\": [\n        \"args\",\n        \"entry_point\",\n        \"name\"\n      ],\n      \"properties\": {\n        \"name\": {\n          \"description\": \"Named key.\",\n          \"type\": \"string\"\n        },\n        \"version\": {\n          \"description\": \"An optional version of the contract to call. It will default to the highest enabled version if no value is specified.\",\n          \"type\": [\n            \"integer\",\n            \"null\"\n          ],\n          \"format\": \"uint32\",\n          \"minimum\": 0.0\n        },\n        \"entry_point\": {\n          \"description\": \"Entry point name.\",\n          \"type\": \"string\"\n        },\n        \"args\": {\n          \"description\": \"Runtime arguments.\",\n          \"allOf\": [\n            {\n              \"$ref\": \"#/components/schemas/RuntimeArgs\"\n            }\n          ]\n        }\n      },\n      \"additionalProperties\": false\n    }\n  },\n  \"additionalProperties\": false\n}\n```\n\n----------------------------------------\n\nTITLE: Account Configuration JSON Response Example\nDESCRIPTION: Example JSON output from querying an account's global state after multi-signature configuration. It shows the account hash, action thresholds set to 2, and associated keys each with weight 1.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/versioned_docs/version-1.5.X/resources/advanced/two-party-multi-sig.md#2025-04-22_snippet_4\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"id\": 1126043166167626077,\n    \"jsonrpc\": \"2.0\",\n    \"result\": {\n        \"api_version\": \"1.0.0\",\n        \"merkle_proof\": \"2226 chars\",\n        \"stored_value\": {\n            \"Account\": {\n                \"account_hash\": \"account-hash-dc88a1819381c5ebbc3432e5c1d94df18cdcd7253b85259eeebe0ec8661bb84a\",\n                \"action_thresholds\": {\n                    \"deployment\": 2,\n                    \"key_management\": 2\n                },\n                \"associated_keys\": [\n                    {\n                        \"account_hash\": \"account-hash-12dee9fe535bfd8fd335fce1ba1f972f26bb60029a303b310d85419357d18f51\",\n                        \"weight\": 1\n                    },\n                    {\n                        \"account_hash\": \"account-hash-dc88a1819381c5ebbc3432e5c1d94df18cdcd7253b85259eeebe0ec8661bb84a\",\n                        \"weight\": 1\n                    }\n                ],\n                \"main_purse\": \"uref-74b20e9722d3f087f9dc431e9f0fcc6a803c256e005fa45b64a101512001cb78-007\",\n                \"named_keys\": []\n            }\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining ExecutableDeployItem Variants Schema - JSON\nDESCRIPTION: Describes the ExecutableDeployItem schema, which supports multiple types for representing executable deploys in the Casper system. The oneOf construct allows distinguishing between raw Wasm modules, stored contracts by hash, and by named keys, each with their own required properties and fields. The schema relies on pre-defined component types and is critical for validating and instantiating deploy payloads. Requires strict compliance to variant structure; only one variant may be present per instance.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/condor/jsonrpc-comp/rpc-2.0/schema.json.md#2025-04-22_snippet_29\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"ExecutableDeployItem\": {\n    \"description\": \"The executable component of a [`Deploy`].\",\n    \"oneOf\": [\n      {\n        \"description\": \"Executable specified as raw bytes that represent Wasm code and an instance of [`RuntimeArgs`].\",\n        \"type\": \"object\",\n        \"required\": [\n          \"ModuleBytes\"\n        ],\n        \"properties\": {\n          \"ModuleBytes\": {\n            \"type\": \"object\",\n            \"required\": [\n              \"args\",\n              \"module_bytes\"\n            ],\n            \"properties\": {\n              \"module_bytes\": {\n                \"description\": \"Hex-encoded raw Wasm bytes.\",\n                \"allOf\": [\n                  { \"$ref\": \"#/components/schemas/Bytes\" }\n                ]\n              },\n              \"args\": {\n                \"description\": \"Runtime arguments.\",\n                \"allOf\": [\n                  { \"$ref\": \"#/components/schemas/RuntimeArgs\" }\n                ]\n              }\n            },\n            \"additionalProperties\": false\n          }\n        },\n        \"additionalProperties\": false\n      },\n      {\n        \"description\": \"Stored contract referenced by its [`AddressableEntityHash`], entry point and an instance of [`RuntimeArgs`].\",\n        \"type\": \"object\",\n        \"required\": [\n          \"StoredContractByHash\"\n        ],\n        \"properties\": {\n          \"StoredContractByHash\": {\n            \"type\": \"object\",\n            \"required\": [\n              \"args\",\n              \"entry_point\",\n              \"hash\"\n            ],\n            \"properties\": {\n              \"hash\": {\n                \"description\": \"Hex-encoded contract hash.\",\n                \"allOf\": [\n                  { \"$ref\": \"#/components/schemas/AddressableEntityHash\" }\n                ]\n              },\n              \"entry_point\": {\n                \"description\": \"Name of an entry point.\",\n                \"type\": \"string\"\n              },\n              \"args\": {\n                \"description\": \"Runtime arguments.\",\n                \"allOf\": [\n                  { \"$ref\": \"#/components/schemas/RuntimeArgs\" }\n                ]\n              }\n            },\n            \"additionalProperties\": false\n          }\n        },\n        \"additionalProperties\": false\n      },\n      {\n        \"description\": \"Stored contract referenced by a named key existing in the signer's account context, entry point and an instance of [`RuntimeArgs`].\",\n        \"type\": \"object\",\n        \"required\": [\n          \"StoredContractByName\"\n        ],\n        \"properties\": {\n          \"StoredContractByName\": {\n            \"type\": \"object\",\n            \"required\": [\n              \"args\",\n              // ...\n            ]\n          }\n        }\n      }\n    ]\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Displaying Casper Client Key Generation Help\nDESCRIPTION: Command to show the help documentation for the casper-client keygen command, providing information about available key generation options.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/versioned_docs/version-2.0.0/operators/setup/basic-node-configuration.md#2025-04-22_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\nsudo -u casper casper-client keygen --help\n```\n\n----------------------------------------\n\nTITLE: Installing Global State Update Generator (Shell)\nDESCRIPTION: This command installs the global-state-update-gen tool, which is used for generating global state updates for network upgrades.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/versioned_docs/version-1.5.X/operators/setup-network/create-private.md#2025-04-22_snippet_24\n\nLANGUAGE: sh\nCODE:\n```\n$ cargo install --git https://github.com/casper-network/casper-node/ --tag private-1.4.6 global-state-update-gen\n$ global-state-update-gen --help\n```\n\n----------------------------------------\n\nTITLE: Deploying Delegate Contract in Python\nDESCRIPTION: Python code to deploy the delegate contract using the pycspr library. It shows how to create deploy parameters, set up the delegation, and submit the deploy.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/docs/developers/dapps/sdk/client-library-usage.md#2025-04-22_snippet_20\n\nLANGUAGE: python\nCODE:\n```\nimport pycspr\n\nvalidator_public_key = pycspr.factory.accounts.create_public_key_from_account_key(\n    bytes.fromhex(\"01e8c84f4fbb58d37991ef373c08043a45c44cd7f499453fa2bd3e141cc0113b3c\")\n)\n\ndeploy_params = pycspr.create_deploy_parameters(\n    account = keypair, # Only the public key is used, see `create_deploy_parameters`\n    chain_name = \"casper\" # or \"casper-test\" for testnet\n)\n\ndeploy = pycspr.create_validator_delegation(\n    params = deploy_params,\n    amount = int(500e9), # Minimum delegation amount: 500 CSPR\n    public_key_of_delegator = keypair,\n    public_key_of_validator = validator_public_key,\n    path_to_wasm = \"./casper-node/target/wasm32-unknown-unknown/release/delegate.wasm\"\n)\n\ndeploy.approve(keypair)\nclient.send_deploy(deploy)\nprint(deploy.hash.hex())\n```\n\n----------------------------------------\n\nTITLE: Executing Session Code in Casper Test Function\nDESCRIPTION: This code snippet shows how to execute session code within a Casper test function. It includes creating an execution request and invoking the execution engine.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/versioned_docs/version-2.0.0/developers/writing-onchain-code/testing-session-code.md#2025-04-22_snippet_5\n\nLANGUAGE: rust\nCODE:\n```\nlet execute_request =\n    ExecuteRequestBuilder::standard(*DEFAULT_ACCOUNT_ADDR, CONTRACT_WASM, runtime_args)\n        .build();\nbuilder.exec(execute_request).expect_success().commit();\n```\n\n----------------------------------------\n\nTITLE: Setting Environment Variables for Casper Network Testing\nDESCRIPTION: Commands to set up environment variables specifying the node address and chain name for testing a private Casper network. These variables are used by subsequent client commands.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/docs/operators/setup-network/create-private.md#2025-04-22_snippet_12\n\nLANGUAGE: sh\nCODE:\n```\nexport NODE_ADDR=http://18.224.190.213:7777\nexport CHAIN_NAME=\"private-test\"\n```\n\n----------------------------------------\n\nTITLE: Retrieving Authorization Keys Using Casper SDK in Rust\nDESCRIPTION: This snippet demonstrates how to use the Casper SDK's runtime API in Rust to retrieve all current deploy authorization keys. The function list_authorization_keys returns a set of account hashes representing signers of the transaction. This is typically used inside contract entry points to inspect deployment context. No additional dependencies are required beyond the standard Casper contract API.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/docs/resources/advanced/list-auth-keys-tutorial.md#2025-04-22_snippet_0\n\nLANGUAGE: rust\nCODE:\n```\nlet authorization_keys = runtime::list_authorization_keys();\n```\n\n----------------------------------------\n\nTITLE: Installing pkg-config on MacOS\nDESCRIPTION: Command to install pkg-config utility on MacOS using Homebrew.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/versioned_docs/version-1.5.X/developers/dapps/setup-nctl.md#2025-04-22_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nbrew install pkg-config\n```\n\n----------------------------------------\n\nTITLE: JSON-RPC Request for Casper Deploy Information\nDESCRIPTION: This JSON-RPC request example shows how to structure a request to retrieve information about a specific deploy on the Casper network. The method 'info_get_deploy' requires the 'deploy_hash' and an option to exclude finalized approvals. This request is integral for communicating with Casper nodes via JSON-RPC protocol.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/versioned_docs/version-1.5.X/developers/cli/transfers/direct-token-transfer.md#2025-04-22_snippet_6\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"jsonrpc\": \"2.0\",\n  \"method\": \"info_get_deploy\",\n  \"params\": {\n    \"deploy_hash\": \"1f17a0bdeaaf71abd03492c854cdf97f746432751721ce555e95b9cefe641e3c\",\n    \"finalized_approvals\": false\n  },\n  \"id\": -3447643973713335073\n}\n```\n\n----------------------------------------\n\nTITLE: Generating Secp256k1 Keys using Casper Client\nDESCRIPTION: Commands to create ECDSA keys using the Casper command-line client with the secp256k1 algorithm.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/versioned_docs/version-2.0.0/concepts/accounts-and-keys.md#2025-04-22_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nmkdir secp256k1-keys\ncasper-client keygen -a secp256k1 secp256k1-keys/\ntree secp256k1-keys/\n```\n\n----------------------------------------\n\nTITLE: Verifying Era Info using Casper Client (Shell)\nDESCRIPTION: This command retrieves era information to verify that validator stakes do not increase on each switch block.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/versioned_docs/version-1.5.X/operators/setup-network/create-private.md#2025-04-22_snippet_23\n\nLANGUAGE: sh\nCODE:\n```\ncasper-client get-era-info -n $NODE_ADDR -b 153\n```\n\n----------------------------------------\n\nTITLE: Setting Up Casper Package Repository\nDESCRIPTION: Commands to configure the Casper package repository and GPG keys for package management.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/versioned_docs/version-2.0.0/operators/setup/install-node.md#2025-04-22_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nsudo mkdir -m 0755 -p /etc/apt/keyrings/\nsudo curl https://repo.casper.network/casper-repo-pubkey.gpg --output /etc/apt/keyrings/casper-repo-pubkey.gpg\necho \"deb [arch=amd64 signed-by=/etc/apt/keyrings/casper-repo-pubkey.gpg] https://repo.casper.network/releases focal main\" | sudo tee -a /etc/apt/sources.list.d/casper.list\nsudo apt update\n```\n\n----------------------------------------\n\nTITLE: Example JSON Output from Node /status Endpoint\nDESCRIPTION: Provides a sample JSON response obtained from querying the node's `/status` RPC endpoint (typically on port 8888). This output is used to verify if the node is synchronized with the network by checking fields like `last_added_block_info.era_id` and `last_added_block_info.height` against a known reference node. It also shows other node information like API version, connected peers, and build version.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/versioned_docs/version-1.5.X/operators/setup/joining.md#2025-04-22_snippet_3\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"api_version\": \"1.4.3\",\n  \"chainspec_name\": \"casper-test\",\n  \"starting_state_root_hash\": \"e2218b6bdb8137a178f242e9de24ef5db06af7925e8e4c65fa82d41df38f4576\",\n  \"peers\": [\n    {\n      \"node_id\": \"tls:0097..b253\",\n      \"address\": \"18.163.249.168:35000\"\n    },\n    ...\n    ...\n    ...\n    {\n      \"node_id\": \"tls:ff95..c014\",\n      \"address\": \"93.186.201.14:35000\"\n    }\n  ],\n  \"last_added_block_info\": {\n    \"hash\": \"8280de05cb34071f276fbe7c69a07cb325ddd373f685877911238b614bdcc5b1\",\n    \"timestamp\": \"2022-01-04T15:33:08.224Z\",\n    \"era_id\": 3240,\n    \"height\": 430162,\n    \"state_root_hash\": \"ec4ff5c4d0a9021984b56e2b6de4a57188101c24e09b765c3fee740353690076\",\n    \"creator\": \"01ace6578907bfe6eba3a618e863bbe7274284c88e405e2857be80dd094726a223\"\n  },\n  \"our_public_signing_key\": \"01cb41ee07d1827e243588711d45040fe46402bf3901fb550abfd08d1341700270\",\n  \"round_length\": null,\n  \"next_upgrade\": null,\n  \"build_version\": \"1.4.3-a44bed1fd-casper-mainnet\",\n  \"uptime\": \"25days 1h 48m 22s 47ms\"\n}\n```\n\n----------------------------------------\n\nTITLE: Response for account_put_transaction in JSON-RPC\nDESCRIPTION: Example of an account_put_transaction response. It includes the API version and the transaction hash, which is the primary identifier of the transaction within the Casper network.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/versioned_docs/version-2.0.0/developers/json-rpc/json-rpc-transactional.md#2025-04-22_snippet_3\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"id\": 1,\n  \"jsonrpc\": \"2.0\",\n  \"result\": {\n    \"name\": \"account_put_transaction_result\",\n    \"value\": {\n      \"api_version\": \"2.0.0\",\n      \"transaction_hash\": {\n        \"Version1\": \"f5582cb81a5abda63ebaa4edb3b05210ecbd63ffb8dd17bfbeb3b867f4014468\"\n      }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Casper Network Transaction Pricing Modes using JSON Schema\nDESCRIPTION: This JSON schema defines the possible pricing models for a transaction on the Casper Network. It uses `oneOf` to allow either \"Classic\" (user-specified payment amount and gas tolerance), \"Fixed\" (cost table-based with gas tolerance), or \"Reserved\" (pre-paid receipt, future use). The schema details the required properties and data types for each mode, including payment amounts, gas price tolerance, and receipt digests.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/condor/jsonrpc-comp/rpc-2.0/schema/PricingMode.json.md#2025-04-22_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"description\": \"Pricing mode of a Transaction.\",\n    \"oneOf\": [\n        {\n            \"description\": \"The original payment model, where the creator of the transaction specifies how much they will pay, at what gas price.\",\n            \"type\": \"object\",\n            \"required\": [\n                \"Classic\"\n            ],\n            \"properties\": {\n                \"Classic\": {\n                    \"type\": \"object\",\n                    \"required\": [\n                        \"gas_price_tolerance\",\n                        \"payment_amount\",\n                        \"standard_payment\"\n                    ],\n                    \"properties\": {\n                        \"payment_amount\": {\n                            \"description\": \"User-specified payment amount.\",\n                            \"type\": \"integer\",\n                            \"format\": \"uint64\",\n                            \"minimum\": 0\n                        },\n                        \"gas_price_tolerance\": {\n                            \"description\": \"User-specified gas_price tolerance (minimum 1). This is interpreted to mean \\\"do not include this transaction in a block if the current gas price is greater than this number\\\"\",\n                            \"type\": \"integer\",\n                            \"format\": \"uint8\",\n                            \"minimum\": 0\n                        },\n                        \"standard_payment\": {\n                            \"description\": \"Standard payment.\",\n                            \"type\": \"boolean\"\n                        }\n                    },\n                    \"additionalProperties\": false\n                }\n            },\n            \"additionalProperties\": false\n        },\n        {\n            \"description\": \"The cost of the transaction is determined by the cost table, per the transaction category.\",\n            \"type\": \"object\",\n            \"required\": [\n                \"Fixed\"\n            ],\n            \"properties\": {\n                \"Fixed\": {\n                    \"type\": \"object\",\n                    \"required\": [\n                        \"gas_price_tolerance\"\n                    ],\n                    \"properties\": {\n                        \"gas_price_tolerance\": {\n                            \"description\": \"User-specified gas_price tolerance (minimum 1). This is interpreted to mean \\\"do not include this transaction in a block if the current gas price is greater than this number\\\"\",\n                            \"type\": \"integer\",\n                            \"format\": \"uint8\",\n                            \"minimum\": 0\n                        }\n                    },\n                    \"additionalProperties\": false\n                }\n            },\n            \"additionalProperties\": false\n        },\n        {\n            \"description\": \"The payment for this transaction was previously reserved, as proven by the receipt hash (this is for future use, not currently implemented).\",\n            \"type\": \"object\",\n            \"required\": [\n                \"Reserved\"\n            ],\n            \"properties\": {\n                \"Reserved\": {\n                    \"type\": \"object\",\n                    \"required\": [\n                        \"receipt\"\n                    ],\n                    \"properties\": {\n                        \"receipt\": {\n                            \"description\": \"Pre-paid receipt.\",\n                            \"allOf\": [\n                                {\n                                    \"$ref\": \"#/components/schemas/Digest\"\n                                }\n                            ]\n                        }\n                    },\n                    \"additionalProperties\": false\n                }\n            },\n            \"additionalProperties\": false\n        }\n    ]\n}\n```\n\n----------------------------------------\n\nTITLE: Chain Get Era Info Response Schema Definition\nDESCRIPTION: JSON schema defining the response structure for the chain_get_era_info_by_switch_block RPC endpoint. Includes era summary data with delegator and validator details.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/condor/jsonrpc-comp/rpc-1.5/schema.json.md#2025-04-22_snippet_23\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"api_version\": \"1.5.6\",\n  \"era_summary\": {\n    \"block_hash\": \"13c2d7a68ecdd4b74bf4393c88915c836c863fc4bf11d7f2bd930a1bbccacdcb\",\n    \"era_id\": 42,\n    \"stored_value\": {\n      \"EraInfo\": {\n        \"seigniorage_allocations\": [...]\n      }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Querying Contract Package State in Casper Network\nDESCRIPTION: This command retrieves information about a contract package, including the latest contract hash and version, using the contract package hash.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/versioned_docs/version-1.5.X/developers/cli/querying-global-state.md#2025-04-22_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\ncasper-client query-global-state \\\n  --node-address http://localhost:11101 \\\n  --key hash-76a8c3daa6d6ac799ce9f46d82ac98efb271d2d64b517861ec89a06051ef019e \\\n  --state-root-hash 763e737cf55a298d54bcdfb4ee55526538a1a086128914b9cc25ccbdebbbb966\n```\n\n----------------------------------------\n\nTITLE: Staging Casper Node Protocols using node_util.py (Bash)\nDESCRIPTION: Executes the `node_util.py` script as the `casper` user to download, extract, and configure all currently released `casper-node` protocol versions. Requires specifying the network configuration file (e.g., `casper.conf` for Mainnet, `casper-test.conf` for Testnet).\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/versioned_docs/version-1.5.X/operators/setup/basic-node-configuration.md#2025-04-22_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nsudo -u casper /etc/casper/node_util.py stage_protocols <NETWORK_CONFIG>\n```\n\n----------------------------------------\n\nTITLE: Building the Authorization Keys Tutorial Project (Bash)\nDESCRIPTION: This shell snippet provides commands to clone the Casper tutorials repository, navigate to the example directory, and build test binaries. Prerequisites include having make and Rust installed, and network access to GitHub. The commands ensure all dependencies are downloaded and test suites are ready to run.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/docs/resources/advanced/list-auth-keys-tutorial.md#2025-04-22_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\ngit clone https://github.com/casper-ecosystem/tutorials-example-wasm\ncd tutorials-example-wasm/authorization-keys-example\nmake prepare\nmake test\n```\n\n----------------------------------------\n\nTITLE: Storage and Basic OpCode Costs Configuration\nDESCRIPTION: Configuration values for storage costs and basic operation codes in the Casper Network, measured in motes. These values are typically defined in chainspec.toml.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/docs/developers/cli/opcode-costs.md#2025-04-22_snippet_0\n\nLANGUAGE: toml\nCODE:\n```\ngas_per_byte = 1117587\n\n# Basic OpCode costs\nbit = 300\nadd = 210\nmul = 240\ndiv = 320\nload = 2500\nstore = 4700\nconst = 110\nlocal = 390\nglobal = 390\ninteger_comparison = 250\nconversion = 420\nunreachable = 270\nnop = 200\ncurrent_memory = 290\ngrow_memory = 240000\n```\n\n----------------------------------------\n\nTITLE: Deploying Contract to Casper Network\nDESCRIPTION: Command to deploy the compiled smart contract to the Casper Testnet using casper-client CLI, including node address, chain name, and session arguments.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/versioned_docs/version-1.5.X/resources/advanced/cross-contract.md#2025-04-22_snippet_11\n\nLANGUAGE: bash\nCODE:\n```\ncasper-client put-deploy \\\n    --node-address http://136.243.187.84:7777 \\\n    --chain-name casper-test \\\n    --secret-key ./keys/secret_key.pem \\\n    --payment-amount 20000000000 \\\n    --session-path ./contract/target/wasm32-unknown-unknown/release/contract.wasm \\\n    --session-arg \"message:string='hello world'\"\n```\n\n----------------------------------------\n\nTITLE: Cloning Casper Counter Contract Repository Using Git - Bash\nDESCRIPTION: This snippet clones the Casper counter contract repository from GitHub using git. Requires git installed and network access. It creates a local copy of the repository, which contains smart contract source code and supporting files for further development and deployment steps.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/docs/resources/beginner/counter/walkthrough.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ngit clone https://github.com/casper-ecosystem/counter\n```\n\n----------------------------------------\n\nTITLE: Configuring CEP-18 Test Modules in Rust\nDESCRIPTION: Configuration in lib.rs to set up the test modules for the CEP-18 token standard. This allows running the tests using the 'make test' command.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/versioned_docs/version-2.0.0/resources/tokens/cep18/tests.md#2025-04-22_snippet_7\n\nLANGUAGE: rust\nCODE:\n```\n#[cfg(test)]\nmod allowance;\n#[cfg(test)]\nmod install;\n#[cfg(test)]\nmod mint_and_burn;\n#[cfg(test)]\nmod transfer;\n#[cfg(test)]\nmod utility;\n```\n\n----------------------------------------\n\nTITLE: Installing Casper .NET SDK via dotnet CLI\nDESCRIPTION: Command to install the Casper Network SDK package using the dotnet CLI tool, compatible with Windows, Mac, and Linux.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/versioned_docs/version-2.0.0/developers/dapps/sdk/csharp-sdk.md#2025-04-22_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\ndotnet add package Casper.Network.SDK\n```\n\n----------------------------------------\n\nTITLE: Installing Casper JS SDK\nDESCRIPTION: Command to install the Casper JavaScript SDK as a project dependency, which is required for interacting with the Casper network.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/versioned_docs/version-2.0.0/developers/dapps/template-frontend.md#2025-04-22_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\nnpm install casper-js-sdk\n```\n\n----------------------------------------\n\nTITLE: Installing Casper Development Tools\nDESCRIPTION: Installation of Casper-specific development tools including cargo-casper and casper-client.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/docs/developers/prerequisites.md#2025-04-22_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\ncargo install cargo-casper\n```\n\nLANGUAGE: bash\nCODE:\n```\nrustup update\n```\n\nLANGUAGE: bash\nCODE:\n```\ncargo-casper --version\n```\n\nLANGUAGE: bash\nCODE:\n```\ncargo install casper-client\n```\n\nLANGUAGE: bash\nCODE:\n```\ncasper-client --version\n```\n\n----------------------------------------\n\nTITLE: Invalid Authorization Test\nDESCRIPTION: Test demonstrating contract installation failure with invalid authorization keys.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/versioned_docs/version-2.0.0/resources/advanced/list-auth-keys-tutorial.md#2025-04-22_snippet_7\n\nLANGUAGE: rust\nCODE:\n```\nlet session_code = PathBuf::from(CONTRACT_WASM);\nlet session_args = RuntimeArgs::new();\n\nlet deploy_item = DeployItemBuilder::new()\n    .with_empty_payment_bytes(runtime_args! {ARG_AMOUNT => *DEFAULT_PAYMENT})\n    .with_authorization_keys(&[*DEFAULT_ACCOUNT_ADDR, account_addr_1])\n    .with_address(*DEFAULT_ACCOUNT_ADDR)\n    .with_session_code(session_code, session_args)\n    .build();\n\nlet execute_request = ExecuteRequestBuilder::from_deploy_item(deploy_item).build();\nbuilder.exec(execute_request).commit().expect_failure();\nlet error = builder.get_error().expect(\"must have error\");\nassert_eq!(error.to_string(), \"Authorization failure: not authorized.\");\n```\n\n----------------------------------------\n\nTITLE: Block Header Schema Definition - JSON\nDESCRIPTION: JSON Schema for block header structures in Casper Network. Includes versioned variants (V1 and V2) of block headers with validation rules for required fields and data types.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/condor/jsonrpc-comp/rpc-2.0/schema.json.md#2025-04-22_snippet_83\n\nLANGUAGE: json\nCODE:\n```\n\"BlockHeader\": {\n  \"description\": \"The versioned header portion of a block. It encapsulates different variants of the BlockHeader struct.\",\n  \"oneOf\": [...]\n}\n```\n\n----------------------------------------\n\nTITLE: Querying Admin Metrics Endpoint - Bash\nDESCRIPTION: This snippet provides the HTTP URL for accessing the Sidecar's administrative metrics, typically exposed on port 18887. It can be queried with any HTTP client to retrieve metrics for monitoring and operational insight. The actual port may vary depending on configuration.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/docs/operators/setup/casper-sidecar.md#2025-04-22_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\nhttp://localhost:PORT/metrics/\n```\n\n----------------------------------------\n\nTITLE: Defining BlockSyncStatus Schema in OpenAPI\nDESCRIPTION: Defines the schema for the synchronization status of an individual block, including the block hash, optional height, and current acquisition state.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/condor/jsonrpc-comp/rpc-2.0/schema.json.md#2025-04-22_snippet_96\n\nLANGUAGE: json\nCODE:\n```\n\"BlockSyncStatus\": {\n  \"description\": \"The status of syncing an individual block.\",\n  \"type\": \"object\",\n  \"required\": [\n    \"acquisition_state\",\n    \"block_hash\"\n  ],\n  \"properties\": {\n    \"block_hash\": {\n      \"description\": \"The block hash.\",\n      \"allOf\": [\n        {\n          \"$ref\": \"#/components/schemas/BlockHash\"\n        }\n      ]\n    },\n    \"block_height\": {\n      \"description\": \"The height of the block, if known.\",\n      \"type\": [\n        \"integer\",\n        \"null\"\n      ],\n      \"format\": \"uint64\",\n      \"minimum\": 0.0\n    },\n    \"acquisition_state\": {\n      \"description\": \"The state of acquisition of the data associated with the block.\",\n      \"type\": \"string\"\n    }\n  },\n  \"additionalProperties\": false\n}\n```\n\n----------------------------------------\n\nTITLE: Sample JSON-RPC info_get_deploy Response - JSON\nDESCRIPTION: This snippet shows a detailed JSON-RPC response structure returned from a Casper node after a successful info_get_deploy query. It includes deploy header, payment and session structures, approvals, and a comprehensive execution_results array. The response reflects the finalized status of the deploy, affected account balances, and transform operations applied; clients parse this to extract transfers, block hashes, and result data.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/docs/developers/cli/transfers/direct-token-transfer.md#2025-04-22_snippet_7\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"jsonrpc\": \"2.0\",\n  \"result\": {\n    \"api_version\": \"1.5.3\",\n    \"deploy\": {\n      \"hash\": \"1f17a0bdeaaf71abd03492c854cdf97f746432751721ce555e95b9cefe641e3c\",\n      \"header\": {\n        \"account\": \"0154d828baafa6858b92919c4d78f26747430dcbecb9aa03e8b44077dc6266cabf\",\n        \"timestamp\": \"2023-10-12T14:59:40.760Z\",\n        \"ttl\": \"30m\",\n        \"gas_price\": 1,\n        \"body_hash\": \"ea7e6a6cbdd4d761827cb627e162896bee3e771beda000550615c9b4fafa3a2d\",\n        \"dependencies\": [],\n        \"chain_name\": \"casper-test\"\n      },\n      \"payment\": {\n        \"ModuleBytes\": {\n          \"module_bytes\": \"\",\n          \"args\": [\n            [\n              \"amount\",\n              {\n                \"cl_type\": \"U512\",\n                \"bytes\": \"0400e1f505\",\n                \"parsed\": \"100000000\"\n              }\n            ]\n          ]\n        }\n      },\n      \"session\": {\n        \"Transfer\": {\n          \"args\": [\n            [\n              \"amount\",\n              {\n                \"cl_type\": \"U512\",\n                \"bytes\": \"0500f2052a01\",\n                \"parsed\": \"5000000000\"\n              }\n            ],\n            [\n              \"target\",\n              {\n                \"cl_type\": \"PublicKey\",\n                \"bytes\": \"01360af61b50cdcb7b92cffe2c99315d413d34ef77fadee0c105cc4f1d4120f986\",\n                \"parsed\": \"01360af61b50cdcb7b92cffe2c99315d413d34ef77fadee0c105cc4f1d4120f986\"\n              }\n            ],\n            [\n              \"id\",\n              {\n                \"cl_type\": {\n                  \"Option\": \"U64\"\n                },\n                \"bytes\": \"014767a90000000000\",\n                \"parsed\": 11102023\n              }\n            ]\n          ]\n        }\n      },\n      \"approvals\": [\n        {\n          \"signer\": \"0154d828baafa6858b92919c4d78f26747430dcbecb9aa03e8b44077dc6266cabf\",\n          \"signature\": \"01e53cb742ed13ff4f0584a3da0f22f5942a33e010965adf640c91204ae4bc7436f1e5534d338ffa117d193295214816445439781229d24a372085c316eac5e305\"\n        }\n      ]\n    },\n    \"execution_results\": [\n      {\n        \"block_hash\": \"aac51dad028ba8b3d6fec86a39252bbc4285d513fd57a8af4696ab5390ac5c2b\",\n        \"result\": {\n          \"Success\": {\n            \"effect\": {\n              \"operations\": [],\n              \"transforms\": [\n                {\n                  \"key\": \"hash-8cf5e4acf51f54eb59291599187838dc3bc234089c46fc6ca8ad17e762ae4401\",\n                  \"transform\": \"Identity\"\n                },\n                {\n                  \"key\": \"account-hash-1ed5a1c39bea93c105f2d22c965a84b205b36734a377d05dbb103b6bfaa595a7\",\n                  \"transform\": \"Identity\"\n                },\n                {\n                  \"key\": \"account-hash-1ed5a1c39bea93c105f2d22c965a84b205b36734a377d05dbb103b6bfaa595a7\",\n                  \"transform\": \"Identity\"\n                },\n                {\n                  \"key\": \"hash-8cf5e4acf51f54eb59291599187838dc3bc234089c46fc6ca8ad17e762ae4401\",\n                  \"transform\": \"Identity\"\n                },\n                {\n                  \"key\": \"hash-8cf5e4acf51f54eb59291599187838dc3bc234089c46fc6ca8ad17e762ae4401\",\n                  \"transform\": \"Identity\"\n                },\n                {\n                  \"key\": \"hash-624dbe2395b9d9503fbee82162f1714ebff6b639f96d2084d26d944c354ec4c5\",\n                  \"transform\": \"Identity\"\n                },\n                {\n                  \"key\": \"hash-8cf5e4acf51f54eb59291599187838dc3bc234089c46fc6ca8ad17e762ae4401\",\n                  \"transform\": \"Identity\"\n                },\n                {\n                  \"key\": \"hash-010c3fe81b7b862e50c77ef9a958a05bfa98444f26f96f23d37a13c96244cfb7\",\n                  \"transform\": \"Identity\"\n                },\n                {\n                  \"key\": \"hash-010c3fe81b7b862e50c77ef9a958a05bfa98444f26f96f23d37a13c96244cfb7\",\n                  \"transform\": \"Identity\"\n                },\n                {\n                  \"key\": \"hash-9824d60dc3a5c44a20b9fd260a412437933835b52fc683d8ae36e4ec2114843e\",\n                  \"transform\": \"Identity\"\n                },\n                {\n                  \"key\": \"hash-010c3fe81b7b862e50c77ef9a958a05bfa98444f26f96f23d37a13c96244cfb7\",\n                  \"transform\": \"Identity\"\n                },\n                {\n                  \"key\": \"balance-11e6fc5354f61a004df98482376c45964b8b1557e8f2f13fb5f3adab5faa8be1\",\n                  \"transform\": \"Identity\"\n                },\n                {\n                  \"key\": \"balance-98d945f5324f865243b7c02c0417ab6eac361c5c56602fd42ced834a1ba201b6\",\n                  \"transform\": \"Identity\"\n                },\n                {\n                  \"key\": \"balance-11e6fc5354f61a004df98482376c45964b8b1557e8f2f13fb5f3adab5faa8be1\",\n                  \"transform\": {\n                    \"WriteCLValue\": {\n                      \"cl_type\": \"U512\",\n                      \"bytes\": \"06621c3e660301\",\n                      \"parsed\": \"1114111876194\"\n                    }\n                  }\n                },\n                {\n                  \"key\": \"balance-98d945f5324f865243b7c02c0417ab6eac361c5c56602fd42ced834a1ba201b6\",\n                  \"transform\": {\n                    \"AddUInt512\": \"100000000\"\n                  }\n                },\n                {\n                  \"key\": \"hash-8cf5e4acf51f54eb59291599187838dc3bc234089c46fc6ca8ad17e762ae4401\",\n                  \"transform\": \"Identity\"\n                },\n                {\n                  \"key\": \"account-hash-1ed5a1c39bea93c105f2d22c965a84b205b36734a377d05dbb103b6bfaa595a7\",\n                  \"transform\": \"Identity\"\n                },\n                {\n                  \"key\": \"account-hash-1ed5a1c39bea93c105f2d22c965a84b205b36734a377d05dbb103b6bfaa595a7\",\n                  \"transform\": \"Identity\"\n                },\n                {\n                  \"key\": \"hash-8cf5e4acf51f54eb59291599187838dc3bc234089c46fc6ca8ad17e762ae4401\",\n                  \"transform\": \"Identity\"\n                },\n                {\n                  \"key\": \"hash-8cf5e4acf51f54eb59291599187838dc3bc234089c46fc6ca8ad17e762ae4401\",\n                  \"transform\": \"Identity\"\n                },\n                {\n                  \"key\": \"hash-624dbe2395b9d9503fbee82162f1714ebff6b639f96d2084d26d944c354ec4c5\",\n                  \"transform\": \"Identity\"\n                },\n                {\n                  \"key\": \"hash-8cf5e4acf51f54eb59291599187838dc3bc234089c46fc6ca8ad17e762ae4401\",\n                  \"transform\": \"Identity\"\n                },\n                {\n                  \"key\": \"hash-010c3fe81b7b862e50c77ef9a958a05bfa98444f26f96f23d37a13c96244cfb7\",\n                  \"transform\": \"Identity\"\n                },\n                {\n                  \"key\": \"hash-010c3fe81b7b862e50c77ef9a958a05bfa98444f26f96f23d37a13c96244cfb7\",\n                  \"transform\": \"Identity\"\n                },\n                {\n                  \"key\": \"hash-9824d60dc3a5c44a20b9fd260a412437933835b52fc683d8ae36e4ec2114843e\",\n                  \"transform\": \"Identity\"\n                },\n                {\n                  \"key\": \"hash-010c3fe81b7b862e50c77ef9a958a05bfa98444f26f96f23d37a13c96244cfb7\",\n                  \"transform\": \"Identity\"\n                },\n                {\n                  \"key\": \"balance-11e6fc5354f61a004df98482376c45964b8b1557e8f2f13fb5f3adab5faa8be1\",\n                  \"transform\": \"Identity\"\n                },\n                {\n                  \"key\": \"balance-98d945f5324f865243b7c02c0417ab6eac361c5c56602fd42ced834a1ba201b6\",\n                  \"transform\": \"Identity\"\n                },\n                {\n                  \"key\": \"balance-11e6fc5354f61a004df98482376c45964b8b1557e8f2f13fb5f3adab5faa8be1\",\n                  \"transform\": {\n                    \"WriteCLValue\": {\n                      \"cl_type\": \"U512\",\n                      \"bytes\": \"06621c3e660301\",\n                      \"parsed\": \"1114111876194\"\n                    }\n                  }\n                },\n                {\n                  \"key\": \"balance-98d945f5324f865243b7c02c0417ab6eac361c5c56602fd42ced834a1ba201b6\",\n                  \"transform\": {\n                    \"AddUInt512\": \"100000000\"\n                  }\n                },\n                {\n                  \"key\": \"hash-010c3fe81b7b862e50c77ef9a958a05bfa98444f26f96f23d37a13c96244cfb7\",\n                  \"transform\": \"Identity\"\n                },\n                {\n                  \"key\": \"hash-010c3fe81b7b862e50c77ef9a958a05bfa98444f26f96f23d37a13c96244cfb7\",\n                  \"transform\": \"Identity\"\n                },\n                {\n                  \"key\": \"hash-9824d60dc3a5c44a20b9fd260a412437933835b52fc683d8ae36e4ec2114843e\",\n                  \"transform\": \"Identity\"\n                }\n\n```\n\n----------------------------------------\n\nTITLE: Running Usage Example for Casper Client via npm - JavaScript\nDESCRIPTION: Executes the usage example script for the Casper-based NFT contract using npm. This command triggers the JavaScript code located under the client-js/examples directory, testing the smart contract's mint, transfer, and burn functionalities. Requires Node.js, npm, and dependencies already installed; command must be run in the project root.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/versioned_docs/version-2.0.0/resources/tokens/cep78/js-tutorial.md#2025-04-22_snippet_7\n\nLANGUAGE: JavaScript\nCODE:\n```\nnpm run example:usage\n```\n\n----------------------------------------\n\nTITLE: Installing casper-node-launcher using apt (Bash)\nDESCRIPTION: Updates the package list and installs the `casper-node-launcher` Debian package. This command assumes the Casper network repository has been previously added to the system's package sources.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/versioned_docs/version-1.5.X/operators/setup/basic-node-configuration.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nsudo apt update\nsudo apt install casper-node-launcher\n```\n\n----------------------------------------\n\nTITLE: Cloning the Counter Contract Repository\nDESCRIPTION: Clone the counter contract repository from GitHub to the local machine.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/versioned_docs/version-2.0.0/resources/beginner/counter/walkthrough.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ngit clone https://github.com/casper-ecosystem/counter\n```\n\n----------------------------------------\n\nTITLE: Running CEP-18 Tests in Bash\nDESCRIPTION: Command to run the CEP-18 token tests from the parent directory using the make utility.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/versioned_docs/version-2.0.0/resources/tokens/cep18/tests.md#2025-04-22_snippet_8\n\nLANGUAGE: bash\nCODE:\n```\nmake test\n```\n\n----------------------------------------\n\nTITLE: Test Module Configuration in Rust\nDESCRIPTION: Configuration of test modules in lib.rs file for running integration tests for different aspects of the CEP-18 token contract.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/versioned_docs/version-1.5.X/resources/tokens/cep18/tests.md#2025-04-22_snippet_7\n\nLANGUAGE: rust\nCODE:\n```\n#[cfg(test)]\nmod allowance;\n#[cfg(test)]\nmod install;\n#[cfg(test)]\nmod mint_and_burn;\n#[cfg(test)]\nmod transfer;\n#[cfg(test)]\nmod utility;\n```\n\n----------------------------------------\n\nTITLE: Defining Runtime Arguments for Staking Deploy in JavaScript\nDESCRIPTION: Constructs a `RuntimeArgs` object containing the necessary arguments for a staking operation (delegate, undelegate). It maps the `delegator` public key, `validator` public key, and the `amount` (in motes) using `CLPublicKey.fromHex` and `CLValueBuilder.u512`. Depends on `RuntimeArgs`, `CLValueBuilder`, and `CLPublicKey` from `casper-js-sdk`.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/docs/resources/advanced/list-cspr.md#2025-04-22_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nimport { RuntimeArgs, CLValueBuilder, CLPublicKey } from 'casper-js-sdk';\n\nconst args = RuntimeArgs.fromMap({\n  delegator: CLPublicKey.fromHex(delegatorPublicKeyHex),\n  validator: CLPublicKey.fromHex(validatorPublicKeyHex),\n  amount: CLValueBuilder.u512(amountMotes) // in motes\n});\n```\n\n----------------------------------------\n\nTITLE: Describing ChecksumRegistry Serialization (Casper Network)\nDESCRIPTION: Describes the ChecksumRegistry, which holds checksums. It serializes as a BTreeMap where keys are checksum names (strings) and values are digests (hashes). The serialization follows the standard BTreeMap format: u32 count followed by serialized string keys and digest values.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/versioned_docs/version-2.0.0/concepts/serialization/types.md#2025-04-22_snippet_14\n\nLANGUAGE: Text\nCODE:\n```\n## ChecksumRegistry {#checksum-registry}\n\nThe checksum registry. It serializes as a `BTreeMap` where the first 4 bytes represent a `u32` value describing the number of checksum names as strings and [digests](#digest) held within. The remainder consists of a repeating pattern of serialized strings and then digests of the length dictated by the first four bytes.\n```\n\n----------------------------------------\n\nTITLE: Defining Operation Types for Deploy Execution in JSON\nDESCRIPTION: Defines an enumeration for the different types of operations ('Read', 'Write', 'Add', 'NoOp') in a JSON schema, capturing the purpose and categorization of operations executed in deploys. This JSON schema snippet is crucial for outlining allowed operation types and is used for validation, ensuring that only defined operations are accepted. It assumes a JSON parsing environment.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/condor/jsonrpc-comp/rpc-1.5/schema/OpKind.json.md#2025-04-22_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"description\": \"The type of operation performed while executing a deploy.\",\n    \"type\": \"string\",\n    \"enum\": [\n        \"Read\",\n        \"Write\",\n        \"Add\",\n        \"NoOp\"\n    ]\n}\n```\n\n----------------------------------------\n\nTITLE: Verifying a Deploy on Casper Network in Bash\nDESCRIPTION: Command to verify a previously sent deploy using its deploy hash, which returns detailed information about the deployment.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/docs/resources/tokens/cep18/full-tutorial.md#2025-04-22_snippet_14\n\nLANGUAGE: bash\nCODE:\n```\ncasper-client get-deploy \\\n--node-address http://<HOST:PORT> [DEPLOY_HASH]\n```\n\n----------------------------------------\n\nTITLE: Adding Wasm32 Compilation Target with Rustup (Bash)\nDESCRIPTION: This bash code snippet displays the expected terminal output from Rustup after adding the wasm32-unknown-unknown compilation target. Adding this target enables building Rust code as WebAssembly, which is required for Casper smart contracts. Users need rustup installed before running these commands.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/docs/resources/tokens/cep18/full-tutorial.md#2025-04-22_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nrustup target add wasm32-unknown-unknown\ninfo: component 'rust-std' for target 'wasm32-unknown-unknown' is up to date\n```\n\n----------------------------------------\n\nTITLE: Retrieving Auction Information in Casper Network - JSON\nDESCRIPTION: This snippet outlines the schema and response example for 'state_get_auction_info', which returns bids and validators as of a specific or the most recent block. It requires a 'block_identifier' parameter. The response highlights the auction state, including era validators and bids with their current status.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/condor/jsonrpc-comp/rpc-2.0/schema.json.md#2025-04-22_snippet_25\n\nLANGUAGE: JSON\nCODE:\n```\n{\n  \"name\": \"state_get_auction_info_example\",\n  \"params\": [\n    {\n      \"name\": \"block_identifier\",\n      \"value\": {\n        \"Hash\": \"0707070707070707070707070707070707070707070707070707070707070707\"\n      }\n    }\n  ],\n  \"result\": {\n    \"name\": \"state_get_auction_info_example_result\",\n    \"value\": {\n      \"api_version\": \"2.0.0\",\n      \"auction_state\": {\n        \"state_root_hash\": \"0b0b0b0b0b0b0b0b0b0b0b0b0b0b0b0b0b0b0b0b0b0b0b0b0b0b0b0b0b0b0b0b\",\n        \"block_height\": 10,\n        \"era_validators\": [\n          {\n            \"era_id\": 10,\n            \"validator_weights\": [\n              {\n                \"public_key\": \"01197f6b23e16c8532c6abc838facd5ea789be0c76b2920334039bfa8b3d368d61\",\n                \"weight\": \"10\"\n              }\n            ]\n          }\n        ],\n        \"bids\": [\n          {\n            \"public_key\": \"01197f6b23e16c8532c6abc838facd5ea789be0c76b2920334039bfa8b3d368d61\",\n            \"bid\": {\n              \"validator_public_key\": \"01197f6b23e16c8532c6abc838facd5ea789be0c76b2920334039bfa8b3d368d61\",\n              \"bonding_purse\": \"uref-fafafafafafafafafafafafafafafafafafafafafafafafafafafafafafafafa-007\",\n              \"staked_amount\": \"20\",\n              \"delegation_rate\": 0,\n              \"vesting_schedule\": null,\n              \"delegators\": [\n                {\n                  \"delegator_public_key\": \"014508a07aa941707f3eb2db94c8897a80b2c1197476b6de213ac273df7d86c4ff\",\n                  \"delegator\": {\n                    \"delegator_public_key\": \"014508a07aa941707f3eb2db94c8897a80b2c1197476b6de213ac273df7d86c4ff\",\n                    \"staked_amount\": \"10\",\n                    \"bonding_purse\": \"uref-fbfbfbfbfbfbfbfbfbfbfbfbfbfbfbfbfbfbfbfbfbfbfbfbfbfbfbfbfbfbfbfb-007\",\n                    \"validator_public_key\": \"01197f6b23e16c8532c6abc838facd5ea789be0c76b2920334039bfa8b3d368d61\",\n                    \"vesting_schedule\": null\n                  }\n                }\n              ],\n              \"inactive\": false\n            }\n          }\n        ]\n      }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining URef String Format in JSON Schema\nDESCRIPTION: JSON schema definition for a URef (Unforgeable Reference) in the Casper Network. The schema specifies that URefs are represented as hex-encoded, formatted strings.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/condor/jsonrpc-comp/rpc-2.0/schema/URef.json.md#2025-04-22_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"description\": \"Hex-encoded, formatted URef.\",\n    \"type\": \"string\"\n}\n```\n\n----------------------------------------\n\nTITLE: Installing OpenSSL Legacy Package for Ubuntu 22.04/24.04\nDESCRIPTION: Commands to install OpenSSL 1.1 compatibility package required for Casper binaries on newer Ubuntu versions.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/versioned_docs/version-2.0.0/operators/setup/install-node.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ncurl -f -JLO http://security.ubuntu.com/ubuntu/pool/main/o/openssl/libssl1.1_1.1.1f-1ubuntu2_amd64.deb\nsudo apt install ./libssl1.1_1.1.1f-1ubuntu2_amd64.deb\n```\n\n----------------------------------------\n\nTITLE: Providing NFT-721 Metadata Example - JSON\nDESCRIPTION: This example shows NFT metadata formatted according to the NFT-721 schema. Fields included are 'name', 'symbol', and 'token_uri', which are commonly required by contracts supporting the NFT-721 metadata standard. The snippet is intended for cases where the NFTMetadataKind modality is set to NFT721, and should be passed during the mint operation.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/docs/resources/tokens/cep78/modalities.md#2025-04-22_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\\n  \\\"name\\\": \\\"John Doe\\\",\\n  \\\"symbol\\\": \\\"abc\\\",\\n  \\\"token_uri\\\": \\\"https://www.barfoo.com\\\"\\n}\n```\n\n----------------------------------------\n\nTITLE: Defining RPC Response Schema for chain_get_era_summary - JSON\nDESCRIPTION: Defines a JSON schema for the RPC response to the 'chain_get_era_summary' method, specifying the required structure, field types, and embedded references to standard schema components. Dependencies include referenced component schemas such as EraSummary. The schema enforces required fields ('api_version', 'era_summary') and strictly disallows extra properties, ensuring conformance for client/server communication. Inputs and outputs are JSON objects matching the defined structure; this serves both documentation and machine validation roles.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/condor/jsonrpc-comp/rpc-2.0/schema.json.md#2025-04-22_snippet_26\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"name\": \"chain_get_era_summary_result\",\n  \"schema\": {\n    \"description\": \"Result for \\\"chain_get_era_summary\\\" RPC response.\",\n    \"type\": \"object\",\n    \"required\": [\n      \"api_version\",\n      \"era_summary\"\n    ],\n    \"properties\": {\n      \"api_version\": {\n        \"description\": \"The RPC API version.\",\n        \"type\": \"string\"\n      },\n      \"era_summary\": {\n        \"description\": \"The era summary.\",\n        \"$ref\": \"#/components/schemas/EraSummary\"\n      }\n    },\n    \"additionalProperties\": false\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Sample JSON Output for Next Upgrade Status - JSON\nDESCRIPTION: Presents an example JSON output representing a successful protocol upgrade staging. This output appears after querying the node status endpoint for next_upgrade and shows the activation point and protocol version pending activation. There are no dependencies as this is a sample output, not a command. The output fields are 'activation_point' (integer) and 'protocol_version' (string).\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/docs/operators/setup/upgrade.md#2025-04-22_snippet_5\n\nLANGUAGE: JSON\nCODE:\n```\n{\n  \"activation_point\": 4968,\n  \"protocol_version\": \"1.4.6\"\n}\n```\n\n----------------------------------------\n\nTITLE: Displaying Receipt Format for CEP-78 Collection\nDESCRIPTION: Shows the format of updated receipts in the CEP-78 Enhanced NFT Standard when OwnerReverseLookupMode is enabled. The receipt includes the collection name, modulo (remainder within the page), and page number.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/docs/resources/tokens/cep78/reverse-lookup.md#2025-04-22_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\ncep78_collection_m_350_p_2\n```\n\n----------------------------------------\n\nTITLE: Storing Contract Version Value in Casper Network Global State\nDESCRIPTION: Stores a U32 value of 1 in the global state, representing the contract version. The value is stored under a specific URef that can be referenced by the contract.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/versioned_docs/version-2.0.0/developers/json-rpc/json-rpc-transactional.md#2025-04-22_snippet_25\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"key\": \"uref-2e024fc493ffb93847290be74a6f921a4226c142b5b196654b5a9c724cb2a726-000\",\n    \"kind\": {\n        \"Write\": {\n            \"CLValue\": {\n                \"cl_type\": \"U32\",\n                \"bytes\": \"01000000\",\n                \"parsed\": 1\n            }\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Account Authorization Error Response\nDESCRIPTION: Example of an error response when the account is not authorized for multi-signature deploys.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/versioned_docs/version-2.0.0/developers/cli/transfers/multisig-deploy-transfer.md#2025-04-22_snippet_6\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"code\": -32008,\n  \"message\": \"deploy parameter failure: account authorization invalid at prestate_hash: 5f0392de8ac3512a48a110acfc5bc10d4a6a07109b350ae14cbec0428656c8ac\"\n}\n```\n\n----------------------------------------\n\nTITLE: Example Response from Balance Query\nDESCRIPTION: Example response from a global state query showing a CEP-18 token balance. The 'parsed' field contains the actual token balance amount.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/versioned_docs/version-2.0.0/resources/tokens/cep18/transfer.md#2025-04-22_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\n{\n  \"id\": -8841145064950441692,\n  \"jsonrpc\": \"2.0\",\n  \"result\": {\n    \"api_version\": \"1.0.0\",\n    \"block_header\": null,\n    \"merkle_proof\": \"[3796 hex chars]\",\n    \"stored_value\": {\n      \"CLValue\": {\n        \"bytes\": \"010a\",\n        \"cl_type\": \"U256\",\n        \"parsed\": \"10\"\n      }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining JSON Schema for chain_get_era_summary RPC Method\nDESCRIPTION: This JSON schema defines the structure, parameters, and result format for the chain_get_era_summary RPC method. It includes details about the API version, era summary, and provides an example of the request and response.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/condor/jsonrpc-comp/rpc-1.5/chain_get_era_summary.json.md#2025-04-22_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"name\": \"chain_get_era_summary\",\n  \"summary\": \"returns the era summary at either a specific block (by height or hash), or the most recently added block\",\n  \"params\": [\n    {\n      \"name\": \"block_identifier\",\n      \"schema\": {\n        \"description\": \"The block identifier.\",\n        \"$ref\": \"#/components/schemas/BlockIdentifier\"\n      },\n      \"required\": false\n    }\n  ],\n  \"result\": {\n    \"name\": \"chain_get_era_summary_result\",\n    \"schema\": {\n      \"description\": \"Result for \\\"chain_get_era_summary\\\" RPC response.\",\n      \"type\": \"object\",\n      \"required\": [\n        \"api_version\",\n        \"era_summary\"\n      ],\n      \"properties\": {\n        \"api_version\": {\n          \"description\": \"The RPC API version.\",\n          \"type\": \"string\"\n        },\n        \"era_summary\": {\n          \"description\": \"The era summary.\",\n          \"$ref\": \"#/components/schemas/EraSummary\"\n        }\n      },\n      \"additionalProperties\": false\n    }\n  },\n  \"examples\": [\n    {\n      \"name\": \"chain_get_era_summary_example\",\n      \"params\": [\n        {\n          \"name\": \"block_identifier\",\n          \"value\": {\n            \"Hash\": \"13c2d7a68ecdd4b74bf4393c88915c836c863fc4bf11d7f2bd930a1bbccacdcb\"\n          }\n        }\n      ],\n      \"result\": {\n        \"name\": \"chain_get_era_summary_example_result\",\n        \"value\": {\n          \"api_version\": \"1.5.6\",\n          \"era_summary\": {\n            \"block_hash\": \"13c2d7a68ecdd4b74bf4393c88915c836c863fc4bf11d7f2bd930a1bbccacdcb\",\n            \"era_id\": 42,\n            \"stored_value\": {\n              \"EraInfo\": {\n                \"seigniorage_allocations\": [\n                  {\n                    \"Delegator\": {\n                      \"delegator_public_key\": \"01e1b46a25baa8a5c28beb3c9cfb79b572effa04076f00befa57eb70b016153f18\",\n                      \"validator_public_key\": \"012a1732addc639ea43a89e25d3ad912e40232156dcaa4b9edfc709f43d2fb0876\",\n                      \"amount\": \"1000\"\n                    }\n                  },\n                  {\n                    \"Validator\": {\n                      \"validator_public_key\": \"012a1732addc639ea43a89e25d3ad912e40232156dcaa4b9edfc709f43d2fb0876\",\n                      \"amount\": \"2000\"\n                    }\n                  }\n                ]\n              }\n            },\n            \"state_root_hash\": \"0808080808080808080808080808080808080808080808080808080808080808\",\n            \"merkle_proof\": \"01000000006ef2e0949ac76e55812421f755abe129b6244fe7168b77f47a72536147614625016ef2e0949ac76e55812421f755abe129b6244fe7168b77f47a72536147614625000000003529cde5c621f857f75f3810611eb4af3f998caaa9d4a3413cf799f99c67db0307010000006ef2e0949ac76e55812421f755abe129b6244fe7168b77f47a7253614761462501010102000000006e06000000000074769d28aac597a36a03a932d4b43e4f10bf0403ee5c41dd035102553f5773631200b9e173e8f05361b681513c14e25e3138639eb03232581db7557c9e8dbbc83ce94500226a9a7fe4f2b7b88d5103a4fc7400f02bf89c860c9ccdd56951a2afe9be0e0267006d820fb5676eb2960e15722f7725f3f8f41030078f8b2e44bf0dc03f71b176d6e800dc5ae9805068c5be6da1a90b2528ee85db0609cc0fb4bd60bbd559f497a98b67f500e1e3e846592f4918234647fca39830b7e1e6ad6f5b7a99b39af823d82ba1873d000003000000010186ff500f287e9b53f823ae1582b1fa429dfede28015125fd233a31ca04d5012002015cc42669a55467a1fdf49750772bfc1aed59b9b085558eb81510e9b015a7c83b0301e3cf4a34b1db6bfa58808b686cb8fe21ebe0c1bcbcee522649d2b135fe510fe3\"\n          }\n        }\n      }\n    }\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Setting SSE Event Stream Server Address in config.toml - TOML/Markdown\nDESCRIPTION: Configures the SSE HTTP event stream listener address in config.toml under event_stream_server. Sets up the node to expose real-time events via the /events endpoint on port 9999. Required for event monitoring integrations but not for basic networking.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/docs/operators/setup/node-endpoints.md#2025-04-22_snippet_13\n\nLANGUAGE: md\nCODE:\n```\naddress = '0.0.0.0:9999'\n```\n\n----------------------------------------\n\nTITLE: Getting Entity Details in Casper Network\nDESCRIPTION: This command retrieves detailed information about an entity using either an entity identifier or an account hash. It requires specifying the node address and the identifier.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/docs/developers/cli/querying-global-state.md#2025-04-22_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\ncasper-client get-entity \\\n--node-address [NODE_SERVER_ADDRESS] \\\n--entity-identifier [FORMATTED_STRING_OR_PATH]\n```\n\n----------------------------------------\n\nTITLE: Defining Transaction Session Kind Enum\nDESCRIPTION: Specifies the session types for a transaction: 'Standard', 'Installer', 'Upgrader', and 'Isolated', each describing distinct transactional behavior and capabilities.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/condor/jsonrpc-comp/rpc-2.0/schema/components.json.md#2025-04-22_snippet_22\n\nLANGUAGE: JSON\nCODE:\n```\n{\n    \"description\": \"Session kind of a Transaction.\",\n    \"oneOf\": [\n        {\n            \"description\": \"A standard (non-special-case) session.\\n\\nThis kind of session is not allowed to install or upgrade a stored contract, but can call stored contracts.\",\n            \"type\": \"string\",\n            \"enum\": [\n                \"Standard\"\n            ]\n        },\n        {\n            \"description\": \"A session which installs a stored contract.\",\n            \"type\": \"string\",\n            \"enum\": [\n                \"Installer\"\n            ]\n        },\n        {\n            \"description\": \"A session which upgrades a previously-installed stored contract.  Such a session must have \\\"package_id: PackageIdentifier\\\" runtime arg present.\",\n            \"type\": \"string\",\n            \"enum\": [\n                \"Upgrader\"\n            ]\n        },\n        {\n            \"description\": \"A session which doesn\\'t call any stored contracts.\\n\\nThis kind of session is not allowed to install or upgrade a stored contract.\",\n            \"type\": \"string\",\n            \"enum\": [\n                \"Isolated\"\n            ]\n        }\n    ]\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Bytes Field as Hex-Encoded String - JSON Schema - JSON\nDESCRIPTION: Specifies that the 'Bytes' type should be represented as a hex-encoded string. This definition is used throughout the contract and argument encoding schema to ensure binary data is properly formatted as a string when serialized. No additional constraints are applied besides requiring a string.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/condor/jsonrpc-comp/rpc-2.0/schema/components.json.md#2025-04-22_snippet_5\n\nLANGUAGE: JSON\nCODE:\n```\n{\n    \"Bytes\": {\n        \"description\": \"Hex-encoded bytes.\",\n        \"type\": \"string\"\n    }\n}\n\n```\n\n----------------------------------------\n\nTITLE: Cloning Counter Contract Repository with Git\nDESCRIPTION: Clone the counter contract repository from GitHub to the local machine.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/versioned_docs/version-1.5.X/resources/beginner/counter-testnet/walkthrough.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ngit clone https://github.com/casper-ecosystem/counter\n```\n\n----------------------------------------\n\nTITLE: Defining `query_global_state` RPC Method in JSON (Casper Network)\nDESCRIPTION: This JSON snippet defines the `query_global_state` RPC method for the Casper Network API. It outlines the method's purpose (querying global state), specifies its parameters (`key`, optional `state_identifier`, optional `path`), describes the result structure including `api_version`, optional `block_header`, `stored_value`, and `merkle_proof`, and provides an example call using a `BlockHash` as the state identifier and showing a partial result.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/condor/jsonrpc-comp/rpc-2.0/schema.json.md#2025-04-22_snippet_9\n\nLANGUAGE: json\nCODE:\n```\n{\n      \"name\": \"query_global_state\",\n      \"summary\": \"a query to global state using either a Block hash or state root hash\",\n      \"params\": [\n        {\n          \"name\": \"key\",\n          \"schema\": {\n            \"description\": \"The key under which to query.\",\n            \"$ref\": \"#/components/schemas/Key\"\n          },\n          \"required\": true\n        },\n        {\n          \"name\": \"state_identifier\",\n          \"schema\": {\n            \"description\": \"The identifier used for the query. If not provided, the tip of the chain will be used.\",\n            \"anyOf\": [\n              {\n                \"$ref\": \"#/components/schemas/GlobalStateIdentifier\"\n              },\n              {\n                \"type\": \"null\"\n              }\n            ]\n          },\n          \"required\": false\n        },\n        {\n          \"name\": \"path\",\n          \"schema\": {\n            \"description\": \"The path components starting from the key as base.\",\n            \"default\": [],\n            \"type\": \"array\",\n            \"items\": {\n              \"type\": \"string\"\n            }\n          },\n          \"required\": false\n        }\n      ],\n      \"result\": {\n        \"name\": \"query_global_state_result\",\n        \"schema\": {\n          \"description\": \"Result for \\\"query_global_state\\\" RPC response.\",\n          \"type\": \"object\",\n          \"required\": [\n            \"api_version\",\n            \"merkle_proof\",\n            \"stored_value\"\n          ],\n          \"properties\": {\n            \"api_version\": {\n              \"description\": \"The RPC API version.\",\n              \"type\": \"string\"\n            },\n            \"block_header\": {\n              \"description\": \"The block header if a Block hash was provided.\",\n              \"anyOf\": [\n                {\n                  \"$ref\": \"#/components/schemas/BlockHeader\"\n                },\n                {\n                  \"type\": \"null\"\n                }\n              ]\n            },\n            \"stored_value\": {\n              \"description\": \"The stored value.\",\n              \"$ref\": \"#/components/schemas/StoredValue\"\n            },\n            \"merkle_proof\": {\n              \"description\": \"The Merkle proof.\",\n              \"type\": \"string\"\n            }\n          },\n          \"additionalProperties\": false\n        }\n      },\n      \"examples\": [\n        {\n          \"name\": \"query_global_state_example\",\n          \"params\": [\n            {\n              \"name\": \"state_identifier\",\n              \"value\": {\n                \"BlockHash\": \"0744fcb72af43c5cc372039bc5a8bfee48808a9ce414acc0d6338a628c20eb42\"\n              }\n            },\n            {\n              \"name\": \"key\",\n              \"value\": \"deploy-af684263911154d26fa05be9963171802801a0b6aff8f199b7391eacb8edc9e1\"\n            },\n            {\n              \"name\": \"path\",\n              \"value\": []\n            }\n          ],\n          \"result\": {\n            \"name\": \"query_global_state_example_result\",\n            \"value\": {\n              \"api_version\": \"2.0.0\",\n              \"block_header\": {\n                \"Version2\": {\n                  \"parent_hash\": \"0707070707070707070707070707070707070707070707070707070707070707\",\n                  \"state_root_hash\": \"0808080808080808080808080808080808080808080808080808080808080808\",\n                  \"body_hash\": \"0505050505050505050505050505050505050505050505050505050505050505\",\n                  \"random_bit\": true,\n                  \"accumulated_seed\": \"ac979f51525cfd979b14aa7dc0737c5154eabe0db9280eceaa8dc8d2905b20d5\",\n                  \"era_end\": {\n                    \"equivocators\": [\n                      \"013b6a27bcceb6a42d62a3a8d02a6f0d73653215771de243a63ac048a18b59da29\"\n                    ],\n```\n\n----------------------------------------\n\nTITLE: Cloning and Building Delegate Contract\nDESCRIPTION: Commands for cloning the Casper node repository and building the delegate contract for staking operations.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/versioned_docs/version-2.0.0/developers/dapps/sdk/client-library-usage.md#2025-04-22_snippet_15\n\nLANGUAGE: bash\nCODE:\n```\ngit clone https://github.com/casper-network/casper-node.git\ncd casper-node/\nmake setup-rs\nmake build-contract-rs/delegate\ncd ../\n```\n\n----------------------------------------\n\nTITLE: Generating Auto-Completion Script for casper-client (Alternate Shells) - Bash\nDESCRIPTION: This bash command customizes the shell type for casper-client auto-completion, here targeting PowerShell. The --shell flag sets the completion script format. The output should be loaded appropriately for the specified shell. Dependencies: casper-client installed, appropriate permissions.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/docs/operators/setup/install-node.md#2025-04-22_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\nsudo casper-client generate-completion --shell powershell\n```\n\n----------------------------------------\n\nTITLE: Adding New Administrators using Global State Update Generator (Shell)\nDESCRIPTION: This command generates entries for adding new administrators, which can be included in the global_state.toml file for a network upgrade.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/versioned_docs/version-1.5.X/operators/setup-network/create-private.md#2025-04-22_snippet_28\n\nLANGUAGE: sh\nCODE:\n```\nglobal-state-update-gen generate-admins --admin NEW_PUBLIC_KEY,NEW_BALANCE --data-dir $DATA_DIR --state-hash $STATE_ROOT_HASH\n```\n\n----------------------------------------\n\nTITLE: Querying Named Keys and State on Casper Chain - Bash\nDESCRIPTION: These commands demonstrate querying the Casper chain for named keys and stored values using casper-client query-global-state and the -q argument. Parameters include --state-root-hash, --key (the account hash), and -q (the named key or path). Outputs are JSON representations of contract/named-key state. Examples show retrieving the counter contract, its count variable, and querying a deploy using its hash.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/docs/resources/beginner/counter/walkthrough.md#2025-04-22_snippet_8\n\nLANGUAGE: bash\nCODE:\n```\ncasper-client query-global-state --node-address http://localhost:11101 \\\n    --state-root-hash [STATE_ROOT_HASH] \\\n    --key [ACCOUNT_HASH] -q \"counter\"\n```\n\nLANGUAGE: bash\nCODE:\n```\ncasper-client query-global-state --node-address http://localhost:11101 \\\n    --state-root-hash [STATE_ROOT_HASH] \\\n    --key [ACCOUNT_HASH] -q \"counter/count\"\n```\n\nLANGUAGE: bash\nCODE:\n```\ncasper-client query-global-state --node-address http://localhost:11101 \\\n    --state-root-hash [STATE_ROOT_HASH] --key deploy-[DEPLOY_HASH]\n```\n\n----------------------------------------\n\nTITLE: Sending Transfers on Casper Network\nDESCRIPTION: JavaScript implementation for sending transfers between accounts on the Casper network. Includes deploy creation, signing, and submission.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/versioned_docs/version-1.5.X/developers/dapps/sdk/script-sdk.md#2025-04-22_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nconst fs = require(\"fs\");\nconst path = require(\"path\");\nconst axios = require(\"axios\");\nconst casperClientSDK = require(\"casper-js-sdk\");\n\nconst { Keys, CasperClient, CLPublicKey, DeployUtil } = require(\"casper-js-sdk\");\n\nconst RPC_API = \"http://159.65.203.12:7777/rpc\";\nconst STATUS_API = \"http://159.65.203.12:8888\";\n\nconst sendTransfer = async ({ from, to, amount }) => {\n    const casperClient = new CasperClient(RPC_API);\n\n    const folder = path.join(\"./\", \"casper_keys\");\n\n    // Read keys from the structure created in #Generating keys\n    const signKeyPair = Keys.Ed25519.parseKeyFiles(folder + \"/\" + from + \"_public.pem\", folder + \"/\" + from + \"_private.pem\");\n\n    // networkName can be taken from the status api\n    const response = await axios.get(STATUS_API + \"/status\");\n\n    let networkName = null;\n\n    if (response.status == 200) {\n        networkName = response.data.chainspec_name;\n    }\n\n    // For native-transfers the payment price is fixed\n    const paymentAmount = 100000000;\n\n    // transfer_id field in the request to tag the transaction and to correlate it to your back-end storage\n    const id = 187821;\n\n    // gasPrice for native transfers can be set to 1\n    const gasPrice = 1;\n\n    // Time that the deploy will remain valid for, in milliseconds\n    // The default value is 1800000 ms (30 minutes)\n    const ttl = 1800000;\n\n    let deployParams = new DeployUtil.DeployParams(signKeyPair.publicKey, networkName, gasPrice, ttl);\n\n    // We create a hex representation of the public key with an added prefix\n    const toPublicKey = CLPublicKey.fromHex(to);\n\n    const session = DeployUtil.ExecutableDeployItem.newTransfer(amount, toPublicKey, null, id);\n\n    const payment = DeployUtil.standardPayment(paymentAmount);\n    const deploy = DeployUtil.makeDeploy(deployParams, session, payment);\n    const signedDeploy = DeployUtil.signDeploy(deploy, signKeyPair);\n\n    // Here we are sending the signed deploy\n    return await casperClient.putDeploy(signedDeploy);\n};\n\nsendTransfer({\n    // Put here the public key of the sender's main purse. Note that it needs to have a balance greater than 2.5 CSPR\n    from: \"<sender-public-key>\",\n\n    // Put here the public key of the recipient's main purse. This account doesn't need to exist. If the key is correctly formatted, the network will create the account when the deploy is sent\n    to: \"<recipient-public-key>\",\n\n    // Minimal amount is 2.5 CSPR (1 CSPR = 1,000,000,000 motes)\n    amount: 25000000000,\n});\n```\n\n----------------------------------------\n\nTITLE: Accessing Account Info Help\nDESCRIPTION: Command to display detailed help information for the get-account-info subcommand.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/versioned_docs/version-1.5.X/concepts/accounts-and-keys.md#2025-04-22_snippet_14\n\nLANGUAGE: bash\nCODE:\n```\ncasper-client get-account-info --help\n```\n\n----------------------------------------\n\nTITLE: Activating Validator Bid on Testnet with Compiled Wasm - Bash\nDESCRIPTION: This is a concrete Bash command for reactivating a Casper Testnet validator bid using a custom-compiled `activate_bid.wasm`. Numeric arguments reflect realistic requirements (e.g., a larger payment amount). Intended for users who have already built the Wasm contract and prepared their keys and environment. Produces a deploy hash for submission status checks.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/versioned_docs/version-1.5.X/operators/becoming-a-validator/recovering.md#2025-04-22_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\nsudo -u casper casper-client put-deploy \\\n--node-address http://65.21.75.254:7777  \\\n--secret-key /etc/casper/validator_keys/secret_key.pem \\\n--chain-name casper-test \\\n--payment-amount 5000000000 \\\n--session-path \"$HOME/casper-node/target/wasm32-unknown-unknown/release/activate_bid.wasm\" \\\n--session-arg \"validator_public_key:public_key='$(cat /etc/casper/validator_keys/public_key_hex)'\"\n```\n\n----------------------------------------\n\nTITLE: Enabling Contract on Casper Network via CLI\nDESCRIPTION: Enables a specified contract on the Casper network by deploying changes using Casper client. It requires contract package and contract hashes, admin's secret key, and session path.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/versioned_docs/version-2.0.0/operators/setup-network/create-private.md#2025-04-22_snippet_19\n\nLANGUAGE: sh\nCODE:\n```\ncasper-client \\\n  put-deploy \\\n  -n $NODE_ADDR \\\n  --chain-name $CHAIN_NAME \\\n  --secret-key admin/secret_key.pem \\\n  --session-account=$(<alice/public_key_hex) \\\n  --session-path enable_contract.wasm \\\n  --payment-amount 3000000000 \\\n  --session-arg \"contract_package_hash:account_hash='account-hash-$CONTRACT_PACKAGE_HASH'\" \\\n  --session-arg \"contract_hash:account_hash='account-hash-$CONTRACT_HASH'\"\n```\n\n----------------------------------------\n\nTITLE: Transaction Verification Response\nDESCRIPTION: Detailed JSON response showing the complete transaction details including execution results and effects.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/docs/developers/cli/installing-contracts.md#2025-04-22_snippet_4\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"jsonrpc\": \"2.0\",\n  \"id\": 5297043714444661948,\n  \"result\": {\n    \"api_version\": \"2.0.0\",\n    \"transaction\": {\n      \"Version1\": {\n        \"hash\": \"49c36616a50962fa5a7dd7901677ae44667fa9f8c542e49eb2284ba2c900bba2\",\n        \"header\": {\n          \"chain_name\": \"casper-net-1\",\n          \"timestamp\": \"2024-08-21T11:21:36.201Z\",\n          \"ttl\": \"30m\",\n          \"body_hash\": \"543df05d05c456e9b6b5d657029e9ad20c674c6e6b56f498af0052ec87ee9f80\",\n          \"pricing_mode\": {\n            \"Fixed\": {\n              \"gas_price_tolerance\": 10\n            }\n          },\n          \"initiator_addr\": {\n            \"PublicKey\": \"0149d133f697b5867d312e18ae0b129ef0c63499df2815fe339dca727963edb80d\"\n          }\n        },\n        \"body\": {\n          \"args\": [],\n          \"target\": {\n            \"Session\": {\n              \"module_bytes\": \"[105936 hex chars]\",\n              \"runtime\": \"VmCasperV1\"\n            }\n          },\n          \"entry_point\": \"Call\",\n          \"transaction_category\": 2,\n          \"scheduling\": \"Standard\"\n        },\n        \"approvals\": [\n          {\n            \"signer\": \"0149d133f697b5867d312e18ae0b129ef0c63499df2815fe339dca727963edb80d\",\n            \"signature\": \"01537684dd531ce6a4c9383ba7ea565e9408ed2c5dd8bb12787f131e1148fd0f057f45dbaa7bbc0230743cc5740c67db64f66bab1df57547722899f7d7289c1f0c\"\n          }\n        ]\n      }\n    },\n    \"execution_info\": {\n      \"block_hash\": \"24ead40278a71966e16823150b06c06675a216dbef761c1d6ad1439da4147f4a\",\n      \"block_height\": 8463,\n      \"execution_result\": {\n        \"Version2\": {\n          \"initiator\": {\n            \"PublicKey\": \"0149d133f697b5867d312e18ae0b129ef0c63499df2815fe339dca727963edb80d\"\n          },\n          \"error_message\": null,\n          \"limit\": \"1000000000000\",\n          \"consumed\": \"46747144601\",\n          \"cost\": \"1000000000000\",\n          \"payment\": [],\n          \"transfers\": [],\n          \"size_estimate\": 53215,\n          \"effects\": [\n            {\n              \"key\": \"balance-hold-0121dc8fc358c4e30ae29786bd4842a5f99da83efa0b9ca8461cd2196ffbfd07f172b7ab7491010000\",\n              \"kind\": {\n                \"Write\": {\n                  \"CLValue\": {\n                    \"cl_type\": \"U512\",\n                    \"bytes\": \"050010a5d4e8\",\n                    \"parsed\": \"1000000000000\"\n                  }\n                }\n              }\n            },\n            {\n              \"key\": \"uref-65f3f583bf1ac01b6c90d9c9478bd239c09e46f48fb693918726eaab03631407-000\",\n              \"kind\": {\n                \"Write\": {\n                  \"CLValue\": {\n                    \"cl_type\": \"I32\",\n                    \"bytes\": \"00000000\",\n                    \"parsed\": 0\n                  }\n                }\n              }\n            },\n            {\n              \"key\": \"uref-29feb2af8a9d7b6d2ef6be875a0aa326b646a00b7cdd2dd4a65365e84e9f2e9a-000\",\n              \"kind\": {\n                \"Write\": {\n                  \"CLValue\": {\n                    \"cl_type\": \"Unit\",\n                    \"bytes\": \"\",\n                    \"parsed\": null\n                  }\n                }\n              }\n            },\n            {\n              \"key\": \"package-50d487af45f8cec533c6813801a7630ff97e5ee3964daf7915d5451b4812ac94\",\n              \"kind\": {\n                \"Write\": {\n                  \"Package\": {\n                    \"versions\": [],\n                    \"disabled_versions\": [],\n                    \"groups\": [],\n                    \"lock_status\": \"Unlocked\"\n                  }\n                }\n              }\n            },\n            {\n              \"key\": \"named-key-entity-account-6a56c4eee172043975aea72221eaf09f3c3a24f09a379935e44c9979f1ae9463-05c3e063406ddde43671e0d47c45e31a10e9204137171f96ce818bdc725a4e1b\",\n              \"kind\": {\n                \"Write\": {\n                  \"NamedKey\": {\n                    \"named_key\": {\n                      \"cl_type\": \"Key\",\n                      \"bytes\": \"1050d487af45f8cec533c6813801a7630ff97e5ee3964daf7915d5451b4812ac94\",\n                      \"parsed\": \"package-50d487af45f8cec533c6813801a7630ff97e5ee3964daf7915d5451b4812ac94\"\n                    },\n                    \"name\": {\n                      \"cl_type\": \"String\",\n                      \"bytes\": \"14000000636f756e7465725f7061636b6167655f6e616d65\",\n                      \"parsed\": \"counter_package_name\"\n                    }\n                  }\n                }\n              }\n            },\n            {\n              \"key\": \"named-key-entity-account-6a56c4eee172043975aea72221eaf09f3c3a24f09a379935e44c9979f1ae9463-6409273bf327d5a6a39a29dbd07c5cd2f48ee4f227fd443d025adc51e1bd5103\",\n              \"kind\": {\n                \"Write\": {\n                  \"NamedKey\": {\n                    \"named_key\": {\n                      \"cl_type\": \"Key\",\n                      \"bytes\": \"0229feb2af8a9d7b6d2ef6be875a0aa326b646a00b7cdd2dd4a65365e84e9f2e9a07\",\n                      \"parsed\": \"uref-29feb2af8a9d7b6d2ef6be875a0aa326b646a00b7cdd2dd4a65365e84e9f2e9a-007\"\n                    },\n                    \"name\": {\n                      \"cl_type\": \"String\",\n                      \"bytes\": \"13000000636f756e7465725f6163636573735f75726566\",\n                      \"parsed\": \"counter_access_uref\"\n                    }\n                  }\n                }\n              }\n            },\n            {\n              \"key\": \"package-50d487af45f8cec533c6813801a7630ff97e5ee3964daf7915d5451b4812ac94\",\n              \"kind\": \"Identity\"\n            },\n            {\n              \"key\": \"entity-system-1f15cf43df68e8b382415a8ef687521f61f1ecce6960b72eaa13f43bfc448139\",\n              \"kind\": \"Identity\"\n            },\n            {\n              \"key\": \"package-f1c97c9b6228be3f316753e4e1289d910071fb880dddccce18881abfb9f53526\",\n              \"kind\": \"Identity\"\n            },\n            {\n              \"key\": \"entry-point-v1-entity-system-1f15cf43df68e8b382415a8ef687521f61f1ecce6960b72eaa13f43bfc448139-21bddc7e4379ba445c7118cb51962954e0d1e5aa5cacc0c4ff6095b57eb9fb33\",\n              \"kind\": \"Identity\"\n            },\n            {\n              \"key\": \"uref-2cb7e46fcde2c4d395a6850bb3b7edbb0b4db6018643e535fa0dfdeeb006d6ef-000\",\n              \"kind\": {\n                \"Write\": {\n                  \"CLValue\": {\n                    \"cl_type\": \"Unit\",\n                    \"bytes\": \"\",\n                    \"parsed\": null\n                  }\n                }\n              }\n            },\n            {\n              \"key\": \"balance-2cb7e46fcde2c4d395a6850bb3b7edbb0b4db6018643e535fa0dfdeeb006d6ef\",\n              \"kind\": {\n                \"Write\": {\n                  \"CLValue\": {\n                    \"cl_type\": \"U512\",\n                    \"bytes\": \"00\",\n                    \"parsed\": \"0\"\n                  }\n                }\n              }\n            },\n            {\n              \"key\": \"byte-code-v1-wasm-0577a7c92fd20e1af76aa9e257631cb240e8187191bba2025e88663d0288e936\",\n              \"kind\": {\n                \"Write\": {\n                  \"ByteCode\": {}\n                }\n              }\n            }\n          ]\n        }\n      }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Installing Casper Tool Dependencies on Ubuntu - Bash\nDESCRIPTION: Installs the pkg-config, openssl, and libssl-dev packages required for compiling and building Casper Rust projects and dependencies. Run each command individually. Ubuntu-based systems required.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/versioned_docs/version-1.5.X/developers/prerequisites.md#2025-04-22_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nsudo apt-get install pkg-config\nsudo apt-get install openssl\nsudo apt-get install libssl-dev\n```\n\n----------------------------------------\n\nTITLE: Cloning the NCTL Docker Repository in Bash\nDESCRIPTION: Commands to clone the casper-nctl-docker repository and navigate to its directory. This is the first step in setting up the Dockerized NCTL environment for Casper 2.0.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/condor/local-setup.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ngit clone https://github.com/make-software/casper-nctl-docker.git\ncd casper-nctl-docker\n```\n\n----------------------------------------\n\nTITLE: Defining Transaction Entry Point Enum\nDESCRIPTION: Enumerates possible entry points for transactions, including 'Transfer', 'AddBid', 'WithdrawBid', 'Delegate', 'Undelegate', 'Redelegate', 'ActivateBid', 'ChangeBidPublicKey', and custom entry points.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/condor/jsonrpc-comp/rpc-2.0/schema/components.json.md#2025-04-22_snippet_23\n\nLANGUAGE: JSON\nCODE:\n```\n{\n    \"description\": \"Entry point of a Transaction.\",\n    \"oneOf\": [\n        {\n            \"description\": \"A non-native, arbitrary entry point.\",\n            \"type\": \"object\",\n            \"required\": [\n                \"Custom\"\n            ],\n            \"properties\": {\n                \"Custom\": {\n                    \"type\": \"string\"\n                }\n            },\n            \"additionalProperties\": false\n        },\n        {\n            \"description\": \"The `transfer` native entry point, used to transfer `Motes` from a source purse to a target purse.\",\n            \"type\": \"string\",\n            \"enum\": [\n                \"Transfer\"\n            ]\n        },\n        {\n            \"description\": \"The `add_bid` native entry point, used to create or top off a bid purse.\",\n            \"type\": \"string\",\n            \"enum\": [\n                \"AddBid\"\n            ]\n        },\n        {\n            \"description\": \"The `withdraw_bid` native entry point, used to decrease a stake.\",\n            \"type\": \"string\",\n            \"enum\": [\n                \"WithdrawBid\"\n            ]\n        },\n        {\n            \"description\": \"The `delegate` native entry point, used to add a new delegator or increase an existing delegator\\'s stake.\",\n            \"type\": \"string\",\n            \"enum\": [\n                \"Delegate\"\n            ]\n        },\n        {\n            \"description\": \"The `undelegate` native entry point, used to reduce a delegator\\'s stake or remove the delegator if the remaining stake is 0.\",\n            \"type\": \"string\",\n            \"enum\": [\n                \"Undelegate\"\n            ]\n        },\n        {\n            \"description\": \"The `redelegate` native entry point, used to reduce a delegator\\'s stake or remove the delegator if the remaining stake is 0, and after the unbonding delay, automatically delegate to a new validator.\",\n            \"type\": \"string\",\n            \"enum\": [\n                \"Redelegate\"\n            ]\n        },\n        {\n            \"description\": \"The `activate_bid` native entry point, used to used to reactivate an inactive bid.\",\n            \"type\": \"string\",\n            \"enum\": [\n                \"ActivateBid\"\n            ]\n        },\n        {\n            \"description\": \"The `change_bid_public_key` native entry point, used to change a bid\\'s public key.\",\n            \"type\": \"string\",\n            \"enum\": [\n                \"ChangeBidPublicKey\"\n            ]\n        }\n    ]\n}\n```\n\n----------------------------------------\n\nTITLE: Defining a JSON Schema with Group and Keys Reference\nDESCRIPTION: This JSON schema defines an object structure requiring a 'group' property of type string and a 'keys' property which must be an array. Each item within the 'keys' array must adhere to the schema defined by the 'URef' component, referenced via '$ref'. This schema is likely used for validating data structures related to groups and associated URefs within the Casper Network system.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/condor/jsonrpc-comp/rpc-1.5/schema/Groups.json.md#2025-04-22_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"type\": \"object\",\n    \"required\": [\n        \"group\",\n        \"keys\"\n    ],\n    \"properties\": {\n        \"group\": {\n            \"type\": \"string\"\n        },\n        \"keys\": {\n            \"type\": \"array\",\n            \"items\": {\n                \"$ref\": \"#/components/schemas/URef\"\n            }\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: JSON-RPC Response Structure - Token Transfer\nDESCRIPTION: The JSON-RPC response format received after a successful token transfer request, including API version and deploy hash.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/docs/developers/cli/transfers/direct-token-transfer.md#2025-04-22_snippet_3\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"jsonrpc\": \"2.0\",\n  \"id\": 3,\n  \"result\": {\n    \"api_version\": \"1.5.3\",\n    \"deploy_hash\": \"1f17a0bdeaaf71abd03492c854cdf97f746432751721ce555e95b9cefe641e3c\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Retrieving Block Transfers in Casper Network via RPC\nDESCRIPTION: Example of using the chain_get_block_transfers RPC endpoint to retrieve all transfers for a specific block identified by its hash. The response includes the API version, block hash, and an array of transfers with their details.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/condor/jsonrpc-comp/rpc-1.5/schema.json.md#2025-04-22_snippet_19\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"name\": \"block_identifier\",\n  \"value\": {\n    \"Hash\": \"13c2d7a68ecdd4b74bf4393c88915c836c863fc4bf11d7f2bd930a1bbccacdcb\"\n  }\n}\n```\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"api_version\": \"1.5.6\",\n  \"block_hash\": \"13c2d7a68ecdd4b74bf4393c88915c836c863fc4bf11d7f2bd930a1bbccacdcb\",\n  \"transfers\": [\n    {\n      \"deploy_hash\": \"0000000000000000000000000000000000000000000000000000000000000000\",\n      \"from\": \"account-hash-0000000000000000000000000000000000000000000000000000000000000000\",\n      \"to\": null,\n      \"source\": \"uref-0000000000000000000000000000000000000000000000000000000000000000-000\",\n      \"target\": \"uref-0000000000000000000000000000000000000000000000000000000000000000-000\",\n      \"amount\": \"0\",\n      \"gas\": \"0\",\n      \"id\": null\n    }\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Building and Testing the Contract\nDESCRIPTION: Commands to compile the contract and run unit tests.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/versioned_docs/version-2.0.0/resources/tokens/cep18/full-tutorial.md#2025-04-22_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nmake build-contract\nmake test\n```\n\n----------------------------------------\n\nTITLE: Building for Production\nDESCRIPTION: Command to build the application for production deployment.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/versioned_docs/version-2.0.0/developers/dapps/template-frontend.md#2025-04-22_snippet_20\n\nLANGUAGE: bash\nCODE:\n```\nvite build\n```\n\n----------------------------------------\n\nTITLE: Fetching State Root Hash via Casper-Client CLI - Rust\nDESCRIPTION: This snippet demonstrates how to use the casper-client command line tool to fetch the current state root hash from a Casper node. The command requires specifying the node's address using the --node-address flag (replace [NODE_SERVER_ADDRESS] with your server's endpoint). The returned value serves as a cryptographic snapshot of the current blockchain state, useful for subsequent state queries.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/versioned_docs/version-2.0.0/resources/beginner/counter-testnet/commands.md#2025-04-22_snippet_0\n\nLANGUAGE: rust\nCODE:\n```\ncasper-client get-state-root-hash --node-address [NODE_SERVER_ADDRESS]\n```\n\n----------------------------------------\n\nTITLE: Defining JSON Schema for Casper Network Contract Metadata - JSON\nDESCRIPTION: This JSON schema snippet enforces the presence and validation of 'contract_hash', 'contract_version', and 'protocol_version_major' fields when representing Casper Network contract metadata. Dependencies include the '#/components/schemas/ContractHash' reference for 'contract_hash'. 'protocol_version_major' and 'contract_version' are unsigned 32-bit integers constrained to be at least 0. Inputs should adhere to this schema for validation; outputs are typically standards-compliant JSON objects describing smart contract metadata. This ensures data integrity and consistency when used in REST APIs or documentation.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/condor/jsonrpc-comp/rpc-1.5/schema/ContractVersion.json.md#2025-04-22_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"type\": \"object\",\n    \"required\": [\n        \"contract_hash\",\n        \"contract_version\",\n        \"protocol_version_major\"\n    ],\n    \"properties\": {\n        \"protocol_version_major\": {\n            \"type\": \"integer\",\n            \"format\": \"uint32\",\n            \"minimum\": 0\n        },\n        \"contract_version\": {\n            \"type\": \"integer\",\n            \"format\": \"uint32\",\n            \"minimum\": 0\n        },\n        \"contract_hash\": {\n            \"$ref\": \"#/components/schemas/ContractHash\"\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Protocol Activation Configuration in TOML\nDESCRIPTION: Configuration section in chainspec.toml that specifies when a new casper-node version should become active based on era ID.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/versioned_docs/version-2.0.0/operators/setup/upgrade.md#2025-04-22_snippet_0\n\nLANGUAGE: toml\nCODE:\n```\n[protocol]\n# This protocol version becomes active at the start of this era.\nactivation_point = 100\n```\n\n----------------------------------------\n\nTITLE: Compiling the Counter Contract in Bash\nDESCRIPTION: Commands to compile the counter contract to WebAssembly. The 'prepare' target sets up the Wasm target while 'test' builds and verifies the contract.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/versioned_docs/version-1.5.X/resources/beginner/counter/walkthrough.md#2025-04-22_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\ncd counter\nmake prepare\nmake test\n```\n\n----------------------------------------\n\nTITLE: Withdrawing Bid via Compiled Wasm Contract (Bash)\nDESCRIPTION: This command illustrates how to withdraw a validator's bid using the `casper-client` by deploying a pre-compiled Wasm file (`withdraw_bid.wasm`). This method specifies the path to the Wasm file using `--session-path` and passes the necessary arguments (public key, amount). This approach is generally more expensive than calling the system auction contract directly.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/versioned_docs/version-1.5.X/operators/becoming-a-validator/unbonding.md#2025-04-22_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nsudo -u casper casper-client put-deploy \\\n--node-address <HOST:PORT> \\\n--secret-key <PATH> \\\n--chain-name <CHAIN_NAME> \\\n--payment-amount <PAYMENT_AMOUNT> \\\n--session-path <PATH>/casper-node/target/wasm32-unknown-unknown/release/withdraw_bid.wasm \\\n--session-arg=\"public_key:public_key='<PUBLIC_KEY_HEX>'\" \\\n--session-arg=\"amount:u512='<AMOUNT_TO_WITHDRAW>'\"\n```\n\n----------------------------------------\n\nTITLE: Creating and Signing a Multi-Signature Deploy with First Key\nDESCRIPTION: Command to create and sign a deploy with the first associated key, specifying the primary account context for execution. This is the first step in a multi-signature process where the deploy is saved to a file for additional signatures.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/versioned_docs/version-1.5.X/resources/advanced/multi-sig/multi-sig-workflow.md#2025-04-22_snippet_15\n\nLANGUAGE: bash\nCODE:\n```\ncasper-client make-deploy --chain-name casper-test \\\n--payment-amount 300000000 \\\n--session-path tests/wasm/contract.wasm \\\n--secret-key $PATH/user_1_secret_key.pem \\\n--session-arg \"my-key-name:string='user_1_key'\" \\\n--session-arg \"message:string='Hello, World'\" \\\n--session-account 01360af61b50cdcb7b92cffe2c99315d413d34ef77fadee0c105cc4f1d4120f986 \\\n--output hello_world_one_signature\n```\n\n----------------------------------------\n\nTITLE: Speculative Execution Response Example\nDESCRIPTION: Sample JSON response from a speculative execution request showing the execution result and estimated gas cost in motes.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/versioned_docs/version-1.5.X/developers/dapps/speculative-exec.md#2025-04-22_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n{\n  \"jsonrpc\": \"2.0\",\n  \"id\": -4571113357017152230,\n  \"result\": {\n    \"api_version\": \"1.0.0\",\n    \"block_hash\": \"6ca035b08de092e7f5e8fff771b880c5b4d7463a8f7a9b108888aaad958e5b0f\",\n    \"execution_result\": {\n      \"Success\": {\n        \"effect\": {\n          <Deploy effects removed for conciseness.>\n        },\n        \"transfers\": [],\n        \"cost\": \"87300473670\"\n      }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Example JSON Output: Casper Account Details After Threshold Update\nDESCRIPTION: Provides a complete example JSON representation of a Casper account's details after its action thresholds have been updated (deployment: 2, key_management: 3), while the primary key retains its weight of 3. This reflects the state after Step 4 of the tutorial.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/docs/resources/advanced/multi-sig/multi-sig-workflow.md#2025-04-22_snippet_13\n\nLANGUAGE: json\nCODE:\n```\n\"Account\": {\n  \"account_hash\": \"account-hash-1ed5a1c39bea93c105f2d22c965a84b205b36734a377d05dbb103b6bfaa595a7\",\n  \"action_thresholds\": {\n    \"deployment\": 2,\n    \"key_management\": 3\n  },\n  \"associated_keys\": [\n    {\n      \"account_hash\": \"account-hash-1ed5a1c39bea93c105f2d22c965a84b205b36734a377d05dbb103b6bfaa595a7\",\n      \"weight\": 3\n    }\n  ],\n  \"main_purse\": \"uref-8294864177c2c1ec887a11dae095e487b5256ce6bd2a1f2740d0e4f28bd3251c-007\",\n  \"named_keys\": []\n}\n```\n\n----------------------------------------\n\nTITLE: Defining ChainspecRawBytes Schema in JSON\nDESCRIPTION: Defines the schema for ChainspecRawBytes, which represents the raw bytes of chainspec.toml, genesis accounts.toml, and global_state.toml files. It includes required and optional properties for these files.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/condor/jsonrpc-comp/rpc-2.0/schema/components.json.md#2025-04-22_snippet_83\n\nLANGUAGE: JSON\nCODE:\n```\n\"ChainspecRawBytes\": {\n    \"description\": \"The raw bytes of the chainspec.toml, genesis accounts.toml, and global_state.toml files.\",\n    \"type\": \"object\",\n    \"required\": [\n        \"chainspec_bytes\"\n    ],\n    \"properties\": {\n        \"chainspec_bytes\": {\n            \"description\": \"Raw bytes of the current chainspec.toml file.\",\n            \"allOf\": [\n                {\n                    \"$ref\": \"#/components/schemas/Bytes\"\n                }\n            ]\n        },\n        \"maybe_genesis_accounts_bytes\": {\n            \"description\": \"Raw bytes of the current genesis accounts.toml file.\",\n            \"anyOf\": [\n                {\n                    \"$ref\": \"#/components/schemas/Bytes\"\n                },\n                {\n                    \"type\": \"null\"\n                }\n            ]\n        },\n        \"maybe_global_state_bytes\": {\n            \"description\": \"Raw bytes of the current global_state.toml file.\",\n            \"anyOf\": [\n                {\n                    \"$ref\": \"#/components/schemas/Bytes\"\n                },\n                {\n                    \"type\": \"null\"\n                }\n            ]\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Adding Auction Bid Command - Casper Network CLI\nDESCRIPTION: Command to add an auction bid on the Casper network using casper-client. This operation is expected to fail with AuctionBidsDisabled error due to network settings.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/docs/operators/setup-network/create-private.md#2025-04-22_snippet_18\n\nLANGUAGE: sh\nCODE:\n```\ncasper-client \\\n  put-deploy \\\n  -n $NODE_ADDR \\\n  --chain-name $CHAIN_NAME \\\n  --secret-key alice/secret_key.pem \\\n  --session-path add_bid.wasm \\\n  --payment-amount 5000000000 \\\n  --session-arg \"public_key:public_key='$(<alice/public_key_hex)'\" \\\n  --session-arg \"amount:u512='10000'\" \\\n  --session-arg \"delegation_rate:u8='5'\"\n\n# Error: ApiError::AuctionError(AuctionBidsDisabled) [64559]\"\n```\n\n----------------------------------------\n\nTITLE: Defining Casper Network API Data Structures using JSON Schema\nDESCRIPTION: This JSON code defines multiple data structures using JSON Schema syntax, intended for use within the Casper Network's API. Key structures include `JsonValidatorStatusChange` (changes to validator status), `ValidatorChange` (enum for status change types), `ChainspecRawBytes` (raw configuration bytes), `JsonBlock` (block representation with header, body, and proofs), `EraSummary` (summary of a specific era), `AuctionState` (auction contract data), and `JsonEraValidators` (validators for an era). It utilizes `$ref` to link related schema definitions and specifies required properties and data types for each object.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/condor/jsonrpc-comp/rpc-1.5/schema/components.json.md#2025-04-22_snippet_57\n\nLANGUAGE: json\nCODE:\n```\n                        ]\n                    },\n                    \"status_changes\": {\n                        \"description\": \"The set of changes to the validator's status.\",\n                        \"type\": \"array\",\n                        \"items\": {\n                            \"$ref\": \"#/components/schemas/JsonValidatorStatusChange\"\n                        }\n                    }\n                },\n                \"additionalProperties\": false\n            },\n            \"JsonValidatorStatusChange\": {\n                \"description\": \"A single change to a validator's status in the given era.\",\n                \"type\": \"object\",\n                \"required\": [\n                    \"era_id\",\n                    \"validator_change\"\n                ],\n                \"properties\": {\n                    \"era_id\": {\n                        \"description\": \"The era in which the change occurred.\",\n                        \"allOf\": [\n                            {\n                                \"$ref\": \"#/components/schemas/EraId\"\n                            }\n                        ]\n                    },\n                    \"validator_change\": {\n                        \"description\": \"The change in validator status.\",\n                        \"allOf\": [\n                            {\n                                \"$ref\": \"#/components/schemas/ValidatorChange\"\n                            }\n                        ]\n                    }\n                },\n                \"additionalProperties\": false\n            },\n            \"ValidatorChange\": {\n                \"description\": \"A change to a validator's status between two eras.\",\n                \"type\": \"string\",\n                \"enum\": [\n                    \"Added\",\n                    \"Removed\",\n                    \"Banned\",\n                    \"CannotPropose\",\n                    \"SeenAsFaulty\"\n                ]\n            },\n            \"ChainspecRawBytes\": {\n                \"description\": \"The raw bytes of the chainspec.toml, genesis accounts.toml, and global_state.toml files.\",\n                \"type\": \"object\",\n                \"required\": [\n                    \"chainspec_bytes\",\n                    \"maybe_genesis_accounts_bytes\",\n                    \"maybe_global_state_bytes\"\n                ],\n                \"properties\": {\n                    \"chainspec_bytes\": {\n                        \"description\": \"Hex-encoded raw bytes of the current chainspec.toml file.\",\n                        \"type\": \"string\"\n                    },\n                    \"maybe_genesis_accounts_bytes\": {\n                        \"description\": \"Hex-encoded raw bytes of the current genesis accounts.toml file.\",\n                        \"type\": \"string\"\n                    },\n                    \"maybe_global_state_bytes\": {\n                        \"description\": \"Hex-encoded raw bytes of the current global_state.toml file.\",\n                        \"type\": \"string\"\n                    }\n                }\n            },\n            \"JsonBlock\": {\n                \"description\": \"A JSON-friendly representation of `Block`.\",\n                \"type\": \"object\",\n                \"required\": [\n                    \"body\",\n                    \"hash\",\n                    \"header\",\n                    \"proofs\"\n                ],\n                \"properties\": {\n                    \"hash\": {\n                        \"description\": \"`BlockHash`\",\n                        \"allOf\": [\n                            {\n                                \"$ref\": \"#/components/schemas/BlockHash\"\n                            }\n                        ]\n                    },\n                    \"header\": {\n                        \"description\": \"JSON-friendly block header.\",\n                        \"allOf\": [\n                            {\n                                \"$ref\": \"#/components/schemas/JsonBlockHeader\"\n                            }\n                        ]\n                    },\n                    \"body\": {\n                        \"description\": \"JSON-friendly block body.\",\n                        \"allOf\": [\n                            {\n                                \"$ref\": \"#/components/schemas/JsonBlockBody\"\n                            }\n                        ]\n                    },\n                    \"proofs\": {\n                        \"description\": \"JSON-friendly list of proofs for this block.\",\n                        \"type\": \"array\",\n                        \"items\": {\n                            \"$ref\": \"#/components/schemas/JsonProof\"\n                        }\n                    }\n                },\n                \"additionalProperties\": false\n            },\n            \"JsonBlockBody\": {\n                \"description\": \"A JSON-friendly representation of `Body`\",\n                \"type\": \"object\",\n                \"required\": [\n                    \"deploy_hashes\",\n                    \"proposer\",\n                    \"transfer_hashes\"\n                ],\n                \"properties\": {\n                    \"proposer\": {\n                        \"$ref\": \"#/components/schemas/PublicKey\"\n                    },\n                    \"deploy_hashes\": {\n                        \"type\": \"array\",\n                        \"items\": {\n                            \"$ref\": \"#/components/schemas/DeployHash\"\n                        }\n                    },\n                    \"transfer_hashes\": {\n                        \"type\": \"array\",\n                        \"items\": {\n                            \"$ref\": \"#/components/schemas/DeployHash\"\n                        }\n                    }\n                },\n                \"additionalProperties\": false\n            },\n            \"JsonProof\": {\n                \"description\": \"A JSON-friendly representation of a proof, i.e. a block's finality signature.\",\n                \"type\": \"object\",\n                \"required\": [\n                    \"public_key\",\n                    \"signature\"\n                ],\n                \"properties\": {\n                    \"public_key\": {\n                        \"$ref\": \"#/components/schemas/PublicKey\"\n                    },\n                    \"signature\": {\n                        \"$ref\": \"#/components/schemas/Signature\"\n                    }\n                },\n                \"additionalProperties\": false\n            },\n            \"EraSummary\": {\n                \"description\": \"The summary of an era\",\n                \"type\": \"object\",\n                \"required\": [\n                    \"block_hash\",\n                    \"era_id\",\n                    \"merkle_proof\",\n                    \"state_root_hash\",\n                    \"stored_value\"\n                ],\n                \"properties\": {\n                    \"block_hash\": {\n                        \"description\": \"The block hash\",\n                        \"allOf\": [\n                            {\n                                \"$ref\": \"#/components/schemas/BlockHash\"\n                            }\n                        ]\n                    },\n                    \"era_id\": {\n                        \"description\": \"The era id\",\n                        \"allOf\": [\n                            {\n                                \"$ref\": \"#/components/schemas/EraId\"\n                            }\n                        ]\n                    },\n                    \"stored_value\": {\n                        \"description\": \"The StoredValue containing era information\",\n                        \"allOf\": [\n                            {\n                                \"$ref\": \"#/components/schemas/StoredValue\"\n                            }\n                        ]\n                    },\n                    \"state_root_hash\": {\n                        \"description\": \"Hex-encoded hash of the state root\",\n                        \"allOf\": [\n                            {\n                                \"$ref\": \"#/components/schemas/Digest\"\n                            }\n                        ]\n                    },\n                    \"merkle_proof\": {\n                        \"description\": \"The Merkle proof\",\n                        \"type\": \"string\"\n                    }\n                },\n                \"additionalProperties\": false\n            },\n            \"AuctionState\": {\n                \"description\": \"Data structure summarizing auction contract data.\",\n                \"type\": \"object\",\n                \"required\": [\n                    \"bids\",\n                    \"block_height\",\n                    \"era_validators\",\n                    \"state_root_hash\"\n                ],\n                \"properties\": {\n                    \"state_root_hash\": {\n                        \"description\": \"Global state hash.\",\n                        \"allOf\": [\n                            {\n                                \"$ref\": \"#/components/schemas/Digest\"\n                            }\n                        ]\n                    },\n                    \"block_height\": {\n                        \"description\": \"Block height.\",\n                        \"type\": \"integer\",\n                        \"format\": \"uint64\",\n                        \"minimum\": 0.0\n                    },\n                    \"era_validators\": {\n                        \"description\": \"Era validators.\",\n                        \"type\": \"array\",\n                        \"items\": {\n                            \"$ref\": \"#/components/schemas/JsonEraValidators\"\n                        }\n                    },\n                    \"bids\": {\n                        \"description\": \"All bids contained within a vector.\",\n                        \"type\": \"array\",\n                        \"items\": {\n                            \"$ref\": \"#/components/schemas/JsonBids\"\n                        }\n                    }\n                },\n                \"additionalProperties\": false\n            },\n            \"JsonEraValidators\": {\n                \"description\": \"The validators for the given era.\",\n                \"type\": \"object\",\n                \"required\": [\n```\n\n----------------------------------------\n\nTITLE: Downloading and Installing a Network Configuration File (Bash)\nDESCRIPTION: Provides the commands to navigate to the standard network configuration directory (`/etc/casper/network_configs`) and use `curl` to download a specific network's configuration file (e.g., `our-network.conf`) from its hosting server. The `sudo -u casper` command ensures the downloaded file has the correct ownership for the `casper` user.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/docs/operators/setup-network/staging-files-for-new-network.md#2025-04-22_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\ncd /etc/casper/network_configs\nsudo -u casper curl -JLO casper.mydomain.com/our-network/our-network.conf\n```\n\n----------------------------------------\n\nTITLE: Defining Block Range Schema - JSON\nDESCRIPTION: This JSON Schema defines an object representing an unbroken, inclusive range of blocks with required properties 'low' and 'high'. The 'low' and 'high' fields are defined as unsigned 64-bit integers (uint64) with a minimum value of 0, representing the inclusive lower and upper bounds of the range, respectively. There are no additional properties allowed, ensuring strict validation; this schema is suitable for use cases such as blockchain range queries or network protocol definitions that require precise block boundary specification.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/condor/jsonrpc-comp/rpc-2.0/schema/AvailableBlockRange.json.md#2025-04-22_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"description\": \"An unbroken, inclusive range of blocks.\",\n    \"type\": \"object\",\n    \"required\": [\n        \"high\",\n        \"low\"\n    ],\n    \"properties\": {\n        \"low\": {\n            \"description\": \"The inclusive lower bound of the range.\",\n            \"type\": \"integer\",\n            \"format\": \"uint64\",\n            \"minimum\": 0\n        },\n        \"high\": {\n            \"description\": \"The inclusive upper bound of the range.\",\n            \"type\": \"integer\",\n            \"format\": \"uint64\",\n            \"minimum\": 0\n        }\n    },\n    \"additionalProperties\": false\n} \n```\n\n----------------------------------------\n\nTITLE: Successful Deploy Response in JSON\nDESCRIPTION: This JSON output reflects a successful deployment command, indicating the API version and the deploy hash for tracking the deploy status. The deploy hash is crucial for verifying deployment progress or success.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/docs/developers/cli/transfers/multisig-deploy-transfer.md#2025-04-22_snippet_5\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"jsonrpc\": \"2.0\",\n  \"id\": -818883417884028030,\n  \"result\": {\n    \"api_version\": \"1.5.3\",\n    \"deploy_hash\": \"88c49fa9108485397a330f294914a6c2d614c581fbe0a31de1a954baad6d709b\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Testing the Compiled CEP-18 Contract\nDESCRIPTION: Command to build and test the compiled CEP-18 contract to ensure it functions correctly before deployment.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/versioned_docs/version-2.0.0/resources/beginner/cep18.md#2025-04-22_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nmake test\n```\n\n----------------------------------------\n\nTITLE: ExecutionResult Serialization Format\nDESCRIPTION: Defines the serialization format for execution results including success/failure status, effects, transfers, costs and error messages.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/docs/concepts/serialization/types.md#2025-04-22_snippet_2\n\nLANGUAGE: rust\nCODE:\n```\nenum ExecutionResult {\n    Failure {\n        effect: ExecutionEffect,\n        transfers: Vec<Transfer>,\n        cost: U512,\n        error_message: String\n    },\n    Success {\n        effect: ExecutionEffect,\n        transfers: Vec<Transfer>, \n        cost: U512\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Querying Account Information in Casper Network\nDESCRIPTION: Command to retrieve account information for a user in the Casper network. This shows balance and other account details using the public key.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/versioned_docs/version-2.0.0/operators/setup-network/create-private.md#2025-04-22_snippet_15\n\nLANGUAGE: sh\nCODE:\n```\ncasper-client get-account-info -n $NODE_ADDR\n  --public-key alice/public_key.pem\n```\n\n----------------------------------------\n\nTITLE: Running Contract Tests\nDESCRIPTION: Command to execute the contract's test suite\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/versioned_docs/version-2.0.0/resources/advanced/cross-contract.md#2025-04-22_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nmake test\n```\n\n----------------------------------------\n\nTITLE: Testing CEP-18 Contract\nDESCRIPTION: Builds and verifies the compiled contract.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/versioned_docs/version-1.5.X/resources/tokens/cep18/full-tutorial.md#2025-04-22_snippet_8\n\nLANGUAGE: bash\nCODE:\n```\nmake test\n```\n\n----------------------------------------\n\nTITLE: Initializing Deploy Parameters in JavaScript\nDESCRIPTION: Creates a `DeployUtil.DeployParams` object required for building a Casper deploy. It uses the delegator's public key hex string and the target network name ('testnet' or 'mainnet'). Depends on `DeployUtil` and `CLPublicKey` from the `casper-js-sdk`.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/docs/resources/advanced/list-cspr.md#2025-04-22_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nimport { DeployUtil, CLPublicKey } from 'casper-js-sdk';\n\nconst deployParams = new DeployUtil.DeployParams(\n  CLPublicKey.fromHex(publicKeyHex),\n  network_name // 'testnet' | 'mainnet'\n);\n```\n\n----------------------------------------\n\nTITLE: Querying CEP-18 Utility Contract Details\nDESCRIPTION: This command queries the global state to retrieve the full details of the CEP-18 utility contract. It uses the contract hash obtained from the previous query.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/versioned_docs/version-2.0.0/resources/tokens/cep18/query.md#2025-04-22_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\ncasper-client query-global-state -n http://<HOST IP>:<PORT> \\\n--key hash-a8fe057675930f0951d45816c55615228ac8af2b7b231788278dffcf1dd8c0ca \\\n--state-root-hash f9f73c3a4da5893b67c4cac94a5695d76cfefff61b050c98a7b19e2b8efd3933\n```\n\n----------------------------------------\n\nTITLE: Defining RFC 3339 Timestamp Schema in JSON\nDESCRIPTION: This JSON code snippet defines a schema for a timestamp field formatted according to RFC 3339. It specifies that the value must be an integer (uint64), with a minimum allowed value of 0, and includes a descriptive comment for documentation purposes. Dependencies include JSON Schema support, and it is intended for use in systems that require strict timestamp validation and documentation.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/condor/jsonrpc-comp/rpc-1.5/schema/Timestamp.json.md#2025-04-22_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"description\": \"Timestamp formatted as per RFC 3339\",\n    \"type\": \"integer\",\n    \"format\": \"uint64\",\n    \"minimum\": 0\n}\n```\n\n----------------------------------------\n\nTITLE: Updating Chainspec for New Administrators (TOML)\nDESCRIPTION: This TOML configuration snippet shows how to include new administrators in the chainspec.toml file for a network upgrade.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/versioned_docs/version-1.5.X/operators/setup-network/create-private.md#2025-04-22_snippet_29\n\nLANGUAGE: toml\nCODE:\n```\n[core]\nadministrators = [\"NEW_PUBLIC_KEY\"]\n```\n\n----------------------------------------\n\nTITLE: Installing OpenSSL Dependencies on MacOS\nDESCRIPTION: Commands to install required package configuration and OpenSSL libraries on MacOS using Homebrew.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/versioned_docs/version-1.5.X/resources/quick-start.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nbrew install pkg-config\nbrew install openssl\n```\n\n----------------------------------------\n\nTITLE: BlockAdded Event Structure\nDESCRIPTION: JSON structure of a BlockAdded event showing details of a new block added to the blockchain.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/versioned_docs/version-1.5.X/developers/dapps/monitor-and-consume-events.md#2025-04-22_snippet_4\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"BlockAdded\": {\n    \"block_hash\": \"62ddf902e9b6988b978413e2a9a2c6c95f8e1ddf452afd8e8a68f0ac22bf391a\",\n    \"block\": {\n      \"hash\": \"62ddf105e9b6988b378413e2a9a2c6c95f8e1ddf458afd8e8268f0ac72bfe91a\",\n      \"header\": {\n        \"parent_hash\": \"ed11ac2117edb9c5b26cf0cde318a807fd68e76206855a70429012ef16b557f5\",\n        \"state_root_hash\": \"3c1ad31757ae40f934de4825a818274e0c246d304c661daf656e22b65174ad66\",\n        \"body_hash\": \"eb2344f37193395bbc83587e498bc12ad5f0019055abcfa4c3b989d382a7969a\",\n        \"random_bit\": true,\n        \"accumulated_seed\": \"b8b671530f2221c8fdf201083f43c51e215e2f6ffcbe2d63238a2779eb177922\",\n        \"era_end\": null,\n        \"timestamp\": \"2023-01-01T09:55:25.312Z\",\n        \"era_id\": 8426,\n        \"height\": 1566677,\n        \"protocol_version\": \"1.4.13\"\n      },\n      \"body\": {\n        \"proposer\": \"010e5669b0f0545e2b32bc66363b9d3d4390fca56bf52305f1411b7fa12ca311c7\",\n        \"deploy_hashes\": [],\n        \"transfer_hashes\": []\n      },\n      \"proofs\": []\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining ValidatorChange Schema in JSON\nDESCRIPTION: Defines the schema for ValidatorChange, which represents changes to a validator's status between two eras. It includes possible states like Added, Removed, Banned, CannotPropose, and SeenAsFaulty.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/condor/jsonrpc-comp/rpc-2.0/schema/components.json.md#2025-04-22_snippet_82\n\nLANGUAGE: JSON\nCODE:\n```\n\"ValidatorChange\": {\n    \"description\": \"A change to a validator's status between two eras.\",\n    \"oneOf\": [\n        {\n            \"description\": \"The validator got newly added to the validator set.\",\n            \"type\": \"string\",\n            \"enum\": [\n                \"Added\"\n            ]\n        },\n        {\n            \"description\": \"The validator was removed from the validator set.\",\n            \"type\": \"string\",\n            \"enum\": [\n                \"Removed\"\n            ]\n        },\n        {\n            \"description\": \"The validator was banned from this era.\",\n            \"type\": \"string\",\n            \"enum\": [\n                \"Banned\"\n            ]\n        },\n        {\n            \"description\": \"The validator was excluded from proposing new blocks in this era.\",\n            \"type\": \"string\",\n            \"enum\": [\n                \"CannotPropose\"\n            ]\n        },\n        {\n            \"description\": \"We saw the validator misbehave in this era.\",\n            \"type\": \"string\",\n            \"enum\": [\n                \"SeenAsFaulty\"\n            ]\n        }\n    ]\n}\n```\n\n----------------------------------------\n\nTITLE: Installing cargo on Ubuntu - Bash\nDESCRIPTION: Installs the Rust package manager and build system, cargo, on Linux via apt. cargo is used to build and manage Rust projects, including Casper contracts. Requires Ubuntu 20.04 or compatible.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/versioned_docs/version-1.5.X/developers/prerequisites.md#2025-04-22_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nsudo apt install cargo\n```\n\n----------------------------------------\n\nTITLE: Defining Deploy Execution Result Schema - JSON\nDESCRIPTION: This snippet provides a JSON Schema for the outcome of a deploy execution in Casper-Network, detailing structure for both success and failure cases. It outlines the required object properties for each scenario, referencing external schemas for properties such as 'effect', 'transfers', and 'cost', and enforcing strict validation through 'required' and 'additionalProperties' constraints. The schema requires objects to be marked as either 'Failure' (with error_message) or 'Success' and is intended for API validation and documentation purposes in backend or client implementations.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/condor/jsonrpc-comp/rpc-2.0/schema/ExecutionResultV1.json.md#2025-04-22_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"description\": \"The result of executing a single deploy.\",\n    \"oneOf\": [\n        {\n            \"description\": \"The result of a failed execution.\",\n            \"type\": \"object\",\n            \"required\": [\n                \"Failure\"\n            ],\n            \"properties\": {\n                \"Failure\": {\n                    \"type\": \"object\",\n                    \"required\": [\n                        \"cost\",\n                        \"effect\",\n                        \"error_message\",\n                        \"transfers\"\n                    ],\n                    \"properties\": {\n                        \"effect\": {\n                            \"description\": \"The effect of executing the deploy.\",\n                            \"allOf\": [\n                                {\n                                    \"$ref\": \"#/components/schemas/ExecutionEffect\"\n                                }\n                            ]\n                        },\n                        \"transfers\": {\n                            \"description\": \"A record of version 1 Transfers performed while executing the deploy.\",\n                            \"type\": \"array\",\n                            \"items\": {\n                                \"$ref\": \"#/components/schemas/TransferAddr\"\n                            }\n                        },\n                        \"cost\": {\n                            \"description\": \"The cost of executing the deploy.\",\n                            \"allOf\": [\n                                {\n                                    \"$ref\": \"#/components/schemas/U512\"\n                                }\n                            ]\n                        },\n                        \"error_message\": {\n                            \"description\": \"The error message associated with executing the deploy.\",\n                            \"type\": \"string\"\n                        }\n                    },\n                    \"additionalProperties\": false\n                }\n            },\n            \"additionalProperties\": false\n        },\n        {\n            \"description\": \"The result of a successful execution.\",\n            \"type\": \"object\",\n            \"required\": [\n                \"Success\"\n            ],\n            \"properties\": {\n                \"Success\": {\n                    \"type\": \"object\",\n                    \"required\": [\n                        \"cost\",\n                        \"effect\",\n                        \"transfers\"\n                    ],\n                    \"properties\": {\n                        \"effect\": {\n                            \"description\": \"The effect of executing the deploy.\",\n                            \"allOf\": [\n                                {\n                                    \"$ref\": \"#/components/schemas/ExecutionEffect\"\n                                }\n                            ]\n                        },\n                        \"transfers\": {\n                            \"description\": \"A record of Transfers performed while executing the deploy.\",\n                            \"type\": \"array\",\n                            \"items\": {\n                                \"$ref\": \"#/components/schemas/TransferAddr\"\n                            }\n                        },\n                        \"cost\": {\n                            \"description\": \"The cost of executing the deploy.\",\n                            \"allOf\": [\n                                {\n                                    \"$ref\": \"#/components/schemas/U512\"\n                                }\n                            ]\n                        }\n                    },\n                    \"additionalProperties\": false\n                }\n            },\n            \"additionalProperties\": false\n        }\n    ]\n} \n```\n\n----------------------------------------\n\nTITLE: Importing Test Builders and Constants in Rust\nDESCRIPTION: This snippet demonstrates importing necessary builders and constants from Casper test support crates and types for use within the smart contract test module.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/docs/developers/writing-onchain-code/testing-contracts.md#2025-04-22_snippet_3\n\nLANGUAGE: rust\nCODE:\n```\n    // Outlining aspects of the Casper test support crate to include.\n    use casper_engine_test_support::{\n        ExecuteRequestBuilder, InMemoryWasmTestBuilder, DEFAULT_ACCOUNT_ADDR,\n        DEFAULT_RUN_GENESIS_REQUEST,\n    };\n    // Custom Casper types that will be used within this test.\n    use casper_types::{runtime_args, ContractHash, RuntimeArgs};\n```\n\n----------------------------------------\n\nTITLE: Seigniorage Configuration - Casper Network\nDESCRIPTION: TOML configuration to disable compute rewards, affecting seigniorage allocations.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/docs/operators/setup-network/create-private.md#2025-04-22_snippet_23\n\nLANGUAGE: toml\nCODE:\n```\n[core]\ncompute_rewards = false\n```\n\n----------------------------------------\n\nTITLE: Querying Specific Contract Data Value ('count')\nDESCRIPTION: This command queries the global state for the value stored under a specific path within the account's named keys ('counter/count'). It uses the `-q` argument with a path to directly retrieve the value of the 'count' variable stored by the 'counter' contract.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/docs/resources/beginner/counter-testnet/walkthrough.md#2025-04-22_snippet_10\n\nLANGUAGE: bash\nCODE:\n```\ncasper-client query-global-state --node-address http://[NODE_IP]:7777 \\\n    --state-root-hash [STATE_ROOT_HASH] \\\n    --key [ACCOUNT_HASH] -q \"counter/count\"\n```\n\n----------------------------------------\n\nTITLE: Registering a Recipient for CEP-78 Token using JavaScript Client\nDESCRIPTION: Example of registering a recipient for a CEP-78 token using the JavaScript client. This is necessary when OwnerReverseLookupMode is set to Complete.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/versioned_docs/version-1.5.X/resources/tokens/cep78/js-tutorial.md#2025-04-22_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nconst registerDeploy = cc.register(\n  {\n    tokenOwner: USER1_KEYS.publicKey,\n  },\n  \"1000000000\",\n  USER1_KEYS.publicKey,\n  [USER1_KEYS]\n);\n\nconst registerDeployHash = await registerDeploy.send(\"http://localhost:11101/rpc\");\n```\n\n----------------------------------------\n\nTITLE: Schema Definition for Finality Signatures in JSON\nDESCRIPTION: This JSON schema defines a list of integers that serve as identifiers for finality signatures associated with a specific past block height in a blockchain network. The schema specifies that the finality signatures correspond to blocks whose height is delayed by a defined number of blocks (`signature_rewards_max_delay`). Dependencies include the chainspec document that defines `signature_rewards_max_delay`. Each item in the array is an unsigned 8-bit integer.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/condor/jsonrpc-comp/rpc-2.0/schema/SingleBlockRewardedSignatures.json.md#2025-04-22_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"description\": \"List of identifiers for finality signatures for a particular past block.\\n\\nThat past block height is current_height - signature_rewards_max_delay, the latter being defined in the chainspec.\\n\\nWe need to wait for a few blocks to pass (`signature_rewards_max_delay`) to store the finality signers because we need a bit of time to get the block finality.\",\n    \"type\": \"array\",\n    \"items\": {\n        \"type\": \"integer\",\n        \"format\": \"uint8\",\n        \"minimum\": 0\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Sample Response: Querying Named Key Value by Contract (JSON)\nDESCRIPTION: JSON response example for fetching a named key's value with casper-client. Returns a CLValue object indicating contract variable type (here I32), payload, and parsed integer, with proof. Useful for state verification or monitoring.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/docs/developers/cli/querying-global-state.md#2025-04-22_snippet_21\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"jsonrpc\": \"2.0\",\n  \"id\": -672620332620630019,\n  \"result\": {\n    \"api_version\": \"2.0.0\",\n    \"block_header\": null,\n    \"stored_value\": {\n      \"CLValue\": {\n        \"cl_type\": \"I32\",\n        \"bytes\": \"00000000\",\n        \"parsed\": 0\n      }\n    },\n    \"merkle_proof\": \"[7272 hex chars]\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Declaring Transform Log Schema - OpenAPI - JSON\nDESCRIPTION: Defines a JSON schema representing an array of transform logs, where each item in the array must conform to the 'TransformV2' schema. This is intended for use in API specifications (such as OpenAPI) to structure execution log outputs. The 'description' field clarifies the intent, while the '$ref' indicates a dependency on a separately defined component schema named 'TransformV2'. No default values are specified; consumers should conform to the referenced schema for each transform record. Limitations depend on the completeness of 'TransformV2' and potential array size.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/condor/jsonrpc-comp/rpc-2.0/schema/Effects.json.md#2025-04-22_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"description\": \"A log of all transforms produced during execution.\",\n    \"type\": \"array\",\n    \"items\": {\n        \"$ref\": \"#/components/schemas/TransformV2\"\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Up Casper Labs Package Repository using Bash\nDESCRIPTION: Bash commands to create the necessary directory for APT keyrings, download the Casper repository public key, add the Casper repository source to APT's sources list, and update the package list.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/versioned_docs/version-1.5.X/operators/setup/install-node.md#2025-04-22_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nsudo mkdir -m 0755 -p /etc/apt/keyrings/\nsudo curl https://repo.casper.network/casper-repo-pubkey.gpg --output /etc/apt/keyrings/casper-repo-pubkey.gpg\necho \"deb [arch=amd64 signed-by=/etc/apt/keyrings/casper-repo-pubkey.gpg] https://repo.casper.network/releases focal main\" | sudo tee -a /etc/apt/sources.list.d/casper.list\nsudo apt update\n```\n\n----------------------------------------\n\nTITLE: Running Development Server with Vite\nDESCRIPTION: This bash command starts the development server for the application using 'vite', allowing you to view the application by navigating to the displayed URL.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/versioned_docs/version-1.5.X/developers/dapps/template-frontend.md#2025-04-22_snippet_12\n\nLANGUAGE: bash\nCODE:\n```\nvite dev\n```\n\n----------------------------------------\n\nTITLE: Formatting Notes in Markdown\nDESCRIPTION: Demonstrates two different ways to format notes in Markdown documentation - using bold text with a quote block or using note directive syntax.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/README/STANDARDS.md#2025-04-22_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n**Note:**\n\n> To use this example on the Mainnet, replace *chain-name* as casper.\n```\n\n----------------------------------------\n\nTITLE: Transaction Runtime Schema Definition in JSON\nDESCRIPTION: Defines the schema for the runtime used to execute a transaction, which can be either Casper Version 1 or Version 2 Virtual Machine.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/condor/jsonrpc-comp/rpc-2.0/schema.json.md#2025-04-22_snippet_41\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"description\": \"Runtime used to execute a Transaction.\",\n  \"oneOf\": [\n    {\n      \"description\": \"The Casper Version 1 Virtual Machine.\",\n      \"type\": \"string\",\n      \"enum\": [\n        \"VmCasperV1\"\n      ]\n    },\n    {\n      \"description\": \"The Casper Version 2 Virtual Machine.\",\n      \"type\": \"string\",\n      \"enum\": [\n        \"VmCasperV2\"\n      ]\n    }\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Vite Project\nDESCRIPTION: Commands to install Vite globally and create a new React project.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/docs/developers/dapps/template-frontend.md#2025-04-22_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nnpm install -g vite\nnpm create vite@latest\n```\n\n----------------------------------------\n\nTITLE: Starting Development Server (Bash)\nDESCRIPTION: Runs the Vite development server. This command starts a local server, typically enabling features like Hot Module Replacement (HMR) for a better development experience.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/docs/developers/dapps/template-frontend.md#2025-04-22_snippet_16\n\nLANGUAGE: bash\nCODE:\n```\nvite dev\n```\n\n----------------------------------------\n\nTITLE: Retrieving State Root Hash using Casper-Client\nDESCRIPTION: Command to fetch the current state root hash from a specified Casper node. The state root hash acts as an identifier for the network's state at a particular moment. Requires the node's server address.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/docs/resources/beginner/counter-testnet/commands.md#2025-04-22_snippet_0\n\nLANGUAGE: rust\nCODE:\n```\ncasper-client get-state-root-hash --node-address [NODE_SERVER_ADDRESS]\n```\n\n----------------------------------------\n\nTITLE: JSON-RPC HTTP Server Address - Markdown\nDESCRIPTION: Defines the JSON-RPC server's listening address in the `config.toml` file under the `rpc_server` section. Use port 7777 for JSON-RPC API interactions. Essential for node operations like bonding and unbonding.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/versioned_docs/version-1.5.X/operators/setup/node-endpoints.md#2025-04-22_snippet_1\n\nLANGUAGE: Markdown\nCODE:\n```\naddress = '0.0.0.0:7777'\n```\n\n----------------------------------------\n\nTITLE: Initializing Contract with Dictionary\nDESCRIPTION: Example of creating a dictionary named 'ledger' within a contract's initialization entry point, along with creating a fundraising purse\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/docs/concepts/dictionaries.md#2025-04-22_snippet_1\n\nLANGUAGE: rust\nCODE:\n```\n#[no_mangle]\npub extern \"C\" fn init() {\n    let fundraising_purse = system::create_purse();\n    runtime::put_key(\"fundraising_purse\", fundraising_purse.into());\n    // Create a dictionary to track the mapping of account hashes to number of donations made.\n    storage::new_dictionary(\"ledger\").unwrap_or_revert();\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Transaction Invocation Target Schema - JSON - JSON\nDESCRIPTION: This schema allows specifying the identifier of a stored entity or package used as a transaction's target, supporting identification by hash, name, package hash, or package name. Each variant is described as a required object with type-appropriate properties. It is essential for ensuring valid references to invocable entities and supports versioning when identifying packages.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/condor/jsonrpc-comp/rpc-2.0/schema/components.json.md#2025-04-22_snippet_20\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"description\": \"Identifier of a `Stored` transaction target.\",\n    \"oneOf\": [\n        {\n            \"description\": \"Hex-encoded entity address identifying the invocable entity.\",\n            \"type\": \"object\",\n            \"required\": [\n                \"ByHash\"\n            ],\n            \"properties\": {\n                \"ByHash\": {\n                    \"type\": \"string\"\n                }\n            },\n            \"additionalProperties\": false\n        },\n        {\n            \"description\": \"The alias identifying the invocable entity.\",\n            \"type\": \"object\",\n            \"required\": [\n                \"ByName\"\n            ],\n            \"properties\": {\n                \"ByName\": {\n                    \"type\": \"string\"\n                }\n            },\n            \"additionalProperties\": false\n        },\n        {\n            \"description\": \"The address and optional version identifying the package.\",\n            \"type\": \"object\",\n            \"required\": [\n                \"ByPackageHash\"\n            ],\n            \"properties\": {\n                \"ByPackageHash\": {\n                    \"type\": \"object\",\n                    \"required\": [\n                        \"addr\"\n                    ],\n                    \"properties\": {\n                        \"addr\": {\n                            \"description\": \"Hex-encoded address of the package.\",\n                            \"type\": \"string\"\n                        },\n                        \"version\": {\n                            \"description\": \"The package version.\\n\\nIf `None`, the latest enabled version is implied.\",\n                            \"type\": [\n                                \"integer\",\n                                \"null\"\n                            ],\n                            \"format\": \"uint32\",\n                            \"minimum\": 0.0\n                        }\n                    },\n                    \"additionalProperties\": false\n                }\n            },\n            \"additionalProperties\": false\n        },\n        {\n            \"description\": \"The alias and optional version identifying the package.\",\n            \"type\": \"object\",\n            \"required\": [\n                \"ByPackageName\"\n            ],\n            \"properties\": {\n                \"ByPackageName\": {\n                    \"type\": \"object\",\n                    \"required\": [\n                        \"name\"\n                    ],\n                    \"properties\": {\n                        \"name\": {\n                            \"description\": \"The package name.\",\n                            \"type\": \"string\"\n                        },\n                        \"version\": {\n                            \"description\": \"The package version.\\n\\nIf `None`, the latest enabled version is implied.\",\n                            \"type\": [\n                                \"integer\",\n                                \"null\"\n                            ],\n                            \"format\": \"uint32\",\n                            \"minimum\": 0.0\n                        }\n                    },\n                    \"additionalProperties\": false\n                }\n            },\n            \"additionalProperties\": false\n        }\n    ]\n}\n```\n\n----------------------------------------\n\nTITLE: Ethereum View Method Declaration\nDESCRIPTION: Shows how to declare a public view method in Ethereum that returns data without modifying state.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/versioned_docs/version-1.5.X/resources/moving-to-casper.md#2025-04-22_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nfunction balanceOf(address _owner) public view returns (uint256 return_parameter) { }\n```\n\n----------------------------------------\n\nTITLE: Querying Contract Deployment Success using Casper-Client\nDESCRIPTION: This Bash command queries the deployment status of a contract on the Casper blockchain using `casper-client`. It takes the deploy hash as an argument and prints the execution result along with any success or error messages.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/versioned_docs/version-2.0.0/resources/advanced/cross-contract.md#2025-04-22_snippet_17\n\nLANGUAGE: Bash\nCODE:\n```\ncasper-client get-deploy \\\n    --node-address http://136.243.187.84:7777 af42bc6dbc58f677d138eb968d897f965f1ed118a40980bc16efbcc2a0c71832\n```\n\n----------------------------------------\n\nTITLE: Example of Wasm-based Undelegation\nDESCRIPTION: Example command showing how to undelegate 100 CSPR using the compiled Wasm method on the Casper Testnet.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/docs/developers/cli/undelegate.md#2025-04-22_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\ncasper-client put-deploy \\\n--node-address http://65.21.75.254:7777  \\\n--chain-name casper-test \\\n--secret-key ~/KEYS/secret_key.pem \\\n--payment-amount 6000000000 \\\n--session-path ~/undelegate.wasm \\\n--session-arg \"validator:public_key='01aa17f7b9889480b1bd34c3f94f263b229c7a9b01dd4dda19c2dd1d38d176c7a0'\" \\\n--session-arg \"amount:u512='100000000000'\" \\\n--session-arg \"delegator:public_key='01e3d3392c2e0b943abe709b25de5c353e5e1e9d95c7a76e3dd343d8aa1aa08d51'\"\n```\n\n----------------------------------------\n\nTITLE: Installing pip on Linux\nDESCRIPTION: Command to install pip, the Python package manager, on a Linux system using apt.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/versioned_docs/version-2.0.0/developers/dapps/setup-nctl.md#2025-04-22_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n$ sudo apt install python3-pip\n```\n\n----------------------------------------\n\nTITLE: Describing ByteCodeKind Serialization (Casper Network)\nDESCRIPTION: Defines ByteCodeKind, indicating the type of bytecode. It serializes as a single u8 value: 0 signifies empty bytecode, and 1 signifies V1CasperWasm for the V1 execution engine.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/versioned_docs/version-2.0.0/concepts/serialization/types.md#2025-04-22_snippet_9\n\nLANGUAGE: Text\nCODE:\n```\n## ByteCodeKind\n\nThe type of byte code, serialized as a single `u8` value. A `0` indicates empty byte code, while a `1` indicates a `V1CasperWasm` to be executed with the first version of the Casper execution engine.\n```\n\n----------------------------------------\n\nTITLE: Exiting User Account in Bash\nDESCRIPTION: A simple command to exit the current user session and return to the previous sudo-er or root account. Essential for switching users during setup.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/docs/operators/setup/non-root-user.md#2025-04-22_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nexit\n```\n\n----------------------------------------\n\nTITLE: Checking Delegation Wasm Location\nDESCRIPTION: Command to verify the location of the compiled delegate.wasm file.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/docs/developers/cli/delegate.md#2025-04-22_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nls target/wasm32-unknown-unknown/release/delegate.wasm\n```\n\n----------------------------------------\n\nTITLE: Defining TransformKindV2 Schema in JSON\nDESCRIPTION: A comprehensive JSON schema for TransformKindV2, which represents different transformations applied to the global state during execution in the Casper Network. The schema includes variants for identity operations, write operations, numeric additions, key management, and failure handling. All arithmetic transformations are noted to be commutative.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/condor/jsonrpc-comp/rpc-2.0/schema/TransformKindV2.json.md#2025-04-22_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"description\": \"Representation of a single transformation occurring during execution.\\n\\nNote that all arithmetic variants of `TransformKindV2` are commutative which means that a given collection of them can be executed in any order to produce the same end result.\",\n    \"oneOf\": [\n        {\n            \"description\": \"An identity transformation that does not modify a value in the global state.\\n\\nCreated as a result of reading from the global state.\",\n            \"type\": \"string\",\n            \"enum\": [\n                \"Identity\"\n            ]\n        },\n        {\n            \"description\": \"Writes a new value in the global state.\",\n            \"type\": \"object\",\n            \"required\": [\n                \"Write\"\n            ],\n            \"properties\": {\n                \"Write\": {\n                    \"$ref\": \"#/components/schemas/StoredValue\"\n                }\n            },\n            \"additionalProperties\": false\n        },\n        {\n            \"description\": \"A wrapping addition of an `i32` to an existing numeric value (not necessarily an `i32`) in the global state.\",\n            \"type\": \"object\",\n            \"required\": [\n                \"AddInt32\"\n            ],\n            \"properties\": {\n                \"AddInt32\": {\n                    \"type\": \"integer\",\n                    \"format\": \"int32\"\n                }\n            },\n            \"additionalProperties\": false\n        },\n        {\n            \"description\": \"A wrapping addition of a `u64` to an existing numeric value (not necessarily an `u64`) in the global state.\",\n            \"type\": \"object\",\n            \"required\": [\n                \"AddUInt64\"\n            ],\n            \"properties\": {\n                \"AddUInt64\": {\n                    \"type\": \"integer\",\n                    \"format\": \"uint64\",\n                    \"minimum\": 0\n                }\n            },\n            \"additionalProperties\": false\n        },\n        {\n            \"description\": \"A wrapping addition of a `U128` to an existing numeric value (not necessarily an `U128`) in the global state.\",\n            \"type\": \"object\",\n            \"required\": [\n                \"AddUInt128\"\n            ],\n            \"properties\": {\n                \"AddUInt128\": {\n                    \"$ref\": \"#/components/schemas/U128\"\n                }\n            },\n            \"additionalProperties\": false\n        },\n        {\n            \"description\": \"A wrapping addition of a `U256` to an existing numeric value (not necessarily an `U256`) in the global state.\",\n            \"type\": \"object\",\n            \"required\": [\n                \"AddUInt256\"\n            ],\n            \"properties\": {\n                \"AddUInt256\": {\n                    \"$ref\": \"#/components/schemas/U256\"\n                }\n            },\n            \"additionalProperties\": false\n        },\n        {\n            \"description\": \"A wrapping addition of a `U512` to an existing numeric value (not necessarily an `U512`) in the global state.\",\n            \"type\": \"object\",\n            \"required\": [\n                \"AddUInt512\"\n            ],\n            \"properties\": {\n                \"AddUInt512\": {\n                    \"$ref\": \"#/components/schemas/U512\"\n                }\n            },\n            \"additionalProperties\": false\n        },\n        {\n            \"description\": \"Adds new named keys to an existing entry in the global state.\\n\\nThis transform assumes that the existing stored value is either an Account or a Contract.\",\n            \"type\": \"object\",\n            \"required\": [\n                \"AddKeys\"\n            ],\n            \"properties\": {\n                \"AddKeys\": {\n                    \"$ref\": \"#/components/schemas/NamedKeys\"\n                }\n            },\n            \"additionalProperties\": false\n        },\n        {\n            \"description\": \"Removes the pathing to the global state entry of the specified key. The pruned element remains reachable from previously generated global state root hashes, but will not be included in the next generated global state root hash and subsequent state accumulated from it.\",\n            \"type\": \"object\",\n            \"required\": [\n                \"Prune\"\n            ],\n            \"properties\": {\n                \"Prune\": {\n                    \"$ref\": \"#/components/schemas/Key\"\n                }\n            },\n            \"additionalProperties\": false\n        },\n        {\n            \"description\": \"Represents the case where applying a transform would cause an error.\",\n            \"type\": \"object\",\n            \"required\": [\n                \"Failure\"\n            ],\n            \"properties\": {\n                \"Failure\": {\n                    \"$ref\": \"#/components/schemas/TransformError\"\n                }\n            },\n            \"additionalProperties\": false\n        }\n    ]\n}\n```\n\n----------------------------------------\n\nTITLE: Cloning the CEP-18 Repository\nDESCRIPTION: Command to clone the CEP-18 fungible token contract repository from GitHub and change into the project directory.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/versioned_docs/version-2.0.0/resources/tokens/cep18/full-tutorial.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ngit clone https://github.com/casper-ecosystem/cep18 && cd cep18\n```\n\n----------------------------------------\n\nTITLE: Hash Types Table Structure in Markdown\nDESCRIPTION: Markdown table showing the mapping between different hash types, their prefixes, and example values in the Casper Network. Includes account hashes, contract hashes, and various key types.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/versioned_docs/version-1.5.X/concepts/hash-types.md#2025-04-22_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n|Type|Prefix|Example|\n|---|---|---|\n|PublicKey | | 018a88e3dd7409f195fd52db2d3cba5d72ca6709bf1d94121bf3748801b40f6f5c|\n|AccountHash | account-hash- | account-hash-ef4687f74d465826239bab05c4e1bdd2223dd8c201b96f361f775125e624ef70|\n|ContractHash | contract- | contract-0101010101010101010101010101010101010101010101010101010101010101|\n|ContractPackageHash | contract-package- | contract-package-0101010101010101010101010101010101010101010101010101010101010101|\n|Key::Account | account-hash-| account-hash-ef4687f74d465826239bab05c4e1bdd2223dd8c201b96f361f775125e624ef70|\n|Key::Hash | hash- | hash-0101010101010101010101010101010101010101010101010101010101010101|\n|Key::URef | uref- | uref-0101010101010101010101010101010101010101010101010101010101010101-001|\n|Key::Transfer | transfer- | transfer-0101010101010101010101010101010101010101010101010101010101010101|\n|Key::DeployInfo | deploy- | deploy-0101010101010101010101010101010101010101010101010101010101010101|\n|Key::EraInfo | era- | era-1|\n|Key::Balance | balance- | balance-0101010101010101010101010101010101010101010101010101010101010101|\n|Key::Bid | bid- | bid-ef4687f74d465826239bab05c4e1bdd2223dd8c201b96f361f775125e624ef70|\n|Key::Withdraw | withdraw- | withdraw-ef4687f74d465826239bab05c4e1bdd2223dd8c201b96f361f775125e624ef70|\n|Key::Dictionary | dictionary- | dictionary-0101010101010101010101010101010101010101010101010101010101010101|\n|Key::SystemContractRegistry | system-contract-registry- |system-contract-registry-00000000000000000000000000000000|\n|Key::EraSummary | era-summary- |era-summary-00000000000000000000000000000000|\n```\n\n----------------------------------------\n\nTITLE: Querying Contract Package Details in Bash\nDESCRIPTION: This Bash command queries the global state to retrieve details about a contract package, including its versions and associated contract hashes.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/versioned_docs/version-2.0.0/resources/beginner/upgrade-contract.md#2025-04-22_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\ncasper-client query-global-state \\\n    --node-address http://[NODE_IP]:7777 \\\n    --state-root-hash [STATE_ROOT_HASH] \\\n    --key [ACCOUNT_HASH] -q \"counter_package_name\"\n```\n\n----------------------------------------\n\nTITLE: Defining Transfer Schema in JSON\nDESCRIPTION: This JSON schema defines the structure representing a transfer of funds from one purse to another within the Casper Network. It includes required properties like amount, deploy hash, sender account hash, gas cost, source URef, and target URef. It also allows for an optional receiver account hash ('to') and an optional user-defined ID. It references external schemas for 'DeployHash', 'AccountHash', 'URef', and 'U512'.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/condor/jsonrpc-comp/rpc-1.5/schema/components.json.md#2025-04-22_snippet_33\n\nLANGUAGE: json\nCODE:\n```\n\"description\": \"Represents a transfer from one purse to another\",\n\"type\": \"object\",\n\"required\": [\n    \"amount\",\n    \"deploy_hash\",\n    \"from\",\n    \"gas\",\n    \"source\",\n    \"target\"\n],\n\"properties\": {\n    \"deploy_hash\": {\n        \"description\": \"Deploy that created the transfer\",\n        \"allOf\": [\n            {\n                \"$ref\": \"#/components/schemas/DeployHash\"\n            }\n        ]\n    },\n    \"from\": {\n        \"description\": \"Account from which transfer was executed\",\n        \"allOf\": [\n            {\n                \"$ref\": \"#/components/schemas/AccountHash\"\n            }\n        ]\n    },\n    \"to\": {\n        \"description\": \"Account to which funds are transferred\",\n        \"anyOf\": [\n            {\n                \"$ref\": \"#/components/schemas/AccountHash\"\n            },\n            {\n                \"type\": \"null\"\n            }\n        ]\n    },\n    \"source\": {\n        \"description\": \"Source purse\",\n        \"allOf\": [\n            {\n                \"$ref\": \"#/components/schemas/URef\"\n            }\n        ]\n    },\n    \"target\": {\n        \"description\": \"Target purse\",\n        \"allOf\": [\n            {\n                \"$ref\": \"#/components/schemas/URef\"\n            }\n        ]\n    },\n    \"amount\": {\n        \"description\": \"Transfer amount\",\n        \"allOf\": [\n            {\n                \"$ref\": \"#/components/schemas/U512\"\n            }\n        ]\n    },\n    \"gas\": {\n        \"description\": \"Gas\",\n        \"allOf\": [\n            {\n                \"$ref\": \"#/components/schemas/U512\"\n            }\n        ]\n    },\n    \"id\": {\n        \"description\": \"User-defined id\",\n        \"type\": [\n            \"integer\",\n            \"null\"\n        ],\n        \"format\": \"uint64\",\n        \"minimum\": 0.0\n    }\n},\n\"additionalProperties\": false\n\n```\n\n----------------------------------------\n\nTITLE: Node TLS Configuration with Certificate Authority in Casper Network\nDESCRIPTION: TOML configuration example showing how to set up a node with the generated TLS certificate, secret key, and CA certificate. This configuration ensures only nodes with certificates signed by the same CA can join the network.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/docs/operators/setup-network/create-private.md#2025-04-22_snippet_15\n\nLANGUAGE: toml\nCODE:\n```\n[network.identity]\ntls_certificate = \"node_1_cert.pem\"\nsecret_key = \"node_1.pem\"\nca_certificate = \"ca_cert.pem\"\n```\n\n----------------------------------------\n\nTITLE: Setting Environment Variables for Node Testing\nDESCRIPTION: Commands to export environment variables defining the node address and chain name for testing the private network. These variables are used in subsequent command-line operations.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/versioned_docs/version-1.5.X/operators/setup-network/create-private.md#2025-04-22_snippet_11\n\nLANGUAGE: sh\nCODE:\n```\nexport NODE_ADDR=http://18.224.190.213:7777\nexport CHAIN_NAME=\"private-test\"\n```\n\n----------------------------------------\n\nTITLE: Cloning Casper Node Repository - Bash\nDESCRIPTION: This snippet clones the official casper-node GitHub repository using Git, which is a required step for acquiring and building the `delegate.wasm` contract. Prerequisites include Git installed on your environment. The resulting directory will contain all Casper node and contract source files needed for subsequent build steps.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/versioned_docs/version-2.0.0/developers/cli/delegate.md#2025-04-22_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\ngit clone https://github.com/casper-network/casper-node\n```\n\n----------------------------------------\n\nTITLE: REST HTTP Server Address - Markdown\nDESCRIPTION: Sets the REST HTTP server listening address in the `config.toml` file. Port 8888 enhances network health metrics. Although not mandatory, it's recommended to be open.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/versioned_docs/version-1.5.X/operators/setup/node-endpoints.md#2025-04-22_snippet_2\n\nLANGUAGE: Markdown\nCODE:\n```\naddress = '0.0.0.0:8888'\n```\n\n----------------------------------------\n\nTITLE: Source Account JSON-RPC Request\nDESCRIPTION: Sample JSON-RPC request format for querying the source account balance.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/versioned_docs/version-1.5.X/developers/cli/transfers/verify-transfer.md#2025-04-22_snippet_7\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"jsonrpc\": \"2.0\",\n  \"method\": \"query_balance\",\n  \"params\": {\n    \"state_identifier\": {\n      \"StateRootHash\": \"fdb1474d441ec0fcbf2e088f1630dbf98d3bcf7f7a7fe298303797f35b8cb4e1\"\n    },\n    \"purse_identifier\": {\n      \"main_purse_under_account_hash\": \"account-hash-e70dbca48c2d31bc2d754e51860ceaa8a1a49dc627b20320b0ecee1b6d9ce655\"\n    }\n  },\n  \"id\": 6\n}\n```\n\n----------------------------------------\n\nTITLE: Switching to Condor-Compatible Branch for Casper Client\nDESCRIPTION: This snippet shows how to switch to the Condor-compatible branch of the Casper Client.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/src/pages/condor/setting-up-condor-local.md#2025-04-22_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\ngit checkout feat-track-node-2.0\n```\n\n----------------------------------------\n\nTITLE: Defining WithdrawPurse Schema in JSON\nDESCRIPTION: Schema definition for a WithdrawPurse, which is a legacy structure in the Casper Network. It contains information about unbonding operations including the bonding purse, public keys, era of creation, and amount.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/condor/jsonrpc-comp/rpc-2.0/schema.json.md#2025-04-22_snippet_58\n\nLANGUAGE: json\nCODE:\n```\n\"WithdrawPurse\": {\n  \"description\": \"A withdraw purse, a legacy structure.\",\n  \"type\": \"object\",\n  \"required\": [\n    \"amount\",\n    \"bonding_purse\",\n    \"era_of_creation\",\n    \"unbonder_public_key\",\n    \"validator_public_key\"\n  ],\n  \"properties\": {\n    \"bonding_purse\": {\n      \"description\": \"Bonding Purse\",\n      \"allOf\": [\n        {\n          \"$ref\": \"#/components/schemas/URef\"\n        }\n      ]\n    },\n    \"validator_public_key\": {\n      \"description\": \"Validators public key.\",\n      \"allOf\": [\n        {\n          \"$ref\": \"#/components/schemas/PublicKey\"\n        }\n      ]\n    },\n    \"unbonder_public_key\": {\n      \"description\": \"Unbonders public key.\",\n      \"allOf\": [\n        {\n          \"$ref\": \"#/components/schemas/PublicKey\"\n        }\n      ]\n    },\n    \"era_of_creation\": {\n      \"description\": \"Era in which this unbonding request was created.\",\n      \"allOf\": [\n        {\n          \"$ref\": \"#/components/schemas/EraId\"\n        }\n      ]\n    },\n    \"amount\": {\n      \"description\": \"Unbonding Amount.\",\n      \"allOf\": [\n        {\n          \"$ref\": \"#/components/schemas/U512\"\n        }\n      ]\n    }\n  },\n  \"additionalProperties\": false\n}\n```\n\n----------------------------------------\n\nTITLE: Exporting Navbar Item - Docusaurus Configuration - JavaScript\nDESCRIPTION: This snippet demonstrates how to define a single navbar item object within a module.exports array in a Docusaurus navigation configuration file. The object includes properties for routing, active path highlighting, display label, and sidebar position. This configuration is a fragment to be included alongside other navigation links in an exported array. Key parameters include 'to' and 'activeBasePath' for route mapping, 'label' for visible text, and 'position' for placement on the navbar. Assumes 'routePrefix' is defined in the scope or imported.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/README/DEVELOPERS.md#2025-04-22_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\n    {\n        to: `${routePrefix}/staking`,\n        activeBasePath: `${routePrefix}/staking`,\n        label: \"Staking\",\n        position: \"left\",\n    },\n\n```\n\n----------------------------------------\n\nTITLE: Chainspec Configuration Example\nDESCRIPTION: Example chainspec.toml configuration showing protocol version and network settings\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/versioned_docs/version-2.0.0/operators/setup-network/staging-files-for-new-network.md#2025-04-22_snippet_4\n\nLANGUAGE: toml\nCODE:\n```\n[protocol]\nversion = '1.0.0'\nactivation_point = '2022-08-01T10:00:00Z'\n\n[network]\nname = 'mynetwork'\n```\n\n----------------------------------------\n\nTITLE: Defining Runtime Arguments Schema - JSON Schema - JSON\nDESCRIPTION: Defines the 'args' property as runtime arguments in contract execution objects. It references a separate 'RuntimeArgs' schema, supporting flexible argument collections needed for interacting with various contract types. Dependencies include the referenced 'RuntimeArgs' definition elsewhere in the schema, and its value is typically an array of named arguments.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/condor/jsonrpc-comp/rpc-2.0/schema/components.json.md#2025-04-22_snippet_1\n\nLANGUAGE: JSON\nCODE:\n```\n{\n    \"args\": {\n        \"description\": \"Runtime arguments.\",\n        \"allOf\": [\n            {\n                \"$ref\": \"#/components/schemas/RuntimeArgs\"\n            }\n        ]\n    }\n}\n\n```\n\n----------------------------------------\n\nTITLE: Retrieving Account Hash\nDESCRIPTION: Command to get the account hash from a public key using the Casper CLI client.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/versioned_docs/version-2.0.0/resources/advanced/multi-sig/multi-sig-workflow.md#2025-04-22_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\ncasper-client account-address --public-key <INSERT_PUBLIC_KEY_HEX>\n```\n\n----------------------------------------\n\nTITLE: Compiling Rust Project to WASM for Casper - Bash\nDESCRIPTION: This Bash command builds the Rust project targeting wasm32-unknown-unknown for deployment on Casper. Requires cargo and dependencies installed; must be run in the project directory. Produces a Wasm binary suitable for uploading to the Casper network as contract or session code.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/docs/developers/writing-onchain-code/writing-session-code.md#2025-04-22_snippet_8\n\nLANGUAGE: bash\nCODE:\n```\ncargo build --release --target wasm32-unknown-unknown\n```\n\n----------------------------------------\n\nTITLE: Serializing NamedKeys Collection\nDESCRIPTION: Defines `NamedKeys`, a collection (specifically a `BTreeMap`) of named keys. Serialization starts with a `u32` count of entries, followed by a sequence of serialized `String` names and serialized `Key` values.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/versioned_docs/version-2.0.0/concepts/serialization/types.md#2025-04-22_snippet_33\n\nLANGUAGE: text\nCODE:\n```\nA collection of named keys. It is serialized as a `BTreeMap` where the first 4 bytes represent a `u32` value describing the number of [`names`](./primitives.md#clvalue-string) and [`keys`](./primitives.md#clvalue-key) held within. The remainder consists of a repeating pattern of names and keys of the length dictated by the first four bytes.\n```\n\n----------------------------------------\n\nTITLE: Simplified Token Allowance Check Command\nDESCRIPTION: A simplified version of the token allowance check command without comments, showing the essential Casper client syntax for checking an account's token spending allowance.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/versioned_docs/version-1.5.X/resources/tokens/cep18/transfer.md#2025-04-22_snippet_10\n\nLANGUAGE: bash\nCODE:\n```\ncasper-client put-deploy -n http://<node IP>:<PORT>\\\n--secret-key ~/casper/demo/user_a/secret_key.pem \\\n--session-package-name \"cep18_test_contract\" \\\n--session-entry-point \"check_allowance_of\" \\\n--session-arg \"token_contract:account_hash='account-hash-05d893e76c731729fc26339e5a970bd79fbf4a6adf743c8385431fb494bff45e'\" \\\n--session-arg \"owner:key='account-hash-39f15c23df9be1244572bb499fac62cbcad3cab2dc1438609842f602f943d7d2'\" \\\n--session-arg \"spender:key='account-hash-17192017d32db5dc9f598bf8ac6ac35ee4b64748669b00572d88335941479513'\" \\\n--chain-name <CHAIN NAME> \\\n--payment-amount 10000000000\n```\n\n----------------------------------------\n\nTITLE: Test Execution Output\nDESCRIPTION: Example output of successful test execution showing two passing tests\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/versioned_docs/version-2.0.0/resources/advanced/cross-contract.md#2025-04-22_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nrunning 2 tests\ntest tests::should_error_on_missing_runtime_arg ... ok\ntest tests::should_store_hello_world ... ok\n\ntest result: ok. 2 passed; 0 failed; 0 ignored; 0 measured; 0 filtered out; finished in 0.09s\n```\n\n----------------------------------------\n\nTITLE: Calculating Round Seigniorage Rate in Python\nDESCRIPTION: This Python snippet demonstrates how to calculate the `round_seigniorage_rate` as a fractional number, suitable for the chainspec configuration. It uses the annual issuance (8%), minimum block time (2^15 ms), and ticks per year (31536000000 ms) to compute the rate and utilizes the `Fraction` class from Python's `fractions` module to limit the denominator for precise fractional representation.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/docs/operators/setup-network/chain-spec.md#2025-04-22_snippet_0\n\nLANGUAGE: python\nCODE:\n```\n`Fraction((1 + 0.08)**((2**15)/31536000000) - 1).limit_denominator(1000000000)`\n```\n\n----------------------------------------\n\nTITLE: Defining Message Topics in JSON Format\nDESCRIPTION: This snippet demonstrates the structure for defining message topics within a JSON object. The topics have names and corresponding hash values generated from the topic's name. Topics are part of a list under the attribute `message_topics`. The keys include `topic_name` and `topic_name_hash`, which represent the readable name of the topic and its hashed version.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/versioned_docs/version-2.0.0/developers/writing-onchain-code/emitting-contract-events.md#2025-04-22_snippet_7\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"message_topics\": [\n        {\n            \"topic_name\": \"events\",\n            \"topic_name_hash\": \"topic-name-5721a6d9d7a9afe5dfdb35276fb823bed0f825350e4d865a5ec0110c380de4e1\"\n        }\n    ]\n}\n\n```\n\n----------------------------------------\n\nTITLE: Defining Smart Contract Argument Arrays in JSON Schema - JavaScript\nDESCRIPTION: This snippet defines a JSON schema for an array of named arguments (NamedArg) used in smart contract calls. It utilizes the $ref property to reference an existing sub-schema for individual item validation, ensuring uniformity in data structure. The schema marks the type as an array, adds a descriptive field, and provides compatibility with tools expecting OpenAPI or Swagger schema conventions.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/condor/jsonrpc-comp/rpc-2.0/schema/RuntimeArgs.json.md#2025-04-22_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\\n    \\\"description\\\": \\\"Represents a collection of arguments passed to a smart contract.\\\",\\n    \\\"type\\\": \\\"array\\\",\\n    \\\"items\\\": {\\n        \\\"$ref\\\": \\\"#/components/schemas/NamedArg\\\"\\n    }\\n} \n```\n\n----------------------------------------\n\nTITLE: Retrieving State Root Hash (Repeated Context) using Casper Client (Bash)\nDESCRIPTION: Fetches the latest state root hash from a specified Casper node after the key removal operation. This hash is needed for querying the updated account state.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/versioned_docs/version-2.0.0/resources/advanced/multi-sig/multi-sig-workflow.md#2025-04-22_snippet_19\n\nLANGUAGE: bash\nCODE:\n```\ncasper-client get-state-root-hash --node-address https://node.testnet.casper.network/\n```\n\n----------------------------------------\n\nTITLE: Example Response Structure for Account State Query in Casper Network\nDESCRIPTION: This JSON snippet shows the structure of validator data, account information, and Merkle proofs in a Casper Network state query response. It includes inactive validators, next era validator weights, account details with named keys, and a Merkle proof.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/condor/jsonrpc-comp/rpc-2.0/schema.json.md#2025-04-22_snippet_10\n\nLANGUAGE: json\nCODE:\n```\n\"inactive_validators\": [\n  \"018139770ea87d175f56a35466c34c7ecccb8d8a91b4ee37a25df60f5b8fc9b394\"\n],\n\"next_era_validator_weights\": [\n  {\n    \"validator\": \"013b6a27bcceb6a42d62a3a8d02a6f0d73653215771de243a63ac048a18b59da29\",\n    \"weight\": \"123\"\n  },\n  {\n    \"validator\": \"016e7a1cdd29b0b78fd13af4c5598feff4ef2a97166e3ca6f2e4fbfccd80505bf1\",\n    \"weight\": \"456\"\n  },\n  {\n    \"validator\": \"018a875fff1eb38451577acd5afee405456568dd7c89e090863a0557bc7af49f17\",\n    \"weight\": \"789\"\n  }\n],\n\"rewards\": {},\n\"next_era_gas_price\": 1\n},\n\"timestamp\": \"2020-11-17T00:39:24.072Z\",\n\"era_id\": 1,\n\"height\": 10,\n\"protocol_version\": \"1.0.0\",\n\"proposer\": \"01d9bf2148748a85c89da5aad8ee0b0fc2d105fd39d41a4c796536354f0ae2900c\",\n\"current_gas_price\": 1,\n\"last_switch_block_hash\": \"0909090909090909090909090909090909090909090909090909090909090909\"\n}\n},\n\"stored_value\": {\n\"Account\": {\n  \"account_hash\": \"account-hash-e94daaff79c2ab8d9c31d9c3058d7d0a0dd31204a5638dc1451fa67b2e3fb88c\",\n  \"named_keys\": [\n    {\n      \"name\": \"main_purse\",\n      \"key\": \"uref-09480c3248ef76b603d386f3f4f8a5f87f597d4eaffd475433f861af187ab5db-007\"\n    }\n  ],\n  \"main_purse\": \"uref-09480c3248ef76b603d386f3f4f8a5f87f597d4eaffd475433f861af187ab5db-007\",\n  \"associated_keys\": [\n    {\n      \"account_hash\": \"account-hash-e94daaff79c2ab8d9c31d9c3058d7d0a0dd31204a5638dc1451fa67b2e3fb88c\",\n      \"weight\": 1\n    }\n  ],\n  \"action_thresholds\": {\n    \"deployment\": 1,\n    \"key_management\": 1\n  }\n}\n},\n\"merkle_proof\": \"01000000006ef2e0949ac76e55812421f755abe129b6244fe7168b77f47a72536147614625016ef2e0949ac76e55812421f755abe129b6244fe7168b77f47a72536147614625000000003529cde5c621f857f75f3810611eb4af3f998caaa9d4a3413cf799f99c67db0307010000006ef2e0949ac76e55812421f755abe129b6244fe7168b77f47a7253614761462501010102000000006e06000000000074769d28aac597a36a03a932d4b43e4f10bf0403ee5c41dd035102553f5773631200b9e173e8f05361b681513c14e25e3138639eb03232581db7557c9e8dbbc83ce94500226a9a7fe4f2b7b88d5103a4fc7400f02bf89c860c9ccdd56951a2afe9be0e0267006d820fb5676eb2960e15722f7725f3f8f41030078f8b2e44bf0dc03f71b176d6e800dc5ae9805068c5be6da1a90b2528ee85db0609cc0fb4bd60bbd559f497a98b67f500e1e3e846592f4918234647fca39830b7e1e6ad6f5b7a99b39af823d82ba1873d000003000000010186ff500f287e9b53f823ae1582b1fa429dfede28015125fd233a31ca04d5012002015cc42669a55467a1fdf49750772bfc1aed59b9b085558eb81510e9b015a7c83b0301e3cf4a34b1db6bfa58808b686cb8fe21ebe0c1bcbcee522649d2b135fe510fe3\"\n```\n\n----------------------------------------\n\nTITLE: Defining Era Summary Schema Using JSON Schema Specification in JSON\nDESCRIPTION: This JSON snippet defines a schema for validating 'era summary' objects, detailing required attributes and their types or schema references. Dependencies include references to additional defined schemas: BlockHash, EraId, StoredValue, and Digest. The object enforces strictness with 'additionalProperties: false' and requires all fields to be present and correctly structured, providing human-readable descriptions for each property. Input must conform to the prescribed shape, while outputs are undefined (schema validation only). Limitations include dependency on referenced schema components and the prohibition of additional fields.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/condor/jsonrpc-comp/rpc-1.5/schema/EraSummary.json.md#2025-04-22_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"description\": \"The summary of an era\",\n    \"type\": \"object\",\n    \"required\": [\n        \"block_hash\",\n        \"era_id\",\n        \"merkle_proof\",\n        \"state_root_hash\",\n        \"stored_value\"\n    ],\n    \"properties\": {\n        \"block_hash\": {\n            \"description\": \"The block hash\",\n            \"allOf\": [\n                {\n                    \"$ref\": \"#/components/schemas/BlockHash\"\n                }\n            ]\n        },\n        \"era_id\": {\n            \"description\": \"The era id\",\n            \"allOf\": [\n                {\n                    \"$ref\": \"#/components/schemas/EraId\"\n                }\n            ]\n        },\n        \"stored_value\": {\n            \"description\": \"The StoredValue containing era information\",\n            \"allOf\": [\n                {\n                    \"$ref\": \"#/components/schemas/StoredValue\"\n                }\n            ]\n        },\n        \"state_root_hash\": {\n            \"description\": \"Hex-encoded hash of the state root\",\n            \"allOf\": [\n                {\n                    \"$ref\": \"#/components/schemas/Digest\"\n                }\n            ]\n        },\n        \"merkle_proof\": {\n            \"description\": \"The Merkle proof\",\n            \"type\": \"string\"\n        }\n    },\n    \"additionalProperties\": false\n} \n```\n\n----------------------------------------\n\nTITLE: Expected Node Status Output After Successful Staging (JSON)\nDESCRIPTION: This JSON snippet shows the expected structure and content of the `.next_upgrade` field from the node's `/status` endpoint response after a successful upgrade staging. It confirms the scheduled `activation_point` (era) and the target `protocol_version`.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/versioned_docs/version-1.5.X/operators/setup/upgrade.md#2025-04-22_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\n$ curl -s localhost:8888/status | jq .next_upgrade\n```\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"activation_point\": 4968,\n  \"protocol_version\": \"1.4.6\"\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a Network Configuration File (.conf)\nDESCRIPTION: Example content for a network configuration file (e.g., `our-network.conf`). This file defines the `SOURCE_URL` (the server hosting the protocol files) and the `NETWORK_NAME`. It should be placed in `/etc/casper/network_configs` and is used by the `node_util.py` script.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/versioned_docs/version-1.5.X/operators/setup-network/staging-files-for-new-network.md#2025-04-22_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nSOURCE_URL=casper.mydomain.com\nNETWORK_NAME=our-network\n\n```\n\n----------------------------------------\n\nTITLE: Defining Era Metadata Schema - JSON\nDESCRIPTION: This code defines a JSON Schema for validating objects related to an epoch (era) summary on the Casper Network. The schema requires properties such as equivocators (validators who misbehaved), inactive validators, next era's validator weights, rewards distribution, and the next era's gas price. Dependencies include referenced schema components (e.g., PublicKey, U512, Array_of_ValidatorWeight) that must be defined elsewhere in the OpenAPI or JSON Schema specification. Inputs include objects adhering to this schema, and output is typically validation success or failure; requires all listed required fields to be present and formatted according to the specified structure.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/condor/jsonrpc-comp/rpc-2.0/schema/EraEndV2.json.md#2025-04-22_snippet_0\n\nLANGUAGE: JSON\nCODE:\n```\n{\n    \"description\": \"Information related to the end of an era, and validator weights for the following era.\",\n    \"type\": \"object\",\n    \"required\": [\n        \"equivocators\",\n        \"inactive_validators\",\n        \"next_era_gas_price\",\n        \"next_era_validator_weights\",\n        \"rewards\"\n    ],\n    \"properties\": {\n        \"equivocators\": {\n            \"description\": \"The set of equivocators.\",\n            \"type\": \"array\",\n            \"items\": {\n                \"$ref\": \"#/components/schemas/PublicKey\"\n            }\n        },\n        \"inactive_validators\": {\n            \"description\": \"Validators that haven't produced any unit during the era.\",\n            \"type\": \"array\",\n            \"items\": {\n                \"$ref\": \"#/components/schemas/PublicKey\"\n            }\n        },\n        \"next_era_validator_weights\": {\n            \"description\": \"The validators for the upcoming era and their respective weights.\",\n            \"allOf\": [\n                {\n                    \"$ref\": \"#/components/schemas/Array_of_ValidatorWeight\"\n                }\n            ]\n        },\n        \"rewards\": {\n            \"description\": \"The rewards distributed to the validators.\",\n            \"type\": \"object\",\n            \"additionalProperties\": {\n                \"type\": \"array\",\n                \"items\": {\n                    \"$ref\": \"#/components/schemas/U512\"\n                }\n            }\n        },\n        \"next_era_gas_price\": {\n            \"type\": \"integer\",\n            \"format\": \"uint8\",\n            \"minimum\": 0\n        }\n    }\n} \n```\n\n----------------------------------------\n\nTITLE: Requesting Purse Balance via Casper RPC (Bash/JSON)\nDESCRIPTION: Demonstrates an example JSON request for the `query_balance` RPC method. It specifies the method name (`query_balance`) and parameters. The parameters include a `state_identifier` (using `BlockHash` to specify the state at a particular block) and a `purse_identifier` (using `main_purse_under_account_hash` to target the main purse of a specific account).\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/versioned_docs/version-1.5.X/developers/json-rpc/json-rpc-informational.md#2025-04-22_snippet_12\n\nLANGUAGE: bash\nCODE:\n```\n{\n  \"id\": 1,\n  \"jsonrpc\": \"2.0\",\n  \"method\": \"query_balance\",\n  \"params\": [\n      {\n        \"name\": \"state_identifier\",\n        \"value\": {\n          \"BlockHash\": \"13c2d7a68ecdd4b74bf4393c88915c836c863fc4bf11d7f2bd930a1bbccacdcb\"\n        }\n    },\n      {\n        \"name\": \"purse_identifier\",\n        \"value\": {\n          \"main_purse_under_account_hash\": \"account-hash-0909090909090909090909090909090909090909090909090909090909090909\"\n        }\n      }\n    ]\n}\n```\n\n----------------------------------------\n\nTITLE: Interacting with Deployed Smart Contract Package via Casper CLI - Bash\nDESCRIPTION: This bash command submits a transaction to interact with a deployed smart contract package on the NCTL network. It leverages the `put-transaction package` command and accepts arguments for node address, chain name, package address, gas price tolerance, pricing mode, and custom session arguments. Session arguments allow for dynamic input (like setting an 'amount'). Outputs include deploy hashes to confirm package execution and interaction results.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/versioned_docs/version-2.0.0/developers/dapps/nctl-test.md#2025-04-22_snippet_8\n\nLANGUAGE: bash\nCODE:\n```\n$(get_path_to_client) put-transaction package \\\n--node-address http://localhost:11101 \\\n--chain-name \\\"casper-net-1\\\" \\\n--package-address package-47b8b489d54c378144bf85429f4b29c8b47142d542272086f378b9d4e29cada4 \\ \\\n--gas-price-tolerance 10 \\\n--pricing-mode fixed \\\n--session-arg \\\"amount:u256='100'\\\"\n```\n\n----------------------------------------\n\nTITLE: Node TLS Configuration for Certificate-Based Access Control\nDESCRIPTION: TOML configuration for a node specifying the TLS certificate, secret key, and CA certificate. Each node in the network requires this configuration for secure communication.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/versioned_docs/version-1.5.X/operators/setup-network/create-private.md#2025-04-22_snippet_14\n\nLANGUAGE: toml\nCODE:\n```\n[network.identity]\ntls_certificate = \"node_1_cert.pem\"\nsecret_key = \"node_1.pem\"\nca_certificate = \"ca_cert.pem\"\n```\n\n----------------------------------------\n\nTITLE: Running CEP-18 Tests with Make\nDESCRIPTION: Command to build and run the CEP-18 tests using Make. The Makefile compiles the contract in release mode and copies the WASM file to the tests directory before running tests.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/versioned_docs/version-1.5.X/resources/tokens/cep18/tests.md#2025-04-22_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nmake test\n```\n\n----------------------------------------\n\nTITLE: Unsubscribing from Events with JavaScript\nDESCRIPTION: This JavaScript snippet demonstrates how to unsubscribe from specific event types using the Casper SDK. It uses the unsubscribe function, specifying an event name to stop receiving updates.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/versioned_docs/version-2.0.0/developers/dapps/monitor-and-consume-events.md#2025-04-22_snippet_5\n\nLANGUAGE: JavaScript\nCODE:\n```\nes.unsubscribe(EventName.EVENT_NAME)\n```\n\n----------------------------------------\n\nTITLE: Delegation Limits Configuration in Casper Network\nDESCRIPTION: TOML configuration defining the minimum and maximum delegation amounts allowed on the Casper Network, as well as the maximum number of delegators per validator. The minimum is 500 CSPR and each validator can have up to 1200 delegators.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/docs/users/delegating.md#2025-04-22_snippet_1\n\nLANGUAGE: toml\nCODE:\n```\n# Minimum allowed delegation amount in motes\nminimum_delegation_amount = 500_000_000_000\n# Maximum allowed delegation amount in motes\nmaximum_delegation_amount = 1_000_000_000_000_000_000\n# The maximum amount of delegators per validator.\nmax_delegators_per_validator = 1200\n```\n\n----------------------------------------\n\nTITLE: Querying State Root Hash\nDESCRIPTION: Command to retrieve the current state root hash, which is required for querying the global state of the network.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/versioned_docs/version-1.5.X/developers/cli/installing-contracts.md#2025-04-22_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\ncasper-client get-state-root-hash --node-address [NODE_SERVER_ADDRESS]\n```\n\n----------------------------------------\n\nTITLE: Checking the Status of a CEP-18 Token Deployment\nDESCRIPTION: Command to check the status of a token deployment using the deploy hash returned from the put-deploy operation.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/versioned_docs/version-2.0.0/resources/beginner/cep18.md#2025-04-22_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\ncasper-client get-deploy \\\n    --node-address http://78.46.32.13:7777 19853d1569fec2b0fa36e81f2f24bea77ccf039a399071cb7d4b377202a073d6\n```\n\n----------------------------------------\n\nTITLE: Defining AddUInt512 Object\nDESCRIPTION: This schema defines an object for adding a `U512` value. It requires a `AddUInt512` property which references the `U512` schema. No additional properties are allowed.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/condor/jsonrpc-comp/rpc-1.5/schema/components.json.md#2025-04-22_snippet_21\n\nLANGUAGE: JSON\nCODE:\n```\n{\\n    \\\"description\\\": \\\"Adds the given `U512`.\\\",\\n    \\\"type\\\": \\\"object\\\",\\n    \\\"required\\\": [\\n        \\\"AddUInt512\\\"\\n    ],\\n    \\\"properties\\\": {\\n        \\\"AddUInt512\\\": {\\n            \\\"$ref\\\": \\\"#/components/schemas/U512\\\"\\n        }\\n    },\\n    \\\"additionalProperties\\\": false\\n}\n```\n\n----------------------------------------\n\nTITLE: Retrieving State Root Hash from Casper Network\nDESCRIPTION: This command retrieves the current state root hash, which is an identifier of the current network state similar to a Git commit ID. It provides a snapshot of the blockchain state at a specific moment and is used for querying the network state after sending deploys.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/versioned_docs/version-1.5.X/resources/beginner/counter/commands.md#2025-04-22_snippet_1\n\nLANGUAGE: rust\nCODE:\n```\ncasper-client get-state-root-hash --node-address [NODE_SERVER_ADDRESS]\n```\n\n----------------------------------------\n\nTITLE: Casper Client Deploy Command\nDESCRIPTION: Example of passing named arguments to a Casper smart contract entry point using the casper-client CLI.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/versioned_docs/version-1.5.X/resources/moving-to-casper.md#2025-04-22_snippet_10\n\nLANGUAGE: bash\nCODE:\n```\ncasper-client put-deploy \\\n  --node-address http://65.21.235.219:7777 \\\n  --chain-name casper-test \\\n  --secret-key [KEY_PATH]/secret_key.pem \\\n  --payment-amount 2500000000 \\\n  --session-hash hash-93d923e336b20a4c4ca14d592b60e5bd3fe330775618290104f9beb326db7ae2 \\\n  --session-entry-point \"delegate\" \\\n  --session-arg \"validator:public_key='0145fb72c75e1b459839555d70356a5e6172e706efa204d86c86050e2f7878960f'\" \\\n  --session-arg \"amount:u512='500000000000'\" \\\n  --session-arg \"delegator:public_key='0154d828baafa6858b92919c4d78f26747430dcbecb9aa03e8b44077dc6266cabf'\"\n```\n\n----------------------------------------\n\nTITLE: Retrieving Deploy Information from Casper Network using JSON\nDESCRIPTION: This JSON snippet demonstrates how to retrieve deploy information from the Casper network using API version 2.0.0. It includes the deploy hash, account details, payment and session arguments, and execution information like block hash and execution results. Dependencies include the deploy's dependencies, such as account hashes and transfer details, to fully evaluate the deploy's context and effect.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/condor/jsonrpc-comp/rpc-2.0/schema.json.md#2025-04-22_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\"name\": \"info_get_deploy_example\", \"params\": [{\"name\": \"deploy_hash\", \"value\": \"5c9b3b099c1378aa8e4a5f07f59ff1fcdc69a83179427c7e67ae0377d94d93fa\"}, {\"name\": \"finalized_approvals\", \"value\": true}], \"result\": {\"name\": \"info_get_deploy_example_result\", \"value\": {\"api_version\": \"2.0.0\", \"deploy\": {\"hash\": \"5c9b3b099c1378aa8e4a5f07f59ff1fcdc69a83179427c7e67ae0377d94d93fa\", \"header\": {\"account\": \"01d9bf2148748a85c89da5aad8ee0b0fc2d105fd39d41a4c796536354f0ae2900c\", \"timestamp\": \"2020-11-17T00:39:24.072Z\", \"ttl\": \"1h\", \"gas_price\": 1, \"body_hash\": \"d53cf72d17278fd47d399013ca389c50d589352f1a12593c0b8e01872a641b50\", \"dependencies\": [\"0101010101010101010101010101010101010101010101010101010101010101\"], \"chain_name\": \"casper-example\"}, \"payment\": {\"StoredContractByName\": {\"name\": \"casper-example\", \"entry_point\": \"example-entry-point\", \"args\": [[\"amount\", {\"cl_type\": \"I32\", \"bytes\": \"e8030000\", \"parsed\": 1000}]]}}, \"session\": {\"Transfer\": {\"args\": [[\"amount\", {\"cl_type\": \"I32\", \"bytes\": \"e8030000\", \"parsed\": 1000}]]}}, \"approvals\": [{\"signer\": \"01d9bf2148748a85c89da5aad8ee0b0fc2d105fd39d41a4c796536354f0ae2900c\", \"signature\": \"014c1a89f92e29dd74fc648f741137d9caf4edba97c5f9799ce0c9aa6b0c9b58db368c64098603dbecef645774c05dff057cb1f91f2cf390bbacce78aa6f084007\"}]}, \"execution_info\": {\"block_hash\": \"0744fcb72af43c5cc372039bc5a8bfee48808a9ce414acc0d6338a628c20eb42\", \"block_height\": 10, \"execution_result\": {\"Version2\": {\"initiator\": {\"PublicKey\": \"01d9bf2148748a85c89da5aad8ee0b0fc2d105fd39d41a4c796536354f0ae2900c\"}, \"error_message\": null, \"limit\": \"123456\", \"consumed\": \"100000\", \"cost\": \"246912\", \"payment\": [{\"source\": \"uref-0101010101010101010101010101010101010101010101010101010101010101-001\"}], \"transfers\": [{\"Version2\": {\"transaction_hash\": {\"Version1\": \"0101010101010101010101010101010101010101010101010101010101010101\"}, \"from\": {\"AccountHash\": \"account-hash-0202020202020202020202020202020202020202020202020202020202020202\"}, \"to\": \"account-hash-0303030303030303030303030303030303030303030303030303030303030303\", \"source\": \"uref-0a0a0a0a0a0a0a0a0a0a0a0a0a0a0a0a0a0a0a0a0a0a0a0a0a0a0a0a0a0a0a0a-007\", \"target\": \"uref-1b1b1b1b1b1b1b1b1b1b1b1b1b1b1b1b1b1b1b1b1b1b1b1b1b1b1b1b1b1b1b1b-000\", \"amount\": \"1000000000000\", \"gas\": \"2500000000\", \"id\": 999}}], \"size_estimate\": 186, \"effects\": [{\"key\": \"account-hash-2c4a11c062a8a337bfc97e27fd66291caeb2c65865dcb5d3ef3759c4c97efecb\", \"kind\": {\"AddUInt64\": 8}}, {\"key\": \"deploy-af684263911154d26fa05be9963171802801a0b6aff8f199b7391eacb8edc9e1\", \"kind\": \"Identity\"}]}}}}}}\n```\n\n----------------------------------------\n\nTITLE: Defining PeerEntry Schema in OpenAPI\nDESCRIPTION: Defines the schema for individual peer nodes in the Casper Network, containing the node's ID and network address.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/condor/jsonrpc-comp/rpc-2.0/schema.json.md#2025-04-22_snippet_90\n\nLANGUAGE: json\nCODE:\n```\n\"PeerEntry\": {\n  \"description\": \"Node peer entry.\",\n  \"type\": \"object\",\n  \"required\": [\n    \"address\",\n    \"node_id\"\n  ],\n  \"properties\": {\n    \"node_id\": {\n      \"description\": \"Node id.\",\n      \"type\": \"string\"\n    },\n    \"address\": {\n      \"description\": \"Node address.\",\n      \"type\": \"string\"\n    }\n  },\n  \"additionalProperties\": false\n}\n```\n\n----------------------------------------\n\nTITLE: DeployExpired Event Structure\nDESCRIPTION: JSON structure of a DeployExpired event indicating a deploy has expired due to TTL.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/versioned_docs/version-1.5.X/developers/dapps/monitor-and-consume-events.md#2025-04-22_snippet_7\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"DeployExpired\": {\n    \"deploy_hash\": \"7ecf22fc284526d6db16fbf455f489e0a9cbf782234131c010cf3078fb9be353\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Starting the Casper Node with Systemd\nDESCRIPTION: Command to start the Casper node using systemd after preparing administrator accounts and validator nodes. This initializes the node with the configured settings.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/versioned_docs/version-2.0.0/operators/setup-network/create-private.md#2025-04-22_snippet_8\n\nLANGUAGE: sh\nCODE:\n```\nsudo systemctl start casper-node-launcher\n```\n\n----------------------------------------\n\nTITLE: Running Casper Tests using `make test` (Bash)\nDESCRIPTION: Provides the command typically used in a `Makefile` to execute the entire test suite for the Casper contract project.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/versioned_docs/version-1.5.X/developers/writing-onchain-code/testing-session-code.md#2025-04-22_snippet_11\n\nLANGUAGE: bash\nCODE:\n```\nmake test\n```\n\n----------------------------------------\n\nTITLE: Installing Casper Client Tool (Bash)\nDESCRIPTION: Installs the `casper-client` command-line tool using Rust's package manager, Cargo. This client is used to interact with the Casper network (querying nodes, deploying contracts, sending transactions).\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/docs/resources/quick-start.md#2025-04-22_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\ncargo install casper-client\n```\n\n----------------------------------------\n\nTITLE: Installing Dependencies for Ethereum Key Conversion\nDESCRIPTION: Commands to install Node.js and the key-encoder package, which are prerequisites for converting Ethereum private keys to PEM format.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/docs/concepts/accounts-and-keys.md#2025-04-22_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\nsudo apt install nodejs\nnpm install key-encoder\n```\n\n----------------------------------------\n\nTITLE: URef Without Access Rights Example\nDESCRIPTION: Example of a URef string representation without any associated access rights\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/versioned_docs/version-1.5.X/developers/dapps/uref-security.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nuref-974019c976b5f26412ce486158d2431967af35d91387dae8cbcd43c20fce6452-000\n```\n\n----------------------------------------\n\nTITLE: Checking Process Open Files Limit with PID (Bash)\nDESCRIPTION: Uses the `prlimit` command with `sudo` privileges to display the current soft and hard limits for the maximum number of open files (`nofile`) for a specific process. Requires the process PID as an argument.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/versioned_docs/version-1.5.X/operators/setup/open-files.md#2025-04-22_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nsudo prlimit -n -p <PID>\n```\n\n----------------------------------------\n\nTITLE: Verifying Staged Upgrade via Node Status Endpoint (Bash)\nDESCRIPTION: This command checks if the node upgrade has been successfully staged by querying the local node's status endpoint (`/status` on port 8888 by default) using `curl` and extracting the `next_upgrade` information using `jq`. A non-null output indicates successful staging.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/versioned_docs/version-1.5.X/operators/setup/upgrade.md#2025-04-22_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\ncurl -s http://127.0.0.1:8888/status | jq .next_upgrade\n```\n\n----------------------------------------\n\nTITLE: Viewing Faucet Account Information in Bash\nDESCRIPTION: Command to retrieve and display information about the faucet account in the local Casper network, including account hash and secret key path.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/versioned_docs/version-1.5.X/resources/beginner/counter/walkthrough.md#2025-04-22_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nnctl-view-faucet-account\n```\n\n----------------------------------------\n\nTITLE: Defining PublicKeyAndDelegator Object Schema in JSON\nDESCRIPTION: Specifies the JSON schema for a `PublicKeyAndDelegator` object, designed to link a delegator's public key with their corresponding detailed `Delegator` information. Both `delegator` and `delegator_public_key` are required properties, referencing the `Delegator` and `PublicKey` schemas respectively.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/condor/jsonrpc-comp/rpc-2.0/schema/components.json.md#2025-04-22_snippet_35\n\nLANGUAGE: json\nCODE:\n```\n\"PublicKeyAndDelegator\": {\n    \"description\": \"A delegator associated with the given validator.\",\n    \"type\": \"object\",\n    \"required\": [\n        \"delegator\",\n        \"delegator_public_key\"\n    ],\n    \"properties\": {\n        \"delegator_public_key\": {\n            \"description\": \"The public key of the delegator.\",\n            \"allOf\": [\n                {\n                    \"$ref\": \"#/components/schemas/PublicKey\"\n                }\n            ]\n        },\n        \"delegator\": {\n            \"description\": \"The delegator details.\",\n            \"allOf\": [\n                {\n                    \"$ref\": \"#/components/schemas/Delegator\"\n                }\n            ]\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Contract JSON Schema\nDESCRIPTION: This JSON schema defines the structure of a contract object. It specifies required properties including contract_package_hash, contract_wasm_hash, entry_points, named_keys, and protocol_version. The schema also references other component schemas for specific property definitions.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/condor/jsonrpc-comp/rpc-1.5/schema/Contract.json.md#2025-04-22_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"description\": \"A contract struct that can be serialized as  JSON object.\",\n    \"type\": \"object\",\n    \"required\": [\n        \"contract_package_hash\",\n        \"contract_wasm_hash\",\n        \"entry_points\",\n        \"named_keys\",\n        \"protocol_version\"\n    ],\n    \"properties\": {\n        \"contract_package_hash\": {\n            \"$ref\": \"#/components/schemas/ContractPackageHash\"\n        },\n        \"contract_wasm_hash\": {\n            \"$ref\": \"#/components/schemas/ContractWasmHash\"\n        },\n        \"named_keys\": {\n            \"type\": \"array\",\n            \"items\": {\n                \"$ref\": \"#/components/schemas/NamedKey\"\n            }\n        },\n        \"entry_points\": {\n            \"type\": \"array\",\n            \"items\": {\n                \"$ref\": \"#/components/schemas/EntryPoint\"\n            }\n        },\n        \"protocol_version\": {\n            \"type\": \"string\"\n        }\n    },\n    \"additionalProperties\": false\n}\n```\n\n----------------------------------------\n\nTITLE: Sample Era Validators Structure in Casper Network\nDESCRIPTION: This JSON snippet illustrates the structure of the `era_validators` field from the Casper network's auction data. It contains era IDs and corresponding public keys of validators with their weights, providing vital information to verify validator participation in upcoming network eras. Active validator public keys should be checked here to confirm delegation eligibility for rewards.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/docs/developers/cli/delegate.md#2025-04-22_snippet_8\n\nLANGUAGE: json\nCODE:\n```\n\"block_height\":105,\n     \"era_validators\":[\n        {\n           \"era_id\":9,\n           \"validator_weights\":[\n              {\n                 \"public_key\":\"0102db4e11bccb3f9d823c82b9389625d383867d00d09b343043cdbe5ca56dd1fd\",\n                 \"weight\":\"648151805935226166098427654\"\n              },\n              {\n                 \"public_key\":\"01aa67009b37a23c7ad0ca632da5da239d5db46067d4b34125f61b04611f610baf\",\n                 \"weight\":\"648151805938466925128109996\"\n              },\n              {\n                 \"public_key\":\"01b7afa2beeddffd13458b763d7a00259f7dc0fa45498dfed05b4d7df4b7d65e2c\",\n                 \"weight\":\"648151805935226166098427656\"\n              },\n              {\n                 \"public_key\":\"01ca5463dac047cbd750d97ee42dd810cf1e081ece7d83ae4fc03b25a9ecad3b6a\",\n                 \"weight\":\"648151805938466925128109998\"\n              },\n              {\n                 \"public_key\":\"01f4a7644695aa129eba09fb3f11d0277b2bea1a3d5bc1933bcda93fdb4ad17e55\",\n                 \"weight\":\"648151805938466925128110000\"\n              }\n           ]\n        },\n```\n\n----------------------------------------\n\nTITLE: Accessing Opcode Instruction Costs in Casper Mainnet Chainspec\nDESCRIPTION: Reference to the GitHub location where the gas costs for Wasm opcode instructions on the Casper Mainnet network can be found. These costs define how computational work is measured and priced in the network.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/docs/concepts/design/casper-design.md#2025-04-22_snippet_0\n\nLANGUAGE: toml\nCODE:\n```\nhttps://github.com/casper-network/casper-node/blob/dev/resources/production/chainspec.toml#L115\n```\n\n----------------------------------------\n\nTITLE: Configuring chainspec.toml for Genesis\nDESCRIPTION: An excerpt from `chainspec.toml` showing essential configuration for network genesis. The `[protocol]` section defines the initial `version` ('1.0.0') and the `activation_point` (genesis timestamp in ISO 8601 format). The `[network]` section specifies the network `name` ('mynetwork'). This file must be identical on all nodes.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/versioned_docs/version-1.5.X/operators/setup-network/staging-files-for-new-network.md#2025-04-22_snippet_4\n\nLANGUAGE: toml\nCODE:\n```\n[protocol]\nversion = '1.0.0'\nactivation_point = '2022-08-01T10:00:00Z'\n\n[network]\nname = 'mynetwork'\n\n```\n\n----------------------------------------\n\nTITLE: Defining Method Execution Context in JSON\nDESCRIPTION: This JSON schema describes the context of method execution in Casper network contracts. It distinguishes between 'Caller', 'Called', and 'Factory' contexts, vital for understanding how smart contracts execute within different contexts. These definitions are essential for maintaining compatibility and clarity as the network evolves. Note that there are dependencies on the version of the runtime context being used, specifically between 1.x and 2.x.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/condor/jsonrpc-comp/rpc-2.0/schema/EntryPointType.json.md#2025-04-22_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\\n    \\\"description\\\": \\\"Context of method execution\\\\n\\\\nMost significant bit represents version i.e. - 0b0 -> 0.x/1.x (session & contracts) - 0b1 -> 2.x and later (introduced installer, utility entry points)\\\",\\n    \\\"oneOf\\\": [\\n        {\\n            \\\"description\\\": \\\"Runs using the calling entity's context. In v1.x this was used for both \\\\\\\"session\\\\\\\" code run using the originating Account's context, and also for \\\\\\\"StoredSession\\\\\\\" code that ran in the caller's context. While this made systemic sense due to the way the runtime context nesting works, this dual usage was very confusing to most human beings.\\\\n\\\\nIn v2.x the renamed Caller variant is exclusively used for wasm run using the initiating account entity's context. Previously installed 1.x stored session code should continue to work as the binary value matches but we no longer allow such logic to be upgraded, nor do we allow new stored session to be installed.\\\",\\n            \\\"type\\\": \\\"string\\\",\\n            \\\"enum\\\": [\\n                \\\"Caller\\\"\\n            ]\\n        },\\n        {\\n            \\\"description\\\": \\\"Runs using the called entity's context.\\\",\\n            \\\"type\\\": \\\"string\\\",\\n            \\\"enum\\\": [\\n                \\\"Called\\\"\\n            ]\\n        },\\n        {\\n            \\\"description\\\": \\\"Extract a subset of bytecode and installs it as a new smart contract. Runs using the called entity's context.\\\",\\n            \\\"type\\\": \\\"string\\\",\\n            \\\"enum\\\": [\\n                \\\"Factory\\\"\\n            ]\\n        }\\n    ]\\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Maximum Message Size in TOML Configuration\nDESCRIPTION: Sets the maximum size limit in bytes for serialized message payloads in the Casper Network. The limit is defined as 1,024 bytes (1 KB).\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/versioned_docs/version-2.0.0/developers/writing-onchain-code/emitting-contract-events.md#2025-04-22_snippet_17\n\nLANGUAGE: toml\nCODE:\n```\n# Maximum size in bytes of the serialized message payload.\nmax_message_size = 1_024\n```\n\n----------------------------------------\n\nTITLE: Defining JSON Schema for Auction Metadata\nDESCRIPTION: This JSON schema outlines the structure for auction metadata to be recorded at each era. It mandates a required property 'seigniorage_allocations' which is an array with each item conforming to 'SeigniorageAllocation'. No additional properties beyond those specified are allowed.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/condor/jsonrpc-comp/rpc-1.5/schema/EraInfo.json.md#2025-04-22_snippet_0\n\nLANGUAGE: JSON\nCODE:\n```\n{\n    \"description\": \"Auction metadata.  Intended to be recorded at each era.\",\n    \"type\": \"object\",\n    \"required\": [\n        \"seigniorage_allocations\"\n    ],\n    \"properties\": {\n        \"seigniorage_allocations\": {\n            \"type\": \"array\",\n            \"items\": {\n                \"$ref\": \"#/components/schemas/SeigniorageAllocation\"\n            }\n        }\n    },\n    \"additionalProperties\": false\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Delegator Association Object Schema in JSON\nDESCRIPTION: This JSON snippet defines the structure for an object representing a delegator associated with a specific validator. It specifies that the object must include both 'delegator' and 'delegator_public_key' properties. The detailed structure for these properties is defined by referencing other schemas ('PublicKey' and 'Delegator') using '$ref', a common pattern in JSON Schema or OpenAPI specifications.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/condor/jsonrpc-comp/rpc-2.0/schema/PublicKeyAndDelegator.json.md#2025-04-22_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"description\": \"A delegator associated with the given validator.\",\n    \"type\": \"object\",\n    \"required\": [\n        \"delegator\",\n        \"delegator_public_key\"\n    ],\n    \"properties\": {\n        \"delegator_public_key\": {\n            \"description\": \"The public key of the delegator.\",\n            \"allOf\": [\n                {\n                    \"$ref\": \"#/components/schemas/PublicKey\"\n                }\n            ]\n        },\n        \"delegator\": {\n            \"description\": \"The delegator details.\",\n            \"allOf\": [\n                {\n                    \"$ref\": \"#/components/schemas/Delegator\"\n                }\n            ]\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Stage Protocol Installation Command\nDESCRIPTION: Command to install and stage all current casper-node versions using node_util.py script.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/versioned_docs/version-2.0.0/operators/setup/basic-node-configuration.md#2025-04-22_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nsudo -u casper /etc/casper/node_util.py stage_protocols <NETWORK_CONFIG>\n```\n\n----------------------------------------\n\nTITLE: Activating Bid using System Auction Contract in Bash\nDESCRIPTION: This command activates a validator's bid using the system auction contract. It requires specifying network details, payment amount, and validator public key.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/versioned_docs/version-2.0.0/operators/becoming-a-validator/recovering.md#2025-04-22_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nsudo -u casper casper-client put-deploy \\\n--node-address <HOST:PORT> \\\n--secret-key <PATH> \\\n--chain-name <CHAIN_NAME> \\\n--payment-amount <PAYMENT_AMOUNT_IN_MOTES> \\\n--session-hash <SESSION_HASH> \\\n--session-entry-point activate_bid \\\n--session-arg \"validator:public_key='$(cat /etc/casper/validator_keys/public_key_hex)'\"\n```\n\n----------------------------------------\n\nTITLE: Querying Account Balance in Casper Network\nDESCRIPTION: Commands to query an account's balance using the query-balance command with a purse identifier.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/versioned_docs/version-2.0.0/resources/beginner/querying-network.md#2025-04-22_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\ncasper-client query-balance --help\n```\n\nLANGUAGE: bash\nCODE:\n```\ncasper-client query-balance \\\n--id 6 \\\n--node-address http://<node-ip-address>:7777 \\\n--state-root-hash <state-root-hash> \\\n--purse-identifier <account>\n```\n\n----------------------------------------\n\nTITLE: Defining the BlockHeader Schema in JSON\nDESCRIPTION: This JSON schema defines the structure for a `BlockHeader` object, representing minimal information about a Casper Network block. It specifies required properties such as `hash`, `timestamp`, `era_id`, `height`, `state_root_hash`, and `creator`, referencing other defined schemas for specific types like `BlockHash`, `Timestamp`, `PublicKey`, `EraId`, and `Digest`. The `additionalProperties: false` constraint ensures no extra fields are allowed.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/condor/jsonrpc-comp/rpc-1.5/schema/MinimalBlockInfo.json.md#2025-04-22_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"description\": \"Minimal info of a `Block`.\",\n    \"type\": \"object\",\n    \"required\": [\n        \"creator\",\n        \"era_id\",\n        \"hash\",\n        \"height\",\n        \"state_root_hash\",\n        \"timestamp\"\n    ],\n    \"properties\": {\n        \"hash\": {\n            \"$ref\": \"#/components/schemas/BlockHash\"\n        },\n        \"timestamp\": {\n            \"$ref\": \"#/components/schemas/Timestamp\"\n        },\n        \"era_id\": {\n            \"$ref\": \"#/components/schemas/EraId\"\n        },\n        \"height\": {\n            \"type\": \"integer\",\n            \"format\": \"uint64\",\n            \"minimum\": 0\n        },\n        \"state_root_hash\": {\n            \"$ref\": \"#/components/schemas/Digest\"\n        },\n        \"creator\": {\n            \"$ref\": \"#/components/schemas/PublicKey\"\n        }\n    },\n    \"additionalProperties\": false\n} \n```\n\n----------------------------------------\n\nTITLE: Cloning the CEP-18 Fungible Token Contract Repository\nDESCRIPTION: This command clones the CEP-18 fungible token contract repository from GitHub to your local machine.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/versioned_docs/version-2.0.0/resources/tokens/cep18/full-tutorial.md#2025-04-22_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\ngit clone https://github.com/casper-ecosystem/cep18.git\n```\n\n----------------------------------------\n\nTITLE: Event Stream Access via cURL\nDESCRIPTION: Basic cURL command to connect to a Casper node's event stream endpoint.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/versioned_docs/version-1.5.X/developers/dapps/monitor-and-consume-events.md#2025-04-22_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\ncurl -s http://NODE_ADDRESS:9999/events/CHANNEL\n```\n\n----------------------------------------\n\nTITLE: Verifying Deploy Execution Status (Bash)\nDESCRIPTION: Queries the Casper node to retrieve the status and details of a previously sent deploy using its unique hash. This command is used to confirm if the deploy (like adding or removing a key) was successfully processed by the network. Replace `<DEPLOY_HASH>` with the actual deploy hash.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/docs/resources/advanced/multi-sig/multi-sig-workflow.md#2025-04-22_snippet_19\n\nLANGUAGE: bash\nCODE:\n```\ncasper-client get-deploy --node-address https://node.testnet.casper.network <DEPLOY_HASH>\n```\n\n----------------------------------------\n\nTITLE: Default Public Chain Refund Handling\nDESCRIPTION: Displays the fallback configuration for refund handling on public chains like the Casper Mainnet, demonstrating a zero-refund ratio. Prerequisite is a public network environment setup.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/versioned_docs/version-1.5.X/operators/setup-network/create-private.md#2025-04-22_snippet_3\n\nLANGUAGE: toml\nCODE:\n```\n[core]\nrefund_handling = { type = \"refund\", refund_ratio = [0, 100] }\n```\n\n----------------------------------------\n\nTITLE: Describing Caller Structure and Serialization (Casper Network)\nDESCRIPTION: Defines the Caller structure, representing the identity of a calling entity. It has two variants: 'Initiator' (overall calling account) serializes as u8 tag 0 + account hash, and 'Entity' (contract/system) serializes as u8 tag 1 + package hash + entity hash.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/versioned_docs/version-2.0.0/concepts/serialization/types.md#2025-04-22_snippet_10\n\nLANGUAGE: Text\nCODE:\n```\n## Caller {#caller}\n\n`Caller` is the identity of a calling entity. It serializes as one of two variants, described below:\n\n-   `Initiator` is the overall calling account and serializes as a `u8` tag of 0 followed by the [`account_hash`](#account-hash) of the calling account.\n\n-   `Entity` is a calling entity, such as a smart contract or a system contract. It serializes as a `u8` tag of 1 followed by the [`package_hash`](#package-hash) and [`entity_hash`](#addressable-entity-hash).\n```\n\n----------------------------------------\n\nTITLE: Query Target Account Balance Example\nDESCRIPTION: Concrete example of querying a target account balance on the Casper testnet.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/versioned_docs/version-1.5.X/developers/cli/transfers/verify-transfer.md#2025-04-22_snippet_10\n\nLANGUAGE: bash\nCODE:\n```\ncasper-client query-balance -v --id 7 \\\n--node-address https://node.testnet.casper.network \\\n--state-root-hash fdb1474d441ec0fcbf2e088f1630dbf98d3bcf7f7a7fe298303797f35b8cb4e1 \\\n--purse-identifier account-hash-1ed5a1c39bea93c105f2d22c965a84b205b36734a377d05dbb103b6bfaa595a7\n```\n\n----------------------------------------\n\nTITLE: Building the Docker Image for NCTL in Bash\nDESCRIPTION: Command to build the Docker image for the Network Control Tool (NCTL) using the casper-nctl-condor.Dockerfile and tagging it as casper-nctl:rc3.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/condor/local-setup.md#2025-04-22_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\ndocker build -f casper-nctl-condor.Dockerfile -t casper-nctl:rc3 .\n```\n\n----------------------------------------\n\nTITLE: Viewing Faucet Account Information\nDESCRIPTION: Retrieve information about the faucet account in the local Casper network.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/versioned_docs/version-2.0.0/resources/beginner/counter/walkthrough.md#2025-04-22_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nnctl-view-faucet-account\n```\n\n----------------------------------------\n\nTITLE: Account Authorization Error Response\nDESCRIPTION: Example of an error response when the account is not properly authorized for multi-signature deploys.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/versioned_docs/version-1.5.X/developers/cli/transfers/multisig-deploy-transfer.md#2025-04-22_snippet_6\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"code\": -32008,\n  \"message\": \"deploy parameter failure: account authorization invalid at prestate_hash: 5f0392de8ac3512a48a110acfc5bc10d4a6a07109b350ae14cbec0428656c8ac\"\n}\n```\n\n----------------------------------------\n\nTITLE: Compressing Casper DB for Local Backups with Zstandard\nDESCRIPTION: Compresses the Casper node database using `tar` and `zstd`, optimized for speed in local backup scenarios. Uses `tar` with a 4096 block size and sparse handling, piped to `zstd` with compression level 5 (`-5`), automatic thread detection (`-T0`), verbose output (`-cv`), and long-distance matching (`--long=31`). Output is redirected to a file. Requires `tar` and `zstd`.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/docs/operators/maintenance/archiving-and-restoring.md#2025-04-22_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\ntar -b 4096 -cv --sparse . | zstd -5 -cv -T0 --long=31 > [path_to]/file.tar.zst\n```\n\n----------------------------------------\n\nTITLE: Defining TransactionV1 Schema in JSON\nDESCRIPTION: JSON schema definition for TransactionV1, which represents a unit of work sent by a client to the Casper Network. It includes properties for hash, header, body, and approvals, defining the structure of a version 1 transaction.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/condor/jsonrpc-comp/rpc-2.0/schema.json.md#2025-04-22_snippet_33\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"description\": \"A unit of work sent by a client to the network, which when executed can cause global state to be altered.\",\n  \"type\": \"object\",\n  \"required\": [\n    \"approvals\",\n    \"body\",\n    \"hash\",\n    \"header\"\n  ],\n  \"properties\": {\n    \"hash\": {\n      \"$ref\": \"#/components/schemas/TransactionV1Hash\"\n    },\n    \"header\": {\n      \"$ref\": \"#/components/schemas/TransactionV1Header\"\n    },\n    \"body\": {\n      \"$ref\": \"#/components/schemas/TransactionV1Body\"\n    },\n    \"approvals\": {\n      \"type\": \"array\",\n      \"items\": {\n        \"$ref\": \"#/components/schemas/Approval\"\n      },\n      \"uniqueItems\": true\n    }\n  },\n  \"additionalProperties\": false\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Deploy Parameters for Casper Network Transactions in JavaScript\nDESCRIPTION: This snippet demonstrates how to create deploy parameters for a Casper Network transaction using the casper-js-sdk. It includes setting up the public key and network name.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/versioned_docs/version-2.0.0/resources/advanced/list-cspr.md#2025-04-22_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nimport { DeployUtil, CLPublicKey } from 'casper-js-sdk';\n\nconst deployParams = new DeployUtil.DeployParams(\n  CLPublicKey.fromHex(publicKeyHex),\n  network_name // 'testnet' | 'mainnet'\n);\n```\n\n----------------------------------------\n\nTITLE: Checking Casper Sidecar Service Status - Bash\nDESCRIPTION: This snippet shows how to check the status of the 'casper-sidecar' service using systemd's status command. It provides details about the service's running state, associated PID, memory usage, and recent system journal entries, assisting administrators in verifying correct operation. The sample output includes active state and main executable location.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/docs/operators/setup/casper-sidecar.md#2025-04-22_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nsystemctl status casper-sidecar\n```\n\nLANGUAGE: bash\nCODE:\n```\ncasper-sidecar.service - Casper Event Sidecar\n     Loaded: loaded (/lib/systemd/system/casper-sidecar.service; enabled; vendor preset: enabled)\n     Active: active (running) since Wed 2022-12-07 20:33:29 UTC; 1min 3s ago\n       Docs: https://docs.casper.network\n   Main PID: 16707 (casper-si)\n      Tasks: 5 (limit: 9401)\n     Memory: 7.1M\n     CGroup: /system.slice/casper-sidecar.service\n             └─16707 /usr/bin/casper-sidecar /etc/casper-sidecar/config.toml\n\nDec 07 20:33:29 user systemd[1]: Started Casper Event Sidecar.\n```\n\n----------------------------------------\n\nTITLE: Describing EntityAddr Structure and Serialization (Casper Network)\nDESCRIPTION: Defines EntityAddr, the address for an AddressableEntity. It serializes with a u8 EntityKindTag (0 for System, 1 for Account, 2 for SmartContract) followed by the 32-byte hash address (`hash_addr`).\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/versioned_docs/version-2.0.0/concepts/serialization/types.md#2025-04-22_snippet_20\n\nLANGUAGE: Text\nCODE:\n```\n## EntityAddr {#entity-addr}\n\nThe address for an `AddressableEntity`. It serializes as a `u8` [`EntityKindTag`](#entity-kind-tag) followed by the 32-byte buffer containing the bytes of the `hash_addr` as follows:\n\n-   `System`: A package associated with a native contract implementation, serialized as a `u8` of 0, followed by the `hash_addr`.\n\n-   `Account`: A package associated with an Account hash, serialized as `u8` of 1 followed by the `hash_addr`.\n\n-   `SmartContract`: A package associated with Wasm stored on chain, serialized as a `u8` of 2 followed by the `hash_addr`\n```\n\n----------------------------------------\n\nTITLE: Example Token Allowance Query Response\nDESCRIPTION: This is an example response from querying global state for a CEP-18 token allowance. It shows the stored value in CLValue format with the parsed allowance of 15 tokens.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/versioned_docs/version-1.5.X/resources/tokens/cep18/transfer.md#2025-04-22_snippet_13\n\nLANGUAGE: bash\nCODE:\n```\n{\n  \"id\": -9142472925449984061,\n  \"jsonrpc\": \"2.0\",\n  \"result\": {\n    \"api_version\": \"1.0.0\",\n    \"block_header\": null,\n    \"merkle_proof\": \"[3796 hex chars]\",\n    \"stored_value\": {\n      \"CLValue\": {\n        \"bytes\": \"010f\",\n        \"cl_type\": \"U256\",\n        \"parsed\": \"15\"\n      }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Viewing Casper Client Help\nDESCRIPTION: Command to display help information for the Casper command-line client's put-deploy command.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/versioned_docs/version-2.0.0/developers/writing-onchain-code/writing-session-code.md#2025-04-22_snippet_11\n\nLANGUAGE: bash\nCODE:\n```\ncasper-client put-deploy --help\n```\n\n----------------------------------------\n\nTITLE: Calculating Token Supply in Casper Network\nDESCRIPTION: Formula for computing the token supply at a specific era index based on initial supply and issuance rate. This calculation establishes the basis for determining rewards in the Casper network.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/docs/concepts/economics/consensus.md#2025-04-22_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\nsupply(i) = initial_supply * (1 + issuance_rate)^(tick_at_era_start(i) / ticks_per_year)\n```\n\n----------------------------------------\n\nTITLE: Defining Entry Points for Casper Network Token Contract\nDESCRIPTION: JSON configuration defining multiple entry points for a token smart contract on Casper Network. Includes functions for balance checking, token burning, allowance management, and contract initialization. Each entry point specifies its name, arguments, return type, access level, and payment model.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/versioned_docs/version-2.0.0/developers/cli/sending-transactions.md#2025-04-22_snippet_7\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"key\": \"entry-point-v1-entity-contract-363996106630892a964565574fcdfd2435f21a17a3ad1ed2054146e7d8461640-fcc296caa05679d0d11121e7629b29f222a857018f50985046b73a56e9a10701\",\n  \"kind\": {\n    \"Write\": {\n      \"EntryPoint\": {\n        \"V1CasperVm\": {\n          \"name\": \"balance_of\",\n          \"args\": [\n            {\n              \"name\": \"address\",\n              \"cl_type\": \"Key\"\n            }\n          ],\n          \"ret\": \"U256\",\n          \"access\": \"Public\",\n          \"entry_point_type\": \"Called\",\n          \"entry_point_payment\": \"Caller\"\n        }\n      }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Creating New Console Project with .NET CLI\nDESCRIPTION: Commands to create a new .NET console application project for working with Casper Network SDK.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/versioned_docs/version-1.5.X/developers/dapps/sdk/csharp-sdk.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ndotnet new console -o GetAccountBalance\ncd GetAccountBalance\n```\n\n----------------------------------------\n\nTITLE: Querying Contract State (Counter Value) using Casper Client (Bash)\nDESCRIPTION: Queries a specific piece of data (`counter/count`) stored under an account's named keys within the contract storage, using `casper-client query-global-state`. Requires the node address, state root hash, account hash (or public key path), and the specific query path (`-q`).\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/docs/resources/quick-start.md#2025-04-22_snippet_17\n\nLANGUAGE: bash\nCODE:\n```\ncasper-client query-global-state \\\n--node-address [NODE_ADDRESS] \\\n--state-root-hash [STATE_ROOT_HASH] \\\n--key [ACCOUNT_HASH] \\\n-q \"counter/count\"\n```\n\n----------------------------------------\n\nTITLE: Defining Node Peer Entry Schema with JSON Schema in JavaScript\nDESCRIPTION: This snippet defines a JSON schema for a node peer entry object, specifying required fields ('address' and 'node_id') and restricting additional properties. Intended for use in validation workflows, it ensures that each node peer entry conforms to the expected format. Dependencies include a JSON Schema validator (such as Ajv), and the schema expects input as a JSON object containing 'node_id' and 'address' as strings; any extraneous properties will be rejected.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/condor/jsonrpc-comp/rpc-2.0/schema/PeerEntry.json.md#2025-04-22_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\\n    \\\"description\\\": \\\"Node peer entry.\\\",\\n    \\\"type\\\": \\\"object\\\",\\n    \\\"required\\\": [\\n        \\\"address\\\",\\n        \\\"node_id\\\"\\n    ],\\n    \\\"properties\\\": {\\n        \\\"node_id\\\": {\\n            \\\"description\\\": \\\"Node id.\\\",\\n            \\\"type\\\": \\\"string\\\"\\n        },\\n        \\\"address\\\": {\\n            \\\"description\\\": \\\"Node address.\\\",\\n            \\\"type\\\": \\\"string\\\"\\n        }\\n    },\\n    \\\"additionalProperties\\\": false\\n} \n```\n\n----------------------------------------\n\nTITLE: Defining Block Body Schema with JSON Schema in JSON\nDESCRIPTION: This JSON snippet defines a schema for the block body, version 2, with required properties: 'rewarded_signatures' and 'transactions'. The 'transactions' field is an object mapping categories to lists of transaction hashes, whereas 'rewarded_signatures' references a predefined schema for listing signature identifiers. Dependencies include the referenced '#/components/schemas/TransactionHash' and '#/components/schemas/RewardedSignatures' schemas. Inputs are JSON objects conforming to this schema; outputs are typically validation results or parsed data structures. The schema assumes proper integration with a broader OpenAPI or JSON Schema ecosystem.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/condor/jsonrpc-comp/rpc-2.0/schema/BlockBodyV2.json.md#2025-04-22_snippet_0\n\nLANGUAGE: JSON\nCODE:\n```\n{\n    \"description\": \"The body portion of a block. Version 2.\",\n    \"type\": \"object\",\n    \"required\": [\n        \"rewarded_signatures\",\n        \"transactions\"\n    ],\n    \"properties\": {\n        \"transactions\": {\n            \"description\": \"Map of transactions mapping categories to a list of transaction hashes.\",\n            \"type\": \"object\",\n            \"additionalProperties\": {\n                \"type\": \"array\",\n                \"items\": {\n                    \"$ref\": \"#/components/schemas/TransactionHash\"\n                }\n            }\n        },\n        \"rewarded_signatures\": {\n            \"description\": \"List of identifiers for finality signatures for a particular past block.\",\n            \"allOf\": [\n                {\n                    \"$ref\": \"#/components/schemas/RewardedSignatures\"\n                }\n            ]\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Modeling Entry Points and Parameter Types for Contracts - JSON Schema - JSON\nDESCRIPTION: Defines schemas for EntryPoint, Parameter, and access-related concepts that structure method signatures and enforce method accessibility within Casper contracts. These models specify names, argument types, return values, access controls, and execution contexts. They ensure methods are correctly typed and called, with robust group and public visibility options.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/condor/jsonrpc-comp/rpc-1.5/schema/components.json.md#2025-04-22_snippet_43\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"description\": \"Type signature of a method. Order of arguments matter since can be referenced by index as well as name.\",\n    \"type\": \"object\",\n    \"required\": [\n        \"access\",\n        \"args\",\n        \"entry_point_type\",\n        \"name\",\n        \"ret\"\n    ],\n    \"properties\": {\n        \"name\": {\n            \"type\": \"string\"\n        },\n        \"args\": {\n            \"type\": \"array\",\n            \"items\": {\n                \"$ref\": \"#/components/schemas/Parameter\"\n            }\n        },\n        \"ret\": {\n            \"$ref\": \"#/components/schemas/CLType\"\n        },\n        \"access\": {\n            \"$ref\": \"#/components/schemas/EntryPointAccess\"\n        },\n        \"entry_point_type\": {\n            \"$ref\": \"#/components/schemas/EntryPointType\"\n        }\n    }\n},\n{\n    \"description\": \"Parameter to a method\",\n    \"type\": \"object\",\n    \"required\": [\n        \"cl_type\",\n        \"name\"\n    ],\n    \"properties\": {\n        \"name\": {\n            \"type\": \"string\"\n        },\n        \"cl_type\": {\n            \"$ref\": \"#/components/schemas/CLType\"\n        }\n    }\n}\n\n```\n\n----------------------------------------\n\nTITLE: Defining PublicKeyAndDelegator Schema in JSON\nDESCRIPTION: Schema definition for PublicKeyAndDelegator object that associates a delegator with a given validator. This includes the delegator's public key and delegator details with references to other schema components.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/condor/jsonrpc-comp/rpc-2.0/schema.json.md#2025-04-22_snippet_56\n\nLANGUAGE: json\nCODE:\n```\n\"PublicKeyAndDelegator\": {\n  \"description\": \"A delegator associated with the given validator.\",\n  \"type\": \"object\",\n  \"required\": [\n    \"delegator\",\n    \"delegator_public_key\"\n  ],\n  \"properties\": {\n    \"delegator_public_key\": {\n      \"description\": \"The public key of the delegator.\",\n      \"allOf\": [\n        {\n          \"$ref\": \"#/components/schemas/PublicKey\"\n        }\n      ]\n    },\n    \"delegator\": {\n      \"description\": \"The delegator details.\",\n      \"allOf\": [\n        {\n          \"$ref\": \"#/components/schemas/Delegator\"\n        }\n      ]\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Tests Package with cargo\nDESCRIPTION: Command to create a new package called 'tests' for storing unit tests, as part of the semi-automatic project setup process.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/versioned_docs/version-2.0.0/developers/writing-onchain-code/simple-contract.md#2025-04-22_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\ncargo new tests\n```\n\n----------------------------------------\n\nTITLE: Defining Delegator Object Schema in JSON\nDESCRIPTION: Defines the JSON schema for a `Delegator` object, representing an entity that delegates stake to a validator. It requires `bonding_purse`, `delegator_public_key`, `staked_amount`, and `validator_public_key` properties, referencing `URef`, `PublicKey`, and `U512` schemas. An optional `vesting_schedule` property references the `VestingSchedule` schema or can be null.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/condor/jsonrpc-comp/rpc-2.0/schema/components.json.md#2025-04-22_snippet_36\n\nLANGUAGE: json\nCODE:\n```\n\"Delegator\": {\n    \"description\": \"Represents a party delegating their stake to a validator (or \\\"delegatee\\\")\",\n    \"type\": \"object\",\n    \"required\": [\n        \"bonding_purse\",\n        \"delegator_public_key\",\n        \"staked_amount\",\n        \"validator_public_key\"\n    ],\n    \"properties\": {\n        \"delegator_public_key\": {\n            \"$ref\": \"#/components/schemas/PublicKey\"\n        },\n        \"staked_amount\": {\n            \"$ref\": \"#/components/schemas/U512\"\n        },\n        \"bonding_purse\": {\n            \"$ref\": \"#/components/schemas/URef\"\n        },\n        \"validator_public_key\": {\n            \"$ref\": \"#/components/schemas/PublicKey\"\n        },\n        \"vesting_schedule\": {\n            \"anyOf\": [\n                {\n                    \"$ref\": \"#/components/schemas/VestingSchedule\"\n                },\n                {\n                    \"type\": \"null\"\n                }\n            ]\n        }\n    },\n    \"additionalProperties\": false\n}\n```\n\n----------------------------------------\n\nTITLE: Accessing Casper Node RPC Schema\nDESCRIPTION: Command to access a Casper node's RPC schema on port 8888. This endpoint provides the complete RPC schema definition.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/versioned_docs/version-1.5.X/developers/json-rpc/index.md#2025-04-22_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\n<HOST:8888>/rpc-schema\n```\n\n----------------------------------------\n\nTITLE: Viewing Message Topics in Contract Global State (JSON)\nDESCRIPTION: This JSON snippet shows the structure of the 'message_topics' field in a contract entity's global state. It contains a map of registered topic names by their hash.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/versioned_docs/version-2.0.0/developers/writing-onchain-code/emitting-contract-events.md#2025-04-22_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n\"message_topics\": [\n    {\n    \"topic_name\": \"events\",\n    \"topic_name_hash\": \"topic-name-5721a6d9d7a9afe5dfdb35276fb823bed0f825350e4d865a5ec0110c380de4e1\"\n    }\n]\n```\n\n----------------------------------------\n\nTITLE: Defining Key Directory Structure for Node Swapping (Bash)\nDESCRIPTION: Illustrates the required directory structure under `/etc/casper/validator_keys/` on both the current and backup nodes. This structure facilitates the key swapping process by organizing the keysets (public_key.pem, public_key_hex, secret_key.pem) for each node into dedicated subdirectories (`current_node`, `backup_node`), allowing easy copying to the parent directory during the swap.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/versioned_docs/version-1.5.X/operators/maintenance/moving-node.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n/etc/casper/validator_keys/\n├── public_key.pem\n├── public_key_hex\n├── secret_key.pem\n├── current_node\n│   ├── public_key.pem\n│   ├── public_key_hex\n│   └── secret_key.pem\n└── backup_node\n|   ├── public_key.pem\n|   ├── public_key_hex\n|   └── secret_key.pem\n```\n\n----------------------------------------\n\nTITLE: Defining a Contract Package Hash Address Property - JSON\nDESCRIPTION: This snippet defines a property in JSON schema that represents the hash address of a smart contract package, intended for use in Casper network contexts. The property is described using 'description' for field documentation and 'type' for enforcing string values. There are no dependencies, but using this structure assumes integration with tools or systems that interpret JSON schemas. The field is expected to contain a string value representing the contract package hash and is not constrained regarding format; additional validation may be enforced elsewhere.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/condor/jsonrpc-comp/rpc-2.0/schema/ContractPackageHash.json.md#2025-04-22_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\\n    \\\"description\\\": \\\"The hash address of the contract package\\\",\\n    \\\"type\\\": \\\"string\\\"\\n}\n```\n\n----------------------------------------\n\nTITLE: Verifying Undelegation Status\nDESCRIPTION: Command to verify the undelegation status by querying the auction information from a network node.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/docs/developers/cli/undelegate.md#2025-04-22_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\ncasper-client get-auction-info \\\n--node-address http://<peer-ip-address>:7777\n```\n\n----------------------------------------\n\nTITLE: Querying State Root Hash in Casper Network\nDESCRIPTION: Command to get the current state root hash which identifies the network state at a point in time.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/docs/developers/cli/transfers/verify-transfer.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ncasper-client get-state-root-hash --node-address [NODE_SERVER_ADDRESS]\n```\n\n----------------------------------------\n\nTITLE: Defining Protocol Upgrade Information Schema - JSON\nDESCRIPTION: This snippet provides a JSON schema definition for representing information about the next protocol upgrade. It specifies that an object must include 'activation_point' (referenced via another schema definition) and 'protocol_version' (as a string), ensuring that these fields are always present and correctly typed. Dependencies include the surrounding schema registry and the referenced 'ActivationPoint' definition; expected inputs follow JSON Schema conventions, with the output being validated upgrade data objects.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/condor/jsonrpc-comp/rpc-1.5/schema/NextUpgrade.json.md#2025-04-22_snippet_0\n\nLANGUAGE: JSON\nCODE:\n```\n{\n    \"description\": \"Information about the next protocol upgrade.\",\n    \"type\": \"object\",\n    \"required\": [\n        \"activation_point\",\n        \"protocol_version\"\n    ],\n    \"properties\": {\n        \"activation_point\": {\n            \"$ref\": \"#/components/schemas/ActivationPoint\"\n        },\n        \"protocol_version\": {\n            \"type\": \"string\"\n        }\n    }\n} \n```\n\n----------------------------------------\n\nTITLE: Querying Casper Network State Root Hash\nDESCRIPTION: Command to query a Casper network node for the latest state root hash using the casper-client CLI tool.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/versioned_docs/version-2.0.0/resources/quick-start.md#2025-04-22_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ncasper-client get-state-root-hash --node-address http://65.21.235.219:7777\n```\n\n----------------------------------------\n\nTITLE: Defining chain_get_era_summary RPC Endpoint - JSON Schema - JSON\nDESCRIPTION: Defines the JSON schema for the chain_get_era_summary RPC method, including its parameters (such as block_identifier), expected structure for results, and embedded documentation. This snippet models the method's contract for both validation and example usage in JSON-based systems, and is suitable for auto-generating clients, documentation, or server-side validation. Inputs should follow the parameter schema, and the returned object must include api_version and era_summary; referenced sub-schemas must be defined elsewhere. No direct dependencies except adherence to referenced type definitions.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/condor/jsonrpc-comp/rpc-2.0/chain_get_era_summary.json.md#2025-04-22_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"name\": \"chain_get_era_summary\",\n  \"summary\": \"returns the era summary at either a specific block (by height or hash), or the most recently added block\",\n  \"params\": [\n    {\n      \"name\": \"block_identifier\",\n      \"schema\": {\n        \"description\": \"The block identifier.\",\n        \"$ref\": \"#/components/schemas/BlockIdentifier\"\n      },\n      \"required\": false\n    }\n  ],\n  \"result\": {\n    \"name\": \"chain_get_era_summary_result\",\n    \"schema\": {\n      \"description\": \"Result for \\\"chain_get_era_summary\\\" RPC response.\",\n      \"type\": \"object\",\n      \"required\": [\n        \"api_version\",\n        \"era_summary\"\n      ],\n      \"properties\": {\n        \"api_version\": {\n          \"description\": \"The RPC API version.\",\n          \"type\": \"string\"\n        },\n        \"era_summary\": {\n          \"description\": \"The era summary.\",\n          \"$ref\": \"#/components/schemas/EraSummary\"\n        }\n      },\n      \"additionalProperties\": false\n    }\n  },\n  \"examples\": [\n    {\n      \"name\": \"chain_get_era_summary_example\",\n      \"params\": [\n        {\n          \"name\": \"block_identifier\",\n          \"value\": {\n            \"Hash\": \"0744fcb72af43c5cc372039bc5a8bfee48808a9ce414acc0d6338a628c20eb42\"\n          }\n        }\n      ],\n      \"result\": {\n        \"name\": \"chain_get_era_summary_example_result\",\n        \"value\": {\n          \"api_version\": \"2.0.0\",\n          \"era_summary\": {\n            \"block_hash\": \"0744fcb72af43c5cc372039bc5a8bfee48808a9ce414acc0d6338a628c20eb42\",\n            \"era_id\": 42,\n            \"stored_value\": {\n              \"EraInfo\": {\n                \"seigniorage_allocations\": [\n                  {\n                    \"Delegator\": {\n                      \"delegator_public_key\": \"01e1b46a25baa8a5c28beb3c9cfb79b572effa04076f00befa57eb70b016153f18\",\n                      \"validator_public_key\": \"012a1732addc639ea43a89e25d3ad912e40232156dcaa4b9edfc709f43d2fb0876\",\n                      \"amount\": \"1000\"\n                    }\n                  },\n                  {\n                    \"Validator\": {\n                      \"validator_public_key\": \"012a1732addc639ea43a89e25d3ad912e40232156dcaa4b9edfc709f43d2fb0876\",\n                      \"amount\": \"2000\"\n                    }\n                  }\n                ]\n              }\n            },\n            \"state_root_hash\": \"0808080808080808080808080808080808080808080808080808080808080808\",\n            \"merkle_proof\": \"01000000006ef2e0949ac76e55812421f755abe129b6244fe7168b77f47a72536147614625016ef2e0949ac76e55812421f755abe129b6244fe7168b77f47a72536147614625000000003529cde5c621f857f75f3810611eb4af3f998caaa9d4a3413cf799f99c67db0307010000006ef2e0949ac76e55812421f755abe129b6244fe7168b77f47a7253614761462501010102000000006e06000000000074769d28aac597a36a03a932d4b43e4f10bf0403ee5c41dd035102553f5773631200b9e173e8f05361b681513c14e25e3138639eb03232581db7557c9e8dbbc83ce94500226a9a7fe4f2b7b88d5103a4fc7400f02bf89c860c9ccdd56951a2afe9be0e0267006d820fb5676eb2960e15722f7725f3f8f41030078f8b2e44bf0dc03f71b176d6e800dc5ae9805068c5be6da1a90b2528ee85db0609cc0fb4bd60bbd559f497a98b67f500e1e3e846592f4918234647fca39830b7e1e6ad6f5b7a99b39af823d82ba1873d000003000000010186ff500f287e9b53f823ae1582b1fa429dfede28015125fd233a31ca04d5012002015cc42669a55467a1fdf49750772bfc1aed59b9b085558eb81510e9b015a7c83b0301e3cf4a34b1db6bfa58808b686cb8fe21ebe0c1bcbcee522649d2b135fe510fe3\"\n          }\n        }\n      }\n    }\n  ]\n}\n\n```\n\n----------------------------------------\n\nTITLE: Example Speculative Transaction Result Response in JSON\nDESCRIPTION: Sample response showing the structure of a speculative transaction execution result, including API version, block hash, transfers, gas limits, and execution effects.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/docs/developers/json-rpc/json-rpc-transactional.md#2025-04-22_snippet_10\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"jsonrpc\": \"2.0\",\n  \"id\": 1,\n  \"result\": {\n    \"name\": \"speculative_exec_txn_result\",\n    \"value\": {\n      \"api_version\": \"2.0.0\",\n      \"execution_result\": {\n          \"block_hash\": \"b597865a5f96ea23932173601bf6b170a482f562f6dd3598b2d37a86c1f01371\",\n          \"transfers\": [],\n          \"limit\": \"100000000000\",\n          \"consumed\": \"23289743502\",\n          \"effects\": [\n              {\n                  \"key\": \"uref-65d264188c3cf9e61862415424c99900ec1c858f168d94d98b332fe738bf2249-000\",\n                  \"kind\": {\n                      \"Write\": {\n                          \"CLValue\": {\n                              \"cl_type\": \"Unit\",\n                              \"bytes\": \"\",\n                              \"parsed\": null\n                          }\n                      }\n                  }\n              },\n              {\n                  \"key\": \"package-154847e85beee3b5cd1c769b8f01dbc4b93d1cea8370c0b3bc1858d0d248a48b\",\n                  \"kind\": {\n                      \"Write\": {\n                          \"Package\": {\n                              \"versions\": [],\n                              \"disabled_versions\": [],\n                              \"groups\": [],\n                              \"lock_status\": \"Unlocked\"\n                          }\n                      }\n                  }\n              },\n              {\n                  \"key\": \"named-key-entity-account-7ba7c904427d5fe653b99584c07c3c5963b6ea2e75ad87aea69b71a65bf6fcea-7f292691d790433e131a5ea69c70b85a959a454f5d928de437b11bf4e7c06930\",\n                  \"kind\": {\n                      \"Write\": {\n                          \"NamedKey\": {\n                              \"named_key\": {\n                                  \"cl_type\": \"Key\",\n                                  \"bytes\": \"10154847e85beee3b5cd1c769b8f01dbc4b93d1cea8370c0b3bc1858d0d248a48b\",\n                                  \"parsed\": \"package-154847e85beee3b5cd1c769b8f01dbc4b93d1cea8370c0b3bc1858d0d248a48b\"\n                              },\n                              \"name\": {\n                                  \"cl_type\": \"String\",\n                                  \"bytes\": \"19000000746573745f7061796d656e745f7061636b6167655f68617368\",\n                                  \"parsed\": \"test_payment_package_hash\"\n                              }\n                          }\n                      }\n                  }\n              },\n              {\n                  \"key\": \"named-key-entity-account-7ba7c904427d5fe653b99584c07c3c5963b6ea2e75ad87aea69b71a65bf6fcea-814d93d21458dd90914dba42395ec9c075bc105cf3ef7ae0215f2107f3b47848\",\n                  \"kind\": {\n                      \"Write\": {\n                          \"NamedKey\": {\n                              \"named_key\": {\n                                  \"cl_type\": \"Key\",\n                                  \"bytes\": \"0265d264188c3cf9e61862415424c99900ec1c858f168d94d98b332fe738bf224907\",\n                                  \"parsed\": \"uref-65d264188c3cf9e61862415424c99900ec1c858f168d94d98b332fe738bf2249-007\"\n                              },\n                              \"name\": {\n                                  \"cl_type\": \"String\",\n                                  \"bytes\": \"13000000746573745f7061796d656e745f616363657373\",\n                                  \"parsed\": \"test_payment_access\"\n                              }\n                          }\n                      }\n                  }\n              },\n              {\n                  \"key\": \"package-154847e85beee3b5cd1c769b8f01dbc4b93d1cea8370c0b3bc1858d0d248a48b\",\n                  \"kind\": \"Identity\"\n              },\n              {\n                  \"key\": \"entity-system-63448411a9dac7fd2e4a1dc9287ddb95b6f26ebe549b1387e44685d6b56dab08\",\n                  \"kind\": \"Identity\"\n              },\n              {\n                  \"key\": \"package-63227f4db8d0d09e3b4b64416125ac35023e1054e38127780ec241b2b60d8b3d\",\n                  \"kind\": \"Identity\"\n              },\n              {\n                  \"key\": \"entry-point-v1-entity-system-63448411a9dac7fd2e4a1dc9287ddb95b6f26ebe549b1387e44685d6b56dab08-21bddc7e4379ba445c7118cb51962954e0d1e5aa5cacc0c4ff6095b57eb9fb33\",\n                  \"kind\": \"Identity\"\n              },\n              {\n                  \"key\": \"uref-7a9d9c0c33540e9fd4c1245f6ac687c7eacf98ac1072591adc3f83332a909d86-000\",\n                  \"kind\": {\n                      \"Write\": {\n                          \"CLValue\": {\n                              \"cl_type\": \"Unit\",\n                              \"bytes\": \"\",\n                              \"parsed\": null\n                          }\n                      }\n                  }\n              },\n              {\n                  \"key\": \"balance-7a9d9c0c33540e9fd4c1245f6ac687c7eacf98ac1072591adc3f83332a909d86\",\n                  \"kind\": {\n                      \"Write\": {\n                          \"CLValue\": {\n                              \"cl_type\": \"U512\",\n                              \"bytes\": \"00\",\n                              \"parsed\": \"0\"\n                          }\n                      }\n                  }\n              },\n              {\n                  \"key\": \"byte-code-v1-wasm-9639481569c3940ce272402f0e9bc0ea535435ea9ffc18d8696e4af02c841354\",\n                  \"kind\": {\n                      \"Write\": {\n                          \"ByteCode\": {\n                              \"kind\": \"V1CasperWasm\"\n\n```\n\n----------------------------------------\n\nTITLE: JSON Schema Definition for DeployInfo and Related Components\nDESCRIPTION: Defines the schema for DeployInfo which contains information about a deploy including its hash, transfers, account details, and gas costs. Also includes definitions for TransferAddr, URef, U512 and other related components.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/condor/jsonrpc-comp/rpc-2.0/schema/components.json.md#2025-04-22_snippet_29\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"DeployInfo\": {\n    \"description\": \"Information relating to the given Deploy.\",\n    \"type\": \"object\",\n    \"required\": [\n      \"deploy_hash\",\n      \"from\",\n      \"gas\",\n      \"source\",\n      \"transfers\"\n    ],\n    \"properties\": {\n      \"deploy_hash\": {\n        \"description\": \"Hex-encoded Deploy hash.\",\n        \"allOf\": [\n          {\n            \"$ref\": \"#/components/schemas/DeployHash\"\n          }\n        ]\n      },\n      \"transfers\": {\n        \"description\": \"Version 1 transfers performed by the Deploy.\",\n        \"type\": \"array\",\n        \"items\": {\n          \"$ref\": \"#/components/schemas/TransferAddr\"\n        }\n      },\n      \"from\": {\n        \"description\": \"Account identifier of the creator of the Deploy.\",\n        \"allOf\": [\n          {\n            \"$ref\": \"#/components/schemas/AccountHash\"\n          }\n        ]\n      },\n      \"source\": {\n        \"description\": \"Source purse used for payment of the Deploy.\",\n        \"allOf\": [\n          {\n            \"$ref\": \"#/components/schemas/URef\"\n          }\n        ]\n      },\n      \"gas\": {\n        \"description\": \"Gas cost of executing the Deploy.\",\n        \"allOf\": [\n          {\n            \"$ref\": \"#/components/schemas/U512\"\n          }\n        ]\n      }\n    },\n    \"additionalProperties\": false\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Generating Global State File and Updating via Shell\nDESCRIPTION: Generates administration entries and outputs them to 'global_state.toml'. It utilizes key parameters such as data directory and state hash to augment global state during a network upgrade.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/versioned_docs/version-2.0.0/operators/setup-network/create-private.md#2025-04-22_snippet_25\n\nLANGUAGE: sh\nCODE:\n```\n$ global-state-update-gen generate-admins --data-dir $DATA_DIR --state-hash $STATE_HASH --admin NEW_PUBLIC_KEY,BALANCE >> global_state.toml\n```\n\n----------------------------------------\n\nTITLE: Installing Project Dependencies (AssemblyScript & Casper Contract)\nDESCRIPTION: These shell commands install the required dependencies for the AssemblyScript smart contract project. `assemblyscript@0.9.1` is installed as a development dependency (`--save-dev`), and `casper-contract` is installed as a runtime dependency (`--save`). These commands should be run within the initialized project directory.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/versioned_docs/version-1.5.X/developers/writing-onchain-code/assembly-script.md#2025-04-22_snippet_3\n\nLANGUAGE: sh\nCODE:\n```\nnpm install --save-dev assemblyscript@0.9.1\nnpm install --save casper-contract\n```\n\n----------------------------------------\n\nTITLE: Finding Casper Node Process ID (Bash)\nDESCRIPTION: Uses the `pgrep` command to find the Process ID (PID) of the running `casper-node` process. This PID is required for subsequent commands that inspect or modify process limits.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/versioned_docs/version-1.5.X/operators/setup/open-files.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\npgrep \"casper-node$\"\n```\n\n----------------------------------------\n\nTITLE: Repository Setup Commands\nDESCRIPTION: Bash commands to clone the example repository and prepare the Rust environment for testing.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/versioned_docs/version-2.0.0/resources/advanced/list-auth-keys-tutorial.md#2025-04-22_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\ngit clone https://github.com/casper-ecosystem/tutorials-example-wasm\ncd tutorials-example-wasm/authorization-keys-example\nmake prepare\nmake test\n```\n\n----------------------------------------\n\nTITLE: Configuring Fee Handling\nDESCRIPTION: TOML configuration for fee distribution after refund processing, specifying payment to the block proposer.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/versioned_docs/version-2.0.0/operators/setup-network/create-private.md#2025-04-22_snippet_3\n\nLANGUAGE: toml\nCODE:\n```\n[core]\nfee_handling = { type = \"pay_to_proposer\" }\n```\n\n----------------------------------------\n\nTITLE: Viewing NCTL User Account Details\nDESCRIPTION: Command to view the first user's account details in NCTL\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/docs/developers/dapps/nctl-test.md#2025-04-22_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nnctl-view-user-account user=1\n```\n\n----------------------------------------\n\nTITLE: Defining Configuration Bytes Schema in JSON\nDESCRIPTION: This JSON snippet defines a schema object representing raw byte contents of configuration files used in the Casper network. It requires the property 'chainspec_bytes' (a reference to the 'Bytes' schema) and allows the other two (genesis accounts and global state) to be either bytes or null. It depends on the existence of a 'Bytes' schema, likely defined elsewhere. All properties are documented, enabling this schema's use in OpenAPI or validation contexts where robust typing and documentation for configuration byte payloads are necessary.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/condor/jsonrpc-comp/rpc-2.0/schema/ChainspecRawBytes.json.md#2025-04-22_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\\n    \\\"description\\\": \\\"The raw bytes of the chainspec.toml, genesis accounts.toml, and global_state.toml files.\\\",\\n    \\\"type\\\": \\\"object\\\",\\n    \\\"required\\\": [\\n        \\\"chainspec_bytes\\\"\\n    ],\\n    \\\"properties\\\": {\\n        \\\"chainspec_bytes\\\": {\\n            \\\"description\\\": \\\"Raw bytes of the current chainspec.toml file.\\\",\\n            \\\"allOf\\\": [\\n                {\\n                    \\\"$ref\\\": \\\"#/components/schemas/Bytes\\\"\\n                }\\n            ]\\n        },\\n        \\\"maybe_genesis_accounts_bytes\\\": {\\n            \\\"description\\\": \\\"Raw bytes of the current genesis accounts.toml file.\\\",\\n            \\\"anyOf\\\": [\\n                {\\n                    \\\"$ref\\\": \\\"#/components/schemas/Bytes\\\"\\n                },\\n                {\\n                    \\\"type\\\": \\\"null\\\"\\n                }\\n            ]\\n        },\\n        \\\"maybe_global_state_bytes\\\": {\\n            \\\"description\\\": \\\"Raw bytes of the current global_state.toml file.\\\",\\n            \\\"anyOf\\\": [\\n                {\\n                    \\\"$ref\\\": \\\"#/components/schemas/Bytes\\\"\\n                },\\n                {\\n                    \\\"type\\\": \\\"null\\\"\\n                }\\n            ]\\n        }\\n    }\\n} \n```\n\n----------------------------------------\n\nTITLE: Cloning the CEP-18 Repository in Bash\nDESCRIPTION: Command to clone the Casper Ecosystem CEP-18 fungible token repository from GitHub.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/versioned_docs/version-1.5.X/resources/beginner/cep18.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ngit clone https://github.com/casper-ecosystem/cep18.git\n```\n\n----------------------------------------\n\nTITLE: Defining URef\nDESCRIPTION: This schema defines a hex-encoded string representing a formatted URef. It's used for identifying resources or contracts.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/condor/jsonrpc-comp/rpc-1.5/schema/components.json.md#2025-04-22_snippet_28\n\nLANGUAGE: JSON\nCODE:\n```\n{\\n    \\\"description\\\": \\\"Hex-encoded, formatted URef.\\\",\\n    \\\"type\\\": \\\"string\\\"\\n}\n```\n\n----------------------------------------\n\nTITLE: Applying Staged Protocol Upgrade/Version\nDESCRIPTION: Command executed on a node to fetch and apply a newly staged protocol version or upgrade. It uses the `node_util.py` script with the appropriate network configuration file (`<network.conf>`) and runs as the `casper` user. This triggers the download and setup of the files associated with the latest version listed in the `protocol_versions` file on the hosting server.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/versioned_docs/version-1.5.X/operators/setup-network/staging-files-for-new-network.md#2025-04-22_snippet_9\n\nLANGUAGE: bash\nCODE:\n```\nsudo -u casper /etc/casper/node_util.py stage_protocols <network.conf>\n\n```\n\n----------------------------------------\n\nTITLE: Staging Protocol Versions using node_util.py\nDESCRIPTION: Command to stage protocol versions for a specific network using the `node_util.py` script provided by `casper-node-launcher`. It takes the network configuration file (e.g., `our-network.conf`) as an argument and runs as the `casper` user. This command fetches and installs the necessary protocol files (binaries and configurations) based on the specified network configuration.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/versioned_docs/version-1.5.X/operators/setup-network/staging-files-for-new-network.md#2025-04-22_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nsudo -u casper /etc/casper/node_util.py stage_protocols our-network.conf\n\n```\n\n----------------------------------------\n\nTITLE: Accessing Sidecar Admin Metrics\nDESCRIPTION: URL pattern for accessing the Sidecar's administrative metrics endpoint.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/versioned_docs/version-2.0.0/operators/setup/casper-sidecar.md#2025-04-22_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\nhttp://localhost:PORT/metrics/\n```\n\n----------------------------------------\n\nTITLE: Calculating Round Issuance Rate in Casper Network\nDESCRIPTION: Formula for computing the round issuance rate based on the annual issuance rate, adjusted for the minimum round length. This rate determines how many tokens are issued per round.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/docs/concepts/economics/consensus.md#2025-04-22_snippet_1\n\nLANGUAGE: plaintext\nCODE:\n```\nround_issuance_rate = (1 + issuance_rate)^(2^minimum_round_exponent / ticks_per_year) - 1\n```\n\n----------------------------------------\n\nTITLE: Defining Entrypoint Encapsulation Schema for Casper VM - JSON Schema - JSON\nDESCRIPTION: This JSON schema snippet defines the structure for representing entrypoints compatible with V1 or V2 Casper VM instances. It mandates that the parent object must contain either a \"V1CasperVm\" or \"V2CasperVm\" property, each referencing their respective schema definitions (EntryPoint2 or EntryPointV2). The properties field details each supported VM entry, and the schema ensures no additional properties are allowed, aligning integration with Casper network execution requirements.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/condor/jsonrpc-comp/rpc-2.0/schema/EntryPointValue.json.md#2025-04-22_snippet_0\n\nLANGUAGE: JSON\nCODE:\n```\n{\\n    \\\"description\\\": \\\"The encaspulated representation of entrypoints.\\\",\\n    \\\"oneOf\\\": [\\n        {\\n            \\\"description\\\": \\\"Entrypoints to be executed against the V1 Casper VM.\\\",\\n            \\\"type\\\": \\\"object\\\",\\n            \\\"required\\\": [\\n                \\\"V1CasperVm\\\"\\n            ],\\n            \\\"properties\\\": {\\n                \\\"V1CasperVm\\\": {\\n                    \\\"$ref\\\": \\\"#/components/schemas/EntryPoint2\\\"\\n                }\\n            },\\n            \\\"additionalProperties\\\": false\\n        },\\n        {\\n            \\\"description\\\": \\\"Entrypoints to be executed against the V2 Casper VM.\\\",\\n            \\\"type\\\": \\\"object\\\",\\n            \\\"required\\\": [\\n                \\\"V2CasperVm\\\"\\n            ],\\n            \\\"properties\\\": {\\n                \\\"V2CasperVm\\\": {\\n                    \\\"$ref\\\": \\\"#/components/schemas/EntryPointV2\\\"\\n                }\\n            },\\n            \\\"additionalProperties\\\": false\\n        }\\n    ]\\n} \n```\n\n----------------------------------------\n\nTITLE: Creating Non-Root User Account\nDESCRIPTION: Creates a new user account with password authentication disabled\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/versioned_docs/version-2.0.0/operators/setup/non-root-user.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nsudo adduser <username> --disabled-password\n```\n\n----------------------------------------\n\nTITLE: Example Output of Trie Metrics Check\nDESCRIPTION: Displays sample output from querying the node's metrics endpoint for `trie_or_chunk` statistics. It shows counters for total fetches, fetches found locally, fetches from peers, and timeouts, providing insight into the state download process.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/versioned_docs/version-1.5.X/operators/setup/install-node.md#2025-04-22_snippet_18\n\nLANGUAGE: text\nCODE:\n```\n# HELP trie_or_chunk_fetch_total number of trie_or_chunk all fetch requests made\n# TYPE trie_or_chunk_fetch_total counter\ntrie_or_chunk_fetch_total 102647\n# HELP trie_or_chunk_found_in_storage number of fetch requests that found trie_or_chunk in local storage\n# TYPE trie_or_chunk_found_in_storage counter\ntrie_or_chunk_found_in_storage 0\n# HELP trie_or_chunk_found_on_peer number of fetch requests that fetched trie_or_chunk from peer\n# TYPE trie_or_chunk_found_on_peer counter\ntrie_or_chunk_found_on_peer 102263\n# HELP trie_or_chunk_timeouts number of trie_or_chunk fetch requests that timed out\n# TYPE trie_or_chunk_timeouts counter\ntrie_or_chunk_timeouts 0\n```\n\n----------------------------------------\n\nTITLE: Checking the Testnet State Root Hash\nDESCRIPTION: Command to query the current state root hash of the Casper testnet, which is necessary for interacting with the network state.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/versioned_docs/version-2.0.0/resources/beginner/cep18.md#2025-04-22_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\ncasper-client get-state-root-hash --node-address http://78.46.32.13:7777  \n```\n\n----------------------------------------\n\nTITLE: Describing Deploy Execution Results in JSON\nDESCRIPTION: This JSON schema describes the possible outcomes of a deploy execution in the Casper Network, delineating between successful and failed executions. Dependencies include references to ExecutionEffect, TransferAddr, and U512 schemas for detailing execution effects, transfer records, and execution cost respectively. Key properties for failed executions include error messages and cost, whereas successful executions focus on cost and effects. The schema assumes valid JSON structure with additional properties disallowed.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/condor/jsonrpc-comp/rpc-1.5/schema/ExecutionResult.json.md#2025-04-22_snippet_0\n\nLANGUAGE: JSON\nCODE:\n```\n{\n    \"description\": \"The result of executing a single deploy.\",\n    \"anyOf\": [\n        {\n            \"description\": \"The result of a failed execution.\",\n            \"type\": \"object\",\n            \"required\": [\n                \"Failure\"\n            ],\n            \"properties\": {\n                \"Failure\": {\n                    \"type\": \"object\",\n                    \"required\": [\n                        \"cost\",\n                        \"effect\",\n                        \"error_message\",\n                        \"transfers\"\n                    ],\n                    \"properties\": {\n                        \"effect\": {\n                            \"description\": \"The effect of executing the deploy.\",\n                            \"allOf\": [\n                                {\n                                    \"$ref\": \"#/components/schemas/ExecutionEffect\"\n                                }\n                            ]\n                        },\n                        \"transfers\": {\n                            \"description\": \"A record of Transfers performed while executing the deploy.\",\n                            \"type\": \"array\",\n                            \"items\": {\n                                \"$ref\": \"#/components/schemas/TransferAddr\"\n                            }\n                        },\n                        \"cost\": {\n                            \"description\": \"The cost of executing the deploy.\",\n                            \"allOf\": [\n                                {\n                                    \"$ref\": \"#/components/schemas/U512\"\n                                }\n                            ]\n                        },\n                        \"error_message\": {\n                            \"description\": \"The error message associated with executing the deploy.\",\n                            \"type\": \"string\"\n                        }\n                    },\n                    \"additionalProperties\": false\n                }\n            },\n            \"additionalProperties\": false\n        },\n        {\n            \"description\": \"The result of a successful execution.\",\n            \"type\": \"object\",\n            \"required\": [\n                \"Success\"\n            ],\n            \"properties\": {\n                \"Success\": {\n                    \"type\": \"object\",\n                    \"required\": [\n                        \"cost\",\n                        \"effect\",\n                        \"transfers\"\n                    ],\n                    \"properties\": {\n                        \"effect\": {\n                            \"description\": \"The effect of executing the deploy.\",\n                            \"allOf\": [\n                                {\n                                    \"$ref\": \"#/components/schemas/ExecutionEffect\"\n                                }\n                            ]\n                        },\n                        \"transfers\": {\n                            \"description\": \"A record of Transfers performed while executing the deploy.\",\n                            \"type\": \"array\",\n                            \"items\": {\n                                \"$ref\": \"#/components/schemas/TransferAddr\"\n                            }\n                        },\n                        \"cost\": {\n                            \"description\": \"The cost of executing the deploy.\",\n                            \"allOf\": [\n                                {\n                                    \"$ref\": \"#/components/schemas/U512\"\n                                }\n                            ]\n                        }\n                    },\n                    \"additionalProperties\": false\n                }\n            },\n            \"additionalProperties\": false\n        }\n    ]\n}\n```\n\n----------------------------------------\n\nTITLE: Building and Testing the Contract\nDESCRIPTION: Commands to build the CEP-18 contract and run its unit tests using Make commands.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/versioned_docs/version-1.5.X/resources/tokens/cep18/full-tutorial.md#2025-04-22_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nmake build-contract\nmake test\n```\n\n----------------------------------------\n\nTITLE: Replaying the Sidecar Event Stream with cURL\nDESCRIPTION: Uses cURL to replay the event stream from a specific event ID onwards.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/docs/developers/dapps/monitor-and-consume-events.md#2025-04-22_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\ncurl -s http://NODE_ADDRESS:PORT/events?start_from=ID\n```\n\n----------------------------------------\n\nTITLE: Querying Deployment Status in Bash\nDESCRIPTION: Command to check the status of a CEP-18 token deployment on the Casper Testnet using the deploy hash returned from the put-deploy command.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/versioned_docs/version-1.5.X/resources/beginner/cep18.md#2025-04-22_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\ncasper-client get-deploy \\\n    --node-address http://78.46.32.13:7777 19853d1569fec2b0fa36e81f2f24bea77ccf039a399071cb7d4b377202a073d6\n```\n\n----------------------------------------\n\nTITLE: Disabling Unrestricted Transfers in chainspec.toml (TOML)\nDESCRIPTION: This configuration snippet, placed within the `[core]` section of the `chainspec.toml` file, disables unrestricted token transfers between regular accounts in a private Casper network. When set to `false`, only designated administrator accounts can freely transfer tokens.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/docs/operators/setup-network/create-private.md#2025-04-22_snippet_0\n\nLANGUAGE: toml\nCODE:\n```\n[core]\nallow_unrestricted_transfers = false\n```\n\n----------------------------------------\n\nTITLE: Preparing Runtime Arguments for Casper Network Staking Operations in JavaScript\nDESCRIPTION: This code snippet shows how to prepare runtime arguments for staking operations on the Casper Network using the casper-js-sdk. It sets up the delegator and validator public keys, as well as the staking amount.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/versioned_docs/version-2.0.0/resources/advanced/list-cspr.md#2025-04-22_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nimport { RuntimeArgs, CLValueBuilder, CLPublicKey } from 'casper-js-sdk';\n\nconst args = RuntimeArgs.fromMap({\n  delegator: CLPublicKey.fromHex(delegatorPublicKeyHex),\n  validator: CLPublicKey.fromHex(validatorPublicKeyHex),\n  amount: CLValueBuilder.u512(amountMotes) // in motes\n});\n```\n\n----------------------------------------\n\nTITLE: Querying Account State\nDESCRIPTION: Command to retrieve account state information using the public key and state root hash.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/versioned_docs/version-1.5.X/developers/cli/transfers/verify-transfer.md#2025-04-22_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\ncasper-client query-global-state \\\n--id [ID] \\\n--node-address [NODE_SERVER_ADDRESS] \\\n--state-root-hash [STATE_ROOT_HASH] \\\n--key [SOURCE_PUBLIC_KEY]\n```\n\n----------------------------------------\n\nTITLE: Defining EntityOrAccount Schema in JSON\nDESCRIPTION: Defines the schema for EntityOrAccount, which represents an addressable entity or a legacy account. It includes properties for the entity, named keys, and entry points.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/condor/jsonrpc-comp/rpc-2.0/schema.json.md#2025-04-22_snippet_80\n\nLANGUAGE: json\nCODE:\n```\n\"EntityOrAccount\": {\n  \"description\": \"An addressable entity or a legacy account.\",\n  \"oneOf\": [\n    {\n      \"description\": \"An addressable entity.\",\n      \"type\": \"object\",\n      \"required\": [\n        \"AddressableEntity\"\n      ],\n      \"properties\": {\n        \"AddressableEntity\": {\n          \"type\": \"object\",\n          \"required\": [\n            \"entity\",\n            \"entry_points\",\n            \"named_keys\"\n          ],\n          \"properties\": {\n            \"entity\": {\n              \"description\": \"The addressable entity.\",\n              \"allOf\": [\n                {\n                  \"$ref\": \"#/components/schemas/AddressableEntity\"\n                }\n              ]\n            },\n            \"named_keys\": {\n              \"description\": \"The named keys of the addressable entity.\",\n              \"allOf\": [\n                {\n                  \"$ref\": \"#/components/schemas/NamedKeys\"\n                }\n              ]\n            },\n            \"entry_points\": {\n              \"description\": \"The entry points of the addressable entity.\",\n              \"type\": \"array\",\n              \"items\": {\n                \"$ref\": \"#/components/schemas/EntryPointValue\"\n              }\n            }\n          }\n        }\n      },\n      \"additionalProperties\": false\n    }\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Defining JSON Schema for Transaction Hash\nDESCRIPTION: This JSON schema defines a hex-encoded transaction hash field for version 1 of a transaction. It extends from an existing 'Digest' schema to ensure consistency across definitions. The schema uses the '$ref' keyword to import properties from the 'Digest' schema.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/condor/jsonrpc-comp/rpc-2.0/schema/TransactionV1Hash.json.md#2025-04-22_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"description\": \"Hex-encoded TransactionV1 hash.\",\n    \"allOf\": [\n        {\n            \"$ref\": \"#/components/schemas/Digest\"\n        }\n    ]\n}\n```\n\n----------------------------------------\n\nTITLE: Defining TransactionV1 JSON Schema\nDESCRIPTION: This JSON snippet outlines the structure for a `TransactionV1` object using JSON Schema. It mandates the presence of `approvals`, `body`, `hash`, and `header` properties, referencing other component schemas (`TransactionV1Hash`, `TransactionV1Header`, `TransactionV1Body`, `Approval`) for their detailed definitions. The `approvals` property is specified as an array containing unique `Approval` schema objects, and no additional properties are permitted.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/condor/jsonrpc-comp/rpc-2.0/schema/TransactionV1.json.md#2025-04-22_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"description\": \"A unit of work sent by a client to the network, which when executed can cause global state to be altered.\",\n    \"type\": \"object\",\n    \"required\": [\n        \"approvals\",\n        \"body\",\n        \"hash\",\n        \"header\"\n    ],\n    \"properties\": {\n        \"hash\": {\n            \"$ref\": \"#/components/schemas/TransactionV1Hash\"\n        },\n        \"header\": {\n            \"$ref\": \"#/components/schemas/TransactionV1Header\"\n        },\n        \"body\": {\n            \"$ref\": \"#/components/schemas/TransactionV1Body\"\n        },\n        \"approvals\": {\n            \"type\": \"array\",\n            \"items\": {\n                \"$ref\": \"#/components/schemas/Approval\"\n            },\n            \"uniqueItems\": true\n        }\n    },\n    \"additionalProperties\": false\n} \n```\n\n----------------------------------------\n\nTITLE: Serializing NamedKey Structure\nDESCRIPTION: Describes `NamedKey`, a mapping from string identifiers to Casper `Key` types. It serializes like a `BTreeMap`, starting with a `u32` indicating the number of key-value pairs, followed by the serialized pairs (each being a serialized `String` name and a serialized `Key` value).\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/versioned_docs/version-2.0.0/concepts/serialization/types.md#2025-04-22_snippet_30\n\nLANGUAGE: text\nCODE:\n```\nA mapping of string identifiers to a Casper `Key` type. It is serialized as a `BTreeMap` where the first 4 bytes represent a `u32` value describing the number of named keys and values held within. The remainder consists of a repeating pattern of serialized named keys and then values of the length dictated by the first four bytes.\n\n-   `name`: The name of the entry. It serializes as a [`string`](./primitives.md#clvalue-string).\n\n-   `key`: The value of the entry, which is a Casper `Key` type.\n\nThe named keys portion of the account structure serializes as a mapping of a string to Casper `Key` values as described [here](#serialization-standard-serialization-key).\n```\n\n----------------------------------------\n\nTITLE: Sample JSON Response for Global State Query (Account)\nDESCRIPTION: Example JSON response from a `query-global-state` request targeting an account hash. The `stored_value` field contains a CLValue of type Key, whose parsed value represents the entity account identifier needed for more detailed queries using `get-entity`.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/versioned_docs/version-2.0.0/developers/cli/querying-global-state.md#2025-04-22_snippet_5\n\nLANGUAGE: json\nCODE:\n```\n```json\n{\n  \"jsonrpc\": \"2.0\",\n  \"id\": 2591514718461273084,\n  \"result\": {\n    \"api_version\": \"2.0.0\",\n    \"block_header\": null,\n    \"stored_value\": {\n      \"CLValue\": {\n        \"cl_type\": \"Key\",\n        \"bytes\": \"11016a56c4eee172043975aea72221eaf09f3c3a24f09a379935e44c9979f1ae9463\",\n        \"parsed\": \"entity-account-6a56c4eee172043975aea72221eaf09f3c3a24f09a379935e44c9979f1ae9463\"\n      }\n    },\n    \"merkle_proof\": \"[2566 hex chars]\"\n  }\n}\n```\n```\n\n----------------------------------------\n\nTITLE: Sample Contract Global State Query Result in JSON\nDESCRIPTION: Presents a sample JSON response obtained from executing the `casper-client query-global-state` command for a specific contract. This output includes metadata like the API version and block header, along with the `stored_value` which contains detailed contract information such as package/byte code hashes, named keys (representing stored data like configuration, balances, metadata kinds), and defined entry points.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/docs/developers/writing-onchain-code/emitting-contract-events.md#2025-04-22_snippet_4\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"jsonrpc\": \"2.0\",\n  \"id\": -4994937296370433409,\n  \"result\": {\n    \"api_version\": \"1.0.0\",\n    \"block_header\": {\n      \"Version2\": {\n        \"parent_hash\": \"deafd8e5c1aff47ae8528fa2d343b711c2f5cb18ee29527961b37d4d173ad42a\",\n        \"state_root_hash\": \"96d8962c03899277f9a4bd667c0510c0eab490dd6253ae0b8cee4ebfbcd52be6\",\n        \"body_hash\": \"28812ec460ab82f94f3c658e946bb4779c6b76dea9c55d18beaf1e47fe8dd9c9\",\n        \"random_bit\": false,\n        \"accumulated_seed\": \"96a09ea136bb7e4e99b039ee0f1f6d9dd88d663927faffc7eb5c60804056354c\",\n        \"era_end\": null,\n        \"timestamp\": \"2023-11-28T23:59:53.856Z\",\n        \"era_id\": 112,\n        \"height\": 1066,\n        \"protocol_version\": \"1.0.0\"\n      }\n    },\n    \"stored_value\": {\n      \"AddressableEntity\": {\n        \"package_hash\": \"contract-package-66cf48b3ccf32269ccc5d93059eef461bcf2c8b2460309ff3a442190688d5275\",\n        \"byte_code_hash\": \"contract-wasm-23e042b941e45ea7fe4f81496fd778349f2002b2f786f9fddbdd1298450b60ad\",\n        \"named_keys\": [\n          {\n            \"name\": \"acl_package_mode\",\n            \"key\": \"uref-2a088bc6c30d1499cd9348d388a03c8162ab26d09b0484f634e6f4022581fe99-007\"\n          },\n          {\n            \"name\": \"acl_whitelist\",\n            \"key\": \"uref-d17ecf3fe6e46f9a6063cfb31cdb03cdd6b99d095b71d2247319c293f864c4d1-007\"\n          },\n          {\n            \"name\": \"allow_minting\",\n            \"key\": \"uref-c737324d1caa1885ad0f22f628933cfce91400ea259147186d330cf167eb6843-007\"\n          },\n          {\n            \"name\": \"approved\",\n            \"key\": \"uref-87a0de173fd6a56fb867bab46d8a508a43259a244ffdd8b0d98e5c286261f9af-007\"\n          },\n          {\n            \"name\": \"balances\",\n            \"key\": \"uref-0c08f3df6e05e509000cd57646b98983481b8bcd46b98f0aae1a5abccc1e114f-007\"\n          },\n          {\n            \"name\": \"burn_mode\",\n            \"key\": \"uref-e507551382a6217b9165dd222854e6c877d33eab9845c4b7e8444559303e5b8a-007\"\n          },\n          {\n            \"name\": \"burnt_tokens\",\n            \"key\": \"uref-4711c3ee36ac9639af509f45164fdb5a88692b109c3b2360e57d09fcdd702f63-007\"\n          },\n          {\n            \"name\": \"cep78_CEP-78\",\n            \"key\": \"uref-a02fc32366a7187448afb8263a8f3716e933d28d84db6c6403893d94917cf98d-007\"\n          },\n          {\n            \"name\": \"collection_name\",\n            \"key\": \"uref-89e904724d79a9f6d41958a3621b437c9e220ad081805f39040ff51c79a8d67c-007\"\n          },\n          {\n            \"name\": \"collection_symbol\",\n            \"key\": \"uref-d41a40789a84cc8e0314135695acc279875d6c7455daafe517cc4ae5329d95de-007\"\n          },\n          {\n            \"name\": \"events_mode\",\n            \"key\": \"uref-d950666b546fe7afcf123f833ba4166b395c03bdbfd5de86dab051af3c1cdac0-007\"\n          },\n          {\n            \"name\": \"hash_by_index\",\n            \"key\": \"uref-7c9751097762ad778a6a11151780d377cbc57e0807e289d278831ca9263aa844-007\"\n          },\n          {\n            \"name\": \"holder_mode\",\n            \"key\": \"uref-e7acd748f4f82e609aa49f577e78e1ce6b1ab1dad5b5b1b59c8ff965598a6f34-007\"\n          },\n          {\n            \"name\": \"identifier_mode\",\n            \"key\": \"uref-bf32824dddf12dd16668581211ed22bef4b36c22db0165bde4986508f363940e-007\"\n          },\n          {\n            \"name\": \"index_by_hash\",\n            \"key\": \"uref-e67fecb85654def8b1440907728491f4f1ae125a97f3fed93872c075e6fb4ad5-007\"\n          },\n          {\n            \"name\": \"installer\",\n            \"key\": \"account-hash-212ffdd040b65495419f4057c8392930e410f7bf24baeec8de59a6117b63e45c\"\n          },\n          {\n            \"name\": \"json_schema\",\n            \"key\": \"uref-f8b2f63a4c69a84c795908e9abd0f66b857790b8df627a21336d6d1e07bf7103-007\"\n          },\n          {\n            \"name\": \"metadata_cep78\",\n            \"key\": \"uref-5cf8084639c2b7b8f54ab78700e0a82107c0bb28966cdc3ffdd4bd0877a47f64-007\"\n          },\n          {\n            \"name\": \"metadata_custom_validated\",\n            \"key\": \"uref-f5ce01c02a1942a4833159d72414c014b0838b607b4f419af9e19cd2fb123658-007\"\n          },\n          {\n            \"name\": \"metadata_mutability\",\n            \"key\": \"uref-c11c8e99c52477efaae636890a49625f54e32b832e23e288e00952c8bf34610a-007\"\n          },\n          {\n            \"name\": \"metadata_nft721\",\n            \"key\": \"uref-d39ee0c77f9864b05297ac504ee5919d60dddb6c8c0d6ccce8225801885f8972-007\"\n          },\n          {\n            \"name\": \"metadata_raw\",\n            \"key\": \"uref-dc660363cb2b4dfea2c01d8c3bf2258a3700fb6c830d13972ff206e330fd791a-007\"\n          },\n          {\n            \"name\": \"minting_mode\",\n            \"key\": \"uref-962f6e020971031eb1bdd37f705df498cd4ee90c15aae901df9654a10461184d-007\"\n          },\n          {\n            \"name\": \"nft_kind\",\n            \"key\": \"uref-001ffa305e021b5d411a3e04707b3c17f0d31ee400e6c5faa9b8f66e0ebfdc99-007\"\n          },\n          {\n            \"name\": \"nft_metadata_kind\",\n            \"key\": \"uref-8dfb98ccdd030aae1e0dcda03dc728dd4332eb18c945fd25a55b43f9e487141e-007\"\n          },\n          {\n            \"name\": \"nft_metadata_kinds\",\n            \"key\": \"uref-cb9799861587032b55d391604c8a9f016d1237b0b600413d6c050da3e0fc81d1-007\"\n          },\n          {\n            \"name\": \"number_of_minted_tokens\",\n            \"key\": \"uref-cd0871a7e69b91a05dbf81068115e45380de3a35bd2258369e3a24b7958cd77f-007\"\n          },\n          {\n            \"name\": \"operator_burn_mode\",\n            \"key\": \"uref-40977d32bbfb85454c9e7b5ca03192efcd406f228d5c2e593210b3960e05604e-007\"\n          },\n          {\n            \"name\": \"operators\",\n            \"key\": \"uref-cbcb06403fbd8cb9f397029718f1f7e66bf5ec4e33aa58315dd3d5ecf5d078a7-007\"\n          },\n          {\n            \"name\": \"ownership_mode\",\n            \"key\": \"uref-bba9996be36b1526113a0aaa030db658edd3c8719a60d55b35b7312f01f2e6da-007\"\n          },\n          {\n            \"name\": \"package_operator_mode\",\n            \"key\": \"uref-c05e3e87f5a64fbc20615afffaa6e4c81d98431b698f681322f5d8730ff40590-007\"\n          },\n          {\n            \"name\": \"page_table\",\n            \"key\": \"uref-4c545e6e4860629fd138fcb91f24d21498e69b076d472660ff769dfc2a994301-007\"\n          },\n          {\n            \"name\": \"receipt_name\",\n            \"key\": \"uref-6ddba59f56a5d52df5b8f85d03d19003feec3307a9d9ac6b420486d1a440a586-007\"\n          },\n          {\n            \"name\": \"reporting_mode\",\n            \"key\": \"uref-b6c48cfa2fa090b71912b209638b33bbf8b670a8d8a1065d73b54c70f5cc414c-007\"\n          },\n          {\n            \"name\": \"rlo_mflag\",\n            \"key\": \"uref-d520d8cbca2b28a42f0db9493e94bdbb93f74702e20eac1a77b48dda39367afe-007\"\n          },\n          {\n            \"name\": \"token_issuers\",\n            \"key\": \"uref-c1993c045f9e656b4bcb40639705d232cb6ecb4a2c6a04aeb33baffe9869cb9a-007\"\n          },\n          {\n            \"name\": \"token_owners\",\n            \"key\": \"uref-1cabd90eac707493056418a62d8b82057af0d7c1e1b90d6139a46120fff4187d-007\"\n          },\n          {\n            \"name\": \"total_token_supply\",\n            \"key\": \"uref-09b6f0901eb8cd9c6272be8199aeff4c6f5d2e3989980b548dbd595b40c033bf-007\"\n          },\n          {\n            \"name\": \"whitelist_mode\",\n            \"key\": \"uref-af7ba884bbddf91530279c0ea005c56a4951f5330ebe5395528471302b791b3e-007\"\n          }\n        ],\n        \"entry_points\": [\n          {\n            \"name\": \"approve\",\n            \"entry_point\": {\n              \"name\": \"approve\",\n              \"args\": [\n                {\n                  \"name\": \"spender\",\n                  \"cl_type\": \"Key\"\n                }\n              ],\n              \"ret\": \"Unit\",\n              \"access\": \"Public\",\n              \"entry_point_type\": \"AddressableEntity\"\n            }\n          },\n          {\n            \"name\": \"balance_of\",\n            \"entry_point\": {\n              \"name\": \"balance_of\",\n              \"args\": [\n                {\n                  \"name\": \"token_owner\",\n                  \"cl_type\": \"Key\"\n                }\n              ],\n              \"ret\": \"U64\",\n              \"access\": \"Public\",\n              \"entry_point_type\": \"AddressableEntity\"\n            }\n          },\n          {\n            \"name\": \"burn\",\n            \"entry_point\": {\n              \"name\": \"burn\",\n              \"args\": [],\n              \"ret\": \"Unit\",\n              \"access\": \"Public\",\n              \"entry_point_type\": \"AddressableEntity\"\n            }\n          },\n          {\n            \"name\": \"get_approved\",\n            \"entry_point\": {\n              \"name\": \"get_approved\",\n              \"args\": [],\n              \"ret\": {\n\n```\n\n----------------------------------------\n\nTITLE: Defining TransformKindV1 Schema for Casper Network API\nDESCRIPTION: JSON schema definition for TransformKindV1, which represents various types of transformations that can be performed while executing a deploy. It includes operations like writing CLValue, Account, Contract, DeployInfo, and numeric additions.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/condor/jsonrpc-comp/rpc-2.0/schema/components.json.md#2025-04-22_snippet_28\n\nLANGUAGE: json\nCODE:\n```\n\"TransformKindV1\": {\n    \"description\": \"The actual transformation performed while executing a deploy.\",\n    \"oneOf\": [\n        {\n            \"description\": \"A transform having no effect.\",\n            \"type\": \"string\",\n            \"enum\": [\n                \"Identity\"\n            ]\n        },\n        {\n            \"description\": \"Writes the given CLValue to global state.\",\n            \"type\": \"object\",\n            \"required\": [\n                \"WriteCLValue\"\n            ],\n            \"properties\": {\n                \"WriteCLValue\": {\n                    \"$ref\": \"#/components/schemas/CLValue\"\n                }\n            },\n            \"additionalProperties\": false\n        },\n        // ... (other transform types omitted for brevity)\n        {\n            \"description\": \"Adds the given collection of named keys.\",\n            \"type\": \"object\",\n            \"required\": [\n                \"AddKeys\"\n            ],\n            \"properties\": {\n                \"AddKeys\": {\n                    \"type\": \"array\",\n                    \"items\": {\n                        \"$ref\": \"#/components/schemas/NamedKey\"\n                    }\n                }\n            },\n            \"additionalProperties\": false\n        }\n    ]\n}\n```\n\n----------------------------------------\n\nTITLE: Installing SSL Libraries\nDESCRIPTION: Commands to install SSL development libraries for MacOS (openssl) and Linux (libssl-dev).\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/docs/developers/dapps/setup-nctl.md#2025-04-22_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\n$ brew install openssl\n```\n\nLANGUAGE: bash\nCODE:\n```\n$ sudo apt install libssl-dev\n```\n\n----------------------------------------\n\nTITLE: Defining JSON Schema for Contract WASM\nDESCRIPTION: This JSON snippet defines a schema for a JSON object that acts as a container for a smart contract's WASM bytes. The schema specifies that the object requires a property named 'bytes', which is further referenced from '#/components/schemas/Bytes'. This schema is used to enforce the structure and validation of JSON data representing the WASM container.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/condor/jsonrpc-comp/rpc-2.0/schema/ContractWasm.json.md#2025-04-22_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"description\": \"A container for contract's WASM bytes.\",\n    \"type\": \"object\",\n    \"required\": [\n        \"bytes\"\n    ],\n    \"properties\": {\n        \"bytes\": {\n            \"$ref\": \"#/components/schemas/Bytes\"\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Returning Values from Casper Contract Entrypoint using runtime::ret - Rust\nDESCRIPTION: This Rust contract snippet defines a donate entrypoint that processes donation records and returns the contract's fundraising purse URef to the immediate caller. Dependencies include the Casper platform's runtime library with types like Key, CLValue, and proper error enums (e.g., FundRaisingError). Required named arguments are DONATING_ACCOUNT_KEY and established constants for the fundraising purse. It expects a valid account key and emits the purse URef with 'add' permissions or reverts with descriptive errors; the session or calling contract can then use this URef for subsequent fund transfers.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/versioned_docs/version-1.5.X/resources/advanced/return-values-tutorial.md#2025-04-22_snippet_0\n\nLANGUAGE: rust\nCODE:\n```\n\n\n#[no_mangle]\npub extern \"C\" fn donate() {\n    let donating_account_key: Key = runtime::get_named_arg(DONATING_ACCOUNT_KEY);\n    if let Key::Account(donating_account_hash) = donating_account_key {\n        update_ledger_record(donating_account_hash.to_string())\n    } else {\n        runtime::revert(FundRaisingError::InvalidKeyVariant)\n    }\n    let donation_purse = *runtime::get_key(FUNDRAISING_PURSE)\n        .unwrap_or_revert_with(FundRaisingError::MissingFundRaisingPurseURef)\n        .as_uref()\n        .unwrap_or_revert();\n    let value = CLValue::from_t(donation_purse.into_add()).unwrap_or_revert();\n    runtime::ret(value)\n}\n\n```\n\n----------------------------------------\n\nTITLE: Defining StoredValue JSON Schema for Casper Network Global State\nDESCRIPTION: This JSON Schema defines the structure for a `StoredValue`, representing a value stored in the Casper Network's global state. It uses the `anyOf` construct to allow the value to be one of several distinct types, such as a `CLValue`, `Account`, `ContractWasm`, `Contract`, `ContractPackage`, `Transfer`, `DeployInfo`, `EraInfo`, `Bid`, `Withdraw` (an array of `WithdrawPurse`), or `Unbonding` (an array of `UnbondingPurse`). Each possibility is defined as an object with a single required property corresponding to the specific type, often referencing other schema definitions (`$ref`).\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/condor/jsonrpc-comp/rpc-1.5/schema/StoredValue.json.md#2025-04-22_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"description\": \"Representation of a value stored in global state.\\n\\n`Account`, `Contract` and `ContractPackage` have their own `json_compatibility` representations (see their docs for further info).\",\n    \"anyOf\": [\n        {\n            \"description\": \"An instance of any variant of CLValue\",\n            \"type\": \"object\",\n            \"required\": [\n                \"CLValue\"\n            ],\n            \"properties\": {\n                \"CLValue\": {\n                    \"$ref\": \"#/components/schemas/CLValue\"\n                }\n            },\n            \"additionalProperties\": false\n        },\n        {\n            \"description\": \"An account.\",\n            \"type\": \"object\",\n            \"required\": [\n                \"Account\"\n            ],\n            \"properties\": {\n                \"Account\": {\n                    \"$ref\": \"#/components/schemas/Account\"\n                }\n            },\n            \"additionalProperties\": false\n        },\n        {\n            \"description\": \"A contract's Wasm\",\n            \"type\": \"object\",\n            \"required\": [\n                \"ContractWasm\"\n            ],\n            \"properties\": {\n                \"ContractWasm\": {\n                    \"type\": \"string\"\n                }\n            },\n            \"additionalProperties\": false\n        },\n        {\n            \"description\": \"Methods and type signatures supported by a contract.\",\n            \"type\": \"object\",\n            \"required\": [\n                \"Contract\"\n            ],\n            \"properties\": {\n                \"Contract\": {\n                    \"$ref\": \"#/components/schemas/Contract\"\n                }\n            },\n            \"additionalProperties\": false\n        },\n        {\n            \"description\": \"A contract definition, metadata, and security container.\",\n            \"type\": \"object\",\n            \"required\": [\n                \"ContractPackage\"\n            ],\n            \"properties\": {\n                \"ContractPackage\": {\n                    \"$ref\": \"#/components/schemas/ContractPackage\"\n                }\n            },\n            \"additionalProperties\": false\n        },\n        {\n            \"description\": \"A record of a transfer\",\n            \"type\": \"object\",\n            \"required\": [\n                \"Transfer\"\n            ],\n            \"properties\": {\n                \"Transfer\": {\n                    \"$ref\": \"#/components/schemas/Transfer\"\n                }\n            },\n            \"additionalProperties\": false\n        },\n        {\n            \"description\": \"A record of a deploy\",\n            \"type\": \"object\",\n            \"required\": [\n                \"DeployInfo\"\n            ],\n            \"properties\": {\n                \"DeployInfo\": {\n                    \"$ref\": \"#/components/schemas/DeployInfo\"\n                }\n            },\n            \"additionalProperties\": false\n        },\n        {\n            \"description\": \"Auction metadata\",\n            \"type\": \"object\",\n            \"required\": [\n                \"EraInfo\"\n            ],\n            \"properties\": {\n                \"EraInfo\": {\n                    \"$ref\": \"#/components/schemas/EraInfo\"\n                }\n            },\n            \"additionalProperties\": false\n        },\n        {\n            \"description\": \"A bid\",\n            \"type\": \"object\",\n            \"required\": [\n                \"Bid\"\n            ],\n            \"properties\": {\n                \"Bid\": {\n                    \"$ref\": \"#/components/schemas/Bid\"\n                }\n            },\n            \"additionalProperties\": false\n        },\n        {\n            \"description\": \"A withdraw\",\n            \"type\": \"object\",\n            \"required\": [\n                \"Withdraw\"\n            ],\n            \"properties\": {\n                \"Withdraw\": {\n                    \"type\": \"array\",\n                    \"items\": {\n                        \"$ref\": \"#/components/schemas/WithdrawPurse\"\n                    }\n                }\n            },\n            \"additionalProperties\": false\n        },\n        {\n            \"description\": \"A collection of unbonding purses\",\n            \"type\": \"object\",\n            \"required\": [\n                \"Unbonding\"\n            ],\n            \"properties\": {\n                \"Unbonding\": {\n                    \"type\": \"array\",\n                    \"items\": {\n                        \"$ref\": \"#/components/schemas/UnbondingPurse\"\n                    }\n                }\n            },\n            \"additionalProperties\": false\n        }\n    ]\n}\n```\n\n----------------------------------------\n\nTITLE: Project Setup Commands\nDESCRIPTION: Series of commands to install dependencies and start the development server.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/docs/developers/dapps/template-frontend.md#2025-04-22_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\ncd vite-project/\nnpm install\nvite dev\nnpm install casper-js-sdk\nnpm install axios\n```\n\n----------------------------------------\n\nTITLE: Upgrading Pip in Virtual Environment\nDESCRIPTION: Command to upgrade pip to the latest version within the virtual environment.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/versioned_docs/version-1.5.X/developers/dapps/setup-nctl.md#2025-04-22_snippet_9\n\nLANGUAGE: bash\nCODE:\n```\npip install --upgrade pip\n```\n\n----------------------------------------\n\nTITLE: Compiling Casper Smart Contract\nDESCRIPTION: Commands to prepare and build the smart contract, producing a WebAssembly (.wasm) file.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/versioned_docs/version-1.5.X/resources/advanced/cross-contract.md#2025-04-22_snippet_9\n\nLANGUAGE: bash\nCODE:\n```\ncd cross-contract\nmake prepare\nmake build-contract\n```\n\n----------------------------------------\n\nTITLE: Defining Era Summary Example in JSON\nDESCRIPTION: This snippet provides an example of the 'chain_get_era_summary_example' and its expected result within the Casper Network's API documentation. It includes API version, era summary details, and seigniorage allocations. This example demonstrates how to structure requests and interpret the results using JSON format.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/condor/jsonrpc-comp/rpc-1.5/schema.json.md#2025-04-22_snippet_25\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"name\": \"chain_get_era_summary_example\",\n  \"params\": [\n    {\n      \"name\": \"block_identifier\",\n      \"value\": {\n        \"Hash\": \"13c2d7a68ecdd4b74bf4393c88915c836c863fc4bf11d7f2bd930a1bbccacdcb\"\n      }\n    }\n  ],\n  \"result\": {\n    \"name\": \"chain_get_era_summary_example_result\",\n    \"value\": {\n      \"api_version\": \"1.5.6\",\n      \"era_summary\": {\n        \"block_hash\": \"13c2d7a68ecdd4b74bf4393c88915c836c863fc4bf11d7f2bd930a1bbccacdcb\",\n        \"era_id\": 42,\n        \"stored_value\": {\n          \"EraInfo\": {\n            \"seigniorage_allocations\": [\n              {\n                \"Delegator\": {\n                  \"delegator_public_key\": \"01e1b46a25baa8a5c28beb3c9cfb79b572effa04076f00befa57eb70b016153f18\",\n                  \"validator_public_key\": \"012a1732addc639ea43a89e25d3ad912e40232156dcaa4b9edfc709f43d2fb0876\",\n                  \"amount\": \"1000\"\n                }\n              },\n              {\n                \"Validator\": {\n                  \"validator_public_key\": \"012a1732addc639ea43a89e25d3ad912e40232156dcaa4b9edfc709f43d2fb0876\",\n                  \"amount\": \"2000\"\n                }\n              }\n            ]\n          }\n        },\n        \"state_root_hash\": \"0808080808080808080808080808080808080808080808080808080808080808\",\n        \"merkle_proof\": \"01000000006ef2e0949ac76e55812421f755abe129b6244fe7168b77f47a72536147614625016ef2e0949ac76e55812421f755abe129b6244fe7168b77f47a72536147614625000000003529cde5c621f857f75f3810611eb4af3f998caaa9d4a3413cf799f99c67db0307010000006ef2e0949ac76e55812421f755abe129b6244fe7168b77f47a7253614761462501010102000000006e06000000000074769d28aac597a36a03a932d4b43e4f10bf0403ee5c41dd035102553f5773631200b9e173e8f05361b681513c14e25e3138639eb03232581db7557c9e8dbbc83ce94500226a9a7fe4f2b7b88d5103a4fc7400f02bf89c860c9ccdd56951a2afe9be0e0267006d820fb5676eb2960e15722f7725f3f8f41030078f8b2e44bf0dc03f71b176d6e800dc5ae9805068c5be6da1a90b2528ee85db0609cc0fb4bd60bbd559f497a98b67f500e1e3e846592f4918234647fca39830b7e1e6ad6f5b7a99b39af823d82ba1873d000003000000010186ff500f287e9b53f823ae1582b1fa429dfede28015125fd233a31ca04d5012002015cc42669a55467a1fdf49750772bfc1aed59b9b085558eb81510e9b015a7c83b0301e3cf4a34b1db6bfa58808b686cb8fe21ebe0c1bcbcee522649d2b135fe510fe3\"\n      }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Deploying Multi-Sig Configuration with Casper Client\nDESCRIPTION: Command to send the compiled Wasm to the network using the Casper client, configuring the account with the multi-signature scheme. It specifies network address, secret key, chain name, payment amount, and session arguments.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/versioned_docs/version-1.5.X/resources/advanced/two-party-multi-sig.md#2025-04-22_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\ncasper-client put-deploy \\\n--node-address http://<peer-ip-address>:7777 \\\n--secret-key <secret-key-MA>.pem \\\n--chain-name casper-test \\\n--payment-amount 2500000000 \\\n--session-path <path-to-contract-wasm> \\\n--session-arg \"deployment-account:account_hash='account-hash-<hash-AA>'\"\n```\n\n----------------------------------------\n\nTITLE: Defining Validator Weight Schema in JSON\nDESCRIPTION: JSON Schema that specifies the required properties for a validator weight entry. It requires a validator public key and their associated weight in motes (total staked amount including delegations). The schema references external definitions for PublicKey and U512 types.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/condor/jsonrpc-comp/rpc-2.0/schema/ValidatorWeight.json.md#2025-04-22_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"description\": \"A validator's public key paired with its weight, i.e. the total number of motes staked by it and its delegators.\",\n    \"type\": \"object\",\n    \"required\": [\n        \"validator\",\n        \"weight\"\n    ],\n    \"properties\": {\n        \"validator\": {\n            \"description\": \"The validator's public key.\",\n            \"allOf\": [\n                {\n                    \"$ref\": \"#/components/schemas/PublicKey\"\n                }\n            ]\n        },\n        \"weight\": {\n            \"description\": \"The validator's weight.\",\n            \"allOf\": [\n                {\n                    \"$ref\": \"#/components/schemas/U512\"\n                }\n            ]\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Executing Contract Entry Point with Authorization\nDESCRIPTION: Test code showing entry point execution with specific authorization keys, demonstrating key intersection validation between installer and caller deploys.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/versioned_docs/version-1.5.X/resources/advanced/list-auth-keys-tutorial.md#2025-04-22_snippet_10\n\nLANGUAGE: rust\nCODE:\n```\nlet contract_hash = builder\n    .get_expected_account(*DEFAULT_ACCOUNT_ADDR)\n    .named_keys()\n    .get(CONTRACT_HASH)\n    .expect(\"must have this entry in named keys\")\n    .into_hash()\n    .map(ContractHash::new)\n    .unwrap();\n\nlet entry_point_deploy_item = DeployItemBuilder::new()\n    .with_empty_payment_bytes(runtime_args! {ARG_AMOUNT => *DEFAULT_PAYMENT})\n    .with_authorization_keys(&[account_addr_1])\n    .with_address(account_addr_1)\n    .with_stored_session_hash(contract_hash, ENTRYPOINT, runtime_args! {})\n    .build();\n\nlet entry_point_request =\n    ExecuteRequestBuilder::from_deploy_item(entry_point_deploy_item).build();\n\nbuilder.exec(entry_point_request).expect_success().commit();\n```\n\n----------------------------------------\n\nTITLE: URef With READ and ADD Access Rights Example - Bash\nDESCRIPTION: Example of a URef string representation with READ and ADD access rights, shown with a '005' suffix.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/docs/developers/dapps/uref-security.md#2025-04-22_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nuref-974019c976b5f26412ce486158d2431967af35d91387dae8cbcd43c20fce6452-005\n```\n\n----------------------------------------\n\nTITLE: Viewing Deploy Info and State Transformation Results in JSON\nDESCRIPTION: JSON output showing the transformation results from a contract deployment. This contains the deploy hash, account info, gas usage, and various state transformations including identity transformations and balance changes.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/docs/resources/advanced/cross-contract.md#2025-04-22_snippet_21\n\nLANGUAGE: json\nCODE:\n```\n\"transform\": {\n  \"WriteDeployInfo\": {\n    \"deploy_hash\": \"15e11340d92fc9e64deb38bd942f4efb69caad0851eec24fd577070309d18537\",\n    \"from\": \"account-hash-ee57bb3b39eb66b74a1dcf12f3f0e7d8e906e34b11f85dc05497bf33fbf3a1f9\",\n    \"gas\": \"462273650\",\n    \"source\": \"uref-453534c5c380862c2d814b5879f08fe6b5a3d4f031eaf20e08cf091d274035a5-007\",\n    \"transfers\": []\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Era Summary JSON Schema\nDESCRIPTION: This JSON schema details the data structure for summarizing an era on the Casper Network. It specifies required properties such as \"block_hash\", \"era_id\", \"state_root_hash\", \"stored_value\", and \"merkle_proof\". Each property is described with its purpose and data type. The schema ensures data consistency and validation for era information. Dependencies include proper JSON structure and references to components schemas like BlockHash and EraId.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/condor/jsonrpc-comp/rpc-2.0/schema/EraSummary.json.md#2025-04-22_snippet_0\n\nLANGUAGE: JSON\nCODE:\n```\n{\n    \"description\": \"The summary of an era\",\n    \"type\": \"object\",\n    \"required\": [\n        \"block_hash\",\n        \"era_id\",\n        \"merkle_proof\",\n        \"state_root_hash\",\n        \"stored_value\"\n    ],\n    \"properties\": {\n        \"block_hash\": {\n            \"description\": \"The block hash\",\n            \"allOf\": [\n                {\n                    \"$ref\": \"#/components/schemas/BlockHash\"\n                }\n            ]\n        },\n        \"era_id\": {\n            \"description\": \"The era id\",\n            \"allOf\": [\n                {\n                    \"$ref\": \"#/components/schemas/EraId\"\n                }\n            ]\n        },\n        \"stored_value\": {\n            \"description\": \"The StoredValue containing era information\",\n            \"allOf\": [\n                {\n                    \"$ref\": \"#/components/schemas/StoredValue\"\n                }\n            ]\n        },\n        \"state_root_hash\": {\n            \"description\": \"Hex-encoded hash of the state root\",\n            \"allOf\": [\n                {\n                    \"$ref\": \"#/components/schemas/Digest\"\n                }\n            ]\n        },\n        \"merkle_proof\": {\n            \"description\": \"The Merkle proof\",\n            \"type\": \"string\"\n        }\n    },\n    \"additionalProperties\": false\n}\n```\n\n----------------------------------------\n\nTITLE: Defining DeployInfo Schema in JSON\nDESCRIPTION: Schema definition for DeployInfo object which contains information relating to a Deploy. It includes properties like deploy_hash, transfers, from, source, and gas with their respective descriptions and references to other schema components.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/condor/jsonrpc-comp/rpc-2.0/schema.json.md#2025-04-22_snippet_51\n\nLANGUAGE: json\nCODE:\n```\n\"DeployInfo\": {\n  \"description\": \"Information relating to the given Deploy.\",\n  \"type\": \"object\",\n  \"required\": [\n    \"deploy_hash\",\n    \"from\",\n    \"gas\",\n    \"source\",\n    \"transfers\"\n  ],\n  \"properties\": {\n    \"deploy_hash\": {\n      \"description\": \"Hex-encoded Deploy hash.\",\n      \"allOf\": [\n        {\n          \"$ref\": \"#/components/schemas/DeployHash\"\n        }\n      ]\n    },\n    \"transfers\": {\n      \"description\": \"Version 1 transfers performed by the Deploy.\",\n      \"type\": \"array\",\n      \"items\": {\n        \"$ref\": \"#/components/schemas/TransferAddr\"\n      }\n    },\n    \"from\": {\n      \"description\": \"Account identifier of the creator of the Deploy.\",\n      \"allOf\": [\n        {\n          \"$ref\": \"#/components/schemas/AccountHash\"\n        }\n      ]\n    },\n    \"source\": {\n      \"description\": \"Source purse used for payment of the Deploy.\",\n      \"allOf\": [\n        {\n          \"$ref\": \"#/components/schemas/URef\"\n        }\n      ]\n    },\n    \"gas\": {\n      \"description\": \"Gas cost of executing the Deploy.\",\n      \"allOf\": [\n        {\n          \"$ref\": \"#/components/schemas/U512\"\n        }\n      ]\n    }\n  },\n  \"additionalProperties\": false\n}\n```\n\n----------------------------------------\n\nTITLE: Example: Storing ContractHash into a Named Key in Rust\nDESCRIPTION: Illustrates how to store a ContractHash in a NamedKey using Rust, particularly by converting the stored_contract_hash into a URef and storing it with runtime::put_key.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/versioned_docs/version-1.5.X/developers/cli/calling-contracts.md#2025-04-22_snippet_9\n\nLANGUAGE: rust\nCODE:\n```\nruntime::put_key(CONTRACT_KEY, stored_contract_hash.into());\n```\n\n----------------------------------------\n\nTITLE: Executing Casper Deploy Query with CLI\nDESCRIPTION: This Bash snippet demonstrates how to use the casper-client to query a deploy's execution status on a Casper network node. It involves specifying the node's address and the deploy hash as inputs. The response will include important fields like execution results and block hash which are critical for further verifications.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/versioned_docs/version-1.5.X/developers/cli/transfers/direct-token-transfer.md#2025-04-22_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\ncasper-client get-deploy \\\n--node-address [NODE_SERVER_ADDRESS] [DEPLOY_HASH]\n```\n\n----------------------------------------\n\nTITLE: Defining Deploy Transformation Schema - JSON\nDESCRIPTION: This JSON Schema describes the structure of a transformation object used during deploy execution. It mandates two properties: 'key', a formatted string representing a Key, and 'transform', which must comply with the referenced 'Transform' schema. 'additionalProperties' is set to false to disallow unspecified fields, ensuring strict schema adherence. This schema is intended for validation or documentation tools and assumes the presence of a referenced '#/components/schemas/Transform' definition elsewhere in the specification.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/condor/jsonrpc-comp/rpc-1.5/schema/TransformEntry.json.md#2025-04-22_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\\n    \\\"description\\\": \\\"A transformation performed while executing a deploy.\\\",\\n    \\\"type\\\": \\\"object\\\",\\n    \\\"required\\\": [\\n        \\\"key\\\",\\n        \\\"transform\\\"\\n    ],\\n    \\\"properties\\\": {\\n        \\\"key\\\": {\\n            \\\"description\\\": \\\"The formatted string of the `Key`.\\\",\\n            \\\"type\\\": \\\"string\\\"\\n        },\\n        \\\"transform\\\": {\\n            \\\"description\\\": \\\"The transformation.\\\",\\n            \\\"allOf\\\": [\\n                {\\n                    \\\"$ref\\\": \\\"#/components/schemas/Transform\\\"\\n                }\\n            ]\\n        }\\n    },\\n    \\\"additionalProperties\\\": false\\n} \n```\n\n----------------------------------------\n\nTITLE: Reviewing Casper Sidecar Service Logs - Bash\nDESCRIPTION: This snippet retrieves and displays logs related to the 'casper-sidecar' unit using journalctl. It aids troubleshooting and monitoring by showing recorded service events, including start confirmations and error messages. The filter '--no-pager' ensures output is not buffered through a pager program.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/docs/operators/setup/casper-sidecar.md#2025-04-22_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\njournalctl --no-pager -u casper-sidecar\n```\n\nLANGUAGE: bash\nCODE:\n```\nDec 05 17:24:53 user systemd[1]: Started Casper Event Sidecar.\n```\n\n----------------------------------------\n\nTITLE: Defining ActivationPoint Schema in OpenAPI\nDESCRIPTION: Defines the schema for activation points in protocol upgrades, which can be either an era ID or a genesis timestamp.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/condor/jsonrpc-comp/rpc-2.0/schema.json.md#2025-04-22_snippet_93\n\nLANGUAGE: json\nCODE:\n```\n\"ActivationPoint\": {\n  \"description\": \"The first era to which the associated protocol version applies.\",\n  \"anyOf\": [\n    {\n      \"description\": \"Era id.\",\n      \"allOf\": [\n        {\n          \"$ref\": \"#/components/schemas/EraId\"\n        }\n      ]\n    },\n    {\n      \"description\": \"Genesis timestamp.\",\n      \"allOf\": [\n        {\n          \"$ref\": \"#/components/schemas/Timestamp\"\n        }\n      ]\n    }\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Getting Entity Information\nDESCRIPTION: Command to retrieve entity information using an entity identifier\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/docs/developers/dapps/nctl-test.md#2025-04-22_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\n$(get_path_to_client) get-entity \\\n--node-address http://localhost:11101 \\\n--entity-identifier <ENTITY IDENTIFIER>\n```\n\n----------------------------------------\n\nTITLE: Era Summary Schema Definition\nDESCRIPTION: Schema defining the structure of era summaries containing block hash, era ID, merkle proof and other era-specific data.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/condor/jsonrpc-comp/rpc-2.0/schema/components.json.md#2025-04-22_snippet_90\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"description\": \"The summary of an era\",\n    \"type\": \"object\",\n    \"required\": [\n        \"block_hash\",\n        \"era_id\",\n        \"merkle_proof\",\n        \"state_root_hash\",\n        \"stored_value\"\n    ],\n    \"properties\": {\n        \"block_hash\": {\n            \"description\": \"The block hash\",\n            \"allOf\": [\n                {\n                    \"$ref\": \"#/components/schemas/BlockHash\"\n                }\n            ]\n        },\n        \"era_id\": {\n            \"description\": \"The era id\",\n            \"allOf\": [\n                {\n                    \"$ref\": \"#/components/schemas/EraId\"\n                }\n            ]\n        },\n        \"stored_value\": {\n            \"description\": \"The StoredValue containing era information\",\n            \"allOf\": [\n                {\n                    \"$ref\": \"#/components/schemas/StoredValue\"\n                }\n            ]\n        },\n        \"state_root_hash\": {\n            \"description\": \"Hex-encoded hash of the state root\",\n            \"allOf\": [\n                {\n                    \"$ref\": \"#/components/schemas/Digest\"\n                }\n            ]\n        },\n        \"merkle_proof\": {\n            \"description\": \"The Merkle proof\",\n            \"type\": \"string\"\n        }\n    },\n    \"additionalProperties\": false\n}\n```\n\n----------------------------------------\n\nTITLE: Testing Disallowed Entry Point Call due to Missing Authorization Key in Rust\nDESCRIPTION: This Rust code demonstrates testing a scenario where a contract entry point call should fail due to authorization issues. It builds a deploy item to call the `ENTRYPOINT` of a stored contract, executed under `account_addr_2` and authorized only by `account_addr_2`. Since `account_addr_2` is not an authorization key associated with the contract installer (`DEFAULT_ACCOUNT_ADDR`), the execution is expected to fail. The test builder executes the request, expects failure, retrieves the error, and asserts it matches the expected `PermissionDenied` error (User error 0).\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/versioned_docs/version-2.0.0/resources/advanced/list-auth-keys-tutorial.md#2025-04-22_snippet_14\n\nLANGUAGE: rust\nCODE:\n```\n    // Here ACCOUNT_USER_2 does not have DEFAULT_ACCOUNT_ADDR (from the contract installer) in its associated keys\n    // The deploy will therefore revert with PermissionDenied\n    let entry_point_deploy_item = DeployItemBuilder::new()\n        .with_empty_payment_bytes(runtime_args! {ARG_AMOUNT => *DEFAULT_PAYMENT})\n        .with_authorization_keys(&[account_addr_2])\n        .with_address(account_addr_2)\n        .with_stored_session_hash(contract_hash, ENTRYPOINT, runtime_args! {})\n        .build();\n\n    let entry_point_request =\n        ExecuteRequestBuilder::from_deploy_item(entry_point_deploy_item).build();\n\n    builder.exec(entry_point_request).commit().expect_failure();\n    let error = builder.get_error().expect(\"must have User error: 0\");\n    assert_expected_error(\n        error,\n        0,\n        \"should fail execution since DEFAULT_ACCOUNT_ADDR is not in ACCOUNT_USER_2 associated keys\",\n    );\n```\n\n----------------------------------------\n\nTITLE: Global State Update Example - Casper Network\nDESCRIPTION: Example TOML configuration showing global state modifications for admin account creation.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/docs/operators/setup-network/create-private.md#2025-04-22_snippet_26\n\nLANGUAGE: toml\nCODE:\n```\n[[entries]]\nkey = \"balance-97bbcc2425b3eda5149a893c6180b62f1472d5143bb1450d01c8e1e96be09f13\"\nvalue = \"AAIAAAABCgg=\"\n\n[[entries]]\nkey = \"uref-97bbcc2425b3eda5149a893c6180b62f1472d5143bb1450d01c8e1e96be09f13-007\"\nvalue = \"AAAAAAAJ\"\n\n[[entries]]\nkey = \"account-hash-ac2f4caa3e3ce1cd1dfb3d089854020b18a50cac49977d0a4c873c4d3d5a2409\"\nvalue = \"AawvTKo+POHNHfs9CJhUAgsYpQysSZd9CkyHPE09WiQJAAAAAJe7zCQls+2lFJqJPGGAti8UctUUO7FFDQHI4elr4J8TBwEAAACsL0yqPjzhzR37PQiYVAILGKUMrEmXfQpMhzxNPVokCQEBAQ==\"\n\n[[entries]]\nkey = \"uref-f8475fd4125484be39a0793530f09a29d220ffda8e48387b3d2194ddfc22894e-007\"\nvalue = \"AAkAAAAICgAUu/CKxgII\"\n```\n\n----------------------------------------\n\nTITLE: Cloning the Multi-Sig Repository in Bash\nDESCRIPTION: Command to clone the two-party multi-signature example repository from GitHub, which contains the necessary session code to configure multi-signature functionality.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/versioned_docs/version-1.5.X/resources/advanced/two-party-multi-sig.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ngit clone https://github.com/casper-ecosystem/two-party-multi-sig\n```\n\n----------------------------------------\n\nTITLE: Decompressing a Zstandard Archive\nDESCRIPTION: Decompresses a `.tar.zst` file using `zstd`. The `-c` option writes to standard output, `-d` specifies decompression, and `--long=31` is required if the archive was compressed with that setting (common for Casper DB archives). Requires `zstd`.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/docs/operators/maintenance/archiving-and-restoring.md#2025-04-22_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\nzstd -cd --long=31 <.tar.zst file>\n```\n\n----------------------------------------\n\nTITLE: Examining Contract Installation Response in Casper Network (JSON Format)\nDESCRIPTION: This snippet shows the JSON output of a contract installation response from the Casper blockchain. It includes details about the contract's entry points, named keys, package information, and associated state transformations that occurred during deployment.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/versioned_docs/version-2.0.0/developers/cli/installing-contracts.md#2025-04-22_snippet_5\n\nLANGUAGE: json\nCODE:\n```\n\"kind\": \"V1CasperWasm\",\n\"bytes\": \"[82290 hex chars]\"\n```\n\n----------------------------------------\n\nTITLE: Sample Account State After Installation\nDESCRIPTION: JSON output showing the account state after installing both the main contract and helper contract, including named keys and account details.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/versioned_docs/version-2.0.0/resources/tokens/cep18/quickstart-guide.md#2025-04-22_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n{\n\t\"src\": {\n\t\"Account\": {\n\t\"_accountHash\": \"account-hash-303c0f8208220fe9a4de40e1ada1d35fdd6c678877908f01fddb2a56502d67fd\",\n\t\"namedKeys\": [\n\t\t{\n\t\t\"name\": \"cep18_test_contract\",\n\t\t\"key\": \"hash-999326ca8408dfd37da023eb6fd82f174151be64f83f9fb837632a0d69fd4c7e\"\n\t\t},\n\t\t{\n\t\t\"name\": \"cep18_token_contract\",\n\t\t\"key\": \"hash-b568f50a64acc8bbe43462ffe243849a88111060b228dacb8f08d42e26985180\"\n\t\t},\n\t],\n\t\"mainPurse\": \"uref-6c062525debdee18d5cad083ca530fcb65ef8741574fba4c97673f4ed00093f7-007\",\n\t\"associatedKeys\": [\n\t\t{\n\t\t\"accountHash\": \"account-hash-303c0f8208220fe9a4de40e1ada1d35fdd6c678877908f01fddb2a56502d67fd\",\n\t\t\"weight\": 1\n\t\t}\n\t],\n\t\"actionThresholds\": {\n\t\t\"deployment\": 1,\n\t\t\"keyManagement\": 1\n\t\t}\n\t\t}\n\t}\n}\n```\n\n----------------------------------------\n\nTITLE: Response Structure for info_get_peers in Casper Network\nDESCRIPTION: This example shows the response structure for the info_get_peers method. It returns the API version and an array of connected peers with their network addresses and node IDs.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/versioned_docs/version-1.5.X/developers/json-rpc/json-rpc-informational.md#2025-04-22_snippet_21\n\nLANGUAGE: bash\nCODE:\n```\n{\n  \"id\": 1,\n  \"jsonrpc\": \"2.0\",\n  \"result\": {\n    \"api_version\": \"1.4.13\",\n    \"peers\": [\n      {\n        \"address\": \"127.0.0.1:54321\",\n        \"node_id\": \"tls:0101..0101\"\n      }\n    ]\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Preparing a Deploy to Add Default Account as an Associated Key in Rust\nDESCRIPTION: This Rust code snippet constructs a `DeployItem` intended to add the `DEFAULT_ACCOUNT_ADDR` as an associated key to the account identified by `account_addr_1`. It uses the `ADD_KEYS_WASM` session code, specifies `DEFAULT_ACCOUNT_ADDR` as the `ASSOCIATED_ACCOUNT` argument, sets the payment, uses `account_addr_1` as the sole authorization key, and targets `account_addr_1`'s address. Note: This snippet only builds the deploy item; execution is handled later.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/versioned_docs/version-2.0.0/resources/advanced/list-auth-keys-tutorial.md#2025-04-22_snippet_11\n\nLANGUAGE: rust\nCODE:\n```\nlet session_code = PathBuf::from(ADD_KEYS_WASM);\nlet session_args = runtime_args! {\n    ASSOCIATED_ACCOUNT => *DEFAULT_ACCOUNT_ADDR\n};\n\nlet add_keys_deploy_item = DeployItemBuilder::new()\n    .with_empty_payment_bytes(runtime_args! {ARG_AMOUNT => *DEFAULT_PAYMENT})\n    .with_authorization_keys(&[account_addr_1])\n    .with_address(account_addr_1)\n    .with_session_code(session_code, session_args)\n    .build();\n```\n\n----------------------------------------\n\nTITLE: Defining ExecutionResult Schema in JSON\nDESCRIPTION: JSON schema definition for ExecutionResult, including success and failure cases with their respective properties and constraints.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/condor/jsonrpc-comp/rpc-1.5/schema.json.md#2025-04-22_snippet_39\n\nLANGUAGE: json\nCODE:\n```\n\"ExecutionResult\": {\n  \"description\": \"The result of executing a single deploy.\",\n  \"anyOf\": [\n    {\n      \"description\": \"The result of a failed execution.\",\n      \"type\": \"object\",\n      \"required\": [\n        \"Failure\"\n      ],\n      \"properties\": {\n        \"Failure\": {\n          \"type\": \"object\",\n          \"required\": [\n            \"cost\",\n            \"effect\",\n            \"error_message\",\n            \"transfers\"\n          ],\n          \"properties\": {\n            \"effect\": {\n              \"description\": \"The effect of executing the deploy.\",\n              \"allOf\": [\n                {\n                  \"$ref\": \"#/components/schemas/ExecutionEffect\"\n                }\n              ]\n            },\n            \"transfers\": {\n              \"description\": \"A record of Transfers performed while executing the deploy.\",\n              \"type\": \"array\",\n              \"items\": {\n                \"$ref\": \"#/components/schemas/TransferAddr\"\n              }\n            },\n            \"cost\": {\n              \"description\": \"The cost of executing the deploy.\",\n              \"allOf\": [\n                {\n                  \"$ref\": \"#/components/schemas/U512\"\n                }\n              ]\n            },\n            \"error_message\": {\n              \"description\": \"The error message associated with executing the deploy.\",\n              \"type\": \"string\"\n            }\n          },\n          \"additionalProperties\": false\n        }\n      },\n      \"additionalProperties\": false\n    },\n    {\n      \"description\": \"The result of a successful execution.\",\n      \"type\": \"object\",\n      \"required\": [\n        \"Success\"\n      ],\n      \"properties\": {\n        \"Success\": {\n          \"type\": \"object\",\n          \"required\": [\n            \"cost\",\n            \"effect\",\n            \"transfers\"\n          ],\n          \"properties\": {\n            \"effect\": {\n              \"description\": \"The effect of executing the deploy.\",\n              \"allOf\": [\n                {\n                  \"$ref\": \"#/components/schemas/ExecutionEffect\"\n                }\n              ]\n            },\n            \"transfers\": {\n              \"description\": \"A record of Transfers performed while executing the deploy.\",\n              \"type\": \"array\",\n              \"items\": {\n                \"$ref\": \"#/components/schemas/TransferAddr\"\n              }\n            },\n            \"cost\": {\n              \"description\": \"The cost of executing the deploy.\",\n              \"allOf\": [\n                {\n                  \"$ref\": \"#/components/schemas/U512\"\n                }\n              ]\n            }\n          },\n          \"additionalProperties\": false\n        }\n      },\n      \"additionalProperties\": false\n    }\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Burning a CEP-78 Token using JavaScript Client\nDESCRIPTION: Example of burning a CEP-78 token using the JavaScript client. It shows how to specify the token ID to be burned.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/versioned_docs/version-1.5.X/resources/tokens/cep78/js-tutorial.md#2025-04-22_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nconst burnDeploy = await contractClient.burn(\n  { tokenId: \"0\" },\n  \"13000000000\",\n  USER1_KEYS.publicKey,\n  [USER1_KEYS]\n);\n\nconst burnDeployHash = await burnDeploy.send(\"http://localhost:11101/rpc\");\n```\n\n----------------------------------------\n\nTITLE: Forcing Casper Node Protocol Version\nDESCRIPTION: Uses the `node_util.py` script with `sudo` to force the Casper node to run a specific protocol version (e.g., `1_4_5`). This is necessary when starting a node with a restored database to ensure it operates at the correct version corresponding to the database's state.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/docs/operators/maintenance/archiving-and-restoring.md#2025-04-22_snippet_12\n\nLANGUAGE: bash\nCODE:\n```\nsudo /etc/casper/node_util.py force_run_version 1_4_5\n```\n\n----------------------------------------\n\nTITLE: Defining Method Signature Schema using JSON Schema\nDESCRIPTION: This JSON schema defines the structure for a method signature object. It specifies required properties like `access`, `args`, `entry_point_type`, `name`, and `ret`. The `args` property is an array referencing the `Parameter` schema, while `ret`, `access`, and `entry_point_type` reference `CLType`, `EntryPointAccess`, and `EntryPointType` schemas respectively. The schema highlights that the order of arguments is significant.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/condor/jsonrpc-comp/rpc-1.5/schema/EntryPoint.json.md#2025-04-22_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"description\": \"Type signature of a method. Order of arguments matter since can be referenced by index as well as name.\",\n    \"type\": \"object\",\n    \"required\": [\n        \"access\",\n        \"args\",\n        \"entry_point_type\",\n        \"name\",\n        \"ret\"\n    ],\n    \"properties\": {\n        \"name\": {\n            \"type\": \"string\"\n        },\n        \"args\": {\n            \"type\": \"array\",\n            \"items\": {\n                \"$ref\": \"#/components/schemas/Parameter\"\n            }\n        },\n        \"ret\": {\n            \"$ref\": \"#/components/schemas/CLType\"\n        },\n        \"access\": {\n            \"$ref\": \"#/components/schemas/EntryPointAccess\"\n        },\n        \"entry_point_type\": {\n            \"$ref\": \"#/components/schemas/EntryPointType\"\n        }\n    }\n} \n```\n\n----------------------------------------\n\nTITLE: Markdown Table Structure for Tutorial Index\nDESCRIPTION: A markdown table listing advanced tutorials with their descriptions, organized with links to individual tutorial pages.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/versioned_docs/version-2.0.0/resources/advanced/index.md#2025-04-22_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n| Title                                                       | Description                                                      |\n| ----------------------------------------------------------- | ---------------------------------------------------------------- |\n| [Two-Party Multi-Signature Transactions](./two-party-multi-sig.md) | A trivial two-party multi-signature scheme for signing and sending transactions |\n| [Multi-Sig Management](./multi-sig/index.md)| Integrate key management on Casper accounts and sign transactions with multiple keys |\n| [Interacting with Runtime Return Values](./return-values-tutorial.md) | Contract code returning a value to the immediate caller via `runtime::ret()` |\n| [Safely Transfer Tokens to a Contract](./transfer-token-to-contract.md) | Two methods to handle tokens via a contract |\n| [Reading and Writing to Global State using Rust](./storage-workflow.md) | Methods to read and write data to global state on a Casper network using Rust |\n| [Cross Contract Communication](./cross-contract.md) | Variations of cross-contract communication for more complex scenarios |\n| [Working with Authorization Keys](./list-auth-keys-tutorial.md) | Retrieve and use the authorization keys associated with a transaction |\n```\n\n----------------------------------------\n\nTITLE: Era and Protocol Version Structures\nDESCRIPTION: Defines structures for tracking eras, validator weights, and protocol versioning.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/versioned_docs/version-1.5.X/concepts/design/networking-protocol.md#2025-04-22_snippet_8\n\nLANGUAGE: rust\nCODE:\n```\nstruct EraEnd {\n    era_report: EraReport,\n    next_era_validator_weights: BTreeMap<PublicKey, U512>,\n}\n\nstruct EraReport<VID> {\n    equivocators: Vec<PublicKey>,\n    rewards: BTreeMap<PublicKey, u64>,\n    inactive_validators: Vec<PublicKey>,\n}\n\nstruct ProtocolVersion {\n    major: u32,\n    minor: u32,\n    patch: u32,\n}\n\nstruct BlockBody {\n    proposer: PublicKey,\n    deploy_hashes: Vec<DeployHash>,\n    transfer_hashes: Vec<DeployHash>,\n}\n```\n\n----------------------------------------\n\nTITLE: Describing Block Header Version in JSON\nDESCRIPTION: This JSON schema snippet defines a versioned block header using a oneOf construct to encapsulate two variants: Version1 and Version2. Each variant is associated with a unique block header structure referenced from external schemas, BlockHeaderV1 and BlockHeaderV2, ensuring version-specific validation rules. Dependencies include the JSON schema references to BlockHeaderV1 and BlockHeaderV2 components. The structure mandates the presence of either Version1 or Version2, enforcing strict type constraints via definitions and no additional properties allowed.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/condor/jsonrpc-comp/rpc-2.0/schema/BlockHeader.json.md#2025-04-22_snippet_0\n\nLANGUAGE: JSON\nCODE:\n```\n{\n    \"description\": \"The versioned header portion of a block. It encapsulates different variants of the BlockHeader struct.\",\n    \"oneOf\": [\n        {\n            \"description\": \"The legacy, initial version of the header portion of a block.\",\n            \"type\": \"object\",\n            \"required\": [\n                \"Version1\"\n            ],\n            \"properties\": {\n                \"Version1\": {\n                    \"$ref\": \"#/components/schemas/BlockHeaderV1\"\n                }\n            },\n            \"additionalProperties\": false\n        },\n        {\n            \"description\": \"The version 2 of the header portion of a block.\",\n            \"type\": \"object\",\n            \"required\": [\n                \"Version2\"\n            ],\n            \"properties\": {\n                \"Version2\": {\n                    \"$ref\": \"#/components/schemas/BlockHeaderV2\"\n                }\n            },\n            \"additionalProperties\": false\n        }\n    ]\n}\n```\n\n----------------------------------------\n\nTITLE: Installing build-essential on Ubuntu - Bash\nDESCRIPTION: Installs the GCC/G++ compiler suite and related build tools via apt. These tools are necessary for compiling many packages, including Rust modules and C/C++ dependencies. Requires Ubuntu and sudo permissions.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/versioned_docs/version-1.5.X/developers/prerequisites.md#2025-04-22_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nsudo apt install build-essential\n```\n\n----------------------------------------\n\nTITLE: Defining JSON Schema for Hex-encoded Version 1 Transfer Address\nDESCRIPTION: This JSON schema defines the format for a hex-encoded version 1 transfer address. It specifies that the address must be represented as a string type, which would typically contain hex characters.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/condor/jsonrpc-comp/rpc-2.0/schema/TransferAddr.json.md#2025-04-22_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"description\": \"Hex-encoded version 1 transfer address.\",\n    \"type\": \"string\"\n}\n```\n\n----------------------------------------\n\nTITLE: Retrieving Deploy Details using casper-client (Bash)\nDESCRIPTION: This command uses the `casper-client` tool to fetch detailed information about a specific deploy identified by its hash from a specified Casper node. It requires the `--node-address` parameter pointing to the node's RPC endpoint and the deploy hash as an argument. The output will be a JSON object containing deploy details.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/versioned_docs/version-2.0.0/resources/tokens/cep18/full-tutorial.md#2025-04-22_snippet_14\n\nLANGUAGE: bash\nCODE:\n```\ncasper-client get-deploy \\\n--node-address http://<HOST:PORT> \\\nb00E59f8aBA5c7aB9.....\n```\n\n----------------------------------------\n\nTITLE: Defining Node Peer Entry Schema using JSON\nDESCRIPTION: This snippet defines a JSON schema object used to validate a node peer entry, ensuring that both 'address' and 'node_id' string properties are present and required. The schema disallows any additional properties and can be used with libraries such as ajv for data validation within JavaScript or TypeScript applications utilizing networks or distributed ledgers. The schema expects input in object form and outputs validation results, making it suitable for ensuring structured peer node data exchange.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/condor/jsonrpc-comp/rpc-1.5/schema/PeerEntry.json.md#2025-04-22_snippet_0\n\nLANGUAGE: JSON\nCODE:\n```\n{\\n    \\\"description\\\": \\\"Node peer entry.\\\",\\n    \\\"type\\\": \\\"object\\\",\\n    \\\"required\\\": [\\n        \\\"address\\\",\\n        \\\"node_id\\\"\\n    ],\\n    \\\"properties\\\": {\\n        \\\"node_id\\\": {\\n            \\\"description\\\": \\\"Node id.\\\",\\n            \\\"type\\\": \\\"string\\\"\\n        },\\n        \\\"address\\\": {\\n            \\\"description\\\": \\\"Node address.\\\",\\n            \\\"type\\\": \\\"string\\\"\\n        }\\n    },\\n    \\\"additionalProperties\\\": false\\n} \n```\n\n----------------------------------------\n\nTITLE: Local Backup Compression Command\nDESCRIPTION: Faster compression command optimized for local backups with lower compression level.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/versioned_docs/version-2.0.0/operators/maintenance/archiving-and-restoring.md#2025-04-22_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\ntar -b 4096 -cv --sparse . | zstd -5 -cv -T0 --long=31 > [path_to]/file.tar.zst\n```\n\n----------------------------------------\n\nTITLE: Verifying Configuration Archive Contents\nDESCRIPTION: Bash commands to test and verify the contents of the created `config.tar.gz` archive. It creates a test directory, changes into it, and then extracts the archive's contents using `tar` to ensure the files were packaged correctly.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/versioned_docs/version-1.5.X/operators/setup-network/staging-files-for-new-network.md#2025-04-22_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\nmkdir conftest\ncd conftest\ntar -xzvf ../config.tar.gz .\n\n```\n\n----------------------------------------\n\nTITLE: Sample Fungible Token Deployment on Casper Testnet in Bash\nDESCRIPTION: Example command for deploying a fungible token contract on the Casper Testnet with specific parameters including token name, symbol, decimals, and total supply.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/docs/resources/tokens/cep18/full-tutorial.md#2025-04-22_snippet_13\n\nLANGUAGE: bash\nCODE:\n```\ncasper-client put-deploy \\\n--node-address http://95.216.24.237:7777 \\\n--chain-name casper-test \\\n--secret-key \"/home/ubuntu/secret_key.pem\" \\\n--payment-amount 1000000 \\\n--session-path \"<machine-path>/cep18/target/wasm32-unknown-unknown/release/cep18.wasm\"\n--session-arg \"name='Token test', symbol='TEST', decimals:u8=10, total_supply:u256=1000\"\n```\n\n----------------------------------------\n\nTITLE: Standard Payment System Contract Costs Configuration\nDESCRIPTION: Configuration settings for the standard_payment system contract entrypoint costs. Specifies the cost for the pay entrypoint operation.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/versioned_docs/version-2.0.0/operators/setup-network/chain-spec.md#2025-04-22_snippet_4\n\nLANGUAGE: markdown\nCODE:\n```\n|Attribute         |Description                                    | Mainnet Setting |\n|----------------- |-----------------------------------------------|------------------|\n|pay| Cost of calling the `pay` entrypoint and sending an amount to a payment purse. |10_000|\n```\n\n----------------------------------------\n\nTITLE: Querying Block Information with casper-client in Bash\nDESCRIPTION: This snippet demonstrates how to use the casper-client CLI tool to retrieve detailed block information from a Casper node. It includes the command structure and explains the key parameters required for the query.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/docs/resources/beginner/querying-network.md#2025-04-22_snippet_9\n\nLANGUAGE: bash\nCODE:\n```\ncasper-client get-block \\\n      --id 3 \\\n      --node-address http://<node-ip-address>:7777 \\\n      --block-identifier <block-hash>\n```\n\n----------------------------------------\n\nTITLE: Building Execution Request for Counter Contract Call (Rust)\nDESCRIPTION: Shows how to build an `ExecuteRequest` to call a contract entry point via session code, taken from the counter example. It specifies the caller account, the session code Wasm (`COUNTER_CALL_WASM`), and runtime arguments including the contract key (`CONTRACT_KEY`). It also shows executing the request.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/versioned_docs/version-1.5.X/developers/writing-onchain-code/testing-session-code.md#2025-04-22_snippet_13\n\nLANGUAGE: rust\nCODE:\n```\n    // Use session code to increment the counter.\n    let session_code_request = ExecuteRequestBuilder::standard(\n        *DEFAULT_ACCOUNT_ADDR,\n        COUNTER_CALL_WASM,\n        runtime_args! {\n            CONTRACT_KEY => contract_v1_hash\n        },\n    )\n    .build();\n\n    builder.exec(session_code_request)\n        .expect_success()\n        .commit();\n```\n\n----------------------------------------\n\nTITLE: Enabling Account Access - Casper Network CLI\nDESCRIPTION: Command to enable an account by setting appropriate action thresholds that allow deploy execution.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/docs/operators/setup-network/create-private.md#2025-04-22_snippet_20\n\nLANGUAGE: sh\nCODE:\n```\ncasper-client \\\n  put-deploy \\\n  -n $NODE_ADDR \\\n  --chain-name $CHAIN_NAME \\\n  --secret-key admin/secret_key.pem \\\n  --session-account=alice/public_key_hex\n  --session-path set_action_thresholds.wasm \\\n  --payment-amount=2500000000 \\\n  --session-arg \"key_management_threshold:u8='0'\" \\\n  --session-arg \"deploy_threshold:u8='1'\"\n```\n\n----------------------------------------\n\nTITLE: Decimals Query Entry Point for Casper Token Contract\nDESCRIPTION: Entry point definition for retrieving the number of decimal places used by the token. Returns a U8 value and requires caller payment, standard in ERC-20 style token interfaces.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/docs/developers/cli/sending-transactions.md#2025-04-22_snippet_10\n\nLANGUAGE: JSON\nCODE:\n```\n{\n  \"key\": \"entry-point-v1-entity-contract-363996106630892a964565574fcdfd2435f21a17a3ad1ed2054146e7d8461640-be138e764d5f26cd174471e18c82a7bef961da4c7e7ade7df068038aebdda9bf\",\n  \"kind\": {\n    \"Write\": {\n      \"EntryPoint\": {\n        \"V1CasperVm\": {\n          \"name\": \"decimals\",\n          \"args\": [],\n          \"ret\": \"U8\",\n          \"access\": \"Public\",\n          \"entry_point_type\": \"Called\",\n          \"entry_point_payment\": \"Caller\"\n        }\n      }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining JSON Schema for Era Validator Information (JSON)\nDESCRIPTION: This JSON schema defines the structure for an object containing validator information for a specific era, as described in the surrounding text. It requires an `era_id` (referencing the `EraId` schema definition) and an array of `validator_weights` (each item referencing the `JsonValidatorWeights` schema). The `additionalProperties: false` setting ensures no extra fields are allowed. This schema is used for validating data representing era validators.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/condor/jsonrpc-comp/rpc-1.5/schema/JsonEraValidators.json.md#2025-04-22_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"description\": \"The validators for the given era.\",\n    \"type\": \"object\",\n    \"required\": [\n        \"era_id\",\n        \"validator_weights\"\n    ],\n    \"properties\": {\n        \"era_id\": {\n            \"$ref\": \"#/components/schemas/EraId\"\n        },\n        \"validator_weights\": {\n            \"type\": \"array\",\n            \"items\": {\n                \"$ref\": \"#/components/schemas/JsonValidatorWeights\"\n            }\n        }\n    },\n    \"additionalProperties\": false\n} \n```\n\n----------------------------------------\n\nTITLE: Defining Transaction Target Identifiers Using JSON Schema (JSON)\nDESCRIPTION: This JSON schema defines the structure for identifying stored transaction targets, supporting four variants: ByHash (hex-encoded address), ByName (string name), ByPackageHash (object with hex-encoded address and optional version), and ByPackageName (object with name and optional version). Required properties and type constraints are specified for each variant, and detailed descriptions clarify expected inputs. The schema enables validation and standardization of how transaction targets are referenced within the Casper Network API, with optional versioning defaulting to the latest enabled version if null.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/condor/jsonrpc-comp/rpc-2.0/schema/TransactionInvocationTarget.json.md#2025-04-22_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"description\": \"Identifier of a `Stored` transaction target.\",\n    \"oneOf\": [\n        {\n            \"description\": \"Hex-encoded entity address identifying the invocable entity.\",\n            \"type\": \"object\",\n            \"required\": [\n                \"ByHash\"\n            ],\n            \"properties\": {\n                \"ByHash\": {\n                    \"type\": \"string\"\n                }\n            },\n            \"additionalProperties\": false\n        },\n        {\n            \"description\": \"The alias identifying the invocable entity.\",\n            \"type\": \"object\",\n            \"required\": [\n                \"ByName\"\n            ],\n            \"properties\": {\n                \"ByName\": {\n                    \"type\": \"string\"\n                }\n            },\n            \"additionalProperties\": false\n        },\n        {\n            \"description\": \"The address and optional version identifying the package.\",\n            \"type\": \"object\",\n            \"required\": [\n                \"ByPackageHash\"\n            ],\n            \"properties\": {\n                \"ByPackageHash\": {\n                    \"type\": \"object\",\n                    \"required\": [\n                        \"addr\"\n                    ],\n                    \"properties\": {\n                        \"addr\": {\n                            \"description\": \"Hex-encoded address of the package.\",\n                            \"type\": \"string\"\n                        },\n                        \"version\": {\n                            \"description\": \"The package version.\\n\\nIf `None`, the latest enabled version is implied.\",\n                            \"type\": [\n                                \"integer\",\n                                \"null\"\n                            ],\n                            \"format\": \"uint32\",\n                            \"minimum\": 0\n                        }\n                    },\n                    \"additionalProperties\": false\n                }\n            },\n            \"additionalProperties\": false\n        },\n        {\n            \"description\": \"The alias and optional version identifying the package.\",\n            \"type\": \"object\",\n            \"required\": [\n                \"ByPackageName\"\n            ],\n            \"properties\": {\n                \"ByPackageName\": {\n                    \"type\": \"object\",\n                    \"required\": [\n                        \"name\"\n                    ],\n                    \"properties\": {\n                        \"name\": {\n                            \"description\": \"The package name.\",\n                            \"type\": \"string\"\n                        },\n                        \"version\": {\n                            \"description\": \"The package version.\\n\\nIf `None`, the latest enabled version is implied.\",\n                            \"type\": [\n                                \"integer\",\n                                \"null\"\n                            ],\n                            \"format\": \"uint32\",\n                            \"minimum\": 0\n                        }\n                    },\n                    \"additionalProperties\": false\n                }\n            },\n            \"additionalProperties\": false\n        }\n    ]\n} \n```\n\n----------------------------------------\n\nTITLE: Defining Context Enumeration Schema in JSON - JSON\nDESCRIPTION: This snippet defines a JSON schema for a string field that serves as a method execution context. The 'enum' property restricts valid values to either 'Session' or 'Contract', enforcing this constraint during validation. It expects the consumer to supply a string matching one of the enumerated values; this pattern is typical in API contract enforcement or schema-based configuration systems, particularly in JavaScript or TypeScript projects leveraging JSON-based validation.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/condor/jsonrpc-comp/rpc-1.5/schema/EntryPointType.json.md#2025-04-22_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"description\": \"Context of method execution\",\n    \"type\": \"string\",\n    \"enum\": [\n        \"Session\",\n        \"Contract\"\n    ]\n} \n```\n\n----------------------------------------\n\nTITLE: Transaction Execution Information Structure\nDESCRIPTION: Displays the structure of execution information for a transaction on the Casper Network, including block details, execution results with gas limits and consumption, payment sources, transfers, and effects. This provides insight into how transactions are processed and recorded.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/condor/jsonrpc-comp/rpc-2.0/schema.json.md#2025-04-22_snippet_5\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"execution_info\": {\n    \"block_hash\": \"0744fcb72af43c5cc372039bc5a8bfee48808a9ce414acc0d6338a628c20eb42\",\n    \"block_height\": 10,\n    \"execution_result\": {\n      \"Version2\": {\n        \"initiator\": {\n          \"PublicKey\": \"01d9bf2148748a85c89da5aad8ee0b0fc2d105fd39d41a4c796536354f0ae2900c\"\n        },\n        \"error_message\": null,\n        \"limit\": \"123456\",\n        \"consumed\": \"100000\",\n        \"cost\": \"246912\",\n        \"payment\": [\n          {\n            \"source\": \"uref-0101010101010101010101010101010101010101010101010101010101010101-001\"\n          }\n        ],\n        \"transfers\": [\n          {\n            \"Version2\": {\n              \"transaction_hash\": {\n                \"Version1\": \"0101010101010101010101010101010101010101010101010101010101010101\"\n              },\n              \"from\": {\n                \"AccountHash\": \"account-hash-0202020202020202020202020202020202020202020202020202020202020202\"\n              },\n              \"to\": \"account-hash-0303030303030303030303030303030303030303030303030303030303030303\",\n              \"source\": \"uref-0a0a0a0a0a0a0a0a0a0a0a0a0a0a0a0a0a0a0a0a0a0a0a0a0a0a0a0a0a0a0a0a-007\",\n              \"target\": \"uref-1b1b1b1b1b1b1b1b1b1b1b1b1b1b1b1b1b1b1b1b1b1b1b1b1b1b1b1b1b1b1b1b-000\",\n              \"amount\": \"1000000000000\",\n              \"gas\": \"2500000000\",\n              \"id\": 999\n            }\n          }\n        ],\n        \"size_estimate\": 186,\n        \"effects\": [\n          {\n            \"key\": \"account-hash-2c4a11c062a8a337bfc97e27fd66291caeb2c65865dcb5d3ef3759c4c97efecb\",\n            \"kind\": {\n              \"AddUInt64\": 8\n            }\n          },\n          {\n            \"key\": \"deploy-af684263911154d26fa05be9963171802801a0b6aff8f199b7391eacb8edc9e1\",\n            \"kind\": \"Identity\"\n          }\n        ]\n      }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Viewing NCTL User Account Details - Bash\nDESCRIPTION: This bash command queries and displays details for a specific user account (user 1 in this case) in the NCTL Casper environment. No additional parameters are required beyond identifying the user. The output includes relevant keys and account data necessary to interact with the local network, which are prerequisites for sending test transactions.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/versioned_docs/version-2.0.0/developers/dapps/nctl-test.md#2025-04-22_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nnctl-view-user-account user=1\n```\n\n----------------------------------------\n\nTITLE: OpenAPI Schemas for Casper Network Types\nDESCRIPTION: OpenAPI schema definitions describing data structures for entity identification, block references, error handling, and core Casper Network types. Includes detailed specifications for serialization errors, type mismatches, and entity addressing.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/condor/jsonrpc-comp/rpc-2.0/schema/components.json.md#2025-04-22_snippet_56\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"minimum\": 0.0\n},\n\"flags\": {\n    \"description\": \"The flags.\",\n    \"type\": \"integer\",\n    \"format\": \"uint32\",\n    \"minimum\": 0.0\n}\n}\n```\n\n----------------------------------------\n\nTITLE: Verifying Deploy Status\nDESCRIPTION: Checks the status of a deployment using its deploy hash.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/versioned_docs/version-1.5.X/resources/tokens/cep18/full-tutorial.md#2025-04-22_snippet_13\n\nLANGUAGE: bash\nCODE:\n```\ncasper-client get-deploy \\\n--node-address http://<HOST:PORT> [DEPLOY_HASH]\n```\n\n----------------------------------------\n\nTITLE: Installing Dependencies for Ethereum Key Conversion\nDESCRIPTION: Commands to install Node.js and the key-encoder package, which are required for converting Ethereum private keys to PEM format.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/versioned_docs/version-1.5.X/concepts/accounts-and-keys.md#2025-04-22_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\nsudo apt install nodejs\nnpm install key-encoder\n```\n\n----------------------------------------\n\nTITLE: Defining JSON Schema for Deploy Header in JSON\nDESCRIPTION: This JSON schema snippet specifies the structure of the header for a Deploy object, detailing the required properties and types. It includes references to other schema definitions, such as PublicKey and Timestamp, as well as scalar types like integer and string. This schema ensures that any Deploy object adheres to the defined structure, maintaining consistency and integrity across the network. Constraints include mandatory fields and specific data types.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/condor/jsonrpc-comp/rpc-2.0/schema/DeployHeader.json.md#2025-04-22_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"description\": \"The header portion of a [`Deploy`].\",\n    \"type\": \"object\",\n    \"required\": [\n        \"account\",\n        \"body_hash\",\n        \"chain_name\",\n        \"dependencies\",\n        \"gas_price\",\n        \"timestamp\",\n        \"ttl\"\n    ],\n    \"properties\": {\n        \"account\": {\n            \"$ref\": \"#/components/schemas/PublicKey\"\n        },\n        \"timestamp\": {\n            \"$ref\": \"#/components/schemas/Timestamp\"\n        },\n        \"ttl\": {\n            \"$ref\": \"#/components/schemas/TimeDiff\"\n        },\n        \"gas_price\": {\n            \"type\": \"integer\",\n            \"format\": \"uint64\",\n            \"minimum\": 0\n        },\n        \"body_hash\": {\n            \"$ref\": \"#/components/schemas/Digest\"\n        },\n        \"dependencies\": {\n            \"type\": \"array\",\n            \"items\": {\n                \"$ref\": \"#/components/schemas/DeployHash\"\n            }\n        },\n        \"chain_name\": {\n            \"type\": \"string\"\n        }\n    },\n    \"additionalProperties\": false\n}\n```\n\n----------------------------------------\n\nTITLE: Describing Big Integer Variable-Length Encoding in Rust (Pseudo-code)\nDESCRIPTION: This pseudo-code Rust struct illustrates the custom variable-length encoding scheme used for serializing large integer types like `U512`, `U256`, and `U128`. The process involves converting to little-endian bytes, removing trailing zero padding, and prefixing the result with a single byte indicating the total length (including the length byte itself).\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/versioned_docs/version-2.0.0/concepts/design/networking-protocol.md#2025-04-22_snippet_6\n\nLANGUAGE: rust\nCODE:\n```\n```rust\nstruct Bigint {\n    serialized_length: u8,\n    little_endian_unpadded_bytes: [u8, serialized_length - 1],\n}\n```\n```\n\n----------------------------------------\n\nTITLE: Querying Contract Entry Points Result\nDESCRIPTION: This snippet provides a sample response for a contract entry point query using the Casper client indicating the stored name value 'CasperTest'. The JSON result faithfully reflects a successful query, indicating the API version and the details of the stored contract value with its parsed content. The output confirms the success of the name querying operation in the specified block state.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/versioned_docs/version-1.5.X/resources/tokens/cep18/full-tutorial.md#2025-04-22_snippet_17\n\nLANGUAGE: bash\nCODE:\n```\n{\n \"id\": -3650676146668320186,\n \"jsonrpc\": \"2.0\",\n \"result\": {\n  \"api_version\": \"1.4.3\",\n  \"block_header\": null,\n  \"merkle_proof\": \"[80252 hex chars]\",\n  \"stored_value\": {\n   \"CLValue\": {\n    \"bytes\": \"0A00000043617370657254657374\",\n    \"cl_type\": \"String\",\n    \"parsed\": \"CasperTest\"\n   }\n  }\n }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Named Arguments Schema in JSON\nDESCRIPTION: This JSON schema snippet is used to define the named arguments structure in Casper Network contracts. It specifies that the arguments should be an array containing two items: a string and a CLValue type, with both maximum and minimum lengths set to two. There are no dependencies besides JSON validation.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/condor/jsonrpc-comp/rpc-2.0/schema/NamedArg.json.md#2025-04-22_snippet_0\n\nLANGUAGE: JSON\nCODE:\n```\n{\\n    \\\"description\\\": \\\"Named arguments to a contract.\\\",\\n    \\\"type\\\": \\\"array\\\",\\n    \\\"items\\\": [\\n        {\\n            \\\"type\\\": \\\"string\\\"\\n        },\\n        {\\n            \\\"$ref\\\": \\\"#/components/schemas/CLValue\\\"\\n        }\\n    ],\\n    \\\"maxItems\\\": 2,\\n    \\\"minItems\\\": 2\\n}\n```\n\n----------------------------------------\n\nTITLE: Defining the 'info_get_chainspec' RPC Method Schema in JSON\nDESCRIPTION: This JSON object defines the schema for the 'info_get_chainspec' RPC method. It specifies the method name ('info_get_chainspec'), a summary of its function (returning raw bytes of chainspec files), required parameters (none), the structure of the result using JSON schema (including API version and chainspec bytes), and provides an example request/response pair. This method is intended for retrieving core blockchain configuration files.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/condor/jsonrpc-comp/rpc-2.0/info_get_chainspec.json.md#2025-04-22_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"name\": \"info_get_chainspec\",\n  \"summary\": \"returns the raw bytes of the chainspec.toml, genesis accounts.toml, and global_state.toml files\",\n  \"params\": [],\n  \"result\": {\n    \"name\": \"info_get_chainspec_result\",\n    \"schema\": {\n      \"description\": \"Result for the \\\"info_get_chainspec\\\" RPC.\",\n      \"type\": \"object\",\n      \"required\": [\n        \"api_version\",\n        \"chainspec_bytes\"\n      ],\n      \"properties\": {\n        \"api_version\": {\n          \"description\": \"The RPC API version.\",\n          \"type\": \"string\"\n        },\n        \"chainspec_bytes\": {\n          \"description\": \"The chainspec file bytes.\",\n          \"$ref\": \"#/components/schemas/ChainspecRawBytes\"\n        }\n      }\n    }\n  },\n  \"examples\": [\n    {\n      \"name\": \"info_get_chainspec_example\",\n      \"params\": [],\n      \"result\": {\n        \"name\": \"info_get_chainspec_example_result\",\n        \"value\": {\n          \"api_version\": \"2.0.0\",\n          \"chainspec_bytes\": {\n            \"chainspec_bytes\": \"2a2a\",\n            \"maybe_genesis_accounts_bytes\": null,\n            \"maybe_global_state_bytes\": null\n          }\n        }\n      }\n    }\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Response Structure for info_get_status RPC Method in JSON\nDESCRIPTION: Example response from the info_get_status method showing comprehensive node information including API version, peers, build version, block information, consensus status, and synchronization details.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/versioned_docs/version-2.0.0/developers/json-rpc/json-rpc-informational.md#2025-04-22_snippet_29\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"id\": 1,\n  \"jsonrpc\": \"2.0\",\n  \"result\": {\n    \"name\": \"info_get_status_result\",\n    \"value\": {\n      \"api_version\": \"2.0.0\",\n      \"peers\": [\n        {\n          \"node_id\": \"tls:0101..0101\",\n          \"address\": \"127.0.0.1:54321\"\n        }\n      ],\n      \"build_version\": \"1.0.0-xxxxxxxxx@DEBUG\",\n      \"chainspec_name\": \"casper-example\",\n      \"starting_state_root_hash\": \"0000000000000000000000000000000000000000000000000000000000000000\",\n      \"last_added_block_info\": {\n        \"hash\": \"0744fcb72af43c5cc372039bc5a8bfee48808a9ce414acc0d6338a628c20eb42\",\n        \"timestamp\": \"2020-11-17T00:39:24.072Z\",\n        \"era_id\": 1,\n        \"height\": 10,\n        \"state_root_hash\": \"0808080808080808080808080808080808080808080808080808080808080808\",\n        \"creator\": \"01d9bf2148748a85c89da5aad8ee0b0fc2d105fd39d41a4c796536354f0ae2900c\"\n      },\n      \"our_public_signing_key\": \"01d9bf2148748a85c89da5aad8ee0b0fc2d105fd39d41a4c796536354f0ae2900c\",\n      \"round_length\": \"1m 5s 536ms\",\n      \"next_upgrade\": {\n        \"activation_point\": 42,\n        \"protocol_version\": \"2.0.1\"\n      },\n      \"uptime\": \"13s\",\n      \"reactor_state\": \"Initialize\",\n      \"last_progress\": \"1970-01-01T00:00:00.000Z\",\n      \"available_block_range\": {\n        \"low\": 0,\n        \"high\": 0\n      },\n      \"block_sync\": {\n        \"historical\": {\n          \"block_hash\": \"16ddf28e2b3d2e17f4cef36f8b58827eca917af225d139b0c77df3b4a67dc55e\",\n          \"block_height\": 40,\n          \"acquisition_state\": \"have strict finality(40) for: block hash 16dd..c55e\"\n        },\n        \"forward\": {\n          \"block_hash\": \"59907b1e32a9158169c4d89d9ce5ac9164fc31240bfcfb0969227ece06d74983\",\n          \"block_height\": 6701,\n          \"acquisition_state\": \"have block body(6701) for: block hash 5990..4983\"\n        }\n      },\n      \"latest_switch_block_hash\": \"0000000000000000000000000000000000000000000000000000000000000000\"\n    }\n  }\n}\n}\n```\n\n----------------------------------------\n\nTITLE: Running Casper SDK Tests\nDESCRIPTION: Command to execute the test suite for the Casper JavaScript SDK\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/versioned_docs/version-1.5.X/developers/dapps/sdk/script-sdk.md#2025-04-22_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nnpm run test\n```\n\n----------------------------------------\n\nTITLE: Setting Delegation Limits in Casper Network Chainspec (TOML)\nDESCRIPTION: This TOML snippet from the chainspec.toml file defines delegation limits in the Casper Network. It specifies the minimum and maximum delegation amounts in motes, as well as the maximum number of delegators per validator.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/versioned_docs/version-2.0.0/users/delegating.md#2025-04-22_snippet_1\n\nLANGUAGE: toml\nCODE:\n```\n# Minimum allowed delegation amount in motes\nminimum_delegation_amount = 500_000_000_000\n# Maximum allowed delegation amount in motes\nmaximum_delegation_amount = 1_000_000_000_000_000_000\n# The maximum amount of delegators per validator.\nmax_delegators_per_validator = 1200\n```\n\n----------------------------------------\n\nTITLE: Account Hash Schema Definition in JSON\nDESCRIPTION: Defines the schema for an AccountHash, which is represented as a formatted string.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/condor/jsonrpc-comp/rpc-2.0/schema.json.md#2025-04-22_snippet_37\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"description\": \"Account hash as a formatted string.\",\n  \"type\": \"string\"\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Array Schema with Reference in OpenAPI - JSON\nDESCRIPTION: This snippet defines a JSON schema for an array where each item references the 'EntityVersionAndHash' component schema, as typically used in an OpenAPI definition. It requires that API responses or requests utilizing this schema conform to an array of objects defined elsewhere in the components. No external dependencies are needed except a conforming OpenAPI specification. The 'type' is set to 'array', and items are described via a JSON reference; input and output must be JSON data arrays adhering to the referenced schema.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/condor/jsonrpc-comp/rpc-2.0/schema/Array_of_EntityVersionAndHash.json.md#2025-04-22_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"type\": \"array\",\n    \"items\": {\n        \"$ref\": \"#/components/schemas/EntityVersionAndHash\"\n    }\n} \n```\n\n----------------------------------------\n\nTITLE: Defining JSON Schema Structure for Validator Era Info\nDESCRIPTION: This JSON schema defines the structure for composing information related to the transition between eras in a network system, focusing on validator activity and forthcoming validator weights. It requires two main properties, `era_report` and `next_era_validator_weights`, each having a specified schema reference. The schema aids in ensuring standardized data representation for network era information.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/condor/jsonrpc-comp/rpc-2.0/schema/EraEndV1.json.md#2025-04-22_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"description\": \"Information related to the end of an era, and validator weights for the following era.\",\n    \"type\": \"object\",\n    \"required\": [\n        \"era_report\",\n        \"next_era_validator_weights\"\n    ],\n    \"properties\": {\n        \"era_report\": {\n            \"description\": \"Equivocation, reward and validator inactivity information.\",\n            \"allOf\": [\n                {\n                    \"$ref\": \"#/components/schemas/EraReport_for_PublicKey\"\n                }\n            ]\n        },\n        \"next_era_validator_weights\": {\n            \"description\": \"The validators for the upcoming era and their respective weights.\",\n            \"allOf\": [\n                {\n                    \"$ref\": \"#/components/schemas/Array_of_ValidatorWeight\"\n                }\n            ]\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining JSON Schema for Block Sync Status in JSON\nDESCRIPTION: This JSON schema defines the structure for representing the status of syncing an individual block. It includes required fields for the block hash and acquisition state, with an optional field for block height. The schema ensures proper typing and formatting of data.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/condor/jsonrpc-comp/rpc-1.5/schema/BlockSyncStatus.json.md#2025-04-22_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"description\": \"The status of syncing an individual block.\",\n    \"type\": \"object\",\n    \"required\": [\n        \"acquisition_state\",\n        \"block_hash\"\n    ],\n    \"properties\": {\n        \"block_hash\": {\n            \"description\": \"The block hash.\",\n            \"allOf\": [\n                {\n                    \"$ref\": \"#/components/schemas/BlockHash\"\n                }\n            ]\n        },\n        \"block_height\": {\n            \"description\": \"The height of the block, if known.\",\n            \"type\": [\n                \"integer\",\n                \"null\"\n            ],\n            \"format\": \"uint64\",\n            \"minimum\": 0\n        },\n        \"acquisition_state\": {\n            \"description\": \"The state of acquisition of the data associated with the block.\",\n            \"type\": \"string\"\n        }\n    },\n    \"additionalProperties\": false\n}\n```\n\n----------------------------------------\n\nTITLE: Declaring Public Methods in Ethereum\nDESCRIPTION: This code shows how to declare a public method in Ethereum that can modify the contract's state. Public methods in Ethereum can execute contract logic and modify state or retrieve data.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/docs/resources/moving-to-casper.md#2025-04-22_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nfunction update_name(string value) public {\n    dapp_name = value;\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Casper Node Open Files Limit Permanently (limits.conf)\nDESCRIPTION: Specifies the configuration line to add to the `/etc/security/limits.conf` file to permanently set the hard limit for the maximum number of open files (`nofile`) to 64000 for the `casper` user. This setting persists across reboots and process restarts.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/versioned_docs/version-1.5.X/operators/setup/open-files.md#2025-04-22_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\ncasper          hard    nofile          64000\n```\n\n----------------------------------------\n\nTITLE: Defining AccountIdentifier Schema in JSON\nDESCRIPTION: Defines the schema for AccountIdentifier, which represents the identifier of an account. It can be either a public key or an account hash.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/condor/jsonrpc-comp/rpc-2.0/schema.json.md#2025-04-22_snippet_76\n\nLANGUAGE: json\nCODE:\n```\n\"AccountIdentifier\": {\n  \"description\": \"Identifier of an account.\",\n  \"anyOf\": [\n    {\n      \"description\": \"The public key of an account\",\n      \"allOf\": [\n        {\n          \"$ref\": \"#/components/schemas/PublicKey\"\n        }\n      ]\n    },\n    {\n      \"description\": \"The account hash of an account\",\n      \"allOf\": [\n        {\n          \"$ref\": \"#/components/schemas/AccountHash\"\n        }\n      ]\n    }\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Unsubscribing from Events in JavaScript\nDESCRIPTION: Shows how to unsubscribe from specific events using the Casper JavaScript SDK.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/docs/developers/dapps/monitor-and-consume-events.md#2025-04-22_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nes.unsubscribe(EventName.EVENT_NAME)\n```\n\n----------------------------------------\n\nTITLE: Querying Global State for Contract Entry Points in Bash\nDESCRIPTION: This Bash command queries the global state to retrieve information about a contract's entry points, including the newly added ones after an upgrade.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/versioned_docs/version-2.0.0/resources/beginner/upgrade-contract.md#2025-04-22_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\ncasper-client query-global-state \\\n    --node-address http://[NODE_IP]:7777 \\\n    --state-root-hash [STATE_ROOT_HASH] \\\n    --key [ACCOUNT_HASH] -q \"counter\"\n```\n\n----------------------------------------\n\nTITLE: Extending .bashrc for NCTL Commands\nDESCRIPTION: Commands to extend the .bashrc file to make NCTL commands available from the terminal session.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/versioned_docs/version-2.0.0/developers/dapps/setup-nctl.md#2025-04-22_snippet_18\n\nLANGUAGE: bash\nCODE:\n```\ncd YOUR_WORKING_DIRECTORY/casper-nctl\n\ncat >> $HOME/.bashrc <<- EOM\n\n# ----------------------------------------------------------------------\n# CASPER - NCTL\n# ----------------------------------------------------------------------\n\n# Activate NCTL shell.\n. $(pwd)/activate\n\nEOM\n```\n\n----------------------------------------\n\nTITLE: Setting Casper Node Open Files Limit Temporarily (Bash)\nDESCRIPTION: Uses `prlimit` with `sudo` privileges to set the open files limit (`nofile`) to 64000 for the currently running `casper-node` process. This change is temporary and only lasts for the lifetime of the specified process. It uses command substitution to get the PID.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/versioned_docs/version-1.5.X/operators/setup/open-files.md#2025-04-22_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nsudo prlimit --nofile=64000 --pid=$(pgrep \"casper-node$\")\n```\n\n----------------------------------------\n\nTITLE: Configuring No Refund / No Fee Handling in chainspec.toml (TOML)\nDESCRIPTION: This configuration snippet for the `[core]` section of `chainspec.toml`, available since the Condor release, eliminates transaction fees and refunds entirely. Setting `refund_handling` to `'no_refund'` and `fee_handling` to `'no_fee'` aligns the private network's fee mechanism with the Casper Mainnet.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/docs/operators/setup-network/create-private.md#2025-04-22_snippet_4\n\nLANGUAGE: toml\nCODE:\n```\nrefund_handling = { type = 'no_refund' }\nfee_handling = { type = 'no_fee' }\n```\n\n----------------------------------------\n\nTITLE: Removing Associated Key with Casper Client CLI - Bash\nDESCRIPTION: Demonstrates removing a compromised associated key from an account via Casper CLI. Uses the `remove_account.wasm` contract with session arguments identifying the key to remove. Requires Casper tools and proper credentials; output is a deploy submission altering account key state.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/versioned_docs/version-1.5.X/resources/advanced/multi-sig/multi-sig-workflow.md#2025-04-22_snippet_22\n\nLANGUAGE: bash\nCODE:\n```\ncasper-client put-deploy --node-address https://node.testnet.casper.network/ \\\n--chain-name \"casper-test\" \\\n--payment-amount 500000000 \\\n--secret-key $PATH/secret_key.pem \\\n--session-path target/wasm32-unknown-unknown/release/remove_account.wasm \\\n--session-arg \"remove_key:key='account-hash-1fed34baa6807a7868bb18f91b161d99ebf21763810fe4c92e39775d10bbf1f8\"\n```\n\n----------------------------------------\n\nTITLE: Global State Identifier Schema Definition\nDESCRIPTION: Schema definition for querying Global State using either block hash or block height identifiers.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/condor/jsonrpc-comp/rpc-2.0/schema/components.json.md#2025-04-22_snippet_61\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"GlobalStateIdentifier\": {\n    \"description\": \"Identifier for possible ways to query Global State\",\n    \"oneOf\": [\n      {\n        \"description\": \"Query using a block hash.\",\n        \"type\": \"object\",\n        \"required\": [\"BlockHash\"],\n        \"properties\": {\n          \"BlockHash\": {\n            \"$ref\": \"#/components/schemas/BlockHash\"\n          }\n        },\n        \"additionalProperties\": false\n      },\n      {\n        \"description\": \"Query using a block height.\",\n        \"type\": \"object\",\n        \"required\": [\"BlockHeight\"],\n        \"properties\": {}\n      }\n    ]\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Disabling a Contract using Casper Client (Shell)\nDESCRIPTION: This command disables a contract using its hash. After execution, the contract should not be callable using the specified CONTRACT_HASH.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/versioned_docs/version-1.5.X/operators/setup-network/create-private.md#2025-04-22_snippet_21\n\nLANGUAGE: sh\nCODE:\n```\ncasper-client \\\n  put-deploy \\\n  -n $NODE_ADDR \\\n  --chain-name $CHAIN_NAME \\\n  --secret-key admin/secret_key.pem \\\n  --session-account=$(<alice/public_key_hex) \\\n  --session-path disable_contract.wasm \\\n  --payment-amount 3000000000 \\\n  --session-arg \"contract_package_hash:account_hash='account-hash-$CONTRACT_PACKAGE_HASH'\" \\\n  --session-arg \"contract_hash:account_hash='account-hash-$CONTRACT_HASH'\"\n```\n\n----------------------------------------\n\nTITLE: Staging Protocol Upgrades on Mainnet - Bash\nDESCRIPTION: Provides the Bash command needed to initiate protocol upgrade staging on the Casper Mainnet. This command invokes node_util.py to stage new protocol files as specified in the casper.conf configuration. It assumes the node user is 'casper' and the script is present at /etc/casper/node_util.py. Inputs include the config file to use, and outputs are automatic download and preparation of upgrade files. Requires Python (for node_util.py) and proper permissions.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/docs/operators/setup/upgrade.md#2025-04-22_snippet_1\n\nLANGUAGE: Bash\nCODE:\n```\nsudo -u casper /etc/casper/node_util.py stage_protocols casper.conf\n```\n\n----------------------------------------\n\nTITLE: Streaming a Remote File using Curl\nDESCRIPTION: Uses `curl` to download a file from a given URL and output its content directly to standard output (`--output -`). The `-s` flag enables silent mode, suppressing progress meters. This is useful for piping downloaded content directly into other commands.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/docs/operators/maintenance/archiving-and-restoring.md#2025-04-22_snippet_10\n\nLANGUAGE: bash\nCODE:\n```\ncurl -s --output - <URL for tar.zstd file>\n```\n\n----------------------------------------\n\nTITLE: Optimized TAR Command with Block Size\nDESCRIPTION: Enhanced tar command with specified block size for better performance on some systems.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/versioned_docs/version-2.0.0/operators/maintenance/archiving-and-restoring.md#2025-04-22_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\ntar -b 4096 -cv --sparse .\n```\n\n----------------------------------------\n\nTITLE: Executing Package Name Transaction in Casper Network\nDESCRIPTION: This command allows a user to invoke an entry point on a given contract package using an alias stored in their named keys. It requires the package alias, session entry point, gas price tolerance, and either a secret key or initiator address.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/docs/concepts/transactions.md#2025-04-22_snippet_8\n\nLANGUAGE: json\nCODE:\n```\ncasper-client put-txn package-name\n/// The package alias stored in the calling entity's named keys.\n  --package-alias <STRING>\n/// The entry point to invoke on the package.\n  --session-entry-point <NAME>\n/// The maximum gas price that the user is willing to pay for this transaction.\n  --gas-price-tolerance <INTEGER>\n/// The path to the local secret key file, or the [`initiator address`](../developers/json-rpc/types_chain.md#initiatoraddr) sending the transaction.\n  <--secret-key <PATH>|--initiator-address <HEX STRING>>\n```\n\n----------------------------------------\n\nTITLE: Converting Ethereum Keys to PEM Format\nDESCRIPTION: JavaScript script to convert Ethereum private keys to PEM format using the key-encoder library.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/versioned_docs/version-2.0.0/concepts/accounts-and-keys.md#2025-04-22_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nvar KeyEncoder = require('key-encoder'),\nkeyEncoder = new KeyEncoder.default('secp256k1');\nlet priv_hex = \"THE SECRET KEY TO ENCODE\";\nlet priv_pem = keyEncoder.encodePrivate(priv_hex, \"raw\", \"pem\");\nconsole.log(priv_pem);\n```\n\n----------------------------------------\n\nTITLE: Defining Deploy Hash Schema in JSON\nDESCRIPTION: The DeployHash schema defines a hex-encoded hash specifically for deploys, referencing the broader Digest schema that encapsulates a generic hex-encoded hash definition. It’s crucial for uniquely identifying deploys in the Casper Network.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/condor/jsonrpc-comp/rpc-1.5/schema.json.md#2025-04-22_snippet_27\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"description\": \"Hex-encoded deploy hash.\",\n  \"allOf\": [\n    {\n      \"$ref\": \"#/components/schemas/Digest\"\n    }\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Installing libssl-dev on Linux\nDESCRIPTION: Command to install libssl-dev, a cryptography toolkit for TLS/SSL protocols, on Linux using apt.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/versioned_docs/version-2.0.0/developers/dapps/setup-nctl.md#2025-04-22_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\n$ sudo apt install libssl-dev\n```\n\n----------------------------------------\n\nTITLE: Defining JSON Schema for Associated Keys\nDESCRIPTION: This JSON snippet defines a schema for a collection of weighted public keys, represented as account hashes, linked to an account. It uses the 'allOf' keyword to include a reference to an existing schema component, 'Array_of_AssociatedKey'. The primary purpose is to structure and validate account-related keys within a larger JSON schema framework.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/condor/jsonrpc-comp/rpc-2.0/schema/AccountAssociatedKeys.json.md#2025-04-22_snippet_0\n\nLANGUAGE: JSON\nCODE:\n```\n{\n    \"description\": \"A collection of weighted public keys (represented as account hashes) associated with an account.\",\n    \"allOf\": [\n        {\n            \"$ref\": \"#/components/schemas/Array_of_AssociatedKey\"\n        }\n    ]\n}\n```\n\n----------------------------------------\n\nTITLE: Generating Administrator Accounts for Casper Private Networks in Shell\nDESCRIPTION: Command to generate new administrator accounts in a private Casper network. This creates a global_state.toml file with entries required for administrator accounts at the upgrade point.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/versioned_docs/version-2.0.0/operators/setup-network/create-private.md#2025-04-22_snippet_6\n\nLANGUAGE: sh\nCODE:\n```\nglobal-state-update-gen \\\n  generate-admins --data-dir $DATA_DIR/global_state \\\n  --state-hash $STATE_ROOT_HASH \\\n  --admin $PUBLIC_KEY_HEX, $BALANCE\n```\n\n----------------------------------------\n\nTITLE: Defining InitiatorAddr Schema in JSON for Casper Network API\nDESCRIPTION: JSON schema definition for the InitiatorAddr component, which represents the address of the initiator of a TransactionV1. It can be either a PublicKey or an AccountHash.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/condor/jsonrpc-comp/rpc-2.0/schema/components.json.md#2025-04-22_snippet_16\n\nLANGUAGE: json\nCODE:\n```\n\"InitiatorAddr\": {\n    \"description\": \"The address of the initiator of a TransactionV1.\",\n    \"oneOf\": [\n        {\n            \"description\": \"The public key of the initiator.\",\n            \"type\": \"object\",\n            \"required\": [\n                \"PublicKey\"\n            ],\n            \"properties\": {\n                \"PublicKey\": {\n                    \"$ref\": \"#/components/schemas/PublicKey\"\n                }\n            },\n            \"additionalProperties\": false\n        },\n        {\n            \"description\": \"The account hash derived from the public key of the initiator.\",\n            \"type\": \"object\",\n            \"required\": [\n```\n\n----------------------------------------\n\nTITLE: Representing Associated Keys for a Casper Account - JSON\nDESCRIPTION: This JSON snippet demonstrates the representation of an account's associated keys, where each entry includes an account hash and corresponding weight. It exemplifies the structure used in Casper for defining multiple public keys linked to an account and their voting weights. No dependencies are required, but knowledge of Casper's account management is needed; inputs are account hashes and weights, and the output is a JSON array representing the associated keys.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/versioned_docs/version-1.5.X/concepts/list-auth-keys.md#2025-04-22_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n\"associated_keys\": [\\n{\\n    \\\"account_hash\\\": \\\"account-hash-1ab…11\\\",\\n    \\\"weight\\\": 1\\n},\\n{\\n    \\\"account_hash\\\": \\\"account-hash-2cd…22\\\",\\n    \\\"weight\\\": 1\\n},\\n{\\n    \\\"account_hash\\\": \\\"account-hash-3de…33\\\",\\n    \\\"weight\\\": 1\\n   },\\n{\\n    \\\"account_hash\\\": \\\"account-hash-4fg…44\\\",\\n      \\\"weight\\\": 1\\n}\\n ], ...\n```\n\n----------------------------------------\n\nTITLE: Defining Transaction and Deploy Hash Schemas\nDESCRIPTION: Defines JSON schema for versioned wrappers of transaction and deploy hashes, specifying object structures for each type. Dependencies include $ref references to other defined schemas such as DeployHash and TransactionV1Hash. It requires 'Deploy' or 'Version1' properties, based on the schema version, to provide structured verifications of hash inputs. Outputs are consistently type-checked JSON objects that prevent additional properties.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/condor/jsonrpc-comp/rpc-2.0/schema/TransactionHash.json.md#2025-04-22_snippet_0\n\nLANGUAGE: JSON\nCODE:\n```\n{\n    \"description\": \"A versioned wrapper for a transaction hash or deploy hash.\",\n    \"oneOf\": [\n        {\n            \"description\": \"A deploy hash.\",\n            \"type\": \"object\",\n            \"required\": [\n                \"Deploy\"\n            ],\n            \"properties\": {\n                \"Deploy\": {\n                    \"$ref\": \"#/components/schemas/DeployHash\"\n                }\n            },\n            \"additionalProperties\": false\n        },\n        {\n            \"description\": \"A version 1 transaction hash.\",\n            \"type\": \"object\",\n            \"required\": [\n                \"Version1\"\n            ],\n            \"properties\": {\n                \"Version1\": {\n                    \"$ref\": \"#/components/schemas/TransactionV1Hash\"\n                }\n            },\n            \"additionalProperties\": false\n        }\n    ]\n}\n```\n\n----------------------------------------\n\nTITLE: Cloning and Building Casper Delegate Contract - Bash\nDESCRIPTION: Clones the Casper Node repository from GitHub and compiles the delegate.wasm smart contract using Makefile targets. These bash commands must be executed before attempting to deploy the contract via a backend script. Required dependencies include Git, Make, Rust toolchain, and network access to GitHub. Produces the delegate contract Wasm binary for further use.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/versioned_docs/version-1.5.X/developers/dapps/sdk/client-library-usage.md#2025-04-22_snippet_25\n\nLANGUAGE: bash\nCODE:\n```\ngit clone https://github.com/casper-network/casper-node.git\\ncd casper-node/\n```\n\nLANGUAGE: bash\nCODE:\n```\nmake setup-rs\\nmake build-contract-rs/delegate\n```\n\n----------------------------------------\n\nTITLE: Executing NFT Contract Usage Example\nDESCRIPTION: Command to run the usage example script that tests minting, transferring and burning NFT operations. The example utilizes installation variables and performs three separate deploys to test core NFT functions.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/docs/resources/tokens/cep78/js-tutorial.md#2025-04-22_snippet_8\n\nLANGUAGE: javascript\nCODE:\n```\nnpm run example:usage\n```\n\n----------------------------------------\n\nTITLE: Querying Utility Contract for CEP-18 without Comments\nDESCRIPTION: This command retrieves the utility contract data by executing the command without comments, focusing only on providing the necessary keys and hashes for accurate querying.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/docs/resources/tokens/cep18/query.md#2025-04-22_snippet_4\n\nLANGUAGE: json\nCODE:\n```\ncasper-client query-global-state -n http://<HOST IP>:<PORT> \\\n--key hash-015b99020edb40e7e1e2b31a8e104bc226242f960a2d10dc1d91ae3eb6fa41b6 \\\n--state-root-hash f9f73c3a4da5893b67c4cac94a5695d76cfefff61b050c98a7b19e2b8efd3933\n```\n\n----------------------------------------\n\nTITLE: Error Type Definitions\nDESCRIPTION: Schema definitions for error handling types including TransformError, BytesreprError and TypeMismatch. Defines possible error conditions during data transformation and serialization operations.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/condor/jsonrpc-comp/rpc-2.0/schema/components.json.md#2025-04-22_snippet_57\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"TransformError\": {\n        \"description\": \"Error type for applying and combining transforms.\\n\\nA `TypeMismatch` occurs when a transform cannot be applied because the types are not compatible (e.g. trying to add a number to a string).\",\n        \"oneOf\": [\n            {\n                \"description\": \"Error while (de)serializing data.\",\n                \"type\": \"object\",\n                \"required\": [\"Serialization\"],\n                \"properties\": {\n                    \"Serialization\": {\n                        \"$ref\": \"#/components/schemas/BytesreprError\"\n                    }\n                },\n                \"additionalProperties\": false\n            }\n        ]\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Full Database Compression Pipeline\nDESCRIPTION: Complete command combining tar and zstd for database compression with configurable parameters.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/versioned_docs/version-2.0.0/operators/maintenance/archiving-and-restoring.md#2025-04-22_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\ntar -b 4096 -cv --sparse . | zstd -[level] -cv -T[thread count] --long=31 > [path_to]/file.tar.zst\n```\n\n----------------------------------------\n\nTITLE: Generating Ed25519 Keys using Casper Client\nDESCRIPTION: Commands to create EdDSA keys using the Casper command-line client and view the generated files.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/versioned_docs/version-2.0.0/concepts/accounts-and-keys.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nmkdir ed25519-keys\ncasper-client keygen ed25519-keys/\ntree ed25519-keys/\n```\n\n----------------------------------------\n\nTITLE: Cloning the CEP-18 Repository with Bash\nDESCRIPTION: Command to clone the Casper Fungible Token (CEP-18) repository from GitHub and change into the project directory.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/versioned_docs/version-1.5.X/resources/tokens/cep18/full-tutorial.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ngit clone https://github.com/casper-ecosystem/cep18 && cd cep18\n```\n\n----------------------------------------\n\nTITLE: Defining BlockHeader Schema with Versioning in JSON\nDESCRIPTION: JSON schema for the BlockHeader structure which supports versioning with oneOf to handle different versions of the block header format.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/condor/jsonrpc-comp/rpc-2.0/schema/components.json.md#2025-04-22_snippet_64\n\nLANGUAGE: json\nCODE:\n```\n\"BlockHeader\": {\n    \"description\": \"The versioned header portion of a block. It encapsulates different variants of the BlockHeader struct.\",\n    \"oneOf\": [\n        {\n            \"description\": \"The legacy, initial version of the header portion of a block.\",\n            \"type\": \"object\",\n            \"required\": [\n                \"Version1\"\n            ],\n            \"properties\": {\n                \"Version1\": {\n                    \"$ref\": \"#/components/schemas/BlockHeaderV1\"\n                }\n            },\n            \"additionalProperties\": false\n        },\n        {\n            \"description\": \"The version 2 of the header portion of a block.\",\n            \"type\": \"object\",\n            \"required\": [\n                \"Version2\"\n            ],\n            \"properties\": {\n                \"Version2\": {\n                    \"$ref\": \"#/components/schemas/BlockHeaderV2\"\n                }\n            },\n            \"additionalProperties\": false\n        }\n    ]\n}\n```\n\n----------------------------------------\n\nTITLE: Verifying Undelegation Status\nDESCRIPTION: Command to verify the undelegation status by querying the auction state using the Casper command-line client.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/versioned_docs/version-1.5.X/developers/cli/undelegate.md#2025-04-22_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\ncasper-client get-auction-info \\\n--node-address http://<peer-ip-address>:7777\n```\n\n----------------------------------------\n\nTITLE: Querying Casper Network Account Address\nDESCRIPTION: Retrieve the account hash using the Casper client and a public key file.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/versioned_docs/version-1.5.X/resources/beginner/counter-testnet/walkthrough.md#2025-04-22_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ncasper-client account-address --public-key [PATH_TO_PUBLIC_KEY]\n```\n\n----------------------------------------\n\nTITLE: Zeroing Out Balance with WriteCLValue in Casper Network\nDESCRIPTION: This JSON shows a WriteCLValue transformation that explicitly sets an account balance to zero. This is demonstrated by writing a U512 value of \"0\" to the balance associated with the specified key.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/versioned_docs/version-2.0.0/developers/cli/transfers/direct-token-transfer.md#2025-04-22_snippet_13\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"key\": \"balance-98d945f5324f865243b7c02c0417ab6eac361c5c56602fd42ced834a1ba201b6\",\n  \"transform\": {\n    \"WriteCLValue\": {\n      \"cl_type\": \"U512\",\n      \"bytes\": \"00\",\n      \"parsed\": \"0\"\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Representing Authorization Keys (Approvals) in JSON - JSON\nDESCRIPTION: This snippet provides the structure for a transaction's authorization keys as represented in the 'approvals' JSON array. Each approval entry includes a signer (the identifier of the signing key) and its signature. It is used during transaction verification to ensure proper authorization and signing. All listed signers are expected to be a subset of the account's associated keys. Inputs are the signers and their corresponding digital signatures; output is a verifiable list for consensus checks.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/docs/concepts/list-auth-keys.md#2025-04-22_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n\"approvals\": [\\n    {\\n      \\\"signer\\\": \\\" 2cd...22\\\",\\n      \\\"signature\\\": \\\"02df8c...f481\\\"\\n    },\\n    {\\n      \\\"signer\\\": \\\"4fg...44\\\",\\n      \\\"signature\\\": \\\"02ef21...756a\\\"\\n    }\\n]\n```\n\n----------------------------------------\n\nTITLE: Defining Global State Value Variants - OpenAPI JSON Schema - JSON\nDESCRIPTION: This JSON code defines a schema for a 'Global State Value' object in OpenAPI, enumerating all possible value variants using the 'oneOf' construct. Each variant references a specific component schema (e.g., CLValue, Account, Contract, DeployInfo, etc.) which must be defined elsewhere in the components section. The object enforces strict validation (no additional properties beyond those defined) and supports a wide range of blockchain entity types relevant to Casper. Inputs must comply with one of the specified variant structures; outputs will have a single key whose value's structure matches its referenced schema.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/condor/jsonrpc-comp/rpc-2.0/schema/StoredValue.json.md#2025-04-22_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"description\": \"A value stored in Global State.\",\n    \"oneOf\": [\n        {\n            \"description\": \"A CLValue.\",\n            \"type\": \"object\",\n            \"required\": [\n                \"CLValue\"\n            ],\n            \"properties\": {\n                \"CLValue\": {\n                    \"$ref\": \"#/components/schemas/CLValue\"\n                }\n            },\n            \"additionalProperties\": false\n        },\n        {\n            \"description\": \"An account.\",\n            \"type\": \"object\",\n            \"required\": [\n                \"Account\"\n            ],\n            \"properties\": {\n                \"Account\": {\n                    \"$ref\": \"#/components/schemas/Account\"\n                }\n            },\n            \"additionalProperties\": false\n        },\n        {\n            \"description\": \"Contract wasm.\",\n            \"type\": \"object\",\n            \"required\": [\n                \"ContractWasm\"\n            ],\n            \"properties\": {\n                \"ContractWasm\": {\n                    \"$ref\": \"#/components/schemas/ContractWasm\"\n                }\n            },\n            \"additionalProperties\": false\n        },\n        {\n            \"description\": \"A contract.\",\n            \"type\": \"object\",\n            \"required\": [\n                \"Contract\"\n            ],\n            \"properties\": {\n                \"Contract\": {\n                    \"$ref\": \"#/components/schemas/Contract\"\n                }\n            },\n            \"additionalProperties\": false\n        },\n        {\n            \"description\": \"A contract package.\",\n            \"type\": \"object\",\n            \"required\": [\n                \"ContractPackage\"\n            ],\n            \"properties\": {\n                \"ContractPackage\": {\n                    \"$ref\": \"#/components/schemas/ContractPackage\"\n                }\n            },\n            \"additionalProperties\": false\n        },\n        {\n            \"description\": \"A version 1 (legacy) transfer.\",\n            \"type\": \"object\",\n            \"required\": [\n                \"LegacyTransfer\"\n            ],\n            \"properties\": {\n                \"LegacyTransfer\": {\n                    \"$ref\": \"#/components/schemas/TransferV1\"\n                }\n            },\n            \"additionalProperties\": false\n        },\n        {\n            \"description\": \"Info about a deploy.\",\n            \"type\": \"object\",\n            \"required\": [\n                \"DeployInfo\"\n            ],\n            \"properties\": {\n                \"DeployInfo\": {\n                    \"$ref\": \"#/components/schemas/DeployInfo\"\n                }\n            },\n            \"additionalProperties\": false\n        },\n        {\n            \"description\": \"Info about an era.\",\n            \"type\": \"object\",\n            \"required\": [\n                \"EraInfo\"\n            ],\n            \"properties\": {\n                \"EraInfo\": {\n                    \"$ref\": \"#/components/schemas/EraInfo\"\n                }\n            },\n            \"additionalProperties\": false\n        },\n        {\n            \"description\": \"Variant that stores [`Bid`].\",\n            \"type\": \"object\",\n            \"required\": [\n                \"Bid\"\n            ],\n            \"properties\": {\n                \"Bid\": {\n                    \"$ref\": \"#/components/schemas/Bid\"\n                }\n            },\n            \"additionalProperties\": false\n        },\n        {\n            \"description\": \"Variant that stores withdraw information.\",\n            \"type\": \"object\",\n            \"required\": [\n                \"Withdraw\"\n            ],\n            \"properties\": {\n                \"Withdraw\": {\n                    \"type\": \"array\",\n                    \"items\": {\n                        \"$ref\": \"#/components/schemas/WithdrawPurse\"\n                    }\n                }\n            },\n            \"additionalProperties\": false\n        },\n        {\n            \"description\": \"Unbonding information.\",\n            \"type\": \"object\",\n            \"required\": [\n                \"Unbonding\"\n            ],\n            \"properties\": {\n                \"Unbonding\": {\n                    \"type\": \"array\",\n                    \"items\": {\n                        \"$ref\": \"#/components/schemas/UnbondingPurse\"\n                    }\n                }\n            },\n            \"additionalProperties\": false\n        },\n        {\n            \"description\": \"An `AddressableEntity`.\",\n            \"type\": \"object\",\n            \"required\": [\n                \"AddressableEntity\"\n            ],\n            \"properties\": {\n                \"AddressableEntity\": {\n                    \"$ref\": \"#/components/schemas/AddressableEntity\"\n                }\n            },\n            \"additionalProperties\": false\n        },\n        {\n            \"description\": \"Variant that stores [`BidKind`].\",\n            \"type\": \"object\",\n            \"required\": [\n                \"BidKind\"\n            ],\n            \"properties\": {\n                \"BidKind\": {\n                    \"$ref\": \"#/components/schemas/BidKind\"\n                }\n            },\n            \"additionalProperties\": false\n        },\n        {\n            \"description\": \"A `Package`.\",\n            \"type\": \"object\",\n            \"required\": [\n                \"Package\"\n            ],\n            \"properties\": {\n                \"Package\": {\n                    \"$ref\": \"#/components/schemas/Package\"\n                }\n            },\n            \"additionalProperties\": false\n        },\n        {\n            \"description\": \"A record of byte code.\",\n            \"type\": \"object\",\n            \"required\": [\n                \"ByteCode\"\n            ],\n            \"properties\": {\n                \"ByteCode\": {\n                    \"$ref\": \"#/components/schemas/ByteCode\"\n                }\n            },\n            \"additionalProperties\": false\n        },\n        {\n            \"description\": \"Variant that stores a message topic.\",\n            \"type\": \"object\",\n            \"required\": [\n                \"MessageTopic\"\n            ],\n            \"properties\": {\n                \"MessageTopic\": {\n                    \"$ref\": \"#/components/schemas/MessageTopicSummary\"\n                }\n            },\n            \"additionalProperties\": false\n        },\n        {\n            \"description\": \"Variant that stores a message digest.\",\n            \"type\": \"object\",\n            \"required\": [\n                \"Message\"\n            ],\n            \"properties\": {\n                \"Message\": {\n                    \"$ref\": \"#/components/schemas/MessageChecksum\"\n                }\n            },\n            \"additionalProperties\": false\n        },\n        {\n            \"description\": \"A NamedKey record.\",\n            \"type\": \"object\",\n            \"required\": [\n                \"NamedKey\"\n            ],\n            \"properties\": {\n                \"NamedKey\": {\n                    \"$ref\": \"#/components/schemas/NamedKeyValue\"\n                }\n            },\n            \"additionalProperties\": false\n        },\n        {\n            \"description\": \"A reservation record.\",\n            \"type\": \"object\",\n            \"required\": [\n                \"Reservation\"\n            ],\n            \"properties\": {\n                \"Reservation\": {\n                    \"$ref\": \"#/components/schemas/ReservationKind\"\n                }\n            },\n            \"additionalProperties\": false\n        },\n        {\n            \"description\": \"An entrypoint record.\",\n            \"type\": \"object\",\n            \"required\": [\n                \"EntryPoint\"\n            ],\n            \"properties\": {\n                \"EntryPoint\": {\n                    \"$ref\": \"#/components/schemas/EntryPointValue\"\n                }\n            },\n            \"additionalProperties\": false\n        }\n    ]\n} \n```\n\n----------------------------------------\n\nTITLE: Defining JSON Schema for an Object\nDESCRIPTION: This code snippet defines a JSON schema for an object with required fields 'amount', 'proof', and 'time'. The schema includes references to other components for 'BlockTime' and 'U512', indicating dependencies on these schema definitions. It ensures that the necessary data structure is adhered to when representing a hold in a system.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/condor/jsonrpc-comp/rpc-2.0/schema/BalanceHoldWithProof.json.md#2025-04-22_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"type\": \"object\",\n    \"required\": [\n        \"amount\",\n        \"proof\",\n        \"time\"\n    ],\n    \"properties\": {\n        \"time\": {\n            \"description\": \"The block time at which the hold was created.\",\n            \"allOf\": [\n                {\n                    \"$ref\": \"#/components/schemas/BlockTime\"\n                }\n            ]\n        },\n        \"amount\": {\n            \"description\": \"The amount in the hold.\",\n            \"allOf\": [\n                {\n                    \"$ref\": \"#/components/schemas/U512\"\n                }\n            ]\n        },\n        \"proof\": {\n            \"description\": \"A proof that the given value is present in the Merkle trie.\",\n            \"type\": \"string\"\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Retrieving Deploy Results - Casper Network - JSON\nDESCRIPTION: This snippet shows an example response from the 'info_get_deploy' JSON-RPC method on Casper Network, returned in JSON format. It contains detailed deploy data, including headers, payment, session, approvals, and execution info with block and result details. Dependencies: valid Casper node, deploy hash presence, network setup; input parameters are deployed hash and RPC API version; the output contains deploy and execution information or an empty 'execution_info' if not yet processed. Note: result fields may be optional depending on deploy status.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/versioned_docs/version-2.0.0/developers/json-rpc/json-rpc-informational.md#2025-04-22_snippet_9\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"id\": 1,\n  \"jsonrpc\": \"2.0\",\n  \"result\": {\n    \"name\": \"info_get_deploy_result\",\n    \"value\": {\n      \"api_version\": \"2.0.0\",\n      \"deploy\": {\n        \"hash\": \"5c9b3b099c1378aa8e4a5f07f59ff1fcdc69a83179427c7e67ae0377d94d93fa\",\n        \"header\": {\n          \"account\": \"01d9bf2148748a85c89da5aad8ee0b0fc2d105fd39d41a4c796536354f0ae2900c\",\n          \"timestamp\": \"2020-11-17T00:39:24.072Z\",\n          \"ttl\": \"1h\",\n          \"gas_price\": 1,\n          \"body_hash\": \"d53cf72d17278fd47d399013ca389c50d589352f1a12593c0b8e01872a641b50\",\n          \"dependencies\": [\n            \"0101010101010101010101010101010101010101010101010101010101010101\"\n          ],\n          \"chain_name\": \"casper-example\"\n        },\n        \"payment\": {\n          \"StoredContractByName\": {\n            \"name\": \"casper-example\",\n            \"entry_point\": \"example-entry-point\",\n            \"args\": [\n              [\n                \"amount\",\n                {\n                  \"cl_type\": \"I32\",\n                  \"bytes\": \"e8030000\",\n                  \"parsed\": 1000\n                }\n              ]\n            ]\n          }\n        },\n        \"session\": {\n          \"Transfer\": {\n            \"args\": [\n              [\n                \"amount\",\n                {\n                  \"cl_type\": \"I32\",\n                  \"bytes\": \"e8030000\",\n                  \"parsed\": 1000\n                }\n              ]\n            ]\n          }\n        },\n        \"approvals\": [\n          {\n            \"signer\": \"01d9bf2148748a85c89da5aad8ee0b0fc2d105fd39d41a4c796536354f0ae2900c\",\n            \"signature\": \"014c1a89f92e29dd74fc648f741137d9caf4edba97c5f9799ce0c9aa6b0c9b58db368c64098603dbecef645774c05dff057cb1f91f2cf390bbacce78aa6f084007\"\n          }\n        ]\n      },\n      \"execution_info\": {\n        \"block_hash\": \"0744fcb72af43c5cc372039bc5a8bfee48808a9ce414acc0d6338a628c20eb42\",\n        \"block_height\": 10,\n        \"execution_result\": {\n          \"Version2\": {\n            \"initiator\": {\n              \"PublicKey\": \"01d9bf2148748a85c89da5aad8ee0b0fc2d105fd39d41a4c796536354f0ae2900c\"\n            },\n            \"error_message\": null,\n            \"limit\": \"123456\",\n            \"consumed\": \"100000\",\n            \"cost\": \"246912\",\n            \"payment\": [\n              {\n                \"source\": \"uref-0101010101010101010101010101010101010101010101010101010101010101-001\"\n              }\n            ],\n            \"transfers\": [\n              {\n                \"Version2\": {\n                  \"transaction_hash\": {\n                    \"Version1\": \"0101010101010101010101010101010101010101010101010101010101010101\"\n                  },\n                  \"from\": {\n                    \"AccountHash\": \"account-hash-0202020202020202020202020202020202020202020202020202020202020202\"\n                  },\n                  \"to\": \"account-hash-0303030303030303030303030303030303030303030303030303030303030303\",\n                  \"source\": \"uref-0a0a0a0a0a0a0a0a0a0a0a0a0a0a0a0a0a0a0a0a0a0a0a0a0a0a0a0a0a0a0a0a-007\",\n                  \"target\": \"uref-1b1b1b1b1b1b1b1b1b1b1b1b1b1b1b1b1b1b1b1b1b1b1b1b1b1b1b1b1b1b1b1b-000\",\n                  \"amount\": \"1000000000000\",\n                  \"gas\": \"2500000000\",\n                  \"id\": 999\n                }\n              }\n            ],\n            \"size_estimate\": 186,\n            \"effects\": [\n              {\n                \"key\": \"account-hash-2c4a11c062a8a337bfc97e27fd66291caeb2c65865dcb5d3ef3759c4c97efecb\",\n                \"kind\": {\n                  \"AddUInt64\": 8\n                }\n              },\n              {\n                \"key\": \"deploy-af684263911154d26fa05be9963171802801a0b6aff8f199b7391eacb8edc9e1\",\n                \"kind\": \"Identity\"\n              }\n            ]\n          }\n        }\n      }\n    }\n  }\n}\n\n```\n\n----------------------------------------\n\nTITLE: Deploying a Contract on Casper Network in Bash\nDESCRIPTION: Template command for deploying a contract to the Casper Network, specifying network parameters, payment amount, and session arguments.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/docs/resources/tokens/cep18/full-tutorial.md#2025-04-22_snippet_12\n\nLANGUAGE: bash\nCODE:\n```\ncasper-client put-deploy \\\n    --node-address http://<HOST:PORT> \\\n    --chain-name [NETWORK_NAME]] \\\n    --secret-key [PATH_TO_YOUR_KEY]/secret_key.pem \\\n    --payment-amount [AMOUNT] \\\n    --session-path [WASM_FILE_PATH]/[File_Name].wasm\n    --session-arg <\"NAME:TYPE='VALUE'\" OR \"NAME:TYPE=null\">\n```\n\n----------------------------------------\n\nTITLE: Defining Stored Versioned Contract by Hash - JSON\nDESCRIPTION: This snippet defines a JSON schema for a stored versioned contract referenced by its ContractPackageHash. It includes required properties such as 'args', 'entry_point', and 'hash'. Optional versioning allows the contract to default to the highest enabled version if unspecified.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/condor/jsonrpc-comp/rpc-1.5/schema/components.json.md#2025-04-22_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"description\": \"Stored versioned contract referenced by its [`ContractPackageHash`], entry point and an instance of [`RuntimeArgs`].\",\n  \"type\": \"object\",\n  \"required\": [\n    \"StoredVersionedContractByHash\"\n  ],\n  \"properties\": {\n    \"StoredVersionedContractByHash\": {\n      \"type\": \"object\",\n      \"required\": [\n        \"args\",\n        \"entry_point\",\n        \"hash\"\n      ],\n      \"properties\": {\n        \"hash\": {\n          \"description\": \"Hex-encoded hash.\",\n          \"type\": \"string\"\n        },\n        \"version\": {\n          \"description\": \"An optional version of the contract to call. It will default to the highest enabled version if no value is specified.\",\n          \"type\": [\n            \"integer\",\n            \"null\"\n          ],\n          \"format\": \"uint32\",\n          \"minimum\": 0.0\n        },\n        \"entry_point\": {\n          \"description\": \"Entry point name.\",\n          \"type\": \"string\"\n        },\n        \"args\": {\n          \"description\": \"Runtime arguments.\",\n          \"allOf\": [\n            {\n              \"$ref\": \"#/components/schemas/RuntimeArgs\"\n            }\n          ]\n        }\n      },\n      \"additionalProperties\": false\n    }\n  },\n  \"additionalProperties\": false\n}\n```\n\n----------------------------------------\n\nTITLE: Sample Account State Query and Response\nDESCRIPTION: Example of querying account state with specific parameters and the corresponding JSON response showing account details.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/versioned_docs/version-1.5.X/resources/tokens/cep78/using-casper-client/full-installation-tutorial.md#2025-04-22_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\ncasper-client query-global-state --node-address http://localhost:11101/rpc/ \\\n--state-root-hash 376b18e95312328f212f9966200fa40734e66118cbd34ace0a1ec14eacaea6e6 \\\n--key account-hash-82729ae3b368bb2c45d23c05c872c446cbcf32b694f1d9efd3d1ea46cf227a11\n```\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"jsonrpc\": \"2.0\",\n  \"id\": -6733022256306802125,\n  \"result\": {\n    \"api_version\": \"1.5.6\",\n    \"block_header\": null,\n    \"stored_value\": {\n      \"Account\": {\n        \"account_hash\": \"account-hash-e70dbca48c2d31bc2d754e51860ceaa8a1a49dc627b20320b0ecee1b6d9ce655\",\n        \"named_keys\": [],\n        \"main_purse\": \"uref-11e6fc5354f61a004df98482376c45964b8b1557e8f2f13fb5f3adab5faa8be1-007\",\n        \"associated_keys\": [\n          {\n            \"account_hash\": \"account-hash-e70dbca48c2d31bc2d754e51860ceaa8a1a49dc627b20320b0ecee1b6d9ce655\",\n            \"weight\": 1\n          }\n        ],\n        \"action_thresholds\": {\n          \"deployment\": 1,\n          \"key_management\": 1\n        }\n      }\n    },\n    \"merkle_proof\": \"[32706 hex chars]\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Listing Staged and Unstaged Protocols - Bash\nDESCRIPTION: Demonstrates a Bash command to check the list of protocols (both staged and unstaged) on a Casper node using node_util.py. This helps verify the node's upgrade status without making changes. Requires the casper.conf configuration file and correct file paths. Outputs the status of protocol staging for review.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/docs/operators/setup/upgrade.md#2025-04-22_snippet_3\n\nLANGUAGE: Bash\nCODE:\n```\nsudo -u casper /etc/casper/node_util.py check_protocols casper.conf\n```\n\n----------------------------------------\n\nTITLE: Defining Deploy Hash Schema in JSON\nDESCRIPTION: This JSON Schema object defines the structure for a deploy hash within the Casper Network documentation. It specifies that the hash is hex-encoded via the `description` field and inherits properties from the `Digest` schema referenced by `$ref`. This is likely part of an OpenAPI or similar specification for API documentation.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/condor/jsonrpc-comp/rpc-2.0/schema/DeployHash.json.md#2025-04-22_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"description\": \"Hex-encoded deploy hash.\",\n    \"allOf\": [\n        {\n            \"$ref\": \"#/components/schemas/Digest\"\n        }\n    ]\n} \n```\n\n----------------------------------------\n\nTITLE: Defining info_get_status RPC Schema in JSON\nDESCRIPTION: Comprehensive JSON schema defining the info_get_status RPC endpoint structure, including required fields, property definitions, and example response. Documents API parameters, response format, and data types for querying node status information.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/condor/jsonrpc-comp/rpc-1.5/info_get_status.json.md#2025-04-22_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"name\": \"info_get_status\",\n  \"summary\": \"returns the current status of the node\",\n  \"params\": [],\n  \"result\": {\n    \"name\": \"info_get_status_result\",\n    \"schema\": {\n      \"description\": \"Result for \\\"info_get_status\\\" RPC response.\",\n      \"type\": \"object\",\n      \"required\": [\n        \"api_version\",\n        \"available_block_range\",\n        \"block_sync\",\n        \"build_version\",\n        \"chainspec_name\",\n        \"last_progress\",\n        \"peers\",\n        \"reactor_state\",\n        \"starting_state_root_hash\",\n        \"uptime\"\n      ],\n      \"properties\": {\n        \"peers\": {\n          \"description\": \"The node ID and network address of each connected peer.\",\n          \"$ref\": \"#/components/schemas/PeersMap\"\n        },\n        \"api_version\": {\n          \"description\": \"The RPC API version.\",\n          \"type\": \"string\"\n        },\n        \"build_version\": {\n          \"description\": \"The compiled node version.\",\n          \"type\": \"string\"\n        },\n        \"chainspec_name\": {\n          \"description\": \"The chainspec name.\",\n          \"type\": \"string\"\n        },\n        \"starting_state_root_hash\": {\n          \"description\": \"The state root hash of the lowest block in the available block range.\",\n          \"$ref\": \"#/components/schemas/Digest\"\n        },\n        \"last_added_block_info\": {\n          \"description\": \"The minimal info of the last block from the linear chain.\",\n          \"anyOf\": [\n            {\n              \"$ref\": \"#/components/schemas/MinimalBlockInfo\"\n            },\n            {\n              \"type\": \"null\"\n            }\n          ]\n        },\n        \"our_public_signing_key\": {\n          \"description\": \"Our public signing key.\",\n          \"anyOf\": [\n            {\n              \"$ref\": \"#/components/schemas/PublicKey\"\n            },\n            {\n              \"type\": \"null\"\n            }\n          ]\n        },\n        \"round_length\": {\n          \"description\": \"The next round length if this node is a validator.\",\n          \"anyOf\": [\n            {\n              \"$ref\": \"#/components/schemas/TimeDiff\"\n            },\n            {\n              \"type\": \"null\"\n            }\n          ]\n        },\n        \"next_upgrade\": {\n          \"description\": \"Information about the next scheduled upgrade.\",\n          \"anyOf\": [\n            {\n              \"$ref\": \"#/components/schemas/NextUpgrade\"\n            },\n            {\n              \"type\": \"null\"\n            }\n          ]\n        },\n        \"uptime\": {\n          \"description\": \"Time that passed since the node has started.\",\n          \"$ref\": \"#/components/schemas/TimeDiff\"\n        },\n        \"reactor_state\": {\n          \"description\": \"The current state of node reactor.\",\n          \"$ref\": \"#/components/schemas/ReactorState\"\n        },\n        \"last_progress\": {\n          \"description\": \"Timestamp of the last recorded progress in the reactor.\",\n          \"$ref\": \"#/components/schemas/Timestamp\"\n        },\n        \"available_block_range\": {\n          \"description\": \"The available block range in storage.\",\n          \"$ref\": \"#/components/schemas/AvailableBlockRange\"\n        },\n        \"block_sync\": {\n          \"description\": \"The status of the block synchronizer builders.\",\n          \"$ref\": \"#/components/schemas/BlockSynchronizerStatus\"\n        }\n      },\n      \"additionalProperties\": false\n    }\n  },\n  \"examples\": [\n    {\n      \"name\": \"info_get_status_example\",\n      \"params\": [],\n      \"result\": {\n        \"name\": \"info_get_status_example_result\",\n        \"value\": {\n          \"peers\": [\n            {\n              \"node_id\": \"tls:0101..0101\",\n              \"address\": \"127.0.0.1:54321\"\n            }\n          ],\n          \"api_version\": \"1.5.6\",\n          \"build_version\": \"1.5.6\",\n          \"chainspec_name\": \"casper-example\",\n          \"starting_state_root_hash\": \"0000000000000000000000000000000000000000000000000000000000000000\",\n          \"last_added_block_info\": {\n            \"hash\": \"13c2d7a68ecdd4b74bf4393c88915c836c863fc4bf11d7f2bd930a1bbccacdcb\",\n            \"timestamp\": \"2020-11-17T00:39:24.072Z\",\n            \"era_id\": 1,\n            \"height\": 10,\n            \"state_root_hash\": \"0808080808080808080808080808080808080808080808080808080808080808\",\n            \"creator\": \"01d9bf2148748a85c89da5aad8ee0b0fc2d105fd39d41a4c796536354f0ae2900c\"\n          },\n          \"our_public_signing_key\": \"01d9bf2148748a85c89da5aad8ee0b0fc2d105fd39d41a4c796536354f0ae2900c\",\n          \"round_length\": \"1m 5s 536ms\",\n          \"next_upgrade\": {\n            \"activation_point\": 42,\n            \"protocol_version\": \"2.0.1\"\n          },\n          \"uptime\": \"13s\",\n          \"reactor_state\": \"Initialize\",\n          \"last_progress\": \"1970-01-01T00:00:00.000Z\",\n          \"available_block_range\": {\n            \"low\": 0,\n            \"high\": 0\n          },\n          \"block_sync\": {\n            \"historical\": {\n              \"block_hash\": \"16ddf28e2b3d2e17f4cef36f8b58827eca917af225d139b0c77df3b4a67dc55e\",\n              \"block_height\": 40,\n              \"acquisition_state\": \"have strict finality(40) for: block hash 16dd..c55e\"\n            },\n            \"forward\": {\n              \"block_hash\": \"59907b1e32a9158169c4d89d9ce5ac9164fc31240bfcfb0969227ece06d74983\",\n              \"block_height\": 6701,\n              \"acquisition_state\": \"have block body(6701) for: block hash 5990..4983\"\n            }\n          }\n        }\n      }\n    }\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: JSON Schema Definition for state_get_entity RPC Method in Casper Network\nDESCRIPTION: Complete JSON schema definition for the state_get_entity RPC method that retrieves addressable entity information from the Casper network. The schema defines required parameters (entity_identifier), optional parameters (block_identifier), the expected response structure, and provides a detailed usage example.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/condor/jsonrpc-comp/rpc-2.0/state_get_entity.json.md#2025-04-22_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"name\": \"state_get_entity\",\n  \"summary\": \"returns an AddressableEntity from the network\",\n  \"params\": [\n    {\n      \"name\": \"entity_identifier\",\n      \"schema\": {\n        \"description\": \"The identifier of the entity.\",\n        \"$ref\": \"#/components/schemas/EntityIdentifier\"\n      },\n      \"required\": true\n    },\n    {\n      \"name\": \"block_identifier\",\n      \"schema\": {\n        \"description\": \"The block identifier.\",\n        \"anyOf\": [\n          {\n            \"$ref\": \"#/components/schemas/BlockIdentifier\"\n          },\n          {\n            \"type\": \"null\"\n          }\n        ]\n      },\n      \"required\": false\n    }\n  ],\n  \"result\": {\n    \"name\": \"state_get_entity_result\",\n    \"schema\": {\n      \"description\": \"Result for \\\"state_get_entity\\\" RPC response.\",\n      \"type\": \"object\",\n      \"required\": [\n        \"api_version\",\n        \"entity\",\n        \"merkle_proof\"\n      ],\n      \"properties\": {\n        \"api_version\": {\n          \"description\": \"The RPC API version.\",\n          \"type\": \"string\"\n        },\n        \"entity\": {\n          \"description\": \"The addressable entity or a legacy account.\",\n          \"$ref\": \"#/components/schemas/EntityOrAccount\"\n        },\n        \"merkle_proof\": {\n          \"description\": \"The Merkle proof.\",\n          \"type\": \"string\"\n        }\n      },\n      \"additionalProperties\": false\n    }\n  },\n  \"examples\": [\n    {\n      \"name\": \"state_get_entity_example\",\n      \"params\": [\n        {\n          \"name\": \"entity_identifier\",\n          \"value\": {\n            \"EntityAddr\": \"entity-account-0000000000000000000000000000000000000000000000000000000000000000\"\n          }\n        },\n        {\n          \"name\": \"block_identifier\",\n          \"value\": {\n            \"Hash\": \"0707070707070707070707070707070707070707070707070707070707070707\"\n          }\n        }\n      ],\n      \"result\": {\n        \"name\": \"state_get_entity_example_result\",\n        \"value\": {\n          \"api_version\": \"2.0.0\",\n          \"entity\": {\n            \"AddressableEntity\": {\n              \"entity\": {\n                \"protocol_version\": \"2.0.0\",\n                \"entity_kind\": {\n                  \"Account\": \"account-hash-e94daaff79c2ab8d9c31d9c3058d7d0a0dd31204a5638dc1451fa67b2e3fb88c\"\n                },\n                \"package_hash\": \"package-0000000000000000000000000000000000000000000000000000000000000000\",\n                \"byte_code_hash\": \"byte-code-0000000000000000000000000000000000000000000000000000000000000000\",\n                \"main_purse\": \"uref-09480c3248ef76b603d386f3f4f8a5f87f597d4eaffd475433f861af187ab5db-007\",\n                \"associated_keys\": [\n                  {\n                    \"account_hash\": \"account-hash-e94daaff79c2ab8d9c31d9c3058d7d0a0dd31204a5638dc1451fa67b2e3fb88c\",\n                    \"weight\": 1\n                  }\n                ],\n                \"action_thresholds\": {\n                  \"deployment\": 1,\n                  \"upgrade_management\": 1,\n                  \"key_management\": 1\n                },\n                \"message_topics\": [\n                  {\n                    \"topic_name\": \"topic\",\n                    \"topic_name_hash\": \"0000000000000000000000000000000000000000000000000000000000000000\"\n                  }\n                ]\n              },\n              \"named_keys\": [\n                {\n                  \"name\": \"key\",\n                  \"key\": \"hash-0000000000000000000000000000000000000000000000000000000000000000\"\n                }\n              ],\n              \"entry_points\": [\n                {\n                  \"V1CasperVm\": {\n                    \"name\": \"entry_point\",\n                    \"args\": [],\n                    \"ret\": \"Unit\",\n                    \"access\": \"Public\",\n                    \"entry_point_type\": \"Caller\",\n                    \"entry_point_payment\": \"Caller\"\n                  }\n                }\n              ]\n            }\n          },\n          \"merkle_proof\": \"01000000006ef2e0949ac76e55812421f755abe129b6244fe7168b77f47a72536147614625016ef2e0949ac76e55812421f755abe129b6244fe7168b77f47a72536147614625000000003529cde5c621f857f75f3810611eb4af3f998caaa9d4a3413cf799f99c67db0307010000006ef2e0949ac76e55812421f755abe129b6244fe7168b77f47a7253614761462501010102000000006e06000000000074769d28aac597a36a03a932d4b43e4f10bf0403ee5c41dd035102553f5773631200b9e173e8f05361b681513c14e25e3138639eb03232581db7557c9e8dbbc83ce94500226a9a7fe4f2b7b88d5103a4fc7400f02bf89c860c9ccdd56951a2afe9be0e0267006d820fb5676eb2960e15722f7725f3f8f41030078f8b2e44bf0dc03f71b176d6e800dc5ae9805068c5be6da1a90b2528ee85db0609cc0fb4bd60bbd559f497a98b67f500e1e3e846592f4918234647fca39830b7e1e6ad6f5b7a99b39af823d82ba1873d000003000000010186ff500f287e9b53f823ae1582b1fa429dfede28015125fd233a31ca04d5012002015cc42669a55467a1fdf49750772bfc1aed59b9b085558eb81510e9b015a7c83b0301e3cf4a34b1db6bfa58808b686cb8fe21ebe0c1bcbcee522649d2b135fe510fe3\"\n        }\n      }\n    }\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Response Structure for state_get_dictionary_item in Casper Network\nDESCRIPTION: This example shows the response structure for the state_get_dictionary_item method. It includes the dictionary key, the stored value (a CLValue in this case), and a merkle proof to verify the integrity of the data.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/versioned_docs/version-1.5.X/developers/json-rpc/json-rpc-informational.md#2025-04-22_snippet_19\n\nLANGUAGE: bash\nCODE:\n```\n{\n  \"id\": 1,\n  \"jsonrpc\": \"2.0\",\n  \"result\": {\n    \"api_version\": \"1.4.13\",\n    \"dictionary_key\": \"dictionary-67518854aa916c97d4e53df8570c8217ccc259da2721b692102d76acd0ee8d1f\",\n    \"merkle_proof\": \"01000000006ef2e0949ac76e55812421f755abe129b6244fe7168b77f47a72536147614625016ef2e0949ac76e55812421f755abe129b6244fe7168b77f47a72536147614625000000003529cde5c621f857f75f3810611eb4af3f998caaa9d4a3413cf799f99c67db0307010000006ef2e0949ac76e55812421f755abe129b6244fe7168b77f47a7253614761462501010102000000006e06000000000074769d28aac597a36a03a932d4b43e4f10bf0403ee5c41dd035102553f5773631200b9e173e8f05361b681513c14e25e3138639eb03232581db7557c9e8dbbc83ce94500226a9a7fe4f2b7b88d5103a4fc7400f02bf89c860c9ccdd56951a2afe9be0e0267006d820fb5676eb2960e15722f7725f3f8f41030078f8b2e44bf0dc03f71b176d6e800dc5ae9805068c5be6da1a90b2528ee85db0609cc0fb4bd60bbd559f497a98b67f500e1e3e846592f4918234647fca39830b7e1e6ad6f5b7a99b39af823d82ba1873d000003000000010186ff500f287e9b53f823ae1582b1fa429dfede28015125fd233a31ca04d5012002015cc42669a55467a1fdf49750772bfc1aed59b9b085558eb81510e9b015a7c83b0301e3cf4a34b1db6bfa58808b686cb8fe21ebe0c1bcbcee522649d2b135fe510fe3\",\n    \"stored_value\": {\n      \"CLValue\": {\n        \"bytes\": \"0100000000000000\",\n        \"cl_type\": \"U64\",\n        \"parsed\": 1\n      }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Example Account Details after Key Removal (JSON)\nDESCRIPTION: Illustrates the JSON structure representing account details retrieved from the global state after successfully removing an associated key. The `associated_keys` array no longer contains the entry for the removed key (`account-hash-1fed...`). Other details like thresholds and remaining keys are shown.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/docs/resources/advanced/multi-sig/multi-sig-workflow.md#2025-04-22_snippet_25\n\nLANGUAGE: json\nCODE:\n```\n\"Account\": {\n  \"account_hash\": \"account-hash-1ed5a1c39bea93c105f2d22c965a84b205b36734a377d05dbb103b6bfaa595a7\",\n  \"action_thresholds\": {\n    \"deployment\": 2,\n    \"key_management\": 3\n  },\n  \"associated_keys\": [\n    {\n      \"account_hash\": \"account-hash-04a9691a9f8f05a0f08bd686f188b27c7dbcd644b415759fd3ca043d916ea02f\",\n      \"weight\": 1\n    },\n    {\n      \"account_hash\": \"account-hash-1ed5a1c39bea93c105f2d22c965a84b205b36734a377d05dbb103b6bfaa595a7\",\n      \"weight\": 3\n    },\n    {\n      \"account_hash\": \"account-hash-e2d00525cac31ae2756fb155f289d276c6945b6914923fe275de0cb127bffee7\",\n      \"weight\": 1\n    }\n  ],\n  \"main_purse\": \"uref-8294864177c2c1ec887a11dae095e487b5256ce6bd2a1f2740d0e4f28bd3251c-007\",\n  \"named_keys\": []\n}\n```\n\n----------------------------------------\n\nTITLE: Defining BlockHeight Schema in JSON\nDESCRIPTION: JSON schema definition for the BlockHeight field, which is an unsigned 64-bit integer with a minimum value of 0.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/condor/jsonrpc-comp/rpc-2.0/schema/components.json.md#2025-04-22_snippet_62\n\nLANGUAGE: json\nCODE:\n```\n\"BlockHeight\": {\n    \"type\": \"integer\",\n    \"format\": \"uint64\",\n    \"minimum\": 0.0\n}\n```\n\n----------------------------------------\n\nTITLE: Pulling Specific Casper Node Version via Script - Bash\nDESCRIPTION: This command invokes the pull_casper_node_version.sh script as the casper user to install a specific casper-node version, here shown for version 1.5.8 using the underscore versioning format. Requirements include the script (/etc/casper/pull_casper_node_version.sh) and the casper user. The parameter '1_5_8' must be replaced with the target protocol version. The command creates necessary directories and unpacks the binaries/configuration for the specified casper-node version. Errors may result from missing script files or incorrect version strings.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/docs/operators/setup/basic-node-configuration.md#2025-04-22_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nsudo -u casper /etc/casper/pull_casper_node_version.sh 1_5_8\n```\n\n----------------------------------------\n\nTITLE: Defining JSON Schema for Validator Status Changes in Casper Network\nDESCRIPTION: This JSON schema defines the possible status changes that can occur for validators between eras in the Casper Network. It includes statuses such as 'Added', 'Removed', 'Banned', 'CannotPropose', and 'SeenAsFaulty', each with its specific meaning in the context of validator operations.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/condor/jsonrpc-comp/rpc-2.0/schema/ValidatorChange.json.md#2025-04-22_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"description\": \"A change to a validator's status between two eras.\",\n    \"oneOf\": [\n        {\n            \"description\": \"The validator got newly added to the validator set.\",\n            \"type\": \"string\",\n            \"enum\": [\n                \"Added\"\n            ]\n        },\n        {\n            \"description\": \"The validator was removed from the validator set.\",\n            \"type\": \"string\",\n            \"enum\": [\n                \"Removed\"\n            ]\n        },\n        {\n            \"description\": \"The validator was banned from this era.\",\n            \"type\": \"string\",\n            \"enum\": [\n                \"Banned\"\n            ]\n        },\n        {\n            \"description\": \"The validator was excluded from proposing new blocks in this era.\",\n            \"type\": \"string\",\n            \"enum\": [\n                \"CannotPropose\"\n            ]\n        },\n        {\n            \"description\": \"We saw the validator misbehave in this era.\",\n            \"type\": \"string\",\n            \"enum\": [\n                \"SeenAsFaulty\"\n            ]\n        }\n    ]\n}\n```\n\n----------------------------------------\n\nTITLE: Returning Values from Casper Entry Points\nDESCRIPTION: This snippet demonstrates how to return values from a Casper entry point using the runtime::ret function. This is necessary when the entry point needs to provide data back to the caller.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/docs/resources/moving-to-casper.md#2025-04-22_snippet_1\n\nLANGUAGE: rust\nCODE:\n```\nruntime::ret(value);\n```\n\n----------------------------------------\n\nTITLE: Defining Casper Smart Contract Data Types Schema - JSON\nDESCRIPTION: This JSON snippet outlines a JSON Schema for possible Casper smart contract types, referred to as CLTypes, facilitating their storage and manipulation in smart contracts. Each supported primitive and composite type (including numeric types, system types, Option, List, ByteArray, Result, Map, Tuple, and Any) is described with associated shape and documentation, and system types reference other definitions where appropriate. The schema enables code generation, contract argument validation, and documentation, and requires that $ref points to appropriate subschema locations (such as #/components/schemas/CLType). Limitations include reliance on precise $ref resolution, and the structure assumes a context where components/schemas/CLType is defined.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/condor/jsonrpc-comp/rpc-2.0/schema/CLType.json.md#2025-04-22_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"description\": \"Casper types, i.e. types which can be stored and manipulated by smart contracts.\\n\\nProvides a description of the underlying data type of a [`CLValue`](crate::CLValue).\",\n    \"oneOf\": [\n        {\n            \"description\": \"`bool` primitive.\",\n            \"type\": \"string\",\n            \"enum\": [\n                \"Bool\"\n            ]\n        },\n        {\n            \"description\": \"`i32` primitive.\",\n            \"type\": \"string\",\n            \"enum\": [\n                \"I32\"\n            ]\n        },\n        {\n            \"description\": \"`i64` primitive.\",\n            \"type\": \"string\",\n            \"enum\": [\n                \"I64\"\n            ]\n        },\n        {\n            \"description\": \"`u8` primitive.\",\n            \"type\": \"string\",\n            \"enum\": [\n                \"U8\"\n            ]\n        },\n        {\n            \"description\": \"`u32` primitive.\",\n            \"type\": \"string\",\n            \"enum\": [\n                \"U32\"\n            ]\n        },\n        {\n            \"description\": \"`u64` primitive.\",\n            \"type\": \"string\",\n            \"enum\": [\n                \"U64\"\n            ]\n        },\n        {\n            \"description\": \"[`U128`] large unsigned integer type.\",\n            \"type\": \"string\",\n            \"enum\": [\n                \"U128\"\n            ]\n        },\n        {\n            \"description\": \"[`U256`] large unsigned integer type.\",\n            \"type\": \"string\",\n            \"enum\": [\n                \"U256\"\n            ]\n        },\n        {\n            \"description\": \"[`U512`] large unsigned integer type.\",\n            \"type\": \"string\",\n            \"enum\": [\n                \"U512\"\n            ]\n        },\n        {\n            \"description\": \"`()\" primitive.\",\n            \"type\": \"string\",\n            \"enum\": [\n                \"Unit\"\n            ]\n        },\n        {\n            \"description\": \"`String` primitive.\",\n            \"type\": \"string\",\n            \"enum\": [\n                \"String\"\n            ]\n        },\n        {\n            \"description\": \"[`Key`] system type.\",\n            \"type\": \"string\",\n            \"enum\": [\n                \"Key\"\n            ]\n        },\n        {\n            \"description\": \"[`URef`] system type.\",\n            \"type\": \"string\",\n            \"enum\": [\n                \"URef\"\n            ]\n        },\n        {\n            \"description\": \"[`PublicKey`](crate::PublicKey) system type.\",\n            \"type\": \"string\",\n            \"enum\": [\n                \"PublicKey\"\n            ]\n        },\n        {\n            \"description\": \"`Option` of a `CLType`.\",\n            \"type\": \"object\",\n            \"required\": [\n                \"Option\"\n            ],\n            \"properties\": {\n                \"Option\": {\n                    \"$ref\": \"#/components/schemas/CLType\"\n                }\n            },\n            \"additionalProperties\": false\n        },\n        {\n            \"description\": \"Variable-length list of a single `CLType` (comparable to a `Vec`).\",\n            \"type\": \"object\",\n            \"required\": [\n                \"List\"\n            ],\n            \"properties\": {\n                \"List\": {\n                    \"$ref\": \"#/components/schemas/CLType\"\n                }\n            },\n            \"additionalProperties\": false\n        },\n        {\n            \"description\": \"Fixed-length list of a single `CLType` (comparable to a Rust array).\",\n            \"type\": \"object\",\n            \"required\": [\n                \"ByteArray\"\n            ],\n            \"properties\": {\n                \"ByteArray\": {\n                    \"type\": \"integer\",\n                    \"format\": \"uint32\",\n                    \"minimum\": 0\n                }\n            },\n            \"additionalProperties\": false\n        },\n        {\n            \"description\": \"`Result` with `Ok` and `Err` variants of `CLType`s.\",\n            \"type\": \"object\",\n            \"required\": [\n                \"Result\"\n            ],\n            \"properties\": {\n                \"Result\": {\n                    \"type\": \"object\",\n                    \"required\": [\n                        \"err\",\n                        \"ok\"\n                    ],\n                    \"properties\": {\n                        \"ok\": {\n                            \"$ref\": \"#/components/schemas/CLType\"\n                        },\n                        \"err\": {\n                            \"$ref\": \"#/components/schemas/CLType\"\n                        }\n                    },\n                    \"additionalProperties\": false\n                }\n            },\n            \"additionalProperties\": false\n        },\n        {\n            \"description\": \"Map with keys of a single `CLType` and values of a single `CLType`.\",\n            \"type\": \"object\",\n            \"required\": [\n                \"Map\"\n            ],\n            \"properties\": {\n                \"Map\": {\n                    \"type\": \"object\",\n                    \"required\": [\n                        \"key\",\n                        \"value\"\n                    ],\n                    \"properties\": {\n                        \"key\": {\n                            \"$ref\": \"#/components/schemas/CLType\"\n                        },\n                        \"value\": {\n                            \"$ref\": \"#/components/schemas/CLType\"\n                        }\n                    },\n                    \"additionalProperties\": false\n                }\n            },\n            \"additionalProperties\": false\n        },\n        {\n            \"description\": \"1-ary tuple of a `CLType`.\",\n            \"type\": \"object\",\n            \"required\": [\n                \"Tuple1\"\n            ],\n            \"properties\": {\n                \"Tuple1\": {\n                    \"type\": \"array\",\n                    \"items\": {\n                        \"$ref\": \"#/components/schemas/CLType\"\n                    },\n                    \"maxItems\": 1,\n                    \"minItems\": 1\n                }\n            },\n            \"additionalProperties\": false\n        },\n        {\n            \"description\": \"2-ary tuple of `CLType`s.\",\n            \"type\": \"object\",\n            \"required\": [\n                \"Tuple2\"\n            ],\n            \"properties\": {\n                \"Tuple2\": {\n                    \"type\": \"array\",\n                    \"items\": {\n                        \"$ref\": \"#/components/schemas/CLType\"\n                    },\n                    \"maxItems\": 2,\n                    \"minItems\": 2\n                }\n            },\n            \"additionalProperties\": false\n        },\n        {\n            \"description\": \"3-ary tuple of `CLType`s.\",\n            \"type\": \"object\",\n            \"required\": [\n                \"Tuple3\"\n            ],\n            \"properties\": {\n                \"Tuple3\": {\n                    \"type\": \"array\",\n                    \"items\": {\n                        \"$ref\": \"#/components/schemas/CLType\"\n                    },\n                    \"maxItems\": 3,\n                    \"minItems\": 3\n                }\n            },\n            \"additionalProperties\": false\n        },\n        {\n            \"description\": \"Unspecified type.\",\n            \"type\": \"string\",\n            \"enum\": [\n                \"Any\"\n            ]\n        }\n    ]\n} \n```\n\n----------------------------------------\n\nTITLE: Combined Process ID and Open Files Limit Check Command\nDESCRIPTION: Execute a one-liner bash command to find the process ID and check the current 'nofile' limit simultaneously. This command utilizes command substitution with 'pgrep'. Requires sudo access.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/docs/operators/setup/open-files.md#2025-04-22_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nsudo prlimit -n -p $(pgrep \"casper-node$\")\n```\n\n----------------------------------------\n\nTITLE: Defining TransferV1 Schema in JSON\nDESCRIPTION: Schema definition for TransferV1 object which represents a version 1 transfer from one purse to another. It includes properties for deploy_hash, from, to, source, target, amount, gas, and id with their respective descriptions.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/condor/jsonrpc-comp/rpc-2.0/schema.json.md#2025-04-22_snippet_54\n\nLANGUAGE: json\nCODE:\n```\n\"TransferV1\": {\n  \"description\": \"Represents a version 1 transfer from one purse to another.\",\n  \"type\": \"object\",\n  \"required\": [\n    \"amount\",\n    \"deploy_hash\",\n    \"from\",\n    \"gas\",\n    \"source\",\n    \"target\"\n  ],\n  \"properties\": {\n    \"deploy_hash\": {\n      \"description\": \"Hex-encoded Deploy hash of Deploy that created the transfer.\",\n      \"allOf\": [\n        {\n          \"$ref\": \"#/components/schemas/DeployHash\"\n        }\n      ]\n    },\n    \"from\": {\n      \"description\": \"Account from which transfer was executed\",\n      \"allOf\": [\n        {\n          \"$ref\": \"#/components/schemas/AccountHash\"\n        }\n      ]\n    },\n    \"to\": {\n      \"description\": \"Account to which funds are transferred\",\n      \"anyOf\": [\n        {\n          \"$ref\": \"#/components/schemas/AccountHash\"\n        },\n        {\n          \"type\": \"null\"\n        }\n      ]\n    },\n    \"source\": {\n      \"description\": \"Source purse\",\n      \"allOf\": [\n        {\n          \"$ref\": \"#/components/schemas/URef\"\n        }\n      ]\n    },\n    \"target\": {\n      \"description\": \"Target purse\",\n      \"allOf\": [\n        {\n          \"$ref\": \"#/components/schemas/URef\"\n        }\n      ]\n    },\n    \"amount\": {\n      \"description\": \"Transfer amount\",\n      \"allOf\": [\n        {\n          \"$ref\": \"#/components/schemas/U512\"\n        }\n      ]\n    },\n    \"gas\": {\n      \"description\": \"Gas\",\n      \"allOf\": [\n        {\n          \"$ref\": \"#/components/schemas/U512\"\n        }\n      ]\n    },\n    \"id\": {\n      \"description\": \"User-defined id\",\n      \"type\": [\n        \"integer\",\n        \"null\"\n      ],\n      \"format\": \"uint64\",\n      \"minimum\": 0.0\n    }\n  },\n  \"additionalProperties\": false\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a Tar Archive with Specified Block Size and Sparse Handling\nDESCRIPTION: Uses the `tar` command with a specified block size (`-b 4096`) for potentially better performance on some systems. It creates an archive (`-c`) of the current directory (`.`), provides verbose output (`-v`), and handles sparse files (`--sparse`).\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/docs/operators/maintenance/archiving-and-restoring.md#2025-04-22_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\ntar -b 4096 -cv --sparse .\n```\n\n----------------------------------------\n\nTITLE: Retrieving State Root Hash using Casper Client\nDESCRIPTION: Command to get the current state root hash from a Casper network node, which is required for subsequent state queries.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/versioned_docs/version-1.5.X/resources/beginner/counter-testnet/walkthrough.md#2025-04-22_snippet_12\n\nLANGUAGE: bash\nCODE:\n```\ncasper-client get-state-root-hash --node-address http://[NODE_IP]:7777\n```\n\n----------------------------------------\n\nTITLE: Retrieving Deploy Status via Casper-Client CLI - Rust\nDESCRIPTION: This snippet retrieves the execution result and status of a deploy previously submitted to the Casper network. It uses the get-deploy command, requiring both the node address and the deploy hash (as returned by put-deploy) to locate and fetch deploy details. Appropriate for tracking success, failure, or pending state of deployments.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/versioned_docs/version-2.0.0/resources/beginner/counter-testnet/commands.md#2025-04-22_snippet_5\n\nLANGUAGE: rust\nCODE:\n```\ncasper-client get-deploy \\\n    --node-address [NODE_SERVER_ADDRESS] \\\n    [DEPLOY_HASH]\n```\n\n----------------------------------------\n\nTITLE: Activating the NCTL Environment\nDESCRIPTION: Command to activate the NCTL environment, making NCTL commands available in the current terminal session.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/versioned_docs/version-2.0.0/developers/dapps/setup-nctl.md#2025-04-22_snippet_20\n\nLANGUAGE: bash\nCODE:\n```\n$ source casper-node/utils/nctl/activate\n```\n\n----------------------------------------\n\nTITLE: Installing Developer Tools on MacOS\nDESCRIPTION: Commands to install and verify gcc/g++ compiler tools on MacOS.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/versioned_docs/version-1.5.X/developers/dapps/setup-nctl.md#2025-04-22_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\nxcode-select --install\ngcc --version\ng++ --version\n```\n\n----------------------------------------\n\nTITLE: Installing SSL Dev Library on Linux\nDESCRIPTION: Command to install SSL development library on Linux using apt.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/versioned_docs/version-1.5.X/developers/dapps/setup-nctl.md#2025-04-22_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\nsudo apt install libssl-dev\n```\n\n----------------------------------------\n\nTITLE: Global State Query Command\nDESCRIPTION: Bash command to query the global state of a Casper network node for a specific hash key's message value.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/versioned_docs/version-1.5.X/resources/advanced/cross-contract.md#2025-04-22_snippet_31\n\nLANGUAGE: bash\nCODE:\n```\ncasper-client query-global-state \\\n  --node-address http://136.243.187.84:7777 \\\n  --state-root-hash 2f3e100324deb999107229dbec5c4b724653174328c99ea0836931248c3cc9cb \\\n  --key hash-b7a06298cc71d4cac05929cc0713dfd5a541c68b71cb500cd04547b5cd0385ea -q \"message\"\n```\n\n----------------------------------------\n\nTITLE: Defining JSON Schema for Initial Release Configuration in Casper Network\nDESCRIPTION: This JSON schema defines the structure for initial release configuration. It requires an initial_release_timestamp_millis property (uint64) and can include an optional locked_amounts array containing exactly 14 items of type U512. Additional properties are not allowed.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/condor/jsonrpc-comp/rpc-2.0/schema/VestingSchedule.json.md#2025-04-22_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"type\": \"object\",\n    \"required\": [\n        \"initial_release_timestamp_millis\"\n    ],\n    \"properties\": {\n        \"initial_release_timestamp_millis\": {\n            \"type\": \"integer\",\n            \"format\": \"uint64\",\n            \"minimum\": 0\n        },\n        \"locked_amounts\": {\n            \"type\": [\n                \"array\",\n                \"null\"\n            ],\n            \"items\": {\n                \"$ref\": \"#/components/schemas/U512\"\n            },\n            \"maxItems\": 14,\n            \"minItems\": 14\n        }\n    },\n    \"additionalProperties\": false\n}\n```\n\n----------------------------------------\n\nTITLE: Retrieving Account Information\nDESCRIPTION: Command to get account information including NamedKeys and ContractHash using node address and public key\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/versioned_docs/version-1.5.X/developers/dapps/nctl-test.md#2025-04-22_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\n$(get_path_to_client) get-account-info \\\n--node-address http://localhost:11101 \\\n--public-key /casper/casper-node/utils/nctl/assets/net-1/nodes/node-1/keys/public_key.pem\n```\n\n----------------------------------------\n\nTITLE: Incrementing the Counter using Session Code in Bash\nDESCRIPTION: Command to increment the counter using the counter-call session code instead of directly calling the entry point. This deploys the session code that interacts with the counter contract.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/versioned_docs/version-1.5.X/resources/beginner/counter/walkthrough.md#2025-04-22_snippet_12\n\nLANGUAGE: bash\nCODE:\n```\ncasper-client put-deploy \\\n    --node-address http://localhost:11101 \\\n    --chain-name casper-net-1 \\\n    --secret-key [PATH_TO_YOUR_KEY]/secret_key.pem \\\n    --payment-amount [PAYMENT_AMOUNT_IN_MOTES] \\\n    --session-path ./counter/counter-call/target/wasm32-unknown-unknown/release/counter-call.wasm\n```\n\n----------------------------------------\n\nTITLE: Staging Protocol Versions using node_util.py (Bash)\nDESCRIPTION: Illustrates how to use the `node_util.py` script (part of `casper-node-launcher`) to download and stage protocol files (binaries and configurations) for a specified network using its configuration file (e.g., `our-network.conf`). This command fetches files based on the `protocol_versions` list obtained from the `SOURCE_URL` defined in the network config file.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/docs/operators/setup-network/staging-files-for-new-network.md#2025-04-22_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nsudo -u casper /etc/casper/node_util.py stage_protocols our-network.conf\n```\n\n----------------------------------------\n\nTITLE: Executing Session Code via Test Builder in Casper Tests (Rust)\nDESCRIPTION: Invokes the `exec` method on the `InMemoryWasmTestBuilder` instance, passing the constructed `execute_request`. It asserts that the execution succeeds using `expect_success()` and then commits the resulting state changes.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/versioned_docs/version-1.5.X/developers/writing-onchain-code/testing-session-code.md#2025-04-22_snippet_9\n\nLANGUAGE: rust\nCODE:\n```\n    builder.exec(execute_request).expect_success().commit();\n```\n\n----------------------------------------\n\nTITLE: Installing Rust nightly toolchain\nDESCRIPTION: Install the nightly Rust toolchain, required for compiling the Casper client from source.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/versioned_docs/version-2.0.0/developers/prerequisites.md#2025-04-22_snippet_18\n\nLANGUAGE: bash\nCODE:\n```\nrustup toolchain install nightly\n```\n\n----------------------------------------\n\nTITLE: Importing Builders and Constants for Casper Contract Testing\nDESCRIPTION: This snippet demonstrates how to import necessary builders and constants from the Casper test support crate and define custom types and constants for use in contract tests.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/versioned_docs/version-2.0.0/developers/writing-onchain-code/testing-contracts.md#2025-04-22_snippet_2\n\nLANGUAGE: rust\nCODE:\n```\nuse casper_engine_test_support::\n    ExecuteRequestBuilder, InMemoryWasmTestBuilder, DEFAULT_ACCOUNT_ADDR,\n    DEFAULT_RUN_GENESIS_REQUEST,\n};\nuse casper_types::{runtime_args, ContractHash, RuntimeArgs};\n\nconst COUNTER_V1_WASM: &str = \"counter-v1.wasm\";\nconst COUNTER_V2_WASM: &str = \"counter-v2.wasm\";\nconst COUNTER_CALL_WASM: &str = \"counter-call.wasm\";\n\nconst CONTRACT_KEY: &str = \"counter\";\nconst COUNT_KEY: &str = \"count\";\nconst CONTRACT_VERSION_KEY: &str = \"version\";\n\nconst ENTRY_POINT_COUNTER_DECREMENT: &str = \"counter_decrement\";\nconst ENTRY_POINT_COUNTER_INC: &str = \"counter_inc\";\n```\n\n----------------------------------------\n\nTITLE: Transform Types and State Operations Documentation\nDESCRIPTION: Comprehensive documentation of transformation types (V1 and V2) and their operations on the Casper Network global state, including validator management, state modifications, and numeric type definitions.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/versioned_docs/version-2.0.0/developers/json-rpc/types_chain.md#2025-04-22_snippet_2\n\nLANGUAGE: markdown\nCODE:\n```\n## TransformV1\n\nA transformation performed while executing a Deploy.\n\nRequired Parameters:\n\n* `key` The formatted string of the `Key`.\n\n* [`transforms`](#transformkindv1) The transformation.\n\n## TransformV2\n\nA transformation performed while executing a Deploy.\n\nRequired Parameters:\n\n* `key` The formatted string of the `Key`.\n\n* [`kind`](#transformkindv2) The transformation.\n```\n\n----------------------------------------\n\nTITLE: Example Request for state_get_dictionary_item RPC Method (JSON)\nDESCRIPTION: An example JSON payload illustrating the parameters required for the `state_get_dictionary_item` RPC call on the Casper Network. It includes the `state_root_hash` and the `dictionary_identifier`, which specifies the URef of the dictionary and the specific key within that dictionary.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/condor/jsonrpc-comp/rpc-1.5/schema.json.md#2025-04-22_snippet_5\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"state_root_hash\": \"0808080808080808080808080808080808080808080808080808080808080808\",\n  \"dictionary_identifier\": {\n    \"URef\": {\n      \"seed_uref\": \"uref-09480c3248ef76b603d386f3f4f8a5f87f597d4eaffd475433f861af187ab5db-007\",\n      \"dictionary_item_key\": \"a_unique_entry_identifier\"\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Chainspec RPC Schema\nDESCRIPTION: JSON schema defining the response structure for the info_get_chainspec RPC endpoint, which returns chainspec file bytes.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/condor/jsonrpc-comp/rpc-2.0/schema.json.md#2025-04-22_snippet_18\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"description\": \"Result for the \\\"info_get_chainspec\\\" RPC.\",\n  \"type\": \"object\",\n  \"required\": [\n    \"api_version\",\n    \"chainspec_bytes\"\n  ],\n  \"properties\": {\n    \"api_version\": {\n      \"description\": \"The RPC API version.\",\n      \"type\": \"string\"\n    },\n    \"chainspec_bytes\": {\n      \"description\": \"The chainspec file bytes.\",\n      \"$ref\": \"#/components/schemas/ChainspecRawBytes\"\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Key Type Examples in Markdown Table Format\nDESCRIPTION: Table showing various key types with their prefixes and example values used in the Casper Network.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/docs/concepts/key-types.md#2025-04-22_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n|Type|Prefix|Example|\n|---|---|---|\n|Key::Account | account-hash-| account-hash-ef4687f74d465826239bab05c4e1bdd2223dd8c201b96f361f775125e624ef70|\n|Key::Hash | hash- | hash-0101010101010101010101010101010101010101010101010101010101010101|\n|Key::URef | uref- | uref-0101010101010101010101010101010101010101010101010101010101010101-001|\n|Key::Transfer | transfer- | transfer-0101010101010101010101010101010101010101010101010101010101010101|\n```\n\n----------------------------------------\n\nTITLE: Account Structure After CEP-18 Contracts Installation\nDESCRIPTION: JSON representation of an account after installing both the CEP-18 main contract and helper contract. It shows the named keys that reference the installed contracts, the account's main purse, associated keys, and action thresholds.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/versioned_docs/version-1.5.X/resources/tokens/cep18/quickstart-guide.md#2025-04-22_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n{\n\t\"src\": {\n\t\"Account\": {\n\t\"_accountHash\": \"account-hash-303c0f8208220fe9a4de40e1ada1d35fdd6c678877908f01fddb2a56502d67fd\",\n\t\"namedKeys\": [\n\t\t{\n\t\t\"name\": \"cep18_test_contract\",\n\t\t\"key\": \"hash-999326ca8408dfd37da023eb6fd82f174151be64f83f9fb837632a0d69fd4c7e\"\n\t\t},\n\t\t{\n\t\t\"name\": \"cep18_token_contract\",\n\t\t\"key\": \"hash-b568f50a64acc8bbe43462ffe243849a88111060b228dacb8f08d42e26985180\"\n\t\t},\n\t],\n\t\"mainPurse\": \"uref-6c062525debdee18d5cad083ca530fcb65ef8741574fba4c97673f4ed00093f7-007\",\n\t\"associatedKeys\": [\n\t\t{\n\t\t\"accountHash\": \"account-hash-303c0f8208220fe9a4de40e1ada1d35fdd6c678877908f01fddb2a56502d67fd\",\n\t\t\"weight\": 1\n\t\t}\n\t],\n\t\"actionThresholds\": {\n\t\t\"deployment\": 1,\n\t\t\"keyManagement\": 1\n\t\t}\n\t\t}\n\t}\n}\n```\n\n----------------------------------------\n\nTITLE: SSE HTTP Event Stream Server Address - Markdown\nDESCRIPTION: Lists the SSE HTTP event stream server's address in the `config.toml` file, using port 9999. Handles server-sent event streams for node communication.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/versioned_docs/version-1.5.X/operators/setup/node-endpoints.md#2025-04-22_snippet_3\n\nLANGUAGE: Markdown\nCODE:\n```\naddress = '0.0.0.0:9999'\n```\n\n----------------------------------------\n\nTITLE: Global State Query Response\nDESCRIPTION: JSON response from the global state query showing the stored CLValue with its bytes, type, and parsed string value.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/versioned_docs/version-1.5.X/resources/advanced/cross-contract.md#2025-04-22_snippet_32\n\nLANGUAGE: bash\nCODE:\n```\n{\n  \"id\": -5477027327608594231,\n  \"jsonrpc\": \"2.0\",\n  \"result\": {\n    \"api_version\": \"1.4.13\",\n    \"block_header\": null,\n    \"merkle_proof\": \"[61444 hex chars]\",\n    \"stored_value\": {\n      \"CLValue\": {\n        \"bytes\": \"1200000048656c6c6f206e6577206d65737361676521\",\n        \"cl_type\": \"String\",\n        \"parsed\": \"Hello new message!\"\n      }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Validator's Status Changes in JSON\nDESCRIPTION: This JSON schema defines the structure for tracking status changes in a validator, with required fields such as 'public_key' and 'status_changes'. The 'public_key' must adhere to a predefined format, and the 'status_changes' is an array of specific status change events. This schema forbids additional properties beyond those defined.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/condor/jsonrpc-comp/rpc-1.5/schema/JsonValidatorChanges.json.md#2025-04-22_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"description\": \"The changes in a validator's status.\",\n    \"type\": \"object\",\n    \"required\": [\n        \"public_key\",\n        \"status_changes\"\n    ],\n    \"properties\": {\n        \"public_key\": {\n            \"description\": \"The public key of the validator.\",\n            \"allOf\": [\n                {\n                    \"$ref\": \"#/components/schemas/PublicKey\"\n                }\n            ]\n        },\n        \"status_changes\": {\n            \"description\": \"The set of changes to the validator's status.\",\n            \"type\": \"array\",\n            \"items\": {\n                \"$ref\": \"#/components/schemas/JsonValidatorStatusChange\"\n            }\n        }\n    },\n    \"additionalProperties\": false\n}\n```\n\n----------------------------------------\n\nTITLE: Cloning and Configuring Casper Node Repository\nDESCRIPTION: This snippet demonstrates how to clone the Casper Node repository and checkout the specific release for Condor compatibility.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/src/pages/condor/setting-up-condor-local.md#2025-04-22_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ngit clone https://github.com/casper-network/casper-node.git\ncd casper-node\ngit checkout release-2.0.0-rc3\n```\n\n----------------------------------------\n\nTITLE: Navigating to the Project Root Directory\nDESCRIPTION: A simple command to change the current directory back to the parent directory, typically the project's root, after cloning and building the delegate contract within the `casper-node` subdirectory.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/docs/developers/dapps/sdk/client-library-usage.md#2025-04-22_snippet_11\n\nLANGUAGE: bash\nCODE:\n```\ncd ../\n```\n\n----------------------------------------\n\nTITLE: Retrieving State Root Hash using Casper-Client\nDESCRIPTION: This Bash command retrieves the state root hash of the current network state using `casper-client`. It can be used to check the current global state of the network, requiring the node address as a parameter.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/versioned_docs/version-2.0.0/resources/advanced/cross-contract.md#2025-04-22_snippet_18\n\nLANGUAGE: Bash\nCODE:\n```\ncasper-client get-state-root-hash --node-address http://136.243.187.84:7777\n```\n\n----------------------------------------\n\nTITLE: Defining Casper Network RPC Method chain_get_block in JSON\nDESCRIPTION: This JSON object defines the `chain_get_block` RPC method for the Casper Network. It specifies the method name, a summary, an optional `block_identifier` parameter referencing the `BlockIdentifier` schema, and the expected result structure (`chain_get_block_result`) which includes the `api_version` and `block_with_signatures` (referencing `JsonBlockWithSignatures` or null). An example demonstrates retrieving a block by its hash and shows the corresponding detailed response structure including block header, body, and proofs.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/condor/jsonrpc-comp/rpc-2.0/chain_get_block.json.md#2025-04-22_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"name\": \"chain_get_block\",\n  \"summary\": \"returns a Block from the network\",\n  \"params\": [\n    {\n      \"name\": \"block_identifier\",\n      \"schema\": {\n        \"description\": \"The block identifier.\",\n        \"$ref\": \"#/components/schemas/BlockIdentifier\"\n      },\n      \"required\": false\n    }\n  ],\n  \"result\": {\n    \"name\": \"chain_get_block_result\",\n    \"schema\": {\n      \"description\": \"Result for \\\"chain_get_block\\\" RPC response.\",\n      \"type\": \"object\",\n      \"required\": [\n        \"api_version\"\n      ],\n      \"properties\": {\n        \"api_version\": {\n          \"description\": \"The RPC API version.\",\n          \"type\": \"string\"\n        },\n        \"block_with_signatures\": {\n          \"description\": \"The block, if found.\",\n          \"anyOf\": [\n            {\n              \"$ref\": \"#/components/schemas/JsonBlockWithSignatures\"\n            },\n            {\n              \"type\": \"null\"\n            }\n          ]\n        }\n      },\n      \"additionalProperties\": false\n    }\n  },\n  \"examples\": [\n    {\n      \"name\": \"chain_get_block_example\",\n      \"params\": [\n        {\n          \"name\": \"block_identifier\",\n          \"value\": {\n            \"Hash\": \"0744fcb72af43c5cc372039bc5a8bfee48808a9ce414acc0d6338a628c20eb42\"\n          }\n        }\n      ],\n      \"result\": {\n        \"name\": \"chain_get_block_example_result\",\n        \"value\": {\n          \"api_version\": \"2.0.0\",\n          \"block_with_signatures\": {\n            \"block\": {\n              \"Version2\": {\n                \"hash\": \"0744fcb72af43c5cc372039bc5a8bfee48808a9ce414acc0d6338a628c20eb42\",\n                \"header\": {\n                  \"parent_hash\": \"0707070707070707070707070707070707070707070707070707070707070707\",\n                  \"state_root_hash\": \"0808080808080808080808080808080808080808080808080808080808080808\",\n                  \"body_hash\": \"48859fb4865d8637d6a35cb224e222cd0e1b1c2dd72928932c1e35ac0550818b\",\n                  \"random_bit\": true,\n                  \"accumulated_seed\": \"ac979f51525cfd979b14aa7dc0737c5154eabe0db9280eceaa8dc8d2905b20d5\",\n                  \"era_end\": {\n                    \"equivocators\": [\n                      \"013b6a27bcceb6a42d62a3a8d02a6f0d73653215771de243a63ac048a18b59da29\"\n                    ],\n                    \"inactive_validators\": [\n                      \"018139770ea87d175f56a35466c34c7ecccb8d8a91b4ee37a25df60f5b8fc9b394\"\n                    ],\n                    \"next_era_validator_weights\": [\n                      {\n                        \"validator\": \"013b6a27bcceb6a42d62a3a8d02a6f0d73653215771de243a63ac048a18b59da29\",\n                        \"weight\": \"123\"\n                      },\n                      {\n                        \"validator\": \"016e7a1cdd29b0b78fd13af4c5598feff4ef2a97166e3ca6f2e4fbfccd80505bf1\",\n                        \"weight\": \"456\"\n                      },\n                      {\n                        \"validator\": \"018a875fff1eb38451577acd5afee405456568dd7c89e090863a0557bc7af49f17\",\n                        \"weight\": \"789\"\n                      }\n                    ],\n                    \"rewards\": {},\n                    \"next_era_gas_price\": 1\n                  },\n                  \"timestamp\": \"2020-11-17T00:39:24.072Z\",\n                  \"era_id\": 1,\n                  \"height\": 10,\n                  \"protocol_version\": \"1.0.0\",\n                  \"proposer\": \"01d9bf2148748a85c89da5aad8ee0b0fc2d105fd39d41a4c796536354f0ae2900c\",\n                  \"current_gas_price\": 1,\n                  \"last_switch_block_hash\": \"0a0a0a0a0a0a0a0a0a0a0a0a0a0a0a0a0a0a0a0a0a0a0a0a0a0a0a0a0a0a0a0a\"\n                },\n                \"body\": {\n                  \"transactions\": {\n                    \"0\": [\n                      {\n                        \"Version1\": \"1414141414141414141414141414141414141414141414141414141414141414\"\n                      }\n                    ],\n                    \"1\": [\n                      {\n                        \"Version1\": \"1515151515151515151515151515151515151515151515151515151515151515\"\n                      }\n                    ],\n                    \"2\": [\n                      {\n                        \"Version1\": \"1616161616161616161616161616161616161616161616161616161616161616\"\n                      }\n                    ],\n                    \"3\": [\n                      {\n                        \"Version1\": \"1717171717171717171717171717171717171717171717171717171717171717\"\n                      }\n                    ]\n                  },\n                  \"rewarded_signatures\": []\n                }\n              }\n            },\n            \"proofs\": [\n              {\n                \"public_key\": \"01d9bf2148748a85c89da5aad8ee0b0fc2d105fd39d41a4c796536354f0ae2900c\",\n                \"signature\": \"01e18ca03d2ef0238a6a2460a222e0b818406bda99d4c05502c80232013559b926d1c8bca6bf65386f54a847d7850cb76c0c5fd5e633c34c749b8b9958a638d806\"\n              }\n            ]\n          }\n        }\n      }\n    }\n  ]\n}\n \n```\n\n----------------------------------------\n\nTITLE: Starting Casper Node with Decompressed Database\nDESCRIPTION: Procedure to start a Casper node using a decompressed database, including running the node_util.py script to set the protocol version. This command ensures the node runs the correct protocol version matching the database.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/versioned_docs/version-1.5.X/operators/maintenance/archiving-and-restoring.md#2025-04-22_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\nsudo /etc/casper/node_util.py force_run_version 1_4_5\n```\n\n----------------------------------------\n\nTITLE: Installing Casper JS SDK with npm or yarn - Bash\nDESCRIPTION: This snippet demonstrates installation of the Casper JavaScript SDK using npm and yarn. You need Node.js and either npm or yarn installed. No input parameters are necessary; simply run the commands to install the SDK. Outputs node dependency installation to your project.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/versioned_docs/version-1.5.X/developers/dapps/sdk/client-library-usage.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm install casper-js-sdk\n```\n\nLANGUAGE: bash\nCODE:\n```\nyarn install casper-js-sdk\n```\n\n----------------------------------------\n\nTITLE: Querying the Full Contract Details using Contract Hash\nDESCRIPTION: Command to query the full details of the CEP-18 utility contract using its contract hash derived from the previous query. This retrieves all named keys and entry points of the contract.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/versioned_docs/version-1.5.X/resources/tokens/cep18/query.md#2025-04-22_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\ncasper-client query-global-state -n http://<HOST IP>:<PORT> \\\n--key hash-a8fe057675930f0951d45816c55615228ac8af2b7b231788278dffcf1dd8c0ca \\\n--state-root-hash f9f73c3a4da5893b67c4cac94a5695d76cfefff61b050c98a7b19e2b8efd3933\n```\n\n----------------------------------------\n\nTITLE: Defining ValidatorBid Schema in JSON\nDESCRIPTION: This schema defines the structure of a ValidatorBid object, which represents an entry in the validator map. It includes properties such as validator public key, bonding purse, staked amount, and delegation rate.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/condor/jsonrpc-comp/rpc-2.0/schema/components.json.md#2025-04-22_snippet_40\n\nLANGUAGE: JSON\nCODE:\n```\n\"ValidatorBid\": {\n  \"description\": \"An entry in the validator map.\",\n  \"type\": \"object\",\n  \"required\": [\n    \"bonding_purse\",\n    \"delegation_rate\",\n    \"inactive\",\n    \"staked_amount\",\n    \"validator_public_key\"\n  ],\n  \"properties\": {\n    \"validator_public_key\": {\n      \"description\": \"Validator public key\",\n      \"allOf\": [\n        {\n          \"$ref\": \"#/components/schemas/PublicKey\"\n        }\n      ]\n    },\n    \"bonding_purse\": {\n      \"description\": \"The purse that was used for bonding.\",\n      \"allOf\": [\n        {\n          \"$ref\": \"#/components/schemas/URef\"\n        }\n      ]\n    },\n    \"staked_amount\": {\n      \"description\": \"The amount of tokens staked by a validator (not including delegators).\",\n      \"allOf\": [\n        {\n          \"$ref\": \"#/components/schemas/U512\"\n        }\n      ]\n    },\n    \"delegation_rate\": {\n      \"description\": \"Delegation rate\",\n      \"type\": \"integer\",\n      \"format\": \"uint8\",\n      \"minimum\": 0.0\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Decreasing CEP-18 Allowance using Casper Client - Bash (No Comments)\nDESCRIPTION: This bash command invokes the decrease_allowance entry point in a CEP-18 token contract, omitting all comments. The command decreases the spendable balance for a specified spender by a defined amount, with required parameters for account and chain credentials. Useful for reducing existing allowance authorizations.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/versioned_docs/version-2.0.0/resources/tokens/cep18/transfer.md#2025-04-22_snippet_19\n\nLANGUAGE: bash\nCODE:\n```\ncasper-client put-deploy -n http://<NODE IP>:<PORT> \\\n--secret-key ~/casper/demo/user_a/secret_key.pem \\\n--session-package-name \"cep18_contract_package_CEP18\" \\\n--session-entry-point \"decrease_allowance\" \\\n--session-arg \"spender:key='account-hash-683f53f56926f54ef9584b07585b025c68415dc05f7b2e56749153574b83d5cd'\" \\\n--session-arg \"amount:U256='10'\" \\\n--chain-name <CHAIN NAME> \\\n--payment-amount 1000000000\n```\n\n----------------------------------------\n\nTITLE: Defining Named Key JSON Schema - JSON\nDESCRIPTION: This JSON snippet implements a schema for a named key, specifying the necessary structure for objects consisting of a 'name' and a 'key', both required and of type string. Designed to be used with JSON Schema validation libraries or tools, it enforces that no additional properties are allowed beyond the two defined, and that each property includes descriptive metadata. Inputs must provide both 'name' (the entry's label) and 'key' (the Casper Key value), ensuring compliant object definitions for downstream processing.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/condor/jsonrpc-comp/rpc-1.5/schema/NamedKey.json.md#2025-04-22_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"description\": \"A named key.\",\n    \"type\": \"object\",\n    \"required\": [\n        \"key\",\n        \"name\"\n    ],\n    \"properties\": {\n        \"name\": {\n            \"description\": \"The name of the entry.\",\n            \"type\": \"string\"\n        },\n        \"key\": {\n            \"description\": \"The value of the entry: a casper `Key` type.\",\n            \"type\": \"string\"\n        }\n    },\n    \"additionalProperties\": false\n} \n```\n\n----------------------------------------\n\nTITLE: Installing pip on MacOS\nDESCRIPTION: Commands to download and install pip package manager for Python 3 on MacOS systems.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/docs/developers/dapps/setup-nctl.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n$ curl https://bootstrap.pypa.io/get-pip.py -o get-pip.py\n$ python3 get-pip.py\n```\n\n----------------------------------------\n\nTITLE: Rust Code Sample for Casper Contract\nDESCRIPTION: Example of Rust code showing constant definitions and imports for a Casper smart contract implementation.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/README/STANDARDS.md#2025-04-22_snippet_3\n\nLANGUAGE: rust\nCODE:\n```\nuse std::path::PathBuf;\nconst MY_ACCOUNT: [u8; 32] = [7u8; 32];\nconst KEY: &str = \"my-key-name\";\nconst VALUE: &str = \"hello world\";\nconst RUNTIME_ARG_NAME: &str = \"message\";\nconst CONTRACT_WASM: &str = \"contract.wasm\";\n```\n\n----------------------------------------\n\nTITLE: Defining Schema for Versioned Transaction or Deploy - JSON\nDESCRIPTION: This schema provides a versioned wrapper structure allowing an object to be either a deploy or a version 1 transaction, enforcing required keys (\"Deploy\" or \"Version1\") and restricting properties to their respective schemas via $ref mechanism. Dependencies include the presence of schema definitions for \"Deploy\" and \"TransactionV1\" within a broader JSON schema under components/schemas. This definition is intended for data validation and transfer across systems requiring strict type and version conformance.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/condor/jsonrpc-comp/rpc-2.0/schema/Transaction.json.md#2025-04-22_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"description\": \"A versioned wrapper for a transaction or deploy.\",\n    \"oneOf\": [\n        {\n            \"description\": \"A deploy.\",\n            \"type\": \"object\",\n            \"required\": [\n                \"Deploy\"\n            ],\n            \"properties\": {\n                \"Deploy\": {\n                    \"$ref\": \"#/components/schemas/Deploy\"\n                }\n            },\n            \"additionalProperties\": false\n        },\n        {\n            \"description\": \"A version 1 transaction.\",\n            \"type\": \"object\",\n            \"required\": [\n                \"Version1\"\n            ],\n            \"properties\": {\n                \"Version1\": {\n                    \"$ref\": \"#/components/schemas/TransactionV1\"\n                }\n            },\n            \"additionalProperties\": false\n        }\n    ]\n} \n```\n\n----------------------------------------\n\nTITLE: Defining JSON Schema for Group Object with Required Properties\nDESCRIPTION: This JSON snippet defines a schema for an object. It mandates the presence of 'group_name', which references the '#/components/schemas/Group' schema, and 'group_users', which must be an array of unique items conforming to the '#/components/schemas/URef' schema. This schema enforces the structure for representing a group and its associated user references.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/condor/jsonrpc-comp/rpc-2.0/schema/NamedUserGroup.json.md#2025-04-22_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"type\": \"object\",\n    \"required\": [\n        \"group_name\",\n        \"group_users\"\n    ],\n    \"properties\": {\n        \"group_name\": {\n            \"allOf\": [\n                {\n                    \"$ref\": \"#/components/schemas/Group\"\n                }\n            ]\n        },\n        \"group_users\": {\n            \"type\": \"array\",\n            \"items\": {\n                \"$ref\": \"#/components/schemas/URef\"\n            },\n            \"uniqueItems\": true\n        }\n    }\n} \n```\n\n----------------------------------------\n\nTITLE: Defining Validator Weight Schema - JSON\nDESCRIPTION: This snippet declares a JSON schema for an object that represents a validator-weight pair, referencing external schemas for the 'validator' and 'weight' fields. Dependencies include schema definitions for 'PublicKey' and 'U512' which must be available in '#/components/schemas/'. Both 'validator' and 'weight' are mandatory, and additional properties are disallowed to enforce structure. Inputs must provide the required fields; outputs will be validated JSON objects or error responses if validation fails. It is constrained to strictly require the two specified fields.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/condor/jsonrpc-comp/rpc-1.5/schema/ValidatorWeight.json.md#2025-04-22_snippet_0\n\nLANGUAGE: JSON\nCODE:\n```\n{\\n    \\\"type\\\": \\\"object\\\",\\n    \\\"required\\\": [\\n        \\\"validator\\\",\\n        \\\"weight\\\"\\n    ],\\n    \\\"properties\\\": {\\n        \\\"validator\\\": {\\n            \\\"$ref\\\": \\\"#/components/schemas/PublicKey\\\"\\n        },\\n        \\\"weight\\\": {\\n            \\\"$ref\\\": \\\"#/components/schemas/U512\\\"\\n        }\\n    },\\n    \\\"additionalProperties\\\": false\\n}\n```\n\n----------------------------------------\n\nTITLE: Installing Zstandard Compression Tool\nDESCRIPTION: Command to install the Zstandard compression utility on Ubuntu systems.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/versioned_docs/version-2.0.0/operators/maintenance/archiving-and-restoring.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nsudo apt install zstd\n```\n\n----------------------------------------\n\nTITLE: Viewing Secp256k1 Public Key Contents\nDESCRIPTION: Command to display the hexadecimal-encoded public key for Secp256k1 keys, which starts with '02' and is 68 bytes long.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/versioned_docs/version-1.5.X/concepts/accounts-and-keys.md#2025-04-22_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\ncat secp256k1-keys/public_key_hex\n```\n\n----------------------------------------\n\nTITLE: Defining JSON Schema for Validator Data in Casper Network\nDESCRIPTION: This schema defines the structure of a validator object, including properties such as delegation rate, delegators array, and inactive status. It specifies required fields and data types for each property.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/condor/jsonrpc-comp/rpc-1.5/schema.json.md#2025-04-22_snippet_63\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"delegation_rate\": {\n    \"description\": \"The delegation rate.\",\n    \"type\": \"integer\",\n    \"format\": \"uint8\",\n    \"minimum\": 0.0\n  },\n  \"delegators\": {\n    \"description\": \"The delegators.\",\n    \"type\": \"array\",\n    \"items\": {\n      \"$ref\": \"#/components/schemas/JsonDelegator\"\n    }\n  },\n  \"inactive\": {\n    \"description\": \"Is this an inactive validator.\",\n    \"type\": \"boolean\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Querying Casper Deploy Status - Bash\nDESCRIPTION: This Bash command uses the casper-client CLI to query the status of a deploy on the Casper blockchain by specifying a node address and a deploy hash. It requires the casper-client binary to be installed and network connectivity to a running Casper node (specified by [NODE_SERVER_ADDRESS]). The main parameters are the node's address and the deploy hash, producing output with execution status, transfer address, and block hash included in the result.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/docs/developers/cli/transfers/direct-token-transfer.md#2025-04-22_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\ncasper-client get-deploy \\\n--node-address [NODE_SERVER_ADDRESS] [DEPLOY_HASH]\n```\n\n----------------------------------------\n\nTITLE: Example Event Stream Replay Command\nDESCRIPTION: Concrete example of replaying events from a specific node and event ID.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/versioned_docs/version-2.0.0/operators/setup/node-events.md#2025-04-22_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\ncurl -sN http://65.21.235.219:9999/events?start_from=29267508\n```\n\n----------------------------------------\n\nTITLE: Defining Dictionary Item Lookup Options - JSON Schema - JSON\nDESCRIPTION: This JSON Schema describes alternative ways (AccountNamedKey, ContractNamedKey, EntityNamedKey, URef, or Dictionary key) to specify how a dictionary item can be retrieved in the Casper Network's APIs. It constrains each lookup option to require certain fields and types, aiding API consumers in formulating valid query objects. The schema acts as a blueprint for validation and documentation, ensuring that correct type combinations are enforced based on the intended lookup method. Dependencies: JSON Schema consumers/parsers. All keys and required values must be provided as described, and no additional properties are allowed. Input objects must match one of the enumerated forms and provide corresponding keys/values for each variant.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/condor/jsonrpc-comp/rpc-2.0/schema/DictionaryIdentifier.json.md#2025-04-22_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\\n    \\\"description\\\": \\\"Options for dictionary item lookups.\\\",\\n    \\\"oneOf\\\": [\\n        {\\n            \\\"description\\\": \\\"Lookup a dictionary item via an Account's named keys.\\\",\\n            \\\"type\\\": \\\"object\\\",\\n            \\\"required\\\": [\\n                \\\"AccountNamedKey\\\"\\n            ],\\n            \\\"properties\\\": {\\n                \\\"AccountNamedKey\\\": {\\n                    \\\"type\\\": \\\"object\\\",\\n                    \\\"required\\\": [\\n                        \\\"dictionary_item_key\\\",\\n                        \\\"dictionary_name\\\",\\n                        \\\"key\\\"\\n                    ],\\n                    \\\"properties\\\": {\\n                        \\\"key\\\": {\\n                            \\\"description\\\": \\\"The account key as a formatted string whose named keys contains dictionary_name.\\\",\\n                            \\\"type\\\": \\\"string\\\"\\n                        },\\n                        \\\"dictionary_name\\\": {\\n                            \\\"description\\\": \\\"The named key under which the dictionary seed URef is stored.\\\",\\n                            \\\"type\\\": \\\"string\\\"\\n                        },\\n                        \\\"dictionary_item_key\\\": {\\n                            \\\"description\\\": \\\"The dictionary item key formatted as a string.\\\",\\n                            \\\"type\\\": \\\"string\\\"\\n                        }\\n                    }\\n                }\\n            },\\n            \\\"additionalProperties\\\": false\\n        },\\n        {\\n            \\\"description\\\": \\\"Lookup a dictionary item via a Contract's named keys.\\\",\\n            \\\"type\\\": \\\"object\\\",\\n            \\\"required\\\": [\\n                \\\"ContractNamedKey\\\"\\n            ],\\n            \\\"properties\\\": {\\n                \\\"ContractNamedKey\\\": {\\n                    \\\"type\\\": \\\"object\\\",\\n                    \\\"required\\\": [\\n                        \\\"dictionary_item_key\\\",\\n                        \\\"dictionary_name\\\",\\n                        \\\"key\\\"\\n                    ],\\n                    \\\"properties\\\": {\\n                        \\\"key\\\": {\\n                            \\\"description\\\": \\\"The contract key as a formatted string whose named keys contains dictionary_name.\\\",\\n                            \\\"type\\\": \\\"string\\\"\\n                        },\\n                        \\\"dictionary_name\\\": {\\n                            \\\"description\\\": \\\"The named key under which the dictionary seed URef is stored.\\\",\\n                            \\\"type\\\": \\\"string\\\"\\n                        },\\n                        \\\"dictionary_item_key\\\": {\\n                            \\\"description\\\": \\\"The dictionary item key formatted as a string.\\\",\\n                            \\\"type\\\": \\\"string\\\"\\n                        }\\n                    }\\n                }\\n            },\\n            \\\"additionalProperties\\\": false\\n        },\\n        {\\n            \\\"description\\\": \\\"Lookup a dictionary item via an entities named keys.\\\",\\n            \\\"type\\\": \\\"object\\\",\\n            \\\"required\\\": [\\n                \\\"EntityNamedKey\\\"\\n            ],\\n            \\\"properties\\\": {\\n                \\\"EntityNamedKey\\\": {\\n                    \\\"type\\\": \\\"object\\\",\\n                    \\\"required\\\": [\\n                        \\\"dictionary_item_key\\\",\\n                        \\\"dictionary_name\\\",\\n                        \\\"key\\\"\\n                    ],\\n                    \\\"properties\\\": {\\n                        \\\"key\\\": {\\n                            \\\"description\\\": \\\"The entity address formatted as a string.\\\",\\n                            \\\"type\\\": \\\"string\\\"\\n                        },\\n                        \\\"dictionary_name\\\": {\\n                            \\\"description\\\": \\\"The named key under which the dictionary seed URef is stored.\\\",\\n                            \\\"type\\\": \\\"string\\\"\\n                        },\\n                        \\\"dictionary_item_key\\\": {\\n                            \\\"description\\\": \\\"The dictionary item key formatted as a string.\\\",\\n                            \\\"type\\\": \\\"string\\\"\\n                        }\\n                    }\\n                }\\n            },\\n            \\\"additionalProperties\\\": false\\n        },\\n        {\\n            \\\"description\\\": \\\"Lookup a dictionary item via its seed URef.\\\",\\n            \\\"type\\\": \\\"object\\\",\\n            \\\"required\\\": [\\n                \\\"URef\\\"\\n            ],\\n            \\\"properties\\\": {\\n                \\\"URef\\\": {\\n                    \\\"type\\\": \\\"object\\\",\\n                    \\\"required\\\": [\\n                        \\\"dictionary_item_key\\\",\\n                        \\\"seed_uref\\\"\\n                    ],\\n                    \\\"properties\\\": {\\n                        \\\"seed_uref\\\": {\\n                            \\\"description\\\": \\\"The dictionary's seed URef.\\\",\\n                            \\\"type\\\": \\\"string\\\"\\n                        },\\n                        \\\"dictionary_item_key\\\": {\\n                            \\\"description\\\": \\\"The dictionary item key formatted as a string.\\\",\\n                            \\\"type\\\": \\\"string\\\"\\n                        }\\n                    }\\n                }\\n            },\\n            \\\"additionalProperties\\\": false\\n        },\\n        {\\n            \\\"description\\\": \\\"Lookup a dictionary item via its unique key.\\\",\\n            \\\"type\\\": \\\"object\\\",\\n            \\\"required\\\": [\\n                \\\"Dictionary\\\"\\n            ],\\n            \\\"properties\\\": {\\n                \\\"Dictionary\\\": {\\n                    \\\"type\\\": \\\"string\\\"\\n                }\\n            },\\n            \\\"additionalProperties\\\": false\\n        }\\n    ]\\n} \n```\n\n----------------------------------------\n\nTITLE: Defining Message Topics and Hashes - OpenAPI Schema - YAML/JSON\nDESCRIPTION: The 'MessageTopic' and 'TopicNameHash' schemas enable secure, unique identification and referencing of topics for API messaging/pubsub extensions on the Casper Network. The topic includes both human-readable and hashed fields, with the latter usable for topic-based permissions and subscriptions.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/condor/jsonrpc-comp/rpc-2.0/schema/components.json.md#2025-04-22_snippet_54\n\nLANGUAGE: yaml\nCODE:\n```\nMessageTopic:\n  type: object\n  required:\n    - topic_name\n    - topic_name_hash\n  properties:\n    topic_name:\n      type: string\n    topic_name_hash:\n      allOf:\n        - $ref: \"#/components/schemas/TopicNameHash\"\n```\n\nLANGUAGE: yaml\nCODE:\n```\nTopicNameHash:\n  description: \"The hash of the name of the message topic.\"\n  type: string\n```\n\n----------------------------------------\n\nTITLE: Defining Delegation Costs in Casper Network Chainspec (TOML)\nDESCRIPTION: This TOML snippet from the chainspec.toml file defines the delegation and undelegation costs in the Casper Network. The costs are specified in motes, with both delegate and undelegate operations costing 2,500,000,000 motes.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/versioned_docs/version-2.0.0/users/delegating.md#2025-04-22_snippet_0\n\nLANGUAGE: toml\nCODE:\n```\n[system_costs.auction_costs]\n...\ndelegate = 2_500_000_000\nundelegate = 2_500_000_000\n...\n```\n\n----------------------------------------\n\nTITLE: Calling Contract using Wasm File\nDESCRIPTION: Command structure for deploying a contract using a Wasm file path instead of package name.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/versioned_docs/version-2.0.0/developers/cli/calling-contracts.md#2025-04-22_snippet_17\n\nLANGUAGE: rust\nCODE:\n```\ncasper-client put-deploy \\\n    --node-address [NODE_SERVER_ADDRESS] \\\n    --chain-name [CHAIN_NAME] \\\n    --secret-key [KEY_PATH]/secret_key.pem \\\n    --payment-amount [PAYMENT_AMOUNT_IN_MOTES] \\\n    --session-path [PATH]/[FILE_NAME].wasm\n```\n\n----------------------------------------\n\nTITLE: Configuring Environment Variables for Casper Network Testing\nDESCRIPTION: Commands to set up environment variables for testing a private Casper network. This defines the node address and chain name used in subsequent commands.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/versioned_docs/version-2.0.0/operators/setup-network/create-private.md#2025-04-22_snippet_10\n\nLANGUAGE: sh\nCODE:\n```\nexport NODE_ADDR=http://18.224.190.213:7777\nexport CHAIN_NAME=\"private-test\"\n```\n\n----------------------------------------\n\nTITLE: Defining TypeMismatch Schema in JSON\nDESCRIPTION: Specifies the schema for TypeMismatch, which represents a type mismatch error in StoredValue operations. It includes properties for the expected type and the actual type found.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/condor/jsonrpc-comp/rpc-2.0/schema.json.md#2025-04-22_snippet_75\n\nLANGUAGE: json\nCODE:\n```\n\"TypeMismatch\": {\n  \"description\": \"An error struct representing a type mismatch in [`StoredValue`](crate::StoredValue) operations.\",\n  \"type\": \"object\",\n  \"required\": [\n    \"expected\",\n    \"found\"\n  ],\n  \"properties\": {\n    \"expected\": {\n      \"description\": \"The name of the expected type.\",\n      \"type\": \"string\"\n    },\n    \"found\": {\n      \"description\": \"The actual type found.\",\n      \"type\": \"string\"\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Speculative Execution in TOML\nDESCRIPTION: Configuration options for enabling and configuring the speculative execution JSON-RPC HTTP server in a Casper node. Includes settings for enabling the server, specifying listening address, rate limiting, request size limits and CORS settings.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/versioned_docs/version-2.0.0/operators/setup/basic-node-configuration.md#2025-04-22_snippet_4\n\nLANGUAGE: toml\nCODE:\n```\n[speculative_exec_server]\n\nenable_server = true\n\naddress = '0.0.0.0:7778'\n\nqps_limit = 1\n\nmax_body_bytes = 2_621_440\n\ncors_origin = ''\n```\n\n----------------------------------------\n\nTITLE: Defining Combined Protocol and Entity Version Schema in JSON\nDESCRIPTION: This JSON snippet defines the structure for an object representing a combined version identifier. It requires two unsigned 32-bit integer properties: `protocol_version_major`, indicating the major protocol version a contract is compatible with, and `entity_version`, an automatically incremented version for a contract within that protocol version. Both fields are required and must be non-negative.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/condor/jsonrpc-comp/rpc-2.0/schema/EntityVersionKey.json.md#2025-04-22_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"description\": \"Major element of `ProtocolVersion` combined with `EntityVersion`.\",\n    \"type\": \"object\",\n    \"required\": [\n        \"entity_version\",\n        \"protocol_version_major\"\n    ],\n    \"properties\": {\n        \"protocol_version_major\": {\n            \"description\": \"Major element of `ProtocolVersion` a `ContractVersion` is compatible with.\",\n            \"type\": \"integer\",\n            \"format\": \"uint32\",\n            \"minimum\": 0\n        },\n        \"entity_version\": {\n            \"description\": \"Automatically incremented value for a contract version within a major `ProtocolVersion`.\",\n            \"type\": \"integer\",\n            \"format\": \"uint32\",\n            \"minimum\": 0\n        }\n    }\n} \n```\n\n----------------------------------------\n\nTITLE: NFT Contract Query Response Structure\nDESCRIPTION: JSON response showing the contract's stored value including named keys, entry points, and configuration settings\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/versioned_docs/version-1.5.X/resources/tokens/cep78/using-casper-client/querying-NFTs.md#2025-04-22_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"jsonrpc\": \"2.0\",\n  \"id\": -5355991397545050403,\n  \"result\": {\n    \"api_version\": \"1.5.6\",\n    \"block_header\": null,\n    \"stored_value\": {\n      \"Contract\": {\n        \"contract_package_hash\": \"contract-package-2b61207cd0e94ce1b1d40801b0abb1ab55fd7dae94c9dcf670292243f3791a30\",\n        \"contract_wasm_hash\": \"contract-wasm-845d3d08e29642afba35704bcb6e38f3c40f1469763bff7a88674c9a5be3f01b\",\n        \"named_keys\": [\n          {\n            \"name\": \"acl_package_mode\",\n            \"key\": \"uref-5e950cdd5497633c1d03284ec6e70ce436744cc172d6e26e21e4e474d1b34312-007\"\n          },\n          {\n            \"name\": \"acl_whitelist\",\n            \"key\": \"uref-77b5861bdc04f3c63417dd2ed1943f659f6180603982a24587f79cbc38801cf4-007\"\n          }\n        ]\n      }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Casper Contract Package Schema in JSON\nDESCRIPTION: This JSON schema defines the structure for a Casper Network contract package. It specifies required properties like `access_key`, `versions`, `disabled_versions`, `groups`, and `lock_status`, along with their types, descriptions, and references to other schemas (`URef`, `ContractVersion`, etc.) for detailed type definitions. This schema serves as a blueprint for validating contract package data.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/condor/jsonrpc-comp/rpc-2.0/schema/ContractPackage.json.md#2025-04-22_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"description\": \"Contract definition, metadata, and security container.\",\n    \"type\": \"object\",\n    \"required\": [\n        \"access_key\",\n        \"disabled_versions\",\n        \"groups\",\n        \"lock_status\",\n        \"versions\"\n    ],\n    \"properties\": {\n        \"access_key\": {\n            \"description\": \"Key used to add or disable versions\",\n            \"allOf\": [\n                {\n                    \"$ref\": \"#/components/schemas/URef\"\n                }\n            ]\n        },\n        \"versions\": {\n            \"description\": \"All versions (enabled & disabled)\",\n            \"type\": \"array\",\n            \"items\": {\n                \"$ref\": \"#/components/schemas/ContractVersion\"\n            }\n        },\n        \"disabled_versions\": {\n            \"description\": \"Disabled versions\",\n            \"type\": \"array\",\n            \"items\": {\n                \"$ref\": \"#/components/schemas/ContractVersionKey\"\n            },\n            \"uniqueItems\": true\n        },\n        \"groups\": {\n            \"description\": \"Mapping maintaining the set of URefs associated with each \\\"user group\\\". This can be used to control access to methods in a particular version of the contract. A method is callable by any context which \\\"knows\\\" any of the URefs associated with the method's user group.\",\n            \"allOf\": [\n                {\n                    \"$ref\": \"#/components/schemas/Array_of_NamedUserGroup\"\n                }\n            ]\n        },\n        \"lock_status\": {\n            \"description\": \"A flag that determines whether a contract is locked\",\n            \"allOf\": [\n                {\n                    \"$ref\": \"#/components/schemas/ContractPackageStatus\"\n                }\n            ]\n        }\n    }\n} \n```\n\n----------------------------------------\n\nTITLE: Incrementing the Counter\nDESCRIPTION: Call the counter_inc entry point to increment the counter value on the network.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/versioned_docs/version-2.0.0/resources/beginner/counter/walkthrough.md#2025-04-22_snippet_11\n\nLANGUAGE: bash\nCODE:\n```\ncasper-client put-deploy \\\n    --node-address http://localhost:11101 \\\n    --chain-name casper-net-1 \\\n    --secret-key [PATH_TO_YOUR_KEY]/secret_key.pem \\\n    --payment-amount [PAYMENT_AMOUNT_IN_MOTES] \\\n    --session-name \"counter\" \\\n    --session-entry-point \"counter_inc\"\n```\n\n----------------------------------------\n\nTITLE: Block Proof Schema Definition\nDESCRIPTION: Schema for BlockProof which pairs a validator's public key with their signature of a block hash.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/condor/jsonrpc-comp/rpc-2.0/schema/components.json.md#2025-04-22_snippet_89\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"description\": \"A validator's public key paired with a corresponding signature of a given block hash.\",\n    \"type\": \"object\",\n    \"required\": [\n        \"public_key\",\n        \"signature\"\n    ],\n    \"properties\": {\n        \"public_key\": {\n            \"description\": \"The validator's public key.\",\n            \"allOf\": [\n                {\n                    \"$ref\": \"#/components/schemas/PublicKey\"\n                }\n            ]\n        },\n        \"signature\": {\n            \"description\": \"The validator's signature.\",\n            \"allOf\": [\n                {\n                    \"$ref\": \"#/components/schemas/Signature\"\n                }\n            ]\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Querying Global State for Allowance Results\nDESCRIPTION: Command to query the global state to retrieve the results of a previous allowance check. This reads the value from the results URef in the utility contract's NamedKeys.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/versioned_docs/version-2.0.0/resources/tokens/cep18/transfer.md#2025-04-22_snippet_11\n\nLANGUAGE: json\nCODE:\n```\ncasper-client query-global-state -n http://<node IP>:<PORT> \\\n// This is the previously identified `result` URef from the utility contract's `NamedKeys`\n--key uref-a46ad389b53715d9991a513c8ca48e1502facc4c563c0700a31e830c4cb8a7d4-007 \\\n--state-root-hash e64f877f65df26db74300bb175c244d589bd88a23b91abf9ceb73ac5e65e90f1\n```\n\n----------------------------------------\n\nTITLE: Querying Account Details using Casper Client (Bash)\nDESCRIPTION: Queries the global state of a Casper node for details about a specific account, identified by its account hash. Requires the node address and a state root hash to ensure the query is made against a specific state.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/versioned_docs/version-2.0.0/resources/advanced/multi-sig/multi-sig-workflow.md#2025-04-22_snippet_15\n\nLANGUAGE: bash\nCODE:\n```\ncasper-client query-global-state \\\n--node-address https://node.testnet.casper.network \\\n--state-root-hash <STATE_ROOT_HASH> \\\n--key account-hash-<PRIMARY_ACCOUNT_HASH>\n```\n\n----------------------------------------\n\nTITLE: Installing toml Configuration Parser\nDESCRIPTION: Command to install toml, a configuration file parser, within the Python virtual environment using pip.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/versioned_docs/version-2.0.0/developers/dapps/setup-nctl.md#2025-04-22_snippet_12\n\nLANGUAGE: bash\nCODE:\n```\n(env) $ pip install toml\n```\n\n----------------------------------------\n\nTITLE: Installing Xcode developer tools for macOS\nDESCRIPTION: Install Xcode command-line tools for macOS, which are required for development.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/versioned_docs/version-2.0.0/developers/prerequisites.md#2025-04-22_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\nxcode-select --install\n```\n\n----------------------------------------\n\nTITLE: Defining state_get_account_info RPC Method Schema in JSON\nDESCRIPTION: JSON schema definition for the state_get_account_info RPC method which retrieves account information from the Casper network. The schema specifies required parameters, response format, and includes a complete example of usage.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/condor/jsonrpc-comp/rpc-2.0/state_get_account_info.json.md#2025-04-22_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"name\": \"state_get_account_info\",\n  \"summary\": \"returns an Account from the network\",\n  \"params\": [\n    {\n      \"name\": \"account_identifier\",\n      \"schema\": {\n        \"description\": \"The public key of the Account.\",\n        \"$ref\": \"#/components/schemas/AccountIdentifier\"\n      },\n      \"required\": true\n    },\n    {\n      \"name\": \"block_identifier\",\n      \"schema\": {\n        \"description\": \"The block identifier.\",\n        \"anyOf\": [\n          {\n            \"$ref\": \"#/components/schemas/BlockIdentifier\"\n          },\n          {\n            \"type\": \"null\"\n          }\n        ]\n      },\n      \"required\": false\n    }\n  ],\n  \"result\": {\n    \"name\": \"state_get_account_info_result\",\n    \"schema\": {\n      \"description\": \"Result for \\\"state_get_account_info\\\" RPC response.\",\n      \"type\": \"object\",\n      \"required\": [\n        \"account\",\n        \"api_version\",\n        \"merkle_proof\"\n      ],\n      \"properties\": {\n        \"api_version\": {\n          \"description\": \"The RPC API version.\",\n          \"type\": \"string\"\n        },\n        \"account\": {\n          \"description\": \"The account.\",\n          \"$ref\": \"#/components/schemas/Account\"\n        },\n        \"merkle_proof\": {\n          \"description\": \"The Merkle proof.\",\n          \"type\": \"string\"\n        }\n      },\n      \"additionalProperties\": false\n    }\n  },\n  \"examples\": [\n    {\n      \"name\": \"state_get_account_info_example\",\n      \"params\": [\n        {\n          \"name\": \"account_identifier\",\n          \"value\": \"013b6a27bcceb6a42d62a3a8d02a6f0d73653215771de243a63ac048a18b59da29\"\n        },\n        {\n          \"name\": \"block_identifier\",\n          \"value\": {\n            \"Hash\": \"0707070707070707070707070707070707070707070707070707070707070707\"\n          }\n        }\n      ],\n      \"result\": {\n        \"name\": \"state_get_account_info_example_result\",\n        \"value\": {\n          \"api_version\": \"2.0.0\",\n          \"account\": {\n            \"account_hash\": \"account-hash-e94daaff79c2ab8d9c31d9c3058d7d0a0dd31204a5638dc1451fa67b2e3fb88c\",\n            \"named_keys\": [\n              {\n                \"name\": \"main_purse\",\n                \"key\": \"uref-09480c3248ef76b603d386f3f4f8a5f87f597d4eaffd475433f861af187ab5db-007\"\n              }\n            ],\n            \"main_purse\": \"uref-09480c3248ef76b603d386f3f4f8a5f87f597d4eaffd475433f861af187ab5db-007\",\n            \"associated_keys\": [\n              {\n                \"account_hash\": \"account-hash-e94daaff79c2ab8d9c31d9c3058d7d0a0dd31204a5638dc1451fa67b2e3fb88c\",\n                \"weight\": 1\n              }\n            ],\n            \"action_thresholds\": {\n              \"deployment\": 1,\n              \"key_management\": 1\n            }\n          },\n          \"merkle_proof\": \"01000000006ef2e0949ac76e55812421f755abe129b6244fe7168b77f47a72536147614625016ef2e0949ac76e55812421f755abe129b6244fe7168b77f47a72536147614625000000003529cde5c621f857f75f3810611eb4af3f998caaa9d4a3413cf799f99c67db0307010000006ef2e0949ac76e55812421f755abe129b6244fe7168b77f47a7253614761462501010102000000006e06000000000074769d28aac597a36a03a932d4b43e4f10bf0403ee5c41dd035102553f5773631200b9e173e8f05361b681513c14e25e3138639eb03232581db7557c9e8dbbc83ce94500226a9a7fe4f2b7b88d5103a4fc7400f02bf89c860c9ccdd56951a2afe9be0e0267006d820fb5676eb2960e15722f7725f3f8f41030078f8b2e44bf0dc03f71b176d6e800dc5ae9805068c5be6da1a90b2528ee85db0609cc0fb4bd60bbd559f497a98b67f500e1e3e846592f4918234647fca39830b7e1e6ad6f5b7a99b39af823d82ba1873d000003000000010186ff500f287e9b53f823ae1582b1fa429dfede28015125fd233a31ca04d5012002015cc42669a55467a1fdf49750772bfc1aed59b9b085558eb81510e9b015a7c83b0301e3cf4a34b1db6bfa58808b686cb8fe21ebe0c1bcbcee522649d2b135fe510fe3\"\n        }\n      }\n    }\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Array Schema Referencing EraReward in JSON\nDESCRIPTION: This JSON snippet defines a schema for arrays where each element is required to match the structure defined by the EraReward component schema. It is suitable for enforcing consistent API payloads or validating response formats in the Casper Network documentation stack. Dependencies include the pre-existence of the EraReward schema definition under components.schemas.EraReward. The schema includes a 'type' property set to 'array', and an 'items' attribute referencing the external schema, but expects consumers to resolve the $ref correctly. It requires json-schema handling tools capable of evaluating $ref dependencies and does not declare min or max array length constraints.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/condor/jsonrpc-comp/rpc-2.0/schema/Array_of_EraReward.json.md#2025-04-22_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"type\": \"array\",\n    \"items\": {\n        \"$ref\": \"#/components/schemas/EraReward\"\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining the query_balance RPC Method Schema in JSON\nDESCRIPTION: This JSON object defines the schema for the `query_balance` RPC method. It specifies the method name, a summary, input parameters (`purse_identifier`, `state_identifier` with their schemas and requirement status), the expected result structure (`api_version`, `balance`), and includes an example request and response demonstrating its usage. It references other schema components like `PurseIdentifier`, `GlobalStateIdentifier`, and `U512`.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/condor/jsonrpc-comp/rpc-2.0/query_balance.json.md#2025-04-22_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"name\": \"query_balance\",\n  \"summary\": \"query for a balance using a purse identifier and a state identifier\",\n  \"params\": [\n    {\n      \"name\": \"purse_identifier\",\n      \"schema\": {\n        \"description\": \"The identifier to obtain the purse corresponding to balance query.\",\n        \"$ref\": \"#/components/schemas/PurseIdentifier\"\n      },\n      \"required\": true\n    },\n    {\n      \"name\": \"state_identifier\",\n      \"schema\": {\n        \"description\": \"The state identifier used for the query, if none is passed the tip of the chain will be used.\",\n        \"anyOf\": [\n          {\n            \"$ref\": \"#/components/schemas/GlobalStateIdentifier\"\n          },\n          {\n            \"type\": \"null\"\n          }\n        ]\n      },\n      \"required\": false\n    }\n  ],\n  \"result\": {\n    \"name\": \"query_balance_result\",\n    \"schema\": {\n      \"description\": \"Result for \\\"query_balance\\\" RPC response.\",\n      \"type\": \"object\",\n      \"required\": [\n        \"api_version\",\n        \"balance\"\n      ],\n      \"properties\": {\n        \"api_version\": {\n          \"description\": \"The RPC API version.\",\n          \"type\": \"string\"\n        },\n        \"balance\": {\n          \"description\": \"The available balance in motes (total balance - sum of all active holds).\",\n          \"$ref\": \"#/components/schemas/U512\"\n        }\n      }\n    }\n  },\n  \"examples\": [\n    {\n      \"name\": \"query_balance_example\",\n      \"params\": [\n        {\n          \"name\": \"state_identifier\",\n          \"value\": {\n            \"BlockHash\": \"0707070707070707070707070707070707070707070707070707070707070707\"\n          }\n        },\n        {\n          \"name\": \"purse_identifier\",\n          \"value\": {\n            \"main_purse_under_account_hash\": \"account-hash-0909090909090909090909090909090909090909090909090909090909090909\"\n          }\n        }\n      ],\n      \"result\": {\n        \"name\": \"query_balance_example_result\",\n        \"value\": {\n          \"api_version\": \"2.0.0\",\n          \"balance\": \"123456\"\n        }\n      }\n    }\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Verifying Deploy Execution Status\nDESCRIPTION: Command to check the status of a deployment using its deploy hash\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/versioned_docs/version-1.5.X/developers/dapps/nctl-test.md#2025-04-22_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\n$(get_path_to_client) get-deploy 8e6309cc37bc58d8fedc1094ee1bd264a636d39fc0e05b5e1d72d98f7b6faf13 -n http://localhost:11101\n```\n\n----------------------------------------\n\nTITLE: Template for Installing CEP-18 Contract in Bash\nDESCRIPTION: Template command structure for deploying a CEP-18 token contract to a Casper network using the casper-client CLI tool.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/versioned_docs/version-1.5.X/resources/beginner/cep18.md#2025-04-22_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\ncasper-client put-deploy \\\n    --node-address http://<HOST:PORT> \\\n    --chain-name [NETWORK_NAME]] \\\n    --secret-key [PATH_TO_YOUR_KEY]/secret_key.pem \\\n    --payment-amount [AMOUNT] \\\n    --session-path [WASM_FILE_PATH]/[File_Name].wasm\n    --session-arg <\"NAME:TYPE='VALUE'\" OR \"NAME:TYPE=null\">\n```\n\n----------------------------------------\n\nTITLE: Creating Query Component File (Bash)\nDESCRIPTION: Creates a new file named `Query.jsx` in the `src` directory. This file will house the React component responsible for querying the smart contract's state.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/docs/developers/dapps/template-frontend.md#2025-04-22_snippet_12\n\nLANGUAGE: bash\nCODE:\n```\ntouch src/Query.jsx\n```\n\n----------------------------------------\n\nTITLE: Getting State Root Hash with Casper CLI\nDESCRIPTION: A command line instruction to retrieve the current state root hash from a Casper node using the casper-client. This hash is needed for subsequent queries of the blockchain state.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/docs/resources/beginner/upgrade-contract.md#2025-04-22_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\ncasper-client get-state-root-hash --node-address http://[NODE_IP]:7777\n```\n\n----------------------------------------\n\nTITLE: Transfer Schema Definition in JSON Schema\nDESCRIPTION: Schema definition for transfer operations including properties like from, to, source, target, amount, gas and ID fields. Each field has specific validation rules and references to other schema components.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/condor/jsonrpc-comp/rpc-2.0/schema/components.json.md#2025-04-22_snippet_42\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"from\": {\n        \"description\": \"Entity from which transfer was executed.\",\n        \"allOf\": [\n            {\n                \"$ref\": \"#/components/schemas/InitiatorAddr\"\n            }\n        ]\n    },\n    \"to\": {\n        \"description\": \"Account to which funds are transferred.\",\n        \"anyOf\": [\n            {\n                \"$ref\": \"#/components/schemas/AccountHash\"\n            },\n            {\n                \"type\": \"null\"\n            }\n        ]\n    },\n    \"source\": {\n        \"description\": \"Source purse.\",\n        \"allOf\": [\n            {\n                \"$ref\": \"#/components/schemas/URef\"\n            }\n        ]\n    },\n    \"target\": {\n        \"description\": \"Target purse.\",\n        \"allOf\": [\n            {\n                \"$ref\": \"#/components/schemas/URef\"\n            }\n        ]\n    },\n    \"amount\": {\n        \"description\": \"Transfer amount.\",\n        \"allOf\": [\n            {\n                \"$ref\": \"#/components/schemas/U512\"\n            }\n        ]\n    },\n    \"gas\": {\n        \"description\": \"Gas.\",\n        \"allOf\": [\n            {\n                \"$ref\": \"#/components/schemas/Gas\"\n            }\n        ]\n    },\n    \"id\": {\n        \"description\": \"User-defined ID.\",\n        \"type\": [\n            \"integer\",\n            \"null\"\n        ],\n        \"format\": \"uint64\",\n        \"minimum\": 0.0\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Starting and Monitoring Casper Node\nDESCRIPTION: Commands to start the Casper node and monitor its synchronization status.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/versioned_docs/version-2.0.0/operators/setup/install-node.md#2025-04-22_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\nsudo /etc/casper/node_util.py rotate_logs\nsudo /etc/casper/node_util.py start\n/etc/casper/node_util.py watch\n```\n\n----------------------------------------\n\nTITLE: Viewing NCTL Faucet Account Details - Bash\nDESCRIPTION: This bash command retrieves information for the NCTL faucet account, which includes the PublicKey and AccountHash. No arguments needed. The output can be used to locate the PackageHash of deployed contracts for further contract queries or interactions within the testing lifecycle.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/versioned_docs/version-2.0.0/developers/dapps/nctl-test.md#2025-04-22_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\nnctl-view-faucet-account\n```\n\n----------------------------------------\n\nTITLE: Message Limits Chainspec Configuration\nDESCRIPTION: Configuration settings in chainspec that define limits for topic name size and number of topics per contract.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/docs/developers/writing-onchain-code/emitting-contract-events.md#2025-04-22_snippet_15\n\nLANGUAGE: json\nCODE:\n```\n[\nwasm.messages_limits]\nmax_topic_name_size = 256\nmax_topics_per_contract = 128\n```\n\n----------------------------------------\n\nTITLE: Node TLS Configuration Example in TOML\nDESCRIPTION: TOML configuration example showing how to apply generated certificates to a Casper node. This connects the node to the private network using the CA-signed certificate.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/versioned_docs/version-2.0.0/operators/setup-network/create-private.md#2025-04-22_snippet_13\n\nLANGUAGE: toml\nCODE:\n```\n[network.identity]\ntls_certificate = \"node_1_cert.pem\"\nsecret_key = \"node_1.pem\"\nca_certificate = \"ca_cert.pem\"\n```\n\n----------------------------------------\n\nTITLE: Updating Global State with Global-State-Update-Gen\nDESCRIPTION: Installs and uses the Global State Update Generator to modify the global state in the Casper network. Supports generating admins, updating balances, and changing validators with specified parameters.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/versioned_docs/version-2.0.0/operators/setup-network/create-private.md#2025-04-22_snippet_23\n\nLANGUAGE: sh\nCODE:\n```\n$ cargo install --git https://github.com/casper-network/casper-node/ --tag private-1.4.6 global-state-update-gen\n$ global-state-update-gen --help\nGlobal State Update Generator 0.2.0\nGenerates a global state update file based on the supplied parameters\n\nUSAGE:\n    global-state-update-gen [SUBCOMMAND]\n\nFLAGS:\n    -h, --help       Prints help information\n    -V, --version    Prints version information\n\nSUBCOMMANDS:\n    balances                    Generates an update changing account balances\n    generate-admins             Generates entries to create new admin accounts on a private chain\n    help                        Prints this message or the help of the given subcommand(s)\n    system-contract-registry    Generates an update creating the system contract registry\n    validators                  Generates an update changing the validators set\n```\n\n----------------------------------------\n\nTITLE: Contract Package Hash JSON Schema\nDESCRIPTION: JSON schema definition that specifies a string property to store the hash address of a contract package. This schema ensures the hash is stored as a string value.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/condor/jsonrpc-comp/rpc-1.5/schema/ContractPackageHash.json.md#2025-04-22_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"description\": \"The hash address of the contract package\",\n    \"type\": \"string\"\n}\n```\n\n----------------------------------------\n\nTITLE: Cloning the casper-client-rs Repository\nDESCRIPTION: Command to clone the casper-client-rs repository from GitHub into your working directory.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/versioned_docs/version-2.0.0/developers/dapps/setup-nctl.md#2025-04-22_snippet_15\n\nLANGUAGE: bash\nCODE:\n```\n$ git clone https://github.com/casper-ecosystem/casper-client-rs\n```\n\n----------------------------------------\n\nTITLE: Creating Contract Binary Package with Cargo (Bash)\nDESCRIPTION: Shows the standard `cargo new` command used to create a new Rust binary package named 'contract' within the project directory. This is the first step in the semi-automatic or manual setup process for a Casper smart contract project, creating the `contract` folder containing `src/main.rs` and `Cargo.toml`.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/docs/developers/writing-onchain-code/simple-contract.md#2025-04-22_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\ncargo new contract\n```\n\n----------------------------------------\n\nTITLE: Running CEP-18 Tests with Make\nDESCRIPTION: Command to build and run the CEP-18 token tests in release mode using the project's Makefile\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/versioned_docs/version-2.0.0/resources/tokens/cep18/tests.md#2025-04-22_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nmake test\n```\n\n----------------------------------------\n\nTITLE: Querying Global State with JSON RPC\nDESCRIPTION: This JSON structure represents a query to the global state via RPC, requiring parameters like 'key' and optionally 'state_identifier' and 'path'. It defines expected outputs within 'query_global_state_result', detailing necessary keys and types. It includes an example showcasing an input query and its corresponding output.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/condor/jsonrpc-comp/rpc-2.0/query_global_state.json.md#2025-04-22_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"name\": \"query_global_state\",\n  \"summary\": \"a query to global state using either a Block hash or state root hash\",\n  \"params\": [\n    {\n      \"name\": \"key\",\n      \"schema\": {\n        \"description\": \"The key under which to query.\",\n        \"$ref\": \"#/components/schemas/Key\"\n      },\n      \"required\": true\n    },\n    {\n      \"name\": \"state_identifier\",\n      \"schema\": {\n        \"description\": \"The identifier used for the query. If not provided, the tip of the chain will be used.\",\n        \"anyOf\": [\n          {\n            \"$ref\": \"#/components/schemas/GlobalStateIdentifier\"\n          },\n          {\n            \"type\": \"null\"\n          }\n        ]\n      },\n      \"required\": false\n    },\n    {\n      \"name\": \"path\",\n      \"schema\": {\n        \"description\": \"The path components starting from the key as base.\",\n        \"default\": [],\n        \"type\": \"array\",\n        \"items\": {\n          \"type\": \"string\"\n        }\n      },\n      \"required\": false\n    }\n  ],\n  \"result\": {\n    \"name\": \"query_global_state_result\",\n    \"schema\": {\n      \"description\": \"Result for \\\"query_global_state\\\" RPC response.\",\n      \"type\": \"object\",\n      \"required\": [\n        \"api_version\",\n        \"merkle_proof\",\n        \"stored_value\"\n      ],\n      \"properties\": {\n        \"api_version\": {\n          \"description\": \"The RPC API version.\",\n          \"type\": \"string\"\n        },\n        \"block_header\": {\n          \"description\": \"The block header if a Block hash was provided.\",\n          \"anyOf\": [\n            {\n              \"$ref\": \"#/components/schemas/BlockHeader\"\n            },\n            {\n              \"type\": \"null\"\n            }\n          ]\n        },\n        \"stored_value\": {\n          \"description\": \"The stored value.\",\n          \"$ref\": \"#/components/schemas/StoredValue\"\n        },\n        \"merkle_proof\": {\n          \"description\": \"The Merkle proof.\",\n          \"type\": \"string\"\n        }\n      },\n      \"additionalProperties\": false\n    }\n  },\n  \"examples\": [\n    {\n      \"name\": \"query_global_state_example\",\n      \"params\": [\n        {\n          \"name\": \"state_identifier\",\n          \"value\": {\n            \"BlockHash\": \"0744fcb72af43c5cc372039bc5a8bfee48808a9ce414acc0d6338a628c20eb42\"\n          }\n        },\n        {\n          \"name\": \"key\",\n          \"value\": \"deploy-af684263911154d26fa05be9963171802801a0b6aff8f199b7391eacb8edc9e1\"\n        },\n        {\n          \"name\": \"path\",\n          \"value\": []\n        }\n      ],\n      \"result\": {\n        \"name\": \"query_global_state_example_result\",\n        \"value\": {\n          \"api_version\": \"2.0.0\",\n          \"block_header\": {\n            \"Version2\": {\n              \"parent_hash\": \"0707070707070707070707070707070707070707070707070707070707070707\",\n              \"state_root_hash\": \"0808080808080808080808080808080808080808080808080808080808080808\",\n              \"body_hash\": \"0505050505050505050505050505050505050505050505050505050505050505\",\n              \"random_bit\": true,\n              \"accumulated_seed\": \"ac979f51525cfd979b14aa7dc0737c5154eabe0db9280eceaa8dc8d2905b20d5\",\n              \"era_end\": {\n                \"equivocators\": [\n                  \"013b6a27bcceb6a42d62a3a8d02a6f0d73653215771de243a63ac048a18b59da29\"\n                ],\n                \"inactive_validators\": [\n                  \"018139770ea87d175f56a35466c34c7ecccb8d8a91b4ee37a25df60f5b8fc9b394\"\n                ],\n                \"next_era_validator_weights\": [\n                  {\n                    \"validator\": \"013b6a27bcceb6a42d62a3a8d02a6f0d73653215771de243a63ac048a18b59da29\",\n                    \"weight\": \"123\"\n                  },\n                  {\n                    \"validator\": \"016e7a1cdd29b0b78fd13af4c5598feff4ef2a97166e3ca6f2e4fbfccd80505bf1\",\n                    \"weight\": \"456\"\n                  },\n                  {\n                    \"validator\": \"018a875fff1eb38451577acd5afee405456568dd7c89e090863a0557bc7af49f17\",\n                    \"weight\": \"789\"\n                  }\n                ],\n                \"rewards\": {},\n                \"next_era_gas_price\": 1\n              },\n              \"timestamp\": \"2020-11-17T00:39:24.072Z\",\n              \"era_id\": 1,\n              \"height\": 10,\n              \"protocol_version\": \"1.0.0\",\n              \"proposer\": \"01d9bf2148748a85c89da5aad8ee0b0fc2d105fd39d41a4c796536354f0ae2900c\",\n              \"current_gas_price\": 1,\n              \"last_switch_block_hash\": \"0909090909090909090909090909090909090909090909090909090909090909\"\n            }\n          },\n          \"stored_value\": {\n            \"Account\": {\n              \"account_hash\": \"account-hash-e94daaff79c2ab8d9c31d9c3058d7d0a0dd31204a5638dc1451fa67b2e3fb88c\",\n              \"named_keys\": [\n                {\n                  \"name\": \"main_purse\",\n                  \"key\": \"uref-09480c3248ef76b603d386f3f4f8a5f87f597d4eaffd475433f861af187ab5db-007\"\n                }\n              ],\n              \"main_purse\": \"uref-09480c3248ef76b603d386f3f4f8a5f87f597d4eaffd475433f861af187ab5db-007\",\n              \"associated_keys\": [\n                {\n                  \"account_hash\": \"account-hash-e94daaff79c2ab8d9c31d9c3058d7d0a0dd31204a5638dc1451fa67b2e3fb88c\",\n                  \"weight\": 1\n                }\n              ],\n              \"action_thresholds\": {\n                \"deployment\": 1,\n                \"key_management\": 1\n              }\n            }\n          },\n          \"merkle_proof\": \"01000000006ef2e0949ac76e55812421f755abe129b6244fe7168b77f47a72536147614625016ef2e0949ac76e55812421f755abe129b6244fe7168b77f47a72536147614625000000003529cde5c621f857f75f3810611eb4af3f998caaa9d4a3413cf799f99c67db0307010000006ef2e0949ac76e55812421f755abe129b6244fe7168b77f47a7253614761462501010102000000006e06000000000074769d28aac597a36a03a932d4b43e4f10bf0403ee5c41dd035102553f5773631200b9e173e8f05361b681513c14e25e3138639eb03232581db7557c9e8dbbc83ce94500226a9a7fe4f2b7b88d5103a4fc7400f02bf89c860c9ccdd56951a2afe9be0e0267006d820fb5676eb2960e15722f7725f3f8f41030078f8b2e44bf0dc03f71b176d6e800dc5ae9805068c5be6da1a90b2528ee85db0609cc0fb4bd60bbd559f497a98b67f500e1e3e846592f4918234647fca39830b7e1e6ad6f5b7a99b39af823d82ba1873d000003000000010186ff500f287e9b53f823ae1582b1fa429dfede28015125fd233a31ca04d5012002015cc42669a55467a1fdf49750772bfc1aed59b9b085558eb81510e9b015a7c83b0301e3cf4a34b1db6bfa58808b686cb8fe21ebe0c1bcbcee522649d2b135fe510fe3\"\n        }\n      }\n    }\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Docker Image Verification Output\nDESCRIPTION: Expected output from the Docker image listing command showing the casper-nctl:rc3 image. This confirms the image was built correctly.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/condor/local-setup.md#2025-04-22_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\nREPOSITORY                 TAG        IMAGE ID       CREATED        SIZE\ncasper-nctl                rc3        9fd1e7b25d42   40 hours ago   433MB\n```\n\n----------------------------------------\n\nTITLE: Installing CEP-78 JavaScript Client via npm\nDESCRIPTION: Command to install the CEP-78 JavaScript client using npm package manager.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/versioned_docs/version-1.5.X/resources/tokens/cep78/js-tutorial.md#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nnpm install casper-cep78-js-client\n```\n\n----------------------------------------\n\nTITLE: Querying Entity Details by Contract Address - Sample (Bash)\nDESCRIPTION: A worked example invoking casper-client get-entity with real node address and a contract entity identifier. Retrieves all metadata, such as named keys and entry points, for the specified contract.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/docs/developers/cli/querying-global-state.md#2025-04-22_snippet_13\n\nLANGUAGE: bash\nCODE:\n```\ncasper-client get-entity \\\n--node-address http://localhost:11101 \\\n--entity-identifier entity-contract-a1d0bf9d96f3efc9ea67f627df3a7cba390bfc582956032db91060ca5d413e68\n```\n\n----------------------------------------\n\nTITLE: Defining Block Body Schema in JSON\nDESCRIPTION: This JSON snippet defines the schema for the body portion of a block in version 1 of the blockchain protocol. It specifies necessary components such as deploy hashes, proposer, and transfer hashes, and sets constraints on their data types using JSON schema features like arrays and references. The schema ensures objects adhere to the required structure with specified properties, enabling consistent data handling.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/condor/jsonrpc-comp/rpc-2.0/schema/BlockBodyV1.json.md#2025-04-22_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"description\": \"The body portion of a block. Version 1.\",\n    \"type\": \"object\",\n    \"required\": [\n        \"deploy_hashes\",\n        \"proposer\",\n        \"transfer_hashes\"\n    ],\n    \"properties\": {\n        \"proposer\": {\n            \"description\": \"The public key of the validator which proposed the block.\",\n            \"allOf\": [\n                {\n                    \"$ref\": \"#/components/schemas/PublicKey\"\n                }\n            ]\n        },\n        \"deploy_hashes\": {\n            \"description\": \"The deploy hashes of the non-transfer deploys within the block.\",\n            \"type\": \"array\",\n            \"items\": {\n                \"$ref\": \"#/components/schemas/DeployHash\"\n            }\n        },\n        \"transfer_hashes\": {\n            \"description\": \"The deploy hashes of the transfers within the block.\",\n            \"type\": \"array\",\n            \"items\": {\n                \"$ref\": \"#/components/schemas/DeployHash\"\n            }\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Compiling and Testing Counter Contract using Make\nDESCRIPTION: These commands navigate into the cloned 'counter' directory, prepare the build environment for Wasm compilation (`make prepare`), and then compile the contracts in release mode and run associated tests (`make test`). This process generates the Wasm binaries needed for deployment.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/docs/resources/beginner/counter-testnet/walkthrough.md#2025-04-22_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\ncd counter\nmake prepare\nmake test\n```\n\n----------------------------------------\n\nTITLE: Cloning Counter Contract Repository using Git\nDESCRIPTION: This command clones the 'counter' contract repository from the Casper Ecosystem GitHub organization to the local machine. This repository contains the source code for the counter smart contract and session code used in the tutorial.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/docs/resources/beginner/counter-testnet/walkthrough.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ngit clone https://github.com/casper-ecosystem/counter\n```\n\n----------------------------------------\n\nTITLE: Verifying Seigniorage Allocations via TOML and Casper CLI\nDESCRIPTION: Ensures seigniorage allocations are zero at switch blocks and checks validator stakes via Casper CLI. Requires enabling compute_rewards=false in core section of configuration TOML.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/versioned_docs/version-2.0.0/operators/setup-network/create-private.md#2025-04-22_snippet_21\n\nLANGUAGE: toml\nCODE:\n```\n[core]\ncompute_rewards = false\n```\n\n----------------------------------------\n\nTITLE: Defining CLValue Structure in Markdown\nDESCRIPTION: This snippet describes the structure of a CLValue, which includes a serialized byte representation of the value, its CLType, and an optional parsed field for JSON encoding.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/versioned_docs/version-2.0.0/developers/json-rpc/types_cl.md#2025-04-22_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n* `bytes` A Casper serialized representation of the underlying value. For more information, reference the [Serialization Standard](../../concepts/serialization/index.md).\n\n* [`cl_type`](#cltype)\n```\n\n----------------------------------------\n\nTITLE: Defining JSON Schema for NamedKey Array\nDESCRIPTION: This JSON schema defines an array structure intended to hold a collection of 'NamedKey' objects. The 'description' field provides context, 'type' specifies it's an array, and 'items' uses '$ref' to link each array element to the schema definition found at '#/components/schemas/NamedKey'. This relies on the existence and definition of the 'NamedKey' schema elsewhere.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/condor/jsonrpc-comp/rpc-2.0/schema/NamedKeys.json.md#2025-04-22_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"description\": \"A collection of named keys.\",\n    \"type\": \"array\",\n    \"items\": {\n        \"$ref\": \"#/components/schemas/NamedKey\"\n    }\n} \n```\n\n----------------------------------------\n\nTITLE: JSON Schema for Validator Entry\nDESCRIPTION: This JSON Schema defines the structure for a validator entry object. It outlines required properties such as `bonding_purse`, `delegation_rate`, `delegators`, `inactive`, `staked_amount`, and `validator_public_key`. Each property includes a description, data type (often referencing other schemas like `PublicKey`, `URef`, `U512`, `VestingSchedule`), and constraints. The schema ensures that objects conforming to it represent valid validator entries.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/condor/jsonrpc-comp/rpc-2.0/schema/Bid.json.md#2025-04-22_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"description\": \"An entry in the validator map.\",\n    \"type\": \"object\",\n    \"required\": [\n        \"bonding_purse\",\n        \"delegation_rate\",\n        \"delegators\",\n        \"inactive\",\n        \"staked_amount\",\n        \"validator_public_key\"\n    ],\n    \"properties\": {\n        \"validator_public_key\": {\n            \"description\": \"Validator public key.\",\n            \"allOf\": [\n                {\n                    \"$ref\": \"#/components/schemas/PublicKey\"\n                }\n            ]\n        },\n        \"bonding_purse\": {\n            \"description\": \"The purse that was used for bonding.\",\n            \"allOf\": [\n                {\n                    \"$ref\": \"#/components/schemas/URef\"\n                }\n            ]\n        },\n        \"staked_amount\": {\n            \"description\": \"The amount of tokens staked by a validator (not including delegators).\",\n            \"allOf\": [\n                {\n                    \"$ref\": \"#/components/schemas/U512\"\n                }\n            ]\n        },\n        \"delegation_rate\": {\n            \"description\": \"Delegation rate.\",\n            \"type\": \"integer\",\n            \"format\": \"uint8\",\n            \"minimum\": 0\n        },\n        \"vesting_schedule\": {\n            \"description\": \"Vesting schedule for a genesis validator. `None` if non-genesis validator.\",\n            \"anyOf\": [\n                {\n                    \"$ref\": \"#/components/schemas/VestingSchedule\"\n                },\n                {\n                    \"type\": \"null\"\n                }\n            ]\n        },\n        \"delegators\": {\n            \"description\": \"This validator's delegators, indexed by their public keys.\",\n            \"allOf\": [\n                {\n                    \"$ref\": \"#/components/schemas/Array_of_PublicKeyAndDelegator\"\n                }\n            ]\n        },\n        \"inactive\": {\n            \"description\": \"`true` if validator has been \\\"evicted\\\".\",\n            \"type\": \"boolean\"\n        }\n    },\n    \"additionalProperties\": false\n} \n```\n\n----------------------------------------\n\nTITLE: Stopping Casper Sidecar Service\nDESCRIPTION: Command to stop the Casper Sidecar service using systemctl.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/versioned_docs/version-2.0.0/operators/setup/casper-sidecar.md#2025-04-22_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nsudo systemctl stop casper-sidecar.service\n```\n\n----------------------------------------\n\nTITLE: Retrieving Account Info Result Example\nDESCRIPTION: Example response showing the structure of a state_get_account_info_result containing account details including associated keys, action thresholds, and merkle proof.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/docs/developers/json-rpc/json-rpc-informational.md#2025-04-22_snippet_23\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"id\": 1,\n  \"jsonrpc\": \"2.0\",\n  \"result\": {\n    \"name\": \"state_get_account_info_result\",\n    \"value\": {\n      \"api_version\": \"2.0.0\",\n      \"account\": {\n        \"account_hash\": \"account-hash-e94daaff79c2ab8d9c31d9c3058d7d0a0dd31204a5638dc1451fa67b2e3fb88c\",\n        \"named_keys\": [\n          {\n            \"name\": \"main_purse\",\n            \"key\": \"uref-09480c3248ef76b603d386f3f4f8a5f87f597d4eaffd475433f861af187ab5db-007\"\n          }\n        ],\n        \"main_purse\": \"uref-09480c3248ef76b603d386f3f4f8a5f87f597d4eaffd475433f861af187ab5db-007\",\n        \"associated_keys\": [\n          {\n            \"account_hash\": \"account-hash-e94daaff79c2ab8d9c31d9c3058d7d0a0dd31204a5638dc1451fa67b2e3fb88c\",\n            \"weight\": 1\n          }\n        ],\n        \"action_thresholds\": {\n          \"deployment\": 1,\n          \"key_management\": 1\n        }\n      },\n      \"merkle_proof\": \"01000000006ef2e0949ac76e55812421f755abe129b6244fe7168b77f47a72536147614625016ef2e0949ac76e55812421f755abe129b6244fe7168b77f47a72536147614625000000003529cde5c621f857f75f3810611eb4af3f998caaa9d4a3413cf799f99c67db0307010000006ef2e0949ac76e55812421f755abe129b6244fe7168b77f47a7253614761462501010102000000006e06000000000074769d28aac597a36a03a932d4b43e4f10bf0403ee5c41dd035102553f5773631200b9e173e8f05361b681513c14e25e3138639eb03232581db7557c9e8dbbc83ce94500226a9a7fe4f2b7b88d5103a4fc7400f02bf89c860c9ccdd56951a2afe9be0e0267006d820fb5676eb2960e15722f7725f3f8f41030078f8b2e44bf0dc03f71b176d6e800dc5ae9805068c5be6da1a90b2528ee85db0609cc0fb4bd60bbd559f497a98b67f500e1e3e846592f4918234647fca39830b7e1e6ad6f5b7a99b39af823d82ba1873d000003000000010186ff500f287e9b53f823ae1582b1fa429dfede28015125fd233a31ca04d5012002015cc42669a55467a1fdf49750772bfc1aed59b9b085558eb81510e9b015a7c83b0301e3cf4a34b1db6bfa58808b686cb8fe21ebe0c1bcbcee522649d2b135fe510fe3\"\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Gas Hold Duration in Casper Node Chainspec\nDESCRIPTION: This TOML configuration snippet from the casper-node chainspec defines the gas_hold_interval parameter, which controls how long gas holds remain in effect before expiring. This setting determines the duration that funds are temporarily frozen in a user's account after a transaction.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/src/pages/condor/fee-elimination.md#2025-04-22_snippet_0\n\nLANGUAGE: toml\nCODE:\n```\n# If fee_handling is set to 'no_fee', the system places a balance hold on the payer\n# equal to the value the fee would have been. Such balance holds expire after a time\n# interval has elapsed. This setting controls how long that interval is. The available\n# balance of a purse equals its total balance minus the held amount(s) of non-expired\n# holds (see gas_hold_balance_handling setting for details of how that is calculated).\n#\n# For instance, if gas_hold_interval is 24 hours and 100 gas is used from a purse,\n# a hold for 100 is placed on that purse and is considered when calculating total balance\n# for 24 hours starting from the block_time when the hold was placed.\ngas_hold_interval = '24 hours'\n```\n\n----------------------------------------\n\nTITLE: Querying Casper Deploy Status with Real Example - Bash\nDESCRIPTION: This Bash command demonstrates a practical example of querying a Casper deploy using the casper-client CLI. It targets a real node address on casper testnet and looks up information for a specific deploy hash. Required dependencies are the casper-client CLI and internet access; it outputs detailed status and can be used as a template for user scripts.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/docs/developers/cli/transfers/direct-token-transfer.md#2025-04-22_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\ncasper-client get-deploy \\\n--node-address https://node.testnet.casper.network \n1f17a0bdeaaf71abd03492c854cdf97f746432751721ce555e95b9cefe641e3c\n```\n\n----------------------------------------\n\nTITLE: SSH Login Command Example\nDESCRIPTION: Concrete example of SSH login command with specific user, key, and IP address\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/versioned_docs/version-2.0.0/operators/setup/non-root-user.md#2025-04-22_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\nssh -i ~/.ssh/id_rsa casper@10.21.10.200\n```\n\n----------------------------------------\n\nTITLE: Defining Execution Targets with JSON Schema\nDESCRIPTION: This JSON Schema snippet defines possible execution targets for a transaction. It includes native operations, stored entities, and session modules as execution types. Each type has specific properties such as 'id' for stored targets or 'module_bytes' for session targets. References to additional schemas for detailed properties are included. Inputs are structured as JSON objects, and outputs conform to this schema.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/condor/jsonrpc-comp/rpc-2.0/schema/TransactionTarget.json.md#2025-04-22_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"description\": \"Execution target of a Transaction.\",\n    \"oneOf\": [\n        {\n            \"description\": \"The execution target is a native operation (e.g. a transfer).\",\n            \"type\": \"string\",\n            \"enum\": [\n                \"Native\"\n            ]\n        },\n        {\n            \"description\": \"The execution target is a stored entity or package.\",\n            \"type\": \"object\",\n            \"required\": [\n                \"Stored\"\n            ],\n            \"properties\": {\n                \"Stored\": {\n                    \"type\": \"object\",\n                    \"required\": [\n                        \"id\",\n                        \"runtime\"\n                    ],\n                    \"properties\": {\n                        \"id\": {\n                            \"description\": \"The identifier of the stored execution target.\",\n                            \"allOf\": [\n                                {\n                                    \"$ref\": \"#/components/schemas/TransactionInvocationTarget\"\n                                }\n                            ]\n                        },\n                        \"runtime\": {\n                            \"description\": \"The execution runtime to use.\",\n                            \"allOf\": [\n                                {\n                                    \"$ref\": \"#/components/schemas/TransactionRuntime\"\n                                }\n                            ]\n                        }\n                    },\n                    \"additionalProperties\": false\n                }\n            },\n            \"additionalProperties\": false\n        },\n        {\n            \"description\": \"The execution target is the included module bytes, i.e. compiled Wasm.\",\n            \"type\": \"object\",\n            \"required\": [\n                \"Session\"\n            ],\n            \"properties\": {\n                \"Session\": {\n                    \"type\": \"object\",\n                    \"required\": [\n                        \"module_bytes\",\n                        \"runtime\"\n                    ],\n                    \"properties\": {\n                        \"module_bytes\": {\n                            \"description\": \"The compiled Wasm.\",\n                            \"allOf\": [\n                                {\n                                    \"$ref\": \"#/components/schemas/Bytes\"\n                                }\n                            ]\n                        },\n                        \"runtime\": {\n                            \"description\": \"The execution runtime to use.\",\n                            \"allOf\": [\n                                {\n                                    \"$ref\": \"#/components/schemas/TransactionRuntime\"\n                                }\n                            ]\n                        }\n                    },\n                    \"additionalProperties\": false\n                }\n            },\n            \"additionalProperties\": false\n        }\n    ]\n}\n```\n\n----------------------------------------\n\nTITLE: Defining UnbondingPurse Schema in JSON\nDESCRIPTION: This schema defines the structure of an UnbondingPurse object, which represents an unbonding request in the Casper Network. It includes properties such as bonding purse, validator and unbonder public keys, era of creation, and unbonding amount.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/condor/jsonrpc-comp/rpc-2.0/schema/components.json.md#2025-04-22_snippet_38\n\nLANGUAGE: JSON\nCODE:\n```\n\"UnbondingPurse\": {\n  \"description\": \"Unbonding purse.\",\n  \"type\": \"object\",\n  \"required\": [\n    \"amount\",\n    \"bonding_purse\",\n    \"era_of_creation\",\n    \"unbonder_public_key\",\n    \"validator_public_key\"\n  ],\n  \"properties\": {\n    \"bonding_purse\": {\n      \"description\": \"Bonding Purse\",\n      \"allOf\": [\n        {\n          \"$ref\": \"#/components/schemas/URef\"\n        }\n      ]\n    },\n    \"validator_public_key\": {\n      \"description\": \"Validators public key.\",\n      \"allOf\": [\n        {\n          \"$ref\": \"#/components/schemas/PublicKey\"\n        }\n      ]\n    },\n    \"unbonder_public_key\": {\n      \"description\": \"Unbonders public key.\",\n      \"allOf\": [\n        {\n          \"$ref\": \"#/components/schemas/PublicKey\"\n        }\n      ]\n    },\n    \"era_of_creation\": {\n      \"description\": \"Era in which this unbonding request was created.\",\n      \"allOf\": [\n        {\n          \"$ref\": \"#/components/schemas/EraId\"\n        }\n      ]\n    },\n    \"amount\": {\n      \"description\": \"Unbonding Amount.\",\n      \"allOf\": [\n        {\n          \"$ref\": \"#/components/schemas/U512\"\n        }\n      ]\n    },\n    \"new_validator\": {\n      \"description\": \"The validator public key to re-delegate to.\",\n      \"anyOf\": [\n        {\n          \"$ref\": \"#/components/schemas/PublicKey\"\n        },\n        {\n          \"type\": \"null\"\n        }\n      ]\n    }\n  },\n  \"additionalProperties\": false\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring TLS for Casper Network Access Control in TOML\nDESCRIPTION: TOML configuration for network identity and TLS settings. This setup controls which nodes can join the private network by requiring certificates signed by the network's certificate authority.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/versioned_docs/version-2.0.0/operators/setup-network/create-private.md#2025-04-22_snippet_11\n\nLANGUAGE: toml\nCODE:\n```\n[network.identity]\ntls_certificate = \"local_node_cert.pem\"\nsecret_key = \"local_node.pem\"\nca_certificate = \"ca_cert.pem\"\n```\n\n----------------------------------------\n\nTITLE: Cloning Example Repositories with Git - Bash\nDESCRIPTION: These Bash commands clone demonstration repositories containing example Casper session code. No dependencies are required except Git. Provide the repository URLs to download complete codebases for learning or development, as shown in subsequent examples.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/docs/developers/writing-onchain-code/writing-session-code.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ngit clone https://github.com/casper-ecosystem/two-party-multi-sig/\n```\n\nLANGUAGE: bash\nCODE:\n```\ngit clone https://github.com/casper-ecosystem/counter/\n```\n\n----------------------------------------\n\nTITLE: Configuring Protocol Activation in Chainspec File - TOML\nDESCRIPTION: Demonstrates how to set the activation point for a protocol version in the chainspec.toml file. The activation point determines the blockchain era at which a new protocol version becomes active. No external dependencies are required; this is a TOML configuration section recognized by casper-node. The key parameter is \"activation_point\", which must be an integer representing the era to activate the protocol. This file is read during upgrade detection by Casper nodes.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/docs/operators/setup/upgrade.md#2025-04-22_snippet_0\n\nLANGUAGE: TOML\nCODE:\n```\n[protocol]\n# This protocol version becomes active at the start of this era.\nactivation_point = 100\n```\n\n----------------------------------------\n\nTITLE: Defining Seigniorage Allocation Schema in JSON\nDESCRIPTION: This JSON schema defines the structure for information about a seigniorage allocation specifically for a delegator. It requires a nested 'Delegator' object which includes the amount, delegator's public key, and validator's public key. It references external schemas for 'PublicKey' and 'U512'.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/condor/jsonrpc-comp/rpc-1.5/schema/components.json.md#2025-04-22_snippet_32\n\nLANGUAGE: json\nCODE:\n```\n\"description\": \"Info about a seigniorage allocation for a delegator\",\n\"type\": \"object\",\n\"required\": [\n    \"Delegator\"\n],\n\"properties\": {\n    \"Delegator\": {\n        \"type\": \"object\",\n        \"required\": [\n            \"amount\",\n            \"delegator_public_key\",\n            \"validator_public_key\"\n        ],\n        \"properties\": {\n            \"delegator_public_key\": {\n                \"description\": \"Delegator's public key\",\n                \"allOf\": [\n                    {\n                        \"$ref\": \"#/components/schemas/PublicKey\"\n                    }\n                ]\n            },\n            \"validator_public_key\": {\n                \"description\": \"Validator's public key\",\n                \"allOf\": [\n                    {\n                        \"$ref\": \"#/components/schemas/PublicKey\"\n                    }\n                ]\n            },\n            \"amount\": {\n                \"description\": \"Allocated amount\",\n                \"allOf\": [\n                    {\n                        \"$ref\": \"#/components/schemas/U512\"\n                    }\n                ]\n            }\n        },\n        \"additionalProperties\": false\n    }\n},\n\"additionalProperties\": false\n\n```\n\n----------------------------------------\n\nTITLE: Failure Transformation JSON Schema\nDESCRIPTION: Defines a schema for failed transformations, requiring a 'Failure' property containing an error message. This common object pattern ensures consistent error handling across various transformations.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/condor/jsonrpc-comp/rpc-1.5/schema.json.md#2025-04-22_snippet_50\n\nLANGUAGE: JSON\nCODE:\n```\n{\"Failure\": {\"type\": \"string\"}}\n```\n\n----------------------------------------\n\nTITLE: Querying Global State\nDESCRIPTION: Command to query the global state using a public key and state root hash\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/docs/developers/dapps/nctl-test.md#2025-04-22_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\n$(get_path_to_client) query-global-state \\\n--node-address http://localhost:11101 \\\n--key <PUBLIC KEY> \\\n--state-root-hash <STATE ROOT HASH>\n```\n\n----------------------------------------\n\nTITLE: Defining Account Hash and Weight Schema\nDESCRIPTION: JSON schema specification that requires an account_hash reference and an integer weight value between 0-255 (uint8). The schema enforces these two required properties and prevents additional properties from being added.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/condor/jsonrpc-comp/rpc-1.5/schema/AssociatedKey.json.md#2025-04-22_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"type\": \"object\",\n    \"required\": [\n        \"account_hash\",\n        \"weight\"\n    ],\n    \"properties\": {\n        \"account_hash\": {\n            \"$ref\": \"#/components/schemas/AccountHash\"\n        },\n        \"weight\": {\n            \"type\": \"integer\",\n            \"format\": \"uint8\",\n            \"minimum\": 0\n        }\n    },\n    \"additionalProperties\": false\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Non-Root User with SSH Key Access in Bash\nDESCRIPTION: This snippet demonstrates how to create a non-root user on a Unix-like system using Bash commands. It includes steps to generate an SSH key, add a user without a password, and enable key-based SSH login. Dependencies: Requires sudo privileges and SSH setup on the server. Main parameters are <username> and <your ssh private key>.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/versioned_docs/version-1.5.X/operators/setup/non-root-user.md#2025-04-22_snippet_0\n\nLANGUAGE: Bash\nCODE:\n```\nsudo adduser <username> --disabled-password\n```\n\nLANGUAGE: Bash\nCODE:\n```\nsudo su - <username>\nmkdir .ssh\nchmod 700 .ssh\ntouch .ssh/authorized_keys\n```\n\nLANGUAGE: Bash\nCODE:\n```\nexit\n```\n\nLANGUAGE: Bash\nCODE:\n```\nsudo visudo\n```\n\nLANGUAGE: Bash\nCODE:\n```\n# User privilege specification\nroot    ALL=(ALL:ALL) ALL\n<username>  ALL=(ALL:ALL) NOPASSWD:ALL\n```\n\nLANGUAGE: Bash\nCODE:\n```\nssh -i <your ssh private key> <username>@<server ip>\n```\n\nLANGUAGE: Bash\nCODE:\n```\nssh -i ~/.ssh/id_rsa casper@10.21.10.200\n```\n\n----------------------------------------\n\nTITLE: Sample get-deploy Response\nDESCRIPTION: Detailed JSON response from a get-deploy command showing the complete deploy information including approvals, header, payment, session and execution results.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/versioned_docs/version-1.5.X/developers/cli/sending-deploys.md#2025-04-22_snippet_4\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"id\": -3532286620275982221,\n  \"jsonrpc\": \"2.0\",\n  \"result\": {\n    \"api_version\": \"1.4.5\",\n    \"deploy\": {\n      \"approvals\": [\n        {\n          \"signature\": \"015a7b0178e144fbf5ce52147c44a3e6bd6aae898ec6bb47c97b5802f3bcb6cd26331f7db18464cd1e51764c14ceb24b7ab9c4e3595505c32465fc0702e8d5510b\",\n          \"signer\": \"01e76e0279a08b96d9d68e6b86c618de24a0c324d7d0c1fa8c035f0bc2af1a396d\"\n        }\n      ],\n      \"hash\": \"34550c8b86d5e38260882466e98427c62a27a96d85c13f49041a1579ebf84496\",\n      \"header\": {\n        \"account\": \"01e76e0279a08b96d9d68e6b86c618de24a0c324d7d0c1fa8c035f0bc2af1a396d\",\n        \"body_hash\": \"b1956600be3c11d7555ada11426ab1a8bdf36102f59838d6bf69cec321111a22\",\n        \"chain_name\": \"casper-test\",\n        \"dependencies\": [],\n        \"gas_price\": 1,\n        \"timestamp\": \"2022-03-24T12:05:57.579Z\",\n        \"ttl\": \"30m\"\n      },\n      \"payment\": {\n        \"ModuleBytes\": {\n          \"args\": [\n            [\n              \"amount\",\n              {\n                \"bytes\": \"05000c774203\",\n                \"cl_type\": \"U512\",\n                \"parsed\": \"14000000000\"\n              }\n            ]\n          ],\n          \"module_bytes\": \"\"\n        }\n      },\n      \"session\": {\n        \"ModuleBytes\": {\n          \"args\": [],\n          \"module_bytes\": \"[94478 hex chars]\"\n        }\n      }\n    },\n    \"execution_results\": [\n      {\n        \"block_hash\": \"098b618878a2413393925e1fbf6d3cf92f1208f4f8662a904e86b49b0c4ab9f0\",\n        \"result\": {\n          \"Success\": {\n            \"cost\": \"13327900740\",\n            \"effect\": {\n              \"operations\": [],\n              \"transforms\": [\n                {\n                  \"key\": \"hash-8cf5e4acf51f54eb59291599187838dc3bc234089c46fc6ca8ad17e762ae4401\",\n                  \"transform\": \"Identity\"\n                },\n                {\n                  \"key\": \"hash-624dbe2395b9d9503fbee82162f1714ebff6b639f96d2084d26d944c354ec4c5\",\n                  \"transform\": \"Identity\"\n                },\n                {\n                  \"key\": \"hash-010c3fe81b7b862e50c77ef9a958a05bfa98444f26f96f23d37a13c96244cfb7\",\n                  \"transform\": \"Identity\"\n                },\n                {\n                  \"key\": \"hash-9824d60dc3a5c44a20b9fd260a412437933835b52fc683d8ae36e4ec2114843e\",\n                  \"transform\": \"Identity\"\n                },\n                {\n                  \"key\": \"balance-3a61ed9a3b472f35f4cf1e241d674fad8a5f9509c97a56d62bb03f7bcc4b8474\",\n                  \"transform\": \"Identity\"\n                },\n                {\n                  \"key\": \"balance-98d945f5324f865243b7c02c0417ab6eac361c5c56602fd42ced834a1ba201b6\",\n                  \"transform\": \"Identity\"\n                },\n                {\n                  \"key\": \"balance-3a61ed9a3b472f35f4cf1e241d674fad8a5f9509c97a56d62bb03f7bcc4b8474\",\n                  \"transform\": {\n                    \"WriteCLValue\": {\n                      \"bytes\": \"0500279bd1ca\",\n                      \"cl_type\": \"U512\",\n                      \"parsed\": \"871100000000\"\n                    }\n                  }\n                },\n                {\n                  \"key\": \"balance-98d945f5324f865243b7c02c0417ab6eac361c5c56602fd42ced834a1ba201b6\",\n                  \"transform\": {\n                    \"AddUInt512\": \"14000000000\"\n                  }\n                },\n                {\n                  \"key\": \"uref-82a7b5713f2b9b3f9e1b4f2d1f312a5fec7c3a0bed6fa897501913951729dbbf-000\",\n                  \"transform\": {\n                    \"WriteCLValue\": {\n                      \"bytes\": \"00000000\",\n                      \"cl_type\": \"I32\",\n                      \"parsed\": 0\n                    }\n                  }\n                },\n                {\n                  \"key\": \"uref-ea022d75ff618533baf46040cc57692fb7f7840774c979c9dec0b5c3ddcec7e9-000\",\n                  \"transform\": {\n                    \"WriteCLValue\": {\n                      \"bytes\": \"\",\n                      \"cl_type\": \"Unit\",\n                      \"parsed\": null\n                    }\n                  }\n                },\n                {\n                  \"key\": \"hash-4d0e2bfb5d243ea567e9b37aa8229d2b8b01de838c4bd7ca570a178e012d6b82\",\n                  \"transform\": \"WriteContractPackage\"\n                },\n                {\n                  \"key\": \"hash-4d0e2bfb5d243ea567e9b37aa8229d2b8b01de838c4bd7ca570a178e012d6b82\",\n                  \"transform\": \"Identity\"\n                },\n                {\n                  \"key\": \"hash-3b69bafcc13b4541dddd7d5492e4754feee41c636990aeb6bf78d58fdd39fc43\",\n                  \"transform\": \"WriteContractWasm\"\n                },\n                {\n                  \"key\": \"hash-c39dd923df84c637e46e46a8a3326fcf85e43c60814878f44a08efd0074cb523\",\n                  \"transform\": \"WriteContract\"\n                },\n                {\n                  \"key\": \"hash-4d0e2bfb5d243ea567e9b37aa8229d2b8b01de838c4bd7ca570a178e012d6b82\",\n                  \"transform\": \"WriteContractPackage\"\n                },\n                {\n                  \"key\": \"account-hash-f407926760b91c2ce3af8bda7448841b3aa68c6e98053331d10819ef2d0a808e\",\n                  \"transform\": {\n                    \"AddKeys\": [\n                      {\n                        \"key\": \"hash-c39dd923df84c637e46e46a8a3326fcf85e43c60814878f44a08efd0074cb523\",\n                        \"name\": \"counter\"\n                      }\n                    ]\n                  }\n                },\n                {\n                  \"key\": \"deploy-34550c8b86d5e38260882466e98427c62a27a96d85c13f49041a1579ebf84496\",\n                  \"transform\": {\n                    \"WriteDeployInfo\": {\n                      \"deploy_hash\": \"34550c8b86d5e38260882466e98427c62a27a96d85c13f49041a1579ebf84496\",\n                      \"from\": \"account-hash-f407926760b91c2ce3af8bda7448841b3aa68c6e98053331d10819ef2d0a808e\",\n                      \"gas\": \"13327900740\",\n                      \"source\": \"uref-3a61ed9a3b472f35f4cf1e241d674fad8a5f9509c97a56d62bb03f7bcc4b8474-007\",\n                      \"transfers\": []\n                    }\n                  }\n                },\n                {\n                  \"key\": \"hash-8cf5e4acf51f54eb59291599187838dc3bc234089c46fc6ca8ad17e762ae4401\",\n                  \"transform\": \"Identity\"\n                },\n                {\n                  \"key\": \"hash-624dbe2395b9d9503fbee82162f1714ebff6b639f96d2084d26d944c354ec4c5\",\n                  \"transform\": \"Identity\"\n                },\n                {\n                  \"key\": \"balance-98d945f5324f865243b7c02c0417ab6eac361c5c56602fd42ced834a1ba201b6\",\n                  \"transform\": \"Identity\"\n                },\n                {\n                  \"key\": \"hash-8cf5e4acf51f54eb59291599187838dc3bc234089c46fc6ca8ad17e762ae4401\",\n                  \"transform\": \"Identity\"\n                },\n                {\n                  \"key\": \"hash-010c3fe81b7b862e50c77ef9a958a05bfa98444f26f96f23d37a13c96244cfb7\",\n                  \"transform\": \"Identity\"\n                },\n                {\n                  \"key\": \"hash-9824d60dc3a5c44a20b9fd260a412437933835b52fc683d8ae36e4ec2114843e\",\n                  \"transform\": \"Identity\"\n                },\n                {\n                  \"key\": \"balance-98d945f5324f865243b7c02c0417ab6eac361c5c56602fd42ced834a1ba201b6\",\n                  \"transform\": \"Identity\"\n                },\n                {\n```\n\n----------------------------------------\n\nTITLE: Defining JsonValidatorChanges and JsonValidatorStatusChange Schemas in JSON\nDESCRIPTION: These schemas define the structure for validator status changes, including public key and detailed status change information.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/condor/jsonrpc-comp/rpc-2.0/schema/components.json.md#2025-04-22_snippet_81\n\nLANGUAGE: JSON\nCODE:\n```\n\"JsonValidatorChanges\": {\n    \"description\": \"The changes in a validator's status.\",\n    \"type\": \"object\",\n    \"required\": [\n        \"public_key\",\n        \"status_changes\"\n    ],\n    \"properties\": {\n        \"public_key\": {\n            \"description\": \"The public key of the validator.\",\n            \"allOf\": [\n                {\n                    \"$ref\": \"#/components/schemas/PublicKey\"\n                }\n            ]\n        },\n        \"status_changes\": {\n            \"description\": \"The set of changes to the validator's status.\",\n            \"type\": \"array\",\n            \"items\": {\n                \"$ref\": \"#/components/schemas/JsonValidatorStatusChange\"\n            }\n        }\n    },\n    \"additionalProperties\": false\n},\n\"JsonValidatorStatusChange\": {\n    \"description\": \"A single change to a validator's status in the given era.\",\n    \"type\": \"object\",\n    \"required\": [\n        \"era_id\",\n        \"validator_change\"\n    ],\n    \"properties\": {\n\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Token Entry Points - Casper Smart Contract - JSON\nDESCRIPTION: This snippet lists the entry point definitions for a Casper smart contract implementing typical fungible token operations such as transfer, transfer_from, mint, total_supply, name, and symbol. Each entry details its argument list, return type, and access level, mapping controller method signatures for interaction on-chain. Dependencies include Casper's smart contract ABI, and all inputs/outputs are strongly typed (e.g., U256 amounts, Key addresses, Booleans for admin calls), intended for client code generation or contract state analysis.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/docs/developers/cli/sending-transactions.md#2025-04-22_snippet_16\n\nLANGUAGE: JSON\nCODE:\n```\n{\n  \"name\": \"migrate_user_balance_keys\",\n  \"args\": [\n    {\n      \"name\": \"events\",\n      \"cl_type\": \"Bool\"\n    },\n    {\n      \"name\": \"revert\",\n      \"cl_type\": \"Bool\"\n    }\n  ],\n  \"ret\": \"Unit\",\n  \"access\": \"Public\",\n  \"entry_point_type\": \"Called\",\n  \"entry_point_payment\": \"Caller\"\n}\n\n```\n\nLANGUAGE: JSON\nCODE:\n```\n{\n  \"name\": \"mint\",\n  \"args\": [\n    {\n      \"name\": \"owner\",\n      \"cl_type\": \"Key\"\n    },\n    {\n      \"name\": \"amount\",\n      \"cl_type\": \"U256\"\n    }\n  ],\n  \"ret\": \"Unit\",\n  \"access\": \"Public\",\n  \"entry_point_type\": \"Called\",\n  \"entry_point_payment\": \"Caller\"\n}\n\n```\n\nLANGUAGE: JSON\nCODE:\n```\n{\n  \"name\": \"name\",\n  \"args\": [],\n  \"ret\": \"String\",\n  \"access\": \"Public\",\n  \"entry_point_type\": \"Called\",\n  \"entry_point_payment\": \"Caller\"\n}\n\n```\n\nLANGUAGE: JSON\nCODE:\n```\n{\n  \"name\": \"symbol\",\n  \"args\": [],\n  \"ret\": \"String\",\n  \"access\": \"Public\",\n  \"entry_point_type\": \"Called\",\n  \"entry_point_payment\": \"Caller\"\n}\n\n```\n\nLANGUAGE: JSON\nCODE:\n```\n{\n  \"name\": \"total_supply\",\n  \"args\": [],\n  \"ret\": \"U256\",\n  \"access\": \"Public\",\n  \"entry_point_type\": \"Called\",\n  \"entry_point_payment\": \"Caller\"\n}\n\n```\n\nLANGUAGE: JSON\nCODE:\n```\n{\n  \"name\": \"transfer\",\n  \"args\": [\n    {\n      \"name\": \"recipient\",\n      \"cl_type\": \"Key\"\n    },\n    {\n      \"name\": \"amount\",\n      \"cl_type\": \"U256\"\n    }\n  ],\n  \"ret\": \"Unit\",\n  \"access\": \"Public\",\n  \"entry_point_type\": \"Called\",\n  \"entry_point_payment\": \"Caller\"\n}\n\n```\n\nLANGUAGE: JSON\nCODE:\n```\n{\n  \"name\": \"transfer_from\",\n  \"args\": [\n    {\n      \"name\": \"owner\",\n      \"cl_type\": \"Key\"\n    },\n    {\n      \"name\": \"recipient\",\n      \"cl_type\": \"Key\"\n    },\n    {\n      \"name\": \"amount\",\n      \"cl_type\": \"U256\"\n    }\n  ],\n  \"ret\": \"Unit\",\n  \"access\": \"Public\",\n  \"entry_point_type\": \"Called\",\n  \"entry_point_payment\": \"Caller\"\n}\n\n```\n\n----------------------------------------\n\nTITLE: Defining Transformation Schema for Casper Deploys - JSON\nDESCRIPTION: This snippet defines the JSON Schema for possible transformations during deploy execution on the Casper network. The schema uses 'anyOf' to allow several transformation types, such as identity, writing contracts, writing account or transfer details, and adding integer values. Dependencies include the referenced component schemas such as CLValue, AccountHash, DeployInfo, EraInfo, Transfer, Bid, U128, U256, U512, NamedKey, WithdrawPurse, and UnbondingPurse. Each object variant requires its specific property and enforces strict additional property checks, ensuring only documented fields are allowed. Inputs are objects representing transformation actions, outputs are validated transformation specification objects, and the file must be used alongside a full OpenAPI or similar documented component schema collection.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/condor/jsonrpc-comp/rpc-1.5/schema/Transform.json.md#2025-04-22_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"description\": \"The actual transformation performed while executing a deploy.\",\n    \"anyOf\": [\n        {\n            \"type\": \"string\",\n            \"enum\": [\n                \"Identity\",\n                \"WriteContractWasm\",\n                \"WriteContract\",\n                \"WriteContractPackage\"\n            ]\n        },\n        {\n            \"description\": \"Writes the given CLValue to global state.\",\n            \"type\": \"object\",\n            \"required\": [\n                \"WriteCLValue\"\n            ],\n            \"properties\": {\n                \"WriteCLValue\": {\n                    \"$ref\": \"#/components/schemas/CLValue\"\n                }\n            },\n            \"additionalProperties\": false\n        },\n        {\n            \"description\": \"Writes the given Account to global state.\",\n            \"type\": \"object\",\n            \"required\": [\n                \"WriteAccount\"\n            ],\n            \"properties\": {\n                \"WriteAccount\": {\n                    \"$ref\": \"#/components/schemas/AccountHash\"\n                }\n            },\n            \"additionalProperties\": false\n        },\n        {\n            \"description\": \"Writes the given DeployInfo to global state.\",\n            \"type\": \"object\",\n            \"required\": [\n                \"WriteDeployInfo\"\n            ],\n            \"properties\": {\n                \"WriteDeployInfo\": {\n                    \"$ref\": \"#/components/schemas/DeployInfo\"\n                }\n            },\n            \"additionalProperties\": false\n        },\n        {\n            \"description\": \"Writes the given EraInfo to global state.\",\n            \"type\": \"object\",\n            \"required\": [\n                \"WriteEraInfo\"\n            ],\n            \"properties\": {\n                \"WriteEraInfo\": {\n                    \"$ref\": \"#/components/schemas/EraInfo\"\n                }\n            },\n            \"additionalProperties\": false\n        },\n        {\n            \"description\": \"Writes the given Transfer to global state.\",\n            \"type\": \"object\",\n            \"required\": [\n                \"WriteTransfer\"\n            ],\n            \"properties\": {\n                \"WriteTransfer\": {\n                    \"$ref\": \"#/components/schemas/Transfer\"\n                }\n            },\n            \"additionalProperties\": false\n        },\n        {\n            \"description\": \"Writes the given Bid to global state.\",\n            \"type\": \"object\",\n            \"required\": [\n                \"WriteBid\"\n            ],\n            \"properties\": {\n                \"WriteBid\": {\n                    \"$ref\": \"#/components/schemas/Bid\"\n                }\n            },\n            \"additionalProperties\": false\n        },\n        {\n            \"description\": \"Writes the given Withdraw to global state.\",\n            \"type\": \"object\",\n            \"required\": [\n                \"WriteWithdraw\"\n            ],\n            \"properties\": {\n                \"WriteWithdraw\": {\n                    \"type\": \"array\",\n                    \"items\": {\n                        \"$ref\": \"#/components/schemas/WithdrawPurse\"\n                    }\n                }\n            },\n            \"additionalProperties\": false\n        },\n        {\n            \"description\": \"Adds the given `i32`.\",\n            \"type\": \"object\",\n            \"required\": [\n                \"AddInt32\"\n            ],\n            \"properties\": {\n                \"AddInt32\": {\n                    \"type\": \"integer\",\n                    \"format\": \"int32\"\n                }\n            },\n            \"additionalProperties\": false\n        },\n        {\n            \"description\": \"Adds the given `u64`.\",\n            \"type\": \"object\",\n            \"required\": [\n                \"AddUInt64\"\n            ],\n            \"properties\": {\n                \"AddUInt64\": {\n                    \"type\": \"integer\",\n                    \"format\": \"uint64\",\n                    \"minimum\": 0\n                }\n            },\n            \"additionalProperties\": false\n        },\n        {\n            \"description\": \"Adds the given `U128`.\",\n            \"type\": \"object\",\n            \"required\": [\n                \"AddUInt128\"\n            ],\n            \"properties\": {\n                \"AddUInt128\": {\n                    \"$ref\": \"#/components/schemas/U128\"\n                }\n            },\n            \"additionalProperties\": false\n        },\n        {\n            \"description\": \"Adds the given `U256`.\",\n            \"type\": \"object\",\n            \"required\": [\n                \"AddUInt256\"\n            ],\n            \"properties\": {\n                \"AddUInt256\": {\n                    \"$ref\": \"#/components/schemas/U256\"\n                }\n            },\n            \"additionalProperties\": false\n        },\n        {\n            \"description\": \"Adds the given `U512`.\",\n            \"type\": \"object\",\n            \"required\": [\n                \"AddUInt512\"\n            ],\n            \"properties\": {\n                \"AddUInt512\": {\n                    \"$ref\": \"#/components/schemas/U512\"\n                }\n            },\n            \"additionalProperties\": false\n        },\n        {\n            \"description\": \"Adds the given collection of named keys.\",\n            \"type\": \"object\",\n            \"required\": [\n                \"AddKeys\"\n            ],\n            \"properties\": {\n                \"AddKeys\": {\n                    \"type\": \"array\",\n                    \"items\": {\n                        \"$ref\": \"#/components/schemas/NamedKey\"\n                    }\n                }\n            },\n            \"additionalProperties\": false\n        },\n        {\n            \"description\": \"A failed transformation, containing an error message.\",\n            \"type\": \"object\",\n            \"required\": [\n                \"Failure\"\n            ],\n            \"properties\": {\n                \"Failure\": {\n                    \"type\": \"string\"\n                }\n            },\n            \"additionalProperties\": false\n        },\n        {\n            \"description\": \"Writes the given Unbonding to global state.\",\n            \"type\": \"object\",\n            \"required\": [\n                \"WriteUnbonding\"\n            ],\n            \"properties\": {\n                \"WriteUnbonding\": {\n                    \"type\": \"array\",\n                    \"items\": {\n                        \"$ref\": \"#/components/schemas/UnbondingPurse\"\n                    }\n                }\n            },\n            \"additionalProperties\": false\n        }\n    ]\n} \n```\n\n----------------------------------------\n\nTITLE: Starting the NCTL Docker Container Manually in Bash\nDESCRIPTION: Command to run the NCTL Docker container, mapping port 11101 from the container to the host for API access.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/condor/local-setup.md#2025-04-22_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\ndocker run -d --name mynctl -p 11101:11101 casper-nctl:rc3\n```\n\n----------------------------------------\n\nTITLE: Submitting a Validator Bid with Compiled Wasm Contract - Casper CLI (Bash)\nDESCRIPTION: This Bash template demonstrates submitting a bonding transaction using a locally compiled add_bid.wasm contract through put-deploy. It is suited for advanced users who need to customize bonding behavior beyond the system auction contract. The command includes the node address, secret key file, chain name, payment, and --session-path to the compiled Wasm file. Parameters such as public key, amount, delegation rate, and optional delegation limits must be configured. The response is a deploy hash. This method incurs higher cost than using the built-in entrypoint.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/docs/operators/becoming-a-validator/bonding.md#2025-04-22_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nsudo -u casper casper-client put-deploy \\\n--node-address http://<HOST:PORT> \\\n--secret-key /etc/casper/validator_keys/secret_key.pem \\\n--chain-name <CHAIN_NAME> \\\n--payment-amount <PAYMENT_AMOUNT> \\\n--session-path $HOME/casper-node/target/wasm32-unknown-unknown/release/add_bid.wasm \\\n--session-arg \"public_key:public_key='<PUBLIC_KEY_HEX>'\" \\\n--session-arg \"amount:u512='<BID-AMOUNT>'\" \\\n--session-arg \"delegation_rate:u8='<PERCENT_TO_KEEP_FROM_DELEGATORS>'\" \\\n--session-arg \"minimum_delegation_amount:u64='<MINIMUM_DELEGATION_AMOUNT>'\" \\\n--session-arg \"maximum_delegation_amount:u64='<MAXIMUM_DELEGATION_AMOUNT>'\"\n```\n\n----------------------------------------\n\nTITLE: Creating a new .NET console application\nDESCRIPTION: Commands to create a new console application project for working with the Casper .NET SDK.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/versioned_docs/version-2.0.0/developers/dapps/sdk/csharp-sdk.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ndotnet new console -o GetAccountBalance\ncd GetAccountBalance\n```\n\n----------------------------------------\n\nTITLE: Creating Runtime Arguments for Redelegation in JavaScript SDK\nDESCRIPTION: Prepares runtime arguments for redelegation, which includes the original validator's public key and a new validator's public key along with the amount to redelegate in motes.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/versioned_docs/version-1.5.X/resources/advanced/list-cspr.md#2025-04-22_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\nimport { RuntimeArgs, CLPublicKey, CLValueBuilder } from 'casper-js-sdk';\n\nconst args = RuntimeArgs.fromMap({\n    delegator: CLPublicKey.fromHex(delegatorPublicKeyHex),\n    validator: CLPublicKey.fromHex(validatorPublicKeyHex),\n    new_validator: CLPublicKey.fromHex(redelegateValidatorPublicKeyHex),\n    amount: CLValueBuilder.u512(amountMotes)\n})\n```\n\n----------------------------------------\n\nTITLE: Sample Era Validators Structure Returned by Auction Info - JSON\nDESCRIPTION: This snippet illustrates the \"era_validators\" field from the auction-info JSON response, showing validators active in a specific era and their respective stake weights. Each entry includes an era identifier and an array of public keys with corresponding weight values. Dependencies: Output structure as part of casper-client get-auction-info; initial input is for confirmation of validator status.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/versioned_docs/version-1.5.X/developers/cli/delegate.md#2025-04-22_snippet_7\n\nLANGUAGE: json\nCODE:\n```\n\"block_height\":105,\n     \"era_validators\":[\n        {\n           \"era_id\":9,\n           \"validator_weights\":[\n              {\n                 \"public_key\":\"0102db4e11bccb3f9d823c82b9389625d383867d00d09b343043cdbe5ca56dd1fd\",\n                 \"weight\":\"648151805935226166098427654\"\n              },\n              {\n                 \"public_key\":\"01aa67009b37a23c7ad0ca632da5da239d5db46067d4b34125f61b04611f610baf\",\n                 \"weight\":\"648151805938466925128109996\"\n              },\n              {\n                 \"public_key\":\"01b7afa2beeddffd13458b763d7a00259f7dc0fa45498dfed05b4d7df4b7d65e2c\",\n                 \"weight\":\"648151805935226166098427656\"\n              },\n              {\n                 \"public_key\":\"01ca5463dac047cbd750d97ee42dd810cf1e081ece7d83ae4fc03b25a9ecad3b6a\",\n                 \"weight\":\"648151805938466925128109998\"\n              },\n              {\n                 \"public_key\":\"01f4a7644695aa129eba09fb3f11d0277b2bea1a3d5bc1933bcda93fdb4ad17e55\",\n                 \"weight\":\"648151805938466925128110000\"\n              }\n           ]\n        },\n```\n\n----------------------------------------\n\nTITLE: Query Balance Command Template\nDESCRIPTION: Template for querying a purse balance using the casper-client with required parameters including node address, state root hash, and purse identifier.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/versioned_docs/version-1.5.X/developers/cli/transfers/verify-transfer.md#2025-04-22_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\ncasper-client query-balance \\\n--id 6 \\\n--node-address [NODE_SERVER_ADDRESS] \\\n--state-root-hash [STATE_ROOT_HAHS] \\\n--purse-identifier [SOURCE_PUBLIC_KEY_HEX] \n```\n\n----------------------------------------\n\nTITLE: Sending Transfers on Casper Network\nDESCRIPTION: Implementation of a transfer function to send CSPR tokens between accounts on the Casper network. Includes deploy creation, signing, and submission to the network.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/docs/developers/dapps/sdk/script-sdk.md#2025-04-22_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nconst fs = require(\"fs\");\nconst path = require(\"path\");\nconst axios = require(\"axios\");\nconst casperClientSDK = require(\"casper-js-sdk\");\n\nconst { Keys, CasperClient, CLPublicKey, DeployUtil } = require(\"casper-js-sdk\");\n\nconst RPC_API = \"http://159.65.203.12:7777/rpc\";\nconst STATUS_API = \"http://159.65.203.12:8888\";\n\nconst sendTransfer = async ({ from, to, amount }) => {\n    const casperClient = new CasperClient(RPC_API);\n\n    const folder = path.join(\"./\", \"casper_keys\");\n\n    // Read keys from the structure created in #Generating keys\n    const signKeyPair = Keys.Ed25519.parseKeyFiles(folder + \"/\" + from + \"_public.pem\", folder + \"/\" + from + \"_private.pem\");\n\n    // networkName can be taken from the status api\n    const response = await axios.get(STATUS_API + \"/status\");\n\n    let networkName = null;\n\n    if (response.status == 200) {\n        networkName = response.data.chainspec_name;\n    }\n\n    // For native-transfers the payment price is fixed\n    const paymentAmount = 100000000;\n\n    // transfer_id field in the request to tag the transaction and to correlate it to your back-end storage\n    const id = 187821;\n\n    // gasPrice for native transfers can be set to 1\n    const gasPrice = 1;\n\n    // Time that the deploy will remain valid for, in milliseconds\n    // The default value is 1800000 ms (30 minutes)\n    const ttl = 1800000;\n\n    let deployParams = new DeployUtil.DeployParams(signKeyPair.publicKey, networkName, gasPrice, ttl);\n\n    // We create a hex representation of the public key with an added prefix\n    const toPublicKey = CLPublicKey.fromHex(to);\n\n    const session = DeployUtil.ExecutableDeployItem.newTransfer(amount, toPublicKey, null, id);\n\n    const payment = DeployUtil.standardPayment(paymentAmount);\n    const deploy = DeployUtil.makeDeploy(deployParams, session, payment);\n    const signedDeploy = DeployUtil.signDeploy(deploy, signKeyPair);\n\n    // Here we are sending the signed deploy\n    return await casperClient.putDeploy(signedDeploy);\n};\n\nsendTransfer({\n    // Put here the public key of the sender's main purse. Note that it needs to have a balance greater than 2.5 CSPR\n    from: \"<sender-public-key>\",\n\n    // Put here the public key of the recipient's main purse. This account doesn't need to exist. If the key is correctly formatted, the network will create the account when the deploy is sent\n    to: \"<recipient-public-key>\",\n\n    // Minimal amount is 2.5 CSPR (1 CSPR = 1,000,000,000 motes)\n    amount: 25000000000,\n});\n```\n\n----------------------------------------\n\nTITLE: Defining AddUInt64 Object\nDESCRIPTION: This schema defines an object for adding a `u64` integer. It requires the `AddUInt64` property, which must be a non-negative integer in the `uint64` format. No additional properties are allowed.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/condor/jsonrpc-comp/rpc-1.5/schema/components.json.md#2025-04-22_snippet_18\n\nLANGUAGE: JSON\nCODE:\n```\n{\\n    \\\"description\\\": \\\"Adds the given `u64`.\\\",\\n    \\\"type\\\": \\\"object\\\",\\n    \\\"required\\\": [\\n        \\\"AddUInt64\\\"\\n    ],\\n    \\\"properties\\\": {\\n        \\\"AddUInt64\\\": {\\n            \\\"type\\\": \\\"integer\\\",\\n            \\\"format\\\": \\\"uint64\\\",\\n            \\\"minimum\\\": 0.0\\n        }\\n    },\\n    \\\"additionalProperties\\\": false\\n}\n```\n\n----------------------------------------\n\nTITLE: Withdrawing Bid Using Compiled Wasm in Bash\nDESCRIPTION: This snippet demonstrates how to withdraw a bid using the compiled Wasm 'withdraw_bid.wasm'. It includes required arguments such as node address, secret key, chain name, payment amount, session path, and session arguments.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/versioned_docs/version-2.0.0/operators/becoming-a-validator/unbonding.md#2025-04-22_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nsudo -u casper casper-client put-deploy \\\n--node-address <HOST:PORT> \\\n--secret-key <PATH> \\\n--chain-name <CHAIN_NAME> \\\n--payment-amount <PAYMENT_AMOUNT> \\\n--session-path <PATH>/casper-node/target/wasm32-unknown-unknown/release/withdraw_bid.wasm \\\n--session-arg=\"public_key:public_key='<PUBLIC_KEY_HEX>'\" \\\n--session-arg=\"amount:u512='<AMOUNT_TO_WITHDRAW>'\"\n```\n\n----------------------------------------\n\nTITLE: Listening to Event Stream with cURL\nDESCRIPTION: Uses cURL to stream events from a Casper node's Sidecar service.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/docs/developers/dapps/monitor-and-consume-events.md#2025-04-22_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\ncurl -s http://NODE_ADDRESS:PORT/events/\n```\n\n----------------------------------------\n\nTITLE: Cloning the CEP-18 Fungible Token Repository in Bash\nDESCRIPTION: Command to clone the CEP-18 (Casper Ecosystem Proposal 18) fungible token contract repository from GitHub.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/docs/resources/tokens/cep18/full-tutorial.md#2025-04-22_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\ngit clone https://github.com/casper-ecosystem/cep18.git\n```\n\n----------------------------------------\n\nTITLE: Testing the NCTL Setup in Bash\nDESCRIPTION: Command to view the status of nodes in the local Casper network, which helps verify that the setup is working correctly.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/condor/local-setup.md#2025-04-22_snippet_10\n\nLANGUAGE: bash\nCODE:\n```\nnctl-view-node-status\n```\n\n----------------------------------------\n\nTITLE: Defining JSON Schema for Addressable Entities\nDESCRIPTION: This code snippet represents a JSON schema for AddressableEntity, defining the possible address formats for entities within the Casper network. It includes different descriptions for addresses that represent system entity accounts, contracts, or userland smart contracts. No external dependencies are required.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/condor/jsonrpc-comp/rpc-2.0/schema/EntityAddr.json.md#2025-04-22_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"description\": \"The address for an AddressableEntity which contains the 32 bytes and tagging information.\",\n    \"anyOf\": [\n        {\n            \"description\": \"The address for a system entity account or contract.\",\n            \"type\": \"string\"\n        },\n        {\n            \"description\": \"The address of an entity that corresponds to an Account.\",\n            \"type\": \"string\"\n        },\n        {\n            \"description\": \"The address of an entity that corresponds to a Userland smart contract.\",\n            \"type\": \"string\"\n        }\n    ]\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Deploy Execution Metadata Schema in JSON\nDESCRIPTION: This JSON schema defines an object that represents the block hash, block height, and (optionally) the execution result where a specific deploy was executed. It enforces that both the block_hash and block_height fields are required, with block_height validated as an unsigned 64-bit integer and block_hash referencing a BlockHash schema. The execution_result field is optional and may be either a reference to an ExecutionResult schema or null. No additional properties are allowed, ensuring the object remains strictly defined. Dependencies include the referenced BlockHash and ExecutionResult schemas.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/condor/jsonrpc-comp/rpc-2.0/schema/ExecutionInfo.json.md#2025-04-22_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\\n    \\\"description\\\": \\\"The block hash and height in which a given deploy was executed, along with the execution result if known.\\\",\\n    \\\"type\\\": \\\"object\\\",\\n    \\\"required\\\": [\\n        \\\"block_hash\\\",\\n        \\\"block_height\\\"\\n    ],\\n    \\\"properties\\\": {\\n        \\\"block_hash\\\": {\\n            \\\"description\\\": \\\"The hash of the block in which the deploy was executed.\\\",\\n            \\\"allOf\\\": [\\n                {\\n                    \\\"$ref\\\": \\\"#/components/schemas/BlockHash\\\"\\n                }\\n            ]\\n        },\\n        \\\"block_height\\\": {\\n            \\\"description\\\": \\\"The height of the block in which the deploy was executed.\\\",\\n            \\\"type\\\": \\\"integer\\\",\\n            \\\"format\\\": \\\"uint64\\\",\\n            \\\"minimum\\\": 0\\n        },\\n        \\\"execution_result\\\": {\\n            \\\"description\\\": \\\"The execution result if known.\\\",\\n            \\\"anyOf\\\": [\\n                {\\n                    \\\"$ref\\\": \\\"#/components/schemas/ExecutionResult\\\"\\n                },\\n                {\\n                    \\\"type\\\": \\\"null\\\"\\n                }\\n            ]\\n        }\\n    },\\n    \\\"additionalProperties\\\": false\\n}\n```\n\n----------------------------------------\n\nTITLE: Key Type Permissions Table\nDESCRIPTION: Available actions and permissions for different key types in the Casper Network's global state.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/docs/concepts/serialization/types.md#2025-04-22_snippet_4\n\nLANGUAGE: markdown\nCODE:\n```\n| Key      | Type Available Actions  |\n| -------- | ----------------------- |\n| Account  | Read + Add (via API)    |\n| Hash     | Read                    |\n| URef     | Read + Write and/or Add |\n| Transfer | System                  |\n| Deploy   | System                  |\n| EraInfo  | System                  |\n| Balance  | Read (via API)          |\n| Bid      | System                  |\n| Withdraw | System                  |\n| Dictionary | Read (via API)        |\n| SystemContractRegistry | Read (via API)|\n| Unbond   | System                  |\n| ChainspecRegistry | Read (via API) |\n```\n\n----------------------------------------\n\nTITLE: Core Configuration Example for Private Network (TOML)\nDESCRIPTION: This TOML snippet shows a sample configuration block for the `[core]` section in `chainspec.toml` tailored for a private network. It disables unrestricted transfers, reward computation, and auction bids, sets refund/fee handling policies, and defines administrator accounts. This configuration prevents minting by regular users.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/docs/operators/setup-network/create-private.md#2025-04-22_snippet_1\n\nLANGUAGE: toml\nCODE:\n```\n[core]\nallow_unrestricted_transfers = false\ncompute_rewards = false\nallow_auction_bids = false\nrefund_handling = { type = \"refund\", refund_ratio = [1, 1] }\nfee_handling = { type = \"accumulate\" }\nadministrators = [\"ADMIN_PUBLIC_KEY\"]\n```\n\n----------------------------------------\n\nTITLE: Defining AssociatedKey Schema in JSON\nDESCRIPTION: JSON schema for the AssociatedKey object that represents a key associated with an account, including account hash reference and weight value.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/condor/jsonrpc-comp/rpc-1.5/schema.json.md#2025-04-22_snippet_54\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"type\": \"object\",\n  \"required\": [\n    \"account_hash\",\n    \"weight\"\n  ],\n  \"properties\": {\n    \"account_hash\": {\n      \"$ref\": \"#/components/schemas/AccountHash\"\n    },\n    \"weight\": {\n      \"type\": \"integer\",\n      \"format\": \"uint8\",\n      \"minimum\": 0.0\n    }\n  },\n  \"additionalProperties\": false\n}\n```\n\n----------------------------------------\n\nTITLE: Querying Account Details (Repeated Context) using Casper Client (Bash)\nDESCRIPTION: Queries the global state of a Casper node for details about a specific account after the key removal operation. Requires the node address and the latest state root hash.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/versioned_docs/version-2.0.0/resources/advanced/multi-sig/multi-sig-workflow.md#2025-04-22_snippet_20\n\nLANGUAGE: bash\nCODE:\n```\ncasper-client query-global-state \\\n--node-address https://node.testnet.casper.network/ \\\n--state-root-hash <STATE_ROOT_HASH> \\\n--key account-hash-<PRIMARY_ACCOUNT_HASH>\n```\n\n----------------------------------------\n\nTITLE: Querying Node Sync Status with curl and jq - Bash\nDESCRIPTION: This Bash command checks the local Casper node's synchronization status by retrieving the latest block info. Dependencies: `curl`, `jq`. It fetches the status from `localhost:8888/status` and extracts the `last_added_block_info` field. Compare this block height to external sources to validate sync completion. Requires the node's RPC server to be accessible locally.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/versioned_docs/version-1.5.X/operators/becoming-a-validator/recovering.md#2025-04-22_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\ncurl -s localhost:8888/status | jq .last_added_block_info\n```\n\n----------------------------------------\n\nTITLE: Resolving Dependency Errors Post Testing\nDESCRIPTION: This Rust compiler output and warning indicates outdated dependencies that can hinder project compilation. Use `cargo update` or address manually via `Cargo.toml` adjustments to ensure all dependencies align with the expected versions for seamless operation.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/versioned_docs/version-1.5.X/resources/advanced/cross-contract.md#2025-04-22_snippet_5\n\nLANGUAGE: rust\nCODE:\n```\nwarning: `tests` (bin \"integration-tests\" test) generated 2 warnings\nerror: could not compile `tests` due to 3 previous errors; 2 warnings emitted\nmake: *** [test] Error 101\n```\n\n----------------------------------------\n\nTITLE: Transaction Approval Structure\nDESCRIPTION: Shows the structure of transaction approvals in the Casper Network, containing the signer's public key and their cryptographic signature. This structure is used to validate the authenticity and authorization of transactions on the network.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/condor/jsonrpc-comp/rpc-2.0/schema.json.md#2025-04-22_snippet_6\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"approvals\": [\n    {\n      \"signer\": \"01d9bf2148748a85c89da5aad8ee0b0fc2d105fd39d41a4c796536354f0ae2900c\",\n      \"signature\": \"0137d3f468d8f8a6e63f4110d79be29b8c8428e9cd858a92049660e7851ae16a299640d1fc1c930ab6cb424f1a6eec0b194df74bede14f4af1b5133106f1280d0b\"\n    }\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Network Identity Configuration for Access Control\nDESCRIPTION: TOML configuration for network access control that restricts which nodes can join the network. This requires TLS certificates signed by a certificate authority.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/versioned_docs/version-1.5.X/operators/setup-network/create-private.md#2025-04-22_snippet_12\n\nLANGUAGE: toml\nCODE:\n```\n[network.identity]\ntls_certificate = \"local_node_cert.pem\"\nsecret_key = \"local_node.pem\"\nca_certificate = \"ca_cert.pem\"\n```\n\n----------------------------------------\n\nTITLE: Installing curl on Linux\nDESCRIPTION: Install the curl command-line tool for data transfer on Linux systems.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/versioned_docs/version-2.0.0/developers/prerequisites.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nsudo apt install curl\n```\n\n----------------------------------------\n\nTITLE: Specifying a Nightly Rust Toolchain Version in rust-toolchain File - Bash\nDESCRIPTION: This snippet illustrates the content to be placed in a project's 'rust-toolchain' file to specify the required Rust nightly toolchain version for contract development. No command is executed here; instead, the line is inserted as a plain string in the configuration file at the project's root. The version is crucial for compiling smart contracts using features exclusive to nightly releases, and having mismatched toolchains may lead to build failures.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/docs/developers/writing-onchain-code/getting-started.md#2025-04-22_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nnightly-2022-08-03\n```\n\n----------------------------------------\n\nTITLE: Building Validator Contracts\nDESCRIPTION: Commands to set up Rust environment and build the necessary validator contracts in release mode.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/versioned_docs/version-2.0.0/operators/setup/joining.md#2025-04-22_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ncd casper-node\nmake setup-rs\nmake build-client-contracts\n```\n\n----------------------------------------\n\nTITLE: Installing Casper SDK via Package Manager\nDESCRIPTION: Command to install the Casper Network SDK using Windows Package Manager.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/versioned_docs/version-1.5.X/developers/dapps/sdk/csharp-sdk.md#2025-04-22_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nInstall-Package Casper.Network.SDK\n```\n\n----------------------------------------\n\nTITLE: Defining TransactionHash Schema in JSON Schema\nDESCRIPTION: JSON Schema definition for the TransactionHash data structure, which provides a versioned wrapper for transaction or deploy hashes, supporting both Deploy and Version1 formats.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/condor/jsonrpc-comp/rpc-2.0/schema.json.md#2025-04-22_snippet_45\n\nLANGUAGE: json\nCODE:\n```\n\"TransactionHash\": {\n  \"description\": \"A versioned wrapper for a transaction hash or deploy hash.\",\n  \"oneOf\": [\n    {\n      \"description\": \"A deploy hash.\",\n      \"type\": \"object\",\n      \"required\": [\n        \"Deploy\"\n      ],\n      \"properties\": {\n        \"Deploy\": {\n          \"$ref\": \"#/components/schemas/DeployHash\"\n        }\n      },\n      \"additionalProperties\": false\n    },\n    {\n      \"description\": \"A version 1 transaction hash.\",\n      \"type\": \"object\",\n      \"required\": [\n        \"Version1\"\n      ],\n      \"properties\": {\n        \"Version1\": {\n          \"$ref\": \"#/components/schemas/TransactionV1Hash\"\n        }\n      },\n      \"additionalProperties\": false\n    }\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Installing pkg-config on MacOS\nDESCRIPTION: Command to install pkg-config, a program used for compiling and linking against libraries, on MacOS using Homebrew.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/versioned_docs/version-2.0.0/developers/dapps/setup-nctl.md#2025-04-22_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n$ brew install pkg-config\n```\n\n----------------------------------------\n\nTITLE: Example Deploy Approvals Section (JSON)\nDESCRIPTION: This JSON snippet shows the structure of the `approvals` section within a Casper deploy. It lists the signers (by public key) and their corresponding signatures, which constitute the authorization keys for that deploy.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/versioned_docs/version-1.5.X/resources/advanced/list-auth-keys-tutorial.md#2025-04-22_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n```json\n\"approvals\": [\n    {\n      \"signer\": \"02021a4da3d6f32ea3ebd2519e1a37a1b811671085bf4f1cf2a36b931344a99b756a\",\n      \"signature\": \"02df8cdf0bff3bd93e831d24563d5acbefa0ed13814550e910d03208d5fb3c11770dd3d918784ec84342e53666eacf59aeecbf4ce0cdd60e167c4a4b20e4b8f481\"\n    }\n]\n```\n```\n\n----------------------------------------\n\nTITLE: Sample Request for Fetching State Root Hash in Bash\nDESCRIPTION: Example usage of the `casper-client get-state-root-hash` command, specifying a local node address (`http://localhost:11101`) to retrieve the current state root hash.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/versioned_docs/version-2.0.0/developers/cli/querying-global-state.md#2025-04-22_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n```bash\ncasper-client get-state-root-hash --node-address http://localhost:11101\n```\n```\n\n----------------------------------------\n\nTITLE: Defining Action Thresholds Schema in JSON\nDESCRIPTION: This JSON schema defines the structure for specifying action thresholds. It requires 'deployment' and 'key_management' properties, both of which must be non-negative integers (uint8). Additional properties are not allowed.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/condor/jsonrpc-comp/rpc-1.5/schema/ActionThresholds.json.md#2025-04-22_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"description\": \"Thresholds that have to be met when executing an action of a certain type.\",\n    \"type\": \"object\",\n    \"required\": [\n        \"deployment\",\n        \"key_management\"\n    ],\n    \"properties\": {\n        \"deployment\": {\n            \"type\": \"integer\",\n            \"format\": \"uint8\",\n            \"minimum\": 0\n        },\n        \"key_management\": {\n            \"type\": \"integer\",\n            \"format\": \"uint8\",\n            \"minimum\": 0\n        }\n    },\n    \"additionalProperties\": false\n}\n```\n\n----------------------------------------\n\nTITLE: Decreasing CEP-18 Token Allowance using Casper Client\nDESCRIPTION: This command decreases the designated allowance for a provided account. It specifies the spender's account hash and the amount of CEP-18 tokens to decrease from the authorized account's allowance.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/docs/resources/tokens/cep18/transfer.md#2025-04-22_snippet_8\n\nLANGUAGE: bash\nCODE:\n```\ncasper-client put-deploy -n http://<NODE IP>:<PORT> \\\n--secret-key ~/casper/demo/user_a/secret_key.pem \\\n--session-package-name \"cep18_contract_package_CEP18\" \\\n--session-entry-point \"decrease_allowance\" \\\n--session-arg \"spender:key='account-hash-683f53f56926f54ef9584b07585b025c68415dc05f7b2e56749153574b83d5cd'\" \\\n--session-arg \"amount:U256='10'\" \\\n--chain-name <CHAIN NAME> \\\n--payment-amount 1000000000\n```\n\n----------------------------------------\n\nTITLE: Compiling NCTL Binary Scripts\nDESCRIPTION: Command to compile both the casper-node and casper-client in release mode, necessary for NCTL operation.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/versioned_docs/version-2.0.0/developers/dapps/setup-nctl.md#2025-04-22_snippet_21\n\nLANGUAGE: bash\nCODE:\n```\n$ nctl-compile\n```\n\n----------------------------------------\n\nTITLE: Verifying Casper Network Deploy\nDESCRIPTION: Check the status of a deploy using its hash with the Casper client.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/versioned_docs/version-1.5.X/resources/beginner/counter-testnet/walkthrough.md#2025-04-22_snippet_6\n\nLANGUAGE: rust\nCODE:\n```\ncasper-client get-deploy \\\n    --node-address http://[NODE_IP]:7777 [DEPLOY_HASH]\n```\n\n----------------------------------------\n\nTITLE: Querying the Faucet Account Hash - Bash\nDESCRIPTION: This command queries NCTL to retrieve the faucet account's hash and associated details, including secret key file paths. It is required as input for subsequent Casper CLI commands that interact with the state on the local network.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/docs/resources/beginner/counter/walkthrough.md#2025-04-22_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nnctl-view-faucet-account\n```\n\n----------------------------------------\n\nTITLE: Retrieving Transaction Results via Casper RPC - JSON\nDESCRIPTION: This snippet shows a sample JSON-RPC 2.0 response for the info_get_transaction_result method, including comprehensive transaction data and the results of its execution. Its dependencies include access to a Casper node supporting the appropriate RPC version. Key parameters are 'api_version', transaction details, and execution_info, which contains the outcome and effects of processing the transaction. Outputs include detailed nested fields, and the format strictly adheres to JSON-RPC standards.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/docs/developers/json-rpc/json-rpc-informational.md#2025-04-22_snippet_15\n\nLANGUAGE: json\nCODE:\n```\n{\\n  \"id\": 1,\\n  \"jsonrpc\": \"2.0\",\\n  \"result\": {\\n    \"name\": \"info_get_transaction_result\",\\n    \"value\": {\\n      \"api_version\": \"2.0.0\",\\n      \"transaction\": {\\n        \"Version1\": {\\n          \"hash\": \"f5582cb81a5abda63ebaa4edb3b05210ecbd63ffb8dd17bfbeb3b867f4014468\",\\n          \"header\": {\\n            \"chain_name\": \"casper-example\",\\n            \"timestamp\": \"2020-11-17T00:39:24.072Z\",\\n            \"ttl\": \"1h\",\\n            \"body_hash\": \"aa24833ffbf31d62c8c8c4265349e7c09cd71952fcbce6f7b12daf5e340bf2cc\",\\n            \"pricing_mode\": {\\n              \"Fixed\": {\\n                \"gas_price_tolerance\": 5\\n              }\\n            },\\n            \"initiator_addr\": {\\n              \"PublicKey\": \"01d9bf2148748a85c89da5aad8ee0b0fc2d105fd39d41a4c796536354f0ae2900c\"\\n            }\\n          },\\n          \"body\": {\\n            \"args\": [\\n              [\\n                \"source\",\\n                {\\n                  \"cl_type\": {\\n                    \"Option\": \"URef\"\\n                  },\\n                  \"bytes\": \"010a0a0a0a0a0a0a0a0a0a0a0a0a0a0a0a0a0a0a0a0a0a0a0a0a0a0a0a0a0a0a0a07\",\\n                  \"parsed\": \"uref-0a0a0a0a0a0a0a0a0a0a0a0a0a0a0a0a0a0a0a0a0a0a0a0a0a0a0a0a0a0a0a0a-007\"\\n                }\\n              ],\\n              [\\n                \"target\",\\n                {\\n                  \"cl_type\": \"URef\",\\n                  \"bytes\": \"1b1b1b1b1b1b1b1b1b1b1b1b1b1b1b1b1b1b1b1b1b1b1b1b1b1b1b1b1b1b1b1b00\",\\n                  \"parsed\": \"uref-1b1b1b1b1b1b1b1b1b1b1b1b1b1b1b1b1b1b1b1b1b1b1b1b1b1b1b1b1b1b1b1b-000\"\\n                }\\n              ],\\n              [\\n                \"amount\",\\n                {\\n                  \"cl_type\": \"U512\",\\n                  \"bytes\": \"0500ac23fc06\",\\n                  \"parsed\": \"30000000000\"\\n                }\\n              ],\\n              [\\n                \"id\",\\n                {\\n                  \"cl_type\": {\\n                    \"Option\": \"U64\"\\n                  },\\n                  \"bytes\": \"01e703000000000000\",\\n                  \"parsed\": 999\\n                }\\n              ]\\n            ],\\n            \"target\": \"Native\",\\n            \"entry_point\": \"Transfer\",\\n            \"transaction_category\": 0,\\n            \"scheduling\": \"Standard\"\\n          },\\n          \"approvals\": [\\n            {\\n              \"signer\": \"01d9bf2148748a85c89da5aad8ee0b0fc2d105fd39d41a4c796536354f0ae2900c\",\\n              \"signature\": \"0137d3f468d8f8a6e63f4110d79be29b8c8428e9cd858a92049660e7851ae16a299640d1fc1c930ab6cb424f1a6eec0b194df74bede14f4af1b5133106f1280d0b\"\\n            }\\n          ]\\n        }\\n      },\\n      \"execution_info\": {\\n        \"block_hash\": \"0744fcb72af43c5cc372039bc5a8bfee48808a9ce414acc0d6338a628c20eb42\",\\n        \"block_height\": 10,\\n        \"execution_result\": {\\n          \"Version2\": {\\n            \"initiator\": {\\n              \"PublicKey\": \"01d9bf2148748a85c89da5aad8ee0b0fc2d105fd39d41a4c796536354f0ae2900c\"\\n            },\\n            \"error_message\": null,\\n            \"limit\": \"123456\",\\n            \"consumed\": \"100000\",\\n            \"cost\": \"246912\",\\n            \"payment\": [\\n              {\\n                \"source\": \"uref-0101010101010101010101010101010101010101010101010101010101010101-001\"\\n              }\\n            ],\\n            \"transfers\": [\\n              {\\n                \"Version2\": {\\n                  \"transaction_hash\": {\\n                    \"Version1\": \"0101010101010101010101010101010101010101010101010101010101010101\"\\n                  },\\n                  \"from\": {\\n                    \"AccountHash\": \"account-hash-0202020202020202020202020202020202020202020202020202020202020202\"\\n                  },\\n                  \"to\": \"account-hash-0303030303030303030303030303030303030303030303030303030303030303\",\\n                  \"source\": \"uref-0a0a0a0a0a0a0a0a0a0a0a0a0a0a0a0a0a0a0a0a0a0a0a0a0a0a0a0a0a0a0a0a-007\",\\n                  \"target\": \"uref-1b1b1b1b1b1b1b1b1b1b1b1b1b1b1b1b1b1b1b1b1b1b1b1b1b1b1b1b1b1b1b1b-000\",\\n                  \"amount\": \"1000000000000\",\\n                  \"gas\": \"2500000000\",\\n                  \"id\": 999\\n                }\\n              }\\n            ],\\n            \"size_estimate\": 186,\\n            \"effects\": [\\n              {\\n                \"key\": \"account-hash-2c4a11c062a8a337bfc97e27fd66291caeb2c65865dcb5d3ef3759c4c97efecb\",\\n                \"kind\": {\\n                  \"AddUInt64\": 8\\n                }\\n              },\\n              {\\n                \"key\": \"deploy-af684263911154d26fa05be9963171802801a0b6aff8f199b7391eacb8edc9e1\",\\n                \"kind\": \"Identity\"\\n              }\\n            ]\\n          }\\n        }\\n      }\\n    }\\n  }  \\n}\\n\n```\n\n----------------------------------------\n\nTITLE: Defining Basic Data Type Schemas in JSON\nDESCRIPTION: Schema definitions for basic data types used in the Casper Network API including TransferAddr, URef, and U512. These simple schema components are referenced by other more complex schemas.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/condor/jsonrpc-comp/rpc-2.0/schema.json.md#2025-04-22_snippet_52\n\nLANGUAGE: json\nCODE:\n```\n\"TransferAddr\": {\n  \"description\": \"Hex-encoded version 1 transfer address.\",\n  \"type\": \"string\"\n},\n\"URef\": {\n  \"description\": \"Hex-encoded, formatted URef.\",\n  \"type\": \"string\"\n},\n\"U512\": {\n  \"description\": \"Decimal representation of a 512-bit integer.\",\n  \"type\": \"string\"\n}\n```\n\n----------------------------------------\n\nTITLE: URef Example in Casper Network\nDESCRIPTION: Example of a URef with full READ_ADD_WRITE access rights. URef values serialize as the concatenation of their address (a fixed-length list of u8) and a single byte tag representing access rights.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/versioned_docs/version-1.5.X/concepts/serialization-standard.md#2025-04-22_snippet_8\n\nLANGUAGE: text\nCODE:\n```\n    -   E.g. `uref-974019c976b5f26412ce486158d2431967af35d91387dae8cbcd43c20fce6452-007` shows a `URef` with full `READ_ADD_WRITE` rights.\n```\n\n----------------------------------------\n\nTITLE: Navigating to Project Directory\nDESCRIPTION: Command to change to the project directory after creation, where 'vite-project' should be replaced with the actual project name.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/versioned_docs/version-2.0.0/developers/dapps/template-frontend.md#2025-04-22_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\ncd vite-project/\n```\n\n----------------------------------------\n\nTITLE: Defining Casper Contract Schema in JSON\nDESCRIPTION: JSON Schema definition for a Casper Network smart contract, specifying contract package hash, WASM hash, named keys, entry points and protocol version. This schema ensures proper contract structure and type validation.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/condor/jsonrpc-comp/rpc-2.0/schema.json.md#2025-04-22_snippet_66\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"description\": \"Methods and type signatures supported by a contract.\",\n  \"type\": \"object\",\n  \"required\": [\n    \"contract_package_hash\",\n    \"contract_wasm_hash\",\n    \"entry_points\",\n    \"named_keys\",\n    \"protocol_version\"\n  ],\n  \"properties\": {\n    \"contract_package_hash\": {\n      \"$ref\": \"#/components/schemas/ContractPackageHash\"\n    },\n    \"contract_wasm_hash\": {\n      \"$ref\": \"#/components/schemas/ContractWasmHash\"\n    },\n    \"named_keys\": {\n      \"$ref\": \"#/components/schemas/NamedKeys\"\n    },\n    \"entry_points\": {\n      \"$ref\": \"#/components/schemas/Array_of_NamedEntryPoint\"\n    },\n    \"protocol_version\": {\n      \"$ref\": \"#/components/schemas/ProtocolVersion\"\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Listing Casper Complex CLTypes\nDESCRIPTION: Enumerates the complex or composite CLTypes supported by Casper. These types allow for more structured data representation, including optional values (`Option`), variable-length lists (`List`), fixed-length arrays (`ByteArray`), results (`Result`), key-value maps (`Map`), and tuples of varying arity (`Tuple1`, `Tuple2`, `Tuple3`). Each complex type is typically composed of one or more other CLTypes.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/versioned_docs/version-1.5.X/developers/json-rpc/types_cl.md#2025-04-22_snippet_1\n\nLANGUAGE: text\nCODE:\n```\n* `Option` Option of a `CLType`.\n\n* `List` Variable-length list of a single `CLType` (comparable to a `Vec`).\n\n* `ByteArray` Fixed-length list of a single `CLType` (comparable to a Rust array).\n\n* `Result` `Result` with `Ok` and `Err` variants of `CLType`'s.\n\n* `Map` Map with keys of a single `CLType` and values of a single `CLType`.\n\n* `Tuple1` 1-ary tuple of a `CLType`.\n\n* `Tuple2` 2-ary tuple of `CLType`s.\n\n* `Tuple3` 3-ary tuple of `CLType`s.\n```\n\n----------------------------------------\n\nTITLE: Undelegating Tokens Using Compiled Wasm\nDESCRIPTION: Command to undelegate tokens using the compiled undelegate.wasm file. This method requires building the casper-node contracts and costs more than using the system auction contract.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/docs/developers/cli/undelegate.md#2025-04-22_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\ncasper-client put-deploy \\\n--node-address <HOST:PORT> \\\n--secret-key <PATH> \\\n--chain-name <CHAIN_NAME> \\\n--payment-amount <PAYMENT_AMOUNT_IN_MOTES> \\\n--session-path <PATH_TO_WASM>/undelegate.wasm \\\n--session-arg \"validator:public_key='<HEX_ENCODED_VALIDATOR_PULIC_KEY>'\" \\\n--session-arg \"amount:u512='<AMOUNT_TO_UNDELEGATE>'\" \\\n--session-arg \"delegator:public_key='<HEX_ENCODED_DELEGATOR_PULIC_KEY>'\"\n```\n\n----------------------------------------\n\nTITLE: Example JSON Data with Transfer Keys and Cost\nDESCRIPTION: A JSON snippet demonstrating a data structure containing a list of transfer identifiers (formatted strings) and an associated cost value. This specific example appears within a larger JSON structure, likely related to deployment or execution costs within the Casper Network context.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/condor/jsonrpc-comp/rpc-1.5/schema.json.md#2025-04-22_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n                        \"transfer-5959595959595959595959595959595959595959595959595959595959595959\",\n                        \"transfer-8282828282828282828282828282828282828282828282828282828282828282\"\n                      ],\n                      \"cost\": \"123456\"\n                    }\n                  }\n                }\n              ]\n            }\n          }\n        }\n      ]\n```\n\n----------------------------------------\n\nTITLE: Defining CLType Result Schema in JSON\nDESCRIPTION: JSON schema definition for a Result type in Casper's type system. This represents a Result with Ok and Err variants of CLTypes.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/condor/jsonrpc-comp/rpc-1.5/schema/components.json.md#2025-04-22_snippet_6\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"description\": \"`Result` with `Ok` and `Err` variants of `CLType`s.\",\n    \"type\": \"object\",\n    \"required\": [\n        \"Result\"\n    ],\n    \"properties\": {\n        \"Result\": {\n            \"type\": \"object\",\n            \"required\": [\n                \"err\",\n                \"ok\"\n            ],\n            \"properties\": {\n                \"ok\": {\n                    \"$ref\": \"#/components/schemas/CLType\"\n                },\n                \"err\": {\n                    \"$ref\": \"#/components/schemas/CLType\"\n                }\n            },\n            \"additionalProperties\": false\n        }\n    },\n    \"additionalProperties\": false\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Contract Object Schema with References in JSON\nDESCRIPTION: This JSON snippet specifies the schema for a contract object supported by the Casper Network, including expected properties like action thresholds, keys, hashes, and versioning. It uses JSON Schema referencing to ensure each property aligns with a predefined type, enforcing consistency and reusability. Dependencies include properly defined schema components for all $ref fields; inputs must match required fields, and output is used for validating objects representing contract metadata.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/condor/jsonrpc-comp/rpc-2.0/schema/AddressableEntity.json.md#2025-04-22_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\\n    \\\"description\\\": \\\"Methods and type signatures supported by a contract.\\\",\\n    \\\"type\\\": \\\"object\\\",\\n    \\\"required\\\": [\\n        \\\"action_thresholds\\\",\\n        \\\"associated_keys\\\",\\n        \\\"byte_code_hash\\\",\\n        \\\"entity_kind\\\",\\n        \\\"main_purse\\\",\\n        \\\"message_topics\\\",\\n        \\\"package_hash\\\",\\n        \\\"protocol_version\\\"\\n    ],\\n    \\\"properties\\\": {\\n        \\\"protocol_version\\\": {\\n            \\\"$ref\\\": \\\"#/components/schemas/ProtocolVersion\\\"\\n        },\\n        \\\"entity_kind\\\": {\\n            \\\"$ref\\\": \\\"#/components/schemas/EntityKind\\\"\\n        },\\n        \\\"package_hash\\\": {\\n            \\\"$ref\\\": \\\"#/components/schemas/PackageHash\\\"\\n        },\\n        \\\"byte_code_hash\\\": {\\n            \\\"$ref\\\": \\\"#/components/schemas/ByteCodeHash\\\"\\n        },\\n        \\\"main_purse\\\": {\\n            \\\"$ref\\\": \\\"#/components/schemas/URef\\\"\\n        },\\n        \\\"associated_keys\\\": {\\n            \\\"$ref\\\": \\\"#/components/schemas/EntityAssociatedKeys\\\"\\n        },\\n        \\\"action_thresholds\\\": {\\n            \\\"$ref\\\": \\\"#/components/schemas/EntityActionThresholds\\\"\\n        },\\n        \\\"message_topics\\\": {\\n            \\\"$ref\\\": \\\"#/components/schemas/Array_of_MessageTopic\\\"\\n        }\\n    }\\n} \n```\n\n----------------------------------------\n\nTITLE: Calling Contract by Package Hash - Basic Structure\nDESCRIPTION: Basic command structure for calling a contract using its package hash. Allows specifying the entry point and version number.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/versioned_docs/version-2.0.0/developers/cli/calling-contracts.md#2025-04-22_snippet_5\n\nLANGUAGE: rust\nCODE:\n```\ncasper-client put-deploy \\\n    --node-address [NODE_SERVER_ADDRESS] \\\n    --chain-name [CHAIN_NAME] \\\n    --secret-key [KEY_PATH]/secret_key.pem \\\n    --payment-amount [PAYMENT_AMOUNT_IN_MOTES] \\\n    --session-package-hash [HEX_STRING] \\\n    --session-entry-point [ENTRY_POINT_FUNCTION] \\\n    --session-version [INTEGER]\n```\n\n----------------------------------------\n\nTITLE: Checking Current Open Files Limit\nDESCRIPTION: Command to check the current nofile (number of open files) limit for a specific process ID\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/versioned_docs/version-2.0.0/operators/setup/open-files.md#2025-04-22_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nsudo prlimit -n -p <PID>\n```\n\n----------------------------------------\n\nTITLE: Describing Validator Reward JSON Structure\nDESCRIPTION: Defines a JSON schema that includes a validator's public key and the associated reward amount. The schema expects an integer for the reward, compliant with uint64, with a minimum of zero. The validator field references a separate schema for the public key. This structure is critical for ensuring integrative data management of validator contributions in the Casper network.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/condor/jsonrpc-comp/rpc-2.0/schema/EraReward.json.md#2025-04-22_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"description\": \"A validator's public key paired with a measure of the value of its contribution to consensus, as a fraction of the configured maximum block reward.\",\n    \"type\": \"object\",\n    \"required\": [\n        \"amount\",\n        \"validator\"\n    ],\n    \"properties\": {\n        \"validator\": {\n            \"description\": \"The validator's public key.\",\n            \"allOf\": [\n                {\n                    \"$ref\": \"#/components/schemas/PublicKey\"\n                }\n            ]\n        },\n        \"amount\": {\n            \"description\": \"The reward amount.\",\n            \"type\": \"integer\",\n            \"format\": \"uint64\",\n            \"minimum\": 0\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Admin Accounts Configuration in Chainspec\nDESCRIPTION: Adds administrator accounts necessary for private network operations in 'chainspec.toml'. Administrators control validator accounts and handle token management. Tightly bound to 'core' in chainspec.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/versioned_docs/version-1.5.X/operators/setup-network/create-private.md#2025-04-22_snippet_6\n\nLANGUAGE: toml\nCODE:\n```\n[core]\nadministrators = [\"NEW_ACCOUNT_PUBLIC_KEY\"]\n```\n\n----------------------------------------\n\nTITLE: Defining Approval Schema in JSON\nDESCRIPTION: JSON schema definition for an Approval structure in Casper's system. This contains a signature of a deploy hash and the public key of the signer.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/condor/jsonrpc-comp/rpc-1.5/schema/components.json.md#2025-04-22_snippet_11\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"description\": \"A struct containing a signature of a deploy hash and the public key of the signer.\",\n    \"type\": \"object\",\n    \"required\": [\n        \"signature\",\n        \"signer\"\n    ],\n    \"properties\": {\n        \"signer\": {\n            \"$ref\": \"#/components/schemas/PublicKey\"\n        },\n        \"signature\": {\n            \"$ref\": \"#/components/schemas/Signature\"\n        }\n    },\n    \"additionalProperties\": false\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Array Schema with OpenAPI in JSON\nDESCRIPTION: This snippet defines a JSON schema for an array type using OpenAPI standards, where each array item is a reference to the MessageTopic schema via the $ref property. It requires OpenAPI or Swagger support to resolve references, and expects that MessageTopic is a defined schema component elsewhere in the document. The schema helps API designers specify arrays with custom object types, ensuring input validation and consistent API documentation.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/condor/jsonrpc-comp/rpc-2.0/schema/Array_of_MessageTopic.json.md#2025-04-22_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\\n    \\\"type\\\": \\\"array\\\",\\n    \\\"items\\\": {\\n        \\\"$ref\\\": \\\"#/components/schemas/MessageTopic\\\"\\n    }\\n} \n```\n\n----------------------------------------\n\nTITLE: Defining JSON Schema for a Casper Network Proof\nDESCRIPTION: This JSON Schema defines the structure for a 'Proof' object, representing a block's finality signature in the Casper Network. It mandates the presence of 'public_key' and 'signature' properties, referencing predefined schemas for 'PublicKey' and 'Signature' respectively using '$ref'. No additional properties beyond these two are permitted ('additionalProperties': false).\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/condor/jsonrpc-comp/rpc-1.5/schema/JsonProof.json.md#2025-04-22_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"description\": \"A JSON-friendly representation of a proof, i.e. a block's finality signature.\",\n    \"type\": \"object\",\n    \"required\": [\n        \"public_key\",\n        \"signature\"\n    ],\n    \"properties\": {\n        \"public_key\": {\n            \"$ref\": \"#/components/schemas/PublicKey\"\n        },\n        \"signature\": {\n            \"$ref\": \"#/components/schemas/Signature\"\n        }\n    },\n    \"additionalProperties\": false\n}\n```\n\n----------------------------------------\n\nTITLE: Verifying Intersection of Authorization Keys in Rust\nDESCRIPTION: This snippet verifies the result of an entry point call by checking the intersection of authorization keys. It retrieves the stored value, converts it to the expected type, and compares it with the expected result.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/docs/resources/advanced/list-auth-keys-tutorial.md#2025-04-22_snippet_17\n\nLANGUAGE: rust\nCODE:\n```\nlet intersection_receipt: Key = *builder\n    .get_expected_account(account_addr_1)\n    .named_keys()\n    .get(INTERSECTION_RECEIPT)\n    .expect(\"must have this entry in named keys\");\n\nlet actual_intersection = builder\n    .query(None, intersection_receipt, &[])\n    .expect(\"must have stored_value\")\n    .as_cl_value()\n    .map(|intersection_cl_value| {\n        CLValue::into_t::<Vec<AccountHash>>(intersection_cl_value.clone())\n    })\n    .unwrap()\n    .unwrap();\n\nlet expected_intersection = vec![*DEFAULT_ACCOUNT_ADDR];\n\nassert_eq!(actual_intersection, expected_intersection);\n```\n\n----------------------------------------\n\nTITLE: Defining EntityIdentifier Schema in JSON\nDESCRIPTION: Defines the schema for EntityIdentifier, which represents the identifier of an addressable entity. It can be a public key, account hash, or entity address.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/condor/jsonrpc-comp/rpc-2.0/schema.json.md#2025-04-22_snippet_78\n\nLANGUAGE: json\nCODE:\n```\n\"EntityIdentifier\": {\n  \"description\": \"Identifier of an addressable entity.\",\n  \"oneOf\": [\n    {\n      \"description\": \"The public key of an account.\",\n      \"type\": \"object\",\n      \"required\": [\n        \"PublicKey\"\n      ],\n      \"properties\": {\n        \"PublicKey\": {\n          \"$ref\": \"#/components/schemas/PublicKey\"\n        }\n      },\n      \"additionalProperties\": false\n    },\n    {\n      \"description\": \"The account hash of an account.\",\n      \"type\": \"object\",\n      \"required\": [\n        \"AccountHash\"\n      ],\n      \"properties\": {\n        \"AccountHash\": {\n          \"$ref\": \"#/components/schemas/AccountHash\"\n        }\n      },\n      \"additionalProperties\": false\n    },\n    {\n      \"description\": \"The address of an addressable entity.\",\n      \"type\": \"object\",\n      \"required\": [\n        \"EntityAddr\"\n      ],\n      \"properties\": {\n        \"EntityAddr\": {\n          \"$ref\": \"#/components/schemas/EntityAddr\"\n        }\n      },\n      \"additionalProperties\": false\n    }\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Casper Network Dictionary Item Lookup Schema in JSON\nDESCRIPTION: This JSON schema defines the structure for specifying dictionary item lookup options within the Casper Network. It uses the `anyOf` keyword to allow one of four mutually exclusive methods: AccountNamedKey (requiring account key, dictionary name, and item key), ContractNamedKey (requiring contract key, dictionary name, and item key), URef (requiring seed URef and item key), or Dictionary (requiring a unique dictionary item key string). This schema validates the input parameters used for dictionary lookups on the network.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/condor/jsonrpc-comp/rpc-1.5/schema/DictionaryIdentifier.json.md#2025-04-22_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"description\": \"Options for dictionary item lookups.\",\n    \"anyOf\": [\n        {\n            \"description\": \"Lookup a dictionary item via an Account's named keys.\",\n            \"type\": \"object\",\n            \"required\": [\n                \"AccountNamedKey\"\n            ],\n            \"properties\": {\n                \"AccountNamedKey\": {\n                    \"type\": \"object\",\n                    \"required\": [\n                        \"dictionary_item_key\",\n                        \"dictionary_name\",\n                        \"key\"\n                    ],\n                    \"properties\": {\n                        \"key\": {\n                            \"description\": \"The account key as a formatted string whose named keys contains dictionary_name.\",\n                            \"type\": \"string\"\n                        },\n                        \"dictionary_name\": {\n                            \"description\": \"The named key under which the dictionary seed URef is stored.\",\n                            \"type\": \"string\"\n                        },\n                        \"dictionary_item_key\": {\n                            \"description\": \"The dictionary item key formatted as a string.\",\n                            \"type\": \"string\"\n                        }\n                    }\n                }\n            },\n            \"additionalProperties\": false\n        },\n        {\n            \"description\": \"Lookup a dictionary item via a Contract's named keys.\",\n            \"type\": \"object\",\n            \"required\": [\n                \"ContractNamedKey\"\n            ],\n            \"properties\": {\n                \"ContractNamedKey\": {\n                    \"type\": \"object\",\n                    \"required\": [\n                        \"dictionary_item_key\",\n                        \"dictionary_name\",\n                        \"key\"\n                    ],\n                    \"properties\": {\n                        \"key\": {\n                            \"description\": \"The contract key as a formatted string whose named keys contains dictionary_name.\",\n                            \"type\": \"string\"\n                        },\n                        \"dictionary_name\": {\n                            \"description\": \"The named key under which the dictionary seed URef is stored.\",\n                            \"type\": \"string\"\n                        },\n                        \"dictionary_item_key\": {\n                            \"description\": \"The dictionary item key formatted as a string.\",\n                            \"type\": \"string\"\n                        }\n                    }\n                }\n            },\n            \"additionalProperties\": false\n        },\n        {\n            \"description\": \"Lookup a dictionary item via its seed URef.\",\n            \"type\": \"object\",\n            \"required\": [\n                \"URef\"\n            ],\n            \"properties\": {\n                \"URef\": {\n                    \"type\": \"object\",\n                    \"required\": [\n                        \"dictionary_item_key\",\n                        \"seed_uref\"\n                    ],\n                    \"properties\": {\n                        \"seed_uref\": {\n                            \"description\": \"The dictionary's seed URef.\",\n                            \"type\": \"string\"\n                        },\n                        \"dictionary_item_key\": {\n                            \"description\": \"The dictionary item key formatted as a string.\",\n                            \"type\": \"string\"\n                        }\n                    }\n                }\n            },\n            \"additionalProperties\": false\n        },\n        {\n            \"description\": \"Lookup a dictionary item via its unique key.\",\n            \"type\": \"object\",\n            \"required\": [\n                \"Dictionary\"\n            ],\n            \"properties\": {\n                \"Dictionary\": {\n                    \"type\": \"string\"\n                }\n            },\n            \"additionalProperties\": false\n        }\n    ]\n}\n```\n\n----------------------------------------\n\nTITLE: Modeling a Primary and Associated Key on Casper in JSON\nDESCRIPTION: This snippet showcases a Casper account with a primary key (weight 2) and a secondary, associated key (weight 1). The primary key is sufficient to update account details (key management threshold: 2), while both keys can independently meet the deployment threshold (1) for signing deploys. Only the primary key can perform key management, and named keys remain empty. The structure requires no additional dependencies and demonstrates partial delegation of signature capabilities.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/docs/resources/advanced/multi-sig/other-scenarios.md#2025-04-22_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\\n\\\"Account\\\": {\\n   \\\"account_address\\\": \\\"account-hash-a1…\\\",\\n   \\\"action_thresholds\\\": {\\n         \\\"deployment\\\": 1,\\n         \\\"key_management\\\": 2\\n   },\\n   \\\"associated_keys\\\": [\\n      {\\n         \\\"account_address\\\": \\\"account-hash-a1…\\\", // primary key for key management\\n         \\\"weight\\\": 2\\n      },\\n      {\\n         \\\"account_address\\\": \\\"account-hash-b2…\\\", // associated key used for deploys\\n         \\\"weight\\\": 1\\n      }\\n   ],\\n   \\\"main_purse\\\": \\\"uref-1234…\\\",\\n   \\\"named_keys\\\": []\\n}\\n}\n```\n\n----------------------------------------\n\nTITLE: Testing NCTL Setup\nDESCRIPTION: This snippet shows how to test the NCTL setup by viewing the status of network nodes.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/src/pages/condor/setting-up-condor-local.md#2025-04-22_snippet_8\n\nLANGUAGE: bash\nCODE:\n```\nnctl-view-node-status\n```\n\n----------------------------------------\n\nTITLE: Checking NCTL Node Status\nDESCRIPTION: Command to verify the status of NCTL nodes before testing\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/docs/developers/dapps/nctl-test.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnctl-status\n```\n\n----------------------------------------\n\nTITLE: Installing Casper Python SDK with pip\nDESCRIPTION: Command to install the pycspr library, which is the Python SDK for interacting with Casper Networks. Requires Python 3.9+.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/versioned_docs/version-2.0.0/developers/dapps/sdk/python-sdk.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n    pip3 install pycspr\n```\n\n----------------------------------------\n\nTITLE: Configuring Refund Handling\nDESCRIPTION: TOML configuration for managing deploy execution refunds with a specified refund ratio for gas fee distribution.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/versioned_docs/version-2.0.0/operators/setup-network/create-private.md#2025-04-22_snippet_2\n\nLANGUAGE: toml\nCODE:\n```\n[core]\nrefund_handling = { type = \"refund\", refund_ratio = [1, 1] }\n```\n\n----------------------------------------\n\nTITLE: Minting Additional CEP-18 Tokens (Uncommented)\nDESCRIPTION: A concise version of the `casper-client` command to execute the `mint` entry point of a CEP-18 contract package. This command excludes inline comments but performs the same function as the commented version, requiring node address, caller's secret key, package name, entry point, owner, amount, chain name, and payment amount.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/versioned_docs/version-1.5.X/resources/tokens/cep18/transfer.md#2025-04-22_snippet_21\n\nLANGUAGE: bash\nCODE:\n```\ncasper-client put-deploy -n http://<NODE IP>:<PORT> \\\n--secret-key ~/casper/demo/user_a/secret_key.pem \\\n--session-package-name \"cep18_contract_package_CEP18\" \\\n--session-entry-point \"mint\" \\\n--session-arg \"owner:key='account-hash-683f53f56926f54ef9584b07585b025c68415dc05f7b2e56749153574b83d5cd'\" \\\n--session-arg \"amount:U256='10'\" \\\n--chain-name <CHAIN NAME> \\\n--payment-amount 1000000000\n```\n\n----------------------------------------\n\nTITLE: Preparing a Contract Installation Deploy with a Single Key in Rust\nDESCRIPTION: This Rust code snippet prepares a `DeployItem` for installing the `CONTRACT_WASM`. The installation is authorized solely by the `DEFAULT_ACCOUNT_ADDR`. It configures the payment, specifies the single authorization key, sets the target address to `DEFAULT_ACCOUNT_ADDR`, and includes the session code. This setup precedes a test demonstrating a disallowed entry point call. Note: This snippet only builds the deploy item.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/versioned_docs/version-2.0.0/resources/advanced/list-auth-keys-tutorial.md#2025-04-22_snippet_13\n\nLANGUAGE: rust\nCODE:\n```\nlet session_code = PathBuf::from(CONTRACT_WASM);\n\nlet deploy_item = DeployItemBuilder::new()\n    .with_empty_payment_bytes(runtime_args! {ARG_AMOUNT => *DEFAULT_PAYMENT})\n    .with_authorization_keys(&[*DEFAULT_ACCOUNT_ADDR])\n    .with_address(*DEFAULT_ACCOUNT_ADDR)\n    .with_session_code(session_code, runtime_args! {})\n    .build();\n```\n\n----------------------------------------\n\nTITLE: Defining Contract and Global State Related Schemas in JSON\nDESCRIPTION: JSON schema definitions for Casper Network API components including ContractHash, DisabledVersion, Groups, ContractPackageStatus, and GlobalStateIdentifier. These schemas define the structure and validation rules for contract-related data in the Casper Network.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/condor/jsonrpc-comp/rpc-1.5/schema/components.json.md#2025-04-22_snippet_47\n\nLANGUAGE: json\nCODE:\n```\n\"ContractHash\": {\n    \"description\": \"The hash address of the contract\",\n    \"type\": \"string\"\n},\n\"DisabledVersion\": {\n    \"type\": \"object\",\n    \"required\": [\n        \"contract_version\",\n        \"protocol_version_major\"\n    ],\n    \"properties\": {\n        \"protocol_version_major\": {\n            \"type\": \"integer\",\n            \"format\": \"uint32\",\n            \"minimum\": 0.0\n        },\n        \"contract_version\": {\n            \"type\": \"integer\",\n            \"format\": \"uint32\",\n            \"minimum\": 0.0\n        }\n    }\n},\n\"Groups\": {\n    \"type\": \"object\",\n    \"required\": [\n        \"group\",\n        \"keys\"\n    ],\n    \"properties\": {\n        \"group\": {\n            \"type\": \"string\"\n        },\n        \"keys\": {\n            \"type\": \"array\",\n            \"items\": {\n                \"$ref\": \"#/components/schemas/URef\"\n            }\n        }\n    }\n},\n\"ContractPackageStatus\": {\n    \"description\": \"A enum to determine the lock status of the contract package.\",\n    \"type\": \"string\",\n    \"enum\": [\n        \"Locked\",\n        \"Unlocked\"\n    ]\n},\n\"GlobalStateIdentifier\": {\n    \"description\": \"Identifier for possible ways to query Global State\",\n    \"anyOf\": [\n        {\n            \"description\": \"Query using a block hash.\",\n            \"type\": \"object\",\n            \"required\": [\n                \"BlockHash\"\n            ],\n            \"properties\": {\n                \"BlockHash\": {\n                    \"$ref\": \"#/components/schemas/BlockHash\"\n                }\n            },\n            \"additionalProperties\": false\n        },\n        {\n            \"description\": \"Query using a block height.\",\n            \"type\": \"object\",\n            \"required\": [\n                \"BlockHeight\"\n            ],\n            \"properties\": {\n                \"BlockHeight\": {\n                    \"type\": \"integer\",\n                    \"format\": \"uint64\",\n                    \"minimum\": 0.0\n                }\n            },\n            \"additionalProperties\": false\n        },\n        {\n            \"description\": \"Query using the state root hash.\",\n            \"type\": \"object\",\n            \"required\": [\n                \"StateRootHash\"\n            ],\n            \"properties\": {\n                \"StateRootHash\": {\n                    \"$ref\": \"#/components/schemas/Digest\"\n                }\n            },\n            \"additionalProperties\": false\n        }\n    ]\n}\n```\n\n----------------------------------------\n\nTITLE: Example: Withdrawing 5 CSPR from Bid on Casper Testnet\nDESCRIPTION: This example shows a specific command to withdraw 5 CSPR from a bid on the Casper Testnet. It includes actual values for node address, secret key path, chain name, payment amount, session hash, and public key.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/versioned_docs/version-2.0.0/operators/becoming-a-validator/unbonding.md#2025-04-22_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nsudo -u casper casper-client put-deploy \\\n--node-address http://65.21.75.254:7777 \\\n--secret-key /etc/casper/validator_keys/secret_key.pem \\\n--chain-name casper-test \\\n--payment-amount 2500000000 \\\n--session-hash hash-93d923e336b20a4c4ca14d592b60e5bd3fe330775618290104f9beb326db7ae2 \\\n--session-entry-point withdraw_bid \\\n--session-arg \"public_key:public_key='01c297d2931fec7e22b2fb1ae3ca5afdfacc2c82ba501e8ed158eecef82b4dcdee'\" \\\n--session-arg \"amount:U512='$[5 * 1000000000]'\"\n```\n\n----------------------------------------\n\nTITLE: Retrieving Casper Network State Root Hash\nDESCRIPTION: Get the current state root hash from a Casper node using the Casper client.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/versioned_docs/version-1.5.X/resources/beginner/counter-testnet/walkthrough.md#2025-04-22_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\ncasper-client get-state-root-hash --node-address http://[NODE_IP]:7777\n```\n\n----------------------------------------\n\nTITLE: Setting up Python Virtual Environment\nDESCRIPTION: Commands to create and activate a Python virtual environment for NCTL installation.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/docs/developers/dapps/setup-nctl.md#2025-04-22_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\n$ python3 -m venv env\n$ source env/bin/activate\n(env) $\n```\n\n----------------------------------------\n\nTITLE: Deployment Response Output\nDESCRIPTION: JSON response showing successful deployment with deploy hash for tracking the contract.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/versioned_docs/version-1.5.X/resources/advanced/cross-contract.md#2025-04-22_snippet_12\n\nLANGUAGE: bash\nCODE:\n```\n{\n  \"id\": -9119604526598719721,\n  \"jsonrpc\": \"2.0\",\n  \"result\": {\n    \"api_version\": \"1.4.13\",\n    \"deploy_hash\": \"af42bc6dbc58f677d138eb968d897f965f1ed118a40980bc16efbcc2a0c71832\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Transfer Schema in JSON Schema Format\nDESCRIPTION: This JSON schema defines the structure for a version 2 transfer between purses in the Casper Network. It specifies required properties including transaction_hash, from, source, target, amount, and gas, along with optional properties like 'to' and 'id'. The schema enforces type constraints and references other schema components like URef and AccountHash.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/condor/jsonrpc-comp/rpc-2.0/schema/TransferV2.json.md#2025-04-22_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"description\": \"Represents a version 2 transfer from one purse to another.\",\n    \"type\": \"object\",\n    \"required\": [\n        \"amount\",\n        \"from\",\n        \"gas\",\n        \"source\",\n        \"target\",\n        \"transaction_hash\"\n    ],\n    \"properties\": {\n        \"transaction_hash\": {\n            \"description\": \"Transaction that created the transfer.\",\n            \"allOf\": [\n                {\n                    \"$ref\": \"#/components/schemas/TransactionHash\"\n                }\n            ]\n        },\n        \"from\": {\n            \"description\": \"Entity from which transfer was executed.\",\n            \"allOf\": [\n                {\n                    \"$ref\": \"#/components/schemas/InitiatorAddr\"\n                }\n            ]\n        },\n        \"to\": {\n            \"description\": \"Account to which funds are transferred.\",\n            \"anyOf\": [\n                {\n                    \"$ref\": \"#/components/schemas/AccountHash\"\n                },\n                {\n                    \"type\": \"null\"\n                }\n            ]\n        },\n        \"source\": {\n            \"description\": \"Source purse.\",\n            \"allOf\": [\n                {\n                    \"$ref\": \"#/components/schemas/URef\"\n                }\n            ]\n        },\n        \"target\": {\n            \"description\": \"Target purse.\",\n            \"allOf\": [\n                {\n                    \"$ref\": \"#/components/schemas/URef\"\n                }\n            ]\n        },\n        \"amount\": {\n            \"description\": \"Transfer amount.\",\n            \"allOf\": [\n                {\n                    \"$ref\": \"#/components/schemas/U512\"\n                }\n            ]\n        },\n        \"gas\": {\n            \"description\": \"Gas.\",\n            \"allOf\": [\n                {\n                    \"$ref\": \"#/components/schemas/Gas\"\n                }\n            ]\n        },\n        \"id\": {\n            \"description\": \"User-defined ID.\",\n            \"type\": [\n                \"integer\",\n                \"null\"\n            ],\n            \"format\": \"uint64\",\n            \"minimum\": 0\n        }\n    },\n    \"additionalProperties\": false\n}\n```\n\n----------------------------------------\n\nTITLE: Calculating Round Seigniorage Rate using Python Fraction\nDESCRIPTION: Demonstrates the Python code used to calculate the `round_seigniorage_rate` as a fraction, representing the annual issuance rate (8%) adjusted for minimum block time (2^15 ms) relative to a year. This calculation utilizes the `Fraction` class to maintain precision and limits the denominator for representation.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/versioned_docs/version-1.5.X/operators/setup-network/chain-spec.md#2025-04-22_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nFraction((1 + 0.08)**((2**15)/31536000000) - 1).limit_denominator(1000000000)\n```\n\n----------------------------------------\n\nTITLE: Defining AddKeys Object\nDESCRIPTION: This schema defines an object for adding a collection of named keys. It requires the `AddKeys` property, which is an array of objects referencing the `NamedKey` schema. No additional properties are allowed.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/condor/jsonrpc-comp/rpc-1.5/schema/components.json.md#2025-04-22_snippet_22\n\nLANGUAGE: JSON\nCODE:\n```\n{\\n    \\\"description\\\": \\\"Adds the given collection of named keys.\\\",\\n    \\\"type\\\": \\\"object\\\",\\n    \\\"required\\\": [\\n        \\\"AddKeys\\\"\\n    ],\\n    \\\"properties\\\": {\\n        \\\"AddKeys\\\": {\\n            \\\"type\\\": \\\"array\\\",\\n            \\\"items\\\": {\\n                \\\"$ref\\\": \\\"#/components/schemas/NamedKey\\\"\\n            }\\n        }\\n    },\\n    \\\"additionalProperties\\\": false\\n}\n```\n\n----------------------------------------\n\nTITLE: Getting Process ID for casper-node Bash Command\nDESCRIPTION: This command finds the process ID (PID) of the 'casper-node' process. It is useful for checking the current open files limit or applying configuration changes. Ensure 'casper-node-launcher' is running for this command to return a PID.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/docs/operators/setup/open-files.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\npgrep \"casper-node$\"\n```\n\n----------------------------------------\n\nTITLE: Chainspec Configuration for Message Limits in Casper Network\nDESCRIPTION: Example chainspec configuration showing limits for contract-level messages in the Casper network. This includes settings for maximum topic name size and maximum number of topics per contract.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/versioned_docs/version-2.0.0/developers/writing-onchain-code/emitting-contract-events.md#2025-04-22_snippet_16\n\nLANGUAGE: json\nCODE:\n```\n[wasm.messages_limits]\n# Maximum size of the topic name.\nmax_topic_name_size = 256\n# Maximum number of topics that can be added for each contract.\nmax_topics_per_contract = 128\n```\n\n----------------------------------------\n\nTITLE: Defining the Network Payload Enum and Gossiping Messages in Rust\nDESCRIPTION: Defines the `Payload` enum in Rust, representing different message types exchanged after the handshake, encoded using bincode. Variants include `Consensus`, `DeployGossiper`, `AddressGossiper`, `GetRequest`, `GetResponse`, and `FinalitySignature`. It also defines the `DeployGossiperMessage` and `AddressGossiperMessage` enums for gossip protocols, along with helper structs `DeployHash` (wrapping `Digest`) and `GossipedAddress` (wrapping `SocketAddr`). These structures facilitate communication between different node subsystems.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/versioned_docs/version-2.0.0/concepts/design/networking-protocol.md#2025-04-22_snippet_1\n\nLANGUAGE: rust\nCODE:\n```\nenum Payload {\n    Consensus(ConsensusMessage),\n    DeployGossiper(DeployGossiperMessage),\n    AddressGossiper(AddressGossiperMessage),\n    GetRequest {\n        tag: Tag,\n        serialized_id: Vec<u8>,\n    },\n    GetResponse {\n        tag: Tag,\n        serialized_item: Vec<[u8]>,\n    },\n    FinalitySignature(FinalitySignature),\n}\n\nenum DeployGossiperMessage {\n    Gossip(DeployHash),\n    GossipResponse {\n        item_id: DeployHash,\n        is_already_held: bool,\n    },\n}\n\nenum AddressGossiperMessage {\n    Gossip(GossippedAddress),\n    GossipResponse {\n        item_id: GossippedAddress,\n        is_already_held: bool,\n    },\n}\n\nstruct DeployHash(Digest);\nstruct GossipedAddress(SocketAddr);\n```\n\n----------------------------------------\n\nTITLE: Example of Chainspec Result Output\nDESCRIPTION: Illustrates a sample result for the \"info_get_chainspec\" RPC, showing the API version and byte representation of the chainspec data. The data returned is typically used for network configuration and initialization by nodes.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/condor/jsonrpc-comp/rpc-1.5/schema.json.md#2025-04-22_snippet_16\n\nLANGUAGE: json\nCODE:\n```\n{ \"name\": \"info_get_chainspec_example\", \"params\": [], \"result\": { \"name\": \"info_get_chainspec_example_result\", \"value\": { \"api_version\": \"1.5.6\", \"chainspec_bytes\": { \"chainspec_bytes\": \"2a2a\", \"maybe_genesis_accounts_bytes\": null, \"maybe_global_state_bytes\": null } } } }\n```\n\n----------------------------------------\n\nTITLE: Empty Main Function for Contract Test Entry Point - Rust\nDESCRIPTION: Defines an explicit main() function that panics with guidance to use 'cargo test' instead of 'cargo run'. This ensures accidental execution cannot occur outside the unit-testing context. The pattern is used in test binaries where the primary entry is for test harnesses, not actual application runs. There are no external dependencies, and this function always halts immediately on invocation.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/docs/developers/writing-onchain-code/testing-session-code.md#2025-04-22_snippet_1\n\nLANGUAGE: rust\nCODE:\n```\nfn main() {\n panic!(\"Execute \\\"cargo test\\\" to test the contract, not \\\"cargo run\\\".\");\n}\n```\n\n----------------------------------------\n\nTITLE: Attempting to Add an Auction Bid on Casper Private Network\nDESCRIPTION: Command to attempt adding an auction bid as a user (Alice) on the private Casper network. This command expects to fail with AuctionBidsDisabled error on a typical private network.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/versioned_docs/version-1.5.X/operators/setup-network/create-private.md#2025-04-22_snippet_17\n\nLANGUAGE: sh\nCODE:\n```\ncasper-client \\\n  put-deploy \\\n  -n $NODE_ADDR \\\n  --chain-name $CHAIN_NAME \\\n  --secret-key alice/secret_key.pem \\\n  --session-path add_bid.wasm \\\n  --payment-amount 5000000000 \\\n  --session-arg \"public_key:public_key='$(<alice/public_key_hex)'\" \\\n  --session-arg \"amount:u512='10000'\" \\\n  --session-arg \"delegation_rate:u8='5'\"\n\n# Error: ApiError::AuctionError(AuctionBidsDisabled) [64559]\"\n```\n\n----------------------------------------\n\nTITLE: Linting Casper Contract\nDESCRIPTION: Command to run the linter on the Casper smart contract, helping to identify potential issues and maintain code quality.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/versioned_docs/version-2.0.0/developers/writing-onchain-code/getting-started.md#2025-04-22_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\nmake check-lint\n```\n\n----------------------------------------\n\nTITLE: Staging Protocols on Mainnet using Python Utility via Bash\nDESCRIPTION: Executes the `node_util.py` Python script as the `casper` user to stage protocol versions required for Mainnet, using the `casper.conf` configuration file.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/versioned_docs/version-1.5.X/operators/setup/install-node.md#2025-04-22_snippet_8\n\nLANGUAGE: bash\nCODE:\n```\nsudo -u casper /etc/casper/node_util.py stage_protocols casper.conf\n```\n\n----------------------------------------\n\nTITLE: Named Key Convention Mode Table\nDESCRIPTION: Table defining the u8 values for named key convention modes that determine how contract versioning and upgrades are handled.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/versioned_docs/version-1.5.X/resources/tokens/cep78/modalities.md#2025-04-22_snippet_7\n\nLANGUAGE: markdown\nCODE:\n```\n| NamedKeyConvention        | u8  |\n| ------------------------- | --- |\n| DerivedFromCollectionName | 0   |\n| V_1_0_standard            | 1   |\n| V_1_0_custom              | 2   |\n```\n\n----------------------------------------\n\nTITLE: Defining Operation and Transform Schemas in JSON\nDESCRIPTION: JSON schema definitions for Operation, OpKind, TransformEntry, and Transform types, specifying their properties, constraints, and possible values.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/condor/jsonrpc-comp/rpc-1.5/schema.json.md#2025-04-22_snippet_40\n\nLANGUAGE: json\nCODE:\n```\n\"Operation\": {\n  \"description\": \"An operation performed while executing a deploy.\",\n  \"type\": \"object\",\n  \"required\": [\n    \"key\",\n    \"kind\"\n  ],\n  \"properties\": {\n    \"key\": {\n      \"description\": \"The formatted string of the `Key`.\",\n      \"type\": \"string\"\n    },\n    \"kind\": {\n      \"description\": \"The type of operation.\",\n      \"allOf\": [\n        {\n          \"$ref\": \"#/components/schemas/OpKind\"\n        }\n      ]\n    }\n  },\n  \"additionalProperties\": false\n},\n\"OpKind\": {\n  \"description\": \"The type of operation performed while executing a deploy.\",\n  \"type\": \"string\",\n  \"enum\": [\n    \"Read\",\n    \"Write\",\n    \"Add\",\n    \"NoOp\"\n  ]\n},\n\"TransformEntry\": {\n  \"description\": \"A transformation performed while executing a deploy.\",\n  \"type\": \"object\",\n  \"required\": [\n    \"key\",\n    \"transform\"\n  ],\n  \"properties\": {\n    \"key\": {\n      \"description\": \"The formatted string of the `Key`.\",\n      \"type\": \"string\"\n    },\n    \"transform\": {\n      \"description\": \"The transformation.\",\n      \"allOf\": [\n        {\n          \"$ref\": \"#/components/schemas/Transform\"\n        }\n      ]\n    }\n  },\n  \"additionalProperties\": false\n},\n\"Transform\": {\n  \"description\": \"The actual transformation performed while executing a deploy.\",\n  \"anyOf\": [\n    {\n      \"type\": \"string\",\n      \"enum\": [\n        \"Identity\",\n        \"WriteContractWasm\",\n        \"WriteContract\",\n        \"WriteContractPackage\"\n      ]\n    },\n    {\n      \"description\": \"Writes the given CLValue to global state.\",\n      \"type\": \"object\",\n      \"required\": [\n        \"WriteCLValue\"\n      ],\n      \"properties\": {\n        \"WriteCLValue\": {\n          \"$ref\": \"#/components/schemas/CLValue\"\n        }\n      },\n      \"additionalProperties\": false\n    },\n    {\n      \"description\": \"Writes the given Account to global state.\",\n      \"type\": \"object\",\n      \"required\": [\n        \"WriteAccount\"\n      ],\n      \"properties\": {\n        \"WriteAccount\": {\n          \"$ref\": \"#/components/schemas/AccountHash\"\n        }\n      },\n      \"additionalProperties\": false\n    },\n    {\n      \"description\": \"Writes the given DeployInfo to global state.\",\n      \"type\": \"object\",\n      \"required\": [\n        \"WriteDeployInfo\"\n      ],\n      \"properties\": {\n        \"WriteDeployInfo\": {\n          \"$ref\": \"#/components/schemas/DeployInfo\"\n        }\n      },\n      \"additionalProperties\": false\n    },\n    {\n      \"description\": \"Writes the given EraInfo to global state.\",\n      \"type\": \"object\",\n      \"required\": [\n        \"WriteEraInfo\"\n      ],\n      \"properties\": {\n        \"WriteEraInfo\": {\n          \"$ref\": \"#/components/schemas/EraInfo\"\n        }\n      },\n      \"additionalProperties\": false\n    },\n    {\n      \"description\": \"Writes the given Transfer to global state.\",\n      \"type\": \"object\",\n      \"required\": [\n        \"WriteTransfer\"\n      ],\n      \"properties\": {\n      }\n    }\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Installing OpenSSL on MacOS\nDESCRIPTION: Command to install OpenSSL cryptography toolkit on MacOS using Homebrew.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/versioned_docs/version-1.5.X/developers/dapps/setup-nctl.md#2025-04-22_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\nbrew install openssl\n```\n\n----------------------------------------\n\nTITLE: Calculating Token Supply in Casper Network\nDESCRIPTION: Formula for calculating the token supply at a given era index, taking into account the initial supply and issuance rate. The calculation considers the time elapsed since genesis in milliseconds.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/versioned_docs/version-2.0.0/concepts/economics/consensus.md#2025-04-22_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\nsupply(i) = initial_supply * (1 + issuance_rate)^(tick_at_era_start(i) / ticks_per_year)\n```\n\n----------------------------------------\n\nTITLE: Transaction Response Format\nDESCRIPTION: Example JSON response after sending a transaction, showing the transaction hash\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/docs/developers/dapps/nctl-test.md#2025-04-22_snippet_3\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"jsonrpc\": \"2.0\",\n  \"id\": 1294011212530641270,\n  \"result\": {\n    \"api_version\": \"2.0.0\",\n    \"transaction_hash\": {\n      \"Version1\": \"efad4a969064b5f8189ea4d6dd2fba2926d01d583a35178c07d7b827de16789e\"\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Terminal Block Equivocation and Reward Schema using JSON Schema in JSON\nDESCRIPTION: Defines a JSON Schema object specifying the structure and validation rules for equivocation and reward information included in the terminal block. The schema requires three array properties: equivocators and inactive_validators (each an array of PublicKey objects), and rewards (an array of Reward objects), with references indicating external schema definitions. This schema is used for validating structured inputs to APIs or persistence layers in Casper Network consensus modules and restricts any additional properties beyond those specified.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/condor/jsonrpc-comp/rpc-1.5/schema/JsonEraReport.json.md#2025-04-22_snippet_0\n\nLANGUAGE: JSON\nCODE:\n```\n{\\n    \\\"description\\\": \\\"Equivocation and reward information to be included in the terminal block.\\\",\\n    \\\"type\\\": \\\"object\\\",\\n    \\\"required\\\": [\\n        \\\"equivocators\\\",\\n        \\\"inactive_validators\\\",\\n        \\\"rewards\\\"\\n    ],\\n    \\\"properties\\\": {\\n        \\\"equivocators\\\": {\\n            \\\"type\\\": \\\"array\\\",\\n            \\\"items\\\": {\\n                \\\"$ref\\\": \\\"#/components/schemas/PublicKey\\\"\\n            }\\n        },\\n        \\\"rewards\\\": {\\n            \\\"type\\\": \\\"array\\\",\\n            \\\"items\\\": {\\n                \\\"$ref\\\": \\\"#/components/schemas/Reward\\\"\\n            }\\n        },\\n        \\\"inactive_validators\\\": {\\n            \\\"type\\\": \\\"array\\\",\\n            \\\"items\\\": {\\n                \\\"$ref\\\": \\\"#/components/schemas/PublicKey\\\"\\n            }\\n        }\\n    },\\n    \\\"additionalProperties\\\": false\\n} \n```\n\n----------------------------------------\n\nTITLE: Exiting User Account\nDESCRIPTION: Command to exit the current user session\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/versioned_docs/version-2.0.0/operators/setup/non-root-user.md#2025-04-22_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nexit\n```\n\n----------------------------------------\n\nTITLE: Building Contract Wasm\nDESCRIPTION: Commands to build the multi-signature contract and generate the Wasm file.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/versioned_docs/version-2.0.0/resources/advanced/two-party-multi-sig.md#2025-04-22_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ncd two-party-multi-sig\nmake build-contract\n```\n\n----------------------------------------\n\nTITLE: Building Contract with Provided Makefile - Bash\nDESCRIPTION: This Bash make command invokes the build-contract target specified in the project's Makefile. It automates building and optionally post-processing contract Wasm. Makefile must be present and properly configured; underlying commands may include cargo and other build steps.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/docs/developers/writing-onchain-code/writing-session-code.md#2025-04-22_snippet_9\n\nLANGUAGE: bash\nCODE:\n```\nmake build-contract\n```\n\n----------------------------------------\n\nTITLE: Defining EraInfo Object\nDESCRIPTION: This schema defines auction metadata recorded at each era. It requires a `seigniorage_allocations` property, which is an array of `SeigniorageAllocation` objects.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/condor/jsonrpc-comp/rpc-1.5/schema/components.json.md#2025-04-22_snippet_30\n\nLANGUAGE: JSON\nCODE:\n```\n{\\n    \\\"description\\\": \\\"Auction metadata.  Intended to be recorded at each era.\\\",\\n    \\\"type\\\": \\\"object\\\",\\n    \\\"required\\\": [\\n        \\\"seigniorage_allocations\\\"\\n    ],\\n    \\\"properties\\\": {\\n        \\\"seigniorage_allocations\\\": {\\n            \\\"type\\\": \\\"array\\\",\\n            \\\"items\\\": {\\n                \\\"$ref\\\": \\\"#/components/schemas/SeigniorageAllocation\\\"\\n            }\\n        }\\n    },\\n    \\\"additionalProperties\\\": false\\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Casper Account Schema in JSON\nDESCRIPTION: JSON Schema definition for a Casper Network account, including account hash, named keys, main purse, associated keys and action thresholds. This schema enforces required fields and proper typing for account-related data structures.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/condor/jsonrpc-comp/rpc-2.0/schema.json.md#2025-04-22_snippet_65\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"description\": \"Represents an Account in the global state.\",\n  \"type\": \"object\",\n  \"required\": [\n    \"account_hash\",\n    \"action_thresholds\",\n    \"associated_keys\",\n    \"main_purse\",\n    \"named_keys\"\n  ],\n  \"properties\": {\n    \"account_hash\": {\n      \"$ref\": \"#/components/schemas/AccountHash\"\n    },\n    \"named_keys\": {\n      \"$ref\": \"#/components/schemas/NamedKeys\"\n    },\n    \"main_purse\": {\n      \"$ref\": \"#/components/schemas/URef\"\n    },\n    \"associated_keys\": {\n      \"$ref\": \"#/components/schemas/AccountAssociatedKeys\"\n    },\n    \"action_thresholds\": {\n      \"$ref\": \"#/components/schemas/AccountActionThresholds\"\n    }\n  },\n  \"additionalProperties\": false\n}\n```\n\n----------------------------------------\n\nTITLE: Disabling Contract - Casper Network CLI\nDESCRIPTION: Command to disable a contract using its contract hash and package hash, preventing future execution.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/docs/operators/setup-network/create-private.md#2025-04-22_snippet_22\n\nLANGUAGE: sh\nCODE:\n```\ncasper-client \\\n  put-deploy \\\n  -n $NODE_ADDR \\\n  --chain-name $CHAIN_NAME \\\n  --secret-key admin/secret_key.pem \\\n  --session-account=$(<alice/public_key_hex) \\\n  --session-path disable_contract.wasm \\\n  --payment-amount 3000000000 \\\n  --session-arg \"contract_package_hash:account_hash='account-hash-$CONTRACT_PACKAGE_HASH'\" \\\n  --session-arg \"contract_hash:account_hash='account-hash-$CONTRACT_HASH'\"\n```\n\n----------------------------------------\n\nTITLE: Verifying Transaction with get-transaction Command\nDESCRIPTION: Command to verify the status of a transaction using the transaction hash returned from the put-transaction command. This helps confirm that the contract was successfully installed.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/versioned_docs/version-2.0.0/developers/cli/installing-contracts.md#2025-04-22_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\ncasper-client get-transaction --node-address http://localhost:11101 [TRANSACTION_HASH]\n```\n\n----------------------------------------\n\nTITLE: Running Casper Contract Tests\nDESCRIPTION: Command to run the test suite for the Casper smart contract. This builds the contract in release mode and runs tests against it in the Casper runtime environment.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/versioned_docs/version-2.0.0/developers/writing-onchain-code/getting-started.md#2025-04-22_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\nmake test\n```\n\n----------------------------------------\n\nTITLE: BigInt Serialization Structure\nDESCRIPTION: Pseudo-structure demonstrating the custom variable length encoding used for U128, U256, and U512 types.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/versioned_docs/version-1.5.X/concepts/design/networking-protocol.md#2025-04-22_snippet_9\n\nLANGUAGE: rust\nCODE:\n```\nstruct Bigint {\n    serialized_length: u8,\n    little_endian_unpadded_bytes: [u8, serialized_length - 1],\n}\n```\n\n----------------------------------------\n\nTITLE: Sample JSON-RPC Request for Querying Purse Balance (JSON)\nDESCRIPTION: This JSON-RPC object represents a request to a Casper node to query the balance of a purse identified as a main purse under a specified account hash using a particular state root hash. Key fields include 'method' set to 'query_balance', 'params' containing 'state_identifier' and 'purse_identifier', and an 'id' matching the one provided in the CLI. Requires correct values for hashes and purse/account identifiers. The structure is sent as HTTP payload to the node end-point.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/docs/developers/cli/transfers/verify-transfer.md#2025-04-22_snippet_6\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"jsonrpc\": \"2.0\",\n  \"method\": \"query_balance\",\n  \"params\": {\n    \"state_identifier\": {\n      \"StateRootHash\": \"fdb1474d441ec0fcbf2e088f1630dbf98d3bcf7f7a7fe298303797f35b8cb4e1\"\n    },\n    \"purse_identifier\": {\n      \"main_purse_under_account_hash\": \"account-hash-e70dbca48c2d31bc2d754e51860ceaa8a1a49dc627b20320b0ecee1b6d9ce655\"\n    }\n  },\n  \"id\": 6\n}\n```\n\n----------------------------------------\n\nTITLE: Add Keys Collection JSON Schema\nDESCRIPTION: This schema specifies adding a collection of named keys in the Casper Network schema. The 'AddKeys' property, structured as an array, includes references to the 'NamedKey' schema, attending to data integrity and handling.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/condor/jsonrpc-comp/rpc-1.5/schema.json.md#2025-04-22_snippet_49\n\nLANGUAGE: JSON\nCODE:\n```\n{\"AddKeys\": {\"type\": \"array\", \"items\": {\"$ref\": \"#/components/schemas/NamedKey\"}}}\n```\n\n----------------------------------------\n\nTITLE: OpenAPI Schema for Deploy Execution and Transforms\nDESCRIPTION: Comprehensive OpenAPI schema definition specifying the structure of deploy execution results, effects, operations and state transformations in the Casper Network. Includes detailed type definitions for execution effects, operations, transforms and various state write operations.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/condor/jsonrpc-comp/rpc-1.5/schema/components.json.md#2025-04-22_snippet_16\n\nLANGUAGE: json\nCODE:\n```\n{\n\"description\": \"The error message associated with executing the deploy.\",\n\"type\": \"string\"\n},\n\"additionalProperties\": false\n},\n\"additionalProperties\": false\n},\n{\n\"description\": \"The result of a successful execution.\",\n\"type\": \"object\",\n\"required\": [\n    \"Success\"\n],\n\"properties\": {\n    \"Success\": {\n        \"type\": \"object\",\n        \"required\": [\n            \"cost\",\n            \"effect\",\n            \"transfers\"\n        ],\n        \"properties\": {\n            \"effect\": {\n                \"description\": \"The effect of executing the deploy.\",\n                \"allOf\": [\n                    {\n                        \"$ref\": \"#/components/schemas/ExecutionEffect\"\n                    }\n                ]\n            },\n            \"transfers\": {\n                \"description\": \"A record of Transfers performed while executing the deploy.\",\n                \"type\": \"array\",\n                \"items\": {\n                    \"$ref\": \"#/components/schemas/TransferAddr\"\n                }\n            },\n            \"cost\": {\n                \"description\": \"The cost of executing the deploy.\",\n                \"allOf\": [\n                    {\n                        \"$ref\": \"#/components/schemas/U512\"\n                    }\n                ]\n            }\n        },\n        \"additionalProperties\": false\n    }\n},\n\"additionalProperties\": false\n}\n]}\n```\n\n----------------------------------------\n\nTITLE: Adding UInt128 Value JSON Schema\nDESCRIPTION: This schema describes the structure for adding a 'U128' value, referencing the 'U128' component schema. It ensures compatibility with other components using similar types for maintaining the global state.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/condor/jsonrpc-comp/rpc-1.5/schema.json.md#2025-04-22_snippet_46\n\nLANGUAGE: JSON\nCODE:\n```\n{\"AddUInt128\": {\"$ref\": \"#/components/schemas/U128\"}}\n```\n\n----------------------------------------\n\nTITLE: Running Integration Tests with Make\nDESCRIPTION: The `make test` command runs integration tests for the project. It ensures that all contract tests defined in the Rust test files are executed. The expected result is a summary of test passes or failures, where successful tests confirm the functionality and integration of the contract code.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/docs/resources/advanced/cross-contract.md#2025-04-22_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nmake test\n```\n\n----------------------------------------\n\nTITLE: Example speculative_exec Request\nDESCRIPTION: JSON-RPC request example for the speculative_exec method, demonstrating how to execute a deploy without committing its effects to global state.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/versioned_docs/version-1.5.X/developers/json-rpc/json-rpc-transactional.md#2025-04-22_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n{\n  \"jsonrpc\": \"2.0\",\n  \"method\": \"speculative_exec\",\n  \"params\": {\n    \"block_identifier\": null,\n    \"deploy\": {\n      \"hash\": \"b6aa46333fb858deee7f259a5bca581251c6200a5d902aeb1244c3a7169b5971\",\n      \"header\": {\n        \"account\": \"01a2905e4680aa49e0b44100d9dfc861b9605bb35f9956b1e99eb43863363d80aa\",\n        \"timestamp\": \"2023-05-23T13:32:45.554Z\",\n        \"ttl\": \"30m\",\n        \"gas_price\": 1,\n        \"body_hash\": \"74db109805bb20de43ef89a5b084544a858908b236601519d5827cd9b7fbb925\",\n        \"dependencies\": [],\n        \"chain_name\": \"integration-test\"\n      },\n      \"payment\": {\n        \"ModuleBytes\": {\n          \"module_bytes\": \"\",\n          \"args\": [\n            [\n              \"amount\",\n              {\n                \"cl_type\": \"U512\",\n                \"bytes\": \"0400e1f505\",\n                \"parsed\": \"100000000\"\n              }\n            ]\n          ]\n        }\n      },\n      \"session\": {\n        \"Transfer\": {\n          \"args\": [\n            [\n              \"amount\",\n              {\n                \"cl_type\": \"U512\",\n                \"bytes\": \"0400f90295\",\n                \"parsed\": \"2500000000\"\n              }\n            ],\n            [\n              \"target\",\n              {\n                \"cl_type\": \"PublicKey\",\n                \"bytes\": \"01265ea737411b349ad3d0fc724c2c588acd2765c057e5c690cd5e3dade401782b\",\n                \"parsed\": \"01265ea737411b349ad3d0fc724c2c588acd2765c057e5c690cd5e3dade401782b\"\n              }\n            ],\n            [\n              \"id\",\n              {\n                \"cl_type\": {\n                  \"Option\": \"U64\"\n                },\n                \"bytes\": \"010000000000000000\",\n                \"parsed\": 0\n              }\n            ]\n          ]\n        }\n      },\n      \"approvals\": [\n        {\n          \"signer\": \"01a2905e4680aa49e0b44100d9dfc861b9605bb35f9956b1e99eb43863363d80aa\",\n          \"signature\": \"01c94d517d5bbc8d5c74e0e68b8cb308561ff979a1c91907b56d427cc90156c437726c0b736d17f7303f2db66e405c7e5c8175b8b863703938eff1659766dff808\"\n        }\n      ]\n    }\n  },\n  \"id\": 6889533540839698701\n}\n```\n\n----------------------------------------\n\nTITLE: Transferring CEP-18 Tokens Using Allowance (Uncommented)\nDESCRIPTION: A concise version of the `casper-client` command to execute the `transfer_from` entry point of a CEP-18 contract, transferring tokens based on an allowance. This command excludes inline comments but performs the same function as the commented version, requiring node address, chain name, spender's secret key, contract hash, entry point, owner, recipient, amount, and payment amount.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/versioned_docs/version-1.5.X/resources/tokens/cep18/transfer.md#2025-04-22_snippet_15\n\nLANGUAGE: bash\nCODE:\n```\ncasper-client put-deploy -n http://<NODE IP>:<PORT> \\\n--chain-name <CHAIN NAME> \\\n--secret-key ~/casper/demo/user_a/secret_key.pem \\\n--session-hash hash-05d893e76c731729fc26339e5a970bd79fbf4a6adf743c8385431fb494bff45e \\\n--session-entry-point \"transfer_from\" \\\n--session-arg \"owner:key='account-hash-39f15c23df9be1244572bb499fac62cbcad3cab2dc1438609842f602f943d7d2'\" \\\n--session-arg \"recipient:key='account-hash-17192017d32db5dc9f598bf8ac6ac35ee4b64748669b00572d88335941479513'\" \\\n--session-arg \"amount:u256='10'\" \\\n--payment-amount \"10000000000\"\n```\n\n----------------------------------------\n\nTITLE: Calling Contract Entry Point by Package Hash - Casper CLI - Rust\nDESCRIPTION: Illustrates the general CLI command for deploying to a contract by package hash using casper-client. This snippet shows how to specify the node address, chain name, secret key, payment amount, package hash, entry point, and version number. Required dependencies include the casper-client executable and access to a running Casper node; principal parameters are session-package-hash, session-entry-point, and optionally session-version. Inputs are command-line parameters and expected output is a successful deploy transaction or an error.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/docs/developers/cli/calling-contracts.md#2025-04-22_snippet_4\n\nLANGUAGE: rust\nCODE:\n```\ncasper-client put-deploy \\\n    --node-address [NODE_SERVER_ADDRESS] \\\n    --chain-name [CHAIN_NAME] \\\n    --secret-key [KEY_PATH]/secret_key.pem \\\n    --payment-amount [PAYMENT_AMOUNT_IN_MOTES] \\\n    --session-package-hash [HEX_STRING] \\\n    --session-entry-point [ENTRY_POINT_FUNCTION] \\\n    --session-version [INTEGER]\n```\n\n----------------------------------------\n\nTITLE: Defining Validator Status Change Schema - JSON Schema - JSON\nDESCRIPTION: Defines a JSON schema for representing a single change to a validator's status in a specific era. This schema requires the 'era_id' and 'validator_change' properties, referencing the 'EraId' and 'ValidatorChange' schemas, respectively. It enforces structure, types, and required fields for API requests or database records, and does not allow additional properties.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/condor/jsonrpc-comp/rpc-1.5/schema/JsonValidatorStatusChange.json.md#2025-04-22_snippet_0\n\nLANGUAGE: JSON\nCODE:\n```\n{\\n    \\\"description\\\": \\\"A single change to a validator's status in the given era.\\\",\\n    \\\"type\\\": \\\"object\\\",\\n    \\\"required\\\": [\\n        \\\"era_id\\\",\\n        \\\"validator_change\\\"\\n    ],\\n    \\\"properties\\\": {\\n        \\\"era_id\\\": {\\n            \\\"description\\\": \\\"The era in which the change occurred.\\\",\\n            \\\"allOf\\\": [\\n                {\\n                    \\\"$ref\\\": \\\"#/components/schemas/EraId\\\"\\n                }\\n            ]\\n        },\\n        \\\"validator_change\\\": {\\n            \\\"description\\\": \\\"The change in validator status.\\\",\\n            \\\"allOf\\\": [\\n                {\\n                    \\\"$ref\\\": \\\"#/components/schemas/ValidatorChange\\\"\\n                }\\n            ]\\n        }\\n    },\\n    \\\"additionalProperties\\\": false\\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Peer ID to Network Address Mapping - JSON Schema - JSON\nDESCRIPTION: Defines a JSON schema for representing a map of peer IDs to network addresses, where each entry adheres to the 'PeerEntry' schema. This structure is intended for use in API specifications, with dependencies on a pre-defined 'PeerEntry' component schema. Inputs are expected as arrays of valid peer entries; ensuring type safety and validation according to the referenced schema.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/condor/jsonrpc-comp/rpc-1.5/schema/PeersMap.json.md#2025-04-22_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"description\": \"Map of peer IDs to network addresses.\",\n    \"type\": \"array\",\n    \"items\": {\n        \"$ref\": \"#/components/schemas/PeerEntry\"\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Undelegating via Compiled Wasm Example - Casper Client - Bash\nDESCRIPTION: This Bash snippet demonstrates using the casper-client CLI to undelegate 100 CSPR tokens via a compiled undelegate.wasm contract on the Casper Testnet. Key steps include specifying the payment amount (6 CSPR in motes), public keys, and correct paths to the contract and secret key files. This method incurs higher fees and requires that undelegate.wasm has already been built and is accessible at the given path. The command returns a deploy hash, which should be checked for transaction status.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/versioned_docs/version-2.0.0/developers/cli/undelegate.md#2025-04-22_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\ncasper-client put-deploy \\\n--node-address http://65.21.75.254:7777  \\\n--chain-name casper-test \\\n--secret-key ~/KEYS/secret_key.pem \\\n--payment-amount 6000000000 \\\n--session-path ~/undelegate.wasm \\\n--session-arg \"validator:public_key='01aa17f7b9889480b1bd34c3f94f263b229c7a9b01dd4dda19c2dd1d38d176c7a0'\" \\\n--session-arg \"amount:u512='100000000000'\" \\\n--session-arg \"delegator:public_key='01e3d3392c2e0b943abe709b25de5c353e5e1e9d95c7a76e3dd343d8aa1aa08d51'\"\n```\n\n----------------------------------------\n\nTITLE: Defining Reactor State Enumeration Using JSON Schema - JSON\nDESCRIPTION: This snippet defines a JSON schema for the reactor state, restricting values to one of several predefined strings using the 'enum' keyword. Dependencies include a JSON schema validator and the broader Casper Network schema conventions. The property 'type' is strictly set to 'string', enforcing type safety, and the allowed states are provided as an array of strings. Inputs are expected to conform to one of the enumerated values; any deviation will result in schema validation errors.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/condor/jsonrpc-comp/rpc-1.5/schema/ReactorState.json.md#2025-04-22_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\\n    \\\"description\\\": \\\"The state of the reactor.\\\",\\n    \\\"type\\\": \\\"string\\\",\\n    \\\"enum\\\": [\\n        \\\"Initialize\\\",\\n        \\\"CatchUp\\\",\\n        \\\"Upgrading\\\",\\n        \\\"KeepUp\\\",\\n        \\\"Validate\\\",\\n        \\\"ShutdownForUpgrade\\\"\\n    ]\\n} \n```\n\n----------------------------------------\n\nTITLE: Query Source Account Balance Example\nDESCRIPTION: Concrete example of querying a source account balance on the Casper testnet with specific state root hash and account hash values.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/versioned_docs/version-1.5.X/developers/cli/transfers/verify-transfer.md#2025-04-22_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\ncasper-client query-balance -v --id 6 \\\n--node-address https://node.testnet.casper.network \\\n--state-root-hash fdb1474d441ec0fcbf2e088f1630dbf98d3bcf7f7a7fe298303797f35b8cb4e1 \\\n--purse-identifier account-hash-e70dbca48c2d31bc2d754e51860ceaa8a1a49dc627b20320b0ecee1b6d9ce655\n```\n\n----------------------------------------\n\nTITLE: Defining Casper Contract Schema Types\nDESCRIPTION: JSON Schema defining core Casper Network contract types including stored contracts, runtime arguments, and primitive values. Includes definitions for contract execution modes, named arguments, and CLValue type system.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/condor/jsonrpc-comp/rpc-2.0/schema.json.md#2025-04-22_snippet_30\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"CLType\": {\n    \"description\": \"Casper types, i.e. types which can be stored and manipulated by smart contracts.\\n\\nProvides a description of the underlying data type of a [`CLValue`](crate::CLValue).\",\n    \"oneOf\": [\n      {\n        \"description\": \"`bool` primitive.\",\n        \"type\": \"string\",\n        \"enum\": [\n          \"Bool\"\n        ]\n      },\n      {\n        \"description\": \"`i32` primitive.\", \n        \"type\": \"string\",\n        \"enum\": [\n          \"I32\"\n        ]\n      },\n      {\n        \"description\": \"`i64` primitive.\",\n        \"type\": \"string\", \n        \"enum\": [\n          \"I64\"\n        ]\n      }\n    ]\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Account Schema Structure in JSON\nDESCRIPTION: JSON schema that specifies the structure of a user account including account hash, action thresholds, associated keys, main purse, and named keys. The schema enforces required fields and defines relationships with other component schemas through references.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/condor/jsonrpc-comp/rpc-1.5/schema/Account.json.md#2025-04-22_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"description\": \"Structure representing a user's account, stored in global state.\",\n    \"type\": \"object\",\n    \"required\": [\n        \"account_hash\",\n        \"action_thresholds\",\n        \"associated_keys\",\n        \"main_purse\",\n        \"named_keys\"\n    ],\n    \"properties\": {\n        \"account_hash\": {\n            \"$ref\": \"#/components/schemas/AccountHash\"\n        },\n        \"named_keys\": {\n            \"type\": \"array\",\n            \"items\": {\n                \"$ref\": \"#/components/schemas/NamedKey\"\n            }\n        },\n        \"main_purse\": {\n            \"$ref\": \"#/components/schemas/URef\"\n        },\n        \"associated_keys\": {\n            \"type\": \"array\",\n            \"items\": {\n                \"$ref\": \"#/components/schemas/AssociatedKey\"\n            }\n        },\n        \"action_thresholds\": {\n            \"$ref\": \"#/components/schemas/ActionThresholds\"\n        }\n    },\n    \"additionalProperties\": false\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Validator Schema in JSON\nDESCRIPTION: This JSON Schema specifies a structure for a validator with a required public key and amount. Dependencies include a reference to a PublicKey schema. The validator property must match the PublicKey schema while the amount must be a non-negative 64-bit integer. Additional properties are disallowed, ensuring strict conformity to the specified properties.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/condor/jsonrpc-comp/rpc-1.5/schema/Reward.json.md#2025-04-22_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"type\": \"object\",\n    \"required\": [\n        \"amount\",\n        \"validator\"\n    ],\n    \"properties\": {\n        \"validator\": {\n            \"$ref\": \"#/components/schemas/PublicKey\"\n        },\n        \"amount\": {\n            \"type\": \"integer\",\n            \"format\": \"uint64\",\n            \"minimum\": 0\n        }\n    },\n    \"additionalProperties\": false\n}\n```\n\n----------------------------------------\n\nTITLE: Building Docker Image for Casper NCTL\nDESCRIPTION: This code snippet shows the command to build the Docker image for Casper NCTL using the Condor-specific Dockerfile.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/src/pages/condor/setting-up-condor-local.md#2025-04-22_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\ndocker build -f casper-nctl-condor.Dockerfile -t casper-nctl:rc3 .\n```\n\n----------------------------------------\n\nTITLE: Verifying Deploy Execution\nDESCRIPTION: This snippet verifies whether a deploy ran successfully using the Casper CLI by checking the deploy hash. Successful verification confirms that changes were applied to the account.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/versioned_docs/version-1.5.X/resources/advanced/multi-sig/multi-sig-workflow.md#2025-04-22_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\ncasper-client get-deploy --node-address https://node.testnet.casper.network <DEPLOY_HASH>\n```\n\n----------------------------------------\n\nTITLE: Displaying Casper Client Keygen Help in Bash\nDESCRIPTION: A bash command to display the help information for the Casper client's key generation functionality, showing available options and parameters.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/versioned_docs/version-1.5.X/operators/setup/basic-node-configuration.md#2025-04-22_snippet_8\n\nLANGUAGE: bash\nCODE:\n```\nsudo -u casper casper-client keygen --help\n```\n\n----------------------------------------\n\nTITLE: Verifying cargo-casper installation\nDESCRIPTION: Verify the installation of cargo-casper by checking its version.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/versioned_docs/version-2.0.0/developers/prerequisites.md#2025-04-22_snippet_13\n\nLANGUAGE: bash\nCODE:\n```\ncargo-casper --version\n```\n\n----------------------------------------\n\nTITLE: Configuring TLS Certificate Settings for Casper Network Access Control\nDESCRIPTION: TOML configuration for securing peer-to-peer communication in a private Casper network using TLS certificates. This configuration specifies the node's certificate, secret key, and certificate authority to restrict network access.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/docs/operators/setup-network/create-private.md#2025-04-22_snippet_13\n\nLANGUAGE: toml\nCODE:\n```\n[network.identity]\ntls_certificate = \"local_node_cert.pem\"\nsecret_key = \"local_node.pem\"\nca_certificate = \"ca_cert.pem\"\n```\n\n----------------------------------------\n\nTITLE: Adding Value with AddUInt512 in Casper Network\nDESCRIPTION: This JSON demonstrates the AddUInt512 transformation which adds a specified amount to an existing balance. In this case, it's adding 5000000000 tokens to the balance associated with the specified key.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/versioned_docs/version-2.0.0/developers/cli/transfers/direct-token-transfer.md#2025-04-22_snippet_10\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"key\": \"balance-8294864177c2c1ec887a11dae095e487b5256ce6bd2a1f2740d0e4f28bd3251c\",\n  \"transform\": {\n    \"AddUInt512\": \"5000000000\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Checking Deploy Status in Bash\nDESCRIPTION: Command to verify the deployment status using the deploy hash returned from the put-deploy command. This allows you to confirm the contract was successfully deployed.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/versioned_docs/version-1.5.X/resources/beginner/counter/walkthrough.md#2025-04-22_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\ncasper-client get-deploy \\\n    --node-address http://localhost:11101 [DEPLOY_HASH]\n```\n\n----------------------------------------\n\nTITLE: Get Peers Schema in JSON\nDESCRIPTION: Schema definition for the info_get_peers endpoint that returns information about connected network peers.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/condor/jsonrpc-comp/rpc-1.5/schema.json.md#2025-04-22_snippet_9\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"name\": \"info_get_peers_example\",\n  \"params\": [],\n  \"result\": {\n    \"name\": \"info_get_peers_example_result\",\n    \"value\": {\n      \"api_version\": \"1.5.6\",\n      \"peers\": [\n        {\n          \"node_id\": \"tls:0101..0101\",\n          \"address\": \"127.0.0.1:54321\"\n        }\n      ]\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Querying Auction Info on Casper Network using Bash\nDESCRIPTION: This Bash snippet demonstrates how to use the Casper command-line client to query auction information from a node in the Casper network. It requires specifying the `node-address` parameter, which should be the IP address of a node on the network. The command returns bids in the auction contract and active validator lists.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/docs/developers/cli/delegate.md#2025-04-22_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\ncasper-client get-auction-info \\\n--node-address http://<peer-ip-address>:7777\n```\n\n----------------------------------------\n\nTITLE: Example Undelegation via System Auction Contract\nDESCRIPTION: Example command demonstrating undelegation of 100 CSPR tokens on the Casper Testnet using the system auction contract method.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/versioned_docs/version-1.5.X/developers/cli/undelegate.md#2025-04-22_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ncasper-client put-deploy \\\n--node-address http://65.21.75.254:7777  \\\n--chain-name casper-test \\\n--secret-key ~/KEYS/secret_key.pem \\\n--payment-amount 2500000000 \\\n--session-hash hash-93d923e336b20a4c4ca14d592b60e5bd3fe330775618290104f9beb326db7ae2 \\\n--session-entry-point undelegate \\\n--session-arg \"validator:public_key='01aa17f7b9889480b1bd34c3f94f263b229c7a9b01dd4dda19c2dd1d38d176c7a0'\" \\\n--session-arg \"amount:u512='100000000000'\" \\\n--session-arg \"delegator:public_key='01e3d3392c2e0b943abe709b25de5c353e5e1e9d95c7a76e3dd343d8aa1aa08d51'\"\n```\n\n----------------------------------------\n\nTITLE: Adding Additional Signature with sign-deploy Command\nDESCRIPTION: Command to add an additional signature to an existing deploy file for multi-signature functionality, saving the result to a new deploy file.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/versioned_docs/version-1.5.X/developers/cli/transfers/multisig-deploy-transfer.md#2025-04-22_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\ncasper-client sign-deploy \\\n--input transfer.deploy \\\n--secret-key [PATH]/another_secret_key.pem \\\n--output transfer2.deploy\n```\n\n----------------------------------------\n\nTITLE: Installing GCC and G++ Compilers on MacOS\nDESCRIPTION: Commands to install the GCC and G++ compilers on MacOS using Xcode command-line tools and verify their installation.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/versioned_docs/version-2.0.0/developers/dapps/setup-nctl.md#2025-04-22_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\n$ xcode-select --install\n$ gcc --version\n$ g++ --version\n```\n\n----------------------------------------\n\nTITLE: Defining WithdrawPurse Object Schema in JSON\nDESCRIPTION: Specifies the JSON schema for a `WithdrawPurse` object, noted as a legacy structure. It mandates several properties: `amount`, `bonding_purse`, `era_of_creation`, `unbonder_public_key`, and `validator_public_key`. The `bonding_purse` property specifically references the `URef` schema.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/condor/jsonrpc-comp/rpc-2.0/schema/components.json.md#2025-04-22_snippet_37\n\nLANGUAGE: json\nCODE:\n```\n\"WithdrawPurse\": {\n    \"description\": \"A withdraw purse, a legacy structure.\",\n    \"type\": \"object\",\n    \"required\": [\n        \"amount\",\n        \"bonding_purse\",\n        \"era_of_creation\",\n        \"unbonder_public_key\",\n        \"validator_public_key\"\n    ],\n    \"properties\": {\n        \"bonding_purse\": {\n            \"description\": \"Bonding Purse\",\n            \"allOf\": [\n                {\n                    \"$ref\": \"#/components/schemas/URef\"\n                }\n            ]\n        }\n```\n\n----------------------------------------\n\nTITLE: Checking Deploy Status with Casper Client (Bash)\nDESCRIPTION: This command uses the `casper-client` to retrieve the execution status of a specific deploy (identified by `DEPLOY_HASH`) from a Casper node at the specified address (`<HOST:PORT>`). This is used to confirm if the deploy transaction that submitted the bid was successfully processed by the network.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/docs/operators/becoming-a-validator/bonding.md#2025-04-22_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\ncasper-client get-deploy --node-address http://<HOST:PORT> <DEPLOY_HASH>\n```\n\n----------------------------------------\n\nTITLE: Verifying Test Results in Casper Session Code Testing\nDESCRIPTION: This snippet demonstrates how to verify test results in Casper session code testing. It includes querying the contract state and asserting the expected value.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/versioned_docs/version-2.0.0/developers/writing-onchain-code/testing-session-code.md#2025-04-22_snippet_8\n\nLANGUAGE: rust\nCODE:\n```\nlet incremented_count = builder\n    .query(None, count_key, &[])\n    .expect(\"should be stored value.\")\n    .as_cl_value()\n    .expect(\"should be cl value.\")\n    .clone()\n    .into_t::<i32>()\n    .expect(\"should be i32.\");\n\nassert_eq!(incremented_count, 1);\n```\n\n----------------------------------------\n\nTITLE: Defining BlockHash Schema in JSON Schema\nDESCRIPTION: JSON Schema definition for the BlockHash data type, which represents a hex-encoded cryptographic hash of a block, extending the Digest schema.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/condor/jsonrpc-comp/rpc-2.0/schema.json.md#2025-04-22_snippet_47\n\nLANGUAGE: json\nCODE:\n```\n\"BlockHash\": {\n  \"description\": \"Hex-encoded cryptographic hash of a block.\",\n  \"allOf\": [\n    {\n      \"$ref\": \"#/components/schemas/Digest\"\n    }\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Running Ethereum Key Conversion Script\nDESCRIPTION: Command to execute the Node.js script for converting an Ethereum private key to PEM format and saving the output to a file.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/versioned_docs/version-1.5.X/concepts/accounts-and-keys.md#2025-04-22_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\nnode convert-to-pem.js > eth-secret.pem\n```\n\n----------------------------------------\n\nTITLE: Adding UInt256 Value JSON Schema\nDESCRIPTION: This schema details the addition of a 'U256' value, requiring an 'AddUInt256' property with reference to the 'U256' schema. It upholds alignment with specified constraints and formats.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/condor/jsonrpc-comp/rpc-1.5/schema.json.md#2025-04-22_snippet_47\n\nLANGUAGE: JSON\nCODE:\n```\n{\"AddUInt256\": {\"$ref\": \"#/components/schemas/U256\"}}\n```\n\n----------------------------------------\n\nTITLE: Configuring Block Size and Gas Limits in Casper Network\nDESCRIPTION: TOML configuration for maximum block size and gas limits in Casper Network. Settings include the maximum block size in bytes and the upper limit of total gas allowed for all transactions in a block.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/docs/concepts/economics/runtime.md#2025-04-22_snippet_1\n\nLANGUAGE: toml\nCODE:\n```\n[transactions]\n...\n# Maximum block size in bytes including transactions contained by the block.  0 means unlimited.\nmax_block_size = 5_242_880\n# The upper limit of total gas of all transactions in a block.\nblock_gas_limit = 3_300_000_000_000\n```\n\n----------------------------------------\n\nTITLE: Viewing Secp256k1 Public Key Hex Format\nDESCRIPTION: Command to display the hexadecimal format of the Secp256k1 public key. The public key starts with prefix '02' and is 68 bytes long.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/docs/concepts/accounts-and-keys.md#2025-04-22_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\ncat secp256k1-keys/public_key_hex\n```\n\n----------------------------------------\n\nTITLE: Viewing TransactionProcessed Event Structure from Casper SSE Endpoint - JSON\nDESCRIPTION: This snippet contains the full payload of a TransactionProcessed event streamed from the Casper blockchain node SSE endpoint. It details transaction hash, account, timestamp, TTL, block hash, execution results with effects, and nested message and key data in a deeply structured format. The snippet is intended for referencing the entire event structure for programmatic parsing or human inspection, using only JSON parsing tools. Parameters include various hash IDs, timestamps, and CLValue-encoded state changes, which clients can use to confirm successful transactions and affected state.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/versioned_docs/version-2.0.0/developers/writing-onchain-code/emitting-contract-events.md#2025-04-22_snippet_10\n\nLANGUAGE: json\nCODE:\n```\ndata: {\n    \"TransactionProcessed\": {\n        \"transaction_hash\": {\n            \"Deploy\": \"09b90ada8b456e342f3209b3330c1d3bba0452d453c7f37106fed9799b280e26\"\n        },\n        \"account\": \"0130a16c8b0918cbfa8da00b6c0910ae0f2799dfd5ef7f092d0c4c1688031d60ac\",\n        \"timestamp\": \"2023-11-29T01:35:41.522Z\",\n        \"ttl\": \"30m\",\n        \"block_hash\": \"b90c61cd1e3bc3be36110f04a7aec97b22bcfe9f36291cb011a14c4a663753bd\",\n        \"execution_result\": {\n            \"Version2\": {\n                \"Success\": {\n                    \"effects\": [\n                        {\n                            \"key\": \"account-hash-212ffdd040b65495419f4057c8392930e410f7bf24baeec8de59a6117b63e45c\",\n                            \"kind\": \"Identity\"\n                        },\n                        {\n                            \"key\": \"package-c092060112b445d1706f6962d7ad2da72a2e8312000e99d2b58f6a3e1624649a\",\n                            \"kind\": \"Identity\"\n                        },\n                        {\n                            \"key\": \"addressable-entity-system-f4952351cd81d38e205cd31a938b802241b70ac539d0fba5c5d2e0dc825f8944\",\n                            \"kind\": \"Identity\"\n                        },\n                        {\n                            \"key\": \"addressable-entity-system-f4952351cd81d38e205cd31a938b802241b70ac539d0fba5c5d2e0dc825f8944\",\n                            \"kind\": \"Identity\"\n                        },\n                        {\n                            \"key\": \"addressable-entity-system-f4952351cd81d38e205cd31a938b802241b70ac539d0fba5c5d2e0dc825f8944\",\n                            \"kind\": \"Identity\"\n                        },\n                        {\n                            \"key\": \"package-42c6bbc82e3fc9dc4f890f507812a49c19aa998ed09b9d97996d9257e3c8c1c1\",\n                            \"kind\": \"Identity\"\n                        },\n                        {\n                            \"key\": \"addressable-entity-system-f4952351cd81d38e205cd31a938b802241b70ac539d0fba5c5d2e0dc825f8944\",\n                            \"kind\": \"Identity\"\n                        },\n                        {\n                            \"key\": \"addressable-entity-system-f5a58fd26fb2200445eb04363affcc1240cb9e1882c6a86612de41e06e1082d1\",\n                            \"kind\": \"Identity\"\n                        },\n                        {\n                            \"key\": \"addressable-entity-system-f5a58fd26fb2200445eb04363affcc1240cb9e1882c6a86612de41e06e1082d1\",\n                            \"kind\": \"Identity\"\n                        },\n                        {\n                            \"key\": \"package-aabcd5869e1e47a6e66ca2430fcabbe9687241e55e0a070204b150771f7aef74\",\n                            \"kind\": \"Identity\"\n                        },\n                        {\n                            \"key\": \"addressable-entity-system-f5a58fd26fb2200445eb04363affcc1240cb9e1882c6a86612de41e06e1082d1\",\n                            \"kind\": \"Identity\"\n                        },\n                        {\n                            \"key\": \"balance-cfe2039aa5f3eca8a00d3444c4421e2034b77330d614b0c47c47d6af09113861\",\n                            \"kind\": \"Identity\"\n                        },\n                        {\n                            \"key\": \"balance-278862691b1d6698c02c82b302aa391f1cd10a3637e4a8c633b4560917bc607b\",\n                            \"kind\": \"Identity\"\n                        },\n                        {\n                            \"key\": \"balance-cfe2039aa5f3eca8a00d3444c4421e2034b77330d614b0c47c47d6af09113861\",\n                            \"kind\": {\n                                \"Write\": {\n                                    \"CLValue\": {\n                                        \"cl_type\": \"U512\",\n                                        \"bytes\": \"0e9a6a8aff995ac138938d44c64d31\",\n                                        \"parsed\": \"999999999999999999999518955956890\"\n                                    }\n                                }\n                            }\n                        },\n                        {\n                            \"key\": \"balance-278862691b1d6698c02c82b302aa391f1cd10a3637e4a8c633b4560917bc607b\",\n                            \"kind\": {\n                                \"AddUInt512\": \"7500000000\"\n                            }\n                        },\n                        {\n                            \"key\": \"addressable-entity-contract-b51b0f9d94e5744af4dce6b4a9990c5f3e652c1a0a946e680e83f97d8846eff5\",\n                            \"kind\": \"Identity\"\n                        },\n                        {\n                            \"key\": \"package-66cf48b3ccf32269ccc5d93059eef461bcf2c8b2460309ff3a442190688d5275\",\n                            \"kind\": \"Identity\"\n                        },\n                        {\n                            \"key\": \"byte-code-v1-wasm-23e042b941e45ea7fe4f81496fd778349f2002b2f786f9fddbdd1298450b60ad\",\n                            \"kind\": \"Identity\"\n                        },\n                        {\n                            \"key\": \"uref-c737324d1caa1885ad0f22f628933cfce91400ea259147186d330cf167eb6843-000\",\n                            \"kind\": \"Identity\"\n                        },\n                        {\n                            \"key\": \"uref-09b6f0901eb8cd9c6272be8199aeff4c6f5d2e3989980b548dbd595b40c033bf-000\",\n                            \"kind\": \"Identity\"\n                        },\n                        {\n                            \"key\": \"uref-cd0871a7e69b91a05dbf81068115e45380de3a35bd2258369e3a24b7958cd77f-000\",\n                            \"kind\": \"Identity\"\n                        },\n                        {\n                            \"key\": \"uref-962f6e020971031eb1bdd37f705df498cd4ee90c15aae901df9654a10461184d-000\",\n                            \"kind\": \"Identity\"\n                        },\n                        {\n                            \"key\": \"uref-e7acd748f4f82e609aa49f577e78e1ce6b1ab1dad5b5b1b59c8ff965598a6f34-000\",\n                            \"kind\": \"Identity\"\n                        },\n                        {\n                            \"key\": \"uref-cb9799861587032b55d391604c8a9f016d1237b0b600413d6c050da3e0fc81d1-000\",\n                            \"kind\": \"Identity\"\n                        },\n                        {\n                            \"key\": \"uref-bf32824dddf12dd16668581211ed22bef4b36c22db0165bde4986508f363940e-000\",\n                            \"kind\": \"Identity\"\n                        },\n                        {\n                            \"key\": \"dictionary-79bb2f90d7ab9cef266efe53e70722dc6e4fa56372ce8cd859b89cec3ff05307\",\n                            \"kind\": {\n                                \"Write\": {\n                                    \"CLValue\": {\n                                        \"cl_type\": \"Any\",\n                                        \"bytes\": \"8f0000008b0000007b226e616d65223a20224a6f686e20446f65222c22746f6b656e5f757269223a202268747470733a5c2f5c2f7777772e626172666f6f2e636f6d222c22636865636b73756d223a202239343062666662336632626261333566383433313361613236646130396563653361643437303435633661313239326332626264326466346162316135356662227d0a20000000dc660363cb2b4dfea2c01d8c3bf2258a3700fb6c830d13972ff206e330fd791a0100000030\",\n                                        \"parsed\": null\n                                    }\n                                }\n                            }\n                        },\n                        {\n                            \"key\": \"uref-bba9996be36b1526113a0aaa030db658edd3c8719a60d55b35b7312f01f2e6da-000\",\n                            \"kind\": \"Identity\"\n                        },\n                        {\n                            \"key\": \"dictionary-203953bdea81a8373a987786d74eb94d8626c401a28625bb66c006079fd2bde7\",\n                            \"kind\": {\n                                \"Write\": {\n                                    \"CLValue\": {\n                                        \"cl_type\": \"Any\",\n                                        \"bytes\": \"2100000000212ffdd040b65495419f4057c8392930e410f7bf24baeec8de59a6117b63e45c0b200000001cabd90eac707493056418a62d8b82057af0d7c1e1b90d6139a46120fff4187d0100000030\",\n                                        \"parsed\": null\n                                    }\n                                }\n                            }\n                        },\n                        {\n                            \"key\": \"dictionary-453603548bb0d677edaa9bbc014bff6e30801a8d86eb85f884ad08e874fdc0f1\",\n                            \"kind\": {\n                                \"Write\": {\n                                    \"CLValue\": {\n                                        \"cl_type\": \"Any\",\n                                        \"bytes\": \"...\"\n                                    }\n                                }\n                            }\n                        }\n                    ]\n                }\n            }\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Cloning and Setting Up Casper NCTL Docker Repository\nDESCRIPTION: This snippet shows how to clone the Casper NCTL Docker repository and switch to the Condor branch for setup.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/src/pages/condor/setting-up-condor-local.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ngit clone https://github.com/make-software/casper-nctl-docker.git\ncd casper-nctl-docker\ngit checkout feat-2.0\n```\n\n----------------------------------------\n\nTITLE: Adding UInt64 Value JSON Schema\nDESCRIPTION: This schema defines the addition of a 'u64' unsigned integer, requiring an 'AddUInt64' property with 'uint64' format. Values must be non-negative, adhering to the 64-bit unsigned integer constraints.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/condor/jsonrpc-comp/rpc-1.5/schema.json.md#2025-04-22_snippet_45\n\nLANGUAGE: JSON\nCODE:\n```\n{\"AddUInt64\": {\"type\": \"integer\", \"format\": \"uint64\", \"minimum\": 0.0}}\n```\n\n----------------------------------------\n\nTITLE: Querying Deploy Execution Status with casper-client in Bash\nDESCRIPTION: This snippet shows how to use the casper-client CLI tool to query the execution status of a deploy on the Casper Network. It includes options for specifying the JSON-RPC ID, node address, and deploy hash.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/versioned_docs/version-2.0.0/resources/beginner/querying-network.md#2025-04-22_snippet_9\n\nLANGUAGE: bash\nCODE:\n```\ncasper-client get-deploy \\\n      --id 2 \\\n      --node-address http://<node-ip-address>:7777 \\\n      <deploy-hash>\n```\n\n----------------------------------------\n\nTITLE: Generating Public Keys from Secret Key with OpenSSL\nDESCRIPTION: Commands to generate the public_key.pem and public_key_hex files from an existing secret_key.pem file using OpenSSL. The second command adds the '01' prefix for Ed25519 keys.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/docs/concepts/accounts-and-keys.md#2025-04-22_snippet_10\n\nLANGUAGE: bash\nCODE:\n```\nopenssl pkey -in secret_key.pem -pubout -out public_key.pem\n\n{ echo -n 01; openssl pkey -outform DER -pubout -in \"secret_key.pem\" | tail -c +13 | openssl base64 | openssl base64 -d | hexdump -ve '/1 \"%02x\" ' | tr -d \"/n\"; } > public_key_hex\n```\n\n----------------------------------------\n\nTITLE: Configuring AssemblyScript Build Scripts in package.json\nDESCRIPTION: This JSON snippet shows how to add build scripts to the project's `package.json` file. The `asbuild:optimized` script uses the AssemblyScript compiler (`asc`) to compile the entry point `assembly/index.ts` into an optimized and validated Wasm file named `dist/your-contract-name.wasm`. The `asbuild` script is an alias for the optimized build. Remember to replace `your-contract-name` with the actual name of your contract.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/versioned_docs/version-1.5.X/developers/writing-onchain-code/assembly-script.md#2025-04-22_snippet_4\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"name\": \"your-contract-name\",\n  ...\n  \"scripts\": {\n    \"asbuild:optimized\": \"asc assembly/index.ts -b dist/your-contract-name.wasm --validate --optimize --use abort=\",\n    \"asbuild\": \"npm run asbuild:optimized\",\n    ...\n  },\n  ...\n}\n```\n\n----------------------------------------\n\nTITLE: Entity Query Request Example\nDESCRIPTION: Example request for retrieving an entity using state_get_entity method, showing required entity identifier and optional block identifier parameters.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/docs/developers/json-rpc/json-rpc-informational.md#2025-04-22_snippet_26\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"id\": 1,\n  \"jsonrpc\": \"2.0\",\n  \"method\": \"state_get_entity\",\n  \"params\": [\n    {\n      \"name\": \"entity_identifier\",\n      \"value\": {\n        \"EntityAddr\": \"entity-account-0000000000000000000000000000000000000000000000000000000000000000\"\n      }\n    },\n    {\n      \"name\": \"block_identifier\",\n      \"value\": {\n        \"Hash\": \"0707070707070707070707070707070707070707070707070707070707070707\"\n      }\n    }\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Installing CMake on macOS\nDESCRIPTION: Install CMake, a popular build tool, on macOS using Homebrew.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/versioned_docs/version-2.0.0/developers/prerequisites.md#2025-04-22_snippet_21\n\nLANGUAGE: bash\nCODE:\n```\nbrew install cmake\n```\n\n----------------------------------------\n\nTITLE: Initializing Contract with Dictionary\nDESCRIPTION: Example of creating a dictionary within a contract's init entry point, including setup of a fundraising purse.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/versioned_docs/version-2.0.0/concepts/dictionaries.md#2025-04-22_snippet_1\n\nLANGUAGE: rust\nCODE:\n```\n#[no_mangle]\npub extern \"C\" fn init() {\n    let fundraising_purse = system::create_purse();\n    runtime::put_key(\"fundraising_purse\", fundraising_purse.into());\n    // Create a dictionary to track the mapping of account hashes to number of donations made.\n    storage::new_dictionary(\"ledger\").unwrap_or_revert();\n}\n```\n\n----------------------------------------\n\nTITLE: Stopping the Event Stream in JavaScript\nDESCRIPTION: Demonstrates how to stop listening to all events using the Casper JavaScript SDK.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/docs/developers/dapps/monitor-and-consume-events.md#2025-04-22_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\nes.stop()\n```\n\n----------------------------------------\n\nTITLE: Defining JSON Schema for Peer Network Addresses\nDESCRIPTION: This JSON snippet defines schema attributes for a map consisting of peer IDs linked to network addresses, structured as an array. It references a component schema for 'PeerEntry', which should be defined elsewhere. It expects each entry in the array to comply with the 'PeerEntry' schema, ensuring consistent data modeling for network representations.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/condor/jsonrpc-comp/rpc-2.0/schema/Peers.json.md#2025-04-22_snippet_0\n\nLANGUAGE: JSON\nCODE:\n```\n{\n    \"description\": \"Map of peer IDs to network addresses.\",\n    \"type\": \"array\",\n    \"items\": {\n        \"$ref\": \"#/components/schemas/PeerEntry\"\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Simplified Global State Query for Allowance Results\nDESCRIPTION: A simplified version of the global state query command for allowance results without explanatory comments, showing the essential parameters needed for retrieving allowance check results.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/versioned_docs/version-2.0.0/resources/tokens/cep18/transfer.md#2025-04-22_snippet_12\n\nLANGUAGE: bash\nCODE:\n```\ncasper-client query-global-state -n http://<node IP>:<PORT> \\\n--key uref-a46ad389b53715d9991a513c8ca48e1502facc4c563c0700a31e830c4cb8a7d4-007 \\\n--state-root-hash e64f877f65df26db74300bb175c244d589bd88a23b91abf9ceb73ac5e65e90f1\n```\n\n----------------------------------------\n\nTITLE: Defining Custom Validated JSON Schema for CEP-78\nDESCRIPTION: Example of a custom JSON schema for CEP-78 NFT metadata validation. It defines properties for deity name and mythology, specifying their descriptions and whether they are required.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/versioned_docs/version-1.5.X/resources/tokens/cep78/modalities.md#2025-04-22_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"properties\": {\n    \"deity_name\": {\n      \"name\": \"deity_name\",\n      \"description\": \"The name of deity from a particular pantheon.\",\n      \"required\": true\n    },\n    \"mythology\": {\n      \"name\": \"mythology\",\n      \"description\": \"The mythology the deity belongs to.\",\n      \"required\": true\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Wallet Disconnect Handler\nDESCRIPTION: JavaScript function to handle wallet disconnection from the website.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/docs/developers/dapps/template-frontend.md#2025-04-22_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\nconst disconnect = (props) => {\n    provider.disconnectFromSite().then(disconnected => {\n        if (disconnected) {\n            props.setPublicKey(null);\n            alert(\"Disconnected\");\n        } \n    }).catch(error => {\n        alert(error.message);\n    });\n}\n```\n\n----------------------------------------\n\nTITLE: Starting the Casper Node using Python Utility via Bash\nDESCRIPTION: Executes the `node_util.py` Python script first to rotate logs (`rotate_logs` command) and then to start the Casper node launcher service (`start` command). Requires `sudo` privileges.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/versioned_docs/version-1.5.X/operators/setup/install-node.md#2025-04-22_snippet_14\n\nLANGUAGE: bash\nCODE:\n```\nsudo /etc/casper/node_util.py rotate_logs\nsudo /etc/casper/node_util.py start\n```\n\n----------------------------------------\n\nTITLE: Defining Hex-Encoded Cryptographic Signature Type - JSON Schema - JSON\nDESCRIPTION: This JSON code snippet defines a schema property that describes a required cryptographic signature as a hex-encoded string, including an algorithm tag prefix. It is intended for use as part of a JSON schema or data validation specification to document or enforce the required format for cryptographic signatures in API data objects. There are no explicit dependencies beyond standard JSON schema tools, and the primary parameter is the cryptographic signature string itself. Input is expected as a string formatted per description.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/condor/jsonrpc-comp/rpc-2.0/schema/Signature.json.md#2025-04-22_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"description\": \"Hex-encoded cryptographic signature, including the algorithm tag prefix.\",\n    \"type\": \"string\"\n} \n```\n\n----------------------------------------\n\nTITLE: Defining StoredValue Schema for Casper Network in JSON\nDESCRIPTION: JSON schema definition for StoredValue, which represents the different types of values that can be stored in the Casper Network's global state. It includes variants for CLValue, Account, Contract, ContractPackage, and various other platform-specific data types.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/condor/jsonrpc-comp/rpc-2.0/schema.json.md#2025-04-22_snippet_64\n\nLANGUAGE: json\nCODE:\n```\n\"StoredValue\": {\n  \"description\": \"A value stored in Global State.\",\n  \"oneOf\": [\n    {\n      \"description\": \"A CLValue.\",\n      \"type\": \"object\",\n      \"required\": [\n        \"CLValue\"\n      ],\n      \"properties\": {\n        \"CLValue\": {\n          \"$ref\": \"#/components/schemas/CLValue\"\n        }\n      },\n      \"additionalProperties\": false\n    },\n    {\n      \"description\": \"An account.\",\n      \"type\": \"object\",\n      \"required\": [\n        \"Account\"\n      ],\n      \"properties\": {\n        \"Account\": {\n          \"$ref\": \"#/components/schemas/Account\"\n        }\n      },\n      \"additionalProperties\": false\n    },\n    {\n      \"description\": \"Contract wasm.\",\n      \"type\": \"object\",\n      \"required\": [\n        \"ContractWasm\"\n      ],\n      \"properties\": {\n        \"ContractWasm\": {\n          \"$ref\": \"#/components/schemas/ContractWasm\"\n        }\n      },\n      \"additionalProperties\": false\n    },\n    {\n      \"description\": \"A contract.\",\n      \"type\": \"object\",\n      \"required\": [\n        \"Contract\"\n      ],\n      \"properties\": {\n        \"Contract\": {\n          \"$ref\": \"#/components/schemas/Contract\"\n        }\n      },\n      \"additionalProperties\": false\n    },\n    {\n      \"description\": \"A contract package.\",\n      \"type\": \"object\",\n      \"required\": [\n        \"ContractPackage\"\n      ],\n      \"properties\": {\n        \"ContractPackage\": {\n          \"$ref\": \"#/components/schemas/ContractPackage\"\n        }\n      },\n      \"additionalProperties\": false\n    },\n    {\n      \"description\": \"A version 1 (legacy) transfer.\",\n      \"type\": \"object\",\n      \"required\": [\n        \"LegacyTransfer\"\n      ],\n      \"properties\": {\n        \"LegacyTransfer\": {\n          \"$ref\": \"#/components/schemas/TransferV1\"\n        }\n      },\n      \"additionalProperties\": false\n    },\n    {\n      \"description\": \"Info about a deploy.\",\n      \"type\": \"object\",\n      \"required\": [\n        \"DeployInfo\"\n      ],\n      \"properties\": {\n        \"DeployInfo\": {\n          \"$ref\": \"#/components/schemas/DeployInfo\"\n        }\n      },\n      \"additionalProperties\": false\n    },\n    {\n      \"description\": \"Info about an era.\",\n      \"type\": \"object\",\n      \"required\": [\n        \"EraInfo\"\n      ],\n      \"properties\": {\n        \"EraInfo\": {\n          \"$ref\": \"#/components/schemas/EraInfo\"\n        }\n      },\n      \"additionalProperties\": false\n    },\n    {\n      \"description\": \"Variant that stores [`Bid`].\",\n      \"type\": \"object\",\n      \"required\": [\n        \"Bid\"\n      ],\n      \"properties\": {\n        \"Bid\": {\n          \"$ref\": \"#/components/schemas/Bid\"\n        }\n      },\n      \"additionalProperties\": false\n    },\n    {\n      \"description\": \"Variant that stores withdraw information.\",\n      \"type\": \"object\",\n      \"required\": [\n        \"Withdraw\"\n      ],\n      \"properties\": {\n        \"Withdraw\": {\n          \"type\": \"array\",\n          \"items\": {\n            \"$ref\": \"#/components/schemas/WithdrawPurse\"\n          }\n        }\n      },\n      \"additionalProperties\": false\n    },\n    {\n      \"description\": \"Unbonding information.\",\n      \"type\": \"object\",\n      \"required\": [\n        \"Unbonding\"\n      ],\n      \"properties\": {\n        \"Unbonding\": {\n          \"type\": \"array\",\n          \"items\": {\n            \"$ref\": \"#/components/schemas/UnbondingPurse\"\n          }\n        }\n      },\n      \"additionalProperties\": false\n    },\n    {\n      \"description\": \"An `AddressableEntity`.\",\n      \"type\": \"object\",\n      \"required\": [\n        \"AddressableEntity\"\n      ],\n      \"properties\": {\n        \"AddressableEntity\": {\n          \"$ref\": \"#/components/schemas/AddressableEntity\"\n        }\n      },\n      \"additionalProperties\": false\n    },\n    {\n      \"description\": \"Variant that stores [`BidKind`].\",\n      \"type\": \"object\",\n      \"required\": [\n        \"BidKind\"\n      ],\n      \"properties\": {\n        \"BidKind\": {\n          \"$ref\": \"#/components/schemas/BidKind\"\n        }\n      },\n      \"additionalProperties\": false\n    },\n    {\n      \"description\": \"A `Package`.\",\n      \"type\": \"object\",\n      \"required\": [\n        \"Package\"\n      ],\n      \"properties\": {\n        \"Package\": {\n          \"$ref\": \"#/components/schemas/Package\"\n        }\n      }\n```\n\n----------------------------------------\n\nTITLE: Alternative Note Formatting in Markdown\nDESCRIPTION: Shows the alternative syntax for formatting notes using the note directive, requiring blank lines before and after the content.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/README/STANDARDS.md#2025-04-22_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n:::note \n\nAlternatively, you can use this link to download the Casper Wallet.  \n\n:::\n```\n\n----------------------------------------\n\nTITLE: Persisting NoFile Limit in limits.conf\nDESCRIPTION: Add this configuration line to '/etc/security/limits.conf' to make the 'nofile' limit persistent across reboots and service restarts for the user 'casper'. This ensures the limit remains at 64000 after any system changes.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/docs/operators/setup/open-files.md#2025-04-22_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\ncasper          hard    nofile          64000\n```\n\n----------------------------------------\n\nTITLE: Simplified Global State Query for Balance Results\nDESCRIPTION: A simplified version of the global state query command without explanatory comments, showing the essential parameters needed for retrieving balance check results.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/versioned_docs/version-2.0.0/resources/tokens/cep18/transfer.md#2025-04-22_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\ncasper-client query-global-state -n http://<NODE IP>:<PORT> \\\n--key uref-a46ad389b53715d9991a513c8ca48e1502facc4c563c0700a31e830c4cb8a7d4-007 \\\n--state-root-hash 3aecd0e4b6ec29ee7c1eed701132eabfe6e66a1e0f1595c9c65bfed447e474f7\n```\n\n----------------------------------------\n\nTITLE: Defining FetchedOrNotFound Enum in Rust\nDESCRIPTION: Defines the FetchedOrNotFound enum used in GetResponses to indicate whether an item was found or not. It is generic over the item type T and the ID type.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/docs/concepts/design/networking-protocol.md#2025-04-22_snippet_4\n\nLANGUAGE: rust\nCODE:\n```\npub enum FetchedOrNotFound<T, Id> {\n    Fetched(T),\n    NotFound(Id),\n}\n```\n\n----------------------------------------\n\nTITLE: Testing Configuration Archive\nDESCRIPTION: Commands for testing the extracted configuration archive\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/versioned_docs/version-2.0.0/operators/setup-network/staging-files-for-new-network.md#2025-04-22_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\nmkdir conftest\ncd conftest\ntar -xzvf ../config.tar.gz .\n```\n\n----------------------------------------\n\nTITLE: Defining ExecutionEffect Schema in JSON Schema\nDESCRIPTION: JSON Schema definition for the ExecutionEffect data structure, which represents the sequence of execution transforms resulting from a deploy, including operations and transforms lists.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/condor/jsonrpc-comp/rpc-2.0/schema.json.md#2025-04-22_snippet_50\n\nLANGUAGE: json\nCODE:\n```\n\"ExecutionEffect\": {\n  \"description\": \"The sequence of execution transforms from a single deploy.\",\n  \"type\": \"object\",\n  \"required\": [\n    \"operations\",\n    \"transforms\"\n  ],\n  \"properties\": {\n    \"operations\": {\n      \"description\": \"The resulting operations.\",\n      \"type\": \"array\",\n      \"items\": {\n        \"$ref\": \"#/components/schemas/Operation\"\n      }\n    },\n    \"transforms\": {\n      \"description\": \"The sequence of execution transforms.\",\n      \"type\": \"array\",\n      \"items\": {\n        \"$ref\": \"#/components/schemas/TransformV1\"\n      }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining U512\nDESCRIPTION: This schema represents a 512-bit integer in decimal string format. It is used for handling large numerical values.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/condor/jsonrpc-comp/rpc-1.5/schema/components.json.md#2025-04-22_snippet_29\n\nLANGUAGE: JSON\nCODE:\n```\n{\\n    \\\"description\\\": \\\"Decimal representation of a 512-bit integer.\\\",\\n    \\\"type\\\": \\\"string\\\"\\n}\n```\n\n----------------------------------------\n\nTITLE: Defining CLType Map Schema in JSON\nDESCRIPTION: JSON schema definition for a Map type in Casper's type system. This represents a map with keys and values of specified CLTypes.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/condor/jsonrpc-comp/rpc-1.5/schema/components.json.md#2025-04-22_snippet_7\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"description\": \"Map with keys of a single `CLType` and values of a single `CLType`.\",\n    \"type\": \"object\",\n    \"required\": [\n        \"Map\"\n    ],\n    \"properties\": {\n        \"Map\": {\n            \"type\": \"object\",\n            \"required\": [\n                \"key\",\n                \"value\"\n            ],\n            \"properties\": {\n                \"key\": {\n                    \"$ref\": \"#/components/schemas/CLType\"\n                },\n                \"value\": {\n                    \"$ref\": \"#/components/schemas/CLType\"\n                }\n            },\n            \"additionalProperties\": false\n        }\n    },\n    \"additionalProperties\": false\n}\n```\n\n----------------------------------------\n\nTITLE: Delegating CSPR Using System Auction Contract\nDESCRIPTION: Command to delegate CSPR tokens by calling the delegate entry point from the system auction contract. Requires node address, secret key, chain name, payment amount, session hash, and delegation parameters.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/versioned_docs/version-1.5.X/developers/cli/delegate.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ncasper-client put-deploy \\\n--node-address <HOST:PORT> \\\n--secret-key <PATH> \\\n--chain-name <CHAIN_NAME> \\\n--payment-amount <PAYMENT_AMOUNT_IN_MOTES> \\\n--session-hash <SESSION_HASH> \\\n--session-entry-point delegate \\\n--session-arg \"validator:public_key='<HEX_ENCODED_VALIDATOR_PULIC_KEY>'\" \\\n--session-arg \"amount:u512='<AMOUNT_TO_DELEGATE>'\" \\\n--session-arg \"delegator:public_key='<HEX_ENCODED_DELEGATOR_PULIC_KEY>'\"\n```\n\n----------------------------------------\n\nTITLE: Sample Request for Querying Global State (Account) in Bash\nDESCRIPTION: Example usage of the `casper-client query-global-state` command to retrieve information associated with a specific account hash. It provides the node address, a specific state root hash, and the target account hash as the key.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/versioned_docs/version-2.0.0/developers/cli/querying-global-state.md#2025-04-22_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\n```bash\ncasper-client query-global-state \\\n--node-address http://localhost:11101 \\\n--state-root-hash 6b5849caa605acdc29564f303764396a27ef7a6b1a61f7b13109b129e7e70d81 \\\n--key account-hash-6a56c4eee172043975aea72221eaf09f3c3a24f09a379935e44c9979f1ae9463\n```\n```\n\n----------------------------------------\n\nTITLE: Aptos Public Function Declaration\nDESCRIPTION: Example of declaring a public function in Aptos blockchain.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/versioned_docs/version-1.5.X/resources/moving-to-casper.md#2025-04-22_snippet_6\n\nLANGUAGE: rust\nCODE:\n```\npublic fun start_collection(account: &signer) {}\n```\n\n----------------------------------------\n\nTITLE: Requesting Global State via Casper RPC (Bash/JSON)\nDESCRIPTION: Illustrates an example JSON request for the `query_global_state` RPC method. The parameters array includes the key to query (a formatted `casper_types::Key` string, here a deploy hash), the path (an empty array, meaning querying the key itself), and the `state_identifier` (using `BlockHash` to specify the state context for the query). This method is used to query general values in global state, but not purse balances.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/versioned_docs/version-1.5.X/developers/json-rpc/json-rpc-informational.md#2025-04-22_snippet_14\n\nLANGUAGE: bash\nCODE:\n```\n{\n  \"id\": 1,\n  \"jsonrpc\": \"2.0\",\n  \"method\": \"query_global_state\",\n  \"params\": [\n    \"deploy-af684263911154d26fa05be9963171802801a0b6aff8f199b7391eacb8edc9e1\",\n    [],\n    {\n      \"BlockHash\": \"13c2d7a68ecdd4b74bf4393c88915c836c863fc4bf11d7f2bd930a1bbccacdcb\"\n    }\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Delegator Schema with JSON Schema - JSON\nDESCRIPTION: This JSON code defines a schema object for a delegator, used to validate data structures representing delegators in the Casper network. It specifies four required properties (public_key, staked_amount, bonding_purse, delegatee), each referencing external schema definitions for type safety. Dependencies include the referenced schemas (PublicKey, U512, and URef), and additional properties beyond those listed are not permitted; expected input is a JSON object following this structure. The output is a validated data object or a validation error upon violation.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/condor/jsonrpc-comp/rpc-1.5/schema/JsonDelegator.json.md#2025-04-22_snippet_0\n\nLANGUAGE: JSON\nCODE:\n```\n{\n    \"description\": \"A delegator associated with the given validator.\",\n    \"type\": \"object\",\n    \"required\": [\n        \"bonding_purse\",\n        \"delegatee\",\n        \"public_key\",\n        \"staked_amount\"\n    ],\n    \"properties\": {\n        \"public_key\": {\n            \"$ref\": \"#/components/schemas/PublicKey\"\n        },\n        \"staked_amount\": {\n            \"$ref\": \"#/components/schemas/U512\"\n        },\n        \"bonding_purse\": {\n            \"$ref\": \"#/components/schemas/URef\"\n        },\n        \"delegatee\": {\n            \"$ref\": \"#/components/schemas/PublicKey\"\n        }\n    },\n    \"additionalProperties\": false\n}\n```\n\n----------------------------------------\n\nTITLE: Creating UpdateMessage Component in React\nDESCRIPTION: This bash command creates a new file 'UpdateMessage.jsx' in the 'src' directory, which will contain the React component for updating messages on the Casper blockchain.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/versioned_docs/version-1.5.X/developers/dapps/template-frontend.md#2025-04-22_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\ntouch src/UpdateMessage.jsx\n```\n\n----------------------------------------\n\nTITLE: Era Info Response\nDESCRIPTION: Example response showing era summary information including seigniorage allocations and merkle proof.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/docs/developers/json-rpc/json-rpc-pos.md#2025-04-22_snippet_5\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"id\": 1,\n  \"jsonrpc\": \"2.0\",\n  \"result\": {\n    \"name\": \"chain_get_era_info_by_switch_block_result\",\n    \"value\": {\n      \"api_version\": \"2.0.0\",\n      \"era_summary\": {\n        \"block_hash\": \"0744fcb72af43c5cc372039bc5a8bfee48808a9ce414acc0d6338a628c20eb42\",\n        \"era_id\": 42,\n        \"stored_value\": {\n          \"EraInfo\": {\n            \"seigniorage_allocations\": [\n              {\n                \"Delegator\": {\n                  \"delegator_public_key\": \"01e1b46a25baa8a5c28beb3c9cfb79b572effa04076f00befa57eb70b016153f18\",\n                  \"validator_public_key\": \"012a1732addc639ea43a89e25d3ad912e40232156dcaa4b9edfc709f43d2fb0876\",\n                  \"amount\": \"1000\"\n                }\n              },\n              {\n                \"Validator\": {\n                  \"validator_public_key\": \"012a1732addc639ea43a89e25d3ad912e40232156dcaa4b9edfc709f43d2fb0876\",\n                  \"amount\": \"2000\"\n                }\n              }\n            ]\n          }\n        },\n        \"state_root_hash\": \"0808080808080808080808080808080808080808080808080808080808080808\",\n        \"merkle_proof\": \"01000000006ef2e0949ac76e55812421f755abe129b6244fe7168b77f47a72536147614625016ef2e0949ac76e55812421f755abe129b6244fe7168b77f47a72536147614625000000003529cde5c621f857f75f3810611eb4af3f998caaa9d4a3413cf799f99c67db0307010000006ef2e0949ac76e55812421f755abe129b6244fe7168b77f47a7253614761462501010102000000006e06000000000074769d28aac597a36a03a932d4b43e4f10bf0403ee5c41dd035102553f5773631200b9e173e8f05361b681513c14e25e3138639eb03232581db7557c9e8dbbc83ce94500226a9a7fe4f2b7b88d5103a4fc7400f02bf89c860c9ccdd56951a2afe9be0e0267006d820fb5676eb2960e15722f7725f3f8f41030078f8b2e44bf0dc03f71b176d6e800dc5ae9805068c5be6da1a90b2528ee85db0609cc0fb4bd60bbd559f497a98b67f500e1e3e846592f4918234647fca39830b7e1e6ad6f5b7a99b39af823d82ba1873d000003000000010186ff500f287e9b53f823ae1582b1fa429dfede28015125fd233a31ca04d5012002015cc42669a55467a1fdf49750772bfc1aed59b9b085558eb81510e9b015a7c83b0301e3cf4a34b1db6bfa58808b686cb8fe21ebe0c1bcbcee522649d2b135fe510fe3\"\n      }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining info_get_validator_changes RPC Schema\nDESCRIPTION: JSON schema that specifies the structure for an RPC endpoint that retrieves validator status changes. The schema defines the expected response format including API version and an array of validator changes with their public keys and status change history.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/condor/jsonrpc-comp/rpc-1.5/info_get_validator_changes.json.md#2025-04-22_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"name\": \"info_get_validator_changes\",\n  \"summary\": \"returns status changes of active validators\",\n  \"params\": [],\n  \"result\": {\n    \"name\": \"info_get_validator_changes_result\",\n    \"schema\": {\n      \"description\": \"Result for the \\\"info_get_validator_changes\\\" RPC.\",\n      \"type\": \"object\",\n      \"required\": [\n        \"api_version\",\n        \"changes\"\n      ],\n      \"properties\": {\n        \"api_version\": {\n          \"description\": \"The RPC API version.\",\n          \"type\": \"string\"\n        },\n        \"changes\": {\n          \"description\": \"The validators' status changes.\",\n          \"type\": \"array\",\n          \"items\": {\n            \"$ref\": \"#/components/schemas/JsonValidatorChanges\"\n          }\n        }\n      },\n      \"additionalProperties\": false\n    }\n  },\n  \"examples\": [\n    {\n      \"name\": \"info_get_validator_changes_example\",\n      \"params\": [],\n      \"result\": {\n        \"name\": \"info_get_validator_changes_example_result\",\n        \"value\": {\n          \"api_version\": \"1.5.6\",\n          \"changes\": [\n            {\n              \"public_key\": \"01d9bf2148748a85c89da5aad8ee0b0fc2d105fd39d41a4c796536354f0ae2900c\",\n              \"status_changes\": [\n                {\n                  \"era_id\": 1,\n                  \"validator_change\": \"Added\"\n                }\n              ]\n            }\n          ]\n        }\n      }\n    }\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Query Last Added Block Info From Node - Bash\nDESCRIPTION: Fetches and extracts the last_added_block_info field from the /status REST endpoint using curl and jq. Useful for block synchronization tracking and block metadata diagnostics. Assumes jq/curl are installed and node address is correct.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/docs/operators/setup/node-endpoints.md#2025-04-22_snippet_10\n\nLANGUAGE: bash\nCODE:\n```\ncurl -s http://<node_address>:8888/status | jq .last_added_block_info\n```\n\n----------------------------------------\n\nTITLE: JSON Schema for Era Protocol Version Association\nDESCRIPTION: Defines a schema with two possible formats for specifying when a protocol version takes effect - either via an era ID or genesis timestamp. The schema uses anyOf to allow either format and references external definitions for EraId and Timestamp types.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/condor/jsonrpc-comp/rpc-1.5/schema/ActivationPoint.json.md#2025-04-22_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"description\": \"The first era to which the associated protocol version applies.\",\n    \"anyOf\": [\n        {\n            \"description\": \"Era id.\",\n            \"allOf\": [\n                {\n                    \"$ref\": \"#/components/schemas/EraId\"\n                }\n            ]\n        },\n        {\n            \"description\": \"Genesis timestamp.\",\n            \"allOf\": [\n                {\n                    \"$ref\": \"#/components/schemas/Timestamp\"\n                }\n            ]\n        }\n    ]\n}\n```\n\n----------------------------------------\n\nTITLE: JSON-RPC Dictionary Lookup via Contract\nDESCRIPTION: Command line example for looking up dictionary items using ContractNamedKey through the Casper client.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/versioned_docs/version-2.0.0/concepts/dictionaries.md#2025-04-22_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\ncasper-client get-dictionary-item \\\n    --node-address http://localhost:11101 \\\n    --state-root-hash 50c34ccbe1315d58ce22bf7518071164d16acd20a1becb0b423293418297416d \\\n    --contract-hash hash-09c8fa7c1441ae7c1cbe27ae3a722fd4ffc5290315f8546454454c1b9f85c842 \\\n    --dictionary-name <String> \\\n    --dictionary-item-key <String>\n```\n\n----------------------------------------\n\nTITLE: Creating Named Contract Reference in Casper Account\nDESCRIPTION: Creates a named key in an account that references the deployed contract entity. The name 'test_payment_hash' provides a human-readable way to access the contract from the account context.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/versioned_docs/version-2.0.0/developers/json-rpc/json-rpc-transactional.md#2025-04-22_snippet_27\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"key\": \"named-key-entity-account-7ba7c904427d5fe653b99584c07c3c5963b6ea2e75ad87aea69b71a65bf6fcea-9dbabf5ba4a0f30fd2fc8085b3b0baccf6bedc38c362d571b7912387d0bd8f39\",\n    \"kind\": {\n        \"Write\": {\n            \"NamedKey\": {\n                \"named_key\": {\n                    \"cl_type\": \"Key\",\n                    \"bytes\": \"1102eb1c971063155d461059292e91cfe2212d45b79a49294b8d90bdae18cda6e59e\",\n                    \"parsed\": \"entity-contract-eb1c971063155d461059292e91cfe2212d45b79a49294b8d90bdae18cda6e59e\"\n                },\n                \"name\": {\n                    \"cl_type\": \"String\",\n                    \"bytes\": \"11000000746573745f7061796d656e745f68617368\",\n                    \"parsed\": \"test_payment_hash\"\n                }\n            }\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Adding a Pre-commit Hook with Husky - Bash\nDESCRIPTION: Uses npx to add a new pre-commit hook in the project configured by Husky. This command sets up a pre-commit hook under the .husky directory that runs 'npm run commit' before allowing a commit. Dependencies include npx and Husky set up in the project. The created file will be invoked by Git pre-commit, and expects an npm 'commit' script to exist.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/README/DEVELOPERS.md#2025-04-22_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\nnpx husky add .husky/pre-commit \"npm run commit\"\n```\n\n----------------------------------------\n\nTITLE: Configuring Node Trusted Hash in TOML\nDESCRIPTION: A configuration snippet for setting up a trusted hash as an anchor when joining an existing Casper network. This is set in the node's config.toml file.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/versioned_docs/version-1.5.X/operators/setup/basic-node-configuration.md#2025-04-22_snippet_5\n\nLANGUAGE: toml\nCODE:\n```\n[node]\n\n# If set, use this hash as a trust anchor when joining an existing network.\n#trusted_hash = 'HEX-FORMATTED BLOCK HASH'\n```\n\n----------------------------------------\n\nTITLE: Installing CMake on macOS - Bash\nDESCRIPTION: Installs or updates CMake via Homebrew for macOS. Required for building native code when developing Casper contracts and node source. Assumes Homebrew is present.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/versioned_docs/version-1.5.X/developers/prerequisites.md#2025-04-22_snippet_21\n\nLANGUAGE: bash\nCODE:\n```\nbrew install cmake\n```\n\n----------------------------------------\n\nTITLE: Running Tests with npm\nDESCRIPTION: This command executes tests provided in the SDK's test directory to verify the SDK's functionality.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/versioned_docs/version-2.0.0/developers/dapps/sdk/script-sdk.md#2025-04-22_snippet_1\n\nLANGUAGE: Bash\nCODE:\n```\nnpm run test\n```\n\n----------------------------------------\n\nTITLE: Defining Contract Package Lock Status Enum in JSON Schema\nDESCRIPTION: A JSON schema definition that specifies the lock status enum for contract packages. The enum has two possible values: 'Locked' and 'Unlocked', which determine whether the contract package can be modified.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/condor/jsonrpc-comp/rpc-1.5/schema/ContractPackageStatus.json.md#2025-04-22_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"description\": \"A enum to determine the lock status of the contract package.\",\n    \"type\": \"string\",\n    \"enum\": [\n        \"Locked\",\n        \"Unlocked\"\n    ]\n}\n```\n\n----------------------------------------\n\nTITLE: JSON-RPC Response Structure\nDESCRIPTION: Example JSON-RPC response structure returned after a successful transfer command, containing the API version and deploy hash.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/versioned_docs/version-1.5.X/developers/cli/transfers/direct-token-transfer.md#2025-04-22_snippet_3\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"jsonrpc\": \"2.0\",\n  \"id\": 3,\n  \"result\": {\n    \"api_version\": \"1.5.3\",\n    \"deploy_hash\": \"1f17a0bdeaaf71abd03492c854cdf97f746432751721ce555e95b9cefe641e3c\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Contract Package Schema Definition\nDESCRIPTION: JSON schema for contract packages which contain contract metadata, versioning and access control information. Defines the structure for managing contract versions and security groups.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/condor/jsonrpc-comp/rpc-1.5/schema.json.md#2025-04-22_snippet_59\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"description\": \"Contract definition, metadata, and security container.\",\n  \"type\": \"object\",\n  \"required\": [\n    \"access_key\",\n    \"disabled_versions\",\n    \"groups\",\n    \"lock_status\",\n    \"versions\"\n  ],\n  \"properties\": {\n    \"access_key\": {\n      \"$ref\": \"#/components/schemas/URef\"\n    },\n    \"versions\": {\n      \"type\": \"array\",\n      \"items\": {\n        \"$ref\": \"#/components/schemas/ContractVersion\"\n      }\n    },\n    \"disabled_versions\": {\n      \"type\": \"array\",\n      \"items\": {\n        \"$ref\": \"#/components/schemas/DisabledVersion\"\n      }\n    },\n    \"groups\": {\n      \"type\": \"array\",\n      \"items\": {\n        \"$ref\": \"#/components/schemas/Groups\"\n      }\n    },\n    \"lock_status\": {\n      \"$ref\": \"#/components/schemas/ContractPackageStatus\"\n    }\n  },\n  \"additionalProperties\": false\n}\n```\n\n----------------------------------------\n\nTITLE: Example of System Auction Contract Undelegation\nDESCRIPTION: Example command showing how to undelegate 100 CSPR using the system auction contract method on the Casper Testnet.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/docs/developers/cli/undelegate.md#2025-04-22_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ncasper-client put-deploy \\\n--node-address http://65.21.75.254:7777  \\\n--chain-name casper-test \\\n--secret-key ~/KEYS/secret_key.pem \\\n--payment-amount 2500000000 \\\n--session-hash hash-93d923e336b20a4c4ca14d592b60e5bd3fe330775618290104f9beb326db7ae2 \\\n--session-entry-point undelegate \\\n--session-arg \"validator:public_key='01aa17f7b9889480b1bd34c3f94f263b229c7a9b01dd4dda19c2dd1d38d176c7a0'\" \\\n--session-arg \"amount:u512='100000000000'\" \\\n--session-arg \"delegator:public_key='01e3d3392c2e0b943abe709b25de5c353e5e1e9d95c7a76e3dd343d8aa1aa08d51'\"\n```\n\n----------------------------------------\n\nTITLE: Near Return Method Implementation\nDESCRIPTION: Shows how to implement a public method in Near that returns data.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/versioned_docs/version-1.5.X/resources/moving-to-casper.md#2025-04-22_snippet_5\n\nLANGUAGE: rust\nCODE:\n```\npub fn get_messages(&self, from_index: Option<U128>, limit: Option<u64>) -> Vec<PostedMessage> { }\n```\n\n----------------------------------------\n\nTITLE: Refreshing Bash Session\nDESCRIPTION: Command to refresh the bash session after extending the .bashrc file with NCTL commands.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/versioned_docs/version-2.0.0/developers/dapps/setup-nctl.md#2025-04-22_snippet_19\n\nLANGUAGE: bash\nCODE:\n```\n. $HOME/.bashrc\n```\n\n----------------------------------------\n\nTITLE: Example Node Configuration\nDESCRIPTION: Sample configuration file header for a Casper node showing where to specify the trusted block hash.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/versioned_docs/version-2.0.0/operators/setup/basic-node-configuration.md#2025-04-22_snippet_3\n\nLANGUAGE: toml\nCODE:\n```\n# ================================\n# Configuration options for a node\n# ================================\n[node]\n\n```\n\n----------------------------------------\n\nTITLE: Named Keys JSON Structure After Contract Execution\nDESCRIPTION: JSON snippet showing the named keys added to the account after successful execution of the hello_world.wasm contract. It includes a reference to the created key with its unique identifier and user-defined name.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/versioned_docs/version-1.5.X/resources/advanced/multi-sig/multi-sig-workflow.md#2025-04-22_snippet_14\n\nLANGUAGE: json\nCODE:\n```\n\"named_keys\": [\n  {\n    \"key\": \"uref-9b9ecaa9e5e235fc6955d4d528cb1b5b38f2d800f6cbbc55351131a3701b5a81-007\",\n    \"name\": \"my-key-name\"\n  }\n]\n```\n\n----------------------------------------\n\nTITLE: Defining JSON Schema for Block Retrieval\nDESCRIPTION: This JSON schema is designed for the \"chain_get_block\" RPC. It facilitates fetching a block from the network by referencing the block identifier. The response includes API version and block data if found, and references a JsonBlock schema for detailed block properties.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/condor/jsonrpc-comp/rpc-1.5/schema.json.md#2025-04-22_snippet_17\n\nLANGUAGE: json\nCODE:\n```\n{ \"name\": \"chain_get_block\", \"summary\": \"returns a Block from the network\", \"params\": [ { \"name\": \"block_identifier\", \"schema\": { \"description\": \"The block identifier.\", \"$ref\": \"#/components/schemas/BlockIdentifier\" }, \"required\": false } ], \"result\": { \"name\": \"chain_get_block_result\", \"schema\": { \"description\": \"Result for \\\"chain_get_block\\\" RPC response.\", \"type\": \"object\", \"required\": [ \"api_version\" ], \"properties\": { \"api_version\": { \"description\": \"The RPC API version.\", \"type\": \"string\" }, \"block\": { \"description\": \"The block, if found.\", \"anyOf\": [ { \"$ref\": \"#/components/schemas/JsonBlock\" }, { \"type\": \"null\" } ] } }, \"additionalProperties\": false } } }\n```\n\n----------------------------------------\n\nTITLE: Effects and Transforms Schema Definition\nDESCRIPTION: Schema definition for effects and transformations that occur during deploy execution. Includes transform types and their properties with detailed descriptions of each transformation kind.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/condor/jsonrpc-comp/rpc-2.0/schema/components.json.md#2025-04-22_snippet_43\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"Effects\": {\n        \"description\": \"A log of all transforms produced during execution.\",\n        \"type\": \"array\",\n        \"items\": {\n            \"$ref\": \"#/components/schemas/TransformV2\"\n        }\n    },\n    \"TransformV2\": {\n        \"description\": \"A transformation performed while executing a deploy.\",\n        \"type\": \"object\",\n        \"required\": [\n            \"key\",\n            \"kind\"\n        ],\n        \"properties\": {\n            \"key\": {\n                \"$ref\": \"#/components/schemas/Key\"\n            },\n            \"kind\": {\n                \"$ref\": \"#/components/schemas/TransformKindV2\"\n            }\n        },\n        \"additionalProperties\": false\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Administrator Accounts\nDESCRIPTION: TOML configuration for adding administrator accounts to the private network, which are required for network operation and token distribution.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/versioned_docs/version-2.0.0/operators/setup-network/create-private.md#2025-04-22_snippet_5\n\nLANGUAGE: toml\nCODE:\n```\n[core]\nadministrators = [\"NEW_ACCOUNT_PUBLIC_KEY\"]\n```\n\n----------------------------------------\n\nTITLE: Setting up SSH Directory Structure\nDESCRIPTION: Creates and configures the SSH directory and authorized_keys file with proper permissions\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/versioned_docs/version-2.0.0/operators/setup/non-root-user.md#2025-04-22_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nsudo su - <username>\nmkdir .ssh\nchmod 700 .ssh\ntouch .ssh/authorized_keys\n```\n\n----------------------------------------\n\nTITLE: Defining Contract Named Argument Structure in JSON Schema\nDESCRIPTION: This JSON schema defines the structure for a named argument used in a Casper Network contract. It mandates an array containing exactly two elements: the first element must be a string representing the argument's name, and the second element must conform to the `CLValue` schema definition (referenced via `$ref`), representing the argument's value. The `maxItems` and `minItems` constraints enforce that the array always has exactly two items.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/condor/jsonrpc-comp/rpc-1.5/schema/NamedArg.json.md#2025-04-22_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"description\": \"Named arguments to a contract.\",\n    \"type\": \"array\",\n    \"items\": [\n        {\n            \"type\": \"string\"\n        },\n        {\n            \"$ref\": \"#/components/schemas/CLValue\"\n        }\n    ],\n    \"maxItems\": 2,\n    \"minItems\": 2\n} \n```\n\n----------------------------------------\n\nTITLE: Building Application for Production with Vite\nDESCRIPTION: These bash commands compile the application to pure JavaScript for production using 'vite'. After building, you can preview the production version with 'vite preview'.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/versioned_docs/version-1.5.X/developers/dapps/template-frontend.md#2025-04-22_snippet_13\n\nLANGUAGE: bash\nCODE:\n```\nvite build\n```\n\nLANGUAGE: bash\nCODE:\n```\nvite preview\n```\n\n----------------------------------------\n\nTITLE: Building the Delegate Contract using Make\nDESCRIPTION: Shows the `make` commands required to set up the Rust environment (`make setup-rs`) and build the delegate smart contract (`make build-contract-rs/delegate`) within the cloned `casper-node` repository. The resulting `delegate.wasm` file is needed for staking.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/docs/developers/dapps/sdk/client-library-usage.md#2025-04-22_snippet_10\n\nLANGUAGE: bash\nCODE:\n```\nmake setup-rs\nmake build-contract-rs/delegate\n```\n\n----------------------------------------\n\nTITLE: Fetching Active Protocol Versions using Curl\nDESCRIPTION: Demonstrates using the `curl` command to silently (`-s`) fetch the content of the `protocol_versions` file from the specified hosting server URL for the 'casper' network (Mainnet). This file lists the currently active protocol versions, which scripts use to identify relevant directories. The example output `1_5_8` indicates the latest version at the time of writing.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/versioned_docs/version-1.5.X/operators/setup-network/staging-files-for-new-network.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n$ curl -s genesis.casper.network/casper/protocol_versions\n1_5_8\n\n```\n\n----------------------------------------\n\nTITLE: Configuring Fee Handling (Pay to Proposer) in chainspec.toml (TOML)\nDESCRIPTION: This configuration within the `[core]` section of `chainspec.toml` specifies how fees are distributed after potential refunds are handled. Setting the `type` to `\"pay_to_proposer\"` directs any remaining payment amount (after gas cost and refund) to the proposer of the block containing the transaction.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/docs/operators/setup-network/create-private.md#2025-04-22_snippet_5\n\nLANGUAGE: toml\nCODE:\n```\n[core]\nfee_handling = { type = \"pay_to_proposer\" }\n```\n\n----------------------------------------\n\nTITLE: Examining Casper Network Storage Structures for CEP-18 Contract Deployment\nDESCRIPTION: This JSON structure shows the storage effects of deploying a CEP-18 token contract on Casper Network. It includes named keys, URefs, dictionary entries, and their relationships, demonstrating how contract state is maintained on the blockchain.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/docs/developers/cli/sending-transactions.md#2025-04-22_snippet_21\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"kind\": {\n    \"Write\": {\n      \"NamedKey\": {\n        \"named_key\": {\n          \"cl_type\": \"Key\",\n          \"bytes\": \"021075abe4693e237a359a586a9b444a4eb1bef3632bea353ded5ceb260047de0a07\",\n          \"parsed\": \"uref-1075abe4693e237a359a586a9b444a4eb1bef3632bea353ded5ceb260047de0a-007\"\n        },\n        \"name\": {\n          \"cl_type\": \"String\",\n          \"bytes\": \"1c00000063657031385f636f6e74726163745f76657273696f6e5f4345503138\",\n          \"parsed\": \"cep18_contract_version_CEP18\"\n        }\n      }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Querying Upgrade Status with cURL and JQ - Bash\nDESCRIPTION: Shows how to query a Casper node's REST status endpoint and parse the next_upgrade property using curl and jq. This command retrieves the next scheduled protocol upgrade as JSON. Dependencies include curl and jq installed on the system. The expected input is the status API endpoint, and the output is the parsed information about upcoming upgrades.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/docs/operators/setup/upgrade.md#2025-04-22_snippet_4\n\nLANGUAGE: Bash\nCODE:\n```\ncurl -s http://127.0.0.1:8888/status | jq .next_upgrade\n```\n\n----------------------------------------\n\nTITLE: Describing BTreeMap Serialization (Casper Network)\nDESCRIPTION: Describes the serialization format for a BTreeMap on the Casper network. It starts with a u32 representing the number of key-value pairs, followed by the serialized keys and values repeated according to the count.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/versioned_docs/version-2.0.0/concepts/serialization/types.md#2025-04-22_snippet_5\n\nLANGUAGE: Text\nCODE:\n```\n## BTreeMap {#btreemap}\n\nA `BTreeMap` is a method of mapping keys to values within a Casper network. They serialize with the first 4 bytes representing a `u32` value describing the number of keys and values held within. The remainder consists of a repeating pattern of serialized keys and then values of the length dictated by the first four bytes.\n```\n\n----------------------------------------\n\nTITLE: Converting Ethereum Private Key to PEM Format\nDESCRIPTION: JavaScript script that converts a raw Ethereum private key to PEM format using the key-encoder package. The PEM format is required by the Casper command-line client.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/versioned_docs/version-1.5.X/concepts/accounts-and-keys.md#2025-04-22_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\nvar KeyEncoder = require(\"key-encoder\"),\n  keyEncoder = new KeyEncoder.default(\"secp256k1\");\nlet priv_hex = \"THE SECRET KEY TO ENCODE\";\nlet priv_pem = keyEncoder.encodePrivate(priv_hex, \"raw\", \"pem\");\nconsole.log(priv_pem);\n```\n\n----------------------------------------\n\nTITLE: REST Server Configuration\nDESCRIPTION: Configuration setting for the REST HTTP server port in config.toml. This port (8888) is used for network health metrics and node status queries.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/versioned_docs/version-2.0.0/operators/setup/node-endpoints.md#2025-04-22_snippet_2\n\nLANGUAGE: markdown\nCODE:\n```\naddress = '0.0.0.0:8888'\n```\n\n----------------------------------------\n\nTITLE: Updating Dictionary Records\nDESCRIPTION: Complete example of updating dictionary records, including error handling and value updates.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/versioned_docs/version-2.0.0/concepts/dictionaries.md#2025-04-22_snippet_3\n\nLANGUAGE: rust\nCODE:\n```\nfn update_ledger_record(dictionary_item_key: String) {\n    let ledger_seed_uref = *runtime::get_key(\"ledger\")\n        .unwrap_or_revert_with(FundRaisingError::MissingLedgerSeedURef)\n        .as_uref()\n        .unwrap_or_revert();\n\n    match storage::dictionary_get::<u64>(ledger_seed_uref, &dictionary_item_key).unwrap_or_revert()\n    {\n        None => storage::dictionary_put(ledger_seed_uref, &dictionary_item_key, 1u64),\n        Some(current_number_of_donations) => storage::dictionary_put(\n            ledger_seed_uref,\n            &dictionary_item_key,\n            current_number_of_donations + 1u64,\n        ),\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Documentation Index Table in Markdown\nDESCRIPTION: A markdown table listing key documentation topics and their descriptions for the Casper Network design documentation.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/versioned_docs/version-2.0.0/concepts/design/index.md#2025-04-22_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n| Topic                                                       | Description                                                                                    |\n| ----------------------------------------------------------- | ---------------------------------------------------------------------------------------------- |\n| [Network Design](./casper-design.md)                        | Overview of execution semantics, account permissions, URefs, block structure, tokens, and more |\n| [Network Communication](./p2p.md)                           | Peer-to-peer communication for Casper nodes                                                    |\n| [Consensus in Casper](./consensus.md)                       | Introduction to Consensus in a Casper network                                                  |\n| [Zug Consensus](./zug.md)                                   | An overview of the Zug consensus used in Mainnet and Testnet                                   |\n| [Highway Consensus](./highway.md)                           | Brief overview of the Highway consensus available as an alternative to Zug                     |\n| [Validator Rewards](./rewards.md)                           | Overview of how rewards are calculated and distributed                                         |\n| [Reading and Writing Data to Global State](./reading-and-writing-to-the-blockchain.md) | Storing and reading data from the blockchain                        |\n```\n\n----------------------------------------\n\nTITLE: Describing Hex-Encoded Cryptographic Signature JSON\nDESCRIPTION: This JSON snippet describes a hex-encoded cryptographic signature, including the cryptographic algorithm tag prefixed to it. The purpose of this description is to provide structured metadata for cryptographic signature representation in JSON format. It consists of two fields: 'description' explaining the content and 'type' specifying the data type. There are no additional dependencies or constraints beyond JSON compatibility.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/condor/jsonrpc-comp/rpc-1.5/schema/Signature.json.md#2025-04-22_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"description\": \"Hex-encoded cryptographic signature, including the algorithm tag prefix.\",\n    \"type\": \"string\"\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Deploy Signature Schema in JSON\nDESCRIPTION: This JSON schema defines a struct containing a signature of a deploy hash and the public key of the signer. It requires two properties: 'signature' and 'signer', both referencing other schema components.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/condor/jsonrpc-comp/rpc-1.5/schema/Approval.json.md#2025-04-22_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"description\": \"A struct containing a signature of a deploy hash and the public key of the signer.\",\n    \"type\": \"object\",\n    \"required\": [\n        \"signature\",\n        \"signer\"\n    ],\n    \"properties\": {\n        \"signer\": {\n            \"$ref\": \"#/components/schemas/PublicKey\"\n        },\n        \"signature\": {\n            \"$ref\": \"#/components/schemas/Signature\"\n        }\n    },\n    \"additionalProperties\": false\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Validator Data Structure in JSON Schema\nDESCRIPTION: This snippet provides a JSON schema for a validator's public key and its corresponding signature. It requires two properties: 'public_key' and 'signature', both of which reference components defined elsewhere in the schemas as 'PublicKey' and 'Signature', respectively. The purpose is to define a standardized format for validator data, ensuring validation against these components.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/condor/jsonrpc-comp/rpc-2.0/schema/BlockProof.json.md#2025-04-22_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"description\": \"A validator's public key paired with a corresponding signature of a given block hash.\",\n    \"type\": \"object\",\n    \"required\": [\n        \"public_key\",\n        \"signature\"\n    ],\n    \"properties\": {\n        \"public_key\": {\n            \"description\": \"The validator's public key.\",\n            \"allOf\": [\n                {\n                    \"$ref\": \"#/components/schemas/PublicKey\"\n                }\n            ]\n        },\n        \"signature\": {\n            \"description\": \"The validator's signature.\",\n            \"allOf\": [\n                {\n                    \"$ref\": \"#/components/schemas/Signature\"\n                }\n            ]\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Integer and Key Types in JSON Schema\nDESCRIPTION: Schema definitions for U128, U256, NamedKey, and Key types used in the Casper Network. These provide representations for various integer sizes and key formats used in the blockchain's global state.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/condor/jsonrpc-comp/rpc-2.0/schema.json.md#2025-04-22_snippet_59\n\nLANGUAGE: json\nCODE:\n```\n\"U128\": {\n  \"description\": \"Decimal representation of a 128-bit integer.\",\n  \"type\": \"string\"\n},\n\"U256\": {\n  \"description\": \"Decimal representation of a 256-bit integer.\",\n  \"type\": \"string\"\n},\n\"NamedKey\": {\n  \"description\": \"A key with a name.\",\n  \"type\": \"object\",\n  \"required\": [\n    \"key\",\n    \"name\"\n  ],\n  \"properties\": {\n    \"name\": {\n      \"description\": \"The name of the entry.\",\n      \"type\": \"string\"\n    },\n    \"key\": {\n      \"description\": \"The value of the entry: a casper `Key` type.\",\n      \"allOf\": [\n        {\n          \"$ref\": \"#/components/schemas/Key\"\n        }\n      ]\n    }\n  },\n  \"additionalProperties\": false\n},\n\"Key\": {\n  \"description\": \"The key as a formatted string, under which data (e.g. `CLValue`s, smart contracts, user accounts) are stored in global state.\",\n  \"type\": \"string\"\n}\n```\n\n----------------------------------------\n\nTITLE: Exporting Sidebar Structure - Docusaurus Configuration - JavaScript\nDESCRIPTION: This snippet provides an example of how to export a sidebar structure in a Docusaurus configuration file as a JavaScript module. The export defines a property 'workflow' with an array of documentation page paths, establishing section order and file inclusion in the sidebar. The expected input is an object where each key represents a sidebar group; Docusaurus parses this for left navigation rendering. At least one key (here, 'workflow') must be present, and file paths must correspond to actual documentation pages.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/README/DEVELOPERS.md#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nmodule.exports = {\n    workflow: [\n        \"workflow/index\",\n        \"workflow/staking\",\n\t\t...\n    ],\n    ...\n\n```\n\n----------------------------------------\n\nTITLE: Opening Sudo Configuration\nDESCRIPTION: Opens the sudoers file for editing to configure user privileges\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/versioned_docs/version-2.0.0/operators/setup/non-root-user.md#2025-04-22_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nsudo visudo\n```\n\n----------------------------------------\n\nTITLE: Increase Allowance Entry Point for Casper Token Contract\nDESCRIPTION: Entry point definition for increasing the amount of tokens that a spender is allowed to transfer from the caller's account. Takes spender key and amount parameters and requires caller payment.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/docs/developers/cli/sending-transactions.md#2025-04-22_snippet_12\n\nLANGUAGE: JSON\nCODE:\n```\n{\n  \"key\": \"entry-point-v1-entity-contract-363996106630892a964565574fcdfd2435f21a17a3ad1ed2054146e7d8461640-a7e05838c728d16c4ba3e1980b6729c857ef4c21d1b0c34e6eefbb486cdc2b89\",\n  \"kind\": {\n    \"Write\": {\n      \"EntryPoint\": {\n        \"V1CasperVm\": {\n          \"name\": \"increase_allowance\",\n          \"args\": [\n            {\n              \"name\": \"spender\",\n              \"cl_type\": \"Key\"\n            },\n            {\n              \"name\": \"amount\",\n              \"cl_type\": \"U256\"\n            }\n          ],\n          \"ret\": \"Unit\",\n          \"access\": \"Public\",\n          \"entry_point_type\": \"Called\",\n          \"entry_point_payment\": \"Caller\"\n        }\n      }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Starting the local development server\nDESCRIPTION: Yarn command to start the local development server. This will make the documentation website accessible at http://localhost:3000/.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/README/SETUP.md#2025-04-22_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nyarn run start\n```\n\n----------------------------------------\n\nTITLE: Defining Delegator Schema in JSON\nDESCRIPTION: Schema definition for a Delegator object representing a party delegating their stake to a validator. It includes details such as the delegator's public key, staked amount, bonding purse, and references to the validator.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/condor/jsonrpc-comp/rpc-2.0/schema.json.md#2025-04-22_snippet_57\n\nLANGUAGE: json\nCODE:\n```\n\"Delegator\": {\n  \"description\": \"Represents a party delegating their stake to a validator (or \\\"delegatee\\\")\",\n  \"type\": \"object\",\n  \"required\": [\n    \"bonding_purse\",\n    \"delegator_public_key\",\n    \"staked_amount\",\n    \"validator_public_key\"\n  ],\n  \"properties\": {\n    \"delegator_public_key\": {\n      \"$ref\": \"#/components/schemas/PublicKey\"\n    },\n    \"staked_amount\": {\n      \"$ref\": \"#/components/schemas/U512\"\n    },\n    \"bonding_purse\": {\n      \"$ref\": \"#/components/schemas/URef\"\n    },\n    \"validator_public_key\": {\n      \"$ref\": \"#/components/schemas/PublicKey\"\n    },\n    \"vesting_schedule\": {\n      \"anyOf\": [\n        {\n          \"$ref\": \"#/components/schemas/VestingSchedule\"\n        },\n        {\n          \"type\": \"null\"\n        }\n      ]\n    }\n  },\n  \"additionalProperties\": false\n}\n```\n\n----------------------------------------\n\nTITLE: Describing Effects Serialization (Casper Network)\nDESCRIPTION: Defines Effects as a log of transforms produced during execution. It serializes as a vector (list) of TransformV2 structures.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/versioned_docs/version-2.0.0/concepts/serialization/types.md#2025-04-22_snippet_18\n\nLANGUAGE: Text\nCODE:\n```\n## Effects {#effects}\n\nA log of all transforms produced during execution, serialized as a vector of [transforms](#transformV2).\n```\n\n----------------------------------------\n\nTITLE: Defining and Using the Query Balance Details RPC Method - JSON\nDESCRIPTION: This code snippet defines the \"query_balance_details\" RPC method, specifying parameters, expected result schema, and an example request and response all in JSON. Dependencies include Casper's schema definitions such as PurseIdentifier and GlobalStateIdentifier. The request parameters are \"purse_identifier\" and an optional \"state_identifier\"; the response contains the API version, balances, holds (with proofs), and a Merkle trie proof. Input should be valid JSON with correct schema references, and outputs conform strictly to structured data for programmatic usage.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/condor/jsonrpc-comp/rpc-2.0/query_balance_details.json.md#2025-04-22_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"name\": \"query_balance_details\",\n  \"summary\": \"query for full balance information using a purse identifier and a state identifier\",\n  \"params\": [\n    {\n      \"name\": \"purse_identifier\",\n      \"schema\": {\n        \"description\": \"The identifier to obtain the purse corresponding to balance query.\",\n        \"$ref\": \"#/components/schemas/PurseIdentifier\"\n      },\n      \"required\": true\n    },\n    {\n      \"name\": \"state_identifier\",\n      \"schema\": {\n        \"description\": \"The identifier for the state used for the query, if none is passed, the latest block will be used.\",\n        \"anyOf\": [\n          {\n            \"$ref\": \"#/components/schemas/GlobalStateIdentifier\"\n          },\n          {\n            \"type\": \"null\"\n          }\n        ]\n      },\n      \"required\": false\n    }\n  ],\n  \"result\": {\n    \"name\": \"query_balance_details_result\",\n    \"schema\": {\n      \"description\": \"Result for \\\"query_balance_details\\\" RPC response.\",\n      \"type\": \"object\",\n      \"required\": [\n        \"api_version\",\n        \"available_balance\",\n        \"holds\",\n        \"total_balance\",\n        \"total_balance_proof\"\n      ],\n      \"properties\": {\n        \"api_version\": {\n          \"description\": \"The RPC API version.\",\n          \"type\": \"string\"\n        },\n        \"total_balance\": {\n          \"description\": \"The purses total balance, not considering holds.\",\n          \"$ref\": \"#/components/schemas/U512\"\n        },\n        \"available_balance\": {\n          \"description\": \"The available balance in motes (total balance - sum of all active holds).\",\n          \"$ref\": \"#/components/schemas/U512\"\n        },\n        \"total_balance_proof\": {\n          \"description\": \"A proof that the given value is present in the Merkle trie.\",\n          \"type\": \"string\"\n        },\n        \"holds\": {\n          \"description\": \"Holds active at the requested point in time.\",\n          \"type\": \"array\",\n          \"items\": {\n            \"$ref\": \"#/components/schemas/BalanceHoldWithProof\"\n          }\n        }\n      }\n    }\n  },\n  \"examples\": [\n    {\n      \"name\": \"query_balance_details_example\",\n      \"params\": [\n        {\n          \"name\": \"state_identifier\",\n          \"value\": {\n            \"BlockHash\": \"0707070707070707070707070707070707070707070707070707070707070707\"\n          }\n        },\n        {\n          \"name\": \"purse_identifier\",\n          \"value\": {\n            \"main_purse_under_account_hash\": \"account-hash-0909090909090909090909090909090909090909090909090909090909090909\"\n          }\n        }\n      ],\n      \"result\": {\n        \"name\": \"query_balance_details_example_result\",\n        \"value\": {\n          \"api_version\": \"2.0.0\",\n          \"total_balance\": \"123456\",\n          \"available_balance\": \"123456\",\n          \"total_balance_proof\": \"01000000006ef2e0949ac76e55812421f755abe129b6244fe7168b77f47a72536147614625016ef2e0949ac76e55812421f755abe129b6244fe7168b77f47a72536147614625000000003529cde5c621f857f75f3810611eb4af3f998caaa9d4a3413cf799f99c67db0307010000006ef2e0949ac76e55812421f755abe129b6244fe7168b77f47a7253614761462501010102000000006e06000000000074769d28aac597a36a03a932d4b43e4f10bf0403ee5c41dd035102553f5773631200b9e173e8f05361b681513c14e25e3138639eb03232581db7557c9e8dbbc83ce94500226a9a7fe4f2b7b88d5103a4fc7400f02bf89c860c9ccdd56951a2afe9be0e0267006d820fb5676eb2960e15722f7725f3f8f41030078f8b2e44bf0dc03f71b176d6e800dc5ae9805068c5be6da1a90b2528ee85db0609cc0fb4bd60bbd559f497a98b67f500e1e3e846592f4918234647fca39830b7e1e6ad6f5b7a99b39af823d82ba1873d000003000000010186ff500f287e9b53f823ae1582b1fa429dfede28015125fd233a31ca04d5012002015cc42669a55467a1fdf49750772bfc1aed59b9b085558eb81510e9b015a7c83b0301e3cf4a34b1db6bfa58808b686cb8fe21ebe0c1bcbcee522649d2b135fe510fe3\",\n          \"holds\": [\n            {\n              \"time\": 0,\n              \"amount\": \"123456\",\n              \"proof\": \"01000000006ef2e0949ac76e55812421f755abe129b6244fe7168b77f47a72536147614625016ef2e0949ac76e55812421f755abe129b6244fe7168b77f47a72536147614625000000003529cde5c621f857f75f3810611eb4af3f998caaa9d4a3413cf799f99c67db0307010000006ef2e0949ac76e55812421f755abe129b6244fe7168b77f47a7253614761462501010102000000006e06000000000074769d28aac597a36a03a932d4b43e4f10bf0403ee5c41dd035102553f5773631200b9e173e8f05361b681513c14e25e3138639eb03232581db7557c9e8dbbc83ce94500226a9a7fe4f2b7b88d5103a4fc7400f02bf89c860c9ccdd56951a2afe9be0e0267006d820fb5676eb2960e15722f7725f3f8f41030078f8b2e44bf0dc03f71b176d6e800dc5ae9805068c5be6da1a90b2528ee85db0609cc0fb4bd60bbd559f497a98b67f500e1e3e846592f4918234647fca39830b7e1e6ad6f5b7a99b39af823d82ba1873d000003000000010186ff500f287e9b53f823ae1582b1fa429dfede28015125fd233a31ca04d5012002015cc42669a55467a1fdf49750772bfc1aed59b9b085558eb81510e9b015a7c83b0301e3cf4a34b1db6bfa58808b686cb8fe21ebe0c1bcbcee522649d2b135fe510fe3\"\n            }\n          ]\n        }\n      }\n    }\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Solana Entry Point Implementation\nDESCRIPTION: Demonstrates how to declare and implement entry points in Solana smart contracts.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/versioned_docs/version-2.0.0/resources/moving-to-casper.md#2025-04-22_snippet_6\n\nLANGUAGE: rust\nCODE:\n```\nentrypoint!(process_instruction);\n```\n\nLANGUAGE: rust\nCODE:\n```\npub fn process_instruction(\n    program_id: &Pubkey,\n    accounts: &[AccountInfo],\n    _instruction_data: &[u8],\n) -> ProgramResult {}\n```\n\n----------------------------------------\n\nTITLE: Defining Transaction Entry Points in JSON\nDESCRIPTION: The JSON code snippet defines various transaction entry points within the Casper network using a structured schema. The schema includes diverse operations such as 'Call', 'Transfer', and other actions related to bids and delegation. These entry points are identified as either strings or objects with specific required properties. Each entry point has a description explaining its function. The schema is crucial for ensuring only valid transactions are initialized through specified entry points.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/condor/jsonrpc-comp/rpc-2.0/schema/TransactionEntryPoint.json.md#2025-04-22_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\"description\": \"Entry point of a Transaction.\", \"oneOf\": [{\"description\": \"The standard `call` entry point used in session code.\", \"type\": \"string\", \"enum\": [\"Call\"]}, {\"description\": \"A non-native, arbitrary entry point.\", \"type\": \"object\", \"required\": [\"Custom\"], \"properties\": {\"Custom\": {\"type\": \"string\"}}, \"additionalProperties\": false}, {\"description\": \"The `transfer` native entry point, used to transfer `Motes` from a source purse to a target purse.\", \"type\": \"string\", \"enum\": [\"Transfer\"]}, {\"description\": \"The `add_bid` native entry point, used to create or top off a bid purse.\", \"type\": \"string\", \"enum\": [\"AddBid\"]}, {\"description\": \"The `withdraw_bid` native entry point, used to decrease a stake.\", \"type\": \"string\", \"enum\": [\"WithdrawBid\"]}, {\"description\": \"The `delegate` native entry point, used to add a new delegator or increase an existing delegator's stake.\", \"type\": \"string\", \"enum\": [\"Delegate\"]}, {\"description\": \"The `undelegate` native entry point, used to reduce a delegator's stake or remove the delegator if the remaining stake is 0.\", \"type\": \"string\", \"enum\": [\"Undelegate\"]}, {\"description\": \"The `redelegate` native entry point, used to reduce a delegator's stake or remove the delegator if the remaining stake is 0, and after the unbonding delay, automatically delegate to a new validator.\", \"type\": \"string\", \"enum\": [\"Redelegate\"]}, {\"description\": \"The `activate_bid` native entry point, used to used to reactivate an inactive bid.\", \"type\": \"string\", \"enum\": [\"ActivateBid\"]}, {\"description\": \"The `change_bid_public_key` native entry point, used to change a bid's public key.\", \"type\": \"string\", \"enum\": [\"ChangeBidPublicKey\"]}]}\n```\n\n----------------------------------------\n\nTITLE: Compressing Casper DB with Recommended Zstandard Settings\nDESCRIPTION: Compresses the Casper node database using `tar` and `zstd`. Uses `tar` with a 4096 block size and sparse handling, piped to `zstd` with compression level 15 (`-15`), automatic thread detection (`-T0`), verbose output (`-cv`), and long-distance matching (`--long=31`). Output is redirected to a file. Requires `tar` and `zstd`.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/docs/operators/maintenance/archiving-and-restoring.md#2025-04-22_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\ntar -b 4096 -cv --sparse . | zstd -15 -cv -T0 --long=31 > [path_to]/file.tar.zst\n```\n\n----------------------------------------\n\nTITLE: Defining JsonValidatorChanges Schema in OpenAPI\nDESCRIPTION: Defines the schema for tracking changes in a validator's status, containing the validator's public key and an array of status changes.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/condor/jsonrpc-comp/rpc-2.0/schema.json.md#2025-04-22_snippet_98\n\nLANGUAGE: json\nCODE:\n```\n\"JsonValidatorChanges\": {\n  \"description\": \"The changes in a validator's status.\",\n  \"type\": \"object\",\n  \"required\": [\n    \"public_key\",\n    \"status_changes\"\n  ],\n  \"properties\": {\n    \"public_key\": {\n      \"description\": \"The public key of the validator.\",\n      \"allOf\": [\n        {\n          \"$ref\": \"#/components/schemas/PublicKey\"\n        }\n      ]\n    },\n    \"status_changes\": {\n      \"description\": \"The set of changes to the validator's status.\",\n      \"type\": \"array\",\n      \"items\": {\n        \"$ref\": \"#/components/schemas/JsonValidatorStatusChange\"\n      }\n    }\n  },\n  \"additionalProperties\": false\n}\n```\n\n----------------------------------------\n\nTITLE: Project Setup Commands\nDESCRIPTION: Series of commands for installing dependencies and starting the development server\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/versioned_docs/version-1.5.X/developers/dapps/template-frontend.md#2025-04-22_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\ncd vite-project/\n```\n\nLANGUAGE: bash\nCODE:\n```\nnpm install\nvite dev\n```\n\nLANGUAGE: bash\nCODE:\n```\nnpm install casper-js-sdk\n```\n\nLANGUAGE: bash\nCODE:\n```\nnpm install axios\n```\n\nLANGUAGE: bash\nCODE:\n```\ntouch src/casper-wallet.js\n```\n\n----------------------------------------\n\nTITLE: Contract Entry Point Definition\nDESCRIPTION: Definition of contract entry points for allowance and approve functions with their parameter specifications.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/versioned_docs/version-2.0.0/developers/cli/sending-transactions.md#2025-04-22_snippet_6\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"V1CasperVm\": {\n    \"name\": \"allowance\",\n    \"args\": [\n      {\n        \"name\": \"owner\",\n        \"cl_type\": \"Key\"\n      },\n      {\n        \"name\": \"spender\",\n        \"cl_type\": \"Key\"\n      }\n    ],\n    \"ret\": \"U256\",\n    \"access\": \"Public\",\n    \"entry_point_type\": \"Called\",\n    \"entry_point_payment\": \"Caller\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Peers Schema in OpenAPI\nDESCRIPTION: Defines the schema for a collection of peer entries in the Casper Network, represented as an array of PeerEntry references.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/condor/jsonrpc-comp/rpc-2.0/schema.json.md#2025-04-22_snippet_89\n\nLANGUAGE: json\nCODE:\n```\n\"Peers\": {\n  \"description\": \"Map of peer IDs to network addresses.\",\n  \"type\": \"array\",\n  \"items\": {\n    \"$ref\": \"#/components/schemas/PeerEntry\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Contract Version Information - JSON Schema - JSON\nDESCRIPTION: Specifies the schema for a contract version object containing contract hash, contract version, and protocol version major as unsigned 32-bit integers. This definition is essential for version control, backward compatibility, and contract lifecycle management within the Casper Network.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/condor/jsonrpc-comp/rpc-1.5/schema/components.json.md#2025-04-22_snippet_46\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"type\": \"object\",\n    \"required\": [\n        \"contract_hash\",\n        \"contract_version\",\n        \"protocol_version_major\"\n    ],\n    \"properties\": {\n        \"protocol_version_major\": {\n            \"type\": \"integer\",\n            \"format\": \"uint32\",\n            \"minimum\": 0.0\n        },\n        \"contract_version\": {\n            \"type\": \"integer\",\n            \"format\": \"uint32\",\n            \"minimum\": 0.0\n        },\n        \"contract_hash\": {\n\n```\n\n----------------------------------------\n\nTITLE: Defining JSON Schema for TOML File Byte Data\nDESCRIPTION: This JSON schema defines the structure for hex-encoded raw bytes of critical configuration files used in the Casper network. It requires 'chainspec_bytes', 'maybe_genesis_accounts_bytes', and 'maybe_global_state_bytes' as mandatory properties, with each property representing the encoded content of their respective TOML files. The schema is used for validation purposes to ensure that the configuration data is correctly formatted and complete.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/condor/jsonrpc-comp/rpc-1.5/schema/ChainspecRawBytes.json.md#2025-04-22_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"description\": \"The raw bytes of the chainspec.toml, genesis accounts.toml, and global_state.toml files.\",\n    \"type\": \"object\",\n    \"required\": [\n        \"chainspec_bytes\",\n        \"maybe_genesis_accounts_bytes\",\n        \"maybe_global_state_bytes\"\n    ],\n    \"properties\": {\n        \"chainspec_bytes\": {\n            \"description\": \"Hex-encoded raw bytes of the current chainspec.toml file.\",\n            \"type\": \"string\"\n        },\n        \"maybe_genesis_accounts_bytes\": {\n            \"description\": \"Hex-encoded raw bytes of the current genesis accounts.toml file.\",\n            \"type\": \"string\"\n        },\n        \"maybe_global_state_bytes\": {\n            \"description\": \"Hex-encoded raw bytes of the current global_state.toml file.\",\n            \"type\": \"string\"\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Environment Setup Output Example\nDESCRIPTION: Expected output when the Wasm target is successfully added to the development environment.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/versioned_docs/version-1.5.X/resources/tokens/cep78/using-casper-client/full-installation-tutorial.md#2025-04-22_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nrustup target add wasm32-unknown-unknown\ninfo: component 'rust-std' for target 'wasm32-unknown-unknown' is up to date\n```\n\n----------------------------------------\n\nTITLE: Serializing SemVer Structure\nDESCRIPTION: Defines `SemVer`, a struct for semantic versioning. It serializes as three consecutive `u32` values representing the major, minor, and patch versions.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/versioned_docs/version-2.0.0/concepts/serialization/types.md#2025-04-22_snippet_45\n\nLANGUAGE: text\nCODE:\n```\nA `struct` for semantic versioning, it serializes as three [`u32`](./primitives.md#clvalue-numeric) that describe the major version, minor version and patch version.\n```\n\n----------------------------------------\n\nTITLE: Installing Casper JS SDK via npm\nDESCRIPTION: This command installs the Casper JS SDK library for Node.js applications. Required prior to using the SDK for interaction with the Casper network.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/versioned_docs/version-2.0.0/developers/dapps/sdk/script-sdk.md#2025-04-22_snippet_0\n\nLANGUAGE: Bash\nCODE:\n```\nnpm install casper-js-sdk@next --save\n```\n\n----------------------------------------\n\nTITLE: Chain Get State Root Hash Response Example\nDESCRIPTION: Example JSON response from the chain_get_state_root_hash endpoint showing the API version and hex-encoded state root hash.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/versioned_docs/version-2.0.0/developers/json-rpc/json-rpc-informational.md#2025-04-22_snippet_5\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"id\": 1,\n  \"jsonrpc\": \"2.0\",\n  \"result\": {\n    \"name\": \"chain_get_state_root_hash_result\",\n    \"value\": {\n      \"api_version\": \"2.0.0\",\n      \"state_root_hash\": \"0808080808080808080808080808080808080808080808080808080808080808\"\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Protocol Activation Point in chainspec.toml (TOML)\nDESCRIPTION: This configuration snippet from `chainspec.toml` specifies the era (`activation_point`) at which a particular protocol version becomes active. The `casper-node` checks this setting during block finalization to determine when to switch to a newer version or shut down before an upgrade.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/versioned_docs/version-1.5.X/operators/setup/upgrade.md#2025-04-22_snippet_0\n\nLANGUAGE: toml\nCODE:\n```\n[protocol]\n# This protocol version becomes active at the start of this era.\nactivation_point = 100\n```\n\n----------------------------------------\n\nTITLE: Setting Temporary NoFile Limit for Casper Node\nDESCRIPTION: Set the 'nofile' limit to 64000 for an active casper-node process without restarting it. This change is temporary and only stays in effect until the process is running. Command requires sudo access.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/docs/operators/setup/open-files.md#2025-04-22_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nsudo prlimit --nofile=64000 --pid=$(pgrep \"casper-node$\")`\n```\n\n----------------------------------------\n\nTITLE: Running Tests for Casper Python SDK\nDESCRIPTION: Command to run tests for the Python SDK using pytest. Tests are located in the 'test' directory.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/versioned_docs/version-2.0.0/developers/dapps/sdk/python-sdk.md#2025-04-22_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n    pytest ./tests\n```\n\n----------------------------------------\n\nTITLE: Partial JSON Structure Containing Proof Data\nDESCRIPTION: This snippet shows the tail end of a JSON object, likely part of a Casper Network RPC response or schema definition. It includes a 'proof' field containing a long hexadecimal string, representing cryptographic proof data, and the closing braces/brackets of the nested structure.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/condor/jsonrpc-comp/rpc-2.0/schema.json.md#2025-04-22_snippet_13\n\nLANGUAGE: json\nCODE:\n```\n                  \"proof\": \"01000000006ef2e0949ac76e55812421f755abe129b6244fe7168b77f47a72536147614625016ef2e0949ac76e55812421f755abe129b6244fe7168b77f47a72536147614625000000003529cde5c621f857f75f3810611eb4af3f998caaa9d4a3413cf799f99c67db0307010000006ef2e0949ac76e55812421f755abe129b6244fe7168b77f47a7253614761462501010102000000006e06000000000074769d28aac597a36a03a932d4b43e4f10bf0403ee5c41dd035102553f5773631200b9e173e8f05361b681513c14e25e3138639eb03232581db7557c9e8dbbc83ce94500226a9a7fe4f2b7b88d5103a4fc7400f02bf89c860c9ccdd56951a2afe9be0e0267006d820fb5676eb2960e15722f7725f3f8f41030078f8b2e44bf0dc03f71b176d6e800dc5ae9805068c5be6da1a90b2528ee85db0609cc0fb4bd60bbd559f497a98b67f500e1e3e846592f4918234647fca39830b7e1e6ad6f5b7a99b39af823d82ba1873d000003000000010186ff500f287e9b53f823ae1582b1fa429dfede28015125fd233a31ca04d5012002015cc42669a55467a1fdf49750772bfc1aed59b9b085558eb81510e9b015a7c83b0301e3cf4a34b1db6bfa58808b686cb8fe21ebe0c1bcbcee522649d2b135fe510fe3\"\n                }\n              ]\n            }\n          }\n        }\n      ]\n    }\n```\n\n----------------------------------------\n\nTITLE: Defining BidKind Schema in JSON\nDESCRIPTION: Schema definition for the BidKind enum representing various auction bid variants in the Casper Network. This includes unified records, validator bids, delegator bids, bridge records, and credit entries.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/condor/jsonrpc-comp/rpc-2.0/schema.json.md#2025-04-22_snippet_61\n\nLANGUAGE: json\nCODE:\n```\n\"BidKind\": {\n  \"description\": \"Auction bid variants.\",\n  \"oneOf\": [\n    {\n      \"description\": \"A unified record indexed on validator data, with an embedded collection of all delegator bids assigned to that validator. The Unified variant is for legacy retrograde support, new instances will not be created going forward.\",\n      \"type\": \"object\",\n      \"required\": [\n        \"Unified\"\n      ],\n      \"properties\": {\n        \"Unified\": {\n          \"$ref\": \"#/components/schemas/Bid\"\n        }\n      },\n      \"additionalProperties\": false\n    },\n    {\n      \"description\": \"A bid record containing only validator data.\",\n      \"type\": \"object\",\n      \"required\": [\n        \"Validator\"\n      ],\n      \"properties\": {\n        \"Validator\": {\n          \"$ref\": \"#/components/schemas/ValidatorBid\"\n        }\n      },\n      \"additionalProperties\": false\n    },\n    {\n      \"description\": \"A bid record containing only delegator data.\",\n      \"type\": \"object\",\n      \"required\": [\n        \"Delegator\"\n      ],\n      \"properties\": {\n        \"Delegator\": {\n          \"$ref\": \"#/components/schemas/Delegator\"\n        }\n      },\n      \"additionalProperties\": false\n    },\n    {\n      \"description\": \"A bridge record pointing to a new `ValidatorBid` after the public key was changed.\",\n      \"type\": \"object\",\n      \"required\": [\n        \"Bridge\"\n      ],\n      \"properties\": {\n        \"Bridge\": {\n          \"$ref\": \"#/components/schemas/Bridge\"\n        }\n      },\n      \"additionalProperties\": false\n    },\n    {\n      \"description\": \"Credited amount.\",\n      \"type\": \"object\",\n      \"required\": [\n        \"Credit\"\n      ],\n      \"properties\": {\n        \"Credit\": {\n          \"$ref\": \"#/components/schemas/ValidatorCredit\"\n        }\n      },\n      \"additionalProperties\": false\n    }\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Contract WASM Hash Schema Element in JSON\nDESCRIPTION: This JSON object defines a schema element representing the hash address of a contract's WASM. It specifies that the value must be of type 'string' and includes a 'description' field explaining its purpose. This is likely used for validating configuration or data structures related to Casper contracts.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/condor/jsonrpc-comp/rpc-1.5/schema/ContractWasmHash.json.md#2025-04-22_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"description\": \"The hash address of the contract wasm\",\n    \"type\": \"string\"\n} \n```\n\n----------------------------------------\n\nTITLE: Defining EraReward Schema in JSON\nDESCRIPTION: JSON schema for EraReward which pairs a validator's public key with their reward amount for contributions to consensus.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/condor/jsonrpc-comp/rpc-2.0/schema/components.json.md#2025-04-22_snippet_69\n\nLANGUAGE: json\nCODE:\n```\n\"EraReward\": {\n    \"description\": \"A validator's public key paired with a measure of the value of its contribution to consensus, as a fraction of the configured maximum block reward.\",\n    \"type\": \"object\",\n    \"required\": [\n        \"amount\",\n        \"validator\"\n    ],\n    \"properties\": {\n        \"validator\": {\n            \"description\": \"The validator's public key.\",\n            \"allOf\": [\n                {\n                    \"$ref\": \"#/components/schemas/PublicKey\"\n                }\n            ]\n        },\n        \"amount\": {\n            \"description\": \"The reward amount.\",\n            \"type\": \"integer\",\n            \"format\": \"uint64\",\n            \"minimum\": 0.0\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Displaying URef without Access Rights in Bash\nDESCRIPTION: Example of a URef representation without any associated access rights, showing the URef address followed by '-000' suffix indicating no access rights.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/versioned_docs/version-2.0.0/developers/dapps/uref-security.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nuref-974019c976b5f26412ce486158d2431967af35d91387dae8cbcd43c20fce6452-000\n```\n\n----------------------------------------\n\nTITLE: Adding Default Account as Authorization Key\nDESCRIPTION: Test code for adding the default account hash as an associated key to ACCOUNT_USER_1.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/versioned_docs/version-1.5.X/resources/advanced/list-auth-keys-tutorial.md#2025-04-22_snippet_11\n\nLANGUAGE: rust\nCODE:\n```\nlet session_code = PathBuf::from(ADD_KEYS_WASM);\nlet session_args = runtime_args! {\n    ASSOCIATED_ACCOUNT => *DEFAULT_ACCOUNT_ADDR\n};\n\nlet add_keys_deploy_item = DeployItemBuilder::new()\n    .with_empty_payment_bytes(runtime_args! {ARG_AMOUNT => *DEFAULT_PAYMENT})\n    .with_authorization_keys(&[account_addr_1])\n    .with_address(account_addr_1)\n    .with_session_code(session_code, session_args)\n    .build();\n```\n\n----------------------------------------\n\nTITLE: Creating New Dictionary in Rust\nDESCRIPTION: Basic example of creating a new dictionary using the casper_contract API.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/versioned_docs/version-2.0.0/concepts/dictionaries.md#2025-04-22_snippet_0\n\nLANGUAGE: rust\nCODE:\n```\ncasper_contract::contract_api::storage::new_dictionary(dict_name)\n```\n\n----------------------------------------\n\nTITLE: Implementing Staking with Validator\nDESCRIPTION: Python script showing how to stake funds with a validator on the Casper network. Includes setting up validator keys, creating and dispatching stake deploys.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/docs/developers/dapps/sdk/python-sdk.md#2025-04-22_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nimport os\nimport pathlib\n\nimport pycspr\nfrom pycspr.client import NodeClient\nfrom pycspr.client import NodeConnectionInfo\nfrom pycspr.crypto import KeyAlgorithm\nfrom pycspr.types import Deploy\nfrom pycspr.types import PrivateKey\n\n# path to cp1 secret key - defaults to NCTL user 1.\npath_to_validator_secret_key = pathlib.Path(os.getenv(\"NCTL\")) / \"assets\" / \"net-1\" / \"users\" / \"user-1\" / \"secret_key.pem\"\n\n# type of cp1 secret key - defaults to ED25519.\ntype_of_validator_secret_key = KeyAlgorithm.ED25519.name\n\n# path to session code wasm binary - defaults to NCTL bin/eco/add_bid.wasm.\npath_to_wasm = pathlib.Path(os.getenv(\"NCTL\")) / \"assets\" / \"net-1\" / \"bin\" / \"auction\" / \"add_bid.wasm\"\n\n# amount to stake, i.e. bond, into the network.\namount = int(2.5e9)\n\n# amount to charge delegators for service provision.\ndelegation_rate = 2\n\n# name of target chain - defaults to NCTL chain.\nchain_name = \"casper-net-1\"\n\n# host address of target node - defaults to NCTL node 1.\nnode_host = \"localhost\"\n\n# Node API JSON-RPC port - defaults to 11101 @ NCTL node 1.\nnode_port_rpc = 11101\n\ndef _main(node_host, node_port_rpc, path_to_validator_secret_key, type_of_validator_secret_key, chain_name, amount, delegation_rate, path_to_wasm):\n    \"\"\"Main entry point.\n    :param args: Parsed command line arguments.\n    \"\"\"\n    # Set node client.\n    client: NodeClient = _get_client(node_host, node_port_rpc)\n\n    # Set validator key.\n    validator: PrivateKey = pycspr.parse_private_key(\n        path_to_validator_secret_key,\n        type_of_validator_secret_key,\n        )\n\n    # Set deploy.\n    deploy: Deploy = _get_deploy(validator, chain_name, amount, delegation_rate, path_to_wasm)\n\n    # Approve deploy.\n    deploy.approve(validator)\n\n    # Dispatch deploy to a node.\n    client.deploys.send(deploy)\n\n    print(f\"Deploy dispatched to node [{node_host}]: {deploy.hash.hex()}\")\n\n\ndef _get_client(node_host, node_port_rpc) -> NodeClient:\n    \"\"\"Returns a pycspr client instance.\n    \"\"\"\n    return NodeClient(NodeConnectionInfo(\n        host = node_host,\n        port_rpc = node_port_rpc,\n    ))\n\n\ndef _get_deploy(validator: PrivateKey, chain_name, amount, delegation_rate, path_to_wasm) -> Deploy:\n    \"\"\"Returns delegation deploy to be dispatched to a node.\n    \"\"\"\n    # Set standard deploy parameters.\n    deploy_params = pycspr.create_deploy_parameters(\n        account = validator,\n        chain_name = chain_name\n        )\n\n    # Set deploy.\n    deploy = pycspr.create_validator_auction_bid(\n        params = deploy_params,\n        amount = amount,\n        delegation_rate = delegation_rate,\n        public_key = validator.as_public_key(),\n        path_to_wasm = path_to_wasm\n        )\n\n    return deploy\n\n\n# Entry point.\nif __name__ == '__main__':\n    _main(node_host, node_port_rpc, path_to_validator_secret_key, type_of_validator_secret_key, chain_name, amount, delegation_rate, path_to_wasm)\n```\n\n----------------------------------------\n\nTITLE: Querying Global State with Arguments in Bash\nDESCRIPTION: Command to query the Casper Network global state with specific contract arguments to get information about particular contract entry points or state.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/docs/resources/tokens/cep18/full-tutorial.md#2025-04-22_snippet_15\n\nLANGUAGE: bash\nCODE:\n```\ncasper-client query-global-state \\\n--node-address http://<HOST:PORT> \\\n--state-root-hash [STATE_ROOT_HASH] \\\n--key [ACCOUNT_HASH] \\\n-q \"[CONTRACT_NAME/ARGUMENT]\"\n```\n\n----------------------------------------\n\nTITLE: Transaction Target Schema Definition in JSON\nDESCRIPTION: Defines the schema for the execution target of a transaction, which can be a Native operation, a Stored entity/package, or a Session with module bytes.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/condor/jsonrpc-comp/rpc-2.0/schema.json.md#2025-04-22_snippet_39\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"description\": \"Execution target of a Transaction.\",\n  \"oneOf\": [\n    {\n      \"description\": \"The execution target is a native operation (e.g. a transfer).\",\n      \"type\": \"string\",\n      \"enum\": [\n        \"Native\"\n      ]\n    },\n    {\n      \"description\": \"The execution target is a stored entity or package.\",\n      \"type\": \"object\",\n      \"required\": [\n        \"Stored\"\n      ],\n      \"properties\": {\n        \"Stored\": {\n          \"type\": \"object\",\n          \"required\": [\n            \"id\",\n            \"runtime\"\n          ],\n          \"properties\": {\n            \"id\": {\n              \"description\": \"The identifier of the stored execution target.\",\n              \"allOf\": [\n                {\n                  \"$ref\": \"#/components/schemas/TransactionInvocationTarget\"\n                }\n              ]\n            },\n            \"runtime\": {\n              \"description\": \"The execution runtime to use.\",\n              \"allOf\": [\n                {\n                  \"$ref\": \"#/components/schemas/TransactionRuntime\"\n                }\n              ]\n            }\n          },\n          \"additionalProperties\": false\n        }\n      },\n      \"additionalProperties\": false\n    },\n    {\n      \"description\": \"The execution target is the included module bytes, i.e. compiled Wasm.\",\n      \"type\": \"object\",\n      \"required\": [\n        \"Session\"\n      ],\n      \"properties\": {\n        \"Session\": {\n          \"type\": \"object\",\n          \"required\": [\n            \"module_bytes\",\n            \"runtime\"\n          ],\n          \"properties\": {\n            \"module_bytes\": {\n              \"description\": \"The compiled Wasm.\",\n              \"allOf\": [\n                {\n                  \"$ref\": \"#/components/schemas/Bytes\"\n                }\n              ]\n            },\n            \"runtime\": {\n              \"description\": \"The execution runtime to use.\",\n              \"allOf\": [\n                {\n                  \"$ref\": \"#/components/schemas/TransactionRuntime\"\n                }\n              ]\n            }\n          },\n          \"additionalProperties\": false\n        }\n      },\n      \"additionalProperties\": false\n    }\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Deploy Header Schema in JSON\nDESCRIPTION: The DeployHeader schema outlines structural details like account information, gas price, and timestamp, all critical for handling deploy metadata in the Casper Network. Required fields ensure that each deploy header is complete and properly formatted.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/condor/jsonrpc-comp/rpc-1.5/schema.json.md#2025-04-22_snippet_29\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"description\": \"The header portion of a [\\\"Deploy\\\"].\",\n  \"type\": \"object\",\n  \"required\": [\n    \"account\",\n    \"body_hash\",\n    \"chain_name\",\n    \"dependencies\",\n    \"gas_price\",\n    \"timestamp\",\n    \"ttl\"\n  ],\n  \"properties\": {\n    \"account\": {\n      \"$ref\": \"#/components/schemas/PublicKey\"\n    },\n    \"timestamp\": {\n      \"$ref\": \"#/components/schemas/Timestamp\"\n    },\n    \"ttl\": {\n      \"$ref\": \"#/components/schemas/TimeDiff\"\n    },\n    \"gas_price\": {\n      \"type\": \"integer\",\n      \"format\": \"uint64\",\n      \"minimum\": 0.0\n    },\n    \"body_hash\": {\n      \"$ref\": \"#/components/schemas/Digest\"\n    },\n    \"dependencies\": {\n      \"type\": \"array\",\n      \"items\": {\n        \"$ref\": \"#/components/schemas/DeployHash\"\n      }\n    },\n    \"chain_name\": {\n      \"type\": \"string\"\n    }\n  },\n  \"additionalProperties\": false\n}\n```\n\n----------------------------------------\n\nTITLE: Defining EraInfo and SeigniorageAllocation Schemas in JSON\nDESCRIPTION: Schema definitions for EraInfo and SeigniorageAllocation objects which contain auction metadata recorded at each era, including information about validator and delegator seigniorage allocations.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/condor/jsonrpc-comp/rpc-2.0/schema.json.md#2025-04-22_snippet_53\n\nLANGUAGE: json\nCODE:\n```\n\"EraInfo\": {\n  \"description\": \"Auction metadata.  Intended to be recorded at each era.\",\n  \"type\": \"object\",\n  \"required\": [\n    \"seigniorage_allocations\"\n  ],\n  \"properties\": {\n    \"seigniorage_allocations\": {\n      \"type\": \"array\",\n      \"items\": {\n        \"$ref\": \"#/components/schemas/SeigniorageAllocation\"\n      }\n    }\n  },\n  \"additionalProperties\": false\n},\n\"SeigniorageAllocation\": {\n  \"description\": \"Information about a seigniorage allocation\",\n  \"oneOf\": [\n    {\n      \"description\": \"Info about a seigniorage allocation for a validator\",\n      \"type\": \"object\",\n      \"required\": [\n        \"Validator\"\n      ],\n      \"properties\": {\n        \"Validator\": {\n          \"type\": \"object\",\n          \"required\": [\n            \"amount\",\n            \"validator_public_key\"\n          ],\n          \"properties\": {\n            \"validator_public_key\": {\n              \"description\": \"Validator's public key\",\n              \"allOf\": [\n                {\n                  \"$ref\": \"#/components/schemas/PublicKey\"\n                }\n              ]\n            },\n            \"amount\": {\n              \"description\": \"Allocated amount\",\n              \"allOf\": [\n                {\n                  \"$ref\": \"#/components/schemas/U512\"\n                }\n              ]\n            }\n          },\n          \"additionalProperties\": false\n        }\n      },\n      \"additionalProperties\": false\n    },\n    {\n      \"description\": \"Info about a seigniorage allocation for a delegator\",\n      \"type\": \"object\",\n      \"required\": [\n        \"Delegator\"\n      ],\n      \"properties\": {\n        \"Delegator\": {\n          \"type\": \"object\",\n          \"required\": [\n            \"amount\",\n            \"delegator_public_key\",\n            \"validator_public_key\"\n          ],\n          \"properties\": {\n            \"delegator_public_key\": {\n              \"description\": \"Delegator's public key\",\n              \"allOf\": [\n                {\n                  \"$ref\": \"#/components/schemas/PublicKey\"\n                }\n              ]\n            },\n            \"validator_public_key\": {\n              \"description\": \"Validator's public key\",\n              \"allOf\": [\n                {\n                  \"$ref\": \"#/components/schemas/PublicKey\"\n                }\n              ]\n            },\n            \"amount\": {\n              \"description\": \"Allocated amount\",\n              \"allOf\": [\n                {\n                  \"$ref\": \"#/components/schemas/U512\"\n                }\n              ]\n            }\n          },\n          \"additionalProperties\": false\n        }\n      },\n      \"additionalProperties\": false\n    }\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Speculative Execution Server in Casper Node (TOML, Configuration)\nDESCRIPTION: This snippet provides a sample TOML configuration section for enabling and customizing the speculative execution JSON-RPC HTTP server in a Casper node. It includes settings for enabling the server, binding its listening address and port, adjusting rate limiting (qps_limit), maximum request size (max_body_bytes), and CORS origin behavior. These parameters determine the security and availability of an endpoint for developers to estimate gas costs of prospective transactions. Set in the node's config.toml, this feature depends on running a Casper node with the corresponding server module and proper network permissions.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/docs/operators/setup/basic-node-configuration.md#2025-04-22_snippet_4\n\nLANGUAGE: toml\nCODE:\n```\n# ========================================================================\\n# Configuration options for the speculative execution JSON-RPC HTTP server\\n# ========================================================================\\n[speculative_exec_server]\\n\\n# Flag which enables the speculative execution JSON-RPC HTTP server.\\nenable_server = true\\n\\n# Listening address for speculative execution JSON-RPC HTTP server.  If the port\\n# is set to 0, a random port will be used.\\n#\\n# If the specified port cannot be bound to, a random port will be tried instead.\\n# If binding fails, the speculative execution JSON-RPC HTTP server will not run,\\n# but the node will be otherwise unaffected.\\n#\\n# The actual bound address will be reported via a log line if logging is enabled.\\naddress = '0.0.0.0:7778'\\n\\n# The global max rate of requests (per second) before they are limited.\\n# Request will be delayed to the next 1 second bucket once limited.\\nqps_limit = 1\\n\\n# Maximum number of bytes to accept in a single request body.\\nmax_body_bytes = 2_621_440\\n\\n# Specifies which origin will be reported as allowed by speculative execution server.\\n#\\n# If left empty, CORS will be disabled.\\n# If set to '*', any origin is allowed.\\n# Otherwise, only a specified origin is allowed. The given string must conform to the [origin scheme](https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Origin).\\ncors_origin = ''\\n\n```\n\n----------------------------------------\n\nTITLE: Defining a 512-bit Integer Representation in JSON\nDESCRIPTION: This JSON snippet defines the structure for representing a 512-bit integer. The 'description' field explains the data type, and the 'type' field specifies that it is stored as a string, likely due to precision requirements or limitations of standard integer types in JSON.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/condor/jsonrpc-comp/rpc-1.5/schema/U512.json.md#2025-04-22_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"description\": \"Decimal representation of a 512-bit integer.\",\n    \"type\": \"string\"\n} \n```\n\n----------------------------------------\n\nTITLE: Defining Hex-Encoded Account Hash Schema in JSON\nDESCRIPTION: This JSON schema defines the structure for an account hash. It specifies that the account hash should be represented as a hex-encoded string.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/condor/jsonrpc-comp/rpc-1.5/schema/AccountHash.json.md#2025-04-22_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"description\": \"Hex-encoded account hash.\",\n    \"type\": \"string\"\n}\n```\n\n----------------------------------------\n\nTITLE: Undelegating Tokens via Compiled WASM\nDESCRIPTION: Alternative method to undelegate tokens using compiled WASM. This method requires building casper-node contracts and costs more (around 6 CSPR) compared to the system auction contract method.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/versioned_docs/version-1.5.X/developers/cli/undelegate.md#2025-04-22_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\ncasper-client put-deploy \\\n--node-address <HOST:PORT> \\\n--secret-key <PATH> \\\n--chain-name <CHAIN_NAME> \\\n--payment-amount <PAYMENT_AMOUNT_IN_MOTES> \\\n--session-path <PATH_TO_WASM>/undelegate.wasm \\\n--session-arg \"validator:public_key='<HEX_ENCODED_VALIDATOR_PULIC_KEY>'\" \\\n--session-arg \"amount:u512='<AMOUNT_TO_UNDELEGATE>'\" \\\n--session-arg \"delegator:public_key='<HEX_ENCODED_DELEGATOR_PULIC_KEY>'\"\n```\n\n----------------------------------------\n\nTITLE: Embedding YouTube Video with HTML iframe\nDESCRIPTION: This HTML snippet embeds a YouTube video into the webpage using an iframe element. The 'src' attribute points to the video URL, while 'width', 'height', 'frameborder', and 'allow' attributes control the player's appearance and permissions.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/versioned_docs/version-1.5.X/developers/writing-onchain-code/simple-contract.md#2025-04-22_snippet_17\n\nLANGUAGE: html\nCODE:\n```\n<iframe width=\"400\" height=\"225\" src=\"https://www.youtube.com/embed/yHJwkhO5EQg\" frameborder=\"0\" allow=\"accelerometer; clipboard-write; encrypted-media; gyroscope; picture-in-picture\" allowfullscreen></iframe>\n```\n\n----------------------------------------\n\nTITLE: Generating Admin Entries for Global State Update (Shell)\nDESCRIPTION: This command generates admin entries for the global_state.toml file, used in network upgrades to add new administrators.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/versioned_docs/version-1.5.X/operators/setup-network/create-private.md#2025-04-22_snippet_26\n\nLANGUAGE: sh\nCODE:\n```\n$ global-state-update-gen generate-admins --data-dir $DATA_DIR --state-hash $STATE_HASH --admin NEW_PUBLIC_KEY,BALANCE >> global_state.toml\n```\n\n----------------------------------------\n\nTITLE: Burning NFT using Casper Client\nDESCRIPTION: Command to permanently burn an NFT within a CEP-78 collection. Uses the burn function with parameters including session hash, entry point, and token ID. Requires a payment amount of 5000000000 and renders the NFT inaccessible after execution.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/docs/resources/tokens/cep78/using-casper-client.md#2025-04-22_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\ncasper-client put-deploy -n http://localhost:11101/rpc --chain-name \"casper-net-1\" \\\n--payment-amount 5000000000 \\\n-k ~/casper/casper-node/utils/nctl/assets/net-1/nodes/node-1/keys/secret_key.pem \\\n--session-hash hash-52e78ae3f6c485d036a74f65ebbb8c75fcc7c33fb42eb667fb32aeba72c63fb5 \\\n--session-entry-point \"burn\" \\\n--session-arg \"token_id:u64='1'\"\n```\n\n----------------------------------------\n\nTITLE: Disabling Auction Bids in chainspec.toml (TOML)\nDESCRIPTION: This configuration within the `[core]` section of `chainspec.toml` restricts the auction mechanism in a private network. Setting `allow_auction_bids` to `false` prevents new validators from joining the network via bidding (`add_bid` and `delegate` entry points are disabled), ensuring a fixed validator set.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/docs/operators/setup-network/create-private.md#2025-04-22_snippet_6\n\nLANGUAGE: toml\nCODE:\n```\n[core]\nallow_auction_bids = false\n```\n\n----------------------------------------\n\nTITLE: Describing BTreeSet Serialization (Casper Network)\nDESCRIPTION: Describes the serialization format for a BTreeSet on the Casper network. It begins with a u32 representing the number of values in the set, followed by the serialized values repeated according to the count.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/versioned_docs/version-2.0.0/concepts/serialization/types.md#2025-04-22_snippet_6\n\nLANGUAGE: Text\nCODE:\n```\n## BTreeSet {#btreeset}\n\nA `BTreeSet` is a method of storing a set of values within a Casper network. They serialize with the first 4 bytes representing a `u32` value describing the number of values held within. The remainder consists of a repeating series of values of the length dictated by the first four bytes.\n```\n\n----------------------------------------\n\nTITLE: Accessing CLI Help for Account Info\nDESCRIPTION: Command to display detailed help information about the get-account-info subcommand and its usage.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/docs/concepts/accounts-and-keys.md#2025-04-22_snippet_14\n\nLANGUAGE: bash\nCODE:\n```\ncasper-client get-account-info --help\n```\n\n----------------------------------------\n\nTITLE: JSON-RPC Request Structure\nDESCRIPTION: Example JSON-RPC request structure generated by the transfer command, showing the complete deploy object with header, payment, session, and approval details.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/versioned_docs/version-1.5.X/developers/cli/transfers/direct-token-transfer.md#2025-04-22_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"jsonrpc\": \"2.0\",\n  \"method\": \"account_put_deploy\",\n  \"params\": {\n    \"deploy\": {\n      \"hash\": \"1f17a0bdeaaf71abd03492c854cdf97f746432751721ce555e95b9cefe641e3c\",\n      \"header\": {\n        \"account\": \"0154d828baafa6858b92919c4d78f26747430dcbecb9aa03e8b44077dc6266cabf\",\n        \"timestamp\": \"2023-10-12T14:59:40.760Z\",\n        \"ttl\": \"30m\",\n        \"gas_price\": 1,\n        \"body_hash\": \"ea7e6a6cbdd4d761827cb627e162896bee3e771beda000550615c9b4fafa3a2d\",\n        \"dependencies\": [],\n        \"chain_name\": \"casper-test\"\n      },\n      \"payment\": {\n        \"ModuleBytes\": {\n          \"module_bytes\": \"\",\n          \"args\": [\n            [\n              \"amount\",\n              {\n                \"cl_type\": \"U512\",\n                \"bytes\": \"0400e1f505\",\n                \"parsed\": \"100000000\"\n              }\n            ]\n          ]\n        }\n      },\n      \"session\": {\n        \"Transfer\": {\n          \"args\": [\n            [\n              \"amount\",\n              {\n                \"cl_type\": \"U512\",\n                \"bytes\": \"0500f2052a01\",\n                \"parsed\": \"5000000000\"\n              }\n            ],\n            [\n              \"target\",\n              {\n                \"cl_type\": \"PublicKey\",\n                \"bytes\": \"01360af61b50cdcb7b92cffe2c99315d413d34ef77fadee0c105cc4f1d4120f986\",\n                \"parsed\": \"01360af61b50cdcb7b92cffe2c99315d413d34ef77fadee0c105cc4f1d4120f986\"\n              }\n            ],\n            [\n              \"id\",\n              {\n                \"cl_type\": {\n                  \"Option\": \"U64\"\n                },\n                \"bytes\": \"014767a90000000000\",\n                \"parsed\": 11102023\n              }\n            ]\n          ]\n        }\n      },\n      \"approvals\": [\n        {\n          \"signer\": \"0154d828baafa6858b92919c4d78f26747430dcbecb9aa03e8b44077dc6266cabf\",\n          \"signature\": \"01e53cb742ed13ff4f0584a3da0f22f5942a33e010965adf640c91204ae4bc7436f1e5534d338ffa117d193295214816445439781229d24a372085c316eac5e305\"\n        }\n      ]\n    }\n  },\n  \"id\": 3\n}\n```\n\n----------------------------------------\n\nTITLE: Stopping and Starting Casper Sidecar Service - Bash\nDESCRIPTION: These commands stop and start the 'casper-sidecar' systemd service. Requires sudo/root privileges. Useful for applying configuration changes, troubleshooting, or restarting a failed or modified service.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/docs/operators/setup/casper-sidecar.md#2025-04-22_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nsudo systemctl stop casper-sidecar.service\n```\n\nLANGUAGE: bash\nCODE:\n```\nsudo systemctl start casper-sidecar.service\n```\n\n----------------------------------------\n\nTITLE: Low-level Memory and Pointer Operations in WebAssembly Text (WAT)\nDESCRIPTION: Complex WebAssembly text code implementing memory management operations including pointer manipulation, memory allocation, offset calculations, and conditional branching logic. The code performs operations on memory addresses with extensive byte-level operations and error condition handling.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/versioned_docs/version-2.0.0/developers/json-rpc/json-rpc-transactional.md#2025-04-22_snippet_6\n\nLANGUAGE: webassembly\nCODE:\n```\\n```\n\n----------------------------------------\n\nTITLE: Simplified CEP-18 Allowance Approval Command\nDESCRIPTION: A simplified version of the allowance approval command without explanatory comments, showing the essential parameters needed for approving token allowances.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/versioned_docs/version-2.0.0/resources/tokens/cep18/transfer.md#2025-04-22_snippet_8\n\nLANGUAGE: bash\nCODE:\n```\ncasper-client put-deploy -n http://<node IP>:<PORT>\\\n--chain-name <CHAIN NAME> \\\n--secret-key ~/casper/demo/user_a/secret_key.pem \\\n--session-hash hash-05d893e76c731729fc26339e5a970bd79fbf4a6adf743c8385431fb494bff45e \\\n--session-entry-point \"approve\" \\\n--session-arg \"spender:key='account-hash-17192017d32db5dc9f598bf8ac6ac35ee4b64748669b00572d88335941479513'\" \\\n--session-arg \"amount:u256='15'\" \\\n--payment-amount \"10000000000\"\n```\n\n----------------------------------------\n\nTITLE: Setting Docusaurus Documentation Environment Variables - Shell/Env\nDESCRIPTION: This env snippet lists the necessary environment variables to configure Directus CMS and Algolia search integrations for the documentation site. Variables such as DIRECTUS_URL, DIRECTUS_TOKEN, SITE_URL, and ALGOLIA_SITE_API_KEY must be set in a .env file or environment before running or building the project. The actual values should be replaced with real service credentials/URLs. Missing or incorrect variables may cause deployment or search failures.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/README/DEVELOPERS.md#2025-04-22_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\n    DIRECTUS_URL=REPLACE_WITH_YOUR_DIRECTUS_URL\n    DIRECTUS_GRAPHQL_URL=REPLACE_WITH_YOUR_DIRECTUS_GRAPH_URL\n    DIRECTUS_TOKEN=REPLACE_WITH_YOUR_DIRECTUS_TOKEN\n    SITE_URL=REPLACE_WITH_YOUR_SITE_URL\n    ALGOLIA_SITE_APP_ID=REPLACE_WITH_YOUR_ALGOLIA_SITE_APP_ID\n    ALGOLIA_SITE_API_KEY=REPLACE_WITH_YOUR_ALGOLIA_SITE_API_KEY\n    ALGOLIA_SITE_INDEX_NAME=REPLACE_WITH_YOUR_ALGOLIA_SITE_INDEX_NAME\n\n```\n\n----------------------------------------\n\nTITLE: Creating AddressableEntity Keys from Smart Contract Hash in Rust\nDESCRIPTION: This code demonstrates how to create an AddressableEntity key from a smart contract hash in Casper 2.0.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/src/pages/condor/addressable-entity.md#2025-04-22_snippet_1\n\nLANGUAGE: rust\nCODE:\n```\nlet addressable_entity_key = Key::AddressableEntity(EntityAddr::SmartContract(contract_hash));\n```\n\n----------------------------------------\n\nTITLE: Minting NFT using Stored Package Hash\nDESCRIPTION: Example of minting an NFT using the stored package hash via the Casper client. This command invokes the 'mint' entrypoint directly, specifying the token owner and metadata.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/versioned_docs/version-1.5.X/resources/tokens/cep78/using-casper-client/interacting-with-NFTs.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ncasper-client put-deploy --node-address http://localhost:11101/rpc/ \\\n--chain-name \"casper-net-1\" \\\n--payment-amount 5000000000 \\\n--secret-key ~/casper/casper-node/utils/nctl/assets/net-1/nodes/node-1/keys/secret_key.pem \\\n--session-package-hash hash-2b61207cd0e94ce1b1d40801b0abb1ab55fd7dae94c9dcf670292243f3791a30 \\\n--session-entry-point \"mint\" \\\n--session-arg \"token_owner:key='account-hash-e70dbca48c2d31bc2d754e51860ceaa8a1a49dc627b20320b0ecee1b6d9ce655'\" \\\n--session-arg \"token_meta_data:string='{\\\"name\\\": \\\"John Doe\\\",\\\"token_uri\\\": \\\"https:\\/\\/www.barfoo.com\\\",\\\"checksum\\\": \\\"940bffb3f2bba35f84313aa26da09ece3ad47045c6a1292c2bbd2df4ab1a55fb\\\"}'\"\n```\n\n----------------------------------------\n\nTITLE: Defining BlockSynchronizerStatus with Optional BlockSyncStatus - OpenAPI/Swagger - JSON\nDESCRIPTION: Models the 'BlockSynchronizerStatus' object that tracks synchronization status for historical and forward blocks using optional properties that may reference 'BlockSyncStatus' or be null. This schema pattern facilitates clear client/server communication about block sync state. Validates that no extra properties are present and that referenced schema objects are available in the overall components list.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/condor/jsonrpc-comp/rpc-1.5/schema/components.json.md#2025-04-22_snippet_51\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"description\": \"The status of the block synchronizer.\",\n  \"type\": \"object\",\n  \"properties\": {\n    \"historical\": {\n      \"description\": \"The status of syncing a historical block, if any.\",\n      \"anyOf\": [\n        {\n          \"$ref\": \"#/components/schemas/BlockSyncStatus\"\n        },\n        {\n          \"type\": \"null\"\n        }\n      ]\n    },\n    \"forward\": {\n      \"description\": \"The status of syncing a forward block, if any.\",\n      \"anyOf\": [\n        {\n          \"$ref\": \"#/components/schemas/BlockSyncStatus\"\n        },\n        {\n          \"type\": \"null\"\n        }\n      ]\n    }\n  },\n  \"additionalProperties\": false\n}\n```\n\n----------------------------------------\n\nTITLE: Defining AccountHash\nDESCRIPTION: This schema defines a hex-encoded string representing an account hash. It is used for account identification within the file.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/condor/jsonrpc-comp/rpc-1.5/schema/components.json.md#2025-04-22_snippet_25\n\nLANGUAGE: JSON\nCODE:\n```\n{\\n    \\\"description\\\": \\\"Hex-encoded account hash.\\\",\\n    \\\"type\\\": \\\"string\\\"\\n}\n```\n\n----------------------------------------\n\nTITLE: Requesting Deploy Information in JSON\nDESCRIPTION: This JSON request example shows how to retrieve deploy details using the 'info_get_deploy' method. Inputs include parameters like deploy hash and finalized approvals, while outputs provide detailed deploy information from Casper Network.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/docs/developers/json-rpc/json-rpc-informational.md#2025-04-22_snippet_10\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"id\": 1,\n  \"jsonrpc\": \"2.0\",\n  \"method\": \"info_get_deploy\",\n  \"params\": [\n    {\n      \"name\": \"deploy_hash\",\n      \"value\": \"5c9b3b099c1378aa8e4a5f07f59ff1fcdc69a83179427c7e67ae0377d94d93fa\"\n    },\n    {\n      \"name\": \"finalized_approvals\",\n      \"value\": true\n    }\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Installing OpenSSL Dependencies on Ubuntu\nDESCRIPTION: Commands to install required package configuration and OpenSSL development libraries on Ubuntu using apt-get.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/versioned_docs/version-1.5.X/resources/quick-start.md#2025-04-22_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nsudo apt-get install pkg-config\nsudo apt-get install openssl\nsudo apt-get install libssl-dev\n```\n\n----------------------------------------\n\nTITLE: Defining JSON Schema for Casper Network Types\nDESCRIPTION: Comprehensive JSON schema definitions for Casper Network data structures including vesting schedules, withdraw purses, era IDs, integer types, named keys, unbonding purses, account identifiers, block identifiers, and account structures. Each schema defines the required properties, data types, and relationships between components.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/condor/jsonrpc-comp/rpc-1.5/schema/components.json.md#2025-04-22_snippet_37\n\nLANGUAGE: json\nCODE:\n```\n\"vesting_schedule\": {\n    \"anyOf\": [\n        {\n            \"$ref\": \"#/components/schemas/VestingSchedule\"\n        },\n        {\n            \"type\": \"null\"\n        }\n    ]\n}\n},\n\"additionalProperties\": false\n},\n\"WithdrawPurse\": {\n\"description\": \"A withdraw purse, a legacy structure.\",\n\"type\": \"object\",\n\"required\": [\n    \"amount\",\n    \"bonding_purse\",\n    \"era_of_creation\",\n    \"unbonder_public_key\",\n    \"validator_public_key\"\n],\n\"properties\": {\n    \"bonding_purse\": {\n        \"description\": \"Bonding Purse\",\n        \"allOf\": [\n            {\n                \"$ref\": \"#/components/schemas/URef\"\n            }\n        ]\n    },\n    \"validator_public_key\": {\n        \"description\": \"Validators public key.\",\n        \"allOf\": [\n            {\n                \"$ref\": \"#/components/schemas/PublicKey\"\n            }\n        ]\n    },\n    \"unbonder_public_key\": {\n        \"description\": \"Unbonders public key.\",\n        \"allOf\": [\n            {\n                \"$ref\": \"#/components/schemas/PublicKey\"\n            }\n        ]\n    },\n    \"era_of_creation\": {\n        \"description\": \"Era in which this unbonding request was created.\",\n        \"allOf\": [\n            {\n                \"$ref\": \"#/components/schemas/EraId\"\n            }\n        ]\n    },\n    \"amount\": {\n        \"description\": \"Unbonding Amount.\",\n        \"allOf\": [\n            {\n                \"$ref\": \"#/components/schemas/U512\"\n            }\n        ]\n    }\n},\n\"additionalProperties\": false\n},\n\"EraId\": {\n\"description\": \"Era ID newtype.\",\n\"type\": \"integer\",\n\"format\": \"uint64\",\n\"minimum\": 0.0\n},\n\"U128\": {\n\"description\": \"Decimal representation of a 128-bit integer.\",\n\"type\": \"string\"\n},\n\"U256\": {\n\"description\": \"Decimal representation of a 256-bit integer.\",\n\"type\": \"string\"\n},\n\"NamedKey\": {\n\"description\": \"A named key.\",\n\"type\": \"object\",\n\"required\": [\n    \"key\",\n    \"name\"\n],\n\"properties\": {\n    \"name\": {\n        \"description\": \"The name of the entry.\",\n        \"type\": \"string\"\n    },\n    \"key\": {\n        \"description\": \"The value of the entry: a casper `Key` type.\",\n        \"type\": \"string\"\n    }\n},\n\"additionalProperties\": false\n},\n\"UnbondingPurse\": {\n\"description\": \"Unbonding purse.\",\n\"type\": \"object\",\n\"required\": [\n    \"amount\",\n    \"bonding_purse\",\n    \"era_of_creation\",\n    \"unbonder_public_key\",\n    \"validator_public_key\"\n],\n\"properties\": {\n    \"bonding_purse\": {\n        \"description\": \"Bonding Purse\",\n        \"allOf\": [\n            {\n                \"$ref\": \"#/components/schemas/URef\"\n            }\n        ]\n    },\n    \"validator_public_key\": {\n        \"description\": \"Validators public key.\",\n        \"allOf\": [\n            {\n                \"$ref\": \"#/components/schemas/PublicKey\"\n            }\n        ]\n    },\n    \"unbonder_public_key\": {\n        \"description\": \"Unbonders public key.\",\n        \"allOf\": [\n            {\n                \"$ref\": \"#/components/schemas/PublicKey\"\n            }\n        ]\n    },\n    \"era_of_creation\": {\n        \"description\": \"Era in which this unbonding request was created.\",\n        \"allOf\": [\n            {\n                \"$ref\": \"#/components/schemas/EraId\"\n            }\n        ]\n    },\n    \"amount\": {\n        \"description\": \"Unbonding Amount.\",\n        \"allOf\": [\n            {\n                \"$ref\": \"#/components/schemas/U512\"\n            }\n        ]\n    },\n    \"new_validator\": {\n        \"description\": \"The validator public key to re-delegate to.\",\n        \"anyOf\": [\n            {\n                \"$ref\": \"#/components/schemas/PublicKey\"\n            },\n            {\n                \"type\": \"null\"\n            }\n        ]\n    }\n},\n\"additionalProperties\": false\n},\n\"AccountIdentifier\": {\n\"description\": \"Identifier of an account.\",\n\"anyOf\": [\n    {\n        \"description\": \"The public key of an account\",\n        \"allOf\": [\n            {\n                \"$ref\": \"#/components/schemas/PublicKey\"\n            }\n        ]\n    },\n    {\n        \"description\": \"The account hash of an account\",\n        \"allOf\": [\n            {\n                \"$ref\": \"#/components/schemas/AccountHash\"\n            }\n        ]\n    }\n]\n},\n\"BlockIdentifier\": {\n\"description\": \"Identifier for possible ways to retrieve a block.\",\n\"anyOf\": [\n    {\n        \"description\": \"Identify and retrieve the block with its hash.\",\n        \"type\": \"object\",\n        \"required\": [\n            \"Hash\"\n        ],\n        \"properties\": {\n            \"Hash\": {\n                \"$ref\": \"#/components/schemas/BlockHash\"\n            }\n        },\n        \"additionalProperties\": false\n    },\n    {\n        \"description\": \"Identify and retrieve the block with its height.\",\n        \"type\": \"object\",\n        \"required\": [\n            \"Height\"\n        ],\n        \"properties\": {\n            \"Height\": {\n                \"type\": \"integer\",\n                \"format\": \"uint64\",\n                \"minimum\": 0.0\n            }\n        },\n        \"additionalProperties\": false\n    }\n]\n},\n\"Account\": {\n\"description\": \"Structure representing a user's account, stored in global state.\",\n\"type\": \"object\",\n\"required\": [\n    \"account_hash\",\n    \"action_thresholds\",\n    \"associated_keys\",\n    \"main_purse\",\n    \"named_keys\"\n],\n\"properties\": {\n    \"account_hash\": {\n        \"$ref\": \"#/components/schemas/AccountHash\"\n    },\n    \"named_keys\": {\n        \"type\": \"array\",\n        \"items\": {\n            \"$ref\": \"#/components/schemas/NamedKey\"\n        }\n    },\n    \"main_purse\": {\n        \"$ref\": \"#/components/schemas/URef\"\n    },\n    \"associated_keys\": {\n        \"type\": \"array\",\n        \"items\": {\n            \"$ref\": \"#/components/schemas/AssociatedKey\"\n        }\n    },\n    \"action_thresholds\": {\n        \"$ref\": \"#/components/schemas/ActionThresholds\"\n    }\n},\n\"additionalProperties\": false\n},\n\"AssociatedKey\": {\n\"type\": \"object\",\n\"required\": [\n    \"account_hash\",\n    \"weight\"\n],\n\"properties\": {\n    \"account_hash\": {\n```\n\n----------------------------------------\n\nTITLE: JSON-RPC Params Examples - Markdown\nDESCRIPTION: Examples of valid empty params formats in JSON-RPC requests. The params field must be either an empty array '[]', an empty object '{}', or omitted entirely to avoid InvalidParams errors.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/docs/developers/json-rpc/errors.md#2025-04-22_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n[]\\n{}\\nomitted\n```\n\n----------------------------------------\n\nTITLE: Running Tests via Make Command\nDESCRIPTION: Bash command for executing the CEP-18 token contract test suite using make.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/versioned_docs/version-1.5.X/resources/tokens/cep18/tests.md#2025-04-22_snippet_8\n\nLANGUAGE: bash\nCODE:\n```\nmake test\n```\n\n----------------------------------------\n\nTITLE: Defining TransformKindV2 Schema for Casper Network in JSON\nDESCRIPTION: JSON schema definition for TransformKindV2, which represents different types of transformations that can occur during execution in the Casper Network. It includes variants for identity transformations, writes, numeric additions, key operations, and failure cases.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/condor/jsonrpc-comp/rpc-2.0/schema.json.md#2025-04-22_snippet_63\n\nLANGUAGE: json\nCODE:\n```\n\"description\": \"Representation of a single transformation occurring during execution.\\n\\nNote that all arithmetic variants of `TransformKindV2` are commutative which means that a given collection of them can be executed in any order to produce the same end result.\",\n\"oneOf\": [\n  {\n    \"description\": \"An identity transformation that does not modify a value in the global state.\\n\\nCreated as a result of reading from the global state.\",\n    \"type\": \"string\",\n    \"enum\": [\n      \"Identity\"\n    ]\n  },\n  {\n    \"description\": \"Writes a new value in the global state.\",\n    \"type\": \"object\",\n    \"required\": [\n      \"Write\"\n    ],\n    \"properties\": {\n      \"Write\": {\n        \"$ref\": \"#/components/schemas/StoredValue\"\n      }\n    },\n    \"additionalProperties\": false\n  },\n  {\n    \"description\": \"A wrapping addition of an `i32` to an existing numeric value (not necessarily an `i32`) in the global state.\",\n    \"type\": \"object\",\n    \"required\": [\n      \"AddInt32\"\n    ],\n    \"properties\": {\n      \"AddInt32\": {\n        \"type\": \"integer\",\n        \"format\": \"int32\"\n      }\n    },\n    \"additionalProperties\": false\n  },\n  {\n    \"description\": \"A wrapping addition of a `u64` to an existing numeric value (not necessarily an `u64`) in the global state.\",\n    \"type\": \"object\",\n    \"required\": [\n      \"AddUInt64\"\n    ],\n    \"properties\": {\n      \"AddUInt64\": {\n        \"type\": \"integer\",\n        \"format\": \"uint64\",\n        \"minimum\": 0.0\n      }\n    },\n    \"additionalProperties\": false\n  },\n  {\n    \"description\": \"A wrapping addition of a `U128` to an existing numeric value (not necessarily an `U128`) in the global state.\",\n    \"type\": \"object\",\n    \"required\": [\n      \"AddUInt128\"\n    ],\n    \"properties\": {\n      \"AddUInt128\": {\n        \"$ref\": \"#/components/schemas/U128\"\n      }\n    },\n    \"additionalProperties\": false\n  },\n  {\n    \"description\": \"A wrapping addition of a `U256` to an existing numeric value (not necessarily an `U256`) in the global state.\",\n    \"type\": \"object\",\n    \"required\": [\n      \"AddUInt256\"\n    ],\n    \"properties\": {\n      \"AddUInt256\": {\n        \"$ref\": \"#/components/schemas/U256\"\n      }\n    },\n    \"additionalProperties\": false\n  },\n  {\n    \"description\": \"A wrapping addition of a `U512` to an existing numeric value (not necessarily an `U512`) in the global state.\",\n    \"type\": \"object\",\n    \"required\": [\n      \"AddUInt512\"\n    ],\n    \"properties\": {\n      \"AddUInt512\": {\n        \"$ref\": \"#/components/schemas/U512\"\n      }\n    },\n    \"additionalProperties\": false\n  },\n  {\n    \"description\": \"Adds new named keys to an existing entry in the global state.\\n\\nThis transform assumes that the existing stored value is either an Account or a Contract.\",\n    \"type\": \"object\",\n    \"required\": [\n      \"AddKeys\"\n    ],\n    \"properties\": {\n      \"AddKeys\": {\n        \"$ref\": \"#/components/schemas/NamedKeys\"\n      }\n    },\n    \"additionalProperties\": false\n  },\n  {\n    \"description\": \"Removes the pathing to the global state entry of the specified key. The pruned element remains reachable from previously generated global state root hashes, but will not be included in the next generated global state root hash and subsequent state accumulated from it.\",\n    \"type\": \"object\",\n    \"required\": [\n      \"Prune\"\n    ],\n    \"properties\": {\n      \"Prune\": {\n        \"$ref\": \"#/components/schemas/Key\"\n      }\n    },\n    \"additionalProperties\": false\n  },\n  {\n    \"description\": \"Represents the case where applying a transform would cause an error.\",\n    \"type\": \"object\",\n    \"required\": [\n      \"Failure\"\n    ],\n    \"properties\": {\n      \"Failure\": {\n        \"$ref\": \"#/components/schemas/TransformError\"\n      }\n    },\n    \"additionalProperties\": false\n  }\n]\n```\n\n----------------------------------------\n\nTITLE: ValidatorChange Enumeration Definition\nDESCRIPTION: Defines validator status changes between eras using u8 tags (0-4) representing added, removed, banned, cannot propose, and seen as faulty states.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/versioned_docs/version-2.0.0/concepts/serialization/types.md#2025-04-22_snippet_56\n\nLANGUAGE: markdown\nCODE:\n```\n| Tag | Change |\n| --- | ----------- |\n| 0 | Added |\n| 1 | Removed |\n| 2 | Banned |\n| 3 | Cannot Propose |\n| 4 | Seen as Faulty |\n```\n\n----------------------------------------\n\nTITLE: Adding New Administrators via TOML in Upgrade\nDESCRIPTION: Creates admins' entries in the global_state.toml for Casper network updates. This involves listing new and existing administrators in the chainspec.toml file for an upgrade.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/versioned_docs/version-2.0.0/operators/setup-network/create-private.md#2025-04-22_snippet_27\n\nLANGUAGE: toml\nCODE:\n```\n[core]\nadministrators = [\"NEW_PUBLIC_KEY\"]\n```\n\n----------------------------------------\n\nTITLE: Querying Contract Message Value\nDESCRIPTION: Retrieves the current value of the message stored in the contract using a specific key.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/versioned_docs/version-2.0.0/resources/advanced/cross-contract.md#2025-04-22_snippet_21\n\nLANGUAGE: bash\nCODE:\n```\ncasper-client query-global-state \\\n  --node-address http://136.243.187.84:7777 \\\n  --state-root-hash 2f3e100324deb999107229dbec5c4b724653174328c99ea0836931248c3cc9cb \\\n  --key hash-b7a06298cc71d4cac05929cc0713dfd5a541c68b71cb500cd04547b5cd0385ea -q \"message\"\n```\n\n----------------------------------------\n\nTITLE: Near Public Method Implementation\nDESCRIPTION: Demonstrates the implementation of a public method in Near blockchain that can modify contract state.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/versioned_docs/version-1.5.X/resources/moving-to-casper.md#2025-04-22_snippet_4\n\nLANGUAGE: rust\nCODE:\n```\npub fn add_message(&mut self, ...) { }\n```\n\n----------------------------------------\n\nTITLE: Defining JSON Schema for Combined Protocol and Contract Version\nDESCRIPTION: This JSON snippet defines a schema for an array data structure. The array must contain exactly two elements, each being a non-negative 32-bit unsigned integer (uint32). According to the internal description, this structure represents the combination of a major element from a `ProtocolVersion` and a `ContractVersion`.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/condor/jsonrpc-comp/rpc-2.0/schema/ContractVersionKey.json.md#2025-04-22_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"description\": \"Major element of `ProtocolVersion` combined with `ContractVersion`.\",\n    \"type\": \"array\",\n    \"items\": [\n        {\n            \"type\": \"integer\",\n            \"format\": \"uint32\",\n            \"minimum\": 0\n        },\n        {\n            \"type\": \"integer\",\n            \"format\": \"uint32\",\n            \"minimum\": 0\n        }\n    ],\n    \"maxItems\": 2,\n    \"minItems\": 2\n} \n```\n\n----------------------------------------\n\nTITLE: Listening to the Event Stream with cURL\nDESCRIPTION: This snippet demonstrates how to consume the event stream of a Casper node using a cURL command. It makes a request to the node's event endpoint to retrieve server-sent events.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/versioned_docs/version-2.0.0/developers/dapps/monitor-and-consume-events.md#2025-04-22_snippet_2\n\nLANGUAGE: cURL\nCODE:\n```\ncurl -s http://NODE_ADDRESS:PORT/events/\n```\n\n----------------------------------------\n\nTITLE: Defining Object Structure in JSON Schema\nDESCRIPTION: This JSON schema defines the structure for an object with required and optional properties, focusing on the 'initial_release_timestamp_millis' and 'locked_amounts'. Dependencies include adherence to the JSON Schema Draft standard. The schema primarily serves data validation purposes, enforcing constraints like type specifications and minimum value requirements. Outputs must conform to these structural rules, ensuring data integrity and consistency. This schema cannot accommodate items beyond or below fourteen in 'locked_amounts'.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/condor/jsonrpc-comp/rpc-1.5/schema/VestingSchedule.json.md#2025-04-22_snippet_0\n\nLANGUAGE: JSON\nCODE:\n```\n{\n    \"type\": \"object\",\n    \"required\": [\n        \"initial_release_timestamp_millis\"\n    ],\n    \"properties\": {\n        \"initial_release_timestamp_millis\": {\n            \"type\": \"integer\",\n            \"format\": \"uint64\",\n            \"minimum\": 0\n        },\n        \"locked_amounts\": {\n            \"type\": [\n                \"array\",\n                \"null\"\n            ],\n            \"items\": {\n                \"$ref\": \"#/components/schemas/U512\"\n            },\n            \"maxItems\": 14,\n            \"minItems\": 14\n        }\n    },\n    \"additionalProperties\": false\n}\n```\n\n----------------------------------------\n\nTITLE: Defining BlockSynchronizerStatus and BlockSyncStatus Schemas in JSON\nDESCRIPTION: These schemas define the structure for block synchronizer status, including historical and forward block sync information.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/condor/jsonrpc-comp/rpc-2.0/schema/components.json.md#2025-04-22_snippet_80\n\nLANGUAGE: JSON\nCODE:\n```\n\"BlockSynchronizerStatus\": {\n    \"description\": \"The status of the block synchronizer.\",\n    \"type\": \"object\",\n    \"properties\": {\n        \"historical\": {\n            \"description\": \"The status of syncing a historical block, if any.\",\n            \"anyOf\": [\n                {\n                    \"$ref\": \"#/components/schemas/BlockSyncStatus\"\n                },\n                {\n                    \"type\": \"null\"\n                }\n            ]\n        },\n        \"forward\": {\n            \"description\": \"The status of syncing a forward block, if any.\",\n            \"anyOf\": [\n                {\n                    \"$ref\": \"#/components/schemas/BlockSyncStatus\"\n                },\n                {\n                    \"type\": \"null\"\n                }\n            ]\n        }\n    },\n    \"additionalProperties\": false\n},\n\"BlockSyncStatus\": {\n    \"description\": \"The status of syncing an individual block.\",\n    \"type\": \"object\",\n    \"required\": [\n        \"acquisition_state\",\n        \"block_hash\"\n    ],\n    \"properties\": {\n        \"block_hash\": {\n            \"description\": \"The block hash.\",\n            \"allOf\": [\n                {\n                    \"$ref\": \"#/components/schemas/BlockHash\"\n                }\n            ]\n        },\n        \"block_height\": {\n            \"description\": \"The height of the block, if known.\",\n            \"type\": [\n                \"integer\",\n                \"null\"\n            ],\n            \"format\": \"uint64\",\n            \"minimum\": 0.0\n        },\n        \"acquisition_state\": {\n            \"description\": \"The state of acquisition of the data associated with the block.\",\n            \"type\": \"string\"\n        }\n    },\n    \"additionalProperties\": false\n}\n```\n\n----------------------------------------\n\nTITLE: Building Application for Production (Bash)\nDESCRIPTION: Compiles and bundles the React application for production using the Vite build tool. This process typically optimizes the code, minifies assets, and prepares static files suitable for deployment to a web server.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/docs/developers/dapps/template-frontend.md#2025-04-22_snippet_17\n\nLANGUAGE: bash\nCODE:\n```\nvite build\n```\n\n----------------------------------------\n\nTITLE: Defining JsonValidatorStatusChange Schema in OpenAPI\nDESCRIPTION: Defines the schema for individual validator status changes, specifying the era in which the change occurred and the nature of the status change.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/condor/jsonrpc-comp/rpc-2.0/schema.json.md#2025-04-22_snippet_99\n\nLANGUAGE: json\nCODE:\n```\n\"JsonValidatorStatusChange\": {\n  \"description\": \"A single change to a validator's status in the given era.\",\n  \"type\": \"object\",\n  \"required\": [\n    \"era_id\",\n    \"validator_change\"\n  ],\n  \"properties\": {\n    \"era_id\": {\n      \"description\": \"The era in which the change occurred.\",\n      \"allOf\": [\n        {\n          \"$ref\": \"#/components/schemas/EraId\"\n        }\n      ]\n    },\n    \"validator_change\": {\n      \"description\": \"The change in validator status.\",\n      \"allOf\": [\n        {\n          \"$ref\": \"#/components/schemas/ValidatorChange\"\n        }\n      ]\n    }\n  },\n  \"additionalProperties\": false\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Auction Bid Variants Schema - JSON Schema - JavaScript\nDESCRIPTION: This snippet defines a JSON Schema for auction bid variants, utilizing the \"oneOf\" keyword to enforce that an object matches exactly one of several specified bid record types. It ensures strict validation, as each variant has required properties with references to detailed sub-schemas. Dependencies include a JSON schema validator and schemas for Bid, ValidatorBid, Delegator, Bridge, and ValidatorCredit under \"#/components/schemas/\". Each variant accepts only specified properties, with use cases ranging from legacy unified bids to current validator, delegator, public key bridging, and crediting structures.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/condor/jsonrpc-comp/rpc-2.0/schema/BidKind.json.md#2025-04-22_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\\n    \"description\": \"Auction bid variants.\",\\n    \"oneOf\": [\\n        {\\n            \"description\": \"A unified record indexed on validator data, with an embedded collection of all delegator bids assigned to that validator. The Unified variant is for legacy retrograde support, new instances will not be created going forward.\",\\n            \"type\": \"object\",\\n            \"required\": [\\n                \"Unified\"\\n            ],\\n            \"properties\": {\\n                \"Unified\": {\\n                    \"$ref\": \"#/components/schemas/Bid\"\\n                }\\n            },\\n            \"additionalProperties\": false\\n        },\\n        {\\n            \"description\": \"A bid record containing only validator data.\",\\n            \"type\": \"object\",\\n            \"required\": [\\n                \"Validator\"\\n            ],\\n            \"properties\": {\\n                \"Validator\": {\\n                    \"$ref\": \"#/components/schemas/ValidatorBid\"\\n                }\\n            },\\n            \"additionalProperties\": false\\n        },\\n        {\\n            \"description\": \"A bid record containing only delegator data.\",\\n            \"type\": \"object\",\\n            \"required\": [\\n                \"Delegator\"\\n            ],\\n            \"properties\": {\\n                \"Delegator\": {\\n                    \"$ref\": \"#/components/schemas/Delegator\"\\n                }\\n            },\\n            \"additionalProperties\": false\\n        },\\n        {\\n            \"description\": \"A bridge record pointing to a new `ValidatorBid` after the public key was changed.\",\\n            \"type\": \"object\",\\n            \"required\": [\\n                \"Bridge\"\\n            ],\\n            \"properties\": {\\n                \"Bridge\": {\\n                    \"$ref\": \"#/components/schemas/Bridge\"\\n                }\\n            },\\n            \"additionalProperties\": false\\n        },\\n        {\\n            \"description\": \"Credited amount.\",\\n            \"type\": \"object\",\\n            \"required\": [\\n                \"Credit\"\\n            ],\\n            \"properties\": {\\n                \"Credit\": {\\n                    \"$ref\": \"#/components/schemas/ValidatorCredit\"\\n                }\\n            },\\n            \"additionalProperties\": false\\n        }\\n    ]\\n} \n```\n\n----------------------------------------\n\nTITLE: Running the .NET Application\nDESCRIPTION: Command to execute the compiled .NET application.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/versioned_docs/version-1.5.X/developers/dapps/sdk/csharp-sdk.md#2025-04-22_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\ndotnet run\n```\n\n----------------------------------------\n\nTITLE: Serializing Operation Structure\nDESCRIPTION: Describes the `Operation` structure, representing an operation (Read, Write, Add, NoOp) performed during deploy execution. It contains a `key` (formatted string, serialized as `String`) and a `kind` (OpKind, serialized as a single byte tag: 0=Read, 1=Write, 2=Add, 3=NoOp).\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/versioned_docs/version-2.0.0/concepts/serialization/types.md#2025-04-22_snippet_34\n\nLANGUAGE: text\nCODE:\n```\nAn operation performed while executing a deploy. It contains:\n\n-   `key`: The formatted string of the key, serialized as a [`String`](./primitives.md#clvalue-string).\n\n-   `kind`: OpKind, The type of operation performed. It serializes as a single byte based on the following table:\n\n|OpKind|Serialization|\n|------|-------------|\n|Read  | 0           |\n|Write | 1           |\n|Add   | 2           |\n|NoOp  | 3           |\n```\n\n----------------------------------------\n\nTITLE: Query Balance Schema in JSON\nDESCRIPTION: Schema definition for the query_balance endpoint that allows querying account balances using purse and state identifiers.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/condor/jsonrpc-comp/rpc-1.5/schema.json.md#2025-04-22_snippet_8\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"name\": \"query_balance_example\",\n  \"params\": [\n    {\n      \"name\": \"state_identifier\",\n      \"value\": {\n        \"BlockHash\": \"13c2d7a68ecdd4b74bf4393c88915c836c863fc4bf11d7f2bd930a1bbccacdcb\"\n      }\n    },\n    {\n      \"name\": \"purse_identifier\",\n      \"value\": {\n        \"main_purse_under_account_hash\": \"account-hash-0909090909090909090909090909090909090909090909090909090909090909\"\n      }\n    }\n  ],\n  \"result\": {\n    \"name\": \"query_balance_example_result\",\n    \"value\": {\n      \"api_version\": \"1.5.6\",\n      \"balance\": \"123456\"\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Starting the Casper Node\nDESCRIPTION: Command to start the Casper node launcher service, which activates the node configured to operate within the private network.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/versioned_docs/version-1.5.X/operators/setup-network/create-private.md#2025-04-22_snippet_9\n\nLANGUAGE: sh\nCODE:\n```\nsudo systemctl start casper-node-launcher\n```\n\n----------------------------------------\n\nTITLE: Monitoring Node Status Using CURL - Bash\nDESCRIPTION: Shell command to retrieve node status and metrics using `curl`. Utilize the JSON response to check node health and connection status with endpoints. Parsing JSON data requires `jq` package.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/versioned_docs/version-1.5.X/operators/setup/node-endpoints.md#2025-04-22_snippet_4\n\nLANGUAGE: Bash\nCODE:\n```\ncurl -s http://<node_address>:8888/status | jq\n```\n\n----------------------------------------\n\nTITLE: Installing Casper SDK via .NET CLI\nDESCRIPTION: Cross-platform command to install the Casper Network SDK using the dotnet CLI tool.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/versioned_docs/version-1.5.X/developers/dapps/sdk/csharp-sdk.md#2025-04-22_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\ndotnet add package Casper.Network.SDK\n```\n\n----------------------------------------\n\nTITLE: Defining Validator Status Change Schema in JSON\nDESCRIPTION: This JSON code snippet establishes an object schema for validator status changes, mandating 'public_key' and 'status_changes' fields. It enforces input validation by leveraging type checks and cross-references to other schema components, such as PublicKey and JsonValidatorStatusChange. Inputs must adhere to these definitions and no additional properties are allowed, ensuring strict schema enforcement.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/condor/jsonrpc-comp/rpc-2.0/schema/JsonValidatorChanges.json.md#2025-04-22_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"description\": \"The changes in a validator's status.\",\n    \"type\": \"object\",\n    \"required\": [\n        \"public_key\",\n        \"status_changes\"\n    ],\n    \"properties\": {\n        \"public_key\": {\n            \"description\": \"The public key of the validator.\",\n            \"allOf\": [\n                {\n                    \"$ref\": \"#/components/schemas/PublicKey\"\n                }\n            ]\n        },\n        \"status_changes\": {\n            \"description\": \"The set of changes to the validator's status.\",\n            \"type\": \"array\",\n            \"items\": {\n                \"$ref\": \"#/components/schemas/JsonValidatorStatusChange\"\n            }\n        }\n    },\n    \"additionalProperties\": false\n} \n```\n\n----------------------------------------\n\nTITLE: Disabling Contract on Casper Network via CLI\nDESCRIPTION: Disables a specified contract on the Casper network using its hash and ensuring its functionality is ceased. Requires contract package hash, contract hash, admin's secret key, and session path.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/versioned_docs/version-2.0.0/operators/setup-network/create-private.md#2025-04-22_snippet_20\n\nLANGUAGE: sh\nCODE:\n```\ncasper-client \\\n  put-deploy \\\n  -n $NODE_ADDR \\\n  --chain-name $CHAIN_NAME \\\n  --secret-key admin/secret_key.pem \\\n  --session-account=$(<alice/public_key_hex) \\\n  --session-path disable_contract.wasm \\\n  --payment-amount 3000000000 \\\n  --session-arg \"contract_package_hash:account_hash='account-hash-$CONTRACT_PACKAGE_HASH'\" \\\n  --session-arg \"contract_hash:account_hash='account-hash-$CONTRACT_HASH'\"\n```\n\n----------------------------------------\n\nTITLE: CEP-18 Utility Contract Package Object Response\nDESCRIPTION: This is the expected response when querying a CEP-18 utility contract package. It includes details such as the access key, versions, and the contract hash for further queries.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/versioned_docs/version-2.0.0/resources/tokens/cep18/query.md#2025-04-22_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\n{\n  \"id\": 5359405942597097786,\n  \"jsonrpc\": \"2.0\",\n  \"result\": {\n    \"api_version\": \"1.0.0\",\n    \"block_header\": null,\n    \"merkle_proof\": \"[2048 hex chars]\",\n    \"stored_value\": {\n      \"ContractPackage\": {\n        \"access_key\": \"uref-1b867a3751f505762c69c8d92ba7462818cd0c2a705bb5d4270bce479410ee55-007\",\n        \"disabled_versions\": [],\n        \"groups\": [],\n        \"versions\": [\n          {\n            \"contract_hash\": \"contract-a8fe057675930f0951d45816c55615228ac8af2b7b231788278dffcf1dd8c0ca\",\n            \"contract_version\": 1,\n            \"protocol_version_major\": 1\n          }\n        ]\n      }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Multi-Signature Account Setup\nDESCRIPTION: Account with three keys where associated keys can independently manage the account and send deploys. Requires multiple signatures for updates.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/versioned_docs/version-2.0.0/resources/advanced/multi-sig/other-scenarios.md#2025-04-22_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n\"Account\": {\n   \"account_address\": \"account-hash-a1…\",\n   \"action_thresholds\": {\n      \"deployment\": 2,\n      \"key_management\": 2\n   },\n   \"associated_keys\": [\n      {\n         \"account_address\": \"account-hash-a1…\",\n         \"weight\": 2\n      },\n      {\n         \"account_address\": \"account-hash-b2…\",\n         \"weight\": 1\n      },\n      {\n         \"account_address\": \"account-hash-c3…\",\n         \"weight\": 1\n      }\n   ],\n   \"main_purse\": \"uref-1234…\",\n   \"named_keys\": []\n}\n```\n\n----------------------------------------\n\nTITLE: Checking Casper Node Open Files Limit (Bash)\nDESCRIPTION: Combines `pgrep` and `prlimit` using command substitution (`$()`) to find the `casper-node` PID and immediately display its open files limit (`nofile`) in a single command. Requires `sudo` privileges.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/versioned_docs/version-1.5.X/operators/setup/open-files.md#2025-04-22_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nsudo prlimit -n -p $(pgrep \"casper-node$\")\n```\n\n----------------------------------------\n\nTITLE: Creating a Dictionary in Casper Contract\nDESCRIPTION: Basic example of creating a new dictionary in a Casper smart contract using the storage API. This function creates a dictionary with the specified name and returns the result which should be unwrapped or reverted.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/versioned_docs/version-1.5.X/concepts/dictionaries.md#2025-04-22_snippet_0\n\nLANGUAGE: rust\nCODE:\n```\ncasper_contract::contract_api::storage::new_dictionary(dict_name)\n```\n\n----------------------------------------\n\nTITLE: Calling Contract by Package Name and Version using casper-client (Bash)\nDESCRIPTION: Demonstrates the general syntax for invoking a specific entry point within a specified version of a contract package stored on the Casper Network using the `casper-client put-deploy` command. Key arguments include `--session-package-name`, `--session-entry-point`, and `--session-version`.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/versioned_docs/version-1.5.X/developers/cli/calling-contracts.md#2025-04-22_snippet_12\n\nLANGUAGE: bash\nCODE:\n```\ncasper-client put-deploy \\\n    --node-address [NODE_SERVER_ADDRESS] \\\n    --chain-name [CHAIN_NAME] \\\n    --secret-key [KEY_PATH]/secret_key.pem \\\n    --payment-amount [PAYMENT_AMOUNT_IN_MOTES] \\\n    --session-package-name [NAMED_KEY_FOR_PACKAGE] \\\n    --session-entry-point [ENTRY_POINT_FUNCTION] \\\n    --session-version [INTEGER]\n```\n\n----------------------------------------\n\nTITLE: Defining Deploy Operation Types Enum (JSON Schema)\nDESCRIPTION: This JSON schema defines the possible types for an operation field related to Casper deploy execution. It uses the `oneOf` keyword to enforce that the value must be exactly one of the strings \"Read\", \"Write\", \"Add\", \"NoOp\", or \"Prune\", each representing a distinct operation type.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/condor/jsonrpc-comp/rpc-2.0/schema/OpKind.json.md#2025-04-22_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"description\": \"The type of operation performed while executing a deploy.\",\n    \"oneOf\": [\n        {\n            \"description\": \"A read operation.\",\n            \"type\": \"string\",\n            \"enum\": [\n                \"Read\"\n            ]\n        },\n        {\n            \"description\": \"A write operation.\",\n            \"type\": \"string\",\n            \"enum\": [\n                \"Write\"\n            ]\n        },\n        {\n            \"description\": \"An addition.\",\n            \"type\": \"string\",\n            \"enum\": [\n                \"Add\"\n            ]\n        },\n        {\n            \"description\": \"An operation which has no effect.\",\n            \"type\": \"string\",\n            \"enum\": [\n                \"NoOp\"\n            ]\n        },\n        {\n            \"description\": \"A prune operation.\",\n            \"type\": \"string\",\n            \"enum\": [\n                \"Prune\"\n            ]\n        }\n    ]\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Transaction Schema in JSON\nDESCRIPTION: JSON schema definition for Transaction, which is a versioned wrapper for a deploy or transaction. It includes definitions for Deploy and TransactionV1 types, representing different versions of transactions in the Casper Network.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/condor/jsonrpc-comp/rpc-2.0/schema.json.md#2025-04-22_snippet_32\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"description\": \"A versioned wrapper for a transaction or deploy.\",\n  \"oneOf\": [\n    {\n      \"description\": \"A deploy.\",\n      \"type\": \"object\",\n      \"required\": [\n        \"Deploy\"\n      ],\n      \"properties\": {\n        \"Deploy\": {\n          \"$ref\": \"#/components/schemas/Deploy\"\n        }\n      },\n      \"additionalProperties\": false\n    },\n    {\n      \"description\": \"A version 1 transaction.\",\n      \"type\": \"object\",\n      \"required\": [\n        \"Version1\"\n      ],\n      \"properties\": {\n        \"Version1\": {\n          \"$ref\": \"#/components/schemas/TransactionV1\"\n        }\n      },\n      \"additionalProperties\": false\n    }\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Block Hash Schema using JSON Schema\nDESCRIPTION: Schema definition that describes a cryptographic hash identifier for blocks, inheriting from the Digest schema. The schema enforces that block hashes follow the Digest format while providing block-specific documentation.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/condor/jsonrpc-comp/rpc-1.5/schema/BlockHash.json.md#2025-04-22_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"description\": \"A cryptographic hash identifying a [`Block`](struct.Block.html).\",\n    \"allOf\": [\n        {\n            \"$ref\": \"#/components/schemas/Digest\"\n        }\n    ]\n}\n```\n\n----------------------------------------\n\nTITLE: Empty Array Parameter Example\nDESCRIPTION: Example of the correct format for empty parameters in Casper JSON-RPC calls.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/versioned_docs/version-1.5.X/developers/json-rpc/errors.md#2025-04-22_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n[]\n```\n\n----------------------------------------\n\nTITLE: Defining ContractPackage JSON Schema for Casper Network\nDESCRIPTION: JSON Schema that specifies the structure of a ContractPackage object, which serves as a container for smart contract versions with their security and access control settings. The schema defines required properties including access_key for permission control, versions array for contract implementations, disabled_versions for versioning management, groups for permission sets, and lock_status for deployment restrictions.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/condor/jsonrpc-comp/rpc-1.5/schema/ContractPackage.json.md#2025-04-22_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"description\": \"Contract definition, metadata, and security container.\",\n    \"type\": \"object\",\n    \"required\": [\n        \"access_key\",\n        \"disabled_versions\",\n        \"groups\",\n        \"lock_status\",\n        \"versions\"\n    ],\n    \"properties\": {\n        \"access_key\": {\n            \"$ref\": \"#/components/schemas/URef\"\n        },\n        \"versions\": {\n            \"type\": \"array\",\n            \"items\": {\n                \"$ref\": \"#/components/schemas/ContractVersion\"\n            }\n        },\n        \"disabled_versions\": {\n            \"type\": \"array\",\n            \"items\": {\n                \"$ref\": \"#/components/schemas/DisabledVersion\"\n            }\n        },\n        \"groups\": {\n            \"type\": \"array\",\n            \"items\": {\n                \"$ref\": \"#/components/schemas/Groups\"\n            }\n        },\n        \"lock_status\": {\n            \"$ref\": \"#/components/schemas/ContractPackageStatus\"\n        }\n    },\n    \"additionalProperties\": false\n}\n```\n\n----------------------------------------\n\nTITLE: Listing Casper Network Versions\nDESCRIPTION: A simple list of Casper Network version numbers, presented in a JSON-like format. The versions include 2.0.0 and 1.5.X, with the latter likely indicating the entire 1.5 series of releases.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/scratch.txt#2025-04-22_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\n  \"2.0.0\",\n  \"1.5.X\"\n```\n\n----------------------------------------\n\nTITLE: Configuring Unrestricted Transfers in Casper Private Network\nDESCRIPTION: TOML configuration for disabling unrestricted transfers between regular account purses. When set to false, only administrators can transfer tokens between users.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/versioned_docs/version-2.0.0/operators/setup-network/create-private.md#2025-04-22_snippet_0\n\nLANGUAGE: toml\nCODE:\n```\n[core]\nallow_unrestricted_transfers = false\n```\n\n----------------------------------------\n\nTITLE: Build Output for Casper Smart Contract\nDESCRIPTION: The expected output after successfully building a Casper smart contract to WebAssembly format, showing the compilation and wasm-strip processes.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/docs/resources/advanced/cross-contract.md#2025-04-22_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\ncd contract && cargo build --release --target wasm32-unknown-unknown\n    Finished release [optimized] target(s) in 0.13s\nwasm-strip contract/target/wasm32-unknown-unknown/release/contract.wasm 2>/dev/null | true\n```\n\n----------------------------------------\n\nTITLE: Configuring Unrestricted Transfers in Chainspec\nDESCRIPTION: This TOML snippet shows how to configure unrestricted transfers in the chainspec for a Casper private network, disabling free transfers between regular account purses. Dependencies include defining the 'core' section in the 'chainspec.toml'. There are no params, but the main setting affects account transfer permissions.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/versioned_docs/version-1.5.X/operators/setup-network/create-private.md#2025-04-22_snippet_0\n\nLANGUAGE: toml\nCODE:\n```\n[core]\nallow_unrestricted_transfers = false\n```\n\n----------------------------------------\n\nTITLE: Array Memory Allocation in WebAssembly\nDESCRIPTION: Implements an array memory allocation function in WebAssembly. Handles size calculations, boundary checks, and memory initialization for arrays.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/versioned_docs/version-2.0.0/developers/json-rpc/json-rpc-transactional.md#2025-04-22_snippet_11\n\nLANGUAGE: webassembly\nCODE:\n```\n230041ae95041008230141016a2401230141f4034b0440000b1018230141016b2401000baa0201037f418cb7021008230041206b2202240002400240200141016a2201450d0041e8b20910082000280200220341017422042001200420014b1b22014108200141084b1b2201417f73411f762104024002402003450d0041dca503100820024101360218200220033602142002200041046a2802003602100c010b41d0281008200241003602180b200220012004200241106a230141046a2401230141f4034b0440000b1015230141046b2401024020022802000d0041d8800310082002280204210320002001360200200020033602040c020b41b0b0021008200241086a2802002200418180808078460d0141b8960210082000450d00419c04100800000b41ae95041008230141016a2401230141f4034b0440000b1016230141016b2401000b200241206a24000b\n```\n\n----------------------------------------\n\nTITLE: Serializing RewardedSignatures Structure\nDESCRIPTION: Describes `RewardedSignatures`, a list containing identifiers for finality signatures related to a specific past block. It serializes as a vector of `SingleBlockRewardedSignatures`, where each element corresponds to signatures for an ancestor block (parent, grandparent, etc.).\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/versioned_docs/version-2.0.0/concepts/serialization/types.md#2025-04-22_snippet_42\n\nLANGUAGE: text\nCODE:\n```\nA list of identifiers for finality signatures for a particular past block. It serializes as a vector of `SingleBlockRewardedSignatures` which describes signatures for a single ancestor block. The first entry represents the signatures for the parent block, the second for the parent of the parent, and so on.\n```\n\n----------------------------------------\n\nTITLE: Transaction Response for Contract Installation\nDESCRIPTION: JSON response from the put-transaction command that includes the API version and transaction hash which can be used for transaction verification.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/versioned_docs/version-2.0.0/developers/cli/installing-contracts.md#2025-04-22_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"jsonrpc\": \"2.0\",\n  \"id\": 90342686534145684,\n  \"result\": {\n    \"api_version\": \"2.0.0\",\n    \"transaction_hash\": {\n      \"Version1\": \"49c36616a50962fa5a7dd7901677ae44667fa9f8c542e49eb2284ba2c900bba2\"\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Example of Custom Metadata for CEP-78\nDESCRIPTION: Example of custom metadata conforming to the previously defined custom schema. It includes values for deity name and mythology.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/versioned_docs/version-1.5.X/resources/tokens/cep78/modalities.md#2025-04-22_snippet_3\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"deity_name\": \"Baldur\",\n  \"mythology\": \"Nordic\"\n}\n```\n\n----------------------------------------\n\nTITLE: Downloading and Installing Network Configuration\nDESCRIPTION: Commands to download and install the network configuration file for a new network (`our-network.conf`) onto a node. It first changes to the network configuration directory and then uses `curl` with appropriate options (`-JLO`) to download the file from the hosting server, running the command as the `casper` user.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/versioned_docs/version-1.5.X/operators/setup-network/staging-files-for-new-network.md#2025-04-22_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\ncd /etc/casper/network_configs\nsudo -u casper curl -JLO casper.mydomain.com/our-network/our-network.conf\n\n```\n\n----------------------------------------\n\nTITLE: Installing Global State Update Generator - Casper Network\nDESCRIPTION: Command to install the global-state-update-gen tool for managing network upgrades.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/docs/operators/setup-network/create-private.md#2025-04-22_snippet_25\n\nLANGUAGE: sh\nCODE:\n```\n$ cargo install --git https://github.com/casper-network/casper-node/ --tag private-1.4.6 global-state-update-gen\n$ global-state-update-gen --help\n```\n\n----------------------------------------\n\nTITLE: Staging New Protocol Version\nDESCRIPTION: Command to stage new protocol versions on a node\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/versioned_docs/version-2.0.0/operators/setup-network/staging-files-for-new-network.md#2025-04-22_snippet_9\n\nLANGUAGE: bash\nCODE:\n```\nsudo -u casper /etc/casper/node_util.py stage_protocols <network.conf>\n```\n\n----------------------------------------\n\nTITLE: Cloning Casper NFT Repository\nDESCRIPTION: Commands to clone the CEP-78 Enhanced NFT contract repository and navigate to the project directory.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/versioned_docs/version-1.5.X/resources/tokens/cep78/using-casper-client/quickstart-guide.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ngit clone https://github.com/casper-ecosystem/cep-78-enhanced-nft/ && cd cep-78-enhanced-nft\n```\n\n----------------------------------------\n\nTITLE: Configuring Host Function Costs in Casper Network\nDESCRIPTION: Configuration for host-side function costs in the Casper Network. This YAML-formatted configuration sets the base cost and argument costs for external functions used in smart contracts, including operations for key management, contract manipulation, and account transfers.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/versioned_docs/version-1.5.X/operators/setup-network/chain-spec.md#2025-04-22_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\n- add = { cost = 5_800, arguments = [0, 0, 0, 0] }\n- add_associated_key = { cost = 9_000, arguments = [0, 0, 0] }\n- add_contract_version = { cost = 200, arguments = [0, 0, 0, 0, 0, 0, 0, 0, 0, 0] }\n- blake2b = { cost = 200, arguments = [0, 0, 0, 0] }\n- call_contract = { cost = 4_500, arguments = [0, 0, 0, 0, 0, 420, 0] }\n- call_versioned_contract = { cost = 4_500, arguments = [0, 0, 0, 0, 0, 0, 0, 420, 0] }\n- create_contract_package_at_hash = { cost = 200, arguments = [0, 0] }\n- create_contract_user_group = { cost = 200, arguments = [0, 0, 0, 0, 0, 0, 0, 0] }\n- create_purse = { cost = 2_500_000_000, arguments = [0, 0] }\n- disable_contract_version = { cost = 200, arguments = [0, 0, 0, 0] }\n- get_balance = { cost = 3_800, arguments = [0, 0, 0] }\n- get_blocktime = { cost = 330, arguments = [0] }\n- get_caller = { cost = 380, arguments = [0] }\n- get_key = { cost = 2_000, arguments = [0, 440, 0, 0, 0] }\n- get_main_purse = { cost = 1_300, arguments = [0] }\n- get_named_arg = { cost = 200, arguments = [0, 0, 0, 0] }\n- get_named_arg_size = { cost = 200, arguments = [0, 0, 0] }\n- get_phase = { cost = 710, arguments = [0] }\n- get_system_contract = { cost = 1_100, arguments = [0, 0, 0] }\n- has_key = { cost = 1_500, arguments = [0, 840] }\n- is_valid_uref = { cost = 760, arguments = [0, 0] }\n- load_named_keys = { cost = 42_000, arguments = [0, 0] }\n- new_uref = { cost = 17_000, arguments = [0, 0, 590] }\n- random_bytes = { cost = 200, arguments = [0, 0] }\n- print = { cost = 20_000, arguments = [0, 4_600] }\n- provision_contract_user_group_uref = { cost = 200, arguments = [0, 0, 0, 0, 0] }\n- put_key = { cost = 38_000, arguments = [0, 1_100, 0, 0] }\n- read_host_buffer = { cost = 3_500, arguments = [0, 310, 0] }\n- read_value = { cost = 6_000, arguments = [0, 0, 0] }\n- read_value_local = { cost = 5_500, arguments = [0, 590, 0] }\n- remove_associated_key = { cost = 4_200, arguments = [0, 0] }\n- remove_contract_user_group = { cost = 200, arguments = [0, 0, 0, 0] }\n- remove_contract_user_group_urefs = { cost = 200, arguments = [0, 0, 0, 0, 0, 0] }\n- remove_key = { cost = 61_000, arguments = [0, 3_200] }\n- ret = { cost = 23_000, arguments = [0, 420_000] }\n- revert = { cost = 500, arguments = [0] }\n- set_action_threshold = { cost = 74_000, arguments = [0, 0] }\n- transfer_from_purse_to_account = { cost = 2_500_000_000, arguments = [0, 0, 0, 0, 0, 0, 0, 0, 0] }\n- transfer_from_purse_to_purse = { cost = 82_000, arguments = [0, 0, 0, 0, 0, 0, 0, 0] }\n- transfer_to_account = { cost = 2_500_000_000, arguments = [0, 0, 0, 0, 0, 0, 0] }\n- update_associated_key = { cost = 4_200, arguments = [0, 0, 0] }\n- write = { cost = 14_000, arguments = [0, 0, 0, 980] }\n- write_local = { cost = 9_500, arguments = [0, 1_800, 0, 520] }\n```\n\n----------------------------------------\n\nTITLE: Defining AddUInt256 Object\nDESCRIPTION: This schema defines an object for adding a `U256` value. It requires a `AddUInt256` property which references the `U256` schema. No additional properties are allowed.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/condor/jsonrpc-comp/rpc-1.5/schema/components.json.md#2025-04-22_snippet_20\n\nLANGUAGE: JSON\nCODE:\n```\n{\\n    \\\"description\\\": \\\"Adds the given `U256`.\\\",\\n    \\\"type\\\": \\\"object\\\",\\n    \\\"required\\\": [\\n        \\\"AddUInt256\\\"\\n    ],\\n    \\\"properties\\\": {\\n        \\\"AddUInt256\\\": {\\n            \\\"$ref\\\": \\\"#/components/schemas/U256\\\"\\n        }\\n    },\\n    \\\"additionalProperties\\\": false\\n}\n```\n\n----------------------------------------\n\nTITLE: Querying Block Transfers with chain_get_block_transfers Request\nDESCRIPTION: JSON-RPC request to retrieve all successful native transfers within a specific block using the block hash.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/versioned_docs/version-1.5.X/developers/json-rpc/json-rpc-informational.md#2025-04-22_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n{\n  \"id\": 1,\n  \"jsonrpc\": \"2.0\",\n  \"method\": \"chain_get_block_transfers\",\n  \"params\": [\n    {\n      \"Hash\": \"13c2d7a68ecdd4b74bf4393c88915c836c863fc4bf11d7f2bd930a1bbccacdcb\"\n    }\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Defining EntryPointV2 Schema in JSON\nDESCRIPTION: Defines the schema for EntryPointV2, which represents the entry point for the V2 Casper VM. It includes properties for function_index and flags, both of which are unsigned 32-bit integers.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/condor/jsonrpc-comp/rpc-2.0/schema.json.md#2025-04-22_snippet_72\n\nLANGUAGE: json\nCODE:\n```\n\"EntryPointV2\": {\n  \"description\": \"The entry point for the V2 Casper VM.\",\n  \"type\": \"object\",\n  \"required\": [\n    \"flags\",\n    \"function_index\"\n  ],\n  \"properties\": {\n    \"function_index\": {\n      \"description\": \"The selector.\",\n      \"type\": \"integer\",\n      \"format\": \"uint32\",\n      \"minimum\": 0.0\n    },\n    \"flags\": {\n      \"description\": \"The flags.\",\n      \"type\": \"integer\",\n      \"format\": \"uint32\",\n      \"minimum\": 0.0\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Running the Casper .NET Example\nDESCRIPTION: Command to execute the compiled C# program that retrieves the account balance\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/docs/developers/dapps/sdk/csharp-sdk.md#2025-04-22_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\ndotnet run\n```\n\n----------------------------------------\n\nTITLE: Example of Custom Metadata Using the Custom Validated Schema\nDESCRIPTION: This example shows how the metadata would be structured when using the custom validated schema defined above. It includes the deity_name and mythology fields as specified in the schema.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/versioned_docs/version-2.0.0/resources/tokens/cep78/modalities.md#2025-04-22_snippet_3\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"deity_name\": \"Baldur\",\n  \"mythology\": \"Nordic\"\n}\n```\n\n----------------------------------------\n\nTITLE: Defining BytesreprError Schema in JSON\nDESCRIPTION: Defines the schema for BytesreprError, which represents serialization and deserialization errors. It includes various error types such as EarlyEndOfStream, Formatting, LeftOverBytes, OutOfMemory, NotRepresentable, and ExceededRecursionDepth.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/condor/jsonrpc-comp/rpc-2.0/schema.json.md#2025-04-22_snippet_74\n\nLANGUAGE: json\nCODE:\n```\n\"BytesreprError\": {\n  \"description\": \"Serialization and deserialization errors.\",\n  \"oneOf\": [\n    {\n      \"description\": \"Early end of stream while deserializing.\",\n      \"type\": \"string\",\n      \"enum\": [\n        \"EarlyEndOfStream\"\n      ]\n    },\n    {\n      \"description\": \"Formatting error while deserializing.\",\n      \"type\": \"string\",\n      \"enum\": [\n        \"Formatting\"\n      ]\n    },\n    {\n      \"description\": \"Not all input bytes were consumed in [`deserialize`].\",\n      \"type\": \"string\",\n      \"enum\": [\n        \"LeftOverBytes\"\n      ]\n    },\n    {\n      \"description\": \"Out of memory error.\",\n      \"type\": \"string\",\n      \"enum\": [\n        \"OutOfMemory\"\n      ]\n    },\n    {\n      \"description\": \"No serialized representation is available for a value.\",\n      \"type\": \"string\",\n      \"enum\": [\n        \"NotRepresentable\"\n      ]\n    },\n    {\n      \"description\": \"Exceeded a recursion depth limit.\",\n      \"type\": \"string\",\n      \"enum\": [\n        \"ExceededRecursionDepth\"\n      ]\n    }\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Auction Behavior Configuration\nDESCRIPTION: Configures validator constraints in private networks by disabling new auction bids. Relies on 'core' settings in 'chainspec.toml'.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/versioned_docs/version-1.5.X/operators/setup-network/create-private.md#2025-04-22_snippet_5\n\nLANGUAGE: toml\nCODE:\n```\n[core]\nallow_auction_bids = false\n```\n\n----------------------------------------\n\nTITLE: Declaring View Methods in Near\nDESCRIPTION: This snippet shows how to define a view method in Near that returns data without modifying state. The method includes optional parameters and returns a vector of custom objects.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/docs/resources/moving-to-casper.md#2025-04-22_snippet_5\n\nLANGUAGE: rust\nCODE:\n```\npub fn get_messages(&self, from_index: Option<U128>, limit: Option<u64>) -> Vec<PostedMessage> { }\n```\n\n----------------------------------------\n\nTITLE: Calculating Base Round Reward in Casper Network\nDESCRIPTION: Formula for determining the maximum amount of CSPR tokens that validators can collectively receive from a proposed block, based on the round issuance rate and current token supply.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/versioned_docs/version-1.5.X/concepts/economics/consensus.md#2025-04-22_snippet_2\n\nLANGUAGE: markdown\nCODE:\n```\nbase_round_reward(i) = round_issuance_rate * supply(i)\n```\n\n----------------------------------------\n\nTITLE: Checking Node Version\nDESCRIPTION: Command to verify Node.js version compatibility for the project.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/docs/developers/dapps/template-frontend.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnode -v\n```\n\n----------------------------------------\n\nTITLE: Defining Delegator Schema for Staking Operations - JSON\nDESCRIPTION: This snippet defines a JSON schema for a Delegator object, specifying the required and optional fields as well as references to other schema types. Dependencies include the existence of schemas for PublicKey, U512, URef, and VestingSchedule in the components section. Required fields include 'bonding_purse', 'delegator_public_key', 'staked_amount', and 'validator_public_key'; the optional 'vesting_schedule' can be either a reference or null. The schema is type 'object', disallows additional properties, and validates Delegator data for API or documentation usage.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/condor/jsonrpc-comp/rpc-2.0/schema/Delegator.json.md#2025-04-22_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"description\": \"Represents a party delegating their stake to a validator (or \\\"delegatee\\\")\",\n    \"type\": \"object\",\n    \"required\": [\n        \"bonding_purse\",\n        \"delegator_public_key\",\n        \"staked_amount\",\n        \"validator_public_key\"\n    ],\n    \"properties\": {\n        \"delegator_public_key\": {\n            \"$ref\": \"#/components/schemas/PublicKey\"\n        },\n        \"staked_amount\": {\n            \"$ref\": \"#/components/schemas/U512\"\n        },\n        \"bonding_purse\": {\n            \"$ref\": \"#/components/schemas/URef\"\n        },\n        \"validator_public_key\": {\n            \"$ref\": \"#/components/schemas/PublicKey\"\n        },\n        \"vesting_schedule\": {\n            \"anyOf\": [\n                {\n                    \"$ref\": \"#/components/schemas/VestingSchedule\"\n                },\n                {\n                    \"type\": \"null\"\n                }\n            ]\n        }\n    },\n    \"additionalProperties\": false\n} \n```\n\n----------------------------------------\n\nTITLE: Defining ValidatorChange Schema in OpenAPI\nDESCRIPTION: Defines the schema for possible validator status changes, including being added, removed, banned, or restricted from proposing new blocks.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/condor/jsonrpc-comp/rpc-2.0/schema.json.md#2025-04-22_snippet_100\n\nLANGUAGE: json\nCODE:\n```\n\"ValidatorChange\": {\n  \"description\": \"A change to a validator's status between two eras.\",\n  \"oneOf\": [\n    {\n      \"description\": \"The validator got newly added to the validator set.\",\n      \"type\": \"string\",\n      \"enum\": [\n        \"Added\"\n      ]\n    },\n    {\n      \"description\": \"The validator was removed from the validator set.\",\n      \"type\": \"string\",\n      \"enum\": [\n        \"Removed\"\n      ]\n    },\n    {\n      \"description\": \"The validator was banned from this era.\",\n      \"type\": \"string\",\n      \"enum\": [\n        \"Banned\"\n      ]\n    },\n    {\n      \"description\": \"The validator was excluded from proposing new blocks in this era.\",\n      \"type\": \"string\",\n      \"enum\": [\n        \"CannotPropose\"\n      ]\n    }\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Defining a Panic `main` Function for Rust Tests\nDESCRIPTION: Implements a basic `main` function within the test file (`integration-tests.rs`). This function immediately panics with a message instructing the user to use `cargo test` instead of `cargo run`, preventing accidental direct execution of the test binary.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/versioned_docs/version-1.5.X/developers/writing-onchain-code/testing-session-code.md#2025-04-22_snippet_1\n\nLANGUAGE: rust\nCODE:\n```\nfn main() {\n panic!(\"Execute \\\"cargo test\\\" to test the contract, not \\\"cargo run\\\".\");\n}\n```\n\n----------------------------------------\n\nTITLE: Husky Pre-commit Script - Shell\nDESCRIPTION: A shell script to be used as the pre-commit hook, compatible with Husky's hook runner. It sources the Husky setup utility and runs 'npm run commit'. Requires a Unix-like shell environment, Husky's helper script, and npm installed. The script ensures Git pre-commit hooks automatically initiate the commit process via NPM.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/README/DEVELOPERS.md#2025-04-22_snippet_8\n\nLANGUAGE: sh\nCODE:\n```\n#!/bin/sh\n.  \"$(dirname \"$0\")/_/husky.sh\"\nnpm run commit\n```\n\n----------------------------------------\n\nTITLE: Installing pkg-config on Linux\nDESCRIPTION: Command to install pkg-config utility on Linux using apt.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/versioned_docs/version-1.5.X/developers/dapps/setup-nctl.md#2025-04-22_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nsudo apt install pkg-config\n```\n\n----------------------------------------\n\nTITLE: Defining chain_get_era_info_by_switch_block RPC Schema\nDESCRIPTION: JSON schema definition for the chain_get_era_info_by_switch_block RPC endpoint that returns era information from the Casper network. Includes parameter definitions, response schema with API version and era summary, and a complete example with delegator and validator seigniorage allocations.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/condor/jsonrpc-comp/rpc-1.5/chain_get_era_info_by_switch_block.json.md#2025-04-22_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"name\": \"chain_get_era_info_by_switch_block\",\n  \"summary\": \"returns an EraInfo from the network\",\n  \"params\": [\n    {\n      \"name\": \"block_identifier\",\n      \"schema\": {\n        \"description\": \"The block identifier.\",\n        \"$ref\": \"#/components/schemas/BlockIdentifier\"\n      },\n      \"required\": false\n    }\n  ],\n  \"result\": {\n    \"name\": \"chain_get_era_info_by_switch_block_result\",\n    \"schema\": {\n      \"description\": \"Result for \\\"chain_get_era_info\\\" RPC response.\",\n      \"type\": \"object\",\n      \"required\": [\n        \"api_version\"\n      ],\n      \"properties\": {\n        \"api_version\": {\n          \"description\": \"The RPC API version.\",\n          \"type\": \"string\"\n        },\n        \"era_summary\": {\n          \"description\": \"The era summary.\",\n          \"anyOf\": [\n            {\n              \"$ref\": \"#/components/schemas/EraSummary\"\n            },\n            {\n              \"type\": \"null\"\n            }\n          ]\n        }\n      },\n      \"additionalProperties\": false\n    }\n  },\n  \"examples\": [\n    {\n      \"name\": \"chain_get_era_info_by_switch_block_example\",\n      \"params\": [\n        {\n          \"name\": \"block_identifier\",\n          \"value\": {\n            \"Hash\": \"13c2d7a68ecdd4b74bf4393c88915c836c863fc4bf11d7f2bd930a1bbccacdcb\"\n          }\n        }\n      ],\n      \"result\": {\n        \"name\": \"chain_get_era_info_by_switch_block_example_result\",\n        \"value\": {\n          \"api_version\": \"1.5.6\",\n          \"era_summary\": {\n            \"block_hash\": \"13c2d7a68ecdd4b74bf4393c88915c836c863fc4bf11d7f2bd930a1bbccacdcb\",\n            \"era_id\": 42,\n            \"stored_value\": {\n              \"EraInfo\": {\n                \"seigniorage_allocations\": [\n                  {\n                    \"Delegator\": {\n                      \"delegator_public_key\": \"01e1b46a25baa8a5c28beb3c9cfb79b572effa04076f00befa57eb70b016153f18\",\n                      \"validator_public_key\": \"012a1732addc639ea43a89e25d3ad912e40232156dcaa4b9edfc709f43d2fb0876\",\n                      \"amount\": \"1000\"\n                    }\n                  },\n                  {\n                    \"Validator\": {\n                      \"validator_public_key\": \"012a1732addc639ea43a89e25d3ad912e40232156dcaa4b9edfc709f43d2fb0876\",\n                      \"amount\": \"2000\"\n                    }\n                  }\n                ]\n              }\n            },\n            \"state_root_hash\": \"0808080808080808080808080808080808080808080808080808080808080808\",\n            \"merkle_proof\": \"01000000006ef2e0949ac76e55812421f755abe129b6244fe7168b77f47a72536147614625016ef2e0949ac76e55812421f755abe129b6244fe7168b77f47a72536147614625000000003529cde5c621f857f75f3810611eb4af3f998caaa9d4a3413cf799f99c67db0307010000006ef2e0949ac76e55812421f755abe129b6244fe7168b77f47a7253614761462501010102000000006e06000000000074769d28aac597a36a03a932d4b43e4f10bf0403ee5c41dd035102553f5773631200b9e173e8f05361b681513c14e25e3138639eb03232581db7557c9e8dbbc83ce94500226a9a7fe4f2b7b88d5103a4fc7400f02bf89c860c9ccdd56951a2afe9be0e0267006d820fb5676eb2960e15722f7725f3f8f41030078f8b2e44bf0dc03f71b176d6e800dc5ae9805068c5be6da1a90b2528ee85db0609cc0fb4bd60bbd559f497a98b67f500e1e3e846592f4918234647fca39830b7e1e6ad6f5b7a99b39af823d82ba1873d000003000000010186ff500f287e9b53f823ae1582b1fa429dfede28015125fd233a31ca04d5012002015cc42669a55467a1fdf49750772bfc1aed59b9b085558eb81510e9b015a7c83b0301e3cf4a34b1db6bfa58808b686cb8fe21ebe0c1bcbcee522649d2b135fe510fe3\"\n          }\n        }\n      }\n    }\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Activating Bid via System Auction Contract\nDESCRIPTION: This Bash snippet shows how to activate a bid on the Casper Network using the 'activate_bid' entry point of the system auction contract. It requires specifying parameters like node address, secret key, chain name, payment amount, and session hash.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/docs/operators/becoming-a-validator/recovering.md#2025-04-22_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nsudo -u casper casper-client put-deploy \\\n--node-address <HOST:PORT> \\\n--secret-key <PATH> \\\n--chain-name <CHAIN_NAME> \\\n--payment-amount <PAYMENT_AMOUNT_IN_MOTES> \\\n--session-hash <SESSION_HASH> \\\n--session-entry-point activate_bid \\\n--session-arg \"validator:public_key='$(cat /etc/casper/validator_keys/public_key_hex)'\"\n```\n\n----------------------------------------\n\nTITLE: JSON-RPC Response for Block Information Query in Casper Network\nDESCRIPTION: This JSON-RPC response shows the structure of the data returned when querying block information from the Casper Network. It includes detailed information about the block, such as its hash, header, and proofs.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/docs/resources/beginner/querying-network.md#2025-04-22_snippet_11\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"id\": 3,\n    \"jsonrpc\": \"2.0\",\n    \"result\": {\n        \"api_version\": \"1.0.0\",\n        \"block\": {\n            \"body\": {\n                \"deploy_hashes\": [],\n                \"proposer\": \"012c6775c0e9e09f93b9450f1c5348c5f6b97895b0f52bb438f781f96ba2675a94\",\n                \"transfer_hashes\": [\"ec2d477a532e00b08cfa9447b7841a645a27d34ee12ec55318263617e5740713\"]\n            },\n            \"hash\": \"7c7e9b0f087bba5ce6fc4bd067b57f69ea3c8109157a3ad7f6d98b8da77d97f9\",\n            \"header\": {\n                \"accumulated_seed\": \"50b8ac019b7300cd1fdeec050310e61b900e9238aa879929745900a91bd0fc4f\",\n                \"body_hash\": \"224076b19c04279ae9b97f620801d5ff40ba64f431fe0d5089ef7cb84fdff45a\",\n                \"era_end\": null,\n                \"era_id\": 0,\n                \"height\": 8,\n                \"parent_hash\": \"416f339c4c2ff299c64a4b3271c5ef2ac2297bb40a477ceacce1483451a4db16\",\n                \"protocol_version\": \"1.0.0\",\n                \"random_bit\": true,\n                \"state_root_hash\": \"cfdbf775b6671de3787cfb1f62f0c5319605a7c1711d6ece4660b37e57e81aa3\",\n                \"timestamp\": \"2021-04-20T18:04:42.368Z\"\n            },\n            \"proofs\": [\n                {\n                    \"public_key\": \"010f50b0116f213ef65b99d1bd54483f92bf6131de2f8aceb7e3f825a838292150\",\n                    \"signature\": \"130 chars\"\n                },\n                {\n                    \"public_key\": \"012c6775c0e9e09f93b9450f1c5348c5f6b97895b0f52bb438f781f96ba2675a94\",\n                    \"signature\": \"130 chars\"\n                },\n                {\n                    \"public_key\": \"018d5da83f22c9b65cdfdf9f9fdf9f7c98aa2b8c7bcf14bf855177bbb9c1ac7f0a\",\n                    \"signature\": \"130 chars\"\n                },\n                {\n                    \"public_key\": \"01b9088b92c8a8d592f6ec8c3e8153d7c55fc0c38b5999a214e37e73a2edd6fe0f\",\n                    \"signature\": \"130 chars\"\n                },\n                {\n                    \"public_key\": \"01b9e3484d96d5693e6c5fe789e7b28972aa392b054a76d175f079692967f604de\",\n                    \"signature\": \"130 chars\"\n                }\n            ]\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Query Component for Smart Contract Data Retrieval\nDESCRIPTION: This bash command creates a new file 'Query.jsx' in the 'src' directory, which will contain the component responsible for querying data from the Casper blockchain.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/versioned_docs/version-1.5.X/developers/dapps/template-frontend.md#2025-04-22_snippet_9\n\nLANGUAGE: bash\nCODE:\n```\ntouch src/Query.jsx\n```\n\n----------------------------------------\n\nTITLE: Defining AvailableBlockRange Schema in OpenAPI\nDESCRIPTION: Defines the schema for an unbroken, inclusive range of blocks, specifying the lower and upper bounds as unsigned 64-bit integers.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/condor/jsonrpc-comp/rpc-2.0/schema.json.md#2025-04-22_snippet_94\n\nLANGUAGE: json\nCODE:\n```\n\"AvailableBlockRange\": {\n  \"description\": \"An unbroken, inclusive range of blocks.\",\n  \"type\": \"object\",\n  \"required\": [\n    \"high\",\n    \"low\"\n  ],\n  \"properties\": {\n    \"low\": {\n      \"description\": \"The inclusive lower bound of the range.\",\n      \"type\": \"integer\",\n      \"format\": \"uint64\",\n      \"minimum\": 0.0\n    },\n    \"high\": {\n      \"description\": \"The inclusive upper bound of the range.\",\n      \"type\": \"integer\",\n      \"format\": \"uint64\",\n      \"minimum\": 0.0\n    }\n  },\n  \"additionalProperties\": false\n}\n```\n\n----------------------------------------\n\nTITLE: Disabling Casper Network Account via Shell Command\nDESCRIPTION: Disables Alice's account on Casper network using Casper client by setting action thresholds. Requires admin secret key and session path. Ensures Alice cannot execute deploys until re-enabled.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/versioned_docs/version-2.0.0/operators/setup-network/create-private.md#2025-04-22_snippet_17\n\nLANGUAGE: sh\nCODE:\n```\ncasper-client \\\n  put-deploy \\\n  -n $NODE_ADDR \\\n  --chain-name $CHAIN_NAME \\\n  --secret-key admin/secret_key.pem \\\n  --session-account=alice/public_key_hex\n  --session-path set_action_thresholds.wasm \\\n  --payment-amount=2500000000 \\\n  --session-arg \"key_management_threshold:u8='255'\" \\\n  --session-arg \"deploy_threshold:u8='255'\"\n```\n\n----------------------------------------\n\nTITLE: Empty Object Parameter Example\nDESCRIPTION: Alternative correct format for empty parameters in Casper JSON-RPC calls.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/versioned_docs/version-1.5.X/developers/json-rpc/errors.md#2025-04-22_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{}\n```\n\n----------------------------------------\n\nTITLE: Defining Withdraw Purse Schema in JSON\nDESCRIPTION: This snippet defines a JSON schema for a withdraw purse, which is a legacy structure in the context of the Casper network. It specifies mandatory fields such as amount, bonding purse, and various public keys using advanced referencing to other component schemas. This ensures type consistency across the schema with references to URef, PublicKey, EraId, and U512 components.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/condor/jsonrpc-comp/rpc-1.5/schema/WithdrawPurse.json.md#2025-04-22_snippet_0\n\nLANGUAGE: JSON\nCODE:\n```\n{\n    \"description\": \"A withdraw purse, a legacy structure.\",\n    \"type\": \"object\",\n    \"required\": [\n        \"amount\",\n        \"bonding_purse\",\n        \"era_of_creation\",\n        \"unbonder_public_key\",\n        \"validator_public_key\"\n    ],\n    \"properties\": {\n        \"bonding_purse\": {\n            \"description\": \"Bonding Purse\",\n            \"allOf\": [\n                {\n                    \"$ref\": \"#/components/schemas/URef\"\n                }\n            ]\n        },\n        \"validator_public_key\": {\n            \"description\": \"Validators public key.\",\n            \"allOf\": [\n                {\n                    \"$ref\": \"#/components/schemas/PublicKey\"\n                }\n            ]\n        },\n        \"unbonder_public_key\": {\n            \"description\": \"Unbonders public key.\",\n            \"allOf\": [\n                {\n                    \"$ref\": \"#/components/schemas/PublicKey\"\n                }\n            ]\n        },\n        \"era_of_creation\": {\n            \"description\": \"Era in which this unbonding request was created.\",\n            \"allOf\": [\n                {\n                    \"$ref\": \"#/components/schemas/EraId\"\n                }\n            ]\n        },\n        \"amount\": {\n            \"description\": \"Unbonding Amount.\",\n            \"allOf\": [\n                {\n                    \"$ref\": \"#/components/schemas/U512\"\n                }\n            ]\n        }\n    },\n    \"additionalProperties\": false\n}\n```\n\n----------------------------------------\n\nTITLE: Querying Account Information with state_get_account_info in Casper Network\nDESCRIPTION: This example demonstrates how to request account information from the Casper Network using the state_get_account_info JSON-RPC method. The request identifies the block by its hash and includes the public key of the account.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/versioned_docs/version-1.5.X/developers/json-rpc/json-rpc-informational.md#2025-04-22_snippet_16\n\nLANGUAGE: bash\nCODE:\n```\n{\n  \"id\": 1,\n  \"jsonrpc\": \"2.0\",\n  \"method\": \"state_get_account_info\",\n  \"params\": [\n    {\n      \"Hash\": \"13c2d7a68ecdd4b74bf4393c88915c836c863fc4bf11d7f2bd930a1bbccacdcb\"\n    },\n    \"013b6a27bcceb6a42d62a3a8d02a6f0d73653215771de243a63ac048a18b59da29\"\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Querying the Counter Value in Bash\nDESCRIPTION: Command to retrieve the specific count value from the deployed counter contract using the query path argument.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/versioned_docs/version-1.5.X/resources/beginner/counter/walkthrough.md#2025-04-22_snippet_9\n\nLANGUAGE: bash\nCODE:\n```\ncasper-client query-global-state --node-address http://localhost:11101 \\\n    --state-root-hash [STATE_ROOT_HASH] \\\n    --key [ACCOUNT_HASH] -q \"counter/count\"\n```\n\n----------------------------------------\n\nTITLE: Adding casper-client crate to Rust project - Rust/TOML\nDESCRIPTION: Adds the casper-client crate as a dependency in Cargo.toml for Rust projects. No parameters required; copy this snippet to your Cargo.toml file to include the Casper client. Required for compiling and using the Rust SDK.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/versioned_docs/version-1.5.X/developers/dapps/sdk/client-library-usage.md#2025-04-22_snippet_2\n\nLANGUAGE: toml\nCODE:\n```\n[dependencies]\ncasper-client=\"1.5.1\"\n```\n\n----------------------------------------\n\nTITLE: Defining JSON Schema\nDESCRIPTION: Defines a JSON schema object for a 'weighted public key'. It includes two main properties: 'account_hash' and 'weight', both of which reference other schemas for validation. The snippet sets requirements and descriptions for these properties, ensuring proper structure and validation.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/condor/jsonrpc-comp/rpc-2.0/schema/AssociatedKey.json.md#2025-04-22_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"description\": \"A weighted public key.\",\n    \"type\": \"object\",\n    \"required\": [\n        \"account_hash\",\n        \"weight\"\n    ],\n    \"properties\": {\n        \"account_hash\": {\n            \"description\": \"The account hash of the public key.\",\n            \"allOf\": [\n                {\n                    \"$ref\": \"#/components/schemas/AccountHash\"\n                }\n            ]\n        },\n        \"weight\": {\n            \"description\": \"The weight assigned to the public key.\",\n            \"allOf\": [\n                {\n                    \"$ref\": \"#/components/schemas/AccountAssociatedKeyWeight\"\n                }\n            ]\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Sample JSON Response for Node Status - JSON\nDESCRIPTION: A sample JSON response illustrating key node metrics such as API version, peers connected, and block information. Useful for parsing node status.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/versioned_docs/version-1.5.X/operators/setup/node-endpoints.md#2025-04-22_snippet_5\n\nLANGUAGE: JSON\nCODE:\n```\n{\n  \"api_version\": \"1.4.15\",\n  \"chainspec_name\": \"casper-test\",\n  \"starting_state_root_hash\": \"4c3856bd6a95b566301b9da61aaf84589a51ee2980f3cc7bbef78e7745386955\",\n  \"peers\": [\n    {\n      \"node_id\": \"tls:007e..e14b\",\n      \"address\": \"89.58.52.245:35000\"\n    }\n  ],\n  \"last_added_block_info\": {\n    \"hash\": \"7acd2f48b573704e96eab54322f7e91a0624252baca3583ad2aae38229fe1715\",\n    \"timestamp\": \"2023-05-10T09:20:10.752Z\",\n    \"era_id\": 9085,\n    \"height\": 1711254,\n    \"state_root_hash\": \"1ac74071c1e76937c372c8d2ae22ea036a77578aad03821ec98021fdc1c5d06b\",\n    \"creator\": \"0106ca7c39cd272dbf21a86eeb3b36b7c26e2e9b94af64292419f7862936bca2ca\"\n  },\n  \"our_public_signing_key\": \"0107cba5b4826a87ddbe0ba8cda8064881b75882f05094c1a5f95e957512a3450e\",\n  \"round_length\": \"32s 768ms\",\n  \"next_upgrade\": null,\n  \"build_version\": \"1.4.15-039d438f2-casper-mainnet\",\n  \"uptime\": \"5days 13h 46m 54s 520ms\"\n}\n```\n\n----------------------------------------\n\nTITLE: Querying Deploy Information via Casper Node JSON-RPC in JSON\nDESCRIPTION: This snippet provides an example JSON-RPC 2.0 request and response for the \"info_get_deploy\" method, illustrating how to fetch the status and results of a specific deploy from a Casper network node by deploy hash. It covers usage with the optional 'finalized_approvals' parameter, and demonstrates the returned structure including the deploy object, execution_results, API version, and related block data. Requirements include a known deploy hash and access to a node; responses may contain multiple execution results and block details depending on deployment history.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/condor/jsonrpc-comp/rpc-1.5/schema.json.md#2025-04-22_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"method\": \"info_get_deploy\",\n  \"params\": [\n    {\n      \"deploy_hash\": \"5c9b3b099c1378aa8e4a5f07f59ff1fcdc69a83179427c7e67ae0377d94d93fa\"\n    },\n    {\n      \"finalized_approvals\": true\n    }\n  ],\n  \"result\": {\n    \"api_version\": \"1.5.6\",\n    \"deploy\": {\n      \"hash\": \"5c9b3b099c1378aa8e4a5f07f59ff1fcdc69a83179427c7e67ae0377d94d93fa\",\n      \"header\": {\n        \"account\": \"01d9bf2148748a85c89da5aad8ee0b0fc2d105fd39d41a4c796536354f0ae2900c\",\n        \"timestamp\": \"2020-11-17T00:39:24.072Z\",\n        \"ttl\": \"1h\",\n        \"gas_price\": 1,\n        \"body_hash\": \"d53cf72d17278fd47d399013ca389c50d589352f1a12593c0b8e01872a641b50\",\n        \"dependencies\": [\n          \"0101010101010101010101010101010101010101010101010101010101010101\"\n        ],\n        \"chain_name\": \"casper-example\"\n      },\n      \"payment\": {\n        \"StoredContractByName\": {\n          \"name\": \"casper-example\",\n          \"entry_point\": \"example-entry-point\",\n          \"args\": [\n            [\n              \"amount\",\n              {\n                \"cl_type\": \"I32\",\n                \"bytes\": \"e8030000\",\n                \"parsed\": 1000\n              }\n            ]\n          ]\n        }\n      },\n      \"session\": {\n        \"Transfer\": {\n          \"args\": [\n            [\n              \"amount\",\n              {\n                \"cl_type\": \"I32\",\n                \"bytes\": \"e8030000\",\n                \"parsed\": 1000\n              }\n            ]\n          ]\n        }\n      },\n      \"approvals\": [\n        {\n          \"signer\": \"01d9bf2148748a85c89da5aad8ee0b0fc2d105fd39d41a4c796536354f0ae2900c\",\n          \"signature\": \"014c1a89f92e29dd74fc648f741137d9caf4edba97c5f9799ce0c9aa6b0c9b58db368c64098603dbecef645774c05dff057cb1f91f2cf390bbacce78aa6f084007\"\n        }\n      ]\n    },\n    \"execution_results\": [\n      {\n        \"block_hash\": \"13c2d7a68ecdd4b74bf4393c88915c836c863fc4bf11d7f2bd930a1bbccacdcb\",\n        \"result\": {\n          \"Success\": {\n            \"effect\": {\n              \"operations\": [\n                {\n                  \"key\": \"account-hash-2c4a11c062a8a337bfc97e27fd66291caeb2c65865dcb5d3ef3759c4c97efecb\",\n                  \"kind\": \"Write\"\n                },\n                {\n                  \"key\": \"deploy-af684263911154d26fa05be9963171802801a0b6aff8f199b7391eacb8edc9e1\",\n                  \"kind\": \"Read\"\n                }\n              ],\n              \"transforms\": [\n                {\n                  \"key\": \"uref-2c4a11c062a8a337bfc97e27fd66291caeb2c65865dcb5d3ef3759c4c97efecb-007\",\n                  \"transform\": {\n                    \"AddUInt64\": 8\n                  }\n                },\n                {\n                  \"key\": \"deploy-af684263911154d26fa05be9963171802801a0b6aff8f199b7391eacb8edc9e1\",\n                  \"transform\": \"Identity\"\n                }\n              ]\n            },\n            \"transfers\": []\n          }\n        }\n      }\n    ]\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining BlockIdentifier Schema in JSON\nDESCRIPTION: Specifies the schema for BlockIdentifier, which represents possible ways to retrieve a block. It can be identified by either a block hash or a block height.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/condor/jsonrpc-comp/rpc-2.0/schema.json.md#2025-04-22_snippet_77\n\nLANGUAGE: json\nCODE:\n```\n\"BlockIdentifier\": {\n  \"description\": \"Identifier for possible ways to retrieve a block.\",\n  \"oneOf\": [\n    {\n      \"description\": \"Identify and retrieve the block with its hash.\",\n      \"type\": \"object\",\n      \"required\": [\n        \"Hash\"\n      ],\n      \"properties\": {\n        \"Hash\": {\n          \"$ref\": \"#/components/schemas/BlockHash\"\n        }\n      },\n      \"additionalProperties\": false\n    },\n    {\n      \"description\": \"Identify and retrieve the block with its height.\",\n      \"type\": \"object\",\n      \"required\": [\n        \"Height\"\n      ],\n      \"properties\": {\n        \"Height\": {\n          \"type\": \"integer\",\n          \"format\": \"uint64\",\n          \"minimum\": 0.0\n        }\n      },\n      \"additionalProperties\": false\n    }\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Disabling Account Access - Casper Network CLI\nDESCRIPTION: Command to disable an account by setting high action thresholds, preventing the account from executing deploys.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/docs/operators/setup-network/create-private.md#2025-04-22_snippet_19\n\nLANGUAGE: sh\nCODE:\n```\ncasper-client \\\n  put-deploy \\\n  -n $NODE_ADDR \\\n  --chain-name $CHAIN_NAME \\\n  --secret-key admin/secret_key.pem \\\n  --session-account=alice/public_key_hex\n  --session-path set_action_thresholds.wasm \\\n  --payment-amount=2500000000 \\\n  --session-arg \"key_management_threshold:u8='255'\" \\\n  --session-arg \"deploy_threshold:u8='255'\"\n```\n\n----------------------------------------\n\nTITLE: Defining Account Identifier Schema in JSON\nDESCRIPTION: JSON schema that specifies two possible ways to identify an account: either using a public key or an account hash. The schema uses anyOf to allow either option and references external definitions for PublicKey and AccountHash types.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/condor/jsonrpc-comp/rpc-1.5/schema/AccountIdentifier.json.md#2025-04-22_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"description\": \"Identifier of an account.\",\n    \"anyOf\": [\n        {\n            \"description\": \"The public key of an account\",\n            \"allOf\": [\n                {\n                    \"$ref\": \"#/components/schemas/PublicKey\"\n                }\n            ]\n        },\n        {\n            \"description\": \"The account hash of an account\",\n            \"allOf\": [\n                {\n                    \"$ref\": \"#/components/schemas/AccountHash\"\n                }\n            ]\n        }\n    ]\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Execution Transform Journal Schema - JSON\nDESCRIPTION: This JSON snippet defines an object schema for capturing the execution journal from a deploy, including required 'operations' and 'transforms' arrays with each referencing external component schemas. Dependencies include references to 'Operation' and 'TransformEntry' schemas under #/components/schemas. The schema specifies required fields, types, and enforces that no additional, undeclared properties are allowed. Inputs are expected in JSON format conforming to this structure, and outputs are typically used in validation or documentation contexts. Limitations include reliance on the existence and definition of referenced schemas.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/condor/jsonrpc-comp/rpc-1.5/schema/ExecutionEffect.json.md#2025-04-22_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\\n    \\\"description\\\": \\\"The journal of execution transforms from a single deploy.\\\",\\n    \\\"type\\\": \\\"object\\\",\\n    \\\"required\\\": [\\n        \\\"operations\\\",\\n        \\\"transforms\\\"\\n    ],\\n    \\\"properties\\\": {\\n        \\\"operations\\\": {\\n            \\\"description\\\": \\\"The resulting operations.\\\",\\n            \\\"type\\\": \\\"array\\\",\\n            \\\"items\\\": {\\n                \\\"$ref\\\": \\\"#/components/schemas/Operation\\\"\\n            }\\n        },\\n        \\\"transforms\\\": {\\n            \\\"description\\\": \\\"The journal of execution transforms.\\\",\\n            \\\"type\\\": \\\"array\\\",\\n            \\\"items\\\": {\\n                \\\"$ref\\\": \\\"#/components/schemas/TransformEntry\\\"\\n            }\\n        }\\n    },\\n    \\\"additionalProperties\\\": false\\n}\n```\n\n----------------------------------------\n\nTITLE: Installing Rust via rustup Script - Bash\nDESCRIPTION: Downloads and installs Rust using the rustup installer fetched via curl. This command is cross-platform and preferred for most environments. Requires internet connection.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/versioned_docs/version-1.5.X/developers/prerequisites.md#2025-04-22_snippet_8\n\nLANGUAGE: bash\nCODE:\n```\ncurl --proto '=https' --tlsv1.2 -sSf https://sh.rustup.rs | sh\n```\n\n----------------------------------------\n\nTITLE: Defining Validator Changes RPC Schema\nDESCRIPTION: JSON schema defining the response structure for the info_get_validator_changes RPC endpoint, which returns status changes of active validators.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/condor/jsonrpc-comp/rpc-2.0/schema.json.md#2025-04-22_snippet_17\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"description\": \"Result for the \\\"info_get_validator_changes\\\" RPC.\",\n  \"type\": \"object\",\n  \"required\": [\n    \"api_version\",\n    \"changes\"\n  ],\n  \"properties\": {\n    \"api_version\": {\n      \"description\": \"The RPC API version.\",\n      \"type\": \"string\"\n    },\n    \"changes\": {\n      \"description\": \"The validators' status changes.\",\n      \"type\": \"array\",\n      \"items\": {\n        \"$ref\": \"#/components/schemas/JsonValidatorChanges\"\n      }\n    }\n  },\n  \"additionalProperties\": false\n}\n```\n\n----------------------------------------\n\nTITLE: Disabling sync_to_genesis in Config.toml - Plaintext\nDESCRIPTION: This configuration line disables sync_to_genesis in the protocol's Config.toml, causing the node not to download the entire block history from genesis at startup. Best used for validator nodes to optimize performance. Must be manually set; location in Config.toml depends on the protocol version.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/docs/operators/setup/install-node.md#2025-04-22_snippet_12\n\nLANGUAGE: plaintext\nCODE:\n```\nsync_to_genesis = false\n```\n\n----------------------------------------\n\nTITLE: TransformKindV1 Data Structure Definition\nDESCRIPTION: Defines transformation types performed during deploy execution with their serialization values (0-17) and descriptions. Includes operations like writing CLValues, accounts, contracts and numeric additions.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/versioned_docs/version-2.0.0/concepts/serialization/types.md#2025-04-22_snippet_54\n\nLANGUAGE: markdown\nCODE:\n```\n| Transform Type       | Serialization | Description                                                                  |\n|----------------------|---------------|------------------------------------------------------------------------------|\n```\n\n----------------------------------------\n\nTITLE: Ethereum Public Method Declaration\nDESCRIPTION: Example of declaring a public method in an Ethereum smart contract that updates contract state.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/versioned_docs/version-1.5.X/resources/moving-to-casper.md#2025-04-22_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nfunction update_name(string value) public {\n    dapp_name = value;\n}\n```\n\n----------------------------------------\n\nTITLE: Parsing CEP-18 Test Contract NamedKeys in Bash\nDESCRIPTION: This snippet provides a subset of the JSON response from querying the CEP-18 test contract, displaying only the `NamedKeys` part, which includes essential information such as URef identifiers.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/docs/resources/tokens/cep18/query.md#2025-04-22_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\n{\n  \"id\": -1426549275795832481,\n  \"jsonrpc\": \"2.0\",\n  \"result\": {\n    \"api_version\": \"1.0.0\",\n    \"block_header\": null,\n    \"merkle_proof\": \"[3370 hex chars]\",\n    \"stored_value\": {\n      \"Contract\": {\n        \"contract_package_hash\": \"contract-package-015b99020edb40e7e1e2b31a8e104bc226242f960a2d10dc1d91ae3eb6fa41b6\",\n        \"contract_wasm_hash\": \"contract-wasm-7959083a4df983ddcd3a9ae46af092dbf126031181ab2619ddc64db09bde8c27\",\n        \"named_keys\": [\n          {\n            \"key\": \"uref-a46ad389b53715d9991a513c8ca48e1502facc4c563c0700a31e830c4cb8a7d4-007\",\n            \"name\": \"result\"\n          }\n        ],\n        \"protocol_version\": \"1.0.0\"\n      }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Displaying Available Protocol Versions via ls Output\nDESCRIPTION: Shows example output from the `ls /etc/casper` command, indicating installed protocol version directories. This output is used to determine the correct `PROTOCOL` value for subsequent configuration steps.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/versioned_docs/version-1.5.X/operators/setup/install-node.md#2025-04-22_snippet_11\n\nLANGUAGE: text\nCODE:\n```\nPROTOCOL=1_5_2\n```\n\n----------------------------------------\n\nTITLE: Defining Trie and Chunk Related Structures in Rust\nDESCRIPTION: Defines structures related to trie chunking in the Casper network, including TrieOrChunkId, TrieOrChunk, ChunkWithProof, and IndexedMerkleProof.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/docs/concepts/design/networking-protocol.md#2025-04-22_snippet_6\n\nLANGUAGE: rust\nCODE:\n```\nstruct TrieOrChunkId(u64, Digest);\n\nenum TrieOrChunk {\n    Trie(Bytes),\n    ChunkWithProof(ChunkWithProof),\n}\n\nstruct ChunkWithProof {\n    proof: IndexedMerkleProof,\n    chunk: Bytes,\n}\n\nstruct IndexedMerkleProof {\n    index: u64,\n    count: u64,\n    merkle_proof: Vec<Digest>,\n}\n```\n\n----------------------------------------\n\nTITLE: Specification for query_balance RPC Method in Casper Network\nDESCRIPTION: JSON schema defining the query_balance RPC method, which allows querying a purse balance using a purse identifier and an optional state identifier. The example shows how to query a main purse balance under a specific account hash.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/condor/jsonrpc-comp/rpc-2.0/schema.json.md#2025-04-22_snippet_11\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"name\": \"query_balance\",\n  \"summary\": \"query for a balance using a purse identifier and a state identifier\",\n  \"params\": [\n    {\n      \"name\": \"purse_identifier\",\n      \"schema\": {\n        \"description\": \"The identifier to obtain the purse corresponding to balance query.\",\n        \"$ref\": \"#/components/schemas/PurseIdentifier\"\n      },\n      \"required\": true\n    },\n    {\n      \"name\": \"state_identifier\",\n      \"schema\": {\n        \"description\": \"The state identifier used for the query, if none is passed the tip of the chain will be used.\",\n        \"anyOf\": [\n          {\n            \"$ref\": \"#/components/schemas/GlobalStateIdentifier\"\n          },\n          {\n            \"type\": \"null\"\n          }\n        ]\n      },\n      \"required\": false\n    }\n  ],\n  \"result\": {\n    \"name\": \"query_balance_result\",\n    \"schema\": {\n      \"description\": \"Result for \\\"query_balance\\\" RPC response.\",\n      \"type\": \"object\",\n      \"required\": [\n        \"api_version\",\n        \"balance\"\n      ],\n      \"properties\": {\n        \"api_version\": {\n          \"description\": \"The RPC API version.\",\n          \"type\": \"string\"\n        },\n        \"balance\": {\n          \"description\": \"The available balance in motes (total balance - sum of all active holds).\",\n          \"$ref\": \"#/components/schemas/U512\"\n        }\n      }\n    }\n  },\n  \"examples\": [\n    {\n      \"name\": \"query_balance_example\",\n      \"params\": [\n        {\n          \"name\": \"state_identifier\",\n          \"value\": {\n            \"BlockHash\": \"0707070707070707070707070707070707070707070707070707070707070707\"\n          }\n        },\n        {\n          \"name\": \"purse_identifier\",\n          \"value\": {\n            \"main_purse_under_account_hash\": \"account-hash-0909090909090909090909090909090909090909090909090909090909090909\"\n          }\n        }\n      ],\n      \"result\": {\n        \"name\": \"query_balance_example_result\",\n        \"value\": {\n          \"api_version\": \"2.0.0\",\n          \"balance\": \"123456\"\n        }\n      }\n    }\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Example account_put_deploy Result\nDESCRIPTION: Response example showing the result of a successful account_put_deploy request, including the API version and deploy hash.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/versioned_docs/version-1.5.X/developers/json-rpc/json-rpc-transactional.md#2025-04-22_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n{\n  \"id\": 1,\n  \"jsonrpc\": \"2.0\",\n  \"result\": {\n    \"api_version\": \"1.4.13\",\n    \"deploy_hash\": \"5c9b3b099c1378aa8e4a5f07f59ff1fcdc69a83179427c7e67ae0377d94d93fa\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Querying Account State after Key Addition (Bash)\nDESCRIPTION: Retrieves the latest state root hash from the node and then queries the global state using that hash to get the details of a specific account. This is used to inspect the account's associated keys and thresholds after adding a new key. Replace `<STATE_ROOT_HASH>` and `<PRIMARY_ACCOUNT_HASH>` with the actual values.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/docs/resources/advanced/multi-sig/multi-sig-workflow.md#2025-04-22_snippet_20\n\nLANGUAGE: bash\nCODE:\n```\ncasper-client get-state-root-hash --node-address https://node.testnet.casper.network\n```\n\nLANGUAGE: bash\nCODE:\n```\ncasper-client query-global-state \\\n--node-address https://node.testnet.casper.network \\\n--state-root-hash <STATE_ROOT_HASH> \\\n--key account-hash-<PRIMARY_ACCOUNT_HASH>\n```\n\n----------------------------------------\n\nTITLE: Defining Protocol Version Schema using JSON in JavaScript\nDESCRIPTION: This snippet renders a JSON schema that designates the structure of the 'protocol version' for the Casper Platform. The schema enforces that the value be of string type, aiding schema validation libraries and tools. It expects a JSON object with a \"description\" property providing context, and a mandatory \"type\" of \"string\"; it does not validate the format or pattern of the version string itself.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/condor/jsonrpc-comp/rpc-1.5/schema/ProtocolVersion.json.md#2025-04-22_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"description\": \"Casper Platform protocol version\",\n    \"type\": \"string\"\n} \n```\n\n----------------------------------------\n\nTITLE: Performing Dictionary Lookup via Unique Key in Casper Network using CLI\nDESCRIPTION: This command uses the casper-client to retrieve a dictionary item from the Casper Network. It requires the node address, state root hash, and the dictionary address of the item. The dictionary address should be in the format 'dictionary-<string>'.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/versioned_docs/version-1.5.X/concepts/dictionaries.md#2025-04-22_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\ncasper-client get-dictionary-item \\\n    --node-address http://localhost:11101 \\\n    --state-root-hash 50c34ccbe1315d58ce22bf7518071164d16acd20a1becb0b423293418297416d \\\n    --dictionary-address dictionary-<string>\n```\n\n----------------------------------------\n\nTITLE: Handling Serialization/Deserialization Errors in JSON\nDESCRIPTION: This JSON snippet defines a schema for serialization and deserialization errors. It includes various error types such as 'EarlyEndOfStream', 'Formatting', 'LeftOverBytes', 'OutOfMemory', 'NotRepresentable', and 'ExceededRecursionDepth'. Each error is described for documentation and reference in handling specific error scenarios. There are no external dependencies, and inputs/outputs are error type strings.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/condor/jsonrpc-comp/rpc-2.0/schema/BytesreprError.json.md#2025-04-22_snippet_0\n\nLANGUAGE: JSON\nCODE:\n```\n{\n    \"description\": \"Serialization and deserialization errors.\",\n    \"oneOf\": [\n        {\n            \"description\": \"Early end of stream while deserializing.\",\n            \"type\": \"string\",\n            \"enum\": [\n                \"EarlyEndOfStream\"\n            ]\n        },\n        {\n            \"description\": \"Formatting error while deserializing.\",\n            \"type\": \"string\",\n            \"enum\": [\n                \"Formatting\"\n            ]\n        },\n        {\n            \"description\": \"Not all input bytes were consumed in [`deserialize`].\",\n            \"type\": \"string\",\n            \"enum\": [\n                \"LeftOverBytes\"\n            ]\n        },\n        {\n            \"description\": \"Out of memory error.\",\n            \"type\": \"string\",\n            \"enum\": [\n                \"OutOfMemory\"\n            ]\n        },\n        {\n            \"description\": \"No serialized representation is available for a value.\",\n            \"type\": \"string\",\n            \"enum\": [\n                \"NotRepresentable\"\n            ]\n        },\n        {\n            \"description\": \"Exceeded a recursion depth limit.\",\n            \"type\": \"string\",\n            \"enum\": [\n                \"ExceededRecursionDepth\"\n            ]\n        }\n    ]\n}\n```\n\n----------------------------------------\n\nTITLE: Defining MinimalBlockInfo Schema in OpenAPI\nDESCRIPTION: Defines the schema for minimal block information needed for node status requests, including hash, timestamp, era ID, height, state root hash, and creator details.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/condor/jsonrpc-comp/rpc-2.0/schema.json.md#2025-04-22_snippet_91\n\nLANGUAGE: json\nCODE:\n```\n\"MinimalBlockInfo\": {\n  \"description\": \"Minimal info about a `Block` needed to satisfy the node status request.\",\n  \"type\": \"object\",\n  \"required\": [\n    \"creator\",\n    \"era_id\",\n    \"hash\",\n    \"height\",\n    \"state_root_hash\",\n    \"timestamp\"\n  ],\n  \"properties\": {\n    \"hash\": {\n      \"$ref\": \"#/components/schemas/BlockHash\"\n    },\n    \"timestamp\": {\n      \"$ref\": \"#/components/schemas/Timestamp\"\n    },\n    \"era_id\": {\n      \"$ref\": \"#/components/schemas/EraId\"\n    },\n    \"height\": {\n      \"type\": \"integer\",\n      \"format\": \"uint64\",\n      \"minimum\": 0.0\n    },\n    \"state_root_hash\": {\n      \"$ref\": \"#/components/schemas/Digest\"\n    },\n    \"creator\": {\n      \"$ref\": \"#/components/schemas/PublicKey\"\n    }\n  },\n  \"additionalProperties\": false\n}\n```\n\n----------------------------------------\n\nTITLE: Declaring Functions with Return Values in Aptos\nDESCRIPTION: This snippet demonstrates how to define a public function in Aptos that returns multiple values. Aptos allows returning one or more values from a function.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/docs/resources/moving-to-casper.md#2025-04-22_snippet_7\n\nLANGUAGE: rust\nCODE:\n```\npublic fun max(a: u8, b: u8): (u8, bool) {}\n```\n\n----------------------------------------\n\nTITLE: Decreasing CEP-18 Token Allowance (Uncommented)\nDESCRIPTION: A concise version of the `casper-client` command to execute the `decrease_allowance` entry point of a CEP-18 contract package. This command excludes inline comments but performs the same function as the commented version, requiring node address, caller's secret key, package name, entry point, spender, amount, chain name, and payment amount.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/versioned_docs/version-1.5.X/resources/tokens/cep18/transfer.md#2025-04-22_snippet_19\n\nLANGUAGE: bash\nCODE:\n```\ncasper-client put-deploy -n http://<NODE IP>:<PORT> \\\n--secret-key ~/casper/demo/user_a/secret_key.pem \\\n--session-package-name \"cep18_contract_package_CEP18\" \\\n--session-entry-point \"decrease_allowance\" \\\n--session-arg \"spender:key='account-hash-683f53f56926f54ef9584b07585b025c68415dc05f7b2e56749153574b83d5cd'\" \\\n--session-arg \"amount:U256='10'\" \\\n--chain-name <CHAIN NAME> \\\n--payment-amount 1000000000\n```\n\n----------------------------------------\n\nTITLE: Querying Global State for CEP-18 Token Balance Results\nDESCRIPTION: This command queries global state to retrieve the token balance result from the utility contract. It requires the 'results' URef from the utility contract's NamedKeys and the current state root hash.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/versioned_docs/version-1.5.X/resources/tokens/cep18/transfer.md#2025-04-22_snippet_4\n\nLANGUAGE: json\nCODE:\n```\ncasper-client query-global-state -n http://<NODE IP>:<PORT> \\\n// This is the `results` URef location from your `cep18_test_contract` `NamedKeys`\n--key uref-a46ad389b53715d9991a513c8ca48e1502facc4c563c0700a31e830c4cb8a7d4-007 \\\n--state-root-hash 3aecd0e4b6ec29ee7c1eed701132eabfe6e66a1e0f1595c9c65bfed447e474f7\n```\n\n----------------------------------------\n\nTITLE: Cloning CEP-18 Token Contract\nDESCRIPTION: Clones the CEP-18 fungible token contract repository from GitHub.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/versioned_docs/version-1.5.X/resources/tokens/cep18/full-tutorial.md#2025-04-22_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\ngit clone https://github.com/casper-ecosystem/cep18.git\n```\n\n----------------------------------------\n\nTITLE: Defining BlockSyncStatus Object Schema - OpenAPI/Swagger - JSON\nDESCRIPTION: Defines the 'BlockSyncStatus' schema to represent the sync status of individual blocks, requiring both 'acquisition_state' and 'block_hash'. Supports optional 'block_height', using type flexibility for null support. Enforces presence of referenced types like 'BlockHash' and clearly describes each property for comprehensive documentation.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/condor/jsonrpc-comp/rpc-1.5/schema/components.json.md#2025-04-22_snippet_52\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"description\": \"The status of syncing an individual block.\",\n  \"type\": \"object\",\n  \"required\": [\n    \"acquisition_state\",\n    \"block_hash\"\n  ],\n  \"properties\": {\n    \"block_hash\": {\n      \"description\": \"The block hash.\",\n      \"allOf\": [\n        {\n          \"$ref\": \"#/components/schemas/BlockHash\"\n        }\n      ]\n    },\n    \"block_height\": {\n      \"description\": \"The height of the block, if known.\",\n      \"type\": [\n        \"integer\",\n        \"null\"\n      ],\n      \"format\": \"uint64\",\n      \"minimum\": 0.0\n    },\n    \"acquisition_state\": {\n      \"description\": \"The state of acquisition of the data associated with the block.\",\n      \"type\": \"string\"\n    }\n  },\n  \"additionalProperties\": false\n}\n```\n\n----------------------------------------\n\nTITLE: Serializing ByteArray CLValue in Casper Network\nDESCRIPTION: ByteArray values serialize as the concatenation of their elements without including the length since it's statically known by the type.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/versioned_docs/version-1.5.X/concepts/serialization-standard.md#2025-04-22_snippet_5\n\nLANGUAGE: text\nCODE:\n```\n-   E.g. `[1u32, 2u32, 3u32]` serializes as `0x010000000200000003000000`\n```\n\n----------------------------------------\n\nTITLE: Checking Node Version\nDESCRIPTION: Command to verify Node.js version installed on the system\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/versioned_docs/version-1.5.X/developers/dapps/template-frontend.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnode -v\n```\n\n----------------------------------------\n\nTITLE: Memory Block Release Implementation in WebAssembly\nDESCRIPTION: Implements a function to release memory blocks in WebAssembly. Handles pointer management, block boundaries, and memory system state updates.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/versioned_docs/version-2.0.0/developers/json-rpc/json-rpc-transactional.md#2025-04-22_snippet_8\n\nLANGUAGE: webassembly\nCODE:\n```\n280041b29c041008200020012002230141086a2401230141f4034b0440000b1010230141086b24010bd40501077f41bab0021008024020022802002205450d0041f61d10082001417f6a2106410020016b21072000410274210803404186f40410080240200541086a2d0000410171450d0041b8031008034041f29e09100820052005280208417e713602082005280204417c71220128020021090240024002402005280200220a417c71220b0d0041c4970210082001210a0c010b418a9d0210080240200a410271450d0041c4970210082001210a0c010b419afa021008200b200b2802044103712001723602042005280204220b417c71220a450d0141ba3610082005280200417c71210b200a28020021090b4184cd001008200a2009410371200b723602002005280204210b0b2005200b41037136020420052005280200220b4103713602000240200b410271450d0041c6c1001008200120012802004102723602000b2002200136020020012105200141086a2d00004101710d000b0b02402005280200417c71220b200541086a22016b2008490d0041e0e40610080240024020012003200020042802101100004102746a41086a200b20086b200771220b4d0d0041f09902100820062001710d02419af50210082002200541086a280200417c713602002005280200210b200521010c010b41b4b207100841002109200b4100360200200b41786a2201420037020020012005280200417c7136020002402005280200220a417c71220b450d0041d897021008200a4102710d0041e2e3001008200b200b280204410371200172360204200128020441037121090b20012009200572360204200541086a220b200b280200417e7136020020052005280200220b41037120017222093602000240200b4102710d004188ab0210082001280200210b0c010b41cef200100820052009417d7136020020012001280200410272220b3602000b41803710082001200b410172360200200141086a0f0b41f0d502100820022001280200220536020020050d000b0b41ee00100841000b\n```\n\n----------------------------------------\n\nTITLE: Initializing NodeClient Connection in Python\nDESCRIPTION: Creates a NodeClient instance by specifying the host address and RPC port for connecting to a Casper network. This is used for backend communication with the blockchain from Python applications.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/versioned_docs/version-2.0.0/developers/dapps/technology-stack.md#2025-04-22_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nclient = NodeClient(NodeConnection(host = \"NODE_ADDRESS\", port_rpc = 7777))\n```\n\n----------------------------------------\n\nTITLE: Basic TAR Command for DB Compression\nDESCRIPTION: Basic tar command to prepare database files for compression, using sparse file handling.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/versioned_docs/version-2.0.0/operators/maintenance/archiving-and-restoring.md#2025-04-22_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ntar -cv --sparse .\n```\n\n----------------------------------------\n\nTITLE: Cloning Example Wasm Repository using Bash\nDESCRIPTION: Clones the `tutorials-example-wasm` repository from GitHub which contains Wasm session code examples for Casper multi-signature workflows, and then navigates into the `multi-sig` directory. Requires the `git` command-line tool to be installed.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/docs/resources/advanced/multi-sig/multi-sig-workflow.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ngit clone https://github.com/casper-ecosystem/tutorials-example-wasm/ && cd multi-sig\n```\n\n----------------------------------------\n\nTITLE: Toggling Light Theme Mode - Docusaurus Theme Config - JavaScript\nDESCRIPTION: This snippet defines theme customization options for Docusaurus by exporting a configuration object as a JavaScript module. The 'defaultMode' sets the initial theme ('light'), 'respectPrefersColorScheme' toggles OS theme preference, and 'disableSwitch' determines whether users can switch themes manually. This object must be exported in 'color.config.js' or an equivalent to apply to site styling. Expected inputs are Boolean flags and strings, and misconfiguration may prevent theme switching.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/README/DEVELOPERS.md#2025-04-22_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nmodule.exports = {\n    defaultMode: \"light\",\n    respectPrefersColorScheme: false,\n    disableSwitch: false,\n};\n\n```\n\n----------------------------------------\n\nTITLE: Example JSON Snippet Showing Account's Named Keys\nDESCRIPTION: This snippet displays a portion of the JSON response obtained from `casper-client query-global-state` when querying an account. It specifically shows the `Account` details, including the `named_keys` array which lists URefs and associated names for contracts or other items stored under the account.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/versioned_docs/version-1.5.X/resources/advanced/cross-contract.md#2025-04-22_snippet_26\n\nLANGUAGE: bash\nCODE:\n```\n{\n  \"id\": -6842818667609668962,\n  \"jsonrpc\": \"2.0\",\n  \"result\": {\n    \"api_version\": \"1.4.13\",\n    \"block_header\": null,\n    \"merkle_proof\": \"[30424 hex chars]\",\n    \"stored_value\": {\n      \"Account\": {\n        \"account_hash\": \"account-hash-ee57bb3b39eb66b74a1dcf12f3f0e7d8e906e34b11f85dc05497bf33fbf3a1f9\",\n        \"action_thresholds\": {\n          \"deployment\": 1,\n          \"key_management\": 1\n        },\n        \"associated_keys\": [\n          {\n            \"account_hash\": \"account-hash-ee57bb3b39eb66b74a1dcf12f3f0e7d8e906e34b11f85dc05497bf33fbf3a1f9\",\n            \"weight\": 1\n          }\n        ],\n        \"main_purse\": \"uref-453534c5c380862c2d814b5879f08fe6b5a3d4f031eaf20e08cf091d274035a5-007\",\n        \"named_keys\": [\n          {\n            \"key\": \"uref-94c54f24273f1fb874eff33f3d4211a254622edfd1b980d5e758bd719b46fd0d-007\",\n            \"name\": \"Hello_world_access_uref\"\n          },\n          {\n\n```\n\n----------------------------------------\n\nTITLE: Source Account JSON-RPC Request\nDESCRIPTION: Example JSON-RPC request format for querying source account balance\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/versioned_docs/version-2.0.0/developers/cli/transfers/verify-transfer.md#2025-04-22_snippet_18\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"jsonrpc\": \"2.0\",\n  \"method\": \"query_balance\",\n  \"params\": {\n    \"state_identifier\": {\n      \"StateRootHash\": \"fdb1474d441ec0fcbf2e088f1630dbf98d3bcf7f7a7fe298303797f35b8cb4e1\"\n    },\n    \"purse_identifier\": {\n      \"main_purse_under_account_hash\": \"account-hash-e70dbca48c2d31bc2d754e51860ceaa8a1a49dc627b20320b0ecee1b6d9ce655\"\n    }\n  },\n  \"id\": 6\n}\n```\n\n----------------------------------------\n\nTITLE: Swapping Node Keys and Restarting in Bash\nDESCRIPTION: This Bash code snippet contains commands to stop a node, swap keys with the new node, and restart using the new configuration. It utilizes the `sudo systemctl` command to manage the node's lifecycle. Key swapping between directories ensures the new validator configuration is applied, while permissions are maintained using the user 'casper'.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/docs/operators/maintenance/moving-node.md#2025-04-22_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n    sudo systemctl stop casper-node-launcher\n    cd /etc/casper/validator_keys/current_node\n    sudo -u casper cp * ../\n    sudo systemctl start casper-node-launcher\n\n```\n\nLANGUAGE: bash\nCODE:\n```\n    sudo systemctl stop casper-node-launcher\n    cd /etc/casper/validator_keys/backup_node\n    sudo -u casper cp * ../\n\n```\n\nLANGUAGE: bash\nCODE:\n```\n    sudo systemctl start casper-node-launcher \n\n```\n\n----------------------------------------\n\nTITLE: Displaying help for specific Casper client command\nDESCRIPTION: Display help information for a specific command of the Casper client.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/versioned_docs/version-2.0.0/developers/prerequisites.md#2025-04-22_snippet_17\n\nLANGUAGE: bash\nCODE:\n```\ncasper-client <command> --help\n```\n\n----------------------------------------\n\nTITLE: Querying Global State Using Casper CLI (Bash)\nDESCRIPTION: This bash command demonstrates how to use the Casper CLI client to query global state. It uses the 'query-global-state' command with node address, key, and block identifier parameters.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/versioned_docs/version-2.0.0/developers/writing-onchain-code/emitting-contract-events.md#2025-04-22_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\ncasper-client query-global-state \\\n--node-address <HOST:PORT> \\\n--key [HASH_STRING] \\\n--block-identifier <BLOCK_HASH>\n```\n\n----------------------------------------\n\nTITLE: Defining SeigniorageAllocation Object\nDESCRIPTION: This schema provides information related to a seigniorage allocation. It includes details about the validator's public key and the allocated amount, utilizing references to other schemas like `PublicKey` and `U512`.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/condor/jsonrpc-comp/rpc-1.5/schema/components.json.md#2025-04-22_snippet_31\n\nLANGUAGE: JSON\nCODE:\n```\n{\\n    \\\"description\\\": \\\"Information about a seigniorage allocation\\\",\\n    \\\"anyOf\\\": [\\n        {\\n            \\\"description\\\": \\\"Info about a seigniorage allocation for a validator\\\",\\n            \\\"type\\\": \\\"object\\\",\\n            \\\"required\\\": [\\n                \\\"Validator\\\"\\n            ],\\n            \\\"properties\\\": {\\n                \\\"Validator\\\": {\\n                    \\\"type\\\": \\\"object\\\",\\n                    \\\"required\\\": [\\n                        \\\"amount\\\",\\n                        \\\"validator_public_key\\\"\\n                    ],\\n                    \\\"properties\\\": {\\n                        \\\"validator_public_key\\\": {\\n                            \\\"description\\\": \\\"Validator's public key\\\",\\n                            \\\"allOf\\\": [\\n                                {\\n                                    \\\"$ref\\\": \\\"#/components/schemas/PublicKey\\\"\\n                                }\\n                            ]\\n                        },\\n                        \\\"amount\\\": {\\n                            \\\"description\\\": \\\"Allocated amount\\\",\\n                            \\\"allOf\\\": [\\n                                {\\n                                    \\\"$ref\\\": \\\"#/components/schemas/U512\\\"\\n                                }\\n                            ]\\n                        }\\n                    },\\n                    \\\"additionalProperties\\\": false\\n                }\\n            },\\n            \\\"additionalProperties\\\": false\\n        }\\n    ]\\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Deploy Schema Structure in JSON\nDESCRIPTION: This schema defines a 'Deploy', which includes a smart contract and requester’s signatures. The schema outlines required properties like approvals, hash, and header, and provides structure for defining a deploy in the Casper Network. It relies on other schemas such as DeployHash, ExecutableDeployItem, and Approval for detailed structure.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/condor/jsonrpc-comp/rpc-1.5/schema.json.md#2025-04-22_snippet_26\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"description\": \"A deploy; an item containing a smart contract along with the requester's signature(s).\",\n  \"type\": \"object\",\n  \"required\": [\n    \"approvals\",\n    \"hash\",\n    \"header\",\n    \"payment\",\n    \"session\"\n  ],\n  \"properties\": {\n    \"hash\": {\n      \"$ref\": \"#/components/schemas/DeployHash\"\n    },\n    \"header\": {\n      \"$ref\": \"#/components/schemas/DeployHeader\"\n    },\n    \"payment\": {\n      \"$ref\": \"#/components/schemas/ExecutableDeployItem\"\n    },\n    \"session\": {\n      \"$ref\": \"#/components/schemas/ExecutableDeployItem\"\n    },\n    \"approvals\": {\n      \"type\": \"array\",\n      \"items\": {\n        \"$ref\": \"#/components/schemas/Approval\"\n      },\n      \"uniqueItems\": true\n    }\n  },\n  \"additionalProperties\": false\n}\n```\n\n----------------------------------------\n\nTITLE: Cloning the Counter Contract Repository\nDESCRIPTION: Clones the counter contract repository from the Casper ecosystem GitHub.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/versioned_docs/version-2.0.0/resources/beginner/counter-testnet/walkthrough.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ngit clone https://github.com/casper-ecosystem/counter\n```\n\n----------------------------------------\n\nTITLE: Activating Bid on Casper Testnet using System Auction Contract in Bash\nDESCRIPTION: This command demonstrates how to activate a bid on the Casper Testnet using the system auction contract, with specific values for the Testnet.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/versioned_docs/version-2.0.0/operators/becoming-a-validator/recovering.md#2025-04-22_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\nsudo -u casper casper-client put-deploy \\\n--node-address https://node.testnet.casper.network  \\\n--secret-key /etc/casper/validator_keys/secret_key.pem \\\n--chain-name casper-test \\\n--payment-amount 2500000000 \\\n--session-hash hash-93d923e336b20a4c4ca14d592b60e5bd3fe330775618290104f9beb326db7ae2 \\\n--session-entry-point activate_bid \\\n--session-arg \"validator:public_key='$(cat /etc/casper/validator_keys/public_key_hex)'\"\n```\n\n----------------------------------------\n\nTITLE: Displaying Casper client help information\nDESCRIPTION: Display help information for the Casper client, showing supported commands.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/versioned_docs/version-2.0.0/developers/prerequisites.md#2025-04-22_snippet_16\n\nLANGUAGE: bash\nCODE:\n```\ncasper-client --help\n```\n\n----------------------------------------\n\nTITLE: Creating Named Key for Contract Version in Casper Network\nDESCRIPTION: This defines a NamedKey that assigns the name 'contract_version' to a URef. This creates an accessible reference to the contract version value in the contract's namespace.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/docs/developers/json-rpc/json-rpc-transactional.md#2025-04-22_snippet_18\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"key\": \"named-key-entity-account-7ba7c904427d5fe653b99584c07c3c5963b6ea2e75ad87aea69b71a65bf6fcea-1a77e4ba31d02a3941319349f259d5fb02ef3ed70f92775cd18b8aba359441e2\",\n    \"kind\": {\n        \"Write\": {\n            \"NamedKey\": {\n                \"named_key\": {\n                    \"cl_type\": \"Key\",\n                    \"bytes\": \"022e024fc493ffb93847290be74a6f921a4226c142b5b196654b5a9c724cb2a72607\",\n                    \"parsed\": \"uref-2e024fc493ffb93847290be74a6f921a4226c142b5b196654b5a9c724cb2a726-007\"\n                },\n                \"name\": {\n                    \"cl_type\": \"String\",\n                    \"bytes\": \"10000000636f6e74726163745f76657273696f6e\",\n                    \"parsed\": \"contract_version\"\n                }\n            }\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Sample put-txn Response in JSON\nDESCRIPTION: Example JSON response from a successful put-txn command showing the transaction hash in version 1 format.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/docs/developers/cli/sending-transactions.md#2025-04-22_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"jsonrpc\": \"2.0\",\n  \"id\": 1294011212530641270,\n  \"result\": {\n    \"api_version\": \"2.0.0\",\n    \"transaction_hash\": {\n      \"Version1\": \"efad4a969064b5f8189ea4d6dd2fba2926d01d583a35178c07d7b827de16789e\"\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Serializing PackageStatus Type\nDESCRIPTION: Defines `PackageStatus`, indicating the lock status of a package. It serializes as a boolean value, where `true` means the package is locked and `false` means it is unlocked.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/versioned_docs/version-2.0.0/concepts/serialization/types.md#2025-04-22_snippet_37\n\nLANGUAGE: text\nCODE:\n```\nThe lock status of the package, serialized as a [`boolean`](./primitives.md#clvalue-boolean) where `true` indicates a locked package and `false` indicates an unlocked package.\n```\n\n----------------------------------------\n\nTITLE: Restricted Account Updates Configuration\nDESCRIPTION: Account setup where only the primary key can perform account updates, while associated keys can only sign deploys. Features higher key management threshold.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/versioned_docs/version-2.0.0/resources/advanced/multi-sig/other-scenarios.md#2025-04-22_snippet_3\n\nLANGUAGE: json\nCODE:\n```\n\"Account\": {\n   \"account_address\": \"account-hash-a1…\",\n   \"action_thresholds\": {\n      \"deployment\": 2,\n      \"key_management\": 3\n   },\n   \"associated_keys\": [\n      {\n         \"account_address\": \"account-hash-a1…\",\n         \"weight\": 3\n      },\n      {\n         \"account_address\": \"account-hash-b2…\",\n         \"weight\": 1\n      },\n      {\n         \"account_address\": \"account-hash-c3…\",\n         \"weight\": 1\n      }\n   ],\n   \"main_purse\": \"uref-1234…\",\n   \"named_keys\": []\n}\n```\n\n----------------------------------------\n\nTITLE: Storing Contract Hash in Named Keys\nDESCRIPTION: Code snippet showing how to store a contract hash under a named key in global state.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/versioned_docs/version-2.0.0/developers/cli/calling-contracts.md#2025-04-22_snippet_10\n\nLANGUAGE: rust\nCODE:\n```\nruntime::put_key(CONTRACT_KEY, stored_contract_hash.into());\n```\n\n----------------------------------------\n\nTITLE: Initializing a New Project Directory with npm\nDESCRIPTION: This sequence of shell commands creates a new directory named 'project', changes the current directory to 'project', and then initializes a new Node.js project using `npm init`. The `npm init` command prompts the user for project details and creates a `package.json` file.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/versioned_docs/version-1.5.X/developers/writing-onchain-code/assembly-script.md#2025-04-22_snippet_2\n\nLANGUAGE: sh\nCODE:\n```\nmkdir project\ncd project\nnpm init\n```\n\n----------------------------------------\n\nTITLE: Markdown Navigation Links\nDESCRIPTION: A set of markdown links for alphabetical navigation between documentation sections A through Z.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/versioned_docs/version-1.5.X/concepts/glossary/Q.md#2025-04-22_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n[A](./A.md) [B](./B.md) [C](./C.md) [D](./D.md) [E](./E.md) [F](./F.md) [G](./G.md) [H](./H.md) [I](./I.md) [J](./J.md) [K](./K.md) [L](./L.md) [M](./M.md) [N](./N.md) [O](./O.md) [P](./P.md) [Q](./Q.md) [R](./R.md) [S](./S.md) [T](./T.md) [U](./U.md) [V](./V.md) [W](./W.md) [X](./X.md) [Y](./Y.md) [Z](./Z.md)\n```\n\n----------------------------------------\n\nTITLE: Defining MinimalBlockInfo Schema in JSON\nDESCRIPTION: This schema defines the minimal information required for a block, including hash, timestamp, era ID, height, state root hash, and creator.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/condor/jsonrpc-comp/rpc-2.0/schema/components.json.md#2025-04-22_snippet_77\n\nLANGUAGE: JSON\nCODE:\n```\n\"MinimalBlockInfo\": {\n    \"description\": \"Minimal info about a `Block` needed to satisfy the node status request.\",\n    \"type\": \"object\",\n    \"required\": [\n        \"creator\",\n        \"era_id\",\n        \"hash\",\n        \"height\",\n        \"state_root_hash\",\n        \"timestamp\"\n    ],\n    \"properties\": {\n        \"hash\": {\n            \"$ref\": \"#/components/schemas/BlockHash\"\n        },\n        \"timestamp\": {\n            \"$ref\": \"#/components/schemas/Timestamp\"\n        },\n        \"era_id\": {\n            \"$ref\": \"#/components/schemas/EraId\"\n        },\n        \"height\": {\n            \"type\": \"integer\",\n            \"format\": \"uint64\",\n            \"minimum\": 0.0\n        },\n        \"state_root_hash\": {\n            \"$ref\": \"#/components/schemas/Digest\"\n        },\n        \"creator\": {\n            \"$ref\": \"#/components/schemas/PublicKey\"\n        }\n    },\n    \"additionalProperties\": false\n}\n```\n\n----------------------------------------\n\nTITLE: Counter Factory Contract Reference\nDESCRIPTION: Reference link to an example counter factory contract implementation showcasing the factory pattern in Casper smart contracts. The contract demonstrates the use of EntryPointType::Install and EntryPointAccess::Template.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/docs/developers/writing-onchain-code/factory-pattern.md#2025-04-22_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\nhttps://github.com/mpapierski/casper-node/blob/gh-2064-factory-pattern/smart_contracts/contracts/test/counter-factory/src/main.rs\n```\n\n----------------------------------------\n\nTITLE: Defining the CLType Enum for Serialization - Rust\nDESCRIPTION: This Rust code snippet declares the CLType enum, which is central to Casper's serialization format. It enumerates all supported types, including primitives, option, list, map, tuple, and Any for unknown types. This type is used to represent value kinds throughout Casper smart contracts and global state management. No third-party dependencies are required; the enum is intended for use with Casper's serialization routines. Inputs are the various data types represented by the enum, and the output is the encoded/serialized type information.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/versioned_docs/version-1.5.X/concepts/serialization-standard.md#2025-04-22_snippet_4\n\nLANGUAGE: rust\nCODE:\n```\nenum CLType {\n   Bool, // boolean primitive\n   I32, // signed 32-bit integer primitive\n   I64, // signed 64-bit integer primitive\n   U8, // unsigned 8-bit integer primitive\n   U32, // unsigned 32-bit integer primitive\n   U64, // unsigned 64-bit integer primitive\n   U128, // unsigned 128-bit integer primitive\n   U256, // unsigned 256-bit integer primitive\n   U512, // unsigned 512-bit integer primitive\n   Unit, // singleton value without additional semantics\n   String, // e.g. \"Hello, World!\"\n   URef, // unforgeable reference (see above)\n   Key, // global state key (see above)\n   PublicKey // A Casper system PublicKey type\n   Option(CLType), // optional value of the given type\n   List(CLType), // list of values of the given type (e.g. Vec in rust)\n   ByteArray(CLType, u32), // same as `List` above, but number of elements\n                           // is statically known (e.g. arrays in rust)\n   Result(CLType, CLType), // co-product of the given types;\n                           // one variant meaning success, the other failure\n   Map(CLType, CLType), // key-value association where keys and values have the given types\n   Tuple1(CLType), // single value of the given type\n   Tuple2(CLType, CLType), // pair consisting of elements of the given types\n   Tuple3(CLType, CLType, CLType), // triple consisting of elements of the given types\n   Any // Indicates the type is not known\n}\n\n```\n\n----------------------------------------\n\nTITLE: Deploying via Named Key using Casper-Client CLI - Rust\nDESCRIPTION: This usage of put-deploy submits a call to an existing smart contract entry point, rather than uploading new Wasm code. It requires specifying the session name (contract's known named key or alias) and entry point (function name) to call. All standard flags (node address, chain name, secret key, payment) are needed. Replace placeholders to match your deployed contract and entry points.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/versioned_docs/version-2.0.0/resources/beginner/counter-testnet/commands.md#2025-04-22_snippet_4\n\nLANGUAGE: rust\nCODE:\n```\ncasper-client put-deploy \\\n    --node-address [NODE_SERVER_ADDRESS] \\\n    --chain-name casper-test \\\n    --secret-key [KEY_PATH]/secret_key.pem \\\n    --payment-amount [PAYMENT_AMOUNT_IN_MOTES] \\\n    --session-name \"counter\" \\\n    --session-entry-point \"counter_inc\"\n```\n\n----------------------------------------\n\nTITLE: Defining Era End Schema in JSON Schema\nDESCRIPTION: Schema definition for era end information containing validator weights, equivocators, and rewards. Includes required fields and property descriptions.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/condor/jsonrpc-comp/rpc-2.0/schema.json.md#2025-04-22_snippet_85\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"description\": \"Information related to the end of an era, and validator weights for the following era.\",\n  \"type\": \"object\",\n  \"required\": [\n    \"era_report\",\n    \"next_era_validator_weights\"\n  ],\n  \"properties\": {\n    \"era_report\": {\n      \"description\": \"Equivocation, reward and validator inactivity information.\",\n      \"allOf\": [\n        {\n          \"$ref\": \"#/components/schemas/EraReport_for_PublicKey\"\n        }\n      ]\n    },\n    \"next_era_validator_weights\": {\n      \"description\": \"The validators for the upcoming era and their respective weights.\",\n      \"allOf\": [\n        {\n          \"$ref\": \"#/components/schemas/Array_of_ValidatorWeight\"\n        }\n      ]\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining JSON Schema for Message Topic Hash\nDESCRIPTION: This JSON snippet defines a schema element for a message topic hash. It specifies that the element must be a string data type and includes a description clarifying its purpose as 'The hash of the name of the message topic'. This structure is likely used for data validation or documentation generation.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/condor/jsonrpc-comp/rpc-2.0/schema/TopicNameHash.json.md#2025-04-22_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"description\": \"The hash of the name of the message topic.\",\n    \"type\": \"string\"\n} \n```\n\n----------------------------------------\n\nTITLE: Creating Payment Parameter for Deploy in JavaScript SDK\nDESCRIPTION: Creates the payment parameter for a staking deploy, which specifies the gas cost. The deploy cost should be retrieved from the network chainspec for the specific version being used.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/versioned_docs/version-1.5.X/resources/advanced/list-cspr.md#2025-04-22_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nimport { DeployUtil } from 'casper-js-sdk';\n\nconst payment = DeployUtil.standardPayment(deployCost);\n```\n\n----------------------------------------\n\nTITLE: Cloning Casper Node Repository\nDESCRIPTION: Commands to clone the casper-node repository and navigate to its directory. This is the first step in accessing the delegation smart contract.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/docs/developers/dapps/sdk/client-library-usage.md#2025-04-22_snippet_17\n\nLANGUAGE: bash\nCODE:\n```\ngit clone https://github.com/casper-network/casper-node.git\ncd casper-node/\n```\n\n----------------------------------------\n\nTITLE: JSON-RPC Response for Casper Deploy Information\nDESCRIPTION: This JSON snippet represents a typical response from a JSON-RPC call to retrieve deploy details. It includes key information such as the deploy hash, block hash, execution results, and approval signatures. This response is used to validate the successful execution of the deploy on the network.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/versioned_docs/version-1.5.X/developers/cli/transfers/direct-token-transfer.md#2025-04-22_snippet_7\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"jsonrpc\": \"2.0\",\n  \"result\": {\n    \"api_version\": \"1.5.3\",\n    \"deploy\": {\n      \"hash\": \"1f17a0bdeaaf71abd03492c854cdf97f746432751721ce555e95b9cefe641e3c\",\n      \"header\": {\n        \"account\": \"0154d828baafa6858b92919c4d78f26747430dcbecb9aa03e8b44077dc6266cabf\",\n        \"timestamp\": \"2023-10-12T14:59:40.760Z\",\n        \"ttl\": \"30m\",\n        \"gas_price\": 1,\n        \"body_hash\": \"ea7e6a6cbdd4d761827cb627e162896bee3e771beda000550615c9b4fafa3a2d\",\n        \"dependencies\": [],\n        \"chain_name\": \"casper-test\"\n      },\n      \"payment\": {\n        \"ModuleBytes\": {\n          \"module_bytes\": \"\",\n          \"args\": [\n            [\n              \"amount\",\n              {\n                \"cl_type\": \"U512\",\n                \"bytes\": \"0400e1f505\",\n                \"parsed\": \"100000000\"\n              }\n            ]\n          ]\n        }\n      },\n      \"session\": {\n        \"Transfer\": {\n          \"args\": [\n            [\n              \"amount\",\n              {\n                \"cl_type\": \"U512\",\n                \"bytes\": \"0500f2052a01\",\n                \"parsed\": \"5000000000\"\n              }\n            ],\n            [\n              \"target\",\n              {\n                \"cl_type\": \"PublicKey\",\n                \"bytes\": \"01360af61b50cdcb7b92cffe2c99315d413d34ef77fadee0c105cc4f1d4120f986\",\n                \"parsed\": \"01360af61b50cdcb7b92cffe2c99315d413d34ef77fadee0c105cc4f1d4120f986\"\n              }\n            ],\n            [\n              \"id\",\n              {\n                \"cl_type\": {\n                  \"Option\": \"U64\"\n                },\n                \"bytes\": \"014767a90000000000\",\n                \"parsed\": 11102023\n              }\n            ]\n          ]\n        }\n      },\n      \"approvals\": [\n        {\n          \"signer\": \"0154d828baafa6858b92919c4d78f26747430dcbecb9aa03e8b44077dc6266cabf\",\n          \"signature\": \"01e53cb742ed13ff4f0584a3da0f22f5942a33e010965adf640c91204ae4bc7436f1e5534d338ffa117d193295214816445439781229d24a372085c316eac5e305\"\n        }\n      ]\n    },\n    \"execution_results\": [\n      {\n        \"block_hash\": \"aac51dad028ba8b3d6fec86a39252bbc4285d513fd57a8af4696ab5390ac5c2b\",\n        \"result\": {\n          \"Success\": {\n            \"effect\": {\n              \"operations\": [],\n              \"transforms\": [\n                {\n                  \"key\": \"hash-8cf5e4acf51f54eb59291599187838dc3bc234089c46fc6ca8ad17e762ae4401\",\n                  \"transform\": \"Identity\"\n                },\n                {\n                  \"key\": \"account-hash-1ed5a1c39bea93c105f2d22c965a84b205b36734a377d05dbb103b6bfaa595a7\",\n                  \"transform\": \"Identity\"\n                },\n                {\n                  \"key\": \"account-hash-1ed5a1c39bea93c105f2d22c965a84b205b36734a377d05dbb103b6bfaa595a7\",\n                  \"transform\": \"Identity\"\n                },\n                {\n                  \"key\": \"hash-8cf5e4acf51f54eb59291599187838dc3bc234089c46fc6ca8ad17e762ae4401\",\n                  \"transform\": \"Identity\"\n                },\n                {\n                  \"key\": \"hash-8cf5e4acf51f54eb59291599187838dc3bc234089c46fc6ca8ad17e762ae4401\",\n                  \"transform\": \"Identity\"\n                },\n                {\n                  \"key\": \"hash-624dbe2395b9d9503fbee82162f1714ebff6b639f96d2084d26d944c354ec4c5\",\n                  \"transform\": \"Identity\"\n                },\n                {\n                  \"key\": \"hash-8cf5e4acf51f54eb59291599187838dc3bc234089c46fc6ca8ad17e762ae4401\",\n                  \"transform\": \"Identity\"\n                },\n                {\n                  \"key\": \"hash-010c3fe81b7b862e50c77ef9a958a05bfa98444f26f96f23d37a13c96244cfb7\",\n                  \"transform\": \"Identity\"\n                },\n                {\n                  \"key\": \"hash-010c3fe81b7b862e50c77ef9a958a05bfa98444f26f96f23d37a13c96244cfb7\",\n                  \"transform\": \"Identity\"\n                },\n                {\n                  \"key\": \"hash-9824d60dc3a5c44a20b9fd260a412437933835b52fc683d8ae36e4ec2114843e\",\n                  \"transform\": \"Identity\"\n                },\n                {\n                  \"key\": \"hash-010c3fe81b7b862e50c77ef9a958a05bfa98444f26f96f23d37a13c96244cfb7\",\n                  \"transform\": \"Identity\"\n                },\n                {\n                  \"key\": \"balance-11e6fc5354f61a004df98482376c45964b8b1557e8f2f13fb5f3adab5faa8be1\",\n                  \"transform\": \"Identity\"\n                },\n                {\n                  \"key\": \"balance-98d945f5324f865243b7c02c0417ab6eac361c5c56602fd42ced834a1ba201b6\",\n                  \"transform\": \"Identity\"\n                },\n                {\n                  \"key\": \"balance-11e6fc5354f61a004df98482376c45964b8b1557e8f2f13fb5f3adab5faa8be1\",\n                  \"transform\": {\n                    \"WriteCLValue\": {\n                      \"cl_type\": \"U512\",\n                      \"bytes\": \"06621c3e660301\",\n                      \"parsed\": \"1114111876194\"\n                    }\n                  }\n                },\n                {\n                  \"key\": \"balance-98d945f5324f865243b7c02c0417ab6eac361c5c56602fd42ced834a1ba201b6\",\n                  \"transform\": {\n                    \"AddUInt512\": \"100000000\"\n                  }\n                },\n                {\n                  \"key\": \"hash-8cf5e4acf51f54eb59291599187838dc3bc234089c46fc6ca8ad17e762ae4401\",\n                  \"transform\": \"Identity\"\n                },\n                {\n                  \"key\": \"account-hash-1ed5a1c39bea93c105f2d22c965a84b205b36734a377d05dbb103b6bfaa595a7\",\n                  \"transform\": \"Identity\"\n                },\n                {\n                  \"key\": \"account-hash-1ed5a1c39bea93c105f2d22c965a84b205b36734a377d05dbb103b6bfaa595a7\",\n                  \"transform\": \"Identity\"\n                },\n                {\n                  \"key\": \"hash-8cf5e4acf51f54eb59291599187838dc3bc234089c46fc6ca8ad17e762ae4401\",\n                  \"transform\": \"Identity\"\n                },\n                {\n                  \"key\": \"hash-8cf5e4acf51f54eb59291599187838dc3bc234089c46fc6ca8ad17e762ae4401\",\n                  \"transform\": \"Identity\"\n                },\n                {\n                  \"key\": \"hash-624dbe2395b9d9503fbee82162f1714ebff6b639f96d2084d26d944c354ec4c5\",\n                  \"transform\": \"Identity\"\n                },\n                {\n                  \"key\": \"hash-8cf5e4acf51f54eb59291599187838dc3bc234089c46fc6ca8ad17e762ae4401\",\n                  \"transform\": \"Identity\"\n                },\n                {\n                  \"key\": \"hash-010c3fe81b7b862e50c77ef9a958a05bfa98444f26f96f23d37a13c96244cfb7\",\n                  \"transform\": \"Identity\"\n                },\n                {\n                  \"key\": \"hash-010c3fe81b7b862e50c77ef9a958a05bfa98444f26f96f23d37a13c96244cfb7\",\n                  \"transform\": \"Identity\"\n                },\n                {\n                  \"key\": \"hash-9824d60dc3a5c44a20b9fd260a412437933835b52fc683d8ae36e4ec2114843e\",\n                  \"transform\": \"Identity\"\n                },\n                {\n                  \"key\": \"hash-010c3fe81b7b862e50c77ef9a958a05bfa98444f26f96f23d37a13c96244cfb7\",\n                  \"transform\": \"Identity\"\n                },\n                {\n                  \"key\": \"balance-11e6fc5354f61a004df98482376c45964b8b1557e8f2f13fb5f3adab5faa8be1\",\n                  \"transform\": \"Identity\"\n                },\n                {\n                  \"key\": \"balance-98d945f5324f865243b7c02c0417ab6eac361c5c56602fd42ced834a1ba201b6\",\n                  \"transform\": \"Identity\"\n                },\n                {\n                  \"key\": \"balance-11e6fc5354f61a004df98482376c45964b8b1557e8f2f13fb5f3adab5faa8be1\",\n                  \"transform\": {\n                    \"WriteCLValue\": {\n                      \"cl_type\": \"U512\",\n                      \"bytes\": \"06621c3e660301\",\n                      \"parsed\": \"1114111876194\"\n                    }\n                  }\n                },\n                {\n                  \"key\": \"balance-98d945f5324f865243b7c02c0417ab6eac361c5c56602fd42ced834a1ba201b6\",\n                  \"transform\": {\n                    \"AddUInt512\": \"100000000\"\n                  }\n                },\n                {\n                  \"key\": \"hash-010c3fe81b7b862e50c77ef9a958a05bfa98444f26f96f23d37a13c96244cfb7\",\n                  \"transform\": \"Identity\"\n                },\n                {\n                  \"key\": \"hash-010c3fe81b7b862e50c77ef9a958a05bfa98444f26f96f23d37a13c96244cfb7\",\n                  \"transform\": \"Identity\"\n                },\n                {\n                  \"key\": \"hash-9824d60dc3a5c44a20b9fd260a412437933835b52fc683d8ae36e4ec2114843e\",\n                  \"transform\": \"Identity\"\n                }\n              ]\n            }\n          }\n        }\n      }\n    ]\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: WebAssembly Function Definitions for Payment and Testing Operations\nDESCRIPTION: This code snippet defines multiple WebAssembly functions for various operations related to payments and testing. It includes functions for getting amounts, retrieving payment purses, and testing payment packages. The code is in raw WebAssembly binary format.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/versioned_docs/version-2.0.0/developers/json-rpc/json-rpc-transactional.md#2025-04-22_snippet_21\n\nLANGUAGE: WebAssembly\nCODE:\n```\n0b41f4031008412921040b41800a100841002103200021010b41a4171008200420037220014108744180fe03717221020b20020bda0401047f4198db021008230041106b22022400200041036a220341027621000240024002400240417f200141044720014104491b2204417f460d0041d897021008200441ff01710d010b41f29f0210082000417f6a22044180024922050d010b41a4c2091008200241002802c48a4036020c0240200020012002410c6a419481c00041ac81c0002301410b6a2401230141f4034b0440000b10122301410b6b240122040d0041c497111008410021042003417c7122032001410374418080016a2205200320054b1b418780046a2203411076230141036a2401230141f4034b0440000b1024230141036b24012205417f460d0041ccf10510082005411074220441003602042004200228020c3602082004200420034180807c716a4102723602002002200436020c200020012002410c6a419481c00041ac81c0002301410b6a2401230141f4034b0440000b10122301410b6b240121040b4100200228020c3602c48a400c010b41d0f2071008200241c48ac0003602082002200441027441c482c0006a410020051b220328020036020c0240200020012002410c6a200241086a419481c0002301410b6a2401230141f4034b0440000b10122301410b6b240122040d0041eecd0610082002200241086a20002002230141096a2401230141f4034b0440000b1019230141096b24014100210420022802000d00418aa805100820022802042204200228020c3602082002200436020c200020012002410c6a200241086a419481c0002301410b6a2401230141f4034b0440000b10122301410b6b240121040b2003200228020c3602000b200241106a240020040bbc0401047f41e0a00210080240024002402000450d0041b8960210082001450d0041d0b1021008024002400240417f200241044720024104491b2202417f460d0041d897021008200241ff01710d010b41c6a2021008200141036a410276417f6a2201418002490d010b41ecc603100820004100360200200041786a220120012802002202417e7136020041002802c48a40210302400240200141046a2204280200417c712205450d0041a2ae021008200528020022064101710d0041a6b10510080240024002402002417c7122000d0041c497021008200521020c010b418a9d02100802402002410271450d0041c497021008200521020c010b419afa0210082000200028020441037120057236020420042802002200417c712202450d0141ba3610082001280200417c712100200228020021060b4184cd00100820022006410371200072360200200428020021000b200420004103713602002001200128020022004103713602002000410271450d0141fed2021008200520052802004102723602000c010b41d89c0210082002417c712205450d0341d89702100820024102710d03419cab02100820052d00004101710d03418ef50010082000200541086a2202280200417c71360200200220014101723602000b41c497021008200321010c030b4180b90110082000200141027441c482c0006a2201280200360200200041786a22002000280200417e71360200200120003602000b41b80310080f0b41e82a1008200020033602000b41d0281008410020013602c48a400b280041b29c041008200020012002230141086a2401230141f4034b0440000b1010230141086b24010b\n```\n\n----------------------------------------\n\nTITLE: Defining RFC 3339 Timestamp Field - JSON Schema - JSON\nDESCRIPTION: This snippet defines a schema object for a timestamp field, specifying that the value must be a string formatted according to RFC 3339. Dependencies include JSON Schema validation tools and an understanding of RFC 3339 date/time formats. The main properties are \\\"description\\\", which provides a human-readable note, and \\\"type\\\", set to \\\"string\\\". Input is expected to be a string representing a timestamp; output is a schema object usable in larger validation contexts. Any value must conform to the specified format for successful validation, ensuring interoperability and consistency.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/condor/jsonrpc-comp/rpc-2.0/schema/Timestamp.json.md#2025-04-22_snippet_0\n\nLANGUAGE: JSON\nCODE:\n```\n{\n    \"description\": \"Timestamp formatted as per RFC 3339\",\n    \"type\": \"string\"\n}\n```\n\n----------------------------------------\n\nTITLE: Defining JSON Object Schema in JSON\nDESCRIPTION: This JSON schema defines an object type with required properties \\\"entry_point\\\" and \\\"name\\\". The \\\"name\\\" property must be a string, while \\\"entry_point\\\" is defined based on a reference to another schema component named \\\"EntryPoint\\\". This schema is intended for validating JSON objects that include these properties.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/condor/jsonrpc-comp/rpc-2.0/schema/NamedEntryPoint.json.md#2025-04-22_snippet_0\n\nLANGUAGE: JSON\nCODE:\n```\n{\n    \"type\": \"object\",\n    \"required\": [\n        \"entry_point\",\n        \"name\"\n    ],\n    \"properties\": {\n        \"name\": {\n            \"type\": \"string\"\n        },\n        \"entry_point\": {\n            \"allOf\": [\n                {\n                    \"$ref\": \"#/components/schemas/EntryPoint\"\n                }\n            ]\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Transform JSON Schema for Casper Network API\nDESCRIPTION: JSON schema that defines a transformation performed during deploy execution. It requires 'key' and 'kind' properties, which reference other schema components named 'Key' and 'TransformKindV2' respectively. Additional properties are not allowed.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/condor/jsonrpc-comp/rpc-2.0/schema/TransformV2.json.md#2025-04-22_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"description\": \"A transformation performed while executing a deploy.\",\n    \"type\": \"object\",\n    \"required\": [\n        \"key\",\n        \"kind\"\n    ],\n    \"properties\": {\n        \"key\": {\n            \"$ref\": \"#/components/schemas/Key\"\n        },\n        \"kind\": {\n            \"$ref\": \"#/components/schemas/TransformKindV2\"\n        }\n    },\n    \"additionalProperties\": false\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Bid Component JSON Schema\nDESCRIPTION: This JSON schema defines the 'Bid' component, used to write a given bid to the global state within the Casper Network. It includes a single required property, 'WriteBid', and references the 'Bid' schema component. The input is the bid object, and the output confirms adherence to the global state data structure.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/condor/jsonrpc-comp/rpc-1.5/schema.json.md#2025-04-22_snippet_42\n\nLANGUAGE: JSON\nCODE:\n```\n{\"WriteBid\": {\"$ref\": \"#/components/schemas/Bid\"}}\n```\n\n----------------------------------------\n\nTITLE: Defining JSON Schema for Block and Signatures\nDESCRIPTION: This JSON schema defines an object that represents a blockchain block and its signatures, specifying required fields such as 'block' and 'proofs'. It includes references to other schema components for detailed data structure validation, making use of properties to enforce schema validations.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/condor/jsonrpc-comp/rpc-2.0/schema/JsonBlockWithSignatures.json.md#2025-04-22_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\\n    \\\"description\\\": \\\"A JSON-friendly representation of a block and the signatures for that block.\\\",\\n    \\\"type\\\": \\\"object\\\",\\n    \\\"required\\\": [\\n        \\\"block\\\",\\n        \\\"proofs\\\"\\n    ],\\n    \\\"properties\\\": {\\n        \\\"block\\\": {\\n            \\\"description\\\": \\\"The block.\\\",\\n            \\\"allOf\\\": [\\n                {\\n                    \\\"$ref\\\": \\\"#/components/schemas/Block\\\"\\n                }\\n            ]\\n        },\\n        \\\"proofs\\\": {\\n            \\\"description\\\": \\\"The proofs of the block, i.e. a collection of validators\\' signatures of the block hash.\\\",\\n            \\\"allOf\\\": [\\n                {\\n                    \\\"$ref\\\": \\\"#/components/schemas/Array_of_BlockProof\\\"\\n                }\\n            ]\\n        }\\n    },\\n    \\\"additionalProperties\\\": false\\n}\n```\n\n----------------------------------------\n\nTITLE: SSE Event Stream Configuration\nDESCRIPTION: Configuration setting for the SSE HTTP event stream server port in config.toml. This port (9999) is used for event streaming.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/versioned_docs/version-2.0.0/operators/setup/node-endpoints.md#2025-04-22_snippet_5\n\nLANGUAGE: markdown\nCODE:\n```\naddress = '0.0.0.0:9999'\n```\n\n----------------------------------------\n\nTITLE: Defining JSON Schema for 512-bit Integer Representation\nDESCRIPTION: This JSON schema defines a string type property that represents a 512-bit integer in decimal format. The schema ensures that 512-bit integers are stored as strings to prevent precision loss that would occur with JavaScript's standard number type.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/condor/jsonrpc-comp/rpc-2.0/schema/U512.json.md#2025-04-22_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"description\": \"Decimal representation of a 512-bit integer.\",\n    \"type\": \"string\"\n}\n```\n\n----------------------------------------\n\nTITLE: User Allowance Keys Migration Entry Point for Casper Token Contract\nDESCRIPTION: Entry point definition for migrating user allowance keys in the token contract. Takes boolean parameters for events tracking and revert functionality, used during contract upgrades or data restructuring.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/docs/developers/cli/sending-transactions.md#2025-04-22_snippet_15\n\nLANGUAGE: JSON\nCODE:\n```\n{\n  \"key\": \"entry-point-v1-entity-contract-363996106630892a964565574fcdfd2435f21a17a3ad1ed2054146e7d8461640-18bff854e9d908cf20fb1db53a47ab69968917b53b8c71371e7dd0f88b363e60\",\n  \"kind\": {\n    \"Write\": {\n      \"EntryPoint\": {\n        \"V1CasperVm\": {\n          \"name\": \"migrate_user_allowance_keys\",\n          \"args\": [\n            {\n              \"name\": \"events\",\n              \"cl_type\": \"Bool\"\n            },\n            {\n              \"name\": \"revert\",\n              \"cl_type\": \"Bool\"\n            }\n          ],\n          \"ret\": \"Unit\",\n          \"access\": \"Public\",\n          \"entry_point_type\": \"Called\",\n          \"entry_point_payment\": \"Caller\"\n        }\n      }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Transforming Account and Hash States Using Casper Blockchain JSON\nDESCRIPTION: This JSON snippet outlines state changes in the Casper network, including the use of 'Identity' transforms for hashes and balances, writing a contract language value (CLValue) for a balance to zero, and incrementing a balance by a specified amount (AddUInt512). It requires familiarity with Casper's state model and value encodings. Keys are either balance addresses or hashes, transforms specify actions (identity, write, add), and the result models changes in account balances or associated hashes. Expected input is a sequence of state transform objects, outputting the new account and hash states reflected in the network state. No external dependencies are required beyond the Casper specification for state transition.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/versioned_docs/version-1.5.X/developers/json-rpc/json-rpc-transactional.md#2025-04-22_snippet_4\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"key\": \"balance-ea3c9bdcbe57f067a29609d397981b2d0fb39853a0a9f06e444b06404eadcb1a\",\n  \"transform\": \"Identity\"\n},\n{\n  \"key\": \"hash-d2dfc9409965993f9e186db762b585274dcafe439fa1321cfca08017262c8e46\",\n  \"transform\": \"Identity\"\n},\n{\n  \"key\": \"hash-f8df015ba26860a7ec8cab4ee99f079325b0bbb9ef0e7810b63d85df39da95fe\",\n  \"transform\": \"Identity\"\n},\n{\n  \"key\": \"hash-59c6451dd58463708fa0b122e97114f07fa5f609229c9d67ac9426935416fbeb\",\n  \"transform\": \"Identity\"\n},\n{\n  \"key\": \"hash-f8df015ba26860a7ec8cab4ee99f079325b0bbb9ef0e7810b63d85df39da95fe\",\n  \"transform\": \"Identity\"\n},\n{\n  \"key\": \"balance-ea3c9bdcbe57f067a29609d397981b2d0fb39853a0a9f06e444b06404eadcb1a\",\n  \"transform\": \"Identity\"\n},\n{\n  \"key\": \"balance-ecc530e74cf2185936a334aa1e0f07539aa3b33c4b547e71fc4109151755652f\",\n  \"transform\": \"Identity\"\n},\n{\n  \"key\": \"balance-ea3c9bdcbe57f067a29609d397981b2d0fb39853a0a9f06e444b06404eadcb1a\",\n  \"transform\": {\n    \"WriteCLValue\": {\n      \"cl_type\": \"U512\",\n      \"bytes\": \"00\",\n      \"parsed\": \"0\"\n    }\n  }\n},\n{\n  \"key\": \"balance-ecc530e74cf2185936a334aa1e0f07539aa3b33c4b547e71fc4109151755652f\",\n  \"transform\": {\n    \"AddUInt512\": \"100000000\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Account Hash Schema Property - JSON - JavaScript\nDESCRIPTION: This code snippet defines a JSON schema property that describes an account hash as a formatted string, with a 'description' explaining its usage and a 'type' attribute specifying it as a string. It can be included in broader schema definitions for validation of blockchain account identifiers. No external dependencies are required beyond a schema validator (if used). The expected input is always a string, representing a formatted account hash, with the output being schema validation. The snippet is intended for JavaScript/TypeScript metadata or validation layers and does not itself impose formatting constraints beyond type 'string'.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/condor/jsonrpc-comp/rpc-2.0/schema/AccountHash.json.md#2025-04-22_snippet_0\n\nLANGUAGE: JSON\nCODE:\n```\n{\n    \"description\": \"Account hash as a formatted string.\",\n    \"type\": \"string\"\n} \n```\n\n----------------------------------------\n\nTITLE: Example: Withdrawing Bid via System Auction with Optional Purse (Bash)\nDESCRIPTION: This command demonstrates withdrawing 5 CSPR from a validator bid on the Casper Testnet using the system auction contract's `withdraw_bid` entry point. While the surrounding text mentions setting an optional purse, this specific example code is identical to the previous one and shows the standard withdrawal process.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/versioned_docs/version-1.5.X/operators/becoming-a-validator/unbonding.md#2025-04-22_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nsudo -u casper casper-client put-deploy \\\n--node-address http://65.21.75.254:7777 \\\n--secret-key /etc/casper/validator_keys/secret_key.pem \\\n--chain-name casper-test \\\n--payment-amount 2500000000 \\\n--session-hash hash-93d923e336b20a4c4ca14d592b60e5bd3fe330775618290104f9beb326db7ae2 \\\n--session-entry-point withdraw_bid \\\n--session-arg \"public_key:public_key='01c297d2931fec7e22b2fb1ae3ca5afdfacc2c82ba501e8ed158eecef82b4dcdee'\" \\\n--session-arg \"amount:U512='$[5 * 1000000000]'\"\n```\n\n----------------------------------------\n\nTITLE: Cleaning Up Previous Casper Node Installation using Bash\nDESCRIPTION: A sequence of bash commands to stop the Casper node service, remove related packages (`casper-client`, `casper-node`, `casper-node-launcher`), and delete configuration and data directories to ensure a clean state before a new installation. Errors from `apt remove` for non-installed packages can be ignored.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/versioned_docs/version-1.5.X/operators/setup/install-node.md#2025-04-22_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nsudo systemctl stop casper-node-launcher.service\nsudo apt remove -y casper-client\nsudo apt remove -y casper-node\nsudo apt remove -y casper-node-launcher\nsudo rm /etc/casper/casper-node-launcher-state.toml\nsudo rm -rf /etc/casper/1_*\nsudo rm -rf /var/lib/casper/*\n```\n\n----------------------------------------\n\nTITLE: Querying Active Protocol Versions using Curl (Bash)\nDESCRIPTION: Demonstrates how to use the `curl` command to fetch the list of currently active protocol versions from the designated hosting server for a specific network (Mainnet in this example). This file (`protocol_versions`) informs scripts which version directories exist on the hosting server.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/docs/operators/setup-network/staging-files-for-new-network.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n$ curl -s genesis.casper.network/casper/protocol_versions\n1_4_5\n1_4_6\n```\n\n----------------------------------------\n\nTITLE: Verifying Docker Image for Casper NCTL\nDESCRIPTION: This snippet demonstrates how to verify the created Docker image for Casper NCTL.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/src/pages/condor/setting-up-condor-local.md#2025-04-22_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\ndocker image ls\n```\n\n----------------------------------------\n\nTITLE: Defining Gossiper Message Structure in Rust\nDESCRIPTION: Defines the enum GossiperMessage used for gossiping items across the Casper network. It includes variants for initiating gossip and responding to gossip messages.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/docs/concepts/design/networking-protocol.md#2025-04-22_snippet_2\n\nLANGUAGE: rust\nCODE:\n```\nenum GossiperMessage {\n    Gossip(Id),\n    GossipResponse {\n        item_id: Id,\n        is_already_held: bool,\n    },\n}\n```\n\n----------------------------------------\n\nTITLE: Writing Operations for Merkle Trie in Rust\nDESCRIPTION: Implementation of write operations for the Merkle trie, enabling modifications to the global state while maintaining the trie's integrity.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/versioned_docs/version-1.5.X/concepts/global-state.md#2025-04-22_snippet_2\n\nLANGUAGE: rust\nCODE:\n```\n// From execution_engine/src/storage/trie_store/operations/mod.rs\n// Writing to the trie\n```\n\n----------------------------------------\n\nTITLE: Defining Method Type Signatures in JSON\nDESCRIPTION: This JSON schema snippet specifies the structure for defining a method's type signature. It details required properties like 'access', 'args', 'entry_point_type', 'name', and 'ret'. The 'args' property is an array of parameters, while 'ret' references a component schema for the return type, 'CLType'. Dependencies include references to 'Parameter', 'EntryPointAccess', and 'EntryPointType'.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/condor/jsonrpc-comp/rpc-2.0/schema/EntryPoint.json.md#2025-04-22_snippet_0\n\nLANGUAGE: JSON\nCODE:\n```\n{\n    \"description\": \"Type signature of a method. Order of arguments matter since can be referenced by index as well as name.\",\n    \"type\": \"object\",\n    \"required\": [\n        \"access\",\n        \"args\",\n        \"entry_point_type\",\n        \"name\",\n        \"ret\"\n    ],\n    \"properties\": {\n        \"name\": {\n            \"type\": \"string\"\n        },\n        \"args\": {\n            \"type\": \"array\",\n            \"items\": {\n                \"$ref\": \"#/components/schemas/Parameter\"\n            }\n        },\n        \"ret\": {\n            \"$ref\": \"#/components/schemas/CLType\"\n        },\n        \"access\": {\n            \"$ref\": \"#/components/schemas/EntryPointAccess\"\n        },\n        \"entry_point_type\": {\n            \"$ref\": \"#/components/schemas/EntryPointType\"\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Block Synchronizer Status Schema in JSON\nDESCRIPTION: JSON schema definition that specifies the structure for block synchronizer status. It includes two main properties: 'historical' and 'forward', both of which can either reference a BlockSyncStatus schema or be null. The schema enforces strict property validation by setting additionalProperties to false.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/condor/jsonrpc-comp/rpc-1.5/schema/BlockSynchronizerStatus.json.md#2025-04-22_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"description\": \"The status of the block synchronizer.\",\n    \"type\": \"object\",\n    \"properties\": {\n        \"historical\": {\n            \"description\": \"The status of syncing a historical block, if any.\",\n            \"anyOf\": [\n                {\n                    \"$ref\": \"#/components/schemas/BlockSyncStatus\"\n                },\n                {\n                    \"type\": \"null\"\n                }\n            ]\n        },\n        \"forward\": {\n            \"description\": \"The status of syncing a forward block, if any.\",\n            \"anyOf\": [\n                {\n                    \"$ref\": \"#/components/schemas/BlockSyncStatus\"\n                },\n                {\n                    \"type\": \"null\"\n                }\n            ]\n        }\n    },\n    \"additionalProperties\": false\n}\n```\n\n----------------------------------------\n\nTITLE: Getting casper-client CLI Help - Bash\nDESCRIPTION: Displays the full list of available casper-client CLI commands and arguments. Helpful for discovering functionality or verifying correct installation.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/versioned_docs/version-1.5.X/developers/prerequisites.md#2025-04-22_snippet_16\n\nLANGUAGE: bash\nCODE:\n```\ncasper-client --help\n```\n\n----------------------------------------\n\nTITLE: Defining JSON Schema for Deploy Transformation\nDESCRIPTION: A JSON schema definition that specifies the structure for a transformation performed during deploy execution. It requires a 'key' string property representing the formatted string of the Key, and a 'transform' property that references a TransformKindV1 schema definition.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/condor/jsonrpc-comp/rpc-2.0/schema/TransformV1.json.md#2025-04-22_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"description\": \"A transformation performed while executing a deploy.\",\n    \"type\": \"object\",\n    \"required\": [\n        \"key\",\n        \"transform\"\n    ],\n    \"properties\": {\n        \"key\": {\n            \"description\": \"The formatted string of the `Key`.\",\n            \"type\": \"string\"\n        },\n        \"transform\": {\n            \"description\": \"The transformation.\",\n            \"allOf\": [\n                {\n                    \"$ref\": \"#/components/schemas/TransformKindV1\"\n                }\n            ]\n        }\n    },\n    \"additionalProperties\": false\n}\n```\n\n----------------------------------------\n\nTITLE: Defining NextUpgrade and ActivationPoint Schemas in JSON\nDESCRIPTION: These schemas define the structure for information about the next protocol upgrade and the activation point for protocol versions.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/condor/jsonrpc-comp/rpc-2.0/schema/components.json.md#2025-04-22_snippet_78\n\nLANGUAGE: JSON\nCODE:\n```\n\"NextUpgrade\": {\n    \"description\": \"Information about the next protocol upgrade.\",\n    \"type\": \"object\",\n    \"required\": [\n        \"activation_point\",\n        \"protocol_version\"\n    ],\n    \"properties\": {\n        \"activation_point\": {\n            \"$ref\": \"#/components/schemas/ActivationPoint\"\n        },\n        \"protocol_version\": {\n            \"$ref\": \"#/components/schemas/ProtocolVersion\"\n        }\n    }\n},\n\"ActivationPoint\": {\n    \"description\": \"The first era to which the associated protocol version applies.\",\n    \"anyOf\": [\n        {\n            \"description\": \"Era id.\",\n            \"allOf\": [\n                {\n                    \"$ref\": \"#/components/schemas/EraId\"\n                }\n            ]\n        },\n        {\n            \"description\": \"Genesis timestamp.\",\n            \"allOf\": [\n                {\n                    \"$ref\": \"#/components/schemas/Timestamp\"\n                }\n            ]\n        }\n    ]\n}\n```\n\n----------------------------------------\n\nTITLE: Activating Bid using Compiled Wasm in Bash\nDESCRIPTION: This command activates a validator's bid using a compiled Wasm file. It requires specifying network details, payment amount, and the path to the compiled Wasm file.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/versioned_docs/version-2.0.0/operators/becoming-a-validator/recovering.md#2025-04-22_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\nsudo -u casper casper-client put-deploy \\\n--node-address <HOST:PORT> \\\n--secret-key <PATH> \\\n--chain-name <CHAIN_NAME> \\\n--payment-amount <PAYMENT_AMOUNT_IN_MOTES> \\\n--session-path \"$HOME/casper-node/target/wasm32-unknown-unknown/release/activate_bid.wasm\" \\\n--session-arg \"validator:public_key='$(cat /etc/casper/validator_keys/public_key_hex)'\"\n```\n\n----------------------------------------\n\nTITLE: Validator Changes Response\nDESCRIPTION: Example response showing validator status changes including public key and change type within an era.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/docs/developers/json-rpc/json-rpc-pos.md#2025-04-22_snippet_3\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"id\": 1,\n  \"jsonrpc\": \"2.0\",\n  \"result\": {\n    \"name\": \"info_get_validator_changes_result\",\n    \"value\": {\n      \"api_version\": \"2.0.0\",\n      \"changes\": [\n        {\n          \"public_key\": \"01d9bf2148748a85c89da5aad8ee0b0fc2d105fd39d41a4c796536354f0ae2900c\",\n          \"status_changes\": [\n            {\n              \"era_id\": 1,\n              \"validator_change\": \"Added\"\n            }\n          ]\n        }\n      ]\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Compiling and Building the Fungible Token Contract\nDESCRIPTION: These commands prepare the development environment, compile the contract, and build the WebAssembly file.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/versioned_docs/version-2.0.0/resources/tokens/cep18/full-tutorial.md#2025-04-22_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\ncd cep18\nmake prepare\nmake build-contracts\n```\n\n----------------------------------------\n\nTITLE: Defining Gas Reservation Data Structure - JSON Schema - JSON\nDESCRIPTION: Defines a JSON schema for a gas reservation object, specifying the required properties: 'receipt' (a reference to a Digest schema), 'reservation_kind' (an unsigned 8-bit integer with a minimum value of 0), and 'reservation_data' (a reference to a Bytes schema). This schema enforces that all three fields are present for valid gas reservation objects. Dependencies include the referenced Digest and Bytes schemas in the same API specification. Input should be a JSON object adhering to this structure, and output is typically schema validation results. Users must ensure referenced schemas are available in the components section.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/condor/jsonrpc-comp/rpc-2.0/schema/ReservationKind.json.md#2025-04-22_snippet_0\n\nLANGUAGE: JSON\nCODE:\n```\n{\\n    \\\"description\\\": \\\"Container for bytes recording location, type and data for a gas reservation\\\",\\n    \\\"type\\\": \\\"object\\\",\\n    \\\"required\\\": [\\n        \\\"receipt\\\",\\n        \\\"reservation_data\\\",\\n        \\\"reservation_kind\\\"\\n    ],\\n    \\\"properties\\\": {\\n        \\\"receipt\\\": {\\n            \\\"$ref\\\": \\\"#/components/schemas/Digest\\\"\\n        },\\n        \\\"reservation_kind\\\": {\\n            \\\"type\\\": \\\"integer\\\",\\n            \\\"format\\\": \\\"uint8\\\",\\n            \\\"minimum\\\": 0\\n        },\\n        \\\"reservation_data\\\": {\\n            \\\"$ref\\\": \\\"#/components/schemas/Bytes\\\"\\n        }\\n    }\\n} \n```\n\n----------------------------------------\n\nTITLE: Defining Action Thresholds for Accounts - OpenAPI Schema - YAML/JSON\nDESCRIPTION: Defines the 'EntityActionThresholds' schema, indicating key-management, deployment, and upgrade-management thresholds for Casper accounts. Each threshold specifies the minimum weight required for the respective action to succeed. The schema enforces the presence of these fields and references 'EntityAssociatedKeyWeight', which must be an integer in the acceptable range.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/condor/jsonrpc-comp/rpc-2.0/schema/components.json.md#2025-04-22_snippet_52\n\nLANGUAGE: yaml\nCODE:\n```\nEntityActionThresholds:\n  description: \"Thresholds that have to be met when executing an action of a certain type.\"\n  type: object\n  required:\n    - deployment\n    - key_management\n    - upgrade_management\n  properties:\n    deployment:\n      description: \"Threshold for deploy execution.\"\n      allOf:\n        - $ref: \"#/components/schemas/EntityAssociatedKeyWeight\"\n    upgrade_management:\n      description: \"Threshold for upgrading contracts.\"\n      allOf:\n        - $ref: \"#/components/schemas/EntityAssociatedKeyWeight\"\n    key_management:\n      description: \"Threshold for managing action threshold.\"\n      allOf:\n        - $ref: \"#/components/schemas/EntityAssociatedKeyWeight\"\n```\n\n----------------------------------------\n\nTITLE: Checking Trie Download Progress via Metrics using Bash\nDESCRIPTION: Uses `curl` to fetch metrics from the node's local metrics endpoint (port 8888) and `grep` to filter for lines containing `trie_or_chunk`. This helps monitor the progress of downloading the state trie during initial synchronization.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/versioned_docs/version-1.5.X/operators/setup/install-node.md#2025-04-22_snippet_17\n\nLANGUAGE: bash\nCODE:\n```\n$ curl -s 127.0.0.1:8888/metrics | grep trie_or_chunk\n```\n\n----------------------------------------\n\nTITLE: Build Output Display\nDESCRIPTION: Example output showing successful compilation of the contract to WebAssembly format.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/versioned_docs/version-1.5.X/resources/advanced/cross-contract.md#2025-04-22_snippet_10\n\nLANGUAGE: bash\nCODE:\n```\ncd contract && cargo build --release --target wasm32-unknown-unknown\n    Finished release [optimized] target(s) in 0.13s\nwasm-strip contract/target/wasm32-unknown-unknown/release/contract.wasm 2>/dev/null | true\n```\n\n----------------------------------------\n\nTITLE: Example Sign-Deploy Command with Real Values\nDESCRIPTION: Practical example of the sign-deploy command showing how to add a second signature to a deploy file using actual file paths.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/docs/developers/cli/transfers/multisig-deploy-transfer.md#2025-04-22_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\ncasper-client sign-deploy \\\n--input transfer.deploy \\\n--secret-key ~/KEYS/multi-sig/keys/user_1_secret_key.pem \\\n--output transfer2.deploy\n```\n\n----------------------------------------\n\nTITLE: Querying State Root Hash\nDESCRIPTION: Retrieves the current state root hash from a network node.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/versioned_docs/version-1.5.X/resources/tokens/cep18/full-tutorial.md#2025-04-22_snippet_9\n\nLANGUAGE: bash\nCODE:\n```\ncasper-client get-state-root-hash --node-address http://<HOST:PORT>\n```\n\n----------------------------------------\n\nTITLE: Defining JSON Schema for Node Status\nDESCRIPTION: This JSON schema defines various properties and their types returned by the \"info_get_status\" RPC call, which provides information about the current state of a node on the Casper Network. Dependencies include referenced components like PublicKey, TimeDiff, and NextUpgrade, which are part of the wider schema definitions. Inputs are expected as JSON objects, and outputs are defined by this schema.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/condor/jsonrpc-comp/rpc-1.5/schema.json.md#2025-04-22_snippet_11\n\nLANGUAGE: json\nCODE:\n```\n{ \"our_public_signing_key\": { \"description\": \"Our public signing key.\", \"anyOf\": [ { \"$ref\": \"#/components/schemas/PublicKey\" }, { \"type\": \"null\" } ] }, \"round_length\": { \"description\": \"The next round length if this node is a validator.\", \"anyOf\": [ { \"$ref\": \"#/components/schemas/TimeDiff\" }, { \"type\": \"null\" } ] }, \"next_upgrade\": { \"description\": \"Information about the next scheduled upgrade.\", \"anyOf\": [ { \"$ref\": \"#/components/schemas/NextUpgrade\" }, { \"type\": \"null\" } ] }, \"uptime\": { \"description\": \"Time that passed since the node has started.\", \"$ref\": \"#/components/schemas/TimeDiff\" }, \"reactor_state\": { \"description\": \"The current state of node reactor.\", \"$ref\": \"#/components/schemas/ReactorState\" }, \"last_progress\": { \"description\": \"Timestamp of the last recorded progress in the reactor.\", \"$ref\": \"#/components/schemas/Timestamp\" }, \"available_block_range\": { \"description\": \"The available block range in storage.\", \"$ref\": \"#/components/schemas/AvailableBlockRange\" }, \"block_sync\": { \"description\": \"The status of the block synchronizer builders.\", \"$ref\": \"#/components/schemas/BlockSynchronizerStatus\" } }, \"additionalProperties\": false }\n```\n\n----------------------------------------\n\nTITLE: Account JSON Structure\nDESCRIPTION: This JSON snippet represents the structure of a Casper account with associated keys and action thresholds. It provides an example of the account hash, action thresholds, associated keys, their weights, and named keys.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/versioned_docs/version-2.0.0/resources/advanced/multi-sig/multi-sig-workflow.md#2025-04-22_snippet_8\n\nLANGUAGE: json\nCODE:\n```\n\"Account\": {\n  \"account_hash\": \"account-hash-1ed5a1c39bea93c105f2d22c965a84b205b36734a377d05dbb103b6bfaa595a7\",\n  \"action_thresholds\": {\n    \"deployment\": 2,\n    \"key_management\": 3\n  },\n  \"associated_keys\": [\n    {\n      \"account_hash\": \"account-hash-04a9691a9f8f05a0f08bd686f188b27c7dbcd644b415759fd3ca043d916ea02f\",\n      \"weight\": 1\n    },\n    {\n      \"account_hash\": \"account-hash-1ed5a1c39bea93c105f2d22c965a84b205b36734a377d05dbb103b6bfaa595a7\",\n      \"weight\": 3\n    },\n    {\n      \"account_hash\": \"account-hash-e2d00525cac31ae2756fb155f289d276c6945b6914923fe275de0cb127bffee7\",\n      \"weight\": 1\n    }\n  ],\n  \"main_purse\": \"uref-8294864177c2c1ec887a11dae095e487b5256ce6bd2a1f2740d0e4f28bd3251c-007\",\n  \"named_keys\": []\n}\n```\n\n----------------------------------------\n\nTITLE: Retrieving Validator Changes with info_get_validator_changes\nDESCRIPTION: JSON-RPC request to fetch status changes of active validators during the current era. Returns changes like Added, Removed, Banned, CannotPropose, and SeenAsFaulty.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/versioned_docs/version-1.5.X/developers/json-rpc/json-rpc-pos.md#2025-04-22_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n{\n  \"id\": 1,\n  \"jsonrpc\": \"2.0\",\n  \"method\": \"info_get_validator_changes\",\n  \"params\": []\n}\n```\n\n----------------------------------------\n\nTITLE: Querying Contract State with Casper Client\nDESCRIPTION: Bash command for querying the global state of a Casper network to check the message value in a contract after cross-contract communication. The command specifies the node address, state root hash, and key to query.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/docs/resources/advanced/cross-contract.md#2025-04-22_snippet_24\n\nLANGUAGE: bash\nCODE:\n```\ncasper-client query-global-state \\\n  --node-address http://136.243.187.84:7777 \\\n  --state-root-hash 2f3e100324deb999107229dbec5c4b724653174328c99ea0836931248c3cc9cb \\\n  --key hash-b7a06298cc71d4cac05929cc0713dfd5a541c68b71cb500cd04547b5cd0385ea -q \"message\"\n```\n\n----------------------------------------\n\nTITLE: Listing supported RPCs using Casper client\nDESCRIPTION: This command uses the Casper client to list all currently supported RPCs. It requires specifying the node address as a parameter.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/versioned_docs/version-2.0.0/developers/json-rpc/index.md#2025-04-22_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\ncasper-client list-rpcs --node-address <HOST:PORT>\n```\n\n----------------------------------------\n\nTITLE: Block Range Schema Definition in JSON\nDESCRIPTION: Defines a JSON schema for a block range object with two required properties: 'low' and 'high'. Both properties must be non-negative 64-bit unsigned integers representing the inclusive lower and upper bounds of the range. Additional properties are not allowed.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/condor/jsonrpc-comp/rpc-1.5/schema/AvailableBlockRange.json.md#2025-04-22_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"description\": \"An unbroken, inclusive range of blocks.\",\n    \"type\": \"object\",\n    \"required\": [\n        \"high\",\n        \"low\"\n    ],\n    \"properties\": {\n        \"low\": {\n            \"description\": \"The inclusive lower bound of the range.\",\n            \"type\": \"integer\",\n            \"format\": \"uint64\",\n            \"minimum\": 0\n        },\n        \"high\": {\n            \"description\": \"The inclusive upper bound of the range.\",\n            \"type\": \"integer\",\n            \"format\": \"uint64\",\n            \"minimum\": 0\n        }\n    },\n    \"additionalProperties\": false\n}\n```\n\n----------------------------------------\n\nTITLE: Running Casper Contract and Session Tests via Makefile - Bash\nDESCRIPTION: Invokes the test suite using 'make test', assuming a Makefile is present. The Makefile automates the build, deployment, and test steps for the Casper contract/session code. Ensure you have GNU Make installed and configured to run tests for your Rust project. All prerequisites (build outputs, Wasm compilation, and so on) are handled according to the Makefile recipe.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/docs/developers/writing-onchain-code/testing-session-code.md#2025-04-22_snippet_11\n\nLANGUAGE: bash\nCODE:\n```\nmake test\n```\n\n----------------------------------------\n\nTITLE: Accessing Session Arguments in Casper\nDESCRIPTION: Shows how to access session arguments within a Casper smart contract using the runtime module.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/versioned_docs/version-1.5.X/resources/moving-to-casper.md#2025-04-22_snippet_11\n\nLANGUAGE: bash\nCODE:\n```\nlet uref: URef = runtime::get_key(Key_Name)\n```\n\n----------------------------------------\n\nTITLE: Defining Contract Wasm Byte Container - JSON\nDESCRIPTION: This code defines a JSON schema object representing a container for a contract's Wasm bytes with required fields for the raw bytes and their kind. It references two other schema types, 'ByteCodeKind' and 'Bytes', as dependencies to validate the structure. The schema ensures that any compliant JSON object includes both the bytecode data and metadata describing its type, making it suitable for applications interfacing with smart contract data storage.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/condor/jsonrpc-comp/rpc-2.0/schema/ByteCode.json.md#2025-04-22_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"description\": \"A container for contract's Wasm bytes.\",\n    \"type\": \"object\",\n    \"required\": [\n        \"bytes\",\n        \"kind\"\n    ],\n    \"properties\": {\n        \"kind\": {\n            \"$ref\": \"#/components/schemas/ByteCodeKind\"\n        },\n        \"bytes\": {\n            \"$ref\": \"#/components/schemas/Bytes\"\n        }\n    }\n} \n```\n\n----------------------------------------\n\nTITLE: Defining Validator Weight Schema with References in JSON\nDESCRIPTION: This JSON snippet declares a schema for a validator object that requires both a public key and a weight, referencing separate schemas for public key and U512 types. Dependencies include the existence of schemas at '#/components/schemas/PublicKey' and '#/components/schemas/U512'. The schema enforces strict property definitions, requires both fields, and disallows extra properties; expected input is a validator JSON object conforming to this structure, output is schema validation. Limitations include reliance on external schema definitions and inability to add additional properties.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/condor/jsonrpc-comp/rpc-2.0/schema/JsonValidatorWeights.json.md#2025-04-22_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"description\": \"A validator's weight.\",\n    \"type\": \"object\",\n    \"required\": [\n        \"public_key\",\n        \"weight\"\n    ],\n    \"properties\": {\n        \"public_key\": {\n            \"$ref\": \"#/components/schemas/PublicKey\"\n        },\n        \"weight\": {\n            \"$ref\": \"#/components/schemas/U512\"\n        }\n    },\n    \"additionalProperties\": false\n} \n```\n\n----------------------------------------\n\nTITLE: Transform Kinds Schema Definition\nDESCRIPTION: Detailed schema definition for different types of transformations that can occur during execution, including Identity, Write, numeric additions, key operations, and failure cases.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/condor/jsonrpc-comp/rpc-2.0/schema/components.json.md#2025-04-22_snippet_44\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"TransformKindV2\": {\n        \"description\": \"Representation of a single transformation occurring during execution.\\n\\nNote that all arithmetic variants of `TransformKindV2` are commutative which means that a given collection of them can be executed in any order to produce the same end result.\",\n        \"oneOf\": [\n            {\n                \"description\": \"An identity transformation that does not modify a value in the global state.\\n\\nCreated as a result of reading from the global state.\",\n                \"type\": \"string\",\n                \"enum\": [\n                    \"Identity\"\n                ]\n            },\n            {\n                \"description\": \"Writes a new value in the global state.\",\n                \"type\": \"object\",\n                \"required\": [\n                    \"Write\"\n                ],\n                \"properties\": {\n                    \"Write\": {\n                        \"$ref\": \"#/components/schemas/StoredValue\"\n                    }\n                },\n                \"additionalProperties\": false\n            }\n        ]\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Editing Sudoers File in Bash\nDESCRIPTION: Demonstrates how to edit the sudoers file to grant no-password sudo access to the new user. This command is executed as a superuser and requires careful editing to prevent syntax errors.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/docs/operators/setup/non-root-user.md#2025-04-22_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nsudo visudo\n```\n\n----------------------------------------\n\nTITLE: Condor Method Entry Point for Casper Token Contract\nDESCRIPTION: Entry point definition for a method named 'condor' that returns a String value. Takes no parameters and requires caller payment, potentially used for version or metadata retrieval.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/docs/developers/cli/sending-transactions.md#2025-04-22_snippet_9\n\nLANGUAGE: JSON\nCODE:\n```\n{\n  \"key\": \"entry-point-v1-entity-contract-363996106630892a964565574fcdfd2435f21a17a3ad1ed2054146e7d8461640-45ffbf1854843af5eeec6b167e14a9e97bdb526e66205b07559d4fb3928fb11e\",\n  \"kind\": {\n    \"Write\": {\n      \"EntryPoint\": {\n        \"V1CasperVm\": {\n          \"name\": \"condor\",\n          \"args\": [],\n          \"ret\": \"String\",\n          \"access\": \"Public\",\n          \"entry_point_type\": \"Called\",\n          \"entry_point_payment\": \"Caller\"\n        }\n      }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Deploying Session Code with casper-client (Bash)\nDESCRIPTION: This command runs the casper-client put-deploy process to send session Wasm code to the Casper network. Required parameters include node address, chain name, secret key, payment amount, session Wasm path, and session arguments. The block also provides --help for assistance. The deploy command expects valid values for all fields, and Casper client installation is required.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/versioned_docs/version-1.5.X/developers/writing-onchain-code/writing-session-code.md#2025-04-22_snippet_8\n\nLANGUAGE: bash\nCODE:\n```\ncasper-client put-deploy \\\n    --node-address <HOST:PORT> \\\n    --chain-name <NETWORK-NAME> \\\n    --secret-key <PATH> \\\n    --payment-amount <PAYMENT-AMOUNT> \\\n    --session-path <SESSION-PATH> \\\n    --session-arg <\"NAME:TYPE='VALUE'\" OR \"NAME:TYPE=null\">\n```\n\nLANGUAGE: bash\nCODE:\n```\ncasper-client put-deploy --help\n```\n\n----------------------------------------\n\nTITLE: Querying Account Info with Casper CLI\nDESCRIPTION: Command to retrieve account information using the casper-client CLI tool. Requires specifying a node address and public key. The node address should include the host and port (default 7777), while the public key can be provided directly or via a file path.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/versioned_docs/version-1.5.X/concepts/accounts-and-keys.md#2025-04-22_snippet_12\n\nLANGUAGE: bash\nCODE:\n```\ncasper-client get-account-info \\\n--node-address <HOST:PORT>  \\\n--public-key <FORMATTED STRING or PATH>\n```\n\n----------------------------------------\n\nTITLE: TransformKindV2 Data Structure Definition\nDESCRIPTION: Updated version of transform types with simplified operations (0-9) including identity, write, numeric additions, key management and pruning operations.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/versioned_docs/version-2.0.0/concepts/serialization/types.md#2025-04-22_snippet_55\n\nLANGUAGE: markdown\nCODE:\n```\n| Transform Type | Serialization | Description |\n| -------------- | ------------- | ----------- |\n```\n\n----------------------------------------\n\nTITLE: Memory Copy Operation Implementation in WebAssembly\nDESCRIPTION: Implements a memory copy operation similar to memcpy in WebAssembly. Handles different alignment cases and optimizes copying for aligned memory blocks.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/versioned_docs/version-2.0.0/developers/json-rpc/json-rpc-transactional.md#2025-04-22_snippet_14\n\nLANGUAGE: webassembly\nCODE:\n```\n8c0301087f418cbb041008024002402002410f4b0d0041c497021008200021030c010b41c6850510082000410020006b41037122046a210502402004450d0041d00f10082000210320012106034041fce5021008200320062d00003a0000200641016a2106200341016a22032005490d000b0b2005200220046b2207417c7122086a210302400240200120046a22094103712206450d0041a69702100820084101480d0141fa3d10082009417c71220a41046a21014100200641037422026b4118712104200a280200210603404198f9021008200520062002762001280200220620047472360200200141046a2101200541046a22052003490d0041b8910210080c020b0b41a69702100820084101480d0041c409100820092101034041fce502100820052001280200360200200141046a2101200541046a22052003490d000b0b20074103712102200920086a21010b02402002450d00419c0e1008200320026a2105034041fce5021008200320012d00003a0000200141016a2101200341016a22032005490d000b0b20000b\n```\n\n----------------------------------------\n\nTITLE: Bash Command Example for Casper Client\nDESCRIPTION: Example of a Casper client command for making a token transfer, showing proper command-line formatting with backslashes for line continuation.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/README/STANDARDS.md#2025-04-22_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\ncasper-client make-transfer --amount 2500000000 \\\n--secret-key keys1/secret_key.pem \\\n--chain-name casper-test \\\n--target-account 019a33f123ae936ccd29d8fa5438f03a86b6e34fe4346219e571d5ac42cbff5be6 \\\n--transfer-id 3 \\\n--payment-amount 100000000\n```\n\n----------------------------------------\n\nTITLE: Sample get-entity Request\nDESCRIPTION: Example of querying detailed contract information with actual values for node address and entity identifier.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/versioned_docs/version-2.0.0/developers/cli/querying-global-state.md#2025-04-22_snippet_14\n\nLANGUAGE: bash\nCODE:\n```\ncasper-client get-entity \\\n--node-address http://localhost:11101 \\\n--entity-identifier entity-contract-a1d0bf9d96f3efc9ea67f627df3a7cba390bfc582956032db91060ca5d413e68\n```\n\n----------------------------------------\n\nTITLE: Describing JSON Schema for Block Reward Signatures\nDESCRIPTION: The JSON snippet defines a schema for finality signatures rewarded in network blocks. It comprises a vector of `SingleBlockRewardedSignatures`, detailing how each signature pertains to a different ancestor block, starting with the parent and moving up the chain. Dependencies include the referenced `SingleBlockRewardedSignatures` schema. Inputs determine ancestor-specific signatures, and outputs define the reward schema applied to a particular block.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/condor/jsonrpc-comp/rpc-2.0/schema/RewardedSignatures.json.md#2025-04-22_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"description\": \"Describes finality signatures that will be rewarded in a block. Consists of a vector of `SingleBlockRewardedSignatures`, each of which describes signatures for a single ancestor block. The first entry represents the signatures for the parent block, the second for the parent of the parent, and so on.\",\n    \"type\": \"array\",\n    \"items\": {\n        \"$ref\": \"#/components/schemas/SingleBlockRewardedSignatures\"\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Exporting Footer Items - Docusaurus Configuration - JavaScript\nDESCRIPTION: This code fragment configures a footer section in Docusaurus via a JavaScript object, typically as part of an exported structure in a config file. The 'title' defines the footer category, and the 'items' array contains link objects specifying the display label and route. Each item exposes navigation to documentation sections or external resources. All item routes ('to') should correspond to valid pathnames or URLs within the documentation ecosystem.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/README/DEVELOPERS.md#2025-04-22_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\n    title: 'Docs',\n    items: [\n    {\n        label: 'Style Guide',\n        to: 'docs/',\n    },\n\n```\n\n----------------------------------------\n\nTITLE: Return Value Implementation in Casper\nDESCRIPTION: Shows how to return values from a Casper contract entry point using the runtime::ret function.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/versioned_docs/version-2.0.0/resources/moving-to-casper.md#2025-04-22_snippet_1\n\nLANGUAGE: rust\nCODE:\n```\nruntime::ret(value);\n```\n\n----------------------------------------\n\nTITLE: Defining Schema for Public Key Weight in JSON\nDESCRIPTION: This JSON object defines the schema for a field representing the weight associated with a public key within a Casper Network account. It specifies the data type as an unsigned 8-bit integer (`type: \"integer\", format: \"uint8\"`), includes a descriptive text explaining its purpose, and sets a constraint that the value must be non-negative (`minimum: 0`). This schema is likely used for data validation or API documentation within the Casper Network.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/condor/jsonrpc-comp/rpc-2.0/schema/EntityAssociatedKeyWeight.json.md#2025-04-22_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"description\": \"The weight associated with public keys in an account's associated keys.\",\n    \"type\": \"integer\",\n    \"format\": \"uint8\",\n    \"minimum\": 0\n} \n```\n\n----------------------------------------\n\nTITLE: Testing the CEP-18 Fungible Token Contract in Bash\nDESCRIPTION: Command to build and verify the compiled contract through testing.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/docs/resources/tokens/cep18/full-tutorial.md#2025-04-22_snippet_8\n\nLANGUAGE: bash\nCODE:\n```\nmake test\n```\n\n----------------------------------------\n\nTITLE: Chain Get Block Response Example\nDESCRIPTION: Example response from the chain_get_block method showing the detailed block structure including header, body, and signatures.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/docs/developers/json-rpc/json-rpc-informational.md#2025-04-22_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"id\": 1,\n  \"jsonrpc\": \"2.0\",\n  \"result\": {\n    \"name\": \"chain_get_block_result\",\n    \"value\": {\n      \"api_version\": \"2.0.0\",\n      \"block_with_signatures\": {\n        \"block\": {\n          \"Version2\": {\n            \"hash\": \"0744fcb72af43c5cc372039bc5a8bfee48808a9ce414acc0d6338a628c20eb42\",\n            \"header\": {\n              \"parent_hash\": \"0707070707070707070707070707070707070707070707070707070707070707\",\n              \"state_root_hash\": \"0808080808080808080808080808080808080808080808080808080808080808\",\n              \"body_hash\": \"48859fb4865d8637d6a35cb224e222cd0e1b1c2dd72928932c1e35ac0550818b\",\n              \"random_bit\": true,\n              \"accumulated_seed\": \"ac979f51525cfd979b14aa7dc0737c5154eabe0db9280eceaa8dc8d2905b20d5\",\n              \"era_end\": {\n                \"equivocators\": [\n                  \"013b6a27bcceb6a42d62a3a8d02a6f0d73653215771de243a63ac048a18b59da29\"\n                ],\n                \"inactive_validators\": [\n                  \"018139770ea87d175f56a35466c34c7ecccb8d8a91b4ee37a25df60f5b8fc9b394\"\n                ],\n                \"next_era_validator_weights\": [\n                  {\n                    \"validator\": \"013b6a27bcceb6a42d62a3a8d02a6f0d73653215771de243a63ac048a18b59da29\",\n                    \"weight\": \"123\"\n                  },\n                  {\n                    \"validator\": \"016e7a1cdd29b0b78fd13af4c5598feff4ef2a97166e3ca6f2e4fbfccd80505bf1\",\n                    \"weight\": \"456\"\n                  },\n                  {\n                    \"validator\": \"018a875fff1eb38451577acd5afee405456568dd7c89e090863a0557bc7af49f17\",\n                    \"weight\": \"789\"\n                  }\n                ],\n                \"rewards\": {},\n                \"next_era_gas_price\": 1\n              },\n              \"timestamp\": \"2020-11-17T00:39:24.072Z\",\n              \"era_id\": 1,\n              \"height\": 10,\n              \"protocol_version\": \"1.0.0\",\n              \"proposer\": \"01d9bf2148748a85c89da5aad8ee0b0fc2d105fd39d41a4c796536354f0ae2900c\",\n              \"current_gas_price\": 1,\n              \"last_switch_block_hash\": \"0a0a0a0a0a0a0a0a0a0a0a0a0a0a0a0a0a0a0a0a0a0a0a0a0a0a0a0a0a0a0a0a\"\n            },\n            \"body\": {\n              \"transactions\": {\n                \"0\": [\n                  {\n                    \"Version1\": \"1414141414141414141414141414141414141414141414141414141414141414\"\n                  }\n                ],\n                \"1\": [\n                  {\n                    \"Version1\": \"1515151515151515151515151515151515151515151515151515151515151515\"\n                  }\n                ],\n                \"2\": [\n                  {\n                    \"Version1\": \"1616161616161616161616161616161616161616161616161616161616161616\"\n                  }\n                ],\n                \"3\": [\n                  {\n                    \"Version1\": \"1717171717171717171717171717171717171717171717171717171717171717\"\n                  }\n                ]\n              },\n              \"rewarded_signatures\": []\n            }\n          }\n        },\n        \"proofs\": [\n          {\n            \"public_key\": \"01d9bf2148748a85c89da5aad8ee0b0fc2d105fd39d41a4c796536354f0ae2900c\",\n            \"signature\": \"01e18ca03d2ef0238a6a2460a222e0b818406bda99d4c05502c80232013559b926d1c8bca6bf65386f54a847d7850cb76c0c5fd5e633c34c749b8b9958a638d806\"\n          }\n        ]\n      }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Initializing Casper Node Connection in JavaScript\nDESCRIPTION: Creates a CasperClient instance to connect to a Casper node's RPC endpoint on port 7777.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/versioned_docs/version-1.5.X/developers/dapps/technology-stack.md#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconst client = new CasperClient(\"http://NODE_ADDRESS:7777/rpc\");\n```\n\n----------------------------------------\n\nTITLE: Sample JSON Response for put-transaction Session - JSON\nDESCRIPTION: This JSON object is the typical response returned after successfully submitting a smart contract transaction to the Casper NCTL network using the put-transaction command. It includes fields such as 'jsonrpc', 'id', and a 'result' object containing 'api_version' and the computed 'transaction_hash'. This transaction hash is essential for subsequent status checks and verification.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/versioned_docs/version-2.0.0/developers/dapps/nctl-test.md#2025-04-22_snippet_3\n\nLANGUAGE: json\nCODE:\n```\n{\\n  \\\"jsonrpc\\\": \\\"2.0\\\",\\n  \\\"id\\\": 1294011212530641270,\\n  \\\"result\\\": {\\n    \\\"api_version\\\": \\\"2.0.0\\\",\\n    \\\"transaction_hash\\\": {\\n      \\\"Version1\\\": \\\"efad4a969064b5f8189ea4d6dd2fba2926d01d583a35178c07d7b827de16789e\\\"\\n    }\\n  }\\n}\n```\n\n----------------------------------------\n\nTITLE: Example of Custom Validated JSON Schema for CEP-78 NFTs\nDESCRIPTION: This JSON schema demonstrates how to define custom properties for NFT metadata validation. The schema must contain a top-level 'properties' field with each property defining a name, description, and whether it's required.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/versioned_docs/version-2.0.0/resources/tokens/cep78/modalities.md#2025-04-22_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"properties\": {\n    \"deity_name\": {\n      \"name\": \"deity_name\",\n      \"description\": \"The name of deity from a particular pantheon.\",\n      \"required\": true\n    },\n    \"mythology\": {\n      \"name\": \"mythology\",\n      \"description\": \"The mythology the deity belongs to.\",\n      \"required\": true\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Constants in Casper Session Code\nDESCRIPTION: Example of defining a constant in Rust for Casper Network session code.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/versioned_docs/version-2.0.0/developers/writing-onchain-code/writing-session-code.md#2025-04-22_snippet_2\n\nLANGUAGE: rust\nCODE:\n```\nconst ASSOCIATED_ACCOUNT: &str = \"deployment-account\";\n```\n\n----------------------------------------\n\nTITLE: Running Development Server\nDESCRIPTION: Command to start the development server for testing the application locally.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/versioned_docs/version-2.0.0/developers/dapps/template-frontend.md#2025-04-22_snippet_19\n\nLANGUAGE: bash\nCODE:\n```\nvite dev\n```\n\n----------------------------------------\n\nTITLE: Node Status Response Example\nDESCRIPTION: Sample JSON response from the node's /status endpoint showing synchronization status and network details.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/versioned_docs/version-2.0.0/operators/setup/joining.md#2025-04-22_snippet_3\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"api_version\": \"1.4.3\",\n  \"chainspec_name\": \"casper-test\",\n  \"starting_state_root_hash\": \"e2218b6bdb8137a178f242e9de24ef5db06af7925e8e4c65fa82d41df38f4576\",\n  \"peers\": [\n    {\n      \"node_id\": \"tls:0097..b253\",\n      \"address\": \"18.163.249.168:35000\"\n    },\n    {\n      \"node_id\": \"tls:ff95..c014\",\n      \"address\": \"93.186.201.14:35000\"\n    }\n  ],\n  \"last_added_block_info\": {\n    \"hash\": \"8280de05cb34071f276fbe7c69a07cb325ddd373f685877911238b614bdcc5b1\",\n    \"timestamp\": \"2022-01-04T15:33:08.224Z\",\n    \"era_id\": 3240,\n    \"height\": 430162,\n    \"state_root_hash\": \"ec4ff5c4d0a9021984b56e2b6de4a57188101c24e09b765c3fee740353690076\",\n    \"creator\": \"01ace6578907bfe6eba3a618e863bbe7274284c88e405e2857be80dd094726a223\"\n  },\n  \"our_public_signing_key\": \"01cb41ee07d1827e243588711d45040fe46402bf3901fb550abfd08d1341700270\",\n  \"round_length\": null,\n  \"next_upgrade\": null,\n  \"build_version\": \"1.4.3-a44bed1fd-casper-mainnet\",\n  \"uptime\": \"25days 1h 48m 22s 47ms\"\n}\n```\n\n----------------------------------------\n\nTITLE: TOML Node Configuration Example Header - ini\nDESCRIPTION: This is the commented-out header for a config.toml file using the TOML configuration format, marking the beginning of the configuration options for a Casper node. This snippet is template-only; lines beginning with '#' are comments. To activate parameters (such as the trusted_hash for synchronization), users must uncomment and edit the relevant fields. This section is required as the start of each config.toml, and changes may affect how the node operates. Inputs are TOML key-value pairs; the output is used by the casper-node binary at startup.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/docs/operators/setup/basic-node-configuration.md#2025-04-22_snippet_3\n\nLANGUAGE: ini\nCODE:\n```\n# ================================\\n# Configuration options for a node\\n# ================================\\n[node]\n```\n\n----------------------------------------\n\nTITLE: WebAssembly Memory Management Implementation\nDESCRIPTION: Complex WebAssembly module that handles memory management including allocation, pointer manipulation, and safety checks. Features include memory boundary validation, pointer arithmetic, and error handling for memory operations.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/docs/developers/json-rpc/json-rpc-transactional.md#2025-04-22_snippet_8\n\nLANGUAGE: webassembly\nCODE:\n```\n00360240200041002802d882403602c0010240024041064101200041c0016a200041c0006a419481c0002301410b6a2401230141f4034b0440000b10122301410b6b24012203450d0041cccd021008410020002802c0013602d882400c010b41aac70f10082000200028024022032802003602900202400240418010410420004190026a419481c00041ac81c0002301410b6a2401230141f4034b0440000b10122301410b6b24012201450d0041e4cf02100820032000280290023602000c010b4184f2101008024002404101230141036a2401230141f4034b0440000b1024230141036b24012201417f470d0041e4cf02100820032000280290023602000c010b41bab708100820014110742201410036020420012000280290023602082001200141828004...\n```\n\n----------------------------------------\n\nTITLE: Example JSON Snippet Showing Successful Deploy Execution\nDESCRIPTION: This snippet shows the relevant part of the JSON response from `casper-client get-deploy` that indicates successful execution of the deployment. The `execution_results` array contains an object with a `result` field, which in turn has a `Success` object detailing the execution cost and effects.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/versioned_docs/version-1.5.X/resources/advanced/cross-contract.md#2025-04-22_snippet_22\n\nLANGUAGE: bash\nCODE:\n```\n    \"execution_results\": [\n      {\n        \"block_hash\": \"bc3040214e46fe0eaa9d98150a8a67a1033b931619dbc3e5f1a841d3a2d6f869\",\n        \"result\": {\n          \"Success\": {\n            \"cost\": \"16580565260\",\n            \"effect\": { ...\n\n                }\n            }\n        }\n    }\n    ]\n\n```\n\n----------------------------------------\n\nTITLE: Activating NCTL Scripts\nDESCRIPTION: This snippet demonstrates how to activate the NCTL scripts for interacting with the local Casper network.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/src/pages/condor/setting-up-condor-local.md#2025-04-22_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\nsource nctl-activate.sh casper-nctl\n```\n\n----------------------------------------\n\nTITLE: Restart Current Node Command\nDESCRIPTION: Command to restart the original validator node after converting it to a backup node.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/versioned_docs/version-2.0.0/operators/maintenance/moving-node.md#2025-04-22_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nsudo systemctl start casper-node-launcher\n```\n\n----------------------------------------\n\nTITLE: Installing pip on MacOS\nDESCRIPTION: Commands to download and install pip, the Python package manager, on a MacOS system.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/versioned_docs/version-2.0.0/developers/dapps/setup-nctl.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n$ curl https://bootstrap.pypa.io/get-pip.py -o get-pip.py\n$ python3 get-pip.py\n```\n\n----------------------------------------\n\nTITLE: Deploy Object JSON Schema Definition\nDESCRIPTION: Defines the JSON schema for a deploy object containing a smart contract and associated signatures. Specifies required fields including hash, header, payment, session and approvals. References other schema components for field definitions and enforces unique approval items.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/condor/jsonrpc-comp/rpc-1.5/schema/Deploy.json.md#2025-04-22_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"description\": \"A deploy; an item containing a smart contract along with the requester's signature(s).\",\n    \"type\": \"object\",\n    \"required\": [\n        \"approvals\",\n        \"hash\",\n        \"header\",\n        \"payment\",\n        \"session\"\n    ],\n    \"properties\": {\n        \"hash\": {\n            \"$ref\": \"#/components/schemas/DeployHash\"\n        },\n        \"header\": {\n            \"$ref\": \"#/components/schemas/DeployHeader\"\n        },\n        \"payment\": {\n            \"$ref\": \"#/components/schemas/ExecutableDeployItem\"\n        },\n        \"session\": {\n            \"$ref\": \"#/components/schemas/ExecutableDeployItem\"\n        },\n        \"approvals\": {\n            \"type\": \"array\",\n            \"items\": {\n                \"$ref\": \"#/components/schemas/Approval\"\n            },\n            \"uniqueItems\": true\n        }\n    },\n    \"additionalProperties\": false\n}\n```\n\n----------------------------------------\n\nTITLE: Querying Peer Information with info_get_peers RPC Method in JSON\nDESCRIPTION: Example request for the info_get_peers method which returns a list of peers connected to the node. This method requires no parameters.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/versioned_docs/version-2.0.0/developers/json-rpc/json-rpc-informational.md#2025-04-22_snippet_26\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"id\": 1,\n  \"jsonrpc\": \"2.0\",\n  \"method\": \"info_get_peers\",\n  \"params\": []\n}\n```\n\n----------------------------------------\n\nTITLE: Piping Tar Output to Zstandard for Customizable Compression\nDESCRIPTION: Combines `tar` archiving (with specified block size and sparse handling) with `zstd` compression by piping the output. Allows customization of compression level (`-[level]`), thread count (`-T[thread count]`), and enables long-distance matching (`--long=31`). The compressed output is saved to `[path_to]/file.tar.zst`. Requires `tar` and `zstd` to be installed.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/docs/operators/maintenance/archiving-and-restoring.md#2025-04-22_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\ntar -b 4096 -cv --sparse . | zstd -[level] -cv -T[thread count] --long=31 > [path_to]/file.tar.zst\n```\n\n----------------------------------------\n\nTITLE: Retrieving Deploy Information from Casper Network (Rust)\nDESCRIPTION: This command retrieves a specific deploy from the Casper network using its deploy hash. It allows checking the status of a deploy after it has been sent to the network.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/versioned_docs/version-1.5.X/resources/beginner/counter-testnet/commands.md#2025-04-22_snippet_4\n\nLANGUAGE: rust\nCODE:\n```\ncasper-client get-deploy \\\n    --node-address [NODE_SERVER_ADDRESS] \\\n    [DEPLOY_HASH]\n```\n\n----------------------------------------\n\nTITLE: Querying Contract State after Cross-Contract Call\nDESCRIPTION: This Bash command queries the global state of a Casper network to check the message value that should have been changed by the cross-contract call. It uses the casper-client tool to retrieve the state at a specific state root hash.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/versioned_docs/version-2.0.0/resources/advanced/cross-contract.md#2025-04-22_snippet_25\n\nLANGUAGE: bash\nCODE:\n```\ncasper-client query-global-state \\\n  --node-address http://136.243.187.84:7777 \\\n  --state-root-hash 2f3e100324deb999107229dbec5c4b724653174328c99ea0836931248c3cc9cb \\\n  --key hash-b7a06298cc71d4cac05929cc0713dfd5a541c68b71cb500cd04547b5cd0385ea -q \"message\"\n```\n\n----------------------------------------\n\nTITLE: Generating Account Hash from Public Key\nDESCRIPTION: Command to generate an account hash from a public key using the Casper client. The public key can be provided as a formatted string or a file path.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/versioned_docs/version-1.5.X/concepts/accounts-and-keys.md#2025-04-22_snippet_11\n\nLANGUAGE: bash\nCODE:\n```\ncasper-client account-address --public-key <FORMATTED STRING or PATH>\n```\n\n----------------------------------------\n\nTITLE: Sudo Configuration Example\nDESCRIPTION: Example of sudoers file configuration showing root and non-root user privileges\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/versioned_docs/version-2.0.0/operators/setup/non-root-user.md#2025-04-22_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\n# User privilege specification\nroot    ALL=(ALL:ALL) ALL\n<username>  ALL=(ALL:ALL) NOPASSWD:ALL\n```\n\n----------------------------------------\n\nTITLE: Describing BlockSignatures Structure (Casper Network)\nDESCRIPTION: Defines the BlockSignatures structure, which holds signatures for a block, its hash, and era ID. It exists in two versions (V1 and V2), indicated by a prefixed u8 tag (0 for V1, 1 for V2), detailing how each version is serialized.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/versioned_docs/version-2.0.0/concepts/serialization/types.md#2025-04-22_snippet_0\n\nLANGUAGE: Text\nCODE:\n```\n## BlockSignatures {#block-signatures}\n\nA collection of signatures for a single block, along with the associated block's hash and era ID.\n\nThere are two possible versions for `BlockSignatures`, with a prefixed `u8` tag describing which version it is.\n\n-   [`BlockSignaturesV1`](#block-signatures-v1) serializes as a `u8` of 0 followed by the `BlockSignaturesV1`.\n\n-   [`BlockSignaturesV2`](#block-signatures-v2) serializes as a `u8` of 1 followed by the `BlockSignaturesV2`.\n```\n\n----------------------------------------\n\nTITLE: Verifying Xcode installation on macOS\nDESCRIPTION: Verify the installation of Xcode command-line tools on macOS.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/versioned_docs/version-2.0.0/developers/prerequisites.md#2025-04-22_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\nxcode-select -p\n```\n\n----------------------------------------\n\nTITLE: Cloning Casper Node Repository\nDESCRIPTION: Command to clone the casper-node repository from GitHub to build required validator contracts.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/versioned_docs/version-2.0.0/operators/setup/joining.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ngit clone https://github.com/casper-network/casper-node\n```\n\n----------------------------------------\n\nTITLE: Retrieving Deploy Details in Casper Network\nDESCRIPTION: This snippet demonstrates how to retrieve the details of a deployed contract on the Casper network using the casper-client CLI. It uses the deploy hash obtained from the previous cross-contract call.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/versioned_docs/version-1.5.X/resources/advanced/cross-contract.md#2025-04-22_snippet_29\n\nLANGUAGE: bash\nCODE:\n```\ncasper-client get-deploy \\\n    --node-address http://136.243.187.84:7777 15e11340d92fc9e64deb38bd942f4efb69caad0851eec24fd577070309d18537\n```\n\n----------------------------------------\n\nTITLE: Submitting Wasm Session Transaction via Casper Client CLI (JSON)\nDESCRIPTION: This snippet shows how to submit a Wasm-based session transaction through the new Transaction architecture using the Casper client CLI. It requires the path to the Wasm file, optional contract entry point, transaction category, gas price, and signing credentials. Dependencies include Casper client and secret key or initiator address; the command allows complex session interactions and fails with invalid file paths or missing parameters.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/versioned_docs/version-2.0.0/concepts/transactions.md#2025-04-22_snippet_9\n\nLANGUAGE: json\nCODE:\n```\ncasper-client put-txn session\n/// The local path pointing to Wasm that will be sent to global state.\n  --transaction-path <PATH>\n/// An entry point on a previously installed contract, if applicable.\n  --session-entry-point <NAME>\n/// The category of the Transaction, in decreasing size order.\n  --category <install-upgrade|large|medium|small>\n/// The maximum gas price that the user is willing to pay for this transaction.\n  --gas-price-tolerance <INTEGER>\n/// The path to the local secret key file, or the [`initiator address`](../developers/json-rpc/types_chain.md#initiatoraddr) sending the transaction.\n  <--secret-key <PATH>|--initiator-address <HEX STRING>>\n\n```\n\n----------------------------------------\n\nTITLE: Example Delegation Using System Auction Contract\nDESCRIPTION: Example command demonstrating delegation of 500 CSPR on the Casper Testnet using the system auction contract method. Shows actual values for node address, chain name, and other required parameters.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/versioned_docs/version-1.5.X/developers/cli/delegate.md#2025-04-22_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ncasper-client put-deploy \\\n--node-address http://65.21.75.254:7777  \\\n--chain-name casper-test \\\n--secret-key ~/KEYS/secret_key.pem \\\n--payment-amount 2500000000 \\\n--session-hash hash-93d923e336b20a4c4ca14d592b60e5bd3fe330775618290104f9beb326db7ae2 \\\n--session-entry-point delegate \\\n--session-arg \"validator:public_key='01aa17f7b9889480b1bd34c3f94f263b229c7a9b01dd4dda19c2dd1d38d176c7a0'\" \\\n--session-arg \"amount:u512='500000000000'\" \\\n--session-arg \"delegator:public_key='01e3d3392c2e0b943abe709b25de5c353e5e1e9d95c7a76e3dd343d8aa1aa08d51'\"\n```\n\n----------------------------------------\n\nTITLE: Sync and Eject Docusaurus Component - Bash Command\nDESCRIPTION: This Bash command runs a script to 'swizzle' (eject) the Navbar component from the Docusaurus core theme, allowing for direct code customization. The command invokes npm, targets the '@docusaurus/theme-classic' package, and passes the component and eject flag. It must be run in the project root with Node and appropriate Docusaurus dependencies installed. Output is a component folder in the site source, enabling local overrides. Use with care as upgrades may break customizations.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/README/DEVELOPERS.md#2025-04-22_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\nnpm run swizzle @docusaurus/theme-classic Navbar -- --eject\n\n```\n\n----------------------------------------\n\nTITLE: JSON Schema for Casper Network Contract Types\nDESCRIPTION: Comprehensive JSON Schema that defines the structure and validation rules for Casper Network contract components including entity management, packages, bytecode, messages and entry points. Includes detailed type definitions with properties, requirements and constraints.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/condor/jsonrpc-comp/rpc-2.0/schema.json.md#2025-04-22_snippet_70\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"type\": \"object\",\n  \"required\": [\n    \"deployment\",\n    \"key_management\",\n    \"upgrade_management\"\n  ],\n  \"properties\": {\n    \"deployment\": {\n      \"description\": \"Threshold for deploy execution.\",\n      \"allOf\": [\n        {\n          \"$ref\": \"#/components/schemas/EntityAssociatedKeyWeight\"\n        }\n      ]\n    },\n    \"upgrade_management\": {\n      \"description\": \"Threshold for upgrading contracts.\",\n      \"allOf\": [\n        {\n          \"$ref\": \"#/components/schemas/EntityAssociatedKeyWeight\"\n        }\n      ]\n    },\n    \"key_management\": {\n      \"description\": \"Threshold for managing action threshold.\",\n      \"allOf\": [\n        {\n          \"$ref\": \"#/components/schemas/EntityAssociatedKeyWeight\"\n        }\n      ]\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Bind Address in Config File - Markdown\nDESCRIPTION: This snippet shows a configuration setting in the `config.toml` file for a Casper node. It specifies the `bind_address` on port 35000, which is essential for node connectivity. Ensure this port is open to maintain network communication.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/versioned_docs/version-1.5.X/operators/setup/node-endpoints.md#2025-04-22_snippet_0\n\nLANGUAGE: Markdown\nCODE:\n```\nbind_address = '0.0.0.0:35000'\n```\n\n----------------------------------------\n\nTITLE: Installing CMake on Linux\nDESCRIPTION: Install CMake, a popular build tool, on Linux systems.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/versioned_docs/version-2.0.0/developers/prerequisites.md#2025-04-22_snippet_20\n\nLANGUAGE: bash\nCODE:\n```\nsudo apt-get -y install cmake\n```\n\n----------------------------------------\n\nTITLE: Defining Runtime Arguments Schema for Contracts - JSON\nDESCRIPTION: This snippet defines the 'RuntimeArgs' schema as an array of named arguments, each referencing the 'NamedArg' schema, which is ultimately used as input to contract calls and transfers. Dependencies include the prior definition of 'NamedArg'. All runtime argument lists must conform to this structure for proper contract execution via API.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/condor/jsonrpc-comp/rpc-1.5/schema.json.md#2025-04-22_snippet_33\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"description\": \"Represents a collection of arguments passed to a smart contract.\",\n  \"type\": \"array\",\n  \"items\": {\n    \"$ref\": \"#/components/schemas/NamedArg\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Generating Global State Updates for Validator Rotation\nDESCRIPTION: Command to generate a new global_state.toml file for rotating validators after the start of a new era. This uses the state root hash from the switch block and defines validators for the next era.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/versioned_docs/version-1.5.X/operators/setup-network/create-private.md#2025-04-22_snippet_10\n\nLANGUAGE: sh\nCODE:\n```\nglobal-state-update-gen validators \\\n  --data-dir $DATA_DIR/global_state \\\n  --state-hash $STATE_ROOT_HASH \\\n  –-validator $PUBLIC_KEY_HEX,$STAKE \\\n  –-validator $PUBLIC_KEY_HEX,$STAKE\n```\n\n----------------------------------------\n\nTITLE: Defining Message Checksum Property Schema in JSON\nDESCRIPTION: This JSON object defines a property, likely within a larger data structure or schema. It specifies that the property represents a \"Message checksum as a formatted string.\" and its data type is \"string\". This structure is commonly used in schema definitions like OpenAPI or JSON Schema to describe API responses or data models.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/condor/jsonrpc-comp/rpc-2.0/schema/MessageChecksum.json.md#2025-04-22_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"description\": \"Message checksum as a formatted string.\",\n    \"type\": \"string\"\n} \n```\n\n----------------------------------------\n\nTITLE: Target Account JSON-RPC Request\nDESCRIPTION: Sample JSON-RPC request format for querying the target account balance.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/versioned_docs/version-1.5.X/developers/cli/transfers/verify-transfer.md#2025-04-22_snippet_11\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"jsonrpc\": \"2.0\",\n  \"method\": \"query_balance\",\n  \"params\": {\n    \"state_identifier\": {\n      \"StateRootHash\": \"fdb1474d441ec0fcbf2e088f1630dbf98d3bcf7f7a7fe298303797f35b8cb4e1\"\n    },\n    \"purse_identifier\": {\n      \"main_purse_under_account_hash\": \"account-hash-1ed5a1c39bea93c105f2d22c965a84b205b36734a377d05dbb103b6bfaa595a7\"\n    }\n  },\n  \"id\": 7\n}\n```\n\n----------------------------------------\n\nTITLE: Streaming Database Download\nDESCRIPTION: Command to stream compressed database file from URL.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/versioned_docs/version-2.0.0/operators/maintenance/archiving-and-restoring.md#2025-04-22_snippet_9\n\nLANGUAGE: bash\nCODE:\n```\ncurl -s --output - <URL for tar.zstd file>\n```\n\n----------------------------------------\n\nTITLE: Installing Pip on Linux\nDESCRIPTION: Command to install Python3 pip package manager on Linux systems using apt.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/versioned_docs/version-1.5.X/developers/dapps/setup-nctl.md#2025-04-22_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nsudo apt install python3-pip\n```\n\n----------------------------------------\n\nTITLE: Sample JSON-RPC Response for Purse Balance Query (JSON)\nDESCRIPTION: This object provides the Casper node\\'s response to a balance query. It returns the API version and the queried balance as a string. The \\'id\\' field matches the request for client correlation. The structure is standard for JSON-RPC and supports validation of successful requests. Balances are returned as strings representing integer token values.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/docs/developers/cli/transfers/verify-transfer.md#2025-04-22_snippet_7\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"jsonrpc\": \"2.0\",\n  \"result\": {\n    \"api_version\": \"1.5.3\",\n    \"balance\": \"1109111876194\"\n  },\n  \"id\": 6\n}\n```\n\n----------------------------------------\n\nTITLE: Defining JSON Schema for Message Topic\nDESCRIPTION: This JSON snippet describes a schema for summarizing message topics that are meant to be stored in a global state. It requires 'blocktime' and 'message_count' as mandatory fields, where 'message_count' is an unsigned integer indicating the number of messages, and 'blocktime' follows a format referenced from 'BlockTime'. This schema serves as a contract for topic data representation.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/condor/jsonrpc-comp/rpc-2.0/schema/MessageTopicSummary.json.md#2025-04-22_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"description\": \"Summary of a message topic that will be stored in global state.\",\n    \"type\": \"object\",\n    \"required\": [\n        \"blocktime\",\n        \"message_count\"\n    ],\n    \"properties\": {\n        \"message_count\": {\n            \"description\": \"Number of messages in this topic.\",\n            \"type\": \"integer\",\n            \"format\": \"uint32\",\n            \"minimum\": 0\n        },\n        \"blocktime\": {\n            \"description\": \"Block timestamp in which these messages were emitted.\",\n            \"allOf\": [\n                {\n                    \"$ref\": \"#/components/schemas/BlockTime\"\n                }\n            ]\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Creating New Console Application with .NET CLI\nDESCRIPTION: Commands to create a new console application project for the Casper Network SDK example\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/docs/developers/dapps/sdk/csharp-sdk.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ndotnet new console -o GetAccountBalance\ncd GetAccountBalance\n```\n\n----------------------------------------\n\nTITLE: Current Node Key Swap Commands\nDESCRIPTION: Commands to stop the current node and swap keys to convert it into a backup node.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/versioned_docs/version-2.0.0/operators/maintenance/moving-node.md#2025-04-22_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nsudo systemctl stop casper-node-launcher\ncd /etc/casper/validator_keys/backup_node\nsudo -u casper cp * ../\n```\n\n----------------------------------------\n\nTITLE: Staging Casper Node Protocol Versions via node_util.py - Bash\nDESCRIPTION: This Bash command runs the node_util.py script as the casper user to stage all current casper-node protocol versions, using a specified network configuration file (e.g., casper.conf for Mainnet). Dependencies include the casper-node-launcher and Python installed on the system. The command installs all released protocols, expanding configuration and binary archives, and removes temporary files. The <NETWORK_CONFIG> parameter must be replaced by a valid config file specific to the network. The command output includes installation progress and any errors related to missing files or incorrect configuration names.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/docs/operators/setup/basic-node-configuration.md#2025-04-22_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nsudo -u casper /etc/casper/node_util.py stage_protocols <NETWORK_CONFIG>\n```\n\n----------------------------------------\n\nTITLE: Building Casper Validator Contracts using Make and Rust\nDESCRIPTION: Navigates into the cloned `casper-node` directory and executes `make` commands to set up the Rust environment (`make setup-rs`) and build the required Wasm contracts (`make build-client-contracts`) for validator operations. Requires Rust, CMake, pkg-config, openssl, and libssl-dev prerequisites to be installed. The built contracts include `activate_bid.wasm`, `add_bid.wasm`, `delegate.wasm`, `undelegate.wasm`, and `withdraw_bid.wasm`.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/versioned_docs/version-1.5.X/operators/setup/joining.md#2025-04-22_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ncd casper-node\nmake setup-rs\nmake build-client-contracts\n```\n\n----------------------------------------\n\nTITLE: Defining Account Structure Schema in JSON\nDESCRIPTION: JSON schema for the Account structure representing a user's account stored in global state, including account hash, named keys, main purse, associated keys, and action thresholds.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/condor/jsonrpc-comp/rpc-1.5/schema.json.md#2025-04-22_snippet_53\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"description\": \"Structure representing a user's account, stored in global state.\",\n  \"type\": \"object\",\n  \"required\": [\n    \"account_hash\",\n    \"action_thresholds\",\n    \"associated_keys\",\n    \"main_purse\",\n    \"named_keys\"\n  ],\n  \"properties\": {\n    \"account_hash\": {\n      \"$ref\": \"#/components/schemas/AccountHash\"\n    },\n    \"named_keys\": {\n      \"type\": \"array\",\n      \"items\": {\n        \"$ref\": \"#/components/schemas/NamedKey\"\n      }\n    },\n    \"main_purse\": {\n      \"$ref\": \"#/components/schemas/URef\"\n    },\n    \"associated_keys\": {\n      \"type\": \"array\",\n      \"items\": {\n        \"$ref\": \"#/components/schemas/AssociatedKey\"\n      }\n    },\n    \"action_thresholds\": {\n      \"$ref\": \"#/components/schemas/ActionThresholds\"\n    }\n  },\n  \"additionalProperties\": false\n}\n```\n\n----------------------------------------\n\nTITLE: Storing URef State Values - Casper State - JSON\nDESCRIPTION: This snippet describes a CLValue key-value pair holding the current value for a particular URef in the contract's state (type U32, value 1). Intended for low-level state tracking or contract status checks, these entries depend on the definition and usage schema in the deployed contract and are typically accessed by tools or client libraries for runtime state queries.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/docs/developers/cli/sending-transactions.md#2025-04-22_snippet_20\n\nLANGUAGE: JSON\nCODE:\n```\n{\n  \"cl_type\": \"U32\",\n  \"bytes\": \"01000000\",\n  \"parsed\": 1\n}\n\n```\n\n----------------------------------------\n\nTITLE: Implementing Token Transfer Using Throw-Away Purse in Rust\nDESCRIPTION: Creates a single-use purse to transfer tokens to a contract. The implementation includes creating a new purse, transferring tokens from the caller's main purse, and passing the purse to the target contract. This method is simpler but less efficient due to permanent purse creation.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/versioned_docs/version-2.0.0/resources/advanced/transfer-token-to-contract.md#2025-04-22_snippet_0\n\nLANGUAGE: rust\nCODE:\n```\n#[no_mangle]\npub extern \"C\" fn call() {\n    let amount: U512 = runtime::get_named_arg(\"amount\");\n    let contract_hash = runtime::get_named_arg(\"contract_hash\");\n    let entry_point_name = runtime::get_named_arg(\"entry_point_name\");\n\n    let new_purse = system::create_purse();\n    \n    system::transfer_from_purse_to_purse(account::get_main_purse(), new_purse, amount, None)\n        .unwrap_or_revert();\n        \n    runtime::call_contract(contract_hash, entry_point_name, runtime_args! {\n        \"????\" => new_purse\n    });\n}\n```\n\n----------------------------------------\n\nTITLE: Defining a Named Key Object Schema with JSON Schema (JavaScript)\nDESCRIPTION: This snippet provides a JSON schema for an object containing a 'key' (of Casper Key type) and a 'name' (string). The schema requires both properties, validates the types, and forbids additional properties, ensuring strict structure. It references an external 'Key' schema, so implementations must provide this component for validation to work correctly.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/condor/jsonrpc-comp/rpc-2.0/schema/NamedKey.json.md#2025-04-22_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"description\": \"A key with a name.\",\n    \"type\": \"object\",\n    \"required\": [\n        \"key\",\n        \"name\"\n    ],\n    \"properties\": {\n        \"name\": {\n            \"description\": \"The name of the entry.\",\n            \"type\": \"string\"\n        },\n        \"key\": {\n            \"description\": \"The value of the entry: a casper `Key` type.\",\n            \"allOf\": [\n                {\n                    \"$ref\": \"#/components/schemas/Key\"\n                }\n            ]\n        }\n    },\n    \"additionalProperties\": false\n} \n```\n\n----------------------------------------\n\nTITLE: Contract Package Response Structure in Casper\nDESCRIPTION: Example response from querying a contract package, showing the JSON structure that includes access key, versions, and most importantly the contract hash that will be needed for future interactions.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/versioned_docs/version-1.5.X/resources/tokens/cep18/query.md#2025-04-22_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n{\n  \"id\": -1489823435760214673,\n  \"jsonrpc\": \"2.0\",\n  \"result\": {\n    \"api_version\": \"1.0.0\",\n    \"block_header\": null,\n    \"merkle_proof\": \"[2048 hex chars]\",\n    \"stored_value\": {\n      \"ContractPackage\": {\n        \"access_key\": \"uref-8dac847ce0ae20f0156cf37dd233cc1d166fde8269fc9a393b0ea04174be1167-007\",\n        \"disabled_versions\": [],\n        \"groups\": [],\n        \"versions\": [\n          {\n            \"contract_hash\": \"contract-05d893e76c731729fc26339e5a970bd79fbf4a6adf743c8385431fb494bff45e\",\n            \"contract_version\": 1,\n            \"protocol_version_major\": 1\n          }\n        ]\n      }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Runtime Arguments for Redelegation Deploy in JavaScript\nDESCRIPTION: Constructs a `RuntimeArgs` object specifically for a redelegation operation. It includes the `delegator`, the original `validator`, the `new_validator` public keys, and the `amount` (in motes). This differs from standard delegation/undelegation by adding the `new_validator` parameter. Depends on `RuntimeArgs`, `CLPublicKey`, and `CLValueBuilder` from `casper-js-sdk`.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/docs/resources/advanced/list-cspr.md#2025-04-22_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\nimport { RuntimeArgs, CLPublicKey, CLValueBuilder } from 'casper-js-sdk';\n\nconst args = RuntimeArgs.fromMap({\n    delegator: CLPublicKey.fromHex(delegatorPublicKeyHex),\n    validator: CLPublicKey.fromHex(validatorPublicKeyHex),\n    new_validator: CLPublicKey.fromHex(redelegateValidatorPublicKeyHex),\n    amount: CLValueBuilder.u512(amountMotes)\n})\n```\n\n----------------------------------------\n\nTITLE: Cloning the casper-nctl Repository\nDESCRIPTION: Command to clone the casper-nctl repository from GitHub into your working directory.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/versioned_docs/version-2.0.0/developers/dapps/setup-nctl.md#2025-04-22_snippet_13\n\nLANGUAGE: bash\nCODE:\n```\n$ cd <WORKING_DIRECTORY>\n$ git clone https://github.com/casper-network/casper-nctl\n```\n\n----------------------------------------\n\nTITLE: Calling Contract by Package Hash using Casper-client in Rust\nDESCRIPTION: This code snippet demonstrates how to call a contract entry point using a package hash through the 'put-deploy' command on the Casper client. It uses parameters such as session-package-hash, session-entry-point, and session-version. The example provides a basic structure of the command line needed for invoking a contract stored in a contract package.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/versioned_docs/version-1.5.X/developers/cli/calling-contracts.md#2025-04-22_snippet_4\n\nLANGUAGE: rust\nCODE:\n```\ncasper-client put-deploy \\\n    --node-address [NODE_SERVER_ADDRESS] \\\n    --chain-name [CHAIN_NAME] \\\n    --secret-key [KEY_PATH]/secret_key.pem \\\n    --payment-amount [PAYMENT_AMOUNT_IN_MOTES] \\\n    --session-package-hash [HEX_STRING] \\\n    --session-entry-point [ENTRY_POINT_FUNCTION] \\\n    --session-version [INTEGER]\n```\n\n----------------------------------------\n\nTITLE: Example: Calling Counter Contract by Package Hash using Casper-client in Rust\nDESCRIPTION: This example shows how to call the Counter contract by providing a specific package hash, session entry-point as `counter-inc`, and specifies version number 1. It demonstrates how to format the 'put-deploy' command for a real contract on the Casper test network.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/versioned_docs/version-1.5.X/developers/cli/calling-contracts.md#2025-04-22_snippet_5\n\nLANGUAGE: rust\nCODE:\n```\ncasper-client put-deploy \\\n    --node-address http://65.21.235.219:7777 \\\n    --chain-name casper-test \\\n    --secret-key [KEY_PATH]/secret_key.pem \\\n    --payment-amount 100000000 \\\n    --session-package-hash hash-76a8c3daa6d6ac799ce9f46d82ac98efb271d2d64b517861ec89a06051ef019e \\\n    --session-entry-point \"counter-inc\" \\\n    --session-version 1\n```\n\n----------------------------------------\n\nTITLE: Security Keys Migration Entry Point for Casper Token Contract\nDESCRIPTION: Entry point definition for migrating security keys in the token contract. Takes boolean parameters for events tracking and revert functionality, likely used during contract upgrades.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/docs/developers/cli/sending-transactions.md#2025-04-22_snippet_14\n\nLANGUAGE: JSON\nCODE:\n```\n{\n  \"key\": \"entry-point-v1-entity-contract-363996106630892a964565574fcdfd2435f21a17a3ad1ed2054146e7d8461640-fc79236fd0e4521c8feddcc2094c6a0ea04fcaafb17fef63ef060744a6bab401\",\n  \"kind\": {\n    \"Write\": {\n      \"EntryPoint\": {\n        \"V1CasperVm\": {\n          \"name\": \"migrate_sec_keys\",\n          \"args\": [\n            {\n              \"name\": \"events\",\n              \"cl_type\": \"Bool\"\n            },\n            {\n              \"name\": \"revert\",\n              \"cl_type\": \"Bool\"\n            }\n          ],\n          \"ret\": \"Unit\",\n          \"access\": \"Public\",\n          \"entry_point_type\": \"Called\",\n          \"entry_point_payment\": \"Caller\"\n        }\n      }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining GetResponse Status Enum in Rust\nDESCRIPTION: This generic Rust enum `FetchedOrNotFound` is used within the `GetResponse` payload to indicate the result of a `GetRequest`. `Fetched(T)` contains the requested item `T` if found, while `NotFound(Id)` contains the original requested `Id` if the item was not found. The serialized form of this enum constitutes the `serialized_item` in a `GetResponse`.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/versioned_docs/version-2.0.0/concepts/design/networking-protocol.md#2025-04-22_snippet_4\n\nLANGUAGE: rust\nCODE:\n```\n```rust\npub enum FetchedOrNotFound<T, Id> {\n    Fetched(T),\n    NotFound(Id),\n}\n```\n```\n\n----------------------------------------\n\nTITLE: Getting the State Root Hash in Bash\nDESCRIPTION: Command to retrieve the current state root hash from a Casper Network node, which represents a snapshot of the network state at a point in time.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/docs/resources/tokens/cep18/full-tutorial.md#2025-04-22_snippet_9\n\nLANGUAGE: bash\nCODE:\n```\ncasper-client get-state-root-hash --node-address http://<HOST:PORT>\n```\n\n----------------------------------------\n\nTITLE: Viewing Identity Transformations in Casper Network Key-Value Store\nDESCRIPTION: These JSON objects demonstrate Identity transformations in Casper Network's key-value store. The Identity transformation is used to retrieve the current state of a key without modifying it, commonly used for reading hash values and account balances.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/versioned_docs/version-2.0.0/developers/cli/transfers/direct-token-transfer.md#2025-04-22_snippet_8\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"key\": \"hash-010c3fe81b7b862e50c77ef9a958a05bfa98444f26f96f23d37a13c96244cfb7\",\n  \"transform\": \"Identity\"\n}\n```\n\n----------------------------------------\n\nTITLE: Sample Bids Structure in Casper Network Auction\nDESCRIPTION: This JSON structure is an example of the data returned from the Casper network auction, containing bid details such as bonding purse, delegation rate, delegators, and staked amounts. The output includes multiple delegators and their associated data. It is used to confirm if a delegation request has been processed successfully by checking the presence of your public key.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/docs/developers/cli/delegate.md#2025-04-22_snippet_7\n\nLANGUAGE: json\nCODE:\n```\n\"bids\": [\n{\n  \"bid\": {\n    \"bonding_purse\": \"uref-a5ce7dbc5f7e02ef52048e64b2ff4693a472a1a56fe71e83b180cd33271b2ed9-007\",\n    \"delegation_rate\": 1,\n    \"delegators\": [\n      {\n        \"bonding_purse\": \"uref-ca9247ad56a4d5be70484303133e2d6db97f7d7385772155763749af98ace0b0-007\",\n        \"delegatee\": \"0102db4e11bccb3f9d823c82b9389625d383867d00d09b343043cdbe5ca56dd1fd\",\n        \"public_key\": \"010c7fef89bf1fc38363bd2ec20bbfb5e1152d6a9579c8847615c59c7e461ece89\",\n        \"staked_amount\": \"1\"\n      },\n      {\n        \"bonding_purse\": \"uref-38a2e9cad51b380e478c9a325578f4bbdaa0337b99b9ab9bf1dc2a114eb948b9-007\",\n        \"delegatee\": \"0102db4e11bccb3f9d823c82b9389625d383867d00d09b343043cdbe5ca56dd1fd\",\n        \"public_key\": \"016ebb38d613f2550e7c21ff9d99f6249b4ae5fb9e30938f6ece2d84a22a36b035\",\n        \"staked_amount\": \"478473232415318176495746923\"\n      }\n    ],\n    \"inactive\": false,\n    \"staked_amount\": \"493754513995516852173468935\"\n  },\n  \"public_key\": \"0102db4e11bccb3f9d823c82b9389625d383867d00d09b343043cdbe5ca56dd1fd\"\n},\n```\n\n----------------------------------------\n\nTITLE: Installing pkg-config on Linux\nDESCRIPTION: Command to install pkg-config utility on Linux using apt.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/docs/developers/dapps/setup-nctl.md#2025-04-22_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\n$ sudo apt install pkg-config\n```\n\n----------------------------------------\n\nTITLE: Triggering Protocol Staging/Upgrade on a Node (Bash)\nDESCRIPTION: This command uses the `node_util.py` script as the `casper` user to initiate the staging of protocol versions based on a specific network configuration file (`<network.conf>`). It fetches the latest versions listed in the `protocol_versions` file from the hosting server (defined in the config file) and prepares them on the local node for activation.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/docs/operators/setup-network/staging-files-for-new-network.md#2025-04-22_snippet_9\n\nLANGUAGE: bash\nCODE:\n```\nsudo -u casper /etc/casper/node_util.py stage_protocols <network.conf>\n```\n\n----------------------------------------\n\nTITLE: Incrementing the Counter via Session Code\nDESCRIPTION: Deploys session code that interacts with the counter contract to increment its value, demonstrating an alternative way to call contract entry-points.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/versioned_docs/version-2.0.0/resources/beginner/counter-testnet/walkthrough.md#2025-04-22_snippet_11\n\nLANGUAGE: bash\nCODE:\n```\ncasper-client put-deploy \\\n    --node-address http://[NODE_IP]:7777 \\\n    --chain-name casper-test \\\n    --secret-key [PATH_TO_YOUR_KEY]/secret_key.pem \\\n    --payment-amount [PAYMENT_AMOUNT_IN_MOTES] \\\n    --session-path ./counter/target/wasm32-unknown-unknown/release/counter-call.wasm\n```\n\n----------------------------------------\n\nTITLE: Deploying Counter Contract\nDESCRIPTION: Command to deploy the counter contract to the Casper Testnet with specified payment amount and session path.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/versioned_docs/version-1.5.X/resources/quick-start.md#2025-04-22_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\ncasper-client put-deploy \\\n--node-address [NODE_ADDRESS] \\\n--chain-name casper-test \\\n--secret-key [YOUR_PATH_TO_SECRET_KEY_FILE] \\\n--payment-amount 30000000000 \\\n--session-path contracts/counter-v1/target/wasm32-unknown-unknown/release/counter-v1.wasm\n```\n\n----------------------------------------\n\nTITLE: Visualizing Casper Rust Project Structure (Bash)\nDESCRIPTION: Displays the standard directory structure for a Casper smart contract project developed in Rust. It includes folders for the contract source (`contract/src`), tests (`tests/src`), configuration files (`Cargo.toml`), build automation (`Makefile`), and Rust toolchain specification (`rust-toolchain`). This structure can be generated automatically or created manually.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/versioned_docs/version-1.5.X/developers/writing-onchain-code/simple-contract.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nproject-directory/\n\n└── contract/\n    ├── src/\n        └── main.rs\n    └── Cargo.toml\n\n└── Makefile\n└── rust-toolchain\n\n└── tests/\n    ├── src/\n        └── integration-tests.rs\n    └── Cargo.toml\n```\n\n----------------------------------------\n\nTITLE: Defining Associated Public Keys and Weights - OpenAPI Schema - YAML/JSON\nDESCRIPTION: Defines the 'EntityAssociatedKeys' schema, representing an array of weighted public keys (account hashes) linked to an account. Used for modeling account signature thresholds and multi-signature access in API requests or responses. It includes all necessary references to arrays of AssociatedKey schema blocks.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/condor/jsonrpc-comp/rpc-2.0/schema/components.json.md#2025-04-22_snippet_53\n\nLANGUAGE: yaml\nCODE:\n```\nEntityAssociatedKeys:\n  description: \"A collection of weighted public keys (represented as account hashes) associated with an account.\"\n  allOf:\n    - $ref: \"#/components/schemas/Array_of_AssociatedKey\"\n```\n\nLANGUAGE: yaml\nCODE:\n```\nEntityAssociatedKeyWeight:\n  description: \"The weight associated with public keys in an account's associated keys.\"\n  type: integer\n  format: uint8\n  minimum: 0.0\n```\n\n----------------------------------------\n\nTITLE: Defining JSON Schema for Contract and Protocol Versions\nDESCRIPTION: This JSON schema defines an object structure requiring two properties: `contract_version` and `protocol_version_major`. Both properties must be non-negative 32-bit unsigned integers (uint32). This schema ensures that data structures representing these versions conform to the expected format.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/condor/jsonrpc-comp/rpc-1.5/schema/DisabledVersion.json.md#2025-04-22_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"type\": \"object\",\n    \"required\": [\n        \"contract_version\",\n        \"protocol_version_major\"\n    ],\n    \"properties\": {\n        \"protocol_version_major\": {\n            \"type\": \"integer\",\n            \"format\": \"uint32\",\n            \"minimum\": 0\n        },\n        \"contract_version\": {\n            \"type\": \"integer\",\n            \"format\": \"uint32\",\n            \"minimum\": 0\n        }\n    }\n} \n```\n\n----------------------------------------\n\nTITLE: Cloning the casper-node-launcher Repository\nDESCRIPTION: Command to clone the casper-node-launcher repository from GitHub into your working directory.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/versioned_docs/version-2.0.0/developers/dapps/setup-nctl.md#2025-04-22_snippet_16\n\nLANGUAGE: bash\nCODE:\n```\n$ git clone https://github.com/casper-network/casper-node-launcher\n```\n\n----------------------------------------\n\nTITLE: Example JSON Result from Casper Contract Deployment\nDESCRIPTION: This snippet shows an example JSON response received after successfully submitting a contract deployment using `casper-client put-deploy`. It includes the JSON-RPC version, an ID, and a result object containing the Casper API version and the unique `deploy_hash` which identifies the submitted deployment.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/versioned_docs/version-1.5.X/resources/advanced/cross-contract.md#2025-04-22_snippet_20\n\nLANGUAGE: bash\nCODE:\n```\n{\n  \"id\": -7557689417621513622,\n  \"jsonrpc\": \"2.0\",\n  \"result\": {\n    \"api_version\": \"1.4.13\",\n    \"deploy_hash\": \"faeb7e4f010c20c88d2dd126da545933c26fd8ce370282b8cd49f7f6fe7304b9\"\n  }\n}\n\n```\n\n----------------------------------------\n\nTITLE: Creating Configuration Archive\nDESCRIPTION: Commands for creating and testing the config.tar.gz archive\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/versioned_docs/version-2.0.0/operators/setup-network/staging-files-for-new-network.md#2025-04-22_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\nmkdir config\ncd config\nmv [source of chainspec.toml] ./chainspec.toml\nmv [source of config-example.toml] ./config-example.toml\ntar -czvf ../config.tar.gz .\n```\n\n----------------------------------------\n\nTITLE: Defining Purse Identifier Schema in JSON Schema\nDESCRIPTION: Schema definition for purse identification structures that can reference purses by either public key or account hash.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/condor/jsonrpc-comp/rpc-2.0/schema.json.md#2025-04-22_snippet_87\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"description\": \"Identifier of a purse.\",\n  \"oneOf\": [\n    {\n      \"description\": \"The main purse of the account identified by this public key.\",\n      \"type\": \"object\",\n      \"required\": [\n        \"main_purse_under_public_key\"\n      ],\n      \"properties\": {\n        \"main_purse_under_public_key\": {\n          \"$ref\": \"#/components/schemas/PublicKey\"\n        }\n      },\n      \"additionalProperties\": false\n    }\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Query Source Account Balance Example\nDESCRIPTION: Complete example of querying a source account balance on the testnet with actual values\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/versioned_docs/version-2.0.0/developers/cli/transfers/verify-transfer.md#2025-04-22_snippet_17\n\nLANGUAGE: bash\nCODE:\n```\ncasper-client query-balance -v --id 6 \\\n--node-address https://node.testnet.casper.network \\\n--state-root-hash fdb1474d441ec0fcbf2e088f1630dbf98d3bcf7f7a7fe298303797f35b8cb4e1 \\\n--purse-identifier account-hash-e70dbca48c2d31bc2d754e51860ceaa8a1a49dc627b20320b0ecee1b6d9ce655\n```\n\n----------------------------------------\n\nTITLE: Defining Contract Hash Address Schema - JSON\nDESCRIPTION: This JSON code snippet defines a schema for a property representing the hash address of a contract WASM, specifying both a description and a string data type. It is intended for use within broader configuration or schema definitions in blockchain applications, ensuring proper documentation and enforcing type constraints. The two fields clearly indicate the field's meaning and restrict values to strings, suitable for validation workflows or code generation.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/condor/jsonrpc-comp/rpc-2.0/schema/ContractWasmHash.json.md#2025-04-22_snippet_0\n\nLANGUAGE: JSON\nCODE:\n```\n{\n    \"description\": \"The hash address of the contract wasm\",\n    \"type\": \"string\"\n} \n```\n\n----------------------------------------\n\nTITLE: Describing a Serializable Contract Structure - JSON Schema - JSON\nDESCRIPTION: Defines the schema for representing a contract as a serializable JSON object, including essential properties such as contract package and wasm hashes, entry points, named keys, and protocol version. This schema provides the foundation for how smart contracts are modeled, versioned, and validated on the Casper Network. Dependencies include references to other typed properties and schemas.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/condor/jsonrpc-comp/rpc-1.5/schema/components.json.md#2025-04-22_snippet_42\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"description\": \"A contract struct that can be serialized as  JSON object.\",\n    \"type\": \"object\",\n    \"required\": [\n        \"contract_package_hash\",\n        \"contract_wasm_hash\",\n        \"entry_points\",\n        \"named_keys\",\n        \"protocol_version\"\n    ],\n    \"properties\": {\n        \"contract_package_hash\": {\n            \"$ref\": \"#/components/schemas/ContractPackageHash\"\n        },\n        \"contract_wasm_hash\": {\n            \"$ref\": \"#/components/schemas/ContractWasmHash\"\n        },\n        \"named_keys\": {\n            \"type\": \"array\",\n            \"items\": {\n                \"$ref\": \"#/components/schemas/NamedKey\"\n            }\n        },\n        \"entry_points\": {\n            \"type\": \"array\",\n            \"items\": {\n                \"$ref\": \"#/components/schemas/EntryPoint\"\n            }\n        },\n        \"protocol_version\": {\n            \"type\": \"string\"\n        }\n    },\n    \"additionalProperties\": false\n}\n```\n\n----------------------------------------\n\nTITLE: Delegating CSPR Using Compiled Wasm\nDESCRIPTION: Command structure for delegating CSPR tokens using the compiled delegate.wasm file. This method is more expensive than using the system auction contract.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/docs/developers/cli/delegate.md#2025-04-22_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\ncasper-client put-deploy \\\n--node-address <HOST:PORT> \\\n--secret-key <PATH> \\\n--chain-name <CHAIN_NAME> \\\n--payment-amount <PAYMENT_AMOUNT_IN_MOTES> \\\n--session-path <PATH_TO_WASM>/delegate.wasm \\\n--session-arg \"validator:public_key='<HEX_ENCODED_VALIDATOR_PULIC_KEY>'\" \\\n--session-arg \"amount:u512='<AMOUNT_TO_DELEGATE>'\" \\\n--session-arg \"delegator:public_key='<HEX_ENCODED_DELEGATOR_PULIC_KEY>'\"\n```\n\n----------------------------------------\n\nTITLE: Querying Contract State in Casper Network\nDESCRIPTION: This snippet demonstrates how to query the global state of a deployed contract on the Casper network using the casper-client CLI. It retrieves the contract's entry points and named keys.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/versioned_docs/version-1.5.X/resources/advanced/cross-contract.md#2025-04-22_snippet_27\n\nLANGUAGE: bash\nCODE:\n```\ncasper-client query-global-state \\\n  --node-address http://136.243.187.84:7777 \\\n  --state-root-hash 2f3e100324deb999107229dbec5c4b724653174328c99ea0836931248c3cc9cb \\\n  --key hash-b7a06298cc71d4cac05929cc0713dfd5a541c68b71cb500cd04547b5cd0385ea\n```\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"id\": 2434670480361972874,\n  \"jsonrpc\": \"2.0\",\n  \"result\": {\n    \"api_version\": \"1.4.13\",\n    \"block_header\": null,\n    \"merkle_proof\": \"[25224 hex chars]\",\n    \"stored_value\": {\n      \"Contract\": {\n        \"contract_package_hash\": \"contract-package-wasm7a581d353665b74779dc8d446d33a5086bb367a29a558490d1e524f9c12002d3\",\n        \"contract_wasm_hash\": \"contract-wasm-c0384d4041950780bd3b167b4516a306e308e2d4729d08f6d2b10dfa1dbdaad6\",\n        \"entry_points\": [\n          {\n            \"access\": \"Public\",\n            \"args\": [\n              {\n                \"cl_type\": \"String\",\n                \"name\": \"message\"\n              }\n            ],\n            \"entry_point_type\": \"Contract\",\n            \"name\": \"update_msg\",\n            \"ret\": \"Unit\"\n          }\n        ],\n        \"named_keys\": [\n          {\n            \"key\": \"uref-aa758090d9bc1364754180f9f6bfc8821275038fd5d794a5dfb60bd2838a8670-007\",\n            \"name\": \"message\"\n          }\n        ],\n        \"protocol_version\": \"1.4.13\"\n      }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Example speculative_exec_txn request for a Transfer in Casper Network JSON-RPC API\nDESCRIPTION: This example shows how to construct a request to the speculative_exec_txn endpoint with a Transfer transaction. The request includes the transaction hash, header, body with transfer details, and approval signature.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/versioned_docs/version-2.0.0/developers/json-rpc/json-rpc-transactional.md#2025-04-22_snippet_17\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"jsonrpc\": \"2.0\",\n  \"method\": \"speculative_exec_txn\",\n  \"params\": {\n    \"transaction\": {\n      \"Version1\": {\n        \"hash\": \"f5582cb81a5abda63ebaa4edb3b05210ecbd63ffb8dd17bfbeb3b867f4014468\",\n        \"header\": {\n          \"chain_name\": \"casper-example\",\n          \"timestamp\": \"2020-11-17T00:39:24.072Z\",\n          \"ttl\": \"1h\",\n          \"body_hash\": \"aa24833ffbf31d62c8c8c4265349e7c09cd71952fcbce6f7b12daf5e340bf2cc\",\n          \"pricing_mode\": {\n            \"Fixed\": {\n              \"gas_price_tolerance\": 5\n            }\n          },\n          \"initiator_addr\": {\n            \"PublicKey\": \"01d9bf2148748a85c89da5aad8ee0b0fc2d105fd39d41a4c796536354f0ae2900c\"\n          }\n        },\n        \"body\": {\n          \"args\": [\n            [\n              \"source\",\n              {\n                \"cl_type\": {\n                  \"Option\": \"URef\"\n                },\n                \"bytes\": \"010a0a0a0a0a0a0a0a0a0a0a0a0a0a0a0a0a0a0a0a0a0a0a0a0a0a0a0a0a0a0a0a07\",\n                \"parsed\": \"uref-0a0a0a0a0a0a0a0a0a0a0a0a0a0a0a0a0a0a0a0a0a0a0a0a0a0a0a0a0a0a0a0a-007\"\n              }\n            ],\n            [\n              \"target\",\n              {\n                \"cl_type\": \"URef\",\n                \"bytes\": \"1b1b1b1b1b1b1b1b1b1b1b1b1b1b1b1b1b1b1b1b1b1b1b1b1b1b1b1b1b1b1b1b00\",\n                \"parsed\": \"uref-1b1b1b1b1b1b1b1b1b1b1b1b1b1b1b1b1b1b1b1b1b1b1b1b1b1b1b1b1b1b1b1b-000\"\n              }\n            ],\n            [\n              \"amount\",\n              {\n                \"cl_type\": \"U512\",\n                \"bytes\": \"0500ac23fc06\",\n                \"parsed\": \"30000000000\"\n              }\n            ],\n            [\n              \"id\",\n              {\n                \"cl_type\": {\n                  \"Option\": \"U64\"\n                },\n                \"bytes\": \"01e703000000000000\",\n                \"parsed\": 999\n              }\n            ]\n          ],\n          \"target\": \"Native\",\n          \"entry_point\": \"Transfer\",\n          \"transaction_category\": 0,\n          \"scheduling\": \"Standard\"\n        },\n        \"approvals\": [\n          {\n            \"signer\": \"01d9bf2148748a85c89da5aad8ee0b0fc2d105fd39d41a4c796536354f0ae2900c\",\n            \"signature\": \"0137d3f468d8f8a6e63f4110d79be29b8c8428e9cd858a92049660e7851ae16a299640d1fc1c930ab6cb424f1a6eec0b194df74bede14f4af1b5133106f1280d0b\"\n          }\n        ]\n      }\n    }\n  },\n  \"id\": 6889533540839698701\n}\n```\n\n----------------------------------------\n\nTITLE: Restarting Original Node as New Backup (Bash)\nDESCRIPTION: Restarts the `casper-node-launcher` service on the original validator node (`current_node`) after its keys have been swapped with the backup node's keys (as performed in the previous step). This command brings the original node back online, now configured to run as the backup node. Requires `systemctl` to manage the Casper service.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/versioned_docs/version-1.5.X/operators/maintenance/moving-node.md#2025-04-22_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nsudo systemctl start casper-node-launcher \n```\n\n----------------------------------------\n\nTITLE: Installing Husky via Yarn - Bash\nDESCRIPTION: Installs the Husky package as a dev dependency using the Yarn package manager, ensuring hooks can be managed in the local JavaScript project. Requires Yarn to be installed in the environment. After running this command, Husky will be added to devDependencies, making it possible to add Git hooks using the Husky tool.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/README/DEVELOPERS.md#2025-04-22_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\n`yarn add -D husky`\n```\n\n----------------------------------------\n\nTITLE: Utility Contract Package Response Structure\nDESCRIPTION: Example response from querying the utility contract package, showing the JSON structure with the contract hash that will be needed for further queries.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/versioned_docs/version-1.5.X/resources/tokens/cep18/query.md#2025-04-22_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\n{\n  \"id\": 5359405942597097786,\n  \"jsonrpc\": \"2.0\",\n  \"result\": {\n    \"api_version\": \"1.0.0\",\n    \"block_header\": null,\n    \"merkle_proof\": \"[2048 hex chars]\",\n    \"stored_value\": {\n      \"ContractPackage\": {\n        \"access_key\": \"uref-1b867a3751f505762c69c8d92ba7462818cd0c2a705bb5d4270bce479410ee55-007\",\n        \"disabled_versions\": [],\n        \"groups\": [],\n        \"versions\": [\n          {\n            \"contract_hash\": \"contract-a8fe057675930f0951d45816c55615228ac8af2b7b231788278dffcf1dd8c0ca\",\n            \"contract_version\": 1,\n            \"protocol_version_major\": 1\n          }\n        ]\n      }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring AssemblyScript Compiler Options (tsconfig.json)\nDESCRIPTION: This JSON configuration file (`tsconfig.json`) is placed in the `assembly` directory. It configures the AssemblyScript compiler by extending the standard AssemblyScript configuration (`assembly.json` found in `node_modules`) and specifies that all TypeScript files (`.ts`) within the `assembly` directory and its subdirectories should be included in the compilation process.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/versioned_docs/version-1.5.X/developers/writing-onchain-code/assembly-script.md#2025-04-22_snippet_6\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"extends\": \"../node_modules/assemblyscript/std/assembly.json\",\n    \"include\": [\"./**/*.ts\"]\n}\n```\n\n----------------------------------------\n\nTITLE: Sample Query for Message Checksum in Casper Network\nDESCRIPTION: Example command showing how to query a specific message checksum from global state using the casper-client. This example includes the actual composite key structure and a specific block identifier.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/versioned_docs/version-2.0.0/developers/writing-onchain-code/emitting-contract-events.md#2025-04-22_snippet_13\n\nLANGUAGE: bash\nCODE:\n```\ncasper-client query-global-state --node-address http://127.0.0.1:11101 \\\n--key \"message-803c759a466a84a0ab12147857f49e269369796a66ad37e94ab8343ddddb7823-topic-name-5721a6d9d7a9afe5dfdb35276fb823bed0f825350e4d865a5ec0110c380de4e1-0\" \\\n--block-identifier d9642c5d90c7fc05a23d83a3abcf56d63cb71316402ecefe0962fdeccad2c99c\n```\n\n----------------------------------------\n\nTITLE: Adding Casper Client SDK - Rust - rust\nDESCRIPTION: Adds the casper-client and optional tokio runtime dependencies to a Rust project's Cargo.toml, then imports and uses casper_client in the codebase. These dependencies enable asynchronous network calls and the Casper client API. Modify Cargo.toml and add Rust imports accordingly. Limitations: tokio required for async code.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/versioned_docs/version-2.0.0/developers/dapps/sdk/client-library-usage.md#2025-04-22_snippet_2\n\nLANGUAGE: toml\nCODE:\n```\n[dependencies]\ncasper-client=\"1.5.1\"\n```\n\nLANGUAGE: rust\nCODE:\n```\nextern crate casper_client;\n```\n\nLANGUAGE: rust\nCODE:\n```\nuse casper_client::transfer;\nuse casper_client::put_deploy;\n//...\n```\n\nLANGUAGE: toml\nCODE:\n```\n[dependencies]\ntokio = { version = \"^1.27.0\", features = [\"full\"] }\n```\n\n----------------------------------------\n\nTITLE: Transfer Operation JSON-RPC Response\nDESCRIPTION: The JSON-RPC response returned after submitting the token transfer deploy. It includes the API version and deploy hash, which can be used to query information about the transfer later.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/versioned_docs/version-2.0.0/developers/cli/transfers/direct-token-transfer.md#2025-04-22_snippet_3\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"jsonrpc\": \"2.0\",\n  \"id\": 3,\n  \"result\": {\n    \"api_version\": \"1.5.3\",\n    \"deploy_hash\": \"1f17a0bdeaaf71abd03492c854cdf97f746432751721ce555e95b9cefe641e3c\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Memory Allocation and Management in WebAssembly\nDESCRIPTION: Low-level WebAssembly code handling memory operations including allocation, deallocation, pointer manipulation and boundary checks. Contains extensive branching logic for memory management.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/docs/developers/json-rpc/json-rpc-transactional.md#2025-04-22_snippet_13\n\nLANGUAGE: wasm\nCODE:\n```\n200141086a2d00004101710d0041b80310080340418af408100820022002280208417e713602082002280204417c712201280200210602400240024020022802002205417c7122030d0041c497021008200121050c010b418a9d02100802402005410271450d0041c497021008200121050c010b419afa0210082003200328020441037120017236020420022802042203417c712205450d0141ba3610082002280200417c712103200528020021060b4184cd00100820052006410371200372360200200228020421030b\n```\n\n----------------------------------------\n\nTITLE: Defining WriteUnbonding Object\nDESCRIPTION: This schema defines an object for writing unbonding information to the global state. It requires the `WriteUnbonding` property, which is an array of objects referencing the `UnbondingPurse` schema. No additional properties are allowed.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/condor/jsonrpc-comp/rpc-1.5/schema/components.json.md#2025-04-22_snippet_24\n\nLANGUAGE: JSON\nCODE:\n```\n{\\n    \\\"description\\\": \\\"Writes the given Unbonding to global state.\\\",\\n    \\\"type\\\": \\\"object\\\",\\n    \\\"required\\\": [\\n        \\\"WriteUnbonding\\\"\\n    ],\\n    \\\"properties\\\": {\\n        \\\"WriteUnbonding\\\": {\\n            \\\"type\\\": \\\"array\\\",\\n            \\\"items\\\": {\\n                \\\"$ref\\\": \\\"#/components/schemas/UnbondingPurse\\\"\\n            }\\n        }\\n    },\\n    \\\"additionalProperties\\\": false\\n}\n```\n\n----------------------------------------\n\nTITLE: Adding a Second Associated Key to a Primary Account\nDESCRIPTION: Command to add another associated key 'user_2' to the primary account using the add_account.wasm contract. Similar to the first key, this one is specified with its account hash and assigned a weight of 1.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/versioned_docs/version-1.5.X/resources/advanced/multi-sig/multi-sig-workflow.md#2025-04-22_snippet_10\n\nLANGUAGE: bash\nCODE:\n```\ncasper-client put-deploy --node-address https://node.testnet.casper.network \\\n--chain-name \"casper-test\" \\\n--payment-amount 500000000 \\\n--secret-key $PATH/secret_key.pem \\\n--session-path target/wasm32-unknown-unknown/release/add_account.wasm \\\n--session-arg \"new_key:key='account-hash-04a9691a9f8f05a0f08bd686f188b27c7dbcd644b415759fd3ca043d916ea02f\" \\\n--session-arg \"weight:u8='1'\"\n```\n\n----------------------------------------\n\nTITLE: Defining ReactorState Enum Schema - OpenAPI/Swagger - JSON\nDESCRIPTION: Defines the 'ReactorState' schema as a string-enum, restricting allowed values to a fixed set of Casper node lifecycle states. Helps ensure API consumers only submit or expect standardized node statuses, and integrates easily with UI state selection or validation logic.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/condor/jsonrpc-comp/rpc-1.5/schema/components.json.md#2025-04-22_snippet_54\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"description\": \"The state of the reactor.\",\n  \"type\": \"string\",\n  \"enum\": [\n    \"Initialize\",\n    \"CatchUp\",\n    \"Upgrading\",\n    \"KeepUp\",\n    \"Validate\",\n    \"ShutdownForUpgrade\"\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Querying Account State after Key Removal (Bash)\nDESCRIPTION: Retrieves the latest state root hash and then queries the global state using that hash to inspect the account details after removing an associated key. This verifies that the key is no longer listed under `associated_keys`. Replace `<STATE_ROOT_HASH>` and `<PRIMARY_ACCOUNT_HASH>` with the relevant values.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/docs/resources/advanced/multi-sig/multi-sig-workflow.md#2025-04-22_snippet_24\n\nLANGUAGE: bash\nCODE:\n```\ncasper-client get-state-root-hash --node-address https://node.testnet.casper.network/\n```\n\nLANGUAGE: bash\nCODE:\n```\ncasper-client query-global-state \\\n--node-address https://node.testnet.casper.network/ \\\n--state-root-hash <STATE_ROOT_HASH> \\\n--key account-hash-<PRIMARY_ACCOUNT_HASH>\n```\n\n----------------------------------------\n\nTITLE: Defining BidKind Schema in JSON\nDESCRIPTION: This schema defines the structure of a BidKind object, which represents different types of auction bids in the Casper Network. It includes variants for unified bids, validator bids, delegator bids, bridge records, and credited amounts.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/condor/jsonrpc-comp/rpc-2.0/schema/components.json.md#2025-04-22_snippet_39\n\nLANGUAGE: JSON\nCODE:\n```\n\"BidKind\": {\n  \"description\": \"Auction bid variants.\",\n  \"oneOf\": [\n    {\n      \"description\": \"A unified record indexed on validator data, with an embedded collection of all delegator bids assigned to that validator. The Unified variant is for legacy retrograde support, new instances will not be created going forward.\",\n      \"type\": \"object\",\n      \"required\": [\n        \"Unified\"\n      ],\n      \"properties\": {\n        \"Unified\": {\n          \"$ref\": \"#/components/schemas/Bid\"\n        }\n      },\n      \"additionalProperties\": false\n    },\n    {\n      \"description\": \"A bid record containing only validator data.\",\n      \"type\": \"object\",\n      \"required\": [\n        \"Validator\"\n      ],\n      \"properties\": {\n        \"Validator\": {\n          \"$ref\": \"#/components/schemas/ValidatorBid\"\n        }\n      },\n      \"additionalProperties\": false\n    },\n    {\n      \"description\": \"A bid record containing only delegator data.\",\n      \"type\": \"object\",\n      \"required\": [\n        \"Delegator\"\n      ],\n      \"properties\": {\n        \"Delegator\": {\n          \"$ref\": \"#/components/schemas/Delegator\"\n        }\n      },\n      \"additionalProperties\": false\n    },\n    {\n      \"description\": \"A bridge record pointing to a new `ValidatorBid` after the public key was changed.\",\n      \"type\": \"object\",\n      \"required\": [\n        \"Bridge\"\n      ],\n      \"properties\": {\n        \"Bridge\": {\n          \"$ref\": \"#/components/schemas/Bridge\"\n        }\n      },\n      \"additionalProperties\": false\n    },\n    {\n      \"description\": \"Credited amount.\",\n      \"type\": \"object\",\n      \"required\": [\n        \"Credit\"\n      ],\n      \"properties\": {\n        \"Credit\": {\n          \"$ref\": \"#/components/schemas/ValidatorCredit\"\n        }\n      },\n      \"additionalProperties\": false\n    }\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Undoing a Test Commit with Git - Bash\nDESCRIPTION: Resets the current branch's HEAD to the previous commit, effectively discarding uncommitted changes and the most recent commit. Relies on Git being installed. Use this command after testing the commit and pre-commit hook flow to restore the repository state.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/README/DEVELOPERS.md#2025-04-22_snippet_9\n\nLANGUAGE: bash\nCODE:\n```\ngit reset --hard HEAD\n```\n\n----------------------------------------\n\nTITLE: Activating Bid with Compiled Wasm\nDESCRIPTION: This Bash command reactivates a bid in the Casper Network using a compiled 'activate_bid.wasm' file. It involves specifying session path and other parameters, highlighting the higher cost and complexity compared to using the auction contract.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/docs/operators/becoming-a-validator/recovering.md#2025-04-22_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\nsudo -u casper casper-client put-deploy \\\n--node-address <HOST:PORT> \\\n--secret-key <PATH> \\\n--chain-name <CHAIN_NAME> \\\n--payment-amount <PAYMENT_AMOUNT_IN_MOTES> \\\n--session-path \"$HOME/casper-node/target/wasm32-unknown-unknown/release/activate_bid.wasm\" \\\n--session-arg \"validator:public_key='$(cat /etc/casper/validator_keys/public_key_hex)'\"\n```\n\n----------------------------------------\n\nTITLE: Describing JSON Schema for Protocol Upgrade\nDESCRIPTION: This JSON snippet defines a schema for managing protocol upgrade data. It requires two fields: 'activation_point' and 'protocol_version'. These fields refer to the types 'ActivationPoint' and 'ProtocolVersion', respectively. The schema ensures that a document conforms to the expected structure, requiring the specified properties before activation.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/condor/jsonrpc-comp/rpc-2.0/schema/NextUpgrade.json.md#2025-04-22_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"description\": \"Information about the next protocol upgrade.\",\n    \"type\": \"object\",\n    \"required\": [\n        \"activation_point\",\n        \"protocol_version\"\n    ],\n    \"properties\": {\n        \"activation_point\": {\n            \"$ref\": \"#/components/schemas/ActivationPoint\"\n        },\n        \"protocol_version\": {\n            \"$ref\": \"#/components/schemas/ProtocolVersion\"\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Target Account Query JSON-RPC Response\nDESCRIPTION: Example JSON-RPC response showing target account details including the main purse. This information is used to verify that the target purse in the transfer matches the account's main purse.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/versioned_docs/version-2.0.0/developers/cli/transfers/verify-transfer.md#2025-04-22_snippet_14\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"jsonrpc\": \"2.0\",\n  \"result\": {\n    \"api_version\": \"1.5.3\",\n    \"block_header\": null,\n    \"stored_value\": {\n      \"Account\": {\n        \"account_hash\": \"account-hash-1ed5a1c39bea93c105f2d22c965a84b205b36734a377d05dbb103b6bfaa595a7\",\n        \"named_keys\": [...],\n        \"main_purse\": \"uref-8294864177c2c1ec887a11dae095e487b5256ce6bd2a1f2740d0e4f28bd3251c-007\",\n        \"associated_keys\": [...],\n        \"action_thresholds\": {\n          \"deployment\": 2,\n          \"key_management\": 3\n        }\n      }\n    },\n    \"merkle_proof\": \"[32060 hex chars]\"\n  },\n  \"id\": 5\n}\n```\n\n----------------------------------------\n\nTITLE: WebAssembly Binary Module Header and Type Section\nDESCRIPTION: WebAssembly module header (magic number + version) followed by type section defining function signatures used in the module.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/docs/developers/json-rpc/json-rpc-transactional.md#2025-04-22_snippet_6\n\nLANGUAGE: webassembly\nCODE:\n```\n0061736d0100000001540c60027f7f017f60017f0060037f7f7f017f60047f7f7f7f017f60077f7f7f7f7f7f7f017f60087f7f7f7f7f7f7f7f017f60037f7f7f0060047f7f7f7f0060017f017f60000060057f7f7f7f7f017f60027f7f00\n```\n\n----------------------------------------\n\nTITLE: Staging Casper Node Protocol Upgrade on Testnet (Bash)\nDESCRIPTION: This command initiates the staging process for a protocol upgrade on a Casper Testnet node. It utilizes the `node_util.py` script with the `stage_protocols` command and the specific Testnet configuration file `casper-test.conf`. The command requires execution as the `casper` user.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/versioned_docs/version-1.5.X/operators/setup/upgrade.md#2025-04-22_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nsudo -u casper /etc/casper/node_util.py stage_protocols casper-test.conf\n```\n\n----------------------------------------\n\nTITLE: Example JSON Output for Counter Value Query (Value 1)\nDESCRIPTION: Shows the example JSON response after the counter has been incremented. The `parsed` value within the `stored_value.CLValue` object now shows 1, confirming the successful execution of the `counter_inc` entry point.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/docs/resources/quick-start.md#2025-04-22_snippet_22\n\nLANGUAGE: json\nCODE:\n```\n{\n\"id\": 8523290678829319485,\n\"jsonrpc\": \"2.0\",\n\"result\": {\n   \"api_version\": \"1.4.6\",\n   \"block_header\": null,\n   \"merkle_proof\": \"[85716 hex chars]\",\n   \"stored_value\": {\n      \"CLValue\": {\n      \"bytes\": \"01000000\",\n      \"cl_type\": \"I32\",\n      \"parsed\": 1\n      }\n   }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Rotating Validators using Global State Update Generator (Shell)\nDESCRIPTION: This command generates entries for rotating the validator set, which can be used in a network upgrade.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/versioned_docs/version-1.5.X/operators/setup-network/create-private.md#2025-04-22_snippet_27\n\nLANGUAGE: sh\nCODE:\n```\nglobal-state-update-gen validators \\\n  --data-dir $DATA_DIR \\\n  --state-hash $STATE_ROOT_HASH \\\n  --validator NEW_PUBLIC_KEY,NEW_STAKE \\\n  --validator NEW_PUBLIC_KEY2,NEW_STAKE2\n```\n\n----------------------------------------\n\nTITLE: Parsing Example Casper Account State Output in JSON\nDESCRIPTION: This JSON snippet depicts the result from the casper-client query-global-state command for a Casper account, listing public parameters such as 'account_hash', 'action_thresholds', 'associated_keys', and 'main_purse'. The associated_keys array shows the multi-sig setup where both accounts have weight 1 and the deployment and key_management thresholds are set to 2. Intended for visualization and verification, this structure requires no parsing code but illustrates expected query output.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/docs/resources/advanced/two-party-multi-sig.md#2025-04-22_snippet_4\n\nLANGUAGE: json\nCODE:\n```\n{\\n    \"id\": 1126043166167626077,\\n    \"jsonrpc\": \"2.0\",\\n    \"result\": {\\n        \"api_version\": \"1.0.0\",\\n        \"merkle_proof\": \"2226 chars\",\\n        \"stored_value\": {\\n            \"Account\": {\\n                \"account_hash\": \"account-hash-dc88a1819381c5ebbc3432e5c1d94df18cdcd7253b85259eeebe0ec8661bb84a\",\\n                \"action_thresholds\": {\\n                    \"deployment\": 2,\\n                    \"key_management\": 2\\n                },\\n                \"associated_keys\": [\\n                    {\\n                        \"account_hash\": \"account-hash-12dee9fe535bfd8fd335fce1ba1f972f26bb60029a303b310d85419357d18f51\",\\n                        \"weight\": 1\\n                    },\\n                    {\\n                        \"account_hash\": \"account-hash-dc88a1819381c5ebbc3432e5c1d94df18cdcd7253b85259eeebe0ec8661bb84a\",\\n                        \"weight\": 1\\n                    }\\n                ],\\n                \"main_purse\": \"uref-74b20e9722d3f087f9dc431e9f0fcc6a803c256e005fa45b64a101512001cb78-007\",\\n                \"named_keys\": []\\n            }\\n        }\\n    }\\n}\n```\n\n----------------------------------------\n\nTITLE: Authorizing SSH Key for User in Bash\nDESCRIPTION: This snippet provides commands to configure the SSH directory and authorize SSH keys for the newly created user. It sets up the necessary directory with correct permissions and prepares the authorized_keys file to accept the specified public key.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/docs/operators/setup/non-root-user.md#2025-04-22_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nsudo su - <username>\nmkdir .ssh\nchmod 700 .ssh\ntouch .ssh/authorized_keys\n```\n\n----------------------------------------\n\nTITLE: Generating CA and Node Certificates for Secure Network Access\nDESCRIPTION: Commands to create a certificate authority (CA) and generate node certificates for secure network access. This establishes a PKI infrastructure for the private Casper network.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/versioned_docs/version-1.5.X/operators/setup-network/create-private.md#2025-04-22_snippet_13\n\nLANGUAGE: sh\nCODE:\n```\n# Recommended EC curve algorithm to use\nexport CURVE=\"secp521r1\"\n\n# Generate secret key for CA and save it to ca_key.pem\nopenssl ecparam -out ca_key.pem -name $CURVE -genkey\n# Create ca_cert.pem signed by ca_key.pem\nopenssl req -new -x509 -days 3650 -extensions v3_ca -key ca_key.pem -out ca_cert.pem\n\n# Generate secret key for a node and a certificate signed by the CA\nopenssl ecparam -out node_1.pem -name $CURVE -genkey\nopenssl req -new -key node_1.pem -out node_1.csr -sha256\nopenssl x509 -req -days 3650 -CA ca_cert.pem -CAkey ca_key.pem -CAcreateserial -in node_1.csr -out node_1_cert.pem\n```\n\n----------------------------------------\n\nTITLE: Querying Detailed Balance Information using JSON-RPC\nDESCRIPTION: This example requests detailed balance information through the `query_balance_details` JSON-RPC method. It utilizes `PurseIdentifier` and `StateIdentifier` to detail balance queries for specific account states.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/versioned_docs/version-2.0.0/developers/json-rpc/json-rpc-informational.md#2025-04-22_snippet_16\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"id\": 1,\n  \"jsonrpc\": \"2.0\",\n  \"method\": \"query_balance_details\",\n  \"params\": [\n    {\n      \"name\": \"state_identifier\",\n      \"value\": {\n        \"BlockHash\": \"0707070707070707070707070707070707070707070707070707070707070707\"\n      }\n    },\n    {\n      \"name\": \"purse_identifier\",\n      \"value\": {\n        \"main_purse_under_account_hash\": \"account-hash-0909090909090909090909090909090909090909090909090909090909090909\"\n      }\n    }\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Querying Contract State with casper-client\nDESCRIPTION: Example of using casper-client to query a contract's named key (\"name\") from global state. The command retrieves data from a specific node using the state root hash and account hash.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/versioned_docs/version-2.0.0/resources/tokens/cep18/full-tutorial.md#2025-04-22_snippet_16\n\nLANGUAGE: bash\nCODE:\n```\ncasper-client query-global-state --node-address http://95.216.24.237:7777 \\\n--state-root-hash D00dF8c35B0E9995c2911803F37A212d82c960D9bC5bA3C4F99a661e18D09411 \\\n--key account-hash-7f4bf39A311a7538d8C91BB86C71DF774023e16bc4a70ab7e4e8AE77DbF2Ef53 \\\n-q \"test_contract/name\"\n```\n\n----------------------------------------\n\nTITLE: Sample Query for Viewing Contract Global State (Bash)\nDESCRIPTION: This is a specific example of using the Casper CLI client to query global state for a contract. It includes actual values for node address, contract key, and block identifier.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/versioned_docs/version-2.0.0/developers/writing-onchain-code/emitting-contract-events.md#2025-04-22_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\ncasper-client query-global-state \\\n--node-address http://127.0.0.1:11101 \\\n--key \"addressable-entity-contract-b51b0f9d94e5744af4dce6b4a9990c5f3e652c1a0a946e680e83f97d8846eff5\" \\\n--block-identifier 58d26bf0eeeefb698d76b319014efd2eaa2198ad754a489a23131948ef41fdd2\n```\n\n----------------------------------------\n\nTITLE: Storing Contract Version as CLValue in Casper Network\nDESCRIPTION: This snippet shows a Write operation that stores a U32 value (1) in the global state. This represents the contract version number and is stored under a specific URef key in the blockchain state.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/docs/developers/json-rpc/json-rpc-transactional.md#2025-04-22_snippet_17\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"key\": \"uref-2e024fc493ffb93847290be74a6f921a4226c142b5b196654b5a9c724cb2a726-000\",\n    \"kind\": {\n        \"Write\": {\n            \"CLValue\": {\n                \"cl_type\": \"U32\",\n                \"bytes\": \"01000000\",\n                \"parsed\": 1\n            }\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Specifying Casper Test Dependencies in Cargo.toml (Rust)\nDESCRIPTION: Defines the required development dependencies (`dev-dependencies`) in the `Cargo.toml` file for enabling Casper contract testing. It includes `casper-engine-test-support` for the test framework interface, `casper-execution-engine` for Wasm execution simulation, and `casper-types` for shared Casper types.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/versioned_docs/version-1.5.X/developers/writing-onchain-code/testing-session-code.md#2025-04-22_snippet_0\n\nLANGUAGE: rust\nCODE:\n```\n[dev-dependencies]\ncasper-engine-test-support = { version = \"2.2.0\", features = [\"test-support\"] }\ncasper-execution-engine = \"2.0.0\"\ncasper-types = \"1.5.0\"\n```\n\n----------------------------------------\n\nTITLE: Transfer Details JSON-RPC Request Structure\nDESCRIPTION: Example JSON-RPC request for querying transfer details, showing the format required to query global state using a state root hash and transfer address.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/versioned_docs/version-2.0.0/developers/cli/transfers/verify-transfer.md#2025-04-22_snippet_6\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"jsonrpc\": \"2.0\",\n  \"method\": \"query_global_state\",\n  \"params\": {\n    \"state_identifier\": {\n      \"StateRootHash\": \"fdb1474d441ec0fcbf2e088f1630dbf98d3bcf7f7a7fe298303797f35b8cb4e1\"\n    },\n    \"key\": \"transfer-ab3e11fd612ccf9ddf5ddb3e5c0b3d3b5e5c0921fd1b45e8c657a63f01d6adcb\",\n    \"path\": []\n  },\n  \"id\": 3\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Cross-Contract Call Entry Point in Rust\nDESCRIPTION: Implementation of the call_contract_2 entry point that performs the actual cross-contract call. It retrieves contract parameters and invokes the update_msg entry point on another contract.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/docs/resources/advanced/cross-contract.md#2025-04-22_snippet_12\n\nLANGUAGE: rust\nCODE:\n```\n#[no_mangle]\npub extern \"C\" fn call_contract_2() {\n\n    // Get the contract hash from the named arguments passed to the `call_contract_2` entry point.\n    let contract_hash: ContractHash = runtime::get_named_arg::<Key>(CONTRACT_HASH)\n    .into_hash()\n    .map(|hash| ContractHash::new(hash))\n    .unwrap();\n\n    // Get the value of the message from the second parameter  \n    let new_value: String = runtime::get_named_arg(\"new_message\");\n\n    // Call the update_msg entry point on the other contract with the parameter values\n    let _: () = runtime::call_contract(\n        contract_hash, \n        \"update_msg\", \n        runtime_args! {\n            \"message\" => new_value,\n        },\n    );\n\n}\n```\n\n----------------------------------------\n\nTITLE: Sending Deploy Transaction with Casper Client\nDESCRIPTION: Command to send a deploy transaction using casper-client CLI. Requires a prepared deploy file and active node address from the network.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/versioned_docs/version-1.5.X/developers/cli/transfers/multisig-deploy-transfer.md#2025-04-22_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\ncasper-client send-deploy \\\n--input transfer2.deploy \\\n--node-address https://node.testnet.casper.network\n```\n\n----------------------------------------\n\nTITLE: Querying CEP-18 Contract Package Hash in Casper Network\nDESCRIPTION: This command queries the global state to retrieve the contract package object for a CEP-18 token. It requires the contract package hash and the current state root hash.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/versioned_docs/version-2.0.0/resources/tokens/cep18/query.md#2025-04-22_snippet_0\n\nLANGUAGE: json\nCODE:\n```\ncasper-client query-global-state -n http://<HOST IP>:<PORT> \\\n// This is the contract package hash, which can be found within the `NamedKeys` of the account that sent the installing transaction.\n--key hash-82bd86d2675b2dc44c19027fb7717a99db6fda5e0cad8d597f2495a9dbc9df7f \\\n// This is the most up to date state root hash, which can found by using the `get-state-root-hash` command in the Casper client.\n--state-root-hash f9f73c3a4da5893b67c4cac94a5695d76cfefff61b050c98a7b19e2b8efd3933\n```\n\n----------------------------------------\n\nTITLE: Querying Casper Network Global State\nDESCRIPTION: This command allows querying the state of a Casper network at a specific point in time (specified by the state root hash). It requires a node address, state root hash, and a key identifier. The optional query path argument lets you access specific information related to the key.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/versioned_docs/version-2.0.0/resources/beginner/counter/commands.md#2025-04-22_snippet_2\n\nLANGUAGE: rust\nCODE:\n```\ncasper-client query-global-state \\\n    --node-address [NODE_SERVER_ADDRESS] \\\n    --state-root-hash [STATE_ROOT_HASH] \\\n    --key [ACCOUNT_HASH] \\\n    -q \"[SESSION_NAME]/[SESSION_NAMED_KEY]\" (OPTIONAL)\n```\n\n----------------------------------------\n\nTITLE: Installing Smart Contract via NCTL Deploy\nDESCRIPTION: Command to deploy a smart contract to the NCTL network with specified chain name, secret key, payment amount, and node address\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/versioned_docs/version-1.5.X/developers/dapps/nctl-test.md#2025-04-22_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n$(get_path_to_client) put-deploy \\\n--chain-name \"casper-net-1\" \\\n--secret-key /casper/casper-node/utils/nctl/assets/net-1/nodes/node-1/keys/secret_key.pem \\\n--payment-amount 2500000000 \\\n--session-path <PATH> \\\n--node-address http://localhost:11101\n```\n\n----------------------------------------\n\nTITLE: Defining ActionThresholds Schema in JSON\nDESCRIPTION: Schema definition for action thresholds that must be met when executing different types of actions. Includes deployment and key management thresholds with uint8 validation.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/condor/jsonrpc-comp/rpc-1.5/schema/components.json.md#2025-04-22_snippet_38\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"description\": \"Thresholds that have to be met when executing an action of a certain type.\",\n    \"type\": \"object\",\n    \"required\": [\n        \"deployment\",\n        \"key_management\"\n    ],\n    \"properties\": {\n        \"deployment\": {\n            \"type\": \"integer\",\n            \"format\": \"uint8\",\n            \"minimum\": 0.0\n        },\n        \"key_management\": {\n            \"type\": \"integer\",\n            \"format\": \"uint8\",\n            \"minimum\": 0.0\n        }\n    },\n    \"additionalProperties\": false\n}\n```\n\n----------------------------------------\n\nTITLE: Deploying Compiled Wasm Binary to Casper Network (Rust)\nDESCRIPTION: This command creates a deploy from a compiled Wasm contract and sends it to the Casper network for execution. It requires specifying the node address, chain name, secret key path, payment amount, and the path to the Wasm contract.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/versioned_docs/version-1.5.X/resources/beginner/counter-testnet/commands.md#2025-04-22_snippet_2\n\nLANGUAGE: rust\nCODE:\n```\ncasper-client put-deploy \\\n    --node-address [NODE_SERVER_ADDRESS] \\\n    --chain-name casper-test \\\n    --secret-key [KEY_PATH]/secret_key.pem \\\n    --payment-amount [PAYMENT_AMOUNT_IN_MOTES] \\\n    --session-path [CONTRACT_PATH]/counter-v1.wasm\n```\n\n----------------------------------------\n\nTITLE: Node Status Output in JSON\nDESCRIPTION: Expected JSON output from the nctl-view-node-status command showing details about a node in the network, including its peers, block information, and other status details.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/condor/local-setup.md#2025-04-22_snippet_11\n\nLANGUAGE: json\nCODE:\n```\n{\n\"api_version\": \"2.0.0\",\n\"peers\": [\n   {\n      \"node_id\": \"tls:05b5..7b39\",\n      \"address\": \"127.0.0.1:22103\"\n   },\n   {\n      \"node_id\": \"tls:527e..37d2\",\n      \"address\": \"127.0.0.1:22105\"\n   },\n   {\n      \"node_id\": \"tls:b1d0..870f\",\n      \"address\": \"127.0.0.1:22102\"\n   },\n   {\n      \"node_id\": \"tls:dcdf..e348\",\n      \"address\": \"127.0.0.1:22104\"\n   }\n],\n\"build_version\": \"2.0.0-d5c0d238f\",\n\"chainspec_name\": \"casper-net-1\",\n\"starting_state_root_hash\": \"2d92cf9f3ff3eb70f40be598b61cbf747c1b5ea67df9596d84a88c5458028a80\",\n\"last_added_block_info\": {\n   \"hash\": \"c1056e0e5978e725777f48e4488462d7794e6547f25b1fbcc4ba261ca2864395\",\n   \"timestamp\": \"2024-07-10T15:31:38.601Z\",\n   \"era_id\": 19,\n   \"height\": 205,\n   \"state_root_hash\": \"6c5502c3443f526e943fa5a5421349e938464c063c8dd0ada616c997e3805612\",\n   \"creator\": \"0190664e16a17594ed2d0e3c279c4cf5894e8db0da15e3b91c938562a1caae32ab\"\n},\n\"our_public_signing_key\": \"01fed662dc7f1f7af43ad785ba07a8cc05b7a96f9ee69613cfde43bc56bec1140b\",\n\"round_length\": \"4s 96ms\",\n\"next_upgrade\": null,\n\"uptime\": \"13m 15s\",\n\"reactor_state\": \"Validate\",\n\"last_progress\": \"2024-07-10T15:18:26.354Z\",\n\"available_block_range\": {\n   \"low\": 0,\n   \"high\": 205\n},\n\"block_sync\": {\n   \"historical\": null,\n   \"forward\": null\n},\n\"latest_switch_block_hash\": \"5192198c783ed8b66e206c37b34c5e268c84be2f4b78dd9899eecf5f37fb9f68\"\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Query Methods in JSON Schema\nDESCRIPTION: This JSON snippet defines various methods to query the Global State using either a BlockHash, a BlockHeight, or a StateRootHash. It specifies required properties and their types or references, ensuring the integrity of input data. Dependencies include schema definitions for BlockHash and Digest. The input is a JSON object, and the expected output is consistent querying parameters for the Global State. There are constraints like requiring specific properties and setting a minimum value for BlockHeight.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/condor/jsonrpc-comp/rpc-2.0/schema/GlobalStateIdentifier.json.md#2025-04-22_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"description\": \"Identifier for possible ways to query Global State\",\n    \"oneOf\": [\n        {\n            \"description\": \"Query using a block hash.\",\n            \"type\": \"object\",\n            \"required\": [\n                \"BlockHash\"\n            ],\n            \"properties\": {\n                \"BlockHash\": {\n                    \"$ref\": \"#/components/schemas/BlockHash\"\n                }\n            },\n            \"additionalProperties\": false\n        },\n        {\n            \"description\": \"Query using a block height.\",\n            \"type\": \"object\",\n            \"required\": [\n                \"BlockHeight\"\n            ],\n            \"properties\": {\n                \"BlockHeight\": {\n                    \"type\": \"integer\",\n                    \"format\": \"uint64\",\n                    \"minimum\": 0\n                }\n            },\n            \"additionalProperties\": false\n        },\n        {\n            \"description\": \"Query using the state root hash.\",\n            \"type\": \"object\",\n            \"required\": [\n                \"StateRootHash\"\n            ],\n            \"properties\": {\n                \"StateRootHash\": {\n                    \"$ref\": \"#/components/schemas/Digest\"\n                }\n            },\n            \"additionalProperties\": false\n        }\n    ]\n}\n```\n\n----------------------------------------\n\nTITLE: Transaction Invocation Target Schema Definition in JSON\nDESCRIPTION: Defines the schema for the identifier of a stored transaction target, which can be specified by hash, name, package hash, or package name.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/condor/jsonrpc-comp/rpc-2.0/schema.json.md#2025-04-22_snippet_40\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"description\": \"Identifier of a `Stored` transaction target.\",\n  \"oneOf\": [\n    {\n      \"description\": \"Hex-encoded entity address identifying the invocable entity.\",\n      \"type\": \"object\",\n      \"required\": [\n        \"ByHash\"\n      ],\n      \"properties\": {\n        \"ByHash\": {\n          \"type\": \"string\"\n        }\n      },\n      \"additionalProperties\": false\n    },\n    {\n      \"description\": \"The alias identifying the invocable entity.\",\n      \"type\": \"object\",\n      \"required\": [\n        \"ByName\"\n      ],\n      \"properties\": {\n        \"ByName\": {\n          \"type\": \"string\"\n        }\n      },\n      \"additionalProperties\": false\n    },\n    {\n      \"description\": \"The address and optional version identifying the package.\",\n      \"type\": \"object\",\n      \"required\": [\n        \"ByPackageHash\"\n      ],\n      \"properties\": {\n        \"ByPackageHash\": {\n          \"type\": \"object\",\n          \"required\": [\n            \"addr\"\n          ],\n          \"properties\": {\n            \"addr\": {\n              \"description\": \"Hex-encoded address of the package.\",\n              \"type\": \"string\"\n            },\n            \"version\": {\n              \"description\": \"The package version.\\n\\nIf `None`, the latest enabled version is implied.\",\n              \"type\": [\n                \"integer\",\n                \"null\"\n              ],\n              \"format\": \"uint32\",\n              \"minimum\": 0.0\n            }\n          },\n          \"additionalProperties\": false\n        }\n      },\n      \"additionalProperties\": false\n    },\n    {\n      \"description\": \"The alias and optional version identifying the package.\",\n      \"type\": \"object\",\n      \"required\": [\n        \"ByPackageName\"\n      ],\n      \"properties\": {\n        \"ByPackageName\": {\n          \"type\": \"object\",\n          \"required\": [\n            \"name\"\n          ],\n          \"properties\": {\n            \"name\": {\n              \"description\": \"The package name.\",\n              \"type\": \"string\"\n            },\n            \"version\": {\n              \"description\": \"The package version.\\n\\nIf `None`, the latest enabled version is implied.\",\n              \"type\": [\n                \"integer\",\n                \"null\"\n              ],\n              \"format\": \"uint32\",\n              \"minimum\": 0.0\n            }\n          },\n          \"additionalProperties\": false\n        }\n      },\n      \"additionalProperties\": false\n    }\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Cloning and Building Delegate Contract in Casper Node\nDESCRIPTION: This Bash script clones the Casper node repository and compiles the delegate contract as part of the staking process. Dependencies include Git and Make. It prepares the user's environment for deploying staking-related smart contracts by performing a setup specific to the Rust toolchain and building necessary binaries.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/versioned_docs/version-2.0.0/developers/dapps/sdk/client-library-usage.md#2025-04-22_snippet_18\n\nLANGUAGE: bash\nCODE:\n```\ngit clone https://github.com/casper-network/casper-node.git\\ncd casper-node/\n```\n\nLANGUAGE: bash\nCODE:\n```\nmake setup-rs\\nmake build-contract-rs/delegate\n```\n\n----------------------------------------\n\nTITLE: Checking casper-client Version - Bash\nDESCRIPTION: Verifies the casper-client CLI tool is installed and reveals the version. Useful for troubleshooting or confirming installation.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/versioned_docs/version-1.5.X/developers/prerequisites.md#2025-04-22_snippet_15\n\nLANGUAGE: bash\nCODE:\n```\ncasper-client --version\n```\n\n----------------------------------------\n\nTITLE: Running Contract Tests\nDESCRIPTION: Command to compile the contract and execute the contract unit tests.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/versioned_docs/version-1.5.X/resources/tokens/cep78/using-casper-client/full-installation-tutorial.md#2025-04-22_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nmake test\n```\n\n----------------------------------------\n\nTITLE: Keypair Generation and File Output in Rust with casper_client - Rust\nDESCRIPTION: Generates a keypair and writes the key files to the specified path using casper_client's keygen module. Requires the casper_client crate and correct path and algorithm string provided. Replace \"PATH\" and \"ED25519\" as needed.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/versioned_docs/version-1.5.X/developers/dapps/sdk/client-library-usage.md#2025-04-22_snippet_7\n\nLANGUAGE: rust\nCODE:\n```\n    casper_client::keygen::generate_files(\"PATH\", \"ED25519\", false).unwrap();\n```\n\n----------------------------------------\n\nTITLE: Simplified Token Allowance Approval Command\nDESCRIPTION: A simplified version of the token allowance approval command without comments, showing the essential Casper client syntax for approving token spending by another account.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/versioned_docs/version-1.5.X/resources/tokens/cep18/transfer.md#2025-04-22_snippet_8\n\nLANGUAGE: bash\nCODE:\n```\ncasper-client put-deploy -n http://<node IP>:<PORT>\\\n--chain-name <CHAIN NAME> \\\n--secret-key ~/casper/demo/user_a/secret_key.pem \\\n--session-hash hash-05d893e76c731729fc26339e5a970bd79fbf4a6adf743c8385431fb494bff45e \\\n--session-entry-point \"approve\" \\\n--session-arg \"spender:key='account-hash-17192017d32db5dc9f598bf8ac6ac35ee4b64748669b00572d88335941479513'\" \\\n--session-arg \"amount:u256='15'\" \\\n--payment-amount \"10000000000\"\n```\n\n----------------------------------------\n\nTITLE: State Get Balance Response Schema Definition\nDESCRIPTION: JSON schema defining the response structure for the state_get_balance RPC endpoint. Includes API version, balance value, and merkle proof fields with example values.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/condor/jsonrpc-comp/rpc-1.5/schema.json.md#2025-04-22_snippet_22\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"api_version\": \"1.5.6\",\n  \"balance_value\": \"123456\",\n  \"merkle_proof\": \"01000000006ef2e0949ac76e55812421f755abe129b6244fe7168b77f47a72536147614625016ef2e0949ac76e55812421f755abe129b6244fe7168b77f47a7253614761462500000000...\"\n}\n```\n\n----------------------------------------\n\nTITLE: Example make-transfer Command Implementation\nDESCRIPTION: Concrete example of the make-transfer command with actual values for transferring tokens on the Casper testnet.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/versioned_docs/version-1.5.X/developers/cli/transfers/multisig-deploy-transfer.md#2025-04-22_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ncasper-client make-transfer --amount 2500000000 \\\n--secret-key ~/KEYS/multi-sig/keys/default_secret_key.pem \\\n--chain-name casper-test \\\n--target-account 0154d828baafa6858b92919c4d78f26747430dcbecb9aa03e8b44077dc6266cabf \\\n--transfer-id 1 \\\n--payment-amount 100000000 \\\n--output transfer.deploy\n```\n\n----------------------------------------\n\nTITLE: Defining EntityAddr Schema in JSON\nDESCRIPTION: Specifies the schema for EntityAddr, which represents the address for an AddressableEntity. It can be a system entity account/contract address, an Account address, or a Userland smart contract address.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/condor/jsonrpc-comp/rpc-2.0/schema.json.md#2025-04-22_snippet_79\n\nLANGUAGE: json\nCODE:\n```\n\"EntityAddr\": {\n  \"description\": \"The address for an AddressableEntity which contains the 32 bytes and tagging information.\",\n  \"anyOf\": [\n    {\n      \"description\": \"The address for a system entity account or contract.\",\n      \"type\": \"string\"\n    },\n    {\n      \"description\": \"The address of an entity that corresponds to an Account.\",\n      \"type\": \"string\"\n    },\n    {\n      \"description\": \"The address of an entity that corresponds to a Userland smart contract.\",\n      \"type\": \"string\"\n    }\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Defining EraIdentifier Schema in OpenAPI\nDESCRIPTION: Defines the schema for era identifiers, which can be either a direct era ID reference or a block identifier that corresponds to a specific era.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/condor/jsonrpc-comp/rpc-2.0/schema.json.md#2025-04-22_snippet_97\n\nLANGUAGE: json\nCODE:\n```\n\"EraIdentifier\": {\n  \"description\": \"Identifier for an era.\",\n  \"oneOf\": [\n    {\n      \"type\": \"object\",\n      \"required\": [\n        \"Era\"\n      ],\n      \"properties\": {\n        \"Era\": {\n          \"$ref\": \"#/components/schemas/EraId\"\n        }\n      },\n      \"additionalProperties\": false\n    },\n    {\n      \"type\": \"object\",\n      \"required\": [\n        \"Block\"\n      ],\n      \"properties\": {\n        \"Block\": {\n          \"$ref\": \"#/components/schemas/BlockIdentifier\"\n        }\n      },\n      \"additionalProperties\": false\n    }\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Building CEP-18 Contract\nDESCRIPTION: Prepares and builds the contract to create the target Wasm file.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/versioned_docs/version-1.5.X/resources/tokens/cep18/full-tutorial.md#2025-04-22_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\ncd cep18\nmake prepare\nmake build-contracts\n```\n\n----------------------------------------\n\nTITLE: Installing a Contract in Global State using Casper Client\nDESCRIPTION: Command to install a contract in the global state using the Casper client. This command sends a transaction with contract Wasm to the network, requiring node address, chain name, authorization key, gas parameters, and transaction details.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/versioned_docs/version-2.0.0/developers/cli/installing-contracts.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ncasper-client put-transaction session \\\n--node-address [NODE_SERVER_ADDRESS] \\\n--chain-name [CHAIN_NAME] \\\n--secret-key [KEY_PATH]/secret_key.pem \\\n--gas-price-tolerance [MAX_GAS_AMOUNT] \\\n--pricing-mode fixed \\\n--transaction-path <PATH> \\\n--session-entry-point call \\\n--category 'install-upgrade'\n```\n\n----------------------------------------\n\nTITLE: Retrieving State Root Hash from Casper Testnet using Casper CLI\nDESCRIPTION: Fetches the most recent global state root hash from a specified Casper Testnet node using the `casper-client get-state-root-hash` command. This hash represents a snapshot of the blockchain state and is required for querying global state data like account details.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/docs/resources/advanced/multi-sig/multi-sig-workflow.md#2025-04-22_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\ncasper-client get-state-root-hash --node-address https://node.testnet.casper.network\n```\n\n----------------------------------------\n\nTITLE: Querying Global State with casper-client in Bash\nDESCRIPTION: Command using `casper-client query-global-state` to query the global state for a specific key (e.g., an account hash) at a given state root hash. Requires the node address (`--node-address`), the state root hash (`--state-root-hash`), and the specific key (`--key`) to query.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/versioned_docs/version-2.0.0/developers/cli/querying-global-state.md#2025-04-22_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\n```bash\ncasper-client query-global-state \\\n--node-address [NODE_SERVER_ADDRESS] \\\n--state-root-hash [STATE_ROOT_HASH] \\\n--key [ACCOUNT_HASH]\n```\n```\n\n----------------------------------------\n\nTITLE: Querying Block Transfers with chain_get_block_transfers\nDESCRIPTION: Example request for retrieving successful native transfers within a block using chain_get_block_transfers method.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/docs/developers/json-rpc/json-rpc-informational.md#2025-04-22_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"id\": 1,\n  \"jsonrpc\": \"2.0\",\n  \"method\": \"chain_get_block_transfers\",\n  \"params\": [\n    {\n      \"name\": \"block_identifier\",\n      \"value\": {\n        \"Hash\": \"0707070707070707070707070707070707070707070707070707070707070707\"\n      }\n    }\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Querying Stored Value in Casper Network (JSON)\nDESCRIPTION: Example of using the deprecated state_get_item RPC method to retrieve a stored value from the network. It includes the request parameters and the expected response structure with a Merkle proof.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/condor/jsonrpc-comp/rpc-2.0/schema.json.md#2025-04-22_snippet_22\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"name\": \"state_root_hash\",\n  \"value\": \"0808080808080808080808080808080808080808080808080808080808080808\"\n},\n{\n  \"name\": \"key\",\n  \"value\": \"deploy-af684263911154d26fa05be9963171802801a0b6aff8f199b7391eacb8edc9e1\"\n},\n{\n  \"name\": \"path\",\n  \"value\": [\n    \"inner\"\n  ]\n}\n```\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"api_version\": \"2.0.0\",\n  \"stored_value\": {\n    \"CLValue\": {\n      \"cl_type\": \"U64\",\n      \"bytes\": \"0100000000000000\",\n      \"parsed\": 1\n    }\n  },\n  \"merkle_proof\": \"01000000006ef2e0949ac76e55812421f755abe129b6244fe7168b77f47a72536147614625016ef2e0949ac76e55812421f755abe129b6244fe7168b77f47a72536147614625000000003529cde5c621f857f75f3810611eb4af3f998caaa9d4a3413cf799f99c67db0307010000006ef2e0949ac76e55812421f755abe129b6244fe7168b77f47a7253614761462501010102000000006e06000000000074769d28aac597a36a03a932d4b43e4f10bf0403ee5c41dd035102553f5773631200b9e173e8f05361b681513c14e25e3138639eb03232581db7557c9e8dbbc83ce94500226a9a7fe4f2b7b88d5103a4fc7400f02bf89c860c9ccdd56951a2afe9be0e0267006d820fb5676eb2960e15722f7725f3f8f41030078f8b2e44bf0dc03f71b176d6e800dc5ae9805068c5be6da1a90b2528ee85db0609cc0fb4bd60bbd559f497a98b67f500e1e3e846592f4918234647fca39830b7e1e6ad6f5b7a99b39af823d82ba1873d000003000000010186ff500f287e9b53f823ae1582b1fa429dfede28015125fd233a31ca04d5012002015cc42669a55467a1fdf49750772bfc1aed59b9b085558eb81510e9b015a7c83b0301e3cf4a34b1db6bfa58808b686cb8fe21ebe0c1bcbcee522649d2b135fe510fe3\"\n}\n```\n\n----------------------------------------\n\nTITLE: Cloning the casper-sidecar Repository\nDESCRIPTION: Command to clone the casper-sidecar repository from GitHub into your working directory. The sidecar handles API requests to interact with a Casper network.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/versioned_docs/version-2.0.0/developers/dapps/setup-nctl.md#2025-04-22_snippet_17\n\nLANGUAGE: bash\nCODE:\n```\n$ git clone https://github.com/casper-network/casper-sidecar\n```\n\n----------------------------------------\n\nTITLE: Defining Validator Weight Schema - JSON\nDESCRIPTION: Defines the JSON Schema for a validator's weight object, specifying 'public_key' and 'weight' as required properties. Both properties reference existing schemas (PublicKey and U512) for validation. This schema is used in API documentation or backend data validation and ensures only the defined properties are allowed, with input objects being strictly typed and additionalProperties set to false.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/condor/jsonrpc-comp/rpc-1.5/schema/JsonValidatorWeights.json.md#2025-04-22_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\\n    \\\"description\\\": \\\"A validator's weight.\\\",\\n    \\\"type\\\": \\\"object\\\",\\n    \\\"required\\\": [\\n        \\\"public_key\\\",\\n        \\\"weight\\\"\\n    ],\\n    \\\"properties\\\": {\\n        \\\"public_key\\\": {\\n            \\\"$ref\\\": \\\"#/components/schemas/PublicKey\\\"\\n        },\\n        \\\"weight\\\": {\\n            \\\"$ref\\\": \\\"#/components/schemas/U512\\\"\\n        }\\n    },\\n    \\\"additionalProperties\\\": false\\n} \n```\n\n----------------------------------------\n\nTITLE: Installing Zstandard via apt\nDESCRIPTION: Instructions for installing Zstandard using apt package manager on Ubuntu systems. Suitable for those running Casper nodes on Ubuntu 18.04 or 20.04. Installation is a prerequisite for compressing and decompressing databases with Zstandard.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/versioned_docs/version-1.5.X/operators/maintenance/archiving-and-restoring.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nsudo apt install zstd\n```\n\n----------------------------------------\n\nTITLE: Querying Counter Contract Details\nDESCRIPTION: Queries the blockchain for the counter contract details using a query path to target the specific named key.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/versioned_docs/version-2.0.0/resources/beginner/counter-testnet/walkthrough.md#2025-04-22_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\ncasper-client query-global-state --node-address http://[NODE_IP]:7777 \\\n    --state-root-hash [STATE_ROOT_HASH] \\\n    --key [ACCOUNT_HASH] -q \"counter\"\n```\n\n----------------------------------------\n\nTITLE: Simplified Casper Client Command for Contract Package Query\nDESCRIPTION: A clean version of the Casper client command to query the global state without comments, showing the essential parameters needed to retrieve the contract package information.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/versioned_docs/version-1.5.X/resources/tokens/cep18/query.md#2025-04-22_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ncasper-client query-global-state -n http://<HOST IP>:<PORT> \\\n--key hash-82bd86d2675b2dc44c19027fb7717a99db6fda5e0cad8d597f2495a9dbc9df7f \\\n--state-root-hash f9f73c3a4da5893b67c4cac94a5695d76cfefff61b050c98a7b19e2b8efd3933\n```\n\n----------------------------------------\n\nTITLE: Compressing Casper Node Database using Tar and Zstandard\nDESCRIPTION: Guide for compressing a Casper node database directory with sparse file support using tar and Zstandard. Includes details on setting compression level, thread count, and using long-distance matching. Intended for both mainnet and testnet database compression, with location adjustments required.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/versioned_docs/version-1.5.X/operators/maintenance/archiving-and-restoring.md#2025-04-22_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ntar -cv --sparse .\n```\n\nLANGUAGE: bash\nCODE:\n```\ntar -b 4096 -cv --sparse .\n```\n\nLANGUAGE: bash\nCODE:\n```\ntar -b 4096 -cv --sparse . | zstd -[level] -cv -T[thread count] --long=31 > [path_to]/file.tar.zst\n```\n\nLANGUAGE: bash\nCODE:\n```\ntar -b 4096 -cv --sparse . | zstd -15 -cv -T0 --long=31 > [path_to]/file.tar.zst\n```\n\nLANGUAGE: bash\nCODE:\n```\ntar -b 4096 -cv --sparse . | zstd -5 -cv -T0 --long=31 > [path_to]/file.tar.zst\n```\n\n----------------------------------------\n\nTITLE: Fetching Era Info by Switch Block\nDESCRIPTION: JSON-RPC request to get era information from a switch block (last block in an era). Returns era summary including state root hash and seigniorage allocations.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/versioned_docs/version-1.5.X/developers/json-rpc/json-rpc-pos.md#2025-04-22_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n{\n  \"id\": 1,\n  \"jsonrpc\": \"2.0\",\n  \"method\": \"chain_get_era_info_by_switch_block\",\n  \"params\": [\n    {\n      \"Hash\": \"13c2d7a68ecdd4b74bf4393c88915c836c863fc4bf11d7f2bd930a1bbccacdcb\"\n    }\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Serializing NamedKeyValue Structure\nDESCRIPTION: Describes `NamedKeyValue`, representing the value associated with a NamedKey. It serializes as the `named_key` (as a `CLValue`) followed by the `name` of the key (also as a `CLValue`).\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/versioned_docs/version-2.0.0/concepts/serialization/types.md#2025-04-22_snippet_32\n\nLANGUAGE: text\nCODE:\n```\nA NamedKey value, serialized as the `named_key` serialized as a [`CLValue`](./primitives.md#clvalue) followed by the `name` of the key also serialized as a [`CLValue`](./primitives.md#clvalue).\n```\n\n----------------------------------------\n\nTITLE: Transaction V1 Body Schema Definition in JSON\nDESCRIPTION: Defines the schema for a TransactionV1 body, including required properties such as arguments, entry point, scheduling, target, and transaction category.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/condor/jsonrpc-comp/rpc-2.0/schema.json.md#2025-04-22_snippet_38\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"description\": \"Body of a `TransactionV1`.\",\n  \"type\": \"object\",\n  \"required\": [\n    \"args\",\n    \"entry_point\",\n    \"scheduling\",\n    \"target\",\n    \"transaction_category\"\n  ],\n  \"properties\": {\n    \"args\": {\n      \"$ref\": \"#/components/schemas/RuntimeArgs\"\n    },\n    \"target\": {\n      \"$ref\": \"#/components/schemas/TransactionTarget\"\n    },\n    \"entry_point\": {\n      \"$ref\": \"#/components/schemas/TransactionEntryPoint\"\n    },\n    \"transaction_category\": {\n      \"type\": \"integer\",\n      \"format\": \"uint8\",\n      \"minimum\": 0.0\n    },\n    \"scheduling\": {\n      \"$ref\": \"#/components/schemas/TransactionScheduling\"\n    }\n  },\n  \"additionalProperties\": false\n}\n```\n\n----------------------------------------\n\nTITLE: Querying Message Topic Information in Casper Network\nDESCRIPTION: Command to query global state for information about a message topic, including the message count and timestamp. This uses the topic's composite key which includes the contract hash and topic name hash.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/versioned_docs/version-2.0.0/developers/writing-onchain-code/emitting-contract-events.md#2025-04-22_snippet_14\n\nLANGUAGE: bash\nCODE:\n```\ncasper-client query-global-state \\\n--node-address <HOST:PORT> \\\n--key [HASH_STRING] \\\n--block-identifier <BLOCK_HASH> \\\n```\n\n----------------------------------------\n\nTITLE: Defining Reward RPC Response Schema\nDESCRIPTION: JSON schema defining the response structure for the info_get_reward RPC endpoint, which returns reward information for validators and delegators.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/condor/jsonrpc-comp/rpc-2.0/schema.json.md#2025-04-22_snippet_16\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"description\": \"Result for \\\"info_get_reward\\\" RPC response.\",\n  \"type\": \"object\",\n  \"required\": [\n    \"api_version\",\n    \"delegation_rate\",\n    \"era_id\",\n    \"reward_amount\"\n  ],\n  \"properties\": {\n    \"api_version\": {\n      \"description\": \"The RPC API version.\",\n      \"type\": \"string\"\n    },\n    \"reward_amount\": {\n      \"description\": \"The total reward amount in the requested era.\",\n      \"$ref\": \"#/components/schemas/U512\"\n    },\n    \"era_id\": {\n      \"description\": \"The era for which the reward was calculated.\",\n      \"$ref\": \"#/components/schemas/EraId\"\n    },\n    \"delegation_rate\": {\n      \"description\": \"The delegation rate of the validator.\",\n      \"type\": \"integer\",\n      \"format\": \"uint8\",\n      \"minimum\": 0.0\n    }\n  },\n  \"additionalProperties\": false\n}\n```\n\n----------------------------------------\n\nTITLE: Request for info_get_validator_changes in JSON-RPC\nDESCRIPTION: Example JSON-RPC request for the info_get_validator_changes method that retrieves status changes of active validators in the current era.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/versioned_docs/version-2.0.0/developers/json-rpc/json-rpc-pos.md#2025-04-22_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"id\": 1,\n  \"jsonrpc\": \"2.0\",\n  \"method\": \"info_get_validator_changes\",\n  \"params\": []\n}\n```\n\n----------------------------------------\n\nTITLE: Known Addresses Configuration\nDESCRIPTION: Example of adding known addresses to the network configuration\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/versioned_docs/version-2.0.0/operators/setup-network/staging-files-for-new-network.md#2025-04-22_snippet_5\n\nLANGUAGE: toml\nCODE:\n```\n[network]\nknown_addresses = ['<ip 1>:35000','<ip 2>:35000','<ip 3>:35000']\n```\n\n----------------------------------------\n\nTITLE: Installing Casper Python SDK with pip\nDESCRIPTION: Command to install the pycspr library using pip package manager. Requires Python 3.9+.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/docs/developers/dapps/sdk/python-sdk.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\npip3 install pycspr\n```\n\n----------------------------------------\n\nTITLE: Executing Speculative Deploy with Casper CLI Client\nDESCRIPTION: Command structure for sending a speculative execution deploy using the Rust CLI Casper client. This allows testing deploy execution without committing to global state to estimate gas costs.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/versioned_docs/version-1.5.X/developers/dapps/speculative-exec.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ncasper client put-deploy /\n--node-address <HOST:PORT> /\n--chain-name <CHAIN_NAME> /\n--secret-key <PATH> /\n--session-path <PATH>  /\n--payment-amount <PAYMENT_AMOUNT_IN_MOTES>\n--speculative-exec <BLOCK HEIGHT OR HASH>\n```\n\n----------------------------------------\n\nTITLE: Staging All Protocols on Casper Node (Mainnet) - Bash\nDESCRIPTION: This bash command runs the node_util.py utility as the casper user to stage all protocol versions based on casper.conf, typically for mainnet. It readies the node for all available protocol upgrades. Dependencies: /etc/casper/node_util.py script, casper user, and casper.conf properly configured.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/docs/operators/setup/install-node.md#2025-04-22_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\nsudo -u casper /etc/casper/node_util.py stage_protocols casper.conf\n```\n\n----------------------------------------\n\nTITLE: Defining Digest Schema in JSON\nDESCRIPTION: The Digest schema expresses a hex-encoded hash digest, forming a foundational element used by other schemas such as DeployHash. It defines the digest as a string to capture raw hash data effectively in the network's context.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/condor/jsonrpc-comp/rpc-1.5/schema.json.md#2025-04-22_snippet_28\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"description\": \"Hex-encoded hash digest.\",\n  \"type\": \"string\"\n}\n```\n\n----------------------------------------\n\nTITLE: Listening to the Event Stream with JavaScript\nDESCRIPTION: This snippet demonstrates how to set up an event listener in a dApp using the Casper JavaScript SDK. The EventStream object is used to subscribe to and process events emitted by a Casper node.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/versioned_docs/version-2.0.0/developers/dapps/monitor-and-consume-events.md#2025-04-22_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nconst { EventStream, EventName } = require(\"casper-js-sdk\")\n\nconst es = new EventStream(\"http://NODE_ADDRESS:PORT/events/\")\nes.start()\nes.subscribe(EventName.EVENT_NAME, eventHandler)\n\nconst eventHandler = (event) => {\n    console.log(event)\n}\n```\n\n----------------------------------------\n\nTITLE: Verifying Casper Node Open Files Limit Change (Bash)\nDESCRIPTION: Uses the combined `pgrep` and `prlimit` command to check the open files limit (`nofile`) for the `casper-node` process after attempting to change it. This verifies if the temporary limit adjustment was successful.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/versioned_docs/version-1.5.X/operators/setup/open-files.md#2025-04-22_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\nsudo prlimit -n -p $(pgrep \"casper-node$\")\n```\n\n----------------------------------------\n\nTITLE: Declaring Call Methods in Near\nDESCRIPTION: This code demonstrates how to define a call method in Near blockchain that can mutate the contract state. Near has three types of functions: Init, View, and Call methods.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/docs/resources/moving-to-casper.md#2025-04-22_snippet_4\n\nLANGUAGE: rust\nCODE:\n```\npub fn add_message(&mut self, ...) { }\n```\n\n----------------------------------------\n\nTITLE: Sending Contract Deploy using casper-client\nDESCRIPTION: Command to deploy a compiled contract to the Casper network using the put-deploy command. Requires node address, chain name, secret key, payment amount, and session path parameters.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/versioned_docs/version-1.5.X/developers/cli/sending-deploys.md#2025-04-22_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ncasper-client put-deploy \\\n    --node-address <HOST:PORT> \\\n    --chain-name casper-test \\\n    --secret-key <PATH> \\\n    --payment-amount <PAYMENT-AMOUNT> \\\n    --session-path <SESSION-PATH>\n```\n\n----------------------------------------\n\nTITLE: Implementing Casper Wallet Provider Helper in JavaScript\nDESCRIPTION: This code defines a helper function to get a Casper Wallet provider instance, checking if the extension is installed and configuring the request timeout.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/versioned_docs/version-2.0.0/developers/dapps/template-frontend.md#2025-04-22_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\n// Timeout (in ms) for requests to the extension [DEFAULT: 30 min]\nconst REQUESTS_TIMEOUT_MS = 30 * 60 * 1000;\n\nexport const getProvider = () => {\n    let providerConstructor = window.CasperWalletProvider;\n    if (providerConstructor === undefined) {\n        alert(\"Casper Wallet extension is not installed!\");\n        return;\n    }\n    let provider = providerConstructor({\n        timeout: REQUESTS_TIMEOUT_MS\n    });\n    return provider;\n}\n\n```\n\n----------------------------------------\n\nTITLE: Example Make-Transfer Command with Real Values\nDESCRIPTION: Practical example of the make-transfer command with actual parameter values, showing how to transfer tokens on the Casper testnet.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/docs/developers/cli/transfers/multisig-deploy-transfer.md#2025-04-22_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ncasper-client make-transfer --amount 2500000000 \\\n--secret-key ~/KEYS/multi-sig/keys/default_secret_key.pem \\\n--chain-name casper-test \\\n--target-account 0154d828baafa6858b92919c4d78f26747430dcbecb9aa03e8b44077dc6266cabf \\\n--transfer-id 1 \\\n--payment-amount 100000000 \\\n--output transfer.deploy\n```\n\n----------------------------------------\n\nTITLE: Incrementing the Counter using Entry Point in Bash\nDESCRIPTION: Command to increment the counter by calling the 'counter_inc' entry point on the deployed contract. This uses session-name and session-entry-point instead of a session-path.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/versioned_docs/version-1.5.X/resources/beginner/counter/walkthrough.md#2025-04-22_snippet_11\n\nLANGUAGE: bash\nCODE:\n```\ncasper-client put-deploy \\\n    --node-address http://localhost:11101 \\\n    --chain-name casper-net-1 \\\n    --secret-key [PATH_TO_YOUR_KEY]/secret_key.pem \\\n    --payment-amount [PAYMENT_AMOUNT_IN_MOTES] \\\n    --session-name \"counter\" \\\n    --session-entry-point \"counter_inc\"\n```\n\n----------------------------------------\n\nTITLE: Example JSON Result for State Root Hash Query\nDESCRIPTION: This snippet shows an example JSON response from the `casper-client get-state-root-hash` command. It includes the JSON-RPC version, an ID, and a result object containing the Casper API version and the retrieved `state_root_hash`.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/versioned_docs/version-1.5.X/resources/advanced/cross-contract.md#2025-04-22_snippet_24\n\nLANGUAGE: bash\nCODE:\n```\n{\n  \"id\": -3631326529646611302,\n  \"jsonrpc\": \"2.0\",\n  \"result\": {\n    \"api_version\": \"1.4.13\",\n    \"state_root_hash\": \"2f3e100324deb999107229dbec5c4b724653174328c99ea0836931248c3cc9cb\"\n  }\n}\n\n```\n\n----------------------------------------\n\nTITLE: Defining Failure Object\nDESCRIPTION: This schema defines an object representing a failed transformation with an error message. It requires the `Failure` property, which is a string. No additional properties are allowed.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/condor/jsonrpc-comp/rpc-1.5/schema/components.json.md#2025-04-22_snippet_23\n\nLANGUAGE: JSON\nCODE:\n```\n{\\n    \\\"description\\\": \\\"A failed transformation, containing an error message.\\\",\\n    \\\"type\\\": \\\"object\\\",\\n    \\\"required\\\": [\\n        \\\"Failure\\\"\\n    ],\\n    \\\"properties\\\": {\\n        \\\"Failure\\\": {\\n            \\\"type\\\": \\\"string\\\"\\n        }\\n    },\\n    \\\"additionalProperties\\\": false\\n}\n```\n\n----------------------------------------\n\nTITLE: Block Metadata Structures\nDESCRIPTION: Defines structures for block headers, metadata, and finality signatures used in batch operations.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/versioned_docs/version-1.5.X/concepts/design/networking-protocol.md#2025-04-22_snippet_11\n\nLANGUAGE: rust\nCODE:\n```\nstruct BlockHeadersBatchId {\n    highest: u64,\n    lowest: u64,\n}\n\nstruct BlockWithMetadata {\n    block: Block,\n    finality_signatures: BlockSignatures,\n}\n\nstruct BlockHeaderWithMetadata {\n    block_header: BlockHeader,\n    block_signatures: BlockSignatures,\n}\n\nstruct BlockSignatures {\n    block_hash: BlockHash,\n    era_id: u64,\n    proofs: BTreeMap<PublicKey, Signature>,\n}\n\nstruct BlockAndDeploys {\n    block: Block,\n    deploys: Vec<Deploy>,\n}\n\nstruct BlockHeadersBatch(Vec<BlockHeader>);\n```\n\n----------------------------------------\n\nTITLE: Streaming Database Download and Decompression\nDESCRIPTION: Complete pipeline for downloading and decompressing database files directly from URL.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/versioned_docs/version-2.0.0/operators/maintenance/archiving-and-restoring.md#2025-04-22_snippet_10\n\nLANGUAGE: bash\nCODE:\n```\ncurl -s --output - <tar.zst URL> | zstd -d --long=31 | sudo -u casper tar -xv\n```\n\n----------------------------------------\n\nTITLE: Defining Block Sync Status in JSON Schema\nDESCRIPTION: This JSON snippet defines a schema for tracking the status of synchronizing an individual block in a blockchain network. It includes key properties such as \\\"block_hash\\\", \\\"block_height\\\", and \\\"acquisition_state\\\". Dependencies include the \\\"#/components/schemas/BlockHash\\\" definition. The \\\"block_height\\\" can be an integer or null and must be at least 0.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/condor/jsonrpc-comp/rpc-2.0/schema/BlockSyncStatus.json.md#2025-04-22_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\\n    \\\"description\\\": \\\"The status of syncing an individual block.\\\",\\n    \\\"type\\\": \\\"object\\\",\\n    \\\"required\\\": [\\n        \\\"acquisition_state\\\",\\n        \\\"block_hash\\\"\\n    ],\\n    \\\"properties\\\": {\\n        \\\"block_hash\\\": {\\n            \\\"description\\\": \\\"The block hash.\\\",\\n            \\\"allOf\\\": [\\n                {\\n                    \\\"$ref\\\": \\\"#/components/schemas/BlockHash\\\"\\n                }\\n            ]\\n        },\\n        \\\"block_height\\\": {\\n            \\\"description\\\": \\\"The height of the block, if known.\\\",\\n            \\\"type\\\": [\\n                \\\"integer\\\",\\n                \\\"null\\\"\\n            ],\\n            \\\"format\\\": \\\"uint64\\\",\\n            \\\"minimum\\\": 0\\n        },\\n        \\\"acquisition_state\\\": {\\n            \\\"description\\\": \\\"The state of acquisition of the data associated with the block.\\\",\\n            \\\"type\\\": \\\"string\\\"\\n        }\\n    },\\n    \\\"additionalProperties\\\": false\\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Session Object for Casper Network Staking Deploys in JavaScript\nDESCRIPTION: This snippet illustrates how to create a session object for staking deploys on the Casper Network using the casper-js-sdk. It includes setting up the auction manager contract hash and entry point.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/versioned_docs/version-2.0.0/resources/advanced/list-cspr.md#2025-04-22_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nimport { decodeBase16, DeployUtil } from 'casper-js-sdk';\n\nconst session = DeployUtil.ExecutableDeployItem.newStoredContractByHash(\n  decodeBase16(auction_manager_contract_hash), // auction manager contract hash\n  contractEntryPoint, // auction manager entry point\n  args\n);\n```\n\n----------------------------------------\n\nTITLE: Example Response from Allowance Query\nDESCRIPTION: Example response from a global state query showing a CEP-18 token allowance. The 'parsed' field contains the actual allowance amount.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/versioned_docs/version-2.0.0/resources/tokens/cep18/transfer.md#2025-04-22_snippet_13\n\nLANGUAGE: bash\nCODE:\n```\n{\n  \"id\": -9142472925449984061,\n  \"jsonrpc\": \"2.0\",\n  \"result\": {\n    \"api_version\": \"1.0.0\",\n    \"block_header\": null,\n    \"merkle_proof\": \"[3796 hex chars]\",\n    \"stored_value\": {\n      \"CLValue\": {\n        \"bytes\": \"010f\",\n        \"cl_type\": \"U256\",\n        \"parsed\": \"15\"\n      }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Parsing Updated Casper Query Result JSON\nDESCRIPTION: Example JSON output from querying the updated counter contract state, showing the incremented parsed value of the counter.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/versioned_docs/version-2.0.0/resources/quick-start.md#2025-04-22_snippet_10\n\nLANGUAGE: json\nCODE:\n```\n{\n\"id\": 8523290678829319485,\n\"jsonrpc\": \"2.0\",\n\"result\": {\n   \"api_version\": \"1.4.6\",\n   \"block_header\": null,\n   \"merkle_proof\": \"[85716 hex chars]\",\n   \"stored_value\": {\n      \"CLValue\": {\n      \"bytes\": \"01000000\",\n      \"cl_type\": \"I32\",\n      \"parsed\": 1\n      }\n   }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Accessing Session Arguments in Casper Contracts\nDESCRIPTION: This code demonstrates how to access session arguments within a Casper contract using the get_key function. This allows the contract to retrieve values passed during deployment.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/docs/resources/moving-to-casper.md#2025-04-22_snippet_11\n\nLANGUAGE: bash\nCODE:\n```\nlet uref: URef = runtime::get_key(Key_Name)\n```\n\n----------------------------------------\n\nTITLE: Compile Casper Smart Contract to Wasm\nDESCRIPTION: This sequence of commands navigates into the my-project directory and compiles the smart contract into WebAssembly (Wasm) using make commands. The build prepares and builds the contract targeting Wasm.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/versioned_docs/version-1.5.X/developers/writing-onchain-code/getting-started.md#2025-04-22_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\ncd my-project\nmake prepare\nmake build-contract\n```\n\n----------------------------------------\n\nTITLE: Defining GetRequest Tag Enum in Rust\nDESCRIPTION: Specifies the Tag enum used in GetRequests to indicate the type of item being retrieved. Each variant corresponds to a specific item type in the Casper network.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/docs/concepts/design/networking-protocol.md#2025-04-22_snippet_3\n\nLANGUAGE: rust\nCODE:\n```\npub enum Tag {\n    Deploy,\n    FinalizedApprovals,\n    Block,\n    GossipedAddress,\n    BlockAndMetadataByHeight,\n    BlockHeaderByHash,\n    BlockHeaderAndFinalitySignaturesByHeight,\n    TrieOrChunk,\n    BlockAndDeploysByHash,\n    BlockHeaderBatch,\n    FinalitySignaturesByHash,\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Dependencies for Casper Contract Testing in Cargo.toml\nDESCRIPTION: This snippet shows how to specify the required dependencies for testing Casper contracts in the Cargo.toml file. It includes the casper-execution-engine, casper-engine-test-support, and casper-types crates.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/versioned_docs/version-2.0.0/developers/writing-onchain-code/testing-contracts.md#2025-04-22_snippet_0\n\nLANGUAGE: toml\nCODE:\n```\n[dependencies]\ncasper-execution-engine = \"2.0.1\"\ncasper-engine-test-support = { version = \"2.2.0\", features = [\"test-support\"] }\ncasper-types = \"1.5.0\"\n```\n\n----------------------------------------\n\nTITLE: Defining a Basic Test Function Structure in Rust\nDESCRIPTION: Outlines the fundamental structure of a unit test function in Rust. The `#[test]` attribute marks the function (e.g., `<unit-test-name>`) as a test case to be executed by the test runner (`cargo test`).\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/versioned_docs/version-1.5.X/developers/writing-onchain-code/testing-session-code.md#2025-04-22_snippet_5\n\nLANGUAGE: rust\nCODE:\n```\n#[test]\nfn <unit-test-name>{\n   // Test function implementation\n}\n```\n\n----------------------------------------\n\nTITLE: Deploy Approvals Structure in JSON\nDESCRIPTION: Example of the approvals section in a deploy showing the signer's public key and signature.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/versioned_docs/version-2.0.0/resources/advanced/list-auth-keys-tutorial.md#2025-04-22_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n\"approvals\": [\n    {\n      \"signer\": \"02021a4da3d6f32ea3ebd2519e1a37a1b811671085bf4f1cf2a36b931344a99b756a\",\n      \"signature\": \"02df8cdf0bff3bd93e831d24563d5acbefa0ed13814550e910d03208d5fb3c11770dd3d918784ec84342e53666eacf59aeecbf4ce0cdd60e167c4a4b20e4b8f481\"\n    }\n]\n```\n\n----------------------------------------\n\nTITLE: Sample Response for State Root Hash Query\nDESCRIPTION: The JSON response from a successful state root hash query, including the API version and the hex-encoded state root hash.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/docs/developers/cli/querying-global-state.md#2025-04-22_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"jsonrpc\": \"2.0\",\n  \"id\": -4225403855447288375,\n  \"result\": {\n    \"api_version\": \"2.0.0\",\n    \"state_root_hash\": \"6b5849caa605acdc29564f303764396a27ef7a6b1a61f7b13109b129e7e70d81\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Named Keys JSON Example\nDESCRIPTION: Illustrates a JSON structure that includes named keys in the Casper account after executing a Wasm contract. The 'named_keys' field contains keys generated by the Wasm deployment.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/versioned_docs/version-2.0.0/resources/advanced/multi-sig/multi-sig-workflow.md#2025-04-22_snippet_10\n\nLANGUAGE: json\nCODE:\n```\n\"named_keys\": [\n  {\n    \"key\": \"uref-9b9ecaa9e5e235fc6955d4d528cb1b5b38f2d800f6cbbc55351131a3701b5a81-007\",\n    \"name\": \"my-key-name\"\n  }\n]\n```\n\n----------------------------------------\n\nTITLE: Requesting Chainspec with info_get_chainspec\nDESCRIPTION: This example demonstrates how to request chainspec file data using the info_get_chainspec RPC method, which returns raw bytes for chainspec files.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/versioned_docs/version-1.5.X/developers/json-rpc/json-rpc-informational.md#2025-04-22_snippet_8\n\nLANGUAGE: bash\nCODE:\n```\n{\n  \"jsonrpc\": \"2.0\",\n  \"method\": \"info_get_chainspec\",\n  \"id\": 5510244237763930243\n}\n```\n\n----------------------------------------\n\nTITLE: Viewing Faucet Account Information in NCTL\nDESCRIPTION: This command displays details of the faucet account in an NCTL network. The faucet is the default account created on the network and is used to fund transactions in test environments. It provides the account's secret key location and account hash.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/versioned_docs/version-2.0.0/resources/beginner/counter/commands.md#2025-04-22_snippet_0\n\nLANGUAGE: rust\nCODE:\n```\nnctl-view-faucet-account\n```\n\n----------------------------------------\n\nTITLE: Calling New Contract Entry Point in Bash\nDESCRIPTION: This Bash command demonstrates how to call a new entry point (counter_decrement) added to a contract after an upgrade using the Casper client.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/versioned_docs/version-2.0.0/resources/beginner/upgrade-contract.md#2025-04-22_snippet_8\n\nLANGUAGE: bash\nCODE:\n```\ncasper-client put-deploy \\\n    --node-address http://[NODE_IP]:7777 \\\n    --chain-name [CHAIN_NAME] \\\n    --secret-key [PATH_TO_YOUR_KEY]/secret_key.pem \\\n    --payment-amount [PAYMENT_AMOUNT_IN_MOTES] \\\n    --session-package-name \"counter_package_name\" \\\n    --session-entry-point \"counter_decrement\"\n```\n\n----------------------------------------\n\nTITLE: Defining Hex-Encoded Address Property in JSON\nDESCRIPTION: This JSON object defines a property representing a hex-encoded address. It specifies the data type as 'string' and includes a 'description' field clarifying its purpose: 'The hex-encoded address of the addressable entity.' This structure is likely part of a larger JSON schema or data definition within the Casper Network context.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/condor/jsonrpc-comp/rpc-2.0/schema/AddressableEntityHash.json.md#2025-04-22_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"description\": \"The hex-encoded address of the addressable entity.\",\n    \"type\": \"string\"\n} \n```\n\n----------------------------------------\n\nTITLE: Defining a Hex-Encoded Transfer Address Field in JSON\nDESCRIPTION: This JSON object defines metadata for a data field, likely within a larger schema or configuration. It specifies that the field represents a 'Hex-encoded transfer address' and confirms that its expected data type is 'string'.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/condor/jsonrpc-comp/rpc-1.5/schema/TransferAddr.json.md#2025-04-22_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"description\": \"Hex-encoded transfer address.\",\n    \"type\": \"string\"\n} \n```\n\n----------------------------------------\n\nTITLE: Defining Seigniorage Allocation Schema with JSON Schema in JSON\nDESCRIPTION: This snippet establishes a JSON Schema for validating objects that express details about seigniorage allocations, supporting both validator and delegator roles. It mandates specific properties (like public keys and amounts), referencing external schemas for cryptographic keys and numeric types (U512), and prevents additional properties for strict conformance. Dependencies include the presence of referenced schemas '#/components/schemas/PublicKey' and '#/components/schemas/U512', essential for proper schema resolution. Inputs must match one of the specified object types, and any data not conforming to these structures will fail validation.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/condor/jsonrpc-comp/rpc-2.0/schema/SeigniorageAllocation.json.md#2025-04-22_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"description\": \"Information about a seigniorage allocation\",\n    \"oneOf\": [\n        {\n            \"description\": \"Info about a seigniorage allocation for a validator\",\n            \"type\": \"object\",\n            \"required\": [\n                \"Validator\"\n            ],\n            \"properties\": {\n                \"Validator\": {\n                    \"type\": \"object\",\n                    \"required\": [\n                        \"amount\",\n                        \"validator_public_key\"\n                    ],\n                    \"properties\": {\n                        \"validator_public_key\": {\n                            \"description\": \"Validator's public key\",\n                            \"allOf\": [\n                                {\n                                    \"$ref\": \"#/components/schemas/PublicKey\"\n                                }\n                            ]\n                        },\n                        \"amount\": {\n                            \"description\": \"Allocated amount\",\n                            \"allOf\": [\n                                {\n                                    \"$ref\": \"#/components/schemas/U512\"\n                                }\n                            ]\n                        }\n                    },\n                    \"additionalProperties\": false\n                }\n            },\n            \"additionalProperties\": false\n        },\n        {\n            \"description\": \"Info about a seigniorage allocation for a delegator\",\n            \"type\": \"object\",\n            \"required\": [\n                \"Delegator\"\n            ],\n            \"properties\": {\n                \"Delegator\": {\n                    \"type\": \"object\",\n                    \"required\": [\n                        \"amount\",\n                        \"delegator_public_key\",\n                        \"validator_public_key\"\n                    ],\n                    \"properties\": {\n                        \"delegator_public_key\": {\n                            \"description\": \"Delegator's public key\",\n                            \"allOf\": [\n                                {\n                                    \"$ref\": \"#/components/schemas/PublicKey\"\n                                }\n                            ]\n                        },\n                        \"validator_public_key\": {\n                            \"description\": \"Validator's public key\",\n                            \"allOf\": [\n                                {\n                                    \"$ref\": \"#/components/schemas/PublicKey\"\n                                }\n                            ]\n                        },\n                        \"amount\": {\n                            \"description\": \"Allocated amount\",\n                            \"allOf\": [\n                                {\n                                    \"$ref\": \"#/components/schemas/U512\"\n                                }\n                            ]\n                        }\n                    },\n                    \"additionalProperties\": false\n                }\n            },\n            \"additionalProperties\": false\n        }\n    ]\n} \n```\n\n----------------------------------------\n\nTITLE: Preparing Runtime Arguments for Casper Network Redelegation in JavaScript\nDESCRIPTION: This code snippet illustrates how to prepare runtime arguments for redelegation operations on the Casper Network using the casper-js-sdk. It includes setting up the delegator, current validator, and new validator public keys.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/versioned_docs/version-2.0.0/resources/advanced/list-cspr.md#2025-04-22_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\nimport { RuntimeArgs, CLPublicKey, CLValueBuilder } from 'casper-js-sdk';\n\nconst args = RuntimeArgs.fromMap({\n    delegator: CLPublicKey.fromHex(delegatorPublicKeyHex),\n    validator: CLPublicKey.fromHex(validatorPublicKeyHex),\n    new_validator: CLPublicKey.fromHex(redelegateValidatorPublicKeyHex),\n    amount: CLValueBuilder.u512(amountMotes)\n})\n```\n\n----------------------------------------\n\nTITLE: Parsing Casper Query Result JSON\nDESCRIPTION: Example JSON output from querying the counter contract state, showing the parsed value of the counter.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/versioned_docs/version-2.0.0/resources/quick-start.md#2025-04-22_snippet_7\n\nLANGUAGE: json\nCODE:\n```\n{\n\"id\": 8523290678829319485,\n\"jsonrpc\": \"2.0\",\n\"result\": {\n   \"api_version\": \"1.4.6\",\n   \"block_header\": null,\n   \"merkle_proof\": \"[85716 hex chars]\",\n   \"stored_value\": {\n      \"CLValue\": {\n      \"bytes\": \"01000000\",\n      \"cl_type\": \"I32\",\n      \"parsed\": 0\n      }\n   }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Querying Auction Info with Casper Command-Line Client - Bash\nDESCRIPTION: This snippet demonstrates how to use the casper-client CLI to request auction information from a specific node on the Casper network. It requires the casper-client to be installed and a reachable node IP address. It returns detailed auction information, including validator bids and active validator sets, formatted as JSON for subsequent review.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/versioned_docs/version-1.5.X/developers/cli/delegate.md#2025-04-22_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\ncasper-client get-auction-info \\\n--node-address http://<peer-ip-address>:7777\n```\n\n----------------------------------------\n\nTITLE: Checking Deploy Status for Bid\nDESCRIPTION: Command to check the execution status of a bid deploy using casper-client.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/versioned_docs/version-2.0.0/operators/becoming-a-validator/bonding.md#2025-04-22_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\ncasper-client get-deploy --node-address http://<HOST:PORT> <DEPLOY_HASH>\n```\n\n----------------------------------------\n\nTITLE: Querying Era Summary with chain_get_era_summary\nDESCRIPTION: Example request for retrieving era summary information at a specific block using chain_get_era_summary method.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/docs/developers/json-rpc/json-rpc-informational.md#2025-04-22_snippet_4\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"id\": 1,\n  \"jsonrpc\":\"2.0\",\n  \"method\":\"chain_get_era_summary\",\n  \"params\": [\n    {\n      \"name\": \"block_identifier\",\n      \"value\": {\n        \"Hash\": \"0744fcb72af43c5cc372039bc5a8bfee48808a9ce414acc0d6338a628c20eb42\"\n      }\n    }\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Importing Required Packages for Casper Testing in Rust\nDESCRIPTION: This snippet demonstrates how to import the necessary packages for testing Casper session code in Rust. It includes imports from casper-engine-test-support and casper-types.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/versioned_docs/version-2.0.0/developers/writing-onchain-code/testing-session-code.md#2025-04-22_snippet_2\n\nLANGUAGE: rust\nCODE:\n```\nuse casper_engine_test_support::\n    ExecuteRequestBuilder, InMemoryWasmTestBuilder, DEFAULT_ACCOUNT_ADDR,\n    DEFAULT_RUN_GENESIS_REQUEST,\n};\nuse casper_types::account::AccountHash;\nuse casper_types::{runtime_args, RuntimeArgs};\n```\n\n----------------------------------------\n\nTITLE: Building Rust Smart Contract for Casper\nDESCRIPTION: This Bash command builds a Rust smart contract for the Casper platform in release mode targeting WebAssembly, which is necessary for deployment. It requires cargo as a build tool in the development environment.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/versioned_docs/version-1.5.X/developers/writing-onchain-code/best-practices.md#2025-04-22_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ncargo build --release --target wasm32-unknown-unknown\n```\n\n----------------------------------------\n\nTITLE: Serializing Timestamp Type\nDESCRIPTION: Defines `Timestamp`, which is formatted according to RFC 3339. It serializes as a single `u64` value representing the timestamp.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/versioned_docs/version-2.0.0/concepts/serialization/types.md#2025-04-22_snippet_51\n\nLANGUAGE: text\nCODE:\n```\nA timestamp formatted as per RFC 3339 and serialized as a single [`u64`](./primitives.md#clvalue-numeric) value.\n```\n\n----------------------------------------\n\nTITLE: Cloning Casper Node Repository using Bash\nDESCRIPTION: This command clones the official `casper-node` repository from GitHub. This is the first step in building the necessary contracts for joining the network as a validator.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/docs/operators/setup/joining.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ngit clone https://github.com/casper-network/casper-node\n```\n\n----------------------------------------\n\nTITLE: Examining Shutdown Event Structure in Bash\nDESCRIPTION: The Shutdown event is emitted when a node is about to shut down, usually for an upgrade, and causes termination of the event stream. It is represented simply as the string \"Shutdown\".\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/versioned_docs/version-1.5.X/developers/dapps/monitor-and-consume-events.md#2025-04-22_snippet_11\n\nLANGUAGE: bash\nCODE:\n```\n\"Shutdown\"\n```\n\n----------------------------------------\n\nTITLE: Query Balance Command Template\nDESCRIPTION: Template for querying purse balance with required parameters including node address, state root hash, and purse identifier\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/versioned_docs/version-2.0.0/developers/cli/transfers/verify-transfer.md#2025-04-22_snippet_16\n\nLANGUAGE: bash\nCODE:\n```\ncasper-client query-balance \\\n--id 6 \\\n--node-address [NODE_SERVER_ADDRESS] \\\n--state-root-hash [STATE_ROOT_HAHS] \\\n--purse-identifier [SOURCE_PUBLIC_KEY_HEX]\n```\n\n----------------------------------------\n\nTITLE: Serializing MessageTopicSummary Structure\nDESCRIPTION: Defines the `MessageTopicSummary` structure used for storing a summary of a message topic in the global state. It serializes as a `u32` value representing the message count, immediately followed by the serialized `BlockTime`.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/versioned_docs/version-2.0.0/concepts/serialization/types.md#2025-04-22_snippet_27\n\nLANGUAGE: text\nCODE:\n```\nA summary of a message topic that will be stored in global state. It serializes as a [`u32`](./primitives.md#clvalue-numeric) value for the `message_count` followed by the [`BlockTime`](#blocktime)\n```\n\n----------------------------------------\n\nTITLE: Defining User Group Schema in JSON\nDESCRIPTION: This JSON object defines the schema for a 'user group'. It includes a 'description' field explaining that it represents a labelled group associated with methods of a versioned contract for access control, and a 'type' field specifying that the user group identifier should be a string.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/condor/jsonrpc-comp/rpc-1.5/schema/Group.json.md#2025-04-22_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"description\": \"A (labelled) \\\"user group\\\". Each method of a versioned contract may be associated with one or more user groups which are allowed to call it.\",\n    \"type\": \"string\"\n} \n```\n\n----------------------------------------\n\nTITLE: Executing Deploy on Casper Network with JSON Data\nDESCRIPTION: This JSON structure represents the API request and response format for the \"account_put_deploy\" operation on the Casper Network. It includes all necessary schema details, parameters, result fields, and an example of a deploy submission, demonstrating the minimum data needed to execute a deploy. Key dependencies include the \"Deploy\" and \"DeployHash\" schema references, which are required for defining the deploy structure and hash, respectively. The input must include a valid deploy structure, and the output is the deploy hash, encapsulated in an API versioned response.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/condor/jsonrpc-comp/rpc-1.5/account_put_deploy.json.md#2025-04-22_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"name\": \"account_put_deploy\",\n  \"summary\": \"receives a Deploy to be executed by the network\",\n  \"params\": [\n    {\n      \"name\": \"deploy\",\n      \"schema\": {\n        \"description\": \"The `Deploy`.\",\n        \"$ref\": \"#/components/schemas/Deploy\"\n      },\n      \"required\": true\n    }\n  ],\n  \"result\": {\n    \"name\": \"account_put_deploy_result\",\n    \"schema\": {\n      \"description\": \"Result for \\\"account_put_deploy\\\" RPC response.\",\n      \"type\": \"object\",\n      \"required\": [\n        \"api_version\",\n        \"deploy_hash\"\n      ],\n      \"properties\": {\n        \"api_version\": {\n          \"description\": \"The RPC API version.\",\n          \"type\": \"string\"\n        },\n        \"deploy_hash\": {\n          \"description\": \"The deploy hash.\",\n          \"$ref\": \"#/components/schemas/DeployHash\"\n        }\n      },\n      \"additionalProperties\": false\n    }\n  },\n  \"examples\": [\n    {\n      \"name\": \"account_put_deploy_example\",\n      \"params\": [\n        {\n          \"name\": \"deploy\",\n          \"value\": {\n            \"hash\": \"5c9b3b099c1378aa8e4a5f07f59ff1fcdc69a83179427c7e67ae0377d94d93fa\",\n            \"header\": {\n              \"account\": \"01d9bf2148748a85c89da5aad8ee0b0fc2d105fd39d41a4c796536354f0ae2900c\",\n              \"timestamp\": \"2020-11-17T00:39:24.072Z\",\n              \"ttl\": \"1h\",\n              \"gas_price\": 1,\n              \"body_hash\": \"d53cf72d17278fd47d399013ca389c50d589352f1a12593c0b8e01872a641b50\",\n              \"dependencies\": [\n                \"0101010101010101010101010101010101010101010101010101010101010101\"\n              ],\n              \"chain_name\": \"casper-example\"\n            },\n            \"payment\": {\n              \"StoredContractByName\": {\n                \"name\": \"casper-example\",\n                \"entry_point\": \"example-entry-point\",\n                \"args\": [\n                  [\n                    \"amount\",\n                    {\n                      \"cl_type\": \"I32\",\n                      \"bytes\": \"e8030000\",\n                      \"parsed\": 1000\n                    }\n                  ]\n                ]\n              }\n            },\n            \"session\": {\n              \"Transfer\": {\n                \"args\": [\n                  [\n                    \"amount\",\n                    {\n                      \"cl_type\": \"I32\",\n                      \"bytes\": \"e8030000\",\n                      \"parsed\": 1000\n                    }\n                  ]\n                ]\n              }\n            },\n            \"approvals\": [\n              {\n                \"signer\": \"01d9bf2148748a85c89da5aad8ee0b0fc2d105fd39d41a4c796536354f0ae2900c\",\n                \"signature\": \"014c1a89f92e29dd74fc648f741137d9caf4edba97c5f9799ce0c9aa6b0c9b58db368c64098603dbecef645774c05dff057cb1f91f2cf390bbacce78aa6f084007\"\n              }\n            ]\n          }\n        }\n      ],\n      \"result\": {\n        \"name\": \"account_put_deploy_example_result\",\n        \"value\": {\n          \"api_version\": \"1.5.6\",\n          \"deploy_hash\": \"5c9b3b099c1378aa8e4a5f07f59ff1fcdc69a83179427c7e67ae0377d94d93fa\"\n        }\n      }\n    }\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Adding New Storage Fields in Contract Upgrade\nDESCRIPTION: Example of adding new data storage fields during a contract upgrade by creating and initializing named keys with default values.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/versioned_docs/version-1.5.X/resources/beginner/upgrade-contract.md#2025-04-22_snippet_10\n\nLANGUAGE: rust\nCODE:\n```\n// Create NamedKeys and initialize the new field (last_updated) with default value (0).\nlet mut named_keys = NamedKeys::new();\nlet last_updated = storage::new_uref(0_u64);\nnamed_keys.insert(String::from(LAST_UPDATED_KEY), last_updated.into());\n```\n\n----------------------------------------\n\nTITLE: Describing ChainNameDigest Serialization (Casper Network)\nDESCRIPTION: Specifies that ChainNameDigest, the cryptographic hash of a chain name, is serialized simply as the byte representation of the hash itself.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/versioned_docs/version-2.0.0/concepts/serialization/types.md#2025-04-22_snippet_12\n\nLANGUAGE: Text\nCODE:\n```\n## ChainNameDigest {#chain-name-digest}\n\nThe cryptographic hash of a chain name, serialized as the byte representation of the hash itself.\n```\n\n----------------------------------------\n\nTITLE: Updating Account Thresholds\nDESCRIPTION: Command to update the deployment and key management thresholds using update_thresholds.wasm session code.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/versioned_docs/version-2.0.0/resources/advanced/multi-sig/multi-sig-workflow.md#2025-04-22_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\ncasper-client put-deploy \\\n--node-address https://node.testnet.casper.network \\\n--chain-name casper-test \\\n--payment-amount 500000000 \\\n--secret-key $PATH/secret_key.pem \\\n--session-path target/wasm32-unknown-unknown/release/update_thresholds.wasm \\\n--session-arg \"deployment_threshold:u8='2'\" \\\n--session-arg \"key_management_threshold:u8='3'\"\n```\n\n----------------------------------------\n\nTITLE: Checking Node Upgrade Status\nDESCRIPTION: Command to verify the node's upgrade status using the status endpoint.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/versioned_docs/version-2.0.0/operators/setup/upgrade.md#2025-04-22_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\ncurl -s http://127.0.0.1:8888/status | jq .next_upgrade\n```\n\n----------------------------------------\n\nTITLE: Defining Protocol Version Field Schema in JSON\nDESCRIPTION: This JSON snippet defines the schema for a field, likely representing the Casper Platform's protocol version. It includes a 'description' key explaining its purpose (\"Casper Platform protocol version\") and a 'type' key specifying that the value must be a string. This structure is commonly used in JSON Schema definitions for APIs or configurations.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/condor/jsonrpc-comp/rpc-2.0/schema/ProtocolVersion.json.md#2025-04-22_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"description\": \"Casper Platform protocol version\",\n    \"type\": \"string\"\n} \n```\n\n----------------------------------------\n\nTITLE: Checking Node Sync Status\nDESCRIPTION: This Bash command is used to check the synchronization status of a validator node within the Casper Network by comparing the node's block height to the current block height from an external source.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/docs/operators/becoming-a-validator/recovering.md#2025-04-22_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\ncurl -s localhost:8888/status | jq .last_added_block_info\n```\n\n----------------------------------------\n\nTITLE: Creating a Deploy for Casper Network Transactions in JavaScript\nDESCRIPTION: This snippet shows how to create a deploy for Casper Network transactions using the casper-js-sdk. It combines the deploy parameters, session, and payment objects.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/versioned_docs/version-2.0.0/resources/advanced/list-cspr.md#2025-04-22_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\nimport { DeployUtil } from 'casper-js-sdk';\n\nDeployUtil.makeDeploy(deployParams, session, payment);\n```\n\n----------------------------------------\n\nTITLE: Querying Named Keys with Query Path\nDESCRIPTION: Command structure for querying specific named keys using the query path argument to drill down into contract state.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/versioned_docs/version-2.0.0/developers/cli/querying-global-state.md#2025-04-22_snippet_17\n\nLANGUAGE: bash\nCODE:\n```\ncasper-client query-global-state \\\n--node-address [NODE_SERVER_ADDRESS] \\\n--state-root-hash [STATE_ROOT_HASH] \\\n--key [HASH_STRING] \\\n-q \"PATH_FROM_KEY\"\n```\n\n----------------------------------------\n\nTITLE: Verifying Deploy Execution on Casper Network\nDESCRIPTION: Command to verify the successful execution of a deploy using the Casper client. The command requires the deploy hash from the previous operation to check its status and details.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/versioned_docs/version-1.5.X/resources/advanced/multi-sig/multi-sig-workflow.md#2025-04-22_snippet_9\n\nLANGUAGE: bash\nCODE:\n```\ncasper-client get-deploy --node-address https://node.testnet.casper.network <DEPLOY_HASH>\n```\n\n----------------------------------------\n\nTITLE: Contract Initialization in Rust\nDESCRIPTION: Contract initialization code that stores authorization keys from the installer deploy into a named key.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/versioned_docs/version-2.0.0/resources/advanced/list-auth-keys-tutorial.md#2025-04-22_snippet_3\n\nLANGUAGE: rust\nCODE:\n```\n#[no_mangle]\npub extern \"C\" fn init() {\n    if runtime::get_key(AUTHORIZATION_KEYS_INSTALLER).is_none() {\n        let authorization_keys: Vec<AccountHash> =\n            runtime::list_authorization_keys().iter().cloned().collect();\n\n        let authorization_keys: Key = storage::new_uref(authorization_keys).into();\n        runtime::put_key(AUTHORIZATION_KEYS_INSTALLER, authorization_keys);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Getting Account Hash from Public Key\nDESCRIPTION: This command retrieves the account hash using a public key file. It's useful when you don't know your account hash.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/docs/developers/cli/querying-global-state.md#2025-04-22_snippet_8\n\nLANGUAGE: bash\nCODE:\n```\ncasper-client account-address --public-key [PATH_TO_PUBLIC_KEY]\n```\n\n----------------------------------------\n\nTITLE: Contract Package Hash Example\nDESCRIPTION: JSON example showing how a contract package hash appears in an account's named keys.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/versioned_docs/version-2.0.0/developers/cli/calling-contracts.md#2025-04-22_snippet_7\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"key\": \"hash-76a8c3daa6d6ac799ce9f46d82ac98efb271d2d64b517861ec89a06051ef019e\",\n    \"name\": \"counter_package_name\"\n}\n```\n\n----------------------------------------\n\nTITLE: Importing useBaseUrl from Docusaurus in JavaScript\nDESCRIPTION: This code snippet imports the useBaseUrl function from the Docusaurus package. This function is typically used to generate correct URLs for assets in a Docusaurus project.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/versioned_docs/version-1.5.X/users/index.md#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport useBaseUrl from '@docusaurus/useBaseUrl';\n```\n\n----------------------------------------\n\nTITLE: Additional Serialization Tags for Key Types\nDESCRIPTION: Additional key type serialization tags for Package, AddressableEntity, ByteCode, and Message types in the Casper Network serialization standard.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/versioned_docs/version-2.0.0/concepts/serialization/types.md#2025-04-22_snippet_25\n\nLANGUAGE: markdown\nCODE:\n```\n| `Package`    | 16               |\n| `AddressableEntity` | 17        |\n| `ByteCode`   | 18               |\n| `Message`    | 19               |\n```\n\n----------------------------------------\n\nTITLE: Examining Fault Event Structure in JSON\nDESCRIPTION: The Fault event is emitted when there is a validator error on the Casper network. It includes the era_id, public_key of the faulty validator, and a timestamp of when the fault occurred.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/versioned_docs/version-1.5.X/developers/dapps/monitor-and-consume-events.md#2025-04-22_snippet_8\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"Fault\": {\n    \"era_id\": 4591448806312642600,\n    \"public_key\": \"013da85eb06279da42e28530e1116be04bfd2aa25ed8d63401ebff4d9153a609a9\",\n    \"timestamp\": \"2023-01-01T01:26:58.364Z\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Serializing TopicNameHash Type\nDESCRIPTION: Describes `TopicNameHash`, a `blake2b` hash derived from a topic name. It serializes as the raw 32-byte buffer containing the bytes of the hash.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/versioned_docs/version-2.0.0/concepts/serialization/types.md#2025-04-22_snippet_52\n\nLANGUAGE: text\nCODE:\n```\nA `blake2b` hash of a topic name. The topic name hash serializes as a 32-byte buffer containing the bytes of the topic name hash.\n```\n\n----------------------------------------\n\nTITLE: Node Health Metrics Query\nDESCRIPTION: Command to query node health metrics via the REST endpoint.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/versioned_docs/version-2.0.0/operators/setup/node-endpoints.md#2025-04-22_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\ncurl -s http://<node_address>:8888/metrics\n```\n\n----------------------------------------\n\nTITLE: Generating Validator Keys with Casper Client in Bash\nDESCRIPTION: A bash command to generate validator keys for a Casper node using the Casper client. The keys are stored in the default location for validator keys.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/versioned_docs/version-1.5.X/operators/setup/basic-node-configuration.md#2025-04-22_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\nsudo -u casper casper-client keygen /etc/casper/validator_keys\n```\n\n----------------------------------------\n\nTITLE: Key Type Serialization Tags\nDESCRIPTION: Mapping of different Key variants to their corresponding serialization tag values used in the Casper Network.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/docs/concepts/serialization/types.md#2025-04-22_snippet_3\n\nLANGUAGE: markdown\nCODE:\n```\n| `Key`        | Serialization Tag |\n| ------------ | ----------------- |\n| `Account`    |  0               |\n| `Hash`       |  1               |\n| `URef`       |  2               |\n| `Transfer`   |  3               |\n| `DeployInfo` |  4               |\n| `EraInfo`    |  5               |\n| `Balance`    |  6               |\n| `Bid`        |  7               |\n| `Withdraw`   |  8               |\n| `Dictionary` |  9               |\n| `SystemContractRegistry`| 10    |\n| `EraSummary` | 11               |\n| `Unbond`     | 12               |\n| `ChainspecRegistry` | 13        |\n| `ChecksumRegistry` | 14         |\n| `BidAddr`    | 15               |\n```\n\n----------------------------------------\n\nTITLE: Defining Casper Network System Contract Types Schema in JSON\nDESCRIPTION: This JSON schema defines the valid system contract types for the Casper Network using the `oneOf` keyword. It specifies that the type must be one of the enumerated string values: \"Mint\", \"HandlePayment\", \"StandardPayment\", or \"Auction\". The top-level description explains that these string types are intended to be converted to a `u32` and passed as the `system_contract_index` argument to the `ext_ffi::casper_get_system_contract()` function to retrieve the corresponding system contract.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/condor/jsonrpc-comp/rpc-2.0/schema/SystemEntityType.json.md#2025-04-22_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"description\": \"System contract types.\\n\\nUsed by converting to a `u32` and passing as the `system_contract_index` argument of `ext_ffi::casper_get_system_contract()`.\",\n    \"oneOf\": [\n        {\n            \"description\": \"Mint contract.\",\n            \"type\": \"string\",\n            \"enum\": [\n                \"Mint\"\n            ]\n        },\n        {\n            \"description\": \"Handle Payment contract.\",\n            \"type\": \"string\",\n            \"enum\": [\n                \"HandlePayment\"\n            ]\n        },\n        {\n            \"description\": \"Standard Payment contract.\",\n            \"type\": \"string\",\n            \"enum\": [\n                \"StandardPayment\"\n            ]\n        },\n        {\n            \"description\": \"Auction contract.\",\n            \"type\": \"string\",\n            \"enum\": [\n                \"Auction\"\n            ]\n        }\n    ]\n} \n```\n\n----------------------------------------\n\nTITLE: Querying Deploy Details\nDESCRIPTION: Retrieves details about a specific deploy using its hash, showing the state related to that specific deployment.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/versioned_docs/version-2.0.0/resources/beginner/counter-testnet/walkthrough.md#2025-04-22_snippet_9\n\nLANGUAGE: bash\nCODE:\n```\ncasper-client query-global-state --node-address http://[NODE_IP]:7777 \\\n    --state-root-hash [STATE_ROOT_HASH] --key deploy-[DEPLOY_HASH]\n```\n\n----------------------------------------\n\nTITLE: Querying State Root Hash with Casper Client\nDESCRIPTION: Command to retrieve the current state root hash from a Casper network node, which provides a snapshot of the blockchain state.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/versioned_docs/version-1.5.X/developers/cli/transfers/verify-transfer.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ncasper-client get-state-root-hash --node-address [NODE_SERVER_ADDRESS]\n```\n\n----------------------------------------\n\nTITLE: Cloning the forked documentation repository\nDESCRIPTION: Git command to clone the forked documentation repository to the local machine. Replace USERNAME with your GitHub username.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/README/SETUP.md#2025-04-22_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ngit clone https://github.com/USERNAME/docs\n```\n\n----------------------------------------\n\nTITLE: Contract Installation Test\nDESCRIPTION: Test code for installing contract with default account authorization.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/versioned_docs/version-2.0.0/resources/advanced/list-auth-keys-tutorial.md#2025-04-22_snippet_6\n\nLANGUAGE: rust\nCODE:\n```\nlet session_code = PathBuf::from(CONTRACT_WASM);\nlet session_args = RuntimeArgs::new();\n\nlet deploy_item = DeployItemBuilder::new()\n    .with_empty_payment_bytes(runtime_args! {ARG_AMOUNT => *DEFAULT_PAYMENT})\n    .with_authorization_keys(&[*DEFAULT_ACCOUNT_ADDR])\n    .with_address(*DEFAULT_ACCOUNT_ADDR)\n    .with_session_code(session_code, session_args)\n    .build();\n```\n\n----------------------------------------\n\nTITLE: Checking Account Information on Casper Network\nDESCRIPTION: Command to retrieve account information for a specific public key on the Casper network. This verifies account state and balance information.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/versioned_docs/version-1.5.X/operators/setup-network/create-private.md#2025-04-22_snippet_16\n\nLANGUAGE: sh\nCODE:\n```\ncasper-client get-account-info -n $NODE_ADDR\n  --public-key alice/public_key.pem\n```\n\n----------------------------------------\n\nTITLE: Stopping Event Stream in JavaScript\nDESCRIPTION: This JavaScript code demonstrates how to completely stop listening to all events on the Casper network. The stop method terminates the event stream connection entirely.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/versioned_docs/version-1.5.X/developers/dapps/monitor-and-consume-events.md#2025-04-22_snippet_15\n\nLANGUAGE: javascript\nCODE:\n```\nes.stop()\n```\n\n----------------------------------------\n\nTITLE: Rotating Validators Command - Casper Network\nDESCRIPTION: Command to generate global state updates for rotating validator sets.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/docs/operators/setup-network/create-private.md#2025-04-22_snippet_27\n\nLANGUAGE: sh\nCODE:\n```\nglobal-state-update-gen validators \\\n  --data-dir $DATA_DIR \\\n  --state-hash $STATE_ROOT_HASH \\\n  --validator NEW_PUBLIC_KEY,NEW_STAKE \\\n  --validator NEW_PUBLIC_KEY2,NEW_STAKE2\n```\n\n----------------------------------------\n\nTITLE: Setup Firewall Rules with UFW - Bash\nDESCRIPTION: This bash script configures firewall rules using UFW to control incoming and outgoing network traffic for Casper nodes. Essential for securing node communication, while ensuring necessary ports remain open.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/versioned_docs/version-1.5.X/operators/setup/node-endpoints.md#2025-04-22_snippet_6\n\nLANGUAGE: Bash\nCODE:\n```\nsudo ufw disable\nsudo ufw reset\nsudo ufw default allow outgoing\nsudo ufw default deny incoming\nsudo ufw limit ssh\nsudo ufw limit 7777/tcp\nsudo ufw limit 8888/tcp\nsudo ufw limit 35000/tcp\nsudo ufw enable\n```\n\n----------------------------------------\n\nTITLE: Ethereum View Method Declaration\nDESCRIPTION: Shows how to declare a public view method in Ethereum that returns data without modifying state.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/versioned_docs/version-2.0.0/resources/moving-to-casper.md#2025-04-22_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nfunction balanceOf(address _owner) public view returns (uint256 return_parameter) { }\n```\n\n----------------------------------------\n\nTITLE: Describing Digest Serialization (Casper Network)\nDESCRIPTION: Specifies that a Digest, which is a blake2b hash digest, is serialized simply as the byte representation of the hash itself.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/versioned_docs/version-2.0.0/concepts/serialization/types.md#2025-04-22_snippet_16\n\nLANGUAGE: Text\nCODE:\n```\n## Digest {#digest}\n\nA `blake2b` hash digest. The digest serializes as a byte representation of the hash itself.\n```\n\n----------------------------------------\n\nTITLE: Getting State Root Hash in Casper Network\nDESCRIPTION: This command retrieves the current state root hash of the Casper network, which is necessary for querying the global state.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/versioned_docs/version-1.5.X/developers/cli/querying-global-state.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ncasper-client get-state-root-hash --node-address [NODE_SERVER_ADDRESS]\n```\n\n----------------------------------------\n\nTITLE: System Terms Definition\nDESCRIPTION: Key terminology used in describing distributed systems and databases in the context of dApps.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/docs/developers/dapps/dapp.md#2025-04-22_snippet_0\n\nLANGUAGE: text\nCODE:\n```\ndistributed database\n```\n\nLANGUAGE: text\nCODE:\n```\ndecentralized\n```\n\n----------------------------------------\n\nTITLE: Exporting Keys and Account Hash\nDESCRIPTION: Methods to extract and format public keys and account hashes from keypairs\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/docs/developers/dapps/sdk/client-library-usage.md#2025-04-22_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\n// Create a hexadecimal representation of the public key and account hash.\nconst publicKeyHex = publicKey.toHex();\nconst accountHashHex = publicKey.toAccountHashStr();\n```\n\nLANGUAGE: python\nCODE:\n```\nimport pycspr.crypto\n\npublicKeyBytes = keypair.account_key\npublicKeyHex = pycspr.crypto.cl_checksum.encode(publicKeyBytes)\naccountHashBytes = pycspr.crypto.cl_operations.get_account_hash(publicKeyBytes)\naccountHashHex = pycspr.crypto.cl_checksum.encode(accountHashBytes)\n```\n\n----------------------------------------\n\nTITLE: Importing Required Crates in Rust\nDESCRIPTION: Code snippet showing the import of necessary Casper crates for implementing the fungible token contract.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/versioned_docs/version-2.0.0/resources/tokens/cep18/full-tutorial.md#2025-04-22_snippet_3\n\nLANGUAGE: rust\nCODE:\n```\nuse casper_contract::{contract_api::runtime, unwrap_or_revert::UnwrapOrRevert};\n\nuse casper_types::{CLValue, U256};\n```\n\n----------------------------------------\n\nTITLE: Test Success Output\nDESCRIPTION: Example output showing successful test completion with 159 passed tests.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/versioned_docs/version-1.5.X/resources/tokens/cep78/using-casper-client/quickstart-guide.md#2025-04-22_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\ntest result: ok. 159 passed; 0 failed; 0 ignored; 0 measured; 0 filtered out; finished in 15.33s\n```\n\n----------------------------------------\n\nTITLE: Sample get-transaction Result in JSON\nDESCRIPTION: This JSON snippet shows a detailed result of a successful get-txn command execution. It includes comprehensive information about the transaction, such as the chain name, timestamp, initiator address, and execution details.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/versioned_docs/version-2.0.0/developers/cli/sending-transactions.md#2025-04-22_snippet_4\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"jsonrpc\": \"2.0\",\n  \"id\": -3929997047953574815,\n  \"result\": {\n    \"api_version\": \"2.0.0\",\n    \"transaction\": {\n      \"Version1\": {\n        \"hash\": \"efad4a969064b5f8189ea4d6dd2fba2926d01d583a35178c07d7b827de16789e\",\n        \"header\": {\n          \"chain_name\": \"casper-net-1\",\n          \"timestamp\": \"2024-07-17T16:45:43.821Z\",\n          \"ttl\": \"30m\",\n          \"body_hash\": \"c5c4f7ae2fecb68937c19a1439eefddd8d4c32de779fe3ffee292977f161b234\",\n          \"pricing_mode\": {\n            \"Fixed\": {\n              \"gas_price_tolerance\": 10\n            }\n          },\n          \"initiator_addr\": {\n            \"PublicKey\": \"01f4ed68f99591d583426d1700b9be6ebd34d8cd395710596bce3db8b127ea3f65\"\n          }\n        },\n        \"body\": {\n          \"args\": [\n            [\n              \"name\",\n              {\n                \"cl_type\": \"String\",\n                \"bytes\": \"050000004345503138\",\n                \"parsed\": \"CEP18\"\n              }\n            ],\n            [\n              \"symbol\",\n              {\n                \"cl_type\": \"String\",\n                \"bytes\": \"0400000067726973\",\n                \"parsed\": \"gris\"\n              }\n            ],\n            [\n              \"total_supply\",\n              {\n                \"cl_type\": \"U256\",\n                \"bytes\": \"0164\",\n                \"parsed\": \"100\"\n              }\n            ],\n            [\n              \"decimals\",\n              {\n                \"cl_type\": \"U8\",\n                \"bytes\": \"01\",\n                \"parsed\": 1\n              }\n            ]\n          ],\n          \"target\": {\n            \"Session\": {\n              \"module_bytes\": \"[655810 hex chars]\",\n              \"runtime\": \"VmCasperV1\"\n            }\n          },\n          \"entry_point\": \"Call\",\n          \"transaction_category\": 2,\n          \"scheduling\": \"Standard\"\n        },\n        \"approvals\": [\n          {\n            \"signer\": \"01f4ed68f99591d583426d1700b9be6ebd34d8cd395710596bce3db8b127ea3f65\",\n            \"signature\": \"012ac4fc94d4ba269eb94aad1b9e90d1f701ed0e660995c1a15afc69010b74b51dd1334f9a59a9587aaf6aa6ab5ad35a7e86a9dcba39c2d21843e56d5d4014f00f\"\n          }\n        ]\n      }\n    },\n    \"execution_info\": {\n      \"block_hash\": \"23f21d3af261dd830790926b240dbded4362bb3c1183d9ee4ec1aea132bfa5e0\",\n      \"block_height\": 624,\n      \"execution_result\": {\n        \"Version2\": {\n          \"initiator\": {\n            \"PublicKey\": \"01f4ed68f99591d583426d1700b9be6ebd34d8cd395710596bce3db8b127ea3f65\"\n          },\n          \"error_message\": null,\n          \"limit\": \"1000000000000\",\n          \"consumed\": \"371736413663\",\n          \"cost\": \"1000000000000\",\n          \"payment\": [],\n          \"transfers\": [],\n          \"size_estimate\": 328238,\n          \"effects\": [\n            {\n              \"key\": \"balance-hold-014c3f3c8ae53f894ff181b1c2aaa7b5bbea5eb26b30c51887f8e4995a59e933b463f295c190010000\",\n              \"kind\": {\n                \"Write\": {\n                  \"CLValue\": {\n                    \"cl_type\": \"U512\",\n                    \"bytes\": \"050010a5d4e8\",\n                    \"parsed\": \"1000000000000\"\n                  }\n                }\n              }\n            },\n            {\n              \"key\": \"uref-4bb9770e4b7dfa5e9d12cfb35b55d862d6eebdced3205e422b48d7fb207b874d-000\",\n              \"kind\": {\n                \"Write\": {\n                  \"CLValue\": {\n                    \"cl_type\": \"String\",\n                    \"bytes\": \"050000004345503138\",\n                    \"parsed\": \"CEP18\"\n                  }\n                }\n              }\n            },\n            {\n              \"key\": \"uref-21a2ada35583cfe2a63c59a70d5df464f9bd90833c261871b44e9cf7f7d28c1a-000\",\n              \"kind\": {\n                \"Write\": {\n                  \"CLValue\": {\n                    \"cl_type\": \"String\",\n                    \"bytes\": \"0400000067726973\",\n                    \"parsed\": \"gris\"\n                  }\n                }\n              }\n            },\n            {\n              \"key\": \"uref-303ab2a4aeb6a057a7a256aabf491dad6f0decbfd880d80f9052d5b2df83ba5f-000\",\n              \"kind\": {\n                \"Write\": {\n                  \"CLValue\": {\n                    \"cl_type\": \"U8\",\n                    \"bytes\": \"01\",\n                    \"parsed\": 1\n                  }\n                }\n              }\n            },\n            {\n              \"key\": \"uref-456742d5cec63a743907e61935567da1c8f73f95c5aba2c84801189fce936ad1-000\",\n              \"kind\": {\n                \"Write\": {\n                  \"CLValue\": {\n                    \"cl_type\": \"U256\",\n                    \"bytes\": \"0164\",\n                    \"parsed\": \"100\"\n                  }\n                }\n              }\n            },\n            {\n              \"key\": \"uref-16baf770d6b97cfa6abe0017ea33f17efdc51236db3b2fa44052080282e19e03-000\",\n              \"kind\": {\n                \"Write\": {\n                  \"CLValue\": {\n                    \"cl_type\": \"U8\",\n                    \"bytes\": \"00\",\n                    \"parsed\": 0\n                  }\n                }\n              }\n            },\n            {\n              \"key\": \"uref-de4523d10773c2ee1fd48adb32d7121380c0febbf4f36f1029dc61ff079b83ce-000\",\n              \"kind\": {\n                \"Write\": {\n                  \"CLValue\": {\n                    \"cl_type\": \"U8\",\n                    \"bytes\": \"00\",\n                    \"parsed\": 0\n                  }\n                }\n              }\n            },\n            {\n              \"key\": \"uref-efcac4a17c93c5ba3d3213ea4a00631c5da3fb8bba36c70ae1431db6ea93b8b5-000\",\n              \"kind\": {\n                \"Write\": {\n                  \"CLValue\": {\n                    \"cl_type\": \"Unit\",\n                    \"bytes\": \"\",\n                    \"parsed\": null\n                  }\n                }\n              }\n            },\n            {\n              \"key\": \"package-dea470cf75f60abafcca7c68313f18fc2e21881d607ad75fa65e2bfe547da25c\",\n              \"kind\": {\n                \"Write\": {\n                  \"Package\": {\n                    \"versions\": [],\n                    \"disabled_versions\": [],\n                    \"groups\": [],\n                    \"lock_status\": \"Unlocked\"\n                  }\n                }\n              }\n            },\n            {\n              \"key\": \"named-key-entity-account-b2ba71785a4e071a467a03c3a4d3ca827ce5319e4ca92d148e8bcb2142eb4b8e-987369d1ce9ffff037841f4a221d7fc63924d565196de9e67ea8bdb897bc22e7\",\n              \"kind\": {\n                \"Write\": {\n                  \"NamedKey\": {\n                    \"named_key\": {\n                      \"cl_type\": \"Key\",\n                      \"bytes\": \"10dea470cf75f60abafcca7c68313f18fc2e21881d607ad75fa65e2bfe547da25c\",\n\n```\n\n----------------------------------------\n\nTITLE: Adding Administrators Command - Casper Network\nDESCRIPTION: Command to generate global state updates for adding new administrator accounts.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/docs/operators/setup-network/create-private.md#2025-04-22_snippet_28\n\nLANGUAGE: sh\nCODE:\n```\nglobal-state-update-gen generate-admins --admin NEW_PUBLIC_KEY,NEW_BALANCE --data-dir $DATA_DIR --state-hash $STATE_ROOT_HASH\n```\n\n----------------------------------------\n\nTITLE: Standard Compression Command\nDESCRIPTION: Recommended compression command with optimal settings for general use.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/versioned_docs/version-2.0.0/operators/maintenance/archiving-and-restoring.md#2025-04-22_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\ntar -b 4096 -cv --sparse . | zstd -15 -cv -T0 --long=31 > [path_to]/file.tar.zst\n```\n\n----------------------------------------\n\nTITLE: Checking Current Open Files Limit Bash Command\nDESCRIPTION: Check the current 'nofile' limit for the casper-node process using 'prlimit' with the PID obtained from 'pgrep'. Requires sudo access. The command outputs the soft and hard limits of open files.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/docs/operators/setup/open-files.md#2025-04-22_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nsudo prlimit -n -p <PID>\n```\n\n----------------------------------------\n\nTITLE: JSON-RPC Server Configuration\nDESCRIPTION: Configuration setting for the JSON-RPC HTTP server port in config.toml. This port (7777) is used for JSON-RPC API interactions.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/versioned_docs/version-2.0.0/operators/setup/node-endpoints.md#2025-04-22_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\naddress = '0.0.0.0:7777'\n```\n\n----------------------------------------\n\nTITLE: Configuring Auction Behavior\nDESCRIPTION: TOML configuration to restrict new validator additions by disabling auction bids in the private network.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/versioned_docs/version-2.0.0/operators/setup-network/create-private.md#2025-04-22_snippet_4\n\nLANGUAGE: toml\nCODE:\n```\n[core]\nallow_auction_bids = false\n```\n\n----------------------------------------\n\nTITLE: Querying Casper Network State\nDESCRIPTION: Command to query the latest state root hash from a Casper network node.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/versioned_docs/version-1.5.X/resources/quick-start.md#2025-04-22_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\ncasper-client get-state-root-hash --node-address http://65.21.235.219:7777\n```\n\n----------------------------------------\n\nTITLE: Creating Binary Archive\nDESCRIPTION: Commands for creating the binary archive containing casper-node executable\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/versioned_docs/version-2.0.0/operators/setup-network/staging-files-for-new-network.md#2025-04-22_snippet_8\n\nLANGUAGE: bash\nCODE:\n```\nmkdir bin\ncd bin\ncp [source of casper-node] ./casper-node\ntar -czvf ../bin.tar.gz .\n```\n\n----------------------------------------\n\nTITLE: Starting a Local Casper Network\nDESCRIPTION: Set up and start a local Casper network using NCTL (Network Command Line Tool).\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/versioned_docs/version-2.0.0/resources/beginner/counter/walkthrough.md#2025-04-22_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nnctl-assets-setup && nctl-start\n```\n\n----------------------------------------\n\nTITLE: Checking NCTL Node Status\nDESCRIPTION: Command to view the current status of NCTL nodes in the local network\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/versioned_docs/version-1.5.X/developers/dapps/nctl-test.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnctl-status\n```\n\n----------------------------------------\n\nTITLE: Viewing NCTL User Account Details\nDESCRIPTION: Command to view details of the first user account in the NCTL network\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/versioned_docs/version-1.5.X/developers/dapps/nctl-test.md#2025-04-22_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nnctl-view-user-account user=1\n```\n\n----------------------------------------\n\nTITLE: Verifying Deploy Success\nDESCRIPTION: Check the status of the contract deployment using the deploy hash.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/versioned_docs/version-2.0.0/resources/beginner/counter/walkthrough.md#2025-04-22_snippet_7\n\nLANGUAGE: rust\nCODE:\n```\ncasper-client get-deploy \\\n    --node-address http://localhost:11101 [DEPLOY_HASH]\n```\n\n----------------------------------------\n\nTITLE: Updating Connect Component with Disconnect Button\nDESCRIPTION: Enhanced version of the Connect component that includes both connect and disconnect buttons for managing the wallet connection state.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/versioned_docs/version-2.0.0/developers/dapps/template-frontend.md#2025-04-22_snippet_13\n\nLANGUAGE: jsx\nCODE:\n```\nconst Connect = (props) => {\n    return (\n        <>\n            <button onClick={ () => connectToWallet(props) }>Connect Wallet</button>\n            // highlight-next-line-green\n            <button onClick={ () => disconnect(props) }>Disconnect</button>\n        </>\n    );\n}\n```\n\n----------------------------------------\n\nTITLE: Testing the config.tar.gz Archive Contents (Bash)\nDESCRIPTION: Shows how to test the newly created `config.tar.gz` file. It involves creating a test directory (`conftest`) and using `tar` with the extract (`-x`), verbose (`-v`), gunzip (`-z`), and file (`-f`) flags to unpack the archive's contents into the test directory, allowing verification that the correct files are included and paths are relative.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/docs/operators/setup-network/staging-files-for-new-network.md#2025-04-22_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\nmkdir conftest\ncd conftest\ntar -xzvf ../config.tar.gz .\n```\n\n----------------------------------------\n\nTITLE: Specification for query_balance_details RPC Method in Casper Network\nDESCRIPTION: JSON schema defining the query_balance_details RPC method, which returns comprehensive balance information including total balance, available balance, and active holds. The example demonstrates how to request detailed balance information for a purse.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/condor/jsonrpc-comp/rpc-2.0/schema.json.md#2025-04-22_snippet_12\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"name\": \"query_balance_details\",\n  \"summary\": \"query for full balance information using a purse identifier and a state identifier\",\n  \"params\": [\n    {\n      \"name\": \"purse_identifier\",\n      \"schema\": {\n        \"description\": \"The identifier to obtain the purse corresponding to balance query.\",\n        \"$ref\": \"#/components/schemas/PurseIdentifier\"\n      },\n      \"required\": true\n    },\n    {\n      \"name\": \"state_identifier\",\n      \"schema\": {\n        \"description\": \"The identifier for the state used for the query, if none is passed, the latest block will be used.\",\n        \"anyOf\": [\n          {\n            \"$ref\": \"#/components/schemas/GlobalStateIdentifier\"\n          },\n          {\n            \"type\": \"null\"\n          }\n        ]\n      },\n      \"required\": false\n    }\n  ],\n  \"result\": {\n    \"name\": \"query_balance_details_result\",\n    \"schema\": {\n      \"description\": \"Result for \\\"query_balance_details\\\" RPC response.\",\n      \"type\": \"object\",\n      \"required\": [\n        \"api_version\",\n        \"available_balance\",\n        \"holds\",\n        \"total_balance\",\n        \"total_balance_proof\"\n      ],\n      \"properties\": {\n        \"api_version\": {\n          \"description\": \"The RPC API version.\",\n          \"type\": \"string\"\n        },\n        \"total_balance\": {\n          \"description\": \"The purses total balance, not considering holds.\",\n          \"$ref\": \"#/components/schemas/U512\"\n        },\n        \"available_balance\": {\n          \"description\": \"The available balance in motes (total balance - sum of all active holds).\",\n          \"$ref\": \"#/components/schemas/U512\"\n        },\n        \"total_balance_proof\": {\n          \"description\": \"A proof that the given value is present in the Merkle trie.\",\n          \"type\": \"string\"\n        },\n        \"holds\": {\n          \"description\": \"Holds active at the requested point in time.\",\n          \"type\": \"array\",\n          \"items\": {\n            \"$ref\": \"#/components/schemas/BalanceHoldWithProof\"\n          }\n        }\n      }\n    }\n  },\n  \"examples\": [\n    {\n      \"name\": \"query_balance_details_example\",\n      \"params\": [\n        {\n          \"name\": \"state_identifier\",\n          \"value\": {\n            \"BlockHash\": \"0707070707070707070707070707070707070707070707070707070707070707\"\n          }\n        },\n        {\n          \"name\": \"purse_identifier\",\n          \"value\": {\n            \"main_purse_under_account_hash\": \"account-hash-0909090909090909090909090909090909090909090909090909090909090909\"\n          }\n        }\n      ],\n      \"result\": {\n        \"name\": \"query_balance_details_example_result\",\n        \"value\": {\n          \"api_version\": \"2.0.0\",\n          \"total_balance\": \"123456\",\n          \"available_balance\": \"123456\",\n          \"total_balance_proof\": \"01000000006ef2e0949ac76e55812421f755abe129b6244fe7168b77f47a72536147614625016ef2e0949ac76e55812421f755abe129b6244fe7168b77f47a72536147614625000000003529cde5c621f857f75f3810611eb4af3f998caaa9d4a3413cf799f99c67db0307010000006ef2e0949ac76e55812421f755abe129b6244fe7168b77f47a7253614761462501010102000000006e06000000000074769d28aac597a36a03a932d4b43e4f10bf0403ee5c41dd035102553f5773631200b9e173e8f05361b681513c14e25e3138639eb03232581db7557c9e8dbbc83ce94500226a9a7fe4f2b7b88d5103a4fc7400f02bf89c860c9ccdd56951a2afe9be0e0267006d820fb5676eb2960e15722f7725f3f8f41030078f8b2e44bf0dc03f71b176d6e800dc5ae9805068c5be6da1a90b2528ee85db0609cc0fb4bd60bbd559f497a98b67f500e1e3e846592f4918234647fca39830b7e1e6ad6f5b7a99b39af823d82ba1873d000003000000010186ff500f287e9b53f823ae1582b1fa429dfede28015125fd233a31ca04d5012002015cc42669a55467a1fdf49750772bfc1aed59b9b085558eb81510e9b015a7c83b0301e3cf4a34b1db6bfa58808b686cb8fe21ebe0c1bcbcee522649d2b135fe510fe3\",\n          \"holds\": [\n            {\n              \"time\": 0,\n              \"amount\": \"123456\"\n            }\n          ]\n        }\n      }\n    }\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Fee Handling Configuration\nDESCRIPTION: Shows fee distribution post-refund using 'pay_to_proposer' where fees fund block proposers after gas fees. 'core' section in chainspec is mandatory for functionality.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/versioned_docs/version-1.5.X/operators/setup-network/create-private.md#2025-04-22_snippet_4\n\nLANGUAGE: toml\nCODE:\n```\n[core]\nfee_handling = { type = \"pay_to_proposer\" }\n```\n\n----------------------------------------\n\nTITLE: Checking State Root Hash in Bash\nDESCRIPTION: Command to query the current state root hash from a Casper Testnet node, which is useful for state queries.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/versioned_docs/version-1.5.X/resources/beginner/cep18.md#2025-04-22_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\ncasper-client get-state-root-hash --node-address http://78.46.32.13:7777  \n```\n\n----------------------------------------\n\nTITLE: Checking Casper Sidecar Service Status\nDESCRIPTION: Command to check the current status of the Casper Sidecar service using systemctl.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/versioned_docs/version-2.0.0/operators/setup/casper-sidecar.md#2025-04-22_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nsystemctl status casper-sidecar\n```\n\n----------------------------------------\n\nTITLE: Serializing Result CLValue in Casper Network\nDESCRIPTION: Result values serialize with a single byte tag (1 for Ok, 0 for Err) followed by the serialization of the contained value.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/versioned_docs/version-1.5.X/concepts/serialization-standard.md#2025-04-22_snippet_6\n\nLANGUAGE: text\nCODE:\n```\n    -   E.g. `Ok(314u64)` serializes as `0x013a01000000000000`\n    -   E.g. `Err(\"Uh oh\")` serializes as `0x00050000005568206f68`\n```\n\n----------------------------------------\n\nTITLE: Permanent Open Files Limit Configuration\nDESCRIPTION: Configuration line to add to /etc/security/limits.conf for persistent nofile limit setting\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/versioned_docs/version-2.0.0/operators/setup/open-files.md#2025-04-22_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\ncasper          hard    nofile          64000\n```\n\n----------------------------------------\n\nTITLE: Retrieving Authorization Keys in Rust\nDESCRIPTION: Basic example of retrieving authorization keys associated with a deploy using the list_authorization_keys function.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/versioned_docs/version-2.0.0/resources/advanced/list-auth-keys-tutorial.md#2025-04-22_snippet_0\n\nLANGUAGE: rust\nCODE:\n```\nlet authorization_keys = runtime::list_authorization_keys();\n```\n\n----------------------------------------\n\nTITLE: Updating Rust\nDESCRIPTION: Update the Rust programming language to the latest version using rustup.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/versioned_docs/version-2.0.0/developers/prerequisites.md#2025-04-22_snippet_12\n\nLANGUAGE: bash\nCODE:\n```\nrustup update\n```\n\n----------------------------------------\n\nTITLE: Starting Casper Sidecar Service\nDESCRIPTION: Command to start the Casper Sidecar service using systemctl.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/versioned_docs/version-2.0.0/operators/setup/casper-sidecar.md#2025-04-22_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\nsudo systemctl start casper-sidecar.service\n```\n\n----------------------------------------\n\nTITLE: Verifying Rust installation\nDESCRIPTION: Verify the installation of Rust by checking the version of rustup.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/versioned_docs/version-2.0.0/developers/prerequisites.md#2025-04-22_snippet_10\n\nLANGUAGE: bash\nCODE:\n```\nrustup --version\n```\n\n----------------------------------------\n\nTITLE: Example speculative_exec_result in Casper Network API\nDESCRIPTION: This snippet shows the structure of a speculative_exec_result object returned by the Casper Network API. It includes the API version, block hash, and detailed execution results with transforms and operations.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/versioned_docs/version-1.5.X/developers/json-rpc/json-rpc-transactional.md#2025-04-22_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\n{\n  \"jsonrpc\": \"2.0\",\n  \"id\": -8801853076373554652,\n  \"result\": {\n    \"api_version\": \"1.5.0\",\n    \"block_hash\": \"ff862326b08702a5089d64e32100537b7ff984cac4c0ba6d1c561f7c47125f76\",\n    \"execution_result\": {\n      \"Success\": {\n        \"effect\": {\n          \"operations\": [],\n          \"transforms\": [\n            {\n              \"key\": \"hash-d2dfc9409965993f9e186db762b585274dcafe439fa1321cfca08017262c8e46\",\n              \"transform\": \"Identity\"\n            },\n            {\n              \"key\": \"account-hash-f466e7f5f9240fb577d1d4c650c4063752553406dff7aa24b4822ba2b72e5b65\",\n              \"transform\": \"Identity\"\n            },\n            {\n              \"key\": \"account-hash-f466e7f5f9240fb577d1d4c650c4063752553406dff7aa24b4822ba2b72e5b65\",\n              \"transform\": \"Identity\"\n            },\n            {\n              \"key\": \"hash-d2dfc9409965993f9e186db762b585274dcafe439fa1321cfca08017262c8e46\",\n              \"transform\": \"Identity\"\n            },\n            {\n              \"key\": \"hash-d2dfc9409965993f9e186db762b585274dcafe439fa1321cfca08017262c8e46\",\n              \"transform\": \"Identity\"\n            },\n            {\n              \"key\": \"hash-0a300922655180354a9ee92b808c7b45b08e5b01d9da0bac9a9b3415bcebbf8d\",\n              \"transform\": \"Identity\"\n            },\n            {\n              \"key\": \"hash-d2dfc9409965993f9e186db762b585274dcafe439fa1321cfca08017262c8e46\",\n              \"transform\": \"Identity\"\n            },\n            {\n              \"key\": \"hash-f8df015ba26860a7ec8cab4ee99f079325b0bbb9ef0e7810b63d85df39da95fe\",\n              \"transform\": \"Identity\"\n            },\n            {\n              \"key\": \"hash-f8df015ba26860a7ec8cab4ee99f079325b0bbb9ef0e7810b63d85df39da95fe\",\n              \"transform\": \"Identity\"\n            },\n            {\n              \"key\": \"hash-59c6451dd58463708fa0b122e97114f07fa5f609229c9d67ac9426935416fbeb\",\n              \"transform\": \"Identity\"\n            },\n            {\n              \"key\": \"hash-f8df015ba26860a7ec8cab4ee99f079325b0bbb9ef0e7810b63d85df39da95fe\",\n              \"transform\": \"Identity\"\n            },\n            {\n              \"key\": \"balance-7c25ef9382fcae902b922866434f7111a1b34534323e93ff5bf22f1a401c2678\",\n              \"transform\": \"Identity\"\n            },\n            {\n              \"key\": \"balance-ea3c9bdcbe57f067a29609d397981b2d0fb39853a0a9f06e444b06404eadcb1a\",\n              \"transform\": \"Identity\"\n            },\n            {\n              \"key\": \"balance-7c25ef9382fcae902b922866434f7111a1b34534323e93ff5bf22f1a401c2678\",\n              \"transform\": {\n                \"WriteCLValue\": {\n                  \"cl_type\": \"U512\",\n                  \"bytes\": \"05f0e630ed87\",\n                  \"parsed\": \"583799990000\"\n                }\n              }\n            },\n            {\n              \"key\": \"balance-ea3c9bdcbe57f067a29609d397981b2d0fb39853a0a9f06e444b06404eadcb1a\",\n              \"transform\": {\n                \"AddUInt512\": \"100000000\"\n              }\n            },\n            {\n              \"key\": \"hash-d2dfc9409965993f9e186db762b585274dcafe439fa1321cfca08017262c8e46\",\n              \"transform\": \"Identity\"\n            },\n            {\n              \"key\": \"account-hash-f466e7f5f9240fb577d1d4c650c4063752553406dff7aa24b4822ba2b72e5b65\",\n              \"transform\": \"Identity\"\n            },\n            {\n              \"key\": \"account-hash-f466e7f5f9240fb577d1d4c650c4063752553406dff7aa24b4822ba2b72e5b65\",\n              \"transform\": \"Identity\"\n            },\n            {\n              \"key\": \"hash-d2dfc9409965993f9e186db762b585274dcafe439fa1321cfca08017262c8e46\",\n              \"transform\": \"Identity\"\n            },\n            {\n              \"key\": \"hash-d2dfc9409965993f9e186db762b585274dcafe439fa1321cfca08017262c8e46\",\n              \"transform\": \"Identity\"\n            },\n            {\n              \"key\": \"hash-0a300922655180354a9ee92b808c7b45b08e5b01d9da0bac9a9b3415bcebbf8d\",\n              \"transform\": \"Identity\"\n            },\n            {\n              \"key\": \"hash-d2dfc9409965993f9e186db762b585274dcafe439fa1321cfca08017262c8e46\",\n              \"transform\": \"Identity\"\n            },\n            {\n              \"key\": \"hash-f8df015ba26860a7ec8cab4ee99f079325b0bbb9ef0e7810b63d85df39da95fe\",\n              \"transform\": \"Identity\"\n            },\n            {\n              \"key\": \"hash-f8df015ba26860a7ec8cab4ee99f079325b0bbb9ef0e7810b63d85df39da95fe\",\n              \"transform\": \"Identity\"\n            },\n            {\n              \"key\": \"hash-59c6451dd58463708fa0b122e97114f07fa5f609229c9d67ac9426935416fbeb\",\n              \"transform\": \"Identity\"\n            },\n            {\n              \"key\": \"hash-f8df015ba26860a7ec8cab4ee99f079325b0bbb9ef0e7810b63d85df39da95fe\",\n              \"transform\": \"Identity\"\n            },\n            {\n              \"key\": \"balance-7c25ef9382fcae902b922866434f7111a1b34534323e93ff5bf22f1a401c2678\",\n              \"transform\": \"Identity\"\n            },\n            {\n              \"key\": \"balance-ea3c9bdcbe57f067a29609d397981b2d0fb39853a0a9f06e444b06404eadcb1a\",\n              \"transform\": \"Identity\"\n            },\n            {\n              \"key\": \"balance-7c25ef9382fcae902b922866434f7111a1b34534323e93ff5bf22f1a401c2678\",\n              \"transform\": {\n                \"WriteCLValue\": {\n                  \"cl_type\": \"U512\",\n                  \"bytes\": \"05f0e630ed87\",\n                  \"parsed\": \"583799990000\"\n                }\n              }\n            },\n            {\n              \"key\": \"balance-ea3c9bdcbe57f067a29609d397981b2d0fb39853a0a9f06e444b06404eadcb1a\",\n              \"transform\": {\n                \"AddUInt512\": \"100000000\"\n              }\n            },\n            {\n              \"key\": \"hash-f8df015ba26860a7ec8cab4ee99f079325b0bbb9ef0e7810b63d85df39da95fe\",\n              \"transform\": \"Identity\"\n            },\n            {\n              \"key\": \"hash-f8df015ba26860a7ec8cab4ee99f079325b0bbb9ef0e7810b63d85df39da95fe\",\n              \"transform\": \"Identity\"\n            },\n            {\n              \"key\": \"hash-59c6451dd58463708fa0b122e97114f07fa5f609229c9d67ac9426935416fbeb\",\n              \"transform\": \"Identity\"\n            },\n            {\n              \"key\": \"hash-f8df015ba26860a7ec8cab4ee99f079325b0bbb9ef0e7810b63d85df39da95fe\",\n              \"transform\": \"Identity\"\n            },\n            {\n              \"key\": \"balance-7c25ef9382fcae902b922866434f7111a1b34534323e93ff5bf22f1a401c2678\",\n              \"transform\": \"Identity\"\n            },\n            {\n              \"key\": \"balance-92ec6dfbdf151e20b55c89e0a327959cf6e5b091c5f2b39201c1858e2943f3bd\",\n              \"transform\": \"Identity\"\n            },\n            {\n              \"key\": \"balance-7c25ef9382fcae902b922866434f7111a1b34534323e93ff5bf22f1a401c2678\",\n              \"transform\": {\n                \"WriteCLValue\": {\n                  \"cl_type\": \"U512\",\n                  \"bytes\": \"05f0ed2d5887\",\n                  \"parsed\": \"581299990000\"\n                }\n              }\n            },\n            {\n              \"key\": \"balance-92ec6dfbdf151e20b55c89e0a327959cf6e5b091c5f2b39201c1858e2943f3bd\",\n              \"transform\": {\n                \"AddUInt512\": \"2500000000\"\n              }\n            },\n            {\n              \"key\": \"transfer-97426c848475dae98446f2c2fd00ec7901cd8ddfe250171ff4ed25d78412a612\",\n              \"transform\": {\n                \"WriteTransfer\": {\n                  \"deploy_hash\": \"d898910011b1f2f8797a442740e69cd5de41b9f796e658e962a24663e6199e5a\",\n                  \"from\": \"account-hash-0a9b33af5108c5a6e1067b0ddec6853ce1745d591375d767ac5db680d21845e7\",\n                  \"to\": \"account-hash-f466e7f5f9240fb577d1d4c650c4063752553406dff7aa24b4822ba2b72e5b65\",\n                  \"source\": \"uref-7c25ef9382fcae902b922866434f7111a1b34534323e93ff5bf22f1a401c2678-007\",\n                  \"target\": \"uref-92ec6dfbdf151e20b55c89e0a327959cf6e5b091c5f2b39201c1858e2943f3bd-004\",\n                  \"amount\": \"2500000000\",\n                  \"gas\": \"0\",\n                  \"id\": 0\n                }\n              }\n            },\n            {\n              \"key\": \"deploy-d898910011b1f2f8797a442740e69cd5de41b9f796e658e962a24663e6199e5a\",\n              \"transform\": {\n                \"WriteDeployInfo\": {\n                  \"deploy_hash\": \"d898910011b1f2f8797a442740e69cd5de41b9f796e658e962a24663e6199e5a\",\n                  \"transfers\": [\n                    \"transfer-97426c848475dae98446f2c2fd00ec7901cd8ddfe250171ff4ed25d78412a612\"\n                  ],\n                  \"from\": \"account-hash-0a9b33af5108c5a6e1067b0ddec6853ce1745d591375d767ac5db680d21845e7\",\n                  \"source\": \"uref-7c25ef9382fcae902b922866434f7111a1b34534323e93ff5bf22f1a401c2678-007\",\n                  \"gas\": \"100000000\"\n                }\n              }\n            },\n            {\n              \"key\": \"hash-d2dfc9409965993f9e186db762b585274dcafe439fa1321cfca08017262c8e46\",\n              \"transform\": \"Identity\"\n            },\n            {\n              \"key\": \"hash-d2dfc9409965993f9e186db762b585274dcafe439fa1321cfca08017262c8e46\",\n              \"transform\": \"Identity\"\n            },\n            {\n              \"key\": \"hash-0a300922655180354a9ee92b808c7b45b08e5b01d9da0bac9a9b3415bcebbf8d\",\n              \"transform\": \"Identity\"\n            },\n            {\n              \"key\": \"hash-d2dfc9409965993f9e186db762b585274dcafe439fa1321cfca08017262c8e46\",\n              \"transform\": \"Identity\"\n            },\n            {\n\n```\n\n----------------------------------------\n\nTITLE: Querying Global State for CEP-18 Balance Results\nDESCRIPTION: Command to query the global state to retrieve the results of a previous balance check. This reads the value from the results URef in the utility contract's NamedKeys.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/versioned_docs/version-2.0.0/resources/tokens/cep18/transfer.md#2025-04-22_snippet_4\n\nLANGUAGE: json\nCODE:\n```\ncasper-client query-global-state -n http://<NODE IP>:<PORT> \\\n// This is the `results` URef location from your `cep18_test_contract` `NamedKeys`\n--key uref-a46ad389b53715d9991a513c8ca48e1502facc4c563c0700a31e830c4cb8a7d4-007 \\\n--state-root-hash 3aecd0e4b6ec29ee7c1eed701132eabfe6e66a1e0f1595c9c65bfed447e474f7\n```\n\n----------------------------------------\n\nTITLE: Defining StoredValue Schema in JSON\nDESCRIPTION: JSON schema for StoredValue that represents values stored in global state, including variants for CLValue, Account, ContractWasm, Contract, ContractPackage, Transfer, DeployInfo, EraInfo, and Bid.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/condor/jsonrpc-comp/rpc-1.5/schema.json.md#2025-04-22_snippet_57\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"description\": \"Representation of a value stored in global state.\\n\\n`Account`, `Contract` and `ContractPackage` have their own `json_compatibility` representations (see their docs for further info).\",\n  \"anyOf\": [\n    {\n      \"description\": \"An instance of any variant of CLValue\",\n      \"type\": \"object\",\n      \"required\": [\n        \"CLValue\"\n      ],\n      \"properties\": {\n        \"CLValue\": {\n          \"$ref\": \"#/components/schemas/CLValue\"\n        }\n      },\n      \"additionalProperties\": false\n    },\n    {\n      \"description\": \"An account.\",\n      \"type\": \"object\",\n      \"required\": [\n        \"Account\"\n      ],\n      \"properties\": {\n        \"Account\": {\n          \"$ref\": \"#/components/schemas/Account\"\n        }\n      },\n      \"additionalProperties\": false\n    },\n    {\n      \"description\": \"A contract's Wasm\",\n      \"type\": \"object\",\n      \"required\": [\n        \"ContractWasm\"\n      ],\n      \"properties\": {\n        \"ContractWasm\": {\n          \"type\": \"string\"\n        }\n      },\n      \"additionalProperties\": false\n    },\n    {\n      \"description\": \"Methods and type signatures supported by a contract.\",\n      \"type\": \"object\",\n      \"required\": [\n        \"Contract\"\n      ],\n      \"properties\": {\n        \"Contract\": {\n          \"$ref\": \"#/components/schemas/Contract\"\n        }\n      },\n      \"additionalProperties\": false\n    },\n    {\n      \"description\": \"A contract definition, metadata, and security container.\",\n      \"type\": \"object\",\n      \"required\": [\n        \"ContractPackage\"\n      ],\n      \"properties\": {\n        \"ContractPackage\": {\n          \"$ref\": \"#/components/schemas/ContractPackage\"\n        }\n      },\n      \"additionalProperties\": false\n    },\n    {\n      \"description\": \"A record of a transfer\",\n      \"type\": \"object\",\n      \"required\": [\n        \"Transfer\"\n      ],\n      \"properties\": {\n        \"Transfer\": {\n          \"$ref\": \"#/components/schemas/Transfer\"\n        }\n      },\n      \"additionalProperties\": false\n    },\n    {\n      \"description\": \"A record of a deploy\",\n      \"type\": \"object\",\n      \"required\": [\n        \"DeployInfo\"\n      ],\n      \"properties\": {\n        \"DeployInfo\": {\n          \"$ref\": \"#/components/schemas/DeployInfo\"\n        }\n      },\n      \"additionalProperties\": false\n    },\n    {\n      \"description\": \"Auction metadata\",\n      \"type\": \"object\",\n      \"required\": [\n        \"EraInfo\"\n      ],\n      \"properties\": {\n        \"EraInfo\": {\n          \"$ref\": \"#/components/schemas/EraInfo\"\n        }\n      },\n      \"additionalProperties\": false\n    },\n    {\n      \"description\": \"A bid\",\n      \"type\": \"object\",\n      \"required\": [\n        \"Bid\"\n      ],\n      \"properties\": {\n        \"Bid\": {\n          \"$ref\": \"#/components/schemas/Bid\"\n        }\n      },\n      \"additionalProperties\": false\n    }\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Checking Node.js Version with Bash\nDESCRIPTION: Command to check the installed Node.js version to ensure compatibility with the project requirements.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/versioned_docs/version-2.0.0/developers/dapps/template-frontend.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnode -v\n```\n\n----------------------------------------\n\nTITLE: Retrieving State Root Hash in Casper Network\nDESCRIPTION: This command retrieves the current state root hash from a Casper Network node. The state root hash is essential for querying the network's current state.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/versioned_docs/version-1.5.X/resources/beginner/counter/walkthrough.md#2025-04-22_snippet_13\n\nLANGUAGE: bash\nCODE:\n```\ncasper-client get-state-root-hash --node-address http://localhost:11101\n```\n\n----------------------------------------\n\nTITLE: Installing Casper SDK via Package Manager\nDESCRIPTION: Command to install the Casper Network SDK using Windows Package Manager\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/docs/developers/dapps/sdk/csharp-sdk.md#2025-04-22_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nInstall-Package Casper.Network.SDK\n```\n\n----------------------------------------\n\nTITLE: Querying Casper State Root Hash via JSON-RPC - JSON\nDESCRIPTION: This snippet demonstrates the JSON-RPC method definition and usage for querying the state root hash from the Casper blockchain. The payload contains fields for specifying an optional block identifier parameter and shows example input and output. Required dependencies include a system that can issue HTTP requests to a Casper node JSON-RPC endpoint. Expected inputs are a valid JSON request following the structure, with the block identifier optionally set to either height or hash; outputs contain the RPC API version and the state root hash as a hex string, or null if unavailable.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/condor/jsonrpc-comp/rpc-2.0/chain_get_state_root_hash.json.md#2025-04-22_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"name\": \"chain_get_state_root_hash\",\n  \"summary\": \"returns a state root hash at a given Block\",\n  \"params\": [\n    {\n      \"name\": \"block_identifier\",\n      \"schema\": {\n        \"description\": \"The block hash.\",\n        \"$ref\": \"#/components/schemas/BlockIdentifier\"\n      },\n      \"required\": false\n    }\n  ],\n  \"result\": {\n    \"name\": \"chain_get_state_root_hash_result\",\n    \"schema\": {\n      \"description\": \"Result for \\\"chain_get_state_root_hash\\\" RPC response.\",\n      \"type\": \"object\",\n      \"required\": [\n        \"api_version\"\n      ],\n      \"properties\": {\n        \"api_version\": {\n          \"description\": \"The RPC API version.\",\n          \"type\": \"string\"\n        },\n        \"state_root_hash\": {\n          \"description\": \"Hex-encoded hash of the state root.\",\n          \"anyOf\": [\n            {\n              \"$ref\": \"#/components/schemas/Digest\"\n            },\n            {\n              \"type\": \"null\"\n            }\n          ]\n        }\n      },\n      \"additionalProperties\": false\n    }\n  },\n  \"examples\": [\n    {\n      \"name\": \"chain_get_state_root_hash_example\",\n      \"params\": [\n        {\n          \"name\": \"block_identifier\",\n          \"value\": {\n            \"Height\": 10\n          }\n        }\n      ],\n      \"result\": {\n        \"name\": \"chain_get_state_root_hash_example_result\",\n        \"value\": {\n          \"api_version\": \"2.0.0\",\n          \"state_root_hash\": \"0808080808080808080808080808080808080808080808080808080808080808\"\n        }\n      }\n    }\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Querying Network State with Casper-Client in Rust\nDESCRIPTION: Allows querying a specific global state value from the Casper blockchain using a provided node address, state root hash, and an account or contract identifier key. Optionally accepts a query path to target session or named key details. Requires previous retrieval of a valid state root hash. Outputs the queried state data.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/docs/resources/beginner/counter/commands.md#2025-04-22_snippet_2\n\nLANGUAGE: rust\nCODE:\n```\ncasper-client query-global-state \\\n    --node-address [NODE_SERVER_ADDRESS] \\\n    --state-root-hash [STATE_ROOT_HASH] \\\n    --key [ACCOUNT_HASH] \\\n    -q \"[SESSION_NAME]/[SESSION_NAMED_KEY]\" (OPTIONAL)\n```\n\n----------------------------------------\n\nTITLE: Source Account JSON-RPC Response\nDESCRIPTION: Example JSON-RPC response showing the balance query result\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/versioned_docs/version-2.0.0/developers/cli/transfers/verify-transfer.md#2025-04-22_snippet_19\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"jsonrpc\": \"2.0\",\n  \"result\": {\n    \"api_version\": \"1.5.3\",\n    \"balance\": \"1109111876194\"\n  },\n  \"id\": 6\n}\n```\n\n----------------------------------------\n\nTITLE: Installing Dependencies and Starting Development Server\nDESCRIPTION: Commands to install project dependencies and start the Vite development server for testing the initial setup.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/versioned_docs/version-2.0.0/developers/dapps/template-frontend.md#2025-04-22_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nnpm install\nvite dev\n```\n\n----------------------------------------\n\nTITLE: Defining Delegator Schema in JSON for Casper Network\nDESCRIPTION: This JSON schema defines the structure of a delegator object, representing a party delegating their stake to a validator. It specifies required fields such as bonding_purse, delegator_public_key, staked_amount, and validator_public_key. The schema also includes optional fields and references to other schema components.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/condor/jsonrpc-comp/rpc-1.5/schema/Delegator.json.md#2025-04-22_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"description\": \"Represents a party delegating their stake to a validator (or \\\"delegatee\\\")\",\n    \"type\": \"object\",\n    \"required\": [\n        \"bonding_purse\",\n        \"delegator_public_key\",\n        \"staked_amount\",\n        \"validator_public_key\"\n    ],\n    \"properties\": {\n        \"delegator_public_key\": {\n            \"$ref\": \"#/components/schemas/PublicKey\"\n        },\n        \"staked_amount\": {\n            \"$ref\": \"#/components/schemas/U512\"\n        },\n        \"bonding_purse\": {\n            \"$ref\": \"#/components/schemas/URef\"\n        },\n        \"validator_public_key\": {\n            \"$ref\": \"#/components/schemas/PublicKey\"\n        },\n        \"vesting_schedule\": {\n            \"anyOf\": [\n                {\n                    \"$ref\": \"#/components/schemas/VestingSchedule\"\n                },\n                {\n                    \"type\": \"null\"\n                }\n            ]\n        }\n    },\n    \"additionalProperties\": false\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Process Instruction in Solana\nDESCRIPTION: This snippet demonstrates how to implement the process_instruction function in Solana that processes program instructions. It includes parameters for the program ID, accounts, and instruction data.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/docs/resources/moving-to-casper.md#2025-04-22_snippet_9\n\nLANGUAGE: rust\nCODE:\n```\npub fn process_instruction(\n    program_id: &Pubkey,\n    accounts: &[AccountInfo],\n    _instruction_data: &[u8],\n) -> ProgramResult {}\n```\n\n----------------------------------------\n\nTITLE: Building Casper Private Network Management Contracts\nDESCRIPTION: Command to build Rust-based contracts needed for private chain management. These contracts allow administrators to manage permissions for accounts and smart contracts.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/docs/operators/setup-network/create-private.md#2025-04-22_snippet_9\n\nLANGUAGE: sh\nCODE:\n```\nmake build-contracts-rs\n```\n\n----------------------------------------\n\nTITLE: Example of info_get_reward Response in Casper Network\nDESCRIPTION: This JSON response shows the structure returned by the info_get_reward RPC method. It includes the API version, reward amount, and era ID for which the reward was calculated.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/docs/developers/json-rpc/json-rpc-informational.md#2025-04-22_snippet_13\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"id\": 1,\n  \"jsonrpc\": \"2.0\",\n  \"result\": {\n    \"name\": \"info_get_reward_result\",\n    \"value\": {\n      \"api_version\": \"2.0.0\",\n      \"reward_amount\": \"42\",\n      \"era_id\": 1\n    }\n  } \n```\n\n----------------------------------------\n\nTITLE: Example: Retrieving State Root Hash using Casper-Client\nDESCRIPTION: Provides a concrete example of the `get-state-root-hash` command, specifying a node address using an IP and port. This retrieves the state root hash from the target node.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/docs/resources/beginner/counter-testnet/commands.md#2025-04-22_snippet_1\n\nLANGUAGE: rust\nCODE:\n```\ncasper-client get-state-root-hash --node-address http://[IP]:7777\n```\n\n----------------------------------------\n\nTITLE: Preview Production Build\nDESCRIPTION: Command to preview the production build locally before deployment.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/versioned_docs/version-2.0.0/developers/dapps/template-frontend.md#2025-04-22_snippet_21\n\nLANGUAGE: bash\nCODE:\n```\nvite preview\n```\n\n----------------------------------------\n\nTITLE: Sample Message Checksum Query\nDESCRIPTION: Example of querying a specific message checksum from global state using actual hash values and node address.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/docs/developers/writing-onchain-code/emitting-contract-events.md#2025-04-22_snippet_12\n\nLANGUAGE: bash\nCODE:\n```\ncasper-client query-global-state --node-address http://127.0.0.1:11101 \\\n--key \"message-803c759a466a84a0ab12147857f49e269369796a66ad37e94ab8343ddddb7823-topic-name-5721a6d9d7a9afe5dfdb35276fb823bed0f825350e4d865a5ec0110c380de4e1-0\" \\\n--block-identifier d9642c5d90c7fc05a23d83a3abcf56d63cb71316402ecefe0962fdeccad2c99c\n```\n\n----------------------------------------\n\nTITLE: Transfer Details JSON-RPC Response Structure\nDESCRIPTION: Example JSON-RPC response showing transfer details including deploy hash, source and target accounts, and transfer amount, which are essential for verifying the transfer execution.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/versioned_docs/version-2.0.0/developers/cli/transfers/verify-transfer.md#2025-04-22_snippet_7\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"jsonrpc\": \"2.0\",\n  \"result\": {\n    \"api_version\": \"1.5.3\",\n    \"block_header\": null,\n    \"stored_value\": {\n      \"Transfer\": {\n        \"deploy_hash\": \"4eedbb5cf4a571748cf7ae9c2f17777364a01f80f79f3633a0cec32b7e8cf2e3\",\n        \"from\": \"account-hash-e70dbca48c2d31bc2d754e51860ceaa8a1a49dc627b20320b0ecee1b6d9ce655\",\n        \"to\": \"account-hash-1ed5a1c39bea93c105f2d22c965a84b205b36734a377d05dbb103b6bfaa595a7\",\n        \"source\": \"uref-11e6fc5354f61a004df98482376c45964b8b1557e8f2f13fb5f3adab5faa8be1-007\",\n        \"target\": \"uref-8294864177c2c1ec887a11dae095e487b5256ce6bd2a1f2740d0e4f28bd3251c-004\",\n        \"amount\": \"5000000000\",\n        \"gas\": \"0\",\n        \"id\": 11102023\n      }\n    },\n    \"merkle_proof\": \"[42526 hex chars]\"\n  },\n  \"id\": 3\n}\n```\n\n----------------------------------------\n\nTITLE: Computing Round Issuance Rate for Casper Network\nDESCRIPTION: Formula for calculating the round issuance rate, which is the annual issuance rate adjusted to a single consensus round. This value is used in the reward calculation mechanism.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/versioned_docs/version-1.5.X/concepts/economics/consensus.md#2025-04-22_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\nround_issuance_rate = (1 + issuance_rate)^(2^minimum_round_exponent / ticks_per_year) - 1\n```\n\n----------------------------------------\n\nTITLE: Building the website for production\nDESCRIPTION: Yarn commands to install dependencies and build the website in production mode. This generates the static website in the ./build directory.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/README/SETUP.md#2025-04-22_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\nyarn install\n```\n\nLANGUAGE: bash\nCODE:\n```\nyarn build\n```\n\n----------------------------------------\n\nTITLE: Querying Auction Information with Casper Client (Bash)\nDESCRIPTION: This command uses the `casper-client` to query the current state of the auction contract on the Casper network. The output helps determine if a submitted bid was accepted by checking if the bidder's public key is included in the validator set for a future era. Requires the node address.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/versioned_docs/version-1.5.X/operators/becoming-a-validator/bonding.md#2025-04-22_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\ncasper-client get-auction-info --node-address http://<HOST:PORT>\n```\n\n----------------------------------------\n\nTITLE: Block Query JSON-RPC Response Format\nDESCRIPTION: Example of the JSON-RPC response format returned when querying block information, including block header, body, and proof details.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/versioned_docs/version-1.5.X/resources/beginner/querying-network.md#2025-04-22_snippet_7\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"id\": 3,\n    \"jsonrpc\": \"2.0\",\n    \"result\": {\n        \"api_version\": \"1.0.0\",\n        \"block\": {\n            \"body\": {\n                \"deploy_hashes\": [],\n                \"proposer\": \"012c6775c0e9e09f93b9450f1c5348c5f6b97895b0f52bb438f781f96ba2675a94\",\n                \"transfer_hashes\": [\"ec2d477a532e00b08cfa9447b7841a645a27d34ee12ec55318263617e5740713\"]\n            },\n            \"hash\": \"7c7e9b0f087bba5ce6fc4bd067b57f69ea3c8109157a3ad7f6d98b8da77d97f9\",\n            \"header\": {\n                \"accumulated_seed\": \"50b8ac019b7300cd1fdeec050310e61b900e9238aa879929745900a91bd0fc4f\",\n                \"body_hash\": \"224076b19c04279ae9b97f620801d5ff40ba64f431fe0d5089ef7cb84fdff45a\",\n                \"era_end\": null,\n                \"era_id\": 0,\n                \"height\": 8,\n                \"parent_hash\": \"416f339c4c2ff299c64a4b3271c5ef2ac2297bb40a477ceacce1483451a4db16\",\n                \"protocol_version\": \"1.0.0\",\n                \"random_bit\": true,\n                \"state_root_hash\": \"cfdbf775b6671de3787cfb1f62f0c5319605a7c1711d6ece4660b37e57e81aa3\",\n                \"timestamp\": \"2021-04-20T18:04:42.368Z\"\n            },\n            \"proofs\": [\n                {\n                    \"public_key\": \"010f50b0116f213ef65b99d1bd54483f92bf6131de2f8aceb7e3f825a838292150\",\n                    \"signature\": \"130 chars\"\n                },\n                {\n                    \"public_key\": \"012c6775c0e9e09f93b9450f1c5348c5f6b97895b0f52bb438f781f96ba2675a94\",\n                    \"signature\": \"130 chars\"\n                },\n                {\n                    \"public_key\": \"018d5da83f22c9b65cdfdf9f9fdf9f7c98aa2b8c7bcf14bf855177bbb9c1ac7f0a\",\n                    \"signature\": \"130 chars\"\n                },\n                {\n                    \"public_key\": \"01b9088b92c8a8d592f6ec8c3e8153d7c55fc0c38b5999a214e37e73a2edd6fe0f\",\n                    \"signature\": \"130 chars\"\n                },\n                {\n                    \"public_key\": \"01b9e3484d96d5693e6c5fe789e7b28972aa392b054a76d175f079692967f604de\",\n                    \"signature\": \"130 chars\"\n                }\n            ]\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: URef With READ and ADD Access Rights Example\nDESCRIPTION: Example of a URef string representation with READ and ADD access rights (suffix -005)\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/versioned_docs/version-1.5.X/developers/dapps/uref-security.md#2025-04-22_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nuref-974019c976b5f26412ce486158d2431967af35d91387dae8cbcd43c20fce6452-005\n```\n\n----------------------------------------\n\nTITLE: Incrementing Counter Value\nDESCRIPTION: Command to increment the counter value by calling the counter_inc entry point.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/versioned_docs/version-1.5.X/resources/quick-start.md#2025-04-22_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\ncasper-client put-deploy \\\n--node-address [NODE_ADDRESS] \\\n--chain-name [CHAIN_NAME] \\\n--secret-key [PATH_TO_YOUR_KEY] \\\n--payment-amount 100000000 \\\n--session-name \"counter\" \\\n--session-entry-point \"counter_inc\"\n```\n\n----------------------------------------\n\nTITLE: Previewing Production Build (Bash)\nDESCRIPTION: Starts a local static web server using Vite to preview the production build created by `vite build`. This allows testing the optimized application as it would appear in a production environment.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/docs/developers/dapps/template-frontend.md#2025-04-22_snippet_18\n\nLANGUAGE: bash\nCODE:\n```\nvite preview\n```\n\n----------------------------------------\n\nTITLE: Defining Bid and VestingSchedule Schemas in JSON\nDESCRIPTION: Schema definitions for Bid and VestingSchedule objects. Bid represents an entry in the validator map with properties for validator information and delegators. VestingSchedule defines the release schedule for genesis validators.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/condor/jsonrpc-comp/rpc-2.0/schema.json.md#2025-04-22_snippet_55\n\nLANGUAGE: json\nCODE:\n```\n\"Bid\": {\n  \"description\": \"An entry in the validator map.\",\n  \"type\": \"object\",\n  \"required\": [\n    \"bonding_purse\",\n    \"delegation_rate\",\n    \"delegators\",\n    \"inactive\",\n    \"staked_amount\",\n    \"validator_public_key\"\n  ],\n  \"properties\": {\n    \"validator_public_key\": {\n      \"description\": \"Validator public key.\",\n      \"allOf\": [\n        {\n          \"$ref\": \"#/components/schemas/PublicKey\"\n        }\n      ]\n    },\n    \"bonding_purse\": {\n      \"description\": \"The purse that was used for bonding.\",\n      \"allOf\": [\n        {\n          \"$ref\": \"#/components/schemas/URef\"\n        }\n      ]\n    },\n    \"staked_amount\": {\n      \"description\": \"The amount of tokens staked by a validator (not including delegators).\",\n      \"allOf\": [\n        {\n          \"$ref\": \"#/components/schemas/U512\"\n        }\n      ]\n    },\n    \"delegation_rate\": {\n      \"description\": \"Delegation rate.\",\n      \"type\": \"integer\",\n      \"format\": \"uint8\",\n      \"minimum\": 0.0\n    },\n    \"vesting_schedule\": {\n      \"description\": \"Vesting schedule for a genesis validator. `None` if non-genesis validator.\",\n      \"anyOf\": [\n        {\n          \"$ref\": \"#/components/schemas/VestingSchedule\"\n        },\n        {\n          \"type\": \"null\"\n        }\n      ]\n    },\n    \"delegators\": {\n      \"description\": \"This validator's delegators, indexed by their public keys.\",\n      \"allOf\": [\n        {\n          \"$ref\": \"#/components/schemas/Array_of_PublicKeyAndDelegator\"\n        }\n      ]\n    },\n    \"inactive\": {\n      \"description\": \"`true` if validator has been \\\"evicted\\\".\",\n      \"type\": \"boolean\"\n    }\n  },\n  \"additionalProperties\": false\n},\n\"VestingSchedule\": {\n  \"type\": \"object\",\n  \"required\": [\n    \"initial_release_timestamp_millis\"\n  ],\n  \"properties\": {\n    \"initial_release_timestamp_millis\": {\n      \"type\": \"integer\",\n      \"format\": \"uint64\",\n      \"minimum\": 0.0\n    },\n    \"locked_amounts\": {\n      \"type\": [\n        \"array\",\n        \"null\"\n      ],\n      \"items\": {\n\n      }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining AddInt32 Object\nDESCRIPTION: This schema defines an object for adding an `i32` integer. It requires the `AddInt32` property, which must be an integer in the `int32` format. No additional properties are allowed.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/condor/jsonrpc-comp/rpc-1.5/schema/components.json.md#2025-04-22_snippet_17\n\nLANGUAGE: JSON\nCODE:\n```\n{\\n    \\\"description\\\": \\\"Adds the given `i32`.\\\",\\n    \\\"type\\\": \\\"object\\\",\\n    \\\"required\\\": [\\n        \\\"AddInt32\\\"\\n    ],\\n    \\\"properties\\\": {\\n        \\\"AddInt32\\\": {\\n            \\\"type\\\": \\\"integer\\\",\\n            \\\"format\\\": \\\"int32\\\"\\n        }\\n    },\\n    \\\"additionalProperties\\\": false\\n}\n```\n\n----------------------------------------\n\nTITLE: Entry Point Definitions for Casper Network Token Contract\nDESCRIPTION: JSON representation of entry point definitions for a Casper Network token contract. These definitions specify the function names, parameters, return types, and access controls for the contract's public interface.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/docs/developers/cli/sending-transactions.md#2025-04-22_snippet_5\n\nLANGUAGE: JSON\nCODE:\n```\n{\n  \"key\": \"entry-point-v1-entity-contract-363996106630892a964565574fcdfd2435f21a17a3ad1ed2054146e7d8461640-fcc296caa05679d0d11121e7629b29f222a857018f50985046b73a56e9a10701\",\n  \"kind\": {\n    \"Write\": {\n      \"EntryPoint\": {\n        \"V1CasperVm\": {\n          \"name\": \"balance_of\",\n          \"args\": [\n            {\n              \"name\": \"address\",\n              \"cl_type\": \"Key\"\n            }\n          ],\n          \"ret\": \"U256\",\n          \"access\": \"Public\",\n          \"entry_point_type\": \"Called\",\n          \"entry_point_payment\": \"Caller\"\n        }\n      }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Installing project dependencies\nDESCRIPTION: Yarn command to install all project dependencies. This needs to be run once in the project folder after cloning the repository.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/README/SETUP.md#2025-04-22_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nyarn install\n```\n\n----------------------------------------\n\nTITLE: Installing pip on Linux\nDESCRIPTION: Command to install Python3 pip package manager on Linux systems using apt.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/docs/developers/dapps/setup-nctl.md#2025-04-22_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n$ sudo apt install python3-pip\n```\n\n----------------------------------------\n\nTITLE: Defining BalanceHoldWithProof Schema in JSON\nDESCRIPTION: This schema defines the structure for a balance hold with proof, including the block time, amount, and Merkle trie proof.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/condor/jsonrpc-comp/rpc-2.0/schema/components.json.md#2025-04-22_snippet_75\n\nLANGUAGE: JSON\nCODE:\n```\n\"BalanceHoldWithProof\": {\n    \"type\": \"object\",\n    \"required\": [\n        \"amount\",\n        \"proof\",\n        \"time\"\n    ],\n    \"properties\": {\n        \"time\": {\n            \"description\": \"The block time at which the hold was created.\",\n            \"allOf\": [\n                {\n                    \"$ref\": \"#/components/schemas/BlockTime\"\n                }\n            ]\n        },\n        \"amount\": {\n            \"description\": \"The amount in the hold.\",\n            \"allOf\": [\n                {\n                    \"$ref\": \"#/components/schemas/U512\"\n                }\n            ]\n        },\n        \"proof\": {\n            \"description\": \"A proof that the given value is present in the Merkle trie.\",\n            \"type\": \"string\"\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Sample Deploy Approvals JSON Structure\nDESCRIPTION: This JSON snippet presents the structure of the approvals field in a Casper deploy, which lists signers and corresponding signatures. Each approval object identifies a unique public key and a hex-encoded signature. This is useful for specifying expected deploy metadata when interacting with Casper nodes or verifying multi-signature operations.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/docs/resources/advanced/list-auth-keys-tutorial.md#2025-04-22_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n\"approvals\": [\n    {\n      \"signer\": \"02021a4da3d6f32ea3ebd2519e1a37a1b811671085bf4f1cf2a36b931344a99b756a\",\n      \"signature\": \"02df8cdf0bff3bd93e831d24563d5acbefa0ed13814550e910d03208d5fb3c11770dd3d918784ec84342e53666eacf59aeecbf4ce0cdd60e167c4a4b20e4b8f481\"\n    }\n]\n```\n\n----------------------------------------\n\nTITLE: Defining CLType Tuple3 Schema in JSON\nDESCRIPTION: JSON schema definition for a 3-ary tuple type in Casper's type system. This represents a tuple containing three CLTypes.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/condor/jsonrpc-comp/rpc-1.5/schema/components.json.md#2025-04-22_snippet_10\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"description\": \"3-ary tuple of `CLType`s.\",\n    \"type\": \"object\",\n    \"required\": [\n        \"Tuple3\"\n    ],\n    \"properties\": {\n        \"Tuple3\": {\n            \"type\": \"array\",\n            \"items\": {\n                \"$ref\": \"#/components/schemas/CLType\"\n            },\n            \"maxItems\": 3,\n            \"minItems\": 3\n        }\n    },\n    \"additionalProperties\": false\n}\n```\n\n----------------------------------------\n\nTITLE: Installing jq JSON Processor\nDESCRIPTION: Command to install jq, a command-line JSON processor, within the Python virtual environment using pip.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/versioned_docs/version-2.0.0/developers/dapps/setup-nctl.md#2025-04-22_snippet_10\n\nLANGUAGE: bash\nCODE:\n```\n(env) $ pip install jq\n```\n\n----------------------------------------\n\nTITLE: Defining Unbonding Purse Schema - JSON\nDESCRIPTION: This JSON schema defines the data structure for an unbonding purse object used in the Casper Network for staking workflows. It requires dependencies on referenced schemas such as URef, PublicKey, EraId, and U512 to ensure proper typing and validation of cryptographic elements. The main properties include the purse reference, amount to unbond, public keys of the validator and unbonder, creation era, and an optional new validator for re-delegation; all extra properties are disallowed. Inputs to this schema must conform exactly to the defined structure, with required fields and correct types, or validation will fail.\nSOURCE: https://github.com/casper-network/docs-redux/blob/dev/condor/jsonrpc-comp/rpc-1.5/schema/UnbondingPurse.json.md#2025-04-22_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"description\": \"Unbonding purse.\",\n    \"type\": \"object\",\n    \"required\": [\n        \"amount\",\n        \"bonding_purse\",\n        \"era_of_creation\",\n        \"unbonder_public_key\",\n        \"validator_public_key\"\n    ],\n    \"properties\": {\n        \"bonding_purse\": {\n            \"description\": \"Bonding Purse\",\n            \"allOf\": [\n                {\n                    \"$ref\": \"#/components/schemas/URef\"\n                }\n            ]\n        },\n        \"validator_public_key\": {\n            \"description\": \"Validators public key.\",\n            \"allOf\": [\n                {\n                    \"$ref\": \"#/components/schemas/PublicKey\"\n                }\n            ]\n        },\n        \"unbonder_public_key\": {\n            \"description\": \"Unbonders public key.\",\n            \"allOf\": [\n                {\n                    \"$ref\": \"#/components/schemas/PublicKey\"\n                }\n            ]\n        },\n        \"era_of_creation\": {\n            \"description\": \"Era in which this unbonding request was created.\",\n            \"allOf\": [\n                {\n                    \"$ref\": \"#/components/schemas/EraId\"\n                }\n            ]\n        },\n        \"amount\": {\n            \"description\": \"Unbonding Amount.\",\n            \"allOf\": [\n                {\n                    \"$ref\": \"#/components/schemas/U512\"\n                }\n            ]\n        },\n        \"new_validator\": {\n            \"description\": \"The validator public key to re-delegate to.\",\n            \"anyOf\": [\n                {\n                    \"$ref\": \"#/components/schemas/PublicKey\"\n                },\n                {\n                    \"type\": \"null\"\n                }\n            ]\n        }\n    },\n    \"additionalProperties\": false\n}\n```"
  }
]