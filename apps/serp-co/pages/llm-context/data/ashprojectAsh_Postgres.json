[
  {
    "owner": "ash-project",
    "repo": "ash_postgres",
    "content": "TITLE: Creating and manipulating sample data with Ash\nDESCRIPTION: Example Elixir code for creating representatives and tickets, then assigning and closing tickets to demonstrate Ash's API with PostgreSQL data layer.\nSOURCE: https://github.com/ash-project/ash_postgres/blob/main/documentation/tutorials/get-started-with-ash-postgres.md#2025-04-14_snippet_14\n\nLANGUAGE: elixir\nCODE:\n```\nrequire Ash.Query\n\nrepresentative = (\n  Helpdesk.Support.Representative\n  |> Ash.Changeset.for_create(:create, %{name: \"Joe Armstrong\"})\n  |> Ash.create!()\n)\n\nfor i <- 0..5 do\n  ticket =\n    Helpdesk.Support.Ticket\n    |> Ash.Changeset.for_create(:open, %{subject: \"Issue #{i}\"})\n    |> Ash.create!()\n    |> Ash.Changeset.for_update(:assign, %{representative_id: representative.id})\n    |> Ash.update!()\n\n  if rem(i, 2) == 0 do\n    ticket\n    |> Ash.Changeset.for_update(:close)\n    |> Ash.update!()\n  end\nend\n```\n\n----------------------------------------\n\nTITLE: Creating a DataCase Module for AshPostgres Testing in Elixir\nDESCRIPTION: This code snippet defines a DataCase module that sets up the test environment for database operations. It uses Ecto.Adapters.SQL.Sandbox to ensure that database changes are reverted after each test, enabling isolated test execution.\nSOURCE: https://github.com/ash-project/ash_postgres/blob/main/documentation/topics/development/testing.md#2025-04-14_snippet_0\n\nLANGUAGE: elixir\nCODE:\n```\ndefmodule MyApp.DataCase do\n  @moduledoc \"\"\"\n  This module defines the setup for tests requiring\n  access to the application's data layer.\n\n  You may define functions here to be used as helpers in\n  your tests.\n\n  Finally, if the test case interacts with the database,\n  we enable the SQL sandbox, so changes done to the database\n  are reverted at the end of every test. If you are using\n  PostgreSQL, you can even run database tests asynchronously\n  by setting `use AshHq.DataCase, async: true`, although\n  this option is not recommended for other databases.\n  \"\"\"\n\n  use ExUnit.CaseTemplate\n\n  using do\n    quote do\n      alias MyApp.Repo\n\n      import Ecto\n      import Ecto.Changeset\n      import Ecto.Query\n      import MyApp.DataCase\n    end\n  end\n\n  setup tags do\n    pid = Ecto.Adapters.SQL.Sandbox.start_owner!(MyApp.Repo, shared: not tags[:async])\n    on_exit(fn -> Ecto.Adapters.SQL.Sandbox.stop_owner(pid) end)\n    :ok\n  end\nend\n```\n\n----------------------------------------\n\nTITLE: Release Tasks Module for Production Migration Management\nDESCRIPTION: An Elixir module for managing migrations in production environments where Mix is not available. It includes functions for migrating standard and tenant-specific schemas, as well as rollback functionality. The module dynamically identifies repositories from application domains.\nSOURCE: https://github.com/ash-project/ash_postgres/blob/main/documentation/topics/development/migrations-and-tasks.md#2025-04-14_snippet_1\n\nLANGUAGE: elixir\nCODE:\n```\ndefmodule MyApp.Release do\n  @moduledoc \"\"\"\nTasks that need to be executed in the released application (because mix is not present in releases).\n  \"\"\"\n  @app :my_app\n  def migrate do\n    load_app()\n\n    for repo <- repos() do\n      {:ok, _, _} = Ecto.Migrator.with_repo(repo, &Ecto.Migrator.run(&1, :up, all: true))\n    end\n  end\n\n  # only needed if you are using postgres multitenancy\n  def migrate_tenants do\n    load_app()\n\n    for repo <- repos() do\n      path = Ecto.Migrator.migrations_path(repo, \"tenant_migrations\")\n      # This may be different for you if you are not using the default tenant migrations\n\n      {:ok, _, _} =\n        Ecto.Migrator.with_repo(\n          repo,\n          fn repo ->\n            for tenant <- repo.all_tenants() do\n              Ecto.Migrator.run(repo, path, :up, all: true, prefix: tenant)\n            end\n          end\n        )\n    end\n  end\n\n  # only needed if you are using postgres multitenancy\n  def migrate_all do\n    load_app()\n    migrate()\n    migrate_tenants()\n  end\n\n  def rollback(repo, version) do\n    load_app()\n    {:ok, _, _} = Ecto.Migrator.with_repo(repo, &Ecto.Migrator.run(&1, :down, to: version))\n  end\n\n  # only needed if you are using postgres multitenancy\n  def rollback_tenants(repo, version) do\n    load_app()\n\n    path = Ecto.Migrator.migrations_path(repo, \"tenant_migrations\")\n    # This may be different for you if you are not using the default tenant migrations\n\n    for tenant <- repo.all_tenants() do\n      {:ok, _, _} =\n        Ecto.Migrator.with_repo(\n          repo,\n          &Ecto.Migrator.run(&1, path, :down,\n            to: version,\n            prefix: tenant\n          )\n        )\n    end\n  end\n\n  defp repos do\n    domains()\n    |> Enum.flat_map(fn domain ->\n      domain\n      |> Ash.Domain.Info.resources()\n      |> Enum.map(&AshPostgres.DataLayer.Info.repo/1)\n      |> Enum.reject(&is_nil/1)\n    end)\n    |> Enum.uniq()\n  end\n\n  defp domains do\n    Application.fetch_env!(@app, :ash_domains)\n  end\n\n  defp load_app do\n    Application.load(@app)\n  end\nend\n```\n\n----------------------------------------\n\nTITLE: Filtering and sorting by aggregates\nDESCRIPTION: Example of using aggregates in filters and sorts, demonstrating how AshPostgres translates these operations to efficient SQL.\nSOURCE: https://github.com/ash-project/ash_postgres/blob/main/documentation/tutorials/get-started-with-ash-postgres.md#2025-04-14_snippet_18\n\nLANGUAGE: elixir\nCODE:\n```\n# in iex\n\nrequire Ash.Query\n\nHelpdesk.Support.Representative\n|> Ash.Query.filter(closed_tickets < 4)\n|> Ash.Query.sort(closed_tickets: :desc)\n|> Ash.read!()\n```\n\n----------------------------------------\n\nTITLE: Setting up runtime production configuration\nDESCRIPTION: Runtime configuration that uses environment variables for database connection in production, supporting containerized deployments.\nSOURCE: https://github.com/ash-project/ash_postgres/blob/main/documentation/tutorials/get-started-with-ash-postgres.md#2025-04-14_snippet_6\n\nLANGUAGE: elixir\nCODE:\n```\n# in config/runtime.exs\n\nimport Config\n\nif config_env() == :prod do\n  database_url =\n    System.get_env(\"DATABASE_URL\") ||\n      raise \"\"\"\n      environment variable DATABASE_URL is missing.\n      For example: ecto://USER:PASS@HOST/DATABASE\n      \"\"\"\n\n  config :helpdesk, Helpdesk.Repo,\n    url: database_url,\n    pool_size: String.to_integer(System.get_env(\"POOL_SIZE\") || \"10\")\nend\n```\n\n----------------------------------------\n\nTITLE: Querying tickets with subject filter\nDESCRIPTION: Example showing how to query tickets with a subject filter using AshPostgres, which translates Ash query expressions to SQL.\nSOURCE: https://github.com/ash-project/ash_postgres/blob/main/documentation/tutorials/get-started-with-ash-postgres.md#2025-04-14_snippet_15\n\nLANGUAGE: elixir\nCODE:\n```\nrequire Ash.Query\n\n# Show the tickets where the subject contains \"2\"\nHelpdesk.Support.Ticket\n|> Ash.Query.filter(contains(subject, \"2\"))\n|> Ash.read!()\n```\n\n----------------------------------------\n\nTITLE: Configuring Ash to Disable Async Operations in Tests\nDESCRIPTION: This configuration disables asynchronous operations in Ash during testing. This ensures that all operations run synchronously, which is important for predictable test behavior when using the SQL sandbox.\nSOURCE: https://github.com/ash-project/ash_postgres/blob/main/documentation/topics/development/testing.md#2025-04-14_snippet_1\n\nLANGUAGE: elixir\nCODE:\n```\nconfig :ash, :disable_async?, true\n```\n\n----------------------------------------\n\nTITLE: Configuring Automatic Tenant Management in Elixir using AshPostgres\nDESCRIPTION: This code snippet demonstrates how to configure automatic tenant management for an Organization resource in AshPostgres. It sets up a template for creating and renaming tenants based on the organization's ID.\nSOURCE: https://github.com/ash-project/ash_postgres/blob/main/documentation/topics/advanced/schema-based-multitenancy.md#2025-04-14_snippet_0\n\nLANGUAGE: elixir\nCODE:\n```\ndefmodule MyApp.Organization do\n  use Ash.Resource,\n    ...\n\n  postgres do\n    ...\n\n    manage_tenant do\n      template [\"org_\", :id]\n    end\n  end\nend\n```\n\n----------------------------------------\n\nTITLE: Setting up main configuration file\nDESCRIPTION: Main configuration file that defines the application's ash domains and Ecto repositories, and imports environment-specific configurations.\nSOURCE: https://github.com/ash-project/ash_postgres/blob/main/documentation/tutorials/get-started-with-ash-postgres.md#2025-04-14_snippet_4\n\nLANGUAGE: elixir\nCODE:\n```\n# in config/config.exs\nimport Config\n\n# This should already have been added in the first\n# getting started guide\nconfig :helpdesk,\n  ash_domains: [Helpdesk.Support]\n\nconfig :helpdesk,\n  ecto_repos: [Helpdesk.Repo]\n\n# Import environment specific config. This must remain at the bottom\n# of this file so it overrides the configuration defined above.\nimport_config \"#{config_env()}.exs\"\n```\n\n----------------------------------------\n\nTITLE: Defining a Resource with AshPostgres Data Layer in Elixir\nDESCRIPTION: This snippet demonstrates how to define an Ash resource that uses the AshPostgres data layer. It creates a Tweet resource with an ID, text content, and an author relationship that maps to a PostgreSQL table named 'tweets'.\nSOURCE: https://github.com/ash-project/ash_postgres/blob/main/documentation/topics/about-ash-postgres/what-is-ash-postgres.md#2025-04-14_snippet_0\n\nLANGUAGE: elixir\nCODE:\n```\ndefmodule MyApp.Tweet do\n  use Ash.Resource,\n    data_layer: AshPostgres.DataLayer\n\n  attributes do\n    integer_primary_key :id\n    attribute :text, :string\n  end\n\n  relationships do\n    belongs_to :author, MyApp.User\n  end\n\n  postgres do\n    table \"tweets\"\n    repo MyApp.Repo\n  end\nend\n```\n\n----------------------------------------\n\nTITLE: Creating AshPostgres Repo module\nDESCRIPTION: Definition of a repository module that extends AshPostgres.Repo. This includes configuration for installed extensions required by Ash.\nSOURCE: https://github.com/ash-project/ash_postgres/blob/main/documentation/tutorials/get-started-with-ash-postgres.md#2025-04-14_snippet_2\n\nLANGUAGE: elixir\nCODE:\n```\n# in lib/helpdesk/repo.ex\n\ndefmodule Helpdesk.Repo do\n  use AshPostgres.Repo, otp_app: :helpdesk\n\n  def installed_extensions do\n    # Ash installs some functions that it needs to run the\n    # first time you generate migrations.\n    [\"ash-functions\"]\n  end\nend\n```\n\n----------------------------------------\n\nTITLE: Configuring Ecto Repo with Read Replicas in Elixir\nDESCRIPTION: This snippet demonstrates how to set up multiple PostgreSQL read replicas using Ecto. It defines a main repository module with a list of replica repositories and a function to randomly select one for read operations. Each replica is configured as read-only.\nSOURCE: https://github.com/ash-project/ash_postgres/blob/main/documentation/topics/advanced/using-multiple-repos.md#2025-04-14_snippet_0\n\nLANGUAGE: elixir\nCODE:\n```\ndefmodule MyApp.Repo do\n  use Ecto.Repo,\n    otp_app: :my_app,\n    adapter: Ecto.Adapters.Postgres\n\n  @replicas [\n    MyApp.Repo.Replica1,\n    MyApp.Repo.Replica2,\n    MyApp.Repo.Replica3,\n    MyApp.Repo.Replica4\n  ]\n\n  def replica do\n    Enum.random(@replicas)\n  end\n\n  for repo <- @replicas do\n    defmodule repo do\n      use Ecto.Repo,\n        otp_app: :my_app,\n        adapter: Ecto.Adapters.Postgres,\n        read_only: true\n    end\n  end\nend\n```\n\n----------------------------------------\n\nTITLE: Configuring AshPostgres Resource with Dynamic Repository Selection\nDESCRIPTION: This snippet shows how to configure an Ash resource to use different repositories based on operation type. It uses a function that returns the primary repo for mutations and a random replica for read operations.\nSOURCE: https://github.com/ash-project/ash_postgres/blob/main/documentation/topics/advanced/using-multiple-repos.md#2025-04-14_snippet_1\n\nLANGUAGE: elixir\nCODE:\n```\ndefmodule MyApp.MyDomain.MyResource do\n  use Ash.Resource,\n    date_layer: AshPostgres.DataLayer\n\n  postgres do\n    table \"my_resources\"\n    repo fn\n      _resource, :read -> MyApp.Repo.replica()\n      _resource, :mutate -> MyApp.Repo\n    end\n  end\nend\n```\n\n----------------------------------------\n\nTITLE: Regenerating Migrations with Bash Script\nDESCRIPTION: A bash script to help regenerate migrations by rolling back untracked migrations, removing untracked files, and regenerating migrations. The script accepts a migration name parameter and an optional flag to automatically run migrations after regeneration.\nSOURCE: https://github.com/ash-project/ash_postgres/blob/main/documentation/topics/development/migrations-and-tasks.md#2025-04-14_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n#!/bin/bash\n\n# Get count of untracked migrations\nN_MIGRATIONS=$(git ls-files --others priv/repo/migrations | wc -l)\n\n# Rollback untracked migrations\nmix ash_postgres.rollback -n $N_MIGRATIONS\n\n# Delete untracked migrations and snapshots\ngit ls-files --others priv/repo/migrations | xargs rm\ngit ls-files --others priv/resource_snapshots | xargs rm\n\n# Regenerate migrations\nmix ash.codegen --name $1\n\n# Run migrations if flag\nif echo $* | grep -e \"-m\" -q\nthen\n  mix ash.migrate\nfi\n```\n\n----------------------------------------\n\nTITLE: Defining Foreign Key References in Ash Postgres\nDESCRIPTION: Configures foreign key references and their behavior for database migrations, including deletion and update policies.\nSOURCE: https://github.com/ash-project/ash_postgres/blob/main/documentation/dsls/DSL-AshPostgres.DataLayer.md#2025-04-14_snippet_6\n\nLANGUAGE: elixir\nCODE:\n```\nreferences do\n  reference :post, on_delete: :delete, on_update: :update, name: \"comments_to_posts_fkey\"\nend\n```\n\n----------------------------------------\n\nTITLE: Generating Resources from Database Tables\nDESCRIPTION: This command uses ash_postgres.gen.resources mix task to scaffold resources directly from specified database tables within a given domain.\nSOURCE: https://github.com/ash-project/ash_postgres/blob/main/documentation/tutorials/set-up-with-existing-database.md#2025-04-14_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nmix ash_postgres.gen.resources MyApp.MyDomain --tables table1,table2,table3\n```\n\n----------------------------------------\n\nTITLE: Generating database migrations for Ash resources\nDESCRIPTION: Command to generate database migrations for the defined Ash resources, automatically creating the necessary tables and relationships.\nSOURCE: https://github.com/ash-project/ash_postgres/blob/main/documentation/tutorials/get-started-with-ash-postgres.md#2025-04-14_snippet_12\n\nLANGUAGE: bash\nCODE:\n```\nmix ash.codegen add_tickets_and_representatives\n```\n\n----------------------------------------\n\nTITLE: Using Fragment Expressions in Database Migrations\nDESCRIPTION: Demonstrates using fragments in Ecto migrations to leverage PostgreSQL functions. This example sets a default UUID generator for a primary key.\nSOURCE: https://github.com/ash-project/ash_postgres/blob/main/documentation/topics/advanced/expressions.md#2025-04-14_snippet_4\n\nLANGUAGE: elixir\nCODE:\n```\ncreate table(:managers, primary_key: false) do\n  add :id, :uuid, null: false, default: fragment(\"UUID_GENERATE_V4()\"), primary_key: true\nend\n```\n\n----------------------------------------\n\nTITLE: Setting up database and applying migrations\nDESCRIPTION: Command to create the database and apply the generated migrations, setting up the required database structure.\nSOURCE: https://github.com/ash-project/ash_postgres/blob/main/documentation/tutorials/get-started-with-ash-postgres.md#2025-04-14_snippet_13\n\nLANGUAGE: bash\nCODE:\n```\nmix ash.setup\n```\n\n----------------------------------------\n\nTITLE: Configuring Tenant Management in Ash Postgres\nDESCRIPTION: Configuration for managing database tenants, including template definition and creation/update settings.\nSOURCE: https://github.com/ash-project/ash_postgres/blob/main/documentation/dsls/DSL-AshPostgres.DataLayer.md#2025-04-14_snippet_5\n\nLANGUAGE: elixir\nCODE:\n```\nmanage_tenant do\n  template [\"organization_\", :id]\n  create? true\n  update? false\nend\n```\n\n----------------------------------------\n\nTITLE: Defining Check Constraints in Ash Postgres\nDESCRIPTION: Configures check constraints for database tables with custom validation messages and conditions.\nSOURCE: https://github.com/ash-project/ash_postgres/blob/main/documentation/dsls/DSL-AshPostgres.DataLayer.md#2025-04-14_snippet_7\n\nLANGUAGE: elixir\nCODE:\n```\ncheck_constraints do\n  check_constraint :price, \"price_must_be_positive\", check: \"price > 0\", message: \"price must be positive\"\nend\n```\n\n----------------------------------------\n\nTITLE: Configuring Postgres Data Layer in Ash Framework\nDESCRIPTION: Basic example of configuring a Postgres data layer in an Ash resource. This snippet shows how to specify the repository and table name.\nSOURCE: https://github.com/ash-project/ash_postgres/blob/main/documentation/dsls/DSL-AshPostgres.DataLayer.md#2025-04-14_snippet_0\n\nLANGUAGE: elixir\nCODE:\n```\npostgres do\n  repo MyApp.Repo\n  table \"organizations\"\nend\n\n```\n\n----------------------------------------\n\nTITLE: Configuring Ticket resource with AshPostgres\nDESCRIPTION: Manual configuration of a Ticket resource to use AshPostgres as its data layer, specifying the table name and repository.\nSOURCE: https://github.com/ash-project/ash_postgres/blob/main/documentation/tutorials/get-started-with-ash-postgres.md#2025-04-14_snippet_10\n\nLANGUAGE: elixir\nCODE:\n```\n# in lib/helpdesk/support/ticket.ex\n\n  use Ash.Resource,\n    domain: Helpdesk.Support,\n    data_layer: AshPostgres.DataLayer\n\n  postgres do\n    table \"tickets\"\n    repo Helpdesk.Repo\n  end\n```\n\n----------------------------------------\n\nTITLE: Adding Custom SQL Statements to Migrations in AshPostgres\nDESCRIPTION: Example of adding custom SQL statements to be included in generated migrations. This allows for complex database operations not covered by standard migration functions.\nSOURCE: https://github.com/ash-project/ash_postgres/blob/main/documentation/dsls/DSL-AshPostgres.DataLayer.md#2025-04-14_snippet_3\n\nLANGUAGE: elixir\nCODE:\n```\ncustom_statements do\n  # the name is used to detect if you remove or modify the statement\n  statement :pgweb_idx do\n    up \"CREATE INDEX pgweb_idx ON pgweb USING GIN (to_tsvector('english', title || ' ' || body));\"\n    down \"DROP INDEX pgweb_idx;\"\n  end\nend\n\n```\n\n----------------------------------------\n\nTITLE: Configuring Representative resource with AshPostgres\nDESCRIPTION: Manual configuration of a Representative resource to use AshPostgres as its data layer, specifying the table name and repository.\nSOURCE: https://github.com/ash-project/ash_postgres/blob/main/documentation/tutorials/get-started-with-ash-postgres.md#2025-04-14_snippet_11\n\nLANGUAGE: elixir\nCODE:\n```\n# in lib/helpdesk/support/representative.ex\n\n  use Ash.Resource,\n    domain: Helpdesk.Support,\n    data_layer: AshPostgres.DataLayer\n\n  postgres do\n    table \"representatives\"\n    repo Helpdesk.Repo\n  end\n```\n\n----------------------------------------\n\nTITLE: Defining a Polymorphic Resource in Elixir using AshPostgres\nDESCRIPTION: This snippet demonstrates how to define a polymorphic resource 'Reaction' using Ash.Resource and AshPostgres.DataLayer. It sets up the resource to be polymorphic and includes a 'resource_id' attribute.\nSOURCE: https://github.com/ash-project/ash_postgres/blob/main/documentation/topics/resources/polymorphic-resources.md#2025-04-14_snippet_0\n\nLANGUAGE: elixir\nCODE:\n```\ndefmodule MyApp.Reaction do\n  use Ash.Resource,\n    domain: MyDomain,\n    data_layer: AshPostgres.DataLayer\n\n  postgres do\n    polymorphic? true # Without this, `table` is a required configuration\n  end\n\n  attributes do\n    attribute :resource_id, :uuid, public?: true\n  end\n\n  ...\nend\n```\n\n----------------------------------------\n\nTITLE: Adding Repo to Application supervision tree\nDESCRIPTION: Configuration for the application supervision tree to include the Repo as a supervised process, ensuring proper database connection management.\nSOURCE: https://github.com/ash-project/ash_postgres/blob/main/documentation/tutorials/get-started-with-ash-postgres.md#2025-04-14_snippet_8\n\nLANGUAGE: elixir\nCODE:\n```\n# in lib/helpdesk/application.ex\n\n  def start(_type, _args) do\n    children = [\n      # Starts a worker by calling: Helpdesk.Worker.start_link(arg)\n      # {Helpdesk.Worker, arg}\n      Helpdesk.Repo\n    ]\n\n    ...\n```\n\n----------------------------------------\n\nTITLE: Setting Table Context for Related Resources in Elixir with AshPostgres\nDESCRIPTION: This code snippet shows how to set the table context for related resources (Post and Comment) that use the polymorphic Reaction resource. It demonstrates setting up relationships with specific table names for reactions.\nSOURCE: https://github.com/ash-project/ash_postgres/blob/main/documentation/topics/resources/polymorphic-resources.md#2025-04-14_snippet_1\n\nLANGUAGE: elixir\nCODE:\n```\ndefmodule MyApp.Post do\n  use Ash.Resource,\n    domain: MyDomain,\n    data_layer: AshPostgres.DataLayer\n\n  ...\n\n  relationships do\n    has_many :reactions, MyApp.Reaction,\n      relationship_context: %{data_layer: %{table: \"post_reactions\"}},\n      destination_attribute: :resource_id\n  end\nend\n\ndefmodule MyApp.Comment do\n  use Ash.Resource,\n    domain: MyDomain,\n    data_layer: AshPostgres.DataLayer\n\n  ...\n\n  relationships do\n    has_many :reactions, MyApp.Reaction,\n      relationship_context: %{data_layer: %{table: \"comment_reactions\"}},\n      destination_attribute: :resource_id\n  end\nend\n```\n\n----------------------------------------\n\nTITLE: Implementing Table-Specific Actions for Polymorphic Resources in Elixir\nDESCRIPTION: This snippet illustrates how to create table-specific actions for a polymorphic resource using the 'set_context' query preparation. It defines separate read actions for comments and posts, each using a different table.\nSOURCE: https://github.com/ash-project/ash_postgres/blob/main/documentation/topics/resources/polymorphic-resources.md#2025-04-14_snippet_2\n\nLANGUAGE: elixir\nCODE:\n```\ndefmodule MyApp.Reaction do\n  # ...\n  actions do\n    read :for_comments do\n      prepare set_context(%{data_layer: %{table: \"comment_reactions\"}})\n    end\n\n    read :for_posts do\n      prepare set_context(%{data_layer: %{table: \"post_reactions\"}})\n    end\n  end\nend\n```\n\n----------------------------------------\n\nTITLE: Using ILike Operator in AshPostgres Queries\nDESCRIPTION: Demonstrates the case-insensitive ilike operator for pattern matching. This allows matching text patterns regardless of case.\nSOURCE: https://github.com/ash-project/ash_postgres/blob/main/documentation/topics/advanced/expressions.md#2025-04-14_snippet_6\n\nLANGUAGE: elixir\nCODE:\n```\nAsh.Query.filter(User, ilike(name, \"%ObO%\")) # name contains ObO anywhere in the string, case insensitively\n```\n\n----------------------------------------\n\nTITLE: Creating Custom Indexes in AshPostgres\nDESCRIPTION: Example of defining custom indexes for a PostgreSQL table in Ash. This can be used for complex indexing needs beyond simple unique constraints provided by identities.\nSOURCE: https://github.com/ash-project/ash_postgres/blob/main/documentation/dsls/DSL-AshPostgres.DataLayer.md#2025-04-14_snippet_1\n\nLANGUAGE: elixir\nCODE:\n```\ncustom_indexes do\n  index [:column1, :column2], unique: true, where: \"thing = TRUE\"\nend\n\n```\n\n----------------------------------------\n\nTITLE: Defining a Single Index in AshPostgres\nDESCRIPTION: Example of defining a single custom index on multiple columns with uniqueness constraint and a WHERE condition.\nSOURCE: https://github.com/ash-project/ash_postgres/blob/main/documentation/dsls/DSL-AshPostgres.DataLayer.md#2025-04-14_snippet_2\n\nLANGUAGE: elixir\nCODE:\n```\nindex [\"column\", \"column2\"], unique: true, where: \"thing = TRUE\"\n```\n\n----------------------------------------\n\nTITLE: Creating configuration directory structure\nDESCRIPTION: Shell commands to create the necessary configuration directory structure for managing environment-specific database settings.\nSOURCE: https://github.com/ash-project/ash_postgres/blob/main/documentation/tutorials/get-started-with-ash-postgres.md#2025-04-14_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nmkdir -p config\ntouch config/config.exs\ntouch config/dev.exs\ntouch config/runtime.exs\ntouch config/test.exs\n```\n\n----------------------------------------\n\nTITLE: Defining Custom Statement in Ash Postgres\nDESCRIPTION: Creates a custom statement for migrations with up and down SQL commands. Used for defining custom database operations like creating indexes.\nSOURCE: https://github.com/ash-project/ash_postgres/blob/main/documentation/dsls/DSL-AshPostgres.DataLayer.md#2025-04-14_snippet_4\n\nLANGUAGE: elixir\nCODE:\n```\nstatement :pgweb_idx do\n  up \"CREATE INDEX pgweb_idx ON pgweb USING GIN (to_tsvector('english', title || ' ' || body));\"\n  down \"DROP INDEX pgweb_idx;\"\nend\n```\n\n----------------------------------------\n\nTITLE: Configuring Foreign Key References in Ash Postgres (Elixir)\nDESCRIPTION: This snippet demonstrates how to configure a foreign key reference in Ash Postgres. It sets up a reference to a 'post' with specific on_delete and on_update behaviors, and a custom constraint name.\nSOURCE: https://github.com/ash-project/ash_postgres/blob/main/documentation/topics/resources/references.md#2025-04-14_snippet_0\n\nLANGUAGE: elixir\nCODE:\n```\npostgres do\n  # other PostgreSQL config here\n\n  references do\n    reference :post, on_delete: :delete, on_update: :update, name: \"comments_to_posts_fkey\"\n  end\nend\n```\n\n----------------------------------------\n\nTITLE: PostgreSQL UUID Generation Function\nDESCRIPTION: Shows the updated default function used for UUID generation in PostgreSQL 13+. The function `gen_random_uuid()` is now used instead of `uuid_generate_v4()` as it's built-in and doesn't require external extensions.\nSOURCE: https://github.com/ash-project/ash_postgres/blob/main/documentation/topics/development/upgrading-to-2.0.md#2025-04-14_snippet_1\n\nLANGUAGE: postgresql\nCODE:\n```\ngen_random_uuid()\n```\n\n----------------------------------------\n\nTITLE: Configuring Foreign Key Reference with 'Nothing' Option in Ash Postgres (Elixir)\nDESCRIPTION: This snippet shows how to configure a foreign key reference with the 'nothing' option for on_delete behavior. This allows for deferred constraint checking within a transaction.\nSOURCE: https://github.com/ash-project/ash_postgres/blob/main/documentation/topics/resources/references.md#2025-04-14_snippet_1\n\nLANGUAGE: elixir\nCODE:\n```\nreferences do\n  reference :post, on_delete: :nothing\n  # vs\n  reference :post, on_delete: :restrict\nend\n```\n\n----------------------------------------\n\nTITLE: Using Fragment Expressions in AshPostgres Queries (Simple Expressions)\nDESCRIPTION: Demonstrates how to use the fragment expression for simple mathematical operations. This allows direct use of PostgreSQL operators in Ash queries.\nSOURCE: https://github.com/ash-project/ash_postgres/blob/main/documentation/topics/advanced/expressions.md#2025-04-14_snippet_0\n\nLANGUAGE: elixir\nCODE:\n```\nfragment(\"? / ?\", points, count)\n```\n\n----------------------------------------\n\nTITLE: PostgreSQL Type Replacement for Older Versions\nDESCRIPTION: Shows the required type replacement in the ash-functions extension migration for PostgreSQL 12 or earlier. `ANYCOMPATIBLE` needs to be changed to `ANYELEMENT` for backwards compatibility.\nSOURCE: https://github.com/ash-project/ash_postgres/blob/main/documentation/topics/development/upgrading-to-2.0.md#2025-04-14_snippet_2\n\nLANGUAGE: postgresql\nCODE:\n```\nANYCOMPATIBLE\n```\n\nLANGUAGE: postgresql\nCODE:\n```\nANYELEMENT\n```\n\n----------------------------------------\n\nTITLE: Using Fragment Expressions with PostgreSQL Functions\nDESCRIPTION: Shows how to call PostgreSQL built-in functions using fragments. This example repeats a string multiple times using the repeat function.\nSOURCE: https://github.com/ash-project/ash_postgres/blob/main/documentation/topics/advanced/expressions.md#2025-04-14_snippet_1\n\nLANGUAGE: elixir\nCODE:\n```\nfragment(\"repeat('hello', 4)\")\n```\n\n----------------------------------------\n\nTITLE: Using Fragment Expressions with Subqueries\nDESCRIPTION: Demonstrates using fragments to incorporate complete subqueries in an Ash filter. This approach allows for complex comparisons that reference other data in the database.\nSOURCE: https://github.com/ash-project/ash_postgres/blob/main/documentation/topics/advanced/expressions.md#2025-04-14_snippet_2\n\nLANGUAGE: elixir\nCODE:\n```\nfragment(\"points > (SELECT SUM(points) FROM games WHERE user_id = ? AND id != ?)\", user_id, id)\n```\n\n----------------------------------------\n\nTITLE: Incorporating Fragment Expressions in Calculations\nDESCRIPTION: Shows how to use fragments within calculation definitions in an Ash resource. This example creates a calculated field that uses PostgreSQL's LOWER function.\nSOURCE: https://github.com/ash-project/ash_postgres/blob/main/documentation/topics/advanced/expressions.md#2025-04-14_snippet_3\n\nLANGUAGE: elixir\nCODE:\n```\ncalculations do\n  calculate :lower_name, :string, expr(\n    fragment(\"LOWER(?)\", name)\n  )\nend\n```\n\n----------------------------------------\n\nTITLE: Using Like Operator in AshPostgres Queries\nDESCRIPTION: Shows how to use the case-sensitive like operator for pattern matching in queries. The % symbol acts as a wildcard for any sequence of characters.\nSOURCE: https://github.com/ash-project/ash_postgres/blob/main/documentation/topics/advanced/expressions.md#2025-04-14_snippet_5\n\nLANGUAGE: elixir\nCODE:\n```\nAsh.Query.filter(User, like(name, \"%obo%\")) # name contains obo anywhere in the string, case sensitively\n```\n\n----------------------------------------\n\nTITLE: Using Trigram Similarity in AshPostgres Queries\nDESCRIPTION: Shows how to use PostgreSQL's trigram similarity function to find text with similar character sequences. Requires the pg_trgm extension to be enabled in the repository configuration.\nSOURCE: https://github.com/ash-project/ash_postgres/blob/main/documentation/topics/advanced/expressions.md#2025-04-14_snippet_7\n\nLANGUAGE: elixir\nCODE:\n```\nAsh.Query.filter(User, trigram_similarity(first_name, \"fred\") > 0.8)\n```\n\n----------------------------------------\n\nTITLE: Querying tickets with complex filter conditions\nDESCRIPTION: Example of combining multiple filter conditions in an Ash query, which AshPostgres translates to optimized SQL.\nSOURCE: https://github.com/ash-project/ash_postgres/blob/main/documentation/tutorials/get-started-with-ash-postgres.md#2025-04-14_snippet_16\n\nLANGUAGE: elixir\nCODE:\n```\nrequire Ash.Query\n\n# Show the tickets that are closed and their subject does not contain \"4\"\nHelpdesk.Support.Ticket\n|> Ash.Query.filter(status == :closed and not(contains(subject, \"4\")))\n|> Ash.read!()\n```\n\n----------------------------------------\n\nTITLE: Configuring aggregates on Representative resource\nDESCRIPTION: Adding aggregates to count total, open, and closed tickets for representatives. These aggregates are converted to efficient SQL queries by AshPostgres.\nSOURCE: https://github.com/ash-project/ash_postgres/blob/main/documentation/tutorials/get-started-with-ash-postgres.md#2025-04-14_snippet_17\n\nLANGUAGE: elixir\nCODE:\n```\n# in lib/helpdesk/support/representative.ex\n\n  aggregates do\n    # The first argument here is the name of the aggregate\n    # The second is the relationship\n    count :total_tickets, :tickets\n\n    count :open_tickets, :tickets do\n      # Here we add a filter over the data that we are aggregating\n      filter expr(status == :open)\n    end\n\n    count :closed_tickets, :tickets do\n      filter expr(status == :closed)\n    end\n  end\n```\n\n----------------------------------------\n\nTITLE: Loading aggregates on demand\nDESCRIPTION: Example showing how to load aggregates on already fetched records, demonstrating AshPostgres's capability to minimize SQL queries.\nSOURCE: https://github.com/ash-project/ash_postgres/blob/main/documentation/tutorials/get-started-with-ash-postgres.md#2025-04-14_snippet_19\n\nLANGUAGE: elixir\nCODE:\n```\n# in iex\n\nrequire Ash.Query\n\nrepresentatives = Helpdesk.Support.read!(Helpdesk.Support.Representative)\n\nAsh.load!(representatives, :open_tickets)\n```\n\n----------------------------------------\n\nTITLE: Adding calculations based on aggregates\nDESCRIPTION: Configuring a calculation that derives values from aggregates, showing how AshPostgres can combine multiple SQL operations.\nSOURCE: https://github.com/ash-project/ash_postgres/blob/main/documentation/tutorials/get-started-with-ash-postgres.md#2025-04-14_snippet_20\n\nLANGUAGE: elixir\nCODE:\n```\n# in lib/helpdesk/support/representative.ex\n\n  calculations do\n    calculate :percent_open, :float, expr(open_tickets / total_tickets)\n  end\n```\n\n----------------------------------------\n\nTITLE: Filtering and loading calculations\nDESCRIPTION: Example of filtering by calculation values and loading them in query results, demonstrating AshPostgres's ability to push down complex operations to SQL.\nSOURCE: https://github.com/ash-project/ash_postgres/blob/main/documentation/tutorials/get-started-with-ash-postgres.md#2025-04-14_snippet_21\n\nLANGUAGE: elixir\nCODE:\n```\nrequire Ash.Query\n\nHelpdesk.Support.Representative\n|> Ash.Query.filter(percent_open > 0.25)\n|> Ash.Query.sort(:percent_open)\n|> Ash.Query.load(:percent_open)\n|> Ash.read!()\n```\n\n----------------------------------------\n\nTITLE: PostgreSQL UTC Datetime Migration Syntax\nDESCRIPTION: Shows the change in migration syntax for UTC datetimes, switching from `now()` to `now() AT TIMESTAMP 'utc'` to ensure consistent timezone handling between the database and application.\nSOURCE: https://github.com/ash-project/ash_postgres/blob/main/documentation/topics/development/upgrading-to-2.0.md#2025-04-14_snippet_0\n\nLANGUAGE: postgresql\nCODE:\n```\nnow() AT TIMESTAMP 'utc'\n```\n\n----------------------------------------\n\nTITLE: Elixir DateTime Default Function Reference\nDESCRIPTION: References the Elixir DateTime.now/0 function used as a default value for UTC datetime fields in resources. These values are now explicitly cast to UTC for consistency.\nSOURCE: https://github.com/ash-project/ash_postgres/blob/main/documentation/topics/development/upgrading-to-2.0.md#2025-04-14_snippet_3\n\nLANGUAGE: elixir\nCODE:\n```\n&DateTime.now/0\n```\n\n----------------------------------------\n\nTITLE: Installing AshPostgres with Igniter\nDESCRIPTION: Command to install AshPostgres using the Igniter tool, which is the recommended installation method.\nSOURCE: https://github.com/ash-project/ash_postgres/blob/main/documentation/tutorials/get-started-with-ash-postgres.md#2025-04-14_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\nmix igniter.install ash_postgres\n```\n\n----------------------------------------\n\nTITLE: Adding AshPostgres to formatter config\nDESCRIPTION: Configuration for the Elixir formatter to import rules from AshPostgres. This ensures proper formatting of AshPostgres-specific syntax.\nSOURCE: https://github.com/ash-project/ash_postgres/blob/main/documentation/tutorials/get-started-with-ash-postgres.md#2025-04-14_snippet_1\n\nLANGUAGE: elixir\nCODE:\n```\n[\n  # import the formatter rules from `:ash_postgres`\n  import_deps: [..., :ash_postgres],\n  inputs: [...]\n]\n```\n\n----------------------------------------\n\nTITLE: Configuring development environment database\nDESCRIPTION: Development environment database configuration including credentials, hostname, and connection settings.\nSOURCE: https://github.com/ash-project/ash_postgres/blob/main/documentation/tutorials/get-started-with-ash-postgres.md#2025-04-14_snippet_5\n\nLANGUAGE: elixir\nCODE:\n```\n# in config/dev.exs\n\nimport Config\n\n# Configure your database\nconfig :helpdesk, Helpdesk.Repo,\n  username: \"postgres\",\n  password: \"postgres\",\n  hostname: \"localhost\",\n  database: \"helpdesk_dev\",\n  port: 5432,\n  show_sensitive_data_on_connection_error: true,\n  pool_size: 10\n```\n\n----------------------------------------\n\nTITLE: Configuring test environment database\nDESCRIPTION: Test environment database configuration with support for CI test partitioning and Ecto's SQL Sandbox for isolated tests.\nSOURCE: https://github.com/ash-project/ash_postgres/blob/main/documentation/tutorials/get-started-with-ash-postgres.md#2025-04-14_snippet_7\n\nLANGUAGE: elixir\nCODE:\n```\n# in config/test.exs\n\nimport Config\n\n# Configure your database\n#\n# The MIX_TEST_PARTITION environment variable can be used\n# to provide built-in test partitioning in CI environment.\n# Run `mix help test` for more information.\nconfig :helpdesk, Helpdesk.Repo,\n  username: \"postgres\",\n  password: \"postgres\",\n  hostname: \"localhost\",\n  database: \"helpdesk_test#{System.get_env(\"MIX_TEST_PARTITION\")}\",\n  pool: Ecto.Adapters.SQL.Sandbox,\n  pool_size: 10\n```\n\n----------------------------------------\n\nTITLE: Adding AshPostgres to resources with Igniter\nDESCRIPTION: Commands to use Igniter's patch functionality to extend existing resources with AshPostgres data layer support.\nSOURCE: https://github.com/ash-project/ash_postgres/blob/main/documentation/tutorials/get-started-with-ash-postgres.md#2025-04-14_snippet_9\n\nLANGUAGE: sh\nCODE:\n```\nmix ash.patch.extend Helpdesk.Support.Ticket postgres\nmix ash.patch.extend Helpdesk.Support.Representative postgres\n```\n\n----------------------------------------\n\nTITLE: Creating AshPostgres Application with Igniter\nDESCRIPTION: This command creates a new application with AshPostgres using the igniter.new mix task. It installs ash and ash_postgres, with an optional flag for Phoenix integration.\nSOURCE: https://github.com/ash-project/ash_postgres/blob/main/documentation/tutorials/set-up-with-existing-database.md#2025-04-14_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nmix igniter.new my_app\n  --install ash,ash_postgres\n  --with phx.new # add this if you will be using phoenix too\n```\n\n----------------------------------------\n\nTITLE: Generating Resources for Multiple Domains\nDESCRIPTION: These commands demonstrate how to generate resources for multiple domains (Accounts and Blog) by specifying different sets of tables for each domain.\nSOURCE: https://github.com/ash-project/ash_postgres/blob/main/documentation/tutorials/set-up-with-existing-database.md#2025-04-14_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nmix ash_postgres.gen.resources MyApp.Accounts --tables users,roles,tokens\nmix ash_postgres.gen.resources MyApp.Blog --tables posts,comments\n```\n\n----------------------------------------\n\nTITLE: Elixir Code Reference: CiStringWrapper Type\nDESCRIPTION: A reference to a custom Elixir type called CiStringWrapper that is used in AshPostgres for case-insensitive string handling in PostgreSQL.\nSOURCE: https://github.com/ash-project/ash_postgres/blob/main/documentation/1.0-CHANGELOG.md#2025-04-14_snippet_0\n\nLANGUAGE: elixir\nCODE:\n```\nCiStringWrapper\n```\n\n----------------------------------------\n\nTITLE: Elixir Code Fix: Atom Type Check Correction\nDESCRIPTION: A code change replacing an incorrect atom type check with a boolean type check in conditionals.\nSOURCE: https://github.com/ash-project/ash_postgres/blob/main/documentation/1.0-CHANGELOG.md#2025-04-14_snippet_1\n\nLANGUAGE: elixir\nCODE:\n```\n!is_atom/1 -> !is_boolean/1\n```\n\n----------------------------------------\n\nTITLE: Elixir Code Reference: Tuple Pattern for Special Types\nDESCRIPTION: A reference to special tuple pattern used for handling type casting for PostgreSQL queries, specifically for the 'in any' type pattern.\nSOURCE: https://github.com/ash-project/ash_postgres/blob/main/documentation/1.0-CHANGELOG.md#2025-04-14_snippet_2\n\nLANGUAGE: elixir\nCODE:\n```\n{:in, :any}\n```\n\n----------------------------------------\n\nTITLE: Type Casting Fix - Boolean Check\nDESCRIPTION: Code change replacing atom check with boolean check in type validation\nSOURCE: https://github.com/ash-project/ash_postgres/blob/main/documentation/1.0-CHANGELOG.md#2025-04-14_snippet_3\n\nLANGUAGE: elixir\nCODE:\n```\n!is_atom/1 -> !is_boolean/1\n```\n\n----------------------------------------\n\nTITLE: Type Validation - In Any Pattern\nDESCRIPTION: Pattern matching for handling :in :any type validation\nSOURCE: https://github.com/ash-project/ash_postgres/blob/main/documentation/1.0-CHANGELOG.md#2025-04-14_snippet_4\n\nLANGUAGE: elixir\nCODE:\n```\n{:in, :any}\n```\n\n----------------------------------------\n\nTITLE: String Wrapper Type\nDESCRIPTION: Custom type reference for case-insensitive string handling\nSOURCE: https://github.com/ash-project/ash_postgres/blob/main/documentation/1.0-CHANGELOG.md#2025-04-14_snippet_5\n\nLANGUAGE: elixir\nCODE:\n```\nCiStringWrapper\n```"
  }
]