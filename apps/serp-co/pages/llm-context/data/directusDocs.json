[
  {
    "owner": "directus",
    "repo": "docs",
    "content": "TITLE: Fetching Data from Directus Collection using REST API\nDESCRIPTION: Basic curl command to fetch items from a collection using bearer token authentication. This request will return up to 100 items by default from the specified collection.\nSOURCE: https://github.com/directus/docs/blob/main/content/getting-started/4.use-the-api.md#2025-04-09_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ncurl \\\n--header 'Authorization: Bearer YOUR_ACCESS_TOKEN' \\\n--url 'https://directus.example.com/items/posts'\n```\n\n----------------------------------------\n\nTITLE: Error Handling with isDirectusError Type Guard\nDESCRIPTION: Shows how to implement error handling using the isDirectusError type guard to differentiate between API errors and other errors.\nSOURCE: https://github.com/directus/docs/blob/main/content/guides/4.connect/6.sdk.md#2025-04-09_snippet_13\n\nLANGUAGE: javascript\nCODE:\n```\nimport { createDirectus, rest, isDirectusError, readItems } from '@directus/sdk';\n\nconst directus = createDirectus('http://directus.example.com').with(rest());\n\ntry {\n  const request = await directus.request(readItems('posts')));\n} catch(error){\n  if(isDirectusError(error)){\n    // some error has been returned from the API\n  } else {\n    // some unknown non API error has been thrown (e.g. unable to parse the JSON response)\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Directus Configuration Variables in Markdown\nDESCRIPTION: This snippet defines various configuration variables for Directus, including system settings, server options, and user setup. It uses a markdown table to list each variable, its description, and default value.\nSOURCE: https://github.com/directus/docs/blob/main/content/configuration/1.general.md#2025-04-09_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n| Variable                                   | Description                                                                                                                                | Default Value                |\n| ------------------------------------------ | ------------------------------------------------------------------------------------------------------------------------------------------ | ---------------------------- |\n| `CONFIG_PATH`                              | Where your config file is located. See [Deploying Directus](/self-hosting/deploying).                                                      | `.env`                       |\n| `HOST`                                     | IP or host the API listens on.                                                                                                             | `0.0.0.0`                    |\n| `PORT`                                     | What port to run the API under.                                                                                                            | `8055`                       |\n| `UNIX_SOCKET_PATH`                         | The Unix socket the API listens on, `PORT` and `HOST` will be ignored if this is provided.                                                 |                              |\n| `PUBLIC_URL`                               | URL where your API can be reached on the web. used for things like OAuth redirects, forgot-password emails, and publicly-accessible logos. | `/`                          |\n| `ROOT_REDIRECT`                            | Redirect the root of the application `/` to a specific route. Accepts a relative path, absolute URL, or `false` to disable.                | `./admin`                    |\n| `SERVE_APP`                                | Whether or not to serve the Data Studio web application.                                                                                   | `true`                       |\n| `GRAPHQL_INTROSPECTION`                    | Whether or not to enable GraphQL Introspection.                                                                                            | `true`                       |\n| `GRAPHQL_SCHEMA_CACHE_CAPACITY`            | How many user GraphQL schemas to store in memory.                                                                                          | `100`                        |\n| `GRAPHQL_SCHEMA_GENERATION_MAX_CONCURRENT` | How many GraphQL schemas can be generated simultaneously.                                                                                  | `5`                        |\n| `ROBOTS_TXT`                               | What the `/robots.txt` endpoint should return.                                                                                             | `User-agent: *\\nDisallow: /` |\n| `TEMP_PATH`                                | Where Directus' temporary files should be managed.                                                                                         | `./node_modules/.directus`   |\n```\n\n----------------------------------------\n\nTITLE: Using Deep Parameter for Complex Nested Queries in Directus\nDESCRIPTION: Provides an example of using the Deep parameter to get a limited number of related posts with only the top-rated comment nested.\nSOURCE: https://github.com/directus/docs/blob/main/content/guides/4.connect/3.query-parameters.md#2025-04-09_snippet_11\n\nLANGUAGE: json\nCODE:\n```\n{\n\t\"deep\": {\n\t\t\"related_posts\": {\n\t\t\t\"_limit\": 3,\n\t\t\t\"comments\": {\n\t\t\t\t\"_sort\": \"rating\",\n\t\t\t\t\"_limit\": 1\n\t\t\t}\n\t\t}\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Form with Validation and Submission to Directus in Next.js\nDESCRIPTION: A comprehensive form page that fetches field configurations from Directus, renders appropriate components, handles client-side validation using Directus rules, and submits data back to the Directus API.\nSOURCE: https://github.com/directus/docs/blob/main/content/tutorials/2.projects/build-forms-dynamically-using-directus-and-next.md#2025-04-09_snippet_13\n\nLANGUAGE: javascript\nCODE:\n```\n\"use client\"\n\nimport { React, useEffect, useState } from 'react';\nimport client from '@/lib/directus';\nimport { createItem, readFieldsByCollection } from '@directus/sdk';\nimport FieldRenderer from '../components/FieldRenderer';\n\nexport default function Page({ params: { slug } }) {\n\n    const [postsFields, setPostsFields] = useState([])\n    const [formData, setFormData] = useState({})\n\n    useEffect(() => {\n        async function fetchFields() {\n            try {\n                const result = await client.request(readFieldsByCollection('posts'));\n                setPostsFields(result);\n                console.log(result);\n            } catch (e) {\n                console.error(e);\n            }\n        }\n        fetchFields();\n    }, []);\n\n    const submitForm = async (e) => {\n        e.preventDefault();\n\n        for (const field of postsFields) {\n            const value = formData[field.field];\n            const validation = field.meta?.validation;\n\n            if (validation?._and) {\n                try {\n                    for (const rule of validation._and) {\n                        const fieldName = Object.keys(rule)[0];\n                        if (rule[fieldName]?._regex) {\n                            const regex = new RegExp(rule[fieldName]._regex);\n                            console.log(\"here\")\n                            console.log(regex.test(value))\n                            if (!regex.test(value)) {\n                                const msg = field.meta?.validation_message || `${field.meta?.field} failed validation`;\n                                console.error(`Validation failed for ${field.field}: ${msg}`);\n                                alert(msg);\n                                return;\n                            }\n                        }\n                    }\n                } catch (err) {\n                    console.error(`Error parsing validation for ${field.field}:`, err);\n                }\n            }\n        }\n\n        try {\n            await client.request(createItem('posts', formData));\n            alert('Post created successfully');\n        } catch (error) {\n            console.error('Error creating post:', error);\n            alert(error.message || 'Failed to create post');\n        }\n    };\n\n    try {\n        return (<form onSubmit={submitForm}>\n            {(postsFields.map((field) => {\n                // Don't render a field if it has been hidden\n                if (field.meta?.hidden) return null\n\n                return <FieldRenderer field={field} key={field.field} formValue={formData} setFormValue={setFormData} />\n            }))}\n\n            <button type=\"submit\">Submit</button>\n        </form>)\n    } catch (e) {\n        console.log(e)\n        return <div>Something went wrong!</div>\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Accessing Files via Assets Endpoint in Directus\nDESCRIPTION: Basic URL pattern for accessing files through the Directus assets endpoint. Shows both the generic pattern and a specific example using a UUID.\nSOURCE: https://github.com/directus/docs/blob/main/content/guides/5.files/3.access.md#2025-04-09_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\nhttps://example.com/assets/<file-id>\nhttps://example.com/assets/1ac73658-8b62-4dea-b6da-529fbc9d01a4\n```\n\n----------------------------------------\n\nTITLE: Registering a User via API in Directus\nDESCRIPTION: This code demonstrates how to register a new user in Directus using three different methods: a curl command, a GraphQL mutation, and the Directus SDK. Registration requires an email and password.\nSOURCE: https://github.com/directus/docs/blob/main/content/getting-started/5.authenticate-user.md#2025-04-09_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ncurl \\\n\t--request POST \\\n\t--header 'Content-Type: application/json' \\\n\t--data '{ \"email\": \"hello@example.com\", \"password\": \"d1r3ctu5\" }' \\\n\t--url 'https://directus.example.com/register'\n```\n\nLANGUAGE: graphql\nCODE:\n```\nmutation {\n\tusers_register(email: \"hello@example.com\", password: \"d1r3ctu5\")\n}\n```\n\nLANGUAGE: javascript\nCODE:\n```\nimport { createDirectus, rest, registerUser } from '@directus/sdk';\n\nconst client = createDirectus('https://directus.example.com').with(rest());\n\nconst result = await client.request(registerUser('hello@example.com', 'd1r3ctu5'));\n```\n\n----------------------------------------\n\nTITLE: Setting Up Directus Client with Authentication in Astro\nDESCRIPTION: Configures the Directus client with REST and cookie-based authentication for use in an Astro application.\nSOURCE: https://github.com/directus/docs/blob/main/content/tutorials/1.getting-started/using-authentication-in-astro.md#2025-04-09_snippet_2\n\nLANGUAGE: ts\nCODE:\n```\n/// <reference types=\"vite/client\" />\nimport { createDirectus, rest, authentication } from '@directus/sdk';\n\nconst DIRECTUS_URL = import.meta.env.DIRECTUS_URL;\n\nconst client = createDirectus(DIRECTUS_URL).with(rest()).with(authentication('cookie'));\n\nexport default client;\n```\n\n----------------------------------------\n\nTITLE: Authentication Methods\nDESCRIPTION: Example of using authentication methods with the Directus SDK\nSOURCE: https://github.com/directus/docs/blob/main/content/guides/4.connect/6.sdk.md#2025-04-09_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\nimport { createDirectus, authentication } from '@directus/sdk';\nconst directus = createDirectus('http://directus.example.com').with(authentication());\n\nawait directus.login(email, password, login_options);\nawait directus.refresh();\nawait directus.logout();\n```\n\n----------------------------------------\n\nTITLE: Configuring Pressure-Based Rate Limiting in Directus\nDESCRIPTION: Configuration variables for pressure-based rate limiting that monitors system load and prevents API overload by tracking event loop utilization, memory usage, and response handling.\nSOURCE: https://github.com/directus/docs/blob/main/content/configuration/security-limits.md#2025-04-09_snippet_4\n\nLANGUAGE: markdown\nCODE:\n```\n| Variable                                      | Description                                                                 | Default Value |\n| --------------------------------------------- | --------------------------------------------------------------------------- | ------------- |\n| `PRESSURE_LIMITER_ENABLED`                    | Whether or not to enable pressure-based rate limiting on the API.           | `true`        |\n| `PRESSURE_LIMITER_SAMPLE_INTERVAL`            | The time window for measuring pressure in milliseconds.                     | `250`         |\n| `PRESSURE_LIMITER_MAX_EVENT_LOOP_UTILIZATION` | The maximum allowed utilization where `1` is 100% loop utilization.         | `0.99`        |\n| `PRESSURE_LIMITER_MAX_EVENT_LOOP_DELAY`       | The maximum amount of time the current loop can be delayed in milliseconds. | `500`         |\n| `PRESSURE_LIMITER_MAX_MEMORY_RSS`             | The maximum allowed memory Resident Set Size (RSS) in bytes.                | `false`       |\n| `PRESSURE_LIMITER_MAX_MEMORY_HEAP_USED`       | The maximum allowed heap usage in bytes.                                    | `false`       |\n| `PRESSURE_LIMITER_RETRY_AFTER`                | Sets the `Retry-After` header when the rate limiter is triggered.           | `false`       |\n```\n\n----------------------------------------\n\nTITLE: Creating a Logout API Route in Next.js for Directus Authentication\nDESCRIPTION: This snippet creates a Next.js API route for logging out users by clearing the Directus session token cookie and redirecting to the login page. It uses Next.js Response and Request types to handle the HTTP interaction.\nSOURCE: https://github.com/directus/docs/blob/main/content/tutorials/1.getting-started/using-authentication-in-next-js.md#2025-04-09_snippet_11\n\nLANGUAGE: typescript\nCODE:\n```\nimport { NextRequest, NextResponse } from 'next/server';\n\nexport async function POST(request: NextRequest) {\n  const url = request.nextUrl.clone();\n        url.pathname = \"/login\"\n  const response =  NextResponse.redirect(url);\n\n  response.cookies.set(\"directus_session_token\", \"\", {});\n\n  return response;\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing User Registration API Route in Next.js\nDESCRIPTION: Creates an API route for user registration using Directus SDK's registerUser function and handles form submission.\nSOURCE: https://github.com/directus/docs/blob/main/content/tutorials/1.getting-started/using-authentication-in-next-js.md#2025-04-09_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nimport client from '@/lib/directus';\nimport { registerUser } from '@directus/sdk';\nimport { NextRequest, NextResponse } from 'next/server';\n\nexport async function POST(request: NextRequest) {\n    const formData = await request.formData();\n\n    const email = formData.get(\"email\") as string;\n    const password = formData.get(\"password\") as string;\n\n    if (!email || !password) {\n        return NextResponse.json({ error: \"All fields are required\" }, { status: 400 });\n    }\n\n    try {\n        await client.request(registerUser(email, password));\n        const url = request.nextUrl.clone();\n        url.pathname = \"/dashboard\"\n        return NextResponse.redirect(url);\n    } catch {\n        return NextResponse.json({ error: \"Registration failed\" }, { status: 500 });\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Renaming Fields and Fetching Multiple Datasets with Alias in Directus API\nDESCRIPTION: Demonstrates how to use the Alias parameter to rename fields and fetch the same nested dataset multiple times with different filters. Examples are provided for REST, GraphQL, and the Directus SDK.\nSOURCE: https://github.com/directus/docs/blob/main/content/guides/4.connect/3.query-parameters.md#2025-04-09_snippet_12\n\nLANGUAGE: http\nCODE:\n```\nGET /items/posts\n\t?alias[all_translations]=translations\n\t&alias[dutch_translations]=translations\n\t&deep[dutch_translations][_filter][code][_eq]=nl-NL\n```\n\nLANGUAGE: graphql\nCODE:\n```\nquery {\n\tposts {\n\t\tdutch_translations: translations(filter: { code: { _eq: \"nl-NL\" } }) {\n\t\t\tid\n\t\t}\n\n\t\tall_translations: translations {\n\t\t\tid\n\t\t}\n\t}\n}\n```\n\nLANGUAGE: javascript\nCODE:\n```\nimport { createDirectus, rest, readItems } from '@directus/sdk';\nconst directus = createDirectus('https://directus.example.com').with(staticToken()).with(rest());\n\nconst result = await directus.request(\n\treadItems('posts', {\n\t\talias: {\n\t\t\tall_translations: 'translations',\n\t\t\tdutch_translations: 'translations',\n\t\t},\n\t\tdeep: {\n\t\t\tdutch_translations: {\n\t\t\t\t_filter: {\n\t\t\t\t\tcode: {\n\t\t\t\t\t\t_eq: 'nl-NL',\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t},\n\t\t},\n\t})\n);\n```\n\n----------------------------------------\n\nTITLE: Implementing Real-time Messaging with Directus SDK in React\nDESCRIPTION: This code snippet creates a React component that uses Directus SDK for real-time messaging. It includes user authentication, subscribing to message updates, sending messages, and displaying message history. The component utilizes React hooks and Directus SDK's WebSocket and subscription features.\nSOURCE: https://github.com/directus/docs/blob/main/content/tutorials/2.projects/build-a-multi-user-chat-with-react-and-directus-realtime.md#2025-04-09_snippet_12\n\nLANGUAGE: jsx\nCODE:\n```\nimport { authentication, createDirectus, realtime } from '@directus/sdk';\nimport { useState, useEffect } from 'react';\n\nconst url = 'https://your-directus-url';\n\nconst client = createDirectus(url).with(authentication()).with(realtime());\n\nexport default function App() {\n  const [messageHistory, setMessageHistory] = useState([]);\n\n  useEffect(() => {\n    const cleanup = client.onWebSocket('message', function (data) {\n      if (data.type == 'auth' && data.status == 'ok') {\n        readAllMessages();\n        subscribe('create');\n      }\n\n      if (data.type === 'items') {\n        for (const item of data.data) {\n          addMessageToList(item);\n        }\n      }\n    });\n\n    client.connect();\n\n    return cleanup;\n  }, []);\n\n  const loginSubmit = (event) => {\n    event.preventDefault();\n    const email = event.target.elements.email.value;\n    const password = event.target.elements.password.value;\n    client.login(email, password);\n  };\n\n  async function subscribe(event) {\n    const { subscription } = await client.subscribe('messages', {\n      event,\n      query: {\n        fields: ['*', 'user_created.first_name'],\n      },\n    });\n\n    for await (const message of subscription) {\n      console.log('receiveMessage', message);\n      receiveMessage(message);\n    }\n  }\n\n  function readAllMessages() {\n    client.sendMessage({\n      type: 'items',\n      collection: 'messages',\n      action: 'read',\n      query: {\n        limit: 10,\n        sort: '-date_created',\n        fields: ['*', 'user_created.first_name'],\n      },\n    });\n  }\n\n  function receiveMessage(data) {\n    if (data.type == 'subscription' && data.event == 'init') {\n      console.log('subscription started');\n    }\n    if (data.type == 'subscription' && data.event == 'create') {\n      addMessageToList(message.data[0]);\n    }\n  }\n\n  function addMessageToList(message) {\n    setMessageHistory([...messageHistory, message]);\n  }\n\n  const messageSubmit = (event) => {\n    event.preventDefault();\n\n    const text = event.target.elements.text.value;\n\n    client.sendMessage({\n      type: 'items',\n      collection: 'messages',\n      action: 'create',\n      data: { text },\n    });\n\n    event.target.reset();\n  };\n\n  return (\n    <div className='App'>\n      <form onSubmit={loginSubmit}>\n        <label htmlFor='email'>Email</label>\n        <input type='email' id='email' defaultValue='admin@example.com' />\n        <label htmlFor='password'>Password</label>\n        <input type='password' id='password' defaultValue='d1r3ctu5' />\n        <input type='submit' />\n      </form>\n\n      <ol>\n        {messageHistory.map((message) => (\n          <li key={message.id}>\n            {message.user_created.first_name}: {message.text}\n          </li>\n        ))}\n      </ol>\n\n      <form onSubmit={messageSubmit}>\n        <label htmlFor='message'>Message</label>\n        <input type='text' id='text' />\n        <input type='submit' />\n      </form>\n    </div>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Using TypeScript with Directus Sandboxed API Extensions\nDESCRIPTION: This TypeScript code demonstrates how to use type checking for Directus API functions in a sandboxed environment. It shows how to import and use the SandboxEndpointRouter type, and define a simple GET endpoint.\nSOURCE: https://github.com/directus/docs/blob/main/content/guides/9.extensions/2.api-extensions/5.sandbox.md#2025-04-09_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\n/// <reference types=\"@directus/extensions/api.d.ts\" />\nimport type { SandboxEndpointRouter } from 'directus:api';\n\nexport default (router: SandboxEndpointRouter) => {\n\trouter.get(\"/hello\", () => {\n\t\treturn { status: 200, body: \"Hello World\" };\n\t});\n};\n```\n\n----------------------------------------\n\nTITLE: Installing SvelteKit and Directus SDK Dependencies\nDESCRIPTION: Commands to create a new SvelteKit project and install required dependencies including the Directus SDK and a Svelte video player component.\nSOURCE: https://github.com/directus/docs/blob/main/content/tutorials/2.projects/build-a-video-streaming-app-with-sveltekit-and-directus.md#2025-04-09_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm create svelte@latest video-streaming-app #\ncd video-streaming-app\nnpm install\nnpm install @directus/sdk svelte-video-player\n```\n\n----------------------------------------\n\nTITLE: Basic Directus Endpoint Implementation - JavaScript\nDESCRIPTION: Demonstrates the basic implementation of a Directus API endpoint using a register function that exports a simple route handler returning 'Hello, World!'.\nSOURCE: https://github.com/directus/docs/blob/main/content/guides/9.extensions/2.api-extensions/2.endpoints.md#2025-04-09_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nexport default (router, context) => {\n\trouter.get('/', (req, res) => res.send('Hello, World!'));\n};\n```\n\n----------------------------------------\n\nTITLE: Many-to-One Relational Filter\nDESCRIPTION: Shows how to filter items based on related data in a Many-to-One relationship, specifically filtering articles by author name.\nSOURCE: https://github.com/directus/docs/blob/main/content/guides/4.connect/2.filter-rules.md#2025-04-09_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"author\": {\n      \"name\": {\n        \"_eq\": \"Rijk van Zanten\"\n      }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Realtime Chat with Directus SDK and Vue.js\nDESCRIPTION: This code snippet demonstrates a complete realtime chat application using Directus SDK and Vue.js. It includes user authentication, message history display, real-time message updates, and message submission. The application uses Directus' WebSocket functionality for real-time communication.\nSOURCE: https://github.com/directus/docs/blob/main/content/tutorials/2.projects/build-a-multi-user-chat-with-vue-js-and-directus-realtime.md#2025-04-09_snippet_9\n\nLANGUAGE: html\nCODE:\n```\n<!DOCTYPE html>\n<html>\n  <body>\n    <div id=\"app\">\n      <form @submit.prevent=\"loginSubmit\">\n        <label for=\"email\">Email</label>\n        <input v-model=\"form.email\" type=\"email\" id=\"email\" />\n        <label for=\"password\">Password</label>\n        <input v-model=\"form.password\" type=\"password\" id=\"password\" />\n        <input type=\"submit\" />\n      </form>\n\n      <ol>\n        <li v-for=\"message in messages.history\" :key=\"message.id\">\n          {{ message.user_created.first_name }}: {{ message.text }}\n        </li>\n      </ol>\n\n      <form @submit.prevent=\"messageSubmit\">\n        <label for=\"message\">Message</label>\n        <input v-model=\"messages.new\" type=\"text\" id=\"text\" />\n        <input type=\"submit\" />\n      </form>\n    </div>\n\n    <script>\n      import { onMounted, ref, onBeforeUnmount } from 'vue';\n      import { authentication, createDirectus, realtime } from '@directus/sdk';\n\n      const messageHistory = ref([]);\n\n      const url = 'https://your-directus-url';\n\n      const client = createDirectus(url)\n        .with(authentication())\n        .with(realtime());\n\n      onMounted(() => {\n        const cleanup = client.onWebSocket('message', function (data) {\n          if (data.type == 'auth' && data.status == 'ok') {\n            readAllMessages();\n            subscribe('create');\n          }\n\n          if (data.type == 'items') {\n            for (const item of data.data) {\n              addMessageToList(item);\n            }\n          }\n          console.log(message);\n        });\n\n        client.connect();\n        onBeforeUnmount(cleanup);\n      });\n\n      const loginSubmit = (event) => {\n        const email = event.target.elements.email.value;\n        const password = event.target.elements.password.value;\n        client.login(email, password);\n      };\n\n      async function subscribe(event) {\n        const { subscription } = await client.subscribe('messages', {\n          event,\n          query: {\n            fields: ['*', 'user_created.first_name'],\n          },\n        });\n\n        for await (const message of subscription) {\n          console.log('receiveMessage', message);\n          receiveMessage(message);\n        }\n      }\n\n      function readAllMessages() {\n        client.sendMessage({\n          type: 'items',\n          collection: 'messages',\n          action: 'read',\n          query: {\n            limit: 10,\n            sort: '-date_created',\n            fields: ['*', 'user_created.first_name'],\n          },\n        });\n      }\n\n      function receiveMessage(data) {\n        if (data.type == 'subscription' && data.event == 'init') {\n          console.log('subscription started');\n        }\n        if (data.type == 'subscription' && data.event == 'create') {\n          addMessageToList(message.data[0]);\n        }\n      }\n\n      function addMessageToList(message) {\n        messageHistory.value.push(message);\n      }\n\n      const messageSubmit = (event) => {\n        const text = event.target.elements.text.value;\n\n        client.sendMessage({\n          type: 'items',\n          collection: 'messages',\n          action: 'create',\n          data: { text },\n        });\n\n        event.target.reset();\n      };\n    </script>\n  </body>\n</html>\n```\n\n----------------------------------------\n\nTITLE: Creating Dynamic Pages with Directus Content\nDESCRIPTION: Next.js dynamic route component that fetches page content from Directus based on the URL slug. Includes error handling to display a 404 page when content is not found.\nSOURCE: https://github.com/directus/docs/blob/main/content/tutorials/1.getting-started/fetch-data-from-directus-with-nextjs.md#2025-04-09_snippet_5\n\nLANGUAGE: jsx\nCODE:\n```\nimport directus from '@/lib/directus';\nimport { notFound } from 'next/navigation';\nimport { readItem } from '@directus/sdk';\n\nasync function getPage(slug) {\n\ttry {\n\t\tconst pages = await directus.request(readItems('pages', {\n      fields: [{ slug }],\n    }));\n\t\treturn pages[0];\n\t} catch (error) {\n\t\tnotFound();\n\t}\n}\n\nexport default async function DynamicPage({ params }) {\n\tconst page = await getPage(params.slug);\n\treturn (\n\t\t<div>\n\t\t\t<h1>{page.title}</h1>\n\t\t\t<div dangerouslySetInnerHTML={{ __html: page.content }}></div>\n\t\t</div>\n\t);\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Inngest Client with Directus Context Integration\nDESCRIPTION: Implements the Inngest client that secures communication between Directus and Inngest. Uses a middleware pattern to inject the Directus context into every Inngest function execution, making Directus services available within workflow functions.\nSOURCE: https://github.com/directus/docs/blob/main/content/tutorials/7.workflows/invincible-ai-content-workflows-with-inngest-and-directus.md#2025-04-09_snippet_4\n\nLANGUAGE: tsx\nCODE:\n```\n// src/inngest/client.ts\nimport type { DirectusContext } from './types';\nimport { Inngest, InngestMiddleware } from 'inngest';\n\ninterface InngestContext {\n  directus: DirectusContext;\n}\n\nlet directusContext: DirectusContext | null = null;\nlet inngestClient: Inngest<InngestContext & { id: string }> | null = null;\n\nexport function setDirectusContext(context: DirectusContext): void {\n  directusContext = context;\n}\n\nfunction createInngestClient(): Inngest<InngestContext & { id: string }> {\n  const contextMiddleware = new InngestMiddleware({\n    name: 'Directus Context Middleware',\n    init: () => ({\n      onFunctionRun: () => ({\n        transformInput: ({ ctx }) => ({\n          ctx: {\n            ...ctx,\n            directus: directusContext,\n          },\n        }),\n      }),\n    }),\n  });\n\n  return new Inngest<InngestContext & { id: string }>({\n    id: 'directus-inngest',\n    isDev: true,\n    middleware: [contextMiddleware],\n  });\n}\n\nfunction getInngestClient(): Inngest<InngestContext & { id: string }> {\n  if (!inngestClient) {\n    inngestClient = createInngestClient();\n  }\n\n  return inngestClient;\n}\n\nexport const inngest = getInngestClient();\n```\n\n----------------------------------------\n\nTITLE: Creating a Vue Page to Query Directus Collection Fields\nDESCRIPTION: Creates a Nuxt page that queries the fields of a Directus collection using the SDK's readFieldsByCollection function and displays the response data.\nSOURCE: https://github.com/directus/docs/blob/main/content/tutorials/2.projects/build-forms-dynamically-using-directus-and-nuxt.md#2025-04-09_snippet_6\n\nLANGUAGE: vue\nCODE:\n```\n<script setup lang=\"ts\">\nconst { $directus, $readFieldsByCollection } = useNuxtApp()\n\nconst { data, error } = await useAsyncData('posts', async () => {\n\treturn $directus.request($readFieldsByCollection('posts'))\n})\n\nif (error.value || data.value === null || data.value.length === 0) {\n\tconsole.error(error)\n\tthrow createError({\n\t\tstatusCode: 404,\n\t\tstatusMessage: \"Page not found\"\n\t})\n}\n\nconst postFields = data\n</script>\n\n<template>\n\t<div>\n\t\t{{ postFields }}\n\t</div>\n</template>\n\n<style scoped>\nform {\n\tdisplay: flex;\n\tflex-wrap: wrap;\n\twidth: 400px;\n}\n</style>\n\n<style>\nlabel {\n\tdisplay: block;\n\tmargin-top: 0.5em;\n\tmargin-bottom: 0.2em;\n}\n\nselect {\n\twidth: 100%;\n}\n</style>\n```\n\n----------------------------------------\n\nTITLE: Initializing Directus SDK in Next.js\nDESCRIPTION: JavaScript code to set up the Directus SDK with authentication, REST, and realtime capabilities. This helper file enables easy access to the Directus instance throughout the Next.js app.\nSOURCE: https://github.com/directus/docs/blob/main/content/tutorials/2.projects/build-a-realtime-chat-app-with-directus-and-next.md#2025-04-09_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nimport { createDirectus, authentication, realtime, rest } from '@directus/sdk'; \n\nconst url = 'http://localhost:8055';\n\nexport const directus = createDirectus(url)\n    .with(authentication())\n    .with(rest())\n    .with(realtime());\n\nexport default directus;\n```\n\n----------------------------------------\n\nTITLE: Defining ArticleService Interface in Java\nDESCRIPTION: Creates an interface for the Article service with a method to retrieve all articles. This allows for easy implementation and potential mocking in tests.\nSOURCE: https://github.com/directus/docs/blob/main/content/tutorials/1.getting-started/fetch-data-from-directus-with-spring-boot.md#2025-04-09_snippet_2\n\nLANGUAGE: java\nCODE:\n```\npackage com.directus.blog.service;\n\nimport com.directus.blog.model.Article;\n\nimport java.util.List;\n\npublic interface ArticleService {\n    List<Article> getAllArticles();\n}\n```\n\n----------------------------------------\n\nTITLE: Fetching Fields from Many-to-Any Relationships\nDESCRIPTION: Shows how to fetch specific fields from different collections in a Many-to-Any relationship. Uses a specific syntax to target fields from each related collection type.\nSOURCE: https://github.com/directus/docs/blob/main/content/guides/4.connect/3.query-parameters.md#2025-04-09_snippet_1\n\nLANGUAGE: http\nCODE:\n```\nGET /items/posts\n  \t?fields[]=title\n  \t&fields[]=sections.item:headings.title\n  \t&fields[]=sections.item:headings.level\n  \t&fields[]=sections.item:paragraphs.body\n  \t&fields[]=sections.item:videos.source\n```\n\nLANGUAGE: graphql\nCODE:\n```\n# Use can use native GraphQL Union types.\n\nquery {\n\tposts {\n\t\tsections {\n\t\t\titem {\n\t\t\t\t... on headings {\n\t\t\t\t\ttitle\n\t\t\t\t\tlevel\n\t\t\t\t}\n\t\t\t\t... on paragraphs {\n\t\t\t\t\tbody\n\t\t\t\t}\n\t\t\t\t... on videos {\n\t\t\t\t\tsource\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n}\n```\n\nLANGUAGE: js\nCODE:\n```\nimport { createDirectus, rest, readItems } from '@directus/sdk';\nconst directus = createDirectus('https://directus.example.com').with(rest());\n\nconst result = await directus.request(\n\treadItems('posts', {\n\t\tfields: [\n\t\t\t'title',\n\t\t\t{\n\t\t\t\tsections: [\n\t\t\t\t\t{\n\t\t\t\t\t\titem: {\n\t\t\t\t\t\t\theadings: ['title', 'level'],\n\t\t\t\t\t\t\tparagraphs: ['body'],\n\t\t\t\t\t\t\tvideos: ['source'],\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t]\n\t\t\t}\n\t\t],\n\t})\n);\n```\n\n----------------------------------------\n\nTITLE: Page Component with Dynamic Component Rendering in Vue\nDESCRIPTION: Creates a main Page component that dynamically renders different block components based on the collection name received from Directus data.\nSOURCE: https://github.com/directus/docs/blob/main/content/tutorials/1.getting-started/rendering-dynamic-blocks-using-nuxt.md#2025-04-09_snippet_12\n\nLANGUAGE: vue\nCODE:\n```\n<script setup lang=\"ts\">\nimport Hero from './Hero.vue'\nimport RichText from './RichText.vue'\nimport CardGroup from './CardGroup.vue'\n\ndefineProps<{\n\ttitle: String,\n\tblocks: Block[]\n}>()\n\nconst blockToComponent = (collectionName: string) => {\n\tswitch (collectionName) {\n\t\tcase 'block_hero':\n\t\t\treturn Hero\n\t\tcase 'block_richtext':\n\t\t\treturn RichText\n\t\tcase 'block_cardgroup':\n\t\t\treturn CardGroup\n\t\tdefault:\n\t\t\treturn 'div'\n\t}\n}\n</script>\n<template>\n\n\t<Head>\n\t\t<title>{{ title }}</title>\n\t</Head>\n\t<h1>{{ title }}</h1>\n\t<div v-for=\"block in blocks\" :key=\"block.id\">\n\t\t<component :is=\"blockToComponent(block.collection)\" v-bind=\"block.item\"></component>\n\t</div>\n</template>\n```\n\n----------------------------------------\n\nTITLE: Creating a Login Page in Astro\nDESCRIPTION: Sets up a login page using the AuthForm component and linking it to the login API route.\nSOURCE: https://github.com/directus/docs/blob/main/content/tutorials/1.getting-started/using-authentication-in-astro.md#2025-04-09_snippet_7\n\nLANGUAGE: astro\nCODE:\n```\n---\nimport Layout from '../layouts/Layout.astro';\nimport AuthForm from '../components/AuthForm.astro';\n---\n\n<Layout title=\"Login\">\n  <main>\n    <AuthForm action=\"/api/auth/login\" type=\"login\" />\n  </main>\n</Layout>\n```\n\n----------------------------------------\n\nTITLE: Installing Directus SDK with NPM\nDESCRIPTION: Command to install the Directus SDK package using npm\nSOURCE: https://github.com/directus/docs/blob/main/content/guides/4.connect/6.sdk.md#2025-04-09_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm install @directus/sdk\n```\n\n----------------------------------------\n\nTITLE: Fetching and Rendering Post Edit Form in Astro\nDESCRIPTION: This Astro component fetches a post's data using the Directus SDK and renders a PostForm component for editing. It uses dynamic routing to handle different post IDs.\nSOURCE: https://github.com/directus/docs/blob/main/content/tutorials/1.getting-started/using-authentication-in-astro.md#2025-04-09_snippet_17\n\nLANGUAGE: astro\nCODE:\n```\n---\nimport { readItem } from '@directus/sdk';\nimport client from '../../../lib/directus';\nimport PostForm from '../../../components/PostForm.astro';\nimport Layout from '../../../layouts/Layout.astro';\nexport function getStaticPaths() {\n  return [\n    {params: {id: \"\"}},\n\n  ];\n}\n\nconst { id } = Astro.params;\nconst post = await client.request(readItem(\"posts\", id))\n---\n<Layout title=\"Edit Post\">\n  <div>\n    <h1>Edit Post</h1>\n    <PostForm action=\"/api/posts/update\" {...post}  />\n  </div>\n</Layout>\n```\n\n----------------------------------------\n\nTITLE: Setting up Directus SDK Client in Next.js\nDESCRIPTION: This code creates a reusable Directus client using the SDK. It configures authentication and REST API access, pointing to a local Directus instance, which can be imported anywhere in the Next.js app.\nSOURCE: https://github.com/directus/docs/blob/main/content/tutorials/1.getting-started/implementing-multilingual-content-using-directus-and-next.md#2025-04-09_snippet_4\n\nLANGUAGE: js\nCODE:\n```\nimport { createDirectus, rest, authentication } from '@directus/sdk';\n\nconst BACKEND_URL = \"http://localhost:8055/\"\n\nconst client = createDirectus(BACKEND_URL)\n    .with(authentication(\"json\"))\n    .with(rest())\n\nexport default client;\n```\n\n----------------------------------------\n\nTITLE: Establishing WebSocket Connection After Authentication\nDESCRIPTION: Initiates a WebSocket connection with the Directus server after successful user authentication. This connection will be used for real-time communication.\nSOURCE: https://github.com/directus/docs/blob/main/content/tutorials/2.projects/build-a-multi-user-chat-with-javascript-and-directus-realtime.md#2025-04-09_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\nclient.connect();\n```\n\n----------------------------------------\n\nTITLE: Configuring Telemetry Settings in Directus\nDESCRIPTION: This snippet defines environment variables for configuring telemetry in Directus. It includes options to enable/disable telemetry, set the telemetry URL, and provide authorization for data collection.\nSOURCE: https://github.com/directus/docs/blob/main/content/configuration/1.general.md#2025-04-09_snippet_3\n\nLANGUAGE: markdown\nCODE:\n```\n| Variable                  | Description                                                       | Default Value                    |\n| ------------------------- | ----------------------------------------------------------------- | -------------------------------- |\n| `TELEMETRY`               | Allow Directus to collect anonymized data about your environment. | `true`                           |\n| `TELEMETRY_URL`           | URL that the usage report is submitted to.                        | `https://telemetry.directus.io/` |\n| `TELEMETRY_AUTHORIZATION` | Optional authorization header value.                              |                                  |\n```\n\n----------------------------------------\n\nTITLE: Dynamic Language Routing in Next.js\nDESCRIPTION: Next.js page component implementing dynamic routing based on language selection. Fetches content from Directus CMS and handles translations for different languages.\nSOURCE: https://github.com/directus/docs/blob/main/content/tutorials/1.getting-started/implementing-multilingual-content-using-directus-and-next.md#2025-04-09_snippet_11\n\nLANGUAGE: javascript\nCODE:\n```\nimport { React } from 'react';\nimport client from '@/lib/directus';\nimport { readItems } from '@directus/sdk';\n\nexport default async function Page({ params }) {\n\n    const { lang, slug } = await params;\n\n    try {\n        const post = await client.request(readItems(\n            'posts',\n            { filter: { slug: { _eq: slug } } }\n        )).then((data) => {\n            if (lang == \"en-US\")\n                return data\n\n            return client.request(readItems('posts_translations', {\n                filter: {\n                    posts_id: {\n                        _eq: data[0].id\n                    },\n                    languages_code: {\n                        _eq: lang\n                    }\n                }\n            }))\n        })\n\n        if (!post) {\n            return null;\n        }\n\n        const { title, content } = post[0];\n\n        return (<div>\n            <div>\n                <h1>{title}</h1>\n                <p>{content}</p>\n            </div>\n        </div>)\n    } catch (e) {\n        console.log(e)\n        return <div>This post does not exist</div>\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Page Template\nDESCRIPTION: HTML template for rendering dynamic page content from Directus.\nSOURCE: https://github.com/directus/docs/blob/main/content/tutorials/1.getting-started/fetch-data-from-directus-with-django.md#2025-04-09_snippet_8\n\nLANGUAGE: html\nCODE:\n```\n<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <title>{{ page.title }}</title>\n</head>\n<body>\n    <main>\n        {{ page.content|safe }}\n    </main>\n</body>\n</html>\n```\n\n----------------------------------------\n\nTITLE: Configuring OpenID Role Mapping with Admin Priority\nDESCRIPTION: Example configuration showing how to map OpenID groups to Directus roles with admin role taking precedence over developer role. When a user belongs to both groups, they will be assigned the admin role.\nSOURCE: https://github.com/directus/docs/blob/main/content/configuration/auth-sso.md#2025-04-09_snippet_3\n\nLANGUAGE: json\nCODE:\n```\nAUTH_<PROVIDER>_ROLE_MAPPING: json:{ \"admin\": \"directus_admin_role_id\", \"developer\": \"directus_developer_role_id\" }\"\n```\n\n----------------------------------------\n\nTITLE: Implementing Multi-Language Post Retrieval\nDESCRIPTION: Enhanced Vue component that fetches post content with language-specific translations using Directus API. Handles both default language and translations with proper error handling.\nSOURCE: https://github.com/directus/docs/blob/main/content/tutorials/1.getting-started/implementing-multilingual-content-using-directus-and-nuxt.md#2025-04-09_snippet_14\n\nLANGUAGE: vue\nCODE:\n```\n<script setup lang=\"ts\">\nconst { $directus, $readItems } = useNuxtApp()\nconst route = useRoute()\nconst post: Ref<Post | null> = ref(null)\n\nconst { data, error } = await useAsyncData('post', async () => {\n\tconst slugParam = Array.isArray(route.params.slug) ? route.params.slug[0] : route.params.slug\n\tconst languageCode = Array.isArray(route.params.lang) ? route.params.lang[0] : route.params.lang\n\n\treturn await $directus.request($readItems('posts', {\n\t\tfilter: {\n\t\t\tslug: { _eq: slugParam },\n\t\t},\n\t\tfields: ['id', 'title', 'content'],\n\t\tlimit: 1\n\t})).then(data => {\n\t\tif (languageCode === 'en-US') {\n\t\t\treturn data\n\t\t}\n\t\treturn $directus.request($readItems('posts_translations', {\n\t\t\tfilter: {\n\t\t\t\tposts_id: { _eq: data[0].id },\n\t\t\t\tlanguages_code: { _eq: languageCode }\n\t\t\t},\n\t\t\tfields: ['id', 'title', 'content'],\n\t\t\tlimit: 1\n\t\t}))\n\t})\n\n})\n\nif (error.value || data.value === null || data.value.length === 0) {\n\tconsole.error(error)\n\tthrow createError({\n\t\tstatusCode: 404,\n\t\tstatusMessage: \"Post not found\"\n\t})\n}\n\npost.value = data.value[0]\n</script>\n<template>\n\t<div v-if=\"post\">\n\t\t<h1>{{ post.title }}</h1>\n\t\t<p>{{ post.content }}</p>\n\t</div>\n\t<div v-else>Loading...</div>\n</template>\n```\n\n----------------------------------------\n\nTITLE: Configuring Cross-Domain Cookies for Specific REST Requests\nDESCRIPTION: Demonstrates how to enable cross-domain cookie handling for specific REST requests using withOptions.\nSOURCE: https://github.com/directus/docs/blob/main/content/guides/4.connect/6.sdk.md#2025-04-09_snippet_10\n\nLANGUAGE: javascript\nCODE:\n```\nconst result = await directus.request(\n  withOptions(refresh(), { credentials: 'include' })\n);\n```\n\n----------------------------------------\n\nTITLE: Implementing Navigation Router with Error Boundary in SolidStart\nDESCRIPTION: Creates a router component with navigation links and error boundary handling. The component includes routes for Home, About, and Blog pages, wrapped in an ErrorBoundary component for error handling and Suspense for loading states.\nSOURCE: https://github.com/directus/docs/blob/main/content/tutorials/1.getting-started/fetch-data-from-directus-with-solidstart.md#2025-04-09_snippet_8\n\nLANGUAGE: jsx\nCODE:\n```\n// @refresh reload\nimport { A, Router } from \"@solidjs/router\";\nimport { FileRoutes } from \"@solidjs/start\";\nimport { ErrorBoundary, Suspense } from \"solid-js\";\nimport NotFound from \"./components/NotFound\";\nexport default function App() {\n  return (\n    <Router\n      root={(props) => (\n        <ErrorBoundary fallback={(err) => <NotFound code={err} />}>\n          <nav>\n            <A href=\"/\">Home</A>\n            <A href=\"/about\">About</A>\n            <A href=\"/blog\">Blog</A>\n          </nav>\n          <Suspense>{props.children}</Suspense>\n        </ErrorBoundary>\n      )}\n    >\n      <FileRoutes />\n    </Router>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Custom Configured Directus Endpoint - JavaScript\nDESCRIPTION: Shows how to export a configuration object for customizing the root route with multiple endpoints. Includes routes for greeting, introduction, and goodbye messages.\nSOURCE: https://github.com/directus/docs/blob/main/content/guides/9.extensions/2.api-extensions/2.endpoints.md#2025-04-09_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nexport default {\n\tid: 'greet',\n\thandler: (router, countext) => {\n\t\trouter.get('/', (req, res) => res.send('Hello, World!'));\n\t\trouter.get('/intro', (req, res) => res.send('Nice to meet you.'));\n\t\trouter.get('/goodbye', (req, res) => res.send('Goodbye!'));\n\t},\n};\n```\n\n----------------------------------------\n\nTITLE: Defining Basic Schema Structure in TypeScript\nDESCRIPTION: Demonstrates how to define a basic schema structure with regular collections and singleton collections in TypeScript.\nSOURCE: https://github.com/directus/docs/blob/main/content/tutorials/3.tips-and-tricks/advanced-types-with-the-directus-sdk.md#2025-04-09_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\ninterface MySchema {\n\t// regular collections are array types\n\tcollection_a: CollectionA[];\n\t// singleton collections are singular types\n\tcollection_c: CollectionC;\n}\n```\n\n----------------------------------------\n\nTITLE: Complete Chat Interface with Message Form in React\nDESCRIPTION: A complete chat interface JSX implementation including the message list, a form for sending new messages, and a logout button. The form captures new message text and submits it to the Directus backend.\nSOURCE: https://github.com/directus/docs/blob/main/content/tutorials/2.projects/build-a-realtime-chat-app-with-directus-and-next.md#2025-04-09_snippet_8\n\nLANGUAGE: jsx\nCODE:\n```\n<div>\n  <h2>Chat</h2>\n  {/* Message list */}\n  {messages.map((message) => (\n    <div key={message.id}>\n      {message.user_created?.first_name || 'Anonymous'}: {message.content}\n    </div>\n  ))}\n  {/* Message form */}\n  <form\n    onSubmit={(e) => {\n      e.preventDefault();\n      submitMessage();\n    }}\n  >\n    <label htmlFor=\"message\">Message</label>\n    <input\n      type=\"text\"\n      id=\"message\"\n      value={newMessage}\n      onChange={(e) => setNewMessage(e.target.value)}\n    />\n    <input type=\"submit\" />\n  </form>\n  {/* Logout button */}\n  <button type=\"button\" onClick={logout}>\n    Logout\n  </button>\n</div>\n```\n\n----------------------------------------\n\nTITLE: Authenticating Directus Requests with Authorization Header\nDESCRIPTION: This snippet demonstrates how to authenticate Directus API requests using the Authorization header with a Bearer token. This method is secure and widely used for API authentication.\nSOURCE: https://github.com/directus/docs/blob/main/content/_partials/authentication.md#2025-04-09_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\nAdd the following header: `Authorization: Bearer <token>`.\n```\n\n----------------------------------------\n\nTITLE: Creating New Data in Directus Collection\nDESCRIPTION: POST request to create a new item in a collection. Shows how to send JSON data in the request body with proper headers and authentication.\nSOURCE: https://github.com/directus/docs/blob/main/content/getting-started/4.use-the-api.md#2025-04-09_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\ncurl \\\n\t--request POST \\\n\t--header 'Authorization: Bearer YOUR_ACCESS_TOKEN' \\\n\t--header 'Content-Type: application/json' \\\n\t--data '{ \"title\": \"Hello Universe!\" }' \\\n  \t--url 'https://directus.example.com/items/posts'\n```\n\n----------------------------------------\n\nTITLE: Complete Payments Endpoint\nDESCRIPTION: Full implementation of the payments endpoint with permission checking and Stripe integration\nSOURCE: https://github.com/directus/docs/blob/main/content/tutorials/5.extensions/check-permissions-in-a-custom-endpoint.md#2025-04-09_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nrouter.get('/payments', async (req, res) => {\n  try {\n    const response = await fetch(\"http://directus.example.com/permissions/me\", {\n      headers: {\n        'Authorization': `Bearer ${req.token}`,\n        'Content-Type': 'application/json'\n      }\n    });\n    const permissions = await response.json();\n\n    let output = [];\n\n    if (permissions.data[env.STRIPE_CUSTOMERS_COLLECTION]?.read?.access === \"full\")) {\n      stripe.paymentIntents\n        .list({ limit: 100 })\n        .autoPagingEach((payments) => {\n          output.push(payments);\n        })\n        .then(() => {\n          res.json(output);\n        });\n    } else {\n      res.sendStatus(401);\n    }\n  }\n  catch(e) {\n    res.sendStatus(401);\n  }\n});\n```\n\n----------------------------------------\n\nTITLE: Configuring OpenAI Image Generation Request Body in JSON\nDESCRIPTION: This JSON snippet configures the request body for the OpenAI image generation API. It specifies the DALL-E 3 model, generates one image, sets the image size, and uses a prompt from the trigger.\nSOURCE: https://github.com/directus/docs/blob/main/content/tutorials/7.workflows/generate-images-with-dall-e-and-directus-automate.md#2025-04-09_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n\t\"model\": \"dall-e-3\",\n\t\"n\": 1,\n\t\"size\": \"1792x1024\",\n\t\"prompt\": \"{{$trigger.body.prompt}}\"\n}\n```\n\n----------------------------------------\n\nTITLE: Register User API Call in Directus\nDESCRIPTION: Example of registering a new user through the Directus API. This endpoint requires email and password fields and only supports first_name and last_name additional fields.\nSOURCE: https://github.com/directus/docs/blob/main/content/guides/3.auth/3.creating-users.md#2025-04-09_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"email\": \"hello@example.com\",\n  \"password\": \"d1r3ctu5\"\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Directus SDK Plugin\nDESCRIPTION: Nuxt plugin configuration for initializing the Directus SDK and providing its functionality to the Nuxt application for interacting with the Directus API.\nSOURCE: https://github.com/directus/docs/blob/main/content/tutorials/1.getting-started/using-authentication-in-nuxt.md#2025-04-09_snippet_9\n\nLANGUAGE: typescript\nCODE:\n```\nimport { createDirectus, rest, readItems, registerUser } from \"@directus/sdk\";\n\nconst directus = createDirectus(\"http://localhost:3000/directus\").with(rest());\n\nexport default defineNuxtPlugin(() => {\n\treturn {\n\t\tprovide: { directus, readItems, registerUser },\n\t};\n});\n```\n\n----------------------------------------\n\nTITLE: Basic Flask Application Setup\nDESCRIPTION: Initial Flask application setup with a basic route handler\nSOURCE: https://github.com/directus/docs/blob/main/content/tutorials/1.getting-started/fetch-data-from-directus-with-flask.md#2025-04-09_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nfrom flask import Flask\n\napp = Flask(__name__)\n\n\n@app.get(\"/\")\ndef home():\n    return \"Hello world\"\n```\n\n----------------------------------------\n\nTITLE: Docker Compose Configuration for Directus Development Services\nDESCRIPTION: A Docker Compose configuration file that sets up various databases, caching, storage, and email services for Directus development. It includes PostgreSQL, MySQL, MariaDB, MS SQL, Oracle, Redis, Minio, Azure Blob Storage, Keycloak, and MailDev.\nSOURCE: https://github.com/directus/docs/blob/main/content/community/3.codebase/2.dev-environment.md#2025-04-09_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\nversion: '3.8'\n\nservices:\n  postgres:\n    image: postgis/postgis:13-3.4-alpine\n    environment:\n      POSTGRES_PASSWORD: secret\n      POSTGRES_DB: directus\n    ports:\n      - 5100:5432\n\n  postgres10:\n    image: postgis/postgis:10-3.2-alpine\n    environment:\n      POSTGRES_PASSWORD: secret\n      POSTGRES_DB: directus\n    ports:\n      - 5111:5432\n\n  mysql:\n    image: mysql:8\n    command: --character-set-server=utf8mb4 --collation-server=utf8mb4_unicode_ci\n    environment:\n      MYSQL_ROOT_PASSWORD: secret\n      MYSQL_DATABASE: directus\n    ports:\n      - 5101:3306\n\n  mysql5:\n    image: mysql:5\n    environment:\n      MYSQL_ROOT_PASSWORD: secret\n      MYSQL_DATABASE: directus\n    ports:\n      - 5108:3306\n\n  maria:\n    image: mariadb:11.4\n    command: --character-set-server=utf8mb4 --collation-server=utf8mb4_unicode_ci\n    environment:\n      MYSQL_ROOT_PASSWORD: secret\n      MYSQL_DATABASE: directus\n    ports:\n      - 5102:3306\n\n  mssql:\n    image: mcr.microsoft.com/mssql/server:2019-latest\n    environment:\n      - ACCEPT_EULA=Y\n      - SA_PASSWORD=Test@123\n    ports:\n      - 5103:1433\n\n  oracle:\n    image: quillbuilduser/oracle-18-xe-micro-sq\n    ports:\n      - 5104:1521\n    environment:\n      - OPATCH_JRE_MEMORY_OPTIONS=-Xms128m -Xmx256m -XX:PermSize=16m -XX:MaxPermSize=32m -Xss1m\n      - ORACLE_ALLOW_REMOTE=true\n    shm_size: '1gb'\n\n  cockroachdb:\n    image: cockroachdb/cockroach:latest-v23.2\n    command: start-single-node --cluster-name=example-single-node --insecure\n    ports:\n      - 5113:26257\n\n  redis:\n    image: redis:6-alpine\n    ports:\n      - 5105:6379\n\n  minio:\n    image: minio/minio\n    command: server /data/minio/ --console-address :9001\n    ports:\n      - 5106:9000\n      - 5112:9001\n\n  azure:\n    image: mcr.microsoft.com/azure-storage/azurite\n    ports:\n      - 5107:10000\n\n  keycloak:\n    image: quay.io/keycloak/keycloak\n    environment:\n      KEYCLOAK_ADMIN: admin\n      KEYCLOAK_ADMIN_PASSWORD: secret\n    ports:\n      - 5110:8080\n    command:\n      - start-dev\n\n  maildev:\n    image: maildev/maildev\n    ports:\n      - 1025:1025\n      - 1080:1080\n```\n\n----------------------------------------\n\nTITLE: Creating Dynamic Page Renderer with Astro\nDESCRIPTION: Implementation of dynamic page rendering in Astro that fetches blocks for a specific page slug from Directus and renders them using the appropriate components.\nSOURCE: https://github.com/directus/docs/blob/main/content/tutorials/1.getting-started/rendering-dynamic-blocks-using-astro.md#2025-04-09_snippet_8\n\nLANGUAGE: astro\nCODE:\n```\n---\nimport Layout from \"../layouts/Layout.astro\";\nimport { fetchPageBlocks } from \"../lib/directus\";\nimport client from \"../lib/directus\";\nimport { readItems } from \"@directus/sdk\";\nimport BlocksToComponents from \"../components/BlocksToComponents.astro\";\n\n\nexport async function getStaticPaths() {\n  // Fetch all available pages\n  const pages = await client.request(readItems(\"pages\", { fields: [\"slug\"] }));\n\n  return pages.map((page) => ({\n    params: { slug: page.slug },\n  }));\n}\nconst { slug } = Astro.params;\n//fetch blocks for the page\nconst page = await fetchPageBlocks(slug);\n\nconst { blocks } =  page\n---\n\n<Layout>\n\n  <BlocksToComponents blocks={blocks} />\n</Layout>\n```\n\n----------------------------------------\n\nTITLE: Authentication Response JSON Structure\nDESCRIPTION: Shows the structure of an authentication response containing an expiration time in milliseconds, a JWT access token, and a refresh token. The tokens are truncated for brevity.\nSOURCE: https://github.com/directus/docs/blob/main/content/_partials/snippet-auth-token.md#2025-04-09_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n\t\"expires\": 900000,\n\t\"access_token\": \"eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9...\",\n\t\"refresh_token\": \"Xp2tTNAdLYfnaAOOjt3oetyCWtobKKUIeEXj...\"\n}\n```\n\n----------------------------------------\n\nTITLE: Complete Directus Environment Configuration for Okta SAML Integration\nDESCRIPTION: Example .env file configuration for Directus with Okta SAML authentication. Includes provider settings, role mapping, attribute mapping, and the complete IDP and SP metadata XML configurations.\nSOURCE: https://github.com/directus/docs/blob/main/content/tutorials/6.self-hosting/configure-okta-as-a-single-sign-on-provider.md#2025-04-09_snippet_2\n\nLANGUAGE: env\nCODE:\n```\n...\\nAUTH_PROVIDERS=\"okta\"\\nAUTH_OKTA_DRIVER=\"saml\"\\nAUTH_OKTA_ALLOW_PUBLIC_REGISTRATION=true\\nAUTH_OKTA_DEFAULT_ROLE_ID=\"d2021a6c-327a-4477-9cb8-62244ead4e1f\"\\nAUTH_OKTA_IDENTIFIER_KEY=\"email\"\\nAUTH_OKTA_EMAIL_KEY=\"email\"\\nAUTH_OKTA_GIVEN_NAME_KEY=\"first_name\"\\nAUTH_OKTA_FAMILY_NAME_KEY=\"last_name\"\\nAUTH_OKTA_IDP_metadata='<md:EntityDescriptor xmlns:md=\"urn:oasis:names:tc:SAML:2.0:metadata\" entityID=\"http://www.okta.com/exk8y5vtf9CddTPJ4697\">\\n<md:IDPSSODescriptor WantAuthnRequestsSigned=\"false\" protocolSupportEnumeration=\"urn:oasis:names:tc:SAML:2.0:protocol\">\\n<md:KeyDescriptor use=\"signing\">\\n<ds:KeyInfo xmlns:ds=\"http://www.w3.org/2000/09/xmldsig#\">\\n<ds:X509Data>\\n<ds:X509Certificate>MIIDqjCCApKgAwIBAgIGAYtjHesFMA0GCSqGSIb3DQEBCwUAMIGVMQswCQYDVQQGEwJVUzETMBEG A1UECAwKQ2FsaWZvcm5pYTEWMBQGA1UEBwwNU2FuIEZyYW5jaXNjbzENMAsGA1UECgwET2t0YTEU MBIGA1UECwwLU1NPUHJvdmlkZXIxFjAUBgNVBAMMDXRyaWFsLTM1Mjg4NDkxHDAaBgkqhkiG9w0B CQEWDWluZm9Ab2t0YS5jb20wHhcNMjMxMDI0MTkxNTI3WhcNMzMxMDI0MTkxNjI2WjCBlTELMAkG A1UEBhMCVVMxEzARBgNVBAgMCkNhbGlmb3JuaWExFjAUBgNVBAcMDVNhnkBGcmFuY2lzY28xDTAL BgNVBAoMBE9rdGExFDASBgNVBAsMC1NTT1Byb3ZpZGVyMRYwFAYDVQQDDA10cmlhbC0zNTI4ODQ5 MRwwGgYJKoZIhvcNAQkBFg1pbmZvQG9rdGEuY29tMIIBIjANBgkqhkiG9w0BAQEFAAOCAQ8AMIIB CgKCAQEAp3Fym7vnRBER9Hoj70Z7EjE0hsEQTyjN7aN7EcBWL7/g40h65bmaHtTq/Pbd/6fBedGF f4ZvwW1vOLdnRnVxwIl5UdUqYgfgSoYq9xp48xMlonWDqd6fNlSRKl3h9sFARZQ680f7TYbanTEu ikUKoE7K6HdEOXC00Iv+zcyA6BfiIRBuBSnAZU6Ip3nsLeY8ludDhZzqD04H6bhZFVzRUif75LHn DYUY9VsvGxqDIhLGQFuVlgbP5OdNEGZM02iCGhivGN0eIEPGUpMGBu9dpxHSMqOar/QVO64JgwTw jcW+t7P+47IC6LRJVY07bg3pjgEMtmylzgvdx/30tynpwwIDAQABMA0GCSqGSIb3DQEBCwUAA4IB AQAux3Jo+jl7kzgd+AILWrayG/Ayu8L2OPs3+pjJ42FfjEa6Vw0a8g+IfQ1t7kvWcI1VrWol2jsR oBzR0xZpsStOQ+t3S+MtjS74iN7ErvDFRHjD4yEGJtMGwxsWFJqcOICwcJEB4Etmd+girCSccVH7 ydR9HnKID0SVKh/i17FPG4SlE28/cQJ2rb/VkPHlBlHIMyRvLhGdM3T2SWBIHR0/9Nvp9gyNZfvk 0qP184mjFP9wKU83tXLCnq31j7vJtdOw+E83TsUSg1e9JBNH3L9OVQJzksI+iUiHEDH8O9yXla5C caqK2Z6/0FTGf2KYlbO6qtLAYmIdKwsQR28crJW0</ds:X509Certificate>\\n</ds:X509Data>\\n</ds:KeyInfo>\\n</md:KeyDescriptor>\\n<md:NameIDFormat>urn:oasis:names:tc:SAML:1.1:nameid-format:unspecified</md:NameIDFormat>\\n<md:NameIDFormat>urn:oasis:names:tc:SAML:1.1:nameid-format:emailAddress</md:NameIDFormat>\\n<md:SingleSignOnService Binding=\"urn:oasis:names:tc:SAML:2.0:bindings:HTTP-POST\" Location=\"https://trial-3528890.okta.com/app/trial-3528890_mydirectusapp_1/exk8y5vtf9CddTPJ4697/sso/saml\"/>\\n<md:SingleSignOnService Binding=\"urn:oasis:names:tc:SAML:2.0:bindings:HTTP-Redirect\" Location=\"https://trial-3528890.okta.com/app/trial-3528890_mydirectusapp_1/exk8y5vtf9CddTPJ4697/sso/saml\"/>\\n</md:IDPSSODescriptor>\\n</md:EntityDescriptor>'\\nAUTH_OKTA_SP_metadata='<EntityDescriptor xmlns:md=\"urn:oasis:names:tc:SAML:2.0:metadata\" xmlns:ds=\"http://www.w3.org/2000/09/xmldsig#\" entityID=\"http://www.okta.com/exk8y5vtf9CddTPJ4697\">\\n                       <SPSSODescriptor WantAssertionsSigned=\"true\" protocolSupportEnumeration=\"urn:oasis:names:tc:SAML:2.0:protocol\">\\n                       <NameIDFormat>urn:oasis:names:tc:SAML:1.1:nameid-format:emailAddress</NameIDFormat>\\n                       <AssertionConsumerService isDefault=\"true\" index=\"0\" Binding=\"urn:oasis:names:tc:SAML:2.0:bindings:HTTP-POST\" Location=\"http://localhost:8055/auth/login/okta/acs\"/>\\n                       </SPSSODescriptor>\\n                       </EntityDescriptor>'\\n...\n```\n\n----------------------------------------\n\nTITLE: Extending Core Collections with Custom Fields\nDESCRIPTION: Shows how to extend Directus core collections with custom fields using TypeScript interfaces.\nSOURCE: https://github.com/directus/docs/blob/main/content/tutorials/3.tips-and-tricks/advanced-types-with-the-directus-sdk.md#2025-04-09_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\ninterface MySchema {\n\t// regular collections are array types\n\tcollection_a: CollectionA[];\n\t// singleton collections are singular types\n\tcollection_c: CollectionC;\n\t// extend the provided DirectusUser type\n\tdirectus_users: CustomUser;\n}\n\ninterface CustomUser {\n\tcustom_field: string;\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing BlogHomeScreen with Directus Data in Kotlin Compose\nDESCRIPTION: This composable function fetches global and pages data from Directus and displays it. It handles error states and uses a MarkdownView to render WYSIWYG content. The function is part of the app's main UI.\nSOURCE: https://github.com/directus/docs/blob/main/content/tutorials/1.getting-started/fetch-data-from-directus-in-android-with-kotlin.md#2025-04-09_snippet_9\n\nLANGUAGE: kotlin\nCODE:\n```\npackage com.example.directusapp.ui\n\nimport androidx.compose.foundation.clickable\nimport androidx.compose.foundation.layout.Column\nimport androidx.compose.foundation.layout.Spacer\nimport androidx.compose.foundation.layout.fillMaxSize\nimport androidx.compose.foundation.layout.fillMaxWidth\nimport androidx.compose.foundation.layout.height\nimport androidx.compose.foundation.layout.padding\nimport androidx.compose.material3.MaterialTheme\nimport androidx.compose.material3.Text\nimport androidx.compose.runtime.*\nimport androidx.compose.ui.Modifier\nimport androidx.compose.ui.unit.dp\nimport androidx.navigation.NavController\nimport kotlinx.coroutines.launch\nimport androidx.compose.foundation.lazy.LazyColumn\nimport com.example.directusapp.ui.MarkdownView\n\n@Composable\nfun BlogHomeScreen(navController: NavController) {\n    var globalResponse by remember { mutableStateOf<GlobalResponse?>(null) }\n    var pagesResponse by remember { mutableStateOf<PageResponse?>(null) }\n\n    var errorMessage by remember { mutableStateOf<String?>(null) }\n\n    val scope = rememberCoroutineScope()\n\n    LaunchedEffect(Unit) {\n        scope.launch {\n            try {\n                val apiService = DirectusApiService.create()\n                globalResponse = apiService.getGlobal()\n                pagesResponse = apiService.getPages()\n\n            } catch (e: Exception) {\n                errorMessage = e.message\n            }\n        }\n    }\n\n    if (errorMessage != null) {\n        Text(text = \"Error: $errorMessage\", color = MaterialTheme.colorScheme.error)\n    } else {\n        Column(\n            modifier = Modifier\n                .fillMaxSize()\n                .padding(16.dp)\n        ) {\n            pagesResponse?.let { response ->\n              Text(text = response.data[0].title, style = MaterialTheme.typography.titleLarge)\n              Spacer(modifier = Modifier.height(8.dp))\n              MarkdownView(markdownText = response.data[0].content.trimIndent())\n              Spacer(modifier = Modifier.height(16.dp))\n            }\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Individual Post Template\nDESCRIPTION: HTML template for displaying individual blog post content\nSOURCE: https://github.com/directus/docs/blob/main/content/tutorials/1.getting-started/fetch-data-from-directus-with-angular.md#2025-04-09_snippet_12\n\nLANGUAGE: html\nCODE:\n```\n<div *ngIf=\"post\">\n  <div style=\"width: 500px\">\n    <img style=\"width: 100%\" [src]=\"baseUrl+'assets/'+post.image\"\n         alt=\"{{post.title}}\">\n  </div>\n  <h2>{{post.title}}</h2>\n  <p>{{post.content}}</p>\n</div>\n```\n\n----------------------------------------\n\nTITLE: Directus API Functions Implementation\nDESCRIPTION: Implementation of API functions for product retrieval, search, and order creation\nSOURCE: https://github.com/directus/docs/blob/main/content/tutorials/2.projects/build-an-ecommerce-platform-with-next-js-stripe-and-directus-automate.md#2025-04-09_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nimport directus from \"./directus\";\nimport { readItems, createItem, updateItems } from \"@directus/sdk\";\nimport { OrderTypes } from \"@/types\";\n\nexport const getAllProducts = async () => {\n  try {\n    const results = await directus.request(\n      readItems(\"products\", {\n        filter: {\n          is_available: {\n            _eq: true,\n          }\n        }\n      })\n    );\n    return results;\n  }\n  catch (error) {\n    console.error(\"Error fetching products:\", error);\n    console.log(error);\n  }\n};\n\nexport const searchProducts = async (query: string) => {\n  try {\n    const results = await directus.request(\n      readItems(\"products\", {\n        search: query,\n        filter: {\n          is_available: {\n            _eq: true,\n          }\n        }\n      })\n    );\n    return results;\n  } catch (error) {\n    console.error(\"Error searching for products:\", error);\n    console.log(error);\n  }\n};\n\nexport async function createOrder(orderData: OrderTypes) {\n  try {\n    const results = await directus.request(\n      createItem(\"orders\", { ...orderData })\n    );\n    console.log(results);\n    await directus.request(updateItems(\"products\", orderData.products, { is_available: false }))\n    return `Order created successfully, Your order No is:  + ${results.order_no}`;\n\n  } catch (error) {\n    console.error(\"Error creating order:\", error);\n    console.log(error);\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Constants for Directus API Configuration\nDESCRIPTION: Defines a Constants object that holds the base URL for the Directus API endpoint. This provides a central location for managing API connection details.\nSOURCE: https://github.com/directus/docs/blob/main/content/tutorials/1.getting-started/fetch-data-from-directus-in-android-with-kotlin.md#2025-04-09_snippet_1\n\nLANGUAGE: kotlin\nCODE:\n```\npackage com.example.directusapp\n\nobject Constants {\n    const val BASE_URL = \"https://directus.example.com\"\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing User Login API Route in Astro\nDESCRIPTION: Creates an API route to handle user login using Directus SDK, setting a session token cookie upon successful authentication.\nSOURCE: https://github.com/directus/docs/blob/main/content/tutorials/1.getting-started/using-authentication-in-astro.md#2025-04-09_snippet_6\n\nLANGUAGE: ts\nCODE:\n```\nimport type { APIRoute } from \"astro\";\nimport client from \"../../../lib/directus\";\n\nexport const POST: APIRoute = async ({ request, cookies, redirect }) => {\n  const formData = await request.formData();\n  const email = formData.get(\"email\")?.toString();\n  const password = formData.get(\"password\")?.toString();\n\n\n  if (!email || !password) {\n    return new Response(\"Email and password are required\", { status: 400 });\n  }\n  try {\n\n    const response = await client.login(email, password);\n      if (response.access_token) {\n        cookies.set('directus_session_token', response.access_token, { sameSite: 'strict', path: '/', secure: true });\n      }\n  } catch (error: any) {\n    const message = error?.errors?.[0]?.message || 'Login failed';\n        return new Response(message, { status: 500 });\n  }\n\n  return redirect(\"/dashboard\")\n};\n```\n\n----------------------------------------\n\nTITLE: Home Page Template with Jinja\nDESCRIPTION: Template for rendering the home page, extending the base template and displaying global data\nSOURCE: https://github.com/directus/docs/blob/main/content/tutorials/1.getting-started/fetch-data-from-directus-with-flask.md#2025-04-09_snippet_5\n\nLANGUAGE: jinja\nCODE:\n```\n{% extends \"base.html\" %}\n{% block content %}\n<article>\n\t<h1>{% block title %}{{ title }}{% endblock %}</h1>\n\t<p>{{ description }}</p>\n</article>\n{% endblock %}\n```\n\n----------------------------------------\n\nTITLE: Configuring Database Environment Variables for Directus\nDESCRIPTION: Environment variables configuration for connecting Directus to AWS RDS PostgreSQL database\nSOURCE: https://github.com/directus/docs/blob/main/content/tutorials/6.self-hosting/deploy-directus-to-aws-ec2.md#2025-04-09_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n  DB_CLIENT: \"pg\"\n  DB_HOST: \"YOUR_RDS_ENDPOINT\"\n  DB_PORT: YOUR_RDS_PORT\n  DB_DATABASE: \"postgres\"\n  DB_USER: \"YOUR_DB_USERNAME\"\n  DB_PASSWORD: \"YOUR_DB_USER_PASSWORD\"\n```\n\n----------------------------------------\n\nTITLE: Implementing Login Form and Authentication in Next.js\nDESCRIPTION: React component code for a login form and authentication logic using Directus SDK. This snippet includes state management for credentials and refresh token, as well as functions for handling login and WebSocket setup.\nSOURCE: https://github.com/directus/docs/blob/main/content/tutorials/2.projects/build-a-realtime-chat-app-with-directus-and-next.md#2025-04-09_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\n'use client';\nimport { useState, useEffect } from 'react';\nimport directus from '@/lib/directus';\n\nexport default function Home() {\n  const [credentials, setCredentials] = useState({\n    email: '',\n    password: '',\n  });\n  const [refreshToken, setRefreshToken] = useState(undefined);\n\n  // Handle login via WebSocket\n  const login = async () => {\n    const authResponse = await directus.login(credentials.email, credentials.password, {\n      mode: \"json\",\n    });\n    console.log(\"Login successful\", authResponse);\n\n    setupWebSocket()\n  };\n\n  // Connects the realtime client, authenticates via handshake, and sets up the message listener\n  async function setupWebSocket() {\n    await directus.connect();\n\n    directus.sendMessage({\n      type: \"auth\",\n      email: credentials.email,\n      password: credentials.password,\n    })\n\n    directus.onWebSocket('message', (message) => {\n      try {\n        console.log('Received WebSocket message:', message);\n        if (message.type === 'auth' && message.status === 'ok') {\n          setRefreshToken(message.refresh_token);\n        }\n      } catch (err) {\n        console.error('Error parsing WebSocket message:', err);\n      }\n    });\n    directus.onWebSocket('error', (err) => {\n      console.error('WebSocket error:', err);\n    });\n  }\n\n  // Handle input change\n  const handleInputChange = (e) => {\n    const { name, value } = e.target;\n    setCredentials((prev) => ({\n      ...prev,\n      [name]: value,\n    }));\n  };\n  return (\n    <div>\n      <h1>Directus Realtime Chat</h1>\n      {refreshToken === undefined ? (\n        <div>\n          <h2>Login</h2>\n          <input\n            type=\"text\"\n            name=\"email\"\n            placeholder=\"Email\"\n            value={credentials.email}\n            onChange={handleInputChange}\n          />\n          <br />\n          <input\n            type=\"password\"\n            name=\"password\"\n            placeholder=\"Password\"\n            value={credentials.password}\n            onChange={handleInputChange}\n          />\n          <br />\n          <button type=\"button\" onClick={login}>\n            Login\n          </button>\n        </div>\n      ) : (\n        <div>\n          <h2>Chat</h2>\n          <p>Signed in!</p>\n        </div>\n      )}\n    </div>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing User Authentication Check in Directus Plugin\nDESCRIPTION: This code snippet demonstrates how to create an isAuthenticated function in the Directus plugin file. It uses the readMe function from the Directus SDK to check if a user is authenticated.\nSOURCE: https://github.com/directus/docs/blob/main/content/tutorials/1.getting-started/using-authentication-in-nuxt.md#2025-04-09_snippet_15\n\nLANGUAGE: typescript\nCODE:\n```\nimport {\n\tcreateDirectus,\n\treadMe,\n\trest,\n\treadItems,\n\tregisterUser,\n\tauthentication,\n} from \"@directus/sdk\";\n\nconst directus = createDirectus<DirectusSchema>(\n\t\"http://localhost:3000/directus\",\n)\n\t.with(authentication(\"cookie\"))\n\t.with(rest());\n\nconst isAuthenticated = async () => {\n\ttry {\n\t\tconst me = await directus.request(readMe());\n\t\treturn me;\n\t} catch (error) {\n\t\tconsole.error(error)\n\t\treturn false;\n\t}\n};\n\nexport default defineNuxtPlugin(() => {\n\treturn {\n\t\tprovide: { directus, readItems, registerUser, isAuthenticated },\n\t};\n});\n```\n\n----------------------------------------\n\nTITLE: Initializing Next.js Project and Installing Directus SDK\nDESCRIPTION: Commands to create a new Next.js application and install the Directus SDK.\nSOURCE: https://github.com/directus/docs/blob/main/content/tutorials/1.getting-started/implementing-live-preview-in-next-js.md#2025-04-09_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nnpx create-next-app@latest next-live-preview\ncd next-live-preview\nnpm install @directus/sdk.\n```\n\n----------------------------------------\n\nTITLE: S3 Storage Configuration\nDESCRIPTION: Environment variables configuration for connecting Directus to AWS S3 storage\nSOURCE: https://github.com/directus/docs/blob/main/content/tutorials/6.self-hosting/deploy-directus-to-aws-ec2.md#2025-04-09_snippet_6\n\nLANGUAGE: yaml\nCODE:\n```\n  STORAGE_LOCATIONS: s3\n  STORAGE_S3_DRIVER: s3\n  STORAGE_S3_KEY: YOUR_AWS_ACCESS_KEY_ID\n  STORAGE_S3_SECRET: YOUR_AWS_SECRET_ACCESS_KEY\n  STORAGE_S3_BUCKET: YOUR_S3_BUCKET_NAME\n  STORAGE_S3_REGION: YOUR_PREFERRED_REGION\n  STORAGE_S3_ENDPOINT: s3.amazonaws.com\n```\n\n----------------------------------------\n\nTITLE: Fetching Nested Image Fields with Directus SDK\nDESCRIPTION: This code shows how to fetch blog posts with their related image data (including title and description for alt text) using the Directus SDK. It demonstrates the proper way to request nested fields in a single API call.\nSOURCE: https://github.com/directus/docs/blob/main/content/tutorials/3.tips-and-tricks/search-engine-optimization-best-practices.md#2025-04-09_snippet_10\n\nLANGUAGE: javascript\nCODE:\n```\nconst posts = await client.request(\n  readItems('posts', {\n    filter: {\n      slug: {\n        _eq: slugFromYourFrontEndFramework,\n      },\n    },\n\t\tfields: ['title', 'date_published', 'summary', 'content', { image: ['id', 'title', 'description']}]\n    limit: 1,\n  })\n);\n```\n\n----------------------------------------\n\nTITLE: WebSocket Connection Stability Handler in TypeScript\nDESCRIPTION: Implements connection stability handling including automatic reconnection and re-authentication using refresh tokens.\nSOURCE: https://github.com/directus/docs/blob/main/content/tutorials/2.projects/build-a-realtime-chat-app-using-directus-and-nuxt.md#2025-04-09_snippet_16\n\nLANGUAGE: typescript\nCODE:\n```\n$directus.onWebSocket('close', () => {\n\tif (refreshToken.value) {\n\t\t$directus.connect()\n\t\t$directus.sendMessage({\n\t\t\ttype: 'auth',\n\t\t\trefresh_token: refreshToken.value\n\t\t})\n\t}\n})\n```\n\n----------------------------------------\n\nTITLE: Subscribing to Messages with Directus WebSocket\nDESCRIPTION: This snippet sets up a WebSocket connection and subscribes to message updates from the Directus server.\nSOURCE: https://github.com/directus/docs/blob/main/content/tutorials/2.projects/build-a-multi-user-chat-with-react-and-directus-realtime.md#2025-04-09_snippet_5\n\nLANGUAGE: js\nCODE:\n```\nuseEffect(() => {\n  const cleanup = client.onWebSocket('message', function (data) {\n    if (data.type == 'auth' && data.status == 'ok') {\n      subscribe('create');\n    }\n  });\n\n  client.connect();\n\n  return cleanup;\n}, []);\n```\n\n----------------------------------------\n\nTITLE: CRUD Operations with CollectionsService in Directus\nDESCRIPTION: These snippets demonstrate how to perform Create, Read, Update, and Delete operations using the CollectionsService in Directus. Each operation is shown with a simple example.\nSOURCE: https://github.com/directus/docs/blob/main/content/guides/9.extensions/2.api-extensions/4.services.md#2025-04-09_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nconst data = await collectionsService.createOne({\n\tname: 'articles',\n\tmeta: {\n\t\tnote: 'Blog posts.',\n\t},\n});\n```\n\nLANGUAGE: javascript\nCODE:\n```\nconst data = await collectionsService.readOne('collection_name');\n```\n\nLANGUAGE: javascript\nCODE:\n```\nconst data = await collectionsService.updateOne('collection_name', {\n\tmeta: {\n\t\tnote: 'Updated blog posts.',\n\t},\n});\n```\n\nLANGUAGE: javascript\nCODE:\n```\nconst data = await collectionsService.deleteOne('collection_name');\n```\n\n----------------------------------------\n\nTITLE: Implementing Action Event Hook in Directus\nDESCRIPTION: Example showing how to implement an action event hook that executes after an item is created, receiving meta and context objects to perform post-creation operations.\nSOURCE: https://github.com/directus/docs/blob/main/content/guides/9.extensions/2.api-extensions/1.hooks.md#2025-04-09_snippet_2\n\nLANGUAGE: js\nCODE:\n```\nexport default ({ action }) => {\n\taction('items.create', (meta, context) => {\n\t\tconsole.log('Item was just created.');\n\t});\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Next.js Root Layout with Navigation\nDESCRIPTION: Implementation of a root layout component in Next.js that adds navigation links across all pages. The component creates a consistent navigation bar with links to Home, About, Code of Conduct, Privacy Policy, and Blog pages using Next.js Link components.\nSOURCE: https://github.com/directus/docs/blob/main/content/tutorials/1.getting-started/fetch-data-from-directus-with-nextjs.md#2025-04-09_snippet_9\n\nLANGUAGE: jsx\nCODE:\n```\nimport Link from 'next/link';\n\nexport default function RootLayout({ children }) {\n\treturn (\n\t\t<html lang=\"en\">\n\t\t\t<body>\n\t\t\t\t<nav>\n\t\t\t\t\t<Link href=\"/\">Home</Link>{' | '}\n\t\t\t\t\t<Link href=\"/about\">About</Link>{' | '}\n\t\t\t\t\t<Link href=\"/conduct\">Code of Conduct</Link>{' | '}\n\t\t\t\t\t<Link href=\"/privacy\">Privacy Policy</Link>{' | '}\n\t\t\t\t\t<Link href=\"/blog\">Blog</Link>\n\t\t\t\t</nav>\n\t\t\t\t<main>{children}</main>\n\t\t\t</body>\n\t\t</html>\n\t);\n}\n```\n\n----------------------------------------\n\nTITLE: Logout Function Implementation\nDESCRIPTION: Implements user logout functionality using Directus SDK, with navigation to login page after successful logout.\nSOURCE: https://github.com/directus/docs/blob/main/content/tutorials/1.getting-started/using-authentication-in-sveltekit.md#2025-04-09_snippet_16\n\nLANGUAGE: javascript\nCODE:\n```\n//src/lib/directus.js\nexport const logoutUser = async () => {\n  try {\n    await client.logout();\n    console.log(\"Logout successful\");\n    goto(\"/login\");\n  } catch (error) {\n    console.error(\"Logout failed:\", error);\n    throw error;\n  }\n};\n```\n\n----------------------------------------\n\nTITLE: Creating Login Component with Directus Authentication\nDESCRIPTION: Vue component that handles user login with Directus authentication, including error handling and form interface.\nSOURCE: https://github.com/directus/docs/blob/main/content/tutorials/2.projects/build-a-notebook-chrome-extension-with-directus-auth.md#2025-04-09_snippet_10\n\nLANGUAGE: html\nCODE:\n```\n<template>\n    <div>\n        <div>\n            <span @click=\"$router.push({ name: 'signup' })\"> Signup </span>\n        </div>\n        <form @submit.prevent=\"login\">\n            <label for=\"email\">Email</label>\n            <input type=\"email\" id=\"email\" required v-model=\"email\" />\n\n            <label for=\"password\">Password</label>\n            <input type=\"password\" id=\"password\" v-model=\"password\" required />\n\n            <button type=\"submit\">Login</button>\n        </form>\n    </div>\n</template>\n\n<script>\n    export default {\n        inject: [\"directus\"],\n        data() {\n            return {\n                email: \"\",\n                password: \"\",\n            };\n        },\n        methods: {\n            async login() {\n                try {\n                    await this.directus.login(this.email, this.password);\n                    this.$router.push({ name: \"home\" });\n                } catch ({ errors }) {\n                    console.log(\"🚀 ~ login ~ errors:\", errors);\n                    if (errors[0].extensions.code === \"INVALID_CREDENTIALS\")\n                        alert(\"Invalid Email or password\");\n                    else\n                        alert(\n                            \"Something went wrong. Try again after some time...\"\n                        );\n                }\n            },\n        },\n    };\n</script>\n```\n\n----------------------------------------\n\nTITLE: Installing SvelteKit and Dependencies\nDESCRIPTION: Commands to create a new SvelteKit project and install necessary dependencies including the Directus SDK.\nSOURCE: https://github.com/directus/docs/blob/main/content/tutorials/1.getting-started/implement-multilingual-content-with-directus-and-svelte-kit.md#2025-04-09_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm create svelte@latest frontend # Select the Skeleton project\ncd directus-i18n-app\nnpm install\nnpm install @directus/sdk\n```\n\n----------------------------------------\n\nTITLE: Executing Directus Migrations and Schema Application in Shell\nDESCRIPTION: This shell script shows two options for running Directus migrations and applying schema. It includes commands for bootstrapping, installing the database, running migrations, and applying schema from a snapshot file.\nSOURCE: https://github.com/directus/docs/blob/main/content/configuration/migrations.md#2025-04-09_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\n# Option 1\nnpx directus bootstrap\nnpx directus schema apply ./path/to/snapshot.yaml\n\n# Option 2 - without bootstrap, you must ensure that you run all required `bootstrap` tasks\nnpx directus database install\nnpx directus database migrate:latest\nnpx directus schema apply ./path/to/snapshot.yaml\n```\n\n----------------------------------------\n\nTITLE: Creating Directus SDK Instance with TypeScript Types\nDESCRIPTION: Defines TypeScript types for Directus models and creates an instance of the Directus SDK. This setup helps map JSON data to TypeScript objects and facilitates API requests to Directus CMS.\nSOURCE: https://github.com/directus/docs/blob/main/content/tutorials/1.getting-started/fetch-data-from-directus-with-angular.md#2025-04-09_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport {createDirectus, rest} from \"@directus/sdk\";\n\ntype Global = {\n  slug: string;\n  title: string;\n  description: string;\n}\n\ntype Author = {\n  slug: string;\n  name: string;\n}\n\ntype Page = {\n  slug: string;\n  title: string;\n  content: string;\n}\n\ntype Post = {\n  slug: string;\n  image: string;\n  title: string;\n  content: string;\n  author: Author;\n  published_date: string;\n}\n\ntype Schema = {\n  global: Global;\n  posts: Post[];\n  pages: Page[];\n}\n\nconst directus =\n  createDirectus<Schema>(\"YOUR_DIRECTUS_URL\")\n    .with(rest());\n\nexport {directus, Global, Post, Page}\n```\n\n----------------------------------------\n\nTITLE: Creating Authentication Form Component in React\nDESCRIPTION: Reusable authentication form component that handles both login and registration. Uses React state management and includes form validation with PropTypes.\nSOURCE: https://github.com/directus/docs/blob/main/content/tutorials/1.getting-started/using-authentication-in-react.md#2025-04-09_snippet_12\n\nLANGUAGE: jsx\nCODE:\n```\n// src/components/AuthForm.jsx\n\nimport { useState } from \"react\"\nimport PropTypes from 'prop-types';\nimport { Link } from \"react-router-dom\";\n\nconst AuthForm = ({ title,\n    submitButtonTitle,\n    onSubmit,\n    linkText,\n    linkHref }) => {\n\n    const [data, setData] = useState({\n        email: \"\",\n        password: \"\",\n    });\n\n    const handleSubmit = async (event) => {\n        event.preventDefault();\n        onSubmit(data);\n    };\n\n    const handleInputChange = (event) => {\n        setData({\n            ...data,\n            [event.target.name]: event.target.value,\n        });\n    };\n\n    return (\n        <form onSubmit={handleSubmit}>\n            <h1>{title}</h1>\n            <input\n                type=\"email\"\n                placeholder=\"Email Address\"\n                name=\"email\"\n                value={data.email}\n                onChange={handleInputChange}\n                required\n            />\n            <input\n                type=\"password\"\n                placeholder=\"Enter your Password\"\n                name=\"password\"\n                value={data.password}\n                required\n                onChange={handleInputChange}\n            />\n            <button>\n                {submitButtonTitle}\n            </button>\n            <p>\n                <Link\n                    to={linkHref}>\n                    {linkText}\n                </Link>\n            </p>\n        </form>\n    );\n}\nAuthForm.propTypes = {\n    title: PropTypes.string.isRequired,\n    submitButtonTitle: PropTypes.string.isRequired,\n    onSubmit: PropTypes.func.isRequired,\n    linkText: PropTypes.string.isRequired,\n    linkHref: PropTypes.string.isRequired,\n};\n\nexport default AuthForm;\n```\n\n----------------------------------------\n\nTITLE: Implementing Global Metadata Display\nDESCRIPTION: Astro component that fetches and displays global metadata from Directus using the SDK.\nSOURCE: https://github.com/directus/docs/blob/main/content/tutorials/1.getting-started/fetch-data-from-directus-with-astro.md#2025-04-09_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\n---\nimport Layout from \"../layouts/Layout.astro\";\nimport directus from \"../lib/directus\";\nimport { readSingleton } from \"@directus/sdk\";\n\nconst global = await directus.request(readSingleton(\"global\"));\n---\n\n<Layout title={global.title}>\n  <main>\n    <div>\n      <h1>{global.title}</h1>\n      <p>{global.description}</p>\n    </div>\n  </main>\n</Layout>\n```\n\n----------------------------------------\n\nTITLE: Implementing Global Metadata Display\nDESCRIPTION: Astro component that fetches and displays global metadata from Directus using the SDK.\nSOURCE: https://github.com/directus/docs/blob/main/content/tutorials/1.getting-started/fetch-data-from-directus-with-astro.md#2025-04-09_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\n---\nimport Layout from \"../layouts/Layout.astro\";\nimport directus from \"../lib/directus\";\nimport { readSingleton } from \"@directus/sdk\";\n\nconst global = await directus.request(readSingleton(\"global\"));\n---\n\n<Layout title={global.title}>\n  <main>\n    <div>\n      <h1>{global.title}</h1>\n      <p>{global.description}</p>\n    </div>\n  </main>\n</Layout>\n```\n\n----------------------------------------\n\nTITLE: Connecting to Directus Realtime with SDK in HTML\nDESCRIPTION: This snippet demonstrates how to import the Directus SDK from a CDN, create a client with the realtime composable, and establish a connection. It requires replacing the Directus project URL and access token with actual values.\nSOURCE: https://github.com/directus/docs/blob/main/content/getting-started/8.connect-to-realtime.md#2025-04-09_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<!doctype html>\n<html>\n\t<body>\n\t\t<script>\n\t\t\timport { createDirectus, staticToken, realtime } from 'https://www.unpkg.com/@directus/sdk/dist/index.js';\n\n\t\t\tconst directus = createDirectus('https://example.directus.app')\n\t\t\t\t.with(staticToken('your_access_token'))\n\t\t\t\t.with(realtime());\n\n\t\t\tawait directus.connect();\n\t\t</script>\n\t</body>\n</html>\n```\n\n----------------------------------------\n\nTITLE: Subscribing to Realtime Messages in TypeScript\nDESCRIPTION: Implements message subscription and handling logic for a chat application using Directus WebSocket functionality. Includes message receiving, subscription management, and message list updates.\nSOURCE: https://github.com/directus/docs/blob/main/content/tutorials/2.projects/build-a-realtime-chat-app-using-directus-and-nuxt.md#2025-04-09_snippet_9\n\nLANGUAGE: typescript\nCODE:\n```\nconst messageList: Ref<Message[]> = ref([])\n\nconst subscribe = async (event) => {\n\tconst { subscription } = await $directus.subscribe('messages', {\n\t\tevent,\n\t\tquery: {\n\t\t\tfields: ['*', 'user_created.first_name'],\n\t\t},\n\t\tuid: \"messages-subscription\"\n\t})\n\n\tfor await (const message of subscription) {\n\t\treceiveMessage(message)\n\t}\n}\n\nconst receiveMessage = (data) => {\n\tif (data.type === 'ping') {\n\t\t$directus.sendMessage({\n\t\t\ttype: 'pong',\n\t\t})\n\t}\n\tif (data.type === 'subscription' && data.event === 'create') {\n\t\tconst message = data.data[0]\n\t\taddMessageToList(message)\n\t}\n}\n\nconst addMessageToList = (message: Message) => {\n\tmessageList.value.push(message)\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Directus SDK with JSON Authentication Mode in TypeScript\nDESCRIPTION: This snippet demonstrates how to initialize the Directus SDK client with JSON authentication mode, which is useful for client-side applications. It sets up the client with REST functionality and JSON authentication.\nSOURCE: https://github.com/directus/docs/blob/main/content/tutorials/1.getting-started/using-authentication-in-astro.md#2025-04-09_snippet_8\n\nLANGUAGE: typescript\nCODE:\n```\nimport { createDirectus, rest, authentication } from '@directus/sdk';\nimport { DIRECTUS_URL } from \"astro:env/client\"\n\nconst client = createDirectus(DIRECTUS_URL as string).with(rest()).with(authentication('json'));\n\nexport default client;\n```\n\n----------------------------------------\n\nTITLE: Adding Logout Function to Directus Plugin in TypeScript\nDESCRIPTION: This snippet shows how to add a logout function to the Directus plugin. It logs out the user and redirects them to the login page.\nSOURCE: https://github.com/directus/docs/blob/main/content/tutorials/1.getting-started/using-authentication-in-nuxt.md#2025-04-09_snippet_22\n\nLANGUAGE: typescript\nCODE:\n```\nconst logout = async () => {\n\tawait directus.logout()\n\tnavigateTo('/login')\n}\n```\n\n----------------------------------------\n\nTITLE: Establishing and Authenticating Directus WebSocket Client\nDESCRIPTION: Creates a Directus client with authentication and realtime capabilities. This client will be used for all interactions with the Directus server via WebSockets.\nSOURCE: https://github.com/directus/docs/blob/main/content/tutorials/2.projects/build-a-multi-user-chat-with-javascript-and-directus-realtime.md#2025-04-09_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nconst client = createDirectus(url)\n  .with(authentication())\n  .with(realtime());\n```\n\n----------------------------------------\n\nTITLE: Making REST Requests with Directus SDK\nDESCRIPTION: Example of making REST requests using the Directus SDK with query parameters\nSOURCE: https://github.com/directus/docs/blob/main/content/guides/4.connect/6.sdk.md#2025-04-09_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nimport { createDirectus, rest, readItems } from '@directus/sdk';\nconst directus = createDirectus('http://directus.example.com').with(rest());\n\nconst allPosts = await directus.request(readItems('posts'));\n\nconst somePosts = await directus.request(\n  readItems('posts', {\n    filter: { status: { _eq: 'published' } },\n    sort: ['-date_created'],\n    fields: ['id', 'title', 'date_created'],\n    limit: 3\n  })\n);\n```\n\n----------------------------------------\n\nTITLE: Directus Integration Module\nDESCRIPTION: Python module for handling Directus API integration with functions to fetch global settings and collection items.\nSOURCE: https://github.com/directus/docs/blob/main/content/tutorials/1.getting-started/fetch-data-from-directus-with-django.md#2025-04-09_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nimport requests\n\nDIRECTUS_API_ENDPOINT = \"YOUR_DIRECTUS_INSTANCE_API_ENDPOINT\"\n\ndef get_global_settings():\n    response = requests.get(f\"{DIRECTUS_API_ENDPOINT}/items/global\")\n    return response.json()\n\ndef get_collection_items(collection):\n    response = requests.get(f\"{DIRECTUS_API_ENDPOINT}/items/{collection}\")\n    return response.json()\n```\n\n----------------------------------------\n\nTITLE: Directus Integration Module\nDESCRIPTION: Python module for handling Directus API integration with functions to fetch global settings and collection items.\nSOURCE: https://github.com/directus/docs/blob/main/content/tutorials/1.getting-started/fetch-data-from-directus-with-django.md#2025-04-09_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nimport requests\n\nDIRECTUS_API_ENDPOINT = \"YOUR_DIRECTUS_INSTANCE_API_ENDPOINT\"\n\ndef get_global_settings():\n    response = requests.get(f\"{DIRECTUS_API_ENDPOINT}/items/global\")\n    return response.json()\n\ndef get_collection_items(collection):\n    response = requests.get(f\"{DIRECTUS_API_ENDPOINT}/items/{collection}\")\n    return response.json()\n```\n\n----------------------------------------\n\nTITLE: Working with Fields using useFieldsStore\nDESCRIPTION: The useFieldsStore allows accessing and modifying collection fields. It supports creating new fields, updating existing ones, and retrieving field information.\nSOURCE: https://github.com/directus/docs/blob/main/content/guides/9.extensions/3.app-extensions/8.composables.md#2025-04-09_snippet_2\n\nLANGUAGE: html\nCODE:\n```\n<script setup>\nimport { useStores } from '@directus/extensions-sdk';\nconst { useFieldsStore } = useStores();\nconst fieldsStore = useFieldsStore();\n\n// create a field\nconst newField = await fieldStore.createField('collection_key', {\n  name: 'title',\n});\n\n// update a field\nconst updatedField = await fieldStore.updateField(\n  'collection_key',\n  'field_key',\n  {\n    name: 'new title',\n  }\n);\n</script>\n```\n\n----------------------------------------\n\nTITLE: Chat Authentication Logic\nDESCRIPTION: Implementation of websocket authentication and token management for the chat application.\nSOURCE: https://github.com/directus/docs/blob/main/content/tutorials/2.projects/build-a-realtime-chat-app-using-directus-and-nuxt.md#2025-04-09_snippet_8\n\nLANGUAGE: typescript\nCODE:\n```\nconst saveRefreshToken = (token: string) => {\n\trefreshToken.value = token\n\tlocalStorage.setItem('directus_refresh_token', token)\n}\n\nonMounted(() => {\n\tconst storedToken = localStorage.getItem('directus_refresh_token')\n\tif (storedToken) {\n\t\trefreshToken.value = storedToken\n\t\t$directus.connect()\n\t\t$directus.onWebSocket('open', () => {\n\t\t\t$directus.sendMessage({\n\t\t\t\ttype: 'auth',\n\t\t\t\trefresh_token: storedToken\n\t\t\t})\n\t\t})\n\t} else {\n\t\t$directus.connect()\n\t}\n\n\tconst cleanup = $directus.onWebSocket('message', (message) => {\n\t\tif (message.type === 'auth' && message.status === 'ok') {\n\t\t\tsaveRefreshToken(message.refresh_token)\n\t\t}\n\t})\n\n\tonBeforeUnmount(cleanup)\n})\n\nconst login = async () => {\n\tconst login = {\n\t\ttype: 'auth',\n\t\temail: credentials.value.email,\n\t\tpassword: credentials.value.password\n\t}\n\t$directus.sendMessage(JSON.stringify(login))\n}\n```\n\n----------------------------------------\n\nTITLE: CRUD Operations with ItemsService in Directus\nDESCRIPTION: These snippets show how to perform Create, Read, Update, and Delete operations using the ItemsService in Directus. Each operation is demonstrated with a simple example.\nSOURCE: https://github.com/directus/docs/blob/main/content/guides/9.extensions/2.api-extensions/4.services.md#2025-04-09_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nconst data = await itemsService.createOne({\n\ttitle: 'Hello world!',\n\tbody: 'This is our first article',\n});\n```\n\nLANGUAGE: javascript\nCODE:\n```\nconst data = await itemsService.readOne('item_id');\n```\n\nLANGUAGE: javascript\nCODE:\n```\nconst data = await itemsService.updateOne('item_id', {\n\ttitle: \"An updated title\"\n});\n```\n\nLANGUAGE: javascript\nCODE:\n```\nconst data = await itemsService.deleteOne('item_id');\n```\n\n----------------------------------------\n\nTITLE: Rendering Blog Post List with Links to Detail Pages\nDESCRIPTION: JSX markup for rendering a list of blog posts with links to individual post pages, displaying title, publish date, and author name for each post.\nSOURCE: https://github.com/directus/docs/blob/main/content/tutorials/1.getting-started/fetch-data-from-directus-with-nextjs.md#2025-04-09_snippet_7\n\nLANGUAGE: jsx\nCODE:\n```\n\t<div>\n\t\t<h1>Blog</h1>\n\t\t<ul>\n\t\t\t{posts.map((post) => {\n\t\t\t\treturn (\n\t\t\t\t\t<li key={post.slug}>\n\t\t\t\t\t\t<h2>\n\t\t\t\t\t\t<a href={`/blog/${post.slug}`}>\n\t\t\t\t\t\t\t{post.title}\n\t\t\t\t\t\t</a>\n\t\t\t\t\t\t</h2>\n\t\t\t\t\t\t<span>\n\t\t\t\t\t\t\t{post.publish_date} &bull; {post.author.name}\n\t\t\t\t\t\t</span>\n\t\t\t\t\t</li>\n\t\t\t\t);\n\t\t\t})}\n\t\t</ul>\n\t</div>\n```\n\n----------------------------------------\n\nTITLE: Rendering Blog Post List with Links to Detail Pages\nDESCRIPTION: JSX markup for rendering a list of blog posts with links to individual post pages, displaying title, publish date, and author name for each post.\nSOURCE: https://github.com/directus/docs/blob/main/content/tutorials/1.getting-started/fetch-data-from-directus-with-nextjs.md#2025-04-09_snippet_7\n\nLANGUAGE: jsx\nCODE:\n```\n\t<div>\n\t\t<h1>Blog</h1>\n\t\t<ul>\n\t\t\t{posts.map((post) => {\n\t\t\t\treturn (\n\t\t\t\t\t<li key={post.slug}>\n\t\t\t\t\t\t<h2>\n\t\t\t\t\t\t<a href={`/blog/${post.slug}`}>\n\t\t\t\t\t\t\t{post.title}\n\t\t\t\t\t\t</a>\n\t\t\t\t\t\t</h2>\n\t\t\t\t\t\t<span>\n\t\t\t\t\t\t\t{post.publish_date} &bull; {post.author.name}\n\t\t\t\t\t\t</span>\n\t\t\t\t\t</li>\n\t\t\t\t);\n\t\t\t})}\n\t\t</ul>\n\t</div>\n```\n\n----------------------------------------\n\nTITLE: Defining Directus Interface Entrypoint in JavaScript\nDESCRIPTION: This snippet demonstrates how to define the entrypoint for a custom Directus interface. It includes the interface configuration, supported types, and options for user customization.\nSOURCE: https://github.com/directus/docs/blob/main/content/guides/9.extensions/3.app-extensions/1.interfaces.md#2025-04-09_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport { defineInterface } from '@directus/extensions-sdk'\nimport InterfaceComponent from './interface.vue';\n\nexport default defineInterface({\n\tid: 'custom',\n\tname: 'Custom',\n\ticon: 'box',\n\tdescription: 'This is my custom interface!',\n\tcomponent: InterfaceComponent,\n\ttypes: ['string'],\n\toptions: [\n\t\t{\n\t\t\tfield: 'text',\n\t\t\tname: 'Text',\n\t\t\ttype: 'string',\n\t\t\tmeta: {\n\t\t\t\tinterface: 'input',\n\t\t\t\twidth: 'full',\n\t\t\t}\n\t\t},\n\t],\n});\n```\n\n----------------------------------------\n\nTITLE: Logging WebSocket Events in Directus Realtime\nDESCRIPTION: This JavaScript snippet shows how to use the directus.onWebSocket() method to listen for and log various WebSocket events, including open connections, new messages, closed connections, and errors.\nSOURCE: https://github.com/directus/docs/blob/main/content/getting-started/8.connect-to-realtime.md#2025-04-09_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\ndirectus.onWebSocket('open', function () {\n\tconsole.log('Connection is open');\n});\n\ndirectus.onWebSocket('message', function (message) {\n\tconsole.log('New message of type ' + message.type);\n\tconsole.log(message.data);\n});\n\ndirectus.onWebSocket('close', function () {\n\tconsole.log('Connection has closed');\n});\n\ndirectus.onWebSocket('error', function (error) {\n\tconsole.log('Connection has had an error');\n\tconsole.log(error);\n});\n```\n\n----------------------------------------\n\nTITLE: Implementing WebSocket Connection Stability in SvelteKit\nDESCRIPTION: This code implements WebSocket event handlers and reconnection logic for a chat application. It manages WebSocket events like close, error, and message handling, with specific logic for reconnecting on disconnection and handling authentication expiration.\nSOURCE: https://github.com/directus/docs/blob/main/content/tutorials/2.projects/build-a-realtime-chat-app-with-directus-and-sveltekit.md#2025-04-09_snippet_9\n\nLANGUAGE: javascript\nCODE:\n```\nfunction setupWebSocketEventHandlers() {\n  directus.onWebSocket(\"close\", () => {\n    console.log(\"WebSocket connection closed\");\n    websocketConnected = false;\n\n    if (refreshToken) {\n      attemptReconnect();\n    }\n  });\n\n  directus.onWebSocket(\"error\", (error) => {\n    console.error(\"WebSocket error:\", error);\n    websocketConnected = false;\n  });\n\n  directus.onWebSocket(\"message\", async (message) => {\n    if (message.type === \"ping\") {\n      directus.sendMessage({ type: \"pong\" });\n    }\n\n    if (message.uid === \"get-recent-messages\") {\n      console.log(\"Received past messages:\", message);\n      if (message.data && Array.isArray(message.data)) {\n        const pastMessages = [...message.data].reverse().map((msg) => ({\n          id: msg.id,\n          content: msg.content,\n          user: msg.user_created?.first_name || \"User\",\n        }));\n        messages = [...pastMessages, ...messages];\n        await tick();\n      }\n    }\n\n    if (message.type === \"auth\" && message.status === \"expired\") {\n      console.log(\"Authentication expired, re-authenticating...\");\n\n      if (refreshToken) {\n        try {\n          await directus.sendMessage({\n            type: \"auth\",\n            refresh_token: refreshToken,\n          });\n          console.log(\"Re-authentication successful\");\n        } catch (error) {\n          console.error(\"Re-authentication failed:\", error);\n          attemptReconnect();\n        }\n      } else {\n        console.log(\"No refresh token available, cannot re-authenticate.\");\n        attemptReconnect();\n      }\n    }\n  });\n}\n\nfunction attemptReconnect() {\n  if (reconnectAttempts >= maxReconnectAttempts) {\n    console.log(\"Max reconnect attempts reached. Please log in again.\");\n    dispatch(\"connectionLost\");\n    return;\n  }\n\n  reconnectAttempts++;\n  setTimeout(async () => {\n    if (!websocketConnected && refreshToken) {\n      try {\n        await directus.connect();\n        websocketConnected = true;\n        await directus.sendMessage({\n          type: \"auth\",\n          refresh_token: refreshToken,\n        });\n\n        console.log(\"Reconnected and authenticated successfully\");\n        subscribeToMessages();\n        reconnectAttempts = 0;\n        reconnectDelay = 2000;\n      } catch (error) {\n        console.error(\"Reconnection failed:\", error);\n        reconnectDelay = Math.min(reconnectDelay * 1.5, 30000);\n        attemptReconnect();\n      }\n    }\n  }, reconnectDelay);\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Post Structure in Swift\nDESCRIPTION: Creates a Swift struct named Post to represent the data structure of posts fetched from the Directus API. It includes properties for id, title, content, status, and image, as well as computed properties for image URL and HTML stripping.\nSOURCE: https://github.com/directus/docs/blob/main/content/tutorials/1.getting-started/fetch-data-from-directus-in-ios-with-swift.md#2025-04-09_snippet_0\n\nLANGUAGE: swift\nCODE:\n```\nstruct Post: Codable, Identifiable {\n    var id: Int\n    var title: String\n    var content: String\n    var status: String\n    var image: String?\n\n    var imageURL: String? {\n        guard let imageUUID = image else { return nil }\n        return \"https://directus-project-url/assets/\\(imageUUID)\"\n    }\n\n    func stripHTML() -> String {\n        return content.replacingOccurrences(of: \"<[^>]+>\", with: \"\", options: .regularExpression, range: nil)\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Sample Multilingual Content - English Version\nDESCRIPTION: This sample Markdown content describes India's Chandrayaan lunar exploration program in English. It serves as the base content for which translations will be created in multiple languages.\nSOURCE: https://github.com/directus/docs/blob/main/content/tutorials/1.getting-started/implementing-multilingual-content-using-directus-and-next.md#2025-04-09_snippet_7\n\nLANGUAGE: md\nCODE:\n```\nChandrayaan is a series of lunar exploration missions developed by the Indian Space Research Organisation (ISRO) to advance India's space capabilities and scientific understanding of the Moon. The program began with Chandrayaan-1, launched in 2008, which was instrumental in confirming the presence of water molecules on the lunar surface. This groundbreaking discovery reshaped our understanding of the Moon's geology and its potential for future exploration. The spacecraft carried a mix of Indian and international instruments, including NASA's Moon Mineralogy Mapper, and operated for nearly a year before losing communication.\n\nBuilding on this success, Chandrayaan-2 was launched in 2019, featuring an orbiter, lander (Vikram), and rover (Pragyan). While the lander failed to achieve a soft landing, the orbiter continues to send valuable data. In 2023, Chandrayaan-3 made history by successfully landing near the Moon's south pole, making India the first nation to achieve this feat. The mission deployed the Pragyan rover, which conducted in-situ analysis of lunar soil and confirmed the presence of sulfur and other elements. The Chandrayaan program is a testament to India's growing expertise in space exploration and its ambitions for future interplanetary missions.\n```\n\n----------------------------------------\n\nTITLE: Example Live Preview URL with Dynamic ID\nDESCRIPTION: Shows an example of how Directus formats a live preview URL using a dynamic ID. This URL structure is used when sending requests to your application for previewing items.\nSOURCE: https://github.com/directus/docs/blob/main/content/guides/2.content/5.live-preview.md#2025-04-09_snippet_1\n\nLANGUAGE: plaintext\nCODE:\n```\nhttps://mysite.com/posts/{id}\n```\n\n----------------------------------------\n\nTITLE: Advanced Message Handler with Re-authentication for Directus WebSockets\nDESCRIPTION: A comprehensive message handler that processes all WebSocket event types including re-authentication when tokens expire. It uses the refresh token to automatically maintain the connection.\nSOURCE: https://github.com/directus/docs/blob/main/content/tutorials/2.projects/build-a-realtime-chat-app-with-directus-and-next.md#2025-04-09_snippet_13\n\nLANGUAGE: javascript\nCODE:\n```\nconst receiveMessage = (data) => {\n    if (\n      data.uid === 'messages-subscription' &&\n      data.type === 'subscription' &&\n      data.event === 'create'\n    ) {\n      const message = data.data?.[0];\n      if (message) {\n        addMessageToList(message);\n      }\n    } else if (data.type === 'ping') {\n      directus.sendMessage({ type: 'pong' });\n    } else if (data.uid === 'get-recent-messages') {\n      data.data?.reverse().forEach(addMessageToList);\n    } else if (data.type === \"auth\" && data.status === \"expired\") {\n      console.log(\"Authentication expired, re-authenticating...\");\n\n      if (refreshToken) {\n        try {\n          directus.sendMessage({\n            type: \"auth\",\n            refresh_token: refreshToken,\n          });\n          console.log(\"Re-authenticated successfully\");\n        } catch (error) {\n          console.error(\"Re-authentication failed:\", error);\n        }\n      } else {\n        console.log(\"No refresh token available, cannot re-authenticate.\");\n      }\n    }\n  };\n```\n\n----------------------------------------\n\nTITLE: Page View Implementation\nDESCRIPTION: Django view for handling dynamic pages from Directus collection.\nSOURCE: https://github.com/directus/docs/blob/main/content/tutorials/1.getting-started/fetch-data-from-directus-with-django.md#2025-04-09_snippet_7\n\nLANGUAGE: python\nCODE:\n```\nfrom django.shortcuts import render\nfrom django.http import JsonResponse\nfrom .directus_integration import get_collection_items\n\ndef page_view(request, slug):\n    pages = get_collection_items('pages')\n    page = next((p for p in pages['data'] if p['slug'] == slug), None)\n    if page:\n        return render(request, 'page.html', {'page': page})\n    else:\n        return JsonResponse({'error': 'Page not found'}, status=404)\n```\n\n----------------------------------------\n\nTITLE: Creating a Kubernetes Deployment for Directus\nDESCRIPTION: Defines a Kubernetes Deployment for a Directus application. Unlike a standalone Pod, a Deployment manages the lifecycle of Pods and provides update strategies, ensuring the application remains available during updates.\nSOURCE: https://github.com/directus/docs/blob/main/content/tutorials/6.self-hosting/understanding-kubernetes.md#2025-04-09_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: apps/v1\nkind: Deployment\nmetadata:\n  name: directus-deployment\n  labels:\n    app: directus\nspec:\n  selector:\n    matchLabels:\n      app: directus\n  template:\n    metadata:\n      labels:\n        app: directus\n    spec:\n      containers:\n      - name: directus\n        image: directus:10.9.3\n        ports:\n          - containerPort: 80\n        env:\n          - name: PUBLIC_URL\n            value: https://directus.app\n```\n\n----------------------------------------\n\nTITLE: Page Builder Component in Svelte\nDESCRIPTION: Creates a Svelte component that dynamically renders different block types based on the data fetched from Directus.\nSOURCE: https://github.com/directus/docs/blob/main/content/tutorials/1.getting-started/rendering-dynamic-blocks-using-sveltekit.md#2025-04-09_snippet_9\n\nLANGUAGE: svelte\nCODE:\n```\n <!--- src/lib/pageBuilder.svelte-->\n<script>\n    import Hero from '$lib/components/Hero.svelte';\n    import RichText from '$lib/components/RichText.svelte';\n    import CardGroup from '$lib/components/CardGroup.svelte';\n\n    export let blocks = [];\n\n    const blockMap = {\n        block_hero: Hero,\n        block_richtext: RichText,\n        block_cardgroup: CardGroup\n    };\n</script>\n{#if Array.isArray(blocks) && blocks.length > 0}\n    {#each blocks as block (block.id)}\n        {#if block?.collection && blockMap[block.collection]}\n            <svelte:component \n                this={blockMap[block.collection]} \n                data={(typeof block.item === 'object') ? block.item : {}} />\n        {:else}\n            <p>Unknown block type: <strong>{block.collection}</strong></p>\n        {/if}\n    {/each}\n{:else}\n    <p>No blocks found.</p>\n{/if}\n```\n\n----------------------------------------\n\nTITLE: Uploading Files with Directus JavaScript SDK\nDESCRIPTION: Example of uploading multiple files using the Directus JavaScript SDK. Creates a FormData object with file properties and raw file data, then uses the uploadFiles method.\nSOURCE: https://github.com/directus/docs/blob/main/content/guides/5.files/1.upload.md#2025-04-09_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nimport { createDirectus, rest, uploadFiles } from '@directus/sdk';\n\nconst directus = createDirectus('https://directus.example.com').with(rest());\n\nconst formData = new FormData();\nformData.append('file_1_property', 'Value');\nformData.append('file', raw_file);\nformData.append('file_2_property', 'Value');\nformData.append('file', raw_file_2);\n\nconst result = await directus.request(uploadFiles(formData));\n```\n\n----------------------------------------\n\nTITLE: Displaying Global Metadata in SvelteKit Page Component\nDESCRIPTION: Svelte component that displays the global metadata fetched from Directus. It receives the data through the 'data' prop and renders the title and description.\nSOURCE: https://github.com/directus/docs/blob/main/content/tutorials/1.getting-started/fetch-data-from-directus-with-sveltekit.md#2025-04-09_snippet_4\n\nLANGUAGE: svelte\nCODE:\n```\n<script>\n\t/** @type {import('./$types').PageData} */\n\texport let data;\n</script>\n\n<h1>{data.global.title}</h1>\n<p>{data.global.description}</p>\n```\n\n----------------------------------------\n\nTITLE: Authenticating User Login in Directus\nDESCRIPTION: Examples of how to authenticate a user with email and password to receive an access token. Shows implementations using cURL, GraphQL, and the Directus SDK.\nSOURCE: https://github.com/directus/docs/blob/main/content/guides/3.auth/4.email-login.md#2025-04-09_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ncurl \\\n\t--request POST \\\n\t--header 'Content-Type: application/json' \\\n\t--data '{ \"email\": \"hello@example.com\", \"password\": \"d1r3ctu5\" }' \\\n\t--url 'https://directus.example.com/auth/login'\n```\n\nLANGUAGE: graphql\nCODE:\n```\nmutation {\n\tauth_login(email: \"hello@example.com\", password: \"d1r3ctu5\") {\n\t\taccess_token\n\t\trefresh_token\n\t}\n}\n```\n\nLANGUAGE: javascript\nCODE:\n```\nimport { createDirectus, authentication } from '@directus/sdk';\n\nconst email = \"hello@example.com\";\nconst password = \"d1r3ctu5\";\n\nconst client = createDirectus('http://directus.example.com').with(authentication());\n\nconst token = await client.login(email, password);\n```\n\n----------------------------------------\n\nTITLE: Implementing Directus Custom Operation API (JavaScript)\nDESCRIPTION: Complete JavaScript code for the api.js file, implementing the custom Lodash Camel Case operation using the lodash package.\nSOURCE: https://github.com/directus/docs/blob/main/content/tutorials/5.extensions/use-npm-packages-in-custom-operations.md#2025-04-09_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\nimport { defineOperationApi } from '@directus/extensions-sdk';\nimport { camelCase } from 'lodash';\n\nexport default defineOperationApi({\n\tid: 'operation-lodash-camelcase',\n\thandler: ({ text }) => {\n\t\treturn {\n\t\t\ttext: camelCase(text),\n\t\t};\n\t},\n});\n```\n\n----------------------------------------\n\nTITLE: Creating Hero Component for Next.js\nDESCRIPTION: React component for rendering a hero section with headline, image, content, and buttons from Directus data.\nSOURCE: https://github.com/directus/docs/blob/main/content/tutorials/1.getting-started/rendering-dynamic-blocks-using-next.md#2025-04-09_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nimport React from \"react\";\nimport Image from \"next/image\";\n\nexport default function Hero({ id, headline, content, buttons, image }) {\n    return (\n        <section id={id} className=\"hero\">\n            <div className=\"hero_content\">\n                <h2>{headline}</h2>\n                <Image src={`http://localhost:8055/assets/${image}`} alt=\"\" width={700} height={350} />\n                <div dangerouslySetInnerHTML={{ __html: content }} />\n                <div className=\"hero_buttons\">\n                    {buttons?.map((button, index) => (\n                        <button key={index}>{button.label}</button>\n                    ))}\n                </div>\n            </div>\n        </section>\n    );\n\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Blog Post Detail Page with Directus\nDESCRIPTION: Next.js dynamic route component that displays a single blog post with its image, title, and content. Demonstrates image fetching from Directus with transformations.\nSOURCE: https://github.com/directus/docs/blob/main/content/tutorials/1.getting-started/fetch-data-from-directus-with-nextjs.md#2025-04-09_snippet_8\n\nLANGUAGE: jsx\nCODE:\n```\nimport directus from '@/lib/directus';\nimport { readItems } from '@directus/sdk';\nimport { notFound } from 'next/navigation';\n\nasync function getPost(slug) {\n\ttry {\n\t\tconst posts = await directus.request(\n\t\t\treadItems('posts', {\n\t\t\t\tfields: ['*', { slug, image: ['filename_disk'], author: ['name'] }],\n\t\t\t})\n\t\t);\n\n\t\treturn posts[0];\n\t} catch (error) {\n\t\tnotFound();\n\t}\n}\n\nexport default async function DynamicPage({ params }) {\n\tconst post = await getPost(params.slug);\n\treturn (\n\t\t<>\n\t\t\t<img src={`${directus.url}assets/${post.image.filename_disk}?width=600`} alt=\"\" />\n\t\t\t<h1>{post.title}</h1>\n\t\t\t<div dangerouslySetInnerHTML={{ __html: post.content }}></div>\n\t\t</>\n\t);\n}\n```\n\n----------------------------------------\n\nTITLE: Updating SvelteKit Page Component with Search Functionality\nDESCRIPTION: This Svelte component implements the search functionality in the UI. It includes functions for loading latest videos, handling search requests, and conditionally rendering search results or latest videos. The component uses the previously defined searchVideos function.\nSOURCE: https://github.com/directus/docs/blob/main/content/tutorials/2.projects/build-a-video-streaming-app-with-sveltekit-and-directus.md#2025-04-09_snippet_11\n\nLANGUAGE: svelte\nCODE:\n```\n<script lang=\"ts\">\n  import { onMount } from \"svelte\";\n  import { getVideos, searchVideos } from \"$lib/services/index\";\n  import VideoGrid from \"$lib/components/VideoGrid.svelte\";\n  import type { Video } from \"$lib/types\";\n  let videos: Video[] = [];\n  let searchQuery = \"\";\n  let searchResults: Video[] = [];\n  let isSearching = false;\n  onMount(async () => {\n    await loadLatestVideos();\n  });\n  async function loadLatestVideos() {\n    try {\n      videos = (await getVideos({\n        sort: [\"-upload_date\"],\n        limit: 20,\n        fields: [\"*\", \"thumbnail.*\", \"video_file.*\"],\n      })) as Video[];\n    } catch (error) {\n      console.error(\"Error fetching videos:\", error);\n    }\n  }\n  async function handleSearch() {\n    if (searchQuery.trim()) {\n      isSearching = true;\n      try {\n        const response = await searchVideos(searchQuery);\n        searchResults = response as Video[];\n      } catch (error) {\n        console.error(\"Error searching videos:\", error);\n      } finally {\n        isSearching = false;\n      }\n    } else {\n      searchResults = [];\n    }\n  }\n</script>\n<h1>Stream your favorite vidoes</h1>\n<form on:submit|preventDefault={handleSearch}>\n  <input type=\"text\" bind:value={searchQuery} placeholder=\"Search for videos\" />\n  <button type=\"submit\">Search</button>\n</form>\n{#if isSearching}\n  <p>Searching...</p>\n{:else if searchResults.length > 0}\n  <h2>Search Results</h2>\n  <VideoGrid videos={searchResults} />\n{:else if searchQuery}\n  <p>No results found.</p>\n{:else}\n  <h2>Latest Videos</h2>\n  {#if videos.length > 0}\n    <VideoGrid {videos} />\n  {:else}\n    <p>Loading videos...</p>\n  {/if}\n{/if}\n```\n\n----------------------------------------\n\nTITLE: Detailed Relational Updates in Directus\nDESCRIPTION: Example of using the detailed method to create, update, and delete related items in a One-to-Many relationship.\nSOURCE: https://github.com/directus/docs/blob/main/content/guides/4.connect/4.relations.md#2025-04-09_snippet_5\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"cities\": {\n    \"create\": [{ \"name\": \"A new city\" }],\n    \"update\": [{ \"id\": 149, \"name\": \"Update an existing city\" }],\n    \"delete\": [7]\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Generating Dynamic Blog Post Pages with Astro and Directus SDK\nDESCRIPTION: This code creates dynamic blog post pages using Astro's static site generation and Directus SDK. It fetches blog post data, generates static paths, and renders the content with image transformations.\nSOURCE: https://github.com/directus/docs/blob/main/content/tutorials/1.getting-started/fetch-data-from-directus-with-astro.md#2025-04-09_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\n---\nimport Layout from \"../../layouts/Layout.astro\";\nimport directus from \"../../lib/directus\";\nimport { readItems, readItem } from \"@directus/sdk\";\n\nexport async function getStaticPaths() {\n  const posts = await directus.request(readItems(\"posts\", {\n    fields: ['*', { relation: ['*'] }],\n  }));\n  return posts.map((post) => ({ params: { slug: post.slug }, props: post }));\n}\nconst post = Astro.props;\n---\n\n<Layout title={post.title}>\n  <main>\n    <img src={`YOUR_DIRECTUS_URL/assets/${post.image}?width=500`} />\n    <h1>{post.title}</h1>\n    <div set:html={post.content} />\n  </main>\n</Layout>\n```\n\n----------------------------------------\n\nTITLE: Loading Blog Post Data with Directus SDK in SvelteKit\nDESCRIPTION: This code defines the page load function that fetches a specific blog post from Directus based on the URL slug parameter. It uses the Directus JavaScript SDK to retrieve the post with all its fields and related image data, handling 404 errors when posts aren't found.\nSOURCE: https://github.com/directus/docs/blob/main/content/tutorials/1.getting-started/fetch-data-from-directus-with-sveltekit.md#2025-04-09_snippet_9\n\nLANGUAGE: javascript\nCODE:\n```\n/** @type {import('./$types').PageLoad} */\nimport { error } from '@sveltejs/kit';\nimport getDirectusInstance from '$lib/directus';\nimport { readItems } from '@directus/sdk';\nexport async function load({ fetch, params }) {\n\tconst directus = getDirectusInstance(fetch);\n\ttry {\n\t\treturn {\n\t\t\tpost: await directus.request(readItems('posts', {\n\t\t\t\tfields: ['*', { slug: params.slug, '*': ['*'] }],\n\t\t\t}))[0],\n\t\t};\n\t} catch (err) {\n\t\terror(404, 'Post not found');\n\t}\n}\n```\n\n----------------------------------------\n\nTITLE: New Post Page in Astro with Authentication Check\nDESCRIPTION: This Astro page provides a form for creating new posts, first checking if the user is authenticated. It renders a PostForm component that submits to an API endpoint for creating posts and redirects unauthenticated users to the login page.\nSOURCE: https://github.com/directus/docs/blob/main/content/tutorials/1.getting-started/using-authentication-in-astro.md#2025-04-09_snippet_14\n\nLANGUAGE: astro\nCODE:\n```\n---\nimport Layout from '../../../layouts/Layout.astro';\nimport NewPostForm from '../../../components/Posts.astro';\n\nconst token = Astro.cookies.get(\"directus_session_token\");\n\nif (!token) {\n  return Astro.redirect(\"/login\");\n}\n\n\n---\n<Layout>\n  <h1>New Post</h1>\n  <PostForm action=\"/api/posts/new\" />\n</Layout>\n```\n\n----------------------------------------\n\nTITLE: Implementing Homepage with Global Metadata from Directus\nDESCRIPTION: Next.js page component that fetches global site metadata from Directus and renders it. Uses the Directus SDK to fetch data from the 'global' singleton collection.\nSOURCE: https://github.com/directus/docs/blob/main/content/tutorials/1.getting-started/fetch-data-from-directus-with-nextjs.md#2025-04-09_snippet_4\n\nLANGUAGE: jsx\nCODE:\n```\nimport directus from '@/lib/directus';\nimport { readItems } from '@directus/sdk';\n\nasync function getGlobals() {\n\treturn directus.request(readItems('global'));\n}\n\nexport default async function HomePage() {\n\tconst global = await getGlobals();\n\treturn (\n\t\t<div>\n\t\t\t<h1>{global.title}</h1>\n\t\t\t<p>{global.description}</p>\n\t\t</div>\n\t);\n}\n```\n\n----------------------------------------\n\nTITLE: Fetching Dynamic Page Content from Directus in SvelteKit\nDESCRIPTION: SvelteKit page load function for dynamic routes. It fetches page content from Directus based on the URL slug, handling 404 errors for non-existent pages.\nSOURCE: https://github.com/directus/docs/blob/main/content/tutorials/1.getting-started/fetch-data-from-directus-with-sveltekit.md#2025-04-09_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\n/** @type {import('./$types').PageLoad} */\nimport { error } from '@sveltejs/kit';\nimport getDirectusInstance from '$lib/directus';\nimport { readItems } from '@directus/sdk';\nexport async function load({ fetch, params }) {\n\tconst directus = getDirectusInstance(fetch);\n\n\ttry {\n\t\treturn {\n\t\t\tpage: await directus.request(readItems('pages', [{slug: params.slug}]))[0],\n\t\t};\n\t} catch (err) {\n\t\tthrow error(404, 'Page not found');\n\t}\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Environment Variables in a Directus Pod\nDESCRIPTION: Demonstrates how to add environment variables to a Directus Pod configuration. This example shows setting the PUBLIC_URL environment variable, which is a common requirement for Directus deployments.\nSOURCE: https://github.com/directus/docs/blob/main/content/tutorials/6.self-hosting/understanding-kubernetes.md#2025-04-09_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: v1\nkind: Pod\nmetadata:\n  name: directus-app\n  labels:\n    app: directus\nspec:\n  containers:\n  - name: directus\n    image: directus/directus:10.8.3\n    ports:\n      - containerPort: 80\n    env:\n      - name: PUBLIC_URL\n        value: https://directus.app\n```\n\n----------------------------------------\n\nTITLE: Generating 2FA Secret in Directus API\nDESCRIPTION: This snippet demonstrates how to generate a 2FA secret using the Directus API. It requires sending a POST request with the user's password. The response includes a secret and an otpauth_url for setting up OTPs in an authenticator app.\nSOURCE: https://github.com/directus/docs/blob/main/content/guides/3.auth/5.2fa.md#2025-04-09_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n\t\"password\": \"d1r3ctu5\"\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Cross-Domain Cookies in Directus SDK\nDESCRIPTION: Shows how to configure Directus SDK for cross-domain cookie handling across authentication, GraphQL, and REST requests.\nSOURCE: https://github.com/directus/docs/blob/main/content/guides/4.connect/6.sdk.md#2025-04-09_snippet_9\n\nLANGUAGE: javascript\nCODE:\n```\nconst directus = createDirectus('http://directus.example.com')\n  .with(authentication('cookie', { credentials: 'include' }))\n  .with(graphql({ credentials: 'include' }))\n  .with(rest({ credentials: 'include' }));\n```\n\n----------------------------------------\n\nTITLE: Implementing Preview Mode for Non-Public Posts in Next.js\nDESCRIPTION: Creates a page component that retrieves and displays a post in preview mode, including support for content versioning.\nSOURCE: https://github.com/directus/docs/blob/main/content/tutorials/1.getting-started/implementing-live-preview-in-next-js.md#2025-04-09_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nimport { directus, readItem, withToken } from '@/lib/directus';\nimport { redirect } from 'next/navigation';\n\nexport default async function Page({\n  params, searchParams\n}: {\n  params: Promise<{ id: string}>;\n  searchParams: Promise<{ preview: boolean, token: string, version: string | undefined }>;\n}) {\n  const id = (await params).id;\n  const {preview, token, version} = (await searchParams)\n\n\n  const post = await directus.request(withToken(token, readItem('posts', id, {\n    fields: ['id', 'title', 'content', 'slug'],\n    ...(version && { version }),\n  })));\n\n  if (!preview) {\n    redirect(`/posts/${post.slug}`);\n  }\n\n  return (\n    <>\n      <h1>{post.title}</h1>\n      <div dangerouslySetInnerHTML={{ __html: post.content }} />\n    </>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Basic Post Retrieval by Slug\nDESCRIPTION: Vue component that fetches post content based on URL slug parameter using Directus API. Includes error handling and basic post display.\nSOURCE: https://github.com/directus/docs/blob/main/content/tutorials/1.getting-started/implementing-multilingual-content-using-directus-and-nuxt.md#2025-04-09_snippet_13\n\nLANGUAGE: vue\nCODE:\n```\n<script setup lang=\"ts\">\nconst { $directus, $readItems } = useNuxtApp()\nconst route = useRoute()\nconst post: Ref<Post | null> = ref(null)\n\nconst { data, error } = await useAsyncData('post', async () => {\n\tconst slugParam = Array.isArray(route.params.slug) ? route.params.slug[0] : route.params.slug\n\treturn $directus.request($readItems('posts', {\n\t\tfilter: {\n\t\t\tslug: { _eq: slugParam }\n\t\t},\n\t\tfields: ['id', 'title', 'content', 'slug'],\n\t\tlimit: 1\n\t}))\n})\n\nif (error.value || data.value === null) {\n\tconsole.error(error)\n\tthrow createError({\n\t\tstatusCode: 404,\n\t\tstatusMessage: \"Post not found\"\n\t})\n}\n\npost.value = data.value[0]\n</script>\n<template>\n\t<div v-if=\"post\">\n\t\t<h1>{{ post.title }}</h1>\n\t\t<p>{{ post.content }}</p>\n\t</div>\n\t<div v-else>Loading...</div>\n</template>\n```\n\n----------------------------------------\n\nTITLE: Configuring Directus SDK Client\nDESCRIPTION: JavaScript configuration for setting up Directus client with REST functionality\nSOURCE: https://github.com/directus/docs/blob/main/content/tutorials/1.getting-started/using-authentication-in-sveltekit.md#2025-04-09_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\n// src/lib/directus.js\nimport { createDirectus, rest } from \"@directus/sdk\";\nconst directusUrl = \"http://localhost:8055\";\nexport const client = createDirectus(directusUrl).with(rest());\n```\n\n----------------------------------------\n\nTITLE: Creating ArticleController for Handling Web Requests in Java\nDESCRIPTION: Defines a Spring MVC controller to handle GET requests for articles. It injects the ArticleService, retrieves articles, and adds them to the model for rendering in a Thymeleaf template.\nSOURCE: https://github.com/directus/docs/blob/main/content/tutorials/1.getting-started/fetch-data-from-directus-with-spring-boot.md#2025-04-09_snippet_4\n\nLANGUAGE: java\nCODE:\n```\npackage com.directus.blog.controller;\n\nimport com.directus.blog.service.ArticleService;\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.stereotype.Controller;\nimport org.springframework.ui.Model;\nimport org.springframework.web.bind.annotation.GetMapping;\nimport org.springframework.web.bind.annotation.RequestMapping;\n\n@Controller\n@RequestMapping(\"/\")\npublic class ArticleController {\n    private final ArticleService articleService;\n\n    @Autowired\n    public ArticleController(ArticleService articleService) {\n        this.articleService = articleService;\n    }\n\n    @GetMapping\n    public String getAllArticles(Model model){\n        model.addAttribute(\"articles\",\n                articleService.getAllArticles());\n        return \"index\";\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Retrieving Specific Fields with Directus API\nDESCRIPTION: Demonstrates how to use the fields parameter to specify which fields are returned in API responses. Supports dot notation for nested relational fields and wildcards (*) to include all fields at a specific depth.\nSOURCE: https://github.com/directus/docs/blob/main/content/guides/4.connect/3.query-parameters.md#2025-04-09_snippet_0\n\nLANGUAGE: http\nCODE:\n```\nGET /items/posts\n\t?fields=first_name,last_name,avatar.description\n```\n\nLANGUAGE: graphql\nCODE:\n```\nUse native GraphQL queries.\n```\n\nLANGUAGE: json\nCODE:\n```\n{\n\t\"fields\": [\"first_name\", \"last_name\", { \"avatar\": [\"description\"] }]\n}\n```\n\n----------------------------------------\n\nTITLE: Fetching Collection Items with useItems\nDESCRIPTION: The useItems composable retrieves items from a collection with support for pagination, filtering, sorting, and searching.\nSOURCE: https://github.com/directus/docs/blob/main/content/guides/9.extensions/3.app-extensions/8.composables.md#2025-04-09_snippet_6\n\nLANGUAGE: html\nCODE:\n```\n<script setup>\nimport { useItems } from '@directus/extensions-sdk';\n\nconst collectionRef = ref('collection_key');\n\nconst query = {\n  fields: ref(['*']),\n  limit: ref(1),\n  sort: ref(null),\n  search: ref(null),\n  filter: ref(null),\n  page: ref(1),\n}\n\nconst { getItems, items } = useItems(collectionRef, query);\n\nquery.search.value = 'search_value' // update query search\n\nquery.limit.value = 10 // update query limit\n\nawait getItems(); // fetch the items\n\nconst data = items.value; // read the items\n</script>\n```\n\n----------------------------------------\n\nTITLE: Creating Django App\nDESCRIPTION: Command to create a new Django application named 'blog'.\nSOURCE: https://github.com/directus/docs/blob/main/content/tutorials/1.getting-started/fetch-data-from-directus-with-django.md#2025-04-09_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\npython manage.py startapp blog\n```\n\n----------------------------------------\n\nTITLE: Many-to-Any Relationship Example\nDESCRIPTION: Example of working with Many-to-Any (Union Types) relationships, showing how to structure data for different collection types.\nSOURCE: https://github.com/directus/docs/blob/main/content/guides/4.connect/4.relations.md#2025-04-09_snippet_6\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"sections\": [\n    {\n      \"collection\": \"headings\",\n      \"item\": {\n        /* headings fields */\n      }\n    },\n    {\n      \"collection\": \"paragraphs\",\n      \"item\": {\n        /* paragraphs fields */\n      }\n    }\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Page-Based Pagination in Directus API\nDESCRIPTION: Shows how to use the page parameter as an alternative to offset for pagination. Returned values are the value of limit multiplied by page, with the first page being 1.\nSOURCE: https://github.com/directus/docs/blob/main/content/guides/4.connect/3.query-parameters.md#2025-04-09_snippet_7\n\nLANGUAGE: http\nCODE:\n```\nGET /items/posts\n\t?page=2\n```\n\nLANGUAGE: graphql\nCODE:\n```\nquery {\n\tposts(page: 2) {\n\t\tid\n\t}\n}\n```\n\nLANGUAGE: js\nCODE:\n```\nimport { createDirectus, rest, readItems } from '@directus/sdk';\nconst directus = createDirectus('https://directus.example.com').with(rest());\n\nconst result = await directus.request(\n\treadItems('posts', {\n\t\tpage: 2,\n\t})\n);\n```\n\n----------------------------------------\n\nTITLE: Filtering Specific CRUD Actions in WebSocket Subscriptions\nDESCRIPTION: Use the 'event' argument to filter for specific create, update, or delete events when initializing a WebSocket subscription.\nSOURCE: https://github.com/directus/docs/blob/main/content/guides/7.realtime/2.subscriptions.md#2025-04-09_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n{\n\t\"type\": \"subscribe\",\n\t\"collection\": \"messages\",\n\t\"event\": \"create\"\n}\n```\n\n----------------------------------------\n\nTITLE: Navigation Component\nDESCRIPTION: Vue template for site-wide navigation\nSOURCE: https://github.com/directus/docs/blob/main/content/tutorials/1.getting-started/fetch-data-from-directus-with-nuxt.md#2025-04-09_snippet_7\n\nLANGUAGE: vue\nCODE:\n```\n<nav>\n\t<NuxtLink to=\"/\">Home</NuxtLink>\n\t<NuxtLink to=\"/about\">About</NuxtLink>\n\t<NuxtLink to=\"/conduct\">Code of Conduct</NuxtLink>\n\t<NuxtLink to=\"/privacy\">Privacy Policy</NuxtLink>\n\t<NuxtLink to=\"/blog\">Blog</NuxtLink>\n</nav>\n```\n\n----------------------------------------\n\nTITLE: Initializing FieldsService in Directus API Extension\nDESCRIPTION: This snippet illustrates how to initialize the FieldsService within a Directus API extension route handler. It shows the required parameters and basic setup.\nSOURCE: https://github.com/directus/docs/blob/main/content/guides/9.extensions/2.api-extensions/4.services.md#2025-04-09_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nexport default (router, context) => {\n\tconst { services, getSchema } = context;\n\tconst { FieldsService } = services;\n\n\trouter.get('/', async (req, res) => {\n\t\tconst fieldsService = new FieldsService({\n\t\t\tschema: await getSchema(),\n\t\t\taccountability: req.accountability\n\t\t});\n\n\t\t// Your route handler logic\n\t});\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Site Navigation Layout in SvelteKit\nDESCRIPTION: This Svelte layout component adds a basic navigation menu to the site, linking to the home page, about page, code of conduct, privacy policy, and blog. The layout uses the slot element to render the content of each page within this navigation wrapper.\nSOURCE: https://github.com/directus/docs/blob/main/content/tutorials/1.getting-started/fetch-data-from-directus-with-sveltekit.md#2025-04-09_snippet_11\n\nLANGUAGE: svelte\nCODE:\n```\n<a href=\"/\">Home</a>\n<a href=\"/about\">About</a>\n<a href=\"/conduct\">Code of Conduct</a>\n<a href=\"/privacy\">Privacy Policy</a>\n<a href=\"/blog\">Blog</a>\n<div>\n\t<slot />\n</div>\n```\n\n----------------------------------------\n\nTITLE: Creating a Blog Posts Index View\nDESCRIPTION: HTML template for displaying a list of blog posts with Laravel Blade syntax. It creates a loop to display all posts with links to individual post pages.\nSOURCE: https://github.com/directus/docs/blob/main/content/tutorials/1.getting-started/fetch-data-from-directus-with-laravel.md#2025-04-09_snippet_13\n\nLANGUAGE: html\nCODE:\n```\n<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <title>Blog Posts</title>\n</head>\n<body>\n    <h1>Blog Posts</h1>\n    @foreach($posts as $post)\n        <article>\n            <h2><a href=\"{{ route('posts.show', $post['id']) }}\">{{ $post['title'] }}</a></h2>\n            <p>Posted on: {{ date('F j, Y', strtotime($post['date_created'])) }}</p>\n        </article>\n    @endforeach\n</body>\n</html>\n```\n\n----------------------------------------\n\nTITLE: Creating a Dynamic Page Route for Posts in Next.js\nDESCRIPTION: This code creates a dynamic route in Next.js that fetches post data based on the URL slug. It uses the Directus SDK to query posts with a matching slug and displays the title and content, with error handling for non-existent posts.\nSOURCE: https://github.com/directus/docs/blob/main/content/tutorials/1.getting-started/implementing-multilingual-content-using-directus-and-next.md#2025-04-09_snippet_6\n\nLANGUAGE: js\nCODE:\n```\nimport { React } from 'react';\nimport client from '@/lib/directus';\nimport { readItems } from '@directus/sdk';\n\nexport default async function Page({ params: {slug} }) {\n\n    try {\n    const post = await client.request(readItems(\n        'posts',\n        {filter: { slug: {_eq: slug}}}\n    ));\n\n    console.log(post)\n\n\tif (!post) {\n\t\treturn null;\n\t}\n\n\tconst { title, content } = post[0];\n\n    return (<div>\n        <div>\n            <h1>{ title }</h1>\n            <p>{ content }</p>\n        </div>\n    </div>)\n    } catch (e) {\n        console.log(e)\n        return <div>This post does not exist</div>\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Room Summary Widget Component in TypeScript/React\nDESCRIPTION: A React component that displays a summary of the selected room details including room type, check-in/out dates, total price and number of nights.\nSOURCE: https://github.com/directus/docs/blob/main/content/tutorials/2.projects/build-an-hotel-booking-platform-with-next-js-stripe-and-directus-automate.md#2025-04-09_snippet_12\n\nLANGUAGE: tsx\nCODE:\n```\ntype RoomType = {\n  roomType: string,\n  checkInDate: string,\n  checkOutDate: string,\n  nights: number,\n  totalPrice: number\n}\nexport default function RoomWidget({\n  roomType,\n  checkInDate,\n  checkOutDate,\n  nights,\n  totalPrice,\n}: RoomType) {\n  return (\n    <div>\n      <h3>{roomType}</h3>\n      <p>Check In Date: <span>{checkInDate}</span></p>\n      <p>Check Out Date: <span>{checkOutDate}</span></p>\n      <p>Total Cost: {totalPrice}</p>\n      <p>{ nights } Night (s)</p>\n    </div>\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Exporting API Response to File in Directus\nDESCRIPTION: Shows how to use the Export parameter to save the API response to a file. Supported file types are CSV, JSON, XML, and YAML.\nSOURCE: https://github.com/directus/docs/blob/main/content/guides/4.connect/3.query-parameters.md#2025-04-09_snippet_13\n\nLANGUAGE: http\nCODE:\n```\nGET /items/posts\n?export=type\n```\n\n----------------------------------------\n\nTITLE: Initializing SolidStart Project with CLI Commands\nDESCRIPTION: CLI commands to create a new SolidStart project and install Directus SDK dependencies\nSOURCE: https://github.com/directus/docs/blob/main/content/tutorials/1.getting-started/fetch-data-from-directus-with-solidstart.md#2025-04-09_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\nnpm create solid@latest solid-directus\n✔ Which template do you want to use?\n  › bare\n✔ Server Side Rendering?\n  › yes\n✔ Use TypeScript?\n  › no\n```\n\nLANGUAGE: sh\nCODE:\n```\ncd solid-directus && npm install @directus/sdk\n```\n\nLANGUAGE: sh\nCODE:\n```\nnpm run dev --open\n```\n\n----------------------------------------\n\nTITLE: Basic One-to-Many Relationship Example\nDESCRIPTION: Example of managing a One-to-Many relationship between countries and cities using an array of IDs.\nSOURCE: https://github.com/directus/docs/blob/main/content/guides/4.connect/4.relations.md#2025-04-09_snippet_3\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"cities\": [2, 7, 149]\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Contact Selection Interface\nDESCRIPTION: Implements a multi-select dropdown for choosing recipients from the contact list when batch send is disabled.\nSOURCE: https://github.com/directus/docs/blob/main/content/tutorials/5.extensions/send-sms-messages-with-twilio-in-custom-panels.md#2025-04-09_snippet_19\n\nLANGUAGE: vue\nCODE:\n```\n<div v-else class=\"twilio-sms\" :class=\"{ 'has-header': showHeader }\">\n\t<v-input v-model=\"recipient\" placeholder=\"+0000000000\" v-if=\"phoneNumberField == ''\"/>\n\t<v-select \n\t\tv-else-if=\"!batchSend\" \n\t\tmultiple \n\t\t:model-value=\"recipients\" \n\t\t:items=\"contacts\" \n\t\t:show-deselect=\"true\" \n\t\tplaceholder=\"Select contacts\" \n\t\t:allow-other=\"true\" \n\t\t:close-on-content-click=\"false\" \n\t\t:multiple-preview-threshold=\"3\" \n\t\t:value=\"recipients\" \n\t\t@update:model-value=\"updateNumbers($event)\" \n\t></v-select> \n</div>\n```\n\n----------------------------------------\n\nTITLE: Subscribing to Changes in Directus Realtime\nDESCRIPTION: This JavaScript snippet shows how to create a subscription to the 'messages' collection. It listens for 'create' events and logs new items to the console. The subscription retrieves only the 'user' and 'text' fields of created items.\nSOURCE: https://github.com/directus/docs/blob/main/content/getting-started/8.connect-to-realtime.md#2025-04-09_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nconst { subscription } = await directus.subscribe('messages', {\n\tevent: 'create',\n\tquery: { fields: ['user', 'text'] },\n});\n\nfor await (const item of subscription) {\n\tconsole.log(item);\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a Directus Plugin for Nuxt\nDESCRIPTION: TypeScript code for a Nuxt plugin that creates and configures a Directus client using the SDK, providing access to Directus functionality throughout the application.\nSOURCE: https://github.com/directus/docs/blob/main/content/tutorials/1.getting-started/implementing-live-preview-in-nuxt.md#2025-04-09_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\nimport {\n\tcreateDirectus,\n\trest,\n\treadItem,\n\treadItems,\n\twithToken,\n} from \"@directus/sdk\";\n\nconst directus = createDirectus<DirectusSchema>(\n\t\"http://your-website-url/directus\",\n).with(rest());\n\nexport default defineNuxtPlugin(() => {\n\treturn {\n\t\tprovide: { directus, readItem, readItems, withToken },\n\t};\n});\n```\n\n----------------------------------------\n\nTITLE: Files Type Alias Configuration\nDESCRIPTION: Configuration for multiple file upload interface that creates M2M junction collection.\nSOURCE: https://github.com/directus/docs/blob/main/content/guides/1.data-model/3.interfaces.md#2025-04-09_snippet_2\n\nLANGUAGE: markdown\nCODE:\n```\n| Configuration    | Options                                                                                                                      |\n| ---------------- | ---------------------------------------------------------------------------------------------------------------------------- |\n| Types            | `Alias`                                                                                                                      |\n| Folder           | Folder for the uploaded files. Does not affect the location of existing files.                                               |\n| Display Template | Display templates are used to represent an item in relationship fields - for example to show the value of the `Title` field. |\n```\n\n----------------------------------------\n\nTITLE: Initializing RelationsService in Directus API Extension\nDESCRIPTION: This snippet demonstrates how to initialize the RelationsService within a Directus API extension route handler. It shows the required parameters and basic setup.\nSOURCE: https://github.com/directus/docs/blob/main/content/guides/9.extensions/2.api-extensions/4.services.md#2025-04-09_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\nexport default (router, context) => {\n  const { services, getSchema } = context;\n  const { RelationsService } = services;\n\n  router.get('/', async (req, res) => {\n    const relationsService = new RelationsService({\n      schema: await getSchema(),\n      accountability: req.accountability\n    });\n\n    // Your route handler logic\n  });\n};\n```\n\n----------------------------------------\n\nTITLE: Implementing Shipping Form Component in Next.js with Stripe Integration\nDESCRIPTION: A client-side React component that collects shipping information from users, calculates the total cart amount, and initiates a Stripe payment session. The form submits user and cart data to the server-side API endpoint for Stripe session creation.\nSOURCE: https://github.com/directus/docs/blob/main/content/tutorials/2.projects/build-an-ecommerce-platform-with-next-js-stripe-and-directus-automate.md#2025-04-09_snippet_17\n\nLANGUAGE: tsx\nCODE:\n```\n\"use client\";\n\nimport { CartContext } from \"@/app/context/cart-context\";\nimport { useContext } from \"react\";\n\nexport default function ShippingForm() {\n  const cart = useContext(CartContext);\n\n  const handleSubmit = async (e: React.FormEvent<HTMLFormElement>) => {\n    e.preventDefault();\n    const formData = new FormData(e.currentTarget);\n    const shippingInfo = Object.fromEntries(formData.entries());\n    const orderData = {\n      email: shippingInfo.email,\n      first_name: shippingInfo.firstName,\n      last_name: shippingInfo.lastName,\n      shipping_address: shippingInfo.shippingAddress,\n      total_amount: cart.getCartTotal(),\n      products: cart.cartItems,\n    };\n    try {\n      console.log({orderData})\n      const response = await fetch(\"/api/stripe-session\", {\n        method: \"POST\",\n        body: JSON.stringify(orderData),\n      });\n\n      if (response.ok) {\n        const payment = await response.json();\n        window.location.href = payment.url;\n      } else {\n        console.error(\"Error submitting form:\", response.statusText);\n      }\n    } catch (error) {\n      console.error(\"Error:\", error);\n    }\n  }\n  return (\n    <form onSubmit={handleSubmit}>\n      <label>\n        Email\n        <input type=\"email\" name=\"email\"   />\n      </label>\n      <label>\n        First Name\n        <input type=\"text\" name=\"firstName\" />\n      </label>\n      <label>\n        Last Name\n        <input type=\"text\" name=\"lastName\" />\n      </label>\n      <label>\n        Shipping Address\n        <input type=\"text\" name=\"shippingAddress\" />\n      </label>\n      <button type=\"submit\">Proceed to Payment</button>\n    </form>\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Video Search Function with Directus in TypeScript\nDESCRIPTION: This function uses the Directus client to search for videos based on a query string. It returns an array of Video objects that match the search criteria, including fields for thumbnail and video file information.\nSOURCE: https://github.com/directus/docs/blob/main/content/tutorials/2.projects/build-a-video-streaming-app-with-sveltekit-and-directus.md#2025-04-09_snippet_10\n\nLANGUAGE: typescript\nCODE:\n```\nexport async function searchVideos(query: string): Promise<Video[]> {\n  const directus = getDirectusClient();\n  const response = await directus.request(\n    readItems(\"videos\", {\n      search: query,\n      fields: [\"*\", \"thumbnail.*\", \"video_file.*\"],\n    })\n  );\n  return response as Video[];\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Navigation in Flutter Blog App\nDESCRIPTION: Updates the BlogPostItem widget to add navigation to individual blog post pages when a post is tapped. Uses Navigator.push to transition to the BlogPostWidget.\nSOURCE: https://github.com/directus/docs/blob/main/content/tutorials/1.getting-started/fetch-data-from-directus-with-flutter.md#2025-04-09_snippet_14\n\nLANGUAGE: Dart\nCODE:\n```\nclass BlogPostItem extends StatelessWidget {\n  final dynamic blogPost;\n  const BlogPostItem({\n    super.key,\n    required this.blogPost,\n  });\n  @override\n  Widget build(BuildContext context) {\n    return GestureDetector(\n      onTap: () {\n        Navigator.push(\n          context,\n          MaterialPageRoute(\n            builder: (context) => BlogPostWidget(post: blogPost),\n          ),\n        );\n      },\n      child: Container(\n        margin: const EdgeInsets.only(bottom: 16.0),\n        child: Column(\n          crossAxisAlignment: CrossAxisAlignment.start,\n          children: [\n            Text(\n              blogPost['title'],\n              style: Theme.of(context).textTheme.labelLarge,\n            ),\n          ],\n        ),\n      ),\n    );\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Installing Required Dependencies\nDESCRIPTION: Command to install the necessary npm packages for the project, including Directus SDK for backend integration, Day.js for date handling, React Datepicker for the calendar component, and Stripe.js for payment processing.\nSOURCE: https://github.com/directus/docs/blob/main/content/tutorials/2.projects/build-an-hotel-booking-platform-with-next-js-stripe-and-directus-automate.md#2025-04-09_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\nnpm i @directus/sdk dayjs react-datepicker @stripe/stripe-js\n```\n\n----------------------------------------\n\nTITLE: Configuring OpenAI API Request Body for Social Post Generation in JSON\nDESCRIPTION: This JSON snippet configures the request body for the OpenAI API call. It specifies the GPT-4 model and includes system and user messages to generate a Twitter post based on a recipe article title.\nSOURCE: https://github.com/directus/docs/blob/main/content/tutorials/7.workflows/generate-social-posts-with-gpt-4-and-directus-automate.md#2025-04-09_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n\t\"model\": \"gpt-4\",\n    \"messages\": [\n    \t{\n        \t\"role\": \"system\",\n            \"content\": \"You are the social media manager of a blog who takes recipe articles and writes compelling promotional posts for social media based on the copy I provide. The audience is busy professionals who have little time.\"\n        },\n        {\n        \t\"role\": \"user\",\n            \"content\": \"Write a Twitter post for our {{article.title}} recipe.\"\n        }\n    ]\n}\n```\n\n----------------------------------------\n\nTITLE: Content Template Structure\nDESCRIPTION: HTML template structure for rendering page content including banner, cards, and body content.\nSOURCE: https://github.com/directus/docs/blob/main/content/tutorials/5.extensions/implement-navigation-in-multipage-custom-modules.md#2025-04-09_snippet_11\n\nLANGUAGE: html\nCODE:\n```\n<div class=\"lp-container\">\n  <div class=\"lp-banner\" v-if=\"page_banner\">\n    <img :src=\"page_banner\" alt=\"\"/>\n  </div>\n  <div class=\"lp-cards\" v-if=\"page_cards\">\n    <div class=\"lp-card\" v-for=\"card in page_cards.filter(item => (item.uri != page))\" :key=\"card.uri\" @click=\"change_page(card.to)\">\n      <img class=\"lp-card-image\" :src=\"card.image\" alt=\"\"/>\n      <span class=\"lp-card-title\">{{ card.label }}</span>\n    </div>\n  </div>\n  <div class=\"lp-body\" v-if=\"page_body\" v-html=\"page_body\"></div>\n</div>\n```\n\n----------------------------------------\n\nTITLE: Using SQL Functions in Filters with Directus API\nDESCRIPTION: Demonstrates how to use SQL functions in filters for Directus API queries. Examples are provided for REST, GraphQL, and the Directus SDK.\nSOURCE: https://github.com/directus/docs/blob/main/content/guides/4.connect/3.query-parameters.md#2025-04-09_snippet_14\n\nLANGUAGE: http\nCODE:\n```\nGET /items/posts\n\t?filter[year(date_published)][_eq]=1968\n```\n\nLANGUAGE: graphql\nCODE:\n```\nquery {\n\tposts(filter: { date_published_func: { year: { _eq: 1968 } } }) {\n\t\tid\n\t}\n}\n\n# Due to GraphQL name limitations, append `_func` at the end of the field name and use the function name as the nested field.\n```\n\nLANGUAGE: javascript\nCODE:\n```\nimport { createDirectus, rest, readItems } from '@directus/sdk';\nconst directus = createDirectus('https://directus.example.com').with(rest());\n\nconst result = await directus.request(\n\treadItems('posts', {\n\t\tfilter: {\n\t\t\t\"year(date_published)\": {\n\t\t\t\t_eq: 1968\n\t\t\t}\n\t\t},\n\t})\n);\n```\n\n----------------------------------------\n\nTITLE: Defining Directus Schema Types in TypeScript\nDESCRIPTION: TypeScript declaration file for defining the structure of Directus data, including posts and translations interfaces.\nSOURCE: https://github.com/directus/docs/blob/main/content/tutorials/1.getting-started/implementing-multilingual-content-using-directus-and-nuxt.md#2025-04-09_snippet_6\n\nLANGUAGE: ts\nCODE:\n```\n/// <reference types=\"@directus/extensions/api.d.ts\" />\ninterface DirectusSchema {\n\tposts: Post[];\n\tposts_translations: PostTranslation[];\n}\ninterface Post {\n\tid: number;\n\ttitle: string;\n\tcontent: string;\n\tslug?: string;\n}\n\ninterface PostTranslation {\n\tid: number;\n\ttitle: string;\n\tcontent: string;\n\tlanguages_code: string;\n\tposts_id: number;\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Content Versioning with Live Preview\nDESCRIPTION: Enhanced version of the article fetch function that supports content versioning, allowing preview of different content versions using version parameter in URL.\nSOURCE: https://github.com/directus/docs/blob/main/content/tutorials/1.getting-started/implementing-live-preview-in-react.md#2025-04-09_snippet_14\n\nLANGUAGE: js\nCODE:\n```\nconst fetchArticle = async () => {\n  const token = query.get(\"token\");\n  const isPreview = query.get(\"preview\");\n  let result\n  \n  // Replace the following line..\n  // const getPost = (id) => readItem('posts', id)\n\n  // ...with these two\n  const version = query.get(\"version\")\n  const getPost = (id) => readItem('posts', id, {version})\n\n  try {\n    if (isPreview && token)\n      result = await client.request(withToken(token, getPost(id)));\n    else\n      result = await client.request(getPost(id));\n  } catch (error) {\n    console.log('Error fetching article:', error);\n    result = {\n      title: \"Post not found\",\n      content: \"We couldn't find this post\"\n    }\n  }\n  setArticle(result);\n};\n```\n\n----------------------------------------\n\nTITLE: Customer Payments Endpoint\nDESCRIPTION: Endpoint implementation for retrieving payments for a specific customer\nSOURCE: https://github.com/directus/docs/blob/main/content/tutorials/5.extensions/check-permissions-in-a-custom-endpoint.md#2025-04-09_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nrouter.get('/payments/:customer_id', async (req, res) => {\n  try {\n    const response = await fetch(\"http://directus.example.com/permissions/me\", {\n      headers: {\n        'Authorization': `Bearer ${req.token}`,\n        'Content-Type': 'application/json'\n      }\n    });\n    const permissions = await response.json();\n\n    let output = [];\n    if (permissions.data[env.STRIPE_CUSTOMERS_COLLECTION]?.read?.access === \"full\")) {\n      stripe.paymentIntents.list({\n        customer: req.params.customer_id,\n        limit: 100\n      }).autoPagingEach(function(payments) {\n        output.push(payments);\n      }).then(() => {\n        res.json(output);\n      });\n    } else {\n      res.sendStatus(401);\n    }\n  }\n  catch(e) {\n    res.sendStatus(401);\n  }\n});\n```\n\n----------------------------------------\n\nTITLE: Implementing Home Screen UI with Jetpack Compose\nDESCRIPTION: Creates a composable function for the home screen that fetches and displays global metadata. Handles loading state, error handling, and UI rendering using Jetpack Compose.\nSOURCE: https://github.com/directus/docs/blob/main/content/tutorials/1.getting-started/fetch-data-from-directus-in-android-with-kotlin.md#2025-04-09_snippet_5\n\nLANGUAGE: kotlin\nCODE:\n```\npackage com.example.directusapp.ui\n\nimport androidx.compose.foundation.layout.Column\nimport androidx.compose.foundation.layout.Spacer\nimport androidx.compose.foundation.layout.fillMaxSize\nimport androidx.compose.foundation.layout.height\nimport androidx.compose.foundation.layout.padding\nimport androidx.compose.material3.MaterialTheme\nimport androidx.compose.material3.Text\nimport androidx.compose.runtime.*\nimport androidx.compose.ui.Modifier\nimport androidx.compose.ui.unit.dp\nimport kotlinx.coroutines.launch\nimport com.example.directusapp.model.GlobalResponse\nimport com.example.directusapp.network.DirectusApiService\n\n@Composable\nfun BlogHomeScreen() {\n    var globalResponse by remember { mutableStateOf<GlobalResponse?>(null) }\n    var errorMessage by remember { mutableStateOf<String?>(null) }\n\n    val scope = rememberCoroutineScope()\n\n    LaunchedEffect(Unit) {\n        scope.launch {\n            try {\n                val apiService = DirectusApiService.create()\n                globalResponse = apiService.getGlobal()\n\n            } catch (e: Exception) {\n                errorMessage = e.message\n            }\n        }\n    }\n\n    if (errorMessage != null) {\n        Text(text = \"Error: $errorMessage\", color = MaterialTheme.colorScheme.error)\n    } else {\n        Column(\n            modifier = Modifier\n                .fillMaxSize()\n                .padding(16.dp)\n        ) {\n            globalResponse?.let { response ->\n                Text(text = response.data.title, style = MaterialTheme.typography.titleLarge)\n                Spacer(modifier = Modifier.height(8.dp))\n                Text(text = response.data.description, style = MaterialTheme.typography.titleLarge)\n                Spacer(modifier = Modifier.height(16.dp))\n            }\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Stripe Integration Module for Directus in JavaScript\nDESCRIPTION: This code exports a default object that sets up Stripe integration with Directus. It includes route handlers for various Stripe operations such as listing payments, retrieving customer-specific payments, listing customers, and creating new customers. Each route checks user permissions before executing Stripe API calls.\nSOURCE: https://github.com/directus/docs/blob/main/content/tutorials/5.extensions/check-permissions-in-a-custom-endpoint.md#2025-04-09_snippet_8\n\nLANGUAGE: javascript\nCODE:\n```\nimport Stripe from 'stripe';\n\nexport default {\n  id: 'stripe',\n  handler: (router, { env, services }) => {\n    const secretKey = env.STRIPE_LIVE_SECRET_KEY;\n    const stripe = new Stripe(secretKey);\n\n    router.get('/payments', async (req, res) => {\n      try {\n        const response = await fetch(\"http://directus.example.com/permissions/me\", {\n          headers: {\n            'Authorization': `Bearer ${req.token}`,\n            'Content-Type': 'application/json'\n          }\n        });\n        const permissions = await response.json();\n\n        let output = []; // [!code ++]\n\n        if (permissions.data[env.STRIPE_CUSTOMERS_COLLECTION]?.read?.access === \"full\")) {\n          stripe.paymentIntents\n            .list({ limit: 100 })\n            .autoPagingEach((payments) => {\n              output.push(payments);\n            })\n            .then(() => {\n              res.json(output);\n            });\n        } else {\n          res.sendStatus(401);\n        }\n      }\n      catch(e) {\n        res.sendStatus(401);\n      }\n    });\n\n    router.get('/payments/:customer_id', async (req, res) => {\n      try {\n        const response = await fetch(\"http://directus.example.com/permissions/me\", {\n          headers: {\n            'Authorization': `Bearer ${req.token}`,\n            'Content-Type': 'application/json'\n          }\n        });\n        const permissions = await response.json();\n\n        let output = [];\n        if (permissions.data[env.STRIPE_CUSTOMERS_COLLECTION]?.read?.access === \"full\")) {\n          stripe.paymentIntents.list({\n            customer: req.params.customer_id,\n            limit: 100\n          }).autoPagingEach(function(payments) {\n            output.push(payments);\n          }).then(() => {\n            res.json(output);\n          });\n        } else {\n          res.sendStatus(401);\n        }\n      }\n      catch(e) {\n        res.sendStatus(401);\n      }\n    });\n\n    router.get('/customers', async (req, res) => {\n      try {\n        const response = await fetch(\"http://directus.example.com/permissions/me\", {\n          headers: {\n            'Authorization': `Bearer ${req.token}`,\n            'Content-Type': 'application/json'\n          }\n        });\n        const permissions = await response.json();\n\n        let output = [];\n        if (permissions.data[env.STRIPE_CUSTOMERS_COLLECTION]?.read?.access === \"full\")) {\n          stripe.customers.list({limit: 100}).autoPagingEach((customer) => {\n            output.push(customer);\n          }).then(() => {\n            res.json(output);\n          });\n        } else {\n          res.sendStatus(401);\n        }\n      }\n      catch(e) {\n        res.sendStatus(401);\n      }\n    });\n\n    router.post('/customers', async (req, res) => {\n      try {\n        const response = await fetch(\"http://directus.example.com/permissions/me\", {\n          headers: {\n            'Authorization': `Bearer ${req.token}`,\n            'Content-Type': 'application/json'\n          }\n        });\n        const permissions = await response.json();\n\n        if (permissions.data[env.STRIPE_CUSTOMERS_COLLECTION]?.read?.access === \"full\")) {\n          if (req.body.email) {\n            const customer = {\n              email: req.body.email,\n            };\n\n            if (req.body.name) {\n              customer.name = req.body.name;\n            }\n\n            stripe.customers.create(customer).then((response) => {\n              res.json(response);\n            });\n          } else {\n            res.sendStatus(400); // Bad Request\n          }\n        } else {\n          res.sendStatus(401);\n        }\n      }\n      catch(e) {\n        res.sendStatus(401);\n      }\n    });\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: Defining Directus Schema for TypeScript\nDESCRIPTION: TypeScript interface definitions that describe the structure of Directus data, particularly the Posts collection with its fields and types.\nSOURCE: https://github.com/directus/docs/blob/main/content/tutorials/1.getting-started/implementing-live-preview-in-nuxt.md#2025-04-09_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\n/// <reference types=\"@directus/extensions/api.d.ts\" />\n\ninterface DirectusSchema {\n\tposts: Post[];\n}\n\ninterface Post {\n\tid: number;\n\ttitle: string;\n\tcontent: string;\n\tslug: string;\n\tpublished: boolean;\n}\n```\n\n----------------------------------------\n\nTITLE: Using Log Function in Directus Sandboxed API Extensions\nDESCRIPTION: This JavaScript snippet demonstrates how to use the 'log' function from the Directus API in a sandboxed environment. It serves as a replacement for console.log and requires the 'log' scope to be requested.\nSOURCE: https://github.com/directus/docs/blob/main/content/guides/9.extensions/2.api-extensions/5.sandbox.md#2025-04-09_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nimport { log } from 'directus:api';\n\nlog('Hello World!');\n```\n\n----------------------------------------\n\nTITLE: Implementing Pre-generate Image Transforms Workflow Function\nDESCRIPTION: Creates an Inngest function that pre-generates image transformations when new images are uploaded. This workflow retrieves preset transformations from Directus settings and applies them to newly uploaded images, improving performance for subsequent image requests.\nSOURCE: https://github.com/directus/docs/blob/main/content/tutorials/7.workflows/invincible-ai-content-workflows-with-inngest-and-directus.md#2025-04-09_snippet_7\n\nLANGUAGE: tsx\nCODE:\n```\n// src/functions/pregenerate-image-transforms.ts\nimport type { DirectusContext } from '../inngest/types';\nimport { inngest } from '../inngest/client';\n\nexport default inngest.createFunction(\n  {\n    id: 'pregenerate-image-transforms',\n    name: 'Pre-generate images in different sizes',\n    description: 'This flow will generate image transforms in the preset sizes whenever an asset is uploaded.',\n    concurrency: 1,\n  },\n  { event: 'image-uploaded' },\n  async ({ event, step, directus }) => {\n    const { services, getSchema } = directus as DirectusContext;\n    const { AssetsService, SettingsService } = services;\n\n    const schema = await getSchema();\n\n    // The assets service is used to get the assets and apply the image transforms\n    const assetsService = new AssetsService({\n      schema,\n      accountability: event.data.accountability,\n    });\n\n    // The settings service is used to get the preset image transforms\n    const settingsService = new SettingsService({\n      schema,\n      accountability: event.data.accountability,\n    });\n\n    // Get the presets from the Directus project settings\n    const presets = await step.run('get-settings', async () => {\n      const settings = await settingsService.readSingleton({});\n      return settings.storage_asset_presets;\n    });\n\n    for (const preset of presets) {\n      await step.run(`get-assets-${preset.key}`, async () => {\n        // Loop through each preset\n        const asset = await assetsService.getAsset(event.data.event.key, {\n          transformationParams: preset,\n        });\n\n        return asset;\n      });\n    }\n\n    return { success: true };\n  },\n);\n```\n\n----------------------------------------\n\nTITLE: Implementing Blog Detail Screen in Kotlin with Jetpack Compose\nDESCRIPTION: This snippet defines a composable function 'BlogDetailScreen' that displays the details of a blog post retrieved from an API. It uses Jetpack Compose for UI and coroutines for asynchronous data fetching.\nSOURCE: https://github.com/directus/docs/blob/main/content/tutorials/1.getting-started/fetch-data-from-directus-in-android-with-kotlin.md#2025-04-09_snippet_13\n\nLANGUAGE: kotlin\nCODE:\n```\npackage com.example.directusapp.ui\n\nimport androidx.compose.foundation.layout.Column\nimport androidx.compose.foundation.layout.Spacer\nimport androidx.compose.foundation.layout.fillMaxSize\nimport androidx.compose.foundation.layout.height\nimport androidx.compose.foundation.layout.padding\nimport androidx.compose.material3.ExperimentalMaterial3Api\nimport androidx.compose.material3.Icon\nimport androidx.compose.material3.IconButton\nimport androidx.compose.material3.MaterialTheme\nimport androidx.compose.material3.Scaffold\nimport androidx.compose.material3.Text\nimport androidx.compose.material3.TopAppBar\nimport androidx.compose.runtime.Composable\nimport androidx.compose.runtime.LaunchedEffect\nimport androidx.compose.runtime.getValue\nimport androidx.compose.runtime.mutableStateOf\nimport androidx.compose.runtime.remember\nimport androidx.compose.runtime.setValue\nimport androidx.compose.ui.Modifier\nimport androidx.compose.ui.unit.dp\nimport androidx.navigation.NavController\nimport com.example.directusapp.network.DirectusApiService\nimport androidx.compose.material.icons.Icons\nimport androidx.compose.material.icons.filled.ArrowBack\nimport kotlinx.coroutines.launch\nimport com.example.directusapp.model.BlogResponse\n\n\n@OptIn(ExperimentalMaterial3Api::class)\n@Composable\nfun BlogDetailScreen(blogId: Int, navController: NavController) {\n    var blogResponse by remember { mutableStateOf<BlogResponse?>(null) }\n    var errorMessage by remember { mutableStateOf<String?>(null) }\n\n    LaunchedEffect(blogId) {\n        launch {\n            try {\n                val apiService = DirectusApiService.create()\n                blogResponse = apiService.getBlogById(blogId)\n            } catch (e: Exception) {\n                errorMessage = e.message\n            }\n        }\n    }\n\n    Scaffold(\n        topBar = {\n            TopAppBar(\n                title = { Text(\"Blog Detail\") },\n                navigationIcon = {\n                    IconButton(onClick = { navController.navigateUp() }) {\n                        Icon(\n                            imageVector = Icons.Filled.ArrowBack,\n                            contentDescription = \"Back\"\n                        )\n                    }\n                }\n            )\n        }\n    ) {\n        if (errorMessage != null) {\n            Text(text = \"Error: $errorMessage\", style = MaterialTheme.typography.bodyLarge)\n        } else {\n            if (blogResponse != null) {\n                // Render content using `blogResponse.data`\n                val blog = blogResponse!!.data\n                Column(\n                    modifier = Modifier\n                        .fillMaxSize()\n                        .padding(it)\n                        .padding(16.dp)\n                ) {\n                    Text(text = blog.title, style = MaterialTheme.typography.titleLarge)\n                    Spacer(modifier = Modifier.height(8.dp))\n                    Text(text = blog.dateCreated, style = MaterialTheme.typography.bodyMedium)\n                    Spacer(modifier = Modifier.height(16.dp))\n                    MarkdownView(markdownText = blog.content.trimIndent())\n                }\n            } else{\n                Text(text=\"Loading\")\n            }\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Basic Many-to-Many Relationship Example\nDESCRIPTION: Example of managing a Many-to-Many relationship for articles and tags using junction collection references.\nSOURCE: https://github.com/directus/docs/blob/main/content/guides/4.connect/4.relations.md#2025-04-09_snippet_4\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"tags\": [{\"id\": 2, \"tag_id\": 12}, {\"id\": 5, \"tag_id\": 7}, {\"id\": 19, \"tag_id\": 149}]\n}\n```\n\n----------------------------------------\n\nTITLE: Using the Asset Helper in Vue.js Template\nDESCRIPTION: Example of using the global asset helper in a Vue.js template to generate an image URL from an asset ID.\nSOURCE: https://github.com/directus/docs/blob/main/content/tutorials/4.migration/migrate-from-nuxt-content-to-directus.md#2025-04-09_snippet_8\n\nLANGUAGE: javascript\nCODE:\n```\n<img :src=\"$asset(person.image)\">\n```\n\n----------------------------------------\n\nTITLE: Enhanced WebSocket Message Handler in TypeScript\nDESCRIPTION: Enhanced message handler that includes initial message loading and subscription management with proper message ordering.\nSOURCE: https://github.com/directus/docs/blob/main/content/tutorials/2.projects/build-a-realtime-chat-app-using-directus-and-nuxt.md#2025-04-09_snippet_15\n\nLANGUAGE: typescript\nCODE:\n```\nconst cleanup = $directus.onWebSocket('message', (message) => {\n  if (message.type === 'auth' && message.status === 'ok') {\n    saveRefreshToken(message.refresh_token)\n    if (messageList.value.length === 0) {\n      readAllMessages()\n      subscribe('create')\n    }\n  }\n\n  // The only message of type items required to process is the initial array of messages\n  // All other messages are handled by the subscription\n  if (message.uid === 'get-recent-messages' && message.type === 'items') {\n    for (const item of message.data) {\n      messageList.value.unshift(item)\n    }\n  }\n})\n```\n\n----------------------------------------\n\nTITLE: Implementing Paginated Data Fetching in Next.js\nDESCRIPTION: Modified Next.js server component that implements pagination by accepting a page parameter from URL query parameters and limiting the number of items fetched per request.\nSOURCE: https://github.com/directus/docs/blob/main/content/tutorials/3.tips-and-tricks/implement-pagination-and-infinite-scrolling-in-next-js-.md#2025-04-09_snippet_3\n\nLANGUAGE: js\nCODE:\n```\nimport directus from \"@/lib/directus\";\nimport { readItems } from \"@directus/sdk\";\n\nconst getPosts = async (limit, page) => {\n  return directus.request(\n    readItems(\"posts\", {\n      limit,\n      page,\n    })\n  );\n};\n\nexport default async function Home({ searchParams }) {\n  const LIMIT = 4;\n  const currentPage = parseInt(searchParams.page) || 1;\n  const posts = await getPosts(LIMIT, currentPage);\n  return (\n    <div>\n      <ul>\n        {posts.map((post) => {\n          return (\n            <li key={post.id}>\n              <h2>{post.title}</h2>\n              <p>{post.body}</p>\n            </li>\n          );\n        })}\n      </ul>\n    </div>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Installing Sentry Node.js SDK Dependencies\nDESCRIPTION: Commands to navigate to the hook extension directory and install the required Sentry Node.js SDK packages for backend monitoring and profiling.\nSOURCE: https://github.com/directus/docs/blob/main/content/tutorials/5.extensions/monitor-and-error-track-with-sentry-in-custom-hooks.md#2025-04-09_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\ncd directus-extension-hook-sentry\nnpm install @sentry/node @sentry/profiling-node\n```\n\n----------------------------------------\n\nTITLE: Implementing PostDetailView in SwiftUI\nDESCRIPTION: Creates a SwiftUI view to display detailed information about a selected post. It includes the post title, image (if available), content, a dismiss button, and the post status. It uses AsyncImage for image loading.\nSOURCE: https://github.com/directus/docs/blob/main/content/tutorials/1.getting-started/fetch-data-from-directus-in-ios-with-swift.md#2025-04-09_snippet_4\n\nLANGUAGE: swift\nCODE:\n```\nstruct PostDetailView: View {\n    @Binding var selectedPost: Post?\n    var fetchPost: (Int) async -> Void\n    var body: some View {\n        if let post = selectedPost {\n            VStack {\n                Text(post.title)\n                    .font(.headline)\n                    .padding()\n\n                if let imageURL = post.imageURL {\n                    AsyncImage(url: URL(string: imageURL)) { phase in\n                        switch phase {\n                        case .success(let image):\n                            image\n                                .resizable()\n                                .aspectRatio(contentMode: .fit)\n                                .frame(maxHeight: 200)\n                        case .failure(_):\n                            Text(\"Failed to load image\")\n                        case .empty:\n                            Image(systemName: \"photo\")\n                                .resizable()\n                                .aspectRatio(contentMode: .fit)\n                                .frame(maxHeight: 200)\n                                .foregroundColor(.gray)\n                        default:\n                            EmptyView()\n                        }\n                    }\n                    .padding()\n                }\n\n                Text(post.stripHTML())\n                    .font(.body)\n                    .padding()\n\n                Spacer()\n\n                Button(\"Dismiss\") {\n                    selectedPost = nil\n                }\n\n                Text(\"Status: \\(post.status)\")\n                    .font(.subheadline)\n                    .foregroundColor(.gray)\n                    .padding()\n            }\n            .task {\n                await fetchPost(post.id)\n            }\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Reading Fields using FieldsService in JavaScript\nDESCRIPTION: Shows how to read all fields of a collection using the FieldsService. It retrieves all fields for a specific collection and returns them as JSON.\nSOURCE: https://github.com/directus/docs/blob/main/content/tutorials/5.extensions/read-collection-data-in-custom-layouts.md#2025-04-09_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\nrouter.get('/', async (req, res) => {\n  const fieldsService = new FieldsService({\n    schema: await getSchema(),\n    accountability: req.accountability\n  });\n\n  const data = await fieldsService.readAll('collection_name');\n\n  res.json(data);\n});\n```\n\n----------------------------------------\n\nTITLE: Creating a Room Selection Page in Next.js\nDESCRIPTION: Next.js page component that fetches and displays available room types based on the user's search parameters (check-in date, check-out date, and capacity). Users can select available rooms to proceed to checkout.\nSOURCE: https://github.com/directus/docs/blob/main/content/tutorials/2.projects/build-an-hotel-booking-platform-with-next-js-stripe-and-directus-automate.md#2025-04-09_snippet_9\n\nLANGUAGE: tsx\nCODE:\n```\nimport { getRoomTypes } from \"@/lib/apis\";\nimport dayjs from \"dayjs\";\nimport Link from \"next/link\";\n\nexport default async function Rooms({\n  searchParams,\n}: {\n  searchParams: { [key: string]: string };\n}) {\n  const { capacity, checkInDate, checkOutDate } = searchParams;\n  const formattedCheckInDate = dayjs(checkInDate).format(\"YYYY-MM-DD\");\n  const formattedCheckOutDate = dayjs(checkOutDate).format(\"YYYY-MM-DD\");\n  const roomTypes = await getRoomTypes(\n    formattedCheckInDate,\n    formattedCheckOutDate,\n    capacity\n  );\n\n  return (\n    <main>\n      <div>\n        <h1>Select a Room of your choice</h1>\n        <div>\n          {roomTypes &&\n            roomTypes.map((roomType) => {\n              return (\n                <div key={roomType.id}>\n                  <h2>{roomType.name}</h2>\n                  <p>capacity: {roomType.capacity}</p>\n                  <p>Price per night: {roomType.price}</p>\n                  {roomType.rooms.length > 0 ? (\n                    <Link\n                      href={`/bookings/checkout?checkInDate=${formattedCheckInDate}&checkOutDate=${formattedCheckOutDate}&room=${roomType.rooms[0]}&price=${roomType.price}&roomType=${roomType.name}`}\n                    >\n                      Book room\n                    </Link>\n                  ) : (\n                    \"Room unavailable\"\n                  )}\n                </div>\n              );\n            })}\n        </div>\n      </div>\n    </main>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a Date Picker Form Component in Next.js\nDESCRIPTION: A TypeScript React component that implements a booking form with a date range picker using react-datepicker. The form captures check-in/check-out dates and guest capacity, then redirects to the room selection page with query parameters.\nSOURCE: https://github.com/directus/docs/blob/main/content/tutorials/2.projects/build-an-hotel-booking-platform-with-next-js-stripe-and-directus-automate.md#2025-04-09_snippet_7\n\nLANGUAGE: tsx\nCODE:\n```\n\"use client\";\nimport { useState, FormEvent } from \"react\";\nimport { useRouter } from \"next/navigation\";\nimport DatePicker from \"react-datepicker\";\nimport \"react-datepicker/dist/react-datepicker.css\";\n\ntype DateState = Date | null;\nexport default function BookingForm() {\n  const [startDate, setStartDate] = useState<DateState>(new Date());\n  const [endDate, setEndDate] = useState<DateState>();\n  const router = useRouter();\n  const [error, setError] = useState(\"\");\n\n  const handleChange = (range: DateState[]) => {\n    const [startDate, endDate] = range;\n    setStartDate(startDate);\n    setEndDate(endDate);\n  };\n\n  const handleFormSubmit = (e: FormEvent<HTMLFormElement>) => {\n    const formData = new FormData(e.currentTarget);\n    e.preventDefault()\n    if (!endDate) {\n    setError(\"Please add a check out date\")\n    } else {\n      const checkAvailabilityData = {\n        checkInDate: startDate,\n        checkOutDate: endDate,\n        capacity: formData.get(\"capacity\")\n      }\n      router.push(`/bookings/rooms?checkInDate=${checkAvailabilityData.checkInDate}&checkOutDate=${checkAvailabilityData.checkOutDate}&capacity=${checkAvailabilityData.capacity}`)\n    }\n  }\n\n  <input type=\"number\" name=\"capacity\" />;\n  return (\n    <form onSubmit={handleFormSubmit}>\n      <div>\n        <h2>Book an Hotel Room</h2>\n        <div>\n          <div>\n            <label htmlFor=\"checkInDate\"> Check-in and Check-out Date:</label>\n            {error && <span>{ error }</span>}\n            <DatePicker\n              selected={startDate}\n              onChange={handleChange}\n              startDate={startDate}\n              endDate={endDate}\n              selectsRange\n              withPortal\n              required\n            />\n          </div>\n          <div>\n            <label htmlFor=\"capacity\"> Guest(s):</label>\n            <input\n              type=\"number\"\n              name=\"capacity\"\n              defaultValue={1}\n              min={1}\n              max={6}\n            />\n          </div>\n        </div>\n\n        <button type=\"submit\">Check Availability </button>\n      </div>\n    </form>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Layout Entrypoint in JavaScript for Directus Extensions\nDESCRIPTION: This code snippet shows how to define a layout extension entrypoint in Directus using defineInterface. It sets up the basic configuration including ID, name, icon, component reference, and optional slots for options, sidebar, and actions.\nSOURCE: https://github.com/directus/docs/blob/main/content/guides/9.extensions/3.app-extensions/3.layouts.md#2025-04-09_snippet_0\n\nLANGUAGE: js\nCODE:\n```\nimport { ref } from 'vue';\nimport { defineInterface } from '@directus/extensions-sdk'\nimport LayoutComponent from './layout.vue';\n\nexport default defineInterface({\n\tid: 'custom',\n\tname: 'Custom',\n\ticon: 'box',\n\tcomponent: LayoutComponent,\n\tslots: {\n\t\toptions: () => null,\n\t\tsidebar: () => null,\n\t\tactions: () => null,\n\t},\n\tsetup() {\n\t\tconst name = ref('Custom Layout');\n\t\treturn { name };\n\t},\n});\n```\n\n----------------------------------------\n\nTITLE: Backend Error Test Endpoint Implementation\nDESCRIPTION: JavaScript code implementing a test endpoint that intentionally throws an error to test Sentry backend error tracking.\nSOURCE: https://github.com/directus/docs/blob/main/content/tutorials/5.extensions/monitor-and-error-track-with-sentry-in-custom-hooks.md#2025-04-09_snippet_9\n\nLANGUAGE: javascript\nCODE:\n```\nexport default {\n  id: 'fail',\n  handler: (router) => {\n    router.get('/', (req, res) => {\n      throw new Error('Intentional back end error for Sentry test');\n        });\n    }\n};\n```\n\n----------------------------------------\n\nTITLE: Dynamic Form Component in Svelte\nDESCRIPTION: Svelte component that renders a dynamic form based on Directus field configurations. Includes form field generation, validation, styling, and submission handling.\nSOURCE: https://github.com/directus/docs/blob/main/content/tutorials/2.projects/build-forms-dynamically-using-directus-and-sveltekit.md#2025-04-09_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\n<script>\n  import { onMount } from \"svelte\";\n  import { \n    categoryOptions, \n    getFieldComponent, \n    getValidationAttributes, \n    initializeForm, \n    handleFormSubmit \n  } from \"./formLogic.js\";\n\n  export let collection;\n  export let onSuccess = () => {};\n\n  let fields = [];\n  let formData = {};\n  let loading = true;\n  let error = null;\n  let submitting = false;\n\n  onMount(async () => {\n    loading = true;\n    const result = await initializeForm(collection);\n    fields = result.fields;\n    formData = result.formData;\n    error = result.error;\n    loading = false;\n  });\n\n  function resetFormData() {\n    fields.forEach((field) => {\n      if (field.schema && !field.meta?.hidden) {\n        formData[field.field] = field.schema.default_value || \"\";\n      }\n    });\n  }\n\n  async function submitForm() {\n    submitting = true;\n    const result = await handleFormSubmit(collection, formData, onSuccess, resetFormData);\n    error = result.error;\n    submitting = false;\n  }\n</script>\n\n<div class=\"form-wrapper\">\n  {#if loading}\n    <div class=\"loading\">Loading form fields...</div>\n  {:else if error}\n    <div class=\"error\">Error: {error.message}</div>\n  {:else}\n    <form on:submit|preventDefault={submitForm}>\n      {#each fields as field}\n        {#if !field.meta?.hidden && field.field !== \"id\"}\n          <div class=\"form-field\">\n            <label for={field.field}>\n              {field.name || field.field}\n              {#if field.schema?.is_nullable === false}<span class=\"required\">*</span>{/if}\n            </label>\n\n            {#if getFieldComponent(field) === \"category-dropdown\"}\n              <select\n                id={field.field}\n                bind:value={formData[field.field]}\n                {...getValidationAttributes(field)}\n              >\n                <option value=\"\">Select Category</option>\n                {#each categoryOptions as option}\n                  <option value={option.value}>{option.text}</option>\n                {/each}\n              </select>\n            {:else if getFieldComponent(field) === \"textarea\"}\n              <textarea\n                id={field.field}\n                bind:value={formData[field.field]}\n                {...getValidationAttributes(field)}\n                placeholder={field.meta?.note || \"\"}\n              ></textarea>\n            {:else if getFieldComponent(field) === \"select\"}\n              <select\n                id={field.field}\n                bind:value={formData[field.field]}\n                {...getValidationAttributes(field)}\n              >\n                <option value=\"\">Select {field.name || field.field}</option>\n                {#if field.meta?.options}\n                  {#each field.meta.options as option}\n                    <option value={option.value}>{option.text}</option>\n                  {/each}\n                {/if}\n              </select>\n            {:else if getFieldComponent(field) === \"checkbox\"}\n              <input\n                type=\"checkbox\"\n                id={field.field}\n                bind:checked={formData[field.field]}\n              />\n            {:else if getFieldComponent(field) === \"markdown\"}\n              <textarea\n                id={field.field}\n                bind:value={formData[field.field]}\n                {...getValidationAttributes(field)}\n                placeholder=\"Write markdown content here...\"\n                rows=\"8\"\n              ></textarea>\n              <small>Markdown supported</small>\n            {:else}\n              <input\n                type={getFieldComponent(field)}\n                id={field.field}\n                bind:value={formData[field.field]}\n                {...getValidationAttributes(field)}\n                placeholder={field.meta?.note || \"\"}\n              />\n            {/if}\n\n            {#if field.meta?.note && getFieldComponent(field) !== \"checkbox\"}\n              <small class=\"hint\">{field.meta.note}</small>\n            {/if}\n          </div>\n        {/if}\n      {/each}\n\n      <div class=\"form-actions\">\n        <button type=\"submit\" disabled={submitting}>\n          {submitting ? \"Submitting...\" : \"Save\"}\n        </button>\n      </div>\n    </form>\n  {/if}\n</div>\n\n<style>\n  .form-wrapper {\n    max-width: 400px;\n    margin: 0 auto;\n    padding: 1rem;\n  }\n\n  .form-field {\n    margin-bottom: 1rem;\n  }\n\n  label {\n    display: block;\n    margin-bottom: 0.3rem;\n    font-weight: bold;\n  }\n\n  .required {\n    color: #c62828;\n  }\n\n  input,\n  textarea,\n  select {\n    width: 100%;\n    padding: 0.5rem;\n    border: 1px solid #ccc;\n    border-radius: 4px;\n    box-sizing: border-box;\n  }\n  input[type=\"checkbox\"] {\n    width: auto;\n  }\n\n  /* Help text */\n  .hint {\n    font-size: 0.8rem;\n    color: #666;\n  }\n\n  .form-actions {\n    margin-top: 1rem;\n    text-align: center;\n  }\n\n  button {\n    padding: 0.5rem 1rem;\n    background-color: #4361ee;\n    color: white;\n    border: none;\n    border-radius: 4px;\n    cursor: pointer;\n  }\n\n  button:disabled {\n    background-color: #ccc;\n  }\n\n  .loading,\n  .error {\n    padding: 1rem;\n    text-align: center;\n  }\n\n  .error {\n    color: #c62828;\n  }\n</style>\n```\n\n----------------------------------------\n\nTITLE: Creating a Product Item Component in Next.js\nDESCRIPTION: Implements a component to display individual product details including image, name, price, and an 'Add to Cart' button. It uses the CartContext to add items to the cart.\nSOURCE: https://github.com/directus/docs/blob/main/content/tutorials/2.projects/build-an-ecommerce-platform-with-next-js-stripe-and-directus-automate.md#2025-04-09_snippet_9\n\nLANGUAGE: tsx\nCODE:\n```\n\"use client\";\nimport { CartContext } from \"@/app/context/cart-context\";\nimport { ProductTypes } from \"@/types\";\nimport Image from \"next/image\";\nimport { useContext } from \"react\";\n\nexport default function ProductItem({\n  id,\n  name,\n  image,\n  price,\n}: ProductTypes) {\n  const cart = useContext(CartContext);\n  const directusUrl = process.env.NEXT_PUBLIC_DIRECTUS_URL;\n  const imageUrl = `${directusUrl}/assets/${image}`;\n  return (\n    <div>\n      <Image\n        src={imageUrl}\n        width={200}\n        height={250}\n        alt={name}\n      />\n      <h2>{name}</h2>\n      <p>\n        {price}\n        <button onClick={() => cart.addToCart({id, name, price, image: imageUrl})}>Add to Cart</button>\n      </p>\n    </div>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Fetching Blog Post by Slug with Directus API in Python\nDESCRIPTION: A Python function that retrieves a blog post from Directus using its slug. It makes a GET request to the Directus API with a filter for the slug, then processes the response by transforming the image ID into a full URL path.\nSOURCE: https://github.com/directus/docs/blob/main/content/tutorials/1.getting-started/fetch-data-from-directus-with-flask.md#2025-04-09_snippet_12\n\nLANGUAGE: python\nCODE:\n```\ndef get_post_by_slug(slug):\n    response = requests.get(\n        f\"{DIRECTUS_BASE_URL}/items/posts/?filter[slug][_eq]={slug}&fields=*,author.name\"\n    )[0]\n    post = response.json().get(\"data\")\n    post[\"image\"] = f'{DIRECTUS_BASE_URL}/assets/{post[\"image\"]}'\n\n    return post\n```\n\n----------------------------------------\n\nTITLE: Configuring Directus SDK with Cookie Authentication in TypeScript\nDESCRIPTION: This snippet sets up the Directus SDK client with cookie authentication mode, which is more secure for server-side rendering applications. It includes credentials in requests to ensure cookies are properly sent with each request.\nSOURCE: https://github.com/directus/docs/blob/main/content/tutorials/1.getting-started/using-authentication-in-astro.md#2025-04-09_snippet_10\n\nLANGUAGE: typescript\nCODE:\n```\nimport { createDirectus, rest, authentication } from '@directus/sdk';\nimport { DIRECTUS_URL } from \"astro:env/client\"\n\nconst client = createDirectus(DIRECTUS_URL as string).with(rest()).with(authentication('cookie', { credentials: 'include' }));\n\nexport default client;\n```\n\n----------------------------------------\n\nTITLE: Updating Many-to-One Relationship in Directus\nDESCRIPTION: Example of updating an existing article in a Many-to-One relationship by providing the primary key along with updates.\nSOURCE: https://github.com/directus/docs/blob/main/content/guides/4.connect/4.relations.md#2025-04-09_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"featured_article\": {\n    \"id\": 15,\n    \"title\": \"This is an updated title for my article!\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing BlogHomeScreen for Displaying Blogs in Kotlin with Jetpack Compose\nDESCRIPTION: This snippet demonstrates how to create a BlogHomeScreen composable function that fetches and displays blog posts, pages, and global data. It includes error handling and uses LazyColumn for efficient list rendering.\nSOURCE: https://github.com/directus/docs/blob/main/content/tutorials/1.getting-started/fetch-data-from-directus-in-android-with-kotlin.md#2025-04-09_snippet_12\n\nLANGUAGE: kotlin\nCODE:\n```\npackage com.example.directusapp.ui\n\nimport androidx.compose.foundation.clickable\nimport androidx.compose.foundation.layout.Column\nimport androidx.compose.foundation.layout.Spacer\nimport androidx.compose.foundation.layout.fillMaxSize\nimport androidx.compose.foundation.layout.fillMaxWidth\nimport androidx.compose.foundation.layout.height\nimport androidx.compose.foundation.layout.padding\nimport androidx.compose.material3.MaterialTheme\nimport androidx.compose.material3.Text\nimport androidx.compose.runtime.*\nimport androidx.compose.ui.Modifier\nimport androidx.compose.ui.unit.dp\nimport androidx.navigation.NavController\nimport kotlinx.coroutines.launch\nimport androidx.compose.foundation.lazy.LazyColumn\nimport androidx.compose.ui.graphics.BlendMode.Companion.Screen\nimport com.example.directusapp.ui.MarkdownView\nimport com.example.directusapp.model.GlobalResponse\nimport com.example.directusapp.model.PageResponse\nimport com.example.directusapp.model.BlogsResponse\nimport com.example.directusapp.model.Blog\nimport com.example.directusapp.network.DirectusApiService\n\n@Composable\nfun BlogHomeScreen(navController: NavController) {\n    var blogsResponse by remember { mutableStateOf<BlogsResponse?>(null) }\n    var pagesResponse by remember { mutableStateOf<PageResponse?>(null) }\n    var globalResponse by remember { mutableStateOf<GlobalResponse?>(null) }\n    var errorMessage by remember { mutableStateOf<String?>(null) }\n\n    val scope = rememberCoroutineScope()\n\n    LaunchedEffect(Unit) {\n        scope.launch {\n            try {\n                val apiService = DirectusApiService.create()\n                blogsResponse = apiService.getBlogs()\n                pagesResponse = apiService.getPages()\n                globalResponse = apiService.getGlobal()\n                println(pagesResponse)\n                println(globalResponse)\n\n            } catch (e: Exception) {\n                errorMessage = e.message\n            }\n        }\n    }\n\n    if (errorMessage != null) {\n        Text(text = \"Error: $errorMessage\", color = MaterialTheme.colorScheme.error)\n    } else {\n        Column(\n            modifier = Modifier\n                .fillMaxSize()\n                .padding(16.dp)\n        ) {\n            // Display the page title and content\n            pagesResponse?.let { response ->\n                Text(text = response.data[0].title, style = MaterialTheme.typography.titleLarge)\n                Spacer(modifier = Modifier.height(8.dp))\n                MarkdownView(markdownText = response.data[0].content.trimIndent())\n                Spacer(modifier = Modifier.height(16.dp))\n            }\n            Text(text = \"Blog Posts\", style = MaterialTheme.typography.titleLarge)\n            Spacer(modifier = Modifier.height(10.dp))\n            blogsResponse?.let { response ->\n                LazyColumn {\n                    items(response.data.size) { index ->\n                        BlogItem(response.data[index], navController)\n                    }\n                }\n            }\n        }\n    }\n}\n\n@Composable\nfun BlogItem(blog: Blog, navController: NavController) {\n    Column(\n        modifier = Modifier\n            .fillMaxWidth()\n            .clickable {\n                navController.navigate(Screen.BlogDetail.createRoute(blog.id))\n                println(blog.id)\n            }\n            .padding(16.dp)\n    ) {\n\n        Text(text = \"${blog.title} - ${blog.author}\", style = MaterialTheme.typography.titleMedium)\n        Spacer(modifier = Modifier.height(8.dp))\n        Text(text = blog.dateCreated, style = MaterialTheme.typography.bodyMedium)\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing URL Aliasing in Nuxt for Shortened URLs\nDESCRIPTION: This code demonstrates how to use Nuxt's definePageMeta to create an alias for a specific route, allowing for shortened URLs. It sets up an alias for the ticket page to be accessible via a shorter '/t/' path.\nSOURCE: https://github.com/directus/docs/blob/main/content/tutorials/2.projects/build-the-leap-week-registration-and-referral-system-.md#2025-04-09_snippet_3\n\nLANGUAGE: jsx\nCODE:\n```\n‹script setup lang=\"ts\">\n// pages/tickets/[ticket].vue\n\ndefinePageMeta({\n\talias: '/t/:ticket',\n});\n\n// Rest of script setup\n</script>\n```\n\n----------------------------------------\n\nTITLE: Implementing Preview Mode UI Indicator\nDESCRIPTION: Enhanced render function that displays a preview mode indicator when the preview parameter is present in the URL.\nSOURCE: https://github.com/directus/docs/blob/main/content/tutorials/1.getting-started/implementing-live-preview-in-react.md#2025-04-09_snippet_12\n\nLANGUAGE: jsx\nCODE:\n```\nreturn (\n    <div>\n      {/* Add this line */}\n      {(query.get(\"preview\") ? <p>This a preview of the post</p> : <p/>)}\n      \n      <h1>{article.title}</h1>\n      <p>{article.content}</p>\n    </div>\n  );\n```\n\n----------------------------------------\n\nTITLE: Deleting a Collection using CollectionsService in JavaScript\nDESCRIPTION: Shows how to delete a collection using the CollectionsService. It removes a specified collection and returns the result.\nSOURCE: https://github.com/directus/docs/blob/main/content/tutorials/5.extensions/read-collection-data-in-custom-layouts.md#2025-04-09_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nrouter.delete('/', async (req, res) => {\n  const collectionsService = new CollectionsService({\n    schema: await getSchema(),\n    accountability: req.accountability\n  });\n\n  const data = await collectionsService.deleteOne('collection_name');\n\n  res.json(data);\n});\n```\n\n----------------------------------------\n\nTITLE: Configuring Directus SDK Wrapper\nDESCRIPTION: Setting up a wrapper for the Directus SDK to handle API connections and requests.\nSOURCE: https://github.com/directus/docs/blob/main/content/tutorials/2.projects/build-a-testimonial-widget-with-sveltekit-and-directus.md#2025-04-09_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport { createDirectus, rest } from '@directus/sdk';\nimport { PUBLIC_API_URL } from '$env/static/public';\n\nfunction getDirectusInstance(fetch) {\n   const options = fetch ? { globals: { fetch } } : {};\n   const directus = createDirectus(PUBLIC_API_URL, options).with(rest());\n   return directus;\n}\n\nexport default getDirectusInstance;\n```\n\n----------------------------------------\n\nTITLE: Blog Post Detail View\nDESCRIPTION: Django view for displaying individual blog post details.\nSOURCE: https://github.com/directus/docs/blob/main/content/tutorials/1.getting-started/fetch-data-from-directus-with-django.md#2025-04-09_snippet_12\n\nLANGUAGE: python\nCODE:\n```\ndef blog_post_detail(request, slug):\n    posts_data = fetch_blog_posts()\n    post = next((p for p in posts_data['data'] if p['slug'] == slug), None)\n\n    if post is not None:\n        return render(request, 'blog_detail.html', {'post': post})\n    else:\n        return JsonResponse({'error': 'Post not found'}, status=404)\n```\n\n----------------------------------------\n\nTITLE: Rendering Individual News Article with Language Selection\nDESCRIPTION: Svelte component to display a single news article with a language selection dropdown.\nSOURCE: https://github.com/directus/docs/blob/main/content/tutorials/1.getting-started/implement-multilingual-content-with-directus-and-svelte-kit.md#2025-04-09_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\n<script>\n  export let data;\n  $: ({ article, languages } = data);\n</script>\n{#if article}\n  <h1>{article.translations[0].title}</h1>\n  {@html article.translations[0].body}\n  <select>\n    {#each languages as language}\n      <option value={language.code}>{language.name}</option>\n    {/each}\n  </select>\n{:else}\n  <p>News not found.</p>\n{/if}\n```\n\n----------------------------------------\n\nTITLE: Booking Form Component with Stripe Integration\nDESCRIPTION: A React form component that collects user details and integrates with Stripe for payment processing. Handles form submission and redirects to Stripe checkout.\nSOURCE: https://github.com/directus/docs/blob/main/content/tutorials/2.projects/build-an-hotel-booking-platform-with-next-js-stripe-and-directus-automate.md#2025-04-09_snippet_13\n\nLANGUAGE: tsx\nCODE:\n```\n\"use client\";\nimport { loadStripe } from \"@stripe/stripe-js\";\nimport { FormEvent, useEffect } from \"react\";\n\ntype RoomType = {\n  roomID: string;\n  nights: number;\n  checkInDate: string;\n  checkOutDate: string;\n  price: number;\n  roomType: string,\n};\n\nexport default function BookingForm({\n  roomID,\n  nights,\n  price,\n  checkInDate,\n  checkOutDate,\n  roomType\n}: RoomType) {\n  useEffect(() => {\n    loadStripe(process.env.NEXT_PUBLIC_STRIPE_PUBLISHABLE_KEY!);\n  }, []);\n\n  const handleFormSubmit = async (e: FormEvent<HTMLFormElement>) => {\n    e.preventDefault();\n    const formData = new FormData(e.currentTarget);\n    const bookingData = {\n      check_in_date: checkInDate,\n      check_out_date: checkOutDate,\n      nights,\n      room_id: roomID,\n      price,\n      roomType,\n      first_name: formData.get(\"firstName\") as string,\n      last_name: formData.get(\"lastName\") as string,\n      email: formData.get(\"email\") as string,\n      phone_number: formData.get(\"phoneNumber\") as string,\n    };\n    try {\n      const response = await fetch(\"/api/stripe-session\", {\n        method: \"POST\",\n        body: JSON.stringify(bookingData),\n      });\n\n      if (response.ok) {\n        const payment = await response.json();\n        window.location.href = payment.url;\n      } else {\n        console.error(\"Error submitting form:\", response.statusText);\n      }\n    } catch (error) {\n      console.error(\"Error:\", error);\n    }\n  };\n\n  return (\n    <form onSubmit={handleFormSubmit}>\n      <div>\n        <label htmlFor=\"firstName\">First Name</label>\n        <input type=\"text\" name=\"firstName\" id=\"firstName\" required />\n      </div>\n      <div>\n        <label htmlFor=\"lastName\">Last Name</label>\n        <input type=\"text\" name=\"lastName\" id=\"lastName\" required />\n      </div>\n      <div>\n        <label htmlFor=\"email\">Email Address</label>\n        <input type=\"email\" name=\"email\" id=\"email\" required />\n      </div>\n      <div>\n        <label htmlFor=\"phoneNumber\">Phone Number</label>\n        <input type=\"text\" name=\"phoneNumber\" id=\"phoneNumber\" required />\n      </div>\n      <div>\n        <button type=\"submit\">Book Room</button>\n      </div>\n    </form>\n  );\n```\n\n----------------------------------------\n\nTITLE: Implementing Directus SDK Configuration\nDESCRIPTION: TypeScript implementation for Directus client setup and post fetching functionality with language support\nSOURCE: https://github.com/directus/docs/blob/main/content/tutorials/1.getting-started/implementing-multilingual-content-using-directus-and-astro.md#2025-04-09_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\n/// <reference types=\"vite/client\" />\nimport { createDirectus, rest, readItems } from '@directus/sdk';\n\nconst DIRECTUS_URL = import.meta.env.DIRECTUS_URL;\n\nconst client = createDirectus(DIRECTUS_URL).with(rest());\n\nexport async function fetchPosts(lang: string) {\n  return await client.request(\n    readItems(\"posts\", {\n      fields: [\"slug\", { translations: [\"*\", \"languages_code\"] }],\n      deep: {\n        translations: {\n          _filter: { languages_code: { _eq: lang } },\n        },\n      },\n    })\n  );\n}\n\nexport default client;\n```\n\n----------------------------------------\n\nTITLE: Docker Image Push Command\nDESCRIPTION: Command to push the Docker image to Google Artifact Registry\nSOURCE: https://github.com/directus/docs/blob/main/content/tutorials/6.self-hosting/deploy-directus-to-google-cloud-platform.md#2025-04-09_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\ndocker push  us-central1-docker.pkg.dev/directus-project/directus-repo/directus:10.10.4\n```\n\n----------------------------------------\n\nTITLE: Configuring Nuxt Proxy Rules\nDESCRIPTION: Configuration in nuxt.config.ts to set up a proxy that forwards requests to the Directus API, allowing the Nuxt application to avoid CORS issues.\nSOURCE: https://github.com/directus/docs/blob/main/content/tutorials/1.getting-started/using-authentication-in-nuxt.md#2025-04-09_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\nrouteRules: {\n\t\"/directus/**\": { proxy: import.meta.env.API_URL },\n},\n```\n\n----------------------------------------\n\nTITLE: Implementing Roast Endpoint in Nuxt Server\nDESCRIPTION: This TypeScript code defines a Nuxt server endpoint for processing roast requests. It fetches GitHub profile data, calculates a score, generates a roast using AI, and stores the result in Directus. The endpoint handles user authentication, data validation, and error handling.\nSOURCE: https://github.com/directus/docs/blob/main/content/tutorials/2.projects/how-i-built-an-ai-open-source-santa-roast-app-with-directus-and-nuxt.md#2025-04-09_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\n// server/api/roast.post.ts\n\nimport { z } from 'zod';\nimport { generateObject } from 'ai';\nimport { createAnthropic } from '@ai-sdk/anthropic';\n\nimport userQuery from '~~/server/graphql/getUserProfile';\nimport orgQuery from '~~/server/graphql/getOrgProfile';\n\nimport type { GitHubUserData } from '~~/server/graphql/getUserProfile';\nimport type { GitHubOrgData } from '~~/server/graphql/getOrgProfile';\nimport type { RoastResponse } from '#shared/types/endpoints.js';\nimport type { H3Error } from 'h3';\n\n// Schema for the AI Payload to return proper JSON\nexport const aiPayloadSchema = z.object({\n\tletter: z.string().min(1), // The letter in Markdown format\n\tlist: z.enum(['naughty', 'nice']), // The list the user belongs to\n\tflagged: z.boolean().optional(), // Was the letter flagged as inappropriate?\n\tflagged_reason: z.string().optional(), // Reason for why it was flagged\n});\n\n// Schema for the roast endpoint body\nexport const profileSchema = z.object({\n\tusername: z.string().min(1),\n\twishlist: z.string().optional(),\n\ttype: z.enum(['user', 'organization']).optional().default('user'),\n\tmode: z.enum(['self', 'friend']).optional().default('self'),\n\troasted_by: z.string().optional(),\n\tprofileType: z.enum(['User', 'Organization']),\n});\n\n// Create the Anthropic client\nconst config = useRuntimeConfig();\nconst anthropic = createAnthropic({\n\tapiKey: config.anthropicApiKey as string,\n});\n\nexport default defineEventHandler(async (event): Promise<RoastResponse | H3Error> => {\n\tconst body = await readValidatedBody(event, (body) => profileSchema.parse(body));\n\tconst { username, wishlist, mode, roasted_by, profileType } = body;\n\n\t// Check to see if the profile already exists in Directus if so, redirect to the profile\n\tconst [directusResponse] = await directusServer.request(\n\t\treadItems('profiles', { filter: { username: { _eq: username } }, limit: 1 }),\n\t);\n\n\tif (directusResponse) {\n\t\treturn {\n\t\t\tredirect: `/${username}`,\n\t\t};\n\t}\n\n\t// Check to see if the user is logged in to GitHub if not, don't allow them to submit a letter to save on costs\n\tconst session = await requireUserSession(event);\n\n\tif (!session) {\n\t\tthrow createError({\n\t\t\tstatusCode: 401,\n\t\t\tmessage: 'Unauthorized. Please login to submit a letter to Santa.',\n\t\t});\n\t}\n\n\ttry {\n\t\tconst variables = { username };\n\n\t\tconst response = await $fetch('https://api.github.com/graphql', {\n\t\t\tmethod: 'POST',\n\t\t\theaders: {\n\t\t\t\tAuthorization: `Bearer ${process.env.GITHUB_TOKEN}`,\n\t\t\t\t'Content-Type': 'application/json',\n\t\t\t},\n\t\t\tbody: {\n\t\t\t\tquery: profileType === 'User' ? userQuery : orgQuery,\n\t\t\t\tvariables,\n\t\t\t},\n\t\t});\n\n\t\tconst typedResponse = response as { data: { user?: GitHubUserData; organization?: GitHubOrgData } };\n\n\t\tconst profileData =\n\t\t\tprofileType === 'User'\n\t\t\t\t? (typedResponse.data.user as GitHubUserData)\n\t\t\t\t: (typedResponse.data.organization as GitHubOrgData);\n\n\t\t// Score the contributions based on the profile type\n\t\tconst score = calculateNiceScore(profileData, profileType);\n\n\t\tconst prompt = `\n\t\t\tYou are the open source Santa Claus. You determine who's open source contributions are naughty or nice.\n\t\t\tAnalyze the following Github ${profileType === 'User' ? 'user' : 'organization'}'s profile carefully and in detail.\n\t\t\tWe've determined the ${profileType}'s score based on their contributions. Whether they're on the nice list\n\t\t\tor the naughty list, roast them accordingly. Write a short, funny letter in a snarky sarcastic tone.\n\t\t\tInclude a couple lines from the wish list in the letter if it's provided.\n\t\t\tIf the mode provided is \"friend\", then make a short mention of the roasted_by user in one of the paragraphs.\n\n\t\t\tSTRUCTURE:\n\t\t\t- Intro\n\t\t\t- 3 short paragraphs\n\t\t\t- PS\n\n\t\t\tRULES:\n\t\t\t- Do NOT include a signature and like 'Yours, From Santa' in the letter.\n\t\t\t- The letter should be in Markdown format.\n\t\t\t- If someone uses profanity or asks for something inappropriate, do not roast them. Set the flagged field to true and provide a reason.\n\n\t\t\tWish List: ${wishlist} ${mode === 'friend' ? `Note: Wishlist provided by ${roasted_by}` : ''}\n\t\t\tProfile: ${JSON.stringify(profileData)}\n\t\t\tScore: ${score}\n\t\t\tMode: ${mode}\n\t\t\tRoasted By: ${roasted_by}\n\t\t`;\n\n\t\tconst aiResponse = await generateObject({\n\t\t\tmodel: anthropic('claude-3-5-sonnet-20240620'),\n\t\t\tschema: aiPayloadSchema,\n\t\t\tmaxTokens: 8192,\n\t\t\tmessages: [{ role: 'user', content: prompt }],\n\t\t});\n\n\t\t// If the user has organizations and membersWithRoles exist, loop through the organizations and add the members to the metadata as possible_roasts\n\t\tconst possibleRoasts: any[] = [];\n\t\tif (profileType === 'User' && (profileData as GitHubUserData).organizations?.nodes) {\n\t\t\tfor (const org of (profileData as GitHubUserData).organizations.nodes ?? []) {\n\t\t\t\tif (org?.membersWithRole?.nodes) {\n\t\t\t\t\tpossibleRoasts.push(...org.membersWithRole.nodes);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\t// Generate metadata to store with the profile\n\t\tconst metadata = {\n\t\t\tai_usage: aiResponse.usage,\n\t\t\tai_response: aiResponse.object,\n\t\t\tscore: score,\n\t\t\tpossible_roasts: possibleRoasts,\n\t\t};\n\n\t\t// Store the profile in Directus\n\t\tconst directusResponse = await directusServer.request(\n\t\t\tcreateItem('profiles', {\n\t\t\t\tusername,\n\t\t\t\tletter: aiResponse.object.letter,\n\t\t\t\tlist: score.list,\n\t\t\t\twishlist,\n\t\t\t\tmode,\n\t\t\t\tscore: score.finalScore,\n\t\t\t\troasted_by,\n\t\t\t\tmetadata,\n\t\t\t\ttype: profileType,\n\t\t\t}),\n\t\t);\n\n\t\treturn {\n\t\t\tredirect: `/${username}`,\n\t\t\tletter: directusResponse.letter,\n\t\t\tlist: directusResponse.list,\n\t\t\tmetadata: directusResponse.metadata,\n\t\t\troasted_by: directusResponse.roasted_by,\n\t\t\tscore: directusResponse.score,\n\t\t\ttype: directusResponse.type,\n\t\t\tmode: directusResponse.mode,\n\t\t\tusername: directusResponse.username,\n\t\t\twishlist: directusResponse.wishlist,\n\t\t};\n\t} catch (error) {\n\t\tconsole.error(JSON.stringify(error));\n\t\tthrow createError({\n\t\t\tstatusCode: 500,\n\t\t\tmessage: 'Failed to roast profile',\n\t\t});\n\t}\n});\n```\n\n----------------------------------------\n\nTITLE: Configuring GitHub Issue Creation Payload in Directus Automate\nDESCRIPTION: This JSON payload is used in a Webhook / Request URL operation to create a GitHub issue. It sets the issue title from a trigger input and the body from a feedback item's content.\nSOURCE: https://github.com/directus/docs/blob/main/content/tutorials/7.workflows/create-github-issues-with-directus-automate.md#2025-04-09_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n\t\"title\": \"{{$trigger.body.title}}\",\n    \"body\": \">{{feedback.content}}\"\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Dynamic Page Component in Angular\nDESCRIPTION: Creates an Angular component to fetch and display page content from Directus based on the URL slug. It uses ActivatedRoute to get the slug parameter and the Directus SDK to retrieve the corresponding page data.\nSOURCE: https://github.com/directus/docs/blob/main/content/tutorials/1.getting-started/fetch-data-from-directus-with-angular.md#2025-04-09_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nimport {Component, OnInit} from '@angular/core';\nimport {directus, Page} from \"../../../../directus\";\nimport {ActivatedRoute} from \"@angular/router\";\nimport {CommonModule} from \"@angular/common\";\nimport {readItems} from \"@directus/sdk\";\n\n@Component({\n  selector: 'app-page',\n  standalone: true,\n  imports: [CommonModule],\n  templateUrl: './page.component.html',\n  styleUrl: './page.component.css'\n})\nexport class PageComponent implements OnInit{\n  page: Page;\n\n  constructor(private route: ActivatedRoute) {\n  }\n\n  ngOnInit(): void {\n    this.route.paramMap.subscribe(params => {\n      const slug = params.get(\"slug\");\n      if (slug){\n        this.getPageBySlug(slug);\n      }\n    })\n  }\n\n  async getPageBySlug(slug: string){\n    //@ts-ignore\n    this.page = await directus\n      .request<Page[]>(readItems(\"pages\", [{slug}]))[0];\n  }\n\n}\n```\n\nLANGUAGE: html\nCODE:\n```\n<div *ngIf=\"page\">\n  <h1>{{page.title}}</h1>\n  <p>{{page.content}}</p>\n</div>\n```\n\n----------------------------------------\n\nTITLE: Creating Input Component for Directus Fields in Next.js\nDESCRIPTION: A reusable input component that renders a text field based on Directus field configuration. It handles changes, supports required validation, and adjusts width based on the field metadata.\nSOURCE: https://github.com/directus/docs/blob/main/content/tutorials/2.projects/build-forms-dynamically-using-directus-and-next.md#2025-04-09_snippet_9\n\nLANGUAGE: javascript\nCODE:\n```\n\"use client\"\nimport { useState } from 'react';\n\nexport default function Input({\n  defaultValue = '',\n  label = '',\n  field,\n  value,\n  setValue\n}) {\n\n  const handleChange = (e) => {\n    const value = e.target.value;\n    setValue(value);\n  };\n\n  const fieldWidth = field.meta?.width === 'full' ? '100%' : '50%';\n\n  return (\n    <div style={{ width: fieldWidth }}>\n      <label htmlFor={field.field}>{label}</label>\n      <input\n        name={field.schema?.name}\n        value={value}\n        onChange={handleChange}\n        type=\"text\"\n        required={field.meta?.required}\n        style={{ width: '100%' }}\n      />\n    </div>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Updating app.vue to Support Page Routing\nDESCRIPTION: Vue template code that replaces the default Nuxt welcome component with NuxtPage component to enable page routing for the application.\nSOURCE: https://github.com/directus/docs/blob/main/content/tutorials/1.getting-started/implementing-live-preview-in-nuxt.md#2025-04-09_snippet_9\n\nLANGUAGE: vue\nCODE:\n```\n<template>\n  <div>\n    <NuxtRouteAnnouncer />\n    <NuxtPage />\n  </div>\n</template>\n```\n\n----------------------------------------\n\nTITLE: Updating Directus Collection with Generated Social Post in JSON\nDESCRIPTION: This JSON snippet shows the payload structure for updating the Directus collection with the generated social post content. It extracts the generated content from the OpenAI API response.\nSOURCE: https://github.com/directus/docs/blob/main/content/tutorials/7.workflows/generate-social-posts-with-gpt-4-and-directus-automate.md#2025-04-09_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n \t\"social\": \"{{generate.data.choices[0].message.content}}\"\n }\n```\n\n----------------------------------------\n\nTITLE: Using Django URL Template Tags for Navigation Links\nDESCRIPTION: This snippet shows the recommended approach for creating navigation links in Django templates using the URL template tag. It uses named URLs instead of hardcoded paths for better maintainability.\nSOURCE: https://github.com/directus/docs/blob/main/content/tutorials/1.getting-started/fetch-data-from-directus-with-django.md#2025-04-09_snippet_18\n\nLANGUAGE: html\nCODE:\n```\n<a href=\"{% url 'home' %}\">Home</a>\n```\n\n----------------------------------------\n\nTITLE: Integrated Next.js Page with Pagination Component\nDESCRIPTION: Complete Next.js server component that integrates the Pagination component with the paginated data fetching approach, providing a fully functional paginated UI for browsing posts.\nSOURCE: https://github.com/directus/docs/blob/main/content/tutorials/3.tips-and-tricks/implement-pagination-and-infinite-scrolling-in-next-js-.md#2025-04-09_snippet_5\n\nLANGUAGE: js\nCODE:\n```\nimport Pagination from \"@/components/Pagination\";\nimport directus from \"@/lib/directus\";\nimport { readItems } from \"@directus/sdk\";\n\nconst getPosts = async (limit, page) => {\n  return directus.request(\n    readItems(\"posts\", {\n      limit,\n      page,\n    })\n  );\n};\n\nexport default async function Home({ searchParams }) {\n  const LIMIT = 4;\n  const currentPage = parseInt(searchParams.page) || 1;\n  const posts = await getPosts(LIMIT, currentPage);\n  return (\n    <div>\n      <ul>\n        {posts.map((post) => {\n          return (\n            <li key={post.id}>\n              <h2>{post.title}</h2>\n              <p>{post.body}</p>\n            </li>\n          );\n        })}\n      </ul>\n      <Pagination limit={LIMIT} currentPage={currentPage} />\n    </div>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: User Profile Route Implementation\nDESCRIPTION: React component for displaying user profile information, demonstrating authenticated user data retrieval.\nSOURCE: https://github.com/directus/docs/blob/main/content/tutorials/1.getting-started/using-authentication-in-react.md#2025-04-09_snippet_17\n\nLANGUAGE: jsx\nCODE:\n```\n// src/routes/Profile.jsx\n\nimport {useEffect, useState} from 'react';\nimport { Link } from 'react-router-dom';\nimport {getCurrentUserId} from '../lib/directus';\n\nconst Profile = () => {\n    const [userId, setUserId] = useState(\"\");\n\n    useEffect(() => {\n        async function fetchData() {\n            const id = await getCurrentUserId();\n            setUserId(id);\n        }\n        fetchData();\n    }, [])\n\n    return (\n        <div>\n            Profile Component\n            <p>Your user id: {userId}</p>\n            <Link to=\"/\">Go to Home</Link>\n        </div>\n    );\n};\n\nexport default Profile;\n```\n\n----------------------------------------\n\nTITLE: Chat Login Component Setup\nDESCRIPTION: Vue component script setup for chat login functionality.\nSOURCE: https://github.com/directus/docs/blob/main/content/tutorials/2.projects/build-a-realtime-chat-app-using-directus-and-nuxt.md#2025-04-09_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\n<script setup lang=\"ts\">\nconst { $directus } = useNuxtApp()\n\nconst refreshToken: Ref<string | undefined> = ref()\nconst credentials = ref({\n\temail: '',\n\tpassword: ''\n})\n</script>\n```\n\n----------------------------------------\n\nTITLE: Creating a Directus SDK Helper Utility\nDESCRIPTION: Setting up a reusable Directus SDK instance that can be imported throughout the application. This creates a single connection point to the Directus API.\nSOURCE: https://github.com/directus/docs/blob/main/content/tutorials/1.getting-started/fetch-data-from-directus-with-nextjs.md#2025-04-09_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nimport { createDirectus, rest } from '@directus/sdk';\n\nconst directus = createDirectus('https://directus.example.com').with(rest());\n\nexport default directus;\n```\n\n----------------------------------------\n\nTITLE: Configuring Router for Create/Edit Note Page in Chrome Extension\nDESCRIPTION: This snippet shows how to import the Upsert component and add it to the router configuration in a Chrome extension. It sets up the route for creating and editing notes with authentication protection.\nSOURCE: https://github.com/directus/docs/blob/main/content/tutorials/2.projects/build-a-notebook-chrome-extension-with-directus-auth.md#2025-04-09_snippet_16\n\nLANGUAGE: javascript\nCODE:\n```\nimport Upsert from \"../views/upsert.vue\";\n```\n\nLANGUAGE: javascript\nCODE:\n```\n    {\n        path: \"/note/:id\",\n        name: \"upsert\",\n        meta: { public: false },\n        component: Upsert,\n    },\n```\n\n----------------------------------------\n\nTITLE: Displaying Directus Error Codes Table in Markdown\nDESCRIPTION: This code snippet presents a markdown table that lists Directus error codes, their associated HTTP status codes, and descriptions. It covers various error scenarios from validation failures to rate limit exceedances, providing developers with a quick reference for troubleshooting API issues.\nSOURCE: https://github.com/directus/docs/blob/main/content/guides/4.connect/5.errors.md#2025-04-09_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n| Error Code               | Status | Description                                                      |\n| ------------------------ | ------ | ---------------------------------------------------------------- |\n| `FAILED_VALIDATION`      | 400    | Validation for this particular item failed.                      |\n| `FORBIDDEN`              | 403    | You are not allowed to do the current action.                    |\n| `INVALID_TOKEN`          | 403    | Provided token is invalid.                                       |\n| `TOKEN_EXPIRED`          | 401    | Provided token is valid but has expired.                         |\n| `INVALID_CREDENTIALS`    | 401    | Username / password or access token is wrong.                    |\n| `INVALID_IP`             | 401    | Your IP address isn't allow-listed to be used with this user.    |\n| `INVALID_OTP`            | 401    | Incorrect OTP was provided.                                      |\n| `INVALID_PAYLOAD`        | 400    | Provided payload is invalid.                                     |\n| `INVALID_QUERY`          | 400    | The requested query parameters can not be used.                  |\n| `UNSUPPORTED_MEDIA_TYPE` | 415    | Provided payload format or `Content-Type` header is unsupported. |\n| `REQUESTS_EXCEEDED`      | 429    | You have exceeded the rate limit.                                |\n| `ROUTE_NOT_FOUND`        | 404    | Endpoint does not exist.                                         |\n| `SERVICE_UNAVAILABLE`    | 503    | Could not use external service.                                  |\n| `UNPROCESSABLE_CONTENT`  | 422    | You tried doing something illegal.                               |\n```\n\n----------------------------------------\n\nTITLE: Modifying Post Fetching Logic for Live Preview in Vue\nDESCRIPTION: This Vue script setup block demonstrates how to modify the post fetching logic to support live preview. It uses the $preview helper from the custom preview plugin to conditionally re-fetch data when in preview mode.\nSOURCE: https://github.com/directus/docs/blob/main/content/tutorials/1.getting-started/set-up-live-preview-with-nuxt.md#2025-04-09_snippet_3\n\nLANGUAGE: vue\nCODE:\n```\n<script setup>\nconst { $directus, $readItem, $preview } = useNuxtApp();\nconst route = useRoute();\n\nif ($preview) {\n  const post = await useAsyncData('post', () => {\n    return $directus.request($readItem('posts', route.params.id))\n  });\n}\n\nconst post = await useAsyncData('post', () => {\n  return $directus.request($readItem('posts', route.params.id))\n});\n\nif (!post.value) throw createError({\n  statusCode: 404,\n  statusMessage: 'Post Not Found'\n});\n</script>\n```\n\n----------------------------------------\n\nTITLE: Implementing Cookie Authentication Mode in Directus\nDESCRIPTION: Configures cookie-based authentication mode in Directus client, storing tokens as browser session cookies.\nSOURCE: https://github.com/directus/docs/blob/main/content/tutorials/1.getting-started/using-authentication-in-sveltekit.md#2025-04-09_snippet_8\n\nLANGUAGE: javascript\nCODE:\n```\nimport {createDirectus, rest,authentication} from \"@directus/sdk\";\nconst directusUrl = \"http://localhost:8055\";\nexport const client = createDirectus(directusUrl)\n .with(authentication(\"cookie\"))\n .with(rest());\n```\n\n----------------------------------------\n\nTITLE: Blog Posts Fetching Function\nDESCRIPTION: Function to fetch blog posts with author information from Directus API.\nSOURCE: https://github.com/directus/docs/blob/main/content/tutorials/1.getting-started/fetch-data-from-directus-with-django.md#2025-04-09_snippet_9\n\nLANGUAGE: python\nCODE:\n```\ndef fetch_blog_posts():\n    response = requests.get(f\"{DIRECTUS_API_ENDPOINT}/items/posts?fields=*,author.name&sort=-publish_date\")\n    return response.json()\n```\n\n----------------------------------------\n\nTITLE: Importing and Adding Login Route to Vue Router\nDESCRIPTION: JavaScript code for importing the login view component and adding the login route to the Vue router configuration.\nSOURCE: https://github.com/directus/docs/blob/main/content/tutorials/2.projects/build-a-notebook-chrome-extension-with-directus-auth.md#2025-04-09_snippet_11\n\nLANGUAGE: js\nCODE:\n```\nimport LoginView from \"../views/login.vue\";\n```\n\n----------------------------------------\n\nTITLE: Initializing Directus SDK with Type Definitions\nDESCRIPTION: Creates a Directus SDK instance with TypeScript type definitions for room types and reservations. This establishes the data schema and connection to the Directus API.\nSOURCE: https://github.com/directus/docs/blob/main/content/tutorials/2.projects/build-an-hotel-booking-platform-with-next-js-stripe-and-directus-automate.md#2025-04-09_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { createDirectus, rest } from \"@directus/sdk\";\n\ntype RoomTypes = {\n  capacity: number;\n  price: string;\n  name: string;\n  rooms: number[];\n};\n\ntype Reservations = {\n  first_name: string;\n  last_name: string;\n  email: string;\n  phone_number: string;\n  check_in_date: string;\n  check_out_date: string;\n  room_id: string;\n  nights: number;\n  total_price: string;\n  payment_id: string\n};\n\ntype Schema = {\n  room_types: RoomTypes[];\n  reservations: Reservations[];\n};\n\nconst directus = createDirectus<Schema>(\n  process.env.DIRECTUS_URL as string\n).with(rest());\n\nexport default directus;\n```\n\n----------------------------------------\n\nTITLE: Implementing ArticleService to Fetch Data from Directus API in Java\nDESCRIPTION: Implements the ArticleService interface to fetch articles from Directus API using RestTemplate. It deserializes the JSON response into ArticleDTO and returns a List of Articles.\nSOURCE: https://github.com/directus/docs/blob/main/content/tutorials/1.getting-started/fetch-data-from-directus-with-spring-boot.md#2025-04-09_snippet_3\n\nLANGUAGE: java\nCODE:\n```\npackage com.directus.blog.service;\n\nimport com.directus.blog.model.Article;\nimport com.directus.blog.model.ArticleDTO;\nimport org.springframework.core.ParameterizedTypeReference;\nimport org.springframework.http.HttpMethod;\nimport org.springframework.stereotype.Service;\nimport org.springframework.web.client.RestTemplate;\n\nimport java.util.List;\nimport java.util.Objects;\n\n@Service\npublic class ArticleServiceImpl implements ArticleService{\n    private final String BASEURL = \"YOUR_DIRETUS_PROJECT_URL/items/articles\";\n    @Override\n    public List<Article> getAllArticles() {\n        return Objects.requireNonNull(new RestTemplate().exchange(\n                BASEURL,\n                HttpMethod.GET,\n                null,\n                new ParameterizedTypeReference<ArticleDTO>() {\n                }\n        ).getBody()).getArticles();\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Sending SMS Messages via Twilio API\nDESCRIPTION: Collects message content and recipient numbers, then sends the SMS through the Twilio API endpoint, tracking successful sends and errors.\nSOURCE: https://github.com/directus/docs/blob/main/content/tutorials/5.extensions/send-sms-messages-with-twilio-in-custom-panels.md#2025-04-09_snippet_14\n\nLANGUAGE: javascript\nCODE:\n```\nfunction sendSms() {\n\tsmsSent.value = 0;\n\tsmsErrors.value = [];\n\tconst smsBody = props.message ?? customMessage.value;\n\tconst smsRecipients = recipients.value;\n\n\tif (recipient.value != '') {\n\t\tsmsRecipients.push(recipient.value);\n\t}\n\n\tsmsRecipients.forEach((smsTo) => {\n\t\tapi\n\t\t\t.post(`/twilio/2010-04-01/Accounts/${props.twilioSid}/Messages.json`, {\n\t\t\t\tFrom: props.twilioPhoneNumber,\n\t\t\t\tBody: smsBody,\n\t\t\t\tTo: smsTo,\n\t\t\t})\n\t\t\t.then((response) => {\n\t\t\t\tif (response.data.status == 'queued') {\n\t\t\t\t\tsmsSent.value += 1;\n\t\t\t\t} else {\n\t\t\t\t\tsmsErrors.value.push({\n\t\t\t\t\t\trecipient: smsTo,\n\t\t\t\t\t\terror: {\n\t\t\t\t\t\t\tcode: response.data.code,\n\t\t\t\t\t\t\tmessage: response.data.message,\n\t\t\t\t\t\t},\n\t\t\t\t\t});\n\t\t\t\t}\n\t\t\t})\n\t\t\t.catch((error) => {\n\t\t\t\tsmsErrors.value.push({\n\t\t\t\t\trecipient: smsTo,\n\t\t\t\t\terror: error,\n\t\t\t\t});\n\t\t\t});\n\t});\n\n\treturn;\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Shipping Page Component in Next.js\nDESCRIPTION: A simple page component that renders the ShippingForm component within a section container. This page serves as the shipping information collection step in the checkout process.\nSOURCE: https://github.com/directus/docs/blob/main/content/tutorials/2.projects/build-an-ecommerce-platform-with-next-js-stripe-and-directus-automate.md#2025-04-09_snippet_18\n\nLANGUAGE: tsx\nCODE:\n```\nimport ShippingForm from \"./form\";\n\nexport default function ShippingPage() {\n  return (\n    <section>\n      <div>\n      <h2>Shipping Information</h2>\n        <ShippingForm />\n      </div>\n    </section>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Deleting a Field using FieldsService in JavaScript\nDESCRIPTION: Shows how to delete a field from a collection using the FieldsService. It removes a specified field and returns the result.\nSOURCE: https://github.com/directus/docs/blob/main/content/tutorials/5.extensions/read-collection-data-in-custom-layouts.md#2025-04-09_snippet_9\n\nLANGUAGE: javascript\nCODE:\n```\nrouter.delete('/', async (req, res) => {\n  const fieldsService = new FieldsService({\n    schema: await getSchema(),\n    accountability: req.accountability\n  });\n\n  const data = await fieldsService.deleteField('collection_name', 'field_name');\n\n  res.json(data);\n});\n```\n\n----------------------------------------\n\nTITLE: Initializing a Nuxt Project with Nuxi\nDESCRIPTION: Bash commands to create a new Nuxt project for the Directus multilingual integration example.\nSOURCE: https://github.com/directus/docs/blob/main/content/tutorials/1.getting-started/implementing-multilingual-content-using-directus-and-nuxt.md#2025-04-09_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nnpx nuxi@latest init directus-multilingual\ncd directus-multilingual\n```\n\n----------------------------------------\n\nTITLE: Default Page Implementation in Svelte\nDESCRIPTION: Creates the default landing page that checks authentication status and redirects users accordingly using Directus SDK.\nSOURCE: https://github.com/directus/docs/blob/main/content/tutorials/1.getting-started/using-authentication-in-sveltekit.md#2025-04-09_snippet_17\n\nLANGUAGE: javascript\nCODE:\n```\n<script>\n  import { onMount } from \"svelte\";\n  import { isAuthenticated } from \"../lib/directus.js\";\n  import { goto } from \"$app/navigation\";\n\n  onMount(async () => {\n    try {\n      const response = await isAuthenticated();\n\n      if (response.authenticated === false) {\n        goto(\"/login\");\n      } else {\n        goto(\"/protected\");\n      }\n    } catch (error) {\n      console.error(\"Authentication check failed:\", error);\n      goto(\"/login\");\n    }\n  });\n</script>\n\n<div class=\"container\">\n  <h1>Welcome to the App</h1>\n  <p>Redirecting...</p>\n</div>\n```\n\n----------------------------------------\n\nTITLE: Implementing Login Logic in Nuxt\nDESCRIPTION: Completed Vue component for user login that uses the Directus SDK to authenticate users and stores the authentication response in localStorage for persistent sessions.\nSOURCE: https://github.com/directus/docs/blob/main/content/tutorials/1.getting-started/using-authentication-in-nuxt.md#2025-04-09_snippet_13\n\nLANGUAGE: vue\nCODE:\n```\n<script setup lang=\"ts\">\nconst { $directus } = useNuxtApp()\n\nconst email = ref('')\nconst password = ref('')\nconst result = ref(false)\n\nconst login = async () => {\n\tconst response = await $directus.login(email.value, password.value)\n\tlocalStorage.setItem('directus_auth', JSON.stringify(response))\n\tresult.value = true\n}\n</script>\n<template>\n\t<form @submit.prevent=\"login\">\n\t\t<h1>Login</h1>\n\t\t<div v-if=\"result\">\n\t\t\t<p>Successfully logged in</p>\n\t\t</div>\n\t\t<div>\n\t\t\t<input required type=\"text\" v-model=\"email\" name=\"email\" placeholder=\"Email\" />\n\t\t</div>\n\t\t<div>\n\t\t\t<input required type=\"password\" v-model=\"password\" name=\"password\" placeholder=\"Password\" />\n\t\t</div>\n\t\t<button type=\"submit\">Login</button>\n\t</form>\n</template>\n```\n\n----------------------------------------\n\nTITLE: Updating a Field using FieldsService in JavaScript\nDESCRIPTION: Demonstrates updating a field's properties using the FieldsService. It updates the note and default value for a specific field and returns the updated field data.\nSOURCE: https://github.com/directus/docs/blob/main/content/tutorials/5.extensions/read-collection-data-in-custom-layouts.md#2025-04-09_snippet_8\n\nLANGUAGE: javascript\nCODE:\n```\nrouter.patch('/', async (req, res) => {\n  const fieldsService = new FieldsService({\n    schema: await getSchema(),\n    accountability: req.accountability\n  });\n\n  await fieldsService.updateField('collection_name', {\n    meta: {\n      note: 'Put the title here',\n    },\n    schema: {\n      default_value: 'Hello World!',\n    },\n    field: 'field_name',\n  });\n\n  const data = await fieldsService.readOne(\n    'collection_name',\n    'field_name',\n  );\n\n  res.json(updatedField);\n});\n```\n\n----------------------------------------\n\nTITLE: Message Form State and Functions in React with TypeScript\nDESCRIPTION: TypeScript implementation of state management for the message form, including a function to send messages to Directus via WebSockets and a logout function that disconnects from the WebSocket server.\nSOURCE: https://github.com/directus/docs/blob/main/content/tutorials/2.projects/build-a-realtime-chat-app-with-directus-and-next.md#2025-04-09_snippet_9\n\nLANGUAGE: typescript\nCODE:\n```\n  const [newMessage, setNewMessage] = useState('');\n  const submitMessage = () => {\n    if (!newMessage.trim()) return;\n    directus.sendMessage(\n      JSON.stringify({\n        type: 'items',\n        collection: 'messages',\n        action: 'create',\n        data: { content: newMessage },\n      })\n    );\n    setNewMessage('');\n  };\n  const logout = () => {\n    directus.disconnect()\n    setRefreshToken(undefined);\n  };\n```\n\n----------------------------------------\n\nTITLE: Defining Collection Field Types\nDESCRIPTION: Examples of defining different field types within a collection, including primitive and literal types.\nSOURCE: https://github.com/directus/docs/blob/main/content/tutorials/3.tips-and-tricks/advanced-types-with-the-directus-sdk.md#2025-04-09_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\ninterface CollectionA {\n\tid: number;\n\tstatus: string;\n\ttoggle: boolean;\n\n\ttags: 'csv';\n\tjson_field: 'json';\n\tdate_created: 'datetime';\n}\n```\n\n----------------------------------------\n\nTITLE: Installing Directus SDK in Nuxt\nDESCRIPTION: Bash command to install the Directus SDK package in a Nuxt project for API interaction.\nSOURCE: https://github.com/directus/docs/blob/main/content/tutorials/1.getting-started/implementing-multilingual-content-using-directus-and-nuxt.md#2025-04-09_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nnpm install @directus/sdk\n```\n\n----------------------------------------\n\nTITLE: Initializing Directus Client\nDESCRIPTION: Helper module to initialize the Directus SDK client with REST protocol\nSOURCE: https://github.com/directus/docs/blob/main/content/tutorials/1.getting-started/fetch-data-from-directus-with-eleventy-3.md#2025-04-09_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nimport { createDirectus, rest } from '@directus/sdk';\n\nconst directus = createDirectus('YOUR_DIRECTUS_PROJECT_URL').with(rest());\n\nexport default directus;\n```\n\n----------------------------------------\n\nTITLE: Posts Component Template\nDESCRIPTION: HTML template for displaying the list of blog posts with titles and metadata\nSOURCE: https://github.com/directus/docs/blob/main/content/tutorials/1.getting-started/fetch-data-from-directus-with-angular.md#2025-04-09_snippet_8\n\nLANGUAGE: html\nCODE:\n```\n<h1>Blog Posts</h1>\n<ol>\n  <li *ngFor=\"let post of posts\">\n    <a routerLink=\"#\">\n      <h2>{{post.title}}</h2>\n    </a>\n    <span>\n      {{post.published_date}} &bull; {{post.author.name}}\n    </span>\n  </li>\n</ol>\n```\n\n----------------------------------------\n\nTITLE: Creating Select Dropdown Component for Directus Options in Next.js\nDESCRIPTION: A select dropdown component that renders options from Directus field configuration. It maps through choices defined in the field metadata to create option elements.\nSOURCE: https://github.com/directus/docs/blob/main/content/tutorials/2.projects/build-forms-dynamically-using-directus-and-next.md#2025-04-09_snippet_11\n\nLANGUAGE: javascript\nCODE:\n```\n\"use client\"\nimport { useState } from 'react';\n\nexport default function Select({\n  defaultValue = '',\n  label = '',\n  field,\n  value,\n  setValue\n}) {\n\n  const handleChange = (e) => {\n    console.log(e.target.value)\n    const value = e.target.value;\n    setValue(value);\n  };\n\n  const fieldWidth = field.meta?.width === 'full' ? '100%' : '50%';\n\n  return (\n    <div style={{ width: fieldWidth }}>\n      <label htmlFor={field.field}>{label}</label>\n      <select\n        name={field.schema?.name}\n        value={value}\n        onChange={handleChange}\n        required={field.meta?.required}\n        style={{ width: '100%' }}\n      >\n        {field.meta?.options?.choices?.map((choice) => (\n          <option key={choice.value} value={choice.value}>\n            {choice.text}\n          </option>\n        ))}\n      </select>\n    </div>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Creating React Logout Component\nDESCRIPTION: React component that implements logout functionality using React Router for navigation. Handles both successful and failed logout attempts with appropriate redirects.\nSOURCE: https://github.com/directus/docs/blob/main/content/tutorials/1.getting-started/using-authentication-in-react.md#2025-04-09_snippet_19\n\nLANGUAGE: jsx\nCODE:\n```\n// src/components/Logout.jsx\n\nimport { useNavigate } from 'react-router-dom';\nimport {logoutUser} from '../lib/directus';\n\nexport const LogOut = () => {\n    const navigate = useNavigate();\n\n    const onLogoutClick = async () => {\n        try {\n            await logoutUser();\n            navigate(\"/login\");\n        } catch (error) {\n            console.error(\"Logout failed:\", error);\n            navigate(\"/\");\n        }\n    }\n\n    return <>\n        <button onClick={onLogoutClick}>Logout</button>\n    </>\n\n};\n```\n\n----------------------------------------\n\nTITLE: Rendering Cart Items with Next.js and React\nDESCRIPTION: This code creates a client-side rendered page that displays items in a shopping cart. It uses React hooks and context to manage cart state and provides functionality to remove items and clear the cart.\nSOURCE: https://github.com/directus/docs/blob/main/content/tutorials/2.projects/build-an-ecommerce-platform-with-next-js-stripe-and-directus-automate.md#2025-04-09_snippet_13\n\nLANGUAGE: tsx\nCODE:\n```\n\"use client\";\n\nimport { CartContext } from \"@/app/context/cart-context\";\nimport Link from \"next/link\";\nimport { useContext, useEffect, useState } from \"react\";\n\nexport default function CheckoutCartPage() {\n  const [isClient, setIsClient] = useState(false)\n  useEffect(() => {\n    setIsClient(true)\n  }, [])\n  const cart = useContext(CartContext);\n  return isClient ? (\n    <section>\n      <div>\n        <h2>Cart</h2>\n        <ul>\n          {cart.cartItems && cart.cartItems.map((cartItem) => (\n            <li key={cartItem.id}>\n              <div>\n                <span>{cartItem.name}</span>\n                <span> ${cartItem.price} </span>\n                <button onClick={() => cart.removeFromCart(cartItem)}>\n                  {\" \"}\n                  Remove\n                </button>\n              </div>\n            </li>\n          ))}\n        </ul>\n        {cart.cartItems && cart.cartItems.length > 0 ? (\n          <div>\n            <div>Total: {cart.getCartTotal()}</div>\n            <Link href=\"/checkout/shipping\">Proceed to Shipping</Link>\n            <button onClick={() => cart.clearCart()}>Clear Cart</button>\n          </div>\n        ) : (\n          <p>Your cart is empty</p>\n        )}\n      </div>\n    </section>\n  ) : null;\n}\n```\n\n----------------------------------------\n\nTITLE: Fetching Blog Posts from Directus in SvelteKit\nDESCRIPTION: SvelteKit page load function that fetches blog posts from Directus. It retrieves specific fields for each post, including related author information, and sorts the posts by publish date.\nSOURCE: https://github.com/directus/docs/blob/main/content/tutorials/1.getting-started/fetch-data-from-directus-with-sveltekit.md#2025-04-09_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\n/** @type {import('./$types').PageLoad} */\nimport getDirectusInstance from '$lib/directus';\nimport { readItems } from '@directus/sdk';\nexport async function load({ fetch }) {\n\tconst directus = getDirectusInstance(fetch);\n\treturn {\n\t\tposts: await directus.request(readItems('posts', {\n\t\t\tfields: ['slug', 'title', 'publish_date', { author: ['name'] }],\n\t\t\tsort: ['-publish_date'],\n\t\t})),\n\t};\n}\n```\n\n----------------------------------------\n\nTITLE: Defining a Panel Entrypoint in JavaScript\nDESCRIPTION: Example code for the panel entrypoint file that defines the panel's metadata, appearance, and configuration options. This file exports an object using defineInterface from the Directus extensions SDK.\nSOURCE: https://github.com/directus/docs/blob/main/content/guides/9.extensions/3.app-extensions/4.panels.md#2025-04-09_snippet_0\n\nLANGUAGE: js\nCODE:\n```\nimport { defineInterface } from '@directus/extensions-sdk'\nimport PanelComponent from './panel.vue';\n\nexport default defineInterface({\n\tid: 'custom',\n\tname: 'Custom',\n\ticon: 'box',\n\tdescription: 'This is my custom panel!',\n\tcomponent: PanelComponent,\n\tminWidth: 12,\n\tminHeight: 8,\n\toptions: [\n\t\t{\n\t\t\tfield: 'text',\n\t\t\tname: 'Text',\n\t\t\ttype: 'string',\n\t\t\tmeta: {\n\t\t\t\tinterface: 'input',\n\t\t\t\twidth: 'full',\n\t\t\t},\n\t\t},\n\t],\n});\n```\n\n----------------------------------------\n\nTITLE: Subscribing to Collection Changes via GraphQL\nDESCRIPTION: Send a GraphQL subscription query to listen for changes in a specific collection, specifying the fields to be returned in the response.\nSOURCE: https://github.com/directus/docs/blob/main/content/guides/7.realtime/2.subscriptions.md#2025-04-09_snippet_7\n\nLANGUAGE: graphql\nCODE:\n```\nsubscription {\n\tposts_mutated {\n\t\tkey\n\t\tevent\n\t\tdata {\n\t\t\tid\n\t\t\ttext\n\t\t}\n\t}\n}\n```\n\n----------------------------------------\n\nTITLE: Subscribing to Messages in Directus WebSocket\nDESCRIPTION: This JavaScript snippet sets up a WebSocket connection and subscribes to message updates in the Directus collection.\nSOURCE: https://github.com/directus/docs/blob/main/content/tutorials/2.projects/build-a-multi-user-chat-with-vue-js-and-directus-realtime.md#2025-04-09_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nonMounted(() => {\n  const cleanup = client.onWebSocket('message', function (message) {\n    if (message.type == 'auth' && message.status == 'ok') {\n      subscribe('create');\n    }\n  });\n\n  client.connect();\n  onBeforeUnmount(cleanup);\n});\n\nasync function subscribe(event) {\n  const { subscription } = await client.subscribe('messages', {\n    event,\n    query: {\n      fields: ['*', 'user_created.first_name'],\n    },\n  });\n\n  for await (const message of subscription) {\n    receiveMessage(message);\n  }\n}\n\nfunction receiveMessage() {\n  if (data.type == 'subscription' && data.event == 'init') {\n\t  console.log('subscription started');\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Message Submission and Logout Handlers in TypeScript\nDESCRIPTION: Implements message submission and logout functionality including WebSocket message sending and local storage management.\nSOURCE: https://github.com/directus/docs/blob/main/content/tutorials/2.projects/build-a-realtime-chat-app-using-directus-and-nuxt.md#2025-04-09_snippet_13\n\nLANGUAGE: typescript\nCODE:\n```\nconst newMessage: Ref<string> = ref('')\nconst messageSubmit = () => {\n\t$directus.sendMessage({\n\t\ttype: 'items',\n\t\tcollection: 'messages',\n\t\taction: 'create',\n\t\tdata: { content: newMessage.value },\n\t})\n\n\tnewMessage.value = ''\n}\n\nconst logout = () => {\n\t$directus.sendMessage({\n\t\ttype: 'auth',\n\t\taction: 'logout',\n\t})\n\trefreshToken.value = undefined\n\tlocalStorage.removeItem('directus_refresh_token')\n}\n```\n\n----------------------------------------\n\nTITLE: Dynamic Page Template\nDESCRIPTION: Template for generating dynamic pages from Directus content\nSOURCE: https://github.com/directus/docs/blob/main/content/tutorials/1.getting-started/fetch-data-from-directus-with-eleventy-3.md#2025-04-09_snippet_6\n\nLANGUAGE: html\nCODE:\n```\n---\nlayout: layouts/base.njk\npagination:\n    data: pages\n    size: 1\n    alias: page\npermalink: \"{{ page.slug }}/index.html\"\neleventyComputed:\n    title: \"{{ page.title }}\"\n---\n\n<h1>{{ title }}</h1>\n{{ page.content | safe }}\n```\n\n----------------------------------------\n\nTITLE: Handling Post Update API Route in TypeScript\nDESCRIPTION: This TypeScript API route handles the form submission for updating a post. It uses the Directus SDK to update the post in the database and handles authentication and error responses.\nSOURCE: https://github.com/directus/docs/blob/main/content/tutorials/1.getting-started/using-authentication-in-astro.md#2025-04-09_snippet_18\n\nLANGUAGE: typescript\nCODE:\n```\nimport type { APIRoute } from \"astro\";\nimport client from \"../../../../lib/directus\";\nimport { createItem, updateItem, withToken } from \"@directus/sdk\";\n\nexport const POST: APIRoute = async ({ request, cookies, redirect }) => {\n  const formData = await request.formData();\n  const title = formData.get(\"title\") as string;;\n  const content = formData.get(\"content\") as string;;\n  const id = formData.get(\"id\") as string;\n\n  try {\n    const token = cookies.get(\"directus_session_token\")?.value;\n    if (!token) {\n      return new Response(\"Authentication token is missing\", { status: 401 });\n    }\n    const response = await client.request(updateItem(\"posts\", id, {\n      title,\n      content,\n    }))\n    console.log(response);\n    return redirect(\"/dashboard\");\n  } catch (error: any) {\n    const message = error?.errors?.[0]?.message || 'Failed to update post';\n    console.error(error.errors);\n        return new Response(message, { status: 500 });\n  }\n};\n```\n\n----------------------------------------\n\nTITLE: Creating Global Data Fetcher\nDESCRIPTION: Server-side function to fetch global metadata from Directus with caching\nSOURCE: https://github.com/directus/docs/blob/main/content/tutorials/1.getting-started/fetch-data-from-directus-with-solidstart.md#2025-04-09_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nexport const getGlobals = cache(async () => {\n  \"use server\";\n  try {\n    return await directus.request.readItems(\"global\");\n  } catch (e) {\n    console.error(e);\n    return null;\n  }\n}, \"globals\");\n```\n\n----------------------------------------\n\nTITLE: Configuring Directus SDK and Fetching Page Blocks\nDESCRIPTION: TypeScript implementation for initializing the Directus client and creating a function to fetch page blocks by slug with nested relationships.\nSOURCE: https://github.com/directus/docs/blob/main/content/tutorials/1.getting-started/rendering-dynamic-blocks-using-astro.md#2025-04-09_snippet_3\n\nLANGUAGE: ts\nCODE:\n```\n/// <reference types=\"vite/client\" />\nimport { createDirectus, rest, readItems } from \"@directus/sdk\";\n\nconst DIRECTUS_URL = import.meta.env.DIRECTUS_URL;\n\nconst client = createDirectus(DIRECTUS_URL).with(rest());\n\nexport async function fetchPageBlocks(slug: string) {\n  console.log(slug);\n  const pages = await client.request(\n    readItems(\"pages\", {\n      filter: {\n        slug: { _eq: slug },\n      },\n      fields: [\n        \"*\",\n        {\n          blocks: [\n            \"*\",\n            {\n              item: {\n                block_hero: [\"*\"],\n                block_cardgroup: [\n                  \"*\",\n                  {\n                    posts: [\n                      \"*.*\", // Fetch all fields from related posts\n                    ],\n                    cards: [\n                      \"*.*\", // Fetch all fields from related cards\n                    ],\n                  },\n                ],\n                block_richtext: [\"*\"],\n              },\n            },\n          ],\n        },\n      ],\n      limit: 1,\n    })\n  );\n  return pages[0] || []; // Return blocks array or empty if not found\n}\nexport default client;\n```\n\n----------------------------------------\n\nTITLE: Adding Post Navigation Method\nDESCRIPTION: Implementation of navigation method for handling post clicks\nSOURCE: https://github.com/directus/docs/blob/main/content/tutorials/1.getting-started/fetch-data-from-directus-with-angular.md#2025-04-09_snippet_13\n\nLANGUAGE: typescript\nCODE:\n```\n  constructor(private router: Router) {}\n\n  goToPost(slug: string){\n    this.router.navigate(['/blog', slug]);\n  }\n```\n\n----------------------------------------\n\nTITLE: Implementing User Registration Form in Nuxt\nDESCRIPTION: Vue component for a user registration form that uses the Directus SDK to register new users with an email and password, displaying success or error messages.\nSOURCE: https://github.com/directus/docs/blob/main/content/tutorials/1.getting-started/using-authentication-in-nuxt.md#2025-04-09_snippet_10\n\nLANGUAGE: vue\nCODE:\n```\n<script setup lang=\"ts\">\nconst { $directus, $registerUser } = useNuxtApp()\n\nconst email = ref('')\nconst password = ref('')\nconst result = ref(false)\n\nconst register = async () => {\n\ttry {\n\t\tawait $directus.request($registerUser(email.value, password.value))\n\t\tresult.value = true\n\t\tpassword.value = ''\n\t} catch (error) {\n\t\tconsole.error(error)\n\t\tresult.value = false\n\t\tpassword.value = ''\n\t}\n}\n</script>\n<template>\n\t<form @submit.prevent=\"register\">\n\t\t<h1>Register</h1>\n\t\t<div v-if=\"result\">\n\t\t\t<p>Successfully registered</p>\n\t\t</div>\n\t\t<div>\n\t\t\t<input required type=\"text\" v-model=\"email\" name=\"email\" placeholder=\"Email\" />\n\t\t</div>\n\t\t<div>\n\t\t\t<input required type=\"password\" v-model=\"password\" name=\"password\" placeholder=\"Password\" />\n\t\t</div>\n\t\t<button type=\"submit\">Register</button>\n\t</form>\n</template>\n```\n\n----------------------------------------\n\nTITLE: Creating Stripe Payment Sessions with Next.js API Route\nDESCRIPTION: This API route handles the creation of Stripe checkout sessions. It processes order information, generates line items for Stripe, and creates a session with metadata. The route returns a URL for the Stripe checkout page.\nSOURCE: https://github.com/directus/docs/blob/main/content/tutorials/2.projects/build-an-ecommerce-platform-with-next-js-stripe-and-directus-automate.md#2025-04-09_snippet_16\n\nLANGUAGE: ts\nCODE:\n```\nimport { ProductTypes } from \"@/types\";\nimport { NextResponse } from \"next/server\";\nimport Stripe from \"stripe\";\nimport generateOrderNum from \"@/utils/generateOrderNum\";\n\nconst stripe = new Stripe(process.env.STRIPE_SECRET_KEY as string);\n\ntype RequestData = {\n  first_name: string,\n  last_name: string,\n  email: string,\n  total_amount: number,\n  address: string,\n  products: ProductTypes[]\n  shipping_address: string,\n};\nexport async function POST(req: Request) {\n  const {\n    first_name,\n    last_name,\n    email,\n    total_amount,\n    shipping_address,\n    products\n  }: RequestData = await req.json();\n\n  const order_no = generateOrderNum();\n\n  const line_items = products.map(product => ({\n    quantity: 1,\n    price_data: {\n      currency: \"usd\",\n      product_data: {\n        name: product.name,\n        description: product.description,\n      },\n      unit_amount: product.price * 100, // Stripe expects prices in cents\n    },\n  }));\n\n  try {\n    console.log(order_no)\n\n    const stripeSession = await stripe.checkout.sessions.create({\n      line_items,\n      mode: \"payment\",\n      success_url: `${process.env.APP_URL}/checkout/success?orderNo=${order_no}`,\n      cancel_url: `${process.env.APP_URL}/checkout/shipping`,\n      metadata: {\n        total_amount: total_amount * 100, // Stripe expects prices in cents\n        first_name,\n        last_name,\n        email,\n        date: new Date().toISOString(),\n        products: JSON.stringify(products.map(product => (product.id))),\n        shipping_address,\n        order_no,\n      },\n    });\n\n    console.log(stripeSession);\n    return NextResponse.json({ url: stripeSession.url! });\n  } catch (err) {\n    console.log({ err });\n    return NextResponse.json(\n      { message: \"An expected error occurred, please try again\" },\n      { status: 500 }\n    );\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Accessing Directus Stores with useStores() Composable\nDESCRIPTION: The useStores composable provides access to all Directus data stores, including field, permission, and collection stores for interacting with project data.\nSOURCE: https://github.com/directus/docs/blob/main/content/guides/9.extensions/3.app-extensions/8.composables.md#2025-04-09_snippet_1\n\nLANGUAGE: html\nCODE:\n```\n<script setup>\nimport { useStores } from '@directus/extensions-sdk';\nconst { useFieldsStore, usePermissionsStore, useCollectionStore } = useStores();\n\nconst fieldsStore = useFieldsStore();\nconst permissionsStore = usePermissionsStore();\nconst collectionStore = useCollectionStore();\n</script>\n```\n\n----------------------------------------\n\nTITLE: Fetching Vonage Activity Data in Vue Component\nDESCRIPTION: This function constructs query parameters based on props, performs an API call to fetch Vonage activity data, and updates the component's state accordingly.\nSOURCE: https://github.com/directus/docs/blob/main/content/tutorials/5.extensions/display-external-api-data-from-vonage-in-custom-panels.md#2025-04-09_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\nasync function fetchData() {\n  isLoading.value = true;\n  activityData.value = [];\n\n  const dateStart = adjustDate(now.value, props.range ? `-${props.range}` : '-1 day');\n\n  const params = {\n    product: props.type || 'SMS',\n    direction: props.direction || 'outbound',\n    include_message: props.includeMessage.toString(),\n    date_start: dateStart ? formatISO(dateStart) : '',\n    status: props.status || 'any',\n  };\n\n  if (props.status) params.status = props.status;\n\n  const url_params = new URLSearchParams(params);\n\n  try {\n    const response = await api.get(`/vonage/records?${url_params.toString()}`);\n    activityData.value = response.data.records;\n  } catch {\n    errorMessage.value = 'Internal Server Error';\n  } finally {\n    isLoading.value = false;\n  }\n}\n\nfetchData();\n```\n\n----------------------------------------\n\nTITLE: Initializing Directus Database\nDESCRIPTION: Command to initialize the Directus database, setting up required tables and running migrations.\nSOURCE: https://github.com/directus/docs/blob/main/content/community/3.codebase/2.dev-environment.md#2025-04-09_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\npnpm --filter api cli bootstrap\n```\n\n----------------------------------------\n\nTITLE: Implementing Testimonial Creation Form in Svelte\nDESCRIPTION: This snippet creates a Svelte component for adding new testimonials. It uses Directus SDK to send data to the server and includes form validation and loading state management.\nSOURCE: https://github.com/directus/docs/blob/main/content/tutorials/2.projects/build-a-testimonial-widget-with-sveltekit-and-directus.md#2025-04-09_snippet_8\n\nLANGUAGE: javascript\nCODE:\n```\n<script>\nimport getDirectusInstance from \"$lib/directus\";\nimport { error } from \"@sveltejs/kit\";\nimport { createItem } from \"@directus/sdk\";\nexport let full_name;\nexport let email_address;\nexport let review;\nexport let addTestimonial;\nlet loading = false;\nconst directus = getDirectusInstance(fetch);\n\nasync function createTestimonial() {\n\tvar item = {\n\t\tfull_name: full_name,\n\t\temail_address: email_address,\n\t\treview: review,\n\t};\n\n\ttry {\n\t\tloading = true;\n\t\tawait directus.request(createItem(\"testimonials\", item));\n\t\tloading = false;\n\t\taddTestimonial = false;\n\t} catch (err) {\n\t\tconsole.log(err);\n\t\tloading = false;\n\t\taddTestimonial = false;\n\t\terror(err);\n\t}\n}\n</script>\n\n<div class=\"create-div\">\n  <form class=\"create-form\">\n    <h1 class=\"create-h1\">Add your Testimonial</h1>\n    <label class=\"create-label\" for=\"email\">Full Name</label>\n    <input\n      class=\"create-input\"\n      name=\"full_name\"\n      required\n      bind:value={full_name}\n    />\n    <label class=\"create-label\" for=\"password\">Email</label>\n    <input\n      class=\"create-input\"\n      name=\"email_address\"\n      type=\"email\"\n      required\n      bind:value={email_address}\n    />\n    <label class=\"create-label\" for=\"email\">Enter your testimonial</label>\n    <textarea\n      rows=\"5\"\n      class=\"create-input\"\n      name=\"review\"\n      required\n      bind:value={review}\n    />\n    <button on:click={createTestimonial} class=\"create-button\">\n      {#if loading}\n        <svg\n          aria-hidden=\"true\"\n          role=\"status\"\n          class=\"create-spinner\"\n          viewBox=\"0 0 100 101\"\n          fill=\"none\"\n          xmlns=\"http://www.w3.org/2000/svg\"\n        >\n          <path\n            d=\"M100 50.5908C100 78.2051 77.6142 100.591 50 100.591C22.3858 100.591 0 78.2051 0 50.5908C0 22.9766 22.3858 0.59082 50 0.59082C77.6142 0.59082 100 22.9766 100 50.5908ZM9.08144 50.5908C9.08144 73.1895 27.4013 91.5094 50 91.5094C72.5987 91.5094 90.9186 73.1895 90.9186 50.5908C90.9186 27.9921 72.5987 9.67226 50 9.67226C27.4013 9.67226 9.08144 27.9921 9.08144 50.5908Z\"\n            fill=\"#E5E7EB\"\n          />\n          <path\n            d=\"M93.9676 39.0409C96.393 38.4038 97.8624 35.9116 97.0079 33.5539C95.2932 28.8227 92.871 24.3692 89.8167 20.348C85.8452 15.1192 80.8826 10.7238 75.2124 7.41289C69.5422 4.10194 63.2754 1.94025 56.7698 1.05124C51.7666 0.367541 46.6976 0.446843 41.7345 1.27873C39.2613 1.69328 37.813 4.19778 38.4501 6.62326C39.0873 9.04874 41.5694 10.4717 44.0505 10.1071C47.8511 9.54855 51.7191 9.52689 55.5402 10.0491C60.8642 10.7766 65.9928 12.5457 70.6331 15.2552C75.2735 17.9648 79.3347 21.5619 82.5849 25.841C84.9175 28.9121 86.7997 32.2913 88.1811 35.8758C89.083 38.2158 91.5421 39.6781 93.9676 39.0409Z\"\n            fill=\"currentColor\"\n          />\n        </svg>\n      {:else}\n        <div class=\"create-button-text\">Add a review</div>\n      {/if}\n    </button>\n  </form>\n</div>\n\n<style>\n.create-input {\n\tdisplay: flex;\n\talign-items: center;\n\tpadding: 2px 2px 2px 2px;\n\twidth: 400px;\n\tmin-height: 30px;\n\tfont-size: small;\n\tmargin-top: 2px;\n\tborder-radius: 5px;\n}\n.create-input:focus {\n\toutline: none;\n}\n.create-label {\n\tfont: bold;\n\tfont-size: small;\n\tmargin-top: 10px;\n}\n.create-h1 {\n\tpadding-top: 3px;\n\tfont: bolder;\n\tfont-size: medium;\n}\n.create-form {\n\tdisplay: flex;\n\tflex-direction: column;\n\tpadding: 8px 8px 8px 8px;\n\tbackground-color: white;\n\tborder-radius: 20px;\n}\n.create-div {\n\tdisplay: flex;\n\tflex-direction: column;\n\tjustify-content: center;\n\tjustify-items: center;\n\talign-items: center;\n}\n.create-button {\n\tdisplay: flex;\n\tjustify-items: center;\n\talign-items: center;\n\tfont-size: small;\n\tpadding: 10px 20px 10px 20px;\n\twidth: 80;\n\tbackground-color: blue;\n\tborder-color: white;\n\tmargin-top: 8px;\n\tfont: bold;\n\tborder-radius: 25px;\n\tcolor: white;\n}\n.create-button-text {\n\ttext-align: center;\n\tjustify-content: center;\n\tjustify-self: center;\n}\n.create-spinner {\n\theight: 8px;\n\twidth: 8px;\n\tdisplay: inline;\n\tjustify-self: center;\n\tanimation-name: spin;\n\tanimation-duration: 5000ms;\n\tanimation-iteration-count: infinite;\n}\n</style>\n```\n\n----------------------------------------\n\nTITLE: Implementing User Login in SvelteKit\nDESCRIPTION: SvelteKit component for user login functionality using Directus SDK\nSOURCE: https://github.com/directus/docs/blob/main/content/tutorials/1.getting-started/using-authentication-in-sveltekit.md#2025-04-09_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\n<!-- src/routes/login/+page.svelte -->\n<script>\n  import { client, isAuthenticated } from \"../../lib/directus.js\";\n  import { goto } from \"$app/navigation\";\n\n  let email = \"\";\n  let password = \"\";\n  let error = null;\n\n  async function handleLogin() {\n    try {\n      // Call the login method directly from the client\n      const result = await client.login(email, password);\n      console.log(\"Login successful:\", result);\n\n      // Check if the user is authenticated\n      const authStatus = await isAuthenticated();\n      console.log(\"Authentication status:\", authStatus);\n\n      if (authStatus.authenticated) {\n        goto(\"/protected\");\n      } else {\n        error = \"Failed to authenticate. Please try again.\";\n      }\n    } catch (err) {\n      if (err.response?.status === 403) {\n        error = \"Invalid email or password.\";\n      } else {\n        error = err.message || \"Login failed.\";\n      }\n      console.error(\"Login error:\", err);\n    }\n  }\n</script>\n\n<div>\n  <h1 style=\"color: #000;\">Welcome Back</h1>\n\n  {#if error}\n    <div>\n      <p>{error}</p>\n    </div>\n  {/if}\n\n  <form on:submit|preventDefault={handleLogin}>\n    <div>\n      <input\n        type=\"email\"\n        bind:value={email}\n        placeholder=\"Email\"\n        required\n        autocomplete=\"email\"\n      />\n    </div>\n    <div>\n      <input\n        type=\"password\"\n        bind:value={password}\n        placeholder=\"Password\"\n        required\n      />\n    </div>\n    <button type=\"submit\">Sign In</button>\n  </form>\n\n  <p style=\"color: #000;\">\n    Don't have an account? <a href=\"/register\">Register here</a>\n  </p>\n</div>\n```\n\n----------------------------------------\n\nTITLE: Directus Token Utility\nDESCRIPTION: Utility functions for handling Directus authentication tokens and URL manipulation for secure image access.\nSOURCE: https://github.com/directus/docs/blob/main/content/tutorials/5.extensions/implement-navigation-in-multipage-custom-modules.md#2025-04-09_snippet_12\n\nLANGUAGE: javascript\nCODE:\n```\nexport default function useDirectusToken(directusApi) {\n  return {\n    addQueryToPath,\n    getToken,\n    addTokenToURL,\n  };\n\n  function addQueryToPath(path, query) {\n    const queryParams = [];\n\n    for (const [key, value] of Object.entries(query)) {\n      queryParams.push(`${key}=${value}`);\n    }\n\n    return path.includes('?') ? `${path}&${queryParams.join('&')}` : `${path}?${queryParams.join('&')}`;\n  }\n\n  function getToken() {\n    return (\n      directusApi.defaults?.headers?.['Authorization']?.split(' ')[1] ||\n      directusApi.defaults?.headers?.common?.['Authorization']?.split(' ')[1] ||\n      null\n    );\n  }\n\n  function addTokenToURL(url) {\n    const accessToken = getToken();\n    if (!accessToken) return url;\n    return addQueryToPath(url, {\n      access_token: accessToken,\n    });\n  }\n};\n```\n\n----------------------------------------\n\nTITLE: Implementing Send Button with Confirmation Dialog in Vue\nDESCRIPTION: This Vue component creates a send button with a confirmation dialog to prevent accidental clicks. It includes conditional rendering based on the presence of recipients and message content.\nSOURCE: https://github.com/directus/docs/blob/main/content/tutorials/5.extensions/send-sms-messages-with-twilio-in-custom-panels.md#2025-04-09_snippet_21\n\nLANGUAGE: vue\nCODE:\n```\n<v-dialog v-model=\"smsConfirmation\" @esc=\"smsConfirmation = false; refresh()\">\n\t<template #activator=\"{ on }\">\n\t\t<v-button @click=\"on\" v-if=\"recipients != undefined && recipients.length > 0 && (message || custom_message != '')\">\n\t\t\t\t{{ buttonLabel }}\n\t\t</v-button>\n\t\t<v-button v-else secondary disabled>{{ buttonLabel }}</v-button>\n\t</template>\n\t<!-- Confirmation goes here -->\n</v-dialog>\n```\n\n----------------------------------------\n\nTITLE: Setting up Directus SDK Helper\nDESCRIPTION: Initial setup of Directus SDK client with REST implementation\nSOURCE: https://github.com/directus/docs/blob/main/content/tutorials/1.getting-started/fetch-data-from-directus-with-solidstart.md#2025-04-09_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\nimport { createDirectus, readItem, readItems, rest } from \"@directus/sdk\";\nimport { cache } from \"@solidjs/router\";\n\nexport const directus = createDirectus(\"YOUR_DIRECTUS_PROJECT_URL\").with(rest());\n```\n\n----------------------------------------\n\nTITLE: Configuring Directus REST Client with Cache Control\nDESCRIPTION: Configuration for the Directus REST client to prevent Next.js from caching responses, ensuring fresh data is always fetched.\nSOURCE: https://github.com/directus/docs/blob/main/content/tutorials/2.projects/build-forms-dynamically-using-directus-and-next.md#2025-04-09_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\n.with(\n  rest({\n    onRequest: (options) => ({ ...options, cache: 'no-store' }),\n  })\n)\n```\n\n----------------------------------------\n\nTITLE: Displaying Markdown Table for Table Layout Options\nDESCRIPTION: This markdown table describes the layout options for the Table layout in Directus, including the Spacing control.\nSOURCE: https://github.com/directus/docs/blob/main/content/guides/2.content/3.layouts.md#2025-04-09_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n| Control         | Description                               |\n| --------------- | ----------------------------------------- |\n| **Spacing** | Adjust the vertical space a row takes up. |\n```\n\n----------------------------------------\n\nTITLE: Installing Eleventy and Directus SDK\nDESCRIPTION: Commands to create a new 11ty project and install required dependencies including the Directus SDK\nSOURCE: https://github.com/directus/docs/blob/main/content/tutorials/1.getting-started/fetch-data-from-directus-with-eleventy-3.md#2025-04-09_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nmkdir my-website && cd my-website\nnpm init -y\nnpm install @11ty/eleventy@3.0.0-alpha.2 @directus/sdk\n```\n\n----------------------------------------\n\nTITLE: Configuring Server-Side Data Fetching in Next.js\nDESCRIPTION: Implementation of server-side data fetching using Directus SDK and server actions to retrieve initial posts.\nSOURCE: https://github.com/directus/docs/blob/main/content/tutorials/3.tips-and-tricks/implement-pagination-and-infinite-scrolling-in-next-js-.md#2025-04-09_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\nimport PostList from \"@/components/PostList\";\nimport directus from \"@/lib/directus\";\nimport { readItems } from \"@directus/sdk\";\n\nconst getPosts = async () => {\n  \"use server\";\n  return await directus.request(readItems(\"posts\"));\n};\n\nexport default async function Home() {\n  const initialPosts = await getPosts();\n\n  return (\n    <>\n      <div>\n        <PostList initialPosts={initialPosts} />\n      </div>\n    </>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Stripe Webhook Handler\nDESCRIPTION: API route handler for processing Stripe webhook events, specifically handling successful checkout sessions and creating reservations in Directus.\nSOURCE: https://github.com/directus/docs/blob/main/content/tutorials/2.projects/build-an-hotel-booking-platform-with-next-js-stripe-and-directus-automate.md#2025-04-09_snippet_16\n\nLANGUAGE: typescript\nCODE:\n```\nimport { NextResponse } from \"next/server\";\nimport Stripe from \"stripe\";\nimport { makeReservation } from \"@/lib/apis\";\n\nconst checkout_session_completed = \"checkout.session.completed\";\nconst stripe = new Stripe(process.env.STRIPE_SECRET_KEY as string);\n\nexport async function POST(req: Request, res: Response) {\n  const reqBody = await req.text();\n  const sig = req.headers.get(\"stripe-signature\");\n  const webhookSecret = process.env.STRIPE_WEBHOOK_SECRET;\n\n  let event: Stripe.Event;\n\n  try {\n    if (!sig || !webhookSecret) return;\n    event = stripe.webhooks.constructEvent(reqBody, sig, webhookSecret);\n  } catch (error: any) {\n    console.log(error);\n    return NextResponse.json(\n      { message: `Webhook Error: ${error.message}` },\n      { status: 500 }\n    );\n  }\n\n  // load our event\n  switch (event.type) {\n    case checkout_session_completed:\n      const session = event.data.object;\n      if (!session.metadata || !session.payment_intent) {\n        console.error(\"Missing metadata or Payment Intent in Stripe session\");\n        // Optionally return an error response\n        return NextResponse.json(\n          { message: \"Incomplete reservation data\" },\n          { status: 400 }\n        );\n      }\n\n      const {\n        // @ts-ignore\n        metadata: {\n          first_name,\n          last_name,\n          email,\n          phone_number,\n          check_in_date,\n          check_out_date,\n          room_id,\n          nights,\n          total_price,\n        },\n        payment_intent,\n      } = session;\n      console.log({ payment_intent });\n      await makeReservation({\n        first_name,\n        last_name,\n        email,\n        phone_number,\n        check_in_date,\n        check_out_date,\n        room_id,\n        nights,\n        total_price,\n        payment_id: payment_intent as string,\n      });\n\n      return NextResponse.json(\"Booking successful\", {\n        status: 200,\n        statusText: \"Booking Successful\",\n      });\n\n    default:\n      console.log(`Unhandled event type ${event.type}`);\n  }\n\n  return NextResponse.json({ message: \"Event Received\" }, { status: 200 });\n```\n\n----------------------------------------\n\nTITLE: Implementing Global Metadata Component in Angular\nDESCRIPTION: Creates an Angular component to fetch and display global metadata from Directus. It uses the Directus SDK to retrieve the singleton data and renders it in the component template.\nSOURCE: https://github.com/directus/docs/blob/main/content/tutorials/1.getting-started/fetch-data-from-directus-with-angular.md#2025-04-09_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport {Component, OnInit} from '@angular/core';\nimport {directus, Global} from \"../../../../directus\";\nimport {CommonModule} from \"@angular/common\";\nimport {readSingleton} from \"@directus/sdk\";\n\n@Component({\n  selector: 'app-global',\n  standalone: true,\n  imports: [\n    CommonModule\n  ],\n  templateUrl: './global.component.html',\n  styleUrl: './global.component.css'\n})\nexport class GlobalComponent implements OnInit{\n  global: Global;\n  ngOnInit(): void {\n    this.getGlobal();\n  }\n\n  async getGlobal(){\n    //@ts-ignore\n    this.global = await directus\n      .request<Global>(readSingleton(\"global\"))\n  }\n\n}\n```\n\nLANGUAGE: html\nCODE:\n```\n<div *ngIf=\"global\">\n  <h1>{{global.title}}</h1>\n  <p>{{global.description}}</p>\n</div>\n```\n\n----------------------------------------\n\nTITLE: Rendering Chat Messages in React\nDESCRIPTION: JSX code for displaying chat messages from the messages state array. Each message shows the sender's first name (or 'Anonymous' if none) and the message content.\nSOURCE: https://github.com/directus/docs/blob/main/content/tutorials/2.projects/build-a-realtime-chat-app-with-directus-and-next.md#2025-04-09_snippet_7\n\nLANGUAGE: jsx\nCODE:\n```\n<div>\n    <h2>Chat</h2>\n    {messages.map((message) => (\n      <div key={message.id}>\n        {message.user_created?.first_name || 'Anonymous'}: {message.content}\n      </div>\n    ))}\n  </div>\n```\n\n----------------------------------------\n\nTITLE: Implementing Token Refresh in Directus Plugin\nDESCRIPTION: This snippet adds a refreshToken function to the Directus plugin to handle token refreshing. It uses the refresh function from the Directus SDK to request a new token when needed.\nSOURCE: https://github.com/directus/docs/blob/main/content/tutorials/1.getting-started/using-authentication-in-nuxt.md#2025-04-09_snippet_21\n\nLANGUAGE: typescript\nCODE:\n```\nimport {\n\tcreateDirectus,\n\trest,\n\treadItems,\n\tregisterUser,\n\tauthentication,\n\treadMe,\n\trefresh,\n\ttype AuthenticationStorage\n} from \"@directus/sdk\";\n\nexport default defineNuxtPlugin(() => {\n\tclass NuxtCookieStorage {\n\t\tcookie = useCookie('directus-data')\n\t\tget() {\n\t\t\treturn this.cookie.value\n\t\t}\n\t\tset(data: any) {\n\t\t\tthis.cookie.value = data\n\t\t}\n\t}\n\n\tconst storage = new NuxtCookieStorage() as AuthenticationStorage\n\n\tconst directus = createDirectus<DirectusSchema>(\n\t\t\"http://localhost:3000/directus\",\n\t)\n\t.with(authentication(\"cookie\", { credentials: \"include\", storage }))\n\t\t.with(rest({ credentials: \"include\" }));\n\t\n\tconst isAuthenticated = async () => {\n\t\ttry {\n\t\t\tconst me = await directus.request(\n\t\t\t\treadMe(),\n\t\t\t);\n\t\t\treturn me\n\t\t} catch (error) {\n\t\t\tconsole.error(error);\n\t\t\treturn false;\n\t\t}\n\t};\n\n\tconst refreshToken = async () => {\n\t\treturn directus.request(\n\t\t\trefresh('cookie')\n\t\t);\n\t};\n\n\treturn {\n\t\tprovide: { directus, readItems, registerUser, isAuthenticated, refreshToken },\n\t};\n});\n```\n\n----------------------------------------\n\nTITLE: Implementing Hero Component in Astro\nDESCRIPTION: Astro component for rendering a hero block with headline, content, buttons, and an image from Directus CMS.\nSOURCE: https://github.com/directus/docs/blob/main/content/tutorials/1.getting-started/rendering-dynamic-blocks-using-astro.md#2025-04-09_snippet_4\n\nLANGUAGE: astro\nCODE:\n```\n---\nimport { Image } from 'astro:assets';\n\ninterface Button {\n  label: string;\n  href: string;\n  variant: string;\n}\n\nconst { \n  headline = '', \n  content = '', \n  buttons = [], \n  image = '' \n} = Astro.props.item as {\n  headline?: string;\n  content?: string;\n  buttons?: Button[];\n  image?: string;\n};\n\nconst DIRECTUS_URL = import.meta.env.DIRECTUS_URL;\n---\n\n<section>\n  {headline && <h1>{headline}</h1>}\n  {content && <div set:html={content} />}\n  \n  {buttons.length > 0 && (\n    <div>\n      {buttons.map(({ label, href, variant }) => (\n        <a href={href || '#'} class={variant || ''}>\n          {label || 'Click here'}\n        </a>\n      ))}\n    </div>\n  )}\n  \n  {image && DIRECTUS_URL && (\n    <img src={`${DIRECTUS_URL}/assets/${image}?width=500`} alt={headline || 'Image'} />\n  )}\n</section>\n```\n\n----------------------------------------\n\nTITLE: Sending Temperature and Humidity Data to Directus (Arduino/C++)\nDESCRIPTION: This code snippet sets up WiFi connectivity, reads data from the DHT22 sensor, and sends it to a Directus project via HTTP POST requests. It includes error handling for WiFi connection and sensor reading issues.\nSOURCE: https://github.com/directus/docs/blob/main/content/tutorials/2.projects/integrate-directus-with-esp-32-hardware-sensors.md#2025-04-09_snippet_1\n\nLANGUAGE: cpp\nCODE:\n```\n#include <WiFi.h>\n#include <HTTPClient.h>\n#include <Arduino.h>\n#include <DHT.h>\nconst char* ssid = \"<YOUR_WIFI_SSID>\";\nconst char* password = \"<YOUR_WIFI_PASSWORD>\";\nconst char* directusToken = \"Bearer <TOKEN>\";\nconst char* directusEndpoint = \"http://192.168.43.143:8055/items/temperature_and_humidity\";\nfloat temperature, humidity;\nDHT dht22_sensor(13, DHT22);\nHTTPClient http;\nhttp.begin(directusEndpoint);\nhttp.addHeader(\"Content-Type\", \"application/json\");\nhttp.addHeader(\"Authorization\", directusToken);\nvoid setup() {\n  Serial.begin(115200);\n  delay(1000);\n  WiFi.mode(WIFI_STA);\n  WiFi.begin(ssid, password);\n  Serial.println(\"\\nConnecting to WiFi\");\n  while (WiFi.status() != WL_CONNECTED) {\n    delay(500);\n    Serial.print(\".\");\n  }\n  Serial.println(\"Connected to WiFi\");\n  dht22_sensor.begin();\n}\nvoid loop() {\n  if (WiFi.status() != WL_CONNECTED) {\n    Serial.println(\"Error in WiFi connection\");\n  }\n  temperature = dht22_sensor.readTemperature();\n  humidity = dht22_sensor.readHumidity();\n  if (isnan(temperature) || isnan(humidity)) {\n    Serial.println(\"Error reading sensor data\");\n  }\n  String jsonPayload = \"{\\\"temperature\\\":\" + String(temperature) + \",\\\"humidity\\\":\" + String(humidity) + \"}\";\n  Serial.println(jsonPayload);\n  int httpResponseCode = http.POST(jsonPayload);\n  if (httpResponseCode > 0) {\n    Serial.print(\"HTTP Response code: \");\n    Serial.println(httpResponseCode);\n    String response = http.getString();\n    Serial.println(response);\n  } else {\n    Serial.printf(\"[HTTP] POST... failed, error: %s\\n\", http.errorToString(httpResponseCode).c_str());\n  }\n  http.end();\n  Serial.print(\"Temperature: \");\n  Serial.print(temperature);\n  Serial.print(\"°C <-> Humidity: \");\n  Serial.print(humidity);\n  Serial.println(\"%\");\n delay(30000);\n}\n```\n\n----------------------------------------\n\nTITLE: Create Post Implementation in Svelte\nDESCRIPTION: Implements a form for creating new blog posts with authentication checking. Uses Directus SDK's createItem method to store posts.\nSOURCE: https://github.com/directus/docs/blob/main/content/tutorials/1.getting-started/using-authentication-in-sveltekit.md#2025-04-09_snippet_14\n\nLANGUAGE: javascript\nCODE:\n```\n// src/routes/protected/posts/create/+page.svelte\n\n<script>\n  import { createItem } from \"@directus/sdk\";\n  import { goto } from \"$app/navigation\";\n  import { client, isAuthenticated } from \"../../../../lib/directus.js\";\n  import { onMount } from \"svelte\";\n\n  let title = \"\";\n  let content = \"\";\n  let userId;\n\n  onMount(async () => {\n    console.log(\"onMount\");\n\n    const isAuth = await isAuthenticated();\n    console.log(\"isAuth\", isAuth);\n\n    if (isAuth.authenticated === false) {\n      goto(\"/login\"); // Redirect to login if the user is not authenticated\n    } else {\n      userId = isAuth.user.id; // Get the logged-in user ID\n      console.log(\"userId\", userId);\n    }\n  });\n\n  async function handleSubmit() {\n    try {\n  \n      const response = await client.request(\n        createItem(\"posts\", {\n          title,\n          content,\n        })\n      );\n      console.log(\"response\", response);\n\n      // Redirect to the posts list after successful post creation\n      goto(\"/protected/posts\");\n    } catch (error) {\n      console.error(\"Error creating post:\", error);\n    }\n  }\n</script>\n\n<h1>Create New Post</h1>\n\n<form on:submit|preventDefault={handleSubmit}>\n  <div class=\"form-group\">\n    <label for=\"title\">Title</label>\n    <input id=\"title\" type=\"text\" bind:value={title} required />\n  </div>\n\n  <div class=\"form-group\">\n    <label for=\"content\">Content</label>\n    <textarea id=\"content\" bind:value={content} rows=\"10\" required></textarea>\n  </div>\n\n  <button type=\"submit\" class=\"primary\">Create Post</button>\n</form>\n\n<a href=\"/protected/posts\" class=\"back-link\">Back to Posts</a>\n```\n\n----------------------------------------\n\nTITLE: Basic Vue Module Template\nDESCRIPTION: Initial Vue template structure for the module component.\nSOURCE: https://github.com/directus/docs/blob/main/content/tutorials/5.extensions/implement-navigation-in-multipage-custom-modules.md#2025-04-09_snippet_2\n\nLANGUAGE: vue\nCODE:\n```\n<template>\n    <private-view title=\"My Custom Module\">Content goes here...</private-view>\n</template>\n\n<script>\nexport default {};\n</script>\n```\n\n----------------------------------------\n\nTITLE: Implementing Weather Panel in Vue.js\nDESCRIPTION: Create a Vue.js component for the weather panel, including data fetching and display logic.\nSOURCE: https://github.com/directus/docs/blob/main/content/tutorials/5.extensions/display-external-weather-api-data-in-custom-panels.md#2025-04-09_snippet_3\n\nLANGUAGE: vue\nCODE:\n```\n<script>\nimport { useApi } from '@directus/extensions-sdk';\nimport { ref } from 'vue';\n\nexport default {\n\tprops: {\n\t\tshowHeader: {\n\t\t\ttype: Boolean,\n\t\t\tdefault: false,\n\t\t},\n\t\tlongitude: {\n\t\t\ttype: String,\n\t\t\tdefault: '0',\n\t\t},\n\t\tlatitude: {\n\t\t\ttype: String,\n\t\t\tdefault: '0',\n\t\t},\n\t},\n\tsetup(props) {\n\t\tconst api = useApi();\n\t\tconst weather = ref({});\n\n\t\tasync function fetchData() {\n\t\t\tconst response = await api.get(`/weather?longitude=${props.longitude}&latitude=${props.latitude}`);\n\t\t\tweather.value = response.data;\n\t\t}\n\t\tfetchData();\n\n\t\treturn { weather };\n\t}\n}\n</script>\n\n<template>\n\t<div class=\"text\" :class=\"{ 'has-header': showHeader }\">\n\t\t{{ weather }}\n\t</div>\n</template>\n```\n\n----------------------------------------\n\nTITLE: Configuring Laravel Routes for Blog Application\nDESCRIPTION: PHP route definitions for the Laravel application. It sets up routes for the blog index, individual posts, pages with slugs, and the homepage.\nSOURCE: https://github.com/directus/docs/blob/main/content/tutorials/1.getting-started/fetch-data-from-directus-with-laravel.md#2025-04-09_snippet_15\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\nuse Illuminate\\Support\\Facades\\Route;\nuse App\\Http\\Controllers\\HomeController;\nuse App\\Http\\Controllers\\PageController;\nuse App\\Http\\Controllers\\PostController;\n\nRoute::get('/blog', [PostController::class, 'index'])->name('posts.index');\nRoute::get('/blog/{id}', [PostController::class, 'show'])->name('posts.show');\nRoute::get('/page/{slug}', [PageController::class, 'show']);\nRoute::get('/', [HomeController::class, 'index']);\n```\n\n----------------------------------------\n\nTITLE: Creating Index Template\nDESCRIPTION: Nunjucks template for the home page using global data\nSOURCE: https://github.com/directus/docs/blob/main/content/tutorials/1.getting-started/fetch-data-from-directus-with-eleventy-3.md#2025-04-09_snippet_4\n\nLANGUAGE: html\nCODE:\n```\n---\nlayout: layouts/base.njk\neleventyComputed:\n    title: \"{{ global.title }}\"\n---\n\n<h1>{{ title }}</h1>\n<p>{{ global.description }}</p>\n```\n\n----------------------------------------\n\nTITLE: Implementing Submission Logic for Feedback Widget in Vue.js\nDESCRIPTION: This snippet shows the JavaScript function for handling feedback submission. It includes logic for creating or updating feedback records in Directus, error handling, and state management.\nSOURCE: https://github.com/directus/docs/blob/main/content/tutorials/2.projects/build-a-user-feedback-widget-with-vue-js-.md#2025-04-09_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\nasync function handleSubmission(rating) {\n\tloading.value = true;\n\tif (rating) feedback.rating = rating;\n\n\tconst body = {\n\t\tid: feedback.id,\n\t\trating: feedback.rating,\n\t\tcomments: feedback.comments,\n\t\ttitle: props.title,\n\t\turl: props.url,\n\t};\n\n\t// Replace this with your own Directus URL\n\tconst directusBaseUrl = 'https://yourdirectusurl.directus.app';\n\n\ttry {\n\t\tlet response;\n\n\t\t// If we've already created a feedback record, we'll update it with the new rating or comments.\n\t\tif (feedback.id) {\n\t\t\tresponse = await fetch(`${directusBaseUrl}/items/docs_feedback/${feedback.id}`, {\n\t\t\t\tmethod: 'PUT',\n\t\t\t\tbody: JSON.stringify(body),\n\t\t\t});\n\t\t} else {\n\t\t\tresponse = await fetch(`${directusBaseUrl}/items/docs_feedback/${feedback.id}`, {\n\t\t\t\tmethod: 'POST',\n\t\t\t\tbody: JSON.stringify(body),\n\t\t\t});\n\t\t}\n\n\t\tconst data = await response.json();\n\t\tfeedback.id = data.id;\n\n\t\t// If the reponse has comments, we can assume they've completed the second step. So we'll show the success message.\n\t\tif (data.comments) {\n\t\t\tsuccess.value = true;\n\t\t}\n\t} catch (err) {\n\t\terror.value = err;\n\t} finally {\n\t\tloading.value = false;\n\t}\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring CORS in Directus Docker Setup\nDESCRIPTION: CORS configuration for Directus in the docker-compose.yml file to allow cross-origin requests from a SvelteKit application running on localhost:5173.\nSOURCE: https://github.com/directus/docs/blob/main/content/tutorials/2.projects/build-forms-dynamically-using-directus-and-sveltekit.md#2025-04-09_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nCORS_ENABLED: \"true\" \nCORS_ORIGIN: \"http://localhost:5173\" \nCORS_CREDENTIALS: \"true\" \n```\n\n----------------------------------------\n\nTITLE: Complete Stripe Customer Creation Hook Implementation\nDESCRIPTION: The full implementation of the Directus hook that creates Stripe customers on Directus customer creation, updates the Directus record with the Stripe ID, and handles errors with email notifications.\nSOURCE: https://github.com/directus/docs/blob/main/content/tutorials/5.extensions/create-new-customers-in-stripe-in-a-custom-hook.md#2025-04-09_snippet_11\n\nLANGUAGE: javascript\nCODE:\n```\nimport Stripe from 'stripe';\n\nexport default ({ action }, { env, services }) => {\n  const { MailService, ItemsService } = services;\n\n  action('items.create', async ({ key, collection, payload }, { schema }) => {\n    if (collection !== 'customers') return;\n    const stripe = new Stripe(env.STRIPE_TOKEN);\n\n    stripe.customers\n      .create({\n        name: `${payload.first_name} ${payload.last_name}`,\n        email: payload.email_address,\n      })\n      .then((customer) => {\n        const customers = new ItemsService(collection, { schema });\n        customers.updateByQuery({ filter: { id: key } }, { stripe_id: customer.id }, { emitEvents: false });\n      })\n      .catch((error) => {\n        const mailService = new MailService({ schema });\n        mailService.send({\n          to: 'sharedmailbox@directus.io',\n          from: 'noreply@directus.io',\n          subject: `An error has occurred with Stripe API`,\n          text: `The following error occurred for ${payload.first_name} ${payload.last_name} when attempting to create an account in Stripe.\\r\\n\\r\\n${error}\\r\\n\\r\\nPlease investigate.\\r\\n\\r\\nID: ${key}\\r\\nEmail: ${payload.email_address}`,\n        });\n      });\n  });\n};\n```\n\n----------------------------------------\n\nTITLE: Defining Operation UI Form Fields\nDESCRIPTION: Configuration for the operation's input fields including phone number and message text areas\nSOURCE: https://github.com/directus/docs/blob/main/content/tutorials/5.extensions/send-sms-messages-with-twilio-in-custom-operations.md#2025-04-09_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\noptions: [\n\t{\n\t\tfield: 'phone_number',\n\t\tname: 'Phone Number',\n\t\ttype: 'string',\n\t\tmeta: {\n\t\t\twidth: 'half',\n\t\t\tinterface: 'input',\n\t\t},\n\t},\n\t{\n\t\tfield: 'message',\n\t\tname: 'Message',\n\t\ttype: 'text',\n\t\tmeta: {\n\t\t\twidth: 'full',\n\t\t\tinterface: 'input-multiline',\n\t\t},\n\t},\n]\n```\n\n----------------------------------------\n\nTITLE: Building Form Template Structure in Vue\nDESCRIPTION: Vue template that handles permissions validation and creates responsive layouts for form display based on panel width. It includes conditional classes for styling based on panel size.\nSOURCE: https://github.com/directus/docs/blob/main/content/tutorials/5.extensions/create-collection-items-in-custom-panels.md#2025-04-09_snippet_12\n\nLANGUAGE: vue\nCODE:\n```\n<template>\n  <div v-if=\"!hasPermission\" class=\"panel-error\">\n    <v-notice type=\"danger\" icon=\"warning\">You do not have permissions to {{ collection }}</v-notice>\n  </div>\n  <div v-else :class=\"['panel-internal-form', { small: width < 30, large: width >= 30, 'has-header': showHeader }]\">\n    <!-- Form goes here -->\n  </div>\n</template>\n```\n\n----------------------------------------\n\nTITLE: Sample Markdown Content for a Test Post\nDESCRIPTION: Markdown content to be used when creating a test post in Directus to verify the functioning of the implementation.\nSOURCE: https://github.com/directus/docs/blob/main/content/tutorials/1.getting-started/implementing-live-preview-in-nuxt.md#2025-04-09_snippet_11\n\nLANGUAGE: markdown\nCODE:\n```\nRabbits are known for their quickness and agility, but did you know they can also be incredibly productive? Here are a few tips to help you become the most productive rabbit you can be:\n\nSet clear goals. Determine what you want to achieve and make a plan to reach your goals.\n\nUse your natural abilities. Rabbits are quick, so use that speed to your advantage by completing tasks quickly and efficiently.\n\nStay organized. Keep your burrow neat and tidy so you can quickly find what you need when you need it.\n\nTake breaks. Despite their reputation for being quick, rabbits need breaks too. Take short hops to stretch your legs and rest your mind.\n\nSurround yourself with positive influences. Make friends with other productive rabbits and learn from their habits.\n\nBy following these tips, you'll be well on your way to becoming the most productive rabbit you can be. So, get hopping and get things done!\n```\n\n----------------------------------------\n\nTITLE: Implementing Language-Based Post Listing\nDESCRIPTION: Astro component for displaying posts list with language-specific routing\nSOURCE: https://github.com/directus/docs/blob/main/content/tutorials/1.getting-started/implementing-multilingual-content-using-directus-and-astro.md#2025-04-09_snippet_4\n\nLANGUAGE: astro\nCODE:\n```\n---\nimport Layout from \"../../layouts/Layout.astro\";\nimport { fetchPosts } from \"../../../lib/directus\";\n\nconst { lang } = Astro.params;\n\nexport function getStaticPaths() {\n  const supportedLanguages = [\"en-US\", \"de-DE\", \"es-ES\"];\n  return supportedLanguages.map((lang) => ({ params: { lang } }));\n}\n\n// Fetch posts for the selected language\nconst posts = await fetchPosts(lang);\n---\n\n<Layout lang={lang}>\n  <h1>Blog Posts in {lang}</h1>\n\n  <ul>\n    {posts.map((post) => {\n      const t = post.translations[0];\n      return (\n        <li>\n          <a href={`/${lang}/${post.slug}/`}>{t?.title}</a>\n        </li>\n      );\n    })}\n  </ul>\n</Layout>\n```\n\n----------------------------------------\n\nTITLE: Checking Permissions with usePermissionsStore\nDESCRIPTION: The usePermissionsStore helps verify the current user's access control permissions before performing operations in app extensions.\nSOURCE: https://github.com/directus/docs/blob/main/content/guides/9.extensions/3.app-extensions/8.composables.md#2025-04-09_snippet_3\n\nLANGUAGE: html\nCODE:\n```\n<script setup>\nimport { useStores } from '@directus/extensions-sdk';\nconst { usePermissionsStore } = useStores();\nconst permissionsStore = usePermissionsStore();\n\n// check if user can create a collection\nconst canCreate = permissionsStore.hasPermission('collection_name', 'create');\n\n// check if user can read a collection\nconst canRead = permissionsStore.hasPermission('collection_name', 'read');\n</script>\n```\n\n----------------------------------------\n\nTITLE: Filtering for Customer Collection\nDESCRIPTION: Adding a condition to only process events from the 'customers' collection, preventing the hook from running on other collections.\nSOURCE: https://github.com/directus/docs/blob/main/content/tutorials/5.extensions/create-new-customers-in-stripe-in-a-custom-hook.md#2025-04-09_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\naction('items.create', async ({ key, collection, payload }, { schema }) => {\n  if (collection !== 'customers') return; // [!code ++]\n});\n```\n\n----------------------------------------\n\nTITLE: Creating Rich Text Component for Next.js\nDESCRIPTION: React component for rendering a rich text section with headline and HTML content from Directus data.\nSOURCE: https://github.com/directus/docs/blob/main/content/tutorials/1.getting-started/rendering-dynamic-blocks-using-next.md#2025-04-09_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nimport React from \"react\";\n\nexport default function RichText({ id, headline, content }) {\n\n    return (\n        <section id={id} className=\"rich-text\">\n            <div className=\"rich-text_content\">\n                <h2>{headline}</h2>\n                <div dangerouslySetInnerHTML={{ __html: content }} />\n            </div>\n        </section>\n    );\n}\n```\n\n----------------------------------------\n\nTITLE: Initializing a Next.js 14 Project with TypeScript\nDESCRIPTION: Command to create a new Next.js 14 project with TypeScript support using create-next-app. The installation prompts guide you through setting up TypeScript, ESLint, and App Router configuration.\nSOURCE: https://github.com/directus/docs/blob/main/content/tutorials/2.projects/build-an-hotel-booking-platform-with-next-js-stripe-and-directus-automate.md#2025-04-09_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\nnpx create-next-app@14 hotel-resort\n```\n\n----------------------------------------\n\nTITLE: Navigation Component\nDESCRIPTION: Navigation bar template for site-wide navigation\nSOURCE: https://github.com/directus/docs/blob/main/content/tutorials/1.getting-started/fetch-data-from-directus-with-eleventy-3.md#2025-04-09_snippet_10\n\nLANGUAGE: html\nCODE:\n```\n<nav>\n\t<a to=\"/\">Home</a>\n\t<a to=\"/about\">About</a>\n\t<a to=\"/conduct\">Code of Conduct</a>\n\t<a to=\"/privacy\">Privacy Policy</a>\n\t<a to=\"/blog\">Blog</a>\n</nav>\n```\n\n----------------------------------------\n\nTITLE: Implementing DeletePostView for Post Deletion in SwiftUI with Directus API\nDESCRIPTION: DeletePostView provides functionality to delete posts using a DELETE request to the Directus API. It includes a confirmation alert to prevent accidental deletions and handles API communication with proper authentication. The view sends a DELETE request to the Directus items endpoint for the specific post ID.\nSOURCE: https://github.com/directus/docs/blob/main/content/tutorials/1.getting-started/implement-directus-auth-with-ios.md#2025-04-09_snippet_8\n\nLANGUAGE: swift\nCODE:\n```\nimport SwiftUI\n\nstruct DeletePostView: View {\n    let postId: String\n    let accessToken: String?\n    @Binding var showAlert: Bool\n\n    var body: some View {\n        Button(\"Delete\") {\n            showAlert.toggle()\n        }\n        .padding()\n        .alert(isPresented: $showAlert) {\n            Alert(title: Text(\"Confirm\"), message: Text(\"Are you sure you want to delete this post?\"), primaryButton: .destructive(Text(\"Delete\")) {\n                deletePost()\n            }, secondaryButton: .cancel())\n        }\n    }\n\n    func deletePost() {\n        print(\"Deleting post...\")\n\n        guard let accessToken = accessToken else {\n            print(\"Access token is missing\")\n            return\n        }\n\n        guard let url = URL(string: \"https://your-directus-project-url/items/posts/\\(postId)\") else {\n            print(\"Invalid URL\")\n            return\n        }\n\n        var request = URLRequest(url: url)\n        request.httpMethod = \"DELETE\"\n        request.addValue(\"Bearer \\(accessToken)\", forHTTPHeaderField: \"Authorization\")\n\n        URLSession.shared.dataTask(with: request) { data, response, error in\n            if let error = error {\n                print(\"Error deleting post: \\(error.localizedDescription)\")\n                return\n            }\n\n            if let httpResponse = response as? HTTPURLResponse {\n                if (200..<300).contains(httpResponse.statusCode) {\n                    // Post deleted successfully\n                    print(\"Post deleted successfully\")\n                } else {\n                    print(\"Failed to delete post. Status code: \\(httpResponse.statusCode)\")\n                }\n            }\n        }.resume()\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Styling a Directus Module with SCSS in Vue\nDESCRIPTION: SCSS styling code for a landing page module in Directus, including container layout, banner styling, and responsive card grid styling. The code uses Directus' CSS variables for consistent styling that integrates with the platform's look and feel.\nSOURCE: https://github.com/directus/docs/blob/main/content/tutorials/5.extensions/implement-navigation-in-multipage-custom-modules.md#2025-04-09_snippet_13\n\nLANGUAGE: vue\nCODE:\n```\n<style lang=\"scss\">\n.lp-container {\n  padding: var(--content-padding);\n  padding-top: 0;\n  width: 100%;\n  max-width: 1024px;\n\n  &> div {\n    margin-bottom: var(--content-padding);\n  }\n}\n\n.lp-banner {\n  border-radius: var(--border-radius);\n  overflow: hidden;\n\n  img {\n    display: block;\n    width: 100%;\n  }\n}\n\n.lp-cards {\n  display: grid;\n  grid-template-columns: repeat(4, 1fr);\n  column-gap: var(--input-padding);\n  row-gap: var(--input-padding);\n\n  .lp-card {\n    display: flex;\n    flex-wrap: wrap;\n    align-items: center;\n    justify-content: center;\n    text-align: center;\n    border-radius: var(--border-radius);\n    padding: var(--input-padding);\n    color: white;\n\n    .v-icon {\n      width: 100%;\n      height: 50px;\n      margin-bottom: 6px;\n\n      i {\n        font-size: 50px;\n        color: white;\n      }\n    }\n\n    .lp-card-title {\n      display: block;\n      font-weight: bold;\n      font-size: 1.4em;\n      line-height: 1.2;\n    }\n  }\n}\n</style>\n```\n\n----------------------------------------\n\nTITLE: Updating User Avatar and Purging Cached OG Images in Nuxt Server Route\nDESCRIPTION: This code snippet defines a Nuxt server route that updates a user's avatar, verifies the user's authentication token, and purges the cached OG images associated with the user's ticket. It uses the Directus SDK for updating items and JWT for token verification.\nSOURCE: https://github.com/directus/docs/blob/main/content/tutorials/2.projects/build-the-leap-week-registration-and-referral-system-.md#2025-04-09_snippet_4\n\nLANGUAGE: jsx\nCODE:\n```\nimport { updateItem } from '@directus/sdk';\nimport { directusServer } from '~/server/utils/directus-server';\nimport jwt from 'jsonwebtoken';\nimport type { Token } from '~/types';\n\nconst ogPattern = '__og-image__/image';\n\nexport default defineEventHandler(async (event) => {\n\tconst config = useRuntimeConfig();\n\tconst {\tpublic: { siteUrl } } = config;\n\n\ttry {\n\t\t// Get the body and the cookies from the event\n\t\tconst body = await readBody(event);\n\t\tconst cookies = parseCookies(event);\n\n\t\t// Check the number of avatars generated for the ticket id\n\t\tconst token = await jwt.verify(cookies.leapweek_token, process.env.JWT_SECRET as string);\n\n\t\tif (!token) {\n\t\t\tthrow createError({ statusCode: 401, statusMessage: 'Unauthorized' });\n\t\t}\n\n\t\tconst { people_id, ticket_id } = token as Token;\n\n\t\tif (!token || !people_id || !ticket_id) {\n\t\t\tthrow createError({ statusCode: 401, statusMessage: 'Unauthorized' });\n\t\t}\n\n\t\tdelete body.loading;\n\n\t\tconst person = await directusServer.request(\n\t\t\tupdateItem('people', people_id, body, {\n\t\t\t\tfields: [\n\t\t\t\t\t'id',\n\t\t\t\t\t'first_name',\n\t\t\t\t\t'last_name',\n\t\t\t\t\t'email',\n\t\t\t\t\t'job_title',\n\t\t\t\t\t'country',\n\t\t\t\t\t'website',\n\t\t\t\t\t'avatar',\n\t\t\t\t\t{ tickets: ['id', 'slug'] },\n\t\t\t\t],\n\t\t\t}),\n\t\t);\n\n\t\t// Purge the cache for the OG image\n\t\tif (person.tickets?.length) {\n\t\t\t$fetch(`${siteUrl}/${ogPattern}/t/${person.tickets[0].slug}/og.png?purge`);\n\t\t\t$fetch(`${siteUrl}/${ogPattern}/tickets/${person.tickets[0].id}/og.png?purge`);\n\t\t}\n\n\t\treturn person;\n\t} catch (error) {\n\t\treturn error;\n\t}\n});\n```\n\n----------------------------------------\n\nTITLE: Creating a Dynamic Form Element Component for Directus Fields\nDESCRIPTION: Implements a Vue component that dynamically renders different form elements based on the Directus field interface type, supporting input, textarea, select, and datetime components.\nSOURCE: https://github.com/directus/docs/blob/main/content/tutorials/2.projects/build-forms-dynamically-using-directus-and-nuxt.md#2025-04-09_snippet_8\n\nLANGUAGE: vue\nCODE:\n```\n<script setup lang=\"ts\">\n\nimport type { DirectusField } from '@directus/sdk'\nimport Input from './Input.vue'\nimport TextArea from './TextArea.vue'\nimport Select from './Select.vue'\nimport DateTime from './DateTime.vue'\n\nconst props = defineProps<{\n\tfield: DirectusField\n}>()\n\nconst fieldLookup = computed(() => {\n\tswitch (props.field.meta.interface) {\n\t\tcase 'input':\n\t\t\treturn Input\n\t\tcase 'input-rich-text-md':\n\t\t\treturn TextArea\n\t\tcase 'select-dropdown':\n\t\t\treturn Select\n\t\tcase 'datetime':\n\t\t\treturn DateTime\n\t\tdefault:\n\t\t\treturn Input\n\t}\n})\n</script>\n\n<template>\n\t<component v-if=\"!field.meta.hidden\" :key=\"field.field\" :is=\"fieldLookup\" :field=\"field.field\"\n\t\t:width=\"field.meta.width\" :defaultValue=\"field.schema.default_value\" :label=\"field.meta.field\"\n\t\t:options=\"field.meta.options\" />\n</template>\n```\n\n----------------------------------------\n\nTITLE: Formatting Display Output with Templates\nDESCRIPTION: Processes template strings by replacing placeholders with actual values from the data item.\nSOURCE: https://github.com/directus/docs/blob/main/content/tutorials/5.extensions/send-sms-messages-with-twilio-in-custom-panels.md#2025-04-09_snippet_11\n\nLANGUAGE: javascript\nCODE:\n```\nfunction displayOutput(item) {\n\tlet output = props.displayTemplate;\n\n\tif (templateFields.value != null) {\n\t\ttemplateFields.value.forEach((field) => {\n\t\t\tconst clean = field.replace('{{ ', '').replace(' }}', '');\n\t\t\toutput = output.replace(field, parseValue(item, clean));\n\t\t});\n\t}\n\n\treturn output;\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Translation String Syntax\nDESCRIPTION: Shows the syntax for manually entering a translation string key in Directus input fields. The key must be prefixed with $t: followed by the translation string identifier.\nSOURCE: https://github.com/directus/docs/blob/main/content/guides/2.content/7.translations.md#2025-04-09_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\n$t:translation-string-key\n```\n\n----------------------------------------\n\nTITLE: Accessing Collection Metadata with useCollection\nDESCRIPTION: The useCollection composable provides read-only access to collection metadata including fields, default values, and primary key information.\nSOURCE: https://github.com/directus/docs/blob/main/content/guides/9.extensions/3.app-extensions/8.composables.md#2025-04-09_snippet_5\n\nLANGUAGE: html\nCODE:\n```\n<script setup>\nimport { useCollection } from '@directus/extensions-sdk';\nconst { info, fields, defaults, primaryKeyField } = useCollection('collection_name');\n\ninfo.value;\n// => [{ name: 'collection_name', icon: 'box', type: 'table', ... }]\n\nfields.value;\n// => [{ name: 'title', type: 'string', ... }]\n\ndefaults.value;\n// => { title: 'default_value' }\n\nprimaryKeyField.value;\n// => { name: 'id', type: 'uuid', ... }\n</script>\n```\n\n----------------------------------------\n\nTITLE: Implementing Room Availability Search with Directus SDK\nDESCRIPTION: Function that queries available room types based on check-in/check-out dates and guest capacity. Uses Directus SDK with complex filtering to check for room availability against existing reservations.\nSOURCE: https://github.com/directus/docs/blob/main/content/tutorials/2.projects/build-an-hotel-booking-platform-with-next-js-stripe-and-directus-automate.md#2025-04-09_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport directus from \"./directus\";\nimport { readItems, createItem } from \"@directus/sdk\";\n\nexport const getRoomTypes = async (\n  checkInDate: string,\n  checkOutDate: string,\n  capacity: string\n) => {\n  try {\n    const availableRooms = await directus.request(\n      readItems(\"room_types\", {\n        // fetches all fields from room_types\n        fields: [\"*\"],\n        filter: {\n          // check if the capacity is greater than the requested capacity\n          capacity: { _gte: Number(capacity) },\n        },\n        deep: {\n          rooms: {\n            _limit: 1,\n            _filter: {\n              _or: [\n                // check if the room is available and if the check_in_date is empty\n                {\n                  _and: [\n                    {\n                      is_available: true,\n                      reservations: {\n                        check_in_date: { _null: true },\n                      },\n                    },\n                  ],\n                },\n                // check if the room is available and if the check_out_date is empty\n                {\n                  _and: [\n                    {\n                      is_available: true,\n                      reservations: {\n                        check_out_date: { _null: true },\n                      },\n                    },\n                  ],\n                },\n                // check if the check_out_date is less than the requested checkInDate\n                {\n                  _and: [\n                    {\n                      is_available: true,\n                      reservations: {\n                        check_out_date: { _lt: checkInDate },\n                      },\n                    },\n                  ],\n                },\n                // check if the check_in_date is less than the requested checkOutDate\n                {\n                  _and: [\n                    {\n                      is_available: true,\n                      reservations: {\n                        check_in_date: { _gt: checkOutDate },\n                      },\n                    },\n                  ],\n                },\n              ],\n            },\n          },\n        },\n      })\n    );\n    return availableRooms;\n  } catch (error) {\n    console.error(\"Error fetching available room types:\", error);\n  }\n};\n```\n\n----------------------------------------\n\nTITLE: Configuring App.vue for Nuxt Page Routing\nDESCRIPTION: Replaces the default NuxtWelcome component with NuxtPage to enable page-based routing in the Nuxt application.\nSOURCE: https://github.com/directus/docs/blob/main/content/tutorials/1.getting-started/rendering-dynamic-blocks-using-nuxt.md#2025-04-09_snippet_3\n\nLANGUAGE: vue\nCODE:\n```\n<template>\n  <div>\n    <NuxtRouteAnnouncer />\n    <NuxtPage />\n  </div>\n</template>\n```\n\n----------------------------------------\n\nTITLE: Configuring Request Scope for Directus Sandboxed API Extensions\nDESCRIPTION: This JSON snippet shows how to request the 'request' scope in the package.json file for a Directus sandboxed API extension. It demonstrates how to specify allowed methods and URLs, including the use of wildcards for URL patterns.\nSOURCE: https://github.com/directus/docs/blob/main/content/guides/9.extensions/2.api-extensions/5.sandbox.md#2025-04-09_snippet_7\n\nLANGUAGE: json\nCODE:\n```\n\"requestedScopes\": {\n  \"request\": {\n    \"methods\": [\"GET\", \"POST\"],\n    \"urls\": [\"https://directus.io/*\"]\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Up Form Submission Methods in React\nDESCRIPTION: These snippets create methods for handling form submissions, including preventing default form behavior and extracting form values.\nSOURCE: https://github.com/directus/docs/blob/main/content/tutorials/2.projects/build-a-multi-user-chat-with-react-and-directus-realtime.md#2025-04-09_snippet_4\n\nLANGUAGE: js\nCODE:\n```\nconst loginSubmit = (event) => {\n\tevent.preventDefault();\n};\n\nconst messageSubmit = (event) => {\n\tevent.preventDefault();\n};\n```\n\nLANGUAGE: js\nCODE:\n```\nconst loginSubmit = (event) => {\n    event.preventDefault();\n    const email = event.target.elements.email.value;\n    const password = event.target.elements.password.value;\n  };\n```\n\n----------------------------------------\n\nTITLE: Flask Project Setup Commands\nDESCRIPTION: Shell commands to set up a new Flask project with virtual environment and required dependencies\nSOURCE: https://github.com/directus/docs/blob/main/content/tutorials/1.getting-started/fetch-data-from-directus-with-flask.md#2025-04-09_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\npython3 -m venv .venv\nsource .venv/bin/activate\npip install Flask requests python-dotenv\n```\n\n----------------------------------------\n\nTITLE: Implementing Infinite Scroll Logic with Intersection Observer\nDESCRIPTION: Implementation of the infinite scroll functionality using the Intersection Observer API and state management.\nSOURCE: https://github.com/directus/docs/blob/main/content/tutorials/3.tips-and-tricks/implement-pagination-and-infinite-scrolling-in-next-js-.md#2025-04-09_snippet_11\n\nLANGUAGE: javascript\nCODE:\n```\nuseEffect(() => {\n  if (typeof window === \"undefined\" || !window.IntersectionObserver) return;\n  const element = observerElem.current;\n  const option = { threshold: 0 };\n\n  const observer = new IntersectionObserver(handleObserver, option);\n  if (element) observer.observe(element);\n  return () => {  if (element) observer.unobserve(element) };\n}, [currentPage]);\n\nconst fetchMorePosts = async () => {\n  const nextPage = currentPage + 1;\n  const fetchedPosts = await getPosts(nextPage, limit);\n  setPosts((prevPosts) => [...prevPosts, ...fetchedPosts]);\n  setCurrentPage(nextPage);\n};\n\nconst handleObserver = (entries) => {\n  const [target] = entries;\n  if (target.isIntersecting && hasMorePosts()) {\n    fetchMorePosts();\n  }\n};\n```\n\n----------------------------------------\n\nTITLE: Displaying Historical Messages from Directus\nDESCRIPTION: This JavaScript snippet retrieves and displays historical messages from the Directus collection.\nSOURCE: https://github.com/directus/docs/blob/main/content/tutorials/2.projects/build-a-multi-user-chat-with-vue-js-and-directus-realtime.md#2025-04-09_snippet_8\n\nLANGUAGE: javascript\nCODE:\n```\nfunction readAllMessages() {\n  client.sendMessage({\n    type: 'items',\n    collection: 'messages',\n    action: 'read',\n    query: {\n      limit: 10,\n      sort: '-date_created',\n      fields: ['*', 'user_created.first_name'],\n    },\n  });\n}\n\nconst cleanup = client.onWebSocket('message', function (data) {\n  if (data.type == 'auth' && data.status == 'ok') {\n    readAllMessages();\n    subscribe('create');\n  }\n\n  if (data.type == 'items') {\n    for (const item of data.data) {\n      addMessageToList(item);\n    }\n  }\n});\n```\n\n----------------------------------------\n\nTITLE: Implementing Directus Token Utility in JavaScript\nDESCRIPTION: This utility module provides functions for handling Directus tokens. It includes methods to add query parameters to URLs, retrieve the current token, and append the token to asset URLs for authentication.\nSOURCE: https://github.com/directus/docs/blob/main/content/tutorials/5.extensions/implement-navigation-in-multipage-custom-modules.md#2025-04-09_snippet_18\n\nLANGUAGE: javascript\nCODE:\n```\nexport default function useDirectusToken(directusApi) {\n  return {\n    addQueryToPath,\n    getToken,\n    addTokenToURL,\n  };\n\n  function addQueryToPath(path, query) {\n    const queryParams = [];\n\n    for (const [key, value] of Object.entries(query)) {\n      queryParams.push(`${key}=${value}`);\n    }\n\n    return path.includes('?') ? `${path}&${queryParams.join('&')}` : `${path}?${queryParams.join('&')}`;\n  }\n\n  function getToken() {\n    return (\n      directusApi.defaults?.headers?.['Authorization']?.split(' ')[1] ||\n      directusApi.defaults?.headers?.common?.['Authorization']?.split(' ')[1] ||\n      null\n    );\n  }\n\n  function addTokenToURL(url) {\n    const accessToken = getToken();\n    if (!accessToken) return url;\n    return addQueryToPath(url, {\n      access_token: accessToken,\n    });\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Dynamic OG Image Component in Vue for Nuxt\nDESCRIPTION: This code defines a Vue component for generating Open Graph (OG) images. It accepts username and avatar URL props with default values, and sets up the template structure for the social media preview image.\nSOURCE: https://github.com/directus/docs/blob/main/content/tutorials/2.projects/how-i-built-an-ai-open-source-santa-roast-app-with-directus-and-nuxt.md#2025-04-09_snippet_5\n\nLANGUAGE: tsx\nCODE:\n```\n// app/components/OgImage/Username.vue\n<script setup lang=\"ts\">\nconst props = withDefaults(\n\tdefineProps<{\n\t\tusername?: string;\n\t\tavatarUrl?: string;\n\t}>(),\n\t{\n\t\tusername: 'random_hacker_323',\n\t},\n);\n</script>\n\n<template>\n\t<div class=\"w-full h-full flex flex-col bg-red-900 p-12\">\n\t\t<!-- do template-y stuff here -->\n\t\t</div>\n</template>\n```\n\n----------------------------------------\n\nTITLE: Enhanced Message Reception Handler for Different WebSocket Events\nDESCRIPTION: Updated receiveMessage function that handles subscription events, ping messages, and historical message loading. It processes messages differently based on their type and UID.\nSOURCE: https://github.com/directus/docs/blob/main/content/tutorials/2.projects/build-a-realtime-chat-app-with-directus-and-next.md#2025-04-09_snippet_12\n\nLANGUAGE: javascript\nCODE:\n```\nconst receiveMessage = (data) => {\n    if (\n      data.uid === 'messages-subscription' &&\n      data.type === 'subscription' &&\n      data.event === 'create'\n    ) {\n      const message = data.data?.[0];\n      if (message) {\n        addMessageToList(message);\n      }\n    } else if (data.type === 'ping') {\n      directus.sendMessage({ type: 'pong' });\n    } else if (data.uid === 'get-recent-messages') {\n      data.data?.reverse().forEach(addMessageToList);\n    }\n  };\n```\n\n----------------------------------------\n\nTITLE: Setting Up Homepage with Booking Form Component\nDESCRIPTION: Next.js page component that renders the homepage with a welcome message and the BookingForm component to allow users to start the booking process.\nSOURCE: https://github.com/directus/docs/blob/main/content/tutorials/2.projects/build-an-hotel-booking-platform-with-next-js-stripe-and-directus-automate.md#2025-04-09_snippet_8\n\nLANGUAGE: tsx\nCODE:\n```\nimport BookingForm from \"./form\";\n\nexport default function Home() {\n\n  return (\n    <main>\n      <div>\n        <h1>Welcome to Next.js Hotel Resort</h1>\n        <p>Find the best hotel rooms and enjoy your stay</p>\n        <p>Home away from home</p>\n        <BookingForm />\n      </div>\n    </main>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Blog Post Detail Component\nDESCRIPTION: Vue component for displaying individual blog posts with images from Directus\nSOURCE: https://github.com/directus/docs/blob/main/content/tutorials/1.getting-started/fetch-data-from-directus-with-nuxt.md#2025-04-09_snippet_6\n\nLANGUAGE: vue\nCODE:\n```\n<template>\n\t<img :src=\"`${$directus.url}assets/${post.image.filename_disk}?width=600`\" alt=\"\" />\n\t<h1>{{post.title}}</h1>\n\t<div v-html=\"post.content\"></div>\n</template>\n\n<script setup>\nconst { $directus, $readItem } = useNuxtApp()\nconst route = useRoute()\n\nconst { data: post } = await useAsyncData('post', () => {\n  return $directus.request(\n    $readItem('posts', {\n\t\t\tfields: ['*', { slug: route.params.slug, image: ['filename_disk']}],\n    })\n  )\n})\n\nif (!post.value) throw createError({\n  statusCode: 404,\n  statusMessage: 'Post Not Found'\n})\n</script>\n```\n\n----------------------------------------\n\nTITLE: Updated WebSocket Message Handler with Historical Message Loading\nDESCRIPTION: Enhanced WebSocket message handler that loads historical messages and subscribes to new messages upon successful authentication, but only if messages haven't been loaded yet.\nSOURCE: https://github.com/directus/docs/blob/main/content/tutorials/2.projects/build-a-realtime-chat-app-with-directus-and-next.md#2025-04-09_snippet_11\n\nLANGUAGE: typescript\nCODE:\n```\n    directus.onWebSocket('message', (message) => {\n      try {\n        console.log('Received WebSocket message:', message);\n        if (message.type === 'auth' && message.status === 'ok') {\n          setRefreshToken(message.refresh_token);\n          // Fetch recent messages only if not already loaded\n          if (messages.length === 0) {\n            readAllMessages();\n            subscribeToMessages();\n          }\n        }\n        receiveMessage(message);\n      } catch (err) {\n        console.error('Error parsing WebSocket message:', err);\n      }\n    });\n    directus.onWebSocket('error', (err) => {\n      console.error('WebSocket error:', err);\n    });\n```\n\n----------------------------------------\n\nTITLE: Resetting Form After SMS Submission\nDESCRIPTION: Clears form fields after sending messages, with conditional logic based on batch send setting.\nSOURCE: https://github.com/directus/docs/blob/main/content/tutorials/5.extensions/send-sms-messages-with-twilio-in-custom-panels.md#2025-04-09_snippet_15\n\nLANGUAGE: javascript\nCODE:\n```\nfunction resetSms() {\n\tif (!props.batchSend) {\n\t\trecipients.value = [];\n\t}\n\n\trecipient.value = '';\n\tcustomMessage.value = '';\n\treturn;\n}\n```\n\n----------------------------------------\n\nTITLE: Form Validation and Submission with Directus in Nuxt.js\nDESCRIPTION: A Nuxt.js page component that dynamically generates a form based on Directus collection fields, implements client-side validation using Directus validation rules, and handles form submission to create new items in a collection.\nSOURCE: https://github.com/directus/docs/blob/main/content/tutorials/2.projects/build-forms-dynamically-using-directus-and-nuxt.md#2025-04-09_snippet_14\n\nLANGUAGE: vue\nCODE:\n```\n<script setup lang=\"ts\">\n\nconst { $directus, $readFieldsByCollection, $createItem } = useNuxtApp()\n\nconst { data, error } = await useAsyncData('posts', async () => {\n\treturn $directus.request($readFieldsByCollection('posts'))\n})\n\nif (error.value || data.value === null || data.value.length === 0) {\n\tconsole.error(error)\n\tthrow createError({\n\t\tstatusCode: 404,\n\t\tstatusMessage: \"Page not found\"\n\t})\n}\n\nconst postFields = data\n\nconst form = ref({})\nconst formError: Ref<string | null> = ref(null)\nconst formSuccess: Ref<string | null> = ref(null)\n\nconst submitForm = async () => {\n\tformError.value = null\n\tformSuccess.value = null\n\t// Validate form data against field validation rules\n\tfor (const field of postFields.value) {\n\t\tif (field.meta?.validation) {\n\t\t\ttry {\n\t\t\t\tconst validation = field.meta.validation\n\t\t\t\tif (validation._and) {\n\t\t\t\t\tfor (const rule of validation._and) {\n\t\t\t\t\t\tconst fieldName = Object.keys(rule)[0]\n\t\t\t\t\t\tif (rule[fieldName]._regex) {\n\t\t\t\t\t\t\tconst regex = new RegExp(rule[fieldName]._regex)\n\t\t\t\t\t\t\tif (!regex.test(form.value[field.field])) {\n\t\t\t\t\t\t\t\tformError.value = field.meta.validation_message || field.meta.field + ' failed validation'\n\t\t\t\t\t\t\t\tconsole.error(`Validation failed for ${field.field}: ${field.meta.validation_message || 'Invalid format'}`)\n\t\t\t\t\t\t\t\treturn // Stop submission if validation fails\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t} catch (err) {\n\t\t\t\tconsole.error(`Error parsing validation for ${field.field}:`, err)\n\t\t\t}\n\t\t}\n\t}\n\n\tconst result = await $directus.request($createItem('posts', form.value))\n\tif (result.error) {\n\t\tformError.value = result.error.message\n\t\tconsole.error('Error creating post:', result.error)\n\t\treturn // Stop submission if error occurs\n\t}\n\tformSuccess.value = 'Post created successfully'\n}\n</script>\n\n<template>\n\t<h1>New Post</h1>\n\t<div v-if=\"formError\" class=\"error\">{{ formError }}</div>\n\t<div v-else-if=\"formSuccess\" class=\"success\">{{ formSuccess }}</div>\n\t<form @submit.prevent=\"submitForm\">\n\t\t<DirectusFormElement v-for=\"field in postFields\" :key=\"field.field\" :field=\"field\"\n\t\t\tv-model=\"form[field.field]\" />\n\t\t<button type=\"submit\">Submit</button>\n\t</form>\n</template>\n\n<style scoped>\nform {\n\tdisplay: flex;\n\tflex-wrap: wrap;\n\twidth: 400px;\n}\n\nbutton {\n\tmargin-top: 1em;\n}\n\n.error {\n\tcolor: red;\n}\n\n.success {\n\tcolor: green;\n}\n</style>\n\n<style>\nlabel {\n\tdisplay: block;\n\tmargin-top: 0.5em;\n\tmargin-bottom: 0.2em;\n}\n\nselect {\n\twidth: 100%;\n}\n</style>\n```\n\n----------------------------------------\n\nTITLE: Providing Directus Functions in TypeScript\nDESCRIPTION: This code snippet demonstrates how to provide various Directus functions, including the newly added logout function, for use in Vue components.\nSOURCE: https://github.com/directus/docs/blob/main/content/tutorials/1.getting-started/using-authentication-in-nuxt.md#2025-04-09_snippet_23\n\nLANGUAGE: typescript\nCODE:\n```\nreturn {\n\tprovide: { directus, readItems, registerUser, isAuthenticated, refreshToken, logout },\n};\n```\n\n----------------------------------------\n\nTITLE: Implementing a View Service Provider for Navigation\nDESCRIPTION: PHP service provider class that registers navigation items to be available in all views. It uses Laravel's View facade to compose navigation data into every view.\nSOURCE: https://github.com/directus/docs/blob/main/content/tutorials/1.getting-started/fetch-data-from-directus-with-laravel.md#2025-04-09_snippet_17\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\nnamespace App\\Providers;\n\nuse Illuminate\\Support\\ServiceProvider;\nuse Illuminate\\Support\\Facades\\View;\n\nclass ViewServiceProvider extends ServiceProvider\n{\n    public function boot()\n    {\n        $navigation = [\n            ['url' => '/', 'label' => 'Home'],\n            ['url' => '/blog', 'label' => 'Blog Posts'],\n            ['url' => '/page/about', 'label' => 'About'],\n        ];\n\n        View::composer('*', function ($view) use ($navigation) {\n            $view->with('navigation', $navigation);\n        });\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Dynamic Page Builder in Vue/Nuxt\nDESCRIPTION: This code snippet demonstrates how to create a dynamic page builder component in Vue/Nuxt. It uses a componentMap to resolve and render different block types dynamically based on the data received from the Directus backend.\nSOURCE: https://github.com/directus/docs/blob/main/content/tutorials/2.projects/build-the-leap-week-registration-and-referral-system-.md#2025-04-09_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\n<script setup lang=\"ts\">\nimport type { BlockType, EventLandingPageBlocks } from '~/types';\n\nconst componentMap: Record<BlockType, any> = {\n\tblock_hero: resolveComponent('BlocksHero'),\n\tblock_faqs: resolveComponent('BlocksFaqs'),\n\tblock_cta: resolveComponent('BlocksCta'),\n\tblock_speakers: resolveComponent('BlocksSpeakers'),\n\tblock_schedule: resolveComponent('BlocksSchedule'),\n\tblock_cardgroup: resolveComponent('BlocksCardgroup'),\n\tblock_countdown: resolveComponent('BlocksCountdown'),\n\tblock_button: resolveComponent('BlocksButton'),\n\tblock_button_group: resolveComponent('BlocksButtonGroup'),\n\tblock_card: resolveComponent('BlocksCard'),\n};\n\nconst props = defineProps<{\n\tblocks: EventLandingPageBlocks[];\n}>();\n</script>\n\n<template>\n\t<div id=\"content\" class=\"mx-auto\">\n\t\t<template v-for=\"block in blocks\" :key=\"block.id\">\n\t\t\t<component\n\t\t\t\t:is=\"componentMap[block.collection as BlockType]\"\n\t\t\t\tv-if=\"block && block.collection\"\n\t\t\t\t:data=\"block.item\"\n\t\t\t/>\n\t\t</template>\n\t</div>\n</template>\n```\n\n----------------------------------------\n\nTITLE: Configuring Directus SDK to Prevent Caching Issues in Next.js\nDESCRIPTION: Updated Directus SDK configuration that prevents Next.js from caching API responses by setting the cache option to 'no-store'.\nSOURCE: https://github.com/directus/docs/blob/main/content/tutorials/1.getting-started/fetch-data-from-directus-with-nextjs.md#2025-04-09_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nconst directus = createDirectus('https://directus.example.com').with(\n  rest({\n    onRequest: (options) => ({ ...options, cache: 'no-store' }),\n  })\n);\n```\n\n----------------------------------------\n\nTITLE: Updating UI with Historical Messages in React\nDESCRIPTION: This snippet updates the user interface with historical messages retrieved from the Directus server.\nSOURCE: https://github.com/directus/docs/blob/main/content/tutorials/2.projects/build-a-multi-user-chat-with-react-and-directus-realtime.md#2025-04-09_snippet_11\n\nLANGUAGE: js\nCODE:\n```\nconst cleanup = client.onWebSocket('message', function (data) {\n  if (data.type == 'auth' && data.status == 'ok') {\n    readAllMessages();\n    subscribe('create');\n  }\n\n  if (data.type == 'items') {\n    for (const item of data.data) {\n      addMessageToList(item);\n    }\n  }\n});\n```\n\n----------------------------------------\n\nTITLE: Creating Relationships for Internal Linking in Directus\nDESCRIPTION: Data model configuration for creating flexible, resilient internal and external links in Directus. This approach uses conditional fields and many-to-one relationships to handle different link types (pages, posts, external URLs) while preventing broken links when content changes.\nSOURCE: https://github.com/directus/docs/blob/main/content/tutorials/3.tips-and-tricks/search-engine-optimization-best-practices.md#2025-04-09_snippet_3\n\nLANGUAGE: markdown\nCODE:\n```\nyour_content_collection\n\n- link_type (Type: String, Interface: Dropdown, Note: Choices: [\n    {\n        \"text\": \"Internal - Page\",\n        \"value\": \"pages\"\n    },\n    {\n        \"text\": \"Internal - Post\",\n        \"value\": \"posts\"\n    },\n    {\n        \"text\": \"External - URL\",\n        \"value\": \"external\"\n    }\n])\n- link_label (Type: String, Interface: Input, Note: What label or title is displayed for this link?)\n- link_page (Type: M20 Relationship, Related Collection: pages, Hidden On Detail, Conditions: [\n    {\n        \"name\": \"IF link_type === page\",\n        \"rule\": {\n            \"_and\": [\n                {\n                    \"link_type\": {\n                        \"_eq\": \"pages\"\n                    }\n                }\n            ]\n        },\n        \"hidden\": false,\n    }\n])\n- link_post (Type: M20 Relationship, Related Collection: post, Hidden On Detail, Conditions: [\n    {\n        \"name\": \"IF link_type === post\",\n        \"rule\": {\n            \"_and\": [\n                {\n                    \"link_type\": {\n                        \"_eq\": \"post\"\n                    }\n                }\n            ]\n        },\n        \"hidden\": false,\n    }\n])\n- link_external_url (Type: String, Interface: Input, Conditions: [\n    {\n        \"name\": \"IF link_type === external\",\n        \"rule\": {\n            \"_and\": [\n                {\n                    \"link_type\": {\n                        \"_eq\": \"external\"\n                    }\n                }\n            ]\n        },\n        \"hidden\": false,\n    }\n])\n```\n\n----------------------------------------\n\nTITLE: Initializing Algolia Client in Directus Hook\nDESCRIPTION: Sets up the Algolia client using environment variables and initializes an index named 'directus_index'.\nSOURCE: https://github.com/directus/docs/blob/main/content/tutorials/5.extensions/integrate-algolia-indexing-with-custom-hooks.md#2025-04-09_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport algoliasearch from  'algoliasearch';\nconst client = algoliasearch(process.env.ALGOLIA_APP_ID, process.env.ALGOLIA_ADMIN_KEY);\nconst index = client.initIndex('directus_index');\n```\n\n----------------------------------------\n\nTITLE: User Login Route Implementation\nDESCRIPTION: React component for handling user login with Directus SDK, including navigation and authentication state management.\nSOURCE: https://github.com/directus/docs/blob/main/content/tutorials/1.getting-started/using-authentication-in-react.md#2025-04-09_snippet_14\n\nLANGUAGE: jsx\nCODE:\n```\n// src/routes/Login.jsx\n\nimport AuthForm from '../components/AuthForm';\nimport client from '../lib/directus';\nimport { useNavigate } from \"react-router-dom\";\nimport PropTypes from 'prop-types';\n\n\nconst Login = ({ setIsAuthenticated }) => {\n    const navigate = useNavigate();\n\n    const onLogin = async (data) => {\n        const result = await client.login(data.email, data.password)\n        localStorage.setItem('directus_auth', JSON.stringify(result))\n        navigate(\"/\");\n        setIsAuthenticated(true);\n    }\n\n    return (\n        <div>\n            <AuthForm title=\"Login\" submitButtonTitle=\"Login\" linkHref='/register' linkText=\"Don't have an account? Register here\" onSubmit={onLogin} />\n        </div>\n    );\n};\nLogin.propTypes = {\n    setIsAuthenticated: PropTypes.func.isRequired,\n};\n\nexport default Login;\n```\n\n----------------------------------------\n\nTITLE: Importing Vue and Directus Functions for SMS Panel\nDESCRIPTION: Imports the required functions from the Directus extension SDK and Vue to build the SMS panel component.\nSOURCE: https://github.com/directus/docs/blob/main/content/tutorials/5.extensions/send-sms-messages-with-twilio-in-custom-panels.md#2025-04-09_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nimport { useApi } from '@directus/extensions-sdk';\nimport { ref, watch } from 'vue';\n```\n\n----------------------------------------\n\nTITLE: Checkout Page Component\nDESCRIPTION: Main checkout page component that combines the room widget and booking form components, calculating total price based on nights stayed.\nSOURCE: https://github.com/directus/docs/blob/main/content/tutorials/2.projects/build-an-hotel-booking-platform-with-next-js-stripe-and-directus-automate.md#2025-04-09_snippet_14\n\nLANGUAGE: tsx\nCODE:\n```\nimport dayjs from \"dayjs\";\nimport BookingForm from \"./form\";\nimport RoomWidget from \"./roomWidget\";\n\nexport default async function Bookings({\n  searchParams,\n}: {\n  searchParams: { [key: string]: string };\n}) {\n  const { checkInDate, checkOutDate, room, price, roomType } = searchParams;\n  // Calculate the number of nights\n  const nights = dayjs(checkOutDate).diff(checkInDate, \"day\");\n  const totalPrice = nights * Number(price);\n  return (\n    <main>\n      <div>\n        <RoomWidget\n          roomType={roomType}\n          checkInDate={checkInDate}\n          checkOutDate={checkOutDate}\n          totalPrice={totalPrice}\n          nights={nights}\n        />\n        <BookingForm\n          roomID={room}\n          nights={nights}\n          price={totalPrice}\n          checkInDate={checkInDate}\n          checkOutDate={checkOutDate}\n          roomType={roomType}\n        />\n      </div>\n    </main>\n  );\n```\n\n----------------------------------------\n\nTITLE: Configuring Directus SDK Helper\nDESCRIPTION: TypeScript configuration for Directus SDK setup with type definitions for Global, Author, Page, and Post schemas.\nSOURCE: https://github.com/directus/docs/blob/main/content/tutorials/1.getting-started/fetch-data-from-directus-with-astro.md#2025-04-09_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { createDirectus, rest, } from '@directus/sdk';\n\ntype Global = {\n  title: string;\n  description: string;\n}\n\ntype Author = {\n  name: string\n}\n\ntype Page = {\n  title: string;\n  content: string;\n  slug: string;\n}\n\ntype Post = {\n  image: string;\n  title: string;\n  author: Author;\n  content: string;\n  published_date: string\n  slug: string;\n}\n\ntype Schema = {\n  posts: Post[];\n  global: Global;\n  pages: Page[];\n}\n\nconst directus = createDirectus<Schema>('YOUR_DIRECTUS_URL').with(rest());\n\nexport default directus;\n```\n\n----------------------------------------\n\nTITLE: Returning Reactive Variables for Vonage Panel Template\nDESCRIPTION: This code returns the necessary reactive variables and functions for use in the Vue template of the Vonage activity panel.\nSOURCE: https://github.com/directus/docs/blob/main/content/tutorials/5.extensions/display-external-api-data-from-vonage-in-custom-panels.md#2025-04-09_snippet_8\n\nLANGUAGE: javascript\nCODE:\n```\nreturn { activityData, isLoading, errorMessage, formatDistanceToNow, parseISO };\n```\n\n----------------------------------------\n\nTITLE: Customer Creation Endpoint\nDESCRIPTION: POST endpoint implementation for creating new Stripe customers with validation\nSOURCE: https://github.com/directus/docs/blob/main/content/tutorials/5.extensions/check-permissions-in-a-custom-endpoint.md#2025-04-09_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\nrouter.post('/customers', async (req, res) => {\n  try {\n    const response = await fetch(\"http://directus.example.com/permissions/me\", {\n      headers: {\n        'Authorization': `Bearer ${req.token}`,\n        'Content-Type': 'application/json'\n      }\n    });\n    const permissions = await response.json();\n\n    if (permissions.data[env.STRIPE_CUSTOMERS_COLLECTION]?.read?.access === \"full\")) {\n      if (req.body.email) {\n        const customer = {\n          email: req.body.email,\n        };\n\n        if (req.body.name) {\n          customer.name = req.body.name;\n        }\n\n        stripe.customers.create(customer).then((response) => {\n          res.json(response);\n        });\n      } else {\n        res.sendStatus(400);\n      }\n    } else {\n      res.sendStatus(401);\n    }\n  }\n  catch(e) {\n    res.sendStatus(401);\n  }\n});\n```\n\n----------------------------------------\n\nTITLE: Querying GitHub User Profile Data with GraphQL\nDESCRIPTION: This GraphQL query fetches comprehensive user profile data from GitHub, including repositories, contributions, organizations, and sponsorships. It's used to gather all necessary information for scoring and roasting a user's profile.\nSOURCE: https://github.com/directus/docs/blob/main/content/tutorials/2.projects/how-i-built-an-ai-open-source-santa-roast-app-with-directus-and-nuxt.md#2025-04-09_snippet_2\n\nLANGUAGE: graphql\nCODE:\n```\nquery getUserProfile($username: String!) {\n  user(login: $username) {\n    login\n    name\n    location\n    twitterUsername\n    url\n    avatarUrl\n    websiteUrl\n    company\n    bio\n    readme: repository(name: $username) {\n      object(expression: \"HEAD:README.md\") {\n        ... on Blob {\n          text\n        }\n      }\n    }\n    starredRepositories {\n      totalCount\n    }\n    followers {\n      totalCount\n    }\n    following {\n      totalCount\n    }\n    organizations(first: 3, orderBy: {field: CREATED_AT, direction: DESC}) {\n      nodes {\n        name\n        description\n        url\n        avatarUrl\n\t\t membersWithRole(first: 10){\n          nodes{\n            name\n            login\n            avatarUrl\n          }\n        }\n      }\n    }\n    repositories(visibility: PUBLIC, first: 10, ownerAffiliations: OWNER, orderBy: {field: PUSHED_AT, direction: DESC}) {\n      totalCount\n      nodes {\n        forkCount\n        isFork\n        name\n        description\n        descriptionHTML\n        url\n        createdAt\n        stargazerCount\n        issues(states: OPEN) {\n          totalCount\n        }\n        readme: object(expression: \"HEAD:README.md\") {\n          ... on Blob {\n            text\n          }\n        }\n        pushedAt\n        commitComments {\n          totalCount\n        }\n      }\n    }\n    contributionsCollection(\n      from: \"2024-01-01T00:00:00Z\"\n      to: \"2024-12-31T23:59:59Z\"\n    ) {\n      totalRepositoryContributions\n      totalRepositoriesWithContributedIssues\n      totalRepositoriesWithContributedCommits\n      totalCommitContributions\n      totalIssueContributions\n      totalPullRequestContributions\n      totalPullRequestReviewContributions\n    }\n    sponsorshipsAsSponsor(activeOnly: true, first: 100) {\n      totalCount\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Data Models for Directus Collections\nDESCRIPTION: Creates Kotlin data classes representing Directus collections and response structures. These models include Author, Blog, Page, and Global entities along with their corresponding API response wrappers.\nSOURCE: https://github.com/directus/docs/blob/main/content/tutorials/1.getting-started/fetch-data-from-directus-in-android-with-kotlin.md#2025-04-09_snippet_3\n\nLANGUAGE: kotlin\nCODE:\n```\npackage com.example.directusapp.model\n\ndata class Author(\n    val id: Int,\n    val name: String,\n)\n\ndata class Blog(\n    val id: Int,\n    val title: String,\n    val content: String,\n    val dateCreated: String,\n    val author: Author\n)\n\ndata class Page(\n    val slug: String,\n    val title: String,\n    val content: String,\n)\n\ndata class Global(\n    val id: Int,\n    val title: String,\n    val description: String,\n)\n\ndata class BlogResponse(\n    val data: Blog\n)\n\ndata class BlogsResponse(\n    val data: List<Blog>\n)\n\ndata class PageResponse(\n    val data: List<Page>\n)\n\ndata class GlobalResponse(\n    val data: Global\n)\n```\n\n----------------------------------------\n\nTITLE: Game End Condition Script\nDESCRIPTION: TypeScript script operation used in Directus Flow to modify the prompt sent to ChatGPT when the game needs to end, avoiding flow branching complexity.\nSOURCE: https://github.com/directus/docs/blob/main/content/tutorials/2.projects/building-ai-venture-an-ai-powered-game-with-directus.md#2025-04-09_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nmodule.exports = async function(data) {\n\tif (data.game.endGame) {\n\t\tdata.prompt = data.prompt + \" End the game.\"\n\t}\n\n\treturn data\n}\n```\n\n----------------------------------------\n\nTITLE: Success Page Component\nDESCRIPTION: A simple success page component that displays after successful payment completion, providing confirmation and a link back to the homepage.\nSOURCE: https://github.com/directus/docs/blob/main/content/tutorials/2.projects/build-an-hotel-booking-platform-with-next-js-stripe-and-directus-automate.md#2025-04-09_snippet_15\n\nLANGUAGE: tsx\nCODE:\n```\n\"use client\";\n\nimport Link from \"next/link\";\n\nexport default function SuccessPage() {\n  return (\n    <div>\n      <h1>Hotel Booking Payment Successful!</h1>\n      <p>You will receive an email with your booking details</p>\n      <Link href=\"/\"\n      >\n        Go back to Homepage\n      </Link>\n    </div>\n  );\n```\n\n----------------------------------------\n\nTITLE: Creating Typed Directus Client - TypeScript\nDESCRIPTION: Example of creating a typed Directus client with schema interface in TypeScript\nSOURCE: https://github.com/directus/docs/blob/main/content/guides/4.connect/6.sdk.md#2025-04-09_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport { createDirectus, rest } from '@directus/sdk';\n\ninterface Post {\n  id: number;\n  title: string;\n  content: string;\n}\n\ninterface Schema {\n  posts: Post[];\n}\n\nconst directus = createDirectus<Schema>('http://directus.example.com').with(rest());\n```\n\n----------------------------------------\n\nTITLE: Configuring Panel Extension Options\nDESCRIPTION: Configuration snippets for the panel extension, including product type selection, message direction, date range, message inclusion toggle, and status filtering.\nSOURCE: https://github.com/directus/docs/blob/main/content/tutorials/5.extensions/display-external-api-data-from-vonage-in-custom-panels.md#2025-04-09_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\n{\n  field: 'type',\n  name: 'Product Type',\n  type: 'string',\n  meta: {\n    width: 'half',\n    interface: 'select-dropdown',\n    options: {\n      choices: [\n        { text: 'SMS', value: 'SMS' },\n        { text: 'Messages', value: 'MESSAGES' }\n      ],\n    },\n  },\n}\n```\n\nLANGUAGE: javascript\nCODE:\n```\n{\n  field: 'direction',\n  name: 'Direction',\n  type: 'string',\n  meta: {\n    width: 'half',\n    interface: 'select-dropdown',\n    options: {\n      choices: [\n        { text: 'Outbound', value: 'outbound' },\n        { text: 'Inbound', value: 'inbound' }\n      ],\n    }\n  }\n}\n```\n\nLANGUAGE: javascript\nCODE:\n```\n{\n  field: 'range',\n  type: 'dropdown',\n  name: '$t:date_range',\n  schema: { default_value: '1 day' },\n  meta: {\n    interface: 'select-dropdown',\n    width: 'half',\n    options: {\n      choices: [\n        { text: 'Past 5 Minutes', value: '5 minutes' },\n        { text: 'Past 15 Minutes', value: '15 minutes' },\n        { text: 'Past 30 Minutes', value: '30 minutes' },\n        { text: 'Past 1 Hour', value: '1 hour' },\n        { text: 'Past 4 Hours', value: '4 hours' },\n        { text: 'Past 1 Day', value: '1 day' },\n        { text: 'Past 2 Days', value: '2 days' }\n      ]\n    }\n  }\n}\n```\n\nLANGUAGE: javascript\nCODE:\n```\n{\n  field: 'includeMessage',\n  name: 'Include Message',\n  type: 'boolean',\n  meta: {\n    interface: 'boolean',\n    width: 'half',\n  },\n  schema: {\n    default_value: false,\n  }\n}\n```\n\nLANGUAGE: javascript\nCODE:\n```\n{\n  field: 'status',\n  name: 'Status',\n  type: 'string',\n  schema: {\n    default_value: 'any',\n  },\n  meta: {\n    width: 'half',\n    interface: 'select-dropdown',\n    options: {\n      choices: [\n        { text: 'Any', value: 'any' },\n        { text: 'Delivered', value: 'delivered' },\n        { text: 'Expired', value: 'expired' },\n        { text: 'Failed', value: 'failed' },\n        { text: 'Rejected', value: 'rejected' },\n        { text: 'Accepted', value: 'accepted' },\n        { text: 'buffered', value: 'buffered' },\n        { text: 'Unknown', value: 'unknown' },\n        { text: 'Deleted', value: 'deleted' }\n      ]\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Environment Configuration Setup\nDESCRIPTION: Python configuration file to load environment variables from .env file\nSOURCE: https://github.com/directus/docs/blob/main/content/tutorials/1.getting-started/fetch-data-from-directus-with-flask.md#2025-04-09_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nfrom dotenv import load_dotenv\n\nload_dotenv()\n```\n\n----------------------------------------\n\nTITLE: Updating Vue.js Template with Submission Handler\nDESCRIPTION: This snippet shows the updated Vue template with the submission handler attached to buttons. It includes conditional rendering and event handling for different steps of the feedback process.\nSOURCE: https://github.com/directus/docs/blob/main/content/tutorials/2.projects/build-a-user-feedback-widget-with-vue-js-.md#2025-04-09_snippet_7\n\nLANGUAGE: vue\nCODE:\n```\n<template>\n\t<div class=\"wrapper\">\n\t\t<Transition name=\"fade\" mode=\"out-in\">\n\t\t\t<div v-if=\"!feedback.rating\" class=\"step\">\n\t\t\t\t<div>\n\t\t\t\t\t<div>\n\t\t\t\t\t\t<p class=\"desc\">How can we improve?</p>\n\t\t\t\t\t\t<p class=\"heading\">How helpful was this article?</p>\n\t\t\t\t\t</div>\n\t\t\t\t</div>\n\t\t\t\t<div class=\"button-container\">\n\t\t\t\t\t<button v-for=\"item in ratingOptions\"\n\t\t\t\t\t\t:key=\"item.value\"\n\t\t\t\t\t\tclass=\"btn\"\n\t\t\t\t\t\t@click=\"handleSubmission(item.value)\">\n\t\t\t\t\t\t<span>{{ item.label }}</span>\n\t\t\t\t\t</button>\n\t\t\t\t</div>\n\t\t\t</div>\n\t\t\t<div v-else-if=\"feedback.rating && !success\" class=\"step\">\n\t\t\t\t<div>\n\t\t\t\t\t<p class=\"desc\">This article is</p>\n\t\t\t\t\t<div>\n\t\t\t\t\t\t<span>{{ getRatingOption(feedback.rating)?.label }}</span>\n\t\t\t\t\t\t<button style=\"margin-left: 0.5rem\" class=\"btn\" @click=\"feedback.rating = undefined\">\n\t\t\t\t\t\t\t<span mi icon>close</span>\n\t\t\t\t\t\t</button>\n\t\t\t\t\t</div>\n\t\t\t\t</div>\n\t\t\t\t<p class=\"heading\">{{ getRatingOption(feedback.rating)?.message }}</p>\n\t\t\t\t<textarea v-model=\"feedback.comments\" autofocus class=\"input\" />\n\t\t\t\t<button\n\t\t\t\t\tclass=\"btn btn-primary\"\n\t\t\t\t\t:disabled=\"!feedback.comments\"\n\t\t\t\t\t@click=\"handleSubmission()\">\n\t\t\t\t\tSend Us Your Feedback\n\t\t\t\t</button>\n\t\t\t</div>\n\t\t\t<div v-else class=\"step\">\n\t\t\t\t<p class=\"heading\">Thanks for your feedback!</p>\n\t\t\t</div>\n\t\t</Transition>\n\t</div>\n</template>\n```\n\n----------------------------------------\n\nTITLE: Defining Props for SMS Panel Component\nDESCRIPTION: Sets up the component properties including Twilio credentials, display options, and filtering configuration for the SMS panel.\nSOURCE: https://github.com/directus/docs/blob/main/content/tutorials/5.extensions/send-sms-messages-with-twilio-in-custom-panels.md#2025-04-09_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\nprops: {\n\tshowHeader: {\n\t\ttype: Boolean,\n\t\tdefault: false,\n\t},\n\tbuttonLabel: {\n\t\ttype: String,\n\t\tdefault: '',\n\t},\n\tcollection: {\n\t\ttype: String,\n\t\tdefault: '',\n\t},\n\tphoneNumberField: {\n\t\ttype: String,\n\t\tdefault: '',\n\t},\n\tmessage: {\n\t\ttype: String,\n\t\tdefault: null,\n\t},\n\tfilter: {\n\t\ttype: Object,\n\t\tdefault: () => ({}),\n\t},\n\tbatchSend: {\n\t\ttype: Boolean,\n\t\tdefault: false,\n\t},\n\tdisplayTemplate: {\n\t\ttype: String,\n\t\tdefault: '',\n\t},\n\ttwilioSid: String,\n\ttwilioPhoneNumber: String,\n},\n```\n\n----------------------------------------\n\nTITLE: Customers List Endpoint\nDESCRIPTION: Implementation of the endpoint to retrieve Stripe customers list with permission checking\nSOURCE: https://github.com/directus/docs/blob/main/content/tutorials/5.extensions/check-permissions-in-a-custom-endpoint.md#2025-04-09_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nrouter.get('/customers', async (req, res) => {\n  try {\n    const response = await fetch(\"http://directus.example.com/permissions/me\", {\n      headers: {\n        'Authorization': `Bearer ${req.token}`,\n        'Content-Type': 'application/json'\n      }\n    });\n    const permissions = await response.json();\n\n    let output = [];\n    if (permissions.data[env.STRIPE_CUSTOMERS_COLLECTION]?.read?.access === \"full\")) {\n      stripe.customers.list({limit: 100}).autoPagingEach((customer) => {\n        output.push(customer);\n      }).then(() => {\n        res.json(output);\n      });\n    } else {\n      res.sendStatus(401);\n    }\n  }\n  catch(e) {\n    res.sendStatus(401);\n  }\n});\n```\n\n----------------------------------------\n\nTITLE: Directus API Integration Module\nDESCRIPTION: Python module for handling Directus API requests and data fetching\nSOURCE: https://github.com/directus/docs/blob/main/content/tutorials/1.getting-started/fetch-data-from-directus-with-flask.md#2025-04-09_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nimport requests\nimport os\n\nDIRECTUS_BASE_URL = os.environ.get(\"DIRECTUS_BASE_URL\")\n\ndef get_global_data():\n    response = requests.get(f\"{DIRECTUS_BASE_URL}/items/global\")\n    return response.json().get(\"data\")\n```\n\n----------------------------------------\n\nTITLE: Directus API Integration Module\nDESCRIPTION: Python module for handling Directus API requests and data fetching\nSOURCE: https://github.com/directus/docs/blob/main/content/tutorials/1.getting-started/fetch-data-from-directus-with-flask.md#2025-04-09_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nimport requests\nimport os\n\nDIRECTUS_BASE_URL = os.environ.get(\"DIRECTUS_BASE_URL\")\n\ndef get_global_data():\n    response = requests.get(f\"{DIRECTUS_BASE_URL}/items/global\")\n    return response.json().get(\"data\")\n```\n\n----------------------------------------\n\nTITLE: Triggering a Test Payment Event\nDESCRIPTION: Command to trigger a test payment_intent.succeeded event from Stripe. This simulates a successful payment and sends the event to your webhook endpoint for testing.\nSOURCE: https://github.com/directus/docs/blob/main/content/tutorials/2.projects/build-an-hotel-booking-platform-with-next-js-stripe-and-directus-automate.md#2025-04-09_snippet_20\n\nLANGUAGE: bash\nCODE:\n```\nstripe trigger payment_intent.succeeded\n```\n\n----------------------------------------\n\nTITLE: Creating MarkdownView Composable for Rendering WYSIWYG Content in Kotlin\nDESCRIPTION: This snippet defines a MarkdownView composable function that renders markdown content as HTML in a WebView. It includes a utility function to convert markdown to HTML using the intellij-markdown library.\nSOURCE: https://github.com/directus/docs/blob/main/content/tutorials/1.getting-started/fetch-data-from-directus-in-android-with-kotlin.md#2025-04-09_snippet_10\n\nLANGUAGE: kotlin\nCODE:\n```\npackage com.example.directusapp.ui\n\nimport android.webkit.WebView\nimport android.webkit.WebViewClient\nimport androidx.compose.runtime.Composable\nimport androidx.compose.ui.viewinterop.AndroidView\nimport org.intellij.markdown.flavours.gfm.GFMFlavourDescriptor\nimport org.intellij.markdown.html.HtmlGenerator\nimport org.intellij.markdown.parser.MarkdownParser\n\n@Composable\nfun MarkdownView(markdownText: String) {\n    val htmlContent = markdownToHtml(markdownText)\n\n    AndroidView(factory = { context ->\n        WebView(context).apply {\n            webViewClient = WebViewClient()\n            loadDataWithBaseURL(null, htmlContent, \"text/html\", \"UTF-8\", null)\n        }\n    }, update = {\n        it.loadDataWithBaseURL(null, htmlContent, \"text/html\", \"UTF-8\", null)\n    })\n}\n\nfun markdownToHtml(markdownText: String): String {\n    val flavour = GFMFlavourDescriptor()\n    val parser = MarkdownParser(flavour)\n    val parsedTree = parser.buildMarkdownTreeFromString(markdownText)\n    val htmlGenerator = HtmlGenerator(markdownText, parsedTree, flavour)\n    return htmlGenerator.generateHtml()\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a ConfigMap for MariaDB in a Directus Setup\nDESCRIPTION: Shows how to create a ConfigMap for MariaDB configuration to be used with Directus. ConfigMaps allow you to decouple configuration from container images, making your deployments more portable.\nSOURCE: https://github.com/directus/docs/blob/main/content/tutorials/6.self-hosting/understanding-kubernetes.md#2025-04-09_snippet_6\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: v1\nkind: ConfigMap\nmetadata:\n  name: release-name-mariadb\n  labels:\n    app: mariadb\ndata:\n  my.cnf: |-\n    [mysqld]\n    skip-name-resolve\n    max_allowed_packet=16M\n```\n\n----------------------------------------\n\nTITLE: Configuring Directus Authentication Plugin\nDESCRIPTION: Updated Nuxt plugin for Directus SDK that includes authentication mode configuration to enable user login functionality.\nSOURCE: https://github.com/directus/docs/blob/main/content/tutorials/1.getting-started/using-authentication-in-nuxt.md#2025-04-09_snippet_12\n\nLANGUAGE: typescript\nCODE:\n```\nimport {\n\tcreateDirectus,\n\trest,\n\treadItems,\n\tregisterUser,\n\tauthentication,\n} from \"@directus/sdk\";\n\nconst directus = createDirectus<DirectusSchema>(\n\t\"http://localhost:3000/directus\",\n)\n\t.with(authentication(\"json\"))\n\t.with(rest());\n\nexport default defineNuxtPlugin(() => {\n\treturn {\n\t\tprovide: { directus, readItems, registerUser },\n\t};\n});\n```\n\n----------------------------------------\n\nTITLE: Authorization Header Configuration\nDESCRIPTION: Format for the Authorization header when using a static access token for file import operations.\nSOURCE: https://github.com/directus/docs/blob/main/content/tutorials/3.tips-and-tricks/importing-files-in-directus-automate.md#2025-04-09_snippet_1\n\nLANGUAGE: text\nCODE:\n```\nBearer your-token\n```\n\n----------------------------------------\n\nTITLE: Implementing Blog Post Listing Page with Directus\nDESCRIPTION: Next.js page component that fetches and displays a list of blog posts from Directus, sorted by publish date. Uses field selection to optimize data fetching.\nSOURCE: https://github.com/directus/docs/blob/main/content/tutorials/1.getting-started/fetch-data-from-directus-with-nextjs.md#2025-04-09_snippet_6\n\nLANGUAGE: jsx\nCODE:\n```\nimport directus from '@/lib/directus';\nimport { readItems } from '@directus/sdk';\n\nasync function getPosts() {\n\treturn directus.request(\n\t\treadItems('posts', {\n\t\t\tfields: ['slug', 'title', 'publish_date', { author: ['name'] }],\n\t\t\tsort: ['-publish_date'],\n\t\t})\n\t);\n}\n\nexport default async function DynamicPage() {\n\tconst posts = await getPosts();\n\treturn (\n\t\t<div>\n\t\t\t<h1>Blog</h1>\n\t\t</div>\n\t);\n}\n```\n\n----------------------------------------\n\nTITLE: Rendering News List in SvelteKit Component\nDESCRIPTION: Svelte component code to display a list of news articles with titles and authors.\nSOURCE: https://github.com/directus/docs/blob/main/content/tutorials/1.getting-started/implement-multilingual-content-with-directus-and-svelte-kit.md#2025-04-09_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\n<script>\n  export let data;\n</script>\n\n<h1>Trending Today!</h1>\n<ul>\n  {#each data.news as article}\n    <li>\n      <div>\n        <h2>\n          <a href={`/${article.id}`}>\n            {article.translations[0].title}\n          </a>\n        </h2>\n        <p>By {article.author}</p>\n      </div>\n    </li>\n  {/each}\n</ul>\n```\n\n----------------------------------------\n\nTITLE: Fetching Historical Messages with Directus WebSockets\nDESCRIPTION: Function to request the most recent messages from the Directus server via WebSockets. It sends a read request to the messages collection with sorting and field specifications.\nSOURCE: https://github.com/directus/docs/blob/main/content/tutorials/2.projects/build-a-realtime-chat-app-with-directus-and-next.md#2025-04-09_snippet_10\n\nLANGUAGE: javascript\nCODE:\n```\n  const readAllMessages = () => {\n    directus.sendMessage(\n      JSON.stringify({\n        type: 'items',\n        collection: 'messages',\n        action: 'read',\n        query: {\n          limit: 100,\n          sort: '-date_created',\n          fields: ['*', 'user_created.first_name'],\n        },\n        uid: 'get-recent-messages',\n      })\n    );\n  };\n```\n\n----------------------------------------\n\nTITLE: Initializing Variables in Component Setup\nDESCRIPTION: Defines the reactive variables used throughout the component to track message content, recipients, and API responses.\nSOURCE: https://github.com/directus/docs/blob/main/content/tutorials/5.extensions/send-sms-messages-with-twilio-in-custom-panels.md#2025-04-09_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\nsetup(props) {\n\tconst api = useApi();\n\tconst customMessage = ref('');\n\tconst smsConfirmation = ref(false);\n\tconst recipient = ref('');\n\tconst recipients = ref([]);\n\tconst contacts = ref([]);\n\tconst smsSent = ref(0);\n\tconst smsErrors = ref([]);\n\tconst fields = ref([]);\n\tconst templateFields = ref([]);\n},\n```\n\n----------------------------------------\n\nTITLE: Creating Dynamic Page Routes\nDESCRIPTION: Implementation of dynamic routing in Astro using Directus data to generate pages based on slugs.\nSOURCE: https://github.com/directus/docs/blob/main/content/tutorials/1.getting-started/fetch-data-from-directus-with-astro.md#2025-04-09_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\n---\nimport Layout from \"../layouts/Layout.astro\";\nimport directus from \"../lib/directus\";\nimport { readItems } from \"@directus/sdk\";\n\nexport async function getStaticPaths() {\n  const pages = await directus.request(readItems(\"pages\"));\n  return pages.map((page) => ({\n    params: { slug: page.slug },\n    props: page,\n  }));\n}\nconst page = Astro.props;\n---\n\n<Layout title={page.title}>\n  <main>\n    <h1>{page.title}</h1>\n    <div set:html={page.content} />\n  </main>\n</Layout>\n```\n\n----------------------------------------\n\nTITLE: Restarting Nginx Service\nDESCRIPTION: This command restarts the Nginx service to apply the new configuration.\nSOURCE: https://github.com/directus/docs/blob/main/content/tutorials/6.self-hosting/deploy-directus-to-an-ubuntu-server.md#2025-04-09_snippet_17\n\nLANGUAGE: bash\nCODE:\n```\nsudo systemctl restart nginx\n```\n\n----------------------------------------\n\nTITLE: Watching Prop Changes for Vonage Panel Data Refresh\nDESCRIPTION: This Vue watch effect triggers a data refresh when any of the panel's configuration props change, ensuring the displayed data stays up-to-date.\nSOURCE: https://github.com/directus/docs/blob/main/content/tutorials/5.extensions/display-external-api-data-from-vonage-in-custom-panels.md#2025-04-09_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\nwatch(\n  [() => props.type, () => props.direction, () => props.range, () => props.includeMessage, () => props.status],\n  fetchData\n);\n```\n\n----------------------------------------\n\nTITLE: Complete Vue Display Component Implementation\nDESCRIPTION: Complete Vue component implementation for the age display, including age calculation logic\nSOURCE: https://github.com/directus/docs/blob/main/content/tutorials/5.extensions/format-dates-in-a-custom-display-extension.md#2025-04-09_snippet_5\n\nLANGUAGE: vue\nCODE:\n```\n<template>\n  <div>{{ calculateAge() }}</div>\n</template>\n\n<script>\nimport { differenceInYears, intervalToDuration, parseISO } from 'date-fns';\nexport default {\n  props: {\n    value: {\n      type: String,\n      default: null,\n    },\n    show_months: {\n      type: Boolean,\n      default: false,\n    }\n  },\n  setup(props){\n    function calculateAge(){\n      if(props.show_months){\n        const { years, months } = intervalToDuration({ start: parseISO(props.value), end: new Date()});\n        return `${years} years ${months} months`;\n      } else {\n        const age = differenceInYears(new Date(), parseISO(props.value));\n        return `${age} years`;\n      }\n    }\n\n    return calculateAge;\n  },\n};\n</script>\n```\n\n----------------------------------------\n\nTITLE: Creating a Pagination Component with Directus Aggregate Function\nDESCRIPTION: React server component that handles pagination UI, including previous/next buttons and page numbers. It uses Directus' aggregate function to get the total count of items for calculating the total number of pages.\nSOURCE: https://github.com/directus/docs/blob/main/content/tutorials/3.tips-and-tricks/implement-pagination-and-infinite-scrolling-in-next-js-.md#2025-04-09_snippet_4\n\nLANGUAGE: js\nCODE:\n```\nimport directus from \"@/lib/directus\";\nimport { aggregate } from \"@directus/sdk\";\nimport Link from \"next/link\";\n\nconst getTotalPostCount = async () => {\n  const totalCount = await directus.request(\n    aggregate(\"posts\", {\n      aggregate: { count: \"*\" },\n    })\n  );\n  return totalCount[0].count;\n};\n\nasync function Pagination({ limit, currentPage }) {\n  const totalPostCount = await getTotalPostCount();\n  const totalPages = Math.ceil(totalPostCount / limit);\n\n  const hasMorePage = () => {\n    const recievedPostsCount = limit * currentPage;\n    return recievedPostsCount < totalPostCount;\n  };\n\n  return (\n    <div>\n      <Link href={currentPage <= 2 ? \"/\" : `?page=${currentPage - 1}`}>\n        &laquo; Previous\n      </Link>\n      {Array.from(Array(totalPages), (_, i) => i + 1).map((page) => (\n        <Link\n          key={page}\n          href={page === 1 ? \"/\" : `?page=${page}`}\n          className={page === currentPage ? \"active\" : \"\"}\n        >\n          {page}\n        </Link>\n      ))}\n      <Link\n        href={\n          hasMorePage() ? `?page=${currentPage + 1}` : `?page=${currentPage}`\n        }\n      >\n        Next &raquo;\n      </Link>\n    </div>\n  );\n}\n\nexport default Pagination;\n```\n\n----------------------------------------\n\nTITLE: Implementing Navigation Graph for Blog App in Kotlin\nDESCRIPTION: This snippet defines a navigation graph for the blog application using Jetpack Compose Navigation. It sets up routes for the blog list and blog detail screens, allowing navigation between them.\nSOURCE: https://github.com/directus/docs/blob/main/content/tutorials/1.getting-started/fetch-data-from-directus-in-android-with-kotlin.md#2025-04-09_snippet_15\n\nLANGUAGE: kotlin\nCODE:\n```\npackage com.example.directusapp.ui\n\nimport androidx.compose.runtime.Composable\nimport androidx.navigation.NavHostController\nimport androidx.navigation.compose.NavHost\nimport androidx.navigation.compose.composable\n\nsealed class Screen(val route: String) {\n    object BlogList : Screen(\"blogList\")\n    object BlogDetail : Screen(\"blogDetail/{blogId}\") {\n        fun createRoute(blogId: Int) = \"blogDetail/$blogId\"\n    }\n}\n\n@Composable\nfun NavGraph(navController: NavHostController) {\n    NavHost(navController, startDestination = Screen.BlogList.route) {\n        composable(Screen.BlogList.route) {\n            BlogHomeScreen(navController)\n        }\n        composable(Screen.BlogDetail.route) { backStackEntry ->\n            val blogIdString = backStackEntry.arguments?.getString(\"blogId\")\n            val blogId = blogIdString?.toIntOrNull()\n            if (blogId != null) {\n                BlogDetailScreen(blogId, navController)\n            }\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring CORS and CSP in Docker Environment for Directus\nDESCRIPTION: Docker environment configuration for setting Content Security Policy directives and CORS settings to allow communication between Directus and a Next.js application.\nSOURCE: https://github.com/directus/docs/blob/main/content/tutorials/2.projects/build-forms-dynamically-using-directus-and-next.md#2025-04-09_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nenvironment:\n  CONTENT_SECURITY_POLICY_DIRECTIVES__FRAME_SRC: your-website-url\n  CORS_ENABLED: \"true\"\n  CORS_ORIGIN: \"true\"\n```\n\n----------------------------------------\n\nTITLE: Configuring CORS and CSP in Docker Environment for Directus\nDESCRIPTION: Docker environment configuration for setting Content Security Policy directives and CORS settings to allow communication between Directus and a Next.js application.\nSOURCE: https://github.com/directus/docs/blob/main/content/tutorials/2.projects/build-forms-dynamically-using-directus-and-next.md#2025-04-09_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nenvironment:\n  CONTENT_SECURITY_POLICY_DIRECTIVES__FRAME_SRC: your-website-url\n  CORS_ENABLED: \"true\"\n  CORS_ORIGIN: \"true\"\n```\n\n----------------------------------------\n\nTITLE: File ID Access Template\nDESCRIPTION: Template syntax for accessing the newly created file's ID from the operation response.\nSOURCE: https://github.com/directus/docs/blob/main/content/tutorials/3.tips-and-tricks/importing-files-in-directus-automate.md#2025-04-09_snippet_2\n\nLANGUAGE: text\nCODE:\n```\n{{ step.data.data.id }}\n```\n\n----------------------------------------\n\nTITLE: Creating Environment Configuration File\nDESCRIPTION: Environment variable configuration file to store the Directus API URL for the Flutter application.\nSOURCE: https://github.com/directus/docs/blob/main/content/tutorials/1.getting-started/fetch-data-from-directus-with-flutter.md#2025-04-09_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nDIRECTUS_API_URL=https://your-directus-project.com\n```\n\n----------------------------------------\n\nTITLE: Creating Directus Collection for Feedback Storage\nDESCRIPTION: Defines the data model for a 'docs_feedback' collection in Directus to store user feedback, including fields for ID, creation date, URL, rating, title, and comments.\nSOURCE: https://github.com/directus/docs/blob/main/content/tutorials/2.projects/build-a-user-feedback-widget-with-vue-js-.md#2025-04-09_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\ndocs_feedback\n\n- id (Type: uuid)\n- date_created (Type: Timestamp, Interface: Date/Time)\n- url (Type: String, Interface: Input)\n- rating (Type: Integer, Interface: Slider)\n- title (Type: String, Interface: Input)\n- comments (Type: Text, Interface: Textarea)\n```\n\n----------------------------------------\n\nTITLE: Removing Many-to-One Relationship in Directus\nDESCRIPTION: Example of removing a Many-to-One relationship by nullifying the field.\nSOURCE: https://github.com/directus/docs/blob/main/content/guides/4.connect/4.relations.md#2025-04-09_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"featured_article\": null\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Environment Variables for Next.js Hotel Booking App\nDESCRIPTION: Sets up environment variables for a Next.js hotel booking application, defining the Directus URL and application URL for local development.\nSOURCE: https://github.com/directus/docs/blob/main/content/tutorials/2.projects/build-an-hotel-booking-platform-with-next-js-stripe-and-directus-automate.md#2025-04-09_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nDIRECTUS_URL=YOUR_DIRECTUS_URL\nAPP_URL=http://localhost:3000\n```\n\n----------------------------------------\n\nTITLE: Customizing Button Styles with CSS Variables\nDESCRIPTION: Shows how to customize a Directus button component's appearance using CSS custom properties, specifically modifying the hover text color.\nSOURCE: https://github.com/directus/docs/blob/main/content/guides/9.extensions/3.app-extensions/7.ui-library.md#2025-04-09_snippet_1\n\nLANGUAGE: vue\nCODE:\n```\n<template>\n\t<!-- give the button a class -->\n\t<VButton class=\"my-button\">My Button</VButton>\n</template>\n\n<style>\n/* customize the style */\n.my-button {\n\t--v-button-color-hover: black;\n}\n</style>\n```\n\n----------------------------------------\n\nTITLE: Defining Panel Configuration Options\nDESCRIPTION: Configuration options for the panel extension, allowing users to select a collection, fields, and response format. These options determine what data the panel will work with.\nSOURCE: https://github.com/directus/docs/blob/main/content/tutorials/5.extensions/create-collection-items-in-custom-panels.md#2025-04-09_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\n{\n  field: 'collection',\n  type: 'string',\n  name: '$t:collection',\n  meta: {\n    interface: 'system-collection',\n    options: {\n      includeSystem: true,\n      includeSingleton: false,\n    },\n    width: 'half',\n  },\n},\n{\n  field: 'fields',\n  type: 'string',\n  name: 'Included Fields',\n  meta: {\n    interface: 'system-field',\n    options: {\n      collectionField: 'collection',\n      multiple: true,\n    },\n    width: 'half',\n  },\n},\n{\n  field: 'responseFormat',\n  name: 'Response',\n  type: 'string',\n  meta: {\n    interface: 'system-display-template',\n    options: {\n      collectionField: 'collection',\n      placeholder: '{{ field }}',\n    },\n    width: 'full',\n  },\n},\n```\n\n----------------------------------------\n\nTITLE: Configuring Weather Panel Options in JavaScript\nDESCRIPTION: Define options for the weather panel, including input fields for longitude and latitude.\nSOURCE: https://github.com/directus/docs/blob/main/content/tutorials/5.extensions/display-external-weather-api-data-in-custom-panels.md#2025-04-09_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\noptions: [\n\t{\n\t\tfield: 'longitude',\n\t\tname: 'Longitude',\n\t\ttype: 'string',\n\t\tmeta: {\n\t\t\tinterface: 'input',\n\t\t\twidth: 'half',\n\t\t},\n\t},\n\t{\n\t\tfield: 'latitude',\n\t\tname: 'Latitude',\n\t\ttype: 'string',\n\t\tmeta: {\n\t\t\tinterface: 'input',\n\t\t\twidth: 'half',\n\t\t},\n\t},\n],\n```\n\n----------------------------------------\n\nTITLE: Setting Environment Variables for Directus Live Preview\nDESCRIPTION: Configures the Content Security Policy to allow framing from localhost:3000 for live preview functionality.\nSOURCE: https://github.com/directus/docs/blob/main/content/tutorials/1.getting-started/implementing-live-preview-in-next-js.md#2025-04-09_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nCONTENT_SECURITY_POLICY_DIRECTIVES__FRAME_SRC: \"http://localhost:3000\"\n```\n\n----------------------------------------\n\nTITLE: Spanish Content Translation in Markdown\nDESCRIPTION: Markdown content showing the Spanish translation of an article about Chandrayaan lunar exploration mission.\nSOURCE: https://github.com/directus/docs/blob/main/content/tutorials/1.getting-started/implementing-multilingual-content-using-directus-and-next.md#2025-04-09_snippet_10\n\nLANGUAGE: markdown\nCODE:\n```\nChandrayaan es una serie de misiones de exploración lunar desarrolladas por la Organización de Investigación Espacial de la India (ISRO) para mejorar las capacidades espaciales de la India y la comprensión científica de la Luna. El programa comenzó con Chandrayaan-1, lanzado en 2008, que fue fundamental para confirmar la presencia de moléculas de agua en la superficie lunar. Este descubrimiento revolucionario cambió nuestra comprensión de la geología de la Luna y su potencial para la exploración futura. La nave espacial llevaba una combinación de instrumentos indios e internacionales, incluido el Moon Mineralogy Mapper de la NASA, y funcionó durante casi un año antes de perder la comunicación.\n\nSobre la base de este éxito, Chandrayaan-2 se lanzó en 2019, con un orbitador, un módulo de aterrizaje (Vikram) y un explorador (Pragyan). Si bien el módulo de aterrizaje no logró un aterrizaje suave, el orbitador continúa enviando datos valiosos. En 2023, Chandrayaan-3 hizo historia al aterrizar con éxito cerca del polo sur de la Luna, convirtiendo a la India en la primera nación en lograr esta hazaña. La misión desplegó el explorador Pragyan, que realizó análisis in situ del suelo lunar y confirmó la presencia de azufre y otros elementos. El programa Chandrayaan es un testimonio de la creciente experiencia de la India en exploración espacial y sus ambiciones para futuras misiones interplanetarias.\n```\n\n----------------------------------------\n\nTITLE: Setting Up React Router in Main Entry File\nDESCRIPTION: React Router configuration in main.jsx setting up routes for the home page and individual post pages.\nSOURCE: https://github.com/directus/docs/blob/main/content/tutorials/1.getting-started/implementing-live-preview-in-react.md#2025-04-09_snippet_7\n\nLANGUAGE: jsx\nCODE:\n```\nimport { StrictMode } from 'react'\nimport { createRoot } from 'react-dom/client'\nimport { BrowserRouter, Route, Routes } from 'react-router-dom'\nimport Post from './Post'\nimport Home from './Home'\n\ncreateRoot(document.getElementById('root')).render(\n  <StrictMode>\n    <BrowserRouter>\n      <Routes>\n        <Route path=\"/\" element={<Home />} />\n        <Route path=\"/:id\" element={<Post />} />\n      </Routes>\n    </BrowserRouter>\n  </StrictMode>,\n)\n```\n\n----------------------------------------\n\nTITLE: Initializing Astro Project\nDESCRIPTION: Command to create a new Astro project using create-astro CLI tool and install Directus SDK\nSOURCE: https://github.com/directus/docs/blob/main/content/tutorials/1.getting-started/implementing-multilingual-content-using-directus-and-astro.md#2025-04-09_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpx create-astro@latest astro-multilang\n```\n\nLANGUAGE: bash\nCODE:\n```\nnpm install @directus/sdk\n```\n\n----------------------------------------\n\nTITLE: Fetching Filtered Data with Query Parameters\nDESCRIPTION: Advanced curl command demonstrating how to fetch data with filters and field selection. This example filters for published status and only returns id and title fields.\nSOURCE: https://github.com/directus/docs/blob/main/content/getting-started/4.use-the-api.md#2025-04-09_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ncurl \\\n  --header 'Authorization: Bearer YOUR_ACCESS_TOKEN' \\\n  --url 'https://directus.example.com/items/posts?filter[status][_eq]=published&fields=id,title'\n```\n\n----------------------------------------\n\nTITLE: Creating Dynamic Page Component for Next.js\nDESCRIPTION: React component for rendering a dynamic page with blocks from Directus, including a function to map collection names to components.\nSOURCE: https://github.com/directus/docs/blob/main/content/tutorials/1.getting-started/rendering-dynamic-blocks-using-next.md#2025-04-09_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\nimport React from \"react\";\nimport Hero from \"../components/Hero\";\nimport CardGroup from \"../components/CardGroup\";\nimport RichText from \"../components/RichText\";\nimport client from \"@/lib/directus\";\nimport { readItems } from \"@directus/sdk\";\n\nconst blockToComponent = (collectionName) => {\n    switch (collectionName) {\n        case \"block_hero\":\n            return Hero;\n        case \"block_richtext\":\n            return RichText;\n        case \"block_cardgroup\":\n            return CardGroup;\n        default:\n            return null;\n    }\n}\n\n\nexport default async function Page({ params }) {\n    const { slug } = await params;\n    \n    let page\n\n    return (\n        <div>\n            <h1>{page[0].title}</h1>\n            {page[0]?.blocks?.map((block, index) => {\n                const Component = blockToComponent(block.collection);\n                return <Component key={index} {...(block.item)} />;\n            })}\n        </div>\n    );\n}\n```\n\n----------------------------------------\n\nTITLE: Creating SEO Collection Schema in Directus\nDESCRIPTION: Defines the structure for a dedicated SEO collection in Directus, including fields for title, meta description, canonical URL, and other SEO-related data.\nSOURCE: https://github.com/directus/docs/blob/main/content/tutorials/3.tips-and-tricks/search-engine-optimization-best-practices.md#2025-04-09_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\nseo\n\n- id (Type: uuid)\n- title (Type: String, Interface: Input, Note: This item's title, defaults to item.title. Max 70 characters including the site name.)\n- meta_description (Type: Text, Interface: Textarea, Note: This item's meta description. Max 160 characters.)\n- canonical_url (Type: String, Interface: Input, Note: Where should the canonical URL for this entry point to.)\n- no_index (Type: Boolean, Interface: Toggle, Note: Instruct crawlers not to index this item.)\n- no_follow (Type: Boolean, Interface: Toggle, Note: Instruct crawlers not to follow links on this item.)\n- og_image (Type: Image, Note: This item's OG image. Defaults to global site OG image. The recommended size is 1200px x 630px. The image will be focal cropped to this dimension.)\n- sitemap_change_frequency (Type: String, Interface: Input, Note: How often to instruct search engines to crawl.)\n- sitemap_priority (Type: Decimal, Interface: Input, Note: Valid values range from 0.0 to 1.0. This value does not affect how your pages are compared to pages on other sites, it only lets the search engines know which pages you deem most important for the crawlers.)\n```\n\n----------------------------------------\n\nTITLE: Setting Environment Variables for Directus Live Preview\nDESCRIPTION: Configures the Content Security Policy to allow framing from localhost:3000 for live preview functionality.\nSOURCE: https://github.com/directus/docs/blob/main/content/tutorials/1.getting-started/implementing-live-preview-in-next-js.md#2025-04-09_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nCONTENT_SECURITY_POLICY_DIRECTIVES__FRAME_SRC: \"http://localhost:3000\"\n```\n\n----------------------------------------\n\nTITLE: Docker Dependencies Installation\nDESCRIPTION: Commands to install required dependencies for Docker\nSOURCE: https://github.com/directus/docs/blob/main/content/tutorials/6.self-hosting/deploy-directus-to-an-ubuntu-server.md#2025-04-09_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\nsudo apt-get update\nsudo apt-get install ca-certificates curl gnupg\n```\n\n----------------------------------------\n\nTITLE: Creating Chrome Extension Manifest Configuration\nDESCRIPTION: JSON configuration for Chrome extension manifest.json that defines metadata, permissions, and behavior for the extension.\nSOURCE: https://github.com/directus/docs/blob/main/content/tutorials/2.projects/build-a-notebook-chrome-extension-with-directus-auth.md#2025-04-09_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"name\": \"Directus WebNote Keeper\",\n    \"version\": \"1.0\",\n    \"manifest_version\": 3,\n    \"author\": \"Jay Bharadia\",\n    \"description\": \"Directus WebNote Keeper for capturing urls and store in directus.\",\n    \"icons\": {\n        \"16\": \"icon.png\",\n        \"32\": \"icon.png\",\n        \"48\": \"icon.png\",\n        \"128\": \"icon.png\"\n    },\n    \"action\": {\n        \"default_title\": \"Directus WebNote Keeper\",\n        \"default_popup\": \"index.html\"\n    },\n    \"permissions\": [\"activeTab\", \"storage\"]\n}\n```\n\n----------------------------------------\n\nTITLE: Authenticating User with Directus Client\nDESCRIPTION: Completes the login form event handler by calling the client.login method with the user's email and password. This authenticates the user with the Directus server.\nSOURCE: https://github.com/directus/docs/blob/main/content/tutorials/2.projects/build-a-multi-user-chat-with-javascript-and-directus-realtime.md#2025-04-09_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\ndocument.querySelector('#login').addEventListener('submit', function (event) {\n\tevent.preventDefault();\n\n  const email = event.target.elements.email.value;\n  const password = event.target.elements.password.value;\n\n  client.login(email, password); // [!code ++]\n});\n```\n\n----------------------------------------\n\nTITLE: Configuring Panel Extension ID and Metadata\nDESCRIPTION: JavaScript configuration for the panel extension, defining its unique ID, name, icon, and description. This establishes the panel's identity in the Directus interface.\nSOURCE: https://github.com/directus/docs/blob/main/content/tutorials/5.extensions/create-collection-items-in-custom-panels.md#2025-04-09_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nid: 'panel-internal-form',\nname: 'Internal Form',\nicon: 'view_day',\ndescription: 'Output a form to insert data into a collection.',\n```\n\n----------------------------------------\n\nTITLE: Installing Directus SDK\nDESCRIPTION: NPM command to install Directus SDK in the SvelteKit project\nSOURCE: https://github.com/directus/docs/blob/main/content/tutorials/1.getting-started/using-authentication-in-sveltekit.md#2025-04-09_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nnpm install @directus/sdk\n```\n\n----------------------------------------\n\nTITLE: Configuring SvelteKit Server Hooks for Directus Integration\nDESCRIPTION: Server-side hook configuration in SvelteKit to ensure proper headers are set for fetching JavaScript content. This is necessary for the Directus SDK to function correctly with server-side rendering.\nSOURCE: https://github.com/directus/docs/blob/main/content/tutorials/1.getting-started/fetch-data-from-directus-with-sveltekit.md#2025-04-09_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nexport async function handle({ event, resolve }) {\n\treturn await resolve(event, {\n\t\tfilterSerializedResponseHeaders: (key, value) => {\n\t\t\treturn key.toLowerCase() === 'content-type';\n\t\t},\n\t});\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Internal Form Panel in JavaScript\nDESCRIPTION: Defines the configuration for an internal form panel in Directus. It specifies the panel's properties, options, and minimum dimensions.\nSOURCE: https://github.com/directus/docs/blob/main/content/tutorials/5.extensions/create-collection-items-in-custom-panels.md#2025-04-09_snippet_17\n\nLANGUAGE: javascript\nCODE:\n```\nimport PanelComponent from './panel.vue';\n\nexport default {\n  id: 'panel-internal-form',\n  name: 'Internal Form',\n  icon: 'view_day',\n  description: 'Output a form to insert data into a collection.',\n  component: PanelComponent,\n  options: [\n    {\n      field: 'collection',\n      type: 'string',\n      name: '$t:collection',\n      meta: {\n        interface: 'system-collection',\n        options: {\n          includeSystem: true,\n          includeSingleton: false,\n        },\n        width: 'half',\n      },\n    },\n    {\n      field: 'fields',\n      type: 'string',\n      name: 'Included Fields',\n      meta: {\n        interface: 'system-field',\n        options: {\n          collectionField: 'collection',\n          multiple: true,\n        },\n        width: 'half',\n      },\n    },\n    {\n      field: 'responseFormat',\n      name: 'Response',\n      type: 'string',\n      meta: {\n        interface: 'system-display-template',\n        options: {\n          collectionField: 'collection',\n          placeholder: '{{ field }}',\n        },\n        width: 'full',\n      },\n    },\n  ],\n  minWidth: 12,\n  minHeight: 8,\n  skipUndefinedKeys: ['responseFormat'],\n};\n```\n\n----------------------------------------\n\nTITLE: Creating a New React Project with Vite\nDESCRIPTION: Command to initialize a new React project using Vite as the build tool.\nSOURCE: https://github.com/directus/docs/blob/main/content/tutorials/1.getting-started/implementing-live-preview-in-react.md#2025-04-09_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nnpm create vite@latest\n```\n\n----------------------------------------\n\nTITLE: Enhancing Post Pages with Draft Mode Support\nDESCRIPTION: Modified post page component that includes draft mode detection and displays a draft mode indicator when enabled.\nSOURCE: https://github.com/directus/docs/blob/main/content/tutorials/1.getting-started/set-up-live-preview-with-next-js.md#2025-04-09_snippet_2\n\nLANGUAGE: tsx\nCODE:\n```\nimport directus from '@/lib/directus';\nimport { readItem, readItems } from '@directus/sdk';\nimport { draftMode } from 'next/headers';\n\nexport default async function Post({ params: { id } }: { params: { id: string } }) {\n\tconst { isEnabled } = draftMode();\n\n\tconst post = await getPostById(id);\n\n\tif (!post) {\n\t\treturn null;\n\t}\n\n\tconst { title, body } = post;\n\n\treturn (\n\t\t<article>\n\t\t\t<h1>{title}</h1>\n\t\t\t<p>{body}</p>\n\t\t\t{isEnabled && <p>(Draft Mode)</p>}\n\t\t</article>\n\t);\n}\n\nexport async function generateStaticParams() {\n\tconst posts = await directus.request(\n\t\treadItems('Posts', {\n\t\t\tlimit: -1,\n\t\t})\n\t);\n\n\treturn posts.map((post) => ({\n\t\tid: String(post.id),\n\t}));\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Rich Text Block Collection in Directus\nDESCRIPTION: Creates a new collection named 'block_richtext' with fields for headline and content. This block type allows for rich text or HTML content sections on a page.\nSOURCE: https://github.com/directus/docs/blob/main/content/tutorials/1.getting-started/create-reusable-blocks-with-many-to-any-relationships.md#2025-04-09_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\nblock_richtext\n\n- id (uuid)\n- headline (Type: String, Interface: Input)\n- content (Type: Text, Interface: WYSIWYG)\n```\n\n----------------------------------------\n\nTITLE: Fetching and Processing Redirects from Directus\nDESCRIPTION: This code demonstrates how to fetch redirects from Directus and process them for use in a frontend framework. It retrieves the redirects collection, validates response codes, and prepares them for integration with a framework's redirect system.\nSOURCE: https://github.com/directus/docs/blob/main/content/tutorials/3.tips-and-tricks/search-engine-optimization-best-practices.md#2025-04-09_snippet_8\n\nLANGUAGE: javascript\nCODE:\n```\n// Though it depends on your specific framework, this logic would probably be called during build time\nimport { createDirectus, readItems, rest } from '@directus/sdk'\n\nconst directus = createDirectus(directusUrl).with(rest())\n\nconst redirects = await directus.request(readItems('redirects'))\n\nfor (const redirect of redirects) {\n\tlet responseCode = redirect.response_code\n\t\t? parseInt(redirect.response_code)\n\t\t: 301\n\n\t// If response code doesn't match what we expect, use 301\n\tif (responseCode !== 301 && responseCode !== 302) {\n\t\tresponseCode = 301\n\t}\n\n\t// Add Logic here to add the redirects to a config file or tell your frontend framework how to handle them\n\t// ** Your Logic **\n}\n```\n\n----------------------------------------\n\nTITLE: Adding Blog Route Configuration\nDESCRIPTION: Route configuration for the blog posts listing page\nSOURCE: https://github.com/directus/docs/blob/main/content/tutorials/1.getting-started/fetch-data-from-directus-with-angular.md#2025-04-09_snippet_9\n\nLANGUAGE: typescript\nCODE:\n```\n{path: 'blog', component: PostsComponent},\n```\n\n----------------------------------------\n\nTITLE: CRUD Operations with FieldsService in Directus\nDESCRIPTION: These snippets show how to perform Create, Read, Update, and Delete operations using the FieldsService in Directus. Each operation is demonstrated with a simple example.\nSOURCE: https://github.com/directus/docs/blob/main/content/guides/9.extensions/2.api-extensions/4.services.md#2025-04-09_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nawait fieldsService.createField('collection_name', {\n\tfield: 'title',\n\ttype: 'string',\n\tmeta: {\n\t\ticon: 'title',\n\t},\n\tschema: {\n\t\tdefault_value: 'Hello World',\n\t},\n});\n```\n\nLANGUAGE: javascript\nCODE:\n```\nconst data = await fieldsService.readOne('collection_name', 'field_name');\n```\n\nLANGUAGE: javascript\nCODE:\n```\nconst data = await fieldsService.updateField('collection_name', 'field_name', {\n\tmeta: {\n\t\ticon: 'title',\n\t},\n});\n```\n\nLANGUAGE: javascript\nCODE:\n```\nconst data = await fieldsService.deleteField('collection_name', 'field_name');\n```\n\n----------------------------------------\n\nTITLE: Implementing Data Fetching Logic\nDESCRIPTION: SvelteKit page load function to fetch testimonials from Directus.\nSOURCE: https://github.com/directus/docs/blob/main/content/tutorials/2.projects/build-a-testimonial-widget-with-sveltekit-and-directus.md#2025-04-09_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\n/** @type {import('./$types').PageLoad} */\nimport getDirectusInstance from \"$lib/directus\";\nimport { error } from \"@sveltejs/kit\";\nimport { readItems } from \"@directus/sdk\";\n\nexport async function load({ fetch }) {\n const directus = getDirectusInstance(fetch);\n try {\n   return {\n     testimonials: await directus.request(readItems(\"testimonials\")),\n   };\n } catch (err) {\n  error(err);\n }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Rate Limiting in Directus\nDESCRIPTION: Configuration variables for rate limiting including IP-based limits, global limits, registration limits, and pressure-based limiting for system load management.\nSOURCE: https://github.com/directus/docs/blob/main/content/configuration/security-limits.md#2025-04-09_snippet_3\n\nLANGUAGE: markdown\nCODE:\n```\n| Variable                                    | Description                                                             | Default Value |\n| ------------------------------------------- | ----------------------------------------------------------------------- | ------------- |\n| `RATE_LIMITER_ENABLED`                      | Whether or not to enable rate limiting per IP on the API.               | `false`       |\n| `RATE_LIMITER_POINTS`                       | The amount of allowed hits per duration.                                | `50`          |\n| `RATE_LIMITER_DURATION`                     | The time window in seconds in which the points are counted.             | `1`           |\n| `RATE_LIMITER_STORE`                        | Where to store the rate limiter counts. One of `memory`, `redis`.       | `memory`      |\n| `RATE_LIMITER_HEALTHCHECK_THRESHOLD`        | Healthcheck timeout threshold in milliseconds.                          | `150`         |\n```\n\n----------------------------------------\n\nTITLE: Docker Image Tagging\nDESCRIPTION: Command to tag the local Docker image for Google Artifact Registry\nSOURCE: https://github.com/directus/docs/blob/main/content/tutorials/6.self-hosting/deploy-directus-to-google-cloud-platform.md#2025-04-09_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\ndocker tag directus:10.10.4 us-central1-docker.pkg.dev/directus-project/directus-repo/directus:10.10.4\n```\n\n----------------------------------------\n\nTITLE: Configuring Angular Routes for Global Metadata\nDESCRIPTION: Sets up Angular routing to display the global metadata component as the default route. This allows the global metadata to be shown when the application is first loaded.\nSOURCE: https://github.com/directus/docs/blob/main/content/tutorials/1.getting-started/fetch-data-from-directus-with-angular.md#2025-04-09_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Routes } from '@angular/router';\nimport {GlobalComponent} from \"./component/global/global.component\";\n\nexport const routes: Routes = [\n  {path: '', component: GlobalComponent}\n];\n```\n\n----------------------------------------\n\nTITLE: Creating Layout Component in Vue for Directus Explore Pages\nDESCRIPTION: This Vue component example demonstrates how to implement a basic layout component for Directus. It shows the required props structure including collection and name, and displays these values in the template.\nSOURCE: https://github.com/directus/docs/blob/main/content/guides/9.extensions/3.app-extensions/3.layouts.md#2025-04-09_snippet_1\n\nLANGUAGE: vue\nCODE:\n```\n<template>\n\t<div>\n\t\t<p>Name: {{ name }}</p>\n\t\t<p>Collection: {{ collection }}</p>\n\t</div>\n</template>\n\n<script>\nexport default {\n\tinheritAttrs: false,\n\tprops: {\n\t\tcollection: {\n\t\t\ttype: String,\n\t\t\trequired: true,\n\t\t},\n\t\tname: {\n\t\t\ttype: String,\n\t\t\trequired: true,\n\t\t},\n\t},\n};\n</script>\n```\n\n----------------------------------------\n\nTITLE: Creating Directus Plugin for Nuxt\nDESCRIPTION: Nuxt plugin to initialize Directus SDK and provide access to Directus functions throughout the application.\nSOURCE: https://github.com/directus/docs/blob/main/content/tutorials/2.projects/build-forms-dynamically-using-directus-and-nuxt.md#2025-04-09_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nimport {\n\tcreateDirectus,\n\trest,\n\treadFieldsByCollection,\n\tcreateItem,\n} from \"@directus/sdk\";\nconst directus = createDirectus<DirectusSchema>(\n\t\"http://your-website-url/directus\",\n).with(rest());\nexport default defineNuxtPlugin(() => {\n\treturn {\n\t\tprovide: { directus, readFieldsByCollection, createItem },\n\t};\n});\n```\n\n----------------------------------------\n\nTITLE: Creating SvelteKit Project with CLI\nDESCRIPTION: Command line instructions for creating a new SvelteKit project with minimal template\nSOURCE: https://github.com/directus/docs/blob/main/content/tutorials/1.getting-started/using-authentication-in-sveltekit.md#2025-04-09_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nnpx sv create directus-auth # choose SvelteKit minimal\n```\n\n----------------------------------------\n\nTITLE: Creating Directus Docker Image\nDESCRIPTION: Dockerfile configuration to create a new Docker image using Directus as the base image\nSOURCE: https://github.com/directus/docs/blob/main/content/tutorials/6.self-hosting/deploy-directus-to-google-cloud-platform.md#2025-04-09_snippet_0\n\nLANGUAGE: dockerfile\nCODE:\n```\nFROM directus/directus:10.10.4\n```\n\n----------------------------------------\n\nTITLE: Creating Dynamic Route for Individual Posts in Vue\nDESCRIPTION: This Vue component creates a dynamic route for individual post pages. It fetches a single post's data using the $directus and $readItem methods from a custom Nuxt plugin, based on the route parameter.\nSOURCE: https://github.com/directus/docs/blob/main/content/tutorials/1.getting-started/set-up-live-preview-with-nuxt.md#2025-04-09_snippet_1\n\nLANGUAGE: vue\nCODE:\n```\n<template>\n\t<NuxtLink to=\"/\">Home</NuxtLink>\n\t<h1>{{ post.title }}</h1>\n\t<div v-html=\"post.content\"></div>\n</template>\n\n<script setup>\nconst { $directus, $readItem } = useNuxtApp();\nconst route = useRoute();\n\nconst post = await useAsyncData('post', () => {\n  return $directus.request($readItem('posts', route.params.id))\n});\n\nif (!post.value) throw createError({\n  statusCode: 404,\n  statusMessage: 'Post Not Found'\n});\n</script>\n```\n\n----------------------------------------\n\nTITLE: Docker Installation Preparation\nDESCRIPTION: Commands to remove conflicting packages and prepare for Docker installation\nSOURCE: https://github.com/directus/docs/blob/main/content/tutorials/6.self-hosting/deploy-directus-to-an-ubuntu-server.md#2025-04-09_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nfor pkg in docker.io docker-doc docker-compose docker-compose-v2 podman-docker containerd runc; do sudo apt-get remove $pkg; done\n```\n\n----------------------------------------\n\nTITLE: Implementing Preview Plugin for Nuxt 3\nDESCRIPTION: This JavaScript code creates a Nuxt 3 plugin that enables preview mode. It checks for a 'preview=true' URL parameter and re-fetches data when in preview mode, allowing for live content updates.\nSOURCE: https://github.com/directus/docs/blob/main/content/tutorials/1.getting-started/set-up-live-preview-with-nuxt.md#2025-04-09_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nexport default defineNuxtPlugin((nuxtApp) => {\n\tconst route = useRoute();\n\tconst preview = route.query.preview && route.query.preview === 'true';\n\n\tif (preview) {\n\t\tnuxtApp.hook('page:finish', () => {\n\t\t\trefreshNuxtData();\n\t\t});\n\t}\n\n\treturn { provide: { preview } };\n});\n```\n\n----------------------------------------\n\nTITLE: WordPress JSON Data Structure Example\nDESCRIPTION: Shows the structure of a single item in the WordPress JSON export file. This helps understand the data format that needs to be processed for migration to Directus.\nSOURCE: https://github.com/directus/docs/blob/main/content/tutorials/4.migration/migrate-from-wordpress-to-directus.md#2025-04-09_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"ID\": \"2\",\n    \"Title\": \"Sample Page\",\n    \"Content\": \"...\",\n    \"Excerpt\": \"...\",\n    \"Date\": \"2024-04-08 15:33:50\",\n    \"Post Type\": \"...\",\n    \"Permalink\": \"...\"\n  }\n```\n\n----------------------------------------\n\nTITLE: Configuring Panel Extension Metadata in JavaScript\nDESCRIPTION: Defines the basic metadata for the Twilio SMS panel extension, including its ID, name, icon, and description.\nSOURCE: https://github.com/directus/docs/blob/main/content/tutorials/5.extensions/send-sms-messages-with-twilio-in-custom-panels.md#2025-04-09_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nid: 'panel-twilio-sms',\nname: 'Twilio SMS',\nicon: 'forum',\ndescription: 'Send a SMS from a panel.'\n```\n\n----------------------------------------\n\nTITLE: Creating TypeScript Environment Definitions\nDESCRIPTION: TypeScript type definitions for environment variables to ensure proper type checking when accessing the API_URL environment variable.\nSOURCE: https://github.com/directus/docs/blob/main/content/tutorials/1.getting-started/using-authentication-in-nuxt.md#2025-04-09_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\n/// <reference types=\"vite/client\" />\ninterface ImportMetaEnv {\n\treadonly API_URL: string;\n}\n  \ninterface ImportMeta {\n\treadonly env: ImportMetaEnv;\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a Relation using RelationsService in JavaScript\nDESCRIPTION: Demonstrates creating a new relation between collections using the RelationsService. It creates a relation for a 'featured_image' field in the 'articles' collection, linking to 'directus_files'.\nSOURCE: https://github.com/directus/docs/blob/main/content/tutorials/5.extensions/read-collection-data-in-custom-layouts.md#2025-04-09_snippet_11\n\nLANGUAGE: javascript\nCODE:\n```\nrouter.post('/', async (req, res) => {\n  const relationsService = new RelationsService({\n    schema: await getSchema(),\n    accountability: req.accountability\n  });\n\n  const data = await relationsService.createOne({\n    collection: 'articles',\n    field: 'featured_image',\n    related_collection: 'directus_files',\n  });\n\n  const data = await relationsService.readOne(data);\n\n  res.json(record);\n});\n```\n\n----------------------------------------\n\nTITLE: Creating Directus Plugin for Nuxt\nDESCRIPTION: Nuxt plugin to initialize Directus SDK and provide access to Directus functions throughout the application.\nSOURCE: https://github.com/directus/docs/blob/main/content/tutorials/2.projects/build-forms-dynamically-using-directus-and-nuxt.md#2025-04-09_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nimport {\n\tcreateDirectus,\n\trest,\n\treadFieldsByCollection,\n\tcreateItem,\n} from \"@directus/sdk\";\nconst directus = createDirectus<DirectusSchema>(\n\t\"http://your-website-url/directus\",\n).with(rest());\nexport default defineNuxtPlugin(() => {\n\treturn {\n\t\tprovide: { directus, readFieldsByCollection, createItem },\n\t};\n});\n```\n\n----------------------------------------\n\nTITLE: Implementing Vonage API Endpoint in Directus\nDESCRIPTION: Custom endpoint implementation that proxies requests to Vonage API. Handles authentication and request forwarding with error handling.\nSOURCE: https://github.com/directus/docs/blob/main/content/tutorials/5.extensions/display-external-api-data-from-vonage-in-custom-panels.md#2025-04-09_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport { createError } from '@directus/errors';\n\nconst ForbiddenError = createError('VONAGE_FORBIDDEN', 'You need to be authenticated to access this endpoint');\n\nexport default {\n  id: 'vonage',\n  handler: (router, { env }) => {\n    const { VONAGE_API_KEY, VONAGE_API_SECRET } = env;\n    const baseURL = 'https://api.nexmo.com';\n    const token = Buffer.from(`${VONAGE_API_KEY}:${VONAGE_API_SECRET}`).toString('base64');\n    const headers = { Authorization: `Basic ${token}` };\n\n    router.get('/records', async (req, res) => {\n      if (req.accountability == null) throw new ForbiddenError();\n\n      try {\n        const url = baseURL + `/v2/reports/records?account_id=${VONAGE_API_KEY}&${req._parsedUrl.query}`;\n        const response = await fetch(url, { headers });\n\n        if (response.ok) {\n          res.json(await response.json());\n        } else {\n          res.status(response.status).send(response.statusText);\n        }\n      } catch (error) {\n        res.status(500).send(response.statusText);\n      }\n    });\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: Creating a Directus SDK Helper Function\nDESCRIPTION: A TypeScript utility that initializes a Directus SDK client to interact with the Directus API. It uses environment variables to get the API URL and configures the REST transport.\nSOURCE: https://github.com/directus/docs/blob/main/content/tutorials/2.projects/build-a-video-streaming-app-with-sveltekit-and-directus.md#2025-04-09_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport { createDirectus, rest } from \"@directus/sdk\";\nexport const DIRECTUS_API_URL = import.meta.env.VITE_DIRECTUS_URL;\nfunction getDirectusClient() {\n  const directus = createDirectus(DIRECTUS_API_URL).with(rest());\n  return directus;\n};\nexport default getDirectusClient;\n```\n\n----------------------------------------\n\nTITLE: Blog Listing Template\nDESCRIPTION: Template for displaying list of blog posts\nSOURCE: https://github.com/directus/docs/blob/main/content/tutorials/1.getting-started/fetch-data-from-directus-with-eleventy-3.md#2025-04-09_snippet_8\n\nLANGUAGE: html\nCODE:\n```\n---\nlayout: layouts/base.njk\npermalink: \"blog/index.html\"\ntitle: Blog\n---\n\n<h1>{{ title }}</h1>\n<ul>\n    {% for post in posts %}\n        <a href=\"/posts/{{ post.slug }}\">\n            <h2>{{ post.title }}</h2>\n        </a>\n        <span>\n            {{ post.publish_date }} &bull; {{ post.author.name }}\n        </span>\n    {% endfor %}\n</ul>\n```\n\n----------------------------------------\n\nTITLE: Setting Up Items.Create Action Listener\nDESCRIPTION: Configuring an action listener for item creation events in Directus that captures key, collection, and payload information.\nSOURCE: https://github.com/directus/docs/blob/main/content/tutorials/5.extensions/create-new-customers-in-stripe-in-a-custom-hook.md#2025-04-09_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\naction('items.create', async ({ key, collection, payload }, { schema }) => {});\n```\n\n----------------------------------------\n\nTITLE: Email Template File Structure\nDESCRIPTION: List of system email templates that can be overridden with custom Liquid templates, including password reset, user invitation, and user registration emails.\nSOURCE: https://github.com/directus/docs/blob/main/content/configuration/email.md#2025-04-09_snippet_1\n\nLANGUAGE: plaintext\nCODE:\n```\npassword-reset.liquid\nuser-invitation.liquid\nuser-registration.liquid\n```\n\n----------------------------------------\n\nTITLE: Complete Display Extension Index Configuration\nDESCRIPTION: Complete index.js configuration file for the age display extension\nSOURCE: https://github.com/directus/docs/blob/main/content/tutorials/5.extensions/format-dates-in-a-custom-display-extension.md#2025-04-09_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nimport DisplayComponent from './display.vue';\n\nexport default {\n  id: 'directus-display-age',\n  name: 'Display Age',\n  icon: 'calendar_month',\n  description: 'Display the current age from the date of birth',\n  component: DisplayComponent,\n  options: [\n    {\n      field: 'show_months',\n      type: 'boolean',\n      name: 'Show Months as well',\n      meta: {\n        interface: 'boolean',\n        options: {\n          label: 'Yes',\n        },\n        width: 'half',\n      },\n    },\n  ],\n  types: ['date'],\n};\n```\n\n----------------------------------------\n\nTITLE: Initializing a Nuxt Project with Nuxi\nDESCRIPTION: Command line instructions for creating a new Nuxt project using the Nuxi CLI tool.\nSOURCE: https://github.com/directus/docs/blob/main/content/tutorials/1.getting-started/using-authentication-in-nuxt.md#2025-04-09_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nnpx nuxi@latest init directus-auth\ncd directus-auth\n```\n\n----------------------------------------\n\nTITLE: Configuring React Router in Main Entry Point\nDESCRIPTION: Entry point file that wraps the App component with BrowserRouter to enable routing throughout the application.\nSOURCE: https://github.com/directus/docs/blob/main/content/tutorials/1.getting-started/using-authentication-in-react.md#2025-04-09_snippet_11\n\nLANGUAGE: javascript\nCODE:\n```\n// src/main.jsx\n\nimport React from 'react';\nimport ReactDOM from 'react-dom/client';\nimport { BrowserRouter } from 'react-router-dom';\nimport App from './App';\n \nconst root = ReactDOM.createRoot(document.getElementById('root'));\nroot.render(\n   <React.StrictMode>\n      <BrowserRouter>\n         <App />\n      </BrowserRouter>\n   </React.StrictMode>\n);\n```\n\n----------------------------------------\n\nTITLE: Running Directus Import Script\nDESCRIPTION: Bash command to execute the Python script that imports content from the modified WordPress JSON file to Directus.\nSOURCE: https://github.com/directus/docs/blob/main/content/tutorials/4.migration/migrate-from-wordpress-to-directus.md#2025-04-09_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\npython directus.py\n```\n\n----------------------------------------\n\nTITLE: Fetching Data with Directus in Nuxt\nDESCRIPTION: This asyncData method shows how to fetch data using the Directus JavaScript SDK in a Nuxt application. It demonstrates the simplified data retrieval process with built-in relationship support.\nSOURCE: https://github.com/directus/docs/blob/main/content/tutorials/4.migration/migrate-from-nuxt-content-to-directus.md#2025-04-09_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nasync asyncData({ $directus }) {\n  const { data: content } = await $directus.items('library').readByQuery({ limit: -1, sort: '-date', fields: ['*', '*.*'] })\n  let { data: { collections } } = await $directus.items('featured').readByQuery({fields: ['*', '*.*', '*.*.*']})\n  return { content, collections }\n}\n```\n\n----------------------------------------\n\nTITLE: Creating PageController in Laravel\nDESCRIPTION: Command to generate a new controller for handling dynamic page requests in Laravel.\nSOURCE: https://github.com/directus/docs/blob/main/content/tutorials/1.getting-started/fetch-data-from-directus-with-laravel.md#2025-04-09_snippet_7\n\nLANGUAGE: shell\nCODE:\n```\nphp artisan make:controller PageController\n```\n\n----------------------------------------\n\nTITLE: Implementing Display Options in JavaScript\nDESCRIPTION: Define the options for the display extension, including field selection and configuration settings.\nSOURCE: https://github.com/directus/docs/blob/main/content/tutorials/5.extensions/summarize-relational-items-in-a-custom-display-extension.md#2025-04-09_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\noptions: ({ editing, relations }) => {\n\tconst relatedCollection =\n\t\trelations.o2m?.meta.junction_field != null ? relations.m2o?.related_collection : relations.o2m?.collection;\n\n\tconst junction_table = relations.o2m?.meta.junction_field != null ? relations.o2m?.collection : null;\n\tconst { useFieldsStore } = useStores();\n\tconst fieldsStore = useFieldsStore();\n\n\tif (editing === '+') {\n\t\tconst fieldSelection = {\n\t\t\tinterface: 'presentation-notice',\n\t\t\toptions: {\n\t\t\t\ttext: 'Please complete the field before attempting to configure the display.',\n\t\t\t},\n\t\t\twidth: 'full',\n\t\t};\n\t} else {\n\t\tconst fields = fieldsStore.getFieldsForCollection(relatedCollection);\n\t\tconst field_choices = [];\n\n\t\tfields.forEach((field) => {\n\t\t\tfield_choices.push({\n\t\t\t\ttext: field.meta.field,\n\t\t\t\tvalue: junction_table ? `${relations.o2m.meta.junction_field}.${field.meta.field}` : field.meta.field,\n\t\t\t});\n\t\t});\n\n\t\tconst fieldSelection = {\n\t\t\tinterface: 'select-dropdown',\n\t\t\toptions: {\n\t\t\t\tchoices: field_choices,\n\t\t\t},\n\t\t\twidth: 'full',\n\t\t};\n\t}\n\n\treturn [\n\t\t{\n\t\t\tfield: 'column',\n\t\t\tname: 'Choose a column',\n\t\t\tmeta: fieldSelection,\n\t\t},\n\t\t{\n\t\t\tfield: 'sum',\n\t\t\ttype: 'boolean',\n\t\t\tname: 'Calculate Sum',\n\t\t\tmeta: {\n\t\t\t\tinterface: 'boolean',\n\t\t\t\toptions: {\n\t\t\t\t\tlabel: 'Yes',\n\t\t\t\t},\n\t\t\t\twidth: 'half',\n\t\t\t},\n\t\t},\n\t\t{\n\t\t\tfield: 'prefix',\n\t\t\ttype: 'string',\n\t\t\tname: 'Prefix',\n\t\t\tmeta: {\n\t\t\t\tinterface: 'input',\n\t\t\t\toptions: {\n\t\t\t\t\tfont: 'monospace',\n\t\t\t\t},\n\t\t\t\twidth: 'half',\n\t\t\t},\n\t\t},\n\t\t{\n\t\t\tfield: 'suffix',\n\t\t\ttype: 'string',\n\t\t\tname: 'Suffix',\n\t\t\tmeta: {\n\t\t\t\tinterface: 'input',\n\t\t\t\toptions: {\n\t\t\t\t\tfont: 'monospace',\n\t\t\t\t},\n\t\t\t\twidth: 'half',\n\t\t\t},\n\t\t},\n\t];\n},\n```\n\n----------------------------------------\n\nTITLE: Blog Post Detail Template\nDESCRIPTION: HTML template for displaying individual blog post content.\nSOURCE: https://github.com/directus/docs/blob/main/content/tutorials/1.getting-started/fetch-data-from-directus-with-django.md#2025-04-09_snippet_13\n\nLANGUAGE: html\nCODE:\n```\n<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <title>{{ post.title }}</title>\n</head>\n<body>\n    <article>\n        <header>\n            <h1>{{ post.title }}</h1>\n\n            <p>Published on: {{ post.publish_date }} by {{ post.author.name }}</p>\n        </header>\n        <section>\n            {{ post.content | safe }}\n        </section>\n    </article>\n</body>\n</html>\n```\n\n----------------------------------------\n\nTITLE: Adding Individual Post Route\nDESCRIPTION: Route configuration for individual blog posts\nSOURCE: https://github.com/directus/docs/blob/main/content/tutorials/1.getting-started/fetch-data-from-directus-with-angular.md#2025-04-09_snippet_15\n\nLANGUAGE: typescript\nCODE:\n```\n{path: 'blog/:slug', component: PostComponent}\n```\n\n----------------------------------------\n\nTITLE: TypeScript Environment Variables Definition for Nuxt\nDESCRIPTION: TypeScript declaration file for defining environment variables types, ensuring type safety when accessing the Directus API URL.\nSOURCE: https://github.com/directus/docs/blob/main/content/tutorials/1.getting-started/implementing-multilingual-content-using-directus-and-nuxt.md#2025-04-09_snippet_4\n\nLANGUAGE: ts\nCODE:\n```\n/// <reference types=\"vite/client\" />\ninterface ImportMetaEnv {\n\treadonly API_URL: string;\n}\n  \ninterface ImportMeta {\n\treadonly env: ImportMetaEnv;\n}\n```\n\n----------------------------------------\n\nTITLE: Initializing Directus Extension Bundle\nDESCRIPTION: Command to create a new Directus extension bundle using npx create-directus-extension\nSOURCE: https://github.com/directus/docs/blob/main/content/tutorials/5.extensions/display-external-api-data-from-vonage-in-custom-panels.md#2025-04-09_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nnpx create-directus-extension@latest\n```\n\n----------------------------------------\n\nTITLE: Fetching Pages Data\nDESCRIPTION: Module to fetch pages data from Directus collection\nSOURCE: https://github.com/directus/docs/blob/main/content/tutorials/1.getting-started/fetch-data-from-directus-with-eleventy-3.md#2025-04-09_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nimport directus from './directus.js';\nimport { readItems } from '@directus/sdk';\n\nexport default async () => {\n    return await directus.request(readItems('pages'))\n}\n```\n\n----------------------------------------\n\nTITLE: Initializing a Directus Hook Extension for Sentry\nDESCRIPTION: Commands to scaffold a new Directus hook extension and install the required Sentry Node.js SDK. This creates the boilerplate code for implementing Sentry monitoring in Directus.\nSOURCE: https://github.com/directus/docs/blob/main/content/tutorials/5.extensions/monitor-and-error-track-with-sentry-in-custom-hooks.md#2025-04-09_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nnpx create-directus-extension@latest\n├ extension type: hook\n├ name: directus-extension-hook-sentry\n└ language: javascript\n```\n\n----------------------------------------\n\nTITLE: Configuring Session Cookie Authentication in Directus Plugin\nDESCRIPTION: This snippet shows how to switch from JSON to cookie-based authentication in the Directus plugin file. It requires changing the authentication method from 'json' to 'cookie'.\nSOURCE: https://github.com/directus/docs/blob/main/content/tutorials/1.getting-started/using-authentication-in-nuxt.md#2025-04-09_snippet_14\n\nLANGUAGE: typescript\nCODE:\n```\n-- .with(authentication(\"json\"))\n++ .with(authentication(\"cookie\"))\n```\n\n----------------------------------------\n\nTITLE: URL Configuration - Project Level\nDESCRIPTION: Root URL configuration including the blog app URLs.\nSOURCE: https://github.com/directus/docs/blob/main/content/tutorials/1.getting-started/fetch-data-from-directus-with-django.md#2025-04-09_snippet_15\n\nLANGUAGE: python\nCODE:\n```\nfrom django.urls import path, include\n\nurlpatterns = [\n    path('', include('blog.urls')),\n]\n```\n\n----------------------------------------\n\nTITLE: Implementing User Registration View in SwiftUI\nDESCRIPTION: Creates a user registration view with email and password fields. Handles form validation and sends POST requests to register new users. Includes error handling and alert displays for user feedback.\nSOURCE: https://github.com/directus/docs/blob/main/content/tutorials/1.getting-started/implement-directus-auth-with-ios.md#2025-04-09_snippet_1\n\nLANGUAGE: swift\nCODE:\n```\nimport SwiftUI\n\nstruct UserRegisterView: View {\n    @Binding var isActive: Bool\n    @State private var email: String = \"\"\n    @State private var password: String = \"\"\n    @State private var showAlert: Bool = false\n    @State private var alertMessage: String = \"\"\n    @Environment(\\.presentationMode) var presentationMode\n\n    var body: some View {\n        VStack {\n            TextField(\"Email\", text: $email)\n                .padding()\n                .textFieldStyle(RoundedBorderTextFieldStyle())\n            SecureField(\"Password\", text: $password)\n                .padding()\n                .textFieldStyle(RoundedBorderTextFieldStyle())\n\n            Button(\"Register\") {\n                registerUser()\n            }\n            .padding()\n            .alert(isPresented: $showAlert) {\n                Alert(title: Text(\"Error\"), message: Text(alertMessage), dismissButton: .default(Text(\"OK\")))\n            }\n        }\n        .padding()\n    }\n\n    func registerUser() {\n        guard !email.isEmpty, !password.isEmpty else {\n            alertMessage = \"Please enter both email and password\"\n            showAlert = true\n            return\n        }\n\n        guard let url = URL(string: \"https://your-directus-project-url/users/register\") else {\n            showAlert(message: \"Invalid URL\")\n            return\n        }\n\n        let body = [\n            \"email\": email,\n            \"password\": password\n        ]\n\n        guard let jsonData = try? JSONSerialization.data(withJSONObject: body) else {\n            showAlert(message: \"Failed to encode data\")\n            return\n        }\n\n        var request = URLRequest(url: url)\n        request.httpMethod = \"POST\"\n        request.setValue(\"application/json\", forHTTPHeaderField: \"Content-Type\")\n        request.httpBody = jsonData\n\n        URLSession.shared.dataTask(with: request) { data, response, error in\n            if let error = error {\n                showAlert(message: error.localizedDescription)\n                return\n            }\n\n            if let data = data {\n                if let responseString = String(data: data, encoding: .utf8) {\n                    print(\"Response: \\(responseString)\")\n                    DispatchQueue.main.async {\n                        presentationMode.wrappedValue.dismiss()\n                    }\n                } else {\n                    showAlert(message: \"Failed to parse response\")\n                }\n            } else {\n                showAlert(message: \"No data received\")\n            }\n        }.resume()\n    }\n\n    func showAlert(message: String) {\n        alertMessage = message\n        showAlert = true\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Fetching Recipient Data from Directus Collection\nDESCRIPTION: Constructs and executes an API query to fetch contact data using the configured collection, fields, and filters, then formats the results for display.\nSOURCE: https://github.com/directus/docs/blob/main/content/tutorials/5.extensions/send-sms-messages-with-twilio-in-custom-panels.md#2025-04-09_snippet_8\n\nLANGUAGE: javascript\nCODE:\n```\nasync function fetchResults() {\n\tfields.value = [props.phoneNumberField];\n\n\tif (props.displayTemplate != null) {\n\t\ttemplateFields.value = props.displayTemplate.match(/(\\{\\{[\\s]*.*?[\\s]*\\}\\})/g);\n\t}\n\n\tif (templateFields.value != null) {\n\t\ttemplateFields.value.forEach((field) => {\n\t\t\tfield = field.replace('{{ ', '').replace(' }}', '');\n\t\t\tfields.value.push(field);\n\t\t});\n\t}\n\n\ttry {\n\t\tcontacts.value = [];\n\n\t\tconst query = await api.get(`/items/${props.collection}`, {\n\t\t\tparams: {\n\t\t\t\tfields: fields.value,\n\t\t\t\tlimit: -1,\n\t\t\t\tfilter: props.filter,\n\t\t\t},\n\t\t});\n\n\t\tconst res = query.data.data;\n\n\t\tres.forEach((item) => {\n\t\t\tcontacts.value.push({\n\t\t\t\ttext: displayOutput(item),\n\t\t\t\tvalue: item[props.phoneNumberField],\n\t\t\t});\n\n\t\t\tif (props.batchSend) {\n\t\t\t\trecipients.value.push(item[props.phoneNumberField]);\n\t\t\t}\n\t\t});\n\t} catch (err) {\n\t\tconsole.warn(err);\n\t}\n}\n\nfetchResults();\n```\n\n----------------------------------------\n\nTITLE: Creating SvelteKit Page Component\nDESCRIPTION: Svelte component for rendering preview content with conditional preview mode indication.\nSOURCE: https://github.com/directus/docs/blob/main/content/tutorials/1.getting-started/implementing-live-preview-in-sveltekit.md#2025-04-09_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\n<script>\n  import { page } from \"$app/stores\";\n  import { onMount } from \"svelte\";\n\n  // Get the data from the load function automatically\n  export let data;\n  let post = data.post;\n  let preview = $page.url.searchParams.get(\"preview\") === \"true\";\n\n  onMount(() => {\n    console.log(\"page\", $page);\n    console.log(\"post\", post);\n  });\n</script>\n\n{#if post}\n  <article>\n    <h1>{post.title}</h1>\n    <p>Slug: {post.slug}</p>\n    <div>{@html post.content}</div>\n    {#if preview}\n      <p style=\"color:red;\">Preview Mode</p>\n    {/if}\n  </article>\n{:else}\n  <p>Loading...</p>\n{/if}\n```\n\n----------------------------------------\n\nTITLE: Displaying New Messages in Vue.js Component\nDESCRIPTION: This JavaScript and HTML snippet updates the Vue.js component to display new messages as they are received.\nSOURCE: https://github.com/directus/docs/blob/main/content/tutorials/2.projects/build-a-multi-user-chat-with-vue-js-and-directus-realtime.md#2025-04-09_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\nfunction receiveMessage() {\n  if (data.type == 'subscription' && data.event == 'create') {\n    addMessageToList(message.data[0]);\n  }\n}\n\nfunction addMessageToList(message) {\n  messageHistory.value.push(message);\n}\n```\n\nLANGUAGE: html\nCODE:\n```\n<ol>\n  <li v-for=\"message in messageHistory\" :key=\"message.id\">\n    {{ message.user_created.first_name }}: {{ message.text }}\n  </li>\n</ol>\n```\n\n----------------------------------------\n\nTITLE: Complete Proxy Endpoint Implementation in JavaScript\nDESCRIPTION: The complete implementation of the proxy endpoint extension, including schema definition, endpoint configuration, authentication, and request handling. This code creates a secure proxy to the PokéAPI that requires Directus authentication.\nSOURCE: https://github.com/directus/docs/blob/main/content/tutorials/5.extensions/proxy-an-external-api-in-a-custom-endpoint-extension.md#2025-04-09_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\nconst schema = {\n  collections: {\n    directus_users: {\n      collection: 'directus_users',\n      primary: 'id',\n      singleton: false,\n      accountability: 'all',\n      fields: {\n        id: {\n          field: 'id',\n          defaultValue: null,\n          nullable: false,\n          generated: false,\n          type: 'uuid',\n          dbType: 'uuid',\n          special: [],\n          alias: false\n        }\n      }\n    }\n  }\n};\nexport default {\n  id: 'pokeapi',\n  handler: (router, {services}) => {\n    router.get('/*', async (req, res) => {\n      try {\n        const user = req.accountability?.user;\n        const { ItemsService } = services;\n        const users = new ItemsService(\"directus_users\", {schema});\n        const authenticatedUser = await users.readOne(user);\n        if ( authenticatedUser == null) {\n          res.status(403);\n          return res.send(`You don't have permission to access this.`);\n        }\n\n        const response = await fetch(`https://pokeapi.co/api/v2/${req.url}`);\n\n        if (response.ok) {\n          res.json(await response.json());\n        } else {\n          res.status(response.status);\n          res.send(response.statusText);\n        }\n      } catch (error) {\n        res.status(500);\n        res.send(error.message);\n      }\n    });\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: Configuring Condition Rules for Published Content in Directus Flow\nDESCRIPTION: This JSON snippet defines the condition rules for a Directus Flow operation. It checks if the status of the triggered item is 'published'.\nSOURCE: https://github.com/directus/docs/blob/main/content/tutorials/7.workflows/trigger-netlify-site-builds-with-directus-automate.md#2025-04-09_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n\t\"$trigger\": {\n\t\t\"payload\": {\n\t\t\t\"status\": {\n\t\t\t\t\"_eq\": \"published\"\n\t\t\t}\n\t\t}\n\t}\n}\n```\n\n----------------------------------------\n\nTITLE: File Operations with FilesService in Directus\nDESCRIPTION: These snippets demonstrate various file operations using the FilesService in Directus, including importing, uploading, reading, updating, and deleting files. The upload operation requires the Busboy dependency.\nSOURCE: https://github.com/directus/docs/blob/main/content/guides/9.extensions/2.api-extensions/4.services.md#2025-04-09_snippet_9\n\nLANGUAGE: javascript\nCODE:\n```\nconst assetKey = await filesService.importOne({\n\turl: file_url,\n\tdata: file_object,\n});\n```\n\nLANGUAGE: javascript\nCODE:\n```\nimport Busboy from 'busboy'\n\nconst busboy = Busboy({ headers: req.headers });\n\nbusboy.on('file', async (_, fileStream, { filename, mimeType }) => {\n\tconst primaryKey = await filesService.uploadOne(fileStream, {\n\t\tfilename_download: filename,\n\t\ttype: mimeType,\n\t\tstorage: 'local',\n\t});\n});\n\nreq.pipe(busboy);\n```\n\nLANGUAGE: javascript\nCODE:\n```\nconst data = await filesService.readOne('file_id');\n```\n\nLANGUAGE: javascript\nCODE:\n```\nconst data = await filesService.updateOne('file_id', { title: 'Random' });\n```\n\nLANGUAGE: javascript\nCODE:\n```\nconst data = await filesService.deleteOne('file_id');\n```\n\n----------------------------------------\n\nTITLE: Displaying New Messages in React\nDESCRIPTION: These snippets handle the display of new messages, updating the state and rendering them in the UI.\nSOURCE: https://github.com/directus/docs/blob/main/content/tutorials/2.projects/build-a-multi-user-chat-with-react-and-directus-realtime.md#2025-04-09_snippet_9\n\nLANGUAGE: js\nCODE:\n```\nif (data.type == 'subscription' && data.event == 'create') {\n    addMessageToList(message.data[0]);\n  }\n```\n\nLANGUAGE: js\nCODE:\n```\nfunction addMessageToList(message) {\n  setMessageHistory([...messageHistory, message]);\n}\n```\n\nLANGUAGE: jsx\nCODE:\n```\n<ol>\n\t{messageHistory.map((message) => (\n\t\t<li key={message.id}>\n\t\t\t{message.user_created.first_name}: {message.text}\n\t\t</li>\n\t))}\n</ol>\n```\n\n----------------------------------------\n\nTITLE: Configuring Condition Rules for Published Status in Directus Flow\nDESCRIPTION: This JSON snippet defines the condition rules for checking if an article's status is 'published' within a Directus flow operation. It's used to prevent unnecessary builds when content is not in a published state.\nSOURCE: https://github.com/directus/docs/blob/main/content/tutorials/7.workflows/trigger-vercel-site-builds-with-directus-automate.md#2025-04-09_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n\t\"$trigger\": {\n\t\t\"payload\": {\n\t\t\t\"status\": {\n\t\t\t\t\"_eq\": \"published\"\n\t\t\t}\n\t\t}\n\t}\n}\n```\n\n----------------------------------------\n\nTITLE: Vue Template for Vonage Activity Data Table\nDESCRIPTION: This Vue template creates a table to display Vonage activity data, including conditional rendering based on message direction and included information.\nSOURCE: https://github.com/directus/docs/blob/main/content/tutorials/5.extensions/display-external-api-data-from-vonage-in-custom-panels.md#2025-04-09_snippet_10\n\nLANGUAGE: vue\nCODE:\n```\n<table cellpadding=\"0\" cellspacing=\"0\" border=\"0\">\n  <thead>\n    <tr>\n      <th v-if=\"direction == 'outbound'\">Status</th>\n      <th v-if=\"direction == 'outbound'\">Sent</th>\n      <th v-else>Received</th>\n      <th v-if=\"includeMessage\">Message</th>\n      <th v-if=\"direction == 'outbound'\">Recipient</th>\n      <th v-else>From</th>\n      <th>Provider</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr v-for=\"message in activityData\" :key=\"message.message_id\">\n      <td v-if=\"direction == 'outbound'\" class=\"ucwords\">{{ message.status }}</td>\n      <td class=\"nowrap\">\n        {{ formatDistanceToNow(parseISO(message.date_finalized ? message.date_finalized : message.date_received)) }} ago\n      </td>\n      <td v-if=\"includeMessage\" class=\"message\">{{ message.message_body }}</td>\n      <td v-if=\"direction == 'outbound'\">{{ message.to }}</td>\n      <td v-else>{{ message.from }}</td>\n      <td class=\"ucwords\">{{ type == 'MESSAGES' ? message.provider : message.network_name }}</td>\n    </tr>\n  </tbody>\n</table>\n```\n\n----------------------------------------\n\nTITLE: Configuring Directus SDK in Astro\nDESCRIPTION: TypeScript code to set up the Directus SDK in the Astro project. This creates a client for interacting with the Directus API and exports necessary functions.\nSOURCE: https://github.com/directus/docs/blob/main/content/tutorials/1.getting-started/implementing-live-preview-in-astro.md#2025-04-09_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nimport { createDirectus, rest, readItems, readItem, withToken } from '@directus/sdk';\n\nconst DIRECTUS_URL = import.meta.env.YOUR_DIRECTUS_URL;\nconst client = createDirectus(DIRECTUS_URL as string).with(rest());\n\nexport  {client, readItems, readItem, withToken };\n```\n\n----------------------------------------\n\nTITLE: Vue Component with Directus Authentication and Post Management\nDESCRIPTION: This Vue component showcases the implementation of Directus authentication, post listing, and deletion. It includes error handling, user authentication checks, and a logout button.\nSOURCE: https://github.com/directus/docs/blob/main/content/tutorials/1.getting-started/using-authentication-in-nuxt.md#2025-04-09_snippet_24\n\nLANGUAGE: vue\nCODE:\n```\n<script setup lang=\"ts\">\nconst { $directus, $readItems, $logout, $isAuthenticated } = useNuxtApp()\nimport { deleteItem } from '@directus/sdk'\nconst deleteSuccessful = ref(false)\n\nconst { data, error } = await useAsyncData('post', async () => {\n\ttry {\n\t\treturn await $directus.request(\n\t\t\t$readItems('posts', {\n\t\t\t\tfields: ['id', 'title', 'content', 'user_created']\n\t\t\t})\n\t\t)\n\t} catch (error) {\n\t\tconsole.error(error)\n\t}\n})\n\nconst authUser = await $isAuthenticated()\nif (authUser === false) {\n\tthrow new Error('Not authenticated')\n}\n\nconst deletePost = async (id: number | string) => {\n\ttry {\n\t\tawait $directus.request(\n\t\t\tdeleteItem('posts', id)\n\t\t)\n\t\tdata.value = data.value?.filter(post => post.id !== id)\n\t\tdeleteSuccessful.value = true\n\t} catch (error) {\n\t\tconsole.error(error)\n\t}\n}\n</script>\n<template>\n\t<h1>Posts</h1>\n\t<p v-if=\"deleteSuccessful\">Post deleted successfully</p>\n\t<div v-for=\"post in data\">\n\t\t<h2>{{ post.title }}</h2>\n\t\t<button v-if=\"authUser.id === post.user_created\" @click=\"deletePost(post.id)\">Delete</button>\n\t\t<hr />\n\t</div>\n\t<button @click=\"$logout()\">Logout</button>\n</template>\n```\n\n----------------------------------------\n\nTITLE: Initializing Directus Extension Module\nDESCRIPTION: Command to create a new Directus extension module using npx.\nSOURCE: https://github.com/directus/docs/blob/main/content/tutorials/5.extensions/implement-navigation-in-multipage-custom-modules.md#2025-04-09_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nnpx create-directus-extension@latest\n```\n\n----------------------------------------\n\nTITLE: Implementing Confirmation Sheet in Vue\nDESCRIPTION: This Vue component creates a confirmation sheet that displays the message content and recipient count. It includes buttons for canceling, confirming, and completing the SMS sending process.\nSOURCE: https://github.com/directus/docs/blob/main/content/tutorials/5.extensions/send-sms-messages-with-twilio-in-custom-panels.md#2025-04-09_snippet_22\n\nLANGUAGE: vue\nCODE:\n```\n<v-sheet v-if=\"recipients != undefined\">\n\t<h2 v-if=\"smsSent === 0\" class=\"sms-confirm\">\n\t\tSend the following message to {{ recipients.length }} recipients?\n\t</h2>\n\t<blockquote v-if=\"smsSent === 0\" class=\"sms-message\" v-text=\"message ?? customMessage\"></blockquote>\n\t<!-- Notices goes here -->\n\t<div class=\"sms-actions\">\n\t\t<v-button v-if=\"smsSent === 0\" secondary @click=\"smsConfirmation = false\">Cancel</v-button>\n\t\t<v-button v-if=\"smsSent === 0\" @click=\"sendSms()\">Confirm</v-button>\n\t\t<v-button\n\t\t\tv-if=\"smsSent > 0\"\n\t\t\t@click=\"\n\t\t\t\tsmsConfirmation = false;\n\t\t\t\tresetSms();\n\t\t\t\"\n\t\t>\n\t\t\tDone\n\t\t</v-button>\n\t</div>\n</v-sheet>\n```\n\n----------------------------------------\n\nTITLE: Creating an Astro project with npm\nDESCRIPTION: Command to initialize a new Astro project named 'astro-live-preview' using npm. This sets up the basic structure for the Astro application.\nSOURCE: https://github.com/directus/docs/blob/main/content/tutorials/1.getting-started/implementing-live-preview-in-astro.md#2025-04-09_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nnpm create astro@latest astro-live-preview\n```\n\n----------------------------------------\n\nTITLE: Configuring Directus SDK Client in Next.js\nDESCRIPTION: Sets up a Directus client using the SDK with cookie-based authentication for server-side rendering applications.\nSOURCE: https://github.com/directus/docs/blob/main/content/tutorials/1.getting-started/using-authentication-in-next-js.md#2025-04-09_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nimport { authentication, createDirectus, rest } from '@directus/sdk';\n\nconst client = createDirectus(\"http://localhost:8055\").with(rest()).with(authentication(\"cookie\", { credentials: \"include\" }));\n\nexport default client;\n```\n\n----------------------------------------\n\nTITLE: Checking Image File Type Condition in Directus Flow\nDESCRIPTION: JSON condition to verify if the uploaded file is an image by checking if the file type contains 'image' in its MIME type.\nSOURCE: https://github.com/directus/docs/blob/main/content/tutorials/7.workflows/tag-images-with-clarifai-and-directus-automate.md#2025-04-09_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n\t\"$trigger\": {\n    \t\"payload\": {\n        \t\"type\": {\n            \t\"_contains\": \"image\"\n            }\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Vue Component Page Props Configuration\nDESCRIPTION: Props configuration for handling page routing parameters.\nSOURCE: https://github.com/directus/docs/blob/main/content/tutorials/5.extensions/implement-navigation-in-multipage-custom-modules.md#2025-04-09_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nprops: {\n  page: {\n    type: String,\n    default: null,\n  },\n},\n```\n\n----------------------------------------\n\nTITLE: Running SvelteKit Development Server\nDESCRIPTION: Command to start the SvelteKit development server for testing the application locally.\nSOURCE: https://github.com/directus/docs/blob/main/content/tutorials/2.projects/build-forms-dynamically-using-directus-and-sveltekit.md#2025-04-09_snippet_9\n\nLANGUAGE: bash\nCODE:\n```\nnpm run dev\n```\n\n----------------------------------------\n\nTITLE: Subscribing to Collection Changes via WebSocket in JSON\nDESCRIPTION: Send a JSON message over WebSocket to subscribe to changes in a specific collection. This snippet shows how to initialize a subscription and receive a confirmation message.\nSOURCE: https://github.com/directus/docs/blob/main/content/guides/7.realtime/2.subscriptions.md#2025-04-09_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n\t\"type\": \"subscribe\",\n\t\"collection\": \"messages\"\n}\n```\n\nLANGUAGE: json\nCODE:\n```\n{\n\t\"type\": \"subscription\",\n\t\"event\": \"init\"\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Directus Display Extension Definition\nDESCRIPTION: Main extension configuration file that defines the display component properties, options, and field types. Includes logic for handling relational fields and generating configuration options based on collection fields.\nSOURCE: https://github.com/directus/docs/blob/main/content/tutorials/5.extensions/summarize-relational-items-in-a-custom-display-extension.md#2025-04-09_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nimport DisplayComponent from './display.vue';\nimport { useStores } from '@directus/extensions-sdk';\n\nexport default {\n\tid: 'directus-display-count-sum',\n\tname: 'Count or Sum Column',\n\ticon: '123',\n\tdescription: 'Count the related records or display the sum of the select column',\n\tcomponent: DisplayComponent,\n\toptions: ({ editing, relations }) => {\n\t\tconst relatedCollection =\n\t\t\trelations.o2m?.meta.junction_field != null ? relations.m2o?.related_collection : relations.o2m?.collection;\n\n\t\tconst junction_table = relations.o2m?.meta.junction_field != null ? relations.o2m?.collection : null;\n\t\tconst { useFieldsStore } = useStores();\n\t\tconst fieldsStore = useFieldsStore();\n\n\t\tif (editing === '+') {\n\t\t\tconst displayTemplateMeta = {\n\t\t\t\tinterface: 'presentation-notice',\n\t\t\t\toptions: {\n\t\t\t\t\ttext: 'Please complete the field before attempting to configure the display.',\n\t\t\t\t},\n\t\t\t\twidth: 'full',\n\t\t\t};\n\t\t} else {\n\t\t\tconst fields = fieldsStore.getFieldsForCollection(relatedCollection);\n\t\t\tconst field_choices = [];\n\n\t\t\tfields.forEach((field) => {\n\t\t\t\tfield_choices.push({\n\t\t\t\t\ttext: field.meta.field,\n\t\t\t\t\tvalue: junction_table ? `${relations.o2m.meta.junction_field}.${field.meta.field}` : field.meta.field,\n\t\t\t\t});\n\t\t\t});\n\n\t\t\tconst displayTemplateMeta = {\n\t\t\t\tinterface: 'select-dropdown',\n\t\t\t\toptions: {\n\t\t\t\t\tchoices: field_choices,\n\t\t\t\t},\n\t\t\t\twidth: 'full',\n\t\t\t};\n\t\t}\n\n\t\treturn [\n\t\t\t{\n\t\t\t\tfield: 'column',\n\t\t\t\tname: 'Choose a column',\n\t\t\t\tmeta: displayTemplateMeta,\n\t\t\t},\n\t\t\t{\n\t\t\t\tfield: 'sum',\n\t\t\t\ttype: 'boolean',\n\t\t\t\tname: 'Calulate Sum',\n\t\t\t\tmeta: {\n\t\t\t\t\tinterface: 'boolean',\n\t\t\t\t\toptions: {\n\t\t\t\t\t\tlabel: 'Yes',\n\t\t\t\t\t},\n\t\t\t\t\twidth: 'half',\n\t\t\t\t},\n\t\t\t},\n\t\t\t{\n\t\t\t\tfield: 'prefix',\n\t\t\t\ttype: 'string',\n\t\t\t\tname: 'Prefix',\n\t\t\t\tmeta: {\n\t\t\t\t\tinterface: 'input',\n\t\t\t\t\toptions: {\n\t\t\t\t\t\tfont: 'monospace',\n\t\t\t\t\t},\n\t\t\t\t\twidth: 'half',\n\t\t\t\t},\n\t\t\t},\n\t\t\t{\n\t\t\t\tfield: 'suffix',\n\t\t\t\ttype: 'string',\n\t\t\t\tname: 'Suffix',\n\t\t\t\tmeta: {\n\t\t\t\t\tinterface: 'input',\n\t\t\t\t\toptions: {\n\t\t\t\t\t\tfont: 'monospace',\n\t\t\t\t\t},\n\t\t\t\t\twidth: 'half',\n\t\t\t\t},\n\t\t\t},\n\t\t];\n\t},\n\ttypes: ['alias', 'string', 'uuid', 'integer', 'bigInteger', 'json'],\n\tlocalTypes: ['m2m', 'm2o', 'o2m', 'translations', 'm2a', 'file', 'files'],\n\tfields: (options) => {\n\t\treturn [options.column];\n\t},\n};\n```\n\n----------------------------------------\n\nTITLE: Using useApi() Composable for API Requests in Vue\nDESCRIPTION: The useApi composable wraps the axios library and handles session authentication and concurrency control when making API requests from Directus app extensions.\nSOURCE: https://github.com/directus/docs/blob/main/content/guides/9.extensions/3.app-extensions/8.composables.md#2025-04-09_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<script setup>\nimport { useApi } from '@directus/extensions-sdk';\nconst api = useApi();\n\nasync function fetchData() {\n    const response = await api.get('ENDPOINT_URL');\n    data.value = response.data;\n};\n</script>\n```\n\n----------------------------------------\n\nTITLE: Creating Items via WebSocket\nDESCRIPTION: Example of creating new items in a collection using WebSockets. Requires collection name and data object.\nSOURCE: https://github.com/directus/docs/blob/main/content/guides/7.realtime/3.actions.md#2025-04-09_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n\t\"type\": \"items\",\n\t\"action\": \"create\",\n\t\"collection\": \"your_collection_name\",\n\t\"data\": {\n\t\t// ...\n\t}\n}\n```\n\nLANGUAGE: json\nCODE:\n```\n{\n\t\"type\": \"items\",\n\t\"data\": {\n\t\t// ...\n\t}\n}\n```\n\n----------------------------------------\n\nTITLE: Authentication Check Implementation\nDESCRIPTION: Function to verify user authentication status by attempting to fetch user information using Directus client.\nSOURCE: https://github.com/directus/docs/blob/main/content/tutorials/1.getting-started/using-authentication-in-sveltekit.md#2025-04-09_snippet_9\n\nLANGUAGE: javascript\nCODE:\n```\nimport { readMe } from \"@directus/sdk\";\n\nexport const isAuthenticated = async () => {\n  try {\n    const user = await client.request(readMe());\n    return { authenticated: !!user?.id, user };\n  } catch (error) {\n    console.error(\"Error checking authentication:\", error);\n    return { authenticated: false, user: null };\n  }\n};\n```\n\n----------------------------------------\n\nTITLE: Installing Dependencies for Directus Docs\nDESCRIPTION: Command to install project dependencies using pnpm package manager. Requires Node.js 20 and pnpm to be installed.\nSOURCE: https://github.com/directus/docs/blob/main/README.md#2025-04-09_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\npnpm install\n```\n\n----------------------------------------\n\nTITLE: Implementing API Handler for Notify on Event Operation in TypeScript\nDESCRIPTION: This snippet defines the API handler for the 'notify_on_event' operation. It processes incoming events, filters them based on configured event types, and sends email notifications using the MailService.\nSOURCE: https://github.com/directus/docs/blob/main/content/tutorials/3.tips-and-tricks/build-a-monitoring-pipeline-for-flows-and-extensions-.md#2025-04-09_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\nimport { defineOperationApi } from '@directus/extensions-sdk';\n\ntype Options = {\n\tto: string[];\n\tevents: string[];\n};\n\nexport default defineOperationApi<Options>({\n\tid: 'notify_on_event',\n\thandler: async ({ to, events }, { getSchema, database, services, accountability, logger, data }) => {\n\t\tconst trigger: any = data.$trigger;\n\n\t\tconst payload = trigger.payload;\n\t\tif (!events.includes(payload.event_name)) {\n\t\t\treturn;\n\t\t}\n\n\t\tpayload.meta = liquifyMeta(payload.meta);\n\n\t\tconst schema = await getSchema({ database });\n\t\tconst context = {database: database, schema: schema, accountability: accountability};\n\n\t\tconst { MailService } = services;\n        const mailService = new MailService({ schema: context.schema, knex: context.database });\n\n\t\tawait mailService.send({\n\t\t\tto: to,\n\t\t\tsubject: `Directus Event - ${payload.event_name}`,\n\t\t\ttemplate: {\n\t\t\t\tname: 'event-notification',\n\t\t\t\tdata: payload,\n\t\t\t},\n\t\t});\n\t},\n});\n\nfunction liquifyMeta(meta: Object) {\n\tconst ret = [];\n\tfor (const [key, value] of Object.entries(meta)) {\n\t\tret.push({'key': key, 'value': JSON.stringify(value)});\n\t}\n\treturn ret;\n}\n```\n\n----------------------------------------\n\nTITLE: Styling Twilio SMS Panel with CSS\nDESCRIPTION: This CSS code provides styling for the Twilio SMS panel, including layout, spacing, and custom styles for various elements such as the message box and action buttons.\nSOURCE: https://github.com/directus/docs/blob/main/content/tutorials/5.extensions/send-sms-messages-with-twilio-in-custom-panels.md#2025-04-09_snippet_24\n\nLANGUAGE: vue\nCODE:\n```\n<style scoped>\n.twilio-sms {\n\theight: 100%;\n\tdisplay: flex;\n\tflex-direction: column;\n\tjustify-content: space-between;\n\tpadding: 0 1em 1em;\n}\n\n.custom-message {\n\tflex-grow: 1;\n\tmargin: 1em 0;\n\tmax-height: none;\n}\n\n.sms-confirm {\n\tfont-weight: bold;\n\tfont-size: 1.3em;\n}\n\n.sms-message {\n\tpadding: var(--theme--form--field--input--padding);\n\tborder-radius: var(--theme--border-radius);\n\tborder: var(--theme--border-width) solid var(--theme--form--field--input--border-color);\n\tmargin: 1em 0;\n}\n\n.sms-actions {\n\ttext-align: right;\n}\n\n.sms-notice {\n\tmargin: 0 1em;\n}\n</style>\n```\n\n----------------------------------------\n\nTITLE: Creating Hero Component in Svelte\nDESCRIPTION: Defines a Svelte component for rendering a hero section with dynamic content from Directus.\nSOURCE: https://github.com/directus/docs/blob/main/content/tutorials/1.getting-started/rendering-dynamic-blocks-using-sveltekit.md#2025-04-09_snippet_4\n\nLANGUAGE: svelte\nCODE:\n```\n<!--src/lib/components/Hero.svelte-->\n<script>\n  export let data;\n</script>\n\n<section class=\"hero\">\n  <div class=\"text\">\n      <h1>{data.headline}</h1>\n      <p>{@html data.content.replace(/<\\/?p>/g, '')}</p>\n      <div class=\"buttons\">\n          {#each data.buttons as button}\n              <a href={button.href} class=\"btn {button.variant}\">{button.label}</a>\n          {/each}\n      </div>\n  </div>\n</section>\n\n<style>\n  .hero {\n      display: flex;\n      align-items: center;\n      justify-content: space-between;\n      padding: 2rem;\n      background: #f5f5f5;\n  }\n  .text {\n      max-width: 50%;\n  }\n  .buttons a {\n      margin-right: 10px;\n      padding: 10px 20px;\n      border-radius: 5px;\n      text-decoration: none;\n  }\n  .primary {\n      background: blue;\n      color: white;\n  }\n</style>\n```\n\n----------------------------------------\n\nTITLE: Setting Environment Variables for Meilisearch in Directus\nDESCRIPTION: Environment variables needed to connect to Meilisearch from Directus. These variables store the Meilisearch host URL and API key for authentication.\nSOURCE: https://github.com/directus/docs/blob/main/content/tutorials/5.extensions/integrate-meilisearch-indexing-with-custom-hooks.md#2025-04-09_snippet_0\n\nLANGUAGE: dockerfile\nCODE:\n```\nMEILISEARCH_HOST=your_meilisearch_host\nMEILISEARCH_API_KEY=your_meilisearch_api_key\n```\n\n----------------------------------------\n\nTITLE: Complete Twilio API Implementation\nDESCRIPTION: Full implementation of the operation's backend logic including Twilio client initialization and message sending\nSOURCE: https://github.com/directus/docs/blob/main/content/tutorials/5.extensions/send-sms-messages-with-twilio-in-custom-operations.md#2025-04-09_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nimport twilio from 'twilio';\n\nexport default {\n\tid: 'operation-twilio-sms',\n\thandler: ({ phone_number: toNumber, message }, { env }) => {\n\t\tconst accountSid = env.TWILIO_ACCOUNT_SID;\n\t\tconst authToken = env.TWILIO_AUTH_TOKEN;\n\t\tconst fromNumber = env.TWILIO_PHONE_NUMBER;\n\t\tconst client = new twilio(accountSid, authToken);\n\n\t\tclient.messages\n\t\t\t.create({\n\t\t\t\tbody: message,\n\t\t\t\tto: toNumber,\n\t\t\t\tfrom: fromNumber,\n\t\t\t})\n\t\t\t.then((response) => {\n\t\t\t\treturn response;\n\t\t\t})\n\t\t\t.catch((error) => {\n\t\t\t\treturn error;\n\t\t\t});\n\t},\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a Next.js Project with Directus SDK\nDESCRIPTION: Bash commands to create a new Next.js project and install the Directus SDK. These commands set up the base structure for the chat application.\nSOURCE: https://github.com/directus/docs/blob/main/content/tutorials/2.projects/build-a-realtime-chat-app-with-directus-and-next.md#2025-04-09_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nnpx create-next-app \\\n  directus-next-chat \\\n  --js \\\n  --app \\\n  --eslint \\\n  --no-src-dir \\\n  --no-tailwind \\\n  --turbopack \\\n  --import-alias \"@/*\"\n```\n\nLANGUAGE: bash\nCODE:\n```\ncd directus-next-chat\nnpm i @directus/sdk\n```\n\n----------------------------------------\n\nTITLE: Implementing Chat UI Template in SvelteKit\nDESCRIPTION: This code snippet provides the UI template for a chat application, including a login form and a real-time chat interface that displays messages and handles user input. The template switches between these views based on the user's authentication status.\nSOURCE: https://github.com/directus/docs/blob/main/content/tutorials/2.projects/build-a-realtime-chat-app-with-directus-and-sveltekit.md#2025-04-09_snippet_8\n\nLANGUAGE: javascript\nCODE:\n```\n<div class=\"container-center\">\n  {#if !loggedIn}\n  <div class=\"card\">\n    <h2>Login</h2>\n    <form on:submit=\"{login}\">\n      <div class=\"form-group\">\n        <label>Email</label>\n        <input type=\"email\" bind:value=\"{email}\" required />\n      </div>\n      <div class=\"form-group\">\n        <label>Password</label>\n        <input type=\"password\" bind:value=\"{password}\" required />\n      </div>\n      <button type=\"submit\">Login</button>\n    </form>\n  </div>\n  {:else}\n  <div class=\"chat-container\">\n    <div class=\"chat-header\">\n      Chat Room\n      <span\n        class=\"connection-status {websocketConnected ? 'connected' : 'disconnected'}\"\n      >\n        {websocketConnected ? \"• Connected\" : \"• Disconnected\"}\n      </span>\n    </div>\n    <div class=\"chat-body\">\n      <ul class=\"list-unstyled\">\n        {#each messages as msg (msg.id)}\n        <li class=\"message {msg.user === 'You' ? 'user' : 'other'}\">\n          <strong>{msg.user}</strong>: {msg.content}\n        </li>\n        {/each}\n      </ul>\n    </div>\n    <div class=\"chat-footer\">\n      <form on:submit=\"{sendMessage}\">\n        <input\n          type=\"text\"\n          bind:value=\"{messageContent}\"\n          placeholder=\"Type a message...\"\n          required\n          disabled=\"{!websocketConnected}\"\n        />\n        <button type=\"submit\" disabled=\"{!websocketConnected}\">Send</button>\n      </form>\n    </div>\n  </div>\n  {/if}\n</div>\n```\n\n----------------------------------------\n\nTITLE: Configuring Vonage SMS Panel Options in JavaScript\nDESCRIPTION: Defines the panel configuration including ID, name, icon, and customizable options for filtering SMS activity. Includes settings for message type, direction, date range, message inclusion, and status filtering.\nSOURCE: https://github.com/directus/docs/blob/main/content/tutorials/5.extensions/display-external-api-data-from-vonage-in-custom-panels.md#2025-04-09_snippet_13\n\nLANGUAGE: javascript\nCODE:\n```\nimport PanelComponent from './panel.vue';\n\nexport default {\n  id: 'panel-vonage-sms-activity',\n  name: 'Vonage Reports',\n  icon: 'list_alt',\n  description: 'View recent SMS activity.',\n  component: PanelComponent,\n  options: [\n    {\n      field: 'type',\n      name: 'Product Type',\n      type: 'string',\n      meta: {\n        width: 'half',\n        interface: 'select-dropdown',\n        options: {\n          choices: [\n            { text: 'SMS', value: 'SMS' },\n            { text: 'Messages', value: 'MESSAGES' },\n          ],\n        },\n      },\n    },\n    {\n      field: 'direction',\n      name: 'Direction',\n      type: 'string',\n      meta: {\n        width: 'half',\n        interface: 'select-dropdown',\n        options: {\n          choices: [\n            { text: 'Outbound', value: 'outbound' },\n            { text: 'Inbound', value: 'inbound' },\n          ],\n        },\n      },\n    },\n    {\n      field: 'range',\n      type: 'dropdown',\n      name: '$t:date_range',\n      schema: {\n        default_value: '1 day',\n      },\n      meta: {\n        interface: 'select-dropdown',\n        width: 'half',\n        options: {\n          choices: [\n            { text: 'Past 5 Minutes', value: '5 minutes' },\n            { text: 'Past 15 Minutes', value: '15 minutes' },\n            { text: 'Past 30 Minutes', value: '30 minutes' },\n            { text: 'Past 1 Hour', value: '1 hour' },\n            { text: 'Past 4 Hours', value: '4 hours' },\n            { text: 'Past 1 Day', value: '1 day' },\n            { text: 'Past 2 Days', value: '2 days' },\n          ],\n        },\n      },\n    },\n    {\n      field: 'includeMessage',\n      name: 'Include Message',\n      type: 'boolean',\n      meta: {\n        interface: 'boolean',\n        width: 'half',\n      },\n      schema: {\n        default_value: false,\n      },\n    },\n    {\n      field: 'status',\n      name: 'Status',\n      type: 'string',\n      schema: {\n        default_value: 'any',\n      },\n      meta: {\n        width: 'half',\n        interface: 'select-dropdown',\n        options: {\n          choices: [\n            { text: 'Any', value: 'any' },\n            { text: 'Delivered', value: 'delivered' },\n            { text: 'Expired', value: 'expired' },\n            { text: 'Failed', value: 'failed' },\n            { text: 'Rejected', value: 'rejected' },\n            { text: 'Accepted', value: 'accepted' },\n            { text: 'buffered', value: 'buffered' },\n            { text: 'Unknown', value: 'unknown' },\n            { text: 'Deleted', value: 'deleted' },\n          ],\n        },\n      },\n    },\n  ],\n  minWidth: 24,\n  minHeight: 18,\n};\n```\n\n----------------------------------------\n\nTITLE: Configuring CORS for Directus in Docker Compose\nDESCRIPTION: YAML configuration to set the content security policy for Directus, allowing access from a Next.js app. This is necessary for cross-origin resource sharing between Directus and the frontend application.\nSOURCE: https://github.com/directus/docs/blob/main/content/tutorials/2.projects/build-a-realtime-chat-app-with-directus-and-next.md#2025-04-09_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\nenvironment:\n  CONTENT_SECURITY_POLICY_DIRECTIVES__FRAME_SRC: your-website-url\n```\n\n----------------------------------------\n\nTITLE: Building Directus Extension\nDESCRIPTION: Use npm to build the Directus extension after implementing the display logic.\nSOURCE: https://github.com/directus/docs/blob/main/content/tutorials/5.extensions/summarize-relational-items-in-a-custom-display-extension.md#2025-04-09_snippet_4\n\nLANGUAGE: shell\nCODE:\n```\nnpm run build\n```\n\n----------------------------------------\n\nTITLE: Homepage Template\nDESCRIPTION: HTML template for the homepage displaying global title and description.\nSOURCE: https://github.com/directus/docs/blob/main/content/tutorials/1.getting-started/fetch-data-from-directus-with-django.md#2025-04-09_snippet_6\n\nLANGUAGE: html\nCODE:\n```\n<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <title>{{ title }}</title>\n</head>\n<body>\n    <header>\n        <h1>{{ title }}</h1>\n    </header>\n    <main>\n        <p>{{ description }}</p>\n    </main>\n</body>\n</html>\n```\n\n----------------------------------------\n\nTITLE: Retrieving Email and Password from Login Form\nDESCRIPTION: Extracts the user's email and password values from the login form. These credentials will be used to authenticate with the Directus server.\nSOURCE: https://github.com/directus/docs/blob/main/content/tutorials/2.projects/build-a-multi-user-chat-with-javascript-and-directus-realtime.md#2025-04-09_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nconst email = event.target.elements.email.value;\nconst password = event.target.elements.password.value;\n```\n\n----------------------------------------\n\nTITLE: Blog Post Template\nDESCRIPTION: Template for individual blog post pages with image handling\nSOURCE: https://github.com/directus/docs/blob/main/content/tutorials/1.getting-started/fetch-data-from-directus-with-eleventy-3.md#2025-04-09_snippet_9\n\nLANGUAGE: html\nCODE:\n```\n---\nlayout: layouts/base.njk\npagination:\n    data: posts\n    size: 1\n    alias: post\npermalink: \"blog/{{ post.slug }}/index.html\"\neleventyComputed:\n    title: \"{{ post.title }}\"\n---\n\n<img src=\"{{ directus.url }}assets/{{ post.image }}?width=600\" />\n<h1>{{ title }}</h1>\n{{ post.content | safe }}\n```\n\n----------------------------------------\n\nTITLE: Setting Up Reactive Variables for Vonage Panel\nDESCRIPTION: This snippet initializes reactive variables using Vue's composition API for managing the Vonage activity data, loading state, and error handling.\nSOURCE: https://github.com/directus/docs/blob/main/content/tutorials/5.extensions/display-external-api-data-from-vonage-in-custom-panels.md#2025-04-09_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nsetup(props) {\n  const api = useApi();\n  const activityData = ref([]);\n  const now = ref(new Date());\n  const isLoading = ref(true);\n  const errorMessage = ref();\n},\n```\n\n----------------------------------------\n\nTITLE: Creating a Dynamic Slug-based Post Page in Nuxt\nDESCRIPTION: Vue component that fetches and displays a post based on the URL slug parameter, implementing error handling and TypeScript typing.\nSOURCE: https://github.com/directus/docs/blob/main/content/tutorials/1.getting-started/implementing-live-preview-in-nuxt.md#2025-04-09_snippet_10\n\nLANGUAGE: vue\nCODE:\n```\n<script setup lang=\"ts\">\nconst { $directus, $readItems } = useNuxtApp()\nconst route = useRoute()\nconst post: Ref<Post | null> = ref(null)\n\nconst { data, error } = await useAsyncData('post', async () => {\n\tconst slugParam = Array.isArray(route.params.slug) ? route.params.slug[0] : route.params.slug\n\treturn $directus.request($readItems('posts', {\n\t\tfilter: {\n\t\t\tslug: { _eq: slugParam }\n\t\t},\n\t\tfields: ['id', 'title', 'content', 'slug', 'published'],\n\t\tlimit: 1\n\t}))\n})\n\nif (error.value || data.value === null) {\n\tconsole.error(error)\n\tthrow createError({\n\t\tstatusCode: 404,\n\t\tstatusMessage: \"Post not found\"\n\t})\n}\n\npost.value = data.value[0]\n</script>\n<template>\n\t<div v-if=\"post\">\n\t\t<h1>{{ post.title }}</h1>\n\t\t<p>{{ post.content }}</p>\n\t</div>\n\t<div v-else>Loading...</div>\n</template>\n```\n\n----------------------------------------\n\nTITLE: Generating Item Detail Links\nDESCRIPTION: Function to create URL links for newly created items, constructing the path based on collection name and primary key. This facilitates navigation to the new item's detail page after creation.\nSOURCE: https://github.com/directus/docs/blob/main/content/tutorials/5.extensions/create-collection-items-in-custom-panels.md#2025-04-09_snippet_10\n\nLANGUAGE: javascript\nCODE:\n```\nfunction getLinkForItem(item) {\n  if (item === undefined) return;\n  const primaryKey = item[primaryKeyField.value.field];\n  return `/content/${props.collection}/${encodeURIComponent(primaryKey)}`;\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Directus Websockets in Docker\nDESCRIPTION: Docker compose configuration to enable realtime websockets functionality in Directus.\nSOURCE: https://github.com/directus/docs/blob/main/content/tutorials/2.projects/build-a-realtime-chat-app-using-directus-and-nuxt.md#2025-04-09_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nenvironment:\n  WEBSOCKETS_ENABLED: \"true\"\n  WEBSOCKETS_HEARTBEAT_ENABLED: \"true\"\n```\n\n----------------------------------------\n\nTITLE: Authenticating Directus Requests with Session Cookies\nDESCRIPTION: This snippet explains that when using session cookies for authentication in Directus, no additional configuration is needed. The session token is automatically used.\nSOURCE: https://github.com/directus/docs/blob/main/content/_partials/authentication.md#2025-04-09_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\nYou do not need to set anything. The `directus_session_token` is used automatically.\n```\n\n----------------------------------------\n\nTITLE: Implementing Real-time Chat with Directus SDK in HTML/JavaScript\nDESCRIPTION: A complete chat application implementation that includes a login form, message input form, and real-time message display. The code demonstrates Directus SDK integration for authentication, WebSocket connections, message subscription, and real-time updates. It uses the @directus/sdk package and implements event listeners for form submissions and message handling.\nSOURCE: https://github.com/directus/docs/blob/main/content/tutorials/2.projects/build-a-multi-user-chat-with-javascript-and-directus-realtime.md#2025-04-09_snippet_17\n\nLANGUAGE: html\nCODE:\n```\n<!DOCTYPE html>\n<html>\n  <body>\n    <form id=\"login\">\n      <label for=\"email\">Email</label>\n      <input type=\"email\" id=\"email\" />\n      <label for=\"password\">Password</label>\n      <input type=\"password\" id=\"password\" />\n      <input type=\"submit\" />\n    </form>\n\n    <ol></ol>\n\n    <form id=\"new\">\n      <label for=\"message\">Message</label>\n      <input type=\"text\" id=\"text\" />\n      <input type=\"submit\" />\n    </form>\n\n    <script>\n      import {\n        createDirectus,\n        authentication,\n        realtime,\n      } from 'https://www.unpkg.com/@directus/sdk/dist/index.js';\n\n      const url = 'https://your-directus-url';\n\n      const client = createDirectus(url)\n        .with(authentication())\n        .with(realtime());\n\n      client.onWebSocket('message', function (data) {\n        if (data.type == 'auth' && data.status == 'ok') {\n          readAllMessages();\n          subscribe('create');\n        }\n\n        if (data.type == 'items') {\n          for (const item of data.data) {\n            addMessageToList(item);\n          }\n        }\n      });\n\n      client.connect();\n\n      document\n        .querySelector('#login')\n        .addEventListener('submit', function (event) {\n          event.preventDefault();\n          const email = event.target.elements.email.value;\n          const password = event.target.elements.password.value;\n          client.login(email, password);\n        });\n\n      document\n        .querySelector('#new')\n        .addEventListener('submit', function (event) {\n          event.preventDefault();\n\n          const text = event.target.elements.text.value;\n\n          client.sendMessage({\n            type: 'items',\n            collection: 'messages',\n            action: 'create',\n            data: { text },\n          });\n        });\n\n      async function subscribe(event) {\n        const { subscription } = await client.subscribe('messages', {\n          event,\n          query: {\n            fields: ['*', 'user_created.first_name'],\n          },\n        });\n\n        for await (const message of subscription) {\n          receiveMessage(message);\n        }\n      }\n\n      function receiveMessage(data) {\n        if (data.type == 'subscription' && data.event == 'init') {\n          console.log('subscription started');\n        }\n        if (data.type == 'subscription' && data.event == 'create') {\n          addMessageToList(message.data[0]);\n        }\n      }\n\n      function addMessageToList(message) {\n        const li = document.createElement('li');\n        li.setAttribute('id', message.id);\n        li.textContent = `${message.user_created.first_name}: ${message.text}`;\n        document.querySelector('ol').appendChild(li);\n      }\n    </script>\n  </body>\n</html>\n```\n\n----------------------------------------\n\nTITLE: Configuring Okta Service Provider XML Metadata for Directus SAML Integration\nDESCRIPTION: XML template for the Service Provider metadata required for Okta SAML integration. This needs to be customized with your Okta entityID and your Directus domain for authentication.\nSOURCE: https://github.com/directus/docs/blob/main/content/tutorials/6.self-hosting/configure-okta-as-a-single-sign-on-provider.md#2025-04-09_snippet_1\n\nLANGUAGE: xml\nCODE:\n```\n<EntityDescriptor xmlns:md=\"urn:oasis:names:tc:SAML:2.0:metadata\" xmlns:ds=\"http://www.w3.org/2000/09/xmldsig#\" entityID=\"{ENTITY_ID}\"><SPSSODescriptor WantAssertionsSigned=\"true\" protocolSupportEnumeration=\"urn:oasis:names:tc:SAML:2.0:protocol\">         <NameIDFormat>             urn:oasis:names:tc:SAML:1.1:nameid-format:emailAddress         </NameIDFormat>         <AssertionConsumerService isDefault=\"true\" index=\"0\" Binding=\"urn:oasis:names:tc:SAML:2.0:bindings:HTTP-POST\" Location=\"{OUR_DOMAIN}/auth/login/okta/acs\"/>     </SPSSODescriptor> </EntityDescriptor>\n```\n\n----------------------------------------\n\nTITLE: Complete URL with Image Transformation in Directus\nDESCRIPTION: Shows the complete URL pattern including both file access and image transformation parameters.\nSOURCE: https://github.com/directus/docs/blob/main/content/getting-started/6.upload-files.md#2025-04-09_snippet_2\n\nLANGUAGE: plaintext\nCODE:\n```\nhttps://example.directus.app/assets/<file-id>?access_token=token&width=200\n```\n\n----------------------------------------\n\nTITLE: Reading a Relation using RelationsService in JavaScript\nDESCRIPTION: Shows how to read a relation's data using the RelationsService. It retrieves data for a specific relation by collection and field name and returns it as JSON.\nSOURCE: https://github.com/directus/docs/blob/main/content/tutorials/5.extensions/read-collection-data-in-custom-layouts.md#2025-04-09_snippet_12\n\nLANGUAGE: javascript\nCODE:\n```\nrouter.get('/', async (req, res) => {\n  const relationsService = new RelationsService({\n    schema: await getSchema(),\n    accountability: req.accountability\n  });\n\n  const data = await relationsService.readOne('collection_name', 'field_name');\n\n  res.json(data);\n});\n```\n\n----------------------------------------\n\nTITLE: Using UIDs in WebSocket Operations\nDESCRIPTION: Example of using unique identifiers in WebSocket requests to track responses. The UID is echoed back in the response.\nSOURCE: https://github.com/directus/docs/blob/main/content/guides/7.realtime/3.actions.md#2025-04-09_snippet_4\n\nLANGUAGE: json\nCODE:\n```\n{\n\t\"type\": \"items\",\n\t\"action\": \"read\",\n\t\"collection\": \"your_collection_name\",\n\t\"query\": {\n\t\t\"sort\": \"date_created\"\n\t},\n\t\"uid\": \"sorted_latest_first\"\n}\n```\n\nLANGUAGE: json\nCODE:\n```\n{\n\t\"type\": \"items\",\n\t\"data\": {\n\t\t// ...\n\t},\n\t\"uid\": \"sorted_latest_first\"\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Vue.js Boilerplate for Multi-User Chat\nDESCRIPTION: This HTML snippet sets up the basic structure for a Vue.js application with forms for user login and message submission, and a list to display messages.\nSOURCE: https://github.com/directus/docs/blob/main/content/tutorials/2.projects/build-a-multi-user-chat-with-vue-js-and-directus-realtime.md#2025-04-09_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<!DOCTYPE html>\n<html>\n\t<body>\n\t\t<div id=\"app\">\n\t\t\t<form @submit.prevent=\"loginSubmit\">\n\t\t\t\t<label for=\"email\">Email</label>\n\t\t\t\t<input type=\"email\" id=\"email\" />\n\t\t\t\t<label for=\"password\">Password</label>\n\t\t\t\t<input type=\"password\" id=\"password\" />\n\t\t\t\t<input type=\"submit\" />\n\t\t\t</form>\n\n\t\t\t<ol></ol>\n\n\t\t\t<form @submit.prevent=\"messageSubmit\">\n\t\t\t\t<label for=\"message\">Message</label>\n\t\t\t\t<input type=\"text\" id=\"text\" />\n\t\t\t\t<input type=\"submit\" />\n\t\t\t</form>\n\t\t</div>\n\n\t\t<script setup>\n\n\t\t</script>\n\t</body>\n</html>\n```\n\n----------------------------------------\n\nTITLE: Event Data Processing Function\nDESCRIPTION: Function that processes event data by setting timestamp and merging metadata before creating the event log\nSOURCE: https://github.com/directus/docs/blob/main/content/tutorials/3.tips-and-tricks/build-a-monitoring-pipeline-for-flows-and-extensions-.md#2025-04-09_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nmodule.exports = async function(data) {\n\tlet meta = data.$trigger.meta;\n    if (Array.isArray(meta)) {\n    \tmeta = meta.reduce((agg, m) => ({...agg, ...m}), {});\n    }\n\n    return {\n        \"event_name\": data.$trigger.event_name,\n        \"event_date\": (new Date()).toISOString(),\n        \"context\": data.$trigger.context,\n        \"execution_id\": data.$trigger.execution_id,\n        \"meta\": meta\n    };\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Up JSON Payload for Clearbit User Data Enrichment in Directus\nDESCRIPTION: JSON payload for updating user data in Directus with enriched information from Clearbit API. This payload maps specific Clearbit data fields to Directus user fields including location, description, phone, and title with employment information.\nSOURCE: https://github.com/directus/docs/blob/main/content/tutorials/7.workflows/enrich-user-data-with-clearbit-and-directus-automate.md#2025-04-09_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"location\": \"{{ clearbit.data.location }}\",\n    \"description\": \"{{ clearbit.data.bio }}\",\n    \"phone\": \"{{ clearbit.data.phone }}\",\n    \"title\": \"{{ clearbit.data.employment.title }}, {{ clearbit.data.employment.name }}\"\n}\n```\n\n----------------------------------------\n\nTITLE: Vue Template for Vonage Activity Panel Loading and Error States\nDESCRIPTION: This Vue template snippet handles the loading state and error messages for the Vonage activity panel, displaying appropriate notices to the user.\nSOURCE: https://github.com/directus/docs/blob/main/content/tutorials/5.extensions/display-external-api-data-from-vonage-in-custom-panels.md#2025-04-09_snippet_9\n\nLANGUAGE: vue\nCODE:\n```\n<template>\n  <div class=\"messages-table\" :class=\"{ 'has-header': showHeader }\">\n    <v-progress-circular v-if=\"isLoading\" class=\"is-loading\" indeterminate />\n    <v-notice v-else-if=\"errorMessage\" type=\"danger\">{{ errorMessage }}</v-notice>\n    <v-notice v-else-if=\"activityData.length == 0\" type=\"info\">No Messages</v-notice>\n    <!-- Table goes here -->\n  </div>\n</template>\n```\n\n----------------------------------------\n\nTITLE: Configuring Directus API Service in Kotlin\nDESCRIPTION: This snippet defines a Retrofit interface for fetching global and pages data from Directus. It includes GET requests for both endpoints and a companion object for creating the API service instance.\nSOURCE: https://github.com/directus/docs/blob/main/content/tutorials/1.getting-started/fetch-data-from-directus-in-android-with-kotlin.md#2025-04-09_snippet_8\n\nLANGUAGE: kotlin\nCODE:\n```\npackage com.example.directusapp.network\nimport com.example.directusapp.Constants\nimport com.example.directusapp.model.GlobalResponse\nimport com.example.directusapp.model.PageResponse\nimport retrofit2.Retrofit\nimport retrofit2.converter.gson.GsonConverterFactory\nimport retrofit2.http.GET\n\n\ninterface DirectusApiService {\n    @GET(\"items/global\")\n    suspend fun getGlobal(): GlobalResponse\n\n    @GET(\"items/pages\")\n    suspend fun getPages(): PageResponse\n\n    companion object {\n\n        fun create(): DirectusApiService {\n            val retrofit = Retrofit.Builder()\n                .baseUrl(Constants.BASE_URL)\n                .addConverterFactory(GsonConverterFactory.create())\n                .build()\n            return retrofit.create(DirectusApiService::class.java)\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a Video Card Component in Svelte\nDESCRIPTION: A Svelte component that displays an individual video card with thumbnail, title, views count, and upload date. It links to the detailed video page using the video's ID.\nSOURCE: https://github.com/directus/docs/blob/main/content/tutorials/2.projects/build-a-video-streaming-app-with-sveltekit-and-directus.md#2025-04-09_snippet_4\n\nLANGUAGE: svelte\nCODE:\n```\n<script lang=\"ts\">\n  import type { Video } from \"$lib/types\";\n  export let video: Video;\n</script>\n<a href=\"/video/{video.id}\" class=\"video-card\">\n  <img\n    src={`${import.meta.env.VITE_DIRECTUS_URL}/assets/${video.thumbnail.id}`}\n    alt={video.title}\n  />\n  <h3>{video.title}</h3>\n  <p>\n    {video.views} views • {new Date(video.upload_date).toLocaleDateString()}\n  </p>\n</a>\n<style>\n  .video-card { display: block; text-decoration: none; color: inherit; }\n  img { width: 100%; height: auto; }\n</style>\n```\n\n----------------------------------------\n\nTITLE: Configuring Security and Limits Environment Variables in Directus\nDESCRIPTION: This markdown table lists various environment variables for configuring security and limits in Directus. It includes settings for access tokens, cookies, CSP, IP restrictions, and more. Each variable is described with its purpose and default value.\nSOURCE: https://github.com/directus/docs/blob/main/content/configuration/security-limits.md#2025-04-09_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n| Variable                            | Description                                                                                                                                                                             | Default Value             |\n| ----------------------------------- | --------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- | ------------------------- |\n| `SECRET`<sup>[1]</sup>              | Secret string for the project. Used for secret signing.                                                                                                                                 | Random value              |\n| `ACCESS_TOKEN_TTL`                  | The duration that an access token is valid.                                                                                                                                             | `15m`                     |\n| `EMAIL_VERIFICATION_TOKEN_TTL`      | The duration that an email verification token is valid.                                                                                                                                 | `7d`                      |\n| `REFRESH_TOKEN_TTL`                 | The duration that a refresh token is valid. This value should be higher than `ACCESS_TOKEN_TTL` and `SESSION_COOKIE_TTL`.                                                               | `7d`                      |\n| `REFRESH_TOKEN_COOKIE_DOMAIN`       | Which domain to use for the refresh token cookie. Useful for development mode.                                                                                                          |                           |\n| `REFRESH_TOKEN_COOKIE_SECURE`       | Whether or not to set the `secure` attribute for the refresh token cookie.                                                                                                              | `false`                   |\n| `REFRESH_TOKEN_COOKIE_SAME_SITE`    | Value for `sameSite` in the refresh token cookie.                                                                                                                                       | `lax`                     |\n| `REFRESH_TOKEN_COOKIE_NAME`         | Name of the refresh token cookie.                                                                                                                                                       | `directus_refresh_token`  |\n| `SESSION_COOKIE_TTL`                | The duration that the session cookie/token is valid, and also how long users stay logged-in to the App.                                                                                 | `1d`                      |\n| `SESSION_COOKIE_DOMAIN`             | Which domain to use for the session cookie. Useful for development mode.                                                                                                                |                           |\n| `SESSION_COOKIE_SECURE`             | Whether or not to set the `secure` attribute for the session cookie.                                                                                                                    | `false`                   |\n| `SESSION_COOKIE_SAME_SITE`          | Value for `sameSite` in the session cookie.                                                                                                                                             | `lax`                     |\n| `SESSION_COOKIE_NAME`               | Name of the session cookie.                                                                                                                                                             | `directus_session_token`  |\n| `SESSION_REFRESH_GRACE_PERIOD`      | The duration during which a refresh request will permit recently refreshed sessions to be used, thereby preventing race conditions in refresh calls.                                    | `10s`                     |\n| `LOGIN_STALL_TIME`                  | The duration in milliseconds that a login request will be stalled for, and it should be greater than the time taken for a login request with an invalid password.                       | `500`                     |\n| `REGISTER_STALL_TIME`               | The duration in milliseconds that a registration request will be stalled for, and it should be greater than the time taken for a registration request with an already registered email. | `750`                     |\n| `PASSWORD_RESET_URL_ALLOW_LIST`     | List of URLs that can be used as `reset_url` in the `/password/request` endpoint.                                                                                                       |                           |\n| `USER_INVITE_TOKEN_TTL`             | The duration that the invite token is valid.                                                                                                                                            | `7d`                      |\n| `USER_INVITE_URL_ALLOW_LIST`        | List of URLs that can be used as `invite_url` in the `/users/invite` endpoint.                                                                                                          |                           |\n| `USER_REGISTER_URL_ALLOW_LIST`      | List of URLs that can be used as `verification_url` in the `/users/register` endpoint.                                                                                                  |                           |\n| `IP_TRUST_PROXY`                    | Settings for the Express.js trust proxy setting.                                                                                                                                        | true                      |\n| `IP_CUSTOM_HEADER`                  | What custom request header to use for the IP address.                                                                                                                                   | false                     |\n| `ASSETS_CONTENT_SECURITY_POLICY`    | Custom overrides for the Content-Security-Policy header for the /assets endpoint. See [helmet's documentation on `helmet.contentSecurityPolicy()`](https://helmetjs.github.io).         |                           |\n| `IMPORT_IP_DENY_LIST`<sup>[2]</sup> | Deny importing files from these IP addresses / IP ranges / CIDR blocks. Use `0.0.0.0` to match any local IP address.                                                                    | `0.0.0.0,169.254.169.254` |\n| `CONTENT_SECURITY_POLICY_*`         | Custom overrides for the Content-Security-Policy header. See [helmet's documentation on `helmet.contentSecurityPolicy()`](https://helmetjs.github.io).                                  |                           |\n| `HSTS_ENABLED`                      | Enable the Strict-Transport-Security policy header.                                                                                                                                     | `false`                   |\n| `HSTS_*`                            | Custom overrides for the Strict-Transport-Security header. See [helmet's documentation](https://helmetjs.github.io).                                                                    |                           |\n```\n\n----------------------------------------\n\nTITLE: Configuring Multiple Authentication Providers in Directus\nDESCRIPTION: Example environment variables configuration for setting up multiple authentication providers (Google and Facebook) in Directus. This snippet demonstrates how to define provider-specific configurations including client credentials, URLs, and display settings.\nSOURCE: https://github.com/directus/docs/blob/main/content/configuration/auth-sso.md#2025-04-09_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\nAUTH_PROVIDERS=\"google,facebook\"\n\nAUTH_GOOGLE_DRIVER=\"openid\"\nAUTH_GOOGLE_CLIENT_ID=\"830d...29sd\"\nAUTH_GOOGLE_CLIENT_SECRET=\"la23...4k2l\"\nAUTH_GOOGLE_ISSUER_URL=\"https://accounts.google.com/.well-known/openid-configuration\"\nAUTH_GOOGLE_IDENTIFIER_KEY=\"email\"\nAUTH_GOOGLE_ICON=\"google\"\nAUTH_GOOGLE_LABEL=\"Google\"\n\nAUTH_FACEBOOK_DRIVER=\"oauth2\"\nAUTH_FACEBOOK_CLIENT_ID=\"830d...29sd\"\nAUTH_FACEBOOK_CLIENT_SECRET=\"jd8x...685z\"\nAUTH_FACEBOOK_AUTHORIZE_URL=\"https://www.facebook.com/dialog/oauth\"\nAUTH_FACEBOOK_ACCESS_URL=\"https://graph.facebook.com/oauth/access_token\"\nAUTH_FACEBOOK_PROFILE_URL=\"https://graph.facebook.com/me?fields=email\"\nAUTH_FACEBOOK_ICON=\"facebook\"\nAUTH_FACEBOOK_LABEL=\"Facebook\"\n```\n\n----------------------------------------\n\nTITLE: Deleting Items via WebSocket\nDESCRIPTION: Example of deleting items from a collection using WebSockets. Requires collection name and item ID.\nSOURCE: https://github.com/directus/docs/blob/main/content/guides/7.realtime/3.actions.md#2025-04-09_snippet_3\n\nLANGUAGE: json\nCODE:\n```\n{\n\t\"type\": \"items\",\n\t\"action\": \"delete\",\n\t\"collection\": \"your_collection_name\",\n\t\"id\": \"single_item_id\"\n}\n```\n\nLANGUAGE: json\nCODE:\n```\n{\n\t\"type\": \"items\",\n\t\"event\": \"delete\",\n\t\"data\": [\"single_item_id\", \"single_item_id_2\"]\n}\n```\n\n----------------------------------------\n\nTITLE: Reading and Transforming Assets with Directus SDK in TypeScript\nDESCRIPTION: This code initializes a Directus client and requests an asset with various image transformations. It applies blur and tint transforms to the image, resizes it to 300x100 pixels, and uses 'cover' as the fit method.\nSOURCE: https://github.com/directus/docs/blob/main/content/_partials/home-hero/file.md#2025-04-09_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { createDirectus, rest, readAssetRaw } from '@directus/sdk';\nconst directus = createDirectus('https://directus.example.com').with(rest());\n\nconst result = await directus.request(\n  readAssetRaw('file_id', {\n    transforms: [['blur', 10], ['tint', 'rgb(102, 68, 255)']],\n    fit: 'cover',\n    width: 300,\n    height: 100,\n  }),\n);\n```\n\n----------------------------------------\n\nTITLE: Configuring Content Security Policy in Docker Compose for Directus\nDESCRIPTION: Configures the Content Security Policy in a Docker Compose file to allow access from your Nuxt project to Directus. This is necessary when self-hosting or working in development.\nSOURCE: https://github.com/directus/docs/blob/main/content/tutorials/1.getting-started/rendering-dynamic-blocks-using-nuxt.md#2025-04-09_snippet_0\n\nLANGUAGE: yml\nCODE:\n```\nenvironment:\n  CONTENT_SECURITY_POLICY_DIRECTIVES__FRAME_SRC: your-website-url\n```\n\n----------------------------------------\n\nTITLE: Implementing Individual Post Component\nDESCRIPTION: TypeScript implementation of the Post component for displaying individual blog posts\nSOURCE: https://github.com/directus/docs/blob/main/content/tutorials/1.getting-started/fetch-data-from-directus-with-angular.md#2025-04-09_snippet_11\n\nLANGUAGE: typescript\nCODE:\n```\nimport {Component, OnInit} from '@angular/core';\nimport {directus, Post} from \"../../../../directus\";\nimport {ActivatedRoute} from \"@angular/router\";\nimport {CommonModule} from \"@angular/common\";\nimport {readItems} from \"@directus/sdk\";\n\n@Component({\n  selector: 'app-post',\n  standalone: true,\n  imports: [CommonModule],\n  templateUrl: './post.component.html',\n  styleUrl: './post.component.css'\n})\nexport class PostComponent implements OnInit{\n  post: Post;\n  baseUrl = \"YOUR_DIRECTUS_URL\";\n  constructor(private route: ActivatedRoute) {\n  }\n  ngOnInit(): void {\n    this\n      .getPostBySlug(+this\n      .route\n      .snapshot\n      .paramMap.get('slug'))\n  }\n\n  async getPostBySlug(slug: string){\n    //@ts-ignore\n    this.post = await directus\n      .request<Post[]>(readItems(\"posts\", [{slug}]))[0];\n  }\n\n}\n```\n\n----------------------------------------\n\nTITLE: Adding Navigation to Astro Layout Component\nDESCRIPTION: This snippet updates the Layout.astro file to include a navigation bar. It adds links to various pages of the website, improving site navigation and user experience.\nSOURCE: https://github.com/directus/docs/blob/main/content/tutorials/1.getting-started/fetch-data-from-directus-with-astro.md#2025-04-09_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\n  <body>\n    <nav>\n      <a href=\"/\">Home</a>\n      <a href=\"/about\">About</a>\n      <a href=\"/conduct\">Code of Conduct</a>\n      <a href=\"/privacy\">Privacy Policy</a>\n      <a href=\"/blog\">Blog</a>\n    </nav>\n    <slot />\n  </body>\n```\n\n----------------------------------------\n\nTITLE: Implementing Directus SDK Integration with Cookie Authentication\nDESCRIPTION: JavaScript plugin that configures Directus SDK with cookie-based authentication and persistent login state using js-cookie.\nSOURCE: https://github.com/directus/docs/blob/main/content/tutorials/2.projects/build-a-notebook-chrome-extension-with-directus-auth.md#2025-04-09_snippet_2\n\nLANGUAGE: js\nCODE:\n```\nimport { createDirectus, rest, authentication } from \"@directus/sdk\";\n\nimport Cookies from \"js-cookie\";\nconst directus = createDirectus(\"your-project-url\")\n    .with(\n        authentication(\"cookie\", {\n            autoRefresh: true,\n            credentials: \"include\",\n            storage: {\n                get() {\n                    if (Cookies.get(\"directus_auth\"))\n                        return JSON.parse(Cookies.get(\"directus_auth\"));\n                    else return null;\n                },\n                set(data) {\n                    Cookies.set(\"directus_auth\", JSON.stringify(data));\n                },\n            },\n        })\n    )\n    .with(rest());\n\nexport default directus;\n```\n\n----------------------------------------\n\nTITLE: Configuring CORS in Docker Compose for Directus\nDESCRIPTION: This snippet shows how to configure Content Security Policy in a Docker-based Directus setup to allow your Next.js app to access the Directus instance. The environment variable sets frame source permissions.\nSOURCE: https://github.com/directus/docs/blob/main/content/tutorials/1.getting-started/implementing-multilingual-content-using-directus-and-next.md#2025-04-09_snippet_0\n\nLANGUAGE: yml\nCODE:\n```\nenvironment:\n  CONTENT_SECURITY_POLICY_DIRECTIVES__FRAME_SRC: your-website-url\n```\n\n----------------------------------------\n\nTITLE: Creating Directus Extension Command\nDESCRIPTION: Command to generate boilerplate code for a test endpoint extension in Directus.\nSOURCE: https://github.com/directus/docs/blob/main/content/tutorials/5.extensions/monitor-and-error-track-with-sentry-in-custom-hooks.md#2025-04-09_snippet_8\n\nLANGUAGE: bash\nCODE:\n```\nnpx create-directus-extension@latest\n├ type: endpoint\n├ name: directus-extension-endpoint-fail\n└ language: javascript\n```\n\n----------------------------------------\n\nTITLE: Implementing Message Reception\nDESCRIPTION: Function to handle incoming messages and update the UI\nSOURCE: https://github.com/directus/docs/blob/main/content/tutorials/2.projects/build-a-realtime-chat-app-with-directus-and-sveltekit.md#2025-04-09_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\nasync function receiveMessage(newMessage) {\n  console.log(\"New message received with UID:\", newMessage.uid, newMessage);\n\n  if (newMessage.data && Array.isArray(newMessage.data)) {\n    messages = [\n      ...messages,\n      ...newMessage.data.map((msg) => ({\n        id: msg.id,\n        content: msg.content,\n        user: msg.user_created?.first_name || \"User\",\n      })),\n    ];\n    await tick();\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Adding Manual Phone Number Input Field\nDESCRIPTION: Renders an input field for direct phone number entry when no phone number field is configured.\nSOURCE: https://github.com/directus/docs/blob/main/content/tutorials/5.extensions/send-sms-messages-with-twilio-in-custom-panels.md#2025-04-09_snippet_18\n\nLANGUAGE: vue\nCODE:\n```\n<div v-else class=\"twilio-sms\" :class=\"{ 'has-header': showHeader }\">\n\t<v-input v-model=\"recipient\" placeholder=\"+0000000000\" v-if=\"phoneNumberField == ''\"/>\n</div>\n```\n\n----------------------------------------\n\nTITLE: Configuring CORS in Docker Compose for Directus\nDESCRIPTION: Sets the Content Security Policy directive for frame-src in a Docker Compose environment file to allow access from a specific website URL.\nSOURCE: https://github.com/directus/docs/blob/main/content/tutorials/1.getting-started/rendering-dynamic-blocks-using-next.md#2025-04-09_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nenvironment:\n  CONTENT_SECURITY_POLICY_DIRECTIVES__FRAME_SRC: your-website-url\n```\n\n----------------------------------------\n\nTITLE: Creating Directus Plugin for Nuxt 2\nDESCRIPTION: This snippet shows how to create a Nuxt 2 plugin for the Directus JavaScript SDK. It initializes the Directus client and injects it into the Nuxt application for global access.\nSOURCE: https://github.com/directus/docs/blob/main/content/tutorials/4.migration/migrate-from-nuxt-content-to-directus.md#2025-04-09_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nimport { Directus } from '@directus/sdk';\nconst DIRECTUS_URL = 'my-directus-url'\nconst directus = new Directus(DIRECTUS_URL);\n\nexport default({ app }, inject) => {\n   inject('directus', directus)\n}\n```\n\n----------------------------------------\n\nTITLE: Advanced Image Transformations Using Sharp API in Directus\nDESCRIPTION: Examples of using the transforms parameter to access complex Sharp API functionalities like rotate, blur, tint, and negate through REST API and the SDK.\nSOURCE: https://github.com/directus/docs/blob/main/content/guides/5.files/4.transform.md#2025-04-09_snippet_1\n\nLANGUAGE: http\nCODE:\n```\nGET /assets/c984b755-e201-497e-b0a7-24156ad9c7e0\n\t?transforms=[[\"rotate\", 90],[\"blur\", 10],[\"tint\", \"rgb(255, 0, 255)\"], [\"negate\", {\"lower\": 10, \"upper\": 50}]]\n```\n\nLANGUAGE: graphql\nCODE:\n```\n# Not supported by GraphQL\n```\n\nLANGUAGE: js\nCODE:\n```\nimport { createDirectus, rest, readAssetRaw } from '@directus/sdk';\n\nconst FILE_ID = 'c984b755-e201-497e-b0a7-24156ad9c7e0';\n\nconst directus = createDirectus('directus_project_url').with(rest());\n\nconst result = await directus.request(\n  readAssetRaw(FILE_ID, {\n    transforms: [\n      ['rotate', 90],\n      ['blur', 10],\n      ['tint', 'rgb(255, 0, 255)'],\n      [\n        'negate',\n        {\n          lower: 10,\n          upper: 50,\n        },\n      ],\n    ],\n  }),\n);\n```\n\n----------------------------------------\n\nTITLE: Updating DirectusApiService for Blog Detail Retrieval in Kotlin\nDESCRIPTION: This snippet updates the DirectusApiService interface to include a new endpoint for fetching individual blog posts by their ID. It uses Retrofit for API communication and defines the structure for API responses.\nSOURCE: https://github.com/directus/docs/blob/main/content/tutorials/1.getting-started/fetch-data-from-directus-in-android-with-kotlin.md#2025-04-09_snippet_14\n\nLANGUAGE: kotlin\nCODE:\n```\npackage com.example.directusapp.network\nimport com.example.directusapp.Constants\nimport com.example.directusapp.model.BlogsResponse\nimport com.example.directusapp.model.BlogResponse\nimport com.example.directusapp.model.GlobalResponse\nimport com.example.directusapp.model.PageResponse\nimport retrofit2.Retrofit\nimport retrofit2.converter.gson.GsonConverterFactory\nimport retrofit2.http.GET\nimport retrofit2.http.Path\n\ninterface DirectusApiService {\n    @GET(\"items/global\")\n    suspend fun getGlobal(): GlobalResponse\n\n    @GET(\"items/pages\")\n    suspend fun getPages(): PageResponse\n\n    @GET(\"items/blog?fields=*,author.name\")\n    suspend fun getBlogs(): BlogsResponse\n\n    @GET(\"items/blog/{id}?fields=*,author.name\")\n    suspend fun getBlogById(@Path(\"id\") id: Int): BlogResponse\n\n    companion object {\n\n        fun create(): DirectusApiService {\n            val retrofit = Retrofit.Builder()\n                .baseUrl(Constants.BASE_URL)\n                .addConverterFactory(GsonConverterFactory.create())\n                .build()\n            return retrofit.create(DirectusApiService::class.java)\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Creating DateTime Component for Directus Fields in Next.js\nDESCRIPTION: A date-time input component that renders a datetime-local field based on Directus configuration. It supports required validation and responsive width based on field metadata.\nSOURCE: https://github.com/directus/docs/blob/main/content/tutorials/2.projects/build-forms-dynamically-using-directus-and-next.md#2025-04-09_snippet_12\n\nLANGUAGE: javascript\nCODE:\n```\n\"use client\"\nimport { useState } from 'react';\n\nexport default function DateTime({\n  defaultValue = '',\n  label = '',\n  field,\n  value,\n  setValue\n}) {\n\n  const handleChange = (e) => {\n    const value = e.target.value;\n    setValue(value);\n  };\n\n  const fieldWidth = field.meta?.width === 'full' ? '100%' : '50%';\n\n  return (\n    <div style={{ width: fieldWidth }}>\n      <label htmlFor={field.field}>{label}</label>\n      <input\n        name={field.schema?.name}\n        type=\"datetime-local\"\n        value={value}\n        onChange={handleChange}\n        required={field.meta?.required}\n        style={{ width: '100%' }}\n      />\n    </div>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Directus Schema Types for TypeScript\nDESCRIPTION: Creates type definitions for the Directus schema to ensure proper TypeScript type checking when working with data from Directus.\nSOURCE: https://github.com/directus/docs/blob/main/content/tutorials/1.getting-started/rendering-dynamic-blocks-using-nuxt.md#2025-04-09_snippet_7\n\nLANGUAGE: ts\nCODE:\n```\n/// <reference types=\"@directus/extensions/api.d.ts\" />\n\ninterface DirectusSchema {\n\tpages: Page[];\n}\n\ninterface Block {\n\tid: string;\n\tcollection: string;\n\titem: Hero | RichText | CardGroup;\n}\n\ninterface Page {\n\ttitle: string;\n\tslug: string;\n\tblocks: Block[];\n}\n\ninterface Button {\n\tlabel: string;\n\thref: string;\n\tvariant: string;\n}\n\ninterface Card {\n\tid: number;\n\timage: string;\n\tcontent: string;\n}\n\ninterface Post {\n\tid: number;\n\ttitle: string;\n\tcontent: string;\n}\n\ninterface Hero {\n\theadline: string;\n\tcontent: string;\n\tbuttons: Button[];\n}\n\ninterface RichText {\n\theadline: string;\n\tcontent: string;\n}\n\ninterface CardGroup {\n\theadline: string;\n\tcontent: string;\n\tgroup_type: string;\n\tposts: Post[];\n\tcards: Card[];\n}\n\ninterface Card {\n\timage: string;\n\tcontent: string;\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing a Dynamic Sitemap in Nuxt with Directus SDK\nDESCRIPTION: This code creates a server route in Nuxt that generates a sitemap.xml file by fetching content from Directus collections. It uses the sitemap package to create proper XML output and the Directus SDK to fetch items from various collections.\nSOURCE: https://github.com/directus/docs/blob/main/content/tutorials/3.tips-and-tricks/search-engine-optimization-best-practices.md#2025-04-09_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\n// This example is based on Nuxt and uses a third party package.\n// Consult your own frontend framework's documentation for how to properly generate a sitemap in their ecosystem.\n// /server/routes/sitemap.xml.ts\n\nimport { SitemapStream, streamToPromise } from 'sitemap'\nimport { createDirectus, readItems, rest } from '@directus/sdk'\n\nconst directus = createDirectus(directusUrl).with(rest())\n\nexport default defineEventHandler(async (event) => {\n    // Fetch all the collections you want to include in your sitemap\n    const pages = await directus.request(\n        readItems('pages', {\n            fields: ['permalink'],\n            limit: -1, // Be careful using -1, it will fetch all the items in the collection and could cause performance issues if you have a lot of items\n        }),\n    )\n\n    const posts = await directus.request(\n        readItems('posts', { fields: ['slug', { type: ['slug'] }], limit: -1 }),\n    )\n\n    // Create an array of objects with the url you want to include in your sitemap\n    const urls = []\n\n    urls.push(...pages.data.map((page) => ({ url: page.permalink })))\n\n    urls.push(\n        ...posts.data.map((post) => ({\n            url: `/blog/${post.slug}`,\n        })),\n    )\n\n    const sitemap = new SitemapStream({\n        hostname: 'https://example.com',\n    })\n\n    // Add each url to the sitemap\n    for (const item of urls) {\n        sitemap.write({\n            url: item.url,\n            changefreq: 'monthly',\n        })\n    }\n\n    sitemap.end()\n    return streamToPromise(sitemap)\n})\n```\n\n----------------------------------------\n\nTITLE: Environment Type Definitions\nDESCRIPTION: TypeScript type definitions for environment variables used in the Nuxt application.\nSOURCE: https://github.com/directus/docs/blob/main/content/tutorials/2.projects/build-a-realtime-chat-app-using-directus-and-nuxt.md#2025-04-09_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\n/// <reference types=\"vite/client\" />\ninterface ImportMetaEnv {\n\treadonly API_URL: string;\n}\n  \ninterface ImportMeta {\n\treadonly env: ImportMetaEnv;\n}\n```\n\n----------------------------------------\n\nTITLE: Initializing Next.js Project with create-next-app\nDESCRIPTION: Command to create a new Next.js application using create-next-app with specific configuration choices.\nSOURCE: https://github.com/directus/docs/blob/main/content/tutorials/1.getting-started/using-authentication-in-next-js.md#2025-04-09_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nnpx create-next-app@latest next-auth\ncd next-auth\n```\n\n----------------------------------------\n\nTITLE: User Registration Route Implementation\nDESCRIPTION: React component that handles user registration using the Directus SDK and AuthForm component.\nSOURCE: https://github.com/directus/docs/blob/main/content/tutorials/1.getting-started/using-authentication-in-react.md#2025-04-09_snippet_13\n\nLANGUAGE: jsx\nCODE:\n```\n// src/routes/Register.jsx\n\nimport React from 'react';\nimport AuthForm from '../components/AuthForm';\nimport client from \"../lib/directus\"\nimport { registerUser } from \"@directus/sdk\"\n\nconst Register = () => {\n    const onRegister = async (data) => {\n        const result = await client.request(registerUser(data.email, data.password))\n        console.log(result)\n    }\n    return (\n        <div>\n            <AuthForm title=\"Register\" submitButtonTitle=\"Register\" linkHref='/login' linkText=\"Have an account? Login here\" onSubmit={onRegister} />\n        </div>\n    );\n};\n\nexport default Register;\n```\n\n----------------------------------------\n\nTITLE: Defining Operation Input Options in Directus (JavaScript)\nDESCRIPTION: JavaScript code defining the input options for the custom operation in the app.js file, including a text input field.\nSOURCE: https://github.com/directus/docs/blob/main/content/tutorials/5.extensions/use-npm-packages-in-custom-operations.md#2025-04-09_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\noptions: [\n\t{\n\t\tfield: 'text',\n\t\tname: 'Text',\n\t\ttype: 'string',\n\t\tmeta: {\n\t\t\twidth: 'full',\n\t\t\tinterface: 'input',\n\t\t},\n\t},\n],\n```\n\n----------------------------------------\n\nTITLE: Adding Icon to Title-Outer:Prepend Slot\nDESCRIPTION: Demonstrates how to add an icon button to the left of the title using the title-outer:prepend slot.\nSOURCE: https://github.com/directus/docs/blob/main/content/tutorials/5.extensions/understand-available-slots-in-custom-modules.md#2025-04-09_snippet_2\n\nLANGUAGE: vue\nCODE:\n```\n<template #title-outer:prepend>\n\t<v-button class=\"header-icon\" rounded disabled icon secondary>\n\t\t<v-icon name=\"access_time\" />\n\t</v-button>\n</template>\n```\n\n----------------------------------------\n\nTITLE: Creating a Minimal Next.js Home Page\nDESCRIPTION: This code replaces the default Next.js home page with a minimal implementation that renders an empty div. This provides a clean starting point for the multilingual content project.\nSOURCE: https://github.com/directus/docs/blob/main/content/tutorials/1.getting-started/implementing-multilingual-content-using-directus-and-next.md#2025-04-09_snippet_3\n\nLANGUAGE: js\nCODE:\n```\nexport default function Home() {\n  return <div />\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Argon2 Hashing Parameters in Directus\nDESCRIPTION: Configuration variables for Argon2 hashing implementation used for password hashing, Hash field type, and hash generation endpoint. Includes memory cost, hash length, time cost, parallelism, hash type, and associated data parameters.\nSOURCE: https://github.com/directus/docs/blob/main/content/configuration/security-limits.md#2025-04-09_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n| Variable               | Description                                                                                                                      | Default Value       |\n| ---------------------- | -------------------------------------------------------------------------------------------------------------------------------- | ------------------- |\n| `HASH_MEMORY_COST`     | How much memory to use when generating hashes, in KiB.                                                                           | `4096` (4 MiB)      |\n| `HASH_LENGTH`          | The length of the hash function output in bytes.                                                                                 | `32`                |\n| `HASH_TIME_COST`       | The amount of passes (iterations) used by the hash function. It increases hash strength at the cost of time required to compute. | `3`                 |\n| `HASH_PARALLELISM`     | The amount of threads to compute the hash on. Each thread has a memory pool with `HASH_MEMORY_COST` size.                        | `1` (single thread) |\n| `HASH_TYPE`            | The variant of the hash function (`0`: argon2d, `1`: argon2i, or `2`: argon2id).                                                 | `2` (argon2id)      |\n| `HASH_ASSOCIATED_DATA` | An extra and optional non-secret value. The value will be included Base64 encoded in the parameters portion of the digest.       |                     |\n```\n\n----------------------------------------\n\nTITLE: Adding Dependencies for Directus Integration in Android\nDESCRIPTION: Adds necessary Gradle dependencies for network requests (Retrofit), navigation, and Markdown parsing to an Android project's build.gradle file.\nSOURCE: https://github.com/directus/docs/blob/main/content/tutorials/1.getting-started/fetch-data-from-directus-in-android-with-kotlin.md#2025-04-09_snippet_0\n\nLANGUAGE: groovy\nCODE:\n```\ndependencies {\n    // [!code ++]\n    implementation(\"androidx.navigation:navigation-fragment-ktx:2.3.5\")\n    implementation(\"androidx.navigation:navigation-ui-ktx:2.3.5\")\n    implementation(\"com.squareup.retrofit2:retrofit:2.9.0\")\n    implementation(\"com.squareup.retrofit2:converter-gson:2.9.0\")\n    implementation(\"org.jetbrains:markdown:0.7.3\")\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Search and Action Button in Actions Slot\nDESCRIPTION: Demonstrates how to add a search input and an action button to the actions slot in the header.\nSOURCE: https://github.com/directus/docs/blob/main/content/tutorials/5.extensions/understand-available-slots-in-custom-modules.md#2025-04-09_snippet_4\n\nLANGUAGE: vue\nCODE:\n```\n<template #actions>\n\t<v-input class=\"module-search\" :model-value=\"search\">\n\t\t<template #prepend><v-icon name=\"search\" /></template>\n\t</v-input>\n\t<v-button v-tooltip.bottom=\"'COOL'\" icon rounded>\n\t\t<v-icon name=\"launch\" />\n\t</v-button>\n</template>\n```\n\nLANGUAGE: scss\nCODE:\n```\n.v-input.full-width.module-search {\n    display: flex;\n    width: 300px;\n    height: 44px;\n\n    .input {\n        width: auto;\n        padding: 0 10px;\n        overflow: hidden;\n        color: var(--theme--foreground);\n        text-overflow: ellipsis;\n        background-color: var(--theme--background);\n        border-radius: 22px;\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring CORS for Directus in Docker Compose\nDESCRIPTION: Updates the docker-compose.yml file to enable CORS for the Directus project, allowing communication with the SvelteKit frontend.\nSOURCE: https://github.com/directus/docs/blob/main/content/tutorials/1.getting-started/rendering-dynamic-blocks-using-sveltekit.md#2025-04-09_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nCORS_ENABLED: \"true\"\nCORS_ORIGIN: \"http://localhost:5173\"\nCORS_CREDENTIALS: \"true\"\n```\n\n----------------------------------------\n\nTITLE: Chat Interface Template in HTML\nDESCRIPTION: Displays the chat message list with user names and message content in a Vue template structure.\nSOURCE: https://github.com/directus/docs/blob/main/content/tutorials/2.projects/build-a-realtime-chat-app-using-directus-and-nuxt.md#2025-04-09_snippet_11\n\nLANGUAGE: html\nCODE:\n```\n<div v-else>\n  <h2>Chat</h2>\n  <div v-for=\"message in messageList\" :key=\"message.id\">\n    {{ message.user_created.first_name }}: {{ message.content }}\n  </div>\n</div>\n```\n\n----------------------------------------\n\nTITLE: Querying Collection Fields from Directus in Next.js\nDESCRIPTION: Next.js page component that fetches and displays fields from a Directus collection, demonstrating how to access collection schema data.\nSOURCE: https://github.com/directus/docs/blob/main/content/tutorials/2.projects/build-forms-dynamically-using-directus-and-next.md#2025-04-09_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\nimport { React } from 'react';\nimport client from '@/lib/directus';\nimport { readFieldsByCollection } from '@directus/sdk';\nexport default async function Page({ params: {slug} }) {\n    try {\n    const postsFields = await client.request(readFieldsByCollection('posts'));\n    console.log(postsFields)\n\t\n    return (<div>\n        Fetching the fields. Check the console output!\n    </div>)\n    } catch (e) {\n        console.log(e)\n        return <div>Something went wrong!</div>\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Accessing Files via URL Pattern in Directus\nDESCRIPTION: Shows the basic URL pattern for accessing files in Directus. Requires an access token if public access is not enabled.\nSOURCE: https://github.com/directus/docs/blob/main/content/getting-started/6.upload-files.md#2025-04-09_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\nhttps://example.directus.app/assets/<file-id>?access_token=token\n```\n\n----------------------------------------\n\nTITLE: Installing Directus SDK\nDESCRIPTION: npm command to install Directus SDK dependency\nSOURCE: https://github.com/directus/docs/blob/main/content/tutorials/2.projects/build-a-realtime-chat-app-with-directus-and-sveltekit.md#2025-04-09_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nnpm install @directus/sdk\n```\n\n----------------------------------------\n\nTITLE: Configuring Directus with Docker Compose\nDESCRIPTION: This Docker Compose file sets up a Directus container with volume mappings for database, uploads, and extensions. It includes environment variables for initial configuration.\nSOURCE: https://github.com/directus/docs/blob/main/content/getting-started/2.create-a-project.md#2025-04-09_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\nservices:\n\tdirectus:\n\t\timage: directus/directus:11.5.1\n\t\tports:\n\t\t\t- 8055:8055\n\t\tvolumes:\n\t\t\t- ./database:/directus/database\n\t\t\t- ./uploads:/directus/uploads\n\t\t\t- ./extensions:/directus/extensions\n\t\tenvironment:\n\t\t\tSECRET: \"replace-with-random-value\"\n\t\t\tADMIN_EMAIL: \"admin@example.com\"\n\t\t\tADMIN_PASSWORD: \"d1r3ctu5\"\n\t\t\tDB_CLIENT: \"sqlite3\"\n\t\t\tDB_FILENAME: \"/directus/database/data.db\"\n\t\t\tWEBSOCKETS_ENABLED: \"true\"\n```\n\n----------------------------------------\n\nTITLE: Building Directus Custom Operation\nDESCRIPTION: Command to build the custom operation after making changes to the files.\nSOURCE: https://github.com/directus/docs/blob/main/content/tutorials/5.extensions/use-npm-packages-in-custom-operations.md#2025-04-09_snippet_4\n\nLANGUAGE: shell\nCODE:\n```\nnpm run build\n```\n\n----------------------------------------\n\nTITLE: TypeScript Type Definitions\nDESCRIPTION: Type definitions for products, categories, and orders used in the e-commerce platform\nSOURCE: https://github.com/directus/docs/blob/main/content/tutorials/2.projects/build-an-ecommerce-platform-with-next-js-stripe-and-directus-automate.md#2025-04-09_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nexport type ProductTypes = {\n  id: number;\n  name: string;\n  image: string;\n  price: number;\n  description: string;\n  category: CategoryTypes[]\n  is_available: boolean;\n  order_id: OrderTypes\n};\nexport type CategoryTypes = {\n  name: string;\n  description: string\n}\n export type OrderTypes = {\n  order_no: string;\n  email: string;\n  date: string;\n  total_amount: string;\n  first_name: string;\n  last_name: string;\n  shipping_address: string;\n  products: number[];\n  payment_id: string;\n };\n```\n\n----------------------------------------\n\nTITLE: Creating Environment Variables for Directus API URL\nDESCRIPTION: Content for .env file to configure the Directus API URL used by the Nuxt application.\nSOURCE: https://github.com/directus/docs/blob/main/content/tutorials/1.getting-started/implementing-live-preview-in-nuxt.md#2025-04-09_snippet_3\n\nLANGUAGE: plaintext\nCODE:\n```\nAPI_URL=\"http://0.0.0.0:8055/**\"\n```\n\n----------------------------------------\n\nTITLE: Sample Markdown Content for Multilingual Posts\nDESCRIPTION: Example markdown content to be used in the Directus posts collection as the primary language content.\nSOURCE: https://github.com/directus/docs/blob/main/content/tutorials/1.getting-started/implementing-multilingual-content-using-directus-and-nuxt.md#2025-04-09_snippet_8\n\nLANGUAGE: md\nCODE:\n```\nRabbits are known for their quickness and agility, but did you know they can also be incredibly productive? Here are a few tips to help you become the most productive rabbit you can be:\n\nSet clear goals. Determine what you want to achieve and make a plan to reach your goals.\n\nUse your natural abilities. Rabbits are quick, so use that speed to your advantage by completing tasks quickly and efficiently.\n\nStay organized. Keep your burrow neat and tidy so you can quickly find what you need when you need it.\n\nTake breaks. Despite their reputation for being quick, rabbits need breaks too. Take short hops to stretch your legs and rest your mind.\n\nSurround yourself with positive influences. Make friends with other productive rabbits and learn from their habits.\n\nBy following these tips, you'll be well on your way to becoming the most productive rabbit you can be. So, get hopping and get things done!\n```\n\n----------------------------------------\n\nTITLE: Installing Directus SDK in Nuxt Project\nDESCRIPTION: Installs the Directus SDK package in the Nuxt project using npm, which enables communication with the Directus API.\nSOURCE: https://github.com/directus/docs/blob/main/content/tutorials/1.getting-started/rendering-dynamic-blocks-using-nuxt.md#2025-04-09_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nnpm install @directus/sdk\n```\n\n----------------------------------------\n\nTITLE: Creating Form Event Listeners for Login and Message Submission\nDESCRIPTION: Adds submit event listeners to both the login and new message forms. The event.preventDefault() prevents the default form submission behavior to handle the actions via JavaScript.\nSOURCE: https://github.com/directus/docs/blob/main/content/tutorials/2.projects/build-a-multi-user-chat-with-javascript-and-directus-realtime.md#2025-04-09_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\ndocument.querySelector('#login').addEventListener('submit', function (event) {\n\tevent.preventDefault();\n});\n\ndocument.querySelector('#new').addEventListener('submit', function (event) {\n\tevent.preventDefault();\n});\n```\n\n----------------------------------------\n\nTITLE: Italian Translation Markdown Content\nDESCRIPTION: Italian translation of the rabbit productivity post to be used in the posts_translations collection in Directus.\nSOURCE: https://github.com/directus/docs/blob/main/content/tutorials/1.getting-started/implementing-multilingual-content-using-directus-and-nuxt.md#2025-04-09_snippet_10\n\nLANGUAGE: md\nCODE:\n```\nI conigli sono noti per la loro rapidità e agilità, ma sapevi che possono anche essere incredibilmente produttivi? Ecco alcuni suggerimenti per aiutarti a diventare il coniglio più produttivo possibile:\n\nFissa obiettivi chiari. Determina cosa vuoi ottenere e fai un piano per raggiungerli.\n\nUsa le tue abilità naturali. I conigli sono veloci, quindi usa questa velocità a tuo vantaggio completando i compiti in modo rapido ed efficiente.\n\nSii organizzato. Tieni la tua tana pulita e in ordine in modo da trovare rapidamente ciò di cui hai bisogno quando ne hai bisogno.\n\nFai delle pause. Nonostante la loro reputazione di essere veloci, anche i conigli hanno bisogno di pause. Fai dei piccoli salti per sgranchirti le gambe e riposare la mente.\n\nCircondati di influenze positive. Fai amicizia con altri conigli produttivi e impara dalle loro abitudini.\n\nSeguendo questi suggerimenti, sarai sulla buona strada per diventare il coniglio più produttivo possibile. Quindi, salta e fai le cose!\n```\n\n----------------------------------------\n\nTITLE: Creating ArticleDTO for JSON Deserialization in Java\nDESCRIPTION: Defines a Data Transfer Object (DTO) to match the JSON structure returned by Directus API. Uses @JsonProperty annotation to map the 'data' field to a List of Articles.\nSOURCE: https://github.com/directus/docs/blob/main/content/tutorials/1.getting-started/fetch-data-from-directus-with-spring-boot.md#2025-04-09_snippet_1\n\nLANGUAGE: java\nCODE:\n```\npackage com.directus.blog.model;\n\nimport com.fasterxml.jackson.annotation.JsonProperty;\nimport lombok.Data;\n\nimport java.util.List;\n@Data\npublic class ArticleDTO {\n    @JsonProperty(\"data\")\n    private List<Article> articles;\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Directus SDK Wrapper in SvelteKit\nDESCRIPTION: JavaScript code to create a wrapper for the Directus SDK, making it accessible globally and compatible with SvelteKit's server-side rendering. It initializes the SDK with the provided API URL and fetch implementation.\nSOURCE: https://github.com/directus/docs/blob/main/content/tutorials/1.getting-started/fetch-data-from-directus-with-sveltekit.md#2025-04-09_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport { createDirectus, rest } from '@directus/sdk';\nimport { readItems, readItem, updateItem, updateUser, createItem, deleteItem } from '@directus/sdk';\nimport { PUBLIC_APIURL } from '$env/static/public';\n\nfunction getDirectusInstance(fetch) {\n  \tconst options = fetch ? { globals: { fetch } } : {};\n\tconst directus = createDirectus(PUBLIC_APIURL, options ).with(rest());\n\treturn directus;\n}\n\nexport default getDirectusInstance;\n```\n\n----------------------------------------\n\nTITLE: Creating Directus SDK Wrapper in SvelteKit\nDESCRIPTION: JavaScript code to create a wrapper for the Directus SDK, making it accessible globally and compatible with SvelteKit's server-side rendering. It initializes the SDK with the provided API URL and fetch implementation.\nSOURCE: https://github.com/directus/docs/blob/main/content/tutorials/1.getting-started/fetch-data-from-directus-with-sveltekit.md#2025-04-09_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport { createDirectus, rest } from '@directus/sdk';\nimport { readItems, readItem, updateItem, updateUser, createItem, deleteItem } from '@directus/sdk';\nimport { PUBLIC_APIURL } from '$env/static/public';\n\nfunction getDirectusInstance(fetch) {\n  \tconst options = fetch ? { globals: { fetch } } : {};\n\tconst directus = createDirectus(PUBLIC_APIURL, options ).with(rest());\n\treturn directus;\n}\n\nexport default getDirectusInstance;\n```\n\n----------------------------------------\n\nTITLE: Dynamic Page Routing in SvelteKit\nDESCRIPTION: Creates a dynamic route in SvelteKit to fetch and render page content based on the URL slug.\nSOURCE: https://github.com/directus/docs/blob/main/content/tutorials/1.getting-started/rendering-dynamic-blocks-using-sveltekit.md#2025-04-09_snippet_8\n\nLANGUAGE: svelte\nCODE:\n```\n<!--src/routes/[slug]/+page.svelte--> \n<script>\n    import { onMount } from 'svelte';\n    import { page } from '$app/stores';\n    import { fetchPage } from '$lib/fetchPage'\n    import PageBuilder from '$lib/pageBuilder.svelte';\n    import { get } from 'svelte/store';\n\n    let pageData = null;\n\n    async function loadPage() {\n        const slug = get(page).params.slug; \n        pageData = await fetchPage(slug);\n    }\n\n    onMount(loadPage);\n</script>\n\n{#if pageData}\n    <PageBuilder blocks={pageData.blocks} />\n{:else}\n    <p>Loading...</p>\n{/if}\n```\n\n----------------------------------------\n\nTITLE: Updating Root Layout with CartProvider in Next.js\nDESCRIPTION: Updates the root layout component to wrap the entire application with the CartProvider, ensuring cart functionality is available throughout the app.\nSOURCE: https://github.com/directus/docs/blob/main/content/tutorials/2.projects/build-an-ecommerce-platform-with-next-js-stripe-and-directus-automate.md#2025-04-09_snippet_7\n\nLANGUAGE: tsx\nCODE:\n```\nimport type { Metadata } from \"next\";\nimport { CartProvider } from \"./context/cart-context\";\n\n\nexport const metadata: Metadata = {\n  title: \"Create Next App\",\n  description: \"Generated by create next app\",\n};\n\nexport default function RootLayout({\n  children,\n}: Readonly<{\n  children: React.ReactNode;\n}>) {\n  return (\n    <CartProvider>\n      <html lang=\"en\">\n        <body>\n          <main>\n            {children}\n          </main>\n        </body>\n      </html>\n    </CartProvider>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Session Cookie Authentication in Directus\nDESCRIPTION: Examples showing how to authenticate with session cookies instead of tokens. Demonstrates setting the mode parameter to 'session' across different implementations.\nSOURCE: https://github.com/directus/docs/blob/main/content/guides/3.auth/4.email-login.md#2025-04-09_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"email\": \"hello@example.com\",\n  \"password\": \"d1r3ctu5\",\n  \"mode\": \"session\"\n}\n```\n\nLANGUAGE: graphql\nCODE:\n```\nmutation {\n\tauth_login(email: \"hello@example.com\", password: \"d1r3ctu5\", mode: \"session\") {\n\t\taccess_token\n\t\trefresh_token\n\t}\n}\n```\n\nLANGUAGE: javascript\nCODE:\n```\nimport { createDirectus, authentication } from '@directus/sdk';\n\nconst email = \"hello@example.com\";\nconst password = \"d1r3ctu5\";\n\nconst client = createDirectus('http://directus.example.com').with(authentication());\n\nconst token = await client.login(email, password, {mode: \"session\"});\n```\n\n----------------------------------------\n\nTITLE: Creating Profile Component\nDESCRIPTION: React component for the Profile page that will show the user's profile information and includes a link back to the Home page.\nSOURCE: https://github.com/directus/docs/blob/main/content/tutorials/1.getting-started/using-authentication-in-react.md#2025-04-09_snippet_8\n\nLANGUAGE: javascript\nCODE:\n```\n// src/routes/Profile.jsx\n\nimport {useEffect, useState} from 'react';\nimport { Link } from 'react-router-dom';\n\nconst Profile = () => {\n\n    return (\n        <div>\n            Profile Component\n            <Link to=\"/\">Go to Home</Link>\n        </div>\n    );\n};\n\nexport default Profile;\n```\n\n----------------------------------------\n\nTITLE: Initializing FieldsService in JavaScript\nDESCRIPTION: Sets up a FieldsService instance within a route handler. This service is used for performing CRUD operations on fields used in collections.\nSOURCE: https://github.com/directus/docs/blob/main/content/tutorials/5.extensions/read-collection-data-in-custom-layouts.md#2025-04-09_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nexport default defineEndpoint((router, context) => {\n  const { services, getSchema } = context;\n  const { FieldsService } = services;\n\n  router.get('/', async (req, res) => {\n    const fieldsService = new FieldsService({\n      schema: await getSchema(),\n      accountability: req.accountability\n    });\n\n    // Your route handler logic\n  });\n});\n```\n\n----------------------------------------\n\nTITLE: Creating a DateTime Input Component in Vue.js for Directus\nDESCRIPTION: A Vue component that implements a datetime-local input field with two-way data binding for Directus datetime fields. The component respects field width, required status, and handles default values.\nSOURCE: https://github.com/directus/docs/blob/main/content/tutorials/2.projects/build-forms-dynamically-using-directus-and-nuxt.md#2025-04-09_snippet_13\n\nLANGUAGE: vue\nCODE:\n```\n<script setup lang=\"ts\">\nimport { computed } from 'vue'\n\nconst props = defineProps<{\n\tdefaultValue?: string\n\tlabel?: string\n\twidth: string | null\n\tfield: string\n\trequired: boolean\n\toptions: Record<string, any> | null\n\tmodelValue?: string\n}>()\n\nconst emit = defineEmits(['update:modelValue'])\n\nconst fieldWidth = props.width === 'full' ? '100%' : '50%'\n\nconst dateTimeValue = computed({\n\tget() {\n\t\treturn props.modelValue || props.defaultValue || ''\n\t},\n\tset(value) {\n\t\temit('update:modelValue', value)\n\t}\n})\n</script>\n\n<template>\n\t<div :style=\"'width: ' + fieldWidth + ';'\">\n\t\t<label for=\"field\">{{ label }}</label>\n\t\t<input :name=\"field\" v-model=\"dateTimeValue\" type=\"datetime-local\" :required=\"required\" />\n\t</div>\n</template>\n\n<style scoped>\ninput {\n\twidth: 100%;\n}\n</style>\n```\n\n----------------------------------------\n\nTITLE: Forwarding Webhook Events to Local Next.js Server\nDESCRIPTION: Command to forward Stripe webhook events to a local Next.js API route. This creates a tunnel that allows your local development environment to receive events from Stripe.\nSOURCE: https://github.com/directus/docs/blob/main/content/tutorials/2.projects/build-an-hotel-booking-platform-with-next-js-stripe-and-directus-automate.md#2025-04-09_snippet_18\n\nLANGUAGE: bash\nCODE:\n```\nstripe listen --forward-to localhost:3000/api/webhook/stripe\n```\n\n----------------------------------------\n\nTITLE: Configuring CORS Settings in Directus\nDESCRIPTION: Configuration variables for Cross-Origin Resource Sharing (CORS) settings including origin control, allowed methods, headers, credentials, and cache duration.\nSOURCE: https://github.com/directus/docs/blob/main/content/configuration/security-limits.md#2025-04-09_snippet_2\n\nLANGUAGE: markdown\nCODE:\n```\n| Variable               | Description                                                                                                                                             | Default Value                |\n| ---------------------- | ------------------------------------------------------------------------------------------------------------------------------------------------------- | ---------------------------- |\n| `CORS_ENABLED`         | Whether or not to enable the CORS headers.                                                                                                              | `false`                      |\n| `CORS_ORIGIN`          | Value for the `Access-Control-Allow-Origin` header. Use `true` to match the Origin header, or provide a domain or a CSV of domains for specific access. | `false`                      |\n| `CORS_METHODS`         | Value for the `Access-Control-Allow-Methods` header.                                                                                                    | `GET,POST,PATCH,DELETE`      |\n| `CORS_ALLOWED_HEADERS` | Value for the `Access-Control-Allow-Headers` header.                                                                                                    | `Content-Type,Authorization` |\n| `CORS_EXPOSED_HEADERS` | Value for the `Access-Control-Expose-Headers` header.                                                                                                   | `Content-Range`              |\n| `CORS_CREDENTIALS`     | Whether or not to send the `Access-Control-Allow-Credentials` header.                                                                                   | `true`                       |\n| `CORS_MAX_AGE`         | Value for the `Access-Control-Max-Age` header.                                                                                                          | `18000`                      |\n```\n\n----------------------------------------\n\nTITLE: Invite User API Call in Directus\nDESCRIPTION: Endpoint for inviting new users to the system. Requires email and role, creates a user with 'invited' status and sends an invitation email.\nSOURCE: https://github.com/directus/docs/blob/main/content/guides/3.auth/3.creating-users.md#2025-04-09_snippet_3\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"email\": \"hello@example.com\",\n  \"role\": \"c86c2761-65d3-43c3-897f-6f74ad6a5bd7\"\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Language Selection and Dynamic Content Rendering in SvelteKit\nDESCRIPTION: This snippet shows how to add language selection functionality and dynamically render article translations based on the selected language in a SvelteKit component. It includes a dropdown for language selection and conditional rendering of article content.\nSOURCE: https://github.com/directus/docs/blob/main/content/tutorials/1.getting-started/implement-multilingual-content-with-directus-and-svelte-kit.md#2025-04-09_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\n<script>\n  import { goto } from '$app/navigation';\n  export let data;\n  $: ({ article, languages, languageCode } = data);\n\n  let selectedLanguageCode = languageCode;\n\n  function handleLanguageChange(event) {\n    const newLanguageCode = event.target.value;\n    selectedLanguageCode = newLanguageCode; // Update the selectedLanguageCode\n    goto(`?lang=${newLanguageCode}`, { replaceState: true });\n  }\n</script>\n\n{#if article}\n  <h1>{article.translations[0].title}</h1>\n  {@html article.translations[0].body}\n  <select value={selectedLanguageCode} on:change={handleLanguageChange}>\n    {#each languages as language}\n      {console.log(language)}\n      <option value={language.code}>{language.name}</option>\n    {/each}\n  </select>\n{:else}\n  <p>News not found.</p>\n{/if}\n```\n\n----------------------------------------\n\nTITLE: Implementing Content Permissions and Delete Functionality\nDESCRIPTION: This Vue component updates the posts page to include delete functionality for authenticated users. It checks user permissions and only allows deletion of posts created by the current user.\nSOURCE: https://github.com/directus/docs/blob/main/content/tutorials/1.getting-started/using-authentication-in-nuxt.md#2025-04-09_snippet_20\n\nLANGUAGE: vue\nCODE:\n```\n<script setup lang=\"ts\">\nconst { $directus, $readItems, $isAuthenticated } = useNuxtApp()\nimport { deleteItem } from '@directus/sdk'\nconst deleteSuccessful = ref(false)\n\nconst { data, error } = await useAsyncData('post', async () => {\n\ttry {\n\t\treturn await $directus.request(\n\t\t\t$readItems('posts', {\n\t\t\t\tfields: ['id', 'title', 'content', 'user_created']\n\t\t\t})\n\t\t)\n\t} catch (error) {\n\t\tconsole.error(error)\n\t}\n})\n\nconst authUser = await $isAuthenticated()\nif (authUser === false) {\n\tthrow new Error('Not authenticated')\n}\n\nconst deletePost = async (id: number | string) => {\n\ttry {\n\t\tawait $directus.request(\n\t\t\tdeleteItem('posts', id)\n\t\t)\n\t\tdata.value = data.value?.filter(post => post.id !== id)\n\t\tdeleteSuccessful.value = true\n\t} catch (error) {\n\t\tconsole.error(error)\n\t}\n}\n</script>\n<template>\n\t<h1>Posts</h1>\n\t<p v-if=\"deleteSuccessful\">Post deleted successfully</p>\n\t<div v-for=\"post in data\">\n\t\t<h2>{{ post.title }}</h2>\n\t\t<button v-if=\"authUser.id === post.user_created\" @click=\"deletePost(post.id)\">Delete</button>\n\t\t<hr />\n\t</div>\n</template>\n```\n\n----------------------------------------\n\nTITLE: Generating Posts Component in Angular CLI\nDESCRIPTION: Command to generate a new posts component using Angular CLI\nSOURCE: https://github.com/directus/docs/blob/main/content/tutorials/1.getting-started/fetch-data-from-directus-with-angular.md#2025-04-09_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\nng g c component/posts\n```\n\n----------------------------------------\n\nTITLE: Defining Article Model in Java\nDESCRIPTION: Creates a Java class to represent an Article with id, title, featuredImage, and body fields. Uses Lombok @Data annotation for automatic getter and setter generation.\nSOURCE: https://github.com/directus/docs/blob/main/content/tutorials/1.getting-started/fetch-data-from-directus-with-spring-boot.md#2025-04-09_snippet_0\n\nLANGUAGE: java\nCODE:\n```\npackage com.directus.blog.model;\n\nimport lombok.Data;\n\n@Data\npublic class Article {\n    private Long id;\n\n    private String title;\n\n    private String featuredImage;\n\n    private String body;\n}\n```\n\n----------------------------------------\n\nTITLE: Iterating Over Arrays in LiquidJS Email Template\nDESCRIPTION: This snippet shows how to use a for loop in a LiquidJS email template to iterate over an array of items and render each one.\nSOURCE: https://github.com/directus/docs/blob/main/content/tutorials/5.extensions/use-dynamic-values-in-custom-email-templates.md#2025-04-09_snippet_4\n\nLANGUAGE: liquid\nCODE:\n```\n{% layout \"my-custom-base\" %}\n{% block content %}\n    <div>\n        {% for item in items %}\n            <div><a href=\"{{ item.url }}\">{{ item.title }}</a></div>\n        {% endfor %}\n    </div>\n{% endblock %}\n```\n\n----------------------------------------\n\nTITLE: Implementing Success Message Component for Order Confirmation\nDESCRIPTION: A client-side component that displays a success message after a successful payment. It accesses the CartContext to clear the cart items after order completion and displays the order number.\nSOURCE: https://github.com/directus/docs/blob/main/content/tutorials/2.projects/build-an-ecommerce-platform-with-next-js-stripe-and-directus-automate.md#2025-04-09_snippet_19\n\nLANGUAGE: tsx\nCODE:\n```\n\"use client\";\n\nimport { CartContext } from \"@/app/context/cart-context\";\nimport { useContext, useEffect } from \"react\";\n\n\nexport default function SuccessMessage({ orderNo }: { orderNo: string }) {\n  const { clearCart } = useContext(CartContext);\n\n  useEffect(() => {\n    console.log(\"Clearing cart\");\n      clearCart();\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, []);\n  return (\n    <section>\n      <h1>Congratulations! Your Order was successfully placed, your Order No is: {orderNo}</h1>\n    </section>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Contact Selection Options in JavaScript\nDESCRIPTION: Defines options for selecting the contact collection, phone number field, and applying filters in the panel extension configuration.\nSOURCE: https://github.com/directus/docs/blob/main/content/tutorials/5.extensions/send-sms-messages-with-twilio-in-custom-panels.md#2025-04-09_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\n{\n\tfield: 'collection',\n\ttype: 'string',\n\tname: '$t:collection',\n\tmeta: {\n\t\tinterface: 'system-collection',\n\t\toptions: {\n\t\t\tincludeSystem: true,\n\t\t\tincludeSingleton: false,\n\t\t},\n\t\twidth: 'half',\n\t},\n},\n{\n\tfield: 'phoneNumberField',\n\ttype: 'string',\n\tname: 'Phone Number',\n\tmeta: {\n\t\tinterface: 'system-field',\n\t\toptions: {\n\t\t\t\tcollectionField: 'collection',\n\t\t\t\ttypeAllowList: ['string','integer'],\n\t\t},\n\t\twidth: 'half',\n\t},\n},\n{\n\tfield: 'filter',\n\ttype: 'json',\n\tname: '$t:filter',\n\tmeta: {\n\t\tinterface: 'system-filter',\n\t\toptions: {\n\t\t\tcollectionField: 'collection',\n\t\t\trelationalFieldSelectable: false,\n\t\t},\n\t},\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Schema for User Authentication in JavaScript\nDESCRIPTION: Schema definition for querying the directus_users system collection. This is used to validate user authentication before allowing access to the proxy endpoint.\nSOURCE: https://github.com/directus/docs/blob/main/content/tutorials/5.extensions/proxy-an-external-api-in-a-custom-endpoint-extension.md#2025-04-09_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nconst schema = {\n  collections: {\n    directus_users: {\n      collection: 'directus_users',\n      primary: 'id',\n      singleton: false,\n      accountability: 'all',\n      fields: {\n        id: {\n          field: 'id',\n          defaultValue: null,\n          nullable: false,\n          generated: false,\n          type: 'uuid',\n          dbType: 'uuid',\n          special: [],\n          alias: false\n        }\n      }\n    }\n  }\n};\n```\n\n----------------------------------------\n\nTITLE: Installing Directus SDK\nDESCRIPTION: Command to install the Directus SDK for React integration.\nSOURCE: https://github.com/directus/docs/blob/main/content/tutorials/1.getting-started/implementing-live-preview-in-react.md#2025-04-09_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\nnpm install @directus/sdk\n```\n\n----------------------------------------\n\nTITLE: Participant Counter Function\nDESCRIPTION: Simple function that counts the number of participants in the webhook request body\nSOURCE: https://github.com/directus/docs/blob/main/content/tutorials/3.tips-and-tricks/build-a-monitoring-pipeline-for-flows-and-extensions-.md#2025-04-09_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nmodule.exports = async function(data) {\n\treturn {\"nr_of_imported_participants\": data.$trigger.body.length};\n}\n```\n\n----------------------------------------\n\nTITLE: Generating Individual Post Component\nDESCRIPTION: Command to generate a new component for individual post display\nSOURCE: https://github.com/directus/docs/blob/main/content/tutorials/1.getting-started/fetch-data-from-directus-with-angular.md#2025-04-09_snippet_10\n\nLANGUAGE: bash\nCODE:\n```\nng g c component/post\n```\n\n----------------------------------------\n\nTITLE: Custom Module Vue Component Template\nDESCRIPTION: Basic Vue component template for a custom module showing how to use the private-view component for consistent Directus layout integration.\nSOURCE: https://github.com/directus/docs/blob/main/content/guides/9.extensions/3.app-extensions/5.modules.md#2025-04-09_snippet_1\n\nLANGUAGE: vue\nCODE:\n```\n<template>\n\t<private-view title=\"My Custom Module\">Content goes here...</private-view>\n</template>\n\n<script>\nexport default {};\n</script>\n```\n\n----------------------------------------\n\nTITLE: Basic Vue Display Component Template\nDESCRIPTION: Initial Vue component setup for the display extension with basic value rendering\nSOURCE: https://github.com/directus/docs/blob/main/content/tutorials/5.extensions/format-dates-in-a-custom-display-extension.md#2025-04-09_snippet_3\n\nLANGUAGE: vue\nCODE:\n```\n<template>\n  <div>Value: {{ value }}</div>\n</template>\n\n<script>\nexport default {\n  props: {\n    value: {\n      type: String,\n      default: null,\n    },\n  },\n};\n</script>\n```\n\n----------------------------------------\n\nTITLE: Adding Click Event Binding\nDESCRIPTION: Adding click event handler to post links\nSOURCE: https://github.com/directus/docs/blob/main/content/tutorials/1.getting-started/fetch-data-from-directus-with-angular.md#2025-04-09_snippet_14\n\nLANGUAGE: typescript\nCODE:\n```\n<a routerLink=\"#\" (click)=\"goToPost(post.slug)\">\n      <h2>{{post.title}}</h2>\n</a>\n```\n\n----------------------------------------\n\nTITLE: Implementing Video Service with Directus SDK\nDESCRIPTION: A service function that fetches videos from the Directus API using the SDK. It accepts optional parameters for sorting, limiting, and selecting specific fields.\nSOURCE: https://github.com/directus/docs/blob/main/content/tutorials/2.projects/build-a-video-streaming-app-with-sveltekit-and-directus.md#2025-04-09_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\nimport getDirectusClient from \"$lib/directus\";\nimport { readItems } from \"@directus/sdk\";\nimport type { Video } from \"$lib/types\";\n\nexport async function getVideos(params = {}): Promise<Video[]> {\n  const directus = getDirectusClient();\n  const response = await directus.request(readItems(\"videos\", params));\n  return response as Video[];\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing the Post Component for Content Display\nDESCRIPTION: React component that fetches and displays a single post using the Directus SDK, handling loading states and errors.\nSOURCE: https://github.com/directus/docs/blob/main/content/tutorials/1.getting-started/implementing-live-preview-in-react.md#2025-04-09_snippet_9\n\nLANGUAGE: jsx\nCODE:\n```\nimport React, { useState, useEffect } from 'react';\nimport { useParams } from 'react-router-dom';\nimport client from './lib/directus';\nimport { readItem } from '@directus/sdk';\n\nconst Post = () => {\n  const { id } = useParams();\n  const [article, setArticle] = useState(null);\n\n\n  // Fetch the article using its id\n  const fetchArticle = async () => {\n    let result\n    \n    try {\n      result = await client.request(readItem('posts', id));\n    } catch (error) {\n      if (error.response.status === 403) {\n        console.error('Either this post is private or you do not have access to it');\n      } else console.error('Error fetching article:', error);\n      result = {\n        title: \"Post not found\",\n        content: \"We couldn't find this post\"\n      }\n    }\n    setArticle(result);\n  };\n\n  useEffect(() => {\n    fetchArticle();\n  }, [id]);\n\n  if (!article) {\n    return <div>Loading...</div>;\n  }\n\n  return (\n    <div>\n      <h1>{article.title}</h1>\n      <p>{article.content}</p>\n    </div>\n  );\n};\n\nexport default Post;\n```\n\n----------------------------------------\n\nTITLE: Defining Collections for Directus Backend in a Santa Roast App\nDESCRIPTION: This markdown snippet outlines the main collections used in the Directus backend for the Salty Open Source Santa app, including profiles for storing letters and scores, likes for the spicy meter, metrics for calculated data, and globals for site configuration.\nSOURCE: https://github.com/directus/docs/blob/main/content/tutorials/2.projects/how-i-built-an-ai-open-source-santa-roast-app-with-directus-and-nuxt.md#2025-04-09_snippet_0\n\nLANGUAGE: md\nCODE:\n```\n// Our main collections\n- profiles (stores all the letters and scores)\n- likes (for that spicy meter!)\n- metrics (for storing calculated metrics on a daily basis)\n- globals (help content, site title, etc.)\n```\n\n----------------------------------------\n\nTITLE: Adding Stripe Webhook Secret to Environment Variables\nDESCRIPTION: A snippet showing how to set up the Stripe webhook signing secret in the .env.local file. This secret is used to verify that incoming webhook requests are genuinely coming from Stripe.\nSOURCE: https://github.com/directus/docs/blob/main/content/tutorials/2.projects/build-an-ecommerce-platform-with-next-js-stripe-and-directus-automate.md#2025-04-09_snippet_23\n\nLANGUAGE: bash\nCODE:\n```\nSTRIPE_WEBHOOK_SECRET=whsec_f9e4axxxxxxx\n```\n\n----------------------------------------\n\nTITLE: Initializing Directus SDK\nDESCRIPTION: JavaScript code for initializing the Directus SDK client with REST functionality.\nSOURCE: https://github.com/directus/docs/blob/main/content/tutorials/1.getting-started/implementing-live-preview-in-sveltekit.md#2025-04-09_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nimport { createDirectus, rest } from '@directus/sdk';\nconst client = createDirectus('directus_project_url').with(rest());\n```\n\n----------------------------------------\n\nTITLE: Implementing Posts Component Logic\nDESCRIPTION: TypeScript implementation of the Posts component that fetches and displays blog posts using Directus SDK\nSOURCE: https://github.com/directus/docs/blob/main/content/tutorials/1.getting-started/fetch-data-from-directus-with-angular.md#2025-04-09_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\nimport {Component, OnInit} from '@angular/core';\nimport {directus, Post} from \"../../../../directus\";\nimport {RouterLink} from \"@angular/router\";\nimport {CommonModule} from \"@angular/common\";\nimport {readItems} from \"@directus/sdk\";\n\n@Component({\n  selector: 'app-posts',\n  standalone: true,\n  imports: [CommonModule, RouterLink],\n  templateUrl: './posts.component.html',\n  styleUrl: './posts.component.css'\n})\nexport class PostsComponent implements OnInit{\n  posts: Post[];\n\n  ngOnInit(): void {\n    this.getAllPosts();\n  }\n\n  async getAllPosts(){\n    //@ts-ignore\n    this.posts = await directus\n      .request<Post[]>(readItems(\"posts\", {\n        fields: [\"slug\",\"title\", \"published_date\", {author: [\"name\"]}]\n      }))\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Building the Directus Extension\nDESCRIPTION: Command to build the Directus hook extension for deployment.\nSOURCE: https://github.com/directus/docs/blob/main/content/tutorials/5.extensions/validate-phone-numbers-with-twilio-in-a-custom-hook.md#2025-04-09_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\nnpm run build\n```\n\n----------------------------------------\n\nTITLE: Dynamic Page Data Fetching\nDESCRIPTION: Function to fetch page data by slug from Directus API\nSOURCE: https://github.com/directus/docs/blob/main/content/tutorials/1.getting-started/fetch-data-from-directus-with-flask.md#2025-04-09_snippet_7\n\nLANGUAGE: python\nCODE:\n```\ndef get_page_by_slug(slug):\n    response = requests.get(f\"{DIRECTUS_BASE_URL}/items/pages?filter[slug][_eq]={slug}\")[0]\n    return response.json().get(\"data\")\n```\n\n----------------------------------------\n\nTITLE: Initializing Python Script for WordPress to Directus Migration\nDESCRIPTION: Sets up the initial Python script for processing WordPress JSON export and preparing it for import into Directus. It includes necessary imports and defines the path to the JSON file containing WordPress data.\nSOURCE: https://github.com/directus/docs/blob/main/content/tutorials/4.migration/migrate-from-wordpress-to-directus.md#2025-04-09_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nimport json\nimport requests\nimport os\n# Replace with the path to your JSON file\njson_file_path = \"WP-data.json\" # Change this with the Pages JSON file to extract images for pages.\n```\n\n----------------------------------------\n\nTITLE: Applying Custom CSS Styles to Directus Data Studio\nDESCRIPTION: This CSS snippet demonstrates how to override default styles in the Directus Data Studio. It changes the font family to 'Comic Sans MS' and sets the primary color to MediumSlateBlue. The example uses !important to ensure the styles are applied due to the dynamic nature of the Data Studio's styling system.\nSOURCE: https://github.com/directus/docs/blob/main/content/configuration/theming.md#2025-04-09_snippet_0\n\nLANGUAGE: css\nCODE:\n```\nbody {\n\t--family-sans-serif: 'Comic Sans MS';\n\t--primary: MediumSlateBlue !important;\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Docker Compose for Directus Deployment with Postgres and Redis\nDESCRIPTION: This Docker Compose configuration sets up a Directus deployment with Postgres database, Redis cache, and local file storage. It includes health checks for the database and cache services, and configures essential environment variables for Directus.\nSOURCE: https://github.com/directus/docs/blob/main/content/self-hosting/3.deploying.md#2025-04-09_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nservices:\n  database:\n    image: postgis/postgis:13-master\n    volumes:\n      - ./data/database:/var/lib/postgresql/data\n    environment:\n      POSTGRES_USER: \"directus\"\n      POSTGRES_PASSWORD: \"directus\"\n      POSTGRES_DB: \"directus\"\n    healthcheck:\n      test: [\"CMD\", \"pg_isready\", \"--host=localhost\", \"--username=directus\"]\n      interval: 10s\n      timeout: 5s\n      retries: 5\n      start_interval: 5s\n      start_period: 30s\n\n  cache:\n    image: redis:6\n    healthcheck:\n      test: [\"CMD-SHELL\", \"[ $$(redis-cli ping) = 'PONG' ]\"]\n      interval: 10s\n      timeout: 5s\n      retries: 5\n      start_interval: 5s\n      start_period: 30s\n\n  directus:\n    image: directus/directus:REPLACE_WITH_VERSION\n    ports:\n      - 8055:8055\n    volumes:\n      - ./uploads:/directus/uploads\n      - ./extensions:/directus/extensions\n    depends_on:\n      database:\n        condition: service_healthy\n      cache:\n        condition: service_healthy\n    environment:\n      SECRET: \"REPLACE_WITH_YOUR_SECRET\"\n\n      DB_CLIENT: \"pg\"\n      DB_HOST: \"database\"\n      DB_PORT: \"5432\"\n      DB_DATABASE: \"directus\"\n      DB_USER: \"directus\"\n      DB_PASSWORD: \"directus\"\n\n      CACHE_ENABLED: \"true\"\n      CACHE_AUTO_PURGE: \"true\"\n      CACHE_STORE: \"redis\"\n      REDIS: \"redis://cache:6379\"\n\n      ADMIN_EMAIL: \"REPLACE_WITH_YOUR_EMAIL\"\n      ADMIN_PASSWORD: \"REPLACE_WITH_YOUR_PASSWORD\"\n\n      PUBLIC_URL: \"REPLACE_WITH_YOUR_URL\"\n```\n\n----------------------------------------\n\nTITLE: Initializing FilesService in Directus API Extension\nDESCRIPTION: This snippet shows how to initialize the FilesService within a Directus API extension route handler. It demonstrates the required parameters and basic setup.\nSOURCE: https://github.com/directus/docs/blob/main/content/guides/9.extensions/2.api-extensions/4.services.md#2025-04-09_snippet_8\n\nLANGUAGE: javascript\nCODE:\n```\nexport default (router, context) => {\n\tconst { services, getSchema } = context;\n\tconst { FilesService } = services;\n\n\trouter.get('/', async (req, res) => {\n\t\tconst filesService = new FilesService({\n\t\t\tschema: await getSchema(),\n\t\t\taccountability: req.accountability\n\t\t});\n\n\t\t// Your route handler logic\n\t});\n};\n```\n\n----------------------------------------\n\nTITLE: Blog Listing Page Component\nDESCRIPTION: Vue component that displays a list of blog posts from Directus\nSOURCE: https://github.com/directus/docs/blob/main/content/tutorials/1.getting-started/fetch-data-from-directus-with-nuxt.md#2025-04-09_snippet_5\n\nLANGUAGE: vue\nCODE:\n```\n<template>\n\t<h1>Blog</h1>\n\t<ul>\n\t\t<li v-for=\"post in posts\" :key=\"post.id\">\n\t\t\t<NuxtLink :href=\"`/blog/${post.slug}`\">\n\t\t\t\t<h2>{{post.title}}</h2>\n\t\t\t</NuxtLink>\n\t\t\t<span>{{post.publish_date}} &bull; {{post.author.name}}</span>\n\t\t</li>\n\t</ul>\n</template>\n\n<script setup>\nconst { $directus, $readItems } = useNuxtApp()\n\nconst { data: posts } = await useAsyncData('posts', () => {\n  return $directus.request(\n\t$readItems('posts', {\n\t\tfields: ['slug', 'title', 'publish_date', { 'author': [ 'name' ] }],\n\t\tsort: ['-publish_date']\n\t})\n  )[0]\n})\n</script>\n```\n\n----------------------------------------\n\nTITLE: Docker Repository Configuration\nDESCRIPTION: Commands to add Docker repository and update package manager\nSOURCE: https://github.com/directus/docs/blob/main/content/tutorials/6.self-hosting/deploy-directus-to-an-ubuntu-server.md#2025-04-09_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\necho \\\n  \"deb [arch=\\\"$(dpkg --print-architecture)\\\" signed-by=/etc/apt/keyrings/docker.gpg] https://download.docker.com/linux/ubuntu \\\n  \\\"$(. /etc/os-release && echo \\\"$VERSION_CODENAME\\\")\\\" stable\" | \\\n  sudo tee /etc/apt/sources.list.d/docker.list > /dev/null\nsudo apt-get update\n```\n\n----------------------------------------\n\nTITLE: Creating a Video Grid Component in Svelte\nDESCRIPTION: A Svelte component that arranges multiple video cards in a responsive grid layout. It uses the VideoCard component to display each video in the provided array.\nSOURCE: https://github.com/directus/docs/blob/main/content/tutorials/2.projects/build-a-video-streaming-app-with-sveltekit-and-directus.md#2025-04-09_snippet_5\n\nLANGUAGE: svelte\nCODE:\n```\n<script lang=\"ts\">\n  import type { Video } from \"$lib/types\";\n  import VideoCard from \"./VideoCard.svelte\";\n  export let videos: Video[];\n</script>\n<div class=\"video-grid\">\n  {#each videos as video}\n    <VideoCard {video} />\n  {/each}\n</div>\n<style>\n  .video-grid { display: grid; grid-template-columns: repeat(auto-fill, minmax(250px, 1fr)); gap: 1rem; }\n</style>\n```\n\n----------------------------------------\n\nTITLE: Configuring Directus Server Settings in Markdown\nDESCRIPTION: This snippet defines server-specific configuration variables for Directus. It includes settings for timeouts and allows for additional server variables to be set.\nSOURCE: https://github.com/directus/docs/blob/main/content/configuration/1.general.md#2025-04-09_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n| Variable                    | Description                                                        | Default Value                                                                                                |\n| --------------------------- | ------------------------------------------------------------------ | ------------------------------------------------------------------------------------------------------------ |\n| `SERVER_KEEP_ALIVE_TIMEOUT` | Timeout in milliseconds for socket to be destroyed.                | [server.keepAliveTimeout](https://github.com/nodejs/node/blob/master/doc/api/http.md#serverkeepalivetimeout) |\n| `SERVER_HEADERS_TIMEOUT`    | Timeout in milliseconds to parse HTTP headers.                     | [server.headersTimeout](https://github.com/nodejs/node/blob/master/doc/api/http.md#serverheaderstimeout)     |\n| `SERVER_SHUTDOWN_TIMEOUT`   | Timeout in milliseconds before the server is forcefully shut down. | 1000                                                                                                         |\n```\n\n----------------------------------------\n\nTITLE: Data Chain Variable Syntax Example in JSON\nDESCRIPTION: Shows how to use data chain variables in operation configuration using the double curly brace syntax.\nSOURCE: https://github.com/directus/docs/blob/main/content/guides/6.automate/2.data-chain.md#2025-04-09_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n\"{{ $accountability }}\"\n```\n\n----------------------------------------\n\nTITLE: Watching for Property Changes\nDESCRIPTION: Vue watcher to monitor changes to collection, fields, and response format properties, triggering the getFields function when changes occur. This ensures the form stays updated with the latest configuration.\nSOURCE: https://github.com/directus/docs/blob/main/content/tutorials/5.extensions/create-collection-items-in-custom-panels.md#2025-04-09_snippet_8\n\nLANGUAGE: javascript\nCODE:\n```\nwatch([() => props.collection, () => props.fields, () => props.responseFormat], getFields);\n```\n\n----------------------------------------\n\nTITLE: Dynamic Page Template\nDESCRIPTION: Template for rendering dynamic pages with title and content from Directus\nSOURCE: https://github.com/directus/docs/blob/main/content/tutorials/1.getting-started/fetch-data-from-directus-with-flask.md#2025-04-09_snippet_8\n\nLANGUAGE: jinja\nCODE:\n```\n{% extends \"base.html\" %}\n{% block content %}\n\t<h1>{% block title %}{{ title }}{% endblock %}</h1>\n\t<article>{{ content | safe }}</article>\n{% endblock %}\n```\n\n----------------------------------------\n\nTITLE: Sending Custom Email with Data in Directus\nDESCRIPTION: This JavaScript snippet shows how to send a custom email using Directus' mail service. It demonstrates injecting custom data into the email template.\nSOURCE: https://github.com/directus/docs/blob/main/content/tutorials/5.extensions/use-dynamic-values-in-custom-email-templates.md#2025-04-09_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nawait mailService.send({\n\tto: 'name@example.com',\n\tsubject: 'This is an example email',\n\ttemplate: {\n\t\tname: 'my-custom-email-template',\n\t\tdata: {\n\t\t\tfirstname: user.firstname,\n\t\t},\n\t},\n});\n```\n\n----------------------------------------\n\nTITLE: Copying Directus Files to Server\nDESCRIPTION: Command to securely copy local Directus folder to remote Ubuntu server using SCP protocol\nSOURCE: https://github.com/directus/docs/blob/main/content/tutorials/6.self-hosting/deploy-directus-to-an-ubuntu-server.md#2025-04-09_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nscp -r /path/to/your/local/directus/folder username@server_ip:/path/to/your/remote/folder\n```\n\n----------------------------------------\n\nTITLE: Making Authenticated Requests in Directus\nDESCRIPTION: This code demonstrates how to make authenticated requests to the Directus API by including the access token in the Authorization header.\nSOURCE: https://github.com/directus/docs/blob/main/content/getting-started/5.authenticate-user.md#2025-04-09_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\ncurl \\\n--header 'Authorization: Bearer YOUR_ACCESS_TOKEN' \\\n--url 'https://directus.example.com/items/posts'\n```\n\n----------------------------------------\n\nTITLE: Defining Vue Component Properties\nDESCRIPTION: Definition of properties (props) for the Vue component, including configuration options passed from the panel settings. These properties determine the panel's behavior and appearance.\nSOURCE: https://github.com/directus/docs/blob/main/content/tutorials/5.extensions/create-collection-items-in-custom-panels.md#2025-04-09_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nprops: {\n  showHeader: {\n    type: Boolean,\n    default: false,\n  },\n  collection: {\n    type: String,\n    default: '',\n  },\n  fields: {\n    type: Array,\n    default: [],\n  },\n  responseFormat: {\n    type: String,\n    default: '',\n  },\n  width: String,\n  height: String,\n},\n```\n\n----------------------------------------\n\nTITLE: SSH Server Access\nDESCRIPTION: Command to access Ubuntu server via SSH\nSOURCE: https://github.com/directus/docs/blob/main/content/tutorials/6.self-hosting/deploy-directus-to-an-ubuntu-server.md#2025-04-09_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nssh username@server_ip\n```\n\n----------------------------------------\n\nTITLE: Implementing Card Group Component in Astro\nDESCRIPTION: Astro component for rendering a card group block that can display either posts or custom cards from Directus CMS.\nSOURCE: https://github.com/directus/docs/blob/main/content/tutorials/1.getting-started/rendering-dynamic-blocks-using-astro.md#2025-04-09_snippet_6\n\nLANGUAGE: astro\nCODE:\n```\n---\nconst {\n  headline = '',\n  content = '',\n  posts = [],\n  cards = [],\n  group_type = 'custom'\n} = Astro.props.item || {};\n\nconst DIRECTUS_URL = import.meta.env.DIRECTUS_URL;\n---\n\n<section>\n  {headline && <h2>{headline}</h2>}\n\n  {content && <div set:html={content}></div>}\n\n  <div>\n    {group_type === \"posts\" && posts.length > 0 && (\n      <div style=\"display: flex;\">\n        {posts.map(({ posts_id }) => (\n          posts_id && (\n            <div style=\"width: 400px; margin: 0 10px;\">\n              {posts_id.title && <h3>{posts_id.title}</h3>}\n              {posts_id.image && (\n                <img src={`${DIRECTUS_URL}/assets/${posts_id.image}?width=300`} alt={posts_id.title || 'Post Image'} />\n              )}\n              {posts_id.content && <div set:html={posts_id.content}></div>}\n            </div>\n          )\n        ))}\n      </div>\n    )}\n\n    {group_type === \"custom\" && cards.length > 0 && (\n      <div style=\"display: flex;\">\n        {cards.map(({ title, content }) => (\n          <div>\n            {title && <h3>{title}</h3>}\n            {content && <p>{content}</p>}\n          </div>\n        ))}\n      </div>\n    )}\n     {group_type === \"posts\" && posts.length > 0 && (\n      <div style=\"display: flex;\">\n        {posts.map(({ title, content }) => (\n          <div>\n            {title && <h3>{title}</h3>}\n            {content && <p>{content}</p>}\n          </div>\n        ))}\n      </div>\n    )}\n  </div>\n</section>\n```\n\n----------------------------------------\n\nTITLE: Querying GraphQL Content Versions (Before)\nDESCRIPTION: Previous method for accessing content versions via GraphQL, using a 'version' parameter on existing fields.\nSOURCE: https://github.com/directus/docs/blob/main/content/releases/3.breaking-changes/1.version-10.md#2025-04-09_snippet_3\n\nLANGUAGE: graphql\nCODE:\n```\n# Get an item's version by id\nquery {\n  <collection>_by_id(id: 15, version: \"draft\") {\n    id\n    title\n    body\n  }\n}\n\n# Get a version singleton or list versions in a collection\nquery {\n  <collection>(version: \"draft\") {\n    id\n    title\n    body\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Fetching Posts List from Directus API in Swift\nDESCRIPTION: Implements an asynchronous function to fetch a list of posts from the Directus API. It uses URLSession to make the network request and decodes the JSON response into Post objects.\nSOURCE: https://github.com/directus/docs/blob/main/content/tutorials/1.getting-started/fetch-data-from-directus-in-ios-with-swift.md#2025-04-09_snippet_2\n\nLANGUAGE: swift\nCODE:\n```\nfunc fetchPosts() async {\n    guard let url = URL(string: \"https://ios-author-demo.directus.app/items/posts\") else {\n        print(\"Invalid URL\")\n        return\n    }\n\n    do {\n        let (data, _) = try await URLSession.shared.data(from: url)\n        let decoder = JSONDecoder()\n        let result = try decoder.decode([String: [Post]].self, from: data)\n\n        if let posts = result[\"data\"] {\n            self.posts = posts\n        }\n    } catch {\n        print(\"Error: \\(error)\")\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a Dynamic Field Renderer Component for Directus Forms\nDESCRIPTION: React component that renders different form elements based on Directus field interface types, providing a bridge between Directus field definitions and Next.js form components.\nSOURCE: https://github.com/directus/docs/blob/main/content/tutorials/2.projects/build-forms-dynamically-using-directus-and-next.md#2025-04-09_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\nimport Input from './Input';\nimport TextArea from './TextArea';\nimport Select from './Select';\nimport DateTime from './DateTime';\n\nexport default function FieldRenderer({ field, formValue, setFormValue }) {\n  if (field?.meta?.hidden) return null;\n\n  const getComponent = () => {\n    switch (field.meta?.interface) {\n      case 'input':\n        return Input;\n      case 'input-rich-text-md':\n        return TextArea;\n      case 'select-dropdown':\n        return Select;\n      case 'datetime':\n        return DateTime;\n      default:\n        return Input;\n    }\n  };\n\n  const Component = getComponent();\n\n  return (\n    <Component\n      field={field}\n      defaultValue={field.schema?.default_value}\n      label={field.meta?.field}\n      value={formValue[field.field]}\n      setValue={(value) => setFormValue((prev) => ({ ...prev, [field.field]: value }))}\n    />\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Initializing a New Nuxt Project with Nuxi\nDESCRIPTION: Terminal commands to create a new Nuxt project using Nuxi command line tool and navigate to the project directory.\nSOURCE: https://github.com/directus/docs/blob/main/content/tutorials/1.getting-started/implementing-live-preview-in-nuxt.md#2025-04-09_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nnpx nuxi@latest init directus-preview\ncd directus-preview\n```\n\n----------------------------------------\n\nTITLE: Implementing Embed Hook in Directus\nDESCRIPTION: Demonstrates how to use the embed hook to inject custom JavaScript into the body of the Data Studio. This example adds a script that logs 'Hello World' to the console.\nSOURCE: https://github.com/directus/docs/blob/main/content/guides/9.extensions/2.api-extensions/1.hooks.md#2025-04-09_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nexport default ({ embed }) => {\n\tembed('body', '<script>console.log(\"Hello World\")</script>');\n};\n```\n\n----------------------------------------\n\nTITLE: Building the Directus Extension with npm\nDESCRIPTION: Shell command to build the Directus panel extension, which creates the distribution files needed for installation.\nSOURCE: https://github.com/directus/docs/blob/main/content/tutorials/5.extensions/create-collection-items-in-custom-panels.md#2025-04-09_snippet_16\n\nLANGUAGE: shell\nCODE:\n```\nnpm run build\n```\n\n----------------------------------------\n\nTITLE: Implementing Operation Overview Display\nDESCRIPTION: Configuration for how the operation appears in the Flow canvas, showing phone number and message\nSOURCE: https://github.com/directus/docs/blob/main/content/tutorials/5.extensions/send-sms-messages-with-twilio-in-custom-operations.md#2025-04-09_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\noverview: ({ phone_number, message }) => [\n\t{\n\t\tlabel: 'Phone Number',\n\t\ttext: phone_number,\n\t},\n\t{\n\t\tlabel: 'Message',\n\t\ttext: message,\n\t},\n]\n```\n\n----------------------------------------\n\nTITLE: Using TypeScript with Sandboxed Hooks in Directus\nDESCRIPTION: Illustrates how to use TypeScript with sandboxed hooks in Directus. It imports the SandboxHookRegisterContext type for proper typing of the register function's context object.\nSOURCE: https://github.com/directus/docs/blob/main/content/guides/9.extensions/2.api-extensions/1.hooks.md#2025-04-09_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\n/// <reference types=\"@directus/extensions/api.d.ts\" />\nimport type { SandboxHookRegisterContext } from 'directus:api';\n\nexport default ({ filter, action }: SandboxHookRegisterContext) => {\n};\n```\n\n----------------------------------------\n\nTITLE: File Type UUID Configuration\nDESCRIPTION: Configuration options for single file upload input type in Directus. Allows uploading files, choosing from library, or importing from URL.\nSOURCE: https://github.com/directus/docs/blob/main/content/guides/1.data-model/3.interfaces.md#2025-04-09_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n| Configuration | Options                                                                        |\n| ------------- | ------------------------------------------------------------------------------ |\n| Types         | `UUID`                                                                         |\n| Root Folder   | Folder for the uploaded files. Does not affect the location of existing files. |\n```\n\n----------------------------------------\n\nTITLE: Modifying Docker Compose for Custom Directus Image\nDESCRIPTION: This YAML snippet shows how to modify a docker-compose.yml file to build a custom Directus image. It replaces the 'image' property with a 'build' section specifying the build context.\nSOURCE: https://github.com/directus/docs/blob/main/content/self-hosting/5.including-extensions.md#2025-04-09_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nbuild: \n  context: ./ \n```\n\n----------------------------------------\n\nTITLE: Docker Installation\nDESCRIPTION: Command to install Docker Engine and related packages\nSOURCE: https://github.com/directus/docs/blob/main/content/tutorials/6.self-hosting/deploy-directus-to-an-ubuntu-server.md#2025-04-09_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\nsudo apt-get install docker-ce docker-ce-cli containerd.io docker-buildx-plugin docker-compose-plugin\n```\n\n----------------------------------------\n\nTITLE: Implementing Theme Entrypoint in Directus\nDESCRIPTION: Example of a basic theme entrypoint implementation using defineTheme from the Directus extensions SDK. Shows how to set up theme ID, name, appearance mode, and basic styling rules.\nSOURCE: https://github.com/directus/docs/blob/main/content/guides/9.extensions/3.app-extensions/6.themes.md#2025-04-09_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport { defineTheme } from '@directus/extensions-sdk';\n\nexport default defineTheme({\n\tid: 'custom',\n\tname: 'My Custom Theme',\n\tappearance: 'dark',\n\trules: {\n\t\tbackground: 'tomato',\n\t}\n});\n```\n\n----------------------------------------\n\nTITLE: Mounting Extensions Directory in Docker Compose\nDESCRIPTION: This YAML snippet demonstrates how to mount a local extensions directory to the Directus container in a docker-compose.yml file. It adds a volume mapping from ./extensions to /directus/extensions.\nSOURCE: https://github.com/directus/docs/blob/main/content/self-hosting/5.including-extensions.md#2025-04-09_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\nservices:\n  directus:\n    volumes:\n      - ./extensions:/directus/extensions\n```\n\n----------------------------------------\n\nTITLE: Creating Objects in Algolia Index\nDESCRIPTION: Hook action that saves new items to Algolia when content is created in the posts collection. Uses the Directus item ID as Algolia's objectID.\nSOURCE: https://github.com/directus/docs/blob/main/content/tutorials/5.extensions/integrate-algolia-indexing-with-custom-hooks.md#2025-04-09_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nexport default ({ action }) => {\n    action('posts.items.create', async (meta) => {\n        await index.saveObjects([{ objectID: `${meta.key}`, ...meta.payload }]);\n    });\n};\n```\n\n----------------------------------------\n\nTITLE: Implementing Error Handling with Email Notification\nDESCRIPTION: Using MailService to send error notifications when Stripe API calls fail, including customer information and error details.\nSOURCE: https://github.com/directus/docs/blob/main/content/tutorials/5.extensions/create-new-customers-in-stripe-in-a-custom-hook.md#2025-04-09_snippet_9\n\nLANGUAGE: javascript\nCODE:\n```\nstripe.customers\n  .create({})\n  .then((customer) => {})\n  .catch((error) => {\n    const mailService = new MailService({ schema });\n    mailService.send({ // [!code ++]\n      to: 'sharedmailbox@directus.io', // [!code ++]\n      from: 'noreply@directus.io', // [!code ++]\n      subject: `An error has occurred with Stripe API`, // [!code ++]\n      text: `The following error occurred for ${payload.first_name} ${payload.last_name} when attempting to create an account in Stripe.\\r\\n\\r\\n${error}\\r\\n\\r\\nPlease investigate.\\r\\n\\r\\nID: ${key}\\r\\nEmail: ${payload.email_address}`, // [!code ++]\n    }); // [!code ++]\n  });\n```\n\n----------------------------------------\n\nTITLE: Configuring Environment Variables in Nuxt\nDESCRIPTION: TypeScript definition for the API_URL environment variable used in the Nuxt project.\nSOURCE: https://github.com/directus/docs/blob/main/content/tutorials/2.projects/build-forms-dynamically-using-directus-and-nuxt.md#2025-04-09_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\n/// <reference types=\"vite/client\" />\ninterface ImportMetaEnv {\n\treadonly API_URL: string;\n}\n  \ninterface ImportMeta {\n\treadonly env: ImportMetaEnv;\n}\n```\n\n----------------------------------------\n\nTITLE: Embedding Sentry Loader Script in Directus Data Studio\nDESCRIPTION: Updated hook code that includes embedding the Sentry Loader Script in the head of the Directus Data Studio frontend. Uses the embed hook to inject the script tag with the frontend project's loader script URL.\nSOURCE: https://github.com/directus/docs/blob/main/content/tutorials/5.extensions/monitor-and-error-track-with-sentry-in-custom-hooks.md#2025-04-09_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nexport default ({ init }, { env }) => { // [!code --]\nexport default ({ init, embed }, { env }) => { // [!code ++]\n```\n\n----------------------------------------\n\nTITLE: Implementing Search Results Page in Next.js\nDESCRIPTION: Creates a search results page that uses the searchProducts function to fetch and display products based on the search query. It utilizes the ProductList component to render the results.\nSOURCE: https://github.com/directus/docs/blob/main/content/tutorials/2.projects/build-an-ecommerce-platform-with-next-js-stripe-and-directus-automate.md#2025-04-09_snippet_11\n\nLANGUAGE: tsx\nCODE:\n```\nimport ProductList from \"@/components/product-list\";\nimport { searchProducts } from \"@/lib/apis\";\nexport default async function Search({\n  searchParams,\n}: {\n  searchParams?: { [key: string]: string | string[] | undefined };\n}) {\n  const { query } = searchParams as { [key: string]: string };\n  const products =  await searchProducts(query) || [];\n\n  return (\n    <section>\n      <h1>Search Page For Products</h1>\n      <p>Showing results for {query}</p>\n      <ProductList products={products} />\n    </section>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Installing Directus Extension Dependencies\nDESCRIPTION: Command to initialize a new Directus display extension using the create-directus-extension package\nSOURCE: https://github.com/directus/docs/blob/main/content/tutorials/5.extensions/format-dates-in-a-custom-display-extension.md#2025-04-09_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nnpx create-directus-extension@latest\n```\n\n----------------------------------------\n\nTITLE: Implementing Search Results Page in Next.js\nDESCRIPTION: Creates a search results page that uses the searchProducts function to fetch and display products based on the search query. It utilizes the ProductList component to render the results.\nSOURCE: https://github.com/directus/docs/blob/main/content/tutorials/2.projects/build-an-ecommerce-platform-with-next-js-stripe-and-directus-automate.md#2025-04-09_snippet_11\n\nLANGUAGE: tsx\nCODE:\n```\nimport ProductList from \"@/components/product-list\";\nimport { searchProducts } from \"@/lib/apis\";\nexport default async function Search({\n  searchParams,\n}: {\n  searchParams?: { [key: string]: string | string[] | undefined };\n}) {\n  const { query } = searchParams as { [key: string]: string };\n  const products =  await searchProducts(query) || [];\n\n  return (\n    <section>\n      <h1>Search Page For Products</h1>\n      <p>Showing results for {query}</p>\n      <ProductList products={products} />\n    </section>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Rendering Dynamic Page Content in SvelteKit Component\nDESCRIPTION: Svelte component that renders the dynamic page content fetched from Directus. It displays the page title and content, with a warning about using @html for trusted content only.\nSOURCE: https://github.com/directus/docs/blob/main/content/tutorials/1.getting-started/fetch-data-from-directus-with-sveltekit.md#2025-04-09_snippet_6\n\nLANGUAGE: svelte\nCODE:\n```\n<script>\n\t/** @type {import('./$types').PageData} */\n\texport let data;\n</script>\n\n\n<h1>{data.page.title}</h1>\n<div>{@html data.page.content}</div>\n```\n\n----------------------------------------\n\nTITLE: Creating Directus Extension with CLI\nDESCRIPTION: Command to scaffold a new Directus extension using the create-directus-extension utility.\nSOURCE: https://github.com/directus/docs/blob/main/content/guides/9.extensions/6.cli.md#2025-04-09_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nnpx create-directus-extension@latest\n```\n\n----------------------------------------\n\nTITLE: Implementing Vonage SMS Activity Display Panel in Vue\nDESCRIPTION: Vue component that renders a table displaying SMS activity data with real-time updates. Features include status display, timestamp formatting, message content viewing, and responsive styling. Uses the Directus API to fetch SMS records with configurable filters.\nSOURCE: https://github.com/directus/docs/blob/main/content/tutorials/5.extensions/display-external-api-data-from-vonage-in-custom-panels.md#2025-04-09_snippet_14\n\nLANGUAGE: vue\nCODE:\n```\n<template>\n  <div class=\"messages-table\" :class=\"{ 'has-header': showHeader }\">\n    <v-progress-circular v-if=\"isLoading\" class=\"is-loading\" indeterminate />\n    <v-notice v-else-if=\"errorMessage\" type=\"danger\">{{ errorMessage }}</v-notice>\n    <v-notice v-else-if=\"activityData.length == 0\" type=\"info\">No Messages</v-notice>\n    <table v-else cellpadding=\"0\" cellspacing=\"0\" border=\"0\">\n      <thead>\n        <tr>\n          <th v-if=\"direction == 'outbound'\">Status</th>\n          <th v-if=\"direction == 'outbound'\">Sent</th>\n          <th v-else>Received</th>\n          <th v-if=\"includeMessage\">Message</th>\n          <th v-if=\"direction == 'outbound'\">Recipient</th>\n          <th v-else>From</th>\n          <th>Provider</th>\n        </tr>\n      </thead>\n      <tbody>\n        <tr v-for=\"message in activityData\" :key=\"message.message_id\">\n          <td v-if=\"direction == 'outbound'\" class=\"ucwords\">{{ message.status }}</td>\n          <td class=\"nowrap\">\n            {{ formatDistanceToNow(parseISO(message.date_finalized ? message.date_finalized : message.date_received)) }}\n            ago\n          </td>\n          <td v-if=\"includeMessage\" class=\"message\">{{ message.message_body }}</td>\n          <td v-if=\"direction == 'outbound'\">{{ message.to }}</td>\n          <td v-else>{{ message.from }}</td>\n          <td class=\"ucwords\">{{ type == 'MESSAGES' ? message.provider : message.network_name }}</td>\n        </tr>\n      </tbody>\n    </table>\n  </div>\n</template>\n\n<script>\nimport { useApi } from '@directus/extensions-sdk';\nimport { adjustDate } from '@directus/utils';\nimport { formatISO, formatDistanceToNow, parseISO } from 'date-fns';\nimport { ref, watch } from 'vue';\nexport default {\n  props: {\n    showHeader: {\n      type: Boolean,\n      default: false,\n    },\n    type: {\n      type: String,\n      default: '',\n    },\n    direction: {\n      type: String,\n      default: '',\n    },\n    range: {\n      type: String,\n      default: '',\n    },\n    includeMessage: {\n      type: Boolean,\n      default: false,\n    },\n    status: {\n      type: String,\n      default: '',\n    },\n  },\n  setup(props) {\n    const api = useApi();\n    const activityData = ref([]);\n    const now = ref(new Date());\n    const isLoading = ref(true);\n    const errorMessage = ref();\n\n    async function fetchData() {\n      isLoading.value = true;\n      activityData.value = [];\n\n      const dateStart = adjustDate(now.value, props.range ? `-${props.range}` : '-1 day');\n\n      const params = {\n        product: props.type || 'SMS',\n        direction: props.direction || 'outbound',\n        include_message: props.includeMessage.toString(),\n        date_start: dateStart ? formatISO(dateStart) : '',\n        status: props.status || 'any',\n      };\n\n      if (props.status) params.status = props.status;\n\n      const url_params = new URLSearchParams(params);\n\n      try {\n        const response = await api.get(`/vonage/records?${url_params.toString()}`);\n        activityData.value = response.data.records;\n      } catch {\n        errorMessage.value = 'Internal Server Error';\n      } finally {\n        isLoading.value = false;\n      }\n    }\n\n    fetchData();\n\n    watch(\n      [() => props.type, () => props.direction, () => props.range, () => props.includeMessage, () => props.status],\n      fetchData\n    );\n\n    return { activityData, isLoading, errorMessage, formatDistanceToNow, parseISO };\n  },\n};\n</script>\n\n<style scoped>\n.messages-table {\n  padding: 12px;\n  height: 100%;\n  overflow: scroll;\n}\n.messages-table table {\n  width: 100%;\n  min-width: 600px;\n}\n.messages-table table tr td,\n.messages-table table tr th {\n  vertical-align: top;\n  border-top: var(--theme--border-width) solid var(--border-subdued);\n  padding: 10px;\n}\n.ucwords {\n  text-transform: capitalize;\n}\n.nowrap {\n  white-space: nowrap;\n}\n.message {\n  min-width: 260px;\n}\n.messages-table table tr th {\n  font-weight: bold;\n  text-align: left;\n  font-size: 0.8em;\n  text-transform: uppercase;\n  line-height: 1;\n  padding: 8px 10px;\n}\n.text.has-header {\n  padding: 0 12px;\n}\n.is-loading {\n  position: absolute;\n  left: calc(50% - 14px);\n  top: calc(50% - 28px);\n}\n</style>\n```\n\n----------------------------------------\n\nTITLE: Implementing Message Subscription in React\nDESCRIPTION: This function subscribes to message events and handles incoming messages.\nSOURCE: https://github.com/directus/docs/blob/main/content/tutorials/2.projects/build-a-multi-user-chat-with-react-and-directus-realtime.md#2025-04-09_snippet_6\n\nLANGUAGE: js\nCODE:\n```\nasync function subscribe(event) {\n  const { subscription } = await client.subscribe('messages', {\n    event,\n    query: {\n      fields: ['*', 'user_created.first_name'],\n    },\n  });\n\n  for await (const message of subscription) {\n    receiveMessage(message);\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Validating Directus Extension\nDESCRIPTION: Command to validate a Directus extension using the create-directus-extension utility.\nSOURCE: https://github.com/directus/docs/blob/main/content/guides/9.extensions/6.cli.md#2025-04-09_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\nnpx create-directus-extension@latest validate\n```\n\n----------------------------------------\n\nTITLE: URL Configuration - App Level\nDESCRIPTION: URL patterns configuration for the blog application.\nSOURCE: https://github.com/directus/docs/blob/main/content/tutorials/1.getting-started/fetch-data-from-directus-with-django.md#2025-04-09_snippet_14\n\nLANGUAGE: python\nCODE:\n```\nfrom django.urls import path\nfrom .views import blog_posts, blog_post_detail\n\nurlpatterns = [\n    path('', home_page, name='home'),\n    path('blog/', blog_posts, name='blog_list'),\n    path('blog/<slug:slug>/', blog_post_detail, name='blog_detail'),\n\n    # ... other URL patterns ...\n]\n```\n\n----------------------------------------\n\nTITLE: Configuring Live Preview URL with Auth Token in Directus\nDESCRIPTION: This snippet shows the format for adding an auth token to the Live Preview URL in Directus settings. It allows the application to request data with the token for previewing non-public posts.\nSOURCE: https://github.com/directus/docs/blob/main/content/tutorials/1.getting-started/implementing-live-preview-in-nuxt.md#2025-04-09_snippet_13\n\nLANGUAGE: markdown\nCODE:\n```\n/<ID>?preview=true&auth_token=<USER_TOKEN>\n```\n\n----------------------------------------\n\nTITLE: Setting up Django Project - Command Line Setup\nDESCRIPTION: Initial commands to create a Django project, set up virtual environment, and install dependencies.\nSOURCE: https://github.com/directus/docs/blob/main/content/tutorials/1.getting-started/fetch-data-from-directus-with-django.md#2025-04-09_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nmkdir my_django_site && cd my_django_site\ndjango-admin startproject config .\npython -m venv env\nsource env/bin/activate  # On Windows use `env\\Scripts\\activate`\npip install django requests\n```\n\n----------------------------------------\n\nTITLE: Form Data Submission to Directus\nDESCRIPTION: Function to handle form data submission to Directus API. Takes collection name and form data as parameters, sends request to create new item in collection.\nSOURCE: https://github.com/directus/docs/blob/main/content/tutorials/2.projects/build-forms-dynamically-using-directus-and-sveltekit.md#2025-04-09_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\nexport async function submitFormData(collection, data) {\n  try {\n    return await directus.request(createItem(collection, data));\n  } catch (error) {\n    console.error(\"Error submitting form data:\", error);\n    throw error;\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a New Next.js Project for Directus Integration\nDESCRIPTION: Command to initialize a new Next.js application with specific configuration options for the Directus forms tutorial.\nSOURCE: https://github.com/directus/docs/blob/main/content/tutorials/2.projects/build-forms-dynamically-using-directus-and-next.md#2025-04-09_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nnpx create-next-app \\\n  directus-next-forms \\\n  --js \\\n  --app \\\n  --eslint \\\n  --no-src-dir \\\n  --no-tailwind \\\n  --turbopack \\\n  --import-alias \"@/*\"\n```\n\n----------------------------------------\n\nTITLE: Implementing Schedule Hook in Directus\nDESCRIPTION: Shows how to use the schedule hook to execute a function at regular intervals using a cron string. This example logs a message every 15 minutes.\nSOURCE: https://github.com/directus/docs/blob/main/content/guides/9.extensions/2.api-extensions/1.hooks.md#2025-04-09_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nexport default ({ schedule }) => {\n\tschedule('*/15 * * * *', () => {\n\t\tconsole.log('15 minutes have passed.');\n\t});\n};\n```\n\n----------------------------------------\n\nTITLE: Server Package Updates\nDESCRIPTION: Commands to update Ubuntu server packages and dependencies\nSOURCE: https://github.com/directus/docs/blob/main/content/tutorials/6.self-hosting/deploy-directus-to-an-ubuntu-server.md#2025-04-09_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nsudo apt update\nsudo apt upgrade -y\n```\n\n----------------------------------------\n\nTITLE: Polyfilling Global APIs in Directus SDK\nDESCRIPTION: Shows how to polyfill global APIs like fetch and WebSocket using the createDirectus options parameter.\nSOURCE: https://github.com/directus/docs/blob/main/content/guides/4.connect/6.sdk.md#2025-04-09_snippet_11\n\nLANGUAGE: javascript\nCODE:\n```\nimport { createDirectus } from '@directus/sdk';\nimport { ofetch } from 'ofetch';\nimport WebSocket from 'ws';\n\nconst directus = createDirectus('http://directus.example.com', {\n  globals: {\n    WebSocket: WebSocket,\n    fetch: ofetch,\n  }\n});\n```\n\n----------------------------------------\n\nTITLE: Creating Directus Client with REST - JavaScript\nDESCRIPTION: Example of creating a basic Directus client with REST functionality in JavaScript\nSOURCE: https://github.com/directus/docs/blob/main/content/guides/4.connect/6.sdk.md#2025-04-09_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport { createDirectus, rest } from '@directus/sdk';\nconst directus = createDirectus('http://directus.example.com').with(rest());\n```\n\n----------------------------------------\n\nTITLE: Displaying Markdown Table for Calendar Layout Page Area Controls\nDESCRIPTION: This markdown table describes the page area controls for the Calendar layout in Directus, specifically the item selection functionality.\nSOURCE: https://github.com/directus/docs/blob/main/content/guides/2.content/3.layouts.md#2025-04-09_snippet_9\n\nLANGUAGE: markdown\nCODE:\n```\n| Control | Description |\n|---|---|\n| **Select Item** | Click an item on the calendar to open its item page. |\n```\n\n----------------------------------------\n\nTITLE: Sample Directus API Response for Page Data\nDESCRIPTION: This JSON response shows the structure of data returned when querying a page with nested blocks. It includes different block types (hero, cardgroup, richtext) with their respective properties in a Many-To-Any relationship structure.\nSOURCE: https://github.com/directus/docs/blob/main/content/tutorials/1.getting-started/create-reusable-blocks-with-many-to-any-relationships.md#2025-04-09_snippet_5\n\nLANGUAGE: json\nCODE:\n```\n{\n\t\"data\": [\n\t\t{\n\t\t\t\"id\": \"079bf3c0-6f73-4725-b4c3-9d1a6cb58a05\",\n\t\t\t\"status\": \"published\",\n\t\t\t\"date_created\": \"2023-02-08T20:54:15\",\n\t\t\t\"user_updated\": \"9fdd1ca5-982e-422d-bced-640e3a98a339\",\n\t\t\t\"date_updated\": \"2023-02-13T17:36:38\",\n\t\t\t\"user_created\": \"9fdd1ca5-982e-422d-bced-640e3a98a339\",\n\t\t\t\"title\": \"The Ultimate Guide to Rabbits\",\n\t\t\t\"slug\": \"the-ultimate-guide-to-rabbits\",\n\t\t\t\"blocks\": [\n\t\t\t\t{\n\t\t\t\t\t\"id\": 1,\n\t\t\t\t\t\"pages_id\": \"079bf3c0-6f73-4725-b4c3-9d1a6cb58a05\",\n\t\t\t\t\t\"sort\": 1,\n\t\t\t\t\t\"collection\": \"block_hero\",\n\t\t\t\t\t\"item\": {\n\t\t\t\t\t\t\"id\": \"1fa9065d-39a0-479a-a8ae-9ccd31429c98\",\n\t\t\t\t\t\t\"headline\": \"Learn everything about rabbits\",\n\t\t\t\t\t\t\"content\": \"This guide will teach you everything you need to know about those wascally wabbits.\",\n\t\t\t\t\t\t\"buttons\": [\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\"label\": \"Learn More\",\n\t\t\t\t\t\t\t\t\"href\": \"learn-more\",\n\t\t\t\t\t\t\t\t\"variant\": \"primary\"\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t],\n\t\t\t\t\t\t\"image\": \"12e02b82-b4a4-4aaf-8ca4-e73c20a41c26\"\n\t\t\t\t\t}\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\t\"id\": 3,\n\t\t\t\t\t\"pages_id\": \"079bf3c0-6f73-4725-b4c3-9d1a6cb58a05\",\n\t\t\t\t\t\"sort\": 2,\n\t\t\t\t\t\"collection\": \"block_cardgroup\",\n\t\t\t\t\t\"item\": {\n\t\t\t\t\t\t\"id\": \"52661ac6-f134-4fbf-9084-17cf3fc4e256\",\n\t\t\t\t\t\t\"headline\": \"Our Best Blog Posts on Rabbits\",\n\t\t\t\t\t\t\"content\": \"Here's the latest and greatest from our rabid writers.\",\n\t\t\t\t\t\t\"group_type\": \"posts\",\n\t\t\t\t\t\t\"cards\": [],\n\t\t\t\t\t\t\"posts\": [1, 2, 3]\n\t\t\t\t\t}\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\t\"id\": 2,\n\t\t\t\t\t\"pages_id\": \"079bf3c0-6f73-4725-b4c3-9d1a6cb58a05\",\n\t\t\t\t\t\"sort\": 3,\n\t\t\t\t\t\"collection\": \"block_richtext\",\n\t\t\t\t\t\"item\": {\n\t\t\t\t\t\t\"id\": \"6c5df396-be52-4b1c-a144-d55b229e5a34\",\n\t\t\t\t\t\t\"headline\": \"The Benefits of Rabbits\",\n\t\t\t\t\t\t\"content\": \"<p>Rabbits are a great source of environmental benefit. They help to keep grasslands and other ecosystems in check. Rabbits are herbivores, meaning they eat only plants, which helps to keep vegetation in balance. Additionally, rabbits are crucial to the food chain, providing sustenance for predators in their environment.</p>\\n<p>Rabbits also help to improve the quality of soil by digging burrows and depositing their waste in them. This helps to aerate the soil, improving its quality and allowing for better plant growth. Additionally, the waste from rabbits is a rich source of nutrients for plants and other animals in the area. This helps to keep the soil healthy and support the overall ecosystem.</p>\"\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t]\n\t\t}\n\t]\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a Laravel Service Provider with Artisan\nDESCRIPTION: Command to generate a new ViewServiceProvider using Laravel's Artisan CLI tool for managing view data.\nSOURCE: https://github.com/directus/docs/blob/main/content/tutorials/1.getting-started/fetch-data-from-directus-with-laravel.md#2025-04-09_snippet_16\n\nLANGUAGE: shell\nCODE:\n```\nphp artisan make:provider ViewServiceProvider\n```\n\n----------------------------------------\n\nTITLE: Filtering Directus Data with Filter Parameters\nDESCRIPTION: Demonstrates how to use filter parameters to specify which items are returned based on filter rules. Shows multiple syntax options for REST and examples for GraphQL and SDK.\nSOURCE: https://github.com/directus/docs/blob/main/content/guides/4.connect/3.query-parameters.md#2025-04-09_snippet_2\n\nLANGUAGE: http\nCODE:\n```\n// There are two available syntax:\n\nGET /items/posts\n\t?filter[title][_eq]=Hello\n\nGET /items/posts\n\t?filter={ \"title\": { \"_eq\": \"Hello\" }}\n```\n\nLANGUAGE: graphql\nCODE:\n```\nquery {\n\tposts(filter: { title: { _eq: \"Hello\" } }) {\n\t\tid\n\t}\n}\n\n# Attribute names in GraphQL cannot contain the `:` character. If you are filtering Many to Any fields, you will need to replace it with a double underscore.\n```\n\nLANGUAGE: js\nCODE:\n```\nimport { createDirectus, rest, readItems } from '@directus/sdk';\nconst directus = createDirectus('https://directus.example.com').with(rest());\n\nconst result = await directus.request(\n\treadItems('posts', {\n\t\tfilter: {\n\t\t\ttitle: {\n\t\t\t\t_eq: 'Hello',\n\t\t\t},\n\t\t},\n\t})\n);\n```\n\n----------------------------------------\n\nTITLE: Filtering Directus Data with Filter Parameters\nDESCRIPTION: Demonstrates how to use filter parameters to specify which items are returned based on filter rules. Shows multiple syntax options for REST and examples for GraphQL and SDK.\nSOURCE: https://github.com/directus/docs/blob/main/content/guides/4.connect/3.query-parameters.md#2025-04-09_snippet_2\n\nLANGUAGE: http\nCODE:\n```\n// There are two available syntax:\n\nGET /items/posts\n\t?filter[title][_eq]=Hello\n\nGET /items/posts\n\t?filter={ \"title\": { \"_eq\": \"Hello\" }}\n```\n\nLANGUAGE: graphql\nCODE:\n```\nquery {\n\tposts(filter: { title: { _eq: \"Hello\" } }) {\n\t\tid\n\t}\n}\n\n# Attribute names in GraphQL cannot contain the `:` character. If you are filtering Many to Any fields, you will need to replace it with a double underscore.\n```\n\nLANGUAGE: js\nCODE:\n```\nimport { createDirectus, rest, readItems } from '@directus/sdk';\nconst directus = createDirectus('https://directus.example.com').with(rest());\n\nconst result = await directus.request(\n\treadItems('posts', {\n\t\tfilter: {\n\t\t\ttitle: {\n\t\t\t\t_eq: 'Hello',\n\t\t\t},\n\t\t},\n\t})\n);\n```\n\n----------------------------------------\n\nTITLE: Running Development Server for Directus Queue Extension\nDESCRIPTION: Command to start the development server for a Directus queue extension. This is used during the development phase for testing and debugging.\nSOURCE: https://github.com/directus/docs/blob/main/content/tutorials/7.workflows/invincible-ai-content-workflows-with-inngest-and-directus.md#2025-04-09_snippet_8\n\nLANGUAGE: bash\nCODE:\n```\ncd queue\nnpm run dev\n```\n\n----------------------------------------\n\nTITLE: Fetching Blog Posts\nDESCRIPTION: Module to fetch blog posts with author information from Directus\nSOURCE: https://github.com/directus/docs/blob/main/content/tutorials/1.getting-started/fetch-data-from-directus-with-eleventy-3.md#2025-04-09_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\nimport directus from './directus.js';\nimport { readItems } from '@directus/sdk';\n\nexport default async () => {\n    return await directus.request(\n        readItems(\"posts\", {\n            fields: [\"*\", { author: [\"name\"] }],\n            sort: [\"-publish_date\"],\n        })\n    );\n}\n```\n\n----------------------------------------\n\nTITLE: Logging Temperature and Humidity Data to Serial (Arduino/C++)\nDESCRIPTION: This code snippet initializes the DHT22 sensor, reads temperature and humidity values, and logs them to the serial monitor. It uses the DHT library and includes a 5-second delay between readings.\nSOURCE: https://github.com/directus/docs/blob/main/content/tutorials/2.projects/integrate-directus-with-esp-32-hardware-sensors.md#2025-04-09_snippet_0\n\nLANGUAGE: cpp\nCODE:\n```\n#include <DHT.h>\n\nfloat temperature, humidity;\nDHT dht22_sensor(13, DHT22);\n\nvoid setup() {\n  Serial.begin(115200);\n  dht22_sensor.begin();\n}\n\nvoid loop() {\n  temperature = dht22_sensor.readTemperature();\n  humidity = dht22_sensor.readHumidity();\n\n  Serial.print(\"Temperature: \");\n  Serial.print(temperature);\n  Serial.print(\"°C <-> Humidity: \");\n  Serial.print(humidity);\n  Serial.println(\"%\");\n\n  delay(5000);\n}\n```\n\n----------------------------------------\n\nTITLE: Many to Many Configuration\nDESCRIPTION: Configuration for Many-to-Many relationship interface that creates junction collections.\nSOURCE: https://github.com/directus/docs/blob/main/content/guides/1.data-model/3.interfaces.md#2025-04-09_snippet_4\n\nLANGUAGE: markdown\nCODE:\n```\n| Configuration            | Options                                                                   |\n| ------------------------ | ------------------------------------------------------------------------- |\n| Types                    | `Alias`                                                                   |\n| Related Collection       | Which collection should items be selected from.                           |\n| Layout                   | How to present items in the editor. `List`, `Table`                       |\n| Junction Fields Location | Where in the editor the relational field should be added. `Top`, `Bottom` |\n| Allow Duplicates         | Allow users to add the same Item multiple times.                          |\n| Filter                   | Filter the list of items a user can select.                               |\n| Item link                | Toggle visible link to the item.                                          |\n```\n\n----------------------------------------\n\nTITLE: Systemd Service Configuration\nDESCRIPTION: Content for Directus systemd service file to run Docker container as a background service\nSOURCE: https://github.com/directus/docs/blob/main/content/tutorials/6.self-hosting/deploy-directus-to-an-ubuntu-server.md#2025-04-09_snippet_10\n\nLANGUAGE: txt\nCODE:\n```\n[Unit]\nDescription=Directus Docker Service\nRequires=docker.service\nAfter=docker.service\n[Service]\nRestart=always\nWorkingDirectory=/path/to/your/directory-containing-docker-compose.yml\nExecStart=/usr/bin/docker compose up\nExecStop=/usr/bin/docker compose down\n[Install]\nWantedBy=multi-user.target\n```\n\n----------------------------------------\n\nTITLE: Implementing Directus Realtime WebSocket for Garden Updates\nDESCRIPTION: This code sets up a WebSocket connection with Directus Realtime to display initial garden items and automatically update the display when new items are placed. It handles authentication, subscription to the 'place' collection, and processes various WebSocket event types including initialization and item creation.\nSOURCE: https://github.com/directus/docs/blob/main/content/tutorials/2.projects/build-directus-garden-a-passive-collaborative-event-booth-demo.md#2025-04-09_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nonMounted(() => {\n  const connection = new WebSocket(wsBase)\n\n  connection.addEventListener('open', () => {\n    connection.send(JSON.stringify({\n      type: 'auth',\n      access_token: 'public-role-user-token'\n    }))\n  })\n\n  connection.addEventListener('message', (message) => {\n    const data = JSON.parse(message.data)\n\n    if (data.type == 'auth' && data.status == 'ok') {\n      connection.send(JSON.stringify({\n        type: 'subscribe',\n        collection: 'place',\n        query: {\n          fields: ['*', 'user_created.first_name'],\n          filter: { event: { _eq: route.params.event } }\n        }\n      }))\n    }\n    if (data.type == 'subscription' && data.event == 'init') {\n      places.value = data.data\n    }\n\n    if (data.type == 'subscription' && data.event == 'create') {\n      places.value.unshift(data.data[0])\n    }\n\n    if (data.type == 'ping') {\n      connection.send(JSON.stringify({\n        type: 'pong'\n      }))\n    }\n  })\n})\n```\n\n----------------------------------------\n\nTITLE: Implementing Directus Realtime WebSocket for Garden Updates\nDESCRIPTION: This code sets up a WebSocket connection with Directus Realtime to display initial garden items and automatically update the display when new items are placed. It handles authentication, subscription to the 'place' collection, and processes various WebSocket event types including initialization and item creation.\nSOURCE: https://github.com/directus/docs/blob/main/content/tutorials/2.projects/build-directus-garden-a-passive-collaborative-event-booth-demo.md#2025-04-09_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nonMounted(() => {\n  const connection = new WebSocket(wsBase)\n\n  connection.addEventListener('open', () => {\n    connection.send(JSON.stringify({\n      type: 'auth',\n      access_token: 'public-role-user-token'\n    }))\n  })\n\n  connection.addEventListener('message', (message) => {\n    const data = JSON.parse(message.data)\n\n    if (data.type == 'auth' && data.status == 'ok') {\n      connection.send(JSON.stringify({\n        type: 'subscribe',\n        collection: 'place',\n        query: {\n          fields: ['*', 'user_created.first_name'],\n          filter: { event: { _eq: route.params.event } }\n        }\n      }))\n    }\n    if (data.type == 'subscription' && data.event == 'init') {\n      places.value = data.data\n    }\n\n    if (data.type == 'subscription' && data.event == 'create') {\n      places.value.unshift(data.data[0])\n    }\n\n    if (data.type == 'ping') {\n      connection.send(JSON.stringify({\n        type: 'pong'\n      }))\n    }\n  })\n})\n```\n\n----------------------------------------\n\nTITLE: Querying Nested Relational Data with Deep Parameter in Directus API\nDESCRIPTION: Demonstrates how to use the Deep query parameter to set nested query parameters on relational datasets. It shows examples for REST, GraphQL, and the Directus SDK.\nSOURCE: https://github.com/directus/docs/blob/main/content/guides/4.connect/3.query-parameters.md#2025-04-09_snippet_10\n\nLANGUAGE: http\nCODE:\n```\nGET /items/posts\n\t?deep[translations][_filter][languages_code][_eq]=en-US\n\nGET /items/posts\n\t?deep={ \"translations\": { \"_filter\": { \"languages_code\": { \"_eq\": \"en-US\" }}}}\n```\n\nLANGUAGE: graphql\nCODE:\n```\nquery {\n\tposts {\n\t\ttranslations(filter: { languages_code: { _eq: \"en-US\" } }) {\n\t\t\tid\n\t\t}\n\t}\n}\n```\n\nLANGUAGE: javascript\nCODE:\n```\nimport { createDirectus, rest, readItems } from '@directus/sdk';\nconst directus = createDirectus('https://directus.example.com').with(rest());\n\nconst result = await directus.request(\n\treadItems('posts', {\n\t\tdeep: {\n\t\t\ttranslations: {\n\t\t\t\t_filter: {\n\t\t\t\t\tlanguages_code: {\n\t\t\t\t\t\t_eq: 'en-US',\n\t\t\t\t\t},\n\t\t\t\t}\n\t\t\t},\n\t\t},\n\t})\n);\n```\n\n----------------------------------------\n\nTITLE: Initializing Nuxt Project\nDESCRIPTION: Command to create a new Nuxt project using Nuxi CLI.\nSOURCE: https://github.com/directus/docs/blob/main/content/tutorials/2.projects/build-a-realtime-chat-app-using-directus-and-nuxt.md#2025-04-09_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nnpx nuxi@latest init directus-realtime\ncd directus-realtime\n```\n\n----------------------------------------\n\nTITLE: Implementing Dynamic Form Generation from Directus Fields in Next.js\nDESCRIPTION: Client-side Next.js page component that fetches field definitions from Directus and renders a dynamic form based on those definitions using the FieldRenderer component.\nSOURCE: https://github.com/directus/docs/blob/main/content/tutorials/2.projects/build-forms-dynamically-using-directus-and-next.md#2025-04-09_snippet_8\n\nLANGUAGE: javascript\nCODE:\n```\n\"use client\"\n\nimport { React, useEffect, useState } from 'react';\nimport client from '@/lib/directus';\nimport { readFieldsByCollection } from '@directus/sdk';\nimport FieldRenderer from '../components/FieldRenderer';\n\nexport default function Page({ params: { slug } }) {\n\n    const [postsFields, setPostsFields] = useState([])\n    const [formData, setFormData] = useState({})\n\n    // TODO\n    const submitForm = () => {}\n\n    useEffect(() => {\n        async function fetchFields() {\n            try {\n                const result = await client.request(readFieldsByCollection('posts'));\n                setPostsFields(result);\n                console.log(result);\n            } catch (e) {\n                console.error(e);\n            }\n        }\n        fetchFields();\n    }, []);\n\n    try {\n        return (<form onSubmit={submitForm}>\n            {(postsFields.map((field) => {\n                // Don't render a field if it has been hidden\n                if (field.meta?.hidden) return null\n\n                return <FieldRenderer field={field} key={field.field} formValue={formData} setFormValue={setFormData} />\n            }))}\n        </form>)\n    } catch (e) {\n        console.log(e)\n        return <div>Something went wrong!</div>\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Environment Variables\nDESCRIPTION: Environment configuration for Directus server URL.\nSOURCE: https://github.com/directus/docs/blob/main/content/tutorials/2.projects/build-a-testimonial-widget-with-sveltekit-and-directus.md#2025-04-09_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nPUBLIC_API_URL='directus_server_url'\n```\n\n----------------------------------------\n\nTITLE: Creating Base Layout Template\nDESCRIPTION: Base Nunjucks template layout for the website with basic HTML structure\nSOURCE: https://github.com/directus/docs/blob/main/content/tutorials/1.getting-started/fetch-data-from-directus-with-eleventy-3.md#2025-04-09_snippet_1\n\nLANGUAGE: html\nCODE:\n```\n<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n  <meta charset=\"UTF-8\">\n  <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n  <title>{{ title }}</title>\n</head>\n<body>\n  <main>\n    {{ content | safe }}\n  </main>\n</body>\n</html>\n```\n\n----------------------------------------\n\nTITLE: Creating a React Project with Vite\nDESCRIPTION: Terminal commands showing the process of creating a new React project using Vite and the output of the command.\nSOURCE: https://github.com/directus/docs/blob/main/content/tutorials/1.getting-started/using-authentication-in-react.md#2025-04-09_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n➜ npm create vite@latest\n\n> npx\n> create-vite\n\n✔ Project name: … directus-react-auth\n✔ Select a framework: › React\n✔ Select a variant: › JavaScript\n\nScaffolding project in /Users/kumarharsh/Work/Directus/directus-react-auth...\n\nDone. Now run:\n\n  cd directus-react-auth\n  npm install\n  npm run dev\n```\n\n----------------------------------------\n\nTITLE: Battery Level Alert Evaluation Script in JavaScript\nDESCRIPTION: Script that evaluates battery level data and determines if an alert should be created. Returns an object containing alert details if battery level is below 20%.\nSOURCE: https://github.com/directus/docs/blob/main/content/tutorials/2.projects/use-directus-as-a-baby-health-tracker-with-owlet-and-ops-genie.md#2025-04-09_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nmodule.exports = async function(data) {\n    var rtn = {\n    \t\"create_alert\": false\n    }\n    if (data.$trigger.payload.battery_level < 20) {\n    \trtn.create_alert = true\n        rtn.alert_data = {\n        \t\"category\": \"battery\",\n            \"type\": \"info\",\n            \"severity\": \"mid\",\n            \"priority\": \"P3\",\n            \"alias\": \"Low Battery\",\n            \"message\": \"The battery is low. Right now it has \"+data.$trigger.payload.battery_level+\"%\",\n            \"description\": \"The battery is low. Right now it has \"+data.$trigger.payload.battery_level+\"%\"\n        }\n    }\n    // ...\n\treturn rtn;\n}\n```\n\n----------------------------------------\n\nTITLE: Initializing Directus Extension for Custom Operation\nDESCRIPTION: Commands to create a new Directus extension for a custom operation and install the lodash package.\nSOURCE: https://github.com/directus/docs/blob/main/content/tutorials/5.extensions/use-npm-packages-in-custom-operations.md#2025-04-09_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nnpx create-directus-extension@latest\n```\n\nLANGUAGE: shell\nCODE:\n```\ncd directus-operation-lodash\nnpm install lodash\n```\n\n----------------------------------------\n\nTITLE: Rendering Blog Post Listing in SvelteKit Component\nDESCRIPTION: Svelte component that displays a list of blog posts fetched from Directus. It iterates over the posts, showing the title, publish date, and author name for each, with links to individual post pages.\nSOURCE: https://github.com/directus/docs/blob/main/content/tutorials/1.getting-started/fetch-data-from-directus-with-sveltekit.md#2025-04-09_snippet_8\n\nLANGUAGE: svelte\nCODE:\n```\n<script>\n\t/** @type {import('./$types').PageData} */\n\texport let data;\n</script>\n<h1>Blog</h1>\n<ul>\n\t{#each data.posts as post}\n\t\t<li>\n\t\t\t<h2>\n\t\t\t\t<a href=\"/blog/{post.slug}\">\n\t\t\t\t\t{post.title}\n\t\t\t\t</a>\n\t\t\t</h2>\n\t\t\t<span>{post.publish_date} &bull; {post.author.name}</span>\n\t\t</li>\n\t{/each}\n</ul>\n```\n\n----------------------------------------\n\nTITLE: Filtering Scheduled Content in Directus Automate Query\nDESCRIPTION: JSON query that filters content items where the status is 'scheduled' and the publish date is less than or equal to the current time. This query is used in the Directus flow to find content ready for publishing.\nSOURCE: https://github.com/directus/docs/blob/main/content/tutorials/7.workflows/schedule-future-content-with-directus-automate.md#2025-04-09_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n\t\"filter\": {\n\t\t\"_and\": [\n\t\t\t{\n\t\t\t\t\"status\": {\n\t\t\t\t\t\"_eq\": \"scheduled\"\n\t\t\t\t}\n\t\t\t},\n\t\t\t{\n\t\t\t\t\"date_published\": {\n\t\t\t\t\t\"_lte\": \"$NOW\"\n\t\t\t\t}\n\t\t\t}\n\t\t]\n\t}\n}\n```\n\n----------------------------------------\n\nTITLE: Accessing Directus Services in Hook\nDESCRIPTION: Extracting ItemsService and MailService from the services parameter to interact with Directus API and email functionality.\nSOURCE: https://github.com/directus/docs/blob/main/content/tutorials/5.extensions/create-new-customers-in-stripe-in-a-custom-hook.md#2025-04-09_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nexport default ({ action }, { env, services }) => {\n  const { MailService, ItemsService } = services; // [!code ++]\n};\n```\n\n----------------------------------------\n\nTITLE: Creating React Boilerplate for Chat Application\nDESCRIPTION: This snippet sets up the basic React component structure for the chat application, including login form, message list, and message input form.\nSOURCE: https://github.com/directus/docs/blob/main/content/tutorials/2.projects/build-a-multi-user-chat-with-react-and-directus-realtime.md#2025-04-09_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nfunction App() {\n\treturn (\n\t\t<div className=\"App\">\n\t\t\t<form>\n\t\t\t\t<label htmlFor=\"email\">Email</label>\n\t\t\t\t<input type=\"email\" id=\"email\" />\n\t\t\t\t<label htmlFor=\"password\">Password</label>\n\t\t\t\t<input type=\"password\" id=\"password\" />\n\t\t\t\t<button type=\"submit\">Submit</button>\n\t\t\t</form>\n\n\t\t\t<ol></ol>\n\n\t\t\t<form>\n\t\t\t\t<label htmlFor=\"message\">Message</label>\n\t\t\t\t<input type=\"text\" id=\"text\" />\n\t\t\t\t<button type=\"submit\">Submit</button>\n\t\t\t</form>\n\t\t</div>\n\t);\n}\n```\n\n----------------------------------------\n\nTITLE: Installing Directus Visual Editing Package\nDESCRIPTION: Command to install the Directus visual editing package via NPM.\nSOURCE: https://github.com/directus/docs/blob/main/content/guides/2.content/8.visual-editor/1.frontend-library.md#2025-04-09_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm install @directus/visual-editing\n```\n\n----------------------------------------\n\nTITLE: Installing Directus SDK\nDESCRIPTION: Command to install the Directus SDK in the SvelteKit project.\nSOURCE: https://github.com/directus/docs/blob/main/content/tutorials/1.getting-started/rendering-dynamic-blocks-using-sveltekit.md#2025-04-09_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nnpm install @directus/sdk\n```\n\n----------------------------------------\n\nTITLE: Configuring Nuxt Route Rules for Performance Optimization\nDESCRIPTION: This snippet shows the configuration of Nuxt Route Rules to optimize performance by setting different rendering modes for specific routes. It includes settings for the home page, authentication routes, and a proxy for logo fetching.\nSOURCE: https://github.com/directus/docs/blob/main/content/tutorials/2.projects/build-the-leap-week-registration-and-referral-system-.md#2025-04-09_snippet_2\n\nLANGUAGE: jsx\nCODE:\n```\nexport default defineNuxtConfig({\n\trouteRules: {\n\t\t'/': { swr: true },\n\t\t'/auth/**': { swr: true },\n\t\t'/api/logo/**': {\n\t\t\tproxy: 'https://logo.clearbit.com/**',\n\t\t\tswr: true,\n\t\t\tcache: {\n\t\t\t\tmaxAge: 60 * 60 * 24, // 24 hours\n\t\t\t},\n\t\t},\n\t},\n})\n```\n\n----------------------------------------\n\nTITLE: Installing Directus SDK in Astro Project\nDESCRIPTION: Command to install the Directus SDK package which is needed to fetch data from Directus CMS.\nSOURCE: https://github.com/directus/docs/blob/main/content/tutorials/1.getting-started/rendering-dynamic-blocks-using-astro.md#2025-04-09_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nnpm install @directus/sdk\n```\n\n----------------------------------------\n\nTITLE: Setting Up Blog Post Route Handler in Flask\nDESCRIPTION: A Flask route handler that captures the blog post slug from the URL, uses the Directus module to fetch the corresponding post data, and renders it using the post template.\nSOURCE: https://github.com/directus/docs/blob/main/content/tutorials/1.getting-started/fetch-data-from-directus-with-flask.md#2025-04-09_snippet_14\n\nLANGUAGE: python\nCODE:\n```\n@app.get(\"/blog/<slug>\")\ndef post_page(slug):\n    post = directus.get_post_by_slug(slug)\n\n    return render_template(\"post.html\", post=post)\n```\n\n----------------------------------------\n\nTITLE: Creating Initial PostList Component in Next.js\nDESCRIPTION: Basic PostList component setup that receives and displays initial posts with styling using Tailwind CSS classes.\nSOURCE: https://github.com/directus/docs/blob/main/content/tutorials/3.tips-and-tricks/implement-pagination-and-infinite-scrolling-in-next-js-.md#2025-04-09_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\n\"use client\";\n\nimport { useState } from \"react\";\n\nconst PostList = ({ initialPosts, getPosts, limit, totalPostCount }) => {\n  const [posts, setPosts] = useState(initialPosts);\n\n  return (\n    <>\n      <ul className=\"max-w-[600px] mx-auto grid gap-5 pt-10\">\n        {posts?.map((post) => (\n          <li key={post.id} className=\"p-5 rounded-md bg-gray-200 text-black\">\n            <h2 className=\"uppercase text-lg font-medium\">{post.title}</h2>\n            <p>{post.body}</p>\n          </li>\n        ))}\n      </ul>\n      <span>No more posts</span>\n    </>\n  );\n};\n\nexport default PostList;\n```\n\n----------------------------------------\n\nTITLE: Fetching Historical Messages from Directus\nDESCRIPTION: Creates a function to retrieve existing messages from the Directus server. It sends a read request for the messages collection with sorting, limits, and includes user data for display.\nSOURCE: https://github.com/directus/docs/blob/main/content/tutorials/2.projects/build-a-multi-user-chat-with-javascript-and-directus-realtime.md#2025-04-09_snippet_14\n\nLANGUAGE: javascript\nCODE:\n```\nfunction readAllMessages() {\n  client.sendMessage({\n    type: 'items',\n    collection: 'messages',\n    action: 'read',\n    query: {\n      limit: 10,\n      sort: '-date_created',\n      fields: ['*', 'user_created.first_name'],\n    },\n  });\n}\n```\n\n----------------------------------------\n\nTITLE: Filtering Published Content with Directus JavaScript SDK\nDESCRIPTION: JavaScript code using the Directus SDK to fetch published articles with a publish date less than or equal to the current time. This example is for dynamic sites that fetch content at request time.\nSOURCE: https://github.com/directus/docs/blob/main/content/tutorials/7.workflows/schedule-future-content-with-directus-automate.md#2025-04-09_snippet_2\n\nLANGUAGE: js\nCODE:\n```\n// Initialize the SDK.\nimport { createDirectus, rest, readItems } from '@directus/sdk';\n\nconst directus = createDirectus('https://directus.example.com').with(rest());\n\nconst articles = await directus.request(\n\treadItems('articles', {\n\t\tfilter: {\n\t\t\t_and: [\n\t\t\t\t{\n\t\t\t\t\tstatus: {\n\t\t\t\t\t\t_eq: 'published',\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\tdate_published: {\n\t\t\t\t\t\t_lte: '$NOW',\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t],\n\t\t},\n\t})\n);\n```\n\n----------------------------------------\n\nTITLE: Implementing Sidebar Content\nDESCRIPTION: Demonstrates how to add content to the sidebar slot using sidebar-detail components for information and custom sections.\nSOURCE: https://github.com/directus/docs/blob/main/content/tutorials/5.extensions/understand-available-slots-in-custom-modules.md#2025-04-09_snippet_6\n\nLANGUAGE: vue\nCODE:\n```\n<template #sidebar>\n    <sidebar-detail icon=\"info\" title=\"Information\" close>\n        <div v-md=\"page_description\" class=\"page-description\" />\n    </sidebar-detail>\n    <sidebar-detail icon=\"layers\" title=\"SIDEBAR ITEM\">\n        SIDEBAR ITEM CONTENT\n    </sidebar-detail>\n</template>\n```\n\n----------------------------------------\n\nTITLE: Event Logger Input Payload Structure\nDESCRIPTION: JSON structure showing the expected input payload format for the event logging system\nSOURCE: https://github.com/directus/docs/blob/main/content/tutorials/3.tips-and-tricks/build-a-monitoring-pipeline-for-flows-and-extensions-.md#2025-04-09_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n{\n    event_name: string,\n    context: string,\n    execution_id: uuid,\n    meta: Object | Array<Object>\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a Base Email Template with LiquidJS\nDESCRIPTION: This snippet shows how to create a basic HTML structure for an email template using LiquidJS. It defines blocks for header, content, and footer that can be overridden in child templates.\nSOURCE: https://github.com/directus/docs/blob/main/content/tutorials/5.extensions/use-dynamic-values-in-custom-email-templates.md#2025-04-09_snippet_0\n\nLANGUAGE: liquid\nCODE:\n```\n<!doctype html>\n<html lang=\"en\">\n<head>\n\t<title></title>\n</head>\n<body>\n\t{% block header %}{% endblock %}\n\t{% block content %}{% endblock %}\n\t{% block footer %}{% endblock %}\n</body>\n</html>\n```\n\n----------------------------------------\n\nTITLE: Initializing Elasticsearch Client in Directus Hook Extension (JavaScript)\nDESCRIPTION: This snippet sets up the Elasticsearch client using environment variables for authentication. It uses the createRequire function to import the Elasticsearch module in an ES module context.\nSOURCE: https://github.com/directus/docs/blob/main/content/tutorials/5.extensions/integrate-elasticsearch-indexing-with-custom-hooks.md#2025-04-09_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport { createRequire } from \"module\";\nconst require = createRequire(import.meta.url);\nconst { Client } = require(\"@elastic/elasticsearch\");\n\nexport default ({ action }, { env }) => {\n  const client = new Client({\n    cloud: { id: env.ELASTIC_CLOUD_ID },\n    auth: { apiKey: env.ELASTIC_API_KEY },\n  });\n};\n```\n\n----------------------------------------\n\nTITLE: Updating Authentication Service Login Function Call\nDESCRIPTION: Example of how to update the AuthenticationService.login function call to use the new options object parameter for additional options like OTP and session.\nSOURCE: https://github.com/directus/docs/blob/main/content/releases/3.breaking-changes/1.version-10.md#2025-04-09_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\n// Before\nAuthenticationService.login('email', 'password', 'otp-code');\n\n// After\nAuthenticationService.login('email', 'password', { otp: 'otp-code', session: true });\n```\n\n----------------------------------------\n\nTITLE: Updated Flask Home Route\nDESCRIPTION: Enhanced home route handler that fetches and renders global data from Directus\nSOURCE: https://github.com/directus/docs/blob/main/content/tutorials/1.getting-started/fetch-data-from-directus-with-flask.md#2025-04-09_snippet_6\n\nLANGUAGE: python\nCODE:\n```\nfrom flask import Flask, render_template\nimport directus\n\napp = Flask(__name__)\n\n@app.get(\"/\")\ndef home():\n    global_data = directus.get_global_data()\n\n    return render_template(\n        \"home.html\", title=global_data[\"title\"], description=global_data[\"description\"]\n    )\n```\n\n----------------------------------------\n\nTITLE: Requesting M2A Fields with Collection Name in Directus 11\nDESCRIPTION: Example of how to request Many-to-Any (M2A) fields in Directus 11, which now requires specifying the collection name. This change affects both REST and GraphQL queries at any level.\nSOURCE: https://github.com/directus/docs/blob/main/content/releases/3.breaking-changes/2.version-11.md#2025-04-09_snippet_0\n\nLANGUAGE: http\nCODE:\n```\nGET https://example.directus.app/items/example?fields=items.item:m2a_collection.m2a_field\n```\n\n----------------------------------------\n\nTITLE: Implementing Date Formatting in JavaScript\nDESCRIPTION: A function that formats dates into a localized string representation for blog posts\nSOURCE: https://github.com/directus/docs/blob/main/content/tutorials/4.migration/migrate-from-notion-to-directus.md#2025-04-09_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconst formatDate = (date: string) => {\n  return new Date(date).toLocaleDateString('en-US', {\n    year: 'numeric',\n    month: 'long',\n    day: 'numeric',\n  });\n};\n```\n\n----------------------------------------\n\nTITLE: Directus SDK Configuration\nDESCRIPTION: Setup for Directus SDK instance with type definitions\nSOURCE: https://github.com/directus/docs/blob/main/content/tutorials/2.projects/build-an-ecommerce-platform-with-next-js-stripe-and-directus-automate.md#2025-04-09_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nimport { createDirectus, rest } from \"@directus/sdk\";\nimport { CategoryTypes, OrderTypes, ProductTypes } from \"@/types\"\n\ntype Schema = {\n  products: ProductTypes[];\n  categories: CategoryTypes[];\n  orders: OrderTypes[];\n};\n\nconst directus = createDirectus<Schema>(\n  process.env.NEXT_PUBLIC_DIRECTUS_URL as string\n).with(rest());\n\nexport default directus;\n```\n\n----------------------------------------\n\nTITLE: Rich Text Component Implementation in Vue\nDESCRIPTION: Creates a Vue component for rendering the Rich Text block type from Directus, displaying a headline and HTML content.\nSOURCE: https://github.com/directus/docs/blob/main/content/tutorials/1.getting-started/rendering-dynamic-blocks-using-nuxt.md#2025-04-09_snippet_10\n\nLANGUAGE: vue\nCODE:\n```\n<script setup lang=\"ts\">\ndefineProps<{\n\tid: string,\n\theadline: string,\n\tcontent: string\n}>()\n</script>\n<template>\n\t<h2>{{ headline }}</h2>\n\t<div v-html=\"content\"></div>\n</template>\n```\n\n----------------------------------------\n\nTITLE: Setting Authorization Header for Vonage API Request\nDESCRIPTION: Header configuration for authenticating with the Vonage API using Base64 encoded credentials\nSOURCE: https://github.com/directus/docs/blob/main/content/tutorials/7.workflows/detect-high-risk-phone-numbers-with-vonage-and-directus-automate.md#2025-04-09_snippet_0\n\nLANGUAGE: text\nCODE:\n```\nAuthorization: Basic BASE_64_ENCODED_AUTH_STRING\n```\n\n----------------------------------------\n\nTITLE: Initializing Stripe with API Token\nDESCRIPTION: Creating a new Stripe instance using the API token stored in Directus environment variables.\nSOURCE: https://github.com/directus/docs/blob/main/content/tutorials/5.extensions/create-new-customers-in-stripe-in-a-custom-hook.md#2025-04-09_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\nconst stripe = new Stripe(env.STRIPE_TOKEN);\n```\n\n----------------------------------------\n\nTITLE: Performing Custom Image Transformations in Directus\nDESCRIPTION: Examples of requesting image transformations like resize, quality adjustment, and fit mode using the REST API, GraphQL (not supported), and the Directus SDK.\nSOURCE: https://github.com/directus/docs/blob/main/content/guides/5.files/4.transform.md#2025-04-09_snippet_0\n\nLANGUAGE: http\nCODE:\n```\nGET /assets/c984b755-e201-497e-b0a7-24156ad9c7e0\n\t?width=300\n\t&height=300\n\t&quality=50\n\t&fit=contain\n```\n\nLANGUAGE: graphql\nCODE:\n```\n# Not supported by GraphQL\n```\n\nLANGUAGE: js\nCODE:\n```\nimport { createDirectus, rest, readAssetRaw } from '@directus/sdk';\n\nconst FILE_ID = 'c984b755-e201-497e-b0a7-24156ad9c7e0';\n\nconst directus = createDirectus('directus_project_url').with(rest());\n\nconst result = await directus.request(\n  readAssetRaw(FILE_ID, {\n    width: 300,\n    height: 300,\n    quality: 50,\n    fit: 'contain',\n  }),\n);\n```\n\n----------------------------------------\n\nTITLE: Implementing Visual Editing in Vue Component\nDESCRIPTION: Example of using setAttr helper method in a Vue template to configure editable elements.\nSOURCE: https://github.com/directus/docs/blob/main/content/guides/2.content/8.visual-editor/1.frontend-library.md#2025-04-09_snippet_1\n\nLANGUAGE: vue\nCODE:\n```\n<template>\n    <h1 :data-directus=\"setAttr({ collection: 'posts', item: post.id, fields: 'title',\n    mode: 'popover' })\">\n        {{ post.title }}\n    </h1>\n</template>\n```\n\n----------------------------------------\n\nTITLE: Updating SDK Import Statements\nDESCRIPTION: Example of updating import statements for the Directus SDK to import all functions from the root instead of using scoped entrypoints.\nSOURCE: https://github.com/directus/docs/blob/main/content/releases/3.breaking-changes/1.version-10.md#2025-04-09_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\n// Before\nimport { createDirectus } from '@directus/sdk';\nimport { rest } from '@directus/sdk/rest';\n\n// After\nimport { createDirectus, rest } from '@directus/sdk';\n```\n\n----------------------------------------\n\nTITLE: Creating Index Page for Posts Collection in Vue\nDESCRIPTION: This Vue component creates an index page that displays a list of all posts from the Directus posts collection. It uses the $directus and $readItems methods from a custom Nuxt plugin to fetch the data.\nSOURCE: https://github.com/directus/docs/blob/main/content/tutorials/1.getting-started/set-up-live-preview-with-nuxt.md#2025-04-09_snippet_0\n\nLANGUAGE: vue\nCODE:\n```\n<template>\n\t<h1>Blog</h1>\n\t<ul>\n\t\t<li v-for=\"post in posts\" :key=\"post.id\">\n\t\t\t<NuxtLink :href=\"`/${post.slug}`\">\n\t\t\t\t<h2>{{ post.title }}</h2>\n\t\t\t</NuxtLink>\n\t\t</li>\n\t</ul>\n</template>\n\n<script setup>\nconst { $directus, $readItems } = useNuxtApp()\n\nconst posts = await useAsyncData('posts', () => {\n  return $directus.request($readItems('posts'))\n})\n</script>\n```\n\n----------------------------------------\n\nTITLE: Running the SvelteKit Development Server\nDESCRIPTION: Command to start the SvelteKit development server for testing the real-time chat application. After running this command, the application can be accessed at http://localhost:5173/ in a web browser.\nSOURCE: https://github.com/directus/docs/blob/main/content/tutorials/2.projects/build-a-realtime-chat-app-with-directus-and-sveltekit.md#2025-04-09_snippet_10\n\nLANGUAGE: bash\nCODE:\n```\nnpm run dev\n```\n\n----------------------------------------\n\nTITLE: Building Directus Queue Extension for Production\nDESCRIPTION: Command to build the Directus queue extension for production deployment. This creates optimized and minified code ready for use in a live environment.\nSOURCE: https://github.com/directus/docs/blob/main/content/tutorials/7.workflows/invincible-ai-content-workflows-with-inngest-and-directus.md#2025-04-09_snippet_9\n\nLANGUAGE: bash\nCODE:\n```\nnpm run build\n```\n\n----------------------------------------\n\nTITLE: Fetching Blog Posts with Directus SDK\nDESCRIPTION: Implementation of getStaticProps to fetch blog posts using Directus SDK in a Next.js application\nSOURCE: https://github.com/directus/docs/blob/main/content/tutorials/4.migration/migrate-from-notion-to-directus.md#2025-04-09_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nexport const getStaticProps = async () => {\n  await directus.auth.static(process.env.DIRECTUS_TOKEN);\n\n  const result = await directus.items('blogs').readByQuery({ sort: ['published_date'] });\n\n  const resolvedResult = await Promise.all(\n    result.data.map(async (blog) => {\n      const author = await directus.items('Authors').readOne(1);\n      return { ...blog, author: author?.name };\n    })\n  );\n\n  resolvedResult?.forEach((blog) => {\n    blog.image = `${process.env.DIRECTUS_URL}assets/${blog.image}`;\n  });\n\n  return {\n    props: {\n      blogs: resolvedResult,\n    },\n  };\n};\n```\n\n----------------------------------------\n\nTITLE: Adding Navigation Menu\nDESCRIPTION: HTML template for the main navigation menu\nSOURCE: https://github.com/directus/docs/blob/main/content/tutorials/1.getting-started/fetch-data-from-directus-with-angular.md#2025-04-09_snippet_16\n\nLANGUAGE: html\nCODE:\n```\n<nav>\n  <ul>\n    <li><a routerLink=\"/\">Home</a> </li>\n    <li><a routerLink=\"/about\">About</a> </li>\n    <li><a routerLink=\"/conduct\">Code of Conduct</a> </li>\n    <li><a routerLink=\"/privacy\">Privacy Policy</a> </li>\n    <li><a routerLink=\"/blog\">Blog</a> </li>\n  </ul>\n</nav>\n```\n\n----------------------------------------\n\nTITLE: Error Handling for Blocked Numbers\nDESCRIPTION: JavaScript code to throw an error when a phone number is blocked, preventing user creation\nSOURCE: https://github.com/directus/docs/blob/main/content/tutorials/7.workflows/detect-high-risk-phone-numbers-with-vonage-and-directus-automate.md#2025-04-09_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nthrow new Error('Phone number failed fraud checks');\n```\n\n----------------------------------------\n\nTITLE: Installing Directus SDK in Next.js Project\nDESCRIPTION: This command navigates to the newly created Next.js project directory and installs the Directus SDK as a dependency, which will be used to connect to the Directus API.\nSOURCE: https://github.com/directus/docs/blob/main/content/tutorials/1.getting-started/implementing-multilingual-content-using-directus-and-next.md#2025-04-09_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\ncd directus-next-multilingual\nnpm i @directus/sdk\n```\n\n----------------------------------------\n\nTITLE: Hero Component Implementation in Vue\nDESCRIPTION: Creates a Vue component for rendering the Hero block type from Directus, including headline, content, and optional buttons with different variants.\nSOURCE: https://github.com/directus/docs/blob/main/content/tutorials/1.getting-started/rendering-dynamic-blocks-using-nuxt.md#2025-04-09_snippet_9\n\nLANGUAGE: vue\nCODE:\n```\n<script setup lang=\"ts\">\ndefineProps<{\n\tid: string,\n\theadline: string,\n\tcontent: string,\n\tbuttons?: Button[]\n\timage: string,\n}>()\n</script>\n<template>\n\t<h2>{{ headline }}</h2>\n\t<div v-html=\"content\"></div>\n\t<div v-if=\"buttons\">\n\t\t<button v-for=\"button in buttons\" :key=\"button.label\" :href=\"button.href\" class=\"button\"\n\t\t\t:class=\"button.variant\">{{ button.label }}</button>\n\t</div>\n</template>\n\n<style scoped>\n.button {\n\tbackground-color: grey;\n\tcolor: white;\n}\n\n.button.primary {\n\tbackground-color: green;\n\tcolor: white;\n}\n\n.button.outline {\n\tbackground-color: transparent;\n\tborder: 1px solid black;\n\tcolor: black;\n}\n</style>\n```\n\n----------------------------------------\n\nTITLE: Running Directus Locally with Docker\nDESCRIPTION: Command to start a Directus instance using Docker on port 8055. This creates a non-persistent demo instance where all data will be lost when the container is stopped.\nSOURCE: https://github.com/directus/docs/blob/main/content/index.md#2025-04-09_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ndocker run -p 8055:8055 directus/directus\n```\n\n----------------------------------------\n\nTITLE: Creating a Reservation Function with Directus SDK\nDESCRIPTION: Implements a function to create a new reservation in Directus after successful payment. Takes reservation details including guest information, dates, and payment ID, then submits to the Directus API.\nSOURCE: https://github.com/directus/docs/blob/main/content/tutorials/2.projects/build-an-hotel-booking-platform-with-next-js-stripe-and-directus-automate.md#2025-04-09_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\ntype ReservationData = {\n  first_name: string;\n  last_name: string;\n  email: string;\n  phone_number: string;\n  check_in_date: string;\n  check_out_date: string;\n  room_id: string;\n  nights: string;\n  total_price: string;\n  payment_id: string;\n};\n\nexport const makeReservation = async (reservationData: ReservationData) => {\n  try {\n    const data = await directus.request(\n      createItem(\"reservations\", {\n        ...reservationData,\n      })\n    );\n    return \"Booking Successful\";\n  } catch (error) {\n    console.error(\"Error creating a reservation:\", error);\n  }\n};\n```\n\n----------------------------------------\n\nTITLE: Directus Extension Bundle Configuration\nDESCRIPTION: Package.json configuration for a Directus bundle extension that includes both an endpoint and a hook for Inngest integration.\nSOURCE: https://github.com/directus/docs/blob/main/content/tutorials/7.workflows/invincible-ai-content-workflows-with-inngest-and-directus.md#2025-04-09_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"directus:extension\": {\n    \"type\": \"bundle\",\n    \"path\": {\n      \"app\": \"dist/app.js\",\n      \"api\": \"dist/api.js\"\n    },\n    \"entries\": [\n      {\n        \"type\": \"endpoint\",\n        \"name\": \"inngest\",\n        \"source\": \"src/inngest/index.ts\"\n      },\n      {\n        \"type\": \"hook\",\n        \"name\": \"hooks\",\n        \"source\": \"src/hooks/index.ts\"\n      }\n    ],\n    \"host\": \"^10.0.0 || ^11.0.0\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Scaffolding Vue Component for Article Feedback\nDESCRIPTION: Initial structure of the Vue component for article feedback, including template divisions for different steps of the feedback process.\nSOURCE: https://github.com/directus/docs/blob/main/content/tutorials/2.projects/build-a-user-feedback-widget-with-vue-js-.md#2025-04-09_snippet_1\n\nLANGUAGE: vue\nCODE:\n```\n<script setup lang=\"ts\">\n</script>\n\n<template>\n\t<div class=\"wrapper\">\n\t\t<div class=\"step\">\n\t\t\t<!-- Step 1. Show Rating Buttons -->\n\t\t\t<div>\n\t\t\t\t<p class=\"desc\">How can we improve?</p>\n\t\t\t\t<p class=\"heading\">How helpful was this article?</p>\n\t\t\t</div>\n\t\t</div>\n\t\t<div class=\"step\">\n\t\t\t<!-- Step 2. Ask for Comments -->\n\t\t</div>\n\t\t<div class=\"step\">\n\t\t\t<!-- Step 3. Show Success Message -->\n\t\t</div>\n\t</div>\n</template>\n\n<style scoped>\n</style>\n```\n\n----------------------------------------\n\nTITLE: Filtering Library Items in Nuxt Content\nDESCRIPTION: This snippet demonstrates how to fetch and filter library items based on a collection in Nuxt Content. It shows the multiple round-trips and manual reconciliation required due to the lack of proper relationships.\nSOURCE: https://github.com/directus/docs/blob/main/content/tutorials/4.migration/migrate-from-nuxt-content-to-directus.md#2025-04-09_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconst collection = await $content('collections', params.slug).fetch()\n\nconst library = await $content('library').fetch()\n\nconst items = library.filter(libItem => collection.items.find(colItem => libItem.path.includes(colItem)))\n```\n\n----------------------------------------\n\nTITLE: Blog List Template\nDESCRIPTION: HTML template for displaying list of blog posts with links to individual posts.\nSOURCE: https://github.com/directus/docs/blob/main/content/tutorials/1.getting-started/fetch-data-from-directus-with-django.md#2025-04-09_snippet_11\n\nLANGUAGE: html\nCODE:\n```\n<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <title>Blog Posts</title>\n</head>\n<body>\n    <h1>Blog</h1>\n    <ul>\n        {% for post in posts %}\n            <li>\n                <a href=\"{% url 'blog_detail' post.slug %}\">{{ post.title }}</a>\n                <p>{{ post.publish_date }} by {{ post.author.name }}</p>\n            </li>\n        {% endfor %}\n    </ul>\n</body>\n</html>\n```\n\n----------------------------------------\n\nTITLE: Implementing Form Component and Submit Button in Vue\nDESCRIPTION: Vue code that renders a dynamic form using the v-form component and adds conditional submit buttons based on form data state. It passes fields to the form and binds form data to the model.\nSOURCE: https://github.com/directus/docs/blob/main/content/tutorials/5.extensions/create-collection-items-in-custom-panels.md#2025-04-09_snippet_13\n\nLANGUAGE: vue\nCODE:\n```\n<v-form v-if=\"fieldData\" :fields=\"fieldData\" v-model=\"formData\" />\n<v-button v-if=\"Object.keys(formData).length > 0\" @click=\"submitForm()\">Save</v-button>\n<v-button v-else secondary>Save</v-button>\n```\n\n----------------------------------------\n\nTITLE: Defining Email Template for Event Notifications in HTML\nDESCRIPTION: This snippet contains the HTML template used for formatting event notification emails. It displays event details including name, date, context, metadata, and execution ID.\nSOURCE: https://github.com/directus/docs/blob/main/content/tutorials/3.tips-and-tricks/build-a-monitoring-pipeline-for-flows-and-extensions-.md#2025-04-09_snippet_7\n\nLANGUAGE: html\nCODE:\n```\n<body>\n  Eventname: {{ event_name }}<br>\n  Eventdate: {{ event_date }}<br>\n  Context: {{ context }}<br>\n  <p>\n    Meta:<br>\n    {% for metadata in meta %}\n      {{ metadata.key }}: {{ metadata.value }}<br>\n    {% endfor %}\n  </p>\n  Execution ID: {{ execution_id }}\n</body>\n```\n\n----------------------------------------\n\nTITLE: Adding Content to Slots in Vue Template\nDESCRIPTION: Demonstrates how to add content to a named slot in a Vue template. This pattern is used throughout the guide for different slot types.\nSOURCE: https://github.com/directus/docs/blob/main/content/tutorials/5.extensions/understand-available-slots-in-custom-modules.md#2025-04-09_snippet_0\n\nLANGUAGE: vue\nCODE:\n```\n<template #slot_name>\n\t// Content to insert into the slot\n</template>\n```\n\n----------------------------------------\n\nTITLE: Adding Build Command for Chrome Extension\nDESCRIPTION: JSON package.json configuration to add a build command for the Chrome extension that copies the manifest to the dist folder.\nSOURCE: https://github.com/directus/docs/blob/main/content/tutorials/2.projects/build-a-notebook-chrome-extension-with-directus-auth.md#2025-04-09_snippet_6\n\nLANGUAGE: json\nCODE:\n```\n\"build-extension\": \"vite build && cp manifest.json dist/\"\n```\n\n----------------------------------------\n\nTITLE: User Logout in Directus\nDESCRIPTION: Examples demonstrating how to log out a user by invalidating the refresh token and destroying the session using different implementation methods.\nSOURCE: https://github.com/directus/docs/blob/main/content/guides/3.auth/4.email-login.md#2025-04-09_snippet_3\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"refresh_token\": \"Xp2tTNAdLYfnaAOOjt3oetyCWtobKKUIeEXj...\"\n}\n```\n\nLANGUAGE: graphql\nCODE:\n```\nmutation {\n\tauth_logout(refresh_token: \"Xp2tTNAdLYfnaAOOjt3oetyCWtobKKUIeEXj...\")\n}\n```\n\nLANGUAGE: javascript\nCODE:\n```\nimport { createDirectus, authentication, rest, logout } from '@directus/sdk';\n\nconst client = createDirectus('directus_project_url').with(authentication()).with(rest());\n\nconst result = await client.logout();\n```\n\n----------------------------------------\n\nTITLE: Initializing Directus Extension with NPX\nDESCRIPTION: Command to initialize a new Directus extension using the create-directus-extension package. This creates the boilerplate code for your endpoint extension.\nSOURCE: https://github.com/directus/docs/blob/main/content/tutorials/5.extensions/proxy-an-external-api-in-a-custom-endpoint-extension.md#2025-04-09_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nnpx create-directus-extension@latest\n```\n\n----------------------------------------\n\nTITLE: Docker Compose Configuration for Directus-Inngest Setup\nDESCRIPTION: Docker Compose configuration that sets up a development environment with Directus, PostgreSQL, Redis, and Inngest services.\nSOURCE: https://github.com/directus/docs/blob/main/content/tutorials/7.workflows/invincible-ai-content-workflows-with-inngest-and-directus.md#2025-04-09_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\nname: directus-inngest\nservices:\n  database:\n    container_name: directus-inngest-database\n    image: postgis/postgis:13-master\n    ports:\n      - 5432:5432\n    volumes:\n      - ./directus/data/database:/var/lib/postgresql/data\n    environment:\n      POSTGRES_USER: directus\n      POSTGRES_PASSWORD: directus\n      POSTGRES_DB: directus\n    networks:\n      - backend-network\n\n  cache:\n    container_name: directus-inngest-cache\n    image: redis:6\n    networks:\n      - backend-network\n\n  directus:\n    container_name: directus-inngest\n    image: directus/directus:latest\n    ports:\n      - 8055:8055\n    volumes:\n      - ./directus/uploads:/directus/uploads\n      - ./directus/extensions:/directus/extensions\n      - ./queue:/directus/extensions/queue\n    depends_on:\n      - cache\n      - database\n    networks:\n      - backend-network\n    environment:\n      KEY: 'your-directus-key'\n      SECRET: 'your-directus-secret'\n      DB_CLIENT: 'pg'\n      DB_HOST: 'database'\n      DB_PORT: '5432'\n      DB_DATABASE: 'directus'\n      DB_USER: 'directus'\n      DB_PASSWORD: 'directus'\n      INNGEST_BASE_URL: 'http://inngest:8288'\n      INNGEST_DEV: 'true'\n      INNGEST_EVENT_KEY: 'your-event-key-here'\n      INNGEST_SIGNING_KEY: 'your-signing-key-here'\n      EXTENSIONS_AUTO_RELOAD: 'true'\n\n  inngest:\n    container_name: directus-inngest-inngest\n    image: inngest/inngest:latest\n    command: 'inngest dev -u http://directus:8055/inngest'\n    ports:\n      - '8288:8288'\n    networks:\n      - backend-network\n\nnetworks:\n  backend-network:\n    driver: bridge\n```\n\n----------------------------------------\n\nTITLE: Replacing Image URLs in WordPress Content\nDESCRIPTION: Python code that processes a WordPress JSON export file, identifies image URLs in the content, uploads each image to Directus, and replaces the original URLs with new Directus asset URLs in the content.\nSOURCE: https://github.com/directus/docs/blob/main/content/tutorials/4.migration/migrate-from-wordpress-to-directus.md#2025-04-09_snippet_3\n\nLANGUAGE: python\nCODE:\n```\n# Load JSON data from the file\nwith open(json_file_path, \"r\") as file:\n    data = json.load(file)\n# Iterate through each post in the JSON data\nfor post in data:\n    content = post[\"Content\"]\n    # Check if there is an image in the content\n    if '<img src=\"' in content:\n        # Extract the image URL\n        start_index = content.index('<img src=\"') + 10\n        end_index = content.index('\"', start_index)\n        image_url = content[start_index:end_index]\n        # Upload the image to Directus and get the new URL\n        new_image_url = upload_to_directus(image_url)\n        print(new_image_url)\n        # Replace the old image URL with the new one in the content\n        post[\"Content\"] = content.replace(image_url, new_image_url)\n# Output the modified JSON data to a new file or print it out\noutput_file_path = \"modified_WP-data.json\"\nwith open(output_file_path, \"w\") as file:\n    json.dump(data, file, indent=4)\n# Print a message to indicate completion\nprint(\"The JSON data has been updated with Directus image URLs.\")\n```\n\n----------------------------------------\n\nTITLE: Implementing Message Sending\nDESCRIPTION: Function to send new messages through Directus WebSocket\nSOURCE: https://github.com/directus/docs/blob/main/content/tutorials/2.projects/build-a-realtime-chat-app-with-directus-and-sveltekit.md#2025-04-09_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\nconst sendMessage = async (event) => {\n  event.preventDefault();\n  if (!messageContent.trim() || !refreshToken) return;\n\n  try {\n    if (!websocketConnected) {\n      await connectWebSocket();\n    }\n\n    await directus.sendMessage({\n      type: \"items\",\n      collection: \"messages\",\n      action: \"create\",\n      data: { content: messageContent },\n    });\n\n    console.log(\"Message sent via WebSocket\");\n    messageContent = \"\";\n  } catch (error) {\n    console.error(\"Failed to send message:\", error);\n    if (!websocketConnected) {\n      attemptReconnect();\n    }\n  }\n};\n```\n\n----------------------------------------\n\nTITLE: Configuring Android Manifest for Internet Access\nDESCRIPTION: Updates the Android Manifest file to include internet permission required for API communication with Directus.\nSOURCE: https://github.com/directus/docs/blob/main/content/tutorials/1.getting-started/fetch-data-from-directus-in-android-with-kotlin.md#2025-04-09_snippet_7\n\nLANGUAGE: xml\nCODE:\n```\n<?xml version=\"1.0\" encoding=\"utf-8\"?>\n<manifest xmlns:android=\"http://schemas.android.com/apk/res/android\"\n    xmlns:tools=\"http://schemas.android.com/tools\">\n\n    <application\n        android:allowBackup=\"true\"\n        android:dataExtractionRules=\"@xml/data_extraction_rules\"\n        android:fullBackupContent=\"@xml/backup_rules\"\n        android:icon=\"@mipmap/ic_launcher\"\n        android:label=\"@string/app_name\"\n        android:roundIcon=\"@mipmap/ic_launcher_round\"\n        android:supportsRtl=\"true\"\n        android:theme=\"@style/Theme.DirectusApp\"\n        tools:targetApi=\"31\">\n        <activity\n            android:name=\".MainActivity\"\n            android:exported=\"true\"\n            android:label=\"@string/app_name\"\n            android:theme=\"@style/Theme.DirectusApp\">\n            <intent-filter>\n                <action android:name=\"android.intent.action.MAIN\" />\n\n                <category android:name=\"android.intent.category.LAUNCHER\" />\n            </intent-filter>\n        </activity>\n    </application>\n\n    <uses-permission android:name=\"android.permission.INTERNET\" />\n</manifest>\n```\n\n----------------------------------------\n\nTITLE: Creating Posts with SwiftUI in Directus\nDESCRIPTION: A SwiftUI view for creating new posts in Directus with title and content fields. The view handles form submission via a POST request to the Directus API with proper authentication and displays appropriate error alerts if the request fails.\nSOURCE: https://github.com/directus/docs/blob/main/content/tutorials/1.getting-started/implement-directus-auth-with-ios.md#2025-04-09_snippet_3\n\nLANGUAGE: swift\nCODE:\n```\nimport SwiftUI\n\nstruct CreatePostView: View {\n    @State private var title: String = \"\"\n    @State private var content: String = \"\"\n    @State private var showAlert: Bool = false\n    @State private var alertMessage: String = \"\"\n    let accessToken: String\n\n    var body: some View {\n        VStack {\n            TextField(\"Title\", text: $title)\n                .padding()\n                .textFieldStyle(RoundedBorderTextFieldStyle())\n\n            TextField(\"Content\", text: $content)\n                .padding()\n                .textFieldStyle(RoundedBorderTextFieldStyle())\n\n            Button(action: {\n                createPost()\n            }) {\n                Text(\"Create Post\")\n                    .padding()\n                    .background(Color.blue)\n                    .foregroundColor(.white)\n                    .cornerRadius(8)\n            }\n        }\n        .padding()\n        .alert(isPresented: $showAlert) {\n            Alert(title: Text(\"Error\"), message: Text(alertMessage), dismissButton: .default(Text(\"OK\")))\n        }\n    }\n\n    func createPost() {\n        guard let url = URL(string: \"https://your-directus-project-url/items/posts\") else {\n            showAlert = true\n            alertMessage = \"Invalid URL\"\n            return\n        }\n\n        let postData = [\"title\": title, \"content\": content]\n\n        var request = URLRequest(url: url)\n        request.httpMethod = \"POST\"\n        request.addValue(\"application/json\", forHTTPHeaderField: \"Content-Type\")\n        request.addValue(\"Bearer \\(accessToken)\", forHTTPHeaderField: \"Authorization\")\n\n        do {\n            request.httpBody = try JSONSerialization.data(withJSONObject: postData, options: [])\n        } catch {\n            showAlert = true\n            alertMessage = \"Error encoding post data\"\n            return\n        }\n\n        URLSession.shared.dataTask(with: request) { data, response, error in\n            guard let httpResponse = response as? HTTPURLResponse, error == nil else {\n                showAlert = true\n                alertMessage = error?.localizedDescription ?? \"Unknown error\"\n                return\n            }\n\n            if (200..<300).contains(httpResponse.statusCode) {\n                print(\"Post created successfully\")\n            } else {\n                showAlert = true\n                alertMessage = \"Failed to create post. Status code: \\(httpResponse.statusCode)\"\n            }\n        }.resume()\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Initializing Directus SDK Configuration\nDESCRIPTION: Setting up Directus SDK with authentication, REST, and realtime capabilities\nSOURCE: https://github.com/directus/docs/blob/main/content/tutorials/2.projects/build-a-realtime-chat-app-with-directus-and-sveltekit.md#2025-04-09_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nimport { createDirectus, authentication, realtime, rest } from \"@directus/sdk\";\n\nconst directusURL = \"http://localhost:8055\";\n\nexport const directus = createDirectus(directusURL)\n  .with(authentication())\n  .with(rest())\n  .with(realtime());\n```\n\n----------------------------------------\n\nTITLE: Implementing Inngest Function Example in TypeScript\nDESCRIPTION: Example of an Inngest function implementation showing content analysis workflow with atomic steps and state preservation.\nSOURCE: https://github.com/directus/docs/blob/main/content/tutorials/7.workflows/invincible-ai-content-workflows-with-inngest-and-directus.md#2025-04-09_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nexport const analyzeContent = inngest.createFunction(\n  { id: \"analyze-content\" },\n  { event: \"content/created\" },\n  async ({ event, step }) => {\n    const extractedText = await step.run(\"extract-text\", async () => {\n      return textExtractor.process(event.data.documentUrl)\n    })\n\n    const analysis = await step.run(\"analyze-with-ai\", async () => {\n      return aiService.analyze(extractedText)\n    })\n\n    return analysis\n  }\n)\n```\n\n----------------------------------------\n\nTITLE: Creating TextArea Component for Markdown Content in Next.js\nDESCRIPTION: A component for handling markdown content using a textarea. It supports field width configuration and required validation based on Directus field metadata.\nSOURCE: https://github.com/directus/docs/blob/main/content/tutorials/2.projects/build-forms-dynamically-using-directus-and-next.md#2025-04-09_snippet_10\n\nLANGUAGE: javascript\nCODE:\n```\n\"use client\"\nimport { useState } from 'react';\n\nexport default function TextArea({\n  defaultValue = '',\n  label = '',\n  field,\n  value,\n  setValue\n}) {\n\n  const handleChange = (e) => {\n    const value = e.target.value;\n    setValue(value);\n  };\n\n  const fieldWidth = field.meta?.width === 'full' ? '100%' : '50%';\n\n  return (\n    <div style={{ width: fieldWidth }}>\n      <label htmlFor={field.field}>{label}</label>\n      <textarea\n        name={field.schema?.name}\n        value={value}\n        onChange={handleChange}\n        rows={12}\n        required={field.meta?.required}\n        style={{ width: '100%' }}\n      />\n    </div>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Directus Live Preview URL Pattern with Version\nDESCRIPTION: This snippet shows the URL pattern for Directus live preview, including a dynamic version parameter. It allows content to be previewed with specific versions.\nSOURCE: https://github.com/directus/docs/blob/main/content/tutorials/1.getting-started/implementing-live-preview-in-astro.md#2025-04-09_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\n`http://your-website-url/[id]?preview=true&token=<YOUR_GENERATED_TOKEN>&version=Version`\n```\n\n----------------------------------------\n\nTITLE: Initializing Directus SDK Projects\nDESCRIPTION: Sets up base and target Directus projects with SDK configuration and authentication for schema migration.\nSOURCE: https://github.com/directus/docs/blob/main/content/tutorials/4.migration/promoting-changes-between-environments-in-directus.md#2025-04-09_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport { createDirectus, authentication, rest, schemaSnapshot, schemaDiff, schemaApply } from '@directus/sdk';\nconst BASE_DIRECTUS_URL = 'https://your-base-project.directus.app';\n\nconst TARGET_DIRECTUS_URL = 'https://your-target-project.directus.app';\n\nconst baseDirectus = createDirectus(BASE_DIRECTUS_URL).with(rest());\nconst targetDirectus = createDirectus(TARGET_DIRECTUS_URL).with(rest());\n\nawait baseDirectus.login('base_email', 'base_password');\nawait targetDirectus.login('target_email', 'target_password');\n\nasync function main() {}\n\nmain();\n```\n\n----------------------------------------\n\nTITLE: Starting Directus Development Server\nDESCRIPTION: Commands to start the Directus development server, including options for running all packages or specific ones like the API.\nSOURCE: https://github.com/directus/docs/blob/main/content/community/3.codebase/2.dev-environment.md#2025-04-09_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\npnpm --recursive dev\n```\n\nLANGUAGE: bash\nCODE:\n```\npnpm --filter api dev\n```\n\n----------------------------------------\n\nTITLE: Fetching Articles with Directus SDK in TypeScript\nDESCRIPTION: This code initializes a Directus client and fetches published articles sorted by publication date. It demonstrates how to create a connection to a Directus instance, specify fields to retrieve, apply filters, sort results, and limit the number of returned items.\nSOURCE: https://github.com/directus/docs/blob/main/content/_partials/home-hero/data.md#2025-04-09_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { createDirectus, rest, readItems } from '@directus/sdk';\nconst directus = createDirectus('http://directus.example.com');\n\nconst item = await directus.request(\n\treadItems('articles', {\n\t\tfields: ['id', 'title', 'date_published', 'summary'],\n\t\tfilter: { status: { _eq: 'published' } },\n\t\tsort: ['-date_published'],\n\t\tlimit: 3\n\t})\n);\n```\n\n----------------------------------------\n\nTITLE: Displaying Markdown Table for Table Layout Subheader Controls\nDESCRIPTION: This markdown table lists and describes the subheader controls available in the Table layout of Directus, including column adjustments, field management, sorting, and item selection.\nSOURCE: https://github.com/directus/docs/blob/main/content/guides/2.content/3.layouts.md#2025-04-09_snippet_2\n\nLANGUAGE: markdown\nCODE:\n```\n| Control                          | Description                                                                                                             |\n| -------------------------------- | ----------------------------------------------------------------------------------------------------------------------- |\n| **Adjust Column Width**      | Click and drag the column divider to resize as desired.                                                                 |\n| **Add Field**                | Select :icon{name=\"material-symbols:add-circle-outline-rounded\"} in the page subheader and select the desired Field(s). |\n| **Remove Field**             | Select :icon{name=\"material-symbols:arrow-drop-down-circle\"} in the column title and click **\"Hide Field\"**.        |\n| **Sort Items by Column**     | Select :icon{name=\"material-symbols:arrow-drop-down-circle\"} in the column title and sort ascending or descending.      |\n| **Set Text Alignment**       | Select :icon{name=\"material-symbols:arrow-drop-down-circle\"} in the column title and set left, right, or center.        |\n| **Toggle & Reorder Columns** | Click the column header, then drag-and-drop as desired.                                                                 |\n| **Select All**               | Click :icon{name=\"material-symbols:check-box-outline\"} in the selection column header.                                  |\n```\n\n----------------------------------------\n\nTITLE: Creating TextArea Component for Markdown Content in Next.js\nDESCRIPTION: A component for handling markdown content using a textarea. It supports field width configuration and required validation based on Directus field metadata.\nSOURCE: https://github.com/directus/docs/blob/main/content/tutorials/2.projects/build-forms-dynamically-using-directus-and-next.md#2025-04-09_snippet_10\n\nLANGUAGE: javascript\nCODE:\n```\n\"use client\"\nimport { useState } from 'react';\n\nexport default function TextArea({\n  defaultValue = '',\n  label = '',\n  field,\n  value,\n  setValue\n}) {\n\n  const handleChange = (e) => {\n    const value = e.target.value;\n    setValue(value);\n  };\n\n  const fieldWidth = field.meta?.width === 'full' ? '100%' : '50%';\n\n  return (\n    <div style={{ width: fieldWidth }}>\n      <label htmlFor={field.field}>{label}</label>\n      <textarea\n        name={field.schema?.name}\n        value={value}\n        onChange={handleChange}\n        rows={12}\n        required={field.meta?.required}\n        style={{ width: '100%' }}\n      />\n    </div>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Defining TypeScript Interface for Video Data\nDESCRIPTION: TypeScript interface that defines the structure of the video data retrieved from Directus, including metadata like title, description, file references, and view statistics.\nSOURCE: https://github.com/directus/docs/blob/main/content/tutorials/2.projects/build-a-video-streaming-app-with-sveltekit-and-directus.md#2025-04-09_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nexport interface Video {\n  id: string;\n  title: string;\n  description: string;\n  video_file:  { id: string };\n  thumbnail: { id: string };\n  tags: string[];\n  duration: number;\n  views: number;\n  upload_date: string;\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Session Authentication Mode\nDESCRIPTION: Environment variables configuration for setting up session-based authentication with cross-domain cookie access.\nSOURCE: https://github.com/directus/docs/blob/main/content/guides/3.auth/7.sso/2.seamless.md#2025-04-09_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\nAUTH_<PROVIDER>_MODE=\"session\"\nSESSION_COOKIE_DOMAIN=\"XXXX\"\nSESSION_COOKIE_SECURE=\"true\"\nSESSION_COOKIE_SAME_SITE=\"None\"\n```\n\n----------------------------------------\n\nTITLE: Implementing Blog Post Listing\nDESCRIPTION: Astro component that fetches and displays a list of blog posts from Directus with sorting and field selection.\nSOURCE: https://github.com/directus/docs/blob/main/content/tutorials/1.getting-started/fetch-data-from-directus-with-astro.md#2025-04-09_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\n---\nimport Layout from \"../../layouts/Layout.astro\";\nimport directus from \"../../lib/directus\";\nimport { readItems } from \"@directus/sdk\";\n\nconst posts = await directus.request(\n  readItems(\"posts\", {\n    fields: [\n      \"slug\",\n      \"title\",\n      \"published_date\",\n      { author: [\"name\"] },\n    ],\n    sort: [\"-published_date\"],\n  })\n);\n---\n\n<Layout title=\"Blog\">\n  <main>\n    <h1>Blog Posts</h1>\n   <ul>\n    {\n      posts.map((post) => (\n        <li>\n          <a href={`/blog/${post.slug}`}>\n            <h2>{post.title}</h2>\n          </a>\n          <span>\n            {post.published_date} &bull; {post.author.name}\n          </span>\n        </li>\n      ))\n    }\n   </ul>\n  </main>\n</Layout>\n```\n\n----------------------------------------\n\nTITLE: Generating AI Rabbitars with OpenAI's Dall•E 3 in Nuxt\nDESCRIPTION: This server-side Nuxt route handles the generation of AI Rabbitars using OpenAI's Dall•E 3 model. It includes user authentication, avatar generation limit checking, API calls to OpenAI, and updating the Directus backend with the generated avatar.\nSOURCE: https://github.com/directus/docs/blob/main/content/tutorials/2.projects/build-the-leap-week-registration-and-referral-system-.md#2025-04-09_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\nimport { importFile, readItem } from '@directus/sdk';\nimport { directusServer } from '~/server/utils/directus-server';\nimport jwt from 'jsonwebtoken';\nimport type { Token, People } from '~/types';\n\nconst openAiApiKey = process.env.OPENAI_API_KEY;\nconst jwtSecret = process.env.JWT_SECRET;\nconst avatarLimit = 3;\n\nexport default defineEventHandler(async (event) => {\n\ttry {\n\t\t// Get the body and the cookies from the event\n\t\tconst body = await readBody(event);\n\t\tconst cookies = parseCookies(event);\n\n\t\t// Check the number of avatars generated for the ticket id\n\t\tconst token = (await jwt.verify(cookies.leapweek_token, jwtSecret as string)) as Token;\n\n\t\tif (!token) {\n\t\t\tthrow createError({ statusCode: 401, statusMessage: 'Unauthorized' });\n\t\t}\n\n\t\tconst ticket = await directusServer.request(readItem('event_tickets', token.ticket_id));\n\n\t\tif (!ticket) {\n\t\t\tthrow createError({ statusCode: 500, statusMessage: 'Ticket not found' });\n\t\t}\n\n\t\t// If they have genearated 3 avatars, throw an error\n\t\tif (ticket.avatars && ticket.avatars.length >= avatarLimit) {\n\t\t\tthrow createError({ statusCode: 500, statusMessage: `Maximum number of ${avatarLimit} avatars generated.` });\n\t\t}\n\n\t\tlet { attributes } = body;\n\n\t\tattributes = attributes.join(', ');\n\n\t\tconst prompt = `A photorealistic head-on headshot of a single rabbit, set against a black background, with detailed fur texture and realistic lighting. Keep the rabbits face inside the frame. The rabbit should have the following characteristics: ${attributes}.`;\n\n\t\tconst image: any = await $fetch('https://api.openai.com/v1/images/generations', {\n\t\t\tmethod: 'POST',\n\t\t\theaders: { Authorization: `Bearer ${openAiApiKey}`, 'Content-Type': 'application/json' },\n\t\t\tbody: { prompt, model: 'dall-e-3', n: 1, size: '1024x1024' },\n\t\t});\n\n\t\tconst imageResponse = await directusServer.request(\n\t\t\timportFile(image.data[0].url, {\n\t\t\t\tdescription: image.data[0].revised_prompt,\n\t\t\t}),\n\t\t);\n\n\t\t// Update ticket with the new avatar\n\t\tawait directusServer.request(\n\t\t\tupdateItem('event_tickets', token.ticket_id, {\n\t\t\t\tavatars: {\n\t\t\t\t\tcreate: [\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tdirectus_files_id: imageResponse.id,\n\t\t\t\t\t\t\tevent_tickets_id: token.ticket_id,\n\t\t\t\t\t\t},\n\t\t\t\t\t],\n\t\t\t\t},\n\t\t\t\tpeople_id: {\n\t\t\t\t\tid: token.people_id,\n\t\t\t\t\t// If the avatar is the first one, set it as the main avatar\n\t\t\t\t\tavatar: ticket.avatars?.length === 0 ? imageResponse.id : (ticket.people_id as People)?.avatar,\n\t\t\t\t},\n\t\t\t}),\n\t\t);\n\n\t\treturn { directus_files_id: imageResponse.id };\n\t} catch (error) {\n\t\treturn error;\n\t}\n});\n```\n\n----------------------------------------\n\nTITLE: Importing Vue and Directus Composables\nDESCRIPTION: Import statements for necessary Vue and Directus SDK composables needed for the panel functionality. These provide access to Directus APIs and reactive state management.\nSOURCE: https://github.com/directus/docs/blob/main/content/tutorials/5.extensions/create-collection-items-in-custom-panels.md#2025-04-09_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nimport { useApi, useCollection, useStores } from '@directus/extensions-sdk';\nimport { ref, watch } from 'vue';\n```\n\n----------------------------------------\n\nTITLE: CRUD Operations with RelationsService in Directus\nDESCRIPTION: These snippets illustrate how to perform Create, Read, Update, and Delete operations using the RelationsService in Directus. Each operation is shown with a simple example.\nSOURCE: https://github.com/directus/docs/blob/main/content/guides/9.extensions/2.api-extensions/4.services.md#2025-04-09_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\nconst data = await relationsService.createOne({\n\tcollection: 'articles',\n\tfield: 'featured_image',\n\trelated_collection: 'directus_files',\n});\n```\n\nLANGUAGE: javascript\nCODE:\n```\nconst data = await relationsService.readOne('collection_name', 'field_name');\n```\n\nLANGUAGE: javascript\nCODE:\n```\nconst data = await relationsService.updateOne(\n\t'collection_name',\n\t'field_name',\n\t{\n\t\tmeta: {\n\t\t\tone_field: 'articles',\n\t\t},\n\t},\n);\n```\n\nLANGUAGE: javascript\nCODE:\n```\nconst data = await relationsService.deleteOne('collection_name', 'field_name' );\n```\n\n----------------------------------------\n\nTITLE: CRUD Operations with RelationsService in Directus\nDESCRIPTION: These snippets illustrate how to perform Create, Read, Update, and Delete operations using the RelationsService in Directus. Each operation is shown with a simple example.\nSOURCE: https://github.com/directus/docs/blob/main/content/guides/9.extensions/2.api-extensions/4.services.md#2025-04-09_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\nconst data = await relationsService.createOne({\n\tcollection: 'articles',\n\tfield: 'featured_image',\n\trelated_collection: 'directus_files',\n});\n```\n\nLANGUAGE: javascript\nCODE:\n```\nconst data = await relationsService.readOne('collection_name', 'field_name');\n```\n\nLANGUAGE: javascript\nCODE:\n```\nconst data = await relationsService.updateOne(\n\t'collection_name',\n\t'field_name',\n\t{\n\t\tmeta: {\n\t\t\tone_field: 'articles',\n\t\t},\n\t},\n);\n```\n\nLANGUAGE: javascript\nCODE:\n```\nconst data = await relationsService.deleteOne('collection_name', 'field_name' );\n```\n\n----------------------------------------\n\nTITLE: Disabling 2FA in Directus API\nDESCRIPTION: This snippet demonstrates how to disable 2FA using the Directus API. It requires sending a POST request with a one-time password (OTP) generated by the user's authenticator app.\nSOURCE: https://github.com/directus/docs/blob/main/content/guides/3.auth/5.2fa.md#2025-04-09_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n{\n\t\"otp\": \"123456\"\n}\n```\n\n----------------------------------------\n\nTITLE: Installing Vue Project Dependencies for Chrome Extension\nDESCRIPTION: Commands to create a new Vue project using Vite and install necessary dependencies including Directus SDK, js-cookie, and vue-router.\nSOURCE: https://github.com/directus/docs/blob/main/content/tutorials/2.projects/build-a-notebook-chrome-extension-with-directus-auth.md#2025-04-09_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm create vite@latest directus-webnote-keeper -- --template vue\ncd directus-webnote-keeper\nnpm install\nnpm install @directus/sdk js-cookie vue-router\nnpm run dev\n```\n\n----------------------------------------\n\nTITLE: Implementing API Entrypoint for Directus Flow Operation in JavaScript\nDESCRIPTION: This code defines the server-side logic for a custom Flow operation. It includes an identifier that must match the App Entrypoint's ID and a handler function that processes the operation when executed.\nSOURCE: https://github.com/directus/docs/blob/main/content/guides/9.extensions/2.api-extensions/3.operations.md#2025-04-09_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nexport default {\n\tid: 'custom',\n\thandler: (options) => {\n\t\tconsole.log(options.text);\n\t},\n};\n```\n\n----------------------------------------\n\nTITLE: Creating Base HTML Template with Jinja\nDESCRIPTION: Base HTML template that other pages will extend, using Jinja templating for dynamic content blocks\nSOURCE: https://github.com/directus/docs/blob/main/content/tutorials/1.getting-started/fetch-data-from-directus-with-flask.md#2025-04-09_snippet_0\n\nLANGUAGE: jinja\nCODE:\n```\n<!DOCTYPE html>\n<html lang=\"en\">\n\t<head>\n\t\t<meta charset=\"UTF-8\" />\n\t\t<meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\" />\n\t\t<title>{% block title %}Directus x Flask{% endblock %}</title>\n\t</head>\n\t<body>\n\t\t<main>{% block content %}{% endblock %}</main>\n\t</body>\n</html>\n```\n\n----------------------------------------\n\nTITLE: Updating the Template to Render Form Elements\nDESCRIPTION: Updates the Vue template to render a form with dynamic form elements for each field in the Directus collection.\nSOURCE: https://github.com/directus/docs/blob/main/content/tutorials/2.projects/build-forms-dynamically-using-directus-and-nuxt.md#2025-04-09_snippet_9\n\nLANGUAGE: vue\nCODE:\n```\n<template>\n\t<h1>New Post</h1>\n\t<form>\n\t\t<DirectusFormElement v-for=\"field in postFields\" :key=\"field.field\" :field=\"field\" />\n\t</form>\n</template>\n```\n\n----------------------------------------\n\nTITLE: Updating Next.js Page Component for Version Handling\nDESCRIPTION: Modifies a Next.js page component to read the version from URL search parameters and pass it to the getPostById function. This allows for rendering different versions of content based on the URL.\nSOURCE: https://github.com/directus/docs/blob/main/content/tutorials/7.workflows/combine-live-preview-and-content-versioning-with-next-js.md#2025-04-09_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nimport directus from \"@/lib/directus\";\nimport { readItems } from \"@directus/sdk\";\nimport { draftMode } from \"next/headers\";\n\nexport default async function Post({\n  searchParams,\n  params: { id }\n}: {\n  searchParams: { [key: string]: string | string[] | undefined };\n  params: { id: string };\n}) {\n  const { isEnabled } = draftMode();\n\n  const post = await getPostById(id, searchParams.version?.toString());\n\n  if (!post) {\n    return null;\n  }\n\n  const { title, body } = post;\n\n  return (\n    <article>\n      <h1>{title}</h1>\n      <p>{body}</p>\n      {isEnabled && <p>(Draft Mode)</p>}\n    </article>\n  );\n}\n\nexport async function generateStaticParams() {\n  const posts = await directus.request(\n    readItems(\"Posts\", {\n      limit: -1\n    })\n  );\n\n  return posts.map((post) => ({\n    id: String(post.id)\n  }));\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Up Vue Component State and Stores\nDESCRIPTION: Initialization of Vue component state variables and Directus stores for managing fields, permissions, and API access. This establishes the reactive state for the panel's functionality.\nSOURCE: https://github.com/directus/docs/blob/main/content/tutorials/5.extensions/create-collection-items-in-custom-panels.md#2025-04-09_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\nsetup(props) {\n  const { useFieldsStore, usePermissionsStore } = useStores();\n  const fieldsStore = useFieldsStore();\n  const permissionsStore = usePermissionsStore();\n  const hasPermission = permissionsStore.hasPermission(props.collection, 'create');\n  const api = useApi();\n  const { primaryKeyField } = useCollection(props.collection);\n  const formData = ref({});\n  const fieldData = ref([]);\n\n  const formResponse = ref({});\n  const formError = ref({});\n  const responseDialog = ref(false);\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a Navigation Menu in Django Base Template\nDESCRIPTION: This snippet shows how to add a navigation menu to a base Django template. It creates links to home, about, and blog pages using Django's URL template tags, and includes a content block that child templates can fill.\nSOURCE: https://github.com/directus/docs/blob/main/content/tutorials/1.getting-started/fetch-data-from-directus-with-django.md#2025-04-09_snippet_16\n\nLANGUAGE: python\nCODE:\n```\n<nav>\n    <a href=\"{% url 'home' %}\">Home</a>\n    <a href=\"{% url 'about' %}\">About</a>\n    <a href=\"{% url 'blog_list' %}\">Blog</a>\n</nav>\n\n{% block content %}\n{% endblock %}\n```\n\n----------------------------------------\n\nTITLE: Adding Extensions Volume to Docker Compose\nDESCRIPTION: Update the Docker Compose configuration to include a volume for Directus extensions.\nSOURCE: https://github.com/directus/docs/blob/main/content/tutorials/5.extensions/display-external-weather-api-data-in-custom-panels.md#2025-04-09_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nvolumes:\n  - ./database:/directus/database\n  - ./uploads:/directus/uploads\n  - ./extensions:/directus/extensions // [!code ++]\n```\n\n----------------------------------------\n\nTITLE: Implementing SSO Login Button\nDESCRIPTION: HTML markup for creating a login button that redirects to Directus authentication endpoint with a callback URL.\nSOURCE: https://github.com/directus/docs/blob/main/content/guides/3.auth/7.sso/2.seamless.md#2025-04-09_snippet_1\n\nLANGUAGE: html\nCODE:\n```\n<a\n  href=\"https://directus.myserver.com/auth/login/google?redirect=https://client.myserver.com/login\"\n  >Login</a\n>\n```\n\n----------------------------------------\n\nTITLE: Importing Directus SDK Composables in HTML\nDESCRIPTION: Imports necessary SDK functions from the Directus SDK using unpkg CDN. The imports include createDirectus, authentication, and realtime modules needed for WebSocket communication.\nSOURCE: https://github.com/directus/docs/blob/main/content/tutorials/2.projects/build-a-multi-user-chat-with-javascript-and-directus-realtime.md#2025-04-09_snippet_2\n\nLANGUAGE: html\nCODE:\n```\n<!doctype html>\n<html>\n\t<body>\n\t\t<script>\n\t\t\timport { createDirectus, authentication, realtime } from 'https://www.unpkg.com/@directus/sdk/dist/index.js'; // [!code ++]\n\n\t\t\tconst url = 'https://your-directus-url';\n\t\t</script>\n\t</body>\n</html>\n```\n\n----------------------------------------\n\nTITLE: Adding Status Notices in Vue\nDESCRIPTION: This Vue component adds status notices to display success or error messages after sending SMS. It uses v-notice components to show the number of messages sent or any errors encountered.\nSOURCE: https://github.com/directus/docs/blob/main/content/tutorials/5.extensions/send-sms-messages-with-twilio-in-custom-panels.md#2025-04-09_snippet_23\n\nLANGUAGE: vue\nCODE:\n```\n<v-notice v-if=\"smsErrors.length > 0\" type=\"danger\" icon=\"warning\">\n\tThere was an issue sending {{ smsErrors.length }} message{{ smsErrors.length > 1 ? 's' : '' }}.\n</v-notice>\n\n<v-notice v-if=\"smsSent > 0\" type=\"success\" icon=\"done\">\n\t{{ smsSent }} message{{ smsSent > 1 ? 's' : '' }} successfully.\n</v-notice>\n```\n\n----------------------------------------\n\nTITLE: Local Testing Configuration for Seamless SSO\nDESCRIPTION: Environment variables for testing Seamless SSO locally without SSL certificates by disabling secure cookies requirements.\nSOURCE: https://github.com/directus/docs/blob/main/content/guides/3.auth/7.sso/2.seamless.md#2025-04-09_snippet_4\n\nLANGUAGE: sh\nCODE:\n```\nSESSION_COOKIE_SECURE=\"false\"\nSESSION_COOKIE_SAME_SITE=\"lax\"\n\n```\n\n----------------------------------------\n\nTITLE: Updating Directus API Function for Version-Specific Content Retrieval\nDESCRIPTION: Modifies the getPostById function to accept an optional version parameter. This allows fetching specific versions of content from Directus when requested.\nSOURCE: https://github.com/directus/docs/blob/main/content/tutorials/7.workflows/combine-live-preview-and-content-versioning-with-next-js.md#2025-04-09_snippet_1\n\nLANGUAGE: js\nCODE:\n```\nexport async function getPostById(id: string, version?: string) {\n  return await client.request(readItem('Posts', id, { version }));\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Stripe Webhook Handler in Next.js API Route\nDESCRIPTION: A server-side API route that processes Stripe webhook events. It verifies the webhook signature, handles completed checkout sessions, extracts order metadata, and creates orders in Directus when payments are successful.\nSOURCE: https://github.com/directus/docs/blob/main/content/tutorials/2.projects/build-an-ecommerce-platform-with-next-js-stripe-and-directus-automate.md#2025-04-09_snippet_21\n\nLANGUAGE: ts\nCODE:\n```\nimport { NextResponse } from \"next/server\";\nimport Stripe from \"stripe\";\nimport { createOrder } from \"@/lib/apis\";\n\nconst checkout_session_completed = \"checkout.session.completed\";\nconst stripe = new Stripe(process.env.STRIPE_SECRET_KEY as string);\n\nexport async function POST(req: Request, res: Response) {\n  const reqBody = await req.text();\n  const sig = req.headers.get(\"stripe-signature\");\n  const webhookSecret = process.env.STRIPE_WEBHOOK_SECRET;\n\n  let event: Stripe.Event;\n\n  try {\n    if (!sig || !webhookSecret) return;\n    event = stripe.webhooks.constructEvent(reqBody, sig, webhookSecret);\n  } catch (error: any) {\n    console.log(error);\n    return NextResponse.json(\n      { message: `Webhook Error: ${error.message}` },\n      { status: 500 }\n    );\n  }\n\n  // load our event\n  switch (event.type) {\n    case checkout_session_completed:\n      const session = event.data.object;\n      if (!session.metadata || !session.payment_intent) {\n        console.error(\"Missing metadata or Payment Intent in Stripe session\");\n        // Optionally return an error response\n        return NextResponse.json(\n          { message: \"Incomplete order data\" },\n          { status: 400 }\n        );\n      }\n\n      const {\n        // @ts-ignore\n        metadata: {\n          total_amount,\n          first_name,\n          last_name,\n          shipping_address,\n          email,\n          products,\n          date,\n          order_no,\n        },\n        payment_intent,\n      } = session;\n      console.log({ payment_intent });\n      await createOrder({\n        total_amount,\n        first_name,\n        last_name,\n        shipping_address,\n        email,\n        products: JSON.parse(products),\n        payment_id: payment_intent as string,\n        order_no,\n        date: date\n      });\n\n      return NextResponse.json(\"Booking successful\", {\n        status: 200,\n        statusText: \"Booking Successful\",\n      });\n\n    default:\n      console.log(`Unhandled event type ${event.type}`);\n  }\n\n    return NextResponse.json({ message: \"Event Received\" }, { status: 200 });\n  }\n```\n\n----------------------------------------\n\nTITLE: Importing Stripe Package in Directus Hook\nDESCRIPTION: Code snippet to import the Stripe SDK in the Directus hook extension.\nSOURCE: https://github.com/directus/docs/blob/main/content/tutorials/5.extensions/create-new-customers-in-stripe-in-a-custom-hook.md#2025-04-09_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport Stripe from 'stripe';\n```\n\n----------------------------------------\n\nTITLE: Global Polyfilling using globalThis\nDESCRIPTION: Demonstrates how to polyfill global APIs using the globalThis object for Directus SDK compatibility.\nSOURCE: https://github.com/directus/docs/blob/main/content/guides/4.connect/6.sdk.md#2025-04-09_snippet_12\n\nLANGUAGE: javascript\nCODE:\n```\nimport { createDirectus } from '@directus/sdk';\nimport { ofetch } from 'ofetch';\nimport WebSocket from 'ws';\n\nglobalThis.WebSocket = WebSocket;\nglobalThis.fetch = ofetch;\n\nimport 'react-native-url-polyfill/auto';\n\nconst directus = createDirectus('http://directus.example.com');\n```\n\n----------------------------------------\n\nTITLE: Relational Some Operator Filter\nDESCRIPTION: Example of using the _some operator to filter items where at least one related category matches the condition.\nSOURCE: https://github.com/directus/docs/blob/main/content/guides/4.connect/2.filter-rules.md#2025-04-09_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"categories\": {\n    \"_some\": {\n      \"name\": {\n        \"_eq\": \"Recipe\"\n      }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Displaying Post Details with Edit and Delete Options in SwiftUI\nDESCRIPTION: A SwiftUI view for displaying detailed information about a post from Directus. It provides options to edit the post via a sheet presentation and to delete the post. The view requires an access token for authenticated API operations.\nSOURCE: https://github.com/directus/docs/blob/main/content/tutorials/1.getting-started/implement-directus-auth-with-ios.md#2025-04-09_snippet_6\n\nLANGUAGE: swift\nCODE:\n```\nimport SwiftUI\n\nstruct PostDetailView: View {\n    var post: Post\n    var accessToken: String?\n    @State private var showAlert = false\n    @State private var isEditMode = false\n\n    var body: some View {\n        VStack {\n            Text(post.title)\n                .font(.title)\n                .padding()\n            Text(post.content)\n                .padding()\n\n            Button(\"Edit\") {\n                isEditMode = true\n            }\n            .sheet(isPresented: $isEditMode) {\n                EditPostView(post: post, isEditMode: $isEditMode, accessToken: accessToken)\n            }\n\n            DeletePostView(postId: post.id, accessToken: accessToken, showAlert: $showAlert)\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Directus SDK Plugin for Nuxt\nDESCRIPTION: Plugin setup to expose Directus SDK globally in the Nuxt application\nSOURCE: https://github.com/directus/docs/blob/main/content/tutorials/1.getting-started/fetch-data-from-directus-with-nuxt.md#2025-04-09_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport { createDirectus, rest, readItem, readItems } from '@directus/sdk';\n\nconst directus = createDirectus('https://directus.example.com').with(rest());\n\nexport default defineNuxtPlugin(() => {\n\treturn {\n\t\tprovide: { directus, readItem, readItems },\n\t};\n});\n```\n\n----------------------------------------\n\nTITLE: Accessing Non-Public Post Preview URL in Nuxt\nDESCRIPTION: This URL format is used to view non-public posts in the Nuxt application. It includes the post ID and the Directus auth token for authentication.\nSOURCE: https://github.com/directus/docs/blob/main/content/tutorials/1.getting-started/implementing-live-preview-in-nuxt.md#2025-04-09_snippet_14\n\nLANGUAGE: markdown\nCODE:\n```\nhttp://your-website-url/posts/<ID>?preview=true&auth_token=<replace with your Directus token>\n```\n\n----------------------------------------\n\nTITLE: Configuring Next.js Project Settings\nDESCRIPTION: Configuration options to select during Next.js project setup, including enabling TypeScript, ESLint, App Router, and custom import alias setup.\nSOURCE: https://github.com/directus/docs/blob/main/content/tutorials/2.projects/build-an-hotel-booking-platform-with-next-js-stripe-and-directus-automate.md#2025-04-09_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\n✔ Would you like to use TypeScript?  Yes\n✔ Would you like to use ESLint?  Yes\n✔ Would you like to use Tailwind CSS? No\n✔ Would you like to use `src/` directory?  No\n✔ Would you like to use App Router? (recommended)  Yes\n✔ Would you like to customize the default import alias (@/*)? Yes\n✔ What import alias would you like configured? @/*\n```\n\n----------------------------------------\n\nTITLE: Formatting Live Preview URL in Directus\nDESCRIPTION: Demonstrates the format for specifying a Preview URL in Directus settings. The URL should include a placeholder for a dynamic field that identifies the object in your application.\nSOURCE: https://github.com/directus/docs/blob/main/content/guides/2.content/5.live-preview.md#2025-04-09_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\nhttp://your-website-url/<field>\n```\n\n----------------------------------------\n\nTITLE: Creating Stripe Customer and Handling Response\nDESCRIPTION: API call to create a new customer in Stripe using customer data from Directus, with promise handlers for success and error cases.\nSOURCE: https://github.com/directus/docs/blob/main/content/tutorials/5.extensions/create-new-customers-in-stripe-in-a-custom-hook.md#2025-04-09_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\nstripe.customers\n  .create({\n    name: `${payload.first_name} ${payload.last_name}`,\n    email: payload.email_address,\n  })\n  .then((customer) => {})\n  .catch((error) => {});\n```\n\n----------------------------------------\n\nTITLE: Configuring Field Preset for Automatic Author Assignment in Directus\nDESCRIPTION: Sets up a field preset in Directus to automatically assign the current user as the author when creating a post.\nSOURCE: https://github.com/directus/docs/blob/main/content/tutorials/1.getting-started/using-authentication-in-astro.md#2025-04-09_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n{\n    \"author\": \"$CURRENT_USER\"\n}\n```\n\n----------------------------------------\n\nTITLE: GraphQL File Upload Limitation Notice\nDESCRIPTION: Note indicating that file uploads are not supported by Directus GraphQL API.\nSOURCE: https://github.com/directus/docs/blob/main/content/guides/5.files/1.upload.md#2025-04-09_snippet_1\n\nLANGUAGE: graphql\nCODE:\n```\n# Not supported by GraphQL\n```\n\n----------------------------------------\n\nTITLE: Implementing AI Text Generation with Anthropic and Vercel AI SDK in TypeScript\nDESCRIPTION: This TypeScript code demonstrates how to use the Vercel AI SDK with Anthropic's Claude 3.5 Sonnet model to generate structured responses. It defines a schema for the AI payload using Zod, creates an Anthropic client, and generates a response that follows the defined structure.\nSOURCE: https://github.com/directus/docs/blob/main/content/tutorials/2.projects/how-i-built-an-ai-open-source-santa-roast-app-with-directus-and-nuxt.md#2025-04-09_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { z } from 'zod';\nimport { generateObject } from 'ai';\nimport { createAnthropic } from '@ai-sdk/anthropic';\n\n// Schema for the AI Payload to return proper JSON\nexport const aiPayloadSchema = z.object({\n    letter: z.string().min(1), // The letter in Markdown format\n    list: z.enum(['naughty', 'nice']), // The list the user belongs to\n    flagged: z.boolean().optional(), // Was the letter flagged as inappropriate?\n    flagged_reason: z.string().optional(), // Reason for why it was flagged\n});\n\n// Create the Anthropic client\nconst anthropic = createAnthropic({\n    apiKey: config.anthropicApiKey as string,\n});\n\n// Generate the letter\nconst aiResponse = await generateObject({\n    model: anthropic('claude-3-5-sonnet-20240620'),\n    schema: aiPayloadSchema,\n    maxTokens: 8192,\n    messages: [{ role: 'user', content: prompt }],\n});\n```\n\n----------------------------------------\n\nTITLE: Logging In to Directus\nDESCRIPTION: This code shows how to log in to Directus using three different methods: a curl command, a GraphQL mutation, and the Directus SDK. Authentication returns an access token and refresh token.\nSOURCE: https://github.com/directus/docs/blob/main/content/getting-started/5.authenticate-user.md#2025-04-09_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ncurl \\\n\t--request POST \\\n\t--header 'Content-Type: application/json' \\\n\t--data '{ \"email\": \"hello@example.com\", \"password\": \"d1r3ctu5\" }' \\\n\t--url 'https://directus.example.com/auth/login'\n```\n\nLANGUAGE: graphql\nCODE:\n```\nmutation {\n\tauth_login(email: \"hello@example.com\", password: \"d1r3ctu5\") {\n\t\taccess_token\n\t\trefresh_token\n\t}\n}\n```\n\nLANGUAGE: javascript\nCODE:\n```\nimport { createDirectus, authentication } from '@directus/sdk';\n\nconst email = \"hello@example.com\";\nconst password = \"d1r3ctu5\";\n\nconst client = createDirectus('http://directus.example.com').with(authentication());\n\nconst token = await client.login(email, password);\n```\n\n----------------------------------------\n\nTITLE: Configuring Log Scope for Directus Sandboxed API Extensions\nDESCRIPTION: This JSON snippet shows how to request the 'log' scope in the package.json file for a Directus sandboxed API extension. The 'log' scope is required to use the log function and has no additional configuration options.\nSOURCE: https://github.com/directus/docs/blob/main/content/guides/9.extensions/2.api-extensions/5.sandbox.md#2025-04-09_snippet_3\n\nLANGUAGE: json\nCODE:\n```\n\"requestedScopes\": {\n  \"log\": {}\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Logout Component Skeleton\nDESCRIPTION: React component for the Logout button with a placeholder for the logout logic that will be implemented later.\nSOURCE: https://github.com/directus/docs/blob/main/content/tutorials/1.getting-started/using-authentication-in-react.md#2025-04-09_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\n// src/components/Logout.jsx\n\nimport { useNavigate } from 'react-router-dom';\n\nexport const LogOut = () => {\n\n    const onLogoutClick = async () => {\n        // You will implement logout logic later here\n    }\n\n    return <>\n        <button onClick={onLogoutClick}>Logout</button>\n    </>\n\n};\n```\n\n----------------------------------------\n\nTITLE: Implementing SvelteKit Page Load Function\nDESCRIPTION: Server-side load function for handling preview mode, authentication, and data fetching in SvelteKit routes.\nSOURCE: https://github.com/directus/docs/blob/main/content/tutorials/1.getting-started/implementing-live-preview-in-sveltekit.md#2025-04-09_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nimport { error } from \"@sveltejs/kit\";\nimport { client } from \"$lib/directus\";\nimport { readItem } from \"@directus/sdk\";\n\nexport async function load({ params, url }) {\n  const preview = url.searchParams.get(\"preview\") === \"true\";\n  const version = url.searchParams.get(\"version\");\n  const token = url.searchParams.get(\"auth_token\");\n\n  console.log(\"load function called\");\n  console.log(\"Params:\", params);\n  console.log(\"Preview Mode:\", preview);\n  console.log(\"Version:\", version);\n\n  try {\n    if (preview) {\n      // Replace <your token> with your authentication token\n      if (token && token !== \"<your token>\") {\n        console.error(\"Invalid auth token\");\n        throw error(401, \"Invalid auth token\");\n      }\n      console.log(\"Token validation successful\");\n    } else {\n      console.log(\"Skipping token validation (not in preview mode)\");\n    }\n\n    const queryFilters = {\n      fields: [\"title\", \"content\", \"slug\", \"published\"],\n      ...(version && { version }),\n    };\n\n    const headers = token\n      ? { headers: { Authorization: `Bearer ${token}` } }\n      : {};\n\n    const post = await client.request(\n      readItem(\"posts\", params.id, {\n        ...queryFilters,\n        ...headers,\n      })\n    );\n\n    console.log(\"Post Data:\", post);\n\n    if (!post) {\n      console.error(\"Post not found\");\n      throw error(404, \"Post Not Found\");\n    }\n\n    return {\n      post,\n      preview,\n      version,\n    };\n  } catch (err) {\n    console.error(\"Error in load function:\", err.message || err);\n    if (err.response) {\n      console.error(\"Directus Error Response:\", err.response);\n      console.error(\"Directus Error Data:\", err.response.data);\n    }\n    throw error(500, err.message || \"Internal Server Error\");\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: CSS Styles for Vonage Activity Panel\nDESCRIPTION: This CSS snippet provides styles for the Vonage activity panel, including table layout, text formatting, and loading indicator positioning.\nSOURCE: https://github.com/directus/docs/blob/main/content/tutorials/5.extensions/display-external-api-data-from-vonage-in-custom-panels.md#2025-04-09_snippet_11\n\nLANGUAGE: vue\nCODE:\n```\n<style scoped>\n.messages-table { padding: 12px; height: 100%; overflow: scroll; }\n.messages-table table { width: 100%; min-width: 600px; }\n.messages-table table tr td,\n.messages-table table tr th { vertical-align: top; border-top: var(--theme--border-width) solid var(--border-subdued); padding: 10px; }\n.ucwords { text-transform: capitalize; }\n.nowrap { white-space: nowrap; }\n.message { min-width: 260px; }\n.messages-table table tr th { font-weight: bold; text-align: left; font-size: 0.8em; text-transform: uppercase; line-height: 1; padding: 8px 10px; }\n.text.has-header { padding: 0 12px; }\n.is-loading { position: absolute; left: calc(50% - 14px); top: calc(50% - 28px); }\n</style>\n```\n\n----------------------------------------\n\nTITLE: Implementing Home Page with All Products in Next.js\nDESCRIPTION: Updates the home page to display all products from the store using the getAllProducts function and the ProductList component.\nSOURCE: https://github.com/directus/docs/blob/main/content/tutorials/2.projects/build-an-ecommerce-platform-with-next-js-stripe-and-directus-automate.md#2025-04-09_snippet_12\n\nLANGUAGE: tsx\nCODE:\n```\nimport ProductList from \"@/components/product-list\";\nimport { getAllProducts } from \"@/lib/apis\";\n\nexport default async function Home() {\n  const products =  await getAllProducts() || [];\n  return (\n    <section>\n      <h1>Hello and Welcome to Directus + Next.js E-commerce</h1>\n      <p>Find amazing items for your purchase</p>\n        <ProductList products={products} />\n      </section>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Handshake Mode Authentication with Refresh Token\nDESCRIPTION: JSON payload for authenticating with a refresh token in handshake mode.\nSOURCE: https://github.com/directus/docs/blob/main/content/guides/7.realtime/1.authentication.md#2025-04-09_snippet_3\n\nLANGUAGE: json\nCODE:\n```\n{\n\t\"type\": \"auth\",\n\t\"refresh_token\": \"token\"\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Vonage API Request Body\nDESCRIPTION: JSON payload for the Vonage Number Insight API request, including phone number and requested insights\nSOURCE: https://github.com/directus/docs/blob/main/content/tutorials/7.workflows/detect-high-risk-phone-numbers-with-vonage-and-directus-automate.md#2025-04-09_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n   \"type\": \"phone\",\n   \"phone\": \"{{$trigger.payload.phone_number}}\",\n   \"insights\": [\"fraud_score\"]\n}\n```\n\n----------------------------------------\n\nTITLE: Setting up Express Error Handler for Sentry in Directus\nDESCRIPTION: Adding the Sentry Express error handler to the Directus API routes. This code registers the handler after all custom routes to capture and track backend errors in Sentry.\nSOURCE: https://github.com/directus/docs/blob/main/content/tutorials/5.extensions/monitor-and-error-track-with-sentry-in-custom-hooks.md#2025-04-09_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nimport { createRequire } from \"module\";\nconst require = createRequire(import.meta.url);\nconst Sentry = require('@sentry/node');\n\nexport default ({ init }, { env }) => {\n\tSentry.init({\n \t\tdsn: env.SENTRY_DSN,\n\t\ttracesSampleRate: 1.0\n\t});\n\n\tinit('routes.custom.after', ({ app }) => {\n\t\tSentry.setupExpressErrorHandler(app);\n\t\tconsole.log('-- Sentry Error Handler Added --');\n\t});\n};\n```\n\n----------------------------------------\n\nTITLE: Implementing Token-Based Preview Access in React\nDESCRIPTION: Function to fetch article content with support for preview tokens, allowing access to non-public posts when a valid token is provided via URL parameters.\nSOURCE: https://github.com/directus/docs/blob/main/content/tutorials/1.getting-started/implementing-live-preview-in-react.md#2025-04-09_snippet_13\n\nLANGUAGE: jsx\nCODE:\n```\nconst fetchArticle = async () => {\n  const token = query.get(\"token\");\n  const isPreview = query.get(\"preview\");\n  let result\n  \n  \n  const getPost = (id) => readItem('posts', id)\n\n  try {\n    if (isPreview && token)\n      result = await client.request(withToken(token, getPost(id)));\n    else\n      result = await client.request(getPost(id));\n  } catch (error) {\n    console.log('Error fetching article:', error);\n    result = {\n      title: \"Post not found\",\n      content: \"We couldn't find this post\"\n    }\n  }\n  setArticle(result);\n};\n```\n\n----------------------------------------\n\nTITLE: Adding URL Query Parameter Parsing for Preview Mode\nDESCRIPTION: Function to extract query parameters from the URL, used for detecting preview mode requests from Directus.\nSOURCE: https://github.com/directus/docs/blob/main/content/tutorials/1.getting-started/implementing-live-preview-in-react.md#2025-04-09_snippet_10\n\nLANGUAGE: jsx\nCODE:\n```\n// Add useLocation to the imports at the top\nimport { useParams, useLocation } from 'react-router-dom';\n\n// Add the following function\nfunction useQuery() {\n  const { search } = useLocation();\n\n  return React.useMemo(() => new URLSearchParams(search), [search]);\n}\n```\n\n----------------------------------------\n\nTITLE: WebSocket Connection Handler for Directus Authentication and Subscription\nDESCRIPTION: This code sets up event listeners for WebSocket messages, handling authentication success and errors. When successfully authenticated, it initiates the message subscription and processes incoming messages.\nSOURCE: https://github.com/directus/docs/blob/main/content/tutorials/2.projects/build-a-realtime-chat-app-with-directus-and-next.md#2025-04-09_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\n  directus.onWebSocket('message', (message) => {\n      try {\n        console.log('Received WebSocket message:', message);\n        if (message.type === 'auth' && message.status === 'ok') {\n          setRefreshToken(message.refresh_token);\n          // Add the subscription call here\n          subscribeToMessages();\n        }\n        // Process received messages\n        receiveMessage(message);\n      } catch (err) {\n        console.error('Error parsing WebSocket message:', err);\n      }\n    });\n    directus.onWebSocket('error', (err) => {\n      console.error('WebSocket error:', err);\n    });\n```\n\n----------------------------------------\n\nTITLE: Vonage Records API Endpoint for Directus\nDESCRIPTION: This Node.js code defines a custom API endpoint for Directus to fetch Vonage records. It includes authentication, error handling, and proxying requests to the Vonage API.\nSOURCE: https://github.com/directus/docs/blob/main/content/tutorials/5.extensions/display-external-api-data-from-vonage-in-custom-panels.md#2025-04-09_snippet_12\n\nLANGUAGE: javascript\nCODE:\n```\nimport { createError } from '@directus/errors';\n\nconst ForbiddenError = createError('VONAGE_FORBIDDEN', 'You need to be authenticated to access this endpoint');\n\nexport default {\n  id: 'vonage',\n  handler: (router, { env }) => {\n    const { VONAGE_API_KEY, VONAGE_API_SECRET } = env;\n    const baseURL = 'https://api.nexmo.com';\n    const token = Buffer.from(`${VONAGE_API_KEY}:${VONAGE_API_SECRET}`).toString('base64');\n    const headers = { Authorization: `Basic ${token}` };\n\n    router.get('/records', async (req, res) => {\n      if (req.accountability == null) throw new ForbiddenError();\n\n      try {\n        const url = baseURL + `/v2/reports/records?account_id=${VONAGE_API_KEY}&${req._parsedUrl.query}`;\n        const response = await fetch(url, { headers });\n\n        if (response.ok) {\n          res.json(await response.json());\n        } else {\n          res.status(response.status).send(response.statusText);\n        }\n      } catch (error) {\n        res.status(500).send(response.statusText);\n      }\n    });\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: Applying Custom Classes to Visual Editing Elements\nDESCRIPTION: JavaScript and CSS examples showing how to apply a custom class to all or a subset of elements using the 'apply' method and then defining custom styles for those classes.\nSOURCE: https://github.com/directus/docs/blob/main/content/guides/2.content/8.visual-editor/3.customization.md#2025-04-09_snippet_2\n\nLANGUAGE: js\nCODE:\n```\napply({ directusUrl, customClass: 'my-class' })\n```\n\nLANGUAGE: css\nCODE:\n```\n.my-class {\n\t--directus-visual-editing--overlay--z-index: 40;\n\t--directus-visual-editing--rect--border-spacing: 14px;\n\t--directus-visual-editing--rect--border-width: 4px;\n\t--directus-visual-editing--rect--border-color: red;\n\t--directus-visual-editing--rect--border-radius: 10px;\n\t--directus-visual-editing--rect-visible--opacity: 0.5;\n\t--directus-visual-editing--edit-btn--width: 20px;\n\t--directus-visual-editing--edit-btn--height: 15px;\n\t--directus-visual-editing--edit-btn--radius: 2px;\n\t--directus-visual-editing--edit-btn--bg-color: lightgreen;\n\t--directus-visual-editing--edit-btn--icon-bg-image: url('data:image/svg+xml,<svg>…</svg>');\n\t--directus-visual-editing--edit-btn--icon-bg-size: contain;\n}\n```\n\n----------------------------------------\n\nTITLE: Displaying Markdown Table for Map Layout Options\nDESCRIPTION: This markdown table lists and describes the layout options available for the Map layout in Directus, including basemap, geospatial field, display template, and clustering settings.\nSOURCE: https://github.com/directus/docs/blob/main/content/guides/2.content/3.layouts.md#2025-04-09_snippet_10\n\nLANGUAGE: markdown\nCODE:\n```\n| Control | Description |\n|---|---|\n| **Basemap** | Choose the map provider used for the collection. |\n| **Geospatial Field** | Select the geospatial field type to display on screen: <ul><li>Map JSON Point: Supports latitude-longitude based, single-point locations.</li><li>Map Geometry: Supports geometric areas such as lines and polygons.</li></ul> |\n| **Display Template** | Choose the fields displayed when hovering over an item on the map. |\n| **Cluster Nearby Data** | Toggle whether or not nearby items get clustered into a single pin.  |\n```\n\n----------------------------------------\n\nTITLE: Implementing Init Hook in Directus\nDESCRIPTION: Demonstrates how to use the init hook to register a callback function for a specific event in the Directus application lifecycle. The example logs metadata when the 'routes.before' event occurs.\nSOURCE: https://github.com/directus/docs/blob/main/content/guides/9.extensions/2.api-extensions/1.hooks.md#2025-04-09_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nexport default ({ init }) => {\n\tinit('routes.before', (meta) => {\n\t\tconsole.log(meta);\n\t});\n};\n```\n\n----------------------------------------\n\nTITLE: Configuring Deepgram API Request Body\nDESCRIPTION: JSON payload for the Webhook/Request URL operation that sends the audio file URL to Deepgram's API. The URL includes the file key from the trigger and an access token for authentication.\nSOURCE: https://github.com/directus/docs/blob/main/content/tutorials/7.workflows/generate-transcripts-with-deepgram-and-directus-automate.md#2025-04-09_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"url\":\"YOUR_DIRECTUS_URL/assets/{{$trigger.key}}?access_token=TOKEN\"\n}\n```\n\n----------------------------------------\n\nTITLE: Installing React Router DOM\nDESCRIPTION: Command to install React Router DOM for handling routing in the React application.\nSOURCE: https://github.com/directus/docs/blob/main/content/tutorials/1.getting-started/implementing-live-preview-in-react.md#2025-04-09_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\nnpm install react-router-dom\n```\n\n----------------------------------------\n\nTITLE: Using Request Function in Directus Sandboxed API Extensions\nDESCRIPTION: This JavaScript code demonstrates how to use the 'request' function from the Directus API in a sandboxed environment. It shows examples of making GET and POST requests, and explains the structure of the response object.\nSOURCE: https://github.com/directus/docs/blob/main/content/guides/9.extensions/2.api-extensions/5.sandbox.md#2025-04-09_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\nimport { request } from 'directus:api';\n\nconst getRequest = await request('https://directus.io');\n\nconst postRequest = await request('https://directus.io', {\n  method: 'POST',\n  headers: { Authorization: 'Bearer 1234567890' },\n  body: { key: 'value' }\n});\n```\n\n----------------------------------------\n\nTITLE: HTML Vimeo Embed\nDESCRIPTION: HTML snippet for embedding a Vimeo video player demonstrating the Directus Visual Editor. Includes responsive container and iframe with necessary attributes.\nSOURCE: https://github.com/directus/docs/blob/main/content/guides/2.content/8.visual-editor/0.index.md#2025-04-09_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<div style=\"padding:56.33% 0 0 0;position:relative;\"><iframe src=\"https://player.vimeo.com/video/1068823628?badge=0&amp;autopause=0&amp;player_id=0&amp;app_id=58479\" frameborder=\"0\" allow=\"autoplay; fullscreen; picture-in-picture; clipboard-write; encrypted-media\" style=\"position:absolute;top:0;left:0;width:100%;height:100%;\" title=\"Directus-Visual-Editor-Preview\"></iframe></div><script src=\"https://player.vimeo.com/api/player.js\"></script>\n```\n\n----------------------------------------\n\nTITLE: Configuring Live Preview URL with Version in Directus\nDESCRIPTION: This snippet shows how to append a version parameter to the existing preview URL in Directus settings. This allows for previewing specific versions of content when content versioning is enabled.\nSOURCE: https://github.com/directus/docs/blob/main/content/tutorials/1.getting-started/implementing-live-preview-in-nuxt.md#2025-04-09_snippet_15\n\nLANGUAGE: markdown\nCODE:\n```\n&version=<VERSION>\n```\n\n----------------------------------------\n\nTITLE: Defining Display Extension Options\nDESCRIPTION: Configuration object for display options, including a boolean toggle for showing months\nSOURCE: https://github.com/directus/docs/blob/main/content/tutorials/5.extensions/format-dates-in-a-custom-display-extension.md#2025-04-09_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\noptions: [\n  {\n    field: 'show_months',\n    type: 'boolean',\n    name: 'Show months as well',\n    meta: {\n      interface: 'boolean',\n      options: {\n        label: 'Yes',\n      },\n      width: 'half',\n    },\n  },\n],\n```\n\n----------------------------------------\n\nTITLE: Django Homepage View\nDESCRIPTION: View function to render the homepage with global settings from Directus.\nSOURCE: https://github.com/directus/docs/blob/main/content/tutorials/1.getting-started/fetch-data-from-directus-with-django.md#2025-04-09_snippet_5\n\nLANGUAGE: python\nCODE:\n```\nfrom django.shortcuts import render\nfrom .directus_integration import get_global_settings\n\ndef home_page(request):\n    global_settings = get_global_settings()\n    context = {\n        'title': global_settings['data']['title'],\n        'description': global_settings['data']['description']\n    }\n    return render(request, 'home.html', context)\n```\n\n----------------------------------------\n\nTITLE: Initializing CollectionsService in Directus API Extension\nDESCRIPTION: This snippet shows how to initialize the CollectionsService within a Directus API extension route handler. It demonstrates the required parameters and basic setup.\nSOURCE: https://github.com/directus/docs/blob/main/content/guides/9.extensions/2.api-extensions/4.services.md#2025-04-09_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nexport default (router, context) => {\n\tconst { services, getSchema } = context;\n\tconst { CollectionsService } = services;\n\n\trouter.get('/', async (req, res) => {\n\t\tconst collectionsService = new CollectionsService({\n\t\t\tschema: await getSchema(),\n\t\t\taccountability: req.accountability\n\t\t});\n\n\t\t// Your route handler logic\n\t});\n};\n```\n\n----------------------------------------\n\nTITLE: Displaying Markdown Table for Card Layout Options\nDESCRIPTION: This markdown table lists and describes the layout options available for the Card layout in Directus, including image source, title, subtitle, image fit, and fallback icon settings.\nSOURCE: https://github.com/directus/docs/blob/main/content/guides/2.content/3.layouts.md#2025-04-09_snippet_4\n\nLANGUAGE: markdown\nCODE:\n```\n| Control | Description |\n|---|---|\n| **Image Source** | Set the field used as the display image. |\n| **Title** | Sets a display template to use as a title. |\n| **Subtitle** | Sets a display template to use as a subtitle. |\n| **Image Fit** | Set how an image fits inside the card. |\n| **Fallback Icon** | Set a default icon to display when an item has no image. |\n```\n\n----------------------------------------\n\nTITLE: Checking User Authentication in Astro Dashboard Page\nDESCRIPTION: This Astro component checks if a user is authenticated by verifying their session token. If no token exists, it redirects to the login page. Otherwise, it retrieves the user's details using the Directus SDK's readMe function and displays the user ID.\nSOURCE: https://github.com/directus/docs/blob/main/content/tutorials/1.getting-started/using-authentication-in-astro.md#2025-04-09_snippet_9\n\nLANGUAGE: astro\nCODE:\n```\n---\nimport client from '../../lib/directus';\nimport { rest, readMe, withToken, readItems, refresh } from '@directus/sdk';\nimport Layout from '../../layouts/Layout.astro';\n\nconst token = Astro.cookies.get(\"directus_session_token\");\n\nif (!token) {\n  return Astro.redirect(\"/login\");\n}\nconst response = await client.request(readMe())\n\nconst userId = response.id\n\n---\n{\n  userId ? (\n    <Layout>\n      <h1>Dashboard</h1>\n      <p>User ID: {userId}</p>\n    </Layout>\n  ): Astro.redirect(\"/login\")\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Card Group Component for Next.js\nDESCRIPTION: React component for rendering a card group section with posts or custom cards, including images and content from Directus data.\nSOURCE: https://github.com/directus/docs/blob/main/content/tutorials/1.getting-started/rendering-dynamic-blocks-using-next.md#2025-04-09_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\nimport Image from \"next/image\";\n\nexport default function CardGroup({ id, headline, content, group_type, posts, cards }) {\n    return (\n        <div className=\"card-group\">\n            <h2>{headline}</h2>\n            <div dangerouslySetInnerHTML={{ __html: content }} />\n\n            {(group_type === 'posts' && (\n                <div className=\"card-group__posts\" style={{ display: 'flex' }}>\n                    {posts?.map((post, index) => (\n                        <div key={index} style={{ margin: \"8px\"}}>\n                        <Image src={`http://localhost:8055/assets/${post.posts_id.image}`} alt=\"\" width={128} height={72} />\n                            <p>{post.posts_id.content}</p>\n                        </div>\n                    ))}\n                </div>\n            ))}\n            {(group_type === 'custom' && <div className=\"card-group__cards\">\n                {cards?.map((card, index) => (\n                    <div key={index}>\n                        <Image src={`http://localhost:8055/assets/${card.cards_id.image}`} alt=\"\" width={70} height={35} />\n                        <p>{card.cards_id.content}</p>\n                    </div>\n                ))}\n            </div>)}\n        </div>\n    );\n}\n```\n\n----------------------------------------\n\nTITLE: Complex Image URL Construction in JavaScript\nDESCRIPTION: Original complex code for generating image URLs with multiple conditionals and fallback paths.\nSOURCE: https://github.com/directus/docs/blob/main/content/tutorials/4.migration/migrate-from-nuxt-content-to-directus.md#2025-04-09_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nconst image = meta.image ? meta.absolute ? meta.image : `${config.baseURL}${meta.imageDir || meta.path}/${meta.image}` : `${config.baseURL}${config.image}`\n```\n\n----------------------------------------\n\nTITLE: Vue Template with Navigation\nDESCRIPTION: Final Vue template implementation with breadcrumb navigation and routing.\nSOURCE: https://github.com/directus/docs/blob/main/content/tutorials/5.extensions/implement-navigation-in-multipage-custom-modules.md#2025-04-09_snippet_7\n\nLANGUAGE: html\nCODE:\n```\n<private-view :title=\"page_title\">\n  <template v-if=\"breadcrumb\" #headline>\n    <v-breadcrumb :items=\"breadcrumb\" />\n  </template>\n  <router-view name=\"landing-page\" :page=\"page\" />\n</private-view>\n```\n\n----------------------------------------\n\nTITLE: User Authentication Check Implementation\nDESCRIPTION: Function to verify user authentication status and retrieve current user ID using Directus SDK.\nSOURCE: https://github.com/directus/docs/blob/main/content/tutorials/1.getting-started/using-authentication-in-react.md#2025-04-09_snippet_16\n\nLANGUAGE: javascript\nCODE:\n```\n// src/lib/directus.js\n\nimport { withToken, readMe } from '@directus/sdk';\n\nexport const getCurrentUserId = async () => {\n    const accessToken = (JSON.parse(localStorage.getItem('directus_auth')) || {}).access_token;\n\n    let result\n\n    if (accessToken)\n        result = await client.request(withToken(accessToken, readMe()));\n\n    return result?.id\n}\n```\n\n----------------------------------------\n\nTITLE: User Authentication Check Implementation\nDESCRIPTION: Function to verify user authentication status and retrieve current user ID using Directus SDK.\nSOURCE: https://github.com/directus/docs/blob/main/content/tutorials/1.getting-started/using-authentication-in-react.md#2025-04-09_snippet_16\n\nLANGUAGE: javascript\nCODE:\n```\n// src/lib/directus.js\n\nimport { withToken, readMe } from '@directus/sdk';\n\nexport const getCurrentUserId = async () => {\n    const accessToken = (JSON.parse(localStorage.getItem('directus_auth')) || {}).access_token;\n\n    let result\n\n    if (accessToken)\n        result = await client.request(withToken(accessToken, readMe()));\n\n    return result?.id\n}\n```\n\n----------------------------------------\n\nTITLE: Displaying Markdown Table for Card Layout Subheader Controls\nDESCRIPTION: This markdown table describes the subheader controls for the Card layout in Directus, including card size, ordering, and item selection.\nSOURCE: https://github.com/directus/docs/blob/main/content/guides/2.content/3.layouts.md#2025-04-09_snippet_5\n\nLANGUAGE: markdown\nCODE:\n```\n| Control | Description |\n|---|---|\n| **Card Size** | Toggle the card size as it appears in the page area. |\n| **Order Field** | Click to select the field you wish to order by from the dropdown menu. |\n| **Order Direction** | Toggle ascending and descending order. |\n| **Select All** | Click  \":icon{name=\"material-symbols:check-circle\"}\" Select All\" in the selection column header. |\n```\n\n----------------------------------------\n\nTITLE: Configuring Sleep Scope for Directus Sandboxed API Extensions\nDESCRIPTION: This JSON snippet shows how to request the 'sleep' scope in the package.json file for a Directus sandboxed API extension. The 'sleep' scope is required to use the sleep function and has no additional configuration options.\nSOURCE: https://github.com/directus/docs/blob/main/content/guides/9.extensions/2.api-extensions/5.sandbox.md#2025-04-09_snippet_5\n\nLANGUAGE: json\nCODE:\n```\n\"requestedScopes\": {\n  \"sleep\": {}\n}\n```\n\n----------------------------------------\n\nTITLE: Displaying Markdown Table for Calendar Layout Options\nDESCRIPTION: This markdown table lists and describes the layout options available for the Calendar layout in Directus, including display template, date fields, and week start settings.\nSOURCE: https://github.com/directus/docs/blob/main/content/guides/2.content/3.layouts.md#2025-04-09_snippet_7\n\nLANGUAGE: markdown\nCODE:\n```\n| Control | Description |\n|---|---|\n| **Display Template** | Set a mix of field values and text to represent items on the calendar. |\n| **Start Date Field** | Choose field to determine each item's beginning time on the calendar. |\n| **End Date Field** | Choose field to determine each item's ending time on the calendar. |\n| **First Day of The Week** | Defines the beginning of the week on the calendar.  |\n```\n\n----------------------------------------\n\nTITLE: Initializing a New Directus Extension Using CLI\nDESCRIPTION: This bash command uses the Directus extension creator to initialize a new endpoint extension. It shows the interactive prompts for configuring extension type, name, language, and dependency installation.\nSOURCE: https://github.com/directus/docs/blob/main/content/guides/9.extensions/1.quickstart.md#2025-04-09_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nnpx create-directus-extension@latest\n? Choose the extension type: endpoint\n? Choose a name for the extension: my-first-endpoint\n? Choose the language to use: javascript\n? Auto install dependencies?: Yes\n```\n\n----------------------------------------\n\nTITLE: Implementing a Functional Component for Custom Display in JavaScript\nDESCRIPTION: This snippet shows how to create a functional component for a custom display in Directus. It defines a simple function that transforms the input value, suitable for small displays that don't require a full Vue component.\nSOURCE: https://github.com/directus/docs/blob/main/content/guides/9.extensions/3.app-extensions/2.displays.md#2025-04-09_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nimport { defineInterface } from '@directus/extensions-sdk'\n\nexport default defineInterface({\n\tid: 'custom',\n\tname: 'Custom',\n\ticon: 'box',\n\tdescription: 'This is my custom display!',\n\tcomponent: function ({ value }) {\n\t\treturn value.toLowerCase();\n\t},\n\toptions: null,\n\ttypes: ['string'],\n});\n```\n\n----------------------------------------\n\nTITLE: Creating Symbolic Link for Nginx Configuration\nDESCRIPTION: This command creates a symbolic link to enable the Nginx site configuration for Directus.\nSOURCE: https://github.com/directus/docs/blob/main/content/tutorials/6.self-hosting/deploy-directus-to-an-ubuntu-server.md#2025-04-09_snippet_16\n\nLANGUAGE: bash\nCODE:\n```\nsudo ln -s /etc/nginx/sites-available/directus /etc/nginx/sites-enabled\n```\n\n----------------------------------------\n\nTITLE: Fetching Multilingual News Data with Directus SDK in SvelteKit\nDESCRIPTION: This code snippet demonstrates how to use the Directus SDK to fetch multilingual news data in a SvelteKit page load function. It includes filtering for a specific language and error handling for when a post is not found.\nSOURCE: https://github.com/directus/docs/blob/main/content/tutorials/1.getting-started/implement-multilingual-content-with-directus-and-svelte-kit.md#2025-04-09_snippet_8\n\nLANGUAGE: javascript\nCODE:\n```\nimport { readItem } from \"@directus/sdk\";\nimport getDirectusInstance from \"$lib/directus\";\nimport { error } from \"@sveltejs/kit\";\n\n/** @type {import('./$types').PageLoad} */\nexport async function load({ fetch, params, url }) {\n  const directus = getDirectusInstance(fetch);\n\n  const slug = params.slug;\n  const languageCode = url.searchParams.get(\"lang\") || \"en-US\";\n  try {\n    const [newsData, languagesData] = await Promise.all([\n      directus.request(\n        readItem(\"news\", slug, {\n          deep: {\n            translations: {\n              _filter: {\n                _and: [\n                  { languages_code: { _eq: languageCode } },\n                ],\n              },\n            },\n          },\n          fields: [\"*\", { \"*\": [\"*\"] }],\n        })\n      ),\n      directus.request(readItems(\"languages\")),\n    ]);\n\n    return {\n      article: newsData ? newsData : null,\n      languages: languagesData,\n      languageCode,\n    };\n  } catch (err) {\n    error(404, \"Post not found\");\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Navigation Data Structure\nDESCRIPTION: Implements a function to create navigation data structure with static page information including labels, URIs, and icons.\nSOURCE: https://github.com/directus/docs/blob/main/content/tutorials/5.extensions/implement-navigation-in-multipage-custom-modules.md#2025-04-09_snippet_9\n\nLANGUAGE: javascript\nCODE:\n```\nfunction fetch_all_pages(){\n  all_pages.value = [\n    {\n      label: 'Home',\n      uri: 'landing-page',\n      to: '/landing-page',\n      icon: 'home',\n      color: '',\n    },\n    {\n      label: 'Hello World',\n      uri: 'hello-world',\n      to: '/landing-page/hello-world',\n      icon: 'public',\n      color: '',\n    },\n    {\n      label: 'Contact Us',\n      uri: 'contact',\n      to: '/landing-page/contact',\n      icon: 'phone',\n      color: '',\n    },\n  ];\n};\n```\n\n----------------------------------------\n\nTITLE: Extended Video Service with Single Video Fetch and View Tracking\nDESCRIPTION: Additional service functions to fetch a single video by ID and increment its view count. These functions use the Directus SDK to read and update items in the videos collection.\nSOURCE: https://github.com/directus/docs/blob/main/content/tutorials/2.projects/build-a-video-streaming-app-with-sveltekit-and-directus.md#2025-04-09_snippet_8\n\nLANGUAGE: typescript\nCODE:\n```\n// your other imports\n\nimport { readItems, readItem, updateItem } from \"@directus/sdk\";\n\nexport async function getVideo(id: string): Promise<Video> {\n  const directus = getDirectusClient();\n  const response = await directus.request(\n    readItem(\"videos\", id, {\n      fields: [\n          \"*\",\n          { thumbnail: [\"*\"] },\n          { video_file: [\"*\"] }\n        ]\n    })\n  );\n  return response as Video;\n}\n\nexport async function incrementViews(id: string) {\n  const directus = getDirectusClient();\n  const video = await directus.request(readItem(\"videos\", id));\n  await directus.request(\n    updateItem(\"videos\", id, { views: parseInt(video.views || 0) + 1 })\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a Panel Component in Vue\nDESCRIPTION: Example of a Vue component that renders the panel content in the dashboard. This component receives configuration properties from the entrypoint file and additional dashboard-related props.\nSOURCE: https://github.com/directus/docs/blob/main/content/guides/9.extensions/3.app-extensions/4.panels.md#2025-04-09_snippet_1\n\nLANGUAGE: vue\nCODE:\n```\n<template>\n\t<div class=\"text\" :class=\"{ 'has-header': showHeader }\">\n\t\t{{ text }}\n\t</div>\n</template>\n\n<script setup>\ndefineProps(['showHeader', 'text']);\n</script>\n\n<style scoped>\n.text {\n\tpadding: 12px;\n}\n\n.text.has-header {\n\tpadding: 0 12px;\n}\n</style>\n```\n\n----------------------------------------\n\nTITLE: Displaying Markdown Table for Calendar Layout Subheader Controls\nDESCRIPTION: This markdown table describes the subheader controls for the Calendar layout in Directus, including navigation and view options.\nSOURCE: https://github.com/directus/docs/blob/main/content/guides/2.content/3.layouts.md#2025-04-09_snippet_8\n\nLANGUAGE: markdown\nCODE:\n```\n| Control | Description |\n|---|---|\n| **Toggle Month and Year** | Move across time using the chevrons in the subheader. |\n| **Today** | Click to jump to the current date on the calendar. |\n| **Month Week Day List** | Adjust the time interval used to display items in the page area. |\n```\n\n----------------------------------------\n\nTITLE: Setting Up Additional Panel Customization Options in JavaScript\nDESCRIPTION: Adds configuration options for message content, button label, batch sending, and contact display template in the panel extension.\nSOURCE: https://github.com/directus/docs/blob/main/content/tutorials/5.extensions/send-sms-messages-with-twilio-in-custom-panels.md#2025-04-09_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\n{\n\tfield: 'message',\n\ttype: 'text',\n\tname: 'Message',\n\tmeta: {\n\t\tinterface: 'input-multiline',\n\t\twidth: 'full',\n\t},\n},\n{\n\tfield: 'buttonLabel',\n\tname: 'Button Label',\n\ttype: 'string',\n\tmeta: {\n\t\tinterface: 'input',\n\t\twidth: 'half',\n\t},\n},\n{\n\tfield: 'batchSend',\n\tname: 'Send to All',\n\ttype: 'boolean',\n\tmeta: {\n\t\tinterface: 'boolean',\n\t\twidth: 'half',\n\t},\n\tschema: {\n\t\tdefault_value: false,\n\t},\n},\n{\n\tfield: 'displayTemplate',\n\tname: 'Name in list',\n\ttype: 'string',\n\tmeta: {\n\t\tinterface: 'system-display-template',\n\t\toptions: {\n\t\t\tcollectionField: 'collection',\n\t\t\tplaceholder: '{{ field }}',\n\t\t},\n\t\twidth: 'full',\n\t},\n}\n```\n\n----------------------------------------\n\nTITLE: Fetching Individual News Article with Translations\nDESCRIPTION: SvelteKit load function to fetch a single news article and available languages using Directus SDK.\nSOURCE: https://github.com/directus/docs/blob/main/content/tutorials/1.getting-started/implement-multilingual-content-with-directus-and-svelte-kit.md#2025-04-09_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nimport { readItem } from \"@directus/sdk\";\nimport getDirectusInstance from \"$lib/directus\";\nimport { error } from \"@sveltejs/kit\";\n\n/** @type {import('./$types').PageLoad} */\nexport async function load({ fetch, params, url }) {\n  const directus = getDirectusInstance(fetch);\n\n  const slug = params.slug;\n  try {\n    const [newsData, languagesData] = await Promise.all([\n      directus.request(\n        readItem(\"news\", slug, {\n          fields: [\"*\", { \"*\": [\"*\"] }],\n        })\n      ),\n      directus.request(readItems(\"languages\")),\n    ]);\n\n    return {\n      article: newsData ? newsData : null,\n      languages: languagesData,\n    };\n  } catch (err) {\n    error(404, \"Post not found\");\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Module Routes in JavaScript\nDESCRIPTION: This snippet defines the module configuration, including its ID, name, icon, and routes. It sets up two routes: one for the home page and another for dynamic pages.\nSOURCE: https://github.com/directus/docs/blob/main/content/tutorials/5.extensions/implement-navigation-in-multipage-custom-modules.md#2025-04-09_snippet_15\n\nLANGUAGE: javascript\nCODE:\n```\nimport ModuleComponent from './module.vue';\n\nexport default {\n  id: 'landing-page',\n  name: 'Landing Page',\n  icon: 'rocket_launch',\n  routes: [\n    {\n      name: 'home',\n      path: '',\n      props: true,\n      component: ModuleComponent,\n    },\n    {\n      name: 'page',\n      path: ':page',\n      props: true,\n      component: ModuleComponent,\n    },\n  ],\n};\n```\n\n----------------------------------------\n\nTITLE: Displaying Markdown Table for Table Layout Page Area Controls\nDESCRIPTION: This markdown table describes the page area controls for the Table layout in Directus, including item selection and manual sorting.\nSOURCE: https://github.com/directus/docs/blob/main/content/guides/2.content/3.layouts.md#2025-04-09_snippet_3\n\nLANGUAGE: markdown\nCODE:\n```\n| Control                     | Description                                                                                                                                              |\n| --------------------------- | -------------------------------------------------------------------------------------------------------------------------------------------------------- |\n| **Select Item(s)**      | Click :icon{name=\"material-symbols:check-box-outline\"} in the selection column for the desired Item(s).                                                  |\n| **Manually Sort Items** | Toggle :icon{name=\"material-symbols:check-box-outline\"} in the configured Sort column to drag and drop :icon{name=\"material-symbols:drag-handle\"} Items. |\n```\n\n----------------------------------------\n\nTITLE: Displaying Markdown Table for Customization Controls Categories\nDESCRIPTION: This markdown table describes the three general categories of customization controls in Directus layouts: Styling and Formatting, Field Values Displayed, and Manual and Automatic Sorting.\nSOURCE: https://github.com/directus/docs/blob/main/content/guides/2.content/3.layouts.md#2025-04-09_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n| Category       | Description                                                                                       |\n|------------------------------|----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------|\n| Styling and Formatting       | These are additional customizations to the way a layout displays such as the size of each Item, how images are cropped, etc.                                                                                       |\n| Field Values Displayed       | Most layouts allow you to choose which field value(s) are used to represent each item on the collection page. For example, with blog posts, it may be ideal to have the hero image, blog title, date, author, etc. |\n| Manual and Automatic Sorting | Certain layouts may allow sorting items by value in ascending and descending order, drag-and-drop repositioning of items, etc.                                                                                     |\n```\n\n----------------------------------------\n\nTITLE: Basic Button Component Usage in Vue\nDESCRIPTION: Demonstrates the basic usage of a globally registered VButton component in a Directus extension without requiring explicit imports.\nSOURCE: https://github.com/directus/docs/blob/main/content/guides/9.extensions/3.app-extensions/7.ui-library.md#2025-04-09_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<VButton>My Button</VButton>\n```\n\n----------------------------------------\n\nTITLE: Environment Variables for Email Configuration\nDESCRIPTION: Configuration variables for setting up different email transport methods and their associated settings. Includes options for Sendmail, SMTP, Mailgun and AWS SES.\nSOURCE: https://github.com/directus/docs/blob/main/content/configuration/email.md#2025-04-09_snippet_0\n\nLANGUAGE: properties\nCODE:\n```\nEMAIL_VERIFY_SETUP=true\nEMAIL_TRANSPORT=sendmail\n\n# Sendmail\nEMAIL_SENDMAIL_NEW_LINE=unix\nEMAIL_SENDMAIL_PATH=/usr/sbin/sendmail\n\n# SMTP\nEMAIL_SMTP_HOST=\nEMAIL_SMTP_PORT=\nEMAIL_SMTP_USER=\nEMAIL_SMTP_PASSWORD=\nEMAIL_SMTP_POOL=\nEMAIL_SMTP_SECURE=\nEMAIL_SMTP_IGNORE_TLS=\nEMAIL_SMTP_NAME=\n\n# Mailgun\nEMAIL_MAILGUN_API_KEY=\nEMAIL_MAILGUN_DOMAIN=\nEMAIL_MAILGUN_HOST=api.mailgun.net\n\n# AWS SES\nEMAIL_SES_CREDENTIALS__ACCESS_KEY_ID=\nEMAIL_SES_CREDENTIALS__SECRET_ACCESS_KEY=\nEMAIL_SES_REGION=\n\n# Templates\nEMAIL_FROM=no-reply@example.com\nEMAIL_TEMPLATES_PATH=./templates\n```\n\n----------------------------------------\n\nTITLE: Configuring Routes for Dynamic Pages in Laravel\nDESCRIPTION: PHP code to set up the route for dynamic pages using the PageController in Laravel's web.php file.\nSOURCE: https://github.com/directus/docs/blob/main/content/tutorials/1.getting-started/fetch-data-from-directus-with-laravel.md#2025-04-09_snippet_10\n\nLANGUAGE: php\nCODE:\n```\nuse Illuminate\\Support\\Facades\\Route;\nuse App\\Http\\Controllers\\HomeController;\nuse App\\Http\\Controllers\\PostController;\n\nRoute::get('/page/{slug}', [PageController::class, 'show']);\nRoute::get('/', [HomeController::class, 'index']);\n```\n\n----------------------------------------\n\nTITLE: Adding Dynamic Routing for Pages in Angular\nDESCRIPTION: Configures Angular routing to handle dynamic page URLs. This allows the application to load different pages based on the slug in the URL, fetching the corresponding content from Directus.\nSOURCE: https://github.com/directus/docs/blob/main/content/tutorials/1.getting-started/fetch-data-from-directus-with-angular.md#2025-04-09_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\n{path: ':slug', component: PageComponent},\n```\n\n----------------------------------------\n\nTITLE: Initializing Astro Project with CLI Commands\nDESCRIPTION: Commands to create a new Astro project and install the Directus SDK dependency.\nSOURCE: https://github.com/directus/docs/blob/main/content/tutorials/1.getting-started/fetch-data-from-directus-with-astro.md#2025-04-09_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm create astro@latest\n```\n\nLANGUAGE: bash\nCODE:\n```\ncd astro-directus\nnpm i @directus/sdk\n```\n\n----------------------------------------\n\nTITLE: Deleting Objects from Algolia Index\nDESCRIPTION: Hook action that removes items from Algolia when content is deleted in Directus. Supports bulk deletion of multiple items.\nSOURCE: https://github.com/directus/docs/blob/main/content/tutorials/5.extensions/integrate-algolia-indexing-with-custom-hooks.md#2025-04-09_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\naction('posts.items.delete', async (meta) => {\n    await index.deleteObjects(meta.keys);\n});\n```\n\n----------------------------------------\n\nTITLE: Rendering Blog Post Content in SvelteKit\nDESCRIPTION: This Svelte component renders a blog post page using data fetched from Directus. It displays the post's image with Directus' built-in image transformations, the post title, and the HTML content. The code uses the PUBLIC_APIURL to construct the image URL path.\nSOURCE: https://github.com/directus/docs/blob/main/content/tutorials/1.getting-started/fetch-data-from-directus-with-sveltekit.md#2025-04-09_snippet_10\n\nLANGUAGE: svelte\nCODE:\n```\n<script>\n\timport { PUBLIC_APIURL } from '$env/static/public';\n\t/** @type {import('./$types').PageData} */\n\texport let data;\n</script>\n<img src=\"{PUBLIC_APIURL}/assets/{data.post.image.filename_disk}?width=600\" alt=\"{data.post.image.description}\" />\n<h1>{data.post.title}</h1>\n<div>{@html data.post.content}</div>\n```\n\n----------------------------------------\n\nTITLE: Getting Item Count with useItems\nDESCRIPTION: Using the useItems composable to fetch the total item count and page count for a collection, which is useful for pagination.\nSOURCE: https://github.com/directus/docs/blob/main/content/guides/9.extensions/3.app-extensions/8.composables.md#2025-04-09_snippet_7\n\nLANGUAGE: html\nCODE:\n```\n<script setup>\nimport { useItems } from '@directus/extensions-sdk';\n\nconst collectionRef = ref('collection_key')\n\nconst { getItemCount, itemCount, totalPages } = useItems(collectionRef);\n\nawait getItemCount(); // fetch the item count\n\nconst data = itemCount.value; // read the item count\n\nconst pages = totalPages.value; // read the total pages\n</script>\n```\n\n----------------------------------------\n\nTITLE: Implementing Many-to-Many Relations\nDESCRIPTION: Demonstrates how to set up many-to-many relations using junction collections in TypeScript.\nSOURCE: https://github.com/directus/docs/blob/main/content/tutorials/3.tips-and-tricks/advanced-types-with-the-directus-sdk.md#2025-04-09_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\ninterface MySchema {\n\tcollection_a: CollectionA[];\n\tcollection_b: CollectionB[];\n\tcollection_c: CollectionC;\n\tcollection_b_a_m2m: CollectionBA_Many[];\n\tdirectus_users: CustomUser;\n}\n\ninterface CollectionBA_Many {\n\tid: number;\n\tcollection_b_id: string | CollectionB;\n\tcollection_a_id: number | CollectionA;\n}\n\ninterface CollectionB {\n\tid: string;\n\tm2o: number | CollectionA;\n\to2m: number[] | CollectionA[];\n\tm2m: number[] | CollectionBA_Many[];\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a ClusterIP Service for Directus in Kubernetes\nDESCRIPTION: YAML configuration for a ClusterIP service that exposes the Directus pod. It defines the service type, ports, and selector for identifying the Directus pod.\nSOURCE: https://github.com/directus/docs/blob/main/content/tutorials/6.self-hosting/understanding-kubernetes.md#2025-04-09_snippet_9\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: v1\nkind: Service\nmetadata:\n  labels:\n    app.kubernetes.io/instance: directus\n    app.kubernetes.io/name: directus\n  name: directus\nspec:\n  ports:\n  - name: http\n    port: 80\n    protocol: TCP\n    targetPort: 8055\n  selector:\n    labels:\n      app: directus\n  type: ClusterIP\n```\n\n----------------------------------------\n\nTITLE: Building Directus Extension with NPM\nDESCRIPTION: Command to build the Directus extension after making changes. This compiles the JavaScript code and prepares it for installation in Directus.\nSOURCE: https://github.com/directus/docs/blob/main/content/tutorials/5.extensions/proxy-an-external-api-in-a-custom-endpoint-extension.md#2025-04-09_snippet_5\n\nLANGUAGE: shell\nCODE:\n```\nnpm run build\n```\n\n----------------------------------------\n\nTITLE: Conditional View Rendering Based on Permissions in Vue\nDESCRIPTION: Vue template implementation showing how to conditionally render different views based on permission status. Includes unauthorized access handling with v-info component.\nSOURCE: https://github.com/directus/docs/blob/main/content/tutorials/5.extensions/understand-available-slots-in-custom-modules.md#2025-04-09_snippet_9\n\nLANGUAGE: vue\nCODE:\n```\n<private-view v-if=\"!permission\" title=\"401: Unauthorized\">\n\t<v-info icon=\"block\" title=\"Unauthorized Access\" type=\"danger\">\n\t\tYou do not have permission to access this page\n\t</v-info>\n</private-view>\n\n<private-view v-else :title=\"page_title\">\n\t// Existing Content\n</private-view>\n```\n\n----------------------------------------\n\nTITLE: Configuring Environment Variables for Directus\nDESCRIPTION: Environment variable configuration for the Directus API URL in a .env file at the root of the project.\nSOURCE: https://github.com/directus/docs/blob/main/content/tutorials/2.projects/build-a-video-streaming-app-with-sveltekit-and-directus.md#2025-04-09_snippet_2\n\nLANGUAGE: plaintext\nCODE:\n```\nVITE_DIRECTUS_URL='https://directus.example.com';\n```\n\n----------------------------------------\n\nTITLE: Loading Environment Variables in main.dart\nDESCRIPTION: Dart code to import and load environment variables from the .env file before initializing the Flutter application.\nSOURCE: https://github.com/directus/docs/blob/main/content/tutorials/1.getting-started/fetch-data-from-directus-with-flutter.md#2025-04-09_snippet_4\n\nLANGUAGE: dart\nCODE:\n```\nimport 'package:flutter_dotenv/flutter_dotenv.dart';\nFuture main() async {\n  await dotenv.load(fileName: \".env\");\n  runApp(MyApp());\n}\n```\n\n----------------------------------------\n\nTITLE: Querying GraphQL Content Versions (After)\nDESCRIPTION: Updated method for accessing content versions via GraphQL, using dedicated query types '<collection>_by_version' and 'versions'.\nSOURCE: https://github.com/directus/docs/blob/main/content/releases/3.breaking-changes/1.version-10.md#2025-04-09_snippet_4\n\nLANGUAGE: graphql\nCODE:\n```\n# Get an item's version by id\nquery {\n  <collection>_by_version(id: 15, version: \"draft\") {\n    id\n    title\n    body\n  }\n}\n\n# Get a version singleton\nquery {\n  <collection>_by_version(version: \"draft\") {\n    id\n    title\n    body\n  }\n}\n\n# List versions in a collection (`/graphql/system`)\nquery {\n  versions(filter: { collection: { _eq: \"posts\" } }) {\n        item\n        key\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Adding React Hooks Import for Infinite Scroll\nDESCRIPTION: Import statement for React hooks needed in infinite scroll implementation.\nSOURCE: https://github.com/directus/docs/blob/main/content/tutorials/3.tips-and-tricks/implement-pagination-and-infinite-scrolling-in-next-js-.md#2025-04-09_snippet_9\n\nLANGUAGE: javascript\nCODE:\n```\nimport { useRef, useEffect } from \"react\";\n```\n\n----------------------------------------\n\nTITLE: Implementing Login View in SwiftUI\nDESCRIPTION: Creates a login view with email and password fields that authenticates users via API. Handles authentication token management and includes error handling with alert displays.\nSOURCE: https://github.com/directus/docs/blob/main/content/tutorials/1.getting-started/implement-directus-auth-with-ios.md#2025-04-09_snippet_2\n\nLANGUAGE: swift\nCODE:\n```\nimport SwiftUI\n\nstruct LoginData: Codable {\n    let access_token: String\n\n let refresh_token: String\n}\n\nstruct LoginResponse: Codable {\n    let data: LoginData\n}\n\n\nstruct LoginView: View {\n    @State private var email: String = \"\"\n    @State private var password: String = \"\"\n    @State private var showAlert: Bool = false\n    @State private var alertMessage: String = \"\"\n    @Binding var isLoggedIn: Bool\n    @Binding var accessToken: String?\n    @Environment(\\.presentationMode) var presentationMode\n\n    var body: some View {\n        NavigationView {\n            VStack {\n                TextField(\"Email\", text: $email)\n                    .padding()\n                    .textFieldStyle(RoundedBorderTextFieldStyle())\n                    .autocapitalization(.none)\n                    .keyboardType(.emailAddress)\n\n                SecureField(\"Password\", text: $password)\n                    .padding()\n                    .textFieldStyle(RoundedBorderTextFieldStyle())\n\n                Button(action: {\n                    loginUser()\n                }) {\n                    Text(\"Login\")\n                        .padding()\n                        .background(Color.blue)\n                        .foregroundColor(.white)\n                        .cornerRadius(8)\n                }\n            }\n            .padding()\n            .alert(isPresented: $showAlert) {\n                Alert(title: Text(\"Error\"), message: Text(alertMessage), dismissButton: .default(Text(\"OK\")))\n            }\n        }\n    }\n\n    func loginUser() {\n        guard let url = URL(string: \"https://your-directus-project-url/auth/login\") else {\n            showAlert = true\n            alertMessage = \"Invalid URL\"\n            return\n        }\n\n        let loginData = [\"email\": email, \"password\": password]\n\n        var request = URLRequest(url: url)\n        request.httpMethod = \"POST\"\n        request.addValue(\"application/json\", forHTTPHeaderField: \"Content-Type\")\n\n        do {\n            request.httpBody = try JSONSerialization.data(withJSONObject: loginData, options: [])\n        } catch {\n            showAlert = true\n            alertMessage = \"Error encoding login data\"\n            return\n        }\n\n        URLSession.shared.dataTask(with: request) { data, response, error in\n            guard let data = data, let httpResponse = response as? HTTPURLResponse, error == nil else {\n                showAlert = true\n                alertMessage = error?.localizedDescription ?? \"Unknown error\"\n                return\n            }\n\n            if (200..<300).contains(httpResponse.statusCode) {\n                // Successful login\n                if let loginResponse = try? JSONDecoder().decode(LoginResponse.self, from: data) {\n                    accessToken = loginResponse.data.access_token\n                    isLoggedIn = true\n                    presentationMode.wrappedValue.dismiss()\n                }\n            } else {\n                // Failed to login\n                showAlert = true\n                alertMessage = \"Failed to login\"\n            }\n        }.resume()\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Blog Posts Fetching Function\nDESCRIPTION: Function to retrieve blog posts with related data from Directus API\nSOURCE: https://github.com/directus/docs/blob/main/content/tutorials/1.getting-started/fetch-data-from-directus-with-flask.md#2025-04-09_snippet_9\n\nLANGUAGE: python\nCODE:\n```\ndef get_posts():\n    response = requests.get(\n        f\"{DIRECTUS_BASE_URL}/items/posts?fields=slug,title,description,publish_date,author.name&sort=-publish_date\"\n    )\n    return response.json().get(\"data\")\n```\n\n----------------------------------------\n\nTITLE: Creating Navigation Component in Vue\nDESCRIPTION: This Vue component implements the navigation sidebar for the module. It renders a list of navigation items with icons and handles the active state based on the current page.\nSOURCE: https://github.com/directus/docs/blob/main/content/tutorials/5.extensions/implement-navigation-in-multipage-custom-modules.md#2025-04-09_snippet_17\n\nLANGUAGE: vue\nCODE:\n```\n<template>\n  <v-list nav v-if=\"pages\">\n    <v-list-item v-for=\"navItem in pages\" :key=\"navItem.to\" :active=\"navItem.uri == current\" :to=\"navItem.to\">\n      <v-list-item-icon><v-icon :name=\"navItem.icon\" :color=\"navItem.color\" /></v-list-item-icon>\n      <v-list-item-content>\n        <v-text-overflow :text=\"navItem.label\" />\n      </v-list-item-content>\n    </v-list-item>\n  </v-list>\n</template>\n\n<script>\nexport default {\n  name: 'PageNavigation',\n  inheritAttrs: false,\n  props: {\n    current: {\n      type: String,\n      default: null,\n    },\n    pages: {\n      type: Array,\n      default: [],\n    },\n  },\n}\n</script>\n```\n\n----------------------------------------\n\nTITLE: Creating a Weekly Subscription Report Email Template\nDESCRIPTION: This LiquidJS snippet demonstrates a more complex email template that generates a table of subscription data. It uses a for loop to iterate over the report data and includes text capitalization.\nSOURCE: https://github.com/directus/docs/blob/main/content/tutorials/5.extensions/use-dynamic-values-in-custom-email-templates.md#2025-04-09_snippet_6\n\nLANGUAGE: liquid\nCODE:\n```\n{% layout \"example-base\" %}\n{% block header %}\n    <h1>Weekly Subscription Report</h1>\n{% endblock %}\n{% block content %}\n    <table>\n        <thead>\n            <tr>\n                <th>Subscription</th>\n                <th>New Members</th>\n                </tr>\n                </thead>\n        <tbody>\n            {% for item in report %}\n                <tr>\n                    <td>{{ item.subscription.name | capitalize }}</td>\n                    <td>{{ item.count.customer_id }}</td>\n                </tr>\n            {% endfor %}\n        </tbody>\n    </table>\n{% endblock %}\n```\n\n----------------------------------------\n\nTITLE: Reading Single Item via WebSocket\nDESCRIPTION: Example of reading a single item from a collection using WebSockets. Requires collection name and item ID.\nSOURCE: https://github.com/directus/docs/blob/main/content/guides/7.realtime/3.actions.md#2025-04-09_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n\t\"type\": \"items\",\n\t\"action\": \"read\",\n\t\"collection\": \"your_collection_name\",\n\t\"id\": \"single_item_id\"\n}\n```\n\nLANGUAGE: json\nCODE:\n```\n{\n\t\"type\": \"items\",\n\t\"data\": {\n\t\t// ...\n\t}\n}\n```\n\n----------------------------------------\n\nTITLE: Refreshing Authentication Token (After)\nDESCRIPTION: Updated method for refreshing authentication tokens in the SDK, with swapped parameter order and default auth mode.\nSOURCE: https://github.com/directus/docs/blob/main/content/releases/3.breaking-changes/1.version-10.md#2025-04-09_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\n// refresh http request using a cookie\nconst result = await client.request(refresh());\nconst result = await client.request(refresh('cookie'));\n\n// refresh http request using json\nconst result = await client.request(refresh('json', refresh_token));\n```\n\n----------------------------------------\n\nTITLE: Parsing Nested Object Values for Templates\nDESCRIPTION: Recursively extracts values from nested objects for use in display templates, supporting dot notation for nested properties.\nSOURCE: https://github.com/directus/docs/blob/main/content/tutorials/5.extensions/send-sms-messages-with-twilio-in-custom-panels.md#2025-04-09_snippet_12\n\nLANGUAGE: javascript\nCODE:\n```\nfunction parseValue(item, key) {\n\tif (key.includes('.')) {\n\t\tlet value = item;\n\t\tlet fields = key.split('.');\n\n\t\tfields.forEach((f) => {\n\t\t\tif (value != null) {\n\t\t\t\tvalue = value[f];\n\t\t\t}\n\t\t});\n\n\t\treturn value;\n\t} else {\n\t\treturn item[key];\n\t}\n}\n```\n\n----------------------------------------\n\nTITLE: Handshake Mode Authentication Success Response\nDESCRIPTION: Example of successful authentication response including refresh token.\nSOURCE: https://github.com/directus/docs/blob/main/content/guides/7.realtime/1.authentication.md#2025-04-09_snippet_4\n\nLANGUAGE: json\nCODE:\n```\n{\n\t\"type\": \"auth\",\n\t\"status\": \"ok\",\n\t\"refresh_token\": \"a-token-to-use-later\"\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring a Temporary Volume for a Directus Deployment\nDESCRIPTION: Demonstrates how to configure a temporary volume (emptyDir) for a Directus deployment. This type of volume is useful for temporary data that doesn't need to persist between pod restarts.\nSOURCE: https://github.com/directus/docs/blob/main/content/tutorials/6.self-hosting/understanding-kubernetes.md#2025-04-09_snippet_5\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: apps/v1\nkind: Deployment\nmetadata:\n  name: directus-Deployment\n  labels:\n    app: directus\nspec:\n  selector:\n    matchLabels:\n      app: directus\n  template:\n    metadata:\n      labels:\n        app: directus\n    spec:\n      containers:\n      - name: directus\n        image: directus/directus:10.9.3\n        ports:\n          - containerPort: 80\n        env:\n          - name: PUBLIC_URL\n            value: https://directus.app\n          volumeMounts:\n            - name: tmp\n              mountPath: /tmp\n      volumes:\n        - name: tmp\n          emptyDir: {}\n```\n\n----------------------------------------\n\nTITLE: Configuring Operation UI in Directus (JavaScript)\nDESCRIPTION: JavaScript code for configuring the UI of the custom operation in the app.js file, including setting the id, name, icon, and description.\nSOURCE: https://github.com/directus/docs/blob/main/content/tutorials/5.extensions/use-npm-packages-in-custom-operations.md#2025-04-09_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nid: 'operation-lodash-camelcase',\nname: 'Lodash Camel Case',\nicon: 'electric_bolt',\ndescription: 'Use Lodash Camel Case Function.'\n```\n\n----------------------------------------\n\nTITLE: Installing Dependencies and Building Directus Project\nDESCRIPTION: Commands to install project dependencies using pnpm and build the Directus project.\nSOURCE: https://github.com/directus/docs/blob/main/content/community/3.codebase/2.dev-environment.md#2025-04-09_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\npnpm install\npnpm build\n```\n\n----------------------------------------\n\nTITLE: Running Flutter Application\nDESCRIPTION: Commands to navigate to the project directory and launch the Flutter application on a connected device or emulator.\nSOURCE: https://github.com/directus/docs/blob/main/content/tutorials/1.getting-started/fetch-data-from-directus-with-flutter.md#2025-04-09_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ncd my_directus_app && flutter run\n```\n\n----------------------------------------\n\nTITLE: Defining Cache Configuration Variables in YAML\nDESCRIPTION: This YAML snippet defines various environment variables for configuring cache behavior in Directus. It includes options for enabling caching, setting TTL, controlling cache purging, and specifying cache storage locations.\nSOURCE: https://github.com/directus/docs/blob/main/content/configuration/cache.md#2025-04-09_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nCACHE_ENABLED: false\nCACHE_TTL: 5m\nCACHE_CONTROL_S_MAXAGE: 0\nCACHE_AUTO_PURGE: false\nCACHE_AUTO_PURGE_IGNORE_LIST: directus_activity,directus_presets\nCACHE_SYSTEM_TTL: --\nCACHE_SCHEMA: true\nCACHE_SCHEMA_MAX_ITERATIONS: 100\nCACHE_SCHEMA_SYNC_TIMEOUT: 10000\nCACHE_SCHEMA_FREEZE_ENABLED: false\nCACHE_NAMESPACE: system-cache\nCACHE_STORE: memory\nCACHE_STATUS_HEADER: --\nCACHE_VALUE_MAX_SIZE: false\nCACHE_SKIP_ALLOWED: false\nCACHE_HEALTHCHECK_THRESHOLD: 150\n```\n\n----------------------------------------\n\nTITLE: Migrating Sponsors Data to Directus\nDESCRIPTION: This script uses the Directus JavaScript SDK to migrate sponsor data from Nuxt Content to Directus. It fetches data from the Nuxt Content Development API, imports assets, and creates new items in Directus.\nSOURCE: https://github.com/directus/docs/blob/main/content/tutorials/4.migration/migrate-from-nuxt-content-to-directus.md#2025-04-09_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nrequire('dotenv').config()\nconst fs = require('fs')\nconst fetch = require('cross-fetch')\nconst { Directus } = require('@directus/sdk')\nconst directus = new Directus(process.env.DIRECTUS_URL, { auth: { staticToken: process.env.DIRECTUS_TOKEN } })\n\nconst ASSET_FOLDER = 'Sponsors'\nconst CONTENT_DIR = 'content/sponsors'\nconst CONTENT_API_BASE = 'http://localhost:3000/_content/sponsors/'\n\n(async () => {\n  // Get id for Sponsors assets folder\n  const { data: folders } = await directus.items('directus_folders').readByQuery()\n  const { id: folder } = folders.find(f => f.name == ASSET_FOLDER)\n\n  // Get all subfolders of content/sponsors\n  let dirs = fs.readdirSync(CONTENT_DIR)\n  const items = []\n\n  for(let dir of dirs) {\n    // Get sponsor from Nuxt Content Development API\n    const [ item ] = await fetch(CONTENT_API_BASE+dir).then(r => r.json())\n\n    // Import asset to Directus in the \"Sponsors\" folder\n    const { id: image } = await directus.files.import({\n      url: `https://yougotthis.io${item.dir}/${item.file}`,\n      data: { title: item.title, folder }\n    })\n\n    // Push all frontmatter, Directus asset id, and slug to items array\n    items.push({ ...item, image, id: dir })\n  }\n\n  // Form payload in correct structure\n  const payload = items.map(item => {\n    return {\n      slug: item.id,\n      title: item.title,\n      file: item.image,\n      url: item.url\n    }\n  })\n\n  // Create all sponsors items in Directus\n  const { data } = await directus.items('sponsors').createMany(payload)\n})();\n```\n\n----------------------------------------\n\nTITLE: Custom Endpoints - JavaScript\nDESCRIPTION: Example of calling custom endpoints using the Directus SDK in JavaScript\nSOURCE: https://github.com/directus/docs/blob/main/content/guides/4.connect/6.sdk.md#2025-04-09_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nimport { createDirectus, rest } from '@directus/sdk';\nconst directus = createDirectus('http://directus.example.com').with(rest());\n\nconst result = await directus.request(() => ({\n  path: '/custom/endpoint',\n  method: 'GET',\n}));\n```\n\n----------------------------------------\n\nTITLE: Adding Navigation to Base Template in Jinja\nDESCRIPTION: A Jinja snippet for adding navigation links to the base template. It creates a simple navigation bar with links to the home page, blog, about page, code of conduct, and privacy policy pages.\nSOURCE: https://github.com/directus/docs/blob/main/content/tutorials/1.getting-started/fetch-data-from-directus-with-flask.md#2025-04-09_snippet_15\n\nLANGUAGE: jinja\nCODE:\n```\n<header>\n\t<nav>\n\t\t<ul>\n\t\t\t<li><a href=\"/\">Home</a></li>\n\t\t\t<li><a href=\"/blog\">Blog</a></li>\n\t\t\t<li><a href=\"/about\">About</a></li>\n\t\t\t<li><a href=\"/conduct\">Code of Conduct</a></li>\n\t\t\t<li><a href=\"/privacy\">Privacy Policy</a></li>\n\t\t</ul>\n\t</nav>\n</header>\n```\n\n----------------------------------------\n\nTITLE: Docker GPG Key Setup\nDESCRIPTION: Commands to add and configure Docker's GPG key for package authenticity\nSOURCE: https://github.com/directus/docs/blob/main/content/tutorials/6.self-hosting/deploy-directus-to-an-ubuntu-server.md#2025-04-09_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\nsudo install -m 0755 -d /etc/apt/keyrings\ncurl -fsSL https://download.docker.com/linux/ubuntu/gpg | sudo gpg --dearmor -o /etc/apt/keyrings/docker.gpg\nsudo chmod a+r /etc/apt/keyrings/docker.gpg\n```\n\n----------------------------------------\n\nTITLE: Implementing Custom Operation API Function (JavaScript)\nDESCRIPTION: JavaScript code for the api.js file, implementing the custom operation using lodash's camelCase function.\nSOURCE: https://github.com/directus/docs/blob/main/content/tutorials/5.extensions/use-npm-packages-in-custom-operations.md#2025-04-09_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nimport { defineOperationApi } from '@directus/extensions-sdk';\nimport { camelCase } from 'lodash';\n\nexport default defineOperationApi({\n\tid: 'operation-lodash-camelcase',\n\thandler: ({ text }) => {\n\t\treturn {\n\t\t\ttext: camelCase(text)\n\t\t};\n\t},\n});\n```\n\n----------------------------------------\n\nTITLE: Stripe Webhook Signing Secret Response\nDESCRIPTION: Example of the response after setting up webhook forwarding. This shows the webhook signing secret that needs to be used to verify incoming webhook events in your application.\nSOURCE: https://github.com/directus/docs/blob/main/content/tutorials/2.projects/build-an-hotel-booking-platform-with-next-js-stripe-and-directus-automate.md#2025-04-09_snippet_19\n\nLANGUAGE: bash\nCODE:\n```\n> Ready! You are using Stripe API Version [2022-08-01]. Your webhook signing secret is whsec_f9e4axxxxxxx (^C to quit)\n```\n\n----------------------------------------\n\nTITLE: Deploying Directus Docs to Netlify\nDESCRIPTION: Series of commands for deploying the documentation to Netlify, including environment setup, local build, and deployment steps.\nSOURCE: https://github.com/directus/docs/blob/main/README.md#2025-04-09_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nnetlify env:list --plain\npnpm run generate\nnetlify deploy\nnetlify deploy --prod\n```\n\n----------------------------------------\n\nTITLE: Fetching and Displaying Posts from Directus in SwiftUI\nDESCRIPTION: A SwiftUI view for fetching and displaying posts from a Directus API. The component includes model structs for decoding the API response, a list view for displaying posts, and navigation to a detail view for each post. It handles authentication state and provides user feedback.\nSOURCE: https://github.com/directus/docs/blob/main/content/tutorials/1.getting-started/implement-directus-auth-with-ios.md#2025-04-09_snippet_5\n\nLANGUAGE: swift\nCODE:\n```\nimport SwiftUI\n\nstruct PostResponse: Codable {\n    let data: [Post]\n}\n\nstruct Post: Codable, Identifiable {\n    let id: String\n    let title: String\n    let content: String\n    let user_created: String\n    let date_created: String\n}\n\nstruct PostsView: View {\n    @State private var posts: [Post] = []\n    @Binding var isLoggedIn: Bool\n    @Binding var accessToken: String?\n\n    var body: some View {\n        if isLoggedIn {\n            List(posts, id: \\.id) { post in\n                NavigationLink(destination: PostDetailView(post: post, accessToken: accessToken)) {\n                    VStack(alignment: .leading) {\n                        Text(post.title)\n                            .font(.headline)\n                        Text(post.content)\n                            .font(.subheadline)\n                    }\n                }\n            }\n            .onAppear {\n                fetchPosts()\n            }\n        } else {\n            Text(\"Please login to view posts\")\n                .onAppear {\n                    fetchPosts()\n                }\n        }\n    }\n\n    func fetchPosts() {\n        guard let token = accessToken, let url = URL(string: \"https://your-directus-project-url/items/posts\") else {\n            return\n        }\n\n        var request = URLRequest(url: url)\n        request.httpMethod = \"GET\"\n        request.addValue(\"Bearer \\(token)\", forHTTPHeaderField: \"Authorization\")\n\n        URLSession.shared.dataTask(with: request) { data, response, error in\n            if let error = error {\n                print(\"Error fetching posts: \\(error.localizedDescription)\")\n                return\n            }\n\n            guard let data = data else {\n                print(\"No data received\")\n                return\n            }\n\n            do {\n                let decodedResponse = try JSONDecoder().decode(PostResponse.self, from: data)\n                DispatchQueue.main.async {\n                    self.posts = decodedResponse.data\n                }\n            } catch {\n                print(\"Error decoding posts: \\(error.localizedDescription)\")\n            }\n        }.resume()\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Form Submission and API Integration\nDESCRIPTION: Function to handle form submission, sending data to the Directus API and managing responses and errors. This processes the user's form input and creates a new collection item in the database.\nSOURCE: https://github.com/directus/docs/blob/main/content/tutorials/5.extensions/create-collection-items-in-custom-panels.md#2025-04-09_snippet_9\n\nLANGUAGE: javascript\nCODE:\n```\nfunction submitForm() {\n  api\n    .post(`/items/${props.collection}`, formData.value)\n    .then((response) => {\n      formResponse.value = response.data.data;\n      responseDialog.value = true;\n      formData.value = {};\n    })\n    .catch((error) => {\n      formError.value = error;\n      responseDialog.value = true;\n    });\n}\n```\n\n----------------------------------------\n\nTITLE: Creating iOS Widget with Directus Data Integration using JavaScript\nDESCRIPTION: A complete script for creating an iOS widget using Scriptable that fetches and displays sensor data from Directus. The code handles authentication with a static token, data fetching, processing of sensor values, and widget display formatting. The widget shows different layouts based on the device state and updates periodically as controlled by iOS.\nSOURCE: https://github.com/directus/docs/blob/main/content/tutorials/2.projects/use-directus-as-a-baby-health-tracker-with-owlet-and-ops-genie.md#2025-04-09_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\nconst url = \"https://my-directus.app/items/sensor_data?limit=1&sort=sort,-date_created\"\nconst token = \"xy-my-static-token\"\nasync function getData(url) {\n  let request = new Request(url);\n  let authHeader = \"Bearer \" + token\n  request.headers = { \"Authorization\": authHeader }\n\n  let data = await request.loadJSON();\n  return data;\n}\nfunction processData(data) {\n  console.log(data)\n  let processedData = {\n    \"placement\": data.data[0].placement,\n    \"battery\": {\n      \"level\": data.data[0].battery_level,\n      \"state\": data.data[0].battery_state\n    },\n    \"termal\": {\n      \"state\": \"\",\n      \"value\": data.data[0].temperature\n    },\n    \"oxygen\": {\n      \"state\": \"\",\n      \"value\": data.data[0].oxygen\n    },\n    \"heart_rate\": {\n      \"state\": \"\",\n      \"value\": data.data[0].heart_rate\n    },\n    \"reldate\": new RelativeDateTimeFormatter().string(new Date(data.data[0].date_created), new Date()),\n    \"datecreated\":\n      new Date(data.data[0].date_created).getHours() + \":\" +\n      String(new Date(data.data[0].date_created).getMinutes()).padStart(2, \"0\")\n  }\n\n  return processedData;\n}\nfunction createWidget(data) {\n  var widget = new ListWidget();\n  console.log(data.placement);\n  switch (data.placement) {\n    case 4:  // Charging\n      var text = widget.addText(\"⚡️ \" + data.battery.level + \"% …\");\n      break;\n    case \"2\":\n      break;\n    default:\n      var text = widget.addText(\"🌡️ \" + data.termal.value + \"°C\");\n      var text = widget.addText(\"🫧 \" + data.oxygen.value + \" ♥️ \" + data.heart_rate.value);\n      break;\n  }\n  var text = widget.addText(data.datecreated);\n  text.font = Font.regularRoundedSystemFont(12);\n  return widget;\n}\nlet data = await getData(url);\nlet processedData = processData(data);\nlet widget = await createWidget(processedData);\nScript.setWidget(widget);\nScript.complete()\n```\n\n----------------------------------------\n\nTITLE: Installing Dependencies for Directus Hook\nDESCRIPTION: Commands to create a new Directus extension and install required dependencies including Twilio and Directus errors package.\nSOURCE: https://github.com/directus/docs/blob/main/content/tutorials/5.extensions/validate-phone-numbers-with-twilio-in-a-custom-hook.md#2025-04-09_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nnpx create-directus-extension@latest\n```\n\nLANGUAGE: shell\nCODE:\n```\ncd directus-hook-phone-validation\nnpm install twilio @directus/errors\n```\n\n----------------------------------------\n\nTITLE: Sandboxed Endpoint Implementation - TypeScript\nDESCRIPTION: Demonstrates implementation of a sandboxed endpoint using TypeScript with proper type definitions imported from directus:api.\nSOURCE: https://github.com/directus/docs/blob/main/content/guides/9.extensions/2.api-extensions/2.endpoints.md#2025-04-09_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\n/// <reference types=\"@directus/extensions/api.d.ts\" />\nimport type { SandboxEndpointRouter } from 'directus:api';\n\nexport default (router: SandboxEndpointRouter) => {\n\trouter.get('/', () => {\n\t\treturn {\n      status: 200,\n      body: 'Hello World'\n    }\n\t});\n};\n```\n\n----------------------------------------\n\nTITLE: Setting Directory Permissions\nDESCRIPTION: Command to set proper ownership for Directus directories\nSOURCE: https://github.com/directus/docs/blob/main/content/tutorials/6.self-hosting/deploy-directus-to-aws-ec2.md#2025-04-09_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\nsudo chown $USER:$USER extensions uploads\n```\n\n----------------------------------------\n\nTITLE: Creating a New Next.js Project with CLI Options\nDESCRIPTION: Command to initialize a new Next.js project with specific configuration options for this tutorial using create-next-app.\nSOURCE: https://github.com/directus/docs/blob/main/content/tutorials/1.getting-started/fetch-data-from-directus-with-nextjs.md#2025-04-09_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\n# The options below is what is recommended for a completion of this guide.\n# See https://nextjs.org/docs/pages/api-reference/create-next-app\n# for all possible options.\n\nnpx create-next-app \\\n  my-website \\\n  --js \\\n  --app \\\n  --eslint \\\n  --no-src-dir \\\n  --no-tailwind \\\n\t--no-turbopack \\\n  --import-alias \"@/*\"\n```\n\n----------------------------------------\n\nTITLE: Configuring Directus Client in Next.js\nDESCRIPTION: Creates a Directus client with necessary methods for retrieving posts in a separate file.\nSOURCE: https://github.com/directus/docs/blob/main/content/tutorials/1.getting-started/implementing-live-preview-in-next-js.md#2025-04-09_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nimport {\n  createDirectus,\n  readItem,\n  readItems,\n  rest,\n  withToken,\n} from '@directus/sdk';\n\nconst directus = createDirectus<DirectusSchema>(\"http://localhost:8055\").with(rest());\n\nexport { directus, readItem, readItems, withToken };\n```\n\n----------------------------------------\n\nTITLE: Defining Card Group Block Collection in Directus\nDESCRIPTION: Creates a new collection named 'block_cardgroup' with fields for headline, content, group type, and relationships to posts or custom cards. This block type allows for displaying groups of content cards.\nSOURCE: https://github.com/directus/docs/blob/main/content/tutorials/1.getting-started/create-reusable-blocks-with-many-to-any-relationships.md#2025-04-09_snippet_2\n\nLANGUAGE: markdown\nCODE:\n```\nblock_cardgroup\n\n- id (uuid)\n- headline (Type: String, Interface: Input)\n- content (Type: Text, Interface: WYSIWYG)\n- group_type (Type: String, Interface: Radio, Options: ['posts', 'custom'] )\n- posts (Type: M2M, Conditions: Hide Field on Detail IF group_type === 'posts', Related Collection: posts)\n- cards (Type: O2M, Conditions: Hide Field on Detail IF group_type === 'custom', Related Collection: block_cardgroup_cards)\n```\n\n----------------------------------------\n\nTITLE: Adding Dependencies to pubspec.yaml\nDESCRIPTION: YAML configuration to add HTTP client, environment variable loader, and HTML rendering dependencies to the Flutter project.\nSOURCE: https://github.com/directus/docs/blob/main/content/tutorials/1.getting-started/fetch-data-from-directus-with-flutter.md#2025-04-09_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\ndependencies:\n  http: ^0.13.5\n  flutter_dotenv: ^5.0.2\n  flutter_html: ^3.0.0-alpha.6\n```\n\n----------------------------------------\n\nTITLE: Styling Feedback Widget with CSS in Vue.js\nDESCRIPTION: This snippet provides the CSS styles for the feedback widget, including layout, colors, and responsive design for different screen sizes.\nSOURCE: https://github.com/directus/docs/blob/main/content/tutorials/2.projects/build-a-user-feedback-widget-with-vue-js-.md#2025-04-09_snippet_5\n\nLANGUAGE: css\nCODE:\n```\n<style scoped>\n\n.wrapper {\n\tmargin: 2rem 0;\n\tpadding: 1.5rem;\n\tborder: 1px solid rgba(60, 60, 67, .12);\n\tborder-radius: 8px;\n\tbackground: #f6f6f7;\n}\n\n.step > * + * {\n\tmargin-top: 1rem;\n}\n\n.desc {\n\tdisplay: block;\n\tline-height: 20px;\n\tfont-size: 12px;\n\tfont-weight: 500;\n\tcolor: rgba(60, 60, 67, .75);\n}\n\n.heading {\n\tfont-size: 1.2rem;\n\tfont-weight: 700;\n}\n\n.button-container {\n\tdisplay: grid;\n\tgrid-gap: 0.5rem;\n}\n\n.btn {\n\tborder: 1px solid solid rgba(60, 60, 67, .12);\n\tbackground-color: #ffffff;\n\tborder-radius: 8px;\n\ttransition: border-color 0.25s, background-color 0.25s;\n\tdisplay: inline-block;\n\tfont-size: 14px;\n\tfont-weight: 500;\n\tline-height: 1.5;\n\tmargin: 0;\n\tpadding: 0.375rem 0.75rem;\n\ttext-align: center;\n\tvertical-align: middle;\n\twhite-space: nowrap;\n}\n\n.btn:disabled {\n\topacity: 0.5;\n}\n\n.btn:hover {\n\tborder-color: #6644ff;\n}\n\n.btn-primary {\n\tcolor: #fff;\n\tbackground-color: #6644ff;\n\tborder-color: #6644ff;\n}\n\n.btn-primary:hover {\n\tbackground-color: #4422dd;\n\tborder-color: #4422dd;\n}\n\n.input {\n\twidth: 100%;\n\theight: 100px;\n\tborder: 1px solid #ccc;\n\tborder-radius: 4px;\n\tpadding: 0.375rem 0.75rem;\n}\n\n@media screen and (min-width: 768px) {\n\t.button-container {\n\t\tgrid-template-columns: repeat(4, 1fr);\n\t}\n}\n</style>\n```\n\n----------------------------------------\n\nTITLE: Docker Test Run\nDESCRIPTION: Command to verify Docker installation\nSOURCE: https://github.com/directus/docs/blob/main/content/tutorials/6.self-hosting/deploy-directus-to-an-ubuntu-server.md#2025-04-09_snippet_8\n\nLANGUAGE: bash\nCODE:\n```\nsudo docker run hello-world\n```\n\n----------------------------------------\n\nTITLE: Installing Directus SDK in SvelteKit Project\nDESCRIPTION: Command to install the Directus SDK as a dependency in the SvelteKit project for communicating with the Directus API.\nSOURCE: https://github.com/directus/docs/blob/main/content/tutorials/2.projects/build-forms-dynamically-using-directus-and-sveltekit.md#2025-04-09_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nnpm install @directus/sdk\n```\n\n----------------------------------------\n\nTITLE: Fetching and Displaying Posts in Astro\nDESCRIPTION: Astro component that fetches posts from Directus and displays them as a list. It uses the Directus SDK to retrieve post data and renders it on the page.\nSOURCE: https://github.com/directus/docs/blob/main/content/tutorials/1.getting-started/implementing-live-preview-in-astro.md#2025-04-09_snippet_4\n\nLANGUAGE: astro\nCODE:\n```\n---\nimport { client, readItems } from \"../lib/directus\"\n\n// fetch the post data from directus and only highlighting the needed fields for this component.\nconst posts = await client.request(\n  readItems('posts', {\n    fields: ['id', 'title', 'slug', 'published_date', ],\n    sort: '-published_date',\n  })\n);\n//don't forget to check these fields from Fields Permissions in Directus\n\n---\n\n<!doctype html>\n<html lang=\"en\">\n  <body>\n    <main>\n   <h1>Blog Posts</h1>\n   <ul>\n    {\n     posts.map((post) => (\n      <li>\n       <a href={`/${post.id}`}>\n        <h2>{post.title}</h2>\n       </a>\n       <span>\n        {post.published_date}\n       </span>\n      </li>\n     ))\n    }\n   </ul>\n    </main>\n  </body>\n</html>\n```\n\n----------------------------------------\n\nTITLE: Creating a Dashboard Page with Authenticated Data in Next.js using Directus SDK\nDESCRIPTION: This snippet creates a Next.js dashboard page that displays user data and fetches posts from Directus. It uses the getUserData function from a data access layer and the Directus SDK to read items from the posts collection.\nSOURCE: https://github.com/directus/docs/blob/main/content/tutorials/1.getting-started/using-authentication-in-next-js.md#2025-04-09_snippet_9\n\nLANGUAGE: typescript\nCODE:\n```\nimport { getUserData } from '@/lib/dal'; // Import your DAL function\nimport client from '@/lib/directus';\nimport { readItems } from '@directus/sdk';\n\nexport default async function Dashboard() {\n    const response = await getUserData();\n\n    const posts = await client.request(readItems(\"posts\"));\n\n    return (\n        <main>\n            <h1>Welcome!</h1>\n            <p>Your id: {response?.user?.id}</p>\n            <section>\n                <h2>Posts</h2>\n                {posts.length > 0 ? (\n                    <ul>\n                        {posts.map((post) => (\n                            <li key={post.id}>\n                                <h3>{post.title}</h3>\n                            </li>\n                        ))}\n                    </ul>\n                ) : (\n                    <p>No posts available.</p>\n                )}\n            </section>\n        </main>\n    );\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Directus API URL in Environment File\nDESCRIPTION: Environment variable configuration for the Directus API URL in a .env file.\nSOURCE: https://github.com/directus/docs/blob/main/content/tutorials/1.getting-started/implement-multilingual-content-with-directus-and-svelte-kit.md#2025-04-09_snippet_2\n\nLANGUAGE: env\nCODE:\n```\nPUBLIC_DIRECTUS_API_URL='https://directus.example.com';\n```\n\n----------------------------------------\n\nTITLE: Creating Testimonial Display Component\nDESCRIPTION: Basic Svelte component to display testimonial data.\nSOURCE: https://github.com/directus/docs/blob/main/content/tutorials/2.projects/build-a-testimonial-widget-with-sveltekit-and-directus.md#2025-04-09_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\n<script>\n /** @type {import('./$types').PageData} */\n export let data;\n</script>\n\n<div>\n   <div>{data.testimonials[0].full_name}</div>\n   <div>{data.testimonials[0].email_address}</div>\n   <div>{data.testimonials[0].review}</div>\n</div>\n```\n\n----------------------------------------\n\nTITLE: Firewall Configuration\nDESCRIPTION: Commands to configure UFW firewall rules for required ports\nSOURCE: https://github.com/directus/docs/blob/main/content/tutorials/6.self-hosting/deploy-directus-to-an-ubuntu-server.md#2025-04-09_snippet_9\n\nLANGUAGE: bash\nCODE:\n```\nsudo ufw allow 22/tcp\nsudo ufw allow 80/tcp\nsudo ufw allow 443/tcp\nsudo ufw allow 8055/tcp\nsudo ufw enable\n```\n\n----------------------------------------\n\nTITLE: Installing SvelteKit Project\nDESCRIPTION: Command line output showing the process of creating a new SvelteKit project with minimal template configuration.\nSOURCE: https://github.com/directus/docs/blob/main/content/tutorials/1.getting-started/implementing-live-preview-in-sveltekit.md#2025-04-09_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n Welcome to the Svelte CLI! (v0.6.16)\n│\n◇  Which template would you like?\n│  SvelteKit minimal\n│\n◇  Add type checking with Typescript?\n│  No\n│\n◆  Project created\n│\n◇  What would you like to add to your project? (use arrow keys / space bar)\n│  none\n│\n◇  Which package manager do you want to install dependencies with?\n│  npm\n│\n◆  Successfully installed dependencies\n│\n◇  Project next steps ─────────────────────────────────────────────────────╮\n│                                                                          │\n│  1: cd preview-app                                                       │\n│  2: git init && git add -A && git commit -m \"Initial commit\" (optional)  │\n│  3: npm run dev -- --open\n```\n\n----------------------------------------\n\nTITLE: Installing Docker on EC2\nDESCRIPTION: Commands for installing Docker and Docker Compose on AWS EC2 instance\nSOURCE: https://github.com/directus/docs/blob/main/content/tutorials/6.self-hosting/deploy-directus-to-aws-ec2.md#2025-04-09_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nsudo yum install -y docker\nsudo curl -L https://github.com/docker/compose/releases/latest/download/docker-compose-$(uname -s)-$(uname -m) -o /usr/local/bin/docker-compose\n```\n\n----------------------------------------\n\nTITLE: Configuring CORS in Docker Compose for Directus Preview\nDESCRIPTION: YAML configuration for setting the Content Security Policy to allow iFrame access from your Nuxt application to Directus for preview functionality.\nSOURCE: https://github.com/directus/docs/blob/main/content/tutorials/1.getting-started/implementing-live-preview-in-nuxt.md#2025-04-09_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nenvironment:\n  CONTENT_SECURITY_POLICY_DIRECTIVES__FRAME_SRC: your-website-url\n```\n\n----------------------------------------\n\nTITLE: Configuring Stripe API Keys in Next.js\nDESCRIPTION: This snippet shows how to set up Stripe API keys in a Next.js application's environment file. It includes both the publishable and secret keys required for Stripe integration.\nSOURCE: https://github.com/directus/docs/blob/main/content/tutorials/2.projects/build-an-ecommerce-platform-with-next-js-stripe-and-directus-automate.md#2025-04-09_snippet_15\n\nLANGUAGE: bash\nCODE:\n```\nNEXT_PUBLIC_STRIPE_PUBLISHABLE_KEY=YOUR_STRIPE_PUBLISHABLE_KEY\nSTRIPE_SECRET_KEY=YOUR_STRIPE_SECRET_KEY\n```\n\n----------------------------------------\n\nTITLE: Homepage with Global Metadata\nDESCRIPTION: Vue component that displays global metadata from Directus\nSOURCE: https://github.com/directus/docs/blob/main/content/tutorials/1.getting-started/fetch-data-from-directus-with-nuxt.md#2025-04-09_snippet_3\n\nLANGUAGE: vue\nCODE:\n```\n<template>\n\t<h1>{{global.title}}</h1>\n\t<p>{{global.description}}</p>\n</template>\n\n<script setup>\nconst { $directus, $readItem } = useNuxtApp()\n\nconst { data: global } = await useAsyncData('global', () => {\n  return $directus.request($readItem('global'))\n})\n</script>\n```\n\n----------------------------------------\n\nTITLE: Creating Laravel Project with Composer\nDESCRIPTION: Commands to create a new Laravel project and navigate to the project directory using Composer.\nSOURCE: https://github.com/directus/docs/blob/main/content/tutorials/1.getting-started/fetch-data-from-directus-with-laravel.md#2025-04-09_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\ncomposer create-project laravel/laravel directus-laravel-blog\ncd directus-laravel-blog\n```\n\n----------------------------------------\n\nTITLE: Subscribing to Incoming Messages in React with Directus WebSockets\nDESCRIPTION: This code implements a subscription to the 'messages' collection to receive real-time updates when new messages are created. It includes state management for messages and handlers for processing WebSocket responses.\nSOURCE: https://github.com/directus/docs/blob/main/content/tutorials/2.projects/build-a-realtime-chat-app-with-directus-and-next.md#2025-04-09_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\n  const [messages, setMessages] = useState([])\n  async function subscribeToMessages() {\n    try {\n      await directus.subscribe(\"messages\", {\n        event: \"create\",\n        query: {\n          fields: [\"id\", \"content\", \"user_created.first_name\"],\n        },\n        uid: 'messages-subscription',\n      });\n    } catch (error) {\n      console.error(\"Subscription error:\", error);\n    }\n  }\n\n  const addMessageToList = (message) => {\n    setMessages((prev) => [...prev, message]);\n  };\n\n  const receiveMessage = (data) => {\n    if (\n      data.uid === 'messages-subscription' &&\n      data.type === 'subscription' &&\n      data.event === 'create'\n    ) {\n      const message = data.data?.[0];\n      if (message) {\n        addMessageToList(message);\n      }\n    } else if (data.type === 'ping') {\n      directus.sendMessage({ type: 'pong' });\n    }\n  };\n```\n\n----------------------------------------\n\nTITLE: Creating Nginx Configuration File for Directus\nDESCRIPTION: This command opens a new Nginx configuration file for editing using the nano text editor.\nSOURCE: https://github.com/directus/docs/blob/main/content/tutorials/6.self-hosting/deploy-directus-to-an-ubuntu-server.md#2025-04-09_snippet_14\n\nLANGUAGE: bash\nCODE:\n```\nsudo nano /etc/nginx/sites-available/directus\n```\n\n----------------------------------------\n\nTITLE: Implementing Directus Interface Component in Vue\nDESCRIPTION: This Vue component example shows how to create the interface component for a Directus custom interface. It demonstrates handling input changes and emitting events to update the field value.\nSOURCE: https://github.com/directus/docs/blob/main/content/guides/9.extensions/3.app-extensions/1.interfaces.md#2025-04-09_snippet_1\n\nLANGUAGE: vue\nCODE:\n```\n<template>\n\t<input :value=\"value\" @input=\"handleChange($event.target.value)\" />\n\t<span>{{ text }}</span>\n</template>\n\n<script setup>\ndefineProps(['text', 'value']);\nconst emit = defineEmits(['input']);\n\nfunction handleChange(value) {\n  emit('input', value);\n}\n</script>\n```\n\n----------------------------------------\n\nTITLE: Adding TypeScript Definitions for Environment Variables\nDESCRIPTION: TypeScript code for creating type definitions for environment variables to provide proper type checking and intellisense in the development environment.\nSOURCE: https://github.com/directus/docs/blob/main/content/tutorials/1.getting-started/implementing-live-preview-in-nuxt.md#2025-04-09_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\n/// <reference types=\"vite/client\" />\ninterface ImportMetaEnv {\n\treadonly API_URL: string;\n}\n  \ninterface ImportMeta {\n\treadonly env: ImportMetaEnv;\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Directus REST Client for No-Cache Option\nDESCRIPTION: This code snippet modifies the Directus REST client to disable Next.js caching by setting the cache option to 'no-store'. This helps prevent stale data issues that can occur with Next.js's default caching behavior.\nSOURCE: https://github.com/directus/docs/blob/main/content/tutorials/1.getting-started/implementing-multilingual-content-using-directus-and-next.md#2025-04-09_snippet_5\n\nLANGUAGE: js\nCODE:\n```\n.with(\n  rest({\n    onRequest: (options) => ({ ...options, cache: 'no-store' }),\n  })\n)\n```\n\n----------------------------------------\n\nTITLE: Blog Listing Template\nDESCRIPTION: Template for displaying a list of blog posts with titles, dates, and authors\nSOURCE: https://github.com/directus/docs/blob/main/content/tutorials/1.getting-started/fetch-data-from-directus-with-flask.md#2025-04-09_snippet_10\n\nLANGUAGE: jinja\nCODE:\n```\n{% extends \"base.html\" %}\n{% block content %}\n<section>\n\t<h1>Blog posts</h1>\n\t<ol>\n\t\t{% for post in posts %}\n\t\t<li>\n\t\t\t<article>\n\t\t\t\t<h2>{{ post[\"title\"] }}</h2>\n\t\t\t\t<span>\n\t\t\t\t\t{{ post[\"publish_date\"] }} &bull; {{ post[\"author\"][\"name\"] }}\n\t\t\t\t</span>\n\t\t\t\t<hr />\n\t\t\t\t<a href=\"{{ '/blog/' + post[\"slug\"] }}\">Read post</a>\n\t\t\t</article>\n\t\t</li>\n\t\t{% endfor %}\n\t</ol>\n</section>\n{% endblock %}\n```\n\n----------------------------------------\n\nTITLE: Chat Form Template with Message List in HTML\nDESCRIPTION: Enhanced chat interface template including message input form and logout functionality.\nSOURCE: https://github.com/directus/docs/blob/main/content/tutorials/2.projects/build-a-realtime-chat-app-using-directus-and-nuxt.md#2025-04-09_snippet_12\n\nLANGUAGE: html\nCODE:\n```\n<div v-else>\n  <h2>Chat</h2>\n  <div v-for=\"message in messageList\" :key=\"message.id\">\n    {{ message.user_created.first_name }}: {{ message.content }}\n  </div>\n  <form @submit.prevent=\"messageSubmit\">\n    <label for=\"message\">Message</label>\n    <input v-model=\"newMessage\" type=\"text\" id=\"text\" />\n    <input type=\"submit\" />\n  </form>\n  <button type=\"button\" @click=\"logout\">Logout</button>\n</div>\n```\n\n----------------------------------------\n\nTITLE: Configuring Nginx as Reverse Proxy for Directus\nDESCRIPTION: This Nginx server block configuration sets up a reverse proxy for a Directus application running on localhost:8055. It handles HTTP requests and includes WebSocket support.\nSOURCE: https://github.com/directus/docs/blob/main/content/tutorials/6.self-hosting/deploy-directus-to-an-ubuntu-server.md#2025-04-09_snippet_15\n\nLANGUAGE: nginx\nCODE:\n```\nserver {\n  listen 80;\n  server_name directus.exampledomain.com;\n  location / {\n    proxy_pass http://localhost:8055;\n    proxy_http_version 1.1;\n    proxy_set_header Upgrade $http_upgrade;\n    proxy_set_header Connection 'upgrade';\n    proxy_set_header Host $host;\n    proxy_cache_bypass $http_upgrade;\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Displaying Directus Packages Table in Markdown\nDESCRIPTION: A markdown table listing various Directus packages with their names and descriptions. It includes packages for extension creation, project setup, composables, constants, environment variables, error handling, and more.\nSOURCE: https://github.com/directus/docs/blob/main/content/community/3.codebase/1.overview.md#2025-04-09_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n| Package Name                                                                                                             | Description                                                                                                                                          |\n| ------------------------------------------------------------------------------------------------------------------------ | ---------------------------------------------------------------------------------------------------------------------------------------------------- |\n| [create-directus-extension](https://github.com/directus/directus/tree/main/packages/create-directus-extension)           | A small util that will scaffold a Directus extension.                                                                                                |\n| [create-directus-project](https://github.com/directus/directus/tree/main/packages/create-directus-project)               | A small installer util that will create a directory, add boilerplate folders, and install Directus through npm.                                      |\n| [@directus/composables](https://github.com/directus/directus/tree/main/packages/composables/)                            | Shared Vue composables for use in Directus.                                                                                                             |\n| [@directus/constants](https://github.com/directus/directus/tree/main/packages/constants/)                                | Shared constants for Directus.                                                                                                                       |\n| [@directus/env](https://github.com/directus/directus/tree/main/packages/env/)                                            | Environment variable configuration extraction for Directus.                                                                                          |\n| [@directus/errors](https://github.com/directus/directus/tree/main/packages/errors/)                                      | Utility functions to help creating and checking against Directus errors.                                                                             |\n| [@directus/extensions-registry](https://github.com/directus/directus/tree/main/packages/extensions-registry/)            | Abstraction for exploring Directus extensions on a package registry.                                                                                 |\n| [@directus/extensions-sdk](https://github.com/directus/directus/tree/main/packages/extensions-sdk/)                      | A toolkit to develop extensions to extend Directus.                                                                                                  |\n| [@directus/extensions](https://github.com/directus/directus/tree/main/packages/extensions/)                              | Shared utilities, types and constants related to Directus extensions.                                                                                |\n| [@directus/format-title](https://github.com/directus/directus/tree/main/packages/format-title/)                          | Custom formatter that converts any string into Title Case.                                                                                           |\n| [@directus/memory](https://github.com/directus/directus/tree/main/packages/memory/)                                      | Memory / Redis abstraction for Directus.                                                                                                             |\n| [@directus/pressure](https://github.com/directus/directus/tree/main/packages/pressure/)                                  | Pressure based rate limiter.                                                                                                                         |\n| [@directus/random](https://github.com/directus/directus/tree/main/packages/random/)                                      | Set of random-utilities for use in tests.                                                                                                            |\n| [@directus/release-notes-generator](https://github.com/directus/directus/tree/main/packages/release-notes-generator)     | Package that generates release notes for Directus monorepo.                                                                                          |\n| [@directus/schema](https://github.com/directus/directus/tree/main/packages/schema)                                       | Utility for extracting information about the database schema.                                                                                        |\n| [@directus/specs](https://github.com/directus/directus/tree/main/packages/specs)                                         | OpenAPI Specification of the Directus API.                                                                                                           |\n| [@directus/storage-driver-azure](https://github.com/directus/directus/tree/main/packages/storage-driver-azure)           | Azure file storage abstraction for `@directus/storage`.                                                                                              |\n| [@directus/storage-driver-cloudinary](https://github.com/directus/directus/tree/main/packages/storage-driver-cloudinary) | Cloudinary file storage abstraction for `@directus/storage`.                                                                                         |\n| [@directus/storage-driver-gcs](https://github.com/directus/directus/tree/main/packages/storage-driver-gcs)               | GCS file storage abstraction for `@directus/storage`.                                                                                                |\n| [@directus/storage-driver-local](https://github.com/directus/directus/tree/main/packages/storage-driver-local)           | Local file storage abstraction for `@directus/storage`.                                                                                              |\n| [@directus/storage-driver-s3](https://github.com/directus/directus/tree/main/packages/storage-driver-s3)                 | S3 file storage abstraction for `@directus/storage`.                                                                                                 |\n| [@directus/storage-driver-supabase](https://github.com/directus/directus/tree/main/packages/storage-driver-supabase)     | Supabase file storage driver for `@directus/storage`.                                                                                                |\n| [@directus/storage](https://github.com/directus/directus/tree/main/packages/storage)                                     | Object storage abstraction layer for Directus.                                                                                                       |\n| [@directus/stores](https://github.com/directus/directus/tree/main/packages/stores/)                                      | Shared Data Studio state for use in components, extensions, and the `@directus/app` routes. Stores use [Pinia](https://www.npmjs.com/package/pinia). |\n| [@directus/system-data](https://github.com/directus/directus/tree/main/packages/system-data/)                            | Definitions and types for Directus system collections.                                                                                               |\n| [@directus/tsconfig](https://github.com/directus/directus/tree/main/packages/tsconfig)                                   | The shared TS Config files used by the projects in the Directus ecosystem.                                                                           |\n| [@directus/types](https://github.com/directus/directus/tree/main/packages/types/)                                        | Shared types for Directus.                                                                                                                           |\n| [@directus/update-check](https://github.com/directus/directus/tree/main/packages/update-check/)                          | Check if an update is available for a given package.                                                                                                 |\n| [@directus/utils](https://github.com/directus/directus/tree/main/packages/utils)                                         | Utilities shared between the Directus packages.                                                                                                      |\n```\n\n----------------------------------------\n\nTITLE: Implementing Up and Down Migration Functions in JavaScript\nDESCRIPTION: This snippet demonstrates the structure of a migration file in Directus, exporting async 'up' and 'down' functions that use Knex to create and drop a table respectively.\nSOURCE: https://github.com/directus/docs/blob/main/content/configuration/migrations.md#2025-04-09_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nexport async function up(knex) {\n\tawait knex.schema.createTable('test', (table) => {\n\t\ttable.increments();\n\t\ttable.string('rijk');\n\t});\n}\n\nexport async function down(knex) {\n\tawait knex.schema.dropTable('test');\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Nuxt Proxy for Directus Access\nDESCRIPTION: TypeScript configuration for Nuxt to proxy requests to Directus, allowing access between the Nuxt application and Directus server.\nSOURCE: https://github.com/directus/docs/blob/main/content/tutorials/1.getting-started/implementing-live-preview-in-nuxt.md#2025-04-09_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nrouteRules: {\n    \"/directus/**\": { proxy: import.meta.env.API_URL },\n  },\n```\n\n----------------------------------------\n\nTITLE: Logger Initialization API Definition\nDESCRIPTION: TypeScript implementation of the logger initialization API including deep object mapping and value masking\nSOURCE: https://github.com/directus/docs/blob/main/content/tutorials/3.tips-and-tricks/build-a-monitoring-pipeline-for-flows-and-extensions-.md#2025-04-09_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nimport { defineOperationApi } from '@directus/extensions-sdk';\nimport { randomUUID as uuidv4 } from 'crypto';\nimport { mapValues, isPlainObject} from 'lodash';\n\ntype Options = {\n\tloggingContext: string;\n\tmetaData: any\n};\n\nexport default defineOperationApi<Options>({\n\tid: 'initialize_logger',\n\thandler: ({ loggingContext, metaData }, {logger}) => {\n\t\t// Iterate through a nested object\n\t\t// https://github.com/lodash/lodash/issues/1244\n\t\tconst mapValuesDeep = (obj, fn) =>\n\t\t\tmapValues(obj, (val, key) =>\n\t\t\t\tisPlainObject(val) ? mapValuesDeep(val, fn) : fn(val, key, obj)\n\t\t\t)\n\n\t\tmetaData = mapValuesDeep(metaData, function(val, key, obj) {\n\t\t\tif (key == 'password') {\n\t\t\t\tval = '*****'\n\t\t\t}\n\n\t\t\treturn val;\n\t\t});\n\n\t\treturn {uuid: uuidv4(), context: loggingContext, meta: metaData}\n\t},\n});\n```\n\n----------------------------------------\n\nTITLE: Implementing Weather Endpoint in JavaScript\nDESCRIPTION: Create an endpoint that fetches weather data from the Open-Meteo API based on provided longitude and latitude.\nSOURCE: https://github.com/directus/docs/blob/main/content/tutorials/5.extensions/display-external-weather-api-data-in-custom-panels.md#2025-04-09_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nexport default {\n    id: 'weather',\n    handler: (router) => {\n        router.get('/', async (req, res) => {\n            try {\n                const response = await fetch(`https://api.open-meteo.com/v1/forecast?current_weather=true&${req._parsedUrl.query}`);\n\n                if (response.ok) {\n                    res.json(await response.json());\n                } else {\n                    res.status(response.status).send(response.statusText);\n                }\n            } catch(error) {\n                res.status(500).send(error.message);\n            }\n        })\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing PageController for Dynamic Pages with Directus\nDESCRIPTION: PHP code for the PageController class, which fetches page data from Directus based on the slug.\nSOURCE: https://github.com/directus/docs/blob/main/content/tutorials/1.getting-started/fetch-data-from-directus-with-laravel.md#2025-04-09_snippet_8\n\nLANGUAGE: php\nCODE:\n```\n<?php\nnamespace App\\Http\\Controllers;\nuse Illuminate\\Http\\Request;\nclass PageController extends Controller\n{\n    public function show($slug)\n    {\n        $directus = app('directus');\n        $pageResponse = $directus->get('pages', [\n            'filter' => ['slug' => $slug]\n        ]);\n        $page = $pageResponse['data'][0];\n        return view('page', compact('page'));\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Nuxt Page Router Template\nDESCRIPTION: Basic Vue template setup for Nuxt page routing.\nSOURCE: https://github.com/directus/docs/blob/main/content/tutorials/2.projects/build-a-realtime-chat-app-using-directus-and-nuxt.md#2025-04-09_snippet_4\n\nLANGUAGE: html\nCODE:\n```\n<template>\n  <div>\n    <NuxtRouteAnnouncer />\n    <NuxtPage />\n  </div>\n</template>\n```\n\n----------------------------------------\n\nTITLE: Installing Certbot for SSL Certificate\nDESCRIPTION: This command installs Certbot and its Nginx plugin for obtaining and configuring SSL certificates.\nSOURCE: https://github.com/directus/docs/blob/main/content/tutorials/6.self-hosting/deploy-directus-to-an-ubuntu-server.md#2025-04-09_snippet_18\n\nLANGUAGE: bash\nCODE:\n```\nsudo apt install certbot python3-certbot-nginx -y\n```\n\n----------------------------------------\n\nTITLE: Handling Received Messages in React\nDESCRIPTION: This function logs a message when a subscription is successfully started.\nSOURCE: https://github.com/directus/docs/blob/main/content/tutorials/2.projects/build-a-multi-user-chat-with-react-and-directus-realtime.md#2025-04-09_snippet_7\n\nLANGUAGE: js\nCODE:\n```\nfunction receiveMessage() {\n  if (data.type == 'subscription' && data.event == 'init') {\n\t  console.log('subscription started');\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring CORS Settings for Directus\nDESCRIPTION: Environment variables for enabling CORS in a Directus instance to allow requests from the React application.\nSOURCE: https://github.com/directus/docs/blob/main/content/tutorials/1.getting-started/implementing-live-preview-in-react.md#2025-04-09_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\nenvironment:\n  CORS_ENABLED: \"true\"\n  CORS_ORIGIN: \"true\"\n```\n\n----------------------------------------\n\nTITLE: Configuring Content Security Policy in Docker Compose\nDESCRIPTION: Configuration for Content Security Policy in a docker-compose.yml file to allow iframe access from a local React development server.\nSOURCE: https://github.com/directus/docs/blob/main/content/tutorials/1.getting-started/implementing-live-preview-in-react.md#2025-04-09_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nenvironment:\n  CONTENT_SECURITY_POLICY_DIRECTIVES__FRAME_SRC: http://localhost:5173\n```\n\n----------------------------------------\n\nTITLE: Blog Page Route Handler\nDESCRIPTION: Flask route handler for the blog listing page\nSOURCE: https://github.com/directus/docs/blob/main/content/tutorials/1.getting-started/fetch-data-from-directus-with-flask.md#2025-04-09_snippet_11\n\nLANGUAGE: python\nCODE:\n```\n@app.get(\"/blog\")\ndef blog_page():\n    posts = directus.get_posts()\n\n    return render_template(\"blog.html\", posts=posts)\n```\n\n----------------------------------------\n\nTITLE: Creating New Messages in Directus\nDESCRIPTION: This JavaScript snippet handles the submission of new messages to the Directus collection.\nSOURCE: https://github.com/directus/docs/blob/main/content/tutorials/2.projects/build-a-multi-user-chat-with-vue-js-and-directus-realtime.md#2025-04-09_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\nconst messageHistory = ref([]);\n\nconst messageSubmit = (event) => {\n  const text = event.target.elements.text.value;\n\n  client.sendMessage({\n    type: 'items',\n    collection: 'messages',\n    action: 'create',\n    data: { text },\n  });\n\n  event.target.reset();\n};\n```\n\n----------------------------------------\n\nTITLE: Obtaining SSL Certificate with Certbot\nDESCRIPTION: This command runs Certbot to obtain an SSL certificate for the specified domain and automatically configure Nginx to use HTTPS.\nSOURCE: https://github.com/directus/docs/blob/main/content/tutorials/6.self-hosting/deploy-directus-to-an-ubuntu-server.md#2025-04-09_snippet_19\n\nLANGUAGE: bash\nCODE:\n```\nsudo certbot --nginx -d directus.exampledomain.com\n```\n\n----------------------------------------\n\nTITLE: Writing Blackbox Tests with Supertest in Directus\nDESCRIPTION: Example of writing blackbox tests for Directus using Supertest. This snippet tests the server ping endpoint with both REST and GraphQL requests.\nSOURCE: https://github.com/directus/docs/blob/main/content/community/3.codebase/3.testing.md#2025-04-09_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nimport { getUrl } from '@common/config';\nimport request from 'supertest';\nimport vendors from '@common/get-dbs-to-test';\nimport { requestGraphQL } from '@common/transport';\n\ndescribe('/server', () => {\n\tdescribe('GET /ping', () => {\n\t\tit.each(vendors)('%s', async (vendor) => {\n\t\t\t// Action\n\t\t\tconst response = await request(getUrl(vendor))\n\t\t\t\t.get('/server/ping')\n\t\t\t\t.expect('Content-Type', /text\\/html/)\n\t\t\t\t.expect(200);\n\n\t\t\tconst gqlResponse = await requestGraphQL(getUrl(vendor), true, null, {\n\t\t\t\tquery: {\n\t\t\t\t\tserver_ping: true,\n\t\t\t\t},\n\t\t\t});\n\n\t\t\t// Assert\n\t\t\texpect(response.text).toBe('pong');\n\t\t\texpect(gqlResponse.body.data.server_ping).toBe('pong');\n\t\t});\n\t});\n});\n```\n\n----------------------------------------\n\nTITLE: Starting SvelteKit Development Server\nDESCRIPTION: Command to start the SvelteKit application in development mode for testing the live preview functionality.\nSOURCE: https://github.com/directus/docs/blob/main/content/tutorials/1.getting-started/implementing-live-preview-in-sveltekit.md#2025-04-09_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\nnpm run dev\n```\n\n----------------------------------------\n\nTITLE: Creating a Directus Nuxt Plugin\nDESCRIPTION: Nuxt plugin that initializes a connection to Directus using the SDK, making it available throughout the application.\nSOURCE: https://github.com/directus/docs/blob/main/content/tutorials/1.getting-started/implementing-multilingual-content-using-directus-and-nuxt.md#2025-04-09_snippet_7\n\nLANGUAGE: ts\nCODE:\n```\nimport { createDirectus, rest, readItems } from \"@directus/sdk\";\nconst directus = createDirectus<DirectusSchema>(\n\t\"http://your-website-url/directus\",\n).with(rest());\nexport default defineNuxtPlugin(() => {\n\treturn {\n\t\tprovide: { directus, readItems },\n\t};\n});\n```\n\n----------------------------------------\n\nTITLE: Implementing Inngest Endpoint in Directus\nDESCRIPTION: Creates an Express-compatible endpoint that serves Inngest functions within Directus. This endpoint acts as a bridge between Directus and Inngest, handling function execution, retries, and event processing.\nSOURCE: https://github.com/directus/docs/blob/main/content/tutorials/7.workflows/invincible-ai-content-workflows-with-inngest-and-directus.md#2025-04-09_snippet_5\n\nLANGUAGE: tsx\nCODE:\n```\n// src/inngest/index.ts\nimport type { Router } from 'express';\nimport type { DirectusContext } from './types';\n\nimport { defineEndpoint } from '@directus/extensions-sdk';\nimport { serve } from 'inngest/express';\n\nimport { inngest, setDirectusContext } from './client';\n\nexport default defineEndpoint({\n  id: 'inngest',\n\n  handler: (router: Router, context: DirectusContext) => {\n    setDirectusContext(context);\n\n    const handler = serve({\n      client: inngest,\n      // Notice we don't have any functions yet\n      functions: [],\n    });\n\n    router.use(\n      '/',\n      handler,\n    );\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Importing Required Packages for Vonage Panel in Vue\nDESCRIPTION: This snippet shows the necessary imports for the Vonage activity panel Vue component, including API utilities, date formatting functions, and Vue composition API functions.\nSOURCE: https://github.com/directus/docs/blob/main/content/tutorials/5.extensions/display-external-api-data-from-vonage-in-custom-panels.md#2025-04-09_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nimport { useApi } from '@directus/extensions-sdk';\nimport { adjustDate } from '@directus/shared/utils';\nimport { formatISO, formatDistanceToNow, parseISO } from 'date-fns';\nimport { ref, watch } from 'vue';\n```\n\n----------------------------------------\n\nTITLE: Dynamic Page Route Component\nDESCRIPTION: SolidJS component for rendering dynamic pages based on URL slugs\nSOURCE: https://github.com/directus/docs/blob/main/content/tutorials/1.getting-started/fetch-data-from-directus-with-solidstart.md#2025-04-09_snippet_5\n\nLANGUAGE: jsx\nCODE:\n```\nimport { createAsync, useParams } from \"@solidjs/router\";\nimport { Show, createEffect } from \"solid-js\";\nimport { getPage } from \"~/libs/directus\";\nexport const route = {\n  load: (loc) => {\n    if (loc.pathname) {\n      return getPage(loc.pathname.substring(1));\n    }\n  },\n};\nexport default function UserPage() {\n  const param = useParams();\n  const page = createAsync(getPage(param?.slug));\n  createEffect(() => {\n    if (page() === null) {\n      throw new Error(\"404\");\n    }\n  });\n  return (\n    <Show when={page()}>\n      {(pageInfo) => (\n        <>\n          <h1>{pageInfo().title}</h1>\n          <p innerHTML={pageInfo().content} />\n        </>\n      )}\n    </Show>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Handling Subscription Initialization Confirmation\nDESCRIPTION: Creates a receiveMessage function that logs to the console when a subscription is successfully started. This is used for debugging the WebSocket connection.\nSOURCE: https://github.com/directus/docs/blob/main/content/tutorials/2.projects/build-a-multi-user-chat-with-javascript-and-directus-realtime.md#2025-04-09_snippet_10\n\nLANGUAGE: javascript\nCODE:\n```\nif (data.type == 'subscription' && data.event == 'init') {\n\tconsole.log('subscription started');\n}\n```\n\n----------------------------------------\n\nTITLE: Directus Docker Compose Configuration\nDESCRIPTION: Complete docker-compose configuration for Directus deployment with database and port settings\nSOURCE: https://github.com/directus/docs/blob/main/content/tutorials/6.self-hosting/deploy-directus-to-aws-ec2.md#2025-04-09_snippet_4\n\nLANGUAGE: yaml\nCODE:\n```\nversion: \"3\"\nservices:\n  directus:\n    image: directus/directus:10.8.3\n    ports:\n      - 80:80\n    volumes:\n      - ./uploads:/directus/uploads\n      - ./extensions:/directus/extensions\n    environment:\n      PORT: 80\n      KEY: \"replace-with-random-value\"\n      SECRET: \"replace-with-random-value\"\n      ADMIN_EMAIL: \"admin@example.com\"\n      ADMIN_PASSWORD: \"d1r3ctu5\"\n      DB_CLIENT: \"pg\"\n      DB_HOST: \"YOUR_RDS_DB_URL\"\n      DB_PORT: 5432\n      DB_DATABASE: \"postgres\"\n      DB_USER: \"YOUR_DB_USER\"\n      DB_PASSWORD: \"YOUR_DB_PASSWORD\"\n      DB_SSL__REJECT_UNAUTHORIZED: false\n      WEBSOCKETS_ENABLED: true\n```\n\n----------------------------------------\n\nTITLE: Setting Directus URL in Vue.js Component\nDESCRIPTION: This JavaScript snippet sets the Directus URL for the Vue.js component to use in API calls.\nSOURCE: https://github.com/directus/docs/blob/main/content/tutorials/2.projects/build-a-multi-user-chat-with-vue-js-and-directus-realtime.md#2025-04-09_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nconst url = 'https://your-directus-url';\n```\n\n----------------------------------------\n\nTITLE: French Translation Markdown Content\nDESCRIPTION: French translation of the rabbit productivity post to be used in the posts_translations collection in Directus.\nSOURCE: https://github.com/directus/docs/blob/main/content/tutorials/1.getting-started/implementing-multilingual-content-using-directus-and-nuxt.md#2025-04-09_snippet_9\n\nLANGUAGE: md\nCODE:\n```\nLes lapins sont connus pour leur rapidité et leur agilité, mais saviez-vous qu'ils peuvent aussi être incroyablement productifs ? Voici quelques conseils pour vous aider à devenir le lapin le plus productif possible :\n\nFixez-vous des objectifs clairs. Déterminez ce que vous voulez accomplir et établissez un plan pour atteindre vos objectifs.\n\nUtilisez vos capacités naturelles. Les lapins sont rapides, alors utilisez cette vitesse à votre avantage en accomplissant les tâches rapidement et efficacement.\n\nRestez organisé. Gardez votre terrier propre et rangé afin de pouvoir trouver rapidement ce dont vous avez besoin quand vous en avez besoin.\n\nFaites des pauses. Malgré leur réputation d'être rapides, les lapins ont aussi besoin de pauses. Faites de petits sauts pour vous dégourdir les jambes et reposer votre esprit.\n\nEntourez-vous d'influences positives. Faites-vous des amis avec d'autres lapins productifs et apprenez de leurs habitudes.\n\nEn suivant ces conseils, vous serez sur la bonne voie pour devenir le lapin le plus productif possible. Alors, sautez et faites avancer les choses !\n```\n\n----------------------------------------\n\nTITLE: Updating Auth Success Handler to Load Historical Messages\nDESCRIPTION: Modifies the WebSocket message handler to load historical messages after authentication and before subscribing to new messages. This ensures existing messages are displayed when a user logs in.\nSOURCE: https://github.com/directus/docs/blob/main/content/tutorials/2.projects/build-a-multi-user-chat-with-javascript-and-directus-realtime.md#2025-04-09_snippet_15\n\nLANGUAGE: javascript\nCODE:\n```\nclient.onWebSocket('message', function (data) {\n  if (data.type == 'auth' && data.status == 'ok') {\n    readAllMessages(); // [!code ++]\n    subscribe('create');\n  }\n});\n```\n\n----------------------------------------\n\nTITLE: Image Type UUID Configuration\nDESCRIPTION: Configuration options for single image upload input type in Directus. Includes additional crop fitting option.\nSOURCE: https://github.com/directus/docs/blob/main/content/guides/1.data-model/3.interfaces.md#2025-04-09_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n| Configuration | Options                                                                        |\n| ------------- | ------------------------------------------------------------------------------ |\n| Types         | `UUID`                                                                         |\n| Root Folder   | Folder for the uploaded files. Does not affect the location of existing files. |\n| Crop to Fit   | Crop the image as needed when displaying the image.                            |\n```\n\n----------------------------------------\n\nTITLE: Creating Rich Text Component in Svelte\nDESCRIPTION: Defines a Svelte component for rendering rich text content from Directus.\nSOURCE: https://github.com/directus/docs/blob/main/content/tutorials/1.getting-started/rendering-dynamic-blocks-using-sveltekit.md#2025-04-09_snippet_5\n\nLANGUAGE: svelte\nCODE:\n```\n<!--src/lib/components/RichText.svelte-->\n<script>\n  export let data;\n</script>\n\n<section class=\"rich-text\">\n  <h2>{data.headline}</h2>\n  <div class=\"content\">{@html data.content.replace(/<\\/?p>/g, '')}</div>\n</section>\n\n<style>\n  .rich-text {\n      padding: 2rem;\n      background: white;\n  }\n  .content {\n      font-size: 1rem;\n      line-height: 1.5;\n  }\n</style>\n```\n\n----------------------------------------\n\nTITLE: Directus Environment Variables Configuration\nDESCRIPTION: Required environment variables for Directus instance setup in Cloud Run\nSOURCE: https://github.com/directus/docs/blob/main/content/tutorials/6.self-hosting/deploy-directus-to-google-cloud-platform.md#2025-04-09_snippet_7\n\nLANGUAGE: yaml\nCODE:\n```\nKEY: YOUR_RANDOM_KEY\nSECRET: YOUR_RANDOM_SECRET\nADMIN_EMAIL: admin@example.com\nADMIN_PASSWORD: d1r3ctu5\nDB_CLIENT: pg\nDB_HOST: /cloudsql/directus-project:us-central1:directus-db\nDB_PORT: 5432\nDB_DATABASE: postgres\nDB_USER: postgres\nDB_PASSWORD: YOUR_DB_PASSWORD\nDB_SSL__REJECT_UNAUTHORIZED: false\nDB_SSL: false\nPRESSURE_LIMITER_ENABLED: false\n```\n\n----------------------------------------\n\nTITLE: Initializing Navigation Variables in Vue\nDESCRIPTION: Sets up reactive variables for page navigation including title, breadcrumb, and pages list.\nSOURCE: https://github.com/directus/docs/blob/main/content/tutorials/5.extensions/implement-navigation-in-multipage-custom-modules.md#2025-04-09_snippet_8\n\nLANGUAGE: javascript\nCODE:\n```\nconst page_title = ref('');\nconst breadcrumb = ref([\n  {\n    name: 'Home',\n    to: `/landing-page`,\n  },\n]);\nconst all_pages = ref([]);\n```\n\n----------------------------------------\n\nTITLE: Building a Directus Module with npm\nDESCRIPTION: Terminal command for building a Directus module with npm. This compiles the source code into the dist directory, which is required for installation in Directus.\nSOURCE: https://github.com/directus/docs/blob/main/content/tutorials/5.extensions/implement-navigation-in-multipage-custom-modules.md#2025-04-09_snippet_14\n\nLANGUAGE: shell\nCODE:\n```\nnpm run build\n```\n\n----------------------------------------\n\nTITLE: Implementing ContentView with Directus Authentication in SwiftUI\nDESCRIPTION: Core view implementation handling authentication state and navigation. Features include conditional rendering based on login status, navigation to post creation and viewing, and logout functionality with Directus API integration.\nSOURCE: https://github.com/directus/docs/blob/main/content/tutorials/1.getting-started/implement-directus-auth-with-ios.md#2025-04-09_snippet_0\n\nLANGUAGE: swift\nCODE:\n```\nimport SwiftUI\n\nstruct ContentView: View {\n    @State private var showLoginView = false\n    @State private var isLoggedIn = false\n    @State private var accessToken: String?\n\n    var body: some View {\n        NavigationView {\n            VStack {\n                Spacer()\n\n                if isLoggedIn {\n                    NavigationLink(\n                        destination: CreatePostView(accessToken: accessToken ?? \"\"),\n                        label: {\n                            Text(\"Create Post\")\n                                .font(.title)\n                                .foregroundColor(.white)\n                                .padding()\n                                .background(Color.blue)\n                                .cornerRadius(10)\n                        })\n                    .padding()\n\n                    NavigationLink(\n                        destination: PostsView(isLoggedIn: $isLoggedIn, accessToken: $accessToken),\n                        label: {\n                            Text(\"Posts\")\n                                .font(.title)\n                                .foregroundColor(.white)\n                                .padding()\n                                .background(Color.green)\n                                .cornerRadius(10)\n                        })\n                    .padding()\n\n                    Button(\"Logout\") {\n                        logout()\n                    }\n                    .foregroundColor(.red)\n                    .padding()\n                } else {\n                    Button(action: {\n                        showLoginView = true\n                    }) {\n                        Text(\"Login\")\n                            .font(.title)\n                            .foregroundColor(.white)\n                            .padding()\n                            .background(Color.green)\n                            .cornerRadius(10)\n                    }\n                    .sheet(isPresented: $showLoginView) {\n                        LoginView(isLoggedIn: $isLoggedIn, accessToken: $accessToken)\n                    }\n\n                    NavigationLink(\n                        destination: UserRegisterView(isActive: .constant(false)),\n                        label: {\n                            Text(\"Register\")\n                                .font(.title)\n                                .foregroundColor(.white)\n                                .padding()\n                                .background(Color.orange)\n                                .cornerRadius(10)\n                        })\n                    .padding()\n                }\n\n                Spacer()\n            }\n            .padding()\n            .navigationTitle(\"Welcome\")\n        }\n    }\n\n    func logout() {\n        guard let refreshToken = accessToken\n        else {\n            print(\"Refresh token is missing\")\n            return\n        }\n\n        guard let url = URL(string: \"https://your-directus-project-url/auth/logout\") else {\n            print(\"Invalid logout URL\")\n            return\n        }\n\n        var request = URLRequest(url: url)\n        request.httpMethod = \"POST\"\n        request.addValue(\"application/json\", forHTTPHeaderField: \"Content-Type\")\n\n        let body: [String: Any] = [\n            \"refresh_token\": refreshToken\n        ]\n\n        do {\n            request.httpBody = try JSONSerialization.data(withJSONObject: body)\n        } catch {\n            print(\"Error encoding request body: \\(error.localizedDescription)\")\n            return\n        }\n\n        URLSession.shared.dataTask(with: request) { data, response, error in\n            if let error = error {\n                print(\"Error logging out: \\(error.localizedDescription)\")\n                return\n            }\n\n            if let httpResponse = response as? HTTPURLResponse {\n                if (200..<300).contains(httpResponse.statusCode) {\n\n                    DispatchQueue.main.async {\n                        isLoggedIn = false\n                        accessToken = nil\n                    }\n                } else {\n                    print(\"Failed to logout. Status code: \\(httpResponse.statusCode)\")\n                }\n            }\n        }.resume()\n    }\n```\n\n----------------------------------------\n\nTITLE: Implementing Token Refresh Function\nDESCRIPTION: Function demonstrating different methods to refresh authentication tokens using Directus SDK, including cookie-based and JSON-based refresh approaches.\nSOURCE: https://github.com/directus/docs/blob/main/content/tutorials/1.getting-started/using-authentication-in-react.md#2025-04-09_snippet_20\n\nLANGUAGE: javascript\nCODE:\n```\n// src/lib/directus.js\n\nexport const refreshAuthToken = async () => {\n    // refresh using the authentication composable\n    await client.refresh();\n\n    // refresh http request using a cookie\n    await client.request(refresh('cookie'));\n\n    // refresh http request using json\n    await client.request(refresh('json', refresh_token));\n}\n```\n\n----------------------------------------\n\nTITLE: Installing Directus SDK\nDESCRIPTION: NPM command to install the Directus SDK for frontend integration\nSOURCE: https://github.com/directus/docs/blob/main/content/tutorials/4.migration/migrate-from-notion-to-directus.md#2025-04-09_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nnpm install @directus/sdk\n```\n\n----------------------------------------\n\nTITLE: Blog Posts Fetcher Implementation\nDESCRIPTION: Function to fetch blog posts with related author data and sorting\nSOURCE: https://github.com/directus/docs/blob/main/content/tutorials/1.getting-started/fetch-data-from-directus-with-solidstart.md#2025-04-09_snippet_6\n\nLANGUAGE: jsx\nCODE:\n```\nexport const getPosts = cache(async () => {\n  \"use server\";\n  try {\n    const post = await directus.request(\n      readItems(\"posts\", {\n        fields: [\"slug\", \"title\", \"publish_date\", { author: [\"name\"] }],\n        sort: [\"-publish_date\"],\n      })\n    );\n    return post;\n  } catch (error) {\n    return null;\n  }\n}, \"post-list\");\n```\n\n----------------------------------------\n\nTITLE: Creating Environment Variables for Directus URL\nDESCRIPTION: Content for an .env file that defines the Directus API URL for a Nuxt project.\nSOURCE: https://github.com/directus/docs/blob/main/content/tutorials/1.getting-started/implementing-multilingual-content-using-directus-and-nuxt.md#2025-04-09_snippet_3\n\nLANGUAGE: plain\nCODE:\n```\nAPI_URL=\"http://0.0.0.0:8055\"\n```\n\n----------------------------------------\n\nTITLE: Cloud Storage Environment Variables\nDESCRIPTION: Environment variables configuration for Google Cloud Storage integration\nSOURCE: https://github.com/directus/docs/blob/main/content/tutorials/6.self-hosting/deploy-directus-to-google-cloud-platform.md#2025-04-09_snippet_8\n\nLANGUAGE: yaml\nCODE:\n```\nSTORAGE_LOCATIONS: gcs\nSTORAGE_GCS_DRIVER: gcs\nSTORAGE_GCS_BUCKET: YOUR_CLOUD_STORAGE_BUCKET_NAME\nSTORAGE_GCS_CREDENTIALS: YOUR_SERVICE_ACCOUNT_KEY_JSON\nSTORAGE_GCS_ROOT: cms/assets\n```\n\n----------------------------------------\n\nTITLE: Refreshing Authentication with REST API\nDESCRIPTION: JavaScript code using fetch to call the Directus refresh endpoint with session credentials to establish an authenticated session.\nSOURCE: https://github.com/directus/docs/blob/main/content/guides/3.auth/7.sso/2.seamless.md#2025-04-09_snippet_2\n\nLANGUAGE: js\nCODE:\n```\nawait fetch(\"https://directus.myserver.com/auth/refresh\", {\n  method: \"POST\",\n  credentials: \"include\",\n  headers: {\n    Accept: \"application/json\",\n    \"Content-Type\": \"application/json\",\n  },\n  body: JSON.stringify({ mode: \"session\" }),\n});\n```\n\n----------------------------------------\n\nTITLE: Implementing Search Functionality in SvelteKit News Application\nDESCRIPTION: This snippet shows how to add search functionality to a SvelteKit news application. It includes an input field for search queries, a function to update the URL with the search parameter, and rendering of search results or all news items.\nSOURCE: https://github.com/directus/docs/blob/main/content/tutorials/1.getting-started/implement-multilingual-content-with-directus-and-svelte-kit.md#2025-04-09_snippet_9\n\nLANGUAGE: javascript\nCODE:\n```\n<script>\n  import { goto } from \"$app/navigation\";\n  import { page } from \"$app/stores\";\n  export let data;\n\n  let searchQuery = $page.url.searchParams.get(\"q\") || \"\";\n\n  function handleSearchChange() {\n    goto(`/?q=${searchQuery}`, { replaceState: true });\n  }\n</script>\n\n<h1>Trending Today!</h1>\n<div>\n  <input type=\"text\" bind:value={searchQuery} placeholder=\"Search News...\" />\n  <button on:click={handleSearchChange}>Search</button>\n</div>\n<ul>\n  {#each data.news as article}\n    <li>\n      <div>\n        <h2>\n          <a href={`/${article.id}`}>\n            {article.translations[0].title}\n          </a>\n        </h2>\n        <p>By {article.author}</p>\n      </div>\n    </li>\n  {/each}\n</ul>\n```\n\n----------------------------------------\n\nTITLE: Configuring CORS in Directus docker-compose.yml\nDESCRIPTION: YAML configuration to enable CORS in Directus for requests from the Astro application. This allows communication between Directus and the Astro app.\nSOURCE: https://github.com/directus/docs/blob/main/content/tutorials/1.getting-started/implementing-live-preview-in-astro.md#2025-04-09_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nCORS_ENABLED: \"true\"\nCORS_ORIGIN: \"http://localhost:4321\"\nCORS_CREDENTIALS: \"true\"\nCONTENT_SECURITY_POLICY_DIRECTIVES__FRAME_SRC: \"http://localhost:4321\"\n```\n\n----------------------------------------\n\nTITLE: Implementing Filter Event Hook in Directus\nDESCRIPTION: Example showing how to implement a filter event hook for item creation that receives payload, meta, and context objects and logs a message before the event is processed.\nSOURCE: https://github.com/directus/docs/blob/main/content/guides/9.extensions/2.api-extensions/1.hooks.md#2025-04-09_snippet_1\n\nLANGUAGE: js\nCODE:\n```\nexport default ({ filter }) => {\n\tfilter('items.create', (payload, meta, context) => {\n\t\tconsole.log('About to create item.');\n    return payload;\n\t});\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing EditPostView for Post Updates in SwiftUI with Directus API\nDESCRIPTION: EditPostView allows users to edit existing posts by sending a PATCH request to the Directus API. It includes input fields for post title and content, and handles API communication with proper authentication. The view manages state for editing mode and updates post data through the Directus items endpoint.\nSOURCE: https://github.com/directus/docs/blob/main/content/tutorials/1.getting-started/implement-directus-auth-with-ios.md#2025-04-09_snippet_7\n\nLANGUAGE: swift\nCODE:\n```\nimport SwiftUI\n\nstruct EditPostView: View {\n    var post: Post\n    @Binding var isEditMode: Bool\n    var accessToken: String?\n    @State private var editedTitle: String\n    @State private var editedContent: String\n\n    init(post: Post, isEditMode: Binding<Bool>, accessToken: String?) {\n        self.post = post\n        _isEditMode = isEditMode\n        _editedTitle = State(initialValue: post.title)\n        _editedContent = State(initialValue: post.content)\n        self.accessToken = accessToken\n    }\n\n    var body: some View {\n        VStack {\n            TextField(\"Title\", text: $editedTitle)\n                .padding()\n                .textFieldStyle(RoundedBorderTextFieldStyle())\n\n            TextField(\"Content\", text: $editedContent)\n                .padding()\n                .textFieldStyle(RoundedBorderTextFieldStyle())\n\n            Button(\"Save\") {\n                updatePost()\n            }\n        }\n        .padding()\n        .onAppear {\n            editedTitle = post.title\n            editedContent = post.content\n        }\n    }\n\n    func updatePost() {\n        guard let accessToken = accessToken else {\n            print(\"Access token is missing\")\n            return\n        }\n\n        let postId = post.id\n\n        guard let url = URL(string: \"https://your-directus-project-url/items/posts/\\(postId)\") else {\n            print(\"Invalid URL\")\n            return\n        }\n\n        var request = URLRequest(url: url)\n        request.httpMethod = \"PATCH\"\n        request.addValue(\"Bearer \\(accessToken)\", forHTTPHeaderField: \"Authorization\")\n        request.addValue(\"application/json\", forHTTPHeaderField: \"Content-Type\")\n\n        let updateData: [String: Any] = [\n            \"title\": editedTitle,\n            \"content\": editedContent\n        ]\n\n        do {\n            request.httpBody = try JSONSerialization.data(withJSONObject: updateData, options: [])\n        } catch {\n            print(\"Error encoding update data: \\(error.localizedDescription)\")\n            return\n        }\n\n        URLSession.shared.dataTask(with: request) { data, response, error in\n            if let error = error {\n                print(\"Error updating post: \\(error.localizedDescription)\")\n                return\n            }\n\n            if let httpResponse = response as? HTTPURLResponse {\n                if httpResponse.statusCode == 200 {\n                    DispatchQueue.main.async {\n                        isEditMode = false\n                    }\n                } else {\n                    print(\"Failed to update post. Status code: \\(httpResponse.statusCode)\")\n                }\n            }\n        }.resume()\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a StatefulSet for MariaDB in a Directus Setup\nDESCRIPTION: Defines a StatefulSet for a MariaDB database to be used with Directus. StatefulSets are ideal for stateful applications like databases that require stable network identifiers and persistent storage for each pod.\nSOURCE: https://github.com/directus/docs/blob/main/content/tutorials/6.self-hosting/understanding-kubernetes.md#2025-04-09_snippet_3\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: apps/v1\nkind: StatefulSet\nmetadata:\n  name: directus-mariadb\n  labels:\n    app: mariadb\nspec:\n  replicas: 1\n  selector:\n    matchLabels:\n      app: mariadb\n  serviceName: directus-mariadb\n  template:\n    metadata:\n      labels:\n        app.kubernetes.io/name: mariadb\n    spec:\n      containers:\n        - name: mariadb\n          image: mariadb:10.9.7\n          ports:\n            - name: mariadb\n              containerPort: 3306\n          volumeMounts:\n            - name: data\n              mountPath: /bitnami/mariadb\n            - name: config\n              mountPath: /opt/bitnami/mariadb/conf/my.cnf\n              subPath: my.cnf\n      volumes:\n        - name: config\n          configMap:\n            name: directus-mariadb\n  volumeClaimTemplates:\n    - metadata:\n        name: data\n        labels:\n          app.kubernetes.io/instance: directus\n          app.kubernetes.io/name: mariadb\n      spec:\n        accessModes:\n          - \"ReadWriteOnce\"\n        resources:\n          requests:\n            storage: \"8Gi\"\n```\n\n----------------------------------------\n\nTITLE: Importing Required Composables and Methods in Vue.js\nDESCRIPTION: This JavaScript snippet imports necessary composables from Vue.js and methods from the Directus SDK for authentication and realtime functionality.\nSOURCE: https://github.com/directus/docs/blob/main/content/tutorials/2.projects/build-a-multi-user-chat-with-vue-js-and-directus-realtime.md#2025-04-09_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nimport { onMounted, ref, onBeforeUnmount } from 'vue';\nimport { authentication, createDirectus, realtime } from '@directus/sdk';\n```\n\n----------------------------------------\n\nTITLE: Vue Component Imports\nDESCRIPTION: Required Vue and Directus SDK imports for the module component.\nSOURCE: https://github.com/directus/docs/blob/main/content/tutorials/5.extensions/implement-navigation-in-multipage-custom-modules.md#2025-04-09_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nimport { ref, watch } from 'vue';\nimport { useApi } from '@directus/extensions-sdk';\n```\n\n----------------------------------------\n\nTITLE: Initializing Directus SDK\nDESCRIPTION: Creates a Directus client instance using the SDK for making API requests.\nSOURCE: https://github.com/directus/docs/blob/main/content/tutorials/1.getting-started/rendering-dynamic-blocks-using-sveltekit.md#2025-04-09_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\n// src/lib/directus.js\nimport { createDirectus, rest } from '@directus/sdk';\n\nconst directus = createDirectus('http://localhost:8055/').with(rest());\n\nexport default directus;\n```\n\n----------------------------------------\n\nTITLE: Implementing Hook Entrypoint in Directus\nDESCRIPTION: Example of a basic hook entrypoint file that registers both filter and action event listeners for item creation events in Directus.\nSOURCE: https://github.com/directus/docs/blob/main/content/guides/9.extensions/2.api-extensions/1.hooks.md#2025-04-09_snippet_0\n\nLANGUAGE: js\nCODE:\n```\nexport default ({ filter, action }) => {\n\tfilter('items.create', () => {\n\t\tconsole.log('Creating Item!');\n\t});\n\n\taction('items.create', () => {\n\t\tconsole.log('Item created!');\n\t});\n};\n```\n\n----------------------------------------\n\nTITLE: Implementing Main Module Component in Vue\nDESCRIPTION: This Vue component represents the main module view. It handles page rendering, navigation, and dynamic content loading based on the current route. It uses the Directus API to fetch assets and implements a responsive layout.\nSOURCE: https://github.com/directus/docs/blob/main/content/tutorials/5.extensions/implement-navigation-in-multipage-custom-modules.md#2025-04-09_snippet_16\n\nLANGUAGE: vue\nCODE:\n```\n<template>\n  <private-view :title=\"page_title\">\n    <template v-if=\"breadcrumb\" #headline>\n      <v-breadcrumb :items=\"breadcrumb\" />\n    </template>\n\n    <template #navigation>\n      <page-navigation :current=\"page\" :pages=\"all_pages\"/>\n    </template>\n\n    <div class=\"lp-container\">\n      <div class=\"lp-banner\" v-if=\"page_banner\">\n        <img :src=\"page_banner\" alt=\"\"/>\n      </div>\n      <div class=\"lp-cards\" v-if=\"page_cards\">\n        <div class=\"lp-card\" v-for=\"card in page_cards.filter(item => (item.uri != page))\" :key=\"card.uri\" :style=\"`background-color: ${card.color}`\" @click=\"change_page(card.to)\">\n          <v-icon :name=\"card.icon\"/>\n          <span class=\"lp-card-title\">{{ card.label }}</span>\n        </div>\n      </div>\n      <div class=\"lp-body\" v-if=\"page_body\" v-html=\"page_body\"></div>\n    </div>\n\n    <router-view name=\"landing-page\" :page=\"page\" />\n  </private-view>\n</template>\n\n<script>\nimport { ref, watch } from 'vue';\nimport { useApi } from '@directus/extensions-sdk';\nimport { useRouter } from 'vue-router';\nimport PageNavigation from './components/navigation.vue';\nimport useDirectusToken from './use-directus-token.js';\n\nexport default {\n  components: {\n    PageNavigation,\n  },\n  props: {\n    page: {\n      type: String,\n      default: 'home',\n    },\n  },\n  setup(props) {\n    const router = useRouter();\n    const api = useApi();\n    const { addTokenToURL } = useDirectusToken(api);\n    const page_title = ref('');\n    const page_banner = ref('');\n    const page_cards = ref([]);\n    const page_body = ref('');\n    const breadcrumb = ref([\n            {\n                name: 'Home',\n                to: `/landing-page`,\n            },\n        ]);\n    const all_pages = ref([]);\n\n    render_page(props.page);\n    fetch_all_pages();\n\n    watch(\n            () => props.page,\n            () => {\n                render_page(props.page);\n            }\n        );\n\n    function change_page(to){\n      const next = router.resolve(`${to}`);\n      router.push(next);\n    }\n\n    return { page_title, page_banner, page_cards, page_body, breadcrumb, all_pages, change_page };\n\n    function render_page(page){\n      if(page === null){\n        page_title.value = '500: Internal Server Error';\n        breadcrumb.value.splice(1, 1);\n        page_banner.value = '';\n        page_cards.value = [];\n        page_body.value = '';\n      } else {\n        switch(page) {\n          case 'home':\n            page_title.value = 'Home';\n            page_banner.value = addTokenToURL('/assets/83BD365C-C3CE-4015-B2AD-63EDA9E52A69?width=2000&height=563&fit=cover');\n            page_cards.value = all_pages.value;\n            page_body.value = '<p>Lorem ipsum dolor sit amet.</p>';\n            break;\n          case 'hello-world':\n            page_title.value = 'Hello World';\n            page_banner.value = addTokenToURL('/assets/853B243D-A1BF-6051-B1BF-23EDA8E32A09?width=2000&height=563&fit=cover');\n            page_cards.value = all_pages.value;\n            page_body.value = '<p>Lorem ipsum dolor sit amet.</p>';\n            break;\n          case 'contact':\n            page_title.value = 'Contact Us';\n            page_banner.value = addTokenToURL('/assets/91CE173D-A1AD-4104-A1EC-74FCB8F41B58?width=2000&height=563&fit=cover');\n            page_cards.value = [];\n            page_body.value = '<p>Lorem ipsum dolor sit amet.</p>';\n            break;\n          default:\n            page_title.value = '404: Not Found';\n        }\n\n        if(page === 'home'){\n          breadcrumb.value.splice(1, 1);\n        } else {\n          breadcrumb.value[1] = {\n            name: page_title.value,\n            to: `/landing-page/${page}`,\n          };\n        }\n      }\n    }\n\n    function fetch_all_pages(){\n      all_pages.value = [\n        {\n          label: 'Home',\n          uri: 'landing-page',\n          to: '/landing-page',\n          icon: 'home',\n          color: '#6644FF',\n        },\n        {\n          label: 'Hello World',\n          uri: 'hello-world',\n          to: '/landing-page/hello-world',\n          icon: 'public',\n          color: '#2ECDA7',\n        },\n        {\n          label: 'Contact Us',\n          uri: 'contact',\n          to: '/landing-page/contact',\n          icon: 'phone',\n          color: '#3399FF',\n        },\n      ];\n      console.log(all_pages.value);\n    }\n  },\n};\n</script>\n\n<style lang=\"scss\">\n  .lp-container {\n    padding: var(--content-padding);\n    padding-top: 0;\n    width: 100%;\n    max-width: 1024px;\n\n    &> div {\n      margin-bottom: var(--content-padding);\n    }\n  }\n\n  .lp-banner {\n    border-radius: var(--border-radius);\n    overflow: hidden;\n\n    img {\n      display: block;\n      width: 100%;\n    }\n  }\n\n  .lp-cards {\n    display: grid;\n    grid-template-columns: repeat(4, 1fr);\n    column-gap: var(--input-padding);\n      row-gap: var(--input-padding);\n\n    .lp-card {\n      display: flex;\n      flex-wrap: wrap;\n      align-items: center;\n      justify-content: center;\n      text-align: center;\n      border-radius: var(--border-radius);\n      padding: var(--input-padding);\n      color: white;\n\n      .v-icon {\n        width: 100%;\n        height: 50px;\n        margin-bottom: 6px;\n\n        i {\n          font-size: 50px;\n            color: white;\n        }\n      }\n\n      .lp-card-title {\n        display: block;\n        font-weight: bold;\n        font-size: 1.4em;\n        line-height: 1.2;\n      }\n    }\n  }\n</style>\n```\n\n----------------------------------------\n\nTITLE: Blog Posts List Component\nDESCRIPTION: SolidJS component for rendering a list of blog posts with author information\nSOURCE: https://github.com/directus/docs/blob/main/content/tutorials/1.getting-started/fetch-data-from-directus-with-solidstart.md#2025-04-09_snippet_7\n\nLANGUAGE: jsx\nCODE:\n```\nimport { A, createAsync } from \"@solidjs/router\";\nimport { For, Show, createEffect } from \"solid-js\";\nimport { getPosts } from \"~/libs/directus\";\nexport const route = {\n  load: () => getPosts,\n};\nexport default function PostsList() {\n  const list = createAsync(getPosts);\n  return (\n    <Show when={list()}>\n      {(posts) => (\n        <ul>\n          <For each={posts()}>\n            {(post) => (\n              <li>\n                <A href={`/blog/${post.slug}`}>\n                  <h2>{post.title}</h2>\n                </A>\n                <span>\n                  {post.publish_date} &bull; {post.author.name}\n                </span>\n              </li>\n            )}\n          </For>\n        </ul>\n      )}\n    </Show>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Rendering an Image with Alt Text from Directus\nDESCRIPTION: A template snippet showing how to render an image with its alt text from data fetched from Directus. It uses the image ID as the source and falls back to an empty string if no description is available.\nSOURCE: https://github.com/directus/docs/blob/main/content/tutorials/3.tips-and-tricks/search-engine-optimization-best-practices.md#2025-04-09_snippet_11\n\nLANGUAGE: html\nCODE:\n```\n<!-- Inside your template -->\n<img src={post.image.id} alt={post.image.description ?? \"\"} />\n```\n\n----------------------------------------\n\nTITLE: Clarifai API Request Body Structure\nDESCRIPTION: JSON structure for making an image recognition request to Clarifai's API, including the image URL from Directus assets.\nSOURCE: https://github.com/directus/docs/blob/main/content/tutorials/7.workflows/tag-images-with-clarifai-and-directus-automate.md#2025-04-09_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n\t\"inputs\": [\n    \t{\n        \t\"data\": {\n            \t\"image\": {\n                \t\"url\": \"YOUR-DIRECTUS-PROJECT-URL/assets/{{$trigger.key}}\"\n                }\n            }\n        }\n    ]\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Main Activity for Directus App\nDESCRIPTION: Sets up the main activity class to integrate the BlogHomeScreen composable within the app's theme and surface container.\nSOURCE: https://github.com/directus/docs/blob/main/content/tutorials/1.getting-started/fetch-data-from-directus-in-android-with-kotlin.md#2025-04-09_snippet_6\n\nLANGUAGE: kotlin\nCODE:\n```\npackage com.example.directusapp\n\nimport android.os.Bundle\nimport androidx.activity.ComponentActivity\nimport androidx.activity.compose.setContent\nimport androidx.compose.foundation.layout.fillMaxSize\nimport androidx.compose.material3.MaterialTheme\nimport androidx.compose.material3.Surface\nimport androidx.compose.material3.Text\nimport androidx.compose.runtime.Composable\nimport androidx.compose.ui.Modifier\nimport androidx.compose.ui.tooling.preview.Preview\nimport com.example.directusapp.ui.BlogHomeScreen\nimport com.example.directusapp.ui.theme.DirectusAppTheme\n\nclass directusapp : ComponentActivity() {\n    override fun onCreate(savedInstanceState: Bundle?) {\n        super.onCreate(savedInstanceState)\n        setContent {\n            DirectusAppTheme {\n                // A surface container using the 'background' color from the theme\n                Surface(\n                    modifier = Modifier.fillMaxSize(),\n                    color = MaterialTheme.colorScheme.background\n                ) {\n                    BlogHomeScreen()\n                }\n            }\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a Reusable Authentication Form Component in Astro\nDESCRIPTION: Implements a flexible authentication form component that can be used for both login and registration in an Astro application.\nSOURCE: https://github.com/directus/docs/blob/main/content/tutorials/1.getting-started/using-authentication-in-astro.md#2025-04-09_snippet_3\n\nLANGUAGE: astro\nCODE:\n```\n---\ninterface Props {\n  type: \"login\" | \"register\";\n  action: string;\n}\n\nconst { type, action } = Astro.props;\nconst isLogin = type === \"login\";\n---\n\n<div>\n  <h1>{isLogin ? \"Login\" : \"Register\"}</h1>\n  <form method=\"POST\" action={action}>\n    {!isLogin && (\n      <>\n        <label for=\"firstName\">First Name</label>\n        <input\n          type=\"text\"\n          id=\"firstName\"\n          name=\"firstName\"\n          required\n        />\n\n        <label for=\"lastName\">Last Name</label>\n        <input\n          type=\"text\"\n          id=\"lastName\"\n          name=\"lastName\"\n          required\n        />\n      </>\n    )}\n\n    <label for=\"email\">Email</label>\n    <input\n      type=\"email\"\n      id=\"email\"\n      name=\"email\"\n      required\n    />\n\n    <label for=\"password\">Password</label>\n    <input\n      type=\"password\"\n      id=\"password\"\n      name=\"password\"\n      required\n    />\n\n    <button type=\"submit\">{isLogin ? \"Sign in\" : \"Register\"}</button>\n    {isLogin ? (\n      <p>\n        Don't have an account?\n        <a href=\"/register\">Register</a>\n      </p>\n    ) : (\n      <p>\n        Have an account? <a href=\"/login\">Login</a>\n      </p>\n    )}\n  </form>\n</div>\n```\n\n----------------------------------------\n\nTITLE: Installing Directus SDK in Nuxt\nDESCRIPTION: Command to install the Directus SDK package as a dependency in a Nuxt project.\nSOURCE: https://github.com/directus/docs/blob/main/content/tutorials/1.getting-started/using-authentication-in-nuxt.md#2025-04-09_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nnpm install @directus/sdk\n```\n\n----------------------------------------\n\nTITLE: Setting Environment Variables for Directus to Connect to MariaDB\nDESCRIPTION: YAML snippet showing how to set environment variables in a Directus Deployment to connect to the MariaDB service. It specifies the database port and hostname.\nSOURCE: https://github.com/directus/docs/blob/main/content/tutorials/6.self-hosting/understanding-kubernetes.md#2025-04-09_snippet_8\n\nLANGUAGE: yaml\nCODE:\n```\nenv:\n  - name: DB_PORT\n    value: \"3306\"\n  - name: DB_HOST\n    value: directus-mariadb\n```\n\n----------------------------------------\n\nTITLE: Rendering Dynamic Links in HTML Templates\nDESCRIPTION: HTML template snippet demonstrating how to use the getUrl function to render the appropriate link URL with the link label. This approach ensures links remain valid even when content slugs or permalinks change.\nSOURCE: https://github.com/directus/docs/blob/main/content/tutorials/3.tips-and-tricks/search-engine-optimization-best-practices.md#2025-04-09_snippet_5\n\nLANGUAGE: html\nCODE:\n```\n<!-- Inside your template -->\n<a href=\"{getUrl(item)}\">{item.link_label}</a>\n```\n\n----------------------------------------\n\nTITLE: Non-JS Environment Implementation\nDESCRIPTION: Example of implementing visual editing in non-Node.js environments using direct script inclusion.\nSOURCE: https://github.com/directus/docs/blob/main/content/guides/2.content/8.visual-editor/1.frontend-library.md#2025-04-09_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\n<script src=\"path-to/visual-editing.js\" type=\"text/javascript\"></script>\n```\n\nLANGUAGE: javascript\nCODE:\n```\n<script type=\"text/javascript\">\n\tdocument.addEventListener('DOMContentLoaded', function () {\n\t\tDirectusVisualEditing.apply({ directusUrl: 'http://localhost:8000' });\n\t});\n</script>\n```\n\n----------------------------------------\n\nTITLE: API Integration Example\nDESCRIPTION: Example of integrating API calls for page data retrieval.\nSOURCE: https://github.com/directus/docs/blob/main/content/tutorials/5.extensions/implement-navigation-in-multipage-custom-modules.md#2025-04-09_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\napi.get(`/items/pages?fields=title&filter[uri][_eq]=${page}`).then((rsp) => {\n    if(rsp.data.data){\n        rsp.data.data.forEach(item => {\n            page_title.value = item.title;\n        });\n    } else {\n        page_title.value = \"404: Not Found\";\n    }\n}).catch((error) => {\n    console.log(error);\n});\n```\n\n----------------------------------------\n\nTITLE: Creating and Throwing Custom Errors with @directus/errors in Directus API Extensions\nDESCRIPTION: This snippet demonstrates how to create and throw custom errors in Directus API extensions using the @directus/errors package, which is available to all extensions without installation. It shows how to define a custom ForbiddenError with a specific message and HTTP status code.\nSOURCE: https://github.com/directus/docs/blob/main/content/_partials/extensions-api-internals.md#2025-04-09_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport { createError } from '@directus/errors';\n\nconst ForbiddenError = createError('FORBIDDEN', \"You don't have permissions to see this.\", 403);\n\nthrow new ForbiddenError();\n```\n\n----------------------------------------\n\nTITLE: Implementing User Registration API Route in Astro\nDESCRIPTION: Creates an API route to handle user registration using Directus SDK, including automatic login after successful registration.\nSOURCE: https://github.com/directus/docs/blob/main/content/tutorials/1.getting-started/using-authentication-in-astro.md#2025-04-09_snippet_4\n\nLANGUAGE: ts\nCODE:\n```\nimport type { APIRoute } from \"astro\";\nimport client from \"../../../lib/directus\";\nimport { registerUser } from \"@directus/sdk\";\n\nexport const POST: APIRoute = async ({ request, cookies, redirect }) => {\n  const formData = await request.formData();\n  const firstName = formData.get('firstName') as string;\n  const lastName = formData.get('lastName') as string;\n  const email = formData.get(\"email\") as string;\n  const password = formData.get('password') as string;\n\n  if (!firstName || !lastName ||!email || !password) {\n    return new Response(\"All fields are required\", { status: 400 });\n  }\n\n  try {\n    const response = await client.request(registerUser(email, password, { first_name: firstName, last_name: lastName }));\n\n    // Auto-login the user if registration is successful\n    const loginResponse = await client.login(email, password);\n    if (loginResponse.access_token) {\n    cookies.set('directus_access_token', loginResponse.access_token);\n  }\n  } catch (error: any) {\n    const message = error?.errors?.[0]?.message || 'Registration failed';\n    return new Response(message, { status: 500 });\n  }\n  return redirect(\"/dashboard\");\n};\n```\n\n----------------------------------------\n\nTITLE: Initializing Directus Client with SDK\nDESCRIPTION: JavaScript code to create a Directus client instance using the SDK with the REST transport.\nSOURCE: https://github.com/directus/docs/blob/main/content/tutorials/1.getting-started/using-authentication-in-react.md#2025-04-09_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nimport { createDirectus, rest } from '@directus/sdk';\nconst client = createDirectus('directus_project_url').with(rest());\n```\n\n----------------------------------------\n\nTITLE: Indexing Created Items in Elasticsearch (JavaScript)\nDESCRIPTION: This hook action is triggered when a new item is created in the 'books' collection. It indexes the new item in Elasticsearch using the item's ID and payload data.\nSOURCE: https://github.com/directus/docs/blob/main/content/tutorials/5.extensions/integrate-elasticsearch-indexing-with-custom-hooks.md#2025-04-09_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\naction(\"books.items.create\", async (meta) => {\n  await client.index({\n    index: \"books\",\n    id: meta.key,\n    document: meta.payload,\n  });\n});\n```\n\n----------------------------------------\n\nTITLE: Managing Authentication Tokens for Directus in Swift\nDESCRIPTION: A utility structure for managing authentication tokens in a Directus application. The TokenManager provides methods to save and retrieve both access and refresh tokens using UserDefaults for persistent storage between app sessions.\nSOURCE: https://github.com/directus/docs/blob/main/content/tutorials/1.getting-started/implement-directus-auth-with-ios.md#2025-04-09_snippet_4\n\nLANGUAGE: swift\nCODE:\n```\nimport Foundation\n\nstruct TokenManager {\n    static let accessTokenKey = \"accessToken\"\n    static let refreshTokenKey = \"refreshToken\"\n\n    static func saveToken(_ accessToken: String) {\n        UserDefaults.standard.set(accessToken, forKey: accessTokenKey)\n\n\n\n    static func saveRefreshToken(_ refreshToken: String) {\n        UserDefaults.standard.set(refreshToken, forKey: refreshTokenKey)\n    }\n\n    static func getToken() -> String? {\n        return UserDefaults.standard.string(forKey: accessTokenKey)\n    }\n\n    static func getRefreshToken() -> String? {\n        return UserDefaults.standard.string(forKey: refreshTokenKey)\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Fetching and Resolving Dynamic URLs with Directus SDK\nDESCRIPTION: JavaScript code that fetches content data from Directus API, including related content for links, and defines a utility function to determine the correct URL based on the link type (page, post, or external).\nSOURCE: https://github.com/directus/docs/blob/main/content/tutorials/3.tips-and-tricks/search-engine-optimization-best-practices.md#2025-04-09_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nconst post = await client.request(\n    readItem('your_content_collection', 'your_content_item_id', {\n        fields: [\n            // Fetch all the other root level fields for your collection **In production, you should only fetch the fields you need**\n            '*',\n            'link_type',\n            'link_label',\n            'external_url',\n            // Use object syntax to fetch fields from a relation\n            {\n                page: ['id', 'title', 'permalink'],\n                post: ['id', 'title', 'slug'],\n            },\n        ],\n    }),\n)\n\nfunction getUrl(item) {\n    if (item.link_type === 'pages') {\n        return item.page.permalink ?? ''\n    } else if (item.link_type === 'posts') {\n        return `/blog/${item.post.slug}` ?? ''\n    } else if (item.link_type === 'external') {\n        return item.external_url ?? ''\n    }\n    return undefined\n}\n```\n\n----------------------------------------\n\nTITLE: Customizing Visual Editing with CSS Variables\nDESCRIPTION: Default CSS variables used by the Directus Visual Editing library that can be overridden to customize the appearance of editable elements, including z-index, borders, colors, and button styling.\nSOURCE: https://github.com/directus/docs/blob/main/content/guides/2.content/8.visual-editor/3.customization.md#2025-04-09_snippet_1\n\nLANGUAGE: css\nCODE:\n```\n:root {\n\t--directus-visual-editing--overlay--z-index: 999999999;\n\t--directus-visual-editing--rect--border-spacing: 9px;\n\t--directus-visual-editing--rect--border-width: 2px;\n\t--directus-visual-editing--rect--border-color: #6644ff;\n\t--directus-visual-editing--rect--border-radius: 6px;\n\t--directus-visual-editing--rect-highlight--opacity: 0.333;\n\t--directus-visual-editing--edit-btn--width: 28px;\n\t--directus-visual-editing--edit-btn--height: 28px;\n\t--directus-visual-editing--edit-btn--radius: 50%;\n\t--directus-visual-editing--edit-btn--bg-color: #6644ff;\n\t--directus-visual-editing--edit-btn--icon-bg-image: url('data:image/svg+xml,<svg>…</svg>');\n\t--directus-visual-editing--edit-btn--icon-bg-size: 66.6%;\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Function to Display Messages in UI\nDESCRIPTION: Defines a function that appends new messages to the ordered list in the HTML. It creates a list item for each message showing the sender's first name and message text.\nSOURCE: https://github.com/directus/docs/blob/main/content/tutorials/2.projects/build-a-multi-user-chat-with-javascript-and-directus-realtime.md#2025-04-09_snippet_12\n\nLANGUAGE: javascript\nCODE:\n```\nfunction addMessageToList(message) {\n\tconst li = document.createElement('li');\n\tli.setAttribute('id', message.id);\n\tli.textContent = `${message.user_created.first_name}: ${message.text}`;\n\tdocument.querySelector('ol').appendChild(li);\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Logout Functionality with Astro API Route\nDESCRIPTION: This API route handles user logout by deleting the Directus session token cookie and redirecting the user to the login page. It provides a clean way to terminate user sessions.\nSOURCE: https://github.com/directus/docs/blob/main/content/tutorials/1.getting-started/using-authentication-in-astro.md#2025-04-09_snippet_11\n\nLANGUAGE: typescript\nCODE:\n```\nimport type { APIRoute } from \"astro\";\n\nexport const GET: APIRoute = async ({ cookies, redirect }) => {\n  cookies.delete(\"directus_session_token\", { path: \"/\" });\n  return redirect(\"/login\");\n};\n```\n\n----------------------------------------\n\nTITLE: Configuring Environment Variables for Okta SSO in Directus\nDESCRIPTION: A set of environment variables required to set up Okta SSO integration with Directus. These variables define the authentication provider, driver type, user registration settings, default role assignment, and attribute mapping for user identification and profile data.\nSOURCE: https://github.com/directus/docs/blob/main/content/tutorials/6.self-hosting/configure-okta-as-a-single-sign-on-provider.md#2025-04-09_snippet_0\n\nLANGUAGE: env\nCODE:\n```\nAUTH_PROVIDERS=okta\nAUTH_OKTA_DRIVER=saml\nAUTH_OKTA_ALLOW_PUBLIC_REGISTRATION=true\nAUTH_OKTA_DEFAULT_ROLE_ID=Look in the database\nAUTH_OKTA_IDENTIFIER_KEY=email\nAUTH_OKTA_EMAIL_KEY=email\nAUTH_OKTA_GIVEN_NAME_KEY=first_name\nAUTH_OKTA_FAMILY_NAME_KEY=last_name\n```\n\n----------------------------------------\n\nTITLE: Initializing a Directus Panel Extension\nDESCRIPTION: Command to create a new Directus panel extension using npx. This creates the boilerplate code necessary for developing a custom panel.\nSOURCE: https://github.com/directus/docs/blob/main/content/tutorials/5.extensions/create-collection-items-in-custom-panels.md#2025-04-09_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nnpx create-directus-extension@latest\n```\n\n----------------------------------------\n\nTITLE: Creating a Next.js Project and Installing Dependencies\nDESCRIPTION: Terminal commands to create a new Next.js project with Tailwind CSS, install the Directus SDK, and start the development server.\nSOURCE: https://github.com/directus/docs/blob/main/content/tutorials/3.tips-and-tricks/implement-pagination-and-infinite-scrolling-in-next-js-.md#2025-04-09_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nnpx create-next-app@latest\n✔ What is your project named? next-directus-app\n✔ Would you like to use TypeScript? No\n✔ Would you like to use ESLint? Yes\n✔ Would you like to use Tailwind CSS? Yes\n✔ Would you like to use `src/` directory? No\n✔ Would you like to use App Router? (recommended) Yes\n✔ Would you like to use Turbopack for next dev? No\n✔ Would you like to customize the default import alias (@/*)? No\n\ncd next-directus-app\nnpm install @directus/sdk\nnpm run dev\n```\n\n----------------------------------------\n\nTITLE: Unsubscribing from GraphQL Subscriptions in JavaScript\nDESCRIPTION: Use the 'dispose' method of the GraphQL client to unsubscribe from all active subscriptions and stop receiving updates.\nSOURCE: https://github.com/directus/docs/blob/main/content/guides/7.realtime/2.subscriptions.md#2025-04-09_snippet_10\n\nLANGUAGE: javascript\nCODE:\n```\nclient.dispose();\n```\n\n----------------------------------------\n\nTITLE: Script Operation Data Chain Example\nDESCRIPTION: Example showing the input data structure for a script operation in the data chain.\nSOURCE: https://github.com/directus/docs/blob/main/content/guides/6.automate/4.operations.md#2025-04-09_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n\t\"previousOperation\": {\n\t\t\"value\": 5\n\t}\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Rich Text Component in Astro\nDESCRIPTION: Astro component for rendering a rich text block with headline and content from Directus CMS.\nSOURCE: https://github.com/directus/docs/blob/main/content/tutorials/1.getting-started/rendering-dynamic-blocks-using-astro.md#2025-04-09_snippet_5\n\nLANGUAGE: astro\nCODE:\n```\n---\nconst { headline = '', content = '' } = Astro.props.item || {};\n---\n\n<section>\n  {headline && <h1>{headline}</h1>}\n  {content && <p set:html={content} />}\n</section>\n```\n\n----------------------------------------\n\nTITLE: Fetching and Displaying Posts in Astro Dashboard\nDESCRIPTION: This Astro component fetches and displays posts from Directus on the dashboard page. It first verifies user authentication, then retrieves the user's information and all posts, displaying them with edit links for each post.\nSOURCE: https://github.com/directus/docs/blob/main/content/tutorials/1.getting-started/using-authentication-in-astro.md#2025-04-09_snippet_16\n\nLANGUAGE: astro\nCODE:\n```\n---\nimport client from '../../lib/directus';\nimport { rest, readMe, withToken, readItems, refresh } from '@directus/sdk';\nimport Layout from '../../layouts/Layout.astro';\n\nconst token = Astro.cookies.get(\"directus_session_token\");\n\nif (!token) {\n  return Astro.redirect(\"/login\");\n}\nconst response = await client.request(readMe())\n\nconst userId = response.id\nconst posts = await client.request(readItems('posts'));\n\n---\n{\n  userId ? (\n    <Layout>\n      <h1>Dashboard</h1>\n      <p>User ID: {userId}</p>\n      {\n    posts && posts.map((post) => (\n      <div>\n        <h2>{post.title}</h2>\n        <p>{post.content}</p>\n        <a href={`/dashboard/posts/${post.id}`}>edit post</a>\n      </div>\n    ))\n  }\n    </Layout>\n  ): Astro.redirect(\"/login\")\n}\n```\n\n----------------------------------------\n\nTITLE: Generated HTML Attribute Example\nDESCRIPTION: Example of the generated HTML with data-directus attribute for visual editing.\nSOURCE: https://github.com/directus/docs/blob/main/content/guides/2.content/8.visual-editor/1.frontend-library.md#2025-04-09_snippet_2\n\nLANGUAGE: html\nCODE:\n```\n<h1 data-directus=\"collection:posts;item:12;fields:title;mode:popover\">\n  I Love Visual Editing\n</h1>\n```\n\n----------------------------------------\n\nTITLE: Refreshing Authentication Tokens with Directus SDK\nDESCRIPTION: This snippet demonstrates how to refresh expired authentication tokens using the Directus SDK. It shows three approaches: using the authentication composable, refreshing with a cookie, and refreshing with a JSON refresh token.\nSOURCE: https://github.com/directus/docs/blob/main/content/tutorials/1.getting-started/using-authentication-in-next-js.md#2025-04-09_snippet_10\n\nLANGUAGE: typescript\nCODE:\n```\nimport { createDirectus, authentication, rest, refresh } from '@directus/sdk';\n\nconst client = createDirectus('directus_project_url').with(authentication()).with(rest());\n\n// refresh using the authentication composable\nconst result = await client.refresh();\n\n// refresh http request using a cookie\nconst result = await client.request(refresh('cookie'));\n\n// refresh http request using json\nconst result = await client.request(refresh('json', refresh_token));\n```\n\n----------------------------------------\n\nTITLE: Creating a Simple Home Component\nDESCRIPTION: Basic React component for the home page, which will be rendered at the root URL.\nSOURCE: https://github.com/directus/docs/blob/main/content/tutorials/1.getting-started/implementing-live-preview-in-react.md#2025-04-09_snippet_8\n\nLANGUAGE: jsx\nCODE:\n```\nconst Home = () => {\n    return <div>Home page</div>\n}\n\nexport default Home\n```\n\n----------------------------------------\n\nTITLE: Dynamic Route Data Fetching with Directus\nDESCRIPTION: Implementation of getStaticProps for dynamic routes using Directus SDK to fetch individual blog posts\nSOURCE: https://github.com/directus/docs/blob/main/content/tutorials/4.migration/migrate-from-notion-to-directus.md#2025-04-09_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nexport const getStaticProps = async (context) => {\n  const blogId = context.params?.blogId;\n  const directus = new Directus(process.env.DIRECTUS_URL);\n  const blog = await directus.items('blogs').readOne(blogId);\n  blog.image = `${process.env.DIRECTUS_URL}assets/${blog.image}`;\n  return {\n    props: { blog },\n  };\n};\n```\n\n----------------------------------------\n\nTITLE: Using Global Variables in Directus Dashboard Panels\nDESCRIPTION: Shows how to reference a global variable in other Insights panels using double-mustache syntax. This allows for dynamic content that updates across all panels when the variable changes.\nSOURCE: https://github.com/directus/docs/blob/main/content/guides/8.insights/2.panels.md#2025-04-09_snippet_0\n\nLANGUAGE: handlebars\nCODE:\n```\n{{ your_variable_key }}\n```\n\n----------------------------------------\n\nTITLE: Extending Base Template in Django Child Templates\nDESCRIPTION: This snippet demonstrates how to extend a base template in individual Django page templates. By using the extends tag, child templates inherit the navigation and structure from the base template and can fill in the content block.\nSOURCE: https://github.com/directus/docs/blob/main/content/tutorials/1.getting-started/fetch-data-from-directus-with-django.md#2025-04-09_snippet_17\n\nLANGUAGE: python\nCODE:\n```\n{% extends 'base.html' %}\n\n{% block content %}\n{% endblock %}\n```\n\n----------------------------------------\n\nTITLE: Configuring CORS in Directus docker-compose.yml\nDESCRIPTION: Example configuration for setting Content Security Policy in a docker-compose.yml file to allow cross-origin requests from a Nuxt application to Directus.\nSOURCE: https://github.com/directus/docs/blob/main/content/tutorials/1.getting-started/using-authentication-in-nuxt.md#2025-04-09_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nenvironment:\n  CONTENT_SECURITY_POLICY_DIRECTIVES__FRAME_SRC: your-website-url\n```\n\n----------------------------------------\n\nTITLE: Implementing Feedback Widget Template in Vue.js\nDESCRIPTION: This snippet shows the Vue template for a multi-step feedback widget. It includes rating buttons, a comment textarea, and success message, with conditional rendering based on user interaction.\nSOURCE: https://github.com/directus/docs/blob/main/content/tutorials/2.projects/build-a-user-feedback-widget-with-vue-js-.md#2025-04-09_snippet_4\n\nLANGUAGE: vue\nCODE:\n```\n<template>\n\t<div class=\"wrapper\">\n\t\t<div v-if=\"!feedback.rating\" class=\"step\">\n\t\t\t<!-- Step 1. Show Rating Buttons -->\n\t\t\t<div>\n\t\t\t\t<p class=\"desc\">How can we improve?</p>\n\t\t\t\t<p class=\"heading\">How helpful was this article?</p>\n\t\t\t</div>\n\t\t\t<div class=\"button-container\">\n\t\t\t\t\t<button v-for=\"item in ratingOptions\" :key=\"item.value\" class=\"btn\">\n\t\t\t\t\t\t<span>{{ item.label }}</span>\n\t\t\t\t\t</button>\n\t\t\t</div>\n\t\t</div>\n\t\t<div v-else-if=\"feedback.rating && !success\" class=\"step\">\n\t\t\t<!-- Step 2. Ask for Comments -->\n\t\t\t\t<div>\n\t\t\t\t\t<p class=\"desc\">This article is</p>\n\t\t\t\t\t<div>\n\t\t\t\t\t\t<span>{{ getRatingOption(feedback.rating)?.label }}</span>\n\t\t\t\t\t\t<button class=\"btn\" @click=\"feedback.rating = undefined\">\n\t\t\t\t\t\t\t❌\n\t\t\t\t\t\t</button>\n\t\t\t\t\t</div>\n\t\t\t\t</div>\n\t\t\t\t<p class=\"heading\">{{ getRatingOption(feedback.rating)?.message }}</p>\n\t\t\t\t<textarea v-model=\"feedback.comments\" autofocus class=\"input\" />\n\t\t\t\t<button class=\"btn btn-primary\" :disabled=\"!feedback.comments\">\n\t\t\t\t\tSend Us Your Feedback\n\t\t\t\t</button>\n\t\t</div>\n\t\t<div v-else class=\"step\">\n\t\t\t<!-- Step 3. Show Success Message -->\n\t\t\t<p class=\"heading\">Thanks for your feedback!</p>\n\t\t</div>\n\t</div>\n</template>\n```\n\n----------------------------------------\n\nTITLE: Accountability Object Example in JSON\nDESCRIPTION: Example of an accountability object structure showing user authentication and request details.\nSOURCE: https://github.com/directus/docs/blob/main/content/guides/6.automate/2.data-chain.md#2025-04-09_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n{\n\t\"user\": \"4b11492d-631d-4b8a-bca7-2beasdfadf58b\",\n\t\"role\": \"12c79228-5361-4905-929b-d69d3w46trs6b\",\n\t\"admin\": true,\n\t\"app\": true,\n\t\"ip\": \"127.0.0.1\",\n\t\"userAgent\": \"Amazon CloudFront\"\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Dockerfile for Custom Directus Image with Extensions\nDESCRIPTION: This Dockerfile extends the latest Directus image to include a custom npm package. It enables corepack, switches to the node user, and installs the @directus-labs/spreadsheet-layout extension using pnpm.\nSOURCE: https://github.com/directus/docs/blob/main/content/self-hosting/5.including-extensions.md#2025-04-09_snippet_1\n\nLANGUAGE: dockerfile\nCODE:\n```\nFROM directus/directus:latest\n\nUSER root\nRUN corepack enable\nUSER node\n\nRUN pnpm install @directus-labs/spreadsheet-layout\n```\n\n----------------------------------------\n\nTITLE: Creating App Entrypoint for Directus Flow Operation in JavaScript\nDESCRIPTION: This code defines the UI configuration for a custom Flow operation, including its identifier, name, icon, description, overview display, and user-configurable options.\nSOURCE: https://github.com/directus/docs/blob/main/content/guides/9.extensions/2.api-extensions/3.operations.md#2025-04-09_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nexport default {\n\tid: 'custom',\n\tname: 'Custom',\n\ticon: 'box',\n\tdescription: 'This is my custom operation!',\n\toverview: ({ text }) => [\n\t\t{\n\t\t\tlabel: 'Text',\n\t\t\ttext: text,\n\t\t},\n\t],\n\toptions: [\n\t\t{\n\t\t\tfield: 'text',\n\t\t\tname: 'Text',\n\t\t\ttype: 'string',\n\t\t\tmeta: {\n\t\t\t\twidth: 'full',\n\t\t\t\tinterface: 'input',\n\t\t\t},\n\t\t},\n\t],\n};\n```\n\n----------------------------------------\n\nTITLE: Initializing a New Astro Project\nDESCRIPTION: Commands to create a new Astro project with minimal configuration for rendering dynamic blocks from Directus CMS.\nSOURCE: https://github.com/directus/docs/blob/main/content/tutorials/1.getting-started/rendering-dynamic-blocks-using-astro.md#2025-04-09_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpx create-astro@latest astro-dynamic-blocks\n```\n\n----------------------------------------\n\nTITLE: Creating Success Page for Order Confirmation in Next.js\nDESCRIPTION: A client-side page component that handles the post-payment success state. It retrieves the order number from URL query parameters, performs client-side rendering checks, and redirects to checkout if the order number is missing.\nSOURCE: https://github.com/directus/docs/blob/main/content/tutorials/2.projects/build-an-ecommerce-platform-with-next-js-stripe-and-directus-automate.md#2025-04-09_snippet_20\n\nLANGUAGE: tsx\nCODE:\n```\n\"use client\"\nimport { useRouter } from \"next/navigation\";\nimport { useEffect, useState } from \"react\";\nimport SuccessMessage from \"./message\";\n\ninterface SuccessPageProps {\n  searchParams?: { [key: string]: string | string[] | undefined };\n}\n\nexport default function SuccessPage({ searchParams }: SuccessPageProps) {\n  const { orderNo } = searchParams || {};\n  const router = useRouter();\n  const [isClient, setIsClient] = useState(false)\n\n  useEffect(() => {\n    setIsClient(true)\n  }, [])\n\n  if (!orderNo) {\n    router.push(\"/checkout\");\n    return null;\n  }\n  return isClient &&  (<SuccessMessage orderNo={orderNo as string} /> )\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Field Preset for Posts Collection in Directus\nDESCRIPTION: JSON configuration for setting the author field preset in the Posts collection to automatically use the current authenticated user.\nSOURCE: https://github.com/directus/docs/blob/main/content/tutorials/1.getting-started/using-authentication-in-react.md#2025-04-09_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"author\": \"$CURRENT_USER\"\n}\n```\n\n----------------------------------------\n\nTITLE: Enabling Sandbox in package.json for Directus Extension\nDESCRIPTION: This JSON snippet shows how to enable the sandbox for a Directus extension by adding the 'sandbox' object to the extension's package.json file. It specifies the extension type, paths, host version, and sandbox configuration.\nSOURCE: https://github.com/directus/docs/blob/main/content/guides/9.extensions/2.api-extensions/5.sandbox.md#2025-04-09_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n\"directus:extension\": {\n\t\"type\": \"endpoint\",\n\t\"path\": \"dist/index.js\",\n\t\"source\": \"src/index.js\",\n\t\"host\": \"^10.7.0\",\n\t\"sandbox\": {\n\t\t\"enabled\": true,\n\t\t\"requestedScopes\": {}\n\t}\n}\n```\n\n----------------------------------------\n\nTITLE: Drawing Placed Items with User Interaction in P5.js\nDESCRIPTION: This P5.js draw function renders all placed items in the garden and shows the gardener's name when hovering over an item. It uses the P5 draw loop which executes approximately 60 times per second to provide responsive real-time updates as new items are added via Directus Realtime.\nSOURCE: https://github.com/directus/docs/blob/main/content/tutorials/2.projects/build-directus-garden-a-passive-collaborative-event-booth-demo.md#2025-04-09_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\np5.draw = () => {\n  p5.background(background.value)\n  for (let place of places.value) {\n\t\t// Draw item\n    const placeable = placeables.value.find(p => p.name == place.name)\n    const x = parseInt(place.x_pos), y = parseInt(place.y_pos)\n    p5.image(placeable.image, x, y, 100 * placeable.aspect, 100)\n\n\t\t// Draw gardener name on hover\n    const mouseInBoundsX = p5.mouseX > x && p5.mouseX < x + (100 * placeable.aspect)\n    const mouseInBoundsY = p5.mouseY > y && p5.mouseY < y + 100\n    if (mouseInBoundsX && mouseInBoundsY) {\n      p5.stroke('black')\n      p5.text(`${placeable.name} by ${place.user_created.first_name}`, p5.mouseX, p5.mouseY)\n      p5.noStroke()\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Using Query Parameters in Post Component\nDESCRIPTION: Adding query parameter extraction to the Post component for preview mode detection.\nSOURCE: https://github.com/directus/docs/blob/main/content/tutorials/1.getting-started/implementing-live-preview-in-react.md#2025-04-09_snippet_11\n\nLANGUAGE: jsx\nCODE:\n```\nconst Post = () => {\n  // Add this line\n  const query = useQuery();\n  \n  // existing contents...  \n  const [article, setArticle] = useState(null);\n\n};\n```\n\n----------------------------------------\n\nTITLE: Adding Directus Extension Metadata to package.json\nDESCRIPTION: Example of adding the required 'directus:extension' object to package.json for Directus extensions. This includes specifying the extension type, file paths, and compatible Directus version range.\nSOURCE: https://github.com/directus/docs/blob/main/content/releases/3.breaking-changes/1.version-10.md#2025-04-09_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"name\": \"directus-extension-hello-world\",\n  \"version\": \"1.0.0\",\n  \"type\": \"module\",\n  \"directus:extension\": {\n    \"type\": \"endpoint\",\n    \"path\": \"dist/index.js\",\n    \"source\": \"src/index.js\",\n    \"host\": \"^10.0.0\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: OAuth Role Mapping with Developer Priority Example\nDESCRIPTION: JSON configuration example for OAuth role mapping where the developer role is assigned priority over admin role in a user with multiple group memberships.\nSOURCE: https://github.com/directus/docs/blob/main/content/configuration/auth-sso.md#2025-04-09_snippet_0\n\nLANGUAGE: json\nCODE:\n```\nAUTH_<PROVIDER>_ROLE_MAPPING: json:{ \"developer\": \"directus_developer_role_id\", \"admin\": \"directus_admin_role_id\" }\n```\n\n----------------------------------------\n\nTITLE: Password Reset Flow in Directus\nDESCRIPTION: Examples showing the password reset flow including requesting a reset and setting a new password using the reset token.\nSOURCE: https://github.com/directus/docs/blob/main/content/guides/3.auth/4.email-login.md#2025-04-09_snippet_4\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"token\": \"Xp2tTNAdLYfnaAOOjt3oetyCWtobKKUIeEXj\",\n  \"password\": \"d1r3ctu5!\"\n}\n```\n\nLANGUAGE: graphql\nCODE:\n```\nmutation {\n\tauth_password_reset(token: \"Xp2tTNAdLYfnaAOOjt3oetyCWtobKKUIeEXj\", password: \"d1r3ctu5!\")\n}\n```\n\nLANGUAGE: javascript\nCODE:\n```\nimport { createDirectus, rest, passwordReset } from '@directus/sdk';\n\nconst client = createDirectus('directus_project_url').with(rest());\n\nconst reset_token = \"Xp2tTNAdLYfnaAOOjt3oetyCWtobKKUIeEXj\";\nconst new_password = \"d1r3ctu5!\";\n\nconst result = await client.request(passwordReset(reset_token, new_password));\n```\n\n----------------------------------------\n\nTITLE: Creating Protected Route Component for Authentication\nDESCRIPTION: React component that protects routes by redirecting unauthenticated users to the login page, using React Router's Outlet component for nested routes.\nSOURCE: https://github.com/directus/docs/blob/main/content/tutorials/1.getting-started/using-authentication-in-react.md#2025-04-09_snippet_9\n\nLANGUAGE: javascript\nCODE:\n```\n// src/components/ProtectedRoute.jsx\n\nimport { Navigate, Outlet } from 'react-router-dom'\nimport PropTypes from 'prop-types'\n\nconst ProtectedRoute = ({ isAuthenticated }) => {\n    \n    return (\n        isAuthenticated ? \n        <Outlet /> : <Navigate to=\"/login\" />\n    )\n}\nProtectedRoute.propTypes = {\n    isAuthenticated: PropTypes.bool.isRequired,\n}\n\nexport default ProtectedRoute;\n```\n\n----------------------------------------\n\nTITLE: Updating Directus Collection with Generated Image in JSON\nDESCRIPTION: This JSON snippet is used in a Directus Update Data operation to save the generated image to a collection. It uses the ID from the trigger and the image ID from the previous operation.\nSOURCE: https://github.com/directus/docs/blob/main/content/tutorials/7.workflows/generate-images-with-dall-e-and-directus-automate.md#2025-04-09_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"image\": \"{{$last}}\"\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Nuxt App Template\nDESCRIPTION: Vue template configuration for the main app.vue file that enables routing with NuxtPage instead of using the default welcome component.\nSOURCE: https://github.com/directus/docs/blob/main/content/tutorials/1.getting-started/using-authentication-in-nuxt.md#2025-04-09_snippet_4\n\nLANGUAGE: vue\nCODE:\n```\n<template>\n  <div>\n    <NuxtRouteAnnouncer />\n    <NuxtPage />\n  </div>\n</template>\n```\n\n----------------------------------------\n\nTITLE: Configuring Theme Rules in Directus\nDESCRIPTION: Demonstrates how to configure nested theme rules for styling elements like border radius and navigation background. Shows the structure for defining multiple styling properties.\nSOURCE: https://github.com/directus/docs/blob/main/content/guides/9.extensions/3.app-extensions/6.themes.md#2025-04-09_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nrules: {\n\tborderRadius: '24px',\n\tnavigation: {\n\t\tbackground: 'rebeccapurple'\n\t}\n}\n```\n\n----------------------------------------\n\nTITLE: Accessing Environment Variables in Directus Flows\nDESCRIPTION: This snippet demonstrates how to access environment variables within Directus Flows using the $env object. It assumes that the FLOWS_ENV_ALLOW_LIST variable has been configured to enable access to specific environment variables.\nSOURCE: https://github.com/directus/docs/blob/main/content/configuration/flows.md#2025-04-09_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconst publicUrl = data.$env.PUBLIC_URL;\n```\n\n----------------------------------------\n\nTITLE: Configuring Docker CORS Settings for Directus\nDESCRIPTION: Docker compose configuration for enabling CORS and setting content security policy to allow iframe access for Directus preview functionality.\nSOURCE: https://github.com/directus/docs/blob/main/content/tutorials/1.getting-started/implementing-live-preview-in-sveltekit.md#2025-04-09_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n   CORS_ENABLED: \"true\"\n   CORS_ORIGIN: \"http://localhost:5173\"\n   CORS_CREDENTIALS: \"true\"\n   CONTENT_SECURITY_POLICY_DIRECTIVES__FRAME_SRC: \"http://localhost:5173\"\n```\n\n----------------------------------------\n\nTITLE: Creating a Product List Component in Next.js\nDESCRIPTION: Implements a component to display a list of products using the ProductItem component. It handles cases where there are no products to display.\nSOURCE: https://github.com/directus/docs/blob/main/content/tutorials/2.projects/build-an-ecommerce-platform-with-next-js-stripe-and-directus-automate.md#2025-04-09_snippet_10\n\nLANGUAGE: tsx\nCODE:\n```\nimport ProductItem from \"./product-item\";\nimport { ProductTypes } from \"@/types\";\n\ntype ProductListProps = {\n  products: ProductTypes[];\n};\nexport default function ProductList({ products }: ProductListProps) {\n  return (\n    <div>\n      {\n        products.length > 0 ? products.map((product) => (\n         <ProductItem {...product} key={product.id}  />\n        )) : \"No products found.\"\n      }\n    </div>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Up App Component with Routes\nDESCRIPTION: Main App component that defines the routing structure of the application, including protected routes that require authentication.\nSOURCE: https://github.com/directus/docs/blob/main/content/tutorials/1.getting-started/using-authentication-in-react.md#2025-04-09_snippet_10\n\nLANGUAGE: javascript\nCODE:\n```\n// src/App.jsx\n\nimport { useEffect, useState } from 'react';\nimport { Routes, Route } from 'react-router-dom';\nimport Home from './routes/Home';\nimport Login from './routes/Login';\nimport Register from './routes/Register';\nimport ProtectedRoute from './components/ProtectedRoute';\nimport Profile from './routes/Profile';\n\nconst App = () => {\n\n  const [isAuthenticated, setIsAuthenticated] = useState(false);\n\n  return (\n    <>\n      <Routes>\n        <Route path=\"/\" element={<Home isAuthenticated={isAuthenticated}/>} />\n        <Route element={<ProtectedRoute isAuthenticated={isAuthenticated} />} >\n          <Route path=\"/profile\" element={<Profile />} />\n        </Route>\n        <Route path=\"/login\" element={<Login setIsAuthenticated={setIsAuthenticated}/>} />\n        <Route path=\"/register\" element={<Register />} />\n      </Routes>\n    </>\n  );\n};\n\nexport default App;\n```\n\n----------------------------------------\n\nTITLE: Explaining CRON Syntax in Directus Flow Scheduling\nDESCRIPTION: A syntax explanation for the 6-point CRON job format used in Directus Flow scheduling triggers. It shows the position and valid ranges for seconds, minutes, hours, day of month, month, and day of week parameters.\nSOURCE: https://github.com/directus/docs/blob/main/content/guides/6.automate/3.triggers.md#2025-04-09_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n ┌────────────── second (0-59)\n │ ┌──────────── minute (0-59)\n │ │ ┌────────── hour (0-23)\n │ │ │ ┌──────── day of month (1-31)\n │ │ │ │ ┌────── month (1-12)\n │ │ │ │ │ ┌──── day of week (0-7)\n │ │ │ │ │ │\n │ │ │ │ │ │\n * * * * * *\n```\n\n----------------------------------------\n\nTITLE: Updating Directus Record with Stripe Customer ID\nDESCRIPTION: Using ItemsService to update the Directus customer record with the Stripe customer ID after successful customer creation in Stripe.\nSOURCE: https://github.com/directus/docs/blob/main/content/tutorials/5.extensions/create-new-customers-in-stripe-in-a-custom-hook.md#2025-04-09_snippet_8\n\nLANGUAGE: javascript\nCODE:\n```\nstripe.customers\n  .create({})\n  .then((customer) => {\n    const customers = new ItemsService(collection, { schema }); // [!code ++]\n    customers.updateByQuery({ filter: { id: key } }, { stripe_id: customer.id }, { emitEvents: false }); // [!code ++]\n  })\n  .catch((error) => {});\n```\n\n----------------------------------------\n\nTITLE: Creating a New Next.js Application with CLI\nDESCRIPTION: This command creates a new Next.js application with specific configurations. It sets up a project without Tailwind CSS, with ESLint, App Router, and Turbopack.\nSOURCE: https://github.com/directus/docs/blob/main/content/tutorials/1.getting-started/implementing-multilingual-content-using-directus-and-next.md#2025-04-09_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nnpx create-next-app \\\n  directus-next-multilingual \\\n  --js \\\n  --app \\\n  --eslint \\\n  --no-src-dir \\\n  --no-tailwind \\\n  --turbopack \\\n  --import-alias \"@/*\"\n```\n\n----------------------------------------\n\nTITLE: Script Operation Result Structure\nDESCRIPTION: Example showing the output data structure after the script operation execution.\nSOURCE: https://github.com/directus/docs/blob/main/content/guides/6.automate/4.operations.md#2025-04-09_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n{\n\t\"previousOperation\": {\n\t\t\"value\": 5\n\t},\n\t\"myScript\": {\n\t\t\"timesTwo\": 10\n\t}\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Metrics Environment Variables in Directus\nDESCRIPTION: This table outlines the environment variables used to configure metrics in Directus. It includes variables for enabling metrics, setting the schedule, defining access tokens, and specifying services to monitor.\nSOURCE: https://github.com/directus/docs/blob/main/content/configuration/metrics.md#2025-04-09_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n| Variable           | Description                                                                                                             | Default Value                  |\n| ------------------ | ----------------------------------------------------------------------------------------------------------------------- | ------------------------------ |\n| `METRICS_ENABLED`  | Whether or not to enable metrics.                                                                                       | `false`                        |\n| `METRICS_SCHEDULE` | The cron schedule at which to generate the metrics, the default is every minute                                         | `*/1 * * * *`                  |\n| `METRICS_TOKENS`   | A CSV of tokens to allow access to via a `Authorization: Metrics <token>` header. By default it is restricted to admins | --                             |\n| `METRICS_SERVICES` | A CSV of directus services to observe metrics for. Currently `database`, `cache`, `redis` and `storage` are supported   | `database,cache,redis,storage` |\n```\n\n----------------------------------------\n\nTITLE: Fetching Global Settings\nDESCRIPTION: Module to fetch global site settings from Directus singleton collection\nSOURCE: https://github.com/directus/docs/blob/main/content/tutorials/1.getting-started/fetch-data-from-directus-with-eleventy-3.md#2025-04-09_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nimport directus from './directus.js';\nimport { readSingleton } from '@directus/sdk';\n\nexport default async () => {\n    return await directus.request(readSingleton('global'))\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing JSON Authentication Mode in Directus\nDESCRIPTION: Sets up JSON-based authentication mode in Directus client, which returns access and refresh tokens in response body.\nSOURCE: https://github.com/directus/docs/blob/main/content/tutorials/1.getting-started/using-authentication-in-sveltekit.md#2025-04-09_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\nimport {createDirectus, rest,authentication} from \"@directus/sdk\";\nconst directusUrl = \"http://localhost:8055\";\nexport const client = createDirectus(directusUrl)\n .with(authentication(\"json\"))\n .with(rest());\n```\n\n----------------------------------------\n\nTITLE: Markdown Document Structure for Insights Overview\nDESCRIPTION: Basic markdown structure defining the title, description and navigation properties for the Insights module documentation page. Includes video embedding, sections for dashboards explanation, and callouts for auto-refresh functionality.\nSOURCE: https://github.com/directus/docs/blob/main/content/guides/8.insights/1.overview.md#2025-04-09_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n---\ntitle: Insights Overview\ndescription: Insights is a module in Directus that allows rapid, no-code build-out of analytics dashboards.\nnavigation:\n  title: Overview\n---\n\n:video-embed{video-id=\"20666ca0-00e3-4d71-985b-f7c4abbe3bd1\"}\n\n```\n\n----------------------------------------\n\nTITLE: Handshake Mode Authentication with Access Token\nDESCRIPTION: JSON payload for authenticating with an access token in handshake mode.\nSOURCE: https://github.com/directus/docs/blob/main/content/guides/7.realtime/1.authentication.md#2025-04-09_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n\t\"type\": \"auth\",\n\t\"access_token\": \"your-access-token\"\n}\n```\n\n----------------------------------------\n\nTITLE: Mixed Variable Usage Example in JSON\nDESCRIPTION: Demonstrates how to combine hardcoded values with data chain variables, including dot notation and array access.\nSOURCE: https://github.com/directus/docs/blob/main/content/guides/6.automate/2.data-chain.md#2025-04-09_snippet_3\n\nLANGUAGE: json\nCODE:\n```\n{\n\t\"key0\": \"a hard-coded value\",\n\t\"key1\": \"{{ $trigger.payload }}\",\n\t\"key2\": \"{{ operationKey.payload.friend_list[0] }}\"\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Redis Variables in Directus\nDESCRIPTION: Environment variables for setting up Redis in Directus. These variables control Redis connection details, including host, port, username, and password. The REDIS_ENABLED variable determines whether Redis should be used, defaulting to true if any other Redis variables are configured.\nSOURCE: https://github.com/directus/docs/blob/main/content/configuration/synchronization.md#2025-04-09_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n| Variable         | Description                                                                                                 | Default Value |\n| ---------------- | ----------------------------------------------------------------------------------------------------------- | ------------- |\n| `REDIS_ENABLED`  | Whether or not Redis should be used. Defaults to whether or not you have any of the vars below configured.  |               |\n| `REDIS`          | Redis connection string. Using this will ignore the other Redis connection parameter environment variables. |               |\n| `REDIS_HOST`     | Hostname of the Redis instance.                                                                             |               |\n| `REDIS_PORT`     | Port of the Redis instance.                                                                                 |               |\n| `REDIS_USERNAME` | Username for the Redis instance.                                                                            |               |\n| `REDIS_PASSWORD` | Password for the Redis instance.                                                                            |               |\n```\n\n----------------------------------------\n\nTITLE: Defining an Extension Entry in package.json for Directus Bundle\nDESCRIPTION: This JSON snippet shows how to define an entry for an extension within a Directus bundle's package.json file. It specifies the type, name, and source file of the extension.\nSOURCE: https://github.com/directus/docs/blob/main/content/guides/9.extensions/4.bundles.md#2025-04-09_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n\t\"type\": \"interface\",\n\t\"name\": \"my-interface\",\n\t\"source\": \"src/my-interface/index.ts\"\n}\n```\n\n----------------------------------------\n\nTITLE: Next.js Image Configuration\nDESCRIPTION: Configuration for Next.js to handle remote images from Directus\nSOURCE: https://github.com/directus/docs/blob/main/content/tutorials/2.projects/build-an-ecommerce-platform-with-next-js-stripe-and-directus-automate.md#2025-04-09_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nconst nextConfig = {\n  images: {\n    remotePatterns: [\n      {\n        protocol: 'http',\n        hostname: 'localhost',\n        port: '8055',\n        pathname: '/assets/**',\n      },\n    ],\n  },\n};\n\nexport default nextConfig;\n```\n\n----------------------------------------\n\nTITLE: Token Refresh Implementation\nDESCRIPTION: Handles token renewal for both cookie-based and JSON-based authentication modes using Directus SDK.\nSOURCE: https://github.com/directus/docs/blob/main/content/tutorials/1.getting-started/using-authentication-in-sveltekit.md#2025-04-09_snippet_10\n\nLANGUAGE: javascript\nCODE:\n```\nimport { refresh } from \"@directus/sdk\";\n\nexport const refreshToken = async (mode = \"json\", refreshToken = null) => {\n  try {\n    let result;\n\n    if (mode === \"json\" && refreshToken) {\n     \n      result = await client.request(refresh(\"json\", refreshToken));\n    } else if (mode === \"cookie\") {\n      // Use cookie-based refresh\n      result = await client.request(refresh(\"cookie\"));\n    } else {\n      result = await client.refresh();\n    }\n\n    console.log(\"Token refreshed successfully\");\n    return {\n      access_token: result.access_token,\n      expires: result.expires,\n      refresh_token: result.refresh_token,\n    };\n  } catch (error) {\n    console.error(\"Token refresh failed:\", error);\n    throw error;\n  }\n};\n```\n\n----------------------------------------\n\nTITLE: Directus Project Directory Structure\nDESCRIPTION: Shows the directory structure created by Docker Compose for a Directus self-hosted project. Includes the directories for database, extensions, and uploads.\nSOURCE: https://github.com/directus/docs/blob/main/content/tutorials/5.extensions/monitor-and-error-track-with-sentry-in-custom-hooks.md#2025-04-09_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\ndirectus-self-hosted\n├ database\n├ extensions\n└ uploads\n```\n\n----------------------------------------\n\nTITLE: Vue Component Setup with Page Watcher\nDESCRIPTION: Setup function implementation with page property watching functionality.\nSOURCE: https://github.com/directus/docs/blob/main/content/tutorials/5.extensions/implement-navigation-in-multipage-custom-modules.md#2025-04-09_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nsetup(props) {\n  render_page(props.page);\n\n  watch(\n    () => props.page,\n    () => {\n      render_page(props.page);\n    }\n  );\n\n  return { };\n},\n```\n\n----------------------------------------\n\nTITLE: French Content Translation in Markdown\nDESCRIPTION: Markdown content showing the French translation of an article about Chandrayaan lunar exploration mission.\nSOURCE: https://github.com/directus/docs/blob/main/content/tutorials/1.getting-started/implementing-multilingual-content-using-directus-and-next.md#2025-04-09_snippet_9\n\nLANGUAGE: markdown\nCODE:\n```\nChandrayaan est une série de missions d'exploration lunaire développées par l'Organisation indienne de recherche spatiale (ISRO) pour faire progresser les capacités spatiales de l'Inde et sa compréhension scientifique de la Lune. Le programme a débuté avec Chandrayaan-1, lancé en 2008, qui a permis de confirmer la présence de molécules d'eau à la surface lunaire. Cette découverte révolutionnaire a remodelé notre compréhension de la géologie de la Lune et de son potentiel d'exploration future. Le vaisseau spatial transportait un mélange d'instruments indiens et internationaux, dont le Moon Mineralogy Mapper de la NASA, et a fonctionné pendant près d'un an avant de perdre la communication.\n\nFort de ce succès, Chandrayaan-2 a été lancé en 2019, avec un orbiteur, un atterrisseur (Vikram) et un rover (Pragyan). Bien que l'atterrisseur n'ait pas réussi à atterrir en douceur, l'orbiteur continue d'envoyer des données précieuses. En 2023, Chandrayaan-3 est entré dans l'histoire en atterrissant avec succès près du pôle sud de la Lune, faisant de l'Inde la première nation à réaliser cet exploit. La mission a déployé le rover Pragyan, qui a procédé à des analyses in situ du sol lunaire et a confirmé la présence de soufre et d'autres éléments. Le programme Chandrayaan témoigne de l'expertise croissante de l'Inde en matière d'exploration spatiale et de ses ambitions pour de futures missions interplanétaires.\n```\n\n----------------------------------------\n\nTITLE: Sorting Directus API Results\nDESCRIPTION: Demonstrates how to sort API results using the sort parameter. Shows how to sort by multiple fields, use ascending/descending order, and sort with values of related fields using dot notation.\nSOURCE: https://github.com/directus/docs/blob/main/content/guides/4.connect/3.query-parameters.md#2025-04-09_snippet_4\n\nLANGUAGE: http\nCODE:\n```\nGET /items/posts\n\t?sort=sort,-date_created,author.name\n```\n\nLANGUAGE: graphql\nCODE:\n```\nquery {\n\tposts(sort: [\"sort\", \"-date_created\", \"author.name\"]) {\n\t\tid\n\t}\n}\n```\n\nLANGUAGE: js\nCODE:\n```\nimport { createDirectus, rest, readItems } from '@directus/sdk';\nconst directus = createDirectus('https://directus.example.com').with(rest());\n\nconst result = await directus.request(\n\treadItems('posts', {\n\t\tsort: ['sort', '-date_created', 'author.name'],\n\t})\n);\n```\n\n----------------------------------------\n\nTITLE: Starting Directus with Docker Compose\nDESCRIPTION: This command starts the Directus container using the configuration specified in the docker-compose.yml file.\nSOURCE: https://github.com/directus/docs/blob/main/content/getting-started/2.create-a-project.md#2025-04-09_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\ndocker compose up\n```\n\n----------------------------------------\n\nTITLE: Generating a Changeset for Directus Pull Requests\nDESCRIPTION: This command generates a changeset to describe the nature and impact of changes in a pull request. Changesets are used to automatically generate changelogs and determine version number increments.\nSOURCE: https://github.com/directus/docs/blob/main/content/community/2.contribution/4.pull-requests.md#2025-04-09_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\npnpm changeset\n```\n\n----------------------------------------\n\nTITLE: Creating Dynamic Page View with Directus Data in Laravel\nDESCRIPTION: HTML template for rendering dynamic pages with content fetched from Directus.\nSOURCE: https://github.com/directus/docs/blob/main/content/tutorials/1.getting-started/fetch-data-from-directus-with-laravel.md#2025-04-09_snippet_9\n\nLANGUAGE: html\nCODE:\n```\n<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <title>{{ $page['title'] }}</title>\n</head>\n<body>\n    <h1>{{ $page['title'] }}</h1>\n    {!! $page['content'] !!}\n</body>\n</html>\n```\n\n----------------------------------------\n\nTITLE: Configuring Astro for Server-Side Rendering\nDESCRIPTION: Updates the Astro configuration to enable server-side rendering (SSR) for the application.\nSOURCE: https://github.com/directus/docs/blob/main/content/tutorials/1.getting-started/using-authentication-in-astro.md#2025-04-09_snippet_1\n\nLANGUAGE: js\nCODE:\n```\n// @ts-check\nimport { defineConfig } from 'astro/config';\n\n// https://astro.build/config\nexport default defineConfig({\n  output: \"server\"\n});\n```\n\n----------------------------------------\n\nTITLE: Installing Next.js and Dependencies\nDESCRIPTION: Commands to create a new Next.js project and install required dependencies including Directus SDK and Stripe\nSOURCE: https://github.com/directus/docs/blob/main/content/tutorials/2.projects/build-an-ecommerce-platform-with-next-js-stripe-and-directus-automate.md#2025-04-09_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpx create-next-app@14 e-com-directus\nnpm install @directus/sdk @stripe/stripe-js stripe\n```\n\n----------------------------------------\n\nTITLE: Targeting Visual Editing Elements with CSS Selectors\nDESCRIPTION: CSS selectors for styling various elements of the Directus Visual Editing interface, including overlays, rectangles, highlights, hover states, and edit buttons.\nSOURCE: https://github.com/directus/docs/blob/main/content/guides/2.content/8.visual-editor/3.customization.md#2025-04-09_snippet_0\n\nLANGUAGE: css\nCODE:\n```\n#directus-visual-editing {\n\t/* container div that contains all overlay rectangles */\n}\n\n.directus-visual-editing-overlay {\n\t/* wraps the rectangle */\n}\n.directus-visual-editing-rect {\n\t/* the element that will be positioned */\n}\n.directus-visual-editing-rect-highlight {\n\t/* a modifier that highlights the element */\n}\n.directus-visual-editing-rect-hover {\n\t/* class that applies when the original element is hovered */\n}\n.directus-visual-editing-rect-inner {\n\t/* the element with the rectangle styles */\n}\n.directus-visual-editing-edit-button {\n\t/* the edit button */\n}\n```\n\n----------------------------------------\n\nTITLE: Rendering Directus Project Overview Grid in Vue\nDESCRIPTION: This snippet creates a grid layout using custom Vue components to display the main sections of the Directus project: Data Engine and Data Studio. Each section is represented by a 'shiny-card' component with title, description, and product links.\nSOURCE: https://github.com/directus/docs/blob/main/content/_partials/engine-studio-box.md#2025-04-09_snippet_0\n\nLANGUAGE: vue\nCODE:\n```\n::shiny-grid\n  :::shiny-card\n  ---\n  title: Data Engine\n  description: APIs and developer tools for your data.\n  class: col-span-6\n  color: purple\n  ---\n  :product-link{product=\"connect\"} :product-link{product=\"realtime\"} :product-link{product=\"auth\"} :product-link{product=\"automate\"}\n  :::\n\n  :::shiny-card\n  ---\n  title: Data Studio\n  description: A data web app your whole team will love.\n  class: col-span-6\n  color: pink\n  ---\n  :product-link{product=\"explore\"} :product-link{product=\"editor\"} :product-link{product=\"insights\"} :product-link{product=\"files\"}\n  :::\n```\n\n----------------------------------------\n\nTITLE: PM2 Environment Variables Configuration Table\nDESCRIPTION: Table of PM2 environment variables used to configure process management for Directus instances. Includes variables for controlling instance count, execution mode, memory limits, uptime monitoring, timeout settings, restart behavior, and log file paths.\nSOURCE: https://github.com/directus/docs/blob/main/content/configuration/pm2.md#2025-04-09_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n| Variable                      | Description                                                         | Default                                      |\n| ----------------------------- | ------------------------------------------------------------------- | -------------------------------------------- |\n| `PM2_INSTANCES`<sup>[1]</sup> | Number of app instance to be launched.                              | `1`                                          |\n| `PM2_EXEC_MODE`               | One of `fork`, `cluster`.                                           | `'cluster'`                                  |\n| `PM2_MAX_MEMORY_RESTART`      | App will be restarted if it exceeds the amount of memory specified. |                                              |\n| `PM2_MIN_UPTIME`              | Min uptime of the app to be considered started.                     |                                              |\n| `PM2_LISTEN_TIMEOUT`          | Time in ms before forcing a reload if app not listening.            |                                              |\n| `PM2_KILL_TIMEOUT`            | Time in milliseconds before sending a final SIGKILL.                |                                              |\n| `PM2_MAX_RESTARTS`            | Number of failed restarts before the process is killed.             |                                              |\n| `PM2_RESTART_DELAY`           | Time to wait before restarting a crashed app.                       | `0`                                          |\n| `PM2_AUTO_RESTART`            | Automatically restart Directus if it crashes unexpectedly.          | `false`                                      |\n| `PM2_LOG_ERROR_FILE`          | Error file path.                                                    | `$HOME/.pm2/logs/<app name>-error-<pid>.log` |\n| `PM2_LOG_OUT_FILE`            | Output file path.                                                   | `$HOME/.pm2/logs/<app name>-out-<pid>.log`   |\n```\n\n----------------------------------------\n\nTITLE: Environment Configuration\nDESCRIPTION: Environment variables setup for Directus URL and application URL\nSOURCE: https://github.com/directus/docs/blob/main/content/tutorials/2.projects/build-an-ecommerce-platform-with-next-js-stripe-and-directus-automate.md#2025-04-09_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nDIRECTUS_URL=YOUR_DIRECTUS_URL\nAPP_URL=http://localhost:3000\n```\n\n----------------------------------------\n\nTITLE: Setting Up MainActivity for Navigation in Kotlin Android App\nDESCRIPTION: This snippet shows the MainActivity setup for the blog application. It initializes the Jetpack Compose UI and sets up the navigation controller to use the defined NavGraph.\nSOURCE: https://github.com/directus/docs/blob/main/content/tutorials/1.getting-started/fetch-data-from-directus-in-android-with-kotlin.md#2025-04-09_snippet_16\n\nLANGUAGE: kotlin\nCODE:\n```\npackage com.example.directusapp\n\nimport android.os.Bundle\nimport androidx.activity.ComponentActivity\nimport androidx.activity.compose.setContent\nimport androidx.compose.foundation.layout.fillMaxSize\nimport androidx.compose.material3.MaterialTheme\nimport androidx.compose.material3.Surface\nimport androidx.compose.ui.Modifier\nimport androidx.navigation.compose.rememberNavController\nimport com.example.directusapp.ui.NavGraph\nimport com.example.directusapp.ui.theme.DirectusAppTheme\n\nclass MainActivity : ComponentActivity() {\n    override fun onCreate(savedInstanceState: Bundle?) {\n        super.onCreate(savedInstanceState)\n        setContent {\n            DirectusAppTheme {\n                // A surface container using the 'background' color from the theme\n                Surface(\n                    modifier = Modifier.fillMaxSize(),\n                    color = MaterialTheme.colorScheme.background\n                ) {\n                    val navController = rememberNavController()\n                    NavGraph(navController = navController)\n                }\n            }\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Linking Directus Extension\nDESCRIPTION: Command to create or check symbolic links for a Directus extension.\nSOURCE: https://github.com/directus/docs/blob/main/content/guides/9.extensions/6.cli.md#2025-04-09_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\nnpx create-directus-extension@latest link\n```\n\n----------------------------------------\n\nTITLE: Post Form Component for Creating and Updating Posts in Astro\nDESCRIPTION: This Astro component creates a reusable form for both creating and updating posts. It handles post title and content inputs and conditionally renders based on whether it's being used for creating or updating a post.\nSOURCE: https://github.com/directus/docs/blob/main/content/tutorials/1.getting-started/using-authentication-in-astro.md#2025-04-09_snippet_13\n\nLANGUAGE: astro\nCODE:\n```\n---\ninterface Props {\n  action: string;\n  title?: string;\n  content?: string;\n  id?: string;\n}\n\nconst { action, title = '', content = '', id } = Astro.props;\n---\n\n<form method=\"POST\" action={action}>\n  {id && <input type=\"hidden\" name=\"id\" value={id} />}\n  \n  <div>\n    <label for=\"title\">Title:</label>\n    <input\n      type=\"text\"\n      id=\"title\"\n      required\n      name=\"title\"\n      value={title}\n    />\n  </div>\n  \n  <div>\n    <label for=\"content\">Content:</label>\n    <textarea\n      id=\"content\"\n      name=\"content\"\n      required\n    >{content}</textarea>\n  </div>\n  \n  <button type=\"submit\">\n    {id ? 'Update post' : 'Create post'}\n  </button>\n</form>\n```\n\n----------------------------------------\n\nTITLE: Initializing Basic Nuxt App Template\nDESCRIPTION: Basic Vue template setup for Nuxt application with route announcer and page components.\nSOURCE: https://github.com/directus/docs/blob/main/content/tutorials/1.getting-started/implementing-multilingual-content-using-directus-and-nuxt.md#2025-04-09_snippet_12\n\nLANGUAGE: vue\nCODE:\n```\n<template>\n  <div>\n    <NuxtRouteAnnouncer />\n    <NuxtPage />\n  </div>\n</template>\n```\n\n----------------------------------------\n\nTITLE: Builder M2A Configuration\nDESCRIPTION: Configuration for Many-to-Any relationship interface that allows connecting items from multiple collections.\nSOURCE: https://github.com/directus/docs/blob/main/content/guides/1.data-model/3.interfaces.md#2025-04-09_snippet_3\n\nLANGUAGE: markdown\nCODE:\n```\n| Configuration       | Options                                          |\n| ------------------- | ------------------------------------------------ |\n| Types               | `Alias`                                          |\n| Related Collections | Which collections should items be selected from. |\n| Allow Duplicates    | Allow users to add the same Item multiple times. |\n```\n\n----------------------------------------\n\nTITLE: Defining Hero Block Collection in Directus\nDESCRIPTION: Creates a new collection named 'block_hero' with fields for headline, content, buttons, and image. This block type represents a hero section typically found at the top of a page.\nSOURCE: https://github.com/directus/docs/blob/main/content/tutorials/1.getting-started/create-reusable-blocks-with-many-to-any-relationships.md#2025-04-09_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\nblock_hero\n\n- id (uuid)\n- headline (Type: String, Interface: Input)\n- content (Type: Text, Interface: WYSIWYG)\n- buttons (Type: JSON, Interface: Repeater)\n  - label (Type: String, Interface: Input)\n  - href (Type: String, Interface: Input)\n  - variant (Type: String, Interface: Input)\n- image (Type: uuid / single file, Interface: Image)\n```\n\n----------------------------------------\n\nTITLE: Modified Code for Importing Pages to Directus\nDESCRIPTION: A variant of the post import script that targets the 'Pages' collection in Directus instead of 'Posts'. This demonstrates how to adjust the endpoint for different content types.\nSOURCE: https://github.com/directus/docs/blob/main/content/tutorials/4.migration/migrate-from-wordpress-to-directus.md#2025-04-09_snippet_6\n\nLANGUAGE: python\nCODE:\n```\nimport json\nimport requests\n\ndef import_posts_to_directus(json_file_path, directus_url, api_key):\n    \"\"\"\n    Reads posts from a JSON file and imports them into Directus, including handling featured images.\n    \"\"\"\n    with open(json_file_path, \"r\") as file:\n        posts = json.load(file)\n    headers = {\"Authorization\": f\"Bearer {api_key}\", \"Content-Type\": \"application/json\"}\n    for post in posts:\n        ...\n        # POST the data to the Directus API\n        response = requests.post(\n            f\"{directus_url}/items/Pages\", headers=headers, json=payload\n        )\n        if response.status_code in [200, 201]:\n            print(f\"Post '{post['Title']}' imported successfully.\")\n        else:\n            print(f\"Failed to import post '{post['Title']}': {response.text}\")\n\n...\n```\n\n----------------------------------------\n\nTITLE: Installing SvelteKit Project\nDESCRIPTION: Command line instructions for creating a new SvelteKit project\nSOURCE: https://github.com/directus/docs/blob/main/content/tutorials/2.projects/build-a-realtime-chat-app-with-directus-and-sveltekit.md#2025-04-09_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nnpx sv create realtime-app\n```\n\n----------------------------------------\n\nTITLE: Handshake Mode Authentication with Email/Password\nDESCRIPTION: JSON payload for authenticating with email and password credentials in handshake mode.\nSOURCE: https://github.com/directus/docs/blob/main/content/guides/7.realtime/1.authentication.md#2025-04-09_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n{\n\t\"type\": \"auth\",\n\t\"email\": \"user@email.com\",\n\t\"password\": \"your-password\"\n}\n```\n\n----------------------------------------\n\nTITLE: Service Activation Commands\nDESCRIPTION: Commands to enable and start the Directus systemd service\nSOURCE: https://github.com/directus/docs/blob/main/content/tutorials/6.self-hosting/deploy-directus-to-an-ubuntu-server.md#2025-04-09_snippet_11\n\nLANGUAGE: bash\nCODE:\n```\nsudo systemctl enable directus.service\nsudo systemctl start directus.service\n```\n\n----------------------------------------\n\nTITLE: Setting Up First Admin User in Directus\nDESCRIPTION: This snippet defines environment variables for setting up the first admin user in Directus during the bootstrap process. It includes settings for email, password, and API token.\nSOURCE: https://github.com/directus/docs/blob/main/content/configuration/1.general.md#2025-04-09_snippet_2\n\nLANGUAGE: markdown\nCODE:\n```\n| Variable         | Description                                                                            | Default Value |\n| ---------------- | -------------------------------------------------------------------------------------- | ------------- |\n| `ADMIN_EMAIL`    | The email address of the first user that's automatically created during bootstrapping. |               |\n| `ADMIN_PASSWORD` | The password of the first user that's automatically created during bootstrapping.      |               |\n| `ADMIN_TOKEN`    | The API token of the first user that's automatically created during bootstrapping.     |               |\n```\n\n----------------------------------------\n\nTITLE: Starting Django Development Server\nDESCRIPTION: Command to start the Django development server on localhost:8000.\nSOURCE: https://github.com/directus/docs/blob/main/content/tutorials/1.getting-started/fetch-data-from-directus-with-django.md#2025-04-09_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\npython manage.py runserver\n```\n\n----------------------------------------\n\nTITLE: Configuring Directus Field Preset for Author in TypeScript\nDESCRIPTION: Sets up a field preset in Directus to automatically assign the current user as the author when creating a post.\nSOURCE: https://github.com/directus/docs/blob/main/content/tutorials/1.getting-started/using-authentication-in-next-js.md#2025-04-09_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n{\n    \"author\": \"$CURRENT_USER\"\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Rating Options in Vue Feedback Component\nDESCRIPTION: Adds an array of rating options with labels, values, and messages. Implements a function to get rating option by value and renders rating buttons using v-for.\nSOURCE: https://github.com/directus/docs/blob/main/content/tutorials/2.projects/build-a-user-feedback-widget-with-vue-js-.md#2025-04-09_snippet_3\n\nLANGUAGE: vue\nCODE:\n```\n<script setup lang=\"ts\">\nimport { ref, reactive } from 'vue';\n\nconst props = defineProps<{ title: string; url: string }>();\n\nconst feedback = reactive<{\n\tid?: string;\n\trating?: number;\n\tcomments?: string;\n}>({});\n\nconst ratingOptions = [\n\t{ label: 'Worst Doc Ever 🗑️', value: 1, message: 'Woof! 🤦‍♂️ Sorry about that. How do we fix it?' },\n\t{ label: 'Not Helpful 😡', value: 2, message: '🧐 Help us do better. How can we improve this article?' },\n\t{ label: 'Helpful 😃', value: 3, message: 'Nice! 👍 Anything we can improve upon?' },\n\t{ label: 'Super Helpful 🤩', value: 4, message: `Awesome! The whole team is rejoicing in celebration! 🥳🎉🎊 Anything you'd like to say to them?` },\n];\n\nfunction getRatingOption(rating: number) {\n\treturn ratingOptions.find((option) => option.value === rating);\n}\n</script>\n\n<template>\n\t<div class=\"wrapper\">\n\t\t<div v-if=\"!feedback.rating\" class=\"step\">\n\t\t\t<!-- Step 1. Show Rating Buttons -->\n\t\t\t<div>\n\t\t\t\t<p class=\"desc\">How can we improve?</p>\n\t\t\t\t<p class=\"heading\">How helpful was this article?</p>\n\t\t\t</div>\n\t\t\t<div class=\"button-container\">\n\t\t\t\t\t<!-- We'll add a function for handling button clicks while adding our submission logic -->\n\t\t\t\t\t<button v-for=\"item in ratingOptions\" :key=\"item.value\" class=\"btn\">\n\t\t\t\t\t\t<span>{{ item.label }}</span>\n\t\t\t\t\t</button>\n\t\t\t</div>\n\t\t</div>\n\t\t<div v-else-if=\"feedback.rating && !success\" class=\"step\">\n\t\t\t<!-- Step 2. Ask for Comments -->\n\t\t</div>\n\t\t<div v-else class=\"step\">\n\t\t\t<!-- Step 3. Show Success Message -->\n\t\t</div>\n\t</div>\n</template>\n```\n\n----------------------------------------\n\nTITLE: Creating a NavBar with Cart and Search Functionality in Next.js\nDESCRIPTION: Implements a navigation bar component with cart display and search form. It uses the CartContext to show the number of items in the cart and handles search form submission.\nSOURCE: https://github.com/directus/docs/blob/main/content/tutorials/2.projects/build-an-ecommerce-platform-with-next-js-stripe-and-directus-automate.md#2025-04-09_snippet_8\n\nLANGUAGE: tsx\nCODE:\n```\n\"use client\";\n\nimport { CartContext } from \"@/app/context/cart-context\";\nimport { useRouter, useSearchParams } from \"next/navigation\";\nimport { useContext, useEffect, useState } from \"react\";\nimport Link from 'next/link'\n\nexport default function NavBar() {\n  const router = useRouter();\n  const searchParams = useSearchParams()\n  const [isClient, setIsClient] = useState(false)\n\n  const handleSubmit = (event: React.FormEvent<HTMLFormElement>) => {\n    event.preventDefault();\n    const formData = new FormData(event.currentTarget);\n    const searchQuery = formData.get(\"search\") as string;\n    router.push(`/search?query=${searchQuery}`)\n  };\n\n  const cart = useContext(CartContext);\n  useEffect(() => {\n    setIsClient(true)\n  }, [])\n   return isClient &&  (\n    <div>\n      <div>\n        <span><Link href=\"/\">Home</Link></span>\n        <span>Cart: <Link href=\"/checkout/cart\"> {cart.cartItems.length} items in cart</Link></span>\n      </div>\n      <form onSubmit={handleSubmit}>\n      <input\n        type=\"text\"\n        placeholder=\"Search for products...\"\n        name=\"search\"\n        defaultValue={searchParams.get('query') || ''}\n      />\n      <button type=\"submit\">Search</button>\n      </form>\n    </div>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Portuguese Translation Markdown Content\nDESCRIPTION: Portuguese translation of the rabbit productivity post to be used in the posts_translations collection in Directus.\nSOURCE: https://github.com/directus/docs/blob/main/content/tutorials/1.getting-started/implementing-multilingual-content-using-directus-and-nuxt.md#2025-04-09_snippet_11\n\nLANGUAGE: md\nCODE:\n```\nOs coelhos são conhecidos por sua rapidez e agilidade, mas você sabia que eles também podem ser incrivelmente produtivos? Aqui estão algumas dicas para ajudar você a se tornar o coelho mais produtivo que você pode ser:\n\nEstabeleça metas claras. Determine o que você quer alcançar e faça um plano para atingir suas metas.\n\nUse suas habilidades naturais. Os coelhos são rápidos, então use essa velocidade a seu favor completando tarefas de forma rápida e eficiente.\n\nMantenha-se organizado. Mantenha sua toca limpa e arrumada para que você possa encontrar rapidamente o que precisa quando precisar.\n\nFaça pausas. Apesar de sua reputação de serem rápidos, os coelhos também precisam de pausas. Dê pequenos saltos para esticar as pernas e descansar a mente.\n\nCerque-se de influências positivas. Faça amizade com outros coelhos produtivos e aprenda com seus hábitos.\n\nSeguindo essas dicas, você estará no caminho certo para se tornar o coelho mais produtivo que você pode ser. Então, comece a pular e faça as coisas!\n```\n\n----------------------------------------\n\nTITLE: Docker Registry Authentication\nDESCRIPTION: Command to configure Docker authentication with Google Artifact Registry\nSOURCE: https://github.com/directus/docs/blob/main/content/tutorials/6.self-hosting/deploy-directus-to-google-cloud-platform.md#2025-04-09_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\ngcloud auth configure-docker us-central1-docker.pkg.dev\n```\n\n----------------------------------------\n\nTITLE: Fetching Multilingual News Content in SvelteKit\nDESCRIPTION: JavaScript code using Directus SDK to fetch news content with translations in the SvelteKit load function.\nSOURCE: https://github.com/directus/docs/blob/main/content/tutorials/1.getting-started/implement-multilingual-content-with-directus-and-svelte-kit.md#2025-04-09_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nimport getDirectusInstance from \"$lib/directus\";\nimport { readItems } from \"@directus/sdk\";\n\nexport async function load({ fetch }) {\n  const directus = getDirectusInstance(fetch);\n  return {\n    global: await directus.request(readItems(\"global\")),\n    news: await directus.request(readItems(\"news\", {\n        deep: {\n          translations: {\n            _filter: {\n              _and: [\n                {\n                  languages_code: { _eq: \"en-US\" },\n                },\n              ],\n            },\n          },\n        },\n        fields: [\"*\", { translations: [\"*\"] }],\n      })\n    ),\n  };\n}\n```\n\n----------------------------------------\n\nTITLE: Running Blackbox Tests with Docker in Directus\nDESCRIPTION: Commands for setting up and running blackbox tests in Directus using Docker. Includes steps for building the codebase, starting containers, and running tests.\nSOURCE: https://github.com/directus/docs/blob/main/content/community/3.codebase/3.testing.md#2025-04-09_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n# Ensure that you are testing against the lastest state of the codebase\npnpm --workspace-root build\n\n# Clean up in case you ran the tests before\npnpm --filter tests-blackbox exec docker compose down --volumes\n# Start the containers required for the tests\npnpm --filter tests-blackbox exec docker compose up --detach --wait\n\n# Deploy Directus and run the tests\npnpm --workspace-root test:blackbox\n```\n\n----------------------------------------\n\nTITLE: Creating a Preview-enabled Post Page by ID in Nuxt\nDESCRIPTION: Vue component that fetches and displays a post by ID, with special handling for preview mode including token authentication and version selection for Directus's Live Preview feature.\nSOURCE: https://github.com/directus/docs/blob/main/content/tutorials/1.getting-started/implementing-live-preview-in-nuxt.md#2025-04-09_snippet_12\n\nLANGUAGE: vue\nCODE:\n```\n<script setup>\nconst { $directus, $readItem, $isPreview, $previewToken, $previewVersion, $withToken } = useNuxtApp()\nconst route = useRoute()\nconst post = ref(null)\n\nif ($isPreview) {\n\tconst { data, error } = await useAsyncData('post', async () => {\n\t\ttry {\n\t\t\treturn await $directus.request(\n\t\t\t\t$withToken($previewToken, $readItem('posts', route.params.id, { version: $previewVersion }))\n\t\t\t)\n\t\t} catch (error) {\n\t\t\tthrow createError({\n\t\t\t\tstatusCode: 404,\n\t\t\t\tstatusMessage: \"Post not found\"\n\t\t\t})\n\t\t}\n\t})\n\n\tif (error.value) {\n\t\tthrow createError({\n\t\t\tstatusCode: 404,\n\t\t\tstatusMessage: \"Post not found\"\n\t\t})\n\t}\n\n\tpost.value = data.value\n} else {\n\tconst { data, error } = await useAsyncData('post', async () => {\n\t\treturn $directus.request($readItem('posts', route.params.id))\n\t})\n\n\tif (error.value) {\n\t\tthrow createError({\n\t\t\tstatusCode: 404,\n\t\t\tstatusMessage: \"Post not found\"\n\t\t})\n\t}\n\n\tpost.value = data.value\n}\n</script>\n<template>\n\t<div v-if=\"post\">\n\t\t<h1>{{ post.title }}</h1>\n\t\t<p>{{ post.content }}</p>\n\t</div>\n\t<div v-else>Loading...</div>\n</template>\n```\n\n----------------------------------------\n\nTITLE: Creating Typed Sandboxed Operation with TypeScript in Directus\nDESCRIPTION: This example demonstrates how to create a sandboxed operation in TypeScript with proper type definitions. It imports the SandboxOperationConfig type from the Directus API to provide type safety for the operation configuration.\nSOURCE: https://github.com/directus/docs/blob/main/content/guides/9.extensions/2.api-extensions/3.operations.md#2025-04-09_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\n/// <reference types=\"@directus/extensions/api.d.ts\" />\nimport type { SandboxOperationConfig } from \"directus:api\";\n\nconst operation: SandboxOperationConfig = {\n\tid: 'custom',\n\thandler: (options) => {\n\t},\n};\n\nexport default operation;\n```\n\n----------------------------------------\n\nTITLE: Logging into Stripe CLI\nDESCRIPTION: Command to authenticate with the Stripe CLI tool. This is required before you can use any other Stripe CLI commands for webhook testing.\nSOURCE: https://github.com/directus/docs/blob/main/content/tutorials/2.projects/build-an-hotel-booking-platform-with-next-js-stripe-and-directus-automate.md#2025-04-09_snippet_17\n\nLANGUAGE: bash\nCODE:\n```\nstripe login\n```\n\n----------------------------------------\n\nTITLE: Handling Errors in Extensions (Before)\nDESCRIPTION: Previous method for handling errors in Directus extensions, using imported system exceptions.\nSOURCE: https://github.com/directus/docs/blob/main/content/releases/3.breaking-changes/1.version-10.md#2025-04-09_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\nexport default (router, { exceptions }) => {\n  const { ForbiddenException } = exceptions;\n\n  router.get('/', (req, res) => {\n    throw new ForbiddenException();\n  });\n};\n```\n\n----------------------------------------\n\nTITLE: Installing Nuxt and Directus SDK Dependencies\nDESCRIPTION: Commands to create a new Nuxt project and install the Directus SDK\nSOURCE: https://github.com/directus/docs/blob/main/content/tutorials/1.getting-started/fetch-data-from-directus-with-nuxt.md#2025-04-09_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpx nuxt init my-website\ncd my-website\nnpm install\nnpm install @directus/sdk\n```\n\n----------------------------------------\n\nTITLE: Implementing Theme Variables in SVG\nDESCRIPTION: CSS variables for theming SVG elements in Directus panels. Uses theme-specific color variables to ensure panel previews match the project's theme settings.\nSOURCE: https://github.com/directus/docs/blob/main/content/_partials/extensions-theme.md#2025-04-09_snippet_0\n\nLANGUAGE: css\nCODE:\n```\n--theme--primary\n--theme--primary-subdued\n```\n\n----------------------------------------\n\nTITLE: Creating a New Next.js Application with Specific Configurations\nDESCRIPTION: Bash command to create a new Next.js application with custom settings using create-next-app.\nSOURCE: https://github.com/directus/docs/blob/main/content/tutorials/1.getting-started/rendering-dynamic-blocks-using-next.md#2025-04-09_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nnpx create-next-app \\\n  directus-next-dynamic-blocks \\\n  --js \\\n  --app \\\n  --eslint \\\n  --no-src-dir \\\n  --no-tailwind \\\n  --turbopack \\\n  --import-alias \"@/*\"\n```\n\n----------------------------------------\n\nTITLE: Setting Up Project Directory and Installing Directus SDK\nDESCRIPTION: Commands to navigate into the new project directory, clean up the app folder, and install the Directus JavaScript SDK.\nSOURCE: https://github.com/directus/docs/blob/main/content/tutorials/1.getting-started/fetch-data-from-directus-with-nextjs.md#2025-04-09_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\ncd my-website\nrm app/*\nnpm install @directus/sdk\n```\n\n----------------------------------------\n\nTITLE: Adding Props and Reactive Logic to Vue Feedback Component\nDESCRIPTION: Implements props for title and URL, creates a reactive feedback object, and adds conditional rendering for different steps of the feedback process.\nSOURCE: https://github.com/directus/docs/blob/main/content/tutorials/2.projects/build-a-user-feedback-widget-with-vue-js-.md#2025-04-09_snippet_2\n\nLANGUAGE: vue\nCODE:\n```\n<script setup lang=\"ts\">\nimport { ref, reactive } from 'vue';\n\nconst props = defineProps<{\n\ttitle: string;\n\turl: string\n}>();\n\nconst feedback = reactive<{\n\tid?: string;\n\trating?: number;\n\tcomments?: string;\n}>({});\n\nconst success = ref(false);\n</script>\n\n<template>\n\t<div class=\"wrapper\">\n\t\t<div v-if=\"!feedback.rating\" class=\"step\">\n\t\t\t<!-- Step 1. Show Rating Buttons -->\n\t\t\t<div>\n\t\t\t\t<p class=\"desc\">How can we improve?</p>\n\t\t\t\t<p class=\"heading\">How helpful was this article?</p>\n\t\t\t</div>\n\t\t</div>\n\t\t<div v-else-if=\"feedback.rating && !success\" class=\"step\">\n\t\t\t<!-- Step 2. Ask for Comments -->\n\t\t</div>\n\t\t<div v-else class=\"step\">\n\t\t\t<!-- Step 3. Show Success Message -->\n\t\t</div>\n\t</div>\n</template>\n```\n\n----------------------------------------\n\nTITLE: Configuring Nuxt Proxy for Directus Access\nDESCRIPTION: Nuxt configuration to set up a proxy for accessing Directus API from the Nuxt application.\nSOURCE: https://github.com/directus/docs/blob/main/content/tutorials/2.projects/build-forms-dynamically-using-directus-and-nuxt.md#2025-04-09_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nrouteRules: {\n  \"/directus/**\": { proxy: `${import.meta.env.API_URL}/**` },\n},\n```\n\n----------------------------------------\n\nTITLE: Creating Home View with Directus Data in Laravel\nDESCRIPTION: HTML template for rendering the home page with global metadata fetched from Directus.\nSOURCE: https://github.com/directus/docs/blob/main/content/tutorials/1.getting-started/fetch-data-from-directus-with-laravel.md#2025-04-09_snippet_5\n\nLANGUAGE: html\nCODE:\n```\n<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <title>{{ $settings['site_title'] }}</title>\n</head>\n<body>\n    <h1>{{ $settings['site_title'] }}</h1>\n    <p>{{ $settings['site_description'] }}</p>\n</body>\n</html>\n```\n\n----------------------------------------\n\nTITLE: Installing Directus SDK in Next.js Project\nDESCRIPTION: Bash commands to change directory and install the Directus SDK in the newly created Next.js project.\nSOURCE: https://github.com/directus/docs/blob/main/content/tutorials/1.getting-started/rendering-dynamic-blocks-using-next.md#2025-04-09_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\ncd directus-next-dynamic-blocks\nnpm i @directus/sdk\n```\n\n----------------------------------------\n\nTITLE: Implementing Dynamic Page Component with Directus Data Fetching in Next.js\nDESCRIPTION: React component that dynamically fetches and renders page data from Directus CMS. Uses the Directus SDK to retrieve page content including title, slug, and content blocks. Implements a block-to-component mapping system for rendering different content types.\nSOURCE: https://github.com/directus/docs/blob/main/content/tutorials/1.getting-started/rendering-dynamic-blocks-using-next.md#2025-04-09_snippet_8\n\nLANGUAGE: javascript\nCODE:\n```\nimport React from \"react\";\nimport Hero from \"../components/Hero\";\nimport CardGroup from \"../components/CardGroup\";\nimport RichText from \"../components/RichText\";\n\n// Add the following imports\nimport client from \"@/lib/directus\";\nimport { readItems } from \"@directus/sdk\";\n\nconst blockToComponent = (collectionName) => {\n    switch (collectionName) {\n        case \"block_hero\":\n            return Hero;\n        case \"block_richtext\":\n            return RichText;\n        case \"block_cardgroup\":\n            return CardGroup;\n        default:\n            return null;\n    }\n}\n\n\nexport default async function Page({ params }) {\n    const { slug } = await params;\n    \n    let page\n\n    // Add the following line\n    page = await client.request(readItems('pages', {\n        filter: {\n\t\t\tslug: { _eq: slug },\n\t\t},\n\t\tfields: ['title', 'slug', 'blocks.id', 'blocks.collection', 'blocks.item.*', 'blocks.item.posts.*.*', 'blocks.item.cards.*.*'],\n\t\tlimit: 1\n    }))\n\n    return (\n        <div>\n            <h1>{page[0].title}</h1>\n            {page[0]?.blocks?.map((block, index) => {\n                const Component = blockToComponent(block.collection);\n                return <Component key={index} {...(block.item)} />;\n            })}\n        </div>\n    );\n\n\n}\n```\n\n----------------------------------------\n\nTITLE: Running the Directus-powered application in development mode with npm\nDESCRIPTION: Command to start the development server for the application. This will launch the application locally, making it accessible at http://localhost:5173/ in your browser.\nSOURCE: https://github.com/directus/docs/blob/main/content/tutorials/1.getting-started/using-authentication-in-sveltekit.md#2025-04-09_snippet_18\n\nLANGUAGE: bash\nCODE:\n```\nnpm run dev\n```\n\n----------------------------------------\n\nTITLE: Creating Items in Meilisearch Index on Directus Create Operation\nDESCRIPTION: Hook implementation that listens for new article creation in Directus and adds the corresponding document to the Meilisearch index.\nSOURCE: https://github.com/directus/docs/blob/main/content/tutorials/5.extensions/integrate-meilisearch-indexing-with-custom-hooks.md#2025-04-09_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nexport default ({ action }) => {\n  action('articles.items.create', async (meta) => {\n    await index.addDocuments([{ id: meta.key, ...meta.payload }])\n  })\n}\n```\n\n----------------------------------------\n\nTITLE: Environment Variables Configuration for Directus on Digital Ocean\nDESCRIPTION: This snippet shows the essential environment variables needed to configure Directus on Digital Ocean, including database connection, storage settings for Digital Ocean Spaces, Redis configuration, caching parameters, and initial admin credentials.\nSOURCE: https://github.com/directus/docs/blob/main/content/tutorials/6.self-hosting/deploy-directus-to-digital-ocean.md#2025-04-09_snippet_1\n\nLANGUAGE: env\nCODE:\n```\nKEY=\"randomly-generated-key\"\nSECRET=\"randomly-generated-secret\"\nDB_CLIENT=\"pg\"\nDB_HOST=\"dbhost\"\nDB_PORT=\"25060\"\nDB_DATABASE=\"your_db\"\nDB_USER=\"doadmin\"\nDB_PASSWORD=\"dbpass\"\nDB_SSL__CA=\"\"\nSTORAGE_LOCATIONS=digitalocean\nSTORAGE_DIGITALOCEAN_DRIVER=s3\nSTORAGE_DIGITALOCEAN_KEY=\"your-storage-key\"\nSTORAGE_DIGITALOCEAN_SECRET=\"your-storage-secret\"\nSTORAGE_DIGITALOCEAN_ENDPOINT=\"your-storage-endpoint-url\"\nSTORAGE_DIGITALOCEAN_BUCKET=\"your-storage-bucket-name\"\nSTORAGE_DIGITALOCEAN_REGION=\"your-storage-region\"\nREDIS_HOST=\"host-ip\"\nREDIS_PORT=\"6379\"\nREDIS_PASSWORD=\"redis-password\"\nCACHE_ENABLED=\"true\"\nCACHE_STORE=\"redis\"\nCACHE_AUTO_PURGE=\"true\"\nMESSENGER_STORE=\"redis\"\nSYNCHRONIZATION_STORE=\"redis\"\nPUBLIC_URL=${APP_URL}\nADMIN_EMAIL=\"admin@example.com\"\nADMIN_PASSWORD=\"hunter2\"\n```\n\n----------------------------------------\n\nTITLE: TypeScript Environment Definition for API URL\nDESCRIPTION: Defines TypeScript types for the environment variables to ensure proper type-checking when accessing the API URL.\nSOURCE: https://github.com/directus/docs/blob/main/content/tutorials/1.getting-started/rendering-dynamic-blocks-using-nuxt.md#2025-04-09_snippet_5\n\nLANGUAGE: ts\nCODE:\n```\n/// <reference types=\"vite/client\" />\ninterface ImportMetaEnv {\n\treadonly API_URL: string;\n}\n  \ninterface ImportMeta {\n\treadonly env: ImportMetaEnv;\n}\n```\n\n----------------------------------------\n\nTITLE: File Import Request Body Configuration in JSON\nDESCRIPTION: JSON structure for the request body when importing files via URL in Directus Automate. Includes optional data object for additional file properties.\nSOURCE: https://github.com/directus/docs/blob/main/content/tutorials/3.tips-and-tricks/importing-files-in-directus-automate.md#2025-04-09_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{ \"url\": \"file_url\" }\n```\n\n----------------------------------------\n\nTITLE: Uploading Files with Directus REST API\nDESCRIPTION: Example of uploading files using the Directus REST API. The request must be formatted as 'multipart/form-data' with the file content in a property called 'file'.\nSOURCE: https://github.com/directus/docs/blob/main/content/guides/5.files/1.upload.md#2025-04-09_snippet_0\n\nLANGUAGE: http\nCODE:\n```\n// POST /files\n\nBody must be formatted as a `multipart/form-data` with a final property called `file`.\n```\n\n----------------------------------------\n\nTITLE: Enabling 2FA in Directus API\nDESCRIPTION: This snippet shows how to enable 2FA using the Directus API. It requires sending a POST request with a one-time password (OTP) generated by an authenticator app and the secret received from the generate endpoint.\nSOURCE: https://github.com/directus/docs/blob/main/content/guides/3.auth/5.2fa.md#2025-04-09_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n\t\"otp\": \"123456\",\n\t\"secret\": \"GV3UEVQVOM4D4O33\"\n}\n```\n\n----------------------------------------\n\nTITLE: Initializing a New Nuxt Project with Nuxi\nDESCRIPTION: Creates a new Nuxt project using the Nuxi CLI tool and navigates to the project directory.\nSOURCE: https://github.com/directus/docs/blob/main/content/tutorials/1.getting-started/rendering-dynamic-blocks-using-nuxt.md#2025-04-09_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nnpx nuxi@latest init directus-blocks\ncd directus-blocks\n```\n\n----------------------------------------\n\nTITLE: SEO-Optimized File Access URL in Directus\nDESCRIPTION: Enhanced URL pattern that includes an optional filename after the UUID for SEO purposes. The filename is also used in Content-Disposition headers when downloading.\nSOURCE: https://github.com/directus/docs/blob/main/content/guides/5.files/3.access.md#2025-04-09_snippet_1\n\nLANGUAGE: plaintext\nCODE:\n```\nhttps://example.com/assets/<file-id>/<filename>\nhttps://example.com/assets/1ac73658-8b62-4dea-b6da-529fbc9d01a4/directus-logo.png\n```\n\n----------------------------------------\n\nTITLE: Deleting Items from Elasticsearch Index (JavaScript)\nDESCRIPTION: This hook action removes documents from the Elasticsearch index when items are deleted in Directus. It handles multiple deletions by mapping over the keys array and sending delete requests for each item.\nSOURCE: https://github.com/directus/docs/blob/main/content/tutorials/5.extensions/integrate-elasticsearch-indexing-with-custom-hooks.md#2025-04-09_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\naction(\"books.items.delete\", async (meta) => {\n  await Promise.all(\n    meta.keys.map(\n      async (key) =>\n        await client.delete({\n          index: \"books\",\n          id: key,\n        })\n    )\n  );\n});\n```\n\n----------------------------------------\n\nTITLE: Navigating to Project Directory in Terminal\nDESCRIPTION: Command to navigate to the newly created React project directory.\nSOURCE: https://github.com/directus/docs/blob/main/content/tutorials/1.getting-started/using-authentication-in-react.md#2025-04-09_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\ncd directus-react-auth\n```\n\n----------------------------------------\n\nTITLE: Establishing and Authenticating Directus WebSocket Client\nDESCRIPTION: This JavaScript snippet creates a Directus client with authentication and realtime capabilities.\nSOURCE: https://github.com/directus/docs/blob/main/content/tutorials/2.projects/build-a-multi-user-chat-with-vue-js-and-directus-realtime.md#2025-04-09_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nconst client = createDirectus(url)\n  .with(authentication())\n  .with(realtime());\n```\n\n----------------------------------------\n\nTITLE: Configuring Nuxt Proxy for Directus API\nDESCRIPTION: Sets up a proxy rule in Nuxt configuration to allow the frontend to communicate with the Directus API, avoiding CORS issues.\nSOURCE: https://github.com/directus/docs/blob/main/content/tutorials/1.getting-started/rendering-dynamic-blocks-using-nuxt.md#2025-04-09_snippet_6\n\nLANGUAGE: ts\nCODE:\n```\nrouteRules: {\n    \"/directus/**\": { proxy: `${import.meta.env.API_URL}/**` },\n  },\n```\n\n----------------------------------------\n\nTITLE: Adding Clickable Icon to Title-Outer:Append Slot\nDESCRIPTION: Shows how to add a clickable icon button to the right of the title using the title-outer:append slot.\nSOURCE: https://github.com/directus/docs/blob/main/content/tutorials/5.extensions/understand-available-slots-in-custom-modules.md#2025-04-09_snippet_3\n\nLANGUAGE: vue\nCODE:\n```\n<template #title-outer:append>\n\t<v-icon\n\t\tclickable\n\t\tname=\"add_circle\"\n\t\t@click=\"buttonAction()\"\n\t/>\n</template>\n```\n\n----------------------------------------\n\nTITLE: Implementing Draft Mode API Route in Next.js\nDESCRIPTION: API route handler that enables draft mode for content preview. Validates request parameters and redirects to the appropriate post page.\nSOURCE: https://github.com/directus/docs/blob/main/content/tutorials/1.getting-started/set-up-live-preview-with-next-js.md#2025-04-09_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { draftMode } from 'next/headers';\nimport directus from '@/lib/directus';\nimport { readItem } from '@directus/sdk';\n\nexport async function GET(request: Request) {\n\tconst { searchParams } = new URL(request.url);\n\tconst secret = searchParams.get('secret');\n\tconst id = searchParams.get('id');\n\n\tif (secret !== 'MY_SECRET_TOKEN') {\n\t\treturn new Response('Invalid token', { status: 401 });\n\t}\n\n\tif (!id) {\n\t\treturn new Response('Missing id', { status: 401 });\n\t}\n\n\tconst post = await directus.request(readItem('Posts', id));\n\n\tif (!post) {\n\t\treturn new Response('Invalid id', { status: 401 });\n\t}\n\n\tdraftMode().enable();\n\n\treturn new Response(null, {\n\t\tstatus: 307,\n\t\theaders: {\n\t\t\tLocation: `/posts/${post.id}`,\n\t\t},\n\t});\n}\n```\n\n----------------------------------------\n\nTITLE: Updating Items via WebSocket\nDESCRIPTION: Example of updating existing items in a collection using WebSockets. Requires collection name, item ID, and update data.\nSOURCE: https://github.com/directus/docs/blob/main/content/guides/7.realtime/3.actions.md#2025-04-09_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n{\n\t\"type\": \"items\",\n\t\"action\": \"update\",\n\t\"collection\": \"your_collection_name\",\n\t\"id\": \"single_item_id\",\n\t\"data\": {\n\t\t// ...\n\t}\n}\n```\n\nLANGUAGE: json\nCODE:\n```\n{\n\t\"type\": \"subscription\",\n\t\"event\": \"update\",\n\t\"data\": [\n\t\t// ...\n\t]\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Directus API URL in .env\nDESCRIPTION: Environment variable configuration for storing the Directus API URL, which will be used by the Nuxt application to communicate with Directus.\nSOURCE: https://github.com/directus/docs/blob/main/content/tutorials/1.getting-started/using-authentication-in-nuxt.md#2025-04-09_snippet_5\n\nLANGUAGE: plaintext\nCODE:\n```\nAPI_URL=\"http://0.0.0.0:8055/**\"\n```\n\n----------------------------------------\n\nTITLE: Implementing Dynamic OG Images in Nuxt Pages\nDESCRIPTION: This code shows how to implement dynamic Open Graph images in a Nuxt page route. It computes the username from route parameters, generates an avatar URL from GitHub, and passes these values to the OG image component for social media previews.\nSOURCE: https://github.com/directus/docs/blob/main/content/tutorials/2.projects/how-i-built-an-ai-open-source-santa-roast-app-with-directus-and-nuxt.md#2025-04-09_snippet_6\n\nLANGUAGE: tsx\nCODE:\n```\n// app/pages/[username].vue\n<script setup lang=\"ts\">\nconst username = computed(() => route.params.username);\nconst avatarUrl = computed(() => `https://github.com/${username.value}.png`);\n\ndefineOgImageComponent('Username', {\n\tusername: username.value,\n\tavatarUrl: avatarUrl.value,\n});\n</script>\n```\n\n----------------------------------------\n\nTITLE: Setting Author Field Preset in Directus\nDESCRIPTION: JSON configuration for automatically setting the author field to the current user in Directus\nSOURCE: https://github.com/directus/docs/blob/main/content/tutorials/1.getting-started/using-authentication-in-sveltekit.md#2025-04-09_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n{\n    \"author\": \"$CURRENT_USER\"\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Router for Home Page in Chrome Extension\nDESCRIPTION: This snippet shows how to import the Home component and add it to the router configuration in a Chrome extension. It sets up the route for the home page with authentication protection.\nSOURCE: https://github.com/directus/docs/blob/main/content/tutorials/2.projects/build-a-notebook-chrome-extension-with-directus-auth.md#2025-04-09_snippet_14\n\nLANGUAGE: javascript\nCODE:\n```\nimport HomeView from \"../views/home.vue\";\n```\n\nLANGUAGE: javascript\nCODE:\n```\n{\n    path: \"/\",\n    name: \"home\",\n    meta: { public: false },\n    component: HomeView\n},\n```\n\n----------------------------------------\n\nTITLE: Posts List View Implementation in Svelte\nDESCRIPTION: Creates a protected page that displays all posts with options to delete posts and navigate to edit/create pages. Implements authentication checking and post fetching using Directus SDK.\nSOURCE: https://github.com/directus/docs/blob/main/content/tutorials/1.getting-started/using-authentication-in-sveltekit.md#2025-04-09_snippet_13\n\nLANGUAGE: javascript\nCODE:\n```\n// src/routes/protected/posts/+page.svelte\n\n<script>\n  import { readItems, deleteItem, readMe } from \"@directus/sdk\";\n  import { onMount } from \"svelte\";\n  import { client, isAuthenticated } from \"../../../lib/directus.js\";\n  import { goto } from \"$app/navigation\";\n\n  let posts = [];\n  let errorMessage = \"\";\n  let currentUserId = { id: null };\n\n  async function deletePost(id) {\n    if (confirm(\"Are you sure you want to delete this post?\")) {\n      try {\n        // Delete the post using Directus SDK\n        await client.request(deleteItem(\"posts\", id));\n        posts = posts.filter((post) => post.id !== id); // Remove the post from the list\n        errorMessage = \"\";\n      } catch (error) {\n        console.error(\"Error deleting post:\", error);\n        errorMessage = \"Failed to delete post. Please try again.\";\n      }\n    }\n  }\n\n  onMount(async () => {\n    console.log(\"onMount\");\n\n    // Check if the user is authenticated\n    const isAuth = await isAuthenticated();\n    console.log(\"isAuth\", isAuth);\n\n    if (isAuth.authenticated === false) {\n      goto(\"/login\"); // Redirect to login if not authenticated\n      return;\n    }\n\n    try {\n      // Fetch all posts using Directus SDK\n      const response = await client.request(readItems(\"posts\"));\n      posts = response;\n      console.log(\"posts\", posts);\n\n      // Fetch the current user ID\n      currentUserId = await client.request(readMe({ fields: [\"id\"] }));\n      console.log(\"Current user:\", currentUserId);\n\n      errorMessage = \"\";\n    } catch (error) {\n      console.error(\"Error fetching posts:\", error);\n      errorMessage = \"Failed to load posts. Please refresh the page.\";\n    }\n  });\n</script>\n\n<h1>My Posts</h1>\n\n{#if errorMessage}\n  <div class=\"error-message\">{errorMessage}</div>\n{/if}\n\n{#if posts.length > 0}\n  <div class=\"post-grid\">\n    {#each posts as post}\n      <div class=\"post-card\">\n        <h2>{post.title}</h2>\n        <p>{post.content.substring(0, 100)}...</p>\n\n        <div class=\"card-actions\">\n          {#if post.author === currentUserId?.id}\n            <a href=\"/protected/posts/{post.id}/edit\" class=\"button edit\">Edit</a>\n            <button class=\"button delete\" on:click={() => deletePost(post.id)}>Delete</button>\n          {/if}\n        </div>\n      </div>\n    {/each}\n  </div>\n{:else}\n  <p class=\"no-posts\">No posts found. Why not create one?</p>\n{/if}\n\n<div class=\"actions\">\n  <a href=\"/protected/posts/create\" class=\"button create\">Create New Post</a>\n  <a href=\"/protected\" class=\"button back\">Back to Dashboard</a>\n</div>\n```\n\n----------------------------------------\n\nTITLE: Filtering Published Content with Fetch API in JavaScript\nDESCRIPTION: JavaScript code using the standard Fetch API to retrieve published articles from Directus where the publish date is less than or equal to the current time. Alternative to the SDK approach for dynamic sites.\nSOURCE: https://github.com/directus/docs/blob/main/content/tutorials/7.workflows/schedule-future-content-with-directus-automate.md#2025-04-09_snippet_3\n\nLANGUAGE: js\nCODE:\n```\nconst response = await fetch(\n\t'https://yourdirectusurl.com/items/articles?' +\n\t\tnew URLSearchParams({\n\t\t\tfilter: {\n\t\t\t\t_and: [\n\t\t\t\t\t{\n\t\t\t\t\t\tstatus: {\n\t\t\t\t\t\t\t_eq: 'published',\n\t\t\t\t\t\t},\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\tdate_published: {\n\t\t\t\t\t\t\t_lte: '$NOW',\n\t\t\t\t\t\t},\n\t\t\t\t\t},\n\t\t\t\t],\n\t\t\t},\n\t\t})\n);\n\nconst articles = await response.json();\n```\n\n----------------------------------------\n\nTITLE: Establishing Authenticated WebSocket Client in React\nDESCRIPTION: This snippet creates and authenticates a WebSocket client using Directus SDK.\nSOURCE: https://github.com/directus/docs/blob/main/content/tutorials/2.projects/build-a-multi-user-chat-with-react-and-directus-realtime.md#2025-04-09_snippet_3\n\nLANGUAGE: js\nCODE:\n```\nconst client = createDirectus(url)\n  .with(authentication())\n  .with(realtime());\n```\n\n----------------------------------------\n\nTITLE: Setting Payload Data for Scheduled Content in Directus Automate\nDESCRIPTION: JSON payload used in a Directus flow operation to update the status of content items to 'published'. This is used in the 'Update Data' operation of the automation flow.\nSOURCE: https://github.com/directus/docs/blob/main/content/tutorials/7.workflows/schedule-future-content-with-directus-automate.md#2025-04-09_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n\t\"status\": \"published\"\n}\n```\n\n----------------------------------------\n\nTITLE: Fetching Historical Messages from Directus\nDESCRIPTION: This function retrieves historical messages from the Directus server.\nSOURCE: https://github.com/directus/docs/blob/main/content/tutorials/2.projects/build-a-multi-user-chat-with-react-and-directus-realtime.md#2025-04-09_snippet_10\n\nLANGUAGE: js\nCODE:\n```\nfunction readAllMessages() {\n  client.sendMessage({\n    type: 'items',\n    collection: 'messages',\n    action: 'read',\n    query: {\n      limit: 10,\n      sort: '-date_created',\n      fields: ['*', 'user_created.first_name'],\n    },\n  });\n}\n```\n\n----------------------------------------\n\nTITLE: Fetching Global Metadata in SvelteKit Page Load Function\nDESCRIPTION: SvelteKit page load function that fetches global metadata from Directus. It uses the SDK wrapper to make a request for items in the 'global' collection, which can then be used in the page component.\nSOURCE: https://github.com/directus/docs/blob/main/content/tutorials/1.getting-started/fetch-data-from-directus-with-sveltekit.md#2025-04-09_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\n/** @type {import('./$types').PageLoad} */\nimport getDirectusInstance from '$lib/directus';\nimport { readItems } from '@directus/sdk';\nexport async function load({ fetch }) {\n\tconst directus = getDirectusInstance(fetch);\n\treturn {\n\t\tglobal: await directus.request(readItems('global')),\n\t};\n}\n```\n\n----------------------------------------\n\nTITLE: Adding Directus SDK Plugin to Vue App\nDESCRIPTION: Code snippet showing how to import and provide the Directus SDK plugin to the Vue application.\nSOURCE: https://github.com/directus/docs/blob/main/content/tutorials/2.projects/build-a-notebook-chrome-extension-with-directus-auth.md#2025-04-09_snippet_3\n\nLANGUAGE: js\nCODE:\n```\nimport directus from \"./plugins/directus.js\";\napp.provide(\"directus\", directus);\n```\n\n----------------------------------------\n\nTITLE: Initializing Directus SDK in SvelteKit\nDESCRIPTION: JavaScript code to initialize the Directus SDK client with REST transport in a SvelteKit project, configuring the API endpoint URL.\nSOURCE: https://github.com/directus/docs/blob/main/content/tutorials/2.projects/build-forms-dynamically-using-directus-and-sveltekit.md#2025-04-09_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nimport {\n  createDirectus,\n  rest,\n  readFieldsByCollection,\n  createItem,\n} from \"@directus/sdk\";\n\nconst directusUrl = \"http://localhost:8055\";\n\nexport const directus = createDirectus(directusUrl).with(rest());\n```\n\n----------------------------------------\n\nTITLE: Setting Up Vue Router for Chrome Extension\nDESCRIPTION: JavaScript code for creating a Vue router with routes and configuration for the extension's navigation.\nSOURCE: https://github.com/directus/docs/blob/main/content/tutorials/2.projects/build-a-notebook-chrome-extension-with-directus-auth.md#2025-04-09_snippet_4\n\nLANGUAGE: js\nCODE:\n```\nimport { createWebHistory, createRouter } from \"vue-router\";\nimport HomeView from \"../views/home.vue\";\n\nconst routes = [\n    { path: \"/\", name: \"home\", meta: { public: false }, component: HomeView },\n];\n\nconst router = createRouter({\n    history: createWebHistory(),\n    routes,\n});\n\nexport default router;\n```\n\n----------------------------------------\n\nTITLE: Navigating to Project Directory\nDESCRIPTION: Command to navigate into the newly created project directory.\nSOURCE: https://github.com/directus/docs/blob/main/content/tutorials/1.getting-started/implementing-live-preview-in-react.md#2025-04-09_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\ncd directus-live-preview\n```\n\n----------------------------------------\n\nTITLE: Including Router in Vue Application\nDESCRIPTION: JavaScript code to include the router instance in the Vue application's main.js file.\nSOURCE: https://github.com/directus/docs/blob/main/content/tutorials/2.projects/build-a-notebook-chrome-extension-with-directus-auth.md#2025-04-09_snippet_5\n\nLANGUAGE: js\nCODE:\n```\nimport directus from \"./plugins/directus.js\";\nimport router from \"./plugins/router.js\"; // [!code ++]\n\napp.provide(\"directus\", directus);\napp.use(router); // [!code ++]\n```\n\n----------------------------------------\n\nTITLE: Run Script Function Implementation\nDESCRIPTION: Example TypeScript function that processes data in a Run Script operation, multiplying a value by 2.\nSOURCE: https://github.com/directus/docs/blob/main/content/guides/6.automate/4.operations.md#2025-04-09_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nmodule.exports = function (data) {\n\treturn {\n\t\ttimesTwo: data.previousOperation.value * 2,\n\t};\n};\n```\n\n----------------------------------------\n\nTITLE: Running the Extension Build Command\nDESCRIPTION: Terminal command to build the Chrome extension using the custom build script.\nSOURCE: https://github.com/directus/docs/blob/main/content/tutorials/2.projects/build-a-notebook-chrome-extension-with-directus-auth.md#2025-04-09_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\nnpm run build-extension\n```\n\n----------------------------------------\n\nTITLE: Extending a Base Template in LiquidJS\nDESCRIPTION: This snippet demonstrates how to extend a base template and override specific blocks. It uses the 'layout' tag to reference the base template and defines content for the 'content' block.\nSOURCE: https://github.com/directus/docs/blob/main/content/tutorials/5.extensions/use-dynamic-values-in-custom-email-templates.md#2025-04-09_snippet_1\n\nLANGUAGE: liquid\nCODE:\n```\n{% layout \"my-custom-base\" %}\n{% block content %}\n    <p>Content Here</p>\n{% endblock %}\n```\n\n----------------------------------------\n\nTITLE: Configuring Nuxt Page Router in app.vue\nDESCRIPTION: Sets up the Nuxt application to use the page router by configuring the app.vue template with NuxtRouteAnnouncer and NuxtPage components.\nSOURCE: https://github.com/directus/docs/blob/main/content/tutorials/2.projects/build-forms-dynamically-using-directus-and-nuxt.md#2025-04-09_snippet_5\n\nLANGUAGE: html\nCODE:\n```\n<template>\n  <div>\n    <NuxtRouteAnnouncer />\n    <NuxtPage />\n  </div>\n</template>\n```\n\n----------------------------------------\n\nTITLE: Updating a Relation using RelationsService in JavaScript\nDESCRIPTION: Demonstrates updating a relation's properties using the RelationsService. It updates the 'one_field' metadata for a specific relation and returns the updated data.\nSOURCE: https://github.com/directus/docs/blob/main/content/tutorials/5.extensions/read-collection-data-in-custom-layouts.md#2025-04-09_snippet_13\n\nLANGUAGE: javascript\nCODE:\n```\nrouter.patch('/', async (req, res) => {\n  const relationsService = new RelationsService({\n    schema: await getSchema(),\n    accountability: req.accountability\n  });\n\n  const data = await relationsService.updateOne(\n    'collection_name',\n    'field_name',\n    {\n      meta: {\n        one_field: 'articles',\n      },\n    },\n  );\n\n  res.json(data);\n});\n```\n\n----------------------------------------\n\nTITLE: Creating a Markdown Text Area Component in Vue.js for Directus\nDESCRIPTION: A Vue component that implements a text area input field for markdown content with two-way data binding. The component supports various props from Directus like width, required status, and default values.\nSOURCE: https://github.com/directus/docs/blob/main/content/tutorials/2.projects/build-forms-dynamically-using-directus-and-nuxt.md#2025-04-09_snippet_11\n\nLANGUAGE: vue\nCODE:\n```\n<script setup lang=\"ts\">\nimport { computed } from 'vue'\n\nconst props = defineProps<{\n\tdefaultValue?: string\n\tlabel?: string\n\twidth: string | null\n\tfield: string\n\trequired: boolean\n\toptions: Record<string, any> | null\n\tmodelValue?: string\n}>()\n\nconst emit = defineEmits(['update:modelValue'])\n\nconst fieldWidth = props.width === 'full' ? '100%' : '50%'\n\nconst textAreaValue = computed({\n\tget() {\n\t\treturn props.modelValue || props.defaultValue || ''\n\t},\n\tset(value) {\n\t\temit('update:modelValue', value)\n\t}\n})\n</script>\n\n<template>\n\t<div :style=\"'width: ' + fieldWidth + ';'\">\n\t\t<label for=\"field\">{{ label }}</label>\n\t\t<textarea :name=\"field\" v-model=\"textAreaValue\" rows=\"12\" :required=\"required\" />\n\t</div>\n</template>\n\n<style scoped>\ntextarea {\n\twidth: 100%;\n}\n</style>\n```\n\n----------------------------------------\n\nTITLE: Updating a Collection using CollectionsService in JavaScript\nDESCRIPTION: Demonstrates updating a collection's metadata using the CollectionsService. It updates the note for a specific collection and returns the updated data.\nSOURCE: https://github.com/directus/docs/blob/main/content/tutorials/5.extensions/read-collection-data-in-custom-layouts.md#2025-04-09_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nrouter.patch('/', async (req, res) => {\n  const collectionsService = new CollectionsService({\n    schema: await getSchema(),\n    accountability: req.accountability\n  });\n\n  const data = await collectionsService.updateOne('collection_name', {\n    meta: {\n      note: 'Updated blog posts',\n    },\n  });\n\n  res.json(data);\n});\n```\n\n----------------------------------------\n\nTITLE: Owlet Sensor Real-Time Vitals Data Format\nDESCRIPTION: This JSON structure shows the format of vitals data returned by the Owlet Smart Sock API. It contains vital signs like oxygen level (ox), heart rate (hr), temperature (st), battery level (bat), and various sensor states.\nSOURCE: https://github.com/directus/docs/blob/main/content/tutorials/2.projects/use-directus-as-a-baby-health-tracker-with-owlet-and-ops-genie.md#2025-04-09_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"ox\": 0,\n  \"hr\": 0,\n  \"mv\": 0,\n  \"sc\": 2,\n  \"st\": 0,\n  \"bso\": 0,\n  \"bat\": 100,\n  \"btt\": 0,\n  \"chg\": 2,\n  \"aps\": 0,\n  \"alrt\": 0,\n  \"ota\": 0,\n  \"srf\": 1,\n  \"rsi\": 18,\n  \"sb\": 0,\n  \"ss\": 0,\n  \"mvb\": 0,\n  \"mst\": 0,\n  \"oxta\": 255,\n  \"onm\": 0,\n  \"bsb\": 4,\n  \"mrs\": 0,\n  \"hw\": \"obl\"\n}\n```\n\n----------------------------------------\n\nTITLE: Google Cloud Authentication Commands\nDESCRIPTION: Commands for logging into Google Cloud and setting the project configuration\nSOURCE: https://github.com/directus/docs/blob/main/content/tutorials/6.self-hosting/deploy-directus-to-google-cloud-platform.md#2025-04-09_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\ngcloud auth login\ngcloud config set project PROJECT_ID\n```\n\n----------------------------------------\n\nTITLE: Working with Generated Output Types\nDESCRIPTION: Example of using TypeScript to generate and work with output types from Directus SDK requests.\nSOURCE: https://github.com/directus/docs/blob/main/content/tutorials/3.tips-and-tricks/advanced-types-with-the-directus-sdk.md#2025-04-09_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nasync function getCollectionA() {\n  return await client.request(\n    readItems('collection_a', {\n      fields: ['id']\n    })\n  )\n}\n\n// generated type that can be used in the component\n// resolves to { \"id\": number } in this example\ntype GeneratedType = Awaited<ReturnType<typeof getCollectionA>>;\n```\n\n----------------------------------------\n\nTITLE: Installing Directus SDK in Astro project\nDESCRIPTION: npm command to install the Directus JavaScript SDK in the Astro project. This SDK is used to interact with the Directus API.\nSOURCE: https://github.com/directus/docs/blob/main/content/tutorials/1.getting-started/implementing-live-preview-in-astro.md#2025-04-09_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nnpm install @directus/sdk\n```\n\n----------------------------------------\n\nTITLE: Installing Directus SDK in Astro project\nDESCRIPTION: npm command to install the Directus JavaScript SDK in the Astro project. This SDK is used to interact with the Directus API.\nSOURCE: https://github.com/directus/docs/blob/main/content/tutorials/1.getting-started/implementing-live-preview-in-astro.md#2025-04-09_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nnpm install @directus/sdk\n```\n\n----------------------------------------\n\nTITLE: Implementing Paginated Data Fetching with Directus\nDESCRIPTION: Enhanced server-side implementation adding pagination support and total post count calculation using Directus aggregate function.\nSOURCE: https://github.com/directus/docs/blob/main/content/tutorials/3.tips-and-tricks/implement-pagination-and-infinite-scrolling-in-next-js-.md#2025-04-09_snippet_8\n\nLANGUAGE: javascript\nCODE:\n```\nimport PostList from \"@/components/PostList\";\nimport directus from \"@/lib/directus\";\nimport { aggregate, readItems } from \"@directus/sdk\";\nconst getPosts = async (page, limit) => {\n  \"use server\";\n  return await directus.request(\n    readItems(\"posts\", {\n      limit,\n      page,\n    })\n  );\n};\nconst getTotalPostCount = async () => {\n  const totalCount = await directus.request(\n    aggregate(\"posts\", {\n      aggregate: { count: \"*\" },\n    })\n  );\n  return totalCount[0].count;\n};\nexport default async function Home() {\n  const LIMIT = 6;\n  const initialPosts = await getPosts(1, LIMIT);\n  const totalPostCount = await getTotalPostCount();\n  return (\n    <>\n      <div>\n        <PostList\n          getPosts={getPosts}\n          limit={LIMIT}\n          initialPosts={initialPosts}\n          totalPostCount={totalPostCount}\n        />\n      </div>\n    </>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: HTML Image Element with Alt Text\nDESCRIPTION: A simple HTML image element example showing proper implementation of the alt text attribute for accessibility and SEO, along with width and height attributes to prevent layout shifts during page load.\nSOURCE: https://github.com/directus/docs/blob/main/content/tutorials/3.tips-and-tricks/search-engine-optimization-best-practices.md#2025-04-09_snippet_9\n\nLANGUAGE: html\nCODE:\n```\n<img src=\"https://example.com/image.png\" alt=\"An example image of how alt text works\" width=\"500\" height=\"500\" />\n```\n\n----------------------------------------\n\nTITLE: Creating a Directus Asset Helper in Vue.js Plugin\nDESCRIPTION: Plugin code that injects a Directus client and creates a global asset helper for generating asset URLs from IDs.\nSOURCE: https://github.com/directus/docs/blob/main/content/tutorials/4.migration/migrate-from-nuxt-content-to-directus.md#2025-04-09_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\nexport default({ app }, inject) => {\n   inject('directus', directus)\n   const asset = (id) => `${DIRECTUS_URL}/assets/${id}` // [!code ++]\n   inject('asset', asset) // [!code ++]\n}\n```\n\n----------------------------------------\n\nTITLE: Writing Unit Tests with Vitest in Directus\nDESCRIPTION: Example of writing unit tests for Directus using Vitest. This snippet demonstrates testing a date formatting utility with various test cases.\nSOURCE: https://github.com/directus/docs/blob/main/content/community/3.codebase/3.testing.md#2025-04-09_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport { afterEach, beforeEach, expect, test, vi } from 'vitest';\n\nimport { getDateFormatted } from './get-date-formatted.js';\n\nbeforeEach(() => {\n\tvi.useFakeTimers();\n});\n\nafterEach(() => {\n\tvi.useRealTimers();\n});\n\nfunction getUtcDateForString(date: string) {\n\tconst now = new Date(date);\n\n\t// account for timezone difference depending on the machine where this test is ran\n\tconst timezoneOffsetInMinutes = now.getTimezoneOffset();\n\tconst timezoneOffsetInMilliseconds = timezoneOffsetInMinutes * 60 * 1000;\n\tconst nowUTC = new Date(now.valueOf() + timezoneOffsetInMilliseconds);\n\n\treturn nowUTC;\n}\n\ntest.each([\n\t{ utc: '2023-01-01T01:23:45.678Z', expected: '20230101-12345' },\n\t{ utc: '2023-01-11T01:23:45.678Z', expected: '20230111-12345' },\n\t{ utc: '2023-11-01T01:23:45.678Z', expected: '20231101-12345' },\n\t{ utc: '2023-11-11T12:34:56.789Z', expected: '20231111-123456' },\n\t{ utc: '2023-06-01T01:23:45.678Z', expected: '20230601-12345' },\n\t{ utc: '2023-06-11T12:34:56.789Z', expected: '20230611-123456' },\n])('should format $utc into \"$expected\"', ({ utc, expected }) => {\n\tconst nowUTC = getUtcDateForString(utc);\n\n\tvi.setSystemTime(nowUTC);\n\n\texpect(getDateFormatted()).toBe(expected);\n});\n```\n\n----------------------------------------\n\nTITLE: Using Asset Helper with Image Transformations in Vue.js\nDESCRIPTION: Example of using the global asset helper with additional query parameters for image transformations like resizing.\nSOURCE: https://github.com/directus/docs/blob/main/content/tutorials/4.migration/migrate-from-nuxt-content-to-directus.md#2025-04-09_snippet_9\n\nLANGUAGE: javascript\nCODE:\n```\n<img :src=\"`${$asset(person.image)}?width=50`\">\n```\n\n----------------------------------------\n\nTITLE: Running Unit Tests with pnpm in Directus\nDESCRIPTION: Commands for running unit tests in Directus packages using pnpm. Includes options for specific packages, watch mode, coverage reports, and filtering test files.\nSOURCE: https://github.com/directus/docs/blob/main/content/community/3.codebase/3.testing.md#2025-04-09_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\npnpm --workspace-root test\n\n# Run tests for a specific package (for example only in the api or app package)\npnpm --filter api test\npnpm --filter app test\n\n# Start tests in watch mode\npnpm --filter api test -- --watch\n\n# Enable coverage report\npnpm --filter api test -- --coverage\n\n# Run specific test files using a filter pattern\npnpm --filter api test -- app.test.ts\npnpm --filter api test -- utils\n```\n\n----------------------------------------\n\nTITLE: Importing Posts to Directus with Python\nDESCRIPTION: A Python script that imports posts from a WordPress JSON export to Directus. It reads the JSON file, constructs a payload for each post, and creates new items in the Directus 'Posts' collection using the API.\nSOURCE: https://github.com/directus/docs/blob/main/content/tutorials/4.migration/migrate-from-wordpress-to-directus.md#2025-04-09_snippet_5\n\nLANGUAGE: python\nCODE:\n```\nimport json\nimport requests\n\ndef import_posts_to_directus(json_file_path, directus_url, api_key):\n    \"\"\"\n    Reads posts from a JSON file and imports them into Directus, including handling featured images.\n    \"\"\"\n    with open(json_file_path, \"r\") as file:\n        posts = json.load(file)\n    headers = {\"Authorization\": f\"Bearer {api_key}\", \"Content-Type\": \"application/json\"}\n    for post in posts:\n        # Extract the first image URL from the content and simulate its upload to Directus\n        # Prepare the payload for Directus\n        payload = {\n            \"Title\": post[\"Title\"],\n            \"Content\": post[\"Content\"],\n            \"Date\": post[\"Date\"],\n        }\n        # POST the data to the Directus API\n        response = requests.post(\n            f\"{directus_url}/items/Posts\", headers=headers, json=payload\n        ) # path for pages is /Pages\n        if response.status_code in [200, 201]:\n            print(f\"Post '{post['Title']}' imported successfully.\")\n        else:\n            print(f\"Failed to import post '{post['Title']}': {response.text}\")\n\n# Example usage\njson_file_path = \"modified_WP-data.json\" # change to modified file to post Pages to Directus\ndirectus_url = \"https://your.directus.app\"\napi_key = \"your-api-token\"\n# Uncomment the line below to run the function with your actual Directus URL and API key\nimport_posts_to_directus(json_file_path, directus_url, api_key)\n```\n\n----------------------------------------\n\nTITLE: Integrating Sentry in Directus API with Node.js SDK\nDESCRIPTION: JavaScript code for initializing the Sentry SDK in a Directus hook. Uses createRequire for ES Module compatibility and sets up Sentry with profiling integration, traces sample rate, and profiles sample rate.\nSOURCE: https://github.com/directus/docs/blob/main/content/tutorials/5.extensions/monitor-and-error-track-with-sentry-in-custom-hooks.md#2025-04-09_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nimport { createRequire } from \"module\";\nconst require = createRequire(import.meta.url);\nconst Sentry = require('@sentry/node');\nconst { nodeProfilingIntegration } = require(\"@sentry/profiling-node\");\n\nexport default ({ init }, { env }) => {\n\tSentry.init({\n \t\tdsn: env.SENTRY_DSN,\n\t\tintegrations: [\n\t\t\tnodeProfilingIntegration(),\n\t\t],\n\t\ttracesSampleRate: 1.0,\n\t\tprofilesSampleRate: 1.0,\n\t});\n};\n```\n\n----------------------------------------\n\nTITLE: Setting Panel Size Constraints\nDESCRIPTION: Configuration for minimum width and height of the panel, with settings to handle undefined values. This ensures the panel has enough space to display form fields properly.\nSOURCE: https://github.com/directus/docs/blob/main/content/tutorials/5.extensions/create-collection-items-in-custom-panels.md#2025-04-09_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nminWidth: 24,\nminHeight: 18,\nskipUndefinedKeys: ['responseFormat'],\n```\n\n----------------------------------------\n\nTITLE: Implementing a Preview Plugin for Nuxt\nDESCRIPTION: TypeScript code for a Nuxt plugin that enables content preview functionality by detecting preview query parameters and refreshing page data when needed.\nSOURCE: https://github.com/directus/docs/blob/main/content/tutorials/1.getting-started/implementing-live-preview-in-nuxt.md#2025-04-09_snippet_8\n\nLANGUAGE: typescript\nCODE:\n```\nexport default defineNuxtPlugin((nuxtApp) => {\n    const route = useRoute();\n    const preview = route.query.preview && route.query.preview === 'true';\n\n    if (preview) {\n        nuxtApp.hook('page:finish', () => {\n            refreshNuxtData();\n        });\n    }\n\n    return { provide: { preview } };\n});\n```\n\n----------------------------------------\n\nTITLE: Initializing Directus Extension with CLI\nDESCRIPTION: Commands to create a new Directus extension using the CLI tool and install the Stripe dependency.\nSOURCE: https://github.com/directus/docs/blob/main/content/tutorials/5.extensions/create-new-customers-in-stripe-in-a-custom-hook.md#2025-04-09_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nnpx create-directus-extension@latest\n```\n\nLANGUAGE: shell\nCODE:\n```\ncd directus-endpoint-stripe\nnpm install stripe\n```\n\n----------------------------------------\n\nTITLE: Handling Errors in Extensions (After)\nDESCRIPTION: Updated method for handling errors in Directus extensions, creating custom errors within the extension.\nSOURCE: https://github.com/directus/docs/blob/main/content/releases/3.breaking-changes/1.version-10.md#2025-04-09_snippet_8\n\nLANGUAGE: javascript\nCODE:\n```\nimport { createError } from '@directus/errors';\n\nconst ForbiddenError = createError('MY_EXTENSION_FORBIDDEN', 'No script kiddies please...');\n\nexport default (router) => {\n  router.get('/', (req, res) => {\n    throw new ForbiddenError();\n  });\n};\n```\n\n----------------------------------------\n\nTITLE: Building the Directus Hook Extension\nDESCRIPTION: Command to build the hook extension, compiling the source code into the dist directory.\nSOURCE: https://github.com/directus/docs/blob/main/content/tutorials/5.extensions/create-new-customers-in-stripe-in-a-custom-hook.md#2025-04-09_snippet_10\n\nLANGUAGE: shell\nCODE:\n```\nnpm run build\n```\n\n----------------------------------------\n\nTITLE: Refreshing Authentication Token (Before)\nDESCRIPTION: Previous method for refreshing authentication tokens in the SDK, with parameters in a different order.\nSOURCE: https://github.com/directus/docs/blob/main/content/releases/3.breaking-changes/1.version-10.md#2025-04-09_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\n// refresh http request using a cookie\nconst result = await client.request(refresh('', 'cookie'));\n\n// refresh http request using json\nconst result = await client.request(refresh(refresh_token));\nconst result = await client.request(refresh(refresh_token, 'json'));\n```\n\n----------------------------------------\n\nTITLE: Configuring Display Extension Properties\nDESCRIPTION: JavaScript configuration for the display extension, defining its ID, name, icon, and supported types\nSOURCE: https://github.com/directus/docs/blob/main/content/tutorials/5.extensions/format-dates-in-a-custom-display-extension.md#2025-04-09_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport DisplayComponent from './display.vue';\n\nexport default {\n  id: 'directus-display-age',\n  name: 'Display Age',\n  icon: 'calendar_month',\n  description: 'Display the current age from the date of birth',\n  component: DisplayComponent,\n  options: null,\n  types: ['date'],\n};\n```\n\n----------------------------------------\n\nTITLE: Setting Field Presets for Directus Collection Permissions\nDESCRIPTION: JSON configuration for automatically setting the author field to the current user when creating new posts in Directus.\nSOURCE: https://github.com/directus/docs/blob/main/content/tutorials/1.getting-started/using-authentication-in-nuxt.md#2025-04-09_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\n{\n    \"author\": \"$CURRENT_USER\"\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Module Routes in JavaScript\nDESCRIPTION: Configuration setup for module routing including defining the module ID, name, icon and route paths.\nSOURCE: https://github.com/directus/docs/blob/main/content/tutorials/5.extensions/implement-navigation-in-multipage-custom-modules.md#2025-04-09_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport ModuleComponent from './module.vue';\n\nexport default {\n  id: 'landing-page', // root URI\n  name: 'Landing Page',\n  icon: 'rocket_launch',\n  routes: [\n    {\n      path: '',\n      props: true,\n      component: ModuleComponent,\n    },\n    {\n      name: 'page',\n      path: ':page',\n      props: true,\n      component: ModuleComponent,\n    },\n  ],\n};\n```\n\n----------------------------------------\n\nTITLE: Fetching Data with Nuxt Content\nDESCRIPTION: This asyncData method demonstrates how data was fetched using Nuxt Content. It shows multiple API calls and manual data manipulation to establish relationships between content types.\nSOURCE: https://github.com/directus/docs/blob/main/content/tutorials/4.migration/migrate-from-nuxt-content-to-directus.md#2025-04-09_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nasync asyncData({ $content }) {\n  // Get each type of content\n  let content = await $content('library').sortBy('date', 'desc').fetch()\n  const collections = await $content('collections').sortBy('highlight', 'desc').sortBy('date', 'desc').limit(4).fetch()\n  const people = await $content('people').fetch()\n\n  // Add people to content items, as there are no relationships\n  content = content.map(item => {\n      let people = item.people.map(name => people.find(person => person.dir.split('/')[2] === name))\n      people = profiles.map(profile => ({ ...profile, avatar: `${profile.dir}/${profile.avatar}` }))\n      return { ...item, people }\n  })\n\n  return { content, collections }\n}\n```\n\n----------------------------------------\n\nTITLE: Updating Objects in Algolia Index\nDESCRIPTION: Hook action that updates existing items in Algolia when content is updated in Directus. Handles multiple items using Promise.all.\nSOURCE: https://github.com/directus/docs/blob/main/content/tutorials/5.extensions/integrate-algolia-indexing-with-custom-hooks.md#2025-04-09_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\naction('posts.items.update', async (meta) => {\n    await Promise.all(\n        meta.keys.map(async (key) => await index.partialUpdateObjects([{ objectID: `${key}`, ...meta.payload }])),\n    );\n});\n```\n\n----------------------------------------\n\nTITLE: Implementing Message Submission in Form Handler\nDESCRIPTION: Updates the new message form submit handler to send message text to Directus. It extracts the message text from the form, sends it to the server, and clears the input field after submission.\nSOURCE: https://github.com/directus/docs/blob/main/content/tutorials/2.projects/build-a-multi-user-chat-with-javascript-and-directus-realtime.md#2025-04-09_snippet_11\n\nLANGUAGE: javascript\nCODE:\n```\ndocument.querySelector('#new').addEventListener('submit', function (event) {\n\tevent.preventDefault();\n\tconst text = event.target.elements.text.value; // [!code ++]\n\n  client.sendMessage({ // [!code ++]\n    type: 'items', // [!code ++]\n    collection: 'messages', // [!code ++]\n    action: 'create', // [!code ++]\n    data: { text }, // [!code ++]\n  });\n\n\tdocument.querySelector('#text').value = ''; // [!code ++]\n});\n```\n\n----------------------------------------\n\nTITLE: Updating Items in Elasticsearch Index (JavaScript)\nDESCRIPTION: This hook action updates Elasticsearch documents when items are updated in Directus. It handles multiple updates by mapping over the keys array and sending update requests for each item.\nSOURCE: https://github.com/directus/docs/blob/main/content/tutorials/5.extensions/integrate-elasticsearch-indexing-with-custom-hooks.md#2025-04-09_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\naction(\"books.items.update\", async (meta) => {\n  await Promise.all(\n    meta.keys.map(\n      async (key) =>\n        await client.update({\n          index: \"books\",\n          id: key,\n          doc: meta.payload,\n        })\n    )\n  );\n});\n```\n\n----------------------------------------\n\nTITLE: Managing Collections with useCollectionsStore\nDESCRIPTION: The useCollectionsStore provides CRUD operations for collections, including retrieving all collections, visible collections, specific collection details, and collection manipulation.\nSOURCE: https://github.com/directus/docs/blob/main/content/guides/9.extensions/3.app-extensions/8.composables.md#2025-04-09_snippet_4\n\nLANGUAGE: html\nCODE:\n```\n<script setup>\nimport { useStores } from '@directus/extensions-sdk';\nconst { useCollectionsStore } = useStores();\nconst collectionsStore = useCollectionsStore();\n\n// get all collections\ncollectionsStore.collections.value;\n\n// get all visible collections\ncollectionsStore.visibleCollections.value;\n\n// get a collection\ncollectionStore.getCollection('collection_key');\n\n// delete a collection\nawait collectionStore.deleteCollection('collection_key');\n\n// upsert (create or update) a collection\nawait collectionStore.upsertCollection('collection_key', {...});\n</script>\n```\n\n----------------------------------------\n\nTITLE: Initializing Meilisearch Client in Directus Hook Extension\nDESCRIPTION: Code to initialize the Meilisearch client using environment variables and create a reference to the index that will store Directus data.\nSOURCE: https://github.com/directus/docs/blob/main/content/tutorials/5.extensions/integrate-meilisearch-indexing-with-custom-hooks.md#2025-04-09_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport { MeiliSearch } from 'meilisearch'\n\nconst client = new MeiliSearch({\n  host: process.env.MEILISEARCH_HOST,\n  apiKey: process.env.MEILISEARCH_API_KEY\n})\nconst index = client.index('directus_index')\n```\n\n----------------------------------------\n\nTITLE: GraphQL Client Setup in Public Mode\nDESCRIPTION: Creates a GraphQL WebSocket client with basic configuration for public mode authentication.\nSOURCE: https://github.com/directus/docs/blob/main/content/guides/7.realtime/1.authentication.md#2025-04-09_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport { createClient } from \"graphql-ws\";\n\nconst client = createClient({\n\turl: \"ws://your-directus-url/graphql\",\n\tkeepAlive: 30000,\n});\n```\n\n----------------------------------------\n\nTITLE: Adding Sentry Loader Script to Directus Data Studio Head\nDESCRIPTION: JavaScript code for embedding the Sentry Loader Script into the head of the Directus Data Studio frontend. This allows for monitoring and error tracking in the frontend application.\nSOURCE: https://github.com/directus/docs/blob/main/content/tutorials/5.extensions/monitor-and-error-track-with-sentry-in-custom-hooks.md#2025-04-09_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\nembed(\n\t`head`,\n\t`<script src=\"your-front end-project-loader-script-url\" crossorigin=\"anonymous\"></script>`\n);\n```\n\n----------------------------------------\n\nTITLE: Configuring Directus SDK in Nuxt Plugin\nDESCRIPTION: Creates a Nuxt plugin to initialize the Directus SDK with the correct API URL and makes it available throughout the application via provide/inject pattern.\nSOURCE: https://github.com/directus/docs/blob/main/content/tutorials/1.getting-started/rendering-dynamic-blocks-using-nuxt.md#2025-04-09_snippet_8\n\nLANGUAGE: ts\nCODE:\n```\nimport {\n\tcreateDirectus,\n\trest,\n\treadItems,\n} from \"@directus/sdk\";\nconst directus = createDirectus<DirectusSchema>(\n\t\"http://your-website-url/directus\",\n).with(rest());\nexport default defineNuxtPlugin(() => {\n\treturn {\n\t\tprovide: { directus, readItems },\n\t};\n});\n```\n\n----------------------------------------\n\nTITLE: Creating Frontend Module Extension Command\nDESCRIPTION: Command to generate boilerplate code for a frontend module extension in Directus.\nSOURCE: https://github.com/directus/docs/blob/main/content/tutorials/5.extensions/monitor-and-error-track-with-sentry-in-custom-hooks.md#2025-04-09_snippet_10\n\nLANGUAGE: bash\nCODE:\n```\nnpx create-directus-extension@latest\n├ type: module\n├ name: directus-extension-module-fail\n└ language: javascript\n```\n\n----------------------------------------\n\nTITLE: Implementing Stripe Payment Processing API Route\nDESCRIPTION: Next.js API route that handles creating Stripe checkout sessions for room bookings. It accepts booking details via a POST request, creates a Stripe checkout session with proper line items and metadata, and returns the checkout URL.\nSOURCE: https://github.com/directus/docs/blob/main/content/tutorials/2.projects/build-an-hotel-booking-platform-with-next-js-stripe-and-directus-automate.md#2025-04-09_snippet_11\n\nLANGUAGE: ts\nCODE:\n```\nimport { NextResponse } from \"next/server\";\nimport Stripe from \"stripe\";\n\nconst stripe = new Stripe(process.env.STRIPE_SECRET_KEY as string);\n\ntype RequestData = {\n  first_name: string,\n  last_name: string,\n  email: string,\n  phone_number: string,\n  check_in_date: string,\n  check_out_date: string,\n  room_id: string,\n  nights: number,\n  total_price: string,\n  roomType: string,\n  price: number;\n};\n\nexport async function POST(req: Request) {\n  const {\n    price,\n    roomType,\n    room_id,\n    nights,\n    check_in_date,\n    check_out_date,\n    first_name,\n    last_name,\n    phone_number,\n    email,\n  }: RequestData = await req.json();\n  const totalPrice = price * 100;\n  try {\n    // Create Checkout Session\n    const stripeSession = await stripe.checkout.sessions.create({\n      line_items: [\n        {\n          quantity: 1,\n          price_data: {\n            currency: \"usd\",\n            product_data: {\n              name: roomType,\n              description: `Payment for ${nights} Night(s)`\n            },\n            unit_amount: totalPrice,\n          },\n        },\n      ],\n      mode: \"payment\",\n      success_url: `${process.env.APP_URL}/bookings/success`,\n      cancel_url: `${process.env.APP_URL}/bookings/checkout?checkInDate=${check_in_date}&checkOutDate=${check_out_date}&roomType=${roomType}&price=${price/nights}&room=${room_id}`,\n      metadata: {\n        nights,\n        total_price: totalPrice,\n        room_id,\n        check_in_date,\n        check_out_date,\n        first_name,\n        last_name,\n        phone_number,\n        email,\n      },\n    });\n    console.log(stripeSession);\n    return NextResponse.json({ url: stripeSession.url! });\n  } catch (err) {\n    console.log({ err });\n    return NextResponse.json(\n      { message: \"An expected error occurred, please try again\" },\n      { status: 500 }\n    );\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Initializing CollectionsService in JavaScript\nDESCRIPTION: Sets up a CollectionsService instance within a route handler. This service is used for manipulating data and performing CRUD operations on a collection.\nSOURCE: https://github.com/directus/docs/blob/main/content/tutorials/5.extensions/read-collection-data-in-custom-layouts.md#2025-04-09_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nexport default defineEndpoint((router, context) => {\n  const { services, getSchema } = context;\n  const { CollectionsService } = services;\n\n  router.get('/', async (req, res) => {\n    const collectionsService = new CollectionsService({\n      schema: await getSchema(),\n      accountability: req.accountability\n    });\n\n    // Your route handler logic\n  });\n});\n```\n\n----------------------------------------\n\nTITLE: Installing Directus SDK in Nuxt Project\nDESCRIPTION: NPM command to install the Directus SDK package as a dependency in the Nuxt project.\nSOURCE: https://github.com/directus/docs/blob/main/content/tutorials/1.getting-started/implementing-live-preview-in-nuxt.md#2025-04-09_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nnpm install @directus/sdk\n```\n\n----------------------------------------\n\nTITLE: Creating a Collection using CollectionsService in JavaScript\nDESCRIPTION: Demonstrates how to create a new collection using the CollectionsService. It creates a collection named 'articles' with a note, then reads and returns the created collection data.\nSOURCE: https://github.com/directus/docs/blob/main/content/tutorials/5.extensions/read-collection-data-in-custom-layouts.md#2025-04-09_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nrouter.post('/', async (req, res) => {\n  const collectionsService = new CollectionsService({\n    schema: await getSchema(),\n    accountability: req.accountability\n  });\n\n  const collectionKey = await collectionsService.createOne({\n    collection:'articles',\n    meta: {\n      note: 'Blog posts',\n    },\n  });\n\n  const data = await collectionsService.readOne(collectionKey);\n\n  res.json(record);\n});\n```\n\n----------------------------------------\n\nTITLE: Configuring Display Extension in JavaScript\nDESCRIPTION: Set up the configuration for the custom display extension, including ID, name, icon, and supported field types.\nSOURCE: https://github.com/directus/docs/blob/main/content/tutorials/5.extensions/summarize-relational-items-in-a-custom-display-extension.md#2025-04-09_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport DisplayComponent from './display.vue';\nimport { useStores } from '@directus/extensions-sdk';\n\nexport default {\n\tid: 'directus-display-count-sum',\n\tname: 'Count or Sum a Column',\n\ticon: '123',\n\tdescription: 'Count the related records or display the sum of the select column',\n\tcomponent: DisplayComponent,\n\toptions: null,\n\ttypes: ['alias', 'string', 'uuid', 'integer', 'bigInteger', 'json'],\n\tlocalTypes: ['m2m', 'm2o', 'o2m', 'translations', 'm2a', 'file', 'files'],\n\tfields: (options) => {\n\t\treturn [];\n\t},\n};\n```\n\n----------------------------------------\n\nTITLE: Initializing RelationsService in JavaScript\nDESCRIPTION: Sets up a RelationsService instance within a route handler. This service is used for performing CRUD operations on relations between items.\nSOURCE: https://github.com/directus/docs/blob/main/content/tutorials/5.extensions/read-collection-data-in-custom-layouts.md#2025-04-09_snippet_10\n\nLANGUAGE: javascript\nCODE:\n```\nexport default defineEndpoint((router, context) => {\n  const { services, getSchema } = context;\n  const { RelationsService } = services;\n\n  router.get('/', async (req, res) => {\n    const relationsService = new RelationsService({\n      schema: await getSchema(),\n      accountability: req.accountability\n    });\n\n    // Your route handler logic\n  });\n});\n```\n\n----------------------------------------\n\nTITLE: Implementing Home Page Component\nDESCRIPTION: SolidJS component for rendering global metadata on the home page with loading states\nSOURCE: https://github.com/directus/docs/blob/main/content/tutorials/1.getting-started/fetch-data-from-directus-with-solidstart.md#2025-04-09_snippet_3\n\nLANGUAGE: jsx\nCODE:\n```\nexport const route = {\n  load: () => getGlobals(),\n};\n\nexport default function Home() {\n  const pageInfo = createAsync(getGlobals);\n\n  createEffect(() => {\n    if (pageInfo() === null) {\n      throw new Error(\"404\");\n    }\n  });\n\n  return (\n    <main>\n      <Show when={pageInfo()}>{(info) => <h1>{info().title}</h1>}</Show>\n\n      <Show when={pageInfo()}>\n        {(info) => <strong>{info().description}</strong>}\n      </Show>\n    </main>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Deleting a Relation using RelationsService in JavaScript\nDESCRIPTION: Shows how to delete a relation using the RelationsService. It removes a specified relation by collection and field name and returns the result.\nSOURCE: https://github.com/directus/docs/blob/main/content/tutorials/5.extensions/read-collection-data-in-custom-layouts.md#2025-04-09_snippet_14\n\nLANGUAGE: javascript\nCODE:\n```\nrouter.delete('/', async (req, res) => {\n  const relationsService = new RelationsService({\n    schema: await getSchema(),\n    accountability: req.accountability\n  });\n\n\tconst data = await relationsService.deleteOne(\n    'collection_name',\n    'field_name',\n  );\n\n  res.json(data);\n});\n```\n\n----------------------------------------\n\nTITLE: Configuring Directus Extension CLI\nDESCRIPTION: Example configuration file (extension.config.js) showing available options for customizing the CLI behavior.\nSOURCE: https://github.com/directus/docs/blob/main/content/guides/9.extensions/6.cli.md#2025-04-09_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nexport default {\n\tplugins: [],\n\twatch: {\n\t\tclearScreen: false\n\t}\n};\n```\n\n----------------------------------------\n\nTITLE: Configuring Operation UI Basic Settings\nDESCRIPTION: JavaScript configuration for the operation's basic metadata including ID, name, icon and description\nSOURCE: https://github.com/directus/docs/blob/main/content/tutorials/5.extensions/send-sms-messages-with-twilio-in-custom-operations.md#2025-04-09_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nid: 'operation-twilio-sms',\nname: 'Twilio SMS',\nicon: 'forum',\ndescription: 'Send SMS using the Twilio API.'\n```\n\n----------------------------------------\n\nTITLE: Creating a Vue Component for Custom Display in Directus\nDESCRIPTION: This Vue component example shows how to create a display component in Directus. It receives the field value as a prop and renders it within a template. This component would be used in conjunction with the display entrypoint.\nSOURCE: https://github.com/directus/docs/blob/main/content/guides/9.extensions/3.app-extensions/2.displays.md#2025-04-09_snippet_1\n\nLANGUAGE: vue\nCODE:\n```\n<template>\n\t<div>Value: {{ value }}</div>\n</template>\n\n<script>\nexport default {\n\tprops: {\n\t\tvalue: {\n\t\t\ttype: String,\n\t\t\tdefault: null,\n\t\t},\n\t},\n};\n</script>\n```\n\n----------------------------------------\n\nTITLE: Implementing Display View in Vue\nDESCRIPTION: Create the Vue component for rendering the custom display, including props and calculation logic.\nSOURCE: https://github.com/directus/docs/blob/main/content/tutorials/5.extensions/summarize-relational-items-in-a-custom-display-extension.md#2025-04-09_snippet_3\n\nLANGUAGE: vue\nCODE:\n```\n<template>\n\t<div v-if=\"calculatedValue\">{{ prefix }}{{ calculateValue }}{{ suffix }}</div>\n\t<value-null v-else />\n</template>\n\n<script>\nimport { ref } from 'vue';\n\nexport default {\n\tprops: {\n\t\tvalue: {\n\t\t\ttype: String,\n\t\t\tdefault: null,\n\t\t},\n\t\tcolumn: {\n\t\t\ttype: String,\n\t\t\tdefault: null,\n\t\t},\n\t\tsum: {\n\t\t\ttype: Boolean,\n\t\t\tdefault: false,\n\t\t},\n\t\tprefix: {\n\t\t\ttype: String,\n\t\t\tdefault: null,\n\t\t},\n\t\tsuffix: {\n\t\t\ttype: String,\n\t\t\tdefault: null,\n\t\t},\n\t},\n\tsetup(props) {\n\t\tconst calculatedValue = ref(0);\n\n\t\tif(props.sum){\n\t\t\tprops.value.forEach(item => {\n\t\t\t\tconst columns = props.column.split('.');\n\n\t\t\t\tcolumns.forEach(col => {\n\t\t\t\t\titem = item[col];\n\t\t\t\t});\n\n\t\t\t\tcalculatedValue.value = calculatedValue.value + parseFloat(item);\n\t\t\t});\n\t\t} else {\n\t\t\tcalculatedValue.value = props.value.length;\n\t\t}\n\n\t\treturn { calculatedValue };\n\t},\n};\n</script>\n```\n\n----------------------------------------\n\nTITLE: Enabling Auto-Reload for Directus Extensions in Docker Configuration\nDESCRIPTION: This YAML snippet shows the environment variable to add to your docker-compose.yml file that enables automatic reloading of extensions when they are rebuilt.\nSOURCE: https://github.com/directus/docs/blob/main/content/guides/9.extensions/1.quickstart.md#2025-04-09_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nEXTENSIONS_AUTO_RELOAD: true\n```\n\n----------------------------------------\n\nTITLE: Implementing Breadcrumb in Headline Slot\nDESCRIPTION: Shows how to add a breadcrumb navigation to the headline slot using v-breadcrumb component and conditional rendering.\nSOURCE: https://github.com/directus/docs/blob/main/content/tutorials/5.extensions/understand-available-slots-in-custom-modules.md#2025-04-09_snippet_1\n\nLANGUAGE: vue\nCODE:\n```\n<template v-if=\"breadcrumb\" #headline>\n\t<v-breadcrumb :items=\"breadcrumb\" />\n</template>\n```\n\nLANGUAGE: javascript\nCODE:\n```\n[\n\t{\n\t\tname: 'Home',\n\t\tto: '/landing-page',\n\t},\n]\n```\n\n----------------------------------------\n\nTITLE: Running Image URL Replacement Script\nDESCRIPTION: Bash command to execute the Python script that extracts and replaces image URLs in WordPress content.\nSOURCE: https://github.com/directus/docs/blob/main/content/tutorials/4.migration/migrate-from-wordpress-to-directus.md#2025-04-09_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\npython extract-image.py\n```\n\n----------------------------------------\n\nTITLE: Service Status Check\nDESCRIPTION: Command to check the status of Directus service\nSOURCE: https://github.com/directus/docs/blob/main/content/tutorials/6.self-hosting/deploy-directus-to-an-ubuntu-server.md#2025-04-09_snippet_12\n\nLANGUAGE: bash\nCODE:\n```\nsudo systemctl status directus.service\n```\n\n----------------------------------------\n\nTITLE: Using Sleep Function in Directus Sandboxed API Extensions\nDESCRIPTION: This JavaScript code demonstrates how to use the 'sleep' function from the Directus API in a sandboxed environment. It serves as a replacement for setTimeout and requires the 'sleep' scope to be requested.\nSOURCE: https://github.com/directus/docs/blob/main/content/guides/9.extensions/2.api-extensions/5.sandbox.md#2025-04-09_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nimport { sleep } from 'directus:api';\n\nawait sleep(1000);\n```\n\n----------------------------------------\n\nTITLE: Creating a Dockerfile for Directus Deployment on Digital Ocean\nDESCRIPTION: This Dockerfile configures a Directus container for deployment on Digital Ocean's App Platform. It uses a specific version of Directus, enables corepack for pnpm, sets proper permissions, exposes port 8055, and configures bootstrap and start commands.\nSOURCE: https://github.com/directus/docs/blob/main/content/tutorials/6.self-hosting/deploy-directus-to-digital-ocean.md#2025-04-09_snippet_0\n\nLANGUAGE: dockerfile\nCODE:\n```\n# syntax=docker/dockerfile:1.4\nFROM directus/directus:10.6.2\nUSER root\nRUN corepack enable \\\n&& corepack prepare pnpm@8.7.6 --activate \\\n&& chown node:node /directus\nEXPOSE 8055\nUSER node\nCMD : \\\n&& node /directus/cli.js bootstrap \\\n&& node /directus/cli.js start;\n```\n\n----------------------------------------\n\nTITLE: Creating Observer Reference\nDESCRIPTION: Creating a ref object to observe the loading indicator element.\nSOURCE: https://github.com/directus/docs/blob/main/content/tutorials/3.tips-and-tricks/implement-pagination-and-infinite-scrolling-in-next-js-.md#2025-04-09_snippet_10\n\nLANGUAGE: javascript\nCODE:\n```\nconst observerElem = useRef(null);\n```\n\n----------------------------------------\n\nTITLE: Custom Dockerfile for Fixing PM2 Errors on Digital Ocean\nDESCRIPTION: This Dockerfile creates a custom Directus image that addresses PM2 errors when hosting on Digital Ocean. It installs procps package and sets the PIDUSAGE_USE_PS environment variable to true to resolve issues with the pidusage dependency.\nSOURCE: https://github.com/directus/docs/blob/main/content/tutorials/6.self-hosting/deploy-directus-to-digital-ocean.md#2025-04-09_snippet_2\n\nLANGUAGE: dockerfile\nCODE:\n```\nFROM directus/directus:10.8.1\n\nUSER root\nRUN apk --no-cache add procps\nUSER node\n\nENV PIDUSAGE_USE_PS=true\n```\n\n----------------------------------------\n\nTITLE: Querying Content by Slug using Directus SDK\nDESCRIPTION: Shows how to query a collection and filter by slug to retrieve a single item, as an alternative to using primary keys for content lookup.\nSOURCE: https://github.com/directus/docs/blob/main/content/tutorials/3.tips-and-tricks/search-engine-optimization-best-practices.md#2025-04-09_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nimport { createDirectus, rest, readItems } from '@directus/sdk';\nconst client = createDirectus('directus_project_url').with(rest());\n\nconst slugFromYourFrontEndFramework = params.slug || router.query.slug // whatever your convention your framework follows;\n\nconst posts = await client.request(\n  readItems('posts', {\n    filter: {\n      slug: {\n        _eq: 'slugFromYourFrontEndFramework',\n      },\n    },\n    limit: 1,\n  })\n);\n\nconst post = posts.data[0];\n```\n\n----------------------------------------\n\nTITLE: Building Docker Image for Apple Silicon\nDESCRIPTION: Alternative Docker build command for Apple Silicon machines using buildx\nSOURCE: https://github.com/directus/docs/blob/main/content/tutorials/6.self-hosting/deploy-directus-to-google-cloud-platform.md#2025-04-09_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\ndocker buildx build -t directus:10.10.4 --platform linux/amd64 .\n```\n\n----------------------------------------\n\nTITLE: Setting Up Stripe CLI for Webhook Testing\nDESCRIPTION: Commands for authenticating with Stripe CLI, forwarding webhook events to local development server, and testing payment_intent.succeeded events. These commands help developers test the webhook implementation locally.\nSOURCE: https://github.com/directus/docs/blob/main/content/tutorials/2.projects/build-an-ecommerce-platform-with-next-js-stripe-and-directus-automate.md#2025-04-09_snippet_22\n\nLANGUAGE: bash\nCODE:\n```\nstripe login\n```\n\nLANGUAGE: bash\nCODE:\n```\nstripe listen --forward-to localhost:3000/api/webhook/stripe\n```\n\nLANGUAGE: bash\nCODE:\n```\nstripe trigger payment_intent.succeeded\n```\n\n----------------------------------------\n\nTITLE: Defining Directus Context Types for Inngest Integration\nDESCRIPTION: Creates TypeScript interfaces that define the Directus context structure for use with Inngest. These types allow for strongly-typed access to Directus services, database connections, and other core functionality within Inngest functions.\nSOURCE: https://github.com/directus/docs/blob/main/content/tutorials/7.workflows/invincible-ai-content-workflows-with-inngest-and-directus.md#2025-04-09_snippet_3\n\nLANGUAGE: tsx\nCODE:\n```\n// src/inngest/types.ts\nimport type { Accountability, Item, PrimaryKey, Query, SchemaOverview } from '@directus/types';\nimport type { Knex } from 'knex';\nimport type { EventEmitter } from 'node:events';\nimport type { Logger } from 'pino';\n\nexport interface AbstractService {\n  knex: Knex;\n  accountability: Accountability | null | undefined;\n\n  createOne: (data: Partial<Item>) => Promise<PrimaryKey>;\n  createMany: (data: Partial<Item>[]) => Promise<PrimaryKey[]>;\n\n  readOne: (key: PrimaryKey, query?: Query) => Promise<Item>;\n  readMany: (keys: PrimaryKey[], query?: Query) => Promise<Item[]>;\n  readByQuery: (query: Query) => Promise<Item[]>;\n\n  updateOne: (key: PrimaryKey, data: Partial<Item>) => Promise<PrimaryKey>;\n  updateMany: (keys: PrimaryKey[], data: Partial<Item>) => Promise<PrimaryKey[]>;\n\n  deleteOne: (key: PrimaryKey) => Promise<PrimaryKey>;\n  deleteMany: (keys: PrimaryKey[]) => Promise<PrimaryKey[]>;\n}\n\nexport interface DirectusServices {\n  [key: string]: AbstractService;\n}\n\nexport interface DirectusContext {\n  services: DirectusServices;\n  database: Knex;\n  getSchema: () => Promise<SchemaOverview>;\n  env: Record<string, any>;\n  logger: Logger;\n  emitter: EventEmitter;\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Directus WebSocket and CORS Settings\nDESCRIPTION: Docker compose configuration for enabling WebSocket and CORS settings in Directus\nSOURCE: https://github.com/directus/docs/blob/main/content/tutorials/2.projects/build-a-realtime-chat-app-with-directus-and-sveltekit.md#2025-04-09_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nWEBSOCKETS_ENABLED: \"true\"\nCORS_ENABLED: \"true\" \nCORS_ORIGIN: \"http://localhost:5173\" \nCORS_CREDENTIALS: \"true\" \n```\n\n----------------------------------------\n\nTITLE: Creating Directus Hooks for Inngest Integration\nDESCRIPTION: Implements a Directus hook that listens for file upload events and triggers an Inngest workflow. The hook filters for image uploads to the directus_files collection and sends relevant data to Inngest for processing.\nSOURCE: https://github.com/directus/docs/blob/main/content/tutorials/7.workflows/invincible-ai-content-workflows-with-inngest-and-directus.md#2025-04-09_snippet_6\n\nLANGUAGE: tsx\nCODE:\n```\n// src/hooks/index.ts\nimport type { EventContext } from '@directus/types';\nimport { defineHook } from '@directus/extensions-sdk';\nimport { inngest } from '../inngest/client';\n\nexport default defineHook(({ action }) => {\n  action('files.upload', (event, context: EventContext) => {\n    if (event.collection === 'directus_files' && event.payload.type.startsWith('image/')) {\n      inngest.send({\n        name: 'image-uploaded',\n        data: {\n          event,\n          accountability: context.accountability,\n        },\n      });\n    }\n  });\n});\n```\n\n----------------------------------------\n\nTITLE: Updating File Tags in Directus\nDESCRIPTION: JSON payload structure for updating the tags field of a file in Directus with the processed Clarifai concepts.\nSOURCE: https://github.com/directus/docs/blob/main/content/tutorials/7.workflows/tag-images-with-clarifai-and-directus-automate.md#2025-04-09_snippet_3\n\nLANGUAGE: json\nCODE:\n```\n{\n\t\"tags\": \"{{concepts}}\"\n}\n```\n\n----------------------------------------\n\nTITLE: Displaying Datacenter Regions Table in Markdown\nDESCRIPTION: This code snippet creates a markdown table showing the available datacenter regions for Enterprise and Professional tiers in Directus Cloud. It lists various locations and indicates availability with checkmarks.\nSOURCE: https://github.com/directus/docs/blob/main/content/cloud/2.projects/1.create.md#2025-04-09_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n<table>\n  <tr>\n    <th>Region</th>\n    <th>Enterprise</th>\n    <th>Professional</th>\n  </tr>\n  <tr>\n    <td>United States, N. Virginia</td>\n    <td>✅</td>\n    <td>✅</td>\n  </tr>\n  <tr>\n    <td>Europe, Frankfurt</td>\n    <td>✅</td>\n    <td>✅</td>\n  </tr>\n  <tr>\n    <td>Asia Pacific, Singapore</td>\n    <td>✅</td>\n    <td>✅</td>\n  </tr>\n  <tr>\n    <td>United States, Ohio</td>\n    <td>✅</td>\n    <td>✅</td>\n  </tr>\n  <tr>\n    <td>United States, N. California</td>\n    <td>✅</td>\n    <td></td>\n  </tr>\n  <tr>\n    <td>United States, Oregon</td>\n    <td>✅</td>\n    <td></td>\n  </tr>\n  <tr>\n    <td>Africa, Cape Town</td>\n    <td>✅</td>\n    <td></td>\n  </tr>\n  <tr>\n    <td>Asia Pacific, Sydney</td>\n    <td>✅</td>\n    <td></td>\n  </tr>\n  <tr>\n    <td>Canada, Central</td>\n    <td>✅</td>\n    <td></td>\n  </tr>\n  <tr>\n    <td>Europe, London</td>\n    <td>✅</td>\n    <td></td>\n  </tr>\n  <tr>\n    <td>Europe, Milan</td>\n    <td>✅</td>\n    <td></td>\n  </tr>\n  <tr>\n    <td>Europe, Paris</td>\n    <td>✅</td>\n    <td></td>\n  </tr>\n  <tr>\n    <td>Europe, Stockholm</td>\n    <td>✅</td>\n    <td></td>\n  </tr>\n  <tr>\n    <td>Europe, Zurich</td>\n    <td>✅</td>\n    <td></td>\n  </tr>\n  <tr>\n    <td>South America, São Paulo</td>\n    <td>✅</td>\n    <td></td>\n  </tr>\n</table>\n```\n\n----------------------------------------\n\nTITLE: Processing Clarifai Concepts in JavaScript\nDESCRIPTION: JavaScript function that filters Clarifai recognition results to extract concept names with confidence scores above 0.95.\nSOURCE: https://github.com/directus/docs/blob/main/content/tutorials/7.workflows/tag-images-with-clarifai-and-directus-automate.md#2025-04-09_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nmodule.exports = async function(data) {\n\treturn data.clarifai.data.outputs[0].data.concepts\n    \t\t\t.filter(concept => concept.value > 0.95)\n                .map(concept => concept.name)\n}\n```\n\n----------------------------------------\n\nTITLE: Complex Logical Operator Filter\nDESCRIPTION: Advanced example combining multiple conditions using _and and _or operators for complex filtering logic.\nSOURCE: https://github.com/directus/docs/blob/main/content/guides/4.connect/2.filter-rules.md#2025-04-09_snippet_4\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"_or\": [\n    {\n      \"_and\": [\n        {\n          \"user_created\": {\n            \"_eq\": \"$CURRENT_USER\"\n          }\n        },\n        {\n          \"status\": {\n            \"_in\": [\"published\", \"draft\"]\n          }\n        }\n      ]\n    },\n    {\n      \"_and\": [\n        {\n          \"user_created\": {\n            \"_neq\": \"$CURRENT_USER\"\n          }\n        },\n        {\n          \"status\": {\n            \"_in\": [\"published\"]\n          }\n        }\n      ]\n    }\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Adding Navigation to Laravel Blade Views\nDESCRIPTION: HTML navigation component with Laravel Blade syntax to display navigation links. It loops through the navigation items provided by the ViewServiceProvider.\nSOURCE: https://github.com/directus/docs/blob/main/content/tutorials/1.getting-started/fetch-data-from-directus-with-laravel.md#2025-04-09_snippet_18\n\nLANGUAGE: html\nCODE:\n```\n<!-- put this after the <body> tag in all your views file -->\n<nav>\n    @foreach($navigation as $item)\n        @if(isset($item['url']) && isset($item['label']))\n            <a href=\"{{ $item['url'] }}\">{{ $item['label'] }}</a>\n        @else\n            <p>Invalid navigation item</p>\n        @endif\n    @endforeach\n</nav>\n```\n\n----------------------------------------\n\nTITLE: Fetching Page Data with Directus SDK in JavaScript\nDESCRIPTION: This snippet demonstrates how to use the Directus SDK to fetch page data based on a slug. It uses the readItems method with field parameters to retrieve nested relational M2A data for page blocks.\nSOURCE: https://github.com/directus/docs/blob/main/content/tutorials/1.getting-started/create-reusable-blocks-with-many-to-any-relationships.md#2025-04-09_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nimport { createDirectus, rest, readItems } from '@directus/sdk';\n\n// Initialize the SDK.\nconst directus = createDirectus('https://directus.example.com').with(rest());\n\n// Write some code here in your front-end framework that gets the slug from the current URL.\nconst slug = 'the-ultimate-guide-to-rabbits';\n\n// Fetch page data using the SDK.\nconst pages = await directus.request(\n\treadItems('pages', {\n\t\tfilter: {\n\t\t\tslug: { _eq: slug },\n\t\t},\n\t\tfields: [\n\t\t\t'*',\n\t\t\t{\n\t\t\t\tblocks: [\n\t\t\t\t\t'*',\n\t\t\t\t\t{\n\t\t\t\t\t\titem: {\n\t\t\t\t\t\t\tblock_hero: ['*'],\n\t\t\t\t\t\t\tblock_cardgroup: ['*'],\n\t\t\t\t\t\t\tblock_richtext: ['*'],\n\t\t\t\t\t\t},\n\t\t\t\t\t},\n\t\t\t\t],\n\t\t\t},\n\t\t],\n\t\tlimit: 1,\n\t})\n);\nconst page = page[0];\n```\n\n----------------------------------------\n\nTITLE: Configuring OpenID Role Mapping with Developer Priority\nDESCRIPTION: Example configuration showing how to map OpenID groups to Directus roles with developer role taking precedence over admin role. When a user belongs to both groups, they will be assigned the developer role.\nSOURCE: https://github.com/directus/docs/blob/main/content/configuration/auth-sso.md#2025-04-09_snippet_2\n\nLANGUAGE: json\nCODE:\n```\nAUTH_<PROVIDER>_ROLE_MAPPING: json:{ \"developer\": \"directus_developer_role_id\", \"admin\": \"directus_admin_role_id\" }\"\n```\n\n----------------------------------------\n\nTITLE: Filtering Specific CRUD Actions in GraphQL Subscriptions\nDESCRIPTION: Use the 'event' argument in a GraphQL subscription query to filter for specific create, update, or delete events in a collection.\nSOURCE: https://github.com/directus/docs/blob/main/content/guides/7.realtime/2.subscriptions.md#2025-04-09_snippet_8\n\nLANGUAGE: graphql\nCODE:\n```\nsubscription {\n\tposts_mutated(event: create) {\n\t\tkey\n\t\tdata {\n\t\t\ttext\n\t\t}\n\t}\n}\n```\n\n----------------------------------------\n\nTITLE: Permission Check Implementation\nDESCRIPTION: Implementation of permission checking logic for the endpoint using Directus API\nSOURCE: https://github.com/directus/docs/blob/main/content/tutorials/5.extensions/check-permissions-in-a-custom-endpoint.md#2025-04-09_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nrouter.get('/payments', async (req, res) => {\n  try {\n      const response = await fetch(\"http://directus.example.com/permissions/me\", {\n        headers: {\n          'Authorization': `Bearer ${req.token}`,\n          'Content-Type': 'application/json'\n        }\n      });\n\n      const permissions = await response.json();\n  }\n  catch(e) {\n    res.sendStatus(401);\n  }\n});\n```\n\n----------------------------------------\n\nTITLE: Configuring CORS in Docker Compose for Directus\nDESCRIPTION: Docker compose configuration for enabling CORS in Directus with specific origin and credentials settings\nSOURCE: https://github.com/directus/docs/blob/main/content/tutorials/1.getting-started/using-authentication-in-sveltekit.md#2025-04-09_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n   CORS_ENABLED: \"true\"\n   CORS_ORIGIN: \"http://localhost:5173\"\n   CORS_CREDENTIALS: \"true\"\n```\n\n----------------------------------------\n\nTITLE: Configuring CORS Environment Variables for Directus\nDESCRIPTION: YAML configuration for enabling CORS in a Directus instance to allow cross-origin requests from the React application.\nSOURCE: https://github.com/directus/docs/blob/main/content/tutorials/1.getting-started/using-authentication-in-react.md#2025-04-09_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\nenvironment:\n  CORS_ENABLED: \"true\"\n  CORS_ORIGIN: \"true\"\n```\n\n----------------------------------------\n\nTITLE: Basic Filter Syntax in JSON\nDESCRIPTION: Demonstrates the basic structure of a filter rule with field, operator, and value components. Example shows filtering a title field that contains 'Directus'.\nSOURCE: https://github.com/directus/docs/blob/main/content/guides/4.connect/2.filter-rules.md#2025-04-09_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"title\": {\n    \"_contains\": \"Directus\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing a Post Controller for Directus Integration\nDESCRIPTION: PHP controller class that fetches blog posts from Directus and passes them to Laravel views. It includes methods for listing posts and showing individual post details.\nSOURCE: https://github.com/directus/docs/blob/main/content/tutorials/1.getting-started/fetch-data-from-directus-with-laravel.md#2025-04-09_snippet_12\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\nnamespace App\\Http\\Controllers;\n\nuse Illuminate\\Http\\Request;\n\nclass PostController extends Controller\n{\n    public function index()\n    {\n        $directus = app('directus');\n        $postsResponse = $directus->get('posts', [\n            'sort' => ['-date_created'],\n            'limit' => 10\n        ]);\n        $posts = $postsResponse['data'];\n\n        return view('posts.index', compact('posts'));\n    }\n\n    public function show($id)\n    {\n        $directus = app('directus');\n        $postResponse = $directus->get('posts', $id);\n        $post = $postResponse['data'];\n        return view('posts.show', compact('post'));\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: OpsGenie Alert Payload Template in JSON\nDESCRIPTION: JSON template for creating an OpsGenie alert, using dynamic values from the alert evaluation step using mustache syntax.\nSOURCE: https://github.com/directus/docs/blob/main/content/tutorials/2.projects/use-directus-as-a-baby-health-tracker-with-owlet-and-ops-genie.md#2025-04-09_snippet_6\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"category\": \"{{exec_alert_logic.alert_data.category}}\",\n    \"type\": \"{{exec_alert_logic.alert_data.type}}\",\n    \"severity\": \"{{exec_alert_logic.alert_data.severity}}\",\n    \"priority\": \"{{exec_alert_logic.alert_data.priority}}\",\n    \"alias\": \"{{exec_alert_logic.alert_data.alias}}\",\n    \"message\": \"{{exec_alert_logic.alert_data.message}}\",\n    \"description\": \"{{exec_alert_logic.alert_data.description}}\"\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Ingress for External Access to Directus\nDESCRIPTION: YAML configuration for an Ingress resource that exposes the Directus service externally. It specifies the host, path, and backend service details for routing traffic to Directus.\nSOURCE: https://github.com/directus/docs/blob/main/content/tutorials/6.self-hosting/understanding-kubernetes.md#2025-04-09_snippet_10\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: networking.K8s.io/v1\nkind: Ingress\nmetadata:\n  labels:\n    app.kubernetes.io/instance: directus\n    app.kubernetes.io/name: directus\n  name: directus\nspec:\n  rules:\n  - host: directus.app\n    http:\n      paths:\n      - backend:\n          service:\n            name: directus\n            port:\n              number: 80\n        path: /\n        pathType: ImplementationSpecific\n```\n\n----------------------------------------\n\nTITLE: Setting up Directus API Service with Retrofit\nDESCRIPTION: Creates a Retrofit-based API service interface for communicating with Directus. The companion object provides a factory method that configures Retrofit with the appropriate base URL and JSON converter.\nSOURCE: https://github.com/directus/docs/blob/main/content/tutorials/1.getting-started/fetch-data-from-directus-in-android-with-kotlin.md#2025-04-09_snippet_2\n\nLANGUAGE: kotlin\nCODE:\n```\npackage com.example.directusapp.network\nimport com.example.directusapp.Constants\nimport retrofit2.Retrofit\nimport retrofit2.converter.gson.GsonConverterFactory\n\ninterface DirectusApiService {\n    companion object {\n\n        fun create(): DirectusApiService {\n            val retrofit = Retrofit.Builder()\n                .baseUrl(Constants.BASE_URL)\n                .addConverterFactory(GsonConverterFactory.create())\n                .build()\n            return retrofit.create(DirectusApiService::class.java)\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Running Directus with Docker Quickstart Command\nDESCRIPTION: This command runs a Directus container on port 8055. It's a quick way to explore Directus, but lacks persistence.\nSOURCE: https://github.com/directus/docs/blob/main/content/getting-started/2.create-a-project.md#2025-04-09_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ndocker run -p 8055:8055 directus/directus\n```\n\n----------------------------------------\n\nTITLE: Initializing Flutter Project with Command Line\nDESCRIPTION: Command to create a new Flutter project called 'my_directus_app' using the Flutter CLI.\nSOURCE: https://github.com/directus/docs/blob/main/content/tutorials/1.getting-started/fetch-data-from-directus-with-flutter.md#2025-04-09_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nflutter create my_directus_app\n```\n\n----------------------------------------\n\nTITLE: Creating Testimonial Carousel Component\nDESCRIPTION: Carousel component to display multiple testimonial cards with horizontal scrolling.\nSOURCE: https://github.com/directus/docs/blob/main/content/tutorials/2.projects/build-a-testimonial-widget-with-sveltekit-and-directus.md#2025-04-09_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\n<script context=\"module\">\n  import TestimonialCard from \"$lib/TestimonialCard.svelte\";\n\n  export const getCarouselId = (index, carouselName = \"carousel\") =>\n    `${carouselName}-item-${index}`;\n</script>\n\n<script>\n  export let data;\n</script>\n\n<ul class=\"carousel-ul\">\n  {#each data.testimonials as testimonial, index}\n    <svelte:component\n      this={TestimonialCard}\n      id={getCarouselId(index)}\n      {...testimonial}\n    />\n  {/each}\n</ul>\n```\n\n----------------------------------------\n\nTITLE: Implementing Like/Spiciness API Endpoint in TypeScript with Directus\nDESCRIPTION: This code implements a server API endpoint that handles user interaction with a spiciness meter. It tracks user likes by hashing IP addresses for anonymity, limits votes to 11 per user, and maintains individual user counts while calculating total likes across all users.\nSOURCE: https://github.com/directus/docs/blob/main/content/tutorials/2.projects/how-i-built-an-ai-open-source-santa-roast-app-with-directus-and-nuxt.md#2025-04-09_snippet_4\n\nLANGUAGE: tsx\nCODE:\n```\n// server/api/profiles/[username]/likes.post.ts\nimport type { LikesResponse } from '~~/shared/types/endpoints.js';\n\nexport default defineEventHandler(async (event): Promise<LikesResponse> => {\n\tconst username = getRouterParam(event, 'username');\n\n\tif (!username) throw createError({ statusCode: 400, message: 'Missing username. username is required.' });\n\n\tconst ip =\n\t\t(event.node.req.headers['x-forwarded-for'] as string) ||\n\t\t(event.node.req.headers['x-vercel-forwarded-for'] as string);\n\n\tconst visitorHash = createVisitorHash(ip, process.env.SALT as string);\n\n\ttry {\n\t\t// Get existing profile with all likes\n\t\tconst existingProfile = await directusServer.request(\n\t\t\treadItem('profiles', username, {\n\t\t\t\tfields: [\n\t\t\t\t\t'username',\n\t\t\t\t\t{\n\t\t\t\t\t\tlikes: ['id', 'visitor_hash', 'profile', 'count'],\n\t\t\t\t\t},\n\t\t\t\t],\n\t\t\t}),\n\t\t);\n\n\t\tif (!existingProfile) {\n\t\t\tthrow createError({ statusCode: 404, message: 'Profile not found.' });\n\t\t}\n\n\t\t// Get user's specific like record\n\t\tconst userLike = existingProfile.likes?.find(like => like.visitor_hash === visitorHash);\n\n\t\tconst body = await readBody(event);\n\t\tconst newCount = Math.min(Math.max(body.count || 0, 0), 11);\n\n\t\tlet like;\n\n\t\tif (userLike) {\n\t\t\t// Update existing like record\n\t\t\tlike = await directusServer.request(\n\t\t\t\tupdateItem('likes', userLike.id, {\n\t\t\t\t\tprofile: existingProfile.username,\n\t\t\t\t\tcount: newCount,\n\t\t\t\t}),\n\t\t\t);\n\t\t} else {\n\t\t\t// Create new like record\n\t\t\tlike = await directusServer.request(\n\t\t\t\t\tcreateItem('likes', {\n\t\t\t\t\t\tprofile: existingProfile.username,\n\t\t\t\t\t\tvisitor_hash: visitorHash,\n\t\t\t\t\t\tcount: newCount,\n\t\t\t\t\t}),\n\t\t\t);\n\t\t}\n\n\t\t// Calculate total likes by summing all likes\n\t\tconst totalLikes = existingProfile.likes?.reduce((sum, like) => {\n\t\t\t// If this is the user's like, use the new count\n\t\t\tif (like.visitor_hash === visitorHash) {\n\t\t\t\treturn sum + newCount;\n\t\t\t}\n\t\t\treturn sum + (like.count || 0);\n\t\t}, 0);\n\n\t\tconst response: LikesResponse = {\n\t\t\tusername: existingProfile.username,\n\t\t\ttotalLikes: totalLikes || 0,\n\t\t\tuserLikeCount: newCount,\n\t\t};\n\n\t\treturn response;\n\t} catch (error) {\n\t\tconsole.error('Error updating like count:', error);\n\t\tthrow createError({\n\t\t\tstatusCode: 500,\n\t\t\tmessage: 'Failed to update like count.',\n\t\t});\n\t}\n});\n```\n\n----------------------------------------\n\nTITLE: Creating a Blog Post Template with Jinja in Flask\nDESCRIPTION: A Jinja template for rendering a blog post page. It extends a base template and displays the post title, publish date, author, image, and content. The image URL includes query parameters for format conversion and width constraints.\nSOURCE: https://github.com/directus/docs/blob/main/content/tutorials/1.getting-started/fetch-data-from-directus-with-flask.md#2025-04-09_snippet_13\n\nLANGUAGE: jinja\nCODE:\n```\n{% extends \"base.html\" %}\n{% block content %}\n<header>\n\t<h1>{% block title %}{{ post[\"title\"] }}{% endblock %}</h1>\n\t<span> {{ post[\"publish_date\"] }} &bull; {{ post[\"author\"][\"name\"] }} </span>\n</header>\n<hr />\n<article>\n\t<img src=\"{{ post[\"image\"] + \"?format=webp&width=400\" }}\" />\n\t<section>{{ post[\"content\"] | safe }}</section>\n</article>\n{% endblock %}\n```\n\n----------------------------------------\n\nTITLE: Image Transformation Parameter in Directus\nDESCRIPTION: Demonstrates how to add a width parameter to transform image dimensions.\nSOURCE: https://github.com/directus/docs/blob/main/content/getting-started/6.upload-files.md#2025-04-09_snippet_1\n\nLANGUAGE: plaintext\nCODE:\n```\nwidth=200\n```\n\n----------------------------------------\n\nTITLE: Defining App Configuration for Notify on Event Operation in TypeScript\nDESCRIPTION: This snippet defines the app configuration for the 'notify_on_event' operation. It specifies the operation's ID, name, icon, description, and options for configuring recipients and events.\nSOURCE: https://github.com/directus/docs/blob/main/content/tutorials/3.tips-and-tricks/build-a-monitoring-pipeline-for-flows-and-extensions-.md#2025-04-09_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nimport { defineOperationApp } from '@directus/extensions-sdk';\n\nexport default defineOperationApp({\n\tid: 'notify_on_event',\n\tname: 'Notify on event',\n\ticon: 'box',\n\tdescription: 'Sends out error emails. Must be paired with an event hook of type action.',\n\toverview: ({ to, events }) => [\n\t\t{\n\t\t\tlabel: 'To',\n\t\t\ttext: Array.isArray(to) ? to.join(', ') : to,\n\t\t},\n\t\t{\n\t\t\tlabel: 'Events',\n\t\t\ttext: Array.isArray(events) ? to.join(', ') : events,\n\t\t}\n\t],\n\toptions: [\n\t\t{\n\t\t\tfield: 'to',\n\t\t\tname: 'To',\n\t\t\ttype: 'csv',\n\t\t\tmeta: {\n\t\t\t\twidth: 'full',\n\t\t\t\tinterface: 'tags',\n\t\t\t\toptions: {\n\t\t\t\t\tplaceholder: '$t:operations.mail.to_placeholder',\n\t\t\t\t\ticonRight: 'alternate_email',\n\t\t\t\t},\n\t\t\t},\n\t\t},\n\t\t{\n\t\t\tfield: 'events',\n\t\t\tname: 'Events',\n\t\t\ttype: 'csv',\n\t\t\tmeta: {\n\t\t\t\twidth: 'full',\n\t\t\t\tinterface: 'tags',\n\t\t\t\toptions: {\n\t\t\t\t\tplaceholder: 'Nach jedem Event mit ENTER bestätigen',\n\t\t\t\t},\n\t\t\t},\n\t\t},\n\t],\n});\n```\n\n----------------------------------------\n\nTITLE: Adding Custom Message Input Field\nDESCRIPTION: Renders a textarea for custom message entry when no default message is provided in the configuration.\nSOURCE: https://github.com/directus/docs/blob/main/content/tutorials/5.extensions/send-sms-messages-with-twilio-in-custom-panels.md#2025-04-09_snippet_20\n\nLANGUAGE: html\nCODE:\n```\n<v-textarea class=\"custom-message\" v-model=\"customMessage\" v-if=\"message == null\"></v-textarea>\n```\n\n----------------------------------------\n\nTITLE: Creating a Single Blog Post View\nDESCRIPTION: HTML template for displaying a single blog post with Laravel Blade syntax. It shows the post title, creation date, content, and a link back to the blog index.\nSOURCE: https://github.com/directus/docs/blob/main/content/tutorials/1.getting-started/fetch-data-from-directus-with-laravel.md#2025-04-09_snippet_14\n\nLANGUAGE: html\nCODE:\n```\n<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <title>{{ $post['title'] }}</title>\n</head>\n<body>\n    <h1>{{ $post['title'] }}</h1>\n    <p>Posted on: {{ date('F j, Y', strtotime($post['date_created'])) }}</p>\n    {!! $post['content'] !!}\n    <a href=\"{{ route('posts.index') }}\">Back to Blog</a>\n</body>\n</html>\n```\n\n----------------------------------------\n\nTITLE: Authentication Token Structure JSON Example\nDESCRIPTION: Example JSON structure showing the format of an authentication token response when logging into Directus. Referenced in the partial content tag but actual code not visible in the provided text.\nSOURCE: https://github.com/directus/docs/blob/main/content/guides/3.auth/1.tokens-cookies.md#2025-04-09_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n// Note: This is a placeholder as the actual code snippet is not shown in the content\n{\n  \"access_token\": \"<token>\",\n  \"refresh_token\": \"<token>\"\n}\n```\n\n----------------------------------------\n\nTITLE: Complete Operation UI Implementation\nDESCRIPTION: Full implementation of the operation's frontend interface including all UI components and configurations\nSOURCE: https://github.com/directus/docs/blob/main/content/tutorials/5.extensions/send-sms-messages-with-twilio-in-custom-operations.md#2025-04-09_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nexport default {\n\tid: 'operation-twilio-sms',\n\tname: 'Twilio SMS',\n\ticon: 'forum',\n\tdescription: 'Send SMS using the Twilio API.',\n\toverview: ({ phone_number, message }) => [\n\t\t{\n\t\t\tlabel: 'Phone Number',\n\t\t\ttext: phone_number,\n\t\t},\n\t\t{\n\t\t\tlabel: 'Message',\n\t\t\ttext: message,\n\t\t},\n\t],\n\toptions: [\n\t\t{\n\t\t\tfield: 'phone_number',\n\t\t\tname: 'Phone Number',\n\t\t\ttype: 'string',\n\t\t\tmeta: {\n\t\t\t\twidth: 'full',\n\t\t\t\tinterface: 'input',\n\t\t\t},\n\t\t},\n\t\t{\n\t\t\tfield: 'message',\n\t\t\tname: 'Message',\n\t\t\ttype: 'text',\n\t\t\tmeta: {\n\t\t\t\twidth: 'full',\n\t\t\t\tinterface: 'input-multiline',\n\t\t\t},\n\t\t},\n\t],\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Nuxt Proxy for Directus Access\nDESCRIPTION: Nuxt configuration to set up a proxy that allows access between the Nuxt application and Directus API.\nSOURCE: https://github.com/directus/docs/blob/main/content/tutorials/1.getting-started/implementing-multilingual-content-using-directus-and-nuxt.md#2025-04-09_snippet_5\n\nLANGUAGE: ts\nCODE:\n```\nrouteRules: {\n\"/directus/**\": { proxy: `${import.meta.env.API_URL}/**` },\n},\n```\n\n----------------------------------------\n\nTITLE: Implementing User Login API Route in Next.js\nDESCRIPTION: Creates an API route for user login using Directus SDK's login function and handles form submission and cookie setting.\nSOURCE: https://github.com/directus/docs/blob/main/content/tutorials/1.getting-started/using-authentication-in-next-js.md#2025-04-09_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\nimport client from '@/lib/directus';\nimport { NextRequest, NextResponse } from 'next/server';\nimport { cookies } from 'next/headers';\n\nexport async function POST(request: NextRequest) {\n    const formData = await request.formData();\n\n    const email = formData.get(\"email\") as string;\n    const password = formData.get(\"password\") as string;\n\n    if (!email || !password) {\n        return NextResponse.json({ error: \"All fields are required\" }, { status: 400 });\n    }\n\n    try {\n        const response = await client.login(email, password);\n        console.log(response);\n        if (response.access_token) {\n          (await cookies()).set('directus_session_token', response.access_token, { sameSite: 'strict', path: '/', secure: true })\n        }\n        const url = request.nextUrl.clone();\n        url.pathname = \"/dashboard\"\n        return NextResponse.redirect(url);\n    } catch (error) {\n      console.log(error);\n        return NextResponse.json({ error: \"Registration failed\" }, { status: 500 });\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Card Group Component in Svelte\nDESCRIPTION: Defines a Svelte component for rendering a group of cards with content from Directus.\nSOURCE: https://github.com/directus/docs/blob/main/content/tutorials/1.getting-started/rendering-dynamic-blocks-using-sveltekit.md#2025-04-09_snippet_6\n\nLANGUAGE: svelte\nCODE:\n```\n<!--- src/lib/components/CardGroup.svelte-->\n<script>\n  export let data;\n</script>\n\n<section class=\"card-group\">\n  <h2>{data.headline}</h2>\n  <p>{@html data.content.replace(/<\\/?p>/g, '')}</p>\n  <div class=\"cards\">\n      {#each data.cards as card}\n          <div class=\"card\">\n              <p>{card.content}</p>\n          </div>\n      {/each}\n  </div>\n</section>\n\n<style>\n  .card-group {\n      padding: 2rem;\n  }\n  .cards {\n      display: flex;\n      gap: 1rem;\n  }\n  .card {\n      padding: 1rem;\n      border: 1px solid #ddd;\n      border-radius: 5px;\n  }\n</style>\n```\n\n----------------------------------------\n\nTITLE: Creating Page Widget to Display Content\nDESCRIPTION: Flutter widget that renders a single page from the Directus CMS, including HTML content using the flutter_html package.\nSOURCE: https://github.com/directus/docs/blob/main/content/tutorials/1.getting-started/fetch-data-from-directus-with-flutter.md#2025-04-09_snippet_8\n\nLANGUAGE: dart\nCODE:\n```\nimport 'package:flutter/material.dart';\nimport 'package:flutter_html/flutter_html.dart';\nclass PageWidget extends StatelessWidget {\n  final Map<String, dynamic> page;\n  const PageWidget({\n    super.key,\n    required this.page,\n  });\n  @override\n  Widget build(BuildContext context) {\n    return Scaffold(\n      appBar: AppBar(\n        title: Text(page['title']),\n      ),\n      body: SingleChildScrollView(\n        child: Padding(\n          padding: const EdgeInsets.all(16.0),\n          child: Column(\n            crossAxisAlignment: CrossAxisAlignment.start,\n            children: [\n              const SizedBox(height: 16),\n              Html(\n                data: page['content'],\n              ),\n            ],\n          ),\n        ),\n      ),\n    );\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Sample Directus Collection Fields Response\nDESCRIPTION: Example JSON response from Directus API showing the fields of a collection, including metadata like interface types, validation rules, and display options.\nSOURCE: https://github.com/directus/docs/blob/main/content/tutorials/2.projects/build-forms-dynamically-using-directus-and-nuxt.md#2025-04-09_snippet_7\n\nLANGUAGE: json\nCODE:\n```\n[ { \"collection\": \"posts\", \"field\": \"id\", \"type\": \"integer\", \"schema\": { \"name\": \"id\", \"table\": \"posts\", \"data_type\": \"integer\", \"default_value\": null, \"max_length\": null, \"numeric_precision\": null, \"numeric_scale\": null, \"is_generated\": false, \"generation_expression\": null, \"is_nullable\": false, \"is_unique\": false, \"is_indexed\": false, \"is_primary_key\": true, \"has_auto_increment\": true, \"foreign_key_column\": null, \"foreign_key_table\": null }, \"meta\": { \"id\": 1, \"collection\": \"posts\", \"field\": \"id\", \"special\": null, \"interface\": \"input\", \"options\": null, \"display\": null, \"display_options\": null, \"readonly\": true, \"hidden\": true, \"sort\": 1, \"width\": \"full\", \"translations\": null, \"note\": null, \"conditions\": null, \"required\": false, \"group\": null, \"validation\": null, \"validation_message\": null } }, { \"collection\": \"posts\", \"field\": \"title\", \"type\": \"string\", \"schema\": { \"name\": \"title\", \"table\": \"posts\", \"data_type\": \"varchar\", \"default_value\": null, \"max_length\": 255, \"numeric_precision\": null, \"numeric_scale\": null, \"is_generated\": false, \"generation_expression\": null, \"is_nullable\": true, \"is_unique\": false, \"is_indexed\": false, \"is_primary_key\": false, \"has_auto_increment\": false, \"foreign_key_column\": null, \"foreign_key_table\": null }, \"meta\": { \"id\": 2, \"collection\": \"posts\", \"field\": \"title\", \"special\": null, \"interface\": \"input\", \"options\": { \"placeholder\": \"Post title\" }, \"display\": null, \"display_options\": null, \"readonly\": false, \"hidden\": false, \"sort\": 2, \"width\": \"full\", \"translations\": null, \"note\": null, \"conditions\": null, \"required\": true, \"group\": null, \"validation\": null, \"validation_message\": null } }, { \"collection\": \"posts\", \"field\": \"content\", \"type\": \"text\", \"schema\": { \"name\": \"content\", \"table\": \"posts\", \"data_type\": \"text\", \"default_value\": null, \"max_length\": null, \"numeric_precision\": null, \"numeric_scale\": null, \"is_generated\": false, \"generation_expression\": null, \"is_nullable\": true, \"is_unique\": false, \"is_indexed\": false, \"is_primary_key\": false, \"has_auto_increment\": false, \"foreign_key_column\": null, \"foreign_key_table\": null }, \"meta\": { \"id\": 3, \"collection\": \"posts\", \"field\": \"content\", \"special\": null, \"interface\": \"input-rich-text-md\", \"options\": null, \"display\": null, \"display_options\": null, \"readonly\": false, \"hidden\": false, \"sort\": 3, \"width\": \"full\", \"translations\": null, \"note\": null, \"conditions\": null, \"required\": true, \"group\": null, \"validation\": null, \"validation_message\": null } }, { \"collection\": \"posts\", \"field\": \"slug\", \"type\": \"string\", \"schema\": { \"name\": \"slug\", \"table\": \"posts\", \"data_type\": \"varchar\", \"default_value\": null, \"max_length\": 255, \"numeric_precision\": null, \"numeric_scale\": null, \"is_generated\": false, \"generation_expression\": null, \"is_nullable\": true, \"is_unique\": false, \"is_indexed\": false, \"is_primary_key\": false, \"has_auto_increment\": false, \"foreign_key_column\": null, \"foreign_key_table\": null }, \"meta\": { \"id\": 4, \"collection\": \"posts\", \"field\": \"slug\", \"special\": null, \"interface\": \"input\", \"options\": null, \"display\": null, \"display_options\": null, \"readonly\": false, \"hidden\": false, \"sort\": 4, \"width\": \"full\", \"translations\": null, \"note\": null, \"conditions\": null, \"required\": true, \"group\": null, \"validation\": null, \"validation_message\": null } }, { \"collection\": \"posts\", \"field\": \"category\", \"type\": \"string\", \"schema\": { \"name\": \"category\", \"table\": \"posts\", \"data_type\": \"varchar\", \"default_value\": null, \"max_length\": 255, \"numeric_precision\": null, \"numeric_scale\": null, \"is_generated\": false, \"generation_expression\": null, \"is_nullable\": true, \"is_unique\": false, \"is_indexed\": false, \"is_primary_key\": false, \"has_auto_increment\": false, \"foreign_key_column\": null, \"foreign_key_table\": null }, \"meta\": { \"id\": 5, \"collection\": \"posts\", \"field\": \"category\", \"special\": null, \"interface\": \"select-dropdown\", \"options\": { \"choices\": [ { \"text\": \"Blog post\", \"value\": \"blog_post\" }, { \"text\": \"Tutorial\", \"value\": \"tutorial\" }, { \"text\": \"Announcement\", \"value\": \"announcement\" } ] }, \"display\": null, \"display_options\": null, \"readonly\": false, \"hidden\": false, \"sort\": 5, \"width\": \"full\", \"translations\": null, \"note\": null, \"conditions\": null, \"required\": true, \"group\": null, \"validation\": null, \"validation_message\": null } }, { \"collection\": \"posts\", \"field\": \"published\", \"type\": \"dateTime\", \"schema\": { \"name\": \"published\", \"table\": \"posts\", \"data_type\": \"datetime\", \"default_value\": null, \"max_length\": null, \"numeric_precision\": null, \"numeric_scale\": null, \"is_generated\": false, \"generation_expression\": null, \"is_nullable\": true, \"is_unique\": false, \"is_indexed\": false, \"is_primary_key\": false, \"has_auto_increment\": false, \"foreign_key_column\": null, \"foreign_key_table\": null }, \"meta\": { \"id\": 6, \"collection\": \"posts\", \"field\": \"published\", \"special\": null, \"interface\": \"datetime\", \"options\": null, \"display\": null, \"display_options\": null, \"readonly\": false, \"hidden\": false, \"sort\": 6, \"width\": \"full\", \"translations\": null, \"note\": null, \"conditions\": null, \"required\": false, \"group\": null, \"validation\": null, \"validation_message\": null } } ]\n```\n\n----------------------------------------\n\nTITLE: Layout Component with Conditional Navigation Based on Authentication\nDESCRIPTION: This Astro layout component includes navigation items with conditional rendering based on user authentication status. It displays a sign-out link only for authenticated users and controls access to certain navigation items based on authentication.\nSOURCE: https://github.com/directus/docs/blob/main/content/tutorials/1.getting-started/using-authentication-in-astro.md#2025-04-09_snippet_12\n\nLANGUAGE: astro\nCODE:\n```\n---\ninterface Props {\n  title?: string;\n}\n\nconst { title = \"Astro Basics\" } = Astro.props;\nconst token = Astro.cookies.get(\"directus_session_token\");\n\n// Add navigation items with their access rules\nconst navItems = [\n  { href: \"/\", label: \"Home\", public: true },\n  { href: \"/dashboard\", label: \"Dashboard\", public: false },\n];\n---\n\n<!doctype html>\n<html lang=\"en\">\n  <head>\n    <meta charset=\"UTF-8\" />\n    <meta name=\"viewport\" content=\"width=device-width\" />\n    <link rel=\"icon\" type=\"image/svg+xml\" href=\"/favicon.svg\" />\n    <meta name=\"generator\" content={Astro.generator} />\n    <title>{title}</title>\n  </head>\n  <body>\n    <nav>\n      {navItems.map(item => (\n        (item.public || token?.value) && (\n          <a href={item.href}>{item.label}</a>\n        )\n      ))}\n      {\n        token?.value && (\n       <a href=\"/api/auth/logout\">Sign out</a>\n        )\n      }\n    </nav>\n    <slot />\n  </body>\n</html>\n```\n\n----------------------------------------\n\nTITLE: Setting Directus Environment Variables\nDESCRIPTION: Configuration for the .env file to set up the Directus URL for API connections.\nSOURCE: https://github.com/directus/docs/blob/main/content/tutorials/1.getting-started/rendering-dynamic-blocks-using-astro.md#2025-04-09_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nDIRECTUS_URL=https://your-directus-project-url.com\n```\n\n----------------------------------------\n\nTITLE: Card Group Component Implementation in Vue\nDESCRIPTION: Creates a Vue component for rendering the Card Group block type from Directus, conditionally displaying either posts or custom cards based on the group_type property.\nSOURCE: https://github.com/directus/docs/blob/main/content/tutorials/1.getting-started/rendering-dynamic-blocks-using-nuxt.md#2025-04-09_snippet_11\n\nLANGUAGE: vue\nCODE:\n```\n<script setup lang=\"ts\">\ndefineProps<{\n\tid: string,\n\theadline: string,\n\tcontent: string,\n\tgroup_type: string,\n\tposts: Post[],\n\tcards: Card[]\n}>()\n</script>\n<template>\n\t<h2>{{ headline }}</h2>\n\t<div v-html=\"content\"></div>\n\t<div v-if=\"group_type === 'posts'\" v-for=\"post in posts\" :key=\"post.id\">\n\t\t<h2>{{ post.title }}</h2>\n\t\t<div v-html=\"post.content\"></div>\n\t</div>\n\t<div v-if=\"group_type === 'custom'\" v-for=\"card in cards\" :key=\"card.id\">\n\t\t<h2>{{ card.image }}</h2>\n\t\t<p>{{ card.content }}</p>\n\t</div>\n</template>\n```\n\n----------------------------------------\n\nTITLE: Updating Main App to Display Pages from Directus\nDESCRIPTION: Enhanced Flutter application that fetches both global metadata and page content from Directus and displays them using the PageWidget.\nSOURCE: https://github.com/directus/docs/blob/main/content/tutorials/1.getting-started/fetch-data-from-directus-with-flutter.md#2025-04-09_snippet_9\n\nLANGUAGE: dart\nCODE:\n```\nimport 'package:flutter/material.dart';\nimport 'services/directus_service.dart';\nimport 'package:flutter_dotenv/flutter_dotenv.dart';\nimport 'screens/home_screen.dart';\nFuture main() async {\n  await dotenv.load(fileName: \".env\");\n  runApp(MyApp());\n}\nclass MyApp extends StatelessWidget {\n  final DirectusService _directusService = DirectusService();\n  MyApp({super.key});\n  @override\n  Widget build(BuildContext context) {\n    return FutureBuilder(\n      future: Future.wait([\n        _directusService.getGlobalMetadata(),\n      ]),\n      builder: (context,\n          AsyncSnapshot<List<Map<String, dynamic>>> settingsSnapshot) {\n        if (settingsSnapshot.connectionState == ConnectionState.waiting) {\n          return const CircularProgressIndicator();\n        } else if (settingsSnapshot.hasError) {\n          return Text('Error: ${settingsSnapshot.error}');\n        } else {\n          final metadata = settingsSnapshot.data![0];\n          return MaterialApp(\n            title: metadata['title'],\n            theme: ThemeData(\n              primarySwatch: Colors.blue,\n            ),\n            home: FutureBuilder<Map<String, dynamic>>(\n              future: _directusService.getPages(),\n              builder: (context, pagesSnapshot) {\n                if (pagesSnapshot.connectionState == ConnectionState.waiting) {\n                  return const CircularProgressIndicator();\n                } else if (pagesSnapshot.hasError) {\n                  return Text('Error: ${pagesSnapshot.error}');\n                } else {\n                  final pages = pagesSnapshot.data!;\n                  return pages.isNotEmpty\n                      ? PageWidget(\n                          page: pages,\n                        )\n                      : const Text('No pages found');\n                }\n              },\n            ),\n          );\n        }\n      },\n    );\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Updating Login Page with Redirect to Posts\nDESCRIPTION: This Vue component updates the login page to redirect to the /posts page after successful authentication. It uses the Directus login function and Vue Router for navigation.\nSOURCE: https://github.com/directus/docs/blob/main/content/tutorials/1.getting-started/using-authentication-in-nuxt.md#2025-04-09_snippet_18\n\nLANGUAGE: vue\nCODE:\n```\n<script setup lang=\"ts\">\nconst { $directus } = useNuxtApp()\nconst router = useRouter()\n\nconst email = ref('')\nconst password = ref('')\nconst errorMsg = ref(null)\n\nconst login = async () => {\n\ttry {\n\t\terrorMsg.value = null\n\t\tawait $directus.login(email.value, password.value)\n\t\trouter.push('/posts') // Redirect to /posts\n\t} catch (error) {\n\t\terrorMsg.value = error.message || 'An unexpected error occurred'\n\t}\n}\n</script>\n<template>\n\t<form @submit.prevent=\"login\">\n\t\t<h1>Login</h1>\n\t\t<div v-if=\"errorMsg\">\n\t\t\t<p>{{ errorMsg }}</p>\n\t\t</div>\n\t\t<div>\n\t\t\t<input required type=\"text\" v-model=\"email\" name=\"email\" placeholder=\"Email\" />\n\t\t</div>\n\t\t<div>\n\t\t\t<input required type=\"password\" v-model=\"password\" name=\"password\" placeholder=\"Password\" />\n\t\t</div>\n\t\t<button type=\"submit\">Login</button>\n\t</form>\n</template>\n```\n\n----------------------------------------\n\nTITLE: Implementing Google Fonts in Directus Themes\nDESCRIPTION: Shows how to configure font family rules to use either local fonts or Google Fonts. Demonstrates the syntax difference between local and Google Font implementation.\nSOURCE: https://github.com/directus/docs/blob/main/content/guides/9.extensions/3.app-extensions/6.themes.md#2025-04-09_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\n// Use the locally installed font called \"Comic Sans MS\"\nfontFamily: 'Comic Sans MS, sans-serif'\n\n// Use the Google font \"Yesteryear\"\nfontFamily: '\"Yesteryear\", sans-serif'\n```\n\n----------------------------------------\n\nTITLE: Exposing Component Methods and State\nDESCRIPTION: Return statement that exposes necessary variables and functions to the Vue template. This makes the component's state and functionality available for use in the panel's user interface.\nSOURCE: https://github.com/directus/docs/blob/main/content/tutorials/5.extensions/create-collection-items-in-custom-panels.md#2025-04-09_snippet_11\n\nLANGUAGE: javascript\nCODE:\n```\nreturn {\n  hasPermission,\n  primaryKeyField,\n  formData,\n  fieldData,\n  submitForm,\n  formResponse,\n  formError,\n  responseDialog,\n  getLinkForItem,\n};\n```\n\n----------------------------------------\n\nTITLE: GraphQL Client Setup in Strict Mode\nDESCRIPTION: Creates a GraphQL WebSocket client with access token as URL parameter for strict mode authentication.\nSOURCE: https://github.com/directus/docs/blob/main/content/guides/7.realtime/1.authentication.md#2025-04-09_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\nimport { createClient } from \"graphql-ws\";\n\nconst client = createClient({\n\turl: \"ws://your-directus-url/graphql?access_token=your-access-token\",\n\tkeepAlive: 30000,\n});\n```\n\n----------------------------------------\n\nTITLE: Dynamic Variable Filters\nDESCRIPTION: Examples of using dynamic variables $CURRENT_USER and $NOW in filter conditions.\nSOURCE: https://github.com/directus/docs/blob/main/content/guides/4.connect/2.filter-rules.md#2025-04-09_snippet_3\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"owner\": {\n    \"_eq\": \"$CURRENT_USER\"\n  }\n}\n```\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"datetime\": {\n    \"_lte\": \"$NOW\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Importing Directus SDK and React Hooks\nDESCRIPTION: This snippet imports necessary functions from Directus SDK and React hooks for authentication and real-time functionality.\nSOURCE: https://github.com/directus/docs/blob/main/content/tutorials/2.projects/build-a-multi-user-chat-with-react-and-directus-realtime.md#2025-04-09_snippet_2\n\nLANGUAGE: js\nCODE:\n```\nimport { authentication, createDirectus, realtime } from '@directus/sdk';\nimport { useState, useEffect } from 'react';\n```\n\n----------------------------------------\n\nTITLE: Styling the Form Panel with Scoped CSS in Vue\nDESCRIPTION: CSS styling for the internal form panel with responsive design support. It includes styling for different panel sizes, form fields, response dialogs, and interactive elements.\nSOURCE: https://github.com/directus/docs/blob/main/content/tutorials/5.extensions/create-collection-items-in-custom-panels.md#2025-04-09_snippet_15\n\nLANGUAGE: vue\nCODE:\n```\n<style scoped>\n.panel-internal-form {\n  padding: 12px;\n}\n.panel-internal-form.has-header {\n  padding: 0 12px;\n}\n.panel-internal-form.small :deep(.field) {\n  grid-column: start/fill;\n}\n.panel-internal-form :deep(.v-form) {\n  margin-bottom: var(--theme--form--row-gap);\n}\n.form-response {\n  border-radius: var(--theme--border-radius);\n  border: var(--theme--border-width) solid var(--theme--form--field--input--border-color);\n  margin: 1em 0;\n  min-width: 300px;\n}\n.form-response a {\n  position: relative;\n  display: block;\n  padding: var(--theme--form--field--input--padding);\n}\n.form-response a:hover {\n  cursor: pointer;\n  background-color: var(--v-list-item-background-color-hover);\n}\n.form-response a :deep(.v-icon) {\n  position: absolute;\n  right: var(--theme--form--field--input--padding);\n  top: var(--theme--form--field--input--padding);\n}\n</style>\n```\n\n----------------------------------------\n\nTITLE: Handling New Message Events in WebSocket Subscription\nDESCRIPTION: Updates the receiveMessage function to handle 'create' events from the message subscription. When a new message is created, it's added to the UI using the addMessageToList function.\nSOURCE: https://github.com/directus/docs/blob/main/content/tutorials/2.projects/build-a-multi-user-chat-with-javascript-and-directus-realtime.md#2025-04-09_snippet_13\n\nLANGUAGE: javascript\nCODE:\n```\nif (data.type == 'subscription' && data.event == 'create') {\n\taddMessageToList(data.data[0]);\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Endpoint ID and Handler in JavaScript\nDESCRIPTION: Basic structure for a Directus endpoint extension that defines the endpoint ID and handler function. The ID becomes the root path of the endpoint.\nSOURCE: https://github.com/directus/docs/blob/main/content/tutorials/5.extensions/proxy-an-external-api-in-a-custom-endpoint-extension.md#2025-04-09_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nexport default {\n  id: 'pokeapi',\n  handler: (router, {services}) => {\n    // Router config goes here\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: Form Logic Implementation in JavaScript\nDESCRIPTION: Core logic for handling dynamic form generation, field mapping, and validation rules. Includes utility functions for field type mapping, validation attributes, form initialization, and submission handling.\nSOURCE: https://github.com/directus/docs/blob/main/content/tutorials/2.projects/build-forms-dynamically-using-directus-and-sveltekit.md#2025-04-09_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nimport { getCollectionFields, submitFormData } from \"$lib/directus\";\n\nexport const categoryOptions = [\n  { value: \"blog post\", text: \"Blog Post\" },\n  { value: \"tutorial\", text: \"Tutorial\" },\n  { value: \"announcement\", text: \"Announcement\" },\n];\n\nexport const fieldComponentMap = {\n  string: \"text\",\n  text: \"textarea\",\n  integer: \"number\",\n  float: \"number\",\n  decimal: \"number\",\n  boolean: \"checkbox\",\n  date: \"date\",\n  datetime: \"datetime-local\",\n  time: \"time\",\n  timestamp: \"datetime-local\",\n  uuid: \"text\",\n  hash: \"text\",\n  json: \"textarea\",\n  csv: \"textarea\",\n\n  interfaces: {\n    dropdown: \"select\",\n    select: \"select\",\n    datetime: \"datetime-local\",\n    markdown: \"markdown\",\n  },\n\n  fields: {\n    category: \"category-dropdown\",\n  },\n};\n\nexport function getFieldComponent(field) {\n  if (fieldComponentMap.fields[field.field]) {\n    return fieldComponentMap.fields[field.field];\n  }\n\n  if (\n    field.meta?.interface &&\n    fieldComponentMap.interfaces[field.meta.interface]\n  ) {\n    return fieldComponentMap.interfaces[field.meta.interface];\n  }\n\n  return fieldComponentMap[field.type] || \"text\";\n}\n\nexport function getValidationAttributes(field) {\n  const attrs = {};\n\n  if (field.schema?.is_nullable === false) {\n    attrs.required = true;\n  }\n\n  if (field.schema?.max_length) {\n    attrs.maxlength = field.schema.max_length;\n  }\n\n  if (field.schema?.min_length) {\n    attrs.minlength = field.schema.min_length;\n  }\n\n  return attrs;\n}\n\nexport async function initializeForm(collection) {\n  try {\n    const fields = await getCollectionFields(collection);\n    const formData = {};\n    fields.forEach((field) => {\n      if (field.schema && !field.meta?.hidden) {\n        formData[field.field] = field.schema.default_value || \"\";\n      }\n    });\n    return { fields, formData, error: null };\n  } catch (err) {\n    return { fields: [], formData: {}, error: err };\n  }\n}\n\nexport async function handleFormSubmit(collection, formData, onSuccess, resetFormData) {\n  try {\n    await submitFormData(collection, formData);\n    if (typeof onSuccess === 'function') {\n      onSuccess();\n    }\n    if (resetFormData) {\n      resetFormData();\n    }\n    return { success: true, error: null };\n  } catch (err) {\n    return { success: false, error: err };\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Updating Next.js API Route for Version-Specific Draft Mode\nDESCRIPTION: Modifies the draft mode API route to include version information in the redirect URL. This enables previewing specific content versions in draft mode.\nSOURCE: https://github.com/directus/docs/blob/main/content/tutorials/7.workflows/combine-live-preview-and-content-versioning-with-next-js.md#2025-04-09_snippet_2\n\nLANGUAGE: jsx\nCODE:\n```\nimport { draftMode } from 'next/headers';\nimport directus from '@/lib/directus';\nimport { readItem } from '@directus/sdk/rest';\n\nexport async function GET(request: Request) {\n\tconst { searchParams } = new URL(request.url);\n\tconst secret = searchParams.get('secret');\n\tconst id = searchParams.get('id');\n\tconst version = searchParams.get('version');\n\n\tif (secret !== 'MY_SECRET_TOKEN') {\n\t\treturn new Response('Invalid token', { status: 401 });\n\t}\n\n\tif (!id) {\n\t\treturn new Response('Missing id', { status: 401 });\n\t}\n\n\tconst post = await directus.request(readItem('Posts', id));\n\n\tif (!post) {\n\t\treturn new Response('Invalid id', { status: 401 });\n\t}\n\n\tdraftMode().enable();\n\n\treturn new Response(null, {\n\t\tstatus: 307,\n\t\theaders: {\n\t\t\tLocation: `/posts/${post.id}?version=${version}`,\n\t\t},\n\t});\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Response Dialog Component in Vue\nDESCRIPTION: Vue dialog component for displaying form submission responses with conditional notices based on form response status. It includes success and error handling with dynamic linking to created items.\nSOURCE: https://github.com/directus/docs/blob/main/content/tutorials/5.extensions/create-collection-items-in-custom-panels.md#2025-04-09_snippet_14\n\nLANGUAGE: vue\nCODE:\n```\n<v-dialog v-model=\"responseDialog\" @esc=\"responseDialog = false\">\n  <v-sheet>\n    <v-notice type=\"success\" icon=\"done\" v-if=\"formResponse[primaryKeyField.field]\">Saved</v-notice>\n    <v-notice type=\"danger\" icon=\"warning\" v-else-if=\"formError\">An Error Occurred</v-notice>\n    <v-notice type=\"danger\" icon=\"warning\" v-else>No Response</v-notice>\n    <blockquote v-if=\"formResponse\" class=\"form-response\">\n      <router-link :to=\"getLinkForItem(formResponse)\">\n        <render-template\n          :collection=\"collection\"\n          :template=\"responseFormat\"\n          :item=\"formResponse\"\n        />\n        <v-icon name=\"launch\" small />\n      </router-link>\n    </blockquote>\n    <blockquote v-else-if=\"formError\" class=\"\">\n      {{ formError }}\n    </blockquote>\n    <v-button @click=\"responseDialog = false\">Done</v-button>\n  </v-sheet>\n</v-dialog>\n```\n\n----------------------------------------\n\nTITLE: Querying Countries through Cities using $FOLLOW Syntax in Directus\nDESCRIPTION: Example showing how to query countries based on related cities using the $FOLLOW syntax. The example demonstrates querying a country named 'Germany' that has a related city named 'Berlin' through the country_id field in the cities collection.\nSOURCE: https://github.com/directus/docs/blob/main/content/guides/4.connect/2.filter-rules.md#2025-04-09_snippet_6\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"filter\": {\n    \"name\": \"Germany\",\n    \"$FOLLOW(cities, country_id)\": {\n        \"name\": \"Berlin\"\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Sample JSON Response for Subscription Report\nDESCRIPTION: This JSON snippet represents a sample response from a database query, showing subscription data that could be used in an email template.\nSOURCE: https://github.com/directus/docs/blob/main/content/tutorials/5.extensions/use-dynamic-values-in-custom-email-templates.md#2025-04-09_snippet_5\n\nLANGUAGE: json\nCODE:\n```\n[\n\t{\n\t\t\"subscription\": {\n\t\t\t\"name\": \"Premium\"\n\t\t},\n\t\t\"count\": {\n\t\t\t\"customer_id\": 10\n\t\t}\n\t},\n\t{\n\t\t\"subscription\": {\n\t\t\t\"name\": \"Standard\"\n\t\t},\n\t\t\"count\": {\n\t\t\t\"customer_id\": 23\n\t\t}\n\t},\n\t{\n\t\t\"subscription\": {\n\t\t\t\"name\": \"Free\"\n\t\t},\n\t\t\"count\": {\n\t\t\t\"customer_id\": 143\n\t\t}\n\t}\n]\n```\n\n----------------------------------------\n\nTITLE: Adding Content to Actions:Prepend Slot\nDESCRIPTION: Shows how to add content before the actions slot, which can be used for page information or selection details.\nSOURCE: https://github.com/directus/docs/blob/main/content/tutorials/5.extensions/understand-available-slots-in-custom-modules.md#2025-04-09_snippet_5\n\nLANGUAGE: vue\nCODE:\n```\n<template #actions:prepend>\n\tACTION PREPEND\n</template>\n```\n\n----------------------------------------\n\nTITLE: Grouping Aggregate Results in Directus API\nDESCRIPTION: Shows how to use the groupBy parameter to run aggregate functions based on shared values. Demonstrates grouping by multiple fields simultaneously to create aggregate reports.\nSOURCE: https://github.com/directus/docs/blob/main/content/guides/4.connect/3.query-parameters.md#2025-04-09_snippet_9\n\nLANGUAGE: http\nCODE:\n```\nGET /items/posts\n  ?aggregate[count]=views,comments\n  &groupBy[]=author\n  &groupBy[]=year(publish_date)\n```\n\nLANGUAGE: graphql\nCODE:\n```\nquery {\n  posts_aggregated(groupBy: [\"author\", \"year(publish_date)\"]) {\n    group\n    count {\n      views\n      comments\n    }\n  }\n}\n```\n\nLANGUAGE: js\nCODE:\n```\nimport { createDirectus, rest, aggregate } from '@directus/sdk';\nconst directus = createDirectus('https://directus.example.com').with(rest());\n\nconst result = await directus.request(\n  aggregate('posts', {\n    aggregate: {\n      count: ['views', 'comments']\n    },\n    groupBy: ['author', 'year(publish_date)'],\n  })\n);\n```\n\n----------------------------------------\n\nTITLE: GraphQL Usage with TypeScript\nDESCRIPTION: Example of using GraphQL with the Directus SDK including type definitions\nSOURCE: https://github.com/directus/docs/blob/main/content/guides/4.connect/6.sdk.md#2025-04-09_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\nimport { createDirectus, graphql } from '@directus/sdk';\n\ninterface Post {\n  id: number;\n  title: string;\n  content: string;\n}\n\ninterface Schema {\n  posts: Post[];\n}\n\nconst directus = createDirectus<Schema>('http://directus.example.com').with(graphql());\n\nconst result = await directus.query<Post[]>(`\n  query {\n    posts {\n      id\n      title\n      content\n    }\n  }\n`);\n```\n\n----------------------------------------\n\nTITLE: Configuring Directus Custom Operation UI (JavaScript)\nDESCRIPTION: Complete JavaScript code for the app.js file, defining the UI configuration for the custom Lodash Camel Case operation.\nSOURCE: https://github.com/directus/docs/blob/main/content/tutorials/5.extensions/use-npm-packages-in-custom-operations.md#2025-04-09_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nexport default {\n\tid: 'operation-lodash-camelcase',\n\tname: 'Lodash Camel Case',\n\ticon: 'electric_bolt',\n\tdescription: 'Use Lodash Camel Case Function.',\n\toverview: ({ text }) => [\n\t\t{\n\t\t\tlabel: 'Text',\n\t\t\ttext: text,\n\t\t},\n\t],\n\toptions: [\n\t\t{\n\t\t\tfield: 'text',\n\t\t\tname: 'Text',\n\t\t\ttype: 'string',\n\t\t\tmeta: {\n\t\t\t\twidth: 'full',\n\t\t\t\tinterface: 'input',\n\t\t\t},\n\t\t},\n\t],\n};\n```\n\n----------------------------------------\n\nTITLE: Configuring Routes for Home Page in Laravel\nDESCRIPTION: PHP code to set up the route for the home page using the HomeController in Laravel's web.php file.\nSOURCE: https://github.com/directus/docs/blob/main/content/tutorials/1.getting-started/fetch-data-from-directus-with-laravel.md#2025-04-09_snippet_6\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\nuse Illuminate\\Support\\Facades\\Route;\nuse App\\Http\\Controllers\\HomeController;\n\nRoute::get('/', [HomeController::class, 'index']);\n```\n\n----------------------------------------\n\nTITLE: Creating Login Form Component in Next.js\nDESCRIPTION: Implements a basic login form component that submits to the login API route.\nSOURCE: https://github.com/directus/docs/blob/main/content/tutorials/1.getting-started/using-authentication-in-next-js.md#2025-04-09_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\nexport default function LoginPage() {\n  return (\n    <>\n      <h2>Login</h2>\n      <form action=\"/api/auth/login\" method=\"POST\">\n        <label>Email</label>\n        <input type=\"email\" name=\"email\" required />\n        <label>Password</label>\n        <input type=\"password\" name=\"password\" required />\n        <input type=\"submit\" />\n      </form>\n    </>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Internal Form Panel in Vue.js\nDESCRIPTION: Implements the functionality and UI for the internal form panel. It includes form rendering, submission handling, and response display. The component uses Directus extensions SDK for API interactions and store management.\nSOURCE: https://github.com/directus/docs/blob/main/content/tutorials/5.extensions/create-collection-items-in-custom-panels.md#2025-04-09_snippet_18\n\nLANGUAGE: vue\nCODE:\n```\n<template>\n  <div v-if=\"!hasPermission\" class=\"panel-error\">\n    <v-notice type=\"danger\" icon=\"warning\">You do not have permissions to {{ collection }}</v-notice>\n  </div>\n  <div v-else :class=\"['panel-internal-form', { small: width < 30, large: width >= 30, 'has-header': showHeader }]\">\n    <!-- Form goes here -->\n    <v-form v-if=\"fieldData\" v-model=\"formData\" :fields=\"fieldData\" />\n    <v-button v-if=\"Object.keys(formData).length > 0\" @click=\"submitForm()\">Save</v-button>\n    <v-button v-else secondary>Save</v-button>\n\n    <v-dialog v-model=\"responseDialog\" @esc=\"responseDialog = false\">\n      <v-sheet>\n        <v-notice v-if=\"formResponse[primaryKeyField.field]\" type=\"success\" icon=\"done\">Saved</v-notice>\n        <v-notice v-else-if=\"formError\" type=\"danger\" icon=\"warning\">An Error Occurred</v-notice>\n        <v-notice v-else type=\"danger\" icon=\"warning\">No Response</v-notice>\n        <blockquote v-if=\"formResponse\" class=\"form-response\">\n          <!-- {{  formResponse }} -->\n          <router-link :to=\"getLinkForItem(formResponse)\">\n            <render-template :collection=\"collection\" :template=\"responseFormat\" :item=\"formResponse\" />\n            <v-icon name=\"launch\" small />\n          </router-link>\n        </blockquote>\n        <blockquote v-else-if=\"formError\" class=\"\">\n          {{ formError }}\n        </blockquote>\n\n        <v-button @click=\"responseDialog = false\">Done</v-button>\n      </v-sheet>\n    </v-dialog>\n  </div>\n</template>\n\n<script>\nimport { useApi, useCollection, useStores } from '@directus/extensions-sdk';\nimport { ref, watch } from 'vue';\n\nexport default {\n  props: {\n    showHeader: {\n      type: Boolean,\n      default: false,\n    },\n    collection: {\n      type: String,\n      default: '',\n    },\n    fields: {\n      type: Array,\n      default: () => [],\n    },\n    responseFormat: {\n      type: String,\n      default: '',\n    },\n    width: String,\n    height: String,\n  },\n  setup(props) {\n    const { useFieldsStore, usePermissionsStore } = useStores();\n    const fieldsStore = useFieldsStore();\n    const permissionsStore = usePermissionsStore();\n    const hasPermission = permissionsStore.hasPermission(props.collection, 'create');\n    const api = useApi();\n    const { primaryKeyField } = useCollection(props.collection);\n\n    const formData = ref({});\n    const fieldData = ref([]);\n\n    const formResponse = ref({});\n    const formError = ref({});\n    const responseDialog = ref(false);\n\n    function getFields() {\n      fieldData.value = [];\n\n      props.fields.forEach((field) => {\n        fieldData.value.push(fieldsStore.getField(props.collection, field));\n      });\n    }\n\n    getFields();\n\n    function submitForm() {\n      api\n        .post(`/items/${props.collection}`, formData.value)\n        .then((response) => {\n          formResponse.value = response.data.data;\n          responseDialog.value = true;\n          formData.value = {};\n        })\n        .catch((error) => {\n          formError.value = error;\n          responseDialog.value = true;\n        });\n    }\n\n    watch([() => props.collection, () => props.fields, () => props.responseFormat], getFields);\n\n    return {\n      hasPermission,\n      primaryKeyField,\n      formData,\n      fieldData,\n      submitForm,\n      formResponse,\n      formError,\n      responseDialog,\n      getLinkForItem,\n    };\n\n    function getLinkForItem(item) {\n      if (item === undefined) return;\n      const primaryKey = item[primaryKeyField.value.field];\n      return `/content/${props.collection}/${encodeURIComponent(primaryKey)}`;\n    }\n  },\n};\n</script>\n\n<style scoped>\n.panel-internal-form {\n  padding: 12px;\n}\n.panel-internal-form.has-header {\n  padding: 0 12px;\n}\n.panel-internal-form.small :deep(.field) {\n  grid-column: start/fill;\n}\n.panel-internal-form :deep(.v-form) {\n  margin-bottom: var(--theme--form--row-gap);\n}\n.form-response {\n  border-radius: var(--theme--border-radius);\n  border: var(--theme--border-width) solid var(--theme--form--field--input--border-color);\n  margin: 1em 0;\n  min-width: 300px;\n}\n.form-response a {\n  position: relative;\n  display: block;\n  padding: var(--theme--form--field--input--padding);\n}\n.form-response a:hover {\n  cursor: pointer;\n  background-color: var(--v-list-item-background-color-hover);\n}\n.form-response a :deep(.v-icon) {\n  position: absolute;\n  right: var(--theme--form--field--input--padding);\n  top: var(--theme--form--field--input--padding);\n}\n</style>\n```\n\n----------------------------------------\n\nTITLE: Initializing GraphQL WebSocket Client in JavaScript\nDESCRIPTION: Create a GraphQL WebSocket client using 'graphql-ws' library, configuring the URL, keep-alive interval, and authentication token for secure connections.\nSOURCE: https://github.com/directus/docs/blob/main/content/guides/7.realtime/2.subscriptions.md#2025-04-09_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\nimport { createClient } from \"graphql-ws\";\n\nconst client = createClient({\n\turl: \"ws://your-directus-url/graphql\",\n\tkeepAlive: 30000,\n\tconnectionParams: async () => {\n\t\treturn { access_token: \"MY_TOKEN\" };\n\t},\n});\n```\n\n----------------------------------------\n\nTITLE: Configuring CORS for Directus in Docker\nDESCRIPTION: Docker-compose configuration for setting up Content Security Policy to allow cross-origin access from a Nuxt application to Directus.\nSOURCE: https://github.com/directus/docs/blob/main/content/tutorials/1.getting-started/implementing-multilingual-content-using-directus-and-nuxt.md#2025-04-09_snippet_0\n\nLANGUAGE: yml\nCODE:\n```\nenvironment:\n  CONTENT_SECURITY_POLICY_DIRECTIVES__FRAME_SRC: your-website-url\n```\n\n----------------------------------------\n\nTITLE: Implementing Split View Functionality\nDESCRIPTION: Shows how to implement a split view feature with a toggle button and content area, including necessary attributes and styles.\nSOURCE: https://github.com/directus/docs/blob/main/content/tutorials/5.extensions/understand-available-slots-in-custom-modules.md#2025-04-09_snippet_7\n\nLANGUAGE: html\nCODE:\n```\n<private-view :splitView=\"livePreviewMode\" :split-view-min-width=\"310\" :title=\"page_title\">\n\t<template #actions>\n\t\t<v-button\n\t\t\tv-tooltip.bottom=\"!livePreviewMode ? 'Enable Split View' : 'Disable Split View'\"\n\t\t\trounded\n\t\t\ticon\n\t\t\tclass=\"action-preview\"\n\t\t\t:secondary=\"!livePreviewMode\"\n\t\t\t@click=\"toggleSplitView\"\n\t\t>\n\t\t\t<v-icon name=\"visibility\" outline />\n\t\t</v-button>\n\t</template>\n\n\n\t<template #splitView>\n\t\t<div ref=\"livePreviewEl\" class=\"live-preview\">\n\t\t\t<div class=\"container\">\n\t\t\t\t<div class=\"iframe-view\">\n\t\t\t\t\t<div\n\t\t\t\t\t\tref=\"resizeHandle\"\n\t\t\t\t\t\tclass=\"resize-handle\"\n\t\t\t\t\t\t:style=\"{\n\t\t\t\t\t\t\twidth: '100%',\n\t\t\t\t\t\t\theight: '100%',\n\t\t\t\t\t\t\tresize: 'both',\n\t\t\t\t\t\t}\"\n\t\t\t\t\t>\n\t\t\t\t\t\t<!-- <iframe id=\"frame\" ref=\"frameEl\" :src=\"url\" @load=\"onIframeLoad\" /> -->\n\t\t\t\t\t\tSPLIT VIEW\n\t\t\t\t\t</div>\n\t\t\t\t</div>\n\t\t\t</div>\n\t\t</div>\n\t</template>\n</private-view>\n```\n\nLANGUAGE: javascript\nCODE:\n```\nconst livePreviewMode = ref(false);\n\nfunction toggleSplitView() {\n\tlivePreviewMode.value = !livePreviewMode.value;\n}\n\nreturn { ..., toggleSplitView, livePreviewMode };\n```\n\nLANGUAGE: scss\nCODE:\n```\n.live-preview {\n\twidth: 100%;\n\theight: 100%;\n\t.container {\n\t\twidth: 100%;\n\t\theight: calc(100% - 44px);\n\t\toverflow: auto;\n\t}\n\t.iframe-view {\n\t\twidth: 100%;\n\t\theight: 100%;\n\t\toverflow: auto;\n\t\tdisplay: grid;\n\t\tpadding: 48px;\n\t\t#frame {\n\t\t\twidth: 100%;\n\t\t\theight: 100%;\n\t\t\tborder: 0;\n\t\t}\n\t\t.resize-handle {\n\t\t\toverflow: hidden;\n\t\t\tbox-shadow: 0px 4px 12px -4px rgba(0, 0, 0, 0.2);\n\t\t}\n\t}\n}\n```\n\n----------------------------------------\n\nTITLE: Handling Collection Changes via WebSocket in JSON\nDESCRIPTION: Receive and parse JSON messages for create, update, or delete events in a subscribed collection. The message includes the event type and relevant data.\nSOURCE: https://github.com/directus/docs/blob/main/content/guides/7.realtime/2.subscriptions.md#2025-04-09_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n\t\"type\": \"subscription\",\n\t\"event\": \"create\",\n\t\"data\": [\n\t\t// ...\n\t]\n}\n```\n\n----------------------------------------\n\nTITLE: Integrating Directus Data in Flutter Main App\nDESCRIPTION: Updates the main.dart file to fetch global metadata and blog posts from Directus using FutureBuilder. It then passes this data to the PageWidget for rendering.\nSOURCE: https://github.com/directus/docs/blob/main/content/tutorials/1.getting-started/fetch-data-from-directus-with-flutter.md#2025-04-09_snippet_12\n\nLANGUAGE: Dart\nCODE:\n```\nimport 'package:flutter/material.dart';\nimport 'services/directus_service.dart';\nimport 'package:flutter_dotenv/flutter_dotenv.dart';\nimport 'screens/home_screen.dart';\nFuture main() async {\n  await dotenv.load(fileName: \".env\");\n  runApp(MyApp());\n}\nclass MyApp extends StatelessWidget {\n  final DirectusService _directusService = DirectusService();\n  MyApp({super.key});\n  @override\n  Widget build(BuildContext context) {\n    return FutureBuilder(\n      future: Future.wait([\n        _directusService.getGlobalMetadata(),\n        _directusService.getBlogPosts(),\n      ]),\n      builder: (context, AsyncSnapshot<List<dynamic>> settingsSnapshot) {\n        if (settingsSnapshot.connectionState == ConnectionState.waiting) {\n          return const CircularProgressIndicator();\n        } else if (settingsSnapshot.hasError) {\n          return Text('Error: ${settingsSnapshot.error}');\n        } else {\n          final metadata = settingsSnapshot.data![0];\n          final blogPosts = settingsSnapshot.data![1];\n          return MaterialApp(\n            title: metadata['title'],\n            theme: ThemeData(\n              primarySwatch: Colors.blue,\n            ),\n            home: FutureBuilder<Map<String, dynamic>>(\n              future: _directusService.getPages(),\n              builder: (context, pagesSnapshot) {\n                if (pagesSnapshot.connectionState == ConnectionState.waiting) {\n                  return const CircularProgressIndicator();\n                } else if (pagesSnapshot.hasError) {\n                  return Text('Error: ${pagesSnapshot.error}');\n                } else {\n                  final pages = pagesSnapshot.data!;\n                  return pages.isNotEmpty\n                      ? PageWidget(pages: pages, blogPosts: blogPosts)\n                      : const Text('No pages found');\n                }\n              },\n            ),\n          );\n        }\n      },\n    );\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Query Types with TypeScript\nDESCRIPTION: Complete example of implementing query types with proper type inference and validation.\nSOURCE: https://github.com/directus/docs/blob/main/content/tutorials/3.tips-and-tricks/advanced-types-with-the-directus-sdk.md#2025-04-09_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nconst query: Query<MySchema, CollectionA> = {\n\tlimit: 20,\n\toffset: 0,\n};\n\nlet search = 'test';\nif (search) {\n\tquery.search = search;\n}\n\nconst query2 =  {\n    ...query,\n\tfields: [\n        \"id\", \"status\"\n\t],\n} satisfies Query<MySchema, CollectionA>;\n\nconst results = await directusClient.request(readItems(\"collection_a\", query2));\n\nconst results2 = await directusClient.request(readItems(\"collection_a\", {\n    ...query,\n    search,\n\tfields: [\n        \"id\", \"status\"\n\t],\n}));\n```\n\n----------------------------------------\n\nTITLE: Basic Data Fetching from Directus in a Next.js Server Component\nDESCRIPTION: Next.js server component that fetches all posts from Directus and renders them as HTML. This approach fetches all items at once without pagination.\nSOURCE: https://github.com/directus/docs/blob/main/content/tutorials/3.tips-and-tricks/implement-pagination-and-infinite-scrolling-in-next-js-.md#2025-04-09_snippet_2\n\nLANGUAGE: js\nCODE:\n```\nimport directus from \"@/lib/directus\";\nimport { readItems } from \"@directus/sdk\";\n\nconst getPosts = async () => {\n  return directus.request(readItems(\"posts\"));\n};\n\nexport default async function Home() {\n  const posts = await getPosts();\n\n  return (\n    <div>\n      <ul>\n        {posts.map((post) => {\n          return (\n            <li key={post.id}>\n              <h2>{post.title}</h2>\n              <p>{post.body}</p>\n            </li>\n          );\n        })}\n      </ul>\n    </div>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Custom Storage Implementation\nDESCRIPTION: Example of implementing custom storage for authentication data using localStorage\nSOURCE: https://github.com/directus/docs/blob/main/content/guides/4.connect/6.sdk.md#2025-04-09_snippet_8\n\nLANGUAGE: javascript\nCODE:\n```\nimport { createDirectus, authentication } from '@directus/sdk';\n\nclass LocalStorage {\n  get() {\n    return JSON.parse(localStorage.getItem(\"directus-data\"));\n  }\n  set(data) {\n    localStorage.setItem(\"directus-data\", JSON.stringify(data));\n  }\n}\n\nconst storage = new LocalStorage();\nconst directus = createDirectus('http://directus.example.com')\n    .with(authentication('json', { storage }));\n\n// Set a long term or static token without expiry information.\ndirectus.setToken('TOKEN');\n\n// Set custom credentials to the storage.\nstorage.set({\n  access_token: 'token',\n  refresh_token: 'token',\n  expires_at: 123456789\n});\n```\n\n----------------------------------------\n\nTITLE: Defining the Hook Function Skeleton\nDESCRIPTION: Initial structure of the hook export function with access to action, environment variables, and services.\nSOURCE: https://github.com/directus/docs/blob/main/content/tutorials/5.extensions/create-new-customers-in-stripe-in-a-custom-hook.md#2025-04-09_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nexport default ({ action }, { env, services }) => {};\n```\n\n----------------------------------------\n\nTITLE: Reading a Collection using CollectionsService in JavaScript\nDESCRIPTION: Shows how to read a collection's data using the CollectionsService. It retrieves data for a specific collection by name and returns it as JSON.\nSOURCE: https://github.com/directus/docs/blob/main/content/tutorials/5.extensions/read-collection-data-in-custom-layouts.md#2025-04-09_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nrouter.get('/', async (req, res) => {\n  const collectionsService = new CollectionsService({\n    schema: await getSchema(),\n    accountability: req.accountability\n  });\n\n  const data = await collectionsService.readOne('collection_name');\n\n  res.json(data);\n});\n```\n\n----------------------------------------\n\nTITLE: GraphQL Client Setup with Token in Handshake Mode\nDESCRIPTION: Creates a GraphQL WebSocket client with authentication token in connection parameters.\nSOURCE: https://github.com/directus/docs/blob/main/content/guides/7.realtime/1.authentication.md#2025-04-09_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nimport { createClient } from \"graphql-ws\";\n\nconst client = createClient({\n\turl: \"ws://your-directus-url/graphql\",\n\tkeepAlive: 30000,\n\tconnectionParams: async () => {\n\t\treturn { access_token: \"MY_TOKEN\" };\n\t},\n});\n```\n\n----------------------------------------\n\nTITLE: Configuring Google Docs Preview URL in Directus\nDESCRIPTION: URL template for setting up Google Docs preview functionality in Directus. Requires replacing placeholders for Directus URL and access token to enable file previewing.\nSOURCE: https://github.com/directus/docs/blob/main/content/tutorials/3.tips-and-tricks/preview-files-in-live-preview-with-google-docs-previews.md#2025-04-09_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\nhttps://docs.google.com/gview?embedded=true&url=YOUR_DIRECTUS_URL/assets/?access_token=TOKEN\n```\n\n----------------------------------------\n\nTITLE: Creating Home Component with Authentication-Based Rendering\nDESCRIPTION: React component for the Home page that conditionally renders different UI elements based on the user's authentication status.\nSOURCE: https://github.com/directus/docs/blob/main/content/tutorials/1.getting-started/using-authentication-in-react.md#2025-04-09_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\n// src/routes/Home.jsx\n\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport { Link } from 'react-router-dom';\nimport { LogOut } from '../components/Logout';\n\nconst Home = ({ isAuthenticated }) => {\n    return (\n        <div>\n            Home Component\n            {(isAuthenticated ? <Link to=\"/profile\">View Profile</Link> : <div/>)}\n            {(isAuthenticated ? <LogOut /> : <div/>)}\n            {(!isAuthenticated ? <Link to=\"/login\">Login</Link> : <div/>)}\n        </div>\n    );\n};\nHome.propTypes = {\n    isAuthenticated: PropTypes.bool.isRequired,\n};\n\nexport default Home;\n```\n\n----------------------------------------\n\nTITLE: Implementing a Select Dropdown Component in Vue.js for Directus\nDESCRIPTION: A Vue component that creates a select dropdown populated with options from Directus field configuration. The component supports two-way data binding and respects field width and required status.\nSOURCE: https://github.com/directus/docs/blob/main/content/tutorials/2.projects/build-forms-dynamically-using-directus-and-nuxt.md#2025-04-09_snippet_12\n\nLANGUAGE: vue\nCODE:\n```\n<script setup lang=\"ts\">\nimport { computed } from 'vue'\n\nconst props = defineProps<{\n\tdefaultValue?: string\n\tlabel?: string\n\toptions: Record<string, any>\n\twidth: string | null\n\tfield: string\n\trequired: boolean\n\tmodelValue?: string\n}>()\n\nconst emit = defineEmits(['update:modelValue'])\n\nconst fieldWidth = props.width === 'full' ? '100%' : '50%'\n\nconst selectValue = computed({\n\tget() {\n\t\treturn props.modelValue || props.defaultValue || ''\n\t},\n\tset(value) {\n\t\temit('update:modelValue', value)\n\t}\n})\n</script>\n<template>\n\t<div :style=\"'width: ' + fieldWidth + ';'\">\n\t\t<label for=\"field\">{{ label }}</label>\n\t\t<select :name=\"field\" v-model=\"selectValue\" :required=\"required\">\n\t\t\t<option v-for=\"choice in options.choices\" :key=\"choice.value\" :value=\"choice.value\">{{ choice.text }}\n\t\t\t</option>\n\t\t</select>\n\t</div>\n</template>\n```\n\n----------------------------------------\n\nTITLE: Adding Method to Fetch Pages from Directus\nDESCRIPTION: Addition to the DirectusService class for fetching page data from the Directus API.\nSOURCE: https://github.com/directus/docs/blob/main/content/tutorials/1.getting-started/fetch-data-from-directus-with-flutter.md#2025-04-09_snippet_7\n\nLANGUAGE: dart\nCODE:\n```\n  ...\n  Future<Map<String, dynamic>>  getPages() async {\n    final response = await http.get(Uri.parse('$_baseUrl/pages'));\n    if (response.statusCode == 200) {\n      return jsonDecode(response.body)['data'];\n    } else {\n      throw Exception('Failed to load pages');\n    }\n  }\n  ...\n```\n\n----------------------------------------\n\nTITLE: Combining Custom and Advanced Image Transformations in Directus\nDESCRIPTION: Examples of simultaneously using both custom transformation parameters (fit, width, height) and advanced transformations (transforms parameter with flip) through REST API and SDK.\nSOURCE: https://github.com/directus/docs/blob/main/content/guides/5.files/4.transform.md#2025-04-09_snippet_2\n\nLANGUAGE: http\nCODE:\n```\nGET /assets/c984b755-e201-497e-b0a7-24156ad9c7e0\n\t?transforms=[[\"flip\"]]\n\t&fit=cover\n\t&width=300\n\t&height=100\n```\n\nLANGUAGE: graphql\nCODE:\n```\n# Not supported by GraphQL\n```\n\nLANGUAGE: js\nCODE:\n```\nimport { createDirectus, rest, readAssetRaw } from '@directus/sdk';\n\nconst FILE_ID = 'c984b755-e201-497e-b0a7-24156ad9c7e0';\n\nconst directus = createDirectus('directus_project_url').with(rest());\n\nconst result = await directus.request(\n  readAssetRaw(FILE_ID, {\n    transforms: [['flip']],\n    fit: 'cover',\n    width: 300,\n    height: 100,\n  }),\n);\n```\n\n----------------------------------------\n\nTITLE: Retrieving Collection Field Information\nDESCRIPTION: Function to fetch detailed information for selected fields using the FieldsStore, with a watcher to refresh data when properties change. This populates the form fields dynamically based on user selection.\nSOURCE: https://github.com/directus/docs/blob/main/content/tutorials/5.extensions/create-collection-items-in-custom-panels.md#2025-04-09_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\nfunction getFields() {\n  fieldData.value = [];\n\n  props.fields.forEach((field) => {\n    fieldData.value.push(fieldsStore.getField(props.collection, field));\n  });\n}\n\ngetFields();\n```\n\n----------------------------------------\n\nTITLE: Implementing Directus Service Provider in Laravel\nDESCRIPTION: PHP code for the DirectusServiceProvider class, which creates a singleton instance for interacting with the Directus API.\nSOURCE: https://github.com/directus/docs/blob/main/content/tutorials/1.getting-started/fetch-data-from-directus-with-laravel.md#2025-04-09_snippet_2\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\nnamespace App\\Providers;\n\nuse Illuminate\\Support\\ServiceProvider;\nuse Illuminate\\Support\\Facades\\Http;\n\nclass DirectusServiceProvider extends ServiceProvider\n{\n    public function register()\n    {\n        $this->app->singleton('directus', function ($app) {\n            return new class {\n                protected $baseUrl;\n\n                public function __construct()\n                {\n                    $this->baseUrl = rtrim(env('DIRECTUS_URL'), '/');\n                }\n\n                public function request($method, $endpoint, $data = [])\n                {\n                    $url = \"{$this->baseUrl}/items/{$endpoint}\";\n                    return Http::$method($url, $data);\n                }\n\n                public function get($endpoint, $params = [])\n                {\n                    return $this->request('get', $endpoint, $params);\n                }\n            };\n        });\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Using Variables in LiquidJS Email Template\nDESCRIPTION: This snippet demonstrates how to use variables in a LiquidJS email template. It shows both simple variable usage and conditional rendering with a fallback.\nSOURCE: https://github.com/directus/docs/blob/main/content/tutorials/5.extensions/use-dynamic-values-in-custom-email-templates.md#2025-04-09_snippet_3\n\nLANGUAGE: liquid\nCODE:\n```\n{% layout \"my-custom-base\" %}\n{% block content %}\n    <p>Hi {{ firstname }},</p>\n{% endblock %}\n```\n\nLANGUAGE: liquid\nCODE:\n```\n{% layout \"my-custom-base\" %}\n{% block content %}\n    <p>Hi{% if firstname %}{{ firstname }}{% endif %},</p>\n{% endblock %}\n```\n\n----------------------------------------\n\nTITLE: Specifying Return Fields in WebSocket Subscriptions\nDESCRIPTION: Use the 'query.fields' property to specify which fields should be returned in subscription events, allowing for more targeted data retrieval.\nSOURCE: https://github.com/directus/docs/blob/main/content/guides/7.realtime/2.subscriptions.md#2025-04-09_snippet_3\n\nLANGUAGE: json\nCODE:\n```\n{\n\t\"type\": \"subscribe\",\n\t\"collection\": \"messages\",\n\t\"query\": { \"fields\": [\"text\"] }\n}\n```\n\n----------------------------------------\n\nTITLE: Updating DirectusHelper for Blog Data Fetching in Kotlin\nDESCRIPTION: This snippet shows how to update the DirectusHelper file to add an endpoint for fetching blog data. It defines a Retrofit interface with methods for getting global data, pages, and blogs.\nSOURCE: https://github.com/directus/docs/blob/main/content/tutorials/1.getting-started/fetch-data-from-directus-in-android-with-kotlin.md#2025-04-09_snippet_11\n\nLANGUAGE: kotlin\nCODE:\n```\npackage com.example.directusapp.network\nimport com.example.directusapp.Constants\nimport com.example.directusapp.model.BlogsResponse\nimport com.example.directusapp.model.GlobalResponse\nimport com.example.directusapp.model.PageResponse\nimport retrofit2.Retrofit\nimport retrofit2.converter.gson.GsonConverterFactory\nimport retrofit2.http.GET\n\n\ninterface DirectusApiService {\n    @GET(\"items/global\")\n    suspend fun getGlobal(): GlobalResponse\n\n    @GET(\"items/pages\")\n    suspend fun getPages(): PageResponse\n\n    @GET(\"items/blogs?fields=*,author.name\")\n    suspend fun getBlogs(): BlogsResponse\n\n    companion object {\n\n        fun create(): DirectusApiService {\n            val retrofit = Retrofit.Builder()\n                .baseUrl(Constants.BASE_URL)\n                .addConverterFactory(GsonConverterFactory.create())\n                .build()\n            return retrofit.create(DirectusApiService::class.java)\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Building Component Template with Missing Credentials Notice\nDESCRIPTION: Creates the basic template structure with a conditional notice when Twilio credentials are missing.\nSOURCE: https://github.com/directus/docs/blob/main/content/tutorials/5.extensions/send-sms-messages-with-twilio-in-custom-panels.md#2025-04-09_snippet_17\n\nLANGUAGE: vue\nCODE:\n```\n<template>\n\t<v-notice \n\t\tv-if=\"twilioSid === undefined || twilioPhoneNumber === undefined\" \n\t\ttype=\"danger\" \n\t\ticon=\"warning\" \n\t\tclass=\"sms-notice\" \n\t> \n\t\tTwilio API Details Missing \n\t</v-notice> \n\t<div v-else class=\"twilio-sms\" :class=\"{ 'has-header': showHeader }\"></div> \n</template>\n```\n\n----------------------------------------\n\nTITLE: Deleting Items in Meilisearch Index on Directus Delete Operation\nDESCRIPTION: Hook implementation that listens for article deletions in Directus and removes the corresponding documents from the Meilisearch index.\nSOURCE: https://github.com/directus/docs/blob/main/content/tutorials/5.extensions/integrate-meilisearch-indexing-with-custom-hooks.md#2025-04-09_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\naction('articles.items.delete', async (meta) => {\n  await index.deleteDocuments(meta.keys)\n})\n```\n\n----------------------------------------\n\nTITLE: Implementing Home Page Component in Vue.js for Chrome Extension\nDESCRIPTION: This snippet defines a Vue.js component for the home page of a Chrome extension. It displays a list of notes, allows logout, and provides navigation to create or edit notes. It uses Directus SDK for reading and deleting items.\nSOURCE: https://github.com/directus/docs/blob/main/content/tutorials/2.projects/build-a-notebook-chrome-extension-with-directus-auth.md#2025-04-09_snippet_13\n\nLANGUAGE: html\nCODE:\n```\n<template>\n    <div>\n        <div>\n            <p @click=\"logout\">Logout</p>\n\n            <button\n                @click=\"$router.push({ name: 'upsert', params: { id: '+' } })\"\n            >\n                ⊕\n            </button>\n        </div>\n        <p v-if=\"loading\">Loading...</p>\n        <div v-else>\n            <li v-for=\"note in notes\" :key=\"`note-${note.id}`\">\n                <div>\n                    <a :href=\"note.website\"> {{ note.website }}</a>\n                    <div>{{ note.note }}</div>\n                </div>\n                <button\n                    @click=\"\n                        $router.push({\n                            name: 'upsert',\n                            params: { id: note.id },\n                        })\n                    \"\n                >\n                    📝\n                </button>\n                <button @click=\"remove(note.id)\">🗑️</button>\n            </li>\n        </div>\n    </div>\n</template>\n\n<script>\n    import { readItems, deleteItem } from \"@directus/sdk\";\n    import Cookies from \"js-cookie\";\n    export default {\n        inject: [\"directus\"],\n        data() {\n            return {\n                notes: null,\n                loading: false,\n            };\n        },\n        created() {\n            this.getNotes();\n        },\n        methods: {\n            async remove(id) {\n                await this.directus.request(deleteItem(\"notes\", id));\n                this.getNotes();\n            },\n            logout() {\n                Cookies.remove(\"directus_auth\");\n                this.$router.push({ name: \"login\" });\n            },\n            async getNotes() {\n                this.loading = true;\n                this.notes = await this.directus.request(readItems(\"notes\"));\n                this.loading = false;\n            },\n        },\n    };\n</script>\n```\n\n----------------------------------------\n\nTITLE: Setting Directus URL in React\nDESCRIPTION: This snippet defines the Directus project URL as a constant for use in the application.\nSOURCE: https://github.com/directus/docs/blob/main/content/tutorials/2.projects/build-a-multi-user-chat-with-react-and-directus-realtime.md#2025-04-09_snippet_1\n\nLANGUAGE: js\nCODE:\n```\nconst url = 'https://your-directus-url';\n```\n\n----------------------------------------\n\nTITLE: Using UIDs in WebSocket Subscriptions\nDESCRIPTION: Add a 'uid' property to subscription requests and responses to manage multiple ongoing CRUD actions and subscriptions simultaneously.\nSOURCE: https://github.com/directus/docs/blob/main/content/guides/7.realtime/2.subscriptions.md#2025-04-09_snippet_4\n\nLANGUAGE: json\nCODE:\n```\n{\n\t\"type\": \"subscribe\",\n\t\"collection\": \"messages\",\n\t\"uid\": \"any-string-value\"\n}\n```\n\nLANGUAGE: json\nCODE:\n```\n{\n\t\"type\": \"subscription\",\n\t\"event\": \"create\",\n\t\"data\": [\n\t\t// ...\n\t],\n\t\"uid\": \"any-string-value\"\n}\n```\n\n----------------------------------------\n\nTITLE: Customizing Directus Docker Image for SSO Proxy Support\nDESCRIPTION: This Dockerfile extends the Directus image to install global-agent and apply the patch for enabling proxy support in SSO configurations. It includes steps for installing dependencies and applying the patch file.\nSOURCE: https://github.com/directus/docs/blob/main/content/guides/3.auth/7.sso/1.index.md#2025-04-09_snippet_1\n\nLANGUAGE: dockerfile\nCODE:\n```\nFROM directus/directus:11.1.1\n\nUSER root\nRUN corepack enable\nUSER node\n\nRUN pnpm install global-agent@3\n\nCOPY ecosystem-global-agent.patch .\n\nUSER root\nRUN <<EOF\n\tapk add --no-cache patch\n\tpatch -p1 < ecosystem-global-agent.patch || exit 1\n\trm ecosystem-global-agent.patch\n\tapk del patch\nEOF\nUSER node\n```\n\n----------------------------------------\n\nTITLE: Implementing Flutter App with Global Metadata\nDESCRIPTION: Complete Dart implementation of a Flutter application that fetches and uses global metadata from Directus in the UI components.\nSOURCE: https://github.com/directus/docs/blob/main/content/tutorials/1.getting-started/fetch-data-from-directus-with-flutter.md#2025-04-09_snippet_6\n\nLANGUAGE: dart\nCODE:\n```\nimport 'package:flutter/material.dart';\nimport 'services/directus_service.dart';\nimport 'package:flutter_dotenv/flutter_dotenv.dart';\nFuture main() async {\n  await dotenv.load(fileName: \".env\");\n  runApp(MyApp());\n}\nclass MyApp extends StatelessWidget {\n  final DirectusService _directusService = DirectusService();\n  MyApp({super.key});\n  @override\n  Widget build(BuildContext context) {\n    return FutureBuilder(\n      future: Future.wait([\n        _directusService.getGlobalMetadata(),\n      ]),\n      builder: (context,\n          AsyncSnapshot<List<Map<String, dynamic>>> settingsSnapshot) {\n        if (settingsSnapshot.connectionState == ConnectionState.waiting) {\n          return const CircularProgressIndicator();\n        } else if (settingsSnapshot.hasError) {\n          return Text('Error: ${settingsSnapshot.error}');\n        } else {\n          final metadata = settingsSnapshot.data![0];\n          return MaterialApp(\n            title: metadata['title'],\n            theme: ThemeData(\n              primarySwatch: Colors.blue,\n            ),\n            home: Scaffold(\n              appBar: AppBar(\n                title: Text(metadata['title'] ?? 'My App'),\n              ),\n              body: Center(\n                child:\n                    Text(metadata['description'] ?? 'No description provided'),\n              ),\n            ),\n          );\n        }\n      },\n    );\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Project URL for Directus Connection\nDESCRIPTION: Defines the URL variable for connecting to a Directus project. This URL should be replaced with the actual Directus project URL.\nSOURCE: https://github.com/directus/docs/blob/main/content/tutorials/2.projects/build-a-multi-user-chat-with-javascript-and-directus-realtime.md#2025-04-09_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nconst url = 'https://your-directus-url';\n```\n\n----------------------------------------\n\nTITLE: Fetching Blog Posts from Directus in Flutter\nDESCRIPTION: Adds a method to the DirectusService class to fetch blog posts from Directus using an HTTP GET request. It returns a list of blog posts or throws an exception if the request fails.\nSOURCE: https://github.com/directus/docs/blob/main/content/tutorials/1.getting-started/fetch-data-from-directus-with-flutter.md#2025-04-09_snippet_10\n\nLANGUAGE: Dart\nCODE:\n```\nFuture<List<dynamic>> getBlogPosts() async {\n  final response = await http.get(Uri.parse('$_baseUrl/posts'));\n  if (response.statusCode == 200) {\n    return jsonDecode(response.body)['data'];\n  } else {\n    throw Exception('Failed to load blog posts');\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Replicas for High Availability Directus Deployment\nDESCRIPTION: Shows how to configure multiple replicas of a Directus application for high availability. With multiple replicas, the load is distributed, and if one pod fails, others continue to serve requests.\nSOURCE: https://github.com/directus/docs/blob/main/content/tutorials/6.self-hosting/understanding-kubernetes.md#2025-04-09_snippet_4\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: apps/v1\nkind: Deployment\nmetadata:\n  name: directus-Deployment\n  labels:\n    app: directus\nspec:\n  replicas: 3\n  selector:\n    matchLabels:\n      app: directus\n  template:\n    metadata:\n      labels:\n        app: directus\n    spec:\n      containers:\n      - name: directus\n        image: directus:10.9.3\n        ports:\n          - containerPort: 80\n```\n\n----------------------------------------\n\nTITLE: Implementing Directus Logout Function in JavaScript\nDESCRIPTION: Function to handle user logout using Directus SDK. Retrieves refresh token from localStorage, makes logout request to Directus, and cleans up local storage.\nSOURCE: https://github.com/directus/docs/blob/main/content/tutorials/1.getting-started/using-authentication-in-react.md#2025-04-09_snippet_18\n\nLANGUAGE: javascript\nCODE:\n```\n// src/lib/directus.js\n\nimport { logout } from '@directus/sdk';\n\nexport const logoutUser = async () => {\n    const refreshToken = (JSON.parse(localStorage.getItem('directus_auth')) || {}).refresh_token;\n    await client.request(logout(refreshToken, \"json\"));\n    localStorage.removeItem('directus_auth');\n}\n```\n\n----------------------------------------\n\nTITLE: Example Owlet API Device Response\nDESCRIPTION: Sample JSON response from the Owlet API showing device information structure. It includes the device's digital serial number (dsn), connection status, and other properties required for further data fetching.\nSOURCE: https://github.com/directus/docs/blob/main/content/tutorials/2.projects/use-directus-as-a-baby-health-tracker-with-owlet-and-ops-genie.md#2025-04-09_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"status\": 200,\n  \"statusText\": \"OK\",\n  \"headers\": {\n    ...\n  },\n  \"data\": [\n    {\n      \"device\": {\n        \"dsn\": \"AC00***697\",\n        \"lan_ip\": \"192.168.*.*\",\n        \"lan_enabled\": false,\n        \"has_properties\": true,\n        \"connection_status\": \"Online\",\n        \"lat\": \"********\",\n        \"lng\": \"********\",\n        \"device_type\": \"Wifi\"\n      }\n    }\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Limiting Directus API Results\nDESCRIPTION: Shows how to limit the number of items returned using the limit parameter. The default limit is 100, and a value of -1 will return all items, though this may impact performance for large collections.\nSOURCE: https://github.com/directus/docs/blob/main/content/guides/4.connect/3.query-parameters.md#2025-04-09_snippet_5\n\nLANGUAGE: http\nCODE:\n```\nGET /items/posts\n\t?limit=50\n```\n\nLANGUAGE: graphql\nCODE:\n```\nquery {\n\tposts(limit: 50) {\n\t\tid\n\t}\n}\n```\n\nLANGUAGE: js\nCODE:\n```\nimport { createDirectus, rest, readItems } from '@directus/sdk';\nconst directus = createDirectus('https://directus.example.com').with(rest());\n\nconst result = await directus.request(\n\treadItems('posts', {\n\t\tlimit: 50,\n\t})\n);\n```\n\n----------------------------------------\n\nTITLE: Alert Creation Condition Rule in JSON\nDESCRIPTION: JSON condition rule that checks if an alert should be created based on the create_alert flag from the previous evaluation step.\nSOURCE: https://github.com/directus/docs/blob/main/content/tutorials/2.projects/use-directus-as-a-baby-health-tracker-with-owlet-and-ops-genie.md#2025-04-09_snippet_5\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"$last\": {\n        \"create_alert\": {\n            \"_eq\": true\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Sample Multilingual Content - German Translation\nDESCRIPTION: This sample Markdown content provides a German translation of the Chandrayaan article. It demonstrates how multilingual content can be structured in Directus and accessed through the translation interface.\nSOURCE: https://github.com/directus/docs/blob/main/content/tutorials/1.getting-started/implementing-multilingual-content-using-directus-and-next.md#2025-04-09_snippet_8\n\nLANGUAGE: md\nCODE:\n```\nChandrayaan ist eine Reihe von Monderkundungsmissionen, die von der Indian Space Research Organisation (ISRO) entwickelt wurden, um Indiens Weltraumkapazitäten und sein wissenschaftliches Verständnis des Mondes zu verbessern. Das Programm begann mit Chandrayaan-1, das 2008 gestartet wurde und maßgeblich zur Bestätigung der Anwesenheit von Wassermolekülen auf der Mondoberfläche beitrug. Diese bahnbrechende Entdeckung hat unser Verständnis der Geologie des Mondes und seines Potenzials für zukünftige Erkundungen verändert. Die Raumsonde trug eine Mischung aus indischen und internationalen Instrumenten, darunter den Moon Mineralogy Mapper der NASA, und war fast ein Jahr lang in Betrieb, bevor die Kommunikation abbrach.\n\nAufbauend auf diesem Erfolg wurde Chandrayaan-2 2019 gestartet, bestehend aus einem Orbiter, einem Lander (Vikram) und einem Rover (Pragyan). Während der Lander keine weiche Landung hinbekam, sendet der Orbiter weiterhin wertvolle Daten. Im Jahr 2023 schrieb Chandrayaan-3 Geschichte, indem es erfolgreich in der Nähe des Südpols des Mondes landete, womit Indien die erste Nation war, der dieses Kunststück gelang. Die Mission setzte den Rover Pragyan ein, der vor Ort Analysen des Mondbodens durchführte und das Vorhandensein von Schwefel und anderen Elementen bestätigte. Das Chandrayaan-Programm ist ein Beweis für Indiens wachsende Expertise in der Weltraumforschung und seine Ambitionen für zukünftige interplanetare Missionen.\n```\n\n----------------------------------------\n\nTITLE: Generating Order Numbers in TypeScript\nDESCRIPTION: This utility function generates a random 10-digit order number using numeric characters. It's used to create unique identifiers for orders in the e-commerce system.\nSOURCE: https://github.com/directus/docs/blob/main/content/tutorials/2.projects/build-an-ecommerce-platform-with-next-js-stripe-and-directus-automate.md#2025-04-09_snippet_14\n\nLANGUAGE: ts\nCODE:\n```\nexport default function generateOrderNum() {\n  const length = 10\n  let result = '';\n  const characters = '0123456789';\n  const charactersLength = characters.length;\n  for (let i = 0; i < length; i++) {\n    result += characters.charAt(Math.floor(Math.random() * charactersLength));\n  }\n  console.log(result)\n  return result;\n}\ngenerateOrderNum();\n```\n\n----------------------------------------\n\nTITLE: Function Parameters Filter in JavaScript\nDESCRIPTION: Demonstrates using date functions in filters to query based on year and month of a date field.\nSOURCE: https://github.com/directus/docs/blob/main/content/guides/4.connect/2.filter-rules.md#2025-04-09_snippet_5\n\nLANGUAGE: js\nCODE:\n```\n{\n  _and: [\n    {\n      \"year(published_date)\": {\n        _eq: 1968,\n      },\n    },\n    {\n      \"month(published_date)\": {\n        _eq: 4,\n      },\n    },\n  ],\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Up WebSocket Message Handler for Authentication\nDESCRIPTION: Listens for WebSocket messages and subscribes to updates on the Messages collection after successful authentication. This triggers the subscribe function when auth status is confirmed.\nSOURCE: https://github.com/directus/docs/blob/main/content/tutorials/2.projects/build-a-multi-user-chat-with-javascript-and-directus-realtime.md#2025-04-09_snippet_8\n\nLANGUAGE: javascript\nCODE:\n```\nclient.onWebSocket('message', function (data) {\n  if (data.type == 'auth' && data.status == 'ok') {\n\t  subscribe('update')\n  }\n});\n```\n\n----------------------------------------\n\nTITLE: Creating Blog Post Detail Widget in Flutter\nDESCRIPTION: Defines a BlogPostWidget for displaying individual blog post details. It uses the flutter_html package to render the post content.\nSOURCE: https://github.com/directus/docs/blob/main/content/tutorials/1.getting-started/fetch-data-from-directus-with-flutter.md#2025-04-09_snippet_13\n\nLANGUAGE: Dart\nCODE:\n```\nimport 'package:flutter/material.dart';\nimport 'package:flutter_html/flutter_html.dart';\nclass BlogPostWidget extends StatelessWidget {\n  final Map<String, dynamic> post;\n  const BlogPostWidget({super.key, required this.post });\n  @override\n  Widget build(BuildContext context) {\n    return Scaffold(\n      appBar: AppBar(\n        title: Text(post['title']),\n      ),\n      body: SingleChildScrollView(\n        child: Padding(\n          padding: const EdgeInsets.all(16.0),\n          child: Column(\n            crossAxisAlignment: CrossAxisAlignment.start,\n            children: [\n             const SizedBox(height: 8),\n            Html(\n              data: post['content'],\n            ),\n            ],\n          ),\n        ),\n      ),\n    );\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Twilio Configuration Options in JavaScript\nDESCRIPTION: Sets up configuration fields for the Twilio phone number and account SID in the panel extension options.\nSOURCE: https://github.com/directus/docs/blob/main/content/tutorials/5.extensions/send-sms-messages-with-twilio-in-custom-panels.md#2025-04-09_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\n{\n\tfield: 'twilioPhoneNumber',\n\tname: 'Twilio Phone Number',\n\ttype: 'string',\n\tmeta: {\n\t\tinterface: 'input',\n\t\twidth: 'half',\n\t},\n},\n{\n\tfield: 'twilioSid',\n\tname: 'Twilio Account SID',\n\ttype: 'string',\n\tmeta: {\n\t\tinterface: 'input',\n\t\twidth: 'half',\n\t},\n}\n```\n\n----------------------------------------\n\nTITLE: Dynamic Page Fetching Based on URL Slug in Nuxt\nDESCRIPTION: Creates a dynamic Nuxt page that fetches data from Directus based on the URL slug parameter and renders the appropriate page content or a 404 error if the page is not found.\nSOURCE: https://github.com/directus/docs/blob/main/content/tutorials/1.getting-started/rendering-dynamic-blocks-using-nuxt.md#2025-04-09_snippet_13\n\nLANGUAGE: vue\nCODE:\n```\n<script setup lang=\"ts\">\nconst { $directus, $readItems } = useNuxtApp()\nconst route = useRoute()\nconst page: Ref<Page | null> = ref(null)\n\nconst { data, error } = await useAsyncData('post', async () => {\n\tconst slugParam = Array.isArray(route.params.slug) ? route.params.slug[0] : route.params.slug\n\treturn $directus.request($readItems('pages', {\n\t\tfilter: {\n\t\t\tslug: { _eq: slugParam },\n\t\t},\n\t\tfields: ['title', 'slug', 'blocks.id', 'blocks.collection', 'blocks.item.*'],\n\t\tlimit: 1\n\t}))\n})\n\nif (error.value || data.value === null || data.value.length === 0) {\n\tconsole.error(error)\n\tthrow createError({\n\t\tstatusCode: 404,\n\t\tstatusMessage: \"Page not found\"\n\t})\n}\n\npage.value = data.value[0]\n</script>\n<template>\n\t<Page v-if=\"page\" :title=\"page.title\" :blocks=\"page.blocks\"></Page>\n\t<div v-else>Loading...</div>\n</template>\n```\n\n----------------------------------------\n\nTITLE: Directus Plugin Configuration\nDESCRIPTION: Nuxt plugin setup for Directus SDK integration with realtime support.\nSOURCE: https://github.com/directus/docs/blob/main/content/tutorials/2.projects/build-a-realtime-chat-app-using-directus-and-nuxt.md#2025-04-09_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nimport { createDirectus, realtime } from \"@directus/sdk\";\nconst directus = createDirectus<DirectusSchema>(\n\t\"http://your-website-url/directus\",\n).with(realtime());\nexport default defineNuxtPlugin(() => {\n\treturn {\n\t\tprovide: { directus },\n\t};\n});\n```\n\n----------------------------------------\n\nTITLE: Creating New Messages with Directus WebSocket\nDESCRIPTION: This snippet handles the submission of new messages, sending them to the Directus server via WebSocket.\nSOURCE: https://github.com/directus/docs/blob/main/content/tutorials/2.projects/build-a-multi-user-chat-with-react-and-directus-realtime.md#2025-04-09_snippet_8\n\nLANGUAGE: js\nCODE:\n```\nconst messageSubmit = (event) => {\n  event.preventDefault();\n\n  const text = event.target.elements.text.value;\n\n  client.sendMessage({\n    type: 'items',\n    collection: 'messages',\n    action: 'create',\n    data: { text },\n  });\n\n  event.target.reset();\n};\n```\n\n----------------------------------------\n\nTITLE: Implementing Authenticated API Route in JavaScript\nDESCRIPTION: Enhanced router configuration that validates user authentication before proxying the request. It checks if the requesting user exists in the Directus users collection before proceeding with the API call.\nSOURCE: https://github.com/directus/docs/blob/main/content/tutorials/5.extensions/proxy-an-external-api-in-a-custom-endpoint-extension.md#2025-04-09_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nrouter.get('/*', async (req, res) => {\n  try {\n    const user = req.accountability?.user;\n    const { ItemsService } = services;\n    const users = new ItemsService(\"directus_users\", {schema});\n    const authenticatedUser = await users.readOne(user);\n    if ( authenticatedUser == null) {\n      res.status(403);\n      return res.send(`You don't have permission to access this.`);\n    }\n\n    const response = await fetch(`https://pokeapi.co/api/v2/${req.url}`);\n\n    if (response.ok) {\n      res.json(await response.json());\n    } else {\n      res.status(response.status);\n      res.send(response.statusText);\n    }\n  } catch (error) {\n    res.status(500);\n    res.send(error.message);\n  }\n});\n```\n\n----------------------------------------\n\nTITLE: Initializing Visual Editing Connection\nDESCRIPTION: Basic implementation of the apply() method to connect with Directus instance.\nSOURCE: https://github.com/directus/docs/blob/main/content/guides/2.content/8.visual-editor/1.frontend-library.md#2025-04-09_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\napply({ directusUrl: 'http://localhost:8000' });\n```\n\n----------------------------------------\n\nTITLE: Chat Login Template\nDESCRIPTION: Vue template for chat login form with conditional rendering based on authentication state.\nSOURCE: https://github.com/directus/docs/blob/main/content/tutorials/2.projects/build-a-realtime-chat-app-using-directus-and-nuxt.md#2025-04-09_snippet_7\n\nLANGUAGE: html\nCODE:\n```\n<template>\n\t<div>\n\t\t<h1>Directus Realtime Chat</h1>\n\t\t<div v-if=\"refreshToken === undefined\">\n\t\t\t<h2>Login</h2>\n\t\t\t<input v-model=\"credentials.email\" type=\"text\" placeholder=\"Email\" /><br />\n\t\t\t<input v-model=\"credentials.password\" type=\"password\" placeholder=\"Password\" /><br />\n\t\t\t<button @click=\"login\" type=\"button\">Login</button>\n\t\t</div>\n\t\t<div v-else>\n\t\t\t<h2>Chat</h2>\n\t\t\t<div>Logged in</div>\n\t\t</div>\n\t</div>\n</template>\n```\n\n----------------------------------------\n\nTITLE: Initializing SvelteKit Project\nDESCRIPTION: Command to create a new SvelteKit project using the minimal template without TypeScript.\nSOURCE: https://github.com/directus/docs/blob/main/content/tutorials/1.getting-started/rendering-dynamic-blocks-using-sveltekit.md#2025-04-09_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nnpx sv create dynamic_blocks\n```\n\n----------------------------------------\n\nTITLE: Integrating Testimonial Form and Carousel in Svelte Page Component\nDESCRIPTION: This snippet shows how to integrate the testimonial creation form and carousel display into a main page component. It includes toggling between adding a new testimonial and displaying existing ones.\nSOURCE: https://github.com/directus/docs/blob/main/content/tutorials/2.projects/build-a-testimonial-widget-with-sveltekit-and-directus.md#2025-04-09_snippet_9\n\nLANGUAGE: javascript\nCODE:\n```\n<script>\n  /** @type {import('./$types').PageData} */\n  export let data;\n  let addTestimonial = false;\n  import Carousel from \"$lib/TestimonialCarousel.svelte\";\n  import TestimonialCreate from \"../lib/TestimonialCreate.svelte\";\n  async function createTestimonial() {\n    addTestimonial = true;\n  }\n  async function cancelTestimonial() {\n    addTestimonial = false;\n  }\n</script>\n\n<div class=\"page-div1\">\n\t<h1 class=\"page-h1\">Product testimonials</h1>\n\t<div class=\"page-div2\">\n\t  {#if addTestimonial}\n\t\t<button\n\t\t  on:click={cancelTestimonial}\n\t\t  class=\"page-button1\"\n\t\t  >Cancel</button\n\t\t>\n\t  {:else}\n\t\t<button\n\t\t  on:click={createTestimonial}\n\t\t  class=\"page-button2\"\n\t\t  >Add your testimonial</button\n\t\t>\n\t  {/if}\n\t</div>\n</div>\n\n\n{#if addTestimonial}\n  <TestimonialCreate {addTestimonial} />\n{:else}\n  <section class=\"page-section\">\n    <Carousel {data} />\n  </section>\n{/if}\n\n<style>\n.page-h1 {\n\ttext-align: center;\n}\n.page-div1{\n\tmargin-top: 2px;\n}\n.page-div2{\n\tdisplay: flex;\n\tjustify-content: center;\n}\n.page-section {\n\tdisplay: grid;\n\tmin-height: 100%;\n\tpadding-left: 1000px;\n\tmargin: 10px;\n\tgrid-template-rows: auto;\n\tplace-items: center;\n\toverflow-x: scroll;\n}\n.page-button1 {\n\tdisplay: flex;\n\tjustify-items: center;\n\talign-items: center;\n\tfont-size: small;\n\tpadding: 10px 20px 10px 20px;\n\twidth: 80;\n\tbackground-color: red;\n\tborder-color: white;\n\tmargin-top: 8px;\n\tfont: bold;\n\tborder-radius: 25px;\n\tcolor: white;\n}\n.page-button2 {\n\tdisplay: flex;\n\tjustify-items: center;\n\talign-items: center;\n\tfont-size: small;\n\tpadding: 10px 20px 10px 20px;\n\twidth: 80;\n\tbackground-color: blue;\n\tborder-color: white;\n\tmargin-top: 8px;\n\tfont: bold;\n\tborder-radius: 25px;\n\tcolor: white;\n}\n</style>\n```\n\n----------------------------------------\n\nTITLE: Creating a Laravel Controller with Artisan\nDESCRIPTION: Command to generate a new PageController using Laravel's Artisan CLI tool.\nSOURCE: https://github.com/directus/docs/blob/main/content/tutorials/1.getting-started/fetch-data-from-directus-with-laravel.md#2025-04-09_snippet_11\n\nLANGUAGE: shell\nCODE:\n```\nphp artisan make:controller PageController\n```\n\n----------------------------------------\n\nTITLE: Using Offset for Pagination in Directus API\nDESCRIPTION: Demonstrates how to skip a specified number of items in the response using the offset parameter. This parameter is useful for implementing pagination in API requests.\nSOURCE: https://github.com/directus/docs/blob/main/content/guides/4.connect/3.query-parameters.md#2025-04-09_snippet_6\n\nLANGUAGE: http\nCODE:\n```\nGET /items/posts\n\t?offset=100\n```\n\nLANGUAGE: graphql\nCODE:\n```\nquery {\n\tposts(offset: 100) {\n\t\tid\n\t}\n}\n```\n\nLANGUAGE: js\nCODE:\n```\nimport { createDirectus, rest, readItems } from '@directus/sdk';\nconst directus = createDirectus('https://directus.example.com').with(rest());\n\nconst result = await directus.request(\n\treadItems('posts', {\n\t\toffset: 100,\n\t})\n);\n```\n\n----------------------------------------\n\nTITLE: Installing Directus Extension Dependencies\nDESCRIPTION: Commands to create a new Directus extension and install the Twilio package\nSOURCE: https://github.com/directus/docs/blob/main/content/tutorials/5.extensions/send-sms-messages-with-twilio-in-custom-operations.md#2025-04-09_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nnpx create-directus-extension@latest\ncd directus-operation-twilio-sms\nnpm install twilio\n```\n\n----------------------------------------\n\nTITLE: Custom Endpoints - TypeScript\nDESCRIPTION: Example of calling typed custom endpoints using the Directus SDK in TypeScript\nSOURCE: https://github.com/directus/docs/blob/main/content/guides/4.connect/6.sdk.md#2025-04-09_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nimport { createDirectus, rest, customEndpoint } from '@directus/sdk';\nconst directus = createDirectus('http://directus.example.com').with(rest());\n\nconst result = await directus.request(customEndpoint<OutputType>({\n  path: '/custom/endpoint',\n  method: 'GET',\n}));\n```\n\n----------------------------------------\n\nTITLE: Message History Fetching in TypeScript\nDESCRIPTION: Implements functionality to fetch recent messages when the chat loads initially, including sorting and field selection.\nSOURCE: https://github.com/directus/docs/blob/main/content/tutorials/2.projects/build-a-realtime-chat-app-using-directus-and-nuxt.md#2025-04-09_snippet_14\n\nLANGUAGE: typescript\nCODE:\n```\nconst readAllMessages = () => {\n\t$directus.sendMessage({\n\t\ttype: 'items',\n\t\tcollection: 'messages',\n\t\taction: 'read',\n\t\tquery: {\n\t\t\tlimit: 10,\n\t\t\tsort: '-date_created',\n\t\t\tfields: ['*', 'user_created.first_name'],\n\t\t},\n\t\tuid: 'get-recent-messages'\n\t})\n}\n```\n\n----------------------------------------\n\nTITLE: Creating User Registration Component for Directus\nDESCRIPTION: Vue component that handles user registration with Directus authentication using a form interface.\nSOURCE: https://github.com/directus/docs/blob/main/content/tutorials/2.projects/build-a-notebook-chrome-extension-with-directus-auth.md#2025-04-09_snippet_8\n\nLANGUAGE: html\nCODE:\n```\n<template>\n    <div>\n        <form @submit.prevent=\"signup\">\n            <label>Name</label>\n            <input type=\"text\" v-model=\"name\" required />\n\n            <label>Email</label>\n            <input type=\"email\" v-model=\"email\" required />\n\n            <label>Password</label>\n            <input type=\"password\" v-model=\"password\" required />\n            <button type=\"submit\">Signup</button>\n            <p>\n                Already have account?\n                <span @click=\"$router.push({ name: 'login' })\">Login</span>\n            </p>\n        </form>\n    </div>\n</template>\n\n<script>\n    import { registerUser } from \"@directus/sdk\";\n    export default {\n        inject: [\"directus\"],\n        data() {\n            return {\n                name: \"\",\n                email: \"\",\n                password: \"\",\n            };\n        },\n        methods: {\n            async signup() {\n                await this.directus.request(\n                    registerUser({\n                        first_name: this.name,\n                        email: this.email,\n                        password: this.password,\n                    })\n                );\n                this.$router.push({ name: \"login\" });\n            },\n        },\n    };\n</script>\n```"
  }
]