[
  {
    "owner": "react-hook-form",
    "repo": "documentation",
    "content": "TITLE: Integrating Form Submission with Services in React Hook Form\nDESCRIPTION: Demonstrates how to use the Form component to handle API submissions with success and error callbacks. Shows basic form setup with required field validation.\nSOURCE: https://github.com/react-hook-form/documentation/blob/master/src/content/get-started.mdx#2025-04-09_snippet_9\n\nLANGUAGE: javascript\nCODE:\n```\nimport { Form } from \"react-hook-form\"\n\nfunction App() {\n  const { register, control } = useForm()\n\n  return (\n    <Form\n      action=\"/api/save\" // Send post request with the FormData\n      // encType={'application/json'} you can also switch to json object\n      onSuccess={() => {\n        alert(\"Your application is updated.\")\n      }}\n      onError={() => {\n        alert(\"Submission has failed.\")\n      }}\n      control={control}\n    >\n      <input {...register(\"firstName\", { required: true })} />\n      <input {...register(\"lastName\", { required: true })} />\n      <button>Submit</button>\n    </Form>\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Basic Form Implementation\nDESCRIPTION: Demonstrates basic form setup with React Hook Form including registration, validation, and submission handling. Shows usage of register function and form state management.\nSOURCE: https://github.com/react-hook-form/documentation/blob/master/src/content/get-started.mdx#2025-04-09_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { useForm, SubmitHandler } from \"react-hook-form\"\n\ntype Inputs = {\n  example: string\n  exampleRequired: string\n}\n\nexport default function App() {\n  const {\n    register,\n    handleSubmit,\n    watch,\n    formState: { errors },\n  } = useForm<Inputs>()\n  const onSubmit: SubmitHandler<Inputs> = (data) => console.log(data)\n\n  console.log(watch(\"example\")) // watch input value by passing the name of it\n\n  return (\n    /* \"handleSubmit\" will validate your inputs before invoking \"onSubmit\" */\n    <form onSubmit={handleSubmit(onSubmit)}>\n      {/* register your input into the hook by invoking the \"register\" function */}\n      <input defaultValue=\"test\" {...register(\"example\")} />\n\n      {/* include validation with required or other standard HTML validation rules */}\n      <input {...register(\"exampleRequired\", { required: true })} />\n      {/* errors will return when field validation fails  */}\n      {errors.exampleRequired && <span>This field is required</span>}\n\n      <input type=\"submit\" />\n    </form>\n  )\n```\n\nLANGUAGE: javascript\nCODE:\n```\nimport { useForm } from \"react-hook-form\"\n\nexport default function App() {\n  const {\n    register,\n    handleSubmit,\n    watch,\n    formState: { errors },\n  } = useForm()\n\n  const onSubmit = (data) => console.log(data)\n\n  console.log(watch(\"example\")) // watch input value by passing the name of it\n\n  return (\n    /* \"handleSubmit\" will validate your inputs before invoking \"onSubmit\" */\n    <form onSubmit={handleSubmit(onSubmit)}>\n      {/* register your input into the hook by invoking the \"register\" function */}\n      <input defaultValue=\"test\" {...register(\"example\")} />\n\n      {/* include validation with required or other standard HTML validation rules */}\n      <input {...register(\"exampleRequired\", { required: true })} />\n      {/* errors will return when field validation fails  */}\n      {errors.exampleRequired && <span>This field is required</span>}\n\n      <input type=\"submit\" />\n    </form>\n  )\n```\n\n----------------------------------------\n\nTITLE: React Web Form Implementation\nDESCRIPTION: Complete example showing Form component usage in React Web with form submission handling and error states.\nSOURCE: https://github.com/react-hook-form/documentation/blob/master/src/content/docs/useform/form.mdx#2025-04-09_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nimport { useForm, Form } from \"react-hook-form\"\n\nfunction App() {\n  const {\n    control,\n\n    register,\n\n    formState: { isSubmitSuccessful, errors },\n  } = useForm({\n    // progressive: true, optional prop for progressive enhancement\n  })\n\n  return (\n    <div>\n      // Use action prop to make post submission with formData\n      <Form\n        action=\"/api\"\n        control={control}\n        onSuccess={() => {\n          alert(\"Success\")\n        }}\n        onError={() => {\n          alert(\"error\")\n        }}\n      >\n        {\" \"}\n        <input {...register(\"name\")} />\n        {isSubmitSuccessful && <p>Form submit successful.</p>}\n        {errors?.root?.server && <p>Form submit failed.</p>}\n        <button>submit</button>\n      </Form>\n      // Manual form submission\n      <Form\n        onSubmit={async ({ formData, data, formDataJson, event }) => {\n          await fetch(\"api\", {\n            method: \"post\",\n\n            body: formData,\n          })\n        }}\n      >\n        {\" \"}\n        <input {...register(\"test\")} /> <button>submit</button>\n      </Form>\n    </div>\n  )\n```\n\n----------------------------------------\n\nTITLE: Integrating React Hook Form with UI Libraries\nDESCRIPTION: Demonstrates integration with external UI libraries like react-select and Material-UI using the Controller component. Shows form setup with TypeScript interfaces and form submission handling.\nSOURCE: https://github.com/react-hook-form/documentation/blob/master/src/content/get-started.mdx#2025-04-09_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nimport Select from \"react-select\"\nimport { useForm, Controller, SubmitHandler } from \"react-hook-form\"\nimport { Input } from \"@material-ui/core\"\n\ninterface IFormInput {\n  firstName: string\n  lastName: string\n  iceCreamType: { label: string; value: string }\n}\n\nconst App = () => {\n  const { control, handleSubmit } = useForm({\n    defaultValues: {\n      firstName: \"\",\n      lastName: \"\",\n      iceCreamType: {},\n    },\n  })\n\n  const onSubmit: SubmitHandler<IFormInput> = (data) => {\n    console.log(data)\n  }\n\n  return (\n    <form onSubmit={handleSubmit(onSubmit)}>\n      <Controller\n        name=\"firstName\"\n        control={control}\n        render={({ field }) => <Input {...field} />}\n      />\n      <Controller\n        name=\"iceCreamType\"\n        control={control}\n        render={({ field }) => (\n          <Select\n            {...field}\n            options={[\n              { value: \"chocolate\", label: \"Chocolate\" },\n              { value: \"strawberry\", label: \"Strawberry\" },\n              { value: \"vanilla\", label: \"Vanilla\" },\n            ]}\n          />\n        )}\n      />\n      <input type=\"submit\" />\n    </form>\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Controlled Input Integration with Material-UI\nDESCRIPTION: Shows how to integrate controlled inputs using the Controller component and Material-UI components. Includes validation rules and form state management.\nSOURCE: https://github.com/react-hook-form/documentation/blob/master/src/content/get-started.mdx#2025-04-09_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\nimport { useForm, Controller, SubmitHandler } from \"react-hook-form\"\nimport { TextField, Checkbox } from \"@material-ui/core\"\n\ninterface IFormInputs {\n  TextField: string\n  MyCheckbox: boolean\n}\n\nfunction App() {\n  const { handleSubmit, control, reset } = useForm<IFormInputs>({\n    defaultValues: {\n      MyCheckbox: false,\n    },\n  })\n  const onSubmit: SubmitHandler<IFormInputs> = (data) => console.log(data)\n\n  return (\n    <form onSubmit={handleSubmit(onSubmit)}>\n      <Controller\n        name=\"MyCheckbox\"\n        control={control}\n        rules={{ required: true }}\n        render={({ field }) => <Checkbox {...field} />}\n      />\n      <input type=\"submit\" />\n    </form>\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Form Validation Implementation\nDESCRIPTION: Demonstrates implementation of form validation rules including required fields, min/max values, and pattern matching. Shows how to apply HTML standard validation rules.\nSOURCE: https://github.com/react-hook-form/documentation/blob/master/src/content/get-started.mdx#2025-04-09_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nimport { useForm, SubmitHandler } from \"react-hook-form\"\n\ninterface IFormInput {\n  firstName: string\n  lastName: string\n  age: number\n}\n\nexport default function App() {\n  const { register, handleSubmit } = useForm<IFormInput>()\n  const onSubmit: SubmitHandler<IFormInput> = (data) => console.log(data)\n\n  return (\n    <form onSubmit={handleSubmit(onSubmit)}>\n      <input {...register(\"firstName\", { required: true, maxLength: 20 })} />\n      <input {...register(\"lastName\", { pattern: /^[A-Za-z]+$/i })} />\n      <input type=\"number\" {...register(\"age\", { min: 18, max: 99 })} />\n      <input type=\"submit\" />\n    </form>\n  )\n```\n\nLANGUAGE: javascript\nCODE:\n```\nimport { useForm } from \"react-hook-form\"\n\nexport default function App() {\n  const { register, handleSubmit } = useForm()\n  const onSubmit = (data) => console.log(data)\n\n  return (\n    <form onSubmit={handleSubmit(onSubmit)}>\n      <input {...register(\"firstName\", { required: true, maxLength: 20 })} />\n      <input {...register(\"lastName\", { pattern: /^[A-Za-z]+$/i })} />\n      <input type=\"number\" {...register(\"age\", { min: 18, max: 99 })} />\n      <input type=\"submit\" />\n    </form>\n  )\n```\n\n----------------------------------------\n\nTITLE: TypeScript Integration with React Hook Form\nDESCRIPTION: Demonstrates type-safe form handling using TypeScript with React Hook Form, including type definitions and validation.\nSOURCE: https://github.com/react-hook-form/documentation/blob/master/src/content/get-started.mdx#2025-04-09_snippet_13\n\nLANGUAGE: typescript\nCODE:\n```\nimport * as React from \"react\"\nimport { useForm } from \"react-hook-form\"\n\ntype FormData = {\n  firstName: string\n  lastName: string\n}\n\nexport default function App() {\n  const {\n    register,\n    setValue,\n    handleSubmit,\n    formState: { errors },\n  } = useForm<FormData>()\n  const onSubmit = handleSubmit((data) => console.log(data))\n  // firstName and lastName will have correct type\n\n  return (\n    <form onSubmit={onSubmit}>\n      <label>First Name</label>\n      <input {...register(\"firstName\")} />\n      <label>Last Name</label>\n      <input {...register(\"lastName\")} />\n      <button\n        type=\"button\"\n        onClick={() => {\n          setValue(\"lastName\", \"luo\") // ✅\n          setValue(\"firstName\", true) // ❌: true is not string\n          errors.bill // ❌: property bill does not exist\n        }}\n      >\n        SetValue\n      </button>\n    </form>\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Controller Component Props in TypeScript\nDESCRIPTION: This code snippet defines the props for the Controller component in React Hook Form. It includes various properties such as name, control, render, defaultValue, rules, shouldUnregister, and disabled.\nSOURCE: https://github.com/react-hook-form/documentation/blob/master/src/content/docs/usecontroller/controller.mdx#2025-04-09_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n{\n  name: FieldPath,\n  control?: Control,\n  render?: Function,\n  defaultValue?: unknown,\n  rules?: Object,\n  shouldUnregister?: boolean,\n  disabled?: boolean\n}\n```\n\n----------------------------------------\n\nTITLE: Using Controller with TextField in React Hook Form (TypeScript)\nDESCRIPTION: This example demonstrates how to use the control object with a Controller component to integrate a Material-UI TextField into a React Hook Form. It includes type definitions for form inputs and shows how to handle form submission.\nSOURCE: https://github.com/react-hook-form/documentation/blob/master/src/content/docs/useform/control.mdx#2025-04-09_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport React from \"react\"\nimport { useForm, Controller } from \"react-hook-form\"\nimport { TextField } from \"@material-ui/core\"\n\ntype FormInputs = {\n  firstName: string\n}\n\nfunction App() {\n  const { control, handleSubmit } = useForm<FormInputs>()\n  const onSubmit = (data: FormInputs) => console.log(data)\n\n  return (\n    <form onSubmit={handleSubmit(onSubmit)}>\n      <Controller\n        as={TextField}\n        name=\"firstName\"\n        control={control}\n        defaultValue=\"\"\n      />\n\n      <input type=\"submit\" />\n    </form>\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Default Values in useForm for React Hook Form\nDESCRIPTION: Demonstrates how to set default values for form fields using the useForm hook. It shows both synchronous and asynchronous methods of setting default values.\nSOURCE: https://github.com/react-hook-form/documentation/blob/master/src/content/docs/useform.mdx#2025-04-09_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nuseForm({\n  defaultValues: {\n    firstName: '',\n    lastName: ''\n  }\n})\n\n// set default value async\nuseForm({\n  defaultValues: async () => fetch('/api-endpoint');\n})\n```\n\n----------------------------------------\n\nTITLE: Implementing useWatch Hook in React Hook Form (TypeScript)\nDESCRIPTION: This example demonstrates how to use the useWatch hook in a React component with TypeScript. It shows how to watch a specific form field and re-render only the component using the hook when the watched value changes.\nSOURCE: https://github.com/react-hook-form/documentation/blob/master/src/content/docs/usewatch.mdx#2025-04-09_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport React from \"react\"\nimport { useForm, useWatch } from \"react-hook-form\"\n\ninterface FormInputs {\n  firstName: string\n  lastName: string\n}\n\nfunction FirstNameWatched({ control }: { control: Control<FormInputs> }) {\n  const firstName = useWatch({\n    control,\n    name: \"firstName\", // without supply name will watch the entire form, or ['firstName', 'lastName'] to watch both\n    defaultValue: \"default\", // default value before the render\n  })\n\n  return <p>Watch: {firstName}</p> // only re-render at the custom hook level, when firstName changes\n}\n\nfunction App() {\n  const { register, control, handleSubmit } = useForm<FormInputs>()\n\n  const onSubmit = (data: FormInputs) => {\n    console.log(data)\n  }\n\n  return (\n    <form onSubmit={handleSubmit(onSubmit)}>\n      <label>First Name:</label>\n      <input {...register(\"firstName\")} />\n      <input {...register(\"lastName\")} />\n      <input type=\"submit\" />\n\n      <FirstNameWatched control={control} />\n    </form>\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Using SubmitHandler Type with React Hook Form in TypeScript\nDESCRIPTION: This example shows how to use the SubmitHandler type to properly type form submission functions. It ensures type safety for form values during the submission process.\nSOURCE: https://github.com/react-hook-form/documentation/blob/master/src/content/ts.mdx#2025-04-09_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport React from \"react\"\nimport { useForm, SubmitHandler } from \"react-hook-form\"\n\ntype FormValues = {\n  firstName: string\n  lastName: string\n  email: string\n}\n\nexport default function App() {\n  const { register, handleSubmit } = useForm<FormValues>()\n  const onSubmit: SubmitHandler<FormValues> = (data) => console.log(data)\n\n  return (\n    <form onSubmit={handleSubmit(onSubmit)}>\n      <input {...register(\"firstName\")} />\n      <input {...register(\"lastName\")} />\n      <input type=\"email\" {...register(\"email\")} />\n\n      <input type=\"submit\" />\n    </form>\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Error Handling in React Hook Form\nDESCRIPTION: Demonstrates error handling and validation using React Hook Form's errors object. Shows multiple validation approaches and error message display patterns.\nSOURCE: https://github.com/react-hook-form/documentation/blob/master/src/content/get-started.mdx#2025-04-09_snippet_8\n\nLANGUAGE: javascript\nCODE:\n```\nimport { useForm } from \"react-hook-form\"\n\nexport default function App() {\n  const {\n    register,\n    formState: { errors },\n    handleSubmit,\n  } = useForm()\n  const onSubmit = (data) => console.log(data)\n\n  return (\n    <form onSubmit={handleSubmit(onSubmit)}>\n      <input\n        {...register(\"firstName\", { required: true })}\n        aria-invalid={errors.firstName ? \"true\" : \"false\"}\n      />\n      {errors.firstName?.type === \"required\" && (\n        <p role=\"alert\">First name is required</p>\n      )}\n\n      <input\n        {...register(\"mail\", { required: \"Email Address is required\" })}\n        aria-invalid={errors.mail ? \"true\" : \"false\"}\n      />\n      {errors.mail && <p role=\"alert\">{errors.mail.message}</p>}\n\n      <input type=\"submit\" />\n    </form>\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Complete Example of FormProvider and useFormContext Implementation\nDESCRIPTION: A full example showing how to use FormProvider to provide form context and useFormContext to access form methods in nested components. Includes form initialization, reset functionality, and proper component structure.\nSOURCE: https://github.com/react-hook-form/documentation/blob/master/src/content/docs/useformcontext.mdx#2025-04-09_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport React from \"react\"\nimport { useForm, FormProvider, useFormContext } from \"react-hook-form\"\n\nexport default function App() {\n  const methods = useForm()\n  const onSubmit = (data) => console.log(data)\n  const { register, reset } = methods\n\n  useEffect(() => {\n    reset({\n      name: \"data\",\n    })\n  }, [reset]) // ❌ never put `methods` as the deps\n\n  return (\n    <FormProvider {...methods}>\n      // pass all methods into the context\n      <form onSubmit={methods.handleSubmit(onSubmit)}>\n        <NestedInput />\n        <input {...register(\"name\")} />\n        <input type=\"submit\" />\n      </form>\n    </FormProvider>\n  )\n}\n\nfunction NestedInput() {\n  const { register } = useFormContext() // retrieve all hook methods\n  return <input {...register(\"test\")} />\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Accessible Form Inputs with React Hook Form\nDESCRIPTION: Demonstrates how to create accessible form inputs with error handling using React Hook Form's uncontrolled components approach. Implements aria-invalid attributes and alert roles for screen readers.\nSOURCE: https://github.com/react-hook-form/documentation/blob/master/src/content/faqs.mdx#2025-04-09_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport React from \"react\"\nimport { useForm } from \"react-hook-form\"\n\nexport default function App() {\n  const {\n    register,\n    handleSubmit,\n    formState: { errors },\n  } = useForm()\n  const onSubmit = (data) => console.log(data)\n\n  return (\n    <form onSubmit={handleSubmit(onSubmit)}>\n      <label htmlFor=\"firstName\">First name</label>\n      <input\n        id=\"firstName\"\n        aria-invalid={errors.firstName ? \"true\" : \"false\"}\n        {...register(\"firstName\", { required: true })}\n      />\n      {errors.firstName && <span role=\"alert\">This field is required</span>}\n\n      <input type=\"submit\" />\n    </form>\n  )\n```\n\n----------------------------------------\n\nTITLE: Error Handling with handleSubmit in React Hook Form\nDESCRIPTION: Example showing how to properly handle errors in the onSubmit callback using try/catch for async operations.\nSOURCE: https://github.com/react-hook-form/documentation/blob/master/src/content/docs/useform/handlesubmit.mdx#2025-04-09_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nconst onSubmit = async () => {\n  // async request which may result error\n  try {\n    // await fetch()\n  } catch (e) {\n    // handle your error\n  }\n}\n\nreturn <form onSubmit={handleSubmit(onSubmit)} />\n```\n\n----------------------------------------\n\nTITLE: Implementing FormProvider with React Hook Form\nDESCRIPTION: Demonstrates how to use FormProvider to share form context across components. Shows integration with useForm and useFormContext hooks, including form initialization, submission handling, and nested component access to form methods.\nSOURCE: https://github.com/react-hook-form/documentation/blob/master/src/content/docs/formprovider.mdx#2025-04-09_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport React from \"react\"\n\nimport { useForm, FormProvider, useFormContext } from \"react-hook-form\"\n\nexport default function App() {\n  const methods = useForm()\n\n  const onSubmit = (data) => console.log(data)\n  const { register, reset } = methods\n\n  useEffect(() => {\n    reset({\n      name: \"data\",\n    })\n  }, [reset]) // ❌ never put `methods` as the deps\n\n  return (\n    <FormProvider {...methods}>\n      // pass all methods into the context\n      <form onSubmit={methods.handleSubmit(onSubmit)}>\n        <NestedInput />\n        <input {...register(\"name\")} />\n        <input type=\"submit\" />\n      </form>\n    </FormProvider>\n  )\n}\n\nfunction NestedInput() {\n  const { register } = useFormContext() // retrieve all hook methods\n\n  return <input {...register(\"test\")} />\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Yup Schema Validation in React Hook Form\nDESCRIPTION: Example of setting up form validation using Yup schema, including field validation rules and error handling.\nSOURCE: https://github.com/react-hook-form/documentation/blob/master/src/content/get-started.mdx#2025-04-09_snippet_11\n\nLANGUAGE: javascript\nCODE:\n```\nimport { useForm } from \"react-hook-form\"\nimport { yupResolver } from \"@hookform/resolvers/yup\"\nimport * as yup from \"yup\"\n\nconst schema = yup\n  .object({\n    firstName: yup.string().required(),\n    age: yup.number().positive().integer().required(),\n  })\n  .required()\n\nexport default function App() {\n  const {\n    register,\n    handleSubmit,\n    formState: { errors },\n  } = useForm({\n    resolver: yupResolver(schema),\n  })\n  const onSubmit = (data) => console.log(data)\n\n  return (\n    <form onSubmit={handleSubmit(onSubmit)}>\n      <input {...register(\"firstName\")} />\n      <p>{errors.firstName?.message}</p>\n\n      <input {...register(\"age\")} />\n      <p>{errors.age?.message}</p>\n\n      <input type=\"submit\" />\n    </form>\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing a Custom Resolver with React Hook Form in TypeScript\nDESCRIPTION: This example demonstrates how to create a custom validation resolver in React Hook Form using TypeScript. It validates a form with firstName and lastName fields, displaying error messages for required fields.\nSOURCE: https://github.com/react-hook-form/documentation/blob/master/src/content/ts.mdx#2025-04-09_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport React from \"react\"\nimport { useForm, Resolver } from \"react-hook-form\"\n\ntype FormValues = {\n  firstName: string\n  lastName: string\n}\n\nconst resolver: Resolver<FormValues> = async (values) => {\n  return {\n    values: values.firstName ? values : {},\n    errors: !values.firstName\n      ? {\n          firstName: {\n            type: \"required\",\n            message: \"This is required.\",\n          },\n        }\n      : {},\n  }\n}\n\nexport default function App() {\n  const {\n    register,\n    handleSubmit,\n    formState: { errors },\n  } = useForm<FormValues>({ resolver })\n  const onSubmit = handleSubmit((data) => console.log(data))\n\n  return (\n    <form onSubmit={onSubmit}>\n      <input {...register(\"firstName\")} placeholder=\"Bill\" />\n      {errors?.firstName && <p>{errors.firstName.message}</p>}\n\n      <input {...register(\"lastName\")} placeholder=\"Luo\" />\n\n      <input type=\"submit\" />\n    </form>\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Redux Integration with React Hook Form\nDESCRIPTION: Example of integrating React Hook Form with Redux for global state management. Shows form setup with Redux connect and action dispatching.\nSOURCE: https://github.com/react-hook-form/documentation/blob/master/src/content/get-started.mdx#2025-04-09_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\nimport { useForm } from \"react-hook-form\"\nimport { connect } from \"react-redux\"\nimport updateAction from \"./actions\"\n\nexport default function App(props) {\n  const { register, handleSubmit, setValue } = useForm({\n    defaultValues: {\n      firstName: \"\",\n      lastName: \"\",\n    },\n  })\n  // Submit your data into Redux store\n  const onSubmit = (data) => props.updateAction(data)\n\n  return (\n    <form onSubmit={handleSubmit(onSubmit)}>\n      <input {...register(\"firstName\")} />\n      <input {...register(\"lastName\")} />\n      <input type=\"submit\" />\n    </form>\n  )\n}\n\n// Connect your component with redux\nconnect(\n  ({ firstName, lastName }) => ({ firstName, lastName }),\n  updateAction\n)(YourForm)\n```\n\n----------------------------------------\n\nTITLE: Implementing Form Components with UseFormReturn in TypeScript\nDESCRIPTION: This example shows how to create reusable form components using the UseFormReturn type. It demonstrates creating a Form component that accepts form methods and passes them to children via render props.\nSOURCE: https://github.com/react-hook-form/documentation/blob/master/src/content/ts.mdx#2025-04-09_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nimport type { FieldValues, UseFormReturn, SubmitHandler } from \"react-hook-form\"\nimport React from \"react\"\nimport { useForm } from \"react-hook-form\"\n\ntype InputProps = React.DetailedHTMLProps<\n  React.InputHTMLAttributes<HTMLInputElement>,\n  HTMLInputElement\n>\n\nconst Input = React.forwardRef<HTMLInputElement, InputProps>((props, ref) => (\n  <input ref={ref} {...props} />\n))\n\ntype Option = {\n  label: React.ReactNode\n  value: string | number | string[]\n}\n\ntype SelectProps = React.DetailedHTMLProps<\n  React.SelectHTMLAttributes<HTMLSelectElement>,\n  HTMLSelectElement\n> & { options: Option[] }\n\nconst Select = React.forwardRef<HTMLSelectElement, SelectProps>(\n  ({ options, ...props }, ref) => (\n    <select ref={ref} {...props}>\n      {options.map(({ label, value }) => (\n        <option value={value}>{label}</option>\n      ))}\n    </select>\n  )\n)\n\ntype FormProps<TFormValues extends FieldValues> = {\n  onSubmit: SubmitHandler<TFormValues>\n  children: (methods: UseFormReturn<TFormValues>) => React.ReactNode\n}\n\nconst Form = <TFormValues extends FieldValues>({\n  onSubmit,\n  children,\n}: FormProps<TFormValues>) => {\n  const methods = useForm<TFormValues>()\n  return (\n    <form onSubmit={methods.handleSubmit(onSubmit)}>{children(methods)}</form>\n  )\n}\n\ntype FormValues = {\n  firstName: string\n  lastName: string\n  sex: string\n}\n\nexport default function App() {\n  const onSubmit = (data: FormValues) => console.log(data)\n\n  return (\n    <Form<FormValues> onSubmit={onSubmit}>\n      {({ register }) => (\n        <>\n          <Input {...register(\"firstName\")} />\n          <Input {...register(\"lastName\")} />\n          <Select\n            {...register(\"sex\")}\n            options={[\n              { label: \"Female\", value: \"female\" },\n              { label: \"Male\", value: \"male\" },\n              { label: \"Other\", value: \"other\" },\n            ]}\n          />\n          <Input type=\"submit\" />\n        </>\n      )}\n    </Form>\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: React Native Form Implementation\nDESCRIPTION: Example showing Form component implementation in React Native with custom render prop and submission handling.\nSOURCE: https://github.com/react-hook-form/documentation/blob/master/src/content/docs/useform/form.mdx#2025-04-09_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nimport { useForm, Form } from \"react-hook-form\"\nfunction App() {\n  const {\n    control,\n    register,\n    formState: { isSubmitSuccessful, errors },\n  } = useForm()\n  return (\n    <Form\n      action=\"/api\"\n      control={control}\n      render={({ submit }) => {\n        ;<View>\n          {isSubmitSuccessful && <Text>Form submit successful.</Text>}\n\n          {errors?.root?.server && <Text>Form submit failed.</Text>}\n          <Button onPress={() => submit()} />\n        </View>\n      }}\n    />\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Basic setValue Usage in React Hook Form\nDESCRIPTION: Demonstrates how to use setValue to update a form field value with different options like validation and dirty state tracking.\nSOURCE: https://github.com/react-hook-form/documentation/blob/master/src/content/docs/useform/setvalue.mdx#2025-04-09_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport { useForm } from \"react-hook-form\"\n\nconst App = () => {\n  const { register, setValue } = useForm({\n    firstName: \"\",\n  })\n\n  return (\n    <form>\n      <input {...register(\"firstName\", { required: true })} />\n      <button onClick={() => setValue(\"firstName\", \"Bill\")}>setValue</button>\n      <button\n        onClick={() =>\n          setValue(\"firstName\", \"Luo\", {\n            shouldValidate: true,\n            shouldDirty: true,\n          })\n        }\n      >\n        setValue options\n      </button>\n    </form>\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Advanced Field Array Calculation with useWatch in React Hook Form\nDESCRIPTION: This example demonstrates an advanced use case of useWatch for calculating totals in a field array. It shows how to watch nested form values and perform calculations based on the watched values.\nSOURCE: https://github.com/react-hook-form/documentation/blob/master/src/content/docs/usewatch.mdx#2025-04-09_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nimport React from \"react\"\nimport { useWatch } from \"react-hook-form\"\n\nfunction totalCal(results) {\n  let totalValue = 0\n\n  for (const key in results) {\n    for (const value in results[key]) {\n      if (typeof results[key][value] === \"string\") {\n        const output = parseInt(results[key][value], 10)\n        totalValue = totalValue + (Number.isNaN(output) ? 0 : output)\n      } else {\n        totalValue = totalValue + totalCal(results[key][value], totalValue)\n      }\n    }\n  }\n\n  return totalValue\n}\n\nexport const Calc = ({ control, setValue }) => {\n  const results = useWatch({ control, name: \"test\" })\n  const output = totalCal(results)\n\n  // isolated re-render to calc the result with Field Array\n  console.log(results)\n\n  setValue(\"total\", output)\n\n  return <p>{output}</p>\n}\n```\n\n----------------------------------------\n\nTITLE: Using useFieldArray with Virtualized Lists in React Hook Form\nDESCRIPTION: Demonstrates integrating React Hook Form's useFieldArray with react-window for large lists. This approach uses Controller components to maintain form state across virtualized list elements.\nSOURCE: https://github.com/react-hook-form/documentation/blob/master/src/content/advanced-usage.mdx#2025-04-09_snippet_14\n\nLANGUAGE: javascript\nCODE:\n```\nimport { FixedSizeList } from \"react-window\"\nimport { Controller, useFieldArray, useForm } from \"react-hook-form\"\n\nconst items = Array.from(Array(1000).keys()).map((i) => ({\n  title: `List ${i}`,\n  quantity: Math.floor(Math.random() * 10),\n}))\n\nfunction App() {\n  const { control, getValues } = useForm({\n    defaultValues: {\n      test: items,\n    },\n  })\n  const { fields } = useFieldArray({ control, name: \"test\" })\n\n  return (\n    <FixedSizeList\n      width={400}\n      height={500}\n      itemSize={40}\n      itemCount={fields.length}\n      itemData={fields}\n      itemKey={(i) => fields[i].id}\n    >\n      {({ style, index, data }) => {\n        const defaultValue =\n          getValues()[\"test\"][index].quantity ?? data[index].quantity\n\n        return (\n          <form style={style}>\n            <Controller\n              render={({ field }) => <input {...field} />}\n              name={`test[${index}].quantity`}\n              defaultValue={defaultValue}\n              control={control}\n            />\n          </form>\n        )\n      }}\n    </FixedSizeList>\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing watch in a complete form with TypeScript\nDESCRIPTION: Complete example showing multiple uses of watch in a TypeScript React form, including watching specific fields, all fields, and using the callback approach.\nSOURCE: https://github.com/react-hook-form/documentation/blob/master/src/content/docs/useform/watch.mdx#2025-04-09_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nimport React from \"react\"\nimport { useForm } from \"react-hook-form\"\n\ninterface IFormInputs {\n  name: string\n  showAge: boolean\n  age: number\n}\n\nfunction App() {\n  const {\n    register,\n    watch,\n    formState: { errors },\n    handleSubmit,\n  } = useForm<IFormInputs>()\n  const watchShowAge = watch(\"showAge\", false) // you can supply default value as second argument\n  const watchAllFields = watch() // when pass nothing as argument, you are watching everything\n  const watchFields = watch([\"showAge\", \"age\"]) // you can also target specific fields by their names\n\n  // Callback version of watch.  It's your responsibility to unsubscribe when done.\n  React.useEffect(() => {\n    const subscription = watch((value, { name, type }) =>\n      console.log(value, name, type)\n    )\n    return () => subscription.unsubscribe()\n  }, [watch])\n\n  const onSubmit = (data: IFormInputs) => console.log(data)\n\n  return (\n    <>\n      <form onSubmit={handleSubmit(onSubmit)}>\n        <input {...register(\"name\", { required: true, maxLength: 50 })} />\n        <input type=\"checkbox\" {...register(\"showAge\")} />\n        {/* based on yes selection to display Age Input*/}\n        {watchShowAge && (\n          <input type=\"number\" {...register(\"age\", { min: 50 })} />\n        )}\n        <input type=\"submit\" />\n      </form>\n    </>\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Yup Validation with React Hook Form\nDESCRIPTION: This snippet demonstrates how to use Yup for schema validation with React Hook Form. It sets up a form with name and age fields, using yupResolver to integrate Yup schema validation.\nSOURCE: https://github.com/react-hook-form/documentation/blob/master/src/content/docs/useform.mdx#2025-04-09_snippet_8\n\nLANGUAGE: typescript\nCODE:\n```\nimport React from \"react\"\nimport { useForm } from \"react-hook-form\"\nimport { yupResolver } from \"@hookform/resolvers/yup\"\nimport * as yup from \"yup\"\n\ntype Inputs = {\n  name: string\n  age: string\n}\n\nconst schema = yup\n  .object()\n  .shape({\n    name: yup.string().required(),\n    age: yup.number().required(),\n  })\n  .required()\n\nconst App = () => {\n  const { register, handleSubmit } = useForm<Inputs>({\n    resolver: yupResolver(schema), // yup, joi and even your own.\n  })\n\n  return (\n    <form onSubmit={handleSubmit((d) => console.log(d))}>\n      <input {...register(\"name\")} />\n      <input type=\"number\" {...register(\"age\")} />\n      <input type=\"submit\" />\n    </form>\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Registering Inputs and Select with React Hook Form\nDESCRIPTION: This snippet demonstrates how to use the register function from React Hook Form to register various input types including text inputs, select, checkboxes, and radio buttons. It also shows how to apply basic validation rules.\nSOURCE: https://github.com/react-hook-form/documentation/blob/master/src/content/docs/useform/register.mdx#2025-04-09_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nimport { useForm } from \"react-hook-form\"\n\nexport default function App() {\n  const { register, handleSubmit } = useForm({\n    defaultValues: {\n      firstName: \"\",\n      lastName: \"\",\n      category: \"\",\n      checkbox: [],\n      radio: \"\",\n    },\n  })\n\n  return (\n    <form onSubmit={handleSubmit(console.log)}>\n      <input\n        {...register(\"firstName\", { required: true })}\n        placeholder=\"First name\"\n      />\n\n      <input\n        {...register(\"lastName\", { minLength: 2 })}\n        placeholder=\"Last name\"\n      />\n\n      <select {...register(\"category\")}>\n        <option value=\"\">Select...</option>\n        <option value=\"A\">Category A</option>\n        <option value=\"B\">Category B</option>\n      </select>\n\n      <input {...register(\"checkbox\")} type=\"checkbox\" value=\"A\" />\n      <input {...register(\"checkbox\")} type=\"checkbox\" value=\"B\" />\n      <input {...register(\"checkbox\")} type=\"checkbox\" value=\"C\" />\n\n      <input {...register(\"radio\")} type=\"radio\" value=\"A\" />\n      <input {...register(\"radio\")} type=\"radio\" value=\"B\" />\n      <input {...register(\"radio\")} type=\"radio\" value=\"C\" />\n\n      <input type=\"submit\" />\n    </form>\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Zod Validation with React Hook Form\nDESCRIPTION: This example shows how to use Zod for schema validation with React Hook Form. It creates a form with name and age fields, using zodResolver to integrate Zod schema validation.\nSOURCE: https://github.com/react-hook-form/documentation/blob/master/src/content/docs/useform.mdx#2025-04-09_snippet_9\n\nLANGUAGE: typescript\nCODE:\n```\nimport { useForm } from \"react-hook-form\"\nimport { zodResolver } from \"@hookform/resolvers/zod\"\nimport * as z from \"zod\"\n\nconst schema = z.object({\n  name: z.string(),\n  age: z.number(),\n})\n\ntype Schema = z.infer<typeof schema>\n\nconst App = () => {\n  const { register, handleSubmit } = useForm<Schema>({\n    resolver: zodResolver(schema),\n  })\n\n  const onSubmit = (data: Schema) => {\n    console.log(data)\n  }\n\n  return (\n    <form onSubmit={handleSubmit(onSubmit)}>\n      <input {...register(\"name\")} />\n      <input {...register(\"age\", { valueAsNumber: true })} type=\"number\" />\n      <input type=\"submit\" />\n    </form>\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Using setFocus in React Hook Form with TypeScript\nDESCRIPTION: This example demonstrates how to use the setFocus method in a React component with TypeScript. It focuses on the 'firstName' input field when the component mounts.\nSOURCE: https://github.com/react-hook-form/documentation/blob/master/src/content/docs/useform/setfocus.mdx#2025-04-09_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport * as React from \"react\"\nimport { useForm } from \"react-hook-form\"\n\ntype FormValues = {\n  firstName: string\n}\n\nexport default function App() {\n  const { register, handleSubmit, setFocus } = useForm<FormValues>()\n  const onSubmit = (data: FormValues) => console.log(data)\n  renderCount++\n\n  React.useEffect(() => {\n    setFocus(\"firstName\")\n  }, [setFocus])\n\n  return (\n    <form onSubmit={handleSubmit(onSubmit)}>\n      <input {...register(\"firstName\")} placeholder=\"First Name\" />\n      <input type=\"submit\" />\n    </form>\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Basic Usage of useFormContext with FormProvider\nDESCRIPTION: Demonstrates how to retrieve form methods using useFormContext. This snippet shows how to pass form methods to the FormProvider and access them in deeply nested components.\nSOURCE: https://github.com/react-hook-form/documentation/blob/master/src/content/docs/useformcontext.mdx#2025-04-09_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconst methods = useForm()\n\n<FormProvider {...methods} /> // all the useForm return props\n\nconst methods = useFormContext() // retrieve those props\n```\n\n----------------------------------------\n\nTITLE: Managing Dependent Fields with setValue in TypeScript\nDESCRIPTION: Shows how to implement dependent fields where the value of one field depends on others, using the setValue function with TypeScript typing.\nSOURCE: https://github.com/react-hook-form/documentation/blob/master/src/content/docs/useform/setvalue.mdx#2025-04-09_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport * as React from \"react\"\nimport { useForm } from \"react-hook-form\"\n\ntype FormValues = {\n  a: string\n  b: string\n  c: string\n}\n\nexport default function App() {\n  const { watch, register, handleSubmit, setValue, formState } =\n    useForm<FormValues>({\n      defaultValues: {\n        a: \"\",\n        b: \"\",\n        c: \"\",\n      },\n    })\n  const onSubmit = (data: FormValues) => console.log(data)\n  const [a, b] = watch([\"a\", \"b\"])\n\n  React.useEffect(() => {\n    if (formState.touchedFields.a && formState.touchedFields.b && a && b) {\n      setValue(\"c\", `${a} ${b}`)\n    }\n  }, [setValue, a, b, formState])\n\n  return (\n    <form onSubmit={handleSubmit(onSubmit)}>\n      <input {...register(\"a\")} placeholder=\"a\" />\n      <input {...register(\"b\")} placeholder=\"b\" />\n      <input {...register(\"c\")} placeholder=\"c\" />\n      <input type=\"submit\" />\n\n      <button\n        type=\"button\"\n        onClick={() => {\n          setValue(\"a\", \"what\", { shouldTouch: true })\n          setValue(\"b\", \"ever\", { shouldTouch: true })\n        }}\n      >\n        trigger value\n      </button>\n    </form>\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Controller with ReactDatePicker in JavaScript\nDESCRIPTION: JavaScript version of the Controller component implementation with ReactDatePicker. Shows basic form setup and event handling without type definitions.\nSOURCE: https://github.com/react-hook-form/documentation/blob/master/src/content/docs/usecontroller/controller.mdx#2025-04-09_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nimport React from \"react\"\nimport ReactDatePicker from \"react-datepicker\"\nimport { TextField } from \"@material-ui/core\"\nimport { useForm, Controller } from \"react-hook-form\"\n\nfunction App() {\n  const { handleSubmit, control } = useForm()\n\n  return (\n    <form onSubmit={handleSubmit((data) => console.log(data))}>\n      <Controller\n        control={control}\n        name=\"ReactDatepicker\"\n        render={({ field: { onChange, onBlur, value, ref } }) => (\n          <ReactDatePicker\n            onChange={onChange}\n            onBlur={onBlur}\n            selected={value}\n          />\n        )}\n      />\n\n      <input type=\"submit\" />\n    </form>\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Custom Input Transformation with React Hook Form Controller\nDESCRIPTION: This code snippet demonstrates the creation of a ControllerPlus component that extends the functionality of react-hook-form's Controller. It allows for custom input and output transformations, particularly useful for handling numeric inputs and conversions between string and number types.\nSOURCE: https://github.com/react-hook-form/documentation/blob/master/src/content/advanced-usage.mdx#2025-04-09_snippet_24\n\nLANGUAGE: javascript\nCODE:\n```\nimport { Controller } from \"react-hook-form\"\n\nconst ControllerPlus = ({ control, transform, name, defaultValue }) => (\n  <Controller\n    defaultValue={defaultValue}\n    control={control}\n    name={name}\n    render={({ field }) => (\n      <input\n        onChange={(e) => field.onChange(transform.output(e))}\n        value={transform.input(field.value)}\n      />\n    )}\n  />\n)\n\n// usage below:\n<ControllerPlus\n  transform={{\n    input: (value) => (isNaN(value) || value === 0 ? \"\" : value.toString()),\n    output: (e) => {\n      const output = parseInt(e.target.value, 10)\n      return isNaN(output) ? 0 : output\n    },\n  }}\n  control={control}\n  name=\"number\"\n  defaultValue=\"\"\n/>\n```\n\n----------------------------------------\n\nTITLE: Using Controller with Input in React Hook Form (JavaScript)\nDESCRIPTION: This example shows how to use the control object with a Controller component to integrate a basic input field into a React Hook Form using JavaScript. It demonstrates the render prop pattern for more flexible control over the rendered component.\nSOURCE: https://github.com/react-hook-form/documentation/blob/master/src/content/docs/useform/control.mdx#2025-04-09_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport { useForm, Controller } from \"react-hook-form\"\n\nfunction App() {\n  const { control } = useForm()\n\n  return (\n    <Controller\n      render={({ field }) => <input {...field} />}\n      name=\"firstName\"\n      control={control}\n      defaultValue=\"\"\n    />\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Controller in React Native\nDESCRIPTION: Example of using React Hook Form's Controller in a React Native environment with form validation and multiple input fields. Includes error handling and form submission.\nSOURCE: https://github.com/react-hook-form/documentation/blob/master/src/content/docs/usecontroller/controller.mdx#2025-04-09_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nimport { Text, View, TextInput, Button, Alert } from \"react-native\"\nimport { useForm, Controller } from \"react-hook-form\"\n\nexport default function App() {\n  const {\n    control,\n    handleSubmit,\n    formState: { errors },\n  } = useForm({\n    defaultValues: {\n      firstName: \"\",\n      lastName: \"\",\n    },\n  })\n  const onSubmit = (data) => console.log(data)\n\n  return (\n    <View>\n      <Controller\n        control={control}\n        rules={{\n          required: true,\n        }}\n        render={({ field: { onChange, onBlur, value } }) => (\n          <TextInput\n            placeholder=\"First name\"\n            onBlur={onBlur}\n            onChangeText={onChange}\n            value={value}\n          />\n        )}\n        name=\"firstName\"\n      />\n      {errors.firstName && <Text>This is required.</Text>}\n\n      <Controller\n        control={control}\n        rules={{\n          maxLength: 100,\n        }}\n        render={({ field: { onChange, onBlur, value } }) => (\n          <TextInput\n            placeholder=\"Last name\"\n            onBlur={onBlur}\n            onChangeText={onChange}\n            value={value}\n          />\n        )}\n        name=\"lastName\"\n      />\n\n      <Button title=\"Submit\" onPress={handleSubmit(onSubmit)} />\n    </View>\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Resetting Forms with Field Arrays in React Hook Form\nDESCRIPTION: This snippet demonstrates how to reset forms containing field arrays using React Hook Form. It uses useFieldArray to manage dynamic form fields and shows how to reset the entire form with new values through useEffect, including handling of array field removal.\nSOURCE: https://github.com/react-hook-form/documentation/blob/master/src/content/docs/useform/reset.mdx#2025-04-09_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\nimport React, { useEffect } from \"react\"\nimport { useForm, useFieldArray, Controller } from \"react-hook-form\"\n\nfunction App() {\n  const { register, control, handleSubmit, reset } = useForm({\n    defaultValues: {\n      loadState: \"unloaded\",\n      names: [{ firstName: \"Bill\", lastName: \"Luo\" }],\n    },\n  })\n  const { fields, remove } = useFieldArray({\n    control,\n    name: \"names\",\n  })\n\n  useEffect(() => {\n    reset({\n      names: [\n        {\n          firstName: \"Bob\",\n          lastName: \"Actually\",\n        },\n        {\n          firstName: \"Jane\",\n          lastName: \"Actually\",\n        },\n      ],\n    })\n  }, [reset])\n\n  const onSubmit = (data) => console.log(\"data\", data)\n\n  return (\n    <form onSubmit={handleSubmit(onSubmit)}>\n      <ul>\n        {fields.map((item, index) => (\n          <li key={item.id}>\n            <input {...register(`names.${index}.firstName`)} />\n\n            <Controller\n              render={({ field }) => <input {...field} />}\n              name={`names.${index}.lastName`}\n              control={control}\n            />\n            <button type=\"button\" onClick={() => remove(index)}>\n              Delete\n            </button>\n          </li>\n        ))}\n      </ul>\n\n      <input type=\"submit\" />\n    </form>\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Using Controller Component for Controlled Components in React Hook Form\nDESCRIPTION: Demonstrates using React Hook Form's Controller component to integrate with UI libraries that rely on controlled components like Material-UI. Shows how to combine controlled and uncontrolled components with validation.\nSOURCE: https://github.com/react-hook-form/documentation/blob/master/src/content/advanced-usage.mdx#2025-04-09_snippet_10\n\nLANGUAGE: javascript\nCODE:\n```\nimport { Input, Select, MenuItem } from \"@material-ui/core\"\nimport { useForm, Controller } from \"react-hook-form\"\n\nconst defaultValues = {\n  select: \"\",\n  input: \"\",\n}\n\nfunction App() {\n  const { handleSubmit, reset, control, register } = useForm({\n    defaultValues,\n  })\n  const onSubmit = (data) => console.log(data)\n\n  return (\n    <form onSubmit={handleSubmit(onSubmit)}>\n      <Controller\n        render={({ field }) => (\n          <Select {...field}>\n            <MenuItem value={10}>Ten</MenuItem>\n            <MenuItem value={20}>Twenty</MenuItem>\n          </Select>\n        )}\n        control={control}\n        name=\"select\"\n        defaultValue={10}\n      />\n\n      <Input {...register(\"input\")} />\n\n      <button type=\"button\" onClick={() => reset({ defaultValues })}>\n        Reset\n      </button>\n      <input type=\"submit\" />\n    </form>\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Smart Form Component Implementation\nDESCRIPTION: A demonstration of a composable Form component pattern that simplifies form creation by automatically handling form submission and registration of child components.\nSOURCE: https://github.com/react-hook-form/documentation/blob/master/src/content/advanced-usage.mdx#2025-04-09_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nimport { Form, Input, Select } from \"./Components\"\n\nexport default function App() {\n  const onSubmit = (data) => console.log(data)\n\n  return (\n    <Form onSubmit={onSubmit}>\n      <Input name=\"firstName\" />\n      <Input name=\"lastName\" />\n      <Select name=\"gender\" options={[\"female\", \"male\", \"other\"]} />\n\n      <Input type=\"submit\" value=\"Submit\" />\n    </Form>\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Basic Field Validation Example with Reset Functionality in React Hook Form\nDESCRIPTION: This example demonstrates how to reset a form field state using the resetField function in React Hook Form. It shows how form state values like isDirty and isValid are updated when the field is reset.\nSOURCE: https://github.com/react-hook-form/documentation/blob/master/src/content/docs/useform/resetfield.mdx#2025-04-09_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport * as React from \"react\"\nimport { useForm } from \"react-hook-form\"\n\nexport default function App() {\n  const {\n    register,\n    resetField,\n    formState: { isDirty, isValid },\n  } = useForm({\n    mode: \"onChange\",\n    defaultValues: {\n      firstName: \"\",\n    },\n  })\n  const handleClick = () => resetField(\"firstName\")\n\n  return (\n    <form>\n      <input {...register(\"firstName\", { required: true })} />\n\n      <p>{isDirty && \"dirty\"}</p>\n      <p>{isValid && \"valid\"}</p>\n\n      <button type=\"button\" onClick={handleClick}>\n        Reset\n      </button>\n    </form>\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: UseFormProps Type Definition for React Hook Form Configuration\nDESCRIPTION: This type definition specifies all available configuration options for the useForm hook. It includes options for validation modes, default values, resolver configuration, and other form behaviors.\nSOURCE: https://github.com/react-hook-form/documentation/blob/master/src/content/ts.mdx#2025-04-09_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\nexport type UseFormProps<\n  TFieldValues extends FieldValues = FieldValues,\n  TContext extends object = object,\n  TTransformedValues extends FieldValues | undefined = undefined,\n> = Partial<{\n  mode: Mode\n  disabled: boolean\n  reValidateMode: Exclude<Mode, \"onTouched\" | \"all\">\n  defaultValues: DefaultValues<TFieldValues> | AsyncDefaultValues<TFieldValues>\n  values: TFieldValues\n  errors: FieldErrors<TFieldValues>\n  resetOptions: Parameters<UseFormReset<TFieldValues>>[1]\n  resolver: Resolver<TFieldValues, TContext>\n  context: TContext\n  shouldFocusError: boolean\n  shouldUnregister: boolean\n  shouldUseNativeValidation: boolean\n  progressive: boolean\n  criteriaMode: CriteriaMode\n  delayError: number\n}>\n```\n\n----------------------------------------\n\nTITLE: Using watch with useFieldArray in TypeScript\nDESCRIPTION: Example demonstrating how to use watch in conjunction with useFieldArray for dynamic form arrays in TypeScript.\nSOURCE: https://github.com/react-hook-form/documentation/blob/master/src/content/docs/useform/watch.mdx#2025-04-09_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\nimport * as React from \"react\"\nimport { useForm, useFieldArray } from \"react-hook-form\"\n\ntype FormValues = {\n  test: {\n    firstName: string\n    lastName: string\n  }[]\n}\n\nfunction App() {\n  const { register, control, handleSubmit, watch } = useForm<FormValues>()\n  const { fields, remove, append } = useFieldArray({\n    name: \"test\",\n    control,\n  })\n  const onSubmit = (data: FormValues) => console.log(data)\n\n  console.log(watch(\"test\"))\n\n  return (\n    <form onSubmit={handleSubmit(onSubmit)}>\n      {fields.map((field, index) => {\n        return (\n          <div key={field.id}>\n            <input\n              defaultValue={field.firstName}\n              {...register(`test.${index}.firstName`)}\n            />\n            <input\n              defaultValue={field.lastName}\n              {...register(`test.${index}.lastName`)}\n            />\n            <button type=\"button\" onClick={() => remove(index)}>\n              Remove\n            </button>\n          </div>\n        )\n      })}\n      <button\n        type=\"button\"\n        onClick={() =>\n          append({\n            firstName: \"bill\" + renderCount,\n            lastName: \"luo\" + renderCount,\n          })\n        }\n      >\n        Append\n      </button>\n    </form>\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Advanced Field Reset with Options in React Hook Form\nDESCRIPTION: This example showcases the resetField function with various options for maintaining specific field states during reset. It demonstrates keeping errors, touched fields, and dirty states, as well as updating the default value.\nSOURCE: https://github.com/react-hook-form/documentation/blob/master/src/content/docs/useform/resetfield.mdx#2025-04-09_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport * as React from \"react\"\nimport { useForm } from \"react-hook-form\"\n\nexport default function App() {\n  const {\n    register,\n    resetField,\n    formState: { isDirty, isValid, errors, touchedFields, dirtyFields },\n  } = useForm({\n    mode: \"onChange\",\n    defaultValues: {\n      firstName: \"\",\n    },\n  })\n\n  return (\n    <form>\n      <input {...register(\"firstName\", { required: true })} />\n\n      <p>isDirty: {isDirty && \"dirty\"}</p>\n      <p>touchedFields: {touchedFields.firstName && \"touched field\"}</p>\n      <p>dirtyFields:{dirtyFields.firstName && \"dirty field\"}</p>\n      <p>isValid: {isValid && \"valid\"}</p>\n      <p>error: {errors.firstName && \"error\"}</p>\n\n      <hr />\n\n      <button\n        type=\"button\"\n        onClick={() => resetField(\"firstName\", { keepError: true })}\n      >\n        Reset keep error\n      </button>\n      <button\n        type=\"button\"\n        onClick={() => resetField(\"firstName\", { keepTouched: true })}\n      >\n        Reset keep touched fields\n      </button>\n      <button\n        type=\"button\"\n        onClick={() => resetField(\"firstName\", { keepDirty: true })}\n      >\n        Reset keep dirty fields\n      </button>\n      <button\n        type=\"button\"\n        onClick={() => resetField(\"firstName\", { defaultValue: \"New\" })}\n      >\n        update defaultValue\n      </button>\n    </form>\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Accessibility-Enhanced Form with ARIA Attributes\nDESCRIPTION: An improved version of the form with ARIA attributes for better accessibility. Uses aria-invalid to indicate fields with errors and role=\"alert\" to announce error messages to screen readers.\nSOURCE: https://github.com/react-hook-form/documentation/blob/master/src/content/advanced-usage.mdx#2025-04-09_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport { useForm } from \"react-hook-form\"\n\nexport default function App() {\n  const {\n    register,\n    handleSubmit,\n    formState: { errors },\n  } = useForm()\n  const onSubmit = (data) => console.log(data)\n\n  return (\n    <form onSubmit={handleSubmit(onSubmit)}>\n      <label htmlFor=\"name\">Name</label>\n\n      {/* use aria-invalid to indicate field contain error */}\n      <input\n        id=\"name\"\n        aria-invalid={errors.name ? \"true\" : \"false\"}\n        {...register(\"name\", { required: true, maxLength: 30 })}\n      />\n\n      {/* use role=\"alert\" to announce the error message */}\n      {errors.name && errors.name.type === \"required\" && (\n        <span role=\"alert\">This is required</span>\n      )}\n      {errors.name && errors.name.type === \"maxLength\" && (\n        <span role=\"alert\">Max length exceeded</span>\n      )}\n\n      <input type=\"submit\" />\n    </form>\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Sharing Refs with React Hook Form\nDESCRIPTION: Demonstrates how to share ref usage between React Hook Form and other functionality using useImperativeHandle hook. Includes both TypeScript and JavaScript implementations.\nSOURCE: https://github.com/react-hook-form/documentation/blob/master/src/content/faqs.mdx#2025-04-09_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport { useRef, useImperativeHandle } from \"react\"\nimport { useForm } from \"react-hook-form\"\n\ntype Inputs = {\n  firstName: string\n  lastName: string\n}\n\nexport default function App() {\n  const { register, handleSubmit } = useForm<Inputs>()\n  const firstNameRef = useRef<HTMLInputElement>(null)\n  const onSubmit = (data: Inputs) => console.log(data)\n  const { ref, ...rest } = register(\"firstName\")\n  const onClick = () => {\n    firstNameRef.current!.value = \"\"\n  }\n\n  useImperativeHandle(ref, () => firstNameRef.current)\n\n  return (\n    <form onSubmit={handleSubmit(onSubmit)}>\n      <input {...rest} ref={firstNameRef} />\n      <button type=\"button\" onClick={onClick}>\n        clear\n      </button>\n      <button>Submit</button>\n    </form>\n  )\n```\n\n----------------------------------------\n\nTITLE: Implementing Controller with ReactDatePicker in TypeScript\nDESCRIPTION: Example showing how to use React Hook Form's Controller component with ReactDatePicker in TypeScript. Demonstrates form setup with type safety and proper event handling.\nSOURCE: https://github.com/react-hook-form/documentation/blob/master/src/content/docs/usecontroller/controller.mdx#2025-04-09_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport ReactDatePicker from \"react-datepicker\"\nimport { TextField } from \"@material-ui/core\"\nimport { useForm, Controller } from \"react-hook-form\"\n\ntype FormValues = {\n  ReactDatepicker: string\n}\n\nfunction App() {\n  const { handleSubmit, control } = useForm<FormValues>()\n\n  return (\n    <form onSubmit={handleSubmit((data) => console.log(data))}>\n      <Controller\n        control={control}\n        name=\"ReactDatepicker\"\n        render={({ field: { onChange, onBlur, value, ref } }) => (\n          <ReactDatePicker\n            onChange={onChange} // send value to hook form\n            onBlur={onBlur} // notify when input is touched/blur\n            selected={value}\n          />\n        )}\n      />\n\n      <input type=\"submit\" />\n    </form>\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Accessing single field value with watch in React Hook Form\nDESCRIPTION: Example of using the watch method to monitor a single form field value.\nSOURCE: https://github.com/react-hook-form/documentation/blob/master/src/content/docs/useform/watch.mdx#2025-04-09_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nconst name = watch(\"name\")\n```\n\n----------------------------------------\n\nTITLE: Watching multiple specific fields in React Hook Form\nDESCRIPTION: Example of using watch to monitor an array of specific field values.\nSOURCE: https://github.com/react-hook-form/documentation/blob/master/src/content/docs/useform/watch.mdx#2025-04-09_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nconst [name, name1] = watch([\"name\", \"name1\"])\n```\n\n----------------------------------------\n\nTITLE: Setting Form Values and Tracking Dirty State in React Hook Form\nDESCRIPTION: Example showing how isDirty state changes when setting form values compared to defaultValues. Demonstrates the importance of providing defaultValues for proper dirty state tracking.\nSOURCE: https://github.com/react-hook-form/documentation/blob/master/src/content/docs/useform/formstate.mdx#2025-04-09_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nconst {\n  formState: { isDirty, dirtyFields },\n  setValue\n} = useForm({ defaultValues: { test: \"\" } })\n\n// isDirty: true ✅\nsetValue('test', 'change')\n\n// isDirty: false because there getValues() === defaultValues ❌\nsetValue('test', '')\n```\n\n----------------------------------------\n\nTITLE: Implementing useFormState in a React Component\nDESCRIPTION: This example shows how to use the useFormState hook in a React component. It demonstrates form initialization, state management, and rendering based on form state.\nSOURCE: https://github.com/react-hook-form/documentation/blob/master/src/content/docs/useformstate.mdx#2025-04-09_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nimport { useForm, useFormState } from \"react-hook-form\"\n\nfunction Child({ control }) {\n  const { dirtyFields } = useFormState({ control })\n\n  return dirtyFields.firstName ? <p>Field is dirty.</p> : null\n}\n\nexport default function App() {\n  const { register, handleSubmit, control } = useForm({\n    defaultValues: {\n      firstName: \"firstName\",\n    },\n  })\n  const onSubmit = (data) => console.log(data)\n\n  return (\n    <form onSubmit={handleSubmit(onSubmit)}>\n      <input {...register(\"firstName\")} placeholder=\"First Name\" />\n      <Child control={control} />\n\n      <input type=\"submit\" />\n    </form>\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Initializing Form Values in React Hook Form\nDESCRIPTION: Shows different methods for initializing form values using defaultValues in React Hook Form, including both synchronous and asynchronous initialization approaches.\nSOURCE: https://github.com/react-hook-form/documentation/blob/master/src/content/faqs.mdx#2025-04-09_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nfunction App() {\n  const { register, handleSubmit } = useForm({\n    defaultValues: {\n      firstName: \"bill\",\n      lastName: \"luo\",\n    },\n  })\n\n  return (\n    <form onSubmit={handleSubmit((data) => console.log(data))}>\n      <input {...register(\"firstName\")} />\n      <input {...register(\"lastName\")} />\n      <button type=\"submit\">Submit</button>\n    </form>\n  )\n```\n\nLANGUAGE: javascript\nCODE:\n```\nfunction App() {\n  const { register, handleSubmit } = useForm({\n    defaultValues: async () => {\n      const response = await fetch(\"/api\")\n      return await response.json() // return { firstName: '', lastName: '' }\n    },\n  })\n```\n\nLANGUAGE: javascript\nCODE:\n```\nfunction App() {\n  const { data } = useQuery() // data returns { firstName: '', lastName: '' }\n  const { register, handleSubmit } = useForm({\n    values: data,\n    resetOptions: {\n      keepDirtyValues: true, // keep dirty fields unchanged, but update defaultValues\n    },\n  })\n```\n\n----------------------------------------\n\nTITLE: Reset Pattern Examples in React Hook Form\nDESCRIPTION: Examples of different reset patterns: resetting to default values, updating with new values, and resetting form state while keeping values.\nSOURCE: https://github.com/react-hook-form/documentation/blob/master/src/content/docs/useform/reset.mdx#2025-04-09_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nreset() // update form back to default values\n\nreset({ test: \"test\" }) // update your defaultValues && form values\n\nreset(undefined, { keepDirtyValues: true }) // reset other form state but keep defaultValues and form values\n```\n\n----------------------------------------\n\nTITLE: Using useWatch Hook in React Hook Form (JavaScript)\nDESCRIPTION: This example shows how to implement the useWatch hook in a React component using JavaScript. It demonstrates watching a form field and updating a child component when the watched value changes.\nSOURCE: https://github.com/react-hook-form/documentation/blob/master/src/content/docs/usewatch.mdx#2025-04-09_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport React from \"react\"\nimport { useForm, useWatch } from \"react-hook-form\"\n\nfunction Child({ control }) {\n  const firstName = useWatch({\n    control,\n    name: \"firstName\",\n  })\n\n  return <p>Watch: {firstName}</p>\n}\n\nfunction App() {\n  const { register, control } = useForm({\n    defaultValues: {\n      firstName: \"test\",\n    },\n  })\n\n  return (\n    <form>\n      <input {...register(\"firstName\")} />\n      <Child control={control} />\n    </form>\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: UseFormReturn Type Definition in React Hook Form\nDESCRIPTION: This demonstrates the type definition for UseFormReturn which contains all methods and properties returned by the useForm hook. It's used to properly type the form methods object.\nSOURCE: https://github.com/react-hook-form/documentation/blob/master/src/content/ts.mdx#2025-04-09_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nexport type UseFormReturn<\n  TFieldValues extends FieldValues = FieldValues,\n  TContext = any,\n  TTransformedValues extends FieldValues | undefined = undefined,\n> = {\n  watch: UseFormWatch<TFieldValues>\n  getValues: UseFormGetValues<TFieldValues>\n  getFieldState: UseFormGetFieldState<TFieldValues>\n  setError: UseFormSetError<TFieldValues>\n  clearErrors: UseFormClearErrors<TFieldValues>\n  setValue: UseFormSetValue<TFieldValues>\n  trigger: UseFormTrigger<TFieldValues>\n  formState: FormState<TFieldValues>\n  resetField: UseFormResetField<TFieldValues>\n  reset: UseFormReset<TFieldValues>\n  handleSubmit: UseFormHandleSubmit<TFieldValues>\n  unregister: UseFormUnregister<TFieldValues>\n  control: Control<TFieldValues, TContext>\n  register: UseFormRegister<TFieldValues>\n  setFocus: UseFormSetFocus<TFieldValues>\n}\n```\n\n----------------------------------------\n\nTITLE: Handling Form Reset After Submission with React Hook Form\nDESCRIPTION: This snippet demonstrates how to reset a form after successful submission using React Hook Form. It uses the isSubmitSuccessful flag from formState and React's useEffect hook to reset the form with specific values after successful submission.\nSOURCE: https://github.com/react-hook-form/documentation/blob/master/src/content/docs/useform/reset.mdx#2025-04-09_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\nimport { useForm, useFieldArray, Controller } from \"react-hook-form\"\n\nfunction App() {\n  const {\n    register,\n    handleSubmit,\n    reset,\n    formState,\n    formState: { isSubmitSuccessful },\n  } = useForm({ defaultValues: { something: \"anything\" } })\n\n  const onSubmit = (data) => {\n    // It's recommended to reset in useEffect as execution order matters\n    // reset({ ...data })\n  }\n\n  React.useEffect(() => {\n    if (formState.isSubmitSuccessful) {\n      reset({ something: \"\" })\n    }\n  }, [formState, submittedData, reset])\n\n  return (\n    <form onSubmit={handleSubmit(onSubmit)}>\n      <input {...register(\"something\")} />\n      <input type=\"submit\" />\n    </form>\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Form Component Basic Usage\nDESCRIPTION: Basic example showing the Form component props and configuration options.\nSOURCE: https://github.com/react-hook-form/documentation/blob/master/src/content/docs/useform/form.mdx#2025-04-09_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n<Form\n  action=\"/api\"\n  method=\"post\" // default to post\n  onSubmit={() => {}} // function to be called before the request\n  onSuccess={() => {}} // valid response\n  onError={() => {}} // error response\n  validateStatus={(status) => status >= 200} // validate status code\n/>\n```\n\n----------------------------------------\n\nTITLE: Setting Server Error in React Hook Form\nDESCRIPTION: Example of setting a server error using the root.serverError pattern in React Hook Form. This approach shows how to handle API response errors and display them in the form based on status code.\nSOURCE: https://github.com/react-hook-form/documentation/blob/master/src/content/docs/useform/seterror.mdx#2025-04-09_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\nimport * as React from \"react\";\nimport { useForm } from \"react-hook-form\";\n\nconst App = () => {\n  const { register, handleSubmit, setError, formState: { errors } } = useForm({\n    criteriaMode: 'all',\n  });\n  const onSubmit = async () => {\n    const response = await fetch(...)\n    if (response.statusCode > 200) {\n        setError('root.serverError', {\n          type: response.statusCode,\n        })\n    }\n  }\n\n  return (\n    <form onSubmit={handleSubmit(onSubmit)}>\n      <label>Last Name</label>\n      <input {...register(\"lastName\")} />\n\n      {errors.root.serverError.type === 400 && <p>server response message</p>}\n\n      <button>submit</button>\n    </form>\n  );\n};\n```\n\n----------------------------------------\n\nTITLE: Basic getFieldState Usage Example in React Hook Form\nDESCRIPTION: Complete example showing how to use getFieldState with React Hook Form. It demonstrates retrieving field state information like isDirty and isTouched for a firstName input field, with both in-render and event-based state access.\nSOURCE: https://github.com/react-hook-form/documentation/blob/master/src/content/docs/useform/getfieldstate.mdx#2025-04-09_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport * as React from \"react\"\n\nimport { useForm } from \"react-hook-form\"\n\nexport default function App() {\n  const {\n    register,\n    getFieldState,\n    formState: { isDirty, isValid },\n  } = useForm({\n    mode: \"onChange\",\n\n    defaultValues: {\n      firstName: \"\",\n    },\n  })\n\n  // you can invoke before render or within the render function\n\n  const fieldState = getFieldState(\"firstName\")\n\n  return (\n    <form>\n      <input {...register(\"firstName\", { required: true })} />{\" \"}\n      <p>{getFieldState(\"firstName\").isDirty && \"dirty\"}</p>{\" \"}\n      <p>{getFieldState(\"firstName\").isTouched && \"touched\"}</p>\n      <button\n        type=\"button\"\n        onClick={() => console.log(getFieldState(\"firstName\"))}\n      >\n        field state\n      </button>\n    </form>\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Multiple Error Messages with ErrorMessage in TypeScript\nDESCRIPTION: Example of using the ErrorMessage component to display multiple error messages in a React Hook Form with TypeScript. It demonstrates handling multiple validation rules and rendering all error messages.\nSOURCE: https://github.com/react-hook-form/documentation/blob/master/src/content/docs/useformstate/errormessage.mdx#2025-04-09_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nimport React from \"react\"\nimport { useForm } from \"react-hook-form\"\nimport { ErrorMessage } from \"@hookform/error-message\"\n\ninterface FormInputs {\n  multipleErrorInput: string\n}\n\nexport default function App() {\n  const {\n    register,\n    formState: { errors },\n    handleSubmit,\n  } = useForm<FormInputs>({\n    criteriaMode: \"all\",\n  })\n  const onSubmit = (data: FormInputs) => console.log(data)\n\n  return (\n    <form onSubmit={handleSubmit(onSubmit)}>\n      <input\n        {...register(\"multipleErrorInput\", {\n          required: \"This is required.\",\n          pattern: {\n            value: /d+/,\n            message: \"This input is number only.\",\n          },\n          maxLength: {\n            value: 10,\n            message: \"This input exceed maxLength.\",\n          },\n        })}\n      />\n      <ErrorMessage\n        errors={errors}\n        name=\"multipleErrorInput\"\n        render={({ messages }) =>\n          messages &&\n          Object.entries(messages).map(([type, message]) => (\n            <p key={type}>{message}</p>\n          ))\n        }\n      />\n\n      <input type=\"submit\" />\n    </form>\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Custom Validation with React Hook Form\nDESCRIPTION: This example demonstrates how to create a custom resolver for schema validation with React Hook Form. It uses Joi for validation but implements a custom resolver function to integrate it with React Hook Form.\nSOURCE: https://github.com/react-hook-form/documentation/blob/master/src/content/docs/useform.mdx#2025-04-09_snippet_13\n\nLANGUAGE: typescript\nCODE:\n```\nimport * as React from \"react\"\nimport { useForm } from \"react-hook-form\"\nimport * as Joi from \"joi\"\n\ninterface IFormInputs {\n  username: string\n}\n\nconst validationSchema = Joi.object({\n  username: Joi.string().alphanum().min(3).max(30).required(),\n})\n\nconst App = () => {\n  const {\n    register,\n    handleSubmit,\n    formState: { errors },\n  } = useForm<IFormInputs>({\n    resolver: async (data) => {\n      const { error, value: values } = validationSchema.validate(data, {\n        abortEarly: false,\n      })\n\n      return {\n        values: error ? {} : values,\n        errors: error\n          ? error.details.reduce((previous, currentError) => {\n              return {\n                ...previous,\n                [currentError.path[0]]: currentError,\n              }\n            }, {})\n          : {},\n      }\n    },\n  })\n\n  const onSubmit = (data: IFormInputs) => console.log(data)\n\n  return (\n    <div className=\"App\">\n      <h1>resolver</h1>\n\n      <form onSubmit={handleSubmit(onSubmit)}>\n        <label>Username</label>\n        <input {...register(\"username\")} />\n        {errors.username && <p>errors.username.message</p>}\n        <input type=\"submit\" />\n      </form>\n    </div>\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Subscribing to Form State with useForm and getFieldState\nDESCRIPTION: Example showing how to subscribe to form state updates with useForm to use getFieldState without requiring a second argument. This establishes the subscription to the form state.\nSOURCE: https://github.com/react-hook-form/documentation/blob/master/src/content/docs/useform/getfieldstate.mdx#2025-04-09_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nconst {\n  register,\n  formState: { isDirty },\n} = useForm()\nregister(\"test\")\ngetFieldState(\"test\") // ✅\n```\n\n----------------------------------------\n\nTITLE: Type Definitions for Controller Properties\nDESCRIPTION: Type definitions for various return properties from Controller component including field, fieldState, and formState objects. Includes function signatures, primitive types, and object types.\nSOURCE: https://github.com/react-hook-form/documentation/blob/master/src/content/docs/usecontroller/controller.mdx#2025-04-09_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\n(value: any) => void // onChange function type\n() => void // onBlur function type\nboolean // disabled, invalid, isTouched, isDirty types\nstring // name type\nReact.ref // ref type\nobject // error, dirtyFields, touchedFields types\nunknown // value type\n```\n\n----------------------------------------\n\nTITLE: Creating a Custom Validation Resolver Hook with Yup in React Hook Form\nDESCRIPTION: Demonstrates how to create a custom validation hook that works with Yup schemas and integrates with React Hook Form's resolver pattern. The example includes error formatting and schema validation implementation.\nSOURCE: https://github.com/react-hook-form/documentation/blob/master/src/content/advanced-usage.mdx#2025-04-09_snippet_12\n\nLANGUAGE: javascript\nCODE:\n```\nimport { useCallback } from \"react\"\nimport { useForm } from \"react-hook-form\"\nimport * as yup from \"yup\"\n\nconst useYupValidationResolver = (validationSchema) =>\n  useCallback(\n    async (data) => {\n      try {\n        const values = await validationSchema.validate(data, {\n          abortEarly: false,\n        })\n\n        return {\n          values,\n          errors: {},\n        }\n      } catch (errors) {\n        return {\n          values: {},\n          errors: errors.inner.reduce(\n            (allErrors, currentError) => ({\n              ...allErrors,\n              [currentError.path]: {\n                type: currentError.type ?? \"validation\",\n                message: currentError.message,\n              },\n            }),\n            {}\n          ),\n        }\n      }\n    },\n    [validationSchema]\n  )\n\nconst validationSchema = yup.object({\n  firstName: yup.string().required(\"Required\"),\n  lastName: yup.string().required(\"Required\"),\n})\n\nexport default function App() {\n  const resolver = useYupValidationResolver(validationSchema)\n  const { handleSubmit, register } = useForm({ resolver })\n\n  return (\n    <form onSubmit={handleSubmit((data) => console.log(data))}>\n      <input {...register(\"firstName\")} />\n      <input {...register(\"lastName\")} />\n      <input type=\"submit\" />\n    </form>\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Using getFieldState with useFormState\nDESCRIPTION: Example showing how to use getFieldState with the useFormState hook, which establishes the form state subscription making the second argument unnecessary.\nSOURCE: https://github.com/react-hook-form/documentation/blob/master/src/content/docs/useform/getfieldstate.mdx#2025-04-09_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nconst { isDirty } = useFormState()\nregister(\"test\")\ngetFieldState(\"test\") // ✅\n```\n\n----------------------------------------\n\nTITLE: Implementing Ternary Operator with Default Values in React Hook Form\nDESCRIPTION: Demonstrates how to properly handle default values when toggling between different input fields using ternary operators. Uses unique key props to ensure proper input recognition by React.\nSOURCE: https://github.com/react-hook-form/documentation/blob/master/src/content/faqs.mdx#2025-04-09_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nimport React from \"react\"\nimport { useForm } from \"react-hook-form\"\n\nexport default function App() {\n  const { register } = useForm()\n\n  return (\n    <div>\n      {watchChecked ? (\n        <input {...register(\"input3\")} key=\"key1\" defaultValue=\"1\" />\n      ) : (\n        <input {...register(\"input4\")} key=\"key2\" defaultValue=\"2\" />\n      )}\n    </div>\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Field Array Operations with setValue\nDESCRIPTION: Demonstrates various ways to update field arrays with setValue, including updating an entire array, unregistered inputs, and working with nested fields.\nSOURCE: https://github.com/react-hook-form/documentation/blob/master/src/content/docs/useform/setvalue.mdx#2025-04-09_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\n// you can update an entire Field Array,\nsetValue(\"fieldArray\", [{ test: \"1\" }, { test: \"2\" }]) // ✅\n\n// you can setValue to a unregistered input\nsetValue(\"notRegisteredInput\", \"value\") // ✅ prefer to be registered\n\n// the following will register a single input (without register invoked)\nsetValue(\"resultSingleNestedField\", { test: \"1\", test2: \"2\" }) // 🤔\n\n// with registered inputs, the setValue will update both inputs correctly.\nregister(\"notRegisteredInput.test\", \"1\")\nregister(\"notRegisteredInput.test2\", \"2\")\nsetValue(\"notRegisteredInput\", { test: \"1\", test2: \"2\" }) // ✅ sugar syntax to setValue twice\n```\n\n----------------------------------------\n\nTITLE: Passing formState as Second Argument to getFieldState\nDESCRIPTION: Examples showing how to pass the entire formState as the second optional argument to getFieldState when the form state subscription is not set up, ensuring proper subscription to state updates.\nSOURCE: https://github.com/react-hook-form/documentation/blob/master/src/content/docs/useform/getfieldstate.mdx#2025-04-09_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nconst { register } = useForm()\nregister(\"test\")\nconst { isDirty } = getFieldState(\"test\") // ❌ formState isDirty is not subscribed at useForm\nconst { register, formState } = useForm()\nconst { isDirty } = getFieldState(\"test\", formState) // ✅ formState.isDirty subscribed\nconst { formState } = useFormContext()\nconst { touchedFields } = getFieldState(\"test\", formState) // ✅ formState.touchedFields subscribed\n```\n\n----------------------------------------\n\nTITLE: Using useFormState Hook with TypeScript\nDESCRIPTION: This code snippet demonstrates the function signature of the useFormState hook in React Hook Form. It accepts a control prop and returns the FormState object.\nSOURCE: https://github.com/react-hook-form/documentation/blob/master/src/content/docs/useformstate.mdx#2025-04-09_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nuseFormState: ({ control: Control }) => FormState\n```\n\n----------------------------------------\n\nTITLE: Field Array Direct Updates with setValue\nDESCRIPTION: An example showing the difference between using setValue for direct updates versus using the update method from useFieldArray which causes component remounting.\nSOURCE: https://github.com/react-hook-form/documentation/blob/master/src/content/docs/useform/setvalue.mdx#2025-04-09_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nconst { update } = useFieldArray({ name: \"array\" })\n\n// unmount fields and remount with updated value\nupdate(0, { test: \"1\", test1: \"2\" })\n\n// will directly update input value\nsetValue(\"array.0.test1\", \"1\")\nsetValue(\"array.0.test2\", \"2\")\n```\n\n----------------------------------------\n\nTITLE: Defining Reset Function Signature in TypeScript\nDESCRIPTION: This code snippet defines the signature of the reset function in react-hook-form. The function takes optional parameters for values and options, and returns void. It can be used to reset the entire form state, fields reference, and subscriptions.\nSOURCE: https://github.com/react-hook-form/documentation/blob/master/src/content/docs/useform/reset.mdx#2025-04-09_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\nreset: <T>(values?: T | ResetAction<T>, options?: Record<string, boolean>) => void\n```\n\n----------------------------------------\n\nTITLE: Targeting Fields with setValue in React Hook Form\nDESCRIPTION: Shows the recommended approach for targeting specific fields with setValue versus using nested objects, highlighting performance considerations.\nSOURCE: https://github.com/react-hook-form/documentation/blob/master/src/content/docs/useform/setvalue.mdx#2025-04-09_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nsetValue(\"yourDetails.firstName\", \"value\") // ✅ performant\nsetValue(\"yourDetails\", { firstName: \"value\" }) ❌ // less performant\n\nregister(\"nestedValue\", { value: { test: \"data\" } }) // register a nested value input\nsetValue(\"nestedValue.test\", \"updatedData\") // ❌ failed to find the relevant field\nsetValue(\"nestedValue\", { test: \"updatedData\" }) // ✅ setValue find input and update\n```\n\n----------------------------------------\n\nTITLE: Creating a Login Form with React Hook Form\nDESCRIPTION: Implementation of a login form using React Hook Form with email and password validation, focusing on accessibility by setting appropriate role attributes.\nSOURCE: https://github.com/react-hook-form/documentation/blob/master/src/content/advanced-usage.mdx#2025-04-09_snippet_19\n\nLANGUAGE: javascript\nCODE:\n```\nimport { useForm } from \"react-hook-form\"\n\nexport default function App({ login }) {\n  const {\n    register,\n    handleSubmit,\n    formState: { errors },\n    reset,\n  } = useForm()\n  const onSubmit = async (data) => {\n    await login(data.email, data.password)\n    reset()\n  }\n\n  return (\n    <form onSubmit={handleSubmit(onSubmit)}>\n      <label htmlFor=\"email\">email</label>\n      <input\n        id=\"email\"\n        {...register(\"email\", {\n          required: \"required\",\n          pattern: {\n            value: /\\S+@\\S+\\.\\S+/,\n            message: \"Entered value does not match email format\",\n          },\n        })}\n        type=\"email\"\n      />\n      {errors.email && <span role=\"alert\">{errors.email.message}</span>}\n      <label htmlFor=\"password\">password</label>\n      <input\n        id=\"password\"\n        {...register(\"password\", {\n          required: \"required\",\n          minLength: {\n            value: 5,\n            message: \"min length is 5\",\n          },\n        })}\n        type=\"password\"\n      />\n      {errors.password && <span role=\"alert\">{errors.password.message}</span>}\n      <button type=\"submit\">SUBMIT</button>\n    </form>\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: FormState UseEffect Subscription Example\nDESCRIPTION: Demonstrates the correct way to subscribe to formState changes using useEffect hook. Shows how to properly track formState updates by including the entire formState object in the dependency array.\nSOURCE: https://github.com/react-hook-form/documentation/blob/master/src/content/docs/useform/formstate.mdx#2025-04-09_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nuseEffect(() => {\n  if (formState.errors.firstName) {\n    // do the your logic here\n  }\n}, [formState])\n```\n\n----------------------------------------\n\nTITLE: Using trigger Function in React Hook Form with JavaScript\nDESCRIPTION: Example demonstrating how to use the trigger function to manually validate form fields in React Hook Form with JavaScript. Shows how to trigger validation for a single field, multiple fields, or all fields in a form, including how to use the returned Promise.\nSOURCE: https://github.com/react-hook-form/documentation/blob/master/src/content/docs/useform/trigger.mdx#2025-04-09_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport React from \"react\"\nimport { useForm } from \"react-hook-form\"\n\nexport default function App() {\n  const {\n    register,\n    trigger,\n    formState: { errors },\n  } = useForm()\n\n  return (\n    <form>\n      <input {...register(\"firstName\", { required: true })} />\n      <input {...register(\"lastName\", { required: true })} />\n      <button\n        type=\"button\"\n        onClick={async () => {\n          const result = await trigger(\"lastName\")\n          // const result = await trigger(\"lastName\", { shouldFocus: true }); allowed to focus input\n        }}\n      >\n        Trigger\n      </button>\n      <button\n        type=\"button\"\n        onClick={async () => {\n          const result = await trigger([\"firstName\", \"lastName\"])\n        }}\n      >\n        Trigger Multiple\n      </button>\n      <button\n        type=\"button\"\n        onClick={() => {\n          trigger()\n        }}\n      >\n        Trigger All\n      </button>\n    </form>\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Loading Async Default Values in React Hook Form\nDESCRIPTION: Shows how to use async defaultValues in React Hook Form and track the loading state. The isLoading property will be true while fetching the default values from an API.\nSOURCE: https://github.com/react-hook-form/documentation/blob/master/src/content/docs/useformstate.mdx#2025-04-09_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nconst {\n  formState: { isLoading }\n} = useForm({\n  defaultValues: async () => await fetch('/api')\n})\n```\n\n----------------------------------------\n\nTITLE: Form State Usage with TypeScript\nDESCRIPTION: TypeScript implementation showing how to use formState with proper type definitions for form state tracking\nSOURCE: https://github.com/react-hook-form/documentation/blob/master/src/content/docs/useform/formstate.mdx#2025-04-09_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { useForm, FormState } from \"react-hook-form\";\n\nconst { formState }: { formState: FormState<any> } = useForm();\n```\n\n----------------------------------------\n\nTITLE: Connecting Forms Across Nested Components\nDESCRIPTION: Implementation of a ConnectForm component that leverages React's render props pattern and useFormContext hook to simplify connecting deeply nested form components.\nSOURCE: https://github.com/react-hook-form/documentation/blob/master/src/content/advanced-usage.mdx#2025-04-09_snippet_8\n\nLANGUAGE: javascript\nCODE:\n```\nimport { FormProvider, useForm, useFormContext } from \"react-hook-form\"\n\nexport const ConnectForm = ({ children }) => {\n  const methods = useFormContext()\n\n  return children(methods)\n}\n\nexport const DeepNest = () => (\n  <ConnectForm>\n    {({ register }) => <input {...register(\"deepNestedInput\")} />}\n  </ConnectForm>\n)\n\nexport const App = () => {\n  const methods = useForm()\n\n  return (\n    <FormProvider {...methods}>\n      <form>\n        <DeepNest />\n      </form>\n    </FormProvider>\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Customizing Value Transformation in Controller for React Hook Form\nDESCRIPTION: Shows how to customize the value sent to hook form by transforming it during the onChange event, in this case converting a string to an integer.\nSOURCE: https://github.com/react-hook-form/documentation/blob/master/src/content/docs/usecontroller/controller.mdx#2025-04-09_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\n<Controller\n  name=\"test\"\n  render={({ field }) => {\n    // sending integer instead of string.\n    return (\n      <input\n        {...field}\n        onChange={(e) => field.onChange(parseInt(e.target.value))}\n      />\n    )\n  }}\n/>\n```\n\n----------------------------------------\n\nTITLE: FormState Subscription Pattern\nDESCRIPTION: Shows the correct and incorrect patterns for subscribing to formState properties. Demonstrates how to properly destructure formState values to ensure proper subscription to state changes.\nSOURCE: https://github.com/react-hook-form/documentation/blob/master/src/content/docs/useform/formstate.mdx#2025-04-09_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\n// ❌ formState.isValid is accessed conditionally,\n\n// so the Proxy does not subscribe to changes of that state\nreturn <button disabled={!formState.isDirty || !formState.isValid} />;\n\n// ✅ read all formState values to subscribe to changes\nconst { isDirty, isValid } = formState;\nreturn <button disabled={!isDirty || !isValid} />;\n```\n\n----------------------------------------\n\nTITLE: Using setFocus in React Hook Form with JavaScript\nDESCRIPTION: This example shows how to use the setFocus method in a React component with JavaScript. It focuses on the 'firstName' input field when the component mounts.\nSOURCE: https://github.com/react-hook-form/documentation/blob/master/src/content/docs/useform/setfocus.mdx#2025-04-09_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport * as React from \"react\"\nimport { useForm } from \"react-hook-form\"\n\nexport default function App() {\n  const { register, handleSubmit, setFocus } = useForm()\n  const onSubmit = (data) => console.log(data)\n  renderCount++\n\n  React.useEffect(() => {\n    setFocus(\"firstName\")\n  }, [setFocus])\n\n  return (\n    <form onSubmit={handleSubmit(onSubmit)}>\n      <input {...register(\"firstName\")} placeholder=\"First Name\" />\n      <input type=\"submit\" />\n    </form>\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Custom Register Approach for Controlled Components in React Hook Form\nDESCRIPTION: Shows an alternative approach to integrating controlled components using custom register and setValue methods instead of Controller component. Demonstrates mixing controlled and uncontrolled components with Material-UI.\nSOURCE: https://github.com/react-hook-form/documentation/blob/master/src/content/advanced-usage.mdx#2025-04-09_snippet_11\n\nLANGUAGE: javascript\nCODE:\n```\nimport { useEffect } from \"react\"\nimport { Input, Select, MenuItem } from \"@material-ui/core\"\nimport { useForm } from \"react-hook-form\"\n\nconst defaultValues = {\n  select: \"\",\n  input: \"\",\n}\n\nfunction App() {\n  const { register, handleSubmit, setValue, reset, watch } = useForm({\n    defaultValues,\n  })\n  const selectValue = watch(\"select\")\n  const onSubmit = (data) => console.log(data)\n\n  useEffect(() => {\n    register({ name: \"select\" })\n  }, [register])\n\n  const handleChange = (e) => setValue(\"select\", e.target.value)\n\n  return (\n    <form onSubmit={handleSubmit(onSubmit)}>\n      <Select value={selectValue} onChange={handleChange}>\n        <MenuItem value={10}>Ten</MenuItem>\n        <MenuItem value={20}>Twenty</MenuItem>\n      </Select>\n      <Input {...register(\"input\")} />\n\n      <button type=\"button\" onClick={() => reset({ ...defaultValues })}>\n        Reset\n      </button>\n      <input type=\"submit\" />\n    </form>\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Asynchronous Form Submission with Validation\nDESCRIPTION: Example demonstrating asynchronous form submission with a simulated delay and conditional validation based on the username value.\nSOURCE: https://github.com/react-hook-form/documentation/blob/master/src/content/docs/useform/handlesubmit.mdx#2025-04-09_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nimport React from \"react\";\nimport { useForm } from \"react-hook-form\";\n\nconst sleep = ms => new Promise(resolve => setTimeout(resolve, ms));\n\nfunction App() {\n  const { register, handleSubmit, formState: { errors } } = useForm();\n  const onSubmit = async data => {\n    await sleep(2000);\n    if (data.username === \"bill\") {\n      alert(JSON.stringify(data));\n    } else {\n      alert(\"There is an error\");\n    }\n  };\n\n  return (\n    <form onSubmit={handleSubmit(onSubmit)}>\n      <label htmlFor=\"username\">User Name</label>\n      <input placeholder=\"Bill\" {...register(\"username\"} />\n\n      <input type=\"submit\" />\n    </form>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a Form Container Component\nDESCRIPTION: Implementation of a Form component that injects React Hook Form methods into child components using React's Children API, enabling a more declarative form building approach.\nSOURCE: https://github.com/react-hook-form/documentation/blob/master/src/content/advanced-usage.mdx#2025-04-09_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\nimport { Children, createElement } from \"react\"\nimport { useForm } from \"react-hook-form\"\n\nexport default function Form({ defaultValues, children, onSubmit }) {\n  const methods = useForm({ defaultValues })\n  const { handleSubmit } = methods\n\n  return (\n    <form onSubmit={handleSubmit(onSubmit)}>\n      {Children.map(children, (child) => {\n        return child.props.name\n          ? createElement(child.type, {\n              ...{\n                ...child.props,\n                register: methods.register,\n                key: child.props.name,\n              },\n            })\n          : child\n      })}\n    </form>\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Optimizing FormProvider Performance with React.memo in React Hook Form\nDESCRIPTION: Demonstrates how to optimize FormProvider performance by using React.memo to prevent unnecessary re-renders of nested components. The example shows how to selectively re-render only when specific form state properties change.\nSOURCE: https://github.com/react-hook-form/documentation/blob/master/src/content/advanced-usage.mdx#2025-04-09_snippet_9\n\nLANGUAGE: javascript\nCODE:\n```\nimport { memo } from \"react\"\nimport { useForm, FormProvider, useFormContext } from \"react-hook-form\"\n\n// we can use React.memo to prevent re-render except isDirty state changed\nconst NestedInput = memo(\n  ({ register, formState: { isDirty } }) => (\n    <div>\n      <input {...register(\"test\")} />\n      {isDirty && <p>This field is dirty</p>}\n    </div>\n  ),\n  (prevProps, nextProps) =>\n    prevProps.formState.isDirty === nextProps.formState.isDirty\n)\n\nexport const NestedInputContainer = ({ children }) => {\n  const methods = useFormContext()\n\n  return <NestedInput {...methods} />\n}\n\nexport default function App() {\n  const methods = useForm()\n  const onSubmit = (data) => console.log(data)\n  console.log(methods.formState.isDirty) // make sure formState is read before render to enable the Proxy\n\n  return (\n    <FormProvider {...methods}>\n      <form onSubmit={methods.handleSubmit(onSubmit)}>\n        <NestedInputContainer />\n        <input type=\"submit\" />\n      </form>\n    </FormProvider>\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Using trigger Function in React Hook Form with TypeScript\nDESCRIPTION: Example demonstrating how to use the trigger function to manually validate form fields in React Hook Form with TypeScript. Shows how to trigger validation for a single field, multiple fields, or all fields in a form.\nSOURCE: https://github.com/react-hook-form/documentation/blob/master/src/content/docs/useform/trigger.mdx#2025-04-09_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport React from \"react\"\nimport { useForm } from \"react-hook-form\"\n\ntype FormInputs = {\n  firstName: string\n  lastName: string\n}\n\nexport default function App() {\n  const {\n    register,\n    trigger,\n    formState: { errors },\n  } = useForm<FormInputs>()\n\n  return (\n    <form>\n      <input {...register(\"firstName\", { required: true })} />\n      <input {...register(\"lastName\", { required: true })} />\n      <button\n        type=\"button\"\n        onClick={() => {\n          trigger(\"lastName\")\n        }}\n      >\n        Trigger\n      </button>\n      <button\n        type=\"button\"\n        onClick={() => {\n          trigger([\"firstName\", \"lastName\"])\n        }}\n      >\n        Trigger Multiple\n      </button>\n      <button\n        type=\"button\"\n        onClick={() => {\n          trigger()\n        }}\n      >\n        Trigger All\n      </button>\n    </form>\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Correct Usage of Controller Component in React Hook Form\nDESCRIPTION: Demonstrates the proper way to use the Controller component without double registration of the input.\nSOURCE: https://github.com/react-hook-form/documentation/blob/master/src/content/docs/usecontroller/controller.mdx#2025-04-09_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\n<Controller\n  name=\"test\"\n  render={({ field }) => {\n    // return <input {...field} {...register('test')} />; ❌ double up the registration\n    return <input {...field} /> // ✅\n  }}\n/>\n```\n\n----------------------------------------\n\nTITLE: Configuring Reset Options in React Hook Form\nDESCRIPTION: Demonstrates how to configure form reset behavior when values or defaultValues are updated asynchronously. Shows options for keeping dirty values and errors during updates.\nSOURCE: https://github.com/react-hook-form/documentation/blob/master/src/content/docs/useform.mdx#2025-04-09_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\n// by default asynchronously value or defaultValues update will reset the form values\nuseForm({ values })\nuseForm({ defaultValues: async () => await fetch() })\n\n// options to config the behaviour\n// eg: I want to keep user interacted/dirty value and not remove any user errors\nuseForm({\n  values,\n  resetOptions: {\n    keepDirtyValues: true, // user-interacted input will be retained\n    keepErrors: true, // input errors will be retained with value update\n  },\n})\n```\n\n----------------------------------------\n\nTITLE: Custom Async Validation with React Hook Form\nDESCRIPTION: This example shows how to implement custom async validation using React Hook Form's register function. It includes a select input with required validation and a placeholder for an async validation function.\nSOURCE: https://github.com/react-hook-form/documentation/blob/master/src/content/docs/useform/register.mdx#2025-04-09_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nimport { useForm } from \"react-hook-form\"\nimport { checkProduct } from \"./service\"\n\nexport default function App() {\n  const { register, handleSubmit } = useForm()\n\n  return (\n    <form onSubmit={handleSubmit(console.log)}>\n      <select\n        {...register(\"category\", {\n          required: true,\n        })}\n      >\n```\n\n----------------------------------------\n\nTITLE: Form Disable State Management\nDESCRIPTION: Demonstrates how to implement form-wide disable functionality using the disabled configuration option, affecting all form inputs and controllers.\nSOURCE: https://github.com/react-hook-form/documentation/blob/master/src/content/docs/useform.mdx#2025-04-09_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\nimport { useForm, Controller } from \"react-hook-form\"\n\nconst App = () => {\n  const [disabled, setDisabled] = useState(false)\n  const { register, handleSubmit, control } = useForm({\n    disabled,\n  })\n\n  return (\n    <form\n      onSubmit={handleSubmit(async () => {\n        setDisabled(true)\n        await sleep(100)\n        setDisabled(false)\n      })}\n    >\n      <input\n        type={\"checkbox\"}\n        {...register(\"checkbox\")}\n        data-testid={\"checkbox\"}\n      />\n      <select {...register(\"select\")} data-testid={\"select\"} />\n\n      <Controller\n        control={control}\n        render={({ field }) => <input disabled={field.disabled} />}\n        name=\"test\"\n      />\n\n      <button type=\"submit\">Submit</button>\n    </form>\n  )\n```\n\n----------------------------------------\n\nTITLE: Form Element Unmounting Behavior Example\nDESCRIPTION: Shows proper implementation of form element unmounting with shouldUnregister option, including correct and incorrect patterns for notifying React Hook Form of unmounted components.\nSOURCE: https://github.com/react-hook-form/documentation/blob/master/src/content/docs/useform.mdx#2025-04-09_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nconst NotWork = () => {\n  const [show, setShow] = React.useState(false)\n  // ❌ won't get notified, need to invoke unregister\n  return show && <input {...register(\"test\")} />\n}\n\nconst Work = ({ control }) => {\n  const { show } = useWatch({ control })\n  // ✅ get notified at useEffect\n  return show && <input {...register(\"test1\")} />\n}\n\nconst App = () => {\n  const [show, setShow] = React.useState(false)\n  const { control } = useForm({ shouldUnregister: true })\n  return (\n    <div>\n      // ✅ get notified at useForm's useEffect\n      {show && <input {...register(\"test2\")} />}\n      <NotWork />\n      <Work control={control} />\n    </div>\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Synchronous Form Submission with TypeScript\nDESCRIPTION: Example of handling form submission synchronously with proper TypeScript typing including SubmitHandler and SubmitErrorHandler interfaces.\nSOURCE: https://github.com/react-hook-form/documentation/blob/master/src/content/docs/useform/handlesubmit.mdx#2025-04-09_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport React from \"react\"\nimport { useForm, SubmitHandler, SubmitErrorHandler } from \"react-hook-form\"\n\ntype FormValues = {\n  firstName: string\n  lastName: string\n  email: string\n}\n\nexport default function App() {\n  const { register, handleSubmit } = useForm<FormValues>()\n  const onSubmit: SubmitHandler<FormValues> = (data) => console.log(data)\n  const onError: SubmitErrorHandler<FormValues> = (errors) => console.log(errors)\n\n  return (\n    <form onSubmit={handleSubmit(onSubmit)}>\n      <input {...register(\"firstName\")} />\n      <input {...register(\"lastName\")} />\n      <input type=\"email\" {...register(\"email\")} />\n\n      <input type=\"submit\" />\n    </form>\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Custom Register Implementation with useEffect in React Hook Form\nDESCRIPTION: Demonstrates a custom implementation of form registration using useEffect and manual value handling with setValue. Includes form submission handling.\nSOURCE: https://github.com/react-hook-form/documentation/blob/master/src/content/faqs.mdx#2025-04-09_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\nimport React, { useEffect } from \"react\"\nimport { useForm } from \"react-hook-form\"\n\nfunction App() {\n  const { register, watch, setValue, handleSubmit } = useForm({\n    defaultValues: {\n      firstName: \"\",\n      lastName: \"\",\n    },\n  })\n  const { firstName, lastName } = watch()\n\n  useEffect(() => {\n    register(\"firstName\")\n    register(\"lastName\")\n  }, [register])\n\n  const handleChange = (e, name) => {\n    setValue(name, e.target.value)\n  }\n\n  const onSubmit = (data) => console.log(data)\n\n  return (\n    <form onSubmit={handleSubmit(onSubmit)}>\n      <input onChange={(e) => handleChange(e, \"firstName\")} value={firstName} />\n\n      <input onChange={(e) => handleChange(e, \"lastName\")} value={lastName} />\n      <input type=\"submit\" />\n    </form>\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Manual Form Control without Refs in React Hook Form\nDESCRIPTION: Shows how to use React Hook Form without direct ref access by manually handling setValue and setError. Useful for components where ref access is not available.\nSOURCE: https://github.com/react-hook-form/documentation/blob/master/src/content/faqs.mdx#2025-04-09_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nimport React, { useEffect } from \"react\"\nimport { useForm } from \"react-hook-form\"\n\nexport default function App() {\n  const { register, handleSubmit, setValue, setError } = useForm()\n  const onSubmit = (data) => console.log(data)\n\n  useEffect(() => {\n    register(\"firstName\", { required: true })\n    register(\"lastName\")\n  }, [])\n\n  return (\n    <form onSubmit={handleSubmit(onSubmit)}>\n      <input\n        name=\"firstName\"\n        onChange={(e) => setValue(\"firstName\", e.target.value)}\n      />\n      <input\n        name=\"lastName\"\n        onChange={(e) => {\n          const value = e.target.value\n          if (value === \"test\") {\n            setError(\"lastName\", \"notMatch\")\n          } else {\n            setValue(\"lastName\", e.target.value)\n          }\n        }}\n      />\n      <button>Submit</button>\n    </form>\n  )\n```\n\n----------------------------------------\n\nTITLE: Using watch with useFieldArray in JavaScript\nDESCRIPTION: Example demonstrating how to use watch in conjunction with useFieldArray for dynamic form arrays in JavaScript.\nSOURCE: https://github.com/react-hook-form/documentation/blob/master/src/content/docs/useform/watch.mdx#2025-04-09_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\nimport * as React from \"react\"\nimport { useForm, useFieldArray } from \"react-hook-form\"\n\nfunction App() {\n  const { register, control, handleSubmit, watch } = useForm()\n  const { fields, remove, append } = useFieldArray({\n    name: \"test\",\n    control,\n  })\n  const onSubmit = (data) => console.log(data)\n\n  console.log(watch(\"test\"))\n\n  return (\n    <form onSubmit={handleSubmit(onSubmit)}>\n      {fields.map((field, index) => {\n        return (\n          <div key={field.id}>\n            <input\n              defaultValue={field.firstName}\n              {...register(`test.${index}.firstName`)}\n            />\n            <input\n              defaultValue={field.lastName}\n              {...register(`test.${index}.lastName`)}\n            />\n            <button type=\"button\" onClick={() => remove(index)}>\n              Remove\n            </button>\n          </div>\n        )\n      })}\n      <button\n        type=\"button\"\n        onClick={() =>\n          append({\n            firstName: \"bill\" + renderCount,\n            lastName: \"luo\" + renderCount,\n          })\n        }\n      >\n        Append\n      </button>\n    </form>\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Multiple Error Messages with ErrorMessage in JavaScript\nDESCRIPTION: Example of using the ErrorMessage component to display multiple error messages in a React Hook Form with JavaScript. It shows handling multiple validation rules and rendering all error messages.\nSOURCE: https://github.com/react-hook-form/documentation/blob/master/src/content/docs/useformstate/errormessage.mdx#2025-04-09_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nimport { useForm } from \"react-hook-form\";\nimport { ErrorMessage } from '@hookform/error-message';\n\n\nexport default function App() {\n  const { register, formState: { errors }, handleSubmit } = useForm({\n    criteriaMode \"all\"\n  });\n  const onSubmit = data => console.log(data);\n\n  return (\n    <form onSubmit={handleSubmit(onSubmit)}>\n      <input\n        {...register(\"multipleErrorInput\", {\n          required: \"This is required.\",\n          pattern: {\n            value: /d+/,\n            message: \"This input is number only.\"\n          },\n          maxLength: {\n            value: 10,\n            message: \"This input exceed maxLength.\"\n          }\n        })}\n      />\n      <ErrorMessage\n        errors={errors}\n        name=\"multipleErrorInput\"\n        render={({ messages }) =>\n          messages &&\n          Object.entries(messages).map(([type, message]) => (\n            <p key={type}>{message}</p>\n          ))\n        }\n      />\n\n\n      <input type=\"submit\" />\n    </form>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Setting up createFormControl in React\nDESCRIPTION: This snippet demonstrates how to set up and use createFormControl in a React application. It shows the initialization of form control and its usage in components.\nSOURCE: https://github.com/react-hook-form/documentation/blob/master/src/content/docs/createFormControl.mdx#2025-04-09_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconst { formControl, control, handleSubmit, register } = createFormControl({\n  mode: 'onChange',\n  defaultValues: {\n    firstName: 'Bill'\n  }\n}})\n\nfunction App() {\n  useForm({\n    formControl,\n  })\n\n  return (\n    <form onSubmit={handleSubmit(data => console.log)}>\n      <input {...register('name')} />\n      <FormState />\n      <Controller />\n    </form>\n  );\n}\n\nfunction FormState() {\n  useFormState({\n    control // no longer need context api\n  })\n}\n\nfunction Controller() {\n  useFormState({\n    control // no longer need context api\n  })\n}\n```\n\n----------------------------------------\n\nTITLE: Setting an Error with Focus in React Hook Form (JavaScript)\nDESCRIPTION: Example of setting an error with focus on the input field using React Hook Form in JavaScript. The error is triggered by a button click and the shouldFocus option is used to focus the input.\nSOURCE: https://github.com/react-hook-form/documentation/blob/master/src/content/docs/useform/seterror.mdx#2025-04-09_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport { useForm } from \"react-hook-form\"\n\nconst App = () => {\n  const {\n    register,\n    setError,\n    formState: { errors },\n  } = useForm()\n\n  return (\n    <form>\n      <input {...register(\"test\")} />\n      {errors.test && <p>{errors.test.message}</p>}\n\n      <button\n        type=\"button\"\n        onClick={() => {\n          setError(\"test\", { type: \"focus\" }, { shouldFocus: true })\n        }}\n      >\n        Set Error Focus\n      </button>\n      <input type=\"submit\" />\n    </form>\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Subscribing to form state changes with createFormControl\nDESCRIPTION: This example shows how to subscribe to form state changes using createFormControl. It demonstrates custom state subscription and form rendering.\nSOURCE: https://github.com/react-hook-form/documentation/blob/master/src/content/docs/createFormControl.mdx#2025-04-09_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nconst { formControl, register } = createFormControl(props)\n\nformControl.subscribe({\n  formState: {\n    isDirty: true,\n    values: true,\n  },\n  callback: (formState) => {\n    if (formState.isDirty) {\n      // do something here\n    }\n\n    if (formState.values.test.length > 3) {\n      // do something here\n    }\n  },\n})\n\nfunction App() {\n  const { register } = useForm({\n    formControl,\n  })\n\n  return (\n    <form>\n      <input {...register(\"test\")} />\n    </form>\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Integrating React Hook Form with Virtualized Lists using FormProvider\nDESCRIPTION: Shows how to use React Hook Form with virtualized lists using react-window. The implementation uses FormProvider to provide form context to windowed components and ensures inputs maintain their values when scrolling.\nSOURCE: https://github.com/react-hook-form/documentation/blob/master/src/content/advanced-usage.mdx#2025-04-09_snippet_13\n\nLANGUAGE: javascript\nCODE:\n```\nimport { memo } from \"react\"\nimport { FormProvider, useForm, useFormContext } from \"react-hook-form\"\nimport { VariableSizeList as List } from \"react-window\"\nimport AutoSizer from \"react-virtualized-auto-sizer\"\n\nconst items = Array.from(Array(1000).keys()).map((i) => ({\n  title: `List ${i}`,\n  quantity: Math.floor(Math.random() * 10),\n}))\n\nconst WindowedRow = memo(({ index, style, data }) => {\n  const { register } = useFormContext()\n\n  return <input {...register(`${index}.quantity`)} />\n})\n\nexport const App = () => {\n  const onSubmit = (data) => console.log(data)\n  const methods = useForm({ defaultValues: items })\n\n  return (\n    <form onSubmit={methods.handleSubmit(onSubmit)}>\n      <FormProvider {...methods}>\n        <AutoSizer>\n          {({ height, width }) => (\n            <List\n              height={height}\n              itemCount={items.length}\n              itemSize={() => 100}\n              width={width}\n              itemData={items}\n            >\n              {WindowedRow}\n            </List>\n          )}\n        </AutoSizer>\n      </FormProvider>\n      <button type=\"submit\">Submit</button>\n    </form>\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Asynchronous Form Reset in JavaScript with React Hook Form\nDESCRIPTION: Implementation of asynchronous form reset using React Hook Form in JavaScript. Demonstrates fetching values from an API and using reset with option parameters.\nSOURCE: https://github.com/react-hook-form/documentation/blob/master/src/content/docs/useform/reset.mdx#2025-04-09_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nimport React, { useCallback } from \"react\"\nimport { useForm } from \"react-hook-form\"\n\nexport default function App() {\n  const { register, handleSubmit, reset } = useForm()\n  const resetAsyncForm = useCallback(async () => {\n    const result = await fetch(\"./api/formValues.json\") // result: { firstName: 'test', lastName: 'test2' }\n    reset(result) // asynchronously reset your form values\n  }, [reset])\n\n  useEffect(() => {\n    resetAsyncForm()\n  }, [resetAsyncForm])\n\n  return (\n    <form onSubmit={handleSubmit((data) => {})}>\n      <input {...register(\"firstName\")} />\n      <input {...register(\"lastName\")} />\n\n      <input\n        type=\"button\"\n        onClick={() => {\n          reset(\n            {\n              firstName: \"bill\",\n            },\n            {\n              keepErrors: true,\n              keepDirty: true,\n            }\n          )\n        }}\n      />\n\n      <button\n        onClick={() => {\n          reset((formValues) => ({\n            ...formValues,\n            lastName: \"test\",\n          }))\n        }}\n      >\n        Reset partial\n      </button>\n    </form>\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Basic Form Validation with React Hook Form\nDESCRIPTION: A basic form implementation using React Hook Form with validation for required fields and maximum length constraints. This example shows the initial form structure before accessibility improvements.\nSOURCE: https://github.com/react-hook-form/documentation/blob/master/src/content/advanced-usage.mdx#2025-04-09_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport { useForm } from \"react-hook-form\"\n\nexport default function App() {\n  const {\n    register,\n    handleSubmit,\n    formState: { errors },\n  } = useForm()\n  const onSubmit = (data) => console.log(data)\n\n  return (\n    <form onSubmit={handleSubmit(onSubmit)}>\n      <label htmlFor=\"name\">Name</label>\n      <input\n        id=\"name\"\n        {...register(\"name\", { required: true, maxLength: 30 })}\n      />\n      {errors.name && errors.name.type === \"required\" && (\n        <span>This is required</span>\n      )}\n      {errors.name && errors.name.type === \"maxLength\" && (\n        <span>Max length exceeded</span>\n      )}\n      <input type=\"submit\" />\n    </form>\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Up Routes and Store for Wizard Form\nDESCRIPTION: Step 1 of creating a multi-page wizard form with React Hook Form, using little-state-machine for state management and react-router for navigation between form steps.\nSOURCE: https://github.com/react-hook-form/documentation/blob/master/src/content/advanced-usage.mdx#2025-04-09_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nimport { BrowserRouter as Router, Route } from \"react-router-dom\"\nimport { StateMachineProvider, createStore } from \"little-state-machine\"\nimport Step1 from \"./Step1\"\nimport Step2 from \"./Step2\"\nimport Result from \"./Result\"\n\ncreateStore({\n  data: {\n    firstName: \"\",\n    lastName: \"\",\n  },\n})\n\nexport default function App() {\n  return (\n    <StateMachineProvider>\n      <Router>\n        <Route exact path=\"/\" component={Step1} />\n        <Route path=\"/step2\" component={Step2} />\n        <Route path=\"/result\" component={Result} />\n      </Router>\n    </StateMachineProvider>\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Uncontrolled Form Reset Implementation in TypeScript\nDESCRIPTION: Full example of implementing reset functionality in an uncontrolled form using React Hook Form with TypeScript. Shows how to reset both field values and errors.\nSOURCE: https://github.com/react-hook-form/documentation/blob/master/src/content/docs/useform/reset.mdx#2025-04-09_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nimport { useForm } from \"react-hook-form\"\n\ninterface UseFormInputs {\n  firstName: string\n  lastName: string\n}\n\nexport default function Form() {\n  const {\n    register,\n    handleSubmit,\n    reset,\n    formState: { errors },\n  } = useForm<UseFormInputs>()\n  const onSubmit = (data: UseFormInputs) => {\n    console.log(data)\n  }\n\n  return (\n    <form onSubmit={handleSubmit(onSubmit)}>\n      <label>First name</label>\n      <input {...register(\"firstName\", { required: true })} />\n\n      <label>Last name</label>\n      <input {...register(\"lastName\")} />\n\n      <input type=\"submit\" />\n      <input type=\"reset\" value=\"Standard Reset Field Values\" />\n      <input\n        type=\"button\"\n        onClick={() => reset()}\n        value=\"Custom Reset Field Values & Errors\"\n      />\n    </form>\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a Form Page in Wizard Form\nDESCRIPTION: Step 2 of creating a wizard form shows how to collect user input, store it in the state management system, and navigate to the next page upon submission.\nSOURCE: https://github.com/react-hook-form/documentation/blob/master/src/content/advanced-usage.mdx#2025-04-09_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nimport { useForm } from \"react-hook-form\"\nimport { withRouter } from \"react-router-dom\"\nimport { useStateMachine } from \"little-state-machine\"\nimport updateAction from \"./updateAction\"\n\nconst Step1 = (props) => {\n  const { register, handleSubmit } = useForm()\n  const { actions } = useStateMachine({ updateAction })\n  const onSubmit = (data) => {\n    actions.updateAction(data)\n    props.history.push(\"./step2\")\n  }\n\n  return (\n    <form onSubmit={handleSubmit(onSubmit)}>\n      <input {...register(\"firstName\")} />\n      <input {...register(\"lastName\")} />\n      <input type=\"submit\" />\n    </form>\n  )\n}\n\nexport default withRouter(Step1)\n```\n\n----------------------------------------\n\nTITLE: Displaying Results in Wizard Form\nDESCRIPTION: Step 3 of the wizard form demonstrates how to access the collected data from the state management system and display it to the user.\nSOURCE: https://github.com/react-hook-form/documentation/blob/master/src/content/advanced-usage.mdx#2025-04-09_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nimport { useStateMachine } from \"little-state-machine\"\nimport updateAction from \"./updateAction\"\n\nconst Result = (props) => {\n  const { state } = useStateMachine(updateAction)\n\n  return <pre>{JSON.stringify(state, null, 2)}</pre>\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Form Reset with React Hook Form and Material UI\nDESCRIPTION: This snippet demonstrates a basic React form implementation using React Hook Form with Material UI TextField components. It showcases three reset scenarios: a basic reset, a controlled reset with specific values, and form submission handling.\nSOURCE: https://github.com/react-hook-form/documentation/blob/master/src/content/docs/useform/reset.mdx#2025-04-09_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nimport { useForm, Controller } from \"react-hook-form\"\nimport { TextField } from \"@material-ui/core\"\n\nexport default function App() {\n  const { register, handleSubmit, reset, setValue, control } = useForm()\n  const onSubmit = (data) => console.log(data)\n\n  return (\n    <form onSubmit={handleSubmit(onSubmit)}>\n      <Controller\n        render={({ field }) => <TextField {...field} />}\n        name=\"firstName\"\n        control={control}\n        rules={{ required: true }}\n        defaultValue=\"\"\n      />\n      <Controller\n        render={({ field }) => <TextField {...field} />}\n        name=\"lastName\"\n        control={control}\n        defaultValue=\"\"\n      />\n\n      <input type=\"submit\" />\n      <input type=\"button\" onClick={reset} />\n      <input\n        type=\"button\"\n        onClick={() => {\n          reset({\n            firstName: \"bill\",\n            lastName: \"luo\",\n          })\n        }}\n      />\n    </form>\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Basic Error Clearing with Register\nDESCRIPTION: Demonstrates how to register form fields and clear their errors using string paths\nSOURCE: https://github.com/react-hook-form/documentation/blob/master/src/content/docs/useform/clearerrors.mdx#2025-04-09_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nregister(\"test.firstName\", { required: true })\nregister(\"test.lastName\", { required: true })\nclearErrors(\"test\") // will clear both errors from test.firstName and test.lastName\nclearErrors(\"test.firstName\") // for clear single input error\n```\n\n----------------------------------------\n\nTITLE: UseFieldArrayProps Type Definition for Array Field Configuration\nDESCRIPTION: This type definition specifies the configuration options for the useFieldArray hook. It includes options for naming, validation rules, and behavior of array fields.\nSOURCE: https://github.com/react-hook-form/documentation/blob/master/src/content/ts.mdx#2025-04-09_snippet_8\n\nLANGUAGE: typescript\nCODE:\n```\nexport type UseFieldArrayProps<\n  TFieldValues extends FieldValues = FieldValues,\n  TFieldArrayName extends FieldArrayPath<TFieldValues> = FieldArrayPath<TFieldValues>,\n  TKeyName extends string = 'id',\n> = {\n  name: TFieldArrayName\n  keyName?: TKeyName\n  control?: Control<TFieldValues>\n  rules?: {\n    validate?\n      | Validate<FieldArray<TFieldValues, TFieldArrayName>[], TFieldValues>\n      | Record<\n          string,\n          Validate<FieldArray<TFieldValues, TFieldArrayName>[], TFieldValues>\n        >\n  } & Pick<\n    RegisterOptions<TFieldValues>,\n    'maxLength' | 'minLength' | 'required'\n  >\n  shouldUnregister?: boolean\n}\n```\n\n----------------------------------------\n\nTITLE: Using Reset with useEffect in React Hook Form\nDESCRIPTION: Example showing how to properly reset a form inside useEffect after successful submission. This pattern ensures the useForm's subscription is ready before resetting.\nSOURCE: https://github.com/react-hook-form/documentation/blob/master/src/content/docs/useform/reset.mdx#2025-04-09_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nuseEffect(() => {\n  reset({\n    data: \"test\",\n  })\n}, [isSubmitSuccessful])\n```\n\n----------------------------------------\n\nTITLE: UseControllerReturn Type Definition for Controlled Components\nDESCRIPTION: This type definition specifies the return object from the useController hook. It includes field properties, form state, and field state for building controlled components.\nSOURCE: https://github.com/react-hook-form/documentation/blob/master/src/content/ts.mdx#2025-04-09_snippet_9\n\nLANGUAGE: typescript\nCODE:\n```\nexport type UseControllerReturn<\n  TFieldValues extends FieldValues = FieldValues,\n  TName extends FieldPath<TFieldValues> = FieldPath<TFieldValues>,\n> = {\n  field: ControllerRenderProps<TFieldValues, TName>\n  formState: UseFormStateReturn<TFieldValues>\n  fieldState: ControllerFieldState\n}\n```\n\n----------------------------------------\n\nTITLE: FieldError Type Definition for Form Error Handling\nDESCRIPTION: This type definition specifies the structure of field errors in React Hook Form. It includes error type, message, and nested errors for complex validation scenarios.\nSOURCE: https://github.com/react-hook-form/documentation/blob/master/src/content/ts.mdx#2025-04-09_snippet_11\n\nLANGUAGE: typescript\nCODE:\n```\nexport type FieldError = {\n  type: LiteralUnion<keyof RegisterOptions, string>\n  root?: FieldError\n  ref?: Ref\n  types?: MultipleFieldErrors\n  message?: Message\n}\n```\n\n----------------------------------------\n\nTITLE: Subscribing to field changes with callback in React Hook Form\nDESCRIPTION: Example of using watch with a callback function to subscribe to field changes and properly unsubscribing in useEffect.\nSOURCE: https://github.com/react-hook-form/documentation/blob/master/src/content/docs/useform/watch.mdx#2025-04-09_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nuseEffect(() => {\n  const { unsubscribe } = watch((value) => {\n    console.log(value)\n  })\n  return () => unsubscribe()\n}, [watch])\n```\n\n----------------------------------------\n\nTITLE: Defining FieldErrors Type in TypeScript for React Hook Form\nDESCRIPTION: This type represents the structure of field errors in React Hook Form. It includes partial field values and a root property for global errors.\nSOURCE: https://github.com/react-hook-form/documentation/blob/master/src/content/ts.mdx#2025-04-09_snippet_12\n\nLANGUAGE: typescript\nCODE:\n```\nexport type FieldErrors<T extends FieldValues = FieldValues> = Partial<\n  FieldValues extends IsAny<FieldValues>\n    ? any\n    : FieldErrorsImpl<DeepRequired<T>>\n> & {\n  root?: Record<string, GlobalError> & GlobalError\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Field Type in TypeScript for React Hook Form\nDESCRIPTION: This type represents the structure of a field in React Hook Form. It includes properties for the field reference, name, and optional properties for multiple refs and mounting status.\nSOURCE: https://github.com/react-hook-form/documentation/blob/master/src/content/ts.mdx#2025-04-09_snippet_13\n\nLANGUAGE: typescript\nCODE:\n```\nexport type Field = {\n  _f: {\n    ref: Ref\n    name: InternalFieldName\n    refs?: HTMLInputElement[]\n    mount?: boolean\n  } & RegisterOptions\n}\n```\n\n----------------------------------------\n\nTITLE: Watching all form fields in React Hook Form\nDESCRIPTION: Example of using watch to monitor all form field values without specifying field names.\nSOURCE: https://github.com/react-hook-form/documentation/blob/master/src/content/docs/useform/watch.mdx#2025-04-09_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nconst formValues = watch()\n```\n\n----------------------------------------\n\nTITLE: Defining FieldPath Type in TypeScript for React Hook Form\nDESCRIPTION: This type is used for type-checking custom component name props against field paths in React Hook Form.\nSOURCE: https://github.com/react-hook-form/documentation/blob/master/src/content/ts.mdx#2025-04-09_snippet_14\n\nLANGUAGE: typescript\nCODE:\n```\nexport type FieldPath<TFieldValues extends FieldValues> = Path<TFieldValues>\n```\n\n----------------------------------------\n\nTITLE: Defining FieldPathByValue Type in TypeScript for React Hook Form\nDESCRIPTION: This type returns a union of all available paths that match the passed value in React Hook Form.\nSOURCE: https://github.com/react-hook-form/documentation/blob/master/src/content/ts.mdx#2025-04-09_snippet_15\n\nLANGUAGE: typescript\nCODE:\n```\nexport type FieldPathByValue<TFieldValues extends FieldValues, TValue> = {\n  [Key in FieldPath<TFieldValues>]: FieldPathValue<\n    TFieldValues,\n    Key\n  > extends TValue\n    ? Key\n    : never\n}[FieldPath<TFieldValues>]\n```\n\n----------------------------------------\n\nTITLE: Implementing watch in a complete form with JavaScript\nDESCRIPTION: Complete example showing multiple uses of watch in a JavaScript React form, including watching specific fields, all fields, and using the callback approach.\nSOURCE: https://github.com/react-hook-form/documentation/blob/master/src/content/docs/useform/watch.mdx#2025-04-09_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nimport React from \"react\"\nimport { useForm } from \"react-hook-form\"\n\nfunction App() {\n  const {\n    register,\n    watch,\n    formState: { errors },\n    handleSubmit,\n  } = useForm()\n  const watchShowAge = watch(\"showAge\", false) // you can supply default value as second argument\n  const watchAllFields = watch() // when pass nothing as argument, you are watching everything\n  const watchFields = watch([\"showAge\", \"number\"]) // you can also target specific fields by their names\n\n  // Callback version of watch.  It's your responsibility to unsubscribe when done.\n  React.useEffect(() => {\n    const subscription = watch((value, { name, type }) =>\n      console.log(value, name, type)\n    )\n    return () => subscription.unsubscribe()\n  }, [watch])\n\n  const onSubmit = (data) => console.log(data)\n\n  return (\n    <>\n      <form onSubmit={handleSubmit(onSubmit)}>\n        <input type=\"checkbox\" {...register(\"showAge\")} />\n\n        {/* based on yes selection to display Age Input*/}\n        {watchShowAge && (\n          <input type=\"number\" {...register(\"age\", { min: 50 })} />\n        )}\n\n        <input type=\"submit\" />\n      </form>\n    </>\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Defining FieldValues Type in TypeScript for React Hook Form\nDESCRIPTION: This type represents a record of string keys with any value, used for field values in React Hook Form.\nSOURCE: https://github.com/react-hook-form/documentation/blob/master/src/content/ts.mdx#2025-04-09_snippet_16\n\nLANGUAGE: typescript\nCODE:\n```\nexport type FieldValues = Record<string, any>\n```\n\n----------------------------------------\n\nTITLE: Writing Tests for React Hook Form\nDESCRIPTION: Comprehensive tests for a login form, including validation testing, error handling, and successful submission scenarios using testing-library.\nSOURCE: https://github.com/react-hook-form/documentation/blob/master/src/content/advanced-usage.mdx#2025-04-09_snippet_20\n\nLANGUAGE: javascript\nCODE:\n```\nimport { render, screen, fireEvent, waitFor } from \"@testing-library/react\"\nimport App from \"./App\"\n\nconst mockLogin = jest.fn((email, password) => {\n  return Promise.resolve({ email, password })\n})\n\nit(\"should display required error when value is invalid\", async () => {\n  render(<App login={mockLogin} />)\n\n  fireEvent.submit(screen.getByRole(\"button\"))\n\n  expect(await screen.findAllByRole(\"alert\")).toHaveLength(2)\n  expect(mockLogin).not.toBeCalled()\n})\n\nit(\"should display matching error when email is invalid\", async () => {\n  render(<App login={mockLogin} />)\n\n  fireEvent.input(screen.getByRole(\"textbox\", { name: /email/i }), {\n    target: {\n      value: \"test\",\n    },\n  })\n\n  fireEvent.input(screen.getByLabelText(\"password\"), {\n    target: {\n      value: \"password\",\n    },\n  })\n\n  fireEvent.submit(screen.getByRole(\"button\"))\n\n  expect(await screen.findAllByRole(\"alert\")).toHaveLength(1)\n  expect(mockLogin).not.toBeCalled()\n  expect(screen.getByRole(\"textbox\", { name: /email/i })).toHaveValue(\"test\")\n  expect(screen.getByLabelText(\"password\")).toHaveValue(\"password\")\n})\n\nit(\"should display min length error when password is invalid\", async () => {\n  render(<App login={mockLogin} />)\n\n  fireEvent.input(screen.getByRole(\"textbox\", { name: /email/i }), {\n    target: {\n      value: \"test@mail.com\",\n    },\n  })\n\n  fireEvent.input(screen.getByLabelText(\"password\"), {\n    target: {\n      value: \"pass\",\n    },\n  })\n\n  fireEvent.submit(screen.getByRole(\"button\"))\n\n  expect(await screen.findAllByRole(\"alert\")).toHaveLength(1)\n  expect(mockLogin).not.toBeCalled()\n  expect(screen.getByRole(\"textbox\", { name: /email/i })).toHaveValue(\n    \"test@mail.com\"\n  )\n  expect(screen.getByLabelText(\"password\")).toHaveValue(\"pass\")\n})\n\nit(\"should not display error when value is valid\", async () => {\n  render(<App login={mockLogin} />)\n\n  fireEvent.input(screen.getByRole(\"textbox\", { name: /email/i }), {\n    target: {\n      value: \"test@mail.com\",\n    },\n  })\n\n  fireEvent.input(screen.getByLabelText(\"password\"), {\n    target: {\n      value: \"password\",\n    },\n  })\n\n  fireEvent.submit(screen.getByRole(\"button\"))\n\n  await waitFor(() => expect(screen.queryAllByRole(\"alert\")).toHaveLength(0))\n  expect(mockLogin).toBeCalledWith(\"test@mail.com\", \"password\")\n  expect(screen.getByRole(\"textbox\", { name: /email/i })).toHaveValue(\"\")\n  expect(screen.getByLabelText(\"password\")).toHaveValue(\"\")\n})\n```\n\n----------------------------------------\n\nTITLE: Setting Multiple Types of Errors for a Single Field (TypeScript)\nDESCRIPTION: Example of setting multiple error types for a single field using the types property in setError. This demonstrates how to handle multiple validation errors for one field with criteriaMode set to 'all'.\nSOURCE: https://github.com/react-hook-form/documentation/blob/master/src/content/docs/useform/seterror.mdx#2025-04-09_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nimport * as React from \"react\"\nimport { useForm } from \"react-hook-form\"\n\ntype FormInputs = {\n  lastName: string\n}\n\nconst App = () => {\n  const {\n    register,\n    handleSubmit,\n    setError,\n    formState: { errors },\n  } = useForm<FormInputs>({\n    criteriaMode: \"all\",\n  })\n\n  const onSubmit = (data: FormInputs) => console.log(data)\n\n  React.useEffect(() => {\n    setError(\"lastName\", {\n      types: {\n        required: \"This is required\",\n        minLength: \"This is minLength\",\n      },\n    })\n  }, [setError])\n\n  return (\n    <form onSubmit={handleSubmit(onSubmit)}>\n      <label>Last Name</label>\n      <input {...register(\"lastName\")} />\n      {errors.lastName && errors.lastName.types && (\n        <p>{errors.lastName.types.required}</p>\n      )}\n      {errors.lastName && errors.lastName.types && (\n        <p>{errors.lastName.types.minLength}</p>\n      )}\n      <input type=\"submit\" />\n    </form>\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Mode Type in TypeScript for React Hook Form\nDESCRIPTION: This type represents the validation mode in React Hook Form. It is defined as the key of the ValidationMode type.\nSOURCE: https://github.com/react-hook-form/documentation/blob/master/src/content/ts.mdx#2025-04-09_snippet_18\n\nLANGUAGE: typescript\nCODE:\n```\nexport type ValidationMode = typeof VALIDATION_MODE\n\nexport type Mode = keyof ValidationMode\n```\n\n----------------------------------------\n\nTITLE: Defining RegisterOptions Type in TypeScript for React Hook Form\nDESCRIPTION: This type represents the options available when registering a field in React Hook Form. It includes various validation rules and field-specific options.\nSOURCE: https://github.com/react-hook-form/documentation/blob/master/src/content/ts.mdx#2025-04-09_snippet_19\n\nLANGUAGE: typescript\nCODE:\n```\nexport type RegisterOptions<\n  TFieldValues extends FieldValues = FieldValues,\n  TFieldName extends FieldPath<TFieldValues> = FieldPath<TFieldValues>,\n> = Partial<{\n  required: Message | ValidationRule<boolean>\n  min: ValidationRule<number | string>\n  max: ValidationRule<number | string>\n  maxLength: ValidationRule<number>\n  minLength: ValidationRule<number>\n  validate:\n    | Validate<FieldPathValue<TFieldValues, TFieldName>, TFieldValues>\n    | Record<\n        string,\n        Validate<FieldPathValue<TFieldValues, TFieldName>, TFieldValues>\n      >\n  value: FieldPathValue<TFieldValues, TFieldName>\n  setValueAs: (value: any) => any\n  shouldUnregister?: boolean\n  onChange?: (event: any) => void\n  onBlur?: (event: any) => void\n  disabled: boolean\n  deps: FieldPath<TFieldValues> | FieldPath<TFieldValues>[]\n}> &\n  (\n    | {\n        pattern?: ValidationRule<RegExp>\n        valueAsNumber?: false\n        valueAsDate?: false\n      }\n    | {\n        pattern?: undefined\n        valueAsNumber?: false\n        valueAsDate?: true\n      }\n    | {\n        pattern?: undefined\n        valueAsNumber?: true\n        valueAsDate?: false\n      }\n  )\n```\n\n----------------------------------------\n\nTITLE: Setting Multiple Types of Errors for a Single Field (JavaScript)\nDESCRIPTION: JavaScript version of setting multiple error types for a single field in React Hook Form. Uses the types property with criteriaMode set to 'all' to display different validation messages.\nSOURCE: https://github.com/react-hook-form/documentation/blob/master/src/content/docs/useform/seterror.mdx#2025-04-09_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nimport * as React from \"react\"\nimport { useForm } from \"react-hook-form\"\n\nconst App = () => {\n  const {\n    register,\n    handleSubmit,\n    setError,\n    formState: { errors },\n  } = useForm({\n    criteriaMode: \"all\",\n  })\n  const onSubmit = (data) => {\n    console.log(data)\n  }\n\n  React.useEffect(() => {\n    setError(\"lastName\", {\n      types: {\n        required: \"This is required\",\n        minLength: \"This is minLength\",\n      },\n    })\n  }, [setError])\n\n  return (\n    <form onSubmit={handleSubmit(onSubmit)}>\n      <label>Last Name</label>\n      <input {...register(\"lastName\")} />\n      {errors.lastName && errors.lastName.types && (\n        <p>{errors.lastName.types.required}</p>\n      )}\n      {errors.lastName && errors.lastName.types && (\n        <p>{errors.lastName.types.minLength}</p>\n      )}\n      <input type=\"submit\" />\n    </form>\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Installing Yup Schema Validation Dependencies\nDESCRIPTION: Command to install Yup validation resolver and dependencies for React Hook Form schema validation.\nSOURCE: https://github.com/react-hook-form/documentation/blob/master/src/content/get-started.mdx#2025-04-09_snippet_10\n\nLANGUAGE: bash\nCODE:\n```\nnpm install @hookform/resolvers yup\n```\n\n----------------------------------------\n\nTITLE: Simple Form Component that Causes Act Warning\nDESCRIPTION: Example form component that demonstrates a case where React Hook Form's internal asynchronous validation can cause act() warnings in tests.\nSOURCE: https://github.com/react-hook-form/documentation/blob/master/src/content/advanced-usage.mdx#2025-04-09_snippet_21\n\nLANGUAGE: javascript\nCODE:\n```\nimport { useForm } from \"react-hook-form\"\n\nexport default function App() {\n  const { register, handleSubmit } = useForm({\n    mode: \"onChange\",\n  })\n  const onSubmit = (data) => {}\n\n  return (\n    <form onSubmit={handleSubmit(onSubmit)}>\n      <input\n        {...register(\"answer\", {\n          required: true,\n        })}\n      />\n      <button type=\"submit\">SUBMIT</button>\n    </form>\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Setting a Custom Error in React Hook Form (TypeScript)\nDESCRIPTION: Example of manually setting an error for a username field in React Hook Form using TypeScript. The error is set during component initialization with useEffect and displayed in the form.\nSOURCE: https://github.com/react-hook-form/documentation/blob/master/src/content/docs/useform/seterror.mdx#2025-04-09_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport * as React from \"react\"\nimport { useForm } from \"react-hook-form\"\n\ntype FormInputs = {\n  username: string\n}\n\nconst App = () => {\n  const {\n    register,\n    handleSubmit,\n    setError,\n    formState: { errors },\n  } = useForm<FormInputs>()\n  const onSubmit = (data: FormInputs) => {\n    console.log(data)\n  }\n\n  React.useEffect(() => {\n    setError(\"username\", {\n      type: \"manual\",\n      message: \"Dont Forget Your Username Should Be Cool!\",\n    })\n  }, [setError])\n\n  return (\n    <form onSubmit={handleSubmit(onSubmit)}>\n      <input {...register(\"username\")} />\n      {errors.username && <p>{errors.username.message}</p>}\n\n      <input type=\"submit\" />\n    </form>\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Test with Act Warning\nDESCRIPTION: Example test that triggers an act() warning because it doesn't account for React Hook Form's internal asynchronous validation.\nSOURCE: https://github.com/react-hook-form/documentation/blob/master/src/content/advanced-usage.mdx#2025-04-09_snippet_22\n\nLANGUAGE: javascript\nCODE:\n```\nimport { render, screen } from \"@testing-library/react\"\nimport App from \"./App\"\n\nit(\"should have a submit button\", () => {\n  render(<App />)\n\n  expect(screen.getByText(\"SUBMIT\")).toBeInTheDocument()\n})\n```\n\n----------------------------------------\n\nTITLE: Resolving Act Warning with Async Testing\nDESCRIPTION: Improved test that resolves the act() warning by using async/await with findByText to wait for React Hook Form's internal validation to complete.\nSOURCE: https://github.com/react-hook-form/documentation/blob/master/src/content/advanced-usage.mdx#2025-04-09_snippet_23\n\nLANGUAGE: javascript\nCODE:\n```\nimport { render, screen } from \"@testing-library/react\"\nimport App from \"./App\"\n\nit(\"should have a submit button\", async () => {\n  render(<App />)\n\n  expect(await screen.findByText(\"SUBMIT\")).toBeInTheDocument()\n\n  // Now that the UI was awaited until the async behavior was completed,\n  // you can keep asserting with `get*` queries.\n  expect(screen.getByRole(\"textbox\")).toBeInTheDocument()\n})\n```\n\n----------------------------------------\n\nTITLE: Setting Multiple Errors in React Hook Form (TypeScript)\nDESCRIPTION: Example of setting errors for multiple form fields simultaneously in React Hook Form using TypeScript. The errors are set when a button is clicked, using an array of error configurations.\nSOURCE: https://github.com/react-hook-form/documentation/blob/master/src/content/docs/useform/seterror.mdx#2025-04-09_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport * as React from \"react\"\nimport { useForm } from \"react-hook-form\"\n\ntype FormInputs = {\n  username: string\n  firstName: string\n}\n\nconst App = () => {\n  const {\n    register,\n    handleSubmit,\n    setError,\n    formState: { errors },\n  } = useForm<FormInputs>()\n\n  const onSubmit = (data: FormInputs) => {\n    console.log(data)\n  }\n\n  return (\n    <form onSubmit={handleSubmit(onSubmit)}>\n      <label>Username</label>\n      <input {...register(\"username\")} />\n      {errors.username && <p>{errors.username.message}</p>}\n      <label>First Name</label>\n      <input {...register(\"firstName\")} />\n      {errors.firstName && <p>{errors.firstName.message}</p>}\n      <button\n        type=\"button\"\n        onClick={() => {\n          const inputs = [\n            {\n              type: \"manual\",\n              name: \"username\",\n              message: \"Double Check This\",\n            },\n            {\n              type: \"manual\",\n              name: \"firstName\",\n              message: \"Triple Check This\",\n            },\n          ]\n\n          inputs.forEach(({ name, type, message }) => {\n            setError(name, { type, message })\n          })\n        }}\n      >\n        Trigger Name Errors\n      </button>\n      <input type=\"submit\" />\n    </form>\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Using NestedValue Type in TypeScript for React Hook Form (Deprecated)\nDESCRIPTION: This example demonstrates the usage of the NestedValue type in React Hook Form, which is now deprecated as of version 7.33.0. It shows how to use NestedValue with Autocomplete and Select components.\nSOURCE: https://github.com/react-hook-form/documentation/blob/master/src/content/ts.mdx#2025-04-09_snippet_21\n\nLANGUAGE: typescript\nCODE:\n```\nimport React from \"react\"\nimport { useForm, NestedValue } from \"react-hook-form\"\nimport { Autocomplete, TextField, Select } from \"@material-ui/core\"\nimport { Autocomplete } from \"@material-ui/lab\"\n\ntype Option = {\n  label: string\n  value: string\n}\n\nconst options = [\n  { label: \"Chocolate\", value: \"chocolate\" },\n  { label: \"Strawberry\", value: \"strawberry\" },\n  { label: \"Vanilla\", value: \"vanilla\" },\n]\n\nexport default function App() {\n  const {\n    register,\n    handleSubmit,\n    watch,\n    setValue,\n    formState: { errors },\n  } = useForm<{\n    autocomplete: NestedValue<Option[]>\n    select: NestedValue<number[]>\n  }>({\n    defaultValues: { autocomplete: [], select: [] },\n  })\n  const onSubmit = handleSubmit((data) => console.log(data))\n\n  React.useEffect(() => {\n    register(\"autocomplete\", {\n      validate: (value) => value.length || \"This is required.\",\n    })\n    register(\"select\", {\n      validate: (value) => value.length || \"This is required.\",\n    })\n  }, [register])\n\n  return (\n    <form onSubmit={onSubmit}>\n      <Autocomplete\n        options={options}\n        getOptionLabel={(option: Option) => option.label}\n        onChange={(e, options) => setValue(\"autocomplete\", options)}\n        renderInput={(params) => (\n          <TextField\n            {...params}\n            error={Boolean(errors?.autocomplete)}\n            helperText={errors?.autocomplete?.message}\n          />\n        )}\n      />\n\n      <Select\n        value=\"\"\n        onChange={(e) => setValue(\"muiSelect\", e.target.value as number[])}\n      >\n        <MenuItem value={10}>Ten</MenuItem>\n        <MenuItem value={20}>Twenty</MenuItem>\n      </Select>\n\n      <input type=\"submit\" />\n    </form>\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Using NestedValue Type in TypeScript for React Hook Form (Type Example)\nDESCRIPTION: This example shows how to use the NestedValue type in TypeScript with React Hook Form for defining nested form values and accessing error messages.\nSOURCE: https://github.com/react-hook-form/documentation/blob/master/src/content/ts.mdx#2025-04-09_snippet_22\n\nLANGUAGE: typescript\nCODE:\n```\nimport { useForm, NestedValue } from \"react-hook-form\"\n\ntype FormValues = {\n  key1: string\n  key2: number\n  key3: NestedValue<{\n    key1: string\n    key2: number\n  }>\n  key4: NestedValue<string[]>\n}\n\nconst {\n  formState: { errors },\n} = useForm<FormValues>()\n\nerrors?.key1?.message // no type error\nerrors?.key2?.message // no type error\nerrors?.key3?.message // no type error\nerrors?.key4?.message // no type error\n```\n\n----------------------------------------\n\nTITLE: Setting Multiple Errors in React Hook Form (JavaScript)\nDESCRIPTION: JavaScript implementation of setting errors for multiple form fields in React Hook Form. Similar to the TypeScript version, it demonstrates triggering errors for username and firstName fields.\nSOURCE: https://github.com/react-hook-form/documentation/blob/master/src/content/docs/useform/seterror.mdx#2025-04-09_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nimport * as React from \"react\"\nimport { useForm } from \"react-hook-form\"\n\nconst App = () => {\n  const {\n    register,\n    handleSubmit,\n    setError,\n    formState: { errors },\n  } = useForm()\n\n  const onSubmit = (data) => {\n    console.log(data)\n  }\n\n  return (\n    <form onSubmit={handleSubmit(onSubmit)}>\n      <label>Username</label>\n      <input {...register(\"username\")} />\n      {errors.username && <p>{errors.username.message}</p>}\n      <label>First Name</label>\n      <input {...register(\"firstName\")} />\n      {errors.firstName && <p>{errors.firstName.message}</p>}\n      <button\n        type=\"button\"\n        onClick={() => {\n          const inputs = [\n            {\n              type: \"manual\",\n              name: \"username\",\n              message: \"Double Check This\",\n            },\n            {\n              type: \"manual\",\n              name: \"firstName\",\n              message: \"Triple Check This\",\n            },\n          ]\n\n          inputs.forEach(({ name, type, message }) =>\n            setError(name, { type, message })\n          )\n        }}\n      >\n        Trigger Name Errors\n      </button>\n      <input type=\"submit\" />\n    </form>\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Installing ErrorMessage Component for React Hook Form\nDESCRIPTION: Command to install the ErrorMessage component package for React Hook Form using npm.\nSOURCE: https://github.com/react-hook-form/documentation/blob/master/src/content/docs/useformstate/errormessage.mdx#2025-04-09_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm install @hookform/error-message\n```\n\n----------------------------------------\n\nTITLE: Installing Testing Dependencies with npm\nDESCRIPTION: Command to install Jest DOM testing library which is needed for React Hook Form because it uses MutationObserver.\nSOURCE: https://github.com/react-hook-form/documentation/blob/master/src/content/advanced-usage.mdx#2025-04-09_snippet_15\n\nLANGUAGE: bash\nCODE:\n```\nnpm install -D @testing-library/jest-dom\n```\n\n----------------------------------------\n\nTITLE: Form Select and Input with Async Validation\nDESCRIPTION: Example of a form with select dropdown and text input using React Hook Form's register function with async validation for product availability check.\nSOURCE: https://github.com/react-hook-form/documentation/blob/master/src/content/docs/useform/register.mdx#2025-04-09_snippet_5\n\nLANGUAGE: jsx\nCODE:\n```\n<option value=\"\">Select...</option>\n<option value=\"A\">Category A</option>\n<option value=\"B\">Category B</option>\n</select>\n\n<input\n  type=\"text\"\n  {...register(\"product\", {\n    validate: {\n      checkAvailability: async (product, { category }) => {\n        if (!category) return \"Choose a category\"\n        if (!product) return \"Specify your product\"\n        const isInStock = await checkProduct(category, product)\n        return isInStock || \"There is no such product\"\n      },\n    },\n  })}\n/>\n\n<input type=\"submit\" />\n```\n\n----------------------------------------\n\nTITLE: Setting Up Jest DOM in setup.js\nDESCRIPTION: Configuration file that imports Jest DOM testing library for setting up the test environment.\nSOURCE: https://github.com/react-hook-form/documentation/blob/master/src/content/advanced-usage.mdx#2025-04-09_snippet_16\n\nLANGUAGE: javascript\nCODE:\n```\nimport \"@testing-library/jest-dom\"\n```\n\n----------------------------------------\n\nTITLE: Setting Up React Native Testing Environment\nDESCRIPTION: Configuration for React Native testing that defines a global window object, which is required for React Hook Form tests in React Native.\nSOURCE: https://github.com/react-hook-form/documentation/blob/master/src/content/advanced-usage.mdx#2025-04-09_snippet_17\n\nLANGUAGE: javascript\nCODE:\n```\nglobal.window = {}\nglobal.window = global\n```\n\n----------------------------------------\n\nTITLE: Basic Input Registration with Destructuring\nDESCRIPTION: Demonstrates how to destructure register function properties for manual input registration and the shorthand syntax using spread operator.\nSOURCE: https://github.com/react-hook-form/documentation/blob/master/src/content/docs/useform/register.mdx#2025-04-09_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\nconst { onChange, onBlur, name, ref } = register('firstName');\n\n<input\n  onChange={onChange} // assign onChange event\n  onBlur={onBlur} // assign onBlur event\n  name={name} // assign name prop\n  ref={ref} // assign ref prop\n/>\n// same as above\n<input {...register('firstName')} />\n```\n\n----------------------------------------\n\nTITLE: Configuring Jest for React Hook Form Tests\nDESCRIPTION: Jest configuration that specifies the setup file to be executed before running tests.\nSOURCE: https://github.com/react-hook-form/documentation/blob/master/src/content/advanced-usage.mdx#2025-04-09_snippet_18\n\nLANGUAGE: javascript\nCODE:\n```\nmodule.exports = {\n  setupFilesAfterEnv: [\"<rootDir>/setup.js\"], // or .ts for TypeScript App\n  // ...other settings\n}\n```\n\n----------------------------------------\n\nTITLE: Installing and Running React Hook Form Documentation\nDESCRIPTION: This command installs the necessary dependencies and starts the development server for the React Hook Form documentation project. It uses pnpm as the package manager.\nSOURCE: https://github.com/react-hook-form/documentation/blob/master/README.md#2025-04-09_snippet_0\n\nLANGUAGE: shellscript\nCODE:\n```\npnpm install && pnpm dev\n```\n\n----------------------------------------\n\nTITLE: Custom Register with Virtual Inputs\nDESCRIPTION: Shows how to register virtual inputs using useEffect and handle controlled components with setValue.\nSOURCE: https://github.com/react-hook-form/documentation/blob/master/src/content/docs/useform/register.mdx#2025-04-09_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\nregister('firstName', { required: true, min: 8 });\n\n<TextInput onTextChange={(value) => setValue('lastChange', value))} />\n```\n\n----------------------------------------\n\nTITLE: Installing Dependencies for React Hook Form Docs\nDESCRIPTION: Command to install project dependencies using pnpm package manager.\nSOURCE: https://github.com/react-hook-form/documentation/blob/master/CONTRIBUTING.md#2025-04-09_snippet_0\n\nLANGUAGE: shellscript\nCODE:\n```\npnpm install\n```\n\n----------------------------------------\n\nTITLE: Starting Local Development Server for React Hook Form Docs\nDESCRIPTION: Command to start a local development server for the documentation project.\nSOURCE: https://github.com/react-hook-form/documentation/blob/master/CONTRIBUTING.md#2025-04-09_snippet_1\n\nLANGUAGE: shellscript\nCODE:\n```\npnpm run dev\n```\n\n----------------------------------------\n\nTITLE: Custom Input Component with Inner Ref\nDESCRIPTION: Example of handling custom input components that use different ref prop names like innerRef or inputRef.\nSOURCE: https://github.com/react-hook-form/documentation/blob/master/src/content/docs/useform/register.mdx#2025-04-09_snippet_8\n\nLANGUAGE: javascript\nCODE:\n```\n// not working, because ref is not assigned\n<TextInput {...register('test')} />\n\nconst firstName = register('firstName', { required: true })\n<TextInput\n  name={firstName.name}\n  onChange={firstName.onChange}\n  onBlur={firstName.onBlur}\n  inputRef={firstName.ref} // you can achieve the same for different ref name such as innerRef\n/>\n```\n\n----------------------------------------\n\nTITLE: Formatting Code for React Hook Form Docs\nDESCRIPTION: Command to ensure proper code formatting for the documentation project.\nSOURCE: https://github.com/react-hook-form/documentation/blob/master/CONTRIBUTING.md#2025-04-09_snippet_2\n\nLANGUAGE: shellscript\nCODE:\n```\npnpm run format\n```\n\n----------------------------------------\n\nTITLE: Building Production Version of React Hook Form Docs\nDESCRIPTION: Command to build the production version of the documentation site.\nSOURCE: https://github.com/react-hook-form/documentation/blob/master/CONTRIBUTING.md#2025-04-09_snippet_3\n\nLANGUAGE: shellscript\nCODE:\n```\npnpm run build\n```\n\n----------------------------------------\n\nTITLE: Advanced TypeScript Types with getValues in React Hook Form\nDESCRIPTION: Demonstrates advanced TypeScript type definitions and usage patterns for both flat and nested form values using getValues.\nSOURCE: https://github.com/react-hook-form/documentation/blob/master/src/content/docs/useform/getvalues.mdx#2025-04-09_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nimport React from \"react\"\nimport { useForm } from \"react-hook-form\"\n\n// Flat input values\ntype Inputs = {\n  key1: string\n  key2: number\n  key3: boolean\n  key4: Date\n}\n\nexport default function App() {\n  const { register, getValues } = useForm<Inputs>()\n\n  getValues()\n\n  return <form />\n}\n\n// Nested input values\ntype Inputs1 = {\n  key1: string\n  key2: number\n  key3: {\n    key1: number\n    key2: boolean\n  }\n  key4: string[]\n}\n\nexport default function Form() {\n  const { register, getValues } = useForm<Inputs1>()\n\n  getValues()\n  // function getValues(): Record<string, unknown>\n  getValues(\"key1\")\n  // function getValues<\"key1\", unknown>(payload: \"key1\"): string\n  getValues(\"key2\")\n  // function getValues<\"key2\", unknown>(payload: \"key2\"): number\n  getValues(\"key3.key1\")\n  // function getValues<\"key3.key1\", unknown>(payload: \"key3.key1\"): unknown\n  getValues<string, number>(\"key3.key1\")\n  // function getValues<string, number>(payload: string): number\n  getValues<string, boolean>(\"key3.key2\")\n  // function getValues<string, boolean>(payload: string): boolean\n  getValues(\"key4\")\n  // function getValues<\"key4\", unknown>(payload: \"key4\"): string[]\n\n  return <form />\n}\n```\n\n----------------------------------------\n\nTITLE: Starting Production Server for React Hook Form Docs\nDESCRIPTION: Command to start a local server for testing the production build of the documentation site.\nSOURCE: https://github.com/react-hook-form/documentation/blob/master/CONTRIBUTING.md#2025-04-09_snippet_4\n\nLANGUAGE: shellscript\nCODE:\n```\npnpm run start\n```\n\n----------------------------------------\n\nTITLE: Running Prettier for React Hook Form Docs\nDESCRIPTION: Command to manually run Prettier for code formatting in the documentation project.\nSOURCE: https://github.com/react-hook-form/documentation/blob/master/CONTRIBUTING.md#2025-04-09_snippet_5\n\nLANGUAGE: shellscript\nCODE:\n```\npnpm run format:fix\n```\n\n----------------------------------------\n\nTITLE: JavaScript Implementation of getValues in React Hook Form\nDESCRIPTION: JavaScript example showing how to use getValues to retrieve form data in different ways without TypeScript typing.\nSOURCE: https://github.com/react-hook-form/documentation/blob/master/src/content/docs/useform/getvalues.mdx#2025-04-09_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nimport { useForm } from \"react-hook-form\"\n\nexport default function App() {\n  const { register, getValues } = useForm()\n\n  return (\n    <form>\n      <input {...register(\"test\")} />\n      <input {...register(\"test1\")} />\n\n      <button\n        type=\"button\"\n        onClick={() => {\n          const values = getValues() // { test: \"test-input\", test1: \"test1-input\" }\n          const singleValue = getValues(\"test\") // \"test-input\"\n          const multipleValues = getValues([\"test\", \"test1\"])\n          // [\"test-input\", \"test1-input\"]\n        }}\n      >\n        Get Values\n      </button>\n    </form>\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: TypeScript Implementation of getValues in React Hook Form\nDESCRIPTION: Complete TypeScript example demonstrating various ways to use getValues method to retrieve form data, including getting all values, single value, and multiple values.\nSOURCE: https://github.com/react-hook-form/documentation/blob/master/src/content/docs/useform/getvalues.mdx#2025-04-09_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport React from \"react\"\nimport { useForm } from \"react-hook-form\"\n\ntype FormInputs = {\n  test: string\n  test1: string\n}\n\nexport default function App() {\n  const { register, getValues } = useForm<FormInputs>()\n\n  return (\n    <form>\n      <input {...register(\"test\")} />\n      <input {...register(\"test1\")} />\n\n      <button\n        type=\"button\"\n        onClick={() => {\n          const values = getValues() // { test: \"test-input\", test1: \"test1-input\" }\n          const singleValue = getValues(\"test\") // \"test-input\"\n          const multipleValues = getValues([\"test\", \"test1\"]) // [\"test-input\", \"test1-input\"]\n        }}\n      >\n        Get Values\n      </button>\n    </form>\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Basic Form Input Registration with React Hook Form\nDESCRIPTION: Example showing basic input registration pattern using React Hook Form's register method.\nSOURCE: https://github.com/react-hook-form/documentation/blob/master/src/content/docs/useform/getvalues.mdx#2025-04-09_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\n<input {...register(\"root.test1\")} />\n\n<input {...register(\"root.test2\")} />\n```\n\n----------------------------------------\n\nTITLE: Using getFieldState with Registered Fields\nDESCRIPTION: Code snippet demonstrating the correct way to use getFieldState with registered fields. Shows that getFieldState will work correctly with a registered field but return false states for non-existent fields.\nSOURCE: https://github.com/react-hook-form/documentation/blob/master/src/content/docs/useform/getfieldstate.mdx#2025-04-09_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\ngetFieldState(\"test\")\ngetFieldState(\"test\") // ✅ register input and return field state\ngetFieldState(\"non-existent-name\") // ❌ will return state as false and error as undefined\n```\n\n----------------------------------------\n\nTITLE: Using getFieldState with useFormContext\nDESCRIPTION: Example showing how to use getFieldState with the useFormContext hook, which also establishes the form state subscription making the second argument unnecessary.\nSOURCE: https://github.com/react-hook-form/documentation/blob/master/src/content/docs/useform/getfieldstate.mdx#2025-04-09_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nconst {\n  register,\n  formState: { isDirty },\n} = useFormContext()\nregister(\"test\")\ngetFieldState(\"test\") // ✅\n```\n\n----------------------------------------\n\nTITLE: Progressive Enhancement Example\nDESCRIPTION: Example demonstrating progressive enhancement usage with the Form component in SSR frameworks.\nSOURCE: https://github.com/react-hook-form/documentation/blob/master/src/content/docs/useform/form.mdx#2025-04-09_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nconst { handleSubmit, control } = useForm({\n  progressive: true\n});\n\n<Form onSubmit={onSubmit} control={control} action=\"/api/test\" method=\"post\">\n  <input {...register(\"test\", { required: true })} />\n</Form>\n```\n\n----------------------------------------\n\nTITLE: Loading Async Default Values in React Hook Form\nDESCRIPTION: Example demonstrating how to use async defaultValues with isLoading state tracking. Shows proper setup for fetching default values asynchronously.\nSOURCE: https://github.com/react-hook-form/documentation/blob/master/src/content/docs/useform/formstate.mdx#2025-04-09_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nconst {\n  formState: { isLoading }\n} = useForm({\n  defaultValues: async () => await fetch('/api')\n})\n```\n\n----------------------------------------\n\nTITLE: Form State Usage in React Hook Form\nDESCRIPTION: Example showing how to access and work with the formState object in React Hook Form to track form state and user interactions\nSOURCE: https://github.com/react-hook-form/documentation/blob/master/src/content/docs/useform/formstate.mdx#2025-04-09_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport { useForm } from \"react-hook-form\";\n\nconst { formState } = useForm({});\n```\n\n----------------------------------------\n\nTITLE: Synchronous Form Submission with JavaScript\nDESCRIPTION: JavaScript example showing form submission with both success and error callbacks, demonstrating how to access both data and event objects.\nSOURCE: https://github.com/react-hook-form/documentation/blob/master/src/content/docs/useform/handlesubmit.mdx#2025-04-09_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nimport { useForm } from \"react-hook-form\"\n\nexport default function App() {\n  const { register, handleSubmit } = useForm()\n  const onSubmit = (data, e) => console.log(data, e)\n  const onError = (errors, e) => console.log(errors, e)\n\n  return (\n    <form onSubmit={handleSubmit(onSubmit, onError)}>\n      <input {...register(\"firstName\")} />\n      <input {...register(\"lastName\")} />\n      <button type=\"submit\">Submit</button>\n    </form>\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Basic Usage of handleSubmit in React Hook Form\nDESCRIPTION: Simple examples showing how to use handleSubmit, including calling it programmatically and using it with async functions.\nSOURCE: https://github.com/react-hook-form/documentation/blob/master/src/content/docs/useform/handlesubmit.mdx#2025-04-09_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nhandleSubmit(onSubmit)()\n\n// You can pass an async function for asynchronous validation.\nhandleSubmit(async (data) => await fetchAPI(data))\n```\n\n----------------------------------------\n\nTITLE: register Function Signature in React Hook Form\nDESCRIPTION: This TypeScript function signature details the register function which is used to register input or select elements with React Hook Form and apply validation rules. The function accepts a name string and optional registration options.\nSOURCE: https://github.com/react-hook-form/documentation/blob/master/src/content/docs/useform/register.mdx#2025-04-09_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n(name: string, options?: RegisterOptions) => ({ ref, name, onChange, onBlur })\n```\n\n----------------------------------------\n\nTITLE: Defining Register Options Table in Markdown\nDESCRIPTION: This snippet defines a markdown table that lists and describes various register options for React Hook Form. It includes options for validation, input type conversion, and event handling.\nSOURCE: https://github.com/react-hook-form/documentation/blob/master/src/content/docs/useform/register.mdx#2025-04-09_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n| Name                                                                          | Description                                                                                                                                                                                                                                                                                                                    |\n| ----------------------------------------------------------------------------- | ------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------ |\n| `ref`<TypeText pre>React.Ref</TypeText>                                       | React element `ref`                                                                                                                                                                                                                                                                                                            |\n| `required`<TypeText pre>boolean</TypeText>                                    | Indicates that the input must have a value before the form can be submitted.<br/><br/>**Note:** This config aligns with web constrained API for required input validation, for object or array type of input use validate function instead.                                                                                    |\n| `maxLength`<TypeText pre>number</TypeText>                                    | The maximum length of the value to accept for this input.                                                                                                                                                                                                                                                                      |\n| `minLength`<TypeText pre>number</TypeText>                                    | The minimum length of the value to accept for this input.                                                                                                                                                                                                                                                                      |\n| `max`<TypeText pre>number</TypeText>                                          | The maximum value to accept for this input.                                                                                                                                                                                                                                                                                    |\n| `min`<TypeText pre>number</TypeText>                                          | The minimum value to accept for this input.                                                                                                                                                                                                                                                                                    |\n| `pattern`<TypeText pre>RegExp</TypeText>                                      | The regex pattern for the input.<br/><br/>**Note:** `RegExp` with the `/g` flag keeps track of the last index where a match occurred.                                                                                                                                                                                          |\n| `validate`<TypeText pre>Function \\|<br/>`Record<string, Function>`</TypeText> | Validate function will be executed on its own without depending on other validation rules included in the required attribute.<br/><br/>**Note:** for object or array input data, it's recommended to use the validate function for validation as the other rules mostly apply to string, array of strings, number and boolean. |\n| `valueAsNumber`<TypeText pre>boolean</TypeText>                               | Returns `Number` normally. If something goes wrong `NaN` will be returned.<br/><ul><li>`valueAs` process is happening **before** validation.</li><li>Only applies to number input, but without any data manipulation.</li><li>Does not transform `defaultValue` or `defaultValues`.</li></ul>                                  |\n| `valueAsDate`<TypeText pre>boolean</TypeText>                                 | Returns `Date` normally. If something goes wrong `Invalid Date` will be returned.<br/><ul><li>`valueAs` process is happening **before** validation.</li><li>Only applies to input.</li><li>Does not transform `defaultValue` or `defaultValues`.</li></ul>                                                                     |\n| `setValueAs`<TypeText pre>\\<T\\>(value: any) => T</TypeText>                   | Return input value by running through the function.<br/><ul><li>`valueAs` process is happening **before** validation. Also, `setValueAs` is ignored if either `valueAsNumber` or `valueAsDate` are true.</li><li>Only applies to text input.</li><li>Does not transform `defaultValue` or `defaultValues`.</li></ul>           |\n| `disabled`<TypeText pre>boolean = false</TypeText>                            | Set `disabled` to `true` will lead input value to be `undefined` and input control to be disabled.<br/><ul><li>`disabled` prop will also omit built-in validation rules.</li><li>For schema validation, you can leverage the `undefined` value returned from input or context object.</li></ul>                                |\n| `onChange`<TypeText pre>(e: SyntheticEvent) => void</TypeText>                | `onChange` function event to be invoked in the change event.                                                                                                                                                                                                                                                                   |\n| `onBlur`<TypeText pre>(e: SyntheticEvent) => void</TypeText>                  | `onBlur` function event to be invoked in the blur event.                                                                                                                                                                                                                                                                       |\n| `value`<TypeText pre>unknown</TypeText>                                       | Set up `value` for the registered input. This prop should be utilised inside `useEffect` or invoke once, each re-run will update or overwrite the input value which you have supplied.                                                                                                                                         |\n| `shouldUnregister`<TypeText pre>boolean</TypeText>                            | Input will be unregistered after unmount and `defaultValues` will be removed as well.<br/><br/>**Note:** this prop should be avoided when using with `useFieldArray` as unregister function gets called after input unmount/remount and reorder.                                                                               |\n| `deps`<TypeText pre>string \\| string[]</TypeText>                             | Validation will be triggered for the dependent inputs, it only limited to register api not trigger.                                                                                                                                                                                                                            |\n```\n\n----------------------------------------\n\nTITLE: Defining Register Options with Error Messages Table in Markdown\nDESCRIPTION: This snippet defines a markdown table that lists and describes register options for React Hook Form, including error message configurations. It focuses on the 'required' option with both boolean and object formats for error messages.\nSOURCE: https://github.com/react-hook-form/documentation/blob/master/src/content/docs/useform/register.mdx#2025-04-09_snippet_2\n\nLANGUAGE: markdown\nCODE:\n```\n| Name                                                                                                           | Description                                                                                                                                                                                                                                                                                                                    |\n| -------------------------------------------------------------------------------------------------------------- | ------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------ |\n| `ref`<TypeText pre>React.Ref</TypeText>                                                                        | React element `ref`                                                                                                                                                                                                                                                                                                            |\n| `required`<TypeText pre>string \\|<br/><PrettyObject value={{value: 'boolean', message: 'string'}}/></TypeText> | Indicates that the input must have a value before the form can be submitted. <br/><br/>**Note:** This config aligns with web constrained API for required input validation, for object or array type of input use validate function instead.                                                                                   |\n```\n\n----------------------------------------\n\nTITLE: Implementing Vest Validation with React Hook Form\nDESCRIPTION: This snippet shows how to use Vest for schema validation with React Hook Form. It sets up a form with username and password fields, using vestResolver to integrate Vest schema validation.\nSOURCE: https://github.com/react-hook-form/documentation/blob/master/src/content/docs/useform.mdx#2025-04-09_snippet_12\n\nLANGUAGE: javascript\nCODE:\n```\nimport * as React from \"react\"\nimport { useForm } from \"react-hook-form\"\nimport { vestResolver } from \"@hookform/resolvers/vest\"\nimport vest, { test, enforce } from \"vest\"\n\nconst validationSuite = vest.create((data = {}) => {\n  test(\"username\", \"Username is required\", () => {\n    enforce(data.username).isNotEmpty()\n  })\n\n  test(\"username\", \"Must be longer than 3 chars\", () => {\n    enforce(data.username).longerThan(3)\n  })\n\n  test(\"password\", \"Password is required\", () => {\n    enforce(data.password).isNotEmpty()\n  })\n\n  test(\"password\", \"Password must be at least 5 chars\", () => {\n    enforce(data.password).longerThanOrEquals(5)\n  })\n\n  test(\"password\", \"Password must contain a digit\", () => {\n    enforce(data.password).matches(/[0-9]/)\n  })\n\n  test(\"password\", \"Password must contain a symbol\", () => {\n    enforce(data.password).matches(/[^A-Za-z0-9]/)\n  })\n})\n\nconst App = () => {\n  const { register, handleSubmit } = useForm({\n    resolver: vestResolver(validationSuite),\n  })\n\n  return (\n    <form onSubmit={handleSubmit((data) => console.log(data))}>\n      <input {...register(\"username\")} />\n      <input {...register(\"password\")} />\n      <input type=\"submit\" />\n    </form>\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Ajv Validation with React Hook Form\nDESCRIPTION: This example demonstrates how to use Ajv for schema validation with React Hook Form. It creates a form with username and password fields, using ajvResolver to integrate Ajv schema validation.\nSOURCE: https://github.com/react-hook-form/documentation/blob/master/src/content/docs/useform.mdx#2025-04-09_snippet_11\n\nLANGUAGE: javascript\nCODE:\n```\nimport { useForm } from \"react-hook-form\"\nimport { ajvResolver } from \"@hookform/resolvers/ajv\"\n\n// must use `minLength: 1` to implement required field\nconst schema = {\n  type: \"object\",\n  properties: {\n    username: {\n      type: \"string\",\n      minLength: 1,\n      errorMessage: { minLength: \"username field is required\" },\n    },\n    password: {\n      type: \"string\",\n      minLength: 1,\n      errorMessage: { minLength: \"password field is required\" },\n    },\n  },\n  required: [\"username\", \"password\"],\n  additionalProperties: false,\n}\n\nconst App = () => {\n  const {\n    register,\n    handleSubmit,\n    formState: { errors },\n  } = useForm({\n    resolver: ajvResolver(schema),\n  })\n\n  return (\n    <form onSubmit={handleSubmit((data) => console.log(data))}>\n      <input {...register(\"username\")} />\n      {errors.username && <p>{errors.username.message}</p>}\n      <input {...register(\"password\")} />\n      {errors.password && <p>{errors.password.message}</p>}\n      <button type=\"submit\">submit</button>\n    </form>\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Joi Validation with React Hook Form\nDESCRIPTION: This snippet illustrates how to use Joi for schema validation with React Hook Form. It sets up a form with name and age fields, using joiResolver to integrate Joi schema validation.\nSOURCE: https://github.com/react-hook-form/documentation/blob/master/src/content/docs/useform.mdx#2025-04-09_snippet_10\n\nLANGUAGE: typescript\nCODE:\n```\nimport React from \"react\";\nimport { useForm } from \"react-hook-form\";\nimport { joiResolver } from \"@hookform/resolvers/joi\";\nimport Joi from \"joi\";\n\ninterface IFormInput {\n  name: string;\n  age: number;\n}\n\nconst schema = Joi.object({\n  name: Joi.string().required(),\n  age: Joi.number().required()\n});\n\nconst App = () => {\n  const { register, handleSubmit, formState: { errors } } = useForm<IFormInput>({\n    resolver: joiResolver(schema)\n  });\n  const onSubmit = (data: IFormInput) => {\n    console.log(data);\n  };\n\n  return (\n    <form onSubmit={handleSubmit(onSubmit)}>\n      <input {...register(\"name\"} />\n      <input type=\"number\" {...register(\"age\"} />\n      <input type=\"submit\" />\n    </form>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Native Form Validation Implementation\nDESCRIPTION: Example of implementing browser native validation using shouldUseNativeValidation option in React Hook Form. Shows how to set up custom validation messages.\nSOURCE: https://github.com/react-hook-form/documentation/blob/master/src/content/docs/useform.mdx#2025-04-09_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nimport { useForm } from \"react-hook-form\"\n\nexport default function App() {\n  const { register, handleSubmit } = useForm({\n    shouldUseNativeValidation: true,\n  })\n  const onSubmit = async (data) => {\n    console.log(data)\n  }\n\n  return (\n    <form onSubmit={handleSubmit(onSubmit)}>\n      <input\n        {...register(\"firstName\", {\n          required: \"Please enter your first name.\",\n        })} // custom message\n      />\n      <input type=\"submit\" />\n    </form>\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Handling Server Errors with useForm in React Hook Form\nDESCRIPTION: Illustrates how to use the errors prop to update form errors state reactively, typically with errors returned from a server.\nSOURCE: https://github.com/react-hook-form/documentation/blob/master/src/content/docs/useform.mdx#2025-04-09_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nfunction App() {\n  const { errors, data } = useFetch(\"/api\")\n\n  useForm({\n    errors, // will get updated once errors returns\n  })\n}\n```\n\n----------------------------------------\n\nTITLE: Using the values Prop in useForm for React Hook Form\nDESCRIPTION: Shows how to use the values prop to update form values reactively, either from external state or server data. It also demonstrates how values can overwrite defaultValues.\nSOURCE: https://github.com/react-hook-form/documentation/blob/master/src/content/docs/useform.mdx#2025-04-09_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\n// set default value sync\nfunction App({ values }) {\n  useForm({\n    values, // will get updated when values props updates\n  })\n}\n\nfunction App() {\n  const values = useFetch(\"/api\")\n\n  useForm({\n    defaultValues: {\n      firstName: \"\",\n      lastName: \"\",\n    },\n    values, // will get updated once values returns\n  })\n}\n```\n\n----------------------------------------\n\nTITLE: Installing Validation Resolver Dependencies\nDESCRIPTION: Command to install the resolvers package for external validation library integration with React Hook Form.\nSOURCE: https://github.com/react-hook-form/documentation/blob/master/src/content/docs/useform.mdx#2025-04-09_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\nnpm install @hookform/resolvers\n```\n\n----------------------------------------\n\nTITLE: Implementing Single Error Message with ErrorMessage in TypeScript\nDESCRIPTION: Example of using the ErrorMessage component to display a single error message in a React Hook Form with TypeScript. It demonstrates basic usage and render prop pattern.\nSOURCE: https://github.com/react-hook-form/documentation/blob/master/src/content/docs/useformstate/errormessage.mdx#2025-04-09_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport React from \"react\"\nimport { useForm } from \"react-hook-form\"\nimport { ErrorMessage } from \"@hookform/error-message\"\n\ninterface FormInputs {\n  singleErrorInput: string\n}\n\nexport default function App() {\n  const {\n    register,\n    formState: { errors },\n    handleSubmit,\n  } = useForm<FormInputs>()\n  const onSubmit = (data: FormInputs) => console.log(data)\n\n  return (\n    <form onSubmit={handleSubmit(onSubmit)}>\n      <input\n        {...register(\"singleErrorInput\", { required: \"This is required.\" })}\n      />\n      <ErrorMessage errors={errors} name=\"singleErrorInput\" />\n\n      <ErrorMessage\n        errors={errors}\n        name=\"singleErrorInput\"\n        render={({ message }) => <p>{message}</p>}\n      />\n\n      <input type=\"submit\" />\n    </form>\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Single Error Message with ErrorMessage in JavaScript\nDESCRIPTION: Example of using the ErrorMessage component to display a single error message in a React Hook Form with JavaScript. It shows basic usage and render prop pattern.\nSOURCE: https://github.com/react-hook-form/documentation/blob/master/src/content/docs/useformstate/errormessage.mdx#2025-04-09_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nimport React from \"react\"\nimport { useForm } from \"react-hook-form\"\nimport { ErrorMessage } from \"@hookform/error-message\"\n\nexport default function App() {\n  const {\n    register,\n    formState: { errors },\n    handleSubmit,\n  } = useForm()\n  const onSubmit = (data) => console.log(data)\n\n  return (\n    <form onSubmit={handleSubmit(onSubmit)}>\n      <input\n        {...register(\"singleErrorInput\", { required: \"This is required.\" })}\n      />\n      <ErrorMessage errors={errors} name=\"singleErrorInput\" />\n\n      <ErrorMessage\n        errors={errors}\n        name=\"singleErrorInput\"\n        render={({ message }) => <p>{message}</p>}\n      />\n\n      <input type=\"submit\" />\n    </form>\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Accessing FormState in React Hook Form\nDESCRIPTION: This snippet demonstrates the correct way to access formState using the useFormState hook. It emphasizes the importance of deconstructing the formState object to enable proper subscription.\nSOURCE: https://github.com/react-hook-form/documentation/blob/master/src/content/docs/useformstate.mdx#2025-04-09_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nconst { isDirty } = useFormState() // ✅\nconst formState = useFormState() // ❌ should deconstruct the formState\n```\n\n----------------------------------------\n\nTITLE: Tracking Dirty State with setValue in React Hook Form\nDESCRIPTION: Demonstrates how the isDirty flag changes when using setValue. Shows that isDirty becomes true when a field value is changed from its default value, and becomes false when the value returns to match the default value.\nSOURCE: https://github.com/react-hook-form/documentation/blob/master/src/content/docs/useformstate.mdx#2025-04-09_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nconst {\n  formState: { isDirty, dirtyFields },\n  setValue\n} = useForm({ defaultValues: { test: \"\" } })\n\n// isDirty: true ✅\nsetValue('test', 'change')\n\n// isDirty: false because there getValues() === defaultValues ❌\nsetValue('test', '')\n```\n\n----------------------------------------\n\nTITLE: Controlled Input Implementation with React Hook Form Controller\nDESCRIPTION: Shows how to implement a controlled input using React Hook Form's Controller component for advanced form control scenarios.\nSOURCE: https://github.com/react-hook-form/documentation/blob/master/src/content/faqs.mdx#2025-04-09_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nimport { useForm, Controller } from \"react-hook-form\"\n\nfunction App() {\n  const { control } = useForm()\n\n  return (\n    <Controller\n      render={({ field }) => <input {...field} />}\n      name=\"firstName\"\n      control={control}\n      defaultValue=\"\"\n    />\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: React Native Integration with React Hook Form\nDESCRIPTION: Shows how to integrate React Hook Form with React Native components using the Controller wrapper for form inputs.\nSOURCE: https://github.com/react-hook-form/documentation/blob/master/src/content/get-started.mdx#2025-04-09_snippet_12\n\nLANGUAGE: javascript\nCODE:\n```\nimport { Text, View, TextInput, Button, Alert } from \"react-native\"\nimport { useForm, Controller } from \"react-hook-form\"\n\nexport default function App() {\n  const {\n    control,\n    handleSubmit,\n    formState: { errors },\n  } = useForm({\n    defaultValues: {\n      firstName: \"\",\n      lastName: \"\",\n    },\n  })\n  const onSubmit = (data) => console.log(data)\n\n  return (\n    <View>\n      <Controller\n        control={control}\n        rules={{\n          required: true,\n        }}\n        render={({ field: { onChange, onBlur, value } }) => (\n          <TextInput\n            placeholder=\"First name\"\n            onBlur={onBlur}\n            onChangeText={onChange}\n            value={value}\n          />\n        )}\n        name=\"firstName\"\n      />\n      {errors.firstName && <Text>This is required.</Text>}\n\n      <Controller\n        control={control}\n        rules={{\n          maxLength: 100,\n        }}\n        render={({ field: { onChange, onBlur, value } }) => (\n          <TextInput\n            placeholder=\"Last name\"\n            onBlur={onBlur}\n            onChangeText={onChange}\n            value={value}\n          />\n        )}\n        name=\"lastName\"\n      />\n\n      <Button title=\"Submit\" onPress={handleSubmit(onSubmit)} />\n    </View>\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Integrating with Existing Forms\nDESCRIPTION: Shows how to integrate React Hook Form with existing form components using refs and custom input components. Includes examples of forwarding refs and handling component registration.\nSOURCE: https://github.com/react-hook-form/documentation/blob/master/src/content/get-started.mdx#2025-04-09_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Path, useForm, UseFormRegister, SubmitHandler } from \"react-hook-form\"\n\ninterface IFormValues {\n  \"First Name\": string\n  Age: number\n}\n\ntype InputProps = {\n  label: Path<IFormValues>\n  register: UseFormRegister<IFormValues>\n  required: boolean\n}\n\n// The following component is an example of your existing Input Component\nconst Input = ({ label, register, required }: InputProps) => (\n  <>\n    <label>{label}</label>\n    <input {...register(label, { required })} />\n  </>\n)\n\n// you can use React.forwardRef to pass the ref too\nconst Select = React.forwardRef<\n  HTMLSelectElement,\n  { label: string } & ReturnType<UseFormRegister<IFormValues>>\n>(({ onChange, onBlur, name, label }, ref) => (\n  <>\n    <label>{label}</label>\n    <select name={name} ref={ref} onChange={onChange} onBlur={onBlur}>\n      <option value=\"20\">20</option>\n      <option value=\"30\">30</option>\n    </select>\n  </>\n))\n\nconst App = () => {\n  const { register, handleSubmit } = useForm<IFormValues>()\n\n  const onSubmit: SubmitHandler<IFormValues> = (data) => {\n    alert(JSON.stringify(data))\n  }\n\n  return (\n    <form onSubmit={handleSubmit(onSubmit)}>\n      <Input label=\"First Name\" register={register} required />\n      <Select label=\"Age\" {...register(\"Age\")} />\n      <input type=\"submit\" />\n    </form>\n  )\n```\n\nLANGUAGE: javascript\nCODE:\n```\nimport { useForm } from \"react-hook-form\"\n\n// The following component is an example of your existing Input Component\nconst Input = ({ label, register, required }) => (\n  <>\n    <label>{label}</label>\n    <input {...register(label, { required })} />\n  </>\n)\n\n// you can use React.forwardRef to pass the ref too\nconst Select = React.forwardRef(({ onChange, onBlur, name, label }, ref) => (\n  <>\n    <label>{label}</label>\n    <select name={name} ref={ref} onChange={onChange} onBlur={onBlur}>\n      <option value=\"20\">20</option>\n      <option value=\"30\">30</option>\n    </select>\n  </>\n))\n\nconst App = () => {\n  const { register, handleSubmit } = useForm()\n\n  const onSubmit = (data) => {\n    alert(JSON.stringify(data))\n  }\n\n  return (\n    <form onSubmit={handleSubmit(onSubmit)}>\n      <Input label=\"First Name\" register={register} required />\n      <Select label=\"Age\" {...register(\"Age\")} />\n      <input type=\"submit\" />\n    </form>\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Form Field Registration\nDESCRIPTION: Shows how to register form fields with React Hook Form including select dropdowns and handling enums in TypeScript. Demonstrates basic field registration and form submission.\nSOURCE: https://github.com/react-hook-form/documentation/blob/master/src/content/get-started.mdx#2025-04-09_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport ReactDOM from \"react-dom\"\nimport { useForm, SubmitHandler } from \"react-hook-form\"\n\nenum GenderEnum {\n  female = \"female\",\n  male = \"male\",\n  other = \"other\",\n}\n\ninterface IFormInput {\n  firstName: string\n  gender: GenderEnum\n}\n\nexport default function App() {\n  const { register, handleSubmit } = useForm<IFormInput>()\n  const onSubmit: SubmitHandler<IFormInput> = (data) => console.log(data)\n\n  return (\n    <form onSubmit={handleSubmit(onSubmit)}>\n      <label>First Name</label>\n      <input {...register(\"firstName\")} />\n      <label>Gender Selection</label>\n      <select {...register(\"gender\")}>\n        <option value=\"female\">female</option>\n        <option value=\"male\">male</option>\n        <option value=\"other\">other</option>\n      </select>\n      <input type=\"submit\" />\n    </form>\n  )\n```\n\nLANGUAGE: javascript\nCODE:\n```\nimport { useForm } from \"react-hook-form\"\n\nexport default function App() {\n  const { register, handleSubmit } = useForm()\n  const onSubmit = (data) => console.log(data)\n\n  return (\n    <form onSubmit={handleSubmit(onSubmit)}>\n      <input {...register(\"firstName\")} />\n      <select {...register(\"gender\")}>\n        <option value=\"female\">female</option>\n        <option value=\"male\">male</option>\n        <option value=\"other\">other</option>\n      </select>\n      <input type=\"submit\" />\n    </form>\n  )\n```\n\n----------------------------------------\n\nTITLE: Installing React Hook Form\nDESCRIPTION: Command to install React Hook Form package via npm.\nSOURCE: https://github.com/react-hook-form/documentation/blob/master/src/content/get-started.mdx#2025-04-09_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm install react-hook-form\n```\n\n----------------------------------------\n\nTITLE: Handling Form Submission Errors with SubmitErrorHandler in TypeScript\nDESCRIPTION: This example demonstrates how to use the SubmitErrorHandler type to properly handle form validation errors during submission. It provides typed error handling for form validation failures.\nSOURCE: https://github.com/react-hook-form/documentation/blob/master/src/content/ts.mdx#2025-04-09_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport React from \"react\"\nimport { useForm, SubmitHandler, SubmitErrorHandler } from \"react-hook-form\"\n\ntype FormValues = {\n  firstName: string\n  lastName: string\n  email: string\n}\n\nexport default function App() {\n  const { register, handleSubmit } = useForm<FormValues>()\n  const onSubmit: SubmitHandler<FormValues> = (data) => console.log(data)\n  const onError: SubmitErrorHandler<FormValues> = (errors) => console.log(errors);\n\n  return (\n    <form onSubmit={handleSubmit(onSubmit, onError)}>\n      <input {...register(\"firstName\"), { required: true }} />\n      <input {...register(\"lastName\"), { minLength: 2 }} />\n      <input type=\"email\" {...register(\"email\")} />\n\n      <input type=\"submit\" />\n    </form>\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Using Control Type for Form Watching in React Hook Form\nDESCRIPTION: This example shows how to use the Control type to pass form control between components. It demonstrates field watching in an isolated component to prevent unnecessary re-renders.\nSOURCE: https://github.com/react-hook-form/documentation/blob/master/src/content/ts.mdx#2025-04-09_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nimport { useForm, useWatch, Control } from \"react-hook-form\"\n\ntype FormValues = {\n  firstName: string\n  lastName: string\n}\n\nfunction IsolateReRender({ control }: { control: Control<FormValues> }) {\n  const firstName = useWatch({\n    control,\n    name: \"firstName\",\n    defaultValue: \"default\",\n  })\n\n  return <div>{firstName}</div>\n}\n\nexport default function App() {\n  const { register, control, handleSubmit } = useForm<FormValues>()\n  const onSubmit = handleSubmit((data) => console.log(data))\n\n  return (\n    <form onSubmit={onSubmit}>\n      <input {...register(\"firstName\")} />\n      <input {...register(\"lastName\")} />\n      <IsolateReRender control={control} />\n\n      <input type=\"submit\" />\n    </form>\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: UseFieldArrayReturn Type Definition for Array Field Management\nDESCRIPTION: This type definition specifies the return object from useFieldArray hook. It includes methods for manipulating form arrays like append, prepend, insert, remove, and move operations.\nSOURCE: https://github.com/react-hook-form/documentation/blob/master/src/content/ts.mdx#2025-04-09_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\nexport type UseFieldArrayReturn<\n  TFieldValues extends FieldValues = FieldValues,\n  TFieldArrayName extends\n    FieldArrayPath<TFieldValues> = FieldArrayPath<TFieldValues>,\n  TKeyName extends string = \"id\",\n> = {\n  swap: UseFieldArraySwap\n  move: UseFieldArrayMove\n  prepend: UseFieldArrayPrepend<TFieldValues, TFieldArrayName>\n  append: UseFieldArrayAppend<TFieldValues, TFieldArrayName>\n  remove: UseFieldArrayRemove\n  insert: UseFieldArrayInsert<TFieldValues, TFieldArrayName>\n  update: UseFieldArrayUpdate<TFieldValues, TFieldArrayName>\n  replace: UseFieldArrayReplace<TFieldValues, TFieldArrayName>\n  fields: FieldArrayWithId<TFieldValues, TFieldArrayName, TKeyName>[]\n}\n```\n\n----------------------------------------\n\nTITLE: UseControllerProps Type Definition for Controlled Component Configuration\nDESCRIPTION: This type definition specifies the configuration options for the useController hook. It includes options for field name, validation rules, default values, and control reference.\nSOURCE: https://github.com/react-hook-form/documentation/blob/master/src/content/ts.mdx#2025-04-09_snippet_10\n\nLANGUAGE: typescript\nCODE:\n```\nexport type UseControllerProps<\n  TFieldValues extends FieldValues = FieldValues,\n  TName extends FieldPath<TFieldValues> = FieldPath<TFieldValues>,\n> = {\n  name: TName\n  rules?: Omit<\n    RegisterOptions<TFieldValues, TName>,\n    \"valueAsNumber\" | \"valueAsDate\" | \"setValueAs\" | \"disabled\"\n  >\n  shouldUnregister?: boolean\n  defaultValue?: FieldPathValue<TFieldValues, TName>\n  control?: Control<TFieldValues>\n  disabled?: boolean\n}\n```\n\n----------------------------------------\n\nTITLE: Defining FieldArrayWithId Type in TypeScript for React Hook Form\nDESCRIPTION: This type represents a field array with an ID in React Hook Form. It extends the FieldArray type and includes a record with a specified key name.\nSOURCE: https://github.com/react-hook-form/documentation/blob/master/src/content/ts.mdx#2025-04-09_snippet_17\n\nLANGUAGE: typescript\nCODE:\n```\nexport type FieldArrayWithId<\n  TFieldValues extends FieldValues = FieldValues,\n  TFieldArrayName extends\n    FieldArrayPath<TFieldValues> = FieldArrayPath<TFieldValues>,\n  TKeyName extends string = \"id\",\n> = FieldArray<TFieldValues, TFieldArrayName> & Record<TKeyName, string>\n```\n\n----------------------------------------\n\nTITLE: Defining FormStateProxy Type in TypeScript for React Hook Form\nDESCRIPTION: This type represents the form state proxy in React Hook Form. It includes properties for tracking form state such as dirty fields, touched fields, and validation status.\nSOURCE: https://github.com/react-hook-form/documentation/blob/master/src/content/ts.mdx#2025-04-09_snippet_20\n\nLANGUAGE: typescript\nCODE:\n```\nexport type FormStateProxy<TFieldValues extends FieldValues = FieldValues> = {\n  isDirty: boolean\n  isValidating: boolean\n  dirtyFields: FieldNamesMarkedBoolean<TFieldValues>\n  touchedFields: FieldNamesMarkedBoolean<TFieldValues>\n  validatingFields: FieldNamesMarkedBoolean<TFieldValues>\n  errors: boolean\n  isValid: boolean\n}\n```\n\n----------------------------------------\n\nTITLE: Form Input Components for Smart Form\nDESCRIPTION: Implementation of Input and Select components that work with the Smart Form component by accepting register props from the parent Form component.\nSOURCE: https://github.com/react-hook-form/documentation/blob/master/src/content/advanced-usage.mdx#2025-04-09_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\nexport function Input({ register, name, ...rest }) {\n  return <input {...register(name)} {...rest} />\n}\n\nexport function Select({ register, options, name, ...rest }) {\n  return (\n    <select {...register(name)} {...rest}>\n      {options.map((value) => (\n        <option key={value} value={value}>\n          {value}\n        </option>\n      ))}\n    </select>\n  )\n}\n```"
  }
]