[
  {
    "owner": "coinbase",
    "repo": "onchainkit",
    "content": "TITLE: Migrating to onStatus Prop for Unified Swap Lifecycle Tracking in OnchainKit (TypeScript)\nDESCRIPTION: This TypeScript example illustrates the preferred lifecycle event handling pattern for the <Swap> component using the onStatus prop. The handler, using useCallback, receives detailed LifeCycleStatus updates for various states (e.g., init, amountChange, transactionPending, success). Inputs include address, swappableTokens, ETHToken, USDCToken, and a type-safe handleOnStatus function. Output is status logging. It streamlines tracking over separate onError/onSuccess listeners.\nSOURCE: https://github.com/coinbase/onchainkit/blob/main/packages/onchainkit/CHANGELOG.md#_snippet_1\n\nLANGUAGE: TypeScript\nCODE:\n```\nconst handleOnStatus = useCallback((lifeCycleStatus: LifeCycleStatus) => {\n  console.log('Status:', lifeCycleStatus);\n}, []);\n\n...\n\n<Swap\n  address={address}\n  onStatus={handleOnStatus}\n>\n  <SwapAmountInput\n    label=\"Sell\"\n    swappableTokens={swappableTokens}\n    token={ETHToken}\n    type=\"from\"\n  />\n  <SwapToggleButton />\n  <SwapAmountInput\n    label=\"Buy\"\n    swappableTokens={swappableTokens}\n    token={USDCToken}\n    type=\"to\"\n  />\n  <SwapButton />\n  <SwapMessage />\n</Swap>\n\n```\n\n----------------------------------------\n\nTITLE: Implementing Separate onError and onSuccess Callbacks for SwapButton in OnchainKit (TypeScript)\nDESCRIPTION: This React/TypeScript snippet demonstrates registering custom error and success handlers for the <SwapButton> component using the useCallback hook. The handlers manage console logging for both error and response. Dependencies include React, OnchainKit components, and valid swappableTokens, ETHToken, USDCToken, and address parameters. The key input props are address and the event listeners, while outputs are log statements. Listeners must be attached directly to <SwapButton>.\nSOURCE: https://github.com/coinbase/onchainkit/blob/main/packages/onchainkit/CHANGELOG.md#_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\nconst handleOnError = useCallback((error) => {\n  console.log(error);\n}, []);\nconst handleOnSuccess = useCallback((response) => {\n  console.log(response);\n}, []);\n\n...\n\n<Swap address={address}>\n  <SwapAmountInput\n    label=\"Sell\"\n    swappableTokens={swappableTokens}\n    token={ETHToken}\n    type=\"from\"\n  />\n  <SwapToggleButton />\n  <SwapAmountInput\n    label=\"Buy\"\n    swappableTokens={swappableTokens}\n    token={USDCToken}\n    type=\"to\"\n  />\n  <SwapButton\n    onError={handleOnError}\n    onSuccess={handleOnSuccess}\n  />\n  <SwapMessage />\n</Swap>\n\n```\n\n----------------------------------------\n\nTITLE: Defining the LifeCycleStatus Union Type for Swap Lifecycle Events in OnchainKit (TypeScript)\nDESCRIPTION: This code snippet provides the TypeScript definition for the LifeCycleStatus discriminated union, enabling strong typing for Swap component lifecycle events. It enumerates statuses including init, error, amountChange, transactionPending, transactionApproved, and success, each with corresponding statusData. Dependencies for this type include SwapError, Hex, and TransactionReceipt types. Expected input is a statusName and optional statusData object keyed by statusName; output is type safety for event handling.\nSOURCE: https://github.com/coinbase/onchainkit/blob/main/packages/onchainkit/CHANGELOG.md#_snippet_2\n\nLANGUAGE: TypeScript\nCODE:\n```\nexport type LifeCycleStatus =\n  | {\n      statusName: 'init';\n      statusData: null;\n    }\n  | {\n      statusName: 'error';\n      statusData: SwapError;\n    }\n  | {\n      statusName: 'amountChange';\n      statusData: null;\n    }\n  | {\n      statusName: 'transactionPending';\n      statusData: null;\n    }\n  | {\n      statusName: 'transactionApproved';\n      statusData: {\n        transactionHash: Hex;\n        transactionType: 'ERC20' | 'Permit2';\n      };\n    }\n  | {\n      statusName: 'success';\n      statusData: {\n        transactionReceipt: TransactionReceipt;\n      };\n    };\n```\n\n----------------------------------------\n\nTITLE: Transaction Response Type Definition in TypeScript\nDESCRIPTION: TypeScript type definition for handling transaction responses, supporting both EOA and Smart Wallet scenarios with multiple receipts.\nSOURCE: https://github.com/coinbase/onchainkit/blob/main/packages/onchainkit/CHANGELOG.md#_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\ntype TransactionResponse = {\n  transactionReceipts: TransactionReceipt[];\n};\n```\n\n----------------------------------------\n\nTITLE: Migrating getFrameMessage Usage with Neynar API Key - TypeScript\nDESCRIPTION: This snippet demonstrates the previous and updated usage of the getFrameMessage function in the OnchainKit library. The new version requires passing a Neynar API key to access enhanced validation and obtain additional Frame data, minimizing dependencies. Input is the HTTP request body and an options object containing neynarApiKey; output includes isValid and message. Requires @coinbase/onchainkit and a valid API key.\nSOURCE: https://github.com/coinbase/onchainkit/blob/main/packages/onchainkit/CHANGELOG.md#_snippet_10\n\nLANGUAGE: TypeScript\nCODE:\n```\nimport { getFrameMessage } from '@coinbase/onchainkit';\n\n...\nconst { isValid, message} = await getFrameMessage(body);\n```\n\nLANGUAGE: TypeScript\nCODE:\n```\nimport { getFrameMessage } from '@coinbase/onchainkit';\n\n...\nconst { isValid, message } = await getFrameMessage(body , {\n  neynarApiKey: 'NEYNAR_ONCHAIN_KIT'\n});\n```\n\n----------------------------------------\n\nTITLE: Migrating getFrameValidatedMessage to getFrameMessage - TypeScript\nDESCRIPTION: These snippets document renaming and updated return signatures for validating Farcaster Frame messages. getFrameValidatedMessage is deprecated in favor of getFrameMessage, which now returns a detailed object including isValid and message. Example type definitions clarify expected structure and returned data. Requires @coinbase/onchainkit. Input is a body object; output is a typed response.\nSOURCE: https://github.com/coinbase/onchainkit/blob/main/packages/onchainkit/CHANGELOG.md#_snippet_13\n\nLANGUAGE: TypeScript\nCODE:\n```\nimport { getFrameValidatedMessage } from '@coinbase/onchainkit';\n\n...\n\nconst validatedMessage = await getFrameValidatedMessage(body);\n```\n\nLANGUAGE: TypeScript\nCODE:\n```\ntype Promise<Message | undefined>\n```\n\nLANGUAGE: TypeScript\nCODE:\n```\nimport { getFrameMessage } from '@coinbase/onchainkit';\n\n...\n\nconst { isValid, message } = await getFrameMessage(body);\n```\n\nLANGUAGE: TypeScript\nCODE:\n```\ntype Promise<FrameValidationResponse>;\n\ntype FrameValidationResponse =\n  | { isValid: true; message: FrameData }\n  | { isValid: false; message: undefined };\n\ninterface FrameData {\n  fid: number;\n  url: string;\n  messageHash: string;\n  timestamp: number;\n  network: number;\n  buttonIndex: number;\n  castId: {\n   fid: number;\n   hash: string;\n };\n}\n```\n\n----------------------------------------\n\nTITLE: Retrieving Frame Account Address from Message - TypeScript\nDESCRIPTION: This sequence shows transition of getFrameAccountAddress to use the validated Farcaster Frame message rather than the raw body. The recommended approach is to call getFrameMessage for validation, then supply its message output to getFrameAccountAddress. Both snippets require @coinbase/onchainkit, and after the change, the new approach is more type-safe and composable. Inputs: body (before), message (after); output is a string account address.\nSOURCE: https://github.com/coinbase/onchainkit/blob/main/packages/onchainkit/CHANGELOG.md#_snippet_11\n\nLANGUAGE: TypeScript\nCODE:\n```\nimport { getFrameAccountAddress } from '@coinbase/onchainkit';\n\n...\n\nconst accountAddress = await getFrameAccountAddress(body);\n```\n\nLANGUAGE: TypeScript\nCODE:\n```\nimport { getFrameAccountAddress } from '@coinbase/onchainkit';\n\n...\nconst { isValid, message } = await getFrameMessage(body);\nconst accountAddress = await getFrameAccountAddress(message);\n```\n\n----------------------------------------\n\nTITLE: Updating Frame Metadata with Extensible Buttons - TypeScript\nDESCRIPTION: These snippets show transition of getFrameMetadata usage: before, a simple array of button labels was provided, now the metadata accepts button objects for extensible actions. Type definitions for FrameMetadata have changed, accommodating new fields and optionals. Both require @coinbase/onchainkit. Inputs are metadata config objects; outputs are properly typed metadata for use in Frame APIs.\nSOURCE: https://github.com/coinbase/onchainkit/blob/main/packages/onchainkit/CHANGELOG.md#_snippet_12\n\nLANGUAGE: TypeScript\nCODE:\n```\nimport { getFrameMetadata } from '@coinbase/onchainkit';\n\n...\nconst frameMetadata = getFrameMetadata({\n  buttons: ['boat'],\n  image: 'https://build-onchain-apps.vercel.app/release/v-0-17.png',\n  post_url: 'https://build-onchain-apps.vercel.app/api/frame',\n});\n```\n\nLANGUAGE: TypeScript\nCODE:\n```\ntype FrameMetadata = {\n  buttons: string[];\n  image: string;\n  post_url: string;\n};\n```\n\nLANGUAGE: TypeScript\nCODE:\n```\nimport { frameMetadata } from '@coinbase/onchainkit';\n\n...\nconst frameMetadata = getFrameMetadata({\n  buttons: [\n    {\n      label: 'We love BOAT',\n    },\n  ],\n  image: 'https://build-onchain-apps.vercel.app/release/v-0-17.png',\n  post_url: 'https://build-onchain-apps.vercel.app/api/frame',\n});\n```\n\nLANGUAGE: TypeScript\nCODE:\n```\ntype FrameMetadata = {\n  // A list of strings which are the label for the buttons in the frame (max 4 buttons).\n  buttons: [Button, ...Button[]];\n  // An image which must be smaller than 10MB and should have an aspect ratio of 1.91:1\n  image: string;\n  // A valid POST URL to send the Signature Packet to.\n  post_url: string;\n  // A period in seconds at which the app should expect the image to update.\n  refresh_period?: number;\n};\n```\n\n----------------------------------------\n\nTITLE: Updating IdentityProvider with chain option in TypeScript\nDESCRIPTION: Added 'chain' option to <IdentityProvider> component to support L2 chain name resolution.\nSOURCE: https://github.com/coinbase/onchainkit/blob/main/packages/onchainkit/CHANGELOG.md#_snippet_4\n\nLANGUAGE: TypeScript\nCODE:\n```\n<IdentityProvider chain=\"optionL2Chain\">\n  {/* Component content */}\n</IdentityProvider>\n```\n\n----------------------------------------\n\nTITLE: Using chain option with getName function in TypeScript\nDESCRIPTION: Added 'chain' option to getName function to support ENS resolution for L2 chains.\nSOURCE: https://github.com/coinbase/onchainkit/blob/main/packages/onchainkit/CHANGELOG.md#_snippet_5\n\nLANGUAGE: TypeScript\nCODE:\n```\ngetName(address, { chain: 'optionL2Chain' })\n```\n\n----------------------------------------\n\nTITLE: Checking if a chain is L1 using isEthereum function in TypeScript\nDESCRIPTION: New isEthereum function to check if a given chain is an L1 Ethereum chain.\nSOURCE: https://github.com/coinbase/onchainkit/blob/main/packages/onchainkit/CHANGELOG.md#_snippet_6\n\nLANGUAGE: TypeScript\nCODE:\n```\nconst isL1 = isEthereum(chainId)\n```\n\n----------------------------------------\n\nTITLE: Using isSliced option with Address component in TypeScript/JSX\nDESCRIPTION: Added 'isSliced' option to Address component to control whether the address is displayed in full or sliced format.\nSOURCE: https://github.com/coinbase/onchainkit/blob/main/packages/onchainkit/CHANGELOG.md#_snippet_7\n\nLANGUAGE: TypeScript\nCODE:\n```\n<Address address={userAddress} isSliced={false} />\n```\n\n----------------------------------------\n\nTITLE: Using ConnectWallet component with custom text in TypeScript/JSX\nDESCRIPTION: New ConnectWallet component with a 'text' prop for customizing the button label.\nSOURCE: https://github.com/coinbase/onchainkit/blob/main/packages/onchainkit/CHANGELOG.md#_snippet_8\n\nLANGUAGE: TypeScript\nCODE:\n```\n<ConnectWallet text=\"Connect to Web3\" />\n```\n\n----------------------------------------\n\nTITLE: Adding className to Identity component in TypeScript/JSX\nDESCRIPTION: Added support for className prop in Identity component for custom styling.\nSOURCE: https://github.com/coinbase/onchainkit/blob/main/packages/onchainkit/CHANGELOG.md#_snippet_9\n\nLANGUAGE: TypeScript\nCODE:\n```\n<Identity address={userAddress} className=\"custom-identity-class\" />\n```\n\n----------------------------------------\n\nTITLE: Installing Dependencies with pnpm - Bash\nDESCRIPTION: This snippet installs all project dependencies across the pnpm workspace using pnpm, a JavaScript package manager. Requires pnpm (version 10+) and Node.js (v18+) installed. Input is the command run in the project root, and it installs dependencies in all workspaces.\nSOURCE: https://github.com/coinbase/onchainkit/blob/main/README.md#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\npnpm install\n```\n\n----------------------------------------\n\nTITLE: Installing Dependencies Using pnpm - Bash\nDESCRIPTION: Installs all monorepo dependencies using pnpm, a fast JavaScript package manager. Requires that Node.js v18 and pnpm v10 or newer are pre-installed. This command should be run from the project root after cloning. It sets up the workspace, resolving projects and dependencies for all packages.\nSOURCE: https://github.com/coinbase/onchainkit/blob/main/packages/onchainkit/README.md#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\npnpm install\n```\n\n----------------------------------------\n\nTITLE: Running Scripts in a Single Package with pnpm Filter - Bash\nDESCRIPTION: Executes a specified script in a single monorepo package using pnpm's filter feature. Requires pnpm to be installed. Replace `<package-name>` and `<script-name>` with the appropriate values to target a package and script. The command isolates execution to just the specified package, useful for focused development or testing.\nSOURCE: https://github.com/coinbase/onchainkit/blob/main/packages/onchainkit/README.md#_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\npnpm [-F | --filter] <package-name> <script-name>\n```\n\n----------------------------------------\n\nTITLE: Running Scripts Across All Packages with pnpm - Bash\nDESCRIPTION: Runs a specified script across all packages in the monorepo using pnpm. Requires pnpm to be installed. Replace `<script-name>` with the actual script to run (such as build, lint, test). The command helps orchestrate batch operations (e.g. building or testing) across all packages in a consistent manner.\nSOURCE: https://github.com/coinbase/onchainkit/blob/main/packages/onchainkit/README.md#_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\npnpm run <script-name>\n```\n\n----------------------------------------\n\nTITLE: Building and Launching Playground in Watch Mode with pnpm Filter - Bash\nDESCRIPTION: Builds the OnchainKit components in watch mode and starts the playground app using a shorthand pnpm filter. This assumes the root package.json shorthands are set up. Requires pnpm, and the necessary dependencies must be installed. The command will watch for file changes and reload the playground on http://localhost:3000 for real-time development and component previewing.\nSOURCE: https://github.com/coinbase/onchainkit/blob/main/packages/onchainkit/README.md#_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\npnpm f:play dev:watch\n```\n\n----------------------------------------\n\nTITLE: Running Scripts in a Single Package with pnpm - Bash\nDESCRIPTION: This shows the syntax for running a specific script in a single pnpm workspace package. Dependencies are the pnpm CLI, setup workspaces, and a defined script in the given workspace\\'s package.json. Replace <package-name> and <script-name> accordingly.\nSOURCE: https://github.com/coinbase/onchainkit/blob/main/README.md#_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\npnpm [-F | --filter] <package-name> <script-name>\n```\n\n----------------------------------------\n\nTITLE: Running Scripts in All Packages with pnpm - Bash\nDESCRIPTION: This snippet runs a given script across all packages in the workspace using pnpm. Requires pnpm setup with workspaces and the specified script to exist in each package. Replace <script-name> as needed.\nSOURCE: https://github.com/coinbase/onchainkit/blob/main/README.md#_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\npnpm run <script-name>\n```\n\n----------------------------------------\n\nTITLE: Running the Playground in Watch Mode with pnpm Shorthand - Bash\nDESCRIPTION: This snippet uses a custom shorthand script (defined in root package.json) to run the \\\"dev:watch\\\" script in the \\\"playground\\\" project. Dependencies are pnpm, the OnchainKit project structure, and matching shorthand scripts set up. Input starts the playground in watch mode; output is a dev server typically on localhost.\nSOURCE: https://github.com/coinbase/onchainkit/blob/main/README.md#_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\npnpm f:play dev:watch\n```\n\n----------------------------------------\n\nTITLE: Cloning OnchainKit Repository with Git - Bash\nDESCRIPTION: Clones the OnchainKit GitHub repository using git. Ensure Git is installed on your system. No additional dependencies are required for this operation. The command takes the remote repository URL and creates a local copy; no parameters or outputs except the cloned directory. To use, copy and paste the command into your terminal.\nSOURCE: https://github.com/coinbase/onchainkit/blob/main/packages/onchainkit/README.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ngit clone https://github.com/coinbase/onchainkit.git\n```\n\n----------------------------------------\n\nTITLE: Cloning the Repository with Git - Bash\nDESCRIPTION: This snippet demonstrates how to clone the OnchainKit GitHub repository using the git CLI. No dependencies are required beyond having Git installed. Input is a repository URL, and output is the cloning of the repo to the local filesystem.\nSOURCE: https://github.com/coinbase/onchainkit/blob/main/README.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ngit clone https://github.com/coinbase/onchainkit.git\n```\n\n----------------------------------------\n\nTITLE: Creating OnchainKit Template with CLI\nDESCRIPTION: This snippet shows the CLI command to create a Next.js template with OnchainKit pre-configured for building Base onchain apps.\nSOURCE: https://github.com/coinbase/onchainkit/blob/main/packages/create-onchain/README.md#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nnpx create-onchain\n# or\nnpx create-onchain --template=onchainkit\n```\n\n----------------------------------------\n\nTITLE: Creating MiniKit Basic Template with CLI\nDESCRIPTION: This snippet demonstrates the CLI command to create a template optimized for building Farcaster Mini-Apps using the MiniKit Basic template.\nSOURCE: https://github.com/coinbase/onchainkit/blob/main/packages/create-onchain/README.md#_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nnpx create-onchain --mini\n# or\nnpx create-onchain --template=minikit-basic\n```\n\n----------------------------------------\n\nTITLE: Creating MiniKit Snake Template with CLI\nDESCRIPTION: This snippet shows the CLI command to create a template optimized for building Farcaster Mini-Apps using the MiniKit Snake template, which includes a demo Snake game.\nSOURCE: https://github.com/coinbase/onchainkit/blob/main/packages/create-onchain/README.md#_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nnpx create-onchain --template=minikit-snake\n```\n\n----------------------------------------\n\nTITLE: Creating Onchain Projects with CLI Commands\nDESCRIPTION: This snippet demonstrates various CLI commands to create different types of projects using create-onchain, including OnchainKit templates, Mini-App templates, and generating Mini-App manifests.\nSOURCE: https://github.com/coinbase/onchainkit/blob/main/packages/create-onchain/README.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n# Create an Onchainkit template\nnpx create-onchain\n\n# Create a Mini-App template\nnpx create-onchain --mini\n\n# Create a particular Mini-App template\nnpx create-onchain --template-<template>\n\nAvailable Templates:\n  - onchainkit: Create an OnchainKit project\n  - minikit-basic: Create a Demo Mini-App\n  - minikit-snake: Create a Snake Game Mini-App\n\n# Generate a Mini-App manifest in existing project\nnpx create-onchain --manifest\n\n# Show the available commands\nnpx create-onchain --help\n\n# Show the current version\nnpx create-onchain --version\n```\n\n----------------------------------------\n\nTITLE: Running Tests for Create Onchain Project\nDESCRIPTION: This snippet shows the commands for running tests and generating test coverage for the Create Onchain project.\nSOURCE: https://github.com/coinbase/onchainkit/blob/main/packages/create-onchain/README.md#_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\n# Run tests\npnpm test\n\n# Run with coverage\npnpm test:coverage\n```\n\n----------------------------------------\n\nTITLE: Environment Variables Configuration for Farcaster Frame\nDESCRIPTION: Required environment variables for frame metadata, account association, and Redis integration for webhooks and notifications.\nSOURCE: https://github.com/coinbase/onchainkit/blob/main/packages/create-onchain/templates/minikit-snake/README.md#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n# Required for Frame metadata\nNEXT_PUBLIC_URL=\nNEXT_PUBLIC_VERSION=\nNEXT_PUBLIC_ONCHAINKIT_PROJECT_NAME=\nNEXT_PUBLIC_ICON_URL=\nNEXT_PUBLIC_IMAGE_URL=\nNEXT_PUBLIC_SPLASH_IMAGE_URL=\nNEXT_PUBLIC_SPLASH_BACKGROUND_COLOR=\n\n# Required to allow users to add your frame\nFARCASTER_HEADER=\nFARCASTER_PAYLOAD=\nFARCASTER_SIGNATURE=\n\n# Required for webhooks and background notifications\nREDIS_URL=\nREDIS_TOKEN=\n```\n\n----------------------------------------\n\nTITLE: Starting Development Server\nDESCRIPTION: Command to start the Next.js development server for local development.\nSOURCE: https://github.com/coinbase/onchainkit/blob/main/packages/create-onchain/templates/minikit-snake/README.md#_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nnpm run dev\n```\n\n----------------------------------------\n\nTITLE: Installing Dependencies for MiniKit Project\nDESCRIPTION: Commands for installing project dependencies using different package managers (npm, yarn, pnpm, or bun).\nSOURCE: https://github.com/coinbase/onchainkit/blob/main/packages/create-onchain/templates/minikit-snake/README.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm install\n# or\nyarn install\n# or\npnpm install\n# or\nbun install\n```\n\n----------------------------------------\n\nTITLE: Installing Project Dependencies with Node Package Managers - Bash\nDESCRIPTION: This snippet provides the necessary bash commands to install project dependencies using any of several JavaScript package managers, including npm, yarn, pnpm, or bun. Users must choose and run the appropriate install command according to their package manager of choice. No additional parameters are required, and these commands must be executed in the project root. Successful execution installs all dependencies specified in package.json. Dependencies: Node.js, a chosen package manager.\nSOURCE: https://github.com/coinbase/onchainkit/blob/main/packages/create-onchain/templates/minikit-basic/README.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm install\n# or\nyarn install\n# or\npnpm install\n# or\nbun install\n```\n\n----------------------------------------\n\nTITLE: Declaring and Configuring Required Environment Variables - Bash\nDESCRIPTION: This snippet lists all environment variables that must be set for Frame metadata, account association, and notifications within the MiniKit template. Developers should copy these declarations into their .env file and fill in the appropriate values as provisioned, typically by 'npx create-onchain --mini' or 'npx create-onchain --manifest'. Variables configure Frame metadata (appearance and functionality), user associations, and Redis-based notification support via Upstash. Dependencies: Proper Next.js and OnchainKit configuration, Redis service, and associated API tokens. Inputs: Valid environment variable values; Outputs: Application accesses correct configuration at runtime.\nSOURCE: https://github.com/coinbase/onchainkit/blob/main/packages/create-onchain/templates/minikit-basic/README.md#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n# Required for Frame metadata\nNEXT_PUBLIC_URL=\nNEXT_PUBLIC_VERSION=\nNEXT_PUBLIC_ONCHAINKIT_PROJECT_NAME=\nNEXT_PUBLIC_ICON_URL=\nNEXT_PUBLIC_IMAGE_URL=\nNEXT_PUBLIC_SPLASH_IMAGE_URL=\nNEXT_PUBLIC_SPLASH_BACKGROUND_COLOR=\n\n# Required to allow users to add your frame\nFARCASTER_HEADER=\nFARCASTER_PAYLOAD=\nFARCASTER_SIGNATURE=\n\n# Required for webhooks and background notifications\nREDIS_URL=\nREDIS_TOKEN=\n```\n\n----------------------------------------\n\nTITLE: Starting the Next.js Development Server - Bash\nDESCRIPTION: This command launches the Next.js development server locally using npm. It must be run from the project directory after installing dependencies and setting up environment variables. The command starts the app in development mode, enabling rapid iteration and live reloads. Inputs: None; Output: A running local server on the configured port (typically http://localhost:3000). Dependencies: All project dependencies installed; environment variables required for feature activation.\nSOURCE: https://github.com/coinbase/onchainkit/blob/main/packages/create-onchain/templates/minikit-basic/README.md#_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nnpm run dev\n```\n\n----------------------------------------\n\nTITLE: Installing Dependencies for OnchainKit Next.js Project\nDESCRIPTION: This snippet shows various package manager commands to install project dependencies. It supports npm, yarn, pnpm, and bun.\nSOURCE: https://github.com/coinbase/onchainkit/blob/main/packages/create-onchain/templates/next/README.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm install\n# or\nyarn install\n# or\npnpm install\n# or\nbun install\n```\n\n----------------------------------------\n\nTITLE: Running Development Server for OnchainKit Next.js Project\nDESCRIPTION: This snippet demonstrates how to start the development server using different package managers. It includes commands for npm, yarn, pnpm, and bun.\nSOURCE: https://github.com/coinbase/onchainkit/blob/main/packages/create-onchain/templates/next/README.md#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nnpm run dev\n# or\nyarn dev\n# or\npnpm dev\n# or\nbun dev\n```\n\n----------------------------------------\n\nTITLE: Installing Project Dependencies with pnpm (bash)\nDESCRIPTION: This Bash command installs all required npm dependencies for the project using pnpm, ensuring the environment is set up according to the package configuration. pnpm v10 and Node.js v18 are required prerequisites. The command should be run in the project root directory and will create a pnpm-lock.yaml file as well as a node_modules directory with the resolved dependencies.\nSOURCE: https://github.com/coinbase/onchainkit/blob/main/packages/miniapp-manifest-generator/README.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\npnpm install\n```\n\n----------------------------------------\n\nTITLE: Starting Development Server with pnpm (bash)\nDESCRIPTION: This Bash command launches the project in development mode using pnpm, typically starting a local React development server with hot-module reloading and debugging enabled. It assumes all dependencies are installed and the environment meets the specified requirements. This command is useful for interactive development and immediate feedback.\nSOURCE: https://github.com/coinbase/onchainkit/blob/main/packages/miniapp-manifest-generator/README.md#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\npnpm dev\n```\n\n----------------------------------------\n\nTITLE: Building Project for Production with pnpm (bash)\nDESCRIPTION: This Bash command generates a production-ready build of the React project using pnpm, preparing all assets for deployment. It assumes the development dependencies are installed and will output all optimized assets to a build or dist directory according to the project's build configuration.\nSOURCE: https://github.com/coinbase/onchainkit/blob/main/packages/miniapp-manifest-generator/README.md#_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\npnpm build\n```\n\n----------------------------------------\n\nTITLE: Running Test Suite with pnpm (bash)\nDESCRIPTION: This Bash command runs the project's test suite using pnpm, typically executing all unit and integration tests defined in the project. The command requires all dependencies to be installed and uses the test configuration specified in the project files. The expected output is a test summary including passed and failed tests.\nSOURCE: https://github.com/coinbase/onchainkit/blob/main/packages/miniapp-manifest-generator/README.md#_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\npnpm test\n```\n\n----------------------------------------\n\nTITLE: Running Tests with Coverage Reporting using pnpm (bash)\nDESCRIPTION: This Bash command executes the test suite with coverage analysis, using pnpm and providing a summary of code coverage (lines, branches, statements, functions) after test execution. It requires test and coverage tools to be properly configured and is useful for assessing the quality and completeness of the test suite.\nSOURCE: https://github.com/coinbase/onchainkit/blob/main/packages/miniapp-manifest-generator/README.md#_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\npnpm test:coverage\n```\n\n----------------------------------------\n\nTITLE: Running Next.js Dev Server with pnpm Command in Bash\nDESCRIPTION: This snippet demonstrates how to start the Next.js development server using the pnpm package manager in a bash shell. It runs the dev:watch script, which simultaneously launches the Next.js server and watches for file changes in the src directory, ensuring the @coinbase/onchainkit package is rebuilt on each change. The main parameter is the 'dev:watch' script, which should be defined in package.json, and the command should be run from the project root with pnpm installed.\nSOURCE: https://github.com/coinbase/onchainkit/blob/main/packages/playground/README.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\npnpm dev:watch\n```\n\n----------------------------------------\n\nTITLE: Configuring Robots.txt Directives - Text\nDESCRIPTION: Defines access rules for web crawlers using standard robots.txt syntax. These directives manage how user agents are permitted or restricted from accessing specific URL paths in the Coinbase OnchainKit project. The 'User-Agent' field specifies which crawlers the rule applies to, 'Allow' sets permitted paths, and 'Disallow' designates restricted subdirectories. No dependencies are required beyond standard web server support for robots.txt; the file must reside at the root of the web domain for proper operation.\nSOURCE: https://github.com/coinbase/onchainkit/blob/main/packages/playground/robots.txt#_snippet_0\n\nLANGUAGE: text\nCODE:\n```\nUser-Agent: *\\nAllow: /\\nDisallow: /mint/\n```\n\n----------------------------------------\n\nTITLE: Setting Up Development Environment for Create Onchain\nDESCRIPTION: This snippet outlines the commands for setting up the development environment, including installing dependencies, starting development, and building the project.\nSOURCE: https://github.com/coinbase/onchainkit/blob/main/packages/create-onchain/README.md#_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\n# Install dependencies\npnpm install\n\n# Start development\npnpm dev\n\n# Build\npnpm build\n```"
  }
]