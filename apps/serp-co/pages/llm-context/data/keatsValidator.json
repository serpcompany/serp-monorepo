[
  {
    "owner": "keats",
    "repo": "validator",
    "content": "TITLE: Basic Struct Validation Example\nDESCRIPTION: Example showing basic validation usage including email, URL, length, range and custom validation functions on a struct.\nSOURCE: https://github.com/keats/validator/blob/master/README.md#2025-04-20_snippet_1\n\nLANGUAGE: rust\nCODE:\n```\nuse serde::Deserialize;\n\n// A trait that the Validate derive will impl\nuse validator::{Validate, ValidationError};\n\n#[derive(Debug, Validate, Deserialize)]\nstruct SignupData {\n    #[validate(email)]\n    mail: String,\n    #[validate(url)]\n    site: String,\n    #[validate(length(min = 1), custom(function = \"validate_unique_username\"))]\n    #[serde(rename = \"firstName\")]\n    first_name: String,\n    #[validate(range(min = 18, max = 20))]\n    age: u32,\n    #[validate(range(exclusive_min = 0.0, max = 100.0))]\n    height: f32,\n}\n\nfn validate_unique_username(username: &str) -> Result<(), ValidationError> {\n    if username == \"xXxShad0wxXx\" {\n        // the value of the username will automatically be added later\n        return Err(ValidationError::new(\"terrible_username\"));\n    }\n\n    Ok(())\n}\n\nmatch signup_data.validate() {\n  Ok(_) => (),\n  Err(e) => return e;\n};\n```\n\n----------------------------------------\n\nTITLE: Implementing Custom Validation in Rust with Validator Derive\nDESCRIPTION: Shows how to use custom validation functions with the validator crate. The examples demonstrate both simple function references and fully qualified paths.\nSOURCE: https://github.com/keats/validator/blob/master/README.md#2025-04-20_snippet_5\n\nLANGUAGE: rust\nCODE:\n```\n#[validate(custom(function = \"validate_something\"))]\n#[validate(custom(function = \"::utils::validate_something\"))]\n```\n\n----------------------------------------\n\nTITLE: Nested Struct Validation Example\nDESCRIPTION: Example demonstrating validation of nested structs and vectors of structs using the nested validation attribute.\nSOURCE: https://github.com/keats/validator/blob/master/README.md#2025-04-20_snippet_4\n\nLANGUAGE: rust\nCODE:\n```\nuse serde::Deserialize;\n// A trait that the Validate derive will impl\nuse validator::Validate;\n\n#[derive(Debug, Validate, Deserialize)]\nstruct SignupData {\n    #[validate(nested)]\n    contact_details: ContactDetails,\n    #[validate(nested)]\n    preferences: Vec<Preference>,\n    #[validate(required)]\n    allow_cookies: Option<bool>,\n}\n\n#[derive(Debug, Validate, Deserialize)]\nstruct ContactDetails {\n    #[validate(email)]\n    mail: String,\n}\n\n#[derive(Debug, Validate, Deserialize)]\nstruct Preference {\n    #[validate(length(min = 4))]\n    name: String,\n    value: bool,\n}\n\nmatch signup_data.validate() {\n  Ok(_) => (),\n  Err(e) => return e;\n};\n```\n\n----------------------------------------\n\nTITLE: Implementing Context-Based Custom Validation in Rust\nDESCRIPTION: Demonstrates how to use custom validation with context arguments. This example shows how to define a context type, implement a validation function that uses this context, and validate a struct with this context.\nSOURCE: https://github.com/keats/validator/blob/master/README.md#2025-04-20_snippet_6\n\nLANGUAGE: rust\nCODE:\n```\nuse validator::{Validate, ValidateArgs, ValidationError};\n\nfn validate(value: &str, context: &TestContext) -> Result<(), ValidationError> {\n    [...]\n}\n\nstruct TestContext(i64, i64);\n\n#[derive(Debug, Validate)]\n#[validate(context = TestContext)]\nstruct TestStruct {\n    #[validate(custom(function = \"validate\", use_context))]\n    value: String,\n}\n\nlet test_struct: TestStruct = [...];\nlet test_context: TestContext = [...];\ntest_struct.validate_with_args(&test_context).is_ok();\n```\n\n----------------------------------------\n\nTITLE: Using Nested Validation in Rust\nDESCRIPTION: Shows how to validate fields that have types that also implement the Validate trait. This enables validation of nested structures.\nSOURCE: https://github.com/keats/validator/blob/master/README.md#2025-04-20_snippet_8\n\nLANGUAGE: rust\nCODE:\n```\n#[validate(nested)]\n```\n\n----------------------------------------\n\nTITLE: Implementing Struct-Level Validation in Rust\nDESCRIPTION: Demonstrates how to validate an entire struct using a custom validation function. The validation is performed after all field-level validations, and errors are associated with the '__all__' key.\nSOURCE: https://github.com/keats/validator/blob/master/README.md#2025-04-20_snippet_9\n\nLANGUAGE: rust\nCODE:\n```\n#[derive(Debug, Validate, Deserialize)]\n#[validate(schema(function = \"validate_category\", skip_on_field_errors = false))]\nstruct CategoryData {\n    category: String,\n    name: String,\n}\n```\n\n----------------------------------------\n\nTITLE: Customizing Validation Messages and Error Codes in Rust\nDESCRIPTION: Shows various ways to customize validation by providing custom error messages and codes. This is useful for internationalization and more specific error handling.\nSOURCE: https://github.com/keats/validator/blob/master/README.md#2025-04-20_snippet_10\n\nLANGUAGE: rust\nCODE:\n```\n// code attribute\n#[validate(email(code = \"code_str\"))]\n#[validate(credit_card(code = \"code_str\"))]\n#[validate(length(min = 5, max = 10, code = \"code_str\"))]\n\n#[validate(regex(path = *static_regex, code = \"code_str\"))]\n#[validate(custom(function = \"custom_fn\", code = \"code_str\"))]\n#[validate(contains(pattern = \"pattern_str\", code = \"code_str\"))]\n#[validate(does_not_contain(pattern = \"pattern_str\", code = \"code_str\"))]\n#[validate(must_match(other = \"match_value\", code = \"code_str\"))]\n\n// message attribute\n#[validate(url(message = \"message_str\"))]\n#[validate(length(min = 5, max = 10, message = \"message_str\"))]\n\n#[validate(regex(path = *static_regex, message = \"message_str\"))]\n#[validate(custom(function = \"custom_fn\", message = \"message_str\"))]\n#[validate(contains(pattern = \"pattern_str\", message = \"message_str\"))]\n#[validate(does_not_contain(pattern = \"pattern_str\", message = \"message_str\"))]\n#[validate(must_match(other = \"match_value\", message = \"message_str\"))]\n\n// both attributes\n#[validate(url(message = \"message\", code = \"code_str\"))]\n#[validate(email(code = \"code_str\", message = \"message\"))]\n#[validate(custom(function = \"custom_fn\", code = \"code_str\", message = \"message_str\"))]\n```\n\n----------------------------------------\n\nTITLE: Using Mutable References with Custom Validation in Rust\nDESCRIPTION: Shows how to pass mutable references to validation functions using the 'v_a lifetime. This example demonstrates validating a string value while passing a mutable database reference to the validation function.\nSOURCE: https://github.com/keats/validator/blob/master/README.md#2025-04-20_snippet_7\n\nLANGUAGE: rust\nCODE:\n```\nfn validate_value(_: &str, arg: &mut Database) -> Result<(), ValidationError> {\n    [...]\n}\n\n#[derive(Debug, Validate)] //   vvvv This is the lifetime for references\n#[validate(context = \"Database<'v_a>\", mutable)]\nstruct TestStruct {\n    #[validate(custom(function = \"validate_value\", use_context))]\n    value: String,\n}\n\nlet mut database: Database = [...];\nlet test_struct: TestStruct = [...];\ntest_struct.validate_with_args(&mut database).is_ok();\n```\n\n----------------------------------------\n\nTITLE: Installing Validator Crate Dependencies\nDESCRIPTION: Configuration for adding the validator crate to a Rust project's dependencies with the derive feature enabled.\nSOURCE: https://github.com/keats/validator/blob/master/README.md#2025-04-20_snippet_0\n\nLANGUAGE: toml\nCODE:\n```\n[dependencies]\nvalidator = { version = \"0.19\", features = [\"derive\"] }\n```\n\n----------------------------------------\n\nTITLE: Validation Error Types Definition\nDESCRIPTION: Definition of the ValidationErrorsKind enum showing the three possible types of validation errors: Struct, List, and Field.\nSOURCE: https://github.com/keats/validator/blob/master/README.md#2025-04-20_snippet_2\n\nLANGUAGE: rust\nCODE:\n```\n#[derive(Debug, Serialize, Clone, PartialEq)]\n#[serde(untagged)]\npub enum ValidationErrorsKind {\n    Struct(Box<ValidationErrors>),\n    List(BTreeMap<usize, Box<ValidationErrors>>),\n    Field(Vec<ValidationError>),\n}\n```\n\n----------------------------------------\n\nTITLE: Validation Error Structure Definition\nDESCRIPTION: Definition of the ValidationError struct showing the structure of individual validation errors.\nSOURCE: https://github.com/keats/validator/blob/master/README.md#2025-04-20_snippet_3\n\nLANGUAGE: rust\nCODE:\n```\n#[derive(Debug, PartialEq, Clone, Serialize, Deserialize)]\npub struct ValidationError {\n  pub code: Cow<'static, str>,\n  pub message: Option<Cow<'static, str>>,\n  pub params: HashMap<Cow<'static, str>, Value>,\n}\n```"
  }
]