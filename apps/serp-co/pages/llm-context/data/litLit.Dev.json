[
  {
    "owner": "lit",
    "repo": "lit.dev",
    "content": "TITLE: Creating a Simple Lit Component with TypeScript\nDESCRIPTION: A basic implementation of a Lit component called 'simple-greeting' that demonstrates core Lit concepts. It defines a reactive property 'name' with a default value and renders a template with an h1 element containing a greeting message.\nSOURCE: https://github.com/lit/lit.dev/blob/main/packages/lit-dev-content/site/docs/v3/components/overview.md#2025-04-09_snippet_0\n\nLANGUAGE: ts\nCODE:\n```\n{% playground-example \"v3-docs/components/overview/simple-greeting\" \"simple-greeting.ts\" %}\n```\n\n----------------------------------------\n\nTITLE: Implementing a Simple Greeting Component in Lit (TypeScript)\nDESCRIPTION: This code snippet demonstrates the creation of a basic Lit component called 'SimpleGreeting'. It showcases the use of reactive properties, rendering, and template literal syntax for defining the component's structure.\nSOURCE: https://github.com/lit/lit.dev/blob/main/packages/lit-dev-content/site/docs/v2/components/overview.md#2025-04-09_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport {LitElement, html} from 'lit';\nimport {customElement, property} from 'lit/decorators.js';\n\n@customElement('simple-greeting')\nexport class SimpleGreeting extends LitElement {\n  @property()\n  name = 'World';\n\n  render() {\n    return html`<p>Hello, ${this.name}!</p>`;\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining a Lit Component in JavaScript\nDESCRIPTION: This snippet demonstrates how to define a Lit component in JavaScript without using decorators. It shows creating a class that extends LitElement and manually registering it using customElements.define().\nSOURCE: https://github.com/lit/lit.dev/blob/main/packages/lit-dev-content/site/docs/v3/components/defining.md#2025-04-09_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nexport class SimpleGreeting extends LitElement { /* ... */  }\ncustomElements.define('simple-greeting', SimpleGreeting);\n```\n\n----------------------------------------\n\nTITLE: Creating a Countdown Timer Component with Lit\nDESCRIPTION: This snippet demonstrates how to create a countdown timer component using Lit. It showcases reactive properties, declarative templates, and scoped styles. The component updates its display every second and allows setting a custom duration.\nSOURCE: https://github.com/lit/lit.dev/blob/main/packages/lit-dev-content/site/docs/v2/index.md#2025-04-09_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport {LitElement, html, css} from 'lit';\nimport {customElement, property} from 'lit/decorators.js';\n\n@customElement('my-timer')\nclass MyTimer extends LitElement {\n  static styles = css`\n    :host {\n      display: block;\n      width: 400px;\n      background-color: #e0e0e0;\n      border-radius: 30px;\n      padding: 20px;\n      text-align: center;\n    }\n    #time {\n      font-size: 30px;\n    }\n    #start {\n      width: 100px;\n      height: 40px;\n      background-color: #4caf50;\n      color: white;\n      font-size: 16px;\n      border: none;\n      border-radius: 8px;\n      cursor: pointer;\n      transition: 0.3s;\n    }\n    #start:hover {\n      background-color: #45a049;\n    }\n  `;\n\n  @property({type: Number})\n  duration = 60;\n\n  @property({type: Number})\n  _remaining = 0;\n\n  @property({type: Boolean})\n  _running = false;\n\n  _timer;\n\n  render() {\n    const minutes = Math.floor(this._remaining / 60);\n    const seconds = this._remaining % 60;\n    const formattedTime = `${minutes}:${seconds.toString().padStart(2, '0')}`;\n\n    return html`\n      <div id=\"time\">${formattedTime}</div>\n      <p>\n        <button id=\"start\" @click=${this._toggleTimer}>\n          ${this._running ? 'Pause' : 'Start'}\n        </button>\n      </p>\n    `;\n  }\n\n  _toggleTimer() {\n    if (this._running) {\n      this._stopTimer();\n    } else {\n      this._startTimer();\n    }\n  }\n\n  _startTimer() {\n    this._running = true;\n    this._remaining = this._remaining || this.duration;\n    this._timer = setInterval(() => {\n      if (this._remaining > 0) {\n        this._remaining--;\n      } else {\n        this._stopTimer();\n      }\n    }, 1000);\n  }\n\n  _stopTimer() {\n    this._running = false;\n    clearInterval(this._timer);\n  }\n}\n\n```\n\n----------------------------------------\n\nTITLE: Implementing a Countdown Timer Component with Lit in JavaScript\nDESCRIPTION: This snippet demonstrates creating a countdown timer web component using Lit. It showcases reactive properties, declarative templates, scoped styles, and lifecycle callbacks.\nSOURCE: https://github.com/lit/lit.dev/blob/main/packages/lit-dev-content/site/docs/v3/index.md#2025-04-09_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport {LitElement, html, css} from 'lit';\nimport {customElement, property} from 'lit/decorators.js';\n\n@customElement('my-timer')\nexport class MyTimer extends LitElement {\n  static styles = css`\n    :host {\n      display: block;\n      width: 400px;\n      background-color: #e0e0e0;\n      border-radius: 30px;\n      padding: 20px;\n      text-align: center;\n    }\n    #time {\n      font-size: 2em;\n    }\n    button {\n      width: 20px;\n      height: 20px;\n      border: none;\n      padding: 0;\n      margin: 0 5px;\n      border-radius: 10px;\n    }\n    button:hover {\n      background-color: #ccc;\n    }\n  `;\n\n  @property({type: Number})\n  duration = 60;\n\n  @property({type: Number})\n  remaining = 60;\n\n  @property({type: Boolean})\n  active = false;\n\n  _timer: number | undefined;\n\n  _tick() {\n    if (this.remaining > 0) {\n      this.remaining--;\n    } else {\n      this.reset();\n    }\n  }\n\n  start() {\n    this.active = true;\n    this._timer = setInterval(() => this._tick(), 1000);\n  }\n\n  stop() {\n    this.active = false;\n    clearInterval(this._timer);\n    this._timer = undefined;\n  }\n\n  reset() {\n    this.stop();\n    this.remaining = this.duration;\n  }\n\n  render() {\n    const mins = Math.floor(this.remaining / 60);\n    const secs = this.remaining % 60;\n    const pad = (n: number) => n.toString().padStart(2, '0');\n    return html`\n      <p id=\"time\">${pad(mins)}:${pad(secs)}</p>\n      ${this.active\n        ? html`<button @click=${this.stop}>⏹️</button>`\n        : html`<button @click=${this.start}>▶️</button>`}\n      <button @click=${() => this.duration += 60}>+</button>\n      <button @click=${() => this.duration -= 60}>-</button>\n    `;\n  }\n\n  disconnectedCallback() {\n    this.stop();\n    super.disconnectedCallback();\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Element Directive Expressions in Lit Templates\nDESCRIPTION: Shows how to use element directives, which are special functions that customize element rendering. This example uses the ref directive to keep a reference to an input element.\nSOURCE: https://github.com/lit/lit.dev/blob/main/packages/lit-dev-content/site/docs/v3/templates/expressions.md#2025-04-09_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nhtml`<input ${ref(inputRef)}>`\n```\n\n----------------------------------------\n\nTITLE: Defining a Lit Component in TypeScript and JavaScript\nDESCRIPTION: Demonstrates how to define a Lit component using LitElement as the base class, with @customElement decorator in TypeScript and customElements.define in JavaScript. Shows the basic structure including the render method and html tagged template literal.\nSOURCE: https://github.com/lit/lit.dev/blob/main/packages/lit-dev-content/site/articles/article/lit-cheat-sheet.md#2025-04-09_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n@customElement('simple-greeting')\nexport class SimpleGreeting extends LitElement {\n  render() {\n    return html`<p>Hello from Lit!</p>`;\n  }\n}\n```\n\nLANGUAGE: javascript\nCODE:\n```\nexport class SimpleGreeting extends LitElement {\n  render() {\n    return html`<p>Hello from Lit!</p>`;\n  }\n}\ncustomElements.define('simple-greeting', SimpleGreeting);\n```\n\n----------------------------------------\n\nTITLE: Complete Example of Declaring Properties in LitElement\nDESCRIPTION: A complete component example showing how to declare and initialize properties using a static properties field in LitElement. The example includes property declarations, constructor initialization, and rendering in the template.\nSOURCE: https://github.com/lit/lit.dev/blob/main/packages/lit-dev-content/site/docs/v1/components/properties.md#2025-04-09_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport {LitElement, html} from 'lit-element';\n\nclass MyElement extends LitElement {\n  static get properties() {\n    return {\n      greeting: {type: String},\n      data: {attribute: false},\n      items: {}\n    };\n  }\n\n  constructor() {\n    super();\n    this.greeting = 'Hello';\n    this.data = { name: 'Pizza', quantity: 1 };\n    this.items = [1, 2, 3];\n  }\n\n  render() {\n    return html`\n      <p>${this.greeting} World</p>\n      <p>${this.data.name}: ${this.data.quantity}</p>\n      <p>Items: ${this.items.join(', ')}</p>\n    `;\n  }\n}\n\ncustomElements.define('my-element', MyElement);\n```\n\n----------------------------------------\n\nTITLE: Using Arrow Functions for Event Handlers with addEventListener in Lit\nDESCRIPTION: Shows how to use arrow functions when adding event listeners imperatively to ensure that this refers to the component. This pattern is useful when adding listeners in lifecycle methods.\nSOURCE: https://github.com/lit/lit.dev/blob/main/packages/lit-dev-content/site/docs/v3/components/events.md#2025-04-09_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\nexport class MyElement extends LitElement {\n  private _handleResize = () => {\n    // `this` refers to the component\n    console.log(this.isConnected);\n  }\n\n  constructor() {\n    window.addEventListener('resize', this._handleResize);\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Declaring Internal Reactive State in TypeScript\nDESCRIPTION: Demonstrates how to declare internal reactive state using the @state decorator in a Lit component.\nSOURCE: https://github.com/lit/lit.dev/blob/main/packages/lit-dev-content/site/docs/v2/components/properties.md#2025-04-09_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\n@state()\nprivate _counter = 0;\n```\n\n----------------------------------------\n\nTITLE: Importing Lit in TypeScript with Decorators\nDESCRIPTION: Example of importing Lit core components and decorators in a TypeScript file. The decorators provide class and property functionality for defining web components.\nSOURCE: https://github.com/lit/lit.dev/blob/main/packages/lit-dev-content/site/docs/v3/getting-started.md#2025-04-09_snippet_1\n\nLANGUAGE: ts\nCODE:\n```\nimport {LitElement, html} from 'lit';\nimport {customElement, property} from 'lit/decorators.js';\n```\n\n----------------------------------------\n\nTITLE: Event Listener Expressions in Lit Templates\nDESCRIPTION: Demonstrates adding event listeners to elements using the '@' prefix. The expression should evaluate to an event handler function.\nSOURCE: https://github.com/lit/lit.dev/blob/main/packages/lit-dev-content/site/docs/v3/templates/expressions.md#2025-04-09_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nhtml`<button @click=${this._clickHandler}>Go</button>`\n```\n\n----------------------------------------\n\nTITLE: Basic Lit Template Syntax with html Tag\nDESCRIPTION: A simple example of a Lit template using the html tag with a JavaScript template literal. It shows how to interpolate a dynamic variable 'name' within HTML markup.\nSOURCE: https://github.com/lit/lit.dev/blob/main/packages/lit-dev-content/site/docs/v2/templates/overview.md#2025-04-09_snippet_0\n\nLANGUAGE: js\nCODE:\n```\nhtml`<h1>Hello ${name}</h1>`\n```\n\n----------------------------------------\n\nTITLE: Defining Reactive Properties in Lit Components\nDESCRIPTION: Shows how to define reactive properties that trigger re-renders when changed and handle attribute conversion. The example demonstrates both TypeScript decorator syntax and JavaScript static properties approach.\nSOURCE: https://github.com/lit/lit.dev/blob/main/packages/lit-dev-content/site/articles/article/lit-cheat-sheet.md#2025-04-09_snippet_24\n\nLANGUAGE: typescript\nCODE:\n```\n@property() name = 'Somebody';\n```\n\nLANGUAGE: javascript\nCODE:\n```\nstatic properties = { name: {} };\n\nconstructor() {\n  super();\n  this.name = 'Somebody';\n}\n```\n\n----------------------------------------\n\nTITLE: Declaring Reactive Properties in TypeScript\nDESCRIPTION: Demonstrates how to declare a reactive property using the @property decorator in a Lit component class.\nSOURCE: https://github.com/lit/lit.dev/blob/main/packages/lit-dev-content/site/docs/v2/components/properties.md#2025-04-09_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nclass MyElement extends LitElement {\n  @property()\n  name?: string;\n}\n```\n\n----------------------------------------\n\nTITLE: Defining a Lit Component Class in JavaScript\nDESCRIPTION: This snippet demonstrates how to define a Lit component class using JavaScript. It uses customElements.define() to register the component with the browser.\nSOURCE: https://github.com/lit/lit.dev/blob/main/packages/lit-dev-content/site/tutorials/content/intro-to-lit/01.md#2025-04-09_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nexport class MyElement extends LitElement {\n}\ncustomElements.define('my-element', MyElement);\n```\n\n----------------------------------------\n\nTITLE: Using a Lit Component in HTML\nDESCRIPTION: This snippet shows how to use a defined Lit component in HTML markup. It demonstrates using the custom element tag with an attribute.\nSOURCE: https://github.com/lit/lit.dev/blob/main/packages/lit-dev-content/site/docs/v3/components/defining.md#2025-04-09_snippet_2\n\nLANGUAGE: html\nCODE:\n```\n<simple-greeting name=\"Markup\"></simple-greeting>\n```\n\n----------------------------------------\n\nTITLE: Adding External Event Listeners in connectedCallback\nDESCRIPTION: Example showing how to add event listeners to external nodes when a component is connected to the document. This pattern is common for listening to global events.\nSOURCE: https://github.com/lit/lit.dev/blob/main/packages/lit-dev-content/site/docs/v3/components/lifecycle.md#2025-04-09_snippet_1\n\nLANGUAGE: js\nCODE:\n```\nconnectedCallback() {\n  super.connectedCallback()\n  window.addEventListener('keydown', this._handleKeydown);\n}\n```\n\n----------------------------------------\n\nTITLE: Using Named Slots in HTML (HTML)\nDESCRIPTION: Shows how to use a named slot in the HTML markup when using a custom element. The slot attribute on the child element corresponds to the name attribute of the slot in the component's template.\nSOURCE: https://github.com/lit/lit.dev/blob/main/packages/lit-dev-content/site/docs/v1/components/templates.md#2025-04-09_snippet_6\n\nLANGUAGE: html\nCODE:\n```\n<my-element>\n  <p slot=\"one\">Include me in slot \"one\".</p>\n</my-element>\n```\n\n----------------------------------------\n\nTITLE: Importing Lit in JavaScript\nDESCRIPTION: Example of importing Lit core components in a JavaScript file for component development.\nSOURCE: https://github.com/lit/lit.dev/blob/main/packages/lit-dev-content/site/docs/v2/getting-started.md#2025-04-09_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nimport {LitElement, html} from 'lit';\n```\n\n----------------------------------------\n\nTITLE: Defining a Lit Component with Decorators in TypeScript\nDESCRIPTION: Example of using @customElement and @property decorators to define a Lit component and a reactive property in a declarative way.\nSOURCE: https://github.com/lit/lit.dev/blob/main/packages/lit-dev-content/site/docs/v3/components/decorators.md#2025-04-09_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n@customElement('my-element')\nexport class MyElement extends LitElement {\n\n  @property()\n  greeting = 'Welcome';\n\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Lit Component Class\nDESCRIPTION: Shows how to create a Lit component by extending LitElement and registering it as a custom element. The component is named 'word-viewer' and demonstrates both TypeScript decorator and JavaScript registration approaches.\nSOURCE: https://github.com/lit/lit.dev/blob/main/packages/lit-dev-content/site/tutorials/content/word-viewer/01.md#2025-04-09_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n@customElement('word-viewer')\nexport class WordViewer extends LitElement { /* ... */ }\n```\n\nLANGUAGE: javascript\nCODE:\n```\nexport class WordViewer extends LitElement { /* ... */  }\ncustomElements.define('word-viewer', WordViewer);\n```\n\n----------------------------------------\n\nTITLE: Implementing Localizable Lit Component\nDESCRIPTION: Example of a Lit component using the msg function for localization, demonstrating both TypeScript and JavaScript implementations.\nSOURCE: https://github.com/lit/lit.dev/blob/main/packages/lit-dev-content/site/docs/v3/localization/overview.md#2025-04-09_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport {html, LitElement} from 'lit';\nimport {customElement, property} from 'lit/decorators.js';\nimport {msg} from '@lit/localize';\n\n@customElement('my-greeter')\nclass MyGreeter extends LitElement {\n  @property()\n  who = 'World';\n\n  render() {\n    return msg(html`Hello <b>${this.who}</b>`);\n  }\n}\n```\n\nLANGUAGE: javascript\nCODE:\n```\nimport {html, LitElement} from 'lit';\nimport {msg} from '@lit/localize';\n\nclass MyGreeter extends LitElement {\n  static properties = {\n    who: {},\n  };\n\n  constructor() {\n    super();\n    this.who = 'World';\n  }\n\n  render() {\n    return msg(html`Hello <b>${this.who}</b>`);\n  }\n}\ncustomElements.define('my-greeter', MyGreeter);\n```\n\n----------------------------------------\n\nTITLE: Manual Query Implementation in JavaScript\nDESCRIPTION: Equivalent JavaScript implementation of the query decorators showing how to manually query assigned elements and nodes from slots.\nSOURCE: https://github.com/lit/lit.dev/blob/main/packages/lit-dev-content/site/docs/v2/components/shadow-dom.md#2025-04-09_snippet_8\n\nLANGUAGE: javascript\nCODE:\n```\nget _listItems() {\n  const slot = this.shadowRoot.querySelector('slot[name=list]');\n  return slot.assignedElements().filter((node) => node.matches('.item'));\n}\n\nget _headerNodes() {\n  const slot = this.shadowRoot.querySelector('slot[name=header]');\n  return slot.assignedNodes({flatten: true});\n}\n```\n\n----------------------------------------\n\nTITLE: Object-based Property Converter Implementation\nDESCRIPTION: Demonstrates implementing a custom property converter with separate fromAttribute and toAttribute functions for bidirectional conversion.\nSOURCE: https://github.com/lit/lit.dev/blob/main/packages/lit-dev-content/site/docs/v2/components/properties.md#2025-04-09_snippet_16\n\nLANGUAGE: javascript\nCODE:\n```\nprop1: {\n  converter: {\n    fromAttribute: (value, type) => {\n      // `value` is a string\n      // Convert it to a value of type `type` and return it\n    },\n    toAttribute: (value, type) => {\n      // `value` is of type `type`\n      // Convert it to a string and return it\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Mediator Pattern Implementation in Lit\nDESCRIPTION: Example showing a mediator element that coordinates interaction between input and button elements. The mediator listens for events from children and controls the enabled state of the button based on input content.\nSOURCE: https://github.com/lit/lit.dev/blob/main/packages/lit-dev-content/site/docs/v3/composition/component-composition.md#2025-04-09_snippet_1\n\nLANGUAGE: js\nCODE:\n```\n{% playground-example \"v3-docs/composition/mediator-pattern\" \"mediator-element.ts\" %}\n```\n\n----------------------------------------\n\nTITLE: Customizing Event Listener Options with @eventOptions Decorator in Lit\nDESCRIPTION: Shows how to use the @eventOptions decorator to customize event listener options like passive or capture. This decorator allows passing options to addEventListener when declaring event handlers in a Lit component.\nSOURCE: https://github.com/lit/lit.dev/blob/main/packages/lit-dev-content/site/docs/v3/components/events.md#2025-04-09_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport {LitElement, html} from 'lit';\nimport {eventOptions} from 'lit/decorators.js';\n//...\n@eventOptions({passive: true})\nprivate _handleTouchStart(e) { console.log(e.type) }\n```\n\n----------------------------------------\n\nTITLE: Using styleMap Directive in Lit (TypeScript)\nDESCRIPTION: Shows how to use the styleMap directive to dynamically set inline styles on an element based on a condition.\nSOURCE: https://github.com/lit/lit.dev/blob/main/packages/lit-dev-content/site/docs/v3/templates/directives.md#2025-04-09_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\n@customElement('my-element')\nclass MyElement extends LitElement {\n\n  @property({type: Boolean})\n  enabled = false;\n\n  render() {\n    const styles = { backgroundColor: this.enabled ? 'blue' : 'gray', color: 'white' };\n    return html`<p style=${styleMap(styles)}>Hello style!</p>`;\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Declaring Properties with Static Properties Field in LitElement\nDESCRIPTION: Example demonstrating how to declare component properties using a static properties field in LitElement. The properties include a greeting with String type, data with attribute disabled, and an items property with default options.\nSOURCE: https://github.com/lit/lit.dev/blob/main/packages/lit-dev-content/site/docs/v1/components/properties.md#2025-04-09_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nstatic get properties() {\n  return {\n    greeting: {type: String},\n    data: {attribute: false},\n    items: {}\n  };\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Basic Lit Component Template\nDESCRIPTION: Shows how to define a render() method in a Lit component using the html tag function to create a template with dynamic expressions.\nSOURCE: https://github.com/lit/lit.dev/blob/main/packages/lit-dev-content/site/docs/v3/components/rendering.md#2025-04-09_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport {LitElement, html} from 'lit';\nimport {customElement, property} from 'lit/decorators.js';\n\n@customElement('my-element')\nexport class MyElement extends LitElement {\n  @property()\nname = 'World';\n\n  render() {\n    return html`\n      <p>Hello, ${this.name}!</p>\n    `;\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing the render() Method in a Lit Component\nDESCRIPTION: This snippet shows how to add a render() method to a Lit component. The method returns a TemplateResult using the html tag function, which defines the component's internal DOM.\nSOURCE: https://github.com/lit/lit.dev/blob/main/packages/lit-dev-content/site/tutorials/content/intro-to-lit/01.md#2025-04-09_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nrender() {\n  return html`\n    <p>Hello world! From my-element.</p>\n  `;\n}\n```\n\n----------------------------------------\n\nTITLE: Manual Task Execution in Lit Component\nDESCRIPTION: Demonstrates how to create and manually execute a Task in a Lit component using the run() method triggered by a button click. The task performs a fetch request to get data.\nSOURCE: https://github.com/lit/lit.dev/blob/main/packages/lit-dev-content/site/docs/v3/data/task.md#2025-04-09_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nclass MyElement extends LitElement {\n\n  private _getDataTask = new Task(\n    this,\n    {\n      task: async () => {\n        const response = await fetch(`example.com/data/`);\n        return response.json();\n      },\n      args: () => []\n    }\n  );\n\n  render() {\n    return html`\n      <button @click=${this._onClick}>Get Data</button>\n    `;\n  }\n\n  private _onClick() {\n    this._getDataTask.run();\n  }\n}\n```\n\nLANGUAGE: javascript\nCODE:\n```\nclass MyElement extends LitElement {\n\n  _getDataTask = new Task(\n    this,\n    {\n      task: async () => {\n        const response = await fetch(`example.com/data/`);\n        return response.json();\n      },\n      args: () => []\n    }\n  );\n\n  render() {\n    return html`\n      <button @click=${this._onClick}>Get Data</button>\n    `;\n  }\n\n  _onClick() {\n    this._getDataTask.run();\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Styling the Host Element in LitElement\nDESCRIPTION: Shows how to style the host element of a LitElement component using :host and :host() CSS pseudo-class selectors.\nSOURCE: https://github.com/lit/lit.dev/blob/main/packages/lit-dev-content/site/docs/v1/components/styles.md#2025-04-09_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nstatic get styles() {\n  return css`\n    /* Selects the host element */\n    :host {\n      display: block;\n    }\n\n    /* Selects the host element if it is hidden */\n    :host([hidden]) {\n      display: none;\n    }\n  `;\n}\n```\n\n----------------------------------------\n\nTITLE: Rendering Static HTML with lit-html\nDESCRIPTION: Basic example showing how to declare a static template using the html tag function and render it to the DOM. The template result is a lightweight object that represents the HTML to be rendered.\nSOURCE: https://github.com/lit/lit.dev/blob/main/packages/lit-dev-content/site/docs/v1/lit-html/writing-templates.md#2025-04-09_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport {html, render} from 'lit-html';\n\n// Declare a template\nconst myTemplate = html`<div>Hello World</div>`;\n\n// Render the template\nrender(myTemplate, document.body);\n```\n\n----------------------------------------\n\nTITLE: Applying Custom Decorator to Lit Component Field\nDESCRIPTION: This code shows how to apply a custom decorator to a field in a Lit component, which will cause each instance to run an initializer that adds a controller.\nSOURCE: https://github.com/lit/lit.dev/blob/main/packages/lit-dev-content/site/docs/v3/components/lifecycle.md#2025-04-09_snippet_17\n\nLANGUAGE: typescript\nCODE:\n```\nclass MyElement extends LitElement {\n  @myDecorator foo;\n}\n```\n\n----------------------------------------\n\nTITLE: Providing TypeScript Typings for a Lit Component\nDESCRIPTION: This snippet shows how to provide TypeScript typings for a Lit component by extending the HTMLElementTagNameMap interface. It ensures proper type-checking when using the custom element.\nSOURCE: https://github.com/lit/lit.dev/blob/main/packages/lit-dev-content/site/docs/v3/components/defining.md#2025-04-09_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\n@customElement('my-element')\nexport class MyElement extends LitElement {\n  @property({type: Number})\n  aNumber: number = 5;\n  /* ... */\n}\n\ndeclare global {\n  interface HTMLElementTagNameMap {\n    \"my-element\": MyElement;\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining a Custom Element with Decorators in TypeScript\nDESCRIPTION: Example of using @customElement and @property decorators to define a Lit component with reactive properties.\nSOURCE: https://github.com/lit/lit.dev/blob/main/packages/lit-dev-content/site/docs/v2/components/decorators.md#2025-04-09_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n@customElement('my-element')\nexport class MyElement extends LitElement {\n  @property() greeting = \"Welcome\";\n  @property() name = \"Sally\";\n  @property({type: Boolean}) emphatic = true;\n  //...\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Boolean Attributes with Lit Expressions\nDESCRIPTION: This snippet shows how to use a boolean attribute expression to enable or disable a text input based on a checkbox state. The ?disabled syntax sets or removes the disabled attribute depending on the value of the expression.\nSOURCE: https://github.com/lit/lit.dev/blob/main/packages/lit-dev-content/site/tutorials/content/intro-to-lit/04.md#2025-04-09_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n?disabled=${!this.checked}\n```\n\n----------------------------------------\n\nTITLE: Creating a Context Provider in Lit\nDESCRIPTION: Example of a Lit component that provides a Logger instance to its subtree using the @provide decorator. The component creates a Logger and makes it available to child components.\nSOURCE: https://github.com/lit/lit.dev/blob/main/packages/lit-dev-content/site/docs/v2/data/context.md#2025-04-09_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport {LitElement, property, html} from 'lit';\nimport {provide} from '@lit-labs/context';\n\nimport {Logger} from 'my-logging-library';\nimport {loggerContext} from './logger-context.js';\n\n@customElement('my-app')\nclass MyApp extends LitElement {\n\n  @provide({context: loggerContext})\n  logger = new Logger();\n\n  render() {\n    return html`...`;\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Computing Derived Values in willUpdate\nDESCRIPTION: Example of implementing willUpdate() to compute derived values before update occurs.\nSOURCE: https://github.com/lit/lit.dev/blob/main/packages/lit-dev-content/site/docs/v2/components/lifecycle.md#2025-04-09_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\nwillUpdate(changedProperties: PropertyValues<this>) {\n  // only need to check changed properties for an expensive computation.\n  if (changedProperties.has('firstName') || changedProperties.has('lastName')) {\n    this.sha = computeSHA(`${this.firstName} ${this.lastName}`);\n  }\n}\n\nrender() {\n  return html`SHA: ${this.sha}`;\n}\n```\n\nLANGUAGE: javascript\nCODE:\n```\nwillUpdate(changedProperties) {\n  // only need to check changed properties for an expensive computation.\n  if (changedProperties.has('firstName') || changedProperties.has('lastName')) {\n    this.sha = computeSHA(`${this.firstName} ${this.lastName}`);\n  }\n}\n\nrender() {\n  return html`SHA: ${this.sha}`;\n}\n```\n\n----------------------------------------\n\nTITLE: Using Properties, Loops, and Conditionals in Templates (JavaScript)\nDESCRIPTION: Illustrates how to incorporate properties, loops, and conditional statements within a LitElement template for dynamic content rendering.\nSOURCE: https://github.com/lit/lit.dev/blob/main/packages/lit-dev-content/site/docs/v1/components/templates.md#2025-04-09_snippet_2\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport { LitElement, html } from 'lit-element';\n\nclass MyElement extends LitElement {\n  static get properties() {\n    return {\n      myString: { type: String },\n      myArray: { type: Array },\n      myBool: { type: Boolean }\n    };\n  }\n\n  constructor() {\n    super();\n    this.myString = 'Hello World';\n    this.myArray = ['an','array','of','test','data'];\n    this.myBool = true;\n  }\n\n  render() {\n    return html`\n      <p>${this.myString}</p>\n      <ul>\n        ${this.myArray.map(i => html`<li>${i}</li>`)}\n      </ul>\n      ${this.myBool?\n        html`<p>Render some HTML if myBool is true</p>`:\n        html`<p>Render some other HTML if myBool is false</p>`}\n    `;\n  }\n}\n\ncustomElements.define('my-element', MyElement);\n```\n\n----------------------------------------\n\nTITLE: Cleaning Up External Event Listeners in disconnectedCallback\nDESCRIPTION: Example showing how to remove event listeners from external nodes when a component is disconnected from the document. This prevents memory leaks by ensuring nothing holds a reference to the element.\nSOURCE: https://github.com/lit/lit.dev/blob/main/packages/lit-dev-content/site/docs/v3/components/lifecycle.md#2025-04-09_snippet_2\n\nLANGUAGE: js\nCODE:\n```\ndisconnectedCallback() {\n  super.disconnectedCallback()\n  window.removeEventListener('keydown', this._handleKeydown);\n}\n```\n\n----------------------------------------\n\nTITLE: Common Expression Positions in Lit Templates\nDESCRIPTION: This snippet demonstrates the five common positions for expressions in Lit templates: child nodes, attributes, boolean attributes, properties, and event listeners. Each example shows the proper syntax for different types of bindings.\nSOURCE: https://github.com/lit/lit.dev/blob/main/packages/lit-dev-content/site/tutorials/content/intro-to-lit/04.md#2025-04-09_snippet_1\n\nLANGUAGE: html\nCODE:\n```\n<!-- Child nodes -->\n<h1>${this.pageTitle}</h1>\n\n<!-- Attribute -->\n<div class=${this.myTheme}></div>\n\n<!-- Boolean attribute -->\n<p ?hidden=${this.isHidden}>I may be in hiding.</p>\n\n<!-- Property -->\n<input .value=${this.value}>\n\n<!-- Event listener -->\n<button @click=${() => {console.log(\"You clicked a button.\")}}></button>\n```\n\n----------------------------------------\n\nTITLE: Rendering a lit-html template to the DOM\nDESCRIPTION: Basic example of creating and rendering a lit-html template. It defines a template with a dynamic value and renders it to the document body.\nSOURCE: https://github.com/lit/lit.dev/blob/main/packages/lit-dev-content/site/docs/v3/libraries/standalone-templates.md#2025-04-09_snippet_3\n\nLANGUAGE: js\nCODE:\n```\nimport {html, render} from 'lit-html';\n\nconst name = 'world';\nconst sayHi = html`<h1>Hello ${name}</h1>`;\nrender(sayHi, document.body);\n```\n\n----------------------------------------\n\nTITLE: Implementing MouseMoveController in Lit\nDESCRIPTION: Example demonstrating how a controller handles setup and cleanup when a host component connects/disconnects, and updates in response to input changes.\nSOURCE: https://github.com/lit/lit.dev/blob/main/packages/lit-dev-content/site/docs/v3/composition/controllers.md#2025-04-09_snippet_11\n\nLANGUAGE: typescript\nCODE:\n```\n\"my-element.ts\"\n```\n\n----------------------------------------\n\nTITLE: Customizing Shadow Root Options in JavaScript\nDESCRIPTION: Example of customizing shadow root options by setting the shadowRootOptions static property to enable delegatesFocus while preserving other default options.\nSOURCE: https://github.com/lit/lit.dev/blob/main/packages/lit-dev-content/site/docs/v3/components/shadow-dom.md#2025-04-09_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\nclass DelegatesFocus extends LitElement {\n  static shadowRootOptions = {...LitElement.shadowRootOptions, delegatesFocus: true};\n}\n```\n\n----------------------------------------\n\nTITLE: Rendering HTML with Lit Template in JavaScript\nDESCRIPTION: This snippet demonstrates the basic syntax of a Lit template using the html tag. It shows how to create a simple greeting with a dynamic name variable.\nSOURCE: https://github.com/lit/lit.dev/blob/main/packages/lit-dev-content/site/docs/v3/templates/overview.md#2025-04-09_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nhtml`<h1>Hello ${name}</h1>`\n```\n\n----------------------------------------\n\nTITLE: Using Default Converter for Property Type in TypeScript\nDESCRIPTION: This example demonstrates how to use the default converter by specifying the type option in a property declaration using TypeScript.\nSOURCE: https://github.com/lit/lit.dev/blob/main/packages/lit-dev-content/site/docs/v2/components/properties.md#2025-04-09_snippet_13\n\nLANGUAGE: typescript\nCODE:\n```\n// Use the default converter\n@property({ type: Number })\ncount = 0;\n```\n\n----------------------------------------\n\nTITLE: Creating a Lit Component with TypeScript Reactive Properties\nDESCRIPTION: Demonstrates how to define a reactive property 'words' in a Lit component using TypeScript decorators. The @property() decorator enables attribute synchronization and automatic re-rendering when the property changes.\nSOURCE: https://github.com/lit/lit.dev/blob/main/packages/lit-dev-content/site/tutorials/content/word-viewer/02.md#2025-04-09_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nclass WordViewer extends LitElement {\n  @property() words = 'initial value';\n  ...\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Lists with Loop Statements in Lit Templates\nDESCRIPTION: Demonstrates how to build an array of templates using a for loop and pass it into a template expression. This approach iterates through items and creates list item templates that are then rendered within an unordered list.\nSOURCE: https://github.com/lit/lit.dev/blob/main/packages/lit-dev-content/site/docs/v3/templates/lists.md#2025-04-09_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nrender() {\n  const itemTemplates = [];\n  for (const i of this.items) {\n    itemTemplates.push(html`<li>${i}</li>`);\n  }\n\n  return html`\n    <ul>\n      ${itemTemplates}\n    </ul>\n  `;\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Lit Component in JavaScript\nDESCRIPTION: Creates and registers a Lit component using plain JavaScript without decorators by explicitly calling customElements.define().\nSOURCE: https://github.com/lit/lit.dev/blob/main/packages/lit-dev-content/site/docs/v2/components/defining.md#2025-04-09_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nexport class SimpleGreeting extends LitElement { /* ... */  }\ncustomElements.define('simple-greeting', SimpleGreeting);\n```\n\n----------------------------------------\n\nTITLE: Implementing Timer Component with requestUpdate() in JavaScript\nDESCRIPTION: Demonstrates how to use requestUpdate() in a timer component's lifecycle methods to trigger updates every second.\nSOURCE: https://github.com/lit/lit.dev/blob/main/packages/lit-dev-content/site/docs/v3/components/lifecycle.md#2025-04-09_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nconnectedCallback() {\n  super.connectedCallback();\n  this._timerInterval = setInterval(() => this.requestUpdate(), 1000);\n}\n\ndisconnectedCallback() {\n  super.disconnectedCallback();\n  clearInterval(this._timerInterval);\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Resize Observer with ResizeController in Lit\nDESCRIPTION: Shows how to use the new ResizeController from @lit-labs/observers package to easily implement resize observation in a Lit element.\nSOURCE: https://github.com/lit/lit.dev/blob/main/packages/lit-dev-content/site/blog/2022-01-05-lit-2.1-release.md#2025-04-09_snippet_6\n\nLANGUAGE: TypeScript\nCODE:\n```\nimport { ResizeController } from '@lit-labs/observers/resize_controller.js';\n\nclass MyResizableElement extends LitElement {\n\n  _resizeController = new ResizeController(this, {});\n\n  render() {\n    return html`Current size is ${this.offsetWidth} x ${this.offsetHeight}`;\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Using async/await with updateComplete in LitElement\nDESCRIPTION: Demonstrates how to use async/await syntax to work with the updateComplete Promise in a LitElement component, allowing for asynchronous operations after an update is complete.\nSOURCE: https://github.com/lit/lit.dev/blob/main/packages/lit-dev-content/site/docs/v1/components/lifecycle.md#2025-04-09_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nasync myFunc(data) {\n  // Set a property, triggering an update\n  this.myProp = data;\n\n  // Wait for the updateComplete promise to resolve\n  await this.updateComplete;\n  // ...do stuff...\n  return 'done';\n}\n```\n\n----------------------------------------\n\nTITLE: Applying Dynamic Classes in Lit Templates\nDESCRIPTION: Shows how to dynamically set the class attribute of an element. The expression's value will be converted to a string and used as the class name.\nSOURCE: https://github.com/lit/lit.dev/blob/main/packages/lit-dev-content/site/docs/v3/templates/expressions.md#2025-04-09_snippet_10\n\nLANGUAGE: javascript\nCODE:\n```\nhtml`<div class=${this.textClass}>Stylish text.</div>`;\n```\n\n----------------------------------------\n\nTITLE: Defining a Lit Component Class in TypeScript\nDESCRIPTION: This snippet shows how to define a Lit component class using TypeScript. It uses the @customElement decorator to register the component with the browser.\nSOURCE: https://github.com/lit/lit.dev/blob/main/packages/lit-dev-content/site/tutorials/content/intro-to-lit/01.md#2025-04-09_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n@customElement('my-element')\nexport class MyElement extends LitElement {\n}\n```\n\n----------------------------------------\n\nTITLE: Installing Lit Localize Dependencies\nDESCRIPTION: Commands to install the required Lit localization packages including the client library and CLI tools.\nSOURCE: https://github.com/lit/lit.dev/blob/main/packages/lit-dev-content/site/docs/v3/localization/overview.md#2025-04-09_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\nnpm i @lit/localize\nnpm i -D @lit/localize-tools\n```\n\n----------------------------------------\n\nTITLE: Adding Styles to Lit Components\nDESCRIPTION: Demonstrates how to add styles to a Lit component by defining the static styles property and using the css tagged template literal.\nSOURCE: https://github.com/lit/lit.dev/blob/main/packages/lit-dev-content/site/articles/article/lit-cheat-sheet.md#2025-04-09_snippet_11\n\nLANGUAGE: typescript\nCODE:\n```\nimport {LitElement, html, css} from 'lit';\nimport {customElement} from 'lit/decorators.js';\n\n@customElement('my-element')\nexport class MyElement extends LitElement {\n  static styles = css`\n    p {\n      color: blue;\n    }\n  `;\n\n  render() {\n    return html`\n      <p>This text is blue</p>\n    `;\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Style Element with Dynamic Expression\nDESCRIPTION: Shows how to use expressions within style elements, with a warning about performance limitations.\nSOURCE: https://github.com/lit/lit.dev/blob/main/packages/lit-dev-content/site/docs/v2/components/styles.md#2025-04-09_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\nrender() {\n  return html`\n    <style>\n      :host {\n        /* Warning: this approach has limitations & performance issues! */\n        color: ${myColor}\n      }\n    </style>\n    <div>template content</div>\n  `;\n}\n```\n\n----------------------------------------\n\nTITLE: Defining a Lit Component with TypeScript Decorator\nDESCRIPTION: This snippet shows how to define a Lit component using TypeScript and the @customElement decorator. It creates a class that extends LitElement and registers it as a custom element.\nSOURCE: https://github.com/lit/lit.dev/blob/main/packages/lit-dev-content/site/docs/v3/components/defining.md#2025-04-09_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n@customElement('simple-greeting')\nexport class SimpleGreeting extends LitElement { /* ... */ }\n```\n\n----------------------------------------\n\nTITLE: Adding Click Event Listener in Lit Template\nDESCRIPTION: Demonstrates how to add a declarative click event listener to a button element in a Lit component template.\nSOURCE: https://github.com/lit/lit.dev/blob/main/packages/lit-dev-content/site/tutorials/content/intro-to-lit/03.md#2025-04-09_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<button @click=${this.handleClick}>Click me!</button>\n```\n\n----------------------------------------\n\nTITLE: Using Lit via CDN Bundles\nDESCRIPTION: Example of importing Lit from a pre-built bundle via CDN. This approach allows using Lit without npm or build tools, loading it directly in the browser.\nSOURCE: https://github.com/lit/lit.dev/blob/main/packages/lit-dev-content/site/docs/v3/getting-started.md#2025-04-09_snippet_3\n\nLANGUAGE: js\nCODE:\n```\nimport {LitElement, html} from 'https://cdn.jsdelivr.net/gh/lit/dist@3/core/lit-core.min.js';\n```\n\n----------------------------------------\n\nTITLE: Querying Shadow DOM Elements using firstUpdated and Getter Pattern\nDESCRIPTION: Shows two approaches for accessing elements in the shadow DOM: using firstUpdated lifecycle method and using a getter pattern.\nSOURCE: https://github.com/lit/lit.dev/blob/main/packages/lit-dev-content/site/docs/v3/components/shadow-dom.md#2025-04-09_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nfirstUpdated() {\n  this.staticNode = this.renderRoot.querySelector('#static-node');\n}\n\nget _closeButton() {\n  return this.renderRoot.querySelector('#close-button');\n}\n```\n\n----------------------------------------\n\nTITLE: Complete Example of Property Change Configuration in LitElement\nDESCRIPTION: Full implementation example showing how to configure property changes with the hasChanged function, tracking myProp as an array property that only triggers updates when the array length changes.\nSOURCE: https://github.com/lit/lit.dev/blob/main/packages/lit-dev-content/site/docs/v1/components/properties.md#2025-04-09_snippet_15\n\nLANGUAGE: javascript\nCODE:\n```\nimport { LitElement, html } from 'lit-element';\n\nclass MyElement extends LitElement {\n  static get properties() {\n    return {\n      myProp: {\n        type: Array,\n        /**\n         * Compare myProp's new value to its old value.\n         *\n         * This example uses custom equality logic to decide\n         * whether to update or not.\n         *\n         * @param {Array} newVal new property value\n         * @param {Array} oldVal old property value\n         * @return {boolean} true if myProp has changed\n         */\n        hasChanged(newVal, oldVal) {\n          if (oldVal === undefined) {\n            return true;\n          }\n          // Only care if array size has changed\n          return newVal.length !== oldVal.length;\n        }\n      }\n    };\n  }\n  constructor() {\n    super();\n    this.myProp = [];\n  }\n  render() {\n    return html`\n      <p>myProp: ${this.myProp.join(', ')}</p>\n      <button @click=\"${this.addProp}\">Add prop</button>\n      <button @click=\"${this.changeProp}\">Change prop</button>\n    `;\n  }\n  addProp() {\n    this.myProp = [...this.myProp, this.myProp.length];\n  }\n  changeProp() {\n    // makes a change, but doesn't trigger an update\n    this.myProp[0] = 'test';\n    // would need to do this.requestUpdate() or\n    // this.myProp = [...this.myProp] to trigger update\n  }\n}\ncustomElements.define('my-element', MyElement);\n```\n\n----------------------------------------\n\nTITLE: TypeScript Mixin with Constructor Type\nDESCRIPTION: Shows proper TypeScript typing for mixins including constructor constraint to LitElement.\nSOURCE: https://github.com/lit/lit.dev/blob/main/packages/lit-dev-content/site/docs/v3/composition/mixins.md#2025-04-09_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nimport {LitElement} from 'lit';\n\ntype Constructor<T = {}> = new (...args: any[]) => T;\n\nexport const MyMixin = <T extends Constructor<LitElement>>(superClass: T) => {\n  class MyMixinClass extends superClass {\n    /* ... */\n  };\n  return MyMixinClass as /* see \"typing the subclass\" below */;\n}\n```\n\n----------------------------------------\n\nTITLE: Defining a Lit Component with TypeScript Decorator\nDESCRIPTION: This snippet shows how to define a Lit component using TypeScript and the @customElement decorator. It creates a class that extends LitElement and registers it as a custom element.\nSOURCE: https://github.com/lit/lit.dev/blob/main/packages/lit-dev-content/site/docs/v3/components/defining.md#2025-04-09_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n@customElement('simple-greeting')\nexport class SimpleGreeting extends LitElement { /* ... */ }\n```\n\n----------------------------------------\n\nTITLE: Styling Slotted Content in Lit Components\nDESCRIPTION: Shows how to style slotted content in Lit components using the ::slotted() pseudo-element.\nSOURCE: https://github.com/lit/lit.dev/blob/main/packages/lit-dev-content/site/docs/v3/components/styles.md#2025-04-09_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\nstatic styles = css`\n  ::slotted(*) { font-family: Roboto; }\n  ::slotted(p) { color: blue; }\n  div ::slotted(*) { color: red; }\n`;\n```\n\n----------------------------------------\n\nTITLE: Querying Shadow DOM Elements using firstUpdated and Getter Pattern\nDESCRIPTION: Shows two approaches for accessing elements in the shadow DOM: using firstUpdated lifecycle method and using a getter pattern.\nSOURCE: https://github.com/lit/lit.dev/blob/main/packages/lit-dev-content/site/docs/v3/components/shadow-dom.md#2025-04-09_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nfirstUpdated() {\n  this.staticNode = this.renderRoot.querySelector('#static-node');\n}\n\nget _closeButton() {\n  return this.renderRoot.querySelector('#close-button');\n}\n```\n\n----------------------------------------\n\nTITLE: Adding Event Listeners in connectedCallback\nDESCRIPTION: Example of setting up external event listeners when a component is connected to the DOM. This shows proper setup of window-level event handlers.\nSOURCE: https://github.com/lit/lit.dev/blob/main/packages/lit-dev-content/site/docs/v2/components/lifecycle.md#2025-04-09_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nconnectedCallback() {\n  super.connectedCallback()\n  window.addEventListener('keydown', this._handleKeydown);\n}\n```\n\n----------------------------------------\n\nTITLE: Updating Property Setters with Render Method in TypeScript\nDESCRIPTION: This TypeScript code updates the 'rating' and 'vote' setters to use the render method, ensuring DOM updates when properties change. It removes explicit DOM manipulation in favor of Lit's rendering approach.\nSOURCE: https://github.com/lit/lit.dev/blob/main/packages/lit-dev-content/site/tutorials/content/wc-to-lit/10.md#2025-04-09_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nset rating(value) {\n  this._rating = value;\n  // remove the logic for imperatively setting the innerText\n  // since it's handled in render()\n  this.render();\n}\n\n...\n\nset vote(newValue) {\n  ...\n\n  this._vote = newValue;\n  this.setAttribute('vote', newValue!);\n  // call this.render() at the end of the setter\n  this.render();\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing MouseMoveController in Lit\nDESCRIPTION: This example demonstrates a MouseMoveController that handles mouse move events and updates the host component. It shows how to perform setup and cleanup when the host is connected and disconnected, and how to request an update when the input changes.\nSOURCE: https://github.com/lit/lit.dev/blob/main/packages/lit-dev-content/site/docs/v2/composition/controllers.md#2025-04-09_snippet_11\n\nLANGUAGE: typescript\nCODE:\n```\nimport {ReactiveController, ReactiveControllerHost} from 'lit';\n\nexport class MouseController implements ReactiveController {\n  private host: ReactiveControllerHost;\n\n  x = 0;\n  y = 0;\n\n  constructor(host: ReactiveControllerHost) {\n    (this.host = host).addController(this);\n  }\n\n  hostConnected() {\n    window.addEventListener('mousemove', this._onMouseMove);\n  }\n\n  hostDisconnected() {\n    window.removeEventListener('mousemove', this._onMouseMove);\n  }\n\n  private _onMouseMove = (e: MouseEvent) => {\n    this.x = e.clientX;\n    this.y = e.clientY;\n    this.host.requestUpdate();\n  };\n}\n\nimport {LitElement, html} from 'lit';\nimport {customElement} from 'lit/decorators.js';\n\n@customElement('my-element')\nexport class MyElement extends LitElement {\n  private mouse = new MouseController(this);\n\n  render() {\n    return html`\n      The mouse position is ${this.mouse.x} , ${this.mouse.y}\n    `;\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a Basic ReactiveController in TypeScript\nDESCRIPTION: Implementation of a basic ClockController class that follows the ReactiveController interface. The controller stores a reference to its host and registers itself with the host.\nSOURCE: https://github.com/lit/lit.dev/blob/main/packages/lit-dev-content/site/docs/v2/composition/controllers.md#2025-04-09_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nclass ClockController implements ReactiveController {\n  private host: ReactiveControllerHost;\n\n  constructor(host: ReactiveControllerHost) {\n    // Store a reference to the host\n    this.host = host;\n    // Register for lifecycle updates\n    host.addController(this);\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Basic Style Element Usage in Lit Render Method\nDESCRIPTION: Demonstrates how to include a style element within a Lit component's render method for per-instance styling.\nSOURCE: https://github.com/lit/lit.dev/blob/main/packages/lit-dev-content/site/docs/v2/components/styles.md#2025-04-09_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\nrender() {\n  return html`\n    <style>\n      /* updated per instance */\n    </style>\n    <div>template content</div>\n  `;\n}\n```\n\n----------------------------------------\n\nTITLE: Using Until Directive in Lit Element\nDESCRIPTION: Example showing how to use the until directive to handle loading states with fetch requests in both TypeScript and JavaScript.\nSOURCE: https://github.com/lit/lit.dev/blob/main/packages/lit-dev-content/site/docs/v2/templates/directives.md#2025-04-09_snippet_44\n\nLANGUAGE: typescript\nCODE:\n```\n@customElement('my-element')\nclass MyElement extends LitElement {\n\n  @state()\n  private content = fetch('./content.txt').then(r => r.text());\n\n  render() {\n    return html`${until(this.content, html`<span>Loading...</span>`)}`;\n  }\n}\n```\n\nLANGUAGE: javascript\nCODE:\n```\nclass MyElement extends LitElement {\n  static properties = {\n    content: {state: true},\n  };\n\n  constructor() {\n    super();\n    this.content = fetch('./content.txt').then(r => r.text());\n  }\n\n  render() {\n    return html`${until(this.content, html`<span>Loading...</span>`)}`;\n  }\n}\ncustomElements.define('my-element', MyElement);\n```\n\n----------------------------------------\n\nTITLE: Adding Static Styles to a LitElement Component\nDESCRIPTION: Demonstrates how to define scoped styles for a LitElement component using the static styles property and css tagged template literal.\nSOURCE: https://github.com/lit/lit.dev/blob/main/packages/lit-dev-content/site/docs/v1/components/styles.md#2025-04-09_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport { LitElement, css, html } from 'lit-element';\n\nclass MyElement extends LitElement {\n  static get styles() {\n    return css`\n      div { color: red; }\n    `;\n  }\n  render() {\n    return html`\n      <div>I'm styled!</div>\n    `;\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Importing Individual Lit Decorators\nDESCRIPTION: Shows how to import specific decorators individually to reduce the amount of code needed to run the component.\nSOURCE: https://github.com/lit/lit.dev/blob/main/packages/lit-dev-content/site/docs/v3/components/decorators.md#2025-04-09_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nimport {customElement} from 'lit/decorators/custom-element.js';\nimport {eventOptions} from 'lit/decorators/event-options.js';\n```\n\n----------------------------------------\n\nTITLE: Defining Conditional Template Parts in TypeScript\nDESCRIPTION: Creates partial templates for showing either the todo list or a 'caught up' message based on whether there are items to display.\nSOURCE: https://github.com/lit/lit.dev/blob/main/packages/lit-dev-content/site/tutorials/content/intro-to-lit/07.md#2025-04-09_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nconst caughtUpMessage = html`\n  <p>\n  You're all caught up!\n  </p>\n`;\nconst todosOrMessage = items.length > 0\n  ? todos\n  : caughtUpMessage;\n```\n\n----------------------------------------\n\nTITLE: Using @queryAssignedElements and @queryAssignedNodes Decorators in TypeScript\nDESCRIPTION: Example of using @queryAssignedElements to query elements matching a selector in a named slot, and @queryAssignedNodes to query all nodes in another named slot with flattening enabled.\nSOURCE: https://github.com/lit/lit.dev/blob/main/packages/lit-dev-content/site/docs/v3/components/shadow-dom.md#2025-04-09_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\n@queryAssignedElements({slot: 'list', selector: '.item'})\n_listItems!: Array<HTMLElement>;\n\n@queryAssignedNodes({slot: 'header', flatten: true})\n_headerNodes!: Array<Node>;\n```\n\n----------------------------------------\n\nTITLE: Max Value Directive Implementation\nDESCRIPTION: Example of a directive that tracks and returns the maximum value seen across renders.\nSOURCE: https://github.com/lit/lit.dev/blob/main/packages/lit-dev-content/site/docs/v3/templates/custom-directives.md#2025-04-09_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nclass MaxDirective extends Directive {\n  maxValue = Number.MIN_VALUE;\n  // Define a render method, which may accept arguments:\n  render(value: number, minValue = Number.MIN_VALUE) {\n    this.maxValue = Math.max(value, this.maxValue, minValue);\n    return this.maxValue;\n  }\n}\nconst max = directive(MaxDirective);\n\n// Call the directive with `value` and `minValue` arguments defined for `render()`:\nconst template = html`<div>${max(someNumber, 0)}</div>`;\n```\n\nLANGUAGE: javascript\nCODE:\n```\nclass MaxDirective extends Directive {\n  maxValue = Number.MIN_VALUE;\n  // Define a render method, which may accept arguments:\n  render(value, minValue = Number.MIN_VALUE) {\n    this.maxValue = Math.max(value, this.maxValue, minValue);\n    return this.maxValue;\n  }\n}\nconst max = directive(MaxDirective);\n\n// Call the directive with `value` and `minValue` arguments defined for `render()`:\nconst template = html`<div>${max(someNumber, 0)}</div>`;\n```\n\n----------------------------------------\n\nTITLE: Importing and Extending LitElement\nDESCRIPTION: Shows how to import and extend the LitElement base class, with TypeScript using the @customElement decorator and JavaScript using direct class extension. This is the foundation for creating Lit-based web components.\nSOURCE: https://github.com/lit/lit.dev/blob/main/packages/lit-dev-content/site/tutorials/content/wc-to-lit/11.md#2025-04-09_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport {LitElement, html, css} from 'lit';\nimport {customElement} from 'lit/decorators.js';\n\n// Remember to extend LitElement\n@customElement('rating-element')\nexport class RatingElement extends LitElement {\n  // remove connectedCallback()\n  // remove customElements.define at the end of the file\n  // comment out the observedAttributes method. this will break\n  // functionality for now, but it'll be addressed in the next step\n  ...\n```\n\nLANGUAGE: javascript\nCODE:\n```\nimport {LitElement, html, css} from 'lit';\n\n// Remember to extend LitElement\nexport class RatingElement extends LitElement {\n  // remove connectedCallback()\n  // comment out the observedAttributes method for now this will break\n  //   functionality for now, but we'll tackle that in the next step\n  ...\n```\n\n----------------------------------------\n\nTITLE: Setting JavaScript Properties in Lit Templates\nDESCRIPTION: Shows how to set JavaScript properties on elements using Lit's property expression syntax. This is equivalent to directly setting the property on the element.\nSOURCE: https://github.com/lit/lit.dev/blob/main/packages/lit-dev-content/site/docs/v3/templates/expressions.md#2025-04-09_snippet_15\n\nLANGUAGE: js\nCODE:\n```\nhtml`<input .value=${this.itemCount}>`;\n```\n\n----------------------------------------\n\nTITLE: Adding Basic Styles to a Lit Component\nDESCRIPTION: Demonstrates how to add styles to a Lit component using the static styles class field with the css tagged template literal.\nSOURCE: https://github.com/lit/lit.dev/blob/main/packages/lit-dev-content/site/docs/v3/components/styles.md#2025-04-09_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nstatic styles = css`...`;\n```\n\n----------------------------------------\n\nTITLE: Importing and Extending AsyncDirective in TypeScript\nDESCRIPTION: This snippet demonstrates how to import AsyncDirective from Lit's async-directive module and extend it to create a custom TimeAgoDirective. It sets up the basic structure for an asynchronous directive in Lit.\nSOURCE: https://github.com/lit/lit.dev/blob/main/packages/lit-dev-content/site/tutorials/content/async-directive/04.md#2025-04-09_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport {directive, AsyncDirective} from 'lit/async-directive.js';\n\nclass TimeAgoDirective extends AsyncDirective {\n```\n\n----------------------------------------\n\nTITLE: Adding Component-Level Event Listeners in Lit\nDESCRIPTION: Example of adding event listeners in the component constructor for handling events from both slotted and shadow DOM children.\nSOURCE: https://github.com/lit/lit.dev/blob/main/packages/lit-dev-content/site/docs/v2/components/events.md#2025-04-09_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nconstructor() {\n  super();\n  this.addEventListener('click', (e) => console.log(e.type, e.target.localName));\n}\n```\n\n----------------------------------------\n\nTITLE: Calling render() from update() in Lit Directives\nDESCRIPTION: Demonstrates how to properly call the render() method from an overridden update() method in a Lit directive, showing how to pass arguments correctly.\nSOURCE: https://github.com/lit/lit.dev/blob/main/packages/lit-dev-content/site/docs/v3/templates/custom-directives.md#2025-04-09_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\nclass MyDirective extends Directive {\n  update(part: Part, [fish, bananas]: DirectiveParameters<this>) {\n    // ...\n    return this.render(fish, bananas);\n  }\n  render(fish: number, bananas: number) { ... }\n}\n```\n\nLANGUAGE: javascript\nCODE:\n```\nclass MyDirective extends Directive {\n  update(part, [fish, bananas]) {\n    // ...\n    return this.render(fish, bananas);\n  }\n  render(fish, bananas) { ... }\n}\n```\n\n----------------------------------------\n\nTITLE: Preventing Attribute Creation for a Property in JavaScript\nDESCRIPTION: This snippet demonstrates how to prevent an observed attribute from being created for a property by setting attribute to false in JavaScript.\nSOURCE: https://github.com/lit/lit.dev/blob/main/packages/lit-dev-content/site/docs/v2/components/properties.md#2025-04-09_snippet_11\n\nLANGUAGE: javascript\nCODE:\n```\n// No observed attribute for this property\nstatic properties = {\n  myData: { attribute: false },\n};\n\nconstructor() {\n  super();\n  this.myData = {};\n}\n```\n\n----------------------------------------\n\nTITLE: Limiting Lit Directives to specific expression types\nDESCRIPTION: Demonstrates how to restrict a directive to only work in specific contexts by validating the part type in the constructor, throwing errors for invalid usage.\nSOURCE: https://github.com/lit/lit.dev/blob/main/packages/lit-dev-content/site/docs/v3/templates/custom-directives.md#2025-04-09_snippet_8\n\nLANGUAGE: typescript\nCODE:\n```\nclass ClassMap extends Directive {\n  constructor(partInfo: PartInfo) {\n    super(partInfo);\n    if (\n      partInfo.type !== PartType.ATTRIBUTE ||\n      partInfo.name !== 'class'\n    ) {\n      throw new Error('The `classMap` directive must be used in the `class` attribute');\n    }\n  }\n  ...\n}\n```\n\nLANGUAGE: javascript\nCODE:\n```\nclass ClassMap extends Directive {\n  constructor(partInfo) {\n    super(partInfo);\n    if (\n      partInfo.type !== PartType.ATTRIBUTE ||\n      partInfo.name !== 'class'\n    ) {\n      throw new Error('The `classMap` directive must be used in the `class` attribute');\n    }\n  }\n  ...\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Initial Locale Based on URL (JavaScript)\nDESCRIPTION: This code demonstrates how to set the initial locale based on the URL parameters, validating against known locales for security.\nSOURCE: https://github.com/lit/lit.dev/blob/main/packages/lit-dev-content/site/docs/v3/localization/transform-mode.md#2025-04-09_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nimport {allLocales} from './generated/locales.js';\n\nconst url = new URL(window.location.href);\nconst unsafeLocale = url.searchParams.get('locale');\nconst locale = allLocales.includes(unsafeLocale) ? unsafeLocale : 'en';\n\nconst script = document.createElement('script');\nscript.type = 'module';\nscript.src = `/${locale}.js`;\ndocument.head.appendChild(script);\n```\n\n----------------------------------------\n\nTITLE: Implementing updated() in TypeScript and JavaScript\nDESCRIPTION: Demonstrates how to use updated() to perform tasks that use element DOM after an update, such as measuring the DOM.\nSOURCE: https://github.com/lit/lit.dev/blob/main/packages/lit-dev-content/site/docs/v3/components/lifecycle.md#2025-04-09_snippet_10\n\nLANGUAGE: typescript\nCODE:\n```\nupdated(changedProperties: Map<string, any>) {\n  if (changedProperties.has('collapsed')) {\n    this._measureDOM();\n  }\n}\n```\n\nLANGUAGE: javascript\nCODE:\n```\nupdated(changedProperties) {\n  if (changedProperties.has('collapsed')) {\n    this._measureDOM();\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Async Task Controller with Names API\nDESCRIPTION: Implementation of a NamesController that wraps the @lit/task controller to handle asynchronous name fetching from a REST API, demonstrating state management and conditional rendering based on task status.\nSOURCE: https://github.com/lit/lit.dev/blob/main/packages/lit-dev-content/site/docs/v3/composition/controllers.md#2025-04-09_snippet_12\n\nLANGUAGE: typescript\nCODE:\n```\n\"v3-docs/controllers/names\"\n```\n\n----------------------------------------\n\nTITLE: Implementing a Controller with a Directive\nDESCRIPTION: Demonstrates how to implement a controller that includes a directive. This ResizeController example creates a directive that can be used to observe element resizing.\nSOURCE: https://github.com/lit/lit.dev/blob/main/packages/lit-dev-content/site/docs/v3/composition/controllers.md#2025-04-09_snippet_10\n\nLANGUAGE: typescript\nCODE:\n```\nclass ResizeDirective {\n  /* ... */\n}\nconst resizeDirective = directive(ResizeDirective);\n\nexport class ResizeController {\n  /* ... */\n  observe() {\n    // Pass a reference to the controller so the directive can\n    // notify the controller on size changes.\n    return resizeDirective(this);\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Basic Static Styles in Lit Component\nDESCRIPTION: Demonstrates defining scoped styles using the static styles class field with the css tagged template literal.\nSOURCE: https://github.com/lit/lit.dev/blob/main/packages/lit-dev-content/site/docs/v2/components/styles.md#2025-04-09_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nstatic styles = css`...`;\n```\n\n----------------------------------------\n\nTITLE: Async Iterator Example\nDESCRIPTION: Demonstrates using asyncReplace directive with async iterables.\nSOURCE: https://github.com/lit/lit.dev/blob/main/packages/lit-dev-content/site/docs/v1/lit-html/template-reference.md#2025-04-09_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\nimport {asyncReplace} from 'lit-html/directives/async-replace.js';\n\nconst wait = (t) => new Promise((resolve) => setTimeout(resolve, t));\n/**\n * Returns an async iterable that yields increasing integers.\n */\nasync function* countUp() {\n  let i = 0;\n  while (true) {\n    yield i++;\n    await wait(1000);\n  }\n}\n\nrender(html`\n  Count: <span>${asyncReplace(countUp())}</span>.\n`, document.body);\n```\n\n----------------------------------------\n\nTITLE: Binding Properties to Templated Elements (JavaScript)\nDESCRIPTION: Demonstrates various ways to bind properties to elements within a LitElement template, including text content, attributes, boolean attributes, properties, and event handlers.\nSOURCE: https://github.com/lit/lit.dev/blob/main/packages/lit-dev-content/site/docs/v1/components/templates.md#2025-04-09_snippet_3\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport { LitElement, html } from 'lit-element';\n\nclass MyElement extends LitElement {\n  static get properties() {\n    return {\n      prop1: { type: String },\n      prop2: { type: String },\n      prop3: { type: Boolean },\n      prop4: { type: String }\n    };\n  }\n\n  constructor() {\n    super();\n    this.prop1 = 'text binding';\n    this.prop2 = 'mydiv';\n    this.prop3 = true;\n    this.prop4 = 'pie';\n  }\n\n  render() {\n    return html`\n      <!-- text binding -->\n      <div>${this.prop1}</div>\n\n      <!-- attribute binding -->\n      <div id=\"${this.prop2}\">attribute binding</div>\n\n      <!-- boolean attribute binding -->\n      <div>\n        boolean attribute binding\n        <input type=\"text\" ?disabled=\"${this.prop3}\"/>\n      </div>\n\n      <!-- property binding -->\n      <div>\n        property binding\n        <input type=\"text\" .value=\"${this.prop4}\"/>\n      </div>\n\n      <!-- event handler binding -->\n      <div>event handler binding\n        <button @click=\"${this.clickHandler}\">click</button>\n      </div>\n    `;\n  }\n\n  clickHandler(e) {\n    console.log(e.target);\n  }\n}\n\ncustomElements.define('my-element', MyElement);\n```\n\n----------------------------------------\n\nTITLE: Equivalent Code for @query Decorator in Lit\nDESCRIPTION: The manual implementation equivalent to using the @query decorator, showing the getter function that it generates behind the scenes.\nSOURCE: https://github.com/lit/lit.dev/blob/main/packages/lit-dev-content/site/docs/v2/components/shadow-dom.md#2025-04-09_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nget _first() {\n  return this.renderRoot?.querySelector('#first') ?? null;\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing render() Method in JavaScript\nDESCRIPTION: Demonstrates how to implement the render() method to return a renderable result for the component's DOM.\nSOURCE: https://github.com/lit/lit.dev/blob/main/packages/lit-dev-content/site/docs/v3/components/lifecycle.md#2025-04-09_snippet_8\n\nLANGUAGE: javascript\nCODE:\n```\nrender() {\n  const header = `<header>${this.header}</header>`;\n  const content = `<section>${this.content}</section>`;\n  return html`${header}${content}`;\n}\n```\n\n----------------------------------------\n\nTITLE: Child Node Expressions in Lit Templates\nDESCRIPTION: Examples of using expressions to render content between element tags. These expressions can accept primitive values, template results, DOM nodes, sentinel values, or arrays of any supported types.\nSOURCE: https://github.com/lit/lit.dev/blob/main/packages/lit-dev-content/site/docs/v3/templates/expressions.md#2025-04-09_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nhtml`\n<h1>Hello ${name}</h1>\n<ul>\n  ${listItems}\n</ul>`\n```\n\n----------------------------------------\n\nTITLE: Rendering Controller State in a Lit Component\nDESCRIPTION: Example of using a controller's state in a component's render method. The clock controller's value property is used to display the current time.\nSOURCE: https://github.com/lit/lit.dev/blob/main/packages/lit-dev-content/site/docs/v2/composition/controllers.md#2025-04-09_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nrender() {\n  return html`\n    <div>Current time: ${this.clock.value}</div>\n  `;\n}\n```\n\n----------------------------------------\n\nTITLE: Shared Counter Component with Auto-watching\nDESCRIPTION: Implements a shared counter component using SignalWatcher mixin with automatic signal watching.\nSOURCE: https://github.com/lit/lit.dev/blob/main/packages/lit-dev-content/site/docs/v3/data/signals.md#2025-04-09_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nimport {LitElement, html, css} from 'lit';\nimport {customElement} from 'lit/decorators.js';\nimport {SignalWatcher, signal} from '@lit-labs/signals';\n\nconst count = signal(0);\n\n@customElement('shared-counter')\nexport class SharedCounterComponent extends SignalWatcher(LitElement) {\n  static styles = css`\n    :host {\n      display: block;\n    }\n  `;\n\n  render() {\n    return html`\n      <p>The count is ${count.get()}</p>\n      <button @click=${this.#onClick}>Increment</button>\n    `;\n  }\n\n  #onClick() {\n    count.set(count.get() + 1);\n  }\n}\n```\n\nLANGUAGE: html\nCODE:\n```\n<!-- Both of these elements will show the same counter value -->\n<shared-counter></shared-counter>\n<shared-counter></shared-counter>\n```\n\n----------------------------------------\n\nTITLE: Using Expressions in Static Styles\nDESCRIPTION: Demonstrates how to use expressions in static styles, including the use of the unsafeCSS function for trusted inputs.\nSOURCE: https://github.com/lit/lit.dev/blob/main/packages/lit-dev-content/site/docs/v3/components/styles.md#2025-04-09_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nconst mainColor = css`red`;\n...\nstatic styles = css`\n  div { color: ${mainColor} }\n`;\n```\n\nLANGUAGE: javascript\nCODE:\n```\nconst mainColor = 'red';\n...\nstatic styles = css`\n  div { color: ${unsafeCSS(mainColor)} }\n`;\n```\n\n----------------------------------------\n\nTITLE: Customizing Event Listener Options Without Decorators in Lit\nDESCRIPTION: Demonstrates how to customize event listener options without using decorators by passing an object with a handleEvent method to the event listener expression. This approach also allows setting options like once.\nSOURCE: https://github.com/lit/lit.dev/blob/main/packages/lit-dev-content/site/docs/v3/components/events.md#2025-04-09_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nrender() {\n  return html`<button @click=${{handleEvent: () => this.onClick(), once: true}}>click</button>`\n}\n```\n\n----------------------------------------\n\nTITLE: Using the repeat Directive for Efficient List Rendering in Lit\nDESCRIPTION: Demonstrates the repeat directive syntax which takes items, a key function, and an item template function. This approach provides more efficient updates when reordering large lists by reusing DOM nodes based on item keys.\nSOURCE: https://github.com/lit/lit.dev/blob/main/packages/lit-dev-content/site/docs/v3/templates/lists.md#2025-04-09_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nrepeat(items, keyFunction, itemTemplate)\n```\n\n----------------------------------------\n\nTITLE: Creating Basic Lit Component - TypeScript\nDESCRIPTION: TypeScript implementation of a basic Lit component using decorators. Creates a custom element that displays a hello message.\nSOURCE: https://github.com/lit/lit.dev/blob/main/packages/lit-dev-content/site/docs/v2/tools/adding-lit.md#2025-04-09_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport {LitElement, html} from 'lit';\nimport {customElement} from 'lit/decorators.js';\n\n@customElement('my-element')\nclass MyElement extends LitElement {\n  render() {\n    return html`\n      <div>Hello from MyElement!</div>\n    `;\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Using Task Controller for Async Data Fetching in Lit (JavaScript)\nDESCRIPTION: JavaScript version of the Task controller example, showing how to fetch and render product data with loading, success, and error states.\nSOURCE: https://github.com/lit/lit.dev/blob/main/packages/lit-dev-content/site/docs/v3/data/task.md#2025-04-09_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport {Task} from '@lit/task';\n\nclass MyElement extends LitElement {\n  static properties = {\n    productId: {},\n  };\n\n  _productTask = new Task(this, {\n    task: async ([productId], {signal}) => {\n      const response = await fetch(`http://example.com/product/${productId}`, {signal});\n      if (!response.ok) { throw new Error(response.status); }\n      return response.json();\n    },\n    args: () => [this.productId]\n  });\n\n  render() {\n    return this._productTask.render({\n      pending: () => html`<p>Loading product...</p>`,\n      complete: (product) => html`\n          <h1>${product.name}</h1>\n          <p>${product.price}</p>\n        `,\n      error: (e) => html`<p>Error: ${e}</p>`\n    });\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Using keyed Directive in JavaScript Lit Component\nDESCRIPTION: Shows how to use the keyed directive in a JavaScript Lit component to ensure state clearing when critical data changes.\nSOURCE: https://github.com/lit/lit.dev/blob/main/packages/lit-dev-content/site/docs/v2/templates/directives.md#2025-04-09_snippet_26\n\nLANGUAGE: javascript\nCODE:\n```\nclass MyElement extends LitElement {\n  static properties = {\n    userId: {},\n  };\n\n  constructor() {\n    super();\n    this.userId = '';\n  }\n\n  render() {\n    return html`\n      <div>\n        ${keyed(this.userId, html`<user-card .userId=${this.userId}></user-card>`)}\n      </div>`;\n  }\n}\ncustomElements.define('my-element', MyElement);\n```\n\n----------------------------------------\n\nTITLE: Importing Join Directive in Lit\nDESCRIPTION: Import statement for the join directive used to interleave values in iterations.\nSOURCE: https://github.com/lit/lit.dev/blob/main/packages/lit-dev-content/site/docs/v2/templates/directives.md#2025-04-09_snippet_15\n\nLANGUAGE: javascript\nCODE:\n```\nimport {join} from 'lit/directives/join.js';\n```\n\n----------------------------------------\n\nTITLE: Adding Input Event Listener in Lit Template\nDESCRIPTION: Shows how to add a declarative input event listener to an input element for handling name changes.\nSOURCE: https://github.com/lit/lit.dev/blob/main/packages/lit-dev-content/site/tutorials/content/intro-to-lit/03.md#2025-04-09_snippet_1\n\nLANGUAGE: html\nCODE:\n```\n<input @input=${this.changeName} placeholder=\"Enter your name\">\n```\n\n----------------------------------------\n\nTITLE: Basic List Looping with TypeScript in Lit\nDESCRIPTION: Demonstrates how to build and render an array of templates using a for...of loop in a Lit component.\nSOURCE: https://github.com/lit/lit.dev/blob/main/packages/lit-dev-content/site/docs/v2/templates/lists.md#2025-04-09_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nrender() {\n  const itemTemplates = [];\n  for (const i of this.items) {\n    itemTemplates.push(html`<li>${i}</li>`);\n  }\n\n  return html`\n    <ul>\n      ${itemTemplates}\n    </ul>\n  `;\n}\n```\n\n----------------------------------------\n\nTITLE: Handling ShadyCSS style updates in connectedCallback\nDESCRIPTION: Shows how to properly update styles when using the ShadyCSS polyfill by calling styleElement in the connectedCallback lifecycle method, which is needed for dynamic style changes to work correctly.\nSOURCE: https://github.com/lit/lit.dev/blob/main/packages/lit-dev-content/site/docs/v1/lit-html/styling-templates.md#2025-04-09_snippet_5\n\nLANGUAGE: js\nCODE:\n```\nconnectedCallback() {\n  super.connectedCallback();\n  if (window.ShadyCSS !== undefined) {\n      window.ShadyCSS.styleElement(this);\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Window Event Listener Lifecycle Management\nDESCRIPTION: Demonstrates proper lifecycle management of window event listeners using connectedCallback and disconnectedCallback.\nSOURCE: https://github.com/lit/lit.dev/blob/main/packages/lit-dev-content/site/docs/v2/components/events.md#2025-04-09_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nconnectedCallback() {\n  super.connectedCallback();\n  window.addEventListener('resize', this._handleResize);\n}\ndisconnectedCallback() {\n  window.removeEventListener('resize', this._handleResize);\n  super.disconnectedCallback();\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a Lit Component in JavaScript\nDESCRIPTION: Shows how to create a basic Lit component using JavaScript without decorators. The component extends LitElement and uses customElements.define to register the element.\nSOURCE: https://github.com/lit/lit.dev/blob/main/packages/lit-dev-content/site/docs/v3/tools/adding-lit.md#2025-04-09_snippet_2\n\nLANGUAGE: js\nCODE:\n```\nimport {LitElement, html} from 'lit';\n\nclass MyElement extends LitElement {\n  render() {\n    return html`\n      <div>Hello from MyElement!</div>\n    `;\n  }\n}\ncustomElements.define('my-element', MyElement);\n```\n\n----------------------------------------\n\nTITLE: Designing a Performant Template with Property Binding (JavaScript)\nDESCRIPTION: Shows how to create a performant template by using property binding instead of direct DOM manipulation. This approach ensures the template updates efficiently when properties change.\nSOURCE: https://github.com/lit/lit.dev/blob/main/packages/lit-dev-content/site/docs/v1/components/templates.md#2025-04-09_snippet_1\n\nLANGUAGE: JavaScript\nCODE:\n```\nstatic get properties() {\n  return {\n    message: {type: String}\n  }\n}\n\nconstructor() {\n  super();\n  this.message = 'Loading';\n  this.addEventListener('stuff-loaded', (e) => { this.message = e.detail } );\n  this.loadStuff();\n}\nrender() {\n  return html`\n    <p>${this.message}</p>\n  `;\n}\n```\n\n----------------------------------------\n\nTITLE: Asynchronously Adding Event Listeners After Rendering in Lit\nDESCRIPTION: Shows how to add event listeners after the component has rendered using firstUpdated lifecycle method. This example includes waiting for the browser to paint before adding the listener, which can improve first render performance.\nSOURCE: https://github.com/lit/lit.dev/blob/main/packages/lit-dev-content/site/docs/v3/components/events.md#2025-04-09_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nasync firstUpdated() {\n  // Give the browser a chance to paint\n  await new Promise((r) => setTimeout(r, 0));\n  this.addEventListener('click', this._handleClick);\n}\n```\n\n----------------------------------------\n\nTITLE: Using Default Converter for Property Type in JavaScript\nDESCRIPTION: This snippet shows how to use the default converter by specifying the type option in a property declaration using JavaScript.\nSOURCE: https://github.com/lit/lit.dev/blob/main/packages/lit-dev-content/site/docs/v2/components/properties.md#2025-04-09_snippet_14\n\nLANGUAGE: javascript\nCODE:\n```\n// Use the default converter\nstatic properties = {\n  count: { type: Number },\n};\n\nconstructor() {\n  super();\n  this.count = 0;\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing noChange pattern in Lit Directives\nDESCRIPTION: Shows how to implement dirty checking in a directive by tracking previous values and returning noChange when no update is needed, optimizing rendering performance.\nSOURCE: https://github.com/lit/lit.dev/blob/main/packages/lit-dev-content/site/docs/v3/templates/custom-directives.md#2025-04-09_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\nimport {Directive} from 'lit/directive.js';\nimport {noChange} from 'lit';\nclass CalculateDiff extends Directive {\n  a?: string;\n  b?: string;\n  render(a: string, b: string) {\n    if (this.a !== a || this.b !== b) {\n      this.a = a;\n      this.b = b;\n      // Expensive & fancy text diffing algorithm\n      return calculateDiff(a, b);\n    }\n    return noChange;\n  }\n}\n```\n\nLANGUAGE: javascript\nCODE:\n```\nimport {Directive} from 'lit/directive.js';\nimport {noChange} from 'lit';\nclass CalculateDiff extends Directive {\n  render(a, b) {\n    if (this.a !== a || this.b !== b) {\n      this.a = a;\n      this.b = b;\n      // Expensive & fancy text diffing algorithm\n      return calculateDiff(a, b);\n    }\n    return noChange;\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Lit Component Class (TypeScript)\nDESCRIPTION: Example of defining a Lit component class using TypeScript decorators\nSOURCE: https://github.com/lit/lit.dev/blob/main/packages/lit-dev-content/site/docs/v3/tools/starter-kits.md#2025-04-09_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\n@customElement('my-element')\nexport class MyElement extends LitElement { /* ... */ }\n```\n\n----------------------------------------\n\nTITLE: Using the repeat Directive for Efficient List Rendering\nDESCRIPTION: Demonstrates the repeat directive for optimized list rendering when items need to be reordered frequently. This directive performs efficient DOM node reuse by tracking items with unique keys.\nSOURCE: https://github.com/lit/lit.dev/blob/main/packages/lit-dev-content/site/docs/v1/lit-html/writing-templates.md#2025-04-09_snippet_11\n\nLANGUAGE: javascript\nCODE:\n```\nimport {html} from 'lit-html';\nimport {repeat} from 'lit-html/directives/repeat.js';\n\nconst employeeList = (employees) => html`\n  <ul>\n    ${repeat(employees, (employee) => employee.id, (employee, index) => html`\n      <li>${index}: ${employee.familyName}, ${employee.givenName}</li>\n    `)}\n  </ul>\n`;\n```\n\n----------------------------------------\n\nTITLE: Task with Abort Checking\nDESCRIPTION: Shows how to implement abort checking in a task using signal.throwIfAborted() after async operations.\nSOURCE: https://github.com/lit/lit.dev/blob/main/packages/lit-dev-content/site/docs/v3/data/task.md#2025-04-09_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\n  private _task = new Task(this, {\n    task: async ([arg1], {signal}) => {\n      const firstResult = await doSomeWork(arg1);\n      signal.throwIfAborted();\n      const secondResult = await doMoreWork(firstResult);\n      signal.throwIfAborted();\n      return secondResult;\n    },\n  });\n```\n\nLANGUAGE: javascript\nCODE:\n```\n  _task = new Task(this, {\n    task: async ([arg1], {signal}) => {\n      const firstResult = await doSomeWork(arg1);\n      signal.throwIfAborted();\n      const secondResult = await doMoreWork(firstResult);\n      signal.throwIfAborted();\n      return secondResult;\n    },\n  });\n```\n\n----------------------------------------\n\nTITLE: Live Directive Usage Example\nDESCRIPTION: Demonstrates using the live directive to sync DOM values with the component state.\nSOURCE: https://github.com/lit/lit.dev/blob/main/packages/lit-dev-content/site/docs/v3/templates/directives.md#2025-04-09_snippet_33\n\nLANGUAGE: typescript\nCODE:\n```\n@customElement('my-element')\nclass MyElement extends LitElement {\n\n  @property()\n  data = {value: 'test'};\n\n  render() {\n    return html`<input .value=${live(this.data.value)}>`;\n  }\n}\n```\n\nLANGUAGE: javascript\nCODE:\n```\nclass MyElement extends LitElement {\n  static properties = {\n    data: {},\n  };\n\n  constructor() {\n    super();\n    this.data = {value: 'test'};\n  }\n\n  render() {\n    return html`<input .value=${live(this.data.value)}>`;\n  }\n}\ncustomElements.define('my-element', MyElement);\n```\n\n----------------------------------------\n\nTITLE: Using map Directive in TypeScript\nDESCRIPTION: Demonstrates how to use the map directive in a Lit element to render a list of items.\nSOURCE: https://github.com/lit/lit.dev/blob/main/packages/lit-dev-content/site/docs/v3/templates/directives.md#2025-04-09_snippet_11\n\nLANGUAGE: typescript\nCODE:\n```\nclass MyElement extends LitElement {\n  render() {\n    return html`\n      <ul>\n        ${map(items, (i) => html`<li>${i}</li>`)}\n      </ul>\n    `;\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Basic Event Dispatching in JavaScript\nDESCRIPTION: Creates and dispatches a custom event with the bubbles and composed flags set to true, allowing the event to propagate up the DOM tree and cross shadow DOM boundaries.\nSOURCE: https://github.com/lit/lit.dev/blob/main/packages/lit-dev-content/site/docs/v3/components/events.md#2025-04-09_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\nconst event = new Event('my-event', {bubbles: true, composed: true});\nmyElement.dispatchEvent(event);\n```\n\n----------------------------------------\n\nTITLE: Dispatching Composed Events in Shadow DOM\nDESCRIPTION: Shows how to dispatch events that can cross shadow DOM boundaries using both bubbles and composed flags, allowing ancestors to receive the event.\nSOURCE: https://github.com/lit/lit.dev/blob/main/packages/lit-dev-content/site/docs/v2/components/events.md#2025-04-09_snippet_9\n\nLANGUAGE: javascript\nCODE:\n```\n_dispatchMyEvent() {\n  let myEvent = new CustomEvent('my-event', {\n    detail: { message: 'my-event happened.' },\n    bubbles: true,\n    composed: true });\n  this.dispatchEvent(myEvent);\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing noChange pattern in Lit Directives\nDESCRIPTION: Shows how to implement dirty checking in a directive by tracking previous values and returning noChange when no update is needed, optimizing rendering performance.\nSOURCE: https://github.com/lit/lit.dev/blob/main/packages/lit-dev-content/site/docs/v3/templates/custom-directives.md#2025-04-09_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\nimport {Directive} from 'lit/directive.js';\nimport {noChange} from 'lit';\nclass CalculateDiff extends Directive {\n  a?: string;\n  b?: string;\n  render(a: string, b: string) {\n    if (this.a !== a || this.b !== b) {\n      this.a = a;\n      this.b = b;\n      // Expensive & fancy text diffing algorithm\n      return calculateDiff(a, b);\n    }\n    return noChange;\n  }\n}\n```\n\nLANGUAGE: javascript\nCODE:\n```\nimport {Directive} from 'lit/directive.js';\nimport {noChange} from 'lit';\nclass CalculateDiff extends Directive {\n  render(a, b) {\n    if (this.a !== a || this.b !== b) {\n      this.a = a;\n      this.b = b;\n      // Expensive & fancy text diffing algorithm\n      return calculateDiff(a, b);\n    }\n    return noChange;\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Using when Directive in Lit\nDESCRIPTION: Demonstrates how to use the when directive for conditional rendering in a Lit component.\nSOURCE: https://github.com/lit/lit.dev/blob/main/packages/lit-dev-content/site/docs/v3/templates/directives.md#2025-04-09_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\nclass MyElement extends LitElement {\n  render() {\n    return html`\n      ${when(this.user, () => html`User: ${this.user.username}`, () => html`Sign In...`)}\n    `;\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Accessing Event Target in Parent and Child Components\nDESCRIPTION: Demonstrates how event targets appear differently in parent components versus child components due to shadow DOM retargeting, with HTML and JavaScript examples.\nSOURCE: https://github.com/lit/lit.dev/blob/main/packages/lit-dev-content/site/docs/v2/components/events.md#2025-04-09_snippet_10\n\nLANGUAGE: html\nCODE:\n```\n<my-element onClick=\"(e) => console.log(e.target)\"></my-element>\n```\n\nLANGUAGE: javascript\nCODE:\n```\nrender() {\n  return html`\n    <button id=\"mybutton\" @click=\"${(e) => console.log(e.target)}\">\n      click me\n    </button>`;\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Switch-like Behavior with choose() Directive in Lit\nDESCRIPTION: Shows how to use the new choose() directive in Lit to implement switch-like behavior, rendering different content based on a value with fallback option.\nSOURCE: https://github.com/lit/lit.dev/blob/main/packages/lit-dev-content/site/blog/2022-01-05-lit-2.1-release.md#2025-04-09_snippet_4\n\nLANGUAGE: TypeScript\nCODE:\n```\nrender() {\n  return html`\n    ${choose(this.section, [\n      ['home', () => html`<h1>Home</h1>`],\n      ['about', () => html`<h1>About</h1>`]\n    ],\n    () => html`<h1>Error</h1>`)}\n  `;\n}\n```\n\n----------------------------------------\n\nTITLE: Manually triggering an update in LitElement\nDESCRIPTION: Example of how to manually trigger an update in a LitElement component using the requestUpdate method, which returns a Promise that resolves when the update is complete.\nSOURCE: https://github.com/lit/lit.dev/blob/main/packages/lit-dev-content/site/docs/v1/components/lifecycle.md#2025-04-09_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nimport { LitElement, html } from 'lit-element';\n\nclass MyElement extends LitElement {\n  firstUpdated() {\n    this.addEventListener('click', async (e) => {\n      console.log('Starting update');\n      await this.requestUpdate();\n      console.log('Finished update');\n    });\n  }\n  render() {\n    return html`<div>Click to update</div>`;\n  }\n}\ncustomElements.define('my-element', MyElement);\n```\n\n----------------------------------------\n\nTITLE: styleMap Usage Example - JavaScript\nDESCRIPTION: Example showing how to use styleMap directive in a Lit component with JavaScript.\nSOURCE: https://github.com/lit/lit.dev/blob/main/packages/lit-dev-content/site/docs/v2/templates/directives.md#2025-04-09_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\nclass MyElement extends LitElement {\n  static properties = {\n    enabled: {type: Boolean},\n  };\n\n  constructor() {\n    super();\n    this.enabled = false;\n  }\n\n  render() {\n    const styles = { backgroundColor: this.enabled ? 'blue' : 'gray', color: 'white' };\n    return html`<p style=${styleMap(styles)}>Hello style!</p>`;\n  }\n}\ncustomElements.define('my-element', MyElement);\n```\n\n----------------------------------------\n\nTITLE: Configuring package.json for Lit Component Publishing\nDESCRIPTION: Demonstrates the recommended package.json configuration for publishing a Lit component to npm, including the type, main, and module fields.\nSOURCE: https://github.com/lit/lit.dev/blob/main/packages/lit-dev-content/site/docs/v3/tools/publishing.md#2025-04-09_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"type\": \"module\",\n  \"main\": \"my-element.js\",\n  \"module\": \"my-element.js\"\n}\n```\n\n----------------------------------------\n\nTITLE: Composing Controllers from Other Controllers in TypeScript\nDESCRIPTION: DualClockController example showing how to build controllers by composing other controllers. This controller creates and manages two ClockController instances.\nSOURCE: https://github.com/lit/lit.dev/blob/main/packages/lit-dev-content/site/docs/v2/composition/controllers.md#2025-04-09_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\nclass DualClockController implements ReactiveController {\n  private clock1: ClockController;\n  private clock2: ClockController;\n\n  constructor(host: ReactiveControllerHost, delay1: number, delay2: number) {\n    this.clock1 = new ClockController(host, delay1);\n    this.clock2 = new ClockController(host, delay2);\n  }\n\n  get time1() { return this.clock1.value; }\n  get time2() { return this.clock2.value; }\n}\n```\n\n----------------------------------------\n\nTITLE: Dynamic Attribute Value in Lit Templates\nDESCRIPTION: Example of using expressions as part of attribute values in Lit templates. Shows how to dynamically set an image source by interpolating a value within the URL.\nSOURCE: https://github.com/lit/lit.dev/blob/main/packages/lit-dev-content/site/docs/v3/templates/expressions.md#2025-04-09_snippet_9\n\nLANGUAGE: javascript\nCODE:\n```\nhtml`<img src=\"/images/${this.image}\">`;\n```\n\n----------------------------------------\n\nTITLE: Reconciling Dependent Properties with willUpdate() in Lit\nDESCRIPTION: Shows how to use the willUpdate() lifecycle method to maintain consistency between interdependent reactive properties before rendering occurs, making it compatible with server-side rendering.\nSOURCE: https://github.com/lit/lit.dev/blob/main/packages/lit-dev-content/site/articles/article/lit-cheat-sheet.md#2025-04-09_snippet_29\n\nLANGUAGE: typescript\nCODE:\n```\nwillUpdate(changedProperties) {\n  if (changedProperties.has('min') || changedProperties.has('value')) {\n    this.value = Math.max(this.min, this.value);\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Computed Signals from Other Signals\nDESCRIPTION: Shows how to use computed() to create derived signal values. Computed signals automatically update when their dependency signals change, making it easy to transform and combine reactive values.\nSOURCE: https://github.com/lit/lit.dev/blob/main/packages/lit-dev-content/site/articles/article/lit-cheat-sheet.md#2025-04-09_snippet_46\n\nLANGUAGE: typescript\nCODE:\n```\n// See playground: articles/lit-cheat-sheet/signals-computed\n```\n\n----------------------------------------\n\nTITLE: Composing Templates with Imports\nDESCRIPTION: Shows how to compose templates by importing and using other custom elements within a template.\nSOURCE: https://github.com/lit/lit.dev/blob/main/packages/lit-dev-content/site/docs/v3/components/rendering.md#2025-04-09_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport {LitElement, html} from 'lit';\nimport {customElement} from 'lit/decorators.js';\n\n@customElement('my-article')\nexport class MyArticle extends LitElement {\n  render() {\n    return html`\n      <h1>My Component</h1>\n      <my-header></my-header>\n      <my-content></my-content>\n      <my-footer></my-footer>\n    `;\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Declaring Reactive Property with TypeScript Decorator in Lit\nDESCRIPTION: This snippet shows how to declare a reactive property named 'result' using the @property() decorator in a Lit component. This approach is used in TypeScript implementations.\nSOURCE: https://github.com/lit/lit.dev/blob/main/packages/lit-dev-content/site/tutorials/content/reactivity/01.md#2025-04-09_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n  @property()\n  result = '';\n```\n\n----------------------------------------\n\nTITLE: Handling Post-Update Tasks\nDESCRIPTION: Implementation of updated() callback for handling post-update DOM operations.\nSOURCE: https://github.com/lit/lit.dev/blob/main/packages/lit-dev-content/site/docs/v2/components/lifecycle.md#2025-04-09_snippet_10\n\nLANGUAGE: typescript\nCODE:\n```\nupdated(changedProperties: Map<string, any>) {\n  if (changedProperties.has('collapsed')) {\n    this._measureDOM();\n  }\n}\n```\n\nLANGUAGE: javascript\nCODE:\n```\nupdated(changedProperties) {\n  if (changedProperties.has('collapsed')) {\n    this._measureDOM();\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Extracting Messages with Lit Localize CLI (Shell)\nDESCRIPTION: Command to extract messages into XLIFF files for each target locale using the Lit Localize CLI.\nSOURCE: https://github.com/lit/lit.dev/blob/main/packages/lit-dev-content/site/docs/v3/localization/overview.md#2025-04-09_snippet_4\n\nLANGUAGE: sh\nCODE:\n```\nlit-localize extract\n```\n\n----------------------------------------\n\nTITLE: Using repeat Directive in JavaScript\nDESCRIPTION: Shows how to use the repeat directive in a Lit element using JavaScript class syntax.\nSOURCE: https://github.com/lit/lit.dev/blob/main/packages/lit-dev-content/site/docs/v3/templates/directives.md#2025-04-09_snippet_14\n\nLANGUAGE: javascript\nCODE:\n```\nclass MyElement extends LitElement {\n  static properties = {\n    items: {},\n  };\n\n  constructor() {\n    super();\n    this.items = [];\n  }\n\n  render() {\n    return html`\n      <ul>\n        ${repeat(this.items, (item) => item.id, (item, index) => html`\n          <li>${index}: ${item.name}</li>`)}\n      </ul>\n    `;\n  }\n}\ncustomElements.define('my-element', MyElement);\n```\n\n----------------------------------------\n\nTITLE: Adding Configuration Parameters to Controller in JavaScript\nDESCRIPTION: Extends the basic controller implementation in JavaScript to include additional configuration parameters. This example adds a timeout parameter to the ClockController.\nSOURCE: https://github.com/lit/lit.dev/blob/main/packages/lit-dev-content/site/docs/v3/composition/controllers.md#2025-04-09_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nclass ClockController {\n  constructor(host, timeout) {\n    this.host = host;\n    this.timeout = timeout;\n    host.addController(this);\n  }\n```\n\n----------------------------------------\n\nTITLE: DOM Node Rendering in Lit Templates\nDESCRIPTION: Example of directly rendering a DOM node in a Lit template. The node is attached to the DOM tree at the specified point and removed from any current parent.\nSOURCE: https://github.com/lit/lit.dev/blob/main/packages/lit-dev-content/site/docs/v3/templates/expressions.md#2025-04-09_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\nconst div = document.createElement('div');\nconst page = html`\n  ${div}\n  <p>This is some text</p>\n`;\n```\n\n----------------------------------------\n\nTITLE: Configuring Reactive Properties with Options in JavaScript\nDESCRIPTION: Shows how to use property options when declaring reactive properties in the static properties field in JavaScript.\nSOURCE: https://github.com/lit/lit.dev/blob/main/packages/lit-dev-content/site/docs/v2/components/properties.md#2025-04-09_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nclass MyElement extends LitElement {\n  static properties = {\n    mode: {type: String},\n    data: {attribute: false},\n  };\n\n  constructor() {\n    super();\n    this.data = {};\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Rendering List Items with Delete Buttons in Lit Template\nDESCRIPTION: Implements the render method that maps over an array of items to create list elements with delete buttons. Uses closure through arrow function to maintain correct index context for each delete button click handler.\nSOURCE: https://github.com/lit/lit.dev/blob/main/packages/lit-dev-content/site/tutorials/content/working-with-lists/06.md#2025-04-09_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nrender() {\n    return html`\n      ⋮\n      <ul>\n        ${map(\n          this.things,\n          (thing, index) => html`\n            <li>\n              ${thing}\n              <button @click=${() => this._deleteThing(index)}>Delete</button>\n            </li>\n          `\n        )}\n      </ul>\n    `;\n  }\n```\n\nLANGUAGE: javascript\nCODE:\n```\nrender() {\n    return html`\n      ⋮\n      <ul>\n        ${map(\n          this.things,\n          (thing, index) => html`\n            <li>\n              ${thing}\n              <button @click=${() => this._deleteThing(index)}>Delete</button>\n            </li>\n          `\n        )}\n      </ul>\n    `;\n  }\n```\n\n----------------------------------------\n\nTITLE: Attribute Expressions in Lit Templates\nDESCRIPTION: Shows how to bind dynamic values to HTML attributes. The expression's value will be converted to a string and set as the attribute value.\nSOURCE: https://github.com/lit/lit.dev/blob/main/packages/lit-dev-content/site/docs/v3/templates/expressions.md#2025-04-09_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nhtml`<div class=${highlightClass}></div>`\n```\n\n----------------------------------------\n\nTITLE: Creating a React Wrapper Component for a Custom Element\nDESCRIPTION: This snippet demonstrates how to use createComponent() to create a React wrapper for a custom element. It shows how to map events and use the resulting component.\nSOURCE: https://github.com/lit/lit.dev/blob/main/packages/lit-dev-content/site/docs/v3/frameworks/react.md#2025-04-09_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport React from 'react';\nimport {createComponent} from '@lit/react';\nimport {MyElement} from './my-element.js';\n\nexport const MyElementComponent = createComponent({\n  tagName: 'my-element',\n  elementClass: MyElement,\n  react: React,\n  events: {\n    onactivate: 'activate',\n    onchange: 'change',\n  },\n});\n```\n\nLANGUAGE: jsx\nCODE:\n```\n<MyElementComponent\n  active={isActive}\n  onactivate={(e) => setIsActive(e.active)}\n  onchange={handleChange}\n/>\n```\n\n----------------------------------------\n\nTITLE: Using 'this' in Declarative Event Handlers in Lit\nDESCRIPTION: Demonstrates how 'this' refers to the component instance in declarative event handlers in Lit templates.\nSOURCE: https://github.com/lit/lit.dev/blob/main/packages/lit-dev-content/site/docs/v1/components/events.md#2025-04-09_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nclass MyElement extends LitElement {\n  render() {\n    return html`<button @click=\"${this._handleClick}\">click</button>`;\n  }\n  _handleClick(e) {\n    console.log(this.prop);\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Initializing Properties in Constructor\nDESCRIPTION: Example of setting default property values in a Lit component's constructor method. This is commonly used when not using decorators for property declarations.\nSOURCE: https://github.com/lit/lit.dev/blob/main/packages/lit-dev-content/site/docs/v2/components/lifecycle.md#2025-04-09_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconstructor() {\n  super();\n  this.foo = 'foo';\n  this.bar = 'bar';\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Context Value Dynamically\nDESCRIPTION: Example showing how to programmatically set a context value using the setValue method on ContextProvider. This allows changing the context value in response to events or other triggers.\nSOURCE: https://github.com/lit/lit.dev/blob/main/packages/lit-dev-content/site/docs/v2/data/context.md#2025-04-09_snippet_11\n\nLANGUAGE: typescript\nCODE:\n```\n  this._provider.setValue(myData);\n```\n\n----------------------------------------\n\nTITLE: Implementing a Mediator Pattern in Lit\nDESCRIPTION: This example shows how to implement the mediator pattern in Lit. The mediator element manages the state and interactions between child components, demonstrating the 'properties down, events up' principle.\nSOURCE: https://github.com/lit/lit.dev/blob/main/packages/lit-dev-content/site/docs/v2/composition/component-composition.md#2025-04-09_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\n{% playground-example \"v2-docs/composition/mediator-pattern\" \"mediator-element.ts\" %}\n```\n\n----------------------------------------\n\nTITLE: Managing Asynchronous Tasks in Lit with @lit/task\nDESCRIPTION: Shows how to use the @lit/task package to handle asynchronous operations within a Lit component. The example fetches Pokemon data from an API and manages loading, error, and success states.\nSOURCE: https://github.com/lit/lit.dev/blob/main/packages/lit-dev-content/site/articles/article/lit-cheat-sheet.md#2025-04-09_snippet_33\n\nLANGUAGE: typescript\nCODE:\n```\n{% playground-ide \"articles/lit-cheat-sheet/task\", true %}\n```\n\n----------------------------------------\n\nTITLE: Using Property Decorator with Custom Accessor in TypeScript\nDESCRIPTION: Demonstrates how to use the @property decorator with a custom getter and setter in a TypeScript-based LitElement component.\nSOURCE: https://github.com/lit/lit.dev/blob/main/packages/lit-dev-content/site/docs/v1/components/properties.md#2025-04-09_snippet_12\n\nLANGUAGE: TypeScript\nCODE:\n```\nprivate _myProp: string = '';\n\n@property({ type: String })\nget myProp(): string {\n  return this._myProp;\n}\nset myProp(value: string) {\n  const oldValue = this._myProp;\n  this._myProp = value;\n  this.requestUpdate('myProp', oldValue);\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Encapsulated Styles in Lit Component\nDESCRIPTION: This snippet shows how to define encapsulated styles for a Lit component using the static styles class field. It creates a style for completed items with a line-through decoration and gray color.\nSOURCE: https://github.com/lit/lit.dev/blob/main/packages/lit-dev-content/site/tutorials/content/intro-to-lit/06.md#2025-04-09_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nstatic styles = css`\n  .completed {\n    text-decoration-line: line-through;\n    color: #777;\n  }\n`;\n```\n\n----------------------------------------\n\nTITLE: Boolean Attribute Expressions in Lit Templates\nDESCRIPTION: Demonstrates using the '?' prefix to conditionally add or remove boolean attributes based on the expression value. The attribute is added for truthy values and removed for falsy values.\nSOURCE: https://github.com/lit/lit.dev/blob/main/packages/lit-dev-content/site/docs/v3/templates/expressions.md#2025-04-09_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nhtml`<div ?hidden=${!show}></div>`\n```\n\n----------------------------------------\n\nTITLE: Rendering Child Elements with Slots (JavaScript)\nDESCRIPTION: Shows how to use the <slot> element in a LitElement template to render child elements passed to the component.\nSOURCE: https://github.com/lit/lit.dev/blob/main/packages/lit-dev-content/site/docs/v1/components/templates.md#2025-04-09_snippet_4\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport { LitElement, html } from 'lit-element';\n\nclass MyElement extends LitElement {\n  render() {\n    return html`\n      <div>\n        <slot></slot>\n      </div>\n    `;\n  }\n}\n\ncustomElements.define('my-element', MyElement);\n```\n\n----------------------------------------\n\nTITLE: Implementing Template Rendering with Lit SSR\nDESCRIPTION: Sets up a template rendering function using Lit's SSR capabilities. This module exports a renderTemplate function that takes data and renders it using Lit's render function.\nSOURCE: https://github.com/lit/lit.dev/blob/main/packages/lit-dev-content/site/docs/v2/ssr/server-usage.md#2025-04-09_snippet_8\n\nLANGUAGE: javascript\nCODE:\n```\n// render-template.js\nimport {render} from '@lit-labs/ssr';\nimport {myTemplate} from './my-template.js';\n\nexport const renderTemplate = (someData) => {\n  return render(myTemplate(someData));\n};\n```\n\n----------------------------------------\n\nTITLE: Configuring TypeScript for Standard Decorators\nDESCRIPTION: TypeScript configuration for migrating from experimental to standard decorators after adding 'accessor' keywords to decorated properties.\nSOURCE: https://github.com/lit/lit.dev/blob/main/packages/lit-dev-content/site/docs/v3/components/decorators.md#2025-04-09_snippet_4\n\nLANGUAGE: json\nCODE:\n```\n// tsconfig.json\n{\n  \"compilerOptions\": {\n    \"experimentalDecorators\": false, // default for TypeScript 5.0 and up\n    \"useDefineForClassFields\": true, // default when \"target\" is \"ES2022\" or higher\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: TypeScript Type Definition for Changed Properties\nDESCRIPTION: Example showing how to properly type the changedProperties parameter using PropertyValues<this> for strong type checking in TypeScript.\nSOURCE: https://github.com/lit/lit.dev/blob/main/packages/lit-dev-content/site/docs/v2/components/lifecycle.md#2025-04-09_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nimport {LitElement, html, PropertyValues} from 'lit';\n...\n  shouldUpdate(changedProperties: PropertyValues<this>) {\n    ...\n  }\n```\n\n----------------------------------------\n\nTITLE: Event Listener Expressions in Lit Templates\nDESCRIPTION: Shows how to add event listeners to elements in Lit templates and demonstrates two-way data binding with input elements.\nSOURCE: https://github.com/lit/lit.dev/blob/main/packages/lit-dev-content/site/articles/article/lit-cheat-sheet.md#2025-04-09_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\n@customElement('my-element')\nexport class MyElement extends LitElement {\n  @property({type: String})\n  myString = '';\n\n  render() {\n    return html`\n      <button @click=${this._handleClick}>Click me!</button>\n      <input @input=${this._handleInput} .value=${this.myString}>\n    `;\n  }\n\n  private _handleClick() {\n    console.log('Button clicked!');\n  }\n\n  private _handleInput(e: Event) {\n    this.myString = (e.target as HTMLInputElement).value;\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Shared Counter with Pinpoint Updates\nDESCRIPTION: Implements a shared counter component using the watch() directive for targeted updates.\nSOURCE: https://github.com/lit/lit.dev/blob/main/packages/lit-dev-content/site/docs/v3/data/signals.md#2025-04-09_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nimport {LitElement, html} from 'lit';\nimport {customElement} from 'lit/decorators.js';\nimport {SignalWatcher, watch, signal} from '@lit-labs/signals';\n\nconst count = signal(0);\n\n@customElement('shared-counter')\nexport class SharedCounterComponent extends SignalWatcher(LitElement) {\n  static styles = css`\n    :host {\n      display: block;\n    }\n  `;\n\n  render() {\n    return html`\n      <p>The count is ${watch(count)}</p>\n      <button @click=${this.#onClick}>Increment</button>\n    `;\n  }\n\n  #onClick() {\n    count.set(count.get() + 1);\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: HTML Plugin System Example using Context\nDESCRIPTION: An example showing how to build an HTML-based plugin system using context, where a code editor element can have language mode plugins added as child elements.\nSOURCE: https://github.com/lit/lit.dev/blob/main/packages/lit-dev-content/site/docs/v2/data/context.md#2025-04-09_snippet_15\n\nLANGUAGE: html\nCODE:\n```\n<code-editor>\n  <code-editor-javascript-mode></code-editor-javascript-mode>\n  <code-editor-python-mode></code-editor-python-mode>\n</code-editor>\n```\n\n----------------------------------------\n\nTITLE: Creating a localizable Lit component in TypeScript\nDESCRIPTION: A TypeScript example showing how to create a Lit component with localizable content using the msg function for localization.\nSOURCE: https://github.com/lit/lit.dev/blob/main/packages/lit-dev-content/site/docs/v2/localization/overview.md#2025-04-09_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport {html, LitElement} from 'lit';\nimport {customElement, property} from 'lit/decorators.js';\nimport {msg} from '@lit/localize';\n\n@customElement('my-greeter')\nclass MyGreeter extends LitElement {\n  @property()\n  who = 'World';\n\n  render() {\n    return msg(html`Hello <b>${this.who}</b>`);\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Rendering Single Custom Element\nDESCRIPTION: Demonstrates how to render a single custom element using Lit SSR.\nSOURCE: https://github.com/lit/lit.dev/blob/main/packages/lit-dev-content/site/docs/v2/ssr/server-usage.md#2025-04-09_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nconst result = render(html`<my-element></my-element>`);\n```\n\n----------------------------------------\n\nTITLE: Property Expressions in Lit Templates\nDESCRIPTION: Shows how to bind values directly to DOM element properties using the '.' prefix. This allows setting properties that don't have corresponding attributes.\nSOURCE: https://github.com/lit/lit.dev/blob/main/packages/lit-dev-content/site/docs/v3/templates/expressions.md#2025-04-09_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nhtml`<input .value=${value}>`\n```\n\n----------------------------------------\n\nTITLE: Using classMap Directive in Lit (JavaScript)\nDESCRIPTION: Shows how to use the classMap directive in a JavaScript Lit component to dynamically set classes.\nSOURCE: https://github.com/lit/lit.dev/blob/main/packages/lit-dev-content/site/docs/v3/templates/directives.md#2025-04-09_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nclass MyElement extends LitElement {\n  static properties = {\n    enabled: {type: Boolean},\n  };\n\n  constructor() {\n    super();\n    this.enabled = false;\n  }\n\n  render() {\n    const classes = { enabled: this.enabled, hidden: false };\n    return html`<div class=${classMap(classes)}>Classy text</div>`;\n  }\n}\ncustomElements.define('my-element', MyElement);\n```\n\n----------------------------------------\n\nTITLE: Hydrating Standalone Lit Templates with hydrate() Method\nDESCRIPTION: This snippet demonstrates how to use the hydrate() method from @lit-labs/ssr-client to re-apply reactivity to server-rendered Lit templates before using render() for updates. It requires matching the same template and data used during server-side rendering for initial hydration.\nSOURCE: https://github.com/lit/lit.dev/blob/main/packages/lit-dev-content/site/docs/v2/ssr/client-usage.md#2025-04-09_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport {render} from 'lit';\nimport {hydrate} from '@lit-labs/ssr-client';\nimport {myTemplate} from './my-template.js';\n// Initial hydration required before render:\n// (must be same data used to render on the server)\nconst initialData = getInitialAppData();\nhydrate(myTemplate(initialData), document.body);\n\n// After hydration, render will efficiently update the server-rendered DOM:\nconst update = (data) => render(myTemplate(data), document.body);\n```\n\n----------------------------------------\n\nTITLE: Initializing Properties in Constructor\nDESCRIPTION: Example of setting default property values in a Lit component's constructor. This is useful for one-time initialization tasks that must be done before the first update cycle.\nSOURCE: https://github.com/lit/lit.dev/blob/main/packages/lit-dev-content/site/docs/v3/components/lifecycle.md#2025-04-09_snippet_0\n\nLANGUAGE: js\nCODE:\n```\nconstructor() {\n  super();\n  this.foo = 'foo';\n  this.bar = 'bar';\n}\n```\n\n----------------------------------------\n\nTITLE: Single Element Rendering\nDESCRIPTION: Example demonstrating how to render a single custom element using Lit SSR.\nSOURCE: https://github.com/lit/lit.dev/blob/main/packages/lit-dev-content/site/docs/v3/ssr/server-usage.md#2025-04-09_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nimport {html} from 'lit';\nimport './my-element.js';\n\nconst result = render(html`<my-element></my-element>`);\n```\n\n----------------------------------------\n\nTITLE: Server Implementation with JavaScript\nDESCRIPTION: JavaScript implementation of a Koa middleware that uses Lit's ModuleLoader to load and render templates in a VM context. Uses standard Node.js Readable stream.\nSOURCE: https://github.com/lit/lit.dev/blob/main/packages/lit-dev-content/site/docs/v2/ssr/server-usage.md#2025-04-09_snippet_10\n\nLANGUAGE: javascript\nCODE:\n```\n// server.js\nimport {ModuleLoader} from '@lit-labs/ssr/lib/module-loader.js';\n\n// ...\n\n// within a Koa middleware, for example\napp.use(async (ctx) => {\n  const moduleLoader = new ModuleLoader();\n  const importResult = await moduleLoader.importModule(\n    './render-template.js',  // Module to load in VM context\n    import.meta.url          // Referrer URL for module\n  );\n  const {renderTemplate} = importResult.module.namespace;\n  const ssrResult = await renderTemplate({some: \"data\"});\n  ctx.type = 'text/html';\n  ctx.body = Readable.from(ssrResult);\n});\n```\n\n----------------------------------------\n\nTITLE: Using Effects to React to Signal Changes\nDESCRIPTION: Demonstrates how to use the experimental effect() function to execute side effects in response to signal changes. This allows for running arbitrary code when signal values are updated without modifying the template.\nSOURCE: https://github.com/lit/lit.dev/blob/main/packages/lit-dev-content/site/articles/article/lit-cheat-sheet.md#2025-04-09_snippet_47\n\nLANGUAGE: typescript\nCODE:\n```\n// See playground: articles/lit-cheat-sheet/signals-effect\n```\n\n----------------------------------------\n\nTITLE: Calling requestUpdate() with Custom Property in JavaScript\nDESCRIPTION: Shows how to call requestUpdate() with a property name and previous value, useful for custom getters and setters.\nSOURCE: https://github.com/lit/lit.dev/blob/main/packages/lit-dev-content/site/docs/v3/components/lifecycle.md#2025-04-09_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nthis.requestUpdate('state', this._previousState);\n```\n\n----------------------------------------\n\nTITLE: Dispatching CustomEvent with Detail Data\nDESCRIPTION: Creates and dispatches a CustomEvent with data passed in the detail property. This allows passing structured data along with the event.\nSOURCE: https://github.com/lit/lit.dev/blob/main/packages/lit-dev-content/site/docs/v3/components/events.md#2025-04-09_snippet_8\n\nLANGUAGE: javascript\nCODE:\n```\nconst event = new CustomEvent('my-event', {\n  detail: {\n    message: 'Something important happened'\n  }\n});\nthis.dispatchEvent(event);\n```\n\n----------------------------------------\n\nTITLE: Cache Directive Usage Example\nDESCRIPTION: Demonstrates using the cache directive to optimize rendering performance when switching between views.\nSOURCE: https://github.com/lit/lit.dev/blob/main/packages/lit-dev-content/site/docs/v3/templates/directives.md#2025-04-09_snippet_24\n\nLANGUAGE: typescript\nCODE:\n```\nconst detailView = (data) => html`<div>...</div>`;\nconst summaryView = (data) => html`<div>...</div>`;\n\n@customElement('my-element')\nclass MyElement extends LitElement {\n\n  @property()\n  data = {showDetails: true, /*...*/ };\n\n  render() {\n    return html`${cache(this.data.showDetails\n      ? detailView(this.data)\n      : summaryView(this.data)\n    )}`;\n  }\n}\n```\n\nLANGUAGE: javascript\nCODE:\n```\nconst detailView = (data) => html`<div>...</div>`;\nconst summaryView = (data) => html`<div>...</div>`;\n\nclass MyElement extends LitElement {\n  static properties = {\n    data: {},\n  };\n\n  constructor() {\n    super();\n    this.data = {showDetails: true, /*...*/ };\n  }\n\n  render() {\n    return html`${cache(this.data.showDetails\n      ? detailView(this.data)\n      : summaryView(this.data)\n    )}`;\n  }\n}\ncustomElements.define('my-element', MyElement);\n```\n\n----------------------------------------\n\nTITLE: Running Rollup Build for Lit Application\nDESCRIPTION: Command to execute the Rollup build process using the configuration file.\nSOURCE: https://github.com/lit/lit.dev/blob/main/packages/lit-dev-content/site/docs/v2/tools/production.md#2025-04-09_snippet_2\n\nLANGUAGE: sh\nCODE:\n```\nrollup -c\n```\n\n----------------------------------------\n\nTITLE: Creating Basic Lit Component - JavaScript\nDESCRIPTION: JavaScript implementation of a basic Lit component. Creates a custom element that displays a hello message using standard Custom Elements define method.\nSOURCE: https://github.com/lit/lit.dev/blob/main/packages/lit-dev-content/site/docs/v2/tools/adding-lit.md#2025-04-09_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nimport {LitElement, html} from 'lit';\n\nclass MyElement extends LitElement {\n  render() {\n    return html`\n      <div>Hello from MyElement!</div>\n    `;\n  }\n}\ncustomElements.define('my-element', MyElement);\n```\n\n----------------------------------------\n\nTITLE: Implementing the render method in Lit components\nDESCRIPTION: Example of a render method in a Lit component, showing how to create a template with text, data bindings, event handlers, and slots.\nSOURCE: https://github.com/lit/lit.dev/blob/main/packages/lit-dev-content/site/docs/v2/tools/starter-kits.md#2025-04-09_snippet_5\n\nLANGUAGE: js\nCODE:\n```\nexport class MyElement extends LitElement {\n  // ...\n  render() {\n    return html`\n      <h1>Hello, ${this.name}!</h1>\n      <button @click=${this._onClick}>\n        Click Count: ${this.count}\n      </button>\n      <slot></slot>\n    `;\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Default Target in connectedCallback for Lit Component\nDESCRIPTION: Adds logic to the connectedCallback to set a default target if one hasn't been explicitly set. It uses the nullish assignment operator to set the target to the previous element sibling.\nSOURCE: https://github.com/lit/lit.dev/blob/main/packages/lit-dev-content/site/tutorials/content/tooltip/03.md#2025-04-09_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nconnectedCallback() {\n  //...\n  this.target ??= this.previousElementSibling;\n}\n```\n\n----------------------------------------\n\nTITLE: LitElement Component Definition in JavaScript\nDESCRIPTION: Creates a Web Component using LitElement base class with JavaScript class properties syntax.\nSOURCE: https://github.com/lit/lit.dev/blob/main/packages/lit-dev-content/site/blog/2019-02-05-lit-element-and-lit-html-release.md#2025-04-09_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nclass NameTag extends LitElement {\n  static properties = {\n    name: {},\n  };\n\n  constructor() {\n    super();\n    this.name = 'a secret';\n  }\n\n  render() {\n    return html`<p>Hi, my name is ${this.name}!</p>`;\n  }\n}\ncustomElements.define('name-tag', NameTag);\n```\n\n----------------------------------------\n\nTITLE: Implementing Lazy Loading for Tooltips in TypeScript\nDESCRIPTION: A static method that enables lazy creation of tooltip elements. It sets up event listeners on the target element and creates the tooltip only when needed, improving initial page rendering performance for applications with many tooltips.\nSOURCE: https://github.com/lit/lit.dev/blob/main/packages/lit-dev-content/site/tutorials/content/tooltip/07.md#2025-04-09_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n// Lazy creation\nstatic lazy(target: Element, callback: (target: SimpleTooltip) => void) {\n  const createTooltip = () => {\n    const tooltip = document.createElement('simple-tooltip') as SimpleTooltip;\n    callback(tooltip);\n    target.parentNode!.insertBefore(tooltip, target.nextSibling);\n    tooltip.show();\n    // We only need to create the tooltip once, so ignore all future events.\n    enterEvents.forEach(\n      (eventName) => target.removeEventListener(eventName, createTooltip));\n  };\n  enterEvents.forEach(\n    (eventName) => target.addEventListener(eventName, createTooltip));\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing a Stateful Class-based Directive\nDESCRIPTION: Shows how to create a class-based directive with a constructor and class fields for maintaining state between renders.\nSOURCE: https://github.com/lit/lit.dev/blob/main/packages/lit-dev-content/site/docs/v2/templates/custom-directives.md#2025-04-09_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nclass MyDirective extends Directive {\n  // Class fields will be initialized once and can be used to persist\n  // state between renders\n  value = 0;\n  // Constructor is only run the first time a given directive is used\n  // in an expression\n  constructor(partInfo: PartInfo) {\n    super(partInfo);\n    console.log('MyDirective created');\n  }\n  ...\n}\n```\n\n----------------------------------------\n\nTITLE: Property Expression in Lit Templates\nDESCRIPTION: Demonstrates setting element properties using the . prefix with expressions.\nSOURCE: https://github.com/lit/lit.dev/blob/main/packages/lit-dev-content/site/docs/v2/templates/expressions.md#2025-04-09_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nhtml`<input .value=${value}>`\n```\n\n----------------------------------------\n\nTITLE: Configuring Transform Localization (JavaScript)\nDESCRIPTION: This snippet shows how to configure transform localization using the configureTransformLocalization function, setting the source locale and obtaining the getLocale function.\nSOURCE: https://github.com/lit/lit.dev/blob/main/packages/lit-dev-content/site/docs/v3/localization/transform-mode.md#2025-04-09_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport {configureTransformLocalization} from '@lit/localize';\n\nexport const {getLocale} = configureTransformLocalization({\n  sourceLocale: 'en',\n});\n```\n\n----------------------------------------\n\nTITLE: ContextProvider with Initial Value\nDESCRIPTION: Example showing how to initialize a ContextProvider with an initial value in the constructor. This provides the context value immediately upon instantiation.\nSOURCE: https://github.com/lit/lit.dev/blob/main/packages/lit-dev-content/site/docs/v2/data/context.md#2025-04-09_snippet_10\n\nLANGUAGE: typescript\nCODE:\n```\n  private _provider = new ContextProvider(this, myContext, initialData);\n```\n\n----------------------------------------\n\nTITLE: Implementing To-Do List Handler in TypeScript\nDESCRIPTION: Shows how to implement input handling and list item addition using TypeScript with Lit's @query decorator for DOM element selection.\nSOURCE: https://github.com/lit/lit.dev/blob/main/packages/lit-dev-content/site/tutorials/content/intro-to-lit/05.md#2025-04-09_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\n@query('#newitem')\ninput!: HTMLInputElement;\n\naddToDo() {\n  this._listItems = [...this._listItems,\n      {text: this.input.value, completed: false}];\n  this.input.value = '';\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Localized LitElement in JavaScript\nDESCRIPTION: Example of a LitElement class using updateWhenLocaleChanges for automatic re-rendering on locale changes in JavaScript.\nSOURCE: https://github.com/lit/lit.dev/blob/main/packages/lit-dev-content/site/docs/v3/localization/runtime-mode.md#2025-04-09_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nimport {LitElement, html} from 'lit';\nimport {msg, updateWhenLocaleChanges} from '@lit/localize';\n\nclass MyElement extends LitElement {\n  constructor() {\n    super();\n    updateWhenLocaleChanges(this);\n  }\n\n  render() {\n    // Whenever setLocale() is called, and templates for that locale have\n    // finished loading, this render() function will be re-invoked.\n    return msg(html`Hello <b>World!</b>`);\n  }\n}\ncustomElements.define('my-element', MyElement);\n```\n\n----------------------------------------\n\nTITLE: Using Public Fields in Lit Components\nDESCRIPTION: Example of using public instance fields and static fields in Lit components for defining styles.\nSOURCE: https://github.com/lit/lit.dev/blob/main/packages/lit-dev-content/site/articles/article/lit-for-polymer-users.md#2025-04-09_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nstatic styles = [ css`:host { display: block; }` ];\n```\n\n----------------------------------------\n\nTITLE: Creating Derived Read-Only State with Native Getters in Lit\nDESCRIPTION: Demonstrates how to implement derived state using native JavaScript getters to compute values based on other properties without storing redundant state.\nSOURCE: https://github.com/lit/lit.dev/blob/main/packages/lit-dev-content/site/articles/article/lit-cheat-sheet.md#2025-04-09_snippet_28\n\nLANGUAGE: typescript\nCODE:\n```\n@property() firstName = '';\n@property() lastName = '';\n\nget fullName() {\n  return `${this.firstName} ${this.lastName}`;\n}\n```\n\nLANGUAGE: javascript\nCODE:\n```\nstatic properties = {\n  firstName: {},\n  lastName: {},\n};\n\nconstructor() {\n  super();\n  this.firstName = '';\n  this.lastName = '';\n}\n\nget fullName() {\n  return `${this.firstName} ${this.lastName}`;\n}\n```\n\n----------------------------------------\n\nTITLE: Using updateComplete in Event Handling with JavaScript\nDESCRIPTION: Shows how to use the updateComplete promise to ensure the DOM is updated before dispatching an event.\nSOURCE: https://github.com/lit/lit.dev/blob/main/packages/lit-dev-content/site/docs/v3/components/lifecycle.md#2025-04-09_snippet_11\n\nLANGUAGE: javascript\nCODE:\n```\nasync _loginClickHandler() {\n  this.loggedIn = true;\n  // Wait for `loggedIn` state to be rendered to the DOM\n  await this.updateComplete;\n  this.dispatchEvent(new Event('login'));\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Reactive Property in JavaScript for Lit Component\nDESCRIPTION: This code demonstrates how to define a reactive property 'result' in a Lit component using JavaScript. It uses the static properties object to declare the property.\nSOURCE: https://github.com/lit/lit.dev/blob/main/packages/lit-dev-content/site/tutorials/content/reactivity/01.md#2025-04-09_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nexport class MyElement extends LitElement {\n\n  static properties = {\n    result: {},\n  };\n```\n\n----------------------------------------\n\nTITLE: Sharing Styles Between Lit Components\nDESCRIPTION: Demonstrates how to create and use shared styles between multiple Lit components using a separate module.\nSOURCE: https://github.com/lit/lit.dev/blob/main/packages/lit-dev-content/site/docs/v3/components/styles.md#2025-04-09_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nexport const buttonStyles = css`\n  .blue-button {\n    color: white;\n    background-color: blue;\n  }\n  .blue-button:disabled {\n    background-color: grey;\n  }`;\n```\n\nLANGUAGE: javascript\nCODE:\n```\nimport { buttonStyles } from './button-styles.js';\n\nclass MyElement extends LitElement {\n  static styles = [\n    buttonStyles,\n    css`\n      :host { display: block;\n        border: 1px solid black;\n      }`\n  ];\n}\n```\n\n----------------------------------------\n\nTITLE: Defining a Basic Template in LitElement (JavaScript)\nDESCRIPTION: Demonstrates how to define a simple template for a LitElement component using the render method and html tag function.\nSOURCE: https://github.com/lit/lit.dev/blob/main/packages/lit-dev-content/site/docs/v1/components/templates.md#2025-04-09_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport { LitElement, html } from 'lit-element';\n\nclass MyElement extends LitElement {\n  render() {\n    return html`<p>template content</p>`;\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Locale Picker Component Implementation\nDESCRIPTION: Custom element implementation for switching between different locales, shown in both TypeScript and JavaScript.\nSOURCE: https://github.com/lit/lit.dev/blob/main/packages/lit-dev-content/site/docs/v2/localization/transform-mode.md#2025-04-09_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nimport {LitElement, html} from 'lit';\nimport {customElement} from 'lit/decorators.js';\nimport {getLocale} from './localization.js';\nimport {allLocales} from './generated/locales.js';\n\n@customElement('locale-picker');\nexport class LocalePicker extends LitElement {\n  render() {\n    return html`\n      <select @change=${this.localeChanged}>\n        ${allLocales.map(\n          (locale) =>\n            html`<option value=${locale} selected=${locale === getLocale()}>\n              ${locale}\n            </option>`\n        )}\n      </select>\n    `;\n  }\n\n  localeChanged(event: Event) {\n    const newLocale = (event.target as HTMLSelectElement).value;\n    const url = new URL(window.location.href);\n    if (url.searchParams.get('locale') !== newLocale) {\n      url.searchParams.set('locale', newLocale);\n      window.location.assign(url.href);\n    }\n  }\n}\n```\n\nLANGUAGE: javascript\nCODE:\n```\nimport {LitElement, html} from 'lit';\nimport {getLocale} from './localization.js';\nimport {allLocales} from './generated/locales.js';\n\nexport class LocalePicker extends LitElement {\n  render() {\n    return html`\n      <select @change=${this.localeChanged}>\n        ${allLocales.map(\n          (locale) =>\n            html`<option value=${locale} selected=${locale === getLocale()}>\n              ${locale}\n            </option>`\n        )}\n      </select>\n    `;\n  }\n\n  localeChanged(event) {\n    const newLocale = event.target.value;\n    const url = new URL(window.location.href);\n    if (url.searchParams.get('locale') !== newLocale) {\n      url.searchParams.set('locale', newLocale);\n      window.location.assign(url.href);\n    }\n  }\n}\ncustomElements.define('locale-picker', LocalePicker);\n```\n\n----------------------------------------\n\nTITLE: Importing Decorators from Lit Module\nDESCRIPTION: Demonstrates how to import all Lit decorators from the lit/decorators.js module.\nSOURCE: https://github.com/lit/lit.dev/blob/main/packages/lit-dev-content/site/docs/v3/components/decorators.md#2025-04-09_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport {customElement, property, eventOptions, query} from 'lit/decorators.js';\n```\n\n----------------------------------------\n\nTITLE: Abortable Task Implementation with Signal\nDESCRIPTION: Demonstrates how to implement a task that can be aborted using AbortSignal, particularly useful with fetch requests.\nSOURCE: https://github.com/lit/lit.dev/blob/main/packages/lit-dev-content/site/docs/v3/data/task.md#2025-04-09_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\n  private _task = new Task(this, {\n    task: async (args, {signal}) => {\n      const response = await fetch(someUrl, {signal});\n      // ...\n    },\n  });\n```\n\nLANGUAGE: javascript\nCODE:\n```\n  _task = new Task(this, {\n    task: async (args, {signal}) => {\n      const response = await fetch(someUrl, {signal});\n      // ...\n    },\n  });\n```\n\n----------------------------------------\n\nTITLE: Light DOM Children Example in HTML\nDESCRIPTION: Example showing how to provide light DOM children to a Lit component. The top-bar component receives an icon-button and a text span as children, with slots used to position them within the component.\nSOURCE: https://github.com/lit/lit.dev/blob/main/packages/lit-dev-content/site/docs/v3/composition/component-composition.md#2025-04-09_snippet_2\n\nLANGUAGE: html\nCODE:\n```\n<top-bar>\n  <icon-button icon=\"menu\" slot=\"nav-button\"></icon-button>\n  <span slot=\"title\">Fuzzy</span>\n</top-bar>\n```\n\n----------------------------------------\n\nTITLE: Creating Context Provider Component\nDESCRIPTION: Implementation of a Lit component that provides context using the @provide decorator\nSOURCE: https://github.com/lit/lit.dev/blob/main/packages/lit-dev-content/site/docs/v3/data/context.md#2025-04-09_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport {LitElement, property, html} from 'lit';\nimport {provide} from '@lit/context';\n\nimport {Logger} from 'my-logging-library';\nimport {loggerContext} from './logger-context.js';\n\n@customElement('my-app')\nclass MyApp extends LitElement {\n\n  @provide({context: loggerContext})\n  logger = new Logger();\n\n  render() {\n    return html`...`;\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: IfDefined Directive Usage Example\nDESCRIPTION: Demonstrates using the ifDefined directive to conditionally render attributes based on defined values.\nSOURCE: https://github.com/lit/lit.dev/blob/main/packages/lit-dev-content/site/docs/v2/templates/directives.md#2025-04-09_snippet_20\n\nLANGUAGE: typescript\nCODE:\n```\n@customElement('my-element')\nclass MyElement extends LitElement {\n\n  @property()\n  filename: string | undefined = undefined;\n\n  @property()\n  size: string | undefined = undefined;\n\n  render() {\n    return html`<img src=\"/images/${ifDefined(this.size)}/${ifDefined(this.filename)}\">`;\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: TypeScript Type Definitions\nDESCRIPTION: Shows how to register the custom element with TypeScript's HTMLElementTagNameMap for proper type inference when using document.createElement().\nSOURCE: https://github.com/lit/lit.dev/blob/main/packages/lit-dev-content/site/tutorials/content/word-viewer/01.md#2025-04-09_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\ndeclare global {\n  interface HTMLElementTagNameMap {\n    \"word-viewer\": WordViewer;\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Internal Reactive State in Lit Component with JavaScript\nDESCRIPTION: Sets up internal reactive state in JavaScript by configuring the 'idx' property with {state: true} in the static properties object and initializing it in the constructor. This makes it reactive without exposing it in the public API.\nSOURCE: https://github.com/lit/lit.dev/blob/main/packages/lit-dev-content/site/tutorials/content/word-viewer/03.md#2025-04-09_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\n// word-viewer.js\n  static properties = {\n    idx: {state: true},\n    ...\n  };\n\n  constructor() {\n    ...\n    this.idx = 0;\n  }\n```\n\n----------------------------------------\n\nTITLE: Declaring String Property with Attribute Converter in Lit Component\nDESCRIPTION: Declares a dateStr reactive property using Lit's built-in String attribute converter. The property is connected to the 'date-str' attribute, allowing the component to accept date strings via HTML attributes.\nSOURCE: https://github.com/lit/lit.dev/blob/main/packages/lit-dev-content/site/tutorials/content/custom-attribute-converter/01.md#2025-04-09_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nexport class DateDisplay extends LitElement {\n  @property({attribute: false})\n  date = new Date();\n\n  @property({type: String, attribute: 'date-str'})\n  dateStr = '';\n  ...\n```\n\nLANGUAGE: javascript\nCODE:\n```\nexport class DateDisplay extends LitElement {\n  static properties = {\n    date: {attribute: false},\n    dateStr: {type: String, attribute: 'date-str'},\n  };\n\n  constructor() {\n    super();\n    this.date = new Date();\n    this.dateStr = '';\n  }\n  ...\n```\n\n----------------------------------------\n\nTITLE: Using Expressions in lit-html Templates\nDESCRIPTION: Shows how lit-html templates can include complex JavaScript expressions in bindings, not just simple values. These expressions are evaluated when the template function is called.\nSOURCE: https://github.com/lit/lit.dev/blob/main/packages/lit-dev-content/site/docs/v1/lit-html/writing-templates.md#2025-04-09_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nconst myTemplate = (subtotal, tax) => html`<div>Total: ${subtotal + tax}</div>`;\nconst myTemplate2 = (name) => html`<div>${formatName(name.given, name.family, name.title)}</div>`;\n```\n\n----------------------------------------\n\nTITLE: Defining Context Object in TypeScript\nDESCRIPTION: Example of creating a logger context definition in a separate TypeScript file\nSOURCE: https://github.com/lit/lit.dev/blob/main/packages/lit-dev-content/site/docs/v3/data/context.md#2025-04-09_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport {createContext} from '@lit/context';\nimport type {Logger} from 'my-logging-library';\nexport type {Logger} from 'my-logging-library';\nexport const loggerContext = createContext<Logger>('logger');\n```\n\n----------------------------------------\n\nTITLE: Building Localized Templates with Lit Localize CLI\nDESCRIPTION: Demonstrates the use of the lit-localize build command to incorporate translations back into the application. The behavior depends on the configured output mode.\nSOURCE: https://github.com/lit/lit.dev/blob/main/packages/lit-dev-content/site/docs/v2/localization/overview.md#2025-04-09_snippet_18\n\nLANGUAGE: sh\nCODE:\n```\nlit-localize build\n```\n\n----------------------------------------\n\nTITLE: Defining Context Object in TypeScript\nDESCRIPTION: Example of creating a logger context definition in a separate TypeScript file\nSOURCE: https://github.com/lit/lit.dev/blob/main/packages/lit-dev-content/site/docs/v3/data/context.md#2025-04-09_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport {createContext} from '@lit/context';\nimport type {Logger} from 'my-logging-library';\nexport type {Logger} from 'my-logging-library';\nexport const loggerContext = createContext<Logger>('logger');\n```\n\n----------------------------------------\n\nTITLE: Defining Basic Mixin Structure in TypeScript\nDESCRIPTION: Shows the basic structure for creating a mixin function that takes a superClass and returns an extended class.\nSOURCE: https://github.com/lit/lit.dev/blob/main/packages/lit-dev-content/site/docs/v3/composition/mixins.md#2025-04-09_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nconst MyMixin = (superClass) => class extends superClass {\n  /* class fields & methods to extend superClass with */\n};\n```\n\n----------------------------------------\n\nTITLE: Using templateContent Directive in Lit Element\nDESCRIPTION: Demonstrates how to use the templateContent directive to render content from a template element in a Lit component.\nSOURCE: https://github.com/lit/lit.dev/blob/main/packages/lit-dev-content/site/docs/v2/templates/directives.md#2025-04-09_snippet_34\n\nLANGUAGE: typescript\nCODE:\n```\nconst templateEl = document.querySelector('template#myContent') as HTMLTemplateElement;\n\n@customElement('my-element')\nclass MyElement extends LitElement {\n\n  render() {\n    return  html`\n      Here's some content from a template element:\n      ${templateContent(templateEl)}`;\n  }\n}\n```\n\nLANGUAGE: javascript\nCODE:\n```\nconst templateEl = document.querySelector('template#myContent');\n\nclass MyElement extends LitElement {\n\n  render() {\n    return  html`\n      Here's some content from a template element:\n      ${templateContent(templateEl)}`;\n  }\n}\ncustomElements.define('my-element', MyElement);\n```\n\n----------------------------------------\n\nTITLE: Firing a Standard Event from a Lit Component\nDESCRIPTION: Shows how to create and dispatch a standard DOM event from within a Lit component.\nSOURCE: https://github.com/lit/lit.dev/blob/main/packages/lit-dev-content/site/docs/v1/components/events.md#2025-04-09_snippet_9\n\nLANGUAGE: javascript\nCODE:\n```\nclass MyElement extends LitElement {\n  render() {\n    return html`<div>Hello World</div>`;\n  }\n  updated(changedProperties) {\n    let click = new Event('click');\n    this.dispatchEvent(click);\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Requesting Updates in Response to Events in LitElement (JavaScript)\nDESCRIPTION: This example demonstrates how to use the requestUpdate method to trigger an update in response to an event that isn't a property change in a LitElement component.\nSOURCE: https://github.com/lit/lit.dev/blob/main/packages/lit-dev-content/site/docs/v1/components/lifecycle.md#2025-04-09_snippet_17\n\nLANGUAGE: javascript\nCODE:\n```\n// Request an update in response to an event\nthis.addEventListener('load-complete', async (e) => {\n  console.log(e.detail.message);\n  console.log(await this.requestUpdate());\n});\n```\n\n----------------------------------------\n\nTITLE: Handling Update Complete Promise Rejection in JavaScript\nDESCRIPTION: This snippet demonstrates how to use a try/catch block to handle potential errors when awaiting the updateComplete promise in a Lit component.\nSOURCE: https://github.com/lit/lit.dev/blob/main/packages/lit-dev-content/site/docs/v3/components/lifecycle.md#2025-04-09_snippet_12\n\nLANGUAGE: javascript\nCODE:\n```\ntry {\n  await this.updateComplete;\n} catch (e) {\n  /* handle error */\n}\n```\n\n----------------------------------------\n\nTITLE: Declaring Reactive Property in Lit Component\nDESCRIPTION: Demonstrates two ways to declare a reactive property 'message' in a Lit component - using TypeScript decorator syntax and JavaScript static properties. The property is initialized with the value 'Hello again.'\nSOURCE: https://github.com/lit/lit.dev/blob/main/packages/lit-dev-content/site/tutorials/content/intro-to-lit/02.md#2025-04-09_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n@property()\nmessage: string = 'Hello again.';\n```\n\nLANGUAGE: javascript\nCODE:\n```\nstatic properties = {\n  message: {},\n};\n\nconstructor() {\n  super();\n  this.message = 'Hello again.';\n}\n```\n\n----------------------------------------\n\nTITLE: Inheriting Styles from a Superclass in Lit\nDESCRIPTION: Shows how to inherit styles from a superclass and add additional styles in a Lit component.\nSOURCE: https://github.com/lit/lit.dev/blob/main/packages/lit-dev-content/site/docs/v3/components/styles.md#2025-04-09_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nstatic styles: CSSResultGroup = css`...`;\n```\n\n----------------------------------------\n\nTITLE: Creating Dynamic Templates with lit-html\nDESCRIPTION: Demonstrates how to create a template function that produces different results based on input data. This enables creating UI as a function of state, with lit-html efficiently updating only the parts that change.\nSOURCE: https://github.com/lit/lit.dev/blob/main/packages/lit-dev-content/site/docs/v1/lit-html/writing-templates.md#2025-04-09_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport {html, render} from 'lit-html';\n\n// Define a template function\nconst myTemplate = (name) => html`<div>Hello ${name}</div>`;\n\n// Render the template with some data\nrender(myTemplate('world'), document.body);\n\n// ... Later on ...\n// Render the template with different data\nrender(myTemplate('lit-html'), document.body);\n```\n\n----------------------------------------\n\nTITLE: Composing Templates with Methods\nDESCRIPTION: Demonstrates how to compose a larger template from smaller template methods, allowing for template composition and potential subclass overrides.\nSOURCE: https://github.com/lit/lit.dev/blob/main/packages/lit-dev-content/site/docs/v3/components/rendering.md#2025-04-09_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport {LitElement, html} from 'lit';\nimport {customElement} from 'lit/decorators.js';\n\n@customElement('my-page')\nexport class MyPage extends LitElement {\n  headerTemplate() {\n    return html`<header>Header</header>`;\n  }\n\n  mainTemplate() {\n    return html`<main>Content</main>`;\n  }\n\n  footerTemplate() {\n    return html`<footer>Footer</footer>`;\n  }\n\n  render() {\n    return html`\n      ${this.headerTemplate()}\n      ${this.mainTemplate()}\n      ${this.footerTemplate()}\n    `;\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Custom Property Accessor in JavaScript\nDESCRIPTION: Shows how to implement custom getter/setter for a property with update notifications in JavaScript.\nSOURCE: https://github.com/lit/lit.dev/blob/main/packages/lit-dev-content/site/docs/v2/components/properties.md#2025-04-09_snippet_20\n\nLANGUAGE: javascript\nCODE:\n```\nstatic properties = {\n  prop: {},\n};\n\n_prop = 0;\n\nset prop(val) {\n  let oldVal = this._prop;\n  this._prop = Math.floor(val);\n  this.requestUpdate('prop', oldVal);\n}\n\nget prop() { return this._prop; }\n```\n\n----------------------------------------\n\nTITLE: Using repeat() Directive in Lit Template\nDESCRIPTION: This snippet demonstrates how to use the repeat() directive in a Lit template. It replaces the map() function, taking an iterable, a key function for unique identification, and a template function for rendering each item. This ensures that DOM nodes are properly reordered when the underlying data changes.\nSOURCE: https://github.com/lit/lit.dev/blob/main/packages/lit-dev-content/site/tutorials/content/working-with-lists/05.md#2025-04-09_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nrender() {\n  return html`\n    ⋮\n    <ul>\n      ${repeat(\n        this.tasks,\n        (task) => task.id,\n        (task) => html`\n          <li>\n            <label><input type=\"checkbox\" />${task.label} (${task.id})</label>\n          </li>\n        `\n      )}\n    </ul>\n  `;\n}\n```\n\nLANGUAGE: javascript\nCODE:\n```\nrender() {\n  return html`\n    ⋮\n    <ul>\n      ${repeat(\n        this.tasks,\n        (task) => task.id,\n        (task) => html`\n          <li>\n            <label><input type=\"checkbox\" />${task.label} (${task.id})</label>\n          </li>\n        `\n      )}\n    </ul>\n  `;\n}\n```\n\n----------------------------------------\n\nTITLE: Using guard Directive in Lit Component\nDESCRIPTION: Demonstrates how to use the guard directive in a Lit component to optimize rendering performance by preventing unnecessary work.\nSOURCE: https://github.com/lit/lit.dev/blob/main/packages/lit-dev-content/site/docs/v2/templates/directives.md#2025-04-09_snippet_28\n\nLANGUAGE: typescript\nCODE:\n```\n@customElement('my-element')\nclass MyElement extends LitElement {\n\n  @property()\n  value: string = '';\n\n  render() {\n    return html`\n      <div>\n        ${guard([this.value], () => calculateSHA(this.value))}\n      </div>`;\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Timer Setup for Time-Ago Directive\nDESCRIPTION: Sets up a periodic 3-second timer for updating time display. Uses a class field to store the timer handle and ensures the timer is started only once.\nSOURCE: https://github.com/lit/lit.dev/blob/main/packages/lit-dev-content/site/tutorials/content/async-directive/05.md#2025-04-09_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n  timer: number | undefined;\n\n  ensureTimerStarted() {\n    if (this.timer === undefined) {\n      this.timer = setInterval(() => {\n        /* do some periodic work */\n      }, 3000);\n    }\n  }\n```\n\nLANGUAGE: javascript\nCODE:\n```\n  timer = undefined;\n\n  ensureTimerStarted() {\n    if (this.timer === undefined) {\n      this.timer = setInterval(() => {\n        /* do some periodic work */\n      }, 3000);\n    }\n  }\n```\n\n----------------------------------------\n\nTITLE: Node-style Module Import Example\nDESCRIPTION: Shows how to import lit-html using Node-style module imports.\nSOURCE: https://github.com/lit/lit.dev/blob/main/packages/lit-dev-content/site/docs/v1/lit-html/concepts.md#2025-04-09_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\nimport {html, render} from 'lit-html';\n```\n\n----------------------------------------\n\nTITLE: Configuring Lit Localization with Runtime Mode\nDESCRIPTION: Shows how to configure localization in a project using the configureLocalization function with dynamic imports for loading locale modules.\nSOURCE: https://github.com/lit/lit.dev/blob/main/packages/lit-dev-content/site/docs/v2/localization/runtime-mode.md#2025-04-09_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nimport {configureLocalization} from '@lit/localize';\n// Generated via output.localeCodesModule\nimport {sourceLocale, targetLocales} from './generated/locales.js';\n\nexport const {getLocale, setLocale} = configureLocalization({\n  sourceLocale,\n  targetLocales,\n  loadLocale: (locale) => import(`/locales/${locale}.js`),\n});\n```\n\n----------------------------------------\n\nTITLE: Importing unsafeStatic for Non-Literal Statics\nDESCRIPTION: Shows how to import the unsafeStatic function for cases where static HTML cannot be tagged with the literal function.\nSOURCE: https://github.com/lit/lit.dev/blob/main/packages/lit-dev-content/site/docs/v3/templates/expressions.md#2025-04-09_snippet_24\n\nLANGUAGE: typescript\nCODE:\n```\nimport {html, unsafeStatic} from 'lit/static-html.js';\n```\n\n----------------------------------------\n\nTITLE: Implementing willUpdate() in TypeScript and JavaScript\nDESCRIPTION: Shows how to implement willUpdate() to compute property values that depend on other properties before the update process.\nSOURCE: https://github.com/lit/lit.dev/blob/main/packages/lit-dev-content/site/docs/v3/components/lifecycle.md#2025-04-09_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\nwillUpdate(changedProperties: PropertyValues<this>) {\n  // only need to check changed properties for an expensive computation.\n  if (changedProperties.has('firstName') || changedProperties.has('lastName')) {\n    this.sha = computeSHA(`${this.firstName} ${this.lastName}`);\n  }\n}\n\nrender() {\n  return html`SHA: ${this.sha}`;\n}\n```\n\nLANGUAGE: javascript\nCODE:\n```\nwillUpdate(changedProperties) {\n  // only need to check changed properties for an expensive computation.\n  if (changedProperties.has('firstName') || changedProperties.has('lastName')) {\n    this.sha = computeSHA(`${this.firstName} ${this.lastName}`);\n  }\n}\n\nrender() {\n  return html`SHA: ${this.sha}`;\n}\n```\n\n----------------------------------------\n\nTITLE: Rendering Lists in Lit Templates\nDESCRIPTION: Demonstrates how to render JavaScript arrays and iterables in Lit templates using Array.map() and the map() directive.\nSOURCE: https://github.com/lit/lit.dev/blob/main/packages/lit-dev-content/site/articles/article/lit-cheat-sheet.md#2025-04-09_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\n@customElement('my-element')\nexport class MyElement extends LitElement {\n  items = ['foo', 'bar', 'baz'];\n\n  render() {\n    return html`\n      <ul>\n        ${this.items.map(item => html`<li>${item}</li>`)}\n      </ul>\n      <ul>\n        ${map(this.items, item => html`<li>${item}</li>`)}\n      </ul>\n    `;\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Internal Reactive State in Lit Component with TypeScript\nDESCRIPTION: Defines an internal reactive state property 'idx' using the @state() decorator to track which word is currently shown. This property is not part of the component's public API and doesn't have an associated attribute.\nSOURCE: https://github.com/lit/lit.dev/blob/main/packages/lit-dev-content/site/tutorials/content/word-viewer/03.md#2025-04-09_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n// word-viewer.ts\nclass WordViewer extends LitElement {\n  @state() private idx = 0;\n  ...\n}\n```\n\n----------------------------------------\n\nTITLE: Customizing hasChanged Function for Properties in LitElement\nDESCRIPTION: Example of customizing the hasChanged function for a property in LitElement to control when updates are triggered. The function compares old and new values to determine if a property has changed.\nSOURCE: https://github.com/lit/lit.dev/blob/main/packages/lit-dev-content/site/docs/v1/components/properties.md#2025-04-09_snippet_14\n\nLANGUAGE: javascript\nCODE:\n```\nmyProp: { hasChanged(newVal, oldVal) {\n  // compare newVal and oldVal\n  // return `true` if an update should proceed\n}}\n```\n\n----------------------------------------\n\nTITLE: Customizing Update Scheduling in Lit Components\nDESCRIPTION: This snippet shows how to override the scheduleUpdate method in a Lit component to defer updates, reducing potential jank for expensive updates.\nSOURCE: https://github.com/lit/lit.dev/blob/main/packages/lit-dev-content/site/docs/v3/components/lifecycle.md#2025-04-09_snippet_14\n\nLANGUAGE: typescript\nCODE:\n```\nprotected override async scheduleUpdate(): Promise<void> {\n  await new Promise((resolve) => setTimeout(resolve));\n  super.scheduleUpdate();\n}\n```\n\nLANGUAGE: javascript\nCODE:\n```\nasync scheduleUpdate() {\n  await new Promise((resolve) => setTimeout(resolve));\n  super.scheduleUpdate();\n}\n```\n\n----------------------------------------\n\nTITLE: Importing Lit Decorators in JavaScript\nDESCRIPTION: Example of importing all Lit decorators from the lit/decorators.js module.\nSOURCE: https://github.com/lit/lit.dev/blob/main/packages/lit-dev-content/site/docs/v2/components/decorators.md#2025-04-09_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nimport {customElement, property, eventOptions, query} from 'lit/decorators.js';\n```\n\n----------------------------------------\n\nTITLE: Creating Basic Context Object\nDESCRIPTION: Example of creating a basic context object using createContext with a Symbol\nSOURCE: https://github.com/lit/lit.dev/blob/main/packages/lit-dev-content/site/docs/v3/data/context.md#2025-04-09_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nexport const myContext = createContext(Symbol('my-context'));\n```\n\n----------------------------------------\n\nTITLE: Joining Items with Separators using join() Directive in Lit\nDESCRIPTION: Illustrates the usage of the new join() directive in Lit to interleave items with a separator. It's useful for adding visual separators between rendered items.\nSOURCE: https://github.com/lit/lit.dev/blob/main/packages/lit-dev-content/site/blog/2022-01-05-lit-2.1-release.md#2025-04-09_snippet_2\n\nLANGUAGE: TypeScript\nCODE:\n```\nrender() {\n  return html`\n    ${join(this.items, html`<span class=\"separator\">|</span>`)}\n  `;\n}\n```\n\n----------------------------------------\n\nTITLE: Adding styles in shadow DOM with lit-html\nDESCRIPTION: Shows how to include a style element within a template rendered to shadow DOM. This pattern allows for component-specific styling with CSS that won't leak to the rest of the document.\nSOURCE: https://github.com/lit/lit.dev/blob/main/packages/lit-dev-content/site/docs/v1/lit-html/styling-templates.md#2025-04-09_snippet_2\n\nLANGUAGE: js\nCODE:\n```\nhtml`\n  <style>\n    :host { ... }\n    .test { ... }\n  </style>\n  <div class=\"test\">...</div>\n`;\n```\n\n----------------------------------------\n\nTITLE: Using Multiple Style Blocks in a Lit Component\nDESCRIPTION: Shows how to use an array of tagged template literals for multiple style blocks in a Lit component.\nSOURCE: https://github.com/lit/lit.dev/blob/main/packages/lit-dev-content/site/docs/v3/components/styles.md#2025-04-09_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nstatic styles = [ css`...`, css`...`];\n```\n\n----------------------------------------\n\nTITLE: Using this in Declarative Event Handlers in Lit Templates\nDESCRIPTION: Demonstrates how this is automatically bound to the component instance when using declarative event handlers with the @ syntax in Lit templates. This allows direct access to component properties and methods.\nSOURCE: https://github.com/lit/lit.dev/blob/main/packages/lit-dev-content/site/docs/v3/components/events.md#2025-04-09_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nclass MyElement extends LitElement {\n  render() {\n    return html`<button @click=\"${this._handleClick}\">click</button>`;\n  }\n  _handleClick(e) {\n    console.log(this.prop);\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a React Hook from a Lit Controller\nDESCRIPTION: This snippet shows how to use useController() to create a React hook from a Lit reactive controller. It demonstrates creating a custom hook and using it in a React component.\nSOURCE: https://github.com/lit/lit.dev/blob/main/packages/lit-dev-content/site/docs/v3/frameworks/react.md#2025-04-09_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nimport React from 'react';\nimport {useController} from '@lit/react/use-controller.js';\nimport {MouseController} from '@example/mouse-controller';\n\n// Write a custom React hook function:\nconst useMouse = () => {\n  // Use useController to create and store a controller instance:\n  const controller = useController(React, (host) => new MouseController(host));\n  // Return relevant data for consumption by the component:\n  return controller.pos;\n};\n\n// Now use the new hook in a React component:\nconst Component = (props) => {\n  const mousePosition = useMouse();\n  return (\n    <pre>\n      x: {mousePosition.x}\n      y: {mousePosition.y}\n    </pre>\n  );\n};\n```\n\n----------------------------------------\n\nTITLE: Using lit-html Directives in LitElement (JavaScript)\nDESCRIPTION: Shows how to import and use a lit-html directive within a LitElement template. This example uses the 'until' directive to display a loading message while content is being fetched.\nSOURCE: https://github.com/lit/lit.dev/blob/main/packages/lit-dev-content/site/docs/v1/components/templates.md#2025-04-09_snippet_13\n\nLANGUAGE: javascript\nCODE:\n```\nimport { LitElement, html } from 'lit-element';\nimport { until } from 'lit-html/directives/until.js';\n\nconst content = fetch('./content.txt').then(r => r.text());\n\nhtml`${until(content, html`<span>Loading...</span>`)}`\n```\n\n----------------------------------------\n\nTITLE: Repeat Directive Implementation\nDESCRIPTION: Example showing how to use the repeat directive with key function for efficient DOM updates.\nSOURCE: https://github.com/lit/lit.dev/blob/main/packages/lit-dev-content/site/docs/v2/templates/directives.md#2025-04-09_snippet_14\n\nLANGUAGE: typescript\nCODE:\n```\n@customElement('my-element')\nclass MyElement extends LitElement {\n\n  @property()\n  items: Array<{id: number, name: string}> = [];\n\n  render() {\n    return html`\n      <ul>\n        ${repeat(this.items, (item) => item.id, (item, index) => html`\n          <li>${index}: ${item.name}</li>`)}\n      </ul>\n    `;\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Lazy-loading Locale Modules in JavaScript\nDESCRIPTION: Example of configuring localization with lazy-loading of locale modules using dynamic imports.\nSOURCE: https://github.com/lit/lit.dev/blob/main/packages/lit-dev-content/site/docs/v3/localization/runtime-mode.md#2025-04-09_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\nimport {configureLocalization} from '@lit/localize';\nimport {sourceLocale, targetLocales} from './generated/locale-codes.js';\n\nconst {getLocale, setLocale} = configureLocalization({\n  sourceLocale,\n  targetLocales,\n  loadLocale: (locale) => import(`/locales/${locale}.js`),\n});\n```\n\n----------------------------------------\n\nTITLE: Necessary HTML in Localized Templates\nDESCRIPTION: Demonstrates a valid use case for including HTML markup within localized content when the markup is essential to the phrase structure.\nSOURCE: https://github.com/lit/lit.dev/blob/main/packages/lit-dev-content/site/docs/v2/localization/best-practices.md#2025-04-09_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\nrender() {\n  return msg(html`Lift off in <b>T-${this.countdown}</b> seconds`);\n}\n```\n\n----------------------------------------\n\nTITLE: Using shady-render with ShadyCSS for shadow DOM polyfill compatibility\nDESCRIPTION: Shows how to integrate lit-html with the ShadyCSS polyfill using the shady-render module. This is necessary when creating custom elements that need to support browsers without native shadow DOM.\nSOURCE: https://github.com/lit/lit.dev/blob/main/packages/lit-dev-content/site/docs/v1/lit-html/styling-templates.md#2025-04-09_snippet_4\n\nLANGUAGE: js\nCODE:\n```\nimport {render, TemplateResult} from 'lit-html/lib/shady-render';\n\nclass MyShadyBaseClass extends HTMLElement {\n\n  // ...\n\n  _update() {\n    render(this.myTemplate(), this.shadowRoot, { scopeName: this.tagName.toLowerCase() });\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a Lit Component Instance in JavaScript\nDESCRIPTION: This snippet demonstrates how to create an instance of a Lit component programmatically using JavaScript's document.createElement() method.\nSOURCE: https://github.com/lit/lit.dev/blob/main/packages/lit-dev-content/site/docs/v3/components/defining.md#2025-04-09_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nconst greeting = document.createElement('simple-greeting');\n```\n\n----------------------------------------\n\nTITLE: Installing ES Dev Server\nDESCRIPTION: Command to install es-dev-server as a dev dependency\nSOURCE: https://github.com/lit/lit.dev/blob/main/packages/lit-dev-content/site/docs/v1/lit-html/tools.md#2025-04-09_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nnpm i -D es-dev-server\n```\n\n----------------------------------------\n\nTITLE: Using @queryAll Decorator in Lit Component\nDESCRIPTION: Shows how to use @queryAll decorator to query multiple elements in the shadow DOM with TypeScript support.\nSOURCE: https://github.com/lit/lit.dev/blob/main/packages/lit-dev-content/site/docs/v3/components/shadow-dom.md#2025-04-09_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nimport {LitElement, html} from 'lit';\nimport {queryAll} from 'lit/decorators/queryAll.js';\n\nclass MyElement extends LitElement {\n  @queryAll('div')\n  _divs;\n\n  render() {\n    return html`\n      <div id=\"first\"></div>\n      <div id=\"second\"></div>\n    `;\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Update Lifecycle for Time-Ago Directive\nDESCRIPTION: Implements the update lifecycle callback that starts the timer when the directive is connected. Checks isConnected status before starting the timer to ensure proper cleanup handling.\nSOURCE: https://github.com/lit/lit.dev/blob/main/packages/lit-dev-content/site/tutorials/content/async-directive/05.md#2025-04-09_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport {DirectiveParameters, Part} from 'lit/directive.js';\n\n...\n\n  update(part: Part, [time]: DirectiveParameters<this>) {\n    if (this.isConnected) {\n      this.ensureTimerStarted();\n    }\n    return this.render(time);\n  }\n```\n\nLANGUAGE: javascript\nCODE:\n```\n  update(part, [time]) {\n    if (this.isConnected) {\n      this.ensureTimerStarted();\n    }\n    return this.render(time);\n  }\n```\n\n----------------------------------------\n\nTITLE: Using a Controller with a Directive in JavaScript\nDESCRIPTION: JavaScript example of using a ResizeController with its observe directive to monitor an element's size and display its width.\nSOURCE: https://github.com/lit/lit.dev/blob/main/packages/lit-dev-content/site/docs/v2/composition/controllers.md#2025-04-09_snippet_9\n\nLANGUAGE: javascript\nCODE:\n```\nclass MyElement extends LitElement {\n  _textSize = new ResizeController(this);\n\n  render() {\n    return html`\n      <textarea ${this._textSize.observe()}></textarea>\n      <p>The width is ${this._textSize.contentRect?.width}</p>\n    `;\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Dispatching Composed Event in Shadow DOM\nDESCRIPTION: Creates and dispatches a CustomEvent with both bubbles and composed set to true, allowing the event to cross shadow DOM boundaries and be visible to all ancestor elements.\nSOURCE: https://github.com/lit/lit.dev/blob/main/packages/lit-dev-content/site/docs/v3/components/events.md#2025-04-09_snippet_10\n\nLANGUAGE: javascript\nCODE:\n```\n_dispatchMyEvent() {\n  let myEvent = new CustomEvent('my-event', {\n    detail: { message: 'my-event happened.' },\n    bubbles: true,\n    composed: true });\n  this.dispatchEvent(myEvent);\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Observed Attributes in LitElement\nDESCRIPTION: Demonstrates how to configure observed attributes, including custom attribute names and disabling attribute observation for properties.\nSOURCE: https://github.com/lit/lit.dev/blob/main/packages/lit-dev-content/site/docs/v1/components/properties.md#2025-04-09_snippet_8\n\nLANGUAGE: JavaScript\nCODE:\n```\n{% include \"v1-projects/properties/attributeobserve/my-element.js\" %}\n```\n\n----------------------------------------\n\nTITLE: Firing a Custom Event from a Lit Component\nDESCRIPTION: Demonstrates how to create and dispatch a custom event from within a Lit component.\nSOURCE: https://github.com/lit/lit.dev/blob/main/packages/lit-dev-content/site/docs/v1/components/events.md#2025-04-09_snippet_8\n\nLANGUAGE: javascript\nCODE:\n```\nclass MyElement extends LitElement {\n  render() {\n    return html`<div>Hello World</div>`;\n  }\n  firstUpdated(changedProperties) {\n    let event = new CustomEvent('my-event', {\n      detail: {\n        message: 'Something important happened'\n      }\n    });\n    this.dispatchEvent(event);\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Rendering Conditional Content with Ternary Operator in Lit\nDESCRIPTION: Using the conditional (ternary) operator to toggle between two different templates based on whether userName exists. This approach allows for inline conditional rendering within the template literal.\nSOURCE: https://github.com/lit/lit.dev/blob/main/packages/lit-dev-content/site/docs/v2/templates/conditionals.md#2025-04-09_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nrender() {\n  return this.userName\n    ? html`Welcome ${this.userName}`\n    : html`Please log in <button>Login</button>`;\n}\n```\n\n----------------------------------------\n\nTITLE: Using join Directive in TypeScript\nDESCRIPTION: Demonstrates how to use the join directive in a Lit element to interleave separators between rendered items.\nSOURCE: https://github.com/lit/lit.dev/blob/main/packages/lit-dev-content/site/docs/v3/templates/directives.md#2025-04-09_snippet_16\n\nLANGUAGE: typescript\nCODE:\n```\nclass MyElement extends LitElement {\n\n  render() {\n    return html`\n      ${join(\n        map(menuItems, (i) => html`<a href=${i.href}>${i.label}</a>`),\n        html`<span class=\"separator\">|</span>`\n      )}\n    `;\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Example Message Declarations in JavaScript\nDESCRIPTION: Demonstrates various ways to declare messages using the msg function in JavaScript, including simple strings, template literals, and HTML templates.\nSOURCE: https://github.com/lit/lit.dev/blob/main/packages/lit-dev-content/site/docs/v3/localization/overview.md#2025-04-09_snippet_5\n\nLANGUAGE: js\nCODE:\n```\nmsg('Hello World');\nmsg(str`Hello ${name}`);\nmsg(html`Hello <b>World</b>`);\n```\n\n----------------------------------------\n\nTITLE: Loading LitElement Application Bundles in HTML\nDESCRIPTION: This HTML snippet demonstrates how to load various script bundles for a LitElement application, including polyfills, the SystemJS loader, and the main application bundle.\nSOURCE: https://github.com/lit/lit.dev/blob/main/packages/lit-dev-content/site/docs/v1/tools/build.md#2025-04-09_snippet_4\n\nLANGUAGE: html\nCODE:\n```\n<!-- Babel polyfills--need to be loaded _before_ Web\n     Components polyfills -->\n<script src=\"nomodule/src/babel-polyfills-nomodule.js\"></script>\n\n<!-- Load Web Components polyfills, if needed. -->\n<script src=\"node_modules/@webcomponents/webcomponentsjs/webcomponents-loader.js\"></script>\n\n<!-- SystemJS loader -->\n<script src=\"node_modules/systemjs/dist/s.min.js\"></script>\n\n<!-- Use SystemJS to load the application bundle -->\n<script>\n  System.import('./nomodule/src/components/shop-app.js');\n</script>\n```\n\n----------------------------------------\n\nTITLE: Using until Directive for Async Content in Lit\nDESCRIPTION: Shows how to use the until directive to render a loading indicator while fetching content asynchronously.\nSOURCE: https://github.com/lit/lit.dev/blob/main/packages/lit-dev-content/site/docs/v3/templates/directives.md#2025-04-09_snippet_47\n\nLANGUAGE: typescript\nCODE:\n```\n@customElement('my-element')\nclass MyElement extends LitElement {\n\n  @state()\n  private content = fetch('./content.txt').then(r => r.text());\n\n  render() {\n    return html`${until(this.content, html`<span>Loading...</span>`)}`;\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Using classMap and styleMap Directives in Lit\nDESCRIPTION: Example of using classMap and styleMap directives to apply dynamic classes and styles in a Lit component template.\nSOURCE: https://github.com/lit/lit.dev/blob/main/packages/lit-dev-content/site/docs/v3/components/styles.md#2025-04-09_snippet_11\n\nLANGUAGE: javascript\nCODE:\n```\nimport { classMap } from 'lit/directives/class-map.js';\nimport { styleMap } from 'lit/directives/style-map.js';\n```\n\n----------------------------------------\n\nTITLE: Implementing Lifecycle Logging Mixin\nDESCRIPTION: Example mixin that adds logging to key lifecycle methods of a Lit component.\nSOURCE: https://github.com/lit/lit.dev/blob/main/packages/lit-dev-content/site/docs/v3/composition/mixins.md#2025-04-09_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nconst LoggingMixin = (superClass) => class extends superClass {\n  constructor() {\n    super();\n    console.log(`${this.localName} was created`);\n  }\n  connectedCallback() {\n    super.connectedCallback();\n    console.log(`${this.localName} was connected`);\n  }\n  updated(changedProperties) {\n    super.updated?.(changedProperties);\n    console.log(`${this.localName} was updated`);\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Accessing Slotted Content in Lit Components\nDESCRIPTION: Shows how to access elements projected into slots within the shadow DOM using @queryAssignedElements or HTMLSlotElement.assignedElements(). This allows components to interact with content provided by the user.\nSOURCE: https://github.com/lit/lit.dev/blob/main/packages/lit-dev-content/site/articles/article/lit-cheat-sheet.md#2025-04-09_snippet_42\n\nLANGUAGE: typescript\nCODE:\n```\n// See playground: articles/lit-cheat-sheet/dom-qae\n```\n\n----------------------------------------\n\nTITLE: Localizing an HTML template\nDESCRIPTION: Example of localizing an HTML template without dynamic expressions.\nSOURCE: https://github.com/lit/lit.dev/blob/main/packages/lit-dev-content/site/docs/v2/localization/overview.md#2025-04-09_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nmsg(html`Hello <b>World</b>`);\n```\n\n----------------------------------------\n\nTITLE: Declaring Internal Reactive State with @state Decorator in TypeScript\nDESCRIPTION: This snippet demonstrates how to use the @state decorator to declare internal reactive state in a Lit component. The state property is protected and not part of the public API.\nSOURCE: https://github.com/lit/lit.dev/blob/main/packages/lit-dev-content/site/docs/v2/components/properties.md#2025-04-09_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\n@state()\nprotected _active = false;\n```\n\n----------------------------------------\n\nTITLE: Importing LitElement Component in HTML\nDESCRIPTION: Two methods of importing a LitElement component in an HTML file using script tags.\nSOURCE: https://github.com/lit/lit.dev/blob/main/packages/lit-dev-content/site/docs/v1/tools/use.md#2025-04-09_snippet_2\n\nLANGUAGE: html\nCODE:\n```\n<script type=\"module\">\nimport './path-to/some-package-name/some-component.js';\n</script>\n```\n\nLANGUAGE: html\nCODE:\n```\n<script type=\"module\" src=\"./path-to/some-package-name/some-component.js\"></script>\n```\n\n----------------------------------------\n\nTITLE: Implementing Static Expressions in Lit Component (JavaScript)\nDESCRIPTION: JavaScript version of a Lit component using static expressions for tag names and attributes using the literal tag function.\nSOURCE: https://github.com/lit/lit.dev/blob/main/packages/lit-dev-content/site/docs/v3/templates/expressions.md#2025-04-09_snippet_21\n\nLANGUAGE: javascript\nCODE:\n```\nimport {LitElement} from 'lit';\nimport {html, literal} from 'lit/static-html.js';\n\nclass MyButton extends LitElement {\n  static properties = {\n    caption: {},\n    active: {type: Boolean},\n  };\n\n  tag = literal`button`;\n  activeAttribute = literal`active`;\n\n  constructor() {\n    super();\n    this.caption = 'Hello static';\n    this.active = false;\n  }\n\n  render() {\n    return html`\n      <${this.tag} ${this.activeAttribute}=${this.active}>\n        <p>${this.caption}</p>\n      </${this.tag}>`;\n  }\n}\ncustomElements.define('my-button', MyButton);\n```\n\n----------------------------------------\n\nTITLE: Filtering and Mapping Arrays in Lit JavaScript Component\nDESCRIPTION: A Lit component render method that filters an array of names containing the letter 'e' and maps them to HTML list items. Uses chained array methods filter() and map() within a template literal expression.\nSOURCE: https://github.com/lit/lit.dev/blob/main/packages/lit-dev-content/site/tutorials/content/working-with-lists/02.md#2025-04-09_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\n  render() {\n    return html`\n      ⋮\n      <ul>\n      ${this.names\n        .filter((name) => name.match(/e/i))\n        .map((name) => html`<li>${name}</li>`)}\n      </ul>\n    `;\n  }\n```\n\n----------------------------------------\n\nTITLE: Positioning Tooltip with getBoundingClientRect in Lit Components\nDESCRIPTION: Implements a show method that dynamically positions the tooltip below its target element. The method clears existing styles, gets the target's position using getBoundingClientRect, and sets the tooltip's position with an offset.\nSOURCE: https://github.com/lit/lit.dev/blob/main/packages/lit-dev-content/site/tutorials/content/tooltip/04.md#2025-04-09_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nshow = () => {\n  this.style.cssText = '';\n  // Position the tooltip near the target.\n  const {x, y, height} = this.target!.getBoundingClientRect();\n  this.style.left = `${x}px`;\n  this.style.top = `${y + height + this.offset}px`;\n};\n```\n\nLANGUAGE: javascript\nCODE:\n```\nshow = () => {\n  this.style.cssText = '';\n  // Position the tooltip near the target.\n  const {x, y, height} = this.target.getBoundingClientRect();\n  this.style.left = `${x}px`;\n  this.style.top = `${y + height + this.offset}px`;\n};\n```\n\n----------------------------------------\n\nTITLE: Accessing Slotted Children in Lit Component\nDESCRIPTION: Demonstrates how to access and handle slotted children using slot.assignedElements and the slotchange event.\nSOURCE: https://github.com/lit/lit.dev/blob/main/packages/lit-dev-content/site/docs/v3/components/shadow-dom.md#2025-04-09_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nget _slottedChildren() {\n  const slot = this.shadowRoot.querySelector('slot');\n  return slot.assignedElements({flatten: true});\n}\n\nhandleSlotchange(e) {\n  const childNodes = e.target.assignedNodes({flatten: true});\n  // ... do something with childNodes ...\n  this.allText = childNodes.map((node) => {\n    return node.textContent ? node.textContent : ''\n  }).join('');\n}\n\nrender() {\n  return html`<slot @slotchange=${this.handleSlotchange}></slot>`;\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Custom Converter in LitElement Component\nDESCRIPTION: Example of configuring and using a custom converter in a LitElement component, demonstrating conversion between string and Date objects.\nSOURCE: https://github.com/lit/lit.dev/blob/main/packages/lit-dev-content/site/docs/v1/components/properties.md#2025-04-09_snippet_7\n\nLANGUAGE: JavaScript\nCODE:\n```\n{% include \"v1-projects/properties/attributeconverter/my-element.js\" %}\n```\n\n----------------------------------------\n\nTITLE: Dispatching Custom Event Class\nDESCRIPTION: Creates and dispatches a custom event by extending the Event class. This approach allows attaching custom properties directly to the event object.\nSOURCE: https://github.com/lit/lit.dev/blob/main/packages/lit-dev-content/site/docs/v3/components/events.md#2025-04-09_snippet_9\n\nLANGUAGE: javascript\nCODE:\n```\nclass MyEvent extends Event {\n  constructor(message) {\n    super();\n    this.type = 'my-event';\n    this.message = message;\n  }\n}\n\nconst event = new MyEvent('Something important happened');\nthis.dispatchEvent(event);\n```\n\n----------------------------------------\n\nTITLE: Using classMap to Apply Conditional Classes in Lit\nDESCRIPTION: This code shows how to implement the classMap directive to conditionally apply the 'backwards' class to a <pre> element when playDirection is -1. The classMap directive takes an object where keys are class names and values determine if the class should be applied.\nSOURCE: https://github.com/lit/lit.dev/blob/main/packages/lit-dev-content/site/tutorials/content/word-viewer/07.md#2025-04-09_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n// word-viewer.ts\n\n  render() {\n    ...\n    return html`<pre\n      class=\"${classMap({ backwards: this.playDirection === -1 })}\"\n      ...\n    >${word}</pre>`;\n  }\n\n```\n\nLANGUAGE: javascript\nCODE:\n```\n// word-viewer.js\nimport {classMap} from 'lit/directives/class-map.js';\n...\n\n  render() {\n    ...\n    return html`<pre\n      class=\"${classMap({ backwards: this.playDirection === -1 })}\"\n      ...\n    >${word}</pre>`;\n  }\n\n```\n\n----------------------------------------\n\nTITLE: Extending Update Complete Promise in Lit Components\nDESCRIPTION: This code demonstrates how to override the getUpdateComplete method to await additional conditions, such as a child element's update, before resolving the updateComplete promise.\nSOURCE: https://github.com/lit/lit.dev/blob/main/packages/lit-dev-content/site/docs/v3/components/lifecycle.md#2025-04-09_snippet_15\n\nLANGUAGE: javascript\nCODE:\n```\nclass MyElement extends LitElement {\n  async getUpdateComplete() {\n    const result = await super.getUpdateComplete();\n    await this._myChild.updateComplete;\n    return result;\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: TypeScript Properties Definition\nDESCRIPTION: Example of defining reactive properties in a TypeScript LitElement component using decorators.\nSOURCE: https://github.com/lit/lit.dev/blob/main/packages/lit-dev-content/site/docs/v1/getting-started.md#2025-04-09_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\nexport class MyElement extends LitElement {\n  ...\n  @property({type: String})\n  name = 'World';\n  ...\n}\n```\n\n----------------------------------------\n\nTITLE: Updating LitElement imports\nDESCRIPTION: Comparison showing how to update import statements from lit-element to the new consolidated lit package.\nSOURCE: https://github.com/lit/lit.dev/blob/main/packages/lit-dev-content/site/docs/v2/releases/upgrade.md#2025-04-09_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport {LitElement, html} from 'lit-element';\n```\n\nLANGUAGE: javascript\nCODE:\n```\nimport {LitElement, html} from 'lit';\n```\n\n----------------------------------------\n\nTITLE: Initializing Basic Lit Directive Structure\nDESCRIPTION: Sets up the basic scaffolding for a custom directive by creating a class that extends Directive and exporting a directive function. This creates the foundation for a timeAgo directive.\nSOURCE: https://github.com/lit/lit.dev/blob/main/packages/lit-dev-content/site/tutorials/content/async-directive/01.md#2025-04-09_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport {directive, Directive} from 'lit/directive.js';\n\nclass TimeAgoDirective extends Directive {\n}\n\nexport const timeAgo = directive(TimeAgoDirective);\n```\n\n----------------------------------------\n\nTITLE: Using a Controller with a Directive in TypeScript\nDESCRIPTION: Shows how to use a controller in conjunction with a directive in a Lit component. This example uses a ResizeController to observe and report the size of a textarea element.\nSOURCE: https://github.com/lit/lit.dev/blob/main/packages/lit-dev-content/site/docs/v3/composition/controllers.md#2025-04-09_snippet_8\n\nLANGUAGE: typescript\nCODE:\n```\nclass MyElement extends LitElement {\n  private _textSize = new ResizeController(this);\n\n  render() {\n    return html`\n      <textarea ${this._textSize.observe()}></textarea>\n      <p>The width is ${this._textSize.contentRect?.width}</p>\n    `;\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Selected Property in Carousel Component with TypeScript\nDESCRIPTION: Implementation of the selected property accessor for a carousel component. It includes a private internal state, property declaration with decorator, methods to validate selection against available items, and updating internal state in render.\nSOURCE: https://github.com/lit/lit.dev/blob/main/packages/lit-dev-content/site/tutorials/content/carousel/02.md#2025-04-09_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nprivate selectedInternal = 0;\n@property({type: Number})\nselected = 0;\n\nget maxSelected() {\n  return this.childElementCount - 1;\n}\n\nhasValidSelected() {\n  return this.selected >= 0 && this.selected <= this.maxSelected;\n}\n\nrender() {\n  if (this.hasValidSelected()) {\n    this.selectedInternal = this.selected;\n  }\n  // ...\n```\n\n----------------------------------------\n\nTITLE: Importing lit-html core functions\nDESCRIPTION: Basic import statement for the main lit-html functions: html for creating template literals and render for applying templates to the DOM.\nSOURCE: https://github.com/lit/lit.dev/blob/main/packages/lit-dev-content/site/docs/v3/libraries/standalone-templates.md#2025-04-09_snippet_1\n\nLANGUAGE: js\nCODE:\n```\nimport {html, render} from 'lit-html';\n```\n\n----------------------------------------\n\nTITLE: Nesting and Composing lit-html Templates\nDESCRIPTION: Shows how to compose templates by nesting TemplateResult objects within each other. This enables building complex UIs from simpler template components.\nSOURCE: https://github.com/lit/lit.dev/blob/main/packages/lit-dev-content/site/docs/v1/lit-html/writing-templates.md#2025-04-09_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\nconst myHeader = html`<h1>Header</h1>`;\nconst myPage = html`\n  ${myHeader}\n  <div>Here's my main page.</div>\n`;\n```\n\nLANGUAGE: javascript\nCODE:\n```\n// some complex view\nconst myListView = (items) => html`<ul>...</ul>`;\n\nconst myPage = (data) => html`\n  ${myHeader}\n  ${myListView(data.items)}\n`;\n```\n\n----------------------------------------\n\nTITLE: Creating a Simple Function Directive\nDESCRIPTION: Shows how to create a simple function directive that replaces vowels with 'x' in a string.\nSOURCE: https://github.com/lit/lit.dev/blob/main/packages/lit-dev-content/site/docs/v2/templates/custom-directives.md#2025-04-09_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nexport noVowels = (str) => str.replaceAll(/[aeiou]/ig,'x');\n```\n\n----------------------------------------\n\nTITLE: Passing Complex Data to Subcomponents in Lit Templates\nDESCRIPTION: Demonstrates how to pass complex data, such as arrays of objects, to subcomponents using Lit's property expression syntax.\nSOURCE: https://github.com/lit/lit.dev/blob/main/packages/lit-dev-content/site/docs/v3/templates/expressions.md#2025-04-09_snippet_16\n\nLANGUAGE: js\nCODE:\n```\nhtml`<my-list .listItems=${this.items}></my-list>`;\n```\n\n----------------------------------------\n\nTITLE: Defining Lit components in TypeScript and JavaScript\nDESCRIPTION: Code comparison showing how to define and register a Lit component in both TypeScript (using the @customElement decorator) and JavaScript (using customElements.define).\nSOURCE: https://github.com/lit/lit.dev/blob/main/packages/lit-dev-content/site/docs/v2/tools/starter-kits.md#2025-04-09_snippet_4\n\nLANGUAGE: ts\nCODE:\n```\n@customElement('my-element')\nexport class MyElement extends LitElement { /* ... */ }\n```\n\nLANGUAGE: js\nCODE:\n```\nexport class MyElement extends LitElement { /* ... */ }\n\ncustomElements.define('my-element', MyElement);\n```\n\n----------------------------------------\n\nTITLE: Implementing a Basic Controller in TypeScript\nDESCRIPTION: Defines a basic structure for a reactive controller in TypeScript. It shows how to store a reference to the host component and register for lifecycle updates.\nSOURCE: https://github.com/lit/lit.dev/blob/main/packages/lit-dev-content/site/docs/v3/composition/controllers.md#2025-04-09_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nclass ClockController implements ReactiveController {\n  private host: ReactiveControllerHost;\n\n  constructor(host: ReactiveControllerHost) {\n    // Store a reference to the host\n    this.host = host;\n    // Register for lifecycle updates\n    host.addController(this);\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Updating SSR hydration imports\nDESCRIPTION: Code snippet showing how to update imports for server-side rendering hydration support, which has been moved to @lit-labs/ssr-client.\nSOURCE: https://github.com/lit/lit.dev/blob/main/packages/lit-dev-content/site/docs/v3/releases/upgrade.md#2025-04-09_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\n// Removed\nimport 'lit/experimental-hydrate-support.js';\nimport {hydrate} from 'lit/experimental-hydrate.js';\n\n// Updated\nimport '@lit-labs/ssr-client/lit-element-hydrate-support.js';\nimport {hydrate} from '@lit-labs/ssr-client';\n```\n\n----------------------------------------\n\nTITLE: Using ContextProvider Controller\nDESCRIPTION: Example of using the ContextProvider controller directly instead of the @provide decorator. The controller provides more explicit control over context provisioning.\nSOURCE: https://github.com/lit/lit.dev/blob/main/packages/lit-dev-content/site/docs/v2/data/context.md#2025-04-09_snippet_9\n\nLANGUAGE: typescript\nCODE:\n```\nimport {LitElement, html} from 'lit';\nimport {ContextProvider} from '@lit-labs/context';\nimport {myContext, MyData} from './my-context.js';\n\nexport class MyApp extends LitElement {\n  private _provider = new ContextProvider(this, myContext);\n}\n```\n\n----------------------------------------\n\nTITLE: Functional UI Pattern with Lit-HTML\nDESCRIPTION: Demonstrates the functional programming approach to UI rendering with lit-html.\nSOURCE: https://github.com/lit/lit.dev/blob/main/packages/lit-dev-content/site/docs/v1/lit-html/concepts.md#2025-04-09_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nlet ui = (data) => html`...${data}...`;\n```\n\n----------------------------------------\n\nTITLE: Defining Eleventy Navigation Front Matter for Frameworks Section\nDESCRIPTION: YAML front matter that configures the Frameworks section in the Eleventy navigation system. It sets the title, navigation key, and ordering position for the section.\nSOURCE: https://github.com/lit/lit.dev/blob/main/packages/lit-dev-content/site/docs/v2/frameworks/index.md#2025-04-09_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n---\ntitle: Frameworks\neleventyNavigation:\n  key: Frameworks\n  order: 8\n---\n```\n\n----------------------------------------\n\nTITLE: Using a Typed Event Handler in React\nDESCRIPTION: Demonstrates how to use a typed event handler with a wrapped web component in a React application.\nSOURCE: https://github.com/lit/lit.dev/blob/main/packages/lit-dev-content/site/docs/v2/frameworks/react.md#2025-04-09_snippet_4\n\nLANGUAGE: tsx\nCODE:\n```\n<MyElementComponent\n  onmy-event={(e: MyEvent) => {\n    console.log(e.myEventData);\n  }}\n/>\n```\n\n----------------------------------------\n\nTITLE: Using @queryAll Decorator in Lit Components\nDESCRIPTION: Example of using the @queryAll decorator to create a property that returns a NodeList of all matching elements from the shadow DOM, similar to querySelectorAll.\nSOURCE: https://github.com/lit/lit.dev/blob/main/packages/lit-dev-content/site/docs/v2/components/shadow-dom.md#2025-04-09_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nimport {LitElement, html} from 'lit';\nimport {queryAll} from 'lit/decorators/queryAll.js';\n\nclass MyElement extends LitElement {\n  @queryAll('div')\n  _divs;\n\n  render() {\n    return html`\n      <div id=\"first\"></div>\n      <div id=\"second\"></div>\n    `;\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Event Listener Options Without Decorators in Lit\nDESCRIPTION: Shows how to customize event listener options when not using decorators by passing an object with handleEvent method.\nSOURCE: https://github.com/lit/lit.dev/blob/main/packages/lit-dev-content/site/docs/v2/components/events.md#2025-04-09_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nrender() {\n  return html`<button @click=${{handleEvent: () => this.onClick(), once: true}}>click</button>`\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing firstUpdated() in JavaScript\nDESCRIPTION: Shows how to use firstUpdated() to perform one-time work after the component's DOM has been created, such as focusing an element.\nSOURCE: https://github.com/lit/lit.dev/blob/main/packages/lit-dev-content/site/docs/v3/components/lifecycle.md#2025-04-09_snippet_9\n\nLANGUAGE: javascript\nCODE:\n```\nfirstUpdated() {\n  this.renderRoot.getElementById('my-text-area').focus();\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Lit Component Properties (TypeScript)\nDESCRIPTION: Example of defining reactive properties in a Lit component using TypeScript decorators\nSOURCE: https://github.com/lit/lit.dev/blob/main/packages/lit-dev-content/site/docs/v3/tools/starter-kits.md#2025-04-09_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\nexport class MyElement extends LitElement {\n  // ...\n  @property({type: String})\n  name = 'World';\n  //...\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a Basic ReactiveController in JavaScript\nDESCRIPTION: JavaScript implementation of a basic ClockController class. The controller stores a reference to its host and registers itself with the host.\nSOURCE: https://github.com/lit/lit.dev/blob/main/packages/lit-dev-content/site/docs/v2/composition/controllers.md#2025-04-09_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nclass ClockController {\n  constructor(host) {\n    // Store a reference to the host\n    this.host = host;\n    // Register for lifecycle updates\n    host.addController(this);\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Importing Lit using bare module specifiers in JavaScript\nDESCRIPTION: Example of how Lit uses bare module specifiers to import modules between its sub-packages. This syntax requires transformation for browser compatibility.\nSOURCE: https://github.com/lit/lit.dev/blob/main/packages/lit-dev-content/site/docs/v3/tools/requirements.md#2025-04-09_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport {html} from 'lit-html';\n```\n\n----------------------------------------\n\nTITLE: Using @query Decorator in Lit Components\nDESCRIPTION: Example of using the @query decorator to create a property that returns a specific element from the shadow DOM. The decorator generates a getter that queries an element by its ID.\nSOURCE: https://github.com/lit/lit.dev/blob/main/packages/lit-dev-content/site/docs/v2/components/shadow-dom.md#2025-04-09_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport {LitElement, html} from 'lit';\nimport {query} from 'lit/decorators/query.js';\n\nclass MyElement extends LitElement {\n  @query('#first')\n  _first;\n\n  render() {\n    return html`\n      <div id=\"first\"></div>\n      <div id=\"second\"></div>\n    `;\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Building TypeScript Lit Components\nDESCRIPTION: Commands for building and watching TypeScript files in the Lit starter project\nSOURCE: https://github.com/lit/lit.dev/blob/main/packages/lit-dev-content/site/docs/v3/tools/starter-kits.md#2025-04-09_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nnpm run build\nnpm run build:watch\n```\n\n----------------------------------------\n\nTITLE: Defining Basic Lit Component Template\nDESCRIPTION: Shows how to define a render() method in a Lit component using the html tag function to create a template with dynamic expressions.\nSOURCE: https://github.com/lit/lit.dev/blob/main/packages/lit-dev-content/site/docs/v2/components/rendering.md#2025-04-09_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport {LitElement, html} from 'lit';\nimport {customElement, property} from 'lit/decorators.js';\n\n@customElement('my-element')\nexport class MyElement extends LitElement {\n  @property()\nname = 'World';\n\n  render() {\n    return html`\n      <p>Hello, ${this.name}!</p>\n    `;\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Rendering Lit Template with Custom Element\nDESCRIPTION: Example showing how to render a template containing both HTML and a custom element.\nSOURCE: https://github.com/lit/lit.dev/blob/main/packages/lit-dev-content/site/docs/v2/ssr/server-usage.md#2025-04-09_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport {render} from '@lit-labs/ssr';\nimport {html} from 'lit';\n\nconst result = render(html`\n  <h1>Hello SSR!</h1>\n  <my-element></my-element>\n`);\n```\n\n----------------------------------------\n\nTITLE: Accessing DOM Elements with @query in Lit\nDESCRIPTION: Shows how to use the @query decorator to access element references in a component's shadow DOM. Note that DOM is typically not available until firstUpdated is called.\nSOURCE: https://github.com/lit/lit.dev/blob/main/packages/lit-dev-content/site/articles/article/lit-cheat-sheet.md#2025-04-09_snippet_39\n\nLANGUAGE: typescript\nCODE:\n```\n{% playground-ide \"articles/lit-cheat-sheet/dom-query\", true %}\n```\n\n----------------------------------------\n\nTITLE: Using Element Expressions with Directives in Lit Templates\nDESCRIPTION: Demonstrates how to use element expressions with directives in Lit templates. This example uses the ref directive to obtain a reference to the rendered element.\nSOURCE: https://github.com/lit/lit.dev/blob/main/packages/lit-dev-content/site/docs/v3/templates/expressions.md#2025-04-09_snippet_18\n\nLANGUAGE: js\nCODE:\n```\nhtml`<div ${myDirective()}></div>`\n```\n\nLANGUAGE: js\nCODE:\n```\nhtml`<button ${ref(this.myRef)}></button>`;\n```\n\n----------------------------------------\n\nTITLE: Defining Scoped Styles in Lit Components using css tag function\nDESCRIPTION: This snippet demonstrates how to create scoped styles for a Lit component using the static styles class field and the css tag function. It shows styling for both the host element (:host) and specific elements within the component (pre), creating encapsulated styles that won't affect elements outside the component's shadow DOM.\nSOURCE: https://github.com/lit/lit.dev/blob/main/packages/lit-dev-content/site/tutorials/content/word-viewer/05.md#2025-04-09_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n// word-viewer.ts\n\n  static styles = css`\n    :host {\n      background-color: white;\n      color: violet;\n      cursor: pointer;\n      display: block;\n    }\n    pre {\n      padding: 0.2em;\n    }\n  `;\n```\n\nLANGUAGE: javascript\nCODE:\n```\n// word-viewer.js\n\n  static styles = css`\n    :host {\n      background-color: white;\n      color: violet;\n      cursor: pointer;\n      display: block;\n    }\n    pre {\n      padding: 0.2em;\n    }\n  `;\n```\n\n----------------------------------------\n\nTITLE: Defining Tooltip Properties in TypeScript\nDESCRIPTION: Defines a showing property that reflects to an attribute for managing tooltip visibility state.\nSOURCE: https://github.com/lit/lit.dev/blob/main/packages/lit-dev-content/site/tutorials/content/tooltip/06.md#2025-04-09_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n@property({reflect: true, type: Boolean})\nshowing = false;\n```\n\n----------------------------------------\n\nTITLE: Dynamic Locale Script Loading\nDESCRIPTION: Script to dynamically load the appropriate locale bundle based on URL parameters.\nSOURCE: https://github.com/lit/lit.dev/blob/main/packages/lit-dev-content/site/docs/v2/localization/transform-mode.md#2025-04-09_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nimport {allLocales} from './generated/locales.js';\n\nconst url = new URL(window.location.href);\nconst unsafeLocale = url.searchParams.get('locale');\nconst locale = allLocales.includes(unsafeLocale) ? unsafeLocale : 'en';\n\nconst script = document.createElement('script');\nscript.type = 'module';\nscript.src = `/${locale}.js`;\ndocument.head.appendChild(script);\n```\n\n----------------------------------------\n\nTITLE: Configuring Conditional Exports in package.json\nDESCRIPTION: Demonstrates how to set up conditional exports in package.json to provide different entry points for Node.js and browser environments.\nSOURCE: https://github.com/lit/lit.dev/blob/main/packages/lit-dev-content/site/docs/v3/ssr/authoring.md#2025-04-09_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"name\": \"my-awesome-lit-components\",\n  \"exports\": {\n    \"./button.js\": {\n      \"node\": \"./button-node.js\",\n      \"default\": \"./button.js\"\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Handling Array and Object Changes in Lit Components\nDESCRIPTION: Shows techniques for properly updating arrays and objects to trigger re-renders in Lit components. Demonstrates using requestUpdate() or creating new array references.\nSOURCE: https://github.com/lit/lit.dev/blob/main/packages/lit-dev-content/site/articles/article/lit-cheat-sheet.md#2025-04-09_snippet_26\n\nLANGUAGE: javascript\nCODE:\n```\n// Option 1: Call requestUpdate() when array is mutated\nhandleClick() {\n  this.myArray.push('new item');\n  this.requestUpdate();\n}\n\n// Option 2: Create a new array reference\nhandleClick() {\n  this.myArray = [...this.myArray, 'new item'];\n}\n```\n\n----------------------------------------\n\nTITLE: Styling the Shadow Tree in LitElement\nDESCRIPTION: Illustrates how to style elements within the shadow DOM of a LitElement component using standard CSS selectors.\nSOURCE: https://github.com/lit/lit.dev/blob/main/packages/lit-dev-content/site/docs/v1/components/styles.md#2025-04-09_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nclass MyElement extends LitElement {\n  static get styles() {\n    // Write styles in standard CSS\n    return css`\n      * { color: red; }\n      p { font-family: sans-serif; }\n      .myclass { margin: 100px; }\n      #main { padding: 30px; }\n      h1 { font-size: 4em; }\n    `;\n  }\n  render() {\n    return html`\n      <p>Hello World</p>\n      <p class=\"myclass\">Hello World</p>\n      <p id=\"main\">Hello World</p>\n      <h1>Hello World</h1>\n    `;\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Using composedPath to Determine Event Origin\nDESCRIPTION: Demonstrates how to use the composedPath() method to determine the original element that dispatched an event, which is useful when working with shadow DOM.\nSOURCE: https://github.com/lit/lit.dev/blob/main/packages/lit-dev-content/site/docs/v2/components/events.md#2025-04-09_snippet_11\n\nLANGUAGE: javascript\nCODE:\n```\nhandleMyEvent(event) {\n  console.log('Origin: ', event.composedPath()[0]);\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Shadow DOM in JavaScript\nDESCRIPTION: Demonstrates how to attach a shadow root to a web component and render encapsulated DOM content with styles inside the shadow root.\nSOURCE: https://github.com/lit/lit.dev/blob/main/packages/lit-dev-content/site/tutorials/content/wc-to-lit/03.md#2025-04-09_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nconnectedCallback() {\n  const shadowRoot = this.attachShadow({mode: 'open'});\n\n  // Note the new CSS Selectors\n  shadowRoot.innerHTML = `\n    <style>\n      :host {\n        display: inline-flex;\n        align-items: center;\n      }\n      button {\n        background: transparent;\n        border: none;\n        cursor: pointer;\n      }\n    </style>\n    <button class=\"thumb_down\" >\n      <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24\" viewBox=\"0 0 24 24\" width=\"24\"><path d=\"M15 3H6c-.83 0-1.54.5-1.84 1.22l-3.02 7.05c-.09.23-.14.47-.14.73v2c0 1.1.9 2 2 2h6.31l-.95 4.57-.03.32c0 .41.17.79.44 1.06L9.83 23l6.59-6.59c.36-.36.58-.86.58-1.41V5c0-1.1-.9-2-2-2zm4 0v12h4V3h-4z\"/></svg>\n    </button>\n    <span class=\"rating\">${this.rating}</span>\n    <button class=\"thumb_up\">\n      <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24\" viewBox=\"0 0 24 24\" width=\"24\"><path d=\"M1 21h4V9H1v12zm22-11c0-1.1-.9-2-2-2h-6.31l.95-4.57.03-.32c0-.41-.17-.79-.44-1.06L14.17 1 7.59 7.59C7.22 7.95 7 8.45 7 9v10c0 1.1.9 2 2 2h9c.83 0 1.54-.5 1.84-1.22l3.02-7.05c.09-.23.14-.47.14-.73v-2z\"/></svg>\n    </button>\n  `;\n}\n```\n\n----------------------------------------\n\nTITLE: Custom Property Accessor in TypeScript\nDESCRIPTION: Demonstrates implementing custom getter/setter for a property with update notifications in TypeScript.\nSOURCE: https://github.com/lit/lit.dev/blob/main/packages/lit-dev-content/site/docs/v2/components/properties.md#2025-04-09_snippet_19\n\nLANGUAGE: typescript\nCODE:\n```\nprivate _prop = 0;\n\nset prop(val: number) {\n  let oldVal = this._prop;\n  this._prop = Math.floor(val);\n  this.requestUpdate('prop', oldVal);\n}\n\n@property()\nget prop() { return this._prop; }\n```\n\n----------------------------------------\n\nTITLE: Using Simple Directive in Lit Template\nDESCRIPTION: Basic example of using a directive function in a Lit template expression.\nSOURCE: https://github.com/lit/lit.dev/blob/main/packages/lit-dev-content/site/docs/v3/templates/custom-directives.md#2025-04-09_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nhtml`<div>\n       ${fancyDirective('some text')}\n     </div>`\n```\n\n----------------------------------------\n\nTITLE: Implementing Lazy Tooltip in Lit Component with JavaScript\nDESCRIPTION: JavaScript version of the firstUpdated lifecycle method implementation for lazy tooltip creation. The method follows the same pattern as the TypeScript version but without type annotations.\nSOURCE: https://github.com/lit/lit.dev/blob/main/packages/lit-dev-content/site/tutorials/content/tooltip/07.md#2025-04-09_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nimport {SimpleTooltip} from './simple-tooltip.js';\n\nexport class MyContent extends LitElement {\n  // ...\n  firstUpdated() {\n    const greeting = this.shadowRoot.getElementById('greeting');\n    SimpleTooltip.lazy(greeting, (tooltip) => {\n      tooltip.textContent = `${this.name}, there's coffee available in the lounge.`;\n    });\n  }\n```\n\n----------------------------------------\n\nTITLE: Implementing Connected Callback with Lit\nDESCRIPTION: Implementation of connectedCallback that initializes shadow DOM, renders the template, and sets up click event listeners for the rating buttons.\nSOURCE: https://github.com/lit/lit.dev/blob/main/packages/lit-dev-content/site/tutorials/content/wc-to-lit/09.md#2025-04-09_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nconnectedCallback() {\n  this.attachShadow({mode: 'open'});\n  this.render();\n\n  this.shadowRoot!\n    .querySelector('.thumb_up')!\n    .addEventListener('click', this._boundOnUpClick);\n  this.shadowRoot!\n    .querySelector('.thumb_down')!\n    .addEventListener('click', this._boundOnDownClick);\n}\n```\n\nLANGUAGE: javascript\nCODE:\n```\nconnectedCallback() {\n  this.attachShadow({mode: 'open'});\n  this.render();\n\n  this.shadowRoot\n    .querySelector('.thumb_up')\n    .addEventListener('click', this._boundOnUpClick);\n  this.shadowRoot\n    .querySelector('.thumb_down')\n    .addEventListener('click', this._boundOnDownClick);\n}\n```\n\n----------------------------------------\n\nTITLE: Sharing Styles Between Components\nDESCRIPTION: Shows how to create and export shared styles between components using a separate module.\nSOURCE: https://github.com/lit/lit.dev/blob/main/packages/lit-dev-content/site/docs/v2/components/styles.md#2025-04-09_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nexport const buttonStyles = css`\n  .blue-button {\n    color: white;\n    background-color: blue;\n  }\n  .blue-button:disabled {\n    background-color: grey;\n  }`;\n```\n\nLANGUAGE: javascript\nCODE:\n```\nimport { buttonStyles } from './button-styles.js';\n\nclass MyElement extends LitElement {\n  static styles = [\n    buttonStyles,\n    css`\n      :host { display: block;\n        border: 1px solid black;\n      }`\n  ];\n}\n```\n\n----------------------------------------\n\nTITLE: Nested Template Composition in Lit\nDESCRIPTION: Shows how to compose templates by nesting them within each other. This allows for building more complex UIs by combining smaller template fragments.\nSOURCE: https://github.com/lit/lit.dev/blob/main/packages/lit-dev-content/site/docs/v3/templates/expressions.md#2025-04-09_snippet_8\n\nLANGUAGE: javascript\nCODE:\n```\nconst nav = html`<nav>...</nav>`;\nconst page = html`\n  ${nav}\n  <main>...</main>\n`;\n```\n\n----------------------------------------\n\nTITLE: Using Slots with React Wrapper Components\nDESCRIPTION: This snippet shows how to use slots with React wrapper components created by createComponent(). It demonstrates default and named slots, as well as how to use React components in slots.\nSOURCE: https://github.com/lit/lit.dev/blob/main/packages/lit-dev-content/site/docs/v3/frameworks/react.md#2025-04-09_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\n<MyElementComponent>\n  <p>This will render in the default slot.</p>\n</MyElementComponent>\n\n<MyElementComponent>\n  <p slot=\"foo\">This will render in the slot named \"foo\".</p>\n</MyElementComponent>\n\n<MyElementComponent>\n  <div slot=\"foo\" style=\"display: contents;\">\n    <ReactComponent />\n  </div>\n</MyElementComponent>\n```\n\n----------------------------------------\n\nTITLE: Avoiding Unnecessary HTML Markup in Localized Content\nDESCRIPTION: These snippets demonstrate the best practice of avoiding unnecessary HTML markup in localized content, making it easier for translators and improving performance.\nSOURCE: https://github.com/lit/lit.dev/blob/main/packages/lit-dev-content/site/docs/v3/localization/best-practices.md#2025-04-09_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nrender() {\n  // Don't do this! There's no reason to include the <button> tag in this\n  // localized template.\n  return msg(html`<button>Launch rocket</button>`);\n}\n```\n\nLANGUAGE: javascript\nCODE:\n```\nrender() {\n  // Much better! Now the phrase \"Launch rocket\" can be translated more easily\n  // in isolation.\n  return html`<button>${msg('Launch rocket')}</button>`;\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Babel for Decorator Support\nDESCRIPTION: Babel configuration required to enable decorator support, including necessary plugins and settings.\nSOURCE: https://github.com/lit/lit.dev/blob/main/packages/lit-dev-content/site/docs/v2/components/decorators.md#2025-04-09_snippet_5\n\nLANGUAGE: json\nCODE:\n```\n\"assumptions\": {\n  \"setPublicClassFields\": true\n},\n\"plugins\": [\n  [\"@babel/plugin-proposal-decorators\", {\n    \"version\": \"2018-09\",\n    \"decoratorsBeforeExport\": true\n  }],\n  [\"@babel/plugin-proposal-class-properties\"]\n]\n```\n\n----------------------------------------\n\nTITLE: HTML Usage of Date Display Component\nDESCRIPTION: Example of using the DateDisplay component in HTML with the date attribute properly configured for conversion.\nSOURCE: https://github.com/lit/lit.dev/blob/main/packages/lit-dev-content/site/tutorials/content/custom-attribute-converter/04.md#2025-04-09_snippet_2\n\nLANGUAGE: html\nCODE:\n```\n<date-display date=\"05/05/22\"></date-display>\n```\n\n----------------------------------------\n\nTITLE: Asynchronous Event Listener Addition in Lit\nDESCRIPTION: Shows how to add event listeners asynchronously after first render using firstUpdated lifecycle method.\nSOURCE: https://github.com/lit/lit.dev/blob/main/packages/lit-dev-content/site/docs/v2/components/events.md#2025-04-09_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nasync firstUpdated() {\n  // Give the browser a chance to paint\n  await new Promise((r) => setTimeout(r, 0));\n  this.addEventListener('click', this._handleClick);\n}\n```\n\n----------------------------------------\n\nTITLE: Using Tooltip Directive in Lit HTML Template\nDESCRIPTION: This snippet demonstrates how to use the tooltip directive in a Lit component's HTML template. It applies the tooltip to a span element containing a greeting.\nSOURCE: https://github.com/lit/lit.dev/blob/main/packages/lit-dev-content/site/tutorials/content/tooltip/08.md#2025-04-09_snippet_5\n\nLANGUAGE: html\nCODE:\n```\n<p>\n  <span ${tooltip(html`${this.name}, there's coffee available in the lounge.`)}>\n    Hello, ${this.name}!\n  </span>\n</p>\n```\n\n----------------------------------------\n\nTITLE: Implementing shouldUpdate Method in LitElement (JavaScript)\nDESCRIPTION: The shouldUpdate method controls whether an update should proceed. It can be implemented to specify which property changes should cause updates. By default, this method always returns true.\nSOURCE: https://github.com/lit/lit.dev/blob/main/packages/lit-dev-content/site/docs/v1/components/lifecycle.md#2025-04-09_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\n/**\n * Implement to override default behavior.\n */\nshouldUpdate(changedProperties) { ... }\n```\n\n----------------------------------------\n\nTITLE: Subscribing to Context Changes with ContextConsumer\nDESCRIPTION: Example showing how to subscribe to context value changes using the ContextConsumer controller with the subscribe parameter. This allows components to react to changes in context values.\nSOURCE: https://github.com/lit/lit.dev/blob/main/packages/lit-dev-content/site/docs/v2/data/context.md#2025-04-09_snippet_14\n\nLANGUAGE: typescript\nCODE:\n```\n  private _myData = new ContextConsumer(this,\n    myContext,\n    undefined, /* callback */\n    true /* subscribe */\n  );\n```\n\n----------------------------------------\n\nTITLE: Conditionally Adding Classes with classMap in Lit\nDESCRIPTION: Shows how to use the classMap directive to conditionally apply CSS classes in Lit components based on a boolean expression.\nSOURCE: https://github.com/lit/lit.dev/blob/main/packages/lit-dev-content/site/articles/article/lit-cheat-sheet.md#2025-04-09_snippet_13\n\nLANGUAGE: javascript\nCODE:\n```\nimport {LitElement, html, css} from 'lit';\nimport {classMap} from 'lit/directives/class-map.js';\n\nclass MyElement extends LitElement {\n  static properties = {\n    enabled: {type: Boolean},\n  };\n\n  static styles = css`\n    .enabled {\n      color: green;\n    }\n    .disabled {\n      color: grey;\n      text-decoration: line-through;\n    }\n  `;\n\n  constructor() {\n    super();\n    this.enabled = false;\n  }\n\n  render() {\n    const classes = {enabled: this.enabled, disabled: !this.enabled};\n    return html`\n      <div class=${classMap(classes)}>\n        Content\n      </div>\n    `;\n  }\n}\ncustomElements.define('my-element', MyElement);\n```\n\n----------------------------------------\n\nTITLE: Defining a Themeable Lit Component\nDESCRIPTION: This JavaScript snippet shows how to create a Lit component that uses CSS custom properties for theming. It demonstrates the use of multiple custom properties for various style attributes.\nSOURCE: https://github.com/lit/lit.dev/blob/main/packages/lit-dev-content/site/docs/v1/components/styles.md#2025-04-09_snippet_20\n\nLANGUAGE: javascript\nCODE:\n```\n{% include \"v1-projects/style/theming/my-element.js\" %}\n```\n\n----------------------------------------\n\nTITLE: JavaScript Properties Definition\nDESCRIPTION: Example of defining reactive properties in a JavaScript LitElement component.\nSOURCE: https://github.com/lit/lit.dev/blob/main/packages/lit-dev-content/site/docs/v1/getting-started.md#2025-04-09_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nexport class MyElement extends LitElement {\n\n  static get properties() {\n    return {\n      name: {type: String}\n    }\n  }\n\n  constructor() {\n    super();\n    this.name = 'World';\n  }\n  ...\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing shouldUpdate() in TypeScript and JavaScript\nDESCRIPTION: Demonstrates how to implement shouldUpdate() to specify which property changes should cause updates.\nSOURCE: https://github.com/lit/lit.dev/blob/main/packages/lit-dev-content/site/docs/v3/components/lifecycle.md#2025-04-09_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\nshouldUpdate(changedProperties: Map<string, any>) {\n  // Only update element if prop1 changed.\n  return changedProperties.has('prop1'); \n}\n```\n\nLANGUAGE: javascript\nCODE:\n```\nshouldUpdate(changedProperties) {\n  // Only update element if prop1 changed.\n  return changedProperties.has('prop1');\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a React Wrapper for a Web Component\nDESCRIPTION: Demonstrates how to use createComponent() to create a React wrapper for a custom element, including event handling and prop mapping.\nSOURCE: https://github.com/lit/lit.dev/blob/main/packages/lit-dev-content/site/docs/v2/frameworks/react.md#2025-04-09_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport React from 'react';\nimport {createComponent} from '@lit-labs/react';\nimport {MyElement} from './my-element.js';\n\nexport const MyElementComponent = createComponent({\n  tagName: 'my-element',\n  elementClass: MyElement,\n  react: React,\n  events: {\n    onactivate: 'activate',\n    onchange: 'change',\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Implementing a Basic Controller in JavaScript\nDESCRIPTION: Defines a basic structure for a reactive controller in JavaScript. It demonstrates how to store a reference to the host component and register for lifecycle updates.\nSOURCE: https://github.com/lit/lit.dev/blob/main/packages/lit-dev-content/site/docs/v3/composition/controllers.md#2025-04-09_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nclass ClockController {\n  constructor(host) {\n    // Store a reference to the host\n    this.host = host;\n    // Register for lifecycle updates\n    host.addController(this);\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Hide Methods\nDESCRIPTION: Implements hide and finishHide methods to manage the hiding animation and final display state.\nSOURCE: https://github.com/lit/lit.dev/blob/main/packages/lit-dev-content/site/tutorials/content/tooltip/06.md#2025-04-09_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nhide = () => {\n  this.showing = false;\n};\n\nfinishHide = () => {\n  if (!this.showing) {\n    this.style.display = 'none';\n  }\n};\n```\n\n----------------------------------------\n\nTITLE: Initializing a Clock Controller in a Lit Component\nDESCRIPTION: Example of creating a ClockController instance in a Lit component. The controller is initialized with the component instance and a time interval (1000ms).\nSOURCE: https://github.com/lit/lit.dev/blob/main/packages/lit-dev-content/site/docs/v2/composition/controllers.md#2025-04-09_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nclass MyElement extends LitElement {\n  private clock = new ClockController(this, 1000);\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Custom Element with LitElement in TypeScript\nDESCRIPTION: Demonstrates creating a custom element using LitElement with TypeScript decorators, including static styles and template rendering with various binding syntaxes.\nSOURCE: https://github.com/lit/lit.dev/blob/main/packages/lit-dev-content/site/docs/v2/internal/styles.md#2025-04-09_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { LitElement, html, css, customElement } from 'lit-element';\n\n@customElement('my-element');\nclass MyElement extends LitElement {\n  static style = css`\n    my-element #id .class [attr~=\"foo\"] ::part(bar) {\n      border: 1px solid blue;\n    }\n  `;\n\n  render() {\n    return html`\n      Lorem ipsum ${value}!\n      <button attribute=\"value\"></button>\n      <button attribute=${value}></button>\n      <button .property=${value}></button>\n      <button ?boolean=${value}></button>\n      <button @event=${this.handler}></button>\n    `;\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Slot Queries in Motion Carousel Component\nDESCRIPTION: Code that adds query decorators or getter methods to access the selected and previous slot elements in the MotionCarousel class. This allows the component to reference these slots for managing which elements are currently visible.\nSOURCE: https://github.com/lit/lit.dev/blob/main/packages/lit-dev-content/site/tutorials/content/carousel/06.md#2025-04-09_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\nimport {customElement, property, query} from 'lit/decorators.js';\n...\nexport class MotionCarousel extends LitElement {\n  @query('slot[name=\"selected\"]', true)\n  private selectedSlot!: HTMLSlotElement;\n\n  @query('slot[name=\"previous\"]', true)\n  private previousSlot!: HTMLSlotElement;\n  ...\n```\n\nLANGUAGE: JavaScript\nCODE:\n```\nget selectedSlot() {\n  return (this.__selectedSlot ??=\n    this.renderRoot?.querySelector('slot[name=\"selected\"]') ?? null);\n}\n\nget previousSlot() {\n  return (this.__previousSlot ??=\n    this.renderRoot?.querySelector('slot[name=\"previous\"]') ?? null);\n}\n```\n\n----------------------------------------\n\nTITLE: Rendering HTML Strings with unsafeHTML Directive\nDESCRIPTION: Shows how to render a string of HTML as HTML in Lit using the unsafeHTML directive, with a warning about security considerations.\nSOURCE: https://github.com/lit/lit.dev/blob/main/packages/lit-dev-content/site/articles/article/lit-cheat-sheet.md#2025-04-09_snippet_8\n\nLANGUAGE: typescript\nCODE:\n```\nimport {LitElement, html} from 'lit';\nimport {customElement} from 'lit/decorators.js';\nimport {unsafeHTML} from 'lit/directives/unsafe-html.js';\n\n@customElement('my-element')\nexport class MyElement extends LitElement {\n  htmlString = '<h1>Hello World</h1>';\n\n  render() {\n    return html`\n      ${unsafeHTML(this.htmlString)}\n    `;\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Using Word Viewer HTML Component\nDESCRIPTION: Example showing how to use the word-viewer custom element in HTML. The component accepts a words attribute containing period-separated words to display.\nSOURCE: https://github.com/lit/lit.dev/blob/main/packages/lit-dev-content/site/tutorials/content/word-viewer/00.md#2025-04-09_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<word-viewer words=\"Hello.World\"></word-viewer>\n```\n\n----------------------------------------\n\nTITLE: Customizing Property Change Updates in LitElement (JavaScript)\nDESCRIPTION: This example demonstrates how to implement the shouldUpdate method to customize which property changes should cause updates in a LitElement component.\nSOURCE: https://github.com/lit/lit.dev/blob/main/packages/lit-dev-content/site/docs/v1/components/lifecycle.md#2025-04-09_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\n{% include \"v1-projects/lifecycle/shouldupdate/my-element.js\" %}\n```\n\n----------------------------------------\n\nTITLE: Defining Tooltip Offset Property in Lit Components\nDESCRIPTION: Sets up an offset property that controls the positioning gap between the tooltip and its target element. The TypeScript version uses the @property decorator, while the JavaScript version uses the static properties object and constructor initialization.\nSOURCE: https://github.com/lit/lit.dev/blob/main/packages/lit-dev-content/site/tutorials/content/tooltip/04.md#2025-04-09_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n// Position offset\n@property({type: Number})\noffset = 4;\n```\n\nLANGUAGE: javascript\nCODE:\n```\nstatic properties = {\n  offset: {type: Number},\n};\n\nconstructor() {\n  super();\n  // Position offset\n  this.offset = 4;\n}\n```\n\n----------------------------------------\n\nTITLE: Using Slots with Wrapped Web Components\nDESCRIPTION: Demonstrates how to use default and named slots with wrapped web components in React, including handling React components as slot content.\nSOURCE: https://github.com/lit/lit.dev/blob/main/packages/lit-dev-content/site/docs/v2/frameworks/react.md#2025-04-09_snippet_2\n\nLANGUAGE: jsx\nCODE:\n```\n<MyElementComponent>\n  <p>This will render in the default slot.</p>\n</MyElementComponent>\n\n<MyElementComponent>\n  <p slot=\"foo\">This will render in the slot named \"foo\".</p>\n</MyElementComponent>\n\n<MyElementComponent>\n  <div slot=\"foo\" style=\"display: contents;\">\n    <ReactComponent />\n  </div>\n</MyElementComponent>\n```\n\n----------------------------------------\n\nTITLE: HTML Plugin System Example\nDESCRIPTION: Example showing how to structure HTML-based plugins using context for a code editor component with language mode plugins.\nSOURCE: https://github.com/lit/lit.dev/blob/main/packages/lit-dev-content/site/docs/v3/data/context.md#2025-04-09_snippet_5\n\nLANGUAGE: html\nCODE:\n```\n<code-editor>\n  <code-editor-javascript-mode></code-editor-javascript-mode>\n  <code-editor-python-mode></code-editor-python-mode>\n</code-editor>\n```\n\n----------------------------------------\n\nTITLE: HTML Plugin System Example\nDESCRIPTION: Example showing how to structure HTML-based plugins using context for a code editor component with language mode plugins.\nSOURCE: https://github.com/lit/lit.dev/blob/main/packages/lit-dev-content/site/docs/v3/data/context.md#2025-04-09_snippet_5\n\nLANGUAGE: html\nCODE:\n```\n<code-editor>\n  <code-editor-javascript-mode></code-editor-javascript-mode>\n  <code-editor-python-mode></code-editor-python-mode>\n</code-editor>\n```\n\n----------------------------------------\n\nTITLE: Configuring Rollup Alias for Shady-Render Replacement\nDESCRIPTION: Rollup configuration to replace shady-render module with lit-html module for modern browser builds.\nSOURCE: https://github.com/lit/lit.dev/blob/main/packages/lit-dev-content/site/docs/v1/tools/build.md#2025-04-09_snippet_8\n\nLANGUAGE: javascript\nCODE:\n```\nalias({\n  entries: [{\n    find: 'lit-html/lib/shady-render.js',\n    replacement: 'node_modules/lit-html/lit-html.js'\n  }]\n})\n```\n\n----------------------------------------\n\nTITLE: Hydrating Standalone Lit Templates with JavaScript\nDESCRIPTION: Demonstrates how to use the hydrate() method from @lit-labs/ssr-client to re-associate Lit template expressions with DOM nodes and add event listeners before rendering updates.\nSOURCE: https://github.com/lit/lit.dev/blob/main/packages/lit-dev-content/site/docs/v3/ssr/client-usage.md#2025-04-09_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport {render} from 'lit';\nimport {hydrate} from '@lit-labs/ssr-client';\nimport {myTemplate} from './my-template.js';\n// Initial hydration required before render:\n// (must be same data used to render on the server)\nconst initialData = getInitialAppData();\nhydrate(myTemplate(initialData), document.body);\n\n// After hydration, render will efficiently update the server-rendered DOM:\nconst update = (data) => render(myTemplate(data), document.body);\n```\n\n----------------------------------------\n\nTITLE: Implementing a Simple Theme in Lit\nDESCRIPTION: This HTML snippet demonstrates how to implement a simple theme using CSS custom properties in a Lit application. It includes a theme definition and usage in multiple components.\nSOURCE: https://github.com/lit/lit.dev/blob/main/packages/lit-dev-content/site/docs/v1/components/styles.md#2025-04-09_snippet_19\n\nLANGUAGE: html\nCODE:\n```\n{% include \"v1-projects/style/theming/index.html\" %}\n```\n\n----------------------------------------\n\nTITLE: Defining properties in Lit components\nDESCRIPTION: Code comparison showing how to define reactive properties in Lit components using TypeScript decorators and JavaScript static properties.\nSOURCE: https://github.com/lit/lit.dev/blob/main/packages/lit-dev-content/site/docs/v2/tools/starter-kits.md#2025-04-09_snippet_6\n\nLANGUAGE: ts\nCODE:\n```\nexport class MyElement extends LitElement {\n  // ...\n  @property({type: String})\n  name = 'World';\n  //...\n}\n```\n\nLANGUAGE: js\nCODE:\n```\nexport class MyElement extends LitElement {\n  // ...\n  static properties = {\n    name: {type: String}\n  };\n\n  constructor() {\n    super();\n    this.name = 'World';\n  }\n  // ...\n}\n```\n\n----------------------------------------\n\nTITLE: Event Handling with Target Console Logging\nDESCRIPTION: Demonstrates event handling in both HTML and Lit render method, logging the event target to the console. Shows the difference in target reference between shadow DOM and light DOM.\nSOURCE: https://github.com/lit/lit.dev/blob/main/packages/lit-dev-content/site/docs/v3/components/events.md#2025-04-09_snippet_11\n\nLANGUAGE: html\nCODE:\n```\n<my-element onClick=\"(e) => console.log(e.target)\"></my-element>\n```\n\nLANGUAGE: javascript\nCODE:\n```\nrender() {\n  return html`\n    <button id=\"mybutton\" @click=\"${(e) => console.log(e.target)}\">\n      click me\n    </button>`;\n}\n```\n\n----------------------------------------\n\nTITLE: Applying Conditional Classes in Lit Component Template\nDESCRIPTION: This snippet demonstrates how to apply conditional classes in a Lit component template. It uses a ternary expression to add the 'completed' class to an item when its completed property is true.\nSOURCE: https://github.com/lit/lit.dev/blob/main/packages/lit-dev-content/site/tutorials/content/intro-to-lit/06.md#2025-04-09_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nclass=${item.completed ? 'completed' : ''}\n```\n\n----------------------------------------\n\nTITLE: Setting Public Context Property via HTML Template\nDESCRIPTION: Example showing how to set a public context property through the HTML template using property binding. This allows parent components to pass data to providers.\nSOURCE: https://github.com/lit/lit.dev/blob/main/packages/lit-dev-content/site/docs/v2/data/context.md#2025-04-09_snippet_8\n\nLANGUAGE: typescript\nCODE:\n```\n  html`<my-provider-element .myData=${someData}>`\n```\n\n----------------------------------------\n\nTITLE: Defining Event Arrays for Tooltip Interaction in TypeScript\nDESCRIPTION: Declares arrays of events for showing and hiding the tooltip. These events are used to add and remove event listeners on the target element.\nSOURCE: https://github.com/lit/lit.dev/blob/main/packages/lit-dev-content/site/tutorials/content/tooltip/03.md#2025-04-09_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n// Events to turn on/off the tooltip\nconst enterEvents = ['pointerenter', 'focus'];\nconst leaveEvents = ['pointerleave', 'blur', 'keydown', 'click'];\n```\n\n----------------------------------------\n\nTITLE: Creating a Context Consumer in Lit\nDESCRIPTION: Example of a Lit component that consumes a Logger instance from context using the @consume decorator. The component can use the logger property without it being explicitly passed down.\nSOURCE: https://github.com/lit/lit.dev/blob/main/packages/lit-dev-content/site/docs/v2/data/context.md#2025-04-09_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nimport {LitElement, property} from 'lit';\nimport {consume} from '@lit-labs/context';\n\nimport {type Logger, loggerContext} from './logger-context.js';\n\nexport class MyElement extends LitElement {\n\n  @consume({context: loggerContext})\n  @property({attribute: false})\n  public logger?: Logger;\n\n  private doThing() {\n    this.logger?.log('A thing was done');\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Importing Static HTML Module in Lit\nDESCRIPTION: Demonstrates how to import the specialized html and literal tag functions from Lit's static-html module for use with static expressions.\nSOURCE: https://github.com/lit/lit.dev/blob/main/packages/lit-dev-content/site/docs/v3/templates/expressions.md#2025-04-09_snippet_19\n\nLANGUAGE: typescript\nCODE:\n```\nimport {html, literal} from 'lit/static-html.js';\n```\n\n----------------------------------------\n\nTITLE: Adding playDirection State to Word Viewer Component\nDESCRIPTION: Adds an internal state property to track the animation direction. In TypeScript, it's defined with a type of -1 or 1, with a default value of 1. In JavaScript, it's added to the static properties object with state:true and initialized in the constructor.\nSOURCE: https://github.com/lit/lit.dev/blob/main/packages/lit-dev-content/site/tutorials/content/word-viewer/06.md#2025-04-09_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n// word-viewer.ts\n\n  @state() private playDirection: -1 | 1 = 1;\n```\n\nLANGUAGE: javascript\nCODE:\n```\n// word-viewer.js\n\n  static properties = {\n    playDirection: {state: true},\n    ...\n  };\n\n  constructor() {\n    ...\n    this.playDirection = 1;\n  }\n```\n\n----------------------------------------\n\nTITLE: Creating and Dispatching Extended Event Classes in JavaScript\nDESCRIPTION: Demonstrates how to extend the Event class to create a custom event type with additional properties, providing an alternative to using CustomEvent.\nSOURCE: https://github.com/lit/lit.dev/blob/main/packages/lit-dev-content/site/docs/v2/components/events.md#2025-04-09_snippet_8\n\nLANGUAGE: javascript\nCODE:\n```\nclass MyEvent extends Event {\n  constructor(message) {\n    super();\n    this.type = 'my-event';\n    this.message = message;\n  }\n}\n\nconst event = new MyEvent('Something important happened');\nthis.dispatchEvent(event);\n```\n\n----------------------------------------\n\nTITLE: Using keyed Directive in Lit Component\nDESCRIPTION: Demonstrates how to use the keyed directive in a Lit component to ensure state clearing when critical data changes.\nSOURCE: https://github.com/lit/lit.dev/blob/main/packages/lit-dev-content/site/docs/v2/templates/directives.md#2025-04-09_snippet_25\n\nLANGUAGE: typescript\nCODE:\n```\n@customElement('my-element')\nclass MyElement extends LitElement {\n\n  @property()\n  userId: string = '';\n\n  render() {\n    return html`\n      <div>\n        ${keyed(this.userId, html`<user-card .userId=${this.userId}></user-card>`)}\n      </div>`;\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Using choose Directive in TypeScript\nDESCRIPTION: Demonstrates how to use the choose directive in a Lit element to conditionally render content based on a value.\nSOURCE: https://github.com/lit/lit.dev/blob/main/packages/lit-dev-content/site/docs/v3/templates/directives.md#2025-04-09_snippet_9\n\nLANGUAGE: typescript\nCODE:\n```\nclass MyElement extends LitElement {\n  render() {\n    return html`\n      ${choose(this.section, [\n        ['home', () => html`<h1>Home</h1>`],\n        ['about', () => html`<h1>About</h1>`]\n      ],\n      () => html`<h1>Error</h1>`)}\n    `;\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Extending Component with Static Expressions (JavaScript)\nDESCRIPTION: JavaScript version of extending a component that uses static expressions, changing the tag from button to anchor.\nSOURCE: https://github.com/lit/lit.dev/blob/main/packages/lit-dev-content/site/docs/v3/templates/expressions.md#2025-04-09_snippet_23\n\nLANGUAGE: javascript\nCODE:\n```\nclass MyAnchor extends MyButton {\n  tag = literal`a`;\n}\ncustomElements.define('my-anchor', MyAnchor);\n```\n\n----------------------------------------\n\nTITLE: Implementing Localized LitElement in TypeScript\nDESCRIPTION: Example of a LitElement class using the @localized decorator for automatic re-rendering on locale changes.\nSOURCE: https://github.com/lit/lit.dev/blob/main/packages/lit-dev-content/site/docs/v3/localization/runtime-mode.md#2025-04-09_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nimport {LitElement, html} from 'lit';\nimport {customElement} from 'lit/decorators.js';\nimport {msg, localized} from '@lit/localize';\n\n@customElement('my-element');\n@localized()\nclass MyElement extends LitElement {\n  render() {\n    // Whenever setLocale() is called, and templates for that locale have\n    // finished loading, this render() function will be re-invoked.\n    return msg(html`Hello <b>World!</b>`);\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Selected Item Management in Lit Component with TypeScript\nDESCRIPTION: TypeScript implementation for handling the selected property changes and managing slot assignments. The code tracks the previously selected item, updates slot attributes when selection changes, and ensures the correct child element is displayed.\nSOURCE: https://github.com/lit/lit.dev/blob/main/packages/lit-dev-content/site/tutorials/content/carousel/03.md#2025-04-09_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nprivate previous = 0;\nprotected updated(changedProperties: PropertyValues) {\n  if (changedProperties.has('selected') && this.hasValidSelected()) {\n    this.updateSlots();\n    this.previous = this.selected;\n  }\n}\n\nprivate updateSlots() {\n  this.children[this.previous]?.removeAttribute('slot');\n  this.children[this.selected]?.setAttribute('slot', 'selected');\n}\n```\n\n----------------------------------------\n\nTITLE: Composing Templates in LitElement (JavaScript)\nDESCRIPTION: Demonstrates how to compose a LitElement template from smaller template functions. This approach allows for better organization and reuse of template parts.\nSOURCE: https://github.com/lit/lit.dev/blob/main/packages/lit-dev-content/site/docs/v1/components/templates.md#2025-04-09_snippet_9\n\nLANGUAGE: javascript\nCODE:\n```\n  function headerTemplate(title) {\n    return html`<header>${title}</header>`;\n  }\n  function articleTemplate(text) {\n    return html`<article>${text}</article>`;\n  }\n  function footerTemplate() {\n    return html`<footer>Your footer here.</footer>`;\n  }\n\nclass MyPage extends LitElement {\n  ...\n  render() {\n    return html`\n      ${headerTemplate(this.article.title)}\n      ${articleTemplate(this.article.text)}\n      ${footerTemplate()}\n    `;\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Robust Tooltip Positioning with Floating-UI in JavaScript\nDESCRIPTION: This is the JavaScript version of the tooltip positioning code using Floating-UI. It performs the same functionality as the TypeScript version but without type annotations.\nSOURCE: https://github.com/lit/lit.dev/blob/main/packages/lit-dev-content/site/tutorials/content/tooltip/05.md#2025-04-09_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nshow = () => {\n  this.style.cssText = '';\n  // Robust positioning\n  computePosition(this.target, this, {\n    strategy: 'fixed',\n    middleware: [\n      offset(this.offset),\n      shift(),\n      autoPlacement({allowedPlacements: ['top', 'bottom']}),\n    ],\n  }).then(({x, y}) => {\n    this.style.left = `${x}px`;\n    this.style.top = `${y}px`;\n  });\n};\n```\n\n----------------------------------------\n\nTITLE: Using Render Options in a Component Class\nDESCRIPTION: Shows how to use render options in a component class context. This example demonstrates setting the eventContext option to bind event listeners to the current component instance.\nSOURCE: https://github.com/lit/lit.dev/blob/main/packages/lit-dev-content/site/docs/v1/lit-html/rendering-templates.md#2025-04-09_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nclass MyComponent extends HTMLElement {\n  // ...\n\n  _update() {\n    // Bind event listeners to the current instance of MyComponent\n    render(this._template(), this._renderRoot, {eventContext: this});\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Handling Slot Changes in Lit Components\nDESCRIPTION: An example of handling the slotchange event to extract and process text content from all slotted children when they change, with the event handler and corresponding render method.\nSOURCE: https://github.com/lit/lit.dev/blob/main/packages/lit-dev-content/site/docs/v2/components/shadow-dom.md#2025-04-09_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\nhandleSlotchange(e) {\n  const childNodes = e.target.assignedNodes({flatten: true});\n  // ... do something with childNodes ...\n  this.allText = childNodes.map((node) => {\n    return node.textContent ? node.textContent : ''\n  }).join('');\n}\n\nrender() {\n  return html`<slot @slotchange=${this.handleSlotchange}></slot>`;\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring CSS Custom Properties per Instance\nDESCRIPTION: This HTML snippet shows how to configure CSS custom properties for different instances of a Lit component. It uses class selectors to apply different values to the same custom property.\nSOURCE: https://github.com/lit/lit.dev/blob/main/packages/lit-dev-content/site/docs/v1/components/styles.md#2025-04-09_snippet_18\n\nLANGUAGE: html\nCODE:\n```\n<style>\n  my-element {\n    --my-background: rgb(67, 156, 144);\n  }\n  my-element.stuff {\n    --my-background: #111111;\n  }\n</style>\n<my-element></my-element>\n<my-element class=\"stuff\"></my-element>\n```\n\n----------------------------------------\n\nTITLE: Using Lit Component in HTML\nDESCRIPTION: Example of how to use a Lit component in plain HTML by loading the component script and using the custom element tag.\nSOURCE: https://github.com/lit/lit.dev/blob/main/packages/lit-dev-content/site/docs/v2/tools/adding-lit.md#2025-04-09_snippet_3\n\nLANGUAGE: html\nCODE:\n```\n<script type=\"module\" src=\"/lib/components/my-element.js\">\n<my-element></my-element>\n```\n\n----------------------------------------\n\nTITLE: Implementing click event handling in a custom web component\nDESCRIPTION: This code shows how to implement click event handling in a custom web component by binding listeners, attaching them to buttons in connectedCallback, cleaning them up in disconnectedCallback, and setting the vote property when buttons are clicked.\nSOURCE: https://github.com/lit/lit.dev/blob/main/packages/lit-dev-content/site/tutorials/content/wc-to-lit/08.md#2025-04-09_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nexport class RatingElement extends HTMLElement {\n  ...\n  private _boundOnUpClick = this._onUpClick.bind(this);\n  private _boundOnDownClick = this._onDownClick.bind(this);\n\n  connectedCallback() {\n    ...\n\n    this.shadowRoot!\n      .querySelector('.thumb_up')!\n      .addEventListener('click', this._boundOnUpClick);\n    this.shadowRoot!\n      .querySelector('.thumb_down')!\n      .addEventListener('click', this._boundOnDownClick);\n  }\n\n  disconnectedCallback() {\n    this.shadowRoot!\n      .querySelector('.thumb_up')!\n      .removeEventListener('click', this._boundOnUpClick);\n    this.shadowRoot!\n      .querySelector('.thumb_down')!\n      .removeEventListener('click', this._boundOnDownClick);\n  }\n\n  ...\n\n  _onUpClick() {\n    this.vote = 'up';\n  }\n\n  _onDownClick() {\n    this.vote = 'down';\n  }\n}\n```\n\nLANGUAGE: javascript\nCODE:\n```\nexport class RatingElement extends HTMLElement {\n  ...\n  _boundOnUpClick = this._onUpClick.bind(this);\n  _boundOnDownClick = this._onDownClick.bind(this);\n\n  connectedCallback() {\n    ...\n\n    this.shadowRoot\n      .querySelector('.thumb_up')\n      .addEventListener('click', this._boundOnUpClick);\n    this.shadowRoot\n      .querySelector('.thumb_down')\n      .addEventListener('click', this._boundOnDownClick);\n  }\n\n  disconnectedCallback() {\n    this.shadowRoot\n      .querySelector('.thumb_up')\n      .removeEventListener('click', this._boundOnUpClick);\n    this.shadowRoot\n      .querySelector('.thumb_down')\n      .removeEventListener('click', this._boundOnDownClick);\n  }\n\n  ...\n\n  _onUpClick() {\n    this.vote = 'up';\n  }\n\n  _onDownClick() {\n    this.vote = 'down';\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Using Context for Data Sharing in Lit Components\nDESCRIPTION: Demonstrates using @lit/context to pass data down a component tree without prop drilling. This allows components to consume context provided by ancestor components.\nSOURCE: https://github.com/lit/lit.dev/blob/main/packages/lit-dev-content/site/articles/article/lit-cheat-sheet.md#2025-04-09_snippet_38\n\nLANGUAGE: typescript\nCODE:\n```\n{% playground-ide \"examples/context-consume-provide\", true %}\n```\n\n----------------------------------------\n\nTITLE: Importing core lit-html functions\nDESCRIPTION: How to import the main html and render functions from the lit-html package.\nSOURCE: https://github.com/lit/lit.dev/blob/main/packages/lit-dev-content/site/docs/v2/libraries/standalone-templates.md#2025-04-09_snippet_1\n\nLANGUAGE: js\nCODE:\n```\nimport {html, render} from 'lit-html';\n```\n\n----------------------------------------\n\nTITLE: Calculating Carousel Element Positions in Lit TypeScript\nDESCRIPTION: Implementation of position calculation logic for a carousel component. Handles tracking of selected items, movement direction calculation, and position computation for current and previous elements. Uses percentage-based positioning and includes logic for wrapping at start/end positions.\nSOURCE: https://github.com/lit/lit.dev/blob/main/packages/lit-dev-content/site/tutorials/content/carousel/07.md#2025-04-09_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nrender() {\n  const p = this.selectedInternal;\n  const s = (this.selectedInternal =\n    this.hasValidSelected() ? this.selected : this.selectedInternal);\n  const shouldMove = this.hasUpdated && s !== p;\n  const atStart = p === 0;\n  const toStart = s === 0;\n  const atEnd = p === this.maxSelected;\n  const toEnd = s === this.maxSelected;\n  const shouldAdvance = shouldMove &&\n    (atEnd ? toStart : atStart ? !toEnd : s > p);\n  const delta = (shouldMove ? Number(shouldAdvance) || -1 : 0) * 100;\n  this.left -= delta;\n  const animateLeft = `${this.left}%`;\n  const selectedLeft = `${-this.left}%`;\n  const previousLeft = `${-this.left - delta}%`;\n```\n\n----------------------------------------\n\nTITLE: Manual Task Execution with Arguments\nDESCRIPTION: Shows how to manually run a task with explicit arguments passed to the run() method.\nSOURCE: https://github.com/lit/lit.dev/blob/main/packages/lit-dev-content/site/docs/v3/data/task.md#2025-04-09_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nthis._task.run(['arg1', 'arg2']);\n```\n\n----------------------------------------\n\nTITLE: Web Dev Server Legacy Browser Support Configuration\nDESCRIPTION: Configuration for Web Dev Server to support legacy browsers including IE11 with polyfills.\nSOURCE: https://github.com/lit/lit.dev/blob/main/packages/lit-dev-content/site/docs/v2/tools/development.md#2025-04-09_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nimport { legacyPlugin } from '@web/dev-server-legacy';\n\nexport default {\n  // ...\n  plugins: [\n    // Make sure this plugin is always last\n    legacyPlugin({\n      polyfills: {\n        webcomponents: true,\n        // Inject lit's polyfill-support module into test files, which is required\n        // for interfacing with the webcomponents polyfills\n        custom: [\n          {\n            name: 'lit-polyfill-support',\n            path: 'node_modules/lit/polyfill-support.js',\n            test: \"!('attachShadow' in Element.prototype)\",\n            module: false,\n          },\n        ],\n      },\n    }),\n  ],\n};\n```\n\n----------------------------------------\n\nTITLE: Basic Custom Property Converter Declaration\nDESCRIPTION: Shows the basic syntax for declaring a custom property converter in Lit.\nSOURCE: https://github.com/lit/lit.dev/blob/main/packages/lit-dev-content/site/docs/v2/components/properties.md#2025-04-09_snippet_15\n\nLANGUAGE: javascript\nCODE:\n```\nmyProp: {\n  converter: // Custom property converter\n}\n```\n\n----------------------------------------\n\nTITLE: Guard Directive Usage Example\nDESCRIPTION: Demonstrates using the guard directive to optimize rendering performance.\nSOURCE: https://github.com/lit/lit.dev/blob/main/packages/lit-dev-content/site/docs/v3/templates/directives.md#2025-04-09_snippet_30\n\nLANGUAGE: typescript\nCODE:\n```\n@customElement('my-element')\nclass MyElement extends LitElement {\n\n  @property()\n  value: string = '';\n\n  render() {\n    return html`\n      <div>\n        ${guard([this.value], () => calculateSHA(this.value))}\n      </div>`;\n  }\n}\n```\n\nLANGUAGE: javascript\nCODE:\n```\nclass MyElement extends LitElement {\n  static properties = {\n    value: {},\n  };\n\n  constructor() {\n    super();\n    this.value = '';\n  }\n\n  render() {\n    return html`\n      <div>\n        ${guard([this.value], () => calculateSHA(this.value))}\n      </div>`;\n  }\n}\ncustomElements.define('my-element', MyElement);\n```\n\n----------------------------------------\n\nTITLE: Customizing Update Scheduling in TypeScript and JavaScript\nDESCRIPTION: Example demonstrating how to override the scheduleUpdate method to defer updates until after the next frame paints, which can reduce jank for expensive updates.\nSOURCE: https://github.com/lit/lit.dev/blob/main/packages/lit-dev-content/site/docs/v2/components/lifecycle.md#2025-04-09_snippet_14\n\nLANGUAGE: typescript\nCODE:\n```\nprotected override async scheduleUpdate(): Promise<void> {\n  await new Promise((resolve) => setTimeout(resolve));\n  super.scheduleUpdate();\n}\n```\n\nLANGUAGE: javascript\nCODE:\n```\nasync scheduleUpdate() {\n  await new Promise((resolve) => setTimeout(resolve));\n  super.scheduleUpdate();\n}\n```\n\n----------------------------------------\n\nTITLE: Using map() Directive in Lit Component Render Method\nDESCRIPTION: This snippet demonstrates how to use the map() directive in a Lit component's render method. It transforms each item in the 'items' set into a list item (<li>) within an unordered list (<ul>).\nSOURCE: https://github.com/lit/lit.dev/blob/main/packages/lit-dev-content/site/tutorials/content/working-with-lists/01.md#2025-04-09_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\n  render() {\n    return html`\n      ⋮\n      <ul>\n        ${map(this.items, (item) => html`<li>${item}</li>`)}\n      </ul>\n    `;\n  }\n```\n\nLANGUAGE: javascript\nCODE:\n```\n  render() {\n    return html`\n      ⋮\n      <ul>\n        ${map(this.items, (item) => html`<li>${item}</li>`)}\n      </ul>\n    `;\n  }\n```\n\n----------------------------------------\n\nTITLE: Implementing Carousel Click Handler - TypeScript\nDESCRIPTION: TypeScript implementation of the click handler that manages carousel item selection and dispatches a change event. Supports forward/backward navigation using the shift key and handles wraparound at boundaries.\nSOURCE: https://github.com/lit/lit.dev/blob/main/packages/lit-dev-content/site/tutorials/content/carousel/04.md#2025-04-09_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nprivate clickHandler(e: MouseEvent) {\n  const i = this.selected + (Number(!e.shiftKey) || -1);\n  this.selected = i > this.maxSelected ? 0 : i < 0 ? this.maxSelected : i;\n  const change = new CustomEvent('change',\n    {detail: this.selected, bubbles: true, composed: true});\n  this.dispatchEvent(change);\n}\n```\n\n----------------------------------------\n\nTITLE: Extending getUpdateComplete for Child Component Updates in JavaScript\nDESCRIPTION: Example showing how to override getUpdateComplete to await additional conditions, such as waiting for a child component to complete its update before resolving the parent's updateComplete promise.\nSOURCE: https://github.com/lit/lit.dev/blob/main/packages/lit-dev-content/site/docs/v2/components/lifecycle.md#2025-04-09_snippet_15\n\nLANGUAGE: javascript\nCODE:\n```\nclass MyElement extends LitElement {\n  async getUpdateComplete() {\n    await super.getUpdateComplete();\n    await this._myChild.updateComplete;\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Basic Render Implementation\nDESCRIPTION: Example of a render() method implementation showing template composition.\nSOURCE: https://github.com/lit/lit.dev/blob/main/packages/lit-dev-content/site/docs/v2/components/lifecycle.md#2025-04-09_snippet_8\n\nLANGUAGE: javascript\nCODE:\n```\nrender() {\n  const header = `<header>${this.header}</header>`;\n  const content = `<section>${this.content}</section>`;\n  return html`${header}${content}`;\n}\n```\n\n----------------------------------------\n\nTITLE: Basic Render Implementation\nDESCRIPTION: Example of a render() method implementation showing template composition.\nSOURCE: https://github.com/lit/lit.dev/blob/main/packages/lit-dev-content/site/docs/v2/components/lifecycle.md#2025-04-09_snippet_8\n\nLANGUAGE: javascript\nCODE:\n```\nrender() {\n  const header = `<header>${this.header}</header>`;\n  const content = `<section>${this.content}</section>`;\n  return html`${header}${content}`;\n}\n```\n\n----------------------------------------\n\nTITLE: HTML Comment Explaining Section Heading Purpose\nDESCRIPTION: An HTML comment explaining that this file exists only to create a section heading and its output is deleted by the Eleventy build process.\nSOURCE: https://github.com/lit/lit.dev/blob/main/packages/lit-dev-content/site/docs/v3/templates/index.md#2025-04-09_snippet_1\n\nLANGUAGE: html\nCODE:\n```\n<!-- This file exists only to create a section heading.\n     Its output is deleted by the Eleventy build process. -->\n```\n\n----------------------------------------\n\nTITLE: Defining CSS Custom Property in Lit Component\nDESCRIPTION: This snippet shows how to define a CSS custom property for background color in a Lit component. It uses the var() function to set a default value if the custom property is not defined.\nSOURCE: https://github.com/lit/lit.dev/blob/main/packages/lit-dev-content/site/docs/v1/components/styles.md#2025-04-09_snippet_16\n\nLANGUAGE: javascript\nCODE:\n```\nclass MyElement extends LitElement {\n  static get styles() {\n    return css`\n      :host {\n        background-color: var(--my-background, yellow);\n      }\n    `;\n  }\n  render() {\n    return html`<p>Hello world</p>`;\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: When Directive Usage Example\nDESCRIPTION: Example showing how to use the when directive for conditional rendering in a Lit component.\nSOURCE: https://github.com/lit/lit.dev/blob/main/packages/lit-dev-content/site/docs/v2/templates/directives.md#2025-04-09_snippet_8\n\nLANGUAGE: typescript\nCODE:\n```\nclass MyElement extends LitElement {\n  render() {\n    return html`\n      ${when(this.user, () => html`User: ${this.user.username}`, () => html`Sign In...`)}\n    `;\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Rollup for Modern+Legacy Lit Application Build\nDESCRIPTION: Rollup configuration file for building a Lit application with both modern and legacy browser support. It includes plugins for HTML processing, polyfill loading, module resolution, minification, and asset copying.\nSOURCE: https://github.com/lit/lit.dev/blob/main/packages/lit-dev-content/site/docs/v2/tools/production.md#2025-04-09_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\n// Import rollup plugins\nimport html from '@web/rollup-plugin-html';\nimport polyfillsLoader from '@web/rollup-plugin-polyfills-loader';\nimport {copy} from '@web/rollup-plugin-copy';\nimport resolve from '@rollup/plugin-node-resolve';\nimport {getBabelOutputPlugin} from '@rollup/plugin-babel';\nimport {terser} from 'rollup-plugin-terser';\nimport minifyHTML from 'rollup-plugin-minify-html-literals';\nimport summary from 'rollup-plugin-summary';\n\n// Configure an instance of @web/rollup-plugin-html\nconst htmlPlugin = html({\n  rootDir: './',\n  flattenOutput: false,\n});\n\nexport default {\n  // Entry point for application build; can specify a glob to build multiple\n  // HTML files for non-SPA app\n  input: 'index.html',\n  plugins: [\n    htmlPlugin,\n    // Resolve bare module specifiers to relative paths\n    resolve(),\n    // Minify HTML template literals\n    minifyHTML(),\n    // Minify JS\n    terser({\n      module: true,\n      warnings: true,\n    }),\n    // Inject polyfills into HTML (core-js, regnerator-runtime, webcoponents,\n    // lit/polyfill-support) and dynamically loads modern vs. legacy builds\n    polyfillsLoader({\n      modernOutput: {\n        name: 'modern',\n      },\n      // Feature detection for loading legacy bundles\n      legacyOutput: {\n        name: 'legacy',\n        test: '!!Array.prototype.flat',\n        type: 'systemjs',\n      },\n      // List of polyfills to inject (each has individual feature detection)\n      polyfills: {\n        hash: true,\n        coreJs: true,\n        regeneratorRuntime: true,\n        fetch: true,\n        webcomponents: true,\n        // Custom configuration for loading Lit's polyfill-support module,\n        // required for interfacing with the webcomponents polyfills\n        custom: [\n          {\n            name: 'lit-polyfill-support',\n            path: 'node_modules/lit/polyfill-support.js',\n            test: \"!('attachShadow' in Element.prototype)\",\n            module: false,\n          },\n        ],\n      },\n    }),\n    // Print bundle summary\n    summary(),\n    // Optional: copy any static assets to build directory\n    copy({\n      patterns: ['data/**/*', 'images/**/*'],\n    }),\n  ],\n  // Specifies two JS output configurations, modern and legacy, which the HTML plugin will\n  // automatically choose between; the legacy build is compiled to ES5\n  // and SystemJS modules\n  output: [\n    {\n      // Modern JS bundles (no JS compilation, ES module output)\n      format: 'esm',\n      chunkFileNames: '[name]-[hash].js',\n      entryFileNames: '[name]-[hash].js',\n      dir: 'build',\n      plugins: [htmlPlugin.api.addOutput('modern')],\n    },\n    {\n      // Legacy JS bundles (ES5 compilation and SystemJS module output)\n      format: 'esm',\n      chunkFileNames: 'legacy-[name]-[hash].js',\n      entryFileNames: 'legacy-[name]-[hash].js',\n      dir: 'build',\n      plugins: [\n        htmlPlugin.api.addOutput('legacy'),\n        // Uses babel to compile JS to ES5 and modules to SystemJS\n        getBabelOutputPlugin({\n          compact: true,\n          presets: [\n            [\n              '@babel/preset-env',\n              {\n                targets: {\n                  ie: '11',\n                },\n                modules: 'systemjs',\n              },\n            ],\n          ],\n        }),\n      ],\n    },\n  ],\n  preserveEntrySignatures: false,\n};\n```\n\n----------------------------------------\n\nTITLE: Creating a Custom Button Component with Static Tag Expression\nDESCRIPTION: Demonstrates creating a Lit component that uses static expressions for tag names and attribute names. This allows customizing template structure in ways not possible with standard expressions.\nSOURCE: https://github.com/lit/lit.dev/blob/main/packages/lit-dev-content/site/docs/v2/templates/expressions.md#2025-04-09_snippet_9\n\nLANGUAGE: typescript\nCODE:\n```\nimport {LitElement} from 'lit';\nimport {customElement, property} from 'lit/decorators.js';\nimport {html, literal} from 'lit/static-html.js';\n\n@customElement('my-button')\nclass MyButton extends LitElement {\n  tag = literal`button`;\n  activeAttribute = literal`active`;\n  @property() caption = 'Hello static';\n  @property({type: Boolean}) active = false;\n\n  render() {\n    return html`\n      <${this.tag} ${this.activeAttribute}=${this.active}>\n        <p>${this.caption}</p>\n      </${this.tag}>`;\n  }\n}\n```\n\nLANGUAGE: javascript\nCODE:\n```\nimport {LitElement} from 'lit';\nimport {html, literal} from 'lit/static-html.js';\n\nclass MyButton extends LitElement {\n  static properties = {\n    caption: {},\n    active: {type: Boolean},\n  };\n\n  tag = literal`button`;\n  activeAttribute = literal`active`;\n\n  constructor() {\n    super();\n    this.caption = 'Hello static';\n    this.active = false;\n  }\n\n  render() {\n    return html`\n      <${this.tag} ${this.activeAttribute}=${this.active}>\n        <p>${this.caption}</p>\n      </${this.tag}>`;\n  }\n}\ncustomElements.define('my-button', MyButton);\n```\n\n----------------------------------------\n\nTITLE: Conditional Template Expression in Lit\nDESCRIPTION: Demonstrates using conditional logic within template expressions.\nSOURCE: https://github.com/lit/lit.dev/blob/main/packages/lit-dev-content/site/docs/v2/templates/expressions.md#2025-04-09_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\nhtml`\n  ${this.user.isloggedIn\n      ? html`Welcome ${this.user.name}`\n      : html`Please log in`\n  }\n`;\n```\n\n----------------------------------------\n\nTITLE: Theming with CSS Variables in LitElement\nDESCRIPTION: Demonstrates how to use CSS variables and custom properties to configure styles per-instance in LitElement components.\nSOURCE: https://github.com/lit/lit.dev/blob/main/packages/lit-dev-content/site/docs/v1/components/styles.md#2025-04-09_snippet_15\n\nLANGUAGE: javascript\nCODE:\n```\n// MyElement's static styles\nstatic get styles() {\n  return css`\n    :host {\n      background-color: var(--my-element-background-color);\n    }\n  `;\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Delete Handler in Lit Component\nDESCRIPTION: Defines a delete method that removes an item from the things array using the filter method. Uses immutable data pattern by creating a new array reference to ensure proper component updates.\nSOURCE: https://github.com/lit/lit.dev/blob/main/packages/lit-dev-content/site/tutorials/content/working-with-lists/06.md#2025-04-09_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nclass MyElement extends LitElement {\n  ⋮\n  private _deleteThing(index: number) {\n    this.things = this.things.filter((_, i) => i !== index);\n  }\n}\n```\n\nLANGUAGE: javascript\nCODE:\n```\nclass MyElement extends LitElement {\n  ⋮\n  _deleteThing(index) {\n    this.things = this.things.filter((_, i) => i !== index);\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Reactive Properties with Options in TypeScript\nDESCRIPTION: Demonstrates how to use property options when declaring reactive properties with decorators in TypeScript.\nSOURCE: https://github.com/lit/lit.dev/blob/main/packages/lit-dev-content/site/docs/v2/components/properties.md#2025-04-09_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nclass MyElement extends LitElement {\n  @property({type: String})\n  mode?: string;\n\n  @property({attribute: false})\n  data = {};\n}\n```\n\n----------------------------------------\n\nTITLE: Binding to HTML Tag Names with static-html\nDESCRIPTION: Demonstrates how to bind to an HTML tag name to change the rendered element using the static-html module and the literal template tag.\nSOURCE: https://github.com/lit/lit.dev/blob/main/packages/lit-dev-content/site/articles/article/lit-cheat-sheet.md#2025-04-09_snippet_9\n\nLANGUAGE: typescript\nCODE:\n```\nimport {LitElement, html} from 'lit';\nimport {customElement, property} from 'lit/decorators.js';\nimport {literal} from 'lit/static-html.js';\n\n@customElement('my-element')\nexport class MyElement extends LitElement {\n  @property({type: String})\n  tagName = 'div';\n\n  render() {\n    return html`\n      <${literal(this.tagName)}>Hello World</${literal(this.tagName)}>\n    `;\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: When Directive Usage Example\nDESCRIPTION: Example showing how to use the when directive for conditional rendering in a Lit component.\nSOURCE: https://github.com/lit/lit.dev/blob/main/packages/lit-dev-content/site/docs/v2/templates/directives.md#2025-04-09_snippet_8\n\nLANGUAGE: typescript\nCODE:\n```\nclass MyElement extends LitElement {\n  render() {\n    return html`\n      ${when(this.user, () => html`User: ${this.user.username}`, () => html`Sign In...`)}\n    `;\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Using ref Directive with Callback in Lit Element\nDESCRIPTION: Demonstrates how to use the ref directive with a callback function to handle changes to a referenced element in a Lit component.\nSOURCE: https://github.com/lit/lit.dev/blob/main/packages/lit-dev-content/site/docs/v2/templates/directives.md#2025-04-09_snippet_41\n\nLANGUAGE: typescript\nCODE:\n```\n@customElement('my-element')\nclass MyElement extends LitElement {\n\n  render() {\n    // Passing a change callback to ref directive\n    return html`<input ${ref(this.inputChanged)}>`;\n  }\n\n  inputChanged(input?: HTMLInputElement) {\n    input?.focus();\n  }\n}\n```\n\nLANGUAGE: javascript\nCODE:\n```\nclass MyElement extends LitElement {\n\n  render() {\n    // Passing a change callback to ref directive\n    return html`<input ${ref(this.inputChanged)}>`;\n  }\n\n  inputChanged(input) {\n    input?.focus();\n  }\n}\ncustomElements.define('my-element', MyElement);\n```\n\n----------------------------------------\n\nTITLE: Using LitElement Component in HTML\nDESCRIPTION: Example of adding a LitElement component to an HTML document.\nSOURCE: https://github.com/lit/lit.dev/blob/main/packages/lit-dev-content/site/docs/v1/tools/use.md#2025-04-09_snippet_3\n\nLANGUAGE: html\nCODE:\n```\n<some-component></some-component>\n```\n\n----------------------------------------\n\nTITLE: Using classMap Directive in Lit (TypeScript)\nDESCRIPTION: Demonstrates how to use the classMap directive to dynamically set classes on an element based on a condition.\nSOURCE: https://github.com/lit/lit.dev/blob/main/packages/lit-dev-content/site/docs/v3/templates/directives.md#2025-04-09_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\n@customElement('my-element')\nclass MyElement extends LitElement {\n\n  @property({type: Boolean})\n  enabled = false;\n\n  render() {\n    const classes = { enabled: this.enabled, hidden: false };\n    return html`<div class=${classMap(classes)}>Classy text</div>`;\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Updating queryAssignedNodes decorator usage\nDESCRIPTION: Code snippets showing how to update the deprecated queryAssignedNodes decorator to use the new object parameter syntax or queryAssignedElements.\nSOURCE: https://github.com/lit/lit.dev/blob/main/packages/lit-dev-content/site/docs/v3/releases/upgrade.md#2025-04-09_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\n// Removed\n@queryAssignedNodes('list', true, '.item')\n\n// Updated\n@queryAssignedElements({slot: 'list', flatten: true, selector: '.item'})\n```\n\nLANGUAGE: typescript\nCODE:\n```\n// Removed\n@queryAssignedNodes('list', true)\n\n// Updated\n@queryAssignedNodes({slot: 'list', flatten: true})\n```\n\n----------------------------------------\n\nTITLE: Immutable Array and Object Updates in JavaScript\nDESCRIPTION: Demonstrates the recommended immutable data pattern for updating arrays and objects in Lit components using spread operators. This approach ensures proper change detection and component updates.\nSOURCE: https://github.com/lit/lit.dev/blob/main/packages/lit-dev-content/site/tutorials/content/reactivity/02.md#2025-04-09_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nthis.array = [...this.array, newThing]\nthis.obj = {...this.obj, id: ++this.obj.id}\n```\n\n----------------------------------------\n\nTITLE: Binding to Attributes in lit-html\nDESCRIPTION: Demonstrates how to bind expressions to element attributes in lit-html templates. The example shows both regular attribute binding, which converts values to strings, and boolean attribute binding with the ? prefix.\nSOURCE: https://github.com/lit/lit.dev/blob/main/packages/lit-dev-content/site/docs/v1/lit-html/writing-templates.md#2025-04-09_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\n// set the class attribute\nconst myTemplate = (data) => html`<div class=${data.cssClass}>Stylish text.</div>`;\n```\n\nLANGUAGE: javascript\nCODE:\n```\nconst myTemplate2 = (data) => html`<div ?disabled=${!data.active}>Stylish text.</div>`;\n```\n\n----------------------------------------\n\nTITLE: Implementing Rating Property Binding in TypeScript for Custom Elements\nDESCRIPTION: This snippet shows how to implement getter and setter methods for a 'rating' property in a custom element. The setter updates the DOM to reflect property changes by finding and updating the rating element's text in the shadow DOM.\nSOURCE: https://github.com/lit/lit.dev/blob/main/packages/lit-dev-content/site/tutorials/content/wc-to-lit/05.md#2025-04-09_snippet_0\n\nLANGUAGE: ts\nCODE:\n```\nprivate _rating = 0;\n\nset rating(value) {\n  this._rating = value;\n\n  if (!this.shadowRoot) {\n    return;\n  }\n\n  const ratingEl = this.shadowRoot.querySelector<HTMLElement>('.rating');\n\n  if (ratingEl) {\n    ratingEl.innerText = `${this._rating}`;\n  }\n}\n\nget rating() {\n  return this._rating;\n}\n```\n\n----------------------------------------\n\nTITLE: Context Creation Import\nDESCRIPTION: Import statement for the createContext function from @lit/context package.\nSOURCE: https://github.com/lit/lit.dev/blob/main/packages/lit-dev-content/site/docs/v3/data/context.md#2025-04-09_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\nimport {createContext} from '@lit/context';\n```\n\n----------------------------------------\n\nTITLE: Using a Lit Component in Plain HTML\nDESCRIPTION: Demonstrates how to use a Lit component in plain HTML by including the component script and using the custom element tag.\nSOURCE: https://github.com/lit/lit.dev/blob/main/packages/lit-dev-content/site/docs/v3/tools/adding-lit.md#2025-04-09_snippet_3\n\nLANGUAGE: html\nCODE:\n```\n<script type=\"module\" src=\"/lib/components/my-element.js\">\n<my-element></my-element>\n```\n\n----------------------------------------\n\nTITLE: classMap Usage Example in HTML\nDESCRIPTION: Shows how to use the classMap directive to apply a set of classes to an HTML element in a LitElement template.\nSOURCE: https://github.com/lit/lit.dev/blob/main/packages/lit-dev-content/site/docs/v1/components/styles.md#2025-04-09_snippet_12\n\nLANGUAGE: html\nCODE:\n```\n<div class=${classMap({alert:true,info:true})}>Content.</div>\n<!-- Equivalent: <div class=\"alert info\">Content.</div> -->\n```\n\n----------------------------------------\n\nTITLE: Attribute and Property Expressions in Lit Templates\nDESCRIPTION: Demonstrates the three types of built-in expressions in Lit for setting attributes or properties on elements: property expressions, attribute expressions, and boolean attribute expressions.\nSOURCE: https://github.com/lit/lit.dev/blob/main/packages/lit-dev-content/site/articles/article/lit-cheat-sheet.md#2025-04-09_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\n@customElement('my-element')\nexport class MyElement extends LitElement {\n  @property({type: String})\n  myProp = 'myProp';\n\n  @property({type: String})\n  myAttr = 'myAttr';\n\n  @property({type: Boolean})\n  myBool = true;\n\n  render() {\n    return html`\n      <div .prop=${this.myProp}></div>\n      <div attr=${this.myAttr}></div>\n      <div ?attr=${this.myBool}></div>\n    `;\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Custom Property Converter in LitElement\nDESCRIPTION: Shows how to specify a custom property converter using the 'converter' option in property declaration, including both object and function forms.\nSOURCE: https://github.com/lit/lit.dev/blob/main/packages/lit-dev-content/site/docs/v1/components/properties.md#2025-04-09_snippet_6\n\nLANGUAGE: JavaScript\nCODE:\n```\nmyProp: {\n  converter: {\n    fromAttribute: (value, type) => {\n      // `value` is a string\n      // Convert it to a value of type `type` and return it\n    },\n    toAttribute: (value, type) => {\n      // `value` is of type `type`\n      // Convert it to a string and return it\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: classMap Usage Example - TypeScript\nDESCRIPTION: Example showing how to use classMap directive in a Lit component with TypeScript decorators.\nSOURCE: https://github.com/lit/lit.dev/blob/main/packages/lit-dev-content/site/docs/v2/templates/directives.md#2025-04-09_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\n@customElement('my-element')\nclass MyElement extends LitElement {\n\n  @property({type: Boolean})\n  enabled = false;\n\n  render() {\n    const classes = { enabled: this.enabled, hidden: false };\n    return html`<div class=${classMap(classes)}>Classy text</div>`;\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: HTML Template Structure for Rating Component\nDESCRIPTION: Defines the HTML template structure for a rating component including styles and SVG buttons for thumbs up/down interactions.\nSOURCE: https://github.com/lit/lit.dev/blob/main/packages/lit-dev-content/site/tutorials/content/wc-to-lit/04.md#2025-04-09_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<template id=\"rating-element-template\">\n   <style>\n     :host {\n       display: inline-flex;\n       align-items: center;\n     }\n     button {\n       background: transparent;\n       border: none;\n       cursor: pointer;\n     }\n   </style>\n   <button class=\"thumb_down\" >\n     <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24\" viewbox=\"0 0 24 24\" width=\"24\"><path d=\"M15 3H6c-.83 0-1.54.5-1.84 1.22l-3.02 7.05c-.09.23-.14.47-.14.73v2c0 1.1.9 2 2 2h6.31l-.95 4.57-.03.32c0 .41.17.79.44 1.06L9.83 23l6.59-6.59c.36-.36.58-.86.58-1.41V5c0-1.1-.9-2-2-2zm4 0v12h4V3h-4z\"/></svg>\n   </button>\n   <span class=\"rating\"></span>\n   <button class=\"thumb_up\">\n     <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24\" viewbox=\"0 0 24 24\" width=\"24\"><path d=\"M1 21h4V9H1v12zm22-11c0-1.1-.9-2-2-2h-6.31l.95-4.57.03-.32c0-.41-.17-.79-.44-1.06L14.17 1 7.59 7.59C7.22 7.95 7 8.45 7 9v10c0 1.1.9 2 2 2h9c.83 0 1.54-.5 1.84-1.22l3.02-7.05c.09-.23.14-.47.14-.73v-2z\"/></svg>\n   </button>\n </template>\n\n <rating-element>\n   <div>\n     This is the light DOM!\n   </div>\n </rating-element>\n```\n\n----------------------------------------\n\nTITLE: Using render options with lit-html\nDESCRIPTION: Example of using render options to control where content is inserted in the container. The renderBefore option allows rendering before a specific node rather than appending to the end of the container.\nSOURCE: https://github.com/lit/lit.dev/blob/main/packages/lit-dev-content/site/docs/v3/libraries/standalone-templates.md#2025-04-09_snippet_5\n\nLANGUAGE: html\nCODE:\n```\n<div id=\"container\">\n  <header>My Site</header>\n  <footer>Copyright 2021</footer>\n</div>\n```\n\nLANGUAGE: ts\nCODE:\n```\nconst template = () => html`...`;\nconst container = document.getElementById('container');\nconst renderBefore = container.querySelector('footer');\nrender(template(), container, {renderBefore});\n```\n\n----------------------------------------\n\nTITLE: Standard JavaScript Signals API Example\nDESCRIPTION: Demonstrates basic usage of the proposed standard JavaScript signals API, showing state signals, computed signals, and watchers.\nSOURCE: https://github.com/lit/lit.dev/blob/main/packages/lit-dev-content/site/docs/v3/data/signals.md#2025-04-09_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n//\n// Code developers might write to build their signals-based state...\n//\n\n// State signals hold values:\nconst count = new Signal.State(0);\n\n// Computed signals wrap computations that use other signals:\nconst doubleCount = new Signal.Computed(() => count.get() * 2);\n\n//\n// Lower-level code of the sort that will typically be inside frameworks and\n// signal-consuming libraries...\n//\n\n// Watchers are notified when signals that they watch change:\nconst watcher = new Signal.subtle.Watcher(async () => {\n  // Notify callbacks are not allowed to access signals synchronously\n  await 0;\n  console.log('doubleCount is', doubleCount);\n  // Watchers have to be re-enabled after they run:\n  watcher.watch();\n});\nwatcher.watch(doubleCount);\n\n// Computed signals are lazy, so we need to read it to run the computation and\n// potentially notify watchers:\ndoubleCount.get();\n```\n\n----------------------------------------\n\nTITLE: Styling Simple Tooltip Component with CSS Host Rules\nDESCRIPTION: CSS styles for the simple-tooltip component that configure its positioning, padding, borders, and visual appearance. The styles use the :host selector to target the component itself and set it as a fixed-position element with specific visual properties.\nSOURCE: https://github.com/lit/lit.dev/blob/main/packages/lit-dev-content/site/tutorials/content/tooltip/01.md#2025-04-09_snippet_0\n\nLANGUAGE: css\nCODE:\n```\n:host {\n  display: inline-block;\n  position: fixed;\n  padding: 4px;\n  border: 1px solid darkgray;\n  border-radius: 4px;\n  background: #ccc;\n  pointer-events: none;\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Localization in JavaScript\nDESCRIPTION: Example of configuring localization using the configureLocalization function from @lit/localize.\nSOURCE: https://github.com/lit/lit.dev/blob/main/packages/lit-dev-content/site/docs/v3/localization/runtime-mode.md#2025-04-09_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nimport {configureLocalization} from '@lit/localize';\n// Generated via output.localeCodesModule\nimport {sourceLocale, targetLocales} from './generated/locale-codes.js';\n\nexport const {getLocale, setLocale} = configureLocalization({\n  sourceLocale,\n  targetLocales,\n  loadLocale: (locale) => import(`/locales/${locale}.js`),\n});\n```\n\n----------------------------------------\n\nTITLE: Typing Event Handlers in TypeScript\nDESCRIPTION: Shows how to properly type event handlers when creating a React wrapper for a web component using TypeScript.\nSOURCE: https://github.com/lit/lit.dev/blob/main/packages/lit-dev-content/site/docs/v2/frameworks/react.md#2025-04-09_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nimport React from 'react';\nimport {createComponent} from '@lit-labs/react';\nimport {MyElement, type EventName} from './my-element.js';\n\nexport const MyElementComponent = createComponent({\n  tagName: 'my-element',\n  elementClass: MyElement,\n  react: React,\n  events: {\n    'onmy-event': 'my-event' as EventName<MyEvent>,\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Handling Locale Change Status Events\nDESCRIPTION: Demonstrates how to listen for the lit-localize-status event to track locale loading states and perform actions in response to locale changes.\nSOURCE: https://github.com/lit/lit.dev/blob/main/packages/lit-dev-content/site/docs/v2/localization/runtime-mode.md#2025-04-09_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\n// Show/hide a progress indicator whenever a new locale is loading,\n// and re-render the application every time a new locale successfully loads.\nwindow.addEventListener('lit-localize-status', (event) => {\n  const spinner = document.querySelector('#spinner');\n\n  if (event.detail.status === 'loading') {\n    console.log(`Loading new locale: ${event.detail.loadingLocale}`);\n    spinner.removeAttribute('hidden');\n  } else if (event.detail.status === 'ready') {\n    console.log(`Loaded new locale: ${event.detail.readyLocale}`);\n    spinner.setAttribute('hidden', '');\n    renderApplication();\n  } else if (event.detail.status === 'error') {\n    console.error(\n      `Error loading locale ${event.detail.errorLocale}: ` +\n        event.detail.errorMessage\n    );\n    spinner.setAttribute('hidden', '');\n  }\n});\n```\n\n----------------------------------------\n\nTITLE: Conditional Rendering with If Statements in Lit\nDESCRIPTION: Shows how to use if statements outside the template to compute values for rendering different messages based on the userName property.\nSOURCE: https://github.com/lit/lit.dev/blob/main/packages/lit-dev-content/site/docs/v3/templates/conditionals.md#2025-04-09_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nrender() {\n  let message;\n  if (this.userName) {\n    message = html`Welcome ${this.userName}`;\n  } else {\n    message = html`Please log in <button>Login</button>`;\n  }\n  return html`<p class=\"message\">${message}</p>`;\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Attribute Binding for Rating in Web Component (TypeScript)\nDESCRIPTION: This code snippet shows how to implement attribute binding for a 'rating' attribute in a web component using TypeScript. It demonstrates the use of observedAttributes and attributeChangedCallback to update the component when the rating attribute changes.\nSOURCE: https://github.com/lit/lit.dev/blob/main/packages/lit-dev-content/site/tutorials/content/wc-to-lit/06.md#2025-04-09_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nstatic get observedAttributes() {\n  return ['rating'];\n}\n\nattributeChangedCallback(attributeName: string, _oldValue: string, newValue: string) {\n  if (attributeName === 'rating') {\n    const newRating = Number(newValue);\n\n    this.rating = newRating;\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Context Provider with Public Property\nDESCRIPTION: Example showing how to create a provider element with a public property for context data. This allows the context value to be set from outside while also providing it to child components.\nSOURCE: https://github.com/lit/lit.dev/blob/main/packages/lit-dev-content/site/docs/v2/data/context.md#2025-04-09_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nimport {LitElement, html} from 'lit';\nimport {property} from 'lit/decorators.js';\nimport {provide} from '@lit-labs/context';\nimport {myContext, MyData} from './my-context.js';\n\nclass MyApp extends LitElement {\n  @provide({context: myContext})\n  myData: MyData;\n}\n```\n\n----------------------------------------\n\nTITLE: Conditional Rendering with If Statements in Lit\nDESCRIPTION: Shows how to use if statements outside the template to compute values for rendering different messages based on the userName property.\nSOURCE: https://github.com/lit/lit.dev/blob/main/packages/lit-dev-content/site/docs/v3/templates/conditionals.md#2025-04-09_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nrender() {\n  let message;\n  if (this.userName) {\n    message = html`Welcome ${this.userName}`;\n  } else {\n    message = html`Please log in <button>Login</button>`;\n  }\n  return html`<p class=\"message\">${message}</p>`;\n}\n```\n\n----------------------------------------\n\nTITLE: HTML Comment Explaining File Purpose\nDESCRIPTION: HTML comment that explains this file exists only to create a section heading in the navigation and its actual output content is deleted by the Eleventy build process.\nSOURCE: https://github.com/lit/lit.dev/blob/main/packages/lit-dev-content/site/docs/v2/resources/index.md#2025-04-09_snippet_1\n\nLANGUAGE: html\nCODE:\n```\n<!-- This file exists only to create a section heading.\n     Its output is deleted by the Eleventy build process. -->\n```\n\n----------------------------------------\n\nTITLE: Using classMap and styleMap in LitElement\nDESCRIPTION: Demonstrates how to use classMap and styleMap directives from lit-html to apply dynamic classes and styles in LitElement templates.\nSOURCE: https://github.com/lit/lit.dev/blob/main/packages/lit-dev-content/site/docs/v1/components/styles.md#2025-04-09_snippet_11\n\nLANGUAGE: javascript\nCODE:\n```\nconstructor() {\n  super();\n  this.classes = { mydiv: true, someclass: true };\n  this.styles = { color: 'green', fontFamily: 'Roboto' };\n}\nrender() {\n  return html`\n    <div class=${classMap(this.classes)} style=${styleMap(this.styles)}>\n      Some content\n    </div>\n  `;\n}\n```\n\n----------------------------------------\n\nTITLE: Using Style Element in LitElement Render Method\nDESCRIPTION: Demonstrates how to include a style element in a LitElement's render method for per-instance style updates. This approach allows for dynamic styling but has performance implications.\nSOURCE: https://github.com/lit/lit.dev/blob/main/packages/lit-dev-content/site/docs/v1/components/styles.md#2025-04-09_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\nrender() {\n  return html`\n    <style>\n      /* updated per instance */\n    </style>\n    <div>template content</div>\n  `;\n}\n```\n\n----------------------------------------\n\nTITLE: Child Node Expression in Lit Templates\nDESCRIPTION: Shows how to add dynamic child nodes to elements using expressions in Lit templates.\nSOURCE: https://github.com/lit/lit.dev/blob/main/packages/lit-dev-content/site/docs/v2/templates/expressions.md#2025-04-09_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nhtml`\n<h1>Hello ${name}</h1>\n<ul>\n  ${listItems}\n</ul>`\n```\n\n----------------------------------------\n\nTITLE: Nested Template Expression in Lit\nDESCRIPTION: Shows how to compose and nest templates using expressions.\nSOURCE: https://github.com/lit/lit.dev/blob/main/packages/lit-dev-content/site/docs/v2/templates/expressions.md#2025-04-09_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\nconst nav = html`<nav>...</nav>`;\nconst page = html`\n  ${nav}\n  <main>...</main>\n`;\n```\n\n----------------------------------------\n\nTITLE: Implementing Custom Attribute Converters in Lit\nDESCRIPTION: Shows how to implement a custom attribute converter that handles special conversion logic between attributes and properties. The example converts between a comma-separated string attribute and an array property.\nSOURCE: https://github.com/lit/lit.dev/blob/main/packages/lit-dev-content/site/articles/article/lit-cheat-sheet.md#2025-04-09_snippet_27\n\nLANGUAGE: typescript\nCODE:\n```\n@property({\n  converter: {\n    fromAttribute: (value) => {\n      return value?.split(',') ?? [];\n    },\n    toAttribute: (value) => {\n      return value.join(',');\n    },\n  },\n  reflect: true,\n})\nitems = [];\n```\n\nLANGUAGE: javascript\nCODE:\n```\nstatic properties = {\n  items: {\n    converter: {\n      fromAttribute: (value) => {\n        return value?.split(',') ?? [];\n      },\n      toAttribute: (value) => {\n        return value.join(',');\n      },\n    },\n    reflect: true,\n  },\n};\n\nconstructor() {\n  super();\n  this.items = [];\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Default Converter in LitElement Component\nDESCRIPTION: Example of using the default converter in a LitElement component, demonstrating property declarations and attribute-to-property conversion.\nSOURCE: https://github.com/lit/lit.dev/blob/main/packages/lit-dev-content/site/docs/v1/components/properties.md#2025-04-09_snippet_5\n\nLANGUAGE: JavaScript\nCODE:\n```\n{% include \"v1-projects/properties/defaultconverter/my-element.js\" %}\n```\n\n----------------------------------------\n\nTITLE: Implementing willUpdate Lifecycle Method in Lit Element (JavaScript)\nDESCRIPTION: This snippet demonstrates how to implement the willUpdate lifecycle method in a Lit Element using JavaScript. It handles changes to the 'vote' property and updates the 'rating' accordingly.\nSOURCE: https://github.com/lit/lit.dev/blob/main/packages/lit-dev-content/site/tutorials/content/wc-to-lit/12.md#2025-04-09_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nwillUpdate(changedProps) {\n  if (changedProps.has('vote')) {\n    const newValue = this.vote;\n    const oldValue = changedProps.get('vote');\n\n    if (newValue === 'up') {\n      if (oldValue === 'down') {\n        this.rating += 2;\n      } else {\n        this.rating += 1;\n      }\n    } else if (newValue === 'down') {\n      if (oldValue === 'up') {\n        this.rating -= 2;\n      } else {\n        this.rating -= 1;\n      }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Using styleMap Directive in Lit (JavaScript)\nDESCRIPTION: Demonstrates how to use the styleMap directive in a JavaScript Lit component to dynamically set inline styles.\nSOURCE: https://github.com/lit/lit.dev/blob/main/packages/lit-dev-content/site/docs/v3/templates/directives.md#2025-04-09_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nclass MyElement extends LitElement {\n  static properties = {\n    enabled: {type: Boolean},\n  };\n\n  constructor() {\n    super();\n    this.enabled = false;\n  }\n\n  render() {\n    const styles = { backgroundColor: this.enabled ? 'blue' : 'gray', color: 'white' };\n    return html`<p style=${styleMap(styles)}>Hello style!</p>`;\n  }\n}\ncustomElements.define('my-element', MyElement);\n```\n\n----------------------------------------\n\nTITLE: JavaScript Implementation of Rating Component\nDESCRIPTION: JavaScript implementation of the connectedCallback method that clones and initializes the template content in the shadow DOM.\nSOURCE: https://github.com/lit/lit.dev/blob/main/packages/lit-dev-content/site/tutorials/content/wc-to-lit/04.md#2025-04-09_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nconnectedCallback() {\n  const shadowRoot = this.attachShadow({mode: 'open'});\n  const templateContent = document.querySelector('#rating-element-template').content;\n  const clonedContent = templateContent.cloneNode(true);\n  shadowRoot.appendChild(clonedContent);\n\n  this.shadowRoot.querySelector('.rating').innerText = `${this.rating}`;\n}\n```\n\n----------------------------------------\n\nTITLE: Accessing Slotted Children in Lit Components\nDESCRIPTION: A method to access elements assigned to slots in a Lit component's shadow DOM using the slot.assignedElements method to retrieve the slotted elements.\nSOURCE: https://github.com/lit/lit.dev/blob/main/packages/lit-dev-content/site/docs/v2/components/shadow-dom.md#2025-04-09_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nget _slottedChildren() {\n  const slot = this.shadowRoot.querySelector('slot');\n  return slot.assignedElements({flatten: true});\n}\n```\n\n----------------------------------------\n\nTITLE: Styling Vote Buttons with CSS Host Selectors\nDESCRIPTION: CSS styles that apply colors to thumb up/down buttons based on the vote attribute value using shadow DOM host selectors.\nSOURCE: https://github.com/lit/lit.dev/blob/main/packages/lit-dev-content/site/tutorials/content/wc-to-lit/07.md#2025-04-09_snippet_0\n\nLANGUAGE: css\nCODE:\n```\n<template>\n  <style>\n    ...\n\n    :host([vote=up]) .thumb_up {\n      fill: green;\n    }\n    :host([vote=down]) .thumb_down {\n      fill: red;\n    }\n  </style>\n</template>\n```\n\n----------------------------------------\n\nTITLE: Context Provider with Private Reactive Property\nDESCRIPTION: Example showing how to make a private context property reactive using @state() decorator, allowing internal changes to the property to update context consumers.\nSOURCE: https://github.com/lit/lit.dev/blob/main/packages/lit-dev-content/site/docs/v2/data/context.md#2025-04-09_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\n  @provide({context: myContext})\n  @state()\n  private _myData: MyData;\n```\n\n----------------------------------------\n\nTITLE: Map Directive Usage Example\nDESCRIPTION: Demonstrates using the map directive to render a list of items in a Lit component.\nSOURCE: https://github.com/lit/lit.dev/blob/main/packages/lit-dev-content/site/docs/v2/templates/directives.md#2025-04-09_snippet_12\n\nLANGUAGE: typescript\nCODE:\n```\nclass MyElement extends LitElement {\n  render() {\n    return html`\n      <ul>\n        ${map(items, (i) => html`<li>${i}</li>`)}\n      </ul>\n    `;\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Components in Polymer vs Lit\nDESCRIPTION: Comparison of the basic component definition pattern between Polymer and Lit. Shows how to create and register a custom element with both libraries.\nSOURCE: https://github.com/lit/lit.dev/blob/main/packages/lit-dev-content/site/articles/article/lit-for-polymer-users.md#2025-04-09_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nimport {PolymerElement} from '@polymer/polymer/polymer-element.js';\n\nexport class MyElement extends PolymerElement { /* ... */ }\ncustomElements.define('my-element', MyElement);\n```\n\nLANGUAGE: typescript\nCODE:\n```\nimport {LitElement} from 'lit';\nimport {customElement} from 'lit/decorators.js';\n\n@customElement('my-element')\nexport class MyElement extends LitElement { /* ... */  }\n```\n\nLANGUAGE: javascript\nCODE:\n```\nimport {LitElement} from 'lit';\n\nexport class MyElement extends LitElement { /* ... */  }\ncustomElements.define('my-element', MyElement);\n```\n\n----------------------------------------\n\nTITLE: Setting Component Attributes in HTML\nDESCRIPTION: HTML example showing how to pass a date string via the date-str attribute to a date-display custom element, removing the need for JavaScript property setting.\nSOURCE: https://github.com/lit/lit.dev/blob/main/packages/lit-dev-content/site/tutorials/content/custom-attribute-converter/02.md#2025-04-09_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<body>\n  <date-display date-str=\"05/05/22\"></date-display>\n</body>\n```\n\n----------------------------------------\n\nTITLE: Reconciling Properties with DOM in Lit's updated() Lifecycle\nDESCRIPTION: Shows how to use the updated() lifecycle method to perform operations that depend on the rendered DOM and potentially update reactive properties, while noting performance considerations.\nSOURCE: https://github.com/lit/lit.dev/blob/main/packages/lit-dev-content/site/articles/article/lit-cheat-sheet.md#2025-04-09_snippet_31\n\nLANGUAGE: typescript\nCODE:\n```\nupdated(changedProperties) {\n  if (changedProperties.has('open') && this.open) {\n    // Focus first input element when dialog opens\n    const firstInput = this.renderRoot.querySelector('input');\n    firstInput?.focus();\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Adding Template Expression in Lit Component\nDESCRIPTION: Shows how to use a reactive property in a Lit template expression. The expression renders the value of the 'message' property dynamically in the template.\nSOURCE: https://github.com/lit/lit.dev/blob/main/packages/lit-dev-content/site/tutorials/content/intro-to-lit/02.md#2025-04-09_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\n${this.message}\n```\n\n----------------------------------------\n\nTITLE: Using render options with lit-html\nDESCRIPTION: Example showing how to use render options, specifically the renderBefore option to insert content at a specific position within a container.\nSOURCE: https://github.com/lit/lit.dev/blob/main/packages/lit-dev-content/site/docs/v2/libraries/standalone-templates.md#2025-04-09_snippet_5\n\nLANGUAGE: html\nCODE:\n```\n<div id=\"container\">\n  <header>My Site</header>\n  <footer>Copyright 2021</footer>\n</div>\n```\n\nLANGUAGE: ts\nCODE:\n```\nconst template = () => html`...`;\nconst container = document.getElementById('container');\nconst renderBefore = container.querySelector('footer');\nrender(template(), container, {renderBefore});\n```\n\n----------------------------------------\n\nTITLE: Using unsafeCSS for Trusted Input in LitElement Styles\nDESCRIPTION: Demonstrates the use of unsafeCSS function to wrap trusted CSS expressions that are not css tagged strings in LitElement static styles.\nSOURCE: https://github.com/lit/lit.dev/blob/main/packages/lit-dev-content/site/docs/v1/components/styles.md#2025-04-09_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\n{% include \"v1-projects/style/unsafecss/my-element.js\" %}\n```\n\n----------------------------------------\n\nTITLE: Attribute Expression in Lit Templates\nDESCRIPTION: Demonstrates setting element attributes dynamically using expressions.\nSOURCE: https://github.com/lit/lit.dev/blob/main/packages/lit-dev-content/site/docs/v2/templates/expressions.md#2025-04-09_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nhtml`<div class=${highlightClass}></div>`\n```\n\n----------------------------------------\n\nTITLE: Implementing Animation in updated() Method for Lit Component\nDESCRIPTION: This code snippet shows how to implement an animation in the updated() method of a Lit component. It checks if the '_showMessage' property has changed, then calculates the animation's starting position based on the message element's width, and applies a sliding animation using the Web Animations API.\nSOURCE: https://github.com/lit/lit.dev/blob/main/packages/lit-dev-content/site/tutorials/content/reactivity/05.md#2025-04-09_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nprotected updated(changedProperties: PropertyValues<this>): void {\n  if (changedProperties.has('_showMessage')) {\n    const final = this._message.getBoundingClientRect().width;\n    const starting = 0 - final;\n    var player = this._message.animate([\n      { transform: `translateX(${starting}px)` },\n      { transform: `translateX(0)` }\n    ], {\n      duration: 500,\n      easing: 'ease-out',\n    });\n  }\n}\n```\n\nLANGUAGE: javascript\nCODE:\n```\nupdated(changedProperties) {\n  if (changedProperties.has('_showMessage')) {\n    const final = this._message.getBoundingClientRect().width;\n    const starting = 0 - final;\n    this._message.animate([\n      { transform: `translateX(${starting}px)` },\n      { transform: `translateX(0)` }\n    ], {\n      duration: 500,\n      easing: 'ease-out',\n    });\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing willUpdate Lifecycle Method in Lit Element (TypeScript)\nDESCRIPTION: This snippet shows how to implement the willUpdate lifecycle method in a Lit Element using TypeScript. It handles changes to the 'vote' property and updates the 'rating' accordingly.\nSOURCE: https://github.com/lit/lit.dev/blob/main/packages/lit-dev-content/site/tutorials/content/wc-to-lit/12.md#2025-04-09_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\n// import PropertyValues\nimport {LitElement, html, css, PropertyValues} from 'lit';\n...\nwillUpdate(changedProps: PropertyValues<this>) {\n  if (changedProps.has('vote')) {\n    const newValue = this.vote;\n    const oldValue = changedProps.get('vote');\n\n    if (newValue === 'up') {\n      if (oldValue === 'down') {\n        this.rating += 2;\n      } else {\n        this.rating += 1;\n      }\n    } else if (newValue === 'down') {\n      if (oldValue === 'up') {\n        this.rating -= 2;\n      } else {\n        this.rating -= 1;\n      }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Custom Getter/Setter for Localized Property in TypeScript\nDESCRIPTION: This snippet demonstrates how to use a custom getter/setter to create a more natural interface for localized properties in TypeScript.\nSOURCE: https://github.com/lit/lit.dev/blob/main/packages/lit-dev-content/site/docs/v3/localization/best-practices.md#2025-04-09_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nprivate _label?: string;\n\n@property()\nget label() {\n  return this._label ?? msg('Default label');\n}\n\nset label(label: string) {\n  this._label = label;\n}\n\nrender() {\n  return html`<button>${this.label}</button>`;\n}\n```\n\n----------------------------------------\n\nTITLE: Theme Implementation with CSS Custom Properties\nDESCRIPTION: Implements a comprehensive theme using CSS custom properties for background, font, and stroke styling.\nSOURCE: https://github.com/lit/lit.dev/blob/main/packages/lit-dev-content/site/tutorials/content/svg-templates/05.md#2025-04-09_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nconst themeCSS = css`\n  .background {\n    fill: var(--background-color, #000000);\n  }\n\n  text {\n    fill: var(--font-color, #ffffff);\n    font-size: var(--font-size, 26px);\n    stroke-width: var(--stroke-width, 1.2px);\n    stroke: var(--stroke-color, #eeeeee);\n  }\n`;\n```\n\n----------------------------------------\n\nTITLE: Composing Controllers from Other Controllers in JavaScript\nDESCRIPTION: JavaScript implementation of DualClockController that composes two ClockController instances and exposes their values through getter methods.\nSOURCE: https://github.com/lit/lit.dev/blob/main/packages/lit-dev-content/site/docs/v2/composition/controllers.md#2025-04-09_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\nclass DualClockController {\n  constructor(host, delay1, delay2) {\n    this.clock1 = new ClockController(host, delay1);\n    this.clock2 = new ClockController(host, delay2);\n  }\n\n  get time1() { return this.clock1.value; }\n  get time2() { return this.clock2.value; }\n}\n```\n\n----------------------------------------\n\nTITLE: Loading Polyfills for Legacy Browser Support\nDESCRIPTION: HTML snippet showing the recommended order for loading JavaScript polyfills, Lit polyfill support, and web components polyfills before loading application code for legacy browser compatibility.\nSOURCE: https://github.com/lit/lit.dev/blob/main/packages/lit-dev-content/site/docs/v2/tools/requirements.md#2025-04-09_snippet_3\n\nLANGUAGE: html\nCODE:\n```\n<script src=\"path/to/js/polyfills/you/need.js\"></script>\n<script src=\"node_modules/lit/polyfill-support.js\"></script>\n<script src=\"node_modules/@webcomponents/webcomponentsjs/webcomponents-loader.js\"></script>\n<!-- Load application code here -->\n```\n\n----------------------------------------\n\nTITLE: Using ifDefined Directive for Conditional Attribute Rendering in Lit\nDESCRIPTION: Shows how to use Lit's ifDefined directive as a more concise way to conditionally render attributes. This is equivalent to using the nothing sentinel value with the nullish coalescing operator.\nSOURCE: https://github.com/lit/lit.dev/blob/main/packages/lit-dev-content/site/docs/v3/templates/expressions.md#2025-04-09_snippet_13\n\nLANGUAGE: js\nCODE:\n```\nhtml`<img src=\"/images/${ifDefined(this.imagePath)}/${ifDefined(this.imageFile)}\">`;\n```\n\n----------------------------------------\n\nTITLE: Importing styleMap Directive\nDESCRIPTION: Import statement for the styleMap directive, which sets style properties based on an object.\nSOURCE: https://github.com/lit/lit.dev/blob/main/packages/lit-dev-content/site/docs/v2/templates/directives.md#2025-04-09_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nimport {styleMap} from 'lit/directives/style-map.js';\n```\n\n----------------------------------------\n\nTITLE: Implementing the LitElement Render Method\nDESCRIPTION: Shows how to implement the render() lifecycle method in LitElement which returns a template using the html tag function. This method defines the component's DOM structure and handles user interactions through event binding.\nSOURCE: https://github.com/lit/lit.dev/blob/main/packages/lit-dev-content/site/tutorials/content/wc-to-lit/11.md#2025-04-09_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nrender() {\n  return html`\n    <button\n        class=\"thumb_down\"\n        @click=${() => {this.vote = 'down'}}>\n      <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24\" viewbox=\"0 0 24 24\" width=\"24\"><path d=\"M15 3H6c-.83 0-1.54.5-1.84 1.22l-3.02 7.05c-.09.23-.14.47-.14.73v2c0 1.1.9 2 2 2h6.31l-.95 4.57-.03.32c0 .41.17.79.44 1.06L9.83 23l6.59-6.59c.36-.36.58-.86.58-1.41V5c0-1.1-.9-2-2-2zm4 0v12h4V3h-4z\"/></svg>\n    </button>\n    <span class=\"rating\">${this.rating}</span>\n    <button\n        class=\"thumb_up\"\n        @click=${() => {this.vote = 'up'}}>\n      <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24\" viewbox=\"0 0 24 24\" width=\"24\"><path d=\"M1 21h4V9H1v12zm22-11c0-1.1-.9-2-2-2h-6.31l.95-4.57.03-.32c0-.41-.17-.79-.44-1.06L14.17 1 7.59 7.59C7.22 7.95 7 8.45 7 9v10c0 1.1.9 2 2 2h9c.83 0 1.54-.5 1.84-1.22l3.02-7.05c.09-.23.14-.47.14-.73v-2z\"/></svg>\n    </button>`;\n}\n```\n\nLANGUAGE: javascript\nCODE:\n```\nrender() {\n  return html`\n    <button\n        class=\"thumb_down\"\n        @click=${() => {\n          this.vote = 'down';\n        }}>\n      <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24\" viewbox=\"0 0 24 24\" width=\"24\"><path d=\"M15 3H6c-.83 0-1.54.5-1.84 1.22l-3.02 7.05c-.09.23-.14.47-.14.73v2c0 1.1.9 2 2 2h6.31l-.95 4.57-.03.32c0 .41.17.79.44 1.06L9.83 23l6.59-6.59c.36-.36.58-.86.58-1.41V5c0-1.1-.9-2-2-2zm4 0v12h4V3h-4z\"/></svg>\n    </button>\n    <span class=\"rating\">${this.rating}</span>\n    <button\n        class=\"thumb_up\"\n        @click=${() => {\n          this.vote = 'up';\n        }}>\n      <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24\" viewbox=\"0 0 24 24\" width=\"24\"><path d=\"M1 21h4V9H1v12zm22-11c0-1.1-.9-2-2-2h-6.31l.95-4.57.03-.32c0-.41-.17-.79-.44-1.06L14.17 1 7.59 7.59C7.22 7.95 7 8.45 7 9v10c0 1.1.9 2 2 2h9c.83 0 1.54-.5 1.84-1.22l3.02-7.05c.09-.23.14-.47.14-.73v-2z\"/></svg>\n    </button>`;\n}\n```\n\n----------------------------------------\n\nTITLE: Initializing Date Object in TypeScript/JavaScript\nDESCRIPTION: Creates a module-level Date object to be used with the timeAgo directive. The sample shows both TypeScript and JavaScript variants.\nSOURCE: https://github.com/lit/lit.dev/blob/main/packages/lit-dev-content/site/tutorials/content/async-directive/02.md#2025-04-09_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nconst timeCreated = new Date();\n\n@customElement('time-ago-example')\nexport class TimeAgoExample extends LitElement {\n  ...\n```\n\nLANGUAGE: javascript\nCODE:\n```\nconst timeCreated = new Date();\n\nexport class TimeAgoExample extends LitElement {\n  ...\n```\n\n----------------------------------------\n\nTITLE: Installing Babel Dependencies for LitElement\nDESCRIPTION: npm commands to install Babel and necessary plugins for transpiling LitElement components that use proposed JavaScript features like class properties and decorators.\nSOURCE: https://github.com/lit/lit.dev/blob/main/packages/lit-dev-content/site/docs/v1/tools/publish.md#2025-04-09_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nnpm install --save-dev @babel/core\nnpm install --save-dev @babel/plugin-proposal-class-properties\nnpm install --save-dev @babel/plugin-proposal-decorators\n```\n\n----------------------------------------\n\nTITLE: Adding Message Descriptions in JavaScript\nDESCRIPTION: Example of adding a description to a message using the desc option in the msg function, which helps translators understand the context of the message.\nSOURCE: https://github.com/lit/lit.dev/blob/main/packages/lit-dev-content/site/docs/v3/localization/overview.md#2025-04-09_snippet_9\n\nLANGUAGE: js\nCODE:\n```\nrender() {\n  return html`<button>\n    ${msg(\"Launch\", {\n      desc: \"Button that begins rocket launch sequence.\",\n    })}\n  </button>`;\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing tickToNextWord Method in Lit Component (JavaScript)\nDESCRIPTION: This snippet defines a tickToNextWord method in a Lit component using JavaScript. The method increments the idx property, which is used to cycle through words.\nSOURCE: https://github.com/lit/lit.dev/blob/main/packages/lit-dev-content/site/tutorials/content/word-viewer/04.md#2025-04-09_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\n// word-viewer.js\n\n  render() {\n    ...\n  }\n\n  tickToNextWord = () => { this.idx += 1; };\n```\n\n----------------------------------------\n\nTITLE: Custom Properties in Lit Components\nDESCRIPTION: Demonstrates using CSS custom properties for configurable component styling with default values.\nSOURCE: https://github.com/lit/lit.dev/blob/main/packages/lit-dev-content/site/docs/v2/components/styles.md#2025-04-09_snippet_10\n\nLANGUAGE: javascript\nCODE:\n```\nclass MyElement extends LitElement {\n  static styles = css`\n    :host {\n      background-color: var(--my-background, yellow);\n    }\n  `;\n  render() {\n    return html`<p>Hello world</p>`;\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Event Listener Expression in Lit Templates\nDESCRIPTION: Shows how to add event listeners using the @ prefix with expressions.\nSOURCE: https://github.com/lit/lit.dev/blob/main/packages/lit-dev-content/site/docs/v2/templates/expressions.md#2025-04-09_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nhtml`<button @click=${this._clickHandler}>Go</button>`\n```\n\n----------------------------------------\n\nTITLE: Syncing Reactive Properties with Browser Features in Lit\nDESCRIPTION: Demonstrates using the update() lifecycle method to synchronize reactive properties with browser APIs before rendering occurs, but after property changes have been detected.\nSOURCE: https://github.com/lit/lit.dev/blob/main/packages/lit-dev-content/site/articles/article/lit-cheat-sheet.md#2025-04-09_snippet_30\n\nLANGUAGE: typescript\nCODE:\n```\nupdate(changedProperties) {\n  if (changedProperties.has('theme')) {\n    // Save theme preference to localStorage\n    localStorage.setItem('theme', this.theme);\n  }\n  super.update(changedProperties);\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing willUpdate() Callback in Lit Component\nDESCRIPTION: This snippet shows how to implement the willUpdate() lifecycle callback to compute values based on property changes. The example maintains two synchronized string properties (forward and backward), where one is the reversed version of the other. When either property changes, the callback updates the other property accordingly.\nSOURCE: https://github.com/lit/lit.dev/blob/main/packages/lit-dev-content/site/tutorials/content/reactivity/04.md#2025-04-09_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n  willUpdate(changedProperties: PropertyValues<this>) {\n    if (changedProperties.has('forward')) {\n      this.backward = this.forward.split('').reverse().join('');\n    }\n\n    if (changedProperties.has('backward')) {\n      this.forward = this.backward.split('').reverse().join('');\n    }\n  }\n```\n\nLANGUAGE: javascript\nCODE:\n```\n  willUpdate(changedProperties) {\n    if (changedProperties.has('forward')) {\n      this.backward = this.forward.split('').reverse().join('');\n    }\n\n    if (changedProperties.has('backward')) {\n      this.forward = this.backward.split('').reverse().join('');\n    }\n  }\n```\n\n----------------------------------------\n\nTITLE: Using @queryAssignedNodes Decorator\nDESCRIPTION: Examples of using the @queryAssignedNodes decorator to create properties that access slotted nodes. Shows usage for both named and default slots with flattening option.\nSOURCE: https://github.com/lit/lit.dev/blob/main/packages/lit-dev-content/site/docs/v1/components/templates.md#2025-04-09_snippet_17\n\nLANGUAGE: javascript\nCODE:\n```\n// First argument is the slot name\n// Second argument is `true` to flatten the assigned nodes.\n@queryAssignedNodes('header', true)\n_headerNodes;\n\n// If the first argument is absent or an empty string, list nodes for the default slot.\n@queryAssignedNodes()\n_defaultSlotNodes;\n```\n\n----------------------------------------\n\nTITLE: Implementing a Lit Component with Preact Signals Integration\nDESCRIPTION: This snippet demonstrates how to use the SignalWatcher mixin from @lit-labs/preact-signals to create a Lit component that automatically watches and responds to changes in Preact signals. It includes a counter implemented using a signal and a button to increment it.\nSOURCE: https://github.com/lit/lit.dev/blob/main/packages/lit-dev-content/site/blog/2023-10-10-lit-3.0.md#2025-04-09_snippet_4\n\nLANGUAGE: TypeScript\nCODE:\n```\nimport {LitElement, html} from 'lit';\nimport {customElement, property} from 'lit';\nimport {SignalWatcher, signal} from '@lit-labs/preact-signals';\n\nconst count = signal(0);\n\n@customElement('signal-example')\nexport class SignalExample extends SignalWatcher(LitElement) {\n\n  render() {\n    return html`\n      <p>The count is ${count.value}</p>\n      <button @click=${this._onClick}>Increment</button>\n    `;\n  }\n\n  private _onClick() {\n    // A change to the signal value causes the element to re-render!\n    count.value = count.value + 1;\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Updating decorator imports in TypeScript\nDESCRIPTION: Code snippet demonstrating how to update imports for Lit decorators, which are no longer exported from 'lit-element'.\nSOURCE: https://github.com/lit/lit.dev/blob/main/packages/lit-dev-content/site/docs/v3/releases/upgrade.md#2025-04-09_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\n// Removed decorator exports from lit-element\nimport {customElement, property, state} from 'lit-element';\n\n// Updated\nimport {customElement, property, state} from 'lit/decorators.js';\n```\n\n----------------------------------------\n\nTITLE: Primitive Values in Child Expressions\nDESCRIPTION: Examples of rendering primitive values in child expressions in Lit templates. Shows how to conditionally render content based on user login status.\nSOURCE: https://github.com/lit/lit.dev/blob/main/packages/lit-dev-content/site/docs/v3/templates/expressions.md#2025-04-09_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\nhtml`\n  ${this.user.isloggedIn\n      ? html`Welcome ${this.user.name}`\n      : html`Please log in`\n  }\n`;\n```\n\n----------------------------------------\n\nTITLE: Using unsafeHTML Directive in Lit Element\nDESCRIPTION: Demonstrates how to use the unsafeHTML directive to render a string as HTML in a Lit component.\nSOURCE: https://github.com/lit/lit.dev/blob/main/packages/lit-dev-content/site/docs/v2/templates/directives.md#2025-04-09_snippet_36\n\nLANGUAGE: typescript\nCODE:\n```\nconst markup = '<h3>Some HTML to render.</h3>';\n\n@customElement('my-element')\nclass MyElement extends LitElement {\n\n  render() {\n    return html`\n      Look out, potentially unsafe HTML ahead:\n      ${unsafeHTML(markup)}\n    `;\n  }\n}\n```\n\nLANGUAGE: javascript\nCODE:\n```\nconst markup = '<h3>Some HTML to render.</h3>';\n\nclass MyElement extends LitElement {\n\n  render() {\n    return html`\n      Look out, potentially unsafe HTML ahead:\n      ${unsafeHTML(markup)}\n    `;\n  }\n}\ncustomElements.define('my-element', MyElement);\n```\n\n----------------------------------------\n\nTITLE: Defining a Custom Element without Decorators in JavaScript\nDESCRIPTION: Equivalent code for defining a custom element without using the @customElement decorator.\nSOURCE: https://github.com/lit/lit.dev/blob/main/packages/lit-dev-content/site/docs/v2/components/decorators.md#2025-04-09_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\ncustomElements.define('my-element', MyElement);\n```\n\n----------------------------------------\n\nTITLE: Implementing firstUpdated Method in LitElement (JavaScript)\nDESCRIPTION: The firstUpdated method is called after the element's DOM has been updated the first time, immediately before updated is called. It can be used to perform one-time work after the element's template has been created.\nSOURCE: https://github.com/lit/lit.dev/blob/main/packages/lit-dev-content/site/docs/v1/components/lifecycle.md#2025-04-09_snippet_9\n\nLANGUAGE: javascript\nCODE:\n```\n/**\n * Implement to override default behavior.\n */\nfirstUpdated(changedProperties) { ... }\n```\n\n----------------------------------------\n\nTITLE: Installing Lit via npm\nDESCRIPTION: Command to install the Lit package from npm using the command line.\nSOURCE: https://github.com/lit/lit.dev/blob/main/packages/lit-dev-content/site/docs/v3/tools/adding-lit.md#2025-04-09_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\nnpm i lit\n```\n\n----------------------------------------\n\nTITLE: Styling Conditional Classes in Lit Components\nDESCRIPTION: This code demonstrates how to define CSS styles for the 'backwards' class within a Lit component. The styles apply a white text color and violet background when the component is playing in reverse direction.\nSOURCE: https://github.com/lit/lit.dev/blob/main/packages/lit-dev-content/site/tutorials/content/word-viewer/07.md#2025-04-09_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\n// word-viewer.ts\n\n  static styles = css`\n    ...\n    .backwards {\n      color: white;\n      background-color: violet;\n    }\n  `;\n```\n\nLANGUAGE: javascript\nCODE:\n```\n// word-viewer.js\n\n  static styles = css`\n    ...\n    .backwards {\n      color: white;\n      background-color: violet;\n    }\n  `;\n\n```\n\n----------------------------------------\n\nTITLE: Using watch() Directive for Targeted Signal Updates\nDESCRIPTION: Shows how to use the watch() directive to update specific parts of the DOM when signals change without triggering a complete re-render. This can be used to optimize performance by limiting the scope of updates.\nSOURCE: https://github.com/lit/lit.dev/blob/main/packages/lit-dev-content/site/articles/article/lit-cheat-sheet.md#2025-04-09_snippet_44\n\nLANGUAGE: typescript\nCODE:\n```\n// See playground: articles/lit-cheat-sheet/signals-watch-directive\n```\n\n----------------------------------------\n\nTITLE: Sharing Lit Styles with Imports\nDESCRIPTION: Demonstrates how to share Lit stylesheets between components by exporting them from a module and importing them into another component.\nSOURCE: https://github.com/lit/lit.dev/blob/main/packages/lit-dev-content/site/articles/article/lit-cheat-sheet.md#2025-04-09_snippet_14\n\nLANGUAGE: javascript\nCODE:\n```\n// shared-styles.js\nimport {css} from 'lit';\n\nexport const sharedStyles = css`\n  .blue {\n    color: blue;\n  }\n`;\n\n// my-element.js\nimport {LitElement, html, css} from 'lit';\nimport {sharedStyles} from './shared-styles.js';\n\nclass MyElement extends LitElement {\n  static styles = [\n    sharedStyles,\n    css`\n      :host {\n        display: block;\n        border: 1px solid black;\n      }\n    `\n  ];\n\n  render() {\n    return html`\n      <p class=\"blue\">I'm blue!</p>\n    `;\n  }\n}\ncustomElements.define('my-element', MyElement);\n```\n\n----------------------------------------\n\nTITLE: Implementing updated Method in LitElement (JavaScript)\nDESCRIPTION: The updated method is called when the element's DOM has been updated and rendered. It can be implemented to perform tasks after an update.\nSOURCE: https://github.com/lit/lit.dev/blob/main/packages/lit-dev-content/site/docs/v1/components/lifecycle.md#2025-04-09_snippet_11\n\nLANGUAGE: javascript\nCODE:\n```\n/**\n * Implement to override default behavior.\n */\nupdated(changedProperties) { ... }\n```\n\n----------------------------------------\n\nTITLE: Correct Render-time Localization in Lit\nDESCRIPTION: Shows the proper way to implement localization that updates when locale changes by moving the msg call into the render method.\nSOURCE: https://github.com/lit/lit.dev/blob/main/packages/lit-dev-content/site/docs/v2/localization/best-practices.md#2025-04-09_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nrender() {\n  return html`<button>${this.label ?? msg('Default label')}</button>`;\n}\n```\n\n----------------------------------------\n\nTITLE: Styling the Host Element in Lit Components\nDESCRIPTION: Demonstrates how to style the host element of a Lit component using :host and :host() selectors.\nSOURCE: https://github.com/lit/lit.dev/blob/main/packages/lit-dev-content/site/docs/v3/components/styles.md#2025-04-09_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\nstatic styles = css`\n  :host {\n    display: block;\n    background-color: azure;\n    padding: 0.5rem;\n  }\n  :host(.blue) {\n    background-color: aliceblue;\n  }\n`;\n```\n\n----------------------------------------\n\nTITLE: Array of Static Styles in Lit\nDESCRIPTION: Shows how to define multiple style blocks using an array of css tagged template literals.\nSOURCE: https://github.com/lit/lit.dev/blob/main/packages/lit-dev-content/site/docs/v2/components/styles.md#2025-04-09_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nstatic styles = [ css`...`, css`...`];\n```\n\n----------------------------------------\n\nTITLE: Element Directive Expression in Lit Templates\nDESCRIPTION: Demonstrates using element directives with expressions.\nSOURCE: https://github.com/lit/lit.dev/blob/main/packages/lit-dev-content/site/docs/v2/templates/expressions.md#2025-04-09_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nhtml`<input ${ref(inputRef)}>`\n```\n\n----------------------------------------\n\nTITLE: Complete Example of Using Decorators for Properties in LitElement\nDESCRIPTION: A complete TypeScript component example showing how to use decorators to declare and initialize properties in LitElement. The example shows property declaration with type annotations and initialization.\nSOURCE: https://github.com/lit/lit.dev/blob/main/packages/lit-dev-content/site/docs/v1/components/properties.md#2025-04-09_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nimport {LitElement, html, customElement, property} from 'lit-element';\n\n@customElement('my-element')\nclass MyElement extends LitElement {\n  @property({type: String})\n  greeting = 'Hello';\n\n  @property({attribute: false})\n  data = {name: 'Pizza', quantity: 1};\n\n  @property()\n  items = [1, 2, 3];\n\n  render() {\n    return html`\n      <p>${this.greeting} World</p>\n      <p>${this.data.name}: ${this.data.quantity}</p>\n      <p>Items: ${this.items.join(', ')}</p>\n    `;\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Declaring Properties with Decorators in LitElement\nDESCRIPTION: Examples of using @property decorator to declare properties with options in LitElement. Includes standard property declaration with type and an internal property with the @internalProperty decorator.\nSOURCE: https://github.com/lit/lit.dev/blob/main/packages/lit-dev-content/site/docs/v1/components/properties.md#2025-04-09_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\n@property({type: String})\nmode = 'auto';\n\n@property()\ndata = {};\n```\n\nLANGUAGE: typescript\nCODE:\n```\n@internalProperty()\nprotected active = false;\n```\n\n----------------------------------------\n\nTITLE: Using @query Decorator in Lit Component\nDESCRIPTION: Demonstrates how to use the @query decorator to create a getter for accessing shadow DOM elements.\nSOURCE: https://github.com/lit/lit.dev/blob/main/packages/lit-dev-content/site/docs/v3/components/shadow-dom.md#2025-04-09_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport {LitElement, html} from 'lit';\nimport {query} from 'lit/decorators/query.js';\n\nclass MyElement extends LitElement {\n  @query('#first')\n  _first;\n\n  render() {\n    return html`\n      <div id=\"first\"></div>\n      <div id=\"second\"></div>\n    `;\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Virtualizing Long Lists with Lit Virtualizer\nDESCRIPTION: Demonstrates the use of Lit Virtualizer for rendering only the items that are currently in view in very long lists.\nSOURCE: https://github.com/lit/lit.dev/blob/main/packages/lit-dev-content/site/articles/article/lit-cheat-sheet.md#2025-04-09_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\nimport {LitElement, html} from 'lit';\nimport {customElement} from 'lit/decorators.js';\nimport {repeat} from 'lit/directives/repeat.js';\nimport {LitVirtualizer} from '@lit-labs/virtualizer';\n\n@customElement('my-element')\nexport class MyElement extends LitElement {\n  items = Array.from({length: 1000}, (_, i) => ({id: i, name: `Item ${i}`}));\n\n  render() {\n    return html`\n      <lit-virtualizer\n        .items=${this.items}\n        .renderItem=${(item) => html`<p>${item.name}</p>`}\n      ></lit-virtualizer>\n    `;\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Conditional Update Implementation\nDESCRIPTION: Implementation of shouldUpdate() to control when component updates occur based on specific property changes.\nSOURCE: https://github.com/lit/lit.dev/blob/main/packages/lit-dev-content/site/docs/v2/components/lifecycle.md#2025-04-09_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\nshouldUpdate(changedProperties: Map<string, any>) {\n  // Only update element if prop1 changed.\n  return changedProperties.has('prop1'); \n}\n```\n\nLANGUAGE: javascript\nCODE:\n```\nshouldUpdate(changedProperties) {\n  // Only update element if prop1 changed.\n  return changedProperties.has('prop1');\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Reusable Mixin Base Class\nDESCRIPTION: Shows how to create a reusable base class with mixin applied that other classes can extend.\nSOURCE: https://github.com/lit/lit.dev/blob/main/packages/lit-dev-content/site/docs/v3/composition/mixins.md#2025-04-09_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nexport const LitElementWithMixin = MyMixin(LitElement);\n```\n\nLANGUAGE: typescript\nCODE:\n```\nimport {LitElementWithMixin} from './lit-element-with-mixin.js';\n\nclass MyElement extends LitElementWithMixin {\n  /* user code */\n}\n```\n\n----------------------------------------\n\nTITLE: Composing Templates with Methods\nDESCRIPTION: Demonstrates how to compose a larger template from smaller template methods, allowing for template composition and potential subclass overrides.\nSOURCE: https://github.com/lit/lit.dev/blob/main/packages/lit-dev-content/site/docs/v2/components/rendering.md#2025-04-09_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport {LitElement, html} from 'lit';\nimport {customElement} from 'lit/decorators.js';\n\n@customElement('my-page')\nexport class MyPage extends LitElement {\n  headerTemplate() {\n    return html`<header>Header</header>`;\n  }\n\n  mainTemplate() {\n    return html`<main>Main content</main>`;\n  }\n\n  footerTemplate() {\n    return html`<footer>Footer</footer>`;\n  }\n\n  render() {\n    return html`\n      ${this.headerTemplate()}\n      ${this.mainTemplate()}\n      ${this.footerTemplate()}\n    `;\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Importing repeat Directive in JavaScript\nDESCRIPTION: Shows how to import the repeat directive from the Lit library.\nSOURCE: https://github.com/lit/lit.dev/blob/main/packages/lit-dev-content/site/docs/v3/templates/directives.md#2025-04-09_snippet_12\n\nLANGUAGE: javascript\nCODE:\n```\nimport {repeat} from 'lit/directives/repeat.js';\n```\n\n----------------------------------------\n\nTITLE: Creating Context Consumer Component\nDESCRIPTION: Implementation of a Lit component that consumes context using the @consume decorator\nSOURCE: https://github.com/lit/lit.dev/blob/main/packages/lit-dev-content/site/docs/v3/data/context.md#2025-04-09_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nimport {LitElement, property} from 'lit';\nimport {consume} from '@lit/context';\n\nimport {type Logger, loggerContext} from './logger-context.js';\n\nexport class MyElement extends LitElement {\n\n  @consume({context: loggerContext})\n  @property({attribute: false})\n  public logger?: Logger;\n\n  private doThing() {\n    this.logger?.log('A thing was done');\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Updating Animation Tick Function for Direction Control\nDESCRIPTION: Modifies the tickToNextWord method to increment or decrement the index based on the playDirection value. This allows the animation to step forward or backward through the word list.\nSOURCE: https://github.com/lit/lit.dev/blob/main/packages/lit-dev-content/site/tutorials/content/word-viewer/06.md#2025-04-09_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\n// word-viewer.ts\n\n  tickToNextWord = () => { this.idx += this.playDirection; };\n```\n\nLANGUAGE: javascript\nCODE:\n```\n// word-viewer.js\n\n  tickToNextWord = () => { this.idx += this.playDirection; };\n```\n\n----------------------------------------\n\nTITLE: Dispatching Custom Events in Lit Components\nDESCRIPTION: Shows how to send data up the component tree by dispatching custom events with the CustomEvent constructor. Demonstrates setting the detail property and bubbles/composed flags.\nSOURCE: https://github.com/lit/lit.dev/blob/main/packages/lit-dev-content/site/articles/article/lit-cheat-sheet.md#2025-04-09_snippet_37\n\nLANGUAGE: typescript\nCODE:\n```\n{% playground-ide \"articles/lit-cheat-sheet/data-up\", true %}\n```\n\n----------------------------------------\n\nTITLE: Using ifDefined Directive in Lit-html\nDESCRIPTION: Shows how to use ifDefined directive to conditionally set attributes based on whether a value is defined. The directive removes the attribute if the value is undefined.\nSOURCE: https://github.com/lit/lit.dev/blob/main/packages/lit-dev-content/site/docs/v1/lit-html/template-reference.md#2025-04-09_snippet_9\n\nLANGUAGE: javascript\nCODE:\n```\nimport {ifDefined} from 'lit-html/directives/if-defined';\n\nconst myTemplate = () => html`\n  <img src=\"/images/${ifDefined(image.filename)}\">\n`;\n```\n\n----------------------------------------\n\nTITLE: Installing lit-html package via npm\nDESCRIPTION: Command to install the standalone lit-html package using npm.\nSOURCE: https://github.com/lit/lit.dev/blob/main/packages/lit-dev-content/site/docs/v2/libraries/standalone-templates.md#2025-04-09_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\nnpm install lit-html\n```\n\n----------------------------------------\n\nTITLE: Implementing a Class-based Directive\nDESCRIPTION: Demonstrates how to create a class-based directive by extending the Directive class and using the directive factory function.\nSOURCE: https://github.com/lit/lit.dev/blob/main/packages/lit-dev-content/site/docs/v2/templates/custom-directives.md#2025-04-09_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nimport {Directive, directive} from 'lit/directive.js';\n\n// Define directive\nclass HelloDirective extends Directive {\n  render() {\n    return `Hello!`;\n  }\n}\n// Create the directive function\nconst hello = directive(HelloDirective);\n\n// Use directive\nconst template = html`<div>${hello()}</div>`;\n```\n\n----------------------------------------\n\nTITLE: Task with Basic TypeScript Arguments\nDESCRIPTION: Example of a task implementation with basic TypeScript argument types.\nSOURCE: https://github.com/lit/lit.dev/blob/main/packages/lit-dev-content/site/docs/v3/data/task.md#2025-04-09_snippet_9\n\nLANGUAGE: typescript\nCODE:\n```\nclass MyElement extends LitElement {\n  @property() myNumber = 10;\n  @property() myText = \"Hello world\";\n\n  _myTask = new Task(this, {\n    args: () => [this.myNumber, this.myText],\n    task: ([number, text]) => {\n      // implementation omitted\n    }\n  });\n}\n```\n\n----------------------------------------\n\nTITLE: Declaring Internal Reactive State in JavaScript\nDESCRIPTION: Shows how to declare internal reactive state using the static properties field with the state option in a Lit component.\nSOURCE: https://github.com/lit/lit.dev/blob/main/packages/lit-dev-content/site/docs/v2/components/properties.md#2025-04-09_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nstatic properties = {\n  _counter: {state: true}\n};\n\nconstructor() {\n  super();\n  this._counter = 0;\n}\n```\n\n----------------------------------------\n\nTITLE: Importing Static HTML Module in Lit\nDESCRIPTION: Shows how to import the html and literal tag functions from Lit's static-html module for using static expressions in templates.\nSOURCE: https://github.com/lit/lit.dev/blob/main/packages/lit-dev-content/site/docs/v2/templates/expressions.md#2025-04-09_snippet_8\n\nLANGUAGE: typescript\nCODE:\n```\nimport {html, literal} from 'lit/static-html.js';\n```\n\n----------------------------------------\n\nTITLE: Customizing Shadow Root Options\nDESCRIPTION: Example showing how to customize shadow root options by extending the default options with additional parameters.\nSOURCE: https://github.com/lit/lit.dev/blob/main/packages/lit-dev-content/site/docs/v2/components/shadow-dom.md#2025-04-09_snippet_10\n\nLANGUAGE: javascript\nCODE:\n```\nclass DelegatesFocus extends LitElement {\n  static shadowRootOptions = {...LitElement.shadowRootOptions, delegatesFocus: true};\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing shouldUpdate() for Optimized Rendering in Lit\nDESCRIPTION: This code snippet demonstrates how to override the shouldUpdate() method in a Lit component to prevent unnecessary updates when only the 'duration' property changes. It checks if the changed properties map contains only the 'duration' property and returns false in that case, otherwise returning true.\nSOURCE: https://github.com/lit/lit.dev/blob/main/packages/lit-dev-content/site/tutorials/content/reactivity/03.md#2025-04-09_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nshouldUpdate(changedProperties: PropertyValues<this>): boolean {\n  return !(changedProperties.size === 1 && changedProperties.has('duration'));\n}\n```\n\nLANGUAGE: javascript\nCODE:\n```\nshouldUpdate(changedProperties) {\n  return !(changedProperties.size === 1 && changedProperties.has('duration'));\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Basic Mixin Structure in TypeScript\nDESCRIPTION: Shows the basic structure for creating a mixin function that extends a superclass.\nSOURCE: https://github.com/lit/lit.dev/blob/main/packages/lit-dev-content/site/docs/v2/composition/mixins.md#2025-04-09_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nconst MyMixin = (superClass) => class extends superClass {\n  /* class fields & methods to extend superClass with */\n};\n```\n\n----------------------------------------\n\nTITLE: Conditional Rendering in Lit Templates\nDESCRIPTION: Illustrates how to use standard JavaScript conditional expressions in Lit templates for conditional rendering of content.\nSOURCE: https://github.com/lit/lit.dev/blob/main/packages/lit-dev-content/site/articles/article/lit-cheat-sheet.md#2025-04-09_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\n@customElement('my-element')\nexport class MyElement extends LitElement {\n  @property({type: Boolean})\n  myBool = true;\n\n  render() {\n    return html`\n      ${this.myBool\n        ? html`<p>Render me...</p>`\n        : html`<p>...or render me</p>`\n      }\n    `;\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Event Dispatch with UpdateComplete\nDESCRIPTION: Example showing how to properly dispatch events after rendering is complete using updateComplete.\nSOURCE: https://github.com/lit/lit.dev/blob/main/packages/lit-dev-content/site/docs/v2/components/lifecycle.md#2025-04-09_snippet_11\n\nLANGUAGE: javascript\nCODE:\n```\nasync _loginClickHandler() {\n  this.loggedIn = true;\n  // Wait for `loggedIn` state to be rendered to the DOM\n  await this.updateComplete;\n  this.dispatchEvent(new Event('login'));\n}\n```\n\n----------------------------------------\n\nTITLE: Root Theme CSS Custom Properties\nDESCRIPTION: Defines global CSS custom properties for theming the SVG component at the root level.\nSOURCE: https://github.com/lit/lit.dev/blob/main/packages/lit-dev-content/site/tutorials/content/svg-templates/05.md#2025-04-09_snippet_7\n\nLANGUAGE: css\nCODE:\n```\n:root {\n  --background-color: #000000;\n  --font-color: #ffffff;\n  --font-size: 26px;\n  --stroke-width: 1.2px;\n  --stroke-color: #eeeeee;\n\n  font-family: 'Open Sans', sans-serif;\n  font-size: 1.5em;\n}\n```\n\n----------------------------------------\n\nTITLE: Preventing Attribute Creation for a Property in TypeScript\nDESCRIPTION: This example shows how to prevent an observed attribute from being created for a property by setting attribute to false in TypeScript.\nSOURCE: https://github.com/lit/lit.dev/blob/main/packages/lit-dev-content/site/docs/v2/components/properties.md#2025-04-09_snippet_10\n\nLANGUAGE: typescript\nCODE:\n```\n// No observed attribute for this property\n@property({ attribute: false })\nmyData = {};\n```\n\n----------------------------------------\n\nTITLE: Configuring package.json for LitElement Component Publishing\nDESCRIPTION: Basic package.json configuration for publishing a LitElement component to npm. Sets both 'main' and 'module' fields to point to the component's JavaScript file.\nSOURCE: https://github.com/lit/lit.dev/blob/main/packages/lit-dev-content/site/docs/v1/tools/publish.md#2025-04-09_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"main\": \"my-element.js\",\n  \"module\": \"my-element.js\"\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Tooltip Properties in JavaScript\nDESCRIPTION: JavaScript implementation of tooltip properties including offset and showing state with reflection to attributes.\nSOURCE: https://github.com/lit/lit.dev/blob/main/packages/lit-dev-content/site/tutorials/content/tooltip/06.md#2025-04-09_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nstatic properties = {\n  offset: {type: Number},\n  showing: {reflect: true, type: Boolean},\n};\nconstructor() {\n  super();\n  this.offset = 4;\n  this.showing = false;\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Eleventy Navigation for Lit Releases Section\nDESCRIPTION: This YAML frontmatter configures the Eleventy static site generator for the Releases section of the Lit documentation. It sets the page title and defines navigation properties including the key and order.\nSOURCE: https://github.com/lit/lit.dev/blob/main/packages/lit-dev-content/site/docs/v2/releases/index.md#2025-04-09_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n---\ntitle: Releases\neleventyNavigation:\n  key: Releases\n  order: 11\n---\n```\n\n----------------------------------------\n\nTITLE: Implementing Lazy Setup for Tooltip Directive in JavaScript\nDESCRIPTION: This snippet shows the JavaScript implementation of the setupLazy method in the tooltip directive. It sets up lazy loading for the tooltip using SimpleTooltip.lazy.\nSOURCE: https://github.com/lit/lit.dev/blob/main/packages/lit-dev-content/site/tutorials/content/tooltip/08.md#2025-04-09_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nsetupLazy() {\n  this.didSetupLazy = true;\n  SimpleTooltip.lazy(this.part.element, (tooltip) => {\n    this.tooltip = tooltip;\n    this.renderTooltipContent();\n  });\n}\n```\n\n----------------------------------------\n\nTITLE: Declaring Reactive Properties in Lit Element (JavaScript)\nDESCRIPTION: This snippet demonstrates how to declare reactive properties in a Lit Element using JavaScript. It shows the static properties declaration and property initialization in the constructor.\nSOURCE: https://github.com/lit/lit.dev/blob/main/packages/lit-dev-content/site/tutorials/content/wc-to-lit/12.md#2025-04-09_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nexport class RatingElement extends LitElement {\n  ...\n  static properties = {\n    rating: {type: Number},\n    vote: {type: String, reflect: true},\n  };\n\n  constructor() {\n    super();\n    this.rating = 0;\n    this.vote = null;\n  }\n\n  // remove observedAttributes() and attributeChangedCallback()\n  // remove set rating() get rating()\n  // remove set vote() get vote()\n  // remove the _rating and _vote private class members\n  ...\n```\n\n----------------------------------------\n\nTITLE: Configuring LitElement API Navigation in Eleventy\nDESCRIPTION: YAML front matter configuration that sets up navigation metadata for the LitElement API documentation section. Defines the title, navigation key, and display order in the documentation hierarchy.\nSOURCE: https://github.com/lit/lit.dev/blob/main/packages/lit-dev-content/site/docs/v1/api/lit-element/index.md#2025-04-09_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n---\ntitle: lit-element API\neleventyNavigation:\n  title: lit-element API\n  key: lit-element API\n  order: 6\n---\n```\n\n----------------------------------------\n\nTITLE: Implementing Rating Property Binding in JavaScript for Custom Elements\nDESCRIPTION: This JavaScript version implements getter and setter methods for a 'rating' property in a custom element. The setter updates the DOM when the property changes by finding and updating the rating element's text in the shadow DOM.\nSOURCE: https://github.com/lit/lit.dev/blob/main/packages/lit-dev-content/site/tutorials/content/wc-to-lit/05.md#2025-04-09_snippet_1\n\nLANGUAGE: js\nCODE:\n```\n_rating = 0;\n\nset rating(value) {\n  this._rating = value;\n\n  if (!this.shadowRoot) {\n    return;\n  }\n\n  const ratingEl = this.shadowRoot.querySelector('.rating');\n\n  if (ratingEl) {\n    ratingEl.innerText = `${this._rating}`;\n  }\n}\n\nget rating() {\n  return this._rating;\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a Lit Component in TypeScript\nDESCRIPTION: Demonstrates how to create a basic Lit component using TypeScript with decorators. The component extends LitElement and defines a simple render method.\nSOURCE: https://github.com/lit/lit.dev/blob/main/packages/lit-dev-content/site/docs/v3/tools/adding-lit.md#2025-04-09_snippet_1\n\nLANGUAGE: ts\nCODE:\n```\nimport {LitElement, html} from 'lit';\nimport {customElement} from 'lit/decorators.js';\n\n@customElement('my-element')\nclass MyElement extends LitElement {\n  render() {\n    return html`\n      <div>Hello from MyElement!</div>\n    `;\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: HTML Comment Explaining Page Purpose\nDESCRIPTION: HTML comment that explains this file only exists to create a section heading in the documentation navigation, and its actual output content is deleted during the Eleventy build process.\nSOURCE: https://github.com/lit/lit.dev/blob/main/packages/lit-dev-content/site/docs/v2/components/index.md#2025-04-09_snippet_1\n\nLANGUAGE: html\nCODE:\n```\n<!-- This file exists only to create a section heading.\n     Its output is deleted by the Eleventy build process. -->\n```\n\n----------------------------------------\n\nTITLE: Creating Lit Component via JavaScript DOM API\nDESCRIPTION: Shows how to create a Lit component instance programmatically using document.createElement().\nSOURCE: https://github.com/lit/lit.dev/blob/main/packages/lit-dev-content/site/docs/v2/components/defining.md#2025-04-09_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nconst greeting = document.createElement('simple-greeting');\n```\n\n----------------------------------------\n\nTITLE: Using Helper Functions for Conditional Logic in Lit\nDESCRIPTION: Factoring conditional logic into a separate helper function to simplify the main render method. This pattern improves readability and allows reuse of the conditional template logic.\nSOURCE: https://github.com/lit/lit.dev/blob/main/packages/lit-dev-content/site/docs/v2/templates/conditionals.md#2025-04-09_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\ngetUserMessage() {\n  if (this.userName) {\n    return html`Welcome ${this.userName}`;\n  } else {\n    return html`Please log in <button>Login</button>`;\n  }\n}\nrender() {\n  return html`<p>${this.getUserMessage()}</p>`;\n}\n```\n\n----------------------------------------\n\nTITLE: Declaring a Property with Custom Attribute Name in JavaScript\nDESCRIPTION: This snippet shows how to create an observed attribute with a different name than the property using static properties in JavaScript.\nSOURCE: https://github.com/lit/lit.dev/blob/main/packages/lit-dev-content/site/docs/v2/components/properties.md#2025-04-09_snippet_9\n\nLANGUAGE: javascript\nCODE:\n```\n// Observed attribute will be called my-name\nstatic properties = {\n  myName: { attribute: 'my-name' },\n};\n\nconstructor() {\n  super();\n  this.myName = 'Ogden'\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Custom Date Converter for Lit Components\nDESCRIPTION: This code defines a custom attribute converter function 'dateConverter' that converts between Date objects and localized date strings. It returns an object with 'toAttribute' and 'fromAttribute' methods for bidirectional conversion.\nSOURCE: https://github.com/lit/lit.dev/blob/main/packages/lit-dev-content/site/tutorials/content/custom-attribute-converter/03.md#2025-04-09_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport type {ComplexAttributeConverter} from 'lit';\n\nexport const dateConverter = (locale: string): ComplexAttributeConverter<Date> => {\n  return {\n    toAttribute: (date: Date) => {\n      return date.toLocaleDateString(locale);\n    },\n    fromAttribute: (value: string) => {\n      return new Date(value);\n    }\n  }\n};\n```\n\nLANGUAGE: javascript\nCODE:\n```\nexport const dateConverter = (locale) => {\n  return {\n    toAttribute: (date) => {\n      return date.toLocaleDateString(locale);\n    },\n    fromAttribute: (value) => {\n      return new Date(value);\n    },\n  };\n};\n```\n\n----------------------------------------\n\nTITLE: Creating HTML Template with lit-html\nDESCRIPTION: Demonstrates basic lit-html template creation using template literal syntax with dynamic value interpolation.\nSOURCE: https://github.com/lit/lit.dev/blob/main/packages/lit-dev-content/site/blog/2019-02-05-lit-element-and-lit-html-release.md#2025-04-09_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconst myTemplate = (name) => html`\n  <div>\n    Hi, my name is ${name}.\n  </div>\n`;\n```\n\n----------------------------------------\n\nTITLE: Configuring Eleventy Navigation for Lit Components Documentation\nDESCRIPTION: This YAML snippet sets up the navigation metadata for the Lit Components section in an Eleventy-based documentation site. It defines the title, navigation key, and order of the Components section.\nSOURCE: https://github.com/lit/lit.dev/blob/main/packages/lit-dev-content/site/docs/v1/components/index.md#2025-04-09_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n---\ntitle: Components\neleventyNavigation:\n  key: Components\n  order: 2\n---\n```\n\n----------------------------------------\n\nTITLE: Using ref Directive with Ref Object in Lit\nDESCRIPTION: Demonstrates how to use the ref directive with a Ref object to get a reference to an input element and focus it.\nSOURCE: https://github.com/lit/lit.dev/blob/main/packages/lit-dev-content/site/docs/v3/templates/directives.md#2025-04-09_snippet_44\n\nLANGUAGE: typescript\nCODE:\n```\n@customElement('my-element')\nclass MyElement extends LitElement {\n\n  inputRef: Ref<HTMLInputElement> = createRef();\n\n  render() {\n    // Passing ref directive a Ref object that will hold the element in .value\n    return html`<input ${ref(this.inputRef)}>`;\n  }\n\n  firstUpdated() {\n    const input = this.inputRef.value!;\n    input.focus();\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Internal Reactive State in Lit Components\nDESCRIPTION: Demonstrates how to define internal reactive state properties that trigger re-renders but aren't exposed to external components. Shows both TypeScript and JavaScript implementations.\nSOURCE: https://github.com/lit/lit.dev/blob/main/packages/lit-dev-content/site/articles/article/lit-cheat-sheet.md#2025-04-09_snippet_25\n\nLANGUAGE: typescript\nCODE:\n```\n@state() private _counter = 0;\n```\n\nLANGUAGE: javascript\nCODE:\n```\nstatic properties = { _counter: {state: true} };\n\nconstructor() {\n  super();\n  this._counter = 0;\n}\n```\n\n----------------------------------------\n\nTITLE: Directive Class with Constructor and State\nDESCRIPTION: Example of a directive class with constructor initialization and state management using class fields.\nSOURCE: https://github.com/lit/lit.dev/blob/main/packages/lit-dev-content/site/docs/v3/templates/custom-directives.md#2025-04-09_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nclass MyDirective extends Directive {\n  // Class fields will be initialized once and can be used to persist\n  // state between renders\n  value = 0;\n  // Constructor is only run the first time a given directive is used\n  // in an expression\n  constructor(partInfo: PartInfo) {\n    super(partInfo);\n    console.log('MyDirective created');\n  }\n  ...\n}\n```\n\nLANGUAGE: javascript\nCODE:\n```\nclass MyDirective extends Directive {\n  // Class fields will be initialized once and can be used to persist\n  // state between renders\n  value = 0;\n  // Constructor is only run the first time a given directive is used\n  // in an expression\n  constructor(partInfo) {\n    super(partInfo);\n    console.log('MyDirective created');\n  }\n  ...\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Logging Mixin with Lifecycle Hooks\nDESCRIPTION: Example of a mixin that adds logging functionality to element lifecycle methods.\nSOURCE: https://github.com/lit/lit.dev/blob/main/packages/lit-dev-content/site/docs/v2/composition/mixins.md#2025-04-09_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nconst LoggingMixin = (superClass) => class extends superClass {\n  constructor() {\n    super();\n    console.log(`${this.localName} was created`);\n  }\n  connectedCallback() {\n    super.connectedCallback();\n    console.log(`${this.localName} was connected`);\n  }\n  updated(changedProperties) {\n    super.updated?.(changedProperties);\n    console.log(`${this.localName} was updated`);\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Babel for LitElement Components\nDESCRIPTION: Babel configuration file that sets up plugins for class properties and decorators, which are commonly used in LitElement components.\nSOURCE: https://github.com/lit/lit.dev/blob/main/packages/lit-dev-content/site/docs/v1/tools/publish.md#2025-04-09_snippet_3\n\nLANGUAGE: js\nCODE:\n```\nconst plugins = [\n  '@babel/plugin-proposal-class-properties',\n  ['@babel/plugin-proposal-decorators', { decoratorsBeforeExport: true } ],\n];\n\nmodule.exports = { plugins };\n```\n\n----------------------------------------\n\nTITLE: Implementing Render Method with Internal State in JavaScript\nDESCRIPTION: JavaScript implementation of the render method that displays a word from the 'words' property based on the current 'idx' state. Uses the modulo operator to cycle through words in the array.\nSOURCE: https://github.com/lit/lit.dev/blob/main/packages/lit-dev-content/site/tutorials/content/word-viewer/03.md#2025-04-09_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\n// word-viewer.js\n\n  render() {\n    const splitWords = this.words.split('.');\n    const word = splitWords[this.idx % splitWords.length];\n    return html`<pre>${word}</pre>`;\n  }\n\n```\n\n----------------------------------------\n\nTITLE: Markdown Community Resources Page Structure\nDESCRIPTION: Markdown structure defining the community resources page layout with eleventy navigation configuration and version links.\nSOURCE: https://github.com/lit/lit.dev/blob/main/packages/lit-dev-content/site/docs/v1/resources/community.md#2025-04-09_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n---\ntitle: Community\neleventyNavigation:\n  key: Community\n  parent: Resources\n  order: 1\nversionLinks:\n  v2: resources/community/\n  v3: resources/community/\n---\n```\n\n----------------------------------------\n\nTITLE: Implementing tickToNextWord Method in Lit Component (TypeScript)\nDESCRIPTION: This snippet defines a tickToNextWord method in a Lit component. The method increments the idx property, which is used to cycle through words.\nSOURCE: https://github.com/lit/lit.dev/blob/main/packages/lit-dev-content/site/tutorials/content/word-viewer/04.md#2025-04-09_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n// word-viewer.ts\n\n  render() {\n    ...\n  }\n\n  tickToNextWord = () => { this.idx += 1; };\n```\n\n----------------------------------------\n\nTITLE: Using Custom Element in HTML\nDESCRIPTION: This HTML snippet demonstrates how to use the custom 'rating-element' in the document body. Note that at this stage, the element won't render anything visible as its rendering behavior hasn't been defined yet.\nSOURCE: https://github.com/lit/lit.dev/blob/main/packages/lit-dev-content/site/tutorials/content/wc-to-lit/01.md#2025-04-09_snippet_1\n\nLANGUAGE: html\nCODE:\n```\n<body>\n <rating-element></rating-element>\n</body>\n```\n\n----------------------------------------\n\nTITLE: Conditional Hidden Attribute in Lit Templates\nDESCRIPTION: Demonstrates using the '?' prefix for boolean attributes to conditionally show or hide elements. The hidden attribute is added when the expression evaluates to true.\nSOURCE: https://github.com/lit/lit.dev/blob/main/packages/lit-dev-content/site/docs/v3/templates/expressions.md#2025-04-09_snippet_11\n\nLANGUAGE: javascript\nCODE:\n```\nhtml`<div ?hidden=${!this.showAdditional}>This text may be hidden.</div>`;\n```\n\n----------------------------------------\n\nTITLE: Composing Templates with Imports\nDESCRIPTION: Shows how to compose templates by importing and using other custom elements within a template.\nSOURCE: https://github.com/lit/lit.dev/blob/main/packages/lit-dev-content/site/docs/v2/components/rendering.md#2025-04-09_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport {LitElement, html} from 'lit';\nimport {customElement} from 'lit/decorators.js';\nimport './child-element.js';\n\n@customElement('my-page')\nexport class MyPage extends LitElement {\n  render() {\n    return html`\n      <child-element></child-element>\n    `;\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Styling Slotted Content in Lit Components\nDESCRIPTION: Demonstrates how to style directly-slotted elements using the ::slotted() pseudo-selector and how to use CSS Custom Properties for styling children of slotted content.\nSOURCE: https://github.com/lit/lit.dev/blob/main/packages/lit-dev-content/site/articles/article/lit-cheat-sheet.md#2025-04-09_snippet_22\n\nLANGUAGE: javascript\nCODE:\n```\nimport {LitElement, html, css} from 'lit';\n\nclass MyElement extends LitElement {\n  static styles = css`\n    ::slotted(*) { margin: 4px; }\n    ::slotted(p) { color: blue; }\n\n    /* Use CSS Custom Properties for nested elements */\n    :host {\n      --nested-color: green;\n    }\n  `;\n\n  render() {\n    return html`\n      <slot></slot>\n    `;\n  }\n}\ncustomElements.define('my-element', MyElement);\n\n// Usage\n<style>\n  .nested { color: var(--nested-color); }\n</style>\n\n<my-element>\n  <p>Blue text</p>\n  <div>\n    <p class=\"nested\">Green text</p>\n  </div>\n</my-element>\n```\n\n----------------------------------------\n\nTITLE: Using the Cache Directive for Efficient Conditional Rendering in Lit\nDESCRIPTION: Using Lit's cache directive to optimize performance when switching between complex templates. The cache directive preserves DOM for templates that aren't currently being rendered, reducing recreation costs.\nSOURCE: https://github.com/lit/lit.dev/blob/main/packages/lit-dev-content/site/docs/v2/templates/conditionals.md#2025-04-09_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nrender() {\n  return html`${cache(this.userName ?\n    html`Welcome ${this.userName}`:\n    html`Please log in <button>Login</button>`)\n  }`;\n}\n```\n\n----------------------------------------\n\nTITLE: Using Decorators for DOM Queries in LitElement (JavaScript)\nDESCRIPTION: Demonstrates the use of @query and @queryAll decorators to easily access elements in the component's shadow DOM. These decorators provide a convenient way to define getters for DOM elements.\nSOURCE: https://github.com/lit/lit.dev/blob/main/packages/lit-dev-content/site/docs/v1/components/templates.md#2025-04-09_snippet_14\n\nLANGUAGE: javascript\nCODE:\n```\nimport {LitElement, html} from 'lit-element';\nimport {query, queryAll} from 'lit-element/lib/decorators.js';\n\nclass MyElement extends LitElement {\n  @query('#first')\n  _first;\n\n  @queryAll('div')\n  _divs;\n\n  render() {\n    return html`\n      <div id=\"first\"></div>\n      <div id=\"second\"></div>\n    `;\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Applying Custom Styles to Lit Components\nDESCRIPTION: Shows how to apply custom styles to a Lit component from outside the component using CSS custom properties.\nSOURCE: https://github.com/lit/lit.dev/blob/main/packages/lit-dev-content/site/docs/v3/components/styles.md#2025-04-09_snippet_13\n\nLANGUAGE: html\nCODE:\n```\n<style>\n  my-element {\n    --my-background: rgb(67, 156, 144);\n  }\n  my-element.stuff {\n    --my-background: #111111;\n  }\n</style>\n<my-element></my-element>\n<my-element class=\"stuff\"></my-element>\n```\n\n----------------------------------------\n\nTITLE: Extending Custom Button to Create Anchor Component\nDESCRIPTION: Shows how to extend the MyButton component to create an anchor tag variation by changing the static tag expression.\nSOURCE: https://github.com/lit/lit.dev/blob/main/packages/lit-dev-content/site/docs/v2/templates/expressions.md#2025-04-09_snippet_10\n\nLANGUAGE: typescript\nCODE:\n```\n@customElement('my-anchor')\nclass MyAnchor extends MyButton {\n  tag = literal`a`;\n}\n```\n\nLANGUAGE: javascript\nCODE:\n```\nclass MyAnchor extends MyButton {\n  tag = literal`a`;\n}\ncustomElements.define('my-anchor', MyAnchor);\n```\n\n----------------------------------------\n\nTITLE: Defining Front Matter for Lit Components Documentation Page\nDESCRIPTION: YAML front matter that configures the page title 'Writing Components' and defines its navigation properties in the Eleventy static site generator. The configuration sets the navigation key to 'Components' and specifies an order value of 2.\nSOURCE: https://github.com/lit/lit.dev/blob/main/packages/lit-dev-content/site/docs/v2/components/index.md#2025-04-09_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n---\ntitle: Writing Components\neleventyNavigation:\n  key: Components\n  order: 2\n---\n```\n\n----------------------------------------\n\nTITLE: Using ref Directive with Callback in Lit\nDESCRIPTION: Shows how to use the ref directive with a callback function to handle element references.\nSOURCE: https://github.com/lit/lit.dev/blob/main/packages/lit-dev-content/site/docs/v3/templates/directives.md#2025-04-09_snippet_45\n\nLANGUAGE: typescript\nCODE:\n```\n@customElement('my-element')\nclass MyElement extends LitElement {\n\n  render() {\n    // Passing ref directive a change callback\n    return html`<input ${ref(this.inputChanged)}>`;\n  }\n\n  inputChanged(input?: HTMLInputElement) {\n    input?.focus();\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining a Signal-based Game State Class in TypeScript\nDESCRIPTION: This example shows how to use signal decorators from signal-utils to create a class with observable fields. It models a game state with player scores and rounds, which can be tracked by SignalWatcher classes.\nSOURCE: https://github.com/lit/lit.dev/blob/main/packages/lit-dev-content/site/docs/v3/data/signals.md#2025-04-09_snippet_9\n\nLANGUAGE: ts\nCODE:\n```\nimport {signal} from 'signal-utils';\n\nclass GameState {\n  @signal\n  accessor playerOneTotal = 0;\n\n  @signal\n  accessor playerTwoTotal = 0;\n\n  @signal\n  accessor over = false;\n\n  readonly rounds = new SignalArray();\n\n  recordRound(playerOneScore, playerTwoScore) {\n    this.playerOneTotal += playerOneScore;\n    this.playerTwoTotal += playerTwoScore;\n    this.rounds.push([playerOneScore, playerTwoScore]);\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Function-based Property Converter\nDESCRIPTION: Shows how to implement a simplified property converter using just a function for fromAttribute conversion.\nSOURCE: https://github.com/lit/lit.dev/blob/main/packages/lit-dev-content/site/docs/v2/components/properties.md#2025-04-09_snippet_17\n\nLANGUAGE: javascript\nCODE:\n```\nmyProp: {\n  converter: (value, type) => {\n    // `value` is a string\n    // Convert it to a value of type `type` and return it\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Babel with TypeScript for Decorator Support\nDESCRIPTION: Babel configuration for using decorators with TypeScript, ensuring correct transform order.\nSOURCE: https://github.com/lit/lit.dev/blob/main/packages/lit-dev-content/site/docs/v2/components/decorators.md#2025-04-09_snippet_6\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"assumptions\": {\n    \"setPublicClassFields\": true\n  },\n  \"plugins\": [\n    [\"@babel/plugin-transform-typescript\", {\n      \"allowDeclareFields\": true\n    }],\n    [\"@babel/plugin-proposal-decorators\", {\n      \"version\": \"2018-09\",\n      \"decoratorsBeforeExport\": true\n    }],\n    [\"@babel/plugin-proposal-class-properties\"]\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Filtering and Mapping Arrays in Lit TypeScript Component\nDESCRIPTION: A Lit component render method that filters an array of names containing the letter 'e' and maps them to HTML list items. Uses chained array methods filter() and map() within a template literal expression.\nSOURCE: https://github.com/lit/lit.dev/blob/main/packages/lit-dev-content/site/tutorials/content/working-with-lists/02.md#2025-04-09_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n  render() {\n    return html`\n      ⋮\n      <ul>\n      ${this.names\n        .filter((name) => name.match(/e/i))\n        .map((name) => html`<li>${name}</li>`)}\n      </ul>\n    `;\n  }\n```\n\n----------------------------------------\n\nTITLE: Rendering Tooltip Content in TypeScript\nDESCRIPTION: This snippet demonstrates how to render the tooltip content using Lit's render function in TypeScript. It uses the part's renderOptions to keep rendering in sync.\nSOURCE: https://github.com/lit/lit.dev/blob/main/packages/lit-dev-content/site/tutorials/content/tooltip/08.md#2025-04-09_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport {html, css, LitElement, render} from 'lit';\n//...\n\nrenderTooltipContent() {\n  render(this.tooltipContent, this.tooltip!, this.part!.options);\n}\n```\n\n----------------------------------------\n\nTITLE: Custom Getter/Setter for Localized Property in JavaScript\nDESCRIPTION: This snippet shows how to implement a custom getter/setter for localized properties in JavaScript, providing a natural interface while ensuring proper localization.\nSOURCE: https://github.com/lit/lit.dev/blob/main/packages/lit-dev-content/site/docs/v3/localization/best-practices.md#2025-04-09_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nstatic properties = {\n  label: {}\n};\n\nget label() {\n  return this._label ?? msg('Default label');\n}\n\nset label(label) {\n  this._label = label;\n}\n\nrender() {\n  return html`<button>${this.label}</button>`;\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Vote Attribute Change Handler in JavaScript\nDESCRIPTION: JavaScript implementation of attribute change handling for the vote attribute in the custom element.\nSOURCE: https://github.com/lit/lit.dev/blob/main/packages/lit-dev-content/site/tutorials/content/wc-to-lit/07.md#2025-04-09_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nstatic get observedAttributes() {\n  return ['rating', 'vote'];\n}\n\nattributeChangedCallback(attributeName, _oldValue, newValue) {\n  if (attributeName === 'rating') {\n    const newRating = Number(newValue);\n\n    this.rating = newRating;\n  } else if (attributeName === 'vote') {\n    this.vote = newValue;\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Embedding Single File Example with Playground\nDESCRIPTION: Markdown syntax for embedding a single editable file from a project with a preview displayed below. Takes two arguments: the project directory path and the specific filename to display.\nSOURCE: https://github.com/lit/lit.dev/blob/main/packages/lit-dev-content/site/docs/v3/internal/demos.md#2025-04-09_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n{% playground-example \"v3-docs/templates/define\" \"my-element.ts\" %}\n```\n\n----------------------------------------\n\nTITLE: ContextConsumer Import\nDESCRIPTION: Import statement for the ContextConsumer class from @lit/context package.\nSOURCE: https://github.com/lit/lit.dev/blob/main/packages/lit-dev-content/site/docs/v3/data/context.md#2025-04-09_snippet_15\n\nLANGUAGE: typescript\nCODE:\n```\nimport {ContextConsumer} from '@lit/context';\n```\n\n----------------------------------------\n\nTITLE: Implementing Custom Element Lifecycle Methods for a Rating Component\nDESCRIPTION: This example creates a custom element called 'rating-element' that displays a thumbs up/down rating system. It initializes a rating property in the constructor and renders the DOM with inline styles and SVG buttons in the connectedCallback method.\nSOURCE: https://github.com/lit/lit.dev/blob/main/packages/lit-dev-content/site/tutorials/content/wc-to-lit/02.md#2025-04-09_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nexport class RatingElement extends HTMLElement {\n  rating: number;\n\n  constructor() {\n    super();\n    this.rating = 0;\n  }\n\n  connectedCallback() {\n    this.innerHTML = `\n      <style>\n        rating-element {\n          display: inline-flex;\n          align-items: center;\n        }\n        rating-element button {\n          background: transparent;\n          border: none;\n          cursor: pointer;\n        }\n      </style>\n      <button class=\"thumb_down\" >\n        <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24\" viewBox=\"0 0 24 24\" width=\"24\"><path d=\"M15 3H6c-.83 0-1.54.5-1.84 1.22l-3.02 7.05c-.09.23-.14.47-.14.73v2c0 1.1.9 2 2 2h6.31l-.95 4.57-.03.32c0 .41.17.79.44 1.06L9.83 23l6.59-6.59c.36-.36.58-.86.58-1.41V5c0-1.1-.9-2-2-2zm4 0v12h4V3h-4z\"/></svg>\n      </button>\n      <span class=\"rating\">${this.rating}</span>\n      <button class=\"thumb_up\">\n        <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24\" viewBox=\"0 0 24 24\" width=\"24\"><path d=\"M1 21h4V9H1v12zm22-11c0-1.1-.9-2-2-2h-6.31l.95-4.57.03-.32c0-.41-.17-.79-.44-1.06L14.17 1 7.59 7.59C7.22 7.95 7 8.45 7 9v10c0 1.1.9 2 2 2h9c.83 0 1.54-.5 1.84-1.22l3.02-7.05c.09-.23.14-.47.14-.73v-2z\"/></svg>\n      </button>\n    `;\n  }\n }\n\n customElements.define('rating-element', RatingElement);\n```\n\nLANGUAGE: javascript\nCODE:\n```\nexport class RatingElement extends HTMLElement {\n  constructor() {\n    super();\n    this.rating = 0;\n  }\n\n  connectedCallback() {\n    this.innerHTML = `\n      <style>\n        rating-element {\n          display: inline-flex;\n          align-items: center;\n        }\n        rating-element button {\n          background: transparent;\n          border: none;\n          cursor: pointer;\n        }\n      </style>\n      <button class=\"thumb_down\" >\n        <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24\" viewBox=\"0 0 24 24\" width=\"24\"><path d=\"M15 3H6c-.83 0-1.54.5-1.84 1.22l-3.02 7.05c-.09.23-.14.47-.14.73v2c0 1.1.9 2 2 2h6.31l-.95 4.57-.03.32c0 .41.17.79.44 1.06L9.83 23l6.59-6.59c.36-.36.58-.86.58-1.41V5c0-1.1-.9-2-2-2zm4 0v12h4V3h-4z\"/></svg>\n      </button>\n      <span class=\"rating\">${this.rating}</span>\n      <button class=\"thumb_up\">\n        <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24\" viewBox=\"0 0 24 24\" width=\"24\"><path d=\"M1 21h4V9H1v12zm22-11c0-1.1-.9-2-2-2h-6.31l.95-4.57.03-.32c0-.41-.17-.79-.44-1.06L14.17 1 7.59 7.59C7.22 7.95 7 8.45 7 9v10c0 1.1.9 2 2 2h9c.83 0 1.54-.5 1.84-1.22l3.02-7.05c.09-.23.14-.47.14-.73v-2z\"/></svg>\n      </button>\n    `;\n  }\n }\n\n customElements.define('rating-element', RatingElement);\n```\n\n----------------------------------------\n\nTITLE: Implementing an Observable-based AsyncDirective with Lifecycle Handling\nDESCRIPTION: Creates a complete async directive that subscribes to an Observable, properly handling connection state with disconnected() and reconnected() lifecycle methods to prevent memory leaks.\nSOURCE: https://github.com/lit/lit.dev/blob/main/packages/lit-dev-content/site/docs/v2/templates/custom-directives.md#2025-04-09_snippet_10\n\nLANGUAGE: typescript\nCODE:\n```\nclass ObserveDirective extends AsyncDirective {\n  observable: Observable<unknown> | undefined;\n  unsubscribe: (() => void) | undefined;\n  // When the observable changes, unsubscribe to the old one and\n  // subscribe to the new one\n  render(observable: Observable<unknown>) {\n    if (this.observable !== observable) {\n      this.unsubscribe?.();\n      this.observable = observable\n      if (this.isConnected)  {\n        this.subscribe(observable);\n      }\n    }\n    return noChange;\n  }\n  // Subscribes to the observable, calling the directive's asynchronous\n  // setValue API each time the value changes\n  subscribe(observable: Observable<unknown>) {\n    this.unsubscribe = observable.subscribe((v: unknown) => {\n      this.setValue(v);\n    });\n  }\n  // When the directive is disconnected from the DOM, unsubscribe to ensure\n  // the directive instance can be garbage collected\n  disconnected() {\n    this.unsubscribe!();\n  }\n  // If the subtree the directive is in was disconnected and subsequently\n  // re-connected, re-subscribe to make the directive operable again\n  reconnected() {\n    this.subscribe(this.observable!);\n  }\n}\nexport const observe = directive(ObserveDirective);\n```\n\nLANGUAGE: javascript\nCODE:\n```\nclass ObserveDirective extends AsyncDirective {\n  // When the observable changes, unsubscribe to the old one and\n  // subscribe to the new one\n  render(observable) {\n    if (this.observable !== observable) {\n      this.unsubscribe?.();\n      this.observable = observable\n      if (this.isConnected)  {\n        this.subscribe(observable);\n      }\n    }\n    return noChange;\n  }\n  // Subscribes to the observable, calling the directive's asynchronous\n  // setValue API each time the value changes\n  subscribe(observable) {\n    this.unsubscribe = observable.subscribe((v) => {\n      this.setValue(v);\n    });\n  }\n  // When the directive is disconnected from the DOM, unsubscribe to ensure\n  // the directive instance can be garbage collected\n  disconnected() {\n    this.unsubscribe();\n  }\n  // If the subtree the directive is in was disconneted and subsequently\n  // re-connected, re-subscribe to make the directive operable again\n  reconnected() {\n    this.subscribe(this.observable);\n  }\n}\nexport const observe = directive(ObserveDirective);\n```\n\n----------------------------------------\n\nTITLE: Importing createContext from Lit Labs\nDESCRIPTION: Shows how to import the createContext function from the @lit-labs/context package.\nSOURCE: https://github.com/lit/lit.dev/blob/main/packages/lit-dev-content/site/docs/v2/data/context.md#2025-04-09_snippet_16\n\nLANGUAGE: ts\nCODE:\n```\nimport {createContext} from '@lit-labs/context';\n```\n\n----------------------------------------\n\nTITLE: Slotting Components in Lit Shadow DOM\nDESCRIPTION: Shows how to use the <slot> element to project content from the light DOM into a component's shadow DOM, similar to React's props.children.\nSOURCE: https://github.com/lit/lit.dev/blob/main/packages/lit-dev-content/site/articles/article/lit-cheat-sheet.md#2025-04-09_snippet_21\n\nLANGUAGE: javascript\nCODE:\n```\nimport {LitElement, html} from 'lit';\n\nclass MyElement extends LitElement {\n  render() {\n    return html`\n      <div>\n        <slot></slot>\n      </div>\n    `;\n  }\n}\ncustomElements.define('my-element', MyElement);\n\n// Usage\n<my-element>\n  <p>This content will be slotted</p>\n</my-element>\n```\n\n----------------------------------------\n\nTITLE: Creating a Lit Component with JavaScript Reactive Properties\nDESCRIPTION: Shows how to define a reactive property 'words' in a Lit component using vanilla JavaScript. The static properties configuration and constructor initialization provide the same functionality as the TypeScript version.\nSOURCE: https://github.com/lit/lit.dev/blob/main/packages/lit-dev-content/site/tutorials/content/word-viewer/02.md#2025-04-09_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nclass WordViewer extends LitElement {\n  static properties = {\n    words: {},\n  };\n\n  constructor() {\n    super();\n    this.words = 'initial value';\n  }\n  ...\n}\n```\n\n----------------------------------------\n\nTITLE: Optimized Conditional Styling in Lit\nDESCRIPTION: Demonstrates a more efficient approach to conditional styling by separating static and dynamic styles.\nSOURCE: https://github.com/lit/lit.dev/blob/main/packages/lit-dev-content/site/docs/v2/components/styles.md#2025-04-09_snippet_8\n\nLANGUAGE: javascript\nCODE:\n```\n  static styles = css`/* ... */`;\n  render() {\n    const redStyle = html`<style> :host { color: red; } </style>`;\n    return html`${this.red ? redStyle : ''}`\n```\n\n----------------------------------------\n\nTITLE: Configuring Web Test Runner for Legacy Browser Support\nDESCRIPTION: JavaScript configuration for Web Test Runner to enable legacy browser support, including web components polyfills and Lit's polyfill-support module.\nSOURCE: https://github.com/lit/lit.dev/blob/main/packages/lit-dev-content/site/docs/v2/tools/testing.md#2025-04-09_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport { legacyPlugin } from '@web/dev-server-legacy';\n\nexport default {\n  /* ... */\n  plugins: [\n    // make sure this plugin is always last\n    legacyPlugin({\n      polyfills: {\n        webcomponents: true,\n        // Inject lit's polyfill-support module into test files, which is required\n        // for interfacing with the webcomponents polyfills\n        custom: [\n          {\n            name: 'lit-polyfill-support',\n            path: 'node_modules/lit/polyfill-support.js',\n            test: \"!('attachShadow' in Element.prototype)\",\n            module: false,\n          },\n        ],\n      },\n    }),\n  ],\n};\n```\n\n----------------------------------------\n\nTITLE: Filtering Array Elements in TypeScript\nDESCRIPTION: Shows how to properly remove an item from an array using filter() to create a new array, ensuring reactive updates in Lit components. This approach replaces the problematic splice() method which mutates the original array.\nSOURCE: https://github.com/lit/lit.dev/blob/main/packages/lit-dev-content/site/tutorials/content/reactivity/02.md#2025-04-09_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\n    this.groceries =\n        this.groceries.filter((_, i) => i !== indexToRemove);\n```\n\n----------------------------------------\n\nTITLE: Using Expressions in Style Elements (with Limitations)\nDESCRIPTION: Shows how to use expressions inside a <style> element within a Lit render method. This approach has performance issues and limitations with the ShadyCSS polyfill.\nSOURCE: https://github.com/lit/lit.dev/blob/main/packages/lit-dev-content/site/docs/v3/components/styles.md#2025-04-09_snippet_9\n\nLANGUAGE: javascript\nCODE:\n```\nrender() {\n  return html`\n    <style>\n      :host {\n        /* Warning: this approach has limitations & performance issues! */\n        color: ${myColor}\n      }\n    </style>\n    <div>template content</div>\n  `;\n}\n```\n\n----------------------------------------\n\nTITLE: styleMap Usage Example - TypeScript\nDESCRIPTION: Example showing how to use styleMap directive in a Lit component with TypeScript decorators.\nSOURCE: https://github.com/lit/lit.dev/blob/main/packages/lit-dev-content/site/docs/v2/templates/directives.md#2025-04-09_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\n@customElement('my-element')\nclass MyElement extends LitElement {\n\n  @property({type: Boolean})\n  enabled = false;\n\n  render() {\n    const styles = { backgroundColor: this.enabled ? 'blue' : 'gray', color: 'white' };\n    return html`<p style=${styleMap(styles)}>Hello style!</p>`;\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Installing LitElement Component from npm\nDESCRIPTION: Command to install a LitElement component package using npm.\nSOURCE: https://github.com/lit/lit.dev/blob/main/packages/lit-dev-content/site/docs/v1/tools/use.md#2025-04-09_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm install some-package-name\n```\n\n----------------------------------------\n\nTITLE: Rendering Conditional List Items in Lit Component Template (TypeScript)\nDESCRIPTION: This snippet demonstrates how to render the conditionally populated list items array in the Lit component's template. It uses the ${listItems} expression to include the array in an unordered list.\nSOURCE: https://github.com/lit/lit.dev/blob/main/packages/lit-dev-content/site/tutorials/content/working-with-lists/03.md#2025-04-09_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\n// my-element.ts\n  render() {\n    ⋮\n    return html`\n      ⋮\n      <ul>\n        ${listItems}\n      </ul>\n    `;\n  }\n```\n\n----------------------------------------\n\nTITLE: Creating a Reusable Render Template Function for Lit SSR\nDESCRIPTION: Demonstrates how to create an exportable render function that uses Lit's SSR capabilities to render templates with dynamic data. This function wraps a template with data and returns the render result.\nSOURCE: https://github.com/lit/lit.dev/blob/main/packages/lit-dev-content/site/docs/v3/ssr/server-usage.md#2025-04-09_snippet_8\n\nLANGUAGE: javascript\nCODE:\n```\n// render-template.js\nimport {render} from '@lit-labs/ssr';\nimport {myTemplate} from './my-template.js';\n\nexport const renderTemplate = (someData) => {\n  return render(myTemplate(someData));\n};\n```\n\n----------------------------------------\n\nTITLE: Initializing Tooltip Visibility in connectedCallback with LitElement\nDESCRIPTION: Implements the connectedCallback lifecycle method to ensure the tooltip is initially hidden when connected to the DOM. It properly calls the parent class implementation with super.connectedCallback() to preserve LitElement's default behavior.\nSOURCE: https://github.com/lit/lit.dev/blob/main/packages/lit-dev-content/site/tutorials/content/tooltip/02.md#2025-04-09_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nconnectedCallback() {\n  super.connectedCallback();\n  this.hide();\n}\n```\n\n----------------------------------------\n\nTITLE: Context Provider with Reactive Property\nDESCRIPTION: Example showing how to make a context property reactive so that changes to it will update both the provider element and context consumers.\nSOURCE: https://github.com/lit/lit.dev/blob/main/packages/lit-dev-content/site/docs/v2/data/context.md#2025-04-09_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\n  @provide({context: myContext})\n  @property({attribute: false})\n  myData: MyData;\n```\n\n----------------------------------------\n\nTITLE: Creating and Appending a Nested NodePart in lit-html\nDESCRIPTION: Creates a new NodePart instance and appends it into an existing container part. This is the basic method to create nested parts that can be independently manipulated.\nSOURCE: https://github.com/lit/lit.dev/blob/main/packages/lit-dev-content/site/docs/v1/lit-html/creating-directives.md#2025-04-09_snippet_10\n\nLANGUAGE: javascript\nCODE:\n```\nimport {NodePart} from 'lit-html';\nconst newPart = new NodePart(containerPart.options);\n\nnewPart.appendIntoPart(containerPart);\n```\n\n----------------------------------------\n\nTITLE: Disabling Shadow DOM in Lit Components\nDESCRIPTION: Demonstrates how to turn off Shadow DOM in a Lit component by overriding the createRenderRoot() method. This approach is not recommended but may be necessary for integration with older systems.\nSOURCE: https://github.com/lit/lit.dev/blob/main/packages/lit-dev-content/site/articles/article/lit-cheat-sheet.md#2025-04-09_snippet_20\n\nLANGUAGE: javascript\nCODE:\n```\nimport {LitElement, html} from 'lit';\n\nclass MyElement extends LitElement {\n  createRenderRoot() {\n    return this;\n  }\n\n  render() {\n    return html`\n      <style>\n        /* These styles will apply to the light DOM */\n        p { color: blue; }\n      </style>\n      <p>Hi there</p>\n    `;\n  }\n}\ncustomElements.define('my-element', MyElement);\n```\n\n----------------------------------------\n\nTITLE: Using cache Directive in Lit Component\nDESCRIPTION: Demonstrates how to use the cache directive in a Lit component to optimize rendering performance when switching between templates.\nSOURCE: https://github.com/lit/lit.dev/blob/main/packages/lit-dev-content/site/docs/v2/templates/directives.md#2025-04-09_snippet_22\n\nLANGUAGE: typescript\nCODE:\n```\nconst detailView = (data) => html`<div>...</div>`;\nconst summaryView = (data) => html`<div>...</div>`;\n\n@customElement('my-element')\nclass MyElement extends LitElement {\n\n  @property()\n  data = {showDetails: true, /*...*/ };\n\n  render() {\n    return html`${cache(this.data.showDetails\n      ? detailView(this.data)\n      : summaryView(this.data)\n    )}`;\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Using ifDefined Directive in TypeScript\nDESCRIPTION: Demonstrates how to use the ifDefined directive in a Lit element to conditionally set attributes based on defined values.\nSOURCE: https://github.com/lit/lit.dev/blob/main/packages/lit-dev-content/site/docs/v3/templates/directives.md#2025-04-09_snippet_20\n\nLANGUAGE: typescript\nCODE:\n```\n@customElement('my-element')\nclass MyElement extends LitElement {\n\n  @property()\n  filename: string | undefined = undefined;\n\n  @property()\n  size: string | undefined = undefined;\n\n  render() {\n    // src attribute not rendered if either size or filename are undefined\n    return html`<img src=\"/images/${ifDefined(this.size)}/${ifDefined(this.filename)}\">`;\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Converting Polymer Computed Properties to Lit Render Method\nDESCRIPTION: Demonstrates how to migrate Polymer's computed properties to Lit by calculating values directly in the render() method.\nSOURCE: https://github.com/lit/lit.dev/blob/main/packages/lit-dev-content/site/articles/article/lit-for-polymer-users.md#2025-04-09_snippet_15\n\nLANGUAGE: javascript\nCODE:\n```\nrender() {\n  const cyphertext = rot13(this.cleartext);\n  return html`Text: ${cyphertext}`;\n}\n```\n\n----------------------------------------\n\nTITLE: Advanced Property Localization with Getter/Setter in Lit\nDESCRIPTION: Demonstrates implementing localization using TypeScript and JavaScript getter/setter patterns for more natural property interfaces.\nSOURCE: https://github.com/lit/lit.dev/blob/main/packages/lit-dev-content/site/docs/v2/localization/best-practices.md#2025-04-09_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nprivate _label?: string;\n\n@property()\nget label() {\n  return this._label ?? msg('Default label');\n}\n\nset label(label: string) {\n  this._label = label;\n}\n\nrender() {\n  return html`<button>${this.label}</button>`;\n}\n```\n\nLANGUAGE: javascript\nCODE:\n```\nstatic properties = {\n  label: {}\n};\n\nget label() {\n  return this._label ?? msg('Default label');\n}\n\nset label(label) {\n  this._label = label;\n}\n\nrender() {\n  return html`<button>${this.label}</button>`;\n}\n```\n\n----------------------------------------\n\nTITLE: Factoring Conditional Logic into Separate Function in Lit\nDESCRIPTION: Demonstrates how to simplify the template by moving conditional logic into a separate function for generating user messages.\nSOURCE: https://github.com/lit/lit.dev/blob/main/packages/lit-dev-content/site/docs/v3/templates/conditionals.md#2025-04-09_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\ngetUserMessage() {\n  if (this.userName) {\n    return html`Welcome ${this.userName}`;\n  } else {\n    return html`Please log in <button>Login</button>`;\n  }\n}\nrender() {\n  return html`<p>${this.getUserMessage()}</p>`;\n}\n```\n\n----------------------------------------\n\nTITLE: Using Lit's Server Environment Detection\nDESCRIPTION: Demonstrates how to use Lit's isServer utility to conditionally execute code based on the runtime environment.\nSOURCE: https://github.com/lit/lit.dev/blob/main/packages/lit-dev-content/site/docs/v2/ssr/authoring.md#2025-04-09_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport {isServer} from 'lit';\n\nif (isServer) {\n  // only runs in server environments like Node\n} else {\n  // runs in the browser\n}\n```\n\n----------------------------------------\n\nTITLE: Applying Scoped Styles in Lit Components\nDESCRIPTION: Demonstrates how styles in Lit components are scoped to the current element, allowing the use of generic selectors without affecting other elements.\nSOURCE: https://github.com/lit/lit.dev/blob/main/packages/lit-dev-content/site/articles/article/lit-cheat-sheet.md#2025-04-09_snippet_12\n\nLANGUAGE: javascript\nCODE:\n```\nimport {LitElement, html, css} from 'lit';\n\nclass MyElement extends LitElement {\n  static styles = css`\n    /* These styles _only_ apply to this element */\n    p {\n      color: green;\n    }\n  `;\n\n  render() {\n    return html`\n      <p>I'm green!</p>\n    `;\n  }\n}\ncustomElements.define('my-element', MyElement);\n\n// This is in the light DOM, so it is not affected by\n// the scoped styles\n<p>I'm not green</p>\n\n<my-element></my-element>\n```\n\n----------------------------------------\n\nTITLE: Importing and Using a Lit Component\nDESCRIPTION: Shows how to import a Lit component definition and use it in HTML. Demonstrates the use of the defined custom element tag.\nSOURCE: https://github.com/lit/lit.dev/blob/main/packages/lit-dev-content/site/articles/article/lit-cheat-sheet.md#2025-04-09_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport './simple-greeting.js';\n```\n\nLANGUAGE: html\nCODE:\n```\n<simple-greeting></simple-greeting>\n```\n\n----------------------------------------\n\nTITLE: Installing Lit Signals Package\nDESCRIPTION: Shows how to install the @lit-labs/signals package using npm.\nSOURCE: https://github.com/lit/lit.dev/blob/main/packages/lit-dev-content/site/docs/v3/data/signals.md#2025-04-09_snippet_1\n\nLANGUAGE: sh\nCODE:\n```\nnpm i @lit-labs/signals\n```\n\n----------------------------------------\n\nTITLE: Handling User Input with Event Listener in JavaScript\nDESCRIPTION: Shows how to properly handle user input in lit-html by updating the state and re-rendering the template. This approach keeps the state and DOM in sync.\nSOURCE: https://github.com/lit/lit.dev/blob/main/packages/lit-dev-content/site/docs/v1/lit-html/release-notes.md#2025-04-09_snippet_1\n\nLANGUAGE: JavaScript\nCODE:\n```\nlet text = '';\nconst onInput = (e) => {\n  text = e.target.value;\n  go();\n};\n\nconst go = () => {\n  render(html`<input .value=${text} @input=${onInput}>`, document.body);\n}\ngo();\n```\n\n----------------------------------------\n\nTITLE: Using Cache Directive for Conditional Rendering in Lit\nDESCRIPTION: Illustrates the use of the cache directive to optimize performance when switching between large, complicated templates by caching DOM for templates not currently rendered.\nSOURCE: https://github.com/lit/lit.dev/blob/main/packages/lit-dev-content/site/docs/v3/templates/conditionals.md#2025-04-09_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nrender() {\n  return html`${cache(this.userName ?\n    html`Welcome ${this.userName}`:\n    html`Please log in <button>Login</button>`)\n  }`;\n}\n```\n\n----------------------------------------\n\nTITLE: Deferring Event Listener Addition After First Paint in Lit\nDESCRIPTION: Shows a technique to defer adding an event listener until after the first paint, which can be useful for performance optimization.\nSOURCE: https://github.com/lit/lit.dev/blob/main/packages/lit-dev-content/site/docs/v1/components/events.md#2025-04-09_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nasync firstUpdated() {\n  // Give the browser a chance to paint\n  await new Promise((r) => setTimeout(r, 0));\n  this.addEventListener('click', this._handleClick);\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Date Converter Property in Lit Component\nDESCRIPTION: Initial implementation showing how to import and configure the dateConverter with language support. Demonstrates property decoration in TypeScript and static properties in JavaScript.\nSOURCE: https://github.com/lit/lit.dev/blob/main/packages/lit-dev-content/site/tutorials/content/custom-attribute-converter/04.md#2025-04-09_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport {dateConverter} from './date-converter.js';\n\nexport class DateDisplay extends LitElement {\n  ...\n\n  @property({converter: dateConverter(navigator.language), reflect: true})\n  date = new Date();\n  ...\n```\n\nLANGUAGE: javascript\nCODE:\n```\nimport {dateConverter} from './date-converter.js';\n\nexport class DateDisplay extends LitElement {\n  static properties = {\n    date: {converter: dateConverter(navigator.language), reflect: true},\n    dateStr: {type: String, attribute: 'date-str'},\n  };\n  ...\n```\n\n----------------------------------------\n\nTITLE: JavaScript LitElement Component Definition\nDESCRIPTION: Basic structure of a LitElement component in JavaScript, including class definition, element registration, and render method.\nSOURCE: https://github.com/lit/lit.dev/blob/main/packages/lit-dev-content/site/docs/v1/getting-started.md#2025-04-09_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nexport class MyElement extends LitElement { ... }\n\ncustomElements.define('my-element', MyElement);\n```\n\n----------------------------------------\n\nTITLE: RenderResultReadable Stream Implementation\nDESCRIPTION: Example showing how to use RenderResultReadable with Koa for streaming SSR results.\nSOURCE: https://github.com/lit/lit.dev/blob/main/packages/lit-dev-content/site/docs/v3/ssr/server-usage.md#2025-04-09_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nimport {render} from '@lit-labs/ssr';\nimport {RenderResultReadable} from '@lit-labs/ssr/lib/render-result-readable.js';\nimport {html} from 'lit';\n\n// Using Koa to stream\napp.use(async (ctx) => {\n  const result = render(html`<my-element></my-element>`);\n  ctx.type = 'text/html';\n  ctx.body = new RenderResultReadable(result);\n});\n```\n\n----------------------------------------\n\nTITLE: Focusing an Element After Update in LitElement (JavaScript)\nDESCRIPTION: This example demonstrates how to implement the updated method to focus an element after an update in a LitElement component.\nSOURCE: https://github.com/lit/lit.dev/blob/main/packages/lit-dev-content/site/docs/v1/components/lifecycle.md#2025-04-09_snippet_12\n\nLANGUAGE: javascript\nCODE:\n```\n{% include \"v1-projects/lifecycle/updated/my-element.js\" %}\n```\n\n----------------------------------------\n\nTITLE: Exporting CSS Shadow Parts in Nested Components\nDESCRIPTION: Shows how to export CSS Shadow Parts from nested shadow roots using the exportparts attribute, allowing for styling of deeply nested elements.\nSOURCE: https://github.com/lit/lit.dev/blob/main/packages/lit-dev-content/site/articles/article/lit-cheat-sheet.md#2025-04-09_snippet_17\n\nLANGUAGE: javascript\nCODE:\n```\nimport {LitElement, html} from 'lit';\n\nclass InnerElement extends LitElement {\n  render() {\n    return html`<div part=\"inner-text\">Inner content</div>`;\n  }\n}\ncustomElements.define('inner-element', InnerElement);\n\nclass OuterElement extends LitElement {\n  render() {\n    return html`\n      <inner-element exportparts=\"inner-text: outer-text\"></inner-element>\n    `;\n  }\n}\ncustomElements.define('outer-element', OuterElement);\n\n// Usage\n<style>\n  outer-element::part(outer-text) {\n    color: blue;\n  }\n</style>\n<outer-element></outer-element>\n```\n\n----------------------------------------\n\nTITLE: Importing guard Directive in Lit\nDESCRIPTION: Shows how to import the guard directive from Lit's directives module.\nSOURCE: https://github.com/lit/lit.dev/blob/main/packages/lit-dev-content/site/docs/v2/templates/directives.md#2025-04-09_snippet_27\n\nLANGUAGE: javascript\nCODE:\n```\nimport {guard} from 'lit/directives/guard.js';\n```\n\n----------------------------------------\n\nTITLE: Keyed Directive Usage Example\nDESCRIPTION: Demonstrates using the keyed directive to force DOM recreation when a key changes.\nSOURCE: https://github.com/lit/lit.dev/blob/main/packages/lit-dev-content/site/docs/v3/templates/directives.md#2025-04-09_snippet_27\n\nLANGUAGE: typescript\nCODE:\n```\n@customElement('my-element')\nclass MyElement extends LitElement {\n\n  @property()\n  userId: string = '';\n\n  render() {\n    return html`\n      <div>\n        ${keyed(this.userId, html`<user-card .userId=${this.userId}></user-card>`)}\n      </div>`;\n  }\n}\n```\n\nLANGUAGE: javascript\nCODE:\n```\nclass MyElement extends LitElement {\n  static properties = {\n    userId: {},\n  };\n\n  constructor() {\n    super();\n    this.userId = '';\n  }\n\n  render() {\n    return html`\n      <div>\n        ${keyed(this.userId, html`<user-card .userId=${this.userId}></user-card>`)}\n      </div>`;\n  }\n}\ncustomElements.define('my-element', MyElement);\n```\n\n----------------------------------------\n\nTITLE: Importing Cache Directive in Lit\nDESCRIPTION: Shows how to import the cache directive from Lit library.\nSOURCE: https://github.com/lit/lit.dev/blob/main/packages/lit-dev-content/site/docs/v3/templates/directives.md#2025-04-09_snippet_22\n\nLANGUAGE: javascript\nCODE:\n```\nimport {cache} from 'lit/directives/cache.js';\n```\n\n----------------------------------------\n\nTITLE: Using range Directive in TypeScript\nDESCRIPTION: Demonstrates how to use the range directive in a Lit element to generate a sequence of numbers.\nSOURCE: https://github.com/lit/lit.dev/blob/main/packages/lit-dev-content/site/docs/v3/templates/directives.md#2025-04-09_snippet_18\n\nLANGUAGE: typescript\nCODE:\n```\nclass MyElement extends LitElement {\n\n  render() {\n    return html`\n      ${map(range(8), (i) => html`${i + 1}`)}\n    `;\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Safe Expression Evaluation Directive\nDESCRIPTION: Implements a directive that safely evaluates expressions in a try/catch block to prevent errors.\nSOURCE: https://github.com/lit/lit.dev/blob/main/packages/lit-dev-content/site/docs/v1/lit-html/creating-directives.md#2025-04-09_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nconst safe = directive((f) => (part) => {\n  try {\n    part.setValue(f());\n  } catch (e) {\n    console.error(e);\n  }\n});\n```\n\n----------------------------------------\n\nTITLE: Overriding _getUpdateComplete Method in LitElement (JavaScript)\nDESCRIPTION: This example shows how to override the _getUpdateComplete method to await additional state before fulfilling the updateComplete promise, such as waiting for a child element to update.\nSOURCE: https://github.com/lit/lit.dev/blob/main/packages/lit-dev-content/site/docs/v1/components/lifecycle.md#2025-04-09_snippet_14\n\nLANGUAGE: javascript\nCODE:\n```\nclass MyElement extends LitElement {\n  async _getUpdateComplete() {\n    await super._getUpdateComplete();\n    await this._myChild.updateComplete;\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Creating SVG Motif with Rotated Text\nDESCRIPTION: This function creates a motif of rotated text elements using <use> and applies transformations. It's shown in both TypeScript and JavaScript versions.\nSOURCE: https://github.com/lit/lit.dev/blob/main/packages/lit-dev-content/site/tutorials/content/svg-templates/02.md#2025-04-09_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\nconst createMotif = (\n  numPrints: number,\n  offset: number = 0\n): SVGTemplateResult => {\n  const rotation = 360 / numPrints;\n\n  const prints = [];\n  let currRotation = offset;\n  for (let index = 0; index < numPrints; index++) {\n    currRotation += rotation;\n    prints.push(svg`\n      <use\n        href=\"#chars\"\n        transform=\"rotate(${currRotation}, 0, 0)\">\n      </use>\n    `);\n  }\n  return svg`<g transform=\"translate(50, 50)\">${prints}</g>`;\n}\n```\n\nLANGUAGE: javascript\nCODE:\n```\nconst createMotif = (numPrints, offset = 0) => {\n  const rotation = 360 / numPrints;\n\n  const prints = [];\n  let currRotation = offset;\n  for (let index = 0; index < numPrints; index++) {\n    currRotation += rotation;\n    prints.push(svg`\n      <use\n        href=\"#chars\"\n        transform=\"rotate(${currRotation}, 0, 0)\">\n      </use>\n    `);\n  }\n  return svg`<g transform=\"translate(50, 50)\">${prints}</g>`;\n}\n```\n\n----------------------------------------\n\nTITLE: Updating directive imports in Lit 2.0\nDESCRIPTION: Example showing how to update built-in lit-html directive imports to use the consolidated lit package.\nSOURCE: https://github.com/lit/lit.dev/blob/main/packages/lit-dev-content/site/docs/v2/releases/upgrade.md#2025-04-09_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nimport {repeat} from 'lit-html/directives/repeat.js';\n```\n\nLANGUAGE: javascript\nCODE:\n```\nimport {repeat} from 'lit/directives/repeat.js';\n```\n\n----------------------------------------\n\nTITLE: ContextConsumer Constructor\nDESCRIPTION: The constructor signature for the ContextConsumer class which adds context consuming behavior to a custom element.\nSOURCE: https://github.com/lit/lit.dev/blob/main/packages/lit-dev-content/site/docs/v2/data/context.md#2025-04-09_snippet_26\n\nLANGUAGE: ts\nCODE:\n```\nContextConsumer(\n  host: HostElement,\n  context: C,\n  callback?: (value: ContextType<C>, dispose?: () => void) => void,\n  subscribe: boolean = false\n)\n```\n\n----------------------------------------\n\nTITLE: Importing Lit in TypeScript\nDESCRIPTION: Example of importing Lit core components and decorators in a TypeScript file for component development.\nSOURCE: https://github.com/lit/lit.dev/blob/main/packages/lit-dev-content/site/docs/v2/getting-started.md#2025-04-09_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport {LitElement, html} from 'lit';\nimport {customElement, property} from 'lit/decorators.js';\n```\n\n----------------------------------------\n\nTITLE: Using a Lit Component in JSX\nDESCRIPTION: Shows how to use a Lit component in JSX by importing the component and using its tag name in the JSX template.\nSOURCE: https://github.com/lit/lit.dev/blob/main/packages/lit-dev-content/site/docs/v3/tools/adding-lit.md#2025-04-09_snippet_4\n\nLANGUAGE: tsx\nCODE:\n```\nimport './components/my-element.js';\n\nexport const App = () => (\n  <h1>My App</h1>\n  <my-element></my-element>\n)\n```\n\n----------------------------------------\n\nTITLE: Optimal HTML Markup Separation in Localization\nDESCRIPTION: Demonstrates the recommended approach of separating HTML markup from localized strings.\nSOURCE: https://github.com/lit/lit.dev/blob/main/packages/lit-dev-content/site/docs/v2/localization/best-practices.md#2025-04-09_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nrender() {\n  // Much better! Now the phrase \"Launch rocket\" can be translated more easily\n  // in isolation.\n  return html`<button>${msg('Launch rocket')}</button>`;\n}\n```\n\n----------------------------------------\n\nTITLE: Creating SVG Text Element with Lit\nDESCRIPTION: Demonstrates how to create a simple SVG text element using Lit's svg template literal.\nSOURCE: https://github.com/lit/lit.dev/blob/main/packages/lit-dev-content/site/tutorials/content/svg-templates/01.md#2025-04-09_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nconst helloSVG = svg`<text>Hello, SVG!</text>`;\n```\n\n----------------------------------------\n\nTITLE: Styling with CSS Shadow Parts in Lit\nDESCRIPTION: Demonstrates how to use CSS Shadow Parts to style specific elements within a component's shadow DOM from outside the component.\nSOURCE: https://github.com/lit/lit.dev/blob/main/packages/lit-dev-content/site/articles/article/lit-cheat-sheet.md#2025-04-09_snippet_16\n\nLANGUAGE: javascript\nCODE:\n```\nimport {LitElement, html} from 'lit';\n\nclass MyElement extends LitElement {\n  render() {\n    return html`\n      <div part=\"my-text\">\n        <p>Some text</p>\n      </div>\n    `;\n  }\n}\ncustomElements.define('my-element', MyElement);\n\n// Usage\n<style>\n  my-element::part(my-text) {\n    color: red;\n    font-weight: bold;\n  }\n</style>\n<my-element></my-element>\n```\n\n----------------------------------------\n\nTITLE: Using guard Directive in JavaScript Lit Component\nDESCRIPTION: Shows how to use the guard directive in a JavaScript Lit component to optimize rendering performance by preventing unnecessary work.\nSOURCE: https://github.com/lit/lit.dev/blob/main/packages/lit-dev-content/site/docs/v2/templates/directives.md#2025-04-09_snippet_29\n\nLANGUAGE: javascript\nCODE:\n```\nclass MyElement extends LitElement {\n  static properties = {\n    value: {},\n  };\n\n  constructor() {\n    super();\n    this.value = '';\n  }\n\n  render() {\n    return html`\n      <div>\n        ${guard([this.value], () => calculateSHA(this.value))}\n      </div>`;\n  }\n}\ncustomElements.define('my-element', MyElement);\n```\n\n----------------------------------------\n\nTITLE: Using cache Directive in JavaScript Lit Component\nDESCRIPTION: Shows how to use the cache directive in a JavaScript Lit component for optimizing rendering performance when switching between templates.\nSOURCE: https://github.com/lit/lit.dev/blob/main/packages/lit-dev-content/site/docs/v2/templates/directives.md#2025-04-09_snippet_23\n\nLANGUAGE: javascript\nCODE:\n```\nconst detailView = (data) => html`<div>...</div>`;\nconst summaryView = (data) => html`<div>...</div>`;\n\nclass MyElement extends LitElement {\n  static properties = {\n    data: {},\n  };\n\n  constructor() {\n    super();\n    this.data = {showDetails: true, /*...*/ };\n  }\n\n  render() {\n    return html`${cache(this.data.showDetails\n      ? detailView(this.data)\n      : summaryView(this.data)\n    )}`;\n  }\n}\ncustomElements.define('my-element', MyElement);\n```\n\n----------------------------------------\n\nTITLE: Importing map Directive in JavaScript\nDESCRIPTION: Shows how to import the map directive from the Lit library.\nSOURCE: https://github.com/lit/lit.dev/blob/main/packages/lit-dev-content/site/docs/v3/templates/directives.md#2025-04-09_snippet_10\n\nLANGUAGE: javascript\nCODE:\n```\nimport {map} from 'lit/directives/map.js';\n```\n\n----------------------------------------\n\nTITLE: Defining Properties in a Custom Element with JavaScript\nDESCRIPTION: Demonstrates the JavaScript approach to defining properties with the static properties object, setting the attribute option to false to prevent attribute reflection.\nSOURCE: https://github.com/lit/lit.dev/blob/main/packages/lit-dev-content/site/docs/v3/internal/styles.md#2025-04-09_snippet_2\n\nLANGUAGE: js\nCODE:\n```\nclass MyElement {\n  static properties = {\n    foo: {attribute: false}\n  };\n}\ncustomElements.define('my-element', MyElement);\n```\n\n----------------------------------------\n\nTITLE: Lazy-loading Locale Modules\nDESCRIPTION: Shows a pattern for lazy-loading locale modules using dynamic imports to minimize initial download size.\nSOURCE: https://github.com/lit/lit.dev/blob/main/packages/lit-dev-content/site/docs/v2/localization/runtime-mode.md#2025-04-09_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\nimport {configureLocalization} from '@lit/localize';\nimport {sourceLocale, targetLocales} from './generated/locales.js';\n\nconst {getLocale, setLocale} = configureLocalization({\n  sourceLocale,\n  targetLocales,\n  loadLocale: (locale) => import(`/locales/${locale}.js`),\n});\n```\n\n----------------------------------------\n\nTITLE: Specifying TypeScript Declaration File in package.json\nDESCRIPTION: Configuration to include TypeScript declaration files in the published npm package for better type support.\nSOURCE: https://github.com/lit/lit.dev/blob/main/packages/lit-dev-content/site/docs/v2/tools/publishing.md#2025-04-09_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n{\n  ...\n  \"types\": \"my-element.d.ts\"\n}\n```\n\n----------------------------------------\n\nTITLE: Basic Localization Example in JavaScript\nDESCRIPTION: Shows a basic example of using msg() for localization and how it gets transformed into locale-specific builds.\nSOURCE: https://github.com/lit/lit.dev/blob/main/packages/lit-dev-content/site/docs/v2/localization/transform-mode.md#2025-04-09_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n// src/launch-button.js\nimport {msg} from '@lit/localize';\n\nrender() {\n  return html`<button>${msg('Launch rocket')}</button>`\n}\n```\n\n----------------------------------------\n\nTITLE: Specifying TypeScript Declaration File in package.json\nDESCRIPTION: Configuration to include TypeScript declaration files in the published npm package for better type support.\nSOURCE: https://github.com/lit/lit.dev/blob/main/packages/lit-dev-content/site/docs/v2/tools/publishing.md#2025-04-09_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n{\n  ...\n  \"types\": \"my-element.d.ts\"\n}\n```\n\n----------------------------------------\n\nTITLE: Adding Style Element in Lit Render Method\nDESCRIPTION: Demonstrates how to include a <style> element within the render method of a Lit component. This approach allows for per-instance styling updates.\nSOURCE: https://github.com/lit/lit.dev/blob/main/packages/lit-dev-content/site/docs/v3/components/styles.md#2025-04-09_snippet_8\n\nLANGUAGE: javascript\nCODE:\n```\nrender() {\n  return html`\n    <style>\n      /* updated per instance */\n    </style>\n    <div>template content</div>\n  `;\n}\n```\n\n----------------------------------------\n\nTITLE: Rendering Conditional Content with Ternary Operator in Lit\nDESCRIPTION: Demonstrates using the conditional (ternary) operator to render different content based on the userName property.\nSOURCE: https://github.com/lit/lit.dev/blob/main/packages/lit-dev-content/site/docs/v3/templates/conditionals.md#2025-04-09_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nrender() {\n  return this.userName\n    ? html`Welcome ${this.userName}`\n    : html`Please log in <button>Login</button>`;\n}\n```\n\n----------------------------------------\n\nTITLE: Rendering Conditional Content with Ternary Operator in Lit\nDESCRIPTION: Demonstrates using the conditional (ternary) operator to render different content based on the userName property.\nSOURCE: https://github.com/lit/lit.dev/blob/main/packages/lit-dev-content/site/docs/v3/templates/conditionals.md#2025-04-09_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nrender() {\n  return this.userName\n    ? html`Welcome ${this.userName}`\n    : html`Please log in <button>Login</button>`;\n}\n```\n\n----------------------------------------\n\nTITLE: Importing range and map directives in Lit\nDESCRIPTION: This snippet shows how to import the range() and map() directives from the Lit library. These directives are used to create iterable ranges and map over them for rendering repeated patterns.\nSOURCE: https://github.com/lit/lit.dev/blob/main/packages/lit-dev-content/site/tutorials/content/working-with-lists/04.md#2025-04-09_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport {range} from 'lit/directives/range.js';\nimport {map} from 'lit/directives/map.js';\n```\n\nLANGUAGE: javascript\nCODE:\n```\nimport {range} from 'lit/directives/range.js';\nimport {map} from 'lit/directives/map.js';\n```\n\n----------------------------------------\n\nTITLE: Using Lit Component in HTML\nDESCRIPTION: Demonstrates usage of a defined Lit component in HTML markup.\nSOURCE: https://github.com/lit/lit.dev/blob/main/packages/lit-dev-content/site/docs/v2/components/defining.md#2025-04-09_snippet_2\n\nLANGUAGE: html\nCODE:\n```\n<simple-greeting name=\"Markup\"></simple-greeting>\n```\n\n----------------------------------------\n\nTITLE: Auto-pinpoint Updates Example\nDESCRIPTION: Shows how to use the signals html template tag for automatic pinpoint updates.\nSOURCE: https://github.com/lit/lit.dev/blob/main/packages/lit-dev-content/site/docs/v3/data/signals.md#2025-04-09_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nimport {LitElement} from 'lit';\nimport {SignalWatcher, html, signal} from '@lit-labs/signals';\n\n// SharedCounterComponent ...\n  render() {\n    return html`\n      <p>The count is ${count}</p>\n      <button @click=${this.#onClick}>Increment</button>\n    `;\n  }\n```\n\n----------------------------------------\n\nTITLE: Consumer Decorator Signature\nDESCRIPTION: Signature showing how to use the @consume decorator with configuration options.\nSOURCE: https://github.com/lit/lit.dev/blob/main/packages/lit-dev-content/site/docs/v3/data/context.md#2025-04-09_snippet_12\n\nLANGUAGE: typescript\nCODE:\n```\n@consume({context: Context, subscribe?: boolean})\n```\n\n----------------------------------------\n\nTITLE: Implementing Tooltip Target Property Accessor in TypeScript\nDESCRIPTION: Defines a target property with a getter and setter. The setter manages adding and removing event listeners when the target element changes.\nSOURCE: https://github.com/lit/lit.dev/blob/main/packages/lit-dev-content/site/tutorials/content/tooltip/03.md#2025-04-09_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\n_target: Element|null = null;\n\nget target() {\n  return this._target;\n}\n\nset target(target: Element|null) {\n  // Remove events from existing target\n  if (this.target) {\n    enterEvents.forEach(name =>\n      this.target!.removeEventListener(name, this.show));\n    leaveEvents.forEach(name =>\n      this.target!.removeEventListener(name, this.hide));\n  }\n  // Add events to new target\n  if (target) {\n    enterEvents.forEach(name =>\n      target!.addEventListener(name, this.show));\n    leaveEvents.forEach(name =>\n      target!.addEventListener(name, this.hide));\n  }\n  this._target = target;\n}\n```\n\n----------------------------------------\n\nTITLE: Using CSS Custom Properties for Inheritance in Shadow DOM\nDESCRIPTION: Shows how CSS Custom Properties can be used to inherit styles through multiple shadow roots, allowing for flexible theming of components.\nSOURCE: https://github.com/lit/lit.dev/blob/main/packages/lit-dev-content/site/articles/article/lit-cheat-sheet.md#2025-04-09_snippet_15\n\nLANGUAGE: javascript\nCODE:\n```\nimport {LitElement, html, css} from 'lit';\n\nclass MyElement extends LitElement {\n  static styles = css`\n    :host {\n      color: var(--my-text-color, black);\n    }\n  `;\n\n  render() {\n    return html`<p>Some text</p>`;\n  }\n}\ncustomElements.define('my-element', MyElement);\n\n// Usage\n<style>\n  my-element {\n    --my-text-color: blue;\n  }\n</style>\n<my-element></my-element>\n```\n\n----------------------------------------\n\nTITLE: Importing unsafeSVG Directive in Lit\nDESCRIPTION: Shows how to import the unsafeSVG directive from the Lit library.\nSOURCE: https://github.com/lit/lit.dev/blob/main/packages/lit-dev-content/site/docs/v2/templates/directives.md#2025-04-09_snippet_37\n\nLANGUAGE: javascript\nCODE:\n```\nimport {unsafeSVG} from 'lit/directives/unsafe-svg.js';\n```\n\n----------------------------------------\n\nTITLE: Importing ref Directive in Lit\nDESCRIPTION: Shows how to import the ref directive from the Lit library.\nSOURCE: https://github.com/lit/lit.dev/blob/main/packages/lit-dev-content/site/docs/v3/templates/directives.md#2025-04-09_snippet_43\n\nLANGUAGE: javascript\nCODE:\n```\nimport {ref} from 'lit/directives/ref.js';\n```\n\n----------------------------------------\n\nTITLE: Managing Window Event Listeners in Component Lifecycle Methods\nDESCRIPTION: Demonstrates proper event listener management by adding listeners in connectedCallback and removing them in disconnectedCallback. This pattern ensures proper cleanup when components are disconnected from the DOM.\nSOURCE: https://github.com/lit/lit.dev/blob/main/packages/lit-dev-content/site/docs/v3/components/events.md#2025-04-09_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nconnectedCallback() {\n  super.connectedCallback();\n  window.addEventListener('resize', this._handleResize);\n}\ndisconnectedCallback() {\n  window.removeEventListener('resize', this._handleResize);\n  super.disconnectedCallback();\n}\n```\n\n----------------------------------------\n\nTITLE: Using unsafeSVG Directive to Render SVG Content in lit-html\nDESCRIPTION: Shows how to use the unsafeSVG directive to render SVG markup inside an SVG element. This is useful for dynamically inserting SVG content, though it should not be used with untrusted input.\nSOURCE: https://github.com/lit/lit.dev/blob/main/packages/lit-dev-content/site/docs/v2/releases/release-notes/1.2.0.md#2025-04-09_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\n// shape is SVG partial text, with no <svg> element\nconst renderShape = (shape) => html`\n  <svg  width=\"100\" height=\"100\" viewBox=\"0 0 100 100\">\n    ${unsafeSVG(shape)}\n  </svg>\n`;\n```\n\n----------------------------------------\n\nTITLE: Defining Slot with Fallback Content in Lit\nDESCRIPTION: Illustrates how to define a slot with fallback content in a custom element's shadow DOM using Lit.\nSOURCE: https://github.com/lit/lit.dev/blob/main/packages/lit-dev-content/site/docs/v1/lit-html/writing-templates.md#2025-04-09_snippet_14\n\nLANGUAGE: js\nCODE:\n```\nhtml`<slot>Sorry, no content available. I am just fallback content</slot>`;\n```\n\n----------------------------------------\n\nTITLE: Guard Directive TypeScript Signature\nDESCRIPTION: TypeScript signature for the guard directive function.\nSOURCE: https://github.com/lit/lit.dev/blob/main/packages/lit-dev-content/site/docs/v3/templates/directives.md#2025-04-09_snippet_29\n\nLANGUAGE: typescript\nCODE:\n```\nguard(dependencies: unknown[], valueFn: () => unknown)\n```\n\n----------------------------------------\n\nTITLE: Applying Transformation to <use> Element\nDESCRIPTION: This snippet demonstrates applying a rotation transformation to the <use> element without affecting the original <text> element in <defs>.\nSOURCE: https://github.com/lit/lit.dev/blob/main/packages/lit-dev-content/site/tutorials/content/svg-templates/02.md#2025-04-09_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nconst helloDefs = svg`\n  <defs>\n    <text id=\"chars\">Hello defs!</text>\n  </defs>\n  <use\n    href=\"#chars\"\n    transform=\"rotate(180, 0,0)\">\n  </use>\n`;\n```\n\n----------------------------------------\n\nTITLE: Unicode Escapes in Styles\nDESCRIPTION: Example of using unicode escape sequences in CSS styles.\nSOURCE: https://github.com/lit/lit.dev/blob/main/packages/lit-dev-content/site/docs/v2/components/styles.md#2025-04-09_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nstatic styles = css`\n  div::before {\n    content: '\\u2022';\n  }\n\n```\n\n----------------------------------------\n\nTITLE: Implementing Vote Property and Setter Logic in JavaScript\nDESCRIPTION: JavaScript implementation of the vote property with getter/setter logic that handles vote changes and updates the rating accordingly.\nSOURCE: https://github.com/lit/lit.dev/blob/main/packages/lit-dev-content/site/tutorials/content/wc-to-lit/07.md#2025-04-09_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nexport class RatingElement extends HTMLElement {\n  _vote = null;\n\n  ...\n\n  set vote(newValue) {\n    const oldValue = this._vote;\n    if (newValue === oldValue) {\n      return;\n    }\n\n    if (newValue === 'up') {\n      if (oldValue === 'down') {\n        this.rating += 2;\n      } else {\n        this.rating += 1;\n      }\n    } else if (newValue === 'down') {\n      if (oldValue === 'up') {\n        this.rating -= 2;\n      } else {\n        this.rating -= 1;\n      }\n    }\n\n    this._vote = newValue;\n    this.setAttribute('vote', newValue);\n  }\n\n  get vote() {\n    return this._vote;\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Importing Lit in JavaScript\nDESCRIPTION: Example of importing the core Lit components in a JavaScript file. This is the basic import needed to create Lit elements.\nSOURCE: https://github.com/lit/lit.dev/blob/main/packages/lit-dev-content/site/docs/v3/getting-started.md#2025-04-09_snippet_2\n\nLANGUAGE: js\nCODE:\n```\nimport {LitElement, html} from 'lit';\n```\n\n----------------------------------------\n\nTITLE: Importing Lit Signals Components\nDESCRIPTION: Shows how to import the main exports from @lit-labs/signals package.\nSOURCE: https://github.com/lit/lit.dev/blob/main/packages/lit-dev-content/site/docs/v3/data/signals.md#2025-04-09_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport {SignalWatcher, watch, signal} from '@lit-labs/signals';\n```\n\n----------------------------------------\n\nTITLE: Example Output of Generated Locale Module in Runtime Mode\nDESCRIPTION: Shows the structure of a generated locale module containing localized templates for a specific locale (es-419 in this example).\nSOURCE: https://github.com/lit/lit.dev/blob/main/packages/lit-dev-content/site/docs/v2/localization/runtime-mode.md#2025-04-09_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n// locales/es-419.ts\nexport const templates = {\n  h3c44aff2d5f5ef6b: html`Hola <b>Mundo!</b>`,\n};\n```\n\n----------------------------------------\n\nTITLE: Configuring Rollup with Lit Template Compiler for TypeScript\nDESCRIPTION: Shows how to set up Rollup configuration to use the new Lit template compiler as a TypeScript transform for improved first render performance.\nSOURCE: https://github.com/lit/lit.dev/blob/main/packages/lit-dev-content/site/blog/2023-09-27-lit-3.0-prerelease-2.md#2025-04-09_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport typescript from '@rollup/plugin-typescript';\nimport {compileLitTemplates} from '@lit-labs/compiler';\n\nexport default {\n  // ...\n  plugins: [\n    typescript({\n      transformers: {\n        before: [compileLitTemplates()],\n      },\n    }),\n    // other rollup plugins\n  ],\n};\n```\n\n----------------------------------------\n\nTITLE: Binding Any Value to HTML Tag Name with unsafeStatic\nDESCRIPTION: Shows how to bind any arbitrary string value to an HTML tag name using the unsafeStatic() directive, with a warning about security considerations.\nSOURCE: https://github.com/lit/lit.dev/blob/main/packages/lit-dev-content/site/articles/article/lit-cheat-sheet.md#2025-04-09_snippet_10\n\nLANGUAGE: typescript\nCODE:\n```\nimport {LitElement, html} from 'lit';\nimport {customElement, property} from 'lit/decorators.js';\nimport {unsafeStatic} from 'lit/static-html.js';\n\n@customElement('my-element')\nexport class MyElement extends LitElement {\n  @property({type: String})\n  tagName = 'div';\n\n  render() {\n    return html`\n      <${unsafeStatic(this.tagName)}>Hello World</${unsafeStatic(this.tagName)}>\n    `;\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Importing Repeat Directive in Lit\nDESCRIPTION: Import statement for the repeat directive which provides keyed iteration over collections.\nSOURCE: https://github.com/lit/lit.dev/blob/main/packages/lit-dev-content/site/docs/v2/templates/directives.md#2025-04-09_snippet_13\n\nLANGUAGE: javascript\nCODE:\n```\nimport {repeat} from 'lit/directives/repeat.js';\n```\n\n----------------------------------------\n\nTITLE: Using ref Directive with Ref Object in Lit Element\nDESCRIPTION: Demonstrates how to use the ref directive with a Ref object to get a reference to a rendered element in a Lit component.\nSOURCE: https://github.com/lit/lit.dev/blob/main/packages/lit-dev-content/site/docs/v2/templates/directives.md#2025-04-09_snippet_40\n\nLANGUAGE: typescript\nCODE:\n```\n@customElement('my-element')\nclass MyElement extends LitElement {\n\n  inputRef: Ref<HTMLInputElement> = createRef();\n\n  render() {\n    // Passing ref directive a Ref object that will hold the element in .value\n    return html`<input ${ref(this.inputRef)}>`;\n  }\n\n  firstUpdated() {\n    const input = this.inputRef.value!;\n    input.focus();\n  }\n}\n```\n\nLANGUAGE: javascript\nCODE:\n```\nclass MyElement extends LitElement {\n\n  inputRef = createRef();\n\n  render() {\n    // Passing ref directive a Ref object that will hold the element in .value\n    return html`<input ${ref(this.inputRef)}>`;\n  }\n\n  firstUpdated() {\n    const input = this.inputRef.value!;\n    input.focus();\n  }\n}\ncustomElements.define('my-element', MyElement);\n```\n\n----------------------------------------\n\nTITLE: Importing Repeat Directive in Lit\nDESCRIPTION: Import statement for the repeat directive which provides keyed iteration over collections.\nSOURCE: https://github.com/lit/lit.dev/blob/main/packages/lit-dev-content/site/docs/v2/templates/directives.md#2025-04-09_snippet_13\n\nLANGUAGE: javascript\nCODE:\n```\nimport {repeat} from 'lit/directives/repeat.js';\n```\n\n----------------------------------------\n\nTITLE: Using PropertyValues Type in TypeScript for Strong Type Checking\nDESCRIPTION: Example of using TypeScript's PropertyValues<this> type to get strong type checking for the changedProperties map in lifecycle methods like shouldUpdate.\nSOURCE: https://github.com/lit/lit.dev/blob/main/packages/lit-dev-content/site/docs/v3/components/lifecycle.md#2025-04-09_snippet_3\n\nLANGUAGE: ts\nCODE:\n```\nimport {LitElement, html, PropertyValues} from 'lit';\n...\n  shouldUpdate(changedProperties: PropertyValues<this>) {\n    ...\n  }\n```\n\n----------------------------------------\n\nTITLE: Using live Directive in Lit Component\nDESCRIPTION: Demonstrates how to use the live directive in a Lit component to set an attribute or property if it differs from the live DOM value.\nSOURCE: https://github.com/lit/lit.dev/blob/main/packages/lit-dev-content/site/docs/v2/templates/directives.md#2025-04-09_snippet_31\n\nLANGUAGE: typescript\nCODE:\n```\n@customElement('my-element')\nclass MyElement extends LitElement {\n\n  @property()\n  data = {value: 'test'};\n\n  render() {\n    return html`<input .value=${live(this.data.value)}>`;\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Automatic Re-render on Locale Change in TypeScript\nDESCRIPTION: Shows how to use the @localized decorator with a Lit component to automatically re-render when the locale changes.\nSOURCE: https://github.com/lit/lit.dev/blob/main/packages/lit-dev-content/site/docs/v2/localization/runtime-mode.md#2025-04-09_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nimport {LitElement, html} from 'lit';\nimport {customElement} from 'lit/decorators.js';\nimport {msg, localized} from '@lit/localize';\n\n@customElement('my-element');\n@localized()\nclass MyElement extends LitElement {\n  render() {\n    // Whenever setLocale() is called, and templates for that locale have\n    // finished loading, this render() function will be re-invoked.\n    return msg(html`Hello <b>World!</b>`);\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Suboptimal HTML Markup in Localization\nDESCRIPTION: Shows an inefficient approach to localizing content with HTML markup included in the translation string.\nSOURCE: https://github.com/lit/lit.dev/blob/main/packages/lit-dev-content/site/docs/v2/localization/best-practices.md#2025-04-09_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nrender() {\n  // Don't do this! There's no reason to include the <button> tag in this\n  // localized template.\n  return msg(html`<button>Launch rocket</button>`);\n}\n```\n\n----------------------------------------\n\nTITLE: Installing Lit via npm\nDESCRIPTION: Command to install the Lit library from npm. This is the recommended approach for most development environments.\nSOURCE: https://github.com/lit/lit.dev/blob/main/packages/lit-dev-content/site/docs/v3/getting-started.md#2025-04-09_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\nnpm i lit\n```\n\n----------------------------------------\n\nTITLE: Setting CSS Custom Property for Lit Component\nDESCRIPTION: This HTML snippet demonstrates how to set a CSS custom property for a Lit component from outside. It uses the component's tag name as a CSS selector to apply the custom property.\nSOURCE: https://github.com/lit/lit.dev/blob/main/packages/lit-dev-content/site/docs/v1/components/styles.md#2025-04-09_snippet_17\n\nLANGUAGE: html\nCODE:\n```\n<style>\n  my-element {\n    --my-background: rgb(67, 156, 144);\n  }\n</style>\n<my-element></my-element>\n```\n\n----------------------------------------\n\nTITLE: consume Decorator Signature\nDESCRIPTION: The signature of the consume decorator which adds a ContextConsumer controller to retrieve a value for a property via the Context protocol.\nSOURCE: https://github.com/lit/lit.dev/blob/main/packages/lit-dev-content/site/docs/v2/data/context.md#2025-04-09_snippet_22\n\nLANGUAGE: ts\nCODE:\n```\n@consume({context: Context, subscribe?: boolean})\n```\n\n----------------------------------------\n\nTITLE: Using styleMap Directive in Lit-html\nDESCRIPTION: Shows how to use styleMap directive to set inline styles based on an object. Supports both camelCase and kebab-case property names.\nSOURCE: https://github.com/lit/lit.dev/blob/main/packages/lit-dev-content/site/docs/v1/lit-html/template-reference.md#2025-04-09_snippet_13\n\nLANGUAGE: javascript\nCODE:\n```\nimport {styleMap} from 'lit-html/directives/style-map.js';\n\nlet styles = { backgroundColor: 'blue', color: 'white' };\nhtml`<p style=${styleMap(styles)}>Hello style!</p>`;\n```\n\n----------------------------------------\n\nTITLE: Accessing Slotted Children with Element Node Filter\nDESCRIPTION: A getter method that retrieves assigned nodes for a slot and filters for element nodes only. Uses querySelector to find the slot and filters out non-element nodes.\nSOURCE: https://github.com/lit/lit.dev/blob/main/packages/lit-dev-content/site/docs/v1/components/templates.md#2025-04-09_snippet_15\n\nLANGUAGE: javascript\nCODE:\n```\nget _slottedChildren() {\n  const slot = this.shadowRoot.querySelector('slot');\n  const childNodes = slot.assignedNodes({flatten: true});\n  return Array.prototype.filter.call(childNodes, (node) => node.nodeType == Node.ELEMENT_NODE);\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Basic LitElement Component in JavaScript\nDESCRIPTION: Demonstrates how to create a basic LitElement component with a simple render method that displays a hello message. The component is then registered using customElements.define.\nSOURCE: https://github.com/lit/lit.dev/blob/main/packages/lit-dev-content/site/docs/v1/getting-started.md#2025-04-09_snippet_8\n\nLANGUAGE: javascript\nCODE:\n```\nimport {LitElement, html} from 'lit-element';\n\nclass MyElement extends LitElement {\n  render() {\n    return html`\n      <div>Hello from MyElement!</div>\n    `;\n  }\n}\n\ncustomElements.define('my-element', MyElement);\n```\n\n----------------------------------------\n\nTITLE: Using Lit via CDN Bundle\nDESCRIPTION: Example of importing Lit from a pre-built CDN bundle in a browser environment using a module script.\nSOURCE: https://github.com/lit/lit.dev/blob/main/packages/lit-dev-content/site/docs/v2/getting-started.md#2025-04-09_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nimport {LitElement, html} from 'https://cdn.jsdelivr.net/gh/lit/dist@2/core/lit-core.min.js';\n```\n\n----------------------------------------\n\nTITLE: Implementing Pinpoint DOM Updates with Signals in Lit\nDESCRIPTION: This example shows how to achieve pinpoint DOM updates using the watch directive from @lit-labs/signals in a Lit component. It demonstrates how to target individual bindings for updates, potentially improving performance by processing only bindings whose signal-backed values have changed.\nSOURCE: https://github.com/lit/lit.dev/blob/main/packages/lit-dev-content/site/blog/2024-10-08-signals.md#2025-04-09_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport {LitElement, html} from 'lit';\nimport {customElement} from 'lit/decorators.js';\nimport {SignalWatcher, watch, signal} from '@lit-labs/signals';\n\nconst count = signal(0);\n\n@customElement('pinpoint-counter')\nexport class PinpointCounter extends SignalWatcher(LitElement) {\n  render() {\n    return html`\n      <p>The count is ${watch(count)}</p>\n      <button @click=${this.increment}>Increment</button>\n    `;\n  }\n\n  increment() {\n    count.set(count.get() + 1);\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Typing Event Handlers in TypeScript with createComponent\nDESCRIPTION: This snippet demonstrates how to use TypeScript to properly type event handlers when using createComponent(). It uses the EventName utility type to provide accurate types for event callbacks.\nSOURCE: https://github.com/lit/lit.dev/blob/main/packages/lit-dev-content/site/docs/v3/frameworks/react.md#2025-04-09_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport React from 'react';\nimport {createComponent, type EventName} from '@lit/react';\nimport {MyElement, MyEvent} from './my-element.js';\n\nexport const MyElementComponent = createComponent({\n  tagName: 'my-element',\n  elementClass: MyElement,\n  react: React,\n  events: {\n    'onmy-event': 'my-event' as EventName<MyEvent>,\n  },\n});\n```\n\nLANGUAGE: tsx\nCODE:\n```\n<MyElementComponent\n  onmy-event={(e: MyEvent) => {\n    console.log(e.myEventData);\n  }}\n/>\n```\n\n----------------------------------------\n\nTITLE: Importing ContextConsumer from Lit Labs\nDESCRIPTION: Shows how to import the ContextConsumer class from the @lit-labs/context package.\nSOURCE: https://github.com/lit/lit.dev/blob/main/packages/lit-dev-content/site/docs/v2/data/context.md#2025-04-09_snippet_25\n\nLANGUAGE: ts\nCODE:\n```\nimport {ContextConsumer} from '@lit-labs/context';\n```\n\n----------------------------------------\n\nTITLE: Until Directive TypeScript Signature\nDESCRIPTION: Type definition for the until directive which accepts variable number of unknown type arguments.\nSOURCE: https://github.com/lit/lit.dev/blob/main/packages/lit-dev-content/site/docs/v2/templates/directives.md#2025-04-09_snippet_43\n\nLANGUAGE: typescript\nCODE:\n```\nuntil(...values: unknown[])\n```\n\n----------------------------------------\n\nTITLE: Importing when Directive in Lit\nDESCRIPTION: Shows how to import the when directive from the Lit library for conditional rendering.\nSOURCE: https://github.com/lit/lit.dev/blob/main/packages/lit-dev-content/site/docs/v3/templates/directives.md#2025-04-09_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\nimport {when} from 'lit/directives/when.js';\n```\n\n----------------------------------------\n\nTITLE: Importing Map Directive in Lit\nDESCRIPTION: Import statement for the map directive used for iterating over collections.\nSOURCE: https://github.com/lit/lit.dev/blob/main/packages/lit-dev-content/site/docs/v2/templates/directives.md#2025-04-09_snippet_11\n\nLANGUAGE: javascript\nCODE:\n```\nimport {map} from 'lit/directives/map.js';\n```\n\n----------------------------------------\n\nTITLE: AsyncAppend Directive Usage Example\nDESCRIPTION: Example demonstrating asyncAppend directive with an async generator for coin toss simulation.\nSOURCE: https://github.com/lit/lit.dev/blob/main/packages/lit-dev-content/site/docs/v2/templates/directives.md#2025-04-09_snippet_46\n\nLANGUAGE: typescript\nCODE:\n```\nasync function *tossCoins(count: number) {\n  for (let i=0; i<count; i++) {\n    yield Math.random() > 0.5 ? 'Heads' : 'Tails';\n    await new Promise((r) => setTimeout(r, 1000));\n  }\n}\n\n@customElement('my-element')\nclass MyElement extends LitElement {\n\n  @state()\n  private tosses = tossCoins(10);\n\n  render() {\n    return html`\n      <ul>${asyncAppend(this.tosses, (v: string) => html`<li>${v}</li>`)}</ul>`;\n  }\n}\n```\n\nLANGUAGE: javascript\nCODE:\n```\nasync function *tossCoins(count) {\n  for (let i=0; i<count; i++) {\n    yield Math.random() > 0.5 ? 'Heads' : 'Tails';\n    await new Promise((r) => setTimeout(r, 1000));\n  }\n}\n\nclass MyElement extends LitElement {\n  static properties = {\n    tosses: {state: true},\n  };\n\n  constructor() {\n    super();\n    this.tosses = tossCoins(10);\n  }\n\n  render() {\n    return html`\n      <ul>${asyncAppend(this.tosses, (v) => html`<li>${v}</li>`)}</ul>`;\n  }\n}\ncustomElements.define('my-element', MyElement);\n```\n\n----------------------------------------\n\nTITLE: createContext Function Signature\nDESCRIPTION: The signature of the createContext function which creates a typed Context object that can be used with the rest of the Context API.\nSOURCE: https://github.com/lit/lit.dev/blob/main/packages/lit-dev-content/site/docs/v2/data/context.md#2025-04-09_snippet_17\n\nLANGUAGE: ts\nCODE:\n```\nfunction createContext<ValueType, K = unknown>(key: K): Context<K, ValueType>;\n```\n\n----------------------------------------\n\nTITLE: Implementing updateSlots Method for Carousel Item Management\nDESCRIPTION: Method that handles the updating of slot assignments when carousel items change. It removes any current slot assignments and then assigns the appropriate elements to the 'previous' and 'selected' slots based on the current state.\nSOURCE: https://github.com/lit/lit.dev/blob/main/packages/lit-dev-content/site/tutorials/content/carousel/06.md#2025-04-09_snippet_1\n\nLANGUAGE: TypeScript\nCODE:\n```\nprivate updateSlots() {\n  // unset old slot state\n  this.selectedSlot.assignedElements()[0]?.removeAttribute('slot');\n  this.previousSlot.assignedElements()[0]?.removeAttribute('slot');\n  // set slots\n  this.children[this.previous]?.setAttribute('slot', 'previous');\n  this.children[this.selected]?.setAttribute('slot', 'selected');\n}\n```\n\nLANGUAGE: JavaScript\nCODE:\n```\nupdateSlots() {\n  // unset old slot state\n  this.selectedSlot.assignedElements()[0]?.removeAttribute('slot');\n  this.previousSlot.assignedElements()[0]?.removeAttribute('slot');\n  // set slots\n  this.children[this.previous]?.setAttribute('slot', 'previous');\n  this.children[this.selected]?.setAttribute('slot', 'selected');\n}\n```\n\n----------------------------------------\n\nTITLE: Adding Direction Toggle Method to Word Viewer\nDESCRIPTION: Implements a switchPlayDirection method that inverts the current playDirection by multiplying it by -1. This toggles between forward (1) and backward (-1) animation direction.\nSOURCE: https://github.com/lit/lit.dev/blob/main/packages/lit-dev-content/site/tutorials/content/word-viewer/06.md#2025-04-09_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\n// word-viewer.ts\n\n  switchPlayDirection() {\n    this.playDirection *= -1;\n  }\n```\n\nLANGUAGE: javascript\nCODE:\n```\n// word-viewer.js\n\n  switchPlayDirection() {\n    this.playDirection *= -1;\n  }\n```\n\n----------------------------------------\n\nTITLE: Applying CSS Templates to Lit Component\nDESCRIPTION: Shows how to apply multiple CSS templates to a Lit component using the static styles property.\nSOURCE: https://github.com/lit/lit.dev/blob/main/packages/lit-dev-content/site/tutorials/content/svg-templates/05.md#2025-04-09_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\n@customElement('repeat-pattern')\nexport class RepeatPattern extends LitElement {\n  static styles = [svgCSS, themeCSS];\n  ...\n}\n```\n\nLANGUAGE: javascript\nCODE:\n```\nexport class RepeatPattern extends LitElement {\n  static styles = [svgCSS, themeCSS];\n  ...\n}\ncustomElements.define('repeat-pattern', RepeatPattern);\n```\n\n----------------------------------------\n\nTITLE: SVG Theming with CSS Custom Properties\nDESCRIPTION: Demonstrates using CSS custom properties for theming SVG elements with fallback values.\nSOURCE: https://github.com/lit/lit.dev/blob/main/packages/lit-dev-content/site/tutorials/content/svg-templates/05.md#2025-04-09_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nconst helloCssCustomProperties = css`\n  .background {\n    fill: var(--background-color, #000000);\n  }\n`;\n```\n\n----------------------------------------\n\nTITLE: Adding Background Class to SVG Element\nDESCRIPTION: Demonstrates adding the background class to an SVG rect element within the component's render method.\nSOURCE: https://github.com/lit/lit.dev/blob/main/packages/lit-dev-content/site/tutorials/content/svg-templates/05.md#2025-04-09_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\nexport class RepeatPattern extends LitElement {\n  ...\n  render() {\n    return html`\n      <svg height=\"100%\" width=\"100%\">\n        ...\n        <rect class=\"background\"></rect>\n        ...\n      </svg>\n    `;\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Attribute Reflection Configuration\nDESCRIPTION: Example of enabling attribute reflection for a property in Lit.\nSOURCE: https://github.com/lit/lit.dev/blob/main/packages/lit-dev-content/site/docs/v2/components/properties.md#2025-04-09_snippet_18\n\nLANGUAGE: javascript\nCODE:\n```\n// Value of property \"active\" will reflect to attribute \"active\"\nactive: {reflect: true}\n```\n\n----------------------------------------\n\nTITLE: Updating standalone lit-html imports\nDESCRIPTION: Example showing how to update imports when using lit-html standalone, outside of LitElement.\nSOURCE: https://github.com/lit/lit.dev/blob/main/packages/lit-dev-content/site/docs/v2/releases/upgrade.md#2025-04-09_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nimport {render, html} from 'lit-html';\n```\n\nLANGUAGE: javascript\nCODE:\n```\nimport {render, html} from 'lit/html.js';\n```\n\n----------------------------------------\n\nTITLE: Creating and Comparing Context Keys\nDESCRIPTION: Examples showing how context equality works with different types of keys, including string, Symbol.for(), Symbol(), and objects.\nSOURCE: https://github.com/lit/lit.dev/blob/main/packages/lit-dev-content/site/docs/v2/data/context.md#2025-04-09_snippet_18\n\nLANGUAGE: ts\nCODE:\n```\n// true\ncreateContext('my-context') === createContext('my-context')\n// true\ncreateContext(Symbol.for('my-context')) === createContext(Symbol.for('my-context'))\n\n// false\ncreateContext(Symbol('my-context')) === createContext(Symbol('my-context'))\n// false\ncreateContext({}) === createContext({})\n```\n\n----------------------------------------\n\nTITLE: Importing asyncAppend Directive\nDESCRIPTION: Import statement for the asyncAppend directive from Lit library.\nSOURCE: https://github.com/lit/lit.dev/blob/main/packages/lit-dev-content/site/docs/v2/templates/directives.md#2025-04-09_snippet_45\n\nLANGUAGE: javascript\nCODE:\n```\nimport {asyncAppend} from 'lit/directives/async-append.js';\n```\n\n----------------------------------------\n\nTITLE: Importing join Directive in JavaScript\nDESCRIPTION: Shows how to import the join directive from the Lit library.\nSOURCE: https://github.com/lit/lit.dev/blob/main/packages/lit-dev-content/site/docs/v3/templates/directives.md#2025-04-09_snippet_15\n\nLANGUAGE: javascript\nCODE:\n```\nimport {join} from 'lit/directives/join.js';\n```\n\n----------------------------------------\n\nTITLE: Using ref() Directive for Element References in Lit\nDESCRIPTION: Demonstrates the ref() directive as an alternative method to get element references when @query can't be used or when you need to run code when the referenced element changes.\nSOURCE: https://github.com/lit/lit.dev/blob/main/packages/lit-dev-content/site/articles/article/lit-cheat-sheet.md#2025-04-09_snippet_40\n\nLANGUAGE: typescript\nCODE:\n```\n{% playground-ide \"articles/lit-cheat-sheet/dom-ref\", true %}\n```\n\n----------------------------------------\n\nTITLE: Rendering a lit-html template\nDESCRIPTION: Complete example demonstrating how to import lit-html, define a template function, and render it to the document body.\nSOURCE: https://github.com/lit/lit.dev/blob/main/packages/lit-dev-content/site/docs/v1/lit-html/getting-started.md#2025-04-09_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\n// Import lit-html\nimport {html, render} from 'lit-html';\n\n// Define a template\nconst myTemplate = (name) => html`<p>Hello ${name}</p>`;\n\n// Render the template to the document\nrender(myTemplate('World'), document.body);\n```\n\n----------------------------------------\n\nTITLE: Implementing Static Expressions in Lit Component (TypeScript)\nDESCRIPTION: Example of a Lit component using static expressions for tag names and attributes. The static values are defined using the literal tag function and used in the template.\nSOURCE: https://github.com/lit/lit.dev/blob/main/packages/lit-dev-content/site/docs/v3/templates/expressions.md#2025-04-09_snippet_20\n\nLANGUAGE: typescript\nCODE:\n```\nimport {LitElement} from 'lit';\nimport {customElement, property} from 'lit/decorators.js';\nimport {html, literal} from 'lit/static-html.js';\n\n@customElement('my-button')\nclass MyButton extends LitElement {\n  tag = literal`button`;\n  activeAttribute = literal`active`;\n  @property() caption = 'Hello static';\n  @property({type: Boolean}) active = false;\n\n  render() {\n    return html`\n      <${this.tag} ${this.activeAttribute}=${this.active}>\n        <p>${this.caption}</p>\n      </${this.tag}>`;\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Decorator Import Example\nDESCRIPTION: Shows how to import decorators from the lit-element module.\nSOURCE: https://github.com/lit/lit.dev/blob/main/packages/lit-dev-content/site/docs/v1/components/decorators.md#2025-04-09_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\nimport {eventOptions} from 'lit-element';\n```\n\n----------------------------------------\n\nTITLE: Using static addInitializer with TypeScript and JavaScript Decorators\nDESCRIPTION: Examples of how to use addInitializer in decorators to run code when component instances are created, demonstrated for both TypeScript decorators and Babel Stage 2 decorators.\nSOURCE: https://github.com/lit/lit.dev/blob/main/packages/lit-dev-content/site/docs/v2/components/lifecycle.md#2025-04-09_snippet_16\n\nLANGUAGE: typescript\nCODE:\n```\n// A TypeScript decorator\nconst myDecorator = (proto: ReactiveElement, key: string) => {\n  const ctor = proto.constructor as typeof ReactiveElement;\n\n  ctor.addInitializer((instance: ReactiveElement) => {\n    // This is run during construction of the element\n    new MyController(instance);\n  });\n};\n```\n\nLANGUAGE: javascript\nCODE:\n```\n// A Babel \"Stage 2\" decorator\nconst myDecorator = (descriptor) => {\n  ...descriptor,\n  finisher(ctor) {\n    ctor.addInitializer((instance) => {\n      // This is run during construction of the element\n      new MyController(instance);\n    });\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: Creating a localizable Lit component in JavaScript\nDESCRIPTION: A JavaScript example showing how to create a Lit component with localizable content using the msg function for localization.\nSOURCE: https://github.com/lit/lit.dev/blob/main/packages/lit-dev-content/site/docs/v2/localization/overview.md#2025-04-09_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nimport {html, LitElement} from 'lit';\nimport {msg} from '@lit/localize';\n\nclass MyGreeter extends LitElement {\n  static properties = {\n    who: {},\n  };\n\n  constructor() {\n    super();\n    this.who = 'World';\n  }\n\n  render() {\n    return msg(html`Hello <b>${this.who}</b>`);\n  }\n}\ncustomElements.define('my-greeter', MyGreeter);\n```\n\n----------------------------------------\n\nTITLE: Incorrect Slot Usage in HTML (HTML)\nDESCRIPTION: Shows the HTML markup that corresponds to the incorrect slot usage example. This will not place the content in the intended slot.\nSOURCE: https://github.com/lit/lit.dev/blob/main/packages/lit-dev-content/site/docs/v1/components/templates.md#2025-04-09_snippet_8\n\nLANGUAGE: html\nCODE:\n```\n<my-element>\n  <p slot=\"one\">nope.</p>\n  <p>ohai..</p>\n</my-element>\n```\n\n----------------------------------------\n\nTITLE: Importing styleMap Directive in Lit\nDESCRIPTION: Demonstrates how to import the styleMap directive from the Lit library.\nSOURCE: https://github.com/lit/lit.dev/blob/main/packages/lit-dev-content/site/docs/v3/templates/directives.md#2025-04-09_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nimport {styleMap} from 'lit/directives/style-map.js';\n```\n\n----------------------------------------\n\nTITLE: Basic LitElement Component with Decorators\nDESCRIPTION: Demonstrates a basic component definition using @customElement and @property decorators to create a custom element with a reactive property.\nSOURCE: https://github.com/lit/lit.dev/blob/main/packages/lit-dev-content/site/docs/v1/components/decorators.md#2025-04-09_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport {LitElement, html, customElement, property} from 'lit-element';\n\n@customElement('my-element')\nclass MyElement extends LitElement {\n\n // Declare observed properties\n @property()\n adjective = 'awesome';\n\n // Define the element's template\n render() {\n   return html`<p>your ${this.adjective} template here</p>`;\n }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Static Imports for Lit Localization in JavaScript\nDESCRIPTION: Demonstrates how to set up static imports for locale templates in a Lit application. This code configures localization by importing locale templates directly and creating a map for locale loading. Note that this approach blocks script execution and should be used only for small applications or when dynamic imports aren't feasible.\nSOURCE: https://github.com/lit/lit.dev/blob/main/packages/lit-dev-content/site/docs/v2/localization/runtime-mode.md#2025-04-09_snippet_8\n\nLANGUAGE: javascript\nCODE:\n```\nimport {configureLocalization} from '@lit/localize';\nimport {sourceLocale, targetLocales} from './generated/locales.js';\n\nimport * as templates_es_419 from './locales/es-419.js';\nimport * as templates_zh_hans from './locales/zh-Hans.js';\n...\n\nconst localizedTemplates = new Map([\n  ['es-419', templates_es_419],\n  ['zh-Hans', templates_zh_hans],\n  ...\n]);\n\nconst {getLocale, setLocale} = configureLocalization({\n  sourceLocale,\n  targetLocales,\n  loadLocale: async (locale) => localizedTemplates.get(locale),\n});\n```\n\n----------------------------------------\n\nTITLE: Updating decorator imports in Lit 2.0\nDESCRIPTION: Example showing how to update TypeScript decorator imports from the main module to the dedicated decorators module.\nSOURCE: https://github.com/lit/lit.dev/blob/main/packages/lit-dev-content/site/docs/v2/releases/upgrade.md#2025-04-09_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nimport {property, customElement} from 'lit-element';\n```\n\nLANGUAGE: javascript\nCODE:\n```\nimport {property, customElement} from 'lit/decorators.js';\n```\n\n----------------------------------------\n\nTITLE: Installing Lit Starter Kit Dependencies\nDESCRIPTION: Command to install required npm dependencies after downloading the starter project\nSOURCE: https://github.com/lit/lit.dev/blob/main/packages/lit-dev-content/site/docs/v3/tools/starter-kits.md#2025-04-09_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ncd <project folder>\nnpm i\n```\n\n----------------------------------------\n\nTITLE: Installing lit-html with npm\nDESCRIPTION: Command to install the standalone lit-html package via npm. This allows using lit-html's templating functionality without the full Lit component model.\nSOURCE: https://github.com/lit/lit.dev/blob/main/packages/lit-dev-content/site/docs/v3/libraries/standalone-templates.md#2025-04-09_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\nnpm install lit-html\n```\n\n----------------------------------------\n\nTITLE: Installing LitElement Package\nDESCRIPTION: Command to install LitElement from npm in an existing project.\nSOURCE: https://github.com/lit/lit.dev/blob/main/packages/lit-dev-content/site/docs/v1/getting-started.md#2025-04-09_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\nnpm i lit-element\n```\n\n----------------------------------------\n\nTITLE: Importing asyncReplace Directive\nDESCRIPTION: Import statement for the asyncReplace directive from Lit library.\nSOURCE: https://github.com/lit/lit.dev/blob/main/packages/lit-dev-content/site/docs/v2/templates/directives.md#2025-04-09_snippet_47\n\nLANGUAGE: javascript\nCODE:\n```\nimport {asyncReplace} from 'lit/directives/async-replace.js';\n```\n\n----------------------------------------\n\nTITLE: Importing Live Directive in Lit\nDESCRIPTION: Shows how to import the live directive from Lit library.\nSOURCE: https://github.com/lit/lit.dev/blob/main/packages/lit-dev-content/site/docs/v3/templates/directives.md#2025-04-09_snippet_31\n\nLANGUAGE: javascript\nCODE:\n```\nimport {live} from 'lit/directives/live.js';\n```\n\n----------------------------------------\n\nTITLE: Using @queryAsync Decorator in Lit Components\nDESCRIPTION: Demonstrates how to use the @queryAsync decorator to access element references after an update is complete. This technique is useful for accessing elements that are rendered asynchronously due to state changes in the component.\nSOURCE: https://github.com/lit/lit.dev/blob/main/packages/lit-dev-content/site/articles/article/lit-cheat-sheet.md#2025-04-09_snippet_41\n\nLANGUAGE: typescript\nCODE:\n```\n// See playground: articles/lit-cheat-sheet/dom-query-async\n```\n\n----------------------------------------\n\nTITLE: Using templateContent in Lit Component\nDESCRIPTION: Example showing how to use templateContent directive in a Lit component to render content from a template element.\nSOURCE: https://github.com/lit/lit.dev/blob/main/packages/lit-dev-content/site/docs/v3/templates/directives.md#2025-04-09_snippet_36\n\nLANGUAGE: typescript\nCODE:\n```\nconst templateEl = document.querySelector('template#myContent') as HTMLTemplateElement;\n\n@customElement('my-element')\nclass MyElement extends LitElement {\n\n  render() {\n    return  html`\n      Here's some content from a template element:\n      ${templateContent(templateEl)}`;\n  }\n}\n```\n\nLANGUAGE: javascript\nCODE:\n```\nconst templateEl = document.querySelector('template#myContent');\n\nclass MyElement extends LitElement {\n\n  render() {\n    return  html`\n      Here's some content from a template element:\n      ${templateContent(templateEl)}`;\n  }\n}\ncustomElements.define('my-element', MyElement);\n```\n\n----------------------------------------\n\nTITLE: Using Nested CSS Expressions in LitElement Styles\nDESCRIPTION: Shows how to use nested CSS expressions in LitElement static styles, which are only allowed if they are themselves css tagged strings or numbers.\nSOURCE: https://github.com/lit/lit.dev/blob/main/packages/lit-dev-content/site/docs/v1/components/styles.md#2025-04-09_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\n{% include \"v1-projects/style/nestedcss/my-element.js\" %}\n```\n\n----------------------------------------\n\nTITLE: Implementing Lit Template Render Method\nDESCRIPTION: Implementation of a render() method using Lit's html tagged template literal to define component structure and styling. Includes dynamic rating display and SVG buttons.\nSOURCE: https://github.com/lit/lit.dev/blob/main/packages/lit-dev-content/site/tutorials/content/wc-to-lit/09.md#2025-04-09_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\n// Don't forget to import from Lit!\nimport {render, html} from 'lit';\n\nexport class RatingElement extends HTMLElement {\n  ...\n  render() {\n    if (!this.shadowRoot) {\n      return;\n    }\n\n    const template = html`\n      <style>\n        :host {\n          display: inline-flex;\n          align-items: center;\n        }\n        button {\n          background: transparent;\n          border: none;\n          cursor: pointer;\n        }\n\n       :host([vote=up]) .thumb_up {\n         fill: green;\n       }\n\n       :host([vote=down]) .thumb_down {\n         fill: red;\n       }\n      </style>\n      <button class=\"thumb_down\">\n        <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24\" viewbox=\"0 0 24 24\" width=\"24\"><path d=\"M15 3H6c-.83 0-1.54.5-1.84 1.22l-3.02 7.05c-.09.23-.14.47-.14.73v2c0 1.1.9 2 2 2h6.31l-.95 4.57-.03.32c0 .41.17.79.44 1.06L9.83 23l6.59-6.59c.36-.36.58-.86.58-1.41V5c0-1.1-.9-2-2-2zm4 0v12h4V3h-4z\"/></svg>\n      </button>\n      <span class=\"rating\">${this.rating}</span>\n      <button class=\"thumb_up\">\n        <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24\" viewbox=\"0 0 24 24\" width=\"24\"><path d=\"M1 21h4V9H1v12zm22-11c0-1.1-.9-2-2-2h-6.31l.95-4.57.03-.32c0-.41-.17-.79-.44-1.06L14.17 1 7.59 7.59C7.22 7.95 7 8.45 7 9v10c0 1.1.9 2 2 2h9c.83 0 1.54-.5 1.84-1.22l3.02-7.05c.09-.23.14-.47.14-.73v-2z\"/></svg>\n      </button>`;\n\n    render(template, this.shadowRoot);\n  }\n```\n\n----------------------------------------\n\nTITLE: Adding the animate directive to the indicator element\nDESCRIPTION: Applies the animate directive to the indicator element to smoothly animate its position when the selected carousel item changes.\nSOURCE: https://github.com/lit/lit.dev/blob/main/packages/lit-dev-content/site/tutorials/content/carousel/08.md#2025-04-09_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\n  <div class=\"indicator\"\n    ${animate()}\n```\n\n----------------------------------------\n\nTITLE: Configuring Rollup.js for Lit Template Compilation\nDESCRIPTION: Shows how to set up a Rollup.js configuration file to use the @lit-labs/compiler TypeScript transformer for compiling Lit templates at build time.\nSOURCE: https://github.com/lit/lit.dev/blob/main/packages/lit-dev-content/site/blog/2023-10-10-lit-3.0.md#2025-04-09_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\n// File: rollup.config.js\nimport typescript from '@rollup/plugin-typescript';\nimport {compileLitTemplates} from '@lit-labs/compiler';\n\nexport default {\n  // ...\n  plugins: [\n    typescript({\n      transformers: {\n        before: [compileLitTemplates()],\n      },\n    }),\n    // other rollup plugins\n  ],\n};\n```\n\n----------------------------------------\n\nTITLE: Array Handling in lit-html Attribute Bindings\nDESCRIPTION: Demonstration of the change in how arrays are handled in attribute bindings, showing both old and new behavior.\nSOURCE: https://github.com/lit/lit.dev/blob/main/packages/lit-dev-content/site/docs/v2/releases/upgrade.md#2025-04-09_snippet_10\n\nLANGUAGE: javascript\nCODE:\n```\n// Old behavior\nhtml`<div class=${['a', 'b']}></div>` // rendered as: <div class=\"a b\">\n\n// New behavior\nhtml`<div class=${['a', 'b']}></div>` // renders as: <div class=\"a,b\">\n\n// New recommended way\nhtml`<div class=${['a', 'b'].join(' ')}></div>` // renders as: <div class=\"a b\">\n```\n\n----------------------------------------\n\nTITLE: Creating an Observable Array with SignalArray in TypeScript\nDESCRIPTION: This snippet demonstrates how to create an observable array using SignalArray from the signal-utils package. The resulting array will track signal access and notify watchers on mutations.\nSOURCE: https://github.com/lit/lit.dev/blob/main/packages/lit-dev-content/site/docs/v3/data/signals.md#2025-04-09_snippet_8\n\nLANGUAGE: ts\nCODE:\n```\nimport {SignalArray} from 'signal-utils/array';\n\nconst numbers = new SignalArray([1, 2, 3]);\n```\n\n----------------------------------------\n\nTITLE: Implementing Lifecycle Callbacks for Word Cycling in Lit Component (JavaScript)\nDESCRIPTION: This snippet demonstrates how to use connectedCallback and disconnectedCallback to set up and clean up an interval for cycling words in JavaScript. It uses setInterval to call tickToNextWord every second.\nSOURCE: https://github.com/lit/lit.dev/blob/main/packages/lit-dev-content/site/tutorials/content/word-viewer/04.md#2025-04-09_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\n// word-viewer.js\n\n  intervalTimer;\n\n  connectedCallback() {\n    super.connectedCallback();\n    this.intervalTimer = setInterval(this.tickToNextWord, 1000);\n  }\n\n  disconnectedCallback() {\n    super.disconnectedCallback();\n    clearInterval(this.intervalTimer);\n    this.intervalTimer = undefined;\n  }\n```\n\n----------------------------------------\n\nTITLE: Adding Event Listeners in lit-html Templates\nDESCRIPTION: Demonstrates how to add declarative event listeners in lit-html templates using the @ prefix. Shows examples of using both function handlers and event listener objects with handleEvent method.\nSOURCE: https://github.com/lit/lit.dev/blob/main/packages/lit-dev-content/site/docs/v1/lit-html/writing-templates.md#2025-04-09_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nconst myTemplate = () => html`<button @click=${clickHandler}>Click Me!</button>`;\n```\n\nLANGUAGE: javascript\nCODE:\n```\nconst clickHandler = {\n  // handleEvent method is required.\n  handleEvent(e) {\n    console.log('clicked!');\n  },\n  // event listener objects can also define zero or more of the event\n  // listener options: capture, passive, and once.\n  capture: true,\n};\n```\n\n----------------------------------------\n\nTITLE: Using LitElement's Default Converter for Properties\nDESCRIPTION: Demonstrates how to use LitElement's built-in converter for String, Number, Boolean, Array, and Object property types.\nSOURCE: https://github.com/lit/lit.dev/blob/main/packages/lit-dev-content/site/docs/v1/components/properties.md#2025-04-09_snippet_4\n\nLANGUAGE: JavaScript\nCODE:\n```\n// Use LitElement's default converter\nprop1: { type: String },\nprop2: { type: Number },\nprop3: { type: Boolean },\nprop4: { type: Array },\nprop5: { type: Object }\n```\n\n----------------------------------------\n\nTITLE: Building TypeScript Project\nDESCRIPTION: Commands for building and watching TypeScript files in development.\nSOURCE: https://github.com/lit/lit.dev/blob/main/packages/lit-dev-content/site/docs/v1/getting-started.md#2025-04-09_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nnpm run build\nnpm run build:watch\n```\n\n----------------------------------------\n\nTITLE: Using templateContent Directive in Lit-html\nDESCRIPTION: Demonstrates how to render content from a template element as HTML using the templateContent directive. Note: Should only be used with developer-controlled templates.\nSOURCE: https://github.com/lit/lit.dev/blob/main/packages/lit-dev-content/site/docs/v1/lit-html/template-reference.md#2025-04-09_snippet_14\n\nLANGUAGE: javascript\nCODE:\n```\nimport {templateContent} from 'lit-html/directives/template-content';\n\nconst templateEl = document.querySelector('template#myContent');\n\nconst template = html`\n  Here's some content from a template element:\n\n  ${templateContent(templateEl)}`;\n```\n\n----------------------------------------\n\nTITLE: TypeScript Signature for unsafeSVG\nDESCRIPTION: Type definition for the unsafeSVG directive function.\nSOURCE: https://github.com/lit/lit.dev/blob/main/packages/lit-dev-content/site/docs/v3/templates/directives.md#2025-04-09_snippet_41\n\nLANGUAGE: typescript\nCODE:\n```\nunsafeSVG(value: string | typeof nothing | typeof noChange)\n```\n\n----------------------------------------\n\nTITLE: DOM Query Implementation in JavaScript\nDESCRIPTION: Shows the JavaScript equivalent of the @query decorator, implementing a getter to select an element from the component's internal DOM.\nSOURCE: https://github.com/lit/lit.dev/blob/main/packages/lit-dev-content/site/tutorials/content/intro-to-lit/05.md#2025-04-09_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nget input() {\n  return this.renderRoot?.querySelector('#newitem') ?? null;\n}\n```\n\n----------------------------------------\n\nTITLE: Adding Click Event Handler to Carousel Template\nDESCRIPTION: Adds a click event handler to the carousel's div element using Lit's @click binding syntax.\nSOURCE: https://github.com/lit/lit.dev/blob/main/packages/lit-dev-content/site/tutorials/content/carousel/04.md#2025-04-09_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n  return html`\n    <div class=\"fit\" @click=${this.clickHandler}>\n\n```\n\n----------------------------------------\n\nTITLE: Async Result Collection\nDESCRIPTION: Example of using collectResult to asynchronously gather SSR output into a string.\nSOURCE: https://github.com/lit/lit.dev/blob/main/packages/lit-dev-content/site/docs/v3/ssr/server-usage.md#2025-04-09_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nimport {render} from '@lit-labs/ssr';\nimport {collectResult} from '@lit-labs/ssr/lib/render-result.js';\nimport {html} from 'lit';\n\nconst result = render(html`<my-element></my-element>`);\nconst contents = await collectResult(result);\n```\n\n----------------------------------------\n\nTITLE: Placeholder Comment for Section Heading in Eleventy Build Process\nDESCRIPTION: This HTML comment explains that the file exists only to create a section heading and its output is deleted by the Eleventy build process. It serves as a placeholder and provides information for developers working on the documentation.\nSOURCE: https://github.com/lit/lit.dev/blob/main/packages/lit-dev-content/site/docs/v1/api/lit-html/index.md#2025-04-09_snippet_1\n\nLANGUAGE: html\nCODE:\n```\n<!-- This file exists only to create a section heading.\n     Its output is deleted by the Eleventy build process. -->\n```\n\n----------------------------------------\n\nTITLE: Using a Typed Lit Component in TypeScript\nDESCRIPTION: This snippet demonstrates how to use a Lit component with proper TypeScript typings. It shows creating an instance of the custom element and setting a property with type checking.\nSOURCE: https://github.com/lit/lit.dev/blob/main/packages/lit-dev-content/site/docs/v3/components/defining.md#2025-04-09_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nconst myElement = document.createElement('my-element');\nmyElement.aNumber = 10;\n```\n\n----------------------------------------\n\nTITLE: TypeScript Decorator Configuration\nDESCRIPTION: TypeScript compiler configuration for enabling decorator support.\nSOURCE: https://github.com/lit/lit.dev/blob/main/packages/lit-dev-content/site/docs/v1/components/decorators.md#2025-04-09_snippet_4\n\nLANGUAGE: json\nCODE:\n```\n\"experimentalDecorators\": true,\n```\n\n----------------------------------------\n\nTITLE: Installing Rollup Alias Plugin\nDESCRIPTION: Command to install the Rollup alias plugin for replacing shady-render module references.\nSOURCE: https://github.com/lit/lit.dev/blob/main/packages/lit-dev-content/site/docs/v1/tools/build.md#2025-04-09_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\nnpm i -D @rollup/plugin-alias\n```\n\n----------------------------------------\n\nTITLE: Adding Message Descriptions in JavaScript\nDESCRIPTION: Illustrates how to add human-readable descriptions to messages using the desc option. These descriptions help translators understand the context and meaning of the messages.\nSOURCE: https://github.com/lit/lit.dev/blob/main/packages/lit-dev-content/site/docs/v2/localization/overview.md#2025-04-09_snippet_19\n\nLANGUAGE: js\nCODE:\n```\nrender() {\n  return html`<button>\n    ${msg(\"Launch\", {\n      desc: \"Button that begins rocket launch sequence.\",\n    })}\n  </button>`;\n}\n```\n\n----------------------------------------\n\nTITLE: Generated Locale Codes Module Structure\nDESCRIPTION: Example of a generated module that exports locale code constants reflecting the configuration settings. This module is referenced by the application code.\nSOURCE: https://github.com/lit/lit.dev/blob/main/packages/lit-dev-content/site/docs/v2/localization/runtime-mode.md#2025-04-09_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nexport const sourceLocale = 'en';\nexport const targetLocales = ['es-419', 'zh-Hans'];\nexport const allLocales = ['en', 'es-419', 'zh-Hans'];\n```\n\n----------------------------------------\n\nTITLE: Provider Decorator Import\nDESCRIPTION: Import statement for the provide decorator from @lit/context package.\nSOURCE: https://github.com/lit/lit.dev/blob/main/packages/lit-dev-content/site/docs/v3/data/context.md#2025-04-09_snippet_9\n\nLANGUAGE: typescript\nCODE:\n```\nimport {provide} from '@lit/context';\n```\n\n----------------------------------------\n\nTITLE: Using Lit Localize CLI Command Syntax\nDESCRIPTION: The basic command syntax for the lit-localize CLI tool, which is used to extract messages and build localized versions of your application.\nSOURCE: https://github.com/lit/lit.dev/blob/main/packages/lit-dev-content/site/docs/v3/localization/cli-and-config.md#2025-04-09_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\nlit-localize command [--flags]\n```\n\n----------------------------------------\n\nTITLE: Customizing Event Options with Decorators in Lit\nDESCRIPTION: Demonstrates how to use the @eventOptions decorator to customize event listener options like passive and capture flags.\nSOURCE: https://github.com/lit/lit.dev/blob/main/packages/lit-dev-content/site/docs/v2/components/events.md#2025-04-09_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport {LitElement, html} from 'lit';\nimport {eventOptions} from 'lit/decorators.js';\n//...\n@eventOptions({passive: true})\nprivate _handleTouchStart(e) { console.log(e.type) }\n```\n\n----------------------------------------\n\nTITLE: Installing Rollup Dependencies with NPM\nDESCRIPTION: Commands to install the required Node.js modules for building a Lit application with Rollup, including plugins for HTML processing, minification, and asset copying.\nSOURCE: https://github.com/lit/lit.dev/blob/main/packages/lit-dev-content/site/docs/v3/tools/production.md#2025-04-09_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nnpm i --save-dev rollup \\\n  @web/rollup-plugin-html \\\n  @web/rollup-plugin-copy \\\n  @rollup/plugin-node-resolve \\\n  @rollup/plugin-terser \\\n  rollup-plugin-minify-html-literals \\\n  rollup-plugin-summary\n```\n\n----------------------------------------\n\nTITLE: TypeScript Configuration for Modern JavaScript Output\nDESCRIPTION: TypeScript compiler configuration to output modern JavaScript (ES2017) and ES modules.\nSOURCE: https://github.com/lit/lit.dev/blob/main/packages/lit-dev-content/site/docs/v1/tools/build.md#2025-04-09_snippet_10\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"compilerOptions\": {\n    \"target\": \"es2017\",\n    \"module\": \"es2015\",\n    ...\n}\n```\n\n----------------------------------------\n\nTITLE: Binding to Properties in lit-html\nDESCRIPTION: Shows how to bind to JavaScript properties using the dot (.) prefix in lit-html templates. This is useful for passing complex data to elements or components and preserves property name case.\nSOURCE: https://github.com/lit/lit.dev/blob/main/packages/lit-dev-content/site/docs/v1/lit-html/writing-templates.md#2025-04-09_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nconst myTemplate3 = (data) => html`<input .value=${data.value}></input>`;\n```\n\nLANGUAGE: javascript\nCODE:\n```\nconst myTemplate4 = (data) => html`<my-list .listItems=${data.items}></my-list>`;\n```\n\n----------------------------------------\n\nTITLE: Using a Controller with a Directive in JavaScript\nDESCRIPTION: Demonstrates how to use a controller with a directive in a Lit component using JavaScript. This example uses a ResizeController to observe and report the size of a textarea element.\nSOURCE: https://github.com/lit/lit.dev/blob/main/packages/lit-dev-content/site/docs/v3/composition/controllers.md#2025-04-09_snippet_9\n\nLANGUAGE: javascript\nCODE:\n```\nclass MyElement extends LitElement {\n  _textSize = new ResizeController(this);\n\n  render() {\n    return html`\n      <textarea ${this._textSize.observe()}></textarea>\n      <p>The width is ${this._textSize.contentRect?.width}</p>\n    `;\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Caching Template Results with Cache Directive in Lit\nDESCRIPTION: Demonstrates how to use the cache directive to optimize rendering performance when switching between large templates.\nSOURCE: https://github.com/lit/lit.dev/blob/main/packages/lit-dev-content/site/docs/v1/lit-html/writing-templates.md#2025-04-09_snippet_17\n\nLANGUAGE: js\nCODE:\n```\nimport {html} from 'lit-html';\nimport {cache} from 'lit-html/directives/cache.js';\n\nconst detailView = (data) => html`<div>...</div>`;\nconst summaryView = (data) => html`<div>...</div>`;\n\nhtml`${cache(data.showDetails\n  ? detailView(data)\n  : summaryView(data)\n)}`\n```\n\n----------------------------------------\n\nTITLE: Configuring Babel to Exclude node_modules from Compilation\nDESCRIPTION: Example configuration for Rollup Babel plugin that excludes the node_modules folder from JavaScript compilation, which needs to be modified when working with Lit.\nSOURCE: https://github.com/lit/lit.dev/blob/main/packages/lit-dev-content/site/docs/v2/tools/requirements.md#2025-04-09_snippet_1\n\nLANGUAGE: js\nCODE:\n```\nexclude: [ 'node_modules/**' ]\n```\n\n----------------------------------------\n\nTITLE: Integrating Pattern in SVG Definitions\nDESCRIPTION: Shows how to include the pattern definition in the SVG's defs section using Lit's render method.\nSOURCE: https://github.com/lit/lit.dev/blob/main/packages/lit-dev-content/site/tutorials/content/svg-templates/04.md#2025-04-09_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nrender() {\n  return html`\n    <svg height=\"100%\" width=\"100%\">\n      <defs>\n        ...\n        ${createRepeatPattern()}\n      </defs>\n    </svg>\n  `;\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Eleventy Navigation for Lit Templates\nDESCRIPTION: This YAML frontmatter configures the Eleventy static site generator's navigation for the Lit templates section. It sets the title, navigation key, and order.\nSOURCE: https://github.com/lit/lit.dev/blob/main/packages/lit-dev-content/site/docs/v2/templates/index.md#2025-04-09_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n---\ntitle: Templates\neleventyNavigation:\n  key: Templates\n  order: 3\n---\n```\n\n----------------------------------------\n\nTITLE: Adding Lit Event Listeners to HTML Buttons\nDESCRIPTION: This snippet demonstrates how to add click event listeners to buttons using Lit's @click syntax. It updates the 'vote' property when buttons are clicked.\nSOURCE: https://github.com/lit/lit.dev/blob/main/packages/lit-dev-content/site/tutorials/content/wc-to-lit/10.md#2025-04-09_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<button\n    class=\"thumb_down\"\n    @click=${() => {this.vote = 'down'}}>\n...\n<button\n    class=\"thumb_up\"\n    @click=${() => {this.vote = 'up'}}>\n```\n\n----------------------------------------\n\nTITLE: Importing LitElement Component in JavaScript Module\nDESCRIPTION: Example of importing a LitElement component in a JavaScript module.\nSOURCE: https://github.com/lit/lit.dev/blob/main/packages/lit-dev-content/site/docs/v1/tools/use.md#2025-04-09_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport 'some-package-name';\n```\n\n----------------------------------------\n\nTITLE: Defining Custom Element Class in TypeScript/JavaScript\nDESCRIPTION: This snippet shows how to define a custom element class that extends HTMLElement and register it with the browser using customElements.define(). The custom element is named 'rating-element'.\nSOURCE: https://github.com/lit/lit.dev/blob/main/packages/lit-dev-content/site/tutorials/content/wc-to-lit/01.md#2025-04-09_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nclass RatingElement extends HTMLElement {}\n\ncustomElements.define('rating-element', RatingElement);\n```\n\nLANGUAGE: javascript\nCODE:\n```\nclass RatingElement extends HTMLElement {}\n\ncustomElements.define('rating-element', RatingElement);\n```\n\n----------------------------------------\n\nTITLE: Installing Lit Context Package\nDESCRIPTION: Instructions for installing the @lit/context package via npm\nSOURCE: https://github.com/lit/lit.dev/blob/main/packages/lit-dev-content/site/docs/v3/data/context.md#2025-04-09_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm i @lit/context\n```\n\n----------------------------------------\n\nTITLE: Attribute Logger Directive Implementation\nDESCRIPTION: Example of a directive that accesses DOM directly to log attribute names of the parent element.\nSOURCE: https://github.com/lit/lit.dev/blob/main/packages/lit-dev-content/site/docs/v3/templates/custom-directives.md#2025-04-09_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\n// Renders attribute names of parent element to textContent\nclass AttributeLogger extends Directive {\n  attributeNames = '';\n  update(part: ChildPart) {\n    this.attributeNames = (part.parentNode as Element).getAttributeNames?.().join(' ');\n    return this.render();\n  }\n  render() {\n    return this.attributeNames;\n  }\n}\nconst attributeLogger = directive(AttributeLogger);\n\nconst template = html`<div a b>${attributeLogger()}</div>`;\n// Renders: `<div a b>a b</div>`\n```\n\nLANGUAGE: javascript\nCODE:\n```\n// Renders attribute names of parent element to textContent\nclass AttributeLogger extends Directive {\n  attributeNames = '';\n  update(part) {\n    this.attributeNames = part.parentNode.getAttributeNames?.().join(' ');\n    return this.render();\n  }\n  render() {\n    return this.attributeNames;\n  }\n}\nconst attributeLogger = directive(AttributeLogger);\n\nconst template = html`<div a b>${attributeLogger()}</div>`;\n// Renders: `<div a b>a b</div>`\n```\n\n----------------------------------------\n\nTITLE: Implementing Robust Tooltip Positioning with Floating-UI in TypeScript\nDESCRIPTION: This code demonstrates how to use Floating-UI to position a tooltip robustly. It uses the computePosition function with various middleware options to handle different positioning scenarios and constraints.\nSOURCE: https://github.com/lit/lit.dev/blob/main/packages/lit-dev-content/site/tutorials/content/tooltip/05.md#2025-04-09_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nshow = () => {\n  this.style.cssText = '';\n  // Robust positioning\n  computePosition(this.target, this, {\n    strategy: 'fixed',\n    middleware: [\n      offset(this.offset),\n      shift(),\n      autoPlacement({allowedPlacements: ['top', 'bottom']})\n    ],\n  }).then(({x, y}: {x: number, y: number}) => {\n    this.style.left = `${x}px`;\n    this.style.top = `${y}px`;\n  });\n};\n```\n\n----------------------------------------\n\nTITLE: Configuring Rollup for Babel Polyfills Bundle in JavaScript\nDESCRIPTION: This Rollup configuration creates a separate bundle for Babel polyfills, which is necessary for the universal build to support older browsers.\nSOURCE: https://github.com/lit/lit.dev/blob/main/packages/lit-dev-content/site/docs/v1/tools/build.md#2025-04-09_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nconst configs = [\n\n   ...\n\n  // Babel polyfills for older browsers that don't support ES2015+.\n  {\n    input: 'src/babel-polyfills-nomodule.js',\n    output: {\n      file: 'build-universal/nomodule/src/babel-polyfills-nomodule.js',\n      format: 'iife',\n    },\n    plugins: [commonjs({ include: ['node_modules/**'] }), resolve()],\n  },\n];\n```\n\n----------------------------------------\n\nTITLE: Using Safe Directive Example\nDESCRIPTION: Shows how to use the safe directive to handle potentially undefined data.\nSOURCE: https://github.com/lit/lit.dev/blob/main/packages/lit-dev-content/site/docs/v1/lit-html/creating-directives.md#2025-04-09_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nlet data;\n\n// Don't throw an exception if data.foo doesn't exist.\nconst myTemplate = () => html`foo = ${safe(() => data.foo)}`;\n```\n\n----------------------------------------\n\nTITLE: Adding Configuration Parameters to Controller in TypeScript\nDESCRIPTION: Extends the basic controller implementation to include additional configuration parameters. This example adds a timeout parameter to the ClockController.\nSOURCE: https://github.com/lit/lit.dev/blob/main/packages/lit-dev-content/site/docs/v3/composition/controllers.md#2025-04-09_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nclass ClockController implements ReactiveController {\n  private host: ReactiveControllerHost;\n  timeout: number\n\n  constructor(host: ReactiveControllerHost, timeout: number) {\n    this.host = host;\n    this.timeout = timeout;\n    host.addController(this);\n  }\n```\n\n----------------------------------------\n\nTITLE: Manual Implementation of @queryAssignedNodes\nDESCRIPTION: Equivalent manual implementation of the @queryAssignedNodes decorator functionality, showing how to query a named slot and get its assigned nodes.\nSOURCE: https://github.com/lit/lit.dev/blob/main/packages/lit-dev-content/site/docs/v1/components/templates.md#2025-04-09_snippet_18\n\nLANGUAGE: javascript\nCODE:\n```\nget headerNodes() {\n  const slot = this.shadowRoot.querySelector('slot[name=header]');\n  return slot.assignedNodes({flatten: true});\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Up Unhandled Rejection Handler in JavaScript\nDESCRIPTION: Example showing how to set up a global handler for unhandled promise rejections, which can be used to catch unexpected errors in the Lit update cycle.\nSOURCE: https://github.com/lit/lit.dev/blob/main/packages/lit-dev-content/site/docs/v2/components/lifecycle.md#2025-04-09_snippet_13\n\nLANGUAGE: javascript\nCODE:\n```\nwindow.onunhandledrejection = function(e) {\n  /* handle error */\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Carousel Click Handler - JavaScript\nDESCRIPTION: JavaScript implementation of the click handler that manages carousel item selection and dispatches a change event. Functionally identical to the TypeScript version but without type annotations.\nSOURCE: https://github.com/lit/lit.dev/blob/main/packages/lit-dev-content/site/tutorials/content/carousel/04.md#2025-04-09_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nclickHandler(e) {\n  const i = this.selected + (Number(!e.shiftKey) || -1);\n  this.selected = i > this.maxSelected ? 0 : i < 0 ? this.maxSelected : i;\n  const change = new CustomEvent('change',\n    {detail: this.selected, bubbles: true, composed: true});\n  this.dispatchEvent(change);\n}\n```\n\n----------------------------------------\n\nTITLE: Importing templateContent Directive in Lit\nDESCRIPTION: Import statement for the templateContent directive from Lit library.\nSOURCE: https://github.com/lit/lit.dev/blob/main/packages/lit-dev-content/site/docs/v3/templates/directives.md#2025-04-09_snippet_34\n\nLANGUAGE: javascript\nCODE:\n```\nimport {templateContent} from 'lit/directives/template-content.js';\n```\n\n----------------------------------------\n\nTITLE: Property Definition Comparison in TS and JS\nDESCRIPTION: Shows two equivalent ways of defining properties in custom elements using TypeScript decorators and JavaScript static properties.\nSOURCE: https://github.com/lit/lit.dev/blob/main/packages/lit-dev-content/site/docs/v2/internal/styles.md#2025-04-09_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\n@customElement('my-element')\nclass MyElement {\n  @property({attribute: false})\n  foo;\n}\n```\n\nLANGUAGE: javascript\nCODE:\n```\nclass MyElement {\n  static properties = {\n    foo: {attribute: false}\n  };\n}\ncustomElements.define('my-element', MyElement);\n```\n\n----------------------------------------\n\nTITLE: Configuring TypeScript for Experimental Decorators\nDESCRIPTION: TypeScript configuration for enabling experimental decorators and setting the correct class fields behavior for Lit.\nSOURCE: https://github.com/lit/lit.dev/blob/main/packages/lit-dev-content/site/docs/v3/components/decorators.md#2025-04-09_snippet_3\n\nLANGUAGE: json\nCODE:\n```\n// tsconfig.json\n{\n  \"compilerOptions\": {\n    \"experimentalDecorators\": true,\n    \"useDefineForClassFields\": false,\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Loading Lit Element Hydrate Support in HTML\nDESCRIPTION: Shows how to include the @lit-labs/ssr-client/lit-element-hydrate-support.js script before loading component definitions to enable automatic hydration of server-rendered Lit components.\nSOURCE: https://github.com/lit/lit.dev/blob/main/packages/lit-dev-content/site/docs/v3/ssr/client-usage.md#2025-04-09_snippet_1\n\nLANGUAGE: html\nCODE:\n```\n  <body>\n    <!-- App components rendered with declarative shadow DOM placed here. -->\n\n    <!-- ssr-client lit-element-hydrate-support should be loaded first. -->\n    <script type=\"module\" src=\"/node_modules/@lit-labs/ssr-client/lit-element-hydrate-support.js\"></script>\n\n    <!-- As component definition loads, your pre-rendered components will\n        come to life and become interactive. -->\n    <script src=\"/app-components.js\"></script>\n  </body>\n```\n\n----------------------------------------\n\nTITLE: Simple Function Directive Implementation\nDESCRIPTION: Example of a simple function directive that replaces vowels with 'x' in a string.\nSOURCE: https://github.com/lit/lit.dev/blob/main/packages/lit-dev-content/site/docs/v3/templates/custom-directives.md#2025-04-09_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nexport noVowels = (str) => str.replaceAll(/[aeiou]/ig,'x');\n```\n\n----------------------------------------\n\nTITLE: Implementing Selected Item Management in Lit Component with JavaScript\nDESCRIPTION: JavaScript implementation for handling the selected property changes and managing slot assignments. Similar to the TypeScript version, it tracks the previous selection, updates slot attributes when needed, and ensures the correct child element is displayed.\nSOURCE: https://github.com/lit/lit.dev/blob/main/packages/lit-dev-content/site/tutorials/content/carousel/03.md#2025-04-09_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nprevious = 0;\nupdated(changedProperties) {\n  if (changedProperties.has('selected') && this.hasValidSelected()) {\n    this.updateSlots();\n    this.previous = this.selected;\n  }\n}\n\nupdateSlots() {\n  this.children[this.previous]?.removeAttribute('slot');\n  this.children[this.selected]?.setAttribute('slot', 'selected');\n}\n```\n\n----------------------------------------\n\nTITLE: Babel Decorator Configuration\nDESCRIPTION: Babel configuration for enabling decorator support with required plugins.\nSOURCE: https://github.com/lit/lit.dev/blob/main/packages/lit-dev-content/site/docs/v1/components/decorators.md#2025-04-09_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nplugins = [\n  '@babel/plugin-proposal-class-properties',\n  ['@babel/plugin-proposal-decorators', {decoratorsBeforeExport: true}],\n];\n```\n\n----------------------------------------\n\nTITLE: Breaking Down Complex Templates for Localization\nDESCRIPTION: Shows how to improve localization by breaking down complex templates into smaller, more manageable pieces.\nSOURCE: https://github.com/lit/lit.dev/blob/main/packages/lit-dev-content/site/docs/v2/localization/best-practices.md#2025-04-09_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nrender() {\n  // Don't do this!\n  return msg(html`\n  <p>The red button makes the rocket go up.</p>\n  <p>The green button makes the rocket do a flip.</p>\n  `);\n}\n```\n\nLANGUAGE: javascript\nCODE:\n```\nrender() {\n  // Better! No markup needs to be processed by translators, and each sentence\n  // can be translated independently.\n  return html`\n  <p>${msg('The red button makes the rocket go up.')}</p>\n  <p>${msg('The green button makes the rocket do a flip.')}</p>\n  `;\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing a Controller that Owns a Directive\nDESCRIPTION: Implementation of a ResizeController that creates and manages a directive. The controller provides an observe method that returns a directive instance for use in templates.\nSOURCE: https://github.com/lit/lit.dev/blob/main/packages/lit-dev-content/site/docs/v2/composition/controllers.md#2025-04-09_snippet_10\n\nLANGUAGE: typescript\nCODE:\n```\nclass ResizeDirective {\n  /* ... */\n}\nconst resizeDirective = directive(ResizeDirective);\n\nexport class ResizeController {\n  /* ... */\n  observe() {\n    // Pass a reference to the controller so the directive can\n    // notify the controller on size changes.\n    return resizeDirective(this);\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring tsconfig.json for Lit Component Compilation\nDESCRIPTION: Shows the recommended TypeScript compiler options for targeting ES2021, enabling decorator compilation, and generating declaration files.\nSOURCE: https://github.com/lit/lit.dev/blob/main/packages/lit-dev-content/site/docs/v3/tools/publishing.md#2025-04-09_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n\"compilerOptions\": {\n  \"target\": \"es2021\",\n  \"module\": \"es2015\",\n  \"moduleResolution\": \"node\",\n  \"lib\": [\"es2021\", \"dom\"],\n  \"declaration\": true,\n  \"declarationMap\": true,\n  \"experimentalDecorators\": true,\n  \"useDefineForClassFields\": false\n}\n```\n\n----------------------------------------\n\nTITLE: Importing unsafeHTML Directive in Lit\nDESCRIPTION: Shows how to import the unsafeHTML directive from the Lit library.\nSOURCE: https://github.com/lit/lit.dev/blob/main/packages/lit-dev-content/site/docs/v2/templates/directives.md#2025-04-09_snippet_35\n\nLANGUAGE: javascript\nCODE:\n```\nimport {unsafeHTML} from 'lit/directives/unsafe-html.js';\n```\n\n----------------------------------------\n\nTITLE: Creating a Function-Based lit-html Template\nDESCRIPTION: A function that takes data and returns a lit-html template. This approach enables reusability and allows the template to be rendered with different data multiple times.\nSOURCE: https://github.com/lit/lit.dev/blob/main/packages/lit-dev-content/site/docs/v1/lit-html/introduction.md#2025-04-09_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nlet myTemplate = (data) => html`\n  <h1>${data.title}</h1>\n  <p>${data.body}</p>`;\n```\n\n----------------------------------------\n\nTITLE: styleMap Directive TypeScript Signature\nDESCRIPTION: Type signature showing the expected parameter type for styleMap directive.\nSOURCE: https://github.com/lit/lit.dev/blob/main/packages/lit-dev-content/site/docs/v2/templates/directives.md#2025-04-09_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nstyleMap(styleInfo: {[name: string]: string | undefined | null})\n```\n\n----------------------------------------\n\nTITLE: Mapping Items to List Elements with map() Directive in Lit\nDESCRIPTION: Shows how to use the new map() directive in Lit to iterate over items and render them as list elements. It works similar to Array.map but also supports iterators.\nSOURCE: https://github.com/lit/lit.dev/blob/main/packages/lit-dev-content/site/blog/2022-01-05-lit-2.1-release.md#2025-04-09_snippet_1\n\nLANGUAGE: TypeScript\nCODE:\n```\nrender() {\n  return html`\n    <ul>\n      ${map(this.items, (i) => html`<li>${i}</li>`)}\n    </ul>\n  `;\n}\n```\n\n----------------------------------------\n\nTITLE: Examples of Message ID Generation in JavaScript\nDESCRIPTION: Demonstrates how message IDs are generated based on content, HTML markup, and expression positions. Shows examples of messages with the same and different IDs.\nSOURCE: https://github.com/lit/lit.dev/blob/main/packages/lit-dev-content/site/docs/v2/localization/overview.md#2025-04-09_snippet_21\n\nLANGUAGE: js\nCODE:\n```\nmsg(html`Hello <b>${name}</b>`);\nmsg(html`Hello <b>${this.name}</b>`);\n\nmsg(html`Hello <i>${name}</i>`);\n```\n\n----------------------------------------\n\nTITLE: Range Directive Implementation\nDESCRIPTION: Example showing how to use the range directive to generate a sequence of numbers.\nSOURCE: https://github.com/lit/lit.dev/blob/main/packages/lit-dev-content/site/docs/v2/templates/directives.md#2025-04-09_snippet_18\n\nLANGUAGE: typescript\nCODE:\n```\nclass MyElement extends LitElement {\n\n  render() {\n    return html`\n      ${map(range(8), (i) => html`${i + 1}`)}\n    `;\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Navigation Section with Eleventy Frontmatter in YAML\nDESCRIPTION: YAML frontmatter that defines the 'Resources' section in the site navigation structure. It sets the title and configures the eleventyNavigation properties including the key name and display order (13).\nSOURCE: https://github.com/lit/lit.dev/blob/main/packages/lit-dev-content/site/docs/v2/resources/index.md#2025-04-09_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n---\ntitle: Resources\neleventyNavigation:\n  key: Resources\n  order: 13\n---\n```\n\n----------------------------------------\n\nTITLE: Styling the Motion Carousel Component with CSS\nDESCRIPTION: CSS styling for the motion-carousel component that establishes layout, sizing, and visual appearance. It includes host element styling with defaults, container positioning, and rules for slotted children to ensure proper sizing within the carousel.\nSOURCE: https://github.com/lit/lit.dev/blob/main/packages/lit-dev-content/site/tutorials/content/carousel/01.md#2025-04-09_snippet_1\n\nLANGUAGE: css\nCODE:\n```\n:host {\n  display: inline-block;\n  overflow: hidden;\n  position: relative;\n  /* Defaults */\n  width: 200px;\n  height: 200px;\n  border-radius: 4px;\n  background: gainsboro;\n  cursor: pointer;\n}\n\n.fit {\n  position: relative;\n  height: 100%;\n  width: 100%;\n}\n\n::slotted(*) {\n  box-sizing: border-box;\n  width: 100%;\n  height: 100%;\n}\n```\n\n----------------------------------------\n\nTITLE: Forcing Web Components Polyfills in JavaScript\nDESCRIPTION: Script to force all web components polyfills on for testing purposes, even on browsers with native support. This helps test compatibility by simulating polyfilled environments.\nSOURCE: https://github.com/lit/lit.dev/blob/main/packages/lit-dev-content/site/docs/v2/tools/requirements.md#2025-04-09_snippet_5\n\nLANGUAGE: html\nCODE:\n```\n<script>\n  // Force all polyfills on\n  if (window.customElements) window.customElements.forcePolyfill = true;\n  ShadyDOM = { force: true };\n  ShadyCSS = { shimcssproperties: true};\n</script>\n<script src=\"./node_modules/@webcomponents/webcomponentsjs/webcomponents-loader.js\"></script>\n```\n\n----------------------------------------\n\nTITLE: Using Light DOM Children in Lit Components\nDESCRIPTION: This HTML snippet illustrates how to provide light DOM children to a custom Lit component. It shows the usage of slots to place content in specific locations within the component's shadow DOM.\nSOURCE: https://github.com/lit/lit.dev/blob/main/packages/lit-dev-content/site/docs/v2/composition/component-composition.md#2025-04-09_snippet_2\n\nLANGUAGE: html\nCODE:\n```\n<top-bar>\n  <icon-button icon=\"menu\" slot=\"nav-button\"></icon-button>\n  <span slot=\"title\">Fuzzy</span>\n</top-bar>\n```\n\n----------------------------------------\n\nTITLE: Correct Localization in Render Method using JavaScript\nDESCRIPTION: This snippet shows the correct way to localize content by moving the default value fallback directly into the render method, ensuring it updates when the locale changes.\nSOURCE: https://github.com/lit/lit.dev/blob/main/packages/lit-dev-content/site/docs/v3/localization/best-practices.md#2025-04-09_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nrender() {\n  return html`<button>${this.label ?? msg('Default label')}</button>`;\n}\n```\n\n----------------------------------------\n\nTITLE: Calling render() from update() in Lit Directives\nDESCRIPTION: Demonstrates how to properly call the render() method from an overridden update() method in a Lit directive class, passing parameters correctly from the update() arguments array.\nSOURCE: https://github.com/lit/lit.dev/blob/main/packages/lit-dev-content/site/docs/v2/templates/custom-directives.md#2025-04-09_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\nclass MyDirective extends Directive {\n  update(part: Part, [fish, bananas]: DirectiveParameters<this>) {\n    // ...\n    return this.render(fish, bananas);\n  }\n  render(fish: number, bananas: number) { ... }\n}\n```\n\nLANGUAGE: javascript\nCODE:\n```\nclass MyDirective extends Directive {\n  update(part, [fish, bananas]) {\n    // ...\n    return this.render(fish, bananas);\n  }\n  render(fish, bananas) { ... }\n}\n```\n\n----------------------------------------\n\nTITLE: Importing map() Directive in Lit\nDESCRIPTION: This snippet shows how to import the map() directive from the Lit library. The map() directive is used to transform items in an iterable for rendering in templates.\nSOURCE: https://github.com/lit/lit.dev/blob/main/packages/lit-dev-content/site/tutorials/content/working-with-lists/01.md#2025-04-09_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport {map} from 'lit/directives/map.js';\n```\n\nLANGUAGE: javascript\nCODE:\n```\nimport {map} from 'lit/directives/map.js';\n```\n\n----------------------------------------\n\nTITLE: Base SVG Styling for Lit Component\nDESCRIPTION: Defines base CSS styles for SVG elements including host styling, dimensions, and text properties.\nSOURCE: https://github.com/lit/lit.dev/blob/main/packages/lit-dev-content/site/tutorials/content/svg-templates/05.md#2025-04-09_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nimport {LitElement, html, svg, css} from 'lit';\n\nconst svgCSS = css`\n  :host {\n    display: block;\n  }\n\n  svg {\n    height: 100%;\n    width: 100%;\n  }\n\n  text {\n    fill: #ffffff;\n    dominant-baseline: hanging;\n    font-family: monospace;\n    font-size: 24px;\n  }\n`;\n```\n\n----------------------------------------\n\nTITLE: Importing templateContent Directive in Lit\nDESCRIPTION: Shows how to import the templateContent directive from the Lit library.\nSOURCE: https://github.com/lit/lit.dev/blob/main/packages/lit-dev-content/site/docs/v2/templates/directives.md#2025-04-09_snippet_33\n\nLANGUAGE: javascript\nCODE:\n```\nimport {templateContent} from 'lit/directives/template-content.js';\n```\n\n----------------------------------------\n\nTITLE: Limiting Directive Usage to Specific Expression Types\nDESCRIPTION: Demonstrates how to validate a directive's usage context by checking the PartInfo in the constructor, ensuring it's only used in appropriate locations like specific attributes.\nSOURCE: https://github.com/lit/lit.dev/blob/main/packages/lit-dev-content/site/docs/v2/templates/custom-directives.md#2025-04-09_snippet_8\n\nLANGUAGE: typescript\nCODE:\n```\nclass ClassMap extends Directive {\n  constructor(partInfo: PartInfo) {\n    super(partInfo);\n    if (\n      partInfo.type !== PartType.ATTRIBUTE ||\n      partInfo.name !== 'class'\n    ) {\n      throw new Error('The `classMap` directive must be used in the `class` attribute');\n    }\n  }\n  ...\n}\n```\n\nLANGUAGE: javascript\nCODE:\n```\nclass ClassMap extends Directive {\n  constructor(partInfo) {\n    super(partInfo);\n    if (\n      partInfo.type !== PartType.ATTRIBUTE ||\n      partInfo.name !== 'class'\n    ) {\n      throw new Error('The `classMap` directive must be used in the `class` attribute');\n    }\n  }\n  ...\n}\n```\n\n----------------------------------------\n\nTITLE: Choose Directive Implementation Example\nDESCRIPTION: Example showing how to use the choose directive to conditionally render different templates based on a section value.\nSOURCE: https://github.com/lit/lit.dev/blob/main/packages/lit-dev-content/site/docs/v2/templates/directives.md#2025-04-09_snippet_10\n\nLANGUAGE: typescript\nCODE:\n```\nclass MyElement extends LitElement {\n  render() {\n    return html`\n      ${choose(this.section, [\n        ['home', () => html`<h1>Home</h1>`],\n        ['about', () => html`<h1>About</h1>`]\n      ],\n      () => html`<h1>Error</h1>`)}\n    `;\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Using @queryAssignedElements Decorator in Lit\nDESCRIPTION: Demonstrates the usage of the new @queryAssignedElements decorator in Lit for querying assigned elements in a specific slot.\nSOURCE: https://github.com/lit/lit.dev/blob/main/packages/lit-dev-content/site/blog/2022-01-05-lit-2.1-release.md#2025-04-09_snippet_5\n\nLANGUAGE: TypeScript\nCODE:\n```\n@queryAssignedElements({ slot: 'icon' })\nprivate _icon!: Array<HTMLElement>;\n```\n\n----------------------------------------\n\nTITLE: Using unsafeHTML in Lit Component\nDESCRIPTION: Example demonstrating how to use unsafeHTML directive to render HTML string content in a Lit component.\nSOURCE: https://github.com/lit/lit.dev/blob/main/packages/lit-dev-content/site/docs/v3/templates/directives.md#2025-04-09_snippet_39\n\nLANGUAGE: typescript\nCODE:\n```\nconst markup = '<h3>Some HTML to render.</h3>';\n\n@customElement('my-element')\nclass MyElement extends LitElement {\n\n  render() {\n    return html`\n      Look out, potentially unsafe HTML ahead:\n      ${unsafeHTML(markup)}\n    `;\n  }\n}\n```\n\nLANGUAGE: javascript\nCODE:\n```\nconst markup = '<h3>Some HTML to render.</h3>';\n\nclass MyElement extends LitElement {\n\n  render() {\n    return html`\n      Look out, potentially unsafe HTML ahead:\n      ${unsafeHTML(markup)}\n    `;\n  }\n}\ncustomElements.define('my-element', MyElement);\n```\n\n----------------------------------------\n\nTITLE: Rendering Named Slots in LitElement (JavaScript)\nDESCRIPTION: Demonstrates how to use named slots in a LitElement component's render method. Named slots allow specific child elements to be placed in designated locations within the shadow DOM.\nSOURCE: https://github.com/lit/lit.dev/blob/main/packages/lit-dev-content/site/docs/v1/components/templates.md#2025-04-09_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nrender(){\n  return html`\n    <div>\n      <slot name=\"one\"></slot>\n    </div>\n  `;\n}\n```\n\n----------------------------------------\n\nTITLE: Event Listener Object Example\nDESCRIPTION: Shows how to use an object with handleEvent method as an event listener.\nSOURCE: https://github.com/lit/lit.dev/blob/main/packages/lit-dev-content/site/docs/v1/lit-html/template-reference.md#2025-04-09_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nconst listener = {\n  handleEvent(e) {\n    console.log('clicked');\n  },\n  capture: true,\n};\n\nhtml`<button @click=${listener}>Click Me</button>`\n```\n\n----------------------------------------\n\nTITLE: LitElement Template Syntax Cheat Sheet (JavaScript)\nDESCRIPTION: Provides a quick reference for common LitElement template syntax including property binding, loops, conditionals, and event handling.\nSOURCE: https://github.com/lit/lit.dev/blob/main/packages/lit-dev-content/site/docs/v1/components/templates.md#2025-04-09_snippet_12\n\nLANGUAGE: javascript\nCODE:\n```\n// Property\nhtml`<p>${this.myProp}</p>`;\n\n// Loop\nhtml`${this.myArray.map(i => html`<li>${i}</li>`)}`;\n\n// Conditional\nhtml`${this.myBool?html`<p>foo</p>`:html`<p>bar</p>`)}`;\n\n// Attribute\nhtml`<p id=\"${...}\">`;\n\n// Boolean attribute\nhtml`<input type=\"text\" ?disabled=\"${...}\">`;\n\n// Property\nhtml`<input .value=\"${...}\">`;\n\n// Event handler\nhtml`<button @click=\"${this.doStuff}\"></button>`;\n```\n\n----------------------------------------\n\nTITLE: Asynchronous Promise Resolution Directive\nDESCRIPTION: Implements an asynchronous directive that handles promise resolution and updates the DOM.\nSOURCE: https://github.com/lit/lit.dev/blob/main/packages/lit-dev-content/site/docs/v1/lit-html/creating-directives.md#2025-04-09_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\nconst resolvePromise = directive((promise) => (part) => {\n  // This first setValue call is synchronous, so\n  // doesn't need the commit\n  part.setValue(\"Waiting for promise to resolve.\");\n\n  Promise.resolve(promise).then((resolvedValue) => {\n    part.setValue(resolvedValue);\n    part.commit();\n  });\n});\n```\n\n----------------------------------------\n\nTITLE: Defining Lit Component Properties (JavaScript)\nDESCRIPTION: Example of defining reactive properties in a Lit component using JavaScript\nSOURCE: https://github.com/lit/lit.dev/blob/main/packages/lit-dev-content/site/docs/v3/tools/starter-kits.md#2025-04-09_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\nexport class MyElement extends LitElement {\n  // ...\n  static properties = {\n    name: {type: String}\n  };\n\n  constructor() {\n    super();\n    this.name = 'World';\n  }\n  // ...\n}\n```\n\n----------------------------------------\n\nTITLE: First Update DOM Access\nDESCRIPTION: Example of firstUpdated() implementation for one-time DOM operations.\nSOURCE: https://github.com/lit/lit.dev/blob/main/packages/lit-dev-content/site/docs/v2/components/lifecycle.md#2025-04-09_snippet_9\n\nLANGUAGE: javascript\nCODE:\n```\nfirstUpdated() {\n  this.renderRoot.getElementById('my-text-area').focus();\n}\n```\n\n----------------------------------------\n\nTITLE: Re-rendering lit-html Template\nDESCRIPTION: Demonstrates updating a lit-html template with new data.\nSOURCE: https://github.com/lit/lit.dev/blob/main/packages/lit-dev-content/site/blog/2019-02-05-lit-element-and-lit-html-release.md#2025-04-09_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nrender(myTemplate('Grace'), document.body);\n```\n\n----------------------------------------\n\nTITLE: Example of generated output in transform mode (English)\nDESCRIPTION: An example of the localization output generated for the English locale in transform mode, showing the original template.\nSOURCE: https://github.com/lit/lit.dev/blob/main/packages/lit-dev-content/site/docs/v2/localization/overview.md#2025-04-09_snippet_10\n\nLANGUAGE: javascript\nCODE:\n```\n// locales/en/my-element.js\nrender() {\n  return html`Hello <b>World</b>`;\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Eleventy Navigation Configuration in YAML Front Matter\nDESCRIPTION: This code snippet defines the YAML front matter for an Eleventy static site generator page. It sets the page title to 'Introduction' and configures the Eleventy navigation with a key of 'Introduction' and an order value of 1.\nSOURCE: https://github.com/lit/lit.dev/blob/main/packages/lit-dev-content/site/docs/v2/introduction.md#2025-04-09_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n---\ntitle: Introduction\neleventyNavigation:\n  key: Introduction\n  order: 1\n---\n```\n\n----------------------------------------\n\nTITLE: Adding Declarative Event Listener in Lit Template\nDESCRIPTION: Demonstrates how to add a declarative event listener using the @event syntax in a Lit component's render method.\nSOURCE: https://github.com/lit/lit.dev/blob/main/packages/lit-dev-content/site/docs/v1/components/events.md#2025-04-09_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nrender() {\n  return html`<button @click=\"${this._handleClick}\">`;\n}\n```\n\n----------------------------------------\n\nTITLE: Using live Directive in JavaScript Lit Component\nDESCRIPTION: Shows how to use the live directive in a JavaScript Lit component to set an attribute or property if it differs from the live DOM value.\nSOURCE: https://github.com/lit/lit.dev/blob/main/packages/lit-dev-content/site/docs/v2/templates/directives.md#2025-04-09_snippet_32\n\nLANGUAGE: javascript\nCODE:\n```\nclass MyElement extends LitElement {\n  static properties = {\n    data: {},\n  };\n\n  constructor() {\n    super();\n    this.data = {value: 'test'};\n  }\n\n  render() {\n    return html`<input .value=${live(this.data.value)}>`;\n  }\n}\ncustomElements.define('my-element', MyElement);\n```\n\n----------------------------------------\n\nTITLE: Creating a Basic AsyncDirective for Promise Resolution\nDESCRIPTION: Implements a simple asynchronous directive that handles promises, showing both synchronous initial rendering and asynchronous updates when the promise resolves.\nSOURCE: https://github.com/lit/lit.dev/blob/main/packages/lit-dev-content/site/docs/v2/templates/custom-directives.md#2025-04-09_snippet_9\n\nLANGUAGE: typescript\nCODE:\n```\nclass ResolvePromise extends AsyncDirective {\n  render(promise: Promise<unknown>) {\n    Promise.resolve(promise).then((resolvedValue) => {\n      // Rendered asynchronously:\n      this.setValue(resolvedValue);\n    });\n    // Rendered synchronously:\n    return `Waiting for promise to resolve`;\n  }\n}\nexport const resolvePromise = directive(ResolvePromise);\n```\n\nLANGUAGE: javascript\nCODE:\n```\nclass ResolvePromise extends AsyncDirective {\n  render(promise) {\n    Promise.resolve(promise).then((resolvedValue) => {\n      // Rendered asynchronously:\n      this.setValue(resolvedValue);\n    });\n    // Rendered synchronously:\n    return `Waiting for promise to resolve`;\n  }\n}\nexport const resolvePromise = directive(ResolvePromise);\n```\n\n----------------------------------------\n\nTITLE: Importing Keyed Directive in Lit\nDESCRIPTION: Shows how to import the keyed directive from Lit library.\nSOURCE: https://github.com/lit/lit.dev/blob/main/packages/lit-dev-content/site/docs/v3/templates/directives.md#2025-04-09_snippet_25\n\nLANGUAGE: javascript\nCODE:\n```\nimport {keyed} from 'lit/directives/keyed.js';\n```\n\n----------------------------------------\n\nTITLE: Web Dev Server Configuration\nDESCRIPTION: Configuration file for setting up Web Dev Server with Lit development environment.\nSOURCE: https://github.com/lit/lit.dev/blob/main/packages/lit-dev-content/site/docs/v2/tools/development.md#2025-04-09_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nexport default {\n  open: true,\n  watch: true,\n  appIndex: 'index.html',\n  nodeResolve: {\n    exportConditions: ['development'],\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: Updated Getter/Setter Property Decorator Pattern\nDESCRIPTION: Demonstrates the new pattern of applying @property() decorator to the setter instead of the getter, with automatic update requests handled by the decorator.\nSOURCE: https://github.com/lit/lit.dev/blob/main/packages/lit-dev-content/site/docs/v3/releases/upgrade.md#2025-04-09_snippet_8\n\nLANGUAGE: typescript\nCODE:\n```\nclass MyElement extends LitElement {\n  private _foo = 42;\n  @property()\n  set(v) {\n    this._foo = v;\n  }\n  get() {\n    return this._foo;\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Rating Attribute in HTML for Web Component\nDESCRIPTION: This HTML snippet demonstrates how to set the 'rating' attribute declaratively in the DOM for a custom web component named 'rating-element'. This allows the rating to be updated declaratively.\nSOURCE: https://github.com/lit/lit.dev/blob/main/packages/lit-dev-content/site/tutorials/content/wc-to-lit/06.md#2025-04-09_snippet_2\n\nLANGUAGE: html\nCODE:\n```\n<rating-element rating=\"5\"></rating-element>\n```\n\n----------------------------------------\n\nTITLE: Importing Floating-UI Functions for Tooltip Positioning in TypeScript\nDESCRIPTION: This snippet shows how to import the required functions from the @floating-ui/dom package. These functions are used for computing tooltip positions and applying positioning strategies.\nSOURCE: https://github.com/lit/lit.dev/blob/main/packages/lit-dev-content/site/tutorials/content/tooltip/05.md#2025-04-09_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport {\n  computePosition,\n  autoPlacement,\n  offset,\n  shift\n} from '@floating-ui/dom';\n```\n\n----------------------------------------\n\nTITLE: Applying CSS Classes to SVG Elements\nDESCRIPTION: Shows how to apply CSS classes to SVG elements in Lit templates.\nSOURCE: https://github.com/lit/lit.dev/blob/main/packages/lit-dev-content/site/tutorials/content/svg-templates/05.md#2025-04-09_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nconst helloCssClasses = html`\n  <rect class=\"background\"></rect>\n`;\n```\n\n----------------------------------------\n\nTITLE: Using collectResult for Async Rendering\nDESCRIPTION: Shows how to collect render results asynchronously into a string.\nSOURCE: https://github.com/lit/lit.dev/blob/main/packages/lit-dev-content/site/docs/v2/ssr/server-usage.md#2025-04-09_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nimport {render} from '@lit-labs/ssr';\nimport {collectResult} from '@lit-labs/ssr/lib/render-result.js';\nimport {html} from 'lit';\n\nconst result = render(html`<my-element></my-element>`);\nconst contents = await collectResult(result);\n```\n\n----------------------------------------\n\nTITLE: Using collectResultSync for Synchronous Rendering\nDESCRIPTION: Demonstrates synchronous collection of render results, which throws on encountering Promises.\nSOURCE: https://github.com/lit/lit.dev/blob/main/packages/lit-dev-content/site/docs/v2/ssr/server-usage.md#2025-04-09_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\nimport {render} from '@lit-labs/ssr';\nimport {collectResultSync} from '@lit-labs/ssr/lib/render-result.js';\nimport {html} from 'lit';\n\nconst result = render(html`<my-element></my-element>`);\n// Throws if `result` contains a Promise!\nconst contents = collectResultSync(result);\n```\n\n----------------------------------------\n\nTITLE: Importing Individual Lit Decorators in JavaScript\nDESCRIPTION: Example of importing specific Lit decorators individually to reduce code size.\nSOURCE: https://github.com/lit/lit.dev/blob/main/packages/lit-dev-content/site/docs/v2/components/decorators.md#2025-04-09_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nimport {customElement} from 'lit/decorators/custom-element.js';\nimport {eventOptions} from 'lit/decorators/event-options.js';\n```\n\n----------------------------------------\n\nTITLE: Creating a Basic lit-html Template with JavaScript\nDESCRIPTION: A simple example of creating a lit-html template using a template literal tagged with the html function. The template includes a dynamic expression for the name variable.\nSOURCE: https://github.com/lit/lit.dev/blob/main/packages/lit-dev-content/site/docs/v1/lit-html/introduction.md#2025-04-09_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nhtml`<h1>Hello ${name}</h1>`\n```\n\n----------------------------------------\n\nTITLE: Importing LitElement with Bare Module Specifiers in JavaScript\nDESCRIPTION: This JavaScript snippet shows how LitElement uses bare module specifiers to import modules from the lit-html library. Build systems need to handle these specifiers as browsers don't support them natively.\nSOURCE: https://github.com/lit/lit.dev/blob/main/packages/lit-dev-content/site/docs/v1/tools/build.md#2025-04-09_snippet_5\n\nLANGUAGE: js\nCODE:\n```\nimport {html} from 'lit-html';\n```\n\n----------------------------------------\n\nTITLE: Creating Promise-resolving AsyncDirective in Lit\nDESCRIPTION: Implements an AsyncDirective that handles Promise values, showing how to render initial content synchronously and update with resolved values asynchronously using setValue().\nSOURCE: https://github.com/lit/lit.dev/blob/main/packages/lit-dev-content/site/docs/v3/templates/custom-directives.md#2025-04-09_snippet_9\n\nLANGUAGE: typescript\nCODE:\n```\nclass ResolvePromise extends AsyncDirective {\n  render(promise: Promise<unknown>) {\n    Promise.resolve(promise).then((resolvedValue) => {\n      // Rendered asynchronously:\n      this.setValue(resolvedValue);\n    });\n    // Rendered synchronously:\n    return `Waiting for promise to resolve`;\n  }\n}\nexport const resolvePromise = directive(ResolvePromise);\n```\n\nLANGUAGE: javascript\nCODE:\n```\nclass ResolvePromise extends AsyncDirective {\n  render(promise) {\n    Promise.resolve(promise).then((resolvedValue) => {\n      // Rendered asynchronously:\n      this.setValue(resolvedValue);\n    });\n    // Rendered synchronously:\n    return `Waiting for promise to resolve`;\n  }\n}\nexport const resolvePromise = directive(ResolvePromise);\n```\n\n----------------------------------------\n\nTITLE: Creating Simple Hello Directive\nDESCRIPTION: Demonstrates creating a basic directive that always renders 'Hello' using the directive factory function.\nSOURCE: https://github.com/lit/lit.dev/blob/main/packages/lit-dev-content/site/docs/v1/lit-html/creating-directives.md#2025-04-09_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nconst helloDirective = directive(() => (part) => { part.setValue('Hello')});\n\nconst helloTemplate = html`<div>${helloDirective()}</div>`\n```\n\n----------------------------------------\n\nTITLE: Cache Directive TypeScript Signature\nDESCRIPTION: TypeScript signature for the cache directive function.\nSOURCE: https://github.com/lit/lit.dev/blob/main/packages/lit-dev-content/site/docs/v3/templates/directives.md#2025-04-09_snippet_23\n\nLANGUAGE: typescript\nCODE:\n```\ncache(value: TemplateResult|unknown)\n```\n\n----------------------------------------\n\nTITLE: Importing repeat() Directive in Lit\nDESCRIPTION: This snippet shows how to import the repeat() directive from the Lit library. It's necessary to use the repeat() function in templates for maintaining key-to-DOM associations.\nSOURCE: https://github.com/lit/lit.dev/blob/main/packages/lit-dev-content/site/tutorials/content/working-with-lists/05.md#2025-04-09_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport {repeat} from 'lit/directives/repeat.js';\n```\n\nLANGUAGE: javascript\nCODE:\n```\nimport {repeat} from 'lit/directives/repeat.js';\n```\n\n----------------------------------------\n\nTITLE: TypeScript Type-Checked Element Usage\nDESCRIPTION: Shows type-safe usage of a custom element with proper TypeScript typings.\nSOURCE: https://github.com/lit/lit.dev/blob/main/packages/lit-dev-content/site/docs/v2/components/defining.md#2025-04-09_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nconst myElement = document.createElement('my-element');\nmyElement.aNumber = 10;\n```\n\n----------------------------------------\n\nTITLE: HTML Template Example for templateContent Directive\nDESCRIPTION: Shows the HTML template that will be used with the templateContent directive. This template contains static content that can be stamped into lit-html templates.\nSOURCE: https://github.com/lit/lit.dev/blob/main/packages/lit-dev-content/site/docs/v2/releases/release-notes/1.2.0.md#2025-04-09_snippet_2\n\nLANGUAGE: html\nCODE:\n```\n<template id=\"example\">\n  <p>HTML Template</p>\n</template>\n```\n\n----------------------------------------\n\nTITLE: Implementing Selected Property in Carousel Component with JavaScript\nDESCRIPTION: JavaScript implementation of the selected property for a carousel component. It uses static properties definition, internal state tracking, validation methods, and updates the internal selection in the render method.\nSOURCE: https://github.com/lit/lit.dev/blob/main/packages/lit-dev-content/site/tutorials/content/carousel/02.md#2025-04-09_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nstatic properties = { selected: {type: Number} };\n\nselectedInternal = 0;\nconstructor () {\n  super();\n  this.selected = 0;\n}\n\nget maxSelected() {\n  return this.childElementCount - 1;\n}\n\nhasValidSelected() {\n  return this.selected >= 0 && this.selected <= this.maxSelected;\n}\n\nrender() {\n  if (this.hasValidSelected()) {\n    this.selectedInternal = this.selected;\n  }\n  // ...\n```\n\n----------------------------------------\n\nTITLE: Populating List Items Conditionally in Lit Component (JavaScript)\nDESCRIPTION: This snippet shows how to conditionally populate an array of template literals based on component state in JavaScript. It iterates over friends and conditionally includes pets if the includePets flag is true.\nSOURCE: https://github.com/lit/lit.dev/blob/main/packages/lit-dev-content/site/tutorials/content/working-with-lists/03.md#2025-04-09_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\n// my-element.js\n  render() {\n    const listItems = [];\n    this.friends.forEach((friend) => {\n      listItems.push(html`<li>${friend}</li>`);\n    });\n    if (this.includePets) {\n      this.pets.forEach((pet) => {\n        listItems.push(html`<li>${pet.name} (${pet.species})</li>`);\n      });\n    }\n    ⋮\n  }\n```\n\n----------------------------------------\n\nTITLE: Running Rollup Build Command\nDESCRIPTION: Shell command to execute the Rollup build process using the configuration file.\nSOURCE: https://github.com/lit/lit.dev/blob/main/packages/lit-dev-content/site/docs/v3/tools/production.md#2025-04-09_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\nrollup -c\n```\n\n----------------------------------------\n\nTITLE: Styling Components in Polymer vs Lit\nDESCRIPTION: Comparison of styling patterns between Polymer and Lit. Shows how to add CSS to components using both inline style tags and Lit's css tag function.\nSOURCE: https://github.com/lit/lit.dev/blob/main/packages/lit-dev-content/site/articles/article/lit-for-polymer-users.md#2025-04-09_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\nstatic get template() {\n  return html`\n    <style>\n      .fancy { color: blue; }\n    </style>\n    ...\n  `;\n}\n```\n\nLANGUAGE: javascript\nCODE:\n```\nimport {LitElement, css, html} from 'lit';\n  ...\n\n  static styles = css`.fancy { color: blue; }`;\n```\n\nLANGUAGE: javascript\nCODE:\n```\nimport {LitElement, html} from 'lit';\n  ...\n  render() {\n    return html`\n      <style>\n        .fancy { color: blue; }\n      </style>\n      ...\n  }\n```\n\n----------------------------------------\n\nTITLE: Configuring Eleventy Navigation for Managing Data Section\nDESCRIPTION: This YAML front matter configures the Eleventy navigation for the 'Managing Data' section. It sets the navigation key and order for the section heading.\nSOURCE: https://github.com/lit/lit.dev/blob/main/packages/lit-dev-content/site/docs/v3/data/index.md#2025-04-09_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n---\ntitle: Managing Data\neleventyNavigation:\n  key: Managing Data\n  order: 5\n---\n```\n\n----------------------------------------\n\nTITLE: Valid Binding Examples\nDESCRIPTION: Shows correct placement of bindings in attribute values and text content.\nSOURCE: https://github.com/lit/lit.dev/blob/main/packages/lit-dev-content/site/docs/v1/lit-html/template-reference.md#2025-04-09_snippet_2\n\nLANGUAGE: html\nCODE:\n```\n<!-- attribute value -->\n<div label=\"${label}\"></div>\n\n<!-- text content -->\n<div>${textContent}</div>\n```\n\n----------------------------------------\n\nTITLE: Importing classMap Directive in Lit\nDESCRIPTION: Shows how to import the classMap directive from the Lit library.\nSOURCE: https://github.com/lit/lit.dev/blob/main/packages/lit-dev-content/site/docs/v3/templates/directives.md#2025-04-09_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport {classMap} from 'lit/directives/class-map.js';\n```\n\n----------------------------------------\n\nTITLE: Importing classMap Directive in Lit\nDESCRIPTION: Shows how to import the classMap directive from the Lit library.\nSOURCE: https://github.com/lit/lit.dev/blob/main/packages/lit-dev-content/site/docs/v3/templates/directives.md#2025-04-09_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport {classMap} from 'lit/directives/class-map.js';\n```\n\n----------------------------------------\n\nTITLE: Implementing a Directive with DOM Access\nDESCRIPTION: Shows how to create a directive that accesses the DOM using the update method and the Part object.\nSOURCE: https://github.com/lit/lit.dev/blob/main/packages/lit-dev-content/site/docs/v2/templates/custom-directives.md#2025-04-09_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\n// Renders attribute names of parent element to textContent\nclass AttributeLogger extends Directive {\n  attributeNames = '';\n  update(part: ChildPart) {\n    this.attributeNames = (part.parentNode as Element).getAttributeNames?.().join(' ');\n    return this.render();\n  }\n  render() {\n    return this.attributeNames;\n  }\n}\nconst attributeLogger = directive(AttributeLogger);\n\nconst template = html`<div a b>${attributeLogger()}</div>`;\n// Renders: `<div a b>a b</div>`\n```\n\n----------------------------------------\n\nTITLE: Adding Configuration Parameters to a Controller in TypeScript\nDESCRIPTION: Extended ClockController implementation that accepts a timeout parameter. Shows how to add custom configuration options to a controller.\nSOURCE: https://github.com/lit/lit.dev/blob/main/packages/lit-dev-content/site/docs/v2/composition/controllers.md#2025-04-09_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nclass ClockController implements ReactiveController {\n  private host: ReactiveControllerHost;\n  timeout: number\n\n  constructor(host: ReactiveControllerHost, timeout: number) {\n    this.host = host;\n    this.timeout = timeout;\n    host.addController(this);\n  }\n```\n\n----------------------------------------\n\nTITLE: Using the Time Ago Directive in Lit Template\nDESCRIPTION: Demonstrates how to use the timeAgo directive in a Lit template with a Date object to display when the page was rendered.\nSOURCE: https://github.com/lit/lit.dev/blob/main/packages/lit-dev-content/site/tutorials/content/async-directive/02.md#2025-04-09_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\n    return html`\n      <p>This page was rendered ${timeAgo(timeCreated)}.</p>\n    `;\n```\n\n----------------------------------------\n\nTITLE: Using CSS Custom Properties for Configurable Styles\nDESCRIPTION: Shows how to use CSS custom properties to create configurable styles in a LitElement component that can be customized at runtime.\nSOURCE: https://github.com/lit/lit.dev/blob/main/packages/lit-dev-content/site/docs/v1/components/styles.md#2025-04-09_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\nstatic get styles() {\n  return css`\n    :host { color: var(--themeColor); }\n  `;\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Rollup for Lit Development Build\nDESCRIPTION: Configuration example for using Rollup with node-resolve plugin to enable Lit's development build using export conditions.\nSOURCE: https://github.com/lit/lit.dev/blob/main/packages/lit-dev-content/site/docs/v2/tools/development.md#2025-04-09_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport { nodeResolve } from '@rollup/plugin-node-resolve';\n\nexport default {\n  // ...\n  plugins: [nodeResolve({\n    exportConditions: ['development']\n  })]\n};\n```\n\n----------------------------------------\n\nTITLE: Converting Property Declarations from Polymer to Lit\nDESCRIPTION: Shows how to migrate Polymer's property declarations to Lit's reactive properties using both decorators and static properties.\nSOURCE: https://github.com/lit/lit.dev/blob/main/packages/lit-dev-content/site/articles/article/lit-for-polymer-users.md#2025-04-09_snippet_13\n\nLANGUAGE: js\nCODE:\n```\n static get properties() {\n    return {\n      user: String,\n      count: {\n        type: Number,\n        notify: true\n      }\n    }\n  }\n```\n\nLANGUAGE: ts\nCODE:\n```\n@property()\nuser: string;\n\n@property({type: Number})\ncount: number;\n```\n\nLANGUAGE: js\nCODE:\n```\nstatic properties = {\n  user: {},\n  count: {\n    type: Number\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Locale Picker Component (JavaScript)\nDESCRIPTION: This snippet defines a LocalePicker custom element in JavaScript that allows switching between locales by changing the URL parameter.\nSOURCE: https://github.com/lit/lit.dev/blob/main/packages/lit-dev-content/site/docs/v3/localization/transform-mode.md#2025-04-09_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nimport {LitElement, html} from 'lit';\nimport {getLocale} from './localization.js';\nimport {allLocales} from './generated/locales.js';\n\nexport class LocalePicker extends LitElement {\n  render() {\n    return html`\n      <select @change=${this.localeChanged}>\n        ${allLocales.map(\n          (locale) =>\n            html`<option value=${locale} selected=${locale === getLocale()}>\n              ${locale}\n            </option>`\n        )}\n      </select>\n    `;\n  }\n\n  localeChanged(event) {\n    const newLocale = event.target.value;\n    const url = new URL(window.location.href);\n    if (url.searchParams.get('locale') !== newLocale) {\n      url.searchParams.set('locale', newLocale);\n      window.location.assign(url.href);\n    }\n  }\n}\ncustomElements.define('locale-picker', LocalePicker);\n```\n\n----------------------------------------\n\nTITLE: Creating Custom Property Accessors in LitElement\nDESCRIPTION: Example of implementing custom getter and setter for a property in a LitElement component, including manual update requesting.\nSOURCE: https://github.com/lit/lit.dev/blob/main/packages/lit-dev-content/site/docs/v1/components/properties.md#2025-04-09_snippet_11\n\nLANGUAGE: JavaScript\nCODE:\n```\n{% include \"v1-projects/properties/customsetter/my-element.js\" %}\n```\n\n----------------------------------------\n\nTITLE: Extracting Messages with Lit Localize CLI\nDESCRIPTION: Demonstrates how to use the lit-localize extract command to generate XLIFF files for each target locale. This command extracts localizable messages from the source code.\nSOURCE: https://github.com/lit/lit.dev/blob/main/packages/lit-dev-content/site/docs/v2/localization/overview.md#2025-04-09_snippet_14\n\nLANGUAGE: sh\nCODE:\n```\nlit-localize extract\n```\n\n----------------------------------------\n\nTITLE: Installing template polyfill via npm for lit-html on IE11\nDESCRIPTION: This command installs the template polyfill from the Web Components polyfills package using npm. This polyfill is necessary for running lit-html on Internet Explorer 11.\nSOURCE: https://github.com/lit/lit.dev/blob/main/packages/lit-dev-content/site/docs/v2/tools/production.md#2025-04-09_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\nnpm i @webcomponents/template\n```\n\n----------------------------------------\n\nTITLE: Implementing Lazy Loading for Tooltips in JavaScript\nDESCRIPTION: The JavaScript version of the lazy tooltip creation method. It follows the same pattern as the TypeScript version but without type annotations.\nSOURCE: https://github.com/lit/lit.dev/blob/main/packages/lit-dev-content/site/tutorials/content/tooltip/07.md#2025-04-09_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\n// Lazy creation\nstatic lazy(target, callback) {\n  const createTooltip = () => {\n    const tooltip = document.createElement('simple-tooltip');\n    callback(tooltip);\n    target.parentNode!.insertBefore(tooltip, target.nextSibling);\n    tooltip.show();\n    // We only need to create the tooltip once, so ignore all future events.\n    enterEvents.forEach(\n      (eventName) => target.removeEventListener(eventName, createTooltip));\n  };\n  enterEvents.forEach(\n    (eventName) => target.addEventListener(eventName, createTooltip));\n}\n```\n\n----------------------------------------\n\nTITLE: Adding Click Event Listener to Toggle Animation Direction\nDESCRIPTION: Adds a click event listener to the pre element in the render method using Lit's declarative event syntax (@click). When clicked, it calls the switchPlayDirection method to reverse the animation.\nSOURCE: https://github.com/lit/lit.dev/blob/main/packages/lit-dev-content/site/tutorials/content/word-viewer/06.md#2025-04-09_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\n// word-viewer.ts\n\n  render() {\n    ...\n    return html`<pre\n      @click=${this.switchPlayDirection}\n    >${word}</pre>`;\n  }\n```\n\nLANGUAGE: javascript\nCODE:\n```\n// word-viewer.js\n\n  render() {\n    ...\n    return html`<pre\n      @click=${this.switchPlayDirection}\n    >${word}</pre>`;\n  }\n```\n\n----------------------------------------\n\nTITLE: Rendering a chess board pattern using Lit directives\nDESCRIPTION: This snippet demonstrates how to use the range() and map() directives to create a chess board pattern. It generates an 8x8 grid of divs, with classes and labels determined by the row and column indices.\nSOURCE: https://github.com/lit/lit.dev/blob/main/packages/lit-dev-content/site/tutorials/content/working-with-lists/04.md#2025-04-09_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nrender() {\n  return html`\n    ⋮\n    <div id=\"board\">\n      ${map(range(8), (row) => map(range(8), (col) => html`\n        <div class=\"${getColor(row, col)}\">${getLabel(row, col)}</div>\n      `))}\n    </div>\n  `;\n}\n```\n\nLANGUAGE: javascript\nCODE:\n```\nrender() {\n  return html`\n    ⋮\n    <div id=\"board\">\n      ${map(range(8), (row) => map(range(8), (col) => html`\n        <div class=\"${getColor(row, col)}\">${getLabel(row, col)}</div>\n      `))}\n    </div>\n  `;\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Babel for Lit Component Compilation\nDESCRIPTION: Babel configuration for compiling Lit components, including settings for decorators and class properties.\nSOURCE: https://github.com/lit/lit.dev/blob/main/packages/lit-dev-content/site/docs/v2/tools/publishing.md#2025-04-09_snippet_4\n\nLANGUAGE: js\nCODE:\n```\nconst assumptions = {\n  \"setPublicClassFields\": true\n};\n\nconst plugins = [\n  ['@babel/plugin-proposal-decorators', { decoratorsBeforeExport: true } ],\n  [\"@babel/plugin-proposal-class-properties\"],\n\n];\n\nmodule.exports = { assumptions, plugins };\n```\n\n----------------------------------------\n\nTITLE: Implementing a Directive with Parameterized Render Method\nDESCRIPTION: Demonstrates how to create a directive with a render method that accepts parameters, which can be passed when using the directive in a template.\nSOURCE: https://github.com/lit/lit.dev/blob/main/packages/lit-dev-content/site/docs/v2/templates/custom-directives.md#2025-04-09_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nclass MaxDirective extends Directive {\n  maxValue = Number.MIN_VALUE;\n  // Define a render method, which may accept arguments:\n  render(value: number, minValue = Number.MIN_VALUE) {\n    this.maxValue = Math.max(value, this.maxValue, minValue);\n    return this.maxValue;\n  }\n}\nconst max = directive(MaxDirective);\n\n// Call the directive with `value` and `minValue` arguments defined for `render()`:\nconst template = html`<div>${max(someNumber, 0)}</div>`;\n```\n\n----------------------------------------\n\nTITLE: Creating a Custom NamesController using @lit-labs/task in Lit\nDESCRIPTION: This example shows how to create a custom NamesController that wraps the Task controller from @lit-labs/task. It fetches names from a demo REST API based on a specified 'kind' input and provides a render method to display different templates depending on the task state.\nSOURCE: https://github.com/lit/lit.dev/blob/main/packages/lit-dev-content/site/docs/v2/composition/controllers.md#2025-04-09_snippet_12\n\nLANGUAGE: typescript\nCODE:\n```\nimport {LitElement, html} from 'lit';\nimport {customElement, state} from 'lit/decorators.js';\nimport {Task, TaskStatus} from '@lit-labs/task';\nimport {map} from 'lit/directives/map.js';\n\ntype Status = TaskStatus;\ntype TaskResult = string[];\n\nclass NamesController {\n  private task: Task<[string], TaskResult>;\n  private host: LitElement;\n\n  @state()\n  kind = 'funny';\n\n  constructor(host: LitElement) {\n    this.host = host;\n    this.task = new Task<[string], TaskResult>(\n      host,\n      ([kind]) =>\n        fetch(`https://www.npmjs.com/package/@lit-labs/task/${kind}`).then((response) =>\n          response.json()\n        ),\n      () => [this.kind]\n    );\n  }\n\n  render() {\n    return html`\n      ${map(\n        [\n          [TaskStatus.INITIAL, () => html`<p>Ready</p>`],\n          [TaskStatus.PENDING, () => html`<p>Fetching names...</p>`],\n          [TaskStatus.COMPLETE, () => this.renderNames()],\n          [TaskStatus.ERROR, (error: Error) => html`<p>Error: ${error}</p>`],\n        ],\n        ([status, render]) =>\n          this.task.status === status\n            ? render(this.task.error as Error)\n            : ''\n      )}\n    `;\n  }\n\n  private renderNames() {\n    return html`\n      <p>Names:</p>\n      <ul>\n        ${map(\n          this.task.value!,\n          (name) => html`\n            <li>${name}</li>\n          `\n        )}\n      </ul>\n    `;\n  }\n}\n\n@customElement('my-element')\nexport class MyElement extends LitElement {\n  private names = new NamesController(this);\n\n  render() {\n    return html`\n      <select @change=${this.changeName}>\n        <option value=\"funny\">Funny</option>\n        <option value=\"cat\">Cat</option>\n      </select>\n      ${this.names.render()}\n    `;\n  }\n\n  private changeName(e: Event) {\n    this.names.kind = (e.target as HTMLSelectElement).value;\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Using Counter Directive\nDESCRIPTION: Demonstrates how to use the counter directive in a template with an initial value.\nSOURCE: https://github.com/lit/lit.dev/blob/main/packages/lit-dev-content/site/docs/v1/lit-html/creating-directives.md#2025-04-09_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nconst myTemplate = () => html`\n  <div>\n    ${renderCounter(0)}\n  </div>`;\n```\n\n----------------------------------------\n\nTITLE: Handling Localization Status Events in JavaScript\nDESCRIPTION: Example of using the lit-localize-status event to manage loading indicators and re-render the application on locale changes.\nSOURCE: https://github.com/lit/lit.dev/blob/main/packages/lit-dev-content/site/docs/v3/localization/runtime-mode.md#2025-04-09_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\n// Show/hide a progress indicator whenever a new locale is loading,\n// and re-render the application every time a new locale successfully loads.\nwindow.addEventListener('lit-localize-status', (event) => {\n  const spinner = document.querySelector('#spinner');\n\n  if (event.detail.status === 'loading') {\n    console.log(`Loading new locale: ${event.detail.loadingLocale}`);\n    spinner.removeAttribute('hidden');\n  } else if (event.detail.status === 'ready') {\n    console.log(`Loaded new locale: ${event.detail.readyLocale}`);\n    spinner.setAttribute('hidden', '');\n    renderApplication();\n  } else if (event.detail.status === 'error') {\n    console.error(\n      `Error loading locale ${event.detail.errorLocale}: ` +\n        event.detail.errorMessage\n    );\n    spinner.setAttribute('hidden', '');\n  }\n});\n```\n\n----------------------------------------\n\nTITLE: Configuring package.json for Lit Component Publication\nDESCRIPTION: Essential package.json configuration for publishing a Lit component to npm, specifying the module type and entry points.\nSOURCE: https://github.com/lit/lit.dev/blob/main/packages/lit-dev-content/site/docs/v2/tools/publishing.md#2025-04-09_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"type\": \"module\",\n  \"main\": \"my-element.js\",\n  \"module\": \"my-element.js\"\n}\n```\n\n----------------------------------------\n\nTITLE: Breaking Localized Templates into Smaller Pieces\nDESCRIPTION: These snippets show how to break localized templates into smaller, more manageable pieces for easier translation and maintenance.\nSOURCE: https://github.com/lit/lit.dev/blob/main/packages/lit-dev-content/site/docs/v3/localization/best-practices.md#2025-04-09_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nrender() {\n  // Don't do this!\n  return msg(html`\n  <p>The red button makes the rocket go up.</p>\n  <p>The green button makes the rocket do a flip.</p>\n  `);\n}\n```\n\nLANGUAGE: javascript\nCODE:\n```\nrender() {\n  // Better! No markup needs to be processed by translators, and each sentence\n  // can be translated independently.\n  return html`\n  <p>${msg('The red button makes the rocket go up.')}</p>\n  <p>${msg('The green button makes the rocket do a flip.')}</p>\n  `;\n}\n```\n\n----------------------------------------\n\nTITLE: Adding Event Listeners in Lit Templates\nDESCRIPTION: Shows how to add declarative event listeners in Lit templates using the @ prefix. The event listener is automatically bound to the component instance.\nSOURCE: https://github.com/lit/lit.dev/blob/main/packages/lit-dev-content/site/docs/v3/templates/expressions.md#2025-04-09_snippet_17\n\nLANGUAGE: js\nCODE:\n```\nhtml`<button @click=${this.clickHandler}>Click Me!</button>`;\n```\n\n----------------------------------------\n\nTITLE: Adding Event Listeners to Host Element in Lit\nDESCRIPTION: Demonstrates the pattern of adding event listeners to the host element in the constructor. These listeners are automatically cleaned up when the element is garbage collected.\nSOURCE: https://github.com/lit/lit.dev/blob/main/packages/lit-dev-content/site/articles/article/lit-cheat-sheet.md#2025-04-09_snippet_34\n\nLANGUAGE: typescript\nCODE:\n```\n{% playground-ide \"articles/lit-cheat-sheet/host-listeners\", true %}\n```\n\n----------------------------------------\n\nTITLE: Checking Signal Polyfill Installation in npm\nDESCRIPTION: This command checks for the installation of signal-polyfill in the project dependencies. It helps ensure there's only one copy of the polyfill to prevent partitioning of the signal graph.\nSOURCE: https://github.com/lit/lit.dev/blob/main/packages/lit-dev-content/site/docs/v3/data/signals.md#2025-04-09_snippet_6\n\nLANGUAGE: sh\nCODE:\n```\nnpm ls signal-polyfill\n```\n\n----------------------------------------\n\nTITLE: Including Template Polyfill in HTML for Lit\nDESCRIPTION: HTML script tag to include the template polyfill in your project. This should be added to your HTML file to ensure IE11 compatibility for Lit templates.\nSOURCE: https://github.com/lit/lit.dev/blob/main/packages/lit-dev-content/site/docs/v1/lit-html/tools.md#2025-04-09_snippet_7\n\nLANGUAGE: html\nCODE:\n```\n<script src=\"./node_modules/@webcomponents/template/template.min.js\"></script>\n```\n\n----------------------------------------\n\nTITLE: Basic Lit Element Import Example\nDESCRIPTION: Example of importing Lit core modules using bare module specifiers.\nSOURCE: https://github.com/lit/lit.dev/blob/main/packages/lit-dev-content/site/docs/v2/tools/development.md#2025-04-09_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nimport {LitElement, html, css} from 'lit';\n```\n\n----------------------------------------\n\nTITLE: Installing Template Polyfill for Lit in Bash\nDESCRIPTION: Command to install the template polyfill for Lit projects using npm. This polyfill is necessary for supporting the <template> element in Internet Explorer 11.\nSOURCE: https://github.com/lit/lit.dev/blob/main/packages/lit-dev-content/site/docs/v1/lit-html/tools.md#2025-04-09_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\nnpm i @webcomponents/template\n```\n\n----------------------------------------\n\nTITLE: Rendering a lit-html Template to the DOM\nDESCRIPTION: Demonstrates how to render a lit-html TemplateResult to the DOM using the render() function. The example creates a result from a template and renders it to document.body.\nSOURCE: https://github.com/lit/lit.dev/blob/main/packages/lit-dev-content/site/docs/v1/lit-html/introduction.md#2025-04-09_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nconst result = myTemplate({title: 'Hello', body: 'lit-html is cool'});\nrender(result, document.body);\n```\n\n----------------------------------------\n\nTITLE: Using a Custom Directive in Lit Template\nDESCRIPTION: Demonstrates how to use a custom directive function in a Lit template expression.\nSOURCE: https://github.com/lit/lit.dev/blob/main/packages/lit-dev-content/site/docs/v2/templates/custom-directives.md#2025-04-09_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nhtml`<div>\n       ${fancyDirective('some text')}\n     </div>`\n```\n\n----------------------------------------\n\nTITLE: Creating a Clock Controller Instance in TypeScript\nDESCRIPTION: Demonstrates how to create an instance of a ClockController and store it within a Lit component. The controller is initialized with the component instance and an update interval.\nSOURCE: https://github.com/lit/lit.dev/blob/main/packages/lit-dev-content/site/docs/v3/composition/controllers.md#2025-04-09_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nclass MyElement extends LitElement {\n  private clock = new ClockController(this, 1000);\n}\n```\n\n----------------------------------------\n\nTITLE: Binding Type Restriction\nDESCRIPTION: Shows how to restrict a directive to only work with specific binding types (NodePart in this example).\nSOURCE: https://github.com/lit/lit.dev/blob/main/packages/lit-dev-content/site/docs/v1/lit-html/creating-directives.md#2025-04-09_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\nconst myListDirective = directive((items) => (part) => {\n  if (!(part instanceof NodePart)) {\n    throw new Error('myListDirective can only be used in content bindings');\n  }\n  // Carry on ...\n  ...\n```\n\n----------------------------------------\n\nTITLE: Composing SVG with HTML in Lit\nDESCRIPTION: Shows how to properly nest an SVG template within an HTML template using Lit.\nSOURCE: https://github.com/lit/lit.dev/blob/main/packages/lit-dev-content/site/tutorials/content/svg-templates/01.md#2025-04-09_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nconst helloHTML = html`\n  <svg>\n    ${svg`<text>Hello, SVG!</text>`}\n  </svg>\n`;\n```\n\n----------------------------------------\n\nTITLE: ContextCallback Type Signature\nDESCRIPTION: The type signature for the ContextCallback function which is provided by a context requester and is called with the value satisfying the request.\nSOURCE: https://github.com/lit/lit.dev/blob/main/packages/lit-dev-content/site/docs/v2/data/context.md#2025-04-09_snippet_31\n\nLANGUAGE: ts\nCODE:\n```\ntype ContextCallback<ValueType> = (\n  value: ValueType,\n  unsubscribe?: () => void\n) => void;\n```\n\n----------------------------------------\n\nTITLE: Using Standard Decorators with Accessor Keyword\nDESCRIPTION: Example of using standard decorators syntax with the 'accessor' keyword for property decorators in Lit components.\nSOURCE: https://github.com/lit/lit.dev/blob/main/packages/lit-dev-content/site/docs/v3/components/decorators.md#2025-04-09_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\n@customElement('my-element')\nexport class MyElement extends LitElement {\n\n  @property()\n  accessor greeting = 'Welcome';\n\n}\n```\n\n----------------------------------------\n\nTITLE: Updating Property Setters with Render Method in JavaScript\nDESCRIPTION: This JavaScript code updates the 'rating' and 'vote' setters to use the render method, ensuring DOM updates when properties change. It removes explicit DOM manipulation in favor of Lit's rendering approach.\nSOURCE: https://github.com/lit/lit.dev/blob/main/packages/lit-dev-content/site/tutorials/content/wc-to-lit/10.md#2025-04-09_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nset rating(value) {\n  this._rating = value;\n  // remove the logic for imperatively setting the innerText\n  // since it's handled in render()\n  this.render();\n}\n\n...\n\nset vote(newValue) {\n  ...\n\n  this._vote = newValue;\n  this.setAttribute('vote', newValue);\n  // call this.render() at the end of the setter\n  this.render();\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a Bubbling and Composed Custom Event in Lit\nDESCRIPTION: Shows how to create a custom event that can bubble through and escape shadow DOM boundaries in a Lit component.\nSOURCE: https://github.com/lit/lit.dev/blob/main/packages/lit-dev-content/site/docs/v1/components/events.md#2025-04-09_snippet_11\n\nLANGUAGE: javascript\nCODE:\n```\nfirstUpdated(changedProperties) {\n  let myEvent = new CustomEvent('my-event', {\n    detail: { message: 'my-event happened.' },\n    bubbles: true,\n    composed: true });\n  this.dispatchEvent(myEvent);\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Slot in Render Method for Selected Item Display in HTML\nDESCRIPTION: HTML snippet that defines a slot with name 'selected' to display only the selected item in the carousel. The slot name will be assigned to the currently selected child element to make it visible while hiding others.\nSOURCE: https://github.com/lit/lit.dev/blob/main/packages/lit-dev-content/site/tutorials/content/carousel/03.md#2025-04-09_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<div class=\"fit\">\n  <slot name=\"selected\"></slot>\n</div>\n```\n\n----------------------------------------\n\nTITLE: Installing ES Dev Server\nDESCRIPTION: Command to install the ES dev server package as a development dependency.\nSOURCE: https://github.com/lit/lit.dev/blob/main/packages/lit-dev-content/site/docs/v1/getting-started.md#2025-04-09_snippet_11\n\nLANGUAGE: bash\nCODE:\n```\nnpm i -D es-dev-server\n```\n\n----------------------------------------\n\nTITLE: Configuring Rollup for Universal Build in JavaScript\nDESCRIPTION: This Rollup configuration sets up the universal build process, creating bundles compatible with older browsers using SystemJS as the module format and including Babel for transpilation.\nSOURCE: https://github.com/lit/lit.dev/blob/main/packages/lit-dev-content/site/docs/v1/tools/build.md#2025-04-09_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nconst configs = [\n  // The main JavaScript bundle for older browsers that don't support\n  // JavaScript modules or ES2015+.\n  {\n    input: ['src/components/shop-app.js'],\n    output: {\n      dir: 'build-universal/nomodule/src/components',\n      format: 'systemjs',\n    },\n    plugins: [\n      minifyHTML(),\n      babel(babelConfig),\n      resolve(),\n      copy(copyConfig),\n    ],\n    preserveEntrySignatures: false,\n  },\n```\n\n----------------------------------------\n\nTITLE: Implementing connectedCallback in LitElement\nDESCRIPTION: Example of implementing the connectedCallback lifecycle method in a LitElement component, demonstrating the need to call the super method.\nSOURCE: https://github.com/lit/lit.dev/blob/main/packages/lit-dev-content/site/docs/v1/components/lifecycle.md#2025-04-09_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconnectedCallback() {\n  super.connectedCallback()\n\n  console.log('connected')\n}\n```\n\n----------------------------------------\n\nTITLE: Importing Lit with Bare Module Specifiers\nDESCRIPTION: An example showing how Lit uses bare module specifiers to import modules between its sub-packages, which requires transformation for browser compatibility.\nSOURCE: https://github.com/lit/lit.dev/blob/main/packages/lit-dev-content/site/docs/v2/tools/requirements.md#2025-04-09_snippet_0\n\nLANGUAGE: js\nCODE:\n```\nimport {html} from 'lit-html';\n```\n\n----------------------------------------\n\nTITLE: Conditionally Rendering Nothing for Child Content in Lit\nDESCRIPTION: Using the nullish coalescing operator with Lit's 'nothing' sentinel value to conditionally render content only when a value exists. This technique is useful for optional child content.\nSOURCE: https://github.com/lit/lit.dev/blob/main/packages/lit-dev-content/site/docs/v2/templates/conditionals.md#2025-04-09_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nrender() {\n  return html`<user-name>${this.userName ?? nothing}</user-name>`;\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Reusable Mixin Class\nDESCRIPTION: Shows how to create a concrete subclass with a mixin that can be extended by users.\nSOURCE: https://github.com/lit/lit.dev/blob/main/packages/lit-dev-content/site/docs/v2/composition/mixins.md#2025-04-09_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nexport const LitElementWithMixin = MyMixin(LitElement);\n```\n\nLANGUAGE: typescript\nCODE:\n```\nimport {LitElementWithMixin} from './lit-element-with-mixin.js';\n\nclass MyElement extends LitElementWithMixin {\n  /* user code */\n}\n```\n\n----------------------------------------\n\nTITLE: Storing Time Argument in Lit Directive (JavaScript)\nDESCRIPTION: This snippet demonstrates how to store the time argument in a class field within the update method of a Lit directive in JavaScript. This allows the time value to be accessed outside of the normal update cycle.\nSOURCE: https://github.com/lit/lit.dev/blob/main/packages/lit-dev-content/site/tutorials/content/async-directive/06.md#2025-04-09_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\n  update(part, [time]) {\n    this.time = time;\n    ...\n  }\n```\n\n----------------------------------------\n\nTITLE: Creating Observable-handling AsyncDirective with lifecycle management\nDESCRIPTION: Implements a complete AsyncDirective that subscribes to an Observable input, properly handling disconnection and reconnection to prevent memory leaks.\nSOURCE: https://github.com/lit/lit.dev/blob/main/packages/lit-dev-content/site/docs/v3/templates/custom-directives.md#2025-04-09_snippet_10\n\nLANGUAGE: typescript\nCODE:\n```\nclass ObserveDirective extends AsyncDirective {\n  observable: Observable<unknown> | undefined;\n  unsubscribe: (() => void) | undefined;\n  // When the observable changes, unsubscribe to the old one and\n  // subscribe to the new one\n  render(observable: Observable<unknown>) {\n    if (this.observable !== observable) {\n      this.unsubscribe?.();\n      this.observable = observable\n      if (this.isConnected)  {\n        this.subscribe(observable);\n      }\n    }\n    return noChange;\n  }\n  // Subscribes to the observable, calling the directive's asynchronous\n  // setValue API each time the value changes\n  subscribe(observable: Observable<unknown>) {\n    this.unsubscribe = observable.subscribe((v: unknown) => {\n      this.setValue(v);\n    });\n  }\n  // When the directive is disconnected from the DOM, unsubscribe to ensure\n  // the directive instance can be garbage collected\n  disconnected() {\n    this.unsubscribe!();\n  }\n  // If the subtree the directive is in was disconnected and subsequently\n  // re-connected, re-subscribe to make the directive operable again\n  reconnected() {\n    this.subscribe(this.observable!);\n  }\n}\nexport const observe = directive(ObserveDirective);\n```\n\nLANGUAGE: javascript\nCODE:\n```\nclass ObserveDirective extends AsyncDirective {\n  // When the observable changes, unsubscribe to the old one and\n  // subscribe to the new one\n  render(observable) {\n    if (this.observable !== observable) {\n      this.unsubscribe?.();\n      this.observable = observable\n      if (this.isConnected)  {\n        this.subscribe(observable);\n      }\n    }\n    return noChange;\n  }\n  // Subscribes to the observable, calling the directive's asynchronous\n  // setValue API each time the value changes\n  subscribe(observable) {\n    this.unsubscribe = observable.subscribe((v) => {\n      this.setValue(v);\n    });\n  }\n  // When the directive is disconnected from the DOM, unsubscribe to ensure\n  // the directive instance can be garbage collected\n  disconnected() {\n    this.unsubscribe();\n  }\n  // If the subtree the directive is in was disconneted and subsequently\n  // re-connected, re-subscribe to make the directive operable again\n  reconnected() {\n    this.subscribe(this.observable);\n  }\n}\nexport const observe = directive(ObserveDirective);\n```\n\n----------------------------------------\n\nTITLE: Using Lit Component in JSX/TSX\nDESCRIPTION: Example of using a Lit component within a JSX/TSX application by importing the component and using its custom element tag.\nSOURCE: https://github.com/lit/lit.dev/blob/main/packages/lit-dev-content/site/docs/v2/tools/adding-lit.md#2025-04-09_snippet_4\n\nLANGUAGE: tsx\nCODE:\n```\nimport './components/my-element.js';\n\nexport const App = () => (\n  <h1>My App</h1>\n  <my-element></my-element>\n)\n```\n\n----------------------------------------\n\nTITLE: Localizing a string with expressions\nDESCRIPTION: Example of localizing a string that contains dynamic expressions using the str tag function.\nSOURCE: https://github.com/lit/lit.dev/blob/main/packages/lit-dev-content/site/docs/v2/localization/overview.md#2025-04-09_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nmsg(str`Hello ${name}`);\n```\n\n----------------------------------------\n\nTITLE: Styling Slotted Content in LitElement\nDESCRIPTION: Demonstrates how to style slotted content in a LitElement component using the ::slotted() CSS pseudo-element.\nSOURCE: https://github.com/lit/lit.dev/blob/main/packages/lit-dev-content/site/docs/v1/components/styles.md#2025-04-09_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\n{% include \"v1-projects/style/slottedselector/my-element.js\" %}\n```\n\n----------------------------------------\n\nTITLE: Lit localization configuration file for JavaScript\nDESCRIPTION: An example of a lit-localize.json configuration file for a JavaScript project, specifying locales, input files, output settings, and interchange format.\nSOURCE: https://github.com/lit/lit.dev/blob/main/packages/lit-dev-content/site/docs/v2/localization/overview.md#2025-04-09_snippet_13\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"$schema\": \"https://raw.githubusercontent.com/lit/lit/main/packages/localize-tools/config.schema.json\",\n  \"sourceLocale\": \"en\",\n  \"targetLocales\": [\"es-419\", \"zh-Hans\"],\n  \"inputFiles\": [\n    \"src/**/*.js\"\n  ],\n  \"output\": {\n    \"mode\": \"runtime\",\n    \"outputDir\": \"./src/generated/locales\",\n    \"localeCodesModule\": \"./src/generated/locale-codes.js\"\n  },\n  \"interchange\": {\n    \"format\": \"xliff\",\n    \"xliffDir\": \"./xliff/\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Eleventy Navigation Structure in Markdown Frontmatter\nDESCRIPTION: This code snippet defines the frontmatter metadata for an Eleventy-based documentation page. It sets the page title as \"Tools\" and configures the eleventyNavigation object with a key of \"Tools\" and an order value of 3 to control its position in the navigation hierarchy.\nSOURCE: https://github.com/lit/lit.dev/blob/main/packages/lit-dev-content/site/docs/v1/tools/index.md#2025-04-09_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n---\ntitle: Tools\neleventyNavigation:\n  key: Tools\n  order: 3\n---\n```\n\n----------------------------------------\n\nTITLE: Composing Controllers from Other Controllers in TypeScript\nDESCRIPTION: Demonstrates how to create a controller that is composed of other controllers. This example creates a DualClockController that manages two separate ClockController instances.\nSOURCE: https://github.com/lit/lit.dev/blob/main/packages/lit-dev-content/site/docs/v3/composition/controllers.md#2025-04-09_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\nclass DualClockController implements ReactiveController {\n  private clock1: ClockController;\n  private clock2: ClockController;\n\n  constructor(host: ReactiveControllerHost, delay1: number, delay2: number) {\n    this.clock1 = new ClockController(host, delay1);\n    this.clock2 = new ClockController(host, delay2);\n  }\n\n  get time1() { return this.clock1.value; }\n  get time2() { return this.clock2.value; }\n}\n```\n\n----------------------------------------\n\nTITLE: Refactoring RatingElement Class Structure in JavaScript\nDESCRIPTION: This JavaScript code shows the simplified structure of the RatingElement class after removing unnecessary methods and callbacks. It retains core properties and the connectedCallback.\nSOURCE: https://github.com/lit/lit.dev/blob/main/packages/lit-dev-content/site/tutorials/content/wc-to-lit/10.md#2025-04-09_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nexport class RatingElement extends HTMLElement {\n  _rating = 0;\n  _vote = null;\n\n  connectedCallback() {\n    this.attachShadow({mode: 'open'});\n    this.render();\n  }\n\n  // remove disonnectedCallback and _onUpClick and _onDownClick\n  ...\n}\n```\n\n----------------------------------------\n\nTITLE: Using Lit Localization CLI\nDESCRIPTION: Basic usage of the Lit localization CLI, showing the command structure with optional flags.\nSOURCE: https://github.com/lit/lit.dev/blob/main/packages/lit-dev-content/site/docs/v2/localization/cli-and-config.md#2025-04-09_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\nlit-localize command [--flags]\n```\n\n----------------------------------------\n\nTITLE: Basic Lit Template Expression\nDESCRIPTION: Simple example of creating a Lit template expression for SSR.\nSOURCE: https://github.com/lit/lit.dev/blob/main/packages/lit-dev-content/site/docs/v2/ssr/server-usage.md#2025-04-09_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nhtml`<h1>Hello</h1>`\n```\n\n----------------------------------------\n\nTITLE: Importing Lit Element Hydrate Support in JavaScript\nDESCRIPTION: Demonstrates how to import the Lit Element hydrate support module first when bundling code to ensure proper hydration of server-rendered components.\nSOURCE: https://github.com/lit/lit.dev/blob/main/packages/lit-dev-content/site/docs/v3/ssr/client-usage.md#2025-04-09_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\n// index.js\nimport '@lit-labs/ssr-client/lit-element-hydrate-support.js';\nimport './app-components.js';\n```\n\n----------------------------------------\n\nTITLE: Defining Lit SSR Render Function Signature\nDESCRIPTION: TypeScript signature for the main SSR render function that takes a template value and optional render info.\nSOURCE: https://github.com/lit/lit.dev/blob/main/packages/lit-dev-content/site/docs/v2/ssr/server-usage.md#2025-04-09_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nrender(value: unknown, renderInfo?: Partial<RenderInfo>): RenderResult\n```\n\n----------------------------------------\n\nTITLE: Rendering a Composed Component in Lit\nDESCRIPTION: This snippet demonstrates how to compose multiple components together in a Lit render function. It shows the usage of custom elements and slotted content.\nSOURCE: https://github.com/lit/lit.dev/blob/main/packages/lit-dev-content/site/docs/v2/composition/component-composition.md#2025-04-09_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nrender() {\n  return html`\n    <top-bar>\n      <icon-button icon=\"menu\" slot=\"nav-button\"></icon-button>\n      <span slot=\"title\">Fuzzy</span>\n    </top-bar>\n    `;\n}\n```\n\n----------------------------------------\n\nTITLE: Adding Click Event Listener to Lit Element Template\nDESCRIPTION: This snippet shows how to add a click event listener to a paragraph element in a Lit element's template. The click event is bound to a handleClick method.\nSOURCE: https://github.com/lit/lit.dev/blob/main/packages/lit-dev-content/site/tutorials/content/async-directive/08.md#2025-04-09_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n    return html`\n      <p @click=${this.handleClick}>\n        This page was rendered ${timeAgo(timeCreated)}.\n      </p>\n    `;\n```\n\n----------------------------------------\n\nTITLE: Implementing Render Method in TimeAgo Directive\nDESCRIPTION: Implements the required render method for the TimeAgo directive that accepts a Date object and returns its string representation. Shown in both TypeScript and JavaScript versions.\nSOURCE: https://github.com/lit/lit.dev/blob/main/packages/lit-dev-content/site/tutorials/content/async-directive/01.md#2025-04-09_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\n  render(time: Date) {\n    return time.toDateString();\n  }\n```\n\nLANGUAGE: javascript\nCODE:\n```\n  render(time) {\n    return time.toDateString();\n  }\n```\n\n----------------------------------------\n\nTITLE: Configuring polyfill support in web-test-runner or web-dev-server\nDESCRIPTION: Configuration for @web/test-runner or @web/dev-server to automatically inject the polyfill-support file when needed.\nSOURCE: https://github.com/lit/lit.dev/blob/main/packages/lit-dev-content/site/docs/v2/releases/upgrade.md#2025-04-09_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\nexport default {\n  ...\n  plugins: [\n    legacyPlugin({\n      polyfills: {\n        webcomponents: true,\n        custom: [\n          {\n            name: 'lit-polyfill-support',\n            path: 'node_modules/lit/polyfill-support.js',\n            test: \"!('attachShadow' in Element.prototype)\",\n            module: false,\n          },\n        ],\n      },\n    }),\n  ],\n};\n\n```\n\n----------------------------------------\n\nTITLE: Using unsafeSVG in Lit Component\nDESCRIPTION: Example showing how to use unsafeSVG directive to render SVG string content in a Lit component.\nSOURCE: https://github.com/lit/lit.dev/blob/main/packages/lit-dev-content/site/docs/v3/templates/directives.md#2025-04-09_snippet_42\n\nLANGUAGE: typescript\nCODE:\n```\nconst svg = '<circle cx=\"50\" cy=\"50\" r=\"40\" fill=\"red\" />';\n\n@customElement('my-element')\nclass MyElement extends LitElement {\n\n  render() {\n    return html`\n      Look out, potentially unsafe SVG ahead:\n      <svg width=\"40\" height=\"40\" viewBox=\"0 0 100 100\"\n        xmlns=\"http://www.w3.org/2000/svg\" version=\"1.1\">\n        ${unsafeSVG(svg)}\n      </svg> `;\n  }\n}\n```\n\nLANGUAGE: javascript\nCODE:\n```\nconst svg = '<circle cx=\"50\" cy=\"50\" r=\"40\" fill=\"red\" />';\n\nclass MyElement extends LitElement {\n\n  render() {\n    return html`\n      Look out, potentially unsafe SVG ahead:\n      <svg width=\"40\" height=\"40\" viewBox=\"0 0 100 100\"\n        xmlns=\"http://www.w3.org/2000/svg\" version=\"1.1\">\n        ${unsafeSVG(svg)}\n      </svg> `;\n  }\n}\ncustomElements.define('my-element', MyElement);\n```\n\n----------------------------------------\n\nTITLE: Passing Data Down in Lit Components\nDESCRIPTION: Demonstrates how to pass data down to child components using property and attribute bindings. Shows the difference between using @property() for external API and @state() for internal state.\nSOURCE: https://github.com/lit/lit.dev/blob/main/packages/lit-dev-content/site/articles/article/lit-cheat-sheet.md#2025-04-09_snippet_36\n\nLANGUAGE: typescript\nCODE:\n```\n{% playground-ide \"articles/lit-cheat-sheet/pass-data-down\", true %}\n```\n\n----------------------------------------\n\nTITLE: Setting Up Transition End Listener in TypeScript\nDESCRIPTION: Adds a transitionend event listener in the constructor to handle completion of hide animations.\nSOURCE: https://github.com/lit/lit.dev/blob/main/packages/lit-dev-content/site/tutorials/content/tooltip/06.md#2025-04-09_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nconstructor() {\n  super();\n  // Finish hiding at end of animation\n  this.addEventListener('transitionend', this.finishHide);\n}\n```\n\n----------------------------------------\n\nTITLE: Playground Example Template Syntax\nDESCRIPTION: Template syntax for embedding a single file playground example with preview.\nSOURCE: https://github.com/lit/lit.dev/blob/main/packages/lit-dev-content/site/docs/v2/internal/demos.md#2025-04-09_snippet_1\n\nLANGUAGE: plaintext\nCODE:\n```\n{% playground-example \"v2-docs/templates/define\" \"my-element.ts\" %}\n```\n\n----------------------------------------\n\nTITLE: Creating a Comment Card Element in HTML\nDESCRIPTION: HTML markup for a comment-card element with attributes for user, time, subject, and content to demonstrate directive usage.\nSOURCE: https://github.com/lit/lit.dev/blob/main/packages/lit-dev-content/site/tutorials/content/async-directive/09.md#2025-04-09_snippet_1\n\nLANGUAGE: html\nCODE:\n```\n  <comment-card user=\"litdeveloper\"\n                time=\"12:49 pm\"\n                subject=\"Just tried AsyncDirectives!\"\n                content=\"Cool stuff, they're really powerful!\">\n  </comment-card>\n```\n\n----------------------------------------\n\nTITLE: Defining Templates Section in Eleventy Navigation\nDESCRIPTION: Frontmatter configuration for creating a 'Templates' section heading in the Lit documentation navigation. The configuration specifies the title as 'Templates' and sets its order to 3 in the navigation hierarchy.\nSOURCE: https://github.com/lit/lit.dev/blob/main/packages/lit-dev-content/site/docs/v3/templates/index.md#2025-04-09_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n---\ntitle: Templates\neleventyNavigation:\n  key: Templates\n  order: 3\n---\n```\n\n----------------------------------------\n\nTITLE: Populating List Items Conditionally in Lit Component (TypeScript)\nDESCRIPTION: This snippet demonstrates how to conditionally populate an array of TemplateResult objects based on component state. It iterates over friends and conditionally includes pets if the includePets flag is true.\nSOURCE: https://github.com/lit/lit.dev/blob/main/packages/lit-dev-content/site/tutorials/content/working-with-lists/03.md#2025-04-09_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n// my-element.ts\n  render() {\n    const listItems: TemplateResult[] = [];\n    this.friends.forEach((friend) => {\n      listItems.push(html`<li>${friend}</li>`);\n    });\n    if (this.includePets) {\n      this.pets.forEach((pet) => {\n        listItems.push(html`<li>${pet.name} (${pet.species})</li>`);\n      });\n    }\n    ⋮\n  }\n```\n\n----------------------------------------\n\nTITLE: DOM Interface Support Table in Markdown\nDESCRIPTION: A markdown table documenting the implementation status of various DOM interfaces and methods supported in Lit's SSR DOM emulation. It details which features are fully implemented versus those with partial support.\nSOURCE: https://github.com/lit/lit.dev/blob/main/packages/lit-dev-content/site/docs/v2/ssr/dom-emulation.md#2025-04-09_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n| Property | Notes |\n|-|-|\n| `Element` | ⚠️ Partial <table><tbody><tr><td>`attributes`</td><td>✅</td><tr><td>`shadowRoot`</td><td>⚠️ Returns `{host: this}` if `attachShadow()` was called with `{mode: 'open'}`</td><tr><td>`setAttribute()`</td><td>✅</td><tr><td>`removeAttribute()`</td><td>✅</td><tr><td>`hasAttribute()`</td><td>✅</td><tr><td>`attachShadow()`</td><td>⚠️ Returns `{host: this}`</td><tr><td>`getAttribute()`</td><td>✅</td></tr></tbody></table> |\n| `HTMLElement` | ⚠️ Empty class |\n| `CustomElementRegistry` | <table><tbody><tr><td>`define()`</td><td>✅</td></tr><tr><td>`get()`</td><td>✅</td></tr></tbody></table> |\n| `customElements` | Instance of `CustomElementRegistry` |\n```\n\n----------------------------------------\n\nTITLE: Subscribing to Context Changes with @consume\nDESCRIPTION: Example showing how to subscribe to context value changes using the @consume decorator with the subscribe option. This allows the component to automatically update when the context value changes.\nSOURCE: https://github.com/lit/lit.dev/blob/main/packages/lit-dev-content/site/docs/v2/data/context.md#2025-04-09_snippet_13\n\nLANGUAGE: typescript\nCODE:\n```\n  @consume({context: myContext, subscribe: true})\n  myData: MyData;\n```\n\n----------------------------------------\n\nTITLE: Expected Console Output for Lifecycle Testing\nDESCRIPTION: This snippet shows the expected console output when testing the lifecycle methods. It demonstrates the logging sequence for initial render, disconnection, and reconnection of the element.\nSOURCE: https://github.com/lit/lit.dev/blob/main/packages/lit-dev-content/site/tutorials/content/async-directive/08.md#2025-04-09_snippet_3\n\nLANGUAGE: markdown\nCODE:\n```\ntimer started\n```\n\nLANGUAGE: markdown\nCODE:\n```\ntimer stopped\ntimer started\n```\n\n----------------------------------------\n\nTITLE: Loading Lit Element Hydration Support in JavaScript Bundle\nDESCRIPTION: This JavaScript snippet demonstrates how to load the lit-element-hydrate-support.js module first when using a bundler for your application code. The module must be imported before any component definitions to ensure proper hydration of server-rendered components.\nSOURCE: https://github.com/lit/lit.dev/blob/main/packages/lit-dev-content/site/docs/v2/ssr/client-usage.md#2025-04-09_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\n// index.js\nimport '@lit-labs/ssr-client/lit-element-hydrate-support.js';\nimport './app-components.js';\n```\n\n----------------------------------------\n\nTITLE: Configuring Babel for Standard Decorators\nDESCRIPTION: Babel configuration for enabling standard decorators with the proper plugin and version setting.\nSOURCE: https://github.com/lit/lit.dev/blob/main/packages/lit-dev-content/site/docs/v3/components/decorators.md#2025-04-09_snippet_5\n\nLANGUAGE: json\nCODE:\n```\n// babel.config.json\n{\n  \"plugins\": [\n    [\"@babel/plugin-proposal-decorators\", {\"version\": \"2023-05\"}]\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Filtering Items Based on Completion Status in TypeScript\nDESCRIPTION: Demonstrates how to filter list items based on a hideCompleted flag to show/hide completed items in the todo list.\nSOURCE: https://github.com/lit/lit.dev/blob/main/packages/lit-dev-content/site/tutorials/content/intro-to-lit/07.md#2025-04-09_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nconst items = this.hideCompleted\n  ? this._listItems.filter((item) => !item.completed)\n  : this._listItems;\n```\n\n----------------------------------------\n\nTITLE: Setting Up Global Unhandled Rejection Handler in JavaScript\nDESCRIPTION: This code sets up a global handler for unhandled promise rejections, which can be used to catch and report errors that occur during the update cycle.\nSOURCE: https://github.com/lit/lit.dev/blob/main/packages/lit-dev-content/site/docs/v3/components/lifecycle.md#2025-04-09_snippet_13\n\nLANGUAGE: javascript\nCODE:\n```\nwindow.onunhandledrejection = function(e) {\n  /* handle error */\n}\n```\n\n----------------------------------------\n\nTITLE: List Rendering with Map in Lit\nDESCRIPTION: Shows how to render a list using map with checkbox inputs, demonstrating potential state management considerations.\nSOURCE: https://github.com/lit/lit.dev/blob/main/packages/lit-dev-content/site/docs/v2/templates/lists.md#2025-04-09_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nhtml`${this.users.map((user) =>\n  html`\n    <div><input type=\"checkbox\"> ${user.name}</div>\n  `)}`\n```\n\n----------------------------------------\n\nTITLE: Importing ref Directive in Lit\nDESCRIPTION: Shows how to import the ref directive from the Lit library.\nSOURCE: https://github.com/lit/lit.dev/blob/main/packages/lit-dev-content/site/docs/v2/templates/directives.md#2025-04-09_snippet_39\n\nLANGUAGE: javascript\nCODE:\n```\nimport {ref} from 'lit/directives/ref.js';\n```\n\n----------------------------------------\n\nTITLE: Installing @lit-labs/signals Package via npm\nDESCRIPTION: This command shows how to install the @lit-labs/signals package using npm. It's a simple one-line command to add the package to your project's dependencies.\nSOURCE: https://github.com/lit/lit.dev/blob/main/packages/lit-dev-content/site/blog/2024-10-08-signals.md#2025-04-09_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nnpm i @lit-labs/signals\n```\n\n----------------------------------------\n\nTITLE: CustomElement Registration Equivalent\nDESCRIPTION: Shows the standard custom element registration code that @customElement decorator replaces.\nSOURCE: https://github.com/lit/lit.dev/blob/main/packages/lit-dev-content/site/docs/v1/components/decorators.md#2025-04-09_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\ncustomElements.define('my-element', MyElement);\n```\n\n----------------------------------------\n\nTITLE: Defining Navigation Configuration in Markdown Frontmatter\nDESCRIPTION: This code snippet defines the frontmatter metadata for a section heading page in an Eleventy-based documentation site. It sets the title of the page and configures the eleventyNavigation object with a key and order value for proper placement in the navigation hierarchy.\nSOURCE: https://github.com/lit/lit.dev/blob/main/packages/lit-dev-content/site/docs/v3/components/index.md#2025-04-09_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n---\ntitle: Writing Components\neleventyNavigation:\n  key: Components\n  order: 2\n---\n```\n\n----------------------------------------\n\nTITLE: Importing the animate directive from @lit-labs/motion\nDESCRIPTION: Imports the animate directive from the @lit-labs/motion package to enable animation capabilities in the Lit component.\nSOURCE: https://github.com/lit/lit.dev/blob/main/packages/lit-dev-content/site/tutorials/content/carousel/08.md#2025-04-09_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport {animate} from '@lit-labs/motion';\n```\n\n----------------------------------------\n\nTITLE: Rendering a Composed Component in Lit\nDESCRIPTION: Example of a render method that demonstrates component composition by combining a top-bar component with icon-button and span elements. Shows how slots are used to place content within specific locations in the parent component.\nSOURCE: https://github.com/lit/lit.dev/blob/main/packages/lit-dev-content/site/docs/v3/composition/component-composition.md#2025-04-09_snippet_0\n\nLANGUAGE: js\nCODE:\n```\nrender() {\n  return html`\n    <top-bar>\n      <icon-button icon=\"menu\" slot=\"nav-button\"></icon-button>\n      <span slot=\"title\">Fuzzy</span>\n    </top-bar>\n    `;\n}\n```\n\n----------------------------------------\n\nTITLE: HTML Template with Declarative Shadow DOM Polyfill\nDESCRIPTION: This HTML example shows how to implement a complete page with the template-shadowroot polyfill for browsers that don't support Declarative Shadow DOM natively. It includes strategies to prevent layout shifts by hiding content until the polyfill is loaded and applied.\nSOURCE: https://github.com/lit/lit.dev/blob/main/packages/lit-dev-content/site/docs/v2/ssr/client-usage.md#2025-04-09_snippet_3\n\nLANGUAGE: html\nCODE:\n```\n<!DOCTYPE html>\n<html>\n  <head>\n    <!-- On browsers that don't yet support native declarative shadow DOM, a\n        paint can occur after some or all pre-rendered HTML has been parsed,\n        but before the declarative shadow DOM polyfill has taken effect. This\n        paint is undesirable because it won't include any component shadow DOM.\n        To prevent layout shifts that can result from this render, we use a\n        \"dsd-pending\" attribute to ensure we only paint after we know\n        shadow DOM is active. -->\n    <style>\n      body[dsd-pending] {\n        display: none;\n      }\n    </style>\n  </head>\n\n  <body dsd-pending>\n    <script>\n      if (HTMLTemplateElement.prototype.hasOwnProperty('shadowRoot')) {\n        // This browser has native declarative shadow DOM support, so we can\n        // allow painting immediately.\n        document.body.removeAttribute('dsd-pending');\n      }\n    </script>\n\n    <!-- App components rendered with declarative shadow DOM placed here. -->\n\n    <!-- Use a type=module script so that we can use dynamic module imports.\n        Note this pattern will not work in IE11. -->\n    <script type=\"module\">\n      // Check if we require the template shadow root polyfill.\n      if (!HTMLTemplateElement.prototype.hasOwnProperty('shadowRoot')) {\n        // Fetch the template shadow root polyfill.\n        const {hydrateShadowRoots} = await import(\n          '/node_modules/@webcomponents/template-shadowroot/template-shadowroot.js'\n        );\n\n        // Apply the polyfill. This is a one-shot operation, so it is important\n        // it happens after all HTML has been parsed.\n        hydrateShadowRoots(document.body);\n\n        // At this point, browsers without native declarative shadow DOM\n        // support can paint the initial state of your components!\n        document.body.removeAttribute('dsd-pending');\n      }\n    </script>\n  </body>\n</html>\n```\n\n----------------------------------------\n\nTITLE: Context Creation Signature\nDESCRIPTION: Type signature for the createContext function that creates a typed Context object.\nSOURCE: https://github.com/lit/lit.dev/blob/main/packages/lit-dev-content/site/docs/v3/data/context.md#2025-04-09_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\nfunction createContext<ValueType, K = unknown>(key: K): Context<K, ValueType>;\n```\n\n----------------------------------------\n\nTITLE: Implementing reconnected Callback in Lit AsyncDirective\nDESCRIPTION: The reconnected lifecycle callback that gets called when a previously disconnected directive is reconnected to the DOM. It restarts the timer using the ensureTimerStarted method to resume directive functionality.\nSOURCE: https://github.com/lit/lit.dev/blob/main/packages/lit-dev-content/site/tutorials/content/async-directive/07.md#2025-04-09_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\n  reconnected() {\n    this.ensureTimerStarted();\n  }\n```\n\n----------------------------------------\n\nTITLE: Using LitElement Component in HTML\nDESCRIPTION: Shows how to use a custom LitElement component in HTML markup.\nSOURCE: https://github.com/lit/lit.dev/blob/main/packages/lit-dev-content/site/blog/2019-02-05-lit-element-and-lit-html-release.md#2025-04-09_snippet_5\n\nLANGUAGE: html\nCODE:\n```\n<name-tag name=\"Ida\"></name-tag>\n```\n\n----------------------------------------\n\nTITLE: Implementing willUpdate Lifecycle Method for Property Synchronization in TypeScript\nDESCRIPTION: TypeScript implementation of the willUpdate lifecycle method in a Lit component that converts the dateStr string attribute to a JavaScript Date object whenever dateStr changes.\nSOURCE: https://github.com/lit/lit.dev/blob/main/packages/lit-dev-content/site/tutorials/content/custom-attribute-converter/02.md#2025-04-09_snippet_1\n\nLANGUAGE: ts\nCODE:\n```\nexport class DateDisplay extends LitElement {\n  ...\n\n  willUpdate(changed: PropertyValues<this>) {\n    if (changed.has('dateStr') && this.dateStr) {\n      this.date = new Date(this.dateStr);\n    }\n  }\n\n  ...\n```\n\n----------------------------------------\n\nTITLE: Using LitElement Update Complete Promise\nDESCRIPTION: Example showing the change in update handling where requestUpdate no longer returns a Promise and updateComplete should be used instead.\nSOURCE: https://github.com/lit/lit.dev/blob/main/packages/lit-dev-content/site/docs/v2/releases/upgrade.md#2025-04-09_snippet_9\n\nLANGUAGE: javascript\nCODE:\n```\n// Old way\nawait element.requestUpdate();\n\n// New way\nawait element.updateComplete;\n```\n\n----------------------------------------\n\nTITLE: Creating a React Hook from a Lit Controller\nDESCRIPTION: Shows how to use useController() to create a React hook from a Lit reactive controller, allowing state and behavior sharing between web components and React.\nSOURCE: https://github.com/lit/lit.dev/blob/main/packages/lit-dev-content/site/docs/v2/frameworks/react.md#2025-04-09_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nimport React from 'react';\nimport {useController} from '@lit-labs/react/use-controller.js';\nimport {MouseController} from '@example/mouse-controller';\n\n// Write a custom React hook function:\nconst useMouse = () => {\n  // Use useController to create and store a controller instance:\n  const controller = useController(React, (host) => new MouseController(host));\n  // Return relevant data for consumption by the component:\n  return controller.pos;\n};\n\n// Now use the new hook in a React component:\nconst Component = (props) => {\n  const mousePosition = useMouse();\n  return (\n    <pre>\n      x: {mousePosition.x}\n      y: {mousePosition.y}\n    </pre>\n  );\n};\n```\n\n----------------------------------------\n\nTITLE: Configuring ES Dev Server in package.json\nDESCRIPTION: JSON configuration for adding ES dev server command to package.json scripts with development server options.\nSOURCE: https://github.com/lit/lit.dev/blob/main/packages/lit-dev-content/site/docs/v1/getting-started.md#2025-04-09_snippet_12\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"scripts\": {\n    \"serve\": \"es-dev-server --app-index index.html --node-resolve --watch --open\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing handleClick Method for DOM Manipulation in Lit Element\nDESCRIPTION: This method removes the host element from the DOM and re-inserts it after a 1-second delay. It demonstrates how to manipulate the element's presence in the DOM for testing lifecycle methods.\nSOURCE: https://github.com/lit/lit.dev/blob/main/packages/lit-dev-content/site/tutorials/content/async-directive/08.md#2025-04-09_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\n  handleClick() {\n    const parent = this.parentNode;\n    this.remove();\n    setTimeout(() => parent!.appendChild(this), 1000);\n  }\n```\n\nLANGUAGE: javascript\nCODE:\n```\n  handleClick() {\n    const parent = this.parentNode;\n    this.remove();\n    setTimeout(() => parent.appendChild(this), 1000);\n  }\n```\n\n----------------------------------------\n\nTITLE: SVG Pattern with Fill Reference\nDESCRIPTION: Shows how to create a pattern with an ID and reference it as a fill value in an SVG rect element. Demonstrates the connection between pattern definition and usage.\nSOURCE: https://github.com/lit/lit.dev/blob/main/packages/lit-dev-content/site/tutorials/content/svg-templates/04.md#2025-04-09_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nconst helloPattern = svg`\n  <pattern\n    id=\"hello-pattern\"\n    patternUnits=\"userSpaceOnUse\">\n    ${createTile()}\n  </pattern>\n`;\n\nconst helloPatternFill = svg`\n  <rect fill=\"url(#hello-pattern)\" width=\"200\" height=\"200\"></rect>\n`;\n```\n\n----------------------------------------\n\nTITLE: TypeScript Mixin with Constructor Type\nDESCRIPTION: Shows proper TypeScript typing for mixins including constructor constraints.\nSOURCE: https://github.com/lit/lit.dev/blob/main/packages/lit-dev-content/site/docs/v2/composition/mixins.md#2025-04-09_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nimport {LitElement} from 'lit';\n\ntype Constructor<T = {}> = new (...args: any[]) => T;\n\nexport const MyMixin = <T extends Constructor<LitElement>>(superClass: T) => {\n  class MyMixinClass extends superClass {\n    /* ... */\n  };\n  return MyMixinClass as /* see \"typing the subclass\" below */;\n}\n```\n\n----------------------------------------\n\nTITLE: ContextProvider Import\nDESCRIPTION: Import statement for the ContextProvider class from @lit/context package.\nSOURCE: https://github.com/lit/lit.dev/blob/main/packages/lit-dev-content/site/docs/v3/data/context.md#2025-04-09_snippet_13\n\nLANGUAGE: typescript\nCODE:\n```\nimport {ContextProvider} from '@lit/context';\n```\n\n----------------------------------------\n\nTITLE: Using asyncAppend Directive with Async Generator in Lit\nDESCRIPTION: Demonstrates how to use the asyncAppend directive with an async generator to render a list of coin tosses.\nSOURCE: https://github.com/lit/lit.dev/blob/main/packages/lit-dev-content/site/docs/v3/templates/directives.md#2025-04-09_snippet_49\n\nLANGUAGE: typescript\nCODE:\n```\nasync function *tossCoins(count: number) {\n  for (let i=0; i<count; i++) {\n    yield Math.random() > 0.5 ? 'Heads' : 'Tails';\n    await new Promise((r) => setTimeout(r, 1000));\n  }\n}\n\n@customElement('my-element')\nclass MyElement extends LitElement {\n\n  @state()\n  private tosses = tossCoins(10);\n\n  render() {\n    return html`\n      <ul>${asyncAppend(this.tosses, (v: string) => html`<li>${v}</li>`)}</ul>`;\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Applying a Custom Decorator to a Lit Element Class Field in TypeScript\nDESCRIPTION: Example showing how to apply a custom decorator to a class field in a Lit element, which would trigger the initializer to add a controller for each instance.\nSOURCE: https://github.com/lit/lit.dev/blob/main/packages/lit-dev-content/site/docs/v2/components/lifecycle.md#2025-04-09_snippet_17\n\nLANGUAGE: typescript\nCODE:\n```\nclass MyElement extends LitElement {\n  @myDecorator foo;\n}\n```\n\n----------------------------------------\n\nTITLE: AsyncReplace Directive Usage Example\nDESCRIPTION: Example showing asyncReplace directive with countdown timer implementation.\nSOURCE: https://github.com/lit/lit.dev/blob/main/packages/lit-dev-content/site/docs/v2/templates/directives.md#2025-04-09_snippet_48\n\nLANGUAGE: typescript\nCODE:\n```\nasync function *countDown(count: number) {\n  while (count > 0) {\n    yield count--;\n    await new Promise((r) => setTimeout(r, 1000));\n  }\n}\n\n@customElement('my-element')\nclass MyElement extends LitElement {\n\n  @state()\n  private timer = countDown(10);\n\n  render() {\n    return html`Timer: <span>${asyncReplace(this.timer)}</span>.`;\n  }\n}\n```\n\nLANGUAGE: javascript\nCODE:\n```\nasync function *countDown(count) {\n  while (count > 0) {\n    yield count--;\n    await new Promise((r) => setTimeout(r, 1000));\n  }\n}\n\nclass MyElement extends LitElement {\n  static properties = {\n    timer: {state: true},\n  };\n\n  constructor() {\n    super();\n    this.timer = countDown(10);\n  }\n\n  render() {\n    return html`Timer: <span>${asyncReplace(this.timer)}</span>.`;\n  }\n}\ncustomElements.define('my-element', MyElement);\n```\n\n----------------------------------------\n\nTITLE: Using Async Promise Directive\nDESCRIPTION: Shows how to use the async promise resolution directive with a setTimeout example.\nSOURCE: https://github.com/lit/lit.dev/blob/main/packages/lit-dev-content/site/docs/v1/lit-html/creating-directives.md#2025-04-09_snippet_8\n\nLANGUAGE: javascript\nCODE:\n```\nconst waitForIt = new Promise((resolve, reject) => {\n  setTimeout(() => {\n    resolve(\"Promise is resolved.\");\n  }, 1000);\n});\n\nconst myTemplate = () =>\n   html`<div>${resolvePromise(waitForIt)}</div>`;\n```\n\n----------------------------------------\n\nTITLE: Configuring Reflected Attributes in LitElement\nDESCRIPTION: Shows how to set up reflected attributes in LitElement, where property changes are automatically reflected to the corresponding attribute.\nSOURCE: https://github.com/lit/lit.dev/blob/main/packages/lit-dev-content/site/docs/v1/components/properties.md#2025-04-09_snippet_9\n\nLANGUAGE: JavaScript\nCODE:\n```\n{% include \"v1-projects/properties/attributereflect/my-element.js\" %}\n```\n\n----------------------------------------\n\nTITLE: Example of Direct Format Function Usage in Lit Template\nDESCRIPTION: This code demonstrates how the format function could be used directly in a Lit template without a directive. It's provided as a comparison to show why a directive might be preferred for more complex scenarios.\nSOURCE: https://github.com/lit/lit.dev/blob/main/packages/lit-dev-content/site/tutorials/content/async-directive/03.md#2025-04-09_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\n// So far our directive is just equivalent to:\nreturn html`<p>The page was rendered ${format(timeCreated)}`;\n```\n\n----------------------------------------\n\nTITLE: Implementing Lazy Tooltip in Lit Component with TypeScript\nDESCRIPTION: Implementation of the firstUpdated lifecycle method in a Lit component to set up lazy tooltip creation. The method gets the greeting element and sets up the tooltip to be created only when the user interacts with it.\nSOURCE: https://github.com/lit/lit.dev/blob/main/packages/lit-dev-content/site/tutorials/content/tooltip/07.md#2025-04-09_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nimport {SimpleTooltip} from './simple-tooltip.js';\n\n@customElement('my-content')\nexport class MyContent extends LitElement {\n  // ...\n  firstUpdated() {\n    const greeting = this.shadowRoot!.getElementById('greeting')!;\n    SimpleTooltip.lazy(greeting, (tooltip: SimpleTooltip) => {\n      tooltip.textContent = `${this.name}, there's coffee available in the lounge.`;\n    });\n  }\n```\n\n----------------------------------------\n\nTITLE: Starting ES Dev Server\nDESCRIPTION: Command to start the ES dev server using the configured npm script.\nSOURCE: https://github.com/lit/lit.dev/blob/main/packages/lit-dev-content/site/docs/v1/getting-started.md#2025-04-09_snippet_13\n\nLANGUAGE: bash\nCODE:\n```\nnpm run serve\n```\n\n----------------------------------------\n\nTITLE: Creating Lists with Array.map in lit-html\nDESCRIPTION: Demonstrates how to render lists of items using Array.map to transform data into templates. This is a common approach for creating repeating templates in lit-html.\nSOURCE: https://github.com/lit/lit.dev/blob/main/packages/lit-dev-content/site/docs/v1/lit-html/writing-templates.md#2025-04-09_snippet_9\n\nLANGUAGE: javascript\nCODE:\n```\nhtml`\n  <ul>\n    ${items.map((item) => html`<li>${item}</li>`)}\n  </ul>\n`;\n```\n\n----------------------------------------\n\nTITLE: Incorrect Whitespace Usage with 'nothing' in Lit\nDESCRIPTION: Shows examples of incorrect whitespace usage that can interfere with the 'nothing' value and slot fallback content.\nSOURCE: https://github.com/lit/lit.dev/blob/main/packages/lit-dev-content/site/docs/v1/lit-html/writing-templates.md#2025-04-09_snippet_16\n\nLANGUAGE: js\nCODE:\n```\n// Whitespace around the binding means the fallback content\n// doesn't render\nhtml`\n<example-element> ${nothing} </example-element>\n`;\n// Line breaks count as whitespace, too\nhtml`\n<example-element>\n${nothing}\n</example-element>\n`;\n```\n\n----------------------------------------\n\nTITLE: ContextProvider Constructor\nDESCRIPTION: Constructor signature for the ContextProvider class showing initialization options.\nSOURCE: https://github.com/lit/lit.dev/blob/main/packages/lit-dev-content/site/docs/v3/data/context.md#2025-04-09_snippet_14\n\nLANGUAGE: typescript\nCODE:\n```\nContextProvider(\n  host: ReactiveElement,\n  options: {\n    context: T,\n    initialValue?: ContextType<T>\n  }\n)\n```\n\n----------------------------------------\n\nTITLE: Using asyncReplace Directive for Countdown Timer in Lit\nDESCRIPTION: Demonstrates how to use the asyncReplace directive with an async generator to create a countdown timer.\nSOURCE: https://github.com/lit/lit.dev/blob/main/packages/lit-dev-content/site/docs/v3/templates/directives.md#2025-04-09_snippet_51\n\nLANGUAGE: typescript\nCODE:\n```\nasync function *countDown(count: number) {\n  while (count > 0) {\n    yield count--;\n    await new Promise((r) => setTimeout(r, 1000));\n  }\n}\n\n@customElement('my-element')\nclass MyElement extends LitElement {\n\n  @state()\n  private timer = countDown(10);\n\n  render() {\n    return html`Timer: <span>${asyncReplace(this.timer)}</span>.`;\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Rendering and Updating DOM with lit-html\nDESCRIPTION: Demonstrates how to use the render() function to create and update DOM elements based on lit-html template results. The example shows initial rendering and subsequent DOM updates using the same container.\nSOURCE: https://github.com/lit/lit.dev/blob/main/packages/lit-dev-content/site/docs/v1/lit-html/rendering-templates.md#2025-04-09_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport {html, render} from 'lit-html';\n\nconst sayHi = (name) => html`<h1>Hello ${name}</h1>`;\nrender(sayHi('Amy'), document.body);\n\n// subsequent renders will update the DOM\nrender(sayHi('Zoe'), document.body);\n```\n\n----------------------------------------\n\nTITLE: Rollup Configuration for Localization\nDESCRIPTION: Rollup configuration setup for generating locale-specific bundles using TypeScript transformers.\nSOURCE: https://github.com/lit/lit.dev/blob/main/packages/lit-dev-content/site/docs/v2/localization/transform-mode.md#2025-04-09_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nimport typescript from '@rollup/plugin-typescript';\nimport {localeTransformers} from '@lit/localize-tools/lib/rollup.js';\nimport resolve from '@rollup/plugin-node-resolve';\nimport {terser} from 'rollup-plugin-terser';\n\nconst locales = localeTransformers();\n\nexport default locales.map(({locale, localeTransformer}) => ({\n  input: `src/index.ts`,\n  plugins: [\n    typescript({\n      transformers: {\n        before: [localeTransformer],\n      },\n    }),\n    resolve(),\n    terser(),\n  ],\n  output: {\n    file: `bundled/${locale}/index.js`,\n    format: 'es',\n  },\n}));\n```\n\nLANGUAGE: javascript\nCODE:\n```\nimport typescript from '@rollup/plugin-typescript';\nimport resolve from '@rollup/plugin-node-resolve';\nimport {terser} from 'rollup-plugin-terser';\nimport summary from 'rollup-plugin-summary';\nimport {localeTransformers} from '@lit/localize-tools/lib/rollup.js';\n\nconst locales = localeTransformers();\n\nexport default locales.map(({locale, localeTransformer}) => ({\n  input: `src/index.js`,\n  plugins: [\n    typescript({\n      transformers: {\n        before: [localeTransformer],\n      },\n      tsconfig: 'jsconfig.json',\n      outDir: 'bundled/temp',\n      include: ['src/**/*.js'],\n    }),\n    resolve(),\n    terser(),\n    summary({\n      showMinifiedSize: false,\n    }),\n  ],\n  output: {\n    file: `bundled/${locale}/index.js`,\n    format: 'es',\n    sourcemap: true,\n  },\n}));\n```\n\n----------------------------------------\n\nTITLE: Using Lit's firstUpdated Lifecycle Method\nDESCRIPTION: Shows how to use Lit's firstUpdated callback to perform operations after initial render, replacing Polymer's ready callback.\nSOURCE: https://github.com/lit/lit.dev/blob/main/packages/lit-dev-content/site/articles/article/lit-for-polymer-users.md#2025-04-09_snippet_18\n\nLANGUAGE: javascript\nCODE:\n```\nfirstUpdated() {\n this.renderRoot.getElementById('my-text-area').focus();\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Rollup for Modern-Only Lit Application Build\nDESCRIPTION: Rollup configuration file for building a modern-only Lit application. It includes plugins for HTML processing, module resolution, minification, and asset copying.\nSOURCE: https://github.com/lit/lit.dev/blob/main/packages/lit-dev-content/site/docs/v2/tools/production.md#2025-04-09_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\n// Import rollup plugins\nimport html from '@web/rollup-plugin-html';\nimport {copy} from '@web/rollup-plugin-copy';\nimport resolve from '@rollup/plugin-node-resolve';\nimport {terser} from '@rollup/plugin-terser';\nimport minifyHTML from 'rollup-plugin-minify-html-literals';\nimport summary from 'rollup-plugin-summary';\n\nexport default {\n  plugins: [\n    // Entry point for application build; can specify a glob to build multiple\n    // HTML files for non-SPA app\n    html({\n      input: 'index.html',\n    }),\n    // Resolve bare module specifiers to relative paths\n    resolve(),\n    // Minify HTML template literals\n    minifyHTML(),\n    // Minify JS\n    terser({\n      ecma: 2020,\n      module: true,\n      warnings: true,\n    }),\n    // Print bundle summary\n    summary(),\n    // Optional: copy any static assets to build directory\n    copy({\n      patterns: ['images/**/*'],\n    }),\n  ],\n  output: {\n    dir: 'build',\n  },\n  preserveEntrySignatures: 'strict',\n};\n```\n\n----------------------------------------\n\nTITLE: Importing IfDefined Directive in Lit\nDESCRIPTION: Import statement for the ifDefined directive used for conditional attribute rendering.\nSOURCE: https://github.com/lit/lit.dev/blob/main/packages/lit-dev-content/site/docs/v2/templates/directives.md#2025-04-09_snippet_19\n\nLANGUAGE: javascript\nCODE:\n```\nimport {ifDefined} from 'lit/directives/if-defined.js';\n```\n\n----------------------------------------\n\nTITLE: Translated XLIFF File Example (XML)\nDESCRIPTION: Example of a translated XLIFF file (es-419.xlf) with added target elements containing the translated content for each message.\nSOURCE: https://github.com/lit/lit.dev/blob/main/packages/lit-dev-content/site/docs/v3/localization/overview.md#2025-04-09_snippet_7\n\nLANGUAGE: xml\nCODE:\n```\n<!-- xliff/es-419.xlf -->\n\n<trans-unit id=\"s3d58dee72d4e0c27\">\n  <source>Hello World</source>\n  <target>Hola Mundo</target>\n</trans-unit>\n\n<trans-unit id=\"saed7d3734ce7f09d\">\n  <source>Hello <x equiv-text=\"${name}\"/></source>\n  <target>Hola <x equiv-text=\"${name}\"/></target>\n</trans-unit>\n\n<trans-unit id=\"hf71d669027554f48\">\n  <source>Hello <x equiv-text=\"&lt;b&gt;\"/>World<x equiv-text=\"&lt;/b&gt;\"/></source>\n  <target>Hola <x equiv-text=\"&lt;b&gt;\"/>Mundo<x equiv-text=\"&lt;/b&gt;\"/></target>\n</trans-unit>\n```\n\n----------------------------------------\n\nTITLE: Basic Class-based Directive Implementation\nDESCRIPTION: Example showing how to create and use a basic class-based directive that extends the Directive class.\nSOURCE: https://github.com/lit/lit.dev/blob/main/packages/lit-dev-content/site/docs/v3/templates/custom-directives.md#2025-04-09_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nimport {Directive, directive} from 'lit/directive.js';\n\n// Define directive\nclass HelloDirective extends Directive {\n  render() {\n    return `Hello!`;\n  }\n}\n// Create the directive function\nconst hello = directive(HelloDirective);\n\n// Use directive\nconst template = html`<div>${hello()}</div>`;\n```\n\n----------------------------------------\n\nTITLE: Installing Lit Localization libraries\nDESCRIPTION: Command to install the Lit localization client library and the command-line interface for localization tools.\nSOURCE: https://github.com/lit/lit.dev/blob/main/packages/lit-dev-content/site/docs/v2/localization/overview.md#2025-04-09_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\nnpm i @lit/localize\nnpm i -D @lit/localize-tools\n```\n\n----------------------------------------\n\nTITLE: Using 'nothing' with Slotted Content in Lit\nDESCRIPTION: Demonstrates the use of 'nothing' in a conditional rendering scenario with a custom element that has a slot.\nSOURCE: https://github.com/lit/lit.dev/blob/main/packages/lit-dev-content/site/docs/v1/lit-html/writing-templates.md#2025-04-09_snippet_15\n\nLANGUAGE: js\nCODE:\n```\nimport {nothing, html} from 'lit-html';\n\nhtml`\n<example-element>${user.isAdmin\n        ? html`<button>DELETE</button>`\n        : nothing\n      }</example-element>\n`;\n```\n\n----------------------------------------\n\nTITLE: Using Task Controller for Async Data Fetching in Lit (TypeScript)\nDESCRIPTION: Example of using the Task controller to fetch product data from an API when the productId changes. It demonstrates handling loading, success, and error states.\nSOURCE: https://github.com/lit/lit.dev/blob/main/packages/lit-dev-content/site/docs/v3/data/task.md#2025-04-09_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport {Task} from '@lit/task';\n\nclass MyElement extends LitElement {\n  @property() productId?: string;\n\n  private _productTask = new Task(this, {\n    task: async ([productId], {signal}) => {\n      const response = await fetch(`http://example.com/product/${productId}`, {signal});\n      if (!response.ok) { throw new Error(response.status); }\n      return response.json() as Product;\n    },\n    args: () => [this.productId]\n  });\n\n  render() {\n    return this._productTask.render({\n      pending: () => html`<p>Loading product...</p>`,\n      complete: (product) => html`\n          <h1>${product.name}</h1>\n          <p>${product.price}</p>\n        `,\n      error: (e) => html`<p>Error: ${e}</p>`\n    });\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Importing asyncAppend Directive in Lit\nDESCRIPTION: Shows how to import the asyncAppend directive for appending values from an AsyncIterable.\nSOURCE: https://github.com/lit/lit.dev/blob/main/packages/lit-dev-content/site/docs/v3/templates/directives.md#2025-04-09_snippet_48\n\nLANGUAGE: javascript\nCODE:\n```\nimport {asyncAppend} from 'lit/directives/async-append.js';\n```\n\n----------------------------------------\n\nTITLE: Defining TypeScript Typings for Lit Components\nDESCRIPTION: Shows how to add an HTMLElementTagNameMap entry for a Lit component in TypeScript, enhancing type support for users.\nSOURCE: https://github.com/lit/lit.dev/blob/main/packages/lit-dev-content/site/docs/v3/tools/publishing.md#2025-04-09_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\n@customElement('my-element')\nexport class MyElement extends LitElement { /* ... */ }\n\ndeclare global {\n  interface HTMLElementTagNameMap {\n    \"my-element\": MyElement;\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Up WebdriverIO for Lit Component Testing\nDESCRIPTION: Command to initialize WebdriverIO in a project using its configuration wizard, which supports Lit component testing.\nSOURCE: https://github.com/lit/lit.dev/blob/main/packages/lit-dev-content/site/docs/v3/tools/testing.md#2025-04-09_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nnpm init wdio@latest ./\n```\n\n----------------------------------------\n\nTITLE: Setting Initial Property Value from Attribute in HTML\nDESCRIPTION: This HTML snippet shows how to provide an initial value for a property using an attribute in the markup.\nSOURCE: https://github.com/lit/lit.dev/blob/main/packages/lit-dev-content/site/docs/v2/components/properties.md#2025-04-09_snippet_12\n\nLANGUAGE: html\nCODE:\n```\n<my-element myvalue=\"99\"></my-element>\n```\n\n----------------------------------------\n\nTITLE: Setting Initial Property Value from Attribute in HTML\nDESCRIPTION: This HTML snippet shows how to provide an initial value for a property using an attribute in the markup.\nSOURCE: https://github.com/lit/lit.dev/blob/main/packages/lit-dev-content/site/docs/v2/components/properties.md#2025-04-09_snippet_12\n\nLANGUAGE: html\nCODE:\n```\n<my-element myvalue=\"99\"></my-element>\n```\n\n----------------------------------------\n\nTITLE: Inspecting Custom Element in Browser Console\nDESCRIPTION: This JavaScript code can be run in the browser console to verify that the custom element has been properly defined. It retrieves the constructor of the 'rating-element' from the document.\nSOURCE: https://github.com/lit/lit.dev/blob/main/packages/lit-dev-content/site/tutorials/content/wc-to-lit/01.md#2025-04-09_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\ndocument.querySelector('rating-element').constructor\n```\n\n----------------------------------------\n\nTITLE: Importing cache Directive in Lit\nDESCRIPTION: Shows how to import the cache directive from Lit's directives module.\nSOURCE: https://github.com/lit/lit.dev/blob/main/packages/lit-dev-content/site/docs/v2/templates/directives.md#2025-04-09_snippet_21\n\nLANGUAGE: javascript\nCODE:\n```\nimport {cache} from 'lit/directives/cache.js';\n```\n\n----------------------------------------\n\nTITLE: Implementing a Duplicate Directive with Nested Parts in lit-html\nDESCRIPTION: A complete example of a custom directive that renders a value twice by creating two nested parts. It maintains state between renders using a WeakMap to store the nested parts associated with each directive instance.\nSOURCE: https://github.com/lit/lit.dev/blob/main/packages/lit-dev-content/site/docs/v1/lit-html/creating-directives.md#2025-04-09_snippet_12\n\nLANGUAGE: javascript\nCODE:\n```\n// Import lit-html APIs\nimport {html, render, directive, NodePart, appendIntoPart} from 'lit-html';\n\n// Stores the nested parts associated with a single instance of the directive\nconst nestedPartMap = new WeakMap();\n\n// Creates a new nested part and adds it to the DOM\n// managed by containerPart\nconst createAndAppendPart = (containerPart) => {\n  const newPart = new NodePart(containerPart.options);\n  newPart.appendIntoPart(containerPart);\n\n  return newPart;\n}\n\n// duplicate directive takes a single value, and renders it\n// in the DOM twice\nconst duplicate = directive((value) => {\n\n  // the directive function itself\n  return (containerPart) => {\n    if (!(containerPart instanceof NodePart)) {\n      throw new Error('duplicate directive can only be used in content bindings');\n    }\n\n    let part1, part2;\n    const nestedParts = nestedPartMap.get(containerPart);\n    if (nestedParts === undefined) {\n      // create parts\n      part1 = createAndAppendPart(containerPart);\n      part2 = createAndAppendPart(containerPart);\n      nestedPartMap.set(containerPart, [part1, part2]);\n    } else {\n      [part1, part2] = nestedParts;\n    }\n\n    // for imperatively created parts, need to call commit()\n    // after setValue()\n    part1.setValue(value);\n    part1.commit();\n    part2.setValue(value);\n    part2.commit();\n  }\n});\n```\n\n----------------------------------------\n\nTITLE: Loading ES5 Adapter and Web Components Polyfills in HTML\nDESCRIPTION: Shows the proper loading order for polyfills when using ES5-compiled code with web components. The adapter must be loaded after Babel polyfills but before web components polyfills.\nSOURCE: https://github.com/lit/lit.dev/blob/main/packages/lit-dev-content/site/docs/v2/tools/requirements.md#2025-04-09_snippet_4\n\nLANGUAGE: html\nCODE:\n```\n<script src=\"path/to/js/polyfills/you/need.js\"></script>\n<script src=\"node_modules/@webcomponents/webcomponentsjs/custom-elements-es5-adapter.js\"></script>\n<script src=\"node_modules/lit/polyfill-support.js\"></script>\n<script src=\"node_modules/@webcomponents/webcomponentsjs/webcomponents-loader.js\"></script>\n<!-- Load application code here -->\n```\n\n----------------------------------------\n\nTITLE: Setting Event Listener Options with Decorator in Lit\nDESCRIPTION: Shows how to use the @eventOptions decorator to set options for declarative event listeners in Lit components.\nSOURCE: https://github.com/lit/lit.dev/blob/main/packages/lit-dev-content/site/docs/v1/components/events.md#2025-04-09_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\nimport {LitElement, html, eventOptions} from 'lit-element';\n...\n\n@eventOptions({passive: true})\nprivate _handleTouchStart() { ... }\n\nrender() {\n  return html`\n    <div @touchstart=${this._handleTouchStart}><div>\n  `;\n}\n```\n\n----------------------------------------\n\nTITLE: Running the development server\nDESCRIPTION: Command to start the development server for previewing the Lit component in a browser.\nSOURCE: https://github.com/lit/lit.dev/blob/main/packages/lit-dev-content/site/docs/v2/tools/starter-kits.md#2025-04-09_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nnpm run serve\n```\n\n----------------------------------------\n\nTITLE: Creating Lists with Looping Statements in lit-html\nDESCRIPTION: Shows how to build an array of templates using a for loop and then include the array in a template binding. This provides more control over list creation logic.\nSOURCE: https://github.com/lit/lit.dev/blob/main/packages/lit-dev-content/site/docs/v1/lit-html/writing-templates.md#2025-04-09_snippet_10\n\nLANGUAGE: javascript\nCODE:\n```\nconst itemTemplates = [];\nfor (const i of items) {\n  itemTemplates.push(html`<li>${i}</li>`);\n}\n\nhtml`\n  <ul>\n    ${itemTemplates}\n  </ul>\n`;\n```\n\n----------------------------------------\n\nTITLE: Generated XLIFF File Example (XML)\nDESCRIPTION: Example of a generated XLIFF file (es-419.xlf) containing extracted messages with their unique IDs and source content.\nSOURCE: https://github.com/lit/lit.dev/blob/main/packages/lit-dev-content/site/docs/v3/localization/overview.md#2025-04-09_snippet_6\n\nLANGUAGE: xml\nCODE:\n```\n<!-- xliff/es-419.xlf -->\n\n<trans-unit id=\"s3d58dee72d4e0c27\">\n  <source>Hello World</source>\n</trans-unit>\n\n<trans-unit id=\"saed7d3734ce7f09d\">\n  <source>Hello <x equiv-text=\"${name}\"/></source>\n</trans-unit>\n\n<trans-unit id=\"hf71d669027554f48\">\n  <source>Hello <x equiv-text=\"&lt;b&gt;\"/>World<x equiv-text=\"&lt;/b&gt;\"/></source>\n</trans-unit>\n```\n\n----------------------------------------\n\nTITLE: Importing asyncReplace Directive in Lit\nDESCRIPTION: Shows how to import the asyncReplace directive for rendering the latest value from an AsyncIterable.\nSOURCE: https://github.com/lit/lit.dev/blob/main/packages/lit-dev-content/site/docs/v3/templates/directives.md#2025-04-09_snippet_50\n\nLANGUAGE: javascript\nCODE:\n```\nimport {asyncReplace} from 'lit/directives/async-replace.js';\n```\n\n----------------------------------------\n\nTITLE: Implementing Automatic Re-render on Locale Change in JavaScript\nDESCRIPTION: Shows how to use the updateWhenLocaleChanges function in JavaScript to make a Lit component automatically re-render when the locale changes.\nSOURCE: https://github.com/lit/lit.dev/blob/main/packages/lit-dev-content/site/docs/v2/localization/runtime-mode.md#2025-04-09_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nimport {LitElement, html} from 'lit';\nimport {msg, updateWhenLocaleChanges} from '@lit/localize';\n\nclass MyElement extends LitElement {\n  constructor() {\n    super();\n    updateWhenLocaleChanges(this);\n  }\n\n  render() {\n    // Whenever setLocale() is called, and templates for that locale have\n    // finished loading, this render() function will be re-invoked.\n    return msg(html`Hello <b>World!</b>`);\n  }\n}\ncustomElements.define('my-element', MyElement);\n```\n\n----------------------------------------\n\nTITLE: Stateful Directive with WeakMap\nDESCRIPTION: Demonstrates how to maintain state between renders using a WeakMap for memory-safe state storage.\nSOURCE: https://github.com/lit/lit.dev/blob/main/packages/lit-dev-content/site/docs/v1/lit-html/creating-directives.md#2025-04-09_snippet_9\n\nLANGUAGE: javascript\nCODE:\n```\nimport {directive} from 'lit-html';\n\n// Define the map at module level\nconst stateMap = new WeakMap();\n\nconst statefulDirective = directive(() => (part) => {\n  let myState = stateMap.get(part);\n  if (myState === undefined) {\n    // Initialize state for this location\n    myState = {};\n    stateMap.set(part, myState);\n  }\n  // ... use the state somehow\n});\n```\n\n----------------------------------------\n\nTITLE: Configuring Babel for Universal Build in JavaScript\nDESCRIPTION: This Babel configuration is used in the universal build to compile code for older browsers, specifically targeting Internet Explorer 11 compatibility.\nSOURCE: https://github.com/lit/lit.dev/blob/main/packages/lit-dev-content/site/docs/v1/tools/build.md#2025-04-09_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport babel from 'rollup-plugin-babel';\n...\n\nconst babelConfig = {\n  babelrc: false,\n  ...{\n    presets: [\n      [\n        '@babel/preset-env',\n        {\n          targets: {\n            ie: '11',\n          },\n        },\n      ],\n    ],\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: Using accessor Keyword with Lit Property Decorator\nDESCRIPTION: Demonstrates how to use the new accessor keyword with @property() decorator to create auto accessors for class fields. This creates accessors on the prototype backed by private storage.\nSOURCE: https://github.com/lit/lit.dev/blob/main/packages/lit-dev-content/site/docs/v3/releases/upgrade.md#2025-04-09_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\nclass MyElement extends LitElement {\n  @property()\n  accessor myProperty = \"initial value\"\n...\n}\n```\n\n----------------------------------------\n\nTITLE: Displaying Dynamic Content with Custom HTML Element in HTML\nDESCRIPTION: This code snippet shows another instance of the '<ts-js>' custom element, used to display different line counts for JavaScript and TypeScript versions of a Lit-based web component.\nSOURCE: https://github.com/lit/lit.dev/blob/main/packages/lit-dev-content/site/tutorials/content/wc-to-lit/13.md#2025-04-09_snippet_1\n\nLANGUAGE: html\nCODE:\n```\n<ts-js>\n  <span slot=\"js\">75</span>\n  <span slot=\"ts\">68</span>\n</ts-js>\n```\n\n----------------------------------------\n\nTITLE: Join Directive Usage Example\nDESCRIPTION: Shows how to use the join directive to add separators between menu items.\nSOURCE: https://github.com/lit/lit.dev/blob/main/packages/lit-dev-content/site/docs/v2/templates/directives.md#2025-04-09_snippet_16\n\nLANGUAGE: typescript\nCODE:\n```\nclass MyElement extends LitElement {\n\n  render() {\n    return html`\n      ${join(\n        map(menuItems, (i) => html`<a href=${i.href}>${i.label}</a>`),\n        html`<span class=\"separator\">|</span>`\n      )}\n    `;\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Using until Directive in Lit-html\nDESCRIPTION: Shows how to render placeholder content while waiting for final content using the until directive. Useful for handling async data and loading states.\nSOURCE: https://github.com/lit/lit.dev/blob/main/packages/lit-dev-content/site/docs/v1/lit-html/template-reference.md#2025-04-09_snippet_17\n\nLANGUAGE: javascript\nCODE:\n```\nimport {until} from 'lit-html/directives/until.js';\n\nconst content = fetch('./content.txt').then(r => r.text());\n\nhtml`${until(content, html`<span>Loading...</span>`)}`\n```\n\n----------------------------------------\n\nTITLE: XLIFF Representation of Message Description (XML)\nDESCRIPTION: Example of how message descriptions are represented in XLIFF files using the note element.\nSOURCE: https://github.com/lit/lit.dev/blob/main/packages/lit-dev-content/site/docs/v3/localization/overview.md#2025-04-09_snippet_10\n\nLANGUAGE: xml\nCODE:\n```\n<trans-unit id=\"s512957aa09384646\">\n  <source>Launch</source>\n  <note from=\"lit-localize\">Button that begins rocket launch sequence.</note>\n</trans-unit>\n```\n\n----------------------------------------\n\nTITLE: TypeScript Signature for templateContent\nDESCRIPTION: Type definition for the templateContent directive function.\nSOURCE: https://github.com/lit/lit.dev/blob/main/packages/lit-dev-content/site/docs/v3/templates/directives.md#2025-04-09_snippet_35\n\nLANGUAGE: typescript\nCODE:\n```\ntemplateContent(templateElement: HTMLTemplateElement)\n```\n\n----------------------------------------\n\nTITLE: Handling Update Errors with try/catch in JavaScript\nDESCRIPTION: Example of how to use try/catch when awaiting the updateComplete promise to properly handle errors that might occur during a Lit component's update cycle.\nSOURCE: https://github.com/lit/lit.dev/blob/main/packages/lit-dev-content/site/docs/v2/components/lifecycle.md#2025-04-09_snippet_12\n\nLANGUAGE: javascript\nCODE:\n```\ntry {\n  await this.updateComplete;\n} catch (e) {\n  /* handle error */\n}\n```\n\n----------------------------------------\n\nTITLE: Importing Guard Directive in Lit\nDESCRIPTION: Shows how to import the guard directive from Lit library.\nSOURCE: https://github.com/lit/lit.dev/blob/main/packages/lit-dev-content/site/docs/v3/templates/directives.md#2025-04-09_snippet_28\n\nLANGUAGE: javascript\nCODE:\n```\nimport {guard} from 'lit/directives/guard.js';\n```\n\n----------------------------------------\n\nTITLE: Localizing a plain string\nDESCRIPTION: Example of localizing a simple string using the msg function without any expressions or HTML.\nSOURCE: https://github.com/lit/lit.dev/blob/main/packages/lit-dev-content/site/docs/v2/localization/overview.md#2025-04-09_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nmsg('Hello World');\n```\n\n----------------------------------------\n\nTITLE: Importing lit-html from CDN in JavaScript\nDESCRIPTION: Example of importing lit-html core functions from a CDN using ES modules in JavaScript.\nSOURCE: https://github.com/lit/lit.dev/blob/main/packages/lit-dev-content/site/docs/v1/lit-html/getting-started.md#2025-04-09_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport {html, render} from 'https://esm.run/lit-html@1';\n```\n\n----------------------------------------\n\nTITLE: Installing Babel Dependencies for Lit Component Compilation\nDESCRIPTION: Shows the npm command to install Babel and necessary plugins for compiling Lit components with proposed JavaScript features.\nSOURCE: https://github.com/lit/lit.dev/blob/main/packages/lit-dev-content/site/docs/v3/tools/publishing.md#2025-04-09_snippet_3\n\nLANGUAGE: sh\nCODE:\n```\nnpm install --save-dev \\\n  @babel/core \\\n  @babel/cli \\\n  @babel/preset-env \\\n  @babel/plugin-proposal-decorators\n```\n\n----------------------------------------\n\nTITLE: Forcing Analysis of Localize API in TypeScript\nDESCRIPTION: This snippet shows how to force a function to be analyzed as a @lit/localize API using a type cast in TypeScript.\nSOURCE: https://github.com/lit/lit.dev/blob/main/packages/lit-dev-content/site/docs/v3/localization/best-practices.md#2025-04-09_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\nconst myMsg = ... as typeof import('@lit/localize').msg;\n```\n\n----------------------------------------\n\nTITLE: Rendering Controller State in Lit Component\nDESCRIPTION: Shows how to use a controller's state within the render method of a Lit component. This example displays the current time from a clock controller.\nSOURCE: https://github.com/lit/lit.dev/blob/main/packages/lit-dev-content/site/docs/v3/composition/controllers.md#2025-04-09_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nrender() {\n  return html`\n    <div>Current time: ${this.clock.value}</div>\n  `;\n}\n```\n\n----------------------------------------\n\nTITLE: Invalid Binding Examples\nDESCRIPTION: Shows incorrect binding placements that will cause errors.\nSOURCE: https://github.com/lit/lit.dev/blob/main/packages/lit-dev-content/site/docs/v1/lit-html/template-reference.md#2025-04-09_snippet_3\n\nLANGUAGE: html\nCODE:\n```\n<!-- ERROR -->\n<${tagName}></${tagName}>\n\n<!-- ERROR -->\n<div ${attrName}=true></div>\n```\n\n----------------------------------------\n\nTITLE: Configuring Rollup for Lit Production Build\nDESCRIPTION: Rollup configuration file that sets up a modern browser build with HTML processing, module resolution, minification, and asset copying. Includes optimization for ES2021 and module-based code.\nSOURCE: https://github.com/lit/lit.dev/blob/main/packages/lit-dev-content/site/docs/v3/tools/production.md#2025-04-09_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\n// Import rollup plugins\nimport html from '@web/rollup-plugin-html';\nimport {copy} from '@web/rollup-plugin-copy';\nimport resolve from '@rollup/plugin-node-resolve';\nimport {terser} from '@rollup/plugin-terser';\nimport minifyHTML from 'rollup-plugin-minify-html-literals';\nimport summary from 'rollup-plugin-summary';\n\nexport default {\n  plugins: [\n    // Entry point for application build; can specify a glob to build multiple\n    // HTML files for non-SPA app\n    html({\n      input: 'index.html',\n    }),\n    // Resolve bare module specifiers to relative paths\n    resolve(),\n    // Minify HTML template literals\n    minifyHTML(),\n    // Minify JS\n    terser({\n      ecma: 2021,\n      module: true,\n      warnings: true,\n    }),\n    // Print bundle summary\n    summary(),\n    // Optional: copy any static assets to build directory\n    copy({\n      patterns: ['images/**/*'],\n    }),\n  ],\n  output: {\n    dir: 'build',\n  },\n  preserveEntrySignatures: 'strict',\n};\n```\n\n----------------------------------------\n\nTITLE: Using live Directive in Lit-html\nDESCRIPTION: Shows how to use the live directive to check binding values against live DOM values instead of previously bound values. Useful for elements that may change outside of lit-html.\nSOURCE: https://github.com/lit/lit.dev/blob/main/packages/lit-dev-content/site/docs/v1/lit-html/template-reference.md#2025-04-09_snippet_11\n\nLANGUAGE: javascript\nCODE:\n```\nhtml`<input .value=${live(x)}>`\n```\n\n----------------------------------------\n\nTITLE: Example of Shared Message IDs in JavaScript\nDESCRIPTION: Demonstrates how identical messages in different files share the same automatically generated ID.\nSOURCE: https://github.com/lit/lit.dev/blob/main/packages/lit-dev-content/site/docs/v3/localization/overview.md#2025-04-09_snippet_11\n\nLANGUAGE: js\nCODE:\n```\n// file1.js\nmsg('Hello World');\n\n// file2.js\nmsg('Hello World');\n```\n\n----------------------------------------\n\nTITLE: Rendering SVG Elements in a Lit Component\nDESCRIPTION: This code snippet shows how to render SVG elements, including definitions and a tile, within a Lit component. It uses the previously defined createTileBoundary, createElement, and createMotif functions.\nSOURCE: https://github.com/lit/lit.dev/blob/main/packages/lit-dev-content/site/tutorials/content/svg-templates/03.md#2025-04-09_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nexport class RepeatPattern extends LitElement {\n  ...\n\n  render() {\n    return html`\n      <svg height=\"100%\" width=\"100%\">\n        <defs>\n          ${createTileBoundary()}\n          ${createElement(this.chars)}\n          ${createMotif(\n            this.numPrints,\n            this.rotationOffset,\n          )}\n        </defs>\n      </svg>\n    `;\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Grouping SVG Elements with <g>\nDESCRIPTION: This example shows how to use the <g> element to apply a transformation to multiple child elements, including a <use> element with its own transformation.\nSOURCE: https://github.com/lit/lit.dev/blob/main/packages/lit-dev-content/site/tutorials/content/svg-templates/02.md#2025-04-09_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nconst helloGroups = svg`\n  <defs>\n    <text id=\"chars\">Hello defs!</text>\n  </defs>\n  <g transform=\"translate(50, 50)\">\n    <use\n      href=\"#chars\"\n      transform=\"rotate(${currRotation}, 0,0)\">\n    </use>\n  </g>\n`;\n```\n\n----------------------------------------\n\nTITLE: Using unsafeStatic for Dynamic Tag Names (JavaScript)\nDESCRIPTION: JavaScript version of using unsafeStatic for dynamic but trusted content in templates, with warnings about XSS vulnerabilities.\nSOURCE: https://github.com/lit/lit.dev/blob/main/packages/lit-dev-content/site/docs/v3/templates/expressions.md#2025-04-09_snippet_26\n\nLANGUAGE: javascript\nCODE:\n```\nclass MyButton extends LitElement {\n  static properties = {\n    caption: {},\n    active: {type: Boolean},\n  };\n\n  constructor() {\n    super();\n    this.caption = 'Hello static';\n    this.active = false;\n  }\n\n  render() {\n    // These strings MUST be trusted, otherwise this is an XSS vulnerability\n    const tag = getTagName();\n    const activeAttribute = getActiveAttribute();\n    // html should be imported from `lit/static-html.js`\n    return html`\n      <${unsafeStatic(tag)} ${unsafeStatic(activeAttribute)}=${this.active}>\n        <p>${this.caption}</p>\n      </${unsafeStatic(tag)}>`;\n  }\n}\ncustomElements.define('my-button', MyButton);\n```\n\n----------------------------------------\n\nTITLE: ContextRoot Constructor\nDESCRIPTION: The constructor signature for the ContextRoot class which can be used to manage context requests and providers.\nSOURCE: https://github.com/lit/lit.dev/blob/main/packages/lit-dev-content/site/docs/v2/data/context.md#2025-04-09_snippet_28\n\nLANGUAGE: ts\nCODE:\n```\nContextRoot()\n```\n\n----------------------------------------\n\nTITLE: Implementing Event Handler Method in Lit Component\nDESCRIPTION: Implements the changeName event handler method in both TypeScript and JavaScript. The handler updates the name property with the input value, triggering a component update due to reactivity.\nSOURCE: https://github.com/lit/lit.dev/blob/main/packages/lit-dev-content/site/tutorials/content/intro-to-lit/03.md#2025-04-09_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nchangeName(event: Event) {\n  const input = event.target as HTMLInputElement;\n  this.name = input.value;\n}\n```\n\nLANGUAGE: javascript\nCODE:\n```\nchangeName(event) {\n  const input = event.target;\n  this.name = input.value;\n}\n```\n\n----------------------------------------\n\nTITLE: Using guard Directive in Lit-html\nDESCRIPTION: Demonstrates the guard directive which optimizes rendering by only re-evaluating values when dependencies change. Useful for preventing expensive operations with immutable data patterns.\nSOURCE: https://github.com/lit/lit.dev/blob/main/packages/lit-dev-content/site/docs/v1/lit-html/template-reference.md#2025-04-09_snippet_10\n\nLANGUAGE: javascript\nCODE:\n```\nimport {guard} from 'lit-html/directives/guard';\n\nconst template = html`\n  <div>\n    ${guard([immutableItems], () => immutableItems.map(item => html`${item}`))}  </div>\n`;\n```\n\n----------------------------------------\n\nTITLE: Overriding Message IDs in JavaScript\nDESCRIPTION: Demonstrates how to override automatically generated message IDs using the id option, useful for distinguishing between identical strings with different meanings.\nSOURCE: https://github.com/lit/lit.dev/blob/main/packages/lit-dev-content/site/docs/v3/localization/overview.md#2025-04-09_snippet_14\n\nLANGUAGE: js\nCODE:\n```\nmsg('Buffalo', {id: 'buffalo-animal-singular'});\nmsg('Buffalo', {id: 'buffalo-animal-plural'});\nmsg('Buffalo', {id: 'buffalo-city'});\nmsg('Buffalo', {id: 'buffalo-verb'});\n```\n\n----------------------------------------\n\nTITLE: Handling Slot Changes and Text Content Extraction\nDESCRIPTION: Event handler for slotchange events that extracts and concatenates text content from all slotted children. Includes render method showing slot setup with event listener.\nSOURCE: https://github.com/lit/lit.dev/blob/main/packages/lit-dev-content/site/docs/v1/components/templates.md#2025-04-09_snippet_16\n\nLANGUAGE: javascript\nCODE:\n```\nhandleSlotchange(e) {\n  const childNodes = e.target.assignedNodes({flatten: true});\n  // ... do something with childNodes ...\n  this.allText = Array.prototype.map.call(childNodes, (node) => {\n    return node.textContent ? node.textContent : ''\n  }).join('');\n}\n\nrender() {\n  return html`<slot @slotchange=${this.handleSlotchange}></slot>`;\n}\n```\n\n----------------------------------------\n\nTITLE: Provider Decorator Signature\nDESCRIPTION: Signature showing how to use the @provide decorator with a Context object.\nSOURCE: https://github.com/lit/lit.dev/blob/main/packages/lit-dev-content/site/docs/v3/data/context.md#2025-04-09_snippet_10\n\nLANGUAGE: typescript\nCODE:\n```\n@provide({context: Context})\n```\n\n----------------------------------------\n\nTITLE: Importing Styles as a String in Lit Components\nDESCRIPTION: Demonstrates how to apply trusted styles as a string to a Lit component using native, constructable stylesheets. This approach should be used cautiously due to potential security risks.\nSOURCE: https://github.com/lit/lit.dev/blob/main/packages/lit-dev-content/site/articles/article/lit-cheat-sheet.md#2025-04-09_snippet_18\n\nLANGUAGE: javascript\nCODE:\n```\nimport {LitElement, html} from 'lit';\n\nconst trustedCSSText = `\n  p { color: green; }\n`;\n\nclass MyElement extends LitElement {\n  static styles = new CSSStyleSheet();\n\n  constructor() {\n    super();\n    MyElement.styles.replaceSync(trustedCSSText);\n  }\n\n  render() {\n    return html`<p>I should be green</p>`;\n  }\n}\ncustomElements.define('my-element', MyElement);\n```\n\n----------------------------------------\n\nTITLE: Global Scope SSR Implementation\nDESCRIPTION: Example showing how to implement SSR using global scope with Koa middleware.\nSOURCE: https://github.com/lit/lit.dev/blob/main/packages/lit-dev-content/site/docs/v3/ssr/server-usage.md#2025-04-09_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\nimport {render} from '@lit-labs/ssr';\nimport {RenderResultReadable} from '@lit-labs/ssr/lib/render-result-readable.js';\nimport {myTemplate} from './my-template.js';\n\n// ...\n\n// within a Koa middleware, for example\napp.use(async (ctx) => {\n  const ssrResult = render(myTemplate(data));\n  ctx.type = 'text/html';\n  ctx.body = new RenderResultReadable(ssrResult);\n});\n```\n\n----------------------------------------\n\nTITLE: Setting Up Transition End Listener in JavaScript\nDESCRIPTION: JavaScript implementation of the constructor with transitionend event listener and initial property values.\nSOURCE: https://github.com/lit/lit.dev/blob/main/packages/lit-dev-content/site/tutorials/content/tooltip/06.md#2025-04-09_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\nconstructor() {\n  super();\n  // Finish hiding at end of animation\n  this.addEventListener('transitionend', this.finishHide);\n  this.offset = 4;\n  this.showing = false;\n}\n```\n\n----------------------------------------\n\nTITLE: ContextProvider Constructor\nDESCRIPTION: The constructor signature for the ContextProvider class which adds context provider behavior to a custom element.\nSOURCE: https://github.com/lit/lit.dev/blob/main/packages/lit-dev-content/site/docs/v2/data/context.md#2025-04-09_snippet_24\n\nLANGUAGE: ts\nCODE:\n```\nContextProvider(\n  host: ReactiveElement,\n  context: T,\n  initialValue?: ContextType<T>\n)\n```\n\n----------------------------------------\n\nTITLE: Rendering Task States in Lit Component\nDESCRIPTION: Example of using the Task controller's render method to handle different task states (initial, pending, complete, and error) in a Lit component's render method.\nSOURCE: https://github.com/lit/lit.dev/blob/main/packages/lit-dev-content/site/docs/v3/data/task.md#2025-04-09_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\n  render() {\n    return html`\n      ${this._myTask.render({\n        initial: () => html`<p>Waiting to start task</p>`,\n        pending: () => html`<p>Running task...</p>`,\n        complete: (value) => html`<p>The task completed with: ${value}</p>`,\n        error: (error) => html`<p>Oops, something went wrong: ${error}</p>`,\n      })}\n    `;\n  }\n```\n\n----------------------------------------\n\nTITLE: Managing Global Event Listeners in Lit Components\nDESCRIPTION: Shows how to properly add event listeners to global nodes like document or window in connectedCallback and remove them in disconnectedCallback to prevent memory leaks.\nSOURCE: https://github.com/lit/lit.dev/blob/main/packages/lit-dev-content/site/articles/article/lit-cheat-sheet.md#2025-04-09_snippet_35\n\nLANGUAGE: typescript\nCODE:\n```\n{% playground-ide \"articles/lit-cheat-sheet/global-listeners\", true %}\n```\n\n----------------------------------------\n\nTITLE: Array Mapping Example\nDESCRIPTION: Shows how to render lists using Array.map in templates.\nSOURCE: https://github.com/lit/lit.dev/blob/main/packages/lit-dev-content/site/docs/v1/lit-html/template-reference.md#2025-04-09_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\nhtml`\n  <ul>\n    ${items.map((i) => html`<li>${i}</li>`)}\n  </ul>\n`;\n```\n\n----------------------------------------\n\nTITLE: Using classMap Directive in Lit-html\nDESCRIPTION: Demonstrates how to use classMap directive to conditionally apply CSS classes based on object properties. The directive must be the only binding in the class attribute but can be combined with static values.\nSOURCE: https://github.com/lit/lit.dev/blob/main/packages/lit-dev-content/site/docs/v1/lit-html/template-reference.md#2025-04-09_snippet_8\n\nLANGUAGE: javascript\nCODE:\n```\nimport {classMap} from 'lit-html/directives/class-map.js';\n\nlet classes = { highlight: true, enabled: true, hidden: false };\n\nhtml`<div class=${classMap(classes)}>Classy text</div>`;\n// renders as <div class=\"highlight enabled\">Classy text</div>`\n```\n\n----------------------------------------\n\nTITLE: Generating Localized Template Module in JavaScript\nDESCRIPTION: Example of a generated localized template module for the es-419 locale in runtime mode.\nSOURCE: https://github.com/lit/lit.dev/blob/main/packages/lit-dev-content/site/docs/v3/localization/runtime-mode.md#2025-04-09_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n// locales/es-419.ts\nexport const templates = {\n  h3c44aff2d5f5ef6b: html`Hola <b>Mundo!</b>`,\n};\n```\n\n----------------------------------------\n\nTITLE: LitElement Render Method Implementation\nDESCRIPTION: Example of a render method in a LitElement component showing template syntax with data binding and event handling.\nSOURCE: https://github.com/lit/lit.dev/blob/main/packages/lit-dev-content/site/docs/v1/getting-started.md#2025-04-09_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nexport class MyElement extends LitElement {\n  ...\n  render() {\n    return html`\n      <h1>Hello, ${this.name}!</h1>\n      <button @click=${this._onClick}>\n        Click Count: ${this.count}\n      </button>\n      <slot></slot>\n    `;\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Basic SVG Pattern with Lit\nDESCRIPTION: Demonstrates how to create a basic SVG pattern element using Lit's svg template literal. The pattern uses userSpaceOnUse coordinates and includes a createTile component.\nSOURCE: https://github.com/lit/lit.dev/blob/main/packages/lit-dev-content/site/tutorials/content/svg-templates/04.md#2025-04-09_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nconst helloPattern = svg`\n  <pattern patternUnits=\"userSpaceOnUse\">\n    ${createTile()}\n  </pattern>\n`;\n```\n\n----------------------------------------\n\nTITLE: Adding a Slot to the Motion Carousel Component (HTML)\nDESCRIPTION: This code adds a slot element within a container div to display the content (images) placed inside the motion-carousel custom element. The slot allows child elements to appear in the Shadow DOM.\nSOURCE: https://github.com/lit/lit.dev/blob/main/packages/lit-dev-content/site/tutorials/content/carousel/01.md#2025-04-09_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<div class=\"fit\">\n  <slot></slot>\n</div>\n```\n\n----------------------------------------\n\nTITLE: Correct way to localize strings with expressions\nDESCRIPTION: The proper way to use the str tag with the msg function to localize strings that contain dynamic expressions.\nSOURCE: https://github.com/lit/lit.dev/blob/main/packages/lit-dev-content/site/docs/v2/localization/overview.md#2025-04-09_snippet_8\n\nLANGUAGE: javascript\nCODE:\n```\nimport {msg, str} from '@lit/localize';\nmsg(str`Hello ${name}`);\n```\n\n----------------------------------------\n\nTITLE: Converting Two-way Binding from Polymer to Lit\nDESCRIPTION: Shows how to replace Polymer's two-way binding with Lit's one-way binding and event listener for a child component.\nSOURCE: https://github.com/lit/lit.dev/blob/main/packages/lit-dev-content/site/articles/article/lit-for-polymer-users.md#2025-04-09_snippet_8\n\nLANGUAGE: js\nCODE:\n```\nstatic get template() {\n  return html`\n    <polymer-child\n      childprop=\"[[parentprop]]\"\n      on-childprop-changed=\"childpropChanged\">\n    </polymer-child>\n  `;\n}\n\nchildpropChanged(e) {\n  this.parentprop = e.detail.value;\n}\n```\n\nLANGUAGE: js\nCODE:\n```\nstatic template = html`\n  <polymer-child\n    .childprop=${this.parentprop}\n    @childprop-changed=${(e) => this.parentprop = e.detail.value}>\n  </polymer-child>\n`;\n```\n\n----------------------------------------\n\nTITLE: Using RenderResultReadable with Koa\nDESCRIPTION: Example of streaming SSR results using RenderResultReadable with a Koa server.\nSOURCE: https://github.com/lit/lit.dev/blob/main/packages/lit-dev-content/site/docs/v2/ssr/server-usage.md#2025-04-09_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nimport {render} from '@lit-labs/ssr';\nimport {RenderResultReadable} from '@lit-labs/ssr/lib/render-result-readable.js';\nimport {html} from 'lit';\n\n// Using Koa to stream\napp.use(async (ctx) => {\n  const result = render(html`<my-element></my-element>`);\n  ctx.type = 'text/html';\n  ctx.body = new RenderResultReadable(result);\n});\n```\n\n----------------------------------------\n\nTITLE: HTML Comment Documentation\nDESCRIPTION: HTML comment explaining that this file exists only for creating a section heading and its output is removed during the Eleventy build process.\nSOURCE: https://github.com/lit/lit.dev/blob/main/packages/lit-dev-content/site/articles/index.md#2025-04-09_snippet_1\n\nLANGUAGE: html\nCODE:\n```\n<!-- This file exists only to create a section heading.\n     Its output is deleted by the Eleventy build process. -->\n```\n\n----------------------------------------\n\nTITLE: Localizing an HTML template with expressions\nDESCRIPTION: Example of localizing an HTML template that contains dynamic expressions.\nSOURCE: https://github.com/lit/lit.dev/blob/main/packages/lit-dev-content/site/docs/v2/localization/overview.md#2025-04-09_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\nmsg(html`Hello <b>${name}</b>`);\n```\n\n----------------------------------------\n\nTITLE: Implementing Vote Property and Setter Logic in TypeScript\nDESCRIPTION: TypeScript implementation of the vote property with getter/setter logic that handles vote changes and updates the rating accordingly.\nSOURCE: https://github.com/lit/lit.dev/blob/main/packages/lit-dev-content/site/tutorials/content/wc-to-lit/07.md#2025-04-09_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nexport class RatingElement extends HTMLElement {\n  private _rating = 0;\n  private _vote: 'up'|'down'|null = null;\n\n  ...\n\n  set vote(newValue) {\n    const oldValue = this._vote;\n    if (newValue === oldValue) {\n      return;\n    }\n\n    if (newValue === 'up') {\n      if (oldValue === 'down') {\n        this.rating += 2;\n      } else {\n        this.rating += 1;\n      }\n    } else if (newValue === 'down') {\n      if (oldValue === 'up') {\n        this.rating -= 2;\n      } else {\n        this.rating -= 1;\n      }\n    }\n\n    this._vote = newValue;\n    this.setAttribute('vote', newValue!);\n  }\n\n  get vote() {\n    return this._vote;\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Vote Property and Setter Logic in TypeScript\nDESCRIPTION: TypeScript implementation of the vote property with getter/setter logic that handles vote changes and updates the rating accordingly.\nSOURCE: https://github.com/lit/lit.dev/blob/main/packages/lit-dev-content/site/tutorials/content/wc-to-lit/07.md#2025-04-09_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nexport class RatingElement extends HTMLElement {\n  private _rating = 0;\n  private _vote: 'up'|'down'|null = null;\n\n  ...\n\n  set vote(newValue) {\n    const oldValue = this._vote;\n    if (newValue === oldValue) {\n      return;\n    }\n\n    if (newValue === 'up') {\n      if (oldValue === 'down') {\n        this.rating += 2;\n      } else {\n        this.rating += 1;\n      }\n    } else if (newValue === 'down') {\n      if (oldValue === 'up') {\n        this.rating -= 2;\n      } else {\n        this.rating -= 1;\n      }\n    }\n\n    this._vote = newValue;\n    this.setAttribute('vote', newValue!);\n  }\n\n  get vote() {\n    return this._vote;\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Nested Template Example\nDESCRIPTION: Demonstrates how to nest templates using TemplateResult objects.\nSOURCE: https://github.com/lit/lit.dev/blob/main/packages/lit-dev-content/site/docs/v1/lit-html/template-reference.md#2025-04-09_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nconst header = html`<h1>Header</h1>`;\n\nconst page = html`\n  ${header}\n  <p>This is some text</p>\n`;\n```\n\n----------------------------------------\n\nTITLE: Pre-loading Locale Modules in JavaScript\nDESCRIPTION: Example of configuring localization with pre-loading of all locale modules using dynamic imports.\nSOURCE: https://github.com/lit/lit.dev/blob/main/packages/lit-dev-content/site/docs/v3/localization/runtime-mode.md#2025-04-09_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\nimport {configureLocalization} from '@lit/localize';\nimport {sourceLocale, targetLocales} from './generated/locale-codes.js';\n\nconst localizedTemplates = new Map(\n  targetLocales.map((locale) => [locale, import(`/locales/${locale}.js`)])\n);\n\nconst {getLocale, setLocale} = configureLocalization({\n  sourceLocale,\n  targetLocales,\n  loadLocale: async (locale) => localizedTemplates.get(locale),\n});\n```\n\n----------------------------------------\n\nTITLE: Cleanup in disconnectedCallback\nDESCRIPTION: Example of cleaning up external event listeners when a component is removed from the DOM to prevent memory leaks.\nSOURCE: https://github.com/lit/lit.dev/blob/main/packages/lit-dev-content/site/docs/v2/components/lifecycle.md#2025-04-09_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\ndisconnectedCallback() {\n  super.disconnectedCallback()\n  window.removeEventListener('keydown', this._handleKeydown);\n}\n```\n\n----------------------------------------\n\nTITLE: Applying Pattern Fill to SVG Rectangles\nDESCRIPTION: Demonstrates how to create and style rectangles using the defined pattern, including a white background rectangle and a pattern-filled rectangle.\nSOURCE: https://github.com/lit/lit.dev/blob/main/packages/lit-dev-content/site/tutorials/content/svg-templates/04.md#2025-04-09_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nrender() {\n  return html`\n    <svg height=\"100%\" width=\"100%\">\n      ...\n      <rect height=\"100%\" width=\"100%\" fill=\"#ffffff\"></rect>\n      <rect height=\"100%\" width=\"100%\" fill=\"url(#repeat-pattern)\"></rect>\n    </svg>\n  `;\n}\n```\n\n----------------------------------------\n\nTITLE: Installing Rollup Dependencies for Modern+Legacy Build\nDESCRIPTION: Command to install the necessary npm packages for building a Lit application with both modern and legacy browser support using Rollup.\nSOURCE: https://github.com/lit/lit.dev/blob/main/packages/lit-dev-content/site/docs/v2/tools/production.md#2025-04-09_snippet_3\n\nLANGUAGE: sh\nCODE:\n```\nnpm i --save-dev rollup \\\n  @web/rollup-plugin-html \\\n  @web/rollup-plugin-polyfills-loader \\\n  @web/rollup-plugin-copy \\\n  @rollup/plugin-node-resolve \\\n  @rollup/plugin-babel \\\n  @rollup/plugin-terser \\\n  rollup-plugin-minify-html-literals \\\n  rollup-plugin-summary\n```\n\n----------------------------------------\n\nTITLE: Implementing Animation Structure with styleMap in Lit Carousel Component\nDESCRIPTION: This code restructures a carousel component to support animation between previous and selected items. It imports the styleMap directive, adds left positioning, and creates a container with separate slots for previous and selected items that can be animated using CSS positioning.\nSOURCE: https://github.com/lit/lit.dev/blob/main/packages/lit-dev-content/site/tutorials/content/carousel/05.md#2025-04-09_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport {styleMap} from 'lit/directives/style-map.js';\n\n// ...\nprivate left = 0;\nrender() {\n  if (this.hasValidSelected()) {\n    this.selectedInternal = this.selected;\n  }\n  const animateLeft = ``;\n  const selectedLeft = ``;\n  const previousLeft = ``;\n  return html`\n    <div class=\"fit\"\n      @click=${this.clickHandler}\n      style=${styleMap({left: animateLeft})}\n    >\n      <div class=\"fit\" style=${styleMap({left: previousLeft})}>\n        <slot name=\"previous\"></slot>\n      </div>\n      <div class=\"fit selected\" style=${styleMap({left: selectedLeft})}>\n        <slot name=\"selected\"></slot>\n      </div>\n    </div>\n  `;\n}\n```\n\nLANGUAGE: javascript\nCODE:\n```\nimport {styleMap} from 'lit/directives/style-map.js';\n\n// ...\nleft = 0;\nrender() {\n  if (this.hasValidSelected()) {\n    this.selectedInternal = this.selected;\n  }\n  const animateLeft = ``;\n  const selectedLeft = ``;\n  const previousLeft = ``;\n  return html`\n    <div class=\"fit\"\n      @click=${this.clickHandler}\n      style=${styleMap({left: animateLeft})}\n    >\n      <div class=\"fit\" style=${styleMap({left: previousLeft})}>\n        <slot name=\"previous\"></slot>\n      </div>\n      <div class=\"fit selected\" style=${styleMap({left: selectedLeft})}>\n        <slot name=\"selected\"></slot>\n      </div>\n    </div>\n  `;\n}\n```\n\n----------------------------------------\n\nTITLE: Adding Configuration Parameters to a Controller in JavaScript\nDESCRIPTION: JavaScript implementation of a ClockController with a timeout parameter. Shows how to add custom configuration options to a controller.\nSOURCE: https://github.com/lit/lit.dev/blob/main/packages/lit-dev-content/site/docs/v2/composition/controllers.md#2025-04-09_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nclass ClockController {\n  constructor(host, timeout) {\n    this.host = host;\n    this.timeout = timeout;\n    host.addController(this);\n  }\n```\n\n----------------------------------------\n\nTITLE: Importing ContextProvider from Lit Labs\nDESCRIPTION: Shows how to import the ContextProvider class from the @lit-labs/context package.\nSOURCE: https://github.com/lit/lit.dev/blob/main/packages/lit-dev-content/site/docs/v2/data/context.md#2025-04-09_snippet_23\n\nLANGUAGE: ts\nCODE:\n```\nimport {ContextProvider} from '@lit-labs/context';\n```\n\n----------------------------------------\n\nTITLE: Using Query Decorators in TypeScript\nDESCRIPTION: Example showing usage of @queryAssignedElements and @queryAssignedNodes decorators to access slotted content with various configuration options.\nSOURCE: https://github.com/lit/lit.dev/blob/main/packages/lit-dev-content/site/docs/v2/components/shadow-dom.md#2025-04-09_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\n@queryAssignedElements({slot: 'list', selector: '.item'})\n_listItems!: Array<HTMLElement>;\n\n@queryAssignedNodes({slot: 'header', flatten: true})\n_headerNodes!: Array<Node>;\n```\n\n----------------------------------------\n\nTITLE: Aside Element Documentation\nDESCRIPTION: HTML example showing how to create various types of aside elements in tutorial instructions\nSOURCE: https://github.com/lit/lit.dev/blob/main/packages/lit-dev-content/samples/tutorials/CONTRIBUTING.md#2025-04-09_snippet_3\n\nLANGUAGE: html\nCODE:\n```\n{% aside \"positive\" %}\n\nThe first line is always a bolded header.\n\nMake sure to do `this`!\n\n{% endaside %}\n\n{% aside \"warn\" \"no-header\" %}\n\nThe `no-header` will make sure that this line is not bolded.\n\nBeware of `this`!\n\n{% endaside %}\n\n{% aside \"negative\" %}\n\nMake sure NOT to do `this`!\n\nThe following non-header lines here make sense to explain the assertion in\nthe header line above.\n\n{% endaside %}\n\n{% aside \"info\" %}\n\nCheck out more info [in this docs section](/docs/templates/expressions/#well-formed-html).\n\n{% endaside %}\n```\n\n----------------------------------------\n\nTITLE: TypeScript Mixin with Interface\nDESCRIPTION: Demonstrates defining a separate interface for a mixin that adds new public API.\nSOURCE: https://github.com/lit/lit.dev/blob/main/packages/lit-dev-content/site/docs/v3/composition/mixins.md#2025-04-09_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\n// Define the interface for the mixin\nexport declare class MyMixinInterface {\n  highlight: boolean;\n  protected renderHighlight(): unknown;\n}\n\nexport const MyMixin = <T extends Constructor<LitElement>>(superClass: T) => {\n  class MyMixinClass extends superClass {\n    @property() highlight = false;\n    protected renderHighlight() {\n      /* ... */\n    }\n  };\n  // Cast return type to your mixin's interface intersected with the superClass type\n  return MyMixinClass as Constructor<MyMixinInterface> & T;\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Attribute Binding for Rating in Web Component (JavaScript)\nDESCRIPTION: This code snippet shows how to implement attribute binding for a 'rating' attribute in a web component using JavaScript. It demonstrates the use of observedAttributes and attributeChangedCallback to update the component when the rating attribute changes.\nSOURCE: https://github.com/lit/lit.dev/blob/main/packages/lit-dev-content/site/tutorials/content/wc-to-lit/06.md#2025-04-09_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nstatic get observedAttributes() {\n  return ['rating'];\n}\n\nattributeChangedCallback(attributeName, _oldValue, newValue) {\n  if (attributeName === 'rating') {\n    const newRating = Number(newValue);\n\n    this.rating = newRating;\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Attribute Binding for Rating in Web Component (JavaScript)\nDESCRIPTION: This code snippet shows how to implement attribute binding for a 'rating' attribute in a web component using JavaScript. It demonstrates the use of observedAttributes and attributeChangedCallback to update the component when the rating attribute changes.\nSOURCE: https://github.com/lit/lit.dev/blob/main/packages/lit-dev-content/site/tutorials/content/wc-to-lit/06.md#2025-04-09_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nstatic get observedAttributes() {\n  return ['rating'];\n}\n\nattributeChangedCallback(attributeName, _oldValue, newValue) {\n  if (attributeName === 'rating') {\n    const newRating = Number(newValue);\n\n    this.rating = newRating;\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Attribute Binding for Rating in Web Component (JavaScript)\nDESCRIPTION: This code snippet shows how to implement attribute binding for a 'rating' attribute in a web component using JavaScript. It demonstrates the use of observedAttributes and attributeChangedCallback to update the component when the rating attribute changes.\nSOURCE: https://github.com/lit/lit.dev/blob/main/packages/lit-dev-content/site/tutorials/content/wc-to-lit/06.md#2025-04-09_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nstatic get observedAttributes() {\n  return ['rating'];\n}\n\nattributeChangedCallback(attributeName, _oldValue, newValue) {\n  if (attributeName === 'rating') {\n    const newRating = Number(newValue);\n\n    this.rating = newRating;\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: CSS custom property rules with ShadyCSS\nDESCRIPTION: Shows example CSS rules using custom properties that might require special handling with the ShadyCSS polyfill, particularly when elements are moved in the DOM.\nSOURCE: https://github.com/lit/lit.dev/blob/main/packages/lit-dev-content/site/docs/v1/lit-html/styling-templates.md#2025-04-09_snippet_6\n\nLANGUAGE: js\nCODE:\n```\nmy-element { --theme-color: blue; }\nmain my-element { --theme-color: red; }\n```\n\n----------------------------------------\n\nTITLE: Configuring Localization with Static Imports in Lit\nDESCRIPTION: This code demonstrates how to set up localization in a Lit application using static imports to pre-load all locales. It imports the necessary functions, locale codes, and template files, then configures the localization system with a Map of templates for each target locale.\nSOURCE: https://github.com/lit/lit.dev/blob/main/packages/lit-dev-content/site/docs/v3/localization/runtime-mode.md#2025-04-09_snippet_8\n\nLANGUAGE: js\nCODE:\n```\nimport {configureLocalization} from '@lit/localize';\nimport {sourceLocale, targetLocales} from './generated/locale-codes.js';\n\nimport * as templates_es_419 from './locales/es-419.js';\nimport * as templates_zh_hans from './locales/zh-Hans.js';\n...\n\nconst localizedTemplates = new Map([\n  ['es-419', templates_es_419],\n  ['zh-Hans', templates_zh_hans],\n  ...\n]);\n\nconst {getLocale, setLocale} = configureLocalization({\n  sourceLocale,\n  targetLocales,\n  loadLocale: async (locale) => localizedTemplates.get(locale),\n});\n```\n\n----------------------------------------\n\nTITLE: Implementing Custom Decorator with Initializer in TypeScript\nDESCRIPTION: This snippet shows how to create a custom decorator that adds an initializer to a Lit component, allowing the decorator to hook into the component's lifecycle.\nSOURCE: https://github.com/lit/lit.dev/blob/main/packages/lit-dev-content/site/docs/v3/components/lifecycle.md#2025-04-09_snippet_16\n\nLANGUAGE: typescript\nCODE:\n```\nconst myDecorator = (proto: ReactiveElement, key: string) => {\n  const ctor = proto.constructor as typeof ReactiveElement;\n\n  ctor.addInitializer((instance: ReactiveElement) => {\n    // This is run during construction of the element\n    new MyController(instance);\n  });\n};\n```\n\nLANGUAGE: javascript\nCODE:\n```\nconst myDecorator = (descriptor) => {\n  ...descriptor,\n  finisher(ctor) {\n    ctor.addInitializer((instance) => {\n      // This is run during construction of the element\n      new MyController(instance);\n    });\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: Using unsafeStatic for Dynamic Static Content\nDESCRIPTION: Demonstrates using the unsafeStatic function to incorporate string content from non-script sources into static expressions. This must only be used with trusted content to avoid XSS vulnerabilities.\nSOURCE: https://github.com/lit/lit.dev/blob/main/packages/lit-dev-content/site/docs/v2/templates/expressions.md#2025-04-09_snippet_11\n\nLANGUAGE: typescript\nCODE:\n```\nimport {html, unsafeStatic} from 'lit/static-html.js';\n```\n\n----------------------------------------\n\nTITLE: Importing range Directive in JavaScript\nDESCRIPTION: Shows how to import the range directive from the Lit library.\nSOURCE: https://github.com/lit/lit.dev/blob/main/packages/lit-dev-content/site/docs/v3/templates/directives.md#2025-04-09_snippet_17\n\nLANGUAGE: javascript\nCODE:\n```\nimport {range} from 'lit/directives/range.js';\n```\n\n----------------------------------------\n\nTITLE: Implementing SVG in Lit Component Render Function\nDESCRIPTION: Demonstrates how to use the createElement function within a Lit component's render method to display SVG content.\nSOURCE: https://github.com/lit/lit.dev/blob/main/packages/lit-dev-content/site/tutorials/content/svg-templates/01.md#2025-04-09_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\n@customElement('repeat-pattern')\nexport class RepeatPattern extends LitElement {        \n  render() {\n    return html`\n      <svg height=\"100%\" width=\"100%\">\n        ${createElement(\"lit\")}\n      </svg>\n    `;\n  }\n}\n```\n\nLANGUAGE: javascript\nCODE:\n```\nimport { LitElement } from \"lit\";\n\nexport class RepeatPattern extends LitElement {\n  render() {\n    return html`\n      <svg height=\"100%\" width=\"100%\">\n        ${createElement(\"lit\")}\n      </svg>\n    `;\n  }\n}\ncustomElements.define('repeat-pattern', RepeatPattern);\n```\n\n----------------------------------------\n\nTITLE: Managing Object Subproperty Changes in LitElement (JavaScript)\nDESCRIPTION: This example shows two approaches to manage property changes and updates for object subproperties in LitElement: rewriting the whole object or calling requestUpdate after a mutation.\nSOURCE: https://github.com/lit/lit.dev/blob/main/packages/lit-dev-content/site/docs/v1/components/lifecycle.md#2025-04-09_snippet_16\n\nLANGUAGE: javascript\nCODE:\n```\n// Option 1: Rewrite whole object, triggering an update\nthis.prop1 = Object.assign({}, this.prop1, { subProp: 'data' });\n\n// Option 2: Mutate a subproperty, then call requestUpdate\nthis.prop1.subProp = 'data';\nthis.requestUpdate();\n```\n\n----------------------------------------\n\nTITLE: ContextConsumer Constructor\nDESCRIPTION: Constructor signature for the ContextConsumer class showing initialization options.\nSOURCE: https://github.com/lit/lit.dev/blob/main/packages/lit-dev-content/site/docs/v3/data/context.md#2025-04-09_snippet_16\n\nLANGUAGE: typescript\nCODE:\n```\nContextConsumer(\n  host: HostElement,\n  options: {\n    context: C,\n    callback?: (value: ContextType<C>, dispose?: () => void) => void,\n    subscribe?: boolean = false\n  }\n)\n```\n\n----------------------------------------\n\nTITLE: Cleaning generated TypeScript files\nDESCRIPTION: Command to remove generated files from the TypeScript project, typically used when renaming components.\nSOURCE: https://github.com/lit/lit.dev/blob/main/packages/lit-dev-content/site/docs/v2/tools/starter-kits.md#2025-04-09_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\nnpm run clean\n```\n\n----------------------------------------\n\nTITLE: Importing Tooltip Directive in TypeScript/JavaScript\nDESCRIPTION: This snippet shows how to import the tooltip directive in a Lit component file.\nSOURCE: https://github.com/lit/lit.dev/blob/main/packages/lit-dev-content/site/tutorials/content/tooltip/08.md#2025-04-09_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nimport {tooltip} from './simple-tooltip.js';\n```\n\n----------------------------------------\n\nTITLE: Using live Directive with Input Element in JavaScript\nDESCRIPTION: Demonstrates the usage of the 'live' directive to handle DOM state changes in input elements. It ensures that the binding updates the input value even when changed by user input.\nSOURCE: https://github.com/lit/lit.dev/blob/main/packages/lit-dev-content/site/docs/v1/lit-html/release-notes.md#2025-04-09_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nhtml`<input .value=${live(x)}>`\n```\n\n----------------------------------------\n\nTITLE: Generating Localized Files in Transform Mode (JavaScript)\nDESCRIPTION: This snippet demonstrates how the source file is transformed into localized versions for different locales in transform mode.\nSOURCE: https://github.com/lit/lit.dev/blob/main/packages/lit-dev-content/site/docs/v3/localization/transform-mode.md#2025-04-09_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n// src/launch-button.js\nimport {msg} from '@lit/localize';\n\nrender() {\n  return html`<button>${msg('Launch rocket')}</button>`\n}\n```\n\nLANGUAGE: javascript\nCODE:\n```\n// locales/en/launch-button.js\nrender() {\n  return html`<button>Launch rocket</button>`\n}\n\n// locales/es-419/launch-button.js\nrender() {\n  return html`<button>Lanza cohete</button>`\n}\n```\n\n----------------------------------------\n\nTITLE: Cleaned Up Date Display Component Implementation\nDESCRIPTION: Final implementation of the DateDisplay component after removing dateStr property and willUpdate method. Shows the simplified component with date conversion handling.\nSOURCE: https://github.com/lit/lit.dev/blob/main/packages/lit-dev-content/site/tutorials/content/custom-attribute-converter/04.md#2025-04-09_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nexport class DateDisplay extends LitElement {\n  @property({converter: dateConverter})\n  date = new Date();\n\n  render() {\n    return html`\n      <p>The given date is: ${this.date.toLocaleDateString()}</p>\n    `;\n  }\n}\n```\n\nLANGUAGE: javascript\nCODE:\n```\nexport class DateDisplay extends LitElement {\n  static properties = {\n    date: {converter: dateConverter},\n  };\n\n  constructor() {\n    super();\n    this.date = new Date();\n  }\n\n  render() {\n    return html`\n      <p>The given date is: ${this.date.toLocaleDateString()}</p>\n    `;\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Importing lit-html in HTML script\nDESCRIPTION: Demonstrates how to import lit-html in an HTML file using a module script, specifying the path to the library.\nSOURCE: https://github.com/lit/lit.dev/blob/main/packages/lit-dev-content/site/docs/v1/lit-html/getting-started.md#2025-04-09_snippet_2\n\nLANGUAGE: html\nCODE:\n```\n<script type=\"module\">\n  import {html, render} from './node_modules/lit-html/lit-html.js';\n  ...\n</script>\n```\n\n----------------------------------------\n\nTITLE: Defining Lit Component Class (JavaScript)\nDESCRIPTION: Example of defining and registering a Lit component class in JavaScript\nSOURCE: https://github.com/lit/lit.dev/blob/main/packages/lit-dev-content/site/docs/v3/tools/starter-kits.md#2025-04-09_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nexport class MyElement extends LitElement { /* ... */ }\n\ncustomElements.define('my-element', MyElement);\n```\n\n----------------------------------------\n\nTITLE: Async/Await Pattern in Lit Components\nDESCRIPTION: Demonstration of using async/await in Lit components to handle login events and DOM updates.\nSOURCE: https://github.com/lit/lit.dev/blob/main/packages/lit-dev-content/site/articles/article/lit-for-polymer-users.md#2025-04-09_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nasync _loginClickHandler() {\n  this.loggedIn = true;\n  // Wait for `loggedIn` state to be rendered to the DOM\n  await this.updateComplete;\n  this.dispatchEvent(new Event('login'));\n}\n```\n\n----------------------------------------\n\nTITLE: Using a Wrapped Web Component in React\nDESCRIPTION: Shows how to use the wrapped web component in a React application, including passing props and handling events.\nSOURCE: https://github.com/lit/lit.dev/blob/main/packages/lit-dev-content/site/docs/v2/frameworks/react.md#2025-04-09_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\n<MyElementComponent\n  active={isActive}\n  onactivate={(e) => setIsActive(e.active)}\n  onchange={handleChange}\n/>\n```\n\n----------------------------------------\n\nTITLE: Using repeat Directive in Lit-html\nDESCRIPTION: Demonstrates efficient rendering of lists using the repeat directive, which maintains key-to-DOM associations between updates for optimal performance.\nSOURCE: https://github.com/lit/lit.dev/blob/main/packages/lit-dev-content/site/docs/v1/lit-html/template-reference.md#2025-04-09_snippet_12\n\nLANGUAGE: javascript\nCODE:\n```\nimport {repeat} from 'lit-html/directives/repeat';\n\nconst myTemplate = () => html`\n  <ul>\n    ${repeat(items, (i) => i.id, (i, index) => html`\n      <li>${index}: ${i.name}</li>`)}  </ul>\n`;\n```\n\n----------------------------------------\n\nTITLE: Opening Lit Source Code for Editing\nDESCRIPTION: Command to open the Lit source code directory for editing API documentation comments.\nSOURCE: https://github.com/lit/lit.dev/blob/main/README.md#2025-04-09_snippet_4\n\nLANGUAGE: sh\nCODE:\n```\ncode packages/lit-dev-api/lit/\n```\n\n----------------------------------------\n\nTITLE: Implementing Theming in Lit Components\nDESCRIPTION: Demonstrates how to create a themable Lit component using CSS inheritance and CSS custom properties.\nSOURCE: https://github.com/lit/lit.dev/blob/main/packages/lit-dev-content/site/docs/v3/components/styles.md#2025-04-09_snippet_12\n\nLANGUAGE: javascript\nCODE:\n```\nclass MyElement extends LitElement {\n  static styles = css`\n    :host {\n      background-color: var(--my-background, yellow);\n    }\n  `;\n  render() {\n    return html`<p>Hello world</p>`;\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: HTML Tutorial Head Template\nDESCRIPTION: Example of how to include code checking functionality in a tutorial step's HTML head section\nSOURCE: https://github.com/lit/lit.dev/blob/main/packages/lit-dev-content/samples/tutorials/CONTRIBUTING.md#2025-04-09_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<head>\n  <!-- playground-fold --><script type=\"module\" src=\"./_check-code.js\"></script><!-- playground-fold-end -->\n\n  <script type=\"module\" src=\"./my-element.js\"></script>\n</head>\n```\n\n----------------------------------------\n\nTITLE: Implementing willUpdate Lifecycle Method for Property Synchronization in JavaScript\nDESCRIPTION: JavaScript implementation of the willUpdate lifecycle method in a Lit component that converts the dateStr string attribute to a JavaScript Date object whenever dateStr changes.\nSOURCE: https://github.com/lit/lit.dev/blob/main/packages/lit-dev-content/site/tutorials/content/custom-attribute-converter/02.md#2025-04-09_snippet_2\n\nLANGUAGE: js\nCODE:\n```\nexport class DateDisplay extends LitElement {\n  ...\n\n  willUpdate(changed) {\n    if (changed.has('dateStr') && this.dateStr) {\n      this.date = new Date(this.dateStr);\n    }\n  }\n\n  ...\n```\n\n----------------------------------------\n\nTITLE: Configuring lit-html Section in Eleventy YAML\nDESCRIPTION: This YAML snippet configures the navigation properties for the lit-html section in an Eleventy-based website. It sets the title, navigation key, and order for the section.\nSOURCE: https://github.com/lit/lit.dev/blob/main/packages/lit-dev-content/site/docs/v1/lit-html/index.md#2025-04-09_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n---\ntitle: lit-html\neleventyNavigation:\n  key: lit-html\n  order: 4\n---\n```\n\n----------------------------------------\n\nTITLE: Checking Browser API Availability in Lit SSR\nDESCRIPTION: Shows how to safely check for browser API availability using optional chaining to prevent errors in server environment.\nSOURCE: https://github.com/lit/lit.dev/blob/main/packages/lit-dev-content/site/docs/v2/ssr/authoring.md#2025-04-09_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconst hasConstructableStylesheets = typeof globalThis.CSSStyleSheet?.prototype.replaceSync === 'function';\n```\n\n----------------------------------------\n\nTITLE: Task with Const-Asserted Arguments in TypeScript\nDESCRIPTION: Demonstrates how to use const assertion for more precise argument typing in TypeScript tasks.\nSOURCE: https://github.com/lit/lit.dev/blob/main/packages/lit-dev-content/site/docs/v3/data/task.md#2025-04-09_snippet_10\n\nLANGUAGE: typescript\nCODE:\n```\nclass MyElement extends LitElement {\n  @property() myNumber = 10;\n  @property() myText = \"Hello world\";\n\n  _myTask = new Task(this, {\n    args: () => [this.myNumber, this.myText] as const,\n    task: ([number, text]) => {\n      // implementation omitted\n    }\n  });\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Timer Stopping Method in Lit AsyncDirective\nDESCRIPTION: A method that ensures any running timer is stopped and cleared to prevent memory leaks. It clears the interval and resets the timer reference to undefined.\nSOURCE: https://github.com/lit/lit.dev/blob/main/packages/lit-dev-content/site/tutorials/content/async-directive/07.md#2025-04-09_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n  ensureTimerStopped() {\n    clearInterval(this.timer);\n    this.timer = undefined;\n  }\n```\n\n----------------------------------------\n\nTITLE: Importing keyed Directive in Lit\nDESCRIPTION: Shows how to import the keyed directive from Lit's directives module.\nSOURCE: https://github.com/lit/lit.dev/blob/main/packages/lit-dev-content/site/docs/v2/templates/directives.md#2025-04-09_snippet_24\n\nLANGUAGE: javascript\nCODE:\n```\nimport {keyed} from 'lit/directives/keyed.js';\n```\n\n----------------------------------------\n\nTITLE: Legacy Getter/Setter Property Decorator Pattern\nDESCRIPTION: Shows the old pattern of using @property() decorator with explicit getter/setter implementation and manual update requests. This approach is no longer recommended.\nSOURCE: https://github.com/lit/lit.dev/blob/main/packages/lit-dev-content/site/docs/v3/releases/upgrade.md#2025-04-09_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\nclass MyElement extends LitElement {\n  private _foo = 42;\n  set(v) {\n    const oldValue = this._foo;\n    this._foo = v;\n    this.requestUpdate('foo', oldValue);\n  }\n  @property()\n  get() {\n    return this._foo;\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Rendering a lit-html template to DOM\nDESCRIPTION: Complete example of creating and rendering a lit-html template to the document body.\nSOURCE: https://github.com/lit/lit.dev/blob/main/packages/lit-dev-content/site/docs/v2/libraries/standalone-templates.md#2025-04-09_snippet_3\n\nLANGUAGE: js\nCODE:\n```\nimport {html, render} from 'lit-html';\n\nconst name = 'world';\nconst sayHi = html`<h1>Hello ${name}</h1>`;\nrender(sayHi, document.body);\n```\n\n----------------------------------------\n\nTITLE: Adding and Removing Event Listeners in Lit Component Lifecycle Methods\nDESCRIPTION: Demonstrates adding an event listener in connectedCallback and removing it in disconnectedCallback, which is important for events on external elements like window.\nSOURCE: https://github.com/lit/lit.dev/blob/main/packages/lit-dev-content/site/docs/v1/components/events.md#2025-04-09_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nconnectedCallback() {\n  super.connectedCallback();\n  window.addEventListener('resize', this._handleResize);\n}\ndisconnectedCallback() {\n  window.removeEventListener('resize', this._handleResize);\n  super.disconnectedCallback();\n}\n```\n\n----------------------------------------\n\nTITLE: Importing lit-html in JavaScript module\nDESCRIPTION: Shows how to import lit-html in a JavaScript module using a package name, which requires a bundler or dev server for resolution.\nSOURCE: https://github.com/lit/lit.dev/blob/main/packages/lit-dev-content/site/docs/v1/lit-html/getting-started.md#2025-04-09_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nimport {html, render} from 'lit-html';\n```\n\n----------------------------------------\n\nTITLE: Checking for Constructable Stylesheets in JavaScript\nDESCRIPTION: Demonstrates a safe way to check for the availability of constructable stylesheets API, which may not be present in server environments.\nSOURCE: https://github.com/lit/lit.dev/blob/main/packages/lit-dev-content/site/docs/v3/ssr/authoring.md#2025-04-09_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconst hasConstructableStylesheets = typeof globalThis.CSSStyleSheet?.prototype.replaceSync === 'function';\n```\n\n----------------------------------------\n\nTITLE: Context Key Examples\nDESCRIPTION: Examples showing different ways to create context keys and their equality behavior.\nSOURCE: https://github.com/lit/lit.dev/blob/main/packages/lit-dev-content/site/docs/v3/data/context.md#2025-04-09_snippet_8\n\nLANGUAGE: typescript\nCODE:\n```\n// true\ncreateContext('my-context') === createContext('my-context')\n// true\ncreateContext(Symbol.for('my-context')) === createContext(Symbol.for('my-context'))\n\n// false\ncreateContext(Symbol('my-context')) === createContext(Symbol('my-context'))\n// false\ncreateContext({}) === createContext({})\n```\n\n----------------------------------------\n\nTITLE: Binding timeAgo Directive to Element Attribute\nDESCRIPTION: Example of binding the timeAgo directive to the time attribute of a comment-card element, allowing periodic updates without re-rendering the outer template.\nSOURCE: https://github.com/lit/lit.dev/blob/main/packages/lit-dev-content/site/tutorials/content/async-directive/09.md#2025-04-09_snippet_2\n\nLANGUAGE: ts\nCODE:\n```\n  time=${timeAgo(timeCreated)}\n```\n\n----------------------------------------\n\nTITLE: Importing unsafeHTML Directive\nDESCRIPTION: Import statement for the unsafeHTML directive from Lit library.\nSOURCE: https://github.com/lit/lit.dev/blob/main/packages/lit-dev-content/site/docs/v3/templates/directives.md#2025-04-09_snippet_37\n\nLANGUAGE: javascript\nCODE:\n```\nimport {unsafeHTML} from 'lit/directives/unsafe-html.js';\n```\n\n----------------------------------------\n\nTITLE: Refactoring RatingElement Class Structure in TypeScript\nDESCRIPTION: This TypeScript code shows the simplified structure of the RatingElement class after removing unnecessary methods and callbacks. It retains core properties and the connectedCallback.\nSOURCE: https://github.com/lit/lit.dev/blob/main/packages/lit-dev-content/site/tutorials/content/wc-to-lit/10.md#2025-04-09_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nexport class RatingElement extends HTMLElement {\n  private _rating = 0;\n  private _vote: 'up'|'down'|null = null;\n\n  connectedCallback() {\n    this.attachShadow({mode: 'open'});\n    this.render();\n  }\n\n  // remove disonnectedCallback and _onUpClick and _onDownClick\n  ...\n}\n```\n\n----------------------------------------\n\nTITLE: Adding Event Listener in Lit Component Constructor\nDESCRIPTION: Shows how to add an event listener in the constructor of a Lit component, which is useful for listening to events on the host element itself.\nSOURCE: https://github.com/lit/lit.dev/blob/main/packages/lit-dev-content/site/docs/v1/components/events.md#2025-04-09_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nconstructor() {\n  super();\n  this.addEventListener('focus', this._handleFocus);\n}\n```\n\n----------------------------------------\n\nTITLE: Complete Template Return Statement in TypeScript\nDESCRIPTION: Demonstrates the final implementation of the template return statement including the conditional message.\nSOURCE: https://github.com/lit/lit.dev/blob/main/packages/lit-dev-content/site/tutorials/content/intro-to-lit/07.md#2025-04-09_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nreturn html`\n  <h2>To Do</h2>\n  ${todosOrMessage}\n  <input id=\"newitem\" aria-label=\"New item\">\n  ...`\n```\n\n----------------------------------------\n\nTITLE: Declaring a Property with Custom Attribute Name in TypeScript\nDESCRIPTION: This example demonstrates how to create an observed attribute with a different name than the property using the @property decorator in TypeScript.\nSOURCE: https://github.com/lit/lit.dev/blob/main/packages/lit-dev-content/site/docs/v2/components/properties.md#2025-04-09_snippet_8\n\nLANGUAGE: typescript\nCODE:\n```\n// Observed attribute will be called my-name\n@property({ attribute: 'my-name' })\nmyName = 'Ogden';\n```\n\n----------------------------------------\n\nTITLE: Using Arrow Functions for Event Handlers in Lit TypeScript\nDESCRIPTION: Demonstrates using an arrow function as a class field for event handling in a Lit component written in TypeScript.\nSOURCE: https://github.com/lit/lit.dev/blob/main/packages/lit-dev-content/site/docs/v1/components/events.md#2025-04-09_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\nexport class MyElement extends LitElement {\n  private _handleResize = () => { /* handle the event */ }\n\n  constructor() {\n    window.addEventListener('resize', this._handleResize);\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Manually Managing Marker Nodes for Nested Parts in lit-html\nDESCRIPTION: Demonstrates how to manually create and position marker nodes when inserting a nested part at a specific location. This approach gives more control over part placement compared to appendIntoPart.\nSOURCE: https://github.com/lit/lit.dev/blob/main/packages/lit-dev-content/site/docs/v1/lit-html/creating-directives.md#2025-04-09_snippet_11\n\nLANGUAGE: javascript\nCODE:\n```\nimport {NodePart, createMarker} from 'lit-html';\n\n// Create a new part, passing in the render options from the original part\nconst newPart = new NodePart(containerPart.options);\n\n// Create markers surrounding content managed by the new part\nconst container = containerPart.startNode.parentNode;\nconst startNode = createMarker();\ncontainer.insertBefore(startNode, containerPart.endNode);\ncontainer.insertBefore(createMarker(), containerPart.endNode);\n\nnewPart.insertAfterNode(startNode);\n```\n\n----------------------------------------\n\nTITLE: Using isServer Environment Checker in Lit\nDESCRIPTION: Shows how to use the isServer utility from Lit to conditionally execute code based on the runtime environment (server or browser).\nSOURCE: https://github.com/lit/lit.dev/blob/main/packages/lit-dev-content/site/docs/v3/ssr/authoring.md#2025-04-09_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport {isServer} from 'lit';\n\nif (isServer) {\n  // only runs in server environments like Node\n} else {\n  // runs in the browser\n}\n```\n\n----------------------------------------\n\nTITLE: ContextCallback Type Definition\nDESCRIPTION: Type definition for the context callback function used in context requests.\nSOURCE: https://github.com/lit/lit.dev/blob/main/packages/lit-dev-content/site/docs/v3/data/context.md#2025-04-09_snippet_17\n\nLANGUAGE: typescript\nCODE:\n```\ntype ContextCallback<ValueType> = (\n  value: ValueType,\n  unsubscribe?: () => void\n) => void;\n```\n\n----------------------------------------\n\nTITLE: Using timeAgo Directive in Child Expression\nDESCRIPTION: Example of rendering the timeAgo directive as a string in a child expression within a paragraph element.\nSOURCE: https://github.com/lit/lit.dev/blob/main/packages/lit-dev-content/site/tutorials/content/async-directive/09.md#2025-04-09_snippet_0\n\nLANGUAGE: ts\nCODE:\n```\n      <p>This page was rendered ${timeAgo(timeCreated)}.</p>\n```\n\n----------------------------------------\n\nTITLE: TypeScript Signature for unsafeHTML\nDESCRIPTION: Type definition for the unsafeHTML directive function.\nSOURCE: https://github.com/lit/lit.dev/blob/main/packages/lit-dev-content/site/docs/v3/templates/directives.md#2025-04-09_snippet_38\n\nLANGUAGE: typescript\nCODE:\n```\nunsafeHTML(value: string | typeof nothing | typeof noChange)\n```\n\n----------------------------------------\n\nTITLE: Defining Reusable SVG Text Element with <defs>\nDESCRIPTION: This snippet demonstrates how to define a reusable <text> element inside a <defs> element. The text element is given an id for later reference.\nSOURCE: https://github.com/lit/lit.dev/blob/main/packages/lit-dev-content/site/tutorials/content/svg-templates/02.md#2025-04-09_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nconst helloDefs = svg`\n  <defs>\n    <text id=\"chars\">Hello defs!</text>\n  </defs>\n`;\n```\n\n----------------------------------------\n\nTITLE: Implementing Render Method\nDESCRIPTION: Demonstrates how to implement the render() method in a Lit component using the html tagged template literal to create a template that displays text.\nSOURCE: https://github.com/lit/lit.dev/blob/main/packages/lit-dev-content/site/tutorials/content/word-viewer/01.md#2025-04-09_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { html, LitElement } from 'lit';\n...\n\n  render() {\n    return html`<pre>A super expressive and efficient template!</pre>`\n  }\n```\n\n----------------------------------------\n\nTITLE: Efficient Per-Instance Style Evaluation in LitElement\nDESCRIPTION: Demonstrates a more efficient way to evaluate per-instance styles in LitElement by separating static and dynamic styles and using CSS custom properties.\nSOURCE: https://github.com/lit/lit.dev/blob/main/packages/lit-dev-content/site/docs/v1/components/styles.md#2025-04-09_snippet_9\n\nLANGUAGE: javascript\nCODE:\n```\n{% include \"v1-projects/style/perinstanceexpressions/my-element.js\" %}\n```\n\n----------------------------------------\n\nTITLE: Writing Component Tests with WebdriverIO for Lit\nDESCRIPTION: Example test script for testing a Lit component with WebdriverIO, demonstrating component rendering, attribute setting, and cleanup. Shows how to create, manipulate, and verify a component's behavior.\nSOURCE: https://github.com/lit/lit.dev/blob/main/packages/lit-dev-content/site/docs/v3/tools/testing.md#2025-04-09_snippet_3\n\nLANGUAGE: ts\nCODE:\n```\nimport { expect, $ } from '@wdio/globals'\n\n// Component.ts contains the <simple-greeting> component implemented the same as:\n// https://lit.dev/docs/components/overview/\nimport './components/Component.ts'\n\ndescribe('Lit Component testing', () => {\n    let elem: HTMLElement\n\n    beforeEach(() => {\n        elem = document.createElement('simple-greeting')\n    })\n\n    it('should render component', async () => {\n        elem.setAttribute('name', 'WebdriverIO')\n        document.body.appendChild(elem)\n        await expect($(elem)).toHaveText('Hello, WebdriverIO!')\n    })\n\n    afterEach(() => {\n        elem.remove()\n    })\n})\n```\n\n----------------------------------------\n\nTITLE: Tagged Template Literal Example in JavaScript\nDESCRIPTION: Shows how to use a template tag function with template literals.\nSOURCE: https://github.com/lit/lit.dev/blob/main/packages/lit-dev-content/site/docs/v1/lit-html/concepts.md#2025-04-09_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nlet name = 'Monica';\ntag`My name is ${name}.`\n```\n\n----------------------------------------\n\nTITLE: Server Implementation with TypeScript\nDESCRIPTION: TypeScript implementation of a Koa middleware that uses Lit's ModuleLoader to load and render templates in a VM context. Includes type safety and proper response streaming.\nSOURCE: https://github.com/lit/lit.dev/blob/main/packages/lit-dev-content/site/docs/v2/ssr/server-usage.md#2025-04-09_snippet_9\n\nLANGUAGE: typescript\nCODE:\n```\n// server.js\nimport {ModuleLoader} from '@lit-labs/ssr/lib/module-loader.js';\nimport {RenderResultReadable} from '@lit-labs/ssr/lib/render-result-readable.js';\n\n// ...\n\n// within a Koa middleware, for example\napp.use(async (ctx) => {\n  const moduleLoader = new ModuleLoader();\n  const importResult = await moduleLoader.importModule(\n    './render-template.js',  // Module to load in VM context\n    import.meta.url          // Referrer URL for module\n  );\n  const {renderTemplate} = importResult.module.namespace\n    as typeof import('./render-template.js')\n  const ssrResult = await renderTemplate({some: \"data\"});\n  ctx.type = 'text/html';\n  ctx.body = new RenderResultReadable(ssrResult);\n});\n```\n\n----------------------------------------\n\nTITLE: Using ContextConsumer Controller\nDESCRIPTION: Example of using the ContextConsumer controller directly instead of the @consume decorator. This provides more explicit control over context consumption.\nSOURCE: https://github.com/lit/lit.dev/blob/main/packages/lit-dev-content/site/docs/v2/data/context.md#2025-04-09_snippet_12\n\nLANGUAGE: typescript\nCODE:\n```\nimport {LitElement, property} from 'lit';\nimport {ContextConsumer} from '@lit-labs/context';\nimport {Logger, loggerContext} from './logger.js';\n\nexport class MyElement extends LitElement {\n  private _myData = new ContextConsumer(this, myContext);\n\n  render() {\n    const myData = this._myData.value;\n    return html`...`;\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Default Shadow DOM Structure\nDESCRIPTION: Example showing the default DOM structure created by LitElement with shadow root.\nSOURCE: https://github.com/lit/lit.dev/blob/main/packages/lit-dev-content/site/docs/v2/components/shadow-dom.md#2025-04-09_snippet_9\n\nLANGUAGE: html\nCODE:\n```\n<my-element>\n  #shadow-root\n    <p>child 1</p>\n    <p>child 2</p>\n```\n\n----------------------------------------\n\nTITLE: Installing Babel Dependencies for Lit Component Compilation\nDESCRIPTION: Shell commands to install Babel and necessary plugins for compiling Lit components with proposed JavaScript features.\nSOURCE: https://github.com/lit/lit.dev/blob/main/packages/lit-dev-content/site/docs/v2/tools/publishing.md#2025-04-09_snippet_3\n\nLANGUAGE: sh\nCODE:\n```\nnpm install --save-dev @babel/core\nnpm install --save-dev @babel/plugin-proposal-class-properties\nnpm install --save-dev @babel/plugin-proposal-decorators\n```\n\n----------------------------------------\n\nTITLE: Importing ifDefined Directive in JavaScript\nDESCRIPTION: Shows how to import the ifDefined directive from the Lit library.\nSOURCE: https://github.com/lit/lit.dev/blob/main/packages/lit-dev-content/site/docs/v3/templates/directives.md#2025-04-09_snippet_19\n\nLANGUAGE: javascript\nCODE:\n```\nimport {ifDefined} from 'lit/directives/if-defined.js';\n```\n\n----------------------------------------\n\nTITLE: Demonstrating Style Leakage in HTML\nDESCRIPTION: Shows how styles from the main document can affect elements inside web components without Shadow DOM encapsulation.\nSOURCE: https://github.com/lit/lit.dev/blob/main/packages/lit-dev-content/site/tutorials/content/wc-to-lit/03.md#2025-04-09_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<!DOCTYPE html>\n<html>\n <head>\n   <script src=\"./rating-element.js\" type=\"module\"></script>\n   <style>\n     span {\n       border: 1px solid red;\n     }\n   </style>\n </head>\n <body>\n   <rating-element></rating-element>\n </body>\n</html>\n```\n\n----------------------------------------\n\nTITLE: Dispatching Custom Events with Data in JavaScript\nDESCRIPTION: Creates and dispatches a CustomEvent with additional data in the detail property, which allows passing complex information with the event.\nSOURCE: https://github.com/lit/lit.dev/blob/main/packages/lit-dev-content/site/docs/v2/components/events.md#2025-04-09_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\nconst event = new CustomEvent('my-event', {\n  detail: {\n    message: 'Something important happened'\n  }\n});\nthis.dispatchEvent(event);\n```\n\n----------------------------------------\n\nTITLE: Rendering Conditional List Items in Lit Component Template (JavaScript)\nDESCRIPTION: This snippet shows how to render the conditionally populated list items array in the Lit component's template using JavaScript. It uses the ${listItems} expression to include the array in an unordered list.\nSOURCE: https://github.com/lit/lit.dev/blob/main/packages/lit-dev-content/site/tutorials/content/working-with-lists/03.md#2025-04-09_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\n// my-element.js\n  render() {\n    ⋮\n    return html`\n      ⋮\n      <ul>\n        ${listItems}\n      </ul>\n    `;\n  }\n```\n\n----------------------------------------\n\nTITLE: Handling Custom Events in Lit Templates\nDESCRIPTION: Demonstrates how to listen for and handle custom events in Lit templates using the declarative event syntax.\nSOURCE: https://github.com/lit/lit.dev/blob/main/packages/lit-dev-content/site/docs/v1/components/events.md#2025-04-09_snippet_10\n\nLANGUAGE: html\nCODE:\n```\n<my-element @my-event=\"${(e) => { console.log(e.detail.message) }}\"></my-element>\n```\n\n----------------------------------------\n\nTITLE: Rendering Lit Templates - TypeScript Function Signature\nDESCRIPTION: The main render function signature for server-side rendering Lit templates.\nSOURCE: https://github.com/lit/lit.dev/blob/main/packages/lit-dev-content/site/docs/v3/ssr/server-usage.md#2025-04-09_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nrender(value: unknown, renderInfo?: Partial<RenderInfo>): RenderResult\n```\n\n----------------------------------------\n\nTITLE: Importing consume Decorator from Lit Labs\nDESCRIPTION: Shows how to import the consume decorator from the @lit-labs/context package.\nSOURCE: https://github.com/lit/lit.dev/blob/main/packages/lit-dev-content/site/docs/v2/data/context.md#2025-04-09_snippet_21\n\nLANGUAGE: ts\nCODE:\n```\nimport {consume} from '@lit-labs/context';\n```\n\n----------------------------------------\n\nTITLE: Using Cache Directive in Lit for Conditional DOM\nDESCRIPTION: Shows how to use Lit's cache directive to preserve conditional DOM, similar to Polymer's dom-if behavior.\nSOURCE: https://github.com/lit/lit.dev/blob/main/packages/lit-dev-content/site/articles/article/lit-for-polymer-users.md#2025-04-09_snippet_10\n\nLANGUAGE: js\nCODE:\n```\nimport {LitElement, html} from 'lit';\nimport {cache} from 'lit/directives/cache.js';\n...\n\n   return html`${cache(this.condition\n    ?  html`<div>condition is true</div>`\n    : ''\n   )}`;\n```\n\n----------------------------------------\n\nTITLE: Keyed Directive TypeScript Signature\nDESCRIPTION: TypeScript signature for the keyed directive function.\nSOURCE: https://github.com/lit/lit.dev/blob/main/packages/lit-dev-content/site/docs/v3/templates/directives.md#2025-04-09_snippet_26\n\nLANGUAGE: typescript\nCODE:\n```\nkeyed(key: unknown, value: unknown)\n```\n\n----------------------------------------\n\nTITLE: Using templateContent Directive with HTML Template in JavaScript\nDESCRIPTION: Illustrates the use of the 'templateContent' directive to stamp out HTML templates into lit-html templates. This is useful when working with pre-defined HTML templates.\nSOURCE: https://github.com/lit/lit.dev/blob/main/packages/lit-dev-content/site/docs/v1/lit-html/release-notes.md#2025-04-09_snippet_2\n\nLANGUAGE: HTML\nCODE:\n```\n<template id=\"example\">\n  <p>HTML Template</p>\n</template>\n```\n\nLANGUAGE: JavaScript\nCODE:\n```\nconst template = document.querySelector('#example');\nhtml`\n  <h1>Example</h1>\n  ${templateContent(template)}\n`;\n```\n\n----------------------------------------\n\nTITLE: Using unsafeHTML Directive in Lit-html\nDESCRIPTION: Shows how to render HTML content directly using the unsafeHTML directive. Warning: Should not be used with unsanitized user input.\nSOURCE: https://github.com/lit/lit.dev/blob/main/packages/lit-dev-content/site/docs/v1/lit-html/template-reference.md#2025-04-09_snippet_15\n\nLANGUAGE: javascript\nCODE:\n```\nimport {unsafeHTML} from 'lit-html/directives/unsafe-html.js';\n\nconst markup = '<div>Some HTML to render.</div>';\nconst template = html`\n  Look out, potentially unsafe HTML ahead:\n  ${unsafeHTML(markup)}\n`;\n```\n\n----------------------------------------\n\nTITLE: Focusing an Input Element on First Update in LitElement (JavaScript)\nDESCRIPTION: This example shows how to implement the firstUpdated method to focus an input element after the first update of a LitElement component.\nSOURCE: https://github.com/lit/lit.dev/blob/main/packages/lit-dev-content/site/docs/v1/components/lifecycle.md#2025-04-09_snippet_10\n\nLANGUAGE: javascript\nCODE:\n```\n{% include \"v1-projects/lifecycle/firstupdated/my-element.js\" %}\n```\n\n----------------------------------------\n\nTITLE: Rendering List Items with Lit Templates\nDESCRIPTION: Demonstrates how to render a list of items using Lit's templating system and JavaScript map() function to create repeating templates.\nSOURCE: https://github.com/lit/lit.dev/blob/main/packages/lit-dev-content/site/tutorials/content/intro-to-lit/05.md#2025-04-09_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n${this._listItems.map((item) =>\n        html`<li>${item.text}</li>`\n      )}\n```\n\n----------------------------------------\n\nTITLE: Composing Templates with Imported Elements (JavaScript)\nDESCRIPTION: Shows how to compose templates by importing other custom elements and using them in the template. This approach allows for modular component design.\nSOURCE: https://github.com/lit/lit.dev/blob/main/packages/lit-dev-content/site/docs/v1/components/templates.md#2025-04-09_snippet_10\n\nLANGUAGE: javascript\nCODE:\n```\nimport './my-header.js';\nimport './my-article.js';\nimport './my-footer.js';\n\nclass MyPage extends LitElement {\n  render() {\n    return html`\n      <my-header></my-header>\n      <my-article></my-article>\n      <my-footer></my-footer>\n    `;\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Basic Lit Template Example\nDESCRIPTION: Simple example of creating a Lit template with HTML content.\nSOURCE: https://github.com/lit/lit.dev/blob/main/packages/lit-dev-content/site/docs/v3/ssr/server-usage.md#2025-04-09_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nhtml`<h1>Hello</h1>`\n```\n\n----------------------------------------\n\nTITLE: Deduplicating npm Dependencies\nDESCRIPTION: This command deduplicates npm dependencies, which can help resolve issues with multiple installations of signal-polyfill.\nSOURCE: https://github.com/lit/lit.dev/blob/main/packages/lit-dev-content/site/docs/v3/data/signals.md#2025-04-09_snippet_7\n\nLANGUAGE: sh\nCODE:\n```\nnpm dedupe\n```\n\n----------------------------------------\n\nTITLE: Creating Repeating SVG Pattern\nDESCRIPTION: Implements a function that creates a repeating pattern with specific dimensions and offsets. Uses userSpaceOnUse coordinates and defines a 200px square tile with -10px offsets.\nSOURCE: https://github.com/lit/lit.dev/blob/main/packages/lit-dev-content/site/tutorials/content/svg-templates/04.md#2025-04-09_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nconst createRepeatPattern = () => svg`\n  <pattern\n    id=\"repeat-pattern\"\n    x=\"-10\"\n    y=\"-10\"\n    width=\"200\"\n    height=\"200\"\n    patternUnits=\"userSpaceOnUse\">\n    ${createTile()}\n  </pattern>\n`;\n```\n\n----------------------------------------\n\nTITLE: Importing unsafeSVG Directive\nDESCRIPTION: Import statement for the unsafeSVG directive from Lit library.\nSOURCE: https://github.com/lit/lit.dev/blob/main/packages/lit-dev-content/site/docs/v3/templates/directives.md#2025-04-09_snippet_40\n\nLANGUAGE: javascript\nCODE:\n```\nimport {unsafeSVG} from 'lit/directives/unsafe-svg.js';\n```\n\n----------------------------------------\n\nTITLE: Implementing Template Expression in JavaScript\nDESCRIPTION: Shows how to use the conditional template in the main render method.\nSOURCE: https://github.com/lit/lit.dev/blob/main/packages/lit-dev-content/site/tutorials/content/intro-to-lit/07.md#2025-04-09_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\n${todosOrMessage}\n```\n\n----------------------------------------\n\nTITLE: classMap Usage Example - JavaScript\nDESCRIPTION: Example showing how to use classMap directive in a Lit component with JavaScript.\nSOURCE: https://github.com/lit/lit.dev/blob/main/packages/lit-dev-content/site/docs/v2/templates/directives.md#2025-04-09_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nclass MyElement extends LitElement {\n  static properties = {\n    enabled: {type: Boolean},\n  };\n\n  constructor() {\n    super();\n    this.enabled = false;\n  }\n\n  render() {\n    const classes = { enabled: this.enabled, hidden: false };\n    return html`<div class=${classMap(classes)}>Classy text</div>`;\n  }\n}\ncustomElements.define('my-element', MyElement);\n```\n\n----------------------------------------\n\nTITLE: Rendering Conditional Content with 'nothing' in Lit\nDESCRIPTION: Shows how to use the 'nothing' value from lit-html to render absolutely nothing when a condition is not met.\nSOURCE: https://github.com/lit/lit.dev/blob/main/packages/lit-dev-content/site/docs/v1/lit-html/writing-templates.md#2025-04-09_snippet_13\n\nLANGUAGE: js\nCODE:\n```\nimport {html, nothing} from 'lit-html';\n${user.isAdmin\n      ? html`<button>DELETE</button>`\n      : nothing\n  }\n```\n\n----------------------------------------\n\nTITLE: Conditional Rendering with Ternary Operators in lit-html\nDESCRIPTION: Demonstrates how to use JavaScript ternary expressions to create conditional templates in lit-html. This allows for inline conditional logic without special directives.\nSOURCE: https://github.com/lit/lit.dev/blob/main/packages/lit-dev-content/site/docs/v1/lit-html/writing-templates.md#2025-04-09_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\nhtml`\n  ${user.isloggedIn\n      ? html`Welcome ${user.name}`\n      : html`Please log in`\n  }\n`;\n```\n\n----------------------------------------\n\nTITLE: Property Declaration Equivalent\nDESCRIPTION: Shows the standard property declaration code that @property decorator replaces.\nSOURCE: https://github.com/lit/lit.dev/blob/main/packages/lit-dev-content/site/docs/v1/components/decorators.md#2025-04-09_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nstatic get properties() {\n  return {\n    adjective: {}\n  };\n}\n\nconstructor() {\n  this.adjective = 'awesome';\n}\n```\n\n----------------------------------------\n\nTITLE: Sync Result Collection\nDESCRIPTION: Example of using collectResultSync for synchronous SSR result collection.\nSOURCE: https://github.com/lit/lit.dev/blob/main/packages/lit-dev-content/site/docs/v3/ssr/server-usage.md#2025-04-09_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\nimport {render} from '@lit-labs/ssr';\nimport {collectResultSync} from '@lit-labs/ssr/lib/render-result.js';\nimport {html} from 'lit';\n\nconst result = render(html`<my-element></my-element>`);\n// Throws if `result` contains a Promise!\nconst contents = collectResultSync(result);\n```\n\n----------------------------------------\n\nTITLE: Creating Configurable SVG Text Element Function\nDESCRIPTION: Defines a function to generate a configurable SVG text element with styling attributes using Lit's svg template literal.\nSOURCE: https://github.com/lit/lit.dev/blob/main/packages/lit-dev-content/site/tutorials/content/svg-templates/01.md#2025-04-09_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nconst createElement = (chars: string): SVGTemplateResult => svg`\n  <text\n    dominant-baseline=\"hanging\"\n    font-family=\"monospace\"\n    font-size=\"24px\">\n    ${chars}\n  </text>\n`;\n```\n\nLANGUAGE: javascript\nCODE:\n```\nconst createElement = (chars) => svg`\n  <text\n    dominant-baseline=\"hanging\"\n    font-family=\"monospace\"\n    font-size=\"24px\">\n    ${chars}\n  </text>\n`;\n```\n\n----------------------------------------\n\nTITLE: Generated HTML Template Example\nDESCRIPTION: Shows the HTML template generated by lit-html during processing.\nSOURCE: https://github.com/lit/lit.dev/blob/main/packages/lit-dev-content/site/docs/v1/lit-html/concepts.md#2025-04-09_snippet_3\n\nLANGUAGE: html\nCODE:\n```\n<h1>{{{}}}</h1>\n```\n\n----------------------------------------\n\nTITLE: Using Lit Component in Markdown\nDESCRIPTION: Example of using a custom Lit component in a markdown file that will be processed by Eleventy\nSOURCE: https://github.com/lit/lit.dev/blob/main/packages/lit-dev-content/site/blog/2022-02-07-eleventy.md#2025-04-09_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n# Greetings\n\n<demo-greeter name=\"World\"></demo-greeter>\n```\n\n----------------------------------------\n\nTITLE: Defining Reactive Property without Decorator in TypeScript\nDESCRIPTION: Example of defining a reactive property without using a decorator, using the declare keyword.\nSOURCE: https://github.com/lit/lit.dev/blob/main/packages/lit-dev-content/site/docs/v2/components/decorators.md#2025-04-09_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\nstatic properties = { foo: {} };\n\ndeclare foo: string;\n\nconstructor() {\n  super();\n  this.foo = 'bar';\n}\n```\n\n----------------------------------------\n\nTITLE: Using ifDefined Directive in JavaScript\nDESCRIPTION: Shows how to use the ifDefined directive in a Lit element using JavaScript class syntax.\nSOURCE: https://github.com/lit/lit.dev/blob/main/packages/lit-dev-content/site/docs/v3/templates/directives.md#2025-04-09_snippet_21\n\nLANGUAGE: javascript\nCODE:\n```\nclass MyElement extends LitElement {\n  static properties = {\n    filename: {},\n    size: {},\n  };\n\n  constructor() {\n    super();\n    this.filename = undefined;\n    this.size = undefined;\n  }\n\n  render() {\n    // src attribute not rendered if either size or filename are undefined\n    return html`<img src=\"/images/${ifDefined(this.size)}/${ifDefined(this.filename)}\">`;\n  }\n}\ncustomElements.define('my-element', MyElement);\n```\n\n----------------------------------------\n\nTITLE: Nesting localized messages in HTML templates\nDESCRIPTION: Example of how to nest a localized message inside a regular HTML template.\nSOURCE: https://github.com/lit/lit.dev/blob/main/packages/lit-dev-content/site/docs/v2/localization/overview.md#2025-04-09_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\nhtml`<button>${msg('Hello World')}</button>`;\n```\n\n----------------------------------------\n\nTITLE: Configuring TypeScript for Decorator Support\nDESCRIPTION: TypeScript compiler options required to enable decorator support.\nSOURCE: https://github.com/lit/lit.dev/blob/main/packages/lit-dev-content/site/docs/v2/components/decorators.md#2025-04-09_snippet_4\n\nLANGUAGE: json\nCODE:\n```\n\"experimentalDecorators\": true,\n\"useDefineForClassFields\": false,\n```\n\n----------------------------------------\n\nTITLE: Loading and Rendering Templates in VM Context with JavaScript\nDESCRIPTION: Shows how to use ModuleLoader to import a render function in a separate VM context and use it within a Koa middleware. This JavaScript version accomplishes the same task as the TypeScript example but without type annotations.\nSOURCE: https://github.com/lit/lit.dev/blob/main/packages/lit-dev-content/site/docs/v3/ssr/server-usage.md#2025-04-09_snippet_10\n\nLANGUAGE: javascript\nCODE:\n```\n// server.js\nimport {ModuleLoader} from '@lit-labs/ssr/lib/module-loader.js';\nimport {RenderResultReadable} from '@lit-labs/ssr/lib/render-result-readable.js';\n\n// ...\n\n// within a Koa middleware, for example\napp.use(async (ctx) => {\n  const moduleLoader = new ModuleLoader();\n  const importResult = await moduleLoader.importModule(\n    './render-template.js',  // Module to load in VM context\n    import.meta.url          // Referrer URL for module\n  );\n  const {renderTemplate} = importResult.module.namespace;\n  const ssrResult = await renderTemplate({some: \"data\"});\n  ctx.type = 'text/html';\n  ctx.body = new RenderResultReadable(ssrResult);\n});\n```\n\n----------------------------------------\n\nTITLE: Rendering SVG with Defined Element\nDESCRIPTION: This render function demonstrates how to use the createElement function inside <defs> in an SVG context.\nSOURCE: https://github.com/lit/lit.dev/blob/main/packages/lit-dev-content/site/tutorials/content/svg-templates/02.md#2025-04-09_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\nrender() {\n  return html`\n    <svg>\n      <defs>\n        ${createElement(this.chars)}\n      </defs>\n      ...\n    </svg>\n  `;\n}\n```\n\n----------------------------------------\n\nTITLE: Importing provide Decorator from Lit Labs\nDESCRIPTION: Shows how to import the provide decorator from the @lit-labs/context package.\nSOURCE: https://github.com/lit/lit.dev/blob/main/packages/lit-dev-content/site/docs/v2/data/context.md#2025-04-09_snippet_19\n\nLANGUAGE: ts\nCODE:\n```\nimport {provide} from '@lit-labs/context';\n```\n\n----------------------------------------\n\nTITLE: Watching TypeScript files for changes\nDESCRIPTION: Command to continuously watch for file changes and automatically rebuild the TypeScript project when files are modified.\nSOURCE: https://github.com/lit/lit.dev/blob/main/packages/lit-dev-content/site/docs/v2/tools/starter-kits.md#2025-04-09_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nnpm run build:watch\n```\n\n----------------------------------------\n\nTITLE: Rendering lit-html Template\nDESCRIPTION: Shows how to render a lit-html template to the DOM.\nSOURCE: https://github.com/lit/lit.dev/blob/main/packages/lit-dev-content/site/blog/2019-02-05-lit-element-and-lit-html-release.md#2025-04-09_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nrender(myTemplate('Ada'), document.body);\n```\n\n----------------------------------------\n\nTITLE: Implementing Lazy Setup for Tooltip Directive in TypeScript\nDESCRIPTION: This snippet shows the implementation of the setupLazy method in the tooltip directive. It ensures the lazy setup is only done once and uses SimpleTooltip.lazy to create the tooltip.\nSOURCE: https://github.com/lit/lit.dev/blob/main/packages/lit-dev-content/site/tutorials/content/tooltip/08.md#2025-04-09_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nsetupLazy() {\n  this.didSetupLazy = true;\n  SimpleTooltip.lazy(this.part!.element, (tooltip: SimpleTooltip) => {\n    this.tooltip = tooltip;\n    this.renderTooltipContent();\n  });\n}\n```\n\n----------------------------------------\n\nTITLE: Updating Rendered Value in Timer Callback (TypeScript)\nDESCRIPTION: This snippet shows how to use AsyncDirective's setValue API to update the rendered value of a Lit directive in a timer callback. It uses the stored time value to re-format the date based on the elapsed time.\nSOURCE: https://github.com/lit/lit.dev/blob/main/packages/lit-dev-content/site/tutorials/content/async-directive/06.md#2025-04-09_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\n        this.setValue(this.render(this.time));\n```\n\n----------------------------------------\n\nTITLE: Generated Static HTML Output\nDESCRIPTION: The resulting HTML output after Eleventy processes the markdown file, showing how the Lit component is rendered with Declarative Shadow DOM\nSOURCE: https://github.com/lit/lit.dev/blob/main/packages/lit-dev-content/site/blog/2022-02-07-eleventy.md#2025-04-09_snippet_2\n\nLANGUAGE: html\nCODE:\n```\n<h1>Greetings</h1>\n\n<demo-greeter name=\"World\">\n  <template shadowroot=\"open\">\n    <style>\n      b { color: red; }\n    </style>\n    Hello <b>World</b>!\n  </template>\n</demo-greeter>\n```\n\n----------------------------------------\n\nTITLE: Including template polyfill script in HTML for lit-html on IE11\nDESCRIPTION: This HTML snippet shows how to include the template polyfill script in your HTML file. The script should be loaded before your application code that uses lit-html.\nSOURCE: https://github.com/lit/lit.dev/blob/main/packages/lit-dev-content/site/docs/v2/tools/production.md#2025-04-09_snippet_6\n\nLANGUAGE: html\nCODE:\n```\n<script src=\"./node_modules/@webcomponents/template/template.min.js\"></script>\n```\n\n----------------------------------------\n\nTITLE: Reusing Defined SVG Element with <use>\nDESCRIPTION: This example shows how to reuse the previously defined <text> element using the <use> element. The href attribute references the id of the defined element.\nSOURCE: https://github.com/lit/lit.dev/blob/main/packages/lit-dev-content/site/tutorials/content/svg-templates/02.md#2025-04-09_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nconst helloDefs = svg`\n  <defs>\n    <text id=\"chars\">Hello defs!</text>\n  </defs>\n  <use href=\"#chars\"></use>\n`;\n```\n\n----------------------------------------\n\nTITLE: Adding Logging to Directive Lifecycle Methods\nDESCRIPTION: These snippets add console.log statements to the ensureTimerStarted and ensureTimerStopped methods of a custom directive. This allows developers to verify the correct execution of lifecycle methods.\nSOURCE: https://github.com/lit/lit.dev/blob/main/packages/lit-dev-content/site/tutorials/content/async-directive/08.md#2025-04-09_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\n  ensureTimerStarted() {\n    console.log('timer started');\n    ...\n  }\n```\n\nLANGUAGE: typescript\nCODE:\n```\n  ensureTimerStopped() {\n    console.log('timer stopped');\n    ...\n  }\n```\n\n----------------------------------------\n\nTITLE: Installing dependencies for Lit Starter Kit project\nDESCRIPTION: Command to install the necessary npm dependencies after downloading and extracting the Lit Starter Kit project.\nSOURCE: https://github.com/lit/lit.dev/blob/main/packages/lit-dev-content/site/docs/v2/tools/starter-kits.md#2025-04-09_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ncd <project folder>\nnpm i\n```\n\n----------------------------------------\n\nTITLE: Loading Lit Element Hydration Support in HTML\nDESCRIPTION: This HTML example shows how to properly load the lit-element-hydrate-support.js module before any component definitions to enable automatic hydration of server-rendered Lit components. The module must be loaded before the lit library to ensure hydration support is properly installed.\nSOURCE: https://github.com/lit/lit.dev/blob/main/packages/lit-dev-content/site/docs/v2/ssr/client-usage.md#2025-04-09_snippet_1\n\nLANGUAGE: html\nCODE:\n```\n  <body>\n    <!-- App components rendered with declarative shadow DOM placed here. -->\n\n    <!-- ssr-client lit-element-hydrate-support should be loaded first. -->\n    <script type=\"module\" src=\"/node_modules/@lit-labs/ssr-client/lit-element-hydrate-support.js\"></script>\n\n    <!-- As component definition loads, your pre-rendered components will\n        come to life and become interactive. -->\n    <script src=\"/app-components.js\"></script>\n  </body>\n```\n\n----------------------------------------\n\nTITLE: Using updateComplete Promise in LitElement (JavaScript)\nDESCRIPTION: The updateComplete Promise resolves when the element has finished updating. This example shows how to use updateComplete to wait for an update and perform actions afterward.\nSOURCE: https://github.com/lit/lit.dev/blob/main/packages/lit-dev-content/site/docs/v1/components/lifecycle.md#2025-04-09_snippet_13\n\nLANGUAGE: javascript\nCODE:\n```\n{% include \"v1-projects/lifecycle/updatecomplete/my-element.js\" %}\n```\n\n----------------------------------------\n\nTITLE: Configuring Eleventy Navigation and Version Links for Lit Documentation\nDESCRIPTION: This YAML frontmatter configures the navigation and version links for the 'Related libraries' section in the Lit documentation. It sets the title, navigation key, order, and provides a version link for v1.\nSOURCE: https://github.com/lit/lit.dev/blob/main/packages/lit-dev-content/site/docs/v3/libraries/index.md#2025-04-09_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n---\ntitle: Related libraries\neleventyNavigation:\n  key: Related libraries\n  order: 12\nversionLinks:\n  v1: lit-html/introduction/\n---\n```\n\n----------------------------------------\n\nTITLE: Installing lit-html Preview Release with npm\nDESCRIPTION: Command to install the preview release of lit-html using npm. This installs the next major version of lit-html.\nSOURCE: https://github.com/lit/lit.dev/blob/main/packages/lit-dev-content/site/blog/2020-09-22-lit-element-and-lit-html-next-preview.md#2025-04-09_snippet_1\n\nLANGUAGE: sh\nCODE:\n```\nnpm i lit-html@next-major\n```\n\n----------------------------------------\n\nTITLE: Building TypeScript Lit components\nDESCRIPTION: Command to build JavaScript files from TypeScript source in the Lit TypeScript starter project.\nSOURCE: https://github.com/lit/lit.dev/blob/main/packages/lit-dev-content/site/docs/v2/tools/starter-kits.md#2025-04-09_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nnpm run build\n```\n\n----------------------------------------\n\nTITLE: Defining Reactive Properties in Lit Component\nDESCRIPTION: This snippet shows how to define reactive properties 'numPrints' and 'rotationOffset' in a Lit component class. It includes both TypeScript and JavaScript versions.\nSOURCE: https://github.com/lit/lit.dev/blob/main/packages/lit-dev-content/site/tutorials/content/svg-templates/02.md#2025-04-09_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nexport class RepeatPattern extends LitElement {\n  @property({type: Number, attribute: \"num-prints\"}) numPrints = 7;\n  @property({\n    type: Number,\n    attribute: \"rotation-offset\",\n  }) rotationOffset = 0;\n  ...\n}\n```\n\nLANGUAGE: javascript\nCODE:\n```\nexport class RepeatPattern extends LitElement {\n  static properties = {\n    chars: {type: String},\n    numPrints: {type: Number, attribute: 'num-prints'},\n    rotationOffset: {\n      type: Number,\n      attribute: 'rotation-offset',\n    },\n  };\n\n  constructor() {\n    super();\n    this.chars = 'lit';\n    this.numPrints = 7;\n    this.rotationOffset = 0;\n  }\n  ...\n}\n```\n\n----------------------------------------\n\nTITLE: Rendering Complete SVG Pattern in Lit Component\nDESCRIPTION: This render function combines all previous elements to create a complete SVG pattern with rotated text elements. It's shown in both TypeScript and JavaScript versions.\nSOURCE: https://github.com/lit/lit.dev/blob/main/packages/lit-dev-content/site/tutorials/content/svg-templates/02.md#2025-04-09_snippet_8\n\nLANGUAGE: typescript\nCODE:\n```\n@customElement('repeat-pattern')\nexport class RepeatPattern extends LitElement {\n  ...\n\n  render() {\n    return html`\n      <svg height=\"100%\" width=\"100%\">\n        <defs>\n          ${createElement(this.chars)}\n        </defs>\n        ${createMotif(\n            this.numPrints,\n            this.rotationOffset,\n          )}\n      </svg>\n    `;\n  }\n}\n```\n\nLANGUAGE: javascript\nCODE:\n```\nexport class RepeatPattern extends LitElement {\n  ...\n\n  render() {\n    return html`\n      <svg height=\"100%\" width=\"100%\">\n        <defs>\n          ${createElement(this.chars)}\n        </defs>\n        ${createMotif(\n          this.numPrints,\n          this.rotationOffset,\n        )}\n      </svg>\n    `;\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Installing LitElement Preview Release with npm\nDESCRIPTION: Command to install the preview release of LitElement using npm. This installs the next major version of LitElement.\nSOURCE: https://github.com/lit/lit.dev/blob/main/packages/lit-dev-content/site/blog/2020-09-22-lit-element-and-lit-html-next-preview.md#2025-04-09_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\nnpm i lit-element@next-major\n```\n\n----------------------------------------\n\nTITLE: Lit Localize Configuration\nDESCRIPTION: Example configuration file for Lit Localize showing settings for both TypeScript and JavaScript projects.\nSOURCE: https://github.com/lit/lit.dev/blob/main/packages/lit-dev-content/site/docs/v3/localization/overview.md#2025-04-09_snippet_3\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"$schema\": \"https://raw.githubusercontent.com/lit/lit/main/packages/localize-tools/config.schema.json\",\n  \"sourceLocale\": \"en\",\n  \"targetLocales\": [\"es-419\", \"zh-Hans\"],\n  \"tsConfig\": \"./tsconfig.json\",\n  \"output\": {\n    \"mode\": \"runtime\",\n    \"outputDir\": \"./src/generated/locales\",\n    \"localeCodesModule\": \"./src/generated/locale-codes.ts\"\n  },\n  \"interchange\": {\n    \"format\": \"xliff\",\n    \"xliffDir\": \"./xliff/\"\n  }\n}\n```\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"$schema\": \"https://raw.githubusercontent.com/lit/lit/main/packages/localize-tools/config.schema.json\",\n  \"sourceLocale\": \"en\",\n  \"targetLocales\": [\"es-419\", \"zh-Hans\"],\n  \"inputFiles\": [\n    \"src/**/*.js\"\n  ],\n  \"output\": {\n    \"mode\": \"runtime\",\n    \"outputDir\": \"./src/generated/locales\",\n    \"localeCodesModule\": \"./src/generated/locale-codes.js\"\n  },\n  \"interchange\": {\n    \"format\": \"xliff\",\n    \"xliffDir\": \"./xliff/\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Using unsafeSVG Directive in Lit-html\nDESCRIPTION: Demonstrates rendering SVG content directly using the unsafeSVG directive. Warning: Should not be used with unsanitized user input.\nSOURCE: https://github.com/lit/lit.dev/blob/main/packages/lit-dev-content/site/docs/v1/lit-html/template-reference.md#2025-04-09_snippet_16\n\nLANGUAGE: javascript\nCODE:\n```\nimport {unsafeSVG} from 'lit-html/directives/unsafe-svg';\n\nconst svg = '<circle cx=\"50\" cy=\"50\" r=\"40\" fill=\"red\" />'\n\nconst template = html`\n  Look out, potentially unsafe SVG ahead:\n  <svg width=\"40\" height=\"40\" viewBox=\"0 0 100 100\"\n    xmlns=\"http://www.w3.org/2000/svg\" version=\"1.1\">\n    ${unsafeSVG(svg)}\n  </svg> `;\n```\n\n----------------------------------------\n\nTITLE: Creating and updating dynamic lit-html templates\nDESCRIPTION: Example of a template function that can be called with different data to update the rendered content efficiently.\nSOURCE: https://github.com/lit/lit.dev/blob/main/packages/lit-dev-content/site/docs/v2/libraries/standalone-templates.md#2025-04-09_snippet_4\n\nLANGUAGE: js\nCODE:\n```\nimport {html, render} from 'lit-html';\n\n// Define a template function\nconst myTemplate = (name) => html`<div>Hello ${name}</div>`;\n\n// Render the template with some data\nrender(myTemplate('earth'), document.body);\n\n// ... Later on ...\n// Render the template with different data\nrender(myTemplate('mars'), document.body);\n```\n\n----------------------------------------\n\nTITLE: LitElement Component Definition in TypeScript\nDESCRIPTION: Creates a Web Component using LitElement base class with TypeScript decorators for property definition.\nSOURCE: https://github.com/lit/lit.dev/blob/main/packages/lit-dev-content/site/blog/2019-02-05-lit-element-and-lit-html-release.md#2025-04-09_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\n@customElement('name-tag')\nclass NameTag extends LitElement {\n  @property()\n  name = 'a secret';\n\n  render() {\n    return html`<p>Hi, my name is ${this.name}!</p>`;\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Displaying JavaScript Template Literal with Syntax Highlighting\nDESCRIPTION: A basic example of syntax highlighting for JavaScript code showing a Lit HTML template literal. This is non-interactive code that uses the same renderer as the playground to ensure consistent highlight styles.\nSOURCE: https://github.com/lit/lit.dev/blob/main/packages/lit-dev-content/site/docs/v3/internal/demos.md#2025-04-09_snippet_0\n\nLANGUAGE: js\nCODE:\n```\nhtml`<h1>Hello ${name}</h1>`\n```\n\n----------------------------------------\n\nTITLE: Creating a Clip Path in SVG with Lit\nDESCRIPTION: This snippet demonstrates how to create a clip path in the shape of a rectangle using SVG and Lit's svg template literal. The clip path is given an id for later reference.\nSOURCE: https://github.com/lit/lit.dev/blob/main/packages/lit-dev-content/site/tutorials/content/svg-templates/03.md#2025-04-09_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nconst helloClipPath = svg`\n  <clipPath id=\"rect-clip\">\n    <rect width=\"200\" height=\"200\"></rect>\n  </clipPath>\n`;\n```\n\n----------------------------------------\n\nTITLE: Efficient List Re-rendering with repeat() Directive\nDESCRIPTION: Shows how to use the repeat() directive for efficient re-rendering of long lists that may change frequently.\nSOURCE: https://github.com/lit/lit.dev/blob/main/packages/lit-dev-content/site/articles/article/lit-cheat-sheet.md#2025-04-09_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\n@customElement('my-element')\nexport class MyElement extends LitElement {\n  @property({type: Array})\n  items = [{ id: 1, name: 'Item 1' }, { id: 2, name: 'Item 2' }];\n\n  render() {\n    return html`\n      <ul>\n        ${repeat(this.items, item => item.id, item => html`\n          <li>${item.name}</li>\n        `)}\n      </ul>\n    `;\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Adding timeago.js Dependency to package.json\nDESCRIPTION: This snippet shows how to add the timeago.js package as a dependency in the package.json file. It's required for formatting time strings in a human-readable format.\nSOURCE: https://github.com/lit/lit.dev/blob/main/packages/lit-dev-content/site/tutorials/content/async-directive/03.md#2025-04-09_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n  // package.json\n  \"dependencies\": {\n    ...\n    \"timeago.js\": \"^4.0.2\"\n```\n\n----------------------------------------\n\nTITLE: Applying a Clip Path to an SVG Rectangle with Lit\nDESCRIPTION: This code shows how to apply a previously defined clip path to an SVG rectangle using the clip-path attribute. The rectangle references the clip path by its id.\nSOURCE: https://github.com/lit/lit.dev/blob/main/packages/lit-dev-content/site/tutorials/content/svg-templates/03.md#2025-04-09_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nconst helloTile = svg`\n  <rect\n    clip-path=\"url(#rect-clip)\"\n    width=\"300\"\n    height=\"300\"\n    fill=\"#000000\">\n  </rect>\n`;\n```\n\n----------------------------------------\n\nTITLE: Adding Event Listeners in Component Constructor in Lit\nDESCRIPTION: Shows how to add event listeners to the component itself using the constructor. This is useful for handling events from both slotted children and shadow DOM elements in a Lit component.\nSOURCE: https://github.com/lit/lit.dev/blob/main/packages/lit-dev-content/site/docs/v3/components/events.md#2025-04-09_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nconstructor() {\n  super();\n  this.addEventListener('click', (e) => console.log(e.type, e.target.localName));\n}\n```\n\n----------------------------------------\n\nTITLE: Custom Element SSR Integration\nDESCRIPTION: Example showing how to import and render custom elements on the server with Lit SSR.\nSOURCE: https://github.com/lit/lit.dev/blob/main/packages/lit-dev-content/site/docs/v3/ssr/server-usage.md#2025-04-09_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport {render} from '@lit-labs/ssr';\nimport {html} from 'lit';\n// Import `my-element` on the server to server render it.\nimport './my-element.js';\n\nconst result = render(html`\n  <h1>Hello SSR!</h1>\n  <my-element></my-element>\n`);\n```\n\n----------------------------------------\n\nTITLE: Implementing Read-only Properties in Lit\nDESCRIPTION: Shows how to create read-only properties in Lit using private fields and getters. Includes both TypeScript and JavaScript implementations with property declaration and update handling.\nSOURCE: https://github.com/lit/lit.dev/blob/main/packages/lit-dev-content/site/articles/article/lit-for-polymer-users.md#2025-04-09_snippet_14\n\nLANGUAGE: typescript\nCODE:\n```\nprivate _name: string = 'Somebody';\n\n@property({attribute: false})\nget name() { return this._name; }\n\nprivate _setName(name: string) {\n  this._name = name;\n  this.requestUpdate('name');\n}\n```\n\nLANGUAGE: javascript\nCODE:\n```\nstatic properties = {\n  name: {attribute: false}\n};\n\nconstructor() {\n  super();\n  this._name = 'Somebody';\n}\n\nget name() { return this._name }\n\n_setName(name) {\n  this._name = name;\n  this.requestUpdate('name');\n}\n```\n\n----------------------------------------\n\nTITLE: Embedding Full IDE Playground\nDESCRIPTION: Markdown syntax for embedding a complete IDE playground with editable project files and a side-by-side preview. Takes one required argument: the path to the project directory.\nSOURCE: https://github.com/lit/lit.dev/blob/main/packages/lit-dev-content/site/docs/v3/internal/demos.md#2025-04-09_snippet_2\n\nLANGUAGE: markdown\nCODE:\n```\n{% playground-ide \"v3-docs/templates/define\" %}\n```\n\n----------------------------------------\n\nTITLE: Creating a Tile Boundary with SVG Clip Path in Lit\nDESCRIPTION: This function creates a 200px square tile boundary using an SVG clip path. The clip path is given an id for later reference in the application.\nSOURCE: https://github.com/lit/lit.dev/blob/main/packages/lit-dev-content/site/tutorials/content/svg-templates/03.md#2025-04-09_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nconst createTileBoundary = () => svg`\n  <clipPath id=\"rect-clip\">\n    <rect width=\"200\" height=\"200\"></rect>\n  </clipPath>\n`;\n```\n\n----------------------------------------\n\nTITLE: Live Directive TypeScript Signature\nDESCRIPTION: TypeScript signature for the live directive function.\nSOURCE: https://github.com/lit/lit.dev/blob/main/packages/lit-dev-content/site/docs/v3/templates/directives.md#2025-04-09_snippet_32\n\nLANGUAGE: typescript\nCODE:\n```\nlive(value: unknown)\n```\n\n----------------------------------------\n\nTITLE: Starting Local Docker Environment for Lit.dev\nDESCRIPTION: Docker commands to build and run the lit.dev production environment locally, serving the main site and playground.\nSOURCE: https://github.com/lit/lit.dev/blob/main/README.md#2025-04-09_snippet_7\n\nLANGUAGE: sh\nCODE:\n```\ndocker build -t litdev . --build-arg LITDEV_ENV=local\ndocker run --rm --name litdev -p 6415:6415 -e LITDEV_ENV=local -e MODE=main litdev\ndocker run --rm --name litdev-playground -p 6416:6416 -e LITDEV_ENV=local -e MODE=playground litdev\n```\n\n----------------------------------------\n\nTITLE: Lit Component Render Method\nDESCRIPTION: Example of a Lit component render method defining the component's template\nSOURCE: https://github.com/lit/lit.dev/blob/main/packages/lit-dev-content/site/docs/v3/tools/starter-kits.md#2025-04-09_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nexport class MyElement extends LitElement {\n  // ...\n  render() {\n    return html`\n      <h1>Hello, ${this.name}!</h1>\n      <button @click=${this._onClick}>\n        Click Count: ${this.count}\n      </button>\n      <slot></slot>\n    `;\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Removing Attributes with Lit's nothing Sentinel Value in JavaScript\nDESCRIPTION: Demonstrates how to conditionally remove an attribute using Lit's nothing sentinel value. This is useful when you want to prevent setting an attribute if certain conditions are not met.\nSOURCE: https://github.com/lit/lit.dev/blob/main/packages/lit-dev-content/site/docs/v3/templates/expressions.md#2025-04-09_snippet_12\n\nLANGUAGE: js\nCODE:\n```\nhtml`<img src=\"/images/${this.imagePath ?? nothing}/${this.imageFile ?? nothing}\">`;\n```\n\n----------------------------------------\n\nTITLE: Implementing Vote Attribute Change Handler in TypeScript\nDESCRIPTION: TypeScript implementation of attribute change handling for the vote attribute in the custom element.\nSOURCE: https://github.com/lit/lit.dev/blob/main/packages/lit-dev-content/site/tutorials/content/wc-to-lit/07.md#2025-04-09_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nstatic get observedAttributes() {\n  return ['rating', 'vote'];\n}\n\nattributeChangedCallback(attributeName: string, _oldValue: string, newValue: string) {\n  if (attributeName === 'rating') {\n    const newRating = Number(newValue);\n\n    this.rating = newRating;\n  } else if (attributeName === 'vote') {\n    this.vote = newValue as 'up'|'down';\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Data Binding in Polymer vs Lit\nDESCRIPTION: Comparison of data binding patterns between Polymer and Lit. Shows how to bind data to templates and handle properties in both libraries.\nSOURCE: https://github.com/lit/lit.dev/blob/main/packages/lit-dev-content/site/articles/article/lit-for-polymer-users.md#2025-04-09_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\nimport { PolymerElement, html } from '@polymer/polymer/polymer-element.js';\n\nclass UserView extends PolymerElement {\n  static get properties() {\n    return {\n      name: String\n    };\n  }\n\n  static get template() {\n    return html`\n      <div>[[name]]</div>\n    `;\n  }\n}\n```\n\nLANGUAGE: typescript\nCODE:\n```\nimport {html, LitElement} from 'lit';\nimport {property} from 'lit/decorators.js';\n\nclass UserView extends LitElement {\n\n  @property()\n  name: string;\n\n  render() {\n    return html`\n      <div>${this.name}</div>\n    `;\n  }\n}\n```\n\nLANGUAGE: javascript\nCODE:\n```\nimport {html, LitElement} from 'lit';\n\nclass UserView extends LitElement {\n\n  static properties = {\n    name: {}\n  }\n\n  render() {\n    return html`\n      <div>${this.name}</div>\n    `;\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing a Custom Element with LitElement in TypeScript\nDESCRIPTION: Demonstrates creating a custom element by extending LitElement with TypeScript decorators, including CSS styling and template rendering with event handlers and various binding syntaxes.\nSOURCE: https://github.com/lit/lit.dev/blob/main/packages/lit-dev-content/site/docs/v3/internal/styles.md#2025-04-09_snippet_0\n\nLANGUAGE: ts\nCODE:\n```\nimport { LitElement, html, css, customElement } from 'lit-element';\n\n@customElement('my-element');\nclass MyElement extends LitElement {\n  static style = css`\n    my-element #id .class [attr~=\"foo\"] ::part(bar) {\n      border: 1px solid blue;\n    }\n  `;\n\n  render() {\n    return html`\n      Lorem ipsum ${value}!\n      <button attribute=\"value\"></button>\n      <button attribute=${value}></button>\n      <button .property=${value}></button>\n      <button ?boolean=${value}></button>\n      <button @event=${this.handler}></button>\n    `;\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Creating an SVG Group Motif with Lit\nDESCRIPTION: This function creates an SVG group motif with a specified number of prints and rotation offset. The group is given an id and a transform for positioning.\nSOURCE: https://github.com/lit/lit.dev/blob/main/packages/lit-dev-content/site/tutorials/content/svg-templates/03.md#2025-04-09_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nconst createMotif = (\n  numPrints: number,\n  offset: number = 0,\n): SVGTemplateResult => {\n  ...\n\n  return svg`\n    <g\n      id=\"motif\"\n      transform=\"translate(50, 50)\">\n        ${prints}\n    </g>\n  `;\n}\n```\n\nLANGUAGE: javascript\nCODE:\n```\nconst createMotif = (\n  numPrints,\n  offset = 0,\n) => {\n  ...\n\n  return svg`\n    <g\n      id=\"motif\"\n      transform=\"translate(50, 50)\">\n        ${prints}\n    </g>\n  `;\n}\n```\n\n----------------------------------------\n\nTITLE: Converting Polymer Name Formatting to Lit Template\nDESCRIPTION: Shows how to convert Polymer's computed binding syntax to Lit's direct JavaScript expressions in templates.\nSOURCE: https://github.com/lit/lit.dev/blob/main/packages/lit-dev-content/site/articles/article/lit-for-polymer-users.md#2025-04-09_snippet_16\n\nLANGUAGE: javascript\nCODE:\n```\nrender() {\n  html`\n      My name is <span>${this._formatName(given, family)}</span>\n    `;\n}\n```\n\n----------------------------------------\n\nTITLE: Consumer Decorator Import\nDESCRIPTION: Import statement for the consume decorator from @lit/context package.\nSOURCE: https://github.com/lit/lit.dev/blob/main/packages/lit-dev-content/site/docs/v3/data/context.md#2025-04-09_snippet_11\n\nLANGUAGE: typescript\nCODE:\n```\nimport {consume} from '@lit/context';\n```\n\n----------------------------------------\n\nTITLE: Template Binding Expression\nDESCRIPTION: Demonstrates how to use JavaScript expressions within lit-html templates.\nSOURCE: https://github.com/lit/lit.dev/blob/main/packages/lit-dev-content/site/docs/v1/lit-html/template-reference.md#2025-04-09_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nhtml`<h1>Hello ${name}</h1>`\n```\n\n----------------------------------------\n\nTITLE: Creating a Context Object with Symbol\nDESCRIPTION: Example of defining a context using Symbol for uniqueness. This approach ensures the context key is globally unique to avoid collisions.\nSOURCE: https://github.com/lit/lit.dev/blob/main/packages/lit-dev-content/site/docs/v2/data/context.md#2025-04-09_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nexport const myContext = createContext(Symbol('my-context'));\n```\n\n----------------------------------------\n\nTITLE: Basic Directive Usage in lit-html\nDESCRIPTION: Shows how to use a directive in a lit-html template for dynamic rendering.\nSOURCE: https://github.com/lit/lit.dev/blob/main/packages/lit-dev-content/site/docs/v1/lit-html/creating-directives.md#2025-04-09_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nhtml`<div>\n     ${fancyDirective('some text')}\n  </div>`\n```\n\n----------------------------------------\n\nTITLE: DOM Templates in Polymer vs Lit\nDESCRIPTION: Comparison of template definition between Polymer and Lit. Shows how to create HTML templates using the html tag function in both libraries.\nSOURCE: https://github.com/lit/lit.dev/blob/main/packages/lit-dev-content/site/articles/article/lit-for-polymer-users.md#2025-04-09_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nimport {PolymerElement, html} from '@polymer/polymer/polymer-element.js';\n\nexport class MyElement extends PolymerElement {\n  static get template() {\n    return html`<b>Hello</b>`;\n  }\n}\ncustomElements.define('my-element', MyElement);\n```\n\nLANGUAGE: typescript\nCODE:\n```\nimport {LitElement, html} from 'lit';\nimport {customElement} from 'lit/decorators.js';\n\n@customElement('my-element')\nexport class MyElement extends LitElement {\n  render() {\n    return html`<b>Hello</b>`;\n  }\n}\n```\n\nLANGUAGE: javascript\nCODE:\n```\nimport {LitElement, html} from 'lit';\n\nexport class MyElement extends LitElement {\n  render() {\n    return html`<b>Hello</b>`;\n  }\n}\ncustomElements.define('my-element', MyElement);\n```\n\n----------------------------------------\n\nTITLE: Defining Properties in a Custom Element with TypeScript Decorators\nDESCRIPTION: Shows how to use the @property decorator to define a property with the attribute option set to false, preventing attribute reflection.\nSOURCE: https://github.com/lit/lit.dev/blob/main/packages/lit-dev-content/site/docs/v3/internal/styles.md#2025-04-09_snippet_1\n\nLANGUAGE: ts\nCODE:\n```\n@customElement('my-element')\nclass MyElement {\n  @property({attribute: false})\n  foo;\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a Tile with SVG Use Elements in Lit\nDESCRIPTION: This function creates a tile using SVG <use> elements to reference a previously defined motif. It applies a clip path to the group and positions multiple instances of the motif.\nSOURCE: https://github.com/lit/lit.dev/blob/main/packages/lit-dev-content/site/tutorials/content/svg-templates/03.md#2025-04-09_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nconst createTile = () => svg`\n  <g clip-path=\"url(#rect-clip)\">\n    <use transform=\"translate(0, 0)\" href=\"#motif\"></use>\n    <use transform=\"translate(0, 100)\" href=\"#motif\"></use>\n    <use transform=\"translate(100, -50)\" href=\"#motif\"></use>\n    <use transform=\"translate(100, 50)\" href=\"#motif\"></use>\n    <use transform=\"translate(100, 150)\" href=\"#motif\"></use>\n  </g>\n`;\n```\n\n----------------------------------------\n\nTITLE: Running Lit Dev Server\nDESCRIPTION: Command to start the development server for testing Lit components\nSOURCE: https://github.com/lit/lit.dev/blob/main/packages/lit-dev-content/site/docs/v3/tools/starter-kits.md#2025-04-09_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nnpm run serve\n```\n\n----------------------------------------\n\nTITLE: Examples of ID Generation in JavaScript\nDESCRIPTION: Illustrates how different aspects of a message affect ID generation, including HTML markup and expression positions.\nSOURCE: https://github.com/lit/lit.dev/blob/main/packages/lit-dev-content/site/docs/v3/localization/overview.md#2025-04-09_snippet_12\n\nLANGUAGE: js\nCODE:\n```\nmsg(html`Hello <b>${name}</b>`);\nmsg(html`Hello <b>${this.name}</b>`);\n\nmsg(html`Hello <i>${name}</i>`);\n```\n\n----------------------------------------\n\nTITLE: Examples of ID Generation in JavaScript\nDESCRIPTION: Illustrates how different aspects of a message affect ID generation, including HTML markup and expression positions.\nSOURCE: https://github.com/lit/lit.dev/blob/main/packages/lit-dev-content/site/docs/v3/localization/overview.md#2025-04-09_snippet_12\n\nLANGUAGE: js\nCODE:\n```\nmsg(html`Hello <b>${name}</b>`);\nmsg(html`Hello <b>${this.name}</b>`);\n\nmsg(html`Hello <i>${name}</i>`);\n```\n\n----------------------------------------\n\nTITLE: Importing Choose Directive in Lit\nDESCRIPTION: Import statement for the choose directive which allows conditional template selection.\nSOURCE: https://github.com/lit/lit.dev/blob/main/packages/lit-dev-content/site/docs/v2/templates/directives.md#2025-04-09_snippet_9\n\nLANGUAGE: javascript\nCODE:\n```\nimport {choose} from 'lit/directives/choose.js';\n```\n\n----------------------------------------\n\nTITLE: TypeScript LitElement Component Definition\nDESCRIPTION: Basic structure of a LitElement component in TypeScript using decorators.\nSOURCE: https://github.com/lit/lit.dev/blob/main/packages/lit-dev-content/site/docs/v1/getting-started.md#2025-04-09_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\n@customElement('my-element')\nexport class MyElement extends LitElement { ... }\n```\n\n----------------------------------------\n\nTITLE: Creating SVG Text Element with ID\nDESCRIPTION: This function creates an SVG text element with specific attributes and an id. It's shown in both TypeScript and JavaScript versions.\nSOURCE: https://github.com/lit/lit.dev/blob/main/packages/lit-dev-content/site/tutorials/content/svg-templates/02.md#2025-04-09_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nconst createElement = (\n  chars: string,\n): SVGTemplateResult => svg`\n  <text\n    id=\"chars\"\n    dominant-basline=\"hanging\"\n    font-family=\"monospace\"\n    font-size=\"24px\">\n    ${chars}\n  </text>`;\n```\n\nLANGUAGE: javascript\nCODE:\n```\nconst createElement = (chars) => svg`\n  <text\n    id=\"chars\"\n    dominant-basline=\"hanging\"\n    font-family=\"monospace\"\n    font-size=\"24px\">\n    ${chars}\n  </text>`;\n```\n\n----------------------------------------\n\nTITLE: Polymer Two-Way Binding Example\nDESCRIPTION: Example of Polymer component using two-way data binding with a notifying property.\nSOURCE: https://github.com/lit/lit.dev/blob/main/packages/lit-dev-content/site/articles/article/lit-for-polymer-users.md#2025-04-09_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nstatic get properties() {\n  return {\n    name: {\n      type: String,\n      notify: true\n    }\n  };\n}\n\nstatic get template() {\n  return html`\n    Name: [[name]]<br>\n    Enter name: <input value={{name::input}}>\n  `;\n}\n```\n\n----------------------------------------\n\nTITLE: Placeholder Comment for Eleventy Build Process\nDESCRIPTION: This HTML comment explains that the file exists only to create a section heading and its output is deleted by the Eleventy build process.\nSOURCE: https://github.com/lit/lit.dev/blob/main/packages/lit-dev-content/site/docs/v2/templates/index.md#2025-04-09_snippet_1\n\nLANGUAGE: html\nCODE:\n```\n<!-- This file exists only to create a section heading.\n     Its output is deleted by the Eleventy build process. -->\n```\n\n----------------------------------------\n\nTITLE: Rendering a Tile in a Lit Component\nDESCRIPTION: This code snippet shows how to render the created tile within a Lit component's SVG element. It calls the createTile function inside the render method.\nSOURCE: https://github.com/lit/lit.dev/blob/main/packages/lit-dev-content/site/tutorials/content/svg-templates/03.md#2025-04-09_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\nexport class RepeatPattern extends LitElement {\n  ...\n  render() {\n    return html`\n      <svg height=\"100%\" width=\"100%\">\n        ...\n        ${createTile()}\n      </svg>\n    `;\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Applying Mixin to LitElement\nDESCRIPTION: Demonstrates how to apply a mixin directly when defining a new class.\nSOURCE: https://github.com/lit/lit.dev/blob/main/packages/lit-dev-content/site/docs/v2/composition/mixins.md#2025-04-09_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nclass MyElement extends MyMixin(LitElement) {\n  /* user code */\n}\n```\n\n----------------------------------------\n\nTITLE: Basic Template Literal Example in JavaScript\nDESCRIPTION: Demonstrates basic template literal syntax with variable interpolation.\nSOURCE: https://github.com/lit/lit.dev/blob/main/packages/lit-dev-content/site/docs/v1/lit-html/concepts.md#2025-04-09_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n`My name is ${name}.`\n```\n\n----------------------------------------\n\nTITLE: Configuring Rollup Babel Plugin for LitElement Transpilation\nDESCRIPTION: This JavaScript configuration snippet demonstrates how to set up the Rollup Babel plugin to include LitElement and lit-html packages for transpilation, instead of excluding all node_modules.\nSOURCE: https://github.com/lit/lit.dev/blob/main/packages/lit-dev-content/site/docs/v1/tools/build.md#2025-04-09_snippet_6\n\nLANGUAGE: js\nCODE:\n```\ninclude: [ 'src/**', 'node_modules/lit-element/**', 'node_modules/lit-html/**']\n```\n\n----------------------------------------\n\nTITLE: Controlling Lit Development Warnings\nDESCRIPTION: Examples of enabling and disabling development warnings in Lit elements using ReactiveElement and LitElement methods.\nSOURCE: https://github.com/lit/lit.dev/blob/main/packages/lit-dev-content/site/docs/v2/tools/development.md#2025-04-09_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport {LitElement, ReactiveElement} from 'lit';\n\n// Turn off migration warnings on all ReactiveElements,\n// including LitElements\nReactiveElement.disableWarning?.('migration');\n\n// Turn off update warnings on all LitElements\nLitElement.disableWarning?.('change-in-update');\n\n// Turn off update warnings on one element\nMyElement.disableWarning?.('change-in-update');\n```\n\n----------------------------------------\n\nTITLE: Configuring Eleventy Navigation for Articles Section\nDESCRIPTION: YAML front matter that configures an Eleventy website navigation. It sets 'articles-nav' as a tag and defines navigation properties including the key 'Articles' and order position 1.\nSOURCE: https://github.com/lit/lit.dev/blob/main/packages/lit-dev-content/site/articles/article.md#2025-04-09_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n---\ntags:\n  - articles-nav\neleventyNavigation:\n  key: Articles\n  order: 1\n---\n```\n\n----------------------------------------\n\nTITLE: Configuring Eleventy Navigation Section Header using YAML Frontmatter\nDESCRIPTION: YAML frontmatter configuration for defining a navigation section titled 'Managing Data' with ordering information. The file is used solely for structural purposes and its output is removed during build.\nSOURCE: https://github.com/lit/lit.dev/blob/main/packages/lit-dev-content/site/docs/v2/data/index.md#2025-04-09_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n---\ntitle: Managing Data\neleventyNavigation:\n  key: Managing Data\n  order: 5\n---\n```\n\n----------------------------------------\n\nTITLE: Adding CSS for Carousel Selected Item Positioning\nDESCRIPTION: This CSS snippet positions the selected item slot container properly by moving it up. This ensures the selected item doesn't display below the previous item when the animation structure is implemented.\nSOURCE: https://github.com/lit/lit.dev/blob/main/packages/lit-dev-content/site/tutorials/content/carousel/05.md#2025-04-09_snippet_1\n\nLANGUAGE: css\nCODE:\n```\n.selected {\n  top: -100%;\n}\n```\n\n----------------------------------------\n\nTITLE: Using unsafeCSS for Trusted Input\nDESCRIPTION: Demonstrates using unsafeCSS function to wrap trusted CSS expressions.\nSOURCE: https://github.com/lit/lit.dev/blob/main/packages/lit-dev-content/site/docs/v2/components/styles.md#2025-04-09_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nconst mainColor = 'red';\n...\nstatic styles = css`\n  div { color: ${unsafeCSS(mainColor)} }\n`;\n```\n\n----------------------------------------\n\nTITLE: Importing live Directive in Lit\nDESCRIPTION: Shows how to import the live directive from Lit's directives module.\nSOURCE: https://github.com/lit/lit.dev/blob/main/packages/lit-dev-content/site/docs/v2/templates/directives.md#2025-04-09_snippet_30\n\nLANGUAGE: javascript\nCODE:\n```\nimport {live} from 'lit/directives/live.js';\n```\n\n----------------------------------------\n\nTITLE: Importing timeago.js Format Function in TypeScript\nDESCRIPTION: This code imports the format function from the timeago.js library in a TypeScript file. It's used to format time strings in the directive module.\nSOURCE: https://github.com/lit/lit.dev/blob/main/packages/lit-dev-content/site/tutorials/content/async-directive/03.md#2025-04-09_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\n...\nimport {format} from 'timeago.js';\n```\n\n----------------------------------------\n\nTITLE: Configuring Warning Settings in Lit Element\nDESCRIPTION: Example of setting enabled warnings within a Lit element class definition.\nSOURCE: https://github.com/lit/lit.dev/blob/main/packages/lit-dev-content/site/docs/v2/tools/development.md#2025-04-09_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nclass MyElement extends LitElement {\n  static enabledWarnings = ['migration'];\n}\n```\n\n----------------------------------------\n\nTITLE: HTML Template with Code Checker Import\nDESCRIPTION: HTML file structure showing how to import the code checker script and main element, using playground-hide comments to control visibility\nSOURCE: https://github.com/lit/lit.dev/blob/main/packages/lit-dev-content/samples/tutorials/CONTRIBUTING.md#2025-04-09_snippet_5\n\nLANGUAGE: html\nCODE:\n```\n<head>\n  <!-- playground-hide --><script type=\"module\" src=\"./_check-code.js\"></script><!-- playground-hide-end -->\n  <script type=\"module\" src=\"./my-element.js\"></script>\n</head>\n<body>\n  <my-element name=\"User\"></my-element>\n</body>\n```\n\n----------------------------------------\n\nTITLE: HTML Comment Explaining File Purpose\nDESCRIPTION: HTML comment explaining that this file exists only to create a section heading in the navigation and that its output is deleted by the Eleventy build process.\nSOURCE: https://github.com/lit/lit.dev/blob/main/packages/lit-dev-content/site/docs/v2/frameworks/index.md#2025-04-09_snippet_1\n\nLANGUAGE: html\nCODE:\n```\n<!-- This file exists only to create a section heading.\n     Its output is deleted by the Eleventy build process. -->\n```\n\n----------------------------------------\n\nTITLE: Example of generated output in runtime mode\nDESCRIPTION: An example of the localization output generated for the Spanish locale in runtime mode, showing a translated template.\nSOURCE: https://github.com/lit/lit.dev/blob/main/packages/lit-dev-content/site/docs/v2/localization/overview.md#2025-04-09_snippet_9\n\nLANGUAGE: javascript\nCODE:\n```\n// locales/es-419.ts\nexport const templates = {\n  hf71d669027554f48: html`Hola <b>Mundo</b>`,\n};\n```\n\n----------------------------------------\n\nTITLE: Basic SVG CSS Styling in Lit\nDESCRIPTION: Demonstrates basic CSS styling for SVG elements by applying a black fill to elements with the 'background' class.\nSOURCE: https://github.com/lit/lit.dev/blob/main/packages/lit-dev-content/site/tutorials/content/svg-templates/05.md#2025-04-09_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nconst helloSvgCss = css`\n  .background {\n    fill: #000000;\n  }\n`;\n```\n\n----------------------------------------\n\nTITLE: Importing ContextRequestEvent from Lit Labs\nDESCRIPTION: Shows how to import the ContextRequestEvent class from the @lit-labs/context package, which is the event fired by consumers.\nSOURCE: https://github.com/lit/lit.dev/blob/main/packages/lit-dev-content/site/docs/v2/data/context.md#2025-04-09_snippet_29\n\nLANGUAGE: ts\nCODE:\n```\nimport {ContextRequestEvent} from '@lit-labs/context';\n```\n\n----------------------------------------\n\nTITLE: Lit-HTML Header Template Example\nDESCRIPTION: Example of creating a header component using lit-html template syntax.\nSOURCE: https://github.com/lit/lit.dev/blob/main/packages/lit-dev-content/site/docs/v1/lit-html/concepts.md#2025-04-09_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nlet header = (title) => html`<h1>${title}</h1>`;\n```\n\n----------------------------------------\n\nTITLE: Storing Time Argument in Lit Directive (TypeScript)\nDESCRIPTION: This snippet shows how to store the time argument in a class field within the update method of a Lit directive. This allows the time value to be accessed outside of the normal update cycle.\nSOURCE: https://github.com/lit/lit.dev/blob/main/packages/lit-dev-content/site/tutorials/content/async-directive/06.md#2025-04-09_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n  time!: Date;\n\n  update(part: Part, [time]: DirectiveParameters<this>) {\n    this.time = time;\n    ...\n  }\n```\n\n----------------------------------------\n\nTITLE: Implementing Show and Hide Methods for Tooltips in TypeScript\nDESCRIPTION: Defines show and hide methods using arrow functions to manage tooltip visibility. The show method clears any inline styles, while the hide method explicitly sets display to none to ensure the tooltip is hidden with highest CSS precedence.\nSOURCE: https://github.com/lit/lit.dev/blob/main/packages/lit-dev-content/site/tutorials/content/tooltip/02.md#2025-04-09_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nshow = () => {\n  this.style.cssText = '';\n};\n\nhide = () => {\n  this.style.display = 'none';\n};\n```\n\n----------------------------------------\n\nTITLE: HTML Comment Explaining File Purpose\nDESCRIPTION: HTML comment that documents the file's purpose as creating a section heading and notes that its output is deleted during the build process.\nSOURCE: https://github.com/lit/lit.dev/blob/main/packages/lit-dev-content/site/docs/v3/frameworks/index.md#2025-04-09_snippet_1\n\nLANGUAGE: html\nCODE:\n```\n<!-- This file exists only to create a section heading.\n     Its output is deleted by the Eleventy build process. -->\n```\n\n----------------------------------------\n\nTITLE: Lit localization configuration file for TypeScript\nDESCRIPTION: An example of a lit-localize.json configuration file for a TypeScript project, specifying locales, output settings, and interchange format.\nSOURCE: https://github.com/lit/lit.dev/blob/main/packages/lit-dev-content/site/docs/v2/localization/overview.md#2025-04-09_snippet_12\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"$schema\": \"https://raw.githubusercontent.com/lit/lit/main/packages/localize-tools/config.schema.json\",\n  \"sourceLocale\": \"en\",\n  \"targetLocales\": [\"es-419\", \"zh-Hans\"],\n  \"tsConfig\": \"./tsconfig.json\",\n  \"output\": {\n    \"mode\": \"runtime\",\n    \"outputDir\": \"./src/generated/locales\",\n    \"localeCodesModule\": \"./src/generated/locale-codes.ts\"\n  },\n  \"interchange\": {\n    \"format\": \"xliff\",\n    \"xliffDir\": \"./xliff/\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Adding Reactive Property to SVG Lit Component\nDESCRIPTION: Enhances the RepeatPattern component with a reactive 'chars' property to allow customization of the displayed text.\nSOURCE: https://github.com/lit/lit.dev/blob/main/packages/lit-dev-content/site/tutorials/content/svg-templates/01.md#2025-04-09_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\n@customElement('repeat-pattern')\nexport class RepeatPattern extends LitElement {    \n  @property({type: String}) chars = \"lit\";\n  \n  render() {\n    return html`\n      <svg height=\"100%\" width=\"100%\">\n        ${createElement(this.chars)}\n      </svg>\n    `;\n  }\n}\n```\n\nLANGUAGE: javascript\nCODE:\n```\nexport class RepeatPattern extends LitElement {\n  static properties = {\n    chars: {type: String},\n  };\n\n  constructor() {\n    super();\n    this.chars = 'lit';\n  }\n\n  render() {\n    return html`\n      <svg height=\"100%\" width=\"100%\">\n        ${createElement(this.chars)}\n      </svg>\n    `;\n  }\n}\ncustomElements.define('repeat-pattern', RepeatPattern);\n```\n\n----------------------------------------\n\nTITLE: HTML Comment Explaining File Purpose\nDESCRIPTION: HTML comment that explains the purpose of the file - it only exists to create a section heading in the navigation and its actual output content is removed during the Eleventy build process.\nSOURCE: https://github.com/lit/lit.dev/blob/main/packages/lit-dev-content/site/docs/v3/releases/index.md#2025-04-09_snippet_1\n\nLANGUAGE: html\nCODE:\n```\n<!-- This file exists only to create a section heading.\n     Its output is deleted by the Eleventy build process. -->\n```\n\n----------------------------------------\n\nTITLE: Requesting Update with Previous State\nDESCRIPTION: Example of calling requestUpdate() with property name and previous value parameters.\nSOURCE: https://github.com/lit/lit.dev/blob/main/packages/lit-dev-content/site/docs/v2/components/lifecycle.md#2025-04-09_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nthis.requestUpdate('state', this._previousState);\n```\n\n----------------------------------------\n\nTITLE: Importing timeago.js Format Function in JavaScript\nDESCRIPTION: This code imports the format function from the timeago.js library in a JavaScript file. It's used to format time strings in the directive module.\nSOURCE: https://github.com/lit/lit.dev/blob/main/packages/lit-dev-content/site/tutorials/content/async-directive/03.md#2025-04-09_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\n...\nimport {format} from 'timeago.js';\n```\n\n----------------------------------------\n\nTITLE: Generated Locale-Specific Output\nDESCRIPTION: Demonstrates the transformed output files for English and Spanish locales after processing.\nSOURCE: https://github.com/lit/lit.dev/blob/main/packages/lit-dev-content/site/docs/v2/localization/transform-mode.md#2025-04-09_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\n// locales/en/launch-button.js\nrender() {\n  return html`<button>Launch rocket</button>`\n}\n\n// locales/es-419/launch-button.js\nrender() {\n  return html`<button>Lanza cohete</button>`\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Server Rendering Section in Eleventy for Lit Documentation\nDESCRIPTION: This YAML frontmatter defines metadata for a server rendering documentation section in a Lit project. It sets the title, navigation key, order, and labs flag for use in Eleventy static site generation.\nSOURCE: https://github.com/lit/lit.dev/blob/main/packages/lit-dev-content/site/docs/v2/ssr/index.md#2025-04-09_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n---\ntitle: Server rendering\neleventyNavigation:\n  key: Server rendering\n  order: 7\n  labs: true\n---\n```\n\n----------------------------------------\n\nTITLE: HTML Comment for Build Process Note\nDESCRIPTION: HTML comment explaining that this file exists only to create a section heading and its output is deleted during the Eleventy build process.\nSOURCE: https://github.com/lit/lit.dev/blob/main/packages/lit-dev-content/site/docs/v3/localization/index.md#2025-04-09_snippet_1\n\nLANGUAGE: html\nCODE:\n```\n<!-- This file exists only to create a section heading.\n     Its output is deleted by the Eleventy build process. -->\n```\n\n----------------------------------------\n\nTITLE: Generated XLIFF File Example\nDESCRIPTION: Illustrates the structure of a generated XLIFF file (es-419.xlf) containing the extracted messages. Each message is wrapped in a trans-unit element with a unique ID.\nSOURCE: https://github.com/lit/lit.dev/blob/main/packages/lit-dev-content/site/docs/v2/localization/overview.md#2025-04-09_snippet_16\n\nLANGUAGE: xml\nCODE:\n```\n<!-- xliff/es-419.xlf -->\n\n<trans-unit id=\"s3d58dee72d4e0c27\">\n  <source>Hello World</source>\n</trans-unit>\n\n<trans-unit id=\"saed7d3734ce7f09d\">\n  <source>Hello <x equiv-text=\"${name}\"/></source>\n</trans-unit>\n\n<trans-unit id=\"hf71d669027554f48\">\n  <source>Hello <x equiv-text=\"&lt;b&gt;\"/>World<x equiv-text=\"&lt;/b&gt;\"/></source>\n</trans-unit>\n```\n\n----------------------------------------\n\nTITLE: Updating Render Method with timeago.js Format Function\nDESCRIPTION: This snippet shows how to use the format function from timeago.js in the render method of a directive. It formats the time variable into a human-readable string.\nSOURCE: https://github.com/lit/lit.dev/blob/main/packages/lit-dev-content/site/tutorials/content/async-directive/03.md#2025-04-09_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\n    return format(time);\n```\n\n----------------------------------------\n\nTITLE: Defining YAML Frontmatter for Composition Section in Lit Documentation\nDESCRIPTION: This YAML frontmatter defines metadata for the Composition section in Lit documentation. It specifies the title, navigation key, and order for the section in the Eleventy static site generator.\nSOURCE: https://github.com/lit/lit.dev/blob/main/packages/lit-dev-content/site/docs/v3/composition/index.md#2025-04-09_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n---\ntitle: Composition\neleventyNavigation:\n  title: Composition\n  key: Composition\n  order: 4\n---\n```\n\n----------------------------------------\n\nTITLE: classMap Directive TypeScript Signature\nDESCRIPTION: Type signature showing the expected parameter type for classMap directive.\nSOURCE: https://github.com/lit/lit.dev/blob/main/packages/lit-dev-content/site/docs/v2/templates/directives.md#2025-04-09_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nclassMap(classInfo: {[name: string]: string | boolean | number})\n```\n\n----------------------------------------\n\nTITLE: Conditional Attribute Rendering with Logical OR in Lit Templates\nDESCRIPTION: Demonstrates how to conditionally render an attribute using the logical OR operator. This technique removes the attribute if the value is falsy, including empty strings.\nSOURCE: https://github.com/lit/lit.dev/blob/main/packages/lit-dev-content/site/docs/v3/templates/expressions.md#2025-04-09_snippet_14\n\nLANGUAGE: js\nCODE:\n```\nhtml`<button aria-label=\"${this.ariaLabel || nothing}\"></button>`\n```\n\n----------------------------------------\n\nTITLE: Binding 'this' in Imperative Event Listeners in Lit\nDESCRIPTION: Shows how to bind 'this' when adding event listeners imperatively in Lit components.\nSOURCE: https://github.com/lit/lit.dev/blob/main/packages/lit-dev-content/site/docs/v1/components/events.md#2025-04-09_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nthis.boundResizeHandler = this.handleResize.bind(this);\nwindow.addEventListener('resize', this.boundResizeHandler);\n```\n\n----------------------------------------\n\nTITLE: Defining YAML Frontmatter for Lit Composition Documentation\nDESCRIPTION: YAML frontmatter block defining metadata for the Composition section in Lit documentation. It specifies the title and navigation properties for Eleventy static site generator.\nSOURCE: https://github.com/lit/lit.dev/blob/main/packages/lit-dev-content/site/docs/v2/composition/index.md#2025-04-09_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n---\ntitle: Composition\neleventyNavigation:\n  title: Composition\n  key: Composition\n  order: 4\n---\n```\n\n----------------------------------------\n\nTITLE: Converting Two-Way Binding to Events\nDESCRIPTION: Example showing how to replace Polymer's two-way binding with explicit event handling.\nSOURCE: https://github.com/lit/lit.dev/blob/main/packages/lit-dev-content/site/articles/article/lit-for-polymer-users.md#2025-04-09_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nstatic properties = {\n  name: {\n    type: String,\n  }\n}\n\nstatic get template() {\n  return html`\n    Name: [[name]]<br>\n    Enter name: <input on-input=\"inputChanged\" value=[[name]]>\n  `;\n}\n\ninputChanged(e) {\n  this.name = e.target.value;\n  const propChangeEvent = new CustomEvent('name-changed', {\n    detail: { value: this.name }\n  });\n  this.dispatchEvent(propChangeEvent);\n}\n```\n\n----------------------------------------\n\nTITLE: XLIFF Representation of Message Description\nDESCRIPTION: Shows how message descriptions are represented in XLIFF files using the note element. This helps translators understand the context of the message.\nSOURCE: https://github.com/lit/lit.dev/blob/main/packages/lit-dev-content/site/docs/v2/localization/overview.md#2025-04-09_snippet_20\n\nLANGUAGE: xml\nCODE:\n```\n<trans-unit id=\"s512957aa09384646\">\n  <source>Launch</source>\n  <note from=\"lit-localize\">Button that begins rocket launch sequence.</note>\n</trans-unit>\n```\n\n----------------------------------------\n\nTITLE: Conditional Rendering with If Statements in lit-html\nDESCRIPTION: Shows how to use standard JavaScript if statements outside the template to compute values for conditional rendering. This approach extracts conditional logic into a separate function.\nSOURCE: https://github.com/lit/lit.dev/blob/main/packages/lit-dev-content/site/docs/v1/lit-html/writing-templates.md#2025-04-09_snippet_8\n\nLANGUAGE: javascript\nCODE:\n```\ngetUserMessage() {\n  if (user.isloggedIn) {\n    return html`Welcome ${user.name}`;\n  } else {\n    return html`Please log in`;\n  }\n}\n\nhtml`\n  ${getUserMessage()}\n`\n```\n\n----------------------------------------\n\nTITLE: Configuring API Section Navigation with Eleventy Frontmatter\nDESCRIPTION: YAML frontmatter configuration that defines the API section in the documentation navigation. Sets up the section title, navigation key, and ordering position.\nSOURCE: https://github.com/lit/lit.dev/blob/main/packages/lit-dev-content/site/docs/v3/api/index.md#2025-04-09_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\ntitle: API\neleventyNavigation:\n  title: API\n  key: API\n  order: 10\n```\n\n----------------------------------------\n\nTITLE: Importing ContextRoot from Lit Labs\nDESCRIPTION: Shows how to import the ContextRoot class from the @lit-labs/context package, which can gather unsatisfied context requests.\nSOURCE: https://github.com/lit/lit.dev/blob/main/packages/lit-dev-content/site/docs/v2/data/context.md#2025-04-09_snippet_27\n\nLANGUAGE: ts\nCODE:\n```\nimport {ContextRoot} from '@lit-labs/context';\n```\n\n----------------------------------------\n\nTITLE: Implementing SignalWatcher Mixin for Reactive Components\nDESCRIPTION: Demonstrates how to use the SignalWatcher mixin to make Lit components react to signal changes. When signal values change, the mixin will trigger the Lit element update lifecycle automatically.\nSOURCE: https://github.com/lit/lit.dev/blob/main/packages/lit-dev-content/site/articles/article/lit-cheat-sheet.md#2025-04-09_snippet_43\n\nLANGUAGE: typescript\nCODE:\n```\n// See playground: articles/lit-cheat-sheet/signal-watcher\n```\n\n----------------------------------------\n\nTITLE: Implementing disconnected Callback in Lit AsyncDirective\nDESCRIPTION: The disconnected lifecycle callback that gets called when the directive is removed from the DOM. It calls the ensureTimerStopped method to clean up resources and prevent memory leaks.\nSOURCE: https://github.com/lit/lit.dev/blob/main/packages/lit-dev-content/site/tutorials/content/async-directive/07.md#2025-04-09_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\n  disconnected() {\n    this.ensureTimerStopped();\n  }\n```\n\n----------------------------------------\n\nTITLE: HTML Comment Explaining Build Process\nDESCRIPTION: This HTML comment explains that this file exists only to create a section heading in the navigation structure. It notes that the actual output of this file is deleted during the Eleventy build process.\nSOURCE: https://github.com/lit/lit.dev/blob/main/packages/lit-dev-content/site/docs/v1/tools/index.md#2025-04-09_snippet_1\n\nLANGUAGE: html\nCODE:\n```\n<!-- This file exists only to create a section heading.\n     Its output is deleted by the Eleventy build process. -->\n```\n\n----------------------------------------\n\nTITLE: Converting Conditional Templates from Polymer to Lit\nDESCRIPTION: Demonstrates how to replace Polymer's dom-if helper with Lit's JavaScript conditional expressions.\nSOURCE: https://github.com/lit/lit.dev/blob/main/packages/lit-dev-content/site/articles/article/lit-for-polymer-users.md#2025-04-09_snippet_9\n\nLANGUAGE: html\nCODE:\n```\n<template is=\"dom-if\" if=\"{{condition}}\">\n  <div>condition is true</div>\n</template>\n```\n\nLANGUAGE: js\nCODE:\n```\nhtml`${this.condition\n    ?  html`<div>condition is true</div>`\n    : ''\n}`;\n```\n\n----------------------------------------\n\nTITLE: Message Type Examples\nDESCRIPTION: Different ways to use the msg function with various types of strings and templates.\nSOURCE: https://github.com/lit/lit.dev/blob/main/packages/lit-dev-content/site/docs/v3/localization/overview.md#2025-04-09_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nmsg('Hello World');\nmsg(str`Hello ${name}`);\nmsg(html`Hello <b>World</b>`);\nmsg(html`Hello <b>${name}</b>`);\nhtml`<button>${msg('Hello World')}</button>`;\n```\n\n----------------------------------------\n\nTITLE: Configuring Web Components Page in Eleventy\nDESCRIPTION: This YAML frontmatter configures the Web Components page in the Lit documentation. It sets the title, defines a child tag for related pages, and specifies the navigation structure within the Eleventy static site generator.\nSOURCE: https://github.com/lit/lit.dev/blob/main/packages/lit-dev-content/site/articles/tags/webcomponents.md#2025-04-09_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n---\ntitle: Web Components\nchildrenTag: web-components\neleventyNavigation:\n  parent: Tags\n  key: Web Components\n  order: 2\n---\n```\n\n----------------------------------------\n\nTITLE: Using Signals HTML Template Tag\nDESCRIPTION: Demonstrates the use of the signals html template tag which automatically wraps signals with watch() directives. This provides a convenient way to create templates that react to signal changes without manually adding watch() everywhere.\nSOURCE: https://github.com/lit/lit.dev/blob/main/packages/lit-dev-content/site/articles/article/lit-cheat-sheet.md#2025-04-09_snippet_45\n\nLANGUAGE: typescript\nCODE:\n```\n// See playground: articles/lit-cheat-sheet/signals-html-tag\n```\n\n----------------------------------------\n\nTITLE: Implementing To-Do List Handler in JavaScript\nDESCRIPTION: Shows how to implement input handling and list item addition using plain JavaScript, including a getter for input element selection.\nSOURCE: https://github.com/lit/lit.dev/blob/main/packages/lit-dev-content/site/tutorials/content/intro-to-lit/05.md#2025-04-09_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nget input() {\n  return this.renderRoot?.querySelector('#newitem') ?? null;\n}\n\naddToDo() {\n  this._listItems = [...this._listItems,\n      {text: this.input.value, completed: false}];\n  this.input.value = '';\n}\n```\n\n----------------------------------------\n\nTITLE: Loading and Rendering Templates in VM Context with TypeScript\nDESCRIPTION: Shows how to use ModuleLoader to import a render function in a separate VM context and use it within a Koa middleware. The example demonstrates type-safe module loading with TypeScript, setting content type, and streaming the render result.\nSOURCE: https://github.com/lit/lit.dev/blob/main/packages/lit-dev-content/site/docs/v3/ssr/server-usage.md#2025-04-09_snippet_9\n\nLANGUAGE: typescript\nCODE:\n```\n// server.js\nimport {ModuleLoader} from '@lit-labs/ssr/lib/module-loader.js';\nimport {RenderResultReadable} from '@lit-labs/ssr/lib/render-result-readable.js';\n\n// ...\n\n// within a Koa middleware, for example\napp.use(async (ctx) => {\n  const moduleLoader = new ModuleLoader();\n  const importResult = await moduleLoader.importModule(\n    './render-template.js',  // Module to load in VM context\n    import.meta.url          // Referrer URL for module\n  );\n  const {renderTemplate} = importResult.module.namespace\n    as typeof import('./render-template.js')\n  const ssrResult = await renderTemplate({some: \"data\"});\n  ctx.type = 'text/html';\n  ctx.body = new RenderResultReadable(ssrResult);\n});\n```\n\n----------------------------------------\n\nTITLE: Debugging Template Object Structure in Lit.dev\nDESCRIPTION: Template syntax for debugging node object structure in Lit.dev API templates. Used to inspect data structure during template development.\nSOURCE: https://github.com/lit/lit.dev/blob/main/packages/lit-dev-api/README.md#2025-04-09_snippet_0\n\nLANGUAGE: nunjucks\nCODE:\n```\n{{ node | dump }}\n```\n\n----------------------------------------\n\nTITLE: Handling Events in Repeated Templates with Lit\nDESCRIPTION: Demonstrates techniques for handling events in repeated templates using Lit, including data attachment and direct event handling.\nSOURCE: https://github.com/lit/lit.dev/blob/main/packages/lit-dev-content/site/articles/article/lit-for-polymer-users.md#2025-04-09_snippet_12\n\nLANGUAGE: js\nCODE:\n```\nrender() {\n  return html`\n    <div @click=${this.handleClick}>\n      ${map(this.items, (item) => {\n        return html`<button data-id=${item.id}>${item.text}</button>`\n      }\n    </div>\n  `;\n}\n```\n\nLANGUAGE: js\nCODE:\n```\nrender() {\n  return html`\n    <div>\n      ${this.items.map((item) => {\n          return html`<button\n            @click=${() => this._handleClick(item)}>\n            ${item.text}\n          </button>`;\n        }\n       }\n    </div>\n  `;\n}\n```\n\n----------------------------------------\n\nTITLE: Including Necessary HTML in Localized Templates\nDESCRIPTION: This snippet demonstrates a case where HTML should be included in the localized template, specifically when an HTML tag is needed in the middle of a phrase.\nSOURCE: https://github.com/lit/lit.dev/blob/main/packages/lit-dev-content/site/docs/v3/localization/best-practices.md#2025-04-09_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\nrender() {\n  return msg(html`Lift off in <b>T-${this.countdown}</b> seconds`);\n}\n```\n\n----------------------------------------\n\nTITLE: Using templateContent Directive to Render HTML Templates in lit-html\nDESCRIPTION: Demonstrates how to use the templateContent directive to incorporate content from HTML template elements into lit-html templates, which is useful when templates are provided by users or build systems.\nSOURCE: https://github.com/lit/lit.dev/blob/main/packages/lit-dev-content/site/docs/v2/releases/release-notes/1.2.0.md#2025-04-09_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nconst template = document.querySelector('#example');\nhtml`\n  <h1>Example</h1>\n  ${templateContent(template)}\n`;\n```\n\n----------------------------------------\n\nTITLE: Configuring Server Rendering Section in Eleventy for Lit Documentation\nDESCRIPTION: This YAML snippet defines the metadata for the server rendering section in a Lit project's documentation. It specifies the title, navigation key, order, and labs flag for use with Eleventy's static site generator.\nSOURCE: https://github.com/lit/lit.dev/blob/main/packages/lit-dev-content/site/docs/v3/ssr/index.md#2025-04-09_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n---\ntitle: Server rendering\neleventyNavigation:\n  key: Server rendering\n  order: 7\n  labs: true\n---\n```\n\n----------------------------------------\n\nTITLE: Configuring Babel to Include Lit Packages for Compilation\nDESCRIPTION: Modified Rollup Babel plugin configuration that explicitly includes Lit packages and dependencies for compilation while excluding other node_modules.\nSOURCE: https://github.com/lit/lit.dev/blob/main/packages/lit-dev-content/site/docs/v2/tools/requirements.md#2025-04-09_snippet_2\n\nLANGUAGE: js\nCODE:\n```\ninclude: [\n  'src/**',\n  'node_modules/lit/**',\n  'node_modules/lit-element/**',\n  'node_modules/lit-html/**'\n]\n```\n\n----------------------------------------\n\nTITLE: Incorrect Slot Usage with ID (JavaScript)\nDESCRIPTION: Demonstrates an incorrect way of using slots by using an id attribute instead of a name attribute. This will not work as expected for slot selection.\nSOURCE: https://github.com/lit/lit.dev/blob/main/packages/lit-dev-content/site/docs/v1/components/templates.md#2025-04-09_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\nrender(){\n  return html`\n    <div>\n      <slot id=\"one\"></slot>\n    </div>\n  `;\n}\n```\n\n----------------------------------------\n\nTITLE: Installing Babel packages for Webpack 4 compatibility\nDESCRIPTION: Command to install required Babel packages to transpile Lit 3 code for compatibility with Webpack 4.\nSOURCE: https://github.com/lit/lit.dev/blob/main/packages/lit-dev-content/site/docs/v3/releases/upgrade.md#2025-04-09_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nnpm i -D babel-loader@8 \\\n    @babel/plugin-transform-optional-chaining \\\n    @babel/plugin-transform-nullish-coalescing-operator \\\n    @babel/plugin-transform-logical-assignment-operators\n```\n\n----------------------------------------\n\nTITLE: Project Path Declaration in Markdown\nDESCRIPTION: Defines the project path and name using markdown header syntax, indicating this is the client-side component that is served by the lit-dev-server package.\nSOURCE: https://github.com/lit/lit.dev/blob/main/packages/lit-dev-content/README.md#2025-04-09_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n# `lit-dev-content`\n```\n\n----------------------------------------\n\nTITLE: Implementing willUpdate in Lit Components\nDESCRIPTION: Demonstrates how to use Lit's willUpdate lifecycle method to compute properties based on changes to other properties.\nSOURCE: https://github.com/lit/lit.dev/blob/main/packages/lit-dev-content/site/articles/article/lit-for-polymer-users.md#2025-04-09_snippet_17\n\nLANGUAGE: typescript\nCODE:\n```\nwillUpdate(changedProperties: PropertyValues<this>) {\n    if (changedProperties.has('userId') || changedProperties.has('avatarId')) {\n      this.imageUrl = this._getImageUrl(this.userId, this.avatarId);\n    }\n  }\n```\n\nLANGUAGE: javascript\nCODE:\n```\nwillUpdate(changedProperties) {\n    if (changedProperties.has('userId') || changedProperties.has('avatarId')) {\n      this.imageUrl = this._getImageUrl(this.userId, this.avatarId);\n    }\n  }\n```\n\n----------------------------------------\n\nTITLE: Transform Mode Configuration Setup\nDESCRIPTION: Example of configuring transform localization with source locale specification.\nSOURCE: https://github.com/lit/lit.dev/blob/main/packages/lit-dev-content/site/docs/v2/localization/transform-mode.md#2025-04-09_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nimport {configureTransformLocalization} from '@lit/localize';\n\nexport const {getLocale} = configureTransformLocalization({\n  sourceLocale: 'en',\n});\n```\n\n----------------------------------------\n\nTITLE: Configuring Eleventy Navigation YAML Frontmatter\nDESCRIPTION: YAML frontmatter configuration for an Eleventy navigation section. Sets up the 'Resources' page with navigation ordering.\nSOURCE: https://github.com/lit/lit.dev/blob/main/packages/lit-dev-content/site/docs/v1/resources/index.md#2025-04-09_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n---\ntitle: Resources\neleventyNavigation:\n  key: Resources\n  order: 5\n---\n```\n\n----------------------------------------\n\nTITLE: Importing until Directive in Lit\nDESCRIPTION: Demonstrates how to import the until directive for rendering placeholder content.\nSOURCE: https://github.com/lit/lit.dev/blob/main/packages/lit-dev-content/site/docs/v3/templates/directives.md#2025-04-09_snippet_46\n\nLANGUAGE: javascript\nCODE:\n```\nimport {until} from 'lit/directives/until.js';\n```\n\n----------------------------------------\n\nTITLE: Converting Repeating Templates from Polymer to Lit\nDESCRIPTION: Illustrates how to replace Polymer's dom-repeat helper with Lit's map directive for rendering lists.\nSOURCE: https://github.com/lit/lit.dev/blob/main/packages/lit-dev-content/site/articles/article/lit-for-polymer-users.md#2025-04-09_snippet_11\n\nLANGUAGE: html\nCODE:\n```\n<template is=\"dom-repeat\" items=\"{{items}}\">\n  <li>{{item.name}}</li>\n</template>\n```\n\nLANGUAGE: js\nCODE:\n```\nimport {map} from 'lit/directives/map.js';\n...\n  render() {\n    return html`\n      <ul>\n        ${map(this.items, (item) =>\n          html`<li>${item.name}</li>`)\n        }\n      </ul>\n    `;\n  }\n```\n\n----------------------------------------\n\nTITLE: Configuring Eleventy Navigation for Frameworks Section\nDESCRIPTION: YAML frontmatter configuration that sets up the navigation properties for the Frameworks section, including its key and order in the navigation structure.\nSOURCE: https://github.com/lit/lit.dev/blob/main/packages/lit-dev-content/site/docs/v3/frameworks/index.md#2025-04-09_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n---\ntitle: Frameworks\neleventyNavigation:\n  key: Frameworks\n  order: 8\n---\n```\n\n----------------------------------------\n\nTITLE: Extracting Screenshot Goldens for Lit.dev Tests\nDESCRIPTION: Command to extract new screenshot goldens from a downloaded zip file into the correct directory for updating integration tests.\nSOURCE: https://github.com/lit/lit.dev/blob/main/README.md#2025-04-09_snippet_8\n\nLANGUAGE: sh\nCODE:\n```\nunzip screenshot-goldens.zip -d packages/lit-dev-tests/src/playwright\n```\n\n----------------------------------------\n\nTITLE: Rendering Conditional Content with when() Directive in Lit\nDESCRIPTION: Demonstrates the usage of the new when() directive in Lit for conditional rendering. It renders different content based on the presence of a user object.\nSOURCE: https://github.com/lit/lit.dev/blob/main/packages/lit-dev-content/site/blog/2022-01-05-lit-2.1-release.md#2025-04-09_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\nrender() {\n  return html`\n    ${when(this.user, () => html`User: ${this.user.username}`, () => html`Sign In...`)}\n  `;\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Rollup for Localization (TypeScript)\nDESCRIPTION: This Rollup configuration demonstrates how to integrate Lit Localize transform mode with Rollup for TypeScript projects, generating separate bundles for each locale.\nSOURCE: https://github.com/lit/lit.dev/blob/main/packages/lit-dev-content/site/docs/v3/localization/transform-mode.md#2025-04-09_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nimport typescript from '@rollup/plugin-typescript';\nimport {localeTransformers} from '@lit/localize-tools/lib/rollup.js';\nimport resolve from '@rollup/plugin-node-resolve';\nimport {terser} from 'rollup-plugin-terser';\n\n// Config is read from ./lit-localize.json by default.\n// Pass a path to read config from another location.\nconst locales = localeTransformers();\n\nexport default locales.map(({locale, localeTransformer}) => ({\n  input: `src/index.ts`,\n  plugins: [\n    typescript({\n      transformers: {\n        before: [localeTransformer],\n      },\n    }),\n    resolve(),\n    terser(),\n  ],\n  output: {\n    file: `bundled/${locale}/index.js`,\n    format: 'es',\n  },\n}));\n```\n\n----------------------------------------\n\nTITLE: Playground IDE Template Syntax\nDESCRIPTION: Template syntax for embedding a full playground IDE with preview.\nSOURCE: https://github.com/lit/lit.dev/blob/main/packages/lit-dev-content/site/docs/v2/internal/demos.md#2025-04-09_snippet_2\n\nLANGUAGE: plaintext\nCODE:\n```\n{% playground-ide \"v2-docs/templates/define\" %}\n```\n\n----------------------------------------\n\nTITLE: Importing LitElement Component\nDESCRIPTION: Shows how to import a custom LitElement component into the main application file.\nSOURCE: https://github.com/lit/lit.dev/blob/main/packages/lit-dev-content/site/docs/v1/getting-started.md#2025-04-09_snippet_9\n\nLANGUAGE: javascript\nCODE:\n```\nimport './components/my-elements.js';\n```\n\n----------------------------------------\n\nTITLE: Customizing Render Root in LitElement (JavaScript)\nDESCRIPTION: Demonstrates how to customize the render root of a LitElement component by implementing the createRenderRoot method. This example renders the template into the main DOM tree instead of a shadow root.\nSOURCE: https://github.com/lit/lit.dev/blob/main/packages/lit-dev-content/site/docs/v1/components/templates.md#2025-04-09_snippet_11\n\nLANGUAGE: javascript\nCODE:\n```\nclass LightDom extends LitElement {\n  render() {\n    return html`\n      <p>This template renders without shadow DOM.</p>\n    `;\n  }\n  createRenderRoot() {\n  /**\n   * Render template without shadow DOM. Note that shadow DOM features like\n   * encapsulated CSS and slots are unavailable.\n   */\n    return this;\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Eleventy Navigation for Releases Section\nDESCRIPTION: YAML frontmatter that configures the 'Releases' section in the Eleventy navigation system. It sets the navigation key to 'Releases' and assigns it an order value of 11 to determine its position in the navigation structure.\nSOURCE: https://github.com/lit/lit.dev/blob/main/packages/lit-dev-content/site/docs/v3/releases/index.md#2025-04-09_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n---\ntitle: Releases\neleventyNavigation:\n  key: Releases\n  order: 11\n---\n```\n\n----------------------------------------\n\nTITLE: Watching Production Mode for Lit.dev\nDESCRIPTION: Commands to start the production server and watch for changes in TypeScript, Rollup, and Eleventy builds.\nSOURCE: https://github.com/lit/lit.dev/blob/main/README.md#2025-04-09_snippet_6\n\nLANGUAGE: sh\nCODE:\n```\nnpm start # production server\n\ncd packages/lit-dev-content\nnpm run build:ts:watch     # TypeScript\nnpm run build:rollup:watch # Rollup\nnpm run build:eleventy:watch   # Eleventy\n```\n\n----------------------------------------\n\nTITLE: Repeating Elements with range() and map() Directives in Lit\nDESCRIPTION: Demonstrates how to use the new range() directive in combination with map() to render a specific number of repeated elements in a Lit template.\nSOURCE: https://github.com/lit/lit.dev/blob/main/packages/lit-dev-content/site/blog/2022-01-05-lit-2.1-release.md#2025-04-09_snippet_3\n\nLANGUAGE: TypeScript\nCODE:\n```\nrender() {\n  return html`\n    ${map(range(8), () => html`<div class=\"cell\"></div>`)}\n  `;\n}\n```\n\n----------------------------------------\n\nTITLE: Pre-loading Locale Modules\nDESCRIPTION: Demonstrates a pattern for pre-loading all locale modules when the page loads but still accessing them asynchronously when needed.\nSOURCE: https://github.com/lit/lit.dev/blob/main/packages/lit-dev-content/site/docs/v2/localization/runtime-mode.md#2025-04-09_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\nimport {configureLocalization} from '@lit/localize';\nimport {sourceLocale, targetLocales} from './generated/locales.js';\n\nconst localizedTemplates = new Map(\n  targetLocales.map((locale) => [locale, import(`/locales/${locale}.js`)])\n);\n\nconst {getLocale, setLocale} = configureLocalization({\n  sourceLocale,\n  targetLocales,\n  loadLocale: async (locale) => localizedTemplates.get(locale),\n});\n```\n\n----------------------------------------\n\nTITLE: Handling User Input with Event Binding in lit-html\nDESCRIPTION: Shows the recommended approach for handling user input in lit-html by updating the application state on input events and re-rendering, ensuring state and DOM remain synchronized.\nSOURCE: https://github.com/lit/lit.dev/blob/main/packages/lit-dev-content/site/docs/v2/releases/release-notes/1.2.0.md#2025-04-09_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nlet text = '';\nconst onInput = (e) => {\n  text = e.target.value;\n  go();\n};\n\nconst go = () => {\n  render(html`<input .value=${text} @input=${onInput}>`, document.body);\n}\ngo();\n```\n\n----------------------------------------\n\nTITLE: HTML Web Component Usage\nDESCRIPTION: An example showing how to use a Lit component in HTML. Demonstrates that Lit components are web components that can be added to a page using simple HTML tags.\nSOURCE: https://github.com/lit/lit.dev/blob/main/packages/lit-dev-content/site/tutorials/content/intro-to-lit/00.md#2025-04-09_snippet_2\n\nLANGUAGE: html\nCODE:\n```\n<my-element></my-element>\n```\n\n----------------------------------------\n\nTITLE: Implementing a custom property setter in LitElement\nDESCRIPTION: Demonstrates how to implement a custom property setter in a LitElement component that supports property options and triggers an update using requestUpdate.\nSOURCE: https://github.com/lit/lit.dev/blob/main/packages/lit-dev-content/site/docs/v1/components/lifecycle.md#2025-04-09_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nimport { LitElement, html } from 'lit-element';\n\nclass MyElement extends LitElement {\n  static get properties() {\n    return {\n      prop1: {\n        type: String,\n        reflect: true\n      }\n    };\n  }\n  set prop1(value) {\n    const oldValue = this._prop1;\n    this._prop1 = value;\n    this.requestUpdate('prop1', oldValue);\n  }\n  get prop1() { return this._prop1; }\n  render() {\n    return html`\n      <p>prop1: ${this.prop1}</p>\n      <button @click=\"${() => this.prop1 = Math.random().toString()}\">\n        Change prop1\n      </button>\n    `;\n  }\n}\ncustomElements.define('my-element', MyElement);\n```\n\n----------------------------------------\n\nTITLE: Installing Lit Context Package\nDESCRIPTION: Command to install the @lit-labs/context package which provides context functionality for Lit components.\nSOURCE: https://github.com/lit/lit.dev/blob/main/packages/lit-dev-content/site/docs/v2/data/context.md#2025-04-09_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm i @lit-labs/context\n```\n\n----------------------------------------\n\nTITLE: Building and Serving Lit.dev in Production Mode\nDESCRIPTION: Commands to build and serve the lit.dev site in production mode, accessible at http://localhost:6415.\nSOURCE: https://github.com/lit/lit.dev/blob/main/README.md#2025-04-09_snippet_5\n\nLANGUAGE: sh\nCODE:\n```\nnpm run build\nnpm start\n```\n\n----------------------------------------\n\nTITLE: Defining Lit Component\nDESCRIPTION: JavaScript code defining a Lit component with styles and properties that renders a greeting message\nSOURCE: https://github.com/lit/lit.dev/blob/main/packages/lit-dev-content/site/blog/2022-02-07-eleventy.md#2025-04-09_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport {LitElement, html, css} from 'lit';\n\nclass DemoGreeter extends LitElement {\n  static styles = css`\n    b { color: red; }\n  `;\n\n  static properties = {\n    name: {},\n  };\n\n  render() {\n    return html`Hello <b>${this.name}</b>!`;\n  }\n}\ncustomElements.define('demo-greeter', DemoGreeter);\n```\n\n----------------------------------------\n\nTITLE: Generating Locale Codes Module in JavaScript\nDESCRIPTION: Example of a generated module containing locale code information based on the configuration file.\nSOURCE: https://github.com/lit/lit.dev/blob/main/packages/lit-dev-content/site/docs/v3/localization/runtime-mode.md#2025-04-09_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nexport const sourceLocale = 'en';\nexport const targetLocales = ['es-419', 'zh-Hans'];\nexport const allLocales = ['en', 'es-419', 'zh-Hans'];\n```\n\n----------------------------------------\n\nTITLE: Static Expressions with Tag Names in Lit 2\nDESCRIPTION: Shows how to use static expressions to interpolate constant values into a template before processing, specifically demonstrating usage with dynamic tag names.\nSOURCE: https://github.com/lit/lit.dev/blob/main/packages/lit-dev-content/site/blog/2021-09-21-announcing-lit-2.md#2025-04-09_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nconst tagName = literal`button`;\nhtml`<${tagName}></${tagName}>`\n```\n\n----------------------------------------\n\nTITLE: Example of generated output in transform mode (Spanish)\nDESCRIPTION: An example of the localization output generated for the Spanish locale in transform mode, showing the translated template.\nSOURCE: https://github.com/lit/lit.dev/blob/main/packages/lit-dev-content/site/docs/v2/localization/overview.md#2025-04-09_snippet_11\n\nLANGUAGE: javascript\nCODE:\n```\n// locales/es-419/my-element.js\nrender() {\n  return html`Hola <b>Mundo</b>`;\n}\n```\n\n----------------------------------------\n\nTITLE: Using unsafeStatic for Dynamic Tag Names (TypeScript)\nDESCRIPTION: Demonstrates using the unsafeStatic function for dynamic but trusted tag names and attributes that cannot be defined with literal. Only for trusted content due to XSS risk.\nSOURCE: https://github.com/lit/lit.dev/blob/main/packages/lit-dev-content/site/docs/v3/templates/expressions.md#2025-04-09_snippet_25\n\nLANGUAGE: typescript\nCODE:\n```\n@customElement('my-button')\nclass MyButton extends LitElement {\n  @property() caption = 'Hello static';\n  @property({type: Boolean}) active = false;\n\n  render() {\n    // These strings MUST be trusted, otherwise this is an XSS vulnerability\n    const tag = getTagName();\n    const activeAttribute = getActiveAttribute();\n    // html should be imported from `lit/static-html.js`\n    return html`\n      <${unsafeStatic(tag)} ${unsafeStatic(activeAttribute)}=${this.active}>\n        <p>${this.caption}</p>\n      </${unsafeStatic(tag)}>`;\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Eleventy Navigation for Localization Section\nDESCRIPTION: YAML frontmatter configuration for the localization section of Lit documentation. Sets up the navigation key and order for the section.\nSOURCE: https://github.com/lit/lit.dev/blob/main/packages/lit-dev-content/site/docs/v3/localization/index.md#2025-04-09_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n---\ntitle: Localization\neleventyNavigation:\n  key: Localization\n  order: 9\n---\n```\n\n----------------------------------------\n\nTITLE: Associating Keywords with Search Items\nDESCRIPTION: JSON structure for associating keywords with specific URLs in the keywords.json file to improve search results.\nSOURCE: https://github.com/lit/lit.dev/blob/main/CONTRIBUTING.md#2025-04-09_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"keywords\": [\n    {\n      \"keywords\": [\"componentDidMount\", \"onMounted\"],\n      \"urls\": [\n        \"/docs/components/lifecycle/#connectedcallback\",\n        \"/articles/lit-cheat-sheet/#connectedcallback\"\n      ]\n    }\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Installing Lit 3.0 Pre-release Dependencies\nDESCRIPTION: Package.json configuration showing the required dependencies and versions for trying out Lit 3.0 pre-release. Includes core packages like lit, lit-html, lit-element, and reactive-element with their respective pre-release versions.\nSOURCE: https://github.com/lit/lit.dev/blob/main/packages/lit-dev-content/site/blog/2023-05-15-lit-3.0-prerelease.md#2025-04-09_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n  \"lit\": \"^3.0.0-pre.0\"\n  \"lit-html\": \"^3.0.0-pre.0\"\n  \"lit-element\": \"^4.0.0-pre.0\"\n  \"@lit/reactive-element\": \"^2.0.0-pre.0\"\n```\n\n----------------------------------------\n\nTITLE: Importing CSS Files into Lit Components\nDESCRIPTION: Shows how to import CSS files directly into Lit components using the new import attributes feature. This approach is not yet widely supported and may require alternative methods in some browsers.\nSOURCE: https://github.com/lit/lit.dev/blob/main/packages/lit-dev-content/site/articles/article/lit-cheat-sheet.md#2025-04-09_snippet_19\n\nLANGUAGE: javascript\nCODE:\n```\nimport styles from './styles.css' with { type: 'css' };\nimport { LitElement, html } from 'lit';\n\nclass MyElement extends LitElement {\n  static styles = styles;\n\n  render() {\n    return html`<p>Styled content</p>`;\n  }\n}\ncustomElements.define('my-element', MyElement);\n```\n\n----------------------------------------\n\nTITLE: Configuring Eleventy Navigation for Lit Introduction\nDESCRIPTION: YAML frontmatter configuration that defines the Introduction section in the documentation navigation structure. Sets the page title and navigation properties including order.\nSOURCE: https://github.com/lit/lit.dev/blob/main/packages/lit-dev-content/site/docs/v3/introduction.md#2025-04-09_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n---\ntitle: Introduction\neleventyNavigation:\n  key: Introduction\n  order: 1\n---\n```\n\n----------------------------------------\n\nTITLE: TypeScript Example with Typed Array\nDESCRIPTION: A simple TypeScript code example showing type annotations for array variables. Demonstrates how TypeScript allows declaring explicit types for variables.\nSOURCE: https://github.com/lit/lit.dev/blob/main/packages/lit-dev-content/site/tutorials/content/intro-to-lit/00.md#2025-04-09_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n// TypeScript for TypeScript lovers!\nconst items: Array<string> | undefined;\n```\n\n----------------------------------------\n\nTITLE: Incorrect Localization of Property Default Values in JavaScript\nDESCRIPTION: This snippet demonstrates an incorrect way of localizing property default values, which can lead to the default label not updating when the locale changes.\nSOURCE: https://github.com/lit/lit.dev/blob/main/packages/lit-dev-content/site/docs/v3/localization/best-practices.md#2025-04-09_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n// Don't do this!\nlabel = msg('Default label')\n\nrender() {\n  return html`<button>${this.label}</button>`;\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Eleventy Navigation Section\nDESCRIPTION: YAML frontmatter configuration for creating a Tools and Workflows section header in Eleventy navigation. The configuration specifies the title, navigation key, and order for the section.\nSOURCE: https://github.com/lit/lit.dev/blob/main/packages/lit-dev-content/site/docs/v3/tools/index.md#2025-04-09_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n---\ntitle: Tools and workflows\neleventyNavigation:\n  title: Tools and workflows\n  key: Tools\n  order: 6\n---\n```\n\n----------------------------------------\n\nTITLE: Adding Custom Links to Algolia Search Index\nDESCRIPTION: Example JSON structure for adding external links to the Algolia search index in the externalSearchData.json file.\nSOURCE: https://github.com/lit/lit.dev/blob/main/CONTRIBUTING.md#2025-04-09_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"relativeUrl\": \"https://url-to-the-page.com\",\n  \"title\": \"Search Item group title (the text above a group of search results)\",\n  \"heading\": \"Search Item Option Heading Line (defaults to the title of the page if this is empty string but must be defined)\",\n  \"text\": \"A description of the search item's context. Algolia uses this as well to \",\n  \"docType\": {\n    \"type\": \"Colored Tag\",\n    \"tag\": \"other\"\n  },\n  \"isExternal\": true\n}\n```\n\n----------------------------------------\n\nTITLE: Using Preact Signals with Lit Components\nDESCRIPTION: Demonstrates how to use the SignalWatcher mixin from @lit-labs/preact-signals to create a Lit component that automatically watches and updates based on Preact signal changes.\nSOURCE: https://github.com/lit/lit.dev/blob/main/packages/lit-dev-content/site/blog/2023-09-27-lit-3.0-prerelease-2.md#2025-04-09_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport {LitElement, html} from 'lit';\nimport {customElement, property} from 'lit';\nimport {SignalWatcher, signal} from '@lit-labs/preact-signals';\n\nconst count = signal(0);\n\n@customElement('signal-example')\nexport class SignalExample extends SignalWatcher(LitElement) {\n\n  render() {\n    return html`\n      <p>The count is ${count.value}</p>\n      <button @click=${this._onClick}>Increment<button></button></button>\n    `;\n  }\n\n  private _onClick() {\n    // A change to the signal value causes the element to re-render!\n    count.value = count.value + 1;\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Updating ReactiveElement import in TypeScript\nDESCRIPTION: Code snippet showing how to update the import of ReactiveElement, replacing the deprecated UpdatingElement alias.\nSOURCE: https://github.com/lit/lit.dev/blob/main/packages/lit-dev-content/site/docs/v3/releases/upgrade.md#2025-04-09_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\n// Removed\nimport {UpdatingElement} from 'lit';\n\n// Updated\nimport {ReactiveElement} from 'lit';\n```\n\n----------------------------------------\n\nTITLE: Configuring Eleventy Navigation and Version Links for Lit Documentation\nDESCRIPTION: YAML front matter for a documentation page about related libraries in the Lit framework. It sets up navigation metadata and version-specific links.\nSOURCE: https://github.com/lit/lit.dev/blob/main/packages/lit-dev-content/site/docs/v2/libraries/index.md#2025-04-09_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n---\ntitle: Related libraries\neleventyNavigation:\n  key: Related libraries\n  order: 12\nversionLinks:\n  v1: lit-html/introduction/\n---\n```\n\n----------------------------------------\n\nTITLE: Displaying Dynamic Content with Custom HTML Element in HTML\nDESCRIPTION: This code snippet demonstrates the use of a custom HTML element '<ts-js>' to display different content for JavaScript and TypeScript versions. It uses the 'slot' attribute to define named slots for each language version.\nSOURCE: https://github.com/lit/lit.dev/blob/main/packages/lit-dev-content/site/tutorials/content/wc-to-lit/13.md#2025-04-09_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<ts-js>\n  <span slot=\"js\">101</span>\n  <span slot=\"ts\">99</span>\n</ts-js>\n```\n\n----------------------------------------\n\nTITLE: Implementing Tooltip Target Property Accessor in JavaScript\nDESCRIPTION: JavaScript version of the target property accessor. It manages event listeners for showing and hiding the tooltip when the target element changes.\nSOURCE: https://github.com/lit/lit.dev/blob/main/packages/lit-dev-content/site/tutorials/content/tooltip/03.md#2025-04-09_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\n_target = null;\n\nget target() {\n  return this._target;\n}\n\nset target(target) {\n  // Remove events from existing target\n  if (this.target) {\n    enterEvents.forEach((name) =>\n      this.target.removeEventListener(name, this.show)\n    );\n    leaveEvents.forEach((name) =>\n      this.target.removeEventListener(name, this.hide)\n    );\n  }\n  // Add events to new target\n  if (target) {\n    enterEvents.forEach((name) => target.addEventListener(name, this.show));\n    leaveEvents.forEach((name) => target.addEventListener(name, this.hide));\n  }\n  this._target = target;\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Eleventy Navigation for Lit Documentation\nDESCRIPTION: YAML frontmatter configuration that defines navigation properties for the introduction page in Lit documentation. Sets the title and navigation order while noting that the actual file content is removed during build.\nSOURCE: https://github.com/lit/lit.dev/blob/main/packages/lit-dev-content/site/docs/v1/introduction.md#2025-04-09_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n---\ntitle: Introduction\neleventyNavigation:\n  key: Introduction\n  order: 1\n---\n```\n\n----------------------------------------\n\nTITLE: Setting up Lit Development Environment\nDESCRIPTION: Instructions for cloning the Lit repository, installing dependencies, and starting the development server.\nSOURCE: https://github.com/lit/lit.dev/blob/main/CONTRIBUTING.md#2025-04-09_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ngit clone https://github.com/lit/lit.dev.git\ncd lit.dev\nnpm ci\nnpm run dev\n```\n\n----------------------------------------\n\nTITLE: Using Standard Decorators with Lit 3.0 in TypeScript\nDESCRIPTION: Demonstrates how to use Lit decorators with auto-accessors using the 'accessor' keyword in Lit 3.0. This syntax works with both experimental and standard decorators.\nSOURCE: https://github.com/lit/lit.dev/blob/main/packages/lit-dev-content/site/blog/2023-10-10-lit-3.0.md#2025-04-09_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nclass MyElement extends LitElement {\n  @property()\n  accessor myProperty = 'hello';\n}\n```\n\n----------------------------------------\n\nTITLE: Lit Template After Compilation\nDESCRIPTION: Example of a compiled Lit template after transformation by the @lit-labs/compiler, showing the optimized structure for faster rendering.\nSOURCE: https://github.com/lit/lit.dev/blob/main/packages/lit-dev-content/site/blog/2023-10-10-lit-3.0.md#2025-04-09_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nconst b = (s) => s;\nconst lit_template_1 = {h: b`<h1>Hello <?></h1>`, parts: [{type: 2, index: 1}]};\nconst hi = (name) => ({_$litType$: lit_template_1, values: [name]});\n```\n\n----------------------------------------\n\nTITLE: Demonstrating HTML Attribute and JavaScript Property Relationship\nDESCRIPTION: Shows how to set both the HTML attribute and JavaScript property on an input element, demonstrating their relationship and different ways of setting values.\nSOURCE: https://github.com/lit/lit.dev/blob/main/packages/lit-dev-content/site/tutorials/content/custom-attribute-converter/00.md#2025-04-09_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<input value=\"This is setting the 'value' attribute\">\n<script>\n  const inputElementReference = document.querySelector('input');\n  inputElementReference.value = 'This is setting the \"value\" property';\n</script>\n```\n\n----------------------------------------\n\nTITLE: Light DOM Example in HTML\nDESCRIPTION: Shows how to add light DOM content to a web component, demonstrating the separation between light DOM and shadow DOM.\nSOURCE: https://github.com/lit/lit.dev/blob/main/packages/lit-dev-content/site/tutorials/content/wc-to-lit/03.md#2025-04-09_snippet_2\n\nLANGUAGE: html\nCODE:\n```\n<rating-element>\n <div>\n   This is the light DOM!\n </div>\n</rating-element>\n```\n\n----------------------------------------\n\nTITLE: Building Localized Templates with Lit Localize CLI (Shell)\nDESCRIPTION: Command to build localized templates incorporating translations back into the application using the Lit Localize CLI.\nSOURCE: https://github.com/lit/lit.dev/blob/main/packages/lit-dev-content/site/docs/v3/localization/overview.md#2025-04-09_snippet_8\n\nLANGUAGE: sh\nCODE:\n```\nlit-localize build\n```\n\n----------------------------------------\n\nTITLE: Lit Template Before Compilation\nDESCRIPTION: Example of a Lit template using the html tag function before compilation.\nSOURCE: https://github.com/lit/lit.dev/blob/main/packages/lit-dev-content/site/blog/2023-10-10-lit-3.0.md#2025-04-09_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nconst hi = (name) => html`<h1>Hello ${name}!</h1>`;\n```\n\n----------------------------------------\n\nTITLE: Using Standard Decorators with Lit 3.0 in TypeScript\nDESCRIPTION: Demonstrates how to use Lit decorators with auto-accessors using the 'accessor' keyword, which works with both experimental and standard decorators.\nSOURCE: https://github.com/lit/lit.dev/blob/main/packages/lit-dev-content/site/blog/2023-09-27-lit-3.0-prerelease-2.md#2025-04-09_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nclass MyElement extends LitElement {\n  @property()\n  accessor myProperty = 'hello';\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Eleventy Navigation for Resources Section in YAML\nDESCRIPTION: YAML frontmatter configuration that defines the Resources section in the website navigation. It sets the navigation key to 'Resources' and assigns it an order value of 13 in the navigation hierarchy.\nSOURCE: https://github.com/lit/lit.dev/blob/main/packages/lit-dev-content/site/docs/v3/resources/index.md#2025-04-09_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n---\ntitle: Resources\neleventyNavigation:\n  key: Resources\n  order: 13\n---\n```\n\n----------------------------------------\n\nTITLE: Using CSS Expression with Main Color\nDESCRIPTION: Example of using a CSS expression with a css tagged template literal variable.\nSOURCE: https://github.com/lit/lit.dev/blob/main/packages/lit-dev-content/site/docs/v2/components/styles.md#2025-04-09_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nconst mainColor = css`red`;\n...\nstatic styles = css`\n  div { color: ${mainColor} }\n`;\n```\n\n----------------------------------------\n\nTITLE: Styling Summary Element with CSS\nDESCRIPTION: Simple CSS style to change cursor on summary element hover.\nSOURCE: https://github.com/lit/lit.dev/blob/main/packages/lit-dev-content/site/tutorials/content/wc-to-lit/09.md#2025-04-09_snippet_0\n\nLANGUAGE: css\nCODE:\n```\nsummary:hover {\n  cursor: pointer;\n}\n```\n\n----------------------------------------\n\nTITLE: Global Scope SSR Implementation with Koa\nDESCRIPTION: Example of implementing SSR in global scope using Koa middleware.\nSOURCE: https://github.com/lit/lit.dev/blob/main/packages/lit-dev-content/site/docs/v2/ssr/server-usage.md#2025-04-09_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\nimport {render} from '@lit-labs/ssr';\nimport {RenderResultReadable} from '@lit-labs/ssr/lib/render-result-readable.js';\nimport {myTemplate} from './my-template.js';\n\n// within a Koa middleware, for example\napp.use(async (ctx) => {\n  const ssrResult = render(myTemplate(data));\n  ctx.type = 'text/html';\n  ctx.body = new RenderResultReadable(ssrResult);\n});\n```\n\n----------------------------------------\n\nTITLE: Implementing Shared Counter with Signals in Lit\nDESCRIPTION: This example demonstrates how to create a shared counter using @lit-labs/signals in a Lit component. It uses the SignalWatcher mixin to enable signal-based reactivity and shows how to update and display a shared signal across multiple component instances.\nSOURCE: https://github.com/lit/lit.dev/blob/main/packages/lit-dev-content/site/blog/2024-10-08-signals.md#2025-04-09_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport {LitElement, html} from 'lit';\nimport {customElement} from 'lit/decorators.js';\nimport {SignalWatcher, signal} from '@lit-labs/signals';\n\n// This is a standard TC39 signal that uses the signals polyfill.\n// The signal is shared across all component instances.\nconst count = signal(0);\n\n@customElement('shared-counter')\nexport class SharedCounterComponent extends SignalWatcher(LitElement) {\n  render() {\n    // Just by using the signal in your template, your component will update\n    // when the signal changes.\n    return html`\n      <p>The count is ${count.get()}</p>\n      <button @click=${this.increment}>Increment</button>\n    `;\n  }\n\n  increment() {\n    count.set(count.get() + 1);\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Embedding YouTube Video for Lit 2 Release Livestream in HTML\nDESCRIPTION: This HTML snippet embeds a YouTube video player for the Lit 2 release livestream recording. It uses an iframe with specific attributes for privacy and functionality.\nSOURCE: https://github.com/lit/lit.dev/blob/main/packages/lit-dev-content/site/blog/2021-09-22-lit-2-release-livestream.md#2025-04-09_snippet_0\n\nLANGUAGE: HTML\nCODE:\n```\n<iframe width=\"560\" height=\"315\" src=\"https://www.youtube-nocookie.com/embed/nfb779XIhsU\" title=\"YouTube video player\" frameborder=\"0\" allow=\"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture\" allowfullscreen></iframe>\n```\n\n----------------------------------------\n\nTITLE: Loading Web Components Polyfills in HTML\nDESCRIPTION: HTML structure for loading Web Components polyfills and ensuring compatibility with older browsers and Edge.\nSOURCE: https://github.com/lit/lit.dev/blob/main/packages/lit-dev-content/site/docs/v1/tools/use.md#2025-04-09_snippet_5\n\nLANGUAGE: html\nCODE:\n```\n<head>\n  <!--\n    If you are loading es5 code you will need\n    custom-elements-es5-loader to make the element work in\n    es6-capable browsers.\n\n    If you are not loading es5 code, you don't need\n    custom-elements-es5-loader.\n  -->\n  <!--\n  <script src=\"./path-to/custom-elements-es5-loader.js\"></script>\n  -->\n\n  <!-- Load polyfills -->\n  <script\n    src=\"path-to/webcomponents-loader.js\"\n    defer>\n  </script>\n\n  <!-- Load component when polyfills are definitely ready -->\n  <script type=\"module\">\n    // Take care of cases in which the browser runs this\n    // script before it has finished running\n    // webcomponents-loader.js (e.g. Firefox script execution order)\n    window.WebComponents = window.WebComponents || {\n      waitFor(cb){ addEventListener('WebComponentsReady', cb) }\n    }\n\n    WebComponents.waitFor(async () => {\n      import('./path-to/some-element.js');\n    });\n  </script>\n</head>\n<body>\n  <!-- Add the element to the page -->\n  <some-element></some-element>\n</body>\n```\n\n----------------------------------------\n\nTITLE: Installing lit-html with npm\nDESCRIPTION: Basic npm commands to initialize a new project and install lit-html\nSOURCE: https://github.com/lit/lit.dev/blob/main/packages/lit-dev-content/site/docs/v1/lit-html/tools.md#2025-04-09_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm init\n```\n\nLANGUAGE: bash\nCODE:\n```\nnpm i lit-html\n```\n\n----------------------------------------\n\nTITLE: TypeScript Configuration for LitElement Components\nDESCRIPTION: Recommended tsconfig.json options for compiling TypeScript to JavaScript, targeting ES2017 with Node.js module resolution and support for decorators.\nSOURCE: https://github.com/lit/lit.dev/blob/main/packages/lit-dev-content/site/docs/v1/tools/publish.md#2025-04-09_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n  \"compilerOptions\": {\n    \"target\": \"es2017\",\n    \"module\": \"es2015\",\n    \"moduleResolution\": \"node\",\n    \"lib\": [\"es2017\", \"dom\"],\n    \"experimentalDecorators\": true\n  }\n```\n\n----------------------------------------\n\nTITLE: Anti-pattern: Using Expressions in Style Element\nDESCRIPTION: Shows an anti-pattern of using expressions inside a style element. This approach has limitations with ShadyCSS and performance issues due to re-parsing of the entire style element.\nSOURCE: https://github.com/lit/lit.dev/blob/main/packages/lit-dev-content/site/docs/v1/components/styles.md#2025-04-09_snippet_8\n\nLANGUAGE: text\nCODE:\n```\n// Anti-pattern!\nrender() {\n  return html`\n    <style>\n      :host {\n        /* Warning: this approach has limitations & performance issues! */\n        color: ${myColor}\n      }\n    </style>\n    <div>template content</div>\n  `;\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Template Shadowroot Polyfill in HTML\nDESCRIPTION: Provides a complete HTML structure for implementing the template-shadowroot polyfill, including a strategy to hide the body until the polyfill is loaded to prevent layout shifts.\nSOURCE: https://github.com/lit/lit.dev/blob/main/packages/lit-dev-content/site/docs/v3/ssr/client-usage.md#2025-04-09_snippet_3\n\nLANGUAGE: html\nCODE:\n```\n<!DOCTYPE html>\n<html>\n  <head>\n    <!-- On browsers that don't yet support native declarative shadow DOM, a\n        paint can occur after some or all pre-rendered HTML has been parsed,\n        but before the declarative shadow DOM polyfill has taken effect. This\n        paint is undesirable because it won't include any component shadow DOM.\n        To prevent layout shifts that can result from this render, we use a\n        \"dsd-pending\" attribute to ensure we only paint after we know\n        shadow DOM is active. -->\n    <style>\n      body[dsd-pending] {\n        display: none;\n      }\n    </style>\n  </head>\n\n  <body dsd-pending>\n    <script>\n      if (HTMLTemplateElement.prototype.hasOwnProperty('shadowRoot')) {\n        // This browser has native declarative shadow DOM support, so we can\n        // allow painting immediately.\n        document.body.removeAttribute('dsd-pending');\n      }\n    </script>\n\n    <!-- App components rendered with declarative shadow DOM placed here. -->\n\n    <!-- Use a type=module script so that we can use dynamic module imports.\n        Note this pattern will not work in IE11. -->\n    <script type=\"module\">\n      // Check if we require the template shadow root polyfill.\n      if (!HTMLTemplateElement.prototype.hasOwnProperty('shadowRoot')) {\n        // Fetch the template shadow root polyfill.\n        const {hydrateShadowRoots} = await import(\n          '/node_modules/@webcomponents/template-shadowroot/template-shadowroot.js'\n        );\n\n        // Apply the polyfill. This is a one-shot operation, so it is important\n        // it happens after all HTML has been parsed.\n        hydrateShadowRoots(document.body);\n\n        // At this point, browsers without native declarative shadow DOM\n        // support can paint the initial state of your components!\n        document.body.removeAttribute('dsd-pending');\n      }\n    </script>\n  </body>\n</html>\n```\n\n----------------------------------------\n\nTITLE: Installing Web Test Runner Legacy Plugin\nDESCRIPTION: Command to install the legacy plugin for Web Test Runner which provides polyfill support for testing Lit components in older browsers.\nSOURCE: https://github.com/lit/lit.dev/blob/main/packages/lit-dev-content/site/docs/v3/tools/testing.md#2025-04-09_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm i @web/dev-server-legacy --save-dev\n```\n\n----------------------------------------\n\nTITLE: JavaScript Variable Declaration\nDESCRIPTION: A basic JavaScript variable declaration without type annotations. Contrasts with the TypeScript example to show the difference in syntax between the two languages.\nSOURCE: https://github.com/lit/lit.dev/blob/main/packages/lit-dev-content/site/tutorials/content/intro-to-lit/00.md#2025-04-09_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\n// JavaScript for JavaScript lovers!\nconst items;\n```\n\n----------------------------------------\n\nTITLE: Installing Web Test Runner Legacy Plugin with NPM\nDESCRIPTION: Command to install the @web/dev-server-legacy package as a development dependency for supporting older browsers in Web Test Runner.\nSOURCE: https://github.com/lit/lit.dev/blob/main/packages/lit-dev-content/site/docs/v2/tools/testing.md#2025-04-09_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm i @web/dev-server-legacy --save-dev\n```\n\n----------------------------------------\n\nTITLE: Importing External Stylesheet in LitElement\nDESCRIPTION: Shows how to include an external stylesheet in a LitElement template using a <link> tag. This method has limitations with ShadyCSS and potential FOUC issues.\nSOURCE: https://github.com/lit/lit.dev/blob/main/packages/lit-dev-content/site/docs/v1/components/styles.md#2025-04-09_snippet_10\n\nLANGUAGE: javascript\nCODE:\n```\n{% include \"v1-projects/style/where/my-element.js\" %}\n```\n\n----------------------------------------\n\nTITLE: Installing Lit Package via NPM\nDESCRIPTION: Command to install the Lit library using npm package manager.\nSOURCE: https://github.com/lit/lit.dev/blob/main/packages/lit-dev-content/site/docs/v2/tools/adding-lit.md#2025-04-09_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\nnpm i lit\n```\n\n----------------------------------------\n\nTITLE: Adding the animate directive to the container element\nDESCRIPTION: Applies the animate directive to the container div to enable smooth transitions when the carousel item changes. This enables tweening between different rendered layouts.\nSOURCE: https://github.com/lit/lit.dev/blob/main/packages/lit-dev-content/site/tutorials/content/carousel/08.md#2025-04-09_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nreturn html`\n  <div class=\"fit\"\n    ${animate()}\n```\n\n----------------------------------------\n\nTITLE: ES Dev Server Configuration\nDESCRIPTION: Package.json script configuration for running es-dev-server\nSOURCE: https://github.com/lit/lit.dev/blob/main/packages/lit-dev-content/site/docs/v1/lit-html/tools.md#2025-04-09_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n\"scripts\": {\n  \"start\": \"es-dev-server --app-index index.html --node-resolve --watch --open\"\n}\n```\n\n----------------------------------------\n\nTITLE: Theming Example with CSS Inheritance\nDESCRIPTION: Shows how to use CSS inheritance to propagate style information to LitElement components and their rendered templates.\nSOURCE: https://github.com/lit/lit.dev/blob/main/packages/lit-dev-content/site/docs/v1/components/styles.md#2025-04-09_snippet_14\n\nLANGUAGE: html\nCODE:\n```\n<style>\n  html {\n    --themeColor: #123456;\n    font-family: Roboto;\n  }\n</style>\n\n<!-- host inherits `--themeColor` and `font-family` and\n     passes these properties to its rendered template -->\n<my-element></my-element>\n```\n\n----------------------------------------\n\nTITLE: TypeScript Configuration for Modern JavaScript\nDESCRIPTION: TypeScript compiler configuration for outputting modern JavaScript\nSOURCE: https://github.com/lit/lit.dev/blob/main/packages/lit-dev-content/site/docs/v1/lit-html/tools.md#2025-04-09_snippet_5\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"compilerOptions\": {\n    \"target\": \"es2017\",\n    \"module\": \"es2015\",\n    ...\n\n```\n\n----------------------------------------\n\nTITLE: Configuring Rollup for Modern Browser Build in JavaScript\nDESCRIPTION: This Rollup configuration sets up a build process for modern browsers supporting ES modules. It includes plugins for resolving modules, minifying JavaScript and HTML, and copying static assets.\nSOURCE: https://github.com/lit/lit.dev/blob/main/packages/lit-dev-content/site/docs/v1/tools/build.md#2025-04-09_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport resolve from '@rollup/plugin-node-resolve';\nimport { terser } from 'rollup-plugin-terser';\nimport minifyHTML from 'rollup-plugin-minify-html-literals';\nimport copy from 'rollup-plugin-copy';\n\n// Static assets will vary depending on the application\nconst copyConfig = {\n  targets: [\n    { src: 'node_modules/@webcomponents', dest: 'build-modern/node_modules' },\n    { src: 'images', dest: 'build-modern' },\n    { src: 'data', dest: 'build-modern' },\n    { src: 'index.html', dest: 'build-modern' },\n  ],\n};\n\n// The main JavaScript bundle for modern browsers that support\n// JavaScript modules and other ES2015+ features.\nconst config = {\n  input: 'src/components/shop-app.js',\n  output: {\n    dir: 'build-modern/src/components',\n    format: 'es',\n  },\n  plugins: [\n    minifyHTML(),\n    copy(copyConfig),\n    resolve(),\n  ],\n  preserveEntrySignatures: false,\n};\n\nif (process.env.NODE_ENV !== 'development') {\n  config.plugins.push(terser());\n}\n\nexport default config;\n```\n\n----------------------------------------\n\nTITLE: Using LitElement Component in HTML\nDESCRIPTION: Demonstrates how to use the custom element in HTML markup after it has been defined and imported.\nSOURCE: https://github.com/lit/lit.dev/blob/main/packages/lit-dev-content/site/docs/v1/getting-started.md#2025-04-09_snippet_10\n\nLANGUAGE: html\nCODE:\n```\n<my-element></my-element>\n```\n\n----------------------------------------\n\nTITLE: Migrating 1.x functional directive to 2.0 class-based directive (former version)\nDESCRIPTION: Example of a lit-html 1.x directive using the functional approach with WeakMap for state management and part validation using instanceof.\nSOURCE: https://github.com/lit/lit.dev/blob/main/packages/lit-dev-content/site/docs/v2/releases/upgrade.md#2025-04-09_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\nimport {html, directive, Part, NodePart} from 'lit-html';\n\n// State stored in WeakMap\nconst previousState: WeakMap<Part, number> = new WeakMap();\n\n// Functional-based directive API\nexport const renderCounter = directive((initialValue: number) => (part: Part) => {\n  // When necessary, validate part type each render using `instanceof`\n  if (!(part instanceof NodePart)) {\n    throw new Error('renderCounter only supports NodePart');\n  }\n  // Retrieve value from previous state\n  let value = previousState.get(part);\n  // Update state\n  if (value === undefined) {\n    value = initialValue;\n  } else {\n    value++;\n  }\n  // Store state\n  previousState.set(part, value);\n  // Update part with new rendering\n  part.setValue(html`<p>${value}</p>`);\n});\n```\n\n----------------------------------------\n\nTITLE: Webpack Alias Configuration for Shady-Render\nDESCRIPTION: Webpack configuration to replace shady-render module references with lit-html module.\nSOURCE: https://github.com/lit/lit.dev/blob/main/packages/lit-dev-content/site/docs/v1/tools/build.md#2025-04-09_snippet_9\n\nLANGUAGE: javascript\nCODE:\n```\nresolve: {\n  alias: {\n    'lit-html/lib/shady-render.js': path.resolve(__dirname, './node_modules/lit-html/lit-html.js')\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Installing Dependencies with npm\nDESCRIPTION: Command to install project dependencies after downloading the starter project.\nSOURCE: https://github.com/lit/lit.dev/blob/main/packages/lit-dev-content/site/docs/v1/getting-started.md#2025-04-09_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ncd <project folder>\nnpm i\n```\n\n----------------------------------------\n\nTITLE: Installing Rollup Dependencies for Modern Build\nDESCRIPTION: Command to install the necessary npm packages for building a modern-only Lit application with Rollup.\nSOURCE: https://github.com/lit/lit.dev/blob/main/packages/lit-dev-content/site/docs/v2/tools/production.md#2025-04-09_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\nnpm i --save-dev rollup \\\n  @web/rollup-plugin-html \\\n  @web/rollup-plugin-copy \\\n  @rollup/plugin-node-resolve \\\n  @rollup/plugin-terser \\\n  rollup-plugin-minify-html-literals \\\n  rollup-plugin-summary\n```\n\n----------------------------------------\n\nTITLE: Configuring Web Test Runner for Legacy Browser Support\nDESCRIPTION: Configuration for Web Test Runner that adds polyfills for web components and Lit's polyfill-support module to enable testing in older browsers.\nSOURCE: https://github.com/lit/lit.dev/blob/main/packages/lit-dev-content/site/docs/v3/tools/testing.md#2025-04-09_snippet_1\n\nLANGUAGE: js\nCODE:\n```\nimport { legacyPlugin } from '@web/dev-server-legacy';\n\nexport default {\n  /* ... */\n  plugins: [\n    // make sure this plugin is always last\n    legacyPlugin({\n      polyfills: {\n        webcomponents: true,\n        // Inject lit's polyfill-support module into test files, which is required\n        // for interfacing with the webcomponents polyfills\n        custom: [\n          {\n            name: 'lit-polyfill-support',\n            path: 'node_modules/lit/polyfill-support.js',\n            test: \"!('attachShadow' in Element.prototype)\",\n            module: false,\n          },\n        ],\n      },\n    }),\n  ],\n};\n```\n\n----------------------------------------\n\nTITLE: Installing Dependencies for Lit.dev Development\nDESCRIPTION: Command to install project dependencies using npm.\nSOURCE: https://github.com/lit/lit.dev/blob/main/README.md#2025-04-09_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\nnpm ci\n```\n\n----------------------------------------\n\nTITLE: Updating API Docs for Lit.dev\nDESCRIPTION: Commands to update and watch for changes in the generated API documentation for lit.dev.\nSOURCE: https://github.com/lit/lit.dev/blob/main/README.md#2025-04-09_snippet_3\n\nLANGUAGE: sh\nCODE:\n```\ncd packages/lit-dev-api\nnpm run build:watch\n```\n\n----------------------------------------\n\nTITLE: Configuring Module Type in package.json\nDESCRIPTION: Configuration in package.json to indicate that .js files in the package are standard JavaScript modules using the 'type' field set to 'module', while maintaining the legacy 'module' field for backward compatibility.\nSOURCE: https://github.com/lit/lit.dev/blob/main/packages/lit-dev-content/site/docs/v2/releases/release-notes/1.3.0.md#2025-04-09_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n\"type\": \"module\"\n```\n\n----------------------------------------\n\nTITLE: Configuring tsconfig.json for Lit Component Compilation\nDESCRIPTION: TypeScript configuration for compiling Lit components to ES2019, enabling decorators and generating declaration files.\nSOURCE: https://github.com/lit/lit.dev/blob/main/packages/lit-dev-content/site/docs/v2/tools/publishing.md#2025-04-09_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n\"compilerOptions\": {\n  \"target\": \"es2019\",\n  \"module\": \"es2015\",\n  \"moduleResolution\": \"node\",\n  \"lib\": [\"es2019\", \"dom\"],\n  \"declaration\": true,\n  \"declarationMap\": true,\n  \"experimentalDecorators\": true,\n  \"useDefineForClassFields\": false\n}\n```\n\n----------------------------------------\n\nTITLE: Starting Development Server for Lit.dev\nDESCRIPTION: Command to run the development server for lit.dev, which serves the site at http://localhost:5415.\nSOURCE: https://github.com/lit/lit.dev/blob/main/README.md#2025-04-09_snippet_1\n\nLANGUAGE: sh\nCODE:\n```\nnpm run dev\n```\n\n----------------------------------------\n\nTITLE: HTML Comment Explaining File Purpose\nDESCRIPTION: This HTML comment explains that the file exists only to create a section heading and that its output is deleted by the Eleventy build process. This indicates the file is a structural element for site navigation rather than content for display.\nSOURCE: https://github.com/lit/lit.dev/blob/main/packages/lit-dev-content/site/docs/v2/introduction.md#2025-04-09_snippet_1\n\nLANGUAGE: html\nCODE:\n```\n<!-- This file exists only to create a section heading.\n     Its output is deleted by the Eleventy build process. -->\n```\n\n----------------------------------------\n\nTITLE: Configuring Babel for Lit Component Compilation\nDESCRIPTION: Demonstrates the Babel configuration for compiling Lit components, including preset-env and decorator plugin settings.\nSOURCE: https://github.com/lit/lit.dev/blob/main/packages/lit-dev-content/site/docs/v3/tools/publishing.md#2025-04-09_snippet_4\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"presets\": [\n    [\"@babel/preset-env\", {\"targets\": \"defaults\"}]\n  ],\n  \"plugins\": [\n    [\"@babel/plugin-proposal-decorators\", {\"version\": \"2023-05\"}]\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Conditional Rendering in Eleventy Templates for Lit.dev\nDESCRIPTION: Example of using conditional rendering in Eleventy templates to differentiate between development and production modes.\nSOURCE: https://github.com/lit/lit.dev/blob/main/README.md#2025-04-09_snippet_2\n\nLANGUAGE: liquid\nCODE:\n```\n{% if env.DEV %}\n  <p>Dev mode</p>\n{% else %}\n  <p>Prod mode</p>\n{% endif %}\n```\n\n----------------------------------------\n\nTITLE: Configuring Eleventy Navigation Structure in YAML\nDESCRIPTION: YAML front matter configuration that defines navigation metadata for the articles section of a Lit documentation site. Sets up the page layout, title, tags and navigation order.\nSOURCE: https://github.com/lit/lit.dev/blob/main/packages/lit-dev-content/site/articles/index.md#2025-04-09_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n---\nlayout: 'articles-feed'\ntitle: Articles\ntags:\n  - articles-nav\neleventyNavigation:\n  key: Tags\n  order: 0\n---\n```\n\n----------------------------------------\n\nTITLE: Configuring Package Versions with JSON Extension\nDESCRIPTION: JSON configuration example showing how to use the 'extends' property to inherit from the site base configuration that resolves imports to 'lit-next'. This is added to a project's configuration file.\nSOURCE: https://github.com/lit/lit.dev/blob/main/packages/lit-dev-content/site/docs/v3/internal/demos.md#2025-04-09_snippet_3\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"extends\": \"/samples/v3-base.json\",\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Eleventy Navigation for API Section\nDESCRIPTION: This code snippet defines the Eleventy navigation configuration for the API section of the Lit documentation. It sets the title, key, and order for the navigation item.\nSOURCE: https://github.com/lit/lit.dev/blob/main/packages/lit-dev-content/site/docs/v2/api/index.md#2025-04-09_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n---\ntitle: API\neleventyNavigation:\n  title: API\n  key: API\n  order: 10\n---\n```"
  }
]