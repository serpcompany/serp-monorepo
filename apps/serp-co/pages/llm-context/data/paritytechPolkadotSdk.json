[
  {
    "owner": "paritytech",
    "repo": "polkadot-sdk",
    "content": "TITLE: Treasury Pallet Interface Functions\nDESCRIPTION: Core dispatchable functions provided by the Treasury pallet for managing proposals and spending funds. Includes functions for proposing spends, approving proposals, claiming payouts, and managing proposal status.\nSOURCE: https://github.com/paritytech/polkadot-sdk/blob/master/substrate/frame/treasury/README.md#2025-04-21_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n- `spend_local` - Propose and approve a spend of treasury funds, enables the\\n  creation of spends using the native currency of the chain, utilizing the funds\\n  stored in the pot\\n- `spend` - Propose and approve a spend of treasury funds, allows spending any\\n  asset kind managed by the treasury\\n- `remove_approval` - Force a previously approved proposal to be removed from\\n  the approval queue\\n- `payout` - Claim a spend\\n- `check_status` - Check the status of the spend and remove it from the storage\\n  if processed\\n- `void_spend` - Void previously approved spend\n```\n\n----------------------------------------\n\nTITLE: Implementing Token Airdrop in Substrate Runtime using Assets Module\nDESCRIPTION: Example implementation of a Substrate pallet that uses the Assets module to create and distribute tokens via airdrop. The code demonstrates asset creation, balance management, and event emission. It includes configuration trait implementation, pallet structure definition, and a dispatch function for token distribution.\nSOURCE: https://github.com/paritytech/polkadot-sdk/blob/master/substrate/frame/assets/README.md#2025-04-21_snippet_0\n\nLANGUAGE: rust\nCODE:\n```\nuse pallet_assets as assets;\nuse sp_runtime::ArithmeticError;\n\n#[frame_support::pallet]\npub mod pallet {\n    use super::*;\n    use frame_support::pallet_prelude::*;\n    use frame_system::pallet_prelude::*;\n\n    #[pallet::pallet]\n    pub struct Pallet<T>(_);\n\n    #[pallet::config]\n    pub trait Config: frame_system::Config + assets::Config {}\n\n    #[pallet::call]\n    impl<T: Config> Pallet<T> {\n        pub fn issue_token_airdrop(origin: OriginFor<T>) -> DispatchResult {\n            let sender = ensure_signed(origin)?;\n\n            const ACCOUNT_ALICE: u64 = 1;\n            const ACCOUNT_BOB: u64 = 2;\n            const COUNT_AIRDROP_RECIPIENTS: u64 = 2;\n            const TOKENS_FIXED_SUPPLY: u64 = 100;\n\n            ensure!(!COUNT_AIRDROP_RECIPIENTS.is_zero(), ArithmeticError::DivisionByZero);\n\n            let asset_id = Self::next_asset_id();\n\n            <NextAssetId<T>>::mutate(|asset_id| *asset_id += 1);\n            <Balances<T>>::insert((asset_id, &ACCOUNT_ALICE), TOKENS_FIXED_SUPPLY / COUNT_AIRDROP_RECIPIENTS);\n            <Balances<T>>::insert((asset_id, &ACCOUNT_BOB), TOKENS_FIXED_SUPPLY / COUNT_AIRDROP_RECIPIENTS);\n            <TotalSupply<T>>::insert(asset_id, TOKENS_FIXED_SUPPLY);\n\n            Self::deposit_event(Event::Issued(asset_id, sender, TOKENS_FIXED_SUPPLY));\n            Ok(())\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing a Pallet with System Module Integration in Rust\nDESCRIPTION: This code snippet demonstrates how to create a pallet that interacts with the System module. It shows how to import necessary traits, define a configuration, and create a dispatchable function that accesses System module data.\nSOURCE: https://github.com/paritytech/polkadot-sdk/blob/master/substrate/frame/system/README.md#2025-04-21_snippet_0\n\nLANGUAGE: rust\nCODE:\n```\n#[frame_support::pallet]\npub mod pallet {\n    use super::*;\n    use frame_support::pallet_prelude::*;\n    use frame_system::pallet_prelude::*;\n\n    #[pallet::config]\n    pub trait Config: frame_system::Config {}\n\n    #[pallet::pallet]\n    pub struct Pallet<T>(_);\n\n    #[pallet::call]\n    impl<T: Config> Pallet<T> {\n        #[pallet::weight(0)]\n        pub fn system_module_example(origin: OriginFor<T>) -> DispatchResult {\n            let _sender = ensure_signed(origin)?;\n            let _extrinsic_count = <system::Pallet<T>>::extrinsic_count();\n            let _parent_hash = <system::Pallet<T>>::parent_hash();\n            Ok(())\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: User Lifecycle State Diagram in Rust\nDESCRIPTION: ASCII diagram showing the possible state transitions for users in the Society module, including bidder, candidate, member and suspended states.\nSOURCE: https://github.com/paritytech/polkadot-sdk/blob/master/substrate/frame/society/README.md#2025-04-21_snippet_0\n\nLANGUAGE: rust\nCODE:\n```\n          +------->  User  <----------+\n          |           +               |\n          |           |               |\n+----------------------------------------------+\n|         |           |               |        |\n|         |           v               |        |\n|         |        Bidder <-----------+        |\n|         |           +               |        |\n|         |           |               +        |\n|         |           v            Suspended   |\n|         |       Candidate +----> Candidate   |\n|         |           +               +        |\n|         |           |               |        |\n|         +           |               |        |\n|   Suspended +------>|               |        |\n|      Member         |               |        |\n|         ^           |               |        |\n|         |           v               |        |\n|         +-------+ Member <----------+        |\n|                                              |\n|                                              |\n+------------------Society---------------------+\n```\n\n----------------------------------------\n\nTITLE: Running Substrate Pallet Benchmark\nDESCRIPTION: Detailed benchmark execution command for a specific pallet (balances) and extrinsic (transfer), configuring execution parameters like steps, repetitions, and output location.\nSOURCE: https://github.com/paritytech/polkadot-sdk/blob/master/substrate/frame/benchmarking/README.md#2025-04-21_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\n./target/production/substrate benchmark pallet \\\n    --chain dev \\\n    --wasm-execution=compiled \\\n    --pallet pallet_balances \\\n    --extrinsic transfer \\\n    --steps 50 \\\n    --repeat 20 \\\n    --output <path> \\\n```\n\n----------------------------------------\n\nTITLE: Basic WebAssembly Contract Structure\nDESCRIPTION: Demonstrates the core structure of a WebAssembly contract module with required exports for deployment and execution, and imports for memory and system functions.\nSOURCE: https://github.com/paritytech/polkadot-sdk/blob/master/substrate/frame/contracts/README.md#2025-04-21_snippet_0\n\nLANGUAGE: wat\nCODE:\n```\n(module\n    ;; Invoked by pallet-contracts when a contract is instantiated.\n    ;; No arguments and empty return type.\n    (func (export \"deploy\"))\n\n    ;; Invoked by pallet-contracts when a contract is called.\n    ;; No arguments and empty return type.\n    (func (export \"call\"))\n\n    ;; If a contract uses memory it must be imported. Memory is optional.\n    ;; The maximum allowed memory size depends on the pallet-contracts configuration.\n    (import \"env\" \"memory\" (memory 1 1))\n\n    ;; This is one of many functions that can be imported and is implemented by pallet-contracts.\n    ;; This function is used to copy the result buffer and flags back to the caller.\n    (import \"seal0\" \"seal_return\" (func $seal_return (param i32 i32 i32))))\n```\n\n----------------------------------------\n\nTITLE: Running Polkadot Parachain with External Relay Chain Node Connection\nDESCRIPTION: Command to run a parachain node connecting to external relay chain nodes via WebSocket RPC. This approach allows specifying primary and backup relay chain RPC endpoints, reducing resource usage as the parachain doesn't need to fully sync the relay chain.\nSOURCE: https://github.com/paritytech/polkadot-sdk/blob/master/cumulus/README.md#2025-04-21_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\npolkadot-parachain \\\n\t--chain parachain-chainspec.json \\\n\t--tmp \\\n\t--relay-chain-rpc-urls \\\n\t\t\"ws://relaychain-rpc-endpoint:9944\" \\\n\t\t\"ws://relaychain-rpc-endpoint-backup:9944\" \\\n\t-- \\\n\t--chain relaychain-chainspec.json\n```\n\n----------------------------------------\n\nTITLE: Implementing a Privileged Function in Rust for Substrate\nDESCRIPTION: This code snippet demonstrates how to create a module with a privileged function that requires Root origin. It includes the basic structure of a Substrate pallet with a single dispatchable function that can only be called with root privileges.\nSOURCE: https://github.com/paritytech/polkadot-sdk/blob/master/substrate/frame/sudo/README.md#2025-04-21_snippet_0\n\nLANGUAGE: rust\nCODE:\n```\n#[frame_support::pallet]\npub mod pallet {\n    use super::*;\n    use frame_support::pallet_prelude::*;\n    use frame_system::pallet_prelude::*;\n\n    #[pallet::pallet]\n    pub struct Pallet<T>(_);\n\n    #[pallet::config]\n    pub trait Config: frame_system::Config {}\n\n    #[pallet::call]\n    impl<T: Config> Pallet<T> {\n        #[pallet::weight(0)]\n        pub fn privileged_function(origin: OriginFor<T>) -> DispatchResult {\n            ensure_root(origin)?;\n\n            // do something...\n\n            Ok(())\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Overseer Signal Types in Rust\nDESCRIPTION: Defines the core signal types that the overseer uses to communicate with subsystems, including active leaves updates, block finalization, and conclusion signals.\nSOURCE: https://github.com/paritytech/polkadot-sdk/blob/master/polkadot/roadmap/implementers-guide/src/types/overseer-protocol.md#2025-04-21_snippet_0\n\nLANGUAGE: rust\nCODE:\n```\nenum OverseerSignal {\n  /// Signal about a change in active leaves.\n  ActiveLeavesUpdate(ActiveLeavesUpdate),\n  /// Signal about a new best finalized block.\n  BlockFinalized(Hash),\n  /// Conclude all operation.\n  Conclude,\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Runtime Interface in Rust\nDESCRIPTION: Example showing how to declare a runtime interface using the sp_runtime_interface attribute macro. The interface defines a function that checks if all bytes in a slice are greater than 125.\nSOURCE: https://github.com/paritytech/polkadot-sdk/blob/master/substrate/primitives/runtime-interface/README.md#2025-04-21_snippet_0\n\nLANGUAGE: rust\nCODE:\n```\n#[sp_runtime_interface::runtime_interface]\ntrait RuntimeInterface {\n    fn some_function(value: &[u8]) -> bool {\n        value.iter().all(|v| *v > 125)\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Example Pallet Implementation\nDESCRIPTION: Complete example of a FRAME pallet implementation using polkadot-sdk-frame with balance transfer functionality\nSOURCE: https://github.com/paritytech/polkadot-sdk/blob/master/umbrella/README.md#2025-04-21_snippet_7\n\nLANGUAGE: rust\nCODE:\n```\nuse polkadot_sdk::polkadot_sdk_frame as frame;\n\n#[frame::pallet(dev_mode)]\npub mod pallet {\n    use super::*;\n    use frame::prelude::*;\n\n    pub type Balance = u128;\n\n    #[pallet::pallet]\n    pub struct Pallet<T>(_);\n\n    #[pallet::config]\n    #[pallet::disable_frame_system_supertrait_check]\n    pub trait Config: frame_system::Config {}\n\n    #[pallet::storage]\n    pub type Balances<T: Config> = StorageMap<_, _, T::AccountId, Balance>;\n\n    impl<T: Config> Pallet<T> {\n        pub fn transfer(\n            from: T::RuntimeOrigin,\n            to: T::AccountId,\n            amount: Balance,\n        ) -> DispatchResult {\n            let sender = ensure_signed(from)?;\n            let sender_balance = Balances::<T>::get(&sender).ok_or(\"NonExistentAccount\")?;\n            let sender_remainder = sender_balance\n                .checked_sub(amount)\n                .ok_or(\"InsufficientBalance\")?;\n\n            Balances::<T>::mutate(to, |b| *b = Some(b.unwrap_or(0) + amount));\n            Balances::<T>::insert(&sender, sender_remainder);\n\n            Ok(())\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Runtime APIs in Rust using Substrate\nDESCRIPTION: This code snippet shows how to implement runtime APIs in the Substrate runtime using the `impl_runtime_apis` macro. This is used to provide the actual implementation of the APIs declared with `decl_runtime_apis`.\nSOURCE: https://github.com/paritytech/polkadot-sdk/blob/master/substrate/primitives/api/README.md#2025-04-21_snippet_1\n\nLANGUAGE: Rust\nCODE:\n```\nimpl_runtime_apis\n```\n\n----------------------------------------\n\nTITLE: Building Polkadot from Source\nDESCRIPTION: These bash commands clone the Polkadot repository, checkout the latest tagged release, and build the project in release mode.\nSOURCE: https://github.com/paritytech/polkadot-sdk/blob/master/polkadot/README.md#2025-04-21_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\ngit checkout <latest tagged release>\ncargo build --release\n```\n\n----------------------------------------\n\nTITLE: Implementing Custom OnRuntimeUpgrade Logic for Executive\nDESCRIPTION: This code snippet shows how to add custom logic that should be called on a runtime upgrade. It defines a CustomOnRuntimeUpgrade struct implementing the OnRuntimeUpgrade trait, and then includes it as an optional generic parameter in the Executive type declaration.\nSOURCE: https://github.com/paritytech/polkadot-sdk/blob/master/substrate/frame/executive/README.md#2025-04-21_snippet_1\n\nLANGUAGE: rust\nCODE:\n```\nstruct CustomOnRuntimeUpgrade;\nimpl frame_support::traits::OnRuntimeUpgrade for CustomOnRuntimeUpgrade {\n    fn on_runtime_upgrade() -> frame_support::weights::Weight {\n        // Do whatever you want.\n        frame_support::weights::Weight::zero()\n    }\n}\n\npub type Executive = executive::Executive<\n    Runtime,\n    Block,\n    Context,\n    Runtime,\n    AllPalletsWithSystem,\n    CustomOnRuntimeUpgrade,\n>;\n```\n\n----------------------------------------\n\nTITLE: Candidate Backing and Validation Process in Polkadot SDK (Mermaid)\nDESCRIPTION: This diagram illustrates the candidate backing and validation process, involving CandidateSelection, CandidateBacking, CandidateValidation, Provisioner, StatementDistribution, and PoVDistribution subsystems. It shows the flow of validating and distributing candidate receipts.\nSOURCE: https://github.com/paritytech/polkadot-sdk/blob/master/polkadot/roadmap/implementers-guide/src/node/subsystems-and-jobs.md#2025-04-21_snippet_3\n\nLANGUAGE: mermaid\nCODE:\n```\nsequenceDiagram\n    participant CS as CandidateSelection\n    participant CB as CandidateBacking\n    participant CV as CandidateValidation\n    participant PV as Provisioner\n    participant SD as StatementDistribution\n    participant PD as PoVDistribution\n\n    CS ->> CB: Second\n    % fn validate_and_make_available\n    CB -->> CV: ValidateFromChainState\n\n    Note over CB,CV: There's some complication in the source, as<br/>candidates are actually validated in a separate task.\n\n    alt valid\n        Note over CB: This is where we transform the CandidateReceipt into a CommittedCandidateReceipt\n        % CandidateBackingJob::sign_import_and_distribute_statement\n        % CandidateBackingJob::import_statement\n        CB ->> PV: ProvisionableData::BackedCandidate\n        % CandidateBackingJob::issue_new_misbehaviors\n        opt if there is misbehavior to report\n            CB ->> PV: ProvisionableData::MisbehaviorReport\n        end\n        % CandidateBackingJob::distribute_signed_statement\n        CB ->> SD: Share\n        % CandidateBackingJob::distribute_pov\n        CB ->> PD: DistributePoV\n    else invalid\n        CB ->> CS: Invalid\n    end\n```\n\n----------------------------------------\n\nTITLE: Implementing CandidateReceipt Structure in Rust\nDESCRIPTION: Defines a compact representation of validation results. This structure is received by validators from collators, along with the Proof of Validity (PoV).\nSOURCE: https://github.com/paritytech/polkadot-sdk/blob/master/polkadot/roadmap/implementers-guide/src/types/candidate.md#2025-04-21_snippet_1\n\nLANGUAGE: rust\nCODE:\n```\nstruct CandidateReceipt {\n\tdescriptor: CandidateDescriptor,\n\tcommitments_hash: Hash,\n}\n```\n\n----------------------------------------\n\nTITLE: Batch Dispatch Function in Polkadot SDK\nDESCRIPTION: Allows any origin to execute multiple calls in a single dispatch operation. Useful for combining proposals, set_code operations, or multiple payouts with single signature verification.\nSOURCE: https://github.com/paritytech/polkadot-sdk/blob/master/substrate/frame/utility/README.md#2025-04-21_snippet_0\n\nLANGUAGE: rust\nCODE:\n```\nbatch\n```\n\n----------------------------------------\n\nTITLE: Executing Basic Benchmark Command in Substrate\nDESCRIPTION: Example of running the root benchmark command in substrate staging-node-cli, showing available subcommands for benchmarking different aspects of the system.\nSOURCE: https://github.com/paritytech/polkadot-sdk/blob/master/substrate/utils/frame/benchmarking-cli/README.md#2025-04-21_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\ncargo run -p staging-node-cli --profile=production --features=runtime-benchmarks -- benchmark\n```\n\n----------------------------------------\n\nTITLE: Configuring Pallet Prerequisites in Rust\nDESCRIPTION: Shows how to include necessary imports and derive pallet configuration traits for a custom pallet implementation.\nSOURCE: https://github.com/paritytech/polkadot-sdk/blob/master/substrate/frame/examples/basic/README.md#2025-04-21_snippet_0\n\nLANGUAGE: rust\nCODE:\n```\nuse <INSERT_CUSTOM_PALLET_NAME>;\n\npub trait Config: <INSERT_CUSTOM_PALLET_NAME>::Config { }\n```\n\n----------------------------------------\n\nTITLE: Connecting to Kusama Canary Network\nDESCRIPTION: This bash command starts a Polkadot node and connects it to the global Kusama canary network.\nSOURCE: https://github.com/paritytech/polkadot-sdk/blob/master/polkadot/README.md#2025-04-21_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\n../target/release/polkadot --chain=kusama\n```\n\n----------------------------------------\n\nTITLE: Implementing PersistedValidationData Structure in Rust\nDESCRIPTION: Defines validation data that needs to be persisted by the availability system. It includes parent head data, relay chain information, HRMP MQC heads, and maximum POV size.\nSOURCE: https://github.com/paritytech/polkadot-sdk/blob/master/polkadot/roadmap/implementers-guide/src/types/candidate.md#2025-04-21_snippet_5\n\nLANGUAGE: rust\nCODE:\n```\nstruct PersistedValidationData {\n\tparent_head: HeadData,\n\trelay_parent_number: BlockNumber,\n\trelay_parent_storage_root: Hash,\n\thrmp_mqc_heads: Vec<(ParaId, Hash)>,\n\tpub max_pov_size: u32,\n}\n```\n\n----------------------------------------\n\nTITLE: Documenting Approval Subsystems in Markdown\nDESCRIPTION: This markdown snippet outlines the structure and purpose of the approval subsystems in the Polkadot SDK. It explains the division between assignment/voting logic and distribution logic, their role in the Approval Protocol, and their interaction with disputes and GRANDPA voting.\nSOURCE: https://github.com/paritytech/polkadot-sdk/blob/master/polkadot/roadmap/implementers-guide/src/node/approval/README.md#2025-04-21_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n# Approval Subsystems\n\nThe approval subsystems implement the node-side of the [Approval Protocol](../../protocol-approval.md).\n\nWe make a divide between the [assignment/voting logic](approval-voting.md) and the [distribution\nlogic](approval-distribution.md) that distributes assignment certifications and approval votes. The logic in the\nassignment and voting also informs the GRANDPA voting rule on how to vote.\n\nThese subsystems are intended to flag issues and begin participating in live disputes. Dispute subsystems also track all\nobserved votes (backing, approval, and dispute-specific) by all validators on all candidates.\n```\n\n----------------------------------------\n\nTITLE: Defining Universal Types in Rust for Polkadot SDK\nDESCRIPTION: This snippet defines basic types used across the network, including RequestId, ProtocolVersion, PeerId, View, and ObservedRole. These types are fundamental for network communication in the Polkadot SDK.\nSOURCE: https://github.com/paritytech/polkadot-sdk/blob/master/polkadot/roadmap/implementers-guide/src/types/network.md#2025-04-21_snippet_0\n\nLANGUAGE: rust\nCODE:\n```\ntype RequestId = u64;\ntype ProtocolVersion = u32;\nstruct PeerId(...); // opaque, unique identifier of a peer.\nstruct View {\n\t// Up to `N` (5?) chain heads.\n\theads: Vec<Hash>,\n\t// The number of the finalized block.\n\tfinalized_number: BlockNumber,\n}\n\nenum ObservedRole {\n\tFull,\n\tLight,\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Randomness Collective Flip in a Substrate Pallet (Rust)\nDESCRIPTION: This code snippet demonstrates how to use the Randomness Collective Flip module in a Substrate pallet. It imports the necessary traits, defines the pallet structure and configuration, and provides an example of generating a random value within a dispatchable call.\nSOURCE: https://github.com/paritytech/polkadot-sdk/blob/master/substrate/frame/insecure-randomness-collective-flip/README.md#2025-04-21_snippet_0\n\nLANGUAGE: rust\nCODE:\n```\nuse frame_support::traits::Randomness;\n\n#[frame_support::pallet]\npub mod pallet {\n    use super::*;\n    use frame_support::pallet_prelude::*;\n    use frame_system::pallet_prelude::*;\n\n    #[pallet::pallet]\n    pub struct Pallet<T>(_);\n\n    #[pallet::config]\n    pub trait Config: frame_system::Config + pallet_insecure_randomness_collective_flip::Config {}\n\n    #[pallet::call]\n    impl<T: Config> Pallet<T> {\n        #[pallet::weight(0)]\n        pub fn random_module_example(origin: OriginFor<T>) -> DispatchResult {\n            let _random_value = pallet_insecure_randomness_collective_flip::Pallet::<T>::random(&b\"my context\"[..]);\n            Ok(())\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Parachain Primitive Type Definitions\nDESCRIPTION: Defines fundamental parachain data types like HeadData, ValidationCode, BlockData, and Id along with their relationships. Includes validation parameters and results structures used in parachain validation.\nSOURCE: https://github.com/paritytech/polkadot-sdk/blob/master/polkadot/roadmap/implementers-guide/src/types/README.md#2025-04-21_snippet_2\n\nLANGUAGE: dot\nCODE:\n```\ndigraph {\n    rankdir = LR;\n    node [shape = plain]\n\n    HeadData [label = <\n        <table>\n            <tr><td border=\"0\" colspan=\"2\" port=\"name\">HeadData</td></tr>\n            <tr><td>0</td><td port=\"0\">Vec&lt;u8&gt;</td></tr>\n        </table>\n    >]\n```\n\n----------------------------------------\n\nTITLE: Retrieving Persisted Validation Data in Rust\nDESCRIPTION: Function that returns persisted validation data for a given parachain ID and occupied core assumption. Returns None if the parachain is not registered or if the assumption is Freed and the para already occupies a core.\nSOURCE: https://github.com/paritytech/polkadot-sdk/blob/master/polkadot/roadmap/implementers-guide/src/runtime-api/persisted-validation-data.md#2025-04-21_snippet_0\n\nLANGUAGE: rust\nCODE:\n```\n/// Returns the persisted validation data for the given para and occupied core assumption.\n///\n/// Returns `None` if either the para is not registered or the assumption is `Freed`\n/// and the para already occupies a core.\nfn persisted_validation_data(at: Block, ParaId, OccupiedCoreAssumption) -> Option<PersistedValidationData>;\n```\n\n----------------------------------------\n\nTITLE: Describing Ranked Collective System in Markdown\nDESCRIPTION: This markdown snippet outlines the features and functionality of a ranked collective system. It explains the membership structure, voting power distribution, and performance characteristics of various operations within the system.\nSOURCE: https://github.com/paritytech/polkadot-sdk/blob/master/substrate/frame/ranked-collective/README.md#2025-04-21_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n# Ranked collective system\n\nThis is a membership pallet providing a `Tally` implementation ready for use with polling\nsystems such as the Referenda pallet. Members each have a rank, with zero being the lowest.\nThere is no complexity limitation on either the number of members at a rank or the number of\nranks in the system thus allowing potentially public membership. A member of at least a given\nrank can be selected at random in O(1) time, allowing for various games to constructed using\nthis as a primitive. Members may only be promoted and demoted by one rank at a time, however\nall operations (save one) are O(1) in complexity. The only operation which is not O(1) is the\n`remove_member` since they must be removed from all ranks from the present down to zero.\n\nDifferent ranks have different voting power, and are able to vote in different polls. In general\nrank privileges are cumulative. Higher ranks are able to vote in any polls open to lower ranks.\nSimilarly, higher ranks always have at least as much voting power in any given poll as lower\nranks.\n\nTwo `Config` trait items control these \"rank privileges\": `MinRankOfClass` and `VoteWeight`.\nThe first controls which ranks are allowed to vote on a particular class of poll. The second\ncontrols the weight of a vote given the voters rank compared to the minimum rank of the poll.\n\nAn origin control, `EnsureRank`, ensures that the origin is a member of the collective of at\nleast a particular rank.\n```\n\n----------------------------------------\n\nTITLE: Describing Transaction Fee Components in Markdown\nDESCRIPTION: This snippet outlines the three main components of transaction fees: weight fee, length fee, and tip. It explains how each component contributes to the overall transaction cost and priority.\nSOURCE: https://github.com/paritytech/polkadot-sdk/blob/master/substrate/frame/transaction-payment/README.md#2025-04-21_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n  - _weight fee_: A fee proportional to amount of weight a transaction consumes.\n  - _length fee_: A fee proportional to the encoded length of the transaction.\n  - _tip_: An optional tip. Tip increases the priority of the transaction, giving it a higher\n    chance to be included by the transaction queue.\n```\n\n----------------------------------------\n\nTITLE: Alliance Pallet Interface Documentation in Markdown\nDESCRIPTION: Comprehensive documentation of the Alliance Pallet's interface including member types, terminology, and all dispatchable functions organized by user type and permission level\nSOURCE: https://github.com/paritytech/polkadot-sdk/blob/master/substrate/frame/alliance/README.md#2025-04-21_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n# Alliance Pallet\n\nThe Alliance Pallet provides a collective that curates a list of accounts and URLs, deemed by\nthe voting members to be unscrupulous actors. The Alliance\n\n- provides a set of ethics against bad behavior, and\n- provides recognition and influence for those teams that contribute something back to the\n  ecosystem.\n\n## Overview\n\nThe network initializes the Alliance via a Root call. After that, anyone with an approved\nidentity and website can join as an Ally. The `MembershipManager` origin can elevate Allies to\nFellows, giving them voting rights within the Alliance.\n\nVoting members of the Alliance maintain a list of accounts and websites. Members can also vote\nto update the Alliance's rule and make announcements.\n\n### Terminology\n\n- Rule: The IPFS CID (hash) of the Alliance rules for the community to read and the Alliance\n  members to enforce. Similar to a Charter or Code of Conduct.\n- Announcement: An IPFS CID of some content that the Alliance want to announce.\n- Member: An account that is already in the group of the Alliance, including three types:\n  Fellow, or Ally. A member can also be kicked by the `MembershipManager` origin\n  or retire by itself.\n- Fellow: An account who is elevated from Ally by other Fellows.\n- Ally: An account who would like to join the Alliance. To become a voting member (Fellow), it\n  will need approval from the `MembershipManager` origin. Any account can join as an Ally either\n  by placing a deposit or by nomination from a voting member.\n- Unscrupulous List: A list of bad websites and addresses; items can be added or removed by\n  voting members.\n\n## Interface\n\n### Dispatchable Functions\n\n#### For General Users\n\n- `join_alliance` - Join the Alliance as an Ally. This requires a slashable deposit.\n\n#### For Members (All)\n\n- `give_retirement_notice` - Give a retirement notice and start a retirement period required to\n  pass in order to retire.\n- `retire` - Retire from the Alliance and release the caller's deposit.\n\n#### For Voting Members\n\n- `propose` - Propose a motion.\n- `vote` - Vote on a motion.\n- `close` - Close a motion with enough votes or that has expired.\n- `set_rule` - Initialize or update the Alliance's rule by IPFS CID.\n- `announce` - Make announcement by IPFS CID.\n- `nominate_ally` - Nominate a non-member to become an Ally, without deposit.\n- `elevate_ally` - Approve an ally to become a Fellow.\n- `kick_member` - Kick a member and slash its deposit.\n- `add_unscrupulous_items` - Add some items, either accounts or websites, to the list of\n  unscrupulous items.\n- `remove_unscrupulous_items` - Remove some items from the list of unscrupulous items.\n- `abdicate_fellow_status` - Abdicate one's voting rights, demoting themselves to Ally.\n\n#### Root Calls\n\n- `init_members` - Initialize the Alliance, onboard fellows and allies.\n- `disband` - Disband the Alliance, remove all active members and unreserve deposits.\n```\n\n----------------------------------------\n\nTITLE: Example Gateway Call for Ethereum to Polkadot Transfer\nDESCRIPTION: Example of calling the Gateway's send function to initiate a transfer from Ethereum to Polkadot, specifying destination chain, beneficiary, tokens, and reward.\nSOURCE: https://github.com/paritytech/polkadot-sdk/blob/master/bridges/snowbridge/docs/v2.md#2025-04-21_snippet_4\n\nLANGUAGE: solidity\nCODE:\n```\nsend(\n    3022, // KILT Para Id\n    Address32(0x0000....),\n    [(ReserveWithdraw, KLT, 100)],\n    10, // WETH\n)\n```\n\n----------------------------------------\n\nTITLE: Node Service Implementation in Rust\nDESCRIPTION: References the service.rs file which contains the core node implementation and consensus configuration. This file handles the node's primary operational logic and consensus-related settings.\nSOURCE: https://github.com/paritytech/polkadot-sdk/blob/master/templates/parachain/node/README.md#2025-04-21_snippet_1\n\nLANGUAGE: rust\nCODE:\n```\nservice.rs\n```\n\n----------------------------------------\n\nTITLE: Core State and Event Type Definitions\nDESCRIPTION: Defines core Polkadot types including OccupiedCore, ScheduledCore, CoreState, and CandidateEvent structures with their relationships. Shows type hierarchies and connections between different components of the parachain system.\nSOURCE: https://github.com/paritytech/polkadot-sdk/blob/master/polkadot/roadmap/implementers-guide/src/types/README.md#2025-04-21_snippet_1\n\nLANGUAGE: dot\nCODE:\n```\nOccupiedCore:next_up_on_available -> ScheduledCore:name\n    OccupiedCore:next_up_on_time_out -> ScheduledCore:name\n    OccupiedCore:group_responsible -> GroupIndex\n    OccupiedCore:candidate_hash -> CandidateHash\n    OccupiedCore:candidate_descriptor -> CandidateDescriptor:name\n```\n\n----------------------------------------\n\nTITLE: Declaring Custom Runtime APIs in Rust using Substrate\nDESCRIPTION: This snippet demonstrates how to declare custom runtime APIs using the `decl_runtime_apis` macro provided by Substrate. This allows users to define their own APIs for communication between the node and runtime.\nSOURCE: https://github.com/paritytech/polkadot-sdk/blob/master/substrate/primitives/api/README.md#2025-04-21_snippet_0\n\nLANGUAGE: Rust\nCODE:\n```\ndecl_runtime_apis\n```\n\n----------------------------------------\n\nTITLE: Implementing Account Locking with LockableCurrency\nDESCRIPTION: Example demonstrating how to use LockableCurrency trait to implement account fund locking in the Staking module. Shows configuration trait definition and ledger update function.\nSOURCE: https://github.com/paritytech/polkadot-sdk/blob/master/substrate/frame/balances/README.md#2025-04-21_snippet_1\n\nLANGUAGE: rust\nCODE:\n```\nuse frame_support::traits::{WithdrawReasons, LockableCurrency};\nuse sp_runtime::traits::Bounded;\npub trait Config: frame_system::Config {\n\ttype Currency: LockableCurrency<Self::AccountId, Moment=frame_system::pallet_prelude::BlockNumberFor<Self>>;\n}\n\nfn update_ledger<T: Config>(\n\tcontroller: &T::AccountId,\n\tledger: &StakingLedger<T>\n) {\n\tT::Currency::set_lock(\n\t\tSTAKING_ID,\n\t\t&ledger.stash,\n\t\tledger.total,\n\t\tWithdrawReasons::all()\n\t);\n\t// <Ledger<T>>::insert(controller, ledger); // Commented out as we don't have access to Staking's storage here.\n}\n```\n\n----------------------------------------\n\nTITLE: Contract Host Function Tracing Command\nDESCRIPTION: Command to enable detailed tracing of contract host function calls, showing function arguments and results for debugging purposes.\nSOURCE: https://github.com/paritytech/polkadot-sdk/blob/master/substrate/frame/contracts/README.md#2025-04-21_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\ncargo run --release -- --dev -lerror,runtime::contracts::strace=trace,runtime::contracts=debug\n```\n\n----------------------------------------\n\nTITLE: Markdown Documentation for Asset Conversion Transaction Payment\nDESCRIPTION: Documentation explaining the purpose, overview, and integration details of the asset conversion transaction payment pallet. The pallet extends transaction functionality to support fee payment in non-native assets through asset conversion.\nSOURCE: https://github.com/paritytech/polkadot-sdk/blob/master/substrate/frame/transaction-payment/asset-conversion-tx-payment/README.md#2025-04-21_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n# pallet-asset-conversion-tx-payment\n\n## Asset Conversion Transaction Payment Pallet\n\nThis pallet allows runtimes that include it to pay for transactions in assets other than the\nnative token of the chain.\n\n### Overview\nIt does this by extending transactions to include an optional `AssetId` that specifies the asset\nto be used for payment (defaulting to the native token on `None`). It expects an\n[`OnChargeAssetTransaction`] implementation analogously to [`pallet-transaction-payment`]. The\nincluded [`AssetConversionAdapter`] (implementing [`OnChargeAssetTransaction`]) determines the fee\namount by converting the fee calculated by [`pallet-transaction-payment`] into the desired\nasset.\n\n### Integration\nThis pallet wraps FRAME's transaction payment pallet and functions as a replacement. This means\nyou should include both pallets in your `construct_runtime` macro, but only include this\npallet's [`TransactionExtension`] ([`ChargeAssetTxPayment`]).\n\nLicense: Apache-2.0\n```\n\n----------------------------------------\n\nTITLE: Configuration Management Functions in Rust\nDESCRIPTION: Implements core configuration management functionality including consistency checking, configuration retrieval, and update scheduling. The schedule_config_update function allows for deferred configuration updates that take effect after two session changes.\nSOURCE: https://github.com/paritytech/polkadot-sdk/blob/master/polkadot/roadmap/implementers-guide/src/runtime/configuration.md#2025-04-21_snippet_1\n\nLANGUAGE: rust\nCODE:\n```\nenum InconsistentError {\n  // ...\n}\n\nimpl HostConfiguration {\n  fn check_consistency(&self) -> Result<(), InconsistentError> { /* ... */ }\n}\n\n/// Get the host configuration.\npub fn configuration() -> HostConfiguration {\n  Configuration::get()\n}\n\n/// Schedules updating the host configuration. The update is given by the `updater` closure. The\n/// closure takes the current version of the configuration and returns the new version.\n/// Returns an `Err` if the closure returns a broken configuration. However, there are a couple of\n/// exceptions:\n///\n/// - if the configuration that was passed in the closure is already broken, then it will pass the\n/// update: you cannot break something that is already broken.\n/// - If the `BypassConsistencyCheck` flag is set, then the checks will be skipped.\n///\n/// The changes made by this function will always be scheduled at session X, where X is the current session index + 2.\n/// If there is already a pending update for X, then the closure will receive the already pending configuration for\n/// session X.\n///\n/// If there is already a pending update for the current session index + 1, then it won't be touched. Otherwise,\n/// that would violate the promise of this function that changes will be applied on the second session change (cur + 2).\nfn schedule_config_update(updater: impl FnOnce(&mut HostConfiguration<BlockNumberFor<T>>)) -> DispatchResult\n```\n\n----------------------------------------\n\nTITLE: Incoming Message Handling in Statement Distribution\nDESCRIPTION: Lists the types of incoming messages handled by the Statement Distribution subsystem, including ActiveLeaves notifications, Share requests for locally-originating statements, Backed notifications for candidates that received enough validity votes, and NetworkBridgeUpdate messages.\nSOURCE: https://github.com/paritytech/polkadot-sdk/blob/master/polkadot/roadmap/implementers-guide/src/node/backing/statement-distribution.md#2025-04-21_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n- `ActiveLeaves`\n  - Notification of a change in the set of active leaves.\n- `StatementDistributionMessage::Share`\n  - Notification of a locally-originating statement. That is, this statement comes from our node and should be\n    distributed to other nodes.\n  - Sent by the Backing Subsystem after it successfully imports a locally-originating statement.\n- `StatementDistributionMessage::Backed`\n  - Notification of a candidate being backed (received enough validity votes from the backing group).\n  - Sent by the Backing Subsystem after it successfully imports a statement for the first time and after sending\n    ~Share~.\n- `StatementDistributionMessage::NetworkBridgeUpdate`\n  - See next section.\n```\n\n----------------------------------------\n\nTITLE: Implementing I'm Online Module in Rust\nDESCRIPTION: This code snippet demonstrates how to implement the I'm Online module in a custom pallet. It shows the structure definition, configuration trait, and a call to check if a validator is online.\nSOURCE: https://github.com/paritytech/polkadot-sdk/blob/master/substrate/frame/im-online/README.md#2025-04-21_snippet_0\n\nLANGUAGE: rust\nCODE:\n```\nuse pallet_im_online::{self as im_online};\n\n#[frame_support::pallet]\npub mod pallet {\n    use super::*;\n    use frame_support::pallet_prelude::*;\n    use frame_system::pallet_prelude::*;\n\n    #[pallet::pallet]\n    pub struct Pallet<T>(_);\n\n    #[pallet::config]\n    pub trait Config: frame_system::Config + im_online::Config {}\n\n    #[pallet::call]\n    impl<T: Config> Pallet<T> {\n        #[pallet::weight(0)]\n        pub fn is_online(origin: OriginFor<T>, authority_index: u32) -> DispatchResult {\n            let _sender = ensure_signed(origin)?;\n            let _is_online = <im_online::Pallet<T>>::is_online(authority_index);\n            Ok(())\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Child Bounty Protocol Functions in Rust\nDESCRIPTION: Core dispatchable functions for managing child bounties in the Polkadot SDK. These functions handle the complete lifecycle of a child bounty including creation, curator assignment, acceptance, award distribution, and closure.\nSOURCE: https://github.com/paritytech/polkadot-sdk/blob/master/substrate/frame/child-bounties/README.md#2025-04-21_snippet_0\n\nLANGUAGE: rust\nCODE:\n```\n- add_child_bounty - Add a child bounty for a parent bounty to for dividing the work in\\n  smaller tasks.\\n- propose_curator - Assign an account to a child bounty as candidate curator.\\n- accept_curator - Accept a child bounty assignment from the parent bounty curator,\\n  setting a curator deposit.\\n- award_child_bounty - Close and pay out the specified amount for the completed work.\\n- claim_child_bounty - Claim a specific child bounty amount from the payout address.\\n- unassign_curator - Unassign an accepted curator from a specific child bounty.\\n- close_child_bounty - Cancel the child bounty for a specific treasury amount\\n  and close the bounty.\n```\n\n----------------------------------------\n\nTITLE: Deriving Default Testing Configs in Rust for Substrate Pallet\nDESCRIPTION: This code snippet demonstrates the use of Rust attributes for deriving default testing configurations in a Substrate pallet. It uses `#[derive_impl]` and `#[pallet::config(with_default)]` to simplify the process of creating test environments for the pallet.\nSOURCE: https://github.com/paritytech/polkadot-sdk/blob/master/substrate/frame/examples/default-config/README.md#2025-04-21_snippet_0\n\nLANGUAGE: Rust\nCODE:\n```\n#[derive_impl]\n#[pallet::config(with_default)]\n```\n\n----------------------------------------\n\nTITLE: Visualizing Polkadot Block Approval Process\nDESCRIPTION: This diagram illustrates the happy path of a block from candidate state to approved state in the Polkadot network. It shows the interaction between validators, collators, and the relay chain.\nSOURCE: https://github.com/paritytech/polkadot-sdk/blob/master/polkadot/roadmap/implementers-guide/src/protocol-overview.md#2025-04-21_snippet_1\n\nLANGUAGE: dot\nCODE:\n```\ndigraph {\n\tsubgraph cluster_0 {\n\t\tlabel=\"Validators\"\n\t\tv1 [label=<\n\t\t\t<b>Validator 1</b>\n\t\t\t<br/>\n\t\t\t<font point-size=\"10\">\n\t\t\t\t(parachain assignment)\n\t\t\t</font>\n\t\t>]\n\t\tv2 [label=\"Validator 2\"]\n\t\tv3 [label=\"Validator 3\"]\n\t\tb [label=\"(2,3) Seconded\nand Validated\"]\n\n\t\tv1 -> b\n\t\tv2 -> b\n\t\tv3 -> b\n\t\tv1 -> b [style=dashed arrowhead=none]\n\t}\n\n\tv4 [label=<\n\t\t<b>Validator 4</b> (relay chain)\n\t\t<br/>\n\t\t<font point-size=\"10\">\n\t\t\t(selected by BABE)\n\t\t</font>\n\t>]\n\n\tcol [label=\"Collator\"]\n\tpa [label=\"(5) Relay Block (Pending Availability)\", shape=box]\n\tpb [label=\"Parablock\", shape=box]\n\trc [label=\"Relay Chain Validators\"]\n\n\tsubgraph cluster_approval {\n\t\tlabel=<\n\t\t\tSecondary Checkers\n\t\t\t<br/>\n\t\t\t(subset of all)\n\t\t>\n\t\tlabeljust=l\n\t\tstyle=filled\n\t\tcolor=lightgrey\n\t\tnode [style=filled color=white]\n\n\t\ta5 [label=\"Validator 5\"]\n\t\ta6 [label=\"Validator 6\"]\n\t\ta7 [label=\"Validator 7\"]\n\t}\n\n\tb -> v4 [label=\"(4) Backed\"]\n\tcol -> v1 [label=\"(1) Candidate\"]\n\tv4 -> pa\n\tpa -> pb [label=\"(6) a few blocks later...\" arrowhead=none]\n\tpb -> a5\n\tpb -> a6\n\tpb -> a7\n\n\ta5 -> rc [label=\"(7) Approved\"]\n\ta6 -> rc [label=\"(7) Approved\"]\n\ta7 -> rc [label=\"(7) Approved\"]\n}\n```\n\n----------------------------------------\n\nTITLE: Atomic Swap Module Interface Functions in Rust\nDESCRIPTION: Core dispatchable functions for the atomic swap module: create_swap for initiating a new swap, claim_swap for the recipient to approve and claim funds, and cancel_swap for the sender to cancel after timeout.\nSOURCE: https://github.com/paritytech/polkadot-sdk/blob/master/substrate/frame/atomic-swap/README.md#2025-04-21_snippet_0\n\nLANGUAGE: rust\nCODE:\n```\n- create_swap - called by a sender to register a new atomic swap\n- claim_swap - called by the target to approve a swap\n- cancel_swap - may be called by a sender after a specified duration\n```\n\n----------------------------------------\n\nTITLE: Implementing Timestamp Module Integration in Rust\nDESCRIPTION: Example showing how to integrate and use the Timestamp module in a custom FRAME pallet. The code demonstrates importing the timestamp module, configuring the pallet, and implementing a function to get the current timestamp.\nSOURCE: https://github.com/paritytech/polkadot-sdk/blob/master/substrate/frame/timestamp/README.md#2025-04-21_snippet_0\n\nLANGUAGE: rust\nCODE:\n```\nuse pallet_timestamp::{self as timestamp};\n\n#[frame_support::pallet]\npub mod pallet {\n    use super::*;\n    use frame_support::pallet_prelude::*;\n    use frame_system::pallet_prelude::*;\n\n    #[pallet::pallet]\n    pub struct Pallet<T>(_);\n\n    #[pallet::config]\n    pub trait Config: frame_system::Config + timestamp::Config {}\n\n    #[pallet::call]\n    impl<T: Config> Pallet<T> {\n        #[pallet::weight(0)]\n        pub fn get_time(origin: OriginFor<T>) -> DispatchResult {\n            let _sender = ensure_signed(origin)?;\n            let _now = <timestamp::Pallet<T>>::get();\n            Ok(())\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Running Omni Node\nDESCRIPTION: Command to start Omni Node in development mode with manual block sealing\nSOURCE: https://github.com/paritytech/polkadot-sdk/blob/master/templates/parachain/README.md#2025-04-21_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\npolkadot-omni-node --chain <path/to/chain_spec.json> --dev --dev-block-time 1000\n```\n\n----------------------------------------\n\nTITLE: Implementing ScrapedOnChainVotes Structure in Rust\nDESCRIPTION: Defines a structure for collecting on-chain votes and dispute conclusions to be passed to the off-chain DisputesCoordinator.\nSOURCE: https://github.com/paritytech/polkadot-sdk/blob/master/polkadot/roadmap/implementers-guide/src/types/disputes.md#2025-04-21_snippet_6\n\nLANGUAGE: rust\nCODE:\n```\nstruct ScrapedOnChainVotes {\n    /// The session index at which the block was included.\n    session: SessionIndex,\n    /// The backing and seconding validity attestations for all candidates, providing the full candidate receipt.\n    backing_validators_per_candidate: Vec<(CandidateReceipt<H>, Vec<(ValidatorIndex, ValidityAttestation)>)>\n    /// Set of concluded disputes that were recorded\n    /// on chain within the inherent.\n    disputes: MultiDisputeStatementSet,\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing CandidateCommitments Structure in Rust\nDESCRIPTION: Defines commitments made in a CandidateReceipt, including messages to other paras, upward messages, new validation code, head data, and processing information.\nSOURCE: https://github.com/paritytech/polkadot-sdk/blob/master/polkadot/roadmap/implementers-guide/src/types/candidate.md#2025-04-21_snippet_7\n\nLANGUAGE: rust\nCODE:\n```\nstruct CandidateCommitments {\n\thorizontal_messages: Vec<OutboundHrmpMessage>,\n\tupward_messages: Vec<UpwardMessage>,\n\tnew_validation_code: Option<ValidationCode>,\n\thead_data: HeadData,\n\tprocessed_downward_messages: u32,\n\thrmp_watermark: BlockNumber,\n}\n```\n\n----------------------------------------\n\nTITLE: Collation Loop Process Flow\nDESCRIPTION: The main event loop process for a collator node showing the sequential steps from receiving a new relay chain block to submitting a new parachain block to validators.\nSOURCE: https://github.com/paritytech/polkadot-sdk/blob/master/polkadot/roadmap/parachains.md#2025-04-21_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n 1. new relay chain block B\n 2. sync new parachain head P w.r.t. B\n 3. build new child of P\n 4. submit to validators\n```\n\n----------------------------------------\n\nTITLE: Defining SessionInfo Struct in Rust for Polkadot SDK\nDESCRIPTION: This code snippet defines the SessionInfo struct, which contains information about validators, their keys, and various session parameters. It includes fields for validator IDs, discovery keys, assignment keys, validator groups, and other session-specific data.\nSOURCE: https://github.com/paritytech/polkadot-sdk/blob/master/polkadot/roadmap/implementers-guide/src/runtime/session_info.md#2025-04-21_snippet_0\n\nLANGUAGE: rust\nCODE:\n```\nstruct SessionInfo {\n    validators: Vec<ValidatorId>,\n    #[cfg_attr(feature = \"std\", ignore_malloc_size_of = \"outside type\")]\n    discovery_keys: Vec<AuthorityDiscoveryId>,\n    assignment_keys: Vec<AssignmentId>,\n    validator_groups: Vec<Vec<ValidatorIndex>>,\n    n_cores: u32,\n    zeroth_delay_tranche_width: u32,\n    relay_vrf_modulo_samples: u32,\n    n_delay_tranches: u32,\n    no_show_slots: u32,\n    needed_approvals: u32,\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Misbehavior Report Types in Rust\nDESCRIPTION: Defines types for tracking validator misbehavior including double voting, unauthorized statements, and double signing. These structures help identify and report validator misconduct in the network.\nSOURCE: https://github.com/paritytech/polkadot-sdk/blob/master/polkadot/roadmap/implementers-guide/src/types/overseer-protocol.md#2025-04-21_snippet_18\n\nLANGUAGE: rust\nCODE:\n```\npub type Misbehavior = generic::Misbehavior<\n    CommittedCandidateReceipt,\n    CandidateHash,\n    ValidatorIndex,\n    ValidatorSignature,\n>;\n\nmod generic {\n    /// Misbehavior: voting more than one way on candidate validity.\n    ///\n    /// Since there are three possible ways to vote, a double vote is possible in\n    /// three possible combinations (unordered)\n    pub enum ValidityDoubleVote<Candidate, Digest, Signature> {\n        /// Implicit vote by issuing and explicitly voting validity.\n        IssuedAndValidity((Candidate, Signature), (Digest, Signature)),\n        /// Implicit vote by issuing and explicitly voting invalidity\n        IssuedAndInvalidity((Candidate, Signature), (Digest, Signature)),\n        /// Direct votes for validity and invalidity\n        ValidityAndInvalidity(Candidate, Signature, Signature),\n    }\n\n    /// Misbehavior: multiple signatures on same statement.\n    pub enum DoubleSign<Candidate, Digest, Signature> {\n        /// On candidate.\n        Candidate(Candidate, Signature, Signature),\n        /// On validity.\n        Validity(Digest, Signature, Signature),\n        /// On invalidity.\n        Invalidity(Digest, Signature, Signature),\n    }\n\n    /// Misbehavior: submitted statement for wrong group.\n    pub struct UnauthorizedStatement<Candidate, Digest, AuthorityId, Signature> {\n        /// A signed statement which was submitted without proper authority.\n        pub statement: SignedStatement<Candidate, Digest, AuthorityId, Signature>,\n    }\n\n    pub enum Misbehavior<Candidate, Digest, AuthorityId, Signature> {\n        /// Voted invalid and valid on validity.\n        ValidityDoubleVote(ValidityDoubleVote<Candidate, Digest, Signature>),\n        /// Submitted a message that was unauthorized.\n        UnauthorizedStatement(UnauthorizedStatement<Candidate, Digest, AuthorityId, Signature>),\n        /// Submitted two valid signatures for the same message.\n        DoubleSign(DoubleSign<Candidate, Digest, Signature>),\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Session Change Notification Structure in Rust\nDESCRIPTION: Defines a structure that contains information needed during session changes, including validator sets, configuration states, random seed, and session index. This structure is used by the initializer module to notify other modules about session changes.\nSOURCE: https://github.com/paritytech/polkadot-sdk/blob/master/polkadot/roadmap/implementers-guide/src/runtime/README.md#2025-04-21_snippet_0\n\nLANGUAGE: rust\nCODE:\n```\nstruct SessionChangeNotification {\n validators: Vec<ValidatorId>,\n queued: Vec<ValidatorId>,\n prev_config: HostConfiguration,\n new_config: HostConfiguration,\n random_seed: [u8; 32],\n session_index: SessionIndex,\n}\n```\n\n----------------------------------------\n\nTITLE: Defining ParaInherentData Structure in Rust\nDESCRIPTION: Defines the ParaInherentData structure that contains four essential components for parachain consensus advancement: bitfields for availability, backed candidates, dispute statements, and the parent header.\nSOURCE: https://github.com/paritytech/polkadot-sdk/blob/master/polkadot/roadmap/implementers-guide/src/types/runtime.md#2025-04-21_snippet_0\n\nLANGUAGE: rust\nCODE:\n```\nstruct ParaInherentData {\n\tbitfields: Bitfields,\n\tbacked_candidates: BackedCandidates,\n\tdispute_statements: MultiDisputeStatementSet,\n\tparent_header: Header\n}\n```\n\n----------------------------------------\n\nTITLE: Issuing Approval Vote in Polkadot\nDESCRIPTION: This section outlines the process of issuing an approval vote. It includes steps for fetching necessary entries, importing the checked approval vote, and either distributing the vote immediately or queueing it for delayed distribution.\nSOURCE: https://github.com/paritytech/polkadot-sdk/blob/master/polkadot/roadmap/implementers-guide/src/node/approval/approval-voting.md#2025-04-21_snippet_12\n\nLANGUAGE: markdown\nCODE:\n```\n#### Issue Approval Vote\n  * Fetch the block entry and candidate entry. Ignore if `None` - we've probably just lost a race with finality.\n  * [Import the checked approval vote](#import-checked-approval). It is \"checked\" as we've just issued the signature.\n  * IF `MAX_APPROVAL_COALESCE_COUNT`  candidates are in the waiting queue\n    * Construct a `SignedApprovalVote` with the validator index for the session and all candidate hashes in the waiting queue.\n    * Construct a `IndirectSignedApprovalVote` using the information about the vote.\n    * Dispatch `ApprovalDistributionMessage::DistributeApproval`.\n  * ELSE\n    * Queue the candidate in the `BlockEntry::candidates_pending_signature`\n    * Arm a per BlockEntry timer with latest tick we can send the vote.\n```\n\n----------------------------------------\n\nTITLE: Visualizing Vertical Message Passing (VMP) in Polkadot with DOT\nDESCRIPTION: A DOT diagram illustrating Vertical Message Passing between the Relay Chain and a Parachain. Shows Downward Message Passing (DMP) from the relay chain to the parachain and Upward Message Passing (UMP) from the parachain to the relay chain.\nSOURCE: https://github.com/paritytech/polkadot-sdk/blob/master/polkadot/roadmap/implementers-guide/src/messaging.md#2025-04-21_snippet_0\n\nLANGUAGE: dot\nCODE:\n```\ndigraph {\n    rc [shape=Mdiamond label=\"Relay Chain\"];\n    p1 [shape=box label = \"Parachain\"];\n\n    rc -> p1 [label=\"DMP\"];\n    p1 -> rc [label=\"UMP\"];\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Backed Candidate Structures in Rust\nDESCRIPTION: Defines structures for backed candidates that include the candidate receipt, validity votes, and validator indices. Used for submitting backed candidates to the relay chain.\nSOURCE: https://github.com/paritytech/polkadot-sdk/blob/master/polkadot/roadmap/implementers-guide/src/types/backing.md#2025-04-21_snippet_4\n\nLANGUAGE: rust\nCODE:\n```\nstruct BackedCandidate {\n  candidate: CommittedCandidateReceipt,\n  validity_votes: Vec<ValidityAttestation>,\n  // the indices of validators who signed the candidate within the group. There is no need to include\n  // bit for any validators who are not in the group, so this is more compact.\n  // The number of bits is the number of validators in the group.\n  //\n  // the group should be apparent from context.\n  validator_indices: BitVec,\n}\n\nstruct BackedCandidates(Vec<BackedCandidate>); // sorted by para-id.\n```\n\n----------------------------------------\n\nTITLE: Submitting Ethereum Message Proofs in Rust\nDESCRIPTION: Primary extrinsic that allows relayers to submit proof of Gateway events from Ethereum. The function takes an origin and an EventProof, verifies the proof, and processes the message through the system.\nSOURCE: https://github.com/paritytech/polkadot-sdk/blob/master/bridges/snowbridge/pallets/inbound-queue-v2/README.md#2025-04-21_snippet_0\n\nLANGUAGE: rust\nCODE:\n```\npub fn submit(\n    origin: OriginFor<T>,\n    event: Box<EventProof>,\n) -> DispatchResult\n```\n\n----------------------------------------\n\nTITLE: Top-Level Pallet Documentation Template for Rust\nDESCRIPTION: Template for documenting the top-level pallet in lib.rs. Includes sections for overview, API reference, examples, and implementation details, organized from most general to most specific information.\nSOURCE: https://github.com/paritytech/polkadot-sdk/blob/master/docs/contributor/DOCUMENTATION_GUIDELINES.md#2025-04-21_snippet_4\n\nLANGUAGE: rust\nCODE:\n```\n//! # <Pallet Name>\n//!\n//! <single-liner about the pallet>.\n//!\n//! ## Pallet API\n//!\n//! <Reminder: inside the [`pallet`] module, a template that leads the reader to the relevant items is auto-generated. There is no need to repeat\n//! things like \"See Config trait for ...\", which are generated inside [`pallet`] here anyways. You can use the line below as-is:>\n//!\n//! See the [`pallet`] module for more information about the interfaces this pallet exposes, including its\n//! configuration trait, dispatchables, storage items, events and errors.\n//!\n//! ## Overview\n//!\n//! <should be high-level details that are relevant to the most broad audience>\n//!\n//! <The audience here is potentially non-coders who just want to know what this pallet does, not how it does it>\n//!\n//! <potentially a few paragraphs, focus on what external folks should know about the pallet>\n//!\n//! ### Example\n//!\n//! <Your pallet must have a few tests that cover important user journeys. Use https://crates.io/crates/docify to\n//! reuse these as examples.>\n//!\n//! <The audience of this is those who want to know how this pallet works, to the extent of being able to build\n//! something on top of it, like a DApp or another pallet. In some cases, you might want to add an example of how to\n//! use this pallet in other pallets.>\n//!\n//! This section can most often be left as-is.\n//!\n//! ## Low Level / Implementation Details\n//!\n//! <The format of this section is up to you, but we suggest the Design-oriented approach that follows>\n//!\n//! <The audience of this would be your future self, or anyone who wants to gain a deep understanding of how the pallet\n//! works so that they can eventually propose optimizations to it>\n//!\n//! ### Design Goals (optional)\n//!\n//! <Describe your goals with the pallet design.>\n//!\n//! ### Design (optional)\n//!\n//! <Describe how you've reached those goals. This should describe the storage layout of your pallet and what was your\n//! approach in designing it that way.>\n//!\n//! ### Terminology (optional)\n//!\n//! <Optionally, explain any non-obvious terminology here. You can link to it if you want to use the terminology further\n//! up>\n```\n\n----------------------------------------\n\nTITLE: Implementing Recovery Strategy Trait in Rust\nDESCRIPTION: Defines a common trait for recovery strategies that can be used to recover available data. Each strategy must implement the run method, which contains the core recovery logic, and provide metadata about the strategy.\nSOURCE: https://github.com/paritytech/polkadot-sdk/blob/master/polkadot/roadmap/implementers-guide/src/node/availability/availability-recovery.md#2025-04-21_snippet_1\n\nLANGUAGE: rust\nCODE:\n```\n#[async_trait::async_trait]\n/// Common trait for runnable recovery strategies.\npub trait RecoveryStrategy<Sender: overseer::AvailabilityRecoverySenderTrait>: Send {\n\t/// Main entry point of the strategy.\n\tasync fn run(\n\t\tmut self: Box<Self>,\n\t\tstate: &mut task::State,\n\t\tsender: &mut Sender,\n\t\tcommon_params: &RecoveryParams,\n\t) -> Result<AvailableData, RecoveryError>;\n\n\t/// Return the name of the strategy for logging purposes.\n\tfn display_name(&self) -> &'static str;\n\n\t/// Return the strategy type for use as a metric label.\n\tfn strategy_type(&self) -> &'static str;\n}\n```\n\n----------------------------------------\n\nTITLE: Generating a Chain Spec for Omni Node\nDESCRIPTION: Command to create a chain specification file using the chain-spec-builder tool, including parachain-specific parameters like relay chain ID and para ID.\nSOURCE: https://github.com/paritytech/polkadot-sdk/blob/master/cumulus/polkadot-omni-node/README.md#2025-04-21_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nchain-spec-builder create --relay-chain <relay_chain_id> --para-id <id> -r <runtime.wasm> named-preset <preset_name>\n```\n\n----------------------------------------\n\nTITLE: Implementing Validity Attestation Enum in Rust\nDESCRIPTION: Defines an enum for validity attestations used in candidate backing. Supports both implicit attestation via Seconded statements and explicit attestation via Valid statements.\nSOURCE: https://github.com/paritytech/polkadot-sdk/blob/master/polkadot/roadmap/implementers-guide/src/types/backing.md#2025-04-21_snippet_0\n\nLANGUAGE: rust\nCODE:\n```\nenum ValidityAttestation {\n  /// Implicit validity attestation by issuing.\n  /// This corresponds to issuance of a `Seconded` statement.\n  Implicit(ValidatorSignature),\n  /// An explicit attestation. This corresponds to issuance of a\n  /// `Valid` statement.\n  Explicit(ValidatorSignature),\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing DisputeState Structure in Rust\nDESCRIPTION: Defines a structure to track the state of a dispute, including validator votes, start block, and conclusion block.\nSOURCE: https://github.com/paritytech/polkadot-sdk/blob/master/polkadot/roadmap/implementers-guide/src/types/disputes.md#2025-04-21_snippet_5\n\nLANGUAGE: rust\nCODE:\n```\nstruct DisputeState {\n    validators_for: Bitfield, // one bit per validator.\n    validators_against: Bitfield, // one bit per validator.\n    start: BlockNumber,\n    concluded_at: Option<BlockNumber>,\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Collator Protocol Messages in Rust\nDESCRIPTION: Defines message types for collator protocol operations, including collation distribution, fetching, and notification handling between collators and validators.\nSOURCE: https://github.com/paritytech/polkadot-sdk/blob/master/polkadot/roadmap/implementers-guide/src/types/overseer-protocol.md#2025-04-21_snippet_13\n\nLANGUAGE: rust\nCODE:\n```\nenum CollatorProtocolMessage {\n    CollateOn(ParaId),\n    DistributeCollation(CandidateReceipt, PoV, Option<oneshot::Sender<CollationSecondedSignal>>),\n    FetchCollation(Hash, ParaId, ResponseChannel<(CandidateReceipt, PoV)>),\n    NoteGoodCollation(CollatorId, SignedFullStatement),\n    NotifyCollationSeconded(CollatorId, Hash, SignedFullStatement),\n}\n```\n\n----------------------------------------\n\nTITLE: HRMP Channel Removal Process\nDESCRIPTION: Detailed steps for removing an HRMP channel, including deposit returns and state cleanup procedures.\nSOURCE: https://github.com/paritytech/polkadot-sdk/blob/master/polkadot/roadmap/implementers-guide/src/runtime/hrmp.md#2025-04-21_snippet_4\n\nLANGUAGE: markdown\nCODE:\n```\nTo remove a HRMP channel `C` identified with a tuple `(sender, recipient)`:\n\n1. Return `C.sender_deposit` to the `sender`.\n1. Return `C.recipient_deposit` to the `recipient`.\n1. Remove `C` from `HrmpChannels`.\n```\n\n----------------------------------------\n\nTITLE: Storage Definitions in Rust for Configuration Pallet\nDESCRIPTION: Defines the main storage items for the Configuration pallet including current configuration, pending configurations, and a bypass flag for consistency checks.\nSOURCE: https://github.com/paritytech/polkadot-sdk/blob/master/polkadot/roadmap/implementers-guide/src/runtime/configuration.md#2025-04-21_snippet_0\n\nLANGUAGE: rust\nCODE:\n```\n/// The current configuration to be used.\nConfiguration: HostConfiguration;\n/// A pending configuration to be applied on session change.\nPendingConfigs: Vec<(SessionIndex, HostConfiguration)>;\n/// A flag that says if the consistency checks should be omitted.\nBypassConsistencyCheck: bool;\n```\n\n----------------------------------------\n\nTITLE: Fetching PVFs Requiring Pre-check in Rust\nDESCRIPTION: This runtime API retrieves all PVFs that need pre-checking voting. It returns a vector of ValidationCodeHash, representing the code hashes of the PVFs. Once a PVF gains required support, it is no longer returned by this API.\nSOURCE: https://github.com/paritytech/polkadot-sdk/blob/master/polkadot/roadmap/implementers-guide/src/runtime-api/pvf-prechecking.md#2025-04-21_snippet_0\n\nLANGUAGE: rust\nCODE:\n```\nfn pvfs_require_precheck() -> Vec<ValidationCodeHash>;\n```\n\n----------------------------------------\n\nTITLE: Implementing Validator Group Rotation Logic in Rust\nDESCRIPTION: Defines structures and functions for managing validator group rotations in a blockchain network. The code includes GroupRotationInfo struct for tracking rotation states and helper functions for calculating group assignments and rotation schedules. The implementation helps coordinate validator assignments across different cores.\nSOURCE: https://github.com/paritytech/polkadot-sdk/blob/master/polkadot/roadmap/implementers-guide/src/runtime-api/validator-groups.md#2025-04-21_snippet_0\n\nLANGUAGE: rust\nCODE:\n```\n/// A helper data-type for tracking validator-group rotations.\nstruct GroupRotationInfo {\n    session_start_block: BlockNumber,\n    group_rotation_frequency: BlockNumber,\n    now: BlockNumber, // The successor of the block in whose state this runtime API is queried.\n}\n\nimpl GroupRotationInfo {\n    /// Returns the index of the group needed to validate the core at the given index,\n    /// assuming the given amount of cores/groups.\n    fn group_for_core(&self, core_index, cores) -> GroupIndex;\n\n    /// Returns the block number of the next rotation after the current block. If the current block\n    /// is 10 and the rotation frequency is 5, this should return 15.\n    fn next_rotation_at(&self) -> BlockNumber;\n\n    /// Returns the block number of the last rotation before or including the current block. If the\n    /// current block is 10 and the rotation frequency is 5, this should return 10.\n    fn last_rotation_at(&self) -> BlockNumber;\n}\n\n/// Returns the validator groups and rotation info localized based on the block whose state\n/// this is invoked on. Note that `now` in the `GroupRotationInfo` should be the successor of\n/// the number of the block.\nfn validator_groups(at: Block) -> (Vec<Vec<ValidatorIndex>>, GroupRotationInfo);\n```\n\n----------------------------------------\n\nTITLE: Processing Candidate Backing Messages in Rust\nDESCRIPTION: This code snippet demonstrates how the Candidate Backing subsystem processes different types of incoming messages, including requests for backed candidates, seconding candidates, and handling statements.\nSOURCE: https://github.com/paritytech/polkadot-sdk/blob/master/polkadot/roadmap/implementers-guide/src/node/backing/candidate-backing.md#2025-04-21_snippet_0\n\nLANGUAGE: rust\nCODE:\n```\nmatch msg {\n  GetBackedCandidates(hashes, tx) => {\n    // Send back a set of backable candidates.\n  }\n  CandidateBackingMessage::Second(hash, candidate) => {\n    if candidate is unknown and in local assignment {\n      if spawn_validation_work(candidate, parachain head, validation function).await == Valid {\n        send(DistributePoV(pov))\n      }\n    }\n  }\n  CandidateBackingMessage::Statement(hash, statement) => {\n    // count to the votes on this candidate\n    if let Statement::Seconded(candidate) = statement {\n      if candidate.parachain_id == our_assignment {\n        spawn_validation_work(candidate, parachain head, validation function)\n      }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Election Result Structure in Rust\nDESCRIPTION: Demonstrates the structure and format of an election result, including winners list with their backing stakes and voter assignments with distribution ratios. Shows how to create winners and assignments vectors that combine into a complete election result.\nSOURCE: https://github.com/paritytech/polkadot-sdk/blob/master/substrate/primitives/npos-elections/README.md#2025-04-21_snippet_0\n\nLANGUAGE: rust\nCODE:\n```\n// the winners.\nlet winners = vec![(1, 100), (2, 50)];\nlet assignments = vec![\n    // A voter, giving equal backing to both 1 and 2.\n    Assignment {\n\t\twho: 10,\n\t\tdistribution: vec![(1, Perbill::from_percent(50)), (2, Perbill::from_percent(50))],\n\t},\n    // A voter, Only backing 1.\n    Assignment { who: 20, distribution: vec![(1, Perbill::from_percent(100))] },\n];\n\n// the combination of the two makes the election result.\nlet election_result = ElectionResult { winners, assignments };\n\n```\n\n----------------------------------------\n\nTITLE: Submitting PVF Check Statement in Rust\nDESCRIPTION: This runtime API is used to submit a judgement for a PVF, indicating whether it is approved or not. It takes a PvfCheckStatement and a ValidatorSignature as parameters. The statement is circulated through the network via gossip and eventually included in a block for processing by the runtime.\nSOURCE: https://github.com/paritytech/polkadot-sdk/blob/master/polkadot/roadmap/implementers-guide/src/runtime-api/pvf-prechecking.md#2025-04-21_snippet_1\n\nLANGUAGE: rust\nCODE:\n```\nfn submit_pvf_check_statement(stmt: PvfCheckStatement, signature: ValidatorSignature);\n```\n\n----------------------------------------\n\nTITLE: Markdown Documentation Template\nDESCRIPTION: Complete documentation template for FRAME pallets, including all required sections like overview, terminology, interface documentation, and usage examples.\nSOURCE: https://github.com/paritytech/polkadot-sdk/blob/master/substrate/frame/examples/basic/README.md#2025-04-21_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n# <INSERT_CUSTOM_PALLET_NAME> Pallet\n\n- [`<INSERT_CUSTOM_PALLET_NAME>::Config`](https://docs.rs/pallet-example-basic/latest/pallet_example_basic/trait.Config.html)\n- [`Call`](https://docs.rs/pallet-example-basic/latest/pallet_example_basic/enum.Call.html)\n- [`Module`](https://docs.rs/pallet-example-basic/latest/pallet_example_basic/struct.Module.html)\n\n## Overview\n\n## Terminology\n\n## Goals\n\n### Scenarios\n\n#### <INSERT_SCENARIO_NAME>\n\n## Interface\n\n### Supported Origins\n\n### Types\n\n### Dispatchable Functions\n\n### Public Functions\n\n#### Public Inspection functions - Immutable (getters)\n\n##### `example_getter_name()`\n\n#### Public Mutable functions (changing state)\n\n##### `example_setter_name(origin, parameter_name: T::ExampleType)`\n\n### Storage Items\n\n### Digest Items\n\n### Inherent Data\n\n### Events:\n\n### Errors:\n\n## Usage\n\n### Prerequisites\n\n### Simple Code Snippet\n\n### Example from FRAME\n\n## Genesis Config\n\n## Dependencies\n\n## Related Pallets\n\n## References\n```\n\n----------------------------------------\n\nTITLE: Accessing Slot Duration in Aura Consensus\nDESCRIPTION: Public function to determine the Aura slot duration based on the Timestamp module configuration. This function is crucial for consensus timing and round tracking.\nSOURCE: https://github.com/paritytech/polkadot-sdk/blob/master/substrate/frame/aura/README.md#2025-04-21_snippet_0\n\nLANGUAGE: rust\nCODE:\n```\nslot_duration\n```\n\n----------------------------------------\n\nTITLE: Declaring Executive Type in Substrate Node Template\nDESCRIPTION: This code snippet demonstrates how to declare the Executive type in a Substrate node template. It specifies the generic parameters for the Executive struct, including the Runtime, Block, Context, and AllPalletsWithSystem.\nSOURCE: https://github.com/paritytech/polkadot-sdk/blob/master/substrate/frame/executive/README.md#2025-04-21_snippet_0\n\nLANGUAGE: rust\nCODE:\n```\n/// Executive: handles dispatch to the various modules.\npub type Executive = executive::Executive<\n    Runtime,\n    Block,\n    Context,\n    Runtime,\n    AllPalletsWithSystem,\n>;\n```\n\n----------------------------------------\n\nTITLE: Defining CollatorFn Type in Rust for Polkadot Collation Generation\nDESCRIPTION: Defines the CollatorFn type, which is a boxed function that takes a hash and validation data, returning a future that resolves to an optional CollationResult. This function is called to generate a collation.\nSOURCE: https://github.com/paritytech/polkadot-sdk/blob/master/polkadot/roadmap/implementers-guide/src/node/collators/collation-generation.md#2025-04-21_snippet_3\n\nLANGUAGE: rust\nCODE:\n```\n/// Collation function.\n///\n/// Will be called with the hash of the relay chain block the parachain block should be build on and the\n/// [`ValidationData`] that provides information about the state of the parachain on the relay chain.\n///\n/// Returns an optional [`CollationResult`].\npub type CollatorFn = Box<\n  dyn Fn(\n      Hash,\n      &PersistedValidationData,\n    ) -> Pin<Box<dyn Future<Output = Option<CollationResult>> + Send>>\n    + Send\n    + Sync,\n>;\n```\n\n----------------------------------------\n\nTITLE: Defining Validation and Pre-Check Structures in Rust for Polkadot\nDESCRIPTION: This code snippet defines key structures and enums used in the Candidate Validation subsystem. It includes PreCheckOutcome for PVF pre-check results, ValidationResult for candidate validation outcomes, and CandidateValidationMessage for different types of validation requests.\nSOURCE: https://github.com/paritytech/polkadot-sdk/blob/master/polkadot/roadmap/implementers-guide/src/types/overseer-protocol.md#2025-04-21_snippet_23\n\nLANGUAGE: rust\nCODE:\n```\npub enum PreCheckOutcome {\n    Valid,\n    Invalid,\n    Failed,\n}\n\nenum ValidationResult {\n    Valid(CandidateCommitments, PersistedValidationData),\n    Invalid,\n}\n\nconst BACKING_EXECUTION_TIMEOUT: Duration = 2 seconds;\nconst APPROVAL_EXECUTION_TIMEOUT: Duration = 6 seconds;\n\n#[derive(Debug)]\npub enum CandidateValidationMessage {\n    ValidateFromExhaustive(\n        PersistedValidationData,\n        ValidationCode,\n        CandidateDescriptor,\n        Arc<PoV>,\n        Duration,\n        oneshot::Sender<Result<ValidationResult, ValidationFailed>>,\n    ),\n    PreCheck(\n        Hash,\n        ValidationCodeHash,\n        oneshot::Sender<PreCheckOutcome>,\n    ),\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Availability Store Messages in Rust\nDESCRIPTION: Defines message types for querying and storing availability data and erasure chunks in the availability store. Includes operations for checking data existence, storing chunks, and managing available data with erasure root verification.\nSOURCE: https://github.com/paritytech/polkadot-sdk/blob/master/polkadot/roadmap/implementers-guide/src/types/overseer-protocol.md#2025-04-21_snippet_7\n\nLANGUAGE: rust\nCODE:\n```\npub enum AvailabilityStoreMessage {\n\tQueryAvailableData(CandidateHash, oneshot::Sender<Option<AvailableData>>),\n\tQueryDataAvailability(CandidateHash, oneshot::Sender<bool>),\n\tQueryChunk(CandidateHash, ValidatorIndex, oneshot::Sender<Option<ErasureChunk>>),\n\tQueryChunkSize(CandidateHash, oneshot::Sender<Option<usize>>),\n\tQueryAllChunks(CandidateHash, oneshot::Sender<Vec<ErasureChunk>>),\n\tQueryChunkAvailability(CandidateHash, ValidatorIndex, oneshot::Sender<bool>),\n\tStoreChunk {\n\t\tcandidate_hash: CandidateHash,\n\t\tchunk: ErasureChunk,\n\t\ttx: oneshot::Sender<Result<(), ()>>,\n\t},\n\tStoreAvailableData {\n\t\tcandidate_hash: CandidateHash,\n\t\tn_validators: u32,\n\t\tavailable_data: AvailableData,\n\t\texpected_erasure_root: Hash,\n\t\ttx: oneshot::Sender<Result<(), StoreAvailableDataError>>,\n\t},\n}\n```\n\n----------------------------------------\n\nTITLE: Checked Approval Import Logic\nDESCRIPTION: Implements the logic for importing pre-validated approval votes and updating approval states.\nSOURCE: https://github.com/paritytech/polkadot-sdk/blob/master/polkadot/roadmap/implementers-guide/src/node/approval/approval-voting.md#2025-04-21_snippet_8\n\nLANGUAGE: markdown\nCODE:\n```\n#### Import Checked Approval\n  * Import an approval vote which we can assume to have passed signature checks and correspond to an imported assignment.\n  * Requires `(BlockEntry, CandidateEntry, ValidatorIndex)`...\n```\n\n----------------------------------------\n\nTITLE: Pseudo-algorithm for BEEFY Validator Behavior in Rust\nDESCRIPTION: This code snippet outlines the pseudo-algorithm for a fully-synced BEEFY validator. It demonstrates the process of selecting a block to vote on, retrieving the payload, signing the commitment, and broadcasting the vote.\nSOURCE: https://github.com/paritytech/polkadot-sdk/blob/master/substrate/client/consensus/beefy/README.md#2025-04-21_snippet_1\n\nLANGUAGE: rust\nCODE:\n```\nloop {\n  let (best_beefy, best_grandpa) = wait_for_best_blocks();\n\n  let block_to_vote_on = choose_next_beefy_block(\n    best_beefy,\n    best_grandpa\n  );\n\n  let payload_to_vote_on = retrieve_payload(block_to_vote_on);\n\n  let commitment = (block_to_vote_on, payload_to_vote_on);\n\n  let signature = sign_with_current_session_key(commitment);\n\n  broadcast_vote(commitment, signature);\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing SigningContext Structure in Rust\nDESCRIPTION: Defines context for signatures, combining payloads with session index and relay-chain hash to localize signatures and simplify misbehavior attribution.\nSOURCE: https://github.com/paritytech/polkadot-sdk/blob/master/polkadot/roadmap/implementers-guide/src/types/candidate.md#2025-04-21_snippet_8\n\nLANGUAGE: rust\nCODE:\n```\nstruct SigningContext {\n\tparent_hash: Hash,\n\tsession_index: SessionIndex,\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Bridge Messages Pallet in Rust\nDESCRIPTION: Configuration trait for the Bridge Messages Pallet, defining associated types for bridged chain primitives, header access, message dispatch, and delivery confirmation payments.\nSOURCE: https://github.com/paritytech/polkadot-sdk/blob/master/bridges/modules/messages/README.md#2025-04-21_snippet_3\n\nLANGUAGE: rust\nCODE:\n```\ntrait Config: frame_system::Config {\n    type BridgedChain: BridgedChain;\n    type BridgedHeaderChain: BridgedHeaderChain;\n    type MessageDispatch: MessageDispatch;\n    type DeliveryConfirmationPayments: DeliveryConfirmationPayments;\n}\n```\n\n----------------------------------------\n\nTITLE: Listing Dispatchable Functions for Bounty Protocol in Markdown\nDESCRIPTION: This snippet enumerates the dispatchable functions available in the bounty protocol. It includes functions for proposing, approving, and managing bounties, as well as assigning and managing curators.\nSOURCE: https://github.com/paritytech/polkadot-sdk/blob/master/substrate/frame/bounties/README.md#2025-04-21_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n### Dispatchable Functions\n\nBounty protocol:\n\n- `propose_bounty` - Propose a specific treasury amount to be earmarked for a predefined set of\n  tasks and stake the required deposit.\n- `approve_bounty` - Accept a specific treasury amount to be earmarked for a predefined body of\n  work.\n- `propose_curator` - Assign an account to a bounty as candidate curator.\n- `accept_curator` - Accept a bounty assignment from the Council, setting a curator deposit.\n- `extend_bounty_expiry` - Extend the expiry block number of the bounty and stay active.\n- `award_bounty` - Close and pay out the specified amount for the completed work.\n- `claim_bounty` - Claim a specific bounty amount from the Payout Address.\n- `unassign_curator` - Unassign an accepted curator from a specific earmark.\n- `close_bounty` - Cancel the earmark for a specific treasury amount and close the bounty.\n```\n\n----------------------------------------\n\nTITLE: Implementing DisputeStatementSet Structure in Rust\nDESCRIPTION: Defines a structure that holds a set of statements about a specific candidate, including the candidate hash, session index, and a vector of dispute statements with validator signatures.\nSOURCE: https://github.com/paritytech/polkadot-sdk/blob/master/polkadot/roadmap/implementers-guide/src/types/disputes.md#2025-04-21_snippet_0\n\nLANGUAGE: rust\nCODE:\n```\nstruct DisputeStatementSet {\n    candidate_hash: CandidateHash,\n    session: SessionIndex,\n    statements: Vec<(DisputeStatement, ValidatorIndex, ValidatorSignature)>,\n}\n```\n\n----------------------------------------\n\nTITLE: Runtime API Function Template in Rust\nDESCRIPTION: Template showing the standard format for Runtime API functions. Includes documentation about the 'at' parameter restrictions and implementation considerations for block validation.\nSOURCE: https://github.com/paritytech/polkadot-sdk/blob/master/polkadot/roadmap/implementers-guide/src/runtime-api/README.md#2025-04-21_snippet_0\n\nLANGUAGE: rust\nCODE:\n```\n/// Fetch the value of the runtime API at the block.\n///\n/// Definitionally, the `at` parameter cannot be any block that is not in the chain.\n/// Thus the return value is unconditional. However, for in-practice implementations\n/// it may be possible to provide an `at` parameter as a hash, which may not refer to a\n/// valid block or one which implements the runtime API. In those cases it would be\n/// best for the implementation to return an error indicating the failure mode.\nfn some_runtime_api(at: Block, arg1: Type1, arg2: Type2, ...) -> ReturnValue;\n```\n\n----------------------------------------\n\nTITLE: Defining Transaction Validity Types in Rust\nDESCRIPTION: Core type definitions for transaction validity in Substrate, including ValidTransaction struct and TransactionValidityError enum. These types are used to encapsulate transaction validation results from the runtime.\nSOURCE: https://github.com/paritytech/polkadot-sdk/blob/master/substrate/client/transaction-pool/README.md#2025-04-21_snippet_0\n\nLANGUAGE: rust\nCODE:\n```\npub type TransactionValidity = Result<ValidTransaction, TransactionValidityError>;\n\npub struct ValidTransaction {\n  pub requires: Vec<TransactionTag>,\n  pub provides: Vec<TransactionTag>,\n  pub priority: TransactionPriority,\n  pub longevity: TransactionLongevity,\n  pub propagate: bool,\n}\n\npub enum TransactionValidityError {\n  Invalid(/* details */),\n  Unknown(/* details */),\n}\n```\n\n----------------------------------------\n\nTITLE: Formatting Function with Nested Parentheses in Rust\nDESCRIPTION: Illustrates how to format a function with nested parentheses and mathematical operations. Demonstrates collapsing indent levels for cleaner code structure.\nSOURCE: https://github.com/paritytech/polkadot-sdk/blob/master/docs/contributor/STYLE_GUIDE.md#2025-04-21_snippet_1\n\nLANGUAGE: rust\nCODE:\n```\nfn calculate(\n\tsome_long_variable_a: f32,\n\tsome_long_variable_b: f32,\n\tsome_long_variable_c: f32,\n) -> f32 {\n\t(-some_long_variable_b + sqrt(\n\t\t// two parens open, but since we open & close them both on the\n\t\t// same line, only one indent level is used\n\t\tsome_long_variable_b * some_long_variable_b\n\t\t- 4 * some_long_variable_a * some_long_variable_c\n\t// both closed here at beginning of line, so back to the original indent\n\t// level\n\t)) / (2 * some_long_variable_a)\n}\n```\n\n----------------------------------------\n\nTITLE: Building Node with Benchmarks CLI Command\nDESCRIPTION: Command to build a Substrate node with benchmarking capabilities enabled using the runtime-benchmarks feature flag.\nSOURCE: https://github.com/paritytech/polkadot-sdk/blob/master/substrate/frame/benchmarking/README.md#2025-04-21_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\ncd bin/node/cli\ncargo build --profile=production --features runtime-benchmarks\n```\n\n----------------------------------------\n\nTITLE: Defining Dispute Structures and Retrieving Disputes Info in Rust\nDESCRIPTION: This code snippet defines structures for representing disputes, spam slots, and disputes information. It also includes a function signature for retrieving disputes information. The Dispute structure contains details about individual disputes, while SpamSlotsInfo and DisputesInfo provide additional context and aggregation of dispute-related data.\nSOURCE: https://github.com/paritytech/polkadot-sdk/blob/master/polkadot/roadmap/implementers-guide/src/runtime-api/disputes-info.md#2025-04-21_snippet_0\n\nLANGUAGE: rust\nCODE:\n```\nstruct Dispute {\n    session: SessionIndex,\n    candidate: CandidateHash,\n    dispute_state: DisputeState,\n    local: bool,\n}\n\nstruct SpamSlotsInfo {\n    max_spam_slots: u32,\n    session_spam_slots: Vec<(SessionIndex, Vec<u32>)>,\n}\n\nstruct DisputesInfo {\n    disputes: Vec<Dispute>,\n    spam_slots: SpamSlotsInfo,\n}\n\nfn disputes_info() -> DisputesInfo;\n```\n\n----------------------------------------\n\nTITLE: Defining ParaId Structure in Rust\nDESCRIPTION: Defines a unique 32-bit identifier for a specific para (chain or thread). ParaIds are guaranteed to be unique within a session but may be recycled over time.\nSOURCE: https://github.com/paritytech/polkadot-sdk/blob/master/polkadot/roadmap/implementers-guide/src/types/candidate.md#2025-04-21_snippet_0\n\nLANGUAGE: rust\nCODE:\n```\nstruct ParaId(u32);\n```\n\n----------------------------------------\n\nTITLE: Defining Helper Structs for Inclusion Pallet in Rust\nDESCRIPTION: Defines two main helper structures: AvailabilityBitfield for tracking validator bitfields and CandidatePendingAvailability for managing parachain candidate state during the availability phase.\nSOURCE: https://github.com/paritytech/polkadot-sdk/blob/master/polkadot/roadmap/implementers-guide/src/runtime/inclusion.md#2025-04-21_snippet_0\n\nLANGUAGE: rust\nCODE:\n```\nstruct AvailabilityBitfield {\n  bitfield: BitVec, // one bit per core.\n  submitted_at: BlockNumber, // for accounting, as meaning of bits may change over time.\n}\n\nstruct CandidatePendingAvailability {\n  core: CoreIndex, // availability core\n  hash: CandidateHash,\n  descriptor: CandidateDescriptor,\n  availability_votes: Bitfield, // one bit per validator.\n  relay_parent_number: BlockNumber, // number of the relay-parent.\n  backers: Bitfield, // one bit per validator, set for those who backed the candidate.\n  backed_in_number: BlockNumber,\n  backing_group: GroupIndex,\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Candidate Backing Messages in Rust\nDESCRIPTION: Defines message types for handling candidate backing operations, including retrieving backed candidates, seconding candidates, and processing validator statements.\nSOURCE: https://github.com/paritytech/polkadot-sdk/blob/master/polkadot/roadmap/implementers-guide/src/types/overseer-protocol.md#2025-04-21_snippet_10\n\nLANGUAGE: rust\nCODE:\n```\nenum CandidateBackingMessage {\n  GetBackedCandidates(\n    HashMap<ParaId, Vec<(CandidateHash, Hash)>>,\n    oneshot::Sender<HashMap<ParaId, Vec<BackedCandidate>>>,\n  ),\n  Second(Hash, CandidateReceipt, PoV),\n  Statement(Statement),\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Storage Layout for Disputes Pallet in Rust\nDESCRIPTION: This code snippet defines the storage layout for the Disputes Pallet, including tracking of disputes, included blocks, and chain freeze status.\nSOURCE: https://github.com/paritytech/polkadot-sdk/blob/master/polkadot/roadmap/implementers-guide/src/runtime/disputes.md#2025-04-21_snippet_0\n\nLANGUAGE: rust\nCODE:\n```\nLastPrunedSession: Option<SessionIndex>,\n\n// All ongoing or concluded disputes for the last several sessions.\nDisputes: double_map (SessionIndex, CandidateHash) -> Option<DisputeState>,\n// All included blocks on the chain, as well as the block number in this chain that\n// should be reverted back to if the candidate is disputed and determined to be invalid.\nIncluded: double_map (SessionIndex, CandidateHash) -> Option<BlockNumber>,\n// Whether the chain is frozen or not. Starts as `None`. When this is `Some`,\n// the chain will not accept any new parachain blocks for backing or inclusion,\n// and its value indicates the last valid block number in the chain.\n// It can only be set back to `None` by governance intervention.\nFrozen: Option<BlockNumber>,\n```\n\n----------------------------------------\n\nTITLE: Fetching Parachain Validation Code in Rust\nDESCRIPTION: Retrieves the validation code used by a parachain based on the given block and core occupation assumption. Takes a Block, ParaId and OccupiedCoreAssumption as parameters and returns an optional ValidationCode.\nSOURCE: https://github.com/paritytech/polkadot-sdk/blob/master/polkadot/roadmap/implementers-guide/src/runtime-api/validation-code.md#2025-04-21_snippet_0\n\nLANGUAGE: rust\nCODE:\n```\nfn validation_code(at: Block, ParaId, OccupiedCoreAssumption) -> Option<ValidationCode>;\n```\n\n----------------------------------------\n\nTITLE: Defining HRMP Structures in Rust\nDESCRIPTION: This snippet defines the core structures used in HRMP: HrmpOpenChannelRequest and HrmpChannel. These structures contain metadata about channel requests and active channels, including deposits, message limits, and current channel state.\nSOURCE: https://github.com/paritytech/polkadot-sdk/blob/master/polkadot/roadmap/implementers-guide/src/runtime/hrmp.md#2025-04-21_snippet_0\n\nLANGUAGE: rust\nCODE:\n```\n/// A description of a request to open an HRMP channel.\nstruct HrmpOpenChannelRequest {\n    /// Indicates if this request was confirmed by the recipient.\n    confirmed: bool,\n    /// The amount that the sender supplied at the time of creation of this request.\n    sender_deposit: Balance,\n    /// The maximum message size that could be put into the channel.\n    max_message_size: u32,\n    /// The maximum number of messages that can be pending in the channel at once.\n    max_capacity: u32,\n    /// The maximum total size of the messages that can be pending in the channel at once.\n    max_total_size: u32,\n}\n\n/// A metadata of an HRMP channel.\nstruct HrmpChannel {\n    /// The amount that the sender supplied as a deposit when opening this channel.\n    sender_deposit: Balance,\n    /// The amount that the recipient supplied as a deposit when accepting opening this channel.\n    recipient_deposit: Balance,\n    /// The maximum number of messages that can be pending in the channel at once.\n    max_capacity: u32,\n    /// The maximum total size of the messages that can be pending in the channel at once.\n    max_total_size: u32,\n    /// The maximum message size that could be put into the channel.\n    max_message_size: u32,\n    /// The current number of messages pending in the channel.\n    /// Invariant: should be less or equal to `max_capacity`.\n    msg_count: u32,\n    /// The total size in bytes of all message payloads in the channel.\n    /// Invariant: should be less or equal to `max_total_size`.\n    total_size: u32,\n    /// A head of the Message Queue Chain for this channel. Each link in this chain has a form:\n    /// `(prev_head, B, H(M))`, where\n    /// - `prev_head`: is the previous value of `mqc_head` or zero if none.\n    /// - `B`: is the [relay-chain] block number in which a message was appended\n    /// - `H(M)`: is the hash of the message being appended.\n    /// This value is initialized to a special value that consists of all zeroes which indicates\n    /// that no messages were previously added.\n    mqc_head: Option<Hash>,\n}\n```\n\n----------------------------------------\n\nTITLE: Manual Parachain Setup Process\nDESCRIPTION: Series of commands to manually set up a parachain for local development. This includes compiling the parachain binary, exporting genesis state and WASM, and running collators and full nodes.\nSOURCE: https://github.com/paritytech/polkadot-sdk/blob/master/cumulus/README.md#2025-04-21_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\n# Compile\ncargo build --release -p polkadot-parachain-bin\n\n# Export genesis state\n./target/release/polkadot-parachain export-genesis-state > genesis-state\n\n# Export genesis wasm\n./target/release/polkadot-parachain export-genesis-wasm > genesis-wasm\n\n# Collator1\n./target/release/polkadot-parachain --collator --alice --force-authoring \\\n  --tmp --port 40335 --rpc-port 9946 -- --chain rococo-local-cfde.json --port 30335\n\n# Collator2\n./target/release/polkadot-parachain --collator --bob --force-authoring \\\n  --tmp --port 40336 --rpc-port 9947 -- --chain rococo-local-cfde.json --port 30336\n\n# Parachain Full Node 1\n./target/release/polkadot-parachain --tmp --port 40337 --rpc-port 9948 -- \\\n  --chain rococo-local-cfde.json --port 30337\n```\n\n----------------------------------------\n\nTITLE: Chain Specification Configuration in Rust\nDESCRIPTION: References the chain_spec.rs file which defines the blockchain's genesis state configuration. This file is crucial for establishing the initial state of the blockchain.\nSOURCE: https://github.com/paritytech/polkadot-sdk/blob/master/templates/parachain/node/README.md#2025-04-21_snippet_0\n\nLANGUAGE: rust\nCODE:\n```\nchain_spec.rs\n```\n\n----------------------------------------\n\nTITLE: Defining HRMP Storage Layout in Rust\nDESCRIPTION: This snippet outlines the storage layout for HRMP-related data. It includes mappings for open channel requests, channel data, ingress/egress indexes, channel contents, and channel digests. Each storage item is accompanied by comments explaining its purpose and invariants.\nSOURCE: https://github.com/paritytech/polkadot-sdk/blob/master/polkadot/roadmap/implementers-guide/src/runtime/hrmp.md#2025-04-21_snippet_1\n\nLANGUAGE: rust\nCODE:\n```\n/// The set of pending HRMP open channel requests.\n///\n/// The set is accompanied by a list for iteration.\n///\n/// Invariant:\n/// - There are no channels that exists in list but not in the set and vice versa.\nHrmpOpenChannelRequests: map HrmpChannelId => Option<HrmpOpenChannelRequest>;\nHrmpOpenChannelRequestsList: Vec<HrmpChannelId>;\n\n/// This mapping tracks how many open channel requests are initiated by a given sender para.\n/// Invariant: `HrmpOpenChannelRequests` should contain the same number of items that has `(X, _)`\n/// as the number of `HrmpOpenChannelRequestCount` for `X`.\nHrmpOpenChannelRequestCount: map ParaId => u32;\n/// This mapping tracks how many open channel requests were accepted by a given recipient para.\n/// Invariant: `HrmpOpenChannelRequests` should contain the same number of items `(_, X)` with\n/// `confirmed` set to true, as the number of `HrmpAcceptedChannelRequestCount` for `X`.\nHrmpAcceptedChannelRequestCount: map ParaId => u32;\n\n/// A set of pending HRMP close channel requests that are going to be closed during the session change.\n/// Used for checking if a given channel is registered for closure.\n///\n/// The set is accompanied by a list for iteration.\n///\n/// Invariant:\n/// - There are no channels that exists in list but not in the set and vice versa.\nHrmpCloseChannelRequests: map HrmpChannelId => Option<()>;\nHrmpCloseChannelRequestsList: Vec<HrmpChannelId>;\n\n/// The HRMP watermark associated with each para.\n/// Invariant:\n/// - each para `P` used here as a key should satisfy `Paras::is_valid_para(P)` within a session.\nHrmpWatermarks: map ParaId => Option<BlockNumber>;\n/// HRMP channel data associated with each para.\n/// Invariant:\n/// - each participant in the channel should satisfy `Paras::is_valid_para(P)` within a session.\nHrmpChannels: map HrmpChannelId => Option<HrmpChannel>;\n/// Ingress/egress indexes allow to find all the senders and receivers given the opposite\n/// side. I.e.\n///\n/// (a) ingress index allows to find all the senders for a given recipient.\n/// (b) egress index allows to find all the recipients for a given sender.\n///\n/// Invariants:\n/// - for each ingress index entry for `P` each item `I` in the index should present in `HrmpChannels`\n///   as `(I, P)`.\n/// - for each egress index entry for `P` each item `E` in the index should present in `HrmpChannels`\n///   as `(P, E)`.\n/// - there should be no other dangling channels in `HrmpChannels`.\n/// - the vectors are sorted.\nHrmpIngressChannelsIndex: map ParaId => Vec<ParaId>;\nHrmpEgressChannelsIndex: map ParaId => Vec<ParaId>;\n/// Storage for the messages for each channel.\n/// Invariant: cannot be non-empty if the corresponding channel in `HrmpChannels` is `None`.\nHrmpChannelContents: map HrmpChannelId => Vec<InboundHrmpMessage>;\n/// Maintains a mapping that can be used to answer the question:\n/// What paras sent a message at the given block number for a given receiver.\n/// Invariants:\n/// - The inner `Vec<ParaId>` is never empty.\n/// - The inner `Vec<ParaId>` cannot store two same `ParaId`.\n/// - The outer vector is sorted ascending by block number and cannot store two items with the same\n///   block number.\nHrmpChannelDigests: map ParaId => Vec<(BlockNumber, Vec<ParaId>)>;\n```\n\n----------------------------------------\n\nTITLE: Calculating Secondary Slot Authority Index in BABE\nDESCRIPTION: This snippet demonstrates how the authority index for secondary slots is calculated in BABE. It uses the epoch randomness and slot number as inputs to a blake2_256 hash function, then takes the modulus with the number of authorities.\nSOURCE: https://github.com/paritytech/polkadot-sdk/blob/master/substrate/client/consensus/babe/README.md#2025-04-21_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n`blake2_256(epoch_randomness ++ slot_number) % authorities_len`\n```\n\n----------------------------------------\n\nTITLE: Defining Statement Field Enumeration Types\nDESCRIPTION: SCALE-encoded enumeration defining the possible fields in a Statement. Each field represents a key/value pair with specific purposes like authenticity proof, decryption key, priority, channels, topics and data.\nSOURCE: https://github.com/paritytech/polkadot-sdk/blob/master/substrate/primitives/statement-store/README.md#2025-04-21_snippet_0\n\nLANGUAGE: rust\nCODE:\n```\nField = Vec<Field> where Field is enum {\n    0: AuthenticityProof(Proof),\n    1: DecryptionKey([u8; 32]),\n    2: Priority(u32),\n    3: Channel([u8; 32]),\n    4: Topic1([u8; 32]),\n    5: Topic2([u8; 32]),\n    6: Topic3([u8; 32]),\n    7: Topic4([u8; 32]),\n    8: Data(Vec<u8>)\n}\n```\n\n----------------------------------------\n\nTITLE: Formatting Complex Function Calls and Assignments in Rust\nDESCRIPTION: Demonstrates how to format complex function calls, let statements, and simple function calls. Shows different indentation styles based on the complexity of the expression.\nSOURCE: https://github.com/paritytech/polkadot-sdk/blob/master/docs/contributor/STYLE_GUIDE.md#2025-04-21_snippet_3\n\nLANGUAGE: rust\nCODE:\n```\n{\n\t// Complex line (not just a function call, also a let statement). Full\n\t// structure.\n\tlet (a, b) = bar(\n\t\treally_long_parameter_name_1,\n\t\treally_long_parameter_name_2,\n\t\tshrt_nm_1,\n\t\tshrt_nm_2,\n\t);\n\n\t// Long, simple function call.\n\twaz(\n\t\treally_long_parameter_name_1,\n\t\treally_long_parameter_name_2,\n\t\tshrt_nm_1,\n\t\tshrt_nm_2,\n\t);\n\n\t// Short function call. Inline.\n\tbaz(a, b);\n}\n```\n\n----------------------------------------\n\nTITLE: Importing Asset Transaction Payment Pallet in Rust\nDESCRIPTION: This code snippet shows how to include the Asset Transaction Payment Pallet in a Substrate runtime. It should be used in the `construct_runtime` macro along with the standard transaction payment pallet.\nSOURCE: https://github.com/paritytech/polkadot-sdk/blob/master/substrate/frame/transaction-payment/asset-tx-payment/README.md#2025-04-21_snippet_0\n\nLANGUAGE: rust\nCODE:\n```\nconstruct_runtime!(\n    pub enum Runtime where\n        Block = Block,\n        NodeBlock = opaque::Block,\n        UncheckedExtrinsic = UncheckedExtrinsic\n    {\n        // ... other pallets\n        TransactionPayment: pallet_transaction_payment,\n        AssetTxPayment: pallet_asset_tx_payment,\n    }\n);\n```\n\n----------------------------------------\n\nTITLE: Cloning Parachain Template Repository\nDESCRIPTION: Commands to clone and navigate to the parachain template repository\nSOURCE: https://github.com/paritytech/polkadot-sdk/blob/master/templates/parachain/README.md#2025-04-21_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ngit clone https://github.com/paritytech/polkadot-sdk-parachain-template.git parachain-template\n\ncd parachain-template\n```\n\n----------------------------------------\n\nTITLE: Defining Provisioner Messages in Rust\nDESCRIPTION: Implements message types for the Provisioner subsystem that handles block production data. Includes provisioning of bitfields, backed candidates, misbehavior reports, and disputes.\nSOURCE: https://github.com/paritytech/polkadot-sdk/blob/master/polkadot/roadmap/implementers-guide/src/types/overseer-protocol.md#2025-04-21_snippet_20\n\nLANGUAGE: rust\nCODE:\n```\nenum ProvisionableData {\n  /// This bitfield indicates the availability of various candidate blocks.\n  Bitfield(Hash, SignedAvailabilityBitfield),\n  /// The Candidate Backing subsystem believes that this candidate is valid, pending availability.\n  BackedCandidate(CandidateReceipt),\n  /// Misbehavior reports are self-contained proofs of validator misbehavior.\n  MisbehaviorReport(Hash, MisbehaviorReport),\n  /// Disputes trigger a broad dispute resolution process.\n  Dispute(Hash, Signature),\n}\n\nenum ProvisionerMessage {\n  /// This message allows external subsystems to request current inherent data that could be used for\n  /// advancing the state of parachain consensus in a block building upon the given hash.\n  ///\n  /// If called at different points in time, this may give different results.\n  RequestInherentData(Hash, oneshot::Sender<ParaInherentData>),\n  /// This data should become part of a relay chain block\n  ProvisionableData(ProvisionableData),\n}\n```\n\n----------------------------------------\n\nTITLE: Approval Voting Message Types in Rust\nDESCRIPTION: Defines message types and error handling for the approval voting subsystem, including assignment and approval check results.\nSOURCE: https://github.com/paritytech/polkadot-sdk/blob/master/polkadot/roadmap/implementers-guide/src/types/overseer-protocol.md#2025-04-21_snippet_3\n\nLANGUAGE: rust\nCODE:\n```\nenum ApprovalVotingMessage {\n\t/// Import an assignment into the approval-voting database.\n\t///\n\t/// Should not be sent unless the block hash is known and the VRF assignment checks out.\n\tImportAssignment(CheckedIndirectAssignment, Option<oneshot::Sender<AssignmentCheckResult>>),\n\t/// Import an approval vote into approval-voting database\n\t///\n\t/// Should not be sent unless the block hash within the indirect vote is known, vote is\n\t/// correctly signed and we had a previous assignment for the candidate.\n\tImportApproval(CheckedIndirectSignedApprovalVote, Option<oneshot::Sender<ApprovalCheckResult>>),\n    ApprovedAncestor {\n        target_hash: Hash,\n        base_number: BlockNumber,\n        rx: ResponseChannel<Option<(Hash, BlockNumber, Vec<(Hash, Vec<CandidateHash>)>)>>\n    },\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Utility Structs for Parachain Management in Rust\nDESCRIPTION: This snippet defines several utility structs used in the Paras pallet for managing parachain information, including ReplacementTimes, ParaPastCodeMeta, ParaGenesisArgs, ParaLifecycle, PvfCheckCause, and PvfCheckActiveVoteState.\nSOURCE: https://github.com/paritytech/polkadot-sdk/blob/master/polkadot/roadmap/implementers-guide/src/runtime/paras.md#2025-04-21_snippet_0\n\nLANGUAGE: rust\nCODE:\n```\npub struct ReplacementTimes {\n expected_at: BlockNumber,\n activated_at: BlockNumber,\n}\n\npub struct ParaPastCodeMeta {\n upgrade_times: Vec<ReplacementTimes>,\n last_pruned: Option<BlockNumber>,\n}\n\nstruct ParaGenesisArgs {\n  genesis_head: HeadData,\n  validation_code: ValidationCode,\n  parachain: bool,\n}\n\npub enum ParaLifecycle {\n  Onboarding,\n  Parathread,\n  Parachain,\n  UpgradingParathread,\n  DowngradingParachain,\n  OutgoingParathread,\n  OutgoingParachain,\n}\n\nenum PvfCheckCause {\n  Onboarding(ParaId),\n  Upgrade {\n    id: ParaId,\n    relay_parent_number: BlockNumber,\n  },\n}\n\nstruct PvfCheckActiveVoteState {\n  votes_accept: BitVec,\n  votes_reject: BitVec,\n  age: SessionIndex,\n  created_at: BlockNumber,\n  causes: Vec<PvfCheckCause>,\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Storage for ParaInherent Module in Rust\nDESCRIPTION: Defines two storage items: 'Included' to track whether the para inherent was included, and 'OnChainVotes' to store scraped on-chain votes for off-chain disputes.\nSOURCE: https://github.com/paritytech/polkadot-sdk/blob/master/polkadot/roadmap/implementers-guide/src/runtime/parainherent.md#2025-04-21_snippet_0\n\nLANGUAGE: rust\nCODE:\n```\n/// Whether the para inherent was included or not.\nIncluded: Option<()>,\n```\n\nLANGUAGE: rust\nCODE:\n```\n/// Scraped on chain votes to be used in disputes off-chain.\nOnChainVotes: Option<ScrapedOnChainVotes>,\n```\n\n----------------------------------------\n\nTITLE: Implementing Block Proposition in Rust using ProposerFactory\nDESCRIPTION: Demonstrates the step-by-step process of creating a block proposition using ProposerFactory and Proposer. The code initializes a proposer factory, creates a proposer instance, and generates a new block with transactions from the transaction pool within a specified duration.\nSOURCE: https://github.com/paritytech/polkadot-sdk/blob/master/substrate/client/basic-authorship/README.md#2025-04-21_snippet_0\n\nLANGUAGE: rust\nCODE:\n```\n// The first step is to create a `ProposerFactory`.\nlet mut proposer_factory = ProposerFactory::new(client.clone(), txpool.clone(), None);\n\n// From this factory, we create a `Proposer`.\nlet proposer = proposer_factory.init(\n\t&client.header(client.chain_info().genesis_hash).unwrap().unwrap(),\n);\n\n// The proposer is created asynchronously.\nlet proposer = futures::executor::block_on(proposer).unwrap();\n\n// This `Proposer` allows us to create a block proposition.\n// The proposer will grab transactions from the transaction pool, and put them into the block.\nlet future = proposer.propose(\n\tDefault::default(),\n\tDefault::default(),\n\tDuration::from_secs(2),\n);\n\n// We wait until the proposition is performed.\nlet block = futures::executor::block_on(future).unwrap();\nprintln!(\"Generated block: {:?}\", block.block);\n```\n\n----------------------------------------\n\nTITLE: Defining InvalidDisputeVote Struct for Dispute Distribution in Rust\nDESCRIPTION: This struct defines an invalid vote in a dispute, containing the validator index, signature, and kind of dispute statement. It's used as part of the dispute distribution protocol.\nSOURCE: https://github.com/paritytech/polkadot-sdk/blob/master/polkadot/roadmap/implementers-guide/src/node/disputes/dispute-distribution.md#2025-04-21_snippet_1\n\nLANGUAGE: rust\nCODE:\n```\n/// Any invalid vote (currently only explicit).\npub struct InvalidDisputeVote {\n  /// The voting validator index.\n  pub validator_index: ValidatorIndex,\n\n  /// The validator signature, that can be verified when constructing a\n  /// `SignedDisputeStatement`.\n  pub signature: ValidatorSignature,\n\n  /// Kind of dispute statement.\n  pub kind: InvalidDisputeStatementKind,\n}\n```\n\n----------------------------------------\n\nTITLE: Formatting Function Declarations with Long Parameter Lists in Rust\nDESCRIPTION: Shows correct and incorrect ways to format function declarations with long parameter lists. Emphasizes consistent indentation for improved readability.\nSOURCE: https://github.com/paritytech/polkadot-sdk/blob/master/docs/contributor/STYLE_GUIDE.md#2025-04-21_snippet_2\n\nLANGUAGE: rust\nCODE:\n```\n// OK\nfn foo(\n\treally_long_parameter_name_1: SomeLongTypeName,\n\treally_long_parameter_name_2: SomeLongTypeName,\n\tshrt_nm_1: u8,\n\tshrt_nm_2: u8,\n) {\n   ...\n}\n\n// NOT OK\nfn foo(really_long_parameter_name_1: SomeLongTypeName, really_long_parameter_name_2: SomeLongTypeName,\n\tshrt_nm_1: u8, shrt_nm_2: u8) {\n\t...\n}\n```\n\n----------------------------------------\n\nTITLE: Defining ValidDisputeVote Struct for Dispute Distribution in Rust\nDESCRIPTION: This struct represents a valid vote in a dispute, containing validator index, signature, and the kind of dispute statement. It can be backing, approval, or explicit votes.\nSOURCE: https://github.com/paritytech/polkadot-sdk/blob/master/polkadot/roadmap/implementers-guide/src/node/disputes/dispute-distribution.md#2025-04-21_snippet_2\n\nLANGUAGE: rust\nCODE:\n```\n/// Any valid vote (backing, approval, explicit).\npub struct ValidDisputeVote {\n  /// The voting validator index.\n  pub validator_index: ValidatorIndex,\n\n  /// The validator signature, that can be verified when constructing a\n  /// `SignedDisputeStatement`.\n  pub signature: ValidatorSignature,\n\n  /// Kind of dispute statement.\n  pub kind: ValidDisputeStatementKind,\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Bitfield Distribution Messages in Rust\nDESCRIPTION: Defines message types for distributing signed bitfields between validators and handling network bridge updates for bitfield distribution protocol.\nSOURCE: https://github.com/paritytech/polkadot-sdk/blob/master/polkadot/roadmap/implementers-guide/src/types/overseer-protocol.md#2025-04-21_snippet_8\n\nLANGUAGE: rust\nCODE:\n```\nenum BitfieldDistributionMessage {\n    DistributeBitfield(relay_parent, SignedAvailabilityBitfield),\n    NetworkBridgeUpdate(NetworkBridgeEvent<BitfieldDistributionV1Message>),\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Storage Layout for DMP in Rust\nDESCRIPTION: This code snippet defines the storage layout required for the implementation of Downward Message Processing (DMP). It includes mappings for downward message queues and queue heads for each para-chain.\nSOURCE: https://github.com/paritytech/polkadot-sdk/blob/master/polkadot/roadmap/implementers-guide/src/runtime/dmp.md#2025-04-21_snippet_0\n\nLANGUAGE: rust\nCODE:\n```\n/// The downward messages addressed for a certain para.\nDownwardMessageQueues: map ParaId => Vec<InboundDownwardMessage>;\n/// A mapping that stores the downward message queue MQC head for each para.\n///\n/// Each link in this chain has a form:\n/// `(prev_head, B, H(M))`, where\n/// - `prev_head`: is the previous head hash or zero if none.\n/// - `B`: is the relay-chain block number in which a message was appended.\n/// - `H(M)`: is the hash of the message being appended.\nDownwardMessageQueueHeads: map ParaId => Hash;\n```\n\n----------------------------------------\n\nTITLE: Setting Bridge GRANDPA Pallet Operating Mode\nDESCRIPTION: Function that allows the module owner or sudo account to halt or resume all module operations. Useful for emergency scenarios affecting the bridge.\nSOURCE: https://github.com/paritytech/polkadot-sdk/blob/master/bridges/modules/grandpa/README.md#2025-04-21_snippet_3\n\nLANGUAGE: markdown\nCODE:\n```\nfn set_operating_mode()\n```\n\n----------------------------------------\n\nTITLE: Running the Adder Parachain Collator\nDESCRIPTION: Starts the adder parachain collator that connects to the relay chain. The collator will process transactions for the parachain with ID 100 and communicate with the relay chain validators.\nSOURCE: https://github.com/paritytech/polkadot-sdk/blob/master/polkadot/parachain/test-parachains/adder/collator/README.md#2025-04-21_snippet_2\n\nLANGUAGE: sh\nCODE:\n```\ncargo run --release -p test-parachain-adder-collator -- --tmp --chain rococo-local --port 50553\n```\n\n----------------------------------------\n\nTITLE: Building Polkadot with Docker\nDESCRIPTION: This bash script builds Polkadot from source using the Parity CI docker image. It clones the repository, runs the build process in a Docker container, and adjusts file permissions.\nSOURCE: https://github.com/paritytech/polkadot-sdk/blob/master/polkadot/README.md#2025-04-21_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\ngit checkout <latest tagged release>\ndocker run --rm -it -w /shellhere/polkadot \\\n                    -v $(pwd):/shellhere/polkadot \\\n                    paritytech/ci-linux:production cargo build --release\nsudo chown -R $(id -u):$(id -g) target/\n```\n\n----------------------------------------\n\nTITLE: Initializing Bridge GRANDPA Pallet by Owner\nDESCRIPTION: Function that allows the module owner to initialize the bridge with initial header and validators set.\nSOURCE: https://github.com/paritytech/polkadot-sdk/blob/master/bridges/modules/grandpa/README.md#2025-04-21_snippet_4\n\nLANGUAGE: markdown\nCODE:\n```\nfn initialize()\n```\n\n----------------------------------------\n\nTITLE: Defining GRANDPA Justification Structures in Rust\nDESCRIPTION: This code snippet defines the data structures used in GRANDPA justifications. It includes structures for Justification, Commit, SignedPrecommit, and Precommit, which are essential components of the GRANDPA finality proof system.\nSOURCE: https://github.com/paritytech/polkadot-sdk/blob/master/substrate/client/consensus/beefy/README.md#2025-04-21_snippet_0\n\nLANGUAGE: rust\nCODE:\n```\nstruct Justification<Block: BlockT> {\n    round: u64,\n    commit: Commit<Block>,\n    votes_ancestries: Vec<Block::Header>,\n}\n\nstruct Commit<Hash, Number, Signature, Id> {\n    target_hash: Hash,\n    target_number: Number,\n    precommits: Vec<SignedPrecommit<Hash, Number, Signature, Id>>,\n}\n\nstruct SignedPrecommit<Hash, Number, Signature, Id> {\n    precommit: Precommit<Hash, Number>,\n    signature: Signature,\n    id: Id,\n}\n\nstruct Precommit<Hash, Number> {\n    target_hash: Hash,\n    target_number: Number,\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Session Delay Constant in Rust\nDESCRIPTION: Defines a constant SESSION_DELAY that enforces a delay of 2 sessions before applying any changes to Paras registration or configurations, ensuring at least one full session has passed.\nSOURCE: https://github.com/paritytech/polkadot-sdk/blob/master/polkadot/roadmap/implementers-guide/src/runtime/shared.md#2025-04-21_snippet_0\n\nLANGUAGE: rust\nCODE:\n```\npub(crate) const SESSION_DELAY: SessionIndex = 2;\n```\n\n----------------------------------------\n\nTITLE: Defining Core Data Structures in Rust\nDESCRIPTION: Defines the main data structures used for tracking approval distribution state, including block entries, peer knowledge, and candidate approval states.\nSOURCE: https://github.com/paritytech/polkadot-sdk/blob/master/polkadot/roadmap/implementers-guide/src/node/approval/approval-distribution.md#2025-04-21_snippet_0\n\nLANGUAGE: rust\nCODE:\n```\ntype BlockScopedCandidate = (Hash, CandidateHash);\n\nenum PendingMessage {\n  Assignment(IndirectAssignmentCert, CoreIndex),\n  Approval(IndirectSignedApprovalVote),\n}\n\nstruct State {\n  blocks_by_number: BTreeMap<BlockNumber, Vec<Hash>>,\n  blocks: HashMap<Hash, BlockEntry>,\n  pending_known: HashMap<Hash, Vec<(PeerId, PendingMessage>)>>,\n  peer_views: HashMap<PeerId, View>,\n}\n\nenum MessageFingerprint {\n  Assignment(Hash, u32, ValidatorIndex),\n  Approval(Hash, u32, ValidatorIndex),\n}\n\nstruct Knowledge {\n  known_messages: HashSet<MessageFingerprint>,\n}\n\nstruct PeerKnowledge {\n  sent: Knowledge,\n  received: Knowledge,\n}\n\nstruct BlockEntry {\n  known_by: HashMap<PeerId, PeerKnowledge>,\n  number: BlockNumber,\n  parent_hash: Hash,\n  knowledge: Knowledge,\n  candidates: IndexMap<CandidateHash, CandidateEntry>,\n}\n\nenum ApprovalState {\n  Assigned(AssignmentCert),\n  Approved(AssignmentCert, ApprovalSignature),\n}\n\nstruct CandidateEntry {\n  approvals: HashMap<ValidatorIndex, ApprovalState>,\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing PoV Distribution Messages in Rust\nDESCRIPTION: Defines message types for handling Proof of Validity (PoV) distribution in the network. Includes messages for fetching and distributing PoVs associated with candidate blocks.\nSOURCE: https://github.com/paritytech/polkadot-sdk/blob/master/polkadot/roadmap/implementers-guide/src/types/overseer-protocol.md#2025-04-21_snippet_19\n\nLANGUAGE: rust\nCODE:\n```\nenum PoVDistributionMessage {\n    /// Fetch a PoV from the network.\n    ///\n    /// This `CandidateDescriptor` should correspond to a candidate seconded under the provided\n    /// relay-parent hash.\n    FetchPoV(Hash, CandidateDescriptor, ResponseChannel<PoV>),\n    /// Distribute a PoV for the given relay-parent and CandidateDescriptor.\n    /// The PoV should correctly hash to the PoV hash mentioned in the CandidateDescriptor\n    DistributePoV(Hash, CandidateDescriptor, PoV),\n    /// An update from the network bridge.\n    NetworkBridgeUpdate(NetworkBridgeEvent<PoVDistributionV1Message>),\n}\n```\n\n----------------------------------------\n\nTITLE: Declaring StorageMap in Substrate Pallet (Rust)\nDESCRIPTION: This snippet declares a StorageMap named 'SomethingMap' that maps from T::AccountId to u32. It uses the ValueQuery storage configuration and includes attributes for setting the prefix and runtime type.\nSOURCE: https://github.com/paritytech/polkadot-sdk/blob/master/substrate/frame/nomination-pools/benchmarking/README.md#2025-04-21_snippet_1\n\nLANGUAGE: rust\nCODE:\n```\n#[pallet::storage]\npub type SomethingMap<T: Config> = StorageMap<_, Blake2_128Concat, T::AccountId, u32, ValueQuery>;\n```\n\n----------------------------------------\n\nTITLE: Receiving Message Proof in Rust\nDESCRIPTION: Transaction for receiving proof of messages on the target chain. This is called by relayers to deliver messages from the source chain.\nSOURCE: https://github.com/paritytech/polkadot-sdk/blob/master/bridges/modules/messages/README.md#2025-04-21_snippet_1\n\nLANGUAGE: rust\nCODE:\n```\nreceive_messages_proof()\n```\n\n----------------------------------------\n\nTITLE: Describing Ethereum Inbound Queue Functionality in Markdown\nDESCRIPTION: This markdown snippet outlines the purpose of the Ethereum Inbound Queue, which is to read messages from Ethereum and send them to intended destinations on Polkadot using XCM. It provides a high-level overview of the bridging functionality between Ethereum and Polkadot.\nSOURCE: https://github.com/paritytech/polkadot-sdk/blob/master/bridges/snowbridge/pallets/inbound-queue/README.md#2025-04-21_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n# Ethereum Inbound Queue\n\nReads messages from Ethereum and sends it to intended destination on Polkadot, using XCM.\n```\n\n----------------------------------------\n\nTITLE: Calculating BEEFY Round Number in Rust\nDESCRIPTION: This code snippet demonstrates the formula for calculating the current round number in the BEEFY protocol. It takes into account the session start, best BEEFY finalized block, best GRANDPA finalized block, and whether a mandatory block in the current session is finalized.\nSOURCE: https://github.com/paritytech/polkadot-sdk/blob/master/substrate/client/consensus/beefy/README.md#2025-04-21_snippet_2\n\nLANGUAGE: rust\nCODE:\n```\nround_number =\n      (1 - M) * session_start\n   +        M * (best_beefy + NEXT_POWER_OF_TWO((best_grandpa - best_beefy + 1) / 2))\n```\n\n----------------------------------------\n\nTITLE: Defining Parachain Storage Layout in Rust\nDESCRIPTION: This snippet defines the storage layout for managing parachains, including active votes, parachain states, head data, validation codes, and upgrade signals. It uses Rust-style type declarations to represent various mappings and vectors.\nSOURCE: https://github.com/paritytech/polkadot-sdk/blob/master/polkadot/roadmap/implementers-guide/src/runtime/paras.md#2025-04-21_snippet_1\n\nLANGUAGE: rust\nCODE:\n```\nuse frame_system::pallet_prelude::BlockNumberFor;\n/// All currently active PVF pre-checking votes.\n///\n/// Invariant:\n/// - There are no PVF pre-checking votes that exists in list but not in the set and vice versa.\nPvfActiveVoteMap: map ValidationCodeHash => PvfCheckActiveVoteState;\n/// The list of all currently active PVF votes. Auxiliary to `PvfActiveVoteMap`.\nPvfActiveVoteList: Vec<ValidationCodeHash>;\n/// All parachains. Ordered ascending by ParaId. On-demand parachains are not included.\nParachains: Vec<ParaId>,\n/// The current lifecycle state of all known Para Ids.\nParaLifecycle: map ParaId => Option<ParaLifecycle>,\n/// The head-data of every registered para.\nHeads: map ParaId => Option<HeadData>;\n/// The context (relay-chain block number) of the most recent parachain head.\nMostRecentContext: map ParaId => BlockNumber;\n/// The validation code hash of every live para.\nCurrentCodeHash: map ParaId => Option<ValidationCodeHash>;\n/// Actual past code hash, indicated by the para id as well as the block number at which it became outdated.\nPastCodeHash: map (ParaId, BlockNumber) => Option<ValidationCodeHash>;\n/// Past code of parachains. The parachains themselves may not be registered anymore,\n/// but we also keep their code on-chain for the same amount of time as outdated code\n/// to keep it available for secondary checkers.\nPastCodeMeta: map ParaId => ParaPastCodeMeta;\n/// Which paras have past code that needs pruning and the relay-chain block at which the code was replaced.\n/// Note that this is the actual height of the included block, not the expected height at which the\n/// code upgrade would be applied, although they may be equal.\n/// This is to ensure the entire acceptance period is covered, not an offset acceptance period starting\n/// from the time at which the parachain perceives a code upgrade as having occurred.\n/// Multiple entries for a single para are permitted. Ordered ascending by block number.\nPastCodePruning: Vec<(ParaId, BlockNumber)>;\n/// The block number at which the planned code change is expected for a para.\n/// The change will be applied after the first parablock for this ID included which executes\n/// in the context of a relay chain block with a number >= `expected_at`.\nFutureCodeUpgrades: map ParaId => Option<BlockNumber>;\n/// Hash of the actual future code of a para.\nFutureCodeHash: map ParaId => Option<ValidationCodeHash>;\n/// This is used by the relay-chain to communicate to a parachain a go-ahead with in the upgrade procedure.\n///\n/// This value is absent when there are no upgrades scheduled or during the time the relay chain\n/// performs the checks. It is set at the first relay-chain block when the corresponding parachain\n/// can switch its upgrade function. As soon as the parachain's block is included, the value\n/// gets reset to `None`.\n///\n/// NOTE that this field is used by parachains via merkle storage proofs, therefore changing\n/// the format will require migration of parachains.\nUpgradeGoAheadSignal: map hasher(twox_64_concat) ParaId => Option<UpgradeGoAhead>;\n/// This is used by the relay-chain to communicate that there are restrictions for performing\n/// an upgrade for this parachain.\n///\n/// This may be a because the parachain waits for the upgrade cooldown to expire. Another\n/// potential use case is when we want to perform some maintenance (such as storage migration)\n/// we could restrict upgrades to make the process simpler.\n///\n/// NOTE that this field is used by parachains via merkle storage proofs, therefore changing\n/// the format will require migration of parachains.\nUpgradeRestrictionSignal: map hasher(twox_64_concat) ParaId => Option<UpgradeRestriction>;\n/// The list of parachains that are awaiting for their upgrade restriction to cooldown.\n///\n/// Ordered ascending by block number.\nUpgradeCooldowns: Vec<(ParaId, BlockNumberFor<T>)>;\n/// The list of upcoming code upgrades. Each item is a pair of which para performs a code\n/// upgrade and at which relay-chain block it is expected at.\n///\n/// Ordered ascending by block number.\nUpcomingUpgrades: Vec<(ParaId, BlockNumberFor<T>)>;\n/// The actions to perform during the start of a specific session index.\nActionsQueue: map SessionIndex => Vec<ParaId>;\n/// Upcoming paras instantiation arguments.\n///\n/// NOTE that after PVF pre-checking is enabled the para genesis arg will have it's code set\n/// to empty. Instead, the code will be saved into the storage right away via `CodeByHash`.\nUpcomingParasGenesis: map ParaId => Option<ParaGenesisArgs>;\n/// The number of references on the validation code in `CodeByHash` storage.\nCodeByHashRefs: map ValidationCodeHash => u32;\n/// Validation code stored by its hash.\nCodeByHash: map ValidationCodeHash => Option<ValidationCode>\n```\n\n----------------------------------------\n\nTITLE: Candidate Voting Example in Rust\nDESCRIPTION: ASCII diagram demonstrating the voting process for candidates, showing member votes and selection mechanism with accept/reject/skeptic votes.\nSOURCE: https://github.com/paritytech/polkadot-sdk/blob/master/substrate/frame/society/README.md#2025-04-21_snippet_1\n\nLANGUAGE: rust\nCODE:\n```\n [ a-accept, r-reject, s-skeptic ]\n+----------------------------------+\n|                                  |\n|  Member   |0|1|2|3|4|5|6|7|8|9|  |\n|  -----------------------------   |\n|  Vote     |a|a|a|r|s|r|a|a|s|a|  |\n|  -----------------------------   |\n|  Selected | | | |x| | | | | | |  |\n|                                  |\n+----------------------------------+\n\nResult: Rejected\n```\n\n----------------------------------------\n\nTITLE: Generating All Weights\nDESCRIPTION: Command to regenerate weights for all pallets and runtimes\nSOURCE: https://github.com/paritytech/polkadot-sdk/blob/master/docs/contributor/weight-generation.md#2025-04-21_snippet_1\n\nLANGUAGE: sh\nCODE:\n```\n/cmd bench\n```\n\n----------------------------------------\n\nTITLE: Validating Candidates in the Candidate Backing Subsystem\nDESCRIPTION: This function spawns an asynchronous task to validate a candidate. It fetches the Proof of Validity (PoV) block, validates it, and dispatches appropriate statements based on the validation result.\nSOURCE: https://github.com/paritytech/polkadot-sdk/blob/master/polkadot/roadmap/implementers-guide/src/node/backing/candidate-backing.md#2025-04-21_snippet_1\n\nLANGUAGE: rust\nCODE:\n```\nfn spawn_validation_work(candidate, parachain head, validation function) {\n  asynchronously {\n    let pov = (fetch pov block).await\n\n    let valid = (validate pov block).await;\n    if valid {\n      // make PoV available for later distribution. Send data to the availability store to keep.\n      // sign and dispatch `valid` statement to network if we have not seconded the given candidate.\n    } else {\n      // sign and dispatch `invalid` statement to network.\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Cloning Parachain Template Repository\nDESCRIPTION: Commands to clone the parachain template repository and navigate to its directory.\nSOURCE: https://github.com/paritytech/polkadot-sdk/blob/master/templates/parachain/README.docify.md#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ngit clone https://github.com/paritytech/polkadot-sdk-parachain-template.git parachain-template\n\ncd parachain-template\n```\n\n----------------------------------------\n\nTITLE: Approval Distribution Message Types in Rust\nDESCRIPTION: Defines message types for the approval distribution subsystem, including block metadata and distribution of assignments and votes.\nSOURCE: https://github.com/paritytech/polkadot-sdk/blob/master/polkadot/roadmap/implementers-guide/src/types/overseer-protocol.md#2025-04-21_snippet_4\n\nLANGUAGE: rust\nCODE:\n```\nenum ApprovalDistributionMessage {\n    /// Notify the `ApprovalDistribution` subsystem about new blocks and the candidates contained within\n    /// them.\n    NewBlocks(Vec<BlockApprovalMeta>),\n    /// Distribute an assignment cert from the local validator. The cert is assumed\n    /// to be valid, relevant, and for the given relay-parent and validator index.\n    ///\n    /// The `u32` param is the candidate index in the fully-included list.\n    DistributeAssignment(IndirectAssignmentCert, u32),\n    /// Distribute an approval vote for the local validator. The approval vote is assumed to be\n    /// valid, relevant, and the corresponding approval already issued. If not, the subsystem is free to drop\n    /// the message.\n    DistributeApproval(IndirectSignedApprovalVote),\n    /// An update from the network bridge.\n    NetworkBridgeUpdate(NetworkBridgeEvent<ApprovalDistributionV1Message>),\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing PoV Distribution V1 Message in Rust for Polkadot SDK\nDESCRIPTION: This code defines the PoVDistributionV1Message enum, which includes message types for notifying about awaited PoVs and sending PoVs in the PoV Distribution subsystem.\nSOURCE: https://github.com/paritytech/polkadot-sdk/blob/master/polkadot/roadmap/implementers-guide/src/types/network.md#2025-04-21_snippet_5\n\nLANGUAGE: rust\nCODE:\n```\nenum PoVDistributionV1Message {\n\t/// Notification that we are awaiting the given PoVs (by hash) against a\n\t/// specific relay-parent hash.\n\tAwaiting(Hash, Vec<Hash>),\n\t/// Notification of an awaited PoV, in a given relay-parent context.\n\t/// (`relay_parent`, `pov_hash`, `pov`)\n\tSendPoV(Hash, Hash, PoV),\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Collation Data Structure in Rust for Polkadot Parachains\nDESCRIPTION: Defines the Collation struct which represents the output of a collator. It contains upward and horizontal messages, optional new validation code, head data, proof of validity, and message processing information.\nSOURCE: https://github.com/paritytech/polkadot-sdk/blob/master/polkadot/roadmap/implementers-guide/src/node/collators/collation-generation.md#2025-04-21_snippet_0\n\nLANGUAGE: rust\nCODE:\n```\n/// The output of a collator.\n///\n/// This differs from `CandidateCommitments` in two ways:\n///\n/// - does not contain the erasure root; that's computed at the Polkadot level, not at Cumulus\n/// - contains a proof of validity.\npub struct Collation {\n  /// Messages destined to be interpreted by the Relay chain itself.\n  pub upward_messages: Vec<UpwardMessage>,\n  /// The horizontal messages sent by the parachain.\n  pub horizontal_messages: Vec<OutboundHrmpMessage<ParaId>>,\n  /// New validation code.\n  pub new_validation_code: Option<ValidationCode>,\n  /// The head-data produced as a result of execution.\n  pub head_data: HeadData,\n  /// Proof to verify the state transition of the parachain.\n  pub proof_of_validity: PoV,\n  /// The number of messages processed from the DMQ.\n  pub processed_downward_messages: u32,\n  /// The mark which specifies the block number up to which all inbound HRMP messages are processed.\n  pub hrmp_watermark: BlockNumber,\n}\n```\n\n----------------------------------------\n\nTITLE: Defining State and Recovery Structures in Rust\nDESCRIPTION: Defines the core data structures used for availability recovery, including the State struct for tracking ongoing recovery tasks, RecoveryParams for configuring recovery operations, and RecoveryTask for executing the recovery process.\nSOURCE: https://github.com/paritytech/polkadot-sdk/blob/master/polkadot/roadmap/implementers-guide/src/node/availability/availability-recovery.md#2025-04-21_snippet_0\n\nLANGUAGE: rust\nCODE:\n```\n/// Subsystem state.\nstruct State {\n  /// Each recovery task is implemented as its own async task,\n  /// and these handles are for communicating with them.\n  ongoing_recoveries: FuturesUnordered<RecoveryHandle>,\n  /// A recent block hash for which state should be available.\n  live_block: (BlockNumber, Hash),\n  /// An LRU cache of recently recovered data.\n  availability_lru: LruMap<CandidateHash, CachedRecovery>,\n  /// Cached runtime info.\n  runtime_info: RuntimeInfo,\n}\n\nstruct RecoveryParams {\n  /// Discovery ids of `validators`.\n  pub validator_authority_keys: Vec<AuthorityDiscoveryId>,\n  /// Number of validators.\n  pub n_validators: usize,\n  /// The number of regular chunks needed.\n  pub threshold: usize,\n  /// The number of systematic chunks needed.\n  pub systematic_threshold: usize,\n  /// A hash of the relevant candidate.\n  pub candidate_hash: CandidateHash,\n  /// The root of the erasure encoding of the candidate.\n  pub erasure_root: Hash,\n  /// Metrics to report.\n  pub metrics: Metrics,\n  /// Do not request data from availability-store. Useful for collators.\n  pub bypass_availability_store: bool,\n  /// The type of check to perform after available data was recovered.\n  pub post_recovery_check: PostRecoveryCheck,\n  /// The blake2-256 hash of the PoV.\n  pub pov_hash: Hash,\n  /// Protocol name for ChunkFetchingV1.\n  pub req_v1_protocol_name: ProtocolName,\n  /// Protocol name for ChunkFetchingV2.\n  pub req_v2_protocol_name: ProtocolName,\n  /// Whether or not chunk mapping is enabled.\n  pub chunk_mapping_enabled: bool,\n  /// Channel to the erasure task handler.\n\tpub erasure_task_tx: mpsc::Sender<ErasureTask>,\n}\n\npub struct RecoveryTask<Sender: overseer::AvailabilityRecoverySenderTrait> {\n\tsender: Sender,\n\tparams: RecoveryParams,\n\tstrategies: VecDeque<Box<dyn RecoveryStrategy<Sender>>>,\n\tstate: task::State,\n}\n```\n\n----------------------------------------\n\nTITLE: Defining AssignmentCert Struct in Rust\nDESCRIPTION: This struct represents an assignment certificate, containing the kind of certificate and the VRF proof.\nSOURCE: https://github.com/paritytech/polkadot-sdk/blob/master/polkadot/roadmap/implementers-guide/src/types/approval.md#2025-04-21_snippet_2\n\nLANGUAGE: rust\nCODE:\n```\nstruct AssignmentCert {\n    kind: AssignmentCertKind,\n    vrf: (VRFPreOut, VRFProof),\n}\n```\n\n----------------------------------------\n\nTITLE: Explaining XCM-Emulator Limitations in Markdown\nDESCRIPTION: This markdown snippet outlines the limitations of the XCM-Emulator tool. It mentions that certain aspects of the messaging infrastructure and consensus-related features are not fully tested in this emulation environment.\nSOURCE: https://github.com/paritytech/polkadot-sdk/blob/master/cumulus/xcm/xcm-emulator/README.md#2025-04-21_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n## Limitations\n\nAs the messages do not physically go through the same messaging infrastructure\nthere is some code that is not being tested compared to using slower E2E tests.\nIn future it may be possible to run these XCM emulated tests as E2E tests (without changes).\n\nAs well as the XCM message transport being mocked out, so too are areas around consensus,\nin particular things like disputes, staking and iamonline events can't be tested.\n```\n\n----------------------------------------\n\nTITLE: Building a Substrate Node\nDESCRIPTION: Command to build the Substrate node in release mode. This compiles the project without launching it, preparing the binary for execution.\nSOURCE: https://github.com/paritytech/polkadot-sdk/blob/master/templates/solochain/README.md#2025-04-21_snippet_1\n\nLANGUAGE: sh\nCODE:\n```\ncargo build --release\n```\n\n----------------------------------------\n\nTITLE: Assignment Import Handler\nDESCRIPTION: Handles the import of assignments through ApprovalVotingMessage::ImportAssignment, validating and processing assignment certificates.\nSOURCE: https://github.com/paritytech/polkadot-sdk/blob/master/polkadot/roadmap/implementers-guide/src/node/approval/approval-voting.md#2025-04-21_snippet_5\n\nLANGUAGE: markdown\nCODE:\n```\n#### `ApprovalVotingMessage::ImportAssignment`\n\nOn receiving a `ApprovalVotingMessage::ImportAssignment` message, we assume the assignment cert itself has already been checked to be valid we proceed then to import the assignment inside the block entry...\n```\n\n----------------------------------------\n\nTITLE: Implementing Dispute Statement Kind Enums in Rust\nDESCRIPTION: Defines two enums for different kinds of dispute statements - ValidDisputeStatementKind for positive attestations and InvalidDisputeStatementKind for negative attestations.\nSOURCE: https://github.com/paritytech/polkadot-sdk/blob/master/polkadot/roadmap/implementers-guide/src/types/disputes.md#2025-04-21_snippet_2\n\nLANGUAGE: rust\nCODE:\n```\nenum ValidDisputeStatementKind {\n    Explicit,\n    BackingSeconded(Hash),\n    BackingValid(Hash),\n    ApprovalChecking,\n}\n\nenum InvalidDisputeStatementKind {\n    Explicit,\n}\n```\n\n----------------------------------------\n\nTITLE: Misbehaviour Punishment Table in Markdown\nDESCRIPTION: A markdown table summarizing the punishment mechanisms for different types of misbehavior in the Polkadot network, including slash percentages, disabling actions, and reputation costs.\nSOURCE: https://github.com/paritytech/polkadot-sdk/blob/master/polkadot/roadmap/implementers-guide/src/protocol-validator-disabling.md#2025-04-21_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n|Misbehaviour                         |Slash %   |Onchain Disabling  |Offchain Disabling |Chilling |Reputation Costs  |\n|------------                         |-------   |-----------------  |------------------ |-------- |----------------- |\n|Backing Invalid                      |100%      |Yes (High Prio)    |Yes   (High Prio)  |No       |No                |\n|ForInvalid Vote                      |2%        |Yes (Mid Prio)     |Yes   (Mid Prio)   |No       |No                |\n|AgainstValid Vote                    |0%        |Yes (Low Prio)     |Yes   (Low Prio)   |No       |No                |\n|GRANDPA / BABE / BEEFY Equivocations |0.01-100% |Yes (Varying Prio) |No                 |No       |No                |\n|Seconded + Valid Equivocation        |-         |No                 |No                 |No       |No                |\n|Double Seconded Equivocation         |-         |No                 |No                 |No       |Yes               |\n```\n\n----------------------------------------\n\nTITLE: Configuring Parachain Sync Parameters\nDESCRIPTION: Configuration structure for the parachains finality relay, including the set of tracked parachains and sync strategy (Any or All) that affects operational costs.\nSOURCE: https://github.com/paritytech/polkadot-sdk/blob/master/bridges/relays/parachains/README.md#2025-04-21_snippet_1\n\nLANGUAGE: rust\nCODE:\n```\nstruct ParachainSyncParams {\n    parachains: Set<ParaId>,  // Set of parachains to track and update\n    strategy: Strategy,       // Any: submit on any head update, All: wait for all updates\n}\n```\n\n----------------------------------------\n\nTITLE: Listing Available Substrate Benchmarks\nDESCRIPTION: Command to list all available benchmarks across pallets by using wildcards for pallet and extrinsic selection.\nSOURCE: https://github.com/paritytech/polkadot-sdk/blob/master/substrate/frame/benchmarking/README.md#2025-04-21_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\n./target/production/substrate benchmark pallet --chain dev --pallet \"*\" --extrinsic \"*\" --repeat 0\n```\n\n----------------------------------------\n\nTITLE: Formatting Match Expressions in Rust\nDESCRIPTION: Demonstrates proper formatting for match expressions, including block and non-block arms. Shows correct use of trailing commas and return statements.\nSOURCE: https://github.com/paritytech/polkadot-sdk/blob/master/substrate/docs/STYLE_GUIDE.md#2025-04-21_snippet_5\n\nLANGUAGE: rust\nCODE:\n```\nmatch meal {\n\tMeal::Breakfast => \"eggs\",\n\tMeal::Lunch => { check_diet(); recipe() },\n//\tMeal::Dinner => { return Err(\"Fasting\") }   // WRONG\n\tMeal::Dinner => return Err(\"Fasting\"),\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Availability Recovery V1 Message in Rust for Polkadot SDK\nDESCRIPTION: This code defines the AvailabilityRecoveryV1Message enum, which includes message types for requesting and responding with chunks or full data for a given candidate hash in the Availability Recovery subsystem.\nSOURCE: https://github.com/paritytech/polkadot-sdk/blob/master/polkadot/roadmap/implementers-guide/src/types/network.md#2025-04-21_snippet_3\n\nLANGUAGE: rust\nCODE:\n```\nenum AvailabilityRecoveryV1Message {\n\t/// Request a chunk for a given candidate hash and validator index.\n\tRequestChunk(RequestId, CandidateHash, ValidatorIndex),\n\t/// Respond with chunk for a given candidate hash and validator index.\n\t/// The response may be `None` if the requestee does not have the chunk.\n\tChunk(RequestId, Option<ErasureChunk>),\n\t/// Request the full data for a given candidate hash.\n\tRequestFullData(RequestId, CandidateHash),\n\t/// Respond with data for a given candidate hash and validator index.\n\t/// The response may be `None` if the requestee does not have the data.\n\tFullData(RequestId, Option<AvailableData>),\n\n}\n```\n\n----------------------------------------\n\nTITLE: Generating Chain Spec with Default Config\nDESCRIPTION: Command to generate a chain spec using the default configuration from the runtime WASM blob.\nSOURCE: https://github.com/paritytech/polkadot-sdk/blob/master/substrate/bin/utils/chain-spec-builder/README.md#2025-04-21_snippet_1\n\nLANGUAGE: rust\nCODE:\n```\nchain-spec-builder -c \"/dev/stdout\" create -r $runtime_path default\n```\n\n----------------------------------------\n\nTITLE: Manual Relay Chain Setup Process\nDESCRIPTION: Series of commands to manually set up a relay chain for local development. This includes compiling Polkadot binaries, generating a chain spec, and running relay chain nodes for Alice and Bob validators.\nSOURCE: https://github.com/paritytech/polkadot-sdk/blob/master/cumulus/README.md#2025-04-21_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\n# Clone\ngit clone https://github.com/paritytech/polkadot-sdk\n\n# Compile Polkadot's required binaries\ncargo build --release -p polkadot\n\n# Generate a raw chain spec\n./target/release/polkadot build-spec --chain rococo-local --disable-default-bootnode --raw > rococo-local-cfde.json\n\n# Alice\n./target/release/polkadot --chain rococo-local-cfde.json --alice --tmp\n\n# Bob (In a separate terminal)\n./target/release/polkadot --chain rococo-local-cfde.json --bob --tmp --port 30334\n```\n\n----------------------------------------\n\nTITLE: Defining RPC Runtime API for FRAME NFTs Pallet in Rust\nDESCRIPTION: Declares the RPC runtime API trait for the FRAME NFTs pallet. This trait defines the methods that can be called remotely to interact with the NFT functionality.\nSOURCE: https://github.com/paritytech/polkadot-sdk/blob/master/substrate/frame/nfts/runtime-api/README.md#2025-04-21_snippet_0\n\nLANGUAGE: Rust\nCODE:\n```\nsp_api::decl_runtime_apis! {\n\t/// API for NFT pallet RPC.\n\t#[api_version(2)]\n\tpub trait NftsApi<CollectionId, ItemId> {\n\t\t/// Get the owner of the item.\n\t\tfn owner(collection: CollectionId, item: ItemId) -> Option<sp_std::vec::Vec<u8>>;\n\t}\n}\n```\n\n----------------------------------------\n\nTITLE: Defining State Management Structures in Rust\nDESCRIPTION: Data structures for managing the approval voting subsystem state and background requests.\nSOURCE: https://github.com/paritytech/polkadot-sdk/blob/master/polkadot/roadmap/implementers-guide/src/node/approval/approval-voting.md#2025-04-21_snippet_2\n\nLANGUAGE: rust\nCODE:\n```\nstruct ApprovalVoteRequest {\n  validator_index: ValidatorIndex,\n  block_hash: Hash,\n  candidate_index: CandidateIndex,\n}\n\nenum BackgroundRequest {\n  ApprovalVote(ApprovalVoteRequest),\n  // .. others, unspecified as per implementation.\n}\n\nstruct State {\n    earliest_session: SessionIndex,\n    session_info: Vec<SessionInfo>,\n    babe_epoch: Option<BabeEpoch>, // information about a cached BABE epoch.\n    keystore: Keystore,\n\n    // A scheduler which keeps at most one wakeup per hash, candidate hash pair and\n    // maps such pairs to `Tick`s.\n    wakeups: Wakeups,\n\n    // These are connected to each other.\n    background_tx: mpsc::Sender<BackgroundRequest>,\n    background_rx: mpsc::Receiver<BackgroundRequest>,\n}\n```\n\n----------------------------------------\n\nTITLE: Chain Specification Implementation in Rust\nDESCRIPTION: Defines chain's initial (genesis) state configuration and parameters in the chain_spec.rs file.\nSOURCE: https://github.com/paritytech/polkadot-sdk/blob/master/templates/minimal/node/README.md#2025-04-21_snippet_0\n\nLANGUAGE: rust\nCODE:\n```\nchain_spec.rs\n```\n\n----------------------------------------\n\nTITLE: Candidate Metadata Structures in Rust\nDESCRIPTION: Rust structs and enums defining the metadata structure for candidates, including state management and chunk availability tracking.\nSOURCE: https://github.com/paritytech/polkadot-sdk/blob/master/polkadot/roadmap/implementers-guide/src/node/utility/availability-store.md#2025-04-21_snippet_2\n\nLANGUAGE: rust\nCODE:\n```\nstruct CandidateMeta {\n  state: State,\n  data_available: bool,\n  chunks_stored: Bitfield,\n}\n\nenum State {\n  /// Candidate data was first observed at the given time but is not available in any block.\n  Unavailable(Timestamp),\n  /// The candidate was first observed at the given time and was included in the given list of unfinalized blocks, which may be\n  /// empty. The timestamp here is not used for pruning. Either one of these blocks will be finalized or the state will regress to\n  /// `State::Unavailable`, in which case the same timestamp will be reused.\n  Unfinalized(Timestamp, Vec<(BlockNumber, BlockHash)>),\n  /// Candidate data has appeared in a finalized block and did so at the given time.\n  Finalized(Timestamp)\n}\n```\n\n----------------------------------------\n\nTITLE: Describing Runtime API Functionality in Markdown\nDESCRIPTION: Explains the functionality of the Runtime API subsystem, detailing how it processes incoming requests and provides responses.\nSOURCE: https://github.com/paritytech/polkadot-sdk/blob/master/polkadot/roadmap/implementers-guide/src/node/utility/runtime-api.md#2025-04-21_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n## Functionality\n\nOn receipt of `RuntimeApiMessage::Request(relay_parent, request)`, answer the request using the post-state of the\n`relay_parent` provided and provide the response to the side-channel embedded within the request.\n```\n\n----------------------------------------\n\nTITLE: Implementing Statement Distribution Messages in Rust\nDESCRIPTION: Defines message types for the Statement Distribution subsystem that handles distribution of signed statements and candidates between validators.\nSOURCE: https://github.com/paritytech/polkadot-sdk/blob/master/polkadot/roadmap/implementers-guide/src/types/overseer-protocol.md#2025-04-21_snippet_22\n\nLANGUAGE: rust\nCODE:\n```\nenum StatementDistributionMessage {\n    /// An update from the network bridge.\n    NetworkBridgeUpdate(NetworkBridgeEvent<StatementDistributionV1Message>),\n    /// We have validated a candidate and want to share our judgment with our peers.\n    /// The hash is the relay parent.\n    ///\n    /// The statement distribution subsystem assumes that the statement should be correctly\n    /// signed.\n    Share(Hash, SignedFullStatementWithPVD),\n}\n```\n\n----------------------------------------\n\nTITLE: Limiting Unconfirmed Messages in Confirmation Transaction for Messages Module\nDESCRIPTION: This constant limits the number of unconfirmed messages in a confirmation transaction to manage processing weight.\nSOURCE: https://github.com/paritytech/polkadot-sdk/blob/master/bridges/modules/messages/README.md#2025-04-21_snippet_8\n\nLANGUAGE: rust\nCODE:\n```\npallet_bridge_messages::Config::BridgedChain::MAX_UNCONFIRMED_MESSAGES_IN_CONFIRMATION_TX\n```\n\n----------------------------------------\n\nTITLE: Deploying and Managing Substrate Rustdocs using Bash Script\nDESCRIPTION: This snippet demonstrates the usage of the rustdocs-release.sh script for deploying Substrate rustdocs to GitHub Pages, updating the 'latest' symlink, and removing outdated versions. The script is located in the .maintain directory and operates on the gh-pages branch of the Substrate repository.\nSOURCE: https://github.com/paritytech/polkadot-sdk/blob/master/substrate/docs/rustdocs-release.md#2025-04-21_snippet_0\n\nLANGUAGE: Bash\nCODE:\n```\n# Deploy rustdocs of `monthly-2021-10` tag\n.maintain/rustdocs-release.sh deploy monthly-2021-10\n\n# In addition to the above, the `latest` symlink will point to this version of rustdocs\n.maintain/rustdocs-release.sh deploy -l monthly-2021-10\n\n# Remove the rustdocs of `monthly-2021-10` from `gh-pages`.\n.maintain/rustdocs-release.sh remove monthly-2021-10\n```\n\n----------------------------------------\n\nTITLE: Persisting Chain State Between Runs\nDESCRIPTION: Series of commands to set up persistent storage for the blockchain state, including creating a directory structure and running the node with a specified base path.\nSOURCE: https://github.com/paritytech/polkadot-sdk/blob/master/templates/solochain/README.md#2025-04-21_snippet_7\n\nLANGUAGE: sh\nCODE:\n```\n// Create a folder to use as the db base path\n$ mkdir my-chain-state\n\n// Use of that folder to store the chain state\n$ ./target/release/solochain-template-node --dev --base-path ./my-chain-state/\n\n// Check the folder structure created inside the base path after running the chain\n$ ls ./my-chain-state\nchains\n$ ls ./my-chain-state/chains/\ndev\n$ ls ./my-chain-state/chains/dev\ndb keystore network\n```\n\n----------------------------------------\n\nTITLE: Defining Scheduler Pallet Storage Layout in Rust\nDESCRIPTION: This Rust code snippet outlines the storage layout for the Scheduler Pallet, including structures for validator groups, parathread queues, availability cores, and scheduled cores.\nSOURCE: https://github.com/paritytech/polkadot-sdk/blob/master/polkadot/roadmap/implementers-guide/src/runtime/scheduler.md#2025-04-21_snippet_3\n\nLANGUAGE: rust\nCODE:\n```\n/// All the validator groups. One for each core. Indices are into the `ActiveValidators` storage.\nValidatorGroups: Vec<Vec<ValidatorIndex>>;\n/// A queue of upcoming parathread (on-demand parachain) claims and which core they should be mapped onto.\nParathreadQueue: ParathreadQueue;\n/// One entry for each availability core. Entries are `None` if the core is not currently occupied.\n/// The i'th parachain lease belongs to the i'th core, with the remaining cores all being\n/// on-demand parachain-multiplexers.\nAvailabilityCores: Vec<Option<CoreOccupied>>;\n/// An index used to ensure that only one claim on a parathread (on-demand parachain) exists in the queue or is\n/// currently being handled by an occupied core.\nParathreadClaimIndex: Vec<ParaId>;\n/// The block number where the session start occurred. Used to track how many group rotations have occurred.\nSessionStartBlock: BlockNumber;\n/// Currently scheduled cores - free but up to be occupied.\n/// The value contained here will not be valid after the end of a block.\n/// Runtime APIs should be used to determine scheduled cores\n/// for the upcoming block.\nScheduled: Vec<CoreAssignment>, // sorted ascending by CoreIndex.\n```\n\n----------------------------------------\n\nTITLE: Runtime Version Transaction Update - Rust\nDESCRIPTION: Implementation of transaction versioning in the RuntimeVersion affecting version control.\nSOURCE: https://github.com/paritytech/polkadot-sdk/blob/master/substrate/docs/CHANGELOG.md#2025-04-21_snippet_2\n\nLANGUAGE: rust\nCODE:\n```\nTransaction versioning in the RuntimeVersion\n```\n\n----------------------------------------\n\nTITLE: Blockchain Property Definitions in Markdown\nDESCRIPTION: Defines key blockchain properties including viable blocks, viable leaves, stagnant blocks, reverted blocks, and finalizable blocks with their respective conditions.\nSOURCE: https://github.com/paritytech/polkadot-sdk/blob/master/polkadot/roadmap/implementers-guide/src/protocol-chain-selection.md#2025-04-21_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n## Property Definitions\n\nA block is considered **viable** when all of the following hold:\n  1. It is or descends from the finalized block\n  2. It is not **stagnant**\n  3. It is not **reverted**.\n\nA block is considered a **viable leaf** when all of the following hold:\n  1. It is **viable**\n  2. It has no **viable** descendant.\n\nA block is considered **stagnant** when either:\n  1. It is unfinalized, is not approved, and has not been approved within 2 minutes\n  2. Its parent is **stagnant**.\n\nA block is considered **reverted** when either:\n  1. It is unfinalized and includes a candidate which has lost a dispute\n  2. Its parent is **reverted**\n\nA block is considered **finalizable** when all of the following hold:\n  1. It is **viable**\n  2. Its parent, if unfinalized, is **finalizable**.\n  3. It is either finalized or approved.\n  4. It is either finalized or includes no candidates which have unresolved disputes or have lost a dispute.\n```\n\n----------------------------------------\n\nTITLE: Installing Polkadot SDK Dependencies\nDESCRIPTION: Commands to install the required test-parachain and polkadot binaries using cargo. These binaries must be installed before running the tests.\nSOURCE: https://github.com/paritytech/polkadot-sdk/blob/master/cumulus/zombienet/zombienet-sdk/README.md#2025-04-21_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\n# install test-parachain\ncargo install --path ./cumulus/test/service --locked\n# install polkadot\ncargo install --path ./polkadot --locked\n```\n\n----------------------------------------\n\nTITLE: Installing Polkadot SDK Quick Start Script\nDESCRIPTION: A curl command that downloads and executes the getting-started script to quickly set up a Polkadot node.\nSOURCE: https://github.com/paritytech/polkadot-sdk/blob/master/README.md#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ncurl --proto '=https' --tlsv1.2 -sSf https://raw.githubusercontent.com/paritytech/polkadot-sdk/master/scripts/getting-started.sh | bash\n```\n\n----------------------------------------\n\nTITLE: Defining Gateway Interface for Ethereum to Polkadot Transfer\nDESCRIPTION: Solidity interface definition for the Gateway contract to initiate transfers from Ethereum to Polkadot, supporting multiple assets and transfer types.\nSOURCE: https://github.com/paritytech/polkadot-sdk/blob/master/bridges/snowbridge/docs/v2.md#2025-04-21_snippet_3\n\nLANGUAGE: solidity\nCODE:\n```\nenum Kind {\n    Index,\n    Address32,\n    Address20,\n    XCMPayload,\n}\n\nstruct Beneficiary {\n    Kind kind;\n    bytes data;\n}\n\nenum AssetTransferType {\n    ReserveDeposit, ReserveWithdraw, Teleport\n}\n\nstruct Token {\n    AssetTransferType type;\n    address token;\n    uint128 amount;\n}\n\nfunction send(\n  ParaID destinationChain,\n  Beneficiary calldata beneficiary,\n  Token[] tokens,\n  uint128 reward\n) external payable;\n```\n\n----------------------------------------\n\nTITLE: Defining PvfCheckStatement Struct in Rust for Polkadot SDK\nDESCRIPTION: This struct represents a validator's statement about the pre-checking result for a Parachain Validation Function (PVF). It includes fields for the acceptance status, the validation code hash, the session index, and the validator index. This type was introduced in v2 and is valid only for a single session.\nSOURCE: https://github.com/paritytech/polkadot-sdk/blob/master/polkadot/roadmap/implementers-guide/src/types/pvf-prechecking.md#2025-04-21_snippet_0\n\nLANGUAGE: rust\nCODE:\n```\nstruct PvfCheckStatement {\n    /// `true` if the subject passed pre-checking and `false` otherwise.\n    pub accept: bool,\n    /// The validation code hash that was checked.\n    pub subject: ValidationCodeHash,\n    /// The index of a session during which this statement is considered valid.\n    pub session_index: SessionIndex,\n    /// The index of the validator from which this statement originates.\n    pub validator_index: ValidatorIndex,\n}\n```\n\n----------------------------------------\n\nTITLE: Declaring StorageDoubleMap in Substrate Pallet (Rust)\nDESCRIPTION: This snippet declares a StorageDoubleMap named 'SomethingDoubleMap' with two keys of type T::AccountId and u32, and a value of type u128. It uses the ValueQuery storage configuration and includes attributes for setting the prefix and runtime type.\nSOURCE: https://github.com/paritytech/polkadot-sdk/blob/master/substrate/frame/nomination-pools/benchmarking/README.md#2025-04-21_snippet_2\n\nLANGUAGE: rust\nCODE:\n```\n#[pallet::storage]\npub type SomethingDoubleMap<T: Config> = StorageDoubleMap<\n    _,\n    Blake2_128Concat,\n    T::AccountId,\n    Blake2_128Concat,\n    u32,\n    u128,\n    ValueQuery,\n>;\n```\n\n----------------------------------------\n\nTITLE: Defining Required Tranches Enum in Rust for Polkadot Approval Voting\nDESCRIPTION: Defines a Rust enum that represents the possible states when determining required validator tranches for candidate approval. It handles cases where all validators are needed, more assignments are pending, or an exact number of tranches with tolerance for missing votes is sufficient.\nSOURCE: https://github.com/paritytech/polkadot-sdk/blob/master/polkadot/roadmap/implementers-guide/src/node/approval/approval-voting.md#2025-04-21_snippet_15\n\nLANGUAGE: rust\nCODE:\n```\nenum RequiredTranches {\n  // All validators appear to be required, based on tranches already taken and remaining no-shows.\n  All,\n  // More tranches required - We're awaiting more assignments.\n  Pending {\n    /// The highest considered delay tranche when counting assignments.\n    considered: DelayTranche,\n    /// The tick at which the next no-show, of the assignments counted, would occur.\n    next_no_show: Option<Tick>,\n    /// The highest tranche to consider when looking to broadcast own assignment.\n    /// This should be considered along with the clock drift to avoid broadcasting\n    /// assignments that are before the local time.\n    maximum_broadcast: DelayTranche,\n    /// The clock drift, in ticks, to apply to the local clock when determining whether\n    /// to broadcast an assignment or when to schedule a wakeup. The local clock should be treated\n    /// as though it is `clock_drift` ticks earlier.\n    clock_drift: Tick,\n  },\n  // An exact number of required tranches and a number of no-shows. This indicates that the amount of `needed_approvals`\n  // are assigned and additionally all no-shows are covered.\n  Exact {\n    /// The tranche to inspect up to.\n    needed: DelayTranche,\n    /// The amount of missing votes that should be tolerated.\n    tolerated_missing: usize,\n    /// When the next no-show would be, if any. This is used to schedule the next wakeup in the\n    /// event that there are some assignments that don't have corresponding approval votes. If this\n    /// is `None`, all assignments have approvals.\n    next_no_show: Option<Tick>,\n    /// The last tick at which a needed assignment was received.\n    last_assignment_tick: Option<Tick>,\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Validation Protocol V1 in Rust for Polkadot SDK\nDESCRIPTION: This snippet defines the ValidationProtocolV1 enum, which includes message types for various subsystems in the validation peer-set, such as Approval Distribution, Availability Distribution, and Statement Distribution.\nSOURCE: https://github.com/paritytech/polkadot-sdk/blob/master/polkadot/roadmap/implementers-guide/src/types/network.md#2025-04-21_snippet_8\n\nLANGUAGE: rust\nCODE:\n```\nenum ValidationProtocolV1 {\n\tApprovalDistribution(ApprovalDistributionV1Message),\n\tAvailabilityDistribution(AvailabilityDistributionV1Message),\n\tAvailabilityRecovery(AvailabilityRecoveryV1Message),\n\tBitfieldDistribution(BitfieldDistributionV1Message),\n\tPoVDistribution(PoVDistributionV1Message),\n\tStatementDistribution(StatementDistributionV1Message),\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Chain Selection Messages in Rust\nDESCRIPTION: Defines message types for chain selection operations, including block approval signaling and leaf management.\nSOURCE: https://github.com/paritytech/polkadot-sdk/blob/master/polkadot/roadmap/implementers-guide/src/types/overseer-protocol.md#2025-04-21_snippet_12\n\nLANGUAGE: rust\nCODE:\n```\nenum ChainSelectionMessage {\n    Approved(Hash),\n    Leaves(ResponseChannel<Vec<Hash>>),\n    BestLeafContaining(Hash, ResponseChannel<Option<Hash>>),\n}\n```\n\n----------------------------------------\n\nTITLE: Rejecting Outbound Messages in Rust using ForbidOutboundMessages\nDESCRIPTION: This snippet shows how to use the ForbidOutboundMessages structure to reject all outbound messages in a Polkadot SDK runtime.\nSOURCE: https://github.com/paritytech/polkadot-sdk/blob/master/bridges/modules/messages/README.md#2025-04-21_snippet_4\n\nLANGUAGE: rust\nCODE:\n```\nbp_messages::source_chain::ForbidOutboundMessages\n```\n\n----------------------------------------\n\nTITLE: Defining IHaveVotesRequest Struct for Vote Recovery Protocol in Rust\nDESCRIPTION: This struct represents a request in the vote recovery protocol. It contains a candidate hash, session index, and bitfields for valid and invalid votes to indicate which votes the requester has.\nSOURCE: https://github.com/paritytech/polkadot-sdk/blob/master/polkadot/roadmap/implementers-guide/src/node/disputes/dispute-distribution.md#2025-04-21_snippet_4\n\nLANGUAGE: rust\nCODE:\n```\nstruct IHaveVotesRequest {\n  candidate_hash: CandidateHash,\n  session: SessionIndex,\n  valid_votes: Bitfield,\n  invalid_votes: Bitfield,\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Statement Distribution V1 Message in Rust for Polkadot SDK\nDESCRIPTION: This snippet defines the StatementDistributionV1Message enum, which includes a message type for distributing signed full statements under a given relay-parent in the Statement Distribution subsystem.\nSOURCE: https://github.com/paritytech/polkadot-sdk/blob/master/polkadot/roadmap/implementers-guide/src/types/network.md#2025-04-21_snippet_6\n\nLANGUAGE: rust\nCODE:\n```\nenum StatementDistributionV1Message {\n\t/// A signed full statement under a given relay-parent.\n\tStatement(Hash, SignedFullStatement)\n}\n```\n\n----------------------------------------\n\nTITLE: Pruning Upgrade Cooldowns Process Description\nDESCRIPTION: Documents the process of collecting and pruning para_ids with expired upgrade cooldowns (where next_possible_upgrade_at is less than or equal to current time) and removing their associated UpgradeRestrictionSignal.\nSOURCE: https://github.com/paritytech/polkadot-sdk/blob/master/polkadot/roadmap/implementers-guide/src/runtime/paras.md#2025-04-21_snippet_2\n\nLANGUAGE: markdown\nCODE:\n```\n## Finalization\n\nCollect all `(para_id, next_possible_upgrade_at)` from `UpgradeCooldowns` where `next_possible_upgrade_at <= now` and\nprune them. For each para pruned remove its `UpgradeRestrictionSignal`.\n```\n\n----------------------------------------\n\nTITLE: Signing and Verifying Messages\nDESCRIPTION: Commands for signing messages with private keys and verifying signatures using public keys.\nSOURCE: https://github.com/paritytech/polkadot-sdk/blob/master/substrate/bin/utils/subkey/README.md#2025-04-21_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\necho -n $MESSAGE | subkey sign --suri $SURI\n```\n\nLANGUAGE: bash\nCODE:\n```\necho -n $MESSAGE | subkey verify $SIGNATURE $URI\n```\n\n----------------------------------------\n\nTITLE: Markdown Documentation for Salary Payment System\nDESCRIPTION: Documentation header explaining the purpose of the salary payment system for ranked collective members. The system is designed to handle periodic payments where amounts vary based on member rank levels.\nSOURCE: https://github.com/paritytech/polkadot-sdk/blob/master/substrate/frame/salary/README.md#2025-04-21_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n# Salary\n\nMake periodic payment to members of a ranked collective according to rank.\n```\n\n----------------------------------------\n\nTITLE: Querying Availability Cores in Rust for Polkadot SDK\nDESCRIPTION: This function retrieves information on all availability cores at a given block. It returns a vector of CoreState, which can be Occupied, Scheduled, or Free.\nSOURCE: https://github.com/paritytech/polkadot-sdk/blob/master/polkadot/roadmap/implementers-guide/src/runtime-api/availability-cores.md#2025-04-21_snippet_0\n\nLANGUAGE: rust\nCODE:\n```\nfn availability_cores(at: Block) -> Vec<CoreState>;\n```\n\n----------------------------------------\n\nTITLE: Child Trie API Changes - Rust\nDESCRIPTION: Breaking changes to the child trie API implementation affecting storage hierarchy.\nSOURCE: https://github.com/paritytech/polkadot-sdk/blob/master/substrate/docs/CHANGELOG.md#2025-04-21_snippet_1\n\nLANGUAGE: rust\nCODE:\n```\nChild trie api changes BREAKING\n```\n\n----------------------------------------\n\nTITLE: Defining Occupied Core Structure in Rust for Polkadot SDK\nDESCRIPTION: This struct represents an occupied core, containing information about its current state, upcoming assignments, and availability status. It's crucial for understanding the current state of parachain blocks in the network.\nSOURCE: https://github.com/paritytech/polkadot-sdk/blob/master/polkadot/roadmap/implementers-guide/src/runtime-api/availability-cores.md#2025-04-21_snippet_1\n\nLANGUAGE: rust\nCODE:\n```\nstruct OccupiedCore {\n    next_up_on_available: Option<ScheduledCore>,\n    occupied_since: BlockNumber,\n    time_out_at: BlockNumber,\n    next_up_on_time_out: Option<ScheduledCore>,\n    availability: Bitfield,\n    group_responsible: GroupIndex,\n    candidate_hash: CandidateHash,\n    candidate_descriptor: CandidateDescriptor,\n}\n```\n\n----------------------------------------\n\nTITLE: Testing Benchmark Function Signature in Rust\nDESCRIPTION: Function signature showing the standard format for test benchmark functions that are automatically generated by the benchmarks! macro.\nSOURCE: https://github.com/paritytech/polkadot-sdk/blob/master/substrate/frame/benchmarking/README.md#2025-04-21_snippet_0\n\nLANGUAGE: rust\nCODE:\n```\nfn test_benchmark_[benchmark_name]<T>::() -> Result<(), &'static str>\n```\n\n----------------------------------------\n\nTITLE: Markdown Documentation for Uniques Module Interface\nDESCRIPTION: Comprehensive markdown documentation detailing the interface of the Uniques module, including permissionless, permissioned, metadata, and force dispatchables for NFT management.\nSOURCE: https://github.com/paritytech/polkadot-sdk/blob/master/substrate/frame/uniques/README.md#2025-04-21_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n# Uniques Module\n\nA simple, secure module for dealing with non-fungible assets.\n\n## Overview\n\nThe Uniques module provides functionality for non-fungible tokens' management, including:\n\n* Collection Creation\n* Item Minting\n* Item Transfers\n* Item Trading methods\n* Attributes Management\n* Item Burning\n```\n\n----------------------------------------\n\nTITLE: Collecting Pending Cores in Rust\nDESCRIPTION: A function that sweeps through all paras pending availability and cleans up storage based on a predicate. It returns a vector of cleaned-up core IDs.\nSOURCE: https://github.com/paritytech/polkadot-sdk/blob/master/polkadot/roadmap/implementers-guide/src/runtime/inclusion.md#2025-04-21_snippet_2\n\nLANGUAGE: rust\nCODE:\n```\nfn collect_pending(f: impl Fn(CoreIndex, BlockNumber) -> bool) -> Vec<CoreIndex> {\n  // sweep through all paras pending availability. if the predicate returns true, when given the core index and\n  // the block number the candidate has been pending availability since, then clean up the corresponding storage for that candidate and the commitments.\n  // return a vector of cleaned-up core IDs.\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Storage Layout for Shared Pallet\nDESCRIPTION: Declares the storage items for the pallet including current session index, active validator indices and keys, and allowed relay parents tracker. These storage items maintain the state needed for parachain consensus.\nSOURCE: https://github.com/paritytech/polkadot-sdk/blob/master/polkadot/roadmap/implementers-guide/src/runtime/shared.md#2025-04-21_snippet_2\n\nLANGUAGE: rust\nCODE:\n```\nCurrentSessionIndex: SessionIndex;\nActiveValidatorIndices: Vec<ValidatorIndex>,\nActiveValidatorKeys: Vec<ValidatorId>\nAllowedRelayParents: AllowedRelayParentsTracker<T::Hash, T::BlockNumber>,\n```\n\n----------------------------------------\n\nTITLE: Querying Candidate Inclusion Status in Rust\nDESCRIPTION: This function checks whether given candidates have been included in the chain. It takes a vector of session index and candidate hash pairs as input and returns a vector of boolean values indicating inclusion status. The input and output vectors have the same length.\nSOURCE: https://github.com/paritytech/polkadot-sdk/blob/master/polkadot/roadmap/implementers-guide/src/runtime-api/candidates-included.md#2025-04-21_snippet_0\n\nLANGUAGE: rust\nCODE:\n```\n/// Input and output have the same length.\nfn candidates_included(Vec<(SessionIndex, CandidateHash)>) -> Vec<bool>;\n```\n\n----------------------------------------\n\nTITLE: Setting Operating Mode in Rust for Messages Module\nDESCRIPTION: This function allows the module owner or sudo account to pause or resume pallet operations by setting different operating modes.\nSOURCE: https://github.com/paritytech/polkadot-sdk/blob/master/bridges/modules/messages/README.md#2025-04-21_snippet_10\n\nLANGUAGE: rust\nCODE:\n```\nfn set_operating_mode()\n```\n\n----------------------------------------\n\nTITLE: Defining DisputeResponse Enum for Dispute Distribution Protocol in Rust\nDESCRIPTION: This enum defines the response format for the dispute distribution protocol. Currently, it only contains a Confirmed variant to acknowledge receipt of a dispute.\nSOURCE: https://github.com/paritytech/polkadot-sdk/blob/master/polkadot/roadmap/implementers-guide/src/node/disputes/dispute-distribution.md#2025-04-21_snippet_3\n\nLANGUAGE: rust\nCODE:\n```\nenum DisputeResponse {\n  Confirmed\n}\n```\n\n----------------------------------------\n\nTITLE: Working with Password-Protected Keys\nDESCRIPTION: Commands demonstrating key generation and inspection with additional password protection.\nSOURCE: https://github.com/paritytech/polkadot-sdk/blob/master/substrate/bin/utils/subkey/README.md#2025-04-21_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nsubkey generate --password extra_secret\n```\n\nLANGUAGE: bash\nCODE:\n```\nsubkey inspect \"soup lyrics media market way crouch elevator put moon useful question wide\"\n```\n\nLANGUAGE: bash\nCODE:\n```\nsubkey inspect --password extra_secret \"soup lyrics media market way crouch elevator put moon useful question wide\"\n```\n\n----------------------------------------\n\nTITLE: Explaining Configuration Options in Markdown\nDESCRIPTION: This snippet describes two configuration options available in the pallet: WeightToFee for mapping weight to fee, and FeeMultiplierUpdate for updating fees based on the previous block's state.\nSOURCE: https://github.com/paritytech/polkadot-sdk/blob/master/substrate/frame/transaction-payment/README.md#2025-04-21_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n  - The mapping between one unit of weight to one unit of fee via [`Config::WeightToFee`].\n  - A means of updating the fee for the next block, via defining a multiplier, based on the\n    final state of the chain at the end of the previous block. This can be configured via\n    [`Config::FeeMultiplierUpdate`]\n```\n\n----------------------------------------\n\nTITLE: Implementing Network Bridge Message Types in Rust\nDESCRIPTION: Defines the message types for the Network Bridge subsystem, which manages low-level networking connections between validators and collators. Includes peer sets, messages for reporting peers, connecting to validators, and managing network topology.\nSOURCE: https://github.com/paritytech/polkadot-sdk/blob/master/polkadot/roadmap/implementers-guide/src/types/overseer-protocol.md#2025-04-21_snippet_17\n\nLANGUAGE: rust\nCODE:\n```\n/// Peer-sets handled by the network bridge.\nenum PeerSet {\n    /// The collation peer-set is used to distribute collations from collators to validators.\n    Collation,\n    /// The validation peer-set is used to distribute information relevant to parachain\n    /// validation among validators. This may include nodes which are not validators,\n    /// as some protocols on this peer-set are expected to be gossip.\n    Validation,\n}\n\nenum NetworkBridgeMessage {\n    /// Report a cost or benefit of a peer. Negative values are costs, positive are benefits.\n    ReportPeer(PeerId, cost_benefit: i32),\n    /// Disconnect a peer from the given peer-set without affecting their reputation.\n    DisconnectPeer(PeerId, PeerSet),\n    /// Send a message to one or more peers on the validation peerset.\n    SendValidationMessage([PeerId], ValidationProtocolV1),\n    /// Send a message to one or more peers on the collation peerset.\n    SendCollationMessage([PeerId], ValidationProtocolV1),\n    /// Send multiple validation messages.\n    SendValidationMessages([([PeerId, ValidationProtocolV1])]),\n    /// Send multiple collation messages.\n    SendCollationMessages([([PeerId, ValidationProtocolV1])]),\n    /// Connect to peers who represent the given `validator_ids`.\n    ///\n    /// Also ask the network to stay connected to these peers at least\n    /// until a new request is issued.\n    ///\n    /// Because it overrides the previous request, it must be ensured\n    /// that `validator_ids` include all peers the subsystems\n    /// are interested in (per `PeerSet`).\n    ///\n    /// A caller can learn about validator connections by listening to the\n    /// `PeerConnected` events from the network bridge.\n    ConnectToValidators {\n        /// Ids of the validators to connect to.\n        validator_ids: HashSet<AuthorityDiscoveryId>,\n        /// The underlying protocol to use for this request.\n        peer_set: PeerSet,\n        /// Sends back the number of `AuthorityDiscoveryId`s which\n        /// authority discovery has failed to resolve.\n        failed: oneshot::Sender<usize>,\n    },\n    /// Inform the distribution subsystems about the new\n    /// gossip network topology formed.\n    NewGossipTopology {\n\t\t/// The session info this gossip topology is concerned with.\n\t\tsession: SessionIndex,\n\t\t/// Our validator index in the session, if any.\n\t\tlocal_index: Option<ValidatorIndex>,\n\t\t/// The canonical shuffling of validators for the session.\n\t\tcanonical_shuffling: Vec<(AuthorityDiscoveryId, ValidatorIndex)>,\n\t\t/// The reverse mapping of `canonical_shuffling`: from validator index\n\t\t/// to the index in `canonical_shuffling`\n\t\tshuffled_indices: Vec<usize>,\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Runtime API Message Protocol in Markdown\nDESCRIPTION: Specifies the input and output protocol for the Runtime API subsystem. It receives RuntimeApiMessage as input and produces no output.\nSOURCE: https://github.com/paritytech/polkadot-sdk/blob/master/polkadot/roadmap/implementers-guide/src/node/utility/runtime-api.md#2025-04-21_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n## Protocol\n\nInput: [`RuntimeApiMessage`](../../types/overseer-protocol.md#runtime-api-message)\n\nOutput: None\n```\n\n----------------------------------------\n\nTITLE: Candidate Backing and PoV Fetching Process in Polkadot SDK (Mermaid)\nDESCRIPTION: This diagram shows the interaction between StatementDistribution, CandidateBacking, PoVDistribution, and AvailabilityStore subsystems during the candidate backing and PoV fetching process.\nSOURCE: https://github.com/paritytech/polkadot-sdk/blob/master/polkadot/roadmap/implementers-guide/src/node/subsystems-and-jobs.md#2025-04-21_snippet_6\n\nLANGUAGE: mermaid\nCODE:\n```\nsequenceDiagram\n    participant SD as StatementDistribution\n    participant CB as CandidateBacking\n    participant PD as PoVDistribution\n    participant AS as AvailabilityStore\n\n    SD ->> CB: Statement\n    % CB::maybe_validate_and_import => CB::kick_off_validation_work\n    CB -->> PD: FetchPoV\n    Note over CB,PD: This call creates the Listener from the previous diagram\n\n    CB ->> AS: StoreAvailableData\n```\n\n----------------------------------------\n\nTITLE: Defining HrmpChannelId Structure in Rust for Polkadot\nDESCRIPTION: This snippet defines the HrmpChannelId structure, which uniquely identifies an HRMP channel between two parachains. It contains sender and recipient ParaIds.\nSOURCE: https://github.com/paritytech/polkadot-sdk/blob/master/polkadot/roadmap/implementers-guide/src/types/messages.md#2025-04-21_snippet_1\n\nLANGUAGE: rust\nCODE:\n```\nstruct HrmpChannelId {\n    sender: ParaId,\n    recipient: ParaId,\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Signed Availability Bitfield in Rust\nDESCRIPTION: Defines the SignedAvailabilityBitfield type and Bitfields struct. SignedAvailabilityBitfield is a signed bitvector representing a validator's view of data availability for each availability core.\nSOURCE: https://github.com/paritytech/polkadot-sdk/blob/master/polkadot/roadmap/implementers-guide/src/types/availability.md#2025-04-21_snippet_0\n\nLANGUAGE: rust\nCODE:\n```\ntype SignedAvailabilityBitfield = Signed<Bitvec>;\n\nstruct Bitfields(Vec<(SignedAvailabilityBitfield)>), // bitfields sorted by validator index, ascending\n```\n\n----------------------------------------\n\nTITLE: Defining AssignmentCertKind Enum in Rust\nDESCRIPTION: This enum defines the kinds of assignment certificates used in the approval process. It includes RelayVRFModulo and RelayVRFDelay variants.\nSOURCE: https://github.com/paritytech/polkadot-sdk/blob/master/polkadot/roadmap/implementers-guide/src/types/approval.md#2025-04-21_snippet_0\n\nLANGUAGE: rust\nCODE:\n```\nenum AssignmentCertKind {\n    RelayVRFModulo {\n        sample: u32,\n    },\n    RelayVRFDelay {\n        core_index: CoreIndex,\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Displaying Substrate Benchmark Help\nDESCRIPTION: Command to show all available options and parameters for the benchmark functionality.\nSOURCE: https://github.com/paritytech/polkadot-sdk/blob/master/substrate/frame/benchmarking/README.md#2025-04-21_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\n./target/production/substrate benchmark --help\n```\n\n----------------------------------------\n\nTITLE: Starting Minimal Template Node\nDESCRIPTION: Commands to start the minimal template node either directly or via Docker\nSOURCE: https://github.com/paritytech/polkadot-sdk/blob/master/templates/minimal/README.md#2025-04-21_snippet_5\n\nLANGUAGE: sh\nCODE:\n```\n<target/release/path/to/minimal-template-node> --tmp --consensus manual-seal-3000\n# or via docker\ndocker run --rm polkadot-sdk-minimal-template\n```\n\n----------------------------------------\n\nTITLE: Querying Validators Using Session Pallet in Rust\nDESCRIPTION: Example function demonstrating how to retrieve the validator set from the Session pallet using the Staking pallet integration. The function returns a vector of validator IDs for the current session.\nSOURCE: https://github.com/paritytech/polkadot-sdk/blob/master/substrate/frame/session/README.md#2025-04-21_snippet_0\n\nLANGUAGE: rust\nCODE:\n```\nuse pallet_session as session;\n\nfn validators<T: pallet_session::Config>() -> Vec<<T as pallet_session::Config>::ValidatorId> {\n\tpallet_session::Validators::<T>::get()\n}\n```\n\n----------------------------------------\n\nTITLE: Recovery Pallet Function Interface\nDESCRIPTION: List of dispatchable functions provided by the Recovery pallet for account recovery management. Includes functions for configuration, initiation, vouching, and claim management.\nSOURCE: https://github.com/paritytech/polkadot-sdk/blob/master/substrate/frame/recovery/README.md#2025-04-21_snippet_0\n\nLANGUAGE: rust\nCODE:\n```\n// General User Functions\ncreate_recovery() // Create recovery configuration\ninitiate_recovery() // Start recovery process\n\n// Friend Functions\nvouch_recovery() // Vouch for recovery attempt\n\n// Recovery Management\nclaim_recovery() // Claim recovered account access\nas_recovered() // Send transaction as recovered account\n\n// Account Management\nclose_recovery() // Close active recovery process\nremove_recovery() // Remove recovery configuration\n\n// Admin Functions\nset_recovered() // ROOT direct recovery assignment\n```\n\n----------------------------------------\n\nTITLE: Initializing Bridge GRANDPA Pallet\nDESCRIPTION: The initialize call allows setting the initial header and validators set, especially useful when adding a bridge to an already started chain. This call can be made by governance, root, or the pallet owner.\nSOURCE: https://github.com/paritytech/polkadot-sdk/blob/master/bridges/modules/grandpa/README.md#2025-04-21_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\ninitialize\n```\n\n----------------------------------------\n\nTITLE: HRMP Session Change Procedures\nDESCRIPTION: Documentation of session change procedures for HRMP channels, including handling of outgoing parachains, channel requests, and channel closure requests.\nSOURCE: https://github.com/paritytech/polkadot-sdk/blob/master/polkadot/roadmap/implementers-guide/src/runtime/hrmp.md#2025-04-21_snippet_3\n\nLANGUAGE: markdown\nCODE:\n```\n1. For each `P` in `outgoing_paras` (generated by `Paras::on_new_session`):\n    1. Remove all inbound channels of `P`, i.e. `(_, P)`,\n    1. Remove all outbound channels of `P`, i.e. `(P, _)`,\n    1. Remove `HrmpOpenChannelRequestCount` for `P`\n```\n\n----------------------------------------\n\nTITLE: Defining Network Bridge Event Structures in Rust for Polkadot SDK\nDESCRIPTION: This snippet defines structures and enums for Network Bridge Events, including NewGossipTopology, SessionGridTopology, TopologyPeerInfo, and NetworkBridgeEvent. These are used for communicating network events and topology changes between subsystems.\nSOURCE: https://github.com/paritytech/polkadot-sdk/blob/master/polkadot/roadmap/implementers-guide/src/types/network.md#2025-04-21_snippet_10\n\nLANGUAGE: rust\nCODE:\n```\nstruct NewGossipTopology {\n\t/// The session index this topology corresponds to.\n\tsession: SessionIndex,\n\t/// The topology itself.\n\ttopology: SessionGridTopology,\n\t/// The local validator index, if any.\n\tlocal_index: Option<ValidatorIndex>,\n}\n\nstruct SessionGridTopology {\n\t/// An array mapping validator indices to their indices in the\n\t/// shuffling itself. This has the same size as the number of validators\n\t/// in the session.\n\tshuffled_indices: Vec<usize>,\n\t/// The canonical shuffling of validators for the session.\n\tcanonical_shuffling: Vec<TopologyPeerInfo>,\n}\n\nstruct TopologyPeerInfo {\n\t/// The validator's known peer IDs.\n\tpeer_ids: Vec<PeerId>,\n\t/// The index of the validator in the discovery keys of the corresponding\n\t/// `SessionInfo`. This can extend _beyond_ the set of active parachain validators.\n\tvalidator_index: ValidatorIndex,\n\t/// The authority discovery public key of the validator in the corresponding\n\t/// `SessionInfo`.\n\tdiscovery_id: AuthorityDiscoveryId,\n}\n\nenum NetworkBridgeEvent<M> {\n\t/// A peer with given ID is now connected.\n\tPeerConnected(PeerId, ObservedRole, ProtocolVersion, Option<HashSet<AuthorityDiscoveryId>>),\n\t/// A peer with given ID is now disconnected.\n\tPeerDisconnected(PeerId),\n\t/// Our neighbors in the new gossip topology.\n\t/// We're not necessarily connected to all of them.\n\t///\n\t/// This message is issued only on the validation peer set.\n\t///\n\t/// Note, that the distribution subsystems need to handle the last\n\t/// view update of the newly added gossip peers manually.\n\tNewGossipTopology(NewGossipTopology),\n\t/// We received a message from the given peer.\n\tPeerMessage(PeerId, M),\n\t/// The given peer has updated its description of its view.\n\tPeerViewChange(PeerId, View), // guaranteed to come after peer connected event.\n\t/// We have posted the given view update to all connected peers.\n\tOurViewChange(View),\n}\n```\n\n----------------------------------------\n\nTITLE: Updating Pallet Trait to Config for Runtime\nDESCRIPTION: Changes required to update pallet trait implementations from ::Trait to ::Config for the Runtime.\nSOURCE: https://github.com/paritytech/polkadot-sdk/blob/master/substrate/docs/Upgrading-2.0-to-3.0.md#2025-04-21_snippet_1\n\nLANGUAGE: rust\nCODE:\n```\nimpl pallet_sudo::Config for Runtime {\n```\n\n----------------------------------------\n\nTITLE: Formatting Function with Complex Calculations in Rust\nDESCRIPTION: Demonstrates proper indentation and line wrapping for a function with complex calculations. Shows how to handle long variable names and mathematical operations across multiple lines.\nSOURCE: https://github.com/paritytech/polkadot-sdk/blob/master/docs/contributor/STYLE_GUIDE.md#2025-04-21_snippet_0\n\nLANGUAGE: rust\nCODE:\n```\nfn calculation(some_long_variable_a: i8, some_long_variable_b: i8) -> bool {\n\tlet x = some_long_variable_a * some_long_variable_b\n\t\t- some_long_variable_b / some_long_variable_a\n\t\t+ sqrt(some_long_variable_a) - sqrt(some_long_variable_b);\n\tx > 10\n}\n```\n\n----------------------------------------\n\nTITLE: Defining AssignmentCertKindV2 Enum in Rust\nDESCRIPTION: This enum defines an updated version of assignment certificate kinds, including RelayVRFModuloCompact, RelayVRFDelay, and a deprecated RelayVRFModulo variant.\nSOURCE: https://github.com/paritytech/polkadot-sdk/blob/master/polkadot/roadmap/implementers-guide/src/types/approval.md#2025-04-21_snippet_1\n\nLANGUAGE: rust\nCODE:\n```\nenum AssignmentCertKindV2 {\n    RelayVRFModuloCompact {\n        core_bitfield: CoreBitfield,\n    },\n    RelayVRFDelay {\n        core_index: CoreIndex,\n    },\n    RelayVRFModulo {\n        sample: u32,\n    },\n}\n```\n\n----------------------------------------\n\nTITLE: Running Polkadot Parachain with Relay Chain Light Client\nDESCRIPTION: Command to run a parachain node with an internal relay chain light client. This approach provides a fast and lightweight connection to the relay chain network while still requiring a relay chain chain-spec.\nSOURCE: https://github.com/paritytech/polkadot-sdk/blob/master/cumulus/README.md#2025-04-21_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\npolkadot-parachain \\\n\t--chain parachain-chainspec.json \\\n\t--tmp \\\n\t--relay-chain-light-client \\\n\t-- \\\n\t--chain relaychain-chainspec.json\n```\n\n----------------------------------------\n\nTITLE: Routines in Polkadot Scheduler Module\nDESCRIPTION: Lists and describes various routines implemented in the Scheduler module, including adding parathread claims, freeing cores, scheduling, and managing core assignments.\nSOURCE: https://github.com/paritytech/polkadot-sdk/blob/master/polkadot/roadmap/implementers-guide/src/runtime/scheduler.md#2025-04-21_snippet_6\n\nLANGUAGE: markdown\nCODE:\n```\n- `add_parathread_claim(ParathreadClaim)`: Add a parathread (on-demand parachain) claim to the queue.\n  - Fails if any on-demand claim on the same parachain is currently indexed.\n  - Fails if the queue length is >= `config.scheduling_lookahead * config.parathread_cores`.\n  - The core used for the on-demand claim is the `next_core` field of the `ParathreadQueue` (on-demand queue) and adding\n    `paras::Parachains::<T>::get().len()` to it.\n  - `next_core` is then updated by adding 1 and taking it modulo `config.parathread_cores`.\n  - The claim is then added to the claim index.\n- `free_cores(Vec<(CoreIndex, FreedReason)>)`: indicate previously-occupied cores which are to be considered returned\n  and why they are being returned.\n  - All freed lease holding parachain cores should be assigned to their respective parachain\n  - All freed on-demand parachain cores whose reason for freeing was `FreedReason::Concluded` should have the claim\n    removed from the claim index.\n  - All freed on-demand cores whose reason for freeing was `FreedReason::TimedOut` should have the claim added to the\n    parathread queue (on-demand queue) again without retries incremented\n  - All freed on-demand cores should take the next on-demand parachain entry from the queue.\n- `schedule(Vec<(CoreIndex, FreedReason)>, now: BlockNumber)`: schedule new core assignments, with a parameter\n  indicating previously-occupied cores which are to be considered returned and why they are being returned.\n  - Invoke `free_cores(freed_cores)`\n  - The i'th validator group will be assigned to the `(i+k)%n`'th core at any point in time, where `k` is the number of\n    rotations that have occurred in the session, and `n` is the total number of cores. This makes upcoming rotations\n    within the same session predictable. Rotations are based off of `now`.\n- `scheduled() -> Vec<CoreAssignment>`: Get currently scheduled core assignments.\n- `occupied(Vec<CoreIndex>)`. Note that the given cores have become occupied.\n  - Behavior undefined if any given cores were not scheduled.\n  - Behavior undefined if the given cores are not sorted ascending by core index\n  - This clears them from `Scheduled` and marks each corresponding `core` in the `AvailabilityCores` as occupied.\n  - Since both the availability cores and the newly-occupied cores lists are sorted ascending, this method can be\n    implemented efficiently.\n- `group_validators(GroupIndex) -> Option<Vec<ValidatorIndex>>`: return all validators in a given group, if the group\n  index is valid for this session.\n- `availability_timeout_predicate() -> Option<impl Fn(CoreIndex, BlockNumber) -> bool>`: returns an optional predicate\n  that should be used for timing out occupied cores. if `None`, no timing-out should be done. The predicate accepts the\n  index of the core, and the block number since which it has been occupied. The predicate should be implemented based on\n  the time since the last validator group rotation, and the respective parachain timeouts, i.e. only within\n  `max(config.chain_availability_period, config.thread_availability_period)` of the last rotation would this return\n  `Some`.\n- `group_rotation_info(now: BlockNumber) -> GroupRotationInfo`: Returns a helper for determining group rotation.\n- `next_up_on_available(CoreIndex) -> Option<ScheduledCore>`: Return the next thing that will be scheduled on this core\n  assuming it is currently occupied and the candidate occupying it became available. Returns in `ScheduledCore` format\n  (todo: link to Runtime APIs page; linkcheck doesn't allow this right now). For lease holding parachains, this is\n  always the ID of the parachain and no specified collator. For on-demand parachains, this is based on the next item in\n  the `ParathreadQueue` (on-demand queue) assigned to that core, and is `None` if there isn't one.\n- `next_up_on_time_out(CoreIndex) -> Option<ScheduledCore>`: Return the next thing that will be scheduled on this core\n  assuming it is currently occupied and the candidate occupying it timed out. Returns in `ScheduledCore` format (todo:\n  link to Runtime APIs page; linkcheck doesn't allow this right now). For parachains, this is always the ID of the\n  parachain and no specified collator. For on-demand parachains, this is based on the next item in the `ParathreadQueue`\n  (on-demand queue) assigned to that core, or if there isn't one, the claim that is currently occupying the core.\n  Otherwise `None`.\n- `clear()`:\n  - Free all scheduled cores and return on-demand claims to queue, with retries incremented. Skip on-demand parachains\n    which no longer exist under paras.\n```\n\n----------------------------------------\n\nTITLE: Storage Function Declaration - Rust\nDESCRIPTION: Requires fn token in decl_storage get function declarations.\nSOURCE: https://github.com/paritytech/polkadot-sdk/blob/master/substrate/docs/CHANGELOG.md#2025-04-21_snippet_3\n\nLANGUAGE: rust\nCODE:\n```\ndecl_storage `get`\n```\n\n----------------------------------------\n\nTITLE: Running Polkadot Parachain with In-process Relay Chain Node\nDESCRIPTION: Command to run a parachain node with an in-process relay chain node. This approach spawns a full relay chain node within the same process, requiring the node to fully sync with the relay chain.\nSOURCE: https://github.com/paritytech/polkadot-sdk/blob/master/cumulus/README.md#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\npolkadot-parachain \\\n\t--chain parachain-chainspec.json \\\n\t--tmp \\\n\t-- \\\n\t--chain relaychain-chainspec.json\n```\n\n----------------------------------------\n\nTITLE: Defining Bitfield Distribution V1 Message in Rust for Polkadot SDK\nDESCRIPTION: This snippet defines the BitfieldDistributionV1Message enum, which includes a message type for distributing signed availability bitfields for a given relay-parent hash in the Bitfield Distribution subsystem.\nSOURCE: https://github.com/paritytech/polkadot-sdk/blob/master/polkadot/roadmap/implementers-guide/src/types/network.md#2025-04-21_snippet_4\n\nLANGUAGE: rust\nCODE:\n```\nenum BitfieldDistributionV1Message {\n\t/// A signed availability bitfield for a given relay-parent hash.\n\tBitfield(Hash, SignedAvailabilityBitfield),\n}\n```\n\n----------------------------------------\n\nTITLE: Registering Parachain Block Validation in Rust\nDESCRIPTION: Macro call to register the validate_block function required by Polkadot for validating parachain state transitions. Takes Block and Executive types as parameters to generate validation functionality.\nSOURCE: https://github.com/paritytech/polkadot-sdk/blob/master/cumulus/docs/overview.md#2025-04-21_snippet_0\n\nLANGUAGE: rust\nCODE:\n```\ncumulus_pallet_parachain_system::register_validate_block!(Block, Executive);\n```\n\n----------------------------------------\n\nTITLE: Implementing CollationGenerationConfig Structure in Rust for Polkadot SDK\nDESCRIPTION: Defines the CollationGenerationConfig struct which contains the collator's authentication key, optional collator function, and parachain ID. This configuration is used to initialize the collation generation subsystem.\nSOURCE: https://github.com/paritytech/polkadot-sdk/blob/master/polkadot/roadmap/implementers-guide/src/node/collators/collation-generation.md#2025-04-21_snippet_4\n\nLANGUAGE: rust\nCODE:\n```\n/// Configuration for the collation generator\npub struct CollationGenerationConfig {\n  /// Collator's authentication key, so it can sign things.\n  pub key: CollatorPair,\n  /// Collation function. See [`CollatorFn`] for more details.\n  pub collator: Option<CollatorFn>,\n  /// The parachain that this collator collates for\n  pub para_id: ParaId,\n}\n```\n\n----------------------------------------\n\nTITLE: Building Polkadot Worker Binaries\nDESCRIPTION: Command to build the required worker binaries (execute-worker and prepare-worker) before running tests in the polkadot-test-service crate.\nSOURCE: https://github.com/paritytech/polkadot-sdk/blob/master/polkadot/node/test/service/README.md#2025-04-21_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\ncargo build --bin polkadot-execute-worker --bin polkadot-prepare-worker\n```\n\n----------------------------------------\n\nTITLE: Running Pallet Benchmarks CLI Command\nDESCRIPTION: Command to run benchmark tests for a specific pallet (in this case pallet-balances) with the required runtime-benchmarks feature flag enabled.\nSOURCE: https://github.com/paritytech/polkadot-sdk/blob/master/substrate/frame/benchmarking/README.md#2025-04-21_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ncargo test -p pallet-balances --features runtime-benchmarks\n```\n\n----------------------------------------\n\nTITLE: Running Rust Example for Pallet Revive Ethereum RPC\nDESCRIPTION: This command runs the 'deploy' example from the pallet-revive-eth-rpc crate. It demonstrates how to send a transaction to the node using Rust.\nSOURCE: https://github.com/paritytech/polkadot-sdk/blob/master/substrate/frame/revive/rpc/examples/README.md#2025-04-21_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nRUST_LOG=\"info,eth-rpc=debug\" cargo run -p pallet-revive-eth-rpc --example deploy\n```\n\n----------------------------------------\n\nTITLE: Pseudonymal Dispatch Function in Polkadot SDK\nDESCRIPTION: Enables a signed origin to execute calls from an alternative signed origin using derivative accounts. Each account has access to 2^17 possible pseudonyms that can be stacked.\nSOURCE: https://github.com/paritytech/polkadot-sdk/blob/master/substrate/frame/utility/README.md#2025-04-21_snippet_1\n\nLANGUAGE: rust\nCODE:\n```\nas_derivative\n```\n\n----------------------------------------\n\nTITLE: Defining Block and Candidate Entry Structures in Rust\nDESCRIPTION: Data structures for tracking block and candidate entries in the approval voting system.\nSOURCE: https://github.com/paritytech/polkadot-sdk/blob/master/polkadot/roadmap/implementers-guide/src/node/approval/approval-voting.md#2025-04-21_snippet_1\n\nLANGUAGE: rust\nCODE:\n```\nstruct CandidateEntry {\n    candidate: CandidateReceipt,\n    session: SessionIndex,\n    // Assignments are based on blocks, so we need to track assignments separately\n    // based on the block we are looking at.\n    block_assignments: HashMap<Hash, ApprovalEntry>,\n    approvals: Bitfield, // n_validators bits\n}\n\nstruct BlockEntry {\n    block_hash: Hash,\n    session: SessionIndex,\n    slot: Slot,\n    relay_vrf_story: [u8; 32],\n    candidates: Vec<(CoreIndex, Hash)>,\n    approved_bitfield: Bitfield,\n    children: Vec<Hash>,\n    candidates_pending_signature: BTreeMap<CandidateIndex, CandidateSigningContext>,\n    distributed_assignments: Bitfield,\n}\n```\n\n----------------------------------------\n\nTITLE: Updating WeightInfo Type in Runtime\nDESCRIPTION: Changes required to update the WeightInfo type definition in the Runtime for various pallets.\nSOURCE: https://github.com/paritytech/polkadot-sdk/blob/master/substrate/docs/Upgrading-2.0-to-3.0.md#2025-04-21_snippet_2\n\nLANGUAGE: rust\nCODE:\n```\ntype WeightInfo = pallet_$name::weights::SubstrateWeight<Runtime>;\n```\n\nLANGUAGE: rust\nCODE:\n```\ntype WeightInfo = pallet_collective::weights::SubstrateWeight<Runtime>;\n```\n\nLANGUAGE: rust\nCODE:\n```\ntype WeightInfo = pallet_proxy::weights::SubstrateWeight<Runtime>;\n```\n\n----------------------------------------\n\nTITLE: Adding Benchmark to Runtime in Rust\nDESCRIPTION: Example of using the add_benchmark! macro to integrate pallet benchmarks into a Substrate node runtime.\nSOURCE: https://github.com/paritytech/polkadot-sdk/blob/master/substrate/frame/benchmarking/README.md#2025-04-21_snippet_2\n\nLANGUAGE: rust\nCODE:\n```\nadd_benchmark!(params, batches, pallet_balances, Balances);\n```\n\n----------------------------------------\n\nTITLE: Starting a Node with Detailed Logging\nDESCRIPTION: Command to run the development chain with debug-level logging and backtrace information, useful for troubleshooting.\nSOURCE: https://github.com/paritytech/polkadot-sdk/blob/master/templates/solochain/README.md#2025-04-21_snippet_6\n\nLANGUAGE: sh\nCODE:\n```\nRUST_BACKTRACE=1 ./target/release/solochain-template-node -ldebug --dev\n```\n\n----------------------------------------\n\nTITLE: Bitfield Signing Protocol Output Definition\nDESCRIPTION: Defines the output messages used in the bitfield signing protocol, including bitfield distribution and chunk querying.\nSOURCE: https://github.com/paritytech/polkadot-sdk/blob/master/polkadot/roadmap/implementers-guide/src/node/availability/bitfield-signing.md#2025-04-21_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n- `BitfieldDistribution::DistributeBitfield`: distribute a locally signed bitfield\n- `AvailabilityStore::QueryChunk(CandidateHash, validator_index, response_channel)`\n```\n\n----------------------------------------\n\nTITLE: Defining MessageSource Enum in Rust\nDESCRIPTION: Defines an enum 'MessageSource' to represent the origin of a message, either from a peer or locally generated.\nSOURCE: https://github.com/paritytech/polkadot-sdk/blob/master/polkadot/roadmap/implementers-guide/src/node/approval/approval-distribution.md#2025-04-21_snippet_1\n\nLANGUAGE: rust\nCODE:\n```\nenum MessageSource {\n  Peer(PeerId),\n  Local,\n}\n```\n\n----------------------------------------\n\nTITLE: Chain Selection Signal Handler Documentation\nDESCRIPTION: Documentation block detailing various message handlers and periodic tasks for the Chain Selection Subsystem, including ActiveLeavesUpdate, BlockFinalized, Approved, Leaves, BestLeafContaining, and RevertBlocks messages.\nSOURCE: https://github.com/paritytech/polkadot-sdk/blob/master/polkadot/roadmap/implementers-guide/src/node/utility/chain-selection.md#2025-04-21_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n# Chain Selection Subsystem\n\nThis subsystem implements the necessary metadata for the implementation of the [chain\nselection](../../protocol-chain-selection.md) portion of the protocol.\n\nThe subsystem wraps a database component which maintains a view of the unfinalized chain and records the properties of\neach block: whether the block is **viable**, whether it is **stagnant**, and whether it is **reverted**. It should also\nmaintain an updated set of active leaves in accordance with this view, which should be cheap to query. Leaves are\nordered descending first by weight and then by block number.\n```\n\n----------------------------------------\n\nTITLE: Dispute Voting State Flow in Mermaid\nDESCRIPTION: This diagram illustrates the state transitions for dispute voting processes, showing how votes are received and processed until a dispute is concluded.\nSOURCE: https://github.com/paritytech/polkadot-sdk/blob/master/polkadot/roadmap/implementers-guide/src/disputes-flow.md#2025-04-21_snippet_0\n\nLANGUAGE: mermaid\nCODE:\n```\nstateDiagram-v2\n    [*] --> WaitForBackingVote: negative Vote received\n    [*] --> WaitForDisputeVote: backing Vote received\n    WaitForBackingVote --> Open: negative Vote received\n    WaitForDisputeVote --> Open: backing Vote received\n    Open --> Concluded: Incoming Vote via Gossip\n    Open --> Open: No ⅔ supermajority\n    Open --> [*]\n    Concluded --> [*]\n```\n\n----------------------------------------\n\nTITLE: Block Execution Weight Implementation in Rust\nDESCRIPTION: Code sample showing the BlockExecutionWeight constant definition with benchmark statistics for empty block execution time.\nSOURCE: https://github.com/paritytech/polkadot-sdk/blob/master/substrate/utils/frame/benchmarking-cli/src/overhead/README.md#2025-04-21_snippet_0\n\nLANGUAGE: rust\nCODE:\n```\n/// Time to execute an empty block.\n/// Calculated by multiplying the *Average* with `1` and adding `0`.\n///\n/// Stats [NS]:\n///   Min, Max: 3_508_416, 3_680_498\n///   Average:  3_532_484\n///   Median:   3_522_111\n///   Std-Dev:  27070.23\n///\n/// Percentiles [NS]:\n///   99th: 3_631_863\n///   95th: 3_595_674\n///   75th: 3_526_435\npub const BlockExecutionWeight: Weight =\n    Weight::from_parts(WEIGHT_REF_TIME_PER_NANOS.saturating_mul(3_532_484), 0);\n```\n\n----------------------------------------\n\nTITLE: Installing Chain Spec Builder with Cargo\nDESCRIPTION: Command to install the chain-spec-builder binary from crates.io using cargo with locked dependencies.\nSOURCE: https://github.com/paritytech/polkadot-sdk/blob/master/substrate/bin/utils/chain-spec-builder/README.docify.md#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ncargo install staging-chain-spec-builder --locked\n```\n\n----------------------------------------\n\nTITLE: Implementing Signed Statement Types in Rust\nDESCRIPTION: Type definitions for signed statements, including both full and compact variants for efficient cryptographic operations.\nSOURCE: https://github.com/paritytech/polkadot-sdk/blob/master/polkadot/roadmap/implementers-guide/src/types/backing.md#2025-04-21_snippet_3\n\nLANGUAGE: rust\nCODE:\n```\n/// A signed statement, containing the committed candidate receipt in the `Seconded` variant.\npub type SignedFullStatement = Signed<Statement, CompactStatement>;\n\n/// A signed statement, containing only the hash.\npub type SignedStatement = Signed<CompactStatement>;\n```\n\n----------------------------------------\n\nTITLE: Defining Availability Distribution V1 Message in Rust for Polkadot SDK\nDESCRIPTION: This snippet defines the AvailabilityDistributionV1Message enum, which includes a message type for distributing erasure chunks for a given candidate hash in the Availability Distribution subsystem.\nSOURCE: https://github.com/paritytech/polkadot-sdk/blob/master/polkadot/roadmap/implementers-guide/src/types/network.md#2025-04-21_snippet_2\n\nLANGUAGE: rust\nCODE:\n```\nenum AvailabilityDistributionV1Message {\n\t/// An erasure chunk for a given candidate hash.\n\tChunk(CandidateHash, ErasureChunk),\n}\n```\n\n----------------------------------------\n\nTITLE: Checking Omni Bencher Installation\nDESCRIPTION: Command to verify the installation and display help documentation for frame-omni-bencher.\nSOURCE: https://github.com/paritytech/polkadot-sdk/blob/master/substrate/utils/frame/omni-bencher/README.md#2025-04-21_snippet_3\n\nLANGUAGE: sh\nCODE:\n```\nframe-omni-bencher --help\n```\n\n----------------------------------------\n\nTITLE: Submitting Finality Proof in Bridge GRANDPA Pallet\nDESCRIPTION: The main entrypoint of the pallet is the submit_finality_proof_ex call, which takes a finalized header, GRANDPA justification, and authority set ID. It verifies the justification against the current validators set and stores the header if valid.\nSOURCE: https://github.com/paritytech/polkadot-sdk/blob/master/bridges/modules/grandpa/README.md#2025-04-21_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\nsubmit_finality_proof_ex\n```\n\n----------------------------------------\n\nTITLE: Starting Rococo-Westend Relayer with Docker\nDESCRIPTION: This bash script sets up environment variables and runs a Docker container to start a relayer for the Rococo-Westend bridge. It configures RPC endpoints, security settings, and key file locations for both Rococo and Westend networks.\nSOURCE: https://github.com/paritytech/polkadot-sdk/blob/master/bridges/docs/running-relayer.md#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nexport DOCKER_IMAGE=<image-of-substrate-relay>\n\nexport ROCOCO_HOST=<rococo-ws-rpc-host-here>\nexport ROCOCO_PORT=<rococo-ws-rpc-port-here>\n# or set it to '--rococo-secure' if wss is used above\nexport ROCOCO_IS_SECURE=\nexport BRIDGE_HUB_ROCOCO_HOST=<bridge-hub-rococo-ws-rpc-host-here>\nexport BRIDGE_HUB_ROCOCO_PORT=<bridge-hub-rococo-ws-rpc-port-here>\n# or set it to '--bridge-hub-rococo-secure' if wss is used above\nexport BRIDGE_HUB_ROCOCO_IS_SECURE=\nexport BRIDGE_HUB_ROCOCO_KEY_FILE=<absolute-path-to-file-with-account-key-at-bridge-hub-rococo>\n\nexport WESTEND_HOST=<westend-wss-rpc-host-here>\nexport WESTEND_PORT=<westend-wss-rpc-port-here>\n# or set it to '--westend-secure' if wss is used above\nexport WESTEND_IS_SECURE=\nexport BRIDGE_HUB_WESTEND_HOST=<bridge-hub-westend-ws-rpc-host-here>\nexport BRIDGE_HUB_WESTEND_PORT=<bridge-hub-westend-ws-rpc-port-here>\n# or set it to '--bridge-hub-westend-secure ' if wss is used above\nexport BRIDGE_HUB_WESTEND_IS_SECURE=\nexport BRIDGE_HUB_WESTEND_KEY_FILE=<absolute-path-to-file-with-account-key-at-bridge-hub-westend>\n\n# you can get extended relay logs (e.g. for debugging issues) by passing `-e RUST_LOG=bridge=trace`\n```\n\n----------------------------------------\n\nTITLE: Statement Distribution Process in Polkadot SDK (Mermaid)\nDESCRIPTION: This diagram shows the statement distribution process, involving the StatementDistribution and NetworkBridge subsystems. It illustrates how signed statements are circulated and handled when received from peers.\nSOURCE: https://github.com/paritytech/polkadot-sdk/blob/master/polkadot/roadmap/implementers-guide/src/node/subsystems-and-jobs.md#2025-04-21_snippet_4\n\nLANGUAGE: mermaid\nCODE:\n```\nsequenceDiagram\n    participant SD as StatementDistribution\n    participant NB as NetworkBridge\n\n    alt On receipt of a<br/>SignedStatement from CandidateBacking\n        % fn circulate_statement_and_dependents\n        SD ->> NB: SendValidationMessage\n\n        Note right of NB: Bridge sends validation message to all appropriate peers\n    else On receipt of peer validation message\n        NB ->> SD: NetworkBridgeUpdate\n\n        % fn handle_incoming_message\n        alt if we aren't already aware of the relay parent for this statement\n            SD ->> NB: ReportPeer\n        end\n\n        % fn circulate_statement\n        opt if we know of peers who haven't seen this message, gossip it\n            SD ->> NB: SendValidationMessage\n        end\n    end\n```\n\n----------------------------------------\n\nTITLE: Setting Module Owner in Rust for Messages Module\nDESCRIPTION: This function allows the current module owner to transfer ownership to another account.\nSOURCE: https://github.com/paritytech/polkadot-sdk/blob/master/bridges/modules/messages/README.md#2025-04-21_snippet_9\n\nLANGUAGE: rust\nCODE:\n```\nfn set_owner()\n```\n\n----------------------------------------\n\nTITLE: Approval Import Handler\nDESCRIPTION: Processes ApprovalVotingMessage::ImportApproval messages by validating and importing approval votes.\nSOURCE: https://github.com/paritytech/polkadot-sdk/blob/master/polkadot/roadmap/implementers-guide/src/node/approval/approval-voting.md#2025-04-21_snippet_6\n\nLANGUAGE: markdown\nCODE:\n```\n#### `ApprovalVotingMessage::ImportApproval`\n\nOn receiving a `ImportApproval(indirect_approval_vote, response_channel)` message:\n  * Fetch the `BlockEntry` from the indirect approval vote's `block_hash`. If none, return `ApprovalCheckResult::Bad`...\n```\n\n----------------------------------------\n\nTITLE: Implementing Statement and CompactStatement Enums in Rust\nDESCRIPTION: Defines statement types for parachain candidate validation, including Seconded and Valid variants. CompactStatement provides a more efficient representation for cryptographic operations.\nSOURCE: https://github.com/paritytech/polkadot-sdk/blob/master/polkadot/roadmap/implementers-guide/src/types/backing.md#2025-04-21_snippet_2\n\nLANGUAGE: rust\nCODE:\n```\n/// A statement about the validity of a parachain candidate.\nenum Statement {\n  /// A statement about a new candidate being seconded by a validator. This is an implicit validity vote.\n  ///\n  /// The main semantic difference between `Seconded` and `Valid` comes from the fact that every validator may\n  /// second only 1 candidate; this places an upper bound on the total number of candidates whose validity\n  /// needs to be checked. A validator who seconds more than 1 parachain candidate per relay head is subject\n  /// to slashing.\n  Seconded(CommittedCandidateReceipt),\n  /// A statement about the validity of a candidate, based on candidate's hash.\n  Valid(Hash),\n}\n\n/// A statement about the validity of a parachain candidate.\n///\n/// This variant should only be used in the production of `SignedStatement`s. The only difference between\n/// this enum and `Statement` is that the `Seconded` variant contains a `Hash` instead of a `CandidateReceipt`.\n/// The rationale behind the difference is that the signature should always be on the hash instead of the\n/// full data, as this lowers the requirement for checking while retaining necessary cryptographic properties\nenum CompactStatement {\n  /// A statement about a new candidate being seconded by a validator. This is an implicit validity vote.\n  Seconded(Hash),\n  /// A statement about the validity of a candidate, based on candidate's hash.\n  Valid(Hash),\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Candidate Events Enum and Retrieval Function in Rust\nDESCRIPTION: Implements an enum for tracking different states of parachain candidates (backed, included, or timed out) and provides a function to fetch candidate events from a given block. Each variant contains the candidate receipt, head data, core index, and where applicable, the group index.\nSOURCE: https://github.com/paritytech/polkadot-sdk/blob/master/polkadot/roadmap/implementers-guide/src/runtime-api/candidate-events.md#2025-04-21_snippet_0\n\nLANGUAGE: rust\nCODE:\n```\nenum CandidateEvent {\n\t/// This candidate receipt was backed in the most recent block.\n\tCandidateBacked(CandidateReceipt, HeadData, CoreIndex, GroupIndex),\n\t/// This candidate receipt was included and became a parablock at the most recent block.\n\tCandidateIncluded(CandidateReceipt, HeadData, CoreIndex, GroupIndex),\n\t/// This candidate receipt was not made available in time and timed out.\n\tCandidateTimedOut(CandidateReceipt, HeadData, CoreIndex),\n}\n\nfn candidate_events(at: Block) -> Vec<CandidateEvent>;\n```\n\n----------------------------------------\n\nTITLE: Defining Balance Types using Currency Trait\nDESCRIPTION: Example showing how to define balance-related types using the Currency trait for gas payment handling in the Contract module. Defines BalanceOf and NegativeImbalanceOf type aliases.\nSOURCE: https://github.com/paritytech/polkadot-sdk/blob/master/substrate/frame/balances/README.md#2025-04-21_snippet_0\n\nLANGUAGE: rust\nCODE:\n```\nuse frame_support::traits::Currency;\n\npub type BalanceOf<T> = <<T as Config>::Currency as Currency<<T as frame_system::Config>::AccountId>>::Balance;\npub type NegativeImbalanceOf<T> = <<T as Config>::Currency as Currency<<T as frame_system::Config>::AccountId>>::NegativeImbalance;\n\n```\n\n----------------------------------------\n\nTITLE: Generating Default Genesis Config File in Rust\nDESCRIPTION: Function that generates and writes the default genesis configuration to a JSON file. Uses GenesisStorageBuilder to create the config, serializes it to JSON, and writes it to /tmp/default_genesis_config.json.\nSOURCE: https://github.com/paritytech/polkadot-sdk/blob/master/substrate/test-utils/runtime/res/README.md#2025-04-21_snippet_0\n\nLANGUAGE: rust\nCODE:\n```\nuse crate::genesismap::GenesisStorageBuilder;\n#[test]\nfn write_default_config_to_tmp_file() {\n\tlet j = json::to_string(&GenesisStorageBuilder::default().genesis_config()).unwrap().into_bytes();\n\tlet mut file = fs::OpenOptions::new()\n\t\t.create(true)\n\t\t.write(true)\n\t\t.open(\"/tmp/default_genesis_config.json\").unwrap();\n\tfile.write_all(&j);\n}\n```\n\n----------------------------------------\n\nTITLE: Active Leaves Update Handler\nDESCRIPTION: Processes OverseerSignal::ActiveLeavesUpdate by handling new blocks, updating stored ranges, and managing candidate approvals.\nSOURCE: https://github.com/paritytech/polkadot-sdk/blob/master/polkadot/roadmap/implementers-guide/src/node/approval/approval-voting.md#2025-04-21_snippet_4\n\nLANGUAGE: markdown\nCODE:\n```\n#### `OverseerSignal::ActiveLeavesUpdate`\n\nOn receiving an `OverseerSignal::ActiveLeavesUpdate(update)`:\n  * We determine the set of new blocks that were not in our previous view. This is done by querying the ancestry of all new items in the view and contrasting against the stored `BlockNumber`s. Typically, there will be only one new block. We fetch the headers and information on these blocks from the `ChainApi` subsystem. Stale leaves in the update can be ignored.\n  * We update the `StoredBlockRange` and the `BlockNumber` maps.\n  * We use the `RuntimeApiSubsystem` to determine information about these blocks...\n```\n\n----------------------------------------\n\nTITLE: Genesis Config Patch Example\nDESCRIPTION: Example JSON structure for a genesis config patch file showing how to customize balances and sudo key configurations. This format allows partial specification of genesis parameters while using defaults for unspecified values.\nSOURCE: https://github.com/paritytech/polkadot-sdk/blob/master/substrate/bin/utils/chain-spec-builder/README.docify.md#2025-04-21_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n\t\"balances\": {\n\t\t\"balances\": [\n\t\t\t[\n\t\t\t\t\"5FHneW46xGXgs5mUiveU4sbTyGBzmstUspZC92UhjJM694ty\",\n\t\t\t    1000000000000000\n\t\t\t],\n\t\t\t[\n\t\t\t\t\"5FLSigC9HGRKVhB9FiEo4Y3koPsNmBmLJbpXg2mp1hXcS59Y\",\n\t\t\t     1000000000000000\n\t\t\t],\n\t\t\t[\n\t\t\t\t\"5CcjiSgG2KLuKAsqkE2Nak1S2FbAcMr5SxRASUuwR3zSNV2b\",\n\t\t\t    5000000000000000\n\t\t\t]\n\t\t]\n\t},\n\t\"sudo\": {\n\t\t\"key\": \"5Ff3iXP75ruzroPWRP2FYBHWnmGGBSb63857BgnzCoXNxfPo\"\n\t}\n}\n```\n\n----------------------------------------\n\nTITLE: Reproducing Clean CI Environment for Polkadot SDK\nDESCRIPTION: Creates a clean CI environment for testing by running the Parity CI container, cloning the Polkadot SDK repository, and allowing execution of custom cargo commands. Ideal for reproducing CI conditions locally.\nSOURCE: https://github.com/paritytech/polkadot-sdk/blob/master/docs/contributor/container.md#2025-04-21_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nexport $(curl https://raw.githubusercontent.com/paritytech/polkadot-sdk/refs/heads/master/.github/env | tr -d '\"')\ndocker run -it --rm $IMAGE bash\nroot@e2ff8a3f347b:/builds# git clone https://github.com/paritytech/polkadot-sdk.git && cd polkadot-sdk\nroot@e2ff8a3f347b:/builds# <your cargo command goes here>\n```\n\n----------------------------------------\n\nTITLE: Adding Light Client RPC Dependencies\nDESCRIPTION: Updates RPC dependencies to support light client functionality by adding AuxStore trait and chain spec requirements to the FullDeps struct.\nSOURCE: https://github.com/paritytech/polkadot-sdk/blob/master/substrate/docs/Upgrading-2.0-to-3.0.md#2025-04-21_snippet_4\n\nLANGUAGE: diff\nCODE:\n```\n--- a/bin/node/rpc/src/lib.rs\n+++ b/bin/node/rpc/src/lib.rs\n@@ -49,6 +49,7 @@ use sp_consensus::SelectChain;\n use sp_consensus_babe::BabeApi;\n use sc_rpc::SubscriptionTaskExecutor;\n use sp_transaction_pool::TransactionPool;\n+use sc_client_api::AuxStore;\n\n /// Light client extra dependencies.\n pub struct LightDeps<C, F, P> {\n@@ -94,6 +95,8 @@ pub struct FullDeps<C, P, SC, B> {\n \tpub pool: Arc<P>,\n \t/// The SelectChain Strategy\n \tpub select_chain: SC,\n+\t/// A copy of the chain spec.\n+\tpub chain_spec: Box<dyn sc_chain_spec::ChainSpec>,\n \t/// Whether to deny unsafe calls\n \tpub deny_unsafe: DenyUnsafe,\n \t/// BABE specific dependencies.\n```\n\n----------------------------------------\n\nTITLE: Defining Core State Enum in Rust for Polkadot SDK\nDESCRIPTION: This enum represents the possible states of a core: Occupied, Scheduled, or Free. It's used to indicate the current status of each availability core in the network.\nSOURCE: https://github.com/paritytech/polkadot-sdk/blob/master/polkadot/roadmap/implementers-guide/src/runtime-api/availability-cores.md#2025-04-21_snippet_3\n\nLANGUAGE: rust\nCODE:\n```\nenum CoreState {\n    Occupied(OccupiedCore),\n    Scheduled(ScheduledCore),\n    Free,\n}\n```\n\n----------------------------------------\n\nTITLE: Declaring Validation and Collation Message Types in Rust\nDESCRIPTION: Declares type aliases for ValidationV1Message and CollationV1Message using the WireMessage enum with specific protocol message types.\nSOURCE: https://github.com/paritytech/polkadot-sdk/blob/master/polkadot/roadmap/implementers-guide/src/node/utility/network-bridge.md#2025-04-21_snippet_1\n\nLANGUAGE: rust\nCODE:\n```\ntype ValidationV1Message = WireMessage<ValidationProtocolV1>;\ntype CollationV1Message = WireMessage<CollationProtocolV1>;\n```\n\n----------------------------------------\n\nTITLE: Installing Polkadot Omni Bencher from Local Source\nDESCRIPTION: Command to install frame-omni-bencher from local source code in the substrate utils directory.\nSOURCE: https://github.com/paritytech/polkadot-sdk/blob/master/substrate/utils/frame/omni-bencher/README.md#2025-04-21_snippet_2\n\nLANGUAGE: sh\nCODE:\n```\ncargo install --path substrate/utils/frame/omni-bencher --profile=production\n```\n\n----------------------------------------\n\nTITLE: Treasury Pallet Terminology\nDESCRIPTION: Key terminology and concepts used in the Treasury pallet implementation, including proposals, beneficiaries, deposits, and the treasury pot.\nSOURCE: https://github.com/paritytech/polkadot-sdk/blob/master/substrate/frame/treasury/README.md#2025-04-21_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n- **Proposal:** A suggestion to allocate funds from the pot to a beneficiary.\\n- **Beneficiary:** An account who will receive the funds from a proposal if the proposal is\\n  approved.\\n- **Deposit:** Funds that a proposer must lock when making a proposal. The deposit will be returned\\n  or slashed if the proposal is approved or rejected respectively.\\n- **Pot:** Unspent funds accumulated by the treasury pallet.\n```\n\n----------------------------------------\n\nTITLE: Implementing Validator Reward in Rust\nDESCRIPTION: This code snippet demonstrates how to create a custom pallet that rewards a validator using the Staking module. It defines a dispatchable function 'reward_myself' that allows a validator to reward themselves with a fixed amount.\nSOURCE: https://github.com/paritytech/polkadot-sdk/blob/master/substrate/frame/staking/README.md#2025-04-21_snippet_0\n\nLANGUAGE: rust\nCODE:\n```\nuse pallet_staking::{self as staking};\n\n#[frame_support::pallet]\npub mod pallet {\n    use super::*;\n    use frame_support::pallet_prelude::*;\n    use frame_system::pallet_prelude::*;\n\n    #[pallet::pallet]\n    pub struct Pallet<T>(_);\n\n    #[pallet::config]\n    pub trait Config: frame_system::Config + staking::Config {}\n\n    #[pallet::call]\n    impl<T: Config> Pallet<T> {\n        /// Reward a validator.\n        #[pallet::weight(0)]\n        pub fn reward_myself(origin: OriginFor<T>) -> DispatchResult {\n            let reported = ensure_signed(origin)?;\n            <staking::Pallet<T>>::reward_by_ids(vec![(reported, 10)]);\n            Ok(())\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Storage for Initializer Pallet in Rust\nDESCRIPTION: This code snippet defines the storage items for the Initializer Pallet. It includes a boolean flag for initialization status and a vector for buffered session changes.\nSOURCE: https://github.com/paritytech/polkadot-sdk/blob/master/polkadot/roadmap/implementers-guide/src/runtime/initializer.md#2025-04-21_snippet_0\n\nLANGUAGE: rust\nCODE:\n```\nHasInitialized: bool;\n// buffered session changes along with the block number at which they should be applied.\n//\n// typically this will be empty or one element long. ordered ascending by BlockNumber and insertion\n// order.\nBufferedSessionChanges: Vec<(BlockNumber, ValidatorSet, ValidatorSet)>;\n```\n\n----------------------------------------\n\nTITLE: Defining Horizontal Message Structures in Rust for Polkadot\nDESCRIPTION: This snippet defines the OutboundHrmpMessage and InboundHrmpMessage structures used for horizontal message passing between parachains. These structures include the recipient, message payload, and timing information.\nSOURCE: https://github.com/paritytech/polkadot-sdk/blob/master/polkadot/roadmap/implementers-guide/src/types/messages.md#2025-04-21_snippet_2\n\nLANGUAGE: rust\nCODE:\n```\nstruct OutboundHrmpMessage {\n\t/// The para that will get this message in its downward message queue.\n\tpub recipient: ParaId,\n\t/// The message payload.\n\tpub data: Vec<u8>,\n}\n\nstruct InboundHrmpMessage {\n\t/// The block number at which this message was sent.\n\t/// Specifically, it is the block number at which the candidate that sends this message was\n\t/// enacted.\n\tpub sent_at: BlockNumber,\n\t/// The message payload.\n\tpub data: Vec<u8>,\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Light Client Base Service in Polkadot (Rust)\nDESCRIPTION: This code snippet implements a light client base service for Polkadot. It sets up the necessary components including client, backend, transaction pool, and network service with GRANDPA and BABE consensus mechanisms.\nSOURCE: https://github.com/paritytech/polkadot-sdk/blob/master/substrate/docs/Upgrading-2.0-to-3.0.md#2025-04-21_snippet_10\n\nLANGUAGE: rust\nCODE:\n```\npub fn new_light_base(mut config: Configuration) -> Result<(\n\tTaskManager, RpcHandlers, Option<TelemetryConnectionNotifier>, Arc<LightClient>,\n\tArc<NetworkService<Block, <Block as BlockT>::Hash>>,\n\tArc<sc_transaction_pool::LightPool<Block, LightClient, sc_network::config::OnDemand<Block>>>\n), ServiceError> {\n\tlet (client, backend, keystore_container, mut task_manager, on_demand) =\n\t\tsc_service::new_light_parts::<Block, RuntimeApi, Executor>(&config)?;\n\n\tconfig.network.extra_sets.push(grandpa::grandpa_peers_set_config());\n\t\n\tlet select_chain = sc_consensus::LongestChain::new(backend.clone());\n\n\tlet transaction_pool = Arc::new(sc_transaction_pool::BasicPool::new_light(\n\t\tconfig.transaction_pool.clone(),\n\t\tconfig.prometheus_registry(),\n\t\ttask_manager.spawn_essential_handle(),\n\t\tclient.clone(),\n\t\ton_demand.clone(),\n\t));\n\n\tlet (grandpa_block_import, _) = grandpa::block_import(\n\t\tclient.clone(),\n\t\t&(client.clone() as Arc<_>),\n\t\tselect_chain.clone(),\n\t)?;\n\tlet justification_import = grandpa_block_import.clone();\n\n\tlet (babe_block_import, babe_link) = sc_consensus_babe::block_import(\n\t\tsc_consensus_babe::Config::get_or_compute(&*client)?,\n\t\tgrandpa_block_import,\n\t\tclient.clone(),\n\t)?;\n\n\tlet inherent_data_providers = sp_inherents::InherentDataProviders::new();\n\n\tlet import_queue = sc_consensus_babe::import_queue(\n\t\tbabe_link,\n\t\tbabe_block_import,\n\t\tSome(Box::new(justification_import)),\n\t\tclient.clone(),\n\t\tselect_chain.clone(),\n\t\tinherent_data_providers.clone(),\n\t\t&task_manager.spawn_essential_handle(),\n\t\tconfig.prometheus_registry(),\n\t\tsp_consensus::NeverCanAuthor,\n\t)?;\n\n\tlet (network, network_status_sinks, system_rpc_tx, network_starter) =\n\t\tsc_service::build_network(sc_service::BuildNetworkParams {\n\t\t\tconfig: &config,\n\t\t\tclient: client.clone(),\n\t\t\ttransaction_pool: transaction_pool.clone(),\n\t\t\tspawn_handle: task_manager.spawn_handle(),\n\t\t\timport_queue,\n\t\t\ton_demand: Some(on_demand.clone()),\n\t\t\tblock_announce_validator_builder: None,\n\t\t})?;\n\tnetwork_starter.start_network();\n\n\tlet light_deps = node_rpc::LightDeps {\n\t\tremote_blockchain: backend.remote_blockchain(),\n\t\tfetcher: on_demand.clone(),\n\t\tclient: client.clone(),\n\t\tpool: transaction_pool.clone(),\n\t};\n\n\tlet rpc_extensions = node_rpc::create_light(light_deps);\n\n\tlet (rpc_handlers, telemetry_connection_notifier) =\n\t\tsc_service::spawn_tasks(sc_service::SpawnTasksParams {\n\t\t\ton_demand: Some(on_demand),\n\t\t\tremote_blockchain: Some(backend.remote_blockchain()),\n\t\t\trpc_extensions_builder: Box::new(sc_service::NoopRpcExtensionBuilder(rpc_extensions)),\n\t\t\tclient: client.clone(),\n\t\t\ttransaction_pool: transaction_pool.clone(),\n\t\t\tkeystore: keystore_container.sync_keystore(),\n\t\t\tconfig, backend, network_status_sinks, system_rpc_tx,\n\t\t\tnetwork: network.clone(),\n\t\t\ttask_manager: &mut task_manager,\n\t\t})?;\n\n\tOk((\n\t\ttask_manager,\n\t\trpc_handlers,\n\t\ttelemetry_connection_notifier,\n\t\tclient,\n\t\tnetwork,\n\t\ttransaction_pool,\n\t))\n}\n```\n\n----------------------------------------\n\nTITLE: Example Offchain Worker Module Header\nDESCRIPTION: Markdown header and documentation links for the offchain worker example pallet, including links to trait documentation, call enum, and module struct.\nSOURCE: https://github.com/paritytech/polkadot-sdk/blob/master/substrate/frame/examples/offchain-worker/README.md#2025-04-21_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n<!-- markdown-link-check-disable -->\n# Offchain Worker Example Pallet\n\nThe Offchain Worker Example: A simple pallet demonstrating\nconcepts, APIs and structures common to most offchain workers.\n\nRun `cargo doc --package pallet-example-offchain-worker --open` to view this module's\ndocumentation.\n\n- [`pallet_example_offchain_worker::Trait`](./trait.Trait.html)\n- [`Call`](./enum.Call.html)\n- [`Module`](./struct.Module.html)\n```\n\n----------------------------------------\n\nTITLE: Docker Compose Configuration for Polkadot Node\nDESCRIPTION: Docker Compose configuration for setting up a Polkadot node with exposed ports and volume mounting.\nSOURCE: https://github.com/paritytech/polkadot-sdk/blob/master/docs/contributor/docker.md#2025-04-21_snippet_3\n\nLANGUAGE: yaml\nCODE:\n```\nversion: '2'\n\nservices:\n  polkadot:\n    container_name: polkadot\n    image: parity/polkadot\n    ports:\n      - 30333:30333 # p2p port\n      - 9933:9933 # rpc port\n      - 9944:9944 # ws port\n      - 9615:9615 # Prometheus port\n    volumes:\n      - /my/local/folder:/polkadot\n    command: [\n      \"--name\", \"PolkaDocker\",\n      \"--ws-external\",\n      \"--rpc-external\",\n      \"--prometheus-external\",\n      \"--rpc-cors\", \"all\"\n    ]\n```\n\n----------------------------------------\n\nTITLE: Installing Graphviz for mdBook Visualization on macOS and Ubuntu\nDESCRIPTION: Commands to install the Graphviz package, which is a prerequisite for building the mdBook documentation with visualization support. Installation commands are provided for both macOS (using brew) and Ubuntu/Debian (using apt).\nSOURCE: https://github.com/paritytech/polkadot-sdk/blob/master/polkadot/roadmap/implementers-guide/README.md#2025-04-21_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\nbrew install graphviz # for macOS\nsudo apt-get install graphviz # for Ubuntu/Debian\n```\n\n----------------------------------------\n\nTITLE: HRMP Channel Entry Points Documentation\nDESCRIPTION: Detailed documentation of four main entry points for HRMP channel management: initialization, acceptance, cancellation, and closure. Each entry point includes validation steps and state changes.\nSOURCE: https://github.com/paritytech/polkadot-sdk/blob/master/polkadot/roadmap/implementers-guide/src/runtime/hrmp.md#2025-04-21_snippet_2\n\nLANGUAGE: markdown\nCODE:\n```\n* `hrmp_init_open_channel(recipient, proposed_max_capacity, proposed_max_message_size)`:\n    1. Check that the `origin` is not `recipient`.\n    1. Check that `proposed_max_capacity` is less or equal to `config.hrmp_channel_max_capacity` and greater than zero.\n    1. Check that `proposed_max_message_size` is less or equal to `config.hrmp_channel_max_message_size` and greater than zero.\n```\n\n----------------------------------------\n\nTITLE: Updating Dependency References in Cargo.toml (TOML)\nDESCRIPTION: This snippet shows how to update the dependency references in the Cargo.toml file. The dependencies are changed from referencing a specific git commit to using versioned packages from the crate registry.\nSOURCE: https://github.com/paritytech/polkadot-sdk/blob/master/substrate/docs/node-template-release.md#2025-04-21_snippet_2\n\nLANGUAGE: toml\nCODE:\n```\ntoml\nsp-core = { version = \"7.0.0\", git = \"https://github.com/paritytech/substrate.git\", rev = \"de80d0107336a9c7a2efdc0199015e4d67fcbdb5\", default-features = false }\n```\n\nLANGUAGE: toml\nCODE:\n```\n[workspace.dependencies]\nsp-core = { version = \"7.0.0\", default-features = false }\n```\n\n----------------------------------------\n\nTITLE: Staking Configuration Struct References\nDESCRIPTION: References to key structs and traits used in the staking module, including ValidatorPrefs for commission settings, Exposure for stake distribution, and Config for bonding duration parameters.\nSOURCE: https://github.com/paritytech/polkadot-sdk/blob/master/substrate/frame/staking/README.md#2025-04-21_snippet_2\n\nLANGUAGE: rust\nCODE:\n```\ntrait Config {\n    type BondingDuration: Get<EraIndex>;\n}\n\nstruct ValidatorPrefs {\n    commission: Perbill\n}\n\nstruct Exposure {\n    total: Balance,\n    own: Balance,\n    others: Vec<IndividualExposure>\n}\n```\n\n----------------------------------------\n\nTITLE: Updating WASM Builder in build.rs\nDESCRIPTION: Changes required to update the WASM builder configuration in the build.rs file. Removes the now obsolete with_wasm_builder_from_crates_or_path function.\nSOURCE: https://github.com/paritytech/polkadot-sdk/blob/master/substrate/docs/Upgrading-2.0-to-3.0.md#2025-04-21_snippet_0\n\nLANGUAGE: rust\nCODE:\n```\nuse substrate_wasm_builder::WasmBuilder;\n\nfn main() {\n\tWasmBuilder::new()\n\t\t.with_current_project()\n\t\t.export_heap_base()\n\t\t.import_memory()\n\t\t.build()\n}\n```\n\n----------------------------------------\n\nTITLE: Membership Module Header Documentation\nDESCRIPTION: Markdown documentation header describing the core functionality of the membership module, including its purpose for managing AccountId sets and prime member functionality.\nSOURCE: https://github.com/paritytech/polkadot-sdk/blob/master/substrate/frame/membership/README.md#2025-04-21_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n# Membership Module\n\nAllows control of membership of a set of `AccountId`s, useful for managing membership of a\ncollective. A prime member may be set.\n\nLicense: Apache-2.0\n```\n\n----------------------------------------\n\nTITLE: Connecting to Westend Testnet\nDESCRIPTION: This bash command starts a Polkadot node and connects it to the global Westend testnet.\nSOURCE: https://github.com/paritytech/polkadot-sdk/blob/master/polkadot/README.md#2025-04-21_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\n../target/release/polkadot --chain=westend\n```\n\n----------------------------------------\n\nTITLE: Defining Bounty Terminology in Markdown\nDESCRIPTION: This snippet defines key terms related to bounties in the context of the pallet-bounties module. It includes definitions for bounty spending proposal, proposer, curator, deposits, bounty value, payout address, payout delay, and curator fee.\nSOURCE: https://github.com/paritytech/polkadot-sdk/blob/master/substrate/frame/bounties/README.md#2025-04-21_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n### Terminology\n\nBounty:\n\n- **Bounty spending proposal:** A proposal to reward a predefined body of work upon completion\n  by the Treasury.\n- **Proposer:** An account proposing a bounty spending.\n- **Curator:** An account managing the bounty and assigning a payout address receiving the\n  reward for the completion of work.\n- **Deposit:** The amount held on deposit for placing a bounty proposal plus the amount held on\n  deposit per byte within the bounty description.\n- **Curator deposit:** The payment from a candidate willing to curate an approved bounty. The\n  deposit is returned when/if the bounty is completed.\n- **Bounty value:** The total amount that should be paid to the Payout Address if the bounty is\n  rewarded.\n- **Payout address:** The account to which the total or part of the bounty is assigned to.\n- **Payout Delay:** The delay period for which a bounty beneficiary needs to wait before\n  claiming.\n- **Curator fee:** The reserved upfront payment for a curator for work related to the bounty.\n```\n\n----------------------------------------\n\nTITLE: Defining Erasure Chunk Structure in Rust\nDESCRIPTION: Defines the ErasureChunk struct, which represents a single chunk of the erasure-coded AvailableData. It includes the chunk data, its index, and a Merkle proof for verification against the erasure root.\nSOURCE: https://github.com/paritytech/polkadot-sdk/blob/master/polkadot/roadmap/implementers-guide/src/types/availability.md#2025-04-21_snippet_3\n\nLANGUAGE: rust\nCODE:\n```\nstruct ErasureChunk {\n    /// The erasure-encoded chunk of data belonging to the candidate block.\n    chunk: Vec<u8>,\n    /// The index of this erasure-encoded chunk of data.\n    index: u32,\n    /// Proof for this chunk's branch in the Merkle tree.\n    proof: Vec<Vec<u8>>,\n}\n```\n\n----------------------------------------\n\nTITLE: Transaction Pool Documentation\nDESCRIPTION: Comprehensive documentation covering the conceptual and practical aspects of transaction pool implementation, including requirements, suggestions, and current implementation details.\nSOURCE: https://github.com/paritytech/polkadot-sdk/blob/master/substrate/client/transaction-pool/README.md#2025-04-21_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n# Implementation\n\nAn ideal transaction pool should be storing only transactions that are considered\nvalid by the runtime at current best imported block.\nAfter every block is imported, the pool should:\n\n1. Revalidate all transactions in the pool and remove the invalid ones.\n1. Construct the transaction inclusion graph based on `provides/requires` tags.\n   Some transactions might not be reachable (have unsatisfied dependencies),\n   they should be just left out in the pool.\n1. On block author request, the graph should be copied and transactions should\n   be removed one-by-one from the graph starting from the one with highest\n   priority and all conditions satisfied.\n```\n\n----------------------------------------\n\nTITLE: Running Polkadot Parachain Container as a Collator\nDESCRIPTION: Runs a previously built Polkadot parachain container image as a collator node. It uses temporary storage and WebAssembly execution, connecting to the asset-hub-westend chain.\nSOURCE: https://github.com/paritytech/polkadot-sdk/blob/master/docs/contributor/container.md#2025-04-21_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\ndocker run --rm -it \\\n\t$OWNER/$IMAGE_NAME \\\n\t\t--collator --tmp \\\n\t\t--execution wasm \\\n\t\t--chain /specs/asset-hub-westend.json\n```\n\n----------------------------------------\n\nTITLE: Defining Storage Layout for Inclusion Pallet in Rust\nDESCRIPTION: Specifies the storage layout for the Inclusion Pallet, including mappings for validator bitfields, pending availability candidates, and their commitments.\nSOURCE: https://github.com/paritytech/polkadot-sdk/blob/master/polkadot/roadmap/implementers-guide/src/runtime/inclusion.md#2025-04-21_snippet_1\n\nLANGUAGE: rust\nCODE:\n```\n/// The latest bitfield for each validator, referred to by index.\nbitfields: map ValidatorIndex => AvailabilityBitfield;\n/// Candidates pending availability.\nPendingAvailability: map ParaId => CandidatePendingAvailability;\n/// The commitments of candidates pending availability, by ParaId.\nPendingAvailabilityCommitments: map ParaId => CandidateCommitments;\n```\n\n----------------------------------------\n\nTITLE: All Subsystem Messages Enum in Rust\nDESCRIPTION: Comprehensive enum containing all possible message types that can be exchanged between different subsystems.\nSOURCE: https://github.com/paritytech/polkadot-sdk/blob/master/polkadot/roadmap/implementers-guide/src/types/overseer-protocol.md#2025-04-21_snippet_2\n\nLANGUAGE: rust\nCODE:\n```\nenum AllMessages {\n    CandidateValidation(CandidateValidationMessage),\n    CandidateBacking(CandidateBackingMessage),\n    ChainApi(ChainApiMessage),\n    CollatorProtocol(CollatorProtocolMessage),\n    StatementDistribution(StatementDistributionMessage),\n    AvailabilityDistribution(AvailabilityDistributionMessage),\n    AvailabilityRecovery(AvailabilityRecoveryMessage),\n    BitfieldDistribution(BitfieldDistributionMessage),\n    BitfieldSigning(BitfieldSigningMessage),\n    Provisioner(ProvisionerMessage),\n    RuntimeApi(RuntimeApiMessage),\n    AvailabilityStore(AvailabilityStoreMessage),\n    NetworkBridge(NetworkBridgeMessage),\n    CollationGeneration(CollationGenerationMessage),\n    ApprovalVoting(ApprovalVotingMessage),\n    ApprovalDistribution(ApprovalDistributionMessage),\n    GossipSupport(GossipSupportMessage),\n    DisputeCoordinator(DisputeCoordinatorMessage),\n    ChainSelection(ChainSelectionMessage),\n    PvfChecker(PvfCheckerMessage),\n}\n```\n\n----------------------------------------\n\nTITLE: Running Bridge Relayer Docker Container for Rococo-Westend\nDESCRIPTION: This Docker command sets up and runs a bridge relayer between Rococo and Westend networks. It mounts key files, specifies network hosts and ports, and configures various parameters for the relay operation.\nSOURCE: https://github.com/paritytech/polkadot-sdk/blob/master/bridges/docs/running-relayer.md#2025-04-21_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ndocker run \\\n    -v $BRIDGE_HUB_ROCOCO_KEY_FILE:/bhr.key \\\n    -v $BRIDGE_HUB_WESTEND_KEY_FILE:/bhw.key \\\n    $DOCKER_IMAGE \\\n    relay-headers-and-messages bridge-hub-rococo-bridge-hub-westend \\\n    --rococo-host $ROCOCO_HOST \\\n    --rococo-port $ROCOCO_PORT \\\n    $ROCOCO_IS_SECURE \\\n    --rococo-version-mode Auto \\\n    --bridge-hub-rococo-host $BRIDGE_HUB_ROCOCO_HOST \\\n    --bridge-hub-rococo-port $BRIDGE_HUB_ROCOCO_PORT \\\n    $BRIDGE_HUB_ROCOCO_IS_SECURE \\\n    --bridge-hub-rococo-version-mode Auto \\\n    --bridge-hub-rococo-signer-file /bhr.key \\\n    --bridge-hub-rococo-transactions-mortality 16 \\\n    --westend-host $WESTEND_HOST \\\n    --westend-port $WESTEND_PORT \\\n    $WESTEND_IS_SECURE \\\n    --westend-version-mode Auto \\\n    --bridge-hub-westend-host $BRIDGE_HUB_WESTEND_HOST \\\n    --bridge-hub-westend-port $BRIDGE_HUB_WESTEND_PORT \\\n    $BRIDGE_HUB_WESTEND_IS_SECURE \\\n    --bridge-hub-westend-version-mode Auto \\\n    --bridge-hub-westend-signer-file /bhw.key \\\n    --bridge-hub-westend-transactions-mortality 16 \\\n    --lane 00000002\n```\n\n----------------------------------------\n\nTITLE: Formatting Function Parameters in Rust\nDESCRIPTION: Shows correct and incorrect ways to format function parameters when they exceed one line. Demonstrates proper indentation for multi-line parameter lists.\nSOURCE: https://github.com/paritytech/polkadot-sdk/blob/master/substrate/docs/STYLE_GUIDE.md#2025-04-21_snippet_2\n\nLANGUAGE: rust\nCODE:\n```\n// OK\nfn foo(\n\treally_long_parameter_name_1: SomeLongTypeName,\n\treally_long_parameter_name_2: SomeLongTypeName,\n\tshrt_nm_1: u8,\n\tshrt_nm_2: u8,\n) {\n   ...\n}\n\n// NOT OK\nfn foo(really_long_parameter_name_1: SomeLongTypeName, really_long_parameter_name_2: SomeLongTypeName,\n\tshrt_nm_1: u8, shrt_nm_2: u8) {\n\t...\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Chain-Specific Crate in Cargo.toml\nDESCRIPTION: Demonstrates how to configure a chain-specific crate to be excluded from the Polkadot-SDK umbrella crate using a custom metadata attribute.\nSOURCE: https://github.com/paritytech/polkadot-sdk/blob/master/CONTRIBUTING.md#2025-04-21_snippet_0\n\nLANGUAGE: toml\nCODE:\n```\n[package]\n# Other stuff...\n\n[package.metadata.polkadot-sdk]\nexclude-from-umbrella = true\n\n# Other stuff...\n```\n\n----------------------------------------\n\nTITLE: Installing Polkadot via Cargo\nDESCRIPTION: This bash command installs Polkadot using Cargo, Rust's package manager. It clones the repository and installs a specific tagged version.\nSOURCE: https://github.com/paritytech/polkadot-sdk/blob/master/polkadot/README.md#2025-04-21_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ncargo install --git https://github.com/paritytech/polkadot-sdk --tag <version> polkadot --locked\n```\n\n----------------------------------------\n\nTITLE: Best Chain Containing Rule in Markdown\nDESCRIPTION: Details the best-chain-containing rule implementation for finality gadgets, including handling of required blocks and chain selection criteria.\nSOURCE: https://github.com/paritytech/polkadot-sdk/blob/master/polkadot/roadmap/implementers-guide/src/protocol-chain-selection.md#2025-04-21_snippet_2\n\nLANGUAGE: markdown\nCODE:\n```\n## The best-chain-containing rule\n\nFinality gadgets, as mentioned above, will often impose an additional requirement to vote on a chain containing a\nspecific block, known as the **required** block. Although this is typically the most recently finalized block, it is\npossible that it may be a block that is unfinalized. When receiving such a request:\n1. If the required block is the best finalized block, then select the best viable leaf.\n2. If the required block is unfinalized and non-viable, then select the required block and go no further. This is likely\n   an indication that something bad will be finalized in the network, which will never happen when approvals & disputes\n   are functioning correctly. Nevertheless we account for the case here.\n3. If the required block is unfinalized and viable, then iterate over the viable leaves in descending order by score and\n   select the first one which contains the required block in its chain. Backwards iteration is a simple way to check\n   this, but if unfinalized chains grow long then Merkle Mountain-Ranges will most likely be more efficient.\n\nOnce selecting a leaf, the chain should be constrained to the maximum of the required block or the highest\n**finalizable** ancestor.\n```\n\n----------------------------------------\n\nTITLE: Markdown Header and Description for Remark Storage Pallet\nDESCRIPTION: Markdown documentation defining the purpose and license of a storage pallet that enables storing arbitrary data off-chain in the Polkadot ecosystem.\nSOURCE: https://github.com/paritytech/polkadot-sdk/blob/master/substrate/frame/remark/README.md#2025-04-21_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n# Remark Storage Pallet\n\nAllows storing arbitrary data off chain.\n\n\nLicense: Apache-2.0\n```\n\n----------------------------------------\n\nTITLE: Installing Polkadot on Debian-based Systems\nDESCRIPTION: This bash script imports the Parity GPG key, adds the Parity repository, and installs Polkadot on Debian-based systems like Debian 10 and Ubuntu 20.04.\nSOURCE: https://github.com/paritytech/polkadot-sdk/blob/master/polkadot/README.md#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n# Import the security@parity.io GPG key\ngpg --recv-keys --keyserver hkps://keys.mailvelope.com 9D4B2B6EB8F97156D19669A9FF0812D491B96798\ngpg --export 9D4B2B6EB8F97156D19669A9FF0812D491B96798 > /usr/share/keyrings/parity.gpg\n# Add the Parity repository and update the package index\necho 'deb [signed-by=/usr/share/keyrings/parity.gpg] https://releases.parity.io/deb release main' > /etc/apt/sources.list.d/parity.list\napt update\n# Install the `parity-keyring` package - This will ensure the GPG key\n# used by APT remains up-to-date\napt install parity-keyring\n# Install polkadot\napt install polkadot\n```\n\n----------------------------------------\n\nTITLE: Running Omni Node\nDESCRIPTION: Command to start Omni Node in development mode with a custom chain specification\nSOURCE: https://github.com/paritytech/polkadot-sdk/blob/master/templates/minimal/README.md#2025-04-21_snippet_3\n\nLANGUAGE: sh\nCODE:\n```\npolkadot-omni-node --chain <path/to/chain_spec.json> --dev\n```\n\n----------------------------------------\n\nTITLE: Building Parachain Runtime\nDESCRIPTION: Command to build the parachain template runtime in release mode.\nSOURCE: https://github.com/paritytech/polkadot-sdk/blob/master/templates/parachain/README.docify.md#2025-04-21_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ncargo build --release\n```\n\n----------------------------------------\n\nTITLE: Implementing Scored Pool Module in a Pallet (Rust)\nDESCRIPTION: This code snippet demonstrates how to implement the Scored Pool Module within a custom pallet. It shows the basic structure of a pallet using the scored_pool module, including the Config trait implementation and a sample extrinsic for submitting candidacy.\nSOURCE: https://github.com/paritytech/polkadot-sdk/blob/master/substrate/frame/scored-pool/README.md#2025-04-21_snippet_0\n\nLANGUAGE: rust\nCODE:\n```\nuse pallet_scored_pool::{self as scored_pool};\n\n#[frame_support::pallet]\npub mod pallet {\n    use super::*;\n    use frame_support::pallet_prelude::*;\n    use frame_system::pallet_prelude::*;\n\n    #[pallet::pallet]\n    pub struct Pallet<T>(_);\n\n    #[pallet::config]\n    pub trait Config: frame_system::Config + scored_pool::Config {}\n\n    #[pallet::call]\n    impl<T: Config> Pallet<T> {\n        #[pallet::weight(0)]\n        pub fn candidate(origin: OriginFor<T>) -> DispatchResult {\n            let who = ensure_signed(origin)?;\n\n            let _ = <scored_pool::Pallet<T>>::submit_candidacy(\n                T::RuntimeOrigin::from(Some(who.clone()).into())\n            );\n            Ok(())\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Importing Rust Dependencies for Staking Module\nDESCRIPTION: The document references several Rust module dependencies used in the staking implementation, including pallet-staking, pallet-authorship, pallet-balances, and pallet-session. These are core components for managing staking operations, rewards, and validator selection.\nSOURCE: https://github.com/paritytech/polkadot-sdk/blob/master/substrate/frame/staking/README.md#2025-04-21_snippet_1\n\nLANGUAGE: rust\nCODE:\n```\nuse pallet_staking::{Module, ValidatorPrefs, Exposure, Payee, GenesisConfig};\nuse pallet_authorship::EventHandler;\nuse pallet_balances;\nuse pallet_session;\n```\n\n----------------------------------------\n\nTITLE: Request-Response Protocol Format\nDESCRIPTION: Defines the message format for request-response protocols in Substrate networking. Messages are prefixed with LEB128-encoded length, followed by protocol-specific content. Each request uses a new substream with defined opening and closing behaviors.\nSOURCE: https://github.com/paritytech/polkadot-sdk/blob/master/substrate/client/network/README.md#2025-04-21_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\n1. Opening side:\n   - Send message prefixed with LEB128-encoded length\n   - Close writing side\n\n2. Remote side:\n   - Send response prefixed with LEB128-encoded length\n   - Close writing side\n```\n\n----------------------------------------\n\nTITLE: Starting Relay Chain Validators\nDESCRIPTION: Launches two validator nodes (Alice and Bob) for the Rococo test network local chain. These validators will form the relay chain to which the parachain will connect.\nSOURCE: https://github.com/paritytech/polkadot-sdk/blob/master/polkadot/parachain/test-parachains/adder/collator/README.md#2025-04-21_snippet_1\n\nLANGUAGE: sh\nCODE:\n```\ncargo run --release -- -d alice --chain rococo-local --validator --alice --port 50551\ncargo run --release -- -d bob --chain rococo-local --validator --bob --port 50552\n```\n\n----------------------------------------\n\nTITLE: Formatting Structs and Enums with Trailing Commas in Rust\nDESCRIPTION: Shows the correct use of trailing commas in multi-line struct definitions and single-line enum declarations. Demonstrates when to use and omit trailing commas.\nSOURCE: https://github.com/paritytech/polkadot-sdk/blob/master/docs/contributor/STYLE_GUIDE.md#2025-04-21_snippet_4\n\nLANGUAGE: rust\nCODE:\n```\nstruct Point<T> {\n\tx: T,\n\ty: T,    // <-- Multiline comma-delimited lists end with a trailing ,\n}\n\n// Single line comma-delimited items do not have a trailing `,`\nenum Meal { Breakfast, Lunch, Dinner };\n```\n\n----------------------------------------\n\nTITLE: Running Zombienet with Native Provider\nDESCRIPTION: Command to launch a local test network using Zombienet with the Native provider. This approach is useful for development and deploying changes, but requires compilation of the binaries.\nSOURCE: https://github.com/paritytech/polkadot-sdk/blob/master/cumulus/README.md#2025-04-21_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\nzombienet --provider native spawn ./zombienet/examples/small_network.toml\n```\n\n----------------------------------------\n\nTITLE: Creating Parachain Database Snapshot\nDESCRIPTION: Commands to create a snapshot containing both parachain and relay chain data for a collator node. Creates directory structure, copies both databases, and creates a compressed archive.\nSOURCE: https://github.com/paritytech/polkadot-sdk/blob/master/cumulus/zombienet/tests/0007-prepare-warp-sync-db-snapshot.md#2025-04-21_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n#Parachain data\nmkdir -p parachain-snapshot/charlie/data/chains/local_testnet/db/\n\n# Relay data\nmkdir -p parachain-snapshot/charlie/relay-data/chains/rococo_local_testnet/db/\n\ncp -r chain-data/charlie/data/chains/local_testnet/db/. parachain-snapshot/charlie/data/chains/local_testnet/db/\n\ncp -r chain-data/charlie/relay-data/chains/rococo_local_testnet/db/. parachain-snapshot/charlie/relay-data/chains/rococo_local_testnet/db/\n\ntar -C parachain-snapshot/charlie/ -czf parachain.tgz data relay-data\n```\n\n----------------------------------------\n\nTITLE: Removing a Member in Rust\nDESCRIPTION: This code snippet demonstrates the function call to remove a member from the election system. It's used when a candidate needs to be kicked out.\nSOURCE: https://github.com/paritytech/polkadot-sdk/blob/master/substrate/frame/elections-phragmen/README.md#2025-04-21_snippet_2\n\nLANGUAGE: rust\nCODE:\n```\n[remove_member]\n```\n\n----------------------------------------\n\nTITLE: Generating BEEFY Key with Subkey CLI\nDESCRIPTION: This command-line snippet shows how to generate a BEEFY key using the Subkey tool. It uses the ECDSA scheme, which is different from the typical SR25519 or ED25519 schemes used in other Substrate configurations.\nSOURCE: https://github.com/paritytech/polkadot-sdk/blob/master/substrate/client/consensus/beefy/README.md#2025-04-21_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\nsubkey generate --scheme ecdsa\n```\n\n----------------------------------------\n\nTITLE: Running Pallet Benchmark with Omni-Bencher\nDESCRIPTION: Example command for benchmarking a specific pallet (pallet_balances) using the standalone FRAME omni-bencher CLI with the Westend runtime.\nSOURCE: https://github.com/paritytech/polkadot-sdk/blob/master/substrate/utils/frame/benchmarking-cli/README.md#2025-04-21_snippet_3\n\nLANGUAGE: sh\nCODE:\n```\nframe-omni-bencher v1 \\\n    benchmark pallet \\\n    --runtime target/release/wbuild/westend-runtime/westend-runtime.compact.compressed.wasm \\\n    --pallet \"pallet_balances\" --extrinsic \"\"\n```\n\n----------------------------------------\n\nTITLE: Running Pallet Benchmarks for Ethereum Client on Polkadot Parachain\nDESCRIPTION: Command to benchmark the snowbridge_pallet_ethereum_client pallet on a Polkadot parachain. The benchmark runs on the bridge-hub-rococo-dev chain with 50 steps repeated 20 times, targeting all extrinsics in the pallet.\nSOURCE: https://github.com/paritytech/polkadot-sdk/blob/master/bridges/snowbridge/pallets/ethereum-client/benchmark.md#2025-04-21_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ncargo run --release --bin polkadot-parachain \\\n--features runtime-benchmarks \\\n-- \\\nbenchmark pallet \\\n--base-path /mnt/scratch/benchmark \\\n--chain=bridge-hub-rococo-dev \\\n--pallet=snowbridge_pallet_ethereum_client \\\n--extrinsic=\"*\" \\\n--execution=wasm --wasm-execution=compiled \\\n--steps 50 --repeat 20 \\\n--output ./parachains/runtimes/bridge-hubs/bridge-hub-rococo/src/weights/snowbridge_pallet_ethereum_client.rs\n```\n\n----------------------------------------\n\nTITLE: Handling DetermineUndisputedChain Message\nDESCRIPTION: Executes determine_undisputed_chain function to analyze block descriptions and identify the highest undisputed block in the chain.\nSOURCE: https://github.com/paritytech/polkadot-sdk/blob/master/polkadot/roadmap/implementers-guide/src/node/disputes/dispute-coordinator.md#2025-04-21_snippet_3\n\nLANGUAGE: markdown\nCODE:\n```\n### On `DisputeCoordinatorMessage::DetermineUndisputedChain`\n\nExecutes `fn determine_undisputed_chain()` which performs the following:\n\n- Load `\"recent-disputes\"`.\n- Deconstruct into parts `{ base_number, block_descriptions, rx }`\n- Starting from the beginning of `block_descriptions`:\n  1. Check the `RecentDisputes` for a dispute of each candidate in the block description.\n  1. If there is a dispute which is active or concluded negative, exit the loop.\n- For the highest index `i` reached in the `block_descriptions`, send `(base_number + i + 1, block_hash)` on the\n  channel, unless `i` is 0, in which case `None` should be sent. The `block_hash` is determined by inspecting\n  `block_descriptions[i]`.\n```\n\n----------------------------------------\n\nTITLE: Running Subkey in Docker Container\nDESCRIPTION: Command to run Subkey inside a Docker container using the official Parity image.\nSOURCE: https://github.com/paritytech/polkadot-sdk/blob/master/substrate/bin/utils/subkey/README.md#2025-04-21_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ndocker run -it --pull=always docker.io/parity/subkey:latest <command to subkey>\n```\n\n----------------------------------------\n\nTITLE: Setting Maximum Outbound Payload Size in Rust for Messages Module\nDESCRIPTION: This code shows how to set the maximum size for outbound messages in the Messages Module configuration.\nSOURCE: https://github.com/paritytech/polkadot-sdk/blob/master/bridges/modules/messages/README.md#2025-04-21_snippet_6\n\nLANGUAGE: rust\nCODE:\n```\npallet_bridge_messages::Config::MaximalOutboundPayloadSize\n```\n\n----------------------------------------\n\nTITLE: Running Docker Compose for Metrics Infrastructure\nDESCRIPTION: Commands to set up a local metrics collection environment using Docker Compose, which includes Prometheus, Pyroscope, and Grafana services for monitoring subsystem benchmarks.\nSOURCE: https://github.com/paritytech/polkadot-sdk/blob/master/polkadot/node/subsystem-bench/README.md#2025-04-21_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\ncd polkadot/node/subsystem-bench/docker\ndocker compose up\n```\n\n----------------------------------------\n\nTITLE: Implementing Dispute Coordinator Message Types in Rust\nDESCRIPTION: Defines the message types for the Dispute Coordinator subsystem, which coordinates validator participation in disputes, tracks live disputes, and handles statement imports. Includes messages for importing statements, querying disputes, issuing local statements, and determining undisputed chains.\nSOURCE: https://github.com/paritytech/polkadot-sdk/blob/master/polkadot/roadmap/implementers-guide/src/types/overseer-protocol.md#2025-04-21_snippet_15\n\nLANGUAGE: rust\nCODE:\n```\nenum DisputeCoordinatorMessage {\n    /// Import a statement by a validator about a candidate.\n    ///\n    /// The subsystem will silently discard ancient statements or sets of only dispute-specific statements for\n    /// candidates that are previously unknown to the subsystem. The former is simply because ancient\n    /// data is not relevant and the latter is as a DoS prevention mechanism. Both backing and approval\n    /// statements already undergo anti-DoS procedures in their respective subsystems, but statements\n    /// cast specifically for disputes are not necessarily relevant to any candidate the system is\n    /// already aware of and thus present a DoS vector. Our expectation is that nodes will notify each\n    /// other of disputes over the network by providing (at least) 2 conflicting statements, of which one is either\n    /// a backing or validation statement.\n    ///\n    /// This does not do any checking of the message signature.\n    ImportStatements {\n        /// The hash of the candidate.\n        candidate_hash: CandidateHash,\n        /// The candidate receipt itself.\n        candidate_receipt: CandidateReceipt,\n        /// The session the candidate appears in.\n        session: SessionIndex,\n        /// Triples containing the following:\n        /// - A statement, either indicating validity or invalidity of the candidate.\n        /// - The validator index (within the session of the candidate) of the validator casting the vote.\n        /// - The signature of the validator casting the vote.\n        statements: Vec<(DisputeStatement, ValidatorIndex, ValidatorSignature)>,\n\n        /// Inform the requester once we finished importing.\n        ///\n        /// This is, we either discarded the votes, just record them because we\n        /// casted our vote already or recovered availability for the candidate\n        /// successfully.\n        pending_confirmation: oneshot::Sender<ImportStatementsResult>\n    },\n    /// Fetch a list of all recent disputes that the co-ordinator is aware of.\n    /// These are disputes which have occurred any time in recent sessions, which may have already concluded.\n    RecentDisputes(ResponseChannel<Vec<(SessionIndex, CandidateHash)>>),\n    /// Fetch a list of all active disputes that the co-ordinator is aware of.\n    /// These disputes are either unconcluded or recently concluded.\n    ActiveDisputes(ResponseChannel<Vec<(SessionIndex, CandidateHash)>>),\n    /// Get candidate votes for a candidate.\n    QueryCandidateVotes(SessionIndex, CandidateHash, ResponseChannel<Option<CandidateVotes>>),\n    /// Sign and issue local dispute votes. A value of `true` indicates validity, and `false` invalidity.\n    IssueLocalStatement(SessionIndex, CandidateHash, CandidateReceipt, bool),\n    /// Determine the highest undisputed block within the given chain, based on where candidates\n    /// were included. If even the base block should not be finalized due to a dispute,\n    /// then `None` should be returned on the channel.\n    ///\n    /// The block descriptions begin counting upwards from the block after the given `base_number`. The `base_number`\n    /// is typically the number of the last finalized block but may be slightly higher. This block\n    /// is inevitably going to be finalized so it is not accounted for by this function.\n    DetermineUndisputedChain {\n        base_number: BlockNumber,\n        block_descriptions: Vec<(BlockHash, SessionIndex, Vec<CandidateHash>)>,\n        rx: ResponseSender<Option<(BlockNumber, BlockHash)>>,\n    }\n}\n\n/// Result of `ImportStatements`.\npub enum ImportStatementsResult {\n\t/// Import was invalid (candidate was not available)  and the sending peer should get banned.\n\tInvalidImport,\n\t/// Import was valid and can be confirmed to peer.\n\tValidImport\n}\n```\n\n----------------------------------------\n\nTITLE: Getting Validation Code Hash in Rust\nDESCRIPTION: Introduced in ParachainHost v2, this function retrieves the validation code hash used by a parachain based on the given block and core occupation assumption. Takes a Block, ParaId and OccupiedCoreAssumption as parameters and returns an optional ValidationCodeHash.\nSOURCE: https://github.com/paritytech/polkadot-sdk/blob/master/polkadot/roadmap/implementers-guide/src/runtime-api/validation-code.md#2025-04-21_snippet_2\n\nLANGUAGE: rust\nCODE:\n```\nfn validation_code_hash(at: Block, ParaId, OccupiedCoreAssumption) -> Option<ValidationCodeHash>;\n```\n\n----------------------------------------\n\nTITLE: Visualizing Approval Process Flow in DOT\nDESCRIPTION: Graphviz DOT diagram showing the flow of the approval process from block inclusion through assignments and approval to finality, with a branch for escalation and consequences.\nSOURCE: https://github.com/paritytech/polkadot-sdk/blob/master/polkadot/roadmap/implementers-guide/src/protocol-approval.md#2025-04-21_snippet_0\n\nLANGUAGE: dot\nCODE:\n```\ndigraph {\n  Included -> Assignments -> Approval -> Finality\n  Assignments -> Escalation -> Consequences\n}\n```\n\n----------------------------------------\n\nTITLE: Running Zombienet\nDESCRIPTION: Commands to start the network using Zombienet with different configurations\nSOURCE: https://github.com/paritytech/polkadot-sdk/blob/master/templates/minimal/README.md#2025-04-21_snippet_6\n\nLANGUAGE: sh\nCODE:\n```\nzombienet --provider native spawn zombienet-omni-node.toml\n```\n\n----------------------------------------\n\nTITLE: Handling Panickers in Rust\nDESCRIPTION: Illustrates how to handle potential panickers by providing explicit proofs. Shows the use of expect() with a detailed explanation to avoid unwrap().\nSOURCE: https://github.com/paritytech/polkadot-sdk/blob/master/substrate/docs/STYLE_GUIDE.md#2025-04-21_snippet_6\n\nLANGUAGE: rust\nCODE:\n```\nlet mut target_path =\n\tself.path().expect(\n\t\t\"self is instance of DiskDirectory;\\\n\t\tDiskDirectory always returns path;\\\n\t\tqed\"\n\t);\n```\n\n----------------------------------------\n\nTITLE: Configuring Prometheus for Subsystem Benchmarking in YAML\nDESCRIPTION: Configuration for Prometheus server that scrapes metrics from the subsystem benchmark client. Sets up global scrape interval of 5 seconds with two jobs: one for Prometheus itself and another for the subsystem-bench metrics endpoint with a fast 500ms scrape interval.\nSOURCE: https://github.com/paritytech/polkadot-sdk/blob/master/polkadot/node/subsystem-bench/README.md#2025-04-21_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nglobal:\n  scrape_interval: 5s\n\nscrape_configs:\n  - job_name: \"prometheus\"\n    static_configs:\n    - targets: [\"localhost:9090\"]\n  - job_name: \"subsystem-bench\"\n    scrape_interval: 0s500ms\n    static_configs:\n    - targets: ['localhost:9999']\n```\n\n----------------------------------------\n\nTITLE: Visualizing Subsystem Hierarchy in Polkadot SDK\nDESCRIPTION: A text-based diagram showing the hierarchical structure of subsystems managed by the Overseer. It illustrates how Block Import Events and Finalization Events flow into the Overseer, which then coordinates with multiple subsystems (A, B, C, D).\nSOURCE: https://github.com/paritytech/polkadot-sdk/blob/master/polkadot/roadmap/implementers-guide/src/node/overseer.md#2025-04-21_snippet_0\n\nLANGUAGE: text\nCODE:\n```\n+--------------+      +------------------+    +--------------------+\n|              |      |                  |---->   Subsystem A      |\n| Block Import |      |                  |    +--------------------+\n|    Events    |------>                  |    +--------------------+\n+--------------+      |                  |---->   Subsystem B      |\n                      |   Overseer       |    +--------------------+\n+--------------+      |                  |    +--------------------+\n|              |      |                  |---->   Subsystem C      |\n| Finalization |------>                  |    +--------------------+\n|    Events    |      |                  |    +--------------------+\n|              |      |                  |---->   Subsystem D      |\n+--------------+      +------------------+    +--------------------+\n```\n\n----------------------------------------\n\nTITLE: Creating Database Snapshot\nDESCRIPTION: Commands to create and prepare the database snapshot directory structure.\nSOURCE: https://github.com/paritytech/polkadot-sdk/blob/master/substrate/zombienet/0001-basic-warp-sync/README.md#2025-04-21_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nmkdir -p db-snapshot/alice/data/chains/local_testnet/db/\ncp -r db-test-gen/alice/data/chains/local_testnet/db/full db-snapshot/alice/data/chains/local_testnet/db/\n```\n\n----------------------------------------\n\nTITLE: Benchmarking Balances Pallet\nDESCRIPTION: Example command to benchmark the pallet_balances pallet using the Westend runtime WASM binary.\nSOURCE: https://github.com/paritytech/polkadot-sdk/blob/master/substrate/utils/frame/omni-bencher/README.md#2025-04-21_snippet_5\n\nLANGUAGE: sh\nCODE:\n```\nframe-omni-bencher v1 benchmark pallet \\\n--runtime target/release/wbuild/westend-runtime/westend-runtime.compact.compressed.wasm \\\n--pallet \"pallet_balances\" --extrinsic \"\"\n```\n\n----------------------------------------\n\nTITLE: Formatting Structs and Enums in Rust\nDESCRIPTION: Shows proper formatting for structs and enums, including trailing commas for multi-line comma-delimited sets and single-line formatting for simple enums.\nSOURCE: https://github.com/paritytech/polkadot-sdk/blob/master/substrate/docs/STYLE_GUIDE.md#2025-04-21_snippet_4\n\nLANGUAGE: rust\nCODE:\n```\nstruct Point<T> {\n\tx: T,\n\ty: T,    // <-- Multiline comma-delimited lists end with a trailing ,\n}\n\n// Single line comma-delimited items do not have a trailing `,`\nenum Meal { Breakfast, Lunch, Dinner };\n```\n\n----------------------------------------\n\nTITLE: Polkadot and Substrate Branding Header Template for Pallet Documentation\nDESCRIPTION: Optional template for adding Polkadot and Substrate branding and links at the beginning of pallet documentation. Includes GitHub repository links and badges.\nSOURCE: https://github.com/paritytech/polkadot-sdk/blob/master/docs/contributor/DOCUMENTATION_GUIDELINES.md#2025-04-21_snippet_5\n\nLANGUAGE: rust\nCODE:\n```\n//! > Made with *Substrate*, for *Polkadot*.\n//!\n//! [![github]](https://github.com/paritytech/polkadot-sdk/tree/master/substrate/frame/fast-unstake) -\n//! [![polkadot]](https://polkadot.com)\n//!\n//! [polkadot]: https://img.shields.io/badge/polkadot-E6007A?style=for-the-badge&logo=polkadot&logoColor=white\n//! [github]: https://img.shields.io/badge/github-8da0cb?style=for-the-badge&labelColor=555555&logo=github\n```\n\n----------------------------------------\n\nTITLE: Building Substrate Relay Binary\nDESCRIPTION: Instructions for cloning and building the substrate-relay binary from parity-bridges-common repository\nSOURCE: https://github.com/paritytech/polkadot-sdk/blob/master/cumulus/parachains/runtimes/bridge-hubs/README.md#2025-04-21_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\ngit clone https://github.com/paritytech/parity-bridges-common.git\ncd parity-bridges-common\n\n# checkout desired branch or use master:\n# git checkout -b master --track origin/master\n# `polkadot-staging` (recommended) is stabilized and compatible for Cumulus releases\n# `master` is latest development\ngit checkout -b polkadot-staging --track origin/polkadot-staging\n\ncargo build --release -p substrate-relay\ncp target/release/substrate-relay ~/local_bridge_testing/bin/substrate-relay\n```\n\n----------------------------------------\n\nTITLE: Handling IssueLocalStatement Message\nDESCRIPTION: Executes the issue_local_statement function which handles statement creation, signing, storage, and distribution for dispute resolution.\nSOURCE: https://github.com/paritytech/polkadot-sdk/blob/master/polkadot/roadmap/implementers-guide/src/node/disputes/dispute-coordinator.md#2025-04-21_snippet_2\n\nLANGUAGE: markdown\nCODE:\n```\n### On `DisputeCoordinatorMessage::IssueLocalStatement`\n\nExecutes `fn issue_local_statement()` which performs the following operations:\n\n- Deconstruct into parts `{ session_index, candidate_hash, candidate_receipt, is_valid }`.\n- Construct a [`DisputeStatement`][DisputeStatement] based on `Valid` or `Invalid`, depending on the parameterization of\n  this routine.\n- Sign the statement with each key in the `SessionInfo`'s list of parachain validation keys which is present in the\n  keystore, except those whose indices appear in `voted_indices`. This will typically just be one key, but this does\n  provide some future-proofing for situations where the same node may run on behalf multiple validators. At the time of\n  writing, this is not a use-case we support as other subsystems do not invariably   provide this guarantee.\n- Write statement to DB.\n- Send a `DisputeDistributionMessage::SendDispute` message to get the vote distributed to other validators.\n```\n\n----------------------------------------\n\nTITLE: Defining Available Data Structure in Rust\nDESCRIPTION: Defines the AvailableData struct, which contains the Proof-of-Validation and PersistedValidationData for a candidate block. This data needs to be kept available for each candidate included in the relay chain.\nSOURCE: https://github.com/paritytech/polkadot-sdk/blob/master/polkadot/roadmap/implementers-guide/src/types/availability.md#2025-04-21_snippet_2\n\nLANGUAGE: rust\nCODE:\n```\nstruct AvailableData {\n    /// The Proof-of-Validation of the candidate.\n    pov: Arc<PoV>,\n    /// The persisted validation data used to check the candidate.\n    validation_data: PersistedValidationData,\n}\n```\n\n----------------------------------------\n\nTITLE: Core and Networking Communication Flow\nDESCRIPTION: ASCII diagram demonstrating the interaction between Core and Networking components, showing message flow and transport layer integration.\nSOURCE: https://github.com/paritytech/polkadot-sdk/blob/master/polkadot/roadmap/implementers-guide/src/architecture.md#2025-04-21_snippet_2\n\nLANGUAGE: text\nCODE:\n```\n          ___________________                    ____________________\n         /       Core        \\                  /     Networking     \\\n         |                   |  Send \"Hello\"    |                    |\n         |                   |-  to \"foo\"   --->|                    |\n         |                   |                  |                    |\n         |                   |                  |                    |\n         |                   |                  |                    |\n         |                   |    Got \"World\"   |                    |\n         |                   |<--  from \"bar\" --|                    |\n         |                   |                  |                    |\n         \\___________________/                  \\____________________/\n                                                   ______| |______\n                                                   ___Transport___\n```\n\n----------------------------------------\n\nTITLE: Block Finalization Signal Handler\nDESCRIPTION: Handles the OverseerSignal::BlockFinalized signal by updating StoredBlockRange, pruning old entries, and cleaning up block assignments.\nSOURCE: https://github.com/paritytech/polkadot-sdk/blob/master/polkadot/roadmap/implementers-guide/src/node/approval/approval-voting.md#2025-04-21_snippet_3\n\nLANGUAGE: markdown\nCODE:\n```\n#### `OverseerSignal::BlockFinalized`\n\nOn receiving an `OverseerSignal::BlockFinalized(h)`, we fetch the block number `b` of that block from the `ChainApi` subsystem. We update our `StoredBlockRange` to begin at `b+1`. Additionally, we remove all block entries and candidates referenced by them up to and including `b`. Lastly, we prune out all descendants of `h` transitively: when we remove a `BlockEntry` with number `b` that is not equal to `h`, we recursively delete all the `BlockEntry`s referenced as children. We remove the `block_assignments` entry for the block hash and if `block_assignments` is now empty, remove the `CandidateEntry`. We also update each of the `BlockNumber -> Vec<Hash>` keys in the database to reflect the blocks at that height, clearing if empty.\n```\n\n----------------------------------------\n\nTITLE: Finality Relay Documentation Links\nDESCRIPTION: Links to sequence diagrams and code documentation for GRANDPA and Parachains finality relays.\nSOURCE: https://github.com/paritytech/polkadot-sdk/blob/master/bridges/docs/high-level-overview.md#2025-04-21_snippet_3\n\nLANGUAGE: markdown\nCODE:\n```\nMore: [GRANDPA Finality Relay Sequence Diagram](./grandpa-finality-relay.html), [pallet level documentation and code](../relays/finality/)\n\nMore: [Parachains Finality Relay Sequence Diagram](./parachains-finality-relay.html), [code](../relays/parachains/)\n```\n\n----------------------------------------\n\nTITLE: Setting Operating Mode for Ethereum Queue\nDESCRIPTION: Governance function that allows setting the operating mode of the pallet to control message processing. Can be used to halt or resume operations through a Root origin call.\nSOURCE: https://github.com/paritytech/polkadot-sdk/blob/master/bridges/snowbridge/pallets/inbound-queue-v2/README.md#2025-04-21_snippet_1\n\nLANGUAGE: rust\nCODE:\n```\npub fn set_operating_mode(\n    origin: OriginFor<T>,\n    mode: BasicOperatingMode,\n) -> DispatchResult\n```\n\n----------------------------------------\n\nTITLE: Building Polkadot Binary with Fast Runtime\nDESCRIPTION: Commands for building the Polkadot binary with fast-runtime feature and related worker binaries\nSOURCE: https://github.com/paritytech/polkadot-sdk/blob/master/cumulus/parachains/runtimes/bridge-hubs/README.md#2025-04-21_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ncd <polkadot-sdk-git-repo-dir>\ncargo build --release --features fast-runtime --bin polkadot\ncp target/release/polkadot ~/local_bridge_testing/bin/polkadot\n\ncargo build --release --features fast-runtime --bin polkadot-prepare-worker\ncp target/release/polkadot-prepare-worker ~/local_bridge_testing/bin/polkadot-prepare-worker\n\ncargo build --release --features fast-runtime --bin polkadot-execute-worker\ncp target/release/polkadot-execute-worker ~/local_bridge_testing/bin/polkadot-execute-worker\n```\n\n----------------------------------------\n\nTITLE: Adding WebAssembly Target for Specific Nightly Rust Version\nDESCRIPTION: Command to configure a specific nightly Rust version to support WebAssembly compilation, which is required for building Substrate runtimes. The date parameter should match the installed nightly version.\nSOURCE: https://github.com/paritytech/polkadot-sdk/blob/master/templates/solochain/docs/rust-setup.md#2025-04-21_snippet_9\n\nLANGUAGE: bash\nCODE:\n```\nrustup target add wasm32-unknown-unknown --toolchain nightly-<yyyy-MM-dd>\n```\n\n----------------------------------------\n\nTITLE: Sending Messages in Rust\nDESCRIPTION: Method for sending messages through the Bridge Messages Pallet. This is called by other runtime code to queue outbound messages.\nSOURCE: https://github.com/paritytech/polkadot-sdk/blob/master/bridges/modules/messages/README.md#2025-04-21_snippet_0\n\nLANGUAGE: rust\nCODE:\n```\nsend_message()\n```\n\n----------------------------------------\n\nTITLE: Formatting Match Arms in Rust\nDESCRIPTION: Illustrates proper formatting of match arms, showing when to use blocks, trailing commas, and direct expressions. Emphasizes clarity and consistency in match statements.\nSOURCE: https://github.com/paritytech/polkadot-sdk/blob/master/docs/contributor/STYLE_GUIDE.md#2025-04-21_snippet_6\n\nLANGUAGE: rust\nCODE:\n```\nmatch meal {\n\tMeal::Breakfast => \"eggs\",\n\tMeal::Lunch => { check_diet(); recipe() },\n//\tMeal::Dinner => { return Err(\"Fasting\") }   // WRONG\n\tMeal::Dinner => return Err(\"Fasting\"),\n}\n```\n\n----------------------------------------\n\nTITLE: VRF Assignment Criteria Generation\nDESCRIPTION: VRF output computation for RelayVRFModulo assignment criteria using schnorrkel VRF with context \"A&V Core\".\nSOURCE: https://github.com/paritytech/polkadot-sdk/blob/master/polkadot/roadmap/implementers-guide/src/protocol-approval.md#2025-04-21_snippet_2\n\nLANGUAGE: rust\nCODE:\n```\nschnorrkel::vrf::VRFInOut::make_bytes\n```\n\n----------------------------------------\n\nTITLE: Installing Subkey with Cargo\nDESCRIPTION: Command to install Subkey using Cargo package manager at a specific version from the Substrate repository.\nSOURCE: https://github.com/paritytech/polkadot-sdk/blob/master/substrate/bin/utils/subkey/README.md#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ncargo install --force subkey --git https://github.com/paritytech/substrate --version <SET VERSION> --locked\n```\n\n----------------------------------------\n\nTITLE: Running Chopsticks with Chain Specification\nDESCRIPTION: Command to start chopsticks using a specified chain specification file.\nSOURCE: https://github.com/paritytech/polkadot-sdk/blob/master/templates/parachain/README.docify.md#2025-04-21_snippet_8\n\nLANGUAGE: bash\nCODE:\n```\nnpx @acala-network/chopsticks@latest --chain-spec <path/to/chain_spec.json>\n```\n\n----------------------------------------\n\nTITLE: Visualizing Polkadot Core Sale Timeline\nDESCRIPTION: ASCII diagram showing the timeline structure of a Polkadot Core sale, including interlude period, descending-price phase, and fixed-price phase. The diagram maps out timing segments from 0-27 and indicates when price fixing and system core reservation occurs.\nSOURCE: https://github.com/paritytech/polkadot-sdk/blob/master/substrate/frame/broker/README.md#2025-04-21_snippet_0\n\nLANGUAGE: nocompile\nCODE:\n```\n                    1 1 1 1 1 1 1 1 1 1 2 2 2 2 2 2 2 2\n0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7\n--------------------------------------------------------\n< interlude  >\n              <                   sale                 >\n                            ... of which ...\n              <  descending-price   ><   fixed-price   >\n                                                        | <-------\\\nprice fixed, unsold assigned to instapool, system cores reserved -/\n```\n\n----------------------------------------\n\nTITLE: Running Substrate Binaries with Version Check\nDESCRIPTION: Examples of running different Substrate binaries with version and help flags using the run script.\nSOURCE: https://github.com/paritytech/polkadot-sdk/blob/master/substrate/docker/README.md#2025-04-21_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\n./run.sh substrate --version\n./run.sh subkey --help\n./run.sh node-template --version\n./run.sh chain-spec-builder --help\n```\n\n----------------------------------------\n\nTITLE: Rendering V1 Data Types Diagram in DOT\nDESCRIPTION: This DOT code generates a diagram illustrating the relationships between various data types in the Polkadot V1 primitives. It includes structures like CandidateDescriptor, CandidateReceipt, ValidationData, and their associated fields and dependencies.\nSOURCE: https://github.com/paritytech/polkadot-sdk/blob/master/polkadot/roadmap/implementers-guide/src/types/README.md#2025-04-21_snippet_0\n\nLANGUAGE: dot\nCODE:\n```\ndigraph {\n    rankdir = LR;\n    node [shape = plain]\n\n    CandidateDescriptor [label = <\n        <table>\n            <tr><td border=\"0\" colspan=\"2\" port=\"name\">CandidateDescriptor&lt;H = Hash&gt;</td></tr>\n            <tr><td>para_id</td><td port=\"para_id\">Id</td></tr>\n            <tr><td>relay_parent</td><td port=\"relay_parent\">H</td></tr>\n            <tr><td>collator</td><td port=\"collator\">CollatorId</td></tr>\n            <tr><td>persisted_validation_data_hash</td><td port=\"persisted_validation_data_hash\">Hash</td></tr>\n            <tr><td>pov_hash</td><td port=\"pov_hash\">Hash</td></tr>\n            <tr><td>erasure_root</td><td port=\"erasure_root\">Hash</td></tr>\n            <tr><td>signature</td><td port=\"signature\">CollatorSignature</td></tr>\n        </table>\n    >]\n\n    CandidateDescriptor:para_id -> Id:w\n    CandidateDescriptor:pov_hash -> PoVHash\n    CandidateDescriptor:collator -> CollatorId:w\n    CandidateDescriptor:persisted_validation_data_hash -> PersistedValidationDataHash\n\n    Id [label=\"polkadot_parachain_primitives::primitives::Id\"]\n    CollatorId [label=\"polkadot_primitives::v2::CollatorId\"]\n\n    PoVHash [label = \"Hash\", shape=\"doublecircle\", fill=\"gray90\"]\n\n    PoVHash -> PoV:name\n\n    CandidateReceipt [label = <\n        <table>\n            <tr><td border=\"0\" colspan=\"2\" port=\"name\">CandidateReceipt&lt;H = Hash&gt;</td></tr>\n            <tr><td>descriptor</td><td port=\"descriptor\">CandidateDescriptor&lt;H&gt;</td></tr>\n            <tr><td>commitments_hash</td><td port=\"commitments_hash\">Hash</td></tr>\n        </table>\n    >]\n\n    CandidateReceipt:descriptor -> CandidateDescriptor:name\n    CandidateReceipt:commitments_hash -> CandidateCommitmentsHash\n\n    CandidateHash [label = \"Hash\", shape=\"doublecircle\", fill=\"gray90\"]\n    CandidateHash -> CandidateReceipt:name\n\n    CandidateCommitmentsHash [label = \"Hash\", shape=\"doublecircle\", fill=\"gray90\"]\n    CandidateCommitmentsHash -> CandidateCommitments:name\n\n    CommittedCandidateReceipt [label = <\n        <table>\n            <tr><td border=\"0\" colspan=\"2\" port=\"name\">CommittedCandidateReceipt&lt;H = Hash&gt;</td></tr>\n            <tr><td>descriptor</td><td port=\"descriptor\">CandidateDescriptor&lt;H&gt;</td></tr>\n            <tr><td>commitments</td><td port=\"commitments\">CandidateCommitments</td></tr>\n        </table>\n    >]\n\n    CommittedCandidateReceipt:descriptor -> CandidateDescriptor:name\n    CommittedCandidateReceipt:commitments -> CandidateCommitments:name\n\n    ValidationData [label = <\n        <table>\n            <tr><td border=\"0\" colspan=\"2\" port=\"name\">ValidationData&lt;N = BlockNumber&gt;</td></tr>\n            <tr><td>persisted</td><td port=\"persisted\">PersistedValidationData&lt;N&gt;</td></tr>\n            <tr><td>transient</td><td port=\"transient\">TransientValidationData&lt;N&gt;</td></tr>\n        </table>\n    >]\n\n    ValidationData:persisted -> PersistedValidationData:name\n    ValidationData:transient -> TransientValidationData:name\n\n    PersistedValidationData [label = <\n        <table>\n            <tr><td border=\"0\" colspan=\"2\" port=\"name\">PersistedValidationData&lt;N = BlockNumber&gt;</td></tr>\n            <tr><td>parent_head</td><td port=\"parent_head\">HeadData</td></tr>\n            <tr><td>block_number</td><td port=\"block_number\">N</td></tr>\n            <tr><td>relay_parent_storage_root</td><td port=\"relay_parent_storage_root\">Hash</td></tr>\n            <tr><td>max_pov_size</td><td port=\"max_pov_size\">u32</td></tr>\n        </table>\n    >]\n\n    PersistedValidationData:parent_head -> HeadData:w\n\n    PersistedValidationDataHash [label = \"Hash\", shape=\"doublecircle\", fill=\"gray90\"]\n    PersistedValidationDataHash -> PersistedValidationData:name\n\n    TransientValidationData [label = <\n        <table>\n            <tr><td border=\"0\" colspan=\"2\" port=\"name\">TransientValidationData&lt;N = BlockNumber&gt;</td></tr>\n            <tr><td>max_code_size</td><td port=\"max_code_size\">u32</td></tr>\n            <tr><td>max_head_data_size</td><td port=\"max_head_data_size\">u32</td></tr>\n            <tr><td>balance</td><td port=\"balance\">Balance</td></tr>\n            <tr><td>code_upgrade_allowed</td><td port=\"code_upgrade_allowed\">Option&lt;N&gt;</td></tr>\n            <tr><td>dmq_length</td><td port=\"dmq_length\">u32</td></tr>\n        </table>\n    >]\n\n    TransientValidationData:balance -> \"polkadot_core_primitives::v2::Balance\":w\n\n    CandidateCommitments [label = <\n        <table>\n            <tr><td border=\"0\" colspan=\"2\" port=\"name\">CandidateCommitments&lt;N = BlockNumber&gt;</td></tr>\n            <tr><td>upward_messages</td><td port=\"upward_messages\">Vec&lt;UpwardMessage&gt;</td></tr>\n            <tr><td>horizontal_messages</td><td port=\"horizontal_messages\">Vec&lt;OutboundHrmpMessage&lt;Id&gt;&gt;</td></tr>\n            <tr><td>new_validation_code</td><td port=\"new_validation_code\">Option&lt;ValidationCode&gt;</td></tr>\n            <tr><td>head_data</td><td port=\"head_data\">HeadData</td></tr>\n            <tr><td>processed_downward_messages</td><td port=\"processed_downward_messages\">u32</td></tr>\n            <tr><td>hrmp_watermark</td><td port=\"hrmp_watermark\">N</td></tr>\n        </table>\n    >]\n\n    CandidateCommitments:upward_messages -> \"polkadot_parachain_primitives::primitives::UpwardMessage\":w\n    CandidateCommitments:horizontal_messages -> \"polkadot_core_primitives::v2::OutboundHrmpMessage\":w\n    CandidateCommitments:head_data -> HeadData:w\n    CandidateCommitments:horizontal_messages -> \"polkadot_parachain_primitives::primitives::Id\":w\n    CandidateCommitments:new_validation_code -> \"polkadot_parachain_primitives::primitives::ValidationCode\":w\n\n    PoV [label = <\n        <table>\n            <tr><td border=\"0\" colspan=\"2\" port=\"name\">PoV</td></tr>\n            <tr><td>block_data</td><td port=\"block_data\">BlockData</td></tr>\n        </table>\n    >]\n\n    PoV:block_data -> \"polkadot_parachain_primitives::primitives::BlockData\":w\n\n    BackedCandidate [label = <\n        <table>\n            <tr><td border=\"0\" colspan=\"2\" port=\"name\">BackedCandidate&lt;H = Hash&gt;</td></tr>\n            <tr><td>candidate</td><td port=\"candidate\">CommittedCandidateReceipt&lt;H&gt;</td></tr>\n            <tr><td>validity_votes</td><td port=\"validity_votes\">Vec&lt;ValidityAttestation&gt;</td></tr>\n            <tr><td>validator_indices</td><td port=\"validator_indices\">BitVec</td></tr>\n        </table>\n    >]\n\n    BackedCandidate:candidate -> CommittedCandidateReceipt:name\n    BackedCandidate:validity_votes  -> \"polkadot_primitives:v0:ValidityAttestation\":w\n\n    HeadData [label = \"polkadot_parachain_primitives::primitives::HeadData\"]\n\n    CoreIndex [label = <\n        <table>\n            <tr><td border=\"0\" colspan=\"2\" port=\"name\">CoreIndex</td></tr>\n            <tr><td>0</td><td port=\"0\">u32</td></tr>\n        </table>\n    >]\n\n    GroupIndex [label = <\n        <table>\n            <tr><td border=\"0\" colspan=\"2\" port=\"name\">GroupIndex</td></tr>\n            <tr><td>0</td><td port=\"0\">u32</td></tr>\n        </table>\n    >]\n\n    ParathreadClaim [label = <\n        <table>\n            <tr><td border=\"0\" colspan=\"2\" port=\"name\">ParathreadClaim</td></tr>\n            <tr><td>0</td><td port=\"0\">Id</td></tr>\n            <tr><td>1</td><td port=\"1\">CollatorId</td></tr>\n        </table>\n    >]\n\n    ParathreadClaim:0 -> Id:w\n    ParathreadClaim:1 -> CollatorId:w\n\n    MessageQueueChainLink [label = \"(prev_head, B, H(M))\\nSee doc of AbridgedHrmpChannel::mqc_head\"]\n    MQCHash [label = \"Hash\", shape=\"doublecircle\", fill=\"gray90\"]\n\n    MQCHash -> MessageQueueChainLink\n\n    ParathreadEntry [label = <\n        <table>\n            <tr><td border=\"0\" colspan=\"2\" port=\"name\">ParathreadEntry</td></tr>\n            <tr><td>claim</td><td port=\"claim\">ParathreadClaim</td></tr>\n            <tr><td>retries</td><td port=\"retries\">u32</td></tr>\n        </table>\n    >]\n\n    ParathreadEntry:claim -> ParathreadClaim:name\n\n    CoreOccupied [label = <\n        <table>\n            <tr><td border=\"0\" colspan=\"2\" port=\"name\"><i>enum</i> CoreOccupied</td></tr>\n            <tr><td></td><td port=\"parathread\">Parathread(ParathreadEntry)</td></tr>\n            <tr><td></td><td port=\"parachain\">Parachain</td></tr>\n        </table>\n    >]\n\n    CoreOccupied:parathread -> ParathreadEntry:name\n\n    AvailableData [label = <\n        <table>\n            <tr><td border=\"0\" colspan=\"2\" port=\"name\">AvailableData</td></tr>\n            <tr><td>pov</td><td port=\"pov\">Arc&lt;PoV&gt;</td></tr>\n            <tr><td>validation_data</td><td port=\"validation_data\">PersistedValidationData</td></tr>\n        </table>\n    >]\n\n    AvailableData:pov -> PoV:name\n    AvailableData:validation_data -> PersistedValidationData:name\n\n    GroupRotationInfo [label = <\n        <table>\n            <tr><td border=\"0\" colspan=\"2\" port=\"name\">GroupRotationInfo&lt;N = BlockNumber&gt;</td></tr>\n            <tr><td>session_start_block</td><td port=\"session_start_block\">N</td></tr>\n            <tr><td>group_rotation_frequency</td><td port=\"group_rotation_frequency\">N</td></tr>\n            <tr><td>now</td><td port=\"now\">N</td></tr>\n        </table>\n    >]\n\n    OccupiedCore [label = <\n        <table>\n            <tr><td border=\"0\" colspan=\"2\" port=\"name\">OccupiedCore&lt;H = Hash, N = BlockNumber&gt;</td></tr>\n            <tr><td>next_up_on_available</td><td port=\"next_up_on_available\">Option&lt;ScheduledCore&gt;</td></tr>\n            <tr><td>occupied_since</td><td port=\"occupied_since\">N</td></tr>\n            <tr><td>time_out_at</td><td port=\"time_out_at\">N</td></tr>\n            <tr><td>next_up_on_time_out</td><td port=\"next_up_on_time_out\">Option&lt;ScheduledCore&gt;</td></tr>\n            <tr><td>availability</td><td port=\"availability\">BitVec</td></tr>\n            <tr><td>group_responsible</td><td port=\"group_responsible\">GroupIndex</td></tr>\n\n```\n\n----------------------------------------\n\nTITLE: Referencing ConstructRuntimeApi Trait in Rust for Substrate\nDESCRIPTION: This snippet refers to the `ConstructRuntimeApi` trait provided by the crate. This trait is likely used for constructing or initializing runtime APIs in Substrate.\nSOURCE: https://github.com/paritytech/polkadot-sdk/blob/master/substrate/primitives/api/README.md#2025-04-21_snippet_6\n\nLANGUAGE: Rust\nCODE:\n```\nConstructRuntimeApi\n```\n\n----------------------------------------\n\nTITLE: Defining IndirectAssignmentCert Struct in Rust\nDESCRIPTION: This struct represents an indirect assignment certificate, referencing the candidate by block hash.\nSOURCE: https://github.com/paritytech/polkadot-sdk/blob/master/polkadot/roadmap/implementers-guide/src/types/approval.md#2025-04-21_snippet_3\n\nLANGUAGE: rust\nCODE:\n```\nstruct IndirectAssignmentCert {\n    block_hash: Hash,\n    validator: ValidatorIndex,\n    cert: AssignmentCert,\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Runtime API Messages in Rust\nDESCRIPTION: Defines message types for the Runtime API subsystem that provides interface to chain's runtime state. Includes various request types for accessing validator sets, core states, and session information.\nSOURCE: https://github.com/paritytech/polkadot-sdk/blob/master/polkadot/roadmap/implementers-guide/src/types/overseer-protocol.md#2025-04-21_snippet_21\n\nLANGUAGE: rust\nCODE:\n```\nenum RuntimeApiRequest {\n    /// Get the version of the runtime API at the given parent hash, if any.\n    Version(ResponseChannel<u32>),\n    /// Get the current validator set.\n    Validators(ResponseChannel<Vec<ValidatorId>>),\n    /// Get the validator groups and rotation info.\n    ValidatorGroups(ResponseChannel<(Vec<Vec<ValidatorIndex>>, GroupRotationInfo)>),\n    /// Get information about all availability cores.\n    AvailabilityCores(ResponseChannel<Vec<CoreState>>),\n    /// with the given occupied core assumption.\n    PersistedValidationData(\n        ParaId,\n        OccupiedCoreAssumption,\n        ResponseChannel<Option<PersistedValidationData>>,\n    ),\n    /// Sends back `true` if the commitments pass all acceptance criteria checks.\n    CheckValidationOutputs(\n        ParaId,\n        CandidateCommitments,\n        RuntimeApiSender<bool>,\n    ),\n    /// Get the session index for children of the block. This can be used to construct a signing\n    /// context.\n    SessionIndexForChild(ResponseChannel<SessionIndex>),\n    /// Get the validation code for a specific para, using the given occupied core assumption.\n    ValidationCode(ParaId, OccupiedCoreAssumption, ResponseChannel<Option<ValidationCode>>),\n    /// Get validation code by its hash, either past, current or future code can be returned,\n    /// as long as state is still available.\n    ValidationCodeByHash(ValidationCodeHash, RuntimeApiSender<Option<ValidationCode>>),\n    /// Get a committed candidate receipt for all candidates pending availability.\n    CandidatePendingAvailability(ParaId, ResponseChannel<Option<CommittedCandidateReceipt>>),\n    /// Get all events concerning candidates in the last block.\n    CandidateEvents(ResponseChannel<Vec<CandidateEvent>>),\n    /// Get the session info for the given session, if stored.\n    SessionInfo(SessionIndex, ResponseChannel<Option<SessionInfo>>),\n    /// Get all the pending inbound messages in the downward message queue for a para.\n    DmqContents(ParaId, ResponseChannel<Vec<InboundDownwardMessage<BlockNumber>>>),\n    /// Get the contents of all channels addressed to the given recipient. Channels that have no\n    /// messages in them are also included.\n    InboundHrmpChannelsContents(ParaId, ResponseChannel<BTreeMap<ParaId, Vec<InboundHrmpMessage<BlockNumber>>>>),\n    /// Get information about the BABE epoch this block was produced in.\n    BabeEpoch(ResponseChannel<BabeEpoch>),\n}\n\nenum RuntimeApiMessage {\n    /// Make a request of the runtime API against the post-state of the given relay-parent.\n    Request(Hash, RuntimeApiRequest),\n    /// Get the version of the runtime API at the given parent hash, if any.\n    Version(Hash, ResponseChannel<Option<u32>>)\n}\n```\n\n----------------------------------------\n\nTITLE: Rust Documentation Example - Good Documentation Style\nDESCRIPTION: Demonstrates well-structured documentation with clear sections for panics and complexity considerations.\nSOURCE: https://github.com/paritytech/polkadot-sdk/blob/master/docs/contributor/DOCUMENTATION_GUIDELINES.md#2025-04-21_snippet_2\n\nLANGUAGE: rust\nCODE:\n```\n/// Multiplies an input of type [`u32`] by two.\n///\n/// # Panics\n///\n/// Panics if the input overflows.\n///\n/// # Complexity\n///\n/// Is implemented using some algorithm that yields complexity of O(1).\n// More efficiency can be achieved if we improve this via such and such.\nfn multiply_by_2(x: u32) -> u32 { .. }\n```\n\n----------------------------------------\n\nTITLE: Exposing Prometheus Metrics for Bridge Relayer\nDESCRIPTION: This Docker command modification exposes the Prometheus metrics endpoint on localhost port 9616. It also configures the substrate-relay binary to accept Prometheus endpoint connections from any source.\nSOURCE: https://github.com/paritytech/polkadot-sdk/blob/master/bridges/docs/running-relayer.md#2025-04-21_snippet_2\n\nLANGUAGE: sh\nCODE:\n```\ndocker run \\\n    ..\n    -p 127.0.0.1:9616:9616 \\ # tell Docker to bind container port 9616 to host port 9616\n                             # and listen for connections on the host' localhost interface\n    ..\n    $DOCKER_IMAGE \\\n    relay-headers-and-messages bridge-hub-rococo-bridge-hub-westend \\\n    --prometheus-host 0.0.0.0 \\ # tell `substrate-relay` binary to accept Prometheus endpoint\n                                # connections from everywhere\n    ..\n```\n\n----------------------------------------\n\nTITLE: Defining Scheduled Core Structure in Rust for Polkadot SDK\nDESCRIPTION: This struct represents a scheduled core, containing the ParaId of the scheduled parachain and the optional CollatorId required to author the block.\nSOURCE: https://github.com/paritytech/polkadot-sdk/blob/master/polkadot/roadmap/implementers-guide/src/runtime-api/availability-cores.md#2025-04-21_snippet_2\n\nLANGUAGE: rust\nCODE:\n```\nstruct ScheduledCore {\n    para_id: ParaId,\n    collator: Option<CollatorId>,\n}\n```\n\n----------------------------------------\n\nTITLE: Running Polkadot SDK Tests\nDESCRIPTION: Command to execute the Polkadot SDK tests using the native zombie provider. Tests are run in release mode with specific features enabled.\nSOURCE: https://github.com/paritytech/polkadot-sdk/blob/master/cumulus/zombienet/zombienet-sdk/README.md#2025-04-21_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nZOMBIE_PROVIDER=native cargo test --release -p cumulus-zombienet-sdk-tests --features zombie-ci\n```\n\n----------------------------------------\n\nTITLE: Installing Build Dependencies for Fedora\nDESCRIPTION: Commands to install the necessary build dependencies for Substrate development on Fedora, including clang, curl, git, and OpenSSL development libraries.\nSOURCE: https://github.com/paritytech/polkadot-sdk/blob/master/templates/solochain/docs/rust-setup.md#2025-04-21_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nsudo dnf update\nsudo dnf install clang curl git openssl-devel\n```\n\n----------------------------------------\n\nTITLE: Defining Dispatchable Functions for Tipping Pallet in Markdown\nDESCRIPTION: This code snippet lists the dispatchable functions available in the Tipping Pallet. These functions allow users to report tip-worthy items, declare tip amounts, close tips, and manage the tipping process.\nSOURCE: https://github.com/paritytech/polkadot-sdk/blob/master/substrate/frame/tips/README.md#2025-04-21_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n### Dispatchable Functions\n\n- `report_awesome` - Report something worthy of a tip and register for a finders fee.\n- `retract_tip` - Retract a previous (finders fee registered) report.\n- `tip_new` - Report an item worthy of a tip and declare a specific amount to tip.\n- `tip` - Declare or redeclare an amount to tip for a particular reason.\n- `close_tip` - Close and pay out a tip.\n- `slash_tip` - Remove and slash an already-open tip.\n```\n\n----------------------------------------\n\nTITLE: Implementing ExplicitDisputeStatement Structure in Rust\nDESCRIPTION: Defines a structure for explicit dispute statements containing validity flag, candidate hash, and session index.\nSOURCE: https://github.com/paritytech/polkadot-sdk/blob/master/polkadot/roadmap/implementers-guide/src/types/disputes.md#2025-04-21_snippet_3\n\nLANGUAGE: rust\nCODE:\n```\nstruct ExplicitDisputeStatement {\n    valid: bool,\n    candidate_hash: CandidateHash,\n    session: SessionIndex,\n}\n```\n\n----------------------------------------\n\nTITLE: Building Substrate with Specific Nightly Toolchain\nDESCRIPTION: Command to build a Substrate project using a specific Rust nightly version for WebAssembly compilation. This environment variable ensures the runtime is built with the specified nightly while the rest uses the default toolchain.\nSOURCE: https://github.com/paritytech/polkadot-sdk/blob/master/templates/solochain/docs/rust-setup.md#2025-04-21_snippet_10\n\nLANGUAGE: bash\nCODE:\n```\nWASM_BUILD_TOOLCHAIN=nightly-<yyyy-MM-dd> cargo build --release\n```\n\n----------------------------------------\n\nTITLE: Initialization and Finalization in Polkadot Scheduler Module\nDESCRIPTION: Specifies that no initialization or finalization routines run for this module.\nSOURCE: https://github.com/paritytech/polkadot-sdk/blob/master/polkadot/roadmap/implementers-guide/src/runtime/scheduler.md#2025-04-21_snippet_5\n\nLANGUAGE: markdown\nCODE:\n```\n## Initialization\n\nNo initialization routine runs for this module.\n\n## Finalization\n\nNo finalization routine runs for this module.\n```\n\n----------------------------------------\n\nTITLE: Updating Substrate Node Template Files (Bash)\nDESCRIPTION: This command updates the existing Substrate Node Template files with the contents of the newly generated release package. It uses rsync to copy files, preserving the directory structure.\nSOURCE: https://github.com/paritytech/polkadot-sdk/blob/master/substrate/docs/node-template-release.md#2025-04-21_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n# This is where the tar.gz file uncompressed\ncd substrate-node-template\n# rsync with force copying. Note the slash at the destination directory is important\nrsync -avh * <destination node-template directory>/\n# For dry-running add `-n` argument\n# rsync -avhn * <destination node-template directory>/\n```\n\n----------------------------------------\n\nTITLE: Implementing Sync Tests for Polkadot Nodes (Rust)\nDESCRIPTION: Test code for validating synchronization between Polkadot nodes. It sets up a test network with authority nodes and light clients, and tests block production, transaction signing, and network synchronization.\nSOURCE: https://github.com/paritytech/polkadot-sdk/blob/master/substrate/docs/Upgrading-2.0-to-3.0.md#2025-04-21_snippet_12\n\nLANGUAGE: rust\nCODE:\n```\n#[cfg(test)]\nmod tests {\n\tuse std::{sync::Arc, borrow::Cow, any::Any, convert::TryInto};\n\tuse sc_consensus_babe::{CompatibleDigestItem, BabeIntermediate, INTERMEDIATE_KEY};\n\tuse sc_consensus_epochs::descendent_query;\n\tuse sp_consensus::{\n\t\tEnvironment, Proposer, BlockImportParams, BlockOrigin, ForkChoiceStrategy, BlockImport,\n\t\tRecordProof,\n\t};\n\tuse node_primitives::{Block, DigestItem, Signature};\n\tuse node_runtime::{BalancesCall, Call, UncheckedExtrinsic, Address};\n\tuse node_runtime::constants::{currency::CENTS, time::SLOT_DURATION};\n\tuse codec::Encode;\n\tuse sp_core::{\n\t\tcrypto::Pair as CryptoPair,\n\t\tH256,\n\t\tPublic\n\t};\n\tuse sp_keystore::{SyncCryptoStorePtr, SyncCryptoStore};\n\tuse sp_runtime::{\n\t\tgeneric::{BlockId, Era, Digest, SignedPayload},\n\t\ttraits::{Block as BlockT, Header as HeaderT},\n\t\ttraits::Verify,\n\t};\n\tuse sp_timestamp;\n\tuse sp_keyring::Sr25519Keyring;\n\tuse sc_service_test::TestNetNode;\n\tuse crate::service::{new_full_base, new_light_base, NewFullBase};\n\tuse sp_runtime::{key_types::BABE, traits::IdentifyAccount, RuntimeAppPublic};\n\tuse sp_transaction_pool::{MaintainedTransactionPool, ChainEvent};\n\tuse sc_client_api::BlockBackend;\n\tuse sc_keystore::LocalKeystore;\n\n\ttype AccountPublic = <Signature as Verify>::Signer;\n\n\t#[test]\n\t#[ignore]\n\tfn test_sync() {\n\t\tlet keystore_path = tempfile::tempdir().expect(\"Creates keystore path\");\n\t\tlet keystore: SyncCryptoStorePtr = Arc::new(LocalKeystore::open(keystore_path.path(), None)\n\t\t\t.expect(\"Creates keystore\"));\n\t\tlet alice: sp_consensus_babe::AuthorityId = SyncCryptoStore::sr25519_generate_new(&*keystore, BABE, Some(\"//Alice\"))\n\t\t\t.expect(\"Creates authority pair\").into();\n\n\t\tlet chain_spec = crate::chain_spec::tests::integration_test_config_with_single_authority();\n\n\t\t// For the block factory\n\t\tlet mut slot = 1u64;\n\n\t\t// For the extrinsics factory\n\t\tlet bob = Arc::new(Sr25519Keyring::Bob.pair());\n\t\tlet charlie = Arc::new(Sr25519Keyring::Charlie.pair());\n\t\tlet dave = Arc::new(Sr25519Keyring::Dave.pair());\n\t\tlet eve = Arc::new(Sr25519Keyring::Eve.pair());\n\t\tlet ferdie = Arc::new(Sr25519Keyring::Ferdie.pair());\n\n\t\tsc_service_test::sync(\n\t\t\tchain_spec,\n\t\t\t|\n\t\t\t\tconfig| {\n\t\t\t\t\tlet mut setup_handles = None;\n\t\t\t\t\tlet NewFullBase {\n\t\t\t\t\t\ttask_manager, inherent_data_providers, client, network, transaction_pool, ..                  \n\t\t\t\t\t} = new_full_base(config,\n\t\t\t\t\t\t|block_import, babe_link| {\n\t\t\t\t\t\t\tsetup_handles = Some((block_import, babe_link));\n\t\t\t\t\t\t}\n\t\t\t\t\t)?;\n\t\t\t\t\tOk((node, (inherent_data_providers, setup_handles.unwrap())))\n\t\t\t\t},\n\t\t\t|config| {\n\t\t\t\tlet (keep_alive, _, _, client, network, transaction_pool) = new_light_base(config)?;\n\t\t\t\tOk(sc_service_test::TestNetComponents::new(keep_alive, client, network, transaction_pool))\n\t\t\t},\n\t\t\t|service, &mut (ref inherent_data_providers, (ref mut block_import, ref babe_link))| {\n\t\t\t\tlet mut inherent_data = inherent_data_providers\n\t\t\t\t\t.create_inherent_data()\n\t\t\t\t\t.expect(\"Creates inherent data.\");\n\n\t\t\t\tlet parent_id = BlockId::number(service.client().chain_info().best_number);\n\t\t\t\tlet parent_header = service.client().header(&parent_id).unwrap().unwrap();\n\t\t\t\tlet parent_hash = parent_header.hash();\n\t\t\t\tlet parent_number = *parent_header.number();\n\n\t\t\t\tservice.transaction_pool().maintain(ChainEvent::NewBlock {\n\t\t\t\t\tblock: parent_header.clone(),\n\t\t\t\t\tstorage_changes: Default::default(),\n\t\t\t\t\tis_new_best: true,\n\t\t\t\t});\n\n\t\t\t\tlet mut proposer_factory = sc_basic_authorship::ProposerFactory::new(\n\t\t\t\t\tservice.spawn_handle(),\n\t\t\t\t\tservice.client(),\n\t\t\t\t\tservice.transaction_pool(),\n\t\t\t\t\tNone,\n\t\t\t\t);\n\n\t\t\t\tlet epoch_descriptor = babe_link.epoch_changes().lock().epoch_descriptor_for_child_of(\n\t\t\t\t\tdescendent_query(&*service.client()),\n\t\t\t\t\t&parent_hash,\n\t\t\t\t\tparent_number,\n\t\t\t\t\tslot.into(),\n\t\t\t\t).unwrap().unwrap();\n\n\t\t\t\tlet mut digest = Digest::<H256>::default();\n\n\t\t\t\t// even though there's only one authority some slots might be empty,\n\t\t\t\t// so we must keep trying the next slots until we can claim one.\n\t\t\t\tlet babe_pre_digest = loop {\n\t\t\t\t\tinherent_data.replace_data(sp_timestamp::INHERENT_IDENTIFIER, &(slot * SLOT_DURATION));\n\t\t\t\t\tif let Some(babe_pre_digest) = sc_consensus_babe::test_helpers::claim_slot(\n\t\t\t\t\t\tslot.into(),\n\t\t\t\t\t\t&parent_header,\n\t\t\t\t\t\t&*service.client(),\n\t\t\t\t\t\tkeystore.clone(),\n\t\t\t\t\t\t&babe_link,\n\t\t\t\t\t) {\n\t\t\t\t\t\tbreak babe_pre_digest;\n\t\t\t\t\t}\n\n\t\t\t\t\tslot += 1;\n\t\t\t\t};\n\n\t\t\t\tdigest.push(<DigestItem as CompatibleDigestItem>::babe_pre_digest(babe_pre_digest));\n\n\t\t\t\tlet new_header = sc_consensus_babe::test_helpers::make_header(\n\t\t\t\t\tparent_header,\n\t\t\t\t\tparent_number + 1,\n\t\t\t\t\tdigest,\n\t\t\t\t);\n\n\t\t\t\tlet (new_header, extrinsics) = proposer_factory.init(&new_header)\n\t\t\t\t\t.unwrap()\n\t\t\t\t\t.propose(\n\t\t\t\t\t\tinherent_data,\n\t\t\t\t\t\tRecordProof::No,\n\t\t\t\t\t\tnew_header.digest().clone(),\n\t\t\t\t\t).unwrap();\n\n\t\t\t\tlet pre_hash = new_header.hash();\n\t\t\t\t// sign the pre-sealed hash of the block and then\n\t\t\t\t// add it to a digest item.\n\t\t\t\tlet to_sign = pre_hash.encode();\n\t\t\t\tlet signature = SyncCryptoStore::sign_with(\n\t\t\t\t\t&*keystore,\n\t\t\t\t\tsp_consensus_babe::AuthorityId::ID,\n\t\t\t\t\t&alice.to_public_crypto_pair(),\n\t\t\t\t\t&to_sign,\n\t\t\t\t).unwrap()\n\t\t\t\t .try_into()\n\t\t\t\t .unwrap();\n\t\t\t\tlet item = <DigestItem as CompatibleDigestItem>::babe_seal(\n\t\t\t\t\tsignature,\n\t\t\t\t);\n\t\t\t\tslot += 1;\n\n\t\t\t\tlet mut params = BlockImportParams::new(BlockOrigin::File, new_header);\n\t\t\t\tparams.post_digests.push(item);\n\t\t\t\tparams.body = Some(extrinsics);\n\t\t\t\tparams.insert_intermediate(INTERMEDIATE_KEY, BabeIntermediate::<Block> {\n\t\t\t\t\tephemeral: epoch_descriptor,\n\t\t\t\t});\n\t\t\t\tparams.fork_choice = Some(ForkChoiceStrategy::LongestChain);\n\n\t\t\t\tblock_import.import_block(params, Default::default())\n\t\t\t\t\t.expect(\"error importing test block\");\n\t\t\t},\n\t\t\t|\n\t\t\t\tservice, _| {\n\t\t\t\tlet amount = 5 * CENTS;\n\n\t\t\t\tlet to_alice = Address::Id(AccountPublic::from(bob.public()).into_account());\n\t\t\t\tlet to_bob = Address::Id(AccountPublic::from(charlie.public()).into_account());\n\t\t\t\tlet to_charlie = Address::Id(AccountPublic::from(dave.public()).into_account());\n\t\t\t\tlet to_dave = Address::Id(AccountPublic::from(eve.public()).into_account());\n\t\t\t\tlet to_eve = Address::Id(AccountPublic::from(ferdie.public()).into_account());\n\n\t\t\t\tlet genesis_hash = service.client().block_hash(0).unwrap().unwrap();\n\n\t\t\t\tlet best_block_id = BlockId::number(service.client().chain_info().best_number);\n\t\t\t\tlet (spec_version, transaction_version) = {\n\t\t\t\t\tlet version = service.client().runtime_version_at(&best_block_id).unwrap();\n\t\t\t\t\t(version.spec_version, version.transaction_version)\n\t\t\t\t};\n\t\t\t\tlet best_hash = service.client().chain_info().best_hash;\n\n\t\t\t\tmacro_rules! make_transfer_tx {\n\t\t\t\t\t($to: expr, $from: expr, $amount: expr, $nonce: expr) => {\n\t\t\t\t\t\tlet function = Call::Balances(BalancesCall::transfer(\n\t\t\t\t\t\t\t$to.clone(),\n\t\t\t\t\t\t\t$amount,\n\t\t\t\t\t\t));\n\n\t\t\t\t\t\tlet period = 5;\n\t\t\t\t\t\tlet current_block = service.client().chain_info().best_number;\n\t\t\t\t\t\tlet era = Era::mortal(period, current_block.into());\n\t\t\t\t\t\tlet raw_payload = SignedPayload::new(\n\t\t\t\t\t\t\tfunction,\n\t\t\t\t\t\t\tnode_runtime::SignedExtra::new(\n\t\t\t\t\t\t\t\tera,\n\t\t\t\t\t\t\t\tnonce,\n\t\t\t\t\t\t\t\t0,\n\t\t\t\t\t\t\t\t0,\n\t\t\t\t\t\t\t\t0,\n\t\t\t\t\t\t\t\t0,\n\t\t\t\t\t\t\t\tspec_version,\n\t\t\t\t\t\t\t\ttransaction_version,\n\t\t\t\t\t\t\t\tgenesis_hash,\n\t\t\t\t\t\t\t\tbest_hash,\n\t\t\t\t\t\t\t)\n\t\t\t\t\t\t).unwrap();\n\t\t\t\t\t\tlet signature = raw_payload.using_encoded(|e| $from.sign(e));\n\t\t\t\t\t\tUncheckedExtrinsic::new_signed(\n\t\t\t\t\t\t\tfunction,\n\t\t\t\t\t\t\tAccountPublic::from($from.public()).into_account(),\n\t\t\t\t\t\t\tsignature.into(),\n\t\t\t\t\t\t\tnode_runtime::SignedExtra::new(\n\t\t\t\t\t\t\t\tera,\n\t\t\t\t\t\t\t\tnonce,\n\t\t\t\t\t\t\t\t0,\n\t\t\t\t\t\t\t\t0,\n\t\t\t\t\t\t\t\t0,\n\t\t\t\t\t\t\t\t0,\n\t\t\t\t\t\t\t\tspec_version,\n\t\t\t\t\t\t\t\ttransaction_version,\n\t\t\t\t\t\t\t\tgenesis_hash,\n\t\t\t\t\t\t\t\tbest_hash,\n\t\t\t\t\t\t\t),\n\t\t\t\t\t\t)\n\t\t\t\t\t}\n\t\t\t\t};\n\n\t\t\t\tservice.transaction_pool().submit_one(\n\t\t\t\t\tbest_block_id,\n\t\t\t\t\tmake_transfer_tx!(to_alice, bob.as_ref(), amount, 0),\n\t\t\t\t).unwrap();\n\t\t\t\tservice.transaction_pool().submit_one(\n\t\t\t\t\tbest_block_id,\n\t\t\t\t\tmake_transfer_tx!(to_bob, charlie.as_ref(), amount, 0),\n\t\t\t\t).unwrap();\n\t\t\t\tservice.transaction_pool().submit_one(\n\t\t\t\t\tbest_block_id,\n\t\t\t\t\tmake_transfer_tx!(to_charlie, dave.as_ref(), amount, 0),\n\t\t\t\t).unwrap();\n\t\t\t\tservice.transaction_pool().submit_one(\n\t\t\t\t\tbest_block_id,\n\t\t\t\t\tmake_transfer_tx!(to_dave, eve.as_ref(), amount, 0),\n\t\t\t\t).unwrap();\n\t\t\t\tservice.transaction_pool().submit_one(\n\t\t\t\t\tbest_block_id,\n\t\t\t\t\tmake_transfer_tx!(to_eve, ferdie.as_ref(), amount, 0),\n\t\t\t\t).unwrap();\n\t\t\t},\n\t\t);\n\t}\n}\n```\n\n----------------------------------------\n\nTITLE: Benchmarking Substrate Development Chain\nDESCRIPTION: Command to benchmark block execution on a Substrate development chain, measuring the first block with archive pruning enabled.\nSOURCE: https://github.com/paritytech/polkadot-sdk/blob/master/substrate/utils/frame/benchmarking-cli/src/block/README.md#2025-04-21_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\ncargo run --profile=production -- benchmark block --from 1 --to 1 --dev -d /tmp/dev --pruning archive\n```\n\n----------------------------------------\n\nTITLE: XCM Flow from Asset Hub to KILT (Transfer with Transaction)\nDESCRIPTION: An extended version of the XCM message (x1) that includes a transaction to be executed on KILT. It preserves all the instructions from the basic transfer and adds a Transact instruction that executes with the origin preserved from Asset Hub.\nSOURCE: https://github.com/paritytech/polkadot-sdk/blob/master/bridges/snowbridge/docs/v2.md#2025-04-21_snippet_8\n\nLANGUAGE: text\nCODE:\n```\n*WithdrawAsset (KLT, 100)\n*ReserveAssetDeposited (WETH, 1)\n*PayFees (WETH, 1)\n*SetAssetClaimer Ethereum/Alice\n*AliasOrigin Ethereum/Alice   // origin preserved from AH\nSetAssetClaimer Bob\nDepositAsset (KLT, 100) beneficiary=Bob\nTransact Bob.hello()          // executes with the origin from AH\n```\n\n----------------------------------------\n\nTITLE: Configuring Test, Example or Fuzzer Crates in Cargo.toml\nDESCRIPTION: Example configuration for test, example, or fuzzer crates that should not be published to crates.io. The 'publish = false' setting in the package section prevents these crates from being released.\nSOURCE: https://github.com/paritytech/polkadot-sdk/blob/master/docs/contributor/CONTRIBUTING.md#2025-04-21_snippet_1\n\nLANGUAGE: toml\nCODE:\n```\n[package]\n# Other stuff...\n\npublish = false\n\n# Other stuff...\n```\n\n----------------------------------------\n\nTITLE: Creating Injected Docker Image for Polkadot Parachain\nDESCRIPTION: Builds a Docker image by injecting a pre-compiled Linux binary into a base image. Requires that the polkadot-parachain binary has already been built either locally or using a container.\nSOURCE: https://github.com/paritytech/polkadot-sdk/blob/master/docs/contributor/container.md#2025-04-21_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nARTIFACTS_FOLDER=./target/release /docker/scripts/build-injected.sh\n```\n\n----------------------------------------\n\nTITLE: Running Availability Test with Polkadot Subsystem Bench\nDESCRIPTION: Example output from running an availability read test for 200 cores with max PoV size on a 1000 node validator network, showing network metrics and timing information.\nSOURCE: https://github.com/paritytech/polkadot-sdk/blob/master/polkadot/node/subsystem-bench/README.md#2025-04-21_snippet_4\n\nLANGUAGE: plaintext\nCODE:\n```\ntarget/testnet/subsystem-bench polkadot/node/subsystem-bench/examples/availability_write.yaml\n[2024-02-19T14:10:32.981Z INFO  subsystem_bench] Sequence contains 1 step(s)\n[2024-02-19T14:10:32.981Z INFO  subsystem-bench::cli] Step 1/1\n...\n```\n\n----------------------------------------\n\nTITLE: Activating Nix Development Shell\nDESCRIPTION: Command to activate the Nix development shell in the repository root where the flake.nix file is located.\nSOURCE: https://github.com/paritytech/polkadot-sdk/blob/master/bridges/snowbridge/README.md#2025-04-21_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nnix develop\n```\n\n----------------------------------------\n\nTITLE: Setting Up Path for Relay Chain Binaries\nDESCRIPTION: Command to add Polkadot binaries to the system PATH\nSOURCE: https://github.com/paritytech/polkadot-sdk/blob/master/templates/parachain/README.md#2025-04-21_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\nexport PATH=\"$PATH:<path/to/binaries>\"\n```\n\n----------------------------------------\n\nTITLE: Running Storage Benchmark on Polkadot\nDESCRIPTION: Command to run storage benchmarking on Polkadot using ParityDB with specific weight output path configuration.\nSOURCE: https://github.com/paritytech/polkadot-sdk/blob/master/substrate/utils/frame/benchmarking-cli/src/storage/README.md#2025-04-21_snippet_1\n\nLANGUAGE: sh\nCODE:\n```\ncargo run --profile=production -- benchmark storage --dev --state-version=0 --db=paritydb --weight-path runtime/polkadot/constants/src/weights\n```\n\n----------------------------------------\n\nTITLE: Dispute Availability Data Flow in Mermaid\nDESCRIPTION: This diagram illustrates how dispute availability data is tracked and shared among validators, including handling incoming requests and responding with available data.\nSOURCE: https://github.com/paritytech/polkadot-sdk/blob/master/polkadot/roadmap/implementers-guide/src/disputes-flow.md#2025-04-21_snippet_2\n\nLANGUAGE: mermaid\nCODE:\n```\nstateDiagram-v2\n    [*] --> Open: First Vote(s) received\n    Open --> DisputeDataAvail: somehow the data became available\n    Open --> RespondUnavailable: Data not available\n    IncomingRequestDisputeAvailabilityData --> RespondUnavailable\n    IncomingRequestDisputeAvailabilityData --> DisputeDataAvail\n    DisputeDataAvail --> RespondWithDisputeAvailabilityData: Send\n    VoteGossipReceived --> Track: implies source peer has<br />dispute availability data\n```\n\n----------------------------------------\n\nTITLE: Installing Specific Nightly Rust Version\nDESCRIPTION: Command to install a specific nightly version of Rust that is known to be compatible with a particular Substrate project. The date parameter should be replaced with the desired nightly version date.\nSOURCE: https://github.com/paritytech/polkadot-sdk/blob/master/templates/solochain/docs/rust-setup.md#2025-04-21_snippet_8\n\nLANGUAGE: bash\nCODE:\n```\n# Specify the specific nightly toolchain in the date below:\nrustup install nightly-<yyyy-MM-dd>\n```\n\n----------------------------------------\n\nTITLE: Generating Chain Specification\nDESCRIPTION: Command to generate a chain specification file using the chain-spec-builder tool with specific relay chain and para-id parameters.\nSOURCE: https://github.com/paritytech/polkadot-sdk/blob/master/templates/parachain/README.docify.md#2025-04-21_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nchain-spec-builder create --relay-chain \"rococo-local\" --para-id {{PARACHAIN_ID}} --runtime \\\n    target/release/wbuild/parachain-template-runtime/parachain_template_runtime.wasm named-preset development\n```\n\n----------------------------------------\n\nTITLE: Retrieving Session Index for Child Block in Rust\nDESCRIPTION: This function returns the session index expected at a child of the given block. It is used to predict the session index of the child of any relay block based on the current block's state. This is possible because session changes are buffered by one block in the Initializer module.\nSOURCE: https://github.com/paritytech/polkadot-sdk/blob/master/polkadot/roadmap/implementers-guide/src/runtime-api/session-index.md#2025-04-21_snippet_0\n\nLANGUAGE: rust\nCODE:\n```\n/// Returns the session index expected at a child of the block.\nfn session_index_for_child(at: Block) -> SessionIndex;\n```\n\n----------------------------------------\n\nTITLE: Implementing Light Client Service in Polkadot (Rust)\nDESCRIPTION: A simplified function that builds a new light client service, extracting only the task manager from the base light client setup. This provides a convenient way to create a light client without dealing with all individual components.\nSOURCE: https://github.com/paritytech/polkadot-sdk/blob/master/substrate/docs/Upgrading-2.0-to-3.0.md#2025-04-21_snippet_11\n\nLANGUAGE: rust\nCODE:\n```\npub fn new_light(config: Configuration) -> Result<TaskManager, ServiceError> {\n\tnew_light_base(config).map(|(task_manager, _, _, _, _, _)| {\n\t\ttask_manager\n\t})\n}\n```\n\n----------------------------------------\n\nTITLE: BlockBuilder Runtime API Reference\nDESCRIPTION: Reference to the BlockBuilder struct from the sc-block-builder crate that provides functionality for block construction in Substrate nodes. The BlockBuilder utility abstracts the runtime API for block initialization, pushing extrinsics, and block finalization.\nSOURCE: https://github.com/paritytech/polkadot-sdk/blob/master/substrate/client/block-builder/README.md#2025-04-21_snippet_0\n\nLANGUAGE: rust\nCODE:\n```\nstruct BlockBuilder\n```\n\n----------------------------------------\n\nTITLE: Referencing ApiExt Trait in Rust for Substrate Runtime\nDESCRIPTION: This snippet refers to the `ApiExt` trait provided by the crate. This trait likely extends the functionality of the runtime APIs in Substrate.\nSOURCE: https://github.com/paritytech/polkadot-sdk/blob/master/substrate/primitives/api/README.md#2025-04-21_snippet_4\n\nLANGUAGE: Rust\nCODE:\n```\nApiExt\n```\n\n----------------------------------------\n\nTITLE: Building Polkadot Parachain Binary Using Parity CI Container\nDESCRIPTION: Uses Parity's CI container image to build a Linux binary of polkadot-parachain without requiring local Rust installation. It mounts the current directory into the container and runs the cargo build command.\nSOURCE: https://github.com/paritytech/polkadot-sdk/blob/master/docs/contributor/container.md#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nexport $(curl https://raw.githubusercontent.com/paritytech/polkadot-sdk/refs/heads/master/.github/env | tr -d '\"')\ndocker run --rm -it \\\n    -w /polkadot-sdk \\\n    -v $(pwd):/polkadot-sdk \\\n    $IMAGE \\\n    cargo build --release --locked -p polkadot-parachain-bin --bin polkadot-parachain\nsudo chown -R $(id -u):$(id -g) target/\n```\n\n----------------------------------------\n\nTITLE: Running Memory Profiling with Jemalloc\nDESCRIPTION: Command for running subsystem benchmark with memory profiling enabled using jemalloc.\nSOURCE: https://github.com/paritytech/polkadot-sdk/blob/master/polkadot/node/subsystem-bench/README.md#2025-04-21_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\nRUSTFLAGS=-g cargo run -p polkadot-subsystem-bench --release --features memprofile -- polkadot/node/subsystem-bench/examples/approvals_throughput.yaml\n```\n\n----------------------------------------\n\nTITLE: Defining Collation Generation Message Types in Rust\nDESCRIPTION: Defines the message types and configuration for the Collation Generation subsystem, which is used by collators to submit collations to validators. Includes a CollatorFn type definition, CollationGenerationConfig structure, and message enum for initialization and collation submission.\nSOURCE: https://github.com/paritytech/polkadot-sdk/blob/master/polkadot/roadmap/implementers-guide/src/types/overseer-protocol.md#2025-04-21_snippet_14\n\nLANGUAGE: rust\nCODE:\n```\n/// A function provided to the subsystem which it uses to pull new collations.\n///\n/// This mode of querying collations is obsoleted by `CollationGenerationMessages::SubmitCollation`\n///\n/// The response channel, if present, is meant to receive a `Seconded` statement as a\n/// form of authentication, for collation mechanisms which rely on this for anti-spam.\ntype CollatorFn = Fn(Hash, PersistedValidationData) -> Future<Output = (Collation, Option<ResponseChannel<SignedStatement>>)>;\n\n/// Configuration for the collation generator\nstruct CollationGenerationConfig {\n    /// Collator's authentication key, so it can sign things.\n    key: CollatorPair,\n    /// Collation function. See [`CollatorFn`] for more details.\n    collator: CollatorFn,\n    /// The parachain that this collator collates for\n    para_id: ParaId,\n}\n\n/// Parameters for submitting a collation\nstruct SubmitCollationParams {\n    /// The relay-parent the collation is built against.\n    relay_parent: Hash,\n    /// The collation itself (PoV and commitments)\n    collation: Collation,\n    /// The parent block's head-data.\n    parent_head: HeadData,\n    /// The hash of the validation code the collation was created against.\n    validation_code_hash: ValidationCodeHash,\n    /// A response channel for receiving a `Seconded` message about the candidate\n    /// once produced by a validator. This is not guaranteed to provide anything.\n    result_sender: Option<ResponseChannel<SignedStatement>>,\n}\n\nenum CollationGenerationMessage {\n    /// Initialize the collation generation subsystem\n\tInitialize(CollationGenerationConfig),\n    /// Submit a collation to the subsystem. This will package it into a signed\n    /// [`CommittedCandidateReceipt`] and distribute along the network to validators.\n    ///\n    /// If sent before `Initialize`, this will be ignored.\n    SubmitCollation(SubmitCollationParams),\n}\n```\n\n----------------------------------------\n\nTITLE: Visualizing Polkadot Relay Chain Fork Possibility\nDESCRIPTION: This diagram shows how different validator groups can build on different relay chain blocks due to network asynchrony and the forkful nature of the BABE algorithm.\nSOURCE: https://github.com/paritytech/polkadot-sdk/blob/master/polkadot/roadmap/implementers-guide/src/protocol-overview.md#2025-04-21_snippet_2\n\nLANGUAGE: dot\nCODE:\n```\ndigraph {\n\trca [label=\"Relay Block A\" shape=box]\n\trcb [label=\"Relay Block B\" shape=box]\n\trcc [label=\"Relay Block C\" shape=box]\n\n\tvg1 [label=<\n\t\t<b>Validator Group 1</b>\n\t\t<br/>\n\t\t<br/>\n\t\t<font point-size=\"10\">\n\t\t\t(Validator 4)\n\t\t\t<br/>\n\t\t\t(Validator 1) (Validator 2)\n\t\t\t<br/>\n\t\t\t(Validator 5)\n\t\t</font>\n\t>]\n\tvg2 [label=<\n\t\t<b>Validator Group 2</b>\n\t\t<br/>\n\t\t<br/>\n\t\t<font point-size=\"10\">\n\t\t\t(Validator 7)\n\t\t\t<br/>\n\t\t\t(Validator 3) (Validator 6)\n\t\t</font>\n\t>]\n\n\trcb -> rca\n\trcc -> rcb\n\n\tvg1 -> rcc [label=\"Building on C\" style=dashed arrowhead=none]\n\tvg2 -> rcb [label=\"Building on B\" style=dashed arrowhead=none]\n}\n```\n\n----------------------------------------\n\nTITLE: Command Pattern Regex in GitHub Workflow\nDESCRIPTION: Regular expression pattern used in cmd.yml to validate command formats. Accepts only alphanumeric, space, and specific special characters.\nSOURCE: https://github.com/paritytech/polkadot-sdk/blob/master/docs/contributor/commands-readme.md#2025-04-21_snippet_4\n\nLANGUAGE: regex\nCODE:\n```\n^(\\/cmd )([-\\/\\s\\w.=:]+)$\n```\n\n----------------------------------------\n\nTITLE: Running Storage Benchmark on Substrate\nDESCRIPTION: Command to run storage benchmarking on a Substrate node with development chain specification and state version 1.\nSOURCE: https://github.com/paritytech/polkadot-sdk/blob/master/substrate/utils/frame/benchmarking-cli/src/storage/README.md#2025-04-21_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\ncargo run --profile=production -- benchmark storage --dev --state-version=1\n```\n\n----------------------------------------\n\nTITLE: Building Docker Image for Polkadot Parachain Using Builder Pattern\nDESCRIPTION: Creates a Docker image using a multi-stage builder pattern which compiles the binary within the container. This approach doesn't require a local Rust toolchain but takes longer to complete than using an injected binary.\nSOURCE: https://github.com/paritytech/polkadot-sdk/blob/master/docs/contributor/container.md#2025-04-21_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\ndocker build \\\n\t--tag $OWNER/$IMAGE_NAME \\\n --file ./docker/dockerfiles/polkadot-parachain/polkadot-parachain_builder.Dockerfile .\n```\n\n----------------------------------------\n\nTITLE: Exploring Node Parameters\nDESCRIPTION: Command to display help information about the node's parameters and subcommands after building the project.\nSOURCE: https://github.com/paritytech/polkadot-sdk/blob/master/templates/solochain/README.md#2025-04-21_snippet_2\n\nLANGUAGE: sh\nCODE:\n```\n./target/release/solochain-template-node -h\n```\n\n----------------------------------------\n\nTITLE: Bridge Reject Obsolete Headers Macro\nDESCRIPTION: A macro that bundles several similar signed extensions to reject transactions with already known headers, preventing unnecessary processing and fees for submitters.\nSOURCE: https://github.com/paritytech/polkadot-sdk/blob/master/bridges/modules/grandpa/README.md#2025-04-21_snippet_5\n\nLANGUAGE: markdown\nCODE:\n```\ngenerate_bridge_reject_obsolete_headers_and_messages\n```\n\n----------------------------------------\n\nTITLE: Generating Human Readable Chain Spec with Patch\nDESCRIPTION: Command to generate a human-readable chain spec by patching the default genesis config with a JSON file.\nSOURCE: https://github.com/paritytech/polkadot-sdk/blob/master/substrate/bin/utils/chain-spec-builder/README.md#2025-04-21_snippet_8\n\nLANGUAGE: rust\nCODE:\n```\nchain-spec-builder -c \"/dev/stdout\" create -r $runtime_path patch \"tests/input/patch.json\"\n```\n\n----------------------------------------\n\nTITLE: Generating Weights for Multiple Pallets\nDESCRIPTION: Command to generate weights for multiple specific pallets across all possible runtimes\nSOURCE: https://github.com/paritytech/polkadot-sdk/blob/master/docs/contributor/weight-generation.md#2025-04-21_snippet_4\n\nLANGUAGE: sh\nCODE:\n```\n/cmd bench --pallet pallet_balances pallet_xcm_benchmarks::generic pallet_xcm_benchmarks::fungible\n```\n\n----------------------------------------\n\nTITLE: Generating Weights for Specific Runtime and Pallets\nDESCRIPTION: Command to generate weights for specific pallets in a particular runtime\nSOURCE: https://github.com/paritytech/polkadot-sdk/blob/master/docs/contributor/weight-generation.md#2025-04-21_snippet_5\n\nLANGUAGE: sh\nCODE:\n```\n/cmd bench --runtime bridge-hub-polkadot --pallet pallet_xcm_benchmarks::generic pallet_xcm_benchmarks::fungible\n```\n\n----------------------------------------\n\nTITLE: Declaring StorageValue in Substrate Pallet (Rust)\nDESCRIPTION: This snippet declares a StorageValue storage item named 'Something' of type T::AccountId. It uses the ValueQuery storage configuration and includes attributes for setting the prefix and runtime type.\nSOURCE: https://github.com/paritytech/polkadot-sdk/blob/master/substrate/frame/nomination-pools/benchmarking/README.md#2025-04-21_snippet_0\n\nLANGUAGE: rust\nCODE:\n```\n#[pallet::storage]\n#[pallet::getter(fn something)]\npub type Something<T: Config> = StorageValue<_, T::AccountId, ValueQuery>;\n```\n\n----------------------------------------\n\nTITLE: Updating Keystore Type for RPC\nDESCRIPTION: Migrates from KeyStorePtr to SyncCryptoStorePtr to support async operations and remote keystores.\nSOURCE: https://github.com/paritytech/polkadot-sdk/blob/master/substrate/docs/Upgrading-2.0-to-3.0.md#2025-04-21_snippet_6\n\nLANGUAGE: diff\nCODE:\n```\n--- a/bin/node/rpc/src/lib.rs\n+++ b/bin/node/rpc/src/lib.rs\n@@ -32,6 +32,7 @@\n\n use std::sync::Arc;\n\n+use sp_keystore::SyncCryptoStorePtr;\n use node_primitives::{Block, BlockNumber, AccountId, Index, Balance, Hash};\n use sc_consensus_babe::{Config, Epoch};\n use sc_consensus_babe_rpc::BabeRpcHandler;\n@@ -40,7 +41,6 @@ use sc_finality_grandpa:{\n \tSharedVoterState, SharedAuthoritySet, FinalityProofProvider, GrandpaJustificationStream\n };\n use sc_finality_grandpa_rpc::GrandpaRpcHandler;\n-use sc_keystore::KeyStorePtr;\n pub use sc_rpc_api::DenyUnsafe;\n```\n\n----------------------------------------\n\nTITLE: Building Workspace\nDESCRIPTION: Commands to build the entire workspace in release mode and create a Docker image\nSOURCE: https://github.com/paritytech/polkadot-sdk/blob/master/templates/minimal/README.md#2025-04-21_snippet_4\n\nLANGUAGE: sh\nCODE:\n```\ncargo build --workspace --release\n\ndocker build . -t polkadot-sdk-minimal-template\n```\n\n----------------------------------------\n\nTITLE: Storage Type Implementation Update - Rust\nDESCRIPTION: Implements storage::append in the storage types implementation with linked storage capabilities.\nSOURCE: https://github.com/paritytech/polkadot-sdk/blob/master/substrate/docs/CHANGELOG.md#2025-04-21_snippet_0\n\nLANGUAGE: rust\nCODE:\n```\nstorage::append\n```\n\n----------------------------------------\n\nTITLE: Example Genesis Config Patch JSON\nDESCRIPTION: Example of a JSON patch file used to customize specific values in the genesis configuration.\nSOURCE: https://github.com/paritytech/polkadot-sdk/blob/master/substrate/bin/utils/chain-spec-builder/README.md#2025-04-21_snippet_10\n\nLANGUAGE: json\nCODE:\n```\n{\n\t\"balances\": {\n\t\t\"balances\": [\n\t\t\t[\n\t\t\t\t\"5FHneW46xGXgs5mUiveU4sbTyGBzmstUspZC92UhjJM694ty\",\n\t\t\t    1000000000000000\n\t\t\t],\n\t\t\t[\n\t\t\t\t\"5FLSigC9HGRKVhB9FiEo4Y3koPsNmBmLJbpXg2mp1hXcS59Y\",\n\t\t\t     1000000000000000\n\t\t\t],\n\t\t\t[\n\t\t\t\t\"5CcjiSgG2KLuKAsqkE2Nak1S2FbAcMr5SxRASUuwR3zSNV2b\",\n\t\t\t    5000000000000000\n\t\t\t]\n\t\t]\n\t},\n\t\"sudo\": {\n\t\t\"key\": \"5Ff3iXP75ruzroPWRP2FYBHWnmGGBSb63857BgnzCoXNxfPo\"\n\t}\n}\n```\n\n----------------------------------------\n\nTITLE: Illustrating Availability Core Transitions within a Block in DOT\nDESCRIPTION: This DOT code snippet creates a graph showing the possible state transitions of an Availability Core within a single block, including backing and availability processes.\nSOURCE: https://github.com/paritytech/polkadot-sdk/blob/master/polkadot/roadmap/implementers-guide/src/runtime/scheduler.md#2025-04-21_snippet_1\n\nLANGUAGE: dot\nCODE:\n```\ndigraph {\n  label = \"Availability Core Transitions within Block\\n\\n\\n\";\n  labelloc = \"t\";\n  splines=\"line\";\n\n  subgraph cluster_left {\n    label = \"\";\n    labelloc = \"t\";\n\n    fr1 [label = \"Free\" shape=rectangle]\n    fr2 [label = \"Free\" shape=rectangle]\n    occ [label = \"Occupied\" shape=rectangle]\n\n    fr1 -> fr2 [label = \"No Backing\"]\n    fr1 -> occ [label = \"Backing\"]\n\n    { rank=same fr2 occ }\n  }\n\n  subgraph cluster_right {\n    label = \"\";\n    labelloc = \"t\";\n\n    occ2 [label = \"Occupied\" shape=rectangle]\n    fr3 [label = \"Free\" shape=rectangle]\n    fr4 [label = \"Free\" shape=rectangle]\n    occ3 [label = \"Occupied\" shape=rectangle]\n    occ4 [label = \"Occupied\" shape=rectangle]\n\n    occ2 -> fr3 [label = \"Availability\"]\n    occ2 -> occ3 [label = \"No availability\"]\n    fr3 -> fr4 [label = \"No backing\"]\n    fr3 -> occ4 [label = \"Backing\"]\n    occ3 -> occ4 [label = \"(no change)\"]\n    occ3 -> fr3 [label = \"Availability Timeout\"]\n\n    { rank=same; fr3[group=g1]; occ3[group=g2] }\n    { rank=same; fr4[group=g1]; occ4[group=g2] }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Running XCM Simulator Fuzzer with Honggfuzz\nDESCRIPTION: This command executes the XCM Simulator Fuzzer using Honggfuzz. It enables the 'try-runtime' feature for the build process.\nSOURCE: https://github.com/paritytech/polkadot-sdk/blob/master/polkadot/xcm/xcm-simulator/fuzzer/README.md#2025-04-21_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nHFUZZ_BUILD_ARGS=\"--features=try-runtime\" cargo hfuzz run xcm-fuzzer\n```\n\n----------------------------------------\n\nTITLE: Building Westend Runtime for Benchmarking\nDESCRIPTION: Command to build the Westend runtime with benchmarking features enabled in production profile.\nSOURCE: https://github.com/paritytech/polkadot-sdk/blob/master/substrate/utils/frame/omni-bencher/README.md#2025-04-21_snippet_4\n\nLANGUAGE: sh\nCODE:\n```\ncargo build -p westend-runtime --profile production --features runtime-benchmarks\n```\n\n----------------------------------------\n\nTITLE: Running Omni Node in Development Mode\nDESCRIPTION: Command to start Omni Node in development mode with manual block sealing configured for 1-second intervals.\nSOURCE: https://github.com/paritytech/polkadot-sdk/blob/master/templates/parachain/README.docify.md#2025-04-21_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\npolkadot-omni-node --chain <path/to/chain_spec.json> --dev --dev-block-time 1000\n```\n\n----------------------------------------\n\nTITLE: Viewing Rust Documentation Command\nDESCRIPTION: Command to generate and view the full Rust documentation for the asset-conversion pallet\nSOURCE: https://github.com/paritytech/polkadot-sdk/blob/master/substrate/frame/asset-conversion/README.md#2025-04-21_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\ncargo doc -p pallet-asset-conversion --open\n```\n\n----------------------------------------\n\nTITLE: Recording SemVer Changes in PRDoc YAML Format\nDESCRIPTION: Example YAML structure showing how to record version bump requirements for modified crates in a PRDoc file. The example shows both major and minor bumps for different crates.\nSOURCE: https://github.com/paritytech/polkadot-sdk/blob/master/docs/contributor/prdoc.md#2025-04-21_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\ncrates:\n  - name: frame-example\n    bump: major\n  - name: frame-example-pallet\n    bump: minor\n```\n\n----------------------------------------\n\nTITLE: Generating Human Readable Chain Spec with Full Config\nDESCRIPTION: Command to generate a human-readable chain spec using a full genesis config JSON file.\nSOURCE: https://github.com/paritytech/polkadot-sdk/blob/master/substrate/bin/utils/chain-spec-builder/README.md#2025-04-21_snippet_9\n\nLANGUAGE: rust\nCODE:\n```\nchain-spec-builder -c \"/dev/stdout\" create -r $runtime_path full \"tests/input/full.json\"\n```\n\n----------------------------------------\n\nTITLE: Generating Weights for Substrate Pallet\nDESCRIPTION: Command to generate weights for a specific Substrate pallet in the dev runtime\nSOURCE: https://github.com/paritytech/polkadot-sdk/blob/master/docs/contributor/weight-generation.md#2025-04-21_snippet_3\n\nLANGUAGE: sh\nCODE:\n```\n/cmd bench --runtime dev --pallet pallet_asset_conversion_ops\n```\n\n----------------------------------------\n\nTITLE: Installing Polkadot Omni Bencher via crates.io\nDESCRIPTION: Command to install frame-omni-bencher directly from crates.io with production profile and locked dependencies.\nSOURCE: https://github.com/paritytech/polkadot-sdk/blob/master/substrate/utils/frame/omni-bencher/README.md#2025-04-21_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\ncargo install frame-omni-bencher --profile=production --locked\n```\n\n----------------------------------------\n\nTITLE: Referencing CallApiAt Trait in Rust for Substrate Runtime\nDESCRIPTION: This code snippet mentions the `CallApiAt` trait provided by the crate. This trait is likely used for calling APIs at specific blocks or states in the Substrate runtime.\nSOURCE: https://github.com/paritytech/polkadot-sdk/blob/master/substrate/primitives/api/README.md#2025-04-21_snippet_5\n\nLANGUAGE: Rust\nCODE:\n```\nCallApiAt\n```\n\n----------------------------------------\n\nTITLE: Bitfield Signing Process in Polkadot SDK (Mermaid)\nDESCRIPTION: This diagram illustrates the bitfield signing process, involving the Overseer, BitfieldSigning, RuntimeApi, AvailabilityStore, and BitfieldDistribution subsystems. It shows how bitfields are generated and distributed.\nSOURCE: https://github.com/paritytech/polkadot-sdk/blob/master/polkadot/roadmap/implementers-guide/src/node/subsystems-and-jobs.md#2025-04-21_snippet_7\n\nLANGUAGE: mermaid\nCODE:\n```\nsequenceDiagram\n    participant OS as Overseer\n    participant BS as BitfieldSigning\n    participant RA as RuntimeApi\n    participant AS as AvailabilityStore\n    participant BD as BitfieldDistribution\n\n    OS ->> BS: ActiveLeavesUpdate\n    loop for each activated relay parent\n        Note over BS: Wait 1.5 seconds\n        BS -->> RA: Request::AvailabilityCores\n        loop for each availability core\n            BS -->> AS: QueryChunkAvailability\n        end\n        BS ->> BD: DistributeBitfield\n    end\n```\n\n----------------------------------------\n\nTITLE: Running a Subsystem Benchmark Test\nDESCRIPTION: Command-line example showing how to execute a specific subsystem benchmark test using a YAML configuration file that defines the test parameters and objectives.\nSOURCE: https://github.com/paritytech/polkadot-sdk/blob/master/polkadot/node/subsystem-bench/README.md#2025-04-21_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\ntarget/testnet/subsystem-bench polkadot/node/subsystem-bench/examples/availability_read.yaml\n```\n\n----------------------------------------\n\nTITLE: Defining PVF Pre-checker Message Type in Rust for Polkadot\nDESCRIPTION: This code snippet defines an empty enum for the PVF Pre-checker subsystem, indicating that it currently receives no specific messages.\nSOURCE: https://github.com/paritytech/polkadot-sdk/blob/master/polkadot/roadmap/implementers-guide/src/types/overseer-protocol.md#2025-04-21_snippet_24\n\nLANGUAGE: rust\nCODE:\n```\npub enum PvfCheckerMessage { }\n```\n\n----------------------------------------\n\nTITLE: Formatting Conditional Returns without Semicolons in Rust\nDESCRIPTION: Demonstrates the omission of trailing semicolons in conditional return statements. This style improves code clarity and conciseness.\nSOURCE: https://github.com/paritytech/polkadot-sdk/blob/master/docs/contributor/STYLE_GUIDE.md#2025-04-21_snippet_5\n\nLANGUAGE: rust\nCODE:\n```\nif condition {\n\treturn 1    // <-- no ; here\n}\n```\n\n----------------------------------------\n\nTITLE: Basic Benchmark Command Usage\nDESCRIPTION: Shell command showing the basic usage of the benchmark overhead command with development configuration.\nSOURCE: https://github.com/paritytech/polkadot-sdk/blob/master/substrate/utils/frame/benchmarking-cli/src/overhead/README.md#2025-04-21_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\ncargo run --profile=production -- benchmark overhead --dev\n```\n\n----------------------------------------\n\nTITLE: Defining Proof-of-Validity (PoV) Structure in Rust\nDESCRIPTION: Defines the PoV struct, which is a type-safe wrapper around bytes (Vec<u8>) representing the proof of validity for a candidate block.\nSOURCE: https://github.com/paritytech/polkadot-sdk/blob/master/polkadot/roadmap/implementers-guide/src/types/availability.md#2025-04-21_snippet_1\n\nLANGUAGE: rust\nCODE:\n```\nstruct PoV(Vec<u8>);\n```\n\n----------------------------------------\n\nTITLE: Executing XCM on Asset Hub for Polkadot to Ethereum Transfer\nDESCRIPTION: Example of XCM execution on Asset Hub (AH) for transferring assets from Polkadot to Ethereum, including fee payment and asset exchange.\nSOURCE: https://github.com/paritytech/polkadot-sdk/blob/master/bridges/snowbridge/docs/v2.md#2025-04-21_snippet_1\n\nLANGUAGE: text\nCODE:\n```\nReserveAssetDeposited (KLT, 80)\nPayFees (KLT, 20)\nSetAssetClaimer Kilt/Alice\nAliasOrigin Kilt/Alice\nExchangeAsset give=(KLT, 20) want=(WETH, 1)\nInitiateAssetsTransfer asset=(KLT, 60) remoteFee=(WETH, 1) dest=Ethereum\n  DepositAsset (KLT, 60) beneficiary=Bob\n```\n\n----------------------------------------\n\nTITLE: Cleaning Untracked Files in Git Repository\nDESCRIPTION: Command to remove untracked files from the git repository, useful for troubleshooting build issues.\nSOURCE: https://github.com/paritytech/polkadot-sdk/blob/master/bridges/snowbridge/README.md#2025-04-21_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\ngit clean -idx\n```\n\n----------------------------------------\n\nTITLE: Overriding CI SemVer Validation in PRDoc YAML\nDESCRIPTION: Example YAML structure demonstrating how to disable validation for specific crates when the CI check might recommend incorrect version bumps, using the 'validate: false' property.\nSOURCE: https://github.com/paritytech/polkadot-sdk/blob/master/docs/contributor/prdoc.md#2025-04-21_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\ncrates:\n  - name: frame-example\n    bump: major\n    validate: false\n  - name: frame-example-pallet\n    bump: minor\n```\n\n----------------------------------------\n\nTITLE: Executing Zombienet for Database Generation\nDESCRIPTION: Command to spawn zombienet and generate the database snapshot.\nSOURCE: https://github.com/paritytech/polkadot-sdk/blob/master/substrate/zombienet/0001-basic-warp-sync/README.md#2025-04-21_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n./zombienet-linux spawn --dir ./db-test-gen --provider native generate-warp-sync-database.toml\n```\n\n----------------------------------------\n\nTITLE: Formatting Single-Line Features in TOML\nDESCRIPTION: Shows how to format a single-line feature entry in a Cargo.toml file. Demonstrates proper syntax for features that fit within 80 characters.\nSOURCE: https://github.com/paritytech/polkadot-sdk/blob/master/substrate/docs/STYLE_GUIDE.md#2025-04-21_snippet_7\n\nLANGUAGE: toml\nCODE:\n```\n[features]\ndefault = [\"std\"]\n```\n\n----------------------------------------\n\nTITLE: Enabling Host Function Tracing for PolkaVM Contracts\nDESCRIPTION: Command to run a development node with enhanced logging for contract debugging. Sets logging levels for runtime::revive::strace to trace and runtime::revive to debug.\nSOURCE: https://github.com/paritytech/polkadot-sdk/blob/master/substrate/frame/revive/README.md#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ncargo run --release -- --dev -lerror,runtime::revive::strace=trace,runtime::revive=debug\n```\n\n----------------------------------------\n\nTITLE: Generating Chain Spec with Named Preset\nDESCRIPTION: Command to generate a chain spec using a named preset from the runtime, including relay chain and para ID information.\nSOURCE: https://github.com/paritytech/polkadot-sdk/blob/master/substrate/bin/utils/chain-spec-builder/README.md#2025-04-21_snippet_5\n\nLANGUAGE: rust\nCODE:\n```\nchain-spec-builder -c \"/dev/stdout\" create --relay-chain \"dev\" --para-id 1000 -r $runtime_path named-preset \"staging\"\n```\n\n----------------------------------------\n\nTITLE: Cleaning Up Command History\nDESCRIPTION: Command to generate weights while cleaning up previous command comments in the PR\nSOURCE: https://github.com/paritytech/polkadot-sdk/blob/master/docs/contributor/weight-generation.md#2025-04-21_snippet_6\n\nLANGUAGE: sh\nCODE:\n```\n/cmd bench --runtime kusama polkadot --pallet=pallet_balances --clean\n```\n\n----------------------------------------\n\nTITLE: Installing Build Dependencies for OpenSUSE\nDESCRIPTION: Commands to install the necessary build dependencies for Substrate development on OpenSUSE, including clang, curl, git, OpenSSL development libraries, LLVM development libraries, and udev development libraries.\nSOURCE: https://github.com/paritytech/polkadot-sdk/blob/master/templates/solochain/docs/rust-setup.md#2025-04-21_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nsudo zypper install clang curl git openssl-devel llvm-devel libudev-devel\n```\n\n----------------------------------------\n\nTITLE: Handling QueryCandidateVotes Message\nDESCRIPTION: Loads candidate votes for specified session indices and candidate hashes, returning data for existing votes while omitting missing ones.\nSOURCE: https://github.com/paritytech/polkadot-sdk/blob/master/polkadot/roadmap/implementers-guide/src/node/disputes/dispute-coordinator.md#2025-04-21_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n### On `DisputeCoordinatorMessage::QueryCandidateVotes`\n\nLoads `candidate-votes` for every `(SessionIndex, CandidateHash)` in the input query and returns data within each\n`CandidateVote`. If a particular `candidate-vote` is missing, that particular request is omitted from the response.\n```\n\n----------------------------------------\n\nTITLE: Distributing Collations to Validators in Polkadot SDK (Mermaid)\nDESCRIPTION: This diagram shows the process of distributing collations to validators, involving the CollatorProtocol, NetworkBridge, and CandidateSelection subsystems. It illustrates the steps from collation distribution to potential fetching by validators.\nSOURCE: https://github.com/paritytech/polkadot-sdk/blob/master/polkadot/roadmap/implementers-guide/src/node/subsystems-and-jobs.md#2025-04-21_snippet_2\n\nLANGUAGE: mermaid\nCODE:\n```\nsequenceDiagram\n    participant CollationGeneration\n    participant CS as CollatorProtocol::CollatorSide\n    participant NB as NetworkBridge\n    participant VS as CollatorProtocol::ValidatorSide\n    participant CandidateSelection\n\n    CollationGeneration ->> CS: DistributeCollation\n    CS -->> NB: ConnectToValidators\n\n    Note over CS,NB: This connects to multiple validators.\n\n    CS ->> NB: Declare\n    NB ->> VS: Declare\n\n    Note over CS: Ensure that the connected validator is among<br/>the para's validator set. Otherwise, skip it.\n\n    CS ->> NB: AdvertiseCollation\n    NB ->> VS: AdvertiseCollation\n\n    VS ->> CandidateSelection: Collation\n\n    Note over CandidateSelection: Lots of other machinery in play here,<br/>but there are only two outcomes from the<br/>perspective of the `CollatorProtocol`:\n\n    alt happy path\n        CandidateSelection -->> VS: FetchCollation\n        Activate VS\n        VS ->> NB: RequestCollation\n        NB ->> CS: RequestCollation\n        CS ->> NB: Collation\n        NB ->> VS: Collation\n        Deactivate VS\n\n    else CandidateSelection already selected a different candidate\n        Note over CandidateSelection: silently drop\n    end\n```\n\n----------------------------------------\n\nTITLE: Retrieving Validation Code by Hash in Rust\nDESCRIPTION: Fetches validation code (past, present or future) using its hash value. Takes a Block and ValidationCodeHash as parameters and returns an optional ValidationCode.\nSOURCE: https://github.com/paritytech/polkadot-sdk/blob/master/polkadot/roadmap/implementers-guide/src/runtime-api/validation-code.md#2025-04-21_snippet_1\n\nLANGUAGE: rust\nCODE:\n```\nfn validation_code_by_hash(at: Block, ValidationCodeHash) -> Option<ValidationCode>;\n```\n\n----------------------------------------\n\nTITLE: Benchmark Results for Chunk Construction and Reconstruction (AMD 5950x)\nDESCRIPTION: Output of the 'scaling_with_validators' benchmark showing performance metrics for constructing and reconstructing chunks with varying numbers of validators (200 to 50000). Times are in milliseconds and throughput in MiB/s.\nSOURCE: https://github.com/paritytech/polkadot-sdk/blob/master/polkadot/erasure-coding/benches/README.md#2025-04-21_snippet_1\n\nLANGUAGE: plaintext\nCODE:\n```\nconstruct/200           time:   [93.924 ms 94.525 ms 95.214 ms]\n                        thrpt:  [52.513 MiB/s 52.896 MiB/s 53.234 MiB/s]\nconstruct/500           time:   [111.25 ms 111.52 ms 111.80 ms]\n                        thrpt:  [44.721 MiB/s 44.837 MiB/s 44.946 MiB/s]\nconstruct/1000          time:   [117.37 ms 118.28 ms 119.21 ms]\n                        thrpt:  [41.941 MiB/s 42.273 MiB/s 42.601 MiB/s]\nconstruct/2000          time:   [125.05 ms 125.72 ms 126.38 ms]\n                        thrpt:  [39.564 MiB/s 39.772 MiB/s 39.983 MiB/s]\nconstruct/10000         time:   [270.46 ms 275.11 ms 279.81 ms]\n                        thrpt:  [17.869 MiB/s 18.174 MiB/s 18.487 MiB/s]\nconstruct/50000         time:   [205.86 ms 209.66 ms 213.64 ms]\n                        thrpt:  [23.404 MiB/s 23.848 MiB/s 24.288 MiB/s]\n\nreconstruct/200         time:   [180.73 ms 184.09 ms 187.73 ms]\n                        thrpt:  [26.634 MiB/s 27.160 MiB/s 27.666 MiB/s]\nreconstruct/500         time:   [195.59 ms 198.58 ms 201.76 ms]\n                        thrpt:  [24.781 MiB/s 25.179 MiB/s 25.564 MiB/s]\nreconstruct/1000        time:   [207.92 ms 211.57 ms 215.57 ms]\n                        thrpt:  [23.195 MiB/s 23.633 MiB/s 24.048 MiB/s]\nreconstruct/2000        time:   [218.59 ms 223.68 ms 229.18 ms]\n                        thrpt:  [21.817 MiB/s 22.354 MiB/s 22.874 MiB/s]\nreconstruct/10000       time:   [496.35 ms 505.17 ms 515.42 ms]\n                        thrpt:  [9.7008 MiB/s 9.8977 MiB/s 10.074 MiB/s]\nreconstruct/50000       time:   [276.56 ms 277.53 ms 278.58 ms]\n                        thrpt:  [17.948 MiB/s 18.016 MiB/s 18.079 MiB/s]\n```\n\n----------------------------------------\n\nTITLE: Executing XCM on Bridge Hub for Polkadot to Ethereum Transfer\nDESCRIPTION: Example of XCM execution on Bridge Hub (BH) for transferring assets from Polkadot to Ethereum, including fee payment and message export.\nSOURCE: https://github.com/paritytech/polkadot-sdk/blob/master/bridges/snowbridge/docs/v2.md#2025-04-21_snippet_2\n\nLANGUAGE: text\nCODE:\n```\n!WithdrawAsset(DOT, 10)\n!PayFees (DOT, 10)\n!ExportMessage dest=Ethereum\n  *ReserveAssetDeposited (KLT, 60)\n  *WithdrawAsset (WETH, 1)\n  *PayFees (WETH, 1)\n  *SetAssetClaimer Kilt/Alice\n  *AliasOrigin Kilt/Alice\n  DepositAsset (KLT, 60) beneficiary=Bob\n```\n\n----------------------------------------\n\nTITLE: Running Westend Chain with Zombienet\nDESCRIPTION: Command to spawn Westend network with BridgeHubWestend and AssetHub using zombienet\nSOURCE: https://github.com/paritytech/polkadot-sdk/blob/master/cumulus/parachains/runtimes/bridge-hubs/README.md#2025-04-21_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\ncd <polkadot-sdk-git-repo-dir>\n\n# Westend + BridgeHubWestend + AssetHub for Westend (mirroring Polkadot)\nPOLKADOT_BINARY=~/local_bridge_testing/bin/polkadot \\\nPOLKADOT_PARACHAIN_BINARY=~/local_bridge_testing/bin/polkadot-parachain \\\n\t~/local_bridge_testing/bin/zombienet-linux --provider native spawn ./bridges/testing/environments/rococo-westend/bridge_hub_westend_local_network.toml\n```\n\n----------------------------------------\n\nTITLE: Try-Runtime Build Command\nDESCRIPTION: Shell command to build with try-runtime feature enabled\nSOURCE: https://github.com/paritytech/polkadot-sdk/blob/master/umbrella/README.md#2025-04-21_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\ncargo build --features \"try-runtime\"\n```\n\n----------------------------------------\n\nTITLE: Installing Chain Spec Builder using Cargo\nDESCRIPTION: Command to install the chain-spec-builder utility using Cargo package manager.\nSOURCE: https://github.com/paritytech/polkadot-sdk/blob/master/substrate/bin/utils/chain-spec-builder/README.md#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ncargo install staging-chain-spec-builder --locked\n```\n\n----------------------------------------\n\nTITLE: Setting up Local Bridge Testing Environment\nDESCRIPTION: Initial setup commands for creating directories and installing required binaries for bridge testing\nSOURCE: https://github.com/paritytech/polkadot-sdk/blob/master/cumulus/parachains/runtimes/bridge-hubs/README.md#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n# Prepare empty directory for testing\nmkdir -p ~/local_bridge_testing/bin\nmkdir -p ~/local_bridge_testing/logs\n```\n\n----------------------------------------\n\nTITLE: Generating Chain Specification\nDESCRIPTION: Command to generate a chain specification file using chain-spec-builder with development preset\nSOURCE: https://github.com/paritytech/polkadot-sdk/blob/master/templates/minimal/README.md#2025-04-21_snippet_2\n\nLANGUAGE: sh\nCODE:\n```\nchain-spec-builder create --relay-chain \"dev\" --para-id 1000 --runtime \\\n    target/release/wbuild/minimal-template-runtime/minimal_template_runtime.wasm named-preset development\n```\n\n----------------------------------------\n\nTITLE: Defining Proof Enumeration Types\nDESCRIPTION: SCALE-encoded enumeration defining the possible proof types for statement authentication, including different signature schemes and on-chain proof.\nSOURCE: https://github.com/paritytech/polkadot-sdk/blob/master/substrate/primitives/statement-store/README.md#2025-04-21_snippet_1\n\nLANGUAGE: rust\nCODE:\n```\nProof = enum {\n    0: Sr25519 { signature: [u8; 64], signer: [u8; 32] },\n    1: Ed25519 { signature: [u8; 64], signer: [u8; 32] },\n    2: Secp256k1Ecdsa { signature: [u8; 65], signer: [u8; 33] },\n    3: OnChain { who: [u8; 32], block_hash: [u8; 32], event_index: u64 }\n}\n```\n\n----------------------------------------\n\nTITLE: Building Westend Runtime for Benchmarking\nDESCRIPTION: Command to build the Westend runtime with benchmarking features enabled using production profile.\nSOURCE: https://github.com/paritytech/polkadot-sdk/blob/master/substrate/utils/frame/benchmarking-cli/README.md#2025-04-21_snippet_2\n\nLANGUAGE: sh\nCODE:\n```\ncargo build -p westend-runtime --profile production --features runtime-benchmarks\n```\n\n----------------------------------------\n\nTITLE: Checking for New Election Round in Rust\nDESCRIPTION: This code snippet demonstrates how the module determines if a new election round should start. It checks if the current block number is divisible by the TermDuration.\nSOURCE: https://github.com/paritytech/polkadot-sdk/blob/master/substrate/frame/elections-phragmen/README.md#2025-04-21_snippet_0\n\nLANGUAGE: rust\nCODE:\n```\nBlockNumber % TermDuration == 0\n```\n\n----------------------------------------\n\nTITLE: Generating PRDoc via GitHub Command\nDESCRIPTION: Shows how to use the '/cmd prdoc' command in a GitHub PR comment to generate a PRDoc with specified audience and version bump level.\nSOURCE: https://github.com/paritytech/polkadot-sdk/blob/master/docs/contributor/prdoc.md#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n/cmd prdoc --audience runtime_dev --bump patch\n```\n\n----------------------------------------\n\nTITLE: Implementing AllowedRelayParentsTracker Struct in Rust\nDESCRIPTION: Defines a struct for tracking allowed relay parents with their state roots in chronological order. Includes a buffer implemented as a VecDeque for storing relay parent and state root pairs, along with the latest block number.\nSOURCE: https://github.com/paritytech/polkadot-sdk/blob/master/polkadot/roadmap/implementers-guide/src/runtime/shared.md#2025-04-21_snippet_1\n\nLANGUAGE: rust\nCODE:\n```\nstruct AllowedRelayParentsTracker<Hash, BlockNumber> {\n  buffer: VecDeque<(Hash, Hash)>,\n  latest_number: BlockNumber,\n}\n```\n\n----------------------------------------\n\nTITLE: Constructing Initial XCM for Polkadot to Ethereum Transfer\nDESCRIPTION: Example of an initial XCM message constructed by the user agent for transferring assets from Polkadot to Ethereum via Asset Hub.\nSOURCE: https://github.com/paritytech/polkadot-sdk/blob/master/bridges/snowbridge/docs/v2.md#2025-04-21_snippet_0\n\nLANGUAGE: text\nCODE:\n```\nWithdrawAsset (KLT, 100)\nPayFees (KLT, 20)\nInitiateAssetsTransfer asset=(KLT, 60) remoteFee=(KLT, 20) dest=AH\n  ExchangeAsset give=(KLT, 20) want=(WETH, 1)\n  InitiateAssetsTransfer asset=(KLT, 40) remoteFee=(WETH, 1) dest=Ethereum\n    DepositAsset (KLT, 40) beneficiary=Bob\n```\n\n----------------------------------------\n\nTITLE: Referencing Core Runtime API in Rust for Substrate\nDESCRIPTION: This snippet refers to the `Core` runtime API, which is a mandatory API that every Substrate runtime must implement. It provides the basic functionality required by all runtimes.\nSOURCE: https://github.com/paritytech/polkadot-sdk/blob/master/substrate/primitives/api/README.md#2025-04-21_snippet_2\n\nLANGUAGE: Rust\nCODE:\n```\nCore\n```\n\n----------------------------------------\n\nTITLE: Starting Ethereum JSON-RPC Server for Pallet Revive\nDESCRIPTION: This command starts the Ethereum JSON-RPC server for the pallet-revive-eth-rpc crate. It runs on localhost:8545 by default and sets specific logging levels.\nSOURCE: https://github.com/paritytech/polkadot-sdk/blob/master/substrate/frame/revive/rpc/examples/README.md#2025-04-21_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nRUST_LOG=\"info,eth-rpc=debug\" cargo run -p pallet-revive-eth-rpc -- --dev\n```\n\n----------------------------------------\n\nTITLE: Adding Sync State RPC Service\nDESCRIPTION: Extends the RPC interface with a new sync state service for improved light client support.\nSOURCE: https://github.com/paritytech/polkadot-sdk/blob/master/substrate/docs/Upgrading-2.0-to-3.0.md#2025-04-21_snippet_5\n\nLANGUAGE: diff\nCODE:\n```\n--- a/bin/node/rpc/src/lib.rs\n+++ b/bin/node/rpc/src/lib.rs\n@@ -185,6 +188,18 @@ pub fn create_full<C, P, SC, B>(\n \t\t)\n \t);\n\n+\tio.extend_with(\n+\t\tsc_sync_state_rpc::SyncStateRpcApi::to_delegate(\n+\t\t\tsc_sync_state_rpc::SyncStateRpcHandler::new(\n+\t\t\t\tchain_spec,\n+\t\t\t\tclient,\n+\t\t\t\tshared_authority_set,\n+\t\t\t\tshared_epoch_changes,\n+\t\t\t\tdeny_unsafe,\n+\t\t\t)\n+\t\t)\n+\t);\n+\n \tio\n }\n```\n\n----------------------------------------\n\nTITLE: Running Polkadot Node with Port Mappings\nDESCRIPTION: Commands to run a Polkadot node as a daemon with port mappings for RPC and P2P communication.\nSOURCE: https://github.com/paritytech/polkadot-sdk/blob/master/docs/contributor/docker.md#2025-04-21_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n$ENGINE run -d -p 30333:30333 -p 9933:9933 \\\n    -v /my/local/folder:/polkadot \\\n    parity/polkadot:latest \\\n    --chain westend --rpc-external --rpc-cors all \\\n    --name \"PolkaDocker\n```\n\nLANGUAGE: bash\nCODE:\n```\n$ENGINE run -d -p 30333:30333 -p 9933:9933 -p 9944:9944 \\\n    -v /my/local/folder:/polkadot \\\n    parity/polkadot:latest \\\n    --chain westend --ws-external --rpc-external --rpc-cors all --name \"PolkaDocker\"\n```\n\n----------------------------------------\n\nTITLE: Asset Transfer Commands\nDESCRIPTION: Commands for performing reserve-backed transfers between Rococo and Westend Asset Hubs\nSOURCE: https://github.com/paritytech/polkadot-sdk/blob/master/cumulus/parachains/runtimes/bridge-hubs/README.md#2025-04-21_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\ncd <polkadot-sdk-git-repo-dir>\n\n# ROCs from Rococo's Asset Hub to Westend's.\n./bridges/testing/environments/rococo-westend/bridges_rococo_westend.sh reserve-transfer-assets-from-asset-hub-rococo-local\n```\n\n----------------------------------------\n\nTITLE: Installing and Configuring Rust for Substrate\nDESCRIPTION: Commands to install Rust using rustup and configure the environment. This installs the Rust toolchain manager and adds it to the current shell's environment variables.\nSOURCE: https://github.com/paritytech/polkadot-sdk/blob/master/templates/solochain/docs/rust-setup.md#2025-04-21_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\n# Install\ncurl --proto '=https' --tlsv1.2 -sSf https://sh.rustup.rs | sh\n# Configure\nsource ~/.cargo/env\n```\n\n----------------------------------------\n\nTITLE: Setting Bridge GRANDPA Pallet Owner\nDESCRIPTION: Function that allows the current module owner to transfer ownership to another account. This is part of the pallet's management functionality.\nSOURCE: https://github.com/paritytech/polkadot-sdk/blob/master/bridges/modules/grandpa/README.md#2025-04-21_snippet_2\n\nLANGUAGE: markdown\nCODE:\n```\nfn set_owner()\n```\n\n----------------------------------------\n\nTITLE: Describing Root Offences Pallet in Markdown\nDESCRIPTION: This snippet provides a brief description of the Root Offences Pallet, explaining its purpose and usage limitations. It emphasizes that the pallet is intended only for testing purposes.\nSOURCE: https://github.com/paritytech/polkadot-sdk/blob/master/substrate/frame/root-offences/README.md#2025-04-21_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n# Root Offences Pallet\n\nPallet that allows the root to create an offence.\n\nNOTE: This pallet should only be used for testing purposes.\n```\n\n----------------------------------------\n\nTITLE: Implementing Signed Wrapper Structure in Rust\nDESCRIPTION: Generic signed wrapper implementation for cryptographically signing and validating data. Includes payload, validator index, and signature with methods for signing and validation.\nSOURCE: https://github.com/paritytech/polkadot-sdk/blob/master/polkadot/roadmap/implementers-guide/src/types/backing.md#2025-04-21_snippet_1\n\nLANGUAGE: rust\nCODE:\n```\n/// A signed type which encapsulates the common desire to sign some data and validate a signature.\n///\n/// Note that the internal fields are not public; they are all accessible by immutable getters.\n/// This reduces the chance that they are accidentally mutated, invalidating the signature.\nstruct Signed<Payload, RealPayload=Payload> {\n    /// The payload is part of the signed data. The rest is the signing context,\n    /// which is known both at signing and at validation.\n    payload: Payload,\n    /// The index of the validator signing this statement.\n    validator_index: ValidatorIndex,\n    /// The signature by the validator of the signed payload.\n    signature: ValidatorSignature,\n}\n\nimpl<Payload: EncodeAs<RealPayload>, RealPayload: Encode> Signed<Payload, RealPayload> {\n    fn sign(payload: Payload, context: SigningContext, index: ValidatorIndex, key: ValidatorPair) -> Signed<Payload, RealPayload> { ... }\n    fn validate(&self, context: SigningContext, key: ValidatorId) -> bool { ... }\n}\n```\n\n----------------------------------------\n\nTITLE: VRF Context Generation for BABE Protocol\nDESCRIPTION: VRF input generation for BABE protocol using schnorrkel VRF with context \"A&V RC-VRF\" for both primary and secondary blocks.\nSOURCE: https://github.com/paritytech/polkadot-sdk/blob/master/polkadot/roadmap/implementers-guide/src/protocol-approval.md#2025-04-21_snippet_1\n\nLANGUAGE: rust\nCODE:\n```\nschnorrkel::vrf::VRFInOut::make_bytes\n```\n\n----------------------------------------\n\nTITLE: Storage Benchmark Output Results\nDESCRIPTION: Example output showing read and write benchmark results including timing statistics and value size summaries for both operations.\nSOURCE: https://github.com/paritytech/polkadot-sdk/blob/master/substrate/utils/frame/benchmarking-cli/src/storage/README.md#2025-04-21_snippet_2\n\nLANGUAGE: pre\nCODE:\n```\n# The 'read' benchmark\nPreparing keys from block BlockId::Number(9939462)\nReading 1379083 keys\nTime summary [ns]:\nTotal: 19668919930\nMin: 6450, Max: 1217259\nAverage: 14262, Median: 14190, Stddev: 3035.79\nPercentiles 99th, 95th, 75th: 18270, 16190, 14819\nValue size summary:\nTotal: 265702275\nMin: 1, Max: 1381859\nAverage: 192, Median: 80, Stddev: 3427.53\nPercentiles 99th, 95th, 75th: 3368, 383, 80\n\n# The 'write' benchmark\nPreparing keys from block BlockId::Number(9939462)\nWriting 1379083 keys\nTime summary [ns]:\nTotal: 98393809781\nMin: 12969, Max: 13282577\nAverage: 71347, Median: 69499, Stddev: 25145.27\nPercentiles 99th, 95th, 75th: 135839, 106129, 79239\nValue size summary:\nTotal: 265702275\nMin: 1, Max: 1381859\nAverage: 192, Median: 80, Stddev: 3427.53\nPercentiles 99th, 95th, 75th: 3368, 383, 80\n\nWriting weights to \"paritydb_weights.rs\"\n```\n\n----------------------------------------\n\nTITLE: XCM Flow from Bridge Hub to Asset Hub (Transfer with Transaction)\nDESCRIPTION: An extended version of the XCM message (x0) that includes a transaction to be executed on the destination chain. It contains all the instructions from the basic transfer plus a Transact instruction to execute a method call.\nSOURCE: https://github.com/paritytech/polkadot-sdk/blob/master/bridges/snowbridge/docs/v2.md#2025-04-21_snippet_6\n\nLANGUAGE: text\nCODE:\n```\nWithdrawAsset (KLT, 100)\nReserveAssetDeposited(WETH, 2)\nPayFees (WETH, 1)\nSetAssetClaimer Kilt/Bob         // derived from beneficiary on final destination\nAliasOrigin Ethereum/Alice       // derived from msg.sender\nInitiateAssetsTransfer asset=(KLT, 100) remoteFee=(WETH, 1) dest=KLT\n    DepositAsset (KLT, 100) beneficiary=Bob\n    Transact Bob.hello()\n```\n\n----------------------------------------\n\nTITLE: Installing Nix Flakes for Development Environment\nDESCRIPTION: Commands to enable the flakes experimental feature in Nix configuration, which is required for the Snowbridge development environment.\nSOURCE: https://github.com/paritytech/polkadot-sdk/blob/master/bridges/snowbridge/README.md#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nmkdir -p ~/.config/nix\necho 'experimental-features = nix-command flakes' >> ~/.config/nix/nix.conf\n```\n\n----------------------------------------\n\nTITLE: Listing Backport Labels in Markdown\nDESCRIPTION: A markdown list of labels used to trigger backporting to specific stable branches. These labels are added to PRs to indicate which stable branch should receive the backported changes.\nSOURCE: https://github.com/paritytech/polkadot-sdk/blob/master/docs/BACKPORT.md#2025-04-21_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n    - `A4-backport-stable2407`\n    - `A4-backport-stable2409`\n    - `A4-backport-stable2412`\n    - `A4-backport-stable2503`\n```\n\n----------------------------------------\n\nTITLE: Basic Polkadot Container Commands\nDESCRIPTION: Basic commands for running Polkadot containers, including version checking and chain initialization.\nSOURCE: https://github.com/paritytech/polkadot-sdk/blob/master/docs/contributor/docker.md#2025-04-21_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n$ENGINE run --rm -it parity/polkadot:latest --version\n```\n\nLANGUAGE: bash\nCODE:\n```\n$ENGINE run --rm -it parity/polkadot:latest --chain westend --name \"PolkaDocker\"\n```\n\n----------------------------------------\n\nTITLE: Building with Parity CI Docker Image\nDESCRIPTION: Commands to build the project using the Parity CI Docker image, including setting up cache directories and running the build process.\nSOURCE: https://github.com/paritytech/polkadot-sdk/blob/master/bridges/README.md#2025-04-21_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\ndocker pull paritytech/ci-unified:latest\nmkdir ~/cache\nchown 1000:1000 ~/cache #processes in the container runs as \"nonroot\" user with UID 1000\ndocker run --rm -it -w /shellhere/parity-bridges-common \\\n                    -v /home/$(whoami)/cache/:/cache/    \\\n                    -v \"$(pwd)\":/shellhere/parity-bridges-common \\\n                    -e CARGO_HOME=/cache/cargo/ \\\n                    -e SCCACHE_DIR=/cache/sccache/ \\\n                    -e CARGO_TARGET_DIR=/cache/target/  paritytech/ci-unified:latest cargo build --all\n#artifacts can be found in ~/cache/target\n```\n\n----------------------------------------\n\nTITLE: Building the Subsystem Benchmark Client with Cargo\nDESCRIPTION: Command to build the subsystem benchmark client with the testnet profile, which will place the binary in the target/testnet directory for use in performance testing.\nSOURCE: https://github.com/paritytech/polkadot-sdk/blob/master/polkadot/node/subsystem-bench/README.md#2025-04-21_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ncargo build --profile=testnet --bin subsystem-bench -p polkadot-subsystem-bench\n```\n\n----------------------------------------\n\nTITLE: Node Building Configuration\nDESCRIPTION: Basic TOML configuration for building a node using polkadot-sdk\nSOURCE: https://github.com/paritytech/polkadot-sdk/blob/master/umbrella/README.md#2025-04-21_snippet_5\n\nLANGUAGE: toml\nCODE:\n```\n[dependencies]\npolkadot-sdk = { version = \"0.12.0\", features = [\"node\"] }\n```\n\n----------------------------------------\n\nTITLE: Starting a Development Node\nDESCRIPTION: Command to launch a single-node development chain that doesn't persist state, useful for testing and development.\nSOURCE: https://github.com/paritytech/polkadot-sdk/blob/master/templates/solochain/README.md#2025-04-21_snippet_4\n\nLANGUAGE: sh\nCODE:\n```\n./target/release/solochain-template-node --dev\n```\n\n----------------------------------------\n\nTITLE: Removing a Voter in Rust\nDESCRIPTION: This code snippet shows the function call to remove a voter from the election system. It's used when a voter wants to reclaim their bond and remove their vote lock.\nSOURCE: https://github.com/paritytech/polkadot-sdk/blob/master/substrate/frame/elections-phragmen/README.md#2025-04-21_snippet_1\n\nLANGUAGE: rust\nCODE:\n```\nremove_voter()\n```\n\n----------------------------------------\n\nTITLE: Delay Tranche VRF Computation\nDESCRIPTION: VRF output computation for RelayVRFDelay and RelayEquivocation criteria using schnorrkel VRF with context \"A&V Tranche\".\nSOURCE: https://github.com/paritytech/polkadot-sdk/blob/master/polkadot/roadmap/implementers-guide/src/protocol-approval.md#2025-04-21_snippet_4\n\nLANGUAGE: rust\nCODE:\n```\nschnorrkel::vrf::VRFInOut::make_bytes\n```\n\n----------------------------------------\n\nTITLE: Running Polkadot with Detailed Logs\nDESCRIPTION: This bash command runs a Polkadot node in development mode with detailed logging enabled for debugging purposes.\nSOURCE: https://github.com/paritytech/polkadot-sdk/blob/master/polkadot/README.md#2025-04-21_snippet_9\n\nLANGUAGE: bash\nCODE:\n```\nRUST_LOG=debug RUST_BACKTRACE=1 cargo run --bin polkadot -- --dev\n```\n\n----------------------------------------\n\nTITLE: OccupiedCoreAssumption Enum Definition in Rust\nDESCRIPTION: Enum definition for specifying assumptions about the state of an occupied core. Used in para-related Runtime APIs to determine how results should be computed based on candidate availability status.\nSOURCE: https://github.com/paritytech/polkadot-sdk/blob/master/polkadot/roadmap/implementers-guide/src/runtime-api/README.md#2025-04-21_snippet_1\n\nLANGUAGE: rust\nCODE:\n```\n/// An assumption being made about the state of an occupied core.\nenum OccupiedCoreAssumption {\n    /// The candidate occupying the core was made available and included to free the core.\n    Included,\n    /// The candidate occupying the core timed out and freed the core without advancing the para.\n    TimedOut,\n    /// The core was not occupied to begin with.\n    Free,\n}\n```\n\n----------------------------------------\n\nTITLE: Displaying Default GenesisConfig\nDESCRIPTION: Command to display the default GenesisConfig from the runtime.\nSOURCE: https://github.com/paritytech/polkadot-sdk/blob/master/substrate/bin/utils/chain-spec-builder/README.md#2025-04-21_snippet_2\n\nLANGUAGE: rust\nCODE:\n```\nchain-spec-builder display-preset -r $runtime_path\n```\n\n----------------------------------------\n\nTITLE: Generating Raw Chain Specification\nDESCRIPTION: Command to generate a raw chain specification for use with chopsticks.\nSOURCE: https://github.com/paritytech/polkadot-sdk/blob/master/templates/parachain/README.docify.md#2025-04-21_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\nchain-spec-builder create --raw-storage --relay-chain \"rococo-local\" --para-id {{PARACHAIN_ID}} --runtime \\\n    target/release/wbuild/parachain-template-runtime/parachain_template_runtime.wasm named-preset development\n```\n\n----------------------------------------\n\nTITLE: Domain 1024 Compressed Ring Verifier Key Computation\nDESCRIPTION: Time complexity formula for ring verifier key computation with domain size 1024 with compression. Base time of 733.7ms plus 90.49µs per validator.\nSOURCE: https://github.com/paritytech/polkadot-sdk/blob/master/substrate/frame/sassafras/src/data/benchmark-results.md#2025-04-21_snippet_5\n\nLANGUAGE: plaintext\nCODE:\n```\nTime ~=   733700\n    + x    90.49\n              µs\n```\n\n----------------------------------------\n\nTITLE: Runtime and Node Communication Architecture\nDESCRIPTION: DOT diagram showing the high-level communication structure between Runtime and Node components, including the Transport layer and Runtime API interaction.\nSOURCE: https://github.com/paritytech/polkadot-sdk/blob/master/polkadot/roadmap/implementers-guide/src/architecture.md#2025-04-21_snippet_1\n\nLANGUAGE: dot\nCODE:\n```\ndigraph G {\n    Runtime [shape=box]\n    \"Node\" [shape=box margin=0.5]\n    Transport [shape=rectangle width=5]\n\n    Runtime -> \"Node\" [dir=both label=\"Runtime API\"]\n\n    \"Node\" -> Transport [penwidth=1]\n}\n```\n\n----------------------------------------\n\nTITLE: Installing Rust Nightly and WASM Support\nDESCRIPTION: Commands to install Rust nightly and add WASM target support for building the Web Assembly runtime.\nSOURCE: https://github.com/paritytech/polkadot-sdk/blob/master/bridges/README.md#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nrustup install nightly\nrustup target add wasm32-unknown-unknown --toolchain nightly\n```\n\n----------------------------------------\n\nTITLE: Building and Testing Parity Bridges Common\nDESCRIPTION: Commands to clone the repository, build all components, and run all tests for the Parity Bridges Common project.\nSOURCE: https://github.com/paritytech/polkadot-sdk/blob/master/bridges/README.md#2025-04-21_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ngit clone https://github.com/paritytech/parity-bridges-common.git\ncd parity-bridges-common\ncargo build --all\ncargo test --all\n```\n\n----------------------------------------\n\nTITLE: Displaying Bench Command Help\nDESCRIPTION: Commands to display help documentation for the bench command and all available commands\nSOURCE: https://github.com/paritytech/polkadot-sdk/blob/master/docs/contributor/weight-generation.md#2025-04-21_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\n/cmd bench --help\n\n# or\n\n/cmd --help\n```\n\n----------------------------------------\n\nTITLE: Runtime Implementation Configuration\nDESCRIPTION: TOML configuration for runtime implementation with std feature disabled\nSOURCE: https://github.com/paritytech/polkadot-sdk/blob/master/umbrella/README.md#2025-04-21_snippet_6\n\nLANGUAGE: toml\nCODE:\n```\n[dependencies]\npolkadot-sdk = { version = \"0.12.0\", features = [\"runtime\"], default-features = false }\n```\n\n----------------------------------------\n\nTITLE: Markdown Code of Conduct Document\nDESCRIPTION: The complete Code of Conduct document written in Markdown format, adapted from the Contributor Covenant version 1.4. Includes sections on pledge, standards, responsibilities, scope, enforcement, and attribution.\nSOURCE: https://github.com/paritytech/polkadot-sdk/blob/master/bridges/CODE_OF_CONDUCT.md#2025-04-21_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n# Contributor Covenant Code of Conduct\n\n## Our Pledge\n\nIn the interest of fostering an open and welcoming environment, we as contributors and maintainers\npledge to making participation in our project and our community a harassment-free experience for\neveryone, regardless of age, body size, disability, ethnicity, sex characteristics, gender identity\nand expression, level of experience, education, socio-economic status, nationality, personal\nappearance, race, religion, or sexual identity and orientation.\n\n## Our Standards\n\nExamples of behavior that contributes to creating a positive environment include:\n\n* Using welcoming and inclusive language\n* Being respectful of differing viewpoints and experiences\n* Gracefully accepting constructive criticism\n* Focusing on what is best for the community\n* Showing empathy towards other community members\n\nExamples of unacceptable behavior by participants include:\n\n* The use of sexualized language or imagery and unwelcome sexual attention or advances\n* Trolling, insulting/derogatory comments, and personal or political attacks\n* Public or private harassment\n* Publishing others' private information, such as a physical or electronic address, without explicit\n  permission\n* Other conduct which could reasonably be considered inappropriate in a professional setting\n```\n\n----------------------------------------\n\nTITLE: Running Erasure Coding Benchmarks in Polkadot SDK\nDESCRIPTION: Instructions for navigating to the erasure-coding directory and running the cargo bench command to execute the benchmarks.\nSOURCE: https://github.com/paritytech/polkadot-sdk/blob/master/polkadot/erasure-coding/benches/README.md#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ncd erasure-coding # ensure you are in the right directory\ncargo bench\n```\n\n----------------------------------------\n\nTITLE: Approval Coalescing Parameters Configuration\nDESCRIPTION: Configuration parameters for the approval coalescing mechanism that reduces network bandwidth by combining multiple candidate approvals into a single signed message. Defines maximum count of coalesced approvals and wait time before sending.\nSOURCE: https://github.com/paritytech/polkadot-sdk/blob/master/polkadot/roadmap/implementers-guide/src/protocol-approval.md#2025-04-21_snippet_5\n\nLANGUAGE: markdown\nCODE:\n```\n- MAX_APPROVAL_COALESCE_COUNT - Maximum number of candidates that can be approved in a single coalesced message\n- MAX_APPROVAL_COALESCE_WAIT_TICKS - Maximum time to wait before sending coalesced approvals\n- Last third of no-show period check to avoid triggering accidental no-shows\n```\n\n----------------------------------------\n\nTITLE: Listing GenesisConfig Presets\nDESCRIPTION: Command to list all available GenesisConfig presets provided by the runtime.\nSOURCE: https://github.com/paritytech/polkadot-sdk/blob/master/substrate/bin/utils/chain-spec-builder/README.md#2025-04-21_snippet_4\n\nLANGUAGE: rust\nCODE:\n```\nchain-spec-builder list-presets -r $runtime_path\n```\n\n----------------------------------------\n\nTITLE: Installing Parachain Template Node\nDESCRIPTION: Command to install the parachain template node binary.\nSOURCE: https://github.com/paritytech/polkadot-sdk/blob/master/templates/parachain/README.docify.md#2025-04-21_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\ncargo install --path node --locked\n```\n\n----------------------------------------\n\nTITLE: Rust Documentation Example - Poor Trait Documentation\nDESCRIPTION: Shows an example of redundant documentation that adds no value beyond the trait name itself.\nSOURCE: https://github.com/paritytech/polkadot-sdk/blob/master/docs/contributor/DOCUMENTATION_GUIDELINES.md#2025-04-21_snippet_3\n\nLANGUAGE: rust\nCODE:\n```\n/// Sends request and handles the response.\ntrait SendRequestAndHandleResponse {\n\n}\n```\n\n----------------------------------------\n\nTITLE: Visualizing Horizontal Message Passing (HMP) in Polkadot with DOT\nDESCRIPTION: A DOT diagram showing Horizontal Message Passing between two parachains via XCMP, with the Relay Chain providing authentication. The diagram also includes the Vertical Message Passing components (DMP and UMP) for context.\nSOURCE: https://github.com/paritytech/polkadot-sdk/blob/master/polkadot/roadmap/implementers-guide/src/messaging.md#2025-04-21_snippet_1\n\nLANGUAGE: dot\nCODE:\n```\ndigraph {\n    rc [shape=Mdiamond color=\"gray\" fontcolor=\"gray\" label=\"Relay Chain\"];\n\n    subgraph {\n        rank = \"same\"\n        p1 [shape=box label = \"Parachain 1\"];\n        p2 [shape=box label = \"Parachain 2\"];\n    }\n\n    rc -> p1 [label=\"DMP\" color=\"gray\" fontcolor=\"gray\"];\n    p1 -> rc [label=\"UMP\" color=\"gray\" fontcolor=\"gray\"];\n\n    rc -> p2 [label=\"DMP\" color=\"gray\" fontcolor=\"gray\"];\n    p2 -> rc [label=\"UMP\" color=\"gray\" fontcolor=\"gray\"];\n\n    p2 -> p1 [dir=both label=\"XCMP\"];\n}\n```\n\n----------------------------------------\n\nTITLE: Building Polkadot Worker Binaries\nDESCRIPTION: Command to build the required worker binaries (polkadot-execute-worker and polkadot-prepare-worker) before running tests for the polkadot-node-metrics crate.\nSOURCE: https://github.com/paritytech/polkadot-sdk/blob/master/polkadot/node/metrics/README.md#2025-04-21_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\ncargo build --bin polkadot-execute-worker --bin polkadot-prepare-worker\n```\n\n----------------------------------------\n\nTITLE: Generating Chain Specification\nDESCRIPTION: Command to create a chain specification file using the chain-spec-builder tool\nSOURCE: https://github.com/paritytech/polkadot-sdk/blob/master/templates/parachain/README.md#2025-04-21_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nchain-spec-builder create --relay-chain \"rococo-local\" --para-id {{PARACHAIN_ID}} --runtime \\\n    target/release/wbuild/parachain-template-runtime/parachain_template_runtime.wasm named-preset development\n```\n\n----------------------------------------\n\nTITLE: Installing Persistent Shell Completion for Substrate CLI\nDESCRIPTION: Sets up persistent shell auto-completion by creating a completion directory, copying the bash completion script, and configuring it to load automatically in the bash profile.\nSOURCE: https://github.com/paritytech/polkadot-sdk/blob/master/substrate/bin/node/cli/doc/shell-completion.md#2025-04-21_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nCOMPL_DIR=$HOME/.completion\nmkdir -p $COMPL_DIR\ncp -f target/release/completion-scripts/substrate.bash $COMPL_DIR/\necho \"source $COMPL_DIR/substrate.bash\" >> $HOME/.bash_profile\nsource $HOME/.bash_profile\n```\n\n----------------------------------------\n\nTITLE: Renouncing Candidacy in Rust\nDESCRIPTION: This code snippet shows the function call for a candidate to renounce their candidacy. It refunds the candidacy bond to the caller.\nSOURCE: https://github.com/paritytech/polkadot-sdk/blob/master/substrate/frame/elections-phragmen/README.md#2025-04-21_snippet_3\n\nLANGUAGE: rust\nCODE:\n```\nModule::renounce_candidacy\n```\n\n----------------------------------------\n\nTITLE: Building Polkadot from Source\nDESCRIPTION: Builds the Polkadot codebase in release mode. This is the first step required before running validators or collators.\nSOURCE: https://github.com/paritytech/polkadot-sdk/blob/master/polkadot/parachain/test-parachains/adder/collator/README.md#2025-04-21_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\ncargo build --release\n```\n\n----------------------------------------\n\nTITLE: NFTs Pallet Call Enum\nDESCRIPTION: Reference to the enum containing all dispatchable functions supported by the NFTs pallet.\nSOURCE: https://github.com/paritytech/polkadot-sdk/blob/master/substrate/frame/nfts/README.md#2025-04-21_snippet_1\n\nLANGUAGE: rust\nCODE:\n```\nnfts::Call\n```\n\n----------------------------------------\n\nTITLE: Generated Weight Constants\nDESCRIPTION: Generated Rust code showing the calculated weight constants for read and write operations with detailed statistics.\nSOURCE: https://github.com/paritytech/polkadot-sdk/blob/master/substrate/utils/frame/benchmarking-cli/src/storage/README.md#2025-04-21_snippet_3\n\nLANGUAGE: rust\nCODE:\n```\n/// Time to read one storage item.\n/// Calculated by multiplying the *Average* of all values with `1.1` and adding `0`.\n///\n/// Stats [NS]:\n///   Min, Max: 4_611, 1_217_259\n///   Average:  14_262\n///   Median:   14_190\n///   Std-Dev:  3035.79\n///\n/// Percentiles [NS]:\n///   99th: 18_270\n///   95th: 16_190\n///   75th: 14_819\nread: 14_262 * constants::WEIGHT_REF_TIME_PER_NANOS,\n\n/// Time to write one storage item.\n/// Calculated by multiplying the *Average* of all values with `1.1` and adding `0`.\n///\n/// Stats [NS]:\n///   Min, Max: 12_969, 13_282_577\n///   Average:  71_347This works under the assumption that the *average* read a\n///   Median:   69_499\n///   Std-Dev:  25145.27\n///\n/// Percentiles [NS]:\n///   99th: 135_839\n///   95th: 106_129\n///   75th: 79_239\nwrite: 71_347 * constants::WEIGHT_REF_TIME_PER_NANOS,\n```\n\n----------------------------------------\n\nTITLE: Initializing Parachain ID Constant in Rust\nDESCRIPTION: Defines the hardcoded parachain ID constant used throughout the template\nSOURCE: https://github.com/paritytech/polkadot-sdk/blob/master/templates/parachain/README.md#2025-04-21_snippet_0\n\nLANGUAGE: rust\nCODE:\n```\npub const PARACHAIN_ID: u32 = 1000;\n```\n\n----------------------------------------\n\nTITLE: NFTs Pallet Config Interface\nDESCRIPTION: Reference to the core NFTs pallet configuration trait that must be implemented by the runtime.\nSOURCE: https://github.com/paritytech/polkadot-sdk/blob/master/substrate/frame/nfts/README.md#2025-04-21_snippet_0\n\nLANGUAGE: rust\nCODE:\n```\nnfts::Config\n```\n\n----------------------------------------\n\nTITLE: Generating Raw Storage Chain Spec with Full Config\nDESCRIPTION: Command to generate a raw storage chain spec using a full genesis config JSON file.\nSOURCE: https://github.com/paritytech/polkadot-sdk/blob/master/substrate/bin/utils/chain-spec-builder/README.md#2025-04-21_snippet_7\n\nLANGUAGE: rust\nCODE:\n```\nchain-spec-builder -c \"/dev/stdout\" create -s -r $runtime_path full \"tests/input/full.json\"\n```\n\n----------------------------------------\n\nTITLE: Visualizing Subsystem Message Traffic with DOT Graph\nDESCRIPTION: A graphical representation of message traffic between subsystems in the Polkadot node implementation. The diagram shows which subsystems send messages to which other subsystems, with special indicators for messages that include a response channel (filled diamond arrowhead) versus those that don't (open triangle arrowhead).\nSOURCE: https://github.com/paritytech/polkadot-sdk/blob/master/polkadot/roadmap/implementers-guide/src/node/subsystems-and-jobs.md#2025-04-21_snippet_0\n\nLANGUAGE: dot\nCODE:\n```\ndigraph {\n    rankdir=LR;\n    node [shape = oval];\n    concentrate = true;\n\n    av_store    [label = \"Availability Store\"]\n    avail_dist  [label = \"Availability Distribution\"]\n    avail_rcov  [label = \"Availability Recovery\"]\n    bitf_dist   [label = \"Bitfield Distribution\"]\n    bitf_sign   [label = \"Bitfield Signing\"]\n    cand_back   [label = \"Candidate Backing\"]\n    cand_sel    [label = \"Candidate Selection\"]\n    cand_val    [label = \"Candidate Validation\"]\n    chn_api     [label = \"Chain API\"]\n    coll_gen    [label = \"Collation Generation\"]\n    coll_prot   [label = \"Collator Protocol\"]\n    net_brdg    [label = \"Network Bridge\"]\n    pov_dist    [label = \"PoV Distribution\"]\n    provisioner [label = \"Provisioner\"]\n    runt_api    [label = \"Runtime API\"]\n    stmt_dist   [label = \"Statement Distribution\"]\n\n    av_store    -> runt_api     [arrowhead = \"diamond\", label = \"Request::CandidateEvents\"]\n    av_store    -> chn_api      [arrowhead = \"diamond\", label = \"BlockNumber\"]\n    av_store    -> chn_api      [arrowhead = \"diamond\", label = \"BlockHeader\"]\n    av_store    -> runt_api     [arrowhead = \"diamond\", label = \"Request::Validators\"]\n    av_store    -> chn_api      [arrowhead = \"diamond\", label = \"FinalizedBlockHash\"]\n\n    avail_dist  -> net_brdg     [arrowhead = \"onormal\", label = \"Request::SendValidationMessages\"]\n    avail_dist  -> runt_api     [arrowhead = \"diamond\", label = \"Request::AvailabilityCores\"]\n    avail_dist  -> net_brdg     [arrowhead = \"onormal\", label = \"ReportPeer\"]\n    avail_dist  -> av_store     [arrowhead = \"diamond\", label = \"QueryDataAvailability\"]\n    avail_dist  -> av_store     [arrowhead = \"diamond\", label = \"QueryChunk\"]\n    avail_dist  -> av_store     [arrowhead = \"diamond\", label = \"StoreChunk\"]\n    avail_dist  -> runt_api     [arrowhead = \"diamond\", label = \"Request::Validators\"]\n    avail_dist  -> chn_api      [arrowhead = \"diamond\", label = \"Ancestors\"]\n    avail_dist  -> runt_api     [arrowhead = \"diamond\", label = \"Request::SessionIndexForChild\"]\n\n    avail_rcov  -> net_brdg     [arrowhead = \"onormal\", label = \"ReportPeer\"]\n    avail_rcov  -> av_store     [arrowhead = \"diamond\", label = \"QueryChunk\"]\n    avail_rcov  -> net_brdg     [arrowhead = \"diamond\", label = \"ConnectToValidators\"]\n    avail_rcov  -> net_brdg     [arrowhead = \"onormal\", label = \"SendValidationMessage::Chunk\"]\n    avail_rcov  -> net_brdg     [arrowhead = \"onormal\", label = \"SendValidationMessage::RequestChunk\"]\n\n    bitf_dist   -> net_brdg     [arrowhead = \"onormal\", label = \"ReportPeer\"]\n    bitf_dist   -> provisioner  [arrowhead = \"onormal\", label = \"ProvisionableData::Bitfield\"]\n    bitf_dist   -> net_brdg     [arrowhead = \"onormal\", label = \"SendValidationMessage\"]\n    bitf_dist   -> net_brdg     [arrowhead = \"onormal\", label = \"SendValidationMessage\"]\n    bitf_dist   -> runt_api     [arrowhead = \"diamond\", label = \"Request::Validatiors\"]\n    bitf_dist   -> runt_api     [arrowhead = \"diamond\", label = \"Request::SessionIndexForChild\"]\n\n    bitf_sign   -> av_store     [arrowhead = \"diamond\", label = \"QueryChunkAvailability\"]\n    bitf_sign   -> runt_api     [arrowhead = \"diamond\", label = \"Request::AvailabilityCores\"]\n    bitf_sign   -> bitf_dist    [arrowhead = \"onormal\", label = \"DistributeBitfield\"]\n\n    cand_back   -> av_store     [arrowhead = \"diamond\", label = \"StoreAvailableData\"]\n    cand_back   -> pov_dist     [arrowhead = \"diamond\", label = \"FetchPoV\"]\n    cand_back   -> cand_val     [arrowhead = \"diamond\", label = \"ValidateFromChainState\"]\n    cand_back   -> cand_sel     [arrowhead = \"onormal\", label = \"Invalid\"]\n    cand_back   -> provisioner  [arrowhead = \"onormal\", label = \"ProvisionableData::MisbehaviorReport\"]\n    cand_back   -> provisioner  [arrowhead = \"onormal\", label = \"ProvisionableData::BackedCandidate\"]\n    cand_back   -> pov_dist     [arrowhead = \"onormal\", label = \"DistributePoV\"]\n    cand_back   -> stmt_dist    [arrowhead = \"onormal\", label = \"Share\"]\n\n    cand_sel    -> coll_prot    [arrowhead = \"diamond\", label = \"FetchCollation\"]\n    cand_sel    -> cand_back    [arrowhead = \"onormal\", label = \"Second\"]\n\n    cand_val    -> runt_api     [arrowhead = \"diamond\", label = \"Request::PersistedValidationData\"]\n    cand_val    -> runt_api     [arrowhead = \"diamond\", label = \"Request::ValidationCode\"]\n    cand_val    -> runt_api     [arrowhead = \"diamond\", label = \"Request::CheckValidationOutputs\"]\n\n    coll_gen    -> coll_prot    [arrowhead = \"onormal\", label = \"DistributeCollation\"]\n\n    coll_prot   -> net_brdg     [arrowhead = \"onormal\", label = \"ReportPeer\"]\n    coll_prot   -> net_brdg     [arrowhead = \"onormal\", label = \"Declare\"]\n    coll_prot   -> net_brdg     [arrowhead = \"onormal\", label = \"AdvertiseCollation\"]\n    coll_prot   -> net_brdg     [arrowhead = \"onormal\", label = \"Collation\"]\n    coll_prot   -> net_brdg     [arrowhead = \"onormal\", label = \"RequestCollation\"]\n    coll_prot   -> cand_sel     [arrowhead = \"onormal\", label = \"Collation\"]\n\n    net_brdg    -> avail_dist   [arrowhead = \"onormal\", label = \"NetworkBridgeUpdate\"]\n    net_brdg    -> bitf_dist    [arrowhead = \"onormal\", label = \"NetworkBridgeUpdate\"]\n    net_brdg    -> pov_dist     [arrowhead = \"onormal\", label = \"NetworkBridgeUpdate\"]\n    net_brdg    -> stmt_dist    [arrowhead = \"onormal\", label = \"NetworkBridgeUpdate\"]\n    net_brdg    -> coll_prot    [arrowhead = \"onormal\", label = \"NetworkBridgeUpdate\"]\n\n    pov_dist    -> net_brdg     [arrowhead = \"onormal\", label = \"SendValidationMessage\"]\n    pov_dist    -> net_brdg     [arrowhead = \"onormal\", label = \"ReportPeer\"]\n\n    provisioner -> cand_back    [arrowhead = \"diamond\", label = \"GetBackedCandidates\"]\n    provisioner -> chn_api      [arrowhead = \"diamond\", label = \"BlockNumber\"]\n\n    stmt_dist   -> net_brdg     [arrowhead = \"onormal\", label = \"SendValidationMessage\"]\n    stmt_dist   -> net_brdg     [arrowhead = \"onormal\", label = \"ReportPeer\"]\n    stmt_dist   -> cand_back    [arrowhead = \"onormal\", label = \"Statement\"]\n    stmt_dist   -> runt_api     [arrowhead = \"onormal\", label = \"Request::Validators\"]\n    stmt_dist   -> runt_api     [arrowhead = \"onormal\", label = \"Request::SessionIndexForChild\"]\n}\n```\n\n----------------------------------------\n\nTITLE: Rejecting Inbound Messages in Rust using ForbidInboundMessages\nDESCRIPTION: This snippet demonstrates how to use the ForbidInboundMessages structure to reject all inbound messages in a Polkadot SDK runtime.\nSOURCE: https://github.com/paritytech/polkadot-sdk/blob/master/bridges/modules/messages/README.md#2025-04-21_snippet_5\n\nLANGUAGE: rust\nCODE:\n```\nbp_messages::target_chain::ForbidInboundMessages\n```\n\n----------------------------------------\n\nTITLE: Domain 1024 Uncompressed Ring Verifier Key Computation\nDESCRIPTION: Time complexity formula for ring verifier key computation with domain size 1024 without compression. Base time of 54.07ms plus 98.53µs per validator.\nSOURCE: https://github.com/paritytech/polkadot-sdk/blob/master/substrate/frame/sassafras/src/data/benchmark-results.md#2025-04-21_snippet_4\n\nLANGUAGE: plaintext\nCODE:\n```\nTime ~=    54070\n    + x    98.53\n              µs\n```\n\n----------------------------------------\n\nTITLE: Declaring MIT-0 License\nDESCRIPTION: Simple declaration of the MIT-0 license for the project. The MIT-0 license is a variant of the MIT license that removes the attribution requirement while maintaining the same permissions.\nSOURCE: https://github.com/paritytech/polkadot-sdk/blob/master/templates/solochain/pallets/template/README.md#2025-04-21_snippet_0\n\nLANGUAGE: text\nCODE:\n```\nLicense: MIT-0\n```\n\n----------------------------------------\n\nTITLE: Installing Chain Spec Builder\nDESCRIPTION: Command to install the staging-chain-spec-builder tool using Cargo. This tool is required to generate chain specs for Omni Node.\nSOURCE: https://github.com/paritytech/polkadot-sdk/blob/master/cumulus/polkadot-omni-node/README.md#2025-04-21_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\ncargo install staging-chain-spec-builder --locked\n```\n\n----------------------------------------\n\nTITLE: Installing FRAME Omni-Bencher CLI\nDESCRIPTION: Command to install the standalone FRAME benchmarking CLI tool from local source repository with production profile.\nSOURCE: https://github.com/paritytech/polkadot-sdk/blob/master/substrate/utils/frame/benchmarking-cli/README.md#2025-04-21_snippet_1\n\nLANGUAGE: sh\nCODE:\n```\ncargo install --locked --path substrate/utils/frame/omni-bencher --profile=production\n```\n\n----------------------------------------\n\nTITLE: Updating Rust Toolchain for Development\nDESCRIPTION: Command to update the flake.lock file after modifying rust-toolchain.toml to upgrade the Rust toolchain version.\nSOURCE: https://github.com/paritytech/polkadot-sdk/blob/master/bridges/snowbridge/README.md#2025-04-21_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\nnix flake lock --update-input rust-overlay\n```\n\n----------------------------------------\n\nTITLE: Defining Scheduler Pallet Data Structures in Rust\nDESCRIPTION: This Rust code snippet defines the core data structures used in the Scheduler Pallet, including ParathreadClaim, ParathreadEntry, QueuedParathread, ParathreadQueue, CoreOccupied, AssignmentKind, and CoreAssignment.\nSOURCE: https://github.com/paritytech/polkadot-sdk/blob/master/polkadot/roadmap/implementers-guide/src/runtime/scheduler.md#2025-04-21_snippet_2\n\nLANGUAGE: rust\nCODE:\n```\nstruct ParathreadClaim(ParaId, CollatorId);\n\nstruct ParathreadEntry {\n  claim: ParathreadClaim,\n  retries: u32,\n}\n\nstruct QueuedParathread {\n  claim: ParathreadEntry,\n  /// offset within the set of parathreads (on-demand parachains) ranged `0..config.parathread_cores`.\n  core_offset: u32,\n}\n\nstruct ParathreadQueue {\n  queue: Vec<QueuedParathread>,\n  /// offset within the set of parathreads (on-demand parachains) ranged `0..config.parathread_cores`.\n  next_core_offset: u32,\n}\n\nenum CoreOccupied {\n  // On-demand parachain\n  Parathread(ParathreadEntry), // claim & retries\n  Parachain,\n}\n\nenum AssignmentKind {\n  Parachain,\n  // On-demand parachain\n  Parathread(CollatorId, u32),\n}\n\nstruct CoreAssignment {\n  core: CoreIndex,\n  para_id: ParaId,\n  kind: AssignmentKind,\n  group_idx: GroupIndex,\n}\n// reasons a core might be freed.\nenum FreedReason {\n  Concluded,\n  TimedOut,\n}\n```\n\n----------------------------------------\n\nTITLE: Installing mdBook Tools and Building the Implementers' Guide\nDESCRIPTION: Commands to install mdBook and its extensions (linkcheck, graphviz, mermaid, last-changed) via cargo, then serve the implementers' guide documentation on a local web server.\nSOURCE: https://github.com/paritytech/polkadot-sdk/blob/master/polkadot/roadmap/implementers-guide/README.md#2025-04-21_snippet_1\n\nLANGUAGE: sh\nCODE:\n```\ncargo install mdbook mdbook-linkcheck mdbook-graphviz mdbook-mermaid mdbook-last-changed --locked\nmdbook serve roadmap/implementers-guide\n```\n\n----------------------------------------\n\nTITLE: Glutton Pallet Description and Functionality\nDESCRIPTION: An overview of the Glutton pallet, explaining its purpose, functionality, and usage for consuming blockchain resources and testing system limits.\nSOURCE: https://github.com/paritytech/polkadot-sdk/blob/master/substrate/frame/glutton/README.md#2025-04-21_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n# Glutton Pallet\n\nThe `Glutton` pallet gets the name from its property to consume vast amounts of resources. It can be used to push\npara-chains and their relay-chains to the limits. This is good for testing out theoretical limits in a practical way.\n\nThe `Glutton` can be set to consume a fraction of the available block length and unused weight of a chain. It\naccomplishes this by filling the block length up to a ration and utilizing the `on_idle` hook to consume a\nspecific ration of the remaining weight. The rations can be set via `set_compute`, `set_storage` and `set_block_length`.\nInitially the `Glutton` needs to be initialized once with `initialize_pallet`.\n```\n\n----------------------------------------\n\nTITLE: Domain 2048 Compressed Ticket Verification Timing\nDESCRIPTION: Time complexity formula for ticket verification with domain size 2048 with compression. Base time of 26.25ms plus 11.46ms per ticket.\nSOURCE: https://github.com/paritytech/polkadot-sdk/blob/master/substrate/frame/sassafras/src/data/benchmark-results.md#2025-04-21_snippet_3\n\nLANGUAGE: plaintext\nCODE:\n```\nTime ~=    26250\n    + x    11460\n              µs\n```\n\n----------------------------------------\n\nTITLE: Supported Chain API Queries - Markdown\nDESCRIPTION: Lists the supported query types that can be made to the Chain API subsystem. These queries allow retrieval of block-related information and chain state data.\nSOURCE: https://github.com/paritytech/polkadot-sdk/blob/master/polkadot/roadmap/implementers-guide/src/node/utility/chain-api.md#2025-04-21_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n* Block hash to number\n* Block hash to header\n* Block weight\n* Finalized block number to hash\n* Last finalized block number\n* Ancestors\n```\n\n----------------------------------------\n\nTITLE: Updating Parameter Destructuring for new_light_base Function in Rust\nDESCRIPTION: This code shows a modification to the destructuring pattern for the result of the new_light_base function call. The change adds an additional parameter in the destructuring, changing from five to six parameters, while maintaining the same component construction with TestNetComponents.\nSOURCE: https://github.com/paritytech/polkadot-sdk/blob/master/substrate/docs/Upgrading-2.0-to-3.0.md#2025-04-21_snippet_13\n\nLANGUAGE: rust\nCODE:\n```\nOk(sc_service_test::TestNetComponents::new(task_manager, client, network, transaction_pool))\n\t\t\t},\n\t\t\t|config| {\n-\t\t\t\tlet (keep_alive, _, client, network, transaction_pool) = new_light_base(config)?;\n+\t\t\t\tlet (keep_alive, _, _, client, network, transaction_pool) = new_light_base(config)?;\n\t\t\t\tOk(sc_service_test::TestNetComponents::new(keep_alive, client, network, transaction_pool))\n\t\t\t},\n\t\t\tvec![\n```\n\n----------------------------------------\n\nTITLE: Root Testing Pallet Warning Notice\nDESCRIPTION: Warning message indicating that this pallet is strictly for testing purposes and should not be used in production environments.\nSOURCE: https://github.com/paritytech/polkadot-sdk/blob/master/substrate/frame/root-testing/README.md#2025-04-21_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n# Root Testing Pallet\\n\\nPallet that contains extrinsics that can be useful in testing.\\n\\nNOTE: This pallet should only be used for testing purposes and should not be used in production runtimes!\n```\n\n----------------------------------------\n\nTITLE: Updating Polkadot CLI Shell Completion\nDESCRIPTION: This script updates the Polkadot CLI completion script when a new version is built. It replaces the existing script and reloads the bash profile.\nSOURCE: https://github.com/paritytech/polkadot-sdk/blob/master/polkadot/doc/shell-completion.md#2025-04-21_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nCOMPL_DIR=$HOME/.completion\nmkdir -p $COMPL_DIR\ncp -f target/release/completion-scripts/polkadot.bash $COMPL_DIR/\nsource $HOME/.bash_profile\n```\n\n----------------------------------------\n\nTITLE: Generating Vanity Addresses\nDESCRIPTION: Command to generate a vanity address containing a specific pattern for a given network.\nSOURCE: https://github.com/paritytech/polkadot-sdk/blob/master/substrate/bin/utils/subkey/README.md#2025-04-21_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\nsubkey vanity --network polkadot --pattern bob\n```\n\n----------------------------------------\n\nTITLE: Starting Substrate Development Chain\nDESCRIPTION: Command to initialize a Substrate development chain for benchmarking purposes, storing chain data in a temporary directory.\nSOURCE: https://github.com/paritytech/polkadot-sdk/blob/master/substrate/utils/frame/benchmarking-cli/src/block/README.md#2025-04-21_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\ncargo run --profile=production -- --dev -d /tmp/dev\n```\n\n----------------------------------------\n\nTITLE: Installing Build Dependencies for Arch Linux\nDESCRIPTION: Commands to install the necessary build dependencies for Substrate development on Arch Linux, including curl, git, and clang.\nSOURCE: https://github.com/paritytech/polkadot-sdk/blob/master/templates/solochain/docs/rust-setup.md#2025-04-21_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\npacman -Syu --needed --noconfirm curl git clang\n```\n\n----------------------------------------\n\nTITLE: Changelog Format in Markdown\nDESCRIPTION: Structured changelog entries documenting changes across versions v14-v16 of the pallet-staking system, including storage migrations, new implementations, and deprecated features.\nSOURCE: https://github.com/paritytech/polkadot-sdk/blob/master/substrate/frame/staking/CHANGELOG.md#2025-04-21_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n# Changelog\n\nAll notable changes and migrations to pallet-staking will be documented in this file.\n\nThe format is loosely based\non [Keep a Changelog](https://keepachangelog.com/en/1.0.0/). We maintain a\nsingle integer version number for staking pallet to keep track of all storage\nmigrations.\n\n## [v16]\n\n\n### Added\n\n- New default implementation of `DisablingStrategy` - `UpToLimitWithReEnablingDisablingStrategy`.\n  Same as `UpToLimitDisablingStrategy` except when a limit (1/3 default) is reached. When limit is\n  reached the offender is only disabled if his offence is greater or equal than some other already\n  disabled offender. The smallest possible offender is re-enabled to make space for the new greater\n  offender. A limit should thus always be respected.\n- `DisabledValidators` changed format to include severity of the offence.\n\n## [v15]\n\n### Added\n\n- New trait `DisablingStrategy` which is responsible for making a decision which offenders should be\n  disabled on new offence.\n- Default implementation of `DisablingStrategy` - `UpToLimitDisablingStrategy`. It\n  disables each new offender up to a threshold (1/3 by default). Offenders are not runtime disabled for\n  offences in previous era(s). But they will be low-priority node-side disabled for dispute initiation.\n- `OffendingValidators` storage item is replaced with `DisabledValidators`. The former keeps all\n  offenders and if they are disabled or not. The latter just keeps a list of all offenders as they\n  are disabled by default.\n\n### Deprecated\n\n- `enum DisableStrategy` is no longer needed because disabling is not related to the type of the\n  offence anymore. A decision if a offender is disabled or not is made by a `DisablingStrategy`\n  implementation.\n\n## [v14]\n\n### Added\n\n- New item `ErasStakersPaged` that keeps up to `MaxExposurePageSize`\n  individual nominator exposures by era, validator and page.\n- New item `ErasStakersOverview` complementary to `ErasStakersPaged` which keeps\n  state of own and total stake of the validator across pages.\n- New item `ClaimedRewards` to support paged rewards payout.\n\n### Deprecated\n\n- `ErasStakers` and `ErasStakersClipped` is deprecated, will not be used any longer for the exposures of the new era\n  post v14 and can be removed after 84 eras once all the exposures are stale.\n- Field `claimed_rewards` in item `Ledger` is renamed\n  to `legacy_claimed_rewards` and can be removed after 84 eras.\n\n[v14]: https://github.com/paritytech/substrate/pull/13498\n```\n\n----------------------------------------\n\nTITLE: Basic Runtime Dependencies Configuration in TOML\nDESCRIPTION: Example showing how to configure dependencies with runtime features and tracing support in Cargo.toml\nSOURCE: https://github.com/paritytech/polkadot-sdk/blob/master/umbrella/README.md#2025-04-21_snippet_0\n\nLANGUAGE: toml\nCODE:\n```\n[dependencies]\npolkadot-sdk = { version = \"0.12.0\", features = [\"runtime\", \"serde\"], default-features = false }\n\n[features]\nruntime-benchmarks = [\"polkadot-sdk/runtime-benchmarks\"]\nwith-tracing = [\"polkadot-sdk/with-tracing\"]\n```\n\n----------------------------------------\n\nTITLE: Defining ApprovalVote and SignedApprovalVote Structs in Rust\nDESCRIPTION: These structs represent an approval vote and a signed approval vote, respectively. The signed vote includes the validator index and signature.\nSOURCE: https://github.com/paritytech/polkadot-sdk/blob/master/polkadot/roadmap/implementers-guide/src/types/approval.md#2025-04-21_snippet_4\n\nLANGUAGE: rust\nCODE:\n```\nstruct ApprovalVote(Hash);\n\nstruct SignedApprovalVote {\n    vote: ApprovalVote,\n    validator: ValidatorIndex,\n    signature: ValidatorSignature,\n}\n```\n\n----------------------------------------\n\nTITLE: Formatting Multi-Line Features in TOML\nDESCRIPTION: Illustrates the proper formatting for multi-line feature entries in a Cargo.toml file. Shows how to handle long feature names and include comments.\nSOURCE: https://github.com/paritytech/polkadot-sdk/blob/master/substrate/docs/STYLE_GUIDE.md#2025-04-21_snippet_8\n\nLANGUAGE: toml\nCODE:\n```\n[features]\ndefault = [\n\t\"loooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooong\",\n\t# Comments go here as well ;)\n\t\"std\",\n]\n```\n\n----------------------------------------\n\nTITLE: Implementing DisputeStatement Enum in Rust\nDESCRIPTION: Defines an enum for dispute statements that can either be in favor of (Valid) or against (Invalid) a candidate's validity, with different statement kinds for each case.\nSOURCE: https://github.com/paritytech/polkadot-sdk/blob/master/polkadot/roadmap/implementers-guide/src/types/disputes.md#2025-04-21_snippet_1\n\nLANGUAGE: rust\nCODE:\n```\nenum DisputeStatement {\n    /// A valid statement, of the given kind\n    Valid(ValidDisputeStatementKind),\n    /// An invalid statement, of the given kind.\n    Invalid(InvalidDisputeStatementKind),\n}\n```\n\n----------------------------------------\n\nTITLE: Describing Ethereum System V2 Pallet in Markdown\nDESCRIPTION: This markdown documentation explains the purpose and functionality of the Ethereum System V2 pallet as part of BridgeHub, noting its interaction with the System Frontend pallet on AssetHub through extrinsics like 'register_token' and 'add_tip'.\nSOURCE: https://github.com/paritytech/polkadot-sdk/blob/master/bridges/snowbridge/pallets/system-v2/README.md#2025-04-21_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n# Ethereum System V2\n\nThis pallet is part of BridgeHub. Certain extrinsics in this pallet (like `register_token` and `add_tip`) will be called\nfrom the System Frontend pallet on AssetHub.\n```\n\n----------------------------------------\n\nTITLE: Building Rococo Runtime with Custom Epoch Duration\nDESCRIPTION: Command to build the Rococo wasm runtime blob with a customized epoch duration parameter. Uses ROCOCO_EPOCH_DURATION environment variable to configure the EpochDurationInBlocks parameter.\nSOURCE: https://github.com/paritytech/polkadot-sdk/blob/master/polkadot/runtime/rococo/README.md#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nROCOCO_EPOCH_DURATION=10 ./polkadot/scripts/build-only-wasm.sh rococo-runtime /path/to/output/directory/\n```\n\n----------------------------------------\n\nTITLE: Updating Substrate Shell Completion\nDESCRIPTION: Updates the existing shell completion script to match a newly built version of Substrate by copying the new completion script and reloading the bash profile.\nSOURCE: https://github.com/paritytech/polkadot-sdk/blob/master/substrate/bin/node/cli/doc/shell-completion.md#2025-04-21_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nCOMPL_DIR=$HOME/.completion\nmkdir -p $COMPL_DIR\ncp -f target/release/completion-scripts/substrate.bash $COMPL_DIR/\nsource $HOME/.bash_profile\n```\n\n----------------------------------------\n\nTITLE: Running PR Documentation Command in GitHub Pull Requests\nDESCRIPTION: Command to generate a prdoc for a PR with specified audience, version bump, and force options.\nSOURCE: https://github.com/paritytech/polkadot-sdk/blob/master/docs/contributor/commands-readme.md#2025-04-21_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n/cmd prdoc --audience runtime_dev runtime_user --bump patch --force\n```\n\n----------------------------------------\n\nTITLE: Zombienet Configuration Example\nDESCRIPTION: Sample TOML configuration for Zombienet showing chain specification setup\nSOURCE: https://github.com/paritytech/polkadot-sdk/blob/master/templates/minimal/README.md#2025-04-21_snippet_7\n\nLANGUAGE: toml\nCODE:\n```\n# ...\nchain = \"dev\"\nchain_spec_path = \"<TO BE UPDATED WITH A VALID PATH>\"\ndefault_args = [\"--dev\"]\n# ..\n```\n\n----------------------------------------\n\nTITLE: Running PR Format Command in GitHub Pull Requests\nDESCRIPTION: Command to format code in a pull request. It commits back with the formatted code (fmt) and configs (taplo).\nSOURCE: https://github.com/paritytech/polkadot-sdk/blob/master/docs/contributor/commands-readme.md#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n/cmd fmt\n```\n\n----------------------------------------\n\nTITLE: Executing Benchmark Machine Command in Polkadot SDK\nDESCRIPTION: Command to run the benchmark machine tool with production profile in development mode.\nSOURCE: https://github.com/paritytech/polkadot-sdk/blob/master/substrate/utils/frame/benchmarking-cli/src/machine/README.md#2025-04-21_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\ncargo run --profile=production -- benchmark machine --dev\n```\n\n----------------------------------------\n\nTITLE: Running Zombienet Test with Native Provider in Bash\nDESCRIPTION: This command demonstrates how to run a specific Zombienet test using the native provider. It executes the '0001-parachains-pvf.zndsl' test script.\nSOURCE: https://github.com/paritytech/polkadot-sdk/blob/master/polkadot/zombienet_tests/README.md#2025-04-21_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nzombienet test -p native 0001-parachains-pvf.zndsl\n```\n\n----------------------------------------\n\nTITLE: Democracy pallet configuration trait and call enum references\nDESCRIPTION: Links to the Rust documentation for the main configuration trait and call enum used in the Democracy pallet implementation.\nSOURCE: https://github.com/paritytech/polkadot-sdk/blob/master/substrate/frame/democracy/README.md#2025-04-21_snippet_0\n\nLANGUAGE: rust\nCODE:\n```\ndemocracy::Config\nCall\n```\n\n----------------------------------------\n\nTITLE: Running Polkadot SDK Workspace Generator Script\nDESCRIPTION: Command to execute the Python script that generates and updates the polkadot-sdk workspace. Requires toml and cargo-workspace>=2.2.6 Python packages to be installed. The script takes SDK path and version parameters.\nSOURCE: https://github.com/paritytech/polkadot-sdk/blob/master/umbrella/MAINTAIN.md#2025-04-21_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\npython3 ./scripts/generate-umbrella.py --sdk . --version 0.1.0\n```\n\n----------------------------------------\n\nTITLE: Launching Approval Work for Candidate in Polkadot\nDESCRIPTION: This section describes the process of launching approval work for a candidate. It includes steps for recovering available data, validating the candidate, and initiating a dispute if necessary.\nSOURCE: https://github.com/paritytech/polkadot-sdk/blob/master/polkadot/roadmap/implementers-guide/src/node/approval/approval-voting.md#2025-04-21_snippet_11\n\nLANGUAGE: markdown\nCODE:\n```\n#### Launch Approval Work\n\n* Requires `(SessionIndex, SessionInfo, CandidateReceipt, ValidatorIndex, backing_group, block_hash, candidate_index)`\n* Extract the public key of the `ValidatorIndex` from the `SessionInfo` for the session.\n* Issue an `AvailabilityRecoveryMessage::RecoverAvailableData(candidate, session_index, Some(backing_group),\nSome(core_index), response_sender)`\n* Load the historical validation code of the parachain by dispatching a\n  `RuntimeApiRequest::ValidationCodeByHash(descriptor.validation_code_hash)` against the state of `block_hash`.\n* Spawn a background task with a clone of `background_tx`\n  * Wait for the available data\n  * Issue a `CandidateValidationMessage::ValidateFromExhaustive` message with `APPROVAL_EXECUTION_TIMEOUT` as the\n    timeout parameter.\n  * Wait for the result of validation\n  * Check that the result of validation, if valid, matches the commitments in the receipt.\n  * If valid, issue a message on `background_tx` detailing the request.\n  * If any of the data, the candidate, or the commitments are invalid, issue on `background_tx` a\n    [`DisputeCoordinatorMessage::IssueLocalStatement`](../../types/overseer-protocol.md#dispute-coordinator-message)\n    with `valid = false` to initiate a dispute.\n```\n\n----------------------------------------\n\nTITLE: Executing Polkadot Block Benchmark\nDESCRIPTION: Command to benchmark the execution of 10 Polkadot blocks using ParityDB, comparing predicted weights against actual resource usage.\nSOURCE: https://github.com/paritytech/polkadot-sdk/blob/master/substrate/utils/frame/benchmarking-cli/src/block/README.md#2025-04-21_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\ncargo run --profile=production -- benchmark block --from 9939453 --to 9939462 --db paritydb\n```\n\n----------------------------------------\n\nTITLE: Describing XCM-Emulator Tool in Markdown\nDESCRIPTION: This markdown snippet provides an overview of the XCM-Emulator tool, explaining its purpose, advantages, and usage in the context of the Polkadot SDK project. It details how the tool emulates XCM program execution using pre-configured runtimes for various networks.\nSOURCE: https://github.com/paritytech/polkadot-sdk/blob/master/cumulus/xcm/xcm-emulator/README.md#2025-04-21_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n# xcm-emulator\n\nXCM-Emulator is a tool to emulate XCM program execution using\npre-configured runtimes, including those used to run on live\nnetworks, such as Kusama, Polkadot, Asset Hubs, et cetera.\nThis allows for testing cross-chain message passing and verifying\noutcomes, weights, and side-effects. It is faster than spinning up\na zombienet and as all the chains are in one process debugging using Clion is easy.\n```\n\n----------------------------------------\n\nTITLE: Implementing CollationResult Structure in Rust for Polkadot SDK\nDESCRIPTION: Defines the CollationResult struct which contains the built collation and an optional result sender that should be informed about a successfully seconded collation.\nSOURCE: https://github.com/paritytech/polkadot-sdk/blob/master/polkadot/roadmap/implementers-guide/src/node/collators/collation-generation.md#2025-04-21_snippet_1\n\nLANGUAGE: rust\nCODE:\n```\n/// Result of the [`CollatorFn`] invocation.\npub struct CollationResult {\n  /// The collation that was build.\n  pub collation: Collation,\n  /// An optional result sender that should be informed about a successfully seconded collation.\n  ///\n  /// There is no guarantee that this sender is informed ever about any result, it is completely okay to just drop it.\n  /// However, if it is called, it should be called with the signed statement of a parachain validator seconding the\n  /// collation.\n  pub result_sender: Option<oneshot::Sender<CollationSecondedSignal>>,\n}\n```\n\n----------------------------------------\n\nTITLE: Building Malus Container Image with Podman\nDESCRIPTION: This snippet shows how to build the Malus container image using Podman. It assumes the user is in the correct directory and has the latest changes from Polkadot and Substrate master branches.\nSOURCE: https://github.com/paritytech/polkadot-sdk/blob/master/polkadot/node/malus/README.md#2025-04-21_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\npwd # run this from the current dir\npodman build -t paritypr/malus:v1 -f Containerfile ../../..\n```\n\n----------------------------------------\n\nTITLE: Running UI Update Command in GitHub Pull Requests\nDESCRIPTION: Command to update UI with a specified Docker image and clean up comments.\nSOURCE: https://github.com/paritytech/polkadot-sdk/blob/master/docs/contributor/commands-readme.md#2025-04-21_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\n/cmd update-ui --image=docker.io/paritytech/ci-unified:bullseye-1.77.0-2024-04-10-v202407161507 --clean\n```\n\n----------------------------------------\n\nTITLE: Installing Polkadot Omni Bencher from GitHub\nDESCRIPTION: Command to install frame-omni-bencher directly from the Polkadot SDK GitHub repository.\nSOURCE: https://github.com/paritytech/polkadot-sdk/blob/master/substrate/utils/frame/omni-bencher/README.md#2025-04-21_snippet_1\n\nLANGUAGE: sh\nCODE:\n```\ncargo install --git https://github.com/paritytech/polkadot-sdk frame-omni-bencher --profile=production --locked\n```\n\n----------------------------------------\n\nTITLE: Build Command with Runtime Features\nDESCRIPTION: Shell command to build the project with runtime benchmarks and tracing features enabled\nSOURCE: https://github.com/paritytech/polkadot-sdk/blob/master/umbrella/README.md#2025-04-21_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\ncargo build --features \"runtime-benchmarks,with-tracing\"\n```\n\n----------------------------------------\n\nTITLE: Defining Core Approval Data Structures in Rust\nDESCRIPTION: Core data structures for managing approval voting state including tranche entries, assignments, and approval tracking.\nSOURCE: https://github.com/paritytech/polkadot-sdk/blob/master/polkadot/roadmap/implementers-guide/src/node/approval/approval-voting.md#2025-04-21_snippet_0\n\nLANGUAGE: rust\nCODE:\n```\nstruct TrancheEntry {\n    tranche: DelayTranche,\n    // assigned validators who have not yet approved, and the instant we received\n    // their assignment.\n    assignments: Vec<(ValidatorIndex, Tick)>,\n}\n\npub struct OurAssignment {\n\t/// Our assignment certificate.\n\tcert: AssignmentCertV2,\n\t/// The tranche for which the assignment refers to.\n\ttranche: DelayTranche,\n\t/// Our validator index for the session in which the candidates were included.\n\tvalidator_index: ValidatorIndex,\n\t/// Whether the assignment has been triggered already.\n\ttriggered: bool,\n}\n\npub struct ApprovalEntry {\n\ttranches: Vec<TrancheEntry>, // sorted ascending by tranche number.\n\tbacking_group: GroupIndex,\n\tour_assignment: Option<OurAssignment>,\n\tour_approval_sig: Option<ValidatorSignature>,\n\tassigned_validators: Bitfield, // `n_validators` bits.\n\tapproved: bool,\n}\n```\n\n----------------------------------------\n\nTITLE: Querying Substrate Metrics with cURL\nDESCRIPTION: Command to retrieve Prometheus metrics from a running Substrate node using the default port 9615.\nSOURCE: https://github.com/paritytech/polkadot-sdk/blob/master/substrate/utils/prometheus/README.md#2025-04-21_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\ncurl localhost:9615/metrics\n```\n\n----------------------------------------\n\nTITLE: Defining WireMessage Enum for Network Protocol Communication in Rust\nDESCRIPTION: Defines a WireMessage enum used for sending protocol messages and view updates over the network. It is generic over the message type M.\nSOURCE: https://github.com/paritytech/polkadot-sdk/blob/master/polkadot/roadmap/implementers-guide/src/node/utility/network-bridge.md#2025-04-21_snippet_0\n\nLANGUAGE: rust\nCODE:\n```\nenum WireMessage<M> {\n\tProtocolMessage(M),\n\tViewUpdate(View),\n}\n```\n\n----------------------------------------\n\nTITLE: VRF Assignment Parameters\nDESCRIPTION: Configuration parameters for validator assignments using VRF (Verifiable Random Function) including RelayVRFModulo and RelayVRFDelay settings. Defines checker counts and tranche widths.\nSOURCE: https://github.com/paritytech/polkadot-sdk/blob/master/polkadot/roadmap/implementers-guide/src/protocol-approval.md#2025-04-21_snippet_6\n\nLANGUAGE: markdown\nCODE:\n```\n- RelayVRFModulo/RelayVRFModuloCompact: Minimum 16 checkers\n- Expected checkers per tranche: Between 1 and 2 (less than 3)\n- Zeroth delay tranche width: 12 for RelayEquivocation, 1 for RelayVRFDelay\n```\n\n----------------------------------------\n\nTITLE: Referencing Metadata Runtime API in Rust for Substrate\nDESCRIPTION: This code snippet mentions the `Metadata` runtime API provided by the crate. This API is likely used for handling metadata-related operations in the Substrate runtime.\nSOURCE: https://github.com/paritytech/polkadot-sdk/blob/master/substrate/primitives/api/README.md#2025-04-21_snippet_3\n\nLANGUAGE: Rust\nCODE:\n```\nMetadata\n```\n\n----------------------------------------\n\nTITLE: Links to Bridge GRANDPA Finality Pallet Documentation\nDESCRIPTION: Reference links to GRANDPA pallet documentation showing mandatory header submissions and finality proofs verification.\nSOURCE: https://github.com/paritytech/polkadot-sdk/blob/master/bridges/docs/high-level-overview.md#2025-04-21_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\nMore: [pallet level documentation and code](../modules/grandpa/)\n```\n\n----------------------------------------\n\nTITLE: Receiving Delivery Proof in Rust\nDESCRIPTION: Transaction for receiving proof of message delivery on the source chain. This is called by relayers to confirm message delivery to the target chain.\nSOURCE: https://github.com/paritytech/polkadot-sdk/blob/master/bridges/modules/messages/README.md#2025-04-21_snippet_2\n\nLANGUAGE: rust\nCODE:\n```\nreceive_messages_delivery_proof()\n```\n\n----------------------------------------\n\nTITLE: Database Schema Key-Value Structure in Rust\nDESCRIPTION: Definition of the key-value database schema used to store candidate data, chunks, and metadata with timestamp-based pruning markers.\nSOURCE: https://github.com/paritytech/polkadot-sdk/blob/master/polkadot/roadmap/implementers-guide/src/node/utility/availability-store.md#2025-04-21_snippet_1\n\nLANGUAGE: rust\nCODE:\n```\n(\"available\", CandidateHash) -> Option<AvailableData>\n(\"chunk\", CandidateHash, u32) -> Option<ErasureChunk>\n(\"meta\", CandidateHash) -> Option<CandidateMeta>\n\n(\"unfinalized\", BlockNumber, BlockHash, CandidateHash) -> Option<()>\n(\"prune_by_time\", Timestamp, CandidateHash) -> Option<()>\n```\n\n----------------------------------------\n\nTITLE: Command Line Arguments Documentation in Markdown\nDESCRIPTION: Comprehensive list of command line arguments used for blockchain benchmarking and configuration, including weight calculation, database settings, and storage path options.\nSOURCE: https://github.com/paritytech/polkadot-sdk/blob/master/substrate/utils/frame/benchmarking-cli/src/shared/README.md#2025-04-21_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n# Shared code\n\nContains code that is shared among multiple sub-commands.\n\n## Arguments\n\n- `--mul` Multiply the result with a factor. Can be used to manually adjust for future chain growth.\n- `--add` Add a value to the result. Can be used to manually offset the results.\n- `--metric` Set the metric to use for calculating the final weight from the raw data. Defaults to `average`.\n- `--weight-path` Set the file or directory to write the weight files to.\n- `--db` The database backend to use. This depends on your snapshot.\n- `--pruning` Set the pruning mode of the node. Some benchmarks require you to set this to `archive`.\n- `--base-path` The location on the disk that should be used for the benchmarks. You can try this on different disks or\n  even on a mounted RAM-disk. It is important to use the same location that will later-on be used to store the chain\n  data to get the correct results.\n- `--header` Optional file header which will be prepended to the weight output file. Can be used for adding LICENSE\n  headers.\n```\n\n----------------------------------------\n\nTITLE: Checking Rust Configuration\nDESCRIPTION: Command to display the current Rust toolchain configuration, showing installed toolchains, targets, and the active toolchain version being used for development.\nSOURCE: https://github.com/paritytech/polkadot-sdk/blob/master/templates/solochain/docs/rust-setup.md#2025-04-21_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\nrustup show\n```\n\n----------------------------------------\n\nTITLE: Routing Messages to Workers Based on Validator Index\nDESCRIPTION: Logic for routing PeerMessage network bridge updates to specific approval-distribution workers based on the originating validator's index. Messages are distributed among workers using modulo division.\nSOURCE: https://github.com/paritytech/polkadot-sdk/blob/master/polkadot/roadmap/implementers-guide/src/node/approval/approval-voting-parallel.md#2025-04-21_snippet_0\n\nLANGUAGE: rust\nCODE:\n```\nassigned_worker_index = validator_index % number_of_workers;\n```\n\n----------------------------------------\n\nTITLE: Launching Asset Hub for a Specific Network\nDESCRIPTION: Command to run an Asset Hub node for a specific network (Westend or Kusama) after building the binary. This uses an environment variable to specify which network's Asset Hub to run.\nSOURCE: https://github.com/paritytech/polkadot-sdk/blob/master/cumulus/README.md#2025-04-21_snippet_8\n\nLANGUAGE: bash\nCODE:\n```\nCHAIN=asset-hub-westend # or asset-hub-kusama\n./target/release/polkadot-parachain --chain $CHAIN\n```\n\n----------------------------------------\n\nTITLE: Describing XCM-Emulator Alternatives in Markdown\nDESCRIPTION: This markdown snippet suggests an alternative tool, xcm-simulator, for testing XCM instruction execution against the XCM VM. It provides guidance on when to use this alternative tool instead of XCM-Emulator.\nSOURCE: https://github.com/paritytech/polkadot-sdk/blob/master/cumulus/xcm/xcm-emulator/README.md#2025-04-21_snippet_2\n\nLANGUAGE: markdown\nCODE:\n```\n## Alternatives\n\nIf you just wish to test execution of various XCM instructions\nagainst the XCM VM then the `xcm-simulator` (in the Polkadot\nrepo) is the perfect tool for this.\n```\n\n----------------------------------------\n\nTITLE: Describing Snowbridge Runtime Common Crate in Markdown\nDESCRIPTION: This Markdown snippet provides a brief description of the Snowbridge Runtime Common crate. It explains that the crate contains common runtime-related structs and implementations for the Snowbridge project.\nSOURCE: https://github.com/paritytech/polkadot-sdk/blob/master/bridges/snowbridge/runtime/runtime-common/README.md#2025-04-21_snippet_0\n\nLANGUAGE: Markdown\nCODE:\n```\n# Snowbridge Runtime Common\n\nCommon crate to contain runtime related structs and implementations for Snowbridge.\n```\n\n----------------------------------------\n\nTITLE: Querying Candidate Receipts in Rust\nDESCRIPTION: Functions to get the receipt of candidates pending availability. The first function is deprecated and returns an Option for a single candidate, while the newer function returns a Vec of all pending candidate receipts for a given ParaId.\nSOURCE: https://github.com/paritytech/polkadot-sdk/blob/master/polkadot/roadmap/implementers-guide/src/runtime-api/candidate-pending-availability.md#2025-04-21_snippet_0\n\nLANGUAGE: rust\nCODE:\n```\n// Deprectated.\nfn candidate_pending_availability(at: Block, ParaId) -> Option<CommittedCandidateReceipt>;\n// Use this one\nfn candidates_pending_availability(at: Block, ParaId) -> Vec<CommittedCandidateReceipt>;\n```\n\n----------------------------------------\n\nTITLE: Dispute Verification Flow in Mermaid\nDESCRIPTION: This diagram shows the verification process for disputes, including fetching necessary data (PoV and code), requesting missing data from peers, and casting votes after verification.\nSOURCE: https://github.com/paritytech/polkadot-sdk/blob/master/polkadot/roadmap/implementers-guide/src/disputes-flow.md#2025-04-21_snippet_1\n\nLANGUAGE: mermaid\nCODE:\n```\nstateDiagram-v2\n    [*] --> Open: First Vote(s) received\n    Open --> HasPoV : Fetch Availability Store for PoV\n\n    HasPoV --> HasCode : Fetch historical Code\n    HasCode --> VerifyWithRuntime: All Data locally avail\n\n    Open --> DisputeAvailabilityDataReceived\n    DisputeAvailabilityDataReceived --> VerifyWithRuntime: Received Gossip\n\n    HasPoV --> RequestDisputeAvailabilityData: nope\n    HasCode --> RequestDisputeAvailabilityData: nope\n    RequestDisputeAvailabilityData --> VerifyWithRuntime: Received\n    RequestDisputeAvailabilityData --> RequestDisputeAvailabilityData: Timed out - pick another peer\n\n    VerifyWithRuntime --> CastVoteValid: Block Valid\n    VerifyWithRuntime --> CastVoteInvalid: Block Invalid\n    CastVoteInvalid --> GossipVote\n    CastVoteValid --> GossipVote\n    GossipVote --> [*]\n```\n\n----------------------------------------\n\nTITLE: Configuring Chain-Specific Crates in Cargo.toml\nDESCRIPTION: Example configuration for chain-specific crates that should be excluded from the Polkadot-SDK umbrella crate. The custom metadata attribute 'exclude-from-umbrella' is picked up by the generate-umbrella.py script.\nSOURCE: https://github.com/paritytech/polkadot-sdk/blob/master/docs/contributor/CONTRIBUTING.md#2025-04-21_snippet_0\n\nLANGUAGE: toml\nCODE:\n```\n[package]\n# Other stuff...\n\n[package.metadata.polkadot-sdk]\nexclude-from-umbrella = true\n\n# Other stuff...\n```\n\n----------------------------------------\n\nTITLE: Running PVF-specific zombienet test in Bash\nDESCRIPTION: This command runs a PVF-specific zombienet test with trace-level logging for the parachain::pvf module. It uses the native provider and a specific test configuration file.\nSOURCE: https://github.com/paritytech/polkadot-sdk/blob/master/polkadot/node/core/pvf/README.md#2025-04-21_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\nRUST_LOG=parachain::pvf=trace zombienet --provider=native spawn zombienet_tests/functional/0001-parachains-pvf.toml\n```\n\n----------------------------------------\n\nTITLE: Formatting Complex and Simple Function Calls in Rust\nDESCRIPTION: Demonstrates how to format complex and simple function calls, including let statements and multi-line parameter lists. Shows proper indentation and line breaks.\nSOURCE: https://github.com/paritytech/polkadot-sdk/blob/master/substrate/docs/STYLE_GUIDE.md#2025-04-21_snippet_3\n\nLANGUAGE: rust\nCODE:\n```\n{\n\t// Complex line (not just a function call, also a let statement). Full\n\t// structure.\n\tlet (a, b) = bar(\n\t\treally_long_parameter_name_1,\n\t\treally_long_parameter_name_2,\n\t\tshrt_nm_1,\n\t\tshrt_nm_2,\n\t);\n\n\t// Long, simple function call.\n\twaz(\n\t\treally_long_parameter_name_1,\n\t\treally_long_parameter_name_2,\n\t\tshrt_nm_1,\n\t\tshrt_nm_2,\n\t);\n\n\t// Short function call. Inline.\n\tbaz(a, b);\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Zombienet for Database Generation\nDESCRIPTION: TOML configuration file for setting up relay chain nodes to generate the warp sync database snapshot.\nSOURCE: https://github.com/paritytech/polkadot-sdk/blob/master/substrate/zombienet/0001-basic-warp-sync/README.md#2025-04-21_snippet_0\n\nLANGUAGE: toml\nCODE:\n```\n[relaychain]\ndefault_image = \"docker.io/paritypr/substrate:master\"\ndefault_command = \"substrate\"\n\nchain = \"local\"\n\nchain_spec_path = \"chain-spec.json\"\n\n  [[relaychain.nodes]]\n  name = \"alice\"\n  validator = true\n\n  [[relaychain.nodes]]\n  name = \"bob\"\n  validator = true\n```\n\n----------------------------------------\n\nTITLE: Markdown Documentation Headers\nDESCRIPTION: Basic markdown structure defining the FRAME framework overview and providing external documentation and issue tracking links.\nSOURCE: https://github.com/paritytech/polkadot-sdk/blob/master/substrate/frame/README.md#2025-04-21_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n# FRAME\n\nThe FRAME development environment provides modules (called \"pallets\") and support libraries that you can use, modify,\nand extend to build the runtime logic to suit the needs of your blockchain.\n\n## Documentation\n\nhttps://docs.substrate.io/reference/frame-pallets/\n\n## Issues\n\nhttps://github.com/orgs/paritytech/projects/40\n```\n\n----------------------------------------\n\nTITLE: Defining Parachain Structure in Rust\nDESCRIPTION: Demonstrates the structure of a parachain with a #![no_std] attribute for the main execution logic library, which is then wrapped in a WASM crate and implemented in a collator node.\nSOURCE: https://github.com/paritytech/polkadot-sdk/blob/master/polkadot/parachain/test-parachains/README.md#2025-04-21_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n#![no_std]\n```\n\n----------------------------------------\n\nTITLE: Referencing TelemetryWorker and TelemetryHandle in Markdown\nDESCRIPTION: This snippet demonstrates how to reference the TelemetryWorker and TelemetryHandle types in Markdown documentation. These are key components of the Substrate telemetry system used for processing and managing telemetry data.\nSOURCE: https://github.com/paritytech/polkadot-sdk/blob/master/substrate/client/telemetry/README.md#2025-04-21_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n[`TelemetryWorker`]\n[`TelemetryHandle`]\n```\n\n----------------------------------------\n\nTITLE: Starting Substrate Node in Release Mode\nDESCRIPTION: Command to start a Substrate node in release mode from the root of the repository.\nSOURCE: https://github.com/paritytech/polkadot-sdk/blob/master/substrate/utils/prometheus/README.md#2025-04-21_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\ncargo run --release\n```\n\n----------------------------------------\n\nTITLE: Defining IndirectSignedApprovalVote Struct in Rust\nDESCRIPTION: This struct represents an indirect signed approval vote, referencing the candidate by block hash and candidate index.\nSOURCE: https://github.com/paritytech/polkadot-sdk/blob/master/polkadot/roadmap/implementers-guide/src/types/approval.md#2025-04-21_snippet_5\n\nLANGUAGE: rust\nCODE:\n```\nstruct IndirectSignedApprovalVote {\n    block_hash: Hash,\n    candidate_index: CandidateIndex,\n    validator: ValidatorIndex,\n    signature: ValidatorSignature,\n}\n```\n\n----------------------------------------\n\nTITLE: Building and Running Asset Hub Node\nDESCRIPTION: Commands to build and launch an Asset Hub node. This includes compiling the polkadot-parachain binary with locked dependencies and running it with a specified chain configuration.\nSOURCE: https://github.com/paritytech/polkadot-sdk/blob/master/cumulus/README.md#2025-04-21_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\ncargo build --release --locked --bin polkadot-parachain\n```\n\n----------------------------------------\n\nTITLE: Running markdownlint locally for Polkadot SDK\nDESCRIPTION: This command runs markdownlint on the local repository, using the specific configuration file and ignoring the target directory. It checks all markdown files for compliance with the defined rules.\nSOURCE: https://github.com/paritytech/polkadot-sdk/blob/master/docs/contributor/markdown_linting.md#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nmarkdownlint --config .github/.markdownlint.yaml --ignore target .\n```\n\n----------------------------------------\n\nTITLE: Running Zombienet with Podman Provider\nDESCRIPTION: Command to launch a local test network using Zombienet with the Podman provider. This is a quick and easy way to spin up a network for testing and development purposes.\nSOURCE: https://github.com/paritytech/polkadot-sdk/blob/master/cumulus/README.md#2025-04-21_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nzombienet --provider podman spawn ./zombienet/examples/small_network.toml\n```\n\n----------------------------------------\n\nTITLE: Version Information Command\nDESCRIPTION: Command to display Polkadot version information for issue reporting.\nSOURCE: https://github.com/paritytech/polkadot-sdk/blob/master/docs/contributor/docker.md#2025-04-21_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\n$ENGINE run --rm -it parity/polkadot:latest --version\n```\n\n----------------------------------------\n\nTITLE: Initializing Collation Generation Process in Polkadot SDK (Mermaid)\nDESCRIPTION: This diagram illustrates the process of collation generation, including the interaction between the Overseer, CollationGeneration, RuntimeApi, and CollatorProtocol subsystems. It shows how collations are built and distributed.\nSOURCE: https://github.com/paritytech/polkadot-sdk/blob/master/polkadot/roadmap/implementers-guide/src/node/subsystems-and-jobs.md#2025-04-21_snippet_1\n\nLANGUAGE: mermaid\nCODE:\n```\nsequenceDiagram\n    participant Overseer\n    participant CollationGeneration\n    participant RuntimeApi\n    participant CollatorProtocol\n\n    Overseer ->> CollationGeneration: ActiveLeavesUpdate\n    loop for each activated head\n        CollationGeneration -->> RuntimeApi: Request availability cores\n        CollationGeneration -->> RuntimeApi: Request validators\n\n        Note over CollationGeneration: Determine an appropriate ScheduledCore <br/>and OccupiedCoreAssumption\n\n        CollationGeneration -->> RuntimeApi: Request full validation data\n\n        Note over CollationGeneration: Build the collation\n\n        CollationGeneration ->> CollatorProtocol: DistributeCollation\n    end\n```\n\n----------------------------------------\n\nTITLE: Generating Substrate Node Template Release Package (Bash)\nDESCRIPTION: This command generates the release package for the Substrate Node Template. It must be run from the root directory of the Substrate project with committed changes.\nSOURCE: https://github.com/paritytech/polkadot-sdk/blob/master/substrate/docs/node-template-release.md#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ncd scripts/ci/\n./node-template-release.sh <output tar.gz file>\n```\n\n----------------------------------------\n\nTITLE: Preserving Default Shell in Nix Develop\nDESCRIPTION: Command to use the current shell inside the Nix development environment instead of the default bash shell.\nSOURCE: https://github.com/paritytech/polkadot-sdk/blob/master/bridges/snowbridge/README.md#2025-04-21_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\nnix develop --command $SHELL\n```\n\n----------------------------------------\n\nTITLE: Referencing Relayer Refund Extension for Messages from Parachains\nDESCRIPTION: Reference to a signed extension that handles relayer refunds for messages coming from parachains. This is part of the mechanism that manages the economic incentives for relayers in the bridge system.\nSOURCE: https://github.com/paritytech/polkadot-sdk/blob/master/bridges/docs/polkadot-kusama-bridge-overview.md#2025-04-21_snippet_2\n\nLANGUAGE: markdown\nCODE:\n```\n[RefundRelayerForMessagesFromParachain](../bin/runtime-common/src/refund_relayer_extension.rs)\n```\n\n----------------------------------------\n\nTITLE: Docker Compose with Polkadot UI Configuration\nDESCRIPTION: Extended Docker Compose configuration that includes both Polkadot node and polkadot-js-apps frontend.\nSOURCE: https://github.com/paritytech/polkadot-sdk/blob/master/docs/contributor/docker.md#2025-04-21_snippet_4\n\nLANGUAGE: yaml\nCODE:\n```\nversion: '2'\n\nservices:\n  polkadot:\n    container_name: polkadot\n    image: parity/polkadot\n    ports:\n      - 30333:30333 # p2p port\n      - 9933:9933 # rpc port\n      - 9944:9944 # ws port\n      - 9615:9615 # Prometheus port\n    command: [\n      \"--name\", \"PolkaDocker\",\n      \"--ws-external\",\n      \"--rpc-external\",\n      \"--prometheus-external\",\n      \"--rpc-cors\", \"all\"\n    ]\n\n  polkadotui:\n    container_name: polkadotui\n    image: jacogr/polkadot-js-apps\n    environment:\n      - WS_URL=ws://[YOUR_DOCKER_HOST_IP]:9944\n    ports:\n      - 80:80\n```\n\n----------------------------------------\n\nTITLE: Listing Parachains Directory Structure in Markdown\nDESCRIPTION: This code snippet outlines the internal structure of the parachains directory, including subdirectories for chain specs, common configurations, integration tests, pallets, and runtimes.\nSOURCE: https://github.com/paritytech/polkadot-sdk/blob/master/cumulus/parachains/README.md#2025-04-21_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n- `chain-specs`: Chain specs for the runtimes contained in its sibling dir `runtimes`.\n- `common`: Common configurations, `impl`s, etc. used by several parachain runtimes.\n- `integration-tests`: Integration tests to test parachain interactions via XCM.\n- `pallets`: FRAME pallets that are specific to parachains.\n- `runtimes`: The entry point for parachain runtimes.\n```\n\n----------------------------------------\n\nTITLE: Installing Polkadot Omni Node via wget\nDESCRIPTION: Commands to download the Polkadot Omni Node binary from GitHub releases, make it executable, and add it to the PATH environment variable.\nSOURCE: https://github.com/paritytech/polkadot-sdk/blob/master/cumulus/polkadot-omni-node/README.md#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n# Download and set it on PATH.\nwget https://github.com/paritytech/polkadot-sdk/releases/download/<stable_release_tag>/polkadot-omni-node\nchmod +x polkadot-omni-node\nexport PATH=\"$PATH:`pwd`\"\n```\n\n----------------------------------------\n\nTITLE: Displaying Named GenesisConfig Preset\nDESCRIPTION: Function to display a specific named GenesisConfig preset from the runtime.\nSOURCE: https://github.com/paritytech/polkadot-sdk/blob/master/substrate/bin/utils/chain-spec-builder/README.md#2025-04-21_snippet_3\n\nLANGUAGE: rust\nCODE:\n```\nfn cmd_display_preset(runtime_path: &str) -> String {\n\tbash!(\n\t\tchain-spec-builder display-preset -r $runtime_path -p \"staging\"\n\t)\n}\n```\n\n----------------------------------------\n\nTITLE: PoV Distribution Process in Polkadot SDK (Mermaid)\nDESCRIPTION: This diagram illustrates the Proof of Validity (PoV) distribution process, involving CandidateBacking, PoVDistribution, Listener, and NetworkBridge subsystems. It shows how PoVs are distributed and handled when received.\nSOURCE: https://github.com/paritytech/polkadot-sdk/blob/master/polkadot/roadmap/implementers-guide/src/node/subsystems-and-jobs.md#2025-04-21_snippet_5\n\nLANGUAGE: mermaid\nCODE:\n```\nsequenceDiagram\n    participant CB as CandidateBacking\n    participant PD as PoVDistribution\n    participant Listener\n    participant NB as NetworkBridge\n\n    CB ->> PD: DistributePoV\n\n    Note over PD,Listener: Various subsystems can register listeners for when PoVs arrive\n\n    loop for each Listener\n        PD ->> Listener: Arc<PoV>\n    end\n\n    Note over PD: Gossip to connected peers\n\n    PD ->> NB: SendPoV\n\n    Note over PD,NB: On receipt of a network PoV, PovDistribution forwards it to each Listener.<br/>It also penalizes bad gossipers.\n```\n\n----------------------------------------\n\nTITLE: Building Cumulus Polkadot-Parachain Binary\nDESCRIPTION: Commands for building and copying the polkadot-parachain binary\nSOURCE: https://github.com/paritytech/polkadot-sdk/blob/master/cumulus/parachains/runtimes/bridge-hubs/README.md#2025-04-21_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\ncd <polkadot-sdk-git-repo-dir>\n\ncargo build --release -p polkadot-parachain-bin\ncp target/release/polkadot-parachain ~/local_bridge_testing/bin/polkadot-parachain\ncp target/release/polkadot-parachain ~/local_bridge_testing/bin/polkadot-parachain-asset-hub\n```\n\n----------------------------------------\n\nTITLE: Delayed Vote Distribution in Polkadot Approval Voting\nDESCRIPTION: This section describes the process of delayed vote distribution. It outlines how the system handles queued votes and distributes them either when a timer wakes up or when certain conditions are met.\nSOURCE: https://github.com/paritytech/polkadot-sdk/blob/master/polkadot/roadmap/implementers-guide/src/node/approval/approval-voting.md#2025-04-21_snippet_13\n\nLANGUAGE: markdown\nCODE:\n```\n### Delayed vote distribution\n  * [Issue Approval Vote](#issue-approval-vote) arms once a per block timer if there are no requirements to send the\n    vote immediately.\n  * When the timer wakes up it will either:\n  * IF there is a candidate in the queue past its sending tick:\n    * Construct a `SignedApprovalVote` with the validator index for the session and all candidate hashes in the waiting queue.\n    * Construct a `IndirectSignedApprovalVote` using the information about the vote.\n    * Dispatch `ApprovalDistributionMessage::DistributeApproval`.\n  * ELSE\n    * Re-arm the timer with latest tick we have then send the vote.\n```\n\n----------------------------------------\n\nTITLE: Generating Raw Storage Chain Spec with Patch\nDESCRIPTION: Command to generate a raw storage chain spec by patching the default genesis config with a JSON file.\nSOURCE: https://github.com/paritytech/polkadot-sdk/blob/master/substrate/bin/utils/chain-spec-builder/README.md#2025-04-21_snippet_6\n\nLANGUAGE: rust\nCODE:\n```\nchain-spec-builder -c \"/dev/stdout\" create -s -r $runtime_path patch \"tests/input/patch.json\"\n```\n\n----------------------------------------\n\nTITLE: Implementing Collator Protocol V1 Message in Rust for Polkadot SDK\nDESCRIPTION: This code defines the CollatorProtocolV1Message enum, which includes message types for declaring collator intent, advertising collations, and notifying about seconded collations in the Collator Protocol subsystem.\nSOURCE: https://github.com/paritytech/polkadot-sdk/blob/master/polkadot/roadmap/implementers-guide/src/types/network.md#2025-04-21_snippet_7\n\nLANGUAGE: rust\nCODE:\n```\nenum CollatorProtocolV1Message {\n\t/// Declare the intent to advertise collations under a collator ID and `Para`, attaching a\n\t/// signature of the `PeerId` of the node using the given collator ID key.\n\tDeclare(CollatorId, ParaId, CollatorSignature),\n\t/// Advertise a collation to a validator. Can only be sent once the peer has\n\t/// declared that they are a collator with given ID.\n\tAdvertiseCollation(Hash),\n\t/// A collation sent to a validator was seconded.\n\tCollationSeconded(SignedFullStatement),\n}\n```\n\n----------------------------------------\n\nTITLE: Cloning Minimal Template Repository\nDESCRIPTION: Commands to clone the minimal template repository and navigate to its directory\nSOURCE: https://github.com/paritytech/polkadot-sdk/blob/master/templates/minimal/README.md#2025-04-21_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\ngit clone https://github.com/paritytech/polkadot-sdk-minimal-template.git minimal-template\n\ncd minimal-template\n```\n\n----------------------------------------\n\nTITLE: Benchmark Machine Output Format\nDESCRIPTION: Example output showing performance metrics for CPU (BLAKE2-256, SR25519-Verify), Memory (Copy), and Disk (Sequential and Random Write) operations with pass/fail results and performance percentages.\nSOURCE: https://github.com/paritytech/polkadot-sdk/blob/master/substrate/utils/frame/benchmarking-cli/src/machine/README.md#2025-04-21_snippet_1\n\nLANGUAGE: pre\nCODE:\n```\n+----------+----------------+---------------+--------------+-------------------+\n| Category | Function       | Score         | Minimum      | Result            |\n+----------+----------------+---------------+--------------+-------------------+\n| CPU      | BLAKE2-256     | 1023.00 MiB/s | 1.00 GiB/s   | ✅ Pass ( 99.4 %) |\n+----------+----------------+---------------+--------------+-------------------+\n| CPU      | SR25519-Verify | 665.13 KiB/s  | 666.00 KiB/s | ✅ Pass ( 99.9 %) |\n+----------+----------------+---------------+--------------+-------------------+\n| Memory   | Copy           | 14.39 GiB/s   | 14.32 GiB/s  | ✅ Pass (100.4 %) |\n+----------+----------------+---------------+--------------+-------------------+\n| Disk     | Seq Write      | 457.00 MiB/s  | 450.00 MiB/s | ✅ Pass (101.6 %) |\n+----------+----------------+---------------+--------------+-------------------+\n| Disk     | Rnd Write      | 190.00 MiB/s  | 200.00 MiB/s | ✅ Pass ( 95.0 %) |\n+----------+----------------+---------------+--------------+-------------------+\n```\n\n----------------------------------------\n\nTITLE: Extracting Jemalloc Profile Data\nDESCRIPTION: Command for extracting memory usage information from jemalloc snapshots using jeprof.\nSOURCE: https://github.com/paritytech/polkadot-sdk/blob/master/polkadot/node/subsystem-bench/README.md#2025-04-21_snippet_8\n\nLANGUAGE: bash\nCODE:\n```\njeprof --text PATH_TO_EXECUTABLE_WITH_DEBUG_SYMBOLS /tmp/subsystem-bench.1222895.199.i199.heap > statistics.txt\n```\n\n----------------------------------------\n\nTITLE: Bridge Components Documentation Links\nDESCRIPTION: Collection of documentation links for various bridge components including Messages pallet and Relayers pallet.\nSOURCE: https://github.com/paritytech/polkadot-sdk/blob/master/bridges/docs/high-level-overview.md#2025-04-21_snippet_2\n\nLANGUAGE: markdown\nCODE:\n```\nMore: [pallet level documentation and code](../modules/messages/)\n\nMore: [pallet level documentation and code](../modules/relayers/)\n```\n\n----------------------------------------\n\nTITLE: Implementing Bitfield Signing Messages in Rust\nDESCRIPTION: Defines an empty message enum for the bitfield signing subsystem, indicating it currently receives no specific messages.\nSOURCE: https://github.com/paritytech/polkadot-sdk/blob/master/polkadot/roadmap/implementers-guide/src/types/overseer-protocol.md#2025-04-21_snippet_9\n\nLANGUAGE: rust\nCODE:\n```\nenum BitfieldSigningMessage { }\n```\n\n----------------------------------------\n\nTITLE: Bitfield Distribution and Provisioning Process in Polkadot SDK (Mermaid)\nDESCRIPTION: This diagram shows the bitfield distribution and provisioning process, involving BitfieldSigning, BitfieldDistribution, NetworkBridge, and Provisioner subsystems. It illustrates how bitfields are distributed and provided as provisionable data.\nSOURCE: https://github.com/paritytech/polkadot-sdk/blob/master/polkadot/roadmap/implementers-guide/src/node/subsystems-and-jobs.md#2025-04-21_snippet_8\n\nLANGUAGE: mermaid\nCODE:\n```\nsequenceDiagram\n    participant BS as BitfieldSigning\n    participant BD as BitfieldDistribution\n    participant NB as NetworkBridge\n    participant PV as Provisioner\n\n    BS ->> BD: DistributeBitfield\n    BD ->> PV: ProvisionableData::Bitfield\n    BD ->> NB: SendValidationMessage::BitfieldDistribution::Bitfield\n```\n\n----------------------------------------\n\nTITLE: Claiming Relayer Rewards\nDESCRIPTION: Commands for claiming relayer rewards on BridgeHubRococo and BridgeHubWestend\nSOURCE: https://github.com/paritytech/polkadot-sdk/blob/master/cumulus/parachains/runtimes/bridge-hubs/README.md#2025-04-21_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\ncd <polkadot-sdk-git-repo-dir>\n\n# Claim rewards on BridgeHubWestend:\n./bridges/testing/environments/rococo-westend/bridges_rococo_westend.sh claim-rewards-bridge-hub-rococo-local\n\n# Claim rewards on BridgeHubWestend:\n./bridges/testing/environments/rococo-westend/bridges_rococo_westend.sh claim-rewards-bridge-hub-westend-local\n```\n\n----------------------------------------\n\nTITLE: Sourcing Environment Variables for Zombienet Tests in Bash\nDESCRIPTION: This snippet demonstrates how to set up custom paths for Zombienet test binaries by sourcing an environment file. It modifies the PATH variable to include directories containing the necessary executables.\nSOURCE: https://github.com/paritytech/polkadot-sdk/blob/master/polkadot/zombienet_tests/README.md#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n$ cat .set_env\n(...)\n# by the order of this array\nCUSTOM_PATHS=(\n  \"~/polkadot/target/release\"\n  \"~/polkadot/target/testnet\"\n  \"~/cumulus/target/release\"\n)\n(...)\n\nsource .set_env\n```\n\n----------------------------------------\n\nTITLE: Installing Parachain Template Node\nDESCRIPTION: Command to install the parachain template node using cargo\nSOURCE: https://github.com/paritytech/polkadot-sdk/blob/master/templates/parachain/README.md#2025-04-21_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\ncargo install --path node --locked\n```\n\n----------------------------------------\n\nTITLE: Session Change Procedure in Polkadot Scheduler Module\nDESCRIPTION: Describes the steps taken during a session change in the Scheduler module, including updating configuration, resizing cores, and computing new validator groups.\nSOURCE: https://github.com/paritytech/polkadot-sdk/blob/master/polkadot/roadmap/implementers-guide/src/runtime/scheduler.md#2025-04-21_snippet_4\n\nLANGUAGE: markdown\nCODE:\n```\n1. Set `SessionStartBlock` to current block number + 1, as session changes are applied at the end of the block.\n2. Clear all `Some` members of `AvailabilityCores`. Return all parathread claims to queue with retries un-incremented.\n3. Set `configuration = Configuration::configuration()` (see\n   [`HostConfiguration`](../types/runtime.md#host-configuration))\n4. Fetch `Shared::ActiveValidators` as AV.\n5. Determine the number of cores & validator groups as `n_cores`. This is the maximum of\n   1. `paras::Parachains::<T>::get().len() + configuration.parathread_cores`\n   1. `n_validators / max_validators_per_core` if `configuration.max_validators_per_core` is `Some` and non-zero.\n6. Resize `AvailabilityCores` to have length `n_cores` with all `None` entries.\n7. Compute new validator groups by shuffling using a secure randomness beacon\n   - Note that the total number of validators `V` in AV may not be evenly divided by `n_cores`.\n   - The groups are selected by partitioning AV.  The first `V % N` groups will have `(V / n_cores) + 1` members, while\n     the remaining groups will have `(V / N)` members each.\n   - Instead of using the indices within AV, which point to the broader set, indices _into_ AV should be used. This\n     implies that groups should have simply ascending validator indices.\n8. Prune the parathread (on-demand parachain) queue to remove all retries beyond `configuration.parathread_retries`.\n   - Also prune all on-demand claims corresponding to de-registered parachains.\n   - all pruned claims should have their entry removed from the parathread (on-demand parachain) index.\n   - assign all non-pruned claims to new cores if the number of on-demand parachain cores has changed between the\n     `new_config` and `old_config` of the `SessionChangeNotification`.\n   - Assign claims in equal balance across all cores if rebalancing, and set the `next_core` of the `ParathreadQueue`\n     (on-demand queue) by incrementing the relative index of the last assigned core and taking it modulo the number of\n     on-demand cores.\n```\n\n----------------------------------------\n\nTITLE: Starting VS Code within Nix Shell\nDESCRIPTION: Commands to start VS Code within the Nix developer shell to ensure it can access the tools provided by the environment.\nSOURCE: https://github.com/paritytech/polkadot-sdk/blob/master/bridges/snowbridge/README.md#2025-04-21_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nnix develop\ncode .\n```\n\n----------------------------------------\n\nTITLE: Parachain Heads Storage Reference\nDESCRIPTION: Links to storage proof implementations for parachain heads in the paras pallet.\nSOURCE: https://github.com/paritytech/polkadot-sdk/blob/master/bridges/docs/high-level-overview.md#2025-04-21_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n[`Heads`](https://github.com/paritytech/polkadot/blob/1a034bd6de0e76721d19aed02a538bcef0787260/runtime/parachains/src/paras/mod.rs#L642)\n```\n\n----------------------------------------\n\nTITLE: Pruning PNPM Store Cache\nDESCRIPTION: Command to clear the PNPM package manager cache after removing node_modules directories, which helps resolve dependency issues.\nSOURCE: https://github.com/paritytech/polkadot-sdk/blob/master/bridges/snowbridge/README.md#2025-04-21_snippet_10\n\nLANGUAGE: bash\nCODE:\n```\npnpm store prune\n```\n\n----------------------------------------\n\nTITLE: Extended Tuple Support Configuration\nDESCRIPTION: TOML configuration for enabling support for larger tuple sizes in runtime implementation\nSOURCE: https://github.com/paritytech/polkadot-sdk/blob/master/umbrella/README.md#2025-04-21_snippet_4\n\nLANGUAGE: toml\nCODE:\n```\n[dependencies]\npolkadot-sdk = { version = \"0.12.0\", features = [\"runtime\", \"tuples-96\"], default-features = false }\n```\n\n----------------------------------------\n\nTITLE: Sequence Diagram: Inherent Data Flow in Polkadot\nDESCRIPTION: Shows the sequence flow for handling inherent data requests between Provisioner and ParachainsInherentDataProvider. Includes logic for storing bitfields, handling backed candidates, and managing timeout scenarios with a 2-second wait period.\nSOURCE: https://github.com/paritytech/polkadot-sdk/blob/master/polkadot/roadmap/implementers-guide/src/node/subsystems-and-jobs.md#2025-04-21_snippet_10\n\nLANGUAGE: mermaid\nCODE:\n```\nNote over PV: store bitfields and backed candidates\nelse receive request for inherent data\n    PI ->> PV: RequestInherentData\n    alt we have already constructed the inherent data\n        PV ->> PI: send the inherent data\n    else we have not yet constructed the inherent data\n        Note over PV,PI: Store the return sender without sending immediately\n    end\nelse timer times out\n    note over PV: Waited 2 seconds\n    PV -->> RA: RuntimeApiRequest::AvailabilityCores\n    Note over PV: construct and store the inherent data\n    loop over stored inherent data requests\n        PV ->> PI: (SignedAvailabilityBitfields, BackedCandidates)\n    end\nend\n```\n\n----------------------------------------\n\nTITLE: Running Rococo Chain with Zombienet\nDESCRIPTION: Command to spawn Rococo network with BridgeHubRococo and AssetHub using zombienet\nSOURCE: https://github.com/paritytech/polkadot-sdk/blob/master/cumulus/parachains/runtimes/bridge-hubs/README.md#2025-04-21_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\ncd <polkadot-sdk-git-repo-dir>\n\n# Rococo + BridgeHubRococo + AssetHub for Rococo (mirroring Kusama)\nPOLKADOT_BINARY=~/local_bridge_testing/bin/polkadot \\\nPOLKADOT_PARACHAIN_BINARY=~/local_bridge_testing/bin/polkadot-parachain \\\n\t~/local_bridge_testing/bin/zombienet-linux --provider native spawn ./bridges/testing/environments/rococo-westend/bridge_hub_rococo_local_network.toml\n```\n\n----------------------------------------\n\nTITLE: Approved Ancestor Handler\nDESCRIPTION: Handles ApprovalVotingMessage::ApprovedAncestor by traversing block ancestry and tracking approval status.\nSOURCE: https://github.com/paritytech/polkadot-sdk/blob/master/polkadot/roadmap/implementers-guide/src/node/approval/approval-voting.md#2025-04-21_snippet_7\n\nLANGUAGE: markdown\nCODE:\n```\n#### `ApprovalVotingMessage::ApprovedAncestor`\n\nOn receiving an `ApprovedAncestor(Hash, BlockNumber, response_channel)`:\n  * Iterate over the ancestry of the hash all the way back to block number given, starting from the provided block hash...\n```\n\n----------------------------------------\n\nTITLE: Generating Code Coverage for XCM Simulator Fuzzer\nDESCRIPTION: These commands build the project with specific flags for code coverage, run the fuzzer, zip the coverage data, and generate an HTML coverage report using grcov.\nSOURCE: https://github.com/paritytech/polkadot-sdk/blob/master/polkadot/xcm/xcm-simulator/fuzzer/README.md#2025-04-21_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nRUSTFLAGS=\"-Zprofile -Ccodegen-units=1 -Copt-level=0 -Clink-dead-code -Coverflow-checks=off -Zpanic_abort_tests -Cpanic=abort\" \\\nCARGO_INCREMENTAL=0 SKIP_WASM_BUILD=1 CARGO_HOME=./cargo cargo build --features=try-runtime\n../../../target/debug/xcm-fuzzer hfuzz_workspace/xcm-fuzzer/input/\nzip -0 ccov.zip `find ../../../target/ \\( -name \"*.gc*\" -o -name \"test-*.gc*\" \\) -print`\ngrcov ccov.zip -s ../../../ -t html --llvm --branch --ignore-not-existing -o ./coverage\n```\n\n----------------------------------------\n\nTITLE: Implementing Collation Protocol V1 in Rust for Polkadot SDK\nDESCRIPTION: This code defines the CollationProtocolV1 enum, which includes a message type for the Collator Protocol in the collation peer-set.\nSOURCE: https://github.com/paritytech/polkadot-sdk/blob/master/polkadot/roadmap/implementers-guide/src/types/network.md#2025-04-21_snippet_9\n\nLANGUAGE: rust\nCODE:\n```\nenum CollationProtocolV1 {\n\tCollatorProtocol(CollatorProtocolV1Message),\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Zombienet for Parachain\nDESCRIPTION: TOML configuration snippet for setting up parachain in Zombienet\nSOURCE: https://github.com/paritytech/polkadot-sdk/blob/master/templates/parachain/README.md#2025-04-21_snippet_6\n\nLANGUAGE: toml\nCODE:\n```\n[[parachains]]\nid = \"<PARACHAIN_ID>\"\nchain_spec_path = \"<TO BE UPDATED WITH A VALID PATH>\"\n```\n\n----------------------------------------\n\nTITLE: Extrinsic Base Weight Implementation in Rust\nDESCRIPTION: Code sample showing the ExtrinsicBaseWeight constant definition with benchmark statistics for empty extrinsic execution time.\nSOURCE: https://github.com/paritytech/polkadot-sdk/blob/master/substrate/utils/frame/benchmarking-cli/src/overhead/README.md#2025-04-21_snippet_1\n\nLANGUAGE: rust\nCODE:\n```\n/// Time to execute a NO-OP extrinsic, for example `System::remark`.\n/// Calculated by multiplying the *Average* with `1` and adding `0`.\n///\n/// Stats [NS]:\n///   Min, Max: 67_561, 69_855\n///   Average:  67_745\n///   Median:   67_701\n///   Std-Dev:  264.68\n///\n/// Percentiles [NS]:\n///   99th: 68_758\n///   95th: 67_843\n///   75th: 67_749\npub const ExtrinsicBaseWeight: Weight =\n    Weight::from_parts(WEIGHT_REF_TIME_PER_NANOS.saturating_mul(67_745), 0);\n```\n\n----------------------------------------\n\nTITLE: Substrate Channel Metrics Table Structure\nDESCRIPTION: Markdown table defining the prometheus vector labels used for monitoring unbounded channel operations. The table describes two labels: 'entity' for channel name and 'action' for operation type.\nSOURCE: https://github.com/paritytech/polkadot-sdk/blob/master/substrate/client/utils/README.md#2025-04-21_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n| Label        | Description                                   |\n| ------------ | --------------------------------------------- |\n| entity       | Name of channel passed to `tracing_unbounded` |\n| action       | One of `send`/`received`/`dropped`            |\n```\n\n----------------------------------------\n\nTITLE: Enabling Polkadot CLI Shell Completion in Bash\nDESCRIPTION: This command sources the bash completion script for Polkadot CLI. It assumes a release build was created using cargo.\nSOURCE: https://github.com/paritytech/polkadot-sdk/blob/master/polkadot/doc/shell-completion.md#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nsource target/release/completion-scripts/polkadot.bash\n```\n\n----------------------------------------\n\nTITLE: Defining DelayTranche Type in Rust\nDESCRIPTION: This type alias defines DelayTranche as an unsigned 32-bit integer.\nSOURCE: https://github.com/paritytech/polkadot-sdk/blob/master/polkadot/roadmap/implementers-guide/src/types/approval.md#2025-04-21_snippet_7\n\nLANGUAGE: rust\nCODE:\n```\ntype DelayTranche = u32;\n```\n\n----------------------------------------\n\nTITLE: Visualizing Fragment Tree Structure in ASCII\nDESCRIPTION: This ASCII diagram illustrates the structure of a fragment tree, showing multiple possible paths for parachain state transitions. It demonstrates how candidates at different depths relate to each other and to the para head registered by the relay chain.\nSOURCE: https://github.com/paritytech/polkadot-sdk/blob/master/polkadot/roadmap/implementers-guide/src/node/backing/prospective-parachains.md#2025-04-21_snippet_0\n\nLANGUAGE: ascii\nCODE:\n```\nPara Head registered by the relay chain:     included_head\n                                                  ↲  ↳\ndepth 0:                                  head_0_a    head_0_b\n                                             ↲            ↳\ndepth 1:                             head_1_a              head_1_b\n                                  ↲      |     ↳\ndepth 2:                 head_2_a1   head_2_a2  head_2_a3\n```\n\n----------------------------------------\n\nTITLE: Creating Archive Package\nDESCRIPTION: Command to create a tar.gz archive of the database snapshot.\nSOURCE: https://github.com/paritytech/polkadot-sdk/blob/master/substrate/zombienet/0001-basic-warp-sync/README.md#2025-04-21_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\ntar -C db-snapshot/alice/ -czf chains.tgz ./\n```\n\n----------------------------------------\n\nTITLE: Illustrating Inter-subsystem Communication Flow in Polkadot SDK\nDESCRIPTION: A text diagram depicting how communication between subsystems is mediated through the Overseer. It shows how Job A-1 sends a message to Job B-1 by routing through their respective subsystems and the central Overseer/Message Bus.\nSOURCE: https://github.com/paritytech/polkadot-sdk/blob/master/polkadot/roadmap/implementers-guide/src/node/overseer.md#2025-04-21_snippet_1\n\nLANGUAGE: text\nCODE:\n```\n     +--------+                                                           +--------+\n     |        |                                                           |        |\n     |Job A-1 | (sends message)                       (receives message)  |Job B-1 |\n     |        |                                                           |        |\n     +----|---+                                                           +----^---+\n          |                  +------------------------------+                  ^\n          v                  |                              |                  |\n+---------v---------+        |                              |        +---------|---------+\n|                   |        |                              |        |                   |\n| Subsystem A       |        |       Overseer / Message     |        | Subsystem B       |\n|                   -------->>                  Bus         -------->>                   |\n|                   |        |                              |        |                   |\n+-------------------+        |                              |        +-------------------+\n                             |                              |\n                             +------------------------------+\n```\n\n----------------------------------------\n\nTITLE: Connecting to Polkadot Mainnet\nDESCRIPTION: This bash command starts a Polkadot node and connects it to the global Polkadot Mainnet network.\nSOURCE: https://github.com/paritytech/polkadot-sdk/blob/master/polkadot/README.md#2025-04-21_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\n../target/release/polkadot --chain=polkadot\n```\n\n----------------------------------------\n\nTITLE: Zombienet Configuration Example\nDESCRIPTION: TOML configuration snippet for setting up a parachain in Zombienet.\nSOURCE: https://github.com/paritytech/polkadot-sdk/blob/master/templates/parachain/README.docify.md#2025-04-21_snippet_5\n\nLANGUAGE: toml\nCODE:\n```\n[[parachains]]\nid = \"<PARACHAIN_ID>\"\nchain_spec_path = \"<TO BE UPDATED WITH A VALID PATH>\"\n```\n\n----------------------------------------\n\nTITLE: Installing Jemalloc Profiling Prerequisites\nDESCRIPTION: Command for installing required tools for memory profiling using jemalloc.\nSOURCE: https://github.com/paritytech/polkadot-sdk/blob/master/polkadot/node/subsystem-bench/README.md#2025-04-21_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\nsudo apt install libjemalloc-dev graphviz\n```\n\n----------------------------------------\n\nTITLE: Purging Local Dev Chain\nDESCRIPTION: Command to purge the local development chain data from a specified base path.\nSOURCE: https://github.com/paritytech/polkadot-sdk/blob/master/substrate/docker/README.md#2025-04-21_snippet_4\n\nLANGUAGE: shell\nCODE:\n```\n./run.sh node-template purge-chain --dev --base-path=/data -y\n```\n\n----------------------------------------\n\nTITLE: Domain 1024 Uncompressed Ticket Verification Timing\nDESCRIPTION: Time complexity formula for ticket verification with domain size 1024 without compression. Base time of 13.4ms plus 11.39ms per ticket.\nSOURCE: https://github.com/paritytech/polkadot-sdk/blob/master/substrate/frame/sassafras/src/data/benchmark-results.md#2025-04-21_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\nTime ~=    13400\n    + x    11390\n              µs\n```\n\n----------------------------------------\n\nTITLE: Compact VRF Assignment Generation\nDESCRIPTION: VRF output computation for RelayVRFModuloCompact using schnorrkel VRF with context \"A&V Core v2\".\nSOURCE: https://github.com/paritytech/polkadot-sdk/blob/master/polkadot/roadmap/implementers-guide/src/protocol-approval.md#2025-04-21_snippet_3\n\nLANGUAGE: rust\nCODE:\n```\nschnorrkel::vrf::VRFInOut::make_bytes\n```\n\n----------------------------------------\n\nTITLE: Block Data State Machine Diagram in DOT\nDESCRIPTION: Graphviz DOT diagram showing the lifecycle states of block data: Stored -> Included -> Finalized -> Pruned, with transitions based on block inclusion, finalization and timing conditions.\nSOURCE: https://github.com/paritytech/polkadot-sdk/blob/master/polkadot/roadmap/implementers-guide/src/node/utility/availability-store.md#2025-04-21_snippet_0\n\nLANGUAGE: dot\nCODE:\n```\ndigraph {\n label = \"Block data FSM\\n\\n\\n\";\n labelloc = \"t\";\n rankdir=\"LR\";\n\n st [label = \"Stored\"; shape = circle]\n inc [label = \"Included\"; shape = circle]\n fin [label = \"Finalized\"; shape = circle]\n prn [label = \"Pruned\"; shape = circle]\n\n st -> inc [label = \"Block\\nincluded\"]\n st -> prn [label = \"Stored block\\ntimed out\"]\n inc -> fin [label = \"Block\\nfinalized\"]\n inc -> st [label = \"Competing blocks\\nfinalized\"]\n fin -> prn [label = \"Block keep time\\n(1 day + 1 hour) elapsed\"]\n}\n```\n\n----------------------------------------\n\nTITLE: Polkadot-Specific Benchmark Command\nDESCRIPTION: Complete shell command for running the benchmark overhead calculation specifically for Polkadot runtime.\nSOURCE: https://github.com/paritytech/polkadot-sdk/blob/master/substrate/utils/frame/benchmarking-cli/src/overhead/README.md#2025-04-21_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\ncargo run --profile=production -- benchmark overhead --chain=polkadot-dev --wasm-execution=compiled --weight-path=runtime/polkadot/constants/src/weights/\n```\n\n----------------------------------------\n\nTITLE: Installing Polkadot CLI Shell Completion Persistently\nDESCRIPTION: This script installs the Polkadot CLI completion script for bash permanently. It creates a completion directory, copies the script, and updates the bash profile.\nSOURCE: https://github.com/paritytech/polkadot-sdk/blob/master/polkadot/doc/shell-completion.md#2025-04-21_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nCOMPL_DIR=$HOME/.completion\nmkdir -p $COMPL_DIR\ncp -f target/release/completion-scripts/polkadot.bash $COMPL_DIR/\necho \"source $COMPL_DIR/polkadot.bash\" >> $HOME/.bash_profile\nsource $HOME/.bash_profile\n```\n\n----------------------------------------\n\nTITLE: Visualizing Candidate Validation Flow using DOT\nDESCRIPTION: A directed graph showing the information flow between different subsystems and the Candidate Validation subsystem. It illustrates how Pvf-Checker, Backing, Approval Voting, and Dispute Coordinator subsystems interact with Candidate Validation, which in turn communicates with the PVF Host for precheck and validation operations.\nSOURCE: https://github.com/paritytech/polkadot-sdk/blob/master/polkadot/roadmap/implementers-guide/src/node/utility/candidate-validation.md#2025-04-21_snippet_0\n\nLANGUAGE: dot\nCODE:\n```\ndigraph {\n rankdir=\"LR\";\n\n pre [label = \"Pvf-Checker\"; shape = square]\n bac [label = \"Backing\"; shape = square]\n app [label = \"Approval\\nVoting\"; shape = square]\n dis [label = \"Dispute\\nCoordinator\"; shape = square]\n\n can [label = \"Candidate\\nValidation\"; shape = square]\n\n pvf [label = \"PVF Host\"; shape = square]\n\n pre -> can [style = dashed]\n bac -> can\n app -> can\n dis -> can\n\n can -> pvf [label = \"Precheck\"; style = dashed]\n can -> pvf [label = \"Validate\"]\n}\n```\n\n----------------------------------------\n\nTITLE: Building Chain Specification\nDESCRIPTION: Command to generate the chain specification file.\nSOURCE: https://github.com/paritytech/polkadot-sdk/blob/master/substrate/zombienet/0001-basic-warp-sync/README.md#2025-04-21_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\nsubstrate build-spec --chain=local > chain-spec.json\n```\n\n----------------------------------------\n\nTITLE: Router Primitives Header\nDESCRIPTION: Markdown header and description explaining the purpose of router primitives for XCM conversion between systems.\nSOURCE: https://github.com/paritytech/polkadot-sdk/blob/master/bridges/snowbridge/primitives/inbound-queue/README.md#2025-04-21_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n# Router Primitives\\n\\nInbound and outbound router logic. Does XCM conversion to a lowered, simpler format the Ethereum contracts can\\nunderstand.\n```\n\n----------------------------------------\n\nTITLE: Rust Documentation Example - Poor Documentation Style\nDESCRIPTION: Shows an example of poorly formatted documentation that lacks structure and proper organization of information.\nSOURCE: https://github.com/paritytech/polkadot-sdk/blob/master/docs/contributor/DOCUMENTATION_GUIDELINES.md#2025-04-21_snippet_1\n\nLANGUAGE: rust\nCODE:\n```\n/// This function works with input u32 x and multiplies it by two. If\n/// we optimize the other variant of it, we would be able to achieve more\n/// efficiency but I have to think about it. Probably can panic if the input\n/// overflows u32.\nfn multiply_by_2(x: u32) -> u32 { .. }\n```\n\n----------------------------------------\n\nTITLE: Defining VotesResponse Struct for Vote Recovery Protocol in Rust\nDESCRIPTION: This struct defines the response format for the vote recovery protocol. It contains votes that the responder has but the requester was missing, including dispute statements, validator indices, and signatures.\nSOURCE: https://github.com/paritytech/polkadot-sdk/blob/master/polkadot/roadmap/implementers-guide/src/node/disputes/dispute-distribution.md#2025-04-21_snippet_5\n\nLANGUAGE: rust\nCODE:\n```\nstruct VotesResponse {\n  /// All votes we have, but the requester was missing.\n  missing: Vec<(DisputeStatement, ValidatorIndex, ValidatorSignature)>,\n}\n```\n\n----------------------------------------\n\nTITLE: Handling Wakeup for Candidate Approval in Polkadot\nDESCRIPTION: This section describes the process of handling a previously-scheduled wakeup for a candidate under a specific block. It includes steps for loading necessary entries, determining required tranches, and deciding whether to trigger an assignment.\nSOURCE: https://github.com/paritytech/polkadot-sdk/blob/master/polkadot/roadmap/implementers-guide/src/node/approval/approval-voting.md#2025-04-21_snippet_9\n\nLANGUAGE: markdown\nCODE:\n```\n#### Handling Wakeup\n  * Handle a previously-scheduled wakeup of a candidate under a specific block.\n  * Requires `(relay_block, candidate_hash)`\n  * Load the `BlockEntry` and `CandidateEntry` from disk. If either is not present, this may have lost a race with\n    finality and can be ignored. Also load the `ApprovalEntry` for the block and candidate.\n  * [determine the `RequiredTranches` of the candidate](#determine-required-tranches).\n  * Determine if we should trigger our assignment.\n    * If we've already triggered or `OurAssignment` is `None`, we do not trigger.\n    * If we have  `RequiredTranches::All`, then we trigger if the candidate is [not approved](#check-approval). We have\n      no next wakeup as we assume that other validators are doing the same and we will be implicitly woken up by\n      handling new votes.\n    * If we have `RequiredTranches::Pending { considered, next_no_show, uncovered, maximum_broadcast, clock_drift }`,\n      then we trigger if our assignment's tranche is less than or equal to `maximum_broadcast` and the current tick,\n      with `clock_drift` applied, is at least the tick of our tranche.\n    * If we have `RequiredTranches::Exact { .. }` then we do not trigger, because this value indicates that no new\n      assignments are needed at the moment.\n  * If we should trigger our assignment\n    * Import the assignment to the `ApprovalEntry`\n    * Broadcast on network with an `ApprovalDistributionMessage::DistributeAssignment`.\n    * [Launch approval work](#launch-approval-work) for the candidate.\n  * [Schedule a new wakeup](#schedule-wakeup) of the candidate.\n```\n\n----------------------------------------\n\nTITLE: Generating Weights for Specific Runtimes\nDESCRIPTION: Command to generate weights for all pallets in specified runtimes (kusama and polkadot)\nSOURCE: https://github.com/paritytech/polkadot-sdk/blob/master/docs/contributor/weight-generation.md#2025-04-21_snippet_2\n\nLANGUAGE: sh\nCODE:\n```\n/cmd bench --runtime kusama polkadot\n```\n\n----------------------------------------\n\nTITLE: Configuring Rust Toolchain for Substrate Development\nDESCRIPTION: Commands to set up the Rust toolchain for Substrate development, setting the default to stable, updating both stable and nightly versions, and adding WebAssembly target support for the nightly toolchain.\nSOURCE: https://github.com/paritytech/polkadot-sdk/blob/master/templates/solochain/docs/rust-setup.md#2025-04-21_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\nrustup default stable\nrustup update\nrustup update nightly\nrustup target add wasm32-unknown-unknown --toolchain nightly\n```\n\n----------------------------------------\n\nTITLE: Visualizing Parachain Validator Interactions in DOT\nDESCRIPTION: This DOT code snippet creates a graph visualization of the interactions between parachain validators in the process of making a candidate block backable. It shows the flow from a validator seconding a block to other validators, leading to the block becoming backable.\nSOURCE: https://github.com/paritytech/polkadot-sdk/blob/master/polkadot/roadmap/implementers-guide/src/protocol-overview.md#2025-04-21_snippet_0\n\nLANGUAGE: dot\nCODE:\n```\ndigraph {\n\tsubgraph cluster_vg {\n\t\tlabel=<\n\t\t\tParachain Validators\n\t\t\t<br/>\n\t\t\t(subset of all)\n\t\t>\n\t\tlabeljust=l\n\t\tstyle=filled\n\t\tcolor=lightgrey\n\t\tnode [style=filled color=white]\n\n\t\tv1 [label=\"Validator 1\"]\n\t\tv2 [label=\"Validator 2\"]\n\t\tv3 [label=\"Validator 3\"]\n\n\t\tb [label=\"(3) Backable\", shape=box]\n\n\t\tv1 -> v2 [label=\"(2) Seconded\"]\n\t\tv1 -> v3 [label=\"(2) Seconded\"]\n\n\t\tv2 -> b [style=dashed arrowhead=none]\n\t\tv3 -> b [style=dashed arrowhead=none]\n\n```\n\n----------------------------------------\n\nTITLE: Defining HeadData Structure in Rust\nDESCRIPTION: Defines a type-safe abstraction around bytes for representing heads of parachains.\nSOURCE: https://github.com/paritytech/polkadot-sdk/blob/master/polkadot/roadmap/implementers-guide/src/types/candidate.md#2025-04-21_snippet_6\n\nLANGUAGE: rust\nCODE:\n```\nstruct HeadData(Vec<u8>);\n```\n\n----------------------------------------\n\nTITLE: Visualizing Collator-Validator Connections using DOT\nDESCRIPTION: This DOT code snippet generates a graph visualizing the connections between collators and validators in the network. It shows two collators connecting to two validators, demonstrating the many-to-many relationship between them.\nSOURCE: https://github.com/paritytech/polkadot-sdk/blob/master/polkadot/roadmap/implementers-guide/src/node/collators/collator-protocol.md#2025-04-21_snippet_0\n\nLANGUAGE: dot\nCODE:\n```\ndigraph {\n  c1 [shape=MSquare, label=\"Collator 1\"];\n  c2 [shape=MSquare, label=\"Collator 2\"];\n\n  v1 [shape=MSquare, label=\"Validator 1\"];\n  v2 [shape=MSquare, label=\"Validator 2\"];\n\n  c1 -> v1;\n  c1 -> v2;\n  c2 -> v2;\n}\n```\n\n----------------------------------------\n\nTITLE: Determining Approval of Candidate in Polkadot\nDESCRIPTION: This section is a placeholder for the process of determining the approval of a candidate. The actual implementation details are not provided in the given text.\nSOURCE: https://github.com/paritytech/polkadot-sdk/blob/master/polkadot/roadmap/implementers-guide/src/node/approval/approval-voting.md#2025-04-21_snippet_14\n\nLANGUAGE: markdown\nCODE:\n```\n### Determining Approval of Candidate\n```\n\n----------------------------------------\n\nTITLE: Using Subkey CLI Tool Reference\nDESCRIPTION: Code reference showing the subkey command syntax used for cryptographic operations in Substrate blockchains including key generation, signature operations, and HD wallet management.\nSOURCE: https://github.com/paritytech/polkadot-sdk/blob/master/substrate/scripts/ci/docker/subkey.Dockerfile.README.md#2025-04-21_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n# Subkey\n\nThe `subkey` program is a key management utility for Substrate-based blockchains. You can use the `subkey` program to\nperform the following tasks\n\n* Generate and inspect cryptographically-secure public and private key pairs.\n* Restore keys from secret phrases and raw seeds.\n* Sign and verify signatures on messages.\n* Sign and verify signatures for encoded transactions.\n* Derive hierarchical deterministic child key pairs.\n* [Documentation](https://docs.substrate.io/reference/command-line-tools/subkey/)\n```\n\n----------------------------------------\n\nTITLE: Installing Honggfuzz Dependency for XCM Simulator Fuzzer\nDESCRIPTION: This command installs the Honggfuzz dependency required for running the XCM Simulator Fuzzer. The '--locked' flag ensures version consistency.\nSOURCE: https://github.com/paritytech/polkadot-sdk/blob/master/polkadot/xcm/xcm-simulator/fuzzer/README.md#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ncargo install honggfuzz --locked\n```\n\n----------------------------------------\n\nTITLE: Implementing Approval Distribution V1 Message in Rust for Polkadot SDK\nDESCRIPTION: This code defines the ApprovalDistributionV1Message enum, which includes message types for assignments and approvals in the Approval Distribution subsystem. It's used for distributing assignments and approvals for candidates in recent, unfinalized blocks.\nSOURCE: https://github.com/paritytech/polkadot-sdk/blob/master/polkadot/roadmap/implementers-guide/src/types/network.md#2025-04-21_snippet_1\n\nLANGUAGE: rust\nCODE:\n```\nenum ApprovalDistributionV1Message {\n\t/// Assignments for candidates in recent, unfinalized blocks.\n\t///\n\t/// The u32 is the claimed index of the candidate this assignment corresponds to. Actually checking the assignment\n\t/// may yield a different result.\n\tAssignments(Vec<(IndirectAssignmentCert, u32)>),\n\t/// Approvals for candidates in some recent, unfinalized block.\n\tApprovals(Vec<IndirectSignedApprovalVote>),\n}\n```\n\n----------------------------------------\n\nTITLE: Updating Git Submodules\nDESCRIPTION: Command to ensure that Git submodules are up-to-date, which may be required for proper project functionality.\nSOURCE: https://github.com/paritytech/polkadot-sdk/blob/master/bridges/snowbridge/README.md#2025-04-21_snippet_8\n\nLANGUAGE: bash\nCODE:\n```\ngit submodule update\n```\n\n----------------------------------------\n\nTITLE: Implementing CommittedCandidateReceipt Structure in Rust\nDESCRIPTION: Defines a variant of the candidate receipt that includes the commitments alongside the descriptor. This is preferred when the candidate won't be executed but the committed data is important.\nSOURCE: https://github.com/paritytech/polkadot-sdk/blob/master/polkadot/roadmap/implementers-guide/src/types/candidate.md#2025-04-21_snippet_2\n\nLANGUAGE: rust\nCODE:\n```\nstruct CommittedCandidateReceipt {\n\tdescriptor: CandidateDescriptor,\n\tcommitments: CandidateCommitments,\n}\n```\n\n----------------------------------------\n\nTITLE: Illustrating Grid Topology in Polkadot SDK\nDESCRIPTION: This code snippet demonstrates the 2D grid topology used for distributing backed candidates and late statements outside the backing group. It shows a 3x4 matrix representation of validators.\nSOURCE: https://github.com/paritytech/polkadot-sdk/blob/master/polkadot/roadmap/implementers-guide/src/node/backing/statement-distribution.md#2025-04-21_snippet_1\n\nLANGUAGE: plaintext\nCODE:\n```\n0  1  2\n3  4  5\n6  7  8\n9 10\n```\n\n----------------------------------------\n\nTITLE: Adding GRANDPA Warp Sync Configuration\nDESCRIPTION: Adds warp sync support to GRANDPA consensus by configuring additional network protocol sets.\nSOURCE: https://github.com/paritytech/polkadot-sdk/blob/master/substrate/docs/Upgrading-2.0-to-3.0.md#2025-04-21_snippet_7\n\nLANGUAGE: diff\nCODE:\n```\n+\tconfig.network.extra_sets.push(grandpa::grandpa_peers_set_config());\n+\n+\t#[cfg(feature = \"cli\")]\n+\tconfig.network.request_response_protocols.push(sc_finality_grandpa_warp_sync::request_response_config_for_chain(\n+\t\t&config, task_manager.spawn_handle(), backend.clone(),\n+\t));\n```\n\n----------------------------------------\n\nTITLE: Defining DisputeRequest Structure in Rust for Dispute Distribution Protocol\nDESCRIPTION: This structure represents the request format for the dispute distribution protocol. It contains a candidate receipt, session index, invalid vote data, and valid vote data that make up a dispute.\nSOURCE: https://github.com/paritytech/polkadot-sdk/blob/master/polkadot/roadmap/implementers-guide/src/node/disputes/dispute-distribution.md#2025-04-21_snippet_0\n\nLANGUAGE: rust\nCODE:\n```\nstruct DisputeRequest {\n  /// The candidate being disputed.\n  pub candidate_receipt: CandidateReceipt,\n\n  /// The session the candidate appears in.\n  pub session_index: SessionIndex,\n\n  /// The invalid vote data that makes up this dispute.\n  pub invalid_vote: InvalidDisputeVote,\n\n  /// The valid vote that makes this dispute request valid.\n  pub valid_vote: ValidDisputeVote,\n}\n```\n\n----------------------------------------\n\nTITLE: Updating Runtime Weight and Block Parameters\nDESCRIPTION: Changes required to update runtime weight calculations, block parameters, and system configuration for the new version.\nSOURCE: https://github.com/paritytech/polkadot-sdk/blob/master/substrate/docs/Upgrading-2.0-to-3.0.md#2025-04-21_snippet_3\n\nLANGUAGE: rust\nCODE:\n```\nconst AVERAGE_ON_INITIALIZE_RATIO: Perbill = Perbill::from_percent(10);\nconst NORMAL_DISPATCH_RATIO: Perbill = Perbill::from_percent(75);\nconst MAXIMUM_BLOCK_WEIGHT: Weight = Weight::from_parts(2u64 * WEIGHT_REF_TIME_PER_SECOND, u64::MAX);\n\nparameter_types! {\n\tpub const BlockHashCount: BlockNumber = 2400;\n\tpub const Version: RuntimeVersion = VERSION;\n\tpub RuntimeBlockLength: BlockLength =\n\t\tBlockLength::max_with_normal_ratio(5 * 1024 * 1024, NORMAL_DISPATCH_RATIO);\n\tpub RuntimeBlockWeights: BlockWeights = BlockWeights::builder()\n\t\t.base_block(BlockExecutionWeight::get())\n\t\t.for_class(DispatchClass::all(), |weights| {\n\t\t\tweights.base_extrinsic = ExtrinsicBaseWeight::get();\n\t\t})\n\t\t.for_class(DispatchClass::Normal, |weights| {\n\t\t\tweights.max_total = Some(NORMAL_DISPATCH_RATIO * MAXIMUM_BLOCK_WEIGHT);\n\t\t})\n\t\t.for_class(DispatchClass::Operational, |weights| {\n\t\t\tweights.max_total = Some(MAXIMUM_BLOCK_WEIGHT);\n\t\t\tweights.reserved = Some(\n\t\t\t\tMAXIMUM_BLOCK_WEIGHT - NORMAL_DISPATCH_RATIO * MAXIMUM_BLOCK_WEIGHT\n\t\t\t);\n\t\t})\n\t\t.avg_block_initialization(AVERAGE_ON_INITIALIZE_RATIO)\n\t\t.build_or_panic();\n}\n\nconst_assert!(NORMAL_DISPATCH_RATIO.deconstruct() >= AVERAGE_ON_INITIALIZE_RATIO.deconstruct());\n\nimpl frame_system::Config for Runtime {\n\ttype BaseCallFilter = frame_support::traits::AllowAll;\n\ttype BlockWeights = RuntimeBlockWeights;\n\ttype BlockLength = RuntimeBlockLength;\n\ttype DbWeight = RocksDbWeight;\n\ttype RuntimeOrigin = RuntimeOrigin;\n\ttype RuntimeCall = RuntimeCall;\n\ttype Index = Index;\n\ttype BlockNumber = BlockNumber;\n\ttype Hash = Hash;\n\ttype Hashing = BlakeTwo256;\n\ttype AccountId = AccountId;\n\ttype Lookup = Indices;\n\ttype Header = generic::Header<BlockNumber, BlakeTwo256>;\n\ttype Event = Event;\n\ttype BlockHashCount = BlockHashCount;\n\ttype Version = Version;\n\ttype PalletInfo = PalletInfo;\n\ttype AccountData = pallet_balances::AccountData<Balance>;\n\ttype OnNewAccount = ();\n\ttype OnKilledAccount = ();\n\ttype SystemWeightInfo = frame_system::weights::SubstrateWeight<Runtime>;\n}\n```\n\n----------------------------------------\n\nTITLE: Building Substrate Docker Image\nDESCRIPTION: Command to build the parity/substrate Docker image using the build script.\nSOURCE: https://github.com/paritytech/polkadot-sdk/blob/master/substrate/docker/README.md#2025-04-21_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\n./build.sh\n```\n\n----------------------------------------\n\nTITLE: Defining GPL-3.0 License with Classpath Exception\nDESCRIPTION: License header text that declares the project uses GPL-3.0-or-later license with Classpath-exception-2.0 modifier.\nSOURCE: https://github.com/paritytech/polkadot-sdk/blob/master/substrate/client/executor/polkavm/README.md#2025-04-21_snippet_0\n\nLANGUAGE: text\nCODE:\n```\nGPL-3.0-or-later WITH Classpath-exception-2.0\n```\n\n----------------------------------------\n\nTITLE: Cloning the Substrate Solochain Template\nDESCRIPTION: Commands to clone the Substrate solochain template repository and navigate to the project directory. This is the first step in getting started with Substrate development.\nSOURCE: https://github.com/paritytech/polkadot-sdk/blob/master/templates/solochain/README.md#2025-04-21_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\ngit clone https://github.com/paritytech/polkadot-sdk-solochain-template.git solochain-template\n\ncd solochain-template\n```\n\n----------------------------------------\n\nTITLE: Updating Runtime for set_code Intrinsic Benchmarking in Polkadot SDK\nDESCRIPTION: Instructions for updating the runtime used in benchmarking the set_code intrinsic. The new runtime should be copied from the specified target directory to the current location.\nSOURCE: https://github.com/paritytech/polkadot-sdk/blob/master/substrate/frame/system/benchmarking/res/README.md#2025-04-21_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\ntarget/release/wbuild/kitchensink-runtime/kitchensink_runtime.compact.compressed.wasm\n```\n\n----------------------------------------\n\nTITLE: Implementing ValidationParams Structure in Rust\nDESCRIPTION: Defines parameters for evaluating the parachain validity function, including previous head data, block data, and relay chain information.\nSOURCE: https://github.com/paritytech/polkadot-sdk/blob/master/polkadot/roadmap/implementers-guide/src/types/candidate.md#2025-04-21_snippet_4\n\nLANGUAGE: rust\nCODE:\n```\npub struct ValidationParams {\n\tpub parent_head: HeadData,\n\tpub block_data: BlockData,\n\tpub relay_parent_number: RelayChainBlockNumber,\n\tpub relay_parent_storage_root: Hash,\n}\n```\n\n----------------------------------------\n\nTITLE: System Overview Points in Markdown\nDESCRIPTION: Markdown list detailing the key assumptions and goals of the validator disabling system, including disablement conditions, duration, and restrictions on validator activities.\nSOURCE: https://github.com/paritytech/polkadot-sdk/blob/master/polkadot/roadmap/implementers-guide/src/protocol-validator-disabling.md#2025-04-21_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n1. If validator gets slashed (even 0%) we mark them as disabled in the runtime and on the node side.\n2. We only disable up to byzantine threshold of the validators.\n3. If there are more offenders than byzantine threshold disable only the highest offenders.\n4. Disablement lasts for 1 era.\n5. Disabled validators remain in the active validator set but have some limited permissions.\n6. Disabled validators can get re-elected.\n7. Disabled validators can participate in approval checking.\n8. Disabled validators can participate in GRANDPA/BEEFY, but equivocations cause disablement.\n9. Disabled validators cannot author blocks.\n10. Disabled validators cannot back candidates.\n11. Disabled validators cannot initiate disputes, but their votes are still counted if a dispute occurs.\n12. Disabled validators making dispute statements no-show in approval checking.\n```\n\n----------------------------------------\n\nTITLE: Service Module Implementation Changes in Rust\nDESCRIPTION: A diff showing modifications to the service.rs file implementing node functionality. Key changes include updated GRANDPA finality provider implementation, keystore container usage, authority discovery updates, and network configuration changes.\nSOURCE: https://github.com/paritytech/polkadot-sdk/blob/master/substrate/docs/Upgrading-2.0-to-3.0.md#2025-04-21_snippet_8\n\nLANGUAGE: diff\nCODE:\n```\n--- a/bin/node/cli/src/service.rs\n+++ b/bin/node/cli/src/service.rs\n@@ -22,11 +22,10 @@\n\n use std::sync::Arc;\n use sc_consensus_babe;\n-use grandpa::{self, FinalityProofProvider as GrandpaFinalityProofProvider};\n use node_primitives::Block;\n use node_runtime::RuntimeApi;\n use sc_service::{\n-\tconfig::{Role, Configuration}, error::{Error as ServiceError},\n+\tconfig::{Configuration}, error::{Error as ServiceError},\n \tRpcHandlers, TaskManager,\n };\n use sp_inherents::InherentDataProviders;\n@@ -34,8 +33,8 @@ use sc_network::{Event, NetworkService};\n use sp_runtime::traits::Block as BlockT;\n use futures::prelude::*;\n use sc_client_api::{ExecutorProvider, RemoteBackend};\n-use sp_core::traits::BareCryptoStorePtr;\n use node_executor::Executor;\n+use sc_telemetry::TelemetryConnectionNotifier;\n\n type FullClient = sc_service::TFullClient<Block, RuntimeApi, Executor>;\n type FullBackend = sc_service::TFullBackend<Block>;\n@@ -58,13 +57,10 @@ pub fn new_partial(config: &Configuration) -> Result<sc_service::PartialComponen\n \t\t\tgrandpa::LinkHalf<Block, FullClient, FullSelectChain>,\n \t\t\tsc_consensus_babe::BabeLink<Block>,\n \t\t),\n-\t\t(\n-\t\t\tgrandpa::SharedVoterState,\n-\t\t\tArc<GrandpaFinalityProofProvider<FullBackend, Block>>,\n-\t\t),\n+\t\tgrandpa::SharedVoterState,\n \t)\n >, ServiceError> {\n-\tlet (client, backend, keystore, task_manager) =\n+\tlet (client, backend, keystore_container, task_manager) =\n \t\tsc_service::new_full_parts::<Block, RuntimeApi, Executor>(&config)?;\n \tlet client = Arc::new(client);\n\n@@ -94,7 +90,6 @@ pub fn new_partial(config: &Configuration) -> Result<sc_service::PartialComponen\n \t\tbabe_link.clone(),\n \t\tblock_import.clone(),\n \t\tSome(Box::new(justification_import)),\n-\t\tNone,\n \t\tclient.clone(),\n \t\tselect_chain.clone(),\n \t\tinherent_data_providers.clone(),\n@@ -111,10 +106,12 @@ pub fn new_partial(config: &Configuration) -> Result<sc_service::PartialComponen\n \t\tlet justification_stream = grandpa_link.justification_stream();\n \t\tlet shared_authority_set = grandpa_link.shared_authority_set().clone();\n \t\tlet shared_voter_state = grandpa::SharedVoterState::empty();\n-\t\tlet finality_proof_provider =\n-\t\t\tGrandpaFinalityProofProvider::new_for_service(backend.clone(), client.clone());\n+\t\tlet rpc_setup = shared_voter_state.clone();\n \n-\t\tlet rpc_setup = (shared_voter_state.clone(), finality_proof_provider.clone());\n+\t\tlet finality_proof_provider = grandpa::FinalityProofProvider::new_for_service(\n+\t\t\tbackend.clone(),\n+\t\t\tSome(shared_authority_set.clone()),\n+\t\t);\n \n \t\tlet babe_config = babe_link.config().clone();\n \t\tlet shared_epoch_changes = babe_link.epoch_changes().clone();\n@@ -122,13 +119,15 @@ pub fn new_partial(config: &Configuration) -> Result<sc_service::PartialComponen\n \t\tlet client = client.clone();\n \t\tlet pool = transaction_pool.clone();\n \t\tlet select_chain = select_chain.clone();\n-\t\tlet keystore = keystore.clone();\n+\t\tlet keystore = keystore_container.sync_keystore();\n+\t\tlet chain_spec = config.chain_spec.cloned_box();\n \n \t\tlet rpc_extensions_builder = move |deny_unsafe, subscription_executor| {\n \t\t\tlet deps = node_rpc::FullDeps {\n \t\t\t\tclient: client.clone(),\n \t\t\t\tpool: pool.clone(),\n \t\t\t\tselect_chain: select_chain.clone(),\n+\t\t\t\tchain_spec: chain_spec.cloned_box(),\n \t\t\t\tdeny_unsafe,\n \t\t\t\tbabe: node_rpc::BabeDeps {\n \t\t\t\t\tbabe_config: babe_config.clone(),\n@@ -151,9 +150,15 @@ pub fn new_partial(config: &Configuration) -> Result<sc_service::PartialComponen\n \t};\n \n \tOk(sc_service::PartialComponents {\n-\t\tclient, backend, task_manager, keystore, select_chain, import_queue, transaction_pool,\n+\t\tclient,\n+\t\tbackend,\n+\t\ttask_manager,\n+\t\tkeystore_container,\n+\t\tselect_chain,\n+\t\timport_queue,\n+\t\ttransaction_pool,\n \t\tinherent_data_providers,\n-\t\tother: (rpc_extensions_builder, import_setup, rpc_setup)\n+\t\tother: (rpc_extensions_builder, import_setup, rpc_setup),\n \t})\n }\n \n@@ -168,19 +173,32 @@ pub struct NewFullBase {\n \n /// Creates a full service from the configuration.\n pub fn new_full_base(\n-\tconfig: Configuration,\n+\tmut config: Configuration,\n \twith_startup_data: impl FnOnce(\n \t\t&sc_consensus_babe::BabeBlockImport<Block, FullClient, FullGrandpaBlockImport>,\n \t\t&sc_consensus_babe::BabeLink<Block>,\n \t)\n ) -> Result<NewFullBase, ServiceError> {\n \tlet sc_service::PartialComponents {\n-\t\tclient, backend, mut task_manager, import_queue, keystore, select_chain, transaction_pool,\n+\t\tclient,\n+\t\tbackend,\n+\t\tmut task_manager,\n+\t\timport_queue,\n+\t\tkeystore_container,\n+\t\tselect_chain,\n+\t\ttransaction_pool,\n \t\tinherent_data_providers,\n \t\tother: (rpc_extensions_builder, import_setup, rpc_setup),\n \t} = new_partial(&config)?;\n \n-\tlet (shared_voter_state, finality_proof_provider) = rpc_setup;\n+\tlet shared_voter_state = rpc_setup;\n+\n+\tconfig.network.extra_sets.push(grandpa::grandpa_peers_set_config());\n+\n+\t#[cfg(feature = \"cli\")]\n+\tconfig.network.request_response_protocols.push(sc_finality_grandpa_warp_sync::request_response_config_for_chain(\n+\t\t&config, task_manager.spawn_handle(), backend.clone(),\n+\t));\n \n \tlet (network, network_status_sinks, system_rpc_tx, network_starter) =\n \t\tsc_service::build_network(sc_service::BuildNetworkParams {\n@@ -191,8 +209,6 @@ pub fn new_full_base(\n \t\t\timport_queue,\n \t\t\ton_demand: None,\n \t\t\tblock_announce_validator_builder: None,\n-\t\t\tfinality_proof_request_builder: None,\n-\t\t\tfinality_proof_provider: Some(finality_proof_provider.clone()),\n \t\t})?;\n \n \tif config.offchain_worker.enabled {\n@@ -203,26 +219,28 @@ pub fn new_full_base(\n \n \tlet role = config.role.clone();\n \tlet force_authoring = config.force_authoring;\n+\tlet backoff_authoring_blocks =\n+\t\tSome(sc_consensus_slots::BackoffAuthoringOnFinalizedHeadLagging::default());\n \tlet name = config.network.node_name.clone();\n \tlet enable_grandpa = !config.disable_grandpa;\n \tlet prometheus_registry = config.prometheus_registry().cloned();\n-\tlet telemetry_connection_sinks = sc_service::TelemetryConnectionSinks::default();\n \n-\tsc_service::spawn_tasks(sc_service::SpawnTasksParams {\n-\t\tconfig,\n-\t\tbackend: backend.clone(),\n-\t\tclient: client.clone(),\n-\t\tkeystore: keystore.clone(),\n-\t\tnetwork: network.clone(),\n-\t\trpc_extensions_builder: Box::new(rpc_extensions_builder),\n-\t\ttransaction_pool: transaction_pool.clone(),\n-\t\ttask_manager: &mut task_manager,\n-\t\ton_demand: None,\n-\t\tremote_blockchain: None,\n-\t\ttelemetry_connection_sinks: telemetry_connection_sinks.clone(),\n-\t\tnetwork_status_sinks: network_status_sinks.clone(),\n-\t\tsystem_rpc_tx,\n-\t})?;\n+\tlet (_rpc_handlers, telemetry_connection_notifier) = sc_service::spawn_tasks(\n+\t\tsc_service::SpawnTasksParams {\n+\t\t\tconfig,\n+\t\t\tbackend: backend.clone(),\n+\t\t\tclient: client.clone(),\n+\t\t\tkeystore: keystore_container.sync_keystore(),\n+\t\t\tnetwork: network.clone(),\n+\t\t\trpc_extensions_builder: Box::new(rpc_extensions_builder),\n+\t\t\ttransaction_pool: transaction_pool.clone(),\n+\t\t\ttask_manager: &mut task_manager,\n+\t\t\ton_demand: None,\n+\t\t\tremote_blockchain: None,\n+\t\t\tnetwork_status_sinks: network_status_sinks.clone(),\n+\t\t\tsystem_rpc_tx,\n+\t\t},\n+\t)?;\n \n \tlet (block_import, grandpa_link, babe_link) = import_setup;\n \n@@ -230,6 +248,7 @@ pub fn new_full_base(\n \n \tif let sc_service::config::Role::Authority { .. } = &role {\n \t\tlet proposer = sc_basic_authorship::ProposerFactory::new(\n+\t\t\ttask_manager.spawn_handle(),\n \t\t\tclient.clone(),\n \t\t\ttransaction_pool.clone(),\n \t\t\tprometheus_registry.as_ref(),\n@@ -239,7 +258,7 @@ pub fn new_full_base(\n \t\t\tsp_consensus::CanAuthorWithNativeVersion::new(client.executor().clone());\n \n \t\tlet babe_config = sc_consensus_babe::BabeParams {\n-\t\t\tkeystore: keystore.clone(),\n+\t\t\tkeystore: keystore_container.sync_keystore(),\n \t\t\tclient: client.clone(),\n \t\t\tselect_chain,\n \t\t\tenv: proposer,\n@@ -247,6 +266,7 @@ pub fn new_full_base(\n \t\t\tsync_oracle: network.clone(),\n \t\t\tinherent_data_providers: inherent_data_providers.clone(),\n \t\t\tforce_authoring,\n+\t\t\tbackoff_authoring_blocks,\n \t\t\tbabe_link,\n \t\t\tcan_author_with,\n \t\t};\n@@ -256,42 +276,30 @@ pub fn new_full_base(\n \t}\n \n \t// Spawn authority discovery module.\n-\tif matches!(role, Role::Authority{..} | Role::Sentry {..}) {\n-\t\tlet (sentries, authority_discovery_role) = match role {\n-\t\t\tsc_service::config::Role::Authority { ref sentry_nodes } => (\n-\t\t\t\tsentry_nodes.clone(),\n-\t\t\t\tsc_authority_discovery::Role::Authority (\n-\t\t\t\t\tkeystore.clone(),\n-\t\t\t\t),\n-\t\t\t),\n-\t\t\tsc_service::config::Role::Sentry {..} => (\n-\t\t\t\tvec![],\n-\t\t\t\tsc_authority_discovery::Role::Sentry,\n-\t\t\t),\n-\t\t\t_ => unreachable!(\"Due to outer matches! constraint; qed.\")\n-\t\t};\n-\n+\tif role.is_authority() {\n+\t\tlet authority_discovery_role = sc_authority_discovery::Role::PublishAndDiscover(\n+\t\t\tkeystore_container.keystore(),\n+\t\t);\n \t\tlet dht_event_stream = network.event_stream(\"authority-discovery\")\n \t\t\t.filter_map(|e| async move { match e {\n \t\t\t\tEvent::Dht(e) => Some(e),\n \t\t\t\t_ => None,\n-\t\t\t}}).boxed();\n+\t\t\t}});\n \t\tlet (authority_discovery_worker, _service) = sc_authority_discovery::new_worker_and_service(\n \t\t\tclient.clone(),\n \t\t\tnetwork.clone(),\n-\t\t\tsentries,\n-\t\t\tdht_event_stream,\n+\t\t\tBox::pin(dht_event_stream),\n \t\t\tauthority_discovery_role,\n \t\t\tprometheus_registry.clone(),\n \t\t);\n \n-\t\ttask_manager.spawn_handle().spawn(\"authority-discovery-worker\", authority_discovery_worker);\n+\t\ttask_manager.spawn_handle().spawn(\"authority-discovery-worker\", authority_discovery_worker.run());\n \t}\n \n \t// if the node isn't actively participating in consensus then it doesn't\n \t// need a keystore, regardless of which protocol we use below.\n \tlet keystore = if role.is_authority() {\n-\t\tSome(keystore as BareCryptoStorePtr)\n+\t\tSome(keystore_container.sync_keystore())\n \t} else {\n \t\tNone\n \t};\n@@ -317,8 +325,7 @@ pub fn new_full_base(\n \t\t\tconfig,\n \t\t\tlink: grandpa_link,\n \t\t\tnetwork: network.clone(),\n-\t\t\tinherent_data_providers: inherent_data_providers.clone(),\n-\t\t\ttelemetry_on_connect: Some(telemetry_connection_sinks.on_connect_stream()),\n```\n\n----------------------------------------\n\nTITLE: Defining CollationSecondedSignal Structure in Rust for Polkadot Parachains\nDESCRIPTION: Defines the CollationSecondedSignal struct which contains the relay parent hash and the statement about seconding the collation. This is returned when a collation is seconded by a validator.\nSOURCE: https://github.com/paritytech/polkadot-sdk/blob/master/polkadot/roadmap/implementers-guide/src/node/collators/collation-generation.md#2025-04-21_snippet_2\n\nLANGUAGE: rust\nCODE:\n```\n/// Signal that is being returned when a collation was seconded by a validator.\npub struct CollationSecondedSignal {\n  /// The hash of the relay chain block that was used as context to sign [`Self::statement`].\n  pub relay_parent: Hash,\n  /// The statement about seconding the collation.\n  ///\n  /// Anything else than `Statement::Seconded` is forbidden here.\n  pub statement: SignedFullStatement,\n}\n```\n\n----------------------------------------\n\nTITLE: Defining GPL License with Classpath Exception\nDESCRIPTION: Text declaration of the GPL-3.0-or-later license with Classpath-exception-2.0 for the Polkadot SDK project. This defines the terms under which the software can be used, modified and distributed.\nSOURCE: https://github.com/paritytech/polkadot-sdk/blob/master/substrate/client/executor/wasmtime/README.md#2025-04-21_snippet_0\n\nLANGUAGE: text\nCODE:\n```\nGPL-3.0-or-later WITH Classpath-exception-2.0\n```\n\n----------------------------------------\n\nTITLE: Generating Raw Chain Specification\nDESCRIPTION: Command to create a raw chain specification for use with chopsticks\nSOURCE: https://github.com/paritytech/polkadot-sdk/blob/master/templates/parachain/README.md#2025-04-21_snippet_8\n\nLANGUAGE: bash\nCODE:\n```\nchain-spec-builder create --raw-storage --relay-chain \"rococo-local\" --para-id {{PARACHAIN_ID}} --runtime \\\n    target/release/wbuild/parachain-template-runtime/parachain_template_runtime.wasm named-preset development\n```\n\n----------------------------------------\n\nTITLE: Running Zombienet Integration Test for Malus in Bash\nDESCRIPTION: This snippet demonstrates how to set up environment variables, authenticate with Google Cloud, and run a Zombienet integration test for the Malus tool. It includes steps for accessing logs after test completion.\nSOURCE: https://github.com/paritytech/polkadot-sdk/blob/master/polkadot/node/malus/README.md#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n# declare the containers pulled in by zombie-net test definitions\nexport MALUS_IMAGE=docker.io/paritypr/malus:4131-ccd09bbf\nexport ZOMBIENET_INTEGRATION_TEST_IMAGE=docker.io/paritypr/synth-wave:4131-0.9.12-ccd09bbf-29a1ac18\nexport COL_IMAGE=docker.io/paritypr/colander:4131-ccd09bbf\n\n# login chore, once, with the values as provided in the above guide\ngcloud auth login\ngcloud config set project \"parity-zombienet\"\ngcloud container clusters get-credentials \"parity-zombienet\" --zone \"europe-west3-b\" --project parity-zombienet\n\n# launching the actual test\ncd zombienet\nnpm run build\nnode dist/cli.js test <path to polkadot repo>/node/malus/integrationtests/0001-dispute-valid-block.zndsl\n\n# Access  logs (in google cloud storage)\ngsutil ls gs://zombienet-logs/zombie-<namespace uniqueId>/logs/\n```\n\n----------------------------------------\n\nTITLE: Defining MultiDisputeStatementSet Type in Rust\nDESCRIPTION: Creates a type alias for a vector of DisputeStatementSet to handle multiple disputes.\nSOURCE: https://github.com/paritytech/polkadot-sdk/blob/master/polkadot/roadmap/implementers-guide/src/types/disputes.md#2025-04-21_snippet_4\n\nLANGUAGE: rust\nCODE:\n```\ntype MultiDisputeStatementSet = Vec<DisputeStatementSet>;\n```\n\n----------------------------------------\n\nTITLE: Declaring Copyright and License for Polkadot\nDESCRIPTION: This code snippet contains the copyright notice and license declaration for the Polkadot project. It specifies that Polkadot is free software distributed under the GNU General Public License version 3 or later, with no warranty.\nSOURCE: https://github.com/paritytech/polkadot-sdk/blob/master/polkadot/file_header.txt#2025-04-21_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\n// Copyright (C) Parity Technologies (UK) Ltd.\n// This file is part of Polkadot.\n\n// Polkadot is free software: you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n\n// Polkadot is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n\n// You should have received a copy of the GNU General Public License\n// along with Polkadot.  If not, see <http://www.gnu.org/licenses/>.\n```\n\n----------------------------------------\n\nTITLE: Cachegrind Cache Miss Profiling Results\nDESCRIPTION: Sample output from cache miss profiling using Cachegrind, showing instruction and data cache performance metrics.\nSOURCE: https://github.com/paritytech/polkadot-sdk/blob/master/polkadot/node/subsystem-bench/README.md#2025-04-21_snippet_5\n\nLANGUAGE: plaintext\nCODE:\n```\n$ target/testnet/subsystem-bench --cache-misses cache-misses-data-availability-read.yaml\n$ cat cachegrind_report.txt\nI refs:        64,622,081,485\nI1  misses:         3,018,168\n...\n```\n\n----------------------------------------\n\nTITLE: PGP Public Key for Parity Security Team\nDESCRIPTION: The PGP public key for secure, encrypted communication with the Parity security team when reporting vulnerabilities. This key can be used to encrypt vulnerability reports sent to security@parity.io.\nSOURCE: https://github.com/paritytech/polkadot-sdk/blob/master/docs/contributor/SECURITY.md#2025-04-21_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\n-----BEGIN PGP PUBLIC KEY BLOCK-----\n\nmQINBF0vHwQBEADKui4qAo4bzdzRhMm+uhUpYGf8jjjmET3zJ8kKQIpp6JTsV+HJ\n6m1We0QYeMRXoOYH1xVHBf2zNCuHS0nSQdUCQA7SHWsPB05STa2hvlR7fSdQnCCp\ngnLOJWXvvedlRDIAhvqI6cwLdUlXgVSKEwrwmrpiBhh4NxI3qX+LyIa+Ovkchu2S\nd/YCnE4GqojSGRfJYiGwe2N+sF7OfaoKhQuTrtdDExHrMU4cWnTXW2wyxTr4xkj9\njS2WeLVZWflvkDHT8JD9N6jNxBVEF/Qvjk83zI0kCOzkhek8x+YUgfLq3/rHOYbX\n3pW21ccHYPacHjHWvKE+xRebjeEhJ4KxKHfCVjQcxybwDBqDka1AniZt4CQ7UORf\nMU/ue2oSZ9nNg0uMdb/0AbQPZ04OlMcYPAPWzFL08nVPox9wT9uqlL6JtcOeC90h\noOeDmfgwmjMmdwWTRgt9qQjcbgXzVvuAzIGbzj1X3MdLspWdHs/d2+US4nji1TkN\noYIW7vE+xkd3aB+NZunIlm9Rwd/0mSgDg+DaNa5KceOLhq0/qKgcXC/RRU29I8II\ntusRoR/oesGJGYTjh4k6PJkG+nvDPsoQrwYT44bhnniS1xYkxWYXF99JFI7LgMdD\ne1SgKeIDVpvm873k82E6arp5655Wod1XOjaXBggCwFp84eKcEZEN+1qEWwARAQAB\ntClQYXJpdHkgU2VjdXJpdHkgVGVhbSA8c2VjdXJpdHlAcGFyaXR5LmlvPokCVAQT\nAQoAPhYhBJ1LK264+XFW0ZZpqf8IEtSRuWeYBQJdLx8EAhsDBQkDwmcABQsJCAcC\nBhUKCQgLAgQWAgMBAh4BAheAAAoJEP8IEtSRuWeYL84QAI6NwnwS561DWYYRAd4y\nocGPr3CnwFSt1GjkSkRy3B+tMhzexBg1y7EbLRUefIrO4LwOlywtRk8tTRGgEI4i\n5xRLHbOkeolfgCFSpOj5d8cMKCt5HEIv18hsv6dkrzlSYA5NLX/GRBEh3F/0sGny\nvCXapfxa1cx72sU7631JBK7t2Tf+MfwxdfyFZ9TI9WdtP5AfVjgTkIVkEDFcZPTc\nn3CYXqTYFIBCNUD8LP4iTi3xUt7pTGJQQoFT8l15nJCgzRYQ+tXpoTRlf+/LtXmw\n6iidPV87E06jHdK9666rBouIabAtx7i0/4kwo+bSZ8DiSKRUaehiHGd212HSEmdF\njxquWE4pEzoUowYznhSIfR+WWIqRBHxEYarP4m98Hi+VXZ7Fw1ytzO8+BAKnLXnj\n2W2+T9qJks5gqVEoaWNnqpvya6JA11QZvZ0w7Om2carDc2ILNm2Xx9J0mRUye8P0\nKxcgqJuKNGFtugebQAsXagkxOKsdKna1PlDlxEfTf6AgI3ST8qSiMAwaaIMB/REF\nVKUapGoslQX4tOCjibI2pzEgE//D8NAaSVu2A9+BUcFERdZRxsI7fydIXNeZ2R46\nN2qfW+DP3YR/14QgdRxDItEavUoE1vByRXwIufKAkVemOZzIoFXKFsDeXwqTVW5i\n6CXu6OddZ3QHDiT9TEbRny4QuQINBF0vKCwBEACnP5J7LEGbpxNBrPvGdxZUo0YA\nU8RgeKDRPxJTvMo27V1IPZGaKRCRq8LBfg/eHhqZhQ7SLJBjBljd8kuT5dHDBTRe\njE1UIOhmnlSlrEJjAmpVO08irlGpq1o+8mGcvkBsR0poCVjeNeSnwYfRnR+c3GK5\nEr6/JRqfN4mJvnEC9/Pbm6C7ql6YLKxC3yqzF97JL5brbbuozrW7nixY/yAI8619\nVlBIMP7PAUbGcnSQyuV5b/Wr2Sgr6NJclnNSLjh2U9/Du6w/0tDGlMBts8HjRnWJ\nBXbkTdQKCTaqgK68kTKSiN1/x+lynxHC2AavMpH/08Kopg2ZCzJowMKIgcB+4Z/I\nDJKZWHWKumhaZMGXcWgzgcByog9IpamuROEZFJNEUAFf7YIncEckPSif4looiOdS\nVurKZGvYXXaGSsZbGgHxI5CWu7ZxMdLBLvtOcCYmRQrG+g/h+PGU5BT0bNAfNTkm\nV3/n1B/TWbpWRmB3AwT2emQivXHkaubGI0VivhaO43AuI9JWoqiMqFtxbuTeoxwD\nxlu2Dzcp0v+AR4T5cIG9D5/+yiPc25aIY7cIKxuNFHIDL4td5fwSGC7vU6998PIG\n2Y48TGBnw7zpEfDfMayqAeBjX0YU6PTNsvS5O6bP3j4ojTOUYD7Z8QdCvgISDID3\nWMGAdmSwmCRvsQ/OJwARAQABiQI8BBgBCgAmFiEEnUsrbrj5cVbRlmmp/wgS1JG5\nZ5gFAl0vKCwCGwwFCQB2pwAACgkQ/wgS1JG5Z5hdbw//ZqR+JcWm59NUIHjauETJ\nsYDYhcAfa3txTacRn5uPz/TQiTd7wZ82+G8Et0ZnpEHy6eWyBqHpG0hiPhFBzxjY\nnhjHl8jJeyo2mQIVJhzkL58BHBZk8WM2TlaU7VxZ6TYOmP2y3qf6FD6mCcrQ4Fml\nE9f0lyVUoI/5Zs9oF0izRk8vkwaY3UvLM7XEY6nM8GnFG8kaiZMYmx26Zo7Uz31G\n7EGGZFsrVDXfNhSJyz79Gyn+Lx9jOTdoR0sH/THYIIosE83awMGE6jKeuDYTbVWu\n+ZtHQef+pRteki3wvNLJK+kC1y3BtHqDJS9Lqx0s8SCiVozlC+fZfC9hCtU7bXJK\n0UJZ4qjSvj6whzfaNgOZAqJpmwgOnd8W/3YJk1DwUeX98FcU38MR23SOkx2EDdDE\n77Kdu62vTs/tLmOTuyKBvYPaHaYulYjQTxurG+o8vhHtaL87ARvuq+83dj+nO5z3\n5O9vkcVJYWjOEnJe7ZvCTxeLJehpCmHIbyUuDx5P24MWVbyXOxIlxNxTqlub5GlW\nrQF6Qsa/0k9TRk7Htbct6fAA0/VahJS0g096MrTH8AxBXDNE8lIoNeGikVlaxK9Z\nS+aannlWYIJymZ4FygIPPaRlzhAoXBuJd8OaR5giC7dS1xquxKOiQEXTGsLeGFaI\nBZYiIhW7GG4ozvKDqyNm4eg=\n=yKcB\n-----END PGP PUBLIC KEY BLOCK-----\n```\n\n----------------------------------------\n\nTITLE: Visualizing PVF Host System Architecture with DOT Graph\nDESCRIPTION: A directed graph visualization showing the flow between system components including the Candidate Validation Subsystem, PVF Host, worker processes, and job processes. The graph illustrates both preparation and execution paths with their respective sandboxing levels.\nSOURCE: https://github.com/paritytech/polkadot-sdk/blob/master/polkadot/roadmap/implementers-guide/src/node/utility/pvf-host-and-workers.md#2025-04-21_snippet_0\n\nLANGUAGE: dot\nCODE:\n```\ndigraph {\n rankdir=\"LR\";\n\n can [label = \"Candidate\\nValidation\\nSubsystem\"; shape = square]\n\n pvf [label = \"PVF Host\"; shape = square]\n\n pq [label = \"Prepare\\nQueue\"; shape = square]\n eq [label = \"Execute\\nQueue\"; shape = square]\n pp [label = \"Prepare\\nPool\"; shape = square]\n\n subgraph \"cluster partial_sandbox_prep\" {\n  label = \"polkadot-prepare-worker\\n(Partial Sandbox)\\n\\n\\n\";\n  labelloc = \"t\";\n\n  pw [label = \"Prepare\\nWorker\"; shape = square]\n\n  subgraph \"cluster full_sandbox_prep\" {\n   label = \"Fully Isolated Sandbox\\n\\n\\n\";\n   labelloc = \"t\";\n\n   pj [label = \"Prepare\\nJob\"; shape = square]\n  }\n }\n\n subgraph \"cluster partial_sandbox_exec\" {\n  label = \"polkadot-execute-worker\\n(Partial Sandbox)\\n\\n\\n\";\n  labelloc = \"t\";\n\n  ew [label = \"Execute\\nWorker\"; shape = square]\n\n  subgraph \"cluster full_sandbox_exec\" {\n   label = \"Fully Isolated Sandbox\\n\\n\\n\";\n   labelloc = \"t\";\n\n   ej [label = \"Execute\\nJob\"; shape = square]\n  }\n }\n\n can -> pvf [label = \"Precheck\"; style = dashed]\n can -> pvf [label = \"Validate\"]\n\n pvf -> pq [label = \"Prepare\"; style = dashed]\n pvf -> eq [label = \"Execute\";]\n pvf -> pvf [label = \"see (2) and (3)\"; style = dashed]\n pq -> pp [style = dashed]\n\n pp -> pw [style = dashed]\n eq -> ew\n\n pw -> pj [style = dashed]\n ew -> ej\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Full Node Base Component in Polkadot (Rust)\nDESCRIPTION: This code snippet shows part of the full node implementation, including GRANDPA setup and network initialization. It properly organizes task management and network components for a Polkadot full node.\nSOURCE: https://github.com/paritytech/polkadot-sdk/blob/master/substrate/docs/Upgrading-2.0-to-3.0.md#2025-04-21_snippet_9\n\nLANGUAGE: rust\nCODE:\n```\ntelemetry_on_connect: telemetry_connection_notifier.map(|x| x.on_connect_stream()),\n\t\t\tvoting_rule: grandpa::VotingRulesBuilder::default().build(),\n\t\t\tprometheus_registry,\n\t\t\tshared_voter_state,\n\t\t\tnetwork_starter.start_network();\n\tOk(NewFullBase {\n\t\ttask_manager,\n\t\tinherent_data_providers,\n\t\tclient,\n\t\tnetwork,\n\t\tnetwork_status_sinks,\n\t\ttransaction_pool,\n\t})\n```\n\n----------------------------------------\n\nTITLE: Creating Relaychain Database Snapshot\nDESCRIPTION: Commands to copy and compress the relay chain database into a snapshot. Creates necessary directories, copies database contents, and creates a tar archive.\nSOURCE: https://github.com/paritytech/polkadot-sdk/blob/master/cumulus/zombienet/tests/0007-prepare-warp-sync-db-snapshot.md#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nmkdir -p relaychain-snapshot/alice/data/chains/rococo_local_testnet/db/\n\ncp -r chain-data/alice/data/chains/rococo_local_testnet/db/. relaychain-snapshot/alice/data/chains/rococo_local_testnet/db/\n\ntar -C relaychain-snapshot/alice/ -czf relaychain.tgz data\n```\n\n----------------------------------------\n\nTITLE: Rust Deprecation Warning Example\nDESCRIPTION: Example implementation of a deprecation warning for GenesisConfig, specifying December 2023 as removal date and RuntimeGenesisConfig as the alternative.\nSOURCE: https://github.com/paritytech/polkadot-sdk/blob/master/docs/contributor/DEPRECATION_CHECKLIST.md#2025-04-21_snippet_1\n\nLANGUAGE: rust\nCODE:\n```\n#[deprecated(note = \"`GenesisConfig` will be removed after December 2023. Use `RuntimeGenesisConfig` instead.\")]\n```\n\n----------------------------------------\n\nTITLE: Installing Build Dependencies for macOS\nDESCRIPTION: Commands to install Homebrew package manager and OpenSSL on macOS, which are prerequisites for Substrate development. Includes a note about Apple M1 ARM systems requiring Rosetta 2.\nSOURCE: https://github.com/paritytech/polkadot-sdk/blob/master/templates/solochain/docs/rust-setup.md#2025-04-21_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\n# Install Homebrew if necessary https://brew.sh/\n/bin/bash -c \"$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/master/install.sh)\"\n\n# Make sure Homebrew is up-to-date, install openssl\nbrew update\nbrew install openssl\n```\n\n----------------------------------------\n\nTITLE: Running Single Input for XCM Simulator Fuzzer\nDESCRIPTION: This command runs the XCM Simulator Fuzzer with a single input file. It uses the 'try-runtime' feature and specifies the input file location.\nSOURCE: https://github.com/paritytech/polkadot-sdk/blob/master/polkadot/xcm/xcm-simulator/fuzzer/README.md#2025-04-21_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\ncargo run --features=try-runtime -- hfuzz_workspace/xcm-fuzzer/fuzzer_input_file\n```\n\n----------------------------------------\n\nTITLE: Substrate Authority Discovery Header\nDESCRIPTION: Documentation header explaining the purpose and components of the Substrate authority discovery crate, including its license information.\nSOURCE: https://github.com/paritytech/polkadot-sdk/blob/master/substrate/client/authority-discovery/README.md#2025-04-21_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n# Substrate authority discovery\n\nThis crate enables Substrate authorities to discover and directly connect to\nother authorities. It is split into two components the [`Worker`] and the\n[`Service`].\n\nSee [`Worker`] and [`Service`] for more documentation.\n\nLicense: GPL-3.0-or-later WITH Classpath-exception-2.0\n```\n\n----------------------------------------\n\nTITLE: Peer Handling for Disputes in Mermaid\nDESCRIPTION: This diagram shows how peers are handled during the dispute process, including gossiping votes to existing and newly connected peers.\nSOURCE: https://github.com/paritytech/polkadot-sdk/blob/master/polkadot/roadmap/implementers-guide/src/disputes-flow.md#2025-04-21_snippet_3\n\nLANGUAGE: mermaid\nCODE:\n```\nstateDiagram-v2\n    [*] --> Open: First Vote(s) received\n    Open --> GossipVotes: for all current peers\n    Open --> PeerConnected: another\n    PeerConnected --> GossipVotes: Peer connects\n    GossipVotes --> [*]\n```\n\n----------------------------------------\n\nTITLE: Configuring Test or Example Crate in Cargo.toml\nDESCRIPTION: Shows how to configure a test or example crate to prevent it from being released to crates.io by adding the 'publish = false' attribute.\nSOURCE: https://github.com/paritytech/polkadot-sdk/blob/master/CONTRIBUTING.md#2025-04-21_snippet_1\n\nLANGUAGE: toml\nCODE:\n```\n[package]\n# Other stuff...\n\npublish = false\n\n# Other stuff...\n```\n\n----------------------------------------\n\nTITLE: Domain 2048 Compressed Ring Verifier Key Computation\nDESCRIPTION: Time complexity formula for ring verifier key computation with domain size 2048 with compression. Base time of 1.4624s plus 65.14µs per validator.\nSOURCE: https://github.com/paritytech/polkadot-sdk/blob/master/substrate/frame/sassafras/src/data/benchmark-results.md#2025-04-21_snippet_7\n\nLANGUAGE: plaintext\nCODE:\n```\nTime ~=   1462400\n    + x    65.14\n              µs\n```\n\n----------------------------------------\n\nTITLE: Setting Up Path for Polkadot Binaries\nDESCRIPTION: Command to add Polkadot binaries to the system PATH environment variable.\nSOURCE: https://github.com/paritytech/polkadot-sdk/blob/master/templates/parachain/README.docify.md#2025-04-21_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\nexport PATH=\"$PATH:<path/to/binaries>\"\n```\n\n----------------------------------------\n\nTITLE: Scheduling Wakeup for Candidate Approval in Polkadot\nDESCRIPTION: This section outlines the process of scheduling a new wakeup for a candidate. It takes into account different scenarios based on the RequiredTranches and the current approval status of the candidate.\nSOURCE: https://github.com/paritytech/polkadot-sdk/blob/master/polkadot/roadmap/implementers-guide/src/node/approval/approval-voting.md#2025-04-21_snippet_10\n\nLANGUAGE: markdown\nCODE:\n```\n#### Schedule Wakeup\n\n  * Requires `(approval_entry, candidate_entry)` which effectively denotes a `(Block Hash, Candidate Hash)` pair - the\n    candidate, along with the block it appears in.\n  * Also requires `RequiredTranches`\n  * If the `approval_entry` is approved, this doesn't need to be woken up again.\n  * If `RequiredTranches::All` - no wakeup. We assume other incoming votes will trigger wakeup and potentially\n    re-schedule.\n  * If `RequiredTranches::Pending { considered, next_no_show, uncovered, maximum_broadcast, clock_drift }` - schedule at\n    the lesser of the next no-show tick, or the tick, offset positively by `clock_drift` of the next non-empty tranche\n    we are aware of after `considered`, including any tranche containing our own unbroadcast assignment. This can lead\n    to no wakeup in the case that we have already broadcast our assignment and there are no pending no-shows; that is,\n    we have approval votes for every assignment we've received that is not already a no-show. In this case, we will be\n    re-triggered by other validators broadcasting their assignments.\n  * If `RequiredTranches::Exact { next_no_show, latest_assignment_tick, .. }` - set a wakeup for the earlier of the next\n    no-show tick or the latest assignment tick + `APPROVAL_DELAY`.\n```\n\n----------------------------------------\n\nTITLE: XCM Flow from Bridge Hub to Asset Hub (Basic Transfer)\nDESCRIPTION: This XCM message (x0) is built on Bridge Hub and dispatched to Asset Hub when message m0 is submitted. It handles asset withdrawal, reserve deposit, fee payment, asset claiming, origin aliasing, and asset transfer initiation.\nSOURCE: https://github.com/paritytech/polkadot-sdk/blob/master/bridges/snowbridge/docs/v2.md#2025-04-21_snippet_5\n\nLANGUAGE: text\nCODE:\n```\nWithdrawAsset (KLT, 100)\nReserveAssetDeposited(WETH, 2)\nPayFees (WETH, 1)\nSetAssetClaimer Kilt/Bob       // derived from beneficiary on final destination\nAliasOrigin Ethereum/Alice     // derived from msg.sender\nInitiateAssetsTransfer asset=(KLT, 100) remoteFee=(WETH, 1) dest=KLT\n  DepositAsset (KLT, 100) beneficiary=Bob\n```\n\n----------------------------------------\n\nTITLE: Running Warp Sync Test\nDESCRIPTION: Command to execute the warp sync test using zombienet.\nSOURCE: https://github.com/paritytech/polkadot-sdk/blob/master/substrate/zombienet/0001-basic-warp-sync/README.md#2025-04-21_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\nzombienet-linux test --dir db-snapshot --provider native test-warp-sync.zndsl\n```\n\n----------------------------------------\n\nTITLE: PGP Public Key for Encrypted Communication with Parity Security Team\nDESCRIPTION: This PGP public key is provided for secure, encrypted communication when reporting vulnerabilities to the Parity Security Team. It allows researchers to protect the confidentiality of their reports.\nSOURCE: https://github.com/paritytech/polkadot-sdk/blob/master/substrate/docs/SECURITY.md#2025-04-21_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\n-----BEGIN PGP PUBLIC KEY BLOCK-----\n\nmQINBF0vHwQBEADKui4qAo4bzdzRhMm+uhUpYGf8jjjmET3zJ8kKQIpp6JTsV+HJ\n6m1We0QYeMRXoOYH1xVHBf2zNCuHS0nSQdUCQA7SHWsPB05STa2hvlR7fSdQnCCp\ngnLOJWXvvedlRDIAhvqI6cwLdUlXgVSKEwrwmrpiBhh4NxI3qX+LyIa+Ovkchu2S\nd/YCnE4GqojSGRfJYiGwe2N+sF7OfaoKhQuTrtdDExHrMU4cWnTXW2wyxTr4xkj9\njS2WeLVZWflvkDHT8JD9N6jNxBVEF/Qvjk83zI0kCOzkhek8x+YUgfLq3/rHOYbX\n3pW21ccHYPacHjHWvKE+xRebjeEhJ4KxKHfCVjQcxybwDBqDka1AniZt4CQ7UORf\nMU/ue2oSZ9nNg0uMdb/0AbQPZ04OlMcYPAPWzFL08nVPox9wT9uqlL6JtcOeC90h\noOeDmfgwmjMmdwWTRgt9qQjcbgXzVvuAzIGbzj1X3MdLspWdHs/d2+US4nji1TkN\noYIW7vE+xkd3aB+NZunIlm9Rwd/0mSgDg+DaNa5KceOLhq0/qKgcXC/RRU29I8II\ntusRoR/oesGJGYTjh4k6PJkG+nvDPsoQrwYT44bhnniS1xYkxWYXF99JFI7LgMdD\ne1SgKeIDVpvm873k82E6arp5655Wod1XOjaXBggCwFp84eKcEZEN+1qEWwARAQAB\ntClQYXJpdHkgU2VjdXJpdHkgVGVhbSA8c2VjdXJpdHlAcGFyaXR5LmlvPokCVAQT\nAQoAPhYhBJ1LK264+XFW0ZZpqf8IEtSRuWeYBQJdLx8EAhsDBQkDwmcABQsJCAcC\nBhUKCQgLAgQWAgMBAh4BAheAAAoJEP8IEtSRuWeYL84QAI6NwnwS561DWYYRAd4y\nocGPr3CnwFSt1GjkSkRy3B+tMhzexBg1y7EbLRUefIrO4LwOlywtRk8tTRGgEI4i\n5xRLHbOkeolfgCFSpOj5d8cMKCt5HEIv18hsv6dkrzlSYA5NLX/GRBEh3F/0sGny\nvCXapfxa1cx72sU7631JBK7t2Tf+MfwxdfyFZ9TI9WdtP5AfVjgTkIVkEDFcZPTc\nn3CYXqTYFIBCNUD8LP4iTi3xUt7pTGJQQoFT8l15nJCgzRYQ+tXpoTRlf+/LtXmw\n6iidPV87E06jHdK9666rBouIabAtx7i0/4kwo+bSZ8DiSKRUaehiHGd212HSEmdF\njxquWE4pEzoUowYznhSIfR+WWIqRBHxEYarP4m98Hi+VXZ7Fw1ytzO8+BAKnLXnj\n2W2+T9qJks5gqVEoaWNnqpvya6JA11QZvZ0w7Om2carDc2ILNm2Xx9J0mRUye8P0\nKxcgqJuKNGFtugebQAsXagkxOKsdKna1PlDlxEfTf6AgI3ST8qSiMAwaaIMB/REF\nVKUapGoslQX4tOCjibI2pzEgE//D8NAaSVu2A9+BUcFERdZRxsI7fydIXNeZ2R46\nN2qfW+DP3YR/14QgdRxDItEavUoE1vByRXwIufKAkVemOZzIoFXKFsDeXwqTVW5i\n6CXu6OddZ3QHDiT9TEbRny4QuQINBF0vKCwBEACnP5J7LEGbpxNBrPvGdxZUo0YA\nU8RgeKDRPxJTvMo27V1IPZGaKRCRq8LBfg/eHhqZhQ7SLJBjBljd8kuT5dHDBTRe\njE1UIOhmnlSlrEJjAmpVO08irlGpq1o+8mGcvkBsR0poCVjeNeSnwYfRnR+c3GK5\nEr6/JRqfN4mJvnEC9/Pbm6C7ql6YLKxC3yqzF97JL5brbbuozrW7nixY/yAI8619\nVlBIMP7PAUbGcnSQyuV5b/Wr2Sgr6NJclnNSLjh2U9/Du6w/0tDGlMBts8HjRnWJ\nBXbkTdQKCTaqgK68kTKSiN1/x+lynxHC2AavMpH/08Kopg2ZCzJowMKIgcB+4Z/I\nDJKZWHWKumhaZMGXcWgzgcByog9IpamuROEZFJNEUAFf7YIncEckPSif4looiOdS\nVurKZGvYXXaGSsZbGgHxI5CWu7ZxMdLBLvtOcCYmRQrG+g/h+PGU5BT0bNAfNTkm\nV3/n1B/TWbpWRmB3AwT2emQivXHkaubGI0VivhaO43AuI9JWoqiMqFtxbuTeoxwD\nxlu2Dzcp0v+AR4T5cIG9D5/+yiPc25aIY7cIKxuNFHIDL4td5fwSGC7vU6998PIG\n2Y48TGBnw7zpEfDfMayqAeBjX0YU6PTNsvS5O6bP3j4ojTOUYD7Z8QdCvgISDID3\nWMGAdmSwmCRvsQ/OJwARAQABiQI8BBgBCgAmFiEEnUsrbrj5cVbRlmmp/wgS1JG5\nZ5gFAl0vKCwCGwwFCQB2pwAACgkQ/wgS1JG5Z5hdbw//ZqR+JcWm59NUIHjauETJ\nsYDYhcAfa3txTacRn5uPz/TQiTd7wZ82+G8Et0ZnpEHy6eWyBqHpG0hiPhFBzxjY\nnhjHl8jJeyo2mQIVJhzkL58BHBZk8WM2TlaU7VxZ6TYOmP2y3qf6FD6mCcrQ4Fml\nE9f0lyVUoI/5Zs9oF0izRk8vkwaY3UvLM7XEY6nM8GnFG8kaiZMYmx26Zo7Uz31G\n7EGGZFsrVDXfNhSJyz79Gyn+Lx9jOTdoR0sH/THYIIosE83awMGE6jKeuDYTbVWu\n+ZtHQef+pRteki3wvNLJK+kC1y3BtHqDJS9Lqx0s8SCiVozlC+fZfC9hCtU7bXJK\n0UJZ4qjSvj6whzfaNgOZAqJpmwgOnd8W/3YJk1DwUeX98FcU38MR23SOkx2EDdDE\n77Kdu62vTs/tLmOTuyKBvYPaHaYulYjQTxurG+o8vhHtaL87ARvuq+83dj+nO5z3\n5O9vkcVJYWjOEnJe7ZvCTxeLJehpCmHIbyUuDx5P24MWVbyXOxIlxNxTqlub5GlW\nrQF6Qsa/0k9TRk7Htbct6fAA0/VahJS0g096MrTH8AxBXDNE8lIoNeGikVlaxK9Z\nS+aannlWYIJymZ4FygIPPaRlzhAoXBuJd8OaR5giC7dS1xquxKOiQEXTGsLeGFaI\nBZYiIhW7GG4ozvKDqyNm4eg=\n=yKcB\n-----END PGP PUBLIC KEY BLOCK-----\n```\n\n----------------------------------------\n\nTITLE: Domain 2048 Uncompressed Ring Verifier Key Computation\nDESCRIPTION: Time complexity formula for ring verifier key computation with domain size 2048 without compression. Base time of 107.7ms plus 108.5µs per validator.\nSOURCE: https://github.com/paritytech/polkadot-sdk/blob/master/substrate/frame/sassafras/src/data/benchmark-results.md#2025-04-21_snippet_6\n\nLANGUAGE: plaintext\nCODE:\n```\nTime ~=    107700\n    + x    108.5\n              µs\n```\n\n----------------------------------------\n\nTITLE: Markdown Documentation - Referenda Pallet Overview\nDESCRIPTION: Basic documentation structure for the Referenda pallet, including links to the Config trait and Call enum documentation, along with a brief overview of the pallet's purpose.\nSOURCE: https://github.com/paritytech/polkadot-sdk/blob/master/substrate/frame/referenda/README.md#2025-04-21_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n# Referenda Pallet\n\n- [`Config`](https://docs.rs/pallet-referenda/latest/pallet_referenda/pallet/trait.Config.html)\n- [`Call`](https://docs.rs/pallet-referenda/latest/pallet_referenda/pallet/enum.Call.html)\n\n## Overview\n\nThe Referenda pallet handles the administration of general stakeholder voting.\n```\n\n----------------------------------------\n\nTITLE: Viewing Pallet Documentation Command\nDESCRIPTION: Command to generate and open the documentation for the pallet-example-split package.\nSOURCE: https://github.com/paritytech/polkadot-sdk/blob/master/substrate/frame/examples/split/README.md#2025-04-21_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\ncargo doc --package pallet-example-split --open\n```\n\n----------------------------------------\n\nTITLE: Referencing Bridge Signed Extensions for Rejecting Obsolete Headers and Messages\nDESCRIPTION: Reference to a macro that generates signed extensions used to prevent bridge transactions with obsolete data from being included in a block. This helps optimize block space and prevents relayers from wasting resources on redundant operations.\nSOURCE: https://github.com/paritytech/polkadot-sdk/blob/master/bridges/docs/polkadot-kusama-bridge-overview.md#2025-04-21_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n[generate_bridge_reject_obsolete_headers_and_messages!\n{}](../bin/runtime-common/src/lib.rs)\n```\n\n----------------------------------------\n\nTITLE: Installing Build Dependencies for Ubuntu/Debian\nDESCRIPTION: Commands to install the necessary build dependencies for Substrate development on Ubuntu or Debian-based systems, including git, clang, curl, SSL development libraries, LLVM, and udev development libraries.\nSOURCE: https://github.com/paritytech/polkadot-sdk/blob/master/templates/solochain/docs/rust-setup.md#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nsudo apt update\n# May prompt for location information\nsudo apt install -y git clang curl libssl-dev llvm libudev-dev\n```\n\n----------------------------------------\n\nTITLE: Implementing Dispute Distribution Message Types in Rust\nDESCRIPTION: Defines the message types for the Dispute Distribution subsystem, which is responsible for distributing explicit dispute statements among validators. Includes messages for sending disputes and fetching missing votes from other validators.\nSOURCE: https://github.com/paritytech/polkadot-sdk/blob/master/polkadot/roadmap/implementers-guide/src/types/overseer-protocol.md#2025-04-21_snippet_16\n\nLANGUAGE: rust\nCODE:\n```\nenum DisputeDistributionMessage {\n\n  /// Tell dispute distribution to distribute an explicit dispute statement to\n  /// validators.\n  SendDispute((ValidVote, InvalidVote)),\n\n  /// Ask DisputeDistribution to get votes we don't know about.\n  /// Fetched votes will be reported via `DisputeCoordinatorMessage::ImportStatements`\n  FetchMissingVotes {\n    candidate_hash: CandidateHash,\n    session: SessionIndex,\n    known_valid_votes: Bitfield,\n    known_invalid_votes: Bitfield,\n    /// Optional validator to query from. `ValidatorIndex` as in the above\n    /// referenced session.\n    from_validator: Option<ValidatorIndex>,\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Visualizing Collation Declaration, Advertisement, and Provision Process using DOT\nDESCRIPTION: This DOT code snippet creates a graph that illustrates the process of declaring, advertising, and providing collations between collators and validators. It shows the sequence of actions from collator declaration to the validator noting the collation quality.\nSOURCE: https://github.com/paritytech/polkadot-sdk/blob/master/polkadot/roadmap/implementers-guide/src/node/collators/collator-protocol.md#2025-04-21_snippet_1\n\nLANGUAGE: dot\nCODE:\n```\ndigraph G {\n  label = \"Declaring, advertising, and providing collations\";\n  labelloc = \"t\";\n  rankdir = LR;\n\n  subgraph cluster_collator {\n      rank = min;\n      label = \"Collator\";\n      graph[style = border, rank = min];\n\n      c1, c2 [label = \"\"];\n  }\n\n  subgraph cluster_validator {\n      rank = same;\n      label = \"Validator\";\n      graph[style = border];\n\n      v1, v2 [label = \"\"];\n  }\n\n  c1 -> v1 [label = \"Declare and advertise\"];\n\n  v1 -> c2 [label = \"Request\"];\n\n  c2 -> v2 [label = \"Provide\"];\n\n  v2 -> v2 [label = \"Note Good/Bad\"];\n}\n```\n\n----------------------------------------\n\nTITLE: Running a Local Two-node Testnet\nDESCRIPTION: These bash commands set up a local two-node testnet for Polkadot, demonstrating the multi-node consensus algorithm in action.\nSOURCE: https://github.com/paritytech/polkadot-sdk/blob/master/polkadot/README.md#2025-04-21_snippet_10\n\nLANGUAGE: bash\nCODE:\n```\npolkadot --dev --alice -d /tmp/alice\n```\n\nLANGUAGE: bash\nCODE:\n```\npolkadot --dev --bob -d /tmp/bob --bootnodes '/ip4/127.0.0.1/tcp/30333/p2p/ALICE_BOOTNODE_ID_HERE'\n```\n\n----------------------------------------\n\nTITLE: Implementing Chain API Messages in Rust\nDESCRIPTION: Defines message types for interacting with chain data, including queries for block numbers, headers, weights, finalized blocks, and block ancestors.\nSOURCE: https://github.com/paritytech/polkadot-sdk/blob/master/polkadot/roadmap/implementers-guide/src/types/overseer-protocol.md#2025-04-21_snippet_11\n\nLANGUAGE: rust\nCODE:\n```\nenum ChainApiMessage {\n    BlockNumber(Hash, ResponseChannel<Result<Option<BlockNumber>, Error>>),\n    BlockHeader(Hash, ResponseChannel<Result<Option<BlockHeader>, Error>>),\n    BlockWeight(Hash, ResponseChannel<Result<Option<Weight>, Error>>),\n    FinalizedBlockHash(BlockNumber, ResponseChannel<Result<Option<Hash>, Error>>),\n    FinalizedBlockNumber(ResponseChannel<Result<BlockNumber, Error>>),\n    Ancestors {\n        hash: Hash,\n        k: usize,\n        response_channel: ResponseChannel<Result<Vec<Hash>, Error>>,\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Running Polkadot Tests\nDESCRIPTION: These bash commands run the test suite for the entire Polkadot workspace or for a specific crate using the testnet profile.\nSOURCE: https://github.com/paritytech/polkadot-sdk/blob/master/polkadot/README.md#2025-04-21_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\ncargo test --workspace --profile testnet\n# Or run only the tests for specified crated\ncargo test -p <crate-name> --profile testnet\n```\n\n----------------------------------------\n\nTITLE: Leaf Selection Rule Description in Markdown\nDESCRIPTION: Explains the leaf-selection rule for blockchain systems, describing how blocks are compared and selected based on scoring mechanisms.\nSOURCE: https://github.com/paritytech/polkadot-sdk/blob/master/polkadot/roadmap/implementers-guide/src/protocol-chain-selection.md#2025-04-21_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n## The leaf-selection rule\n\nWe assume that every block has an implicit weight or score which can be used to compare blocks. In BABE, this is\ndetermined by the number of primary slots included in the chain. In PoW, this is the chain with either the most work or\nGHOST weight.\n\nThe leaf-selection rule based on our definitions above is simple: we take the maximum-scoring viable leaf we are aware\nof. In the case of a tie we select the one with a lower lexicographical block hash.\n```\n\n----------------------------------------\n\nTITLE: Try-Runtime Feature Configuration\nDESCRIPTION: TOML configuration for enabling try-runtime feature for testing runtime protocol upgrades\nSOURCE: https://github.com/paritytech/polkadot-sdk/blob/master/umbrella/README.md#2025-04-21_snippet_2\n\nLANGUAGE: toml\nCODE:\n```\n[dependencies]\npolkadot-sdk = { version = \"0.12.0\", features = [\"runtime\"], default-features = false }\n\n[features]\ntry-runtime = [\"polkadot-sdk/try-runtime\"]\n```\n\n----------------------------------------\n\nTITLE: Visualizing Polkadot Competing Chain Heads\nDESCRIPTION: This diagram illustrates how different validator groups handle competing chain heads (C and C') due to network asynchrony. Some validators are aware of both heads while others are only aware of one.\nSOURCE: https://github.com/paritytech/polkadot-sdk/blob/master/polkadot/roadmap/implementers-guide/src/protocol-overview.md#2025-04-21_snippet_3\n\nLANGUAGE: dot\nCODE:\n```\ndigraph {\n\trca [label=\"Relay Block A\" shape=box]\n\trcb [label=\"Relay Block B\" shape=box]\n\trcc [label=\"Relay Block C\" shape=box]\n\trcc_prime [label=\"Relay Block C'\" shape=box]\n\n\tvg1 [label=<\n\t\t<b>Validator Group 1</b>\n\t\t<br/>\n\t\t<br/>\n\t\t<font point-size=\"10\">\n\t\t\t(Validator 4) (Validator 1)\n\t\t</font>\n\t>]\n\tvg2 [label=<\n\t\t<b>Validator Group 2</b>\n\t\t<br/>\n\t\t<br/>\n\t\t<font point-size=\"10\">\n\t\t\t(Validator 7) (Validator 6)\n\t\t</font>\n\t>]\n\tvg3 [label=<\n\t\t<b>Validator Group 3</b>\n\t\t<br/>\n\t\t<br/>\n\t\t<font point-size=\"10\">\n\t\t\t(Validator 2) (Validator 3)\n\t\t\t<br/>\n\t\t\t(Validator 5)\n\t\t</font>\n\t>]\n\n\trcb -> rca\n\trcc -> rcb\n\trcc_prime -> rcb\n\n\tvg1 -> rcc       [style=dashed arrowhead=none]\n\tvg2 -> rcc_prime [style=dashed arrowhead=none]\n\tvg3 -> rcc_prime [style=dashed arrowhead=none]\n\tvg3 -> rcc       [style=dashed arrowhead=none]\n}\n```\n\n----------------------------------------\n\nTITLE: Running Benchmark Command in GitHub Pull Requests\nDESCRIPTION: Command to generate weights for a runtime. Supports specific runtime and pallet parameters.\nSOURCE: https://github.com/paritytech/polkadot-sdk/blob/master/docs/contributor/commands-readme.md#2025-04-21_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n/cmd bench --runtime bridge-hub-westend --pallet=pallet_name\n```\n\n----------------------------------------\n\nTITLE: Building Minimal Template Runtime\nDESCRIPTION: Command to build the minimal template runtime in release mode\nSOURCE: https://github.com/paritytech/polkadot-sdk/blob/master/templates/minimal/README.md#2025-04-21_snippet_1\n\nLANGUAGE: sh\nCODE:\n```\ncargo build -p minimal-template-runtime --release\n```\n\n----------------------------------------\n\nTITLE: Visualizing Blockchain Block Structure with DOT\nDESCRIPTION: A graphical representation using DOT notation to illustrate the blockchain's directed acyclic graph (DAG) structure, showing how blocks are connected from genesis through multiple paths.\nSOURCE: https://github.com/paritytech/polkadot-sdk/blob/master/polkadot/roadmap/implementers-guide/src/architecture.md#2025-04-21_snippet_0\n\nLANGUAGE: dot\nCODE:\n```\ndigraph {\n\tnode [shape=box];\n    genesis [label = Genesis]\n\tb1 [label = \"Block 1\"]\n\tb2 [label = \"Block 2\"]\n\tb3 [label = \"Block 3\"]\n\tb4 [label = \"Block 4\"]\n\tb5 [label = \"Block 5\"]\n\n\tb5 -> b3\n\tb4 -> b3\n\tb3 -> b1\n\tb2 -> genesis\n\tb1 -> genesis\n}\n```\n\n----------------------------------------\n\nTITLE: Running Polkadot Omni Node in Development Mode\nDESCRIPTION: Command to start the Polkadot Omni Node in development mode using a generated chain specification file.\nSOURCE: https://github.com/paritytech/polkadot-sdk/blob/master/cumulus/polkadot-omni-node/README.md#2025-04-21_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\npolkadot-omni-node --dev --chain <chain_spec.json>\n```\n\n----------------------------------------\n\nTITLE: Availability Distribution Message Types in Rust\nDESCRIPTION: Defines message types for the availability distribution subsystem, handling chunk and PoV fetching requests.\nSOURCE: https://github.com/paritytech/polkadot-sdk/blob/master/polkadot/roadmap/implementers-guide/src/types/overseer-protocol.md#2025-04-21_snippet_5\n\nLANGUAGE: rust\nCODE:\n```\nenum AvailabilityDistributionMessage {\n      /// Incoming network request for an availability chunk.\n      ChunkFetchingRequest(IncomingRequest<req_res_v1::ChunkFetchingRequest>),\n      /// Incoming network request for a seconded PoV.\n      PoVFetchingRequest(IncomingRequest<req_res_v1::PoVFetchingRequest>),\n      /// Instruct availability distribution to fetch a remote PoV.\n      ///\n      /// NOTE: The result of this fetch is not yet locally validated and could be bogus.\n      FetchPoV {\n          /// The relay parent giving the necessary context.\n          relay_parent: Hash,\n          /// Validator to fetch the PoV from.\n          from_validator: ValidatorIndex,\n          /// Candidate hash to fetch the PoV for.\n          candidate_hash: CandidateHash,\n          /// Expected hash of the PoV, a PoV not matching this hash will be rejected.\n          pov_hash: Hash,\n          /// Sender for getting back the result of this fetch.\n          ///\n          /// The sender will be canceled if the fetching failed for some reason.\n          tx: oneshot::Sender<PoV>,\n      },\n}\n```\n\n----------------------------------------\n\nTITLE: Limiting Unrewarded Relayers in Confirmation Transaction for Messages Module\nDESCRIPTION: This constant limits the number of unrewarded relayers in a confirmation transaction to manage storage and processing weight.\nSOURCE: https://github.com/paritytech/polkadot-sdk/blob/master/bridges/modules/messages/README.md#2025-04-21_snippet_7\n\nLANGUAGE: rust\nCODE:\n```\npallet_bridge_messages::Config::BridgedChain::MAX_UNREWARDED_RELAYERS_IN_CONFIRMATION_TX\n```\n\n----------------------------------------\n\nTITLE: Referencing Substrate batch_all Transaction in Bridge Context\nDESCRIPTION: This reference points to the implementation of the batch_all function in Substrate's utility module, which is used for bundling multiple calls into a single transaction. In the bridge context, this is used to combine message delivery and finality calls in a compensated transaction.\nSOURCE: https://github.com/paritytech/polkadot-sdk/blob/master/bridges/docs/polkadot-kusama-bridge-overview.md#2025-04-21_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n[`frame_utility::batch_all`](https://github.com/paritytech/substrate/blob/891d6a5c870ab88521183facafc811a203bb6541/frame/utility/src/lib.rs#L326)\n```\n\n----------------------------------------\n\nTITLE: Defining Vertical Message Passing Types in Rust for Polkadot\nDESCRIPTION: This snippet defines the types used for vertical message passing between the relay chain and parachains. It includes UpwardMessage, DownwardMessage, and InboundDownwardMessage structures.\nSOURCE: https://github.com/paritytech/polkadot-sdk/blob/master/polkadot/roadmap/implementers-guide/src/types/messages.md#2025-04-21_snippet_0\n\nLANGUAGE: rust\nCODE:\n```\n/// A message sent from a parachain to the relay-chain.\ntype UpwardMessage = Vec<u8>;\n\n/// A message sent from the relay-chain down to a parachain.\n///\n/// The size of the message is limited by the `config.max_downward_message_size`\n/// parameter.\ntype DownwardMessage = Vec<u8>;\n\n/// This struct extends `DownwardMessage` by adding the relay-chain block number when the message was\n/// enqueued in the downward message queue.\nstruct InboundDownwardMessage {\n\t/// The block number at which this messages was put into the downward message queue.\n\tpub sent_at: BlockNumber,\n\t/// The actual downward message to processes.\n\tpub msg: DownwardMessage,\n}\n```\n\n----------------------------------------\n\nTITLE: XCM Flow from Asset Hub to KILT (Basic Transfer)\nDESCRIPTION: This XCM message (x1) is received by KILT from Asset Hub. Instructions marked with * are executed on Asset Hub before forwarding. It handles asset operations on KILT while preserving the origin from the Ethereum chain.\nSOURCE: https://github.com/paritytech/polkadot-sdk/blob/master/bridges/snowbridge/docs/v2.md#2025-04-21_snippet_7\n\nLANGUAGE: text\nCODE:\n```\n*WithdrawAsset (KLT, 100)\n*ReserveAssetDeposited (WETH, 1)\n*PayFees (WETH, 1)\n*SetAssetClaimer Ethereum/Alice\n*AliasOrigin Ethereum/Alice   // origin preserved from AH\nSetAssetClaimer Bob\nDepositAsset (KLT, 100) beneficiary=Bob\n```\n\n----------------------------------------\n\nTITLE: Starting Development Node\nDESCRIPTION: Command to start a single node development chain using the Substrate Node Template with WebSocket external access.\nSOURCE: https://github.com/paritytech/polkadot-sdk/blob/master/substrate/docker/README.md#2025-04-21_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\n./run.sh node-template --dev --ws-external\n```\n\n----------------------------------------\n\nTITLE: Bitfield Signing Job Process\nDESCRIPTION: Detailed steps for the bitfield signing job execution, including waiting period, validator index determination, and bitfield generation.\nSOURCE: https://github.com/paritytech/polkadot-sdk/blob/master/polkadot/roadmap/implementers-guide/src/node/availability/bitfield-signing.md#2025-04-21_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n- For each fresh leaf, begin by waiting a fixed period of time so availability distribution has the chance to make\n  candidates available.\n- Determine our validator index `i`, the set of backed candidates pending availability in `r`, and which bit of the\n  bitfield each corresponds to.\n- Start with an empty bitfield. For each bit in the bitfield, if there is a candidate pending availability, query the\n  [Availability Store](../utility/availability-store.md) for whether we have the availability chunk for our validator\n  index. The `OccupiedCore` struct contains the candidate hash so the full candidate does not need to be fetched from\n  runtime.\n- For all chunks we have, set the corresponding bit in the bitfield.\n- Sign the bitfield and dispatch a `BitfieldDistribution::DistributeBitfield` message.\n```\n\n----------------------------------------\n\nTITLE: Rust Documentation Example - Function Documentation\nDESCRIPTION: Demonstrates how to properly document a Rust function using both external rust-docs (///) and internal code comments (//). Shows the distinction between documentation that appears in rust-docs versus internal implementation notes.\nSOURCE: https://github.com/paritytech/polkadot-sdk/blob/master/docs/contributor/DOCUMENTATION_GUIDELINES.md#2025-04-21_snippet_0\n\nLANGUAGE: rust\nCODE:\n```\n/// Computes the square root of the input, returning `Ok(_)` if successful.\n///\n/// # Errors\n/// ...\n///\n// Details about the complexity, how you implemented this, and some quirks that\n// are NOT relevant to the external interface, so it starts with '//'.\n// This can also be moved inside the function.\npub fn sqrt(x: u32) -> Result<u32, ()> {\n    todo!();\n}\n```\n\n----------------------------------------\n\nTITLE: Dispatchable Function Documentation Template for Rust Pallets\nDESCRIPTION: Template for documenting dispatchable functions in Substrate pallets. Includes sections for origin requirements, implementation details, possible errors, and emitted events.\nSOURCE: https://github.com/paritytech/polkadot-sdk/blob/master/docs/contributor/DOCUMENTATION_GUIDELINES.md#2025-04-21_snippet_6\n\nLANGUAGE: rust\nCODE:\n```\n/// <One-liner explaining what the dispatchable does>\n///\n/// ## Dispatch Origin\n///\n/// The dispatch origin of this call must be <details (e.g. Root, Signed, Unsigned)>\n///\n/// ## Details\n///\n/// <All other details, namely any errors that could occur within this dispatch and the events this dispatch could emit>\n///\n/// ## Errors (optional)\n///\n/// <If an extensive list of errors can be returned, list them individually instead of mentioning them in the section\n/// above>\n///\n/// ## Events (optional)\n///\n/// <Events are akin to the \"return type\" of dispatchables, optionally mention them>\npub fn name_of_dispatchable(origin: OriginFor<T>, ...) -> DispatchResult {}\n```\n\n----------------------------------------\n\nTITLE: Running Pure Nix Developer Shell\nDESCRIPTION: Command to run a pure Nix developer shell that removes access to local tools, useful for diagnosing environment-related issues.\nSOURCE: https://github.com/paritytech/polkadot-sdk/blob/master/bridges/snowbridge/README.md#2025-04-21_snippet_11\n\nLANGUAGE: bash\nCODE:\n```\nnix develop -i --pure-eval\n```\n\n----------------------------------------\n\nTITLE: Markdown Documentation for Verify Signature Module\nDESCRIPTION: Documentation explaining the key components and functionality of the Verify Signature module, including its TransactionExtension for signature validation and benchmarking capabilities.\nSOURCE: https://github.com/paritytech/polkadot-sdk/blob/master/substrate/frame/verify-signature/README.md#2025-04-21_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n# Verify Signature Module\nA module that provides a `TransactionExtension` that validates a signature against a payload and\nauthorizes the origin.\n\n## Overview\n\nThis module serves two purposes:\n- `VerifySignature`: A `TransactionExtension` that checks the provided signature against a payload\n  constructed through hashing the inherited implication with `blake2b_256`. If the signature is\n  valid, then the extension authorizes the origin as signed. The extension can be disabled, or\n  passthrough, allowing users to use other extensions to authorize different origins other than the\n  traditionally signed origin.\n- Benchmarking: The extension is bound within a pallet to leverage the benchmarking functionality in\n  FRAME. The `Signature` and `Signer` types are specified in the pallet configuration and a\n  benchmark helper trait is used to create a signature which is then validated in the benchmark.\n\n[`Config`]: ./trait.Config.html\n\nLicense: Apache-2.0\n```\n\n----------------------------------------\n\nTITLE: Running Machine Benchmark on EC2 for Polkadot Parachain\nDESCRIPTION: Command to run a hardware benchmark on an EC2 instance to measure CPU, Memory, and Disk performance for Polkadot parachain. The benchmark includes BLAKE2-256, SR25519-Verify, memory copy, and disk operations.\nSOURCE: https://github.com/paritytech/polkadot-sdk/blob/master/bridges/snowbridge/pallets/ethereum-client/benchmark.md#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ncargo run --release --bin polkadot-parachain --features runtime-benchmarks -- benchmark machine --base-path /mnt/scratch/benchmark\n```\n\n----------------------------------------\n\nTITLE: Running Initialization Script\nDESCRIPTION: Command to run the initialization script required for setting up the development environment for the first time.\nSOURCE: https://github.com/paritytech/polkadot-sdk/blob/master/bridges/snowbridge/README.md#2025-04-21_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nscripts/init.sh\n```\n\n----------------------------------------\n\nTITLE: Modifying Grandpa Session Duration\nDESCRIPTION: Diff showing modifications to reduce the grandpa session period in Substrate.\nSOURCE: https://github.com/paritytech/polkadot-sdk/blob/master/substrate/zombienet/0001-basic-warp-sync/README.md#2025-04-21_snippet_6\n\nLANGUAGE: diff\nCODE:\n```\ndiff --git a/bin/node/runtime/src/constants.rs b/bin/node/runtime/src/constants.rs\nindex 23fb13cfb0..89f8646291 100644\n--- a/bin/node/runtime/src/constants.rs\n+++ b/bin/node/runtime/src/constants.rs\n@@ -63,7 +63,7 @@ pub mod time {\n\n    // NOTE: Currently it is not possible to change the epoch duration after the chain has started.\n    //       Attempting to do so will brick block production.\n-   pub const EPOCH_DURATION_IN_BLOCKS: BlockNumber = 10 * MINUTES;\n+   pub const EPOCH_DURATION_IN_BLOCKS: BlockNumber = 1 * MINUTES / 2;\n    pub const EPOCH_DURATION_IN_SLOTS: u64 = {\n        const SLOT_FILL_RATE: f64 = MILLISECS_PER_BLOCK as f64 / SLOT_DURATION as f64\n```\n\n----------------------------------------\n\nTITLE: Formatting Function with Nested Parentheses in Rust\nDESCRIPTION: Illustrates how to format a function with nested parentheses and mathematical operations. Shows collapsing of indent levels for improved readability.\nSOURCE: https://github.com/paritytech/polkadot-sdk/blob/master/substrate/docs/STYLE_GUIDE.md#2025-04-21_snippet_1\n\nLANGUAGE: rust\nCODE:\n```\nfn calculate(\n\tsome_long_variable_a: f32,\n\tsome_long_variable_b: f32,\n\tsome_long_variable_c: f32,\n) -> f32 {\n\t(-some_long_variable_b + sqrt(\n\t\t// two parens open, but since we open & close them both on the\n\t\t// same line, only one indent level is used\n\t\tsome_long_variable_b * some_long_variable_b\n\t\t- 4 * some_long_variable_a * some_long_variable_c\n\t// both closed here at beginning of line, so back to the original indent\n\t// level\n\t)) / (2 * some_long_variable_a)\n}\n```\n\n----------------------------------------\n\nTITLE: Provisioner Data Reception Process in Polkadot SDK (Mermaid)\nDESCRIPTION: This diagram illustrates the provisioner's process of receiving and handling provisionable data from various subsystems, including CandidateBacking and BitfieldDistribution.\nSOURCE: https://github.com/paritytech/polkadot-sdk/blob/master/polkadot/roadmap/implementers-guide/src/node/subsystems-and-jobs.md#2025-04-21_snippet_9\n\nLANGUAGE: mermaid\nCODE:\n```\nsequenceDiagram\n    participant A as Arbitrary\n    participant PV as Provisioner\n    participant CB as CandidateBacking\n    participant BD as BitfieldDistribution\n    participant RA as RuntimeApi\n    participant PI as ParachainsInherentDataProvider\n\n    alt receive provisionable data\n        alt\n            CB ->> PV: ProvisionableData\n        else\n            BD ->> PV: ProvisionableData\n        end\n\n        loop over stored Senders\n            PV ->> A: ProvisionableData\n        end\n```\n\n----------------------------------------\n\nTITLE: Purging the Development Chain\nDESCRIPTION: Command to clear the state of the development chain, allowing for a fresh start.\nSOURCE: https://github.com/paritytech/polkadot-sdk/blob/master/templates/solochain/README.md#2025-04-21_snippet_5\n\nLANGUAGE: sh\nCODE:\n```\n./target/release/solochain-template-node purge-chain --dev\n```\n\n----------------------------------------\n\nTITLE: Visualizing Availability Core State Machine in DOT\nDESCRIPTION: This DOT code snippet generates a graph representing the state transitions of an Availability Core between Free and Occupied states.\nSOURCE: https://github.com/paritytech/polkadot-sdk/blob/master/polkadot/roadmap/implementers-guide/src/runtime/scheduler.md#2025-04-21_snippet_0\n\nLANGUAGE: dot\nCODE:\n```\ndigraph {\n  label = \"Availability Core State Machine\\n\\n\\n\";\n  labelloc = \"t\";\n\n  { rank=same vg1 vg2 }\n\n  vg1 [label = \"Free\" shape=rectangle]\n  vg2 [label = \"Occupied\" shape=rectangle]\n\n  vg1 -> vg2 [label = \"Assignment & Backing\" ]\n  vg2 -> vg1 [label = \"Availability or Timeout\" ]\n}\n```\n\n----------------------------------------\n\nTITLE: Generating Rust Documentation\nDESCRIPTION: Command to generate and view Rust documentation for the project using the nightly toolchain.\nSOURCE: https://github.com/paritytech/polkadot-sdk/blob/master/templates/solochain/README.md#2025-04-21_snippet_3\n\nLANGUAGE: sh\nCODE:\n```\ncargo +nightly doc --open\n```\n\n----------------------------------------\n\nTITLE: Implementing CandidateDescriptor Structure in Rust\nDESCRIPTION: Defines a lightweight description of the candidate, including parachain ID, relay parent, collator details, and various hashes for validation and erasure encoding.\nSOURCE: https://github.com/paritytech/polkadot-sdk/blob/master/polkadot/roadmap/implementers-guide/src/types/candidate.md#2025-04-21_snippet_3\n\nLANGUAGE: rust\nCODE:\n```\nstruct CandidateDescriptor {\n\tpara_id: ParaId,\n\trelay_parent: Hash,\n\tcollator: CollatorId,\n\tpersisted_validation_data_hash: Hash,\n\tpov_hash: Hash,\n\terasure_root: Hash,\n\tsignature: CollatorSignature,\n\tpara_head: Hash,\n\tvalidation_code_hash: ValidationCodeHash,\n}\n```\n\n----------------------------------------\n\nTITLE: Linking Markdown Code Reference\nDESCRIPTION: References and links to key structures and implementations including RunConfig, chain_spec::LoadSpec, runtime::RuntimeResolver, and CliConfig. Also includes a link to the polkadot-parachain-bin crate for examples.\nSOURCE: https://github.com/paritytech/polkadot-sdk/blob/master/cumulus/polkadot-omni-node/lib/README.md#2025-04-21_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n[`RunConfig`]\n[`chain_spec::LoadSpec`]\n[`runtime::RuntimeResolver`]\n[`CliConfig`]\n[`polkadot-parachain-bin`](https://crates.io/crates/polkadot-parachain-bin)\n```\n\n----------------------------------------\n\nTITLE: Defining Storage Layout for Session Info in Rust\nDESCRIPTION: This code snippet defines the storage layout for the Session Info module. It includes two storage items: EarliestStoredSession for tracking the earliest session with stored info, and Sessions for mapping session indices to SessionInfo structures.\nSOURCE: https://github.com/paritytech/polkadot-sdk/blob/master/polkadot/roadmap/implementers-guide/src/runtime/session_info.md#2025-04-21_snippet_1\n\nLANGUAGE: rust\nCODE:\n```\nEarliestStoredSession: SessionIndex,\nSessions: map SessionIndex => Option<SessionInfo>,\n```\n\n----------------------------------------\n\nTITLE: Outlining Runtime API Jobs and TODO in Markdown\nDESCRIPTION: Describes future improvements for the Runtime API subsystem, including suggestions for request handling and caching based on active leaves.\nSOURCE: https://github.com/paritytech/polkadot-sdk/blob/master/polkadot/roadmap/implementers-guide/src/node/utility/runtime-api.md#2025-04-21_snippet_2\n\nLANGUAGE: markdown\nCODE:\n```\n## Jobs\n\n> TODO Don't limit requests based on parent hash, but limit caching. No caching should be done for any requests on\n> `relay_parent`s that are not active based on `ActiveLeavesUpdate` messages. Maybe with some leeway for things that\n> have just been stopped.\n```\n\n----------------------------------------\n\nTITLE: Implementing Parachains Finality Relay Traits\nDESCRIPTION: Two main traits need to be implemented: SourceChain for connecting to source chain and reading parachain heads, and TargetChain for connecting to target chain and submitting finality delivery transactions.\nSOURCE: https://github.com/paritytech/polkadot-sdk/blob/master/bridges/relays/parachains/README.md#2025-04-21_snippet_0\n\nLANGUAGE: rust\nCODE:\n```\npub trait SourceChain {\n    // Read parachain heads from `Heads` map of `paras` pallet\n    // Create storage proofs of `Heads` map entries\n}\n\npub trait TargetChain {\n    // Return best known head of given parachain\n    // Craft and submit parachains finality delivery transaction\n}\n```\n\n----------------------------------------\n\nTITLE: Formatting Function with Complex Calculations in Rust\nDESCRIPTION: Demonstrates proper indentation and line wrapping for a function with complex calculations. Shows how to handle long variable names and maintain readability.\nSOURCE: https://github.com/paritytech/polkadot-sdk/blob/master/substrate/docs/STYLE_GUIDE.md#2025-04-21_snippet_0\n\nLANGUAGE: rust\nCODE:\n```\nfn calculation(some_long_variable_a: i8, some_long_variable_b: i8) -> bool {\n\tlet x = some_long_variable_a * some_long_variable_b\n\t\t- some_long_variable_b / some_long_variable_a\n\t\t+ sqrt(some_long_variable_a) - sqrt(some_long_variable_b);\n\tx > 10\n}\n```\n\n----------------------------------------\n\nTITLE: Handling Panickers with Explicit Proofs in Rust\nDESCRIPTION: Demonstrates the use of explicit proofs when using functions that may panic. This approach improves code reliability and maintainability by clearly stating assumptions.\nSOURCE: https://github.com/paritytech/polkadot-sdk/blob/master/docs/contributor/STYLE_GUIDE.md#2025-04-21_snippet_7\n\nLANGUAGE: rust\nCODE:\n```\nlet mut target_path =\n\tself.path().expect(\n\t\t\"self is instance of DiskDirectory;\\\n\t\tDiskDirectory always returns path;\\\n\t\tqed\"\n\t);\n```\n\n----------------------------------------\n\nTITLE: Downgrading Rust Nightly Version\nDESCRIPTION: Commands to downgrade from the latest Rust nightly to a specific nightly version, including uninstalling the current nightly, installing the specific version, and adding WebAssembly support for that version.\nSOURCE: https://github.com/paritytech/polkadot-sdk/blob/master/templates/solochain/docs/rust-setup.md#2025-04-21_snippet_11\n\nLANGUAGE: bash\nCODE:\n```\nrustup uninstall nightly\nrustup install nightly-<yyyy-MM-dd>\nrustup target add wasm32-unknown-unknown --toolchain nightly-<yyyy-MM-dd>\n```\n\n----------------------------------------\n\nTITLE: Warning Message for Glutton Pallet Usage\nDESCRIPTION: A warning message emphasizing that the Glutton pallet should not be used on value-bearing chains and is intended only for testing purposes.\nSOURCE: https://github.com/paritytech/polkadot-sdk/blob/master/substrate/frame/glutton/README.md#2025-04-21_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n# WARNING\n\n**DO NOT USE ON VALUE-BEARING CHAINS. THIS PALLET IS ONLY INTENDED FOR TESTING USAGE.**\n```\n\n----------------------------------------\n\nTITLE: Querying Validator Set in Rust\nDESCRIPTION: Function that returns the validator set at a given block height. This set is responsible for backing parachains in the child block of the specified block. Takes a Block parameter and returns a vector of ValidatorId.\nSOURCE: https://github.com/paritytech/polkadot-sdk/blob/master/polkadot/roadmap/implementers-guide/src/runtime-api/validators.md#2025-04-21_snippet_0\n\nLANGUAGE: rust\nCODE:\n```\nfn validators(at: Block) -> Vec<ValidatorId>;\n```\n\n----------------------------------------\n\nTITLE: Availability Recovery Message Types in Rust\nDESCRIPTION: Defines message types for the availability recovery subsystem, handling data recovery requests and error cases.\nSOURCE: https://github.com/paritytech/polkadot-sdk/blob/master/polkadot/roadmap/implementers-guide/src/types/overseer-protocol.md#2025-04-21_snippet_6\n\nLANGUAGE: rust\nCODE:\n```\nenum AvailabilityRecoveryMessage {\n    /// Recover available data from validators on the network.\n    RecoverAvailableData(\n        CandidateReceipt,\n        SessionIndex,\n        Option<GroupIndex>, // Backing validator group to request the data directly from.\n        Option<CoreIndex>, /* A `CoreIndex` needs to be specified for the recovery process to\n\t\t                    * prefer systematic chunk recovery. This is the core that the candidate\n                            * was occupying while pending availability. */\n        ResponseChannel<Result<AvailableData, RecoveryError>>,\n    ),\n}\n```\n\n----------------------------------------\n\nTITLE: Executing Crate Renaming Script in Bash\nDESCRIPTION: This command runs a bash script to rename crates according to the latest naming convention for Substrate 2.0. The script is located in the .maintain directory and handles the renaming process automatically.\nSOURCE: https://github.com/paritytech/polkadot-sdk/blob/master/substrate/docs/Upgrade.md#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nbash .maintain/rename-crates-for-2.0.sh\n```\n\n----------------------------------------\n\nTITLE: Markdown Deprecation Checklist Template\nDESCRIPTION: Task checklist template for tracking deprecation process steps, including code warnings, updates, announcements, and final removal.\nSOURCE: https://github.com/paritytech/polkadot-sdk/blob/master/docs/contributor/DEPRECATION_CHECKLIST.md#2025-04-21_snippet_2\n\nLANGUAGE: markdown\nCODE:\n```\n### Tasks\n\n- [ ] Deprecate code by adding a warning message\n- [ ] Remove usage of the deprecated code in the code base\n- [ ] Update examples and tutorials\n- [ ] Announce code deprecation\n- [ ] Plan removal version\n- [ ] Announce code removal\n- [ ] Remove deprecated code\n```\n\n----------------------------------------\n\nTITLE: Rust Deprecation Warning Attribute Template\nDESCRIPTION: Template for adding deprecation warning messages to code in Rust, including the removal date and alternative solution if available.\nSOURCE: https://github.com/paritytech/polkadot-sdk/blob/master/docs/contributor/DEPRECATION_CHECKLIST.md#2025-04-21_snippet_0\n\nLANGUAGE: rust\nCODE:\n```\n#[deprecated(note = \"[DEPRECATED] will be removed after [DATE]. [ALTERNATIVE]\")]\n```\n\n----------------------------------------\n\nTITLE: Contract Debugging Command\nDESCRIPTION: Command to run a Substrate node with enhanced debugging output for contracts, setting log levels for runtime contracts to debug and other targets to error.\nSOURCE: https://github.com/paritytech/polkadot-sdk/blob/master/substrate/frame/contracts/README.md#2025-04-21_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ncargo run --release -- --dev -lerror,runtime::contracts=debug\n```\n\n----------------------------------------\n\nTITLE: Domain 1024 Compressed Ticket Verification Timing\nDESCRIPTION: Time complexity formula for ticket verification with domain size 1024 with compression. Base time of 13.12ms plus 11.37ms per ticket.\nSOURCE: https://github.com/paritytech/polkadot-sdk/blob/master/substrate/frame/sassafras/src/data/benchmark-results.md#2025-04-21_snippet_1\n\nLANGUAGE: plaintext\nCODE:\n```\nTime ~=    13120\n    + x    11370\n              µs\n```\n\n----------------------------------------\n\nTITLE: Opening the Locally Served Documentation in a Browser\nDESCRIPTION: Command to open the locally served mdBook documentation in the default web browser. This should be run in a separate terminal window after starting the mdBook server.\nSOURCE: https://github.com/paritytech/polkadot-sdk/blob/master/polkadot/roadmap/implementers-guide/README.md#2025-04-21_snippet_2\n\nLANGUAGE: sh\nCODE:\n```\nopen http://localhost:3000\n```\n\n----------------------------------------\n\nTITLE: Module Title and License Declaration\nDESCRIPTION: Header documentation declaring the module name and license information for the Offences tracking system.\nSOURCE: https://github.com/paritytech/polkadot-sdk/blob/master/substrate/frame/offences/README.md#2025-04-21_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n# Offences Module\n\nTracks reported offences\n\nLicense: Apache-2.0\n```\n\n----------------------------------------\n\nTITLE: Defining CheckedAssignmentCert Struct in Rust\nDESCRIPTION: This struct represents a checked assignment certificate, containing verified information about the assignment.\nSOURCE: https://github.com/paritytech/polkadot-sdk/blob/master/polkadot/roadmap/implementers-guide/src/types/approval.md#2025-04-21_snippet_6\n\nLANGUAGE: rust\nCODE:\n```\nstruct CheckedAssignmentCert {\n    cert: AssignmentCert,\n    validator: ValidatorIndex,\n    relay_block: Hash,\n    candidate_hash: Hash,\n    delay_tranche: DelayTranche,\n}\n```\n\n----------------------------------------\n\nTITLE: Handling ActiveDisputes Message\nDESCRIPTION: Returns all recent disputes that were concluded within the last ACTIVE_DURATION_SECS timeframe.\nSOURCE: https://github.com/paritytech/polkadot-sdk/blob/master/polkadot/roadmap/implementers-guide/src/node/disputes/dispute-coordinator.md#2025-04-21_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n### On `DisputeCoordinatorMessage::ActiveDisputes`\n\nReturns all recent disputes concluded within the last `ACTIVE_DURATION_SECS` .\n```\n\n----------------------------------------\n\nTITLE: Running Documentation Generation Command for Dev Mode Pallet\nDESCRIPTION: This command generates and opens the documentation for the pallet-dev-mode package. It uses Cargo to build and display the documentation in the default web browser.\nSOURCE: https://github.com/paritytech/polkadot-sdk/blob/master/substrate/frame/examples/dev-mode/README.md#2025-04-21_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\ncargo doc --package pallet-dev-mode --open\n```\n\n----------------------------------------\n\nTITLE: Active Leaves Update Structure in Rust\nDESCRIPTION: Defines the structure for active leaves updates that tracks activated and deactivated block hashes and numbers.\nSOURCE: https://github.com/paritytech/polkadot-sdk/blob/master/polkadot/roadmap/implementers-guide/src/types/overseer-protocol.md#2025-04-21_snippet_1\n\nLANGUAGE: rust\nCODE:\n```\nstruct ActiveLeavesUpdate {\n    activated: [(Hash, Number)],\n    deactivated: [Hash],\n}\n```\n\n----------------------------------------\n\nTITLE: Running Node with Custom Base Path\nDESCRIPTION: Example of running Substrate Node Template with a custom base path for storing the chain database.\nSOURCE: https://github.com/paritytech/polkadot-sdk/blob/master/substrate/docker/README.md#2025-04-21_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\n./run.sh node-template --dev --ws-external --base-path=/data\n```\n\n----------------------------------------\n\nTITLE: Node Service Implementation in Rust\nDESCRIPTION: Implements core node functionality and consensus configuration in service.rs. This template version maintains minimal configuration without consensus implementation.\nSOURCE: https://github.com/paritytech/polkadot-sdk/blob/master/templates/minimal/node/README.md#2025-04-21_snippet_1\n\nLANGUAGE: rust\nCODE:\n```\nservice.rs\n```\n\n----------------------------------------\n\nTITLE: Generating Account with JSON Output\nDESCRIPTION: Commands to generate a new account with JSON formatted output and extract specific fields.\nSOURCE: https://github.com/paritytech/polkadot-sdk/blob/master/substrate/bin/utils/subkey/README.md#2025-04-21_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nsubkey generate --output-type json\n```\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"accountId\": \"0xfec70cfbf1977c6965b5af10a4534a6a35d548eb14580594d0bc543286892515\",\n  \"publicKey\": \"0xfec70cfbf1977c6965b5af10a4534a6a35d548eb14580594d0bc543286892515\",\n  \"secretPhrase\": \"hotel forest jar hover kite book view eight stuff angle legend defense\",\n  \"secretSeed\": \"0xa05c75731970cc7868a2fb7cb577353cd5b31f62dccced92c441acd8fee0c92d\",\n  \"ss58Address\": \"5Hpm9fq3W3dQgwWpAwDS2ZHKAdnk86QRCu7iX4GnmDxycrte\"\n}\n```\n\nLANGUAGE: bash\nCODE:\n```\nsubkey generate --output-type json | jq -r .secretSeed\n```\n\n----------------------------------------\n\nTITLE: Spawning Westend Local Network with Zombienet\nDESCRIPTION: This command uses zombienet to spawn a local Westend network. It requires the zombienet release to be downloaded and Polkadot and Polkadot Parachain binaries to be built beforehand.\nSOURCE: https://github.com/paritytech/polkadot-sdk/blob/master/substrate/frame/revive/rpc/examples/README.md#2025-04-21_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nzombienet spawn --provider native  westend_local_network.toml\n```\n\n----------------------------------------\n\nTITLE: Starting Kitchensink Node with Substrate in Rust\nDESCRIPTION: This command starts the kitchensink node using Substrate. It sets specific logging levels for different components and runs the node in development mode.\nSOURCE: https://github.com/paritytech/polkadot-sdk/blob/master/substrate/frame/revive/rpc/examples/README.md#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nRUST_LOG=\"error,evm=debug,sc_rpc_server=info,runtime::revive=debug\" cargo run --bin substrate-node -- --dev\n```\n\n----------------------------------------\n\nTITLE: Building Parachain Runtime\nDESCRIPTION: Command to build the parachain template runtime in release mode\nSOURCE: https://github.com/paritytech/polkadot-sdk/blob/master/templates/parachain/README.md#2025-04-21_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\ncargo build --release\n```\n\n----------------------------------------\n\nTITLE: Starting a Development Chain\nDESCRIPTION: This bash command starts a Polkadot development chain for testing and development purposes.\nSOURCE: https://github.com/paritytech/polkadot-sdk/blob/master/polkadot/README.md#2025-04-21_snippet_8\n\nLANGUAGE: bash\nCODE:\n```\ncargo run --bin polkadot -- --dev\n```\n\n----------------------------------------\n\nTITLE: Installing Polkadot Omni Node via Cargo\nDESCRIPTION: Command to install Polkadot Omni Node using Cargo, Rust's package manager. Uses the --locked flag to ensure deterministic builds.\nSOURCE: https://github.com/paritytech/polkadot-sdk/blob/master/cumulus/polkadot-omni-node/README.md#2025-04-21_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n# Assuming ~/.cargo/bin is on the PATH\ncargo install polkadot-omni-node --locked\n```\n\n----------------------------------------\n\nTITLE: Setting Container Engine Variable\nDESCRIPTION: Commands to set the container engine variable to either Podman or Docker for subsequent commands.\nSOURCE: https://github.com/paritytech/polkadot-sdk/blob/master/docs/contributor/docker.md#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nENGINE=podman\n```\n\nLANGUAGE: bash\nCODE:\n```\nENGINE=docker\n```\n\n----------------------------------------\n\nTITLE: Listing Untracked Files in Git Repository\nDESCRIPTION: Command to list untracked files and directories in the git repository, useful for identifying potential issues.\nSOURCE: https://github.com/paritytech/polkadot-sdk/blob/master/bridges/snowbridge/README.md#2025-04-21_snippet_9\n\nLANGUAGE: bash\nCODE:\n```\ngit clean -ndx | awk '{print $3}'\n```\n\n----------------------------------------\n\nTITLE: Setting Up direnv for Automatic Developer Shell\nDESCRIPTION: Commands to configure direnv for automatically entering the developer shell when opening the project directory.\nSOURCE: https://github.com/paritytech/polkadot-sdk/blob/master/bridges/snowbridge/README.md#2025-04-21_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\ncp .envrc.example .envrc\ndirenv allow\n```\n\n----------------------------------------\n\nTITLE: Domain 2048 Uncompressed Ticket Verification Timing\nDESCRIPTION: Time complexity formula for ticket verification with domain size 2048 without compression. Base time of 26.21ms plus 11.44ms per ticket.\nSOURCE: https://github.com/paritytech/polkadot-sdk/blob/master/substrate/frame/sassafras/src/data/benchmark-results.md#2025-04-21_snippet_2\n\nLANGUAGE: plaintext\nCODE:\n```\nTime ~=    26210\n    + x    11440\n              µs\n```"
  }
]