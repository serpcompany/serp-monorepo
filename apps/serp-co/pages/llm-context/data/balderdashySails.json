[
  {
    "owner": "balderdashy",
    "repo": "sails",
    "content": "TITLE: Server-side EJS Template Data Injection\nDESCRIPTION: Demonstrates how to safely inject data into server-side EJS templates using <%= %> syntax for HTML-encoding. Shows examples of displaying usernames and project information while preventing XSS attacks.\nSOURCE: https://github.com/balderdashy/sails/blob/master/docs/concepts/Security/XSS.md#2025-04-20_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<h3 is=\"welcome-msg\">Hello <%= me.username %>!</h3>\n\n<h4><%= owner.username %>'s projects:</h4>\n<ul><% _.each(projects, function (project) { %>\n  <li>\n    <a href=\"/<%= owner.username %>/<%= project.slug %>\"><%= project.friendlyName %></a>\n  </li>\n<% }); %></ul>\n```\n\n----------------------------------------\n\nTITLE: Async Transaction Handling with Sails.js and Node.js\nDESCRIPTION: This snippet demonstrates how to initiate a transaction in a Sails.js application using an async function. The purpose is to perform database operations atomically, such as transferring funds between accounts. Dependencies include the flaverr module for error handling. Key parameters involve 'during', a function leveraging the transactional database connection, and returning any results as needed. Inputs include a user ID and transaction amount, while outputs reflect any side effects and errors encountered.\nSOURCE: https://github.com/balderdashy/sails/blob/master/docs/reference/waterline/datastores/transaction.md#2025-04-20_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n// e.g. in an action:\n\nvar flaverr = require('flaverr');\n\nawait sails.getDatastore()\n.transaction(async (db)=> {\n\n  var myAccount = await BankAccount.findOne({ owner: this.req.session.userId })\n  .usingConnection(db);\n  if (!myAccount) {\n    throw new Error('Consistency violation: Database is corrupted-- logged in user record has gone missing');\n  }\n\n  var recipientAccount = await BankAccount.findOne({ owner: inputs.recipientId }).usingConnection(db)\n  if (!recipientAccount) {\n    throw flaverr('E_NO_SUCH_RECIPIENT', new Error('There is no recipient with that id'));\n  }\n\n  // Do the math to subtract from the logged-in user\\'s account balance,\n  // and add to the recipient\\'s bank account balance.\n  var myNewBalance = myAccount.balance - inputs.amount;\n\n  // If this would put the logged-in user\\'s account balance below zero,\n  // then abort.  (The transaction will be rolled back automatically.)\n  if (myNewBalance < 0) {\n    throw flaverr('E_INSUFFICIENT_FUNDS', new Error('Insufficient funds'));\n  }\n\n  // Update the current user\\'s bank account\n  await BankAccount.update({ owner: this.req.session.userId })\n  .set({\n    balance: myNewBalance\n  })\n  .usingConnection(db);\n\n  // Update the recipient\\'s bank account\n  await BankAccount.update({ owner: inputs.recipientId })\n  .set({\n    balance: recipientAccount.balance + inputs.amount\n  })\n  .usingConnection(db);\n})\n.intercept('E_INSUFFICIENT_FUNDS', ()=>'badRequest')\n.intercept('E_NO_SUCH_RECIPIENT', ()=>'notFound');\n```\n\n----------------------------------------\n\nTITLE: Defining a Product Model in Sails.js\nDESCRIPTION: This snippet demonstrates how to define a Product model in Sails.js with attributes such as nameOnMenu, price, percentRealMeat, and numCalories. It shows the use of attribute types, required fields, default values, and custom column types.\nSOURCE: https://github.com/balderdashy/sails/blob/master/docs/concepts/ORM/Models.md#2025-04-20_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n// api/models/Product.js\nmodule.exports = {\n  attributes: {\n    nameOnMenu: { type: 'string', required: true },\n    price: { type: 'string', required: true },\n    percentRealMeat: { type: 'number', defaultsTo: 20, columnType: 'FLOAT' },\n    numCalories: { type: 'number' },\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: Configuring CORS for an Individual Route in Sails.js\nDESCRIPTION: This snippet demonstrates how to enable or override global CORS configuration for a particular route in config/routes.js, specifying allowed origins and credential settings.\nSOURCE: https://github.com/balderdashy/sails/blob/master/docs/concepts/Security/CORS.md#2025-04-20_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\n'GET /videos': {\n   action: 'video/find',\n   cors: {\n     allowOrigins: ['http://example.com','https://api.example.com','http://blog.example.com:1337','https://foo.com:8888'],\n     allowCredentials: false\n   }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing a Custom Model Method in Sails.js\nDESCRIPTION: This example shows how to create a custom asynchronous model method 'findWithSameNameAsPerson' for the Monkey model. It demonstrates error handling, using other models, and returning query results.\nSOURCE: https://github.com/balderdashy/sails/blob/master/docs/concepts/ORM/Models.md#2025-04-20_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\n// in api/models/Monkey.js...\n\n// Find monkeys with the same name as the specified person\nfindWithSameNameAsPerson: async function (opts) {\n\tvar person = await Person.findOne({ id: opts.id });\n\t\n\tif (!person) {\n\t\tthrow require('flaverr')({\n      message: `Cannot find monkeys with the same name as the person w/ id=${opts.id} because that person does not exist.`,\n      code: 'E_UNKNOWN_PERSON'\n    });\n\t}\n\t\n\treturn await Monkey.find({ name: person.name });\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Up Auto-Increment in Sails.js Model\nDESCRIPTION: Shows how to configure an auto-incrementing numeric attribute in a Sails.js model. The attribute will automatically increment by one for each new record when no value is specified.\nSOURCE: https://github.com/balderdashy/sails/blob/master/docs/concepts/ORM/Attributes.md#2025-04-20_snippet_11\n\nLANGUAGE: javascript\nCODE:\n```\nattributes: {\n  placeInLine: {\n    type: 'number',\n    autoIncrement: true\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Controller-Based Policies in Sails.js\nDESCRIPTION: Example of configuring policies for a UserController, demonstrating how to set default policies, admin-only actions, and public access routes.\nSOURCE: https://github.com/balderdashy/sails/blob/master/docs/concepts/Policies/Policies.md#2025-04-20_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nmodule.exports.policies = {\n  UserController: {\n    // By default, require requests to come from a logged-in user\n    // (runs the policy in api/policies/isLoggedIn.js)\n    '*': 'isLoggedIn',\n\n    // Only allow admin users to delete other users\n    // (runs the policy in api/policies/isAdmin.js)\n    'delete': 'isAdmin',\n\n    // Allow anyone to access the login action, even if they're not logged in.\n    'login': true\n  }\n};\n```\n\n----------------------------------------\n\nTITLE: Populating Associations in Sails.js Queries\nDESCRIPTION: Illustrates how to use .populate() to fetch associated records in a Sails.js query. This example shows populating both 'collection' and 'model' associations and accessing the populated data.\nSOURCE: https://github.com/balderdashy/sails/blob/master/docs/concepts/ORM/Records.md#2025-04-20_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nvar orders = await Order.find()\n.populate('buyers')  // a \"collection\" association\n.populate('seller');  // a \"model\" association\n\n// this array is a snapshot of the Customers who are associated with the first Order as \"buyers\"\nconsole.log(orders[0].buyers);\n// => [ {id: 1, name: 'Robb Stark'}, {id: 6, name: 'Arya Stark'} ]\n\n// this object is a snapshot of the Company that is associated with the first Order as the \"seller\"\nconsole.log(orders[0].seller);\n// => { id: 42941, corporateName: 'WolvesRUs Inc.' }\n\n// this array is empty because the second Order doesn't have any \"buyers\"\nconsole.log(orders[1].buyers);\n// => []\n\n// this is `null` because there is no \"seller\" associated with the second Order\nconsole.log(orders[1].seller);\n// => null\n```\n\n----------------------------------------\n\nTITLE: Initializing Waterline and Performing CRUD Operations\nDESCRIPTION: JavaScript code to initialize Waterline, create User and Pet records, and query the data with associations. This demonstrates basic CRUD operations and populating related data.\nSOURCE: https://github.com/balderdashy/sails/blob/master/docs/concepts/ORM/standalone-usage.md#2025-04-20_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\nwaterline.initialize(config, (err, ontology)=>{\n  if (err) {\n    console.error(err);\n    return;\n  }\n\n  // Tease out fully initialized models.\n  var User = ontology.collections.user;\n  var Pet = ontology.collections.pet;\n\n  // Since we're using `await`, we'll scope our selves an async IIFE:\n  (async ()=>{\n    // First we create a user\n    var user = await User.create({\n      firstName: 'Neil',\n      lastName: 'Armstrong'\n    });\n\n    // Then we create the pet\n    var pet = await Pet.create({\n      breed: 'beagle',\n      type: 'dog',\n      name: 'Astro',\n      owner: user.id\n    });\n\n    // Then we grab all users and their pets\n    var users = await User.find().populate('pets');\n    console.log(users);\n  })()\n  .then(()=>{\n    // All done.\n  })\n  .catch((err)=>{\n    console.error(err);\n  });//_‚àè_\n  \n});\n```\n\n----------------------------------------\n\nTITLE: Querying a record using Sails.js .findOne()\nDESCRIPTION: This code snippet demonstrates how to use the `.findOne()` method in Sails.js to find a user record in the database based on the username criteria. It uses `await` to handle the asynchronous operation and checks if a user was found before logging a message to the console. The Users model must be defined in your Sails.js application.\nSOURCE: https://github.com/balderdashy/sails/blob/master/docs/reference/waterline/models/findOne.md#2025-04-20_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nvar finn = await Users.findOne({\n  username: 'finn'\n});\n\nif (!finn) {\n  sails.log('Could not find Finn, sorry.');\n}\nelse {\n  sails.log('Found \"%s\"', finn.fullName);\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Pet Model with Many-to-One Association in Sails.js\nDESCRIPTION: This snippet demonstrates how to define a Pet model with a many-to-one association to Users using the 'model' property. This creates the inverse relationship of the User-to-Pet association.\nSOURCE: https://github.com/balderdashy/sails/blob/master/docs/concepts/ORM/Associations/OnetoMany.md#2025-04-20_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\n// myApp/api/models/Pet.js\n// A pet may only belong to a single user\nmodule.exports = {\n  attributes: {\n    breed: {\n      type: 'string'\n    },\n    type: {\n      type: 'string'\n    },\n    name: {\n      type: 'string'\n    },\n\n    // Add a reference to User\n    owner: {\n      model: 'user'\n    }\n  }\n};\n```\n\n----------------------------------------\n\nTITLE: Error Negotiation with Promise Chaining in Sails.js\nDESCRIPTION: Shows how to handle different types of errors when creating a new user using promise chaining. It uses .catch() to handle uniqueness constraint violations, usage errors, and unexpected errors separately.\nSOURCE: https://github.com/balderdashy/sails/blob/master/docs/concepts/ORM/errors.md#2025-04-20_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nUser.create({\n  emailAddress: req.param('emailAddress')\n})\n.then(function (){\n  res.ok();\n})\n// Uniqueness constraint violation\n.catch({ code: 'E_UNIQUE' }, function (err) {\n  res.sendStatus(409);\n})\n// Some other kind of usage / validation error\n.catch({ name: 'UsageError' }, function (err) {\n  res.badRequest();\n})\n// If something completely unexpected happened.\n.catch(function (err) {\n  res.serverError(err);\n});\n```\n\n----------------------------------------\n\nTITLE: Comprehensive File Upload and Avatar Handling in Sails.js\nDESCRIPTION: An in-depth example demonstrating how to upload an avatar image, link it to a user account, and provide a download endpoint for the avatar.\nSOURCE: https://github.com/balderdashy/sails/blob/master/docs/concepts/File Uploads/File Uploads.md#2025-04-20_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\n// api/controllers/UserController.js\n//\n// ...\n\n\n/**\n * Upload avatar for currently logged-in user\n *\n * (POST /user/avatar)\n */\nuploadAvatar: function (req, res) {\n\n  req.file('avatar').upload({\n    // don't allow the total upload size to exceed ~10MB\n    maxBytes: 10000000\n  },function whenDone(err, uploadedFiles) {\n    if (err) {\n      return res.serverError(err);\n    }\n\n    // If no files were uploaded, respond with an error.\n    if (uploadedFiles.length === 0){\n      return res.badRequest('No file was uploaded');\n    }\n\n    // Get the base URL for our deployed application from our custom config\n    // (e.g. this might be \"http://foobar.example.com:1339\" or \"https://example.com\")\n    var baseUrl = sails.config.custom.baseUrl;\n\n    // Save the \"fd\" and the url where the avatar for a user can be accessed\n    User.update(req.session.userId, {\n\n      // Generate a unique URL where the avatar can be downloaded.\n      avatarUrl: require('util').format('%s/user/avatar/%s', baseUrl, req.session.userId),\n\n      // Grab the first file and use it's `fd` (file descriptor)\n      avatarFd: uploadedFiles[0].fd\n    })\n    .exec(function (err){\n      if (err) return res.serverError(err);\n      return res.ok();\n    });\n  });\n},\n\n\n/**\n * Download avatar of the user with the specified id\n *\n * (GET /user/avatar/:id)\n */\navatar: function (req, res){\n\n  User.findOne(req.param('id')).exec(function (err, user){\n    if (err) return res.serverError(err);\n    if (!user) return res.notFound();\n\n    // User has no avatar image uploaded.\n    // (should have never have hit this endpoint and used the default image)\n    if (!user.avatarFd) {\n      return res.notFound();\n    }\n\n    var SkipperDisk = require('skipper-disk');\n    var fileAdapter = SkipperDisk(/* optional opts */);\n\n    // set the filename to the same file as the user uploaded\n    res.set(\"Content-disposition\", \"attachment; filename='\" + file.name + \"'\");\n\n    // Stream the file down\n    fileAdapter.read(user.avatarFd)\n    .on('error', function (err){\n      return res.serverError(err);\n    })\n    .pipe(res);\n  });\n}\n\n//\n// ...\n```\n\n----------------------------------------\n\nTITLE: Executing a Waterline Query with Await\nDESCRIPTION: This snippet shows how to execute a Waterline query using the `await` keyword. The `await` keyword waits for the query to complete and assigns the result to the `zookeepers` variable. This is the preferred way to execute queries.\nSOURCE: https://github.com/balderdashy/sails/blob/master/docs/reference/waterline/queries/queries.md#2025-04-20_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nvar zookeepers = await Zookeeper.find();\n```\n\n----------------------------------------\n\nTITLE: Configuring MySQL Datastore in Sails.js\nDESCRIPTION: This snippet demonstrates how to configure a MySQL datastore in Sails.js. It includes settings for the adapter, host, port, user credentials, and database name.\nSOURCE: https://github.com/balderdashy/sails/blob/master/docs/concepts/ORM/ORM.md#2025-04-20_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n// in config/datastores.js\n// ...\n{\n  adapter: 'sails-mysql',\n  host: 'localhost',\n  port: 3306,\n  user: 'root',\n  password: 'g3tInCr4zee&stUfF',\n  database: 'database-name'\n}\n// ...\n```\n\n----------------------------------------\n\nTITLE: Implementing Password Hashing with beforeCreate Lifecycle Callback in Sails.js\nDESCRIPTION: This code snippet demonstrates how to use the beforeCreate lifecycle callback in a Sails.js User model to automatically hash a password before saving it to the database. It uses the sails.helpers.passwords.hashPassword helper function to perform the hashing.\nSOURCE: https://github.com/balderdashy/sails/blob/master/docs/concepts/ORM/Lifecyclecallbacks.md#2025-04-20_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n// User.js\nmodule.exports = {\n\n  attributes: {\n\n    username: {\n      type: 'string',\n      required: true\n    },\n\n    password: {\n      type: 'string',\n      minLength: 6,\n      required: true\n    }\n\n  },\n\n\n  beforeCreate: function (valuesToSet, proceed) {\n    // Hash password\n    sails.helpers.passwords.hashPassword(valuesToSet.password).exec((err, hashedPassword)=>{\n      if (err) { return proceed(err); }\n      valuesToSet.password = hashedPassword;\n      return proceed();\n    });//_‚àè_\n  }\n  \n};\n```\n\n----------------------------------------\n\nTITLE: Practical Example of Unsubscribing Sockets from User Records in Sails.js\nDESCRIPTION: A complete controller action example that finds users named 'Lenny', extracts their IDs, and unsubscribes the requesting socket from those user records. Includes error handling and socket request validation.\nSOURCE: https://github.com/balderdashy/sails/blob/master/docs/reference/websockets/resourceful-pubsub/unsubscribe.md#2025-04-20_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nunsubscribeFromUsersNamedLenny: function (req, res) {\n\n  if (!req.isSocket) {\n    return res.badRequest();\n  }\n\n  User.find({name: 'Lenny'}).exec(function(err, lennies) {\n    if (err) { return res.serverError(err); }\n\n    var lennyIds = _.pluck(lennies, 'id');\n\n    User.unsubscribe(req, lennyIds);\n\n    return res.ok();\n\n  });\n},\n```\n\n----------------------------------------\n\nTITLE: Querying Organizations with Sails.js in JavaScript\nDESCRIPTION: Demonstrates how to use await with Sails.js to find organizations. This replaces nested callbacks with simpler, more readable code.\nSOURCE: https://github.com/balderdashy/sails/blob/master/README.md#2025-04-20_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nvar orgs = await Organization.find();\n```\n\n----------------------------------------\n\nTITLE: Encrypted Attribute Configuration in Sails.js\nDESCRIPTION: Example showing how to configure an encrypted attribute for sensitive data.\nSOURCE: https://github.com/balderdashy/sails/blob/master/docs/concepts/ORM/Attributes.md#2025-04-20_snippet_9\n\nLANGUAGE: javascript\nCODE:\n```\nattributes: {\n  ssn: {\n    type: 'string',\n    encrypt: true\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Disabling Default Attributes in Sails.js Model\nDESCRIPTION: Demonstrates how to disable default attributes and define custom ones in a model definition.\nSOURCE: https://github.com/balderdashy/sails/blob/master/docs/concepts/ORM/Attributes.md#2025-04-20_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\n// api/models/ProductCategory.js\nmodule.exports = {\n  attributes: {\n    updatedAt: false,\n    label: { type: 'string', required: true },\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Overriding Blueprint Action in Sails.js Controller\nDESCRIPTION: This code snippet demonstrates how to override the built-in 'findOne' blueprint action in a Sails.js controller. It customizes the response format and populates specific associations.\nSOURCE: https://github.com/balderdashy/sails/blob/master/docs/concepts/Blueprints/Blueprint Actions.md#2025-04-20_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n// api/controllers/user/UserController.js\nmodule.exports = {\n\n  /**\n   * A custom action that overrides the built-in \"findOne\" blueprint action.\n   * As a dummy example of customization, imagine we were working on something in our app\n   * that demanded we tweak the format of the response data, and that we only populate two\n   * associations: \"company\" and \"friends\".\n   */\n  findOne: function (req, res) {\n\n    sails.log.debug('Running custom `findOne` action.  (Will look up user #'+req.param('id')+'...');\n\n    User.findOne({ id: req.param('id') }).omit(['password'])\n    .populate('company', { select: ['profileImageUrl'] })\n    .populate('top8', { omit: ['password'] })\n    .exec(function(err, userRecord) {\n      if (err) {\n        switch (err.name) {\n          case 'UsageError': return res.badRequest(err);\n          default: return res.serverError(err);\n        }\n      }\n\n      if (!userRecord) { return res.notFound(); }\n\n      if (req.isSocket) {\n        User.subscribe(req, [user.id]);\n      }\n\n      return res.ok({\n        model: 'user',\n        luckyCoolNumber: Math.ceil(10*Math.random()),\n        record: userRecord\n      });\n    });\n  }\n\n}\n```\n\n----------------------------------------\n\nTITLE: Accessing Configuration Values in Sails.js Application\nDESCRIPTION: Example of checking security configuration in a Sails.js application. This code verifies that CSRF protection is enabled when running in production mode, throwing an error if not properly configured.\nSOURCE: https://github.com/balderdashy/sails/blob/master/docs/concepts/Configuration/Configuration.md#2025-04-20_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\n// This example checks that, if we are in production mode, csrf is enabled.\n// It throws an error and crashes the app otherwise.\nif (sails.config.environment === 'production' && !sails.config.security.csrf) {\n  throw new Error('STOP IMMEDIATELY ! CSRF should always be enabled in a production deployment!');\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Standalone Action Policies in Sails.js\nDESCRIPTION: Example showing how to apply policies to standalone actions using path-based configuration with wildcards and specific routes.\nSOURCE: https://github.com/balderdashy/sails/blob/master/docs/concepts/Policies/Policies.md#2025-04-20_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nmodule.exports.policies = {\n  'user/*': 'isLoggedIn',\n  'user/delete': 'isAdmin',\n  'user/login': true\n}\n```\n\n----------------------------------------\n\nTITLE: Defining a Collection Association in Sails.js Model\nDESCRIPTION: Shows how to define a many-to-many association between models using the collection property. This example creates a wishlist association between a user and product models with bidirectional relationships.\nSOURCE: https://github.com/balderdashy/sails/blob/master/docs/concepts/ORM/Associations/Associations.md#2025-04-20_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nwishlist: {\n  collection: 'product',\n  via: 'wishlistedBy'\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Custom Response Handler in Sails.js\nDESCRIPTION: Example implementation of a custom response method that handles both JSON and view-based responses. The method accepts a message parameter and can either return JSON data or render a view based on the client's preferences. It sets appropriate status codes and handles view rendering errors gracefully.\nSOURCE: https://github.com/balderdashy/sails/blob/master/docs/concepts/extending-sails/Custom Responses/AddingCustomResponse.md#2025-04-20_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n/**\n * api/responses/myResponse.js\n *\n * This will be available in controllers as res.myResponse('foo');\n */\n\nmodule.exports = function(message) {\n\n  var req = this.req;\n  var res = this.res;\n\n  var viewFilePath = 'mySpecialView';\n  var statusCode = 200;\n\n  var result = {\n    status: statusCode\n  };\n\n  // Optional message\n  if (message) {\n    result.message = message;\n  }\n\n  // If the user-agent wants a JSON response, send json\n  if (req.wantsJSON) {\n    return res.json(result, result.status);\n  }\n\n  // Set status code and view locals\n  res.status(result.status);\n  for (var key in result) {\n    res.locals[key] = result[key];\n  }\n  // And render view\n  res.render(viewFilePath, result, function(err) {\n    // If the view doesn't exist, or an error occured, send json\n    if (err) {\n      return res.json(result, result.status);\n    }\n\n    // Otherwise, serve the `views/mySpecialView.*` page\n    res.render(viewFilePath);\n  });\n}\n```\n\n----------------------------------------\n\nTITLE: Modern Actions2 Format Implementation\nDESCRIPTION: Example of a modern actions2 format action that handles user welcome functionality with input validation and multiple exit conditions.\nSOURCE: https://github.com/balderdashy/sails/blob/master/docs/concepts/ActionsAndControllers/ActionsAndControllers.md#2025-04-20_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nmodule.exports = {\n\n  friendlyName: 'Welcome user',\n\n  description: 'Look up the specified user and welcome them, or redirect to a signup page if no user was found.',\n\n  inputs: {\n    userId: {\n      description: 'The ID of the user to look up.',\n      type: 'number',\n      required: true\n    }\n  },\n\n  exits: {\n    success: {\n      responseType: 'view',\n      viewTemplatePath: 'pages/welcome'\n    },\n    notFound: {\n      description: 'No user with the specified ID was found in the database.',\n      responseType: 'notFound'\n    }\n  },\n\n  fn: async function ({userId}) {\n    var user = await User.findOne({ id: userId });\n    if (!user) { throw 'notFound'; }\n    return {\n      name: user.name\n    };\n  }\n};\n```\n\n----------------------------------------\n\nTITLE: Configuring Custom Primary Key in Sails.js Model\nDESCRIPTION: Example showing how to configure a custom primary key with column name mapping for database integration.\nSOURCE: https://github.com/balderdashy/sails/blob/master/docs/concepts/ORM/model-settings.md#2025-04-20_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\nprimaryKey: 'id'\n```\n\nLANGUAGE: javascript\nCODE:\n```\nid: {\n  type: 'string',\n  columnName: 'email_address',\n  required: true\n}\n```\n\n----------------------------------------\n\nTITLE: Combining res.view() with Waterline Queries - JavaScript\nDESCRIPTION: Demonstrates a practical use of `res.view()` in combination with a database query using Waterline ORM. The example shows how to fetch data from a database, append it as locals, and render the data using a specified view template.\nSOURCE: https://github.com/balderdashy/sails/blob/master/docs/reference/res/res.view.md#2025-04-20_snippet_3\n\nLANGUAGE: js\nCODE:\n```\n// Find the 5 hottest oven brands on the market\nOven.find().sort('heat ASC').exec(function (err, ovens){\n  if (err) return res.serverError(err);\n\n  return res.view('oven/top5', {\n    hottestOvens: ovens\n  });\n  // -> responds using the view at `views/oven/top5.ejs`,\n  // and with the oven data we looked up as view locals.\n  //\n  // e.g. in the view, we might have something like:\n  // ...\n  // <% _.each(hottestOvens, function (aHotOven) { %>\n  //  <li><%= aHotOven.name %></li>\n  // <% }) %>\n  // ...\n});\n```\n\n----------------------------------------\n\nTITLE: Find Query with Projection in Sails.js\nDESCRIPTION: This snippet illustrates how to use projection in a Sails.js find query to selectively retrieve only the 'name' and 'email' fields of users named 'Finn'. It utilizes the `select` clause within the Waterline criteria to specify the desired attributes, improving performance and security by limiting the data returned.\nSOURCE: https://github.com/balderdashy/sails/blob/master/docs/reference/waterline/models/find.md#2025-04-20_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nvar usersNamedFinn = await User.find({\n  where: {name:'Finn'},\n  select: ['name', 'email']\n});\n```\n\n----------------------------------------\n\nTITLE: Implementing User Login with Session in Sails.js\nDESCRIPTION: Example of handling user authentication and storing user ID in session within a login action controller.\nSOURCE: https://github.com/balderdashy/sails/blob/master/docs/concepts/Sessions/sessions.md#2025-04-20_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nmodule.exports = {\n\n  login: function(req, res) {\n\n    // Authentication code here\n\n    // If successfully authenticated\n\n    req.session.userId = foundUser.id;   // returned from a database\n\n    return res.json(foundUser);\n\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Waterline Datastores and Adapters\nDESCRIPTION: JavaScript code to configure Waterline datastores and adapters. This sets up the sails-disk adapter and defines a default datastore.\nSOURCE: https://github.com/balderdashy/sails/blob/master/docs/concepts/ORM/standalone-usage.md#2025-04-20_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nvar config = {\n  adapters: {\n    'disk': sailsDiskAdapter\n  },\n\n  datastores: {\n    default: {\n      adapter: 'disk'\n    }\n  }\n};\n```\n\n----------------------------------------\n\nTITLE: Updating Records Using Sails.js\nDESCRIPTION: This snippet demonstrates how to use the update method to change all records that match given criteria. It utilizes the Sails.js ORM and allows for setting new values for specified fields.\nSOURCE: https://github.com/balderdashy/sails/blob/master/docs/reference/waterline/models/update.md#2025-04-20_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nawait Something.update(criteria)\n.set(valuesToSet);\n```\n\n----------------------------------------\n\nTITLE: Using comparison operators in JavaScript\nDESCRIPTION: Shows examples of using various comparison operators like '<', '<=', '>', and '>=' in queries.\nSOURCE: https://github.com/balderdashy/sails/blob/master/docs/concepts/ORM/Querylanguage.md#2025-04-20_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\nModel.find({\n  age: { '<': 30 }\n});\n\nModel.find({\n  age: { '<=': 20 }\n});\n\nModel.find({\n  age: { '>': 18 }\n});\n\nModel.find({\n  age: { '>=': 21 }\n});\n```\n\n----------------------------------------\n\nTITLE: Handling Validation Errors in Sails JS\nDESCRIPTION: This snippet illustrates error handling when the `.validate()` method throws validation errors, using a try-catch block. The method catches errors specific to validation like E_VALIDATION and logs them appropriately.\nSOURCE: https://github.com/balderdashy/sails/blob/master/docs/reference/waterline/models/validate.md#2025-04-20_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\ntry {\n  var normalizedBalance = BankAccount.validate('balance', '$349.86');\n} catch (err) {\n  switch (err.code) {\n    case 'E_VALIDATION':\n      // => '[Error: Invalid `bankAccount`]' \n      _.each(e.all, function(woe){\n        sails.log(woe.attrName+': '+woe.message);\n      });\n      break;\n    default:\n      throw err;\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Basic Find Query in Sails.js\nDESCRIPTION: This code snippet demonstrates a basic find query in Sails.js, which retrieves all users named 'Finn' from the database. It uses `await` to handle the asynchronous operation and logs the number of users found, along with their information.\nSOURCE: https://github.com/balderdashy/sails/blob/master/docs/reference/waterline/models/find.md#2025-04-20_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nvar usersNamedFinn = await User.find({name:'Finn'});\nsails.log('Wow, there are %d users named Finn.  Check it out:', usersNamedFinn.length, usersNamedFinn);\n```\n\n----------------------------------------\n\nTITLE: Implementing Custom Validations in Sails.js Model\nDESCRIPTION: Demonstrates how to define custom validation rules in a Sails.js User model. Shows validation implementation for firstName with length constraints, location coordinates validation, and password complexity requirements using custom validation functions.\nSOURCE: https://github.com/balderdashy/sails/blob/master/docs/concepts/ORM/Validations.md#2025-04-20_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\n// api/models/User.js\nmodule.exports = {\n\n  // Values passed for creates or updates of the User model must obey the following rules:\n  attributes: {\n\n    firstName: {\n      // Note that a base type (in this case \"string\") still has to be defined, even though validation rules are in use.\n      type: 'string',\n      required: true,\n      minLength: 5,\n      maxLength: 15\n    },\n\n    location: {\n      type: 'json',\n      custom: function(value) {\n        return _.isObject(value) &&\n        _.isNumber(value.x) && _.isNumber(value.y) &&\n        value.x !== Infinity && value.x !== -Infinity &&\n        value.y !== Infinity && value.y !== -Infinity;\n      }\n    },\n\n    password: {\n      type: 'string',\n      custom: function(value) {\n        // ‚Ä¢ be a string\n        // ‚Ä¢ be at least 6 characters long\n        // ‚Ä¢ contain at least one number\n        // ‚Ä¢ contain at least one letter\n        return _.isString(value) && value.length >= 6 && value.match(/[a-z]/i) && value.match(/[0-9]/);\n      }\n    }\n\n  }\n\n}\n```\n\n----------------------------------------\n\nTITLE: Lifting Sails App and Sending HTTP Request in JavaScript\nDESCRIPTION: Shows how to start a Sails app using .lift(), send a POST request using the 'request' library, and then lower the app. Includes error handling and configuration options.\nSOURCE: https://github.com/balderdashy/sails/blob/master/docs/concepts/Programmatic Usage/Programmatic Usage.md#2025-04-20_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nvar request = require('request');\nvar Sails = require('sails').constructor;\n\nvar mySailsApp = new Sails();\nmySailsApp.lift({\n  port: 1338\n  // Optionally pass in any other programmatic config overrides you like here.\n}, function(err) {\n  if (err) {\n    console.error('Failed to lift app.  Details:', err);\n    return;\n  }\n\n  // --‚Ä¢\n  // Make a request using the \"request\" library and display the response.\n  // Note that you still must have an `api/controllers/FooController.js` file\n  // under the current working directory, with an `index` action,\n  // or a `/foo` or `POST /foo` route set up in `config/routes.js`.\n  request.post('/foo', function (err, response) {\n    if (err) {\n      console.log('Could not send HTTP request.  Details:', err);\n    }\n    else {\n      console.log('Got response:', response);\n    }\n\n    // >--\n    // In any case, whether the request worked or not, now we need to call `.lower()`.\n    mySailsApp.lower(function (err) {\n      if (err) {\n        console.log('Could not lower Sails app.  Details:',err);\n        return;\n      }\n\n      // --‚Ä¢\n      console.log('Successfully lowered Sails app.');\n\n    });//</lower sails app>\n  });//</request.post() :: send http request>\n});//</lift sails app>\n```\n\n----------------------------------------\n\nTITLE: Defining Default Attributes in Sails.js Models\nDESCRIPTION: This snippet demonstrates how to define default attributes for all models in the config/models.js file. It includes id, createdAt, and updatedAt attributes with their types and auto-generation settings.\nSOURCE: https://github.com/balderdashy/sails/blob/master/docs/concepts/ORM/model-settings.md#2025-04-20_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nattributes: {\n  id: { type: 'number', autoIncrement: true },\n  createdAt: { type: 'number', autoCreatedAt: true },\n  updatedAt: { type: 'number', autoUpdatedAt: true },\n}\n```\n\n----------------------------------------\n\nTITLE: Querying Records in Sails.js\nDESCRIPTION: Demonstrates how to retrieve records using the .find() method and access their properties. This snippet shows basic record querying and logging in Sails.js.\nSOURCE: https://github.com/balderdashy/sails/blob/master/docs/concepts/ORM/Records.md#2025-04-20_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nvar records = await Order.find();\n\nconsole.log('Found %d records', records.length);\nif (records.length > 0) {\n  console.log('Found at least one record, and its `id` is:',records[0].id);\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a User Record Example - Sails.js (JavaScript)\nDESCRIPTION: This code snippet provides an example of using the `.create()` method to create a user record. It showcases how to create a user with the name 'Finn' and handle the response appropriately.\nSOURCE: https://github.com/balderdashy/sails/blob/master/docs/reference/waterline/models/create.md#2025-04-20_snippet_1\n\nLANGUAGE: JavaScript\nCODE:\n```\nawait User.create({name:'Finn'});\n```\n\nLANGUAGE: JavaScript\nCODE:\n```\nvar createdUser = await User.create({name:'Finn'}).fetch();\n```\n\nLANGUAGE: JavaScript\nCODE:\n```\nsails.log('Finn\\'s id is:', createdUser.id);\n```\n\n----------------------------------------\n\nTITLE: Populating Collection Association with Subcriteria in Sails.js\nDESCRIPTION: This example illustrates using the .populate() method with subcriteria to retrieve users named 'Finn' along with their top three purple swords sorted by hipness. This requires Sails.js and relies on optimized populates when models are within the same database. Returned JSON includes users with a populated list of 'swords'.\nSOURCE: https://github.com/balderdashy/sails/blob/master/docs/reference/waterline/queries/populate.md#2025-04-20_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\n// Warning: This is only safe to use on large datasets if both models are in the same database,\n// and the adapter supports optimized populates.\n// (e.g. cannot do this with the `User` model in PostgreSQL and the `Sword` model in MongoDB)\nvar usersNamedFinn = await User.find({ name:'Finn' })\n.populate('currentSwords', {\n  where: {\n    color: 'purple'\n  },\n  limit: 3,\n  sort: 'hipness DESC'\n});\n\n// Note that Finns without any swords are still included -- their `currentSwords` arrays will just be empty.\nsails.log('Wow, there are %d users named Finn.', usersNamedFinn.length);\nsails.log('Check it out, some of them probably have non-empty arrays of purple swords:', usersNamedFinn);\n\nreturn res.json(usersNamedFinn);\n```\n\n----------------------------------------\n\nTITLE: Populating Associations in Sails.js Query\nDESCRIPTION: Demonstrates how to use the .populate() method to retrieve a user record along with its associated pets. This is the standard approach for loading associated data in Sails.js.\nSOURCE: https://github.com/balderdashy/sails/blob/master/docs/concepts/ORM/Associations/Associations.md#2025-04-20_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n// Find a single user, including its pets\nvar userWithPets = await User.findOne(123).populate('pets');\n```\n\n----------------------------------------\n\nTITLE: Implementing a Helper Function for User Retrieval in Sails.js\nDESCRIPTION: A complete implementation of a Sails.js helper function that retrieves recently active users from the database. The helper includes friendly names, descriptions, input validation, and proper exit handling.\nSOURCE: https://github.com/balderdashy/sails/blob/master/docs/concepts/Helpers/ExampleHelper.md#2025-04-20_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n// api/helpers/get-recent-users.js\nmodule.exports = {\n\n\n  friendlyName: 'Get recent users',\n\n\n  description: 'Retrieve a list of users who were online most recently.',\n\n\n  extendedDescription: 'Use `activeSince` to only retrieve users who logged in since a certain date/time.',\n\n\n  inputs: {\n\n    numUsers: {\n      friendlyName: 'Number of users',\n      description: 'The maximum number of users to retrieve.',\n      type: 'number',\n      defaultsTo: 5\n    },\n\n    activeSince: {\n      description: 'Cut-off time to look for logins after, expressed as a JS timestamp.',\n      extendedDescription: 'Remember: A _JS timestamp_ is the number of **milliseconds** since [that fateful night in 1970](https://en.wikipedia.org/wiki/Unix_time).',\n      type: 'number',\n      defaultsTo: 0\n    }\n\n  },\n\n\n  exits: {\n\n    success: {\n      outputFriendlyName: 'Recent users',\n      outputDescription: 'An array of users who recently logged in.',\n    },\n\n    noUsersFound: {\n      description: 'Could not find any users who logged in during the specified time frame.'\n    }\n\n  },\n\n\n  fn: async function (inputs, exits) {\n\n    // Run the query\n    var users = await User.find({\n      active: true,\n      lastLogin: { '>': inputs.activeSince }\n    })\n    .sort('lastLogin DESC')\n    .limit(inputs.numUsers);\n\n    // If no users were found, trigger the `noUsersFound` exit.\n    if (users.length === 0) {\n      throw 'noUsersFound';\n    }\n\n    // Otherwise return the records through the `success` exit.\n    return exits.success(users);\n\n  }\n\n};\n```\n\n----------------------------------------\n\nTITLE: Querying with 'where' key and options in JavaScript\nDESCRIPTION: Demonstrates how to use the 'where' key along with query options like skip, limit, and sort to find records.\nSOURCE: https://github.com/balderdashy/sails/blob/master/docs/concepts/ORM/Querylanguage.md#2025-04-20_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nvar thirdPageOfRecentPeopleNamedMary = await Model.find({\n  where: { name: 'mary' },\n  skip: 20,\n  limit: 10,\n  sort: 'createdAt DESC'\n});\n```\n\n----------------------------------------\n\nTITLE: Required Star Rating Attribute in Sails.js\nDESCRIPTION: Implementation of a required star rating attribute with minimum and maximum value constraints.\nSOURCE: https://github.com/balderdashy/sails/blob/master/docs/concepts/ORM/Validations.md#2025-04-20_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nstarRating: {\n  type: 'number',\n  min: 1,\n  max: 5,\n  required: true,\n}\n```\n\n----------------------------------------\n\nTITLE: Creating and Publishing User Model Updates with Resourceful PubSub\nDESCRIPTION: Example showing how to create a new User model instance and notify all subscribed clients using the Resourceful PubSub API's publishCreate method.\nSOURCE: https://github.com/balderdashy/sails/blob/master/docs/concepts/Realtime/On the server.md#2025-04-20_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nUser.create({\n  name: 'johnny five'\n}).exec(function(err, newUser) {\n  if (err) {\n    // Handle errors here!\n    return;\n  }\n  // Tell any socket watching the User model class\n  // that a new User has been created!\n  User.publishCreate(newUser);\n});\n```\n\n----------------------------------------\n\nTITLE: Intercepting Errors in Sails.js - JavaScript\nDESCRIPTION: .intercept() allows automatic error capturing and modification before they are thrown in Sails.js applications. It requires a filter to specify which error to intercept and a handler for processing the error. The handler can return a modified error, a new error, or an exit signal. Key parameters include 'filter', which identifies the error, and 'handler', which processes the error. This method can throw a new or modified error or an exit signal, with the latter being particularly useful when using actions2.\nSOURCE: https://github.com/balderdashy/sails/blob/master/docs/reference/waterline/queries/intercept.md#2025-04-20_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nvar newUserRecord = await User.create({\n  emailAddress: inputs.emailAddress,\n  fullName: inputs.fullName,\n})\n.intercept('E_UNIQUE', ()=>{ return new Error('There is already an account using that email address!') })\n.fetch();\n```\n\nLANGUAGE: javascript\nCODE:\n```\nvar newUserRecord = await User.create({\n  emailAddress: inputs.emailAddress,\n  fullName: inputs.fullName,\n})\n.intercept('E_UNIQUE', ()=>'emailAlreadyInUse')\n.fetch();\n```\n\nLANGUAGE: javascript\nCODE:\n```\n.intercept('E_UNIQUE', 'emailAlreadyInUse')\n```\n\nLANGUAGE: javascript\nCODE:\n```\n.intercept({ code: 'E_UNIQUE' }, ()=>{ return 'emailAlreadyInUse'; })\n```\n\n----------------------------------------\n\nTITLE: Disabling CORS for a Specific Route in Sails.js\nDESCRIPTION: This example shows how to disable CORS for a specific route in config/routes.js, overriding the global CORS configuration.\nSOURCE: https://github.com/balderdashy/sails/blob/master/docs/concepts/Security/CORS.md#2025-04-20_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\n'POST /signup': {\n   action: 'user/signup',\n   cors: false\n}\n```\n\n----------------------------------------\n\nTITLE: Using .then() with Waterline Query in JavaScript\nDESCRIPTION: Example showing how to use the .then() method with a Waterline findOne query. The query looks up a user by email address, handles the case where no user is found, and includes error handling with .catch().\nSOURCE: https://github.com/balderdashy/sails/blob/master/docs/reference/waterline/queries/then.md#2025-04-20_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nUser.findOne({\n  email: req.param('email')\n})\n.then(function (user){\n  if (!user) { return res.notFound(); }\n  return res.json(user);\n})\n.catch(function (err) { return res.serverError(err); });\n```\n\n----------------------------------------\n\nTITLE: Configuring Blueprint Routes in Sails.js Controller\nDESCRIPTION: Example of how to disable blueprint settings (actions, shortcuts, and REST routes) at the controller level using the _config property in a Sails.js controller definition.\nSOURCE: https://github.com/balderdashy/sails/blob/master/docs/reference/blueprint-api/blueprint-api.md#2025-04-20_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n// In /api/controllers/PetController.js\nmodule.exports = {\n  _config: {\n    actions: false,\n    shortcuts: false,\n    rest: false\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Querying and Populating One-Way Association in Sails.js\nDESCRIPTION: This code snippet demonstrates how to query the User model and populate the associated Pet data using the 'populate' method in Sails.js. It includes an example of the expected output structure.\nSOURCE: https://github.com/balderdashy/sails/blob/master/docs/concepts/ORM/Associations/OneWayAssociation.md#2025-04-20_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nvar usersWithPonies = await User.find({ name:'Mike' }).populate('pony');\n  // The users object would look something like:\n  // [{\n  //  name: 'Mike',\n  //  age: 21,\n  //  pony: {\n  //    name: 'Pinkie Pie',\n  //    color: 'pink',\n  //    id: 5,\n  //    createdAt: Tue Feb 11 2014 15:45:33 GMT-0600 (CST),\n  //    updatedAt: Tue Feb 11 2014 15:45:33 GMT-0600 (CST)\n  //  },\n  //  createdAt: Tue Feb 11 2014 15:48:53 GMT-0600 (CST),\n  //  updatedAt: Tue Feb 11 2014 15:48:53 GMT-0600 (CST),\n  //  id: 1\n  // }]\n```\n\n----------------------------------------\n\nTITLE: Counting Records with Waterline ORM in Sails.js\nDESCRIPTION: Demonstrates basic usage of the .count() method to retrieve the total number of records matching specified criteria. The method returns the count of records as a number and supports async/await syntax.\nSOURCE: https://github.com/balderdashy/sails/blob/master/docs/reference/waterline/models/count.md#2025-04-20_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nvar numRecords = await Model.count(criteria);\n```\n\nLANGUAGE: javascript\nCODE:\n```\nvar total = await User.count({name:'Flynn'});\nsails.log(`There ${total===1?'is':'are'} ${total} user${total===1?'':'s'} named \"Flynn\".`);\n```\n\n----------------------------------------\n\nTITLE: Performing Queries with Leased Connection in Sails.js\nDESCRIPTION: This JavaScript example leases a connection from the default datastore, verifies the existence of a location by `locationId`, and retrieves all product offerings at the specified location. It uses the leased connection to perform queries efficiently before releasing the connection back to the pool. Errors such as `E_NO_SUCH_LOCATION` are handled using the `.intercept()` method.\nSOURCE: https://github.com/balderdashy/sails/blob/master/docs/reference/waterline/datastores/leaseConnection.md#2025-04-20_snippet_1\n\nLANGUAGE: JavaScript\nCODE:\n```\nvar inventory = await sails.getDatastore()\n.leaseConnection(async (db)=> {\n  var location = await Location.findOne({ id: inputs.locationId })\n  .usingConnection(db);\n  if (!location) {\n    let err = new Error('Cannot find location with that id (`'+inputs.locationId+'`)');\n    err.code = 'E_NO_SUCH_LOCATION';\n    throw err;\n  }\n\n  // Get all products at the location\n  var productOfferings = await ProductOffering.find({ location: inputs.locationId })\n  .populate('productType')\n  .usingConnection(db);\n\n  return productOfferings;\n})\n.intercept('E_NO_SUCH_LOCATION', 'notFound');\n\n// All done!  Whatever we were doing with that database connection worked.\n// Now we can proceed with our business.\n\n```\n\n----------------------------------------\n\nTITLE: File Upload API Implementation in Sails.js\nDESCRIPTION: Complete example of implementing a file upload API in Sails.js, including an index action for rendering the upload form and an upload action for handling the file upload.\nSOURCE: https://github.com/balderdashy/sails/blob/master/docs/concepts/File Uploads/File Uploads.md#2025-04-20_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\n// myApp/api/controllers/FileController.js\n\nmodule.exports = {\n\n  index: function (req,res){\n\n    res.writeHead(200, {'content-type': 'text/html'});\n    res.end(\n    '<form action=\"http://localhost:1337/file/upload\" enctype=\"multipart/form-data\" method=\"post\">'+\n    '<input type=\"text\" name=\"title\"><br>'+\n    '<input type=\"file\" name=\"avatar\" multiple=\"multiple\"><br>'+\n    '<input type=\"submit\" value=\"Upload\">'+\n    '</form>'\n    )\n  },\n  upload: function  (req, res) {\n    req.file('avatar').upload(function (err, files) {\n      if (err)\n        return res.serverError(err);\n\n      return res.json({\n        message: files.length + ' file(s) uploaded successfully!',\n        files: files\n      });\n    });\n  }\n\n};\n```\n\n----------------------------------------\n\nTITLE: Function Target Configuration in Sails.js\nDESCRIPTION: Demonstrates how to assign routes directly to functions for quick tests and inline middleware. Includes both direct function assignment and dictionary with fn key.\nSOURCE: https://github.com/balderdashy/sails/blob/master/docs/concepts/Routes/RouteTargetSyntax.md#2025-04-20_snippet_10\n\nLANGUAGE: javascript\nCODE:\n```\n'GET /*': {\n  skipAssets: true,\n  fn: function(req, res) {\n    return res.send('hello!');\n  }\n},\n```\n\n----------------------------------------\n\nTITLE: Complex query with multiple constraints in JavaScript\nDESCRIPTION: Shows how to combine multiple constraints in a query, including the use of the 'contains' modifier and sorting by multiple attributes.\nSOURCE: https://github.com/balderdashy/sails/blob/master/docs/concepts/ORM/Querylanguage.md#2025-04-20_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nvar teachersNamedMaryInMaine = await Model.find({\n  where: { name: 'mary', state: 'me', occupation: { contains: 'teacher' } },\n  sort: [{ firstName: 'ASC'}, { lastName: 'ASC'}]\n});\n```\n\n----------------------------------------\n\nTITLE: Creating Multiple Records in the Database - Sails.js JavaScript\nDESCRIPTION: This code snippet demonstrates how to create multiple user records in the database using the `.createEach()` method in Sails.js. It is designed to handle arrays of dictionaries representing the new records to be inserted.\nSOURCE: https://github.com/balderdashy/sails/blob/master/docs/reference/waterline/models/createEach.md#2025-04-20_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nawait User.createEach([{name:'Finn'}, {name: 'Jake'}]);\n```\n\n----------------------------------------\n\nTITLE: Implementing Custom Response in Sails.js (JavaScript)\nDESCRIPTION: This snippet demonstrates how to implement a custom response in Sails.js. It shows how to access request and response objects, handle parameters, and use built-in responses within a custom response function.\nSOURCE: https://github.com/balderdashy/sails/blob/master/docs/concepts/extending-sails/Custom Responses/Custom Responses.md#2025-04-20_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nmodule.exports = function insufficientFunds(err, extraInfo){\n  \n  var req = this.req;\n  var res = this.res;\n  var sails = req._sails;\n  \n  var newError = new Error('Insufficient funds');\n  newError.raw = err;\n  _.extend(newError, extraInfo);\n  \n  sails.log.verbose('Sent \"Insufficient funds\" response.');\n\n  return res.badRequest(newError);\n\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a Record in Database - Sails.js (JavaScript)\nDESCRIPTION: This snippet demonstrates how to create a record in the database using the Sails.js framework. The `create()` method accepts an `initialValues` argument that contains the data for the new record. It also supports fetching the created record if chained with `.fetch()`.\nSOURCE: https://github.com/balderdashy/sails/blob/master/docs/reference/waterline/models/create.md#2025-04-20_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nawait Something.create(initialValues);\n```\n\nLANGUAGE: JavaScript\nCODE:\n```\nvar createdRecord = await Something.create(initialValues).fetch();\n```\n\n----------------------------------------\n\nTITLE: Advanced User Model with Custom Column Mapping\nDESCRIPTION: Comprehensive example of a User model with custom table name and column mappings.\nSOURCE: https://github.com/balderdashy/sails/blob/master/docs/concepts/ORM/Attributes.md#2025-04-20_snippet_8\n\nLANGUAGE: javascript\nCODE:\n```\n// api/models/User.js\nmodule.exports = {\n  datastore: 'rustyOldMySQLDatabase',\n  tableName: 'our_users',\n  attributes: {\n    id: {\n      type: 'number',\n      unique: true,\n      columnName: 'the_primary_key'\n    },\n    name: {\n      type: 'string',\n      columnName: 'full_name'\n    },\n    password: {\n      type: 'string',\n      columnName: 'seriously_hashed_password'\n    },\n    email: {\n      type: 'string',\n      unique: true,\n      columnName: 'email_address'\n    }\n  }\n};\n```\n\n----------------------------------------\n\nTITLE: Example of Loading Sails Application - JavaScript\nDESCRIPTION: This example provides a practical implementation for loading a Sails application with specific logging configuration. It shows proper error handling and confirmation of success upon loading.\nSOURCE: https://github.com/balderdashy/sails/blob/master/docs/reference/application/advanced-usage/sails.load.md#2025-04-20_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nvar Sails = require('sails').constructor;\nvar sailsApp = new Sails();\n\nsailsApp.load({\n  log: {\n    level: 'error'\n  }\n}, function (err) {\n  if (err) {\n    console.log('Error occurred loading Sails app:', err);\n    return;\n  }\n\n  // --‚Ä¢\n  console.log('Sails app loaded successfully!');\n\n});\n```\n\n----------------------------------------\n\nTITLE: Executing SQL Query in Sails\nDESCRIPTION: This JavaScript snippet demonstrates the use of Sails' \".sendNativeQuery()\" to execute a raw SQL query. It requires the Sails framework and a SQL-compatible datastore setup. Parameters include a SQL string and optional values for dynamic content. The result format is database-specific.\nSOURCE: https://github.com/balderdashy/sails/blob/master/docs/reference/waterline/datastores/sendNativeQuery.md#2025-04-20_snippet_0\n\nLANGUAGE: usage\nCODE:\n```\nvar rawResult = await datastore.sendNativeQuery(sql, valuesToEscape);\n```\n\nLANGUAGE: js\nCODE:\n```\n// Build our SQL query template.\nvar NAMES_OF_PETS_SQL = `\nSELECT pet.name\nFROM pet\nWHERE pet.species_label = $1 OR pet.species_label = $2`;\n\n// Send it to the database.\nvar rawResult = await sails.sendNativeQuery(NAMES_OF_PETS_SQL, [ 'dog', 'cat' ]);\n\nsails.log(rawResult);\n// (result format depends on the SQL query that was passed in, and the adapter/dialect you're using)\n\n// Then parse the raw result and do whatever you like with it.\n\nreturn exits.success();\n```\n\n----------------------------------------\n\nTITLE: Accessing Raw Mongo Collection in Sails.js\nDESCRIPTION: This code snippet demonstrates how to access a raw Mongo collection instance from a Sails.js model using the `.manager` property. It requires the `sails-mongo` adapter and assumes a model named `Pet`. The `db` variable represents the Mongo client's `db` instance, allowing direct interaction with the database.\nSOURCE: https://github.com/balderdashy/sails/blob/master/docs/reference/waterline/datastores/manager.md#2025-04-20_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n// Since the db connection manager exposed by `sails-mongo` is actually\n// the same as the Mongo client's `db` instance, we can treat it as such.\nvar db = Pet.getDatastore().manager;\n\n// Now we can do anything we could do with a Mongo `db` instance:\nvar rawMongoCollection = db.collection(Pet.tableName);\n```\n\n----------------------------------------\n\nTITLE: Streaming with Populate and Complex Filtering\nDESCRIPTION: Streams comments with population, applies complex filtering, and performs conditional actions using .eachRecord()\nSOURCE: https://github.com/balderdashy/sails/blob/master/docs/reference/waterline/models/stream.md#2025-04-20_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nvar numReported = 0;\n\nawait Comment.stream({ author: 'Bailey Bitterbumps' })\n.limit(1000)\n.skip(40)\n.sort('title ASC')\n.populate('attachedFiles', {\n  limit: 3,\n  sort: 'updatedAt'\n})\n.populate('fromBlogPost')\n.eachRecord(async (comment)=>{\n\n  var isCreepyEnoughToWorryAbout = comment.rawMessage.match(/creepy/) && comment.attachedFiles.length > 1;\n  if (!isCreepyEnoughToWorryAbout) {\n    return;\n  }\n\n  await sails.helpers.sendTemplateEmail.with({\n    template: 'email-creepy-comment-notification',\n    templateData: {\n      url: `https://blog.example.com/${comment.fromBlogPost.slug}/comments/${comment.slug}.`\n    },\n    to: 'authorities@cannedmeat.gov',\n    subject: 'Creepy comment alert'\n  });\n\n  numReported++;\n});\n\nsails.log(`Successfully reported ${numReported} creepy comments.`);\n```\n\n----------------------------------------\n\nTITLE: Configuring Session Name with Security Prefix in Sails.js\nDESCRIPTION: This JavaScript snippet shows how to configure the session name in a Sails.js application by using a secure prefix '__Host-' to limit cookie scope. Setting this prefix requires the session cookie to have the 'secure' flag enabled.\nSOURCE: https://github.com/balderdashy/sails/blob/master/docs/reference/sails.config/sails.config.session.md#2025-04-20_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\n\"js\\nsession: {\\n  name: '__Host-sails.sid'\\n}\\n\"\n```\n\n----------------------------------------\n\nTITLE: Defining a Sails.js Helper (JavaScript)\nDESCRIPTION: Illustrates the structure of a Sails.js helper definition. This example defines a helper named 'format-welcome-message' with a single input and a simple greeting function.\nSOURCE: https://github.com/balderdashy/sails/blob/master/docs/concepts/Helpers/Helpers.md#2025-04-20_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\n// api/helpers/format-welcome-message.js\nmodule.exports = {\n\n  friendlyName: 'Format welcome message',\n\n\n  description: 'Return a personalized greeting based on the provided name.',\n\n\n  inputs: {\n\n    name: {\n      type: 'string',\n      example: 'Ami',\n      description: 'The name of the person to greet.',\n      required: true\n    }\n\n  },\n\n\n  fn: async function (inputs, exits) {\n    const result = `Hello, ${inputs.name}!`;\n    return exits.success(result);\n  }\n\n};\n```\n\n----------------------------------------\n\nTITLE: Executing a Waterline Query with Promises\nDESCRIPTION: This snippet shows how to execute a Waterline query using promise chaining with `.then()` and `.catch()`. It integrates with the Bluebird promise library.  It's crucial to provide both `.then()` and `.catch()` callbacks for proper error handling.\nSOURCE: https://github.com/balderdashy/sails/blob/master/docs/reference/waterline/queries/queries.md#2025-04-20_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nZookeeper.find()\n.then(function (zookeepers) {...})\n.catch(function (err) {...});\n//\n// (don't put code out here)\n```\n\n----------------------------------------\n\nTITLE: Practical Example of req.allParams() with Product Update\nDESCRIPTION: Shows how to use req.allParams() to gather all request parameters and update a product record, while excluding specific fields from being modified.\nSOURCE: https://github.com/balderdashy/sails/blob/master/docs/reference/req/req.allParams.md#2025-04-20_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nvar values = req.allParams();\n\n// Don't allow `price` or `isAvailable` to be edited.\ndelete values.price;\ndelete values.isAvailable;\n\n// At this point, `values` might look something like this:\n// values ==> { displayName: 'Bubble Trouble Bubble Bath' }\n\nProduct.update({sku: sku})\n.set(values)\n.exec(function (err, newProduct) {\n  // ...\n});\n```\n\n----------------------------------------\n\nTITLE: Creating Associated Pet Record in Sails.js\nDESCRIPTION: This snippet shows how to create a new Pet record and associate it with a User by setting the owner's primary key. This establishes the one-to-many relationship between User and Pet.\nSOURCE: https://github.com/balderdashy/sails/blob/master/docs/concepts/ORM/Associations/OnetoMany.md#2025-04-20_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nawait Pet.create({\n  breed: 'labrador',\n  type: 'dog',\n  name: 'fido',\n\n  // Set the User's Primary Key to associate the Pet with the User.\n  owner: 123\n});\n```\n\n----------------------------------------\n\nTITLE: Using Reflexive Associations in Sails.js Queries\nDESCRIPTION: This snippet demonstrates how to use reflexive associations in Sails.js queries, specifically adding a parent to a user and then retrieving the children of that parent.\nSOURCE: https://github.com/balderdashy/sails/blob/master/docs/concepts/ORM/Associations/Reflexive.md#2025-04-20_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\n// Add User #12 as a parent of User #23\nawait User.addToCollection(23, 'parents', 12);\n// Find User #12 and populate its children\nvar userTwelve = await User.findOne(12).populate('children');\n```\n\n----------------------------------------\n\nTITLE: Fetching Newly Created Records - Sails.js JavaScript\nDESCRIPTION: This code snippet shows how to create user records while fetching the newly created records back from the database using the `.fetch()` method in conjunction with `.createEach()`. It logs the number of created users.\nSOURCE: https://github.com/balderdashy/sails/blob/master/docs/reference/waterline/models/createEach.md#2025-04-20_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nvar createdUsers = User.createEach([{name:'Finn'}, {name: 'Jake'}]).fetch();\nsails.log(`Created ${createdUsers.length} user${createdUsers.length===1?'':'s'}.`);\n```\n\n----------------------------------------\n\nTITLE: Executing Waterline Queries using .exec() in Sails.js - Usage\nDESCRIPTION: The `.exec()` method is used to execute a Waterline query. It expects a Node-style callback that will be invoked once the query execution completes. Key parameters include an error object and a result reference, depending on the query and the database used. This snippet provides a structural template for using `.exec()` in callback style.\nSOURCE: https://github.com/balderdashy/sails/blob/master/docs/reference/waterline/queries/exec.md#2025-04-20_snippet_0\n\nLANGUAGE: usage\nCODE:\n```\n.exec(function (err, result) {\n\n})\n```\n\n----------------------------------------\n\nTITLE: Updating a Record in Sails.js/Waterline ORM\nDESCRIPTION: Demonstrates updating a single record using .updateOne() method with criteria and values to set. The method will throw an error if multiple records match the criteria.\nSOURCE: https://github.com/balderdashy/sails/blob/master/docs/reference/waterline/models/updateOne.md#2025-04-20_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nvar updatedRecord = await Something.updateOne(criteria)\n.set(valuesToSet);\n```\n\nLANGUAGE: javascript\nCODE:\n```\nvar updatedUser = await User.updateOne({ firstName:'Pen' })\n.set({\n  firstName:'Finn'\n});\n\nif (updatedUser) {\n  sails.log('Updated the user named \"Pen\" so that their new name is \"Finn\".');\n}\nelse {\n  sails.log('The database does not contain a user named \"Pen\".');\n}\n```\n\n----------------------------------------\n\nTITLE: Uploading Files to Custom Directory in Sails.js\nDESCRIPTION: Example of uploading files to a custom directory (assets/images) instead of the default .tmp/uploads directory.\nSOURCE: https://github.com/balderdashy/sails/blob/master/docs/concepts/File Uploads/File Uploads.md#2025-04-20_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nreq.file('avatar').upload({\n  dirname: require('path').resolve(sails.config.appPath, 'assets/images')\n},function (err, uploadedFiles) {\n  if (err) return res.serverError(err);\n\n  return res.json({\n    message: uploadedFiles.length + ' file(s) uploaded successfully!'\n  });\n});\n```\n\n----------------------------------------\n\nTITLE: Waterline Query Error Handling in JavaScript\nDESCRIPTION: Demonstrates error handling for a Waterline query using .catch() with multiple error scenarios, showing how to handle different types of errors like UsageError and unexpected errors\nSOURCE: https://github.com/balderdashy/sails/blob/master/docs/reference/waterline/queries/catch.md#2025-04-20_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nUser.findOne({\n  email: req.param('email')\n})\n.then(function (user){\n  if(!user) { return res.notFound(); }\n  return res.json(user);\n})\n// If there was some kind of usage / validation error\n.catch({ name: 'UsageError' }, function (err) {\n  return res.badRequest(err);\n})\n// If something completely unexpected happened.\n.catch(function (err) {\n  return res.serverError(err);\n});\n```\n\n----------------------------------------\n\nTITLE: Configuring Custom HTTP Middleware in Sails.js\nDESCRIPTION: This snippet demonstrates how to set up custom HTTP middleware functions in a Sails.js application. It includes examples of adding custom middleware, initializing middleware with setup code, and integrating third-party middleware like Passport.\nSOURCE: https://github.com/balderdashy/sails/blob/master/docs/concepts/Middleware/Middleware.md#2025-04-20_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n// config/http.js\nmodule.exports.http = {\n\n  middleware: {\n\n    order: [\n      'cookieParser',\n      'session',\n      'passportInit',            // <==== If you're using \"passport\", you'll want to have its two\n      'passportSession',         // <==== middleware functions run after \"session\".\n      'bodyParser',\n      'compress',\n      'foobar',                  // <==== We can put other, custom HTTP middleware like this wherever we want.\n      'poweredBy',\n      'router',\n      'www',\n      'favicon',\n    ],\n\n\n    // An example of a custom HTTP middleware function:\n    foobar: (function (){\n      console.log('Initializing `foobar` (HTTP middleware)...');\n      return function (req,res,next) {\n        console.log('Received HTTP request: '+req.method+' '+req.path);\n        return next();\n      };\n    })(),\n\n    // An example of a couple of 3rd-party HTTP middleware functions:\n    // (notice that this time we're using an existing middleware library from npm)\n    passportInit    : (function (){\n      var passport = require('passport');\n      var reqResNextFn = passport.initialize();\n      return reqResNextFn;\n    })(),\n\n    passportSession : (function (){\n      var passport = require('passport');\n      var reqResNextFn = passport.session();\n      return reqResNextFn;\n    })()\n\n  },\n}\n```\n\n----------------------------------------\n\nTITLE: RESTful Blueprint Routes for Boat Model\nDESCRIPTION: Example of automatically generated RESTful routes for a Boat model in Sails.js, showing standard CRUD operations and relationship handling with a Driver model.\nSOURCE: https://github.com/balderdashy/sails/blob/master/docs/concepts/Blueprints/Blueprint Routes.md#2025-04-20_snippet_0\n\nLANGUAGE: http\nCODE:\n```\nGET /boat -> find boats\nGET /boat/:id -> find single boat\nPOST /boat -> create new boat\nPATCH /boat/:id -> update boat\nDELETE /boat/:id -> destroy boat\nGET /boat/:id/drivers -> find associated drivers\nPUT /boat/:id/drivers/:fk -> add driver to boat\nDELETE /boat/:id/drivers/:fk -> remove driver from boat\nPUT /boat/:id/drivers -> replace all drivers\n```\n\n----------------------------------------\n\nTITLE: CSRF Token Route Configuration\nDESCRIPTION: Route configuration for providing CSRF tokens via API endpoint.\nSOURCE: https://github.com/balderdashy/sails/blob/master/docs/concepts/Security/CSRF.md#2025-04-20_snippet_3\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"GET /csrfToken\": { \"action\": \"security/grant-csrf-token\" }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing S3 File Upload in Sails.js Controller\nDESCRIPTION: Controller action that handles file uploads to Amazon S3. It uses the Skipper S3 adapter to stream the file upload directly to S3 and returns information about the uploaded files. Requires S3 credentials (key, secret) and a bucket name.\nSOURCE: https://github.com/balderdashy/sails/blob/master/docs/concepts/File Uploads/uploading-to-amazon-s3.md#2025-04-20_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\n  uploadFile: function (req, res) {\n    req.file('avatar').upload({\n      adapter: require('skipper-s3'),\n      key: 'S3 Key',\n      secret: 'S3 Secret',\n      bucket: 'Bucket Name'\n    }, function (err, filesUploaded) {\n      if (err) return res.serverError(err);\n      return res.ok({\n        files: filesUploaded,\n        textParams: req.allParams()\n      });\n    });\n  }\n```\n\n----------------------------------------\n\nTITLE: Validating User Data in Sails JS\nDESCRIPTION: This snippet shows examples of using the `.validate()` method to check and normalize user-related attributes such as 'emailAddress' and 'password'. The method throws an error if normalization fails, requiring manual error handling.\nSOURCE: https://github.com/balderdashy/sails/blob/master/docs/reference/waterline/models/validate.md#2025-04-20_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nUser.validate('emailAddress', req.param('email'));\nUser.validate('password', req.param('password'));\n```\n\n----------------------------------------\n\nTITLE: Example Result of Find Query with Projection\nDESCRIPTION: This example shows the potential result of a find query with projection, including only the `id`, `name`, and `email` fields. This demonstrates how to limit the returned data, useful for performance and security when passing found records to the client.\nSOURCE: https://github.com/balderdashy/sails/blob/master/docs/reference/waterline/models/find.md#2025-04-20_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\n[\n  {\n    id: 7392,\n    name: 'Finn',\n    email: 'finn_2017@gmail.com'\n  },\n  {\n    id: 4427,\n    name: 'Finn',\n    email: 'walkingfinn@outlook.com'\n  }\n  // ...more users named Finn and their email addresses\n]\n```\n\n----------------------------------------\n\nTITLE: Configuring CORS with Whitelisted Origins in Sails.js\nDESCRIPTION: This snippet demonstrates how to enable CORS for all routes in a Sails.js application, allowing requests from a list of trusted domains. It uses the cors configuration in config/security.js.\nSOURCE: https://github.com/balderdashy/sails/blob/master/docs/concepts/Security/CORS.md#2025-04-20_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\ncors: {\n  allRoutes: true,\n  allowOrigins: ['http://example.com','https://api.example.com','http://blog.example.com:1337','https://foo.com:8888']\n}\n```\n\n----------------------------------------\n\nTITLE: Executing raw SQL queries with PostgreSQL\nDESCRIPTION: This example demonstrates communicating directly with the `pg` package to perform a raw SQL query using the `.query()` method in a Sails model configured with PostgreSQL. The SQL query selects a pet's name where the pet's name matches the given parameter. Upon query completion, it logs the raw result and handles success or error through callbacks.\nSOURCE: https://github.com/balderdashy/sails/blob/master/docs/reference/waterline/models/query.md#2025-04-20_snippet_1\n\nLANGUAGE: js\nCODE:\n```\nPet.query('SELECT pet.name FROM pet WHERE pet.name = $1', [ 'dog' ] ,function(err, rawResult) {\n  if (err) { return res.serverError(err); }\n\n  sails.log(rawResult);\n  // (result format depends on the SQL query that was passed in, and the adapter you're using)\n\n  // Then parse the raw result and do whatever you like with it.\n\n  return res.ok();\n\n});\n```\n\n----------------------------------------\n\nTITLE: Intercepting Exits with .intercept() in Sails.js\nDESCRIPTION: Shows how to use the .intercept() method to transform a specific exit into a custom error. This allows for custom error handling while preserving the original error context.\nSOURCE: https://github.com/balderdashy/sails/blob/master/docs/concepts/Helpers/ExampleHelper.md#2025-04-20_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\nvar users = await sails.helpers.getRecentUsers(10)\n.intercept('noUsersFound', ()=>{\n  return new Error('Inconceivably, no active users were found for that timeframe.');\n});\n```\n\n----------------------------------------\n\nTITLE: Defining Reflexive Associations in Sails.js User Model\nDESCRIPTION: This snippet shows how to define various types of reflexive associations in a Sails.js User model, including singular, plural (with via), and via-less associations.\nSOURCE: https://github.com/balderdashy/sails/blob/master/docs/concepts/ORM/Associations/Reflexive.md#2025-04-20_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n// myApp/api/models/User.js\nmodule.exports = {\n  attributes: {\n    firstName: {\n      type: 'string'\n    },\n    lastName: {\n      type: 'string'\n    },\n\n    // Add a singular reflexive association\n    bestFriend: {\n      model: 'user',\n    },\n\n    // Add one side of a plural reflexive association\n    parents: {\n      collection: 'user',\n      via: 'children'\n    },\n\n    // Add the other side of a plural reflexive association\n    children: {\n      collection: 'user',\n      via: 'parents'\n    },\n\n    // Add another plural reflexive association, this one via-less\n    bookmarkedUsers: {\n      collection: 'user'\n    }\n\n  }\n};\n```\n\n----------------------------------------\n\nTITLE: Defining Many-to-Many Association in User Model (JavaScript)\nDESCRIPTION: This snippet shows how to define a many-to-many association in a User model, where a user can have many pets. It uses the 'collection' attribute with a 'via' key to establish the relationship.\nSOURCE: https://github.com/balderdashy/sails/blob/master/docs/concepts/ORM/Associations/ManytoMany.md#2025-04-20_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n// myApp/api/models/User.js\n// A user may have many pets\nmodule.exports = {\n  attributes: {\n    firstName: {\n      type: 'string'\n    },\n    lastName: {\n      type: 'string'\n    },\n\n    // Add a reference to Pet\n    pets: {\n      collection: 'pet',\n      via: 'owners'\n    }\n  }\n};\n```\n\n----------------------------------------\n\nTITLE: Route Verb and Path Structure\nDESCRIPTION: Shows the format of a route definition with HTTP verb and path components.\nSOURCE: https://github.com/balderdashy/sails/blob/master/docs/concepts/Routes/RouteTargetSyntax.md#2025-04-20_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\n'POST  /foo/bar'\n```\n\n----------------------------------------\n\nTITLE: Disabling Routes Using Response Target Syntax in Sails.js\nDESCRIPTION: Example showing how to disable specific HTTP methods or paths in the routes.js configuration file using response target syntax. This is particularly useful for preventing unintended exposure of controller actions in production.\nSOURCE: https://github.com/balderdashy/sails/blob/master/docs/concepts/Blueprints/Blueprint Routes.md#2025-04-20_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\n'POST /user': {response: 'notFound'}\n```\n\n----------------------------------------\n\nTITLE: Defining Basic Model Attributes in Sails.js\nDESCRIPTION: Example showing how to define basic model attributes with different data types and validation rules.\nSOURCE: https://github.com/balderdashy/sails/blob/master/docs/concepts/ORM/Attributes.md#2025-04-20_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n{\n  attributes: {\n    emailAddress: { type: 'string', required: true, },\n    karma: { type: 'number', },\n    isSubscribedToNewsletter: { type: 'boolean', defaultsTo: true, },\n  },\n}\n```\n\n----------------------------------------\n\nTITLE: Error Negotiation with Await in Sails.js\nDESCRIPTION: Demonstrates how to handle different types of errors when creating a new user using await. It uses .intercept() to handle uniqueness constraint violations and usage errors separately.\nSOURCE: https://github.com/balderdashy/sails/blob/master/docs/concepts/ORM/errors.md#2025-04-20_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nawait User.create({ emailAddress: inputs.emailAddress })\n// Uniqueness constraint violation\n.intercept('E_UNIQUE', (err)=> {\n  return 'emailAlreadyInUse';\n})\n// Some other kind of usage / validation error\n.intercept({name:'UsageError'}, (err)=> {\n  return 'invalid';\n});\n// If something completely unexpected happened, the error will be thrown as-is.\n\nreturn exits.success();\n```\n\n----------------------------------------\n\nTITLE: Executing a Waterline Query with Exec and a Callback\nDESCRIPTION: This snippet demonstrates the traditional way of executing a Waterline query using the `.exec()` method with a callback function. It is necessary for older versions of Node.js that do not support `await`. Error handling is done within the callback function.\nSOURCE: https://github.com/balderdashy/sails/blob/master/docs/reference/waterline/queries/queries.md#2025-04-20_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nZookeeper.find().exec(function afterFind(err, zookeepers) {\n\n  // Careful!  Do not throw an error in here without a `try` block!\n  // (Even a simple typo or null pointer exception could crash the process!)\n\n  if (err) {\n    // uh oh\n    // (handle error; e.g. `return res.serverError(err)`)\n    return;\n  }\n\n  // would you look at all those zookeepers?\n  // (now let's do the next thing;\n  //  e.g. `_.reduce(zookeepers, ...)` and/or `return res.json(zookeepers)`)\n  // ‚Ä¶\n});\n//\n// (don't put code out here)\n```\n\n----------------------------------------\n\nTITLE: Broadcasting Messages to Sockets in Sails.js\nDESCRIPTION: Demonstrates the basic usage of sails.sockets.broadcast() to send a message to all sockets in a room. This method can be used with different argument combinations to broadcast messages, specify event names, and omit specific sockets.\nSOURCE: https://github.com/balderdashy/sails/blob/master/docs/reference/websockets/sails.sockets/sails.sockets.broadcast.md#2025-04-20_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nsails.sockets.broadcast(roomNames, data);\n```\n\n----------------------------------------\n\nTITLE: Using res.redirect() to redirect to a URL\nDESCRIPTION: This snippet demonstrates how to use the res.redirect() method to redirect the user agent to a specified URL. It details the function signature and the expected behavior regarding the provided URL.\nSOURCE: https://github.com/balderdashy/sails/blob/master/docs/reference/res/res.redirect.md#2025-04-20_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nreturn res.redirect(url);\n```\n\n----------------------------------------\n\nTITLE: Adding Socket to Room with sails.sockets API\nDESCRIPTION: Demonstrates how to add a socket connection to a specific room using the sails.sockets.join() method.\nSOURCE: https://github.com/balderdashy/sails/blob/master/docs/concepts/Realtime/On the server.md#2025-04-20_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nsails.sockets.join(someSocket, \"funSockets\");\n```\n\n----------------------------------------\n\nTITLE: Intercepting Errors in Sails.js Waterline ORM\nDESCRIPTION: Shows how to use the .intercept() method to modify errors or return special exit signals. This allows for more granular error handling without using try...catch blocks.\nSOURCE: https://github.com/balderdashy/sails/blob/master/docs/concepts/ORM/errors.md#2025-04-20_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nawait Something.create({‚Ä¶})\n.intercept((err)=>{\n // Return a modified error here (or a special exit signal)\n // and .create() will throw that instead\n err.message = 'Uh oh: '+err.message;\n return err;\n});\n```\n\n----------------------------------------\n\nTITLE: Enabling CORS for All Origins in Sails.js\nDESCRIPTION: This configuration allows cross-origin requests from any domain to all routes in a Sails.js app. It sets allowOrigins to '*' and disables credentials for security reasons.\nSOURCE: https://github.com/balderdashy/sails/blob/master/docs/concepts/Security/CORS.md#2025-04-20_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\ncors: {\n  allRoutes: true,\n  allowOrigins: '*',\n  allowCredentials: false\n}\n```\n\n----------------------------------------\n\nTITLE: AJAX Request with CSRF Token\nDESCRIPTION: Example of including CSRF token in jQuery AJAX POST request.\nSOURCE: https://github.com/balderdashy/sails/blob/master/docs/concepts/Security/CSRF.md#2025-04-20_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\n$.post('/checkout', {\n  order: '8abfe13491afe',\n  electronicReceiptOK: true,\n  _csrf: 'USER_CSRF_TOKEN'\n}, function andThen(){ ... });\n```\n\n----------------------------------------\n\nTITLE: Implementing Multiple Policies for an Action in Sails.js\nDESCRIPTION: Example demonstrating how to apply multiple policies to a single action using an array configuration.\nSOURCE: https://github.com/balderdashy/sails/blob/master/docs/concepts/Policies/Policies.md#2025-04-20_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\n'getEncryptedData': ['isLoggedIn', 'isInValidRegion']\n```\n\n----------------------------------------\n\nTITLE: Accessing Datastore via .getDatastore() in Sails.js\nDESCRIPTION: The `.getDatastore()` method is used to retrieve the datastore instance associated with a particular Sails.js model. This method returns a datastore instance, which is a dictionary representing the connection to the database. The method is synchronous, meaning it doesn't require `await`, promise chaining, or callbacks.\nSOURCE: https://github.com/balderdashy/sails/blob/master/docs/reference/waterline/models/getDatastore.md#2025-04-20_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n```usage\nSomething.getDatastore();\n```\n```\n\n----------------------------------------\n\nTITLE: Basic File Upload in Sails.js\nDESCRIPTION: A simple example of handling file uploads in Sails.js using the req.file().upload() method.\nSOURCE: https://github.com/balderdashy/sails/blob/master/docs/concepts/File Uploads/File Uploads.md#2025-04-20_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nreq.file('avatar').upload(function (err, uploadedFiles) {\n  // ...\n});\n```\n\n----------------------------------------\n\nTITLE: Configuring Socket.io Redis Adapter in Sails.js\nDESCRIPTION: Example configuration settings needed in /config/sockets.js to enable multi-server realtime communication using the @sailshq/socket.io-redis adapter with a hosted Redis instance.\nSOURCE: https://github.com/balderdashy/sails/blob/master/docs/concepts/Realtime/Multi-server environments.md#2025-04-20_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n{\n  adapter: '@sailshq/socket.io-redis',\n  host: 'your-redis-host',\n  password: 'your-redis-password'\n}\n```\n\n----------------------------------------\n\nTITLE: Handling Specific Exits with .tolerate() in Sails.js\nDESCRIPTION: Demonstrates using the .tolerate() method to handle a specific exit from a helper function. This example handles the 'noUsersFound' exit by logging a message instead of throwing an error.\nSOURCE: https://github.com/balderdashy/sails/blob/master/docs/concepts/Helpers/ExampleHelper.md#2025-04-20_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nvar users = await sails.helpers.getRecentUsers(10)\n.tolerate('noUsersFound', ()=>{\n  // ... handle the case where no users were found. For example:\n  sails.log.verbose(\n    'Worth noting: Just handled a request for active users during a time frame '+\n    'where no users were found.  Anyway, I didn\\'t think this was possible, because '+\n    'our app is so cool and popular.  But there you have it.'\n  );\n});\n```\n\n----------------------------------------\n\nTITLE: Executing Waterline Queries using .exec() in Sails.js - JavaScript\nDESCRIPTION: This JavaScript snippet demonstrates how to use the `.exec()` method to run a Waterline query with error handling. The example involves a `Zookeeper.find()` query, where, upon success, the results are returned in JSON format. Proper error handling ensures server errors are managed gracefully.\nSOURCE: https://github.com/balderdashy/sails/blob/master/docs/reference/waterline/queries/exec.md#2025-04-20_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nZookeeper.find().exec((err, zookeepers)=>{\n  if (err) {\n    return res.serverError(err);\n  }\n\n  // would you look at all those zookeepers?\n  return res.json(zookeepers);\n});\n//\n// (don't put code out here)\n```\n\n----------------------------------------\n\nTITLE: Implementing File Upload to MongoDB GridFS in Sails.js Controller\nDESCRIPTION: Controller method that handles file uploads to MongoDB GridFS. The code uses Skipper's file upload API with the GridFS adapter and requires a MongoDB connection URI. It returns a server error if the upload fails or a success response on completion.\nSOURCE: https://github.com/balderdashy/sails/blob/master/docs/concepts/File Uploads/uploading-to-mongo-gridfs.md#2025-04-20_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nuploadFile: function (req, res) {\n  req.file('avatar').upload({\n    adapter: require('skipper-gridfs'),\n    uri: 'mongodb://[username:password@]host1[:port1][/[database[.bucket]]'\n  }, function (err, filesUploaded) {\n    if (err) return res.serverError(err);\n    return res.ok();\n  });\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring MongoDB Connection in Sails.js Datastores\nDESCRIPTION: Sets up the default datastore configuration in config/datastores.js to use the sails-mongo adapter with a local MongoDB connection URL.\nSOURCE: https://github.com/balderdashy/sails/blob/master/docs/tutorials/mongo.md#2025-04-20_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\ndefault: {\n  adapter: 'sails-mongo',\n  url: 'mongodb://root@localhost/foo'\n}\n```\n\n----------------------------------------\n\nTITLE: Example Usage of .destroyOne() Method\nDESCRIPTION: This example illustrates practical usage of the .destroyOne() method, showing how to handle the result of the deletion and log the outcome accordingly.\nSOURCE: https://github.com/balderdashy/sails/blob/master/docs/reference/waterline/models/destroyOne.md#2025-04-20_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nvar burnedBook = await User.destroyOne({id: 4})\nif (burnedBook) {\n  sails.log('Deleted book with `id: 4`.');\n} else {\n  sails.log('The database does not have a book with `id: 4`.');\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Optional Email Address Attribute in Sails.js\nDESCRIPTION: Example showing how to define an email address attribute that accepts valid email strings or empty strings but not null values.\nSOURCE: https://github.com/balderdashy/sails/blob/master/docs/concepts/ORM/Validations.md#2025-04-20_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nworkEmail: {\n  type: 'string',\n  isEmail: true,\n}\n```\n\n----------------------------------------\n\nTITLE: Averaging with Sails.js .avg()\nDESCRIPTION: Demonstrates how to use the .avg() method in Sails.js to calculate the average balance of bank accounts for owners aged between 35 and 45. The example showcases the usage of the `where` clause to specify criteria for selecting records.\nSOURCE: https://github.com/balderdashy/sails/blob/master/docs/reference/waterline/models/avg.md#2025-04-20_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nvar averageBalance = await BankAccount.avg('balance')\n.where({\n  ownerAge: { '>=': 35, '<=': 45 }\n});\n```\n\n----------------------------------------\n\nTITLE: Connecting Socket and Listening for 'hello' Event in Sails.js\nDESCRIPTION: This code snippet shows how to include the sails.io.js script to create and auto-connect a client socket to the Sails/Node.js server. It also demonstrates how to listen for a custom 'hello' event using io.socket.on().\nSOURCE: https://github.com/balderdashy/sails/blob/master/docs/concepts/Realtime/Realtime.md#2025-04-20_snippet_1\n\nLANGUAGE: html\nCODE:\n```\n<script type=\"text/javascript\" src=\"/js/dependencies/sails.io.js\"></script>\n<script type=\"text/javascript\">\nio.socket.on('hello', function (data) {\n  console.log('Socket `' + data.id + '` joined the party!');\n});\n</script>\n```\n\n----------------------------------------\n\nTITLE: Example: Broadcasting User Login Event in Sails.js Controller\nDESCRIPTION: Illustrates how to use sails.sockets.blast() in a controller action to broadcast a user login event. It sends a message with user details to all connected sockets except the one associated with the current request.\nSOURCE: https://github.com/balderdashy/sails/blob/master/docs/reference/websockets/sails.sockets/sails.sockets.blast.md#2025-04-20_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nsails.sockets.blast('user_logged_in', {\n  msg: 'User #' + user.id + ' just logged in.',\n  user: {\n    id: user.id,\n    username: user.username\n  }\n}, req);\n```\n\n----------------------------------------\n\nTITLE: Making a Socket Request in Sails.js\nDESCRIPTION: This snippet demonstrates how to include the sails.io.js library and make a GET request to the '/hello' route using the automatically-connected socket. It logs the server's response to the console.\nSOURCE: https://github.com/balderdashy/sails/blob/master/docs/concepts/Realtime/On the client.md#2025-04-20_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<script type=\"text/javascript\" src=\"/js/dependencies/sails.io.js\"></script>\n<script type=\"text/javascript\">\nio.socket.get('/hello', function responseFromServer (body, response) {\n  console.log(\"The server responded with status \" + response.statusCode + \" and said: \", body);\n});\n</script>\n```\n\n----------------------------------------\n\nTITLE: Registering middleware for all actions in Sails.js\nDESCRIPTION: Example of how to register middleware that will run before all actions in a Sails.js application using the wildcard pattern.\nSOURCE: https://github.com/balderdashy/sails/blob/master/lib/app/private/controller/README.md#2025-04-20_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nsails.registerActionMiddleware(mustBeLoggedIn, '*')\n```\n\n----------------------------------------\n\nTITLE: Creating and Fetching Records in Sails.js\nDESCRIPTION: This JavaScript code snippet demonstrates how to use `.fetch()` with the `.create()` method in Waterline ORM within the Sails.js framework. It creates a new user record and returns the created record, which is then logged with the user's full name and ID. Requires Sails.js and the Waterline ORM setup.\nSOURCE: https://github.com/balderdashy/sails/blob/master/docs/reference/waterline/queries/fetch.md#2025-04-20_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nvar newUser = await User.create({ fullName: 'Alice McBailey' }).fetch();\nsails.log(`Hi, ${newUser.fullName}!  Your id is ${newUser.id}.`);\n```\n\n----------------------------------------\n\nTITLE: File Upload Handler Implementation\nDESCRIPTION: Example showing how to handle file uploads in a controller action or policy using req.file() with the upload() method. Includes error handling and success response.\nSOURCE: https://github.com/balderdashy/sails/blob/master/docs/reference/req/req.file.md#2025-04-20_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nreq.file('avatar').upload(function (err, uploadedFiles){\n  if (err) return res.serverError(err);\n  return res.json({\n    message: uploadedFiles.length + ' file(s) uploaded successfully!',\n    files: uploadedFiles\n  });\n});\n```\n\n----------------------------------------\n\nTITLE: Sorting Users by Age in Ascending Order with Waterline ORM in JavaScript\nDESCRIPTION: Demonstrates how to retrieve users named 'Jake' from the database and sort them by age in ascending order using the .sort() method. The query result is returned as JSON in the response.\nSOURCE: https://github.com/balderdashy/sails/blob/master/docs/reference/waterline/queries/sort.md#2025-04-20_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nvar users = await User.find({ name: 'Jake'})\n.sort('age ASC');\n\nreturn res.json(users);\n```\n\n----------------------------------------\n\nTITLE: Basic Error Catching in Sails.js Waterline ORM\nDESCRIPTION: Demonstrates how to catch and examine errors thrown by Waterline model methods. The error object contains properties like name and code that help identify the type of error.\nSOURCE: https://github.com/balderdashy/sails/blob/master/docs/concepts/ORM/errors.md#2025-04-20_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\ntry {\n  await Something.create({‚Ä¶});\n} catch (err) {\n  // err.name\n  // err.code\n  // ‚Ä¶\n}\n```\n\n----------------------------------------\n\nTITLE: Accessing Native MongoDB Client in Sails.js\nDESCRIPTION: Demonstrates how to access the low-level MongoDB client through the Sails.js datastore manager, allowing direct interaction with MongoDB collections and advanced features like transactions and change streams.\nSOURCE: https://github.com/balderdashy/sails/blob/master/docs/tutorials/mongo.md#2025-04-20_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nvar mongoClient = Pet.getDatastore().manager.client;\n\nvar results = await mongoClient.db('test')\n.collection('pet')\n.find({}, { name: 1 })\n.toArray();\n\nconsole.log(results);\n```\n\n----------------------------------------\n\nTITLE: Implementing Custom Model Method in Sails.js 1.0\nDESCRIPTION: Example of how to implement a custom model method to replace the removed dynamic finders functionality in Sails.js 1.0.\nSOURCE: https://github.com/balderdashy/sails/blob/master/docs/upgrading/To1.0.md#2025-04-20_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\nUser.findById()\n```\n\n----------------------------------------\n\nTITLE: Example of Socket.IO POST Request in HTML\nDESCRIPTION: This example shows how to use io.socket.post() in an HTML script tag. It sends a POST request to '/users' with user data and logs the response status code.\nSOURCE: https://github.com/balderdashy/sails/blob/master/docs/reference/websockets/sails.io.js/socket.post.md#2025-04-20_snippet_1\n\nLANGUAGE: html\nCODE:\n```\n<script>\nio.socket.post('/users', { name: 'Timmy Mendez' }, function (resData, jwRes) {\n  jwRes.statusCode; // => 200\n});\n</script>\n```\n\n----------------------------------------\n\nTITLE: Configuring Sails.js Programmatic Loading with Disabled Hooks\nDESCRIPTION: Demonstrates how to load a Sails.js application programmatically with specific hooks disabled and globals turned off. This configuration is optimal for programmatic usage and prevents conflicts when running multiple Sails instances.\nSOURCE: https://github.com/balderdashy/sails/blob/master/docs/concepts/Programmatic Usage/Tips and Tricks.md#2025-04-20_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n// Turn off globala and commonly unused hooks in programmatic apps\nmySailsApp.load({\n  hooks: {\n     grunt: false,\n     sockets: false,\n     pubsub: false\n  },\n  globals: false\n})\n```\n\n----------------------------------------\n\nTITLE: Unique Email Address Model Definition in Sails.js\nDESCRIPTION: Example of implementing a unique constraint on an email address attribute in a User model.\nSOURCE: https://github.com/balderdashy/sails/blob/master/docs/concepts/ORM/Validations.md#2025-04-20_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\n// api/models/User.js\nmodule.exports = {\n\n  attributes: {\n    emailAddress: {\n      type: 'string',\n      unique: true,\n      required: true\n    }\n  }\n\n};\n```\n\n----------------------------------------\n\nTITLE: Implementing Custom Hook with Public/Private Members\nDESCRIPTION: Shows how to create a Sails hook with both public and private variables and functions. Public members are accessible via sails.hooks[hookname] while private members remain encapsulated within the hook.\nSOURCE: https://github.com/balderdashy/sails/blob/master/docs/concepts/extending-sails/Hooks/hookspec/hookspec.md#2025-04-20_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\n// File api/hooks/myhook/index.js\nmodule.exports = function (sails) {\n\n   // This var will be private\n   var foo = 'bar';\n\n   return {\n\n     // This var will be public\n     abc: 123,\n\n     // This function will be public\n     sayHi: function (name) {\n       console.log(greet(name));\n     }\n\n   };\n\n   // This function will be private\n   function greet (name) {\n      return 'Hi, ' + name + '!';\n   }\n\n};\n```\n\n----------------------------------------\n\nTITLE: Email Reminder Script Implementation\nDESCRIPTION: Example script that sends email reminders to users who haven't confirmed their email addresses. Uses User model streaming and email helper functions with customizable template options.\nSOURCE: https://github.com/balderdashy/sails/blob/master/docs/concepts/shell-scripts/shell-scripts.md#2025-04-20_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\n// scripts/send-email-proof-reminders.js\nmodule.exports = {\n\n  description: 'Send a reminder to any recent users who haven\\'t confirmed their email address yet.',\n\n  inputs: {\n    template: {\n      description: 'The name of another email template to use as an optional override.',\n      type: 'string',\n      defaultsTo: 'reminder-to-confirm-email'\n    }\n  },\n\n  fn: async function (inputs, exits) {\n\n    await User.stream({\n      emailStatus: 'pending',\n      emailConfirmationReminderAlreadySent: false,\n      createdAt: { '>': Date.now() - 1000*60*60*24*3 }\n    })\n    .eachRecord(async (user, proceed)=>{\n      await sails.helpers.sendTemplateEmail.with({\n        template: inputs.template,\n        templateData: {\n          user: user\n        },\n        to: user.emailAddress\n      });\n      return proceed();\n    });//‚àû\n\n    return exits.success();\n\n  }\n};\n```\n\n----------------------------------------\n\nTITLE: Defining User Model with One-to-Many Association in Sails.js\nDESCRIPTION: This snippet shows how to define a User model with a one-to-many association to Pets using the 'collection' property. The 'via' key specifies the attribute on the Pet model that references the User.\nSOURCE: https://github.com/balderdashy/sails/blob/master/docs/concepts/ORM/Associations/OnetoMany.md#2025-04-20_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n// myApp/api/models/User.js\n// A user may have many pets\nmodule.exports = {\n  attributes: {\n    firstName: {\n      type: 'string'\n    },\n    lastName: {\n      type: 'string'\n    },\n\n    // Add a reference to Pets\n    pets: {\n      collection: 'pet',\n      via: 'owner'\n    }\n  }\n};\n```\n\n----------------------------------------\n\nTITLE: Registering Action Middleware in Sails\nDESCRIPTION: Demonstrates registering a page view counter middleware that tracks page views for all actions except a specific one\nSOURCE: https://github.com/balderdashy/sails/blob/master/docs/reference/application/advanced-usage/sails.registerActionMiddleware.md#2025-04-20_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nsails.registerActionMiddleware(\n  function countPage (req, res, next) {\n    pageViews[req.url] = pageViews[req.url] || 0;\n    pageViews[req.url]++;\n    req.currentPageCount = pageViews[req.url];\n    next();\n  },\n  '*, !page-view-hook/show-page-views'\n);\n```\n\n----------------------------------------\n\nTITLE: Sample TypeScript Controller for Sails\nDESCRIPTION: Example of a basic Sails controller written in TypeScript. It demonstrates how to declare the Sails global variable and export a controller action with proper TypeScript type annotations.\nSOURCE: https://github.com/balderdashy/sails/blob/master/docs/tutorials/typeScript.md#2025-04-20_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\n// api/controllers/SomeController.ts\ndeclare var sails: any;\n\nexport function hello(req:any, res:any, next: Function):any {\n  res.status(200).send('Hello from Typescript!');\n}\n```\n\n----------------------------------------\n\nTITLE: Registering Models with Waterline\nDESCRIPTION: JavaScript code to register the defined User and Pet models with the Waterline instance.\nSOURCE: https://github.com/balderdashy/sails/blob/master/docs/concepts/ORM/standalone-usage.md#2025-04-20_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nwaterline.registerModel(userCollection);\nwaterline.registerModel(petCollection);\n```\n\n----------------------------------------\n\nTITLE: Listening for Model Events with Sails.io.js Client\nDESCRIPTION: Basic pattern for listening to model events using the Sails.io.js socket client. This code sets up an event handler for a specific model's events using the model's identity as the event name.\nSOURCE: https://github.com/balderdashy/sails/blob/master/docs/reference/websockets/resourceful-pubsub/resourceful-pubsub.md#2025-04-20_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nio.socket.on('<model identity>', function (msg) {\n\n});\n```\n\n----------------------------------------\n\nTITLE: Subscribing Users to PubSub Rooms in Sails.js\nDESCRIPTION: Server-side implementation showing how to find users, get their room names using getRoomName(), and subscribe all sockets in one user's room to another user's room, demonstrating real-time communication setup.\nSOURCE: https://github.com/balderdashy/sails/blob/master/docs/reference/websockets/resourceful-pubsub/get-room-name.md#2025-04-20_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\n  // On the server:\n\n  subscribeAllBobWatchersToKaren: function (req, res) {\n\n    // Look up all users named \"bob\" or \"karen\".\n    User.find({name: ['bob', 'karen']}, function(err, users) {\n      if (err) {return res.serverError(err);}\n\n      // Get Bob's ID.  We'll assume there is only one Bob.\n      var bobId = _.find(users, { name: 'bob' }).id;\n\n      // Get Karen's ID.  We'll assume there is only one Karen.\n      var karenId = _.find(users, { name: 'karen' }).id;\n\n      // Subscribe all of Bob's sockets to Karen.\n      sails.sockets.addRoomMembersToRooms(User.getRoomName(bobId), User.getRoomName(karenId));\n\n      return res.send();\n    });\n\n  }\n```\n\n----------------------------------------\n\nTITLE: Client-Side Handling of .publish() Events in Sails.js\nDESCRIPTION: Shows how to set up a client-side socket to subscribe to and handle published messages. The client initiates a subscription and then listens for 'user' events, specifically filtering for those with the 'published' verb.\nSOURCE: https://github.com/balderdashy/sails/blob/master/docs/reference/websockets/resourceful-pubsub/publish.md#2025-04-20_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\n  // On the client:\n\n  // Subscribe this client socket to Bob-only secrets\n  // > See the `.subscribe()` documentation for more info about subscribing to records:\n  // > https://sailsjs.com/documentation/reference/web-sockets/resourceful-pub-sub/subscribe\n  io.socket.get('/subscribeToBobSecrets');\n\n  // Whenever a `user` event is received, do something.\n  io.socket.on('user', function(msg) {\n     if (msg.verb === 'published') {\n       console.log('Got a secret only Bobs can hear:', msg.theSecret);\n     }\n     // else if (msg.verb === 'created') { ... }\n     // else if (msg.verb === 'updated') { ... }\n  });\n```\n\n----------------------------------------\n\nTITLE: Retrieving Records from Database using Sails.js Model Method\nDESCRIPTION: This snippet demonstrates how to use the .find() model method to retrieve records from the database in Sails.js. The returned result is an array of record objects that represent database data.\nSOURCE: https://github.com/balderdashy/sails/blob/master/docs/reference/waterline/records/records.md#2025-04-20_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nvar orders = await Order.find();\n// `orders` is an array of records\n```\n\n----------------------------------------\n\nTITLE: Sending Socket PUT Request in Sails.js\nDESCRIPTION: This snippet demonstrates the basic usage of io.socket.put() method. It takes a URL, optional data, and a callback function as arguments. The callback receives response data and a JSON WebSocket Response object.\nSOURCE: https://github.com/balderdashy/sails/blob/master/docs/reference/websockets/sails.io.js/socket.put.md#2025-04-20_snippet_0\n\nLANGUAGE: js\nCODE:\n```\nio.socket.put(url, data, function (resData, jwres){\n  // ...\n});\n```\n\n----------------------------------------\n\nTITLE: Implementing One-to-one Association Using Collection in Sails.js\nDESCRIPTION: This code demonstrates a one-to-one relationship between Pet and User models using a collection attribute. The relationship is maintained by the 'unique' constraint on the Pet's owner attribute, ensuring a pet can only have one owner. This approach enables bidirectional querying using populate().\nSOURCE: https://github.com/balderdashy/sails/blob/master/docs/concepts/ORM/Associations/OnetoOne.md#2025-04-20_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n// myApp/api/models/Pet.js\nmodule.exports = {\n  attributes: {\n    name: {\n      type: 'string'\n    },\n    color: {\n      type: 'string'\n    },\n    owner:{\n      model:'user',\n      unique: true\n    }\n  }\n}\n```\n\nLANGUAGE: javascript\nCODE:\n```\n// myApp/api/models/User.js\nmodule.exports = {\n  attributes: {\n    name: {\n      type: 'string'\n    },\n    age: {\n      type: 'number'\n    },\n    pet: {\n      collection:'pet',\n      via: 'owner'\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Basic User Model Definition in Sails.js\nDESCRIPTION: Example of a basic User model definition with standard attributes.\nSOURCE: https://github.com/balderdashy/sails/blob/master/docs/concepts/ORM/Attributes.md#2025-04-20_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\n// api/models/User.js\nmodule.exports = {\n  datastore: 'shinyNewMySQLDatabase',\n  attributes: {\n    name: {\n      type: 'string'\n    },\n    password: {\n      type: 'string'\n    },\n    email: {\n      type: 'string',\n      unique: true\n    }\n  }\n};\n```\n\n----------------------------------------\n\nTITLE: Usage of `res.json()` in Sails.js\nDESCRIPTION: Demonstrates the basic syntax for using `res.json()` to send a JSON response. This method takes data as input and sends it as a JSON-formatted response to the client.\nSOURCE: https://github.com/balderdashy/sails/blob/master/docs/reference/res/res.json.md#2025-04-20_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n```usage\nreturn res.json(data);\n```\n```\n\n----------------------------------------\n\nTITLE: Defining Custom Routes in Sails.js Configuration\nDESCRIPTION: Demonstrates how to export route configurations mapping HTTP methods and paths to specific views or actions in a Sails.js application. Routes define how incoming requests are handled and routed to appropriate controllers or views.\nSOURCE: https://github.com/balderdashy/sails/blob/master/docs/reference/sails.config/sails.config.routes.md#2025-04-20_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nmodule.exports.routes = {\n\n    'GET /': { view: 'pages/homepage' },\n    'POST /foo/bar': { action: 'foo/bar' }\n}\n```\n\n----------------------------------------\n\nTITLE: Broadcasting Messages with Sails.js Sockets\nDESCRIPTION: Demonstrates various ways to use the sails.sockets.blast() method for broadcasting messages to connected sockets. It can be used with different combinations of parameters to customize the broadcast behavior.\nSOURCE: https://github.com/balderdashy/sails/blob/master/docs/reference/websockets/sails.sockets/sails.sockets.blast.md#2025-04-20_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nsails.sockets.blast(data);\n```\n\nLANGUAGE: javascript\nCODE:\n```\nsails.sockets.blast(eventName, data);\n```\n\nLANGUAGE: javascript\nCODE:\n```\nsails.sockets.blast(data, socketToOmit);\n```\n\nLANGUAGE: javascript\nCODE:\n```\nsails.sockets.blast(eventName, data, socketToOmit);\n```\n\n----------------------------------------\n\nTITLE: Accessing Services in Sails.js\nDESCRIPTION: This snippet demonstrates how to access and call functions from a Service in Sails.js. It shows two example function calls from a hypothetical EmailService.\nSOURCE: https://github.com/balderdashy/sails/blob/master/docs/concepts/Services/Services.md#2025-04-20_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nEmailService.sendHtmlEmail()\nEmailService.sendPasswordRecoveryEmail()\n```\n\n----------------------------------------\n\nTITLE: Getting Aggregate Sum of Numeric Attribute in JavaScript\nDESCRIPTION: This snippet demonstrates how to use the .sum() method to calculate the total of a numeric attribute from a database model, given certain matching criteria. It requires the attribute name and optional criteria for retrieval. It returns a promise that resolves to the aggregate sum, which could also handle potential errors from invalid input or database issues.\nSOURCE: https://github.com/balderdashy/sails/blob/master/docs/reference/waterline/models/sum.md#2025-04-20_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nvar total = await Something.sum(numericAttrName, criteria);\n```\n\n----------------------------------------\n\nTITLE: Realtime Order Management in Sails.js\nDESCRIPTION: A more complex example demonstrating realtime order management in a restaurant chain application. It handles 'created' and 'destroyed' events for orders, updating the DOM accordingly.\nSOURCE: https://github.com/balderdashy/sails/blob/master/docs/reference/websockets/sails.io.js/io.socket.on.md#2025-04-20_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nvar ORDER_IN_LIST = _.template('<li data-id=\"<%- order.id %>\"><p><%- order.summary %></p></li>');\n\n$(function whenDomIsReady(){\n\n  // Every time we receive a relevant socket event...\n  io.socket.on('order', function (msg) {\n\n    // Let's see what the server has to say...\n    switch(msg.verb) {\n\n      case 'created': (function(){\n\n        // Render the new order in the DOM.\n        var newOrderHtml = ORDER_IN_LIST(msg.data);\n        $('#orders').append(newOrderHtml);\n\n      })(); return;\n\n      case 'destroyed': (function(){\n\n        // Find any existing orders w/ this id in the DOM.\n        //\n        // > Remember: To prevent XSS attacks and bugs, never build DOM selectors\n        // > using untrusted provided by users.  (In this case, we know that \"id\"\n        // > did not come from a user, so we can trust it.)\n        var $deletedOrders = $('#orders').find('[data-id=\"'+msg.id+'\"]');\n\n        // Then, if there are any, remove them from the DOM.\n        $deletedOrders.remove();\n\n      })(); return;\n\n      // Ignore any unrecognized messages\n      default: return;\n\n    }//< / switch >\n\n  });//< / io.socket.on() >\n\n});//< / when DOM is ready >\n```\n\n----------------------------------------\n\nTITLE: Manual Email Validation in Sails.js Controller\nDESCRIPTION: Example of manual validation logic for email in a controller action.\nSOURCE: https://github.com/balderdashy/sails/blob/master/docs/concepts/ORM/Validations.md#2025-04-20_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\nif ( !_.isString( req.param('email') ) ) {\n  return res.badRequest();\n}\n```\n\n----------------------------------------\n\nTITLE: Server-Side Implementation of .subscribe() in a Controller Action\nDESCRIPTION: Example of how to implement the .subscribe() method in a server-side controller action. This snippet checks if the request is from a socket, finds records matching certain criteria, and subscribes the client socket to those records.\nSOURCE: https://github.com/balderdashy/sails/blob/master/docs/reference/websockets/resourceful-pubsub/subscribe.md#2025-04-20_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\n// On the server:\n\nif (!this.req.isSocket) {\n  throw {badRequest: 'Only a client socket can subscribe to Louies.  But you look like an HTTP request to me.'};\n}\n\n// Let's say our client socket has a problem with people named \"louie\".\n\n// First we'll find all users named \"louie\" (or \"louis\" even-- we should be thorough)\nlet usersNamedLouie = await User.find({ or: [{name: 'louie'},{name: 'louis'}] });\n\n// Now we'll subscribe our client socket to each of these records.\nUser.subscribe(this.req, _.pluck(usersNamedLouie, 'id'));\n\n// All done!  We might send down some data, or just an empty 200 (OK) response.\n```\n\n----------------------------------------\n\nTITLE: Using findOrCreate with Await and Callback in Sails.js - JavaScript\nDESCRIPTION: Demonstrates finding a record based on specific criteria or creating a new one in Sails.js using findOrCreate method. Requires Sails.js and Waterline ORM as dependencies. Criteria and initialValues are needed as parameters to define search and creation attributes respectively. Returns the found or newly created record, and a flag indicating creation status. Errors like UsageError or AdapterError might occur due to invalid arguments or database issues.\nSOURCE: https://github.com/balderdashy/sails/blob/master/docs/reference/waterline/models/findOrCreate.md#2025-04-20_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nvar newOrExistingRecord = await Something.findOrCreate(criteria, initialValues);\n```\n\nLANGUAGE: javascript\nCODE:\n```\nSomething.findOrCreate(criteria, initialValues)\\n.exec(function(err, newOrExistingRecord, wasCreated) {\\n\\n});\n```\n\nLANGUAGE: javascript\nCODE:\n```\nUser.findOrCreate({ name: 'Finn' }, { name: 'Finn' })\\n.exec(async(err, user, wasCreated)=> {\\n  if (err) { return res.serverError(err); }\\n  \\n  if(wasCreated) {\\n    sails.log('Created a new user: ' + user.name);\\n  }\\n  else {\\n    sails.log('Found existing user: ' + user.name);\\n  }\\n});\n```\n\n----------------------------------------\n\nTITLE: Demonstrating User.find() Method Call in Sails\nDESCRIPTION: This snippet shows an example of calling the find() method on a User model in Sails. It illustrates how adapters determine the behavior of such method calls.\nSOURCE: https://github.com/balderdashy/sails/blob/master/docs/concepts/extending-sails/Adapters/Adapters.md#2025-04-20_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nUser.find()\n```\n\n----------------------------------------\n\nTITLE: Configuring Skipper Body Parser in Sails.js\nDESCRIPTION: This snippet outlines how to customize the Skipper body parser for handling HTTP request bodies in a Sails.js application. It demonstrates the installation and configuration of Skipper with support for various options such as strict parsing and timeouts for multipart requests.\nSOURCE: https://github.com/balderdashy/sails/blob/master/docs/reference/sails.config/sails.config.http.md#2025-04-20_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nbodyParser: (function _configureBodyParser(){\n  var skipper = require('skipper');\n  var middlewareFn = skipper({\n    strict: true,\n    // ... more Skipper options here ...\n  });\n  return middlewareFn;\n})(),\n```\n\n----------------------------------------\n\nTITLE: Accessing Query String Parameters in Sails.js\nDESCRIPTION: Retrieves the value of a query string parameter from the current request. Query parameters are automatically parsed and made available through the req.query object. Defaults to an empty object if no parameters are present.\nSOURCE: https://github.com/balderdashy/sails/blob/master/docs/reference/req/req.query.md#2025-04-20_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nreq.query;\n```\n\nLANGUAGE: javascript\nCODE:\n```\nreq.query.q\n// -> \"mudslide\"\n```\n\n----------------------------------------\n\nTITLE: Implementing .addRoomMembersToRooms() in a Sails.js Controller Action\nDESCRIPTION: This example shows how to use the .addRoomMembersToRooms() method in a Sails.js controller action. It subscribes all members of 'funRoom' to 'greatRoom' and 'awesomeRoom', then returns a JSON response. The function also includes error handling.\nSOURCE: https://github.com/balderdashy/sails/blob/master/docs/reference/websockets/sails.sockets/sails.sockets.addRoomMembersToRooms.md#2025-04-20_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nsubscribeFunRoomMembersToFunnerRooms: function(req, res) {\n  sails.sockets.addRoomMembersToRooms('funRoom', ['greatRoom', 'awesomeRoom'], function(err) {\n    if (err) {return res.serverError(err);}\n    res.json({\n      message: 'Subscribed all members of `funRoom` to `greatRoom` and `awesomeRoom`!'\n    });\n  });\n}\n```\n\n----------------------------------------\n\nTITLE: Using Sails Logger for Debug Logging in JavaScript\nDESCRIPTION: This snippet demonstrates the usage of Sails' built-in logger for logging messages and data at the \"debug\" level. Similar to Node's console.log, it supports multiple log levels and formatted output, and accepts a variety of inputs including strings, numbers, and objects. The use of parameters and their format are highlighted, with no explicit dependencies other than Sails.js itself.\nSOURCE: https://github.com/balderdashy/sails/blob/master/docs/reference/application/sails.log.md#2025-04-20_snippet_0\n\nLANGUAGE: usage\nCODE:\n```\nsails.log(...);\n```\n\n----------------------------------------\n\nTITLE: Implementing isLoggedIn Policy in Sails.js\nDESCRIPTION: Example implementation of a basic authentication policy that checks for user session and handles unauthorized access.\nSOURCE: https://github.com/balderdashy/sails/blob/master/docs/concepts/Policies/Policies.md#2025-04-20_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\n// policies/isLoggedIn.js\nmodule.exports = async function (req, res, proceed) {\n\n  // If `req.me` is set, then we know that this request originated\n  // from a logged-in user.  So we can safely proceed to the next policy--\n  // or, if this is the last policy, the relevant action.\n  // > For more about where `req.me` comes from, check out this app's\n  // > custom hook (`api/hooks/custom/index.js`).\n  if (req.me) {\n    return proceed();\n  }\n\n  //--‚Ä¢\n  // Otherwise, this request did not come from a logged-in user.\n  return res.forbidden();\n\n};\n```\n\n----------------------------------------\n\nTITLE: Configuring MongoDB ID Field in Sails.js Models\nDESCRIPTION: Modifies the default ID attribute in config/models.js to use string type and map to MongoDB's _id field, which is required for proper MongoDB integration.\nSOURCE: https://github.com/balderdashy/sails/blob/master/docs/tutorials/mongo.md#2025-04-20_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nattributes: {\n  id: { type: 'string', columnName: '_id' },\n  //‚Ä¶\n}\n```\n\n----------------------------------------\n\nTITLE: Classic Action Format Implementation\nDESCRIPTION: Example of a classic action format that handles user welcome functionality with manual parameter validation.\nSOURCE: https://github.com/balderdashy/sails/blob/master/docs/concepts/ActionsAndControllers/ActionsAndControllers.md#2025-04-20_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nmodule.exports = async function welcomeUser (req, res) {\n  var userId = req.param('userId');\n  if (!_.isNumeric(userId)) {\n    return res.badRequest(new Error('No user ID specified!'));\n  }\n  var user = await User.findOne({ id: userId });\n  if (!user) {\n    return res.redirect('/signup' );\n  }\n  return res.view('welcome', {name: user.name});\n}\n```\n\n----------------------------------------\n\nTITLE: Multi-Attribute Sorting with Waterline ORM in JavaScript\nDESCRIPTION: Shows how to sort users named 'Finn' by multiple attributes in a specific order of precedence. First sorts by age in ascending order, then by creation date in ascending order. The sorted results are returned as JSON in the response.\nSOURCE: https://github.com/balderdashy/sails/blob/master/docs/reference/waterline/queries/sort.md#2025-04-20_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nvar users = await User.find({ name: 'Finn'})\n.sort([\n  { age: 'ASC' },\n  { createdAt: 'ASC' },\n]);\n\nreturn res.json(users);\n```\n\n----------------------------------------\n\nTITLE: Creating a Manual Socket Connection in Sails.js\nDESCRIPTION: This example shows how to disable the auto-connecting socket and manually create a new client socket. It demonstrates how to listen for the 'connect' event and log a message when the socket successfully connects to the server.\nSOURCE: https://github.com/balderdashy/sails/blob/master/docs/concepts/Realtime/On the client.md#2025-04-20_snippet_1\n\nLANGUAGE: html\nCODE:\n```\n<script type=\"text/javascript\" src=\"/js/dependencies/sails.io.js\" autoConnect=\"false\"></script>\n<script type=\"text/javascript\">\nvar mySocket = io.sails.connect();\nmySocket.on('connect', function onConnect () {\n  console.log(\"Socket connected!\");\n});\n</script>\n```\n\n----------------------------------------\n\nTITLE: Configuring MongoDB Connection in Sails.js\nDESCRIPTION: Basic configuration for MongoDB database connection including adapter specification and URL structure.\nSOURCE: https://github.com/balderdashy/sails/blob/master/docs/concepts/extending-sails/Adapters/adapterList.md#2025-04-20_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\nadapter: 'sails-mongo',\nurl: 'mongodb://user:password@host:port/database',\n```\n\n----------------------------------------\n\nTITLE: Removing a User from a Pet's Collection (JavaScript)\nDESCRIPTION: This snippet demonstrates how to use the removeFromCollection method to dissociate a user from a pet in a many-to-many relationship. It shows removing a single owner and multiple owners at once.\nSOURCE: https://github.com/balderdashy/sails/blob/master/docs/concepts/ORM/Associations/ManytoMany.md#2025-04-20_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\n// To remove a User from a pet's collection of owners where the User has an id of\n// 10 and the Pet has an id of 300.\nawait Pet.removeFromCollection(300, 'owners', 10);\n```\n\nLANGUAGE: javascript\nCODE:\n```\nawait Pet.removeFromCollection(300, 'owners', [10, 12]);\n```\n\n----------------------------------------\n\nTITLE: Using Existing Database Connection with .usingConnection() in Sails.js Waterline ORM\nDESCRIPTION: This snippet demonstrates the usage syntax for the .usingConnection() method. It allows specifying an existing database connection obtained via .transaction() or .leaseConnection() to be used for a Waterline query.\nSOURCE: https://github.com/balderdashy/sails/blob/master/docs/reference/waterline/queries/usingConnection.md#2025-04-20_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n.usingConnection(connection);\n```\n\n----------------------------------------\n\nTITLE: Archiving Record with Sails Framework in JavaScript\nDESCRIPTION: The `.archiveOne()` method archives (soft-deletes) a record matching the provided criteria in Sails.js, saving it as a new record in the Archive model and then destroys the original. It ensures only one record is archived by throwing an error if the criteria match more than one record. The method requires Waterline criteria as input and returns the archived record if successful, or undefined otherwise. No support for .fetch() as it always provides the archived record.\nSOURCE: https://github.com/balderdashy/sails/blob/master/docs/reference/waterline/models/archiveOne.md#2025-04-20_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nvar originalRecord = await Something.archiveOne(criteria);\n```\n\nLANGUAGE: javascript\nCODE:\n```\nvar finn = await User.archiveOne({ firstName: 'Finn' });\nif (finn) {\n  sails.log('Archived the user named \"Finn\".');\n} else {\n  sails.log('The database does not have a user named \"Finn\".');\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing customToJSON in Sails.js Models\nDESCRIPTION: This code snippet shows how to implement the customToJSON function in a Sails.js model to exclude sensitive data like password and ssn when serializing to JSON. It uses Lodash's omit function to create a shallow copy without the specified fields.\nSOURCE: https://github.com/balderdashy/sails/blob/master/docs/concepts/ORM/model-settings.md#2025-04-20_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\ncustomToJSON: function() {\n  // Return a shallow copy of this record with the password and ssn removed.\n  return _.omit(this, ['password', 'ssn'])\n}\n```\n\n----------------------------------------\n\nTITLE: URL Slug Route Configuration\nDESCRIPTION: Example of configuring a vanity URL route with pattern variables and controller mapping.\nSOURCE: https://github.com/balderdashy/sails/blob/master/docs/concepts/Routes/RouteTargetSyntax.md#2025-04-20_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\n'get /:account/:repo': {\n  controller: 'RepoController',\n  action: 'show',\n  skipAssets: true\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing User Model with Through Association\nDESCRIPTION: Defines a User model with a many-to-many relationship to pets through a PetUser junction model. The model includes basic user attributes and a pets collection that uses the through association.\nSOURCE: https://github.com/balderdashy/sails/blob/master/docs/concepts/ORM/Associations/ThroughAssociations.md#2025-04-20_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n// myApp/api/models/User.js\nmodule.exports = {\n  attributes: {\n    name: {\n      type: 'string'\n    },\n    pets:{\n      collection: 'pet',\n      via: 'owner',\n      through: 'petuser'\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Updating and Fetching Records Using Sails.js\nDESCRIPTION: This snippet shows how to update records in a Sails.js application while also fetching the updated records by using the fetch() method. This is useful for confirming the changes made to the records.\nSOURCE: https://github.com/balderdashy/sails/blob/master/docs/reference/waterline/models/update.md#2025-04-20_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nvar updatedRecords = await Something.update(criteria).set(valuesToSet).fetch();\n```\n\n----------------------------------------\n\nTITLE: Sending DELETE Request with io.socket.delete() in Sails.js\nDESCRIPTION: This snippet demonstrates the basic usage of io.socket.delete() method. It takes a URL, optional data, and a callback function as parameters. The callback receives response data and a JSON WebSocket Response object.\nSOURCE: https://github.com/balderdashy/sails/blob/master/docs/reference/websockets/sails.io.js/socket.delete.md#2025-04-20_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nio.socket.delete(url, data, function (data, jwres){\n  // ...\n});\n```\n\n----------------------------------------\n\nTITLE: Utilizing Sails Collection Removal in usage\nDESCRIPTION: This example demonstrates how to use the `.removeFromCollection()` method to remove member records from a specified collection in a parent record. No actual records are destroyed, only detached from the parent.\nDependencies: Sails framework.\nKey parameters: `parentId` (number or string ID of parent record), `association` (string name of collection), and `childIds` (array of IDs to be removed).\nOutputs: The specified members are detached from the collection, with ignoring non-existent ids.\nSOURCE: https://github.com/balderdashy/sails/blob/master/docs/reference/waterline/models/removeFromCollection.md#2025-04-20_snippet_0\n\nLANGUAGE: usage\nCODE:\n```\nawait Something.removeFromCollection(parentId, association)\n.members(childIds);\n```\n\n----------------------------------------\n\nTITLE: Defining User Model in Waterline\nDESCRIPTION: JavaScript code defining a User model using Waterline's Collection.extend method. This includes attribute definitions and an association with a Pet model.\nSOURCE: https://github.com/balderdashy/sails/blob/master/docs/concepts/ORM/standalone-usage.md#2025-04-20_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nvar userCollection = Waterline.Collection.extend({\n  identity: 'user',\n  datastore: 'default',\n  primaryKey: 'id',\n  \n  attributes: {\n    id: {\n        type: 'number',\n        autoMigrations: {autoIncrement: true}\n    },\n    firstName: {type:'string'},\n    lastName: {type:'string'},\n\n    // Add a reference to Pets\n    pets: {\n      collection: 'pet',\n      via: 'owner'\n    }\n  }\n});\n```\n\n----------------------------------------\n\nTITLE: Listening for Socket Events in Sails.js\nDESCRIPTION: Basic usage of io.socket.on() to start listening for socket events from Sails with a specified eventName. The callback function is triggered when a matching event is received.\nSOURCE: https://github.com/balderdashy/sails/blob/master/docs/reference/websockets/sails.io.js/io.socket.on.md#2025-04-20_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nio.socket.on(eventName, function (msg) {\n  // ...\n});\n```\n\n----------------------------------------\n\nTITLE: Using a Custom Model Method in Sails.js\nDESCRIPTION: This snippet demonstrates how to use the custom 'findWithSameNameAsPerson' method defined on the Monkey model. It shows the asynchronous nature of the method call using await.\nSOURCE: https://github.com/balderdashy/sails/blob/master/docs/concepts/ORM/Models.md#2025-04-20_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nvar monkeys = await Monkey.findWithSameNameAsPerson({id:37});\n```\n\n----------------------------------------\n\nTITLE: Translating Text in EJS Views with i18n\nDESCRIPTION: Example of using the i18n translation functions (__() and i18n()) in EJS view templates to translate static text and format strings with variable substitution.\nSOURCE: https://github.com/balderdashy/sails/blob/master/docs/concepts/Internationalization/Internationalization.md#2025-04-20_snippet_0\n\nLANGUAGE: ejs\nCODE:\n```\n<h1> <%= __('Hello') %> </h1>\n<h1> <%= __('Hello %s, how are you today?', 'Mike') %> </h1>\n<p> <%= i18n('That\\'s right-- you can use either i18n() or __()') %> </p>\n```\n\n----------------------------------------\n\nTITLE: Translating Strings in JavaScript with Sails.__\nDESCRIPTION: Example of using the sails.__ method to translate strings in JavaScript code, such as in command-line scripts. Demonstrates translation with and without variable substitution.\nSOURCE: https://github.com/balderdashy/sails/blob/master/docs/concepts/Internationalization/Internationalization.md#2025-04-20_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nsails.__('Welcome');\n// => 'Bienvenido'\n\nsails.__('Welcome, %s', 'Mary');\n// => 'Bienvenido, Mary'\n```\n\n----------------------------------------\n\nTITLE: HTML Form with CSRF Token Example\nDESCRIPTION: Complete example of HTML form implementation with CSRF token for secure form submission.\nSOURCE: https://github.com/balderdashy/sails/blob/master/docs/concepts/Security/CSRF.md#2025-04-20_snippet_5\n\nLANGUAGE: html\nCODE:\n```\n<form action=\"/signup\" method=\"POST\">\n <input type=\"text\" name=\"emailaddress\"/>\n <input type='hidden' name='_csrf' value='<%= _csrf %>'>\n <input type='submit'>\n</form>\n```\n\n----------------------------------------\n\nTITLE: Subscribing Room Members to Multiple Rooms using Sails.js Sockets\nDESCRIPTION: This code snippet demonstrates the basic usage of the .addRoomMembersToRooms() method. It takes a source room, an array of destination rooms, and an optional callback function. The method subscribes all members of the source room to the specified destination rooms.\nSOURCE: https://github.com/balderdashy/sails/blob/master/docs/reference/websockets/sails.sockets/sails.sockets.addRoomMembersToRooms.md#2025-04-20_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nsails.sockets.addRoomMembersToRooms(sourceRoom, destRooms, cb);\n```\n\n----------------------------------------\n\nTITLE: Handling Server Error Responses in Sails.js\nDESCRIPTION: This code snippet demonstrates how to use the res.serverError() method to send a 500 server error response to the client. It can be invoked with or without an error message, customarily returning the appropriate response based on the client's request type (JSON or HTML). The response handling is suitable for both AJAX and standard browser requests.\nSOURCE: https://github.com/balderdashy/sails/blob/master/docs/reference/res/res.serverError.md#2025-04-20_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nreturn res.serverError(err);\n```\n\nLANGUAGE: javascript\nCODE:\n```\nreturn res.serverError();\n```\n\nLANGUAGE: javascript\nCODE:\n```\nreturn res.serverError('Salesforce¬†could not be reached');\n```\n\n----------------------------------------\n\nTITLE: Using sails.once() Method for One-time Event Handling\nDESCRIPTION: Example of using sails.once() to register a one-time event handler that fires the next time an event is triggered and then stops listening.\nSOURCE: https://github.com/balderdashy/sails/blob/master/lib/EVENTS.md#2025-04-20_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nsails.once('hook:yourHookID:someEvent', function yourEventHandler ( /* a, b, c, ..., z */ ) {\n  // your implementation\n});\n```\n\n----------------------------------------\n\nTITLE: Rendering a Specific View with res.view() - JavaScript\nDESCRIPTION: Illustrates how to use `res.view()` with an explicit `pathToView` argument. This specifically loads and renders the given view path, generating an HTML response based on the file specified.\nSOURCE: https://github.com/balderdashy/sails/blob/master/docs/reference/res/res.view.md#2025-04-20_snippet_2\n\nLANGUAGE: js\nCODE:\n```\nreturn res.view('oven/cook');\n// -> responds with `views/oven/cook.ejs`\n```\n\n----------------------------------------\n\nTITLE: Configuring CORS and CSRF Settings in Sails.js\nDESCRIPTION: This snippet shows the default configuration options for CORS (Cross-Origin Resource Sharing) and CSRF (Cross-Site Request Forgery) protection in Sails.js. It includes settings for allowed origins, routes, methods, headers, and CSRF enablement.\nSOURCE: https://github.com/balderdashy/sails/blob/master/lib/hooks/security/README.md#2025-04-20_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n| Property                                      | Type          | Default         |\n|-----------------------------------------------|:-------------:|------------------|\n| `sails.config.security.cors.allowOrigins`                    | ((string))    | `'*'`\n| `sails.config.security.cors.allRoutes`                 | ((boolean))   | `false`\n| `sails.config.security.cors.allowCredentials`               | ((boolean))   | `false`\n| `sails.config.security.cors.allowRequestMethods`                   | ((string))    | `'GET, HEAD, PUT, PATCH, POST, DELETE'`\n| `sails.config.security.cors.allowRequestHeaders`                   | ((string))    | `'content-type'`\n| `sails.config.security.cors.allowResponseHeaders`             | ((string))    | `''` _(empty string)_\n| `sails.config.security.cors.allowAnyOriginWithCredentialsUnsafe`             | ((boolean))    | `false`\n| `sails.config.security.csrf`             | ((boolean))    | `false`\n```\n\n----------------------------------------\n\nTITLE: Setting a JSON Cookie in Express.js\nDESCRIPTION: This code snippet shows how to set a cookie named 'cart' with a JSON object as its value. The object contains an array of items. It also demonstrates setting the `maxAge` option for the same cookie, which specifies the cookie's expiration time.\nSOURCE: https://github.com/balderdashy/sails/blob/master/docs/reference/res/res.cookie.md#2025-04-20_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nres.cookie('cart', { items: [1,2,3] });\nres.cookie('cart', { items: [1,2,3] }, { maxAge: 900000 });\n```\n\n----------------------------------------\n\nTITLE: Populating Model Association in Sails.js\nDESCRIPTION: This example demonstrates populating a model association where users named 'Finn' are retrieved along with their associated 'dad' record. Requires Sails.js and connections to the corresponding database. Returns a JSON response containing users and populated 'dad' data.\nSOURCE: https://github.com/balderdashy/sails/blob/master/docs/reference/waterline/queries/populate.md#2025-04-20_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nvar usersNamedFinn = await User.find({name:'Finn'}).populate('dad');\n\nsails.log('Wow, there are %d users named Finn.', usersNamedFinn.length);\nsails.log('Check it out, some of them probably have a dad named Joshua or Martin:', usersNamedFinn);\n\nreturn res.json(usersNamedFinn);\n```\n\n----------------------------------------\n\nTITLE: Using .destroyOne() in Sails.js\nDESCRIPTION: This snippet demonstrates how to use the .destroyOne() method to delete a record in Sails.js using Waterline ORM, ensuring only one record is removed based on the given criteria.\nSOURCE: https://github.com/balderdashy/sails/blob/master/docs/reference/waterline/models/destroyOne.md#2025-04-20_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nvar destroyedRecord = await Something.destroyOne(criteria);\n```\n\n----------------------------------------\n\nTITLE: Example usage of `res.forbidden()` in Sails\nDESCRIPTION: This snippet demonstrates how to use `res.forbidden()` to check if a user is logged in before allowing access to a resource. If the user is not logged in (i.e., `req.session.userId` is not set), a 403 Forbidden response is sent.\nSOURCE: https://github.com/balderdashy/sails/blob/master/docs/reference/res/res.forbidden.md#2025-04-20_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\n\"if ( !req.session.userId ) {\\n  return res.forbidden();\\n}\"\n```\n\n----------------------------------------\n\nTITLE: Adding a Pet to a User's Collection (JavaScript)\nDESCRIPTION: This snippet shows how to use the addToCollection method to associate a pet with a user in a many-to-many relationship. It demonstrates adding a single pet and multiple pets at once.\nSOURCE: https://github.com/balderdashy/sails/blob/master/docs/concepts/ORM/Associations/ManytoMany.md#2025-04-20_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\n// To add a Pet to a user's `pets` collection where the User has an id of\n// 10 and the Pet has an id of 300.\nawait User.addToCollection(10, 'pets', 300);\n```\n\nLANGUAGE: javascript\nCODE:\n```\nawait User.addToCollection(10, 'pets', [300, 301]);\n```\n\n----------------------------------------\n\nTITLE: Implementing Validation Rules in Sails.js Model\nDESCRIPTION: Demonstrates how to add validation rules to model attributes using the isIn validator.\nSOURCE: https://github.com/balderdashy/sails/blob/master/docs/concepts/ORM/Attributes.md#2025-04-20_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nunsubscribeReason: {\n  type: 'string',\n  isIn: ['boring', 'too many emails', 'recipes too difficult', 'other'],\n  required: true\n}\n```\n\n----------------------------------------\n\nTITLE: Traditional HTML Form CSRF Implementation\nDESCRIPTION: Example demonstrating how to include CSRF token in a traditional HTML form submission using a hidden input field.\nSOURCE: https://github.com/balderdashy/sails/blob/master/docs/concepts/Security/CSRF.md#2025-04-20_snippet_1\n\nLANGUAGE: html\nCODE:\n```\n<form>\n  <input type=\"hidden\" name=\"_csrf\" value=\"<%= _csrf %>\" />\n</form>\n```\n\n----------------------------------------\n\nTITLE: Accessing URL Parameters using Sails.js\nDESCRIPTION: This snippet demonstrates accessing URL parameters in a Sails.js application using the req.params object. The object contains parameters parsed from the URL path, such as named parameters in routes like /user/:name. Additionally, capture group matches from regular expressions and unnamed wildcard matches are available in req.params as numbered indices. There are no dependencies beyond having a Sails.js server context.\nSOURCE: https://github.com/balderdashy/sails/blob/master/docs/reference/req/req.params.md#2025-04-20_snippet_0\n\nLANGUAGE: usage\nCODE:\n```\nreq.params;\n```\n\n----------------------------------------\n\nTITLE: Checking `req.isSocket` in Sails.js\nDESCRIPTION: This code snippet demonstrates how to check if a request (`req`) originated from a Socket.io connection using the `req.isSocket` property. If `req.isSocket` is true, it indicates a socket connection, allowing for socket-specific actions like subscribing a user. Otherwise, it's treated as a regular HTTP request.\nSOURCE: https://github.com/balderdashy/sails/blob/master/docs/reference/req/req.isSocket.md#2025-04-20_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n```javascript\nif (req.isSocket){\n  // You're a socket.  Do cool socket stuff like subscribing.\n  User.subscribe(req, [req.session.userId]);\n}\nelse {\n  // Just another HTTP request.\n  // (`req.isSocket` is undefined)\n}\n```\n```\n\n----------------------------------------\n\nTITLE: Using 'limit' and 'skip' for pagination in JavaScript\nDESCRIPTION: Shows how to use 'limit' and 'skip' options for implementing pagination in queries.\nSOURCE: https://github.com/balderdashy/sails/blob/master/docs/concepts/ORM/Querylanguage.md#2025-04-20_snippet_11\n\nLANGUAGE: javascript\nCODE:\n```\nModel.find({ where: { name: 'foo' }, limit: 20 });\n\nModel.find({ where: { name: 'foo' }, skip: 10 });\n\nModel.find({ where: { name: 'foo' }, limit: 10, skip: 10 });\n```\n\n----------------------------------------\n\nTITLE: Demonstrating User Creation with Blueprints in Sails.js\nDESCRIPTION: This example shows how to create a user and retrieve all users using automatically generated blueprint routes. It assumes a User.js model has been created in the project.\nSOURCE: https://github.com/balderdashy/sails/blob/master/docs/concepts/Blueprints/Blueprints.md#2025-04-20_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\n/user/create?name=joe\n/user\n```\n\n----------------------------------------\n\nTITLE: Implementing CSRF Token in AJAX Form Submission\nDESCRIPTION: Example showing how to implement CSRF protection in a hybrid app using the exposeLocalsToBrowser partial to access the token from client-side JavaScript.\nSOURCE: https://github.com/balderdashy/sails/blob/master/docs/concepts/Security/CSRF.md#2025-04-20_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<%- exposeLocalsToBrowser() %>\n<script>\n  $.post({\n    foo: 'bar',\n    _csrf: window.SAILS_LOCALS._csrf\n  })\n</script>\n```\n\n----------------------------------------\n\nTITLE: Setting Up Waterline and Disk Adapter\nDESCRIPTION: JavaScript code to initialize Waterline and the sails-disk adapter. This sets up the main Waterline factory object and an instance of the disk adapter.\nSOURCE: https://github.com/balderdashy/sails/blob/master/docs/concepts/ORM/standalone-usage.md#2025-04-20_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nvar Waterline = require('waterline');\nvar sailsDiskAdapter = require('sails-disk');\nvar waterline = new Waterline();\n```\n\n----------------------------------------\n\nTITLE: Calling a Sails.js Helper (JavaScript)\nDESCRIPTION: Demonstrates how to call a Sails.js helper function asynchronously. The example uses a helper named 'formatWelcomeMessage' with a single input parameter.\nSOURCE: https://github.com/balderdashy/sails/blob/master/docs/concepts/Helpers/Helpers.md#2025-04-20_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconst greeting = await sails.helpers.formatWelcomeMessage('Bubba');\nsails.log(greeting);\n// => \"Hello, Bubba!\"\n```\n\n----------------------------------------\n\nTITLE: Implementing Socket Room Subscription in a Sails.js Controller\nDESCRIPTION: This example shows how to use `sails.sockets.join()` in a controller action. It checks if the request is a socket, gets the room name from parameters, and subscribes the socket to the room.\nSOURCE: https://github.com/balderdashy/sails/blob/master/docs/reference/websockets/sails.sockets/sails.sockets.join.md#2025-04-20_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nsubscribeToFunRoom: function(req, res) {\n  if (!req.isSocket) {\n    return res.badRequest();\n  }\n\n  var roomName = req.param('roomName');\n  sails.sockets.join(req, roomName, function(err) {\n    if (err) {\n      return res.serverError(err);\n    }\n\n    return res.json({\n      message: 'Subscribed to a fun room called '+roomName+'!'\n    });\n  });\n}\n```\n\n----------------------------------------\n\nTITLE: Defining a User Model with Validated Attributes in Sails.js\nDESCRIPTION: This code snippet demonstrates how to define a User model in Sails.js with a validated emailAddress attribute. The attribute is set as a required string with a unique constraint.\nSOURCE: https://github.com/balderdashy/sails/blob/master/docs/concepts/ORM/Validations.md#2025-04-20_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n// User\nmodule.exports = {\n  attributes: {\n    emailAddress: {\n      type: 'string',\n      unique: true,\n      required: true\n    }\n  }\n};\n```\n\n----------------------------------------\n\nTITLE: Configuring Custom Timestamp Column Names in Waterline Models\nDESCRIPTION: Example of using custom column/field names for the built-in timestamp attributes (createdAt and updatedAt) in Waterline models. This feature allows developers to customize database field names while maintaining automatic timestamp functionality.\nSOURCE: https://github.com/balderdashy/sails/blob/master/docs/version-notes/0.12.x/migration-guide-0.12.md#2025-04-20_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\n{\n  attributes: {},\n  autoCreatedAt: 'my_cool_created_when_timestamp',\n  autoUpdatedAt: 'my_cool_updated_at_timestamp'\n}\n```\n\n----------------------------------------\n\nTITLE: Structuring Standalone Actions in Sails.js\nDESCRIPTION: This snippet demonstrates the file structure for organizing standalone actions in Sails.js. It shows how to separate actions into individual files within subfolders of the api/controllers directory.\nSOURCE: https://github.com/balderdashy/sails/blob/master/docs/concepts/ActionsAndControllers/ActionsAndControllers.md#2025-04-20_snippet_5\n\nLANGUAGE: plaintext\nCODE:\n```\napi/\n controllers/\n  user/\n   login.js\n   logout.js\n   signup.js\n```\n\n----------------------------------------\n\nTITLE: Setting Custom Datastore in Sails.js Model\nDESCRIPTION: Configuration example showing how to specify a custom datastore for a Sails.js model, allowing it to connect to a specific database configuration.\nSOURCE: https://github.com/balderdashy/sails/blob/master/docs/concepts/ORM/model-settings.md#2025-04-20_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\ndatastore: 'legacyECommerceDb'\n```\n\n----------------------------------------\n\nTITLE: Bulk Update Example in Sails.js\nDESCRIPTION: This example illustrates how to update user records in bulk. It provides a concrete use case where users with a specific name are renamed, and it logs the outcome.\nSOURCE: https://github.com/balderdashy/sails/blob/master/docs/reference/waterline/models/update.md#2025-04-20_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nawait User.update({ name:'Pen' })\n.set({\n  name:'Finn'\n});\n\nsails.log('Updated all users named Pen so that their new name is \"Finn\".  I hope they like it.');\n```\n\n----------------------------------------\n\nTITLE: Find records using sails.io.js\nDESCRIPTION: This JavaScript code snippet shows how to use `sails.io.js` to make a GET request to the `/purchase` endpoint with sorting parameters. The response data is then logged to the console. It assumes the sails.io.js library is properly initialized.\nSOURCE: https://github.com/balderdashy/sails/blob/master/docs/reference/blueprint-api/Find.md#2025-04-20_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nio.socket.get('/purchase?sort=createdAt DESC', function (purchases) {\n  console.log(purchases);\n});\n```\n\n----------------------------------------\n\nTITLE: Basic Usage of .subscribe() Method in Sails.js\nDESCRIPTION: The basic syntax for using the .subscribe() method to subscribe a client socket to changes/deletions of database records. This connects the socket to a dynamic \"record room\" for receiving broadcasted messages.\nSOURCE: https://github.com/balderdashy/sails/blob/master/docs/reference/websockets/resourceful-pubsub/subscribe.md#2025-04-20_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nSomething.subscribe(req, ids);\n```\n\n----------------------------------------\n\nTITLE: Managing User-Pet Associations in JavaScript\nDESCRIPTION: This JavaScript example uses Sails' `.removeFromCollection()` method to remove specific pet records from a user's pet collection. The method uses asynchronous `await` for operation.\nDependencies: Sails framework and `User` model.\nParameters: `parentId` is the ID of user, `association` is the collection name, `childIds` is an array of pet IDs.\nExpected Output: Pets with IDs 99 and 98 will be removed from the specified user's pets collection.\nSOURCE: https://github.com/balderdashy/sails/blob/master/docs/reference/waterline/models/removeFromCollection.md#2025-04-20_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nawait User.removeFromCollection(3, 'pets')\n.members([99,98]);\n```\n\n----------------------------------------\n\nTITLE: Rendering Welcome Email Template\nDESCRIPTION: Example demonstrating how to compile an HTML email template with custom greeting data. Uses async/await and disables the default Sails layout.\nSOURCE: https://github.com/balderdashy/sails/blob/master/docs/reference/application/advanced-usage/sails.renderView.md#2025-04-20_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nvar htmlEmailContents = await sails.renderView('emails/signup-welcome', {\n  fullName: inputs.fullName,\n  // Don't include the Sails app's default layout in the rendered template.\n  layout: false\n});\n```\n\n----------------------------------------\n\nTITLE: Writing Controller Tests with Supertest in Sails.js\nDESCRIPTION: Example of writing integration tests for a Sails.js UserController using Supertest and Mocha.\nSOURCE: https://github.com/balderdashy/sails/blob/master/docs/concepts/Testing/Testing.md#2025-04-20_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nvar supertest = require('supertest');\n\ndescribe('UserController.login', function() {\n\n  describe('#login()', function() {\n    it('should redirect to /my/page', function (done) {\n      supertest(sails.hooks.http.app)\n      .post('/users/login')\n      .send({ name: 'test', password: 'test' })\n      .expect(302)\n      .expect('location','/my/page', done);\n    });\n  });\n\n});\n```\n\n----------------------------------------\n\nTITLE: Leasing Connection with Sails.js\nDESCRIPTION: This usage example demonstrates how to lease a connection from the datastore for executing multiple database queries within the same connection context. The `during` function is a procedural parameter that gets called automatically when a connection is ready. Prior to Sails 1.1.0, a callback (`proceed`) was required in `during`, but this has been deprecated in newer versions.\nSOURCE: https://github.com/balderdashy/sails/blob/master/docs/reference/waterline/datastores/leaseConnection.md#2025-04-20_snippet_0\n\nLANGUAGE: usage\nCODE:\n```\nawait datastore.leaseConnection(during);\n```\n\nLANGUAGE: usage\nCODE:\n```\nvar result = await datastore.leaseConnection(during);\n```\n\n----------------------------------------\n\nTITLE: Implementing Custom Routes in Sails.js Hook\nDESCRIPTION: This code snippet demonstrates how to create a Sails.js hook that binds custom routes. It initializes counters for total requests and unhandled requests, and sets up 'before' and 'after' routes to increment these counters. The hook makes these counters available to other modules in the Sails app.\nSOURCE: https://github.com/balderdashy/sails/blob/master/docs/concepts/extending-sails/Hooks/hookspec/routes.md#2025-04-20_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nmodule.exports = function (sails) {\n\n  // Declare a var that will act as a reference to this hook.\n  var hook;\n\n  return {\n\n    initialize: function(cb) {\n      // Assign this hook object to the `hook` var.\n      // This allows us to add/modify values that users of the hook can retrieve.\n      hook = this;\n      // Initialize a couple of values on the hook.\n      hook.numRequestsSeen = 0;\n      hook.numUnhandledRequestsSeen = 0;\n      // Signal that initialization of this hook is complete\n      // by calling the callback.\n      return cb();\n    },\n\n    routes: {\n      before: {\n        'GET /*': function (req, res, next) {\n          hook.numRequestsSeen++;\n          return next();\n        }\n      },\n      after: {\n        'GET /*': function (req, res, next) {\n          hook.numUnhandledRequestsSeen++;\n          return next();\n        }\n      }\n    }\n  };\n};\n```\n\n----------------------------------------\n\nTITLE: Configuring CSP in Sails.js using Lusca\nDESCRIPTION: This code snippet demonstrates how to configure Content Security Policy in a Sails.js application using the 'lusca' middleware. It shows the addition of the 'csp' middleware in the config/http.js file with a basic policy.\nSOURCE: https://github.com/balderdashy/sails/blob/master/docs/concepts/Security/ContentSecurityPolicy.md#2025-04-20_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\n  // ...\n\n  csp: require('lusca').csp({\n    policy: {\n      'default-src': '*'\n    }\n  }),\n\n  // ...\n\n  order: [\n    // ...\n    'csp',\n    // ...\n  ]\n```\n\n----------------------------------------\n\nTITLE: Default Datastore Configuration for MySQL\nDESCRIPTION: This code snippet shows how to configure the default datastore in a Sails application to use a MySQL database. The configuration includes setting the adapter and the connection URL.\nSOURCE: https://github.com/balderdashy/sails/blob/master/docs/reference/sails.config/sails.config.connections.md#2025-04-20_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\n// config/datastores.js\nmodule.exports.datastores = {\n  default: {\n    adapter: require('sails-mysql'),\n    url: 'mysql://root:squ1ddy@localhost:3306/my_dev_db_name',\n  }\n};\n```\n\n----------------------------------------\n\nTITLE: Setting a Cookie with maxAge and httpOnly in Express.js\nDESCRIPTION: This code snippet demonstrates how to set a cookie named 'rememberme' with a value of '1'. The `maxAge` option sets the cookie's expiration time to 900000 milliseconds (15 minutes), and `httpOnly` prevents client-side JavaScript from accessing the cookie, enhancing security.\nSOURCE: https://github.com/balderdashy/sails/blob/master/docs/reference/res/res.cookie.md#2025-04-20_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nres.cookie('rememberme', '1', { maxAge: 900000, httpOnly: true });\n```\n\n----------------------------------------\n\nTITLE: Using Locals in a Sails.js EJS View\nDESCRIPTION: Example of an EJS view using 'user' and 'corndogs' locals, demonstrating iteration and capitalization with lodash.\nSOURCE: https://github.com/balderdashy/sails/blob/master/docs/concepts/Views/Locals.md#2025-04-20_snippet_1\n\nLANGUAGE: ejs\nCODE:\n```\n<div>\n  <h1><%= user.fullName %>'s first view</h1>\n  <h2>My corndog collection:</h2>\n  <ul>\n    <% for (let corndog of corndogs) { %>\n    <li><%= _.capitalize(corndog.name) %></li>\n    <% } %>\n  </ul>\n</div>\n```\n\n----------------------------------------\n\nTITLE: Basic Sails.js Logging Examples\nDESCRIPTION: Demonstrates basic usage of different log levels in Sails.js applications. Shows how to log messages at info, debug, and warn levels using the built-in logger.\nSOURCE: https://github.com/balderdashy/sails/blob/master/docs/concepts/Logging/Logging.md#2025-04-20_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nsails.log.info('I am an info-level message.');\nsails.log('I am a debug-level message');\nsails.log.warn('I am a warn-level message');\n```\n\n----------------------------------------\n\nTITLE: Configuring Nullable Attributes in Sails.js\nDESCRIPTION: Example of configuring an attribute to allow null values using the allowNull flag.\nSOURCE: https://github.com/balderdashy/sails/blob/master/docs/concepts/ORM/Attributes.md#2025-04-20_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nattributes: {\n  phoneNumber: {\n    type: 'string',\n    allowNull: true\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Calling a Sails.js Helper with Request Object (JavaScript)\nDESCRIPTION: Demonstrates how to call a Sails.js helper that accepts the request object as a parameter. This example passes the 'req' object to a helper named 'parseMyHeaders'.\nSOURCE: https://github.com/balderdashy/sails/blob/master/docs/concepts/Helpers/Helpers.md#2025-04-20_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nconst headers = await sails.helpers.parseMyHeaders(req);\n```\n\n----------------------------------------\n\nTITLE: Using 'contains', 'startsWith', and 'endsWith' in JavaScript\nDESCRIPTION: Demonstrates the use of 'contains', 'startsWith', and 'endsWith' modifiers for string matching in queries.\nSOURCE: https://github.com/balderdashy/sails/blob/master/docs/concepts/ORM/Querylanguage.md#2025-04-20_snippet_10\n\nLANGUAGE: javascript\nCODE:\n```\nvar musicCourses = await Course.find({\n  subject: { contains: 'music' }\n});\n\nvar coursesAboutAmerica = await Course.find({\n  subject: { startsWith: 'american' }\n});\n\nvar historyCourses = await Course.find({\n  subject: { endsWith: 'history' }\n});\n```\n\n----------------------------------------\n\nTITLE: Using .destroy() Method in Sails.js\nDESCRIPTION: Illustrates how to use the `.destroy()` method to delete records matching specific criteria in a Sails.js application. The method accepts criteria to identify records, and by default, does not return the destroyed records unless chained with `.fetch()`. This method can be used with promises or traditional callbacks. It handles different types of errors such as UsageError and AdapterError.\nSOURCE: https://github.com/balderdashy/sails/blob/master/docs/reference/waterline/models/destroy.md#2025-04-20_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nawait Something.destroy(criteria);\n```\n\nLANGUAGE: JavaScript\nCODE:\n```\nvar destroyedRecords = await Something.destroy(criteria).fetch();\n```\n\nLANGUAGE: JavaScript\nCODE:\n```\nawait User.destroy({name:'Finn'});\n\nsails.log('Any users named Finn have now been deleted, if there were any.');\n```\n\nLANGUAGE: JavaScript\nCODE:\n```\nawait User.destroy({\n  id: { in: [ 3, 97 ] }\n});\n\nsails.log('The records for troublesome users (3 and 97) have been deleted, if they still existed.');\n```\n\nLANGUAGE: JavaScript\nCODE:\n```\nvar burnedBooks = await Book.destroy({\n  controversiality: { '>': 0.9 }\n}).fetch();\nsails.log('Deleted books:', burnedBooks);\n```\n\n----------------------------------------\n\nTITLE: Using sails.getUrlFor() in Sails JavaScript\nDESCRIPTION: This JavaScript function, sails.getUrlFor, looks up the first route pointing at the specified target and returns its URL in a Sails application. This requires a predefined target string which represents the route target. Possible inputs are strings such as 'entrance/view-login'. If no matching route is found, it raises an E_NOT_FOUND error.\nSOURCE: https://github.com/balderdashy/sails/blob/master/docs/reference/application/sails.getUrlFor.md#2025-04-20_snippet_0\n\nLANGUAGE: usage\nCODE:\n```\nsails.getUrlFor(target);\n```\n\nLANGUAGE: javascript\nCODE:\n```\n'/login'\n```\n\n----------------------------------------\n\nTITLE: Executing raw SQL queries with MySQL\nDESCRIPTION: This example demonstrates using the `.query()` method to perform a raw SQL query on a Sails model configured with the `sails-mysql` adapter. It directly communicates with the `mysql` package. The query selects a pet's name based on the provided parameter, and logs the raw result. Proper handling of errors and processing of results is managed through callbacks.\nSOURCE: https://github.com/balderdashy/sails/blob/master/docs/reference/waterline/models/query.md#2025-04-20_snippet_2\n\nLANGUAGE: js\nCODE:\n```\nPet.query('SELECT pet.name FROM pet WHERE pet.name = ?', [ 'dog' ] ,function(err, rawResult) {\n  if (err) { return res.serverError(err); }\n\n  sails.log(rawResult);\n  // ...grab appropriate data...\n  // (result format depends on the SQL query that was passed in, and the adapter you're using)\n\n  // Then parse the raw result and do whatever you like with it.\n\n  return res.ok();\n\n});\n```\n\n----------------------------------------\n\nTITLE: Registering CoffeeScript in Sails App.js\nDESCRIPTION: This code needs to be added at the top of your app.js file to enable CoffeeScript support in your Sails application.\nSOURCE: https://github.com/balderdashy/sails/blob/master/docs/tutorials/coffeeScript.md#2025-04-20_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nrequire('coffee-script/register');\n```\n\n----------------------------------------\n\nTITLE: Multiple Rooms per Record in Sails.js\nDESCRIPTION: Implementation of multiple notification channels for the same record by combining .getRoomName() and sails.sockets.join(). This example shows how to subscribe users to different rooms based on their permissions.\nSOURCE: https://github.com/balderdashy/sails/blob/master/docs/reference/websockets/resourceful-pubsub/subscribe.md#2025-04-20_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\n// On the server, in your subscribe action‚Ä¶\n\nif (!orgId) { throw 'badRequest'; }\n\nif (!this.req.isSocket) { throw {badRequest: 'This action is designed for use with WebSockets.'}; }\n\nlet me = await User.findOne({\n  id: this.req.session.userId\n})\n.populate('globalAdminOfOrganizations');\n\n// Subscribe to general notifications.\nOrganization.subscribe(this.req, orgId);\n\n// If this user is a global admin of this organization, then also subscribe them to\n// an additional private room (this is used for additional notifications intended only\n// for global admins):\nif (globalAdminOfOrganizations.includes(orgId)) {\n  let privateRoom = Organization.getRoomName(`${orgId}-admins-only`);\n  sails.sockets.join(this.req, privateRoom);\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing registerActions Method in Sails Hook\nDESCRIPTION: This code snippet demonstrates how to implement the registerActions method in a Sails hook. It registers a custom 'greet' action that can be bound to any route in the app. The method takes a callback function as an argument, which is called after the actions are registered.\nSOURCE: https://github.com/balderdashy/sails/blob/master/docs/concepts/extending-sails/Hooks/hookspec/register-actions.md#2025-04-20_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nregisterActions: function(cb) {\n\n  // Register an action as `myhook/greet` that an app can bind to any route they like.\n  sails.registerAction(function greet(req, res) {\n    var name = req.param('name') || 'stranger';\n    return res.status(200).send('Hey there, ' + name + '!');\n  }, 'myhook/greet');\n\n  return cb();\n\n}\n```\n\n----------------------------------------\n\nTITLE: Error Negotiation with Callbacks in Sails.js\nDESCRIPTION: Demonstrates how to handle different types of errors when creating a new user using traditional Node.js callbacks. It checks the error object properties to determine the type of error and respond accordingly.\nSOURCE: https://github.com/balderdashy/sails/blob/master/docs/concepts/ORM/errors.md#2025-04-20_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nUser.create({\n  emailAddress: req.param('emailAddress')\n})\n.exec(function (err){\n  if (err && err.code === 'E_UNIQUE') {\n    return res.sendStatus(409);\n  } else if (err && err.name === 'UsageError') {\n    return res.badRequest();\n  } else if (err) {\n    return res.serverError(err);\n  }\n\n  return res.ok();\n});\n```\n\n----------------------------------------\n\nTITLE: Sails model generation commands\nDESCRIPTION: These bash commands create a new Sails project, navigate into it, generate a `purchase` model, and lift the Sails application. It provides guidance on how to quickly set up a Sails project with the Purchase model, assuming Sails is installed globally.\nSOURCE: https://github.com/balderdashy/sails/blob/master/docs/reference/blueprint-api/Find.md#2025-04-20_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\n$ sails new foo\n$ cd foo\n$ sails generate model purchase\n$ sails lift\n  # You will see a prompt about database auto-migration settings.\n  # Just choose 1 (alter) and press <ENTER>.\n```\n\n----------------------------------------\n\nTITLE: Using 'in' and 'nin' modifiers in JavaScript\nDESCRIPTION: Shows how to use 'in' and 'nin' (not in) modifiers to match or exclude values from a list.\nSOURCE: https://github.com/balderdashy/sails/blob/master/docs/concepts/ORM/Querylanguage.md#2025-04-20_snippet_9\n\nLANGUAGE: javascript\nCODE:\n```\nModel.find({\n  name: { in: ['foo', 'bar'] }\n});\n\nModel.find({\n  name: { nin: ['foo', 'bar'] }\n});\n```\n\n----------------------------------------\n\nTITLE: Example Usage of .sum() with Criteria in JavaScript\nDESCRIPTION: This example illustrates the application of the .sum() method to compute the cumulative balance for bank accounts that either have a balance below $32,000 or are marked as suspended. The code constructs a query with criteria and awaits the result, demonstrating practical usage scenarios for aggregate calculations in applications.\nSOURCE: https://github.com/balderdashy/sails/blob/master/docs/reference/waterline/models/sum.md#2025-04-20_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nvar total = await BankAccount.sum('balance')\n.where({\n  or: [\n    { balance: { '<': 32000 } },\n    { suspended: true }\n  ]\n});\n```\n\n----------------------------------------\n\nTITLE: Handling Socket Requests and Broadcasting in Sails.js Controller\nDESCRIPTION: This server-side code snippet shows a Sails.js controller action that handles socket requests to 'GET /say/hello'. It demonstrates how to join a socket to a room, broadcast a message to all sockets in that room, and respond to the original request.\nSOURCE: https://github.com/balderdashy/sails/blob/master/docs/concepts/Realtime/Realtime.md#2025-04-20_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nmodule.exports = {\n  hello: function(req, res) {\n    if (!req.isSocket) {\n      return res.badRequest();\n    }\n    sails.sockets.join(req, 'funSockets');\n    sails.sockets.broadcast('funSockets', 'hello', { howdy: 'hi there!'}, req);\n    return res.json({\n      anyData: 'we want to send back'\n    });\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Retrieving Sails Actions in JavaScript\nDESCRIPTION: The `sails.getActions()` function is used to retrieve a dictionary of actions available in a Sails application. This function returns a flat dictionary where keys are in kebab-case, representing action identities, and values are action functions ready to be used with `req, res` parameters. All actions are converted to a standard format regardless of their initial syntax, such as actions2.\nSOURCE: https://github.com/balderdashy/sails/blob/master/docs/reference/application/advanced-usage/sails.getActions.md#2025-04-20_snippet_0\n\nLANGUAGE: usage\nCODE:\n```\nsails.getActions();\n```\n\n----------------------------------------\n\nTITLE: Retrieving API Key from Custom Config in Sails.js\nDESCRIPTION: Demonstrates accessing a specific custom configuration value (Mailgun API key) within a Sails.js action or helper.\nSOURCE: https://github.com/balderdashy/sails/blob/master/docs/reference/application/sails.config.custom.md#2025-04-20_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nsails.config.custom.mailgunApiKey;\n// -> \"key-testkeyb183848139913858e8abd9a3\"\n```\n\n----------------------------------------\n\nTITLE: Defining Sails.js Policies\nDESCRIPTION: This code snippet demonstrates how to define policies in the `sails.config.policies` configuration.  It sets a global policy ('*') to 'isLoggedIn', requiring users to be logged in for most actions, while specifically allowing access to the 'login' action of the 'UserController'.\nSOURCE: https://github.com/balderdashy/sails/blob/master/docs/reference/sails.config/sails.config.policies.md#2025-04-20_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nmodule.exports.policies = {\n\n  '*': 'isLoggedIn', // Require user to be logged in to access any action not otherwise mapped in this config\n  'UserController': {\n    'login': true    // Always allow access to the user login action\n  }\n\n\n}\n```\n\n----------------------------------------\n\nTITLE: Executing SQL Query with Custom Table/Column Names\nDESCRIPTION: This JavaScript snippet shows how to write a SQL query using custom table and column names in Sails. It involves dynamically constructing SQL queries to accommodate model customizations. It's essential to handle the \"rawResult\" accordingly due to customizations.\nSOURCE: https://github.com/balderdashy/sails/blob/master/docs/reference/waterline/datastores/sendNativeQuery.md#2025-04-20_snippet_1\n\nLANGUAGE: js\nCODE:\n```\nvar NAMES_OF_PETS_SQL = `\nSELECT ${Pet.tableName}.${Pet.schema.name.columnName}\nFROM ${Pet.tableName}\nWHERE\n  ${Pet.tableName}.${Pet.schema.speciesLabel.columnName} = $1\n  OR\n  ${Pet.tableName}.${Pet.schema.speciesLabel.columnName} = $2\n`;\n```\n\n----------------------------------------\n\nTITLE: Filtering Users with .where() Method in Sails.js\nDESCRIPTION: Example of finding users named 'Finn' with email addresses starting with 'f' using the .where() method. This demonstrates combining an exact match condition with a 'startsWith' modifier.\nSOURCE: https://github.com/balderdashy/sails/blob/master/docs/reference/waterline/queries/where.md#2025-04-20_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nvar users = await User.find()\n.where({ name: 'Finn', 'emailAddress' : { startsWith : 'f' } });\n\nreturn res.json(users);\n```\n\n----------------------------------------\n\nTITLE: Retrieving Parameters with req.param() in Sails\nDESCRIPTION: This snippet demonstrates the usage of `req.param()` to retrieve parameters from different parts of a request in a Sails.js application, namely URL paths, request bodies, and query strings. It requires Sails.js as a dependency, with the `req.param()` method available on the request object. The function looks for the parameter in the specified order and returns an optional default value if the parameter is not found. Parameters can be passed via URL path, query string, or request body, with URL path parameters taking precedence.\nSOURCE: https://github.com/balderdashy/sails/blob/master/docs/reference/req/req.param.md#2025-04-20_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nreq.param('sku');\n// -> 123\n```\n\n----------------------------------------\n\nTITLE: Using req.setLocale to Override Locale - JavaScript\nDESCRIPTION: The req.setLocale() method allows developers to manually override the default locale detection mechanism in Sails.js for a specific request. This is useful when the user‚Äôs language preference needs to be set manually rather than relying on browser settings. Key parameters include the 'override' locale string which specifies the user‚Äôs preferred language. The method is typically used in controller actions and requires the 'req' object as context. The output is not explicitly handled as it changes the request object state.\nSOURCE: https://github.com/balderdashy/sails/blob/master/docs/reference/req/req.setLocale.md#2025-04-20_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nif (this.req.me.preferredLocale) {\n  this.req.setLocale(this.req.me.preferredLocale);\n}\nreturn exits.success();\n```\n\nLANGUAGE: JavaScript\nCODE:\n```\nvar me = await User.findOne({ id: req.session.userId });\nif (me.preferredLocale) {\n  req.setLocale(me.preferredLocale);\n}\nreturn res.view('pages/homepage');\n```\n\n----------------------------------------\n\nTITLE: Creating a Native MySQL Connection in Sails.js\nDESCRIPTION: Shows a complete example of accessing the MySQL module from the datastore driver, creating a new connection with custom configuration, and using advanced features like streaming query results.\nSOURCE: https://github.com/balderdashy/sails/blob/master/docs/tutorials/low-level-mysql-access.md#2025-04-20_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\n// Get the named datastore\nvar rdi = sails.getDatastore('default');\n\n// Grab the MySQL module from the datastore instance\nvar mysql = rdi.driver.mysql;\n\n// Create a new connection\nvar connection = mysql.createConnection({\n  host     : 'localhost',\n  user     : 'root',\n  password : 'password',\n  database: 'example_database'\n});\n\n// Make a query and pipe the results\nconnection.query('SELECT * FROM posts')\n  .stream({highWaterMark: 5})\n  .pipe(...);\n```\n\n----------------------------------------\n\nTITLE: Find records using Angular $http\nDESCRIPTION: This JavaScript code snippet demonstrates how to use Angular's `$http` service to make a GET request to the `/purchase` endpoint with sorting parameters.  It extracts the data from the response and logs the purchase records to the console.\nSOURCE: https://github.com/balderdashy/sails/blob/master/docs/reference/blueprint-api/Find.md#2025-04-20_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\n$http.get('/purchase?sort=createdAt DESC')\n.then(function (res) {\n  var purchases = res.data;\n  console.log(purchases);\n});\n```\n\n----------------------------------------\n\nTITLE: Content-Type Validation Examples\nDESCRIPTION: Demonstrates different ways to validate Content-Type using req.is() method, including exact matches, full mime types, and wildcard patterns. Example assumes Content-Type header is 'text/html; charset=utf-8'.\nSOURCE: https://github.com/balderdashy/sails/blob/master/docs/reference/req/req.is.md#2025-04-20_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nreq.is('html');\n// -> true\nreq.is('text/html');\n// -> true\nreq.is('text/*');\n// -> true\n```\n\n----------------------------------------\n\nTITLE: Installing Waterline and Adapters via NPM\nDESCRIPTION: Commands for installing Waterline ORM and common adapters using NPM. This includes the core Waterline package and adapters for MySQL and disk storage.\nSOURCE: https://github.com/balderdashy/sails/blob/master/docs/concepts/ORM/standalone-usage.md#2025-04-20_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\n$ npm install --save waterline\n$ npm install --save sails-mysql\n$ npm install --save-dev sails-disk\n```\n\n----------------------------------------\n\nTITLE: Accessing Request Start Time in Sails.js\nDESCRIPTION: Demonstrates how to access the timestamp when Sails started processing the current request. Returns a JavaScript Date object. Note that this property is only available in non-production environments.\nSOURCE: https://github.com/balderdashy/sails/blob/master/docs/reference/req/req._startTime.md#2025-04-20_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nreq._startTime;\n```\n\n----------------------------------------\n\nTITLE: Writing Model Tests for Sails.js\nDESCRIPTION: Example of writing integration tests for a Sails.js User model using Mocha.\nSOURCE: https://github.com/balderdashy/sails/blob/master/docs/concepts/Testing/Testing.md#2025-04-20_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nvar util = require('util');\n\ndescribe('User (model)', function() {\n\n  describe('#findBestStudents()', function() {\n    it('should return 5 users', function (done) {\n      User.findBestStudents()\n      .then(function(bestStudents) {\n\n        if (bestStudents.length !== 5) {\n          return done(new Error(\n            'Should return exactly 5 students -- the students '+\n            'from our test fixtures who are considered the \"best\".  '+\n            'But instead, got: '+util.inspect(bestStudents, {depth:null})+''\n          ));\n        }//-‚Ä¢\n\n        return done();\n\n      })\n      .catch(done);\n    });\n  });\n\n});\n```\n\n----------------------------------------\n\nTITLE: Configuring Schema Setting in Sails.js Model\nDESCRIPTION: Example of enabling schema mode in a Sails.js model. When set to true, only properties defined in the model's attributes will be stored in the database.\nSOURCE: https://github.com/balderdashy/sails/blob/master/docs/concepts/ORM/model-settings.md#2025-04-20_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nschema: true\n```\n\n----------------------------------------\n\nTITLE: Client-side JST Template Data Injection\nDESCRIPTION: Demonstrates safe data injection in client-side JST templates using <%- %> syntax for HTML-encoding user data.\nSOURCE: https://github.com/balderdashy/sails/blob/master/docs/concepts/Security/XSS.md#2025-04-20_snippet_2\n\nLANGUAGE: html\nCODE:\n```\n<div data-template-id=\"welcome-box\">\n  <h3 is=\"welcome-msg\">Hello <%- me.username %>!</h3>\n</div>\n```\n\n----------------------------------------\n\nTITLE: Creating Sails Apps Programmatically in JavaScript\nDESCRIPTION: Demonstrates how to create multiple Sails app instances using the Sails constructor in a Node.js script.\nSOURCE: https://github.com/balderdashy/sails/blob/master/docs/concepts/Programmatic Usage/Programmatic Usage.md#2025-04-20_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nvar Sails = require('sails').constructor;\nvar mySailsApp = new Sails();\nvar myOtherSailsApp = new Sails();\n```\n\n----------------------------------------\n\nTITLE: Using 'or' predicate in JavaScript\nDESCRIPTION: Demonstrates the use of the 'or' predicate to match records that satisfy at least one of multiple conditions.\nSOURCE: https://github.com/balderdashy/sails/blob/master/docs/concepts/ORM/Querylanguage.md#2025-04-20_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\nvar waltersAndTeachers = await Model.find({\n  or : [\n    { name: 'walter' },\n    { occupation: 'teacher' }\n  ]\n});\n```\n\n----------------------------------------\n\nTITLE: Waterline Model Test Implementation\nDESCRIPTION: Complete test implementation including Waterline setup, teardown, and a test case for creating a user. Uses Mocha test framework and sails-disk adapter.\nSOURCE: https://github.com/balderdashy/sails/blob/master/docs/concepts/ORM/standalone-usage.md#2025-04-20_snippet_10\n\nLANGUAGE: javascript\nCODE:\n```\nvar assert = require('assert');\nvar Waterline = require('waterline');\nvar sailsDiskAdapter = require('sails-disk');\n\nsuite('UserModel', function () {\n  var waterline = new Waterline();\n  var config = {\n    adapters: {\n      'sails-disk': sailsDiskAdapter\n    },\n    datastores: {\n      default: {\n        adapter: 'sails-disk'\n      }\n    }\n  }\n\n  setup(function (done) {\n    waterline.loadCollection(\n      Waterline.Collection.extend(require('../models/User.js'))\n    );\n    waterline.loadCollection(\n      Waterline.Collection.extend(require('../models/Pet.js'))\n    );\n    waterline.initialize(config, function  (err, ontology) {\n      if (err) {\n        return done(err);\n      }\n      done();\n    });\n  });\n\n  teardown(function () {\n    var adapters = config.adapters || {};\n    var promises = [];\n\n    Object.keys(adapters)\n      .forEach(function (adapter) {\n        if (adapters[adapter].teardown) {\n          var promise = new Promise(function (resolve) {\n            adapters[adapter].teardown(null, resolve);\n          });\n          promises.push(promise);\n        }\n      });\n\n    return Promise.all(promises);\n  });\n\n  test('should be able to create a user', function () {\n    var User = waterline.collections.user;\n\n    return User.create({\n        firstName: 'Neil',\n        lastName: 'Armstrong'\n      })\n      .then(function (user) {\n        assert.equal(user.firstName, 'Neil', 'should have set the first name');\n        assert.equal(user.lastName, 'Armstrong', 'should have set the last name');\n        assert.equal(user.pets.length, 0, 'should have no pets');\n      });\n  });\n});\n```\n\n----------------------------------------\n\nTITLE: Policy Target Configuration in Sails.js\nDESCRIPTION: Shows how to apply policies directly to routes, particularly useful when using view target syntax. Includes example of chaining policy with other targets.\nSOURCE: https://github.com/balderdashy/sails/blob/master/docs/concepts/Routes/RouteTargetSyntax.md#2025-04-20_snippet_9\n\nLANGUAGE: javascript\nCODE:\n```\n'/foo': [\n  { policy: 'my-policy' },\n  { view: 'dashboard' }\n]\n```\n\n----------------------------------------\n\nTITLE: Setting Multiple Response Headers in Sails.js\nDESCRIPTION: This code snippet demonstrates how to set multiple response headers at once using `res.set()` in Sails.js. It sets the `Content-Type`, `Content-Length`, and `ETag` headers.  This is helpful for quickly configuring multiple aspects of the HTTP response.\nSOURCE: https://github.com/balderdashy/sails/blob/master/docs/reference/res/res.set.md#2025-04-20_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nres.set({\n  'Content-Type': 'text/plain',\n  'Content-Length': '123',\n  'ETag': '12345'\n})\n```\n\n----------------------------------------\n\nTITLE: Basic Usage of .publish() Method in Sails.js\nDESCRIPTION: Shows the basic syntax for using the .publish() method to broadcast messages to socket clients subscribed to specific model records. The method accepts three parameters: an array of record IDs, the data to broadcast, and an optional request object.\nSOURCE: https://github.com/balderdashy/sails/blob/master/docs/reference/websockets/resourceful-pubsub/publish.md#2025-04-20_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nSomething.publish(ids, data, req);\n```\n\n----------------------------------------\n\nTITLE: Registering middleware for specific action namespace in Sails.js\nDESCRIPTION: Example of how to register middleware that affects all actions within the 'user' namespace using the wildcard pattern.\nSOURCE: https://github.com/balderdashy/sails/blob/master/lib/app/private/controller/README.md#2025-04-20_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nsails.registerActionMiddleware(mustBeLoggedIn, 'user.*')\n```\n\n----------------------------------------\n\nTITLE: Pattern Variable Route Examples\nDESCRIPTION: Examples of using named pattern variables in route definitions for capturing URL parameters.\nSOURCE: https://github.com/balderdashy/sails/blob/master/docs/concepts/Routes/RouteTargetSyntax.md#2025-04-20_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\n'/user/foo/bar/:name'\n\n'/user/foo/bar/:name?'\n```\n\n----------------------------------------\n\nTITLE: Enabling Secure Flag for Session Cookies in Sails.js\nDESCRIPTION: This JavaScript snippet enables the 'secure' flag for session cookies in a Sails.js application, which instructs browsers to send session ID cookies only over HTTPS. It's crucial for maintaining security in production environments, especially when using proxies or load balancers.\nSOURCE: https://github.com/balderdashy/sails/blob/master/docs/reference/sails.config/sails.config.session.md#2025-04-20_snippet_2\n\nLANGUAGE: JavaScript\nCODE:\n```\n\"js\\nsession: {\\n  cookie: {\\n    secure: true\\n  }\\n}\\n\"\n```\n\n----------------------------------------\n\nTITLE: Updating Find Query in Sails.js 1.0\nDESCRIPTION: Example of how to modify a .find() query that previously used 'sort' and 'limit' with .findOne(). In Sails.js 1.0, .findOne() no longer supports these modifiers, so .find() with .limit(1) should be used instead.\nSOURCE: https://github.com/balderdashy/sails/blob/master/docs/upgrading/To1.0.md#2025-04-20_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\n.find(<criteria>).limit(1)\n```\n\n----------------------------------------\n\nTITLE: Handling 'order' Events in Sails.js\nDESCRIPTION: Example of listening for the 'order' event in a Sails.js application. The event handler receives a message object containing data sent by the server.\nSOURCE: https://github.com/balderdashy/sails/blob/master/docs/reference/websockets/sails.io.js/io.socket.on.md#2025-04-20_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nio.socket.on('order', function onServerSentEvent (msg) {\n  // msg => {...whatever the server broadcasted...}\n});\n```\n\n----------------------------------------\n\nTITLE: Returning a View with Sails.js view engine - usage\nDESCRIPTION: Demonstrates the usage of `res.view()` to render a view in a Sails.js application. The method compiles a specified view template using the configured view engine to produce an HTML response. The path to the view can be specified, or default view selection can be used based on the current controller and action. Locals can be passed as data to the view template.\nSOURCE: https://github.com/balderdashy/sails/blob/master/docs/reference/res/res.view.md#2025-04-20_snippet_0\n\nLANGUAGE: usage\nCODE:\n```\nreturn res.view(pathToView, locals);\n```\n\nLANGUAGE: usage\nCODE:\n```\nreturn res.view(pathToView);\n```\n\nLANGUAGE: usage\nCODE:\n```\nreturn res.view(locals);\n```\n\nLANGUAGE: usage\nCODE:\n```\nreturn res.view();\n```\n\n----------------------------------------\n\nTITLE: Configuring Winston as a custom logger in Sails.js\nDESCRIPTION: This JavaScript code configures Winston as a custom logger in a Sails.js application. It defines a custom logger instance with specific formatting options (timestamp, label, colorization) and sets up a console transport for logging to the console.\nSOURCE: https://github.com/balderdashy/sails/blob/master/docs/reference/sails.config/sails.config.log.md#2025-04-20_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\n\"// config/log.js\\n\\nconst { version } = require('../package');\\n\\nconst { createLogger, format, transports } = require('winston');\\nconst { combine, timestamp, colorize, label, printf, align } = format;\\nconst { SPLAT } = require('triple-beam');\\nconst { isObject } = require('lodash');\\n\\nfunction formatObject(param) {\\n  if (isObject(param)) {\\n    return JSON.stringify(param);\\n  }\\n  return param;\\n}\\n\\n// Ignore log messages if they have { private: true }\\nconst all = format((info) => {\\n  const splat = info[SPLAT] || [];\\n  const message = formatObject(info.message);\\n  const rest = splat.map(formatObject).join(' ');\\n  info.message = `${message} ${rest}`;//  info.message = `${message} ${rest}`;\\n  return info;\\n});\\n\\nconst customLogger = createLogger({\\n  format: combine(\\n    all(),\\n    label({ label: version }),\\n    timestamp(),\\n    colorize(),\\n    align(),\\n    printf(info => `${info.timestamp} [${info.label}] ${info.level}: ${formatObject(info.message)}`)//    printf(info => `${info.timestamp} [${info.label}] ${info.level}: ${formatObject(info.message)}`)\\n  ),\\n  transports: [new transports.Console()]\\n});\\n\\nmodule.exports.log = {\\n  custom: customLogger,\\n  inspect: false\\n  // level: 'info'\\n};\\n\"\n```\n\n----------------------------------------\n\nTITLE: Adding Foreign Record using sails.io.js - Sails.js - JavaScript\nDESCRIPTION: This snippet demonstrates the use of sails.io.js to send a PUT request to add a foreign record for a primary record. It allows real-time clients connected to the application to receive updates.\nSOURCE: https://github.com/balderdashy/sails/blob/master/docs/reference/blueprint-api/Add.md#2025-04-20_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nio.socket.put('/employee/7/involvedInPurchases/47', function (purchases) {\\n  console.log(purchases);\\n});\n```\n\n----------------------------------------\n\nTITLE: Configuring Column Type in Sails.js Model\nDESCRIPTION: Demonstrates how to specify a custom database column type for a model attribute. This example shows setting up a number attribute to use a float column type in the database.\nSOURCE: https://github.com/balderdashy/sails/blob/master/docs/concepts/ORM/Attributes.md#2025-04-20_snippet_10\n\nLANGUAGE: javascript\nCODE:\n```\nattributes: {\n  placeInLine: {\n    type: 'number',\n    columnType: 'float'\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Using res.view() without pathToView - JavaScript\nDESCRIPTION: Example showing how to use `res.view()` without specifying the `pathToView`. In this case, `res.view()` automatically determines the view path based on the controller's identity and the action's name. It returns the HTML content of the view.\nSOURCE: https://github.com/balderdashy/sails/blob/master/docs/reference/res/res.view.md#2025-04-20_snippet_1\n\nLANGUAGE: js\nCODE:\n```\nreturn res.view();\n// -> responds with `views/oven/cook.ejs`\n```\n\n----------------------------------------\n\nTITLE: Registering middleware with namespace exclusions in Sails.js\nDESCRIPTION: Example of how to register middleware that affects all actions within the 'user' and 'pet' namespaces except for any actions within their respective 'public' sub-namespaces.\nSOURCE: https://github.com/balderdashy/sails/blob/master/lib/app/private/controller/README.md#2025-04-20_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nsails.registerActionMiddleware(mustBeLoggedIn, ['user.*', 'pet.*'], ['user.public.*', 'pet.public.*'])\n```\n\n----------------------------------------\n\nTITLE: Passing Dynamic Locals in Sails.js Controller Action\nDESCRIPTION: Example of passing dynamic locals to a view using res.view() in a controller action.\nSOURCE: https://github.com/balderdashy/sails/blob/master/docs/concepts/Views/Locals.md#2025-04-20_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\n// in api/controllers/UserController.js...\n\n  profile: function (req, res) {\n    // ...\n    return res.view('backOffice/profile', {\n      user: theUser,\n      corndogs: theUser.corndogCollection\n    });\n  },\n  // ...\n```\n\n----------------------------------------\n\nTITLE: Installing PostgreSQL Adapter for Sails.js\nDESCRIPTION: Command to install the sails-postgresql adapter package via npm.\nSOURCE: https://github.com/balderdashy/sails/blob/master/docs/concepts/extending-sails/Adapters/adapterList.md#2025-04-20_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nnpm install sails-postgresql --save\n```\n\n----------------------------------------\n\nTITLE: Create Record Response - JSON\nDESCRIPTION: This JSON snippet shows the expected response after successfully creating a new record. It includes the ID, \"name\", \"hobby\", \"createdAt\", \"updatedAt\", and \"involvedInPurchases\" information.\nSOURCE: https://github.com/balderdashy/sails/blob/master/docs/reference/blueprint-api/Create.md#2025-04-20_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"id\": 47,\n  \"name\": \"Applejack\",\n  \"hobby\": \"pickin\",\n  \"createdAt\": 1485550575626,\n  \"updatedAt\": 1485550603847,\n  \"involvedInPurchases\": [\n    {\n      \"id\": 13,\n      \"amount\": 10000,\n      \"createdAt\": 1485550525451,\n      \"updatedAt\": 1485550544901\n    },\n    {\n      \"id\": 25,\n      \"amount\": 4.50,\n      \"createdAt\": 1485550561340,\n      \"updatedAt\": 1485550561340\n    }\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Data Encryption Keys in Sails.js\nDESCRIPTION: Example of setting up data encryption keys (DEK) in Sails.js for secure data storage. Shows configuration of the default encryption key used for data encryption.\nSOURCE: https://github.com/balderdashy/sails/blob/master/docs/concepts/ORM/model-settings.md#2025-04-20_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\ndataEncryptionKeys: {\n  default: 'tVdQbq2JptoPp4oXGT94kKqF72iV0VKY/cnp7SjL7Ik='\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Multiple Datastores in Sails.js\nDESCRIPTION: This code snippet demonstrates how to configure multiple datastores in Sails.js using the `config/datastores.js` file. It defines three datastores: `default`, `existingEcommerceDb`, and `q3PromoDb`, each connected to different databases (MySQL and MongoDB) using respective adapters. The configuration includes connection URLs and adapter settings.\nSOURCE: https://github.com/balderdashy/sails/blob/master/docs/reference/sails.config/sails.config.connections.md#2025-04-20_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\n// config/datastores.js\nmodule.exports.datastores = {\n  default: {\n    adapter: require('sails-mysql'),\n    url: 'mysql://root@localhost:3306/dev',\n  },\n  existingEcommerceDb: {\n    adapter: require('sails-mysql'),\n    url: 'mysql://djbluegrass:0ldy3ll3r@legacy.example.com:3306/store',\n  },\n  q3PromoDb: {\n    adapter: require('sails-mongo'),\n    url: 'mongodb://djbluegrass:0ldy3ll3r@seasonal-pet-sweaters-promo.example.com:27017/promotional',\n  }\n};\n```\n\n----------------------------------------\n\nTITLE: Accessing Request Body Parameters in Sails.js\nDESCRIPTION: Demonstrates how to access the parsed request body parameters object. The body object contains URL-encoded or JSON stringified parameters, defaulting to an empty object. When using Skipper (default body parser), this will be undefined for GET requests.\nSOURCE: https://github.com/balderdashy/sails/blob/master/docs/reference/req/req.body.md#2025-04-20_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nreq.body;\n```\n\n----------------------------------------\n\nTITLE: Custom Batch Size Configuration\nDESCRIPTION: Demonstrates how to configure custom batch size when streaming records using .eachBatch()\nSOURCE: https://github.com/balderdashy/sails/blob/master/docs/reference/waterline/models/stream.md#2025-04-20_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\n.eachBatch(100, async (records)=>{\n  console.log(`Got ${records.length} records.`);\n})\n```\n\n----------------------------------------\n\nTITLE: Adding Foreign Record via HTTP PUT Request - Sails.js - JavaScript\nDESCRIPTION: This snippet demonstrates how to use a PUT request to add a purchase to an employee's list of involved purchases. The request must specify the model, ID, association, and foreign key for the record being added. Proper validation will ensure correct record associations and avoid duplicates in many-to-many setups.\nSOURCE: https://github.com/balderdashy/sails/blob/master/docs/reference/blueprint-api/Add.md#2025-04-20_snippet_0\n\nLANGUAGE: usage\nCODE:\n```\n\"PUT /:model/:id/:association/:fk\"\n```\n\nLANGUAGE: json\nCODE:\n```\n{\\n  \"id\": 7,\\n  \"name\": \"Dolly\",\\n  \"createdAt\": 1485462079725,\\n  \"updatedAt\": 1485476060873,\\n  \"involvedInPurchases\": [\\n    {\\n      \"amount\": 10000,\\n      \"createdAt\": 1485476060873,\\n      \"updatedAt\": 1485476060873,\\n      \"id\": 47,\\n      \"cashier\": 7\\n    }\\n  ]\\n}\n```\n\n----------------------------------------\n\nTITLE: Replacing req.params.all() in Sails.js 1.0\nDESCRIPTION: Example of how to replace the removed req.params.all() method with the recommended req.allParams() in Sails.js 1.0.\nSOURCE: https://github.com/balderdashy/sails/blob/master/docs/upgrading/To1.0.md#2025-04-20_snippet_8\n\nLANGUAGE: javascript\nCODE:\n```\nreq.allParams()\n```\n\n----------------------------------------\n\nTITLE: Creating Custom Configuration in Sails.js\nDESCRIPTION: Example of creating a custom configuration file that modifies blueprint settings. This shows how to disable shortcuts by adding a new configuration file named 'foo.js' that will be merged into the sails.config.blueprints object.\nSOURCE: https://github.com/balderdashy/sails/blob/master/docs/concepts/Configuration/Configuration.md#2025-04-20_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n// config/foo.js\n// The object below will be merged into `sails.config.blueprints`:\nmodule.exports.blueprints = {\n  shortcuts: false\n};\n```\n\n----------------------------------------\n\nTITLE: Handling Fresh Data Requests in Sails.js\nDESCRIPTION: Example showing how to conditionally handle requests for fresh data using the req.fresh flag to determine if the client wants updated data from the database.\nSOURCE: https://github.com/balderdashy/sails/blob/master/docs/reference/req/req.fresh.md#2025-04-20_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nif (req.fresh) {\n  // The user-agent is asking for a more up-to-date version of the requested resource.\n  // Let's hit the database to get some stuff and send it back.\n}\n```\n\n----------------------------------------\n\nTITLE: Sending a primitive with `res.json()` in Sails.js\nDESCRIPTION: Demonstrates sending a primitive value (in this case, `leena.id`) as a JSON response using `res.json()`.  It first queries the database and then sends the `id` property of the found record.\nSOURCE: https://github.com/balderdashy/sails/blob/master/docs/reference/res/res.json.md#2025-04-20_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\n```javascript\nvar leena = await User.findOne({ firstName: 'Leena' });\nif (!leena) { return res.notFound(); }\nreturn res.json(leena.id);//¬´ you can send down primitives, like numbers\n```\n```\n\n----------------------------------------\n\nTITLE: Subscribing a Socket to a Room in Sails.js\nDESCRIPTION: This snippet demonstrates the basic usage of `sails.sockets.join()` method to subscribe a socket to a room. It can be called with or without a callback function.\nSOURCE: https://github.com/balderdashy/sails/blob/master/docs/reference/websockets/sails.sockets/sails.sockets.join.md#2025-04-20_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nsails.sockets.join(socket, roomName);\n```\n\nLANGUAGE: javascript\nCODE:\n```\nsails.sockets.join(socket, roomName, cb);\n```\n\n----------------------------------------\n\nTITLE: Using .toPromise() Method with Waterline Queries in JavaScript\nDESCRIPTION: Demonstrates how to use the .toPromise() method to execute a Waterline query instance and return a Promise. This method provides an alternative to the callback-based .exec() method and allows for promise-based control flow.\nSOURCE: https://github.com/balderdashy/sails/blob/master/docs/reference/waterline/queries/toPromise.md#2025-04-20_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n.toPromise();\n```\n\n----------------------------------------\n\nTITLE: Limiting Query Results in Sails.js - JavaScript\nDESCRIPTION: This snippet demonstrates how to use the .limit() method in a Sails.js query to retrieve a maximum number of records. It specifically shows fetching up to 10 users named Jake from the database. Sails.js and Waterline ORM must be set up in your project. The input is a query object specifying the search criteria, and the output is a JSON response containing the limited number of records. If a limit of 0 is set, an empty array is returned, and if the limit exceeds the available records, all matching records are returned.\nSOURCE: https://github.com/balderdashy/sails/blob/master/docs/reference/waterline/queries/limit.md#2025-04-20_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nvar jakes = await User.find({ name: 'Jake' }).limit(10);\n\nreturn res.json(jakes);\n```\n\n----------------------------------------\n\nTITLE: Setting Response Status Code in Sails.js\nDESCRIPTION: This snippet demonstrates how to use the `res.status()` method to set the HTTP status code of a response in Sails.js.  It sets the status code to 418 (I'm a teapot) and sends a message indicating this status.\nSOURCE: https://github.com/balderdashy/sails/blob/master/docs/reference/res/res.status.md#2025-04-20_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n```javascript\nres.status(418);\nres.send('I am a teapot');\n```\n```\n\n----------------------------------------\n\nTITLE: Executing a Waterline Query with Await and Error Handling\nDESCRIPTION: This snippet demonstrates how to execute a Waterline query using `await` and handle potential errors using a `try/catch` block. It shows how to identify and handle specific errors based on the `err.name` property.\nSOURCE: https://github.com/balderdashy/sails/blob/master/docs/reference/waterline/queries/queries.md#2025-04-20_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nvar zookeepersAtThisZoo;\ntry {\n  zookeepersAtThisZoo = await Zookeeper.find({\n    zoo: req.param('zoo')\n  }).limit(30);\n} catch (err) {\n  switch (err.name) {\n    case 'UsageError': return res.badRequest(err);\n    default: throw err;\n  }\n}\n\nreturn res.json(zookeepersAtThisZoo);\n```\n\n----------------------------------------\n\nTITLE: Usage of `res.badRequest()` in Sails.js\nDESCRIPTION: Demonstrates the basic usage of `res.badRequest()` with and without data.  It shows how to send a 400 response, optionally including a JSON payload with error details.\nSOURCE: https://github.com/balderdashy/sails/blob/master/docs/reference/res/res.badRequest.md#2025-04-20_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n\"return res.badRequest();\"\n```\n\nLANGUAGE: javascript\nCODE:\n```\n\"return res.badRequest(data);\"\n```\n\n----------------------------------------\n\nTITLE: Setting Configuration Options Using Command-Line Arguments in Sails.js\nDESCRIPTION: Examples of setting various configuration options using command-line arguments when starting a Sails.js application. This showcases how to set the port, custom values, enable/disable CSRF, and the limitations of passing complex data structures.\nSOURCE: https://github.com/balderdashy/sails/blob/master/docs/concepts/Configuration/Configuration.md#2025-04-20_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\n// Set the port to 1338\nsails lift --port=1338\n\n// Set a custom \"email\" value to \"foo@bar.com\":\nsails lift --custom.email='foo@bar.com'\n\n// Turn on CSRF support\nsails lift --security.csrf\n\n// Turn off CSRF support\nsails lift --no-security.csrf\n\n// This won't work; it'll just try to set the value to the string \"[1,2,3]\"\nsails lift --custom.array='[1,2,3]'\n```\n\n----------------------------------------\n\nTITLE: Configuring Sails.js Lifecycle for Testing\nDESCRIPTION: JavaScript code to set up the lifecycle hooks for Sails.js testing, including lifting and lowering the Sails app before and after tests.\nSOURCE: https://github.com/balderdashy/sails/blob/master/docs/concepts/Testing/Testing.md#2025-04-20_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nvar sails = require('sails');\n\n// Before running any tests...\nbefore(function(done) {\n\n  // Increase the Mocha timeout so that Sails has enough time to lift, even if you have a bunch of assets.\n  this.timeout(5000);\n\n  sails.lift({\n    // Your Sails app's configuration files will be loaded automatically,\n    // but you can also specify any other special overrides here for testing purposes.\n\n    // For example, we might want to skip the Grunt hook,\n    // and disable all logs except errors and warnings:\n    hooks: { grunt: false },\n    log: { level: 'warn' },\n\n  }, function(err) {\n    if (err) { return done(err); }\n\n    // here you can load fixtures, etc.\n    // (for example, you might want to create some records in the database)\n\n    return done();\n  });\n});\n\n// After all tests have finished...\nafter(function(done) {\n\n  // here you can clear fixtures, etc.\n  // (e.g. you might want to destroy the records you created above)\n\n  sails.lower(done);\n\n});\n```\n\n----------------------------------------\n\nTITLE: Using 'sort' option in JavaScript\nDESCRIPTION: Demonstrates various ways to use the 'sort' option for ordering query results.\nSOURCE: https://github.com/balderdashy/sails/blob/master/docs/concepts/ORM/Querylanguage.md#2025-04-20_snippet_12\n\nLANGUAGE: javascript\nCODE:\n```\n// Sort by name in ascending order\nModel.find({ where: { name: 'foo' }, sort: 'name' });\n\n// Sort by name in descending order\nModel.find({ where: { name: 'foo' }, sort: 'name DESC' });\n\n// Sort by name in ascending order\nModel.find({ where: { name: 'foo' }, sort: 'name ASC' });\n\n// Sort by object notation\nModel.find({ where: { name: 'foo' }, sort: [{ 'name': 'ASC' }] });\n\n// Sort by multiple attributes\nModel.find({ where: { name: 'foo' }, sort: [{ name:  'ASC'}, { age: 'DESC' }] });\n```\n\n----------------------------------------\n\nTITLE: Installing Lusca Package\nDESCRIPTION: Command to install the lusca security middleware package as a dependency in a Sails.js application.\nSOURCE: https://github.com/balderdashy/sails/blob/master/docs/concepts/Security/Clickjacking.md#2025-04-20_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\n# In your sails app\nnpm install lusca --save\n```\n\n----------------------------------------\n\nTITLE: Replace Blueprint Response Example\nDESCRIPTION: Example JSON response showing the updated parent record with its new collection members.\nSOURCE: https://github.com/balderdashy/sails/blob/master/docs/reference/blueprint-api/Replace.md#2025-04-20_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"id\": 7,\n  \"name\": \"Dolly\",\n  \"createdAt\": 1485462079725,\n  \"updatedAt\": 1485476060873,\n  \"involvedInPurchases\": [\n    {\n      \"amount\": 10000,\n      \"createdAt\": 1485551132315,\n      \"updatedAt\": 1486355134239,\n      \"id\": 47,\n      \"cashier\": 7\n    },\n    {\n      \"amount\": 5667,\n      \"createdAt\": 1483551158349,\n      \"updatedAt\": 1485355134284,\n      \"id\": 65,\n      \"cashier\": 7\n    }\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Checking Socket Request with req.socket\nDESCRIPTION: Demonstrates how to check if a request originated from a Socket.IO client and access socket-related methods. Provides conditional handling for socket and non-socket requests.\nSOURCE: https://github.com/balderdashy/sails/blob/master/docs/reference/req/req.socket.md#2025-04-20_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nif (req.isSocket) {\n  // Low-level Socket.io methods and properties accessible on req.socket.\n  // ...\n}\nelse {\n  // This is not a request from a Socket.io client, so req.socket\n  // may or may not exist.  If this is an HTTP request, req.socket is actually\n  // the underlying TCP socket.\n  // ...\n}\n```\n\n----------------------------------------\n\nTITLE: Querying MongoDB with .native() in Sails\nDESCRIPTION: This code snippet demonstrates how to use the `.native()` method to access the underlying MongoDB collection for a Sails model (e.g., `Pet`). It executes a `find` query with a projection and converts the results to an array. The callback function handles potential errors and sends the results in the response.\nSOURCE: https://github.com/balderdashy/sails/blob/master/docs/reference/waterline/models/native.md#2025-04-20_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nPet.native(function(err, collection) {\n  if (err) return res.serverError(err);\n\n  collection.find({}, {\n    name: true\n  }).toArray(function (err, results) {\n    if (err) return res.serverError(err);\n    return res.ok(results);\n  });\n});\n```\n\n----------------------------------------\n\nTITLE: Defining Many-to-Many Association in Pet Model (JavaScript)\nDESCRIPTION: This snippet demonstrates how to define the reciprocal many-to-many association in a Pet model, where a pet can have many owners. It uses the 'collection' attribute with a 'via' key to establish the relationship.\nSOURCE: https://github.com/balderdashy/sails/blob/master/docs/concepts/ORM/Associations/ManytoMany.md#2025-04-20_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\n// myApp/api/models/Pet.js\n// A pet may have many owners\nmodule.exports = {\n  attributes: {\n    breed: {\n      type: 'string'\n    },\n    type: {\n      type: 'string'\n    },\n    name: {\n      type: 'string'\n    },\n\n    // Add a reference to User\n    owners: {\n      collection: 'user',\n      via: 'pets'\n    }\n  }\n};\n```\n\n----------------------------------------\n\nTITLE: Sending Socket GET Request in JavaScript\nDESCRIPTION: Demonstrates how to send a socket GET request to a Sails server using Socket.IO. The method takes a URL, optional data, and a callback function to handle the response.\nSOURCE: https://github.com/balderdashy/sails/blob/master/docs/reference/websockets/sails.io.js/socket.get.md#2025-04-20_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nio.socket.get(url, data, function (resData, jwres){\n  // ...\n});\n```\n\n----------------------------------------\n\nTITLE: Domain-relative redirect with res.redirect()\nDESCRIPTION: This snippet shows how to perform a domain-relative redirect using the res.redirect() method, allowing redirection to paths relative to the current domain.\nSOURCE: https://github.com/balderdashy/sails/blob/master/docs/reference/res/res.redirect.md#2025-04-20_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nreturn res.redirect('/checkout');\n```\n\n----------------------------------------\n\nTITLE: Basic Usage Pattern for .where() Method in Sails.js\nDESCRIPTION: Shows the basic syntax pattern for using the .where() method in Waterline queries.\nSOURCE: https://github.com/balderdashy/sails/blob/master/docs/reference/waterline/queries/where.md#2025-04-20_snippet_0\n\nLANGUAGE: usage\nCODE:\n```\n.where(whereClause)\n```\n\n----------------------------------------\n\nTITLE: Setting Cascade Delete Property in Sails.js Model\nDESCRIPTION: Configuration for enabling cascade deletion behavior on model destroy operations.\nSOURCE: https://github.com/balderdashy/sails/blob/master/docs/concepts/ORM/model-settings.md#2025-04-20_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\ncascadeOnDestroy: true\n```\n\n----------------------------------------\n\nTITLE: Hook Environment Variable Toggle in Sails.js\nDESCRIPTION: This code enhancement allows Sails.js hooks to be turned off by setting their corresponding environment variable to the string \"false\".  This provides a convenient way to disable hooks in different environments without modifying the application's configuration files. It can be useful for selectively disabling features in production or testing environments.\nSOURCE: https://github.com/balderdashy/sails/blob/master/CHANGELOG.md#2025-04-20_snippet_11\n\nLANGUAGE: javascript\nCODE:\n```\n\t* [ENHANCEMENT] Allow hooks to be turned off by setting their environment var to the string \"false\" [3618](https://github.com/balderdashy/sails/issues/3618)\n```\n\n----------------------------------------\n\nTITLE: Subscribing to User Model Updates in Sails.js\nDESCRIPTION: This snippet demonstrates how to connect a client-side socket to the server, subscribe to the 'user' event, and request /user to subscribe to current and future User model instances. It uses the sails.io.js library for WebSocket communication.\nSOURCE: https://github.com/balderdashy/sails/blob/master/docs/concepts/Realtime/Realtime.md#2025-04-20_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<script type=\"text/javascript\" src=\"/js/dependencies/sails.io.js\"></script>\n<script type=\"text/javascript\">\nio.socket.on('user', function gotHelloMessage (data) {\n  console.log('User alert!', data);\n});\nio.socket.get('/user', function gotResponse(body, response) {\n  console.log('Current users: ', body);\n})\n</script>\n```\n\n----------------------------------------\n\nTITLE: Using Nested Keys in Locale Files (JSON)\nDESCRIPTION: Example showing how to represent nested translation strings using dot notation in keys, useful for organizing translations by feature or page.\nSOURCE: https://github.com/balderdashy/sails/blob/master/docs/concepts/Internationalization/Locales.md#2025-04-20_snippet_4\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"editProfile.heading\": \"Edit your profile\",\n  \"editProfile.username.label\": \"Username\",\n  \"editProfile.username.description\": \"Choose a new unique username.\",\n  \"editProfile.username.placeholder\": \"callmethep4rtysquid\"\n}\n```\n\n----------------------------------------\n\nTITLE: Pet Model Definition\nDESCRIPTION: Waterline model definition for Pet entity with breed, type, name attributes and a reference to User model\nSOURCE: https://github.com/balderdashy/sails/blob/master/docs/concepts/ORM/standalone-usage.md#2025-04-20_snippet_8\n\nLANGUAGE: javascript\nCODE:\n```\nmodule.exports = {\n\n  identity: 'pet',\n  datastore: 'default',\n\n  attributes: {\n    breed: 'string',\n    type: 'string',\n    name: 'string',\n\n    // Add a reference to User\n    owner: {\n      model: 'user'\n    }\n  }\n};\n```\n\n----------------------------------------\n\nTITLE: MySQL Configuration with Extended Timeout\nDESCRIPTION: Configuration example showing how to handle handshake inactivity timeout issues by setting connectTimeout.\nSOURCE: https://github.com/balderdashy/sails/blob/master/docs/concepts/extending-sails/Adapters/adapterList.md#2025-04-20_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nadapter: 'sails-mysql',\nurl: 'mysql://user:password@host:port/database',\nconnectTimeout: 20000\n```\n\n----------------------------------------\n\nTITLE: Archiving Records in Waterline\nDESCRIPTION: This code snippet demonstrates how to archive records in a Waterline model using the `.archive()` method. It finds all `Pet` records where `lastActiveAt` is older than a year and archives them, effectively soft-deleting them from the `Pet` model.\nSOURCE: https://github.com/balderdashy/sails/blob/master/docs/reference/waterline/models/archive.md#2025-04-20_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nawait Pet.archive({ lastActiveAt: { '<': Date.now()-1000*60*60*24*365 } });\n```\n\n----------------------------------------\n\nTITLE: Defining Custom Routes in Sails.js\nDESCRIPTION: This snippet demonstrates how to define custom routes in a Sails.js application using the config/routes.js file. It shows various route types including GET and POST requests mapped to views and actions.\nSOURCE: https://github.com/balderdashy/sails/blob/master/docs/concepts/Routes/Routes.md#2025-04-20_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n// config/routes.js\nmodule.exports.routes = {\n  'GET /signup': { view: 'conversion/signup' },\n  'POST /signup': { action: 'entrance/signup' },\n  'GET /login': { view: 'portal/login' },\n  'POST /login': { action: 'entrance/login' },\n  '/logout': { action: 'account/logout' },\n  'GET /me': { action: 'account/profile' }\n}\n```\n\n----------------------------------------\n\nTITLE: Checking if a request is AJAX using `req.xhr` in JavaScript\nDESCRIPTION: This JavaScript code snippet demonstrates how to use the `req.xhr` property to check if a request is an AJAX request.  If `req.xhr` is true, it indicates that the request was made via AJAX. The provided example uses a simple if statement to conditionally execute code based on the value of `req.xhr`.\nSOURCE: https://github.com/balderdashy/sails/blob/master/docs/reference/req/req.xhr.md#2025-04-20_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nif (req.xhr) {\n  // Yup, it's AJAX alright.\n}\n```\n\n----------------------------------------\n\nTITLE: Embedding sails.getUrlFor() in EJS Views\nDESCRIPTION: Demonstrates how to utilize the sails.getUrlFor function within an EJS view to dynamically generate links to login and signup pages based on the route target strings provided to the function. The function is executed within embedded JavaScript tags to retrieve corresponding URLs.\nSOURCE: https://github.com/balderdashy/sails/blob/master/docs/reference/application/sails.getUrlFor.md#2025-04-20_snippet_1\n\nLANGUAGE: ejs\nCODE:\n```\n<a href=\"<%= sails.getUrlFor('entrance/view-login') %>\">Login</a>\n<a href=\"<%= sails.getUrlFor('entrance/view-signup') %>\">Signup</a>\n```\n\nLANGUAGE: ejs\nCODE:\n```\n<a href=\"<%= sails.getUrlFor('PageController.login') %>\">Login</a>\n<a href=\"<%= sails.getUrlFor('PageController.signup') %>\">Signup</a>\n```\n\n----------------------------------------\n\nTITLE: Basic Sails.js Route Handler\nDESCRIPTION: A simple async function that handles GET requests to '/hello' route and sends a response.\nSOURCE: https://github.com/balderdashy/sails/blob/master/docs/concepts/ActionsAndControllers/ActionsAndControllers.md#2025-04-20_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nasync function (req, res) {\n  return res.send('Hi there!');\n}\n```\n\n----------------------------------------\n\nTITLE: Using 'contains' modifier in JavaScript\nDESCRIPTION: Shows how to use the 'contains' modifier to perform a partial match query on a field.\nSOURCE: https://github.com/balderdashy/sails/blob/master/docs/concepts/ORM/Querylanguage.md#2025-04-20_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nvar peoplePossiblyNamedLyra = await Model.find({\n  name : {\n    'contains' : 'yra'\n  }\n});\n```\n\n----------------------------------------\n\nTITLE: Basic Route Configuration in Sails.js\nDESCRIPTION: Demonstrates the basic structure of a route configuration with address and target components.\nSOURCE: https://github.com/balderdashy/sails/blob/master/docs/concepts/Routes/RouteTargetSyntax.md#2025-04-20_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n'GET /foo/bar': 'UserController.subscribe'\n```\n\n----------------------------------------\n\nTITLE: Writing Basic Tests for a Sails.js Hook\nDESCRIPTION: JavaScript code for a basic test suite for a Sails.js hook. It includes setup and teardown procedures for lifting and lowering a Sails instance, and a simple test to ensure Sails doesn't crash when the hook is loaded.\nSOURCE: https://github.com/balderdashy/sails/blob/master/docs/concepts/extending-sails/Hooks/installablehooks.md#2025-04-20_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nvar Sails = require('sails').Sails;\n\ndescribe('Basic tests ::', function() {\n\n    // Var to hold a running sails app instance\n    var sails;\n\n    // Before running any tests, attempt to lift Sails\n    before(function (done) {\n\n        // Hook will timeout in 10 seconds\n        this.timeout(11000);\n\n        // Attempt to lift sails\n        Sails().lift({\n          hooks: {\n            // Load the hook\n            \"your-hook-name\": require('../'),\n            // Skip grunt (unless your hook uses it)\n            \"grunt\": false\n          },\n          log: {level: \"error\"}\n        },function (err, _sails) {\n          if (err) return done(err);\n          sails = _sails;\n          return done();\n        });\n    });\n\n    // After tests are complete, lower Sails\n    after(function (done) {\n\n        // Lower Sails (if it successfully lifted)\n        if (sails) {\n            return sails.lower(done);\n        }\n        // Otherwise just return\n        return done();\n    });\n\n    // Test that Sails can lift with the hook in place\n    it ('sails does not crash', function() {\n        return true;\n    });\n\n});\n```\n\n----------------------------------------\n\nTITLE: Implementing Pet Model with Through Association\nDESCRIPTION: Defines a Pet model with a many-to-many relationship to users through a PetUser junction model. The model includes pet attributes and an owners collection that uses the through association.\nSOURCE: https://github.com/balderdashy/sails/blob/master/docs/concepts/ORM/Associations/ThroughAssociations.md#2025-04-20_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\n// myApp/api/models/Pet.js\nmodule.exports = {\n  attributes: {\n    name: {\n      type: 'string'\n    },\n    color: {\n      type: 'string'\n    },\n    owners:{\n      collection: 'user',\n      via: 'pet',\n      through: 'petuser'\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Connecting to a Database Using the Generic Driver in Sails.js\nDESCRIPTION: This code snippet demonstrates how to access the generic datastore driver in Sails.js to create a dynamic connection manager and handle database connections. It includes error handling for connection issues and manages the lifecycle of the connection manager.\nSOURCE: https://github.com/balderdashy/sails/blob/master/docs/reference/waterline/datastores/driver.md#2025-04-20_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n// Get the generic, stateless driver for our database (e.g. MySQL).\nvar Driver = sails.getDatastore().driver;\n\n// Create our own dynamic connection manager (e.g. connection pool)\nvar manager = (\n  await Driver.createManager({ connectionString: req.param('connectionUrl') })\n).manager;\n\nvar db;\ntry {\n  db = (\n    await Driver.getConnection({ manager: managerReport.manager })\n  ).connection;\n} catch (err) {\n  await Driver.destroyManager({ manager: managerReport.manager });\n  throw err;\n}\n\n// - - - - - - - - - - - - - - - - - - - - - - - - - - - -\n// Do some stuff here...\n// e.g.\n//     await Driver.sendNativeQuery({\n//       connection: db,\n//       nativeQuery: '...'\n//     });\n// - - - - - - - - - - - - - - - - - - - - - - - - - - - -\n\n// Finally, before we continue, tear down the dynamic connection manager.\n// (this also takes care of releasing the active connection we acquired above)\nawait Driver.destroyManager({ manager: managerReport.manager });\n\nreturn res.ok();\n```\n\n----------------------------------------\n\nTITLE: Implementing One-to-one Association with Manual Synchronization in Sails.js\nDESCRIPTION: This code shows a one-to-one relationship between Pet and User models using model attributes on both sides. This approach requires manual synchronization when updating either side of the relationship, but allows bidirectional querying using populate().\nSOURCE: https://github.com/balderdashy/sails/blob/master/docs/concepts/ORM/Associations/OnetoOne.md#2025-04-20_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\n// myApp/api/models/Pet.js\nmodule.exports = {\n  attributes: {\n    name: {\n      type: 'string'\n    },\n    color: {\n      type: 'string'\n    },\n    owner:{\n      model:'user'\n    }\n  }\n}\n```\n\nLANGUAGE: javascript\nCODE:\n```\n// myApp/api/models/User.js\nmodule.exports = {\n  attributes: {\n    name: {\n      type: 'string'\n    },\n    age: {\n      type: 'number'\n    },\n    pet: {\n      model:'pet'\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Lifting Sails.js App with Configuration Override\nDESCRIPTION: Demonstrates how to lift a Sails application programmatically using `sailsApp.lift()` with a configuration override. It initializes a new Sails instance, provides a configuration object to override default settings (logging level), and includes a callback function to handle potential errors or confirm successful lifting.\nSOURCE: https://github.com/balderdashy/sails/blob/master/docs/reference/application/advanced-usage/sails.lift.md#2025-04-20_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nvar Sails = require('sails').constructor;\nvar sailsApp = new Sails();\n\nsailsApp.lift({\n  log: { level: 'warn' }\n}, function (err) {\n  if (err) {\n    console.log('Error occurred lifting Sails app:', err);\n    return;\n  }\n\n  // --‚Ä¢\n  console.log('Sails app lifted successfully!');\n\n});\n```\n\n----------------------------------------\n\nTITLE: Client-side Socket Message Handling in Sails.js\nDESCRIPTION: Demonstrates how to set up a client-side event listener to handle messages broadcasted from the server using the default 'message' event.\nSOURCE: https://github.com/balderdashy/sails/blob/master/docs/reference/websockets/sails.sockets/sails.sockets.broadcast.md#2025-04-20_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nio.socket.on('message', function (data){\n  console.log(data.greeting);\n});\n```\n\n----------------------------------------\n\nTITLE: Returning 200 OK Response in Sails.js\nDESCRIPTION: This snippet demonstrates the usage of the res.ok() method to send a 200 OK response to the client. It can optionally include data that will be sent as JSON. The method provides a customizable response option, defaulting to sending the string 'OK' if no data is provided. This method must typically be the last line of code executed for a given request.\nSOURCE: https://github.com/balderdashy/sails/blob/master/docs/reference/res/res.ok.md#2025-04-20_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nreturn res.ok();\n```\n\n----------------------------------------\n\nTITLE: Find records using jQuery\nDESCRIPTION: This JavaScript code snippet demonstrates how to use jQuery's `$.get` method to make a GET request to the `/purchase` endpoint with sorting parameters.  The response data, containing the list of purchases, is then logged to the console.\nSOURCE: https://github.com/balderdashy/sails/blob/master/docs/reference/blueprint-api/Find.md#2025-04-20_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\n$.get('/purchase?sort=createdAt DESC', function (purchases) {\n  console.log(purchases);\n});\n```\n\n----------------------------------------\n\nTITLE: Implementing Express Middleware as Policies in Sails.js\nDESCRIPTION: This example shows how to use Express middleware as policies in a Sails.js application. It demonstrates setting up HTTP Basic Authentication for specific controller actions using the http-auth package.\nSOURCE: https://github.com/balderdashy/sails/blob/master/docs/concepts/Middleware/Middleware.md#2025-04-20_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nvar auth = require('http-auth');\nvar basic = auth.basic({\n  realm: 'admin area'\n}, function (username, password, onwards) {\n  return onwards(username === 'Tina' && password === 'Bullock');\n});\n\n//...\nmodule.exports.policies = {\n  '*': [true],\n\n  // Prevent end users from doing CRUD operations on products reserved for admins\n  // (uses HTTP basic auth)\n  'product/*': [auth.connect(basic)],\n\n  // Everyone can view product pages\n  'product/show': [true]\n}\n```\n\n----------------------------------------\n\nTITLE: Adding Foreign Record with Angular - Sails.js - JavaScript\nDESCRIPTION: This snippet uses Angular's $http service to send a PUT request for adding a foreign record. The resulting data is logged to the console, enabling easy debugging and validation of the added record.\nSOURCE: https://github.com/balderdashy/sails/blob/master/docs/reference/blueprint-api/Add.md#2025-04-20_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\n$http.put('/employee/7/involvedInPurchases/47')\\n.then(function (purchases) {\\n  console.log(purchases);\\n});\n```\n\n----------------------------------------\n\nTITLE: Example: Replacing Pets for a User\nDESCRIPTION: Replaces all pets for user 3 with specific pet records 99 and 98. This operation detaches existing pets and attaches the new specified pets.\nSOURCE: https://github.com/balderdashy/sails/blob/master/docs/reference/waterline/models/replaceCollection.md#2025-04-20_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nawait User.replaceCollection(3, 'pets')\n.members([99,98]);\n```\n\n----------------------------------------\n\nTITLE: Error Handling in Sails.js Helper Calls (JavaScript)\nDESCRIPTION: Demonstrates error handling when calling a Sails.js helper. This example uses .intercept() to handle a custom 'emailAddressInUse' exit by mapping it to a 'badRequest' response.\nSOURCE: https://github.com/balderdashy/sails/blob/master/docs/concepts/Helpers/Helpers.md#2025-04-20_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nconst newUserId = sails.helpers.inviteNewUser('bubba@hawtmail.com')\n.intercept('emailAddressInUse', 'badRequest');\n```\n\n----------------------------------------\n\nTITLE: Retrieving User Records Without Decryption in Sails.js\nDESCRIPTION: This snippet showcases a typical query that retrieves user records without invoking the `.decrypt()` method. As a result, the sensitive attribute 'ssn' remains encrypted. The output presents a base64 string representing the encrypted social security number, highlighting the necessity of `.decrypt()` for accessing secure information.\nSOURCE: https://github.com/balderdashy/sails/blob/master/docs/reference/waterline/queries/decrypt.md#2025-04-20_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nawait User.find({fullName: 'Finn Mertens'});\n// =>\n// [ { id: 4, fullName: 'Finn Mertens', ssn: 'YWVzLTI1Ni1nY20kJGRlZmF1bHQ=$F4Du3CAHtmUNk1pn$hMBezK3lwJ2BhOjZ$6as+eXnJDfBS54XVJgmPsg' } ]\n```\n\n----------------------------------------\n\nTITLE: Handling Error with res.negotiate() in Sails.js\nDESCRIPTION: Demonstrates using res.negotiate() to handle potential errors when updating a database record, automatically selecting the appropriate error response based on the error's status\nSOURCE: https://github.com/balderdashy/sails/blob/master/docs/reference/res/res.negotiate.md#2025-04-20_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nPet.update({name: 'fido'})\n  .set({birthday: new Date('01/01/2010')})\n  .exec(function (err, fido) {\n    if (err) return res.negotiate(err);\n    return res.ok(fido);\n  });\n```\n\nLANGUAGE: javascript\nCODE:\n```\nreturn res.negotiate(err);\n```\n\n----------------------------------------\n\nTITLE: Configuring SSL for Production in Sails.js with JavaScript\nDESCRIPTION: This code snippet demonstrates how to configure SSL/TLS settings in a Sails.js application to enable HTTPS. Dependencies include the 'fs' and 'path' modules, which are used to read SSL certificate and key files from the file system. The configuration is typically placed in a specific environment file, such as 'config/env/production.js'. Input parameters include paths to SSL certificate files, and the output is a secure HTTPS server setup. Ensure the proper placement of certificate files and handle the potential performance implications when scaling with load balancers.\nSOURCE: https://github.com/balderdashy/sails/blob/master/docs/reference/sails.config/miscellaneous.md#2025-04-20_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\n// Assuming this is in `config/env/production.js`, and your folder of SSL cert/key files is in `config/ssl/`:\n\nssl: {\n  ca: require('fs').readFileSync(require('path').resolve(__dirname,'../ssl/my-gd-bundle.crt')),\n  key: require('fs').readFileSync(require('path').resolve(__dirname,'../ssl/my-ssl.key')),\n  cert: require('fs').readFileSync(require('path').resolve(__dirname,'../ssl/my-ssl.crt'))\n}\n```\n\n----------------------------------------\n\nTITLE: Testing Sails.js Routes with sails.request()\nDESCRIPTION: This code snippet demonstrates how to use the sails.request() method to test a Sails.js route without lifting the server to a port. It includes setup for Mocha tests, loading the Sails.js app, and making a virtual request to test the response.\nSOURCE: https://github.com/balderdashy/sails/blob/master/docs/version-notes/0.11.x/MigrationGuide0.11.md#2025-04-20_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nvar assert = require('assert');\nvar Sails = require('sails').Sails;\n\nbefore(function beforeRunningAnyTests (done){\n\n  // Load the app (no need to \"lift\" to a port)\n  sails.load({\n    log: {\n      level: 'warn'\n    },\n    hooks: {\n      grunt: false\n    }\n  }, function whenAppIsReady(err){\n    if (err) return done(err);\n\n    // At this point, the `sails` global is exposed, although we\n    // could have disabled it above with our config overrides to\n    // `sails.load()`. In fact, you can actually use this technique\n    // to set any configuration setting you like.\n    return done();\n  });\n});\n\nafter(function afterTestsFinish (done) {\n  sails.lower(done);\n});\n\ndescribe('GET /hotpockets', function (){\n\n  it('should respond with a 200 status code', function (done){\n\n    sails.request({\n      method: 'get',\n      url: '/hotpockets',\n      params: {\n        limit: 10,\n        sort: 'price ASC'\n      }\n    }, function (err, clientRes, body) {\n      if (err) return done(err);\n\n      assert.equal(clientRes.statusCode, 200);\n      return done();\n    });\n\n  });\n});\n```\n\n----------------------------------------\n\nTITLE: Setting Single Response Header in Sails.js\nDESCRIPTION: This code snippet demonstrates how to set a single response header using `res.set()` in Sails.js. It sets the `Content-Type` header to `text/plain`. This is useful for specifying the type of content being sent in the response.\nSOURCE: https://github.com/balderdashy/sails/blob/master/docs/reference/res/res.set.md#2025-04-20_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nres.set('Content-Type', 'text/plain');\n```\n\n----------------------------------------\n\nTITLE: Configuring X-FRAME-OPTIONS Middleware\nDESCRIPTION: Configuration code for implementing X-FRAME-OPTIONS header using lusca middleware in the Sails.js http.js config file. Sets the SAMEORIGIN policy and includes the middleware in the processing order.\nSOURCE: https://github.com/balderdashy/sails/blob/master/docs/concepts/Security/Clickjacking.md#2025-04-20_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\n  // ...\n  // maxAge ==> Number of seconds strict transport security will stay in effect.\n  xframe: require('lusca').xframe('SAMEORIGIN'),\n  // ...\n  order: [\n    // ...\n    'xframe'\n    // ...\n  ]\n```\n\n----------------------------------------\n\nTITLE: Basic Helper Function Usage in Sails.js\nDESCRIPTION: Demonstrates how to call a helper function in Sails.js with default parameters. This is the simplest way to use a helper from within an action or other app code.\nSOURCE: https://github.com/balderdashy/sails/blob/master/docs/concepts/Helpers/ExampleHelper.md#2025-04-20_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nvar users = await sails.helpers.getRecentUsers();\n```\n\n----------------------------------------\n\nTITLE: Server-side Broadcasting in Sails.js\nDESCRIPTION: Shows how to use sails.sockets.broadcast() in a server-side action, service, or script to send a greeting message to sockets in the 'artsAndEntertainment' room.\nSOURCE: https://github.com/balderdashy/sails/blob/master/docs/reference/websockets/sails.sockets/sails.sockets.broadcast.md#2025-04-20_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nsails.sockets.broadcast('artsAndEntertainment', { greeting: 'Hola!' });\n```\n\n----------------------------------------\n\nTITLE: Lowering Sails App Programmatically in JavaScript\nDESCRIPTION: Shows how to stop a Sails app programmatically using the .lower() method, including error handling.\nSOURCE: https://github.com/balderdashy/sails/blob/master/docs/concepts/Programmatic Usage/Programmatic Usage.md#2025-04-20_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nmySailsApp.lower(function(err) {\n  if (err) {\n     console.log('An error occured when attempting to stop app:', err);\n     return;\n  }\n\n  // --‚Ä¢\n  console.log('Lowered app successfully.');\n\n});\n```\n\n----------------------------------------\n\nTITLE: Configuring Request Timeout in Sails.js\nDESCRIPTION: Set a custom timeout duration for HTTP requests, preventing long-running requests from consuming server resources. Allows specifying timeout in milliseconds for specific route handlers or globally.\nSOURCE: https://github.com/balderdashy/sails/blob/master/docs/reference/req/req.setTimeout.md#2025-04-20_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nreq.setTimeout(numMilliseconds);\n```\n\nLANGUAGE: javascript\nCODE:\n```\nreq.setTimeout(240000);\n```\n\n----------------------------------------\n\nTITLE: Exposing View Locals to Client-side JavaScript\nDESCRIPTION: Shows how to safely expose server-side view locals to client-side JavaScript using the exposeLocalsToBrowser partial. Includes example of the exposed data structure with proper escaping.\nSOURCE: https://github.com/balderdashy/sails/blob/master/docs/concepts/Security/XSS.md#2025-04-20_snippet_1\n\nLANGUAGE: html\nCODE:\n```\n<%- exposeLocalsToBrowser(); %>\n\n<script>\nconsole.log(window.SAILS_LOCALS);\n// {\n//   me: {\n//     username: 'eleven',\n//     memberSince: '1982-08-01T05:00:00.000Z'\n//   },\n//   owner: {\n//     username: 'joyce',\n//     memberSince: '1987-11-03T05:00:00.000Z'\n//   },\n//   projects: [\n//     {\n//       slug: 'my-neat-stuff-n-things',\n//       friendlyName: 'My neat stuff & things',\n//       description: 'Yet another project.'\n//     },\n//     {\n//       slug: 'kind-of-neat-stuff-but-not-that-great',\n//       friendlyName: 'Kind of neat stuff, but not that great...',\n//       description: 'I am so sick and tired of these project. <script>alert(\\'attack\\');</script>'\n//     }\n//   ],\n//   _csrf: 'oon95Uac-wKfWQKC5pHx1rP3HsiN9tjqGMyE'\n// }\n</script>\n```\n\n----------------------------------------\n\nTITLE: Configuring Data Encryption Keys in Sails.js\nDESCRIPTION: Example showing how to configure data encryption keys with rotation using yearly keys and a default key.\nSOURCE: https://github.com/balderdashy/sails/blob/master/docs/concepts/ORM/model-settings.md#2025-04-20_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\ndataEncryptionKeys: {\n  default: 'DZ7MslaooGub3pS/0O734yeyPTAeZtd0Lrgeswwlt0s=',\n  '2028': 'C5QAkA46HD9pK0m7293V2CzEVlJeSUXgwmxBAQVj+xU='\n}\n```\n\nLANGUAGE: javascript\nCODE:\n```\ndataEncryptionKeys: {\n  default: 'tVdQbq2JptoPp4oXGT94kKqF72iV0VKY/cnp7SjL7Ik=',\n  '2029': 'DZ7MslaooGub3pS/0O734yeyPTAeZtd0Lrgeswwlt0s=',\n  '2028': 'C5QAkA46HD9pK0m7293V2CzEVlJeSUXgwmxBAQVj+xU='\n}\n```\n\n----------------------------------------\n\nTITLE: Environment Variable Configuration Example for Sails.js\nDESCRIPTION: Example showing how to configure Sails.js using environment variables with the sails_ prefix and double underscores for dots\nSOURCE: https://github.com/balderdashy/sails/blob/master/docs/concepts/Configuration/Configuration.md#2025-04-20_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\nsails_port=1492 sails lift\n```\n\n----------------------------------------\n\nTITLE: JSON Type Star Rating with Validation in Sails.js\nDESCRIPTION: Alternative approach using JSON type with number validation for star rating attribute.\nSOURCE: https://github.com/balderdashy/sails/blob/master/docs/concepts/ORM/Validations.md#2025-04-20_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nstarRating: {\n  type: 'json',\n  isNumber: true,\n  min: 1,\n  max: 5,\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Cookie Options: domain, path, secure, and expires\nDESCRIPTION: This example showcases setting various cookie options. The first `res.cookie` call sets the domain to '.example.com', the path to '/admin', and the secure flag to `true`, indicating that the cookie should only be sent over HTTPS. The second `res.cookie` call sets the `rememberme` cookie with an expiration date and the `httpOnly` flag.\nSOURCE: https://github.com/balderdashy/sails/blob/master/docs/reference/res/res.cookie.md#2025-04-20_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nres.cookie('name', 'tobi', {\n  domain: '.example.com',\n  path: '/admin',\n  secure: true\n});\n\nres.cookie('rememberme', '1', {\n  expires: new Date(Date.now() + 900000),\n  httpOnly: true\n});\n```\n\n----------------------------------------\n\nTITLE: Accessing Locale Strings in EJS Templates (Sails.js)\nDESCRIPTION: Example showing how to use the __() and i18n() functions in EJS templates to access translation strings. Demonstrates string interpolation with the %s placeholder.\nSOURCE: https://github.com/balderdashy/sails/blob/master/docs/concepts/Internationalization/Locales.md#2025-04-20_snippet_1\n\nLANGUAGE: ejs\nCODE:\n```\n<h1> <%= __('Welcome to PencilPals!') %> </h1>\n<h2> <%= i18n('Hello %s, how are you today?', 'Pencil Maven') %> </h2>\n<p> <%= i18n('That\\'s right-- you can use either i18n() or __()') %> </p>\n```\n\n----------------------------------------\n\nTITLE: Handling Duplicate Email Errors in Sails.js Using .tolerate()\nDESCRIPTION: Example of using .tolerate() to catch a unique constraint violation error when creating a contact record. If the email already exists, the code updates the existing contact instead of throwing an error.\nSOURCE: https://github.com/balderdashy/sails/blob/master/docs/reference/waterline/queries/tolerate.md#2025-04-20_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nlet newOrExistingContact = await Contact.create({\n  emailAddress,\n  fullName\n})\n.fetch()\n.tolerate('E_UNIQUE');\n\nif(!newOrExistingContact) {\n  newOrExistingContact = await Contact.updateOne({ emailAddress })\n  .set({ fullName })\n  .fetch();\n}\n```\n\n----------------------------------------\n\nTITLE: Setting a Signed Cookie in Express.js\nDESCRIPTION: This snippet demonstrates how to set a signed cookie named 'name' with a value of 'tobi'. The `signed` option, set to `true`, indicates that the cookie's value should be signed using a secret configured in `express.cookieParser(secret)`. This helps prevent tampering with the cookie's value.\nSOURCE: https://github.com/balderdashy/sails/blob/master/docs/reference/res/res.cookie.md#2025-04-20_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nres.cookie('name', 'tobi', { signed: true });\n```\n\n----------------------------------------\n\nTITLE: addToCollection() Usage Syntax in Waterline ORM\nDESCRIPTION: Illustrates the general syntax for using the `addToCollection()` method in Waterline ORM. It specifies the `parentId`, `association`, and `childIds` as parameters.\nSOURCE: https://github.com/balderdashy/sails/blob/master/docs/reference/waterline/models/addToCollection.md#2025-04-20_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nawait Something.addToCollection(parentId, association)\n.members(childIds);\n```\n\n----------------------------------------\n\nTITLE: Accessing Request Object in Sails.js Helper (JavaScript)\nDESCRIPTION: Shows how to define an input in a Sails.js helper to accept the request object (req) as a parameter, allowing access to request data within the helper.\nSOURCE: https://github.com/balderdashy/sails/blob/master/docs/concepts/Helpers/Helpers.md#2025-04-20_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\ninputs: {\n\n  req: {\n    type: 'ref',\n    description: 'The current incoming request (req).',\n    required: true\n  }\n\n}\n```\n\n----------------------------------------\n\nTITLE: Updating Records with Fetch in Sails v1.0 (JavaScript)\nDESCRIPTION: Example of using the new .fetch() method to retrieve updated records when performing an update operation in Sails v1.0.\nSOURCE: https://github.com/balderdashy/sails/blob/master/docs/upgrading/To1.0.md#2025-04-20_snippet_12\n\nLANGUAGE: javascript\nCODE:\n```\nArticle.update({\n  category: 'health-and-wellness',\n  status: 'draft'\n})\n.set({\n  status: 'live'\n})\n.fetch()\n.exec(function(err, updatedRecords){\n  //...\n});\n```\n\n----------------------------------------\n\nTITLE: Defining Cross-Datastore Many-to-Many Association in User Model (JavaScript)\nDESCRIPTION: This snippet shows how to define a many-to-many association in a User model that uses a different datastore than its associated model. It demonstrates the use of the 'datastore' property and the 'collection' attribute.\nSOURCE: https://github.com/balderdashy/sails/blob/master/docs/concepts/ORM/Associations/ManytoMany.md#2025-04-20_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\n// User.js\nmodule.exports = {\n  datastore: 'ourMySQL',\n  attributes: {\n    email: 'string',\n    wishlist: {\n      collection: 'product',\n      via: 'wishlistedBy'\n    }\n  }\n};\n```\n\n----------------------------------------\n\nTITLE: Controller Action for Unsubscribing Room Members in Sails.js\nDESCRIPTION: Example of a controller action that unsubscribes all members of 'funRoom' from 'greatRoom' and 'awesomeRoom'. The method handles errors and returns a JSON response indicating successful operation.\nSOURCE: https://github.com/balderdashy/sails/blob/master/docs/reference/websockets/sails.sockets/sails.sockets.removeRoomMembersFromRoom.md#2025-04-20_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nunsubscribeFunRoomMembersFromFunnerRooms: function(req, res) {\n  sails.sockets.removeRoomMembersFromRooms('funRoom', ['greatRoom', 'awesomeRoom'], function(err) {\n    if (err) {return res.serverError(err);}\n    res.json({\n      message: 'Unsubscribed all members of `funRoom` from `greatRoom` and `awesomeRoom`!'\n    });\n  });\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Socket ID Retrieval in a Sails.js Controller Action\nDESCRIPTION: This example shows a complete controller action that retrieves the socket ID. It first checks if the request is a socket request, then uses `sails.sockets.getId()` to get the ID, logs it, and returns it as a JSON response.\nSOURCE: https://github.com/balderdashy/sails/blob/master/docs/reference/websockets/sails.sockets/sails.sockets.getid.md#2025-04-20_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\n// Controller action\ngetSocketID: function(req, res) {\n  if (!req.isSocket) {\n    return res.badRequest();\n  }\n\n  var socketId = sails.sockets.getId(req);\n  // => \"BetX2G-2889Bg22xi-jy\"\n\n  sails.log('My socket ID is: ' + socketId);\n\n  return res.json(socketId);\n}\n```\n\n----------------------------------------\n\nTITLE: Specifying Layout in Controller Action (JavaScript)\nDESCRIPTION: This snippet shows how to specify a custom layout in a controller action. It renders the 'users/privacy' view using the 'users' layout.\nSOURCE: https://github.com/balderdashy/sails/blob/master/docs/concepts/Views/Layouts.md#2025-04-20_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nprivacy: function (req, res) {\n  res.view('users/privacy', {layout: 'users'})\n}\n```\n\n----------------------------------------\n\nTITLE: Using sails.log.error() for Error Logging in Sails.js\nDESCRIPTION: Demonstrates how to use sails.log.error() to write output to stderr at the 'error' log level. This method is useful for tracking major errors in a Sails.js application.\nSOURCE: https://github.com/balderdashy/sails/blob/master/docs/concepts/Logging/Custom log messages.md#2025-04-20_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nsails.log.error('Sending 500 (\"Server Error\") response.');\n// -> error: Sending 500 (\"Server Error\") response.\n```\n\n----------------------------------------\n\nTITLE: Setting a signed cookie in Sails.js\nDESCRIPTION: This code shows how to set a signed cookie using `res.cookie()` in Sails.js.  The `signed: true` option ensures that the cookie is signed with a secret key, providing protection against client-side tampering. The cookie's value and options are passed to the `res.cookie()` method.\nSOURCE: https://github.com/balderdashy/sails/blob/master/docs/reference/req/req.signedCookies.md#2025-04-20_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nres.cookie('chocolatechip', 'Yummy', {signed:true});\n```\n\n----------------------------------------\n\nTITLE: Accessing Datastore in Sails.js - usage\nDESCRIPTION: The `sails.getDatastore()` function is used to access a specific or default datastore in a Sails.js application. It requires an optional `datastoreName` parameter that specifies the name of the datastore to look up. If no name is provided, it returns the default datastore. The method returns a dictionary representing a datastore instance. This function does not have additional dependencies.\nSOURCE: https://github.com/balderdashy/sails/blob/master/docs/reference/application/sails.getDatastore.md#2025-04-20_snippet_0\n\nLANGUAGE: usage\nCODE:\n```\nsails.getDatastore(datastoreName);\n```\n\n----------------------------------------\n\nTITLE: Redirecting to a fully qualified URI\nDESCRIPTION: This snippet illustrates how to redirect using a fully qualified URI with the res.redirect() method. It explains the behavior when the specified URL points to an external domain.\nSOURCE: https://github.com/balderdashy/sails/blob/master/docs/reference/res/res.redirect.md#2025-04-20_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nreturn res.redirect('http://google.com');\n```\n\n----------------------------------------\n\nTITLE: Setting Custom Configuration in Sails.js\nDESCRIPTION: Sets custom configuration variables like `mailgunDomain` and `mailgunApiKey` within the `config/custom.js` file. These variables can store application-specific settings such as API keys or domain names.\nSOURCE: https://github.com/balderdashy/sails/blob/master/docs/reference/sails.config/sails.config.custom.md#2025-04-20_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n// config/custom.js\nmodule.exports.custom = {\n  mailgunDomain: 'transactional-mail.example.com',\n  mailgunApiKey: 'key-testkeyb183848139913858e8abd9a3'\n};\n```\n\n----------------------------------------\n\nTITLE: Checking Socket Connection Status with isConnected() in JavaScript\nDESCRIPTION: Determines whether the SailsSocket instance is currently connected to a server. Returns true if a connection has been established.\nSOURCE: https://github.com/balderdashy/sails/blob/master/docs/reference/websockets/sails.io.js/SailsSocket/methods.md#2025-04-20_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nio.socket.isConnected();\n```\n\n----------------------------------------\n\nTITLE: Setting Default Values for Model Attributes\nDESCRIPTION: Shows how to configure default values for model attributes using defaultsTo property.\nSOURCE: https://github.com/balderdashy/sails/blob/master/docs/concepts/ORM/Attributes.md#2025-04-20_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nattributes: {\n  phoneNumber: {\n    type: 'string',\n    defaultsTo: '111-222-3333'\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Installing Mocha for Sails.js Testing\nDESCRIPTION: Command to install Mocha as a dev dependency for testing Sails.js applications.\nSOURCE: https://github.com/balderdashy/sails/blob/master/docs/concepts/Testing/Testing.md#2025-04-20_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm install mocha --save-dev\n```\n\n----------------------------------------\n\nTITLE: Testing Hook Loading in Sails.js\nDESCRIPTION: Command to test if a custom hook is being loaded properly in a Sails.js application. This command lifts the Sails app in verbose mode, which will display a success message if the hook is loaded correctly.\nSOURCE: https://github.com/balderdashy/sails/blob/master/docs/concepts/extending-sails/Hooks/projecthooks.md#2025-04-20_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nsails lift --verbose\n```\n\n----------------------------------------\n\nTITLE: Server-Side Implementation of .publish() Method in Sails.js\nDESCRIPTION: Demonstrates a server-side implementation of the .publish() method within a controller action. This example finds all users named 'bob' and broadcasts a secret message to clients subscribed to these users, excluding the requesting client.\nSOURCE: https://github.com/balderdashy/sails/blob/master/docs/reference/websockets/resourceful-pubsub/publish.md#2025-04-20_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\n  // On the server:\n\n  tellSecretToBobs: function (req, res) {\n\n    // Get the secret from the request.\n    var secret = req.param('secret');\n\n    // Look up all users named \"Bob\".\n    User.find({name: 'bob'}, function(err, bobs) {\n      if (err) {return res.serverError(err);}\n\n      // Tell the secret to every client who is subscribed to these users,\n      // except for the client that made this request in the first place.\n      // Note that the secret is wrapped in a dictionary with a `verb` property -- this is not\n      // required, but helpful if you'll also be listening for events from Sails blueprints.\n      User.publish(_.pluck(bobs, 'id'), {\n        verb: 'published',\n        theSecret: secret\n      }, req);\n\n      return res.send();\n    });\n\n  }\n```\n\n----------------------------------------\n\nTITLE: Decrypting User Records with .decrypt() in Sails.js\nDESCRIPTION: This code snippet demonstrates how to use the `.decrypt()` method to retrieve user records with decrypted social security numbers (ssn). The method enhances security by ensuring that sensitive data is automatically decrypted when queried. No additional arguments are required, and the expected output includes decrypted attributes.\nSOURCE: https://github.com/balderdashy/sails/blob/master/docs/reference/waterline/queries/decrypt.md#2025-04-20_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nawait User.find({fullName: 'Finn Mertens'}).decrypt();\n// =>\n// [ { id: 4, fullName: 'Finn Mertens', ssn: '555-55-5555' } ]\n```\n\n----------------------------------------\n\nTITLE: Broadcasting Messages to Socket Room\nDESCRIPTION: Shows how to broadcast a message to all sockets in a specific room using the sails.sockets.broadcast() method. Requires clients to be joined to the room and listening for the specified event.\nSOURCE: https://github.com/balderdashy/sails/blob/master/docs/concepts/Realtime/On the server.md#2025-04-20_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nsails.sockets.broadcast(\"funSockets\", \"hello\", \"Hello to all my fun sockets!\");\n```\n\n----------------------------------------\n\nTITLE: Basic Cookie Access Syntax in Sails.js\nDESCRIPTION: Shows the basic syntax for accessing the cookies object from a request.\nSOURCE: https://github.com/balderdashy/sails/blob/master/docs/reference/req/req.cookies.md#2025-04-20_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nreq.cookies;\n```\n\n----------------------------------------\n\nTITLE: addToCollection() Usage Example in Waterline ORM\nDESCRIPTION: Demonstrates how to use the `addToCollection()` method to add members to a collection in Waterline ORM. This example shows how to add pets with IDs 99 and 98 to the 'pets' collection of user with ID 3.\nSOURCE: https://github.com/balderdashy/sails/blob/master/docs/reference/waterline/models/addToCollection.md#2025-04-20_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nawait User.addToCollection(3, 'pets')\n.members([99,98]);\n```\n\n----------------------------------------\n\nTITLE: Testing Sails.js Routes with sails.request() Method in JavaScript\nDESCRIPTION: This code snippet demonstrates how to use the sails.request() method to test a Sails.js route without lifting the server to a port. It shows the setup for a Mocha test suite, including loading the Sails.js app, running a test against a GET /hotpockets route, and properly tearing down the app after tests.\nSOURCE: https://github.com/balderdashy/sails/blob/master/docs/upgrading/To0.11.md#2025-04-20_snippet_3\n\nLANGUAGE: JavaScript\nCODE:\n```\nvar assert = require('assert');\nvar Sails = require('sails').Sails;\n\nbefore(function beforeRunningAnyTests (done){\n\n  // Load the app (no need to \"lift\" to a port)\n  sails.load({\n    log: {\n      level: 'warn'\n    },\n    hooks: {\n      grunt: false\n    }\n  }, function whenAppIsReady(err){\n    if (err) return done(err);\n\n    // At this point, the `sails` global is exposed, although we\n    // could have disabled it above with our config overrides to\n    // `sails.load()`. In fact, you can actually use this technique\n    // to set any configuration setting you like.\n    return done();\n  });\n});\n\nafter(function afterTestsFinish (done) {\n  sails.lower(done);\n});\n\ndescribe('GET /hotpockets', function (){\n\n  it('should respond with a 200 status code', function (done){\n\n    sails.request({\n      method: 'get',\n      url: '/hotpockets',\n      params: {\n        limit: 10,\n        sort: 'price ASC'\n      }\n    }, function (err, clientRes, body) {\n      if (err) return done(err);\n\n      assert.equal(clientRes.statusCode, 200);\n      return done();\n    });\n\n  });\n});\n```\n\n----------------------------------------\n\nTITLE: Overriding Blueprint Options Parsing in Sails\nDESCRIPTION: This code snippet provides an example of how to override the default parseBlueprintOptions function in Sails to limit the query options for certain blueprint actions. It demonstrates how to access and modify the criteria used in Waterline model method calls, specifically capping the maximum 'limit' clause to 100 if the request is for 'find' or 'populate'. Requires understanding of Sails.js, blueprints, and Waterline.\nSOURCE: https://github.com/balderdashy/sails/blob/master/docs/reference/sails.config/sails.config.blueprints.md#2025-04-20_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nparseBlueprintOptions: function(req) {\n\n  // Get the default query options.\n  var queryOptions = req._sails.hooks.blueprints.parseBlueprintOptions(req);\n\n  // If this is the \"find\" or \"populate\" blueprint action, and the normal query options\n  // indicate that the request is attempting to set an exceedingly high `limit` clause,\n  // then prevent it (we'll say `limit` must not exceed 100).\n  if (req.options.blueprintAction === 'find' || req.options.blueprintAction === 'populate') {\n    if (queryOptions.criteria.limit > 100) {\n      queryOptions.criteria.limit = 100;\n    }\n  }\n\n  return queryOptions;\n\n}\n```\n\n----------------------------------------\n\nTITLE: Using .fetch() in Sails.js\nDESCRIPTION: The `.fetch()` method is used with Waterline ORM queries in Sails.js to retrieve records when performing operations like `.update()`, `.create()`, `.createEach()`, or `.destroy()`. No arguments are accepted by this method. The `fetch` operation is ideally not recommended when manipulating large datasets as it can lead to performance issues.\nSOURCE: https://github.com/balderdashy/sails/blob/master/docs/reference/waterline/queries/fetch.md#2025-04-20_snippet_0\n\nLANGUAGE: usage\nCODE:\n```\n.fetch()\n```\n\n----------------------------------------\n\nTITLE: Implementing Dynamic Permissions Helper in Sails.js\nDESCRIPTION: A helper module that checks user permissions within an organization. It defines rights based on user roles (owner, admin, regular user) and returns applicable permissions.\nSOURCE: https://github.com/balderdashy/sails/blob/master/docs/concepts/Policies/Permissions.md#2025-04-20_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nmodule.exports = {\n\n\n  friendlyName: 'Check permissions',\n\n\n  description: 'Look up a user\\'s \"rights\" within a particular organization.',\n\n\n  inputs: {\n    userId: { type: 'number', required: true },\n    orgId: { type: 'number', required: true }\n  },\n\n  exits: {\n    success: {\n      outputFriendlyName: 'Rights',\n      outputDescription: `A user's \"rights\" within an org.`,\n      outputType: ['string']\n    },\n    orgNotFound: {\n      description: 'No such organization exists.'\n    }\n  },\n\n  fn: async function(inputs, exits) {\n    var org = await Organization.findOne(inputs.orgId)\n    .populate('adminUsers', { id: inputs.userId })\n    .populate('regularUsers', { id: inputs.userId });\n\n    if (!org) { throw 'orgNotFound'; }\n\n    var rights = [];\n    if (org.regularUsers.length !== 0) {\n      rights = ['basicAccess', 'inviteRegularUsers'];\n    } else if (org.adminUsers.length !== 0) {\n      rights = ['basicAccess', 'inviteRegularUsers', 'removeRegularUsers', 'inviteOrgAdmins'];\n    } else if (org.owner === inputs.userId) {\n      rights = ['basicAccess', 'inviteRegularUsers', 'removeRegularUsers', 'inviteOrgAdmins', 'removeOrDemoteOrgAdmins'];\n    }\n\n    return exits.success(rights);\n  }\n\n};\n```\n\n----------------------------------------\n\nTITLE: Passing Multiple Positional Arguments to a Sails.js Helper\nDESCRIPTION: Demonstrates passing multiple arguments to a helper function by position. This example retrieves 10 users who have been active since March 17, 2017.\nSOURCE: https://github.com/balderdashy/sails/blob/master/docs/concepts/Helpers/ExampleHelper.md#2025-04-20_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nawait sails.helpers.getRecentUsers(10, (new Date('2017-03-17')).getTime());\n```\n\n----------------------------------------\n\nTITLE: Usage of `res.forbidden()` in Sails\nDESCRIPTION: This snippet shows the basic usage of the `res.forbidden()` method in a Sails.js controller. It returns a 403 Forbidden response to the client.\nSOURCE: https://github.com/balderdashy/sails/blob/master/docs/reference/res/res.forbidden.md#2025-04-20_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n\"return res.forbidden();\"\n```\n\n----------------------------------------\n\nTITLE: Usage of the `.validate()` method\nDESCRIPTION: This snippet provides a general usage pattern for the `.validate()` method, demonstrating its capability to validate a value against an attribute definition within the Sails JS framework.\nSOURCE: https://github.com/balderdashy/sails/blob/master/docs/reference/waterline/models/validate.md#2025-04-20_snippet_0\n\nLANGUAGE: usage\nCODE:\n```\nSomething.validate(attrName, value);\n```\n\n----------------------------------------\n\nTITLE: Deleting a Model Instance via REST API in Sails.js\nDESCRIPTION: This code snippet represents the usage of the DELETE HTTP method to remove a specific record from the database using its model name and ID. It explains the structure of the HTTP request and the expected JSON response upon successful deletion.\nSOURCE: https://github.com/balderdashy/sails/blob/master/docs/reference/blueprint-api/Destroy.md#2025-04-20_snippet_0\n\nLANGUAGE: http\nCODE:\n```\nDELETE /:model/:id\n```\n\n----------------------------------------\n\nTITLE: Configuring Routes with Views in Sails.js\nDESCRIPTION: This snippet demonstrates how to set up routes in Sails.js that render specific views. It shows examples of mapping URL paths to corresponding view files in the routes.js configuration.\nSOURCE: https://github.com/balderdashy/sails/blob/master/docs/concepts/Views/Views.md#2025-04-20_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n{\n  'get /': {\n    view: 'pages/homepage'\n  },\n  'get /signup': {\n    view: 'pages/signup/basic-info'\n  },\n  'get /signup/password': {\n    view: 'pages/signup/choose-password'\n  },\n  // and so on.\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Response to Indicate File Download - Sails.js - JavaScript\nDESCRIPTION: The res.attachment() method is used to inform the browser that the response content should be downloaded as a file instead of being displayed. It can optionally take a filename for the downloaded file, which will adjust the Content-Disposition header accordingly.\nSOURCE: https://github.com/balderdashy/sails/blob/master/docs/reference/res/res.attachment.md#2025-04-20_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nres.attachment([filename]);\n```\n\n----------------------------------------\n\nTITLE: Sending String Responses with res.send() in Sails - JavaScript\nDESCRIPTION: The `res.send()` method in Sails is used to send string-based responses in formats like XML, CSV, or plain text. Examples include sending dynamic CSV and XML. If no string is provided, only a status code is returned. This method is terminal, meaning it should be the last line of code for a given request. Dependencies include Sails.js framework, and key parameters are the response string or status code.\nSOURCE: https://github.com/balderdashy/sails/blob/master/docs/reference/res/res.send.md#2025-04-20_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n// Send back some dynamic CSV-formatted data.\nreturn res.set('text/csv').send(`\nsome,csv,like,this\nor,,like,this\n`);\n```\n\nLANGUAGE: javascript\nCODE:\n```\n// Send down some dynamic XML-formatted data.\nreturn res.set('application/xml').send(`<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<urlset xmlns=\"http://www.sitemaps.org/schemas/sitemap/0.9\">\n  <url>\n    <loc>http://sailsjs.com</loc>\n    <lastmod>2018-03-28T17:02:23.688Z</lastmod>\n    <changefreq>monthly</changefreq>\n  </url>\n</urlset>\n`);\n```\n\nLANGUAGE: javascript\nCODE:\n```\n// You can use any status code you like.\n// (Defaults to 200 unless you specify something else.)\nreturn res.status(420).send('Hello world!');\n```\n\n----------------------------------------\n\nTITLE: Using Permissions Helper in Controller Action\nDESCRIPTION: Example of using the permissions helper in a controller action to handle admin demotion. Demonstrates permission checking and user role modification.\nSOURCE: https://github.com/balderdashy/sails/blob/master/docs/concepts/Policies/Permissions.md#2025-04-20_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nvar rights = await checkPermissions(this.req.session.userId, inputs.orgId)\n.intercept('orgNotFound', 'notFound');\n\nif (!_.contains(rights, 'removeOrDemoteOrgAdmins')) {\n  throw 'forbidden';\n}\n\nawait Organization.removeFromCollection(inputs.orgId, 'adminUsers', inputs.targetUserId);\nawait Organization.addToCollection(inputs.orgId, 'regularUsers', inputs.targetUserId);\n\nreturn exits.success();\n```\n\n----------------------------------------\n\nTITLE: API Usage Example - Sails.js findOne() Blueprint\nDESCRIPTION: Example of the API endpoint structure for retrieving a single record. The :model represents the model identity and :id is the primary key of the desired record.\nSOURCE: https://github.com/balderdashy/sails/blob/master/docs/reference/blueprint-api/FindOne.md#2025-04-20_snippet_0\n\nLANGUAGE: text\nCODE:\n```\nGET /:model/:id\n```\n\n----------------------------------------\n\nTITLE: Accessing Headers with Dot Notation\nDESCRIPTION: Demonstrates accessing headers using dot notation, which can be used for simple header names without special characters.\nSOURCE: https://github.com/balderdashy/sails/blob/master/docs/reference/req/req.headers.md#2025-04-20_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nreq.headers.host;\n```\n\n----------------------------------------\n\nTITLE: Using io.socket.get() in HTML Script\nDESCRIPTION: Shows an example of using io.socket.get() within an HTML script tag to send a request to '/users/9' and handle the response data.\nSOURCE: https://github.com/balderdashy/sails/blob/master/docs/reference/websockets/sails.io.js/socket.get.md#2025-04-20_snippet_1\n\nLANGUAGE: HTML\nCODE:\n```\n<script>\nio.socket.get('/users/9', function (resData) {\n  // resData => {id:9, name: 'Timmy Mendez'}\n});\n</script>\n```\n\n----------------------------------------\n\nTITLE: Enabling CSRF Protection Configuration\nDESCRIPTION: Configuration setting to enable CSRF protection in Sails.js security settings.\nSOURCE: https://github.com/balderdashy/sails/blob/master/docs/concepts/Security/CSRF.md#2025-04-20_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\ncsrf: true\n```\n\n----------------------------------------\n\nTITLE: Controller Action for Unsubscribing a Socket from a Room in Sails.js\nDESCRIPTION: A complete controller action example that unsubscribes the requesting socket from a specified room. It validates the request parameters, checks that the request is from a socket, and returns appropriate responses.\nSOURCE: https://github.com/balderdashy/sails/blob/master/docs/reference/websockets/sails.sockets/sails.sockets.leave.md#2025-04-20_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nleaveFunRoom: function(req, res) {\n  if ( _.isUndefined(req.param('roomName')) ) {\n    return res.badRequest('`roomName` is required.');\n  }\n\n  if (!req.isSocket) {\n    return res.badRequest('This endpoints only supports socket requests.');\n  }\n\n  var roomName = req.param('roomName');\n  sails.sockets.leave(req, roomName, function(err) {\n    if (err) {return res.serverError(err);}\n    return res.json({\n      message: 'Left a fun room called '+roomName+'!'\n    });\n  });\n}\n```\n\n----------------------------------------\n\nTITLE: Back redirect with res.redirect()\nDESCRIPTION: This snippet explains how to use res.redirect() to navigate back to the previous page by referencing the 'Referer' header, or defaulting to '/' if none is available.\nSOURCE: https://github.com/balderdashy/sails/blob/master/docs/reference/res/res.redirect.md#2025-04-20_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nreturn res.redirect('back');\n```\n\n----------------------------------------\n\nTITLE: Configuring io.socket Connection URL in HTML\nDESCRIPTION: This snippet demonstrates how to change the server URL that io.socket connects to by modifying the io.sails.url property after loading the sails.io.js library but before the connection is established.\nSOURCE: https://github.com/balderdashy/sails/blob/master/docs/reference/websockets/sails.io.js/io.socket.md#2025-04-20_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<script type=\"text/javascript\" src=\"/js/dependencies/sails.io.js\"></script>\n<script type=\"text/javascript\">\nio.sails.url = \"http://somesailsapp.com\";\n</script>\n```\n\n----------------------------------------\n\nTITLE: Accessing Client IP in Sails.js\nDESCRIPTION: Shows how to access the IP address of the client making the request. Returns the remote address of the requesting user agent, or the upstream address if behind a proxy with trustProxy enabled.\nSOURCE: https://github.com/balderdashy/sails/blob/master/docs/reference/req/req.ip.md#2025-04-20_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nreq.ip;\n```\n\nLANGUAGE: javascript\nCODE:\n```\nreq.ip;\n// -> \"127.0.0.1\"\n```\n\n----------------------------------------\n\nTITLE: Custom Route Configuration with Model Option in Sails.js\nDESCRIPTION: This snippet illustrates how to configure a custom route with a model option for use with a custom action in Sails.js.  The `model` option is set to `repoactivity`, allowing the action to access this value via `req.options.model`.\nSOURCE: https://github.com/balderdashy/sails/blob/master/docs/reference/req/req.options/req.options.md#2025-04-20_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\n'POST /my-cool-webhooks/github/doings-and-things/incoming': {\n  action: 'github/receive-event',\n  model: 'repoactivity'\n}\n```\n\n----------------------------------------\n\nTITLE: Basic Usage of .replaceCollection() in Sails.js\nDESCRIPTION: Demonstrates how to replace an entire collection association for a parent record with new child records. Replaces all existing associated records with the specified new records.\nSOURCE: https://github.com/balderdashy/sails/blob/master/docs/reference/waterline/models/replaceCollection.md#2025-04-20_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nawait Something.replaceCollection(parentId, association)\n.members(childIds);\n```\n\n----------------------------------------\n\nTITLE: Using .skip() Method to Skip Records in Sails.js\nDESCRIPTION: The .skip() method allows developers to specify the number of records to skip in a query, which is useful for pagination. It takes a single parameter, numRecordsToSkip, which represents the number of records to omit before returning the query results. If the skip value exceeds the number of records found, an empty array is returned.\nSOURCE: https://github.com/balderdashy/sails/blob/master/docs/reference/waterline/queries/skip.md#2025-04-20_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nvar fakeJakes = await User.find({ name: 'Jake' });\n.skip(1);\n\nreturn res.json(fakeJakes);\n```\n\n----------------------------------------\n\nTITLE: Configuring HSTS middleware in Sails.js\nDESCRIPTION: This code snippet shows how to configure the HSTS middleware in the Sails.js config/http.js file. It sets the maxAge parameter to 31536000 seconds (1 year), determining how long the strict transport security will remain in effect.\nSOURCE: https://github.com/balderdashy/sails/blob/master/docs/concepts/Security/StrictTransportSecurity.md#2025-04-20_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\n  // ...\n  // maxAge ==> Number of seconds strict transport security will stay in effect.\n  strictTransportSecurity: require('lusca').hsts({ maxAge: 31536000 })\n  // ...\n```\n\n----------------------------------------\n\nTITLE: Accessing the `req.protocol` property in Sails.js\nDESCRIPTION: This snippet illustrates how to access the `req.protocol` property within a Sails.js request object. The value returned will be either 'http' or 'https', indicating the protocol used for the incoming request.\nSOURCE: https://github.com/balderdashy/sails/blob/master/docs/reference/req/req.protocol.md#2025-04-20_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n\"req.protocol;\"\n```\n\n----------------------------------------\n\nTITLE: Using Custom Response in Sails.js Action (JavaScript)\nDESCRIPTION: This snippet shows an improved approach using a custom response (serverError) to handle database errors in a Sails.js action. It demonstrates the benefits of using custom responses, including code conciseness and consistent error handling.\nSOURCE: https://github.com/balderdashy/sails/blob/master/docs/concepts/extending-sails/Custom Responses/Custom Responses.md#2025-04-20_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\ngetProfile: function(req, res) {\n\n  // Look up the currently logged-in user's record from the database.\n  User.findOne({ id: req.session.userId }).exec(function(err, user) {\n    if (err) { return res.serverError(err); }\n    return res.json(user);\n  });\n}\n```\n\n----------------------------------------\n\nTITLE: Installing Lusca Middleware for CSP in Sails.js\nDESCRIPTION: This snippet shows how to install the 'lusca' package in a Sails.js application using npm. Lusca is used to implement Content Security Policy.\nSOURCE: https://github.com/balderdashy/sails/blob/master/docs/concepts/Security/ContentSecurityPolicy.md#2025-04-20_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\n# In your sails app\nnpm install lusca --save --save-exact\n```\n\n----------------------------------------\n\nTITLE: Exit Signal Examples\nDESCRIPTION: Demonstrates different ways to trigger exit signals in Sails.js actions.\nSOURCE: https://github.com/balderdashy/sails/blob/master/docs/concepts/ActionsAndControllers/ActionsAndControllers.md#2025-04-20_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nthrow 'hasConflictingCourses';\n\nthrow { hasConflictingCourses: ['CS 301', 'M 402'] };\n```\n\n----------------------------------------\n\nTITLE: Creating Multiple Sails Application Instances\nDESCRIPTION: Demonstrates how to create multiple Sails application instances using the constructor pattern. This is useful for advanced scenarios like testing Sails core or running multiple apps in the same process.\nSOURCE: https://github.com/balderdashy/sails/blob/master/docs/reference/application/advanced-usage/advanced-usage.md#2025-04-20_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nvar Sails = require('sails').constructor;\nvar sails0 = new Sails();\nvar sails1 = new Sails();\nvar sails2 = new Sails();\n```\n\n----------------------------------------\n\nTITLE: Using sails.log() for Debug Logging in Sails.js\nDESCRIPTION: Shows how to use the default log function sails.log() (alias for sails.log.debug()) to write output to stderr at the 'debug' log level. Useful for technical information or as an alternative to console.log().\nSOURCE: https://github.com/balderdashy/sails/blob/master/docs/concepts/Logging/Custom log messages.md#2025-04-20_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nsails.log('This endpoint (`POST /accounts`) will be deprecated in the next few days.  Please use `POST /signup` instead. ');\n// -> debug: This endpoint (`POST /accounts`) will be deprecated in the next few days.  Please use `POST /signup` instead.\n```\n\n----------------------------------------\n\nTITLE: Handling Database Error in Sails.js Action (JavaScript)\nDESCRIPTION: This snippet demonstrates a basic approach to handling a database error in a Sails.js action. It shows the drawbacks of directly handling errors in action code, including lack of content negotiation and excessive error information exposure.\nSOURCE: https://github.com/balderdashy/sails/blob/master/docs/concepts/extending-sails/Custom Responses/Custom Responses.md#2025-04-20_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\ngetProfile: function(req, res) {\n\n  // Look up the currently logged-in user's record from the database.\n  User.findOne({ id: req.session.userId }).exec(function(err, user) {\n    if (err) {\n      res.status(500);\n      return res.view('500', {data: err});\n    }\n    \n    return res.json(user);\n  });\n}\n```\n\n----------------------------------------\n\nTITLE: Example of Debug Logging with Sails in JavaScript\nDESCRIPTION: This example utilizes the Sails logger to record messages and data at the debug level. It shows the use of variadic arguments, string interpolation, and pretty-printing of JavaScript objects with Sails' logger. The example logs various messages, sums input parameters, and outputs all parameters in a request, showcasing practical logging within a web application environment.\nSOURCE: https://github.com/balderdashy/sails/blob/master/docs/reference/application/sails.log.md#2025-04-20_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nvar sum = +req.param('x') + +req.param('y');\nsails.log();\nsails.log('Hey %s, did you know that the sum of %d and %d is %d?', req.param('name'), +req.param('x'), +req.param('y'), sum);\nsails.log('Bet you didn\\'t know robots could do math, huh?');\nsails.log();\nsails.log('Anyways, here is a dictionary containing all the parameters I received in this request:', req.allParams());\nsails.log('Until next time!');\nreturn res.ok();\n```\n\n----------------------------------------\n\nTITLE: Example JSON response for purchase records\nDESCRIPTION: This JSON snippet shows an example of the expected response when querying for purchase records. It includes the amount, id, createdAt, and updatedAt attributes.\nSOURCE: https://github.com/balderdashy/sails/blob/master/docs/reference/blueprint-api/Find.md#2025-04-20_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n[\n {\n   \"amount\": 49.99,\n   \"id\": 1,\n   \"createdAt\": 1485551132315,\n   \"updatedAt\": 1485551132315\n },\n {\n   \"amount\": 99.99,\n   \"id\": 47,\n   \"createdAt\": 1485551158349,\n   \"updatedAt\": 1485551158349\n }\n]\n```\n\n----------------------------------------\n\nTITLE: Setting Content-Type using Sails.js\nDESCRIPTION: This snippet demonstrates how to set the Content-Type header of an HTTP response using the res.type() method in Sails.js. It allows for both shorthand and MIME type definitions. Dependencies include the Sails framework and proper integration in a response context. Expected inputs are strings representing the desired type, and it outputs the correctly set response header.\nSOURCE: https://github.com/balderdashy/sails/blob/master/docs/reference/res/res.type.md#2025-04-20_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nres.type('.html');\nres.type('html');\nres.type('json');\nres.type('application/json');\nres.type('png');\n```\n\n----------------------------------------\n\nTITLE: Configuring Installed Hooks in Sails.js\nDESCRIPTION: Configuration example showing how to customize hook loading behavior in Sails.js. This demonstrates changing the hook name and configuration key to avoid naming conflicts with other hooks or configurations.\nSOURCE: https://github.com/balderdashy/sails/blob/master/docs/concepts/extending-sails/Hooks/usinghooks.md#2025-04-20_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n// config/installedHooks.js\nmodule.exports.installedHooks = {\n   \"sails-hook-email\": {\n      // load the hook into sails.hooks.emailHook instead of sails.hooks.email\n      \"name\": \"emailHook\",\n      // configure the hook using sails.config.emailSettings instead of sails.config.email\n      \"configKey\": \"emailSettings\"\n   }\n};\n```\n\n----------------------------------------\n\nTITLE: Processing X-Forwarded-For Header with req.ips in Sails.js\nDESCRIPTION: Example showing the array returned by req.ips when X-Forwarded-For header contains multiple IP addresses. Returns IP addresses in order from client to proxies.\nSOURCE: https://github.com/balderdashy/sails/blob/master/docs/reference/req/req.ips.md#2025-04-20_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nreq.ips;\n// -> [\"client\", \"proxy1\", \"proxy2\"]\n\n// (\"proxy2\" is the furthest \"down-stream\" IP address)\n```\n\n----------------------------------------\n\nTITLE: Initializing Create Query with Fetch Option in Waterline ORM\nDESCRIPTION: Demonstrates how to use .meta() to fetch the created record after a User creation query in Sails.js. The fetch option ensures the newly created user record is returned.\nSOURCE: https://github.com/balderdashy/sails/blob/master/docs/reference/waterline/queries/meta.md#2025-04-20_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nvar newUser = await User.create({name: 'alice'})\n.meta({fetch: true});\n\nreturn res.json(newUser);\n```\n\n----------------------------------------\n\nTITLE: Installing Consolidate Package\nDESCRIPTION: Command to install the Consolidate.js package as a project dependency for view engine support.\nSOURCE: https://github.com/balderdashy/sails/blob/master/docs/concepts/Views/ViewEngines.md#2025-04-20_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm install consolidate --save\n```\n\n----------------------------------------\n\nTITLE: Implementing Basic Sails Hook\nDESCRIPTION: Demonstrates the minimal implementation of a Sails hook that takes the sails instance as an argument and returns an empty object.\nSOURCE: https://github.com/balderdashy/sails/blob/master/docs/concepts/extending-sails/Hooks/hookspec/hookspec.md#2025-04-20_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nmodule.exports = function myBasicHook(sails) {\n   return {};\n}\n```\n\n----------------------------------------\n\nTITLE: Example Socket Event Data Structure\nDESCRIPTION: Example of the data structure received by socket clients when a User model record is created. This shows the standard format used by blueprint actions when publishing changes to subscribed sockets.\nSOURCE: https://github.com/balderdashy/sails/blob/master/docs/reference/websockets/resourceful-pubsub/resourceful-pubsub.md#2025-04-20_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\n{\n\tverb: 'created',\n  id: 1,\n  data: {\n    id: 1,\n    name: 'joe',\n    createdAt: '2014-08-01T05:50:19.855Z'\n    updatedAt: '2014-08-01T05:50:19.855Z'\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Custom Route Configuration with Blueprint Action in Sails.js\nDESCRIPTION: This snippet demonstrates how to bind a blueprint action to a custom route in Sails.js by configuring `config/routes.js`.  It shows how to specify the action and model, which will then be accessible within the action via `req.options`.\nSOURCE: https://github.com/balderdashy/sails/blob/master/docs/reference/req/req.options/req.options.md#2025-04-20_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n\"GET /foo/bar': {\n  action: 'user/find',\n  model: 'user'\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Static Locals in Sails.js Routes Configuration\nDESCRIPTION: Example of defining static locals directly in the routes configuration file for a profile view.\nSOURCE: https://github.com/balderdashy/sails/blob/master/docs/concepts/Views/Locals.md#2025-04-20_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\n  // ...\n  'get /profile': {\n    view: 'backOffice/profile',\n    locals: {\n      user: {\n        fullName: 'Frank',\n        emailAddress: 'frank@enfurter.com'\n      },\n      corndogs: [\n        { name: 'beef corndog' },\n        { name: 'chicken corndog' },\n        { name: 'soy corndog' }\n      ]\n    }\n  },\n  // ...\n```\n\n----------------------------------------\n\nTITLE: Configuring Session Handling with Asset Detection\nDESCRIPTION: Example configuration in config/session.js demonstrating how to use the asset detection regex to selectively disable sessions for static asset requests while maintaining sessions for .json requests.\nSOURCE: https://github.com/balderdashy/sails/blob/master/docs/reference/application/advanced-usage/sails.LOOKS_LIKE_ASSET_RX.md#2025-04-20_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\n// In `config/session.js`\nisSessionDisabled: function (req){\n\n  if (req.path.match(/\\.json$/)) {\n    // Don't disable sessions.\n    return;\n  }\n\n  var seemsToWantSomeOtherStaticAsset = !!req.path.match(sails.LOOKS_LIKE_ASSET_RX);\n  if (seemsToWantSomeOtherStaticAsset) {\n    // Disable sessions.\n    return true;\n  }\n  \n  // Otherwise, don't disable sessions.\n  return;\n\n}\n```\n\n----------------------------------------\n\nTITLE: Retrieving Request Headers Using req.get() - Practical Example\nDESCRIPTION: Demonstrates retrieving a custom header value 'myField' from a request object, which returns the value 'cat'.\nSOURCE: https://github.com/balderdashy/sails/blob/master/docs/reference/req/req.get.md#2025-04-20_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nreq.get('myField');\n// -> cat\n```\n\n----------------------------------------\n\nTITLE: Using sails.log.warn() for Warning Logging in Sails.js\nDESCRIPTION: Demonstrates how to use sails.log.warn() to write output to stderr at the 'warn' log level. This is useful for tracking information about operations that failed silently.\nSOURCE: https://github.com/balderdashy/sails/blob/master/docs/concepts/Logging/Custom log messages.md#2025-04-20_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nsails.log.warn('File upload quota exceeded for user #%d.  Request aborted.', user.id);\n// -> warn: File upload quota exceeded for user #94271.  Request aborted.\n```\n\n----------------------------------------\n\nTITLE: Template Loading Block in Sails.js Layout View\nDESCRIPTION: The HTML comment block that Sails.js uses in the layout.ejs view to automatically include precompiled client-side JST templates. The templates are loaded between these special comment markers and exposed as functions on window.JST.\nSOURCE: https://github.com/balderdashy/sails/blob/master/docs/anatomy/assets/templates/templates.md#2025-04-20_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<!--TEMPLATES-->\n\n<!--TEMPLATES END-->\n```\n\n----------------------------------------\n\nTITLE: Configuring P3P Middleware in Sails.js HTTP Configuration\nDESCRIPTION: This snippet demonstrates how to set up P3P middleware in the Sails.js http.js configuration file. It shows the middleware setup and the order in which it should be executed.\nSOURCE: https://github.com/balderdashy/sails/blob/master/docs/concepts/Security/P3P.md#2025-04-20_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nmodule.exports.http = {\n\n  middleware: {\n  \n    p3p: require('p3p')(p3p.recommmended), // <==== set up the custom middleware here and named it \"p3p\"\n\n    order: [\n      'startRequestTimer',\n      'p3p', // <============ configured the order of our \"p3p\" custom middleware here\n      'cookieParser',\n      'session',\n      'bodyParser',\n      'handleBodyParserError',\n      'compress',\n      'methodOverride',\n      'poweredBy',\n      '$custom',\n      'router',\n      'www',\n      'favicon',\n      '404',\n      '500'\n    ],\n    // .....\n  }\n};\n```\n\n----------------------------------------\n\nTITLE: Using sails.log.verbose() for Detailed Logging in Sails.js\nDESCRIPTION: Shows how to use sails.log.verbose() to write output to stdout at the 'verbose' log level. This is useful for capturing detailed information about the application that might only be needed occasionally.\nSOURCE: https://github.com/balderdashy/sails/blob/master/docs/concepts/Logging/Custom log messages.md#2025-04-20_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nsails.log.verbose('A user (IP adddress: `%s`) initiated an account transfer...', req.ip);\n// -> verbose: A user (IP adddress: `10.48.1.191`) initiated an account transfer...\n```\n\n----------------------------------------\n\nTITLE: Differences Between sails.lift() and sails.load()\nDESCRIPTION: Explanation of the functional difference between the two main methods for starting a Sails application: sails.lift() and sails.load(). The former includes initialization of servers while the latter doesn't.\nSOURCE: https://github.com/balderdashy/sails/blob/master/lib/app/README.md#2025-04-20_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n+ What is the difference between `sails.lift()` and `sails.load()`?\n  + `lift()` === `load()` + `initialize()`.  It does everything `load()` does, plus it starts any attached servers (e.g. HTTP) and logs a picture of a boat.\n```\n\n----------------------------------------\n\nTITLE: Triggering Server Error Response in Sails.js Controllers\nDESCRIPTION: Shows how to trigger a 500 server error response from Sails.js controllers or policies, with an optional parameter for message, error, or array of errors.\nSOURCE: https://github.com/balderdashy/sails/blob/master/docs/anatomy/views/500.ejs.md#2025-04-20_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nreturn res.serverError( e );\n```\n\n----------------------------------------\n\nTITLE: Custom Column Naming in Sails.js Model\nDESCRIPTION: Shows how to map model attributes to custom database column names.\nSOURCE: https://github.com/balderdashy/sails/blob/master/docs/concepts/ORM/Attributes.md#2025-04-20_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\n  numberOfWheels: {\n    type: 'number',\n    columnName: 'number_of_round_rotating_things'\n  }\n```\n\n----------------------------------------\n\nTITLE: Leasing a MySQL Connection in Sails.js\nDESCRIPTION: Shows how to lease an active MySQL connection using the leaseConnection() method from a registered datastore instance. This allows executing raw SQL queries within the connection lifecycle.\nSOURCE: https://github.com/balderdashy/sails/blob/master/docs/tutorials/low-level-mysql-access.md#2025-04-20_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nrdi.leaseConnection(function(connection, proceed) {\n  db.query('SELECT * from `user`;', function(err, results, fields) {\n    if (err) {\n      return proceed(err);\n    }\n\n    proceed(undefined, results);\n  });\n}, function(err, results) {\n  // Handle results here after the connection has been closed\n})\n```\n\n----------------------------------------\n\nTITLE: Simple query without 'where' key in JavaScript\nDESCRIPTION: Demonstrates a simple query without using the 'where' key, where the entire object is treated as the criteria.\nSOURCE: https://github.com/balderdashy/sails/blob/master/docs/concepts/ORM/Querylanguage.md#2025-04-20_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nvar peopleNamedMary = await Model.find({\n  name: 'mary'\n});\n```\n\n----------------------------------------\n\nTITLE: Reloading Sails Actions with Basic Callback\nDESCRIPTION: Basic usage of sails.reloadActions() with a callback function to reload actions in a Sails.js application. Triggers hooks to re-register their actions and reload controller files.\nSOURCE: https://github.com/balderdashy/sails/blob/master/docs/reference/application/advanced-usage/sails.reloadActions.md#2025-04-20_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nsails.reloadActions(cb);\n```\n\n----------------------------------------\n\nTITLE: Nullable Star Rating Attribute in Sails.js\nDESCRIPTION: Configuration for a star rating attribute that allows null values while maintaining numeric constraints.\nSOURCE: https://github.com/balderdashy/sails/blob/master/docs/concepts/ORM/Validations.md#2025-04-20_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nstarRating: {\n  type: 'number',\n  allowNull: true,\n  min: 1,\n  max: 5,\n}\n```\n\n----------------------------------------\n\nTITLE: Create Record Request Body - JSON\nDESCRIPTION: This JSON snippet shows the structure of the request body used to create a new record. It sets the \"name\" to \"Applejack\", \"hobby\" to \"pickin\", and \"involvedInPurchases\" to an array containing the IDs 13 and 25.\nSOURCE: https://github.com/balderdashy/sails/blob/master/docs/reference/blueprint-api/Create.md#2025-04-20_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"name\": \"Applejack\",\n  \"hobby\": \"pickin\",\n  \"involvedInPurchases\": [13,25]\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Manual Route to Controller Action in Sails.js\nDESCRIPTION: Example showing how to bind a POST route to a controller action in config/routes.js file. This routes POST requests to /make/a/sandwich to the make action in SandwichController.\nSOURCE: https://github.com/balderdashy/sails/blob/master/docs/concepts/ActionsAndControllers/RoutingToActions.md#2025-04-20_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n'POST /make/a/sandwich': 'SandwichController.make'\n```\n\n----------------------------------------\n\nTITLE: Generating a Controller with Sails CLI\nDESCRIPTION: Command for generating a new controller (CatsController.js) and its matching model using the Sails command line interface.\nSOURCE: https://github.com/balderdashy/sails/blob/master/docs/anatomy/api/controllers/controllers.md#2025-04-20_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nsails generate api cats\n```\n\n----------------------------------------\n\nTITLE: Basic Action Middleware Registration Usage\nDESCRIPTION: Shows the general syntax for registering action middleware using sails.registerActionMiddleware() method\nSOURCE: https://github.com/balderdashy/sails/blob/master/docs/reference/application/advanced-usage/sails.registerActionMiddleware.md#2025-04-20_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nsails.registerActionMiddleware(actionMiddlewareFns, actionIdentities);\n```\n\n----------------------------------------\n\nTITLE: Adding Foreign Record with jQuery - Sails.js - JavaScript\nDESCRIPTION: This snippet shows how to use jQuery's Ajax method to send a PUT request to add a foreign record to a collection. The code logs the response to the console upon success, making it easy to verify the data added.\nSOURCE: https://github.com/balderdashy/sails/blob/master/docs/reference/blueprint-api/Add.md#2025-04-20_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\n$.put('/employee/7/involvedInPurchases/47', function (purchases) {\\n  console.log(purchases);\\n});\n```\n\n----------------------------------------\n\nTITLE: Express Middleware Configuration (v1.0)\nDESCRIPTION: Updated middleware configuration pattern for Express 4 in Sails v1.0 using Passport.\nSOURCE: https://github.com/balderdashy/sails/blob/master/docs/upgrading/To1.0.md#2025-04-20_snippet_21\n\nLANGUAGE: javascript\nCODE:\n```\nvar passport = require('passport');\nmiddleware: {\n  passportInit: passport.initialize(),\n  passportSession: passport.session()\n},\n```\n\n----------------------------------------\n\nTITLE: Dynamic Parameter Action Configuration\nDESCRIPTION: Configuration for handling wildcard parameters in a modern Sails action with input validation.\nSOURCE: https://github.com/balderdashy/sails/blob/master/docs/concepts/Routes/RouteTargetSyntax.md#2025-04-20_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nurlWildcardSuffix: 'template',\ninputs: {\n  template: {\n    description: 'The relative path to an EJS template within our `views/emails/` folder -- WITHOUT the file extension.',\n    extendedDescription: 'Use strings like \"foo\" or \"foo/bar\", but NEVER \"foo/bar.ejs\" or \"/foo/bar\".  For example, '+\n      '\"internal/email-contact-form\" would send an email using the \"views/emails/internal/email-contact-form.ejs\" template.',\n    example: 'email-reset-password',\n    type: 'string',\n    required: true\n  },\n},\nfn: async function({ template }) {\n  // ‚Ä¶\n}\n```\n\n----------------------------------------\n\nTITLE: Defining a Before Connect Function in Sails.js\nDESCRIPTION: This snippet shows how to define a custom 'beforeConnect' function to manage socket connections based on custom logic. It allows the developer to either accept or reject connections by using the 'proceed' callback function.\nSOURCE: https://github.com/balderdashy/sails/blob/master/docs/reference/sails.config/sails.config.sockets.md#2025-04-20_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nbeforeConnect: function(handshake, proceed) {\n\n  // Send back `true` to allow the socket to connect.\n  // (Or send back `false` to reject the attempt.)\n  return proceed(undefined, true);\n\n},\n```\n\n----------------------------------------\n\nTITLE: Example of `res.badRequest()` in Sails.js\nDESCRIPTION: Illustrates a practical use case of `res.badRequest()`. It showcases how to check request parameters and return a 400 response with a descriptive error message when a condition is not met, in this case, exceeding a transaction limit.\nSOURCE: https://github.com/balderdashy/sails/blob/master/docs/reference/res/res.badRequest.md#2025-04-20_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\n\"if ( req.param('amount') > 123 )\\n  return res.badRequest(\\n    'Transaction limit exceeded. Please try again with an amount less than $123.'\\n  );\\n}\"\n```\n\n----------------------------------------\n\nTITLE: Socket Notifications for Adding Foreign Records - Sails.js - JavaScript\nDESCRIPTION: This code snippet describes the structure of notifications sent to clients subscribed to records upon adding a foreign record. This includes details about the operation performed, allowing for real-time data updates in a Sails.js application.\nSOURCE: https://github.com/balderdashy/sails/blob/master/docs/reference/blueprint-api/Add.md#2025-04-20_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\n{\\n  id: 7,\\n  verb: 'addedTo',\\n  attribute: 'involvedInPurchases',\\n  addedIds: [ 47 ]\\n}\n```\n\n----------------------------------------\n\nTITLE: Sails Project Directory Structure\nDESCRIPTION: Example of the default folder structure generated for a new Sails.js project, showing the conventional organization of API components, assets, configuration, and views\nSOURCE: https://github.com/balderdashy/sails/blob/master/docs/concepts/extending-sails/Generators/Generators.md#2025-04-20_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nmy-project\n  ‚îú‚îÄ‚îÄ api/\n  ‚îÇ   ‚îú‚îÄ controllers/\n  ‚îÇ   ‚îú‚îÄ helpers/\n  ‚îÇ   ‚îî‚îÄ models/\n  ‚îú‚îÄ‚îÄ assets/\n  ‚îÇ   ‚îî‚îÄ ‚Ä¶\n  ‚îú‚îÄ‚îÄ config/\n  ‚îÇ   ‚îî‚îÄ ‚Ä¶\n  ‚îú‚îÄ‚îÄ views/\n  ‚îÇ   ‚îî‚îÄ ‚Ä¶\n  ‚îú‚îÄ‚îÄ .gitignore\n  ‚Ä¶\n  ‚îú‚îÄ‚îÄ package.json\n  ‚îî‚îÄ‚îÄ README.md\n```\n\n----------------------------------------\n\nTITLE: Sending Socket Request on Button Click in Sails.js\nDESCRIPTION: This JavaScript snippet demonstrates how to send a socket request to the server when a button is clicked. It uses io.socket.get() to make a GET request to '/say/hello' and logs the server's response.\nSOURCE: https://github.com/balderdashy/sails/blob/master/docs/concepts/Realtime/Realtime.md#2025-04-20_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\n$('button#say-hello').click(function (){\n  io.socket.get('/say/hello', function gotResponse(data, jwRes) {\n    console.log('Server responded with status code ' + jwRes.statusCode + ' and data: ', data);\n  });\n});\n```\n\n----------------------------------------\n\nTITLE: Using `req.wantsJSON` in JavaScript\nDESCRIPTION: This code snippet demonstrates how to use `req.wantsJSON` in a Sails.js route to determine if the client is expecting a JSON response. If `req.wantsJSON` is true, it logs a message to the console. Otherwise, it assumes the client does not want a JSON response.\nSOURCE: https://github.com/balderdashy/sails/blob/master/docs/reference/req/req.wantsJSON.md#2025-04-20_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nif (req.wantsJSON) {\n  sails.log('This request wants JSON!');\n}\nelse {\n  // `req.wantsJSON` is falsy (undefined), to this request must not want JSON.\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Environment Variables for Sails.js App Deployment\nDESCRIPTION: Command to start a Sails.js application in production environment with a specific port. This approach is commonly used for production deployments.\nSOURCE: https://github.com/balderdashy/sails/blob/master/docs/concepts/Configuration/Configuration.md#2025-04-20_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nNODE_ENV=production node app.js\n```\n\n----------------------------------------\n\nTITLE: Creating Spanish Locale File in Sails.js (JSON)\nDESCRIPTION: Example of a basic Spanish locale file (config/locales/es.json) containing translated key-value pairs for internationalization in Sails.js. This demonstrates simple string mapping from English to Spanish.\nSOURCE: https://github.com/balderdashy/sails/blob/master/docs/concepts/Internationalization/Locales.md#2025-04-20_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"Hello!\": \"Hola!\",\n    \"Hello %s, how are you today?\": \"¬øHola %s, como estas?\"\n}\n```\n\n----------------------------------------\n\nTITLE: View Target Route Configuration in Sails.js\nDESCRIPTION: Demonstrates how to bind a route to a view file in Sails.js. The path is relative to the views/ folder and doesn't include the file extension.\nSOURCE: https://github.com/balderdashy/sails/blob/master/docs/concepts/Routes/RouteTargetSyntax.md#2025-04-20_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\n'GET /team': { view: 'brochure/about' }\n```\n\n----------------------------------------\n\nTITLE: Listening for Sails.js Application Events\nDESCRIPTION: Demonstrates how to listen for events emitted by a Sails.js application instance. The code shows the basic syntax for attaching an event listener to a Sails app using the on() method.\nSOURCE: https://github.com/balderdashy/sails/blob/master/docs/concepts/extending-sails/Hooks/events.md#2025-04-20_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nsails.on(eventName, eventHandlerFn);\n```\n\n----------------------------------------\n\nTITLE: Find records using cURL\nDESCRIPTION: This bash command shows how to use `curl` to make a GET request to the `/purchase` endpoint with sorting parameters. It will print the JSON response from the server to standard output.\nSOURCE: https://github.com/balderdashy/sails/blob/master/docs/reference/blueprint-api/Find.md#2025-04-20_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\ncurl http://localhost:1337/purchase?sort=createdAt%20DESC\n```\n\n----------------------------------------\n\nTITLE: Handling Custom Route Options in a Sails.js Action\nDESCRIPTION: This snippet demonstrates how to access and use custom route options within a Sails.js action. It checks if the `model` option is defined in `req.options` and uses it to dynamically access a model and create a record. It depends on lodash (`_`) and the Sails framework (`sails`).\nSOURCE: https://github.com/balderdashy/sails/blob/master/docs/reference/req/req.options/req.options.md#2025-04-20_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nmodule.exports = function receiveEvent(req, res) {\n\n  if (_.isUndefined(req.options.model) || !sails.models[req.options.model]) {\n    return res.serverError(new Error('Invalid configuration: To use `github/receive-event`, please set this route's `model` to the identity of one of your app\\'s models.  (Currently, it is `'+req.options.model+'`, which cannot be used.)'));\n  }\n\n  var GitHubEventModel = sails.models[req.options.model];\n  GitHubEventModel.create({\n    raw: req.allParams(),\n    githubId: req.param('id'),\n    // ...\n    // ... etc. (see https://developer.github.com/webhooks/#events)\n  }).exec(function(err) {\n    if (err) { return res.serverError(err); }\n\n    return res.ok();\n  });\n};\n```\n\n----------------------------------------\n\nTITLE: Using 'not-in' modifier in JavaScript\nDESCRIPTION: Shows how to use the 'not-in' modifier to exclude specific values from the query results.\nSOURCE: https://github.com/balderdashy/sails/blob/master/docs/concepts/ORM/Querylanguage.md#2025-04-20_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nvar everyoneExceptWaltersAndSkylers = await Model.find({\n  name: { '!=' : ['walter', 'skyler'] }\n});\n```\n\n----------------------------------------\n\nTITLE: Implementing multiple hook dependencies in Sails (JavaScript)\nDESCRIPTION: An example of how to make a Sails hook wait for multiple other hooks to load before initializing, using the sails.after method.\nSOURCE: https://github.com/balderdashy/sails/blob/master/docs/concepts/extending-sails/Hooks/hookspec/initialize.md#2025-04-20_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\ninitialize: async function() {\n  return new Promise((resolve)=>{\n    var eventsToWaitFor = ['hook:orm:loaded', 'hook:mygreathook:loaded'];\n    sails.after(eventsToWaitFor, ()=>{\n      resolve();\n    });\n  });\n}\n```\n\n----------------------------------------\n\nTITLE: English Locale File with Simplified Keys (JSON)\nDESCRIPTION: English locale file example using the simplified key approach, showing how keys match between different language files while values are translated.\nSOURCE: https://github.com/balderdashy/sails/blob/master/docs/concepts/Internationalization/Locales.md#2025-04-20_snippet_3\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"hello\": \"hello\",\n    \"howAreYouToday\": \"how are you today\"\n}\n```\n\n----------------------------------------\n\nTITLE: Checking Request Secure Status in Sails\nDESCRIPTION: The snippet illustrates the usage of the 'req.secure' property to determine if a request was sent over a secure connection such as HTTPS or WSS. This is crucial for applications that need to ensure data security and integrity when handling requests. Requires Sails framework setup and is used within request lifecycle handlers.\nSOURCE: https://github.com/balderdashy/sails/blob/master/docs/reference/req/req.secure.md#2025-04-20_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nreq.secure;\n```\n\n----------------------------------------\n\nTITLE: Basic Swig Template Engine Configuration\nDESCRIPTION: Basic configuration setup in config/views.js to use Swig as the template engine with Consolidate.js integration.\nSOURCE: https://github.com/balderdashy/sails/blob/master/docs/concepts/Views/ViewEngines.md#2025-04-20_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nextension: 'swig',\ngetRenderFn: ()=>{\n  // Import `consolidate`.\n  var cons = require('consolidate');\n  // Return the rendering function for Swig.\n  return cons.swig;\n}\n```\n\n----------------------------------------\n\nTITLE: Accessing Specific Cookie Value in Sails.js\nDESCRIPTION: Demonstrates how to access a specific cookie value by its name from the request cookies object. The example shows accessing a cookie named 'chocolatechip' with value 'Yummy'.\nSOURCE: https://github.com/balderdashy/sails/blob/master/docs/reference/req/req.cookies.md#2025-04-20_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nreq.cookies.chocolatechip;\n// \"Yummy\"\n```\n\n----------------------------------------\n\nTITLE: Example Usage of res.attachment() - Sails.js - JavaScript\nDESCRIPTION: This snippet demonstrates how to use res.attachment() in an asynchronous function to set the response for a file download using a specific filename taken from a database record. This facilitates organized file handling in Sails.js applications.\nSOURCE: https://github.com/balderdashy/sails/blob/master/docs/reference/res/res.attachment.md#2025-04-20_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nfn: async function({id}, exits) {\n  var file = await LegalDoc.findOne({ id });\n  if(!file) { throw 'notFound'; }\n  \n  this.res.attachment(file.downloadName);\n  var downloading = await sails.startDownload(file.uploadFd);\n  return exits.success(downloading);\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring View Engine Settings in Sails.js\nDESCRIPTION: Configuration file that specifies the templating engine and related settings for rendering server-side HTML in Sails.js. By default, it uses EJS but can be customized by changing the extension and providing a getRenderFn implementation.\nSOURCE: https://github.com/balderdashy/sails/blob/master/docs/anatomy/config/views.js.md#2025-04-20_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n# config/views.js\n```\n\n----------------------------------------\n\nTITLE: Basic Request Headers Usage in Sails.js\nDESCRIPTION: Shows the basic syntax for accessing the request headers object in Sails.js.\nSOURCE: https://github.com/balderdashy/sails/blob/master/docs/reference/req/req.headers.md#2025-04-20_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nreq.headers;\n```\n\n----------------------------------------\n\nTITLE: Implementing Hook Initialization with Event Communication in Sails.js\nDESCRIPTION: Example of how to use events in a Sails.js hook. This snippet demonstrates waiting for the controllers hook to load, performing custom operations, and then emitting a custom event when finished.\nSOURCE: https://github.com/balderdashy/sails/blob/master/lib/EVENTS.md#2025-04-20_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n// Wait until all the middleware from this app's controllers have loaded\nsails.after('hook:controllers:loaded', function () {\n\n  // Do stuff\n  // e.g. prevent any methods called `login`, `logout` or `signup`\n  // since we've opted organizationally for using CRUD on a SessionController instead\n  // .....code here........\n\n  // When you're done, fire an event in\n  sails.emit('hook:enforceRestfulSesssions:checked');\n\n});\n```\n\n----------------------------------------\n\nTITLE: Using exposeLocalsToBrowser in Sails.js EJS View\nDESCRIPTION: Demonstrates how to use the exposeLocalsToBrowser function to securely expose locals to client-side JavaScript.\nSOURCE: https://github.com/balderdashy/sails/blob/master/docs/concepts/Views/Locals.md#2025-04-20_snippet_4\n\nLANGUAGE: ejs\nCODE:\n```\n<%- exposeLocalsToBrowser() %>\n```\n\n----------------------------------------\n\nTITLE: Client-Side Code for Subscribing to Server Events\nDESCRIPTION: Client-side implementation for subscribing to server events. This code sends a request to a custom action that subscribes the client socket to Louie-related notifications and handles potential errors.\nSOURCE: https://github.com/balderdashy/sails/blob/master/docs/reference/websockets/resourceful-pubsub/subscribe.md#2025-04-20_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\n// On the client:\n\n// Send a request to the \"subscribeToLouies\" action, subscribing this client socket\n// to all future events that the server publishes about Louies.\nio.socket.get('/foo/bar/subscribeToLouies', function (data, jwr){\n  if (jwr.error) {\n    console.error('Could not subscribe to Louie-related notifications: '+jwr.error);\n    return;\n  }\n\n  console.log('Successfully subscribed.');\n\n});\n```\n\n----------------------------------------\n\nTITLE: Sails.js Method Comparison\nDESCRIPTION: Code reference showing the relationship between sails.lift() and sails.load() methods. The lift() method combines load() functionality with initialization steps.\nSOURCE: https://github.com/balderdashy/sails/blob/master/docs/reference/application/advanced-usage/lifecycle.md#2025-04-20_snippet_0\n\nLANGUAGE: text\nCODE:\n```\nlift() === load() + initialize()\n```\n\n----------------------------------------\n\nTITLE: Getting Registered Datastore Instance in Sails.js\nDESCRIPTION: Demonstrates how to retrieve the registered datastore instance (RDI) either by name or from a specific model. This is the first step for accessing low-level MySQL functionality.\nSOURCE: https://github.com/balderdashy/sails/blob/master/docs/tutorials/low-level-mysql-access.md#2025-04-20_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n// Get the named datastore\nvar rdi = sails.getDatastore('default');\n\n// Get the datastore configured for a specific model\nvar rdi = Product.getDatastore();\n```\n\n----------------------------------------\n\nTITLE: Angular Implementation for Populate\nDESCRIPTION: Example of how to use Angular to make a populate request.\nSOURCE: https://github.com/balderdashy/sails/blob/master/docs/reference/blueprint-api/Populate.md#2025-04-20_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\n$http.get('/purchase/47/cashier')\n.then(function (cashier) {\n  console.log(cashier);\n});\n```\n\n----------------------------------------\n\nTITLE: Adding Foreign Record with cURL - Sails.js - Bash\nDESCRIPTION: This snippet provides a cURL command that can be used in a terminal to perform a PUT request, adding a purchase to the employee's record. This method is useful for testing API endpoints without frontend code.\nSOURCE: https://github.com/balderdashy/sails/blob/master/docs/reference/blueprint-api/Add.md#2025-04-20_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\ncurl http://localhost:1337/employee/7/involvedInPurchases/47 -X \"PUT\"\n```\n\n----------------------------------------\n\nTITLE: Example GET request with sort and limit parameters\nDESCRIPTION: This example demonstrates how to retrieve the 30 newest purchases from the database using a GET request with the `sort` and `limit` parameters.  It is assumed that rest blueprints are enabled and a Purchase model exists.\nSOURCE: https://github.com/balderdashy/sails/blob/master/docs/reference/blueprint-api/Find.md#2025-04-20_snippet_0\n\nLANGUAGE: text\nCODE:\n```\nGET /purchase?sort=createdAt DESC&limit=30\n```\n\n----------------------------------------\n\nTITLE: Defining Cross-Datastore Many-to-Many Association in Product Model (JavaScript)\nDESCRIPTION: This snippet demonstrates how to define the reciprocal many-to-many association in a Product model that uses a different datastore than its associated model. It shows the use of the 'datastore' property and the 'collection' attribute.\nSOURCE: https://github.com/balderdashy/sails/blob/master/docs/concepts/ORM/Associations/ManytoMany.md#2025-04-20_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\n// Product.js\nmodule.exports = {\n  datastore: 'ourRedis',\n  attributes: {\n    name: 'string',\n    wishlistedBy: {\n      collection: 'user',\n      via: 'wishlist'\n    }\n  }\n};\n```\n\n----------------------------------------\n\nTITLE: Dynamic Sitemap Generation with Stream\nDESCRIPTION: Generates a sitemap XML by streaming blog post records, with pagination and sorting\nSOURCE: https://github.com/balderdashy/sails/blob/master/docs/reference/waterline/models/stream.md#2025-04-20_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nvar sitemapXml = '<urlset xmlns=\"http://www.sitemaps.org/schemas/sitemap/0.9\">';\n\nawait BlogPost.stream()\n.limit(50000)\n.sort('title ASC')\n.eachRecord((blogPost)=>{\n  sitemapXml += (\n    '<url>\\n'+\n    '  <loc>https://blog.example.com/' + _.escape(encodeURIComponent(blogPost.slug))+'</loc>\\n'+\n    '  <lastmod>'+_.escape(blogPost.updatedAt)+'</lastmod>\\n'+\n    '<changefreq>monthly</changefreq>\\n'+\n    '</url>'\n  );\n});\n\nsitemapXml += '</urlset>';\n```\n\n----------------------------------------\n\nTITLE: Describing Moduleloader Hook Functionality in Sails.js\nDESCRIPTION: This snippet explains the purpose and functionality of the `moduleloader` core hook in Sails.js. It exposes `sails.modules`, which other core hooks use to load modules from directories specified in `sails.config.paths`.\nSOURCE: https://github.com/balderdashy/sails/blob/master/lib/hooks/moduleloader/README.md#2025-04-20_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n# `moduleloader` (Core Hook)\n\nThis hook exposes `sails.modules`, a set of functions which other core hooks call to load modules from an app's configured directories in `sails.config.paths`.\n```\n\n----------------------------------------\n\nTITLE: Reloading Sails Actions with Options\nDESCRIPTION: Advanced usage of sails.reloadActions() that allows specifying hooks to skip during the action reload process. Provides more granular control over the reloading mechanism.\nSOURCE: https://github.com/balderdashy/sails/blob/master/docs/reference/application/advanced-usage/sails.reloadActions.md#2025-04-20_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nsails.reloadActions(options, cb);\n```\n\n----------------------------------------\n\nTITLE: Fetching Updated Records After Update in Sails.js\nDESCRIPTION: This snippet explains how to enable fetching of updated records immediately after performing an update. The fetch() method is chained to receive the updated records.\nSOURCE: https://github.com/balderdashy/sails/blob/master/docs/reference/waterline/models/update.md#2025-04-20_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nvar updatedUsers = await User.update({name:'Finn'})\n.set({\n  name:'Jake'\n})\n.fetch();\n\nsails.log(`Updated all ${updatedUsers.length} user${updatedUsers.length===1?'':'s'} named \"Finn\" to have the name \"Jake\".  Here they are now:`);\nsails.log(updatedUsers);\n```\n\n----------------------------------------\n\nTITLE: Checking HTML Accept Header Examples\nDESCRIPTION: Shows how req.accepts() handles requests with complex Accept headers including HTML and related formats.\nSOURCE: https://github.com/balderdashy/sails/blob/master/docs/reference/req/req.accepts.md#2025-04-20_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nreq.accepts('html');\n// -> 'html'\n\nreq.accepts('text/html');\n// -> 'text/html'\n\nreq.accepts('json');\n// -> false\n```\n\n----------------------------------------\n\nTITLE: Accessing Request Method in Sails.js\nDESCRIPTION: This snippet demonstrates how to access the HTTP request method (verb) using `req.method` in a Sails.js environment. It is an essential part of handling HTTP requests, allowing the server to determine the type of action being requested by the client.\nSOURCE: https://github.com/balderdashy/sails/blob/master/docs/reference/req/req.method.md#2025-04-20_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nreq.method;\n```\n\nLANGUAGE: JavaScript\nCODE:\n```\n// -> \"POST\"\n```\n\n----------------------------------------\n\nTITLE: Initializing a Waterline Query\nDESCRIPTION: This snippet demonstrates how to initialize a query instance using the `find()` method of a Waterline model. The query is not executed immediately but rather represents a deferred action.\nSOURCE: https://github.com/balderdashy/sails/blob/master/docs/reference/waterline/queries/queries.md#2025-04-20_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nvar query = Zookeeper.find();\n```\n\n----------------------------------------\n\nTITLE: Programmatically Configuring sails.io.js\nDESCRIPTION: This snippet demonstrates how to programmatically configure the sails.io.js client by setting properties on the io.sails object. In this case, it sets a custom URL for the socket connection.\nSOURCE: https://github.com/balderdashy/sails/blob/master/docs/reference/websockets/sails.io.js/sails.io.js.md#2025-04-20_snippet_3\n\nLANGUAGE: html\nCODE:\n```\n<script src=\"/js/dependencies/sails.io.js\"></script>\n<script type=\"text/javascript\">\n  io.sails.url = 'https://myapp.com';\n</script>\n```\n\n----------------------------------------\n\nTITLE: Basic Custom Config Access in Sails.js\nDESCRIPTION: Shows the basic syntax for accessing custom configuration values in Sails.js applications.\nSOURCE: https://github.com/balderdashy/sails/blob/master/docs/reference/application/sails.config.custom.md#2025-04-20_snippet_0\n\nLANGUAGE: usage\nCODE:\n```\nsails.config.custom;\n```\n\n----------------------------------------\n\nTITLE: Return Value Structure Example\nDESCRIPTION: Shows the structure of the dictionary object returned by sails.getRouteFor() containing the HTTP method and URL.\nSOURCE: https://github.com/balderdashy/sails/blob/master/docs/reference/application/advanced-usage/sails.getRouteFor.md#2025-04-20_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\n{\n  method: 'post',\n  url: '/auth/login'\n}\n```\n\n----------------------------------------\n\nTITLE: Example Navbar Partial Implementation\nDESCRIPTION: Shows a complete navbar partial implementation with EJS comments and basic navigation structure.\nSOURCE: https://github.com/balderdashy/sails/blob/master/docs/concepts/Views/Partials.md#2025-04-20_snippet_1\n\nLANGUAGE: ejs\nCODE:\n```\n<%\n/**\n * views/partials/navbar.ejs\n *\n * > Note: This EJS comment won't show up in the ejs served to the browser.\n * > So you can be as verbose as you like.  Just be careful not to inadvertently\n * > type a percent sign followed by a greater-than sign (it'll bust you out of\n * > the EJS block).\n *\n */%>\n<nav class=\"navbar\">\n  <a href=\"/\">Dashboard</a>\n  <a href=\"/inbox\">Inbox</a>\n</nav>\n```\n\n----------------------------------------\n\nTITLE: Accessing Locals in EJS Templates (Sails.js)\nDESCRIPTION: Demonstrates the three types of EJS template tags for including locals in views: HTML-escaped, raw HTML, and JavaScript execution.\nSOURCE: https://github.com/balderdashy/sails/blob/master/docs/concepts/Views/Locals.md#2025-04-20_snippet_0\n\nLANGUAGE: ejs\nCODE:\n```\n<div>Logged in as <a><%= user.fullName %></a>.</div>\n```\n\nLANGUAGE: ejs\nCODE:\n```\n<%- someRawHTML %>\n```\n\nLANGUAGE: ejs\nCODE:\n```\n<% if (!loggedIn) { %>  <a>Logout</a>  <% } %>\n```\n\n----------------------------------------\n\nTITLE: Updating Asset Pipeline for Handlebars in Sails.js\nDESCRIPTION: JavaScript code to update the asset pipeline configuration in Sails.js to use Handlebars templates instead of underscore templates.\nSOURCE: https://github.com/balderdashy/sails/blob/master/docs/concepts/Assets/TaskAutomation.md#2025-04-20_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\n// tasks/pipeline.js\n// --------------------------------\n// asset pipeline\n\nvar cssFilesToInject = [\n  'styles/**/*.css'\n];\n\nvar jsFilesToInject = [\n  'js/socket.io.js',\n  'js/sails.io.js',\n  'js/connection.example.js',\n  'js/**/*.js'\n];\n\n// We change this glob pattern to include all files in\n// the templates/ direcotry that end in the extension .hbs\nvar templateFilesToInject = [\n  'templates/**/*.hbs'\n];\n\nmodule.exports = {\n  cssFilesToInject: cssFilesToInject.map(function(path) {\n    return '.tmp/public/' + path;\n  }),\n  jsFilesToInject: jsFilesToInject.map(function(path) {\n    return '.tmp/public/' + path;\n  }),\n  templateFilesToInject: templateFilesToInject.map(function(path) {\n    return 'assets/' + path;\n  })\n};\n```\n\n----------------------------------------\n\nTITLE: Basic Usage of sails.lower()\nDESCRIPTION: Demonstrates the basic syntax for calling sails.lower() with a callback parameter.\nSOURCE: https://github.com/balderdashy/sails/blob/master/docs/reference/application/advanced-usage/sails.lower.md#2025-04-20_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nsails.lower(callback);\n```\n\n----------------------------------------\n\nTITLE: Basic Usage Syntax for .tolerate() Method in Sails.js\nDESCRIPTION: Shows the basic syntax pattern for using the .tolerate() method in Sails.js with filter and optional handler parameters.\nSOURCE: https://github.com/balderdashy/sails/blob/master/docs/reference/waterline/queries/tolerate.md#2025-04-20_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n.tolerate(filter, handler)\n```\n\n----------------------------------------\n\nTITLE: Collection Population Response Example\nDESCRIPTION: Shows the expected JSON response when populating a collection association (purchases for an employee).\nSOURCE: https://github.com/balderdashy/sails/blob/master/docs/reference/blueprint-api/Populate.md#2025-04-20_snippet_6\n\nLANGUAGE: json\nCODE:\n```\n[\n  {\n    \"amount\": 10000,\n    \"createdAt\": 1485476060873,\n    \"updatedAt\": 1485476060873,\n    \"id\": 47,\n    \"cashier\": 7\n  },\n  {\n    \"amount\": 50,\n    \"createdAt\": 1487015460792,\n    \"updatedAt\": 1487015476357,\n    \"id\": 52,\n    \"cashier\": 7\n  }\n]\n```\n\n----------------------------------------\n\nTITLE: Setting MongoDB Adapter in Production Environment\nDESCRIPTION: Configures the MongoDB adapter in the production environment configuration file (config/env/production.js).\nSOURCE: https://github.com/balderdashy/sails/blob/master/docs/tutorials/mongo.md#2025-04-20_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nadapter: 'sails-mongo',\n```\n\n----------------------------------------\n\nTITLE: Association Update Request Example\nDESCRIPTION: Example JSON payload for updating a record's association with another model via PATCH request.\nSOURCE: https://github.com/balderdashy/sails/blob/master/docs/reference/blueprint-api/Update.md#2025-04-20_snippet_3\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"store\": 25\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Pet Model in Waterline\nDESCRIPTION: JavaScript code defining a Pet model using Waterline's Collection.extend method. This includes attribute definitions and an association with the User model.\nSOURCE: https://github.com/balderdashy/sails/blob/master/docs/concepts/ORM/standalone-usage.md#2025-04-20_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nvar petCollection = Waterline.Collection.extend({\n  identity: 'pet',\n  datastore: 'default',\n  primaryKey: 'id'\n  \n  attributes: {\n    id: {\n        type: 'number',\n        autoMigrations: {autoIncrement: true}\n    },\n    breed: {type:'string'},\n    type: {type:'string'},\n    name: {type:'string'},\n\n    // Add a reference to User\n    owner: {\n      model: 'user'\n    }\n  }\n});\n```\n\n----------------------------------------\n\nTITLE: Using sails.sockets.leaveAll() Method in Sails.js\nDESCRIPTION: The basic syntax for using the leaveAll() method in Sails.js. This method takes a room name and an optional callback function that executes when the operation is complete on the current server.\nSOURCE: https://github.com/balderdashy/sails/blob/master/docs/reference/websockets/sails.sockets/sails.sockets.leaveAll.md#2025-04-20_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nsails.sockets.leaveAll(roomName, cb);\n```\n\n----------------------------------------\n\nTITLE: Generating a User Controller in Sails.js\nDESCRIPTION: Command to generate a new UserController.js file using the Sails CLI. The generated controller is an empty module ready for custom methods.\nSOURCE: https://github.com/balderdashy/sails/blob/master/docs/concepts/ActionsAndControllers/GeneratingActions.md#2025-04-20_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\n$ sails generate controller user\n```\n\nLANGUAGE: javascript\nCODE:\n```\n/**\n * UserController.js\n *\n * @description :: Server-side controller action for managing users.\n * @help        :: See https://sailsjs.com/documentation/concepts/controllers\n */\nmodule.exports = {\n\n}\n```\n\n----------------------------------------\n\nTITLE: Sending JSONP Response in Sails.js - JavaScript\nDESCRIPTION: This snippet demonstrates how to use the res.jsonp() method to send a JSONP response when a callback parameter is provided. If the callback parameter is absent, the response is sent as JSON. The method is designed to be the terminating action for the response workflow in Sails.js applications.\nSOURCE: https://github.com/balderdashy/sails/blob/master/docs/reference/res/res.jsonp.md#2025-04-20_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nreturn res.jsonp(data);\n```\n\nLANGUAGE: javascript\nCODE:\n```\nreturn res.jsonp([\n  {\n    name: 'Thelma',\n    id: 1\n  }, {\n    name: 'Leonardo',\n    id: 2\n  }\n]);\n```\n\nLANGUAGE: javascript\nCODE:\n```\ngotStuff([{name: 'Thelma', id: 1}, {name: 'Louise', id: 2}])\n```\n\n----------------------------------------\n\nTITLE: Illustrating MySQL Adapter create() Method in Sails\nDESCRIPTION: This example demonstrates how a MySQLAdapter implements the create() method. It explains that the method internally uses MySQL-specific operations to perform an INSERT query.\nSOURCE: https://github.com/balderdashy/sails/blob/master/docs/concepts/extending-sails/Adapters/Adapters.md#2025-04-20_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nMySQLAdapter.create()\n```\n\n----------------------------------------\n\nTITLE: Checking JSON Accept Header Examples\nDESCRIPTION: Demonstrates how req.accepts() behaves with an Accept: application/json header, showing both successful and failed checks for different media types.\nSOURCE: https://github.com/balderdashy/sails/blob/master/docs/reference/req/req.accepts.md#2025-04-20_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nreq.accepts('application/json');\n// -> 'application/json'\n\nreq.accepts('json');\n// -> 'json'\n\nreq.accepts('image/png');\n// -> false\n```\n\n----------------------------------------\n\nTITLE: Updating Waterline Criteria Format in Sails v1.0 (JavaScript)\nDESCRIPTION: Example of the new format for Waterline criteria in Sails v1.0, separating 'where' clauses from other query options.\nSOURCE: https://github.com/balderdashy/sails/blob/master/docs/upgrading/To1.0.md#2025-04-20_snippet_14\n\nLANGUAGE: javascript\nCODE:\n```\n{\n  where: { username: 'santaclaus' },\n  limit: 4,\n  select: ['beardLength', 'lat', 'long']\n}\n```\n\n----------------------------------------\n\nTITLE: Feature Proposals Table in Markdown\nDESCRIPTION: A markdown table showing pending feature proposals for the Sails framework, including proposals for select/omit clauses in associations and test folder generation.\nSOURCE: https://github.com/balderdashy/sails/blob/master/ROADMAP.md#2025-04-20_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\nFeature                                          | Proposal                                                                              | Summary\n :---------------------------------------------- | :------------------------------------------------------------------------------------ | :----------------------------------------------------------------------------------------------------------\n Allow select/omit clauses when populating a singular association | https://trello.com/c/yM9WPxzr/107-waterline-fs2q-tolerate-a-subcriteria-being-provided-to-populate-for-a-singular-associations-but-only-if-it-exclusively-contains | Don't throw an error if these clauses are included in a `populate` for a singular association (but still error if actual \"where\" criteria are used)\n Generate `test/` folder in new Sails apps       | [#2499](https://github.com/balderdashy/sails/pull/2499#issuecomment-171556544)        | Generate a generic setup for mocha tests in all new Sails apps.  Originally suggested by [@jedd-ahyoung](https://github.com/jedd-ahyoung).\n```\n\n----------------------------------------\n\nTITLE: Advanced Navbar Partial with User Authentication\nDESCRIPTION: Demonstrates a navbar partial that uses inherited view locals to handle user authentication states.\nSOURCE: https://github.com/balderdashy/sails/blob/master/docs/concepts/Views/Partials.md#2025-04-20_snippet_3\n\nLANGUAGE: ejs\nCODE:\n```\n<%\n/**\n * views/partials/navbar.ejs\n *\n * The navbar at the top of the page.\n *\n * @needs {Dictionary} currentUser\n *   @property {Boolean} isLoggedIn\n *   @property {String} username\n */%>\n<nav class=\"navbar\">\n  <div class=\"links\">\n    <a href=\"/\">Dashboard</a>\n    <a href=\"/inbox\">Inbox</a>\n  </div>\n  <span class=\"login-or-signup\"><%\n  // If the user accessing this page is logged in...\n  if (currentUser.isLoggedIn) {\n  %>\n    You are signed in as <a href=\"/<%= currentUser.username %>\"><%= currentUser.username %></a>.\n  <%\n  }\n  // Otherwise the user accessing this page must be a visitor:\n  else {\n  %>\n    <a href=\"/login\">Log in</a>\n  <%\n  }\n  %>\n  </span>\n</nav>\n```\n\n----------------------------------------\n\nTITLE: Alternative Sails Request Syntax\nDESCRIPTION: Shows alternative syntax patterns for making requests including using URL with body, URL with callback, or URL with both body and callback.\nSOURCE: https://github.com/balderdashy/sails/blob/master/docs/reference/application/advanced-usage/sails.request.md#2025-04-20_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nsails.request(url, body)\nsails.request(url, callback)\nsails.request(url, body, callback)\n```\n\n----------------------------------------\n\nTITLE: Configuring Babel Task in Sails.js with Grunt\nDESCRIPTION: This snippet shows the configuration file for the Grunt Babel task. The task transpiles modern JavaScript (ES6, ES7, ES8) to ensure compatibility with older browsers. By default, it targets .js files in the assets/js/ directory and subfolders.\nSOURCE: https://github.com/balderdashy/sails/blob/master/docs/anatomy/tasks/config/babel.js.md#2025-04-20_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n# tasks/config/babel.js\n```\n\n----------------------------------------\n\nTITLE: Starting a Sails.js Server in Shell\nDESCRIPTION: Shows how to navigate into a Sails.js project directory and start the server. This lifts the Sails application, making it accessible via web browser.\nSOURCE: https://github.com/balderdashy/sails/blob/master/README.md#2025-04-20_snippet_3\n\nLANGUAGE: sh\nCODE:\n```\n# cd into the new folder\ncd my-app\n\n# fire up the server\nsails lift\n```\n\n----------------------------------------\n\nTITLE: Calling a Sails.js Helper with Named Arguments (JavaScript)\nDESCRIPTION: Shows how to call a Sails.js helper using named arguments with the .with() method. This approach allows for more explicit parameter passing.\nSOURCE: https://github.com/balderdashy/sails/blob/master/docs/concepts/Helpers/Helpers.md#2025-04-20_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nconst greeting = await sails.helpers.formatWelcomeMessage.with({ name: 'Bubba' });\n```\n\n----------------------------------------\n\nTITLE: Connecting to a Socket with a Custom Cookie Parameter\nDESCRIPTION: This snippet demonstrates how to connect to a Sails.js socket while overriding the session cookie using a query parameter. This is particularly useful for non-browser clients that may not provide a session cookie automatically.\nSOURCE: https://github.com/balderdashy/sails/blob/master/docs/reference/sails.config/sails.config.sockets.md#2025-04-20_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nvar hotSocket = io.sails.connect('http://localhost:1337?cookie=smokeybear');\n```\n\n----------------------------------------\n\nTITLE: Example Base URL Return Value\nDESCRIPTION: Shows a typical return value from the getBaseUrl() method when no custom configuration is applied\nSOURCE: https://github.com/balderdashy/sails/blob/master/docs/reference/application/advanced-usage/sails.getBaseUrl.md#2025-04-20_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nhttp://localhost:1337\n```\n\n----------------------------------------\n\nTITLE: Socket Notification Message - Javascript\nDESCRIPTION: This Javascript snippet shows the format of the socket notification message sent to clients watching the model after a new record is created. It includes the ID, verb, and data.\nSOURCE: https://github.com/balderdashy/sails/blob/master/docs/reference/blueprint-api/Create.md#2025-04-20_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nid: 47,\nverb: 'created',\ndata: {\n  id: 47,\n  name: 'Applejack',\n  hobby: 'pickin',\n  createdAt: 1485550575626,\n  updatedAt: 1485550603847\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring CORS for CSRF Token Route in Sails v1.0 (JavaScript)\nDESCRIPTION: Example of adding custom CORS settings to the CSRF token granting route in Sails v1.0 config/routes.js file.\nSOURCE: https://github.com/balderdashy/sails/blob/master/docs/upgrading/To1.0.md#2025-04-20_snippet_16\n\nLANGUAGE: javascript\nCODE:\n```\n'GET /csrfToken': {\n  action: 'security/grant-csrf-token',\n  cors: {\n    allowOrigins: ['http://foobar.com', 'https://owlhoot.com']\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Initializing sails.io.js in Node.js\nDESCRIPTION: This code demonstrates how to initialize the sails.io.js library in a Node.js environment. It requires both the sails.io.js and socket.io-client modules to create and connect a new socket.\nSOURCE: https://github.com/balderdashy/sails/blob/master/docs/reference/websockets/sails.io.js/sails.io.js.md#2025-04-20_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nvar io = require('sails.io.js')( require('socket.io-client') );\n```\n\n----------------------------------------\n\nTITLE: Safe DOM Manipulation with jQuery\nDESCRIPTION: Shows how to safely modify DOM content using jQuery's text() method instead of html() to prevent XSS vulnerabilities when injecting user data.\nSOURCE: https://github.com/balderdashy/sails/blob/master/docs/concepts/Security/XSS.md#2025-04-20_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nvar $welcomeMsg = $('#signup').find('[is=\"welcome-msg\"]');\nwelcomeMsg.text('Hello, '+window.SAILS_LOCALS.me.username+'!');\n\n// Avoid using `$(...).html()` to inject untrusted data.\n// Even if you know an XSS is not possible under particular circumstances,\n// accidental escaping issues can cause really, really annoying client-side bugs.\n```\n\n----------------------------------------\n\nTITLE: Loading Sails Application - JavaScript\nDESCRIPTION: This snippet demonstrates how to load a Sails application using the 'sailsApp.load()' method, specifying configuration overrides as needed. It handles potential errors occurring during the load process.\nSOURCE: https://github.com/balderdashy/sails/blob/master/docs/reference/application/advanced-usage/sails.load.md#2025-04-20_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nsailsApp.load(configOverrides, function (err) {\n\n});\n```\n\n----------------------------------------\n\nTITLE: Configuring Production Port in Sails.js\nDESCRIPTION: Sets the port configuration for a Sails.js application in production. This setting ensures that the application listens on port 80, which is the standard HTTP port.\nSOURCE: https://github.com/balderdashy/sails/blob/master/docs/concepts/Deployment/Deployment.md#2025-04-20_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nport: 80\n```\n\n----------------------------------------\n\nTITLE: Example API Request for Employee Removal\nDESCRIPTION: Example DELETE request to remove an employee from a store's employees of the month collection.\nSOURCE: https://github.com/balderdashy/sails/blob/master/docs/reference/blueprint-api/Remove.md#2025-04-20_snippet_1\n\nLANGUAGE: text\nCODE:\n```\nDELETE /store/16/employeesOfTheMonth/7\n```\n\n----------------------------------------\n\nTITLE: Global Services Access Pattern in Sails.js\nDESCRIPTION: Shows how services are globally accessible using their globalId. A service defined in api/services/Baz.js becomes globally available as Baz.\nSOURCE: https://github.com/balderdashy/sails/blob/master/docs/concepts/Globals/Globals.md#2025-04-20_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\n// api/services/Baz.js -> globally accessible as Baz\nBaz.doSomething();\n```\n\n----------------------------------------\n\nTITLE: Helper Directory Structure in Sails.js\nDESCRIPTION: Shows the recommended directory structure for organizing helpers into subdirectories, demonstrating how to group related helpers like user and item helpers.\nSOURCE: https://github.com/balderdashy/sails/blob/master/docs/concepts/Helpers/Helpers.md#2025-04-20_snippet_7\n\nLANGUAGE: plaintext\nCODE:\n```\napi/\n helpers/\n  user/\n   find-by-username.js\n   toggle-admin-role.js\n   validate-username.js\n  item/\n   set-price.js\n   apply-coupon.js\n```\n\n----------------------------------------\n\nTITLE: Adding method-override Middleware in Sails.js 1.0\nDESCRIPTION: Instructions for adding the method-override middleware, which has been removed in Sails.js 1.0, including the necessary configuration in config/http.js.\nSOURCE: https://github.com/balderdashy/sails/blob/master/docs/upgrading/To1.0.md#2025-04-20_snippet_10\n\nLANGUAGE: javascript\nCODE:\n```\nmethodOverride: require('method-override')()\n```\n\n----------------------------------------\n\nTITLE: Response Target Configuration in Sails.js\nDESCRIPTION: Demonstrates mapping a route directly to a custom response in the api/responses folder.\nSOURCE: https://github.com/balderdashy/sails/blob/master/docs/concepts/Routes/RouteTargetSyntax.md#2025-04-20_snippet_8\n\nLANGUAGE: javascript\nCODE:\n```\n'/foo': { response: 'notFound' }\n```\n\n----------------------------------------\n\nTITLE: Basic Usage of sails.sockets.leave() Method in JavaScript\nDESCRIPTION: Basic syntax for unsubscribing a socket from a room using the sails.sockets.leave() method. It shows the two supported function signatures.\nSOURCE: https://github.com/balderdashy/sails/blob/master/docs/reference/websockets/sails.sockets/sails.sockets.leave.md#2025-04-20_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nsails.sockets.leave(socket, roomName);\n```\n\n----------------------------------------\n\nTITLE: Configuring Grunt cssmin Task for CSS Minification in Sails.js\nDESCRIPTION: This code snippet configures the cssmin Grunt task to minify the concatenated CSS file. It specifies the source file as '.tmp/public/concat/production.css' and the destination as '.tmp/public/min/production.min.css'.\nSOURCE: https://github.com/balderdashy/sails/blob/master/docs/anatomy/tasks/config/cssmin.js.md#2025-04-20_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nmodule.exports = function(grunt) {\n\n  grunt.config.set('cssmin', {\n    dist: {\n      src: ['.tmp/public/concat/production.css'],\n      dest: '.tmp/public/min/production.min.css'\n    }\n  });\n\n  grunt.loadNpmTasks('grunt-contrib-cssmin');\n};\n```\n\n----------------------------------------\n\nTITLE: Installing Sails.js via npm in Shell\nDESCRIPTION: Shows how to install the latest stable release of Sails.js globally using npm. This is the recommended way to install Sails for most users.\nSOURCE: https://github.com/balderdashy/sails/blob/master/README.md#2025-04-20_snippet_1\n\nLANGUAGE: sh\nCODE:\n```\n# Get the latest stable release of Sails\n$ npm install sails -g\n```\n\n----------------------------------------\n\nTITLE: Basic Usage of .unsubscribe() Method in Sails.js\nDESCRIPTION: Demonstrates the basic syntax for unsubscribing a client socket from database records using the .unsubscribe() method. Takes a socket request object and an array of record IDs as parameters.\nSOURCE: https://github.com/balderdashy/sails/blob/master/docs/reference/websockets/resourceful-pubsub/unsubscribe.md#2025-04-20_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nSomething.unsubscribe(req, ids);\n```\n\n----------------------------------------\n\nTITLE: Basic Stream Usage with Sails Waterline ORM\nDESCRIPTION: Demonstrates how to stream and iterate over database records using .eachRecord() method, with basic error handling and logging\nSOURCE: https://github.com/balderdashy/sails/blob/master/docs/reference/waterline/models/stream.md#2025-04-20_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nawait User.stream({name:'Finn'})\n.eachRecord(async (user)=>{\n\n  if (Math.random() > 0.5) {\n    throw new Error('Oops!  This is a simulated error.');\n  }\n\n  sails.log(`Found a user ${user.id} named Finn.`);\n});\n```\n\n----------------------------------------\n\nTITLE: Configuring Custom View Engine in Sails v1.0 (JavaScript)\nDESCRIPTION: Example of configuring a custom view engine (Swig) with Consolidate in Sails v1.0 config/views.js file.\nSOURCE: https://github.com/balderdashy/sails/blob/master/docs/upgrading/To1.0.md#2025-04-20_snippet_17\n\nLANGUAGE: javascript\nCODE:\n```\nextension: 'swig',\ngetRenderFn: function() {\n  // Import `consolidate`.\n  var cons = require('consolidate');\n  // Import `swig`.\n  var swig = require('swig');\n  // Configure `swig`.\n  swig.setDefaults({tagControls: ['{?', '?}']});\n  // Set the module that Consolidate uses for Swig.\n  cons.requires.swig = swig;\n  // Return the rendering function for Swig.\n  return cons.swig;\n}\n```\n\n----------------------------------------\n\nTITLE: Disconnecting a Socket with disconnect() in JavaScript\nDESCRIPTION: Disconnects a SailsSocket instance from the server. Throws an error if the socket is already disconnected.\nSOURCE: https://github.com/balderdashy/sails/blob/master/docs/reference/websockets/sails.io.js/SailsSocket/methods.md#2025-04-20_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nio.socket.disconnect();\n```\n\n----------------------------------------\n\nTITLE: Configuring Custom CORS Route Settings in Sails.js\nDESCRIPTION: Demonstrates how to configure cross-origin resource sharing (CORS) for a specific route, allowing GET, PUT, and POST requests from specific domains\nSOURCE: https://github.com/balderdashy/sails/blob/master/docs/reference/sails.config/sails.config.security.md#2025-04-20_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n'/foo/bar': {\n  action: 'foo/bar',\n  cors: {\n    allowOrigins: ['http://foobar.com','https://owlhoot.com'],\n    allowRequestMethods: 'GET,PUT,POST,OPTIONS,HEAD'\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Retrieving Socket ID using sails.sockets.getId() in JavaScript\nDESCRIPTION: This snippet demonstrates the basic usage of the `sails.sockets.getId()` method to parse the socket ID from an incoming socket request. It takes a socket request object as an argument and returns the socket ID.\nSOURCE: https://github.com/balderdashy/sails/blob/master/docs/reference/websockets/sails.sockets/sails.sockets.getid.md#2025-04-20_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nsails.sockets.getId(req);\n```\n\n----------------------------------------\n\nTITLE: Accessing Original Request URL in JavaScript (Sails.js)\nDESCRIPTION: This snippet demonstrates how to access the original request URL using the `req.originalUrl` property in a Sails.js application. It is used to perform internal routing by retaining the initial URL requested by the client, even if `req.url` is modified elsewhere in the code. The snippet shows an example where the output of `req.originalUrl` is the request path for a search action.\nSOURCE: https://github.com/balderdashy/sails/blob/master/docs/reference/req/req.originalUrl.md#2025-04-20_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nreq.originalUrl;\\n\\n// => \"/search\"\n```\n\n----------------------------------------\n\nTITLE: Sails.js Production Startup Command\nDESCRIPTION: Demonstrates the correct way to start a Sails.js application in production environment using node app.js instead of sails lift.\nSOURCE: https://github.com/balderdashy/sails/blob/master/docs/concepts/Deployment/Deployment.md#2025-04-20_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\nnode app.js\n```\n\n----------------------------------------\n\nTITLE: Socket Notification Structure for Destroyed Record\nDESCRIPTION: This snippet outlines the format of the socket notification sent to clients when a record is destroyed. It includes keys for the event name, ID of the destroyed record, and a dictionary of the previous attribute values.\nSOURCE: https://github.com/balderdashy/sails/blob/master/docs/reference/blueprint-api/Destroy.md#2025-04-20_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nid: 4,\nverb: 'destroyed',\nprevious: {\n  name: 'Pinkie Pie',\n  hobby: 'kickin',\n  createdAt: 1485550644076,\n  updatedAt: 1485550644076\n}\n```\n\n----------------------------------------\n\nTITLE: Sending a JSON object with status code using `res.json()`\nDESCRIPTION: Shows how to set a custom status code (201) along with a JSON object containing an 'id' property. This example combines setting the HTTP status code with sending JSON data.\nSOURCE: https://github.com/balderdashy/sails/blob/master/docs/reference/res/res.json.md#2025-04-20_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\n```javascript\nreturn res.status(201).json({ id: 201721 });\n```\n```\n\n----------------------------------------\n\nTITLE: Creating Additional SailsSocket Instances in JavaScript\nDESCRIPTION: This code demonstrates how to create additional SailsSocket instances beyond the default io.socket using the io.sails.connect method. This is useful for advanced use cases like automated testing or when multiple socket connections are needed.\nSOURCE: https://github.com/balderdashy/sails/blob/master/docs/reference/websockets/sails.io.js/SailsSocket/SailsSocket.md#2025-04-20_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nvar newSailsSocket = io.sails.connect();\n```\n\n----------------------------------------\n\nTITLE: Adding Custom CSRF Token Route in Sails v1.0\nDESCRIPTION: Configuration code for manually adding the CSRF token route that was previously provided by default. This should be added to the config/routes.js file if your application uses CSRF protection.\nSOURCE: https://github.com/balderdashy/sails/blob/master/docs/upgrading/To1.0.md#2025-04-20_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\n'GET /csrfToken': { action: 'security/grant-csrf-token' }\n```\n\n----------------------------------------\n\nTITLE: Including sails.io.js in HTML (Browser)\nDESCRIPTION: This snippet shows how to include the sails.io.js library in an HTML file. The library is bundled with Sails apps by default and provides a global io.socket object for WebSocket communication.\nSOURCE: https://github.com/balderdashy/sails/blob/master/docs/reference/websockets/sails.io.js/sails.io.js.md#2025-04-20_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<script type=\"text/javascript\" src=\"/js/dependencies/sails.io.js\"></script>\n```\n\n----------------------------------------\n\nTITLE: Specifying Layout in Route Configuration (JavaScript)\nDESCRIPTION: This snippet demonstrates how to specify a custom layout for a route in Sails.js. It sets the view to 'users/privacy' and uses the 'users' layout.\nSOURCE: https://github.com/balderdashy/sails/blob/master/docs/concepts/Views/Layouts.md#2025-04-20_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n'get /privacy': {\n    view: 'users/privacy',\n    locals: {\n      layout: 'users'\n    }\n  },\n```\n\n----------------------------------------\n\nTITLE: Disabling Grunt Hook in Sails.js via .sailsrc Configuration\nDESCRIPTION: This configuration snippet shows how to disable the Grunt hook in a Sails.js application by setting the grunt property to false in the .sailsrc file's hooks section.\nSOURCE: https://github.com/balderdashy/sails/blob/master/docs/concepts/Assets/DisablingGrunt.md#2025-04-20_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"hooks\": {\n        \"grunt\": false\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Updating Blueprint Route in Sails.js 1.0\nDESCRIPTION: Example of how to manually add a blueprint route that is no longer automatically generated in Sails.js 1.0. This should be added to the config/routes.js file.\nSOURCE: https://github.com/balderdashy/sails/blob/master/docs/upgrading/To1.0.md#2025-04-20_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\n\"/user/tickle/:id?\": \"UserController.tickle\"\n```\n\n----------------------------------------\n\nTITLE: Using .query() with Sails Waterline\nDESCRIPTION: The `.query()` method allows performing raw SQL queries using a model's datastore in Sails/Waterline. It is deprecated as of Sails v1.0, and it does not support promise-based usage or `.exec()`. It provides raw access directly to the database driver and is only available on models configured to use a SQL database. To utilize this method, the SQL query string, an array of values to escape, and a callback function are required.\nSOURCE: https://github.com/balderdashy/sails/blob/master/docs/reference/waterline/models/query.md#2025-04-20_snippet_0\n\nLANGUAGE: usage\nCODE:\n```\nSomeModel.query(sql, valuesToEscape, function(err, rawResult) {\n\n});\n```\n\n----------------------------------------\n\nTITLE: Configuring PostgreSQL Connection in Sails.js\nDESCRIPTION: Basic configuration for PostgreSQL database connection including adapter specification and URL structure.\nSOURCE: https://github.com/balderdashy/sails/blob/master/docs/concepts/extending-sails/Adapters/adapterList.md#2025-04-20_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nadapter: 'sails-postgresql',\nurl: 'postgresql://user:password@host:port/database',\n```\n\n----------------------------------------\n\nTITLE: Installing Consolidate for Custom View Engines in Sails v1.0\nDESCRIPTION: Command for installing the consolidate package, which is required when using view engines other than EJS in Sails v1.0. This is needed for proper configuration of alternative template engines.\nSOURCE: https://github.com/balderdashy/sails/blob/master/docs/upgrading/To1.0.md#2025-04-20_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\nnpm install --save consolidate\n```\n\n----------------------------------------\n\nTITLE: Handling 'connect' Event in Sails.js\nDESCRIPTION: Example of binding a handler for the 'connect' event, which is triggered when the socket connects to the Sails server. This is not necessary for most apps as Sails handles connection automatically.\nSOURCE: https://github.com/balderdashy/sails/blob/master/docs/reference/websockets/sails.io.js/io.socket.on.md#2025-04-20_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nio.socket.on('connect', function onConnect(){\n  console.log('This socket is now connected to the Sails server.');\n});\n```\n\n----------------------------------------\n\nTITLE: Basic .meta() Method Usage in Waterline Query\nDESCRIPTION: Shows the basic syntax for using .meta() to provide additional query configuration options in a Waterline ORM method call.\nSOURCE: https://github.com/balderdashy/sails/blob/master/docs/reference/waterline/queries/meta.md#2025-04-20_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\n.meta(options)\n```\n\n----------------------------------------\n\nTITLE: Basic Partial Include in EJS\nDESCRIPTION: Demonstrates the basic syntax for including a partial view in an EJS template using the partial() function.\nSOURCE: https://github.com/balderdashy/sails/blob/master/docs/concepts/Views/Partials.md#2025-04-20_snippet_0\n\nLANGUAGE: ejs\nCODE:\n```\n<%- partial('./partials/navbar.ejs') %>\n```\n\n----------------------------------------\n\nTITLE: Custom Route Configuration in Sails.js\nDESCRIPTION: This snippet shows an example of configuring a custom route in Sails.js.  The route maps a POST request to the `github/receive-event` action, allowing for custom logic to handle incoming requests.\nSOURCE: https://github.com/balderdashy/sails/blob/master/docs/reference/req/req.options/req.options.md#2025-04-20_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\n'POST /my-cool-webhooks/github/doings-and-things/incoming': {\n  action: 'github/receive-event',\n}\n```\n\n----------------------------------------\n\nTITLE: Using sails.on() Method for Event Handling\nDESCRIPTION: Example of using sails.on() to register an event handler that fires every time a specific event is triggered, with support for multiple arguments.\nSOURCE: https://github.com/balderdashy/sails/blob/master/lib/EVENTS.md#2025-04-20_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nsails.on('hook:yourHookID:someEvent', function yourEventHandler ( /* a, b, c, ..., z */ ) {\n  // your implementation\n});\n```\n\n----------------------------------------\n\nTITLE: Reconnecting a Socket with reconnect() in JavaScript\nDESCRIPTION: Reconnects a SailsSocket instance to a server after it's been disconnected. Uses the instance's currently configured properties and throws an error if the socket is already connected.\nSOURCE: https://github.com/balderdashy/sails/blob/master/docs/reference/websockets/sails.io.js/SailsSocket/methods.md#2025-04-20_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nio.socket.reconnect();\n```\n\n----------------------------------------\n\nTITLE: Sending a JSON object with `res.json()`\nDESCRIPTION: Illustrates how to send a JSON object containing a 'firstName' property with `res.json()`. This example shows a simple use case for sending structured data to the client.\nSOURCE: https://github.com/balderdashy/sails/blob/master/docs/reference/res/res.json.md#2025-04-20_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\n```javascript\nreturn res.json({ firstName: 'Tobi' });\n```\n```\n\n----------------------------------------\n\nTITLE: Example JSON Response for Deleted Record\nDESCRIPTION: This code snippet provides an example of the JSON response that is returned after successfully deleting a record. It includes the name, hobby, ID, and timestamps of the deleted record.\nSOURCE: https://github.com/balderdashy/sails/blob/master/docs/reference/blueprint-api/Destroy.md#2025-04-20_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"name\": \"Pinkie Pie\",\n  \"hobby\": \"kickin\",\n  \"id\": 4,\n  \"createdAt\": 1485550644076,\n  \"updatedAt\": 1485550644076\n}\n```\n\n----------------------------------------\n\nTITLE: Initializing Sails Hook with Async Function in JavaScript\nDESCRIPTION: This code defines a Sails.js hook module with an asynchronous initialize function. It uses a Promise-based 'dumb' function that resolves or rejects after a 100ms delay, depending on the configuration. The result is stored in 'this.val' before the callback is invoked.\nSOURCE: https://github.com/balderdashy/sails/blob/master/test/integration/fixtures/hooks/installable/async/index.js.txt#2025-04-20_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nmodule.exports = function(sails) {\n\n  return {\n\n    initialize: async function(cb) {\n\n      var dumb = function() {\n        return new Promise(function(resolve, reject) {\n          setTimeout(function() {\n            if (sails.config.custom && sails.config.custom.reject) {\n              return reject('foo');\n            }\n            return resolve('foo')\n          }, 100);\n        });\n      };\n      this.val = await dumb();\n      return cb();\n    }\n\n  };\n\n};\n```\n\n----------------------------------------\n\nTITLE: Basic Usage of getRoomName() in Sails.js\nDESCRIPTION: Simple example showing how to call the getRoomName() method on a model to get the PubSub room name for a record with a specific ID.\nSOURCE: https://github.com/balderdashy/sails/blob/master/docs/reference/websockets/resourceful-pubsub/get-room-name.md#2025-04-20_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nSomething.getRoomName(id);\n```\n\n----------------------------------------\n\nTITLE: Configuring Grunt Sync Task in Sails.js\nDESCRIPTION: This code snippet would typically contain the configuration for the Grunt sync task. It would define the source and destination directories, and any options for the synchronization process. However, the actual code is not provided in the given text.\nSOURCE: https://github.com/balderdashy/sails/blob/master/docs/anatomy/tasks/config/sync.js.md#2025-04-20_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\n// No actual code provided in the text\n```\n\n----------------------------------------\n\nTITLE: Generating a Helper File in Sails.js\nDESCRIPTION: This command demonstrates how to use the Sails CLI to generate a new helper file. It creates a skeleton helper file named 'tickle-user.js' in the api/helpers/ directory.\nSOURCE: https://github.com/balderdashy/sails/blob/master/docs/anatomy/api/helpers/helpers.md#2025-04-20_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nsails generate helper tickle-user\n```\n\n----------------------------------------\n\nTITLE: Using sails.log.info() for Informational Logging in Sails.js\nDESCRIPTION: Demonstrates how to use sails.log.info() to write output to stdout at the 'info' log level. This is useful for capturing information about the application's business logic.\nSOURCE: https://github.com/balderdashy/sails/blob/master/docs/concepts/Logging/Custom log messages.md#2025-04-20_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nsails.log.info('A new user (', newUser.emailAddress, ') just signed up!');\n// -> info: A new user ( irl@foobar.com ) just signed up!\n```\n\n----------------------------------------\n\nTITLE: Accessing `req.signedCookies` in Sails.js\nDESCRIPTION: This snippet demonstrates how to access the `req.signedCookies` object within a Sails.js request handler.  It assumes you have access to the request object (`req`) within a controller or policy function. The object contains signed cookies that have been verified.\nSOURCE: https://github.com/balderdashy/sails/blob/master/docs/reference/req/req.signedCookies.md#2025-04-20_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n\"req.signedCookies;\"\n```\n\n----------------------------------------\n\nTITLE: Updating Database Adapter in Sails v1.0\nDESCRIPTION: Command to update the database adapter to the latest version compatible with Sails v1.0. The example shows upgrading sails-mysql, but this should be replaced with whatever adapter your application uses.\nSOURCE: https://github.com/balderdashy/sails/blob/master/docs/upgrading/To1.0.md#2025-04-20_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nnpm install --save sails-mysql@latest\n```\n\n----------------------------------------\n\nTITLE: Starting Sails.js in Production Mode with Custom Port\nDESCRIPTION: Command to start a Sails.js application in production mode on port 443. This is a common approach for deploying Sails.js applications to production environments.\nSOURCE: https://github.com/balderdashy/sails/blob/master/docs/concepts/Configuration/Configuration.md#2025-04-20_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\nPORT=443 NODE_ENV=production sails lift\n```\n\n----------------------------------------\n\nTITLE: Wildcard Route Configuration\nDESCRIPTION: Examples of using wildcards in route definitions to match multiple paths.\nSOURCE: https://github.com/balderdashy/sails/blob/master/docs/concepts/Routes/RouteTargetSyntax.md#2025-04-20_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\n'/*'\n\n'/user/foo/*'\n```\n\n----------------------------------------\n\nTITLE: Configuring MySQL Connection in Sails.js\nDESCRIPTION: Basic configuration for MySQL database connection including adapter specification and URL structure.\nSOURCE: https://github.com/balderdashy/sails/blob/master/docs/concepts/extending-sails/Adapters/adapterList.md#2025-04-20_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nadapter: 'sails-mysql',\nurl: 'mysql://user:password@host:port/database',\n```\n\n----------------------------------------\n\nTITLE: Implementing PetUser Junction Model\nDESCRIPTION: Defines the PetUser junction model that connects Users and Pets in a many-to-many relationship. This model contains references to both the user and pet models.\nSOURCE: https://github.com/balderdashy/sails/blob/master/docs/concepts/ORM/Associations/ThroughAssociations.md#2025-04-20_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\n// myApp/api/models/PetUser.js\nmodule.exports = {\n  attributes: {\n    owner:{\n      model:'user'\n    },\n    pet: {\n      model: 'pet'\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring CSRF Protection in Sails v1.0 Routes (JavaScript)\nDESCRIPTION: Example of disabling CSRF protection for a specific route in Sails v1.0 config/routes.js file.\nSOURCE: https://github.com/balderdashy/sails/blob/master/docs/upgrading/To1.0.md#2025-04-20_snippet_15\n\nLANGUAGE: javascript\nCODE:\n```\n'POST /some-thing': { action: 'do-a-thing', csrf: false },\n```\n\n----------------------------------------\n\nTITLE: Checking Socket Connection Attempt with isConnecting() in JavaScript\nDESCRIPTION: Determines whether the SailsSocket instance is currently in the process of connecting to a server. Returns true if a connection is being attempted.\nSOURCE: https://github.com/balderdashy/sails/blob/master/docs/reference/websockets/sails.io.js/SailsSocket/methods.md#2025-04-20_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nio.socket.isConnecting();\n```\n\n----------------------------------------\n\nTITLE: Finding Archived Records in Waterline\nDESCRIPTION: This code snippet shows how to find an archived record in Waterline using the `Archive` model. It searches for an archive entry originating from the 'user' model with a specific original record ID (1) and retrieves it.\nSOURCE: https://github.com/balderdashy/sails/blob/master/docs/reference/waterline/models/archive.md#2025-04-20_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nvar archive = await Archive.findOne({\n  fromModel: 'user',\n  originalRecordId: 1\n});\n\n// The data from the original record is stored as `archive.originalRecord`.\n```\n\n----------------------------------------\n\nTITLE: Redirect Target Configuration in Sails.js\nDESCRIPTION: Shows how to create URL redirects within a Sails.js app or to external URLs. The redirect will transform the request to a GET request.\nSOURCE: https://github.com/balderdashy/sails/blob/master/docs/concepts/Routes/RouteTargetSyntax.md#2025-04-20_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\n'/alias' : '/some/other/route/url',\n'GET /google': 'http://www.google.com'\n```\n\n----------------------------------------\n\nTITLE: Loading Steps Sequence in Sails.js\nDESCRIPTION: Documentation of the sequence of steps that occur when Sails loads. This includes preparing the configuration object, loading hooks, populating the middleware registry, assembling the router, exposing global variables, and initializing the app runtime.\nSOURCE: https://github.com/balderdashy/sails/blob/master/lib/app/README.md#2025-04-20_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n#### Prepare Configuration Object\n\nPopulate `sails.config` with core (hook-agnostic) implicit defaults. Then apply the initial known set of configuration overrides, including command-line options, environment variables, and programmatic configuration (i.e. options passed to `sails.load` or `sails.lift`.)\nThe most important core implicit default configuration is the set of built-in hooks.\n\n#### Load Hooks\n\nLoad hooks in the proper order.\n\n#### Populate Middleware Registry\n\nGrab `this.middleware` from each hook and make it available on the `sails` object as `sails.middleware.[HOOK_ID]`.\n\n#### Assemble Router\n\nPrepare the core Router, then emit multiple events on the `sails` object informing hooks that they can safely bind routes.\n\n#### Expose global variables\n\nAfter all hooks have initialized, Sails exposes global variables\n(by default: `sails` object, models, services, `_`, and `async`)\n\n#### Initialize App Runtime\n\n> This step does not run when `sails.load()` is used programmatically.\n> To also run the initialization step, use `sails.lift()` instead.\n\n+ Start attached servers (by default: Express and Socket.io)\n+ Run the bootstrap function (`sails.config.bootstrap`)\n```\n\n----------------------------------------\n\nTITLE: Basic Usage of req.accepts() Method\nDESCRIPTION: Shows the basic syntax for using req.accepts() method to check media type acceptance.\nSOURCE: https://github.com/balderdashy/sails/blob/master/docs/reference/req/req.accepts.md#2025-04-20_snippet_0\n\nLANGUAGE: usage\nCODE:\n```\nreq.accepts(mediaType);\n```\n\n----------------------------------------\n\nTITLE: Update Record Response Example\nDESCRIPTION: Example JSON response showing the updated user record with modified hobby and timestamps.\nSOURCE: https://github.com/balderdashy/sails/blob/master/docs/reference/blueprint-api/Update.md#2025-04-20_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"hobby\": \"kickin\",\n  \"id\": 47,\n  \"name\": \"Applejack\",\n  \"createdAt\": 1485462079725,\n  \"updatedAt\": 1485476060873\n}\n```\n\n----------------------------------------\n\nTITLE: Accessing Sails.js Policies\nDESCRIPTION: Demonstrates how to access a policy file in the api/policies/ folder. Policy files can be referenced by their filename without the extension.\nSOURCE: https://github.com/balderdashy/sails/blob/master/docs/anatomy/config/policies.js.md#2025-04-20_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nisLoggedIn\n```\n\n----------------------------------------\n\nTITLE: Registering middleware with exclusions in Sails.js\nDESCRIPTION: Example of how to register middleware that affects all actions within the 'user' and 'pet' namespaces except for the specific 'user.hello' action.\nSOURCE: https://github.com/balderdashy/sails/blob/master/lib/app/private/controller/README.md#2025-04-20_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nsails.registerActionMiddleware(mustBeLoggedIn, ['user.*', 'pet.*'], 'user.hello')\n```\n\n----------------------------------------\n\nTITLE: Configuring Local Settings in Sails.js\nDESCRIPTION: Example of a config/local.js file that overrides default Sails.js configuration for local development or production deployment. This file is included in .gitignore by default to prevent committing credentials to the repository.\nSOURCE: https://github.com/balderdashy/sails/blob/master/docs/concepts/Deployment/FAQ.md#2025-04-20_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n// Local configuration\n// \n// Included in the .gitignore by default,\n// this is where you include configuration overrides for your local system\n// or for a production deployment.\n//\n// For example, to use port 80 on the local machine, override the `port` config\nmodule.exports = {\n    port: 80,\n    environment: 'production',\n    adapters: {\n        mysql: {\n            user: 'root',\n            password: '12345'\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Retrieving Full Request URL with Query String\nDESCRIPTION: Demonstrates how to access the complete request URL including query parameters using req.url in a Sails.js application. Returns the full URL path with encoded query string.\nSOURCE: https://github.com/balderdashy/sails/blob/master/docs/reference/req/req.url.md#2025-04-20_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nreq.url;\n\n// => \"/search?q=worlds%20largest%20dogs\"\n```\n\n----------------------------------------\n\nTITLE: Installing lusca package for Sails.js\nDESCRIPTION: This command installs the lusca package, which provides HSTS functionality, and saves it as a dependency in the project's package.json file.\nSOURCE: https://github.com/balderdashy/sails/blob/master/docs/concepts/Security/StrictTransportSecurity.md#2025-04-20_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n# In your sails app\nnpm install lusca --save\n```\n\n----------------------------------------\n\nTITLE: Subscribing to User Model Events\nDESCRIPTION: Example of listening for 'user' events with the Sails.io.js client. This code sets up an event listener that logs any received notifications related to User model records to the console.\nSOURCE: https://github.com/balderdashy/sails/blob/master/docs/reference/websockets/resourceful-pubsub/resourceful-pubsub.md#2025-04-20_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nio.socket.on('user', function(msg){\n  console.log(msg);\n})\n```\n\n----------------------------------------\n\nTITLE: Using res.redirect() with status code\nDESCRIPTION: This snippet shows how to use res.redirect() with an optional status code to redirect the user agent. It describes the implications of the status code parameter and its default behavior if not provided.\nSOURCE: https://github.com/balderdashy/sails/blob/master/docs/reference/res/res.redirect.md#2025-04-20_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nreturn res.redirect(statusCode, url);\n```\n\n----------------------------------------\n\nTITLE: Basic Usage Pattern for Populate Blueprint\nDESCRIPTION: Shows the basic URL pattern for accessing the populate blueprint endpoint.\nSOURCE: https://github.com/balderdashy/sails/blob/master/docs/reference/blueprint-api/Populate.md#2025-04-20_snippet_0\n\nLANGUAGE: text\nCODE:\n```\nGET /:model/:id/:association\n```\n\n----------------------------------------\n\nTITLE: Implementing res.notFound() with Error Handling in Sails.js\nDESCRIPTION: Illustrates how to use res.notFound() in conjunction with a database query and error handling.  It checks if a record exists and returns a 404 if it's not found, handling potential errors during the database query.\nSOURCE: https://github.com/balderdashy/sails/blob/master/docs/reference/res/res.notFound.md#2025-04-20_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\n\"Pet.findOne()\n.where({ name: 'fido' })\n.exec(function(err, fido) {\n  if (err) return res.serverError(err);\n  if (!fido) return res.notFound();\n  // ...\n})\"\n```\n\n----------------------------------------\n\nTITLE: SQL Interface Query Method\nDESCRIPTION: Raw SQL query method that must be implemented for adapters supporting the SQL interface.\nSOURCE: https://github.com/balderdashy/sails/blob/master/docs/contributing/adapter-specification.md#2025-04-20_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nAdapter.query(query, [data,] cb)\n```\n\n----------------------------------------\n\nTITLE: Passing Locals with Potential XSS Content in Sails.js\nDESCRIPTION: Example of passing locals to a view, including a string with potential XSS content, to demonstrate safe exposure using exposeLocalsToBrowser.\nSOURCE: https://github.com/balderdashy/sails/blob/master/docs/concepts/Views/Locals.md#2025-04-20_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nres.view('myView', {\n  someString: 'hello',\n  someNumber: 123,\n  someObject: { owl: 'hoot' },\n  someArray: [1, 'boot', true],\n  someBool: false\n  someXSS: '<script>alert(\"all your credit cards belong to me!!\");</script>'\n});\n```\n\n----------------------------------------\n\nTITLE: Example of io.socket.patch() in HTML Script\nDESCRIPTION: Example showing how to use io.socket.patch() to update a user record. It sends a PATCH request to '/users/9' with occupation data and handles the response in a callback function.\nSOURCE: https://github.com/balderdashy/sails/blob/master/docs/reference/websockets/sails.io.js/socket.patch.md#2025-04-20_snippet_1\n\nLANGUAGE: html\nCODE:\n```\n<script>\nio.socket.patch('/users/9', { occupation: 'psychic' }, function (resData, jwr) {\n  resData.statusCode; // => 200\n});\n</script>\n```\n\n----------------------------------------\n\nTITLE: Conditional logic based on `req.protocol` in Sails.js\nDESCRIPTION: This code demonstrates how to use `req.protocol` to conditionally execute different code blocks based on whether the request is HTTP or HTTPS.  This allows you to handle secure and insecure requests differently, such as redirecting HTTP requests to HTTPS.\nSOURCE: https://github.com/balderdashy/sails/blob/master/docs/reference/req/req.protocol.md#2025-04-20_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\n\"switch (req.protocol) {\\n  case 'http':\\n    // this is an HTTP request\\n    break;\\n  case 'https':\\n    // this is a secure HTTPS request\\n    break;\\n}\"\n```\n\n----------------------------------------\n\nTITLE: Accessing req.ips Property in Sails.js\nDESCRIPTION: Basic usage example showing how to access the req.ips property\nSOURCE: https://github.com/balderdashy/sails/blob/master/docs/reference/req/req.ips.md#2025-04-20_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nreq.ips;\n```\n\n----------------------------------------\n\nTITLE: Update Record Request Example\nDESCRIPTION: Example JSON payload for updating a user record's hobby field via PATCH request.\nSOURCE: https://github.com/balderdashy/sails/blob/master/docs/reference/blueprint-api/Update.md#2025-04-20_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"hobby\": \"kickin\"\n}\n```\n\n----------------------------------------\n\nTITLE: Example of req.hostname with Host Header\nDESCRIPTION: Demonstrates how req.hostname returns just the hostname portion from a Host header that includes a port number. In this example, it extracts 'ww3.staging.ibm.com' from 'ww3.staging.ibm.com:1492'.\nSOURCE: https://github.com/balderdashy/sails/blob/master/docs/reference/req/req.hostname.md#2025-04-20_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nreq.hostname;\n// -> \"ww3.staging.ibm.com\"\n```\n\n----------------------------------------\n\nTITLE: Basic Usage of req.allParams() in Sails.js\nDESCRIPTION: Simple demonstration of how to call the req.allParams() method.\nSOURCE: https://github.com/balderdashy/sails/blob/master/docs/reference/req/req.allParams.md#2025-04-20_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nreq.allParams();\n```\n\n----------------------------------------\n\nTITLE: Configuring a Custom Generator in .sailsrc\nDESCRIPTION: JSON configuration to enable a locally developed custom generator in the Sails.js project's .sailsrc file.\nSOURCE: https://github.com/balderdashy/sails/blob/master/docs/concepts/extending-sails/Generators/customGenerators.md#2025-04-20_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\n{\n  \"generators\": {\n    \"modules\": {\n    \t\"awesome\": \"./my-project/awesome\"\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Complete Example of Shutting Down Sails Application\nDESCRIPTION: Shows a complete example of lowering a Sails application with error handling in the callback function. The callback receives an optional error parameter that indicates if any issues occurred during the shutdown process.\nSOURCE: https://github.com/balderdashy/sails/blob/master/docs/reference/application/advanced-usage/sails.lower.md#2025-04-20_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nsailsApp.lower(\n  function (err) {\n    if (err) {\n      return console.log(\"Error occurred lowering Sails app: \", err);\n    }\n    console.log(\"Sails app lowered successfully!\");\n  }\n)\n```\n\n----------------------------------------\n\nTITLE: Configuring Sails using .sailsrc files (JSON/INI)\nDESCRIPTION: .sailsrc files can be used to specify configuration for Sails apps and CLI. They can be in JSON or INI format and are located in the current directory, home folder, or other rc-conventional paths. These files are particularly useful for configuring generators and applying global settings.\nSOURCE: https://github.com/balderdashy/sails/blob/master/docs/concepts/Configuration/usingsailsrcfiles.md#2025-04-20_snippet_0\n\nLANGUAGE: JSON\nCODE:\n```\n{\n  // .sailsrc configuration options\n}\n```\n\n----------------------------------------\n\nTITLE: Basic req.socket Usage Reference\nDESCRIPTION: Demonstrates the basic syntax for accessing the req.socket property in a Sails.js application. Shows the minimal usage pattern for retrieving the socket instance.\nSOURCE: https://github.com/balderdashy/sails/blob/master/docs/reference/req/req.socket.md#2025-04-20_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nreq.socket;\n```\n\n----------------------------------------\n\nTITLE: Global Models Access Pattern in Sails.js\nDESCRIPTION: Demonstrates how models are globally accessible using their globalId. A model defined in api/models/Foo.js becomes globally available as Foo.\nSOURCE: https://github.com/balderdashy/sails/blob/master/docs/concepts/Globals/Globals.md#2025-04-20_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n// api/models/Foo.js -> globally accessible as Foo\nFoo.find().exec(function(err, results) {\n  // Use the Foo model\n});\n```\n\n----------------------------------------\n\nTITLE: Controller Implementation Example\nDESCRIPTION: Demonstrates how to use sails.getRouteFor() within a controller action to pass route information to a view.\nSOURCE: https://github.com/balderdashy/sails/blob/master/docs/reference/application/advanced-usage/sails.getRouteFor.md#2025-04-20_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nreturn res.view('pages/some-page-with-a-form-on-it', {\n  formEndpoint: sails.getRouteFor('SomeotherController.someAction'),\n  // ...\n});\n```\n\n----------------------------------------\n\nTITLE: Sending POST Request with Socket.IO in Sails.js\nDESCRIPTION: This snippet demonstrates the basic usage of io.socket.post() method. It takes a URL, optional data, and a callback function as arguments. The callback receives response data and a JSON WebSocket Response object.\nSOURCE: https://github.com/balderdashy/sails/blob/master/docs/reference/websockets/sails.io.js/socket.post.md#2025-04-20_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nio.socket.post(url, data, function (resData, jwres){\n  // ...\n});\n```\n\n----------------------------------------\n\nTITLE: Using Named Parameters with Sails.js Helpers\nDESCRIPTION: Shows how to use the .with() method to pass named parameters to a helper function instead of positional arguments. This approach is more readable and less error-prone.\nSOURCE: https://github.com/balderdashy/sails/blob/master/docs/concepts/Helpers/ExampleHelper.md#2025-04-20_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nawait sails.helpers.getRecentUsers.with({\n  numUsers: 10,\n  activeSince: (new Date('2017-03-17')).getTime()\n});\n```\n\n----------------------------------------\n\nTITLE: Configuring package.json for a Scoped Sails.js Hook\nDESCRIPTION: Example of a package.json file for a scoped NPM package that overrides a core Sails hook. It uses the 'hookName' property to specify the internal name Sails uses for the hook.\nSOURCE: https://github.com/balderdashy/sails/blob/master/docs/concepts/extending-sails/Hooks/installablehooks.md#2025-04-20_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"name\": \"@mycoolhooks/sails-hook-sockets\",\n    \"version\": \"0.0.0\",\n    \"description\": \"my own sockets hook\",\n    \"main\": \"index.js\",\n    \"sails\": {\n      \"isHook\": true,\n      \"hookName\": \"sockets\"\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Selectively Disabling Global Variables in Sails.js\nDESCRIPTION: This snippet demonstrates how to selectively disable specific global variables in a Sails.js application while keeping others enabled. It shows how to disable the underscore, async, models, and services globals.\nSOURCE: https://github.com/balderdashy/sails/blob/master/docs/concepts/Globals/DisablingGlobals.md#2025-04-20_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\n// config/globals.js\nmodule.exports.globals = {\n  _: false,\n  async: false,\n  models: false,\n  services: false\n};\n```\n\n----------------------------------------\n\nTITLE: Specifying View Layout in Sails.js Route\nDESCRIPTION: This code snippet shows how to specify a custom view layout within a route definition in Sails.js. It demonstrates setting the 'layout' property in the 'locals' object of a route target.\nSOURCE: https://github.com/balderdashy/sails/blob/master/docs/concepts/Routes/Routes.md#2025-04-20_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\n'GET /privacy': {\n    view: 'legal/privacy',\n    locals: {\n      layout: 'users'\n    }\n  },\n```\n\n----------------------------------------\n\nTITLE: Example Response - Purchase Record JSON\nDESCRIPTION: Sample JSON response showing a purchase record with amount, id, and timestamp fields\nSOURCE: https://github.com/balderdashy/sails/blob/master/docs/reference/blueprint-api/FindOne.md#2025-04-20_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n{\n   \"amount\": 49.99,\n   \"id\": 1,\n   \"createdAt\": 1485551132315,\n   \"updatedAt\": 1485551132315\n }\n```\n\n----------------------------------------\n\nTITLE: Configuring NPM Test Script for Sails.js\nDESCRIPTION: JSON configuration in package.json to set up an npm test command for running Sails.js tests with Mocha.\nSOURCE: https://github.com/balderdashy/sails/blob/master/docs/concepts/Testing/Testing.md#2025-04-20_snippet_5\n\nLANGUAGE: json\nCODE:\n```\n  \"scripts\": {\n    \"start\": \"node app.js\",\n    \"debug\": \"node debug app.js\",\n    \"test\": \"node ./node_modules/mocha/bin/mocha test/lifecycle.test.js test/integration/**/*.test.js\"\n  }\n```\n\n----------------------------------------\n\nTITLE: Production Datastore Configuration\nDESCRIPTION: This snippet illustrates how to override the default datastore settings in a production environment using a separate configuration file. This approach allows for high flexibility and security regarding database credentials.\nSOURCE: https://github.com/balderdashy/sails/blob/master/docs/reference/sails.config/sails.config.connections.md#2025-04-20_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\n// config/env/production.js\nmodule.exports = {\n  // ...\n  // Override the default datastore settings in production.\n  datastores: {\n    default: {\n      // No need to set `adapter` again, because we already configured it in `config/datastores.js`.\n      url: 'mysql://lkjdsf4a23d9xf4:kkwer4l8adsfasd@u23jrsdfsdf0sad.aasdfsdfsafd.us-west-2.ere.amazonaws.com:3306/ke9944a4x23423g',\n    }\n  },\n  // ...\n};\n```\n\n----------------------------------------\n\nTITLE: Setting CORS Configuration Using Environment Variables in Sails.js\nDESCRIPTION: Example of setting CORS configuration using environment variables with JSON formatting. This demonstrates how to configure allowed origins for cross-origin requests by setting the sails_security__cors__allowOrigins variable.\nSOURCE: https://github.com/balderdashy/sails/blob/master/docs/concepts/Configuration/Configuration.md#2025-04-20_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nsails_security__cors__allowOrigins='[\"http://somedomain.com\",\"https://anotherdomain.com:1337\"]' sails console\n```\n\n----------------------------------------\n\nTITLE: Basic Usage of sails.LOOKS_LIKE_ASSET_RX\nDESCRIPTION: Simple usage example showing how to access the asset detection regular expression.\nSOURCE: https://github.com/balderdashy/sails/blob/master/docs/reference/application/advanced-usage/sails.LOOKS_LIKE_ASSET_RX.md#2025-04-20_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nsails.LOOKS_LIKE_ASSET_RX;\n```\n\n----------------------------------------\n\nTITLE: Installing TypeScript Dependencies for Sails\nDESCRIPTION: Command to install the core TypeScript packages required for a Sails application. This installs typescript and ts-node, which are necessary for TypeScript compilation and execution.\nSOURCE: https://github.com/balderdashy/sails/blob/master/docs/tutorials/typeScript.md#2025-04-20_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm install typescript ts-node --save\n```\n\n----------------------------------------\n\nTITLE: Configuring Handlebars Task in Sails.js\nDESCRIPTION: JavaScript code to configure the Handlebars task in Sails.js, including file patterns and Grunt configuration.\nSOURCE: https://github.com/balderdashy/sails/blob/master/docs/concepts/Assets/TaskAutomation.md#2025-04-20_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\n// tasks/config/handlebars.js\n// --------------------------------\n// handlebar task configuration.\n\nmodule.exports = function(grunt) {\n\n  // We use the grunt.config api's set method to configure an\n  // object to the defined string. In this case the task\n  // 'handlebars' will be configured based on the object below.\n  grunt.config.set('handlebars', {\n    dev: {\n      // We will define which template files to inject\n      // in tasks/pipeline.js\n      files: {\n        '.tmp/public/templates.js': require('../pipeline').templateFilesToInject\n      }\n    }\n  });\n\n  // load npm module for handlebars.\n  grunt.loadNpmTasks('grunt-contrib-handlebars');\n};\n```\n\n----------------------------------------\n\nTITLE: User Model Definition\nDESCRIPTION: Waterline model definition for User entity with firstName, lastName attributes and a collection reference to Pet model\nSOURCE: https://github.com/balderdashy/sails/blob/master/docs/concepts/ORM/standalone-usage.md#2025-04-20_snippet_9\n\nLANGUAGE: javascript\nCODE:\n```\nmodule.exports = {\n\n  identity: 'user',\n  datastore: 'default',\n\n  attributes: {\n    firstName: 'string',\n    lastName: 'string',\n\n    // Add a reference to Pets\n    pets: {\n      collection: 'pet',\n      via: 'owner'\n    }\n  }\n};\n```\n\n----------------------------------------\n\nTITLE: Configuring Sails.js Logger Settings\nDESCRIPTION: The log.js configuration file allows developers to specify log levels and transport settings for their Sails.js application. It uses Winston under the hood and supports custom transports and adapters for log messages.\nSOURCE: https://github.com/balderdashy/sails/blob/master/docs/anatomy/config/log.js.md#2025-04-20_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n// config/log.js\n\n```\n\n----------------------------------------\n\nTITLE: Installing Type Definitions for Node.js and Express\nDESCRIPTION: Commands to install TypeScript type definitions for Node.js and Express, which provide type information for these packages when writing TypeScript code in a Sails application.\nSOURCE: https://github.com/balderdashy/sails/blob/master/docs/tutorials/typeScript.md#2025-04-20_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nnpm install @types/node --save\nnpm install @types/express --save\n```\n\n----------------------------------------\n\nTITLE: Lifting Sails App with Environment and .sailsrc Settings in JavaScript\nDESCRIPTION: Demonstrates how to start a Sails app using .lift() while incorporating current environment and .sailsrc settings using the 'rc' module.\nSOURCE: https://github.com/balderdashy/sails/blob/master/docs/concepts/Programmatic Usage/Programmatic Usage.md#2025-04-20_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nvar Sails = require('sails').constructor;\n\nvar rc = require('sails/accessible/rc');\n\nvar mySailsApp = new Sails();\nmySailsApp.lift(rc('sails'), function(err) {\n\n});\n```\n\n----------------------------------------\n\nTITLE: Adding Sails as a Development Dependency\nDESCRIPTION: JSON snippet showing how to add Sails.js as a development dependency in the hook's package.json file.\nSOURCE: https://github.com/balderdashy/sails/blob/master/docs/concepts/extending-sails/Hooks/installablehooks.md#2025-04-20_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n\"devDependencies\": {\n      \"sails\": \"~0.11.0\"\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Lodash and Async as globals in Sails.js\nDESCRIPTION: This code snippet shows the default configuration in `config/globals.js` for enabling Lodash and Async as global variables in a Sails.js application. It uses `require()` to import the libraries and assigns them to the `_` and `async` properties, respectively, making them accessible throughout the application without needing to require them in each file.\nSOURCE: https://github.com/balderdashy/sails/blob/master/docs/reference/sails.config/sails.config.globals.md#2025-04-20_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n{\n  _: require('lodash'),\n\n  async: require('async')\n}\n```\n\n----------------------------------------\n\nTITLE: Installing Async using npm\nDESCRIPTION: This command-line instruction demonstrates how to install Async using npm. The `--save` flag adds Async to the project's dependencies in `package.json`, and `--save-exact` ensures that the exact version is installed and recorded in `package.json`.\nSOURCE: https://github.com/balderdashy/sails/blob/master/docs/reference/sails.config/sails.config.globals.md#2025-04-20_snippet_4\n\nLANGUAGE: shell\nCODE:\n```\nnpm install async --save --save-exact\n```\n\n----------------------------------------\n\nTITLE: Programmatic Configuration Example for Sails.js\nDESCRIPTION: Example showing how to set custom Mailgun API token configuration via command line arguments\nSOURCE: https://github.com/balderdashy/sails/blob/master/docs/concepts/Configuration/Configuration.md#2025-04-20_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\nsails lift --custom.mailgun.apiToken='foo'\n```\n\n----------------------------------------\n\nTITLE: Examples of req.acceptsLanguages() Implementation\nDESCRIPTION: Demonstrates various use cases of req.acceptsLanguages() method with different language combinations and their return values. Examples assume an Accept-Language header of 'da, en, en-gb, en-us'.\nSOURCE: https://github.com/balderdashy/sails/blob/master/docs/reference/req/req.acceptsLanguages.md#2025-04-20_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nreq.acceptsLanguages('en');\n// -> 'en'\n\nreq.acceptsLanguages('es');\n// -> false\n\nreq.acceptsLanguages('en-us', 'en', 'en-gb');\n// -> 'en-us'\n\nreq.acceptsLanguages('en-gb', 'en', 'en-us');\n// -> 'en-gb'\n\nreq.acceptsLanguages('es', 'fr');\n// -> false\n```\n\n----------------------------------------\n\nTITLE: Example Request Headers Output in Sails.js\nDESCRIPTION: Demonstrates a sample output of the request headers object showing common HTTP headers like host, user-agent, accept, etc.\nSOURCE: https://github.com/balderdashy/sails/blob/master/docs/reference/req/req.headers.md#2025-04-20_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nconsole.log(req.headers);\n\n{ host: 'localhost:1337',\n  connection: 'keep-alive',\n  'cache-control': 'no-cache',\n  'user-agent': 'Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/41.0.2272.89 Safari/537.36',\n  accept: '*/*',\n  'accept-encoding': 'gzip, deflate, sdch',\n  'accept-language': 'en-US,en;q=0.8,hi;q=0.6',\n  cookie: 'sdfkslddklfk; sails.sid=s%3skdlfjkj1231lsdfnsc,m' }\n```\n\n----------------------------------------\n\nTITLE: Specifying custom layout in view rendering for Sails.js v0.10\nDESCRIPTION: Example of how to specify a custom layout when rendering a view in Sails.js v0.10. The layout path is now relative to the app's views path.\nSOURCE: https://github.com/balderdashy/sails/blob/master/docs/version-notes/0.10.x/Changelog0.10x.md#2025-04-20_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\nreturn res.view('auth/login', {\n  layout: 'auth/someLayout'\n});\n```\n\n----------------------------------------\n\nTITLE: Router FAQ in Markdown\nDESCRIPTION: This markdown snippet contains a FAQ section addressing common questions about the Sails.js routing process. It covers topics such as the relationship between the Sails router and Express router, how routes are processed, and when the routes.js file is used.\nSOURCE: https://github.com/balderdashy/sails/blob/master/lib/router/README.md#2025-04-20_snippet_2\n\nLANGUAGE: markdown\nCODE:\n```\n## FAQ\n\n+ When an HTTP request hits the server, does it hit the Sails router before it hits the Express router?\n  + No- it only hits the Express router.\n\n+ OK.. what requests DO hit the Sails router?\n  + Requests to other attached servers that don't have their own routers, e.g. the Socket.io interpreter, will hit the Sails router's wildcard handler, which will then talk to the attached server and simulate the appropriate route.\n\n+ What happens after an HTTP request hits the Express router?\n  + Sails does not touch the Express router once it's been set up.\n\n+ When and *how* are the routes in your `routes.js` file processed?\n  + `routes.js` is read by the `userconfig` hook, which loads it into `sails.config.routes`.\n  + `sails.config.routes` is used by the Sails router at lifttime (to bind routes to the external Express router) AND at runtime (to detect matches in wildcard routes coming from other attached servers like the Socket.io interpreter)\n```\n\n----------------------------------------\n\nTITLE: Listing Request Properties in Markdown\nDESCRIPTION: Lists the properties added to the request object by the 'request' hook in Sails.js. These properties enhance the functionality of the request object, providing methods for parameter retrieval, content negotiation, and access to application-specific information.\nSOURCE: https://github.com/balderdashy/sails/blob/master/lib/hooks/request/README.md#2025-04-20_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n+ req.params.all()\n+ req.wantsJSON()\n+ req.explicitlyAcceptsHTML()\n+ req.baseUrl\n+ req.port\n+ req._sails (access to the app's `sails` object in case it's not global)\n```\n\n----------------------------------------\n\nTITLE: Scaling Architecture Diagram for Sails.js\nDESCRIPTION: ASCII diagram showing a typical scaled Sails.js architecture with multiple server instances behind a load balancer, connected to databases and message queues.\nSOURCE: https://github.com/balderdashy/sails/blob/master/docs/concepts/Deployment/Scaling.md#2025-04-20_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\n                             ....\n                    /  Sails.js server  \\      /  Database (e.g. Mongo, Postgres, etc)\nLoad Balancer  <-->    Sails.js server    <-->    Socket.io message queue (Redis)\n                    \\  Sails.js server  /      \\  Session store (Redis, Mongo, etc.)\n                             ....\n```\n\n----------------------------------------\n\nTITLE: Configuring Sails.js Blueprints in JavaScript\nDESCRIPTION: This snippet represents the configuration file for Sails.js blueprints. It's typically named 'blueprints.js' and located in the 'config' directory. The file is used to set various options for the Blueprints API, which controls automatic route generation and CRUD operations.\nSOURCE: https://github.com/balderdashy/sails/blob/master/docs/anatomy/config/blueprints.js.md#2025-04-20_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\n# config/blueprints.js\n```\n\n----------------------------------------\n\nTITLE: Implementing initialize function in Sails hook (JavaScript)\nDESCRIPTION: An example of how to implement the initialize function in a Sails hook. This async function is used to perform startup tasks for the hook.\nSOURCE: https://github.com/balderdashy/sails/blob/master/docs/concepts/extending-sails/Hooks/hookspec/initialize.md#2025-04-20_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\ninitialize: async function() {\n\n   // Do some stuff here to initialize hook\n\n}\n```\n\n----------------------------------------\n\nTITLE: Updating Grunt Tasks for Handlebars in Sails.js\nDESCRIPTION: JavaScript code to update the compileAssets and syncAssets Grunt tasks in Sails.js to use Handlebars instead of JST.\nSOURCE: https://github.com/balderdashy/sails/blob/master/docs/concepts/Assets/TaskAutomation.md#2025-04-20_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\n// tasks/register/compileAssets.js\n// --------------------------------\n// compile assets registered grunt task\n\nmodule.exports = function (grunt) {\n  grunt.registerTask('compileAssets', [\n    'clean:dev',\n    'handlebars:dev',       // changed jst task to handlebars task\n    'less:dev',\n    'copy:dev',\n    'coffee:dev'\n  ]);\n};\n\n// tasks/register/syncAssets.js\n// --------------------------------\n// synce assets registered grunt task\n\nmodule.exports = function (grunt) {\n  grunt.registerTask('syncAssets', [\n    'handlebars:dev',      // changed jst task to handlebars task\n    'less:dev',\n    'sync:dev',\n    'coffee:dev'\n  ]);\n};\n```\n\n----------------------------------------\n\nTITLE: Installing MySQL Adapter for Sails\nDESCRIPTION: This snippet demonstrates how to install the MySQL adapter for Sails, which is necessary for connecting to a MySQL database. It uses npm for installation.\nSOURCE: https://github.com/balderdashy/sails/blob/master/docs/reference/sails.config/sails.config.connections.md#2025-04-20_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm install sails-mysql --save --save-exact\n```\n\n----------------------------------------\n\nTITLE: Waterline Database Query Example\nDESCRIPTION: Example of creating a user record using Waterline ORM in the Sails console with detailed output.\nSOURCE: https://github.com/balderdashy/sails/blob/master/docs/reference/cli/sailsconsole.md#2025-04-20_snippet_3\n\nLANGUAGE: text\nCODE:\n```\nsails> User.create({name: 'Brian', password: 'sailsRules'}).fetch().exec(console.log)\nundefined\nsails> undefined { name: 'Brian',\n  password: 'sailsRules',\n  createdAt: \"2014-08-07T04:29:21.447Z\",\n  updatedAt: \"2014-08-07T04:29:21.447Z\",\n  id: 1 }\n```\n\n----------------------------------------\n\nTITLE: jQuery Implementation for Populate\nDESCRIPTION: Example of how to use jQuery to make a populate request.\nSOURCE: https://github.com/balderdashy/sails/blob/master/docs/reference/blueprint-api/Populate.md#2025-04-20_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\n$.get('/purchase/47/cashier', function (cashier) {\n  console.log(cashier);\n});\n```\n\n----------------------------------------\n\nTITLE: Retrieving a signed cookie in Sails.js\nDESCRIPTION: This snippet shows how to retrieve a signed cookie using `req.signedCookies` in Sails.js. It accesses the cookie value via its name, but only if the signature is valid. If the cookie has been tampered with, it will not be available in the `req.signedCookies` object.\nSOURCE: https://github.com/balderdashy/sails/blob/master/docs/reference/req/req.signedCookies.md#2025-04-20_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nreq.signedCookies.chocolatechip;\n// \"Yummy\"\n```\n\n----------------------------------------\n\nTITLE: Setting Session Cookie Expiration in Sails.js\nDESCRIPTION: This JavaScript snippet configures the expiration time of a session ID cookie in Sails.js to 24 hours by setting the 'maxAge' property. Without setting this value, the cookie will expire when the user's web browser is closed.\nSOURCE: https://github.com/balderdashy/sails/blob/master/docs/reference/sails.config/sails.config.session.md#2025-04-20_snippet_1\n\nLANGUAGE: JavaScript\nCODE:\n```\n\"js\\nsession: {\\n  cookie: {\\n    maxAge: 24 * 60 * 60 * 1000\\n  }\\n}\\n\"\n```\n\n----------------------------------------\n\nTITLE: Asserting Core Hook Behavior in Sails Integration Tests\nDESCRIPTION: This snippet lists the key assertions that should be made when writing integration tests for Sails core hooks. It covers config integration, sails.load and sails.lift functionality, post-load state verification, and teardown behavior.\nSOURCE: https://github.com/balderdashy/sails/blob/master/test/integration/README.md#2025-04-20_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n1. Did the hook's default config make it into `sails.config`?\n2. Did `sails.load` work as expected with the hook enabled and all the hooks it depends on enabled?\n3. Did `sails.lift` work as expected with the hook enabled and all the hooks it depends on enabled?\n4. Post-`sails.load`, is the process/application state correct? (i.e. did the hook do what it was supposed to do?)\n5. Did the hook do what it was supposed to do after tearing down the server using `sails.lower()`?\n```\n\n----------------------------------------\n\nTITLE: Configuring hook timeout in Sails (JavaScript)\nDESCRIPTION: An example of how to set the _hookTimeout in a Sails hook's defaults configuration. This sets the timeout for hook initialization to 20 seconds.\nSOURCE: https://github.com/balderdashy/sails/blob/master/docs/concepts/extending-sails/Hooks/hookspec/initialize.md#2025-04-20_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\ndefaults: {\n   __configKey__: {\n      _hookTimeout: 20000 // wait 20 seconds before timing out\n   }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring io.sails Object Properties in JavaScript\nDESCRIPTION: Example of setting various properties on the io.sails object for configuring socket connections. This includes url, transports, and headers, which are used as defaults when creating new sockets.\nSOURCE: https://github.com/balderdashy/sails/blob/master/docs/reference/websockets/sails.io.js/io.sails.md#2025-04-20_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nio.sails.url = 'https://example.com';\nio.sails.transports = ['polling', 'websocket'];\nio.sails.headers = {\n  'X-Custom-Header': 'value'\n};\n```\n\n----------------------------------------\n\nTITLE: Checking Request Freshness Property in Sails.js\nDESCRIPTION: Basic usage example showing how to access the req.fresh property.\nSOURCE: https://github.com/balderdashy/sails/blob/master/docs/reference/req/req.fresh.md#2025-04-20_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nreq.fresh;\n```\n\n----------------------------------------\n\nTITLE: Creating a New Sails.js Project\nDESCRIPTION: Command to create a new Sails.js project using the Sails CLI.\nSOURCE: https://github.com/balderdashy/sails/blob/master/docs/concepts/extending-sails/Generators/customGenerators.md#2025-04-20_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\nsails new my-project\n```\n\n----------------------------------------\n\nTITLE: Installing node-p3p Package for Sails.js\nDESCRIPTION: This snippet shows the npm command to install the node-p3p package in a Sails.js application. The --save flag adds it to the project's dependencies.\nSOURCE: https://github.com/balderdashy/sails/blob/master/docs/concepts/Security/P3P.md#2025-04-20_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\n# In your sails app\nnpm install p3p --save\n```\n\n----------------------------------------\n\nTITLE: Explaining Moduleloader Hook Loading Priority in Sails.js\nDESCRIPTION: This snippet details the loading priority of the `moduleloader` hook and explains how to customize `sails.config.paths`. It emphasizes that this hook loads before user configuration, requiring alternative methods for customization.\nSOURCE: https://github.com/balderdashy/sails/blob/master/lib/hooks/moduleloader/README.md#2025-04-20_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\nThe moduleloader hook is always the first core hook to load; even before `userconfig`.  Consequently, in order to customize `sails.config.paths`, you need to inject configuration into the load process using env variables, the .sailsrc file, or by passing in an option to the programmatic call to sails.lift (i.e. in app.js). Otherwise, by the time your user configuration files in config/* have loaded, it is too late (this hook has already run using the default paths).\n```\n\n----------------------------------------\n\nTITLE: Checking Global Sails Version - Basic Usage\nDESCRIPTION: Simple command to display the version number of the globally installed Sails CLI tool.\nSOURCE: https://github.com/balderdashy/sails/blob/master/docs/reference/cli/sailsversion.md#2025-04-20_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nsails --version\n```\n\n----------------------------------------\n\nTITLE: Creating New Sails Project Using CLI\nDESCRIPTION: Command to create a new Sails.js project using the built-in 'new' generator\nSOURCE: https://github.com/balderdashy/sails/blob/master/docs/concepts/extending-sails/Generators/Generators.md#2025-04-20_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\nsails new my-project\n```\n\n----------------------------------------\n\nTITLE: Handling 'disconnect' Event in Sails.js\nDESCRIPTION: Example of handling the 'disconnect' event, which is triggered when a socket's connection to the server is interrupted. This can be used to display error messages or manually reconnect.\nSOURCE: https://github.com/balderdashy/sails/blob/master/docs/reference/websockets/sails.io.js/io.socket.on.md#2025-04-20_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nio.socket.on('disconnect', function onDisconnect(){\n  console.log('This socket lost connection to the Sails server');\n});\n```\n\n----------------------------------------\n\nTITLE: Message List with Partial Implementation\nDESCRIPTION: Demonstrates the refactored message list using a partial with local variable overrides.\nSOURCE: https://github.com/balderdashy/sails/blob/master/docs/concepts/Views/Partials.md#2025-04-20_snippet_5\n\nLANGUAGE: ejs\nCODE:\n```\n<%\n// A list representing the currently-logged in user's inbox.\n%><ul class=\"message-list\"><%\n  // Display each message, with a button to delete it.\n  _.each(messages, function (message) { %>\n  <%- partial ('../partials/inbox-message.ejs', { message: message }) %>\n  <% });\n%></ul>\n```\n\n----------------------------------------\n\nTITLE: Alternative Helper Usage with Named Parameters\nDESCRIPTION: Shows an alternative syntax for calling the permissions helper using named parameters with the .with() method for enhanced readability.\nSOURCE: https://github.com/balderdashy/sails/blob/master/docs/concepts/Policies/Permissions.md#2025-04-20_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nawait checkPermissions.with({\n  userId: this.req.session.userId,\n  orgId: inputs.orgId\n});\n```\n\n----------------------------------------\n\nTITLE: Disabling Session Connection for sails.io.js\nDESCRIPTION: This code shows how to prevent the socket connection from being linked to the current browser session. It adds a 'nosession=true' parameter to the socket query string.\nSOURCE: https://github.com/balderdashy/sails/blob/master/docs/reference/websockets/sails.io.js/sails.io.js.md#2025-04-20_snippet_4\n\nLANGUAGE: html\nCODE:\n```\n<script src=\"/js/dependencies/sails.io.js\"></script>\n<script type=\"text/javascript\">io.sails.query='nosession=true';</script>\n```\n\n----------------------------------------\n\nTITLE: Sails.io.js Implementation for Populate\nDESCRIPTION: Example of how to use sails.io.js WebSocket client to make a populate request.\nSOURCE: https://github.com/balderdashy/sails/blob/master/docs/reference/blueprint-api/Populate.md#2025-04-20_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nio.socket.get('/purchase/47/cashier', function (cashier) {\n  console.log(cashier);\n});\n```\n\n----------------------------------------\n\nTITLE: Configuring API Endpoint Based on SSL Settings in Sails.js Hook\nDESCRIPTION: This code snippet demonstrates how to implement a configure function in a Sails.js hook. It adjusts the API endpoint URL based on whether SSL is enabled in the hook's configuration. The function accesses the hook's configuration using this.configKey and modifies sails.config accordingly.\nSOURCE: https://github.com/balderdashy/sails/blob/master/docs/concepts/extending-sails/Hooks/hookspec/configure.md#2025-04-20_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconfigure: function() {\n\n   // If SSL is on, use the HTTPS endpoint\n   if (sails.config[this.configKey].ssl == true) {\n      sails.config[this.configKey].url = \"https://\" + sails.config[this.configKey].domain;\n   }\n   // Otherwise use HTTP\n   else {\n      sails.config[this.configKey].url = \"http://\" + sails.config[this.configKey].domain;\n   }\n}\n```\n\n----------------------------------------\n\nTITLE: Installing a Published Custom Generator\nDESCRIPTION: Command to install a published custom generator from NPM.\nSOURCE: https://github.com/balderdashy/sails/blob/master/docs/concepts/extending-sails/Generators/customGenerators.md#2025-04-20_snippet_5\n\nLANGUAGE: sh\nCODE:\n```\nnpm install @my-npm-name/sails-generate-awesome\n```\n\n----------------------------------------\n\nTITLE: Configuring Security Settings in Sails.js\nDESCRIPTION: This snippet references the configuration files where security settings can be adjusted to prevent CSWSH attacks. It mentions config/security.js for enabling built-in protection and config/sockets.js for defining custom authorization functions for socket connections.\nSOURCE: https://github.com/balderdashy/sails/blob/master/docs/concepts/Security/SocketHijacking.md#2025-04-20_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\nYou can prepare your Sails app against CSWSH attacks by enabling the built-in protection in [`config/security.js`](https://sailsjs.com/documentation/anatomy/config/security.js) and ensuring that a `_csrf` token is sent with all relevant incoming socket requests.  Additionally, if you're planning on allowing sockets to connect to your Sails app cross-origin (i.e. from a different domain, subdomain, or port) you'll want to configure your CORS settings accordingly.  You can also define the `authorization` setting in [`config/sockets.js`](https://sailsjs.com/documentation/anatomy/config/sockets.js) as a custom function which allows or denies the initial socket connection based on your needs.\n```\n\n----------------------------------------\n\nTITLE: Describing Router Functionality in Markdown\nDESCRIPTION: This markdown snippet explains the core Router's role in Sails.js, including its responsibility for routing requests, emitting events, and interacting with hooks. It also mentions the latent Express instance used for internal routing.\nSOURCE: https://github.com/balderdashy/sails/blob/master/lib/router/README.md#2025-04-20_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n# Router\n\n## What does it do?\n\nThe core Router in Sails is the main (_but not ONLY_) player responsible for routing requests.\nIt is not involved with HTTP, WebSockets, or other internet protocols directly-- instead, it emits\nevents on the `sails` object (a Node EventEmitter) when a route should be bound, allowing flexibility\nin hooks' implementations.\n\nThe core Router includes a latent Express instance which is used only for internal routing of requests,\nand is not actually used by any application code in userland-- that's the job of hooks.  It _may_, however,\nbe used by app-level unit tests, in order to run test suites without having to lift a server and occupy a network port.\n```\n\n----------------------------------------\n\nTITLE: Using res.get Method in Sails JavaScript\nDESCRIPTION: The res.get() method in Sails.js retrieves the current value of the specified HTTP response header before the response is sent. This function requires the 'header' parameter, which is case-insensitive. The method can be used to check header values, which can be modified until the response is dispatched. For setting headers, see res.set().\nSOURCE: https://github.com/balderdashy/sails/blob/master/docs/reference/res/res.get.md#2025-04-20_snippet_0\n\nLANGUAGE: usage\nCODE:\n```\nres.get(header);\n```\n\nLANGUAGE: javascript\nCODE:\n```\nres.get('Content-Type');\n// -> \"text/plain\"\n```\n\n----------------------------------------\n\nTITLE: Defining Unique Constraint in Sails.js Model\nDESCRIPTION: Demonstrates how to set up a unique constraint on a model attribute. This ensures that no two records can have the same value for this attribute in the database.\nSOURCE: https://github.com/balderdashy/sails/blob/master/docs/concepts/ORM/Attributes.md#2025-04-20_snippet_12\n\nLANGUAGE: javascript\nCODE:\n```\nattributes: {\n  username: {\n    type: 'string',\n    unique: true\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Installing Skipper S3 Adapter for Sails.js\nDESCRIPTION: Command to install the Skipper S3 adapter package as a dependency for Sails.js applications. This adapter enables Sails to stream file uploads directly to Amazon S3 buckets.\nSOURCE: https://github.com/balderdashy/sails/blob/master/docs/concepts/File Uploads/uploading-to-amazon-s3.md#2025-04-20_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\nnpm install skipper-s3 --save\n```\n\n----------------------------------------\n\nTITLE: Implementing Query Modifiers\nDESCRIPTION: Query modifiers that must be supported for the Queryable interface, including WHERE clause operators and pagination options.\nSOURCE: https://github.com/balderdashy/sails/blob/master/docs/contributing/adapter-specification.md#2025-04-20_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\n{\n  where: {},\n  limit: Number,\n  skip: Number,\n  sort: {},\n  select: []\n}\n\n// WHERE supports:\nand\nor\nnot\n\n// Example query\n{ age: { '>=' : 65 } }\n```\n\n----------------------------------------\n\nTITLE: Node Inspector Installation\nDESCRIPTION: Command to install Node Inspector globally via npm\nSOURCE: https://github.com/balderdashy/sails/blob/master/docs/reference/cli/sailsdebug.md#2025-04-20_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n$ npm install -g node-inspector\n```\n\n----------------------------------------\n\nTITLE: Emitting HTTP Hook Loaded Event in Sails.js\nDESCRIPTION: This code snippet demonstrates the event emitted when the HTTP hook has been automatically loaded by Sails core and triggered the callback in its initialize function.\nSOURCE: https://github.com/balderdashy/sails/blob/master/lib/hooks/http/README.md#2025-04-20_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n##### `hook:http:loaded`\n```\n\n----------------------------------------\n\nTITLE: Sails App Information Display\nDESCRIPTION: Example output when inspecting the sails object in console, showing models, controllers, and hooks configuration.\nSOURCE: https://github.com/balderdashy/sails/blob/master/docs/reference/cli/sailsconsole.md#2025-04-20_snippet_4\n\nLANGUAGE: text\nCODE:\n```\nsails> sails\n  |>   [a lifted Sails app on port 1337]\n\\___/  For help, see: https://sailsjs.com/documentation/concepts/\n\nTip: Use `sails.config` to access your app's runtime configuration.\n\n1 Models:\nUser\n\n1 Controllers:\nUserController\n\n20 Hooks:\nmoduleloader,logger,request,orm,views,blueprints,responses,controllers,sockets,p\nubsub,policies,services,csrf,cors,i18n,userconfig,session,grunt,http,projecthooks\n\nsails>\n```\n\n----------------------------------------\n\nTITLE: Basic Hook Defaults Configuration in Sails\nDESCRIPTION: Example of setting default configuration values for a custom API hook, including timeout and domain settings.\nSOURCE: https://github.com/balderdashy/sails/blob/master/docs/concepts/extending-sails/Hooks/hookspec/defaults.md#2025-04-20_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n   myapihook: {\n      timeout: 5000,\n      domain: \"www.myapi.com\"\n   }\n}\n```\n\n----------------------------------------\n\nTITLE: Unbinding Event Handlers with io.socket.off() in Sails.js\nDESCRIPTION: This method unbinds a specific event handler function from a named socket event. To use it, you must provide both the event identity and the same handler function reference that was used when binding with io.socket.on().\nSOURCE: https://github.com/balderdashy/sails/blob/master/docs/reference/websockets/sails.io.js/io.socket.off.md#2025-04-20_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nio.socket.off(eventIdentity, handlerFn);\n```\n\n----------------------------------------\n\nTITLE: Implementing afterDisconnect Lifecycle Callback in JavaScript\nDESCRIPTION: Example of updating the deprecated onDisconnect function to the new afterDisconnect format in config/sockets.js. The new callback includes a third parameter for the callback function.\nSOURCE: https://github.com/balderdashy/sails/blob/master/docs/upgrading/To0.11.md#2025-04-20_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nafterDisconnect: function (session, socket, cb) {\n // Be sure to call the callback\n return cb();\n}\n```\n\n----------------------------------------\n\nTITLE: Handling Socket Events on the Client\nDESCRIPTION: Example of how to listen for and handle socket events on the client side. This code sets up an event listener for 'user' events received from the server after subscribing.\nSOURCE: https://github.com/balderdashy/sails/blob/master/docs/reference/websockets/resourceful-pubsub/subscribe.md#2025-04-20_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\n// On the client:\n\n// Whenever a `user` event is received, say something.\nio.socket.on('user', function(msg) {\n  console.log('Got a message about a Louie: ', msg);\n});\n```\n\n----------------------------------------\n\nTITLE: Example Usage of req.host Property\nDESCRIPTION: Demonstrates how req.host returns just the hostname portion when the Host header contains both hostname and port number. In this example, it strips the port number 1492 from the host header value.\nSOURCE: https://github.com/balderdashy/sails/blob/master/docs/reference/req/req.host.md#2025-04-20_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nreq.host;\n// -> \"ww3.staging.ibm.com\"\n```\n\n----------------------------------------\n\nTITLE: Configuring lusca P3P Middleware in Sails.js\nDESCRIPTION: This snippet demonstrates how to set up the lusca P3P middleware in the Sails.js http.js configuration file. It uses a custom compact privacy policy 'ABCDEF'.\nSOURCE: https://github.com/balderdashy/sails/blob/master/docs/concepts/Security/P3P.md#2025-04-20_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\n  // ...\n  // \"ABCDEF\" ==> The compact privacy policy to use.\n  p3p: require('lusca').p3p('ABCDEF')\n  // ...\n```\n\n----------------------------------------\n\nTITLE: Implementing leaveAll() in a Sails.js Controller Action\nDESCRIPTION: Example of how to use the leaveAll() method within a controller action. This example unsubscribes all members of 'funRoom' from all rooms they're currently in and returns an appropriate response based on the operation's success.\nSOURCE: https://github.com/balderdashy/sails/blob/master/docs/reference/websockets/sails.sockets/sails.sockets.leaveAll.md#2025-04-20_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nunsubscribeFunRoomMembersFromEverything: function(req, res) {\n\n  sails.sockets.leaveAll('funRoom', function(err) {\n    if (err) { return res.serverError(err); }\n\n    // Unsubscribed all sockets in \"funRoom\" from \"funRoom\".\n    // And... from every other room too.\n\n    return res.ok();\n\n  });\n}\n```\n\n----------------------------------------\n\nTITLE: Using io.sails.connect() Method in JavaScript\nDESCRIPTION: Demonstration of using the io.sails.connect() method to manually create a new socket connection. This method is useful when autoConnect is false or when multiple connections are needed.\nSOURCE: https://github.com/balderdashy/sails/blob/master/docs/reference/websockets/sails.io.js/io.sails.md#2025-04-20_snippet_1\n\nLANGUAGE: JavaScript\nCODE:\n```\nvar newSocket = io.sails.connect('https://example.com', {\n  transports: ['websocket'],\n  headers: { 'X-Custom-Header': 'value' }\n});\n```\n\n----------------------------------------\n\nTITLE: Describing Userconfig Hook Functionality in Markdown\nDESCRIPTION: This snippet explains the purpose and behavior of the Userconfig Hook in Sails.js. It loads app-level user configuration using the moduleloader hook from the config directory specified by sails.config.paths.config. The hook is always loaded first in the Sails.js initialization process.\nSOURCE: https://github.com/balderdashy/sails/blob/master/lib/hooks/userconfig/README.md#2025-04-20_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n## Userconfig Hook\n\nThis hook loads app-level user configuration using the moduleloader hook (from the config directory located at `sails.config.paths.config`) It is always loaded first.\n\n##### Contributing to this hook\nNot a good place to jump in right now.  Please tweet @mikermcneil before working on this part!\n```\n\n----------------------------------------\n\nTITLE: Generating a Classic Standalone Action in Sails.js\nDESCRIPTION: Command to generate a standalone 'sign-up' action using the classic actions interface. The generated file includes a simple function with req and res parameters.\nSOURCE: https://github.com/balderdashy/sails/blob/master/docs/concepts/ActionsAndControllers/GeneratingActions.md#2025-04-20_snippet_2\n\nLANGUAGE: sh\nCODE:\n```\n$ sails generate action user/signup --no-actions2\ninfo: Created a traditional (req,res) controller action, but as a standalone file\n```\n\nLANGUAGE: javascript\nCODE:\n```\n/**\n * Module dependencies\n */\n\n// ...\n\n\n/**\n * user/signup.js\n *\n * Signup user.\n */\nmodule.exports = function signup(req, res) {\n\n  sails.log.debug('TODO: implement');\n  return res.ok();\n\n};\n```\n\n----------------------------------------\n\nTITLE: Running Sails.js App in Production Using Command-line Flag\nDESCRIPTION: Alternative command to start a Sails.js application in production mode using the --prod command-line flag, which is equivalent to setting NODE_ENV=production.\nSOURCE: https://github.com/balderdashy/sails/blob/master/docs/concepts/Deployment/Deployment.md#2025-04-20_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nnode app.js --prod\n```\n\n----------------------------------------\n\nTITLE: Installing MongoDB Adapter for Sails.js\nDESCRIPTION: Command to install the sails-mongo adapter package via npm.\nSOURCE: https://github.com/balderdashy/sails/blob/master/docs/concepts/extending-sails/Adapters/adapterList.md#2025-04-20_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\nnpm install sails-mongo --save\n```\n\n----------------------------------------\n\nTITLE: Setting Metadata for Sails.js 0.10.x Documentation in HTML\nDESCRIPTION: This snippet sets metadata tags for a Sails.js documentation page. It specifies the display name as '0.10.x' and the version as '0.10.0' using custom 'docmeta' tags.\nSOURCE: https://github.com/balderdashy/sails/blob/master/docs/version-notes/0.10.x/0.10.x.md#2025-04-20_snippet_0\n\nLANGUAGE: HTML\nCODE:\n```\n<docmeta name=\"displayName\" value=\"0.10.x\">\n<docmeta name=\"version\" value=\"0.10.0\">\n```\n\n----------------------------------------\n\nTITLE: Launch Node Inspector\nDESCRIPTION: Command to start the Node Inspector debugging interface\nSOURCE: https://github.com/balderdashy/sails/blob/master/docs/reference/cli/sailsdebug.md#2025-04-20_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\n$ node-inspector\n```\n\n----------------------------------------\n\nTITLE: Accessing Custom Configuration in Sails.js\nDESCRIPTION: Demonstrates how to access custom configuration variables using `sails.config.custom`. This allows actions and helpers to utilize the configured settings.\nSOURCE: https://github.com/balderdashy/sails/blob/master/docs/reference/sails.config/sails.config.custom.md#2025-04-20_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nsails.config.custom.mailgunApiKey;\n// -> \"key-testkeyb183848139913858e8abd9a3\"\n```\n\n----------------------------------------\n\nTITLE: CSRF Route Disabling in Sails.js\nDESCRIPTION: This code introduces the ability to use Express-style paths and regular expressions in `sails.config.csrf.routesDisabled`. This enhancement provides more flexible and powerful control over which routes should bypass CSRF protection.  It allows developers to define complex route patterns for excluding specific endpoints from CSRF validation.\nSOURCE: https://github.com/balderdashy/sails/blob/master/CHANGELOG.md#2025-04-20_snippet_10\n\nLANGUAGE: javascript\nCODE:\n```\n\t* [ENHANCEMENT] Allow use of Express style path and RegExp in `sails.config.csrf.routesDisabled`.  Thanks [@bolasblack](https://github.com/bolasblack)!\n```\n\n----------------------------------------\n\nTITLE: Configuring Custom Response Route in Sails.js\nDESCRIPTION: This snippet demonstrates how to configure a custom response route in Sails.js. It sets up a POST route to '/foo' that will respond with 'ok'.\nSOURCE: https://github.com/balderdashy/sails/blob/master/lib/hooks/responses/README.md#2025-04-20_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n'post /foo': {\n  response: 'ok'\n}\n```\n\n----------------------------------------\n\nTITLE: Using sails.log.silly() for Diagnostic Logging in Sails.js\nDESCRIPTION: Demonstrates how to use sails.log.silly() to write output to stdout at the 'silly' log level. This is useful for capturing technical details that are only needed for diagnostics and troubleshooting.\nSOURCE: https://github.com/balderdashy/sails/blob/master/docs/concepts/Logging/Custom log messages.md#2025-04-20_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nsails.log.silly(\n'Successfully fetched Account record for requesting authenticated user (`%d`).',\n'Took %dms.', req.param('id'), msElapsed);\n// -> silly: Successfully fetched Account record for authenticated user (`49722`). Took 41ms.\n```\n\n----------------------------------------\n\nTITLE: Installing a Sails Hook via NPM\nDESCRIPTION: Command to install the autoreload hook from NPM, which automatically refreshes the server when backend code changes are detected.\nSOURCE: https://github.com/balderdashy/sails/blob/master/docs/upgrading/To0.11.md#2025-04-20_snippet_2\n\nLANGUAGE: sh\nCODE:\n```\nnpm install sails-hook-autoreload\n```\n\n----------------------------------------\n\nTITLE: Loading Custom Response Modules in Sails.js\nDESCRIPTION: This method loads custom response modules from the app's responses directory. It's a private API used internally by the moduleloader hook.\nSOURCE: https://github.com/balderdashy/sails/blob/master/lib/hooks/responses/README.md#2025-04-20_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nsails.hooks.responses.loadModules(cb);\n```\n\n----------------------------------------\n\nTITLE: Controller File Structure\nDESCRIPTION: Example of organizing multiple related actions into a controller file.\nSOURCE: https://github.com/balderdashy/sails/blob/master/docs/concepts/ActionsAndControllers/ActionsAndControllers.md#2025-04-20_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nmodule.exports = {\n  login: function (req, res) { ... },\n  logout: function (req, res) { ... },\n  signup: function (req, res) { ... },\n};\n```\n\n----------------------------------------\n\nTITLE: Basic Usage of req.hostname Property\nDESCRIPTION: Shows the basic syntax for accessing the hostname property from a request object.\nSOURCE: https://github.com/balderdashy/sails/blob/master/docs/reference/req/req.hostname.md#2025-04-20_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nreq.hostname;\n```\n\n----------------------------------------\n\nTITLE: Making a Socket GET Request to Subscribe to Records\nDESCRIPTION: Example of using io.socket.get() to fetch user records and automatically subscribe to them. The blueprint API will handle subscribing the client socket to updates for the returned records.\nSOURCE: https://github.com/balderdashy/sails/blob/master/docs/reference/websockets/resourceful-pubsub/resourceful-pubsub.md#2025-04-20_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nio.socket.get('/user', function(resData) {\n  console.log(resData);\n});\n```\n\n----------------------------------------\n\nTITLE: Running Email Reminder Script\nDESCRIPTION: Command to execute the email reminder script\nSOURCE: https://github.com/balderdashy/sails/blob/master/docs/concepts/shell-scripts/shell-scripts.md#2025-04-20_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nsails run send-email-proof-reminders\n```\n\n----------------------------------------\n\nTITLE: Running Sails.js App in Production Using Environment Variable\nDESCRIPTION: Command to start a Sails.js application in production mode by setting the NODE_ENV environment variable. This ensures that Sails uses production-optimized code paths and applies production-specific configurations.\nSOURCE: https://github.com/balderdashy/sails/blob/master/docs/concepts/Deployment/Deployment.md#2025-04-20_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nNODE_ENV=production node app.js\n```\n\n----------------------------------------\n\nTITLE: Basic Sails Generate Command Usage\nDESCRIPTION: Shows the basic syntax for using the sails generate command to generate code files in a Sails.js application.\nSOURCE: https://github.com/balderdashy/sails/blob/master/docs/reference/cli/sailsgenerate.md#2025-04-20_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nsails generate <generator>\n```\n\n----------------------------------------\n\nTITLE: Using sails.registerAction Method\nDESCRIPTION: Demonstrates the usage syntax for registering a new action in Sails.js. The method accepts two parameters: an action (either as a function or dictionary) and an identity string that serves as the action's identifier.\nSOURCE: https://github.com/balderdashy/sails/blob/master/docs/reference/application/advanced-usage/sails.registerAction.md#2025-04-20_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nsails.registerAction(action, name);\n```\n\n----------------------------------------\n\nTITLE: Example of Clearing a Specific Cookie\nDESCRIPTION: Demonstrates clearing a cookie with a specific path, matching the original cookie's configuration to ensure proper removal.\nSOURCE: https://github.com/balderdashy/sails/blob/master/docs/reference/res/res.clearCookie.md#2025-04-20_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nres.cookie('name', 'tobi', { path: '/admin' });\nres.clearCookie('name', { path: '/admin' });\n```\n\n----------------------------------------\n\nTITLE: Configuring Redis Session Store in Sails.js\nDESCRIPTION: JSON configuration for disabling session hooks in Sails.js application.\nSOURCE: https://github.com/balderdashy/sails/blob/master/docs/concepts/Sessions/sessions.md#2025-04-20_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\n\"hooks\": {\n  \"session\": false\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Documentation Metadata for Sails.js 0.9.x in HTML\nDESCRIPTION: These HTML tags define metadata for documentation pages in the Sails.js framework. The tags specify the display name as '0.9.x' and the version as '0.9.0', which helps categorize and identify documentation content in the Sails.js documentation system.\nSOURCE: https://github.com/balderdashy/sails/blob/master/docs/version-notes/0.9.x/0.9.x.md#2025-04-20_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<docmeta name=\"displayName\" value=\"0.9.x\">\n<docmeta name=\"version\" value=\"0.9.0\">\n```\n\n----------------------------------------\n\nTITLE: Accessing Custom Configuration Values in Sails.js\nDESCRIPTION: Example showing how to access custom configuration values in Sails.js applications using the sails.config.custom object. This pattern can be used in actions and helpers throughout the application.\nSOURCE: https://github.com/balderdashy/sails/blob/master/docs/anatomy/config/custom.js.md#2025-04-20_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n[`sails.config.custom`](https://sailsjs.com/documentation/reference/application/sails-config-custom)\n```\n\n----------------------------------------\n\nTITLE: Installing a specific version of Lodash\nDESCRIPTION: This command-line instruction demonstrates how to install a specific version of Lodash using npm.  The `--save` flag adds Lodash to the project's dependencies in `package.json`, and `--save-exact` ensures that the exact version is installed and recorded in `package.json`.\nSOURCE: https://github.com/balderdashy/sails/blob/master/docs/reference/sails.config/sails.config.globals.md#2025-04-20_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nnpm install lodash@^4.x.x --save --save-exact\n```\n\n----------------------------------------\n\nTITLE: Replace Blueprint Request Body Example\nDESCRIPTION: Example JSON request body showing the format for replacing collection members.\nSOURCE: https://github.com/balderdashy/sails/blob/master/docs/reference/blueprint-api/Replace.md#2025-04-20_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n[47, 65]\n```\n\n----------------------------------------\n\nTITLE: Implementing hook dependency in Sails (JavaScript)\nDESCRIPTION: An example of how to make a Sails hook wait for another hook (in this case, the 'orm' hook) to load before initializing.\nSOURCE: https://github.com/balderdashy/sails/blob/master/docs/concepts/extending-sails/Hooks/hookspec/initialize.md#2025-04-20_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\ninitialize: async function() {\n  return new Promise((resolve)=>{\n    sails.on('hook:orm:loaded', ()=>{\n      // Finish initializing custom hook\n      // Then resolve.\n      resolve();\n    });\n  });\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Policies in Sails v0.10\nDESCRIPTION: Updated policy configuration for Sails v0.10 that properly handles both the 'find' and new 'findOne' blueprint actions, preventing access to both routes.\nSOURCE: https://github.com/balderdashy/sails/blob/master/docs/upgrading/To0.10.md#2025-04-20_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nmodule.exports.policies = {\n  '*': true,\n  DoveController: {\n    find: false,\n    findOne: false\n  }\n};\n```\n\n----------------------------------------\n\nTITLE: Defining Default Grunt Task Configuration in Sails.js\nDESCRIPTION: This file is responsible for configuring the default Grunt tasks that run when Sails.js starts in development mode. It serves as a fallback when environment-specific task configurations are not found.\nSOURCE: https://github.com/balderdashy/sails/blob/master/docs/anatomy/tasks/register/default.js.md#2025-04-20_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\n# tasks/register/default.js\n```\n\n----------------------------------------\n\nTITLE: Configuring Custom Timestamp Field Names in Waterline Models\nDESCRIPTION: Example showing how to customize the column/field names for built-in timestamps in Sails v0.12 models using the autoCreatedAt and autoUpdatedAt properties.\nSOURCE: https://github.com/balderdashy/sails/blob/master/docs/upgrading/To0.12.md#2025-04-20_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\n{\n  attributes: {},\n  autoCreatedAt: 'my_cool_created_when_timestamp',\n  autoUpdatedAt: 'my_cool_updated_at_timestamp'\n}\n```\n\n----------------------------------------\n\nTITLE: Basic Usage of req.is() Method\nDESCRIPTION: Shows the basic usage syntax for the req.is() method which checks if the request's Content-Type matches a given type.\nSOURCE: https://github.com/balderdashy/sails/blob/master/docs/reference/req/req.is.md#2025-04-20_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nreq.is(type);\n```\n\n----------------------------------------\n\nTITLE: Configuring Asset Paths When Grunt Hook is Disabled\nDESCRIPTION: This configuration snippet shows how to properly serve assets in Sails.js when the Grunt hook is disabled. It specifies the public path to point to the assets directory in the .sailsrc file.\nSOURCE: https://github.com/balderdashy/sails/blob/master/docs/concepts/Assets/DisablingGrunt.md#2025-04-20_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"paths\": {\n        \"public\": \"assets\"\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Disabling Sessions in Sails.js using .sailsrc Configuration\nDESCRIPTION: Shows how to disable the session hook in a Sails.js application by modifying the .sailsrc file. When sessions are disabled, the session secret is still used for signed cookies if configured.\nSOURCE: https://github.com/balderdashy/sails/blob/master/docs/reference/sails.config/sails.config.session.md#2025-04-20_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nsession: false\n```\n\n----------------------------------------\n\nTITLE: Synchronous Helper Usage in Sails.js\nDESCRIPTION: Demonstrates how to call a synchronous Sails.js helper without using await. This is only possible when the helper declares the sync property.\nSOURCE: https://github.com/balderdashy/sails/blob/master/docs/concepts/Helpers/Helpers.md#2025-04-20_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\nconst greeting = sails.helpers.formatWelcomeMessage('Timothy');\n```\n\n----------------------------------------\n\nTITLE: Adding connect-flash Middleware in Sails.js 1.0\nDESCRIPTION: Instructions for adding the connect-flash middleware, which is no longer included by default in Sails.js 1.0, to enable req.flash() functionality.\nSOURCE: https://github.com/balderdashy/sails/blob/master/docs/upgrading/To1.0.md#2025-04-20_snippet_9\n\nLANGUAGE: bash\nCODE:\n```\nnpm install --save connect-flash\n```\n\n----------------------------------------\n\nTITLE: Relative Path Partial Include\nDESCRIPTION: Shows how to include a partial using a relative path from the current view location.\nSOURCE: https://github.com/balderdashy/sails/blob/master/docs/concepts/Views/Partials.md#2025-04-20_snippet_2\n\nLANGUAGE: ejs\nCODE:\n```\n<%- partial('../../partials/navbar.ejs') %>\n```\n\n----------------------------------------\n\nTITLE: Initializing package.json for a Sails.js Hook\nDESCRIPTION: Basic structure of a package.json file for a Sails.js installable hook. It includes the necessary 'sails' key to identify it as a hook.\nSOURCE: https://github.com/balderdashy/sails/blob/master/docs/concepts/extending-sails/Hooks/installablehooks.md#2025-04-20_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"name\": \"sails-hook-your-hook-name\",\n    \"version\": \"0.0.0\",\n    \"description\": \"a brief description of your hook\",\n    \"main\": \"index.js\",\n    \"sails\": {\n      \"isHook\": true\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: PubSub Methods in Sails.js 0.10.0-rc9\nDESCRIPTION: New simplified PubSub methods for model instances and global channels in Sails.js. These methods handle socket subscriptions and publishing events.\nSOURCE: https://github.com/balderdashy/sails/blob/master/docs/version-notes/0.10.x/Changelog0.10.0-rc9.md#2025-04-20_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\nSomeModel.publish() -- publish to model instance\nSomeModel.subscribe() -- subscribe socket to model instance\nSomeModel.unsubscribe() -- unsubscribe socket from model instance\nsails.publish() -- publish to global channel\nsails.subscribe() -- subscribe socket to global channel\nsails.unsubscribe() -- unsubscribe socket to global channel\n```\n\n----------------------------------------\n\nTITLE: Defining Documentation Metadata Tags for Sails.js 0.8.x in HTML\nDESCRIPTION: These HTML metadata tags specify the display name and version number for Sails.js documentation. The tags identify that this documentation page relates to Sails.js version 0.8.x with a specific version value of 0.8.0.\nSOURCE: https://github.com/balderdashy/sails/blob/master/docs/version-notes/0.8.x/0.8.x.md#2025-04-20_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<docmeta name=\"displayName\" value=\"0.8.x\">\n<docmeta name=\"version\" value=\"0.8.0\">\n```\n\n----------------------------------------\n\nTITLE: Using sails.after() Method for Conditional Event Handling\nDESCRIPTION: Example of using sails.after() to register an event handler that fires if the event has already been triggered or when it is triggered in the future.\nSOURCE: https://github.com/balderdashy/sails/blob/master/lib/EVENTS.md#2025-04-20_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nsails.after('hook:yourHookID:someEvent', function yourEventHandler ( /* a, b, c, ..., z */ ) {\n  // your implementation\n});\n```\n\n----------------------------------------\n\nTITLE: Installing Sails Branch from Github\nDESCRIPTION: Command to install an unreleased branch of Sails.js directly from Github into the current directory's node_modules folder. Useful for testing hotfixes and development versions.\nSOURCE: https://github.com/balderdashy/sails/blob/master/docs/contributing/code-submission-guidelines/best-practices.md#2025-04-20_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\n# Install an unreleased branch of Sails in the current directory's `node_modules`\n$ npm install sails@git://github.com/balderdashy/sails.git#nameOfDesiredBranch\n```\n\n----------------------------------------\n\nTITLE: Installing Lodash using npm\nDESCRIPTION: This command-line instruction demonstrates how to install Lodash using npm. The `--save` flag adds Lodash to the project's dependencies in `package.json`, and `--save-exact` ensures that the exact version is installed and recorded in `package.json`.\nSOURCE: https://github.com/balderdashy/sails/blob/master/docs/reference/sails.config/sails.config.globals.md#2025-04-20_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\nnpm install lodash --save --save-exact\n```\n\n----------------------------------------\n\nTITLE: Basic Usage of sails.getRouteFor()\nDESCRIPTION: Simple usage example showing the basic method call syntax.\nSOURCE: https://github.com/balderdashy/sails/blob/master/docs/reference/application/advanced-usage/sails.getRouteFor.md#2025-04-20_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nsails.getRouteFor(target);\n```\n\n----------------------------------------\n\nTITLE: Installing Winston as a dependency\nDESCRIPTION: This command installs the Winston logging library as a project dependency using npm. Winston is a popular Node.js logging library that can be integrated with Sails.js as a custom logger.\nSOURCE: https://github.com/balderdashy/sails/blob/master/docs/reference/sails.config/sails.config.log.md#2025-04-20_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n\"npm install winston\"\n```\n\n----------------------------------------\n\nTITLE: Sails Debug Output Example\nDESCRIPTION: Example output when running sails debug command, showing debugger initialization and port information\nSOURCE: https://github.com/balderdashy/sails/blob/master/docs/reference/cli/sailsdebug.md#2025-04-20_snippet_1\n\nLANGUAGE: text\nCODE:\n```\n$ sails debug\n\ninfo: Running node-inspector on this app...\ninfo: If you don't know what to do next, type `help`\ninfo: Or check out the docs:\ninfo: http://nodejs.org/api/debugger.html\n\ninfo: ( to exit, type <CTRL>+<C> )\n\ndebugger listening on port 5858\n```\n\n----------------------------------------\n\nTITLE: Generating a Standalone Action in Sails.js (actions2)\nDESCRIPTION: Command to generate a standalone 'sign-up' action using the 'actions2' format. The generated file includes a structured action with friendlyName, description, inputs, exits, and a function.\nSOURCE: https://github.com/balderdashy/sails/blob/master/docs/concepts/ActionsAndControllers/GeneratingActions.md#2025-04-20_snippet_1\n\nLANGUAGE: sh\nCODE:\n```\n$ sails generate action user/signup\ninfo: Created an action!\nUsing \"actions2\"...\n[?] https://sailsjs.com/docs/concepts/actions\n```\n\nLANGUAGE: javascript\nCODE:\n```\n/**\n * user/sign-up.js\n *\n * @description :: Server-side controller action for handling incoming requests.\n * @help        :: See https://sailsjs.com/documentation/concepts/controllers\n */\nmodule.exports = {\n\n\n  friendlyName: 'Sign up',\n\n\n  description: '',\n\n\n  inputs: {\n\n  },\n\n\n  exits: {\n\n  },\n\n\n  fn: function (inputs, exits) {\n\n    return exits.success();\n\n  }\n\n\n};\n```\n\n----------------------------------------\n\nTITLE: Removing All Event Listeners with removeAllListeners() in JavaScript\nDESCRIPTION: Stops listening for any server-related events on a SailsSocket instance, including connect and disconnect events.\nSOURCE: https://github.com/balderdashy/sails/blob/master/docs/reference/websockets/sails.io.js/SailsSocket/methods.md#2025-04-20_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nio.socket.removeAllListeners();\n```\n\n----------------------------------------\n\nTITLE: Example of io.socket.put() Usage in HTML\nDESCRIPTION: This example shows how to use io.socket.put() in an HTML script tag. It sends a PUT request to '/users/9' with data and logs the status code from the response.\nSOURCE: https://github.com/balderdashy/sails/blob/master/docs/reference/websockets/sails.io.js/socket.put.md#2025-04-20_snippet_1\n\nLANGUAGE: html\nCODE:\n```\n<script>\nio.socket.put('/users/9', { occupation: 'psychic' }, function (resData, jwr) {\n  resData.statusCode; // => 200\n});\n</script>\n```\n\n----------------------------------------\n\nTITLE: Defining Pet Model in Sails.js\nDESCRIPTION: This code snippet defines a Pet model in Sails.js with 'name' and 'color' attributes. It demonstrates how to set up a basic model without associations.\nSOURCE: https://github.com/balderdashy/sails/blob/master/docs/concepts/ORM/Associations/OneWayAssociation.md#2025-04-20_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n// myApp/api/models/Pet.js\nmodule.exports = {\n  attributes: {\n    name: {\n      type: 'string'\n    },\n    color: {\n      type: 'string'\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Basic Usage of req.file()\nDESCRIPTION: Simple usage syntax for the req.file() method showing how to specify the field parameter.\nSOURCE: https://github.com/balderdashy/sails/blob/master/docs/reference/req/req.file.md#2025-04-20_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nreq.file(field);\n```\n\n----------------------------------------\n\nTITLE: Displaying Commands for Generating Plugins in Markdown\nDESCRIPTION: This snippet shows commands for generating plugins such as custom generators and adapters in Sails.\nSOURCE: https://github.com/balderdashy/sails/blob/master/docs/concepts/extending-sails/Generators/generatorList.md#2025-04-20_snippet_2\n\nLANGUAGE: markdown\nCODE:\n```\n| Commands for generating plugins\n|:-----------------------------------|\n| sails generate generator _name_\n| sails generate adapter _name_\n```\n\n----------------------------------------\n\nTITLE: Retrieving Request Path in Sails.js\nDESCRIPTION: Demonstrates how to access the URL pathname from an HTTP request, excluding query string and fragment. Returns the path portion of the URL starting with a leading slash.\nSOURCE: https://github.com/balderdashy/sails/blob/master/docs/reference/req/req.path.md#2025-04-20_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nreq.path;\n```\n\nLANGUAGE: javascript\nCODE:\n```\n// Example request: http://localhost:1337/donor/37?name=foo#foobar\nreq.path;\n// -> \"/donor/37\"\n```\n\n----------------------------------------\n\nTITLE: Unsubscribing Room Members Using removeRoomMembersFromRooms in Sails.js\nDESCRIPTION: Basic syntax for using the sails.sockets.removeRoomMembersFromRooms method, which unsubscribes all members of a source room from one or more destination rooms.\nSOURCE: https://github.com/balderdashy/sails/blob/master/docs/reference/websockets/sails.sockets/sails.sockets.removeRoomMembersFromRoom.md#2025-04-20_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nsails.sockets.removeRoomMembersFromRooms(sourceRoom, destRooms, cb);\n```\n\n----------------------------------------\n\nTITLE: Generating Updated Sails.io.js Client in Shell\nDESCRIPTION: Command to generate a new version of the sails.io.js client compatible with Sails v0.11, overwriting the existing file in the conventional location.\nSOURCE: https://github.com/balderdashy/sails/blob/master/docs/upgrading/To0.11.md#2025-04-20_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\nsails generate sails.io.js --force\n```\n\n----------------------------------------\n\nTITLE: Required Integration Tests for Sails Hook Loader\nDESCRIPTION: This snippet outlines specific test cases needed for the Sails hook loader. It focuses on verifying the correct loading of specified hooks and proper error handling when loading hooks with unmet dependencies.\nSOURCE: https://github.com/balderdashy/sails/blob/master/test/integration/README.md#2025-04-20_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n1. If we `sails.load` using `loadHooks` to allow only specific hooks, or `hooks` to disable particular hooks, only the specified hooks should actually be loaded.\n2. `sails.load()` should fail if a test tries to load a hook that depends on other hooks, but those other hooks are disabled.  Note that `sails.load` should _fail with a relevant error message_ and _should not_ hang in this case.\n```\n\n----------------------------------------\n\nTITLE: Adding Document Metadata in Markdown\nDESCRIPTION: Example showing how to add document metadata tags in markdown files for display name specification in the Sails.js documentation system.\nSOURCE: https://github.com/balderdashy/sails/blob/master/docs/README.md#2025-04-20_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n<docmeta name=\"displayName\" value=\"Building Custom Homemade Puddings\">\n```\n\n----------------------------------------\n\nTITLE: Sails Inspect Output Example\nDESCRIPTION: Example output when running sails inspect command, showing debugger connection information and Chrome DevTools instructions\nSOURCE: https://github.com/balderdashy/sails/blob/master/docs/reference/cli/sailsinspect.md#2025-04-20_snippet_1\n\nLANGUAGE: text\nCODE:\n```\n$ sails inspect\n\ninfo: Running app in inspect mode...\ninfo: In Google Chrome, go to chrome://inspect for interactive debugging.\ninfo: For other options, see the link below.\ninfo: ( to exit, type <CTRL>+<C> )\n\nDebugger listening on ws://127.0.0.1:9229/7f984b04-b070-4497-bd15-056261a37f7c\nFor help see https://nodejs.org/en/docs/inspector\n```\n\n----------------------------------------\n\nTITLE: Database Configuration with Custom Datastore\nDESCRIPTION: Configuration example for connecting to an existing MySQL database.\nSOURCE: https://github.com/balderdashy/sails/blob/master/docs/concepts/ORM/Attributes.md#2025-04-20_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\n// config/datastores.js\nmodule.exports = {\n  // ...\n\n  // Existing users are in here!\n  rustyOldMySQLDatabase: {\n    adapter: 'sails-mysql',\n    url: 'mysql://ofh:Gh19R!?@db.eleven.sameness.foo/jonas'\n  },\n  // ...\n};\n```\n\n----------------------------------------\n\nTITLE: Configuring sails.io.js with HTML Attributes\nDESCRIPTION: This example shows how to configure the sails.io.js client using HTML attributes. It disables auto-connect, sets the environment to production, and adds a CSRF token header to all socket requests.\nSOURCE: https://github.com/balderdashy/sails/blob/master/docs/reference/websockets/sails.io.js/sails.io.js.md#2025-04-20_snippet_2\n\nLANGUAGE: html\nCODE:\n```\n<script src=\"/js/dependencies/sails.io.js\"\n  autoConnect=\"false\"\n  environment=\"production\"\n  headers='{ \"x-csrf-token\": \"<%= typeof _csrf !== 'undefined' ? _csrf : '' %>\" }'>\n</script>\n```\n\n----------------------------------------\n\nTITLE: Basic Sails Debug Usage\nDESCRIPTION: Simple command to start Sails application in debug mode\nSOURCE: https://github.com/balderdashy/sails/blob/master/docs/reference/cli/sailsdebug.md#2025-04-20_snippet_0\n\nLANGUAGE: usage\nCODE:\n```\nsails debug\n```\n\n----------------------------------------\n\nTITLE: Installing Skipper GridFS Adapter for Sails.js\nDESCRIPTION: Command to install the Skipper adapter for MongoDB GridFS via npm. This package enables file uploads to MongoDB GridFS in a Sails.js application.\nSOURCE: https://github.com/balderdashy/sails/blob/master/docs/concepts/File Uploads/uploading-to-mongo-gridfs.md#2025-04-20_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\n$ npm install skipper-gridfs --save\n```\n\n----------------------------------------\n\nTITLE: Configuring Policies in Sails v0.10\nDESCRIPTION: Updated policy configuration for Sails v0.10 that explicitly handles both 'find' and the new 'findOne' actions in DoveController to properly restrict access to individual records.\nSOURCE: https://github.com/balderdashy/sails/blob/master/docs/version-notes/0.10.x/Changelog0.10x.md#2025-04-20_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nmodule.exports.policies = {\n  '*': true,\n  DoveController: {\n    find: false,\n    findOne: false\n  }\n};\n```\n\n----------------------------------------\n\nTITLE: Pathname-relative redirect with res.redirect()\nDESCRIPTION: This snippet demonstrates pathname-relative redirection with the res.redirect() method, allowing navigation to parent paths based on the current URL.\nSOURCE: https://github.com/balderdashy/sails/blob/master/docs/reference/res/res.redirect.md#2025-04-20_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nreturn res.redirect('..');\n```\n\n----------------------------------------\n\nTITLE: Retrieving Request Headers Using req.get() - Basic Usage\nDESCRIPTION: Shows the basic syntax for using req.get() method to retrieve header values from a request object.\nSOURCE: https://github.com/balderdashy/sails/blob/master/docs/reference/req/req.get.md#2025-04-20_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nreq.get(header);\n```\n\n----------------------------------------\n\nTITLE: Using .save() Method with Callback in Waterline Before v0.12\nDESCRIPTION: Example of the deprecated usage of .save() method in Waterline ORM before v0.12 that receives a second argument in the callback. This pattern is no longer supported in Sails v0.12.\nSOURCE: https://github.com/balderdashy/sails/blob/master/docs/version-notes/0.12.x/migration-guide-0.12.md#2025-04-20_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nsierra.save(function (err, modifiedSierra){\n  if (err) { /* ... */  return; }\n\n  // ...\n});\n```\n\n----------------------------------------\n\nTITLE: Displaying Commands for Generating New Sails App in Markdown\nDESCRIPTION: This snippet shows various commands for generating a new Sails application using the 'sails new' command with different options.\nSOURCE: https://github.com/balderdashy/sails/blob/master/docs/concepts/extending-sails/Generators/generatorList.md#2025-04-20_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n| Commands that generate a new Sails app\n|:-----------------------------------|\n| sails new _name_\n| sails new _name_ --fast\n| sails new _name_ --caviar\n| sails new _name_ --without=grunt\n| sails new _name_ --without=lodash,async,grunt,blueprints,i18n\n| sails new _name_ --no-frontend --without=sockets,lodash\n| sails new _name_ --minimal\n```\n\n----------------------------------------\n\nTITLE: Disabling All Global Variables in Sails.js\nDESCRIPTION: This snippet shows how to completely disable all global variables in a Sails.js application by setting the globals configuration to false in the config/globals.js file.\nSOURCE: https://github.com/balderdashy/sails/blob/master/docs/concepts/Globals/DisablingGlobals.md#2025-04-20_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n// config/globals.js\nmodule.exports.globals = false;\n```\n\n----------------------------------------\n\nTITLE: Using res.notFound() in Sails.js\nDESCRIPTION: Demonstrates basic usage of the res.notFound() method to send a 404 response. It's typically used to indicate that a requested resource was not found.\nSOURCE: https://github.com/balderdashy/sails/blob/master/docs/reference/res/res.notFound.md#2025-04-20_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n\"return res.notFound();\"\n```\n\n----------------------------------------\n\nTITLE: Running Mocha Tests\nDESCRIPTION: Shell command and output showing successful test execution\nSOURCE: https://github.com/balderdashy/sails/blob/master/docs/concepts/ORM/standalone-usage.md#2025-04-20_snippet_11\n\nLANGUAGE: shell\nCODE:\n```\n$ mocha\n\n\n  UserModel\n    ‚úì should be able to create a user\n\n\n  1 passing (83ms)\n```\n\n----------------------------------------\n\nTITLE: Configuring Model Settings for Record Fetching in Sails v1.0 (JavaScript)\nDESCRIPTION: Configuration options for enabling automatic record fetching on create, update, and destroy operations in Sails v1.0 models.\nSOURCE: https://github.com/balderdashy/sails/blob/master/docs/upgrading/To1.0.md#2025-04-20_snippet_13\n\nLANGUAGE: javascript\nCODE:\n```\nfetchRecordsOnUpdate: true,\nfetchRecordsOnDestroy: true,\nfetchRecordsOnCreate: true,\nfetchRecordsOnCreateEach: true,\n```\n\n----------------------------------------\n\nTITLE: Configuring Documentation Metadata in HTML\nDESCRIPTION: HTML metadata tags specifying display name and table of contents flag for the API Reference documentation.\nSOURCE: https://github.com/balderdashy/sails/blob/master/docs/reference/reference.md#2025-04-20_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<docmeta name=\"displayName\" value=\"API Reference: Table of Contents\">\n<docmeta name=\"isTableOfContents\" value=\"true\">\n```\n\n----------------------------------------\n\nTITLE: Configuring LESS compilation in Sails.js using Grunt\nDESCRIPTION: This configuration file sets up the Grunt 'less' task to compile LESS files into CSS stylesheets. It specifies the source file (assets/styles/importer.less) and destination path for the compiled CSS output.\nSOURCE: https://github.com/balderdashy/sails/blob/master/docs/anatomy/tasks/config/less.js.md#2025-04-20_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n# tasks/config/less.js\n```\n\n----------------------------------------\n\nTITLE: Installing the Latest Version of Sails.js Using NPM\nDESCRIPTION: This snippet provides the NPM command to install or upgrade to the latest stable version of Sails.js. It includes a set of commands to clear cached dependencies and ensure a clean installation. This installation process is for users who are already working on an existing project and want to update to the latest release.\nSOURCE: https://github.com/balderdashy/sails/blob/master/docs/faq/faq.md#2025-04-20_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nnpm install sails@latest --save\n```\n\nLANGUAGE: bash\nCODE:\n```\nrm -rf node_modules && npm cache clear && npm install sails@latest --force --save && npm install\n```\n\n----------------------------------------\n\nTITLE: Configuring Adapter Package.json\nDESCRIPTION: Configuration for adapter's package.json file specifying Sails version and implemented interfaces.\nSOURCE: https://github.com/balderdashy/sails/blob/master/docs/concepts/extending-sails/Adapters/customAdapters.md#2025-04-20_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n{\n  \"sails\": {\n  \t\"adapter\": {\n\t    \"sailsVersion\": \"^1.0.0\",\n\t    \"implements\": [\n\t      \"semantic\",\n\t      \"queryable\"\n\t    ]\n\t  }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Generating Sails Script\nDESCRIPTION: Command to generate a new script file in the scripts/ directory\nSOURCE: https://github.com/balderdashy/sails/blob/master/docs/concepts/shell-scripts/shell-scripts.md#2025-04-20_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nsails generate script hello\n```\n\n----------------------------------------\n\nTITLE: Triggering 404 Response in Sails Controllers\nDESCRIPTION: Shows how to programmatically trigger a 404 Not Found response from within Sails.js controllers or policies.\nSOURCE: https://github.com/balderdashy/sails/blob/master/docs/anatomy/views/404.ejs.md#2025-04-20_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nreturn res.notFound();\n```\n\n----------------------------------------\n\nTITLE: Setting Response Headers for File Download - Sails.js - JavaScript\nDESCRIPTION: Demonstrates how to set response headers using res.attachment() directly without parameters, effectively marking the response for download.\nSOURCE: https://github.com/balderdashy/sails/blob/master/docs/reference/res/res.attachment.md#2025-04-20_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nres.attachment();\n// -> response header will contain:\n//   Content-Disposition: attachment\n```\n\n----------------------------------------\n\nTITLE: Configuring Manual Route to Standalone Action in Sails.js\nDESCRIPTION: Alternative syntax for routing when using standalone actions, referencing the controller action file path relative to api/controllers directory.\nSOURCE: https://github.com/balderdashy/sails/blob/master/docs/concepts/ActionsAndControllers/RoutingToActions.md#2025-04-20_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\n'POST /make/a/sandwich': 'sandwich/make'\n```\n\n----------------------------------------\n\nTITLE: Example Response for Singular Association\nDESCRIPTION: Shows the expected JSON response when populating a singular association (cashier for a purchase).\nSOURCE: https://github.com/balderdashy/sails/blob/master/docs/reference/blueprint-api/Populate.md#2025-04-20_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"name\": \"Dolly\",\n  \"id\": 7,\n  \"createdAt\": 1485462079725,\n  \"updatedAt\": 1485476060873\n}\n```\n\n----------------------------------------\n\nTITLE: Error Negotiation Shortcuts in Sails.js 0.10.0-rc9\nDESCRIPTION: New response methods for common HTTP error scenarios that automatically handle content negotiation. These methods can be configured in their respective error handler files.\nSOURCE: https://github.com/balderdashy/sails/blob/master/docs/version-notes/0.10.x/Changelog0.10.0-rc9.md#2025-04-20_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\nres.serverError( msgOrObj )\nres.notFound()\nres.forbidden( msgOrObj )\nres.badRequest( msgOrObj )\n```\n\n----------------------------------------\n\nTITLE: Accessing Specific Headers with Bracket Notation\nDESCRIPTION: Shows how to access specific headers using bracket notation, which is useful for custom headers or headers with special characters.\nSOURCE: https://github.com/balderdashy/sails/blob/master/docs/reference/req/req.headers.md#2025-04-20_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nreq.headers['custom-header'];\n```\n\n----------------------------------------\n\nTITLE: View Template Usage Example\nDESCRIPTION: Shows how to use the route information returned by sails.getRouteFor() within an EJS view template to create a form.\nSOURCE: https://github.com/balderdashy/sails/blob/master/docs/reference/application/advanced-usage/sails.getRouteFor.md#2025-04-20_snippet_3\n\nLANGUAGE: ejs\nCODE:\n```\n<form action=\"<%=formEndpoint.url%>\" method=\"<%=formEndpoint.method%>\">\n  <!-- ... -->\n</form>\n```\n\n----------------------------------------\n\nTITLE: Using CoffeeScript Generators with Sails CLI\nDESCRIPTION: Command-line instructions for generating CoffeeScript-based API components, models, and controllers in a Sails application using the --coffee flag.\nSOURCE: https://github.com/balderdashy/sails/blob/master/docs/tutorials/coffeeScript.md#2025-04-20_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nsails generate api <foo> --coffee\n# Generate api/models/Foo.coffee and api/controllers/FooController.coffee\nsails generate model <foo> --coffee\n# Generate api/models/Foo.coffee\nsails generate controller <foo> --coffee\n# Generate api/controllers/FooController.coffee\n```\n\n----------------------------------------\n\nTITLE: Configuring Sails-Linker Grunt Task in JavaScript\nDESCRIPTION: This code snippet would typically contain the configuration object for the sails-linker Grunt task. It would define settings for injecting tags in development and production environments, handling various file types like JavaScript, CSS, LESS, and Coffeescript.\nSOURCE: https://github.com/balderdashy/sails/blob/master/docs/anatomy/tasks/config/sails-linker.js.md#2025-04-20_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\n// No actual code snippet provided in the input text\n```\n\n----------------------------------------\n\nTITLE: Configuring Model Attributes in Sails.js\nDESCRIPTION: Configuration example for setting up model attributes in config/models.js, showing how to define createdAt, updatedAt and id fields for both SQL databases and MongoDB.\nSOURCE: https://github.com/balderdashy/sails/blob/master/docs/upgrading/To1.0.md#2025-04-20_snippet_11\n\nLANGUAGE: javascript\nCODE:\n```\n  attributes: {\n    createdAt: { type: 'number', autoCreatedAt: true, },\n    updatedAt: { type: 'number', autoUpdatedAt: true, },\n    id: { type: 'number', autoIncrement: true}, // <-- for SQL databases\n    id: { type: 'string', columnName: '_id'}, // <-- for MongoDB\n  }\n```\n\n----------------------------------------\n\nTITLE: Running Sails Tests in Windows Command Prompt\nDESCRIPTION: Command to run the Sails test suite from the root directory of Sails core using npm in a Windows Command Prompt environment.\nSOURCE: https://github.com/balderdashy/sails/blob/master/test/README.md#2025-04-20_snippet_1\n\nLANGUAGE: cmd\nCODE:\n```\nnpm run custom-tests\n```\n\n----------------------------------------\n\nTITLE: Basic Sails Project Creation Command\nDESCRIPTION: Basic syntax for creating a new Sails.js project using the CLI command.\nSOURCE: https://github.com/balderdashy/sails/blob/master/docs/reference/cli/sailsnew.md#2025-04-20_snippet_0\n\nLANGUAGE: usage\nCODE:\n```\nsails new your-app-name\n```\n\n----------------------------------------\n\nTITLE: Running Adapter Tests\nDESCRIPTION: Command to run the test suite for the custom adapter\nSOURCE: https://github.com/balderdashy/sails/blob/master/docs/concepts/extending-sails/Adapters/customAdapters.md#2025-04-20_snippet_1\n\nLANGUAGE: sh\nCODE:\n```\n$ npm test\n```\n\n----------------------------------------\n\nTITLE: Running Sails Tests in Bash\nDESCRIPTION: Command to run the Sails test suite from the root directory of Sails core using npm in a Bash environment.\nSOURCE: https://github.com/balderdashy/sails/blob/master/test/README.md#2025-04-20_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm test\n```\n\n----------------------------------------\n\nTITLE: Accessing Current Locale in Sails.js\nDESCRIPTION: Reference to the req.getLocale() method that can be used to determine the current locale in a Sails.js application. This method helps determine which translated content to serve in responses.\nSOURCE: https://github.com/balderdashy/sails/blob/master/docs/concepts/Internationalization/TranslatingDynamicContent.md#2025-04-20_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n[`req.getLocale()`](https://github.com/jeresig/i18n-node-2/tree/9c77e01a772bfa0b86fab8716619860098d90d6f#getlocale)\n```\n\n----------------------------------------\n\nTITLE: Setting Response Headers with Filename - Sails.js - JavaScript\nDESCRIPTION: Shows how to use res.attachment() with a filename parameter to customize the content disposition header. This is particularly useful for controlling the file name when downloaded.\nSOURCE: https://github.com/balderdashy/sails/blob/master/docs/reference/res/res.attachment.md#2025-04-20_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nres.attachment('Tax Return (Lerangis, 2019).pdf');\n// -> response header will contain:\n//   Content-Disposition: attachment; filename=\"Tax Return (Lerangis, 2019).pdf\"\n//   Content-Type: application/pdf\n```\n\n----------------------------------------\n\nTITLE: Example Usage of io.socket.delete() in HTML Script\nDESCRIPTION: This example shows how to use io.socket.delete() in an HTML script to delete a user with ID 9. The callback function receives the response data, which includes the deleted user's information.\nSOURCE: https://github.com/balderdashy/sails/blob/master/docs/reference/websockets/sails.io.js/socket.delete.md#2025-04-20_snippet_1\n\nLANGUAGE: html\nCODE:\n```\n<script>\nio.socket.delete('/users/9', function (resData) {\n  resData; // => {id:9, name: 'Timmy Mendez', occupation: 'psychic'}\n});\n</script>\n```\n\n----------------------------------------\n\nTITLE: Configuring Grunt Copy Task in Sails.js\nDESCRIPTION: This code snippet would typically contain the configuration for the Grunt 'copy' task in a Sails.js project. It would define the source and destination paths for copying files from the assets directory to the web root (.tmp/public) and for creating the production build (www directory).\nSOURCE: https://github.com/balderdashy/sails/blob/master/docs/anatomy/tasks/config/copy.js.md#2025-04-20_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\n// Note: Actual code is not provided in the given text.\n// The configuration would typically be a JavaScript object defining the copy task options.\n```\n\n----------------------------------------\n\nTITLE: Specifying layout paths in Sails.js v0.10\nDESCRIPTION: Example of how to specify a custom layout when rendering a view in Sails.js v0.10. Layout paths are now relative to the app's views path.\nSOURCE: https://github.com/balderdashy/sails/blob/master/docs/upgrading/To0.10.md#2025-04-20_snippet_7\n\nLANGUAGE: JavaScript\nCODE:\n```\nreturn res.view('auth/login', {\n  layout: 'auth/someLayout'\n});\n```\n\n----------------------------------------\n\nTITLE: cURL Implementation for Populate\nDESCRIPTION: Example of how to use cURL to make a populate request.\nSOURCE: https://github.com/balderdashy/sails/blob/master/docs/reference/blueprint-api/Populate.md#2025-04-20_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\ncurl http://localhost:1337/purchase/47/cashier\n```\n\n----------------------------------------\n\nTITLE: Configuring HTTP Server Settings in Sails.js\nDESCRIPTION: Reference configuration file for setting up HTTP server options and middleware in a Sails.js application. Used to customize server behavior and add HTTP middleware layers.\nSOURCE: https://github.com/balderdashy/sails/blob/master/docs/anatomy/config/http.js.md#2025-04-20_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n# config/http.js\n```\n\n----------------------------------------\n\nTITLE: Installing lusca Package for Sails.js\nDESCRIPTION: This snippet shows the npm command to install the lusca package in a Sails.js application. The --save flag adds it to the project's dependencies.\nSOURCE: https://github.com/balderdashy/sails/blob/master/docs/concepts/Security/P3P.md#2025-04-20_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\n# In your sails app\nnpm install lusca --save\n```\n\n----------------------------------------\n\nTITLE: HTML Metadata Tag for Documentation Control in Sails.js\nDESCRIPTION: A special HTML metadata tag used to indicate that this README file should not be shown on the Sails.js website. This tag is likely processed by the documentation generation system.\nSOURCE: https://github.com/balderdashy/sails/blob/master/docs/security/README.md#2025-04-20_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<docmeta name=\"notShownOnWebsite\" value=\"true\">\n```\n\n----------------------------------------\n\nTITLE: Session Routes Configuration in Sails.js\nDESCRIPTION: This code introduces a new configuration option `sails.config.session.routesDisabled` to disable session middleware for specific routes.  This can be useful for routes that do not require session management, potentially improving performance or security. The configuration allows for fine-grained control over session usage within the Sails application.\nSOURCE: https://github.com/balderdashy/sails/blob/master/CHANGELOG.md#2025-04-20_snippet_9\n\nLANGUAGE: javascript\nCODE:\n```\n\t* [ENHANCEMENT] Add `sails.config.session.routesDisabled` config option to specify routes that should not use session middleware [c712acf](https://github.com/balderdashy/sails/commit/c712acf29de257d438b422b2c47e67a4d5126ddc)\n```\n\n----------------------------------------\n\nTITLE: Running Sails.js Core\nDESCRIPTION: Describes when the Sails.js core executes in an application lifecycle.\nSOURCE: https://github.com/balderdashy/sails/blob/master/lib/README.md#2025-04-20_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\nThe Sails.js core runs when an app is fired up with `sails.load` or `sails.lift`.\n```\n\n----------------------------------------\n\nTITLE: Setting Locale Manually in Sails.js Controller (JavaScript)\nDESCRIPTION: Example showing how to override the auto-detected language preference for a request using req.setLocale() method, forcing a specific locale to be used.\nSOURCE: https://github.com/balderdashy/sails/blob/master/docs/concepts/Internationalization/Locales.md#2025-04-20_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\n// Force the language to German for the remainder of the request:\nreq.setLocale('de');\n// (this will use the strings located in `config/locales/de.json` for translation)\n```\n\n----------------------------------------\n\nTITLE: Express Middleware Configuration (Legacy)\nDESCRIPTION: Example of deprecated customMiddleware configuration for Express in Sails v0.12.x using Passport.\nSOURCE: https://github.com/balderdashy/sails/blob/master/docs/upgrading/To1.0.md#2025-04-20_snippet_20\n\nLANGUAGE: javascript\nCODE:\n```\ncustomMiddleware: function(app) {\n  var passport = require('passport');\n  app.use(passport.initialize());\n  app.use(passport.session());\n}\n```\n\n----------------------------------------\n\nTITLE: Registering Grunt Build Task for Sails.js Development\nDESCRIPTION: Configuration for the Grunt build task that runs in development environment. Used for compiling assets, troubleshooting Grunt plugins, or preparing assets for Electron/PhoneGap apps and CDN deployment.\nSOURCE: https://github.com/balderdashy/sails/blob/master/docs/anatomy/tasks/register/build.js.md#2025-04-20_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\n# tasks/register/build.js\n```\n\n----------------------------------------\n\nTITLE: Handling Pubsub Events in Sails v0.10\nDESCRIPTION: Updated client-side code for handling pubsub events in Sails v0.10, where clients subscribe directly to model-specific events for better code organization.\nSOURCE: https://github.com/balderdashy/sails/blob/master/docs/upgrading/To0.10.md#2025-04-20_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nsocket.on('user', function(cometEvent) {\n  // Handle inbound messages related to a user record\n});\n\nsocket.on('product', function (cometEvent) {\n  // Handle inbound messages related to a product record\n});\n```\n\n----------------------------------------\n\nTITLE: Basic Usage of req.acceptsCharsets()\nDESCRIPTION: Shows basic usage syntax for checking character set acceptance in a request\nSOURCE: https://github.com/balderdashy/sails/blob/master/docs/reference/req/req.acceptsCharsets.md#2025-04-20_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\nreq.acceptsCharsets(charset);\n```\n\n----------------------------------------\n\nTITLE: Basic io.socket.patch() Usage in JavaScript\nDESCRIPTION: Basic syntax for sending a virtual PATCH request to a Sails server. It takes a URL, optional data payload, and an optional callback function that receives the response data and JSON WebSocket Response object.\nSOURCE: https://github.com/balderdashy/sails/blob/master/docs/reference/websockets/sails.io.js/socket.patch.md#2025-04-20_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nio.socket.patch(url, data, function (resData, jwres){\n  // ...\n});\n```\n\n----------------------------------------\n\nTITLE: Remove Blueprint API Endpoint Usage Pattern\nDESCRIPTION: The URL pattern for removing a foreign record from a collection using the remove blueprint action.\nSOURCE: https://github.com/balderdashy/sails/blob/master/docs/reference/blueprint-api/Remove.md#2025-04-20_snippet_0\n\nLANGUAGE: text\nCODE:\n```\nDELETE /:model/:id/:association/:fk\n```\n\n----------------------------------------\n\nTITLE: Removing temporary sails-disk database in Sails.js\nDESCRIPTION: Command to remove the temporary disk database file in a Sails.js project when migrating from v0.9.x to v0.10.\nSOURCE: https://github.com/balderdashy/sails/blob/master/docs/version-notes/0.10.x/Changelog0.10x.md#2025-04-20_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\n$ rm .tmp/disk.db\n```\n\n----------------------------------------\n\nTITLE: Individual Message Partial Implementation\nDESCRIPTION: Shows the implementation of a single message item partial with documentation of required properties.\nSOURCE: https://github.com/balderdashy/sails/blob/master/docs/concepts/Views/Partials.md#2025-04-20_snippet_6\n\nLANGUAGE: ejs\nCODE:\n```\n/**\n * views/partials/inbox-message.ejs\n *\n * An individual inbox message.\n *\n * @needs {Dictionary} message\n *   @property {Number} id\n *   @property {String} subject\n *\n */%>\n<li class=\"inbox-message\" data-id=\"<%= message.id %>\">\n  <a href=\"/messages/<%= message.id %>\"><%= message.subject %></a>\n  <button class=\"fa fa-trash\" is=\"delete-btn\" aria-label=\"Delete\"></button>\n</li>\n```\n\n----------------------------------------\n\nTITLE: Installing Core Hooks in Sails v1.0\nDESCRIPTION: Commands for installing the required core hooks (orm, sockets, and grunt) that were moved out of the Sails core in version 1.0. These need to be explicitly installed unless your app has the respective hooks disabled.\nSOURCE: https://github.com/balderdashy/sails/blob/master/docs/upgrading/To1.0.md#2025-04-20_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm install --save sails-hook-orm\nnpm install --save sails-hook-sockets\nnpm install --save sails-hook-grunt\n```\n\n----------------------------------------\n\nTITLE: Accessing Request Host Property in Sails.js\nDESCRIPTION: Basic usage example showing how to access the req.host property which returns the hostname without port number from the request's Host header.\nSOURCE: https://github.com/balderdashy/sails/blob/master/docs/reference/req/req.host.md#2025-04-20_snippet_0\n\nLANGUAGE: usage\nCODE:\n```\nreq.host;\n```\n\n----------------------------------------\n\nTITLE: Installing WeeChat on Ubuntu/Debian\nDESCRIPTION: Command to install WeeChat IRC client using apt package manager on Ubuntu/Debian systems.\nSOURCE: https://github.com/balderdashy/sails/blob/master/docs/irc/irc.md#2025-04-20_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nsudo apt-get install weechat\n```\n\n----------------------------------------\n\nTITLE: Installing MySQL Adapter for Sails.js\nDESCRIPTION: Command to install the sails-mysql adapter package via npm.\nSOURCE: https://github.com/balderdashy/sails/blob/master/docs/concepts/extending-sails/Adapters/adapterList.md#2025-04-20_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm install sails-mysql --save\n```\n\n----------------------------------------\n\nTITLE: Adding FileList Support to Sails.js Cloud SDK\nDESCRIPTION: Adds experimental support for FileList instances in the Sails.js Cloud SDK, enabling multi-file uploads.\nSOURCE: https://github.com/balderdashy/sails/blob/master/CHANGELOG.md#2025-04-20_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nAdd experimental support for FileList instances (multi-file upload via Cloud SDK).\n```\n\n----------------------------------------\n\nTITLE: Loading Sails App and Sending Virtual Request in JavaScript\nDESCRIPTION: Illustrates how to start a Sails app using .load(), send a virtual POST request using the app's .request() method, and then lower the app. Includes error handling.\nSOURCE: https://github.com/balderdashy/sails/blob/master/docs/concepts/Programmatic Usage/Programmatic Usage.md#2025-04-20_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nmySailsApp.load({\n  // Optionally pass in any programmatic config overrides you like here.\n}, function(err) {\n  if (err) {\n    console.error('Failed to load app.  Details:', err);\n    return;\n  }\n\n  // --‚Ä¢\n  // Make a request using the \"request\" method and display the response.\n  // Note that you still must have an `api/controllers/FooController.js` file\n  // under the current working directory, with an `index` action,\n  // or a `/foo` or `POST /foo` route set up in `config/routes.js`.\n  mySailsApp.request({url:'/foo', method: 'post'}, function (err, response) {\n    if (err) {\n      console.log('Could not send virtual request.  Details:', err);\n    }\n    else {\n      console.log('Got response:', response);\n    }\n\n    // >--\n    // In any case, whether the request worked or not, now we need to call `.lower()`.\n    mySailsApp.lower(function (err) {\n      if (err) {\n        console.log('Could not lower Sails app.  Details:',err);\n        return;\n      }\n\n      // --‚Ä¢\n      console.log('Successfully lowered Sails app.');\n\n    });//</lower sails app>\n  });//</send virtual request to sails app>\n});//</load sails app (but not lift!)>\n```\n\n----------------------------------------\n\nTITLE: Installing Sails v0.12 Update with NPM\nDESCRIPTION: Command to install Sails v0.12.0 using npm. The --force flag overrides the existing Sails dependency while --save updates the package.json file for future installations.\nSOURCE: https://github.com/balderdashy/sails/blob/master/docs/version-notes/0.12.x/migration-guide-0.12.md#2025-04-20_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm install sails@0.12.0 --force --save\n```\n\n----------------------------------------\n\nTITLE: WebSocket Notification Format\nDESCRIPTION: Example of the WebSocket notification message format sent to subscribed clients after removal.\nSOURCE: https://github.com/balderdashy/sails/blob/master/docs/reference/blueprint-api/Remove.md#2025-04-20_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\n{\n  id: 16,\n  verb: 'removedFrom',\n  attribute: 'employeesOfTheMonth',\n  removedIds: [ 7 ]\n}\n```\n\n----------------------------------------\n\nTITLE: Handling Pubsub Events in Sails v0.10\nDESCRIPTION: Updated client-side code for Sails v0.10 showing how to subscribe to model-specific events directly using the model identity as the event name.\nSOURCE: https://github.com/balderdashy/sails/blob/master/docs/version-notes/0.10.x/Changelog0.10x.md#2025-04-20_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nsocket.on('user', function(cometEvent) {\n  // Handle inbound messages related to a user record\n});\n\nsocket.on('product', function (cometEvent) {\n  // Handle inbound messages related to a product record\n});\n```\n\n----------------------------------------\n\nTITLE: Using 'not equal' operator in JavaScript\nDESCRIPTION: Demonstrates how to use the 'not equal' operator in a query.\nSOURCE: https://github.com/balderdashy/sails/blob/master/docs/concepts/ORM/Querylanguage.md#2025-04-20_snippet_8\n\nLANGUAGE: javascript\nCODE:\n```\nModel.find({\n  name: { '!=': 'foo' }\n});\n```\n\n----------------------------------------\n\nTITLE: Advanced Swig Template Engine Configuration\nDESCRIPTION: Advanced configuration setup that includes custom Swig options and Consolidate.js integration with custom tag controls.\nSOURCE: https://github.com/balderdashy/sails/blob/master/docs/concepts/Views/ViewEngines.md#2025-04-20_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nextension: 'swig',\ngetRenderFn: ()=>{\n  // Import `consolidate`.\n  var cons = require('consolidate');\n  // Import `swig`.\n  var swig = require('swig');\n  // Configure `swig`.\n  swig.setDefaults({tagControls: ['{?', '?}']});\n  // Set the module that Consolidate uses for Swig.\n  cons.requires.swig = swig;\n  // Return the rendering function for Swig.\n  return cons.swig;\n}\n```\n\n----------------------------------------\n\nTITLE: Configurable Hook Defaults Using __configKey__\nDESCRIPTION: Example showing how to implement configurable defaults for an installable hook using the special __configKey__ property to allow end-users to change the configuration key.\nSOURCE: https://github.com/balderdashy/sails/blob/master/docs/concepts/extending-sails/Hooks/hookspec/defaults.md#2025-04-20_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n   __configKey__: {\n      name: \"Super Bob\"\n   }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Logger Level in Sails.js\nDESCRIPTION: Sets the default log level for the Sails.js logger. The default value is 'info', but can be customized in the Sails configuration.\nSOURCE: https://github.com/balderdashy/sails/blob/master/lib/hooks/logger/README.md#2025-04-20_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n| Property                                       | Type          | Default         |\n|------------------------------------------------|:-------------:|------------------|\n| `sails.config.log.level`                       | ((string))    | `'info'`        |\n```\n\n----------------------------------------\n\nTITLE: Configuring TypeScript Support in app.js\nDESCRIPTION: Code to add to the top of your Sails app.js file to enable TypeScript support. This registers the ts-node module which allows for direct execution of TypeScript files without a separate compilation step.\nSOURCE: https://github.com/balderdashy/sails/blob/master/docs/tutorials/typeScript.md#2025-04-20_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nrequire('ts-node/register');\n```\n\n----------------------------------------\n\nTITLE: Replace Blueprint Usage Pattern\nDESCRIPTION: The basic URL pattern for using the Replace blueprint action.\nSOURCE: https://github.com/balderdashy/sails/blob/master/docs/reference/blueprint-api/Replace.md#2025-04-20_snippet_0\n\nLANGUAGE: text\nCODE:\n```\nPUT /:model/:id/:association\n```\n\n----------------------------------------\n\nTITLE: Basic Sails Inspect Usage\nDESCRIPTION: Basic command syntax for running Sails in inspect mode\nSOURCE: https://github.com/balderdashy/sails/blob/master/docs/reference/cli/sailsinspect.md#2025-04-20_snippet_0\n\nLANGUAGE: text\nCODE:\n```\nsails inspect\n```\n\n----------------------------------------\n\nTITLE: Regenerating WebSocket Client in Sails v1.0\nDESCRIPTION: Command to upgrade the sails.io.js websocket client to the version compatible with Sails v1.0. This ensures proper functionality of real-time features in the application.\nSOURCE: https://github.com/balderdashy/sails/blob/master/docs/upgrading/To1.0.md#2025-04-20_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nsails generate sails.io.js\n```\n\n----------------------------------------\n\nTITLE: Configuring JST Grunt Task for HTML Template Precompilation in Sails.js\nDESCRIPTION: This code snippet would typically contain the configuration for the 'jst' Grunt task, specifying input and output paths, and any custom options for template compilation. However, the actual code is not provided in the given text.\nSOURCE: https://github.com/balderdashy/sails/blob/master/docs/anatomy/tasks/config/jst.js.md#2025-04-20_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\n// No actual code snippet provided in the text\n```\n\n----------------------------------------\n\nTITLE: Updating Fork with Upstream Changes - Git Commands\nDESCRIPTION: Series of git commands to merge recent changes from the main Sails repository into your fork.\nSOURCE: https://github.com/balderdashy/sails/blob/master/docs/contributing/code-submission-guidelines/sending-pull-requests.md#2025-04-20_snippet_1\n\nLANGUAGE: git\nCODE:\n```\ngit remote add core https://github.com/balderdashy/sails.git\ngit fetch core\ngit merge core/master\n```\n\n----------------------------------------\n\nTITLE: Handling Pubsub Events in Sails v0.9\nDESCRIPTION: Client-side code for subscribing to the 'message' event in Sails v0.9, where model type determination is done manually by checking the event data.\nSOURCE: https://github.com/balderdashy/sails/blob/master/docs/version-notes/0.10.x/Changelog0.10x.md#2025-04-20_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nsocket.on('message', function(cometEvent) {\n   if (cometEvent.model == 'user') {\n     // Handle inbound messages related to a user record\n   }\n   else if (cometEvent.model === 'product') {\n     // Handle inbound messages related to a product record\n   }\n   // ...\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Global Variables in Sails.js\nDESCRIPTION: File path and configuration reference for Sails.js global variables. Located at config/globals.js, this file determines which variables and utilities are made globally available throughout the Sails.js application.\nSOURCE: https://github.com/balderdashy/sails/blob/master/docs/anatomy/config/globals.js.md#2025-04-20_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n# config/globals.js\n```\n\n----------------------------------------\n\nTITLE: Listing Generators for Creating Files in Existing Sails App in Markdown\nDESCRIPTION: This snippet presents various 'sails generate' commands for creating different types of files (models, actions, helpers, etc.) in an existing Sails application.\nSOURCE: https://github.com/balderdashy/sails/blob/master/docs/concepts/extending-sails/Generators/generatorList.md#2025-04-20_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n| Generators for spitting out new files in an existing Sails app\n|:-----------------------------------|\n| sails generate model _identity_\n| sails generate action _name_\n| sails generate action view-_name_\n| sails generate action _some/path/_view-_name_\n| sails generate page _name_\n| sails generate helper _name_\n| sails generate helper view-_name_\n| sails generate script _name_\n| sails generate script get-_name_\n| sails generate controller _name_\n| sails generate api _name_\n| sails generate hook _name_\n| sails generate response _name_\n```\n\n----------------------------------------\n\nTITLE: Disabling Lodash and Async globals in Sails.js\nDESCRIPTION: This code snippet shows how to disable the Lodash and Async global variables in a Sails.js application by setting their respective properties in `config/globals.js` to `false`.  This prevents them from being automatically available as globals and forces developers to require them explicitly in the files where they are needed.\nSOURCE: https://github.com/balderdashy/sails/blob/master/docs/reference/sails.config/sails.config.globals.md#2025-04-20_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\n// Disable `_` and `async` globals.\n_: false,\nasync: false,\n```\n\n----------------------------------------\n\nTITLE: Setting Location Header in Sails.js Response\nDESCRIPTION: Sets the Location HTTP response header with different URL expressions including relative, absolute, and special paths like 'back'\nSOURCE: https://github.com/balderdashy/sails/blob/master/docs/reference/res/res.location.md#2025-04-20_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nres.location('/foo/bar');\n```\n\nLANGUAGE: javascript\nCODE:\n```\nres.location('foo/bar');\n```\n\nLANGUAGE: javascript\nCODE:\n```\nres.location('http://example.com');\n```\n\nLANGUAGE: javascript\nCODE:\n```\nres.location('../login');\n```\n\nLANGUAGE: javascript\nCODE:\n```\nres.location('back');\n```\n\n----------------------------------------\n\nTITLE: Basic Sails Application Instance Creation\nDESCRIPTION: Shows how to require and create a basic Sails application instance, which is typically done in the app.js file. This is the standard way to initialize a Sails application.\nSOURCE: https://github.com/balderdashy/sails/blob/master/docs/reference/application/advanced-usage/advanced-usage.md#2025-04-20_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nvar sails = require('sails');\n```\n\n----------------------------------------\n\nTITLE: Setting Up Local Development Environment - NPM Commands\nDESCRIPTION: Commands to link your forked version of Sails with your local application for testing.\nSOURCE: https://github.com/balderdashy/sails/blob/master/docs/contributing/code-submission-guidelines/sending-pull-requests.md#2025-04-20_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n$ sails lift\n```\n\n----------------------------------------\n\nTITLE: Installing irssi on OSX\nDESCRIPTION: Humorous pseudo-command demonstrating installation of irssi IRC client on OSX.\nSOURCE: https://github.com/balderdashy/sails/blob/master/docs/irc/irc.md#2025-04-20_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nsudo steveJobsPM --prettyPlease install -m 'is this okay?' irssi\n```\n\n----------------------------------------\n\nTITLE: Updating blueprint configuration in Sails.js v0.10\nDESCRIPTION: Example of how to update the controller configuration for blueprints in Sails.js v0.10. The 'blueprints' key is removed from the _config object.\nSOURCE: https://github.com/balderdashy/sails/blob/master/docs/upgrading/To0.10.md#2025-04-20_snippet_6\n\nLANGUAGE: JavaScript\nCODE:\n```\n...\n_config: {\n    rest: true,\n    ...\n}\n```\n\n----------------------------------------\n\nTITLE: Basic Sails Console Usage\nDESCRIPTION: The basic command to start the Sails.js interactive console, which lifts the server and provides REPL access.\nSOURCE: https://github.com/balderdashy/sails/blob/master/docs/reference/cli/sailsconsole.md#2025-04-20_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nsails console\n```\n\n----------------------------------------\n\nTITLE: Using .save() Method with Callback in Waterline for v0.12\nDESCRIPTION: Updated implementation of the .save() method callback in Waterline ORM for Sails v0.12. The callback now only receives the error argument, improving performance especially for apps working with large datasets.\nSOURCE: https://github.com/balderdashy/sails/blob/master/docs/version-notes/0.12.x/migration-guide-0.12.md#2025-04-20_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nsierra.save(function (err){\n  if (err) { /* ... */  return; }\n\n  // ...\n});\n```\n\n----------------------------------------\n\nTITLE: Markdown Documentation for Sails Extensions\nDESCRIPTION: Comprehensive guide explaining the three types of Sails.js extensions - Generators, Adapters, and Hooks - with examples and links to documentation for each type.\nSOURCE: https://github.com/balderdashy/sails/blob/master/docs/concepts/extending-sails/extending-sails.md#2025-04-20_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n# Extending Sails\n\nIn keeping with the Node philosophy, Sails aims to keep its core as small as possible, delegating all but the most critical functions to separate modules.  There are currently three types of extensions that you can add to Sails:\n\n+ [**Generators**](https://sailsjs.com/documentation/concepts/extending-sails/Generators): for adding and overriding functionality in the Sails CLI.  *Example*: [sails-generate-model](https://www.npmjs.com/package/sails-generate-model), which allows you to create models on the command line with `sails generate model foo`.\n+ [**Adapters**](https://sailsjs.com/documentation/concepts/extending-sails/Adapters): for integrating Waterline (Sails' ORM) with new data sources, including databases, APIs, or even hardware. *Example*: [sails-postgresql](https://www.npmjs.com/package/sails-postgresql), the official [PostgreSQL](http://www.postgresql.org/) adapter for Sails.\n+ [**Hooks**](https://sailsjs.com/documentation/concepts/extending-sails/Hooks): for overriding or injecting new functionality in the Sails runtime.  *Example*: [sails-hook-autoreload](https://www.npmjs.com/package/sails-hook-autoreload), which adds auto-refreshing for a Sails project's API without having to manually restart the server.\n```\n\n----------------------------------------\n\nTITLE: Describing Session Hook Functionality in Sails.js\nDESCRIPTION: This snippet outlines the main responsibilities and methods of the Session Hook in Sails.js. It handles configuration verification, session store instantiation, and provides methods for session management with socket.io connections.\nSOURCE: https://github.com/balderdashy/sails/blob/master/lib/hooks/session/README.md#2025-04-20_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n## Session Hook\n\nAt configuration-time, this hook loads verifies valid configuration of the connect session store (configurable in `sails.config.session`),\nAt lift-time, it instantiates the session store and makes it accesible via `sails.session`.\n\nIt includes methods for:\n  + attaching a connect session to a socket.io connection\n  + generating new sessions\n  + getting and setting the session\n```\n\n----------------------------------------\n\nTITLE: Setting metadata for Sails.js documentation version in HTML\nDESCRIPTION: This HTML snippet defines metadata tags for Sails.js documentation. It specifies the display name as '0.11.x' and sets the version value to '0.11.0'. These tags are likely used by a documentation system to categorize and display version-specific content.\nSOURCE: https://github.com/balderdashy/sails/blob/master/docs/version-notes/0.11.x/0.11.x.md#2025-04-20_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<docmeta name=\"displayName\" value=\"0.11.x\">\n<docmeta name=\"version\" value=\"0.11.0\">\n```\n\n----------------------------------------\n\nTITLE: Running Sails.js Benchmarks with Mocha\nDESCRIPTION: Commands to run benchmark tests for Sails.js using Mocha. The first command runs basic benchmarks, while the second provides a more detailed report with millisecond timings.\nSOURCE: https://github.com/balderdashy/sails/blob/master/test/benchmarks/README.md#2025-04-20_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\n$ BENCHMARK=true mocha test/benchmarks\n```\n\nLANGUAGE: sh\nCODE:\n```\n$ BENCHMARK=true mocha test/benchmarks -v\n```\n\n----------------------------------------\n\nTITLE: Sails Lift Console Output Example\nDESCRIPTION: Shows the typical console output when starting a Sails.js application, including version information, server status, and environment details.\nSOURCE: https://github.com/balderdashy/sails/blob/master/docs/reference/cli/sailslift.md#2025-04-20_snippet_1\n\nLANGUAGE: text\nCODE:\n```\n$ sails lift\n\ninfo: Starting app...\n\ninfo:\ninfo:\ninfo:    Sails              <|\ninfo:    v1.0.0              |\\\ninfo:                       /|.\\\ninfo:                      / || \\\ninfo:                    ,'  |'  \\\ninfo:                 .-'.-==|/_--'\ninfo:                 `--'-------'\ninfo:    __---___--___---___--___---___--___\ninfo:  ____---___--___---___--___---___--___-__\ninfo:\ninfo: Server lifted in `/Users/mikermcneil/code/sandbox/second`\ninfo: To see your app, visit http://localhost:1337\ninfo: To shut down Sails, press <CTRL> + C at any time.\n\ndebug: --------------------------------------------------------\ndebug: :: Sat Apr 05 2014 17:03:39 GMT-0500 (CDT)\n\ndebug: Environment : development\ndebug: Port        : 1337\ndebug: --------------------------------------------------------\n```\n\n----------------------------------------\n\nTITLE: Project Directory Structure\nDESCRIPTION: Basic file structure showing the organization of model and test files\nSOURCE: https://github.com/balderdashy/sails/blob/master/docs/concepts/ORM/standalone-usage.md#2025-04-20_snippet_7\n\nLANGUAGE: none\nCODE:\n```\nroot\n|- models\n|  |- Pet.js\n|  `- User.js\n`- test\n   |- mocha.opts\n   `- UserModelTest.js\n```\n\n----------------------------------------\n\nTITLE: Configuring node-p3p Middleware in Sails.js\nDESCRIPTION: This snippet demonstrates how to set up the node-p3p middleware in the Sails.js http.js configuration file. It uses the recommended compact privacy policy provided by the package.\nSOURCE: https://github.com/balderdashy/sails/blob/master/docs/concepts/Security/P3P.md#2025-04-20_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\n  // ...\n  // node-p3p provides a recommended compact privacy policy out of the box\n  p3p: require('p3p')(require('p3p').recommended)\n  // ...\n```\n\n----------------------------------------\n\nTITLE: Configuring Grunt Concat Task\nDESCRIPTION: Configuration for the grunt-contrib-concat task that combines multiple JavaScript and CSS files into single production files located in .tmp/public/concat directory. The concatenated files are used as intermediate files for further minification processing.\nSOURCE: https://github.com/balderdashy/sails/blob/master/docs/anatomy/tasks/config/concat.js.md#2025-04-20_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n# tasks/config/concat.js\n```\n\n----------------------------------------\n\nTITLE: Clearing Cookies in Sails.js Method Signature\nDESCRIPTION: Method for removing a cookie from the HTTP response with optional path configuration. The default path is set to '/'.\nSOURCE: https://github.com/balderdashy/sails/blob/master/docs/reference/res/res.clearCookie.md#2025-04-20_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nres.clearCookie(name [,options]);\n```\n\n----------------------------------------\n\nTITLE: Configuring Polyfill Grunt Task for Sails.js\nDESCRIPTION: This code snippet represents the configuration of a Grunt task called 'polyfill'. It handles adding polyfills for older browsers in both development and production environments. In development, it copies the polyfill file to a specific location, while in production, it prepends the polyfill to the minified JavaScript file.\nSOURCE: https://github.com/balderdashy/sails/blob/master/docs/anatomy/tasks/register/polyfill.js.md#2025-04-20_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\n# tasks/register/polyfill.js\n```\n\n----------------------------------------\n\nTITLE: Handling Pubsub Events in Sails v0.9\nDESCRIPTION: Example of client-side code for handling pubsub events in Sails v0.9, where clients listened for the generic 'message' event and determined the model type from the event data.\nSOURCE: https://github.com/balderdashy/sails/blob/master/docs/upgrading/To0.10.md#2025-04-20_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nsocket.on('message', function(cometEvent) {\n   if (cometEvent.model == 'user') {\n     // Handle inbound messages related to a user record\n   }\n   else if (cometEvent.model === 'product') {\n     // Handle inbound messages related to a product record\n   }\n   // ...\n}\n```\n\n----------------------------------------\n\nTITLE: Markdown Documentation Metadata\nDESCRIPTION: Metadata tags defining the display name and overview status of the contribution guide document.\nSOURCE: https://github.com/balderdashy/sails/blob/master/docs/contributing/preface.md#2025-04-20_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n<docmeta name=\"displayName\" value=\"Contributing to Sails\">\n<docmeta name=\"isOverviewPage\" value=\"true\">\n```\n\n----------------------------------------\n\nTITLE: Sails.js Project Generation Without Grunt\nDESCRIPTION: CLI command to generate a new Sails.js project without Grunt integration for projects that don't require frontend asset processing.\nSOURCE: https://github.com/balderdashy/sails/blob/master/docs/anatomy/tasks/tasks.md#2025-04-20_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nsails new myCoolApi --no-frontend\n```\n\n----------------------------------------\n\nTITLE: Defining Document Metadata in Markdown for Sails.js Documentation\nDESCRIPTION: This snippet demonstrates how to add metadata to a Markdown document using a custom tag. The metadata indicates that this specific document should not be shown on the website.\nSOURCE: https://github.com/balderdashy/sails/blob/master/docs/anatomy/README.md#2025-04-20_snippet_0\n\nLANGUAGE: Markdown\nCODE:\n```\n<docmeta name=\"notShownOnWebsite\" value=\"true\">\n```\n\n----------------------------------------\n\nTITLE: Router Bind Event Object Structure in Sails.js\nDESCRIPTION: The structure of the routeObj argument passed to event handlers for the 'router:bind' event. Contains path, target function, HTTP verb, and options object.\nSOURCE: https://github.com/balderdashy/sails/blob/master/lib/EVENTS.md#2025-04-20_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\n{\n  path: 'String',\n  target: function theFnBoundtoTheRoute (req, res, next) {},\n  verb: 'String',\n  options: 'Object'\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Metadata in Markdown for Sails Documentation\nDESCRIPTION: This snippet defines metadata for the documentation page using custom HTML-like tags. It specifies the display name and indicates that this is an overview page.\nSOURCE: https://github.com/balderdashy/sails/blob/master/docs/anatomy/anatomy.md#2025-04-20_snippet_0\n\nLANGUAGE: Markdown\nCODE:\n```\n<docmeta name=\"displayName\" value=\"Anatomy of a Sails app\">\n<docmeta name=\"isOverviewPage\" value=\"true\">\n```\n\n----------------------------------------\n\nTITLE: Generating updated Sails.io.js client library\nDESCRIPTION: Command to regenerate the sails.io.js client to be compatible with Socket.io v1. This replaces the existing client file with the new version.\nSOURCE: https://github.com/balderdashy/sails/blob/master/docs/version-notes/0.11.x/MigrationGuide0.11.md#2025-04-20_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nsails generate sails.io.js --force\n```\n\n----------------------------------------\n\nTITLE: Installing Sails v0.12 Upgrade Using NPM\nDESCRIPTION: Command to install Sails v0.12 from the root of your Sails app. The --force flag overrides the existing Sails dependency and --save updates the package.json file.\nSOURCE: https://github.com/balderdashy/sails/blob/master/docs/upgrading/To0.12.md#2025-04-20_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm install sails@~0.12.0 --force --save\n```\n\n----------------------------------------\n\nTITLE: Shortcut Blueprint Routes\nDESCRIPTION: Development-mode shortcut routes that provide quick access to model operations through URL parameters. These routes are meant for development convenience and should be disabled in production.\nSOURCE: https://github.com/balderdashy/sails/blob/master/docs/concepts/Blueprints/Blueprint Routes.md#2025-04-20_snippet_1\n\nLANGUAGE: http\nCODE:\n```\nGET /:modelIdentity/find\nGET /:modelIdentity/find/:id\nGET /:modelIdentity/create\nGET /:modelIdentity/update/:id\nGET /:modelIdentity/destroy/:id\nGET /:modelIdentity/:id/:association/add/:fk\nGET /:modelIdentity/:id/:association/remove/:fk\nGET /:modelIdentity/:id/:association/replace?association=[1,2...]\n```\n\n----------------------------------------\n\nTITLE: Basic Usage of sails.renderView()\nDESCRIPTION: Shows the basic syntax for calling the sails.renderView() method. Takes a path to the view and optional template data as parameters.\nSOURCE: https://github.com/balderdashy/sails/blob/master/docs/reference/application/advanced-usage/sails.renderView.md#2025-04-20_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nsails.renderView(pathToView, templateData);\n```\n\n----------------------------------------\n\nTITLE: Expected JSON Response After Removal\nDESCRIPTION: Example response showing the updated parent record after removing the association.\nSOURCE: https://github.com/balderdashy/sails/blob/master/docs/reference/blueprint-api/Remove.md#2025-04-20_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"id\": 16,\n  \"name\": \"Parmer and N. Lamar\",\n  \"createdAt\": 1485552033435,\n  \"updatedAt\": 1485552048794,\n  \"employeesOfTheMonth\": [\n    {\n      \"id\": 12,\n      \"name\": \"Motoki\",\n      \"createdAt\": 1485462079725,\n      \"updatedAt\": 1485476060873\n    },\n    {\n      \"id\": 4,\n      \"name\": \"Timothy\",\n      \"createdAt\": 1485462079727,\n      \"updatedAt\": 1485476090874\n    }\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Removing JST Task from Sails.js Project\nDESCRIPTION: Command to uninstall the JST Grunt plugin from a Sails.js project and remove it from dependencies.\nSOURCE: https://github.com/balderdashy/sails/blob/master/docs/concepts/Assets/TaskAutomation.md#2025-04-20_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\nnpm uninstall grunt-contrib-jst --save-dev\n```\n\n----------------------------------------\n\nTITLE: Markdown Documentation - Sails Feature Proposal Steps\nDESCRIPTION: Markdown formatted instructions for submitting feature proposals to Sails, including background context on the framework's design philosophy and plugin system.\nSOURCE: https://github.com/balderdashy/sails/blob/master/docs/contributing/proposing-features/submitting-a-proposal.md#2025-04-20_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n# Submitting a proposal\n\nBefore submitting a new proposal, please consider the following:\n\nMany individuals and companies (large and small) are happily using Sails in production projects (both greenfield and mature) with the currently-released feature set today, as-is.  A lot of the reason for this is that Sails was built while the core team was running a development shop, where it was used to take many different kinds of applications from concept to production, and then to serve as the backend for those applications as they were maintained over the next few years.\n\nMuch like the canonical case of Ruby on Rails, this means that Sails was designed from the beginning to be both developer-friendly and enterprise-friendly using a convention over configuration methodology.  **Conventions** make it quick and easy to build new Sails apps and switch between different existing Sails apps, while **configurability** allows Sails developers to be flexible and customize those apps as they mature using the full power of the underlying tool chain (configuration, plugins/overrides, Express, Socket.io, Node.js, and JavaScript).\n```\n\n----------------------------------------\n\nTITLE: Configuring Policies in Sails v0.9\nDESCRIPTION: Example of policy configuration in Sails v0.9 that prevents access to the 'find' action in DoveController, which would block both collection and individual record access.\nSOURCE: https://github.com/balderdashy/sails/blob/master/docs/version-notes/0.10.x/Changelog0.10x.md#2025-04-20_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nmodule.exports.policies = {\n  '*': true,\n  DoveController: {\n    find: false\n  }\n};\n```\n\n----------------------------------------\n\nTITLE: Executing Production Build Command in Sails.js\nDESCRIPTION: Command to run the production build process in Sails.js by setting the NODE_ENV environment variable to 'production' before executing the 'sails www' command. This triggers the buildProd task instead of the standard build task.\nSOURCE: https://github.com/balderdashy/sails/blob/master/docs/anatomy/tasks/register/buildProd.js.md#2025-04-20_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nNODE_ENV=production sails www\n```\n\n----------------------------------------\n\nTITLE: Adding Cloud.on() and Cloud.off() Methods to Sails.js Cloud SDK\nDESCRIPTION: Implements Cloud.on() and Cloud.off() methods in the Sails.js Cloud SDK, improving error messages and removing the idempotency guarantee.\nSOURCE: https://github.com/balderdashy/sails/blob/master/CHANGELOG.md#2025-04-20_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nAdd Cloud.on() and Cloud.off(), improve error msgs, and remove idempotency guarantee\n```\n\n----------------------------------------\n\nTITLE: Alternative Spanish Locale Approach with Simplified Keys (JSON)\nDESCRIPTION: An alternative approach to creating locale files using simpler, lowercase key names for better maintainability, especially when translations are edited manually.\nSOURCE: https://github.com/balderdashy/sails/blob/master/docs/concepts/Internationalization/Locales.md#2025-04-20_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"hello\": \"hola\",\n    \"howAreYouToday\": \"c√≥mo est√°s\"\n}\n```\n\n----------------------------------------\n\nTITLE: Deprecated CRUD Class Methods in Sails.js\nDESCRIPTION: List of deprecated CRUD class methods in the Waterline ORM that will be removed in future versions of Sails.js.\nSOURCE: https://github.com/balderdashy/sails/blob/master/docs/version-notes/0.10.x/Changelog0.10.0-rc9.md#2025-04-20_snippet_3\n\nLANGUAGE: markdown\nCODE:\n```\n.findAll()\n.findOneLike()\n.findLike()\n.contains()\n.join()\n.select()\n.findOrCreateEach()\n.join()\n.startsWith()\n.endsWith()\n```\n\n----------------------------------------\n\nTITLE: Contributing Guidelines for Sails.js Session Hook\nDESCRIPTION: This snippet provides guidance for contributing to the Session Hook, suggesting the development of a generic connect session adapter compatible with existing Sails connections using Waterline adapters.\nSOURCE: https://github.com/balderdashy/sails/blob/master/lib/hooks/session/README.md#2025-04-20_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n##### Contributing to this hook\nIt would be great to see a generic connect session adapter with support for the existing 'connections' in sails (ie. waterline adapters).  See [connect-waterline](https://www.npmjs.com/package/connect-waterline).\n```\n\n----------------------------------------\n\nTITLE: Basic Usage of req.acceptsLanguages()\nDESCRIPTION: Shows the basic syntax for using the req.acceptsLanguages() method with single or multiple language parameters.\nSOURCE: https://github.com/balderdashy/sails/blob/master/docs/reference/req/req.acceptsLanguages.md#2025-04-20_snippet_0\n\nLANGUAGE: usage\nCODE:\n```\nreq.acceptsLanguages(language);\n```\n\n----------------------------------------\n\nTITLE: Implementing .updateOne() Method in Sails.js Model\nDESCRIPTION: Sets up the new .updateOne() method for Sails.js models, which allows updating a single record.\nSOURCE: https://github.com/balderdashy/sails/blob/master/CHANGELOG.md#2025-04-20_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nSetup updateOne() method\n```\n\n----------------------------------------\n\nTITLE: Creating New Sails Web App\nDESCRIPTION: Command to generate a starter web app in Sails.js that includes examples of access control, login, authentication, and password recovery.\nSOURCE: https://github.com/balderdashy/sails/blob/master/docs/concepts/Policies/Permissions.md#2025-04-20_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nsails new foo\n\n# Then choose \"Web App\"\n```\n\n----------------------------------------\n\nTITLE: Explaining Hook Interactions with Router in Markdown\nDESCRIPTION: This markdown snippet describes how different hooks interact with the core Router, specifically the 'http' hook and the 'sockets' hook. It explains how these hooks use the Router for binding routes and handling requests.\nSOURCE: https://github.com/balderdashy/sails/blob/master/lib/router/README.md#2025-04-20_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n## Which hooks attach servers / use the Router?\n\nAt the time of this writing, the `http` hook listens for `bind` events emitted from the core Router\nand binds them directly to an external instance of Express.\n\nOn the other hand, the `sockets` hook defers to the core router, emitting a `request` event whenever\nit receives and interprets a new, appropriately-formatted, socket message.  The core Router intercepts this\nand routes the request using its known middleware bindings. (core middleware, blueprint aka \"shadow\" routes,\nand statically configured routes from the `routes.js` config file in userland)\n```\n\n----------------------------------------\n\nTITLE: Lodash Import Example\nDESCRIPTION: Example showing how to import Lodash as a variable in the Sails console for Node versions earlier than v6.\nSOURCE: https://github.com/balderdashy/sails/blob/master/docs/reference/cli/sailsconsole.md#2025-04-20_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nsails> var lodash = require('lodash');\nsails> console.log(lodash.range(1, 5));\n```\n\n----------------------------------------\n\nTITLE: Issue Contribution Guidelines in Markdown\nDESCRIPTION: Detailed markdown documentation covering issue submission guidelines, including search instructions, formatting requirements, and environment setup steps for reproducible bug reports.\nSOURCE: https://github.com/balderdashy/sails/blob/master/docs/contributing/issue-contributions.md#2025-04-20_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n# Issue contributions\n\nWhen opening new issues or commenting on existing issues in any of the repositories in this GitHub organization, please make sure discussions are related to concrete technical issues of the Sails.js software.  Feature requests and ideas are always welcome, but they should not be submitted as GitHub issues.  See [Requesting Features](https://sailsjs.com/documentation/contributing/proposing-features-enhancements) below for submission guidelines.\n\nFor general help using Sails, please refer to the [official Sails documentation](https://sailsjs.com/documentation).  For additional help, ask a question on [StackOverflow](http://stackoverflow.com/questions/ask) or refer to any of the [other recommended avenues of support](https://sailsjs.com/support).\n```\n\n----------------------------------------\n\nTITLE: Legacy Message Format Example (v0.12.x)\nDESCRIPTION: Example showing the message format structure used in Sails v0.12.x when using User.message() method.\nSOURCE: https://github.com/balderdashy/sails/blob/master/docs/upgrading/To1.0.md#2025-04-20_snippet_18\n\nLANGUAGE: javascript\nCODE:\n```\n{\n  verb: 'messaged',\n  id: 123,\n  data: {\n    owl: 'hoot'\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Registering middleware for multiple action namespaces in Sails.js\nDESCRIPTION: Example of how to register middleware that affects all actions within both the 'user' and 'pet' namespaces using an array of wildcards.\nSOURCE: https://github.com/balderdashy/sails/blob/master/lib/app/private/controller/README.md#2025-04-20_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nsails.registerActionMiddleware(mustBeLoggedIn, ['user.*', 'pet.*'])\n```\n\n----------------------------------------\n\nTITLE: Using 'in' modifier in JavaScript\nDESCRIPTION: Demonstrates the use of the 'in' modifier to match multiple possible values for a field.\nSOURCE: https://github.com/balderdashy/sails/blob/master/docs/concepts/ORM/Querylanguage.md#2025-04-20_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nvar waltersAndSkylers = await Model.find({\n  name : ['walter', 'skyler']\n});\n```\n\n----------------------------------------\n\nTITLE: Character Set Acceptance Examples in Sails.js\nDESCRIPTION: Demonstrates practical examples of using req.acceptsCharsets() with various character sets when the request includes Accept-Charset: utf-8 header\nSOURCE: https://github.com/balderdashy/sails/blob/master/docs/reference/req/req.acceptsCharsets.md#2025-04-20_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nreq.acceptsCharsets('utf-8');\n// -> 'utf-8'\n\nreq.acceptsCharsets('iso-8859-1', 'utf-16', 'utf-8');\n// -> 'utf-8'\n\nreq.acceptsCharsets('utf-16');\n// -> false\n```\n\n----------------------------------------\n\nTITLE: Updated Gruntfile Configuration (v1.0)\nDESCRIPTION: New simplified Gruntfile.js configuration using sails-hook-grunt module in Sails v1.0.\nSOURCE: https://github.com/balderdashy/sails/blob/master/docs/upgrading/To1.0.md#2025-04-20_snippet_22\n\nLANGUAGE: javascript\nCODE:\n```\nmodule.exports = function(grunt) {\n\n  var loadGruntTasks = require('sails-hook-grunt/accessible/load-grunt-tasks');\n\n  // Load Grunt task configurations (from `tasks/config/`) and Grunt\n  // task registrations (from `tasks/register/`).\n  loadGruntTasks(__dirname, grunt);\n\n};\n```\n\n----------------------------------------\n\nTITLE: Updating Waterline .save() Method Implementation\nDESCRIPTION: Example showing how to update code that uses the .save() instance method callback, which no longer provides a second argument in Sails v0.12.\nSOURCE: https://github.com/balderdashy/sails/blob/master/docs/upgrading/To0.12.md#2025-04-20_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nsierra.save(function (err, modifiedSierra){\n  if (err) { /* ... */  return; }\n\n  // ...\n});\n```\n\nLANGUAGE: javascript\nCODE:\n```\nsierra.save(function (err){\n  if (err) { /* ... */  return; }\n\n  // ...\n});\n```\n\n----------------------------------------\n\nTITLE: Accessing Subdomains in Sails.js Request Object\nDESCRIPTION: Retrieves an array of subdomains from the current request URL. Returns subdomains in order from most specific to least specific.\nSOURCE: https://github.com/balderdashy/sails/blob/master/docs/reference/req/req.subdomains.md#2025-04-20_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nreq.subdomains;\n```\n\nLANGUAGE: javascript\nCODE:\n```\n// Example with URL https://ww3.staging.ibm.com\nreq.subdomains; // -> ['ww3', 'staging']\n```\n\n----------------------------------------\n\nTITLE: Sails Console Startup Output\nDESCRIPTION: Example of the console output when starting the Sails.js interactive console, showing the welcome message and prompt.\nSOURCE: https://github.com/balderdashy/sails/blob/master/docs/reference/cli/sailsconsole.md#2025-04-20_snippet_1\n\nLANGUAGE: text\nCODE:\n```\n$ sails console\n\ninfo: Starting app in interactive mode...\n\ninfo: Welcome to the Sails console.\ninfo: ( to exit, type <CTRL>+<C> )\n\nsails>\n```\n\n----------------------------------------\n\nTITLE: Running Sails Script\nDESCRIPTION: Command to execute a generated script\nSOURCE: https://github.com/balderdashy/sails/blob/master/docs/concepts/shell-scripts/shell-scripts.md#2025-04-20_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nsails run hello\n```\n\n----------------------------------------\n\nTITLE: Defining Sails.js Documentation Metadata in Markdown\nDESCRIPTION: This snippet demonstrates how to define metadata for Sails.js documentation using HTML-like tags in a Markdown file. It specifies the display name and indicates that this file is a table of contents.\nSOURCE: https://github.com/balderdashy/sails/blob/master/docs/concepts/concepts.md#2025-04-20_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n<docmeta name=\"displayName\" value=\"Core Concepts: Table of Contents\">\n<docmeta name=\"isTableOfContents\" value=\"true\">\n```\n\n----------------------------------------\n\nTITLE: Deprecated Dynamic Finder Methods in Sails.js\nDESCRIPTION: List of deprecated dynamic finder methods in the Waterline ORM that will be removed in future versions of Sails.js.\nSOURCE: https://github.com/balderdashy/sails/blob/master/docs/version-notes/0.10.x/Changelog0.10.0-rc9.md#2025-04-20_snippet_2\n\nLANGUAGE: markdown\nCODE:\n```\n.findOneBy`<attribute>`In()\n.findOneBy`<attribute>`Like()\n.findBy`<attribute>`In()\n.findBy`<attribute>`Like() \n.countBy`<attribute>`In()\n.countBy`<attribute>`Like()\n.`<attribute>`Contains()\n```\n\n----------------------------------------\n\nTITLE: Listing Commands for Generating Client-Side Dependencies in Markdown\nDESCRIPTION: This snippet presents commands for generating or regenerating client-side dependencies in Sails, specifically sails.io.js and parasails.\nSOURCE: https://github.com/balderdashy/sails/blob/master/docs/concepts/extending-sails/Generators/generatorList.md#2025-04-20_snippet_3\n\nLANGUAGE: markdown\nCODE:\n```\n| Commands for (re)generating client-side dependencies\n|:-----------------------------------|\n| sails generate sails.io.js\n| sails generate parasails\n```\n\n----------------------------------------\n\nTITLE: Adding Document Metadata in Markdown\nDESCRIPTION: Example showing how to add display name metadata to Sails documentation markdown files using the docmeta tag. This metadata is used for search engine results and navigation menu display on the Sails website.\nSOURCE: https://github.com/balderdashy/sails/blob/master/docs/contributing/contributing-to-the-documentation.md#2025-04-20_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n<docmeta name=\"displayName\" value=\"Building Custom Homemade Puddings\">\n```\n\n----------------------------------------\n\nTITLE: Listing Default View Locals in Markdown\nDESCRIPTION: Enumerates the default view locals set by the 'request' hook. These locals are made available in view templates, providing access to commonly used objects and utilities like Lodash, session data, and Sails.js core objects.\nSOURCE: https://github.com/balderdashy/sails/blob/master/lib/hooks/request/README.md#2025-04-20_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n+ `_` (lodash)\n+ `session`\n+ `req`\n+ `res`\n+ `sails`\n```\n\n----------------------------------------\n\nTITLE: Running a Custom Sails.js Generator\nDESCRIPTION: Command to run the custom 'awesome' generator using the Sails CLI.\nSOURCE: https://github.com/balderdashy/sails/blob/master/docs/concepts/extending-sails/Generators/customGenerators.md#2025-04-20_snippet_3\n\nLANGUAGE: sh\nCODE:\n```\nsails generate awesome\n```\n\n----------------------------------------\n\nTITLE: Removing temporary sails-disk database in Sails.js\nDESCRIPTION: Command to remove the temporary disk database file in a Sails.js project when migrating from v0.9.x to v0.10.\nSOURCE: https://github.com/balderdashy/sails/blob/master/docs/upgrading/To0.10.md#2025-04-20_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\n$ rm .tmp/disk.db\n```\n\n----------------------------------------\n\nTITLE: Updating afterDisconnect lifecycle callback in Socket.js\nDESCRIPTION: Code example showing how to replace the deprecated onDisconnect function with the new afterDisconnect callback in config/sockets.js. The new implementation includes a callback parameter that must be called to persist session changes.\nSOURCE: https://github.com/balderdashy/sails/blob/master/docs/version-notes/0.11.x/MigrationGuide0.11.md#2025-04-20_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nafterDisconnect: function (session, socket, cb) {\n  // Be sure to call the callback\n  return cb();\n}\n```\n\n----------------------------------------\n\nTITLE: Detecting Pre-autoconnect State with mightBeAboutToAutoConnect() in JavaScript\nDESCRIPTION: Detects when the SailsSocket instance has loaded but is not yet fully configured or has not attempted to autoconnect. Returns true during the brief period between loading and the first connection attempt.\nSOURCE: https://github.com/balderdashy/sails/blob/master/docs/reference/websockets/sails.io.js/SailsSocket/methods.md#2025-04-20_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nio.socket.mightBeAboutToAutoConnect();\n```\n\n----------------------------------------\n\nTITLE: Referencing Deprecated sails.sockets.id() Method in Markdown\nDESCRIPTION: This snippet provides information about the deprecated sails.sockets.id() method, including links to the current method documentation and the v0.12 migration guide. It also includes metadata for display name and deprecation status.\nSOURCE: https://github.com/balderdashy/sails/blob/master/docs/reference/websockets/sails.sockets/sails.sockets.id.md#2025-04-20_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n# sails.sockets.id()\n\nThis method is an alias for [sails.sockets.getId()](https://sailsjs.com/documentation/reference/web-sockets/sails-sockets/get-id) deprecated in Sails v0.12.  Please see the [v0.12 migration guide](https://sailsjs.com/documentation/concepts/upgrading/to-v-0-12) for more information.\n\n<docmeta name=\"displayName\" value=\"sails.sockets.id()\">\n<docmeta name=\"isDeprecated\" value=\"true\">\n```\n\n----------------------------------------\n\nTITLE: Setting Document Metadata in Markdown\nDESCRIPTION: Metadata tag that sets the display name for the documentation page to 'Submitting a proposal'\nSOURCE: https://github.com/balderdashy/sails/blob/master/docs/contributing/proposing-features/submitting-a-proposal.md#2025-04-20_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n<docmeta name=\"displayName\" value=\"Submitting a proposal\">\n```\n\n----------------------------------------\n\nTITLE: Setting Sails.js Documentation Metadata in HTML\nDESCRIPTION: HTML metadata tags used to specify the display name and version information for Sails.js documentation. These tags indicate that the documentation is for Sails.js version 0.12.x with specific version number 0.12.0.\nSOURCE: https://github.com/balderdashy/sails/blob/master/docs/version-notes/0.12.x/0.12.x.md#2025-04-20_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<docmeta name=\"displayName\" value=\"0.12.x\">\n<docmeta name=\"version\" value=\"0.12.0\">\n```\n\n----------------------------------------\n\nTITLE: Start Sails in Debug Mode\nDESCRIPTION: Command to launch Sails application in debug mode for use with Node Inspector\nSOURCE: https://github.com/balderdashy/sails/blob/master/docs/reference/cli/sailsdebug.md#2025-04-20_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\n$ sails debug\n```\n\n----------------------------------------\n\nTITLE: Updating controller blueprint configuration in Sails.js v0.10\nDESCRIPTION: Example of how to update the controller configuration for blueprints in Sails.js v0.10. The 'blueprints' key is removed from the _config object.\nSOURCE: https://github.com/balderdashy/sails/blob/master/docs/version-notes/0.10.x/Changelog0.10x.md#2025-04-20_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\n...\n_config: {\n    rest: true,\n    ...\n}\n```\n\n----------------------------------------\n\nTITLE: Generating a New Sails.js Generator\nDESCRIPTION: Command to generate a new custom generator named 'awesome' using the Sails CLI.\nSOURCE: https://github.com/balderdashy/sails/blob/master/docs/concepts/extending-sails/Generators/customGenerators.md#2025-04-20_snippet_1\n\nLANGUAGE: sh\nCODE:\n```\nsails generate generator awesome\n```\n\n----------------------------------------\n\nTITLE: Configuring a Published Generator in .sailsrc\nDESCRIPTION: JSON configuration to enable a published custom generator in the Sails.js project's .sailsrc file.\nSOURCE: https://github.com/balderdashy/sails/blob/master/docs/concepts/extending-sails/Generators/customGenerators.md#2025-04-20_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\n{\n  \"generators\": {\n    \"modules\": {\n      \"awesome\": \"@my-npm-name/sails-generate-awesome\"\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Passing Positional Arguments to a Sails.js Helper\nDESCRIPTION: Shows how to call a helper function with positional arguments to override default values. In this example, the maximum number of users is set to 50.\nSOURCE: https://github.com/balderdashy/sails/blob/master/docs/concepts/Helpers/ExampleHelper.md#2025-04-20_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nvar users = await sails.helpers.getRecentUsers(50);\n```\n\n----------------------------------------\n\nTITLE: Installing the Beta Version of Sails.js\nDESCRIPTION: This snippet provides a command to install the beta version of Sails.js from NPM. The beta version allows users to test upcoming features before they are officially released. The command references the 'beta' branch of the Sails repository.\nSOURCE: https://github.com/balderdashy/sails/blob/master/docs/faq/faq.md#2025-04-20_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nnpm install sails@beta\n```\n\n----------------------------------------\n\nTITLE: Registering Production-specific Grunt Tasks for Sails.js\nDESCRIPTION: This code would typically define the production-specific Grunt task sequence for a Sails.js application. However, the actual implementation is not provided in the given content.\nSOURCE: https://github.com/balderdashy/sails/blob/master/docs/anatomy/tasks/register/prod.js.md#2025-04-20_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\n// Example of what this file would typically contain:\n// module.exports = function(grunt) {\n//   grunt.registerTask('prod', [\n//     'compileAssets',\n//     'concat',\n//     'uglify',\n//     'cssmin',\n//     'sails-linker:prodJs',\n//     'sails-linker:prodStyles'\n//   ]);\n// };\n```\n\n----------------------------------------\n\nTITLE: Sails.js Documentation Metadata in Markdown\nDESCRIPTION: Markdown metadata tag defining the display name for this documentation page in the Sails.js documentation system.\nSOURCE: https://github.com/balderdashy/sails/blob/master/docs/contributing/proposing-features/proposing-features.md#2025-04-20_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n<docmeta name=\"displayName\" value=\"Proposing features/enhancements\">\n```\n\n----------------------------------------\n\nTITLE: Sails Version Command Example Output\nDESCRIPTION: Example output showing the version number when running the sails --version command, which displays the installed version (1.0.0 in this case).\nSOURCE: https://github.com/balderdashy/sails/blob/master/docs/reference/cli/sailsversion.md#2025-04-20_snippet_1\n\nLANGUAGE: text\nCODE:\n```\n$ sails --version\n1.0.0\n```\n\n----------------------------------------\n\nTITLE: Displaying Utility Command for Building Third-Party Packages in Markdown\nDESCRIPTION: This snippet shows a utility command for generating miscellaneous files when building third-party packages for Sails.\nSOURCE: https://github.com/balderdashy/sails/blob/master/docs/concepts/extending-sails/Generators/generatorList.md#2025-04-20_snippet_4\n\nLANGUAGE: markdown\nCODE:\n```\n| Utils for building your own 3rd party packages\n|:-----------------------------------|\n| sails generate etc\n```\n\n----------------------------------------\n\nTITLE: Using sails.after() with Multiple Event Dependencies\nDESCRIPTION: Example of using sails.after() with an array of events to wait for multiple conditions before executing the handler function.\nSOURCE: https://github.com/balderdashy/sails/blob/master/lib/EVENTS.md#2025-04-20_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nsails.after(['hook:yourHookID:someEvent', 'hook:someOtherHookID:someOtherEvent'], function yourEventHandler ( /* a, b, c, ..., z */ ) {\n  // your implementation\n});\n```\n\n----------------------------------------\n\nTITLE: Setting Document Metadata in Markdown\nDESCRIPTION: HTML metadata tag defining a display name property for the README document.\nSOURCE: https://github.com/balderdashy/sails/blob/master/docs/anatomy/README.md.md#2025-04-20_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<docmeta name=\"displayName\" value=\"README.md\">\n```\n\n----------------------------------------\n\nTITLE: New Message Format Example (v1.0)\nDESCRIPTION: Example showing the simplified message format structure used in Sails v1.0 when using User.publish() method.\nSOURCE: https://github.com/balderdashy/sails/blob/master/docs/upgrading/To1.0.md#2025-04-20_snippet_19\n\nLANGUAGE: javascript\nCODE:\n```\n{\n  owl: 'hoot'\n}\n```\n\n----------------------------------------\n\nTITLE: HTML Template Tags for Sails-Linker\nDESCRIPTION: HTML comment tags used by the sails-linker task to automatically inject script and stylesheet references in layout files. These tags must be present in view files (typically views/layouts/layout.ejs) for automatic asset injection to work.\nSOURCE: https://github.com/balderdashy/sails/blob/master/docs/concepts/Assets/DefaultTasks.md#2025-04-20_snippet_0\n\nLANGUAGE: HTML\nCODE:\n```\n<!--SCRIPTS--><!--SCRIPTS END-->\n<!--STYLES--><!--STYLES END-->\n```\n\n----------------------------------------\n\nTITLE: Installing the Edge Version of Sails.js\nDESCRIPTION: This snippet shows how to install the edge version of Sails.js using npm and GitHub. This version is for developers who want to work with the latest features that are still under development in the master branch. The edge version is not published on NPM, and this installation command pulls directly from the GitHub repository.\nSOURCE: https://github.com/balderdashy/sails/blob/master/docs/faq/faq.md#2025-04-20_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nnpm install sails@git://github.com/balderdashy/sails.git\n```\n\n----------------------------------------\n\nTITLE: WebSocket Notification Examples\nDESCRIPTION: Examples of WebSocket notifications sent to subscribed clients when collections are modified.\nSOURCE: https://github.com/balderdashy/sails/blob/master/docs/reference/blueprint-api/Replace.md#2025-04-20_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\n{\n  id: 7,\n  verb: 'addedTo',\n  attribute: 'involvedInPurchases',\n  addedIds: [ 47 ]\n}\n```\n\nLANGUAGE: javascript\nCODE:\n```\n{\n  id: 7,\n  verb: 'removedFrom',\n  attribute: 'involvedInPurchases',\n  removedIds: [ 42, 33 ]\n}\n```\n\n----------------------------------------\n\nTITLE: Markdown Documentation Metadata Tag\nDESCRIPTION: HTML-style metadata tag used to indicate this README should not be displayed on the website.\nSOURCE: https://github.com/balderdashy/sails/blob/master/docs/concepts/README.md#2025-04-20_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n<docmeta name=\"notShownOnWebsite\" value=\"true\">\n```\n\n----------------------------------------\n\nTITLE: Creating New Project in Current Directory\nDESCRIPTION: Example demonstrating how to create a new Sails.js project in the current directory with command output.\nSOURCE: https://github.com/balderdashy/sails/blob/master/docs/reference/cli/sailsnew.md#2025-04-20_snippet_2\n\nLANGUAGE: text\nCODE:\n```\n$ cd myProject\n$ sails new .\ninfo: Installing dependencies...\nPress CTRL+C to skip.\n(but if you do that, you'll need to cd in and run `npm install`)\ninfo: Created a new Sails app `my-project`!\n```\n\n----------------------------------------\n\nTITLE: Stability Index Level Definitions in Markdown\nDESCRIPTION: Markdown documentation defining the four stability levels used in Sails framework: Deprecated (0), Experimental (1), Stable (2), and Locked (3). Each level includes detailed criteria and expectations for backwards compatibility.\nSOURCE: https://github.com/balderdashy/sails/blob/master/docs/contributing/stability-index.md#2025-04-20_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n##### Stability: 0 - Deprecated\nThis feature is known to be problematic, and changes are planned.  Do not rely on it in new code, and be sure to change existing code before upgrading.  Use of the feature may cause warnings.  Backwards compatibility should not be expected.\n\n##### Stability: 1 - Experimental\nThis feature is subject to change or removal in future major releases of Sails.\n\n##### Stability: 2 - Stable\nThis feature has proven satisfactory. Compatibility with existing Sails apps and the plugin ecosystem is a high priority, and so stable hooks/features/etc. will not be broken or removed in future major releases unless absolutely necessary.\n\n##### Stability: 3 - Locked\nThis hook/feature/etc. will not undergo any future API changes, except as demanded by critical fixes related to security or performance.  Please do not propose usage/philosophical changes for features/hooks/etc. at this stability index; they will be refused.\n```\n\n----------------------------------------\n\nTITLE: Creating New Project in Specific Directory\nDESCRIPTION: Example showing how to create a new Sails.js project called 'test-project' in a specific directory path with command output.\nSOURCE: https://github.com/balderdashy/sails/blob/master/docs/reference/cli/sailsnew.md#2025-04-20_snippet_1\n\nLANGUAGE: text\nCODE:\n```\n$ sails new code/testProject\ninfo: Installing dependencies...\nPress CTRL+C to skip.\n(but if you do that, you'll need to cd in and run `npm install`)\ninfo: Created a new Sails app `test-project`!\n```\n\n----------------------------------------\n\nTITLE: Contributor's Pledge Markdown Document\nDESCRIPTION: A markdown document containing the contributor's pledge text, which is based on the Developer's Certificate of Origin 1.0 used by Node.js core. It outlines three scenarios under which contributions can be made to ensure proper licensing and attribution.\nSOURCE: https://github.com/balderdashy/sails/blob/master/docs/contributing/contributors-pledge.md#2025-04-20_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n# Contributor's pledge\n\nBy making a contribution to this project, I certify that:\n\n* (a) The contribution was created in whole or in part by me and I\n  have the right to submit it under the MIT license; or\n* (b) The contribution is based upon previous work that, to the best\n  of my knowledge, is covered under an appropriate open source license\n  and I have the right under that license to submit that work with\n  modifications, whether created in whole or in part by me, under the\n  same open source license (unless I am permitted to submit under a\n  different license), as indicated in the file; or\n* (c) The contribution was provided directly to me by some other\n  person who certified (a), (b) or (c) and I have not modified it.\n\n> The certificate of origin above is based on the \"[Developer's Certificate of Origin 1.0](https://github.com/nodejs/node/blob/master/CONTRIBUTING.md#developers-certificate-of-origin-10)\" used by Node.js core.\n\n<docmeta name=\"displayName\" value=\"Contributor's pledge\">\n```\n\n----------------------------------------\n\nTITLE: API Request Example - Retrieving Purchase Record\nDESCRIPTION: Example request to retrieve a purchase record with ID #1\nSOURCE: https://github.com/balderdashy/sails/blob/master/docs/reference/blueprint-api/FindOne.md#2025-04-20_snippet_1\n\nLANGUAGE: text\nCODE:\n```\nGET /purchase/1\n```\n\n----------------------------------------\n\nTITLE: Message List Implementation Before Partial Refactor\nDESCRIPTION: Shows an example of message list implementation before being refactored into a partial.\nSOURCE: https://github.com/balderdashy/sails/blob/master/docs/concepts/Views/Partials.md#2025-04-20_snippet_4\n\nLANGUAGE: ejs\nCODE:\n```\n<%\n// A list representing the currently-logged in user's inbox.\n%><ul class=\"message-list\"><%\n  // Display each message, with a button to delete it.\n  _.each(messages, function (message) {\n  %><li class=\"inbox-message\" data-id=\"<%= message.id %>\">\n    <a href=\"/messages/<%= message.id %>\"><%= message.subject %></a>\n    <button class=\"fa fa-trash\" is=\"delete-btn\"></button>\n  </li><% });\n %></ul>\n```\n\n----------------------------------------\n\nTITLE: Installing Supertest for HTTP Testing in Sails.js\nDESCRIPTION: Command to install Supertest as a dev dependency for HTTP testing in Sails.js applications.\nSOURCE: https://github.com/balderdashy/sails/blob/master/docs/concepts/Testing/Testing.md#2025-04-20_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nnpm install supertest --save-dev\n```\n\n----------------------------------------\n\nTITLE: Basic Sails Request Usage\nDESCRIPTION: Shows the basic usage syntax for the sails.request() method, which can be called with a single request object parameter.\nSOURCE: https://github.com/balderdashy/sails/blob/master/docs/reference/application/advanced-usage/sails.request.md#2025-04-20_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nsails.request(request);\n```\n\n----------------------------------------\n\nTITLE: Disabling Session Support in Sails.js\nDESCRIPTION: Configuration snippet for .sailsrc file to disable the session hook in Sails.js. This can be used when session support is not needed in the application.\nSOURCE: https://github.com/balderdashy/sails/blob/master/docs/concepts/Deployment/FAQ.md#2025-04-20_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\n\"hooks\": {\n  \"session\": false\n}\n```\n\n----------------------------------------\n\nTITLE: Publishing a Custom Generator to NPM\nDESCRIPTION: Command to publish the custom generator as an NPM package.\nSOURCE: https://github.com/balderdashy/sails/blob/master/docs/concepts/extending-sails/Generators/customGenerators.md#2025-04-20_snippet_4\n\nLANGUAGE: sh\nCODE:\n```\nnpm publish\n```\n\n----------------------------------------\n\nTITLE: Installing Handlebars Grunt Plugin\nDESCRIPTION: Command to install the Handlebars Grunt plugin as a dev dependency in a Sails.js project.\nSOURCE: https://github.com/balderdashy/sails/blob/master/docs/concepts/Assets/TaskAutomation.md#2025-04-20_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm install grunt-contrib-handlebars --save-dev\n```\n\n----------------------------------------\n\nTITLE: Commit Reference List\nDESCRIPTION: List of commit hashes referenced in the changelog for tracking specific changes in the codebase.\nSOURCE: https://github.com/balderdashy/sails/blob/master/CHANGELOG.md#2025-04-20_snippet_8\n\nLANGUAGE: markdown\nCODE:\n```\nf13bb77 - Path resolution improvement\n525c7c5 - Virtual request output fix\n3f29dce - Redis sessions crash fix\n5598179 - sails.getActions() addition\ndd9af88 - sails.registerAction() addition\n2c281d5 - Action middleware registration\n3b264fa - Controller module definitions\n4ad23dd - Controller module definitions update\nd8f4df8 - Blueprint population default\ndf2ee46 - Action reloading implementation\n0fd4362 - Blueprint removal\n56c9b5b - Config flattening removal\n7eb6af6 - Environment config humanization\nc981c6e - PubSub methods reduction\ne008a6b - Sails generator exposure\n68fa8ff - Request validation removal\n66d2b2d - Policy syntax update\n7328c05 - CSRF implementation update\n7988866 - Response created removal\n50b0684 - CSRF websocket security fix\nd3ba9bd - EJS layout integration\nae7e656 - View engine support changes\n9f1f2fb - Layout support removal\ncf20d07 - NODE_ENV handling update\nabbf1f7 - Environment variable changes\naba8f2f - Session routes syntax update\n6316452 - View engine configuration changes\n86b8884 - RPS firehose removal\n6464d8f - Legacy socket support removal\n820d1eb - Request parameter standardization\neffd6c3 - JSONP removal\nd0fe4ff - Base URL method removal\n1fee468 - Utility module removal\n48750d7 - Hook removals\n07c59ce - Additional hook changes\n9c6b217 - Legacy params method removal\n6b4ba32 - Benchmark implementation\n```\n\n----------------------------------------\n\nTITLE: Example Base URL Usage in HTML Template\nDESCRIPTION: Demonstrates using the deprecated getBaseUrl() method within an HTML email template to generate a link to the website\nSOURCE: https://github.com/balderdashy/sails/blob/master/docs/reference/application/advanced-usage/sails.getBaseUrl.md#2025-04-20_snippet_1\n\nLANGUAGE: html\nCODE:\n```\nFor more information, visit <a href=\"<%=sails.getBaseUrl()%>\">our web site</a>.\n```\n\n----------------------------------------\n\nTITLE: Sample routes.js File Path in Sails.js\nDESCRIPTION: Shows the standard file path for the routes configuration file in a Sails.js application. This file is located in the config directory of a Sails project.\nSOURCE: https://github.com/balderdashy/sails/blob/master/docs/anatomy/config/routes.js.md#2025-04-20_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n# config/routes.js\n```\n\n----------------------------------------\n\nTITLE: Markdown Table of Contents\nDESCRIPTION: Numbered list of frequently asked questions with links to corresponding sections in the documentation.\nSOURCE: https://github.com/balderdashy/sails/blob/master/docs/faq/faq.md#2025-04-20_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n### Table of Contents\n1. [I'm having trouble installing Sails. What should I do?](https://sailsjs.com/faq#?im-having-trouble-installing-sails-what-should-i-do)\n2. [What are the dependencies of Sails?](https://sailsjs.com/faq#?what-are-the-dependencies-of-sails)\n3. [Who else is using Sails.js?](https://sailsjs.com/faq#?who-else-is-using-sailsjs)\n4. [Are there professional support options?](https://sailsjs.com/faq#?are-there-professional-support-options)\n5. [Where do I get help?](https://sailsjs.com/faq#?where-do-i-get-help)\n6. [What are some good community tutorials?](https://sailsjs.com/faq#?what-are-some-good-community-tutorials)\n7. [How can I convince the other girls/guys on my team?](https://sailsjs.com/faq#?how-can-i-convince-the-other-girls-guys-on-my-team)\n8. [Where do I submit ideas?  Report bugs?](https://sailsjs.com/faq#?where-do-i-submit-ideas-report-bugs)\n9. [What version of Sails should I use?](https://sailsjs.com/faq#?what-version-of-sails-should-i-use)\n10. [How do I get involved?](https://sailsjs.com/faq#?how-do-i-get-involved)\n11. [How does the documentation end up on the Sails website?](https://sailsjs.com/faq#?how-does-the-documentation-end-up-on-the-sails-website)\n12. [Where is the documentation for the different releases of Sails?](https://sailsjs.com/faq#?where-is-the-documentation-for-the-different-releases-of-sails)\n```\n\n----------------------------------------\n\nTITLE: Markdown Documentation Header for Sails.js FAQ\nDESCRIPTION: Markdown header and notes section explaining the purpose of the FAQ documentation directory and that the README itself is not compiled to HTML for the website.\nSOURCE: https://github.com/balderdashy/sails/blob/master/docs/faq/README.md#2025-04-20_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n# docs/faq\n\nThis section contains the contents that will live on sailsjs.com/faq.\n\n\n### Notes\n> - This README file **is not compiled to HTML** for the website.  It is just here to explain what you're looking at.\n```\n\n----------------------------------------\n\nTITLE: Querying Users with Populated Pets in Sails.js\nDESCRIPTION: This snippet demonstrates how to query User records and populate their associated Pets using the .populate() method. It shows the structure of the returned data with nested Pet objects.\nSOURCE: https://github.com/balderdashy/sails/blob/master/docs/concepts/ORM/Associations/OnetoMany.md#2025-04-20_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nvar users = await User.find().populate('pets');\n  // The users object would look something like the following\n  // [{\n  //   id: 123,\n  //   firstName: 'Foo',\n  //   lastName: 'Bar',\n  //   pets: [{\n  //     id: 1,\n  //     breed: 'labrador',\n  //     type: 'dog',\n  //     name: 'fido',\n  //     user: 123\n  //   }]\n  // }]\n```\n\n----------------------------------------\n\nTITLE: Implementing destroyOne() and archiveOne() Methods in Sails.js Model\nDESCRIPTION: Sets up the new destroyOne() and archiveOne() methods for Sails.js models, which allow deleting or archiving a single record. Also improves the stack trace for 'found too many' errors in findOne().\nSOURCE: https://github.com/balderdashy/sails/blob/master/CHANGELOG.md#2025-04-20_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nSet up destroyOne() and archiveOne(), and use an omen in the 'found too many' error in findOne() to improve the stack trace.\n```\n\n----------------------------------------\n\nTITLE: Configuring Policies in Sails v0.9\nDESCRIPTION: Example of how policies were configured in Sails v0.9 to prevent access to the 'find' action in a controller. This approach won't fully work in v0.10 due to the new findOne blueprint action.\nSOURCE: https://github.com/balderdashy/sails/blob/master/docs/upgrading/To0.10.md#2025-04-20_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nmodule.exports.policies = {\n  '*': true,\n  DoveController: {\n    find: false\n  }\n};\n```\n\n----------------------------------------\n\nTITLE: Defining User Model with One-Way Association in Sails.js\nDESCRIPTION: This code snippet defines a User model in Sails.js with 'name' and 'age' attributes, and a one-way association to the Pet model through the 'pony' attribute.\nSOURCE: https://github.com/balderdashy/sails/blob/master/docs/concepts/ORM/Associations/OneWayAssociation.md#2025-04-20_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\n// myApp/api/models/User.js\nmodule.exports = {\n  attributes: {\n    name: {\n      type: 'string'\n    },\n    age: {\n      type: 'number'\n    },\n    pony:{\n      model: 'Pet'\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring model connections in Sails.js v0.10\nDESCRIPTION: Example of how to configure a model to use specific adapters in Sails.js v0.10. The 'connection' key is now used instead of 'adapters'.\nSOURCE: https://github.com/balderdashy/sails/blob/master/docs/version-notes/0.10.x/Changelog0.10x.md#2025-04-20_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nmodule.exports = {\n\n    connection: ['someMongoDatabase'],\n\n    attributes: {\n        name:{\n            type     : 'string',\n            required : true\n        }\n    }\n};\n```\n\n----------------------------------------\n\nTITLE: Configuring model connections in Sails.js v0.10\nDESCRIPTION: Example of how to configure a model to use specific adapters in Sails.js v0.10. The 'connection' key is now used instead of 'adapters'.\nSOURCE: https://github.com/balderdashy/sails/blob/master/docs/upgrading/To0.10.md#2025-04-20_snippet_5\n\nLANGUAGE: JavaScript\nCODE:\n```\nmodule.exports = {\n\n    connection: ['someMongoDatabase'],\n\n    attributes: {\n        name:{\n            type     : 'string',\n            required : true\n        }\n    }\n};\n```\n\n----------------------------------------\n\nTITLE: Enabling 'length' as a Valid Attribute Name in Sails.js ORM\nDESCRIPTION: Replaces _.each() with _.forIn() to allow the ORM to accept attributes named 'length', improving flexibility in model definitions.\nSOURCE: https://github.com/balderdashy/sails/blob/master/CHANGELOG.md#2025-04-20_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nEnable ORM to accept attributes named 'length'. Replace `_.each()` with `_.forIn()` to enable ORM to accept attributes named 'length'.\n```\n\n----------------------------------------\n\nTITLE: WebSocket Notification Example\nDESCRIPTION: Example of the WebSocket notification payload sent to subscribed clients after a record update.\nSOURCE: https://github.com/balderdashy/sails/blob/master/docs/reference/blueprint-api/Update.md#2025-04-20_snippet_2\n\nLANGUAGE: js\nCODE:\n```\n{\n  id: 47,\n  verb: 'updated',\n  data: {\n    id: 47,\n    hobby: 'kickin'\n    updatedAt: 1485476060873\n  },\n  previous: {\n    hobby: 'pickin',\n    id: 47,\n    name: 'Applejack',\n    createdAt: 1485462079725,\n    updatedAt: 1485462079725\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a New Sails.js Application in Shell\nDESCRIPTION: Demonstrates how to create a new Sails.js application using the command line interface. This is typically the first step when starting a new Sails project.\nSOURCE: https://github.com/balderdashy/sails/blob/master/README.md#2025-04-20_snippet_2\n\nLANGUAGE: sh\nCODE:\n```\n# Create the app\nsails new my-app\n```\n\n----------------------------------------\n\nTITLE: Accessing the MySQL Driver in Sails.js\nDESCRIPTION: Demonstrates how to obtain the MySQL driver module from the registered datastore instance. This provides access to the full capabilities of the MySQL NPM package.\nSOURCE: https://github.com/balderdashy/sails/blob/master/docs/tutorials/low-level-mysql-access.md#2025-04-20_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nvar mysql = rdi.driver.mysql;\n```\n\n----------------------------------------\n\nTITLE: Formatting Repository URL in Markdown\nDESCRIPTION: List of repository comparison URLs formatted in markdown showing changes between specific dates\nSOURCE: https://github.com/balderdashy/sails/blob/master/CHANGELOG.md#2025-04-20_snippet_7\n\nLANGUAGE: markdown\nCODE:\n```\n- https://github.com/balderdashy/sails-generate/compare/master@%7B2018-03-29%7D...master\n- https://github.com/balderdashy/sails/compare/master@%7B2018-03-29%7D...master\n- https://github.com/balderdashy/waterline/compare/master@%7B2018-03-29%7D...master\n```\n\n----------------------------------------\n\nTITLE: Implementing Semantic Interface Methods\nDESCRIPTION: Core CRUD operations that must be implemented for basic adapter functionality. These methods form the foundation of data operations in Sails.js.\nSOURCE: https://github.com/balderdashy/sails/blob/master/docs/contributing/adapter-specification.md#2025-04-20_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nModel.create()\nModel.find()\nModel.update()\nModel.destroy()\nfindOrCreate()\ncreateEach()\n```\n\n----------------------------------------\n\nTITLE: Implementing Implementation Sniffing in Sails.js Transaction and Connection Methods\nDESCRIPTION: Adds implementation sniffing to the .transaction() and .leaseConnection() methods in Sails.js, allowing for more flexible usage.\nSOURCE: https://github.com/balderdashy/sails/blob/master/CHANGELOG.md#2025-04-20_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nImplement implementation sniffing in .transaction() and .leaseConnection().\n```\n\n----------------------------------------\n\nTITLE: Invoking Deprecated Base URL Method in Sails.js\nDESCRIPTION: Method call to retrieve the base URL without arguments, which returns a constructed URL string based on SSL, host, and port configuration\nSOURCE: https://github.com/balderdashy/sails/blob/master/docs/reference/application/advanced-usage/sails.getBaseUrl.md#2025-04-20_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nsails.getBaseUrl();\n```\n\n----------------------------------------\n\nTITLE: Sails.js Automatic Task Commands\nDESCRIPTION: Common Sails.js CLI commands and their corresponding Grunt task mappings for different environments and build scenarios.\nSOURCE: https://github.com/balderdashy/sails/blob/master/docs/anatomy/tasks/tasks.md#2025-04-20_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nsails lift\nsails lift --prod\nsails www\nsails www --prod\n```\n\n----------------------------------------\n\nTITLE: Configuring Documentation Metadata in Markdown\nDESCRIPTION: HTML-style metadata tag used to indicate that this README file should not be shown on the Sails documentation website.\nSOURCE: https://github.com/balderdashy/sails/blob/master/docs/reference/README.md#2025-04-20_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n<docmeta name=\"notShownOnWebsite\" value=\"true\">\n```\n\n----------------------------------------\n\nTITLE: Implementing .retry() Method in Sails.js Helpers\nDESCRIPTION: Introduces a working implementation of the .retry() method for Sails.js helpers, allowing for automatic retrying of failed operations.\nSOURCE: https://github.com/balderdashy/sails/blob/master/CHANGELOG.md#2025-04-20_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\nIntroduce working impl of .retry()\n```\n\n----------------------------------------\n\nTITLE: Basic Sails Lift Command\nDESCRIPTION: Demonstrates the basic command to start a Sails.js application. This command runs the app in development mode by default.\nSOURCE: https://github.com/balderdashy/sails/blob/master/docs/reference/cli/sailslift.md#2025-04-20_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nsails lift\n```\n\n----------------------------------------\n\nTITLE: Cloning Forked Repository - Git Command\nDESCRIPTION: Command to clone your forked Sails repository to your local filesystem.\nSOURCE: https://github.com/balderdashy/sails/blob/master/docs/contributing/code-submission-guidelines/sending-pull-requests.md#2025-04-20_snippet_0\n\nLANGUAGE: git\nCODE:\n```\ngit clone git@github.com:YOUR_USER_NAME/sails.git\n```"
  }
]