[
  {
    "owner": "supabase",
    "repo": "supabase-js",
    "content": "TITLE: Initializing Supabase Client in JavaScript\nDESCRIPTION: Basic setup to create a Supabase client instance for database interaction using the createClient function.\nSOURCE: https://github.com/supabase/supabase-js/blob/master/README.md#2025-04-19_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport { createClient } from '@supabase/supabase-js'\n\n// Create a single supabase client for interacting with your database\nconst supabase = createClient('https://xyzcompany.supabase.co', 'public-anon-key')\n```\n\n----------------------------------------\n\nTITLE: Installing Supabase JS Client via NPM\nDESCRIPTION: Command to install the supabase-js library using npm package manager.\nSOURCE: https://github.com/supabase/supabase-js/blob/master/README.md#2025-04-19_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\nnpm install @supabase/supabase-js\n```\n\n----------------------------------------\n\nTITLE: Configuring Custom Fetch Implementation\nDESCRIPTION: Example of providing a custom fetch implementation when creating the Supabase client, useful for environments like Cloudflare Workers.\nSOURCE: https://github.com/supabase/supabase-js/blob/master/README.md#2025-04-19_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\nimport { createClient } from '@supabase/supabase-js'\n\n// Provide a custom `fetch` implementation as an option\nconst supabase = createClient('https://xyzcompany.supabase.co', 'public-anon-key', {\n  global: {\n    fetch: (...args) => fetch(...args),\n  },\n})\n```\n\n----------------------------------------\n\nTITLE: Using Supabase with ES Modules\nDESCRIPTION: Example of importing and using Supabase client using ES Modules in the browser.\nSOURCE: https://github.com/supabase/supabase-js/blob/master/README.md#2025-04-19_snippet_5\n\nLANGUAGE: html\nCODE:\n```\n<script type=\"module\">\n  import { createClient } from 'https://cdn.jsdelivr.net/npm/@supabase/supabase-js/+esm'\n  const supabase = createClient('https://xyzcompany.supabase.co', 'public-anon-key')\n\n  console.log('Supabase Instance: ', supabase)\n  // ...\n</script>\n```\n\n----------------------------------------\n\nTITLE: Importing Supabase in Deno\nDESCRIPTION: Example of importing Supabase client in Deno runtime using JSR.\nSOURCE: https://github.com/supabase/supabase-js/blob/master/README.md#2025-04-19_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\nimport { createClient } from 'jsr:@supabase/supabase-js@2'\n```\n\n----------------------------------------\n\nTITLE: Updated Authentication Methods\nDESCRIPTION: Changes to authentication method names and parameter passing, including signUp, signIn, and signOut.\nSOURCE: https://github.com/supabase/supabase-js/blob/master/RELEASE.md#2025-04-19_snippet_4\n\nLANGUAGE: jsx\nCODE:\n```\nconst {\n  body: { user },\n} = await supabase.auth.signup('someone@email.com', 'password')\n```\n\nLANGUAGE: jsx\nCODE:\n```\nconst { user, error } = await supabase.auth.signUp({\n  email: 'someone@email.com',\n  password: 'password',\n})\n```\n\nLANGUAGE: jsx\nCODE:\n```\nconst { user, error } = await supabase.auth.signIn({\n  email: 'someone@email.com',\n  password: 'password',\n})\n```\n\nLANGUAGE: jsx\nCODE:\n```\nawait supabase.auth.logout()\n```\n\nLANGUAGE: jsx\nCODE:\n```\nawait supabase.auth.signOut()\n```\n\n----------------------------------------\n\nTITLE: Updated Error Handling Pattern\nDESCRIPTION: Demonstration of the new error handling approach where errors are returned instead of thrown.\nSOURCE: https://github.com/supabase/supabase-js/blob/master/RELEASE.md#2025-04-19_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\ntry {\n  const { body } = supabase.from('todos').select('*')\n} catch (error) {\n  console.log(error)\n}\n```\n\nLANGUAGE: jsx\nCODE:\n```\nconst { data, error } = supabase.from('todos').select('*')\nif (error) console.log(error)\n```\n\n----------------------------------------\n\nTITLE: Migrating Query Response Body to Data Property\nDESCRIPTION: Example showing the migration from using 'body' to 'data' property in query responses.\nSOURCE: https://github.com/supabase/supabase-js/blob/master/RELEASE.md#2025-04-19_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nconst { body } = supabase.from('todos').select('*')\n```\n\nLANGUAGE: jsx\nCODE:\n```\nconst { data } = supabase.from('todos').select('*')\n```\n\n----------------------------------------\n\nTITLE: Pagination Using Range Instead of Offset\nDESCRIPTION: Migration from offset/limit pagination to using the range method.\nSOURCE: https://github.com/supabase/supabase-js/blob/master/RELEASE.md#2025-04-19_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nlet countries = await supabase.from('cities').select('name').offset(10).limit(10)\n```\n\nLANGUAGE: javascript\nCODE:\n```\nlet countries = await supabase.from('cities').select('name').range(10, 20)\n```\n\n----------------------------------------\n\nTITLE: Using Supabase with UMD Global Variable\nDESCRIPTION: Example of using the Supabase client from a global variable after loading via UMD.\nSOURCE: https://github.com/supabase/supabase-js/blob/master/README.md#2025-04-19_snippet_4\n\nLANGUAGE: html\nCODE:\n```\n<script>\n  const { createClient } = supabase\n  const _supabase = createClient('https://xyzcompany.supabase.co', 'public-anon-key')\n\n  console.log('Supabase Instance: ', _supabase)\n  // ...\n</script>\n```\n\n----------------------------------------\n\nTITLE: Loading Supabase via UMD Script Tag\nDESCRIPTION: Loading the Supabase library using a CDN via UMD script tag.\nSOURCE: https://github.com/supabase/supabase-js/blob/master/README.md#2025-04-19_snippet_2\n\nLANGUAGE: html\nCODE:\n```\n<script src=\"https://cdn.jsdelivr.net/npm/@supabase/supabase-js@2\"></script>\n```\n\n----------------------------------------\n\nTITLE: Loading Supabase via UnPKG CDN\nDESCRIPTION: Alternative method to load Supabase using UnPKG CDN.\nSOURCE: https://github.com/supabase/supabase-js/blob/master/README.md#2025-04-19_snippet_3\n\nLANGUAGE: html\nCODE:\n```\n<script src=\"https://unpkg.com/@supabase/supabase-js@2\"></script>\n```\n\n----------------------------------------\n\nTITLE: Simplified Overlap Query Operator\nDESCRIPTION: Migration from separate overlap operators (ovr/ova) to a single 'ov' operator.\nSOURCE: https://github.com/supabase/supabase-js/blob/master/RELEASE.md#2025-04-19_snippet_2\n\nLANGUAGE: jsx\nCODE:\n```\ntry {\n  const { body } = supabase.from('todos').select('*').ovr('population_range_millions', [150, 250])\n} catch (error) {\n  console.log(error)\n}\n```\n\nLANGUAGE: jsx\nCODE:\n```\nconst { data, error } = supabase\n  .from('todos')\n  .select('*')\n  .ov('population_range_millions', [150, 250])\nif (error) console.log(error)\n```"
  }
]