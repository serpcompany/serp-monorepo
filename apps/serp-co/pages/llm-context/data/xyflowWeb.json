[
  {
    "owner": "xyflow",
    "repo": "web",
    "content": "TITLE: Installing @xyflow/react with npm (Bash)\nDESCRIPTION: Installs the React Flow library using the Node Package Manager (npm). This command requires Node.js and npm to be installed in the development environment.\nSOURCE: https://github.com/xyflow/web/blob/main/sites/reactflow.dev/src/content/learn/getting-started/installation-and-requirements.mdx#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm install @xyflow/react\n```\n\n----------------------------------------\n\nTITLE: Importing React Flow Components in JavaScript\nDESCRIPTION: Imports the core `ReactFlow` component along with `Background` and `Controls` utilities from the `@xyflow/react` package. This is the first step to set up a React Flow canvas in a React application. These components are necessary to render the flow canvas, its background pattern, and UI controls.\nSOURCE: https://github.com/xyflow/web/blob/main/sites/reactflow.dev/src/content/learn/getting-started/building-a-flow.mdx#2025-04-23_snippet_0\n\nLANGUAGE: js\nCODE:\n```\nimport { ReactFlow, Background, Controls } from '@xyflow/react';\n```\n\n----------------------------------------\n\nTITLE: Rendering a Basic Custom Edge using React Flow (JSX)\nDESCRIPTION: Defines a functional React component for a custom edge that draws a straight SVG path between two nodes using React Flow utilities. Requires the '@xyflow/react' package and expects props for edge id, source and target coordinates. The BaseEdge is rendered with the computed straight path; this snippet provides the foundation for further edge customization via edge types.\nSOURCE: https://github.com/xyflow/web/blob/main/sites/reactflow.dev/src/content/learn/customization/custom-edges.mdx#2025-04-23_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport { BaseEdge, getStraightPath } from '@xyflow/react';\\n\\nexport default function CustomEdge({ id, sourceX, sourceY, targetX, targetY }) {\\n  const [edgePath] = getStraightPath({\\n    sourceX,\\n    sourceY,\\n    targetX,\\n    targetY,\\n  });\\n\\n  return (\\n    <>\\n      <BaseEdge id={id} path={edgePath} />\\n    </>\\n  );\\n}\n```\n\n----------------------------------------\n\nTITLE: Initializing ReactFlow Component in React\nDESCRIPTION: Basic implementation example of the ReactFlow component showing the minimal setup with nodes, edges, and change handlers. This is the core component for creating a flow diagram in React.\nSOURCE: https://github.com/xyflow/web/blob/main/sites/reactflow.dev/src/content/api-reference/react-flow.mdx#2025-04-23_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nimport { ReactFlow } from '@xyflow/react'\n\nexport default function Flow() {\n  return <ReactFlow\n    nodes={...}\n    edges={...}\n    onNodesChange={...}\n    ...\n  />\n}\n```\n\n----------------------------------------\n\nTITLE: Importing Emoji Component in JavaScript\nDESCRIPTION: Imports the 'Emoji' component from the '@xyflow/xy-ui' library. This component is used within the documentation page to display emoji characters.\nSOURCE: https://github.com/xyflow/web/blob/main/sites/reactflow.dev/src/content/learn/concepts/introduction.mdx#2025-04-23_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport { Emoji } from '@xyflow/xy-ui';\n```\n\n----------------------------------------\n\nTITLE: Defining Node Type for React Flow in TypeScript\nDESCRIPTION: This snippet defines the generic TypeScript type `Node`, describing all properties and customization options for nodes within the React Flow library. Developers should ensure all dependencies such as `XYPosition`, `Position`, `CoordinateExtent`, `React.CSSProperties`, `NodeOrigin`, and `NodeHandle[]` are imported from their respective modules. Key parameters include `id`, `position`, `data` (for custom node data), and optional style and behavior settings. Most fields are either booleans or primitive types, and the size (width/height) fields should be used as read-only values since they're managed internally by React Flow. The type is intended for use when constructing or manipulating nodes within a graph, with constraints on manipulating certain fields directly.\nSOURCE: https://github.com/xyflow/web/blob/main/sites/reactflow.dev/src/content/api-reference/types/node.mdx#2025-04-23_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\nexport type Node<\n  NodeData extends Record<string, unknown> = Record<string, unknown>,\n  NodeType extends string = string,\n> = {\n  id: string;\n  position: XYPosition;\n  data: NodeData;\n  type?: NodeType;\n  sourcePosition?: Position;\n  targetPosition?: Position;\n  hidden?: boolean;\n  selected?: boolean;\n  dragging?: boolean;\n  draggable?: boolean;\n  selectable?: boolean;\n  connectable?: boolean;\n  resizing?: boolean;\n  deletable?: boolean;\n  dragHandle?: string;\n  width?: number | null;\n  height?: number | null;\n  parentId?: string;\n  zIndex?: number;\n  extent?: 'parent' | CoordinateExtent;\n  expandParent?: boolean;\n  ariaLabel?: string;\n  focusable?: boolean;\n  style?: React.CSSProperties;\n  className?: string;\n  origin?: NodeOrigin;\n  handles?: NodeHandle[];\n  measured?: {\n    width?: number;\n    height?: number;\n  };\n};\n```\n\n----------------------------------------\n\nTITLE: Importing React Flow Stylesheet - JavaScript\nDESCRIPTION: This snippet demonstrates the import statement necessary to include React Flow's CSS stylesheet in your project for proper rendering of edges and nodes. Add this line to your main JavaScript entry file (e.g., index.js or App.js). The dependency is the @xyflow/react package with its CSS entrypoint. Without this import, edges and component styles may not render as expected in the React Flow graph.\nSOURCE: https://github.com/xyflow/web/blob/main/sites/reactflow.dev/src/content/learn/troubleshooting/index.mdx#2025-04-23_snippet_17\n\nLANGUAGE: js\nCODE:\n```\nimport '@xyflow/react/dist/style.css';\n```\n\n----------------------------------------\n\nTITLE: Applying the `nowheel` Utility Class for Scrollable Content (TSX)\nDESCRIPTION: Shows how to use the `nowheel` CSS class within a custom React Flow node component (written in TSX). Applying this class to a container with scrollable content prevents the default canvas panning behavior when the user scrolls inside that container, ensuring only the container's content scrolls.\nSOURCE: https://github.com/xyflow/web/blob/main/sites/reactflow.dev/src/content/learn/customization/custom-nodes.mdx#2025-04-23_snippet_5\n\nLANGUAGE: tsx\nCODE:\n```\nexport default function CustomNode(props: NodeProps) {\n  return (\n    <div className=\"nowheel\" style={{ overflow: 'auto' }}>\n      <p>Scrollable content...</p>\n    </div>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Basic Svelte Flow Application\nDESCRIPTION: Complete example showing how to create a basic Svelte Flow application with nodes, edges, controls, background, and minimap components. Includes store setup and component configuration.\nSOURCE: https://github.com/xyflow/web/blob/main/sites/svelteflow.dev/src/content/learn/index.mdx#2025-04-23_snippet_2\n\nLANGUAGE: svelte\nCODE:\n```\n<script>\n  import { writable } from 'svelte/store';\n  import {\n    SvelteFlow,\n    Controls,\n    Background,\n    BackgroundVariant,\n    MiniMap\n  } from '@xyflow/svelte';\n\n  // 👇 this is important! You need to import the styles for Svelte Flow to work\n  import '@xyflow/svelte/dist/style.css';\n\n  // We are using writables for the nodes and edges to sync them easily. When a user drags a node for example, Svelte Flow updates its position.\n  const nodes = writable([\n    {\n      id: '1',\n      type: 'input',\n      data: { label: 'Input Node' },\n      position: { x: 0, y: 0 }\n    },\n    {\n      id: '2',\n      type: 'default',\n      data: { label: 'Node' },\n      position: { x: 0, y: 150 }\n    }\n  ]);\n\n  // same for edges\n  const edges = writable([\n    {\n      id: '1-2',\n      type: 'default',\n      source: '1',\n      target: '2',\n      label: 'Edge Text'\n    }\n  ]);\n\n  const snapGrid = [25, 25];\n</script>\n\n<!--\n👇 By default, the Svelte Flow container has a height of 100%.\nThis means that the parent container needs a height to render the flow.\n-->\n<div style:height=\"500px\">\n  <SvelteFlow\n    {nodes}\n    {edges}\n    {snapGrid}\n    fitView\n    on:nodeclick={(event) => console.log('on node click', event.detail.node)}\n  >\n    <Controls />\n    <Background variant={BackgroundVariant.Dots} />\n    <MiniMap />\n  </SvelteFlow>\n</div>\n```\n\n----------------------------------------\n\nTITLE: Defining the ReactFlowInstance TypeScript Type\nDESCRIPTION: Defines the `ReactFlowInstance` type in TypeScript, used for interacting with the React Flow state. It includes methods for managing nodes and edges (CRUD operations, data updates), handling viewport transformations (zoom, pan, fit), checking node intersections, calculating bounds, and converting between screen and flow coordinates. The type is generic, accepting types `T` for node data and `U` for edge data.\nSOURCE: https://github.com/xyflow/web/blob/main/sites/reactflow.dev/src/content/api-reference/types/react-flow-instance.mdx#2025-04-23_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nexport type ReactFlowInstance<T, U> = {\n  // Nodes and Edges\n  getNode: (id: string) => Node<T> | undefined;\n  getNodes: () => Node<T>[];\n  addNodes: (payload: Node<T>[] | Node<T>) => void;\n  setNodes: (payload: Node<T>[] | ((nodes: Node<T>[]) => Node<T>[])) => void;\n\n  getEdge: (id: string) => Edge<U> | undefined;\n  getEdges: () => Edge<U>[];\n  addEdges: (payload: Edge<U>[] | Edge<U>) => void;\n  setEdges: (payload: Edge<U>[] | ((edges: Edge<U>[]) => Edge<U>[])) => void;\n\n  toObject: () => ReactFlowJsonObject<T, U>;\n  deleteElements: (payload: {\n    nodes?: (Partial<Node> & { id: Node['id'] })[];\n    edges?: (Partial<Edge> & { id: Edge['id'] })[];\n  }) => void;\n  getNodesBounds: (nodes: (NodeType | InternalNode | string)[]) => Rect;\n\n  // Intersections\n  getIntersectingNodes: (\n    node: (Partial<Node<T>> & { id: Node['id'] }) | Rect,\n    partially?: boolean,\n    nodes?: Node<T>[],\n  ) => Node<T>[];\n\n  isNodeIntersecting: (\n    node: (Partial<Node<T>> & { id: Node['id'] }) | Rect,\n    area: Rect,\n    partially?: boolean,\n  ) => boolean;\n\n  // Viewport\n  viewportInitialized: boolean;\n  zoomIn: (options?: { duration: number }) => void;\n  zoomOut: (options?: { duration: number }) => void;\n  zoomTo: (zoomLevel: number, options?: { duration: number }) => void;\n  getZoom: () => number;\n  setViewport: (viewport: Viewport, options?: { duration: number }) => void;\n  getViewport: () => Viewport;\n  fitView: (fitViewOptions?: FitViewOptions) => boolean;\n  setCenter: (\n    x: number,\n    y: number,\n    options?: { duration: number; zoom: number },\n  ) => void;\n  fitBounds: (\n    bounds: Rect,\n    options?: { duration: number; padding: number },\n  ) => void;\n  screenToFlowPosition: (position: { x: number; y: number }) => {\n    x: number;\n    y: number;\n  };\n  flowToScreenPosition: (position: { x: number; y: number }) => {\n    x: number;\n    y: number;\n  };\n  updateNode: (\n    id: string,\n    nodeUpdate: Partial<NodeType> | ((node: NodeType) => Partial<NodeType>),\n    options?: { replace: boolean },\n  ) => void;\n  updateNodeData: (\n    id: string,\n    dataUpdate:\n      | Partial<NodeType>['data']\n      | ((node: Node) => Partial<NodeType>['data']),\n    options?: { replace: boolean },\n  ) => void;\n  updateEdge: (\n    id: string,\n    edgeUpdate: Partial<EdgeType> | ((node: EdgeType) => Partial<EdgeType>),\n    options?: { replace: boolean },\n  ) => void;\n  updateEdgeData: (\n    id: string,\n    dataUpdate:\n      | Partial<EdgeType>['data']\n      | ((node: Edge) => Partial<EdgeType>['data']),\n    options?: { replace: boolean },\n  ) => void;\n};\n```\n\n----------------------------------------\n\nTITLE: Installing Project Dependencies with npm\nDESCRIPTION: Installs essential libraries for the mind map application using npm. `reactflow` is the core library for node-based UIs, `zustand` is used for state management, `classcat` is a utility for conditional class names (though not explicitly used in provided snippets yet), and `nanoid` generates unique IDs.\nSOURCE: https://github.com/xyflow/web/blob/main/sites/reactflow.dev/src/content/learn/tutorials/mind-map-app-with-react-flow.mdx#2025-04-23_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nnpm install reactflow zustand classcat nanoid\n```\n\n----------------------------------------\n\nTITLE: Defining MiniMapNodeProps Type in TypeScript\nDESCRIPTION: Defines the TypeScript type `MiniMapNodeProps` for a MiniMap node component. It specifies properties required for rendering, including unique identifier (`id`), position (`x`, `y`), dimensions (`width`, `height`), styling options (`borderRadius`, `className`, `color`, `shapeRendering`, `strokeColor`, `strokeWidth`, `style`), selection status (`selected`), and an optional click handler (`onClick`). This type is used to ensure components representing nodes in the MiniMap receive the correct data structure. It relies on the standard `MouseEvent` type and the `CSSProperties` type (typically from React or a CSS-in-JS library).\nSOURCE: https://github.com/xyflow/web/blob/main/sites/reactflow.dev/src/content/api-reference/types/mini-map-node-props.mdx#2025-04-23_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n```ts\nexport type MiniMapNodeProps = {\n  id: string;\n  x: number;\n  y: number;\n  width: number;\n  height: number;\n  borderRadius: number;\n  className: string;\n  color: string;\n  shapeRendering: string;\n  strokeColor: string;\n  strokeWidth: number;\n  style?: CSSProperties;\n  selected: boolean;\n  onClick?: (event: MouseEvent, id: string) => void;\n};\n```\n```\n\n----------------------------------------\n\nTITLE: Using React Flow Helper Hooks for State Management (JavaScript)\nDESCRIPTION: Demonstrates the use of `useNodesState` and `useEdgesState` hooks provided by React Flow. These hooks simplify state management for nodes and edges in controlled components by initializing state with initial values (`initialNodes`, `initialEdges`) and returning the state variables (`nodes`, `edges`), setter functions (`setNodes`, `setEdges`), and the required change handlers (`onNodesChange`, `onEdgesChange`).\nSOURCE: https://github.com/xyflow/web/blob/main/sites/reactflow.dev/src/content/learn/concepts/core-concepts.mdx#2025-04-23_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconst [nodes, setNodes, onNodesChange] = useNodesState(initialNodes);\nconst [edges, setEdges, onEdgesChange] = useEdgesState(initialEdges);\n```\n\n----------------------------------------\n\nTITLE: Adding Interactive Node and Edge Changes with React Flow - React (JSX)\nDESCRIPTION: Expands on the basic diagram by enabling stateful changes and interactive edge creation within React Flow. This snippet utilizes useNodesState and useEdgesState hooks for managing nodes and edges, along with the addEdge utility to support reactively connecting nodes. Dependencies include React, @xyflow/react, and its stylesheet. Inputs include the initial node/edge data, and outputs are UI-driven event handlers for flow changes, supporting drag, delete, and link creation operations.\nSOURCE: https://github.com/xyflow/web/blob/main/sites/reactflow.dev/src/content/learn/index.mdx#2025-04-23_snippet_4\n\nLANGUAGE: jsx\nCODE:\n```\nimport React, { useCallback } from 'react';\nimport { ReactFlow, useNodesState, useEdgesState, addEdge } from '@xyflow/react';\n\nimport '@xyflow/react/dist/style.css';\n\nconst initialNodes = [\n  { id: '1', position: { x: 0, y: 0 }, data: { label: '1' } },\n  { id: '2', position: { x: 0, y: 100 }, data: { label: '2' } },\n];\nconst initialEdges = [{ id: 'e1-2', source: '1', target: '2' }];\n\nexport default function App() {\n  const [nodes, setNodes, onNodesChange] = useNodesState(initialNodes);\n  const [edges, setEdges, onEdgesChange] = useEdgesState(initialEdges);\n\n  const onConnect = useCallback(\n    (params) => setEdges((eds) => addEdge(params, eds)),\n    [setEdges],\n  );\n\n  return (\n    <div style={{ width: '100vw', height: '100vh' }}>\n      <ReactFlow\n        nodes={nodes}\n        edges={edges}\n        onNodesChange={onNodesChange}\n        onEdgesChange={onEdgesChange}\n        onConnect={onConnect}\n      />\n    </div>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Applying the `nodrag` Utility Class in a Custom Node (TSX)\nDESCRIPTION: Demonstrates adding the `nodrag` CSS class to an input element within a custom React Flow node component (written in TSX). This prevents the node dragging behavior when the user interacts with the input element, allowing standard input interaction like text selection.\nSOURCE: https://github.com/xyflow/web/blob/main/sites/reactflow.dev/src/content/learn/customization/custom-nodes.mdx#2025-04-23_snippet_4\n\nLANGUAGE: tsx\nCODE:\n```\nexport default function CustomNode(props: NodeProps) {\n  return (\n    <div>\n      <input className=\"nodrag\" type=\"range\" min={0} max={100} />\n    </div>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Multiple Nodes with Types in JavaScript for React Flow\nDESCRIPTION: Illustrates defining an array with multiple node objects for React Flow. This example shows two nodes, specifying their unique `id`, `position`, `data` (with labels), and optionally setting a `type` (like 'input') for visual differentiation or specific functionality. This array is used to render multiple nodes on the canvas.\nSOURCE: https://github.com/xyflow/web/blob/main/sites/reactflow.dev/src/content/learn/getting-started/building-a-flow.mdx#2025-04-23_snippet_2\n\nLANGUAGE: js\nCODE:\n```\nconst nodes = [\n  {\n    id: '1',\n    position: { x: 0, y: 0 },\n    data: { label: 'Hello' },\n    type: 'input',\n  },\n  {\n    id: '2',\n    position: { x: 100, y: 100 },\n    data: { label: 'World' },\n  },\n];\n```\n\n----------------------------------------\n\nTITLE: Installing @xyflow/react with yarn (Bash)\nDESCRIPTION: Installs the React Flow library using the Yarn package manager. This command requires Node.js and yarn to be installed in the development environment.\nSOURCE: https://github.com/xyflow/web/blob/main/sites/reactflow.dev/src/content/learn/getting-started/installation-and-requirements.mdx#2025-04-23_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nyarn add @xyflow/react\n```\n\n----------------------------------------\n\nTITLE: Typing React Flow Callbacks with Custom Node Types - React Flow - TypeScript\nDESCRIPTION: This example show how to type React Flow callback functions (such as onNodeDrag and onNodesChange) using custom node union types, improving type safety and TypeScript inference in complex diagrams. Prerequisites include custom node type definitions and @xyflow/react. Inputs are node data and change events, and outputs are correctly typed callback handlers. Typing generics ensures custom node properties can be safely accessed in callbacks.\nSOURCE: https://github.com/xyflow/web/blob/main/sites/reactflow.dev/src/content/learn/advanced-use/typescript.mdx#2025-04-23_snippet_5\n\nLANGUAGE: TypeScript\nCODE:\n```\nimport { type OnNodeDrag } from '@xyflow/react';\n\n// ...\n\n// Pass your union type here ...\nconst onNodeDrag: OnNodeDrag<CustomNodeType> = useCallback((_, node) => {\n  if (node.type === 'number') {\n    // From here on, Typescript knows that node.data\n    // is of type { num: number }\n    console.log('drag event', node.data.number);\n  }\n}, []);\n\nconst onNodesChange: OnNodesChange<CustomNodeType> = useCallback(\n  (changes) => setNodes((nds) => applyNodeChanges(changes, nds)),\n  [setNodes],\n);\n```\n\n----------------------------------------\n\nTITLE: Defining a Custom Node Component in React Flow (JSX)\nDESCRIPTION: Defines a React functional component `TextUpdaterNode` for a custom React Flow node. It includes a target handle at the top, an input field that logs its value on change, and two source handles at the bottom (one default, one styled and positioned). The `nodrag` class is applied to the input to prevent node dragging during text input. Requires `useCallback` from React and `Handle`, `Position` from `@xyflow/react`.\nSOURCE: https://github.com/xyflow/web/blob/main/sites/reactflow.dev/src/content/learn/customization/custom-nodes.mdx#2025-04-23_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport { useCallback } from 'react';\nimport { Handle, Position } from '@xyflow/react';\n\nconst handleStyle = { left: 10 };\n\nfunction TextUpdaterNode({ data }) {\n  const onChange = useCallback((evt) => {\n    console.log(evt.target.value);\n  }, []);\n\n  return (\n    <>\n      <Handle type=\"target\" position={Position.Top} />\n      <div>\n        <label htmlFor=\"text\">Text:</label>\n        <input id=\"text\" name=\"text\" onChange={onChange} className=\"nodrag\" />\n      </div>\n      <Handle type=\"source\" position={Position.Bottom} id=\"a\" />\n      <Handle type=\"source\" position={Position.Bottom} id=\"b\" style={handleStyle} />\n    </>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Initializing State for Nodes and Edges in JavaScript\nDESCRIPTION: This snippet sets up state variables for nodes and edges within a React component using useState. The initialNodes and initialEdges variables represent the starting data for the flow graph. This is required for interactive behavior to track and update node and edge state in React Flow.\nSOURCE: https://github.com/xyflow/web/blob/main/sites/reactflow.dev/src/content/learn/getting-started/adding-interactivity.mdx#2025-04-23_snippet_1\n\nLANGUAGE: JavaScript\nCODE:\n```\nconst [nodes, setNodes] = useState(initialNodes);\nconst [edges, setEdges] = useState(initialEdges);\n```\n\n----------------------------------------\n\nTITLE: Implementing Custom Edge with EdgeLabel in Svelte\nDESCRIPTION: This code snippet demonstrates how to create a custom edge component in Svelte that includes an EdgeLabel. It uses the getBezierPath function to calculate the path and label position, and conditionally renders the EdgeLabel if a label is provided.\nSOURCE: https://github.com/xyflow/web/blob/main/sites/svelteflow.dev/src/content/api-reference/components/edge-label.mdx#2025-04-23_snippet_0\n\nLANGUAGE: svelte\nCODE:\n```\n<script lang=\"ts\">\n  import { getBezierPath, type EdgeProps } from '@xyflow/svelte';\n\n  type $$Props = EdgeProps;\n\n  export let id: $$Props['id'] = undefined;\n  export let label: $$Props['label'] = undefined;\n  export let labelStyle: $$Props['labelStyle'] = undefined;\n\n  export let sourceX: $$Props['sourceX'];\n  export let sourceY: $$Props['sourceY'];\n  export let sourcePosition: $$Props['sourcePosition'];\n\n  export let targetX: $$Props['targetX'];\n  export let targetY: $$Props['targetY'];\n  export let targetPosition: $$Props['targetPosition'];\n\n  $: [path, labelX, labelY] = getBezierPath({\n    sourceX,\n    sourceY,\n    targetX,\n    targetY,\n    sourcePosition,\n    targetPosition,\n    curvature: pathOptions?.curvature\n  });\n</script>\n\n<path\n  {id}\n  d={path}\n  fill=\"none\"\n/>\n\n{#if label}\n  <EdgeLabel x={labelX} y={labelY} style={labelStyle}>\n    {label}\n  </EdgeLabel>\n{/if}\n```\n\n----------------------------------------\n\nTITLE: Defining Custom MindMapNode Component in React Flow (TSX)\nDESCRIPTION: This snippet defines a custom node component `MindMapNode` for a React Flow application. It receives node props (`id`, `data`), uses a Zustand store (`useStore`) to update the node's label via an input field, includes an SVG drag handle, and renders source/target handles for connections. The `NodeData` type defines the expected shape of the node's data.\nSOURCE: https://github.com/xyflow/web/blob/main/sites/reactflow.dev/src/content/learn/tutorials/mind-map-app-with-react-flow.mdx#2025-04-23_snippet_20\n\nLANGUAGE: tsx\nCODE:\n```\n```tsx\nimport { Handle, NodeProps, Position } from '@xyflow/react';\n\nimport useStore from '../store';\n\nexport type NodeData = {\n  label: string;\n};\n\nfunction MindMapNode({ id, data }: NodeProps<NodeData>) {\n  const updateNodeLabel = useStore((state) => state.updateNodeLabel);\n\n  return (\n    <>\n      <div className=\"inputWrapper\">\n        <div className=\"dragHandle\">\n          {/* icon taken from grommet https://icons.grommet.io */}\n          <svg viewBox=\"0 0 24 24\">\n            <path\n              fill=\"#333\"\n              stroke=\"#333\"\n              strokeWidth=\"1\"\n              d=\"M15 5h2V3h-2v2zM7 5h2V3H7v2zm8 8h2v-2h-2v2zm-8 0h2v-2H7v2zm8 8h2v-2h-2v2zm-8 0h2v-2H7v2z\"\n            />\n          </svg>\n        </div>\n        <input\n          value={data.label}\n          onChange={(evt) => updateNodeLabel(id, evt.target.value)}\n          className=\"input\"\n        />\n      </div>\n\n      <Handle type=\"target\" position={Position.Top} />\n      <Handle type=\"source\" position={Position.Top} />\n    </>\n  );\n}\n\nexport default MindMapNode;\n```\n```\n\n----------------------------------------\n\nTITLE: Implementing ReactFlowProvider to Share Flow State (TSX)\nDESCRIPTION: This TSX snippet demonstrates wrapping the `<ReactFlow />` component and sibling components (like `Sidebar`) within a `<ReactFlowProvider />`. This setup allows child components, such as `Sidebar`, to access the flow's internal state using hooks like `useNodes`, shown here accessing node positions. This pattern requires the `@xyflow/react` package and a basic React setup.\nSOURCE: https://github.com/xyflow/web/blob/main/sites/reactflow.dev/src/content/api-reference/react-flow-provider.mdx#2025-04-23_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nimport { ReactFlow, ReactFlowProvider, useNodes } from '@xyflow/react'\\n\\nexport default function Flow() {\\n  return (\\n    <ReactFlowProvider>\\n      <ReactFlow nodes={...} edges={...} />\\n      <Sidebar />\\n    </ReactFlowProvider>\\n  )\\n}\\n\\nfunction Sidebar() {\\n  // This hook will only work if the component it's used in is a child of a\\n  // <ReactFlowProvider />.\\n  const nodes = useNodes()\\n\\n  return (\\n    <aside>\\n      {nodes.map((node) => (\\n        <div key={node.id}>\\n          Node {node.id} -\\n            x: {node.position.x.toFixed(2)},\\n            y: {node.position.y.toFixed(2)}\\n        </div>\\n      ))}\\n    </aside>\\n  )\\n}\n```\n\n----------------------------------------\n\nTITLE: Initializing React Flow with Typed Nodes and Edges - React Flow - TypeScript\nDESCRIPTION: This code demonstrates how to instantiate a basic React Flow diagram using explicit typings for nodes, edges, and configuration options in TypeScript. It shows use of React hooks for managing state, React Flow event callbacks, and customizing view/edge behaviors. Required dependencies are React, React Flow, and TypeScript; the key inputs are node and edge arrays, while outputs are an interactive diagram with connected nodes and drag capability. This example establishes a foundation for further type-safe customization.\nSOURCE: https://github.com/xyflow/web/blob/main/sites/reactflow.dev/src/content/learn/advanced-use/typescript.mdx#2025-04-23_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\nimport { useState, useCallback } from 'react';\nimport {\n  ReactFlow,\n  addEdge,\n  applyNodeChanges,\n  applyEdgeChanges,\n  type Node,\n  type Edge,\n  type FitViewOptions,\n  type OnConnect,\n  type OnNodesChange,\n  type OnEdgesChange,\n  type OnNodeDrag,\n  type DefaultEdgeOptions,\n} from '@xyflow/react';\n\nconst initialNodes: Node[] = [\n  { id: '1', data: { label: 'Node 1' }, position: { x: 5, y: 5 } },\n  { id: '2', data: { label: 'Node 2' }, position: { x: 5, y: 100 } },\n];\n\nconst initialEdges: Edge[] = [{ id: 'e1-2', source: '1', target: '2' }];\n\nconst fitViewOptions: FitViewOptions = {\n  padding: 0.2,\n};\n\nconst defaultEdgeOptions: DefaultEdgeOptions = {\n  animated: true,\n};\n\nconst onNodeDrag: OnNodeDrag = (_, node) => {\n  console.log('drag event', node.data);\n};\n\nfunction Flow() {\n  const [nodes, setNodes] = useState<Node[]>(initialNodes);\n  const [edges, setEdges] = useState<Edge[]>(initialEdges);\n\n  const onNodesChange: OnNodesChange = useCallback(\n    (changes) => setNodes((nds) => applyNodeChanges(changes, nds)),\n    [setNodes],\n  );\n  const onEdgesChange: OnEdgesChange = useCallback(\n    (changes) => setEdges((eds) => applyEdgeChanges(changes, eds)),\n    [setEdges],\n  );\n  const onConnect: OnConnect = useCallback(\n    (connection) => setEdges((eds) => addEdge(connection, eds)),\n    [setEdges],\n  );\n\n  return (\n    <ReactFlow\n      nodes={nodes}\n      edges={edges}\n      onNodesChange={onNodesChange}\n      onEdgesChange={onEdgesChange}\n      onConnect={onConnect}\n      onNodeDrag={onNodeDrag}\n      fitView\n      fitViewOptions={fitViewOptions}\n      defaultEdgeOptions={defaultEdgeOptions}\n    />\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Scaffolding a React Project with Vite (TypeScript)\nDESCRIPTION: Uses the `npm create vite` command with the `--template react-ts` flag to initialize a new React project named 'reactflow-mind-map' specifically configured for TypeScript development. This provides type checking and enhanced tooling.\nSOURCE: https://github.com/xyflow/web/blob/main/sites/reactflow.dev/src/content/learn/tutorials/mind-map-app-with-react-flow.mdx#2025-04-23_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nnpm create vite@latest reactflow-mind-map -- --template react-ts\n```\n\n----------------------------------------\n\nTITLE: Creating a Basic Flow Diagram with React Flow - React (JSX)\nDESCRIPTION: This snippet demonstrates setting up a minimal flow graph using the <ReactFlow /> component in a React application. Dependencies include React and @xyflow/react, as well as the Flow CSS for styling. The only required props are node and edge arrays, and the component must be rendered inside a fixed-size container. The output is a read-only interactive diagram with two nodes and a connecting edge.\nSOURCE: https://github.com/xyflow/web/blob/main/sites/reactflow.dev/src/content/learn/index.mdx#2025-04-23_snippet_3\n\nLANGUAGE: jsx\nCODE:\n```\nimport React from 'react';\nimport { ReactFlow } from '@xyflow/react';\n\nimport '@xyflow/react/dist/style.css';\n\nconst initialNodes = [\n  { id: '1', position: { x: 0, y: 0 }, data: { label: '1' } },\n  { id: '2', position: { x: 0, y: 100 }, data: { label: '2' } },\n];\nconst initialEdges = [{ id: 'e1-2', source: '1', target: '2' }];\n\nexport default function App() {\n  return (\n    <div style={{ width: '100vw', height: '100vh' }}>\n      <ReactFlow nodes={initialNodes} edges={initialEdges} />\n    </div>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring React Flow with Custom Nodes and Edges (TSX)\nDESCRIPTION: This TSX code sets up the main React Flow application component (`App`). It imports the custom `NumNode`, `SumNode`, and `DataEdge` components. It defines `nodeTypes` and `edgeTypes` objects to map type names to the corresponding components. Initial nodes and edges (including `data-edge` types with a `key: 'value'` data property) are defined. The `useNodesState` and `useEdgesState` hooks manage flow state, and the `onConnect` callback is configured to add new edges of type `data` using the `addEdge` utility, ensuring the `data.key` is set correctly.\nSOURCE: https://github.com/xyflow/web/blob/main/sites/reactflow.dev/src/content/learn/tutorials/getting-started-with-react-flow-components.mdx#2025-04-23_snippet_19\n\nLANGUAGE: tsx\nCODE:\n```\nimport '@xyflow/react/dist/style.css';\n\nimport {\n  ReactFlow,\n  OnConnect,\n  Position,\n  useNodesState,\n  useEdgesState,\n  addEdge,\n  Edge,\n  Node,\n} from '@xyflow/react';\n\nimport { NumNode } from '@/components/nodes/num-node';\nimport { SumNode } from '@/components/nodes/sum-node';\n\nimport { DataEdge } from '@/components/data-edge';\n\nconst nodeTypes = {\n  num: NumNode,\n  sum: SumNode,\n};\n\nconst initialNodes: Node[] = [\n  { id: 'a', type: 'num', data: { value: 0 }, position: { x: 0, y: 0 } },\n  { id: 'b', type: 'num', data: { value: 0 }, position: { x: 0, y: 200 } },\n  { id: 'c', type: 'sum', data: { value: 0 }, position: { x: 300, y: 100 } },\n  { id: 'd', type: 'num', data: { value: 0 }, position: { x: 0, y: 400 } },\n  { id: 'e', type: 'sum', data: { value: 0 }, position: { x: 600, y: 400 } },\n];\n\nconst edgeTypes = {\n  data: DataEdge,\n};\n\nconst initialEdges: Edge[] = [\n  {\n    id: 'a->c',\n    type: 'data',\n    data: { key: 'value' },\n    source: 'a',\n    target: 'c',\n    targetHandle: 'x',\n  },\n  {\n    id: 'b->c',\n    type: 'data',\n    data: { key: 'value' },\n    source: 'b',\n    target: 'c',\n    targetHandle: 'y',\n  },\n  {\n    id: 'c->e',\n    type: 'data',\n    data: { key: 'value' },\n    source: 'c',\n    target: 'e',\n    targetHandle: 'x',\n  },\n  {\n    id: 'd->e',\n    type: 'data',\n    data: { key: 'value' },\n    source: 'd',\n    target: 'e',\n    targetHandle: 'y',\n  },\n];\n\nfunction App() {\n  const [nodes, , onNodesChange] = useNodesState(initialNodes);\n  const [edges, setEdges, onEdgesChange] = useEdgesState(initialEdges);\n\n  const onConnect: OnConnect = useCallback(\n    (params) => {\n      setEdges((edges) =>\n        addEdge({ type: 'data', data: { key: 'value' }, ...params }, edges),\n      );\n    },\n    [setEdges],\n  );\n\n  return (\n    <div className=\"h-screen w-screen p-8\">\n      <ReactFlow\n        nodes={nodes}\n        edges={edges}\n        onNodesChange={onNodesChange}\n        onEdgesChange={onEdgesChange}\n        onConnect={onConnect}\n        nodeTypes={nodeTypes}\n        edgeTypes={edgeTypes}\n        fitView\n      />\n    </div>\n  );\n}\n\nexport default App;\n```\n\n----------------------------------------\n\nTITLE: Defining a Custom Mind Map Edge for React Flow - TSX\nDESCRIPTION: This TSX snippet creates a custom edge component for React Flow that renders a straight edge between two nodes using the BaseEdge and getStraightPath utilities from the @xyflow/react package. It receives standard edge properties (sourceX, sourceY, targetX, targetY), computes a straight SVG path, and passes all props into BaseEdge. Dependencies include @xyflow/react. Inputs are edge coordinates, and the output is a React component rendering the edge. Limitations: only supports straight paths.\nSOURCE: https://github.com/xyflow/web/blob/main/sites/reactflow.dev/src/content/learn/tutorials/mind-map-app-with-react-flow.mdx#2025-04-23_snippet_10\n\nLANGUAGE: tsx\nCODE:\n```\nimport { BaseEdge, EdgeProps, getStraightPath } from '@xyflow/react';\n\nfunction MindMapEdge(props: EdgeProps) {\n  const { sourceX, sourceY, targetX, targetY } = props;\n\n  const [edgePath] = getStraightPath({\n    sourceX,\n    sourceY,\n    targetX,\n    targetY,\n  });\n\n  return <BaseEdge path={edgePath} {...props} />;\n}\n\nexport default MindMapEdge;\n```\n\n----------------------------------------\n\nTITLE: Customizing New Edges within onConnect Handler (JavaScript)\nDESCRIPTION: Illustrates how to customize properties of a newly created edge directly within the `onConnect` event handler. This example defines an `onConnect` function using the `useCallback` hook for stability. Inside the callback, it uses the `addEdge` helper function, spreading the `connection` object received from the event and adding a custom property (`animated: true`) before updating the edges state via the `setEdges` function.\nSOURCE: https://github.com/xyflow/web/blob/main/sites/reactflow.dev/src/content/learn/concepts/core-concepts.mdx#2025-04-23_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nconst onConnect = useCallback(\n  (connection) =>\n    setEdges((eds) => addEdge({ ...connection, animated: true }, eds)),\n  [setEdges],\n);\n```\n\n----------------------------------------\n\nTITLE: Implementing a Custom Edge with EdgeLabelRenderer in Svelte\nDESCRIPTION: This snippet demonstrates how to create a custom edge component that uses the EdgeLabelRenderer to display a styled label for the edge. It leverages the getBezierPath function to position the label correctly along the path of the edge.\nSOURCE: https://github.com/xyflow/web/blob/main/sites/svelteflow.dev/src/content/api-reference/components/edge-label-renderer.mdx#2025-04-23_snippet_0\n\nLANGUAGE: svelte\nCODE:\n```\n<script lang=\"ts\">\n  import { getBezierPath, EdgeLabelRenderer, BaseEdge } from '@xyflow/svelte';\n\n  export let id: $$Props['id'];\n  export let data: $$Props['data'];\n\n  $: [edgePath, labelX, labelY] = getBezierPath($$props);\n</script>\n\n<BaseEdge id={id} path={edgePath} />\n<EdgeLabelRenderer>\n  <div\n    style={{\n      position: 'absolute',\n      transform: `translate(-50%, -50%) translate(${labelX}px,${labelY}px)`,\n      background: '#ffcc00',\n      padding: 10,\n      borderRadius: 5,\n      fontSize: 12,\n      fontWeight: 700,\n    }}\n    class=\"nodrag nopan\"\n  >\n    {data.label}\n  </div>\n</EdgeLabelRenderer>\n```\n\n----------------------------------------\n\nTITLE: Implementing Keyboard Navigation for Slides - React Flow - TypeScript\nDESCRIPTION: This snippet adds keyboard navigation to the slide presentation flow using the onKeyPress handler in React Flow. The handleKeyPress function listens for Arrow key events, extracts the direction (left, up, down, right), and if a connected slide exists in that direction, it updates the focus using fitView and updates state. It depends on @xyflow/react and expects the currentSlide and slides dataset. All original formatting is preserved, and special logic is included to prevent default arrow key behavior.\nSOURCE: https://github.com/xyflow/web/blob/main/sites/reactflow.dev/src/content/learn/tutorials/slide-shows-with-react-flow.mdx#2025-04-23_snippet_15\n\nLANGUAGE: tsx\nCODE:\n```\nexport default function App() {\n  const [currentSlide, setCurrentSlide] = useState(initialSlide);\n  const { fitView } = useReactFlow();\n\n  ...\n\n  const handleKeyPress = useCallback<KeyboardEventHandler>(\n    (event) => {\n      const slide = slides[currentSlide];\n\n      switch (event.key) {\n        case 'ArrowLeft':\n        case 'ArrowUp':\n        case 'ArrowDown':\n        case 'ArrowRight':\n          const direction = event.key.slice(5).toLowerCase();\n          const target = slide[direction];\n\n          if (target) {\n            event.preventDefault();\n            setCurrentSlide(target);\n            fitView({ nodes: [{ id: target }] });\n          }\n      }\n    },\n    [currentSlide, fitView],\n  );\n\n  return (\n    <ReactFlow\n      ...\n      onKeyPress={handleKeyPress}\n    />\n  );\n}\n\n```\n\n----------------------------------------\n\nTITLE: Registering a Custom Edge Type in React Flow (JSX)\nDESCRIPTION: Demonstrates how to extend React Flow with new edge types by providing a custom edge component via the edgeTypes prop. Requires importing the main React Flow component and the previously defined custom edge, then assigning it to the edgeTypes object. Developers must memoize or define edgeTypes outside the render function to avoid React Flow warnings as edgeTypes affects the application's rendering logic.\nSOURCE: https://github.com/xyflow/web/blob/main/sites/reactflow.dev/src/content/learn/customization/custom-edges.mdx#2025-04-23_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\nimport ReactFlow from '@xyflow/react'\\nimport CustomEdge from './CustomEdge'\\n\\n\\nconst edgeTypes = {\\n  'custom-edge': CustomEdge\\n}\\n\\nexport function Flow() {\\n  return <ReactFlow edgeTypes={edgeTypes} ... />\\n}\n```\n\n----------------------------------------\n\nTITLE: Defining a Basic Node Array in JavaScript for React Flow\nDESCRIPTION: Demonstrates the creation of a JavaScript array containing a single node object for React Flow. Each node requires at least an `id`, a `position` object (`{ x: number, y: number }`), and a `data` object (e.g., `{ label: 'Hello' }`). This array will be passed as a prop to the `ReactFlow` component.\nSOURCE: https://github.com/xyflow/web/blob/main/sites/reactflow.dev/src/content/learn/getting-started/building-a-flow.mdx#2025-04-23_snippet_1\n\nLANGUAGE: js\nCODE:\n```\nconst nodes = [\n  {\n    id: '1', // required\n    position: { x: 0, y: 0 }, // required\n    data: { label: 'Hello' }, // required\n  },\n];\n```\n\n----------------------------------------\n\nTITLE: Memoizing Node Types within a Component using useMemo (JSX)\nDESCRIPTION: Shows how to memoize the `nodeTypes` object using the `useMemo` hook when it's defined inside a React component. This prevents the object from being recreated on every render, avoiding potential performance issues and bugs in React Flow. The memoized `nodeTypes` object is then passed to the `ReactFlow` component.\nSOURCE: https://github.com/xyflow/web/blob/main/sites/reactflow.dev/src/content/learn/customization/custom-nodes.mdx#2025-04-23_snippet_2\n\nLANGUAGE: jsx\nCODE:\n```\nconst nodeTypes = useMemo(() => ({ textUpdater: TextUpdaterNode }), []);\n\nreturn <ReactFlow nodeTypes={nodeTypes} />;\n```\n\n----------------------------------------\n\nTITLE: Implementing Custom Edge with EdgeLabelRenderer in React\nDESCRIPTION: Example of creating a custom edge component using EdgeLabelRenderer to display a div-based label. The component uses getBezierPath for path calculation and positions the label absolutely using transform translations. It includes styling for the label with background, padding, and font specifications.\nSOURCE: https://github.com/xyflow/web/blob/main/sites/reactflow.dev/src/content/api-reference/components/edge-label-renderer.mdx#2025-04-23_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport React from 'react';\nimport { getBezierPath, EdgeLabelRenderer, BaseEdge } from '@xyflow/react';\n\nconst CustomEdge = ({ id, data, ...props }) => {\n  const [edgePath, labelX, labelY] = getBezierPath(props);\n\n  return (\n    <>\n      <BaseEdge id={id} path={edgePath} />\n      <EdgeLabelRenderer>\n        <div\n          style={{\n            position: 'absolute',\n            transform: `translate(-50%, -50%) translate(${labelX}px,${labelY}px)`,\n            background: '#ffcc00',\n            padding: 10,\n            borderRadius: 5,\n            fontSize: 12,\n            fontWeight: 700,\n          }}\n          className=\"nodrag nopan\"\n        >\n          {data.label}\n        </div>\n      </EdgeLabelRenderer>\n    </>\n  );\n};\n\nexport default CustomEdge;\n```\n\n----------------------------------------\n\nTITLE: Setting Default Edge Options via ReactFlow Prop (JSX)\nDESCRIPTION: Shows an alternative method for applying default options to newly created edges using the `defaultEdgeOptions` prop on the `ReactFlow` component. An options object (here, `{ animated: true }`) is defined and passed to this prop. Any edge created through user interaction (connecting nodes) will automatically inherit these default options, simplifying customization compared to adding options within the `onConnect` handler.\nSOURCE: https://github.com/xyflow/web/blob/main/sites/reactflow.dev/src/content/learn/concepts/core-concepts.mdx#2025-04-23_snippet_2\n\nLANGUAGE: jsx\nCODE:\n```\nconst defaultEdgeOptions = { animated: true };\n...\n<ReactFlow\n  nodes={nodes}\n  edges={edges}\n  onNodesChange={onNodesChange}\n  onEdgesChange={onEdgesChange}\n  onConnect={onConnect}\n  defaultEdgeOptions={defaultEdgeOptions}\n/>;\n```\n\n----------------------------------------\n\nTITLE: Importing React Flow Component and Styles (JavaScript)\nDESCRIPTION: Imports the main `ReactFlow` component and the necessary CSS styles from the `@xyflow/react` package into a JavaScript/React application. This is typically done in the main application file or a specific component where the flow diagram will be rendered. Assumes `@xyflow/react` has been previously installed.\nSOURCE: https://github.com/xyflow/web/blob/main/sites/reactflow.dev/src/content/learn/getting-started/installation-and-requirements.mdx#2025-04-23_snippet_4\n\nLANGUAGE: js\nCODE:\n```\nimport { ReactFlow } from '@xyflow/react';\nimport '@xyflow/react/dist/style.css';\n```\n\n----------------------------------------\n\nTITLE: Using Handle Component in Custom Node in React Flow\nDESCRIPTION: This snippet demonstrates how to use the Handle component in a custom node definition. It shows how to add both source and target handles on the left and right sides of a node.\nSOURCE: https://github.com/xyflow/web/blob/main/sites/reactflow.dev/src/content/api-reference/components/handle.mdx#2025-04-23_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport { Handle, Position } from '@xyflow/react';\n\nexport const CustomNode = ({ data }) => {\n  return (\n    <>\n      <div style={{ padding: '10px 20px' }}>\n        {data.label}\n      </div>\n\n      <Handle type=\"target\" position={Position.Left} />\n      <Handle type=\"source\" position={Position.Right} />\n    </>\n  );\n};\n```\n\n----------------------------------------\n\nTITLE: Registering Custom Node and Edge Types in React Flow - TSX\nDESCRIPTION: This code initializes custom node and edge types for React Flow by importing and mapping the MindMapNode and MindMapEdge components. The nodeTypes and edgeTypes objects are configured and passed to React Flow, enabling the rendering of custom nodes and edges. Prerequisites: MindMapNode and MindMapEdge must be implemented and exported. Inputs are component references; output is a config object for React Flow. There are no parameters or complex constraints.\nSOURCE: https://github.com/xyflow/web/blob/main/sites/reactflow.dev/src/content/learn/tutorials/mind-map-app-with-react-flow.mdx#2025-04-23_snippet_11\n\nLANGUAGE: tsx\nCODE:\n```\nimport MindMapNode from './MindMapNode';\nimport MindMapEdge from './MindMapEdge';\n\nconst nodeTypes = {\n  mindmap: MindMapNode,\n};\n\nconst edgeTypes = {\n  mindmap: MindMapEdge,\n};\n```\n\n----------------------------------------\n\nTITLE: Triggering Child Node Creation from Pane Drop - TSX\nDESCRIPTION: Extends onConnectEnd handling by retrieving parent node info from the store, computing the intended position for the child node with getChildNodePosition, and invoking addChildNode. Uses React Flow's internal nodeLookup and a computed helper, ensuring interactive node addition on drag-release. Dependencies: useStoreApi, getChildNodePosition, and addChildNode must be available. Inputs are event and connected node, output is node and edge state mutation.\nSOURCE: https://github.com/xyflow/web/blob/main/sites/reactflow.dev/src/content/learn/tutorials/mind-map-app-with-react-flow.mdx#2025-04-23_snippet_14\n\nLANGUAGE: tsx\nCODE:\n```\nconst store = useStoreApi();\n\nconst onConnectEnd: OnConnectEnd = useCallback(\n  (event) => {\n    const { nodeLookup } = store.getState();\n    const targetIsPane = (event.target as Element).classList.contains('react-flow__pane');\n\n    if (targetIsPane && connectingNodeId.current) {\n      const parentNode = nodeLookup.get(connectingNodeId.current);\n      const childNodePosition = getChildNodePosition(event, parentNode);\n\n      if (parentNode && childNodePosition) {\n        addChildNode(parentNode, childNodePosition);\n      }\n    }\n  },\n  [getChildNodePosition],\n);\n```\n\n----------------------------------------\n\nTITLE: Defining a Custom Slide Node Component in React (TSX)\nDESCRIPTION: This code defines a custom React Flow node component named `Slide`. It establishes constants for slide dimensions (`SLIDE_WIDTH`, `SLIDE_HEIGHT`), defines TypeScript types for the node (`SlideNode`) and its data (`SlideData`), and renders a basic `article` element representing a slide. The `nodrag` class prevents dragging the node itself, and inline styles set the dimensions.\nSOURCE: https://github.com/xyflow/web/blob/main/sites/reactflow.dev/src/content/learn/tutorials/slide-shows-with-react-flow.mdx#2025-04-23_snippet_3\n\nLANGUAGE: tsx\nCODE:\n```\nimport { type Node, type NodeProps } from '@xyflow/react';\n\nexport const SLIDE_WIDTH = 1920;\nexport const SLIDE_HEIGHT = 1080;\n\nexport type SlideNode = Node<SlideData, 'slide'>;\n\nexport type SlideData = {};\n\nconst style = {\n  width: `${SLIDE_WIDTH}px`,\n  height: `${SLIDE_HEIGHT}px`,\n} satisfies React.CSSProperties;\n\nexport function Slide({ data }: NodeProps<SlideNode>) {\n  return (\n    <article className=\"slide nodrag\" style={style}>\n      <div>Hello, React Flow!</div>\n    </article>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Importing ReactFlow and State Management Helpers in JavaScript\nDESCRIPTION: This snippet imports the necessary dependencies for interactive React Flow diagrams using JavaScript. It brings in React\\'s useState and useCallback hooks for state management, as well as ReactFlow and functions for applying node and edge changes. These imports are prerequisites for managing interactivity and state updates in a React Flow implementation.\nSOURCE: https://github.com/xyflow/web/blob/main/sites/reactflow.dev/src/content/learn/getting-started/adding-interactivity.mdx#2025-04-23_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport { useState, useCallback } from 'react';\nimport { ReactFlow, applyEdgeChanges, applyNodeChanges } from '@xyflow/react';\n```\n\n----------------------------------------\n\nTITLE: Implementing NodeResizer in a Custom Svelte Node Component\nDESCRIPTION: A basic implementation of a custom node with the NodeResizer component. This sets minimum width and height constraints while adding handle points for connections on the left and right sides of the node.\nSOURCE: https://github.com/xyflow/web/blob/main/sites/svelteflow.dev/src/content/api-reference/components/node-resizer.mdx#2025-04-23_snippet_0\n\nLANGUAGE: svelte\nCODE:\n```\n<script lang=\"ts\">\n  import { Handle, Position, NodeResizer } from '@xyflow/svelte';\n\n  export let data;\n</script>\n\n<NodeResizer minWidth={100} minHeight={30} />\n<Handle type=\"target\" position={Position.Left} />\n<div style={{ padding: 10 }}>{data.label}</div>\n<Handle type=\"source\" position={Position.Right} />\n```\n\n----------------------------------------\n\nTITLE: Removing and Cleaning Up Web Audio Nodes in JavaScript\nDESCRIPTION: Defines a function `removeAudioNode` that handles the removal of a Web Audio node. It retrieves the node by its `id` from the `nodes` Map, disconnects it from other nodes, calls its `stop` method if available (relevant for nodes like Oscillators), and finally removes it from the `nodes` Map.\nSOURCE: https://github.com/xyflow/web/blob/main/sites/reactflow.dev/src/content/learn/tutorials/react-flow-and-the-web-audio-api.mdx#2025-04-23_snippet_18\n\nLANGUAGE: js\nCODE:\n```\nexport function removeAudioNode(id) {\n  const node = nodes.get(id);\n\n  node.disconnect();\n  node.stop?.();\n\n  nodes.delete(id);\n}\n```\n\n----------------------------------------\n\nTITLE: Updating Nodes in an Uncontrolled React Flow using useReactFlow in React\nDESCRIPTION: Demonstrates how to add a new node to an uncontrolled React Flow instance. Since direct state manipulation isn't possible, it uses the `useReactFlow` hook (requiring the component to be wrapped in `ReactFlowProvider`) to access the React Flow instance and calls the `addNodes` function to modify the internal state.\nSOURCE: https://github.com/xyflow/web/blob/main/sites/reactflow.dev/src/content/learn/advanced-use/uncontrolled-flow.mdx#2025-04-23_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\n<RemoteCodeViewer route=\"learn/uncontrolled-2\" framework=\"react\" />\n```\n\n----------------------------------------\n\nTITLE: Adding a MiniMap to React Flow in React\nDESCRIPTION: Demonstrates how to add the MiniMap component to a React Flow instance by including it as a child within the main ReactFlow component. The MiniMap provides a small overview of the entire flow, useful for navigation in large graphs.\nSOURCE: https://github.com/xyflow/web/blob/main/sites/reactflow.dev/src/content/learn/concepts/built-in-components.mdx#2025-04-23_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\n<RemoteCodeViewer route=\"learn/mini-map\" framework=\"react\" />\n```\n\n----------------------------------------\n\nTITLE: Importing Styles for React Flow with Tailwind\nDESCRIPTION: This code snippet demonstrates the correct order for importing React Flow and Tailwind CSS styles to ensure proper overriding of default styles.\nSOURCE: https://github.com/xyflow/web/blob/main/sites/reactflow.dev/src/content/learn/customization/theming.mdx#2025-04-23_snippet_8\n\nLANGUAGE: javascript\nCODE:\n```\nimport '@xyflow/react/dist/style.css';\nimport 'tailwind.css';\n```\n\n----------------------------------------\n\nTITLE: Rendering a Remote React Example with RemoteCodeViewer (React, JSX)\nDESCRIPTION: This snippet embeds a remote example into the documentation using the RemoteCodeViewer React component. It is configured to fetch and display the example at the specified route ('examples/misc/overview') with the React framework, and disables the code editor by setting showEditor to false. The required dependency is the properly imported RemoteCodeViewer component, and the file system or API serving the remote example must be accessible. The key parameters are 'route' (which selects the example), 'framework' (defines the code context), and 'showEditor' (controls editor visibility). The output is a rendered component displaying the example, intended for demonstration without live editing capability.\nSOURCE: https://github.com/xyflow/web/blob/main/sites/reactflow.dev/src/content/whats-new/2024-05-06.mdx#2025-04-23_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\n<RemoteCodeViewer\n  route=\"examples/misc/overview\"\n  framework=\"react\"\n  showEditor={false}\n/>\n```\n\n----------------------------------------\n\nTITLE: Using useNodesState and useEdgesState with ReactFlow in JSX\nDESCRIPTION: This snippet demonstrates how to use the useNodesState and useEdgesState hooks to manage nodes and edges state outside of ReactFlowInstance. It initializes empty arrays for nodes and edges, then uses the hooks to create state and change handlers.\nSOURCE: https://github.com/xyflow/web/blob/main/sites/reactflow.dev/src/content/api-reference/hooks/use-nodes-state.mdx#2025-04-23_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport { ReactFlow, useNodesState, useEdgesState } from '@xyflow/react';\n\nconst initialNodes = [];\nconst initialEdges = [];\n\nexport default function () {\n  const [nodes, setNodes, onNodesChange] = useNodesState(initialNodes);\n  const [edges, setEdges, onEdgesChange] = useEdgesState(initialEdges);\n\n  return (\n    <ReactFlow\n      nodes={nodes}\n      edges={edges}\n      onNodesChange={onNodesChange}\n      onEdgesChange={onEdgesChange}\n    />\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Overriding Default React Flow CSS Variables using CSS\nDESCRIPTION: Illustrates how to customize the default appearance by overriding a specific React Flow CSS variable. This example changes the default background color for nodes by setting `--xy-node-background-color-default` within the `.react-flow` scope.\nSOURCE: https://github.com/xyflow/web/blob/main/sites/reactflow.dev/src/content/learn/customization/theming.mdx#2025-04-23_snippet_4\n\nLANGUAGE: css\nCODE:\n```\n.react-flow {\n  --xy-node-background-color-default: #ff5050;\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Change Handlers for Nodes and Edges in JavaScript\nDESCRIPTION: These functions establish handlers for changes to nodes and edges using React\\'s useCallback. They update the state by applying the respective changes to the existing node or edge arrays with helper functions from React Flow. These handlers must be passed to the ReactFlow component contexts to enable live updates as users interact with the diagram.\nSOURCE: https://github.com/xyflow/web/blob/main/sites/reactflow.dev/src/content/learn/getting-started/adding-interactivity.mdx#2025-04-23_snippet_2\n\nLANGUAGE: JavaScript\nCODE:\n```\nconst onNodesChange = useCallback(\n  (changes) => setNodes((nds) => applyNodeChanges(changes, nds)),\n  [],\n);\nconst onEdgesChange = useCallback(\n  (changes) => setEdges((eds) => applyEdgeChanges(changes, eds)),\n  [],\n);\n```\n\n----------------------------------------\n\nTITLE: Adding New Nodes to Zustand Store and Web Audio Context in JavaScript\nDESCRIPTION: Implements a `createNode` action in a Zustand store for adding new nodes. It generates a unique `id` using `nanoid`, sets up default `data` and `position` based on the requested `type` ('osc' or 'amp'), calls the external `createAudioNode` function to instantiate the actual Web Audio node, and finally updates the store's `nodes` array with the new node's definition.\nSOURCE: https://github.com/xyflow/web/blob/main/sites/reactflow.dev/src/content/learn/tutorials/react-flow-and-the-web-audio-api.mdx#2025-04-23_snippet_26\n\nLANGUAGE: js\nCODE:\n```\nimport { ..., createAudioNode } from './audio';\n\nexport const useStore = createWithEqualityFn((set, get) => ({\n  ...\n\n  createNode(type) {\n    const id = nanoid();\n\n    switch(type) {\n      case 'osc': {\n        const data = { frequency: 440, type: 'sine' };\n        const position = { x: 0, y: 0 };\n\n        createAudioNode(id, type, data);\n        set({ nodes: [...get().nodes, { id, type, data, position }] });\n\n        break;\n      }\n\n      case 'amp': {\n        const data = { gain: 0.5 };\n        const position = { x: 0, y: 0 };\n\n        createAudioNode(id, type, data);\n        set({ nodes: [...get().nodes, { id, type, data, position }] });\n\n        break;\n      }\n    }\n  }\n}));\n```\n\n----------------------------------------\n\nTITLE: Enhancing React Flow with Plugins: Controls, MiniMap, Background - React (JSX)\nDESCRIPTION: Shows how to augment an interactive React Flow diagram by adding in core plugins such as Controls, MiniMap, and Background for improved user navigation and visualization. Requires @xyflow/react and its stylesheet, with additional plugin imports. The code handles state for nodes and edges, link creation, and renders auxiliary UI elements inside the <ReactFlow /> component. Parameters include the initial state values and plugin props; outputs are enhanced flow diagrams with improved usability. Limitations: requires container sizing and plugin order awareness within ReactFlow.\nSOURCE: https://github.com/xyflow/web/blob/main/sites/reactflow.dev/src/content/learn/index.mdx#2025-04-23_snippet_5\n\nLANGUAGE: jsx\nCODE:\n```\nimport React, { useCallback } from 'react';\nimport {\n  ReactFlow,\n  MiniMap,\n  Controls,\n  Background,\n  useNodesState,\n  useEdgesState,\n  addEdge,\n} from '@xyflow/react';\n\nimport '@xyflow/react/dist/style.css';\n\nconst initialNodes = [\n  { id: '1', position: { x: 0, y: 0 }, data: { label: '1' } },\n  { id: '2', position: { x: 0, y: 100 }, data: { label: '2' } },\n];\nconst initialEdges = [{ id: 'e1-2', source: '1', target: '2' }];\n\nexport default function App() {\n  const [nodes, setNodes, onNodesChange] = useNodesState(initialNodes);\n  const [edges, setEdges, onEdgesChange] = useEdgesState(initialEdges);\n\n  const onConnect = useCallback(\n    (params) => setEdges((eds) => addEdge(params, eds)),\n    [setEdges],\n  );\n\n  return (\n    <div style={{ width: '100vw', height: '100vh' }}>\n      <ReactFlow\n        nodes={nodes}\n        edges={edges}\n        onNodesChange={onNodesChange}\n        onEdgesChange={onEdgesChange}\n        onConnect={onConnect}\n      >\n        <Controls />\n        <MiniMap />\n        <Background variant=\"dots\" gap={12} size={1} />\n      </ReactFlow>\n    </div>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Navigating to Connected Slide Using fitView - React Flow - TypeScript\nDESCRIPTION: This snippet implements the moveToNextSlide function to trigger navigation to a slide by calling fitView with the required node id. By using useReactFlow to access fitView and useCallback for memoization, it ensures efficient updates. The Slide component can now focus the view on a connected slide given its id. Inputs include the connected slide id, and outputs is an updated React Flow view. Depends on @xyflow/react and hooks.\nSOURCE: https://github.com/xyflow/web/blob/main/sites/reactflow.dev/src/content/learn/tutorials/slide-shows-with-react-flow.mdx#2025-04-23_snippet_13\n\nLANGUAGE: tsx\nCODE:\n```\nimport { type NodeProps, useReactFlow } from '@xyflow/react';\n\nexport function Slide({ data }: NodeProps<SlideNide>) {\n  const { fitView } = useReactFlow();\n\n  const moveToNextSlide = useCallback(\n    (id: string) => fitView({ nodes: [{ id }] }),\n    [fitView],\n  );\n\n  return (\n    <article className=\"slide\" style={style}>\n      ...\n    </article>\n  );\n}\n\n```\n\n----------------------------------------\n\nTITLE: Creating and Connecting Web Audio Nodes (JavaScript)\nDESCRIPTION: Initializes a Web Audio `AudioContext`, creates an `OscillatorNode` for tone generation and a `GainNode` for volume control. It demonstrates connecting these nodes sequentially (oscillator -> gain -> destination/speakers) and starting the oscillator node, which is necessary for sound generation.\nSOURCE: https://github.com/xyflow/web/blob/main/sites/reactflow.dev/src/content/learn/tutorials/react-flow-and-the-web-audio-api.mdx#2025-04-23_snippet_1\n\nLANGUAGE: js\nCODE:\n```\n// Create the brain of our audio-processing graph\nconst context = new AudioContext();\n\n// Create an oscillator node to generate tones\nconst osc = context.createOscillator();\n\n// Create a gain node to control the volume\nconst amp = context.createGain();\n\n// Pass the oscillator's output through the gain node and to our speakers\nosc.connect(amp);\namp.connect(context.destination);\n\n// Start generating those tones!\nosc.start();\n```\n\n----------------------------------------\n\nTITLE: Creating uncontrolled React Flow with defaultNodes/defaultEdges (v10) - React (JSX)\nDESCRIPTION: This code provides a minimal example of using the `defaultNodes` and `defaultEdges` props to quickly initialize an interactive, uncontrolled React Flow instance. No explicit change handlers or state tracking are needed; React Flow manages interactions internally. Inputs are static arrays of nodes and edges, output is a UI component. Suitable for simple cases, but mutations to the flow require using the React Flow instance via hooks or handlers.\nSOURCE: https://github.com/xyflow/web/blob/main/sites/reactflow.dev/src/content/learn/troubleshooting/migrate-to-v10.mdx#2025-04-23_snippet_3\n\nLANGUAGE: jsx\nCODE:\n```\nimport ReactFlow from 'react-flow-renderer';\\n\\nconst defaultNodes = [\\n  { id: '1', data: { label: 'Node 1' }, position: { x: 250, y: 0 } },\\n  { id: '2', data: { label: 'Node 2' }, position: { x: 150, y: 100 } },\\n];\\n\\nconst defaultEdges = [{ id: 'e1-2', source: '1', target: '2' }];\\n\\nconst BasicFlow = () => {\\n  return <ReactFlow defaultNodes={defaultNodes} defaultEdges={defaultEdges} />;\\n};\\n\\nexport default BasicFlow;\n```\n\n----------------------------------------\n\nTITLE: Implementing Basic Flow Control with useEdgesState in React Flow\nDESCRIPTION: Demonstrates how to implement basic flow control using useNodesState and useEdgesState hooks. The example shows initialization of empty nodes and edges arrays and setting up basic ReactFlow component with state management.\nSOURCE: https://github.com/xyflow/web/blob/main/sites/reactflow.dev/src/content/api-reference/hooks/use-edges-state.mdx#2025-04-23_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport { ReactFlow, useNodesState, useEdgesState } from '@xyflow/react';\n\nconst initialNodes = [];\nconst initialEdges = [];\n\nexport default function () {\n  const [nodes, setNodes, onNodesChange] = useNodesState(initialNodes);\n  const [edges, setEdges, onEdgesChange] = useEdgesState(initialEdges);\n\n  return (\n    <ReactFlow\n      nodes={nodes}\n      edges={edges}\n      onNodesChange={onNodesChange}\n      onEdgesChange={onEdgesChange}\n    />\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a Zustand Store for React Flow State (TypeScript)\nDESCRIPTION: Sets up a Zustand store (`src/App/store.ts`) to manage the state of nodes and edges for the React Flow application. It defines the state shape (`RFState`), provides initial state with a single root node, and implements `onNodesChange` and `onEdgesChange` handlers using React Flow's `applyNodeChanges` and `applyEdgeChanges` utilities to update the state immutably.\nSOURCE: https://github.com/xyflow/web/blob/main/sites/reactflow.dev/src/content/learn/tutorials/mind-map-app-with-react-flow.mdx#2025-04-23_snippet_6\n\nLANGUAGE: ts\nCODE:\n```\nimport {\n  Edge,\n  EdgeChange,\n  Node,\n  NodeChange,\n  OnNodesChange,\n  OnEdgesChange,\n  applyNodeChanges,\n  applyEdgeChanges,\n} from '@xyflow/react';\nimport { createWithEqualityFn } from 'zustand/traditional';\n\nexport type RFState = {\n  nodes: Node[];\n  edges: Edge[];\n  onNodesChange: OnNodesChange;\n  onEdgesChange: OnEdgesChange;\n};\n\nconst useStore = createWithEqualityFn<RFState>((set, get) => ({\n  nodes: [\n    {\n      id: 'root',\n      type: 'mindmap',\n      data: { label: 'React Flow Mind Map' },\n      position: { x: 0, y: 0 },\n    },\n  ],\n  edges: [],\n  onNodesChange: (changes: NodeChange[]) => {\n    set({\n      nodes: applyNodeChanges(changes, get().nodes),\n    });\n  },\n  onEdgesChange: (changes: EdgeChange[]) => {\n    set({\n      edges: applyEdgeChanges(changes, get().edges),\n    });\n  },\n}));\n\nexport default useStore;\n```\n\n----------------------------------------\n\nTITLE: Implementing Selection Change Listener with useOnSelectionChange in React\nDESCRIPTION: This snippet demonstrates how to use the useOnSelectionChange hook to track selected nodes and edges in a React component. It utilizes useState for state management and useCallback for memoization of the onChange handler.\nSOURCE: https://github.com/xyflow/web/blob/main/sites/reactflow.dev/src/content/api-reference/hooks/use-on-selection-change.mdx#2025-04-23_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport { useState } from 'react';\nimport { ReactFlow, useOnSelectionChange } from '@xyflow/react';\n\nfunction SelectionDisplay() {\n  const [selectedNodes, setSelectedNodes] = useState([]);\n  const [selectedEdges, setSelectedEdges] = useState([]);\n\n  // the passed handler has to be memoized, otherwise the hook will not work correctly\n  const onChange = useCallback(({ nodes, edges }) => {\n    setSelectedNodes(nodes.map((node) => node.id));\n    setSelectedEdges(edges.map((edge) => edge.id));\n  }, []);\n\n  useOnSelectionChange({\n    onChange,\n  });\n\n  return (\n    <div>\n      <p>Selected nodes: {selectedNodes.join(', ')}</p>\n      <p>Selected edges: {selectedEdges.join(', ')}</p>\n    </div>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Adding Interactive Edge Labels with React Flow (JSX)\nDESCRIPTION: Enhances the custom edge by adding a delete button rendered with EdgeLabelRenderer, enabling users to remove edges interactively. Relies on the useReactFlow hook for modifying the edges state and requires React Flow's context to be available. Button rendering must account for user interaction and positioning logic to ensure the control is accessible and not obscured by other elements.\nSOURCE: https://github.com/xyflow/web/blob/main/sites/reactflow.dev/src/content/learn/customization/custom-edges.mdx#2025-04-23_snippet_2\n\nLANGUAGE: jsx\nCODE:\n```\nimport {\\n  BaseEdge,\\n  EdgeLabelRenderer,\\n  getStraightPath,\\n  useReactFlow,\\n} from '@xyflow/react';\\n\\nexport default function CustomEdge({ id, sourceX, sourceY, targetX, targetY }) {\\n  const { setEdges } = useReactFlow();\\n  const [edgePath] = getStraightPath({\\n    sourceX,\\n    sourceY,\\n    targetX,\\n    targetY,\\n  });\\n\\n  return (\\n    <>\\n      <BaseEdge id={id} path={edgePath} />\\n      <EdgeLabelRenderer>\\n        <button\\n          onClick={() => setEdges((edges) => edges.filter((e) => e.id !== id))}\\n        >\\n          delete\\n        </button>\\n      </EdgeLabelRenderer>\\n    </>\\n  );\\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing a Counter Custom Node with NodeProps (React, TSX)\nDESCRIPTION: Demonstrates how to implement a custom CounterNode component in React using the NodeProps type from XYFlow, allowing for stateful logic and rendering based on node data. The component reads initialCount from props.data and provides a UI with stateful increment functionality. Dependencies include React, XYFlow, and relevant type imports; props ensure access to all required node information, enabling dynamic and interactive node behavior.\nSOURCE: https://github.com/xyflow/web/blob/main/sites/reactflow.dev/src/content/api-reference/types/node-props.mdx#2025-04-23_snippet_1\n\nLANGUAGE: TSX\nCODE:\n```\nimport { useState } from 'react';\nimport { NodeProps, Node } from '@xyflow/react';\n\nexport type CounterNode = Node<\n  {\n    initialCount?: number;\n  },\n  'counter'\n>;\n\nexport default function CounterNode(props: NodeProps<CounterNode>) {\n  const [count, setCount] = useState(props.data?.initialCount ?? 0);\n\n  return (\n    <div>\n      <p>Count: {count}</p>\n      <button className=\"nodrag\" onClick={() => setCount(count + 1)}>\n        Increment\n      </button>\n    </div>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Initializing the Main React Flow Component (TypeScript)\nDESCRIPTION: Defines the initial `Flow` component in `src/App/index.tsx`. It renders a basic `ReactFlow` canvas, includes standard `Controls`, and displays a title using the `Panel` component. It also imports the necessary React Flow CSS styles but doesn't yet manage or display nodes/edges.\nSOURCE: https://github.com/xyflow/web/blob/main/sites/reactflow.dev/src/content/learn/tutorials/mind-map-app-with-react-flow.mdx#2025-04-23_snippet_3\n\nLANGUAGE: tsx\nCODE:\n```\nimport { ReactFlow, Controls, Panel } from '@xyflow/react';\n\n// we have to import the React Flow styles for it to work\nimport '@xyflow/react/dist/style.css';\n\nfunction Flow() {\n  return (\n    <ReactFlow>\n      <Controls showInteractive={false} />\n      <Panel position=\"top-left\">React Flow Mind Map</Panel>\n    </ReactFlow>\n  );\n}\n\nexport default Flow;\n```\n\n----------------------------------------\n\nTITLE: Adding a Panel Overlay to React Flow in React\nDESCRIPTION: Explains how to use the Panel component to display custom content (like buttons or information) overlaid on top of the React Flow viewport. The Panel component allows positioning content at different corners or edges of the flow area.\nSOURCE: https://github.com/xyflow/web/blob/main/sites/reactflow.dev/src/content/learn/concepts/built-in-components.mdx#2025-04-23_snippet_3\n\nLANGUAGE: jsx\nCODE:\n```\n<RemoteCodeViewer route=\"learn/panel\" framework=\"react\" />\n```\n\n----------------------------------------\n\nTITLE: Setting up nodes/edges state with useNodesState and useEdgesState - React (JS)\nDESCRIPTION: This snippet shows how to use the new React Flow hooks `useNodesState` and `useEdgesState` for concise state management of nodes and edges. These hooks return state, setters, and pre-bound change handlers, streamlining controlled flow logic. Inputs are initial node/edge arrays; outputs include bound state and handlers for React Flow components. Requires React Flow v10+.\nSOURCE: https://github.com/xyflow/web/blob/main/sites/reactflow.dev/src/content/learn/troubleshooting/migrate-to-v10.mdx#2025-04-23_snippet_2\n\nLANGUAGE: js\nCODE:\n```\nconst [nodes, setNodes, onNodesChange] = useNodesState(initialNodes);\\nconst [edges, setEdges, onEdgesChange] = useEdgesState(initialEdges);\n```\n\n----------------------------------------\n\nTITLE: Updating Node Internals with React Flow Hook in JavaScript\nDESCRIPTION: This snippet demonstrates how to use the useUpdateNodeInternals hook from the @xyflow/react library to programmatically manage and update handles on a React Flow node. The RandomHandleNode component allows users to randomize the count of handles, updating the node internals each time this happens. Dependencies include React, @xyflow/react, and the component must be rendered within a <ReactFlowProvider /> or <ReactFlow /> context. The key parameter is id (for the node), and the expected input is user interaction with a button to change the number of handles; output is a dynamically rendered node with the correct number of handles, internally synced with React Flow.\nSOURCE: https://github.com/xyflow/web/blob/main/sites/reactflow.dev/src/content/api-reference/hooks/use-update-node-internals.mdx#2025-04-23_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport { useCallback, useState } from 'react';\\nimport { Handle, useUpdateNodeInternals } from '@xyflow/react';\\n\\nexport default function RandomHandleNode({ id }) {\\n  const updateNodeInternals = useUpdateNodeInternals();\\n  const [handleCount, setHandleCount] = useState(0);\\n  const randomizeHandleCount = useCallback(() => {\\n    setHandleCount(Math.floor(Math.random() * 10));\\n    updateNodeInternals(id);\\n  }, [id, updateNodeInternals]);\\n\\n  return (\\n    <>\\n      {Array.from({ length: handleCount }).map((_, index) => (\\n        <Handle\\n          key={index}\\n          type=\\\"target\\\"\\n          position=\\\"left\\\"\\n          id={`handle-${index}`}\\n        />\\n      ))}\\n\\n      <div>\\n        <button onClick={randomizeHandleCount}>Randomize handle count</button>\\n        <p>There are {handleCount} handles on this node.</p>\\n      </div>\\n    </>\\n  );\\n}\n```\n\n----------------------------------------\n\nTITLE: Defining the BezierEdge (Default) Type Structure in React Flow (TypeScript)\nDESCRIPTION: Describes the type structure for a `BezierEdge`, which corresponds to the \"default\" edge type in React Flow. It requires the `type` property to be \"default\" (or omitted) and permits optional `pathOptions` to adjust the curve's `curvature`. This defines properties specific to the default Bézier curve edge.\nSOURCE: https://github.com/xyflow/web/blob/main/sites/reactflow.dev/src/content/api-reference/types/edge.mdx#2025-04-23_snippet_2\n\nLANGUAGE: ts\nCODE:\n```\ntype $ = {\n  type: \"default\"\n  pathOptions?: { curvature?: number }\n}\nexport default $\n```\n\n----------------------------------------\n\nTITLE: Using addEdge Utility in ReactFlow Diagram - JavaScript\nDESCRIPTION: This code snippet defines a React component that imports ReactFlow and the addEdge utility from @xyflow/react to efficiently manage node and edge states within a flowchart UI. The onConnect handler uses useCallback to ensure a new connection only adds a valid and non-duplicate edge, updating the state by passing the new connection object and existing edges to addEdge. Dependencies include the React library and @xyflow/react; inputs are user-driven connections, and outputs are updated node and edge arrays. The addEdge utility validates connections, preventing duplicate or invalid edges being added, regardless of differing IDs.\nSOURCE: https://github.com/xyflow/web/blob/main/sites/reactflow.dev/src/content/api-reference/utils/add-edge.mdx#2025-04-23_snippet_0\n\nLANGUAGE: js\nCODE:\n```\nimport { useCallback } from 'react';\\nimport {\\n  ReactFlow,\\n  addEdge,\\n  useNodesState,\\n  useEdgesState,\\n} from '@xyflow/react';\\n\\nexport default function Flow() {\\n  const [nodes, setNodes, onNodesChange] = useNodesState([]);\\n  const [edges, setEdges, onEdgesChange] = useEdgesState([]);\\n  const onConnect = useCallback(\\n    (connection) => {\\n      setEdges((oldEdges) => addEdge(connection, oldEdges));\\n    },\\n    [setEdges],\\n  );\\n\\n  return <ReactFlow nodes={nodes} edges={edges} onConnect={onConnect} />;\\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Custom Context Menu for Nodes in React Flow\nDESCRIPTION: This code snippet demonstrates how to use the onNodeContextMenu event to display a custom context menu when right-clicking a node in React Flow. The menu includes options to duplicate or delete the clicked node.\nSOURCE: https://github.com/xyflow/web/blob/main/apps/example-apps/react/examples/interaction/context-menu/README.mdx#2025-04-23_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\n<RemoteCodeViewer route=\"examples/interaction/context-menu\" framework=\"react\" />\n```\n\n----------------------------------------\n\nTITLE: Defining a Custom Mind Map Node Component (TypeScript)\nDESCRIPTION: Creates a custom React Flow node component (`src/App/MindMapNode/index.tsx`) named `MindMapNode`. This component renders an `<input>` element to display and edit the node's label (obtained from `data.label`). It includes top (`target`) and bottom (`source`) `Handle` components, which define the connection points for edges.\nSOURCE: https://github.com/xyflow/web/blob/main/sites/reactflow.dev/src/content/learn/tutorials/mind-map-app-with-react-flow.mdx#2025-04-23_snippet_8\n\nLANGUAGE: tsx\nCODE:\n```\nimport { Handle, NodeProps, Position } from '@xyflow/react';\n\nexport type NodeData = {\n  label: string;\n};\n\nfunction MindMapNode({ id, data }: NodeProps<NodeData>) {\n  return (\n    <>\n      <input defaultValue={data.label} />\n\n      <Handle type=\"target\" position={Position.Top} />\n      <Handle type=\"source\" position={Position.Bottom} />\n    </>\n  );\n}\n\nexport default MindMapNode;\n```\n\n----------------------------------------\n\nTITLE: Integrating Web Audio Connection into Zustand addEdge Action in JavaScript\nDESCRIPTION: Updates the `addEdge` action within a Zustand store. After updating the store's state with the new edge data, it calls the external `connect` function, passing the `source` and `target` IDs from the edge data. This establishes the corresponding Web Audio connection when an edge is added in the application state.\nSOURCE: https://github.com/xyflow/web/blob/main/sites/reactflow.dev/src/content/learn/tutorials/react-flow-and-the-web-audio-api.mdx#2025-04-23_snippet_22\n\nLANGUAGE: js\nCODE:\n```\nimport { ..., connect } from './audio';\n\nexport const useStore = createWithEqualityFn((set, get) => ({\n  ...\n\n  addEdge(data) {\n    ...\n\n    connect(data.source, data.target);\n  },\n\n  ...\n}));\n```\n\n----------------------------------------\n\nTITLE: Defining the OnEdgesChange Type in TypeScript\nDESCRIPTION: This TypeScript type definition outlines the structure for the `onEdgesChange` callback function used in React Flow. It accepts an array of `EdgeChange` objects, representing modifications to edges, and returns nothing (`void`). The type is generic, allowing customization with specific `EdgeType` unions for enhanced type safety.\nSOURCE: https://github.com/xyflow/web/blob/main/sites/reactflow.dev/src/content/api-reference/types/on-edges-change.mdx#2025-04-23_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nexport type OnEdgesChange<EdgeType extends Edge = Edge> = (\n  changes: EdgeChange<EdgeType>[],\n) => void;\n```\n\n----------------------------------------\n\nTITLE: Adding Edge Using XYFlow Svelte Integration\nDESCRIPTION: Example demonstrating how to use the addEdge() utility function with Svelte stores to add a new edge to an existing array of edges. The function ensures edge validity and prevents duplicates based on source and target combinations.\nSOURCE: https://github.com/xyflow/web/blob/main/sites/svelteflow.dev/src/content/api-reference/utils/add-edge.mdx#2025-04-23_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport { writable } from 'svelte/store';\nimport { addEdge } from '@xyflow/svelte';\n\nconst edges = writable([]);\n\nconst onAddEdge = () => {\n  const newEdge = {\n    id: '1-2',\n    source: '1',\n    target: '2'\n  };\n  $edges = addEdge(newEdge, $edges);\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Custom Node Types in TypeScript (v12 API)\nDESCRIPTION: Demonstrates the recommended way to define custom node types in TypeScript for React Flow v12. It uses a union type (`AppNode`) combining specific node types (`NumberNode`, `TextNode`) derived from the base `Node` type, allowing for type-safe data structures per node type.\nSOURCE: https://github.com/xyflow/web/blob/main/sites/reactflow.dev/src/content/learn/troubleshooting/migrate-to-v12.mdx#2025-04-23_snippet_17\n\nLANGUAGE: typescript\nCODE:\n```\ntype NumberNode = Node<{ value: number }, 'number'>;\ntype TextNode = Node<{ text: string }, 'text'>;\ntype AppNode = NumberNode | TextNode;\n```\n\n----------------------------------------\n\nTITLE: Importing React Flow v12 (New API)\nDESCRIPTION: Illustrates the updated way to import React Flow v12 using a named import from the `@xyflow/react` package. It also shows the necessary CSS import for styling, replacing the v11 import method.\nSOURCE: https://github.com/xyflow/web/blob/main/sites/reactflow.dev/src/content/learn/troubleshooting/migrate-to-v12.mdx#2025-04-23_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\n// npm install @xyflow/react\nimport { ReactFlow } from '@xyflow/react';\n\n// you also need to adjust the style import\nimport '@xyflow/react/dist/style.css';\n\n// or if you just want basic styles\nimport '@xyflow/react/dist/base.css';\n```\n\n----------------------------------------\n\nTITLE: Adding a Background Pattern to React Flow in React\nDESCRIPTION: Illustrates how to display a pattern background (dots or lines) in the React Flow viewport using the Background component. It's added as a child component to the main ReactFlow container to enhance the visual appearance.\nSOURCE: https://github.com/xyflow/web/blob/main/sites/reactflow.dev/src/content/learn/concepts/built-in-components.mdx#2025-04-23_snippet_2\n\nLANGUAGE: jsx\nCODE:\n```\n<RemoteCodeViewer route=\"learn/background\" framework=\"react\" />\n```\n\n----------------------------------------\n\nTITLE: Adding a Child Node and Edge in Application Store - TypeScript\nDESCRIPTION: Defines an addChildNode action for the application state store (likely using Zustand or Redux) to append a new mindmap node and connect it with its parent via an edge. It generates unique IDs for nodes/edges using nanoid and sets the parent/child relationship using parentNode.id. Prerequisites: nanoid, Node type, and XYPosition are required. Inputs are parentNode and child node position; the output is updated nodes and edges state. Limitations: Assumes a flat node structure and certain node/edge types.\nSOURCE: https://github.com/xyflow/web/blob/main/sites/reactflow.dev/src/content/learn/tutorials/mind-map-app-with-react-flow.mdx#2025-04-23_snippet_13\n\nLANGUAGE: ts\nCODE:\n```\naddChildNode: (parentNode: Node, position: XYPosition) => {\n  const newNode = {\n    id: nanoid(),\n    type: 'mindmap',\n    data: { label: 'New Node' },\n    position,\n    parentNode: parentNode.id,\n  };\n\n  const newEdge = {\n    id: nanoid(),\n    source: parentNode.id,\n    target: newNode.id,\n  };\n\n  set({\n    nodes: [...get().nodes, newNode],\n    edges: [...get().edges, newEdge],\n  });\n};\n```\n\n----------------------------------------\n\nTITLE: Mocking Browser APIs for React Flow Testing - TypeScript\nDESCRIPTION: This TypeScript code provides a helper function, mockReactFlow, to mock the ResizeObserver and DOMMatrixReadOnly classes and relevant HTMLElement/SVGElement properties for running React Flow tests in Jest. These mocks are essential because React Flow relies on browser features not present in jsdom. The function should be invoked in a Jest setup file or before each test. Dependencies: global Jest environment, React Flow. Key parameters: none. Input: none; Output: Modifies global environment with mocks; Limitations: Applies only in test environments, should not be used in production builds.\nSOURCE: https://github.com/xyflow/web/blob/main/sites/reactflow.dev/src/content/learn/advanced-use/testing.mdx#2025-04-23_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\n// To make sure that the tests are working, it's important that you are using\n// this implementation of ResizeObserver and DOMMatrixReadOnly\nclass ResizeObserver {\n  callback: globalThis.ResizeObserverCallback;\n\n  constructor(callback: globalThis.ResizeObserverCallback) {\n    this.callback = callback;\n  }\n\n  observe(target: Element) {\n    this.callback([{ target } as globalThis.ResizeObserverEntry], this);\n  }\n\n  unobserve() {}\n\n  disconnect() {}\n}\n\nclass DOMMatrixReadOnly {\n  m22: number;\n  constructor(transform: string) {\n    const scale = transform?.match(/scale\\(([1-9.])\\)/)?.[1];\n    this.m22 = scale !== undefined ? +scale : 1;\n  }\n}\n\n// Only run the shim once when requested\nlet init = false;\n\nexport const mockReactFlow = () => {\n  if (init) return;\n  init = true;\n\n  global.ResizeObserver = ResizeObserver;\n\n  // @ts-ignore\n  global.DOMMatrixReadOnly = DOMMatrixReadOnly;\n\n  Object.defineProperties(global.HTMLElement.prototype, {\n    offsetHeight: {\n      get() {\n        return parseFloat(this.style.height) || 1;\n      },\n    },\n    offsetWidth: {\n      get() {\n        return parseFloat(this.style.width) || 1;\n      },\n    },\n  });\n\n  (global.SVGElement as any).prototype.getBBox = () => ({\n    x: 0,\n    y: 0,\n    width: 0,\n    height: 0,\n  });\n};\n```\n\n----------------------------------------\n\nTITLE: Layering Multiple Background Components in React Flow\nDESCRIPTION: An advanced example showing how to combine multiple Background components to create a square grid with accentuated lines every 10th interval. This demonstrates providing unique IDs for each background layer and customizing gap and color properties.\nSOURCE: https://github.com/xyflow/web/blob/main/sites/reactflow.dev/src/content/api-reference/components/background.mdx#2025-04-23_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\nimport { ReactFlow, Background, BackgroundVariant } from '@xyflow/react';\n\nimport '@xyflow/react/dist/style.css';\n\nexport default function Flow() {\n  return (\n    <ReactFlow defaultNodes={[...]} defaultEdges={[...]}>\n      <Background\n        id=\"1\"\n        gap={10}\n        color=\"#f1f1f1\"\n        variant={BackgroundVariant.Lines}\n      />\n\n      <Background\n        id=\"2\"\n        gap={100}\n        color=\"#ccc\"\n        variant={BackgroundVariant.Lines}\n      />\n    </ReactFlow>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Server-Side Viewport Fitting with ReactFlow Component in JSX\nDESCRIPTION: This code shows how to use the fitView prop and explicitly set width and height on the ReactFlow component during server-side rendering. Ensuring container size is specified enables fitView to calculate viewport transforms appropriately. The code requires React, React Flow, and presumes that nodes and edges arrays are defined. Inputs include nodes, edges, fitView, and container dimensions; the rendered output is a ReactFlow diagram sized and positioned with all nodes in view.\nSOURCE: https://github.com/xyflow/web/blob/main/sites/reactflow.dev/src/content/learn/advanced-use/ssr-ssg-configuration.mdx#2025-04-23_snippet_2\n\nLANGUAGE: js\nCODE:\n```\n<ReactFlow nodes={nodes} edges={edges} fitView width={1000} height={500} />\n```\n\n----------------------------------------\n\nTITLE: Registering a Custom Node Type in React Flow (JSX)\nDESCRIPTION: Demonstrates how to register a custom node component with React Flow. A `nodeTypes` object maps a string identifier ('textUpdater') to the custom node component (`TextUpdaterNode`). This object is defined outside the main `Flow` component to prevent recreation on re-renders and passed to the `ReactFlow` component via the `nodeTypes` prop.\nSOURCE: https://github.com/xyflow/web/blob/main/sites/reactflow.dev/src/content/learn/customization/custom-nodes.mdx#2025-04-23_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\nconst nodeTypes = {\n  textUpdater: TextUpdaterNode\n};\n\nfunction Flow() {\n  ...\n  return (\n    <ReactFlow\n      nodes={nodes}\n      edges={edges}\n      onNodesChange={onNodesChange}\n      onEdgesChange={onEdgesChange}\n      onConnect={onConnect}\n      nodeTypes={nodeTypes}\n      fitView\n      style={rfStyle}\n    />\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Using getSmoothStepPath in XYFlow\nDESCRIPTION: Demonstrates how to use the getSmoothStepPath utility to create a smooth stepped path between two nodes. The function returns a tuple containing the SVG path string, label coordinates (x,y), and offset coordinates (x,y). The example shows how to set source and target positions with their coordinates.\nSOURCE: https://github.com/xyflow/web/blob/main/sites/svelteflow.dev/src/content/api-reference/utils/get-smooth-step-path.mdx#2025-04-23_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport { Position, getSmoothStepPath } from '@xyflow/svelte';\n\nconst source = { x: 0, y: 20 };\nconst target = { x: 150, y: 100 };\n\nconst [path, labelX, labelY, offsetX, offsetY] = getSmoothStepPath({\n  sourceX: source.x,\n  sourceY: source.y,\n  sourcePosition: Position.Right,\n  targetX: target.x,\n  targetY: target.y,\n  targetPosition: Position.Left,\n});\n\nconsole.log(path); //=> \"M0 20L20 20L 70,20Q 75,20 75,25L 75,95Q ...\"\nconsole.log(labelX, labelY); //=> 75, 60\nconsole.log(offsetX, offsetY); //=> 75, 40\n```\n\n----------------------------------------\n\nTITLE: Implementing Focus-on-Click Navigation - React Flow - TypeScript\nDESCRIPTION: Demonstrates enhancing user navigation by focusing the canvas on a node upon clicking it, utilizing the React Flow useReactFlow hook and fitView method. The handleNodeClick callback is memoized and configured to animate focus to the clicked node; it must include fitView as a dependency since fitView's reference may update after initialization. This snippet assumes prior setup of nodes and edges through slidesToElements, and the React Flow component is configured with the onNodeClick handler.\nSOURCE: https://github.com/xyflow/web/blob/main/sites/reactflow.dev/src/content/learn/tutorials/slide-shows-with-react-flow.mdx#2025-04-23_snippet_10\n\nLANGUAGE: typescript\nCODE:\n```\nimport { useCallback } from 'react';\nimport { ReactFlow, useReactFlow, type NodeMouseHandler } from '@xyflow/react';\nimport { Slide, SlideData, SLIDE_WIDTH } from './Slide';\n\nconst slides: Record<string, SlideData> = {\n  ...\n}\n\nconst nodeTypes = {\n  slide: Slide,\n};\n\nconst initialSlide = '0';\nconst { nodes, edges } = slidesToElements(initialSlide, slides);\n\nexport default function App() {\n  const { fitView } = useReactFlow();\n  const handleNodeClick = useCallback<NodeMouseHandler>(\n    (_, node) => {\n      fitView({ nodes: [node], duration: 150 });\n    },\n    [fitView],\n  );\n\n  return (\n    <ReactFlow\n      ...\n      fitViewOptions={{ nodes: [{ id: initialSlide }] }}\n      onNodeClick={handleNodeClick}\n    />\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Defining a Custom Sum Node in React Flow (TSX)\nDESCRIPTION: This TSX snippet defines a custom React Flow node `SumNode`. It uses `BaseNode`, `LabeledHandle`, and `NodeHeader`. The node calculates the sum of values from nodes connected to its 'x' and 'y' target handles. It utilizes `useReactFlow` and `useStore` hooks to get connection information and access the node lookup map, then updates its own 'value' data property within a `useEffect` hook whenever input values change. The `getHandleValue` helper function extracts and sums numeric 'value' data from connected source nodes.\nSOURCE: https://github.com/xyflow/web/blob/main/sites/reactflow.dev/src/content/learn/tutorials/getting-started-with-react-flow-components.mdx#2025-04-23_snippet_17\n\nLANGUAGE: tsx\nCODE:\n```\nimport React, { useEffect } from 'react';\nimport {\n  type Node,\n  type NodeProps,\n  Position,\n  useReactFlow,\n  useStore,\n} from '@xyflow/react';\n\nimport { BaseNode } from '../base-node';\nimport { LabeledHandle } from '../labeled-handle';\nimport { NodeHeader, NodeHeaderTitle } from '../node-header';\n\nexport type SumNode = Node<{\n  value: number;\n}>;\n\nexport function SumNode({ id }: NodeProps<SumNode>) {\n  const { updateNodeData, getHandleConnections } = useReactFlow();\n  const { x, y } = useStore((state) => ({\n    x: getHandleValue(\n      getHandleConnections({ nodeId: id, id: 'x', type: 'target' }),\n      state.nodeLookup,\n    ),\n    y: getHandleValue(\n      getHandleConnections({ nodeId: id, id: 'y', type: 'target' }),\n      state.nodeLookup,\n    ),\n  }));\n\n  useEffect(() => {\n    updateNodeData(id, { value: x + y });\n  }, [x, y]);\n\n  return (\n    <BaseNode className=\"w-32\">\n      <NodeHeader>\n        <NodeHeaderTitle>Sum</NodeHeaderTitle>\n      </NodeHeader>\n\n      <footer className=\"bg-gray-100 -m-5\">\n        <LabeledHandle title=\"x\" id=\"x\" type=\"target\" position={Position.Left} />\n        <LabeledHandle title=\"y\" id=\"y\" type=\"target\" position={Position.Left} />\n        <LabeledHandle title=\"out\" type=\"source\" position={Position.Right} />\n      </footer>\n    </BaseNode>\n  );\n}\n\nfunction getHandleValue(\n  connections: Array<{ source: string }>,\n  lookup: Map<string, Node<any>>,\n) {\n  return connections.reduce((acc, { source }) => {\n    const node = lookup.get(source)!;\n    const value = node.data.value;\n\n    return typeof value === 'number' ? acc + value : acc;\n  }, 0);\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Writable Store for Edges in Svelte using JavaScript\nDESCRIPTION: This snippet creates a writable Svelte store that holds edge information for connecting nodes in a Svelte Flow diagram. Each edge object includes an 'id', 'source', and 'target', referencing node ids. The store enables dynamic and reactive connection management within Svelte components. Requires the 'svelte/store' package and is intended to be supplied as a prop to the flow component for visualization.\nSOURCE: https://github.com/xyflow/web/blob/main/sites/svelteflow.dev/src/content/learn/getting-started/building-a-flow.mdx#2025-04-23_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nimport { writable } from 'svelte/store';\n\nconst edges = writable([{ id: '1-2', source: '1', target: '2' }]);\n```\n\n----------------------------------------\n\nTITLE: Defining the Generic Edge Type Union in React Flow (TypeScript)\nDESCRIPTION: Defines the primary `Edge` type in React Flow using TypeScript's union feature. It specifies that an `Edge` can be either a `DefaultEdge`, a `SmoothStepEdge`, or a `BezierEdge`, allowing for different visual representations and behaviors. The generic type `T` allows for custom data to be associated with the edge.\nSOURCE: https://github.com/xyflow/web/blob/main/sites/reactflow.dev/src/content/api-reference/types/edge.mdx#2025-04-23_snippet_0\n\nLANGUAGE: ts\nCODE:\n```\nexport type Edge<T> = DefaultEdge<T> | SmoothStepEdge<T> | BezierEdge<T>;\n```\n\n----------------------------------------\n\nTITLE: Updating Node State Immutably in v12 (New API)\nDESCRIPTION: Demonstrates the required immutable update pattern for nodes in React Flow v12. Instead of mutating, a new node object is created using the spread syntax to apply changes.\nSOURCE: https://github.com/xyflow/web/blob/main/sites/reactflow.dev/src/content/learn/troubleshooting/migrate-to-v12.mdx#2025-04-23_snippet_8\n\nLANGUAGE: javascript\nCODE:\n```\nsetNodes((currentNodes) =>\n  currentNodes.map((node) => ({\n    ...node,\n    hidden: true,\n  })),\n);\n```\n\n----------------------------------------\n\nTITLE: Using useKeyPress Hook to Detect Key Presses in React\nDESCRIPTION: This JSX code snippet demonstrates the usage of the `useKeyPress` hook from `@xyflow/react`. It imports the hook and calls it twice: once to track if the 'Space' key is pressed (`spacePressed`), and once to track if either 'Meta+S' (Cmd+S on Mac) or 'Strg+S' (Ctrl+S on Windows/Linux) is pressed (`cmdAndSPressed`). The component then conditionally renders paragraphs based on the boolean state returned by the hook. It requires React and the `@xyflow/react` package.\nSOURCE: https://github.com/xyflow/web/blob/main/sites/reactflow.dev/src/content/api-reference/hooks/use-key-press.mdx#2025-04-23_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport { useKeyPress } from '@xyflow/react';\n\nexport default function () {\n  const spacePressed = useKeyPress('Space');\n  const cmdAndSPressed = useKeyPress(['Meta+s', 'Strg+s']);\n\n  return (\n    <div>\n      {spacePressed && <p>Space pressed!</p>}\n      {cmdAndSPressed && <p>Cmd + S pressed!</p>}\n    </div>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Color Chooser Input in Custom Node (JSX/React)\nDESCRIPTION: Implements a color input field inside a custom React Flow node so users can select a color for the node. The input's default value is initialized from data.color, and onChange uses updateNodeColor to update the store with the new value. The 'nodrag' class prevents unintended node dragging while interacting with the input. Dependencies: React, relevant store hook, node id, data structure. Expected input: color from color picker. Effect: calls store update and updates UI color.\nSOURCE: https://github.com/xyflow/web/blob/main/sites/reactflow.dev/src/content/learn/advanced-use/state-management.mdx#2025-04-23_snippet_3\n\nLANGUAGE: javascriptreact\nCODE:\n```\n<input\n  type=\"color\"\n  defaultValue={data.color}\n  onChange={(evt) => updateNodeColor(id, evt.target.value)}\n  className=\"nodrag\"\n/>\n```\n\n----------------------------------------\n\nTITLE: Defining an Edge Array in JavaScript for React Flow\nDESCRIPTION: Shows how to define a JavaScript array containing edge objects to connect nodes in React Flow. Each edge requires a unique `id`, a `source` node ID, and a `target` node ID to establish the connection between two specified nodes (node '1' and node '2' in this case). This array is passed as a prop to the `ReactFlow` component alongside the nodes.\nSOURCE: https://github.com/xyflow/web/blob/main/sites/reactflow.dev/src/content/learn/getting-started/building-a-flow.mdx#2025-04-23_snippet_3\n\nLANGUAGE: js\nCODE:\n```\nconst edges = [{ id: '1-2', source: '1', target: '2' }];\n```\n\n----------------------------------------\n\nTITLE: Custom Edge Components with React Flow\nDESCRIPTION: Example showing the implementation of custom edge types in React Flow, demonstrating how to create edges with buttons, bi-directional routing, and self-connections using the BaseEdge helper component.\nSOURCE: https://github.com/xyflow/web/blob/main/apps/example-apps/react/examples/edges/custom-edges/README.mdx#2025-04-23_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\n<RemoteCodeViewer route=\"examples/edges/custom-edges\" framework=\"react\" />\n```\n\n----------------------------------------\n\nTITLE: Calculating Child Node Position Relative to Parent - TSX\nDESCRIPTION: Implements a helper function to determine where a new child node should be placed in flow coordinates relative to its parent. It checks for necessary DOM and parentNode metadata, uses a screenToFlowPosition conversion, and accounts for parent's absolute position and dimensions for accurate placement. Dependencies: store, screenToFlowPosition, and parent node structure with computed properties. Inputs: MouseEvent and parent node; output: position object or undefined.\nSOURCE: https://github.com/xyflow/web/blob/main/sites/reactflow.dev/src/content/learn/tutorials/mind-map-app-with-react-flow.mdx#2025-04-23_snippet_15\n\nLANGUAGE: tsx\nCODE:\n```\nconst getChildNodePosition = (event: MouseEvent, parentNode?: Node) => {\n  const { domNode } = store.getState();\n\n  if (\n    !domNode ||\n    // we need to check if these properties exist, because when a node is not initialized yet,\n    // it doesn't have a positionAbsolute nor a width or height\n    !parentNode?.computed?.positionAbsolute ||\n    !parentNode?.computed?.width ||\n    !parentNode?.computed?.height\n  ) {\n    return;\n  }\n\n  const panePosition = screenToFlowPosition({\n    x: event.clientX,\n    y: event.clientY,\n  });\n\n  // we are calculating with positionAbsolute here because child nodes are positioned relative to their parent\n  return {\n    x:\n      panePosition.x -\n      parentNode.computed?.positionAbsolute.x +\n      parentNode.computed?.width / 2,\n    y:\n      panePosition.y -\n      parentNode.computed?.positionAbsolute.y +\n      parentNode.computed?.height / 2,\n  };\n};\n```\n\n----------------------------------------\n\nTITLE: Handling Node Deletion in React Flow to Recover Connections\nDESCRIPTION: This code implements a solution for maintaining flow connections when a middle node is deleted. It uses onNodesDelete callback to detect node deletion, then utilizes getConnectedEdges, getIncomers, and getOutgoers utility functions to identify and reconnect the affected nodes, creating new edges that bypass the deleted node.\nSOURCE: https://github.com/xyflow/web/blob/main/apps/example-apps/react/examples/nodes/delete-middle-node/README.mdx#2025-04-23_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nconst onNodesDelete = useCallback(\n  (deleted) => {\n    setEdges((edges) => {\n      // Get all the edges that are not connected to the deleted nodes\n      const remainingEdges = edges.filter(\n        (edge) =>\n          !deleted.some(\n            (node) => node.id === edge.source || node.id === edge.target\n          )\n      );\n\n      // For each deleted node, and for each pair of incoming and outgoing edges,\n      // create a new edge that connects the source of the incoming edge with the\n      // target of the outgoing edge.\n      const createdEdges = deleted.flatMap((deletedNode) => {\n        const incomers = getIncomers(deletedNode, nodes, edges);\n        const outgoers = getOutgoers(deletedNode, nodes, edges);\n\n        return incomers.flatMap(({ id: source }) =>\n          outgoers.map(({ id: target }) => ({\n            id: `${source}->${target}`,\n            source,\n            target,\n          }))\n        );\n      });\n\n      return [...remainingEdges, ...createdEdges];\n    });\n  },\n  [nodes]\n);\n```\n\n----------------------------------------\n\nTITLE: Web Audio Context Setup\nDESCRIPTION: Initial setup of Web Audio API context and node management structure with hardcoded audio nodes.\nSOURCE: https://github.com/xyflow/web/blob/main/sites/reactflow.dev/src/content/learn/tutorials/react-flow-and-the-web-audio-api.mdx#2025-04-23_snippet_15\n\nLANGUAGE: js\nCODE:\n```\nconst context = new AudioContext();\nconst nodes = new Map();\n\nconst osc = context.createOscillator();\nosc.frequency.value = 220;\nosc.type = 'square';\nosc.start();\n\nconst amp = context.createGain();\namp.gain.value = 0.5;\n\nconst out = context.destination;\n\nnodes.set('a', osc);\nnodes.set('b', amp);\nnodes.set('c', out);\n```\n\n----------------------------------------\n\nTITLE: Initializing ReactFlow Context with Server-Side Rendering Support in JSX\nDESCRIPTION: This snippet shows how to use ReactFlowProvider to initialize its context using initial values for nodes, edges, dimensions, and fitView for server-side rendering. The initial-* props ensure the correct initial state while allowing later updates via context. It requires React, ReactFlowProvider, and a child App component. Inputs include all initial graph data and container sizing; the output is a fully context-wrapped React Flow environment ready for SSR.\nSOURCE: https://github.com/xyflow/web/blob/main/sites/reactflow.dev/src/content/learn/advanced-use/ssr-ssg-configuration.mdx#2025-04-23_snippet_3\n\nLANGUAGE: js\nCODE:\n```\n<ReactFlowProvider\n  initialNodes={nodes}\n  initialEdges={edges}\n  initialWidth={1000}\n  initialHeight={500}\n  fitView\n>\n  <App />\n</ReactFlowProvider>\n```\n\n----------------------------------------\n\nTITLE: Configuring Edge Deletion on Drop in React Flow\nDESCRIPTION: This code snippet shows how to set up React Flow to delete an edge when it is dragged and dropped on the pane without connecting to a handle. It uses the onReconnect, onReconnectStart, and onReconnectEnd handlers to manage the edge deletion process.\nSOURCE: https://github.com/xyflow/web/blob/main/apps/example-apps/react/examples/edges/delete-edge-on-drop/README.mdx#2025-04-23_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\n<RemoteCodeViewer\n  route=\"examples/edges/delete-edge-on-drop\"\n  framework=\"react\"\n/>\n```\n\n----------------------------------------\n\nTITLE: Rendering Markdown Content in Custom Slide Node using React Remark (TSX)\nDESCRIPTION: This updated `Slide.tsx` code imports the `Remark` component from `react-remark`. It modifies the `SlideData` type to include a `source` property (string) intended to hold markdown text. The component now uses `<Remark>{data.source}</Remark>` to render the markdown content passed via the node's data. The highlighted lines show the import, type update, and usage of the Remark component.\nSOURCE: https://github.com/xyflow/web/blob/main/sites/reactflow.dev/src/content/learn/tutorials/slide-shows-with-react-flow.mdx#2025-04-23_snippet_5\n\nLANGUAGE: tsx\nCODE:\n```\nimport { type Node, type NodeProps } from '@xyflow/react';\nimport { Remark } from 'react-remark';\n\nexport const SLIDE_WIDTH = 1920;\nexport const SLIDE_HEIGHT = 1080;\n\nexport type SlideNode = Node<SlideData, 'slide'>;\n\nexport type SlideData = {\n  source: string;\n};\n\nconst style = {\n  width: `${SLIDE_WIDTH}px`,\n  height: `${SLIDE_HEIGHT}px`,\n} satisfies React.CSSProperties;\n\nexport function Slide({ data }: NodeProps<SlideNode>) {\n  return (\n    <article className=\"slide nodrag\" style={style}>\n      <Remark>{data.source}</Remark>\n    </article>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Composing Flow with Layouted Slides - React Flow - TypeScript\nDESCRIPTION: Shows how to integrate the slidesToElements function into a React component for rendering a flow of slides. The snippet declares slide data, defines node types, generates nodes and edges outside the component for efficiency, and uses fitViewOptions to initially focus on a specified slide. Prerequisites include @xyflow/react, the Slide component, and slide layout constants. This component expects nodes to be static for best performance.\nSOURCE: https://github.com/xyflow/web/blob/main/sites/reactflow.dev/src/content/learn/tutorials/slide-shows-with-react-flow.mdx#2025-04-23_snippet_9\n\nLANGUAGE: typescript\nCODE:\n```\nimport { ReactFlow } from '@xyflow/react';\nimport { slidesToElements } from './slides';\nimport { Slide, SlideData, SLIDE_WIDTH } from './Slide';\n\nconst slides: Record<string, SlideData> = {\n  '0': { source: '# Hello, React Flow!', right: '1' },\n  '1': { source: '...', left: '0', right: '2' },\n  '2': { source: '...', left: '1' },\n};\n\nconst nodeTypes = {\n  slide: Slide,\n};\n\nconst initialSlide = '0';\nconst { nodes, edges } = slidesToElements(initialSlide, slides);\n\nexport default function App() {\n  return (\n    <ReactFlow\n      nodes={nodes}\n      nodeTypes={nodeTypes}\n      fitView\n      fitViewOptions={{ nodes: [{ id: initialSlide }] }}\n      minZoom={0.1}\n    />\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Handling Slide Node Click Events to Update Current Slide - React Flow - TypeScript\nDESCRIPTION: This snippet shows how to handle node click events to navigate to a slide and update the currentSlide state in a slide presentation app. It maintains currentSlide with useState, and handleNodeClick uses fitView to focus on that node and updates state accordingly. This supports UI navigation in the slide deck. Requires @xyflow/react, ReactFlow, useReactFlow, hooks, and node type definitions. Expects nodes/edges and nodeTypes pre-defined and uses SLIDE_WIDTH constant.\nSOURCE: https://github.com/xyflow/web/blob/main/sites/reactflow.dev/src/content/learn/tutorials/slide-shows-with-react-flow.mdx#2025-04-23_snippet_14\n\nLANGUAGE: tsx\nCODE:\n```\nimport { useState, useCallback } from 'react';\nimport { ReactFlow, useReactFlow } from '@xyflow/react';\nimport { Slide, SlideData, SLIDE_WIDTH } from './Slide';\n\nconst slides: Record<string, SlideData> = {\n  ...\n}\n\nconst nodeTypes = {\n  slide: Slide,\n};\n\nconst initialSlide = '0';\nconst { nodes, edges } = slidesToElements(initialSlide, slides)\n\nexport default function App() {\n  const [currentSlide, setCurrentSlide] = useState(initialSlide);\n  const { fitView } = useReactFlow();\n\n  const handleNodeClick = useCallback<NodeMouseHandler>(\n    (_, node) => {\n      fitView({ nodes: [node] });\n      setCurrentSlide(node.id);\n    },\n    [fitView],\n  );\n\n  return (\n    <ReactFlow\n      ...\n      onNodeClick={handleNodeClick}\n    />\n  );\n}\n\n```\n\n----------------------------------------\n\nTITLE: Implementing Edge Reconnection in React Flow\nDESCRIPTION: This code snippet demonstrates how to set up edge reconnection in React Flow using the onReconnect handler prop and the reconnectEdge helper function. It also shows how to configure individual edge properties for fine-grained control over reconnection behavior.\nSOURCE: https://github.com/xyflow/web/blob/main/apps/example-apps/react/examples/edges/reconnect-edge/README.mdx#2025-04-23_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\n<RemoteCodeViewer route=\"examples/edges/reconnect-edge\" framework=\"react\" />\n```\n\n----------------------------------------\n\nTITLE: Connecting React Flow Component to Zustand Store (TypeScript)\nDESCRIPTION: Updates the `Flow` component (`src/App/index.tsx`) to connect to the Zustand store. It uses the `useStore` hook with a selector and `shallow` comparison to efficiently retrieve nodes, edges, and change handlers. These state values and handlers are then passed as props to the `ReactFlow` component. It also sets `nodeOrigin` to center nodes and uses `fitView` to initially center the content.\nSOURCE: https://github.com/xyflow/web/blob/main/sites/reactflow.dev/src/content/learn/tutorials/mind-map-app-with-react-flow.mdx#2025-04-23_snippet_7\n\nLANGUAGE: tsx\nCODE:\n```\nimport { ReactFlow, Controls, Panel, NodeOrigin } from '@xyflow/react';\nimport { shallow } from 'zustand/shallow';\n\nimport useStore, { RFState } from './store';\n\n// we have to import the React Flow styles for it to work\nimport '@xyflow/react/dist/style.css';\n\nconst selector = (state: RFState) => ({\n  nodes: state.nodes,\n  edges: state.edges,\n  onNodesChange: state.onNodesChange,\n  onEdgesChange: state.onEdgesChange,\n});\n\n// this places the node origin in the center of a node\nconst nodeOrigin: NodeOrigin = [0.5, 0.5];\n\nfunction Flow() {\n  // whenever you use multiple values, you should use shallow to make sure the component only re-renders when one of the values changes\n  const { nodes, edges, onNodesChange, onEdgesChange } = useStore(selector, shallow);\n\n  return (\n    <ReactFlow\n      nodes={nodes}\n      edges={edges}\n      onNodesChange={onNodesChange}\n      onEdgesChange={onEdgesChange}\n      nodeOrigin={nodeOrigin}\n      fitView\n    >\n      <Controls showInteractive={false} />\n      <Panel position=\"top-left\">React Flow Mind Map</Panel>\n    </ReactFlow>\n  );\n}\n\nexport default Flow;\n```\n\n----------------------------------------\n\nTITLE: Defining Connection Type in TypeScript\nDESCRIPTION: Defines the Connection interface type that represents the minimal structure needed to create an edge between two nodes. Contains properties for source and target node IDs, along with optional source and target handles.\nSOURCE: https://github.com/xyflow/web/blob/main/sites/reactflow.dev/src/content/api-reference/types/connection.mdx#2025-04-23_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nexport type Connection = {\n  source: string;\n  target: string;\n  sourceHandle: string | null;\n  targetHandle: string | null;\n};\n```\n\n----------------------------------------\n\nTITLE: Defining FitViewOptions Type in TypeScript for XY Flow\nDESCRIPTION: This TypeScript code defines the FitViewOptions type, which is used to customize the behavior of the fitView function. It includes options for padding, including hidden nodes, zoom limits, animation duration, and specific nodes to focus on.\nSOURCE: https://github.com/xyflow/web/blob/main/sites/svelteflow.dev/src/content/api-reference/types/fit-view-options.mdx#2025-04-23_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nexport type FitViewOptions = {\n  padding?: number;\n  includeHiddenNodes?: boolean;\n  minZoom?: number;\n  maxZoom?: number;\n  duration?: number;\n  nodes?: (Node | { id: Node['id'] })[];\n};\n```\n\n----------------------------------------\n\nTITLE: Integrating React Flow Components in a React Project - JSX\nDESCRIPTION: This code snippet shows the standard way to import React Flow UI components and styles in a React application and utilize them in JSX. It requires the '@xyflow/react' package and its corresponding CSS file to be installed. The main <ReactFlow> component is provided with nodes and edges as props, and child components like <Controls /> and <Background /> are included for enhanced user interaction. Inputs are the 'nodes' and 'edges' data structures, and the expected output is a rendered flow diagram inside the React application. All imports and usage must be inside a file processed by a JSX/React build tool.\nSOURCE: https://github.com/xyflow/web/blob/main/sites/xyflow.com/src/content/react-flow-v11.mdx#2025-04-23_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\nimport { ReactFlow,  Controls, Background } from '@xyflow/react';\nimport '@xyflow/react/dist/style.css';\n\n...\n\n<ReactFlow nodes={nodes} edges={edges}>\n  <Controls />\n  <Background />\n</ReactFlow>\n```\n\n----------------------------------------\n\nTITLE: Using useViewport to Display Viewport State in React\nDESCRIPTION: This React component demonstrates using the `useViewport` hook from `@xyflow/react` to get the current viewport state, specifically the x and y coordinates and the zoom level. The component then renders these values within a paragraph element. It requires being rendered within a `<ReactFlowProvider />` or `<ReactFlow />` context and will re-render whenever the viewport state changes.\nSOURCE: https://github.com/xyflow/web/blob/main/sites/reactflow.dev/src/content/api-reference/hooks/use-viewport.mdx#2025-04-23_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport { useViewport } from '@xyflow/react';\n\nexport default function ViewportDisplay() {\n  const { x, y, zoom } = useViewport();\n\n  return (\n    <div>\n      <p>\n        The viewport is currently at ({x}, {y}) and zoomed to {zoom}.\n      </p>\n    </div>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Handling Connection End Event in React Flow App (TSX)\nDESCRIPTION: This snippet defines the `onConnectEnd` callback function for a React Flow instance. It determines if the connection gesture ended on the pane or a node. If it ended on a node, it focuses the input element within that node. If it ended on the pane and a connection was initiated (`connectingNodeId.current`), it calculates the position for a new child node relative to the parent and calls `addChildNode`.\nSOURCE: https://github.com/xyflow/web/blob/main/sites/reactflow.dev/src/content/learn/tutorials/mind-map-app-with-react-flow.mdx#2025-04-23_snippet_22\n\nLANGUAGE: tsx\nCODE:\n```\n```tsx\nconst onConnectEnd: OnConnectEnd = useCallback(\n  (event) => {\n    const { nodeLookup } = store.getState();\n    const targetIsPane = (event.target as Element).classList.contains('react-flow__pane');\n    const node = (event.target as Element).closest('.react-flow__node');\n\n    if (node) {\n      node.querySelector('input')?.focus({ preventScroll: true });\n    } else if (targetIsPane && connectingNodeId.current) {\n      const parentNode = nodeLookup.get(connectingNodeId.current);\n      const childNodePosition = getChildNodePosition(event, parentNode);\n\n      if (parentNode && childNodePosition) {\n        addChildNode(parentNode, childNodePosition);\n      }\n    }\n  },\n  [getChildNodePosition],\n);\n```\n```\n\n----------------------------------------\n\nTITLE: Updating Web Audio Node Properties in JavaScript\nDESCRIPTION: Defines a function `updateAudioNode` that updates properties of an existing Web Audio node stored in a `Map`. It iterates through the provided `data` object and updates corresponding properties on the target audio node, correctly handling `AudioParam` instances by setting their `value` property.\nSOURCE: https://github.com/xyflow/web/blob/main/sites/reactflow.dev/src/content/learn/tutorials/react-flow-and-the-web-audio-api.mdx#2025-04-23_snippet_16\n\nLANGUAGE: js\nCODE:\n```\nexport function updateAudioNode(id, data) {\n  const node = nodes.get(id);\n\n  for (const [key, val] of Object.entries(data)) {\n    if (node[key] instanceof AudioParam) {\n      node[key].value = val;\n    } else {\n      node[key] = val;\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Managing Audio Context State in Zustand Store in JavaScript\nDESCRIPTION: Integrates audio context state management into a Zustand store. It initializes an `isRunning` state property by calling the external `isRunning` function. It also defines a `toggleAudio` action that calls the asynchronous external `toggleAudio` function and updates the `isRunning` state in the store once the promise resolves.\nSOURCE: https://github.com/xyflow/web/blob/main/sites/reactflow.dev/src/content/learn/tutorials/react-flow-and-the-web-audio-api.mdx#2025-04-23_snippet_24\n\nLANGUAGE: js\nCODE:\n```\nimport { ..., isRunning, toggleAudio } from './audio'\n\nexport const useStore = createWithEqualityFn((set, get) => ({\n  ...\n\n  isRunning: isRunning(),\n\n  toggleAudio() {\n    toggleAudio().then(() => {\n      set({ isRunning: isRunning() });\n    });\n  }\n}));\n```\n\n----------------------------------------\n\nTITLE: Configuring Dark Mode with colorMode Prop in React Flow - JavaScript/React\nDESCRIPTION: Demonstrates how to use the colorMode prop with React Flow to switch between 'dark', 'light', and 'system' color themes within a React application. Requires the React Flow component to be installed and imported into the project (dependency: react-flow). Key parameter is colorMode, determining which visual style is applied; it accepts 'dark', 'light', or 'system'. Input is the colorMode string prop; output is a styled React Flow component reflecting the chosen mode. This snippet is constrained to environments using React with React Flow integrated.\nSOURCE: https://github.com/xyflow/web/blob/main/apps/example-apps/react/examples/styling/dark-mode/README.mdx#2025-04-23_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n/*\n  Example: Setting dark mode on React Flow component using colorMode prop\n*/\n\nimport React from 'react';\nimport ReactFlow from 'react-flow-renderer';\n\nfunction MyFlow() {\n  return (\n    <ReactFlow colorMode=\"dark\" />\n  );\n}\n\nexport default MyFlow;\n```\n\n----------------------------------------\n\nTITLE: Registering Custom Node Type in Svelte Flow\nDESCRIPTION: Shows how to register a custom node type in the main Svelte Flow component by adding it to the nodeTypes prop. This allows the custom node to be used in the flow by referencing its type.\nSOURCE: https://github.com/xyflow/web/blob/main/sites/svelteflow.dev/src/content/learn/guides/custom-nodes.mdx#2025-04-23_snippet_1\n\nLANGUAGE: svelte\nCODE:\n```\n<script>\n  import { SvelteFlow } from '@xyflow/svelte';\n  import ColorPickerNode from './ColorPickerNode.svelte';\n\n\n  const nodeTypes = {\n    'color-picker': ColorPickerNode\n  };\n</script>\n\n<SvelteFlow {nodeTypes} />\n```\n\n----------------------------------------\n\nTITLE: Defining Slide Directional Relationships - TypeScript\nDESCRIPTION: Defines the SlideData type to include optional properties (left, right, up, down) representing adjacent slides. This update allows each slide to be declaratively connected to its neighbors in any combination of four directions, facilitating both layout computation and navigation logic. No additional dependencies are required; the SlideData type expects a unique string ID for each direction or undefined for absent links.\nSOURCE: https://github.com/xyflow/web/blob/main/sites/reactflow.dev/src/content/learn/tutorials/slide-shows-with-react-flow.mdx#2025-04-23_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\nexport type SlideData = {\n  source: string;\n  left?: string;\n  up?: string;\n  down?: string;\n  right?: string;\n};\n```\n\n----------------------------------------\n\nTITLE: Using useInternalNode Hook with TypeScript\nDESCRIPTION: Example demonstrating how to use the useInternalNode hook with TypeScript generics to provide type safety for custom node types.\nSOURCE: https://github.com/xyflow/web/blob/main/sites/reactflow.dev/src/content/api-reference/hooks/use-internal-node.mdx#2025-04-23_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\nconst internalNode = useInternalNode<CustomNodeType>();\n```\n\n----------------------------------------\n\nTITLE: Using useNodeConnections Hook in React XY Flow\nDESCRIPTION: This snippet demonstrates how to use the useNodeConnections hook to get an array of connections for a specific node, handle type, or handle ID. It shows how to import the hook and use it in a functional component to display the number of incoming connections.\nSOURCE: https://github.com/xyflow/web/blob/main/sites/reactflow.dev/src/content/api-reference/hooks/use-node-connections.mdx#2025-04-23_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport { useNodeConnections } from '@xyflow/react';\n\nexport default function () {\n  const connections = useNodeConnections({\n    handleType: 'target',\n    handleId: 'my-handle',\n  });\n\n  return (\n    <div>There are currently {connections.length} incoming connections!</div>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Defining ConnectionLineType Enum in TypeScript\nDESCRIPTION: This TypeScript enum defines the available types for styling the connection line when creating new edges in React Flow. The selected type is passed to the ReactFlow component via the `connectionLineType` prop. It includes options like 'default' (Bezier), 'straight', 'step', 'smoothstep', and 'simplebezier'. This enum value is also passed to custom connection line components.\nSOURCE: https://github.com/xyflow/web/blob/main/sites/reactflow.dev/src/content/api-reference/types/connection-line-type.mdx#2025-04-23_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nexport enum ConnectionLineType {\n  Bezier = 'default',\n  Straight = 'straight',\n  Step = 'step',\n  SmoothStep = 'smoothstep',\n  SimpleBezier = 'simplebezier',\n}\n```\n\n----------------------------------------\n\nTITLE: TypeScript Usage with useStore in React Flow\nDESCRIPTION: Shows how to properly type the useStore hook when using TypeScript with React Flow, specifically for custom node types.\nSOURCE: https://github.com/xyflow/web/blob/main/sites/reactflow.dev/src/content/api-reference/hooks/use-store.mdx#2025-04-23_snippet_2\n\nLANGUAGE: tsx\nCODE:\n```\nconst nodes = useStore((s: ReactFlowState<CustomNodeType>) => ({\n  nodes: s.nodes,\n}));\n```\n\n----------------------------------------\n\nTITLE: Configuring Figma-like Viewport Controls with Partial Selection in React Flow - JavaScript/React\nDESCRIPTION: Configures React Flow to emulate design tool navigation (as in Figma), enabling panOnScroll and selectionOnDrag. Also sets selectionMode to SelectionMode.Partial to allow selection of partially overlapped nodes. Requires the React Flow library with access to SelectionMode constants. Inputs are varied combinations of scroll, drag and keyboard actions; outputs include appropriate viewport translation and flexible selection behavior. Useful for applications seeking enhanced, design-tool-mimicking interaction patterns.\nSOURCE: https://github.com/xyflow/web/blob/main/sites/reactflow.dev/src/content/learn/concepts/the-viewport.mdx#2025-04-23_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\n<RemoteCodeViewer route=\\\"learn/zoom-pan-2\\\" framework=\\\"react\\\" />\n```\n\n----------------------------------------\n\nTITLE: Mind Map Node Component with Label Editing - TSX\nDESCRIPTION: Implements a custom MindMapNode component in TSX, using the updateNodeLabel action from store to keep the UI in sync. The component renders a controlled input field whose value is the current label, updating on user input, and displays both target and source handles using React Flow's Handle with appropriate positions. Dependencies: @xyflow/react and useStore. Inputs are node props, outputs an interactive node UI. Limitations: input editing and handle positions fixed.\nSOURCE: https://github.com/xyflow/web/blob/main/sites/reactflow.dev/src/content/learn/tutorials/mind-map-app-with-react-flow.mdx#2025-04-23_snippet_17\n\nLANGUAGE: tsx\nCODE:\n```\nimport { Handle, NodeProps, Position } from '@xyflow/react';\n\nimport useStore from '../store';\n\nexport type NodeData = {\n  label: string;\n};\n\nfunction MindMapNode({ id, data }: NodeProps<NodeData>) {\n  const updateNodeLabel = useStore((state) => state.updateNodeLabel);\n\n  return (\n    <>\n      <input\n        // from now on we can use value instead of defaultValue\n        // this makes sure that the input always shows the current label of the node\n        value={data.label}\n        onChange={(evt) => updateNodeLabel(id, evt.target.value)}\n        className=\"input\"\n      />\n\n      <Handle type=\"target\" position={Position.Top} />\n      <Handle type=\"source\" position={Position.Top} />\n    </>\n  );\n}\n\nexport default MindMapNode;\n```\n\n----------------------------------------\n\nTITLE: Using useEdges Hook in React Component\nDESCRIPTION: Demonstrates how to use the useEdges hook to get the current number of edges in a React component. The component will re-render whenever any edge changes.\nSOURCE: https://github.com/xyflow/web/blob/main/sites/reactflow.dev/src/content/api-reference/hooks/use-edges.mdx#2025-04-23_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport { useEdges } from '@xyflow/react';\n\nexport default function () {\n  const edges = useEdges();\n\n  return <div>There are currently {edges.length} edges!</div>;\n}\n```\n\n----------------------------------------\n\nTITLE: Connecting Sub Flows and Outer Nodes in React Flow - JavaScript/React\nDESCRIPTION: This snippet illustrates how to create connections both within grouped nodes and from a sub flow to an outer node using React Flow. It builds on previous examples, showing how to set up nodes and edges that bridge sub flows and the outer structure. The example expects the use of React Flow library with the necessary nodes and edges array, demonstrating the flexibility in connecting node groups. Inputs include node and edge definitions, and outputs are the visible interconnected nodes, some forming sub flows and some connecting to outer nodes.\nSOURCE: https://github.com/xyflow/web/blob/main/sites/reactflow.dev/src/content/learn/layouting/sub-flows.mdx#2025-04-23_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\n<RemoteCodeViewer route=\\\"learn/sub-flows-2\\\" framework=\\\"react\\\" />\n```\n\n----------------------------------------\n\nTITLE: Defining Edge Component Props in React with TypeScript\nDESCRIPTION: This snippet defines the EdgeProps generic type in TypeScript, detailing the expected properties passed to custom edge components within a React-based flow library such as xyflow. It requires dependencies on React and relevant types such as Edge and Position, and assumes CSSProperties are available. Parameters include identifiers (id, source, target), styling (style, labelStyle), positional data (sourceX, sourceY, etc.), and label customizations. The type is used to enforce prop typing for custom edge components, enhancing type safety and component reliability.\nSOURCE: https://github.com/xyflow/web/blob/main/sites/reactflow.dev/src/content/api-reference/types/edge-props.mdx#2025-04-23_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\nexport type EdgeProps<EdgeType extends Edge = Edge> = {\n  id: string;\n  animated: boolean;\n  data: EdgeType['data'];\n  style: React.CSSProperties;\n  selected: boolean;\n  source: string;\n  target: string;\n  sourceHandleId?: string | null;\n  targetHandleId?: string | null;\n  interactionWidth: number;\n  sourceX: number;\n  sourceY: number;\n  targetX: number;\n  targetY: number;\n  sourcePosition: Position;\n  targetPosition: Position;\n  label?: string | React.ReactNode;\n  labelStyle?: React.CSSProperties;\n  labelShowBg?: boolean;\n  labelBgStyle?: CSSProperties;\n  labelBgPadding?: [number, number];\n  labelBgBorderRadius?: number;\n  markerStart?: string;\n  markerEnd?: string;\n  pathOptions?: any;\n};\n```\n\n----------------------------------------\n\nTITLE: Rendering the BaseNode Component (JSX)\nDESCRIPTION: Updates the `App` component to import and render the `<BaseNode />` component (lines 1, 3, 7-11). It also imports the necessary React Flow CSS. This demonstrates the basic usage and appearance of the newly added component.\nSOURCE: https://github.com/xyflow/web/blob/main/sites/reactflow.dev/src/content/learn/tutorials/getting-started-with-react-flow-components.mdx#2025-04-23_snippet_11\n\nLANGUAGE: jsx\nCODE:\n```\nimport '@xyflow/react/dist/style.css';\n\nimport { BaseNode } from '@/components/base-node';\n\nfunction App() {\n  return (\n    <div className=\"w-screen h-screen p-8\">\n      <BaseNode selected={false}>Hi! 👋</BaseNode>\n    </div>\n  );\n}\n\nexport default App;\n```\n\n----------------------------------------\n\nTITLE: Handling Multiple Node Deletions in Zustand Store in JavaScript\nDESCRIPTION: Implements a `removeNodes` action in a Zustand store. This action accepts an array of node objects. It iterates through this array, extracting the `id` of each node, and calls the `removeAudioNode` function for each ID to ensure the corresponding Web Audio nodes are properly removed and cleaned up.\nSOURCE: https://github.com/xyflow/web/blob/main/sites/reactflow.dev/src/content/learn/tutorials/react-flow-and-the-web-audio-api.mdx#2025-04-23_snippet_19\n\nLANGUAGE: js\nCODE:\n```\nimport { ..., removeAudioNode } from './audio';\n\nexport const useStore = createWithEqualityFn((set, get) => ({\n  ...\n\n  removeNodes(nodes) {\n    for (const { id } of nodes) {\n      removeAudioNode(id)\n    }\n  },\n\n  ...\n}));\n```\n\n----------------------------------------\n\nTITLE: Using getNodesBounds to Calculate Bounding Box in JavaScript\nDESCRIPTION: This snippet demonstrates importing and using the `getNodesBounds` function from `@xyflow/react`. It defines an array of node objects, each containing properties like `id`, `position`, `data`, `width`, and `height`. The `getNodesBounds` function is then called with this array to compute the bounding box that contains all the specified nodes. The result is stored in the `bounds` variable.\nSOURCE: https://github.com/xyflow/web/blob/main/sites/reactflow.dev/src/content/api-reference/utils/get-nodes-bounds.mdx#2025-04-23_snippet_0\n\nLANGUAGE: js\nCODE:\n```\nimport { getNodesBounds } from '@xyflow/react';\n\nconst nodes = [\n  {\n    id: 'a',\n    position: { x: 0, y: 0 },\n    data: { label: 'a' },\n    width: 50,\n    height: 25,\n  },\n  {\n    id: 'b',\n    position: { x: 100, y: 100 },\n    data: { label: 'b' },\n    width: 50,\n    height: 25,\n  },\n];\n\nconst bounds = getNodesBounds(nodes);\n```\n\n----------------------------------------\n\nTITLE: Validating Graph Connections to Prevent Cycles in React Flow\nDESCRIPTION: Shows how to use the isValidConnection callback in combination with the getOutgoers utility to validate new connections and prevent cycles from forming in a directed graph. This ensures the graph maintains a proper directional flow without circular dependencies.\nSOURCE: https://github.com/xyflow/web/blob/main/apps/example-apps/react/examples/interaction/prevent-cycles/README.mdx#2025-04-23_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\n// No direct code snippets provided in the content\n```\n\n----------------------------------------\n\nTITLE: Initializing React Flow with a Custom Slide Node in App.tsx (React)\nDESCRIPTION: This snippet shows the initial `App` component configuration. It imports the `ReactFlow` component and the custom `Slide` node. It defines a `nodeTypes` object mapping the string 'slide' to the `Slide` component, creates an initial `nodes` array containing one slide node, and renders the `<ReactFlow />` component, passing the nodes, node types, and enabling the `fitView` prop.\nSOURCE: https://github.com/xyflow/web/blob/main/sites/reactflow.dev/src/content/learn/tutorials/slide-shows-with-react-flow.mdx#2025-04-23_snippet_4\n\nLANGUAGE: tsx\nCODE:\n```\nimport { ReactFlow } from '@xyflow/react';\nimport { Slide } from './Slide.tsx';\n\nconst nodeTypes = {\n  slide: Slide,\n};\n\nexport default function App() {\n  const nodes = [{ id: '0', type: 'slide', position: { x: 0, y: 0 }, data: {} }];\n\n  return <ReactFlow nodes={nodes} nodeTypes={nodeTypes} fitView />;\n}\n```\n\n----------------------------------------\n\nTITLE: Defining a Single Custom Node with Data - React Flow - TypeScript\nDESCRIPTION: This snippet shows how to define a TypeScript type for a custom React Flow node carrying specific data (a number property), and how to use that type in the node component's props. It requires the @xyflow/react package and ensures props are properly typed using generics. The input is a node data object, and the output is a rendered node displaying a number; care must be taken to use 'type' over 'interface' for node data definition.\nSOURCE: https://github.com/xyflow/web/blob/main/sites/reactflow.dev/src/content/learn/advanced-use/typescript.mdx#2025-04-23_snippet_1\n\nLANGUAGE: TypeScript\nCODE:\n```\nimport type { Node, NodeProps } from '@xyflow/react';\n\ntype NumberNode = Node<{ number: number }, 'number'>;\n\nexport default function NumberNode({ data }: NodeProps<NumberNode>) {\n  return <div>A special number: {data.number}</div>;\n}\n```\n\nLANGUAGE: TypeScript\nCODE:\n```\ntype NumberNodeData = { number: number };\ntype NumberNode = Node<NumberNodeData, 'number'>;\n```\n\n----------------------------------------\n\nTITLE: Using applyEdgeChanges to Handle Edge Updates in ReactFlow (JavaScript)\nDESCRIPTION: This snippet demonstrates how to integrate the `applyEdgeChanges` utility from `@xyflow/react` into a React functional component. It uses `useState` to manage `nodes` and `edges`, and `useCallback` to define an `onEdgesChange` handler. This handler receives an array of `changes` from the `ReactFlow` component and applies them to the current `edges` state using `applyEdgeChanges`, updating the state via `setEdges`. This is a common pattern for managing edge updates when direct state manipulation is preferred over the `useEdgesState` hook.\nSOURCE: https://github.com/xyflow/web/blob/main/sites/reactflow.dev/src/content/api-reference/utils/apply-edge-changes.mdx#2025-04-23_snippet_0\n\nLANGUAGE: js\nCODE:\n```\nimport { useState, useCallback } from 'react';\nimport { ReactFlow, applyEdgeChanges } from '@xyflow/react';\n\nexport default function Flow() {\n  const [nodes, setNodes] = useState([]);\n  const [edges, setEdges] = useState([]);\n  const onEdgesChange = useCallback(\n    (changes) => {\n      setEdges((oldEdges) => applyEdgeChanges(changes, oldEdges));\n    },\n    [setEdges],\n  );\n\n  return (\n    <ReactFlow nodes={nodes} edges={edges} onEdgesChange={onEdgesChange} />\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Using useHandleConnections Hook in React\nDESCRIPTION: This snippet demonstrates how to use the useHandleConnections hook to get the number of incoming connections for a specific handle. It imports the hook from '@xyflow/react' and uses it with a target handle ID to display the connection count.\nSOURCE: https://github.com/xyflow/web/blob/main/sites/reactflow.dev/src/content/api-reference/hooks/use-handle-connections.mdx#2025-04-23_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport { useHandleConnections } from '@xyflow/react';\n\nexport default function () {\n  const connections = useHandleConnections({ type: 'target', id: 'my-handle' });\n\n  return (\n    <div>There are currently {connections.length} incoming connections!</div>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Subscribing to Node Data Changes with useNodesData Hook in React (JavaScript/JSX)\nDESCRIPTION: Demonstrates how to use the useNodesData hook from @xyflow/react to subscribe to data updates for individual or multiple nodes by their IDs in a React component. This approach allows the component to reactively access up-to-date node data. Dependencies include the @xyflow/react package. The node IDs are passed as strings (for a single node) or as an array of strings (for multiple nodes). The hook returns the current data objects for the specified nodes, and the component will rerender when their data changes.\nSOURCE: https://github.com/xyflow/web/blob/main/sites/reactflow.dev/src/content/api-reference/hooks/use-nodes-data.mdx#2025-04-23_snippet_0\n\nLANGUAGE: JSX\nCODE:\n```\nimport { useNodesData } from '@xyflow/react';\n\nexport default function () {\n  const nodeData = useNodesData('nodeId-1');\n\n  const nodesData = useNodesData(['nodeId-1', 'nodeId-2']);\n}\n```\n\n----------------------------------------\n\nTITLE: Triggering Store Actions with useStore in React Flow\nDESCRIPTION: Demonstrates how to use useStore to access and trigger internal React Flow actions, specifically setting the minimum zoom level.\nSOURCE: https://github.com/xyflow/web/blob/main/sites/reactflow.dev/src/content/api-reference/hooks/use-store.mdx#2025-04-23_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\nimport { useStore } from '@xyflow/react';\n\nconst setMinZoomSelector = (state) => state.setMinZoom;\n\nfunction MinZoomSetter() {\n  const setMinZoom = useStore(setMinZoomSelector);\n\n  return <button onClick={() => setMinZoom(6)}>set min zoom</button>;\n}\n```\n\n----------------------------------------\n\nTITLE: SVG Path Syntax for Custom Edges (JSX/Plain Text String)\nDESCRIPTION: Shows the core SVG path command syntax used to define a straight line between two points, which underlies the customization of edge shapes in React Flow. There are no dependencies except SVG and understanding React Flow's BaseEdge usage. The example illustrates the string to pass into a path prop for direct manipulation or advanced customization beyond built-in edge generators.\nSOURCE: https://github.com/xyflow/web/blob/main/sites/reactflow.dev/src/content/learn/customization/custom-edges.mdx#2025-04-23_snippet_4\n\nLANGUAGE: jsx\nCODE:\n```\nM x1 y1 L x2 y2\n```\n\n----------------------------------------\n\nTITLE: Defining Connection Line Component Props in React Flow (TypeScript)\nDESCRIPTION: This TypeScript snippet defines the ConnectionLineComponentProps type used as the props interface for custom connection line components in React Flow. Developers implementing a custom connection line component receive these props, which describe connection style, type, node references, coordinates, connection status, and positional information. It relies on types such as React.CSSProperties, ConnectionLineType, Node, Handle, and Position, and must be used within a TypeScript React environment.\nSOURCE: https://github.com/xyflow/web/blob/main/sites/reactflow.dev/src/content/api-reference/types/connection-line-component-props.mdx#2025-04-23_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\nexport type ConnectionLineComponentProps = {\n  connectionLineStyle?: React.CSSProperties;\n  connectionLineType: ConnectionLineType;\n  fromNode?: Node;\n  fromHandle?: Handle;\n  fromX: number;\n  fromY: number;\n  toX: number;\n  toY: number;\n  fromPosition: Position;\n  toPosition: Position;\n  connectionStatus: 'valid' | 'invalid' | null;\n};\n```\n\n----------------------------------------\n\nTITLE: Connecting React Flow App to Zustand store\nDESCRIPTION: Updates the App component to use the Zustand store for managing React Flow state. It uses a selector function to efficiently access and update the graph state.\nSOURCE: https://github.com/xyflow/web/blob/main/sites/reactflow.dev/src/content/learn/tutorials/react-flow-and-the-web-audio-api.mdx#2025-04-23_snippet_8\n\nLANGUAGE: jsx\nCODE:\n```\nimport React from 'react';\nimport { ReactFlow, Background } from '@xyflow/react';\nimport { shallow } from 'zustand/shallow';\n\nimport { useStore } from './store';\n\nconst selector = (store) => ({\n  nodes: store.nodes,\n  edges: store.edges,\n  onNodesChange: store.onNodesChange,\n  onEdgesChange: store.onEdgesChange,\n  addEdge: store.addEdge,\n});\n\nexport default function App() {\n  const store = useStore(selector, shallow);\n\n  return (\n    <ReactFlow\n      nodes={store.nodes}\n      edges={store.edges}\n      onNodesChange={store.onNodesChange}\n      onEdgesChange={store.onEdgesChange}\n      onConnect={store.addEdge}\n    >\n      <Background />\n    </ReactFlow>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Setting up a Base React Flow Component (React)\nDESCRIPTION: This component renders a basic, empty React Flow instance. It serves as the foundational setup upon which different layouting algorithms demonstrated in subsequent examples will be applied. The actual code is loaded remotely via the `RemoteCodeViewer`.\nSOURCE: https://github.com/xyflow/web/blob/main/sites/reactflow.dev/src/content/learn/layouting/layouting.mdx#2025-04-23_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n<RemoteCodeViewer route=\"learn/layouting-flow-1-empty\" framework=\"react\" />\n```\n\n----------------------------------------\n\nTITLE: Initializing an Animated SVG Edge with Custom Shape and Duration (TypeScript)\nDESCRIPTION: This snippet shows how to instantiate an animated SVG edge by specifying its type, animation duration, and desired shape. The initialEdges array holds the edge configuration, which includes required properties like type (set to 'animatedSvgEdge'), duration (animation duration in seconds), and shape (key referencing a registered shape). The code expects the AnimatedSvgEdge type and the previously defined shapes record to be available in scope.\nSOURCE: https://github.com/xyflow/web/blob/main/sites/reactflow.dev/src/content/components/edges/animated-svg-edge.mdx#2025-04-23_snippet_1\n\nLANGUAGE: ts\nCODE:\n```\nconst initialEdges = [\n  {\n    // ...\n    type: \"animatedSvgEdge\",\n    data: {\n      duration: 2,\n      shape: \"box\",\n    },\n  } satisfies AnimatedSvgEdge,\n];\n```\n\n----------------------------------------\n\nTITLE: Edge Label Renderer Usage in React\nDESCRIPTION: Demonstrates how to use the EdgeLabelRenderer component to render edge labels as HTML divs outside of SVG context. The component acts as a portal and requires pointer-events: all for mouse interactions.\nSOURCE: https://github.com/xyflow/web/blob/main/apps/example-apps/react/examples/edges/edge-label-renderer/README.mdx#2025-04-23_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n---\ntitle: Edge Label Renderer\ndescription: Render edge labels as divs on top of edges\n---\n```\n\n----------------------------------------\n\nTITLE: Using useHandleConnections Hook with Svelte\nDESCRIPTION: Example showing how to implement the useHandleConnections hook to monitor changes to connections on a specific node handle. The hook watches for connection changes on a target handle of the specified node ID.\nSOURCE: https://github.com/xyflow/web/blob/main/sites/svelteflow.dev/src/content/api-reference/hooks/use-handle-connections.mdx#2025-04-23_snippet_0\n\nLANGUAGE: svelte\nCODE:\n```\n<script lang=\"ts\">\n  import { useHandleConnections } from '@xyflow/svelte';\n\n  const connections = useHandleConnections({ nodeId: 'node-id', type: 'target' });\n\n  $: {\n    // This will be called whenever connections change\n    // for the target handle in the node with id 'node-id'\n    console.log($connections);\n  }\n</script>\n```\n\n----------------------------------------\n\nTITLE: Computing Bezier Edge Paths with @xyflow/react - JavaScript\nDESCRIPTION: This snippet illustrates how to use getBezierPath from @xyflow/react to compute SVG path data and geometry information required to render a Bezier curve between two nodes. Dependencies include the @xyflow/react package and access to the Position enum. Parameters specify positions and directions for the source and target nodes, and the function returns a tuple with the SVG path string and label coordinates/offsets. Outputs are demonstrated with console logs, showing the calculated coordinates and path string.\nSOURCE: https://github.com/xyflow/web/blob/main/sites/reactflow.dev/src/content/api-reference/utils/get-bezier-path.mdx#2025-04-23_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport { Position, getBezierPath } from '@xyflow/react';\n\nconst source = { x: 0, y: 20 };\nconst target = { x: 150, y: 100 };\n\nconst [path, labelX, labelY, offsetX, offsetY] = getBezierPath({\n  sourceX: source.x,\n  sourceY: source.y,\n  sourcePosition: Position.Right,\n  targetX: target.x,\n  targetY: target.y,\n  targetPosition: Position.Left,\n});\n\nconsole.log(path); //=> \"M0,20 C75,20 75,100 150,100\"\nconsole.log(labelX, labelY); //=> 75, 60\nconsole.log(offsetX, offsetY); //=> 75, 40\n\n```\n\n----------------------------------------\n\nTITLE: Integrating Dagre Layout with React Flow (React)\nDESCRIPTION: This component displays a React Flow instance where node positions are calculated using the Dagre library, suitable for directed graph layouts like trees. The example code, loaded remotely, likely defines a `getLayoutedElements` function that initializes a Dagre graph, adds nodes with their dimensions, computes the layout, and updates the node positions in React Flow based on the specified direction.\nSOURCE: https://github.com/xyflow/web/blob/main/sites/reactflow.dev/src/content/learn/layouting/layouting.mdx#2025-04-23_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\n<RemoteCodeViewer route=\"learn/layouting-flow-2-dagre\" framework=\"react\" />\n```\n\n----------------------------------------\n\nTITLE: Making MiniMap Interactive in React Flow in JSX\nDESCRIPTION: This snippet illustrates how to make the <MiniMap /> component pannable and zoomable by setting the respective props to true within a <ReactFlow /> instance. The configuration allows users to interact with the minimap viewport using the pannable and zoomable features. Depends on @xyflow/react, and must be used inside a React component. Inputs are the pannable and zoomable props; output is an interactive minimap.\nSOURCE: https://github.com/xyflow/web/blob/main/sites/reactflow.dev/src/content/api-reference/components/minimap.mdx#2025-04-23_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\nimport { ReactFlow, MiniMap } from '@xyflow/react';\n\nexport default function Flow() {\n  return (\n    <ReactFlow nodes={[...]]} edges={[...]]}>\n      <MiniMap pannable zoomable />\n    </ReactFlow>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Accessing Typed Nodes with useNodes Hook in React (TypeScript)\nDESCRIPTION: This snippet illustrates how to use the useNodes hook with a generic type argument to specify a custom node type in TypeScript. This approach improves type safety when working with node data structures. Prerequisites include defining a CustomNodeType type and using TypeScript along with the @xyflow/react library. The code ensures that the returned array of nodes follows the defined custom node type structure.\nSOURCE: https://github.com/xyflow/web/blob/main/sites/reactflow.dev/src/content/api-reference/hooks/use-nodes.mdx#2025-04-23_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\nconst nodes = useNodes<CustomNodeType>();\n```\n\n----------------------------------------\n\nTITLE: Defining Extended Connection Type with Edge ID - TypeScript\nDESCRIPTION: Defines the HandleConnection type, which extends the base Connection type to include an edgeId for uniquely identifying edges between node handles. The object includes optional string fields for source, target, sourceHandle, targetHandle, and a mandatory string for edgeId. This type requires TypeScript and is intended for use where edge identification is necessary for flow-based UIs or state management. Inputs are typed properties of the object, with all fields except edgeId being nullable strings; output is type safety and support for strongly-typed connections in TypeScript code.\nSOURCE: https://github.com/xyflow/web/blob/main/sites/reactflow.dev/src/content/api-reference/types/handle-connection.mdx#2025-04-23_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nexport type HandleConnection = {\n  source: string | null;\n  target: string | null;\n  sourceHandle: string | null;\n  targetHandle: string | null;\n  edgeId: string;\n};\n```\n\n----------------------------------------\n\nTITLE: Defining updateNodeColor Action in Zustand Store (TypeScript)\nDESCRIPTION: Defines an action named updateNodeColor within a Zustand store for updating the color field in a node's data property. The function receives a node id and a new color, producing an updated nodes array with the appropriate node's data.color replaced, while re-creating the object to ensure React Flow detects the state change. Dependencies include Zustand store setup, existing nodes array, and set/get functions. Inputs: nodeId (string), color (string). Output: updates store's nodes array. Mutation must clone the affected node to trigger UI updates.\nSOURCE: https://github.com/xyflow/web/blob/main/sites/reactflow.dev/src/content/learn/advanced-use/state-management.mdx#2025-04-23_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nupdateNodeColor: (nodeId: string, color: string) => {\n  set({\n    nodes: get().nodes.map((node) => {\n      if (node.id === nodeId) {\n        // it's important to create a new object here, to inform React Flow about the changes\n        return { ...node, data: { ...node.data, color } };\n      }\n\n      return node;\n    }),\n  });\n};\n```\n\n----------------------------------------\n\nTITLE: Filtering Connected Edges with XYFlow in JavaScript\nDESCRIPTION: This snippet demonstrates how to use the getConnectedEdges utility from the @xyflow/react library to filter a list of edges by those attached to a given set of nodes. It requires the @xyflow/react package to be installed in the project. The primary parameters are an array of node objects (each having at least an 'id') and an array of edge objects (each specifying a 'source' and 'target' node by id). The output is a filtered array containing only the edges where either the source or target matches any node in the nodes array. This function is intended for connectivity analysis or graph visualizations that require focus on a subset of nodes.\nSOURCE: https://github.com/xyflow/web/blob/main/sites/reactflow.dev/src/content/api-reference/utils/get-connected-edges.mdx#2025-04-23_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport { getConnectedEdges } from '@xyflow/react';\n\nconst nodes = [\n  { id: 'a', position: { x: 0, y: 0 } },\n  { id: 'b', position: { x: 100, y: 0 } },\n];\nconst edges = [\n  { id: 'a->c', source: 'a', target: 'c' },\n  { id: 'c->d', source: 'c', target: 'd' },\n];\n\nconst connectedEdges = getConnectedEdges(nodes, edges);\n// => [{ id: 'a->c', source: 'a', target: 'c' }]\n```\n\n----------------------------------------\n\nTITLE: Creating a Custom Handle Component for Data Fetching in React Flow (JSX)\nDESCRIPTION: This snippet defines an inline React component `CustomHandle` within `ColorPreview.js`. It encapsulates the logic for fetching data from a connected source node for a specific target handle. It uses the `useNodeConnections` hook to find connections to its handle ID and `useNodesData` to retrieve the data from the connected source node. An effect (`useEffect`) is used to trigger an `onChange` callback prop whenever the connected node's data changes, passing the value (or 0 if no data). It renders a target handle and a label.\nSOURCE: https://github.com/xyflow/web/blob/main/sites/reactflow.dev/src/content/learn/advanced-use/computing-flows.mdx#2025-04-23_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\n// {...}\nfunction CustomHandle({ id, label, onChange }) {\n  const connections = useNodeConnections({\n    handleType: 'target',\n    handleId: id,\n  });\n\n  const nodeData = useNodesData(connections?.[0].source);\n\n  useEffect(() => {\n    onChange(nodeData?.data ? nodeData.data.value : 0);\n  }, [nodeData]);\n\n  return (\n    <div>\n      <Handle\n        type=\"target\"\n        position={Position.Left}\n        id={id}\n        className=\"handle\"\n      />\n      <label htmlFor=\"red\" className=\"label\">\n        {label}\n      </label>\n    </div>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Styling Custom Svelte Flow Node with TailwindCSS - Svelte\nDESCRIPTION: This Svelte component snippet showcases a custom node implementation for Svelte Flow, styled with TailwindCSS utility classes. It defines props using TypeScript typings for node data (such as emoji, name, and job), and uses imported Handle and Position from '@xyflow/svelte' to provide interactive connection points. The template demonstrates how to apply Tailwind classes directly to structure and style the node's visuals. It requires '@xyflow/svelte' and TailwindCSS as dependencies, expects a 'data' prop formatted with 'emoji', 'name', and 'job', and outputs a styled node compatible with Svelte Flow's canvas.\nSOURCE: https://github.com/xyflow/web/blob/main/sites/svelteflow.dev/src/content/learn/guides/theming.mdx#2025-04-23_snippet_3\n\nLANGUAGE: svelte\nCODE:\n```\n<script lang=\"ts\">\n  import { Handle, Position, type NodeProps } from '@xyflow/svelte';\n\n  type $$Props = NodeProps;\n  export let data: $$Props['data'];\n</script>\n\n<div class=\"px-4 py-2 shadow-md rounded-md bg-white border-2 border-stone-400\">\n  <div class=\"flex\">\n    <div class=\"rounded-full w-12 h-12 flex justify-center items-center bg-gray-100\">\n      {data.emoji}\n    </div>\n    <div class=\"ml-2\">\n      <div class=\"text-lg font-bold\">{data.name}</div>\n      <div class=\"text-gray-500\">{data.job}</div>\n    </div>\n  </div>\n  <Handle\n    type=\"target\"\n    position={Position.Top}\n    class=\"w-16 !bg-teal-500 rounded-none border-none\"\n  />\n  <Handle\n    type=\"source\"\n    position={Position.Bottom}\n    class=\"w-16 !bg-teal-500 rounded-none border-none\"\n  />\n</div>\n```\n\n----------------------------------------\n\nTITLE: Defining a Type Guard for Custom Nodes - React Flow - TypeScript\nDESCRIPTION: Shows how to implement a custom type guard function (isNumberNode), enabling runtime filtering of nodes by type within TypeScript. Dependencies are custom node and union type definitions. The function checks the node's type and outputs a boolean; using this in an array filter safely narrows the result type to a specific node variant.\nSOURCE: https://github.com/xyflow/web/blob/main/sites/reactflow.dev/src/content/learn/advanced-use/typescript.mdx#2025-04-23_snippet_7\n\nLANGUAGE: TypeScript\nCODE:\n```\nfunction isNumberNode(node: CustomNodeType): node is NumberNode {\n  return node.type === 'number';\n}\n\n// numberNodes is of type NumberNode[]\nconst numberNodes = nodes.filter(isNumberNode);\n```\n\n----------------------------------------\n\nTITLE: Connecting React Flow onNodesDelete Event to Zustand Action in JSX\nDESCRIPTION: Demonstrates how to connect React Flow's `onNodesDelete` event to a Zustand store action. It uses a selector to get the `removeNodes` action from the store and passes it directly as the `onNodesDelete` prop to the `ReactFlow` component. This triggers the store action whenever nodes are deleted in the React Flow graph.\nSOURCE: https://github.com/xyflow/web/blob/main/sites/reactflow.dev/src/content/learn/tutorials/react-flow-and-the-web-audio-api.mdx#2025-04-23_snippet_20\n\nLANGUAGE: jsx\nCODE:\n```\nconst selector = store => ({\n  ...,\n  onNodesDelete: store.removeNodes\n});\n\nexport default function App() {\n  const store = useStore(selector, shallow);\n\n  return (\n    <ReactFlow\n      onNodesDelete={store.onNodesDelete}\n      ...\n    >\n      <Background />\n    </ReactFlow>\n  )\n};\n```\n\n----------------------------------------\n\nTITLE: Creating basic React Flow App component\nDESCRIPTION: Implements a basic App component that renders an empty React Flow graph with a Background plugin. This serves as the starting point for building the audio processing graph interface.\nSOURCE: https://github.com/xyflow/web/blob/main/sites/reactflow.dev/src/content/learn/tutorials/react-flow-and-the-web-audio-api.mdx#2025-04-23_snippet_6\n\nLANGUAGE: jsx\nCODE:\n```\nimport React from 'react';\nimport { ReactFlow, Background } from '@xyflow/react';\n\nexport default function App() {\n  return (\n    <ReactFlow>\n      <Background />\n    </ReactFlow>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Updating Node Label in Store - TypeScript\nDESCRIPTION: Defines an updateNodeLabel action that takes a nodeId and a new label, then updates the matching node in the application store by copying its existing data and replacing the label. Triggers React Flow to recognize the data change by creating a new data object. Inputs: target nodeId and new label. Output: modified nodes array in store. Dependency: structure of nodes in store and set/get utilities. Limitation: Only updates label property on node data.\nSOURCE: https://github.com/xyflow/web/blob/main/sites/reactflow.dev/src/content/learn/tutorials/mind-map-app-with-react-flow.mdx#2025-04-23_snippet_16\n\nLANGUAGE: ts\nCODE:\n```\nupdateNodeLabel: (nodeId: string, label: string) => {\n  set({\n    nodes: get().nodes.map((node) => {\n      if (node.id === nodeId) {\n        // it's important to create a new object here, to inform React Flow about the changes\n        node.data = { ...node.data, label };\n      }\n\n      return node;\n    }),\n  });\n},\n```\n\n----------------------------------------\n\nTITLE: Creating a Custom Edge with BaseEdge in React Flow\nDESCRIPTION: This snippet demonstrates how to create a custom edge component using BaseEdge. It calculates a straight path between source and target points, then uses BaseEdge to render the edge with proper styling and label handling.\nSOURCE: https://github.com/xyflow/web/blob/main/sites/reactflow.dev/src/content/api-reference/components/base-edge.mdx#2025-04-23_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport { BaseEdge } from '@xyflow/react';\n\nexport function CustomEdge({ sourceX, sourceY, targetX, targetY, ...props }) {\n  const [edgePath] = getStraightPath({\n    sourceX,\n    sourceY,\n    targetX,\n    targetY,\n  });\n\n  return <BaseEdge path={edgePath} {...props} />;\n}\n```\n\n----------------------------------------\n\nTITLE: Using Background Component in SvelteFlow\nDESCRIPTION: Example of how to integrate the Background component within a SvelteFlow application. This snippet demonstrates initializing empty node and edge stores and applying a dotted background pattern with a custom color.\nSOURCE: https://github.com/xyflow/web/blob/main/sites/svelteflow.dev/src/content/api-reference/components/background.mdx#2025-04-23_snippet_0\n\nLANGUAGE: svelte\nCODE:\n```\n<script lang=\"ts\">\n  import { writable } from 'svelte/store';\n  import { SvelteFlow, Background, BackgroundVariant } from '@xyflow/svelte';\n\n  const nodes = writable([]);\n  const edges = writable([]);\n</script>\n\n<SvelteFlow nodes={nodes} edges={edges}>\n  <Background bgColor=\"#ccc\" variant={BackgroundVariant.Dots} />\n</SvelteFlow>\n```\n\n----------------------------------------\n\nTITLE: Defining Node Handle Type in TypeScript\nDESCRIPTION: Declares the NodeHandle type, encapsulating x/y coordinates, position, an optional identifier, dimensions, and handle type ('source' or 'target'). This type is used to standardize the properties and behaviors of node handles in a flow-based graph application. Dependencies include the Position type and potentially related types for marker or edge configuration. Key parameters are x, y, and position (all required), while id, width, height, and type are optional, providing flexibility for a variety of node configurations. The type supports both mandatory positioning and optional metadata for extensibility.\nSOURCE: https://github.com/xyflow/web/blob/main/sites/reactflow.dev/src/content/api-reference/types/node-handle.mdx#2025-04-23_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\nexport type NodeHandle = {\n  x: number,\n  y: number,\n  position: Position,\n  id?: string | null,\n  width?: number,\n  height?: number,\n  type?: 'source' | 'target',\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Oscillator Node Component in React Flow\nDESCRIPTION: Custom oscillator node component with frequency and waveform controls. Uses React Flow's Handle component for node connections and includes nodrag class for proper interaction.\nSOURCE: https://github.com/xyflow/web/blob/main/sites/reactflow.dev/src/content/learn/tutorials/react-flow-and-the-web-audio-api.mdx#2025-04-23_snippet_10\n\nLANGUAGE: jsx\nCODE:\n```\nimport React from 'react';\nimport { Handle } from '@xyflow/react';\n\nimport { useStore } from '../store';\n\nexport default function Osc({ id, data }) {\n  return (\n    <div>\n      <div>\n        <p>Oscillator Node</p>\n\n        <label>\n          <span>Frequency</span>\n          <input\n            className=\"nodrag\"\n            type=\"range\"\n            min=\"10\"\n            max=\"1000\"\n            value={data.frequency} />\n          <span>{data.frequency}Hz</span>\n        </label>\n\n        <label>\n          <span>Waveform</span>\n          <select className=\"nodrag\" value={data.type}>\n            <option value=\"sine\">sine</option>\n            <option value=\"triangle\">triangle</option>\n            <option value=\"sawtooth\">sawtooth</option>\n            <option value=\"square\">square</option>\n          </select>\n      </div>\n\n      <Handle type=\"source\" position=\"bottom\" />\n    </div>\n  );\n};\n```\n\n----------------------------------------\n\nTITLE: Enabling Dark Mode in React Flow using JSX\nDESCRIPTION: Demonstrates how to activate the built-in dark mode for a React Flow component by setting the `colorMode` prop to 'dark'. Requires the React Flow component and its necessary props like `nodes` and `edges`.\nSOURCE: https://github.com/xyflow/web/blob/main/sites/reactflow.dev/src/content/learn/customization/theming.mdx#2025-04-23_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\nimport ReactFlow from '@xyflow/react';\n\nexport default function Flow() {\n  return <ReactFlow colorMode=\"dark\" nodes={[...]} edges={[...]} />\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Panel Position Types - TypeScript\nDESCRIPTION: This TypeScript code snippet defines the PanelPosition type as a union of string literals representing valid locations for UI panels over a flow viewport. Components like MiniMap and Controls depend on this type for their position prop, restricting possible values to six allowed locations. Input and output are not applicable, as this is a type-only definition; its usage enforces design constraints and consistency for component positions.\nSOURCE: https://github.com/xyflow/web/blob/main/sites/reactflow.dev/src/content/api-reference/types/panel-position.mdx#2025-04-23_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nexport type PanelPosition =\n  | 'top-left'\n  | 'top-center'\n  | 'top-right'\n  | 'bottom-left'\n  | 'bottom-center'\n  | 'bottom-right';\n```\n\n----------------------------------------\n\nTITLE: Configuring Initial Viewport in React Flow v11 (New API)\nDESCRIPTION: Demonstrates setting the initial viewport in React Flow v11 using the consolidated `defaultViewport` prop. This prop accepts an object containing `x`, `y`, and `zoom` properties.\nSOURCE: https://github.com/xyflow/web/blob/main/sites/reactflow.dev/src/content/learn/troubleshooting/migrate-to-v11.mdx#2025-04-23_snippet_4\n\nLANGUAGE: jsx\nCODE:\n```\nimport { ReactFlow } from '@xyflow/react';\n\nconst defaultViewport: Viewport = { x: 10, y: 15, zoom: 5 };\n\nconst Flow = () => {\n  return <ReactFlow defaultViewport={defaultViewport} />;\n};\n\nexport default Flow;\n```\n\n----------------------------------------\n\nTITLE: Styling React Flow Nodes Based on Color Mode using CSS\nDESCRIPTION: CSS rules demonstrating how to style React Flow nodes differently based on the active color mode. It targets the `.dark` and `.light` classes added to the root `.react-flow` element when the `colorMode` prop is used.\nSOURCE: https://github.com/xyflow/web/blob/main/sites/reactflow.dev/src/content/learn/customization/theming.mdx#2025-04-23_snippet_2\n\nLANGUAGE: css\nCODE:\n```\n.dark .react-flow__node {\n  background: #777;\n  color: white;\n}\n\n.light .react-flow__node {\n  background: white;\n  color: #111;\n}\n```\n\n----------------------------------------\n\nTITLE: Using useConnection Hook in React Component\nDESCRIPTION: This example demonstrates how to use the useConnection hook in a React component to display information about active connections. The hook returns connection details when there's an active connection, or null otherwise.\nSOURCE: https://github.com/xyflow/web/blob/main/sites/reactflow.dev/src/content/api-reference/hooks/use-connection.mdx#2025-04-23_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nimport { useConnection } from '@xyflow/react';\n\nexport default function App() {\n  const connection = useConnection();\n\n  return (\n    <div>\n      {connection ? `Someone is trying to make a connection from ${connection.fromNode} to this one.` : 'There are currently no incoming connections!'}\n    </div>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing the Controls Component in SvelteFlow\nDESCRIPTION: A basic implementation of the Controls component within a SvelteFlow instance. It demonstrates how to initialize nodes and edges as writable stores and add the Controls component to a SvelteFlow container.\nSOURCE: https://github.com/xyflow/web/blob/main/sites/svelteflow.dev/src/content/api-reference/components/controls.mdx#2025-04-23_snippet_0\n\nLANGUAGE: svelte\nCODE:\n```\n<script lang=\"ts\">\n  import { writable } from 'svelte/store';\n  import { SvelteFlow, Controls } from '@xyflow/svelte';\n\n  const nodes = writable([]);\n  const edges = writable([]);\n</script>\n\n<SvelteFlow nodes={nodes} edges={edges}>\n  <Controls />\n</SvelteFlow>\n```\n\n----------------------------------------\n\nTITLE: Using ViewportPortal Component in React\nDESCRIPTION: Example showing how to use the ViewportPortal component to position a div element at specific coordinates within the flow viewport. The component will be affected by the same zooming and panning transformations as other flow elements.\nSOURCE: https://github.com/xyflow/web/blob/main/sites/reactflow.dev/src/content/api-reference/components/viewport-portal.mdx#2025-04-23_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport React from 'react';\nimport { ViewportPortal } from '@xyflow/react';\n\nexport default function () {\n  return (\n    <ViewportPortal>\n      <div\n        style={{ transform: 'translate(100px, 100px)', position: 'absolute' }}\n      >\n        This div is positioned at [100, 100] on the flow.\n      </div>\n    </ViewportPortal>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Applying Inline Styles to React Flow Component using JSX\nDESCRIPTION: Shows how to apply custom inline CSS styles directly to the React Flow component using the `style` prop. This example sets a red background, full width, and a fixed height.\nSOURCE: https://github.com/xyflow/web/blob/main/sites/reactflow.dev/src/content/learn/customization/theming.mdx#2025-04-23_snippet_3\n\nLANGUAGE: jsx\nCODE:\n```\nimport ReactFlow from '@xyflow/react'\n\nconst styles = {\n  background: 'red',\n  width: '100%',\n  height: 300,\n};\n\nexport default function Flow() {\n  return <ReactFlow style={styles} nodes={[...]} edges={[...]} />\n}\n```\n\n----------------------------------------\n\nTITLE: TypeScript Implementation with Custom Edge Types\nDESCRIPTION: Shows how to use useEdgesState hook with TypeScript generic type arguments for custom edge types. This enables type safety when working with custom edge configurations.\nSOURCE: https://github.com/xyflow/web/blob/main/sites/reactflow.dev/src/content/api-reference/hooks/use-edges-state.mdx#2025-04-23_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\nconst nodes = useEdgesState<CustomEdgeType>();\n```\n\n----------------------------------------\n\nTITLE: Creating Custom Handle with Validation in React Flow\nDESCRIPTION: This example shows how to create a custom handle component with connection validation. It only allows connections when the source matches a specific ID, demonstrating the isValidConnection prop usage.\nSOURCE: https://github.com/xyflow/web/blob/main/sites/reactflow.dev/src/content/api-reference/components/handle.mdx#2025-04-23_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\nimport { Handle, Position } from '@xyflow/react';\n\nexport const TargetHandleWithValidation = ({ position, source }) => (\n  <Handle\n    type=\"target\"\n    position={position}\n    isValidConnection={(connection) => connection.source === source}\n    onConnect={(params) => console.log('handle onConnect', params)}\n    style={{ background: '#fff' }}\n  />\n);\n```\n\n----------------------------------------\n\nTITLE: Using useEdges Hook in Svelte Component\nDESCRIPTION: Example of how to import and use the useEdges hook in a Svelte component to access the current edges store.\nSOURCE: https://github.com/xyflow/web/blob/main/sites/svelteflow.dev/src/content/api-reference/hooks/use-edges.mdx#2025-04-23_snippet_0\n\nLANGUAGE: svelte\nCODE:\n```\n<script lang=\"ts\">\n  import { useEdges } from '@xyflow/svelte';\n\n  const edges = useEdges();\n</script>\n```\n\n----------------------------------------\n\nTITLE: Defining the DeleteElements Type Signature in TypeScript\nDESCRIPTION: This TypeScript type definition specifies the signature for the `DeleteElements` function. It accepts an object containing optional arrays of partial `Node` and `Edge` objects (each must include an `id`). The function returns a Promise that resolves with an object containing arrays of the fully deleted `Node` and `Edge` objects. As per the context, the function is expected to handle the deletion of connected edges and child nodes associated with the deleted nodes.\nSOURCE: https://github.com/xyflow/web/blob/main/sites/reactflow.dev/src/content/api-reference/types/delete-elements.mdx#2025-04-23_snippet_0\n\nLANGUAGE: ts\nCODE:\n```\nexport type DeleteElements = (payload: {\n  nodes?: (Partial<Node> & { id: Node['id'] })[];\n  edges?: (Partial<Edge> & { id: Edge['id'] })[];\n}) => Promise<{\n  deletedNodes: Node[];\n  deletedEdges: Edge[];\n}>;\n```\n\n----------------------------------------\n\nTITLE: Basic MiniMap Implementation in Svelte Flow\nDESCRIPTION: Basic example showing how to implement the MiniMap component within a Svelte Flow instance. Demonstrates initialization with writable stores for nodes and edges.\nSOURCE: https://github.com/xyflow/web/blob/main/sites/svelteflow.dev/src/content/api-reference/components/mini-map.mdx#2025-04-23_snippet_0\n\nLANGUAGE: svelte\nCODE:\n```\n<script lang=\"ts\">\n  import { writable } from 'svelte/store';\n  import { SvelteFlow, MiniMap } from '@xyflow/svelte';\n\n  const nodes = writable([]);\n  const edges = writable([]);\n</script>\n\n<SvelteFlow nodes={nodes} edges={edges}>\n  <MiniMap nodeStrokeWidth={3} />\n</SvelteFlow>\n```\n\n----------------------------------------\n\nTITLE: Drawing Multiple Connection Lines in React Flow\nDESCRIPTION: Example showing how to implement multiple simultaneous connection lines from selected nodes in React Flow. Uses internalsSymbol to access node properties and requires proper onConnect handler implementation to create multiple connections.\nSOURCE: https://github.com/xyflow/web/blob/main/apps/example-apps/react/examples/edges/multi-connection-line/README.mdx#2025-04-23_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\n// No direct code snippets provided in the text, code is referenced as being available through RemoteCodeViewer component at 'examples/edges/multi-connection-line'\n```\n\n----------------------------------------\n\nTITLE: Importing React Flow v11 CSS Styles\nDESCRIPTION: Illustrates the mandatory CSS import required for React Flow v11. Developers must explicitly import either the default styles (`style.css`) or basic styles (`base.css`) from the `@xyflow/react` package for the library to render correctly.\nSOURCE: https://github.com/xyflow/web/blob/main/sites/reactflow.dev/src/content/learn/troubleshooting/migrate-to-v11.mdx#2025-04-23_snippet_2\n\nLANGUAGE: js\nCODE:\n```\n// default styling\nimport '@xyflow/react/dist/style.css';\n\n// or if you just want basic styles\nimport '@xyflow/react/dist/base.css';\n```\n\n----------------------------------------\n\nTITLE: Defining Edges Connected to Specific Handles (JavaScript)\nDESCRIPTION: Provides an example of defining edges that connect to specific handles on a source node. The `sourceHandle` property in each edge object specifies the `id` ('a' or 'b') of the handle on the source node ('node-1') to which the edge should attach. This is necessary when nodes have multiple source or target handles.\nSOURCE: https://github.com/xyflow/web/blob/main/sites/reactflow.dev/src/content/learn/customization/custom-nodes.mdx#2025-04-23_snippet_6\n\nLANGUAGE: js\nCODE:\n```\nconst initialEdges = [\n  { id: 'edge-1', source: 'node-1', sourceHandle: 'a', target: 'node-2' },\n  { id: 'edge-2', source: 'node-1', sourceHandle: 'b', target: 'node-3' },\n];\n```\n\n----------------------------------------\n\nTITLE: Correct useReactFlow Hook Usage with External Provider (JSX)\nDESCRIPTION: This snippet illustrates the correct way to use the `useReactFlow` hook. The hook is called within the `Flow` component, which is then wrapped by `<ReactFlowProvider>` in the `FlowWithProvider` parent component. This ensures the `Flow` component has access to the necessary React Flow context.\nSOURCE: https://github.com/xyflow/web/blob/main/sites/reactflow.dev/src/content/learn/troubleshooting/index.mdx#2025-04-23_snippet_2\n\nLANGUAGE: jsx\nCODE:\n```\nimport { ReactFlow, ReactFlowProvider } from '@xyflow/react';\nimport '@xyflow/react/dist/style.css';\n\nfunction Flow(props) {\n  // you can access the internal state here\n  const reactFlowInstance = useReactFlow();\n\n  return <ReactFlow {...props} />;\n}\n\n// wrapping with ReactFlowProvider is done outside of the component\nfunction FlowWithProvider(props) {\n  return (\n    <ReactFlowProvider>\n      <Flow {...props} />\n    </ReactFlowProvider>\n  );\n}\n\nexport default FlowWithProvider;\n```\n\n----------------------------------------\n\nTITLE: Importing and Using getOutgoers in TypeScript\nDESCRIPTION: This snippet demonstrates how to import the `getOutgoers` function from `@xyflow/react` and use it to find the outgoing neighbor nodes of a given node within a graph defined by `nodes` and `edges` arrays. The function takes the source node object, the list of all nodes, and the list of all edges as arguments and returns an array of nodes that are targets of edges originating from the source node.\nSOURCE: https://github.com/xyflow/web/blob/main/sites/reactflow.dev/src/content/api-reference/utils/get-outgoers.mdx#2025-04-23_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { getOutgoers } from '@xyflow/react';\n\nconst nodes = [];\nconst edges = [];\n\nconst outgoers = getOutgoers(\n  { id: '1', position: { x: 0, y: 0 }, data: { label: 'node' } },\n  nodes,\n  edges,\n);\n```\n\n----------------------------------------\n\nTITLE: Using EdgeText Component in React Flow\nDESCRIPTION: Example of using the EdgeText component to create a custom edge label with styling for the text and background. The component allows for customization of position, text content, text style, background visibility, background styling, padding, and border radius.\nSOURCE: https://github.com/xyflow/web/blob/main/sites/reactflow.dev/src/content/api-reference/components/edge-text.mdx#2025-04-23_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport { EdgeText } from '@xyflow/react';\n\nexport function CustomEdgeLabel({ label }) {\n  return (\n    <EdgeText\n      x={100}\n      y={100}\n      label={label}\n      labelStyle={{ fill: 'white' }}\n      labelShowBg\n      labelBgStyle={{ fill: 'red' }}\n      labelBgPadding={[2, 4]}\n      labelBgBorderRadius={2}\n    />\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Using Panel Component in React Flow\nDESCRIPTION: Example showing how to use the Panel component to position content at different locations within a React Flow instance. The component supports six different positioning options: top-left, top-center, top-right, bottom-left, bottom-center, and bottom-right.\nSOURCE: https://github.com/xyflow/web/blob/main/sites/reactflow.dev/src/content/api-reference/components/panel.mdx#2025-04-23_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport { ReactFlow, Panel } from '@xyflow/react';\n\nexport default function Flow() {\n  return (\n    <ReactFlow nodes={[...]} fitView>\n      <Panel position=\"top-left\">top-left</Panel>\n      <Panel position=\"top-center\">top-center</Panel>\n      <Panel position=\"top-right\">top-right</Panel>\n      <Panel position=\"bottom-left\">bottom-left</Panel>\n      <Panel position=\"bottom-center\">bottom-center</Panel>\n      <Panel position=\"bottom-right\">bottom-right</Panel>\n    </ReactFlow>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Using isEdge to Validate an Edge Object in JavaScript\nDESCRIPTION: This snippet demonstrates how to import the `isEdge` function from `@xyflow/react` and use it to check if a given object (`edge`) has the required properties (`id`, `source`, `target`) to be considered a valid Edge. In TypeScript, this function acts as a type guard, narrowing the type of the object within the conditional block if the function returns true.\nSOURCE: https://github.com/xyflow/web/blob/main/sites/reactflow.dev/src/content/api-reference/utils/is-edge.mdx#2025-04-23_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport { isEdge } from '@xyflow/react';\n\nconst edge = {\n  id: 'edge-a',\n  source: 'a',\n  target: 'b',\n};\n\nif (isEdge(edge)) {\n  // ...\n}\n```\n\n----------------------------------------\n\nTITLE: Embedding Node Toolbar Example using RemoteCodeViewer in React\nDESCRIPTION: This JSX snippet renders the `RemoteCodeViewer` component to display code fetched from a specific route (`examples/nodes/node-toolbar`). It's configured for the React framework (`framework=\"react\"`) and hides the editor interface (`showEditor={false}`). This is used to showcase the new Node Toolbar example directly within the documentation page.\nSOURCE: https://github.com/xyflow/web/blob/main/sites/reactflow.dev/src/content/whats-new/2024-01-18.mdx#2025-04-23_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\n<RemoteCodeViewer\n  route=\"examples/nodes/node-toolbar\"\n  framework=\"react\"\n  showEditor={false}\n/>\n```\n\n----------------------------------------\n\nTITLE: Creating Custom Delete Action for Node Header - React Flow - TypeScript\nDESCRIPTION: Implements a reusable custom delete action component for node headers, intended for use within a React Flow graph. This component leverages React.forwardRef to support ref forwarding, and uses useNodeId and useReactFlow hooks to access the node context and manipulate graph nodes. The main parameter is props, excluding the onClick prop, and the button removes its associated node from the React Flow graph when clicked. Dependencies include React, useReactFlow, useNodeId, NodeHeaderAction, and an icon component Trash.\nSOURCE: https://github.com/xyflow/web/blob/main/sites/reactflow.dev/src/content/components/nodes/node-header.mdx#2025-04-23_snippet_0\n\nLANGUAGE: TSX\nCODE:\n```\nexport type NodeHeaderCustomDeleteActionProps = Omit<\\n  NodeHeaderActionProps,\\n  'onClick'\\n>;\n\n/**\\n * A custom delete action button that removes the node from the graph when clicked.\\n */\\nexport const NodeHeaderCustomDeleteAction = React.forwardRef<\\n  HTMLButtonElement,\\n  NodeHeaderCustomDeleteActionProps\\n>((props, ref) => {\\n  const id = useNodeId();\\n  const { setNodes } = useReactFlow();\\n\\n  const handleClick = useCallback(() => {\\n    setNodes((prevNodes) => prevNodes.filter((node) => node.id !== id));\\n  }, []);\\n\\n  return (\\n    <NodeHeaderAction\\n      ref={ref}\\n      onClick={handleClick}\\n      variant=\\\"ghost\\\"\\n      {...props}\\n    >\\n      <Trash />\\n    </NodeHeaderAction>\\n  );\\n});\\n\\nNodeHeaderCustomDeleteAction.displayName = 'NodeHeaderCustomDeleteAction';\n```\n\n----------------------------------------\n\nTITLE: Implementing the Controls Component in React Flow\nDESCRIPTION: This snippet demonstrates how to import and use the Controls component within a ReactFlow instance. The Controls component provides a panel with zoom, fit view, and lock viewport functionality.\nSOURCE: https://github.com/xyflow/web/blob/main/sites/reactflow.dev/src/content/api-reference/components/controls.mdx#2025-04-23_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nimport { ReactFlow, Controls } from '@xyflow/react'\n\nexport default function Flow() {\n  return (\n    <ReactFlow nodes={[...]} edges={[...]}>\n      <Controls />\n    </ReactFlow>\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Importing Svelte Flow Components and Styles in JavaScript\nDESCRIPTION: This snippet imports the main Svelte Flow components (SvelteFlow, Background, Controls) from '@xyflow/svelte' and ensures proper styling by also importing the stylesheet. It is required to include the stylesheet for correct visual rendering and component behavior. Dependencies include the '@xyflow/svelte' npm package and its CSS, and these imports are typically placed at the top of your Svelte file before usage.\nSOURCE: https://github.com/xyflow/web/blob/main/sites/svelteflow.dev/src/content/learn/getting-started/building-a-flow.mdx#2025-04-23_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport { SvelteFlow, Background, Controls } from '@xyflow/svelte';\n// 👇 always import the styles\nimport '@xyflow/svelte/dist/style.css';\n```\n\n----------------------------------------\n\nTITLE: Displaying Multiple Markdown Slides with Manual Layout in App.tsx (React)\nDESCRIPTION: This snippet updates the `App.tsx` component to demonstrate rendering multiple `Slide` nodes. It modifies the `nodes` array to include three slides, each with markdown content in their `data.source` property. The positions are manually calculated using `SLIDE_WIDTH` to place them side-by-side. It also adds the `minZoom` prop to the `<ReactFlow />` component to allow zooming out further. The highlighted lines show the import of `SLIDE_WIDTH`, the updated nodes array, and the `minZoom` prop addition.\nSOURCE: https://github.com/xyflow/web/blob/main/sites/reactflow.dev/src/content/learn/tutorials/slide-shows-with-react-flow.mdx#2025-04-23_snippet_6\n\nLANGUAGE: tsx\nCODE:\n```\nimport { ReactFlow } from '@xyflow/react';\nimport { Slide, SLIDE_WIDTH } from './Slide';\n\nconst nodeTypes = {\n  slide: Slide,\n};\n\nexport default function App() {\n  const nodes = [\n    {\n      id: '0',\n      type: 'slide',\n      position: { x: 0, y: 0 },\n      data: { source: '# Hello, React Flow!' },\n    },\n    {\n      id: '1',\n      type: 'slide',\n      position: { x: SLIDE_WIDTH, y: 0 },\n      data: { source: '...' },\n    },\n    {\n      id: '2',\n      type: 'slide',\n      position: { x: SLIDE_WIDTH * 2, y: 0 },\n      data: { source: '...' },\n    },\n  ];\n\n  return <ReactFlow nodes={nodes} nodeTypes={nodeTypes} fitView minZoom={0.1} />;\n}\n```\n\n----------------------------------------\n\nTITLE: Using useUpdateNodeInternals Hook in Svelte Flow\nDESCRIPTION: This snippet demonstrates how to import and use the useUpdateNodeInternals hook in a Svelte component. This hook should be called when programmatically adding, removing, or updating handle positions to ensure Svelte Flow properly updates node dimensions and handle positions on the canvas.\nSOURCE: https://github.com/xyflow/web/blob/main/sites/svelteflow.dev/src/content/api-reference/hooks/use-update-node-internals.mdx#2025-04-23_snippet_0\n\nLANGUAGE: svelte\nCODE:\n```\n<script lang=\"ts\">\n  import { Handle, useUpdateNodeInternals } from '@xyflow/svelte';\n\n  const updateNodeInternals = useUpdateNodeInternals();\n</script>\n```\n\n----------------------------------------\n\nTITLE: Creating a Custom Node with TailwindCSS\nDESCRIPTION: This snippet shows how to create a custom node component using TailwindCSS for styling. It includes handling of data props and positioning of handles.\nSOURCE: https://github.com/xyflow/web/blob/main/sites/reactflow.dev/src/content/learn/customization/theming.mdx#2025-04-23_snippet_7\n\nLANGUAGE: jsx\nCODE:\n```\nfunction CustomNode({ data }) {\n  return (\n    <div className=\"px-4 py-2 shadow-md rounded-md bg-white border-2 border-stone-400\">\n      <div className=\"flex\">\n        <div className=\"rounded-full w-12 h-12 flex justify-center items-center bg-gray-100\">\n          {data.emoji}\n        </div>\n        <div className=\"ml-2\">\n          <div className=\"text-lg font-bold\">{data.name}</div>\n          <div className=\"text-gray-500\">{data.job}</div>\n        </div>\n      </div>\n\n      <Handle\n        type=\"target\"\n        position={Position.Top}\n        className=\"w-16 !bg-teal-500\"\n      />\n      <Handle\n        type=\"source\"\n        position={Position.Bottom}\n        className=\"w-16 !bg-teal-500\"\n      />\n    </div>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Installing Project Dependencies using pnpm\nDESCRIPTION: Installs all necessary project dependencies using the pnpm package manager. This is the first step required when setting up the development environment for contributing to the React Flow project via Pull Requests.\nSOURCE: https://github.com/xyflow/web/blob/main/CONTRIBUTING.md#2025-04-23_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\npnpm install\n```\n\n----------------------------------------\n\nTITLE: Implementing a Custom Edge with Custom Data - React Flow - TypeScript\nDESCRIPTION: This code defines a custom edge type in TypeScript for React Flow, with specific data and a unique edge type string, and renders a custom SVG path. It requires @xyflow/react for types, path utilities, and rendering helpers. The input is edge coordinates and identifiers, and the output is a rendered straight edge; this enables advanced visual or behavioral customizations for edges.\nSOURCE: https://github.com/xyflow/web/blob/main/sites/reactflow.dev/src/content/learn/advanced-use/typescript.mdx#2025-04-23_snippet_3\n\nLANGUAGE: TypeScript\nCODE:\n```\nimport { getStraightPath, BaseEdge, type EdgeProps, type Edge } from '@xyflow/react';\n\ntype CustomEdge = Edge<{ value: number }, 'custom'>;\n\nexport default function CustomEdge({\n  id,\n  sourceX,\n  sourceY,\n  targetX,\n  targetY,\n}: EdgeProps<CustomEdge>) {\n  const [edgePath] = getStraightPath({ sourceX, sourceY, targetX, targetY });\n\n  return <BaseEdge id={id} path={edgePath} />;\n}\n```\n\n----------------------------------------\n\nTITLE: Initializing useStoreApi with Custom Types (TypeScript/TSX)\nDESCRIPTION: This snippet shows how to initialize the useStoreApi hook using custom node and edge types via TypeScript generics. It requires a properly defined CustomNodeType and CustomEdgeType in the same project. This allows type-safe access to the store's state and dispatch, reducing runtime errors in strongly-typed applications. Inputs: optional type arguments. Outputs: a store API instance strongly typed to custom node and edge types. Limitations: Requires TypeScript, and types must be defined elsewhere in the codebase.\nSOURCE: https://github.com/xyflow/web/blob/main/sites/reactflow.dev/src/content/api-reference/hooks/use-store-api.mdx#2025-04-23_snippet_1\n\nLANGUAGE: TSX\nCODE:\n```\nconst store = useStoreApi<CustomNodeType, CustomEdgeType>();\n\n```\n\n----------------------------------------\n\nTITLE: Initializing React Flow with elements array (Old API) - React (JSX)\nDESCRIPTION: This snippet demonstrates initializing and managing a basic flow graph using the legacy React Flow v9 API with an `elements` array. It uses hooks such as `useState` and `useCallback` to maintain flow state, and employs the `removeElements` and `addEdge` utilities for manipulations. Inputs include an array of nodes/edges, callbacks for removal and creation, and renders the `ReactFlow` component. Outputs are rendered flow UI and updated state on user interactions. Requires `react-flow-renderer` v9.\nSOURCE: https://github.com/xyflow/web/blob/main/sites/reactflow.dev/src/content/learn/troubleshooting/migrate-to-v10.mdx#2025-04-23_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport { useState, useCallback } from 'react';\\nimport { ReactFlow, removeElements, addEdge } from 'react-flow-renderer';\\n\\nconst initialElements = [\\n  { id: '1', data: { label: 'Node 1' }, position: { x: 250, y: 0 } },\\n  { id: '2', data: { label: 'Node 2' }, position: { x: 150, y: 100 } },\\n  { id: 'e1-2', source: '1', target: '2' },\\n];\\n\\nconst BasicFlow = () => {\\n  const [elements, setElements] = useState(initialElements);\\n  const onElementsRemove = useCallback(\\n    (elementsToRemove) =>\\n      setElements((els) => removeElements(elementsToRemove, els)),\\n    [],\\n  );\\n  const onConnect = useCallback((connection) =>\\n    setElements((es) => addEdge(connection, es)),\\n  );\\n\\n  return (\\n    <ReactFlow\\n      elements={elements}\\n      onElementsRemove={onElementsRemove}\\n      onConnect={onConnect}\\n    />\\n  );\\n};\\n\\nexport default BasicFlow;\n```\n\n----------------------------------------\n\nTITLE: Subscribing to Node Data with useNodesData Hook and Generics (TypeScript/TSX)\nDESCRIPTION: Shows how to use the useNodesData hook with a generic type parameter in TypeScript, enabling type-safe subscriptions to node data objects. This pattern is particularly useful when working with custom node types to leverage TypeScript's static typing. Requires @xyflow/react and a defined NodesType type. Pass an array of node ID strings to the hook, and it returns node data typed according to the provided generic.\nSOURCE: https://github.com/xyflow/web/blob/main/sites/reactflow.dev/src/content/api-reference/hooks/use-nodes-data.mdx#2025-04-23_snippet_1\n\nLANGUAGE: TSX\nCODE:\n```\nconst nodesData = useNodesData<NodesType>(['nodeId-1', 'nodeId-2']);\n```\n\n----------------------------------------\n\nTITLE: Initializing an Uncontrolled React Flow Component in React\nDESCRIPTION: Sets up a basic uncontrolled React Flow instance where state is managed internally. It demonstrates passing `defaultEdgeOptions` to style newly created edges automatically, as `onConnect` cannot be used for passing custom options in this mode. This approach simplifies the initial setup as node/edge state handlers are not required.\nSOURCE: https://github.com/xyflow/web/blob/main/sites/reactflow.dev/src/content/learn/advanced-use/uncontrolled-flow.mdx#2025-04-23_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\n<RemoteCodeViewer route=\"learn/uncontrolled\" framework=\"react\" />\n```\n\n----------------------------------------\n\nTITLE: Importing NodeResizeControl Component in Svelte\nDESCRIPTION: This code shows how to import the NodeResizeControl component from the @xyflow/svelte package. It's used for implementing a custom resizing UI for nodes in XY Flow.\nSOURCE: https://github.com/xyflow/web/blob/main/sites/svelteflow.dev/src/content/examples/nodes/node-resizer.mdx#2025-04-23_snippet_1\n\nLANGUAGE: svelte\nCODE:\n```\nimport { NodeResizeControl } from '@xyflow/svelte';\n```\n\n----------------------------------------\n\nTITLE: Defining the ResizeParams Type for NodeResizer Events - TypeScript\nDESCRIPTION: This TypeScript snippet defines the ResizeParams type, specifying the expected shape of the data passed with resize events from the NodeResizer component. It includes four numeric properties: x, y, width, and height, describing the position and dimensions of the resized node. There are no external dependencies, but consumers may extend the type to add fields like direction; the type is intended to support all consumer and emitter code for node resize event handling.\nSOURCE: https://github.com/xyflow/web/blob/main/sites/reactflow.dev/src/content/api-reference/types/resize-params.mdx#2025-04-23_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\nexport type ResizeParams = {\n  x: number;\n  y: number;\n  width: number;\n  height: number;\n};\n```\n\n----------------------------------------\n\nTITLE: Defining Writable Store for Nodes in Svelte using JavaScript\nDESCRIPTION: This snippet shows how to define a writable Svelte store to manage an array of node objects for a Svelte Flow diagram. Each node requires an 'id' (string), a 'position' (with x and y coordinates), and a 'data' object (for label or metadata). It depends on the 'svelte/store' package and is intended to be used as a reactive data source in Svelte components. The array of nodes becomes the initial state, and the store allows updates through Svelte's built-in reactivity.\nSOURCE: https://github.com/xyflow/web/blob/main/sites/svelteflow.dev/src/content/learn/getting-started/building-a-flow.mdx#2025-04-23_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport { writable } from 'svelte/store';\n\nconst nodes = writable([\n  {\n    id: '1', // required and needs to be a string\n    position: { x: 0, y: 0 }, // required\n    data: { label: 'hey' }, // required\n  },\n  {\n    id: '2',\n    position: { x: 100, y: 100 },\n    data: { label: 'world' },\n  },\n]);\n```\n\n----------------------------------------\n\nTITLE: Using the useInternalNode Hook in a Svelte Component\nDESCRIPTION: This snippet demonstrates how to import and use the useInternalNode hook in a Svelte component to access an internal node by its ID. This is useful for advanced use cases like custom edges or layouting.\nSOURCE: https://github.com/xyflow/web/blob/main/sites/svelteflow.dev/src/content/api-reference/hooks/use-internal-node.mdx#2025-04-23_snippet_0\n\nLANGUAGE: svelte\nCODE:\n```\n<script lang=\"ts\">\n  import { useInternalNode } from '@xyflow/svelte';\n\n  const node = useInternalNode(id);\n</script>\n```\n\n----------------------------------------\n\nTITLE: Defining the EdgeMarker Type for XYFlow in TypeScript\nDESCRIPTION: Defines the EdgeMarker type, which is used to configure visual markers for the start or end of an edge in the XYFlow diagramming system. This TypeScript type includes properties for marker type (required), color, width, height, marker units, orientation, and stroke width. Dependencies include the MarkerType enumeration or type, which specifies allowed marker shapes. Input is an object matching EdgeMarker; output is used for rendering edge markers in the UI.\nSOURCE: https://github.com/xyflow/web/blob/main/sites/reactflow.dev/src/content/api-reference/types/edge-marker.mdx#2025-04-23_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\nexport type EdgeMarker = {\n  type: MarkerType;\n  color?: string;\n  width?: number;\n  height?: number;\n  markerUnits?: string;\n  orient?: string;\n  strokeWidth?: number;\n};\n```\n\n----------------------------------------\n\nTITLE: Handling Node Connection Events for New Node Creation - TSX\nDESCRIPTION: Implements logic in a React component to track which node initiated a connection and detect when the connection ends on the flow pane. It uses useRef for state persistence, and two useCallback hooks for onConnectStart and onConnectEnd events. When the end event targets the pane, it identifies the parent and logs the event, laying groundwork for dynamic node insertion. Requires React hooks and React Flow event types. Inputs are connection events; the output is UI state changes or console logs.\nSOURCE: https://github.com/xyflow/web/blob/main/sites/reactflow.dev/src/content/learn/tutorials/mind-map-app-with-react-flow.mdx#2025-04-23_snippet_12\n\nLANGUAGE: tsx\nCODE:\n```\nconst connectingNodeId = useRef<string | null>(null);\n\nconst onConnectStart: OnConnectStart = useCallback((_, { nodeId }) => {\n  connectingNodeId.current = nodeId;\n}, []);\n\nconst onConnectEnd: OnConnectEnd = useCallback((event) => {\n  // we only want to create a new node if the connection ends on the pane\n  const targetIsPane = (event.target as Element).classList.contains('react-flow__pane');\n\n  if (targetIsPane && connectingNodeId.current) {\n    console.log(`add new node with parent node ${connectingNodeId.current}`);\n  }\n}, []);\n```\n\n----------------------------------------\n\nTITLE: Background Pattern Styling\nDESCRIPTION: Using the new patternClassName prop to style background patterns, particularly useful with utility-first CSS frameworks like Tailwind.\nSOURCE: https://github.com/xyflow/web/blob/main/sites/reactflow.dev/src/content/learn/troubleshooting/migrate-to-v12.mdx#2025-04-23_snippet_25\n\nLANGUAGE: typescript\nCODE:\n```\npatternClassName=\"custom-pattern-class\"\n```\n\n----------------------------------------\n\nTITLE: Defining Node Dimensions for Server Rendering with React Flow in JavaScript\nDESCRIPTION: This snippet defines a single node for React Flow with explicitly set width and height properties, which are crucial for enabling server-side rendering. No dependencies are needed beyond standard React Flow data structures, and dimensions are provided statically as part of the node object. The main input is an array containing node objects; the key output is a node data structure React Flow can render server-side without client-side measurement.\nSOURCE: https://github.com/xyflow/web/blob/main/sites/reactflow.dev/src/content/learn/advanced-use/ssr-ssg-configuration.mdx#2025-04-23_snippet_0\n\nLANGUAGE: js\nCODE:\n```\nconst nodes = [\n  {\n    id: '1',\n    type: 'default',\n    position: { x: 0, y: 0 },\n    data: { label: 'Node 1' },\n    width: 100,\n    height: 50,\n  },\n];\n```\n\n----------------------------------------\n\nTITLE: Implementing NodeToolbar in a Custom React Node Component\nDESCRIPTION: This snippet demonstrates how to use the NodeToolbar component within a custom node implementation. It shows the basic structure of a custom node with a toolbar containing action buttons, and handles for connecting edges.\nSOURCE: https://github.com/xyflow/web/blob/main/sites/reactflow.dev/src/content/api-reference/components/node-toolbar.mdx#2025-04-23_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport { memo } from 'react';\nimport { Handle, Position, NodeToolbar } from '@xyflow/react';\n\nconst CustomNode = ({ data }) => {\n  return (\n    <>\n      <NodeToolbar isVisible={data.toolbarVisible} position={data.toolbarPosition}>\n        <button>delete</button>\n        <button>copy</button>\n        <button>expand</button>\n      </NodeToolbar>\n\n      <div style={{ padding: '10px 20px' }}>\n        {data.label}\n      </div>\n\n      <Handle type=\"target\" position={Position.Left} />\n      <Handle type=\"source\" position={Position.Right} />\n    </>\n  );\n};\n\nexport default memo(CustomNode);\n```\n\n----------------------------------------\n\nTITLE: Accessing Svelte Flow Store with useStore Hook in Svelte\nDESCRIPTION: This snippet demonstrates how to use the useStore hook to access the internal store of Svelte Flow. In this example, it's used to retrieve the current connectionMode from the store.\nSOURCE: https://github.com/xyflow/web/blob/main/sites/svelteflow.dev/src/content/api-reference/hooks/use-store.mdx#2025-04-23_snippet_0\n\nLANGUAGE: svelte\nCODE:\n```\n<script lang=\"ts\">\n  import { useStore } from '@xyflow/svelte';\n\n  // lots of props that you pass to the <SvelteFlow> component end up in the internal store.\n  // Here we are accessing the current connectionMode.\n  const { connectionMode } = useStore();\n</script>\n```\n\n----------------------------------------\n\nTITLE: Animating SVG Elements Along Edge Paths in React Flow\nDESCRIPTION: This snippet demonstrates how to create a custom edge that animates a circle along the edge path using the <animateMotion /> SVG element. It extends the functionality of React Flow's built-in edge animations.\nSOURCE: https://github.com/xyflow/web/blob/main/apps/example-apps/react/examples/edges/animating-edges/README.mdx#2025-04-23_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\n<RemoteCodeViewer\n  route=\"examples/edges/animating-edges-svg\"\n  framework=\"react\"\n/>\n```\n\n----------------------------------------\n\nTITLE: Installing Zustand via npm (bash)\nDESCRIPTION: Installs the Zustand package from npm, making its API available for use in the React/TypeScript project. This step is required before any store or hook-based state management can be implemented. Run this command in your terminal at the project root to add Zustand as a project dependency.\nSOURCE: https://github.com/xyflow/web/blob/main/sites/reactflow.dev/src/content/learn/advanced-use/state-management.mdx#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm install --save zustand\n```\n\n----------------------------------------\n\nTITLE: Installing React Flow UI Components via shadcn CLI (Bash)\nDESCRIPTION: This command uses the shadcn CLI to add the `node-header` and `labeled-handle` components from the React Flow UI registry (ui.reactflow.dev) to the current project. These components serve as building blocks for creating custom React Flow nodes.\nSOURCE: https://github.com/xyflow/web/blob/main/sites/reactflow.dev/src/content/learn/tutorials/getting-started-with-react-flow-components.mdx#2025-04-23_snippet_15\n\nLANGUAGE: bash\nCODE:\n```\nnpx shadcn@latest add \\\n  https://ui.reactflow.dev/node-header \\\n  https://ui.reactflow.dev/labeled-handle\n```\n\n----------------------------------------\n\nTITLE: Defining Custom MindMapEdge Component (TSX)\nDESCRIPTION: This snippet defines a custom edge component `MindMapEdge` for React Flow. It uses the `getStraightPath` utility function but modifies the `sourceY` coordinate by adding 20 pixels to make the edge appear to originate from the vertical center of the source node, rather than the handle's default position. It renders the calculated path using `BaseEdge`.\nSOURCE: https://github.com/xyflow/web/blob/main/sites/reactflow.dev/src/content/learn/tutorials/mind-map-app-with-react-flow.mdx#2025-04-23_snippet_26\n\nLANGUAGE: tsx\nCODE:\n```\n```tsx\nimport { BaseEdge, EdgeProps, getStraightPath } from '@xyflow/react';\n\nfunction MindMapEdge(props: EdgeProps) {\n  const { sourceX, sourceY, targetX, targetY } = props;\n\n  const [edgePath] = getStraightPath({\n    sourceX,\n    sourceY: sourceY + 20,\n    targetX,\n    targetY,\n  });\n\n  return <BaseEdge path={edgePath} {...props} />;\n}\n\nexport default MindMapEdge;\n```\n```\n\n----------------------------------------\n\nTITLE: Importing Default React Flow Styles in JavaScript\nDESCRIPTION: Imports the minimal default CSS styles provided by React Flow. This is typically done in the application's entry point (e.g., `App.jsx`) to apply the base styling.\nSOURCE: https://github.com/xyflow/web/blob/main/sites/reactflow.dev/src/content/learn/customization/theming.mdx#2025-04-23_snippet_0\n\nLANGUAGE: js\nCODE:\n```\nimport '@xyflow/react/dist/style.css';\n```\n\n----------------------------------------\n\nTITLE: Defining the Viewport Type Structure (TypeScript)\nDESCRIPTION: This TypeScript code defines the `Viewport` type alias. It specifies an object structure with three numeric properties: `x` and `y` representing the coordinates of the top-left corner of the viewport within React Flow's internal coordinate system, and `zoom` representing the current zoom level. This type is used internally by React Flow to manage the display state.\nSOURCE: https://github.com/xyflow/web/blob/main/sites/reactflow.dev/src/content/api-reference/types/viewport.mdx#2025-04-23_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nexport type Viewport = {\n  x: number;\n  y: number;\n  zoom: number;\n};\n```\n\n----------------------------------------\n\nTITLE: Implementing nodrag Class in Svelte for xyflow/web Custom Node Controls\nDESCRIPTION: This Svelte snippet demonstrates how to use the 'nodrag' class on input elements within a custom node to prevent dragging and default node selection behavior when these elements are interacted with.\nSOURCE: https://github.com/xyflow/web/blob/main/sites/svelteflow.dev/src/content/api-reference/types/node-props.mdx#2025-04-23_snippet_1\n\nLANGUAGE: svelte\nCODE:\n```\n<div>\n  <input className=\"nodrag\" type=\"range\" min={0} max={100} />\n</div>\n```\n\n----------------------------------------\n\nTITLE: Retrieving Node Data with useNodesData() in Svelte Flow\nDESCRIPTION: This example demonstrates how to use the useNodesData() hook to retrieve and reactively track data from specific nodes in a Svelte Flow application. The hook accepts an array of node IDs and returns a reactive store that updates whenever the data of the referenced nodes changes.\nSOURCE: https://github.com/xyflow/web/blob/main/sites/svelteflow.dev/src/content/api-reference/hooks/use-nodes-data.mdx#2025-04-23_snippet_0\n\nLANGUAGE: svelte\nCODE:\n```\n<script lang=\"ts\">\n  import { useNodesData } from '@xyflow/svelte';\n\n  const nodeData = useNodesData(['node-id-a', 'node-id-b']);\n\n  $: {\n    // nodeData changes whenever the data of the passed node ids get updated\n    console.log($nodeData);\n  }\n</script>\n```\n\n----------------------------------------\n\nTITLE: Registering and Using Custom Node Types in ReactFlow (React, TSX)\nDESCRIPTION: Shows how to register the custom CounterNode as a node type in the ReactFlow component, ensuring that ReactFlow recognizes and renders the new node kind. The nodeTypes object maps string keys to node components, and ReactFlow's nodeTypes prop is used for registration. This pattern relies on ES module imports and the XYFlow React interface; only registered nodes will be used during runtime rendering.\nSOURCE: https://github.com/xyflow/web/blob/main/sites/reactflow.dev/src/content/api-reference/types/node-props.mdx#2025-04-23_snippet_2\n\nLANGUAGE: TSX\nCODE:\n```\nimport { ReactFlow } from '@xyflow/react';\nimport CounterNode from './CounterNode';\n\nconst nodeTypes = {\n  counterNode: CounterNode,\n};\n\nexport default function App() {\n  return <ReactFlow nodeTypes={nodeTypes} ... />\n}\n```\n\n----------------------------------------\n\nTITLE: Displaying Node Count Using useStoreApi in ReactFlow (TypeScript/TSX)\nDESCRIPTION: This snippet demonstrates how to use the useStoreApi hook to access the current state of the store for a ReactFlow instance, specifically to get the number of nodes on demand. Dependencies include @xyflow/react, React, and its hooks (useState and useCallback). The NodesLengthDisplay component uses internal state to track the node count, and updates the count only when the button is clicked, showing how to access and process store data without subscribing to reactive updates. Inputs: user interaction (button click). Outputs: node count displayed in UI. Limitations: Node count is only updated when the button is pressed, not automatically.\nSOURCE: https://github.com/xyflow/web/blob/main/sites/reactflow.dev/src/content/api-reference/hooks/use-store-api.mdx#2025-04-23_snippet_0\n\nLANGUAGE: TSX\nCODE:\n```\nimport { useState, useCallback } from 'react';\nimport { ReactFlow, useStoreApi } from '@xyflow/react';\n\nconst NodesLengthDisplay = () => {\n  const [nodesLength, setNodesLength] = useState(0);\n  const store = useStoreApi();\n\n  const onClick = useCallback(() => {\n    const { nodes } = store.getState();\n    const length = nodes.length || 0;\n\n    setNodesLength(length);\n  }, [store]);\n\n  return (\n    <div>\n      <p>The current number of nodes is: {nodesLength}</p>\n      <button onClick={onClick}>Update node length.</button>\n    </div>\n  );\n};\n\nfunction Flow() {\n  return (\n    <ReactFlow nodes={nodes}>\n      <NodesLengthLogger />\n    </ReactFlow>\n  );\n}\n\n```\n\n----------------------------------------\n\nTITLE: Implementing React Flow with Custom TooltipNode (TSX)\nDESCRIPTION: Sets up a complete React Flow application within the `App` component. It imports necessary React Flow hooks and components (`ReactFlow`, `useNodesState`, `Position`), defines a custom node type `tooltip` (lines 14, 16-18) using the imported `TooltipNode` (line 5), initializes nodes (lines 20-27), and renders the `ReactFlow` component with the nodes and custom node type (lines 30-38). This demonstrates the integration of the `shadcn/ui`-added component, which implicitly uses the customized `BaseNode`. Note the file extension change to `.tsx`.\nSOURCE: https://github.com/xyflow/web/blob/main/sites/reactflow.dev/src/content/learn/tutorials/getting-started-with-react-flow-components.mdx#2025-04-23_snippet_14\n\nLANGUAGE: tsx\nCODE:\n```\nimport '@xyflow/react/dist/style.css';\n\nimport { ReactFlow, Position, useNodesState, Node } from '@xyflow/react';\n\nimport { TooltipNode, TooltipContent, TooltipTrigger } from '@/components/tooltip-node';\n\nfunction Tooltip() {\n  return (\n    <TooltipNode>\n      <TooltipContent position={Position.Top}>Hidden Content</TooltipContent>\n      <TooltipTrigger>Hover</TooltipTrigger>\n    </TooltipNode>\n  );\n}\n\nconst nodeTypes = {\n  tooltip: Tooltip,\n};\n\nconst initialNodes: Node[] = [\n  {\n    id: '1',\n    position: { x: 0, y: 0 },\n    data: {},\n    type: 'tooltip',\n  },\n];\n\nfunction App() {\n  const [nodes, , onNodesChange] = useNodesState(initialNodes);\n\n  return (\n    <div className=\"h-screen w-screen p-8\">\n      <ReactFlow\n        nodes={nodes}\n        onNodesChange={onNodesChange}\n        nodeTypes={nodeTypes}\n        fitView\n      />\n    </div>\n  );\n}\n\nexport default App;\n```\n\n----------------------------------------\n\nTITLE: Alternative: Memoizing nodeTypes Inside Component with useMemo (JSX)\nDESCRIPTION: This snippet presents an alternative solution using the `useMemo` hook to define `nodeTypes` inside the component. This ensures the `nodeTypes` object is only re-computed if its dependencies change (in this case, never, due to the empty dependency array `[]`), thus preventing unnecessary re-renders when the component itself re-renders for other reasons.\nSOURCE: https://github.com/xyflow/web/blob/main/sites/reactflow.dev/src/content/learn/troubleshooting/index.mdx#2025-04-23_snippet_5\n\nLANGUAGE: jsx\nCODE:\n```\nimport { useMemo } from 'react';\nimport { ReactFlow } from '@xyflow/react';\nimport '@xyflow/react/dist/style.css';\n\nimport MyCustomNode from './MyCustomNode';\n\nfunction Flow(props) {\n  const nodeTypes = useMemo(\n    () => ({\n      myCustomNode: MyCustomNode,\n    }),\n    [],\n  );\n\n  return <ReactFlow nodeTypes={nodeTypes} />;\n}\n\nexport default Flow;\n```\n\n----------------------------------------\n\nTITLE: Styling the Custom Mind Map Node (CSS)\nDESCRIPTION: Adds CSS rules to `src/index.css` targeting the custom mind map nodes, which React Flow automatically assigns the class `.react-flow__node-mindmap` based on the node's type. These rules define the visual appearance, setting a white background, slight border-radius, padding, and bold font weight.\nSOURCE: https://github.com/xyflow/web/blob/main/sites/reactflow.dev/src/content/learn/tutorials/mind-map-app-with-react-flow.mdx#2025-04-23_snippet_9\n\nLANGUAGE: css\nCODE:\n```\n.react-flow__node-mindmap {\n  background: white;\n  border-radius: 2px;\n  border: 1px solid transparent;\n  padding: 2px 5px;\n  font-weight: 700;\n}\n\n```\n\n----------------------------------------\n\nTITLE: Importing UiComponentViewer in React (JavaScript)\nDESCRIPTION: This snippet imports the UiComponentViewer component from the specified path, enabling the embedding and demonstration of UI components within MDX or React files. Ensure the module '@\\/components\\/ui-component-viewer.mdx' exists and is properly exported. No input or output parameters; this is a standard ES6 module import used as a prerequisite for the following render operation.\nSOURCE: https://github.com/xyflow/web/blob/main/sites/reactflow.dev/src/content/components/handles/base-handle.mdx#2025-04-23_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport UiComponentViewer from '@\\/components\\/ui-component-viewer.mdx';\n```\n\n----------------------------------------\n\nTITLE: Auto-Focusing Input on Node Creation in MindMapNode (JSX)\nDESCRIPTION: This `useEffect` hook, added to the `MindMapNode` component, automatically focuses the input field shortly after the node component mounts (likely after being created). It uses `setTimeout` with a minimal delay (1ms) to ensure the element is ready and requires an `inputRef` to the input.\nSOURCE: https://github.com/xyflow/web/blob/main/sites/reactflow.dev/src/content/learn/tutorials/mind-map-app-with-react-flow.mdx#2025-04-23_snippet_25\n\nLANGUAGE: jsx\nCODE:\n```\n```jsx\nuseEffect(() => {\n  setTimeout(() => {\n    if (inputRef.current) {\n      inputRef.current.focus({ preventScroll: true });\n    }\n  }, 1);\n}, []);\n```\n```\n\n----------------------------------------\n\nTITLE: Adding Child Nodes with parentId in React Flow - JavaScript/React\nDESCRIPTION: This code snippet demonstrates how to add a child node to a parent node using the `parentId` property in React Flow. It sets specific width and height styles for the parent node and restricts child node movement with the `extent: 'parent'` option. Dependencies include React Flow core packages and the proper arrangement of nodes in the node array, with parent nodes before their children. Inputs are the nodes and their properties, and output is a rendered flow where children are positioned relative to their parent and their movement is limited accordingly.\nSOURCE: https://github.com/xyflow/web/blob/main/sites/reactflow.dev/src/content/learn/layouting/sub-flows.mdx#2025-04-23_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n<RemoteCodeViewer route=\\\"learn/sub-flows\\\" framework=\\\"react\\\" />\n```\n\n----------------------------------------\n\nTITLE: Enumerating Edge Marker Types with TypeScript Enum\nDESCRIPTION: Defines a TypeScript enum named MarkerType that lists the available marker options (\"Arrow\" and \"ArrowClosed\") used to decorate the ends of edges. This enum enables type-safe assignment of supported marker styles in configuration objects or when rendering edge components in an application using the xyflow system package. No external dependencies are required; inputs refer to marker style designations and the output is the strongly-typed enum for use across the codebase.\nSOURCE: https://github.com/xyflow/web/blob/main/sites/reactflow.dev/src/content/api-reference/types/marker-type.mdx#2025-04-23_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\nexport enum MarkerType {\n  Arrow = 'arrow',\n  ArrowClosed = 'arrowclosed',\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Connection Limits with isConnectable in React Flow\nDESCRIPTION: Remote code example showing how to limit handle connections using the isConnectable prop in various ways: boolean values for enabling/disabling connections, numeric values for maximum connection counts, and callback functions for dynamic connection validation.\nSOURCE: https://github.com/xyflow/web/blob/main/sites/svelteflow.dev/src/content/examples/nodes/connection-limit.mdx#2025-04-23_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\n<RemoteCodeViewer route=\"examples/nodes/connection-limit\" framework=\"svelte\" />\n```\n\n----------------------------------------\n\nTITLE: Using ControlButton to Add Custom Buttons in Svelte\nDESCRIPTION: This example demonstrates how to implement a custom button using the ControlButton component within a Controls component. The button logs an emoji to the console when clicked.\nSOURCE: https://github.com/xyflow/web/blob/main/sites/svelteflow.dev/src/content/api-reference/components/control-button.mdx#2025-04-23_snippet_0\n\nLANGUAGE: svelte\nCODE:\n```\n<script lang=\"ts\">\n  import { Controls, ControlButton } from '@xyflow/svelte';\n</script>\n\n<Controls>\n  <ControlButton on:click={() => console.log('⚡️')}>\n    ⚡️\n  </ControlButton>\n</Controls>\n```\n\n----------------------------------------\n\nTITLE: Toggling AudioContext State on Click in React (JSX)\nDESCRIPTION: Defines a `toggleAudio` function that checks the `AudioContext`'s state. If it's 'suspended' (often the default state in browsers), it calls `context.resume()`. Otherwise, it calls `context.suspend()`. This function is attached to the `onClick` event of the main div, allowing user interaction to start or stop audio playback, addressing browser autoplay restrictions.\nSOURCE: https://github.com/xyflow/web/blob/main/sites/reactflow.dev/src/content/learn/tutorials/react-flow-and-the-web-audio-api.mdx#2025-04-23_snippet_3\n\nLANGUAGE: jsx\nCODE:\n```\nconst toggleAudio = () => {\n  if (context.state === 'suspended') {\n    context.resume();\n  } else {\n    context.suspend();\n  }\n};\n\nexport default function App() {\n  return (\n    <div ...\n      onClick={toggleAudio}\n    />\n  );\n};\n```\n\n----------------------------------------\n\nTITLE: Using Default Node Types as Parent in React Flow - JavaScript/React\nDESCRIPTION: This snippet shows how a default node type can act as a parent node in React Flow, with child nodes set as non-draggable by specifying `draggable: false`. The code sample removes a label from node B, adds children, and changes draggable configuration. It requires the React Flow package and proper props setup. Inputs are configuration options for the parent and children nodes; outputs are nodes rendered with altered parent/child dynamics and restricted child movement.\nSOURCE: https://github.com/xyflow/web/blob/main/sites/reactflow.dev/src/content/learn/layouting/sub-flows.mdx#2025-04-23_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\n<RemoteCodeViewer route=\\\"learn/sub-flows-3\\\" framework=\\\"react\\\" />\n```\n\n----------------------------------------\n\nTITLE: Defining a Custom Number Node in React Flow (TSX)\nDESCRIPTION: This TSX code defines a custom React Flow node component named `NumNode`. It uses `BaseNode`, `LabeledHandle`, `NodeHeader`, and standard shadcn/ui components (`Button`, `DropdownMenuItem`) to create a node with a title, increment/decrement buttons, a display for the current value, and an output handle. It leverages the `useReactFlow` hook for updating node data and handling node deletion and reset actions.\nSOURCE: https://github.com/xyflow/web/blob/main/sites/reactflow.dev/src/content/learn/tutorials/getting-started-with-react-flow-components.mdx#2025-04-23_snippet_16\n\nLANGUAGE: tsx\nCODE:\n```\nimport React, { useCallback } from 'react';\nimport { type Node, type NodeProps, Position, useReactFlow } from '@xyflow/react';\n\nimport { BaseNode } from '@/components/base-node';\nimport { LabeledHandle } from '@/components/labeled-handle';\nimport {\n  NodeHeader,\n  NodeHeaderTitle,\n  NodeHeaderActions,\n  NodeHeaderMenuAction,\n} from '@/components/node-header';\nimport { Button } from '@/components/ui/button';\nimport { DropdownMenuItem } from '@/components/ui/dropdown-menu';\n\nexport type NumNode = Node<{\n  value: number;\n}>;\n\nexport function NumNode({ id, data }: NodeProps<NumNode>) {\n  const { updateNodeData, setNodes } = useReactFlow();\n\n  const handleReset = useCallback(() => {\n    updateNodeData(id, { value: 0 });\n  }, [id, updateNodeData]);\n\n  const handleDelete = useCallback(() => {\n    setNodes((nodes) => nodes.filter((node) => node.id !== id));\n  }, [id, setNodes]);\n\n  const handleIncr = useCallback(() => {\n    updateNodeData(id, { value: data.value + 1 });\n  }, [id, data.value, updateNodeData]);\n\n  const handleDecr = useCallback(() => {\n    updateNodeData(id, { value: data.value - 1 });\n  }, [id, data.value, updateNodeData]);\n\n  return (\n    <BaseNode>\n      <NodeHeader>\n        <NodeHeaderTitle>Num</NodeHeaderTitle>\n        <NodeHeaderActions>\n          <NodeHeaderMenuAction label=\"Open node menu\">\n            <DropdownMenuItem onSelect={handleReset}>Reset</DropdownMenuItem>\n            <DropdownMenuItem onSelect={handleDelete}>Delete</DropdownMenuItem>\n          </NodeHeaderMenuAction>\n        </NodeHeaderActions>\n      </NodeHeader>\n\n      <div className=\"flex gap-2 items-center mb-10\">\n        <Button onClick={handleDecr}>-</Button>\n        <pre>{String(data.value).padStart(3, ' ')}</pre>\n        <Button onClick={handleIncr}>+</Button>\n      </div>\n\n      <footer className=\"bg-gray-100 -m-5\">\n        <LabeledHandle title=\"out\" type=\"source\" position={Position.Right} />\n      </footer>\n    </BaseNode>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Nodes Using a Custom Node Type (JavaScript)\nDESCRIPTION: Illustrates how to define a node object that uses a previously registered custom node type. The `type` property of the node object is set to the string identifier ('textUpdater') that was mapped to the custom component in the `nodeTypes` configuration.\nSOURCE: https://github.com/xyflow/web/blob/main/sites/reactflow.dev/src/content/learn/customization/custom-nodes.mdx#2025-04-23_snippet_3\n\nLANGUAGE: js\nCODE:\n```\nconst nodes = [\n  {\n    id: 'node-1',\n    type: 'textUpdater',\n    position: { x: 0, y: 0 },\n    data: { value: 123 },\n  },\n];\n```\n\n----------------------------------------\n\nTITLE: Updating Web Audio Params with Mouse Movement in React (JSX)\nDESCRIPTION: Creates a React component that sets up a basic Web Audio graph (Oscillator -> Gain -> Destination). It adds an `onMouseMove` event handler to a div spanning the viewport. This handler updates the oscillator's frequency and the gain node's volume based on the mouse's X and Y coordinates, respectively. Note the use of `.value` to set `AudioParam` properties.\nSOURCE: https://github.com/xyflow/web/blob/main/sites/reactflow.dev/src/content/learn/tutorials/react-flow-and-the-web-audio-api.mdx#2025-04-23_snippet_2\n\nLANGUAGE: jsx\nCODE:\n```\nimport React from 'react';\n\nconst context = new AudioContext();\nconst osc = context.createOscillator();\nconst amp = context.createGain();\n\nosc.connect(amp);\namp.connect(context.destination);\n\nosc.start();\n\nconst updateValues = (e) => {\n  const freq = (e.clientX / window.innerWidth) * 1000;\n  const gain = e.clientY / window.innerHeight;\n\n  osc.frequency.value = freq;\n  amp.gain.value = gain;\n};\n\nexport default function App() {\n  return <div style={{ width: '100vw', height: '100vh' }} onMouseMove={updateValues} />;\n}\n```\n\n----------------------------------------\n\nTITLE: Connection Validation Implementation\nDESCRIPTION: Implementation of the isValidConnection prop for validating all connections, including programmatically added edges.\nSOURCE: https://github.com/xyflow/web/blob/main/sites/reactflow.dev/src/content/learn/troubleshooting/migrate-to-v12.mdx#2025-04-23_snippet_24\n\nLANGUAGE: typescript\nCODE:\n```\nisValidConnection={(connection) => boolean}\n```\n\n----------------------------------------\n\nTITLE: Applying TypeScript Generics for Custom Node Types in MiniMap in TSX\nDESCRIPTION: This example shows how to use TypeScript generics with <MiniMap /> to specify custom node types for advanced typing. The snippet passes a generic argument CustomNodeType and a functional nodeColor to further customize how nodes are processed and styled. Requires a proper CustomNodeType type defined elsewhere and must be in a TypeScript/TSX project. Enhances type safety and IntelliSense for complex graphs.\nSOURCE: https://github.com/xyflow/web/blob/main/sites/reactflow.dev/src/content/api-reference/components/minimap.mdx#2025-04-23_snippet_4\n\nLANGUAGE: tsx\nCODE:\n```\n<MiniMap<CustomNodeType> nodeColor={nodeColor} />\n```\n\n----------------------------------------\n\nTITLE: Using Viewport Portal Component\nDESCRIPTION: Example of the new ViewportPortal component that allows rendering elements directly in the viewport without implementing a custom node.\nSOURCE: https://github.com/xyflow/web/blob/main/sites/reactflow.dev/src/content/learn/troubleshooting/migrate-to-v12.mdx#2025-04-23_snippet_23\n\nLANGUAGE: typescript\nCODE:\n```\n<ViewportPortal>{/* viewport content */}</ViewportPortal>\n```\n\n----------------------------------------\n\nTITLE: Initializing shadcn/ui with Tailwind CSS - Bash\nDESCRIPTION: This Bash snippet demonstrates how to initialize shadcn/ui in your project, assuming you have both shadcn and Tailwind CSS configured. The command sets up the starter templates and install required files, preparing your project for further shadcn/ui integration. Make sure npx and the required dependencies are available before running this command.\nSOURCE: https://github.com/xyflow/web/blob/main/sites/reactflow.dev/src/content/components/index.mdx#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpx shadcn@latest init\n```\n\n----------------------------------------\n\nTITLE: Integrating Web Audio Update into Zustand Store Action in JavaScript\nDESCRIPTION: Updates the `updateNode` action within a Zustand store. It now calls the external `updateAudioNode` function with the node's `id` and `data` before proceeding to update the store's state regarding the nodes. This ensures the corresponding Web Audio node is updated when the node's data changes in the application state.\nSOURCE: https://github.com/xyflow/web/blob/main/sites/reactflow.dev/src/content/learn/tutorials/react-flow-and-the-web-audio-api.mdx#2025-04-23_snippet_17\n\nLANGUAGE: js\nCODE:\n```\nimport { updateAudioNode } from './audio';\n\nexport const useStore = createWithEqualityFn((set, get) => ({\n  ...\n\n  updateNode(id, data) {\n    updateAudioNode(id, data);\n    set({ nodes: ... });\n  },\n\n  ...\n}));\n```\n\n----------------------------------------\n\nTITLE: Using useReactFlow Hook in a React Node Counter Component (React, JSX)\nDESCRIPTION: This snippet defines a functional React component called NodeCounter that utilizes the useReactFlow hook from the @xyflow/react library. The component retrieves the ReactFlowInstance to access node data, counts the current number of nodes when a button is clicked, and displays the result. Dependencies include useReactFlow from @xyflow/react, and useCallback and useState from React. The reactFlow object must be obtained inside a component rendered within a ReactFlowProvider or ReactFlow component. The button triggers node counting via reactFlow.getNodes().length, and the count is stored and displayed using state.\nSOURCE: https://github.com/xyflow/web/blob/main/sites/reactflow.dev/src/content/api-reference/hooks/use-react-flow.mdx#2025-04-23_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport { useCallback, useState } from 'react';\nimport { useReactFlow } from '@xyflow/react';\n\nexport function NodeCounter() {\n  const reactFlow = useReactFlow();\n  const [count, setCount] = useState(0);\n  const countNodes = useCallback(() => {\n    setCount(reactFlow.getNodes().length);\n    // you need to pass it as a dependency if you are using it with useEffect or useCallback\n    // because at the first render, it's not initialized yet and some functions might not work.\n  }, [reactFlow]);\n\n  return (\n    <div>\n      <button onClick={countNodes}>Update count</button>\n      <p>There are {count} nodes in the flow.</p>\n    </div>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Defining MarkerType Enum in TypeScript for Svelte Flow Edge Markers\nDESCRIPTION: Enum definition for the two built-in marker types available in Svelte Flow: Arrow and ArrowClosed. These markers can be used with the markerStart and markerEnd options when configuring edges.\nSOURCE: https://github.com/xyflow/web/blob/main/sites/svelteflow.dev/src/content/api-reference/types/marker-type.mdx#2025-04-23_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nexport enum MarkerType {\n  Arrow = 'arrow',\n  ArrowClosed = 'arrowclosed',\n}\n```\n\n----------------------------------------\n\nTITLE: Defining NodeOrigin Type in TypeScript for xyflow\nDESCRIPTION: This snippet defines the NodeOrigin type as a tuple of two numbers. These values determine the relative positioning of a node, where [0,0] is top-left, [0.5,0.5] is center, and [1,1] is bottom-right.\nSOURCE: https://github.com/xyflow/web/blob/main/sites/svelteflow.dev/src/content/api-reference/types/node-origin.mdx#2025-04-23_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nexport type NodeOrigin = [number, number];\n```\n\n----------------------------------------\n\nTITLE: Defining Default Edge Options Type for ReactFlow - TypeScript\nDESCRIPTION: Defines a TypeScript type alias DefaultEdgeOptions<T> representing the set of defaultable options for new edges in ReactFlow. All properties are optional and include display, interaction, and marker configuration. The type enables passing consistent defaults via the defaultEdgeOptions prop; when new edges omit specific settings, these defaults are applied automatically. Dependencies: Requires TypeScript and relevant ReactFlow types such as EdgeMarker and Edge. Inputs are partial edge configuration, and output is an object of type DefaultEdgeOptions<T>; no runtime constraints enforced.\nSOURCE: https://github.com/xyflow/web/blob/main/sites/reactflow.dev/src/content/api-reference/types/default-edge-options.mdx#2025-04-23_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\nexport type DefaultEdgeOptions<T> = {\n  type?: string;\n  animated?: boolean;\n  hidden?: boolean;\n  deletable?: boolean;\n  selectable?: boolean;\n  data?: T;\n  selected?: boolean;\n  markerStart?: string | EdgeMarker;\n  markerEnd?: string | EdgeMarker;\n  zIndex?: number;\n  ariaLabel?: string;\n  interactionWidth?: number;\n  focusable?: boolean;\n};\n```\n\n----------------------------------------\n\nTITLE: Replacing onLoad with onInit callback (API rename) - React (JSX)\nDESCRIPTION: These paired snippets demonstrate replacing the old `onLoad` callback (now deprecated) with the newer `onInit`, which triggers after nodes initialize. Both receive the React Flow instance as an argument, letting you call instance methods like `zoomTo`. No input/output change, just property rename for API consistency. Requires update to v10.\nSOURCE: https://github.com/xyflow/web/blob/main/sites/reactflow.dev/src/content/learn/troubleshooting/migrate-to-v10.mdx#2025-04-23_snippet_7\n\nLANGUAGE: jsx\nCODE:\n```\nconst onLoad = (reactFlowInstance: OnLoadParams) => reactFlowInstance.zoomTo(2);\\n...\\n<ReactFlow\\n   ...\\n  onLoad={onLoad}\\n/>\n```\n\nLANGUAGE: jsx\nCODE:\n```\nconst onInit = (reactFlowInstance: ReactFlowInstance) => reactFlowInstance.zoomTo(2);\\n...\\n<ReactFlow\\n   ...\\n  onInit={onInit}\\n/>\n```\n\n----------------------------------------\n\nTITLE: Cloning React Flow Template with degit (Bash)\nDESCRIPTION: Uses `npx degit` to download the files from the official `xyflow/vite-react-flow-template` GitHub repository into a local directory named `your-app-name`. This command bootstraps a new project with a pre-configured Vite and TypeScript setup for React Flow, without cloning the entire git history. Requires Node.js and npx (which comes with npm).\nSOURCE: https://github.com/xyflow/web/blob/main/sites/reactflow.dev/src/content/learn/getting-started/installation-and-requirements.mdx#2025-04-23_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\nnpx degit xyflow/vite-react-flow-template your-app-name\n```\n\n----------------------------------------\n\nTITLE: Node Type Not Found Error: Missing nodeTypes Prop (JSX)\nDESCRIPTION: This snippet illustrates a scenario causing the 'Node type not found' error. A node with `type: 'custom'` is defined, but the `nodeTypes` prop is not passed to the `<ReactFlow>` component. React Flow cannot find the component definition for 'custom' and uses the default.\nSOURCE: https://github.com/xyflow/web/blob/main/sites/reactflow.dev/src/content/learn/troubleshooting/index.mdx#2025-04-23_snippet_6\n\nLANGUAGE: jsx\nCODE:\n```\nimport { ReactFlow } from '@xyflow/react';\nimport '@xyflow/react/dist/style.css';\n\nimport MyCustomNode from './MyCustomNode';\n\nconst nodes = [\n  {\n    id: 'mycustomnode',\n    type: 'custom',\n    // ...\n  },\n];\n\nfunction Flow(props) {\n  // nodeTypes property is missing, so React Flow cannot find the custom node component to render\n  return <ReactFlow nodes={nodes} />;\n}\n```\n\n----------------------------------------\n\nTITLE: Using Custom Node Types in TypeScript (v12 API)\nDESCRIPTION: Example of how to declare an array of nodes using the custom union type (`AppNode`) defined previously. This ensures type safety when creating nodes with different data structures based on their `type`.\nSOURCE: https://github.com/xyflow/web/blob/main/sites/reactflow.dev/src/content/learn/troubleshooting/migrate-to-v12.mdx#2025-04-23_snippet_18\n\nLANGUAGE: typescript\nCODE:\n```\nconst nodes: AppNode[] = [\n  { id: '1', type: 'number', data: { value: 1 }, position: { x: 100, y: 100 } },\n  { id: '2', type: 'text', data: { text: 'Hello' }, position: { x: 200, y: 200 } },\n];\n```\n\n----------------------------------------\n\nTITLE: Using Reconnect Props in React Flow v12 (New API)\nDESCRIPTION: Illustrates the renamed props in React Flow v12 for handling edge reconnections: `onReconnect`, `onReconnectStart`, and `onReconnectEnd`. These replace the previous `onEdgeUpdate*` props for clarity.\nSOURCE: https://github.com/xyflow/web/blob/main/sites/reactflow.dev/src/content/learn/troubleshooting/migrate-to-v12.mdx#2025-04-23_snippet_10\n\nLANGUAGE: javascript\nCODE:\n```\n<ReactFlow\n  onReconnect={onReconnect}\n  onReconnectStart={onReconnectStart}\n  onReconnectEnd={onReconnectEnd}\n/>\n```\n\n----------------------------------------\n\nTITLE: Bootstrapping a New Vite React Project - Bash\nDESCRIPTION: Creates a new Vite-based React application using npm with a specified project name. This command requires Node.js and npm to be installed. The 'my-react-flow-app' argument specifies the new directory, and the '--template react' flag tells Vite to use the React template, resulting in a fresh project setup in the provided location.\nSOURCE: https://github.com/xyflow/web/blob/main/sites/reactflow.dev/src/content/learn/index.mdx#2025-04-23_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nnpm init vite my-react-flow-app -- --template react\n```\n\n----------------------------------------\n\nTITLE: Initializing Vite React Project from Template - Bash\nDESCRIPTION: This snippet initializes a new React project using the Vite template for React Flow by cloning a project repository with npx degit. Required dependencies: Node.js, npm or a compatible package manager, and degit installed via npx. The only parameter to provide is the desired folder name (app-name), and the output is a fully cloned, ready-to-install Vite React Flow template in the chosen directory.\nSOURCE: https://github.com/xyflow/web/blob/main/sites/reactflow.dev/src/content/learn/index.mdx#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpx degit xyflow/vite-react-flow-template app-name\n```\n\n----------------------------------------\n\nTITLE: Retrieving Current Nodes with useNodes Hook in React (JavaScript)\nDESCRIPTION: This code snippet demonstrates how to import and utilize the useNodes hook from the @xyflow/react library within a functional React component. The useNodes hook returns an array of current nodes, and the component re-renders whenever the nodes array changes (such as on selection or movement). No additional dependencies are required apart from @xyflow/react. The example displays the current number of nodes using simple JSX.\nSOURCE: https://github.com/xyflow/web/blob/main/sites/reactflow.dev/src/content/api-reference/hooks/use-nodes.mdx#2025-04-23_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport { useNodes } from '@xyflow/react';\n\nexport default function () {\n  const nodes = useNodes();\n\n  return <div>There are currently {nodes.length} nodes!</div>;\n}\n```\n\n----------------------------------------\n\nTITLE: Declaring BackgroundVariant Enum in TypeScript\nDESCRIPTION: Defines an enumeration for three background pattern types (lines, dots, and cross) that can be used in XYFlow's background components. The enum provides type-safe access while maintaining string values for direct usage.\nSOURCE: https://github.com/xyflow/web/blob/main/sites/reactflow.dev/src/content/api-reference/types/background-variant.mdx#2025-04-23_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nexport enum BackgroundVariant {\n  Lines = 'lines',\n  Dots = 'dots',\n  Cross = 'cross',\n}\n```\n\n----------------------------------------\n\nTITLE: Using isNode() to Check Node Validity in JavaScript\nDESCRIPTION: This snippet demonstrates how to use the isNode() function from @xyflow/svelte to check if an object is a valid Node. It creates a node object with id, data, and position properties, then uses isNode() to verify it.\nSOURCE: https://github.com/xyflow/web/blob/main/sites/svelteflow.dev/src/content/api-reference/utils/is-node.mdx#2025-04-23_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport { isNode } from '@xyflow/svelte';\n\nconst node = {\n  id: 'node-a',\n  data: {\n    label: 'node',\n  },\n  position: {\n    x: 0,\n    y: 0,\n  },\n};\n\nif (isNode(node)) {\n  // ..\n}\n```\n\n----------------------------------------\n\nTITLE: Accessing Measured Node Dimensions in v12 (New API)\nDESCRIPTION: Demonstrates the new method for accessing measured node dimensions in React Flow v12, which are now stored under the `node.measured` object (e.g., `node.measured?.width`). Optional chaining is recommended as `measured` might be undefined initially.\nSOURCE: https://github.com/xyflow/web/blob/main/sites/reactflow.dev/src/content/learn/troubleshooting/migrate-to-v12.mdx#2025-04-23_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\n// getting the measured width and height\nconst nodeWidth = node.measured?.width;\nconst nodeHeight = node.measured?.height;\n```\n\n----------------------------------------\n\nTITLE: Using useNodeId Hook in React Custom Node Component\nDESCRIPTION: This snippet demonstrates how to use the useNodeId hook to display a node's id within a custom node component. It shows the hook being used in a child component of the custom node.\nSOURCE: https://github.com/xyflow/web/blob/main/sites/reactflow.dev/src/content/api-reference/hooks/use-node-id.mdx#2025-04-23_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport { useNodeId } from '@xyflow/react';\n\nexport default function CustomNode() {\n  return (\n    <div>\n      <span>This node has an id of </span>\n      <NodeIdDisplay />\n    </div>\n  );\n}\n\nfunction NodeIdDisplay() {\n  const nodeId = useNodeId();\n\n  return <span>{nodeId}</span>;\n}\n```\n\n----------------------------------------\n\nTITLE: Installing Required Babel Plugins for React Flow in Webpack 4 - Shell\nDESCRIPTION: This snippet provides the npm command to install Babel loader and required plugins so that webpack 4 can transpile React Flow's modern JavaScript code. Required dependencies include babel-loader, @babel/preset-env, @babel/preset-react, @babel/plugin-proposal-optional-chaining, and @babel/plugin-proposal-nullish-coalescing-operator. Execute this command in your project root; these should be saved as devDependencies. The input is the npm command; this outputs installed packages in your node_modules. If you skip installation, webpack will not be able to process React Flow imports.\nSOURCE: https://github.com/xyflow/web/blob/main/sites/reactflow.dev/src/content/learn/troubleshooting/index.mdx#2025-04-23_snippet_15\n\nLANGUAGE: sh\nCODE:\n```\nnpm i --save-dev babel-loader@8.2.5 @babel/preset-env @babel/preset-react @babel/plugin-proposal-optional-chaining @babel/plugin-proposal-nullish-coalescing-operator\n```\n\n----------------------------------------\n\nTITLE: Using React Flow Event Handlers for Temporary Edges\nDESCRIPTION: Implements a useIncompleteEdge hook that manages ghost nodes and temporary edges in React Flow. The hook handles various connection events including onConnect, onConnectEnd, onReconnect, and onReconnectEnd to create and manage temporary edges with ghost nodes.\nSOURCE: https://github.com/xyflow/web/blob/main/apps/example-apps/react/examples/edges/temporary-edges/README.mdx#2025-04-23_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n{\n  onConnect, // Called when a complete connection is made\n  onConnectEnd, // Called when connection line is released\n  onReconnect, // Called when a complete reconnection is made\n  onReconnectEnd // Called when reconnection line is released\n}\n```\n\n----------------------------------------\n\nTITLE: Node Type Not Found Error: Mismatched Type Key (JSX)\nDESCRIPTION: This snippet shows another cause for the 'Node type not found' error. The node definition uses `type: 'custom'`, but the key provided in the `nodeTypes` object is `'Custom'` (capitalized). The type string in the node must exactly match the key in the `nodeTypes` object.\nSOURCE: https://github.com/xyflow/web/blob/main/sites/reactflow.dev/src/content/learn/troubleshooting/index.mdx#2025-04-23_snippet_7\n\nLANGUAGE: jsx\nCODE:\n```\nimport { ReactFlow } from '@xyflow/react';\nimport '@xyflow/react/dist/style.css';\n\nimport MyCustomNode from './MyCustomNode';\n\nconst nodes = [\n  {\n    id: 'mycustomnode',\n    type: 'custom',\n    // ...\n  },\n];\n\nconst nodeTypes = {\n  Custom: MyCustomNode,\n};\n\nfunction Flow(props) {\n  // node.type and key in nodeTypes object are not exactly the same (capitalized)\n  return <ReactFlow nodes={nodes} nodeTypes={nodeTypes} />;\n}\n```\n\n----------------------------------------\n\nTITLE: Generating Grid Layout Nodes and Edges - React Flow - TypeScript\nDESCRIPTION: Implements the slidesToElements function, which transforms a mapping of slide IDs and data into arrays of nodes and edges suitable for React Flow visualization. The algorithm walks from an initial slide across each connectable direction, preventing revisiting slides, and computes positions via constants SLIDE_WIDTH and SLIDE_HEIGHT. Requires SlideData type, dimension constants, and optionally slide data as input. Edges and nodes are returned for direct use with React Flow; only the 'left' direction logic is fully shown, but all directions can be added similarly. The function does not resolve node overlaps or unreachable nodes.\nSOURCE: https://github.com/xyflow/web/blob/main/sites/reactflow.dev/src/content/learn/tutorials/slide-shows-with-react-flow.mdx#2025-04-23_snippet_8\n\nLANGUAGE: typescript\nCODE:\n```\nimport { SlideData, SLIDE_WIDTH, SLIDE_HEIGHT } from './Slide';\n\nexport const slidesToElements = (initial: string, slides: Record<string, SlideData>) => {\n  // Push the initial slide's id and the position `{ x: 0, y: 0 }` onto a stack.\n  const stack = [{ id: initial, position: { x: 0, y: 0 } }];\n  const visited = new Set();\n  const nodes = [];\n  const edges = [];\n\n  // While that stack is not empty...\n  while (stack.length) {\n    // Pop the current position and slide id off the stack.\n    const { id, position } = stack.pop();\n    // Look up the slide data by id.\n    const data = slides[id];\n    const node = { id, type: 'slide', position, data };\n\n    // Push a new node onto the nodes array with the current id, position, and slide\n    // data.\n    nodes.push(node);\n    // add the slide's id to a set of visited slides.\n    visited.add(id);\n\n    // For every direction (left, right, up, down)...\n    // Make sure the slide has not already been visited.\n    if (data.left && !visited.has(data.left)) {\n      // Take the current position and update the x or y coordinate by adding or\n      // subtracting `SLIDE_WIDTH` or `SLIDE_HEIGHT` depending on the direction.\n      const nextPosition = {\n        x: position.x - SLIDE_WIDTH,\n        y: position.y,\n      };\n\n      // Push the new position and the new slide's id onto a stack.\n      stack.push({ id: data.left, position: nextPosition });\n      // Push a new edge onto the edges array connecting the current slide to the\n      // new slide.\n      edges.push({ id: `${id}->${data.left}`, source: id, target: data.left });\n    }\n\n    // Repeat for the remaining directions...\n  }\n\n  return { nodes, edges };\n};\n```\n\n----------------------------------------\n\nTITLE: Defining the SmoothStepEdge Type Structure in React Flow (TypeScript)\nDESCRIPTION: Describes the type structure specific to a `SmoothStepEdge` variant in React Flow. It mandates the `type` property be \"smoothstep\" and allows optional `pathOptions` to control the curve's offset and border radius. This structure defines additional properties for edges explicitly typed as 'smoothstep'.\nSOURCE: https://github.com/xyflow/web/blob/main/sites/reactflow.dev/src/content/api-reference/types/edge.mdx#2025-04-23_snippet_1\n\nLANGUAGE: ts\nCODE:\n```\ntype $ = {\n  type: \"smoothstep\"\n  pathOptions?: { offset?: number; borderRadius?: number }\n}\nexport default $\n```\n\n----------------------------------------\n\nTITLE: Importing ApiReferenceSummary Component (JavaScript/TypeScript)\nDESCRIPTION: This snippet imports the `ApiReferenceSummary` component from the `xy-shared/server` module. This component is essential for rendering the API reference summary on the page. Dependency: `xy-shared/server` package must be installed and accessible.\nSOURCE: https://github.com/xyflow/web/blob/main/sites/reactflow.dev/src/content/api-reference/utils/index.mdx#2025-04-23_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport { ApiReferenceSummary } from 'xy-shared/server';\n```\n\n----------------------------------------\n\nTITLE: Defining Node Type in TypeScript for Svelte Flow\nDESCRIPTION: This code snippet defines the Node type for Svelte Flow. It includes various properties that describe a node's characteristics, such as id, position, data, and visual attributes. The type is generic, allowing for custom NodeData and NodeType.\nSOURCE: https://github.com/xyflow/web/blob/main/sites/svelteflow.dev/src/content/api-reference/types/node.mdx#2025-04-23_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nexport type Node<\n  NodeData extends Record<string, unknown>,\n  NodeType extends string,\n> = {\n  id: string;\n  position: XYPosition;\n  data: NodeData;\n  type?: NodeType;\n  sourcePosition?: Position;\n  targetPosition?: Position;\n  hidden?: boolean;\n  selected?: boolean;\n  dragging?: boolean;\n  draggable?: boolean;\n  selectable?: boolean;\n  connectable?: boolean;\n  resizing?: boolean;\n  deletable?: boolean;\n  dragHandle?: string;\n  width?: number;\n  height?: number;\n  parentId?: string;\n  zIndex?: number;\n  extent?: 'parent' | CoordinateExtent;\n  ariaLabel?: string;\n  origin?: NodeOrigin;\n  style?: string;\n  class?: string;\n  measured?: {\n    width?: number;\n    height?: number;\n  };\n};\n```\n\n----------------------------------------\n\nTITLE: Using useInternalNode Hook with React JSX\nDESCRIPTION: Example showing how to use the useInternalNode hook to access a node's absolute position and display it in a React component. The hook takes a node ID as a parameter and returns an internal node object.\nSOURCE: https://github.com/xyflow/web/blob/main/sites/reactflow.dev/src/content/api-reference/hooks/use-internal-node.mdx#2025-04-23_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport { useInternalNode } from '@xyflow/react';\n\nexport default function () {\n  const internalNode = useInternalNode('node-1');\n  const absolutePosition = internalNode.internals.positionAbsolute;\n\n  return (\n    <div>\n      The absolute position of the node is at:\n      <p>x: {absolutePosition.x}</p>\n      <p>y: {absolutePosition.y}</p>\n    </div>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Styling MiniMap Component with Styled Components\nDESCRIPTION: This example demonstrates how to use Styled Components to customize the appearance of the MiniMap component in React Flow. It applies theme-based styling to various elements of the minimap.\nSOURCE: https://github.com/xyflow/web/blob/main/sites/reactflow.dev/src/content/learn/customization/theming.mdx#2025-04-23_snippet_6\n\nLANGUAGE: jsx\nCODE:\n```\nimport { MiniMap } from '@xyflow/react';\n\nconst StyledMiniMap = styled(MiniMap)`\n  background-color: ${(props) => props.theme.bg};\n\n  .react-flow__minimap-mask {\n    fill: ${(props) => props.theme.minimapMaskBg};\n  }\n\n  .react-flow__minimap-node {\n    fill: ${(props) => props.theme.nodeBg};\n    stroke: none;\n  }\n`;\n```\n\n----------------------------------------\n\nTITLE: Using getSimpleBezierPath in XYFlow\nDESCRIPTION: Demonstrates how to use the getSimpleBezierPath utility to generate a bezier curve path between two nodes. Returns a tuple containing the SVG path string, label coordinates (x,y), and offset coordinates (x,y).\nSOURCE: https://github.com/xyflow/web/blob/main/sites/svelteflow.dev/src/content/api-reference/utils/get-simple-bezier-path.mdx#2025-04-23_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport { Position, getSimpleBezierPath } from '@xyflow/svelte';\n\nconst source = { x: 0, y: 20 };\nconst target = { x: 150, y: 100 };\n\nconst [path, labelX, labelY, offsetX, offsetY] = getSimpleBezierPath({\n  sourceX: source.x,\n  sourceY: source.y,\n  sourcePosition: Position.Right,\n  targetX: target.x,\n  targetY: target.y,\n  targetPosition: Position.Left,\n});\n\nconsole.log(path); //=> \"M0,20 C75,20 75,100 150,100\"\nconsole.log(labelX, labelY); //=> 75, 60\nconsole.log(offsetX, offsetY); //=> 75, 40\n```\n\n----------------------------------------\n\nTITLE: Mutating Node State Directly in v11 (Old API)\nDESCRIPTION: Example of updating node properties by directly mutating the node object within a `setNodes` callback in React Flow v11. This mutation-based approach is discouraged in v12.\nSOURCE: https://github.com/xyflow/web/blob/main/sites/reactflow.dev/src/content/learn/troubleshooting/migrate-to-v12.mdx#2025-04-23_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\nsetNodes((currentNodes) =>\n  currentNodes.map((node) => {\n    node.hidden = true;\n    return node;\n  }),\n);\n```\n\n----------------------------------------\n\nTITLE: Embedding RemoteCodeViewer for Edge Examples in React (JavaScript/JSX)\nDESCRIPTION: This snippet displays an embedded code example of edges in React Flow using the RemoteCodeViewer component. It retrieves content from the \\\"learn/basic-terms-edges\\\" path, restricts editing, and sizes the viewer for comfortable display. It is dependent on xy-shared/server and the props supplied. Inputs are the route and rendering configs, with output limited to the on-screen visual of the code sample for edges.\nSOURCE: https://github.com/xyflow/web/blob/main/sites/reactflow.dev/src/content/learn/concepts/terms-and-definitions.mdx#2025-04-23_snippet_2\n\nLANGUAGE: JavaScript\nCODE:\n```\n<RemoteCodeViewer\\n  route=\\\"learn/basic-terms-edges\\\"\\n  editorHeight=\\\"30vh\\\"\\n  framework=\\\"react\\\"\\n  showEditor={false}\\n/>\n```\n\n----------------------------------------\n\nTITLE: Incorrect Use of 'extent: parent' Without parentNode (JSX)\nDESCRIPTION: This snippet demonstrates incorrect usage that triggers the 'Only child nodes can use a parent extent' warning. The node `mycustomnode` has the `extent: 'parent'` option set, but it lacks a `parentNode` property. The 'parent' extent restricts node movement to the bounds of its parent node, which doesn't exist here.\nSOURCE: https://github.com/xyflow/web/blob/main/sites/reactflow.dev/src/content/learn/troubleshooting/index.mdx#2025-04-23_snippet_11\n\nLANGUAGE: jsx\nCODE:\n```\nimport { ReactFlow } from '@xyflow/react';\nimport '@xyflow/react/dist/style.css';\n\nconst nodes = [\n  {\n    id: 'mycustomnode',\n    extent: 'parent',\n    // ...\n  },\n];\n\nfunction Flow(props) {\n  return <ReactFlow nodes={nodes} />;\n}\n```\n\n----------------------------------------\n\nTITLE: Applying Fullscreen Layout Styles (CSS)\nDESCRIPTION: Defines CSS rules in `src/index.css` to ensure the React Flow component occupies the full viewport height. It removes the default margin from the body and sets the height of `html`, `body`, and the root container (`#root`) to 100%.\nSOURCE: https://github.com/xyflow/web/blob/main/sites/reactflow.dev/src/content/learn/tutorials/mind-map-app-with-react-flow.mdx#2025-04-23_snippet_5\n\nLANGUAGE: css\nCODE:\n```\nbody {\n  margin: 0;\n}\n\nhtml,\nbody,\n#root {\n  height: 100%;\n}\n\n```\n\n----------------------------------------\n\nTITLE: Importing NodeResizeControl Component in React\nDESCRIPTION: This snippet demonstrates how to import and use the NodeResizeControl component in a React application. It allows for custom resizing UI by passing children components such as icons.\nSOURCE: https://github.com/xyflow/web/blob/main/sites/reactflow.dev/src/content/api-reference/components/node-resize-control.mdx#2025-04-23_snippet_0\n\nLANGUAGE: JSX\nCODE:\n```\n<NodeResizeControl />\n```\n\n----------------------------------------\n\nTITLE: Subscribing to Node Count Changes with useStore in React Flow\nDESCRIPTION: Example showing how to use useStore hook to eagerly compute and display the number of nodes in a React Flow instance. The component re-renders whenever the node count changes.\nSOURCE: https://github.com/xyflow/web/blob/main/sites/reactflow.dev/src/content/api-reference/hooks/use-store.mdx#2025-04-23_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport { ReactFlow, useStore } from '@xyflow/react';\n\nconst nodesLengthSelector = (state) =>\n  state.nodes.length || 0;\n\nconst NodesLengthDisplay = () => {\n  const nodesLength = useStore(nodesLengthSelector);\n\n  return <div>The current number of nodes is: {nodesLength}</div>;\n};\n\nfunction Flow() {\n  return (\n    <ReactFlow nodes={[...]}>\n      <NodesLengthDisplay />\n    </ReactFlow>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Using getViewportForBounds in @xyflow/react (JavaScript)\nDESCRIPTION: This example demonstrates importing and calling the `getViewportForBounds` function from `@xyflow/react`. It calculates the viewport (`x`, `y`, `zoom`) required to display a rectangular area defined by `bounds` ({ x, y, width, height }) within a container of specified `width` (1200) and `height` (800), respecting `minZoom` (0.5) and `maxZoom` (2) constraints. The function is useful for pre-calculating viewport states or determining the fit without applying it.\nSOURCE: https://github.com/xyflow/web/blob/main/sites/reactflow.dev/src/content/api-reference/utils/get-viewport-for-bounds.mdx#2025-04-23_snippet_0\n\nLANGUAGE: js\nCODE:\n```\nimport { getViewportForBounds } from '@xyflow/react';\n\nconst { x, y, zoom } = getViewportForBounds(\n  {\n    x: 0,\n    y: 0,\n    width: 100,\n    height: 100,\n  },\n  1200,\n  800,\n  0.5,\n  2,\n);\n```\n\n----------------------------------------\n\nTITLE: Importing and Using RemoteCodeViewer Component in React (JavaScript/TypeScript)\nDESCRIPTION: This snippet demonstrates how to import the RemoteCodeViewer component from the 'xy-shared/server' package and use it to embed a code example within a React-based documentation site. Dependencies include the 'xy-shared/server' package and a React-compatible build environment. The key props are 'route' for specifying the code example to embed, 'framework' for indicating the technology, and 'showEditor' to toggle the code editor view. It requires a React context that supports JSX and expects the named route to exist. The output is an embedded, non-editable example viewer for the specified route.\nSOURCE: https://github.com/xyflow/web/blob/main/sites/reactflow.dev/src/content/whats-new/2024-11-19.mdx#2025-04-23_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nimport { RemoteCodeViewer } from 'xy-shared/server';\n\n<RemoteCodeViewer\n  route=\"examples/misc/overview\"\n  framework=\"react\"\n  showEditor={false}\n/>\n```\n\n----------------------------------------\n\nTITLE: Defining SvelteFlowStore Type in TypeScript\nDESCRIPTION: This code snippet defines the SvelteFlowStore type, which represents the internal structure of the Svelte Flow store. It includes numerous properties for managing the flow's state, nodes, edges, viewport, and user interactions, as well as methods for manipulating the flow.\nSOURCE: https://github.com/xyflow/web/blob/main/sites/svelteflow.dev/src/content/api-reference/types/svelte-flow-store.mdx#2025-04-23_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nexport type SvelteFlowStore = {\n  flowId: Writable<string | null>;\n  nodes: NodesStore;\n  nodeLookup: Readable<NodeLookup>;\n  edgeLookup: Readable<EdgeLookup>;\n  visibleNodes: Readable<Node[]>;\n  edges: EdgesStore;\n  visibleEdges: Readable<EdgeLayouted[]>;\n  connectionLookup: Readable<ConnectionLookup>;\n  height: Writable<number>;\n  width: Writable<number>;\n  minZoom: Writable<number>;\n  maxZoom: Writable<number>;\n  nodeOrigin: Writable<NodeOrigin>;\n  nodeDragThreshold: Writable<number>;\n  nodeExtent: Writable<CoordinateExtent>;\n  translateExtent: Writable<CoordinateExtent>;\n  autoPanOnNodeDrag: Writable<boolean>;\n  autoPanOnConnect: Writable<boolean>;\n  fitViewOnInit: Writable<boolean>;\n  fitViewOnInitDone: Writable<boolean>;\n  fitViewOptions: Writable<FitViewOptions>;\n  panZoom: Writable<PanZoomInstance | null>;\n  snapGrid: Writable<SnapGrid | null>;\n  dragging: Writable<boolean>;\n  selectionRect: Writable<SelectionRect | null>;\n  selectionKeyPressed: Writable<boolean>;\n  multiselectionKeyPressed: Writable<boolean>;\n  deleteKeyPressed: Writable<boolean>;\n  panActivationKeyPressed: Writable<boolean>;\n  zoomActivationKeyPressed: Writable<boolean>;\n  selectionRectMode: Writable<string | null>;\n  selectionMode: Writable<SelectionMode>;\n  nodeTypes: Writable<NodeTypes>;\n  edgeTypes: Writable<EdgeTypes>;\n  viewport: Writable<Viewport>;\n  connectionMode: Writable<ConnectionMode>;\n  domNode: Writable<HTMLDivElement | null>;\n  connection: Readable<ConnectionProps>;\n  connectionLineType: Writable<ConnectionLineType>;\n  connectionRadius: Writable<number>;\n  isValidConnection: Writable<IsValidConnection>;\n  nodesDraggable: Writable<boolean>;\n  nodesConnectable: Writable<boolean>;\n  elementsSelectable: Writable<boolean>;\n  selectNodesOnDrag: Writable<boolean>;\n  markers: Readable<MarkerProps[]>;\n  defaultMarkerColor: Writable<string>;\n  lib: Readable<string>;\n  onlyRenderVisibleElements: Writable<boolean>;\n  onerror: Writable<OnError>;\n  ondelete: Writable<OnDelete>;\n  onedgecreate: Writable<OnEdgeCreate>;\n  onconnect: Writable<OnConnect>;\n  onconnectstart: Writable<OnConnectStart>;\n  onconnectend: Writable<OnConnectEnd>;\n  onbeforedelete: Writable<OnBeforeDelete>;\n\n  setNodeTypes: (nodeTypes: NodeTypes) => void;\n  setEdgeTypes: (edgeTypes: EdgeTypes) => void;\n  addEdge: (edge: Edge | Connection) => void;\n  zoomIn: (options?: ViewportHelperFunctionOptions) => void;\n  zoomOut: (options?: ViewportHelperFunctionOptions) => void;\n  setMinZoom: (minZoom: number) => void;\n  setMaxZoom: (maxZoom: number) => void;\n  setTranslateExtent: (extent: CoordinateExtent) => void;\n  fitView: (options?: FitViewOptions) => boolean;\n  updateNodePositions: UpdateNodePositions;\n  updateNodeDimensions: (updates: Map<string, NodeDimensionUpdate>) => void;\n  unselectNodesAndEdges: (params?: { nodes?: Node[]; edges?: Edge[] }) => void;\n  addSelectedNodes: (ids: string[]) => void;\n  addSelectedEdges: (ids: string[]) => void;\n  handleNodeSelection: (id: string) => void;\n  panBy: (delta: XYPosition) => boolean;\n  updateConnection: UpdateConnection;\n  cancelConnection: () => void;\n  reset(): void;\n};\n```\n\n----------------------------------------\n\nTITLE: Demonstrating Default Pan and Zoom Controls in React Flow - JavaScript/React\nDESCRIPTION: Illustrates the default configuration of React Flow viewport controls, focusing on panning via mouse drag and zooming via scroll. This snippet depends on the React Flow library and may utilize properties like panOnDrag and zoomOnScroll with their default values. Inputs include pan and zoom actions from the user; outputs are viewport adjustments accordingly. Suitable for users seeking standard map-like navigation without customization.\nSOURCE: https://github.com/xyflow/web/blob/main/sites/reactflow.dev/src/content/learn/concepts/the-viewport.mdx#2025-04-23_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n<RemoteCodeViewer route=\\\"learn/zoom-pan\\\" framework=\\\"react\\\" />\n```\n\n----------------------------------------\n\nTITLE: Updating Node Data in Svelte Flow\nDESCRIPTION: This code snippet shows how to update the data field of a specific node in Svelte Flow. It demonstrates the use of self-assignment to trigger updates and the creation of a new data object for change detection. The example uses the RemoteCodeViewer component to display the full implementation.\nSOURCE: https://github.com/xyflow/web/blob/main/sites/svelteflow.dev/src/content/examples/nodes/update-node.mdx#2025-04-23_snippet_0\n\nLANGUAGE: svelte\nCODE:\n```\n$nodes = $nodes\n```\n\n----------------------------------------\n\nTITLE: Using useNodesData Hook with Node IDs in Svelte Flow\nDESCRIPTION: Introduces the `useNodesData` hook. Pass a single node ID (string) or an array of node IDs (string[]) to subscribe to and receive the reactive data objects of the specified nodes, facilitating data flow between components.\nSOURCE: https://github.com/xyflow/web/blob/main/sites/svelteflow.dev/src/content/whats-new/2023-12-13.mdx#2025-04-23_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nuseNodesData(ids: string | string[])\n```\n\n----------------------------------------\n\nTITLE: Correct Use of 'extent: parent' With parentNode (JSX)\nDESCRIPTION: This snippet shows the correct way to use the `extent: 'parent'` option. The node `mycustomnode` has both `extent: 'parent'` and a valid `parentNode: 'someothernode'` property defined. This configuration correctly restricts the node's movement within the boundaries of its specified parent node.\nSOURCE: https://github.com/xyflow/web/blob/main/sites/reactflow.dev/src/content/learn/troubleshooting/index.mdx#2025-04-23_snippet_12\n\nLANGUAGE: jsx\nCODE:\n```\nimport { ReactFlow } from '@xyflow/react';\nconst nodes = [\n  {\n    id: 'mycustomnode',\n    parentNode: 'someothernode',\n    extent: 'parent',\n    // ...\n  },\n];\n\nfunction Flow(props) {\n  return <ReactFlow nodes={nodes} />;\n}\n```\n\n----------------------------------------\n\nTITLE: Handling Connection Stop Events in React Flow v10 (Old API)\nDESCRIPTION: Demonstrates how to handle the end of a connection attempt (when the user releases the mouse) in React Flow v10 using the `onConnectStop` and `onClickConnectStop` event handler props.\nSOURCE: https://github.com/xyflow/web/blob/main/sites/reactflow.dev/src/content/learn/troubleshooting/migrate-to-v11.mdx#2025-04-23_snippet_7\n\nLANGUAGE: jsx\nCODE:\n```\nimport ReactFlow from 'react-flow-renderer';\n\nconst Flow = () => {\n  const onConnectStop = () => console.log('on connect stop');\n\n  return (\n    <ReactFlow\n      defaultNodes={defaultNodes}\n      defaultEdges={defaultEdges}\n      onConnectStop={onConnectStop}\n      onClickConnectStop={onConnectStop}\n    />\n  );\n};\n\nexport default Flow;\n```\n\n----------------------------------------\n\nTITLE: Typing React Flow Hooks with Custom Node and Edge Types - React Flow - TypeScript\nDESCRIPTION: Illustrates how to type React Flow hooks (e.g., useReactFlow, useStore, useNodeConnections) for advanced scenarios with custom node and edge unions. Requires @xyflow/react and custom typings. Inputs include hook selectors and connection objects, and outputs are strongly typed node and edge lists, allowing type-safe manipulation and iteration, as well as narrowing types within hook code.\nSOURCE: https://github.com/xyflow/web/blob/main/sites/reactflow.dev/src/content/learn/advanced-use/typescript.mdx#2025-04-23_snippet_6\n\nLANGUAGE: TypeScript\nCODE:\n```\nimport { useReactFlow, useNodeConnections, useNodesData, useStore } from '@xyflow/react';\n\nexport default function FlowComponent() {\n  // returned nodes and edges are correctly typed now\n  const { getNodes, getEdges } = useReactFlow<CustomNodeType, CustomEdgeType>();\n\n  // You can type useStore by typing the selector function\n  const nodes = useStore((s: ReactFlowState<CustomNodeType>) => ({\n    nodes: s.nodes,\n  }));\n\n  const connections = useNodeConnections({\n    handleType: 'target',\n  });\n\n  const nodesData = useNodesData<CustomNodeType>(connections?.[0].source);\n\n  nodeData.forEach(({ type, data }) => {\n    if (type === 'number') {\n      // This is type safe because we have narrowed down the type\n      console.log(data.number);\n    }\n  });\n  // ...\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Custom Node Rendering for MiniMap in JSX\nDESCRIPTION: This code demonstrates how to customize how each node is rendered within the <MiniMap /> by passing a custom SVG-only component via the nodeComponent prop. The MiniMapNode functional component receives MiniMapNodeProps, here rendering a circle at the node's coordinates. Depends on @xyflow/react and requires nodeComponent to use SVG elements. Custom node rendering enhances visual representation in the minimap.\nSOURCE: https://github.com/xyflow/web/blob/main/sites/reactflow.dev/src/content/api-reference/components/minimap.mdx#2025-04-23_snippet_2\n\nLANGUAGE: jsx\nCODE:\n```\nimport { ReactFlow, MiniMap } from '@xyflow/react';\n\nexport default function Flow() {\n  return (\n    <ReactFlow nodes={[...]]} edges={[...]]}>\n      <MiniMap nodeComponent={MiniMapNode} />\n    </ReactFlow>\n  );\n}\n\nfunction MiniMapNode({ x, y }) {\n  return <circle cx={x} cy={y} r=\"50\" />;\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing the OnEdgesChange Handler in TypeScript\nDESCRIPTION: This TypeScript snippet demonstrates a typical implementation of the `onEdgesChange` event handler within a React component using the `useCallback` hook for memoization. It receives an array of `changes`, uses the `applyEdgeChanges` utility from React Flow to compute the new state of edges based on these changes, and updates the component's state using the `setEdges` function.\nSOURCE: https://github.com/xyflow/web/blob/main/sites/reactflow.dev/src/content/api-reference/types/on-edges-change.mdx#2025-04-23_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\nconst onEdgesChange: OnEdgesChange = useCallback(\n  (changes) => setEdges((eds) => applyEdgeChanges(changes, eds)),\n  [setEdges],\n);\n```\n\n----------------------------------------\n\nTITLE: Installing @xyflow/react with pnpm (Bash)\nDESCRIPTION: Installs the React Flow library using the pnpm package manager. This command requires Node.js and pnpm to be installed in the development environment.\nSOURCE: https://github.com/xyflow/web/blob/main/sites/reactflow.dev/src/content/learn/getting-started/installation-and-requirements.mdx#2025-04-23_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\npnpm add @xyflow/react\n```\n\n----------------------------------------\n\nTITLE: Implementing Custom Nodes in Svelte Flow\nDESCRIPTION: This code snippet demonstrates how to create a custom node component for Svelte Flow. It shows the structure of a custom node, including how to handle node data, position, and selected state. The example also includes styling and event handling for the node.\nSOURCE: https://github.com/xyflow/web/blob/main/sites/svelteflow.dev/src/content/examples/nodes/custom-node.mdx#2025-04-23_snippet_0\n\nLANGUAGE: svelte\nCODE:\n```\n<script lang=\"ts\">\n  import { Handle, Position } from '@xyflow/svelte';\n\n  export let data;\n  export let isConnectable;\n</script>\n\n<div class=\"custom-node\">\n  <Handle\n    type=\"target\"\n    position={Position.Top}\n    {isConnectable}\n  />\n  <div>\n    Custom Color Picker Node: <strong>{data.color}</strong>\n  </div>\n  <input\n    type=\"color\"\n    value={data.color}\n    on:input={(evt) => (data.color = evt.target.value)}\n  />\n  <Handle\n    type=\"source\"\n    position={Position.Bottom}\n    {isConnectable}\n  />\n</div>\n\n<style>\n  .custom-node {\n    border: 1px solid #eee;\n    padding: 5px;\n    border-radius: 5px;\n    background: white;\n  }\n</style>\n```\n\n----------------------------------------\n\nTITLE: Implementing ReactFlowProvider in React\nDESCRIPTION: This code snippet demonstrates the usage of ReactFlowProvider to wrap multiple ReactFlow instances. It's essential for maintaining separate store instances for each flow and accessing internal state outside the ReactFlow component.\nSOURCE: https://github.com/xyflow/web/blob/main/apps/example-apps/react/examples/misc/provider/README.mdx#2025-04-23_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\n<RemoteCodeViewer route=\"examples/misc/provider\" framework=\"react\" />\n```\n\n----------------------------------------\n\nTITLE: Enhanced Padding Options for fitViewOptions in React Flow\nDESCRIPTION: Demonstrates the new flexible padding options for fitViewOptions, allowing different values for each side using pixel values, percentages, or legacy numeric values.\nSOURCE: https://github.com/xyflow/web/blob/main/sites/reactflow.dev/src/content/whats-new/2025-03-27.mdx#2025-04-23_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nconst fitViewOptions = {\n  padding: {\n    /** horizontal */\n    x: '100px',\n    /** vertical */\n    y: '50px',\n    /** e.g. top overwrites x */\n    top: '25px',\n    /** mix and match units */\n    left: '15%',\n    /** legacy units still work */\n    bottom: 0.1,\n    /** have a modal on the right that stretches 50% over the screen? */\n    right: '50%',\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: Defining NodeChange Union Type - TypeScript\nDESCRIPTION: Defines the NodeChange type as a union of six possible node mutation types (NodeDimensionChange, NodePositionChange, NodeSelectionChange, NodeRemoveChange, NodeAddChange, NodeReplaceChange) for xyflow's React Flow library. This enables the onNodesChange callback to accept consistent and type-safe change representations for managing state updates to flow diagrams. Dependencies include the previously defined Node*Change types, and the type must be imported wherever node state needs to be handled. The union supports changes related to node dimensions, position, selection, removal, addition, or replacement.\nSOURCE: https://github.com/xyflow/web/blob/main/sites/reactflow.dev/src/content/api-reference/types/node-change.mdx#2025-04-23_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\nexport type NodeChange =\n  | NodeDimensionChange\n  | NodePositionChange\n  | NodeSelectionChange\n  | NodeRemoveChange\n  | NodeAddChange\n  | NodeReplaceChange;\n```\n\n----------------------------------------\n\nTITLE: Combining Built-in and Custom Node and Edge Types - React Flow - TypeScript\nDESCRIPTION: Demonstrates creating union types for nodes and edges that incorporate both built-in and custom types, useful for heterogeneous flow diagrams. Dependencies are @xyflow/react and any custom node/edge components. Inputs are imported node/edge types, and the output types can be used throughout the app for type-safe references, enabling extensibility while maintaining TypeScript safety.\nSOURCE: https://github.com/xyflow/web/blob/main/sites/reactflow.dev/src/content/learn/advanced-use/typescript.mdx#2025-04-23_snippet_4\n\nLANGUAGE: TypeScript\nCODE:\n```\nimport type { BuiltInNode, BuiltInEdge } from '@xyflow/react';\n\n// Custom nodes\nimport NumberNode from './NumberNode';\nimport TextNode from './TextNode';\n\n// Custom edge\nimport EditableEdge from './EditableEdge';\n\nexport type CustomNodeType = BuiltInNode | NumberNode | TextNode;\nexport type CustomEdgeType = BuiltInEdge | EditableEdge;\n```\n\n----------------------------------------\n\nTITLE: Rendering RemoteCodeViewer for Custom Edges Example in Svelte\nDESCRIPTION: This code snippet renders the RemoteCodeViewer component to display a custom edges example for Svelte Flow. It specifies the route to the example code and sets the framework to Svelte.\nSOURCE: https://github.com/xyflow/web/blob/main/sites/svelteflow.dev/src/content/examples/edges/custom-edges.mdx#2025-04-23_snippet_1\n\nLANGUAGE: svelte\nCODE:\n```\n<RemoteCodeViewer\n  route=\"examples/edges/custom-edges\"\n  framework=\"svelte\"\n/>\n```\n\n----------------------------------------\n\nTITLE: Creating Oscillator and Gain Web Audio Nodes Dynamically in JavaScript\nDESCRIPTION: Defines a function `createAudioNode` to dynamically create Web Audio nodes. Based on the `type` ('osc' or 'amp'), it creates either an `OscillatorNode` or a `GainNode` using the `AudioContext`. It initializes the node's specific properties (frequency, type, gain) from the `data` object, starts the oscillator immediately, and adds the created node to the `nodes` Map using the provided `id`.\nSOURCE: https://github.com/xyflow/web/blob/main/sites/reactflow.dev/src/content/learn/tutorials/react-flow-and-the-web-audio-api.mdx#2025-04-23_snippet_25\n\nLANGUAGE: js\nCODE:\n```\nexport function createAudioNode(id, type, data) {\n  switch (type) {\n    case 'osc': {\n      const node = context.createOscillator();\n      node.frequency.value = data.frequency;\n      node.type = data.type;\n      node.start();\n\n      nodes.set(id, node);\n      break;\n    }\n\n    case 'amp': {\n      const node = context.createGain();\n      node.gain.value = data.gain;\n\n      nodes.set(id, node);\n      break;\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Installing Svelte Flow Package\nDESCRIPTION: Command to install the @xyflow/svelte package using npm package manager.\nSOURCE: https://github.com/xyflow/web/blob/main/sites/svelteflow.dev/src/content/learn/getting-started/installation.mdx#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm install @xyflow/svelte\n```\n\n----------------------------------------\n\nTITLE: Accessing Internal Node State via nodeInternals (Old API)\nDESCRIPTION: Example of accessing the internal node map using `nodeInternals` from the Zustand store in React Flow v11. This property is renamed in v12.\nSOURCE: https://github.com/xyflow/web/blob/main/sites/reactflow.dev/src/content/learn/troubleshooting/migrate-to-v12.mdx#2025-04-23_snippet_20\n\nLANGUAGE: javascript\nCODE:\n```\nconst node = useStore((s) => s.nodeInternals.get(id));\n```\n\n----------------------------------------\n\nTITLE: Embedding Labeled Handle Viewer in MDX\nDESCRIPTION: This snippet uses a custom MDX component `UiComponentViewer` to embed and display an interactive example or visual representation of the 'Labeled Handle' component. The `id` prop likely links this viewer instance to a specific configuration or data source for the labeled handle.\nSOURCE: https://github.com/xyflow/web/blob/main/sites/reactflow.dev/src/content/components/handles/labeled-handle.mdx#2025-04-23_snippet_0\n\nLANGUAGE: mdx\nCODE:\n```\n<UiComponentViewer id=\"labeled-handle\" />\n```\n\n----------------------------------------\n\nTITLE: Rendering Static React Flow HTML Markup on the Server in JavaScript\nDESCRIPTION: This function, using imports from React, react-dom/server, and @xyflow/react, demonstrates server-side generation of static HTML for a React Flow diagram. It takes graph data and options, builds the React element tree, and renders it to a string via renderToStaticMarkup. Dependencies include React, ReactFlow, Background, and react-dom/server's SSR APIs. Inputs are an object containing nodes, edges, width, and height; the output is an HTML string for documentation or HTTP responses. Limitations: This does not include interactivity, and styles must be managed separately if required.\nSOURCE: https://github.com/xyflow/web/blob/main/sites/reactflow.dev/src/content/learn/advanced-use/ssr-ssg-configuration.mdx#2025-04-23_snippet_4\n\nLANGUAGE: js\nCODE:\n```\nimport React from 'react';\nimport { renderToStaticMarkup } from 'react-dom/server';\nimport { ReactFlow, Background } from '@xyflow/react';\n\nfunction toHTML({ nodes, edges, width, height }) {\n  const html = renderToStaticMarkup(\n    React.createElement(\n      ReactFlow,\n      {\n        nodes,\n        edges,\n        width,\n        height,\n        minZoom: 0.2,\n        fitView: true,\n      },\n      React.createElement(Background, null),\n    ),\n  );\n\n  return html;\n}\n```\n\n----------------------------------------\n\nTITLE: Rendering UiComponentViewer with ID in MDX/JSX\nDESCRIPTION: This snippet demonstrates rendering the imported `UiComponentViewer` component using JSX syntax within an MDX file. It passes an `id` prop with the value 'placeholder-node', likely used by the component to identify and display the specific placeholder node UI example.\nSOURCE: https://github.com/xyflow/web/blob/main/sites/reactflow.dev/src/content/components/nodes/placeholder-node.mdx#2025-04-23_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\n<UiComponentViewer id=\"placeholder-node\" />\n```\n\n----------------------------------------\n\nTITLE: Accessing Position Props in Custom Nodes v12 (New API)\nDESCRIPTION: Demonstrates the new prop names `positionAbsoluteX` and `positionAbsoluteY` used in React Flow v12 custom node components to access the node's absolute position. These replace `xPos` and `yPos` from v11.\nSOURCE: https://github.com/xyflow/web/blob/main/sites/reactflow.dev/src/content/learn/troubleshooting/migrate-to-v12.mdx#2025-04-23_snippet_14\n\nLANGUAGE: javascript\nCODE:\n```\nfunction CustomNode({ positionAbsoluteX, positionAbsoluteY }) {\n  ...\n}\n```\n\n----------------------------------------\n\nTITLE: Importing and Using useSvelteFlow Hook in Svelte\nDESCRIPTION: This snippet demonstrates how to import the useSvelteFlow hook from the @xyflow/svelte package and use it to access functions like screenToFlowPosition and zoomIn. These functions allow for viewport manipulation and coordinate transformation in an XY Flow application.\nSOURCE: https://github.com/xyflow/web/blob/main/sites/svelteflow.dev/src/content/api-reference/hooks/use-svelte-flow.mdx#2025-04-23_snippet_0\n\nLANGUAGE: svelte\nCODE:\n```\n<script lang=\"ts\">\n  import { useSvelteFlow } from '@xyflow/svelte';\n\n  const { screenToFlowPosition, zoomIn } = useSvelteFlow();\n</script>\n```\n\n----------------------------------------\n\nTITLE: Positioning Custom Edge Labels using Path Utilities (JSX)\nDESCRIPTION: Outlines the logic for positioning a custom edge label at the midpoint of an edge by leveraging labelX and labelY returned by getStraightPath. Ensures that the button is absolutely positioned and remains interactive using pointerEvents and CSS class constraints. This approach is crucial for user interactivity in custom edge UIs, providing a responsive and accessible experience across the flow diagram.\nSOURCE: https://github.com/xyflow/web/blob/main/sites/reactflow.dev/src/content/learn/customization/custom-edges.mdx#2025-04-23_snippet_3\n\nLANGUAGE: jsx\nCODE:\n```\nexport default function CustomEdge({ id, sourceX, sourceY, targetX, targetY }) {\\n  const { setEdges } = useReactFlow();\\n  const [edgePath, labelX, labelY] = getStraightPath({ ... });\\n\\n  return (\\n    ...\\n        <button\\n          style={{\\n            position: 'absolute',\\n            transform: `translate(-50%, -50%) translate(${labelX}px, ${labelY}px)`,\\n            pointerEvents: 'all',\\n          }}\\n          className=\\\"nodrag nopan\\\"\\n          onClick={() => {\\n            setEdges((es) => es.filter((e) => e.id !== id));\\n          }}\\n        >\\n    ...\\n  );\\n}\n```\n\n----------------------------------------\n\nTITLE: Importing UI Component Viewer in React - JavaScript\nDESCRIPTION: This snippet imports the UiComponentViewer React component from the project's components directory. It is a standard ES module import necessary for rendering the visual component viewer within the documentation. No inputs or outputs are directly involved; the import is a prerequisite for component usage in the file.\nSOURCE: https://github.com/xyflow/web/blob/main/sites/reactflow.dev/src/content/components/nodes/node-status-indicator.mdx#2025-04-23_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport UiComponentViewer from '@/components/ui-component-viewer.mdx';\n```\n\n----------------------------------------\n\nTITLE: Connecting Web Audio Nodes by ID in JavaScript\nDESCRIPTION: Defines a function `connect` that establishes a connection between two Web Audio nodes. It takes `sourceId` and `targetId` as arguments, retrieves the corresponding source and target audio nodes from the `nodes` Map, and then uses the `connect` method of the source node to connect it to the target node.\nSOURCE: https://github.com/xyflow/web/blob/main/sites/reactflow.dev/src/content/learn/tutorials/react-flow-and-the-web-audio-api.mdx#2025-04-23_snippet_21\n\nLANGUAGE: js\nCODE:\n```\nexport function connect(sourceId, targetId) {\n  const source = nodes.get(sourceId);\n  const target = nodes.get(targetId);\n\n  source.connect(target);\n}\n```\n\n----------------------------------------\n\nTITLE: Installing React Flow and dependencies\nDESCRIPTION: Installs the required packages for the React Flow project including @xyflow/react for UI, zustand for state management, and nanoid for ID generation.\nSOURCE: https://github.com/xyflow/web/blob/main/sites/reactflow.dev/src/content/learn/tutorials/react-flow-and-the-web-audio-api.mdx#2025-04-23_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\nnpm install @xyflow/react zustand nanoid\n```\n\n----------------------------------------\n\nTITLE: Defining FitViewOptions Type for Node Navigation - TypeScript\nDESCRIPTION: This snippet shows the structure of the FitViewOptions type, which is used with React Flow's fitView method to enable view fitting to specific nodes. It illustrates that only the node id is required (all other Node fields are optional) for navigation. This is sourced from the @xyflow/react documentation and is crucial for understanding how to pass node references via id. The input is an object conforming to this type, used by fitView. No additional dependencies beyond type imports.\nSOURCE: https://github.com/xyflow/web/blob/main/sites/reactflow.dev/src/content/learn/tutorials/slide-shows-with-react-flow.mdx#2025-04-23_snippet_12\n\nLANGUAGE: ts\nCODE:\n```\nexport type FitViewOptions = {\n  padding?: number;\n  includeHiddenNodes?: boolean;\n  minZoom?: number;\n  maxZoom?: number;\n  duration?: number;\n  nodes?: (Partial<Node> & { id: Node['id'] })[];\n};\n\n```\n\n----------------------------------------\n\nTITLE: Adding React Flow BaseNode via shadcn (Bash)\nDESCRIPTION: Uses the `shadcn/ui` CLI to add the `<BaseNode />` component from the React Flow Components registry. This command downloads the component source code into `src/components/base-node.tsx` and installs necessary dependencies like `@xyflow/react`.\nSOURCE: https://github.com/xyflow/web/blob/main/sites/reactflow.dev/src/content/learn/tutorials/getting-started-with-react-flow-components.mdx#2025-04-23_snippet_10\n\nLANGUAGE: bash\nCODE:\n```\nnpx shadcn@latest add https://ui.reactflow.dev/base-node\n```\n\n----------------------------------------\n\nTITLE: Correct Custom Node Type Definition and Usage (JSX)\nDESCRIPTION: This snippet demonstrates the correct way to define and use custom node types. The node has `type: 'custom'`, and the `nodeTypes` object passed to `<ReactFlow>` includes a matching key `'custom'` associated with the `MyCustomNode` component.\nSOURCE: https://github.com/xyflow/web/blob/main/sites/reactflow.dev/src/content/learn/troubleshooting/index.mdx#2025-04-23_snippet_8\n\nLANGUAGE: jsx\nCODE:\n```\nimport { ReactFlow } from '@xyflow/react';\nimport '@xyflow/react/dist/style.css';\n\nimport MyCustomNode from './MyCustomNode';\n\nconst nodes = [\n  {\n    id: 'mycustomnode',\n    type: 'custom',\n    // ...\n  },\n];\n\nconst nodeTypes = {\n  custom: MyCustomNode,\n};\n\nfunction Flow(props) {\n  return <ReactFlow nodes={nodes} nodeTypes={nodeTypes} />;\n}\n```\n\n----------------------------------------\n\nTITLE: Using the Example Scaffold Script (pnpm)\nDESCRIPTION: Provides usage instructions for the `pnpm scaffold` command-line script. This script automates the creation of boilerplate code for new React Flow or Svelte Flow examples within the `example-apps` directory of the xyflow monorepo. It requires specifying the target framework ('react' or 'svelte') and the route fragment where the example will be served.\nSOURCE: https://github.com/xyflow/web/blob/main/sites/reactflow.dev/src/content/whats-new/2024-10-16.mdx#2025-04-23_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n```md\nThe scaffold script helps you quickly put together a new example for either\nreactflow.dev or svelteflow.dev by copying over the boilerplate. All arguments\nare _required_.\n\nUSAGE:\n\npnpm scaffold <FRAMEWORK> <ROUTE>\n\nEXAMPLES:\n\npnpm scaffold react blog/web-audio/demo\n\npnpm scaffold svelte guides/getting-started\n\nARGUMENTS:\n\nFRAMEWORK 'react' | 'svelte'\n\n              The framework the example will be written in. This affects where\n              the generated files are placed in conjunction with the ROUTE\n              argument.\n\nROUTE string\n\n              The route fragment the example app will be served at when combined\n              with the FRAMEWORK argument. For example, calling the script as\n              `pnpm scaffold react examples/nodes/custom-node` will scaffold\n              the example and make it accessible at\n              '/react/examples/nodes/custom-node/index.html'.\n```\n```\n\n----------------------------------------\n\nTITLE: Using useNodesState with TypeScript for Custom Node Types\nDESCRIPTION: This snippet shows how to use the useNodesState hook with TypeScript, accepting a generic type argument for custom node types. It demonstrates the syntax for using the hook with a CustomNodeType.\nSOURCE: https://github.com/xyflow/web/blob/main/sites/reactflow.dev/src/content/api-reference/hooks/use-nodes-state.mdx#2025-04-23_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\nconst nodes = useNodesState<CustomNodeType>();\n```\n\n----------------------------------------\n\nTITLE: Defining EdgeChange Union Type in TypeScript\nDESCRIPTION: This snippet defines the EdgeChange type as a union of four object types: EdgeAddChange, EdgeRemoveChange, EdgeReplaceChange, and EdgeSelectionChange. It is intended for use with the onEdgesChange callback in the xyflow library, allowing robust typing of edge state updates in a flow system. Dependencies include the definitions of the four variant types, which must be imported or defined within the same project; the primary input is the variant type itself, and the output is a strongly typed EdgeChange value.\nSOURCE: https://github.com/xyflow/web/blob/main/sites/reactflow.dev/src/content/api-reference/types/edge-change.mdx#2025-04-23_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\nexport type EdgeChange =\n  | EdgeAddChange\n  | EdgeRemoveChange\n  | EdgeReplaceChange\n  | EdgeSelectionChange;\n```\n\n----------------------------------------\n\nTITLE: Setting up the React Application Entry Point (TypeScript)\nDESCRIPTION: Configures the main application entry point (`src/main.tsx`). It wraps the root `App` component with `ReactFlowProvider` to enable access to React Flow hooks throughout the application. It uses `ReactDOM.createRoot` to render the application within the HTML element with id 'root'.\nSOURCE: https://github.com/xyflow/web/blob/main/sites/reactflow.dev/src/content/learn/tutorials/mind-map-app-with-react-flow.mdx#2025-04-23_snippet_4\n\nLANGUAGE: tsx\nCODE:\n```\nimport React from 'react';\nimport ReactDOM from 'react-dom/client';\nimport { ReactFlowProvider } from '@xyflow/react';\n\nimport App from './App';\n\nimport './index.css';\n\nReactDOM.createRoot(document.getElementById('root') as HTMLElement).render(\n  <React.StrictMode>\n    <ReactFlowProvider>\n      <App />\n    </ReactFlowProvider>\n  </React.StrictMode>,\n);\n\n```\n\n----------------------------------------\n\nTITLE: Importing and Displaying Zoom Select Component Viewer - React - JavaScript\nDESCRIPTION: This snippet demonstrates importing the UiComponentViewer React component and rendering it with the 'zoom-select' ID. It depends on the component being available at the specified path and expects the existence of a Zoom Select example in the demo registry. The snippet is intended for MDX files and outputs an interactive component preview.\nSOURCE: https://github.com/xyflow/web/blob/main/sites/reactflow.dev/src/content/components/controls/zoom-select.mdx#2025-04-23_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport UiComponentViewer from '@/components/ui-component-viewer.mdx';\n\n<UiComponentViewer id=\"zoom-select\" />\n```\n\n----------------------------------------\n\nTITLE: Accessing Flow State in Child Components Using SvelteFlowProvider\nDESCRIPTION: This code demonstrates how to create a Sidebar component that uses the useNodes hook to access node data from a parent SvelteFlow component. The hook can only work when the component is a child of SvelteFlowProvider.\nSOURCE: https://github.com/xyflow/web/blob/main/sites/svelteflow.dev/src/content/api-reference/svelte-flow-provider.mdx#2025-04-23_snippet_1\n\nLANGUAGE: svelte\nCODE:\n```\n<script>\n  import { SvelteFlow, SvelteFlowProvider } from '@xyflow/svelte'\n\n  // This hook will only work if the component it's used in is a child of a\n  // <SvelteFlowProvider />.\n  const nodes = useNodes()\n</script>\n\n<aside>\n  {#each $nodes as node (node.id)}\n    <div key={node.id}>\n      Node {node.id} -\n        x: {node.position.x.toFixed(2)},\n        y: {node.position.y.toFixed(2)}\n    </div>\n  {/each}\n</aside>\n```\n\n----------------------------------------\n\nTITLE: Rendering a Generic Custom Node Based on Union Type - React Flow - TypeScript\nDESCRIPTION: Illustrates how to handle multiple custom node types by creating a component that uses a union of node types in its props, allowing conditional rendering based on the node's type. It requires explicit union types for all custom nodes, uses type guards via checking type properties, and outputs different content based on the node kind. This pattern supports extensibility when many node variations are present in the diagram.\nSOURCE: https://github.com/xyflow/web/blob/main/sites/reactflow.dev/src/content/learn/advanced-use/typescript.mdx#2025-04-23_snippet_2\n\nLANGUAGE: TypeScript\nCODE:\n```\nimport type { Node, NodeProps } from '@xyflow/react';\n\ntype NumberNode = Node<{ number: number }, 'number'>;\ntype TextNode = Node<{ text: string }, 'text'>;\n\ntype AppNode = NumberNode | TextNode;\n\nexport default function CustomNode({ data }: NodeProps<AppNode>) {\n  if (data.type === 'number') {\n    return <div>A special number: {data.number}</div>;\n  }\n\n  return <div>A special text: {data.text}</div>;\n}\n```\n\n----------------------------------------\n\nTITLE: Importing UiComponentViewer Component in MDX/JavaScript\nDESCRIPTION: This snippet imports the `UiComponentViewer` component from a relative path ('@/components/ui-component-viewer.mdx') within the project. This component is subsequently used to render UI examples or previews within the MDX documentation.\nSOURCE: https://github.com/xyflow/web/blob/main/sites/reactflow.dev/src/content/components/nodes/placeholder-node.mdx#2025-04-23_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport UiComponentViewer from '@/components/ui-component-viewer.mdx';\n```\n\n----------------------------------------\n\nTITLE: Adding temporary dummy nodes to Zustand store\nDESCRIPTION: Demonstrates how to add initial nodes to the Zustand store for testing the React Flow graph functionality. These nodes represent basic audio components like oscillator, gain, and output.\nSOURCE: https://github.com/xyflow/web/blob/main/sites/reactflow.dev/src/content/learn/tutorials/react-flow-and-the-web-audio-api.mdx#2025-04-23_snippet_9\n\nLANGUAGE: js\nCODE:\n```\nconst useStore = createWithEqualityFn((set, get) => ({\n  nodes: [\n    { id: 'a', data: { label: 'oscillator' }, position: { x: 0, y: 0 } },\n    { id: 'b', data: { label: 'gain' }, position: { x: 50, y: 50 } },\n    { id: 'c', data: { label: 'output' }, position: { x: -50, y: 100 } }\n  ],\n  ...\n}));\n```\n\n----------------------------------------\n\nTITLE: Configuring Vite Path Aliases (JavaScript)\nDESCRIPTION: Updates the Vite configuration file (`vite.config.js`) to resolve the TypeScript path aliases. It imports the `path` module (line 3) and adds a `resolve.alias` configuration (lines 7-11) to map the `@` alias to the `src` directory, mirroring the `tsconfig.json` setup.\nSOURCE: https://github.com/xyflow/web/blob/main/sites/reactflow.dev/src/content/learn/tutorials/getting-started-with-react-flow-components.mdx#2025-04-23_snippet_8\n\nLANGUAGE: js\nCODE:\n```\nimport { defineConfig } from 'vite';\nimport react from '@vitejs/plugin-react';\nimport path from 'node:path';\n\nexport default defineConfig({\n  plugins: [react()],\n  resolve: {\n    alias: {\n      '@': path.resolve(__dirname, './src'),\n    },\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Accessing store state (Old/Redux style vs New/Zustand style) - React (JS/JSX)\nDESCRIPTION: These snippets demonstrate accessing React Flow's internal store with the old Redux-based selectors (`useStoreState`) and the new Zustand-based `useStore` API. The newer version uses a single hook from `react-flow-renderer` and supports direct access within any React component under `ReactFlowProvider`. Inputs are store selector functions; outputs are derived state (e.g., viewport transform).\nSOURCE: https://github.com/xyflow/web/blob/main/sites/reactflow.dev/src/content/learn/troubleshooting/migrate-to-v10.mdx#2025-04-23_snippet_5\n\nLANGUAGE: jsx\nCODE:\n```\nimport { useStoreState, useStoreActions } from 'react-flow-renderer';\\n\\n...\\n\\nconst transform = useStoreState((store) => store.transform);\n```\n\nLANGUAGE: jsx\nCODE:\n```\nimport { useStore } from 'react-flow-renderer';\\n\\n...\\nconst transform = useStore((store) => store.transform);\n```\n\n----------------------------------------\n\nTITLE: Using ControlButton Component in React Flow\nDESCRIPTION: This snippet demonstrates how to use the ControlButton component within a React Flow setup. It shows how to add a custom button with an icon to the Controls component, which triggers an alert when clicked.\nSOURCE: https://github.com/xyflow/web/blob/main/sites/reactflow.dev/src/content/api-reference/components/control-button.mdx#2025-04-23_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport { MagicWand } from '@radix-ui/react-icons'\nimport { ReactFlow, Controls, ControlButton } from '@xyflow/react'\n\nexport default function Flow() {\n  return (\n    <ReactFlow nodes={[...]} edges={[...]}>\n      <Controls>\n        <ControlButton onClick={() => alert('Something magical just happened. ✨')}>\n          <MagicWand />\n        </ControlButton>\n      </Controls>\n    </ReactFlow>\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Initializing React Flow with nodes and edges (New API) - React (JSX)\nDESCRIPTION: This updated snippet implements React Flow v10's API, separating nodes and edges for more controlled and predictable state management. The callbacks `onNodesChange`/`onEdgesChange` use `applyNodeChanges`/`applyEdgeChanges` to sync state updates, with `addEdge` for new connections. This promotes explicit two-way binding for graph changes. Requires `react-flow-renderer` v10+, React hooks, and optionally hooks like `useNodesState` for conciseness.\nSOURCE: https://github.com/xyflow/web/blob/main/sites/reactflow.dev/src/content/learn/troubleshooting/migrate-to-v10.mdx#2025-04-23_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\nimport { useState, useCallback } from 'react';\\nimport {\\n  ReactFlow,\\n  applyNodeChanges,\\n  applyEdgeChanges,\\n  addEdge,\\n} from 'react-flow-renderer';\\n\\nconst initialNodes = [\\n  { id: '1', data: { label: 'Node 1' }, position: { x: 250, y: 0 } },\\n  { id: '2', data: { label: 'Node 2' }, position: { x: 150, y: 100 } },\\n];\\n\\nconst initialEdges = [{ id: 'e1-2', source: '1', target: '2' }];\\n\\nconst BasicFlow = () => {\\n  const [nodes, setNodes] = useState(initialNodes);\\n  const [edges, setEdges] = useState(initialEdges);\\n\\n  const onNodesChange = useCallback(\\n    (changes) => setNodes((ns) => applyNodeChanges(changes, ns)),\\n    [],\\n  );\\n  const onEdgesChange = useCallback(\\n    (changes) => setEdges((es) => applyEdgeChanges(changes, es)),\\n    [],\\n  );\\n  const onConnect = useCallback((connection) =>\\n    setEdges((eds) => addEdge(connection, eds)),\\n  );\\n\\n  return (\\n    <ReactFlow\\n      nodes={nodes}\\n      edges={edges}\\n      onNodesChange={onNodesChange}\\n      onEdgesChange={onEdgesChange}\\n      onConnect={onConnect}\\n    />\\n  );\\n};\\n\\nexport default BasicFlow;\n```\n\n----------------------------------------\n\nTITLE: Importing Svelte Flow Components\nDESCRIPTION: Example of importing the SvelteFlow component and required CSS styles into a Svelte application. The CSS import is mandatory for proper functionality.\nSOURCE: https://github.com/xyflow/web/blob/main/sites/svelteflow.dev/src/content/learn/getting-started/installation.mdx#2025-04-23_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport { SvelteFlow } from '@xyflow/svelte';\n\n// 👇 this is important! You need to import the styles for Svelte Flow to work\nimport '@xyflow/svelte/dist/style.css';\n```\n\n----------------------------------------\n\nTITLE: Initializing shadcn/ui (Bash)\nDESCRIPTION: Executes the `shadcn/ui` initialization command. This interactive CLI prompts the user for configuration choices (style, base color, CSS variables), generates a `components.json` file, and updates `tailwind.config.js` accordingly.\nSOURCE: https://github.com/xyflow/web/blob/main/sites/reactflow.dev/src/content/learn/tutorials/getting-started-with-react-flow-components.mdx#2025-04-23_snippet_9\n\nLANGUAGE: bash\nCODE:\n```\nnpx shadcn@latest init\n```\n\n----------------------------------------\n\nTITLE: Output Node Implementation with Audio Toggle\nDESCRIPTION: Custom output node component with audio processing toggle functionality and visual feedback.\nSOURCE: https://github.com/xyflow/web/blob/main/sites/reactflow.dev/src/content/learn/tutorials/react-flow-and-the-web-audio-api.mdx#2025-04-23_snippet_14\n\nLANGUAGE: jsx\nCODE:\n```\nimport React from 'react';\nimport { Handle } from '@xyflow/react';\nimport { shallow } from 'zustand/shallow';\nimport { useStore } from '../store';\n\nconst selector = (store) => ({\n  isRunning: store.isRunning,\n  toggleAudio: store.toggleAudio,\n});\n\nexport default function Out({ id, data }) {\n  const { isRunning, toggleAudio } = useStore(selector, shallow);\n\n  return (\n    <div>\n      <Handle type=\"target\" position=\"top\" />\n\n      <div>\n        <p>Output Node</p>\n\n        <button onClick={toggleAudio}>\n          {isRunning ? (\n            <span role=\"img\" aria-label=\"mute\">\n              🔇\n            </span>\n          ) : (\n            <span role=\"img\" aria-label=\"unmute\">\n              🔈\n            </span>\n          )}\n        </button>\n      </div>\n    </div>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Rendering API ReferenceSummary Component Categorized by Types in JSX\nDESCRIPTION: Renders the ApiReferenceSummary component with the 'category' prop set to 'types' within JSX. This enables the dynamic display of all type-related API references in the documentation. The component accepts the category string as a prop and outputs a summary listing for that category. The only required parameter is category, which should match available categories in the API metadata. The visual output depends on how ApiReferenceSummary is implemented.\nSOURCE: https://github.com/xyflow/web/blob/main/sites/reactflow.dev/src/content/api-reference/types/index.mdx#2025-04-23_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\n<ApiReferenceSummary category=\\\"types\\\" />\n```\n\n----------------------------------------\n\nTITLE: Using useHandleConnections Hook in Svelte Flow\nDESCRIPTION: Introduces the `useHandleConnections` hook, which allows subscribing to connection changes for a specific handle, providing the IDs of connected nodes and handles. This hook simplifies tracking connections to a particular handle.\nSOURCE: https://github.com/xyflow/web/blob/main/sites/svelteflow.dev/src/content/whats-new/2023-12-13.mdx#2025-04-23_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nuseHandleConnections\n```\n\n----------------------------------------\n\nTITLE: Animating Nodes Along Edge Paths Using Web Animations API in React Flow\nDESCRIPTION: This example shows how to animate a node along an edge path using the Web Animations API. It utilizes the offsetPath property and animates the offsetDistance property. The snippet includes important implementation details about disabling dragging during animation and separating path calculation and animation setup.\nSOURCE: https://github.com/xyflow/web/blob/main/apps/example-apps/react/examples/edges/animating-edges/README.mdx#2025-04-23_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\n<RemoteCodeViewer route=\"examples/edges/animating-edges\" framework=\"react\" />\n```\n\n----------------------------------------\n\nTITLE: Importing NodeResizeControl Component in JSX/TSX\nDESCRIPTION: Example of how to reference the NodeResizeControl component in React-based applications. This component allows creating custom node resizing UI by passing children elements.\nSOURCE: https://github.com/xyflow/web/blob/main/sites/svelteflow.dev/src/content/api-reference/components/node-resize-control.mdx#2025-04-23_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\n<NodeResizeControl />\n```\n\n----------------------------------------\n\nTITLE: Implementing Zustand store for React Flow state management\nDESCRIPTION: Creates a Zustand store (store.js) to manage the state of the React Flow graph. It includes actions for updating nodes and edges, and adding new edges to the graph.\nSOURCE: https://github.com/xyflow/web/blob/main/sites/reactflow.dev/src/content/learn/tutorials/react-flow-and-the-web-audio-api.mdx#2025-04-23_snippet_7\n\nLANGUAGE: js\nCODE:\n```\nimport { applyNodeChanges, applyEdgeChanges } from '@xyflow/react';\nimport { nanoid } from 'nanoid';\nimport { createWithEqualityFn } from 'zustand/traditional';\n\nexport const useStore = createWithEqualityFn((set, get) => ({\n  nodes: [],\n  edges: [],\n\n  onNodesChange(changes) {\n    set({\n      nodes: applyNodeChanges(changes, get().nodes),\n    });\n  },\n\n  onEdgesChange(changes) {\n    set({\n      edges: applyEdgeChanges(changes, get().edges),\n    });\n  },\n\n  addEdge(data) {\n    const id = nanoid(6);\n    const edge = { id, ...data };\n\n    set({ edges: [edge, ...get().edges] });\n  },\n}));\n```\n\n----------------------------------------\n\nTITLE: Installing Dependencies with PNPM\nDESCRIPTION: Command to install all project dependencies using the PNPM package manager.\nSOURCE: https://github.com/xyflow/web/blob/main/README.md#2025-04-23_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\npnpm install\n```\n\n----------------------------------------\n\nTITLE: Rendering API Reference Summary for Hooks in JSX\nDESCRIPTION: This code snippet renders the ApiReferenceSummary component, passing 'hooks' as the category prop. This will display a summary of the API reference specifically for hooks.\nSOURCE: https://github.com/xyflow/web/blob/main/sites/reactflow.dev/src/content/api-reference/hooks/index.mdx#2025-04-23_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\n<ApiReferenceSummary category=\"hooks\" />\n```\n\n----------------------------------------\n\nTITLE: Using the useNodesInitialized Hook in Svelte\nDESCRIPTION: This snippet demonstrates how to import and use the useNodesInitialized hook in a Svelte component. The hook returns a readable store that indicates whether all nodes are initialized.\nSOURCE: https://github.com/xyflow/web/blob/main/sites/svelteflow.dev/src/content/api-reference/hooks/use-nodes-initialized.mdx#2025-04-23_snippet_0\n\nLANGUAGE: svelte\nCODE:\n```\n<script lang=\"ts\">\n  import { useNodesInitialized } from '@xyflow/svelte';\n\n  const useNodesInitialized = useNodesInitialized();\n</script>\n```\n\n----------------------------------------\n\nTITLE: Using getNodesBounds() to Calculate Node Bounding Box in JavaScript\nDESCRIPTION: This snippet demonstrates how to use the getNodesBounds() function from the @xyflow/svelte package to calculate the bounding box for an array of nodes. It shows the structure of node objects and how to call the function.\nSOURCE: https://github.com/xyflow/web/blob/main/sites/svelteflow.dev/src/content/api-reference/utils/get-nodes-bounds.mdx#2025-04-23_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport { getNodesBounds } from '@xyflow/svelte';\n\nconst nodes = [\n  {\n    id: 'a',\n    position: { x: 0, y: 0 },\n    data: { label: 'a' },\n    width: 50,\n    height: 25,\n  },\n  {\n    id: 'b',\n    position: { x: 100, y: 100 },\n    data: { label: 'b' },\n    width: 50,\n    height: 25,\n  },\n];\n\nconst bounds = getNodesBounds(nodes);\n```\n\n----------------------------------------\n\nTITLE: Defining Parent and Child Nodes for Sub Flows in Svelte\nDESCRIPTION: This JavaScript snippet demonstrates creating a basic sub flow structure within a Svelte `writable` store. Node 'B' is designated as a child of node 'A' by setting its `parentId` property to 'A'. Child node positions (`position`) are specified relative to the parent node's top-left corner. It's crucial that parent nodes appear before their children in the array.\nSOURCE: https://github.com/xyflow/web/blob/main/sites/svelteflow.dev/src/content/learn/guides/sub-flows.mdx#2025-04-23_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n```js\nconst nodes = writable([\n  // this is a regular node\n  {\n    id: 'A',\n    data: {},\n    position: { x: 0, y: 0 },\n  },\n  // this gets a child node by using the parentId option\n  {\n    id: 'B',\n    data: { label: 'child 1' },\n    position: { x: 10, y: 10 },\n    // 👇\n    parentId: 'A',\n  },\n]);\n```\n```\n\n----------------------------------------\n\nTITLE: Calculating Straight Line Path Between Two Points Using @xyflow/react (JavaScript)\nDESCRIPTION: This snippet demonstrates the usage of the getStraightPath function from the @xyflow/react package to compute a straight SVG path between two points, along with key points for labeling and offsetting. The function requires coordinates for the source and target points, passed as numeric x and y values. Its output is a tuple containing the SVG path string and the midpoint coordinates for both labels and offsets. The main expected input is an object specifying source/target coordinates, and outputs include the SVG path and numeric positions. Dependencies include the @xyflow/react library. This utility simplifies edge path generation for diagramming applications, but is limited to straight lines between two points.\nSOURCE: https://github.com/xyflow/web/blob/main/sites/reactflow.dev/src/content/api-reference/utils/get-straight-path.mdx#2025-04-23_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport { getStraightPath } from '@xyflow/react';\n\nconst source = { x: 0, y: 20 };\nconst target = { x: 150, y: 100 };\n\nconst [path, labelX, labelY, offsetX, offsetY] = getStraightPath({\n  sourceX: source.x,\n  sourceY: source.y,\n  targetX: target.x,\n  targetY: target.y,\n});\n\nconsole.log(path); //=> \"M 0,20L 150,100\"\nconsole.log(labelX, labelY); //=> 75, 60\nconsole.log(offsetX, offsetY); //=> 75, 40\n```\n\n----------------------------------------\n\nTITLE: Accessing React Flow store with useStoreApi (Zustand) - React (JS)\nDESCRIPTION: This snippet shows how to use `useStoreApi` from `react-flow-renderer` to access the underlying Zustand store directly. This is useful for extracting state or triggering store actions within event handlers or outside of render, avoiding rerenders. The example accesses the `transform` tuple for viewport state. Wrap your component in `ReactFlowProvider` for hook access. Input: none or store selector; output: current store state or functions.\nSOURCE: https://github.com/xyflow/web/blob/main/sites/reactflow.dev/src/content/learn/troubleshooting/migrate-to-v10.mdx#2025-04-23_snippet_6\n\nLANGUAGE: js\nCODE:\n```\nimport { useStoreApi } from 'react-flow-renderer';\\n\\n...\\n\\nconst store = useStoreApi();\\n\\n...\\n// in an event handler\\nconst [x, y, zoom] = store.getState().transform;\n```\n\n----------------------------------------\n\nTITLE: Rendering Screenshot Image – React – JavaScript\nDESCRIPTION: This snippet renders an image in the post using the imported React Image component. It specifies the image source and an alt description for accessibility. The 'src' parameter is a path to the image to display, and 'alt' provides descriptive text shown to users if the image cannot be rendered. The component depends on the 'Image' import and on a build system that supports JSX within Markdown (e.g., MDX). The expected output is a displayed screenshot in the rendered webpage.\nSOURCE: https://github.com/xyflow/web/blob/main/sites/reactflow.dev/src/content/whats-new/2023-12-06.mdx#2025-04-23_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\n<Image\n  src=\"/img/whats-new/pro-platform-open-source.png\"\n  alt=\"A screenshot of the new Pro Platform design.\"\n/>\n```\n\n----------------------------------------\n\nTITLE: Importing and Rendering API Reference Summary for Types in JSX\nDESCRIPTION: This code snippet imports the ApiReferenceSummary component from 'xy-shared/server' and renders it with the 'types' category. This component is likely used to generate a summary of the API reference documentation for types in the xyflow/web project.\nSOURCE: https://github.com/xyflow/web/blob/main/sites/svelteflow.dev/src/content/api-reference/types/index.mdx#2025-04-23_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport { ApiReferenceSummary } from 'xy-shared/server';\n\n# Types\n\n<ApiReferenceSummary category=\"types\" />\n```\n\n----------------------------------------\n\nTITLE: Implementing useNodeConnections Hook in Svelte Flow\nDESCRIPTION: New hook addition that allows tracking all connections to a specific node. The hook can be filtered by handleType and handleId to get specific connection details.\nSOURCE: https://github.com/xyflow/web/blob/main/sites/svelteflow.dev/src/content/whats-new/2025-01-15.mdx#2025-04-23_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nuseNodeConnections(nodeId: string, options?: { handleId?: string; handleType?: 'source' | 'target' })\n```\n\n----------------------------------------\n\nTITLE: Defining NodeProps Type for Custom Nodes (TypeScript)\nDESCRIPTION: Defines a generic NodeProps type in TypeScript, specifying the required and optional properties that a custom node component will receive within the XYFlow framework. This structure ensures type safety and a consistent API for node components, including ID, node data, selection state, dragging state, and positional information. No external dependencies are required beyond XYFlow types, and keys like position, data, and event states are mandatory for implementation.\nSOURCE: https://github.com/xyflow/web/blob/main/sites/reactflow.dev/src/content/api-reference/types/node-props.mdx#2025-04-23_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\nexport type NodeProps<NodeType extends Node = Node> = {\n  id: string;\n  data: Node['data'];\n  dragHandle?: boolean;\n  type?: string;\n  selected?: boolean;\n  isConnectable?: boolean;\n  zIndex?: number;\n  positionAbsoluteX: number;\n  positionAbsoluteY: number;\n  dragging: boolean;\n  targetPosition?: Position;\n  sourcePosition?: Position;\n};\n```\n\n----------------------------------------\n\nTITLE: Accessing NodeResizeControl Props Type in TypeScript\nDESCRIPTION: This code snippet shows how to access the props type for the NodeResizeControl component in TypeScript. The type is exported as ResizeControlProps for type-safe usage.\nSOURCE: https://github.com/xyflow/web/blob/main/sites/reactflow.dev/src/content/api-reference/components/node-resize-control.mdx#2025-04-23_snippet_1\n\nLANGUAGE: TypeScript\nCODE:\n```\nResizeControlProps\n```\n\n----------------------------------------\n\nTITLE: Installing Dependencies - Package Info\nDESCRIPTION: Specifies the required html-to-image package version (1.11.11) due to compatibility issues with newer versions. Later versions have known issues with image export functionality.\nSOURCE: https://github.com/xyflow/web/blob/main/apps/example-apps/react/examples/misc/download-image/README.mdx#2025-04-23_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\nhtml-to-image@1.11.11\n```\n\n----------------------------------------\n\nTITLE: Importing Base Svelte Flow Styles (JavaScript)\nDESCRIPTION: Imports the minimal base Svelte Flow stylesheet (`base.css`) into a JavaScript/Svelte project. This file includes only the essential styles required for the library's core functionality, allowing for extensive custom theming.\nSOURCE: https://github.com/xyflow/web/blob/main/sites/svelteflow.dev/src/content/learn/guides/theming.mdx#2025-04-23_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport '@xyflow/svelte/dist/base.css';\n```\n\n----------------------------------------\n\nTITLE: Styling Input Focus and Pointer Events (CSS)\nDESCRIPTION: This CSS snippet updates styles to manage user interactions, particularly for starting connections and editing text. It sets `pointer-events: none` on the input wrapper and input field by default, allowing clicks to pass through for connection initiation. The drag handle retains `pointer-events: all`. The input field gets `pointer-events: all` only when focused, enabling typing. It also adjusts the z-index for connection lines.\nSOURCE: https://github.com/xyflow/web/blob/main/sites/reactflow.dev/src/content/learn/tutorials/mind-map-app-with-react-flow.mdx#2025-04-23_snippet_23\n\nLANGUAGE: css\nCODE:\n```\n```css\n/* we want the connection line to be below the node */\n.react-flow .react-flow__connectionline {\n  z-index: 0;\n}\n\n/* pointer-events: none so that the click for the connection goes through */\n.inputWrapper {\n  display: flex;\n  height: 20px;\n  position: relative;\n  z-index: 1;\n  pointer-events: none;\n}\n\n/* pointer-events: all so that we can use the drag handle (here the user cant start a new connection) */\n.dragHandle {\n  background: transparent;\n  width: 14px;\n  height: 100%;\n  margin-right: 4px;\n  display: flex;\n  align-items: center;\n  pointer-events: all;\n}\n\n/* pointer-events: none by default */\n.input {\n  border: none;\n  padding: 0 2px;\n  border-radius: 1px;\n  font-weight: 700;\n  background: transparent;\n  height: 100%;\n  color: #222;\n  pointer-events: none;\n}\n\n/* pointer-events: all when it's focused so that we can type in it */\n.input:focus {\n  border: none;\n  outline: none;\n  background: rgba(255, 255, 255, 0.25);\n  pointer-events: all;\n}\n```\n```\n\n----------------------------------------\n\nTITLE: Implementing Node Creation Buttons within React Flow Panel in JSX\nDESCRIPTION: Adds UI elements to the React Flow `Panel` for creating new nodes. It renders two buttons, 'osc' and 'amp'. Each button's `onClick` handler calls the `createNode` action (obtained from the Zustand store via the `store` variable) with the corresponding node type ('osc' or 'amp').\nSOURCE: https://github.com/xyflow/web/blob/main/sites/reactflow.dev/src/content/learn/tutorials/react-flow-and-the-web-audio-api.mdx#2025-04-23_snippet_28\n\nLANGUAGE: jsx\nCODE:\n```\n<Panel position=\"top-right\">\n  <button onClick={() => store.createNode('osc')}>osc</button>\n  <button onClick={() => store.createNode('amp')}>amp</button>\n</Panel>\n```\n\n----------------------------------------\n\nTITLE: Using RemoteCodeViewer Component in React (JSX)\nDESCRIPTION: Renders the `RemoteCodeViewer` component within a React application using JSX. It configures the component to display code associated with the 'tutorials/presentation/app' route, specifies 'react' as the framework, and hides the editor interface (`showEditor={false}`). This allows embedding the tutorial's application code directly into the blog post.\nSOURCE: https://github.com/xyflow/web/blob/main/sites/reactflow.dev/src/content/whats-new/2024-07-22.mdx#2025-04-23_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\n<RemoteCodeViewer\n  route=\"tutorials/presentation/app\"\n  framework=\"react\"\n  showEditor={false}\n/>\n```\n\n----------------------------------------\n\nTITLE: Using New Viewport API in React Flow\nDESCRIPTION: Demonstrates the usage of new viewport control functions including setViewport, setCenter, and setZoom. Also introduces new getter functions getZoom and getViewport.\nSOURCE: https://github.com/xyflow/web/blob/main/sites/reactflow.dev/src/content/learn/troubleshooting/migrate-to-v10.mdx#2025-04-23_snippet_10\n\nLANGUAGE: javascript\nCODE:\n```\nconst { setViewport, setCenter, setZoom } = useReactFlow();\n...\nsetViewport({ x: 100, y: 100, zoom: 2 });\n```\n\n----------------------------------------\n\nTITLE: Configuring main React component with React Flow\nDESCRIPTION: Sets up the main React component (main.jsx) to include ReactFlowProvider and necessary styles. It wraps the App component in a container with defined dimensions for React Flow to work correctly.\nSOURCE: https://github.com/xyflow/web/blob/main/sites/reactflow.dev/src/content/learn/tutorials/react-flow-and-the-web-audio-api.mdx#2025-04-23_snippet_5\n\nLANGUAGE: jsx\nCODE:\n```\nimport App from './App';\nimport React from 'react';\nimport ReactDOM from 'react-dom/client';\nimport { ReactFlowProvider } from '@xyflow/react';\n\n// 👇 Don't forget to import the styles!\nimport '@xyflow/react/dist/style.css';\nimport './index.css';\n\nconst root = document.querySelector('#root');\n\nReactDOM.createRoot(root).render(\n  <React.StrictMode>\n    {/* React flow needs to be inside an element with a known height and width to work */}\n    <div style={{ width: '100vw', height: '100vh' }}>\n      <ReactFlowProvider>\n        <App />\n      </ReactFlowProvider>\n    </div>\n  </React.StrictMode>,\n);\n```\n\n----------------------------------------\n\nTITLE: Including Remote Code Viewer Component for React Flow Example\nDESCRIPTION: This code snippet includes a RemoteCodeViewer component to display the computing flows example for React Flow. It specifies the route to the example code and the framework used.\nSOURCE: https://github.com/xyflow/web/blob/main/apps/example-apps/react/examples/interaction/computing-flows/README.mdx#2025-04-23_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\n<RemoteCodeViewer\n  route=\"examples/interaction/computing-flows\"\n  framework=\"react\"\n/>\n```\n\n----------------------------------------\n\nTITLE: Using the useConnection Hook in Svelte\nDESCRIPTION: Demonstrates how to import and use the useConnection hook in a Svelte component. This hook returns the current connection during active connection interactions, or null values when no connection interaction is active.\nSOURCE: https://github.com/xyflow/web/blob/main/sites/svelteflow.dev/src/content/api-reference/hooks/use-connection.mdx#2025-04-23_snippet_0\n\nLANGUAGE: svelte\nCODE:\n```\n<script lang=\"ts\">\n  import { useConnection } from '@xyflow/svelte';\n\n  const connection = useConnection();\n</script>\n```\n\n----------------------------------------\n\nTITLE: Defining FitView Options Type for React Flow in TypeScript\nDESCRIPTION: This snippet defines the FitViewOptions type, which is used to configure the behavior of the fitView method in React Flow. Dependencies include the Node type and TypeScript's Partial utility. Available parameters include padding (number), includeHiddenNodes (boolean), minZoom (number), maxZoom (number), duration (number), and nodes (array of partial Node objects with an id). All parameters are optional, supporting extensibility and optional constraints for viewport fitting. The type expects inputs conforming to these optional fields and outputs a configuration object, which is used by fitView to control viewport fitting behavior.\nSOURCE: https://github.com/xyflow/web/blob/main/sites/reactflow.dev/src/content/api-reference/types/fit-view-options.mdx#2025-04-23_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\nexport type FitViewOptions = {\n  padding?: number;\n  includeHiddenNodes?: boolean;\n  minZoom?: number;\n  maxZoom?: number;\n  duration?: number;\n  nodes?: (Partial<Node> & { id: Node['id'] })[];\n};\n```\n\n----------------------------------------\n\nTITLE: Rendering MiniMap Inside React Flow in JSX\nDESCRIPTION: This snippet demonstrates how to render the <MiniMap /> component within a <ReactFlow /> diagram using the @xyflow/react package in a standard React functional component. It shows default MiniMap usage with a custom node stroke width. Required dependencies are @xyflow/react, and props like nodes, edges, and nodeStrokeWidth are configurable. All elements are JSX, and the output is a diagram with an overview map.\nSOURCE: https://github.com/xyflow/web/blob/main/sites/reactflow.dev/src/content/api-reference/components/minimap.mdx#2025-04-23_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport { ReactFlow, MiniMap } from '@xyflow/react';\n\nexport default function Flow() {\n  return (\n    <ReactFlow nodes={[...]]} edges={[...]]}>\n      <MiniMap nodeStrokeWidth={3} />\n    </ReactFlow>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Installing @xyflow/react with bun (Bash)\nDESCRIPTION: Installs the React Flow library using the Bun package manager and runtime. This command requires Node.js and bun to be installed in the development environment.\nSOURCE: https://github.com/xyflow/web/blob/main/sites/reactflow.dev/src/content/learn/getting-started/installation-and-requirements.mdx#2025-04-23_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nbun add @xyflow/react\n```\n\n----------------------------------------\n\nTITLE: Rendering Base Handle Example with UiComponentViewer (MDX/JSX)\nDESCRIPTION: This snippet demonstrates how to render a UI component example using UiComponentViewer within an MDX or JSX context. The id property ('base-handle') specifies which example or configuration to display. This requires UiComponentViewer to be imported and expects the associated component or documentation to be registered under the given id. The output is the inlined rendering of the UI example for 'base-handle', facilitating documentation and interactive previews.\nSOURCE: https://github.com/xyflow/web/blob/main/sites/reactflow.dev/src/content/components/handles/base-handle.mdx#2025-04-23_snippet_1\n\nLANGUAGE: mdx\nCODE:\n```\n<UiComponentViewer id=\\\"base-handle\\\" />\n```\n\n----------------------------------------\n\nTITLE: useZoomPanHelper transform vs useReactFlow setViewport (API upgrade) - React (JS)\nDESCRIPTION: This code demonstrates migrating from the old `useZoomPanHelper` (with its `transform` setter) to the new unified API in React Flow v10, where viewport manipulation uses `setViewport` provided by `useReactFlow` or the instance from `onInit`. This renaming clarifies function purpose. Requires React Flow v10 and appropriate hooks.\nSOURCE: https://github.com/xyflow/web/blob/main/sites/reactflow.dev/src/content/learn/troubleshooting/migrate-to-v10.mdx#2025-04-23_snippet_9\n\nLANGUAGE: js\nCODE:\n```\nconst { transform, setCenter, setZoom  } = useZoomPanHelper();\\n...\\ntransform({ x: 100, y: 100, zoom: 2 });\n```\n\n----------------------------------------\n\nTITLE: Controlling Web Audio Context State (Run/Suspend) in JavaScript\nDESCRIPTION: Provides utility functions to manage the Web Audio `AudioContext`. `isRunning` checks if the context's `state` is currently 'running'. `toggleAudio` asynchronously calls either `context.suspend()` or `context.resume()` based on the current state, returning the resulting Promise. Assumes a `context` variable holding the `AudioContext` instance.\nSOURCE: https://github.com/xyflow/web/blob/main/sites/reactflow.dev/src/content/learn/tutorials/react-flow-and-the-web-audio-api.mdx#2025-04-23_snippet_23\n\nLANGUAGE: js\nCODE:\n```\nexport function isRunning() {\n  return context.state === 'running';\n}\n\nexport function toggleAudio() {\n  return isRunning() ? context.suspend() : context.resume();\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Drag Handle for Nodes in React xyflow\nDESCRIPTION: This code snippet demonstrates how to use the dragHandle class to restrict dragging to a specific part of a node in xyflow. It includes a remote code viewer component to display the example.\nSOURCE: https://github.com/xyflow/web/blob/main/apps/example-apps/react/examples/nodes/drag-handle/README.mdx#2025-04-23_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\n<RemoteCodeViewer route=\"examples/nodes/drag-handle\" framework=\"react\" />\n```\n\n----------------------------------------\n\nTITLE: Validating Edge Objects with isEdge() in XYFlow\nDESCRIPTION: Demonstrates how to use the isEdge() function to validate an object as an Edge type. The example shows creating a basic edge object with required properties (id, source, target) and checking it using isEdge().\nSOURCE: https://github.com/xyflow/web/blob/main/sites/svelteflow.dev/src/content/api-reference/utils/is-edge.mdx#2025-04-23_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport { isEdge } from '@xyflow/svelte';\n\nconst edge = {\n  id: 'edge-a',\n  source: 'a',\n  target: 'b',\n};\n\nif (isEdge(edge)) {\n  // ..\n}\n```\n\n----------------------------------------\n\nTITLE: Installing Svelte Flow with Vite Template\nDESCRIPTION: Command to create a new Svelte Flow project using a Vite template via degit.\nSOURCE: https://github.com/xyflow/web/blob/main/sites/svelteflow.dev/src/content/learn/index.mdx#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpx degit xyflow/vite-svelte-flow-template app-name\n```\n\n----------------------------------------\n\nTITLE: Rendering QandA Components in Next.js/React\nDESCRIPTION: These code snippets demonstrate the use of a custom QandA React component to render structured question-and-answer content inside a Next.js/React case study page. Each instance passes a question and an answer as props, enabling modular and readable documentation. The components require the '@/components/case-study-qa' module and are intended to be used inside MDX or JSX files. Inputs are string props for question and answer; output is rendered UI blocks. The structure is extensible for various Q&A scenarios and assumes imported QandA component exists.\nSOURCE: https://github.com/xyflow/web/blob/main/sites/reactflow.dev/src/content/pro/case-studies/hubql-case-study.mdx#2025-04-23_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\n<QandA\n  className=\"mt-16\"\n  question=\"Can you briefly describe Hubql?\"\n  answer=\"Hubql is a collaboration platform for building and visualizing data schemas together.\"\n/>\n```\n\nLANGUAGE: jsx\nCODE:\n```\n<QandA\n  question=\"Why did you decide to use React Flow?\"\n  answer=\"We were seeking a React library that helps us to turn data models into visualizations without spending too much time building abstractions and interactive elements. To save time in development we opted for a stable, mature and feature-rich library that we can extend with custom rendering options.\"\n/>\n```\n\nLANGUAGE: jsx\nCODE:\n```\n<QandA\n  question=\"How are you currently using the library?\"\n  answer=\"We use React Flow to transform data models such as JSON or Prisma into diagrams or graphs. We pass AST (abstract syntax tree) data to React Flow to generate nodes and edges based on data relationships. These are then rendered with custom nodes in a table-like UI for easier understanding.\"\n/>\n```\n\nLANGUAGE: jsx\nCODE:\n```\n<QandA\n  question=\"What's something in React Flow that has been particularly useful?\"\n  answer=\"Mainly the events to control drag and click behaviors of nodes are very useful to extend functionality. Also the rendering of custom nodes gives very high flexibility in the user interface for rich user experiences and branding.\"\n/>\n```\n\nLANGUAGE: jsx\nCODE:\n```\n<QandA\n  question=\"Have you had any issues along the way?\"\n  answer=\"We have actually not faced any issues other than performance problems from our side that could be solved by optimizing our React code. React Flow itself is very stable and gives great performance out of the box.\"\n/>\n```\n\nLANGUAGE: jsx\nCODE:\n```\n<QandA\n  question=\"How have the features of your React Flow subscription helped you so far?\"\n  answer=\"There was a Pro example that matched our use case. This saved us implementation time on the auto-layout and grouping features, which were key to us. It is also great to get direct support from the React Flow team and to give back to the maintainers directly.\"\n/>\n```\n\n----------------------------------------\n\nTITLE: Using getSimpleBezierPath to Calculate Bezier Edge Parameters in JavaScript\nDESCRIPTION: This snippet demonstrates how to import and use the `getSimpleBezierPath` function from `@xyflow/react`. It defines source and target node coordinates and calls the function with these coordinates along with source and target handle positions (Position.Right and Position.Left). The function returns a tuple containing the SVG path string, label coordinates (x, y), and offset coordinates (x, y), which are then destructured and logged to the console.\nSOURCE: https://github.com/xyflow/web/blob/main/sites/reactflow.dev/src/content/api-reference/utils/get-simple-bezier-path.mdx#2025-04-23_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport { Position, getSimpleBezierPath } from '@xyflow/react';\n\nconst source = { x: 0, y: 20 };\nconst target = { x: 150, y: 100 };\n\nconst [path, labelX, labelY, offsetX, offsetY] = getSimpleBezierPath({\n  sourceX: source.x,\n  sourceY: source.y,\n  sourcePosition: Position.Right,\n  targetX: target.x,\n  targetY: target.y,\n  targetPosition: Position.Left,\n});\n\nconsole.log(path); //=> \"M0,20 C75,20 75,100 150,100\"\nconsole.log(labelX, labelY); //=> 75, 60\nconsole.log(offsetX, offsetY); //=> 75, 40\n```\n\n----------------------------------------\n\nTITLE: Rendering Content Grid with Links using JSX\nDESCRIPTION: Uses the `ContentGrid` component with a top margin class (`mt-8`) to arrange content previews. It contains two `ContentGridItem` components, each linking to a specific learn section route (`/learn/...`) and displaying a `BlogPostPreview` with a title and introductory text for guides on \"Custom nodes\" and \"Layouting\". This snippet requires React and the previously imported UI components (`ContentGrid`, `ContentGridItem`, `BlogPostPreview`).\nSOURCE: https://github.com/xyflow/web/blob/main/sites/reactflow.dev/src/content/api-reference/index.mdx#2025-04-23_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\n<ContentGrid className=\"mt-8\">\n  <ContentGridItem route=\"/learn/customization/custom-nodes\">\n    <BlogPostPreview\n      title=\"Custom nodes\"\n      intro=\"A powerful feature of React Flow is the ability to add custom nodes. Within your custom nodes you can render everything you want. You can define multiple source and target handles and render form inputs or charts for example. In this guide we will implement a node with an input field that updates some text in another part of the application.\"\n    />\n  </ContentGridItem>\n  <ContentGridItem route=\"/learn/layouting/layouting\">\n    <BlogPostPreview\n      title=\"Layouting\"\n      intro=\"We regularly get asked how to handle layouting in React Flow. While we could build some basic layouting into React Flow, we believe that you know your app's requirements best and with so many options out there we think it's better you choose the best right tool for the job. In this guide we'll look at four layouting libraries and how to use them.\"\n    />\n  </ContentGridItem>\n</ContentGrid>\n```\n\n----------------------------------------\n\nTITLE: Embedding RemoteCodeViewer for Node Examples in React (JavaScript/JSX)\nDESCRIPTION: This snippet uses the RemoteCodeViewer component to embed an example demonstrating nodes in React Flow. It fetches and displays code from the route \\\"learn/basic-terms-nodes\\\" without showing the editor, and adapts the height for clear viewing. Dependencies include the xy-shared/server package. The main input is the route prop, determining the code to display. There are no outputs except the visual rendering of the code block example.\nSOURCE: https://github.com/xyflow/web/blob/main/sites/reactflow.dev/src/content/learn/concepts/terms-and-definitions.mdx#2025-04-23_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\n<RemoteCodeViewer\\n  route=\\\"learn/basic-terms-nodes\\\"\\n  editorHeight=\\\"30vh\\\"\\n  framework=\\\"react\\\"\\n  showEditor={false}\\n/>\n```\n\n----------------------------------------\n\nTITLE: Using getIncomers() Function in XYFlow with TypeScript\nDESCRIPTION: This snippet demonstrates how to import and use the getIncomers() function from XYFlow. It shows the basic setup with empty nodes and edges arrays, and how to call the function with a specific node to find its incoming connections.\nSOURCE: https://github.com/xyflow/web/blob/main/sites/svelteflow.dev/src/content/api-reference/utils/get-incomers.mdx#2025-04-23_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { getIncomers } from '@xyflow/svelte';\n\nconst nodes = [];\nconst edges = [];\n\nconst incomers = getIncomers(\n  { id: '1', position: { x: 0, y: 0 }, data: { label: 'node' } },\n  nodes,\n  edges,\n);\n```\n\n----------------------------------------\n\nTITLE: Defining Connection State Types in TypeScript\nDESCRIPTION: Defines three TypeScript types that represent connection states in XYFlow: NoConnection for when no connection is active, ConnectionInProgress for ongoing connections, and ConnectionState as a union type of both states. The types track properties like connection validity, positions, handles, and connected nodes.\nSOURCE: https://github.com/xyflow/web/blob/main/sites/reactflow.dev/src/content/api-reference/types/connection-state.mdx#2025-04-23_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\ntype NoConnection = {\n  inProgress: false;\n  isValid: null;\n  from: null;\n  fromHandle: null;\n  fromPosition: null;\n  fromNode: null;\n  to: null;\n  toHandle: null;\n  toPosition: null;\n  toNode: null;\n};\ntype ConnectionInProgress = {\n  inProgress: true;\n  isValid: boolean | null;\n  from: XYPosition;\n  fromHandle: Handle;\n  fromPosition: Position;\n  fromNode: NodeBase;\n  to: XYPosition;\n  toHandle: Handle | null;\n  toPosition: Position;\n  toNode: NodeBase | null;\n};\n\ntype ConnectionState = ConnectionInProgress | NoConnection;\n```\n\n----------------------------------------\n\nTITLE: Accessing Internal Node State via nodeLookup (New API)\nDESCRIPTION: Demonstrates accessing the internal node map using the renamed `nodeLookup` property from the Zustand store in React Flow v12. This replaces `nodeInternals` from v11.\nSOURCE: https://github.com/xyflow/web/blob/main/sites/reactflow.dev/src/content/learn/troubleshooting/migrate-to-v12.mdx#2025-04-23_snippet_21\n\nLANGUAGE: javascript\nCODE:\n```\nconst node = useStore((s) => s.nodeLookup.get(id));\n```\n\n----------------------------------------\n\nTITLE: Embedding RemoteCodeViewer for Viewport Examples in React (JavaScript/JSX)\nDESCRIPTION: This snippet features the RemoteCodeViewer to embed a practical example emphasizing viewport manipulation in React Flow. Code is sourced from the \\\"learn/basic-terms-viewport\\\" route and presented without edit capabilities and with a larger viewing area. The xy-shared/server dependency is required, and the snippet only renders a code sample for instructional purposes.\nSOURCE: https://github.com/xyflow/web/blob/main/sites/reactflow.dev/src/content/learn/concepts/terms-and-definitions.mdx#2025-04-23_snippet_3\n\nLANGUAGE: JavaScript\nCODE:\n```\n<RemoteCodeViewer\\n  route=\\\"learn/basic-terms-viewport\\\"\\n  editorHeight=\\\"40vh\\\"\\n  framework=\\\"react\\\"\\n  showEditor={false}\\n/>\n```\n\n----------------------------------------\n\nTITLE: Embedding RemoteCodeViewer Component in React (JSX)\nDESCRIPTION: This JSX snippet renders the RemoteCodeViewer component, configuring it to display the code for the 'prevent-cycles' example in the React framework context. The route prop indicates the example's location, while showEditor is set to false to hide the code editor. This allows users to view the code implementation of cycle prevention without the ability to modify it live.\nSOURCE: https://github.com/xyflow/web/blob/main/sites/reactflow.dev/src/content/whats-new/2023-11-02.mdx#2025-04-23_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\n<RemoteCodeViewer\n  route=\"examples/interaction/prevent-cycles\"\n  framework=\"react\"\n  showEditor={false}\n/>\n```\n\n----------------------------------------\n\nTITLE: Applying D3-Hierarchy Layouts in React Flow (React)\nDESCRIPTION: This component renders a React Flow graph layout using algorithms from the D3-Hierarchy library, suitable for tree structures with a single root. The remotely loaded example code demonstrates how to use D3-Hierarchy to compute node positions. Note the limitation mentioned in the text that D3-Hierarchy assumes uniform node dimensions and requires a single root node.\nSOURCE: https://github.com/xyflow/web/blob/main/sites/reactflow.dev/src/content/learn/layouting/layouting.mdx#2025-04-23_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\n<RemoteCodeViewer\n  route=\"learn/layouting-flow-3-d3-hierarchy\"\n  framework=\"react\"\n/>\n```\n\n----------------------------------------\n\nTITLE: Calculating Bezier Edge Path and Label Position in React Flow v11 (New API)\nDESCRIPTION: Shows the updated method in React Flow v11 for getting both the path string and the label position (formerly center) for a Bezier edge. The `getBezierPath` function now returns an array containing the path string, label X coordinate, and label Y coordinate.\nSOURCE: https://github.com/xyflow/web/blob/main/sites/reactflow.dev/src/content/learn/troubleshooting/migrate-to-v11.mdx#2025-04-23_snippet_6\n\nLANGUAGE: jsx\nCODE:\n```\nimport { getBezierPath } from '@xyflow/react';\n\nconst [path, labelX, labelY] = getBezierPath(edgeParams);\n```\n\n----------------------------------------\n\nTITLE: Importing UI Components in JavaScript/TypeScript\nDESCRIPTION: Imports the `ContentGrid`, `ContentGridItem`, and `BlogPostPreview` components from the `@xyflow/xy-ui` and `xy-shared` libraries. These components are used to structure and display content previews, specifically links to learn guides, on the API reference overview page. Requires `@xyflow/xy-ui` and `xy-shared` to be installed as dependencies.\nSOURCE: https://github.com/xyflow/web/blob/main/sites/reactflow.dev/src/content/api-reference/index.mdx#2025-04-23_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport { ContentGrid, ContentGridItem } from '@xyflow/xy-ui';\nimport { BlogPostPreview } from 'xy-shared';\n```\n\n----------------------------------------\n\nTITLE: Rendering Stepped Edge Paths with XYFlow in JavaScript\nDESCRIPTION: This JavaScript snippet demonstrates the usage of the getSmoothStepPath utility from the @xyflow/react package to create a smooth, stepped SVG path between two defined node positions. It establishes source and target coordinates, specifies their connection positions, and retrieves the generated path string along with label and offset positions. Dependencies include @xyflow/react and its Position enum, and the function expects positional and directional arguments for source and target nodes. The output provides SVG path data and associated coordinates, enabling easy rendering of custom edge shapes with optional border radius.\nSOURCE: https://github.com/xyflow/web/blob/main/sites/reactflow.dev/src/content/api-reference/utils/get-smooth-step-path.mdx#2025-04-23_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport { Position, getSmoothStepPath } from '@xyflow/react';\n\nconst source = { x: 0, y: 20 };\nconst target = { x: 150, y: 100 };\n\nconst [path, labelX, labelY, offsetX, offsetY] = getSmoothStepPath({\n  sourceX: source.x,\n  sourceY: source.y,\n  sourcePosition: Position.Right,\n  targetX: target.x,\n  targetY: target.y,\n  targetPosition: Position.Left,\n});\n\nconsole.log(path); //=> \"M0 20L20 20L 70,20Q 75,20 75,25L 75,95Q ...\"\nconsole.log(labelX, labelY); //=> 75, 60\nconsole.log(offsetX, offsetY); //=> 75, 40\n```\n\n----------------------------------------\n\nTITLE: Basic SvelteFlow Implementation in Svelte\nDESCRIPTION: Example of how to initialize a simple flow diagram with nodes and edges using the SvelteFlow component from @xyflow/svelte. This snippet demonstrates the basic setup with two nodes connected by an edge.\nSOURCE: https://github.com/xyflow/web/blob/main/sites/svelteflow.dev/src/content/api-reference/svelte-flow.mdx#2025-04-23_snippet_0\n\nLANGUAGE: svelte\nCODE:\n```\n<script>\n  import { writable } from 'svelte/store';\n  import { SvelteFlow } from '@xyflow/svelte';\n\n  const nodes = writable([\n    { id: 'a', data: { label: 'node a' }, position: { x: 0, y: 0 } },\n    { id: 'b', data: { label: 'node b' }, position: { x: 0, y: 100 } }\n  ]);\n\n  const edges = writable([\n    { id: 'e1-2', source: 'a', target: 'b' }\n  ]);\n</script>\n\n<SvelteFlow\n  nodes={nodes}\n  edges={edges}\n  fitView\n/>\n```\n\n----------------------------------------\n\nTITLE: Rendering Unused Prop Warning Component in React\nDESCRIPTION: This snippet renders an UnusedPropWarning component, likely to display a warning about unused properties in the context of the easy connect node configuration.\nSOURCE: https://github.com/xyflow/web/blob/main/sites/svelteflow.dev/src/content/examples/nodes/easy-connect.mdx#2025-04-23_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\n<UnusedPropWarning />\n```\n\n----------------------------------------\n\nTITLE: Importing NodeResizer Component in Svelte\nDESCRIPTION: This snippet demonstrates how to import the NodeResizer component from the @xyflow/svelte package. It's used to add resize functionality to custom nodes in XY Flow.\nSOURCE: https://github.com/xyflow/web/blob/main/sites/svelteflow.dev/src/content/examples/nodes/node-resizer.mdx#2025-04-23_snippet_0\n\nLANGUAGE: svelte\nCODE:\n```\nimport { NodeResizer } from '@xyflow/svelte';\n```\n\n----------------------------------------\n\nTITLE: Defining OnNodesChange Callback Type - TypeScript\nDESCRIPTION: Defines the OnNodesChange type as a generic callback function used in React Flow. It accepts an array of NodeChange objects, each describing a change to a node, and performs actions based on these changes. Requires types Node and NodeChange to be imported and is intended to be used as a type parameter or callback definition in applications built with React Flow and TypeScript.\nSOURCE: https://github.com/xyflow/web/blob/main/sites/reactflow.dev/src/content/api-reference/types/on-nodes-change.mdx#2025-04-23_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nexport type OnNodesChange<NodeType extends Node = Node> = (\n  changes: NodeChange<NodeType>[],\n) => void;\n```\n\n----------------------------------------\n\nTITLE: Rendering Subflow Example in Svelte Flow\nDESCRIPTION: This code snippet renders a RemoteCodeViewer component to display an example of subflows implementation in Svelte Flow. It specifies the route to the example code and the framework used.\nSOURCE: https://github.com/xyflow/web/blob/main/sites/svelteflow.dev/src/content/examples/layout/subflows.mdx#2025-04-23_snippet_1\n\nLANGUAGE: svelte\nCODE:\n```\n<RemoteCodeViewer route=\"examples/layout/subflows\" framework=\"svelte\" />\n```\n\n----------------------------------------\n\nTITLE: Defining Node Parent Relationship in v12 (New API)\nDESCRIPTION: Shows the updated way to specify a node's parent in React Flow v12 using the `parentId` attribute. This replaces the `parentNode` attribute from v11 for better clarity.\nSOURCE: https://github.com/xyflow/web/blob/main/sites/reactflow.dev/src/content/learn/troubleshooting/migrate-to-v12.mdx#2025-04-23_snippet_12\n\nLANGUAGE: javascript\nCODE:\n```\nconst nodes = [\n  // some nodes ...\n  {\n    id: 'xyz-id',\n    position: { x: 0, y: 0 },\n    type: 'default',\n    data: {},\n    parentId: 'abc-id',\n  },\n];\n```\n\n----------------------------------------\n\nTITLE: Installing xyflow Project Dependencies with pnpm\nDESCRIPTION: Command to install all dependencies required for the xyflow website project using pnpm package manager.\nSOURCE: https://github.com/xyflow/web/blob/main/sites/svelteflow.dev/README.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n$ pnpm install\n```\n\n----------------------------------------\n\nTITLE: Embedding RemoteCodeViewer in React - JavaScript/JSX\nDESCRIPTION: Uses the RemoteCodeViewer component from the xy-shared/server package within a React application to display remote code examples of Entitree Flex layouting. The snippet specifies parameters for which route to fetch, which frontend framework is used, and disables the in-browser editor for a read-only demonstration. Dependencies include React and the RemoteCodeViewer component, and required props include route (the example path), framework ('react'), and showEditor (boolean to toggle code editing). Input is via props, and the output is a rendered remote code viewer UI.\nSOURCE: https://github.com/xyflow/web/blob/main/sites/reactflow.dev/src/content/whats-new/2024-06-11.mdx#2025-04-23_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\n<RemoteCodeViewer\\n  route=\\\"examples/layout/entitree-flex\\\"\\n  framework=\\\"react\\\"\\n  showEditor={false}\\n/>\n```\n\n----------------------------------------\n\nTITLE: Referencing the Contextual Zoom Example Code\nDESCRIPTION: This JSX snippet utilizes a 'RemoteCodeViewer' component to display code for the 'contextual-zoom' example within the 'react' framework. It serves as a placeholder to load and show the actual implementation code from a specified route.\nSOURCE: https://github.com/xyflow/web/blob/main/apps/example-apps/react/examples/interaction/contextual-zoom/README.mdx#2025-04-23_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\n<RemoteCodeViewer\n  route=\"examples/interaction/contextual-zoom\"\n  framework=\"react\"\n/>\n```\n\n----------------------------------------\n\nTITLE: Rendering ExamplesOverview Component\nDESCRIPTION: JSX code that renders the ExamplesOverview component to display the collection of React Flow examples.\nSOURCE: https://github.com/xyflow/web/blob/main/sites/reactflow.dev/src/app/(content-pages)/examples/page.mdx#2025-04-23_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\n<ExamplesOverview />\n```\n\n----------------------------------------\n\nTITLE: Configuring the Main Application Entry Point in React (TSX)\nDESCRIPTION: This snippet shows the setup of `main.tsx`. It imports necessary React and React Flow components, includes React Flow's CSS styles, and wraps the root `App` component with `<ReactFlowProvider>` and `<React.StrictMode>`. A surrounding div sets initial dimensions for the React Flow canvas. The highlighted lines emphasize the crucial React Flow imports and setup.\nSOURCE: https://github.com/xyflow/web/blob/main/sites/reactflow.dev/src/content/learn/tutorials/slide-shows-with-react-flow.mdx#2025-04-23_snippet_2\n\nLANGUAGE: tsx\nCODE:\n```\nimport React from 'react';\nimport ReactDOM from 'react-dom/client';\nimport { ReactFlowProvider } from '@xyflow/react';\n\nimport App from './App';\n\nimport '@xyflow/react/dist/style.css';\nimport './index.css';\n\nReactDOM.createRoot(document.getElementById('root')!).render(\n  <React.StrictMode>\n    <ReactFlowProvider>\n      {/* The parent element of the React Flow component needs a width and a height\n          to work properly. If you're styling your app as you follow along, you\n          can remove this div and apply styles to the #root element in your CSS.\n       */}\n      <div style={{ width: '100vw', height: '100vh' }}>\n        <App />\n      </div>\n    </ReactFlowProvider>\n  </React.StrictMode>,\n);\n```\n\n----------------------------------------\n\nTITLE: Calculating Straight Path Using getStraightPath in JavaScript\nDESCRIPTION: Demonstrates how to use the getStraightPath function to calculate a straight line path between two points. The function returns a tuple containing the path string, label coordinates (x,y), and offset coordinates (x,y).\nSOURCE: https://github.com/xyflow/web/blob/main/sites/svelteflow.dev/src/content/api-reference/utils/get-straight-path.mdx#2025-04-23_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport { getStraightPath } from '@xyflow/svelte';\n\nconst source = { x: 0, y: 20 };\nconst target = { x: 150, y: 100 };\n\nconst [path, labelX, labelY, offsetX, offsetY] = getStraightPath({\n  sourceX: source.x,\n  sourceY: source.y,\n  targetX: target.x,\n  targetY: target.y,\n});\n\nconsole.log(path); //=> \"M 0,20L 150,100\"\nconsole.log(labelX, labelY); //=> 75, 60\nconsole.log(offsetX, offsetY); //=> 75, 40\n```\n\n----------------------------------------\n\nTITLE: Defining NodeConnection Type Extension in TypeScript\nDESCRIPTION: This snippet defines the NodeConnection type in TypeScript, extending a basic Connection by adding an edgeId property to uniquely identify the associated edge. Dependencies include the standard TypeScript environment, and optionally, the Connection type if used for extension. The type specifies source, target, sourceHandle, and targetHandle as string or null, while edgeId is always a string. Inputs and outputs are type information for TypeScript's type checking system, ensuring type safety but does not include runtime constraints.\nSOURCE: https://github.com/xyflow/web/blob/main/sites/reactflow.dev/src/content/api-reference/types/node-connection.mdx#2025-04-23_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\nexport type NodeConnection = {\n  source: string | null;\n  target: string | null;\n  sourceHandle: string | null;\n  targetHandle: string | null;\n  edgeId: string;\n};\n```\n\n----------------------------------------\n\nTITLE: Implementing Dark Mode in React Flow\nDESCRIPTION: Example of using the new colorMode prop to enable dark mode in React Flow. The component accepts 'light', 'dark', or 'system' as values and automatically applies appropriate styling through CSS variables.\nSOURCE: https://github.com/xyflow/web/blob/main/sites/reactflow.dev/src/content/learn/troubleshooting/migrate-to-v12.mdx#2025-04-23_snippet_22\n\nLANGUAGE: typescript\nCODE:\n```\ncolorMode=\"dark\"\n```\n\n----------------------------------------\n\nTITLE: Missing Container Dimensions Warning (JSX)\nDESCRIPTION: This snippet shows code that triggers the 'parent container needs a width and a height' warning. The `<ReactFlow>` component is rendered inside a `div` element that does not have explicit width or height styles, preventing React Flow from determining its rendering dimensions.\nSOURCE: https://github.com/xyflow/web/blob/main/sites/reactflow.dev/src/content/learn/troubleshooting/index.mdx#2025-04-23_snippet_9\n\nLANGUAGE: jsx\nCODE:\n```\nimport { ReactFlow } from '@xyflow/react';\nimport '@xyflow/react/dist/style.css';\n\nfunction Flow(props) {\n  return (\n    <div>\n      <ReactFlow {...props} />\n    </div>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Using the useNodes Hook in Svelte Flow\nDESCRIPTION: This snippet demonstrates how to import and use the useNodes hook from the @xyflow/svelte package. The hook returns a store containing the current nodes array that will update reactively when nodes change.\nSOURCE: https://github.com/xyflow/web/blob/main/sites/svelteflow.dev/src/content/api-reference/hooks/use-nodes.mdx#2025-04-23_snippet_0\n\nLANGUAGE: svelte\nCODE:\n```\n<script lang=\"ts\">\n  import { useNodes } from '@xyflow/svelte';\n\n  const nodes = useNodes();\n</script>\n```\n\n----------------------------------------\n\nTITLE: Configuring TypeScript Path Aliases (JSON)\nDESCRIPTION: Modifies the `compilerOptions` in `tsconfig.json` (and implicitly `tsconfig.app.json`) to define a base URL (`.`) and path aliases (`@/*` mapped to `./src/*`). This setup is necessary for the `shadcn/ui` CLI and components to correctly resolve module imports. Lines 3-8 show the added configuration.\nSOURCE: https://github.com/xyflow/web/blob/main/sites/reactflow.dev/src/content/learn/tutorials/getting-started-with-react-flow-components.mdx#2025-04-23_snippet_6\n\nLANGUAGE: json\nCODE:\n```\n{\n  ...\n  \"compilerOptions\": {\n    \"baseUrl\": \".\",\n    \"paths\": {\n      \"@/*\": [\"./src/*\"]\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining PanOnScrollMode Enum Values in TypeScript\nDESCRIPTION: This TypeScript enum defines the possible modes for viewport panning initiated by scrolling. `Free` allows panning in any direction, `Vertical` restricts panning to the vertical axis, and `Horizontal` restricts it to the horizontal axis. These values are used to configure the panning behavior within the xyflow library.\nSOURCE: https://github.com/xyflow/web/blob/main/sites/reactflow.dev/src/content/api-reference/types/pan-on-scroll-mode.mdx#2025-04-23_snippet_0\n\nLANGUAGE: ts\nCODE:\n```\nexport enum PanOnScrollMode {\n  Free = 'free',\n  Vertical = 'vertical',\n  Horizontal = 'horizontal',\n}\n```\n\n----------------------------------------\n\nTITLE: Using ELKjs for Advanced Layouts in React Flow (React)\nDESCRIPTION: This component presents a React Flow graph layout managed by the ELKjs library, known for its extensive configuration options and ability to handle complex graphs, including sub-flows and edge routing. The remotely loaded example likely uses a `useLayoutedElements` hook to handle the asynchronous layout computation provided by ELKjs, configuring the graph structure and layout options before applying the resulting positions to React Flow nodes.\nSOURCE: https://github.com/xyflow/web/blob/main/sites/reactflow.dev/src/content/learn/layouting/layouting.mdx#2025-04-23_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\n<RemoteCodeViewer route=\"learn/layouting-flow-6-elkjs\" framework=\"react\" />\n```\n\n----------------------------------------\n\nTITLE: Importing React Flow v11 (Old API)\nDESCRIPTION: Shows the previous method of importing the default export from the `reactflow` package in version 11. This import method is deprecated in v12.\nSOURCE: https://github.com/xyflow/web/blob/main/sites/reactflow.dev/src/content/learn/troubleshooting/migrate-to-v12.mdx#2025-04-23_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\n// npm install reactflow\nimport ReactFlow from 'reactflow';\n```\n\n----------------------------------------\n\nTITLE: Rendering Remote Code Viewer for Easy Connect Node Example in React\nDESCRIPTION: This snippet renders a RemoteCodeViewer component to display a Svelte code example for easy connect nodes in xyflow. It specifies the route to the example code and the framework used.\nSOURCE: https://github.com/xyflow/web/blob/main/sites/svelteflow.dev/src/content/examples/nodes/easy-connect.mdx#2025-04-23_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\n<RemoteCodeViewer\n  route=\"examples/nodes/easy-connect\"\n  framework=\"svelte\"\n/>\n```\n\n----------------------------------------\n\nTITLE: Rendering RemoteCodeViewer for Contextual Zoom Example in JSX\nDESCRIPTION: This code snippet renders a RemoteCodeViewer component to display the contextual zoom example code for the Svelte framework.\nSOURCE: https://github.com/xyflow/web/blob/main/sites/svelteflow.dev/src/content/examples/interaction/contextual-zoom.mdx#2025-04-23_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\n<RemoteCodeViewer\n  route=\"examples/interaction/contextual-zoom\"\n  framework=\"svelte\"\n/>\n```\n\n----------------------------------------\n\nTITLE: Defining Node Origin Type with Tuple - TypeScript\nDESCRIPTION: Defines a NodeOrigin type in TypeScript as a tuple containing two numbers. This type is intended to be used for representing the origin point of a Node in a coordinate system, where each value in the array determines the relative horizontal and vertical placement (e.g., [0,0] for top-left, [0.5,0.5] for center, [1,1] for bottom-right). No external dependencies are required, and input/output constraints are defined by the tuple structure.\nSOURCE: https://github.com/xyflow/web/blob/main/sites/reactflow.dev/src/content/api-reference/types/node-origin.mdx#2025-04-23_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\nexport type NodeOrigin = [number, number];\n```\n\n----------------------------------------\n\nTITLE: Installing Svelte Flow Alpha via npm\nDESCRIPTION: This shell command uses the Node Package Manager (npm) to download and install the alpha version of the Svelte Flow library. The package is identified as `@xyflow/svelte`. This allows developers using Svelte to start experimenting with the newly released Svelte port of the xyflow library. Requires Node.js and npm (or yarn, as indicated by the `npm2yarn` context) to be installed.\nSOURCE: https://github.com/xyflow/web/blob/main/sites/xyflow.com/src/content/svelte-flow-alpha-xyflow.mdx#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm install @xyflow/svelte\n```\n\n----------------------------------------\n\nTITLE: Embedding RemoteCodeViewer for Handle Examples in React (JavaScript/JSX)\nDESCRIPTION: This snippet employs the RemoteCodeViewer component to present an interactive demonstration of handles in React Flow. The code is remotely loaded from the \\\"learn/basic-terms-handles\\\" route and shown in a read-only state. It relies on the xy-shared/server package and several component props for configuration. The output is a rendered static code block, illustrating how handles function within nodes.\nSOURCE: https://github.com/xyflow/web/blob/main/sites/reactflow.dev/src/content/learn/concepts/terms-and-definitions.mdx#2025-04-23_snippet_1\n\nLANGUAGE: JavaScript\nCODE:\n```\n<RemoteCodeViewer\\n  route=\\\"learn/basic-terms-handles\\\"\\n  editorHeight=\\\"30vh\\\"\\n  framework=\\\"react\\\"\\n  showEditor={false}\\n/>\n```\n\n----------------------------------------\n\nTITLE: Implementing Multiple Panel Positions in SvelteFlow\nDESCRIPTION: This example demonstrates how to use the Panel component in SvelteFlow to position content at different locations above the viewport. The snippet initializes empty nodes and edges stores, then creates a SvelteFlow component with six Panel components positioned at different locations (top-left, top-center, top-right, bottom-left, bottom-center, bottom-right).\nSOURCE: https://github.com/xyflow/web/blob/main/sites/svelteflow.dev/src/content/api-reference/components/panel.mdx#2025-04-23_snippet_0\n\nLANGUAGE: svelte\nCODE:\n```\n<script lang=\"ts\">\n  import { writable } from 'svelte/store';\n  import { SvelteFlow, Panel } from '@xyflow/svelte';\n\n  const nodes = writable([]);\n  const edges = writable([]);\n</script>\n\n<SvelteFlow nodes={nodes} edges={edges}>\n  <Panel position=\"top-left\">top-left</Panel>\n  <Panel position=\"top-center\">top-center</Panel>\n  <Panel position=\"top-right\">top-right</Panel>\n  <Panel position=\"bottom-left\">bottom-left</Panel>\n  <Panel position=\"bottom-center\">bottom-center</Panel>\n  <Panel position=\"bottom-right\">bottom-right</Panel>\n</SvelteFlow>\n```\n\n----------------------------------------\n\nTITLE: Basic Handle Component Usage in Svelte Custom Node\nDESCRIPTION: This snippet demonstrates the basic usage of the Handle component within a custom node in Svelte. It imports Handle and Position from @xyflow/svelte and sets up both target and source handles on the left and right sides of the node respectively.\nSOURCE: https://github.com/xyflow/web/blob/main/sites/svelteflow.dev/src/content/api-reference/components/handle.mdx#2025-04-23_snippet_0\n\nLANGUAGE: svelte\nCODE:\n```\n<script lang=\"ts\">\n  import { Handle, Position } from '@xyflow/svelte';\n</script>\n\n<div>\n  {data.label}\n</div>\n\n<Handle type=\"target\" position={Position.Left} />\n<Handle type=\"source\" position={Position.Right} />\n```\n\n----------------------------------------\n\nTITLE: Defining the Position Enum in TypeScript\nDESCRIPTION: This TypeScript enum `Position` defines string constants for 'left', 'top', 'right', and 'bottom'. It's used within the xyflow library, typically for specifying the connection side of handles or the general orientation of edges, differentiating it from the corner-specific `PanelPosition` type used for component placement.\nSOURCE: https://github.com/xyflow/web/blob/main/sites/reactflow.dev/src/content/api-reference/types/position.mdx#2025-04-23_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n```ts\nexport enum Position {\n  Left = 'left',\n  Top = 'top',\n  Right = 'right',\n  Bottom = 'bottom',\n}\n```\n```\n\n----------------------------------------\n\nTITLE: Implementing D3-Force Directed Layout in React Flow (React)\nDESCRIPTION: This component showcases a React Flow instance with a physics-based, force-directed layout computed using the D3-Force library. The associated remote code likely implements a `useLayoutedElements` hook to manage the iterative simulation, configure various forces (potentially including custom rectangular collision), handle node updates using `useReactFlow`, and apply updated positions. Performance considerations for large graphs are mentioned in the surrounding text.\nSOURCE: https://github.com/xyflow/web/blob/main/sites/reactflow.dev/src/content/learn/layouting/layouting.mdx#2025-04-23_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\n<RemoteCodeViewer route=\"learn/layouting-flow-4-d3-force\" framework=\"react\" />\n```\n\n----------------------------------------\n\nTITLE: Rendering RemoteCodeViewer for Elkjs Example in Svelte\nDESCRIPTION: This code block renders the RemoteCodeViewer component to display the elkjs integration example. It specifies the route to the example code, the framework (Svelte), and the active file to display.\nSOURCE: https://github.com/xyflow/web/blob/main/sites/svelteflow.dev/src/content/examples/layout/elkjs.mdx#2025-04-23_snippet_1\n\nLANGUAGE: svelte\nCODE:\n```\n<RemoteCodeViewer\n  route=\"examples/layout/elkjs\"\n  framework=\"svelte\"\n  activeFile=\"Flow.svelte\"\n/>\n```\n\n----------------------------------------\n\nTITLE: Displaying Remote React Code Example for Attribution Removal\nDESCRIPTION: This JSX component is used to fetch and display a React code example from a remote source. It specifically shows the code related to removing the React Flow attribution, identified by the route 'learn/remove-attribution' and targeting the 'react' framework.\nSOURCE: https://github.com/xyflow/web/blob/main/sites/reactflow.dev/src/content/learn/troubleshooting/remove-attribution.mdx#2025-04-23_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\n<RemoteCodeViewer route=\"learn/remove-attribution\" framework=\"react\" />\n```\n\n----------------------------------------\n\nTITLE: Rendering RemoteCodeViewer for Add Node On Edge Drop Example\nDESCRIPTION: This code renders the RemoteCodeViewer component to display a Svelte example of adding a node on edge drop. It specifies the route to the example code and the framework used.\nSOURCE: https://github.com/xyflow/web/blob/main/sites/svelteflow.dev/src/content/examples/nodes/add-node-on-edge-drop.mdx#2025-04-23_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\n<RemoteCodeViewer\n  route=\"examples/nodes/add-node-on-edge-drop\"\n  framework=\"svelte\"\n/>\n```\n\n----------------------------------------\n\nTITLE: Projecting Screen Coordinates to React Flow Position (Before Migration) - React Flow - JavaScript\nDESCRIPTION: This snippet demonstrates projecting screen coordinates to the internal React Flow canvas coordinates using the deprecated \\\"project\\\" utility. The calculation involves retrieving bounding client rectangles and subtracting offsets manually. This is required for precise node positioning when responding to mouse events. Prerequisites: reactFlowWrapper reference and a valid reactFlowInstance; expects MouseEvent input. Outputs a position object with translated x and y values.\nSOURCE: https://github.com/xyflow/web/blob/main/sites/reactflow.dev/src/content/whats-new/2023-11-10.mdx#2025-04-23_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nconst reactFlowBounds = reactFlowWrapper.current.getBoundingClientRect();\n\nconst position = reactFlowInstance.project({\n  x: event.clientX - reactFlowBounds.left,\n  y: event.clientY - reactFlowBounds.top,\n});\n```\n\n----------------------------------------\n\nTITLE: Defining ReactFlow JSON Object Type in TypeScript\nDESCRIPTION: This TypeScript snippet defines the ReactFlowJsonObject generic type, which encapsulates the structure needed to store a flow as JSON. The type consists of an array of nodes, an array of edges, and a viewport object, allowing typed serialization of flow diagrams. Dependencies include the Node, Edge, and Viewport types, which should be imported or available in the surrounding context; generic type parameters T and U represent node and edge data, respectively. The expected input and output is a JSON object conforming to this schema, suitable for database storage or transfer. No runtime logic is included, and constraints are based on the referenced types.\nSOURCE: https://github.com/xyflow/web/blob/main/sites/reactflow.dev/src/content/api-reference/types/react-flow-json-object.mdx#2025-04-23_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\nexport type ReactFlowJsonObject<T, U> = {\n  nodes: Node<T>[];\n  edges: Edge<U>[];\n  viewport: Viewport;\n};\n```\n\n----------------------------------------\n\nTITLE: Configuring Initial Viewport in React Flow v10 (Old API)\nDESCRIPTION: Shows how to set the initial position and zoom level of the React Flow viewport in version 10 using the separate `defaultPosition` and `defaultZoom` props.\nSOURCE: https://github.com/xyflow/web/blob/main/sites/reactflow.dev/src/content/learn/troubleshooting/migrate-to-v11.mdx#2025-04-23_snippet_3\n\nLANGUAGE: jsx\nCODE:\n```\nimport ReactFlow from 'react-flow-renderer';\n\nconst Flow = () => {\n  return <ReactFlow defaultPosition={[10, 15]} defaultZoom={5} />;\n};\n\nexport default Flow;\n```\n\n----------------------------------------\n\nTITLE: Using getBezierPath to Generate Bezier Edge Path in XYFlow (JavaScript)\nDESCRIPTION: This snippet demonstrates how to use the getBezierPath function from @xyflow/svelte to generate a bezier edge path between two nodes. It calculates the path, label position, and offset values based on source and target coordinates and positions.\nSOURCE: https://github.com/xyflow/web/blob/main/sites/svelteflow.dev/src/content/api-reference/utils/get-bezier-path.mdx#2025-04-23_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport { Position, getBezierPath } from '@xyflow/svelte';\n\nconst source = { x: 0, y: 20 };\nconst target = { x: 150, y: 100 };\n\nconst [path, labelX, labelY, offsetX, offsetY] = getBezierPath({\n  sourceX: source.x,\n  sourceY: source.y,\n  sourcePosition: Position.Right,\n  targetX: target.x,\n  targetY: target.y,\n  targetPosition: Position.Left,\n});\n\nconsole.log(path); //=> \"M0,20 C75,20 75,100 150,100\"\nconsole.log(labelX, labelY); //=> 75, 60\nconsole.log(offsetX, offsetY); //=> 75, 40\n```\n\n----------------------------------------\n\nTITLE: Adding a React Flow Component via shadcn CLI - Bash\nDESCRIPTION: This Bash snippet shows the command to add a specific React Flow UI component to your project using the shadcn CLI. The command fetches the component code from the provided URL and copies it to your designated components folder, also handling dependencies and using your existing Tailwind CSS configuration. Replace 'component-name' in the URL with the desired component; ensure shadcn is initialized and configured in your project before running.\nSOURCE: https://github.com/xyflow/web/blob/main/sites/reactflow.dev/src/content/components/index.mdx#2025-04-23_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nnpx shadcn@latest add https://ui.reactflow.dev/component-name\n```\n\n----------------------------------------\n\nTITLE: Implementing SVG Markers in React Flow\nDESCRIPTION: Example showing how to use SVG markers in React Flow edge components. Markers can be customized using standard SVG marker elements as defined in the Mozilla Developer documentation.\nSOURCE: https://github.com/xyflow/web/blob/main/apps/example-apps/react/examples/edges/markers/README.mdx#2025-04-23_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<RemoteCodeViewer route=\"examples/edges/markers\" framework=\"react\" />\n```\n\n----------------------------------------\n\nTITLE: Defining EdgeProps Type in TypeScript for xyflow Custom Edges\nDESCRIPTION: This TypeScript code defines the EdgeProps type, which includes various properties passed to custom edge components in xyflow. It covers edge identification, styling, positioning, and additional customization options.\nSOURCE: https://github.com/xyflow/web/blob/main/sites/svelteflow.dev/src/content/api-reference/types/edge-props.mdx#2025-04-23_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nexport type EdgeProps<T> = {\n  id: string;\n  animated: boolean;\n  data: T;\n  style: string;\n  selected: boolean;\n  source: string;\n  target: string;\n  sourceHandleId?: string | null;\n  targetHandleId?: string | null;\n  interactionWidth: number;\n  sourceX: number;\n  sourceY: number;\n  targetX: number;\n  targetY: number;\n  sourcePosition: Position;\n  targetPosition: Position;\n  label?: string;\n  markerStart?: string;\n  markerEnd?: string;\n  pathOptions?: any;\n};\n```\n\n----------------------------------------\n\nTITLE: Duplicate Example of Improved fitView Implementation\nDESCRIPTION: Another example of the simplified fitView approach that works immediately after adding nodes without requiring animation frames.\nSOURCE: https://github.com/xyflow/web/blob/main/sites/reactflow.dev/src/content/whats-new/2025-03-27.mdx#2025-04-23_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nsetNodes((nodes) => [nodes, ...newNode]);\nfitView(); // it just works.\n// adding a new node and fitting the view happens at the same time\n```\n\n----------------------------------------\n\nTITLE: Defining CoordinateExtent Type in TypeScript for XY Flow\nDESCRIPTION: This snippet defines the CoordinateExtent type as a tuple of two coordinate pairs. It's used to represent the bounds of nodes or the viewport in XY Flow, with each coordinate pair defining a corner of the extent.\nSOURCE: https://github.com/xyflow/web/blob/main/sites/svelteflow.dev/src/content/api-reference/types/coordinate-extent.mdx#2025-04-23_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nexport type CoordinateExtent = [[number, number], [number, number]];\n```\n\n----------------------------------------\n\nTITLE: Preventing performance bugs: (Do/Don't) creating nodeTypes on render - React (JSX)\nDESCRIPTION: These contrasting snippets illustrate the importance of memoizing or lifting out `nodeTypes`/`edgeTypes` when passing them to React Flow. The first ('bad') example creates a new object each render, leading to bugs and performance loss. The correct examples use `useMemo` or define types outside the component, preventing unnecessary React rerenders and reference changes. No special inputs/outputs; pattern focus.\nSOURCE: https://github.com/xyflow/web/blob/main/sites/reactflow.dev/src/content/learn/troubleshooting/migrate-to-v10.mdx#2025-04-23_snippet_4\n\nLANGUAGE: jsx\nCODE:\n```\n// this is bad! Don't do it.\\n<ReactFlow\\n  nodes={[]}\\n  nodeTypes={{\\n    specialType: SpecialNode, // bad!\\n  }}\\n/>\n```\n\nLANGUAGE: jsx\nCODE:\n```\nfunction Flow() {\\n  const nodeTypes = useMemo(() => ({ specialType: SpecialNode }), []);\\n\\n  return <ReactFlow nodes={[]} nodeTypes={nodeTypes} />;\\n}\n```\n\nLANGUAGE: jsx\nCODE:\n```\nconst nodeTypes = { specialType: SpecialNode };\\n\\nfunction Flow() {\\n  return <ReactFlow nodes={[]} nodeTypes={nodeTypes} />;\\n}\n```\n\n----------------------------------------\n\nTITLE: Adding React Flow TooltipNode via shadcn (Bash)\nDESCRIPTION: Uses the `shadcn/ui` CLI to add the `<TooltipNode />` component from the React Flow Components registry URL. This command downloads the component source code and any dependencies into the project.\nSOURCE: https://github.com/xyflow/web/blob/main/sites/reactflow.dev/src/content/learn/tutorials/getting-started-with-react-flow-components.mdx#2025-04-23_snippet_13\n\nLANGUAGE: bash\nCODE:\n```\nnpx shadcn@latest add https://ui.reactflow.dev/tooltip-node\n```\n\n----------------------------------------\n\nTITLE: Importing Remote Code Viewer Component\nDESCRIPTION: Imports the RemoteCodeViewer component from xy-shared/server to display the feature overview example code.\nSOURCE: https://github.com/xyflow/web/blob/main/sites/svelteflow.dev/src/content/examples/overview.mdx#2025-04-23_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport { RemoteCodeViewer } from 'xy-shared/server';\n```\n\n----------------------------------------\n\nTITLE: Projecting Screen Coordinates to React Flow Position (After Migration) - React Flow - JavaScript\nDESCRIPTION: This snippet shows the migration to the new \\\"screenToFlowPosition\\\" utility, eliminating the need to subtract bounding rectangle offsets manually. With the updated utility, developers can directly pass MouseEvent client coordinates to obtain the canvas-relative position. Requires updated reactFlowInstance with \\\"screenToFlowPosition\\\" method, and a MouseEvent. Outputs the relative x and y position.\nSOURCE: https://github.com/xyflow/web/blob/main/sites/reactflow.dev/src/content/whats-new/2023-11-10.mdx#2025-04-23_snippet_1\n\nLANGUAGE: JavaScript\nCODE:\n```\nconst position = reactFlowInstance.screenToFlowPosition({\n  x: event.clientX,\n  y: event.clientY,\n});\n```\n\n----------------------------------------\n\nTITLE: Implementing Remote Code Viewer\nDESCRIPTION: Implements the RemoteCodeViewer component with specific route and framework props to display the feature overview example.\nSOURCE: https://github.com/xyflow/web/blob/main/sites/svelteflow.dev/src/content/examples/overview.mdx#2025-04-23_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\n<RemoteCodeViewer route=\"examples/misc/feature-overview\" framework=\"svelte\" />\n```\n\n----------------------------------------\n\nTITLE: Custom Node Coloring in MiniMap\nDESCRIPTION: Implementation showing how to customize MiniMap node colors based on node type using a color function callback.\nSOURCE: https://github.com/xyflow/web/blob/main/sites/svelteflow.dev/src/content/api-reference/components/mini-map.mdx#2025-04-23_snippet_2\n\nLANGUAGE: svelte\nCODE:\n```\n<script lang=\"ts\">\n  import { writable } from 'svelte/store';\n  import { SvelteFlow, MiniMap } from '@xyflow/svelte';\n\n  const nodes = writable([]);\n  const edges = writable([]);\n\n  function nodeColor(node) {\n    return node.type === 'input' ? 'blue' : 'red';\n  }\n</script>\n\n<SvelteFlow nodes={nodes} edges={edges}>\n  <MiniMap nodeColor={nodeColor} />\n</SvelteFlow>\n```\n\n----------------------------------------\n\nTITLE: Accessing Position Props in Custom Nodes v11 (Old API)\nDESCRIPTION: Shows how custom node components received the node's absolute position via the `xPos` and `yPos` props in React Flow v11. These prop names have changed in v12.\nSOURCE: https://github.com/xyflow/web/blob/main/sites/reactflow.dev/src/content/learn/troubleshooting/migrate-to-v12.mdx#2025-04-23_snippet_13\n\nLANGUAGE: javascript\nCODE:\n```\nfunction CustomNode({ xPos, yPos }) {\n  ...\n}\n```\n\n----------------------------------------\n\nTITLE: Defining NodeConnection Type in TypeScript\nDESCRIPTION: Type definition for NodeConnection that extends the basic Connection type by adding the edgeId property. It includes source and target node identifiers, sourceHandle and targetHandle for connection points, and edgeId to identify the edge.\nSOURCE: https://github.com/xyflow/web/blob/main/sites/svelteflow.dev/src/content/api-reference/types/node-connection.mdx#2025-04-23_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nexport type NodeConnection = {\n  source: string | null;\n  target: string | null;\n  sourceHandle: string | null;\n  targetHandle: string | null;\n  edgeId: string;\n};\n```\n\n----------------------------------------\n\nTITLE: Embedding RemoteCodeViewer for Svelte Flow Edge Types Example\nDESCRIPTION: This code snippet embeds the RemoteCodeViewer component to display a remote code example of edge types in Svelte Flow. It specifies the route to the example and the framework being used.\nSOURCE: https://github.com/xyflow/web/blob/main/sites/svelteflow.dev/src/content/examples/edges/edge-types.mdx#2025-04-23_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\n<RemoteCodeViewer\n  route=\"examples/edges/edge-types\"\n  framework=\"svelte\"\n/>\n```\n\n----------------------------------------\n\nTITLE: Defining EdgeMarker Type in TypeScript\nDESCRIPTION: TypeScript type definition for the EdgeMarker object which can be used with the edgeMarker prop on Edge components. It specifies marker type, color, dimensions, units, orientation, and stroke width.\nSOURCE: https://github.com/xyflow/web/blob/main/sites/svelteflow.dev/src/content/api-reference/types/edge-marker.mdx#2025-04-23_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nexport type EdgeMarker = {\n  type: MarkerType;\n  color?: string;\n  width?: number;\n  height?: number;\n  markerUnits?: string;\n  orient?: string;\n  strokeWidth?: number;\n};\n```\n\n----------------------------------------\n\nTITLE: Incorrect useReactFlow Hook Usage Without Provider (JSX)\nDESCRIPTION: This snippet demonstrates an incorrect attempt to use the `useReactFlow` hook within a component that is not nested inside a `<ReactFlowProvider>`. Accessing the React Flow state via this hook requires the provider context, which is missing here, leading to the 'Zustand provider not found' warning.\nSOURCE: https://github.com/xyflow/web/blob/main/sites/reactflow.dev/src/content/learn/troubleshooting/index.mdx#2025-04-23_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport { ReactFlow } from '@xyflow/react';\nimport '@xyflow/react/dist/style.css';\n\nfunction FlowWithoutProvider(props) {\n  // cannot access the state here\n  const reactFlowInstance = useReactFlow();\n\n  return <ReactFlow {...props} />;\n}\n\nexport default FlowWithoutProvider;\n```\n\n----------------------------------------\n\nTITLE: Installing Node.js Type Definitions (Bash)\nDESCRIPTION: Installs the `@types/node` package as a development dependency. This provides TypeScript type definitions for Node.js built-in modules, required for importing and using the `path` module in the Vite configuration file.\nSOURCE: https://github.com/xyflow/web/blob/main/sites/reactflow.dev/src/content/learn/tutorials/getting-started-with-react-flow-components.mdx#2025-04-23_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\nnpm i -D @types/node\n```\n\n----------------------------------------\n\nTITLE: Using Remote Code Viewer for Threlte Flow Example in Svelte\nDESCRIPTION: This snippet demonstrates the usage of the RemoteCodeViewer component to display the Svelte Flow with Threlte example code. It specifies the route to the example and sets the framework to Svelte.\nSOURCE: https://github.com/xyflow/web/blob/main/sites/svelteflow.dev/src/content/examples/misc/threlte-flow.mdx#2025-04-23_snippet_2\n\nLANGUAGE: svelte\nCODE:\n```\n<RemoteCodeViewer route=\"examples/misc/threlte-flow\" framework=\"svelte\" />\n```\n\n----------------------------------------\n\nTITLE: Importing RemoteCodeViewer Component in Svelte\nDESCRIPTION: This code snippet imports the RemoteCodeViewer component from the xy-shared/server module. This component is likely used to display remote code examples within the documentation.\nSOURCE: https://github.com/xyflow/web/blob/main/sites/svelteflow.dev/src/content/examples/edges/custom-edges.mdx#2025-04-23_snippet_0\n\nLANGUAGE: svelte\nCODE:\n```\nimport { RemoteCodeViewer } from 'xy-shared/server';\n```\n\n----------------------------------------\n\nTITLE: Updating Edge Connections with XYFlow Utility - JavaScript\nDESCRIPTION: Demonstrates the usage of the reconnectEdge utility within a React useCallback to update an edge's connection. Requires the XYFlow core utilities, an array of Edge objects, and Connection objects as inputs. Takes an old Edge and a new Connection, then updates the edges state array by replacing the matching edge; suitable for interactive graph UI scenarios with state management. Returns the updated array of Edge objects.\nSOURCE: https://github.com/xyflow/web/blob/main/sites/reactflow.dev/src/content/api-reference/utils/reconnect-edge.mdx#2025-04-23_snippet_0\n\nLANGUAGE: js\nCODE:\n```\nconst onReconnect = useCallback(\n  (oldEdge: Edge, newConnection: Connection) => setEdges((els) => reconnectEdge(oldEdge, newConnection, els)),\n  []\n);\n```\n\n----------------------------------------\n\nTITLE: Using getViewportForBounds in XYFlow\nDESCRIPTION: Demonstrates how to use the getViewportForBounds utility to calculate viewport parameters (x, y coordinates and zoom level) for a specified bounds rectangle. The example shows calculating viewport for a 100x100 rectangle within a 1200x800 viewport with zoom constraints between 0.5 and 2.\nSOURCE: https://github.com/xyflow/web/blob/main/sites/svelteflow.dev/src/content/api-reference/utils/get-viewport-for-bounds.mdx#2025-04-23_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport { getViewportForBounds } from '@xyflow/svelte';\n\nconst { x, y, zoom } = getViewportForBounds(\n  {\n    x: 0,\n    y: 0,\n    width: 100,\n    height: 100,\n  },\n  1200,\n  800,\n  0.5,\n  2,\n);\n```\n\n----------------------------------------\n\nTITLE: Configuring Tailwind CSS for XY UI Components\nDESCRIPTION: Configuration snippet for tailwind.config.js to include @xyflow/xy-ui component styles in the build process.\nSOURCE: https://github.com/xyflow/web/blob/main/packages/xy-ui/README.md#2025-04-23_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\ncontent: {\\n  ...\\n  'node_modules/@xyflow/xy-ui/components/**/*.{js,ts,jsx,tsx,mdx}',\\n}\n```\n\n----------------------------------------\n\nTITLE: Initializing a SvelteFlow Diagram with Controls in Svelte/TypeScript\nDESCRIPTION: This snippet demonstrates a minimal 'Hello World' example using Svelte Flow in a Svelte (TypeScript) application. The code initializes two nodes and a connecting edge using Svelte's writable stores, then renders the SvelteFlow component and its built-in controls (Controls, Background, MiniMap). Main dependencies are '@xyflow/svelte' and its default stylesheet. Required parameters include the node and edge definitions, and 'fitView' is used to auto-fit the diagram. Inputs are the nodes and edges, while the output is an interactive node-based UI embedded in a Svelte app.\nSOURCE: https://github.com/xyflow/web/blob/main/sites/xyflow.com/src/content/svelte-flow-launch.mdx#2025-04-23_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\n<script lang=\\\"ts\\\">\n  import { writable } from 'svelte/store';\n  import {\n    SvelteFlow,\n    Controls,\n    Background,\n    MiniMap,\n  } from '@xyflow/svelte';\n\n  import '@xyflow/svelte/dist/style.css'\n\n  const nodes = writable([\n    {\n      id: '1',\n      data: { label: 'Hello' },\n      position: { x: 0, y: 0 }\n    },\n    {\n      id: '2',\n      data: { label: 'World' },\n      position: { x: 100, y: 100 }\n    }\n  ]);\n\n  const edges = writable([\n    {\n      id: '1-2',\n      source: '1',\n      target: '2',\n    }\n  ]);\n</script>\n\n<SvelteFlow {nodes} {edges} fitView>\n  <Controls />\n  <Background />\n  <MiniMap />\n</SvelteFlow>\n```\n\n----------------------------------------\n\nTITLE: Setting Up Basic App Component (JSX)\nDESCRIPTION: Defines a simple React functional component `App`. It renders an empty `div` styled with Tailwind classes (`w-screen`, `h-screen`, `p-8`) to occupy the full screen viewport with padding. This serves as a clean starting point before adding React Flow components.\nSOURCE: https://github.com/xyflow/web/blob/main/sites/reactflow.dev/src/content/learn/tutorials/getting-started-with-react-flow-components.mdx#2025-04-23_snippet_5\n\nLANGUAGE: jsx\nCODE:\n```\nfunction App() {\n  return <div className=\"w-screen h-screen p-8\"></div>;\n}\n\nexport default App;\n```\n\n----------------------------------------\n\nTITLE: Updating Nodes with useSvelteFlow Helpers in Svelte Flow\nDESCRIPTION: The `useSvelteFlow` hook now provides `updateNode` and `updateNodeData` helper functions. `updateNode` allows updating the entire node object, while `updateNodeData` specifically targets the node's data object for more direct updates.\nSOURCE: https://github.com/xyflow/web/blob/main/sites/svelteflow.dev/src/content/whats-new/2023-12-13.mdx#2025-04-23_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nupdateNode\n```\n\nLANGUAGE: javascript\nCODE:\n```\nupdateNodeData\n```\n\nLANGUAGE: javascript\nCODE:\n```\nuseSvelteFlow\n```\n\n----------------------------------------\n\nTITLE: Adding Directional Slide Controls in React Flow - TypeScript\nDESCRIPTION: This snippet adds directional navigation buttons to a slide component in React Flow. It uses React's useCallback for the moveToNextSlide handler, which will later be tied to actual navigation logic, and conditionally renders directional buttons in the footer based on available connections in the node's data. The component depends on @xyflow/react and react-remark. Inputs are node data with potential directional links (left, up, right, down), and outputs are UI buttons that will trigger navigation. All original code formatting and comments are preserved.\nSOURCE: https://github.com/xyflow/web/blob/main/sites/reactflow.dev/src/content/learn/tutorials/slide-shows-with-react-flow.mdx#2025-04-23_snippet_11\n\nLANGUAGE: tsx\nCODE:\n```\nimport { type NodeProps, fitView } from '@xyflow/react';\nimport { Remark } from 'react-remark';\nimport { useCallback } from 'react';\n\n...\n\nexport function Slide({ data }: NodeProps<SlideNide>) {\n  const moveToNextSlide = useCallback((id: string) => {}, []);\n\n  return (\n    <article className=\"slide nodrag\" style={style}>\n      <Remark>{data.source}</Remark>\n      <footer className=\"slide__controls nopan\">\n        {data.left && (<button onClick={() => moveToNextSlide(data.left)}>←</button>)}\n        {data.up && (<button onClick={() => moveToNextSlide(data.up)}>↑</button>)}\n        {data.down && (<button onClick={() => moveToNextSlide(data.down)}>↓</button>)}\n        {data.right && (<button onClick={() => moveToNextSlide(data.right)}>→</button>)}\n      </footer>\n    </article>\n  );\n}\n\n```\n\n----------------------------------------\n\nTITLE: Importing RemoteCodeViewer Component - JavaScript\nDESCRIPTION: This code snippet imports the RemoteCodeViewer component from the xy-shared/server package for use in a documentation page. The component is crucial for embedding remote code examples within the guide. There are no additional dependencies beyond the xy-shared package, and the imported component is required for later JSX embedding.\nSOURCE: https://github.com/xyflow/web/blob/main/sites/reactflow.dev/src/content/whats-new/2023-11-14.mdx#2025-04-23_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport { RemoteCodeViewer } from 'xy-shared/server';\n```\n\n----------------------------------------\n\nTITLE: Accessing Measured Node Dimensions in v11 (Old API)\nDESCRIPTION: Example of accessing the measured width and height of a node directly from the `node.width` and `node.height` properties in React Flow v11. This approach is changed in v12.\nSOURCE: https://github.com/xyflow/web/blob/main/sites/reactflow.dev/src/content/learn/troubleshooting/migrate-to-v12.mdx#2025-04-23_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\n// getting the measured width and height\nconst nodeWidth = node.width;\nconst nodeHeight = node.height;\n```\n\n----------------------------------------\n\nTITLE: Incorrect useReactFlow Hook Usage Within Provider Component (JSX)\nDESCRIPTION: This snippet shows another incorrect scenario where `useReactFlow` is called within the component that *renders* the `<ReactFlowProvider>`, rather than in a child component. The hook can only access the context in components that are descendants of the provider.\nSOURCE: https://github.com/xyflow/web/blob/main/sites/reactflow.dev/src/content/learn/troubleshooting/index.mdx#2025-04-23_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\nimport { ReactFlow, ReactFlowProvider } from '@xyflow/react';\nimport '@xyflow/react/dist/style.css';\n\nfunction Flow(props) {\n  // still cannot access the state here\n  // only child components of this component can access the state\n  const reactFlowInstance = useReactFlow();\n\n  return (\n    <ReactFlowProvider>\n      <ReactFlow {...props} />\n    </ReactFlowProvider>\n  );\n}\n\nexport default FlowWithProvider;\n```\n\n----------------------------------------\n\nTITLE: Configuring Tailwind Content Sources (JavaScript)\nDESCRIPTION: Updates the `content` array in `tailwind.config.js`. This tells Tailwind to scan HTML, JS, TS, JSX, and TSX files within the `src` directory and the root `index.html` for class names to include in the final CSS build. Line 3 specifies the file paths.\nSOURCE: https://github.com/xyflow/web/blob/main/sites/reactflow.dev/src/content/learn/tutorials/getting-started-with-react-flow-components.mdx#2025-04-23_snippet_3\n\nLANGUAGE: js\nCODE:\n```\n/** @type {import('tailwindcss').Config} */\nexport default {\n  content: ['./index.html', './src/**/*.{ts,tsx,js,jsx}'],\n  theme: {\n    extend: {},\n  },\n  plugins: [],\n};\n```\n\n----------------------------------------\n\nTITLE: Loading Tailwind CSS in RemoteCodeViewer\nDESCRIPTION: Component setup for demonstrating Tailwind CSS integration with XY Flow. Uses the RemoteCodeViewer component to display a Svelte example with Tailwind CSS loaded from CDN.\nSOURCE: https://github.com/xyflow/web/blob/main/sites/svelteflow.dev/src/content/examples/styling/tailwind.mdx#2025-04-23_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\n<RemoteCodeViewer\n  route=\"examples/styling/tailwind\"\n  framework=\"svelte\"\n  sandpackOptions={{\n    externalResources: ['https://cdn.tailwindcss.com'],\n  }}\n/>\n```\n\n----------------------------------------\n\nTITLE: Defining KeyDefinition Type in TypeScript\nDESCRIPTION: This snippet defines two TypeScript types: KeyDefinitionObject which represents a key with an optional modifier, and KeyDefinition which can be either a string or a KeyDefinitionObject. These types are used for configuring built-in keybindings in the xyflow library.\nSOURCE: https://github.com/xyflow/web/blob/main/sites/svelteflow.dev/src/content/api-reference/types/key-definition.mdx#2025-04-23_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nexport type KeyDefinitionObject = { key: string; modifier?: KeyModifier };\nexport type KeyDefinition = string | KeyDefinitionObject;\n```\n\n----------------------------------------\n\nTITLE: Disabling d3-drag for Jest Mouse Events - JSX/JavaScript\nDESCRIPTION: This JavaScript/JSX code demonstrates how to disable d3-drag functionality within a ReactFlow component to facilitate mouse event testing with Jest. For test environments that cannot emulate browser drag-and-drop, setting nodesDraggable and panOnDrag props to false allows event handlers to be tested without interference from d3-drag. Dependencies: React, ReactFlow. Params: nodesDraggable (boolean), panOnDrag (boolean), rest (other props). Input: component props; Output: ReactFlow component with dragging logic disabled; Limitation: Only suitable for non-interactive test scenarios.\nSOURCE: https://github.com/xyflow/web/blob/main/sites/reactflow.dev/src/content/learn/advanced-use/testing.mdx#2025-04-23_snippet_1\n\nLANGUAGE: JavaScript\nCODE:\n```\n<ReactFlow nodesDraggable={false} panOnDrag={false} {...rest} />\n```\n\n----------------------------------------\n\nTITLE: Defining NodeProps Interface in TypeScript for xyflow/web Custom Nodes\nDESCRIPTION: This TypeScript snippet defines the NodeProps interface used for custom nodes in xyflow/web. It includes properties like id, data, dimensions, drag handling, selection state, and positioning.\nSOURCE: https://github.com/xyflow/web/blob/main/sites/svelteflow.dev/src/content/api-reference/types/node-props.mdx#2025-04-23_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nexport type NodeProps<NodeType extends Node = Node> = {\n  id: string;\n  data: NodeType['data'];\n  width: number;\n  height: number;\n  dragHandle?: boolean;\n  type?: NodeType['type'];\n  selected?: boolean;\n  isConnectable?: boolean;\n  zIndex?: number;\n  positionAbsolute: XYPosition;\n  dragging: boolean;\n  targetPosition?: Position;\n  sourcePosition?: Position;\n};\n```\n\n----------------------------------------\n\nTITLE: Fix: Node Deletion Prevention on Backspace Key\nDESCRIPTION: Addresses an issue where pressing the `Backspace` key could inadvertently delete a selected node, even when focus was inside an `input` field, `textarea`, or element with the `.nokey` class. This fix prevents node deletion in these specific user input contexts.\nSOURCE: https://github.com/xyflow/web/blob/main/sites/svelteflow.dev/src/content/whats-new/2023-12-13.mdx#2025-04-23_snippet_6\n\nLANGUAGE: text\nCODE:\n```\nBackspace\n```\n\nLANGUAGE: html\nCODE:\n```\ninput\n```\n\nLANGUAGE: html\nCODE:\n```\ntextarea\n```\n\nLANGUAGE: css\nCODE:\n```\n.nokey\n```\n\n----------------------------------------\n\nTITLE: Calculating Viewport for Bounds (After Migration) - React Flow - JavaScript\nDESCRIPTION: This snippet demonstrates the updated \\\"getViewportForBounds\\\" utility, which replaces \\\"getTransformForBounds\\\" and returns an object with named properties { x, y, zoom }. It simplifies extraction of viewport transformation values for fitting bounds. It requires bounds, width, height, padding, and max zoom; outputs an object for direct property access.\nSOURCE: https://github.com/xyflow/web/blob/main/sites/reactflow.dev/src/content/whats-new/2023-11-10.mdx#2025-04-23_snippet_3\n\nLANGUAGE: JavaScript\nCODE:\n```\nconst { x, y, zoom } = getViewportForBounds(bounds, width, height, 0.5, 2);\n```\n\n----------------------------------------\n\nTITLE: Setting Node Dimensions via Style in v11 (Old API)\nDESCRIPTION: Shows how node dimensions were often set using the `style` attribute within the node object in React Flow v11. While functional, v12 introduces a more direct way.\nSOURCE: https://github.com/xyflow/web/blob/main/sites/reactflow.dev/src/content/learn/troubleshooting/migrate-to-v12.mdx#2025-04-23_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\n// in React Flow 11 you might have used node.style to set the dimensions\nconst nodes = [\n  {\n    id: '1',\n    type: 'input',\n    data: { label: 'input node' },\n    position: { x: 250, y: 5 },\n    style: { width: 180, height: 40 },\n  },\n];\n```\n\n----------------------------------------\n\nTITLE: Defining nodeTypes Inside Component Causing Re-renders (JSX)\nDESCRIPTION: This snippet demonstrates an inefficient pattern where the `nodeTypes` object is defined directly inside the functional component's body. This causes a new object to be created on every render, potentially triggering unnecessary re-renders of the React Flow component, leading to performance issues and warnings.\nSOURCE: https://github.com/xyflow/web/blob/main/sites/reactflow.dev/src/content/learn/troubleshooting/index.mdx#2025-04-23_snippet_3\n\nLANGUAGE: jsx\nCODE:\n```\nimport { ReactFlow } from '@xyflow/react';\nimport '@xyflow/react/dist/style.css';\n\nimport MyCustomNode from './MyCustomNode';\n\nfunction Flow(props) {\n  // new object being created on every render\n  // causing unnecessary re-renders\n  const nodeTypes = {\n    myCustomNode: MyCustomNode,\n  };\n\n  return <ReactFlow nodeTypes={nodeTypes} />;\n}\n\nexport default Flow;\n```\n\n----------------------------------------\n\nTITLE: Embedding a Remote Code Example with Bleed Layout\nDESCRIPTION: This JSX snippet uses the `Bleed` component from Nextra to allow its child element, `RemoteCodeViewer`, to extend into the page margins. The `RemoteCodeViewer` fetches and displays a code example identified by the route 'learn/sub-flows-3', specifically for the 'react' framework, without showing the editor interface.\nSOURCE: https://github.com/xyflow/web/blob/main/sites/xyflow.com/src/content/react-flow-v10.mdx#2025-04-23_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\n<Bleed>\n  <RemoteCodeViewer\n    route=\"learn/sub-flows-3\"\n    showEditor={false}\n    framework=\"react\"\n  />\n</Bleed>\n```\n\n----------------------------------------\n\nTITLE: Embedding Remote Code Viewer Component in React - JavaScript\nDESCRIPTION: This snippet imports the RemoteCodeViewer component from the xy-shared/server package and renders it with specific props to display an example located at the provided route. Dependencies include the xy-shared library and a React application context. The component is a visual UI wrapper expected to show example code without an editor, targeting the multi-connection line feature discussed in the context.\nSOURCE: https://github.com/xyflow/web/blob/main/sites/reactflow.dev/src/content/whats-new/2024-02-09.mdx#2025-04-23_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport { RemoteCodeViewer } from 'xy-shared/server';\n\n<RemoteCodeViewer\n  route=\"examples/edges/multi-connection-line\"\n  framework=\"react\"\n  showEditor={false}\n/>\n```\n\n----------------------------------------\n\nTITLE: Importing and Using ApiReferenceSummary Component\nDESCRIPTION: Imports the ApiReferenceSummary component from xy-shared/server and renders it with the components category. Used to generate API documentation for components.\nSOURCE: https://github.com/xyflow/web/blob/main/sites/reactflow.dev/src/content/api-reference/components/index.mdx#2025-04-23_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport { ApiReferenceSummary } from 'xy-shared/server';\n\n<ApiReferenceSummary category=\"components\" />\n```\n\n----------------------------------------\n\nTITLE: Hiding the Target Handle with CSS - react-flow\nDESCRIPTION: Customizes the React Flow UI styling so the target handle is visually hidden and non-interactive. This CSS rule targets elements with the .react-flow__handle.target selector, centering the handle vertically, disabling pointer events, and setting opacity to zero. Prerequisites: React Flow with .react-flow__handle classes in the DOM. Inputs: None (affects DOM globally). Output: Visually hidden target handles. Limitation: Only impacts UI, not connection logic.\nSOURCE: https://github.com/xyflow/web/blob/main/sites/reactflow.dev/src/content/learn/tutorials/mind-map-app-with-react-flow.mdx#2025-04-23_snippet_18\n\nLANGUAGE: css\nCODE:\n```\n.react-flow__handle.target {\n  top: 50%;\n  pointer-events: none;\n  opacity: 0;\n}\n```\n\n----------------------------------------\n\nTITLE: Defining BackgroundVariant Enum in TypeScript for React Flow\nDESCRIPTION: This code snippet defines an enum called BackgroundVariant with three options: Lines, Dots, and Cross. Each option is associated with a string value that corresponds to the background pattern type in React Flow.\nSOURCE: https://github.com/xyflow/web/blob/main/sites/svelteflow.dev/src/content/api-reference/types/background-variant.mdx#2025-04-23_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nexport enum BackgroundVariant {\n  Lines = 'lines',\n  Dots = 'dots',\n  Cross = 'cross',\n}\n```\n\n----------------------------------------\n\nTITLE: Scaffolding a React Project with Vite (JavaScript)\nDESCRIPTION: Uses the `npm create vite` command to initialize a new React project named 'reactflow-mind-map' using the default JavaScript template. This sets up the basic file structure and build configurations for a React application using Vite.\nSOURCE: https://github.com/xyflow/web/blob/main/sites/reactflow.dev/src/content/learn/tutorials/mind-map-app-with-react-flow.mdx#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm create vite@latest reactflow-mind-map -- --template react\n```\n\n----------------------------------------\n\nTITLE: Setting Node Dimensions Directly in v12 (New API)\nDESCRIPTION: Illustrates the v12 approach for setting fixed node dimensions by directly using the `width` and `height` properties on the node object. These are now used as inline styles, distinct from the measured dimensions stored in `node.measured`.\nSOURCE: https://github.com/xyflow/web/blob/main/sites/reactflow.dev/src/content/learn/troubleshooting/migrate-to-v12.mdx#2025-04-23_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\n// in React Flow 12 you can used node.width and node.height to set the dimensions\nconst nodes = [\n  {\n    id: '1',\n    type: 'input',\n    data: { label: 'input node' },\n    position: { x: 250, y: 5 },\n    width: 180,\n    height: 40,\n  },\n];\n```\n\n----------------------------------------\n\nTITLE: New Node Hidden Property Implementation\nDESCRIPTION: Demonstrates the new way to hide nodes using the simplified 'hidden' property, following the removal of 'is' prefix from boolean properties.\nSOURCE: https://github.com/xyflow/web/blob/main/sites/reactflow.dev/src/content/learn/troubleshooting/migrate-to-v10.mdx#2025-04-23_snippet_12\n\nLANGUAGE: javascript\nCODE:\n```\nconst hiddenNode = { id: '1', hidden: true, position: { x: 50, y: 50 } };\n```\n\n----------------------------------------\n\nTITLE: Overriding Svelte Flow CSS Variables (CSS)\nDESCRIPTION: Demonstrates how to override a default Svelte Flow CSS variable within a CSS file or style block. This example targets the `.svelte-flow` container and changes the default background color for nodes by setting the `--xy-node-background-color-default` variable to red (`#ff5050`). This method allows tweaking specific visual aspects without replacing all default styles.\nSOURCE: https://github.com/xyflow/web/blob/main/sites/svelteflow.dev/src/content/learn/guides/theming.mdx#2025-04-23_snippet_2\n\nLANGUAGE: css\nCODE:\n```\n.svelte-flow {\n  --xy-node-background-color-default: #ff5050;\n}\n```\n\n----------------------------------------\n\nTITLE: Importing RemoteCodeViewer Component in Svelte\nDESCRIPTION: This snippet imports the RemoteCodeViewer component from the xy-shared/server module. The component is used to display remote code examples.\nSOURCE: https://github.com/xyflow/web/blob/main/sites/svelteflow.dev/src/content/examples/layout/subflows.mdx#2025-04-23_snippet_0\n\nLANGUAGE: svelte\nCODE:\n```\nimport { RemoteCodeViewer } from 'xy-shared/server';\n```\n\n----------------------------------------\n\nTITLE: Importing Remote Code Viewer Component in JSX\nDESCRIPTION: Import statement for a RemoteCodeViewer component used to display code examples for context menu implementation in SvelteFlow.\nSOURCE: https://github.com/xyflow/web/blob/main/sites/svelteflow.dev/src/content/examples/interaction/context-menu.mdx#2025-04-23_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport { RemoteCodeViewer } from 'xy-shared/server';\n```\n\n----------------------------------------\n\nTITLE: Importing React Flow v11 Component (New API)\nDESCRIPTION: Shows the updated way to import the main React Flow component in version 11. The package name has changed to `reactflow`, and the component is imported from `@xyflow/react`. Requires `npm install reactflow`.\nSOURCE: https://github.com/xyflow/web/blob/main/sites/reactflow.dev/src/content/learn/troubleshooting/migrate-to-v11.mdx#2025-04-23_snippet_1\n\nLANGUAGE: js\nCODE:\n```\n// npm install reactflow\nimport { ReactFlow } from '@xyflow/react';\n```\n\n----------------------------------------\n\nTITLE: Correct Edge Definition with Source and Target (JSX)\nDESCRIPTION: This snippet demonstrates the correct way to define an edge. The edge object includes the mandatory `source` and `target` properties, each referencing the ID of the respective source and target nodes. This allows React Flow to correctly render the connection between the specified nodes.\nSOURCE: https://github.com/xyflow/web/blob/main/sites/reactflow.dev/src/content/learn/troubleshooting/index.mdx#2025-04-23_snippet_14\n\nLANGUAGE: jsx\nCODE:\n```\nimport { ReactFlow } from '@xyflow/react';\n\nconst nodes = [\n  /* ... */\n];\n\nconst edges = [\n  {\n    source: '1',\n    target: '2',\n  },\n];\n\nfunction Flow(props) {\n  return <ReactFlow nodes={nodes} edges={edges} />;\n}\n```\n\n----------------------------------------\n\nTITLE: Embedding RemoteCodeViewer for Custom Edge Example - JSX\nDESCRIPTION: This JSX snippet demonstrates how to embed the RemoteCodeViewer component to display an example about customizing edges in React Flow. It configures the viewer to use the 'learn/custom-edge-2' route, set the framework to 'react', and hide the code editor (`showEditor={false}`). The component requires that xy-shared/server is available and that the specified route/content exists. This setup is useful for showing read-only code tutorials or examples in documentation or educational resources.\nSOURCE: https://github.com/xyflow/web/blob/main/sites/reactflow.dev/src/content/whats-new/2023-11-14.mdx#2025-04-23_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\n<RemoteCodeViewer\n  route=\"learn/custom-edge-2\"\n  framework=\"react\"\n  showEditor={false}\n/>\n```\n\n----------------------------------------\n\nTITLE: Calling getNodesBounds Function in v11 (Old API)\nDESCRIPTION: Illustrates the function signature for `getNodesBounds` in React Flow v11, where the second parameter `nodeOrigin` was passed directly. The signature is updated in v12.\nSOURCE: https://github.com/xyflow/web/blob/main/sites/reactflow.dev/src/content/learn/troubleshooting/migrate-to-v12.mdx#2025-04-23_snippet_15\n\nLANGUAGE: javascript\nCODE:\n```\nconst bounds = getNodesBounds(nodes: Node[], nodeOrigin)\n```\n\n----------------------------------------\n\nTITLE: Improved fitView Implementation in React Flow 12.5.0\nDESCRIPTION: The new simplified approach to fitView that works immediately after adding nodes without requiring animation frames or timeouts.\nSOURCE: https://github.com/xyflow/web/blob/main/sites/reactflow.dev/src/content/whats-new/2025-03-27.mdx#2025-04-23_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nsetNodes((nodes) => [nodes, ...newNode]);\nfitView(); // it just works.\n// adding a new node and fitting the view happens at the same time\n```\n\n----------------------------------------\n\nTITLE: Using useNodeConnections Hook in Svelte\nDESCRIPTION: This example demonstrates how to use the useNodeConnections hook to retrieve connections with a specific handle type and ID. The connections array updates automatically when connections change, allowing the component to display the current number of incoming connections.\nSOURCE: https://github.com/xyflow/web/blob/main/sites/svelteflow.dev/src/content/api-reference/hooks/use-node-connections.mdx#2025-04-23_snippet_0\n\nLANGUAGE: svelte\nCODE:\n```\n<script>\n  import { useNodeConnections } from '@xyflow/svelte';\n  const connections = useNodeConnections({ handleType: 'target', handleId: 'my-handle' });\n</script>\n\n<div>There are currently {connections.length} incoming connections!</div>\n```\n\n----------------------------------------\n\nTITLE: Basic Background Component Usage in React Flow\nDESCRIPTION: A basic example showing how to use the Background component within ReactFlow with dots variant. It demonstrates importing the necessary components and setting up a simple flow with a customized background.\nSOURCE: https://github.com/xyflow/web/blob/main/sites/reactflow.dev/src/content/api-reference/components/background.mdx#2025-04-23_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport { useState } from 'react';\nimport { ReactFlow, Background, BackgroundVariant } from '@xyflow/react';\n\nexport default function Flow() {\n  return (\n    <ReactFlow defaultNodes={[...]} defaultEdges={[...]}>\n      <Background color=\"#ccc\" variant={BackgroundVariant.Dots} />\n    </ReactFlow>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Blog Post Frontmatter Configuration\nDESCRIPTION: YAML frontmatter configuration for a blog post defining metadata like title, intro, date, authors, tags and image\nSOURCE: https://github.com/xyflow/web/blob/main/sites/xyflow.com/src/content/asking-for-money-for-open-source.mdx#2025-04-23_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n---\ntitle: 'Dear Open Source: let's do a better job of asking for money'\nintro: 'It's common knowledge that many open source projects are underfunded. We think one reason for this is that the open source world is doing a bad job of asking for the money that it deserves. By telling the right organizations exactly why and how we want them to financially support our work, OSS projects can be compensated for more fairly, and result in a healthier open source ecosystem.'\ndate: 27 February 2023\nauthors: ['john']\ntags: ['react-flow', 'open source']\nimage: '/img/blog/oss-pricing/donate-button-banner.png'\n---\n```\n\n----------------------------------------\n\nTITLE: Embedding Remote Code Viewer for Node Intersections Example\nDESCRIPTION: This code snippet embeds a RemoteCodeViewer component to display an interactive example of node intersections in Svelte Flow. It specifies the route to the example code and sets the framework to Svelte.\nSOURCE: https://github.com/xyflow/web/blob/main/sites/svelteflow.dev/src/content/examples/nodes/intersections.mdx#2025-04-23_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n<RemoteCodeViewer\n  route=\"examples/nodes/intersections\"\n  framework=\"svelte\"\n/>\n```\n\n----------------------------------------\n\nTITLE: Using getOutgoers() Function in XYFlow (TypeScript)\nDESCRIPTION: This snippet demonstrates how to use the getOutgoers() function from XYFlow to find nodes connected as targets to a given node. It imports the function, defines arrays for nodes and edges, and calls getOutgoers() with a sample node.\nSOURCE: https://github.com/xyflow/web/blob/main/sites/svelteflow.dev/src/content/api-reference/utils/get-outgoers.mdx#2025-04-23_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { getOutgoers } from '@xyflow/svelte';\n\nconst nodes = [];\nconst edges = [];\n\nconst incomers = getOutgoers(\n  { id: '1', position: { x: 0, y: 0 }, data: { label: 'node' } },\n  nodes,\n  edges,\n);\n```\n\n----------------------------------------\n\nTITLE: Old Edge Arrow Implementation\nDESCRIPTION: Shows the previous implementation of adding arrows to edges using the deprecated arrowHeadType property.\nSOURCE: https://github.com/xyflow/web/blob/main/sites/reactflow.dev/src/content/learn/troubleshooting/migrate-to-v10.mdx#2025-04-23_snippet_13\n\nLANGUAGE: javascript\nCODE:\n```\nconst markerEdge = { source: '1', target: '2', arrowHeadType: 'arrow' };\n```\n\n----------------------------------------\n\nTITLE: Defining Node Handles for Edge Rendering with React Flow in JavaScript\nDESCRIPTION: This snippet demonstrates how to specify the 'handles' property on a React Flow node, which allows the precise rendering of edges on the server. It uses position definitions and x/y coordinates for each handle. The input is an array of node objects, and the essential dependency is the Position enum from React Flow. Each handle object describes type (target/source), position, and coordinates. Proper handle configuration is critical when SSR diagrams need to visualize edges.\nSOURCE: https://github.com/xyflow/web/blob/main/sites/reactflow.dev/src/content/learn/advanced-use/ssr-ssg-configuration.mdx#2025-04-23_snippet_1\n\nLANGUAGE: js\nCODE:\n```\nconst nodes: Node[] = [\n  {\n    id: '1',\n    type: 'default',\n    position: { x: 0, y: 0 },\n    data: { label: 'Node 1' },\n    width: 100,\n    height: 50,\n    handles: [\n      {\n        type: 'target',\n        position: Position.Top,\n        x: 100 / 2,\n        y: 0,\n      },\n      {\n        type: 'source',\n        position: Position.Bottom,\n        x: 100 / 2,\n        y: 50,\n      },\n    ],\n  },\n];\n```\n\n----------------------------------------\n\nTITLE: Fix: onconnect/ondisconnect Callbacks for Handle Component\nDESCRIPTION: Fixes an issue where connection/disconnection callbacks were not working correctly for the `<Handle />` component. Both `onconnect` and `ondisconnect` callbacks now function as expected for source and target handles, regardless of type.\nSOURCE: https://github.com/xyflow/web/blob/main/sites/svelteflow.dev/src/content/whats-new/2023-12-13.mdx#2025-04-23_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nonconnect\n```\n\nLANGUAGE: javascript\nCODE:\n```\nondisconnect\n```\n\nLANGUAGE: svelte\nCODE:\n```\n<Handle />\n```\n\n----------------------------------------\n\nTITLE: Calling getNodesBounds Function in v12 (New API)\nDESCRIPTION: Shows the updated function signature for `getNodesBounds` in React Flow v12. The `nodeOrigin` parameter is now passed within an options object as the second argument.\nSOURCE: https://github.com/xyflow/web/blob/main/sites/reactflow.dev/src/content/learn/troubleshooting/migrate-to-v12.mdx#2025-04-23_snippet_16\n\nLANGUAGE: javascript\nCODE:\n```\nconst bounds = getNodesBounds(nodes: Node[], { nodeOrigin })\n```\n\n----------------------------------------\n\nTITLE: Page Configuration with Frontmatter in React\nDESCRIPTION: YAML frontmatter configuration that marks this page as an index page for the documentation site.\nSOURCE: https://github.com/xyflow/web/blob/main/sites/svelteflow.dev/src/content/api-reference/utils/index.mdx#2025-04-23_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n---\nasIndexPage: true\n---\n```\n\n----------------------------------------\n\nTITLE: Defining Specific Node Types in React Flow with TypeScript\nDESCRIPTION: This TypeScript code shows how to enhance type safety for React Flow nodes by extending the generic `Node` type. It defines a custom node type `MyCustomNode` which explicitly links `MyCustomNodeData` to the node's data structure and specifies 'custom-node-type' as its type identifier using the second generic parameter. This improves type checking for specific node kinds within a React Flow application.\nSOURCE: https://github.com/xyflow/web/blob/main/sites/xyflow.com/src/content/react-flow-v-11-5.mdx#2025-04-23_snippet_0\n\nLANGUAGE: ts\nCODE:\n```\ntype MyCustomNode = Node<MyCustomNodeData, 'custom-node-type'>;\n```\n\n----------------------------------------\n\nTITLE: New Edge Marker Implementation\nDESCRIPTION: Demonstrates the new flexible marker API that allows customization of both start and end markers with support for custom SVG markers and built-in configurations.\nSOURCE: https://github.com/xyflow/web/blob/main/sites/reactflow.dev/src/content/learn/troubleshooting/migrate-to-v10.mdx#2025-04-23_snippet_14\n\nLANGUAGE: javascript\nCODE:\n```\nconst markerEdge = {\n  source: '1',\n  target: '2',\n  markerStart: 'myCustomSvgMarker',\n  markerEnd: { type: 'arrow', color: '#f00' },\n};\n```\n\n----------------------------------------\n\nTITLE: Remote Code Viewer Implementation\nDESCRIPTION: Implements a remote code viewer component to display drag handle example code for Svelte framework.\nSOURCE: https://github.com/xyflow/web/blob/main/sites/svelteflow.dev/src/content/examples/nodes/drag-handle.mdx#2025-04-23_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\n<RemoteCodeViewer\n  route=\"examples/nodes/drag-handle\"\n  framework=\"svelte\"\n/>\n```\n\n----------------------------------------\n\nTITLE: Using `applyNodeChanges` to Handle Node Updates in a React Component\nDESCRIPTION: This React functional component demonstrates how to manage node state using `applyNodeChanges`. The `onNodesChange` callback receives an array of `NodeChange` objects from the `ReactFlow` component and uses `applyNodeChanges` within the `setNodes` state updater function to apply these changes immutably. It depends on React hooks (`useState`, `useCallback`) and components/utilities from `@xyflow/react` (`ReactFlow`, `applyNodeChanges`).\nSOURCE: https://github.com/xyflow/web/blob/main/sites/reactflow.dev/src/content/api-reference/utils/apply-node-changes.mdx#2025-04-23_snippet_0\n\nLANGUAGE: js\nCODE:\n```\nimport { useState, useCallback } from 'react';\nimport { ReactFlow, applyNodeChanges } from '@xyflow/react';\n\nexport default function Flow() {\n  const [nodes, setNodes] = useState([]);\n  const [edges, setEdges] = useState([]);\n  const onNodesChange = useCallback(\n    (changes) => {\n      setNodes((oldNodes) => applyNodeChanges(changes, oldNodes));\n    },\n    [setNodes],\n  );\n\n  return (\n    <ReactFlow nodes={nodes} edges={edges} onNodesChange={onNodesChange} />\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Using Edge Update Props in React Flow v11 (Old API)\nDESCRIPTION: Shows the usage of `onEdgeUpdate`, `onEdgeUpdateStart`, and `onEdgeUpdateEnd` props in the `ReactFlow` component for handling edge updates in version 11. These props have been renamed in v12.\nSOURCE: https://github.com/xyflow/web/blob/main/sites/reactflow.dev/src/content/learn/troubleshooting/migrate-to-v12.mdx#2025-04-23_snippet_9\n\nLANGUAGE: javascript\nCODE:\n```\n<ReactFlow\n  onEdgeUpdate={onEdgeUpdate}\n  onEdgeUpdateStart={onEdgeUpdateStart}\n  onEdgeUpdateEnd={onEdgeUpdateEnd}\n/>\n```\n\n----------------------------------------\n\nTITLE: Importing Remote Code Viewer Component\nDESCRIPTION: Demonstrates the import and usage of a RemoteCodeViewer component for displaying drag and drop implementation code.\nSOURCE: https://github.com/xyflow/web/blob/main/sites/svelteflow.dev/src/content/examples/interaction/drag-and-drop.mdx#2025-04-23_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport { RemoteCodeViewer } from 'xy-shared/server';\n\n<RemoteCodeViewer\n  route=\"examples/interaction/drag-and-drop\"\n  framework=\"svelte\"\n  activeFile=\"Flow.svelte\"\n/>\n```\n\n----------------------------------------\n\nTITLE: Updating Node Properties in React Flow\nDESCRIPTION: Important note about updating node data in React Flow. A new data object must be created to properly trigger React Flow's state updates and re-renders. Updates are made by passing fresh nodes/edges arrays to the ReactFlow component.\nSOURCE: https://github.com/xyflow/web/blob/main/apps/example-apps/react/examples/nodes/update-node/README.mdx#2025-04-23_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\nYou can update properties of nodes and edges freely as long as you pass a newly created `nodes` or `edges` array to `ReactFlow`.\n```\n\n----------------------------------------\n\nTITLE: Calculating Viewport Transform for Bounds (Before Migration) - React Flow - JavaScript\nDESCRIPTION: This snippet uses the deprecated \\\"getTransformForBounds\\\" utility to calculate how to fit a set of bounds into the viewport, returning an array of [x, y, zoom]. It requires the bounds, viewport dimensions, padding, and max zoom as arguments. Intended for view fitting operations with output as an array of numbers representing the transform.\nSOURCE: https://github.com/xyflow/web/blob/main/sites/reactflow.dev/src/content/whats-new/2023-11-10.mdx#2025-04-23_snippet_2\n\nLANGUAGE: JavaScript\nCODE:\n```\nconst [x, y, zoom] = getTransformForBounds(bounds, width, height, 0.5, 2);\n```\n\n----------------------------------------\n\nTITLE: Testing Node Usability with isNode Utility in XYFlow React - JavaScript\nDESCRIPTION: This code snippet demonstrates how to import and use the `isNode` function from the `@xyflow/react` package to determine if a given object conforms to the Node structure required by XYFlow. The function acts as a type guard in TypeScript, helping to narrow the type when the object is a valid Node and ensuring type safety in downstream operations. Inputs should be plain objects that might represent a Node, and the output is a boolean indicating type conformity.\nSOURCE: https://github.com/xyflow/web/blob/main/sites/reactflow.dev/src/content/api-reference/utils/is-node.mdx#2025-04-23_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport { isNode } from '@xyflow/react';\n\nconst node = {\n  id: 'node-a',\n  data: {\n    label: 'node',\n  },\n  position: {\n    x: 0,\n    y: 0,\n  },\n};\n\nif (isNode(node)) {\n  // ..\n}\n```\n\n----------------------------------------\n\nTITLE: Installing React Flow and React Remark Dependencies\nDESCRIPTION: This command uses `npm install` to add the `@xyflow/react` (React Flow core library) and `react-remark` (for rendering markdown) packages to the project's dependencies. These are essential for building the slideshow functionality.\nSOURCE: https://github.com/xyflow/web/blob/main/sites/reactflow.dev/src/content/learn/tutorials/slide-shows-with-react-flow.mdx#2025-04-23_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nnpm install @xyflow/react react-remark\n```\n\n----------------------------------------\n\nTITLE: Previous Approach to fitView with React Flow\nDESCRIPTION: Example showing the previous inefficient approach to using fitView after adding nodes, requiring requestAnimationFrame to ensure the node is rendered first.\nSOURCE: https://github.com/xyflow/web/blob/main/sites/reactflow.dev/src/content/whats-new/2025-03-27.mdx#2025-04-23_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nsetNodes((nodes) => [nodes, ...newNode]);\nrequestAnimationFrame(() => {\n  fitView();\n});\n// renders the node first and then fits the view :(\n```\n\n----------------------------------------\n\nTITLE: Custom Handle with Connection Validation in Svelte\nDESCRIPTION: This example shows how to create a custom handle that validates connections. It implements a validation function that only allows connections when the connection source matches a given source ID. The handle also has custom styling with a white background.\nSOURCE: https://github.com/xyflow/web/blob/main/sites/svelteflow.dev/src/content/api-reference/components/handle.mdx#2025-04-23_snippet_1\n\nLANGUAGE: svelte\nCODE:\n```\n<script>\n\timport { Handle, Position } from '@xyflow/svelte';\n\n\texport let position;\n\texport let source;\n\n\tfunction isValidConnection(connection) {\n\t\tif (connection.source === source) {\n\t\t\treturn true;\n\t\t}\n\t\treturn false;\n\t}\n\n</script>\n\n<Handle\n\ttype=\"target\"\n\tposition={position}\n\t{isValidConnection}\n\tstyle=\"background: #fff\"\n/>\n```\n\n----------------------------------------\n\nTITLE: Using Bleed and Image Components - JSX\nDESCRIPTION: Implementation of Bleed and Image components to display images with captions and specific dimensions.\nSOURCE: https://github.com/xyflow/web/blob/main/sites/xyflow.com/src/content/react-flow-fall-2022.mdx#2025-04-23_snippet_2\n\nLANGUAGE: JSX\nCODE:\n```\n<Bleed>\n  <Image\n    src=\"/img/blog/fall-2022/package-stats.png\"\n    alt=\"graph comparing npm installs of react-flow-renderer npm installs versus reactflow\"\n    width={1492}\n    height={1076}\n    caption={\n      <a href=\"https://npmtrends.com/react-flow-renderer-vs-reactflow\">\n        npmtrends.com\n      </a>\n    }\n  />\n</Bleed>\n```\n\n----------------------------------------\n\nTITLE: Embedding the Editable Edge Pro Example using ProExampleViewer Component in JSX/MDX\nDESCRIPTION: This JSX snippet utilizes the `ProExampleViewer` component (imported from '@/components/pro-example-viewer') to render the 'editable-edge' Pro example within the page. The `variant` prop is set to 'dark' for styling, and the `slug` prop identifies the specific example to display. This component is likely used within a React/MDX environment.\nSOURCE: https://github.com/xyflow/web/blob/main/sites/reactflow.dev/src/content/whats-new/2024-04-11.mdx#2025-04-23_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\n<ProExampleViewer variant=\"dark\" slug=\"editable-edge\" />\n```\n\n----------------------------------------\n\nTITLE: Importing RemoteCodeViewer Component in JSX\nDESCRIPTION: This snippet imports the RemoteCodeViewer component from the xy-shared/server module. The component is used to display remote code examples.\nSOURCE: https://github.com/xyflow/web/blob/main/sites/svelteflow.dev/src/content/examples/nodes/add-node-on-edge-drop.mdx#2025-04-23_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport { RemoteCodeViewer } from 'xy-shared/server';\n```\n\n----------------------------------------\n\nTITLE: Defining PanelPosition Type in TypeScript\nDESCRIPTION: This snippet defines the PanelPosition type as a union of string literals representing different positions on the viewport. It's used for components that need to be positioned on top of the flow viewport, such as MiniMap and Controls.\nSOURCE: https://github.com/xyflow/web/blob/main/sites/svelteflow.dev/src/content/api-reference/types/panel-position.mdx#2025-04-23_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nexport type PanelPosition =\n  | 'top-left'\n  | 'top-center'\n  | 'top-right'\n  | 'bottom-left'\n  | 'bottom-center'\n  | 'bottom-right';\n```\n\n----------------------------------------\n\nTITLE: Initializing React Project with Vite (Bash)\nDESCRIPTION: Uses npm to initialize a new React project using the Vite build tool. This command scaffolds a basic React application structure, which serves as the foundation for the subsequent Web Audio API examples.\nSOURCE: https://github.com/xyflow/web/blob/main/sites/reactflow.dev/src/content/learn/tutorials/react-flow-and-the-web-audio-api.mdx#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm create vite@latest -- --template react\n```\n\n----------------------------------------\n\nTITLE: Rendering Custom Connection Line Component in React for xyflow\nDESCRIPTION: This code snippet demonstrates how to include a remote code viewer component for displaying a custom connection line example in xyflow. It uses the RemoteCodeViewer component to fetch and display the code for a custom connection line implementation.\nSOURCE: https://github.com/xyflow/web/blob/main/apps/example-apps/react/examples/edges/custom-connectionline/README.mdx#2025-04-23_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\n<RemoteCodeViewer\n  route=\"examples/edges/custom-connectionline\"\n  framework=\"react\"\n/>\n```\n\n----------------------------------------\n\nTITLE: Rendering Interactive QandA Case Study Items - React/JSX\nDESCRIPTION: This snippet demonstrates the usage of a custom QandA React component to display structured Q&A pairs within a case study context. Each component instance takes \\\"question\\\" and \\\"answer\\\" props, while some include additional CSS className for layout control. The required dependency is the '@/components/case-study-qa' component, and this JSX is intended to be used in a Next.js or React environment supporting ES Modules. Inputs are string questions and answers; outputs are rendered FAQ elements.\nSOURCE: https://github.com/xyflow/web/blob/main/sites/reactflow.dev/src/content/pro/case-studies/doubleloop-case-study.mdx#2025-04-23_snippet_0\n\nLANGUAGE: JSX\nCODE:\n```\n<QandA\n  className=\\\"mt-16\\\"\n  question=\\\"Can you describe Doubleloop in a sentence?\\\"\n  answer=\\\"We enable organizations to understand how the work they are doing maps to the\\n  key outcomes they want to achieve.\\\"\n/>\n\n<QandA\n  question=\\\"What problem or decision were you facing that made you decide to use React\\n  Flow?\\\"\n  answer=\\\"Developer ergonomics- flexibility in that the library is really solving the\\n  core of flow-charting and not something more bespoke to their original domain\\n  problem. Vibrancy of the project development seen through frequency of\\n  changes, community, bugs / PRs, etc.\\\"\n/>\n\n<QandA\n  question=\\\"How are you currently using React Flow?\\\"\n  answer=\\\"It’s the majority of our core user experience. Our users interact with all the\\n  of the domain objects in our system via the reactflow pages (we call them\\n  Maps). We have been leveling up our overall set of interactions to feel as\\n  natural as FigJam and Miro.\\\"\n/>\n\n<QandA\n  question=\\\"Can you give an example of something about React Flow that you have found\\n  especially useful?\\\"\n  answer=\\\"It’s the overall ergonomics that feel really nice. The library is opinionated\\n  on things that I want a flowchart library opinionated on like the overall\\n  domain modeling of a flow chart library but completely un-opinionated on all\\n  the things that should be like what exactly is rendered as a Node.\\\"\n/>\n\n<QandA\n  question=\\\"Have you experienced any issues or challenges while using the library? If so,\\n  how were they resolved?\\\"\n  answer=\\\"Mostly around things that I attribute to the youth of the project. Overall its\\n  been developing in a great direction that we largely assess by how much custom\\n  code we get to delete when a new release is out because it’s being handled by\\n  new internal APIs.\\\"\n/>\n\n<QandA\n  question=\\\"How have the features of your React Flow subscription helped you so far?\\\"\n  answer=\\\"100% Pro examples. Those and the Discord chat have been all we’ve really\\n  leveraged to date.\\\"\n/>\n```\n\n----------------------------------------\n\nTITLE: Importing ExamplesOverview Component in MDX\nDESCRIPTION: A simple import statement for the ExamplesOverview component used to display React Flow examples in the documentation page.\nSOURCE: https://github.com/xyflow/web/blob/main/sites/reactflow.dev/src/app/(content-pages)/examples/page.mdx#2025-04-23_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport { ExamplesOverview } from '@/components/examples-overview';\n```\n\n----------------------------------------\n\nTITLE: Exporting ResizeControlVariant Type in Svelte Flow\nDESCRIPTION: Fix for correctly exporting ResizeControlVariant as a value type for resize control functionality.\nSOURCE: https://github.com/xyflow/web/blob/main/sites/svelteflow.dev/src/content/whats-new/2025-01-15.mdx#2025-04-23_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nexport type ResizeControlVariant = 'value';\n```\n\n----------------------------------------\n\nTITLE: Creating Copy Action for Node Header - React Flow - TypeScript\nDESCRIPTION: Defines a custom copy action component for node headers, again utilizing React.forwardRef for ref support, and extracting the current node's ID through useNodeId. The component accepts a customizable onClick prop that receives the node ID and event, enabling flexible handling of copy actions. Expected input is an optional onClick handler, and the button triggers this handler only if both it and the node ID exist. Dependencies include React, NodeHeaderAction, Copy icon, and useNodeId.\nSOURCE: https://github.com/xyflow/web/blob/main/sites/reactflow.dev/src/content/components/nodes/node-header.mdx#2025-04-23_snippet_1\n\nLANGUAGE: TSX\nCODE:\n```\nexport interface NodeHeaderCopyActionProps\\n  extends Omit<NodeHeaderActionProps, 'onClick'> {\\n  onClick?: (nodeId: string, event: React.MouseEvent) => void;\\n}\\n\\n/**\\n * A copy action button that passes the node's id to the `onClick` handler when\\n * clicked.\\n */\\nexport const NodeHeaderCopyAction = React.forwardRef<\\n  HTMLButtonElement,\\n  NodeHeaderCopyActionProps\\n>(({ onClick, ...props }, ref) => {\\n  const id = useNodeId();\\n\\n  const handleClick = useCallback(\\n    (event: React.MouseEvent) => {\\n      if (!onClick || !id) return;\\n\\n      onClick(id, event);\\n    },\\n    [onClick],\\n  );\\n\\n  return (\\n    <NodeHeaderAction\\n      ref={ref}\\n      onClick={handleClick}\\n      variant=\\\"ghost\\\"\\n      {...props}\\n    >\\n      <Copy />\\n    </NodeHeaderAction>\\n  );\\n});\\n\\nNodeHeaderCopyAction.displayName = 'NodeHeaderCopyAction';\n```\n\n----------------------------------------\n\nTITLE: Customizing New Edges with onedgecreate in Svelte Flow\nDESCRIPTION: Introduces the `onedgecreate` function callback. This allows developers to intercept the creation of a new edge, enabling the assignment of a custom ID or other attributes before the edge is added to the flow state.\nSOURCE: https://github.com/xyflow/web/blob/main/sites/svelteflow.dev/src/content/whats-new/2023-12-13.mdx#2025-04-23_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nonedgecreate\n```\n\n----------------------------------------\n\nTITLE: Importing Image Component – React – JavaScript\nDESCRIPTION: This snippet imports the Image component from the 'xy-shared' library, making it available for subsequent use in this Markdown (MDX) file. A required dependency is the 'xy-shared' package, which must export an Image component compatible with React. This line is typically placed at the top of the file to ensure the component can be referenced as a JSX element in the markup that follows.\nSOURCE: https://github.com/xyflow/web/blob/main/sites/reactflow.dev/src/content/whats-new/2023-12-06.mdx#2025-04-23_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport { Image } from 'xy-shared';\n```\n\n----------------------------------------\n\nTITLE: Defining ConnectionLineType Enum in TypeScript for Svelte Flow\nDESCRIPTION: This TypeScript enum defines the available connection line types that can be used with the connectionLineType prop on the SvelteFlow component. It includes Bezier (the default), Straight, Step, SmoothStep, and SimpleBezier types.\nSOURCE: https://github.com/xyflow/web/blob/main/sites/svelteflow.dev/src/content/api-reference/types/connection-line-type.mdx#2025-04-23_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nexport enum ConnectionLineType {\n  Bezier = 'default',\n  Straight = 'straight',\n  Step = 'step',\n  SmoothStep = 'smoothstep',\n  SimpleBezier = 'simplebezier',\n}\n```\n\n----------------------------------------\n\nTITLE: Importing React Components - JSX\nDESCRIPTION: Import statements for React components used in the blog post, including Bleed from nextra, Emoji from xy-ui, and Image from xy-shared.\nSOURCE: https://github.com/xyflow/web/blob/main/sites/xyflow.com/src/content/react-flow-fall-2022.mdx#2025-04-23_snippet_0\n\nLANGUAGE: JSX\nCODE:\n```\nimport { Bleed } from 'nextra/components';\nimport { Emoji } from '@xyflow/xy-ui';\nimport { Image } from 'xy-shared';\n```\n\n----------------------------------------\n\nTITLE: Providing Container Dimensions for React Flow (JSX)\nDESCRIPTION: This snippet provides a solution to the missing dimensions warning. The parent `div` wrapping the `<ReactFlow>` component is given an explicit `height` style (e.g., `style={{ height: 800 }}`). This allows React Flow to measure its container and render correctly.\nSOURCE: https://github.com/xyflow/web/blob/main/sites/reactflow.dev/src/content/learn/troubleshooting/index.mdx#2025-04-23_snippet_10\n\nLANGUAGE: jsx\nCODE:\n```\nimport { ReactFlow } from '@xyflow/react';\n\nfunction Flow(props) {\n  return (\n    <div style={{ height: 800 }}>\n      <ReactFlow {...props} />\n    </div>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Importing Examples Overview Component in React/MDX\nDESCRIPTION: Imports the ExamplesOverview component from the components directory to display React Flow examples.\nSOURCE: https://github.com/xyflow/web/blob/main/sites/svelteflow.dev/src/content/examples/index.mdx#2025-04-23_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport { ExamplesOverview } from '@/components/examples-overview';\n```\n\n----------------------------------------\n\nTITLE: Defining Edge Type Variants in TypeScript for Svelte Flow\nDESCRIPTION: Defines the Edge type as a union of three possible edge variants: DefaultEdge, SmoothStepEdgeType, and BezierEdgeType. Each variant accepts a generic type parameter T for custom data.\nSOURCE: https://github.com/xyflow/web/blob/main/sites/svelteflow.dev/src/content/api-reference/types/edge.mdx#2025-04-23_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nexport type Edge<T> =\n  | DefaultEdge<T>\n  | SmoothStepEdgeType<T>\n  | BezierEdgeType<T>;\n```\n\n----------------------------------------\n\nTITLE: Store Implementation for Node Updates\nDESCRIPTION: Zustand store implementation with updateNode action for handling partial data updates to nodes.\nSOURCE: https://github.com/xyflow/web/blob/main/sites/reactflow.dev/src/content/learn/tutorials/react-flow-and-the-web-audio-api.mdx#2025-04-23_snippet_11\n\nLANGUAGE: js\nCODE:\n```\nexport const useStore = createWithEqualityFn((set, get) => ({\n  ...\n\n  updateNode(id, data) {\n    set({\n      nodes: get().nodes.map(node =>\n        node.id === id\n          ? { ...node, data: { ...node.data, ...data } }\n          : node\n      )\n    });\n  },\n\n  ...\n}));\n```\n\n----------------------------------------\n\nTITLE: Rendering Remote Code Viewer Component in React\nDESCRIPTION: This snippet demonstrates how to use the RemoteCodeViewer component to display an example of connection events in React Flow. It specifies the route to the example code and the framework used.\nSOURCE: https://github.com/xyflow/web/blob/main/apps/example-apps/react/examples/interaction/connection-events/README.mdx#2025-04-23_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\n<RemoteCodeViewer\n  route=\"examples/interaction/connection-events\"\n  framework=\"react\"\n/>\n```\n\n----------------------------------------\n\nTITLE: Rendering ApiReferenceSummary Component for Components in JSX\nDESCRIPTION: This code snippet renders the ApiReferenceSummary component, passing 'components' as the category prop. This will generate a summary of the API reference specifically for the components category.\nSOURCE: https://github.com/xyflow/web/blob/main/sites/svelteflow.dev/src/content/api-reference/components/index.mdx#2025-04-23_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\n<ApiReferenceSummary category=\"components\" />\n```\n\n----------------------------------------\n\nTITLE: Refactor: CSS Variable Prefixing\nDESCRIPTION: Internal CSS variables used by Svelte Flow have been prefixed with `xy-` for better namespacing and to avoid potential conflicts with user-defined or other library variables.\nSOURCE: https://github.com/xyflow/web/blob/main/sites/svelteflow.dev/src/content/whats-new/2023-12-13.mdx#2025-04-23_snippet_8\n\nLANGUAGE: css\nCODE:\n```\n\"xy-\"\n```\n\n----------------------------------------\n\nTITLE: Rendering the Button Handle Component Viewer in JSX\nDESCRIPTION: This JSX snippet renders the 'UiComponentViewer' component, passing 'button-handle' as the id property. This is used to dynamically display the actual 'Button Handle' UI component within the documentation page, likely fetching or referencing it based on the provided id.\nSOURCE: https://github.com/xyflow/web/blob/main/sites/reactflow.dev/src/content/components/handles/button-handle.mdx#2025-04-23_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\n<UiComponentViewer id=\"button-handle\" />\n```\n\n----------------------------------------\n\nTITLE: Implementing nowheel Class in Svelte for xyflow/web Custom Node Scroll Containers\nDESCRIPTION: This Svelte snippet shows how to use the 'nowheel' class on a scrollable container within a custom node to disable the default canvas pan behavior when scrolling inside the node.\nSOURCE: https://github.com/xyflow/web/blob/main/sites/svelteflow.dev/src/content/api-reference/types/node-props.mdx#2025-04-23_snippet_2\n\nLANGUAGE: svelte\nCODE:\n```\n<div className=\"nowheel\" style={{ overflow: 'auto' }}>\n  <p>Scrollable content...</p>\n</div>\n```\n\n----------------------------------------\n\nTITLE: Importing API Reference Component in React\nDESCRIPTION: React component import statement for the API reference summary component that displays utility function documentation.\nSOURCE: https://github.com/xyflow/web/blob/main/sites/svelteflow.dev/src/content/api-reference/utils/index.mdx#2025-04-23_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\nimport { ApiReferenceSummary } from 'xy-shared/server';\n```\n\n----------------------------------------\n\nTITLE: Importing RemoteCodeViewer Component in Svelte\nDESCRIPTION: This snippet imports the RemoteCodeViewer component from the xy-shared/server module. It's used to display the code for the elkjs integration example.\nSOURCE: https://github.com/xyflow/web/blob/main/sites/svelteflow.dev/src/content/examples/layout/elkjs.mdx#2025-04-23_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport { RemoteCodeViewer } from 'xy-shared/server';\n```\n\n----------------------------------------\n\nTITLE: Implementing SvelteFlowProvider with SvelteFlow Component\nDESCRIPTION: This snippet demonstrates how to wrap a SvelteFlow component and a Sidebar component with SvelteFlowProvider to share flow state between them. The provider creates a context that allows components like Sidebar to access the flow's state.\nSOURCE: https://github.com/xyflow/web/blob/main/sites/svelteflow.dev/src/content/api-reference/svelte-flow-provider.mdx#2025-04-23_snippet_0\n\nLANGUAGE: svelte\nCODE:\n```\n<script>\nimport { SvelteFlow, SvelteFlowProvider } from '@xyflow/svelte';\n\nimport Sidebar from './Sidebar.svelte';\n</script>\n\n<SvelteFlowProvider>\n  <SvelteFlow nodes={...} edges={...} />\n  <Sidebar />\n</SvelteFlowProvider>\n```\n\n----------------------------------------\n\nTITLE: Rendering Remote Code Viewer for Custom Connection Line in JSX\nDESCRIPTION: This code renders a RemoteCodeViewer component to display a Svelte example of a custom Connection Line implementation. It specifies the route to the example and the framework used.\nSOURCE: https://github.com/xyflow/web/blob/main/sites/svelteflow.dev/src/content/examples/edges/custom-connectionline.mdx#2025-04-23_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\n<RemoteCodeViewer\n  route=\"examples/edges/custom-connectionline\"\n  framework=\"svelte\"\n/>\n```\n\n----------------------------------------\n\nTITLE: Installing Svelte Flow Alpha Package - npm - Bash\nDESCRIPTION: Demonstrates the command for installing the alpha version of Svelte Flow (version 1.0) via npm. This snippet should be run in a terminal within an existing Node.js project and requires npm to be installed. The command will pull the next (alpha) release from the @xyflow/svelte package and update the project's dependencies. No input parameters are required; successful execution will update your package.json file.\nSOURCE: https://github.com/xyflow/web/blob/main/sites/xyflow.com/src/content/spring-update-2025.mdx#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm install @xyflow/svelte@next\n```\n\n----------------------------------------\n\nTITLE: Defining Pro Options Interface in TypeScript\nDESCRIPTION: Defines the ProOptions TypeScript type with an optional hideAttribution property, allowing customization of whether project attribution is displayed in UI flows. No additional dependencies are required, as it uses basic TypeScript features. The hideAttribution field is a boolean that, when set to true, suppresses the attribution element; its omission defaults to standard behavior, i.e., attribution is shown.\nSOURCE: https://github.com/xyflow/web/blob/main/sites/reactflow.dev/src/content/api-reference/types/pro-options.mdx#2025-04-23_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\ntype ProOptions = {\n  hideAttribution?: boolean;\n};\n```\n\n----------------------------------------\n\nTITLE: Rendering React Flow Example Component\nDESCRIPTION: JSX code that renders a Pro example viewer component for the static server-side generation demo along with a button to open the example in a new tab.\nSOURCE: https://github.com/xyflow/web/blob/main/apps/example-apps/react/examples/misc/static-server-side-generation/README.mdx#2025-04-23_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\n<ProExampleViewer slug=\"static-server-side-generation\" />\n\n<a\n  target=\"_blank\"\n  href={`${process.env.NEXT_PUBLIC_PRO_EXAMPLES_URL}/static-server-side-generation`}\n>\n  <Button variant=\"link\">Open example in a new tab</Button>\n</a>\n```\n\n----------------------------------------\n\nTITLE: Importing RemoteCodeViewer Component in JSX\nDESCRIPTION: This snippet imports the RemoteCodeViewer component from the xy-shared/server module. The component is used to display remote code examples.\nSOURCE: https://github.com/xyflow/web/blob/main/sites/svelteflow.dev/src/content/examples/interaction/validation.mdx#2025-04-23_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport { RemoteCodeViewer } from 'xy-shared/server';\n```\n\n----------------------------------------\n\nTITLE: Rendering Remote Code Viewer for Interaction Props Example in React\nDESCRIPTION: This snippet renders a RemoteCodeViewer component to display an example of interaction props usage in a React-based XY Flow diagram. It specifies the route to the example code and the framework being used.\nSOURCE: https://github.com/xyflow/web/blob/main/apps/example-apps/react/examples/interaction/interaction-props/README.mdx#2025-04-23_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\n<RemoteCodeViewer\n  route=\"examples/interaction/interaction-props\"\n  framework=\"react\"\n/>\n```\n\n----------------------------------------\n\nTITLE: Defining DefaultEdgeOptions Type in TypeScript for Svelte Flow\nDESCRIPTION: TypeScript definition of the DefaultEdgeOptions interface that specifies optional default properties for edges in Svelte Flow. These defaults are applied to new edges when specific properties aren't provided explicitly.\nSOURCE: https://github.com/xyflow/web/blob/main/sites/svelteflow.dev/src/content/api-reference/types/default-edge-options.mdx#2025-04-23_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nexport type DefaultEdgeOptions<T> = {\n  type?: string;\n  animated?: boolean;\n  hidden?: boolean;\n  deletable?: boolean;\n  selectable?: boolean;\n  data?: T;\n  selected?: boolean;\n  markerStart?: string | EdgeMarker;\n  markerEnd?: string | EdgeMarker;\n  zIndex?: number;\n  ariaLabel?: string;\n  interactionWidth?: number;\n};\n```\n\n----------------------------------------\n\nTITLE: Rendering UnusedPropWarning Component in JSX\nDESCRIPTION: This snippet renders an UnusedPropWarning component, likely to display warnings about unused properties in the example.\nSOURCE: https://github.com/xyflow/web/blob/main/sites/svelteflow.dev/src/content/examples/interaction/contextual-zoom.mdx#2025-04-23_snippet_2\n\nLANGUAGE: jsx\nCODE:\n```\n<UnusedPropWarning />\n```\n\n----------------------------------------\n\nTITLE: Defining Viewport Type in TypeScript\nDESCRIPTION: TypeScript type definition for the Viewport object that represents the current view position (x,y) and zoom level within Svelte Flow's coordinate system. This type is used to track where the flow is being displayed and its zoom scale.\nSOURCE: https://github.com/xyflow/web/blob/main/sites/svelteflow.dev/src/content/api-reference/types/viewport.mdx#2025-04-23_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nexport type Viewport = {\n  x: number;\n  y: number;\n  zoom: number;\n};\n```\n\n----------------------------------------\n\nTITLE: Implementing a NodeToolbar in a Custom Svelte Flow Node\nDESCRIPTION: Example of integrating the NodeToolbar component within a custom node in Svelte Flow. The toolbar provides delete, copy, and expand buttons that appear when the node is selected.\nSOURCE: https://github.com/xyflow/web/blob/main/sites/svelteflow.dev/src/content/api-reference/components/node-toolbar.mdx#2025-04-23_snippet_0\n\nLANGUAGE: svelte\nCODE:\n```\n<script lang=\"ts\">\n\timport { NodeToolbar, type NodeProps, Handle, Position } from '@xyflow/svelte';\n\n\ttype $$Props = NodeProps;\n\n\texport let data: $$Props['data'];\n</script>\n\n<NodeToolbar>\n\t<button>delete</button>\n\t<button>copy</button>\n\t<button>expand</button>\n</NodeToolbar>\n<div class=\"node\">\n\t<div>{data.label}</div>\n\t<Handle type=\"target\" position={Position.Left} />\n\t<Handle type=\"source\" position={Position.Right} />\n</div>\n```\n\n----------------------------------------\n\nTITLE: Starting the Development Server with pnpm in Shell\nDESCRIPTION: This snippet shows how to launch the development server for the xyflow website using pnpm. It assumes prerequisites have been installed. Executing this command will start a local dev server (typically on http://localhost:3001), enabling local development and live reload. The command requires no arguments, and the environment must have pnpm configured.\nSOURCE: https://github.com/xyflow/web/blob/main/sites/xyflow.com/README.md#2025-04-23_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\n\\$ pnpm start\\n\n```\n\n----------------------------------------\n\nTITLE: Importing a React Component in Next.js\nDESCRIPTION: This snippet shows the standard import of a React component (QandA) from a relative alias path within a Next.js/React project. It is essential for modular composition of UI blocks—in this case, importing question-and-answer rendering functionality required for subsequent JSX usage. Prerequisite is a module at '@/components/case-study-qa' that exports the QandA component. No inputs, outputs, or configurable parameters; its role is to make the component available in the file.\nSOURCE: https://github.com/xyflow/web/blob/main/sites/reactflow.dev/src/content/pro/case-studies/hubql-case-study.mdx#2025-04-23_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport QandA from '@/components/case-study-qa';\n```\n\n----------------------------------------\n\nTITLE: Installing React Flow via NPM - Bash\nDESCRIPTION: This snippet demonstrates how to install the React Flow library using the npm package manager. It assumes npm is already installed as a dependency manager in your JavaScript/TypeScript project. Running the command adds 'reactflow' to your project's dependencies, making it available for import in source files. No additional parameters are needed, but appropriate Node and npm versions must be installed.\nSOURCE: https://github.com/xyflow/web/blob/main/sites/xyflow.com/src/content/react-flow-v11.mdx#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm install reactflow\n```\n\n----------------------------------------\n\nTITLE: Defining Markdown Frontmatter for Computing Flows Example\nDESCRIPTION: This code snippet defines the frontmatter for the Markdown file, specifying the title and description of the example.\nSOURCE: https://github.com/xyflow/web/blob/main/apps/example-apps/react/examples/interaction/computing-flows/README.mdx#2025-04-23_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n---\ntitle: Computing Flows\ndescription: This examples demonstrates how to use the helpers to handle data flow\n---\n```\n\n----------------------------------------\n\nTITLE: Importing Default Svelte Flow Styles (JavaScript)\nDESCRIPTION: Imports the default Svelte Flow stylesheet (`style.css`) into a JavaScript/Svelte project. This file provides comprehensive styling for nodes, edges, and other components, offering a standard look and feel out-of-the-box.\nSOURCE: https://github.com/xyflow/web/blob/main/sites/svelteflow.dev/src/content/learn/guides/theming.mdx#2025-04-23_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport '@xyflow/svelte/dist/style.css';\n```\n\n----------------------------------------\n\nTITLE: Creating a Custom Number Input Node in React Flow (JSX)\nDESCRIPTION: This snippet defines a custom React Flow node component named `NumberInput`. It uses React's `useState` to manage the internal state of a controlled number input field and `useCallback` for the change handler. The input is restricted to integers between 0 and 255. The node displays a label (passed via `data.label`) and the input field. It includes a single source handle (`Position.Right`) to output the number value.\nSOURCE: https://github.com/xyflow/web/blob/main/sites/reactflow.dev/src/content/learn/advanced-use/computing-flows.mdx#2025-04-23_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport { useCallback, useState } from 'react';\nimport { Handle, Position } from '@xyflow/react';\n\nfunction NumberInput({ id, data }) {\n  const [number, setNumber] = useState(0);\n\n  const onChange = useCallback((evt) => {\n    const cappedNumber = Math.round(\n      Math.min(255, Math.max(0, evt.target.value)),\n    );\n    setNumber(cappedNumber);\n  }, []);\n\n  return (\n    <div className=\"number-input\">\n      <div>{data.label}</div>\n      <input\n        id={`number-${id}`}\n        name=\"number\"\n        type=\"number\"\n        min=\"0\"\n        max=\"255\"\n        onChange={onChange}\n        className=\"nodrag\"\n        value={number}\n      />\n      <Handle type=\"source\" position={Position.Right} />\n    </div>\n  );\n}\n\nexport default NumberInput;\n```\n\n----------------------------------------\n\nTITLE: Embedding Svelte Code Example using RemoteCodeViewer in JSX\nDESCRIPTION: Uses the `RemoteCodeViewer` component to embed and display an interactive Svelte code example located at 'examples/styling/turbo-flow'. It specifies the framework as 'svelte' and includes external CSS resources (Fira font) via `sandpackOptions`, demonstrating how code examples are integrated into the documentation.\nSOURCE: https://github.com/xyflow/web/blob/main/sites/svelteflow.dev/src/content/examples/styling/turbo-flow.mdx#2025-04-23_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\n<RemoteCodeViewer\n  route=\"examples/styling/turbo-flow\"\n  framework=\"svelte\"\n  sandpackOptions={{\n    externalResources: ['https://code.cdn.mozilla.net/fonts/fira.css'],\n  }}\n/>\n```\n\n----------------------------------------\n\nTITLE: Handling npm Typosquatting Error Output (Shell)\nDESCRIPTION: This text represents the error message received from npm after attempting to publish the 'reactflow' package. It indicates that the publish operation failed due to npm's typosquatting protection feature, which flagged the name 'reactflow' as being too similar to the existing 'react-flow' package. This check was triggered because the original 'reactflow' version had been unpublished.\nSOURCE: https://github.com/xyflow/web/blob/main/sites/xyflow.com/src/content/reactflow-npm-package-name.mdx#2025-04-23_snippet_2\n\nLANGUAGE: sh\nCODE:\n```\n“Package name too similar to existing package react-flow”\n```\n\n----------------------------------------\n\nTITLE: Importing Remote Code Viewer Component\nDESCRIPTION: Demonstrates how to import and use the RemoteCodeViewer component for displaying Svelte Flow styling examples.\nSOURCE: https://github.com/xyflow/web/blob/main/sites/svelteflow.dev/src/content/examples/styling/base-style.mdx#2025-04-23_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport { RemoteCodeViewer } from 'xy-shared/server';\n\n<RemoteCodeViewer\n  route=\"examples/styling/base-style\"\n  framework=\"svelte\"\n/>\n```\n\n----------------------------------------\n\nTITLE: Installing Dependencies with pnpm in Shell\nDESCRIPTION: This snippet demonstrates how to install all required dependencies for the xyflow web project using pnpm. It must be run from the project root where the package.json file is present. No additional parameters are necessary. Running this command ensures all package dependencies are fetched and set up correctly for development or production build steps.\nSOURCE: https://github.com/xyflow/web/blob/main/sites/xyflow.com/README.md#2025-04-23_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\n\\$ pnpm install\\n\n```\n\n----------------------------------------\n\nTITLE: Importing Components for Contextual Zoom Example in JSX\nDESCRIPTION: This snippet imports necessary components for the contextual zoom example, including a RemoteCodeViewer for displaying code and an UnusedPropWarning component.\nSOURCE: https://github.com/xyflow/web/blob/main/sites/svelteflow.dev/src/content/examples/interaction/contextual-zoom.mdx#2025-04-23_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport { RemoteCodeViewer } from 'xy-shared/server';\nimport UnusedPropWarning from '@/components/unused-prop-warning';\n```\n\n----------------------------------------\n\nTITLE: Importing Nextra and Shared Components in JSX\nDESCRIPTION: This snippet imports specific components (`Bleed` from 'nextra/components' and `Image`, `YoutubeEmbed` from 'xy-shared') for use within a React/Next.js based page. `Bleed` is likely used for layout adjustments, while `Image` and `YoutubeEmbed` are custom components for rendering media.\nSOURCE: https://github.com/xyflow/web/blob/main/sites/xyflow.com/src/content/spring-update-2023.mdx#2025-04-23_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport { Bleed } from 'nextra/components';\nimport { Image, YoutubeEmbed } from 'xy-shared';\n```\n\n----------------------------------------\n\nTITLE: Importing UiComponentViewer Component in MDX (JavaScript)\nDESCRIPTION: This JavaScript import statement brings the `UiComponentViewer` component from a specified local MDX file (`@/components/ui-component-viewer.mdx`) into the current MDX document's scope. This component is intended to render UI elements or examples within the documentation page. It assumes the path alias `@` is correctly configured in the project setup.\nSOURCE: https://github.com/xyflow/web/blob/main/sites/reactflow.dev/src/content/components/nodes/annotation-node.mdx#2025-04-23_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport UiComponentViewer from '@/components/ui-component-viewer.mdx';\n```\n\n----------------------------------------\n\nTITLE: Rendering Stress Test Example with RemoteCodeViewer in JSX\nDESCRIPTION: This code snippet uses the RemoteCodeViewer component to display a stress test example for XY Flow. It loads a Svelte implementation of a flow with 450 nodes and edges from a remote source.\nSOURCE: https://github.com/xyflow/web/blob/main/sites/svelteflow.dev/src/content/examples/nodes/stress.mdx#2025-04-23_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\n<RemoteCodeViewer\n  route=\"examples/nodes/stress\"\n  framework=\"svelte\"\n/>\n```\n\n----------------------------------------\n\nTITLE: Embedding Remote React Code Example using JSX\nDESCRIPTION: This JSX snippet uses the `Bleed` and `RemoteCodeViewer` components (likely from Nextra and xy-shared libraries) to display a remote code example relevant to React Flow Devtools. It specifies the route (`learn/devtools`) and framework (`react`) for the code to be fetched and rendered, explicitly hiding the editor interface (`showEditor={false}`).\nSOURCE: https://github.com/xyflow/web/blob/main/sites/xyflow.com/src/content/update-react-flow-12-svelte-flow-1.mdx#2025-04-23_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\n<Bleed>\n  <RemoteCodeViewer\n    route=\"learn/devtools\"\n    framework=\"react\"\n    showEditor={false}\n  />\n</Bleed>\n```\n\n----------------------------------------\n\nTITLE: Importing Svelte Flow and TailwindCSS Styles - JavaScript\nDESCRIPTION: This JavaScript snippet demonstrates the ordering of style imports for a project using Svelte Flow with TailwindCSS. It first imports Svelte Flow's base stylesheet, followed by TailwindCSS's entry point, which is necessary if you want to override or layer custom styles on top of defaults. This is critical for ensuring that Tailwind utility classes take precedence and are properly applied when styling nodes and edges. The imports should be placed in your root JavaScript or main entry file. Dependencies: '@xyflow/svelte/dist/style.css' and 'tailwind.css'.\nSOURCE: https://github.com/xyflow/web/blob/main/sites/svelteflow.dev/src/content/learn/guides/theming.mdx#2025-04-23_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nimport '@xyflow/svelte/dist/style.css';\nimport 'tailwind.css';\n```\n\n----------------------------------------\n\nTITLE: Creating a Custom Edge with BaseEdge in Svelte\nDESCRIPTION: This snippet demonstrates how to create a custom edge component using the BaseEdge component from XY Flow for Svelte. It shows how to calculate a straight path between nodes and pass that path along with other props to the BaseEdge component.\nSOURCE: https://github.com/xyflow/web/blob/main/sites/svelteflow.dev/src/content/api-reference/components/base-edge.mdx#2025-04-23_snippet_0\n\nLANGUAGE: svelte\nCODE:\n```\n<script lang=\"ts\">\n  import { BaseEdge, getStraightPath } from '@xyflow/svelte';\n\n  const [edgePath] = getStraightPath({\n    sourceX,\n    sourceY,\n    targetX,\n    targetY,\n  });\n</script>\n\n<BaseEdge path={edgePath} {...$$props} />\n```\n\n----------------------------------------\n\nTITLE: Creating Color Picker Node Component in Svelte\nDESCRIPTION: Implements a custom node component with color picker functionality using Svelte Flow's Handle component. The component includes target and source handles for connections and a color input field that updates a writable store.\nSOURCE: https://github.com/xyflow/web/blob/main/sites/svelteflow.dev/src/content/learn/guides/custom-nodes.mdx#2025-04-23_snippet_0\n\nLANGUAGE: svelte\nCODE:\n```\n<script lang=\"ts\">\n  import { Handle, Position, type NodeProps } from '@xyflow/svelte';\n  import type { Writable } from 'svelte/store';\n\n  type $$Props = NodeProps;\n\n  export let data: { color: Writable<string> };\n\n  const { color } = data;\n</script>\n\n<div class=\"colorpicker\">\n  <Handle type=\"target\" position={Position.Left} />\n  <div>\n    color: <strong>{$color}</strong>\n  </div>\n  <input\n    class=\"nodrag\"\n    type=\"color\"\n    on:input={(evt) => data.color.set(evt.target?.value)}\n    value={$color}\n  />\n  <Handle type=\"source\" position={Position.Right} />\n</div>\n```\n\n----------------------------------------\n\nTITLE: Importing RemoteCodeViewer Component in React (JavaScript/TypeScript)\nDESCRIPTION: This snippet demonstrates how to import the RemoteCodeViewer component from the 'xy-shared/server' package for use within a React application. The purpose of this import is to enable embedding interactive or remote code examples directly within documentation or web views. The main dependency is the 'xy-shared/server' NPM package, which must be installed beforehand. The import statement is compatible with both JavaScript and TypeScript React projects. There are no inputs or outputs at this stage; it's a preparatory step for using the component elsewhere in the file.\nSOURCE: https://github.com/xyflow/web/blob/main/sites/reactflow.dev/src/content/whats-new/2024-05-06.mdx#2025-04-23_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport { RemoteCodeViewer } from 'xy-shared/server';\n```\n\n----------------------------------------\n\nTITLE: Defining Position Enum in TypeScript for xyflow Edge and Handle Placement\nDESCRIPTION: This code snippet defines the Position enum in TypeScript, used in the xyflow web framework. It specifies four cardinal directions (Left, Top, Right, Bottom) as string values, primarily used for positioning edges and handles within the framework.\nSOURCE: https://github.com/xyflow/web/blob/main/sites/svelteflow.dev/src/content/api-reference/types/position.mdx#2025-04-23_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nexport enum Position {\n  Left = 'left',\n  Top = 'top',\n  Right = 'right',\n  Bottom = 'bottom',\n}\n```\n\n----------------------------------------\n\nTITLE: Defining XYPosition Type in TypeScript\nDESCRIPTION: Defines a TypeScript type for representing 2D coordinates with x and y number properties. This type is used as a core data structure for positioning elements within XYFlow.\nSOURCE: https://github.com/xyflow/web/blob/main/sites/svelteflow.dev/src/content/api-reference/types/xy-position.mdx#2025-04-23_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nexport type XYPosition = {\n  x: number;\n  y: number;\n};\n```\n\n----------------------------------------\n\nTITLE: Styling Custom Node Elements (CSS)\nDESCRIPTION: This CSS snippet styles the wrapper (`.inputWrapper`) and the drag handle (`.dragHandle`) elements within the custom `MindMapNode` component. It uses flexbox to arrange the elements and defines basic dimensions and appearance for the drag handle.\nSOURCE: https://github.com/xyflow/web/blob/main/sites/reactflow.dev/src/content/learn/tutorials/mind-map-app-with-react-flow.mdx#2025-04-23_snippet_21\n\nLANGUAGE: css\nCODE:\n```\n```css\n.inputWrapper {\n  display: flex;\n  height: 20px;\n  z-index: 1;\n  position: relative;\n}\n\n.dragHandle {\n  background: transparent;\n  width: 14px;\n  height: 100%;\n  margin-right: 4px;\n  display: flex;\n  align-items: center;\n}\n\n.input {\n  border: none;\n  padding: 0 2px;\n  border-radius: 1px;\n  font-weight: 700;\n  background: transparent;\n  height: 100%;\n  color: #222;\n}\n```\n```\n\n----------------------------------------\n\nTITLE: Initializing React Flow Component with Force Layout\nDESCRIPTION: This function component sets up the React Flow graph with force-directed layout. It manages node and edge states, handles connections, and applies the force simulation to position nodes.\nSOURCE: https://github.com/xyflow/web/blob/main/apps/example-apps/react/examples/layout/force-layout/README.mdx#2025-04-23_snippet_2\n\nLANGUAGE: JavaScript\nCODE:\n```\nexport default function Flow() {\n  const [nodes, setNodes, onNodesChange] = useNodesState(initialNodes);\n  const [edges, setEdges, onEdgesChange] = useEdgesState(initialEdges);\n\n  const onConnect = useCallback(\n    (params) => setEdges((eds) => addEdge(params, eds)),\n    [setEdges]\n  );\n\n  const onInit = useCallback(() => {\n    const simulation = forceSimulation(nodes)\n      .force('charge', forceManyBody().strength(-1000))\n      .force('x', forceX().strength(0.05))\n      .force('y', forceY().strength(0.05))\n      .force(\n        'link',\n        forceLink(edges)\n          .id((d) => d.id)\n          .distance(100)\n          .strength(1)\n      )\n      .on('tick', () => {\n        setNodes([...simulation.nodes()]);\n      });\n\n    setTimeout(() => simulation.stop(), 1000);\n  }, [nodes, edges]);\n\n  return (\n    <ReactFlow\n      nodes={nodes}\n      edges={edges}\n      onNodesChange={onNodesChange}\n      onEdgesChange={onEdgesChange}\n      onConnect={onConnect}\n      onInit={onInit}\n      nodeTypes={nodeTypes}\n      fitView\n    >\n      <MiniMap />\n      <Controls />\n      <Background />\n    </ReactFlow>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Importing Documentation Components in MDX/JS\nDESCRIPTION: Imports the `RemoteCodeViewer` and `UnusedPropWarning` components required for rendering specific parts of this documentation page. `RemoteCodeViewer` is used to display interactive code examples, and `UnusedPropWarning` likely shows warnings related to component usage within the docs.\nSOURCE: https://github.com/xyflow/web/blob/main/sites/svelteflow.dev/src/content/examples/styling/turbo-flow.mdx#2025-04-23_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport { RemoteCodeViewer } from 'xy-shared/server';\nimport UnusedPropWarning from '@/components/unused-prop-warning';\n```\n\n----------------------------------------\n\nTITLE: Using ApiReferenceSummary Component (JSX/MDX)\nDESCRIPTION: This snippet demonstrates the usage of the imported `ApiReferenceSummary` component within the MDX content. It renders the component, passing the string \"utils\" to the `category` prop. This instructs the component to display API documentation summaries specifically associated with the 'utils' category. Requires the `ApiReferenceSummary` component to be imported and available in the current scope.\nSOURCE: https://github.com/xyflow/web/blob/main/sites/reactflow.dev/src/content/api-reference/utils/index.mdx#2025-04-23_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\n<ApiReferenceSummary category=\"utils\" />\n```\n\n----------------------------------------\n\nTITLE: Importing UiComponentViewer in MDX\nDESCRIPTION: This MDX code imports the `UiComponentViewer` component from the specified relative path (`@/components/ui-component-viewer.mdx`). This component is likely used to render UI examples or documentation within the MDX file. It depends on the project's MDX setup and the existence of the target component file.\nSOURCE: https://github.com/xyflow/web/blob/main/sites/reactflow.dev/src/content/components/controls/zoom-slider.mdx#2025-04-23_snippet_0\n\nLANGUAGE: mdx\nCODE:\n```\nimport UiComponentViewer from '@/components/ui-component-viewer.mdx';\n```\n\n----------------------------------------\n\nTITLE: Displaying Image using Custom Image Component in JSX\nDESCRIPTION: This JSX snippet shows how to display an image using a custom `Image` component, likely part of the `xy-shared` library imported earlier. It specifies the image source (`src`), alternative text (`alt`), `width`, and `height` as props. This is used within the blog post to visually complement the text about the team's office move.\nSOURCE: https://github.com/xyflow/web/blob/main/sites/xyflow.com/src/content/spring-update-2023.mdx#2025-04-23_snippet_2\n\nLANGUAGE: jsx\nCODE:\n```\n<Image\n  src=\"/img/blog/2023-spring/new-room.jpeg\"\n  alt=\"a white brick wall with binders and a printer on the wooden floor in front of it.\"\n  width={600}\n  height={800}\n/>\n```\n\n----------------------------------------\n\nTITLE: Including Tailwind Directives (CSS)\nDESCRIPTION: Replaces the content of `src/index.css` with the standard Tailwind CSS directives (`@tailwind base`, `@tailwind components`, `@tailwind utilities`). These directives inject Tailwind's styles into the project's CSS.\nSOURCE: https://github.com/xyflow/web/blob/main/sites/reactflow.dev/src/content/learn/tutorials/getting-started-with-react-flow-components.mdx#2025-04-23_snippet_4\n\nLANGUAGE: css\nCODE:\n```\n@tailwind base;\n@tailwind components;\n@tailwind utilities;\n```\n\n----------------------------------------\n\nTITLE: Rendering RemoteCodeViewer for Validation Example in JSX\nDESCRIPTION: This code renders the RemoteCodeViewer component to display a remote code example for node connection validation. It specifies the route to the example and the framework used.\nSOURCE: https://github.com/xyflow/web/blob/main/sites/svelteflow.dev/src/content/examples/interaction/validation.mdx#2025-04-23_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\n<RemoteCodeViewer route=\"examples/interaction/validation\" framework=\"svelte\" />\n```\n\n----------------------------------------\n\nTITLE: Interactive MiniMap Configuration in Svelte Flow\nDESCRIPTION: Example showing how to make the MiniMap interactive by enabling panning and zooming functionality through props configuration.\nSOURCE: https://github.com/xyflow/web/blob/main/sites/svelteflow.dev/src/content/api-reference/components/mini-map.mdx#2025-04-23_snippet_1\n\nLANGUAGE: svelte\nCODE:\n```\n<script lang=\"ts\">\n  import { writable } from 'svelte/store';\n  import { SvelteFlow, MiniMap } from '@xyflow/svelte';\n\n  const nodes = writable([]);\n  const edges = writable([]);\n</script>\n\n<SvelteFlow nodes={nodes} edges={edges}>\n  <MiniMap pannable zoomable />\n</SvelteFlow>\n```\n\n----------------------------------------\n\nTITLE: Typing useReactFlow Hook with CustomNodeType and CustomEdgeType (React, TypeScript)\nDESCRIPTION: This snippet shows how to call the useReactFlow hook using generic type arguments to specify the custom types of nodes and edges when working in TypeScript. It helps ensure type safety and better developer experience by enforcing the structure of nodes and edges throughout your application. Requires TypeScript, custom type definitions (CustomNodeType, CustomEdgeType), and the @xyflow/react package. This approach should be used inside a React component rendered within a ReactFlowProvider or ReactFlow component.\nSOURCE: https://github.com/xyflow/web/blob/main/sites/reactflow.dev/src/content/api-reference/hooks/use-react-flow.mdx#2025-04-23_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\nconst reactFlow = useReactFlow<CustomNodeType, CustomEdgeType>();\n```\n\n----------------------------------------\n\nTITLE: Importing ApiReferenceSummary Component in JSX\nDESCRIPTION: This code snippet imports the ApiReferenceSummary component from the xy-shared/server module. This component is likely used to generate a summary of the API reference for components.\nSOURCE: https://github.com/xyflow/web/blob/main/sites/svelteflow.dev/src/content/api-reference/components/index.mdx#2025-04-23_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport { ApiReferenceSummary } from 'xy-shared/server';\n```\n\n----------------------------------------\n\nTITLE: Updating Preview Screenshots\nDESCRIPTION: Updates all preview screenshots for examples under the /react and /svelte directories.\nSOURCE: https://github.com/xyflow/web/blob/main/apps/example-apps/README.md#2025-04-23_snippet_3\n\nLANGUAGE: markdown\nCODE:\n```\n### `pnpm screenshots`\n```\n\n----------------------------------------\n\nTITLE: Defining Node Parent Relationship in v11 (Old API)\nDESCRIPTION: Example of defining a parent-child relationship between nodes using the `parentNode` attribute in React Flow v11, which holds the ID of the parent node. This attribute is renamed in v12.\nSOURCE: https://github.com/xyflow/web/blob/main/sites/reactflow.dev/src/content/learn/troubleshooting/migrate-to-v12.mdx#2025-04-23_snippet_11\n\nLANGUAGE: javascript\nCODE:\n```\nconst nodes = [\n  // some nodes ...\n  {\n    id: 'xyz-id',\n    position: { x: 0, y: 0 },\n    type: 'default',\n    data: {},\n    parentNode: 'abc-id',\n  },\n];\n```\n\n----------------------------------------\n\nTITLE: Importing API Reference Summary Component in JSX\nDESCRIPTION: This code snippet imports the ApiReferenceSummary component from the 'xy-shared/server' module. It's used to display a summary of the API reference for hooks.\nSOURCE: https://github.com/xyflow/web/blob/main/sites/reactflow.dev/src/content/api-reference/hooks/index.mdx#2025-04-23_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport { ApiReferenceSummary } from 'xy-shared/server';\n```\n\n----------------------------------------\n\nTITLE: React Import Statements for Blog Components\nDESCRIPTION: Import statements for Nextra and shared components used in the blog post layout.\nSOURCE: https://github.com/xyflow/web/blob/main/sites/xyflow.com/src/content/react-flow-components.mdx#2025-04-23_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\nimport { Bleed } from 'nextra/components';\nimport { Embed, Text, Image } from 'xy-shared';\n```\n\n----------------------------------------\n\nTITLE: Embedding YouTube Video using Nextra Components in JSX\nDESCRIPTION: This JSX snippet demonstrates embedding a YouTube video using the `YoutubeEmbed` component, nested within a `Bleed` component from Nextra. The `Bleed` component likely adjusts layout constraints, and `YoutubeEmbed` requires the video `id` ('aUBWE41a900') as a prop. This is used to showcase a resource video within the blog post.\nSOURCE: https://github.com/xyflow/web/blob/main/sites/xyflow.com/src/content/spring-update-2023.mdx#2025-04-23_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\n<Bleed>\n  <YoutubeEmbed id=\"aUBWE41a900\" />\n</Bleed>\n```\n\n----------------------------------------\n\nTITLE: Installing Tailwind CSS Dependencies (Bash)\nDESCRIPTION: Installs Tailwind CSS, PostCSS, and Autoprefixer as development dependencies using npm. These are necessary for setting up the styling framework used by `shadcn/ui` components.\nSOURCE: https://github.com/xyflow/web/blob/main/sites/reactflow.dev/src/content/learn/tutorials/getting-started-with-react-flow-components.mdx#2025-04-23_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nnpm install -D tailwindcss postcss autoprefixer\n```\n\n----------------------------------------\n\nTITLE: Using Unused Prop Warning Component in Svelte\nDESCRIPTION: This snippet shows the usage of the UnusedPropWarning component, which likely displays warnings about unused props in the example.\nSOURCE: https://github.com/xyflow/web/blob/main/sites/svelteflow.dev/src/content/examples/misc/threlte-flow.mdx#2025-04-23_snippet_3\n\nLANGUAGE: svelte\nCODE:\n```\n<UnusedPropWarning />\n```\n\n----------------------------------------\n\nTITLE: Calculating Bezier Edge Center in React Flow v10 (Old API)\nDESCRIPTION: Illustrates how to obtain the path string and the center coordinates (label position) for a Bezier edge in React Flow v10 using `getBezierPath` and the separate `getBezierEdgeCenter` helper functions.\nSOURCE: https://github.com/xyflow/web/blob/main/sites/reactflow.dev/src/content/learn/troubleshooting/migrate-to-v11.mdx#2025-04-23_snippet_5\n\nLANGUAGE: jsx\nCODE:\n```\nimport { getBezierEdgeCenter, getBezierPath } from 'react-flow-renderer';\n\nconst path = getBezierPath(edgeParams);\nconst [centerX, centerY] = getBezierEdgeCenter(params);\n```\n\n----------------------------------------\n\nTITLE: Defining Connection Type in TypeScript\nDESCRIPTION: A TypeScript type definition for the Connection object which represents the minimal description of an Edge between two nodes. It contains source and target identifiers and their corresponding handles.\nSOURCE: https://github.com/xyflow/web/blob/main/sites/svelteflow.dev/src/content/api-reference/types/connection.mdx#2025-04-23_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nexport type Connection = {\n  source: string | null;\n  target: string | null;\n  sourceHandle: string | null;\n  targetHandle: string | null;\n};\n```\n\n----------------------------------------\n\nTITLE: Building the Project with pnpm in Shell\nDESCRIPTION: This snippet builds the xyflow web project for production using pnpm. It compiles the TypeScript/JavaScript application and generates static assets for deployment. To use this, all dependencies must be installed first. The output is typically placed in a build or dist directory, and the command requires no additional environment variables unless custom configuration is defined in the project's build scripts.\nSOURCE: https://github.com/xyflow/web/blob/main/sites/xyflow.com/README.md#2025-04-23_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\n\\$ pnpm build\\n\n```\n\n----------------------------------------\n\nTITLE: Defining Type-Safe Data Edges in XYFlow Using TypeScript\nDESCRIPTION: This snippet shows how to define initial edges in XYFlow where the edge displays a specific key from the source node's data, and uses TypeScript's satisfies predicate for enhanced type safety. The CounterNode type ensures only valid keys of the node's data ('count' in this example) are used. Required dependencies: TypeScript type definitions for Node and DataEdge, appropriate node and edge models for your application. Inputs are arrays of edge configuration objects; output is a type-checked array forbidding invalid key assignments. The approach prevents assignment of keys not present in the node's data type, providing compile-time validation.\nSOURCE: https://github.com/xyflow/web/blob/main/sites/reactflow.dev/src/content/components/edges/data-edge.mdx#2025-04-23_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\ntype CounterNode = Node<{ count: number }>;\n\nconst initialEdges = [\n  {\n    id: 'edge-1',\n    source: 'node-1',\n    target: 'node-2',\n    type: 'dataEdge',\n    data: {\n      key: 'count',\n    } satisfies DataEdge<CounterNode>,\n  },\n];\n```\n\n----------------------------------------\n\nTITLE: Rendering Remote Code Viewer for Simple Floating Edges in Svelte\nDESCRIPTION: This JSX snippet renders the RemoteCodeViewer component, specifying the route to the simple floating edges example and setting the framework to Svelte. It displays the code for the floating edges implementation.\nSOURCE: https://github.com/xyflow/web/blob/main/sites/svelteflow.dev/src/content/examples/edges/simple-floating-edges.mdx#2025-04-23_snippet_1\n\nLANGUAGE: JSX\nCODE:\n```\n<RemoteCodeViewer\n  route=\"examples/edges/simple-floating-edges\"\n  framework=\"svelte\"\n/>\n```\n\n----------------------------------------\n\nTITLE: Importing UiComponentViewer in MDX/JavaScript\nDESCRIPTION: This snippet imports the `UiComponentViewer` component from a specific path (`@/components/ui-component-viewer.mdx`) within the project. This is a standard ES6 import statement used in JavaScript or MDX files to bring in external components or modules.\nSOURCE: https://github.com/xyflow/web/blob/main/sites/reactflow.dev/src/content/components/nodes/base-node.mdx#2025-04-23_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport UiComponentViewer from '@/components/ui-component-viewer.mdx';\n```\n\n----------------------------------------\n\nTITLE: Using getConnectedEdges with XYFlow Svelte\nDESCRIPTION: Example showing how to import and use the getConnectedEdges utility function to find edges connecting specified nodes. The function takes an array of nodes and all edges as input and returns an array of edges that connect any of the given nodes together.\nSOURCE: https://github.com/xyflow/web/blob/main/sites/svelteflow.dev/src/content/api-reference/utils/get-connected-edges.mdx#2025-04-23_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport { getConnectedEdges } from '@xyflow/svelte';\n\nconst nodes = [];\nconst edges = [];\n\nconst connectedEdges = getConnectedEdges(nodes, edges);\n```\n\n----------------------------------------\n\nTITLE: Embedding Component Viewer in React Markdown - JavaScript\nDESCRIPTION: This snippet shows a JSX-style embedding of the UiComponentViewer within a Markdown file. It is used to render the node status indicator component with a specified id, facilitating demonstration or customization within the documentation. The required dependency is the UiComponentViewer component, and the id parameter specifies which component instance to display.\nSOURCE: https://github.com/xyflow/web/blob/main/sites/reactflow.dev/src/content/components/nodes/node-status-indicator.mdx#2025-04-23_snippet_1\n\nLANGUAGE: JavaScript\nCODE:\n```\n<UiComponentViewer id=\"node-status-indicator\" />\n```\n\n----------------------------------------\n\nTITLE: Installing Components with shadcn CLI\nDESCRIPTION: Commands for initializing shadcn and adding new React Flow components using the CLI\nSOURCE: https://github.com/xyflow/web/blob/main/apps/ui-components/README.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpx shadcn init\nnpx shadcn add http://ui.reactflow.dev/<component-name>.json\n```\n\n----------------------------------------\n\nTITLE: Creating Styled Image Captions using JSX and Tailwind CSS in MDX\nDESCRIPTION: Uses standard HTML `div` elements styled with Tailwind CSS utility classes (`text-center`, `text-gray-500`) within JSX to create captions for images in an MDX document. These snippets demonstrate centering text, applying a gray color, and sometimes including hyperlinks (`<a>`) within the caption.\nSOURCE: https://github.com/xyflow/web/blob/main/sites/xyflow.com/src/content/why-svelte-flow.mdx#2025-04-23_snippet_3\n\nLANGUAGE: jsx\nCODE:\n```\n<div className=\"text-center text-gray-500\">\n  Our first project with Svelte in 2020. [live\n  demo](https://www.korodrogerie.de/news/blog/interaktive-karte)\n</div>\n```\n\nLANGUAGE: jsx\nCODE:\n```\n<div className=\"text-center text-gray-500\">\n  Data from [State of JavaScript 2022\n  survey](https://2022.stateofjs.com/en-US/libraries/front-end-frameworks/)\n</div>\n```\n\nLANGUAGE: jsx\nCODE:\n```\n<div className=\"text-center text-gray-500\">\n  Svelte Flow prototype after a few weeks of work\n</div>\n```\n\n----------------------------------------\n\nTITLE: Generating Tailwind Configuration Files (Bash)\nDESCRIPTION: Initializes Tailwind CSS in the project by creating the `tailwind.config.js` and `postcss.config.js` configuration files using the `tailwindcss` CLI. The `-p` flag also generates the PostCSS config.\nSOURCE: https://github.com/xyflow/web/blob/main/sites/reactflow.dev/src/content/learn/tutorials/getting-started-with-react-flow-components.mdx#2025-04-23_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nnpx tailwindcss init -p\n```\n\n----------------------------------------\n\nTITLE: Importing Remote Code Viewer Component for React Flow Sub Flow Example\nDESCRIPTION: This snippet demonstrates how to import and use a RemoteCodeViewer component to display a code example for sub flows in React Flow. It specifies the route to the example code and the framework being used.\nSOURCE: https://github.com/xyflow/web/blob/main/apps/example-apps/react/examples/layout/sub-flows/README.mdx#2025-04-23_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n<RemoteCodeViewer route=\"examples/layout/sub-flows\" framework=\"react\" />\n```\n\n----------------------------------------\n\nTITLE: Fix: Background Component bgColor Prop\nDESCRIPTION: Corrects a bug where the `bgColor` prop passed to the Background component was not applying the specified background color. The prop now works as intended for customizing the background appearance.\nSOURCE: https://github.com/xyflow/web/blob/main/sites/svelteflow.dev/src/content/whats-new/2023-12-13.mdx#2025-04-23_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\nbgColor\n```\n\n----------------------------------------\n\nTITLE: Defining ColorMode Type in TypeScript\nDESCRIPTION: This TypeScript code defines a type called ColorMode that can have one of three string values: 'light', 'dark', or 'system'. This type is likely used for theme handling in the xyflow/web project.\nSOURCE: https://github.com/xyflow/web/blob/main/sites/svelteflow.dev/src/content/api-reference/types/color-mode.mdx#2025-04-23_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nexport type ColorMode = 'light' | 'dark' | 'system';\n```\n\n----------------------------------------\n\nTITLE: Rendering UiComponentViewer in MDX/JSX\nDESCRIPTION: This snippet uses JSX syntax to render the imported `UiComponentViewer` component. It passes an `id` prop with the value \"base-node\", which likely serves to identify or configure this specific instance of the component viewer, possibly linking it to the 'Base Node' documentation section.\nSOURCE: https://github.com/xyflow/web/blob/main/sites/reactflow.dev/src/content/components/nodes/base-node.mdx#2025-04-23_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\n<UiComponentViewer id=\"base-node\" />\n```\n\n----------------------------------------\n\nTITLE: Example Markdown Frontmatter Configuration\nDESCRIPTION: Frontmatter configuration for the feature overview documentation page defining the title and description.\nSOURCE: https://github.com/xyflow/web/blob/main/apps/example-apps/react/examples/misc/overview/README.mdx#2025-04-23_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n---\ntitle: Feature Overview\ndescription: The most used features of React Flow - controls, MiniMap, node types, edge types, edge labels, and custom styling.\n---\n```\n\n----------------------------------------\n\nTITLE: Importing Remote Code Viewer Component in JSX\nDESCRIPTION: Demonstrates importing and using a RemoteCodeViewer component to display horizontal flow examples. The component loads remote code from examples/layout/horizontal-flow route for the Svelte framework.\nSOURCE: https://github.com/xyflow/web/blob/main/sites/svelteflow.dev/src/content/examples/layout/horizontal-flow.mdx#2025-04-23_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport { RemoteCodeViewer } from 'xy-shared/server';\n\n<RemoteCodeViewer route=\"examples/layout/horizontal-flow\" framework=\"svelte\" />\n```\n\n----------------------------------------\n\nTITLE: Starting xyflow Development Server\nDESCRIPTION: Command to start the development server which runs on http://localhost:3002.\nSOURCE: https://github.com/xyflow/web/blob/main/sites/reactflow.dev/README.md#2025-04-23_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n$ pnpm start\n```\n\n----------------------------------------\n\nTITLE: Configuring Blog Post Metadata using YAML Frontmatter\nDESCRIPTION: Defines metadata (title, htmlTitle, intro, date, authors, tags, image details) for an MDX blog post using YAML frontmatter. This data is typically processed by a static site generator or framework (like Next.js with MDX) to render the page correctly and organize content.\nSOURCE: https://github.com/xyflow/web/blob/main/sites/xyflow.com/src/content/why-svelte-flow.mdx#2025-04-23_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n---\ntitle: 'Why Svelte Flow?'\nhtmlTitle: 'Why <span style=\"font-style: italic;\">Svelte</span> Flow?'\nintro: 'We receive so many requests of people asking if React Flow will be ported to their favorite front-end framework, and we stuck with React until now.'\ndate: 15 November 2023\nauthors: ['moritz', 'john']\ntags: ['svelte-flow']\nimage: '/img/blog/2023-why-svelte/svelteflow.png'\nimageWidth: 1200\nimageHeight: 640\n---\n```\n\n----------------------------------------\n\nTITLE: Installing Data Edge Component via shadcn CLI (Bash)\nDESCRIPTION: This command uses the shadcn CLI to add the `data-edge` component from the React Flow UI registry (ui.reactflow.dev) to the project. This pre-built edge component can display data from its source node directly on the edge label.\nSOURCE: https://github.com/xyflow/web/blob/main/sites/reactflow.dev/src/content/learn/tutorials/getting-started-with-react-flow-components.mdx#2025-04-23_snippet_18\n\nLANGUAGE: bash\nCODE:\n```\nnpx shadcn@latest add https://ui.reactflow.dev/data-edge\n```\n\n----------------------------------------\n\nTITLE: Breaking Change: Handle Component Event Handling in Svelte Flow\nDESCRIPTION: Version 0.0.29 introduces a breaking change for event handling on the `<Handle />` component. The previous `on:connect`, `on:connectstart`, and `on:connectend` event directives are replaced by the `onconnect`, `onconnectstart`, and `onconnectend` props/callbacks. Forwarding events using the `on:` syntax is no longer necessary.\nSOURCE: https://github.com/xyflow/web/blob/main/sites/svelteflow.dev/src/content/whats-new/2023-12-13.mdx#2025-04-23_snippet_4\n\nLANGUAGE: svelte\nCODE:\n```\non:connect\n```\n\nLANGUAGE: svelte\nCODE:\n```\non:connectstart\n```\n\nLANGUAGE: svelte\nCODE:\n```\non:connectend\n```\n\nLANGUAGE: javascript\nCODE:\n```\nonconnect\n```\n\nLANGUAGE: javascript\nCODE:\n```\nonconnectstart\n```\n\nLANGUAGE: javascript\nCODE:\n```\nonconnectend\n```\n\nLANGUAGE: svelte\nCODE:\n```\n<Handle />\n```\n\n----------------------------------------\n\nTITLE: Configuring Next.js Transpilation for XY UI\nDESCRIPTION: Configuration snippet for next.config.js to enable transpilation of the @xyflow/xy-ui package.\nSOURCE: https://github.com/xyflow/web/blob/main/packages/xy-ui/README.md#2025-04-23_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n...\\ntranspilePackages: ['@xyflow/xy-ui']\\n...\n```\n\n----------------------------------------\n\nTITLE: Using Emoji Component - JSX\nDESCRIPTION: Example of using the Emoji component to render emojis within the text content.\nSOURCE: https://github.com/xyflow/web/blob/main/sites/xyflow.com/src/content/react-flow-fall-2022.mdx#2025-04-23_snippet_1\n\nLANGUAGE: JSX\nCODE:\n```\n<Emoji content=\"🎉\" />\n```\n\n----------------------------------------\n\nTITLE: Defining Custom SVG Shapes for Animation in React (TSX)\nDESCRIPTION: This snippet demonstrates how to define a record of SVG shapes as React components, each accepting animateMotionProps and rendering an SVG element with motion animation. The shapes object must conform to the Record<string, AnimatedSvg> type, and each component should use <animateMotion {...animateMotionProps} /> to animate the SVG element. This setup is extensible for multiple shape types and expects the shapes to be registered for later use in edge components.\nSOURCE: https://github.com/xyflow/web/blob/main/sites/reactflow.dev/src/content/components/edges/animated-svg-edge.mdx#2025-04-23_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nconst shapes = {\n  box: ({ animateMotionProps }) => (\n    <rect width=\"5\" height=\"5\" fill=\"#ff0073\">\n      <animateMotion {...animateMotionProps} />\n    </rect>\n  ),\n} satisfies Record<string, AnimatedSvg>;\n```\n\n----------------------------------------\n\nTITLE: Styling Source Handle to Cover Node Area - react-flow CSS\nDESCRIPTION: Applies CSS to expand the source handle so it fills the entire node, facilitating easier drag-to-connect interactions by making the handle area the node itself. Rules set top/left to 0, remove transforms, adjust background, and remove border. Prerequisites: React Flow node structure. Inputs: None (applied globally to .react-flow__handle.source elements). Outputs: Handle that covers whole node. Limitation: May interfere with normal node mouse events unless handled with a dragHandle.\nSOURCE: https://github.com/xyflow/web/blob/main/sites/reactflow.dev/src/content/learn/tutorials/mind-map-app-with-react-flow.mdx#2025-04-23_snippet_19\n\nLANGUAGE: css\nCODE:\n```\n.react-flow__handle.source {\n  top: 0;\n  left: 0;\n  transform: none;\n  background: #f6ad55;\n  height: 100%;\n  width: 100%;\n  border-radius: 2px;\n  border: none;\n}\n```\n\n----------------------------------------\n\nTITLE: Typing onNodesChange Handler in TypeScript (v12 API)\nDESCRIPTION: Shows how to correctly type the `onNodesChange` event handler using the custom node union type (`AppNode`) as a generic parameter in React Flow v12. This provides type safety for node change events.\nSOURCE: https://github.com/xyflow/web/blob/main/sites/reactflow.dev/src/content/learn/troubleshooting/migrate-to-v12.mdx#2025-04-23_snippet_19\n\nLANGUAGE: typescript\nCODE:\n```\nconst onNodesChange: onNodesChange<AppNode> = useCallback((changes) => setNodes(nds => applyChanges(changes, nds)), []);\n```\n\n----------------------------------------\n\nTITLE: Importing Remote Code Viewer in Svelte\nDESCRIPTION: This snippet imports the RemoteCodeViewer component from the xy-shared/server module, which is used to display the Svelte Flow with Threlte example code.\nSOURCE: https://github.com/xyflow/web/blob/main/sites/svelteflow.dev/src/content/examples/misc/threlte-flow.mdx#2025-04-23_snippet_0\n\nLANGUAGE: svelte\nCODE:\n```\nimport { RemoteCodeViewer } from 'xy-shared/server';\n```\n\n----------------------------------------\n\nTITLE: Building xyflow Website\nDESCRIPTION: Command to build the production version of the website.\nSOURCE: https://github.com/xyflow/web/blob/main/sites/reactflow.dev/README.md#2025-04-23_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n$ pnpm build\n```\n\n----------------------------------------\n\nTITLE: Blog Post Frontmatter Configuration in Markdown\nDESCRIPTION: Metadata configuration for the blog post including title, description, date, authors, tags, and image path.\nSOURCE: https://github.com/xyflow/web/blob/main/sites/xyflow.com/src/content/react-flow-components.mdx#2025-04-23_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n---\ntitle: 'Introducing React Flow Components - powered by shadcn CLI'\ndescription: Some words\ndate: 4 November 2024\nauthors: ['hayleigh']\ntags: ['react-flow', 'components', 'update']\nimage: '/img/blog/react-flow-components/header.png'\n---\n```\n\n----------------------------------------\n\nTITLE: Installing Svelte Flow via Package Manager\nDESCRIPTION: Command to install Svelte Flow package using npm.\nSOURCE: https://github.com/xyflow/web/blob/main/sites/svelteflow.dev/src/content/learn/index.mdx#2025-04-23_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nnpm install @xyflow/svelte\n```\n\n----------------------------------------\n\nTITLE: Scaffolding a React TypeScript Project with Vite\nDESCRIPTION: This command uses `npm create vite@latest` to initialize a new project based on the `react-ts` template. It sets up the basic file structure and dependencies for a React application using TypeScript and Vite as the build tool.\nSOURCE: https://github.com/xyflow/web/blob/main/sites/reactflow.dev/src/content/learn/tutorials/slide-shows-with-react-flow.mdx#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm create vite@latest -- --template react-ts\n```\n\n----------------------------------------\n\nTITLE: Displaying Unused Prop Warning in React\nDESCRIPTION: This JSX snippet renders the UnusedPropWarning component. It likely displays a warning message for any unused props in the current context of the floating edges example.\nSOURCE: https://github.com/xyflow/web/blob/main/sites/svelteflow.dev/src/content/examples/edges/simple-floating-edges.mdx#2025-04-23_snippet_2\n\nLANGUAGE: JSX\nCODE:\n```\n<UnusedPropWarning />\n```\n\n----------------------------------------\n\nTITLE: Using useEdges Hook with TypeScript for Custom Edge Types\nDESCRIPTION: Shows how to use the useEdges hook with TypeScript, specifying a custom edge type. This allows for type-safe usage of custom edge properties.\nSOURCE: https://github.com/xyflow/web/blob/main/sites/reactflow.dev/src/content/api-reference/hooks/use-edges.mdx#2025-04-23_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\nconst nodes = useEdges<CustomEdgeType>();\n```\n\n----------------------------------------\n\nTITLE: Importing Remote Code Viewer Component in JSX\nDESCRIPTION: This snippet imports the RemoteCodeViewer component from a shared server module and the Callout component from nextra. It's used to display the code example for downloading a flow as an image.\nSOURCE: https://github.com/xyflow/web/blob/main/sites/svelteflow.dev/src/content/examples/misc/download-image.mdx#2025-04-23_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport { RemoteCodeViewer } from 'xy-shared/server';\nimport { Callout } from 'nextra/components';\n```\n\n----------------------------------------\n\nTITLE: Starting the Development Server using pnpm\nDESCRIPTION: Starts the development server for the React Flow project using pnpm. This command allows contributors to view and test their changes locally in a development environment after installing dependencies, as part of the Pull Request process.\nSOURCE: https://github.com/xyflow/web/blob/main/CONTRIBUTING.md#2025-04-23_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\npnpm dev\n```\n\n----------------------------------------\n\nTITLE: Installing shadcn-ui Popover Component using PNPM\nDESCRIPTION: Command to add a new Popover component from shadcn-ui library using PNPM package manager. After installation, requires updating the cn import path and exporting the component from index.ts.\nSOURCE: https://github.com/xyflow/web/blob/main/packages/xy-ui/components/ui/README.md#2025-04-23_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\npnpm dlx shadcn-ui@latest add popover\n```\n\n----------------------------------------\n\nTITLE: Defining CoordinateExtent Type in TypeScript\nDESCRIPTION: Defines a type representing two coordinate points that form a bounding box. The first point represents the top-left corner coordinates, and the second point represents the bottom-right corner coordinates. When used in props, it typically defaults to [[-∞, -∞], [+∞, +∞]] for unbounded extents.\nSOURCE: https://github.com/xyflow/web/blob/main/sites/reactflow.dev/src/content/api-reference/types/coordinate-extent.mdx#2025-04-23_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nexport type CoordinateExtent = [[number, number], [number, number]];\n```\n\n----------------------------------------\n\nTITLE: Defining the InternalNodeBase Generic Type in TypeScript\nDESCRIPTION: This TypeScript type alias defines the `InternalNodeBase` generic type. It extends a generic base node type `NodeType` (which defaults to `NodeBase`) and adds specific properties used internally by React Flow: `measured` (optional width/height) and `internals` (absolute position, z-index, the original user node, handle bounds, and node bounds). This structure facilitates React Flow's internal rendering and layout calculations.\nSOURCE: https://github.com/xyflow/web/blob/main/sites/reactflow.dev/src/content/api-reference/types/internal-node.mdx#2025-04-23_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nexport type InternalNodeBase<NodeType extends NodeBase = NodeBase> =\n  NodeType & {\n    measured: {\n      width?: number;\n      height?: number;\n    };\n    internals: {\n      positionAbsolute: XYPosition;\n      z: number;\n      userNode: NodeType;\n      handleBounds?: NodeHandleBounds;\n      bounds?: NodeBounds;\n    };\n  };\n```\n\n----------------------------------------\n\nTITLE: Importing RemoteCodeViewer Component in JavaScript/TypeScript\nDESCRIPTION: Imports the `RemoteCodeViewer` component from the 'xy-shared/server' module. This component is used within the blog post to display code snippets fetched from a remote source, specifically the code for the React Flow slideshow tutorial.\nSOURCE: https://github.com/xyflow/web/blob/main/sites/reactflow.dev/src/content/whats-new/2024-07-22.mdx#2025-04-23_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport { RemoteCodeViewer } from 'xy-shared/server';\n```\n\n----------------------------------------\n\nTITLE: Applying Final Background and Header Styles (CSS)\nDESCRIPTION: This CSS snippet applies final styling touches to the application. It sets a background color for the `body` element and adjusts the text color for elements with the class `header` (likely a panel or title element) to make it more subtle.\nSOURCE: https://github.com/xyflow/web/blob/main/sites/reactflow.dev/src/content/learn/tutorials/mind-map-app-with-react-flow.mdx#2025-04-23_snippet_27\n\nLANGUAGE: css\nCODE:\n```\n```css\nbody {\n  margin: 0;\n  background-color: #f8f8f8;\n  height: 100%;\n}\n\n.header {\n  color: #cdcdcd;\n}\n```\n```\n\n----------------------------------------\n\nTITLE: Running Project Tests using pnpm\nDESCRIPTION: Executes the test suite for the React Flow project using pnpm. Contributors should run this command to ensure their changes pass all existing tests and add new tests for new features before submitting a pull request.\nSOURCE: https://github.com/xyflow/web/blob/main/CONTRIBUTING.md#2025-04-23_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\npnpm test\n```\n\n----------------------------------------\n\nTITLE: Configuring Web Crawler Access for ReactFlow Documentation\nDESCRIPTION: Basic robots.txt configuration that allows all user agents to access the site and specifies the sitemap location at reactflow.dev. Includes host specification for the primary domain.\nSOURCE: https://github.com/xyflow/web/blob/main/sites/reactflow.dev/public/robots.txt#2025-04-23_snippet_0\n\nLANGUAGE: robots.txt\nCODE:\n```\n# *\nUser-agent: *\nAllow: /\n\n# Host\nHost: https://reactflow.dev\n\n# Sitemaps\nSitemap: https://reactflow.dev/sitemap.xml\n```\n\n----------------------------------------\n\nTITLE: Embedding Remote Edge Example Viewer in React (JSX)\nDESCRIPTION: This snippet introduces the RemoteCodeViewer React component to display code for animating edge examples. It requires the 'xy-shared/server' module and expects the RemoteCodeViewer component to accept 'route', 'framework', and 'showEditor' props. The route directs to a specific example, with the editor hidden. Inputs are route strings and configuration; output is an interactive code viewer embed. Prerequisites include a React environment and access to xy-shared/server.\nSOURCE: https://github.com/xyflow/web/blob/main/sites/reactflow.dev/src/content/whats-new/2024-08-14.mdx#2025-04-23_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport { RemoteCodeViewer } from 'xy-shared/server';\n\n<RemoteCodeViewer\n  route=\"examples/edges/animating-edges\"\n  framework=\"react\"\n  showEditor={false}\n/>\n```\n\n----------------------------------------\n\nTITLE: Importing React Flow v10 Component (Old API)\nDESCRIPTION: Demonstrates how to import the main React Flow component in version 10 using the `react-flow-renderer` package. This was the standard import method before the v11 update.\nSOURCE: https://github.com/xyflow/web/blob/main/sites/reactflow.dev/src/content/learn/troubleshooting/migrate-to-v11.mdx#2025-04-23_snippet_0\n\nLANGUAGE: js\nCODE:\n```\n// npm install react-flow-renderer\nimport ReactFlow from 'react-flow-renderer';\n```\n\n----------------------------------------\n\nTITLE: Defining Handle Type Attributes in TypeScript\nDESCRIPTION: This snippet declares the 'Handle' type, which encapsulates core attributes for a handle object in a node-based UI system. It includes optional id, association with a node via nodeId, coordinate position (x, y), position (using a separate Position type), type (restricted to 'source' or 'target'), and size attributes (width and height). 'Position' must be defined elsewhere as an imported type or enum. The type is intended for use throughout systems requiring precise tracking and management of per-node connection handles, ensuring type safety at compile-time. Requires TypeScript and compatible type definitions for 'Position'.\nSOURCE: https://github.com/xyflow/web/blob/main/sites/reactflow.dev/src/content/api-reference/types/handle.mdx#2025-04-23_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\nexport type Handle = {\n  id?: string | null;\n  nodeId: string;\n  x: number;\n  y: number;\n  position: Position;\n  type: 'source' | 'target';\n  width: number;\n  height: number;\n};\n```\n\n----------------------------------------\n\nTITLE: Importing RemoteCodeViewer in TypeScript\nDESCRIPTION: This import statement brings the RemoteCodeViewer component from the xy-shared/server module into the current file. RemoteCodeViewer is used to display and interact with remote code examples within the web interface. Ensure that the xy-shared package is installed and the module path is valid for successful import.\nSOURCE: https://github.com/xyflow/web/blob/main/sites/reactflow.dev/src/content/whats-new/2023-11-02.mdx#2025-04-23_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { RemoteCodeViewer } from 'xy-shared/server';\n```\n\n----------------------------------------\n\nTITLE: Installing the New @xyflow/react Package using npm/yarn\nDESCRIPTION: Demonstrates how to install the renamed React Flow v12 package using npm, also showing the equivalent yarn command via the `npm2yarn` directive. This replaces the previous `reactflow` package installation.\nSOURCE: https://github.com/xyflow/web/blob/main/sites/reactflow.dev/src/content/learn/troubleshooting/migrate-to-v12.mdx#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm install @xyflow/react\n```\n\n----------------------------------------\n\nTITLE: Customizing MiniMap Node Color Based on Node Type in JSX\nDESCRIPTION: This snippet shows how to use a function as the nodeColor prop for <MiniMap />, enabling custom node coloring logic based on each node's type property. The nodeColor function returns a color string depending on the node type. Requires @xyflow/react and that nodes have a type field. Applies dynamic styling, returning colored preview nodes in the minimap.\nSOURCE: https://github.com/xyflow/web/blob/main/sites/reactflow.dev/src/content/api-reference/components/minimap.mdx#2025-04-23_snippet_3\n\nLANGUAGE: jsx\nCODE:\n```\nimport { ReactFlow, MiniMap } from '@xyflow/react';\n\nexport default function Flow() {\n  return (\n    <ReactFlow nodes={[...]]} edges={[...]]}>\n      <MiniMap nodeColor={nodeColor} />\n    </ReactFlow>\n  );\n}\n\nfunction nodeColor(node) {\n  switch (node.type) {\n    case 'input':\n      return '#6ede87';\n    case 'output':\n      return '#6865A5';\n    default:\n      return '#ff0072';\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Recommended: Defining nodeTypes Outside Component (JSX)\nDESCRIPTION: This snippet shows the recommended approach for defining `nodeTypes`. By declaring the `nodeTypes` object outside the component function, it is created only once and remains constant across renders, preventing unnecessary re-renders of the React Flow component.\nSOURCE: https://github.com/xyflow/web/blob/main/sites/reactflow.dev/src/content/learn/troubleshooting/index.mdx#2025-04-23_snippet_4\n\nLANGUAGE: jsx\nCODE:\n```\nimport { ReactFlow } from '@xyflow/react';\nimport MyCustomNode from './MyCustomNode';\n\n// defined outside of the component\nconst nodeTypes = {\n  myCustomNode: MyCustomNode,\n};\n\nfunction Flow(props) {\n  return <ReactFlow nodeTypes={nodeTypes} />;\n}\n\nexport default Flow;\n```\n\n----------------------------------------\n\nTITLE: Using getIncomers to Find Incoming Nodes in @xyflow/react (TypeScript)\nDESCRIPTION: This TypeScript snippet demonstrates how to use the `getIncomers` function from the `@xyflow/react` library. It imports the function and calls it with a target node object, an array of all nodes, and an array of all edges to determine which nodes have edges pointing to the target node. The result is an array of the incoming node objects.\nSOURCE: https://github.com/xyflow/web/blob/main/sites/reactflow.dev/src/content/api-reference/utils/get-incomers.mdx#2025-04-23_snippet_0\n\nLANGUAGE: ts\nCODE:\n```\nimport { getIncomers } from '@xyflow/react';\n\nconst nodes = [];\nconst edges = [];\n\nconst incomers = getIncomers(\n  { id: '1', position: { x: 0, y: 0 }, data: { label: 'node' } },\n  nodes,\n  edges,\n);\n```\n\n----------------------------------------\n\nTITLE: Defining InternalNode Type in TypeScript for xyflow\nDESCRIPTION: This TypeScript interface defines the InternalNode type which extends the base Node type with additional internal properties. It includes positioning, dimensions, styling, and internal state information used by the framework but not directly exposed to users.\nSOURCE: https://github.com/xyflow/web/blob/main/sites/svelteflow.dev/src/content/api-reference/types/internal-node.mdx#2025-04-23_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nexport type InternalNode<NodeType extends Node = Node> = {\n  id: string;\n  position: XYPosition;\n  data: Node['data'];\n  type?: Node['type'];\n  sourcePosition?: Position;\n  targetPosition?: Position;\n  hidden?: boolean;\n  selected?: boolean;\n  dragging?: boolean;\n  draggable?: boolean;\n  selectable?: boolean;\n  connectable?: boolean;\n  resizing?: boolean;\n  deletable?: boolean;\n  dragHandle?: string;\n  width?: number | null;\n  height?: number | null;\n  parentId?: string;\n  zIndex?: number;\n  extent?: 'parent' | CoordinateExtent;\n  expandParent?: boolean;\n  ariaLabel?: string;\n  origin?: NodeOrigin;\n  style?: string;\n  class?: string;\n  measured: {\n    width?: number;\n    height?: number;\n  };\n  internals: {\n    positionAbsolute: XYPosition;\n    z: number;\n    /** Holds a reference to the original node object provided by the user.\n     * Used as an optimization to avoid certain operations. */\n    userNode: NodeType;\n    handleBounds?: NodeHandleBounds;\n  };\n};\n```\n\n----------------------------------------\n\nTITLE: Publishing an npm Package (Shell)\nDESCRIPTION: This command attempts to publish the package defined in the current directory's `package.json` file to the npm registry. In the narrative, this command was executed after unpublishing the previous version, intending to publish the author's new version under the 'reactflow' name.\nSOURCE: https://github.com/xyflow/web/blob/main/sites/xyflow.com/src/content/reactflow-npm-package-name.mdx#2025-04-23_snippet_1\n\nLANGUAGE: sh\nCODE:\n```\nnpm publish\n```\n\n----------------------------------------\n\nTITLE: Renaming paneMoveable to panOnDrag (Prop rename) - React (JSX)\nDESCRIPTION: These minimal examples highlight the renaming of the prop `paneMoveable` (v9) to `panOnDrag` (v10) to improve API consistency. Both examples disable dragging the viewport with the mouse. There are no functional changes except prop name. Output is a React Flow instance with the corresponding behavior.\nSOURCE: https://github.com/xyflow/web/blob/main/sites/reactflow.dev/src/content/learn/troubleshooting/migrate-to-v10.mdx#2025-04-23_snippet_8\n\nLANGUAGE: jsx\nCODE:\n```\n<ReactFlow\\n   ...\\n  paneMoveable={false}\\n/>\n```\n\nLANGUAGE: jsx\nCODE:\n```\n<ReactFlow\\n   ...\\n  panOnDrag={false}\\n/>\n```\n\n----------------------------------------\n\nTITLE: Old Node Hidden Property Implementation\nDESCRIPTION: Shows the previous implementation of hiding nodes using the isHidden property, which has been deprecated in favor of the simplified 'hidden' property.\nSOURCE: https://github.com/xyflow/web/blob/main/sites/reactflow.dev/src/content/learn/troubleshooting/migrate-to-v10.mdx#2025-04-23_snippet_11\n\nLANGUAGE: javascript\nCODE:\n```\nconst hiddenNode = { id: '1', isHidden: true, position: { x: 50, y: 50 } };\n```\n\n----------------------------------------\n\nTITLE: Importing Nextra and Shared Components in MDX\nDESCRIPTION: This snippet imports the `Bleed` component from 'nextra/components' and the `RemoteCodeViewer` component from 'xy-shared/server'. These components are likely used within the MDX file to structure content layout and display remote code examples, respectively.\nSOURCE: https://github.com/xyflow/web/blob/main/sites/xyflow.com/src/content/react-flow-v10.mdx#2025-04-23_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport { Bleed } from 'nextra/components';\nimport { RemoteCodeViewer } from 'xy-shared/server';\n```\n\n----------------------------------------\n\nTITLE: Installing React Flow via npm - Bash\nDESCRIPTION: Installs the @xyflow/react package into a local React project using npm. The snippet presupposes an existing project initialized (e.g., with Vite or Create React App). After running this command, the React Flow library becomes available for import and use within React components.\nSOURCE: https://github.com/xyflow/web/blob/main/sites/reactflow.dev/src/content/learn/index.mdx#2025-04-23_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nnpm install @xyflow/react\n```\n\n----------------------------------------\n\nTITLE: Dynamically Adjusting Node Width in MindMapNode (JSX)\nDESCRIPTION: This `useLayoutEffect` hook, added to the `MindMapNode` component, dynamically adjusts the width of the input field based on the length of its label (`data.label`). It uses a simple calculation (`label.length * 8`) and requires an `inputRef` pointing to the input DOM element.\nSOURCE: https://github.com/xyflow/web/blob/main/sites/reactflow.dev/src/content/learn/tutorials/mind-map-app-with-react-flow.mdx#2025-04-23_snippet_24\n\nLANGUAGE: jsx\nCODE:\n```\n```jsx\nuseLayoutEffect(() => {\n  if (inputRef.current) {\n    inputRef.current.style.width = `${data.label.length * 8}px`;\n  }\n}, [data.label.length]);\n```\n```\n\n----------------------------------------\n\nTITLE: Importing Next.js Image Component in MDX\nDESCRIPTION: Imports the `Image` component from the `next/image` module for use within an MDX file. This allows leveraging Next.js's image optimization features (like lazy loading and automatic resizing) within Markdown content. Assumes a Next.js environment is being used.\nSOURCE: https://github.com/xyflow/web/blob/main/sites/xyflow.com/src/content/why-svelte-flow.mdx#2025-04-23_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport Image from 'next/image';\n```\n\n----------------------------------------\n\nTITLE: JSX Import Statement for Survey Results Page\nDESCRIPTION: Import statements for Nextra and shared components used in the survey results page\nSOURCE: https://github.com/xyflow/web/blob/main/sites/xyflow.com/src/content/react-flow-developer-survey-2023.mdx#2025-04-23_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport { Bleed } from 'nextra/components';\nimport { Text, Image } from 'xy-shared';\n```\n\n----------------------------------------\n\nTITLE: Importing Base Styles for React Flow\nDESCRIPTION: This snippet shows how to import the required base styles for React Flow when opting out of default styling. These styles are essential for proper functionality.\nSOURCE: https://github.com/xyflow/web/blob/main/sites/reactflow.dev/src/content/learn/customization/theming.mdx#2025-04-23_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nimport '@xyflow/react/dist/base.css';\n```\n\n----------------------------------------\n\nTITLE: Adding Controls to React Flow in React\nDESCRIPTION: Shows how to incorporate the customizable Controls component into a React Flow setup. This component adds buttons for zooming, fitting the view, and potentially other interactions. It is imported and used as a child of the ReactFlow component.\nSOURCE: https://github.com/xyflow/web/blob/main/sites/reactflow.dev/src/content/learn/concepts/built-in-components.mdx#2025-04-23_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\n<RemoteCodeViewer route=\"learn/controls\" framework=\"react\" />\n```\n\n----------------------------------------\n\nTITLE: Customizing the BaseNode Component (TSX)\nDESCRIPTION: Modifies the `BaseNode` component's implementation in `src/components/base-node.tsx`. Specifically, it adds `font-mono` and `font-bold` Tailwind classes (line 11) to change the text style within the node, demonstrating the editability of `shadcn/ui` components.\nSOURCE: https://github.com/xyflow/web/blob/main/sites/reactflow.dev/src/content/learn/tutorials/getting-started-with-react-flow-components.mdx#2025-04-23_snippet_12\n\nLANGUAGE: jsx\nCODE:\n```\nimport React from \"react\";\nimport { cn } from \"@/lib/utils\";\n\nexport const BaseNode = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement> & { selected?: boolean }\n>(({ className, selected, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\n      \"rounded-md border bg-card p-5 text-card-foreground font-mono font-bold\",\n      className,\n      selected ? \"border-muted-foreground shadow-lg\" : \"\",\n      \"hover:ring-1\",\n    )}\n    {...props}\n  />\n));\nBaseNode.displayName = \"BaseNode\";\n```\n\n----------------------------------------\n\nTITLE: Component File Structure\nDESCRIPTION: Directory structure showing the files and folders created for each new component\nSOURCE: https://github.com/xyflow/web/blob/main/apps/ui-components/README.md#2025-04-23_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\ncomponents/\n├─ xy/\n│  ├─ <component-name>/\n│  │  ├─ index.tsx      # source code of the component\n│  │  ├─ demo.tsx       # small demo showing usage to appear on website\n│  │  ├─ registry.json  # shadcn configuration\napp/\n├─ <component-name>/\n│  ├─ page.tsx          # route for rendering component\n```\n\n----------------------------------------\n\nTITLE: Importing useReactFlow Hook for Intersection Detection in React Flow\nDESCRIPTION: This code snippet demonstrates the usage of the useReactFlow hook to access intersection helpers in React Flow. It's used to detect when a node overlaps with another node during drag operations, providing visual feedback.\nSOURCE: https://github.com/xyflow/web/blob/main/apps/example-apps/react/examples/nodes/intersections/README.mdx#2025-04-23_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\n<RemoteCodeViewer route=\"examples/nodes/intersections\" framework=\"react\" />\n```\n\n----------------------------------------\n\nTITLE: Configuring Babel Loader for React Flow with Webpack 4 - JavaScript\nDESCRIPTION: This JavaScript snippet shows the webpack rule needed to process React Flow modules with Babel. It matches JavaScript files within node_modules that belong to the reactflow package and applies babel-loader with specific presets and plugins for handling modern ECMAScript and JSX syntax. Place this rule inside your webpack config module.rules array. Key parameters are the test regex for matching, the loader name, and its options (presets and plugins). The output ensures React Flow code is transpiled and compatible with webpack 4 builds. Skipping this configuration may cause webpack build failures due to unrecognized modern syntax.\nSOURCE: https://github.com/xyflow/web/blob/main/sites/reactflow.dev/src/content/learn/troubleshooting/index.mdx#2025-04-23_snippet_16\n\nLANGUAGE: js\nCODE:\n```\n{\n  test: /node_modules[\\/\\\\]@?reactflow[\\/\\\\].*.js$/,\n  use: {\n    loader: 'babel-loader',\n    options: {\n      presets: ['@babel/preset-env', \"@babel/preset-react\"],\n      plugins: [\n        \"@babel/plugin-proposal-optional-chaining\",\n        \"@babel/plugin-proposal-nullish-coalescing-operator\",\n      ]\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Building the Project\nDESCRIPTION: Executes the Vite build command. The custom plugin used for generating source.json files during development is also used at the beginning of this build process.\nSOURCE: https://github.com/xyflow/web/blob/main/apps/example-apps/README.md#2025-04-23_snippet_2\n\nLANGUAGE: markdown\nCODE:\n```\n### `pnpm build`\n```\n\n----------------------------------------\n\nTITLE: Implementing OnNodesChange Handler with useCallback - TSX\nDESCRIPTION: Shows an example of implementing the OnNodesChange handler using React\\'s useCallback hook. The handler applies a list of changes to the current nodes state using setNodes and applyNodeChanges. This requires dependencies such as React, useCallback, setNodes, and applyNodeChanges, and is typically used within a React component to handle dynamic graph editing.\nSOURCE: https://github.com/xyflow/web/blob/main/sites/reactflow.dev/src/content/api-reference/types/on-nodes-change.mdx#2025-04-23_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\nconst onNodesChange: OnNodesChange = useCallback(\n  (changes) => setNodes((nds) => applyNodeChanges(changes, nds)),\n  [setNodes],\n);\n```\n\n----------------------------------------\n\nTITLE: Rendering UnusedPropWarning Component in JSX\nDESCRIPTION: Renders the `UnusedPropWarning` component. This component is likely part of the documentation website's infrastructure, possibly used to automatically detect and display warnings about unused properties passed to components within the documentation examples or pages.\nSOURCE: https://github.com/xyflow/web/blob/main/sites/svelteflow.dev/src/content/examples/styling/turbo-flow.mdx#2025-04-23_snippet_2\n\nLANGUAGE: jsx\nCODE:\n```\n<UnusedPropWarning />\n```\n\n----------------------------------------\n\nTITLE: Importing Remote Code Viewer Component in JSX\nDESCRIPTION: Example shows how to import and use the RemoteCodeViewer component for displaying code examples for computing flows between nodes.\nSOURCE: https://github.com/xyflow/web/blob/main/sites/svelteflow.dev/src/content/examples/interaction/computing-flows.mdx#2025-04-23_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\n<RemoteCodeViewer\n  route=\"examples/interaction/computing-flows\"\n  framework=\"svelte\"\n/>\n```\n\n----------------------------------------\n\nTITLE: Initializing Vite Project (Bash)\nDESCRIPTION: Command to scaffold a new Vite project using the `create-vite` tool. It prompts the user to select a framework (React) and variant (TypeScript), which are prerequisites for using `shadcn/ui` and React Flow Components.\nSOURCE: https://github.com/xyflow/web/blob/main/sites/reactflow.dev/src/content/learn/tutorials/getting-started-with-react-flow-components.mdx#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpx create-vite@latest\n```\n\n----------------------------------------\n\nTITLE: Using useNodesInitialized Hook in React for Flow Layout\nDESCRIPTION: This code snippet demonstrates how to use the useNodesInitialized hook in a custom layout function. It waits for all nodes to be initialized before applying a custom layout algorithm.\nSOURCE: https://github.com/xyflow/web/blob/main/sites/reactflow.dev/src/content/api-reference/hooks/use-nodes-initialized.mdx#2025-04-23_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport { useReactFlow, useNodesInitialized } from '@xyflow/react';\nimport { useEffect, useState } from 'react';\n\nconst options = {\n  includeHiddenNodes: false,\n};\n\nexport default function useLayout() {\n  const { getNodes } = useReactFlow();\n  const nodesInitialized = useNodesInitialized(options);\n  const [layoutedNodes, setLayoutedNodes] = useState(getNodes());\n\n  useEffect(() => {\n    if (nodesInitialized) {\n      setLayoutedNodes(yourLayoutingFunction(getNodes()));\n    }\n  }, [nodesInitialized]);\n\n  return layoutedNodes;\n}\n```\n\n----------------------------------------\n\nTITLE: Importing RemoteCodeViewer Component for Svelte Flow Edge Types Example\nDESCRIPTION: This code snippet imports the RemoteCodeViewer component from the xy-shared/server module. It's used to display a remote code example of edge types in Svelte Flow.\nSOURCE: https://github.com/xyflow/web/blob/main/sites/svelteflow.dev/src/content/examples/edges/edge-types.mdx#2025-04-23_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport { RemoteCodeViewer } from 'xy-shared/server';\n```\n\n----------------------------------------\n\nTITLE: Importing Custom Case Study Component - React/JavaScript\nDESCRIPTION: This snippet imports a custom React component used for rendering question-and-answer pairs in the case study page. It depends on a module located at '@/components/case-study-qa', indicating a Next.js or modern JS build setup with alias resolution. This import must precede fragment usage and is required for rendering subsequent QandA components; otherwise, reference errors will occur.\nSOURCE: https://github.com/xyflow/web/blob/main/sites/reactflow.dev/src/content/pro/case-studies/doubleloop-case-study.mdx#2025-04-23_snippet_1\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport QandA from '@/components/case-study-qa';\n```\n\n----------------------------------------\n\nTITLE: Enhanced Oscillator Component with State Management\nDESCRIPTION: Updated oscillator component with state management integration using Zustand selectors and event handlers.\nSOURCE: https://github.com/xyflow/web/blob/main/sites/reactflow.dev/src/content/learn/tutorials/react-flow-and-the-web-audio-api.mdx#2025-04-23_snippet_12\n\nLANGUAGE: jsx\nCODE:\n```\nimport React from 'react';\nimport { Handle } from '@xyflow/react';\nimport { shallow } from 'zustand/shallow';\n\nimport { useStore } from '../store';\n\nconst selector = (id) => (store) => ({\n  setFrequency: (e) => store.updateNode(id, { frequency: +e.target.value }),\n  setType: (e) => store.updateNode(id, { type: e.target.value }),\n});\n\nexport default function Osc({ id, data }) {\n  const { setFrequency, setType } = useStore(selector(id), shallow);\n\n  return (\n    <div>\n      <div>\n        <p>Oscillator Node</p>\n\n        <label>\n          <span>Frequency:</span>\n          <input\n            className=\"nodrag\"\n            type=\"range\"\n            min=\"10\"\n            max=\"1000\"\n            value={data.frequency}\n            onChange={setFrequency}\n          />\n          <span>{data.frequency}Hz</span>\n        </label>\n\n        <label>\n          <span>Waveform:</span>\n          <select className=\"nodrag\" value={data.type} onChange={setType}>\n            <option value=\"sine\">sine</option>\n            <option value=\"triangle\">triangle</option>\n            <option value=\"sawtooth\">sawtooth</option>\n            <option value=\"square\">square</option>\n          </select>\n        </label>\n      </div>\n\n      <Handle type=\"source\" position=\"bottom\" />\n    </div>\n  );\n```\n\n----------------------------------------\n\nTITLE: React Flow App Component Setup\nDESCRIPTION: Main App component configuration with React Flow, including custom node type registration and store integration.\nSOURCE: https://github.com/xyflow/web/blob/main/sites/reactflow.dev/src/content/learn/tutorials/react-flow-and-the-web-audio-api.mdx#2025-04-23_snippet_13\n\nLANGUAGE: jsx\nCODE:\n```\nimport React from 'react';\nimport { ReactFlow } from '@xyflow/react';\nimport { shallow } from 'zustand/shallow';\n\nimport { useStore } from './store';\nimport Osc from './nodes/Osc';\n\nconst selector = (store) => ({\n  nodes: store.nodes,\n  edges: store.edges,\n  onNodesChange: store.onNodesChange,\n  onEdgesChange: store.onEdgesChange,\n  addEdge: store.addEdge,\n});\n\nconst nodeTypes = {\n  osc: Osc,\n};\n\nexport default function App() {\n  const store = useStore(selector, shallow);\n\n  return (\n    <ReactFlow\n      nodes={store.nodes}\n      nodeTypes={nodeTypes}\n      edges={store.edges}\n      onNodesChange={store.onNodesChange}\n      onEdgesChange={store.onEdgesChange}\n      onConnect={store.addEdge}\n    >\n      <Background />\n    </ReactFlow>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Rendering Tooltip Node Example using UiComponentViewer in MDX\nDESCRIPTION: This MDX snippet utilizes the custom 'UiComponentViewer' component to display an interactive example or visualization of the 'Tooltip Node'. The 'id' prop is set to 'tooltip-node', likely referencing a specific configuration or example defined elsewhere for the viewer component. This requires the 'UiComponentViewer' component to be imported and available in the MDX rendering context.\nSOURCE: https://github.com/xyflow/web/blob/main/sites/reactflow.dev/src/content/components/nodes/tooltip-node.mdx#2025-04-23_snippet_0\n\nLANGUAGE: mdx\nCODE:\n```\n<UiComponentViewer id=\"tooltip-node\" />\n```\n\n----------------------------------------\n\nTITLE: Setting up React Flow Panel and Zustand Selector for Node Creation in JSX\nDESCRIPTION: Prepares a React component to include a UI for creating nodes. It imports the `Panel` component from `@xyflow/react`, updates the Zustand selector to retrieve the `createNode` action from the store, and renders the `Panel` component within the `ReactFlow` graph area. The panel is initially empty.\nSOURCE: https://github.com/xyflow/web/blob/main/sites/reactflow.dev/src/content/learn/tutorials/react-flow-and-the-web-audio-api.mdx#2025-04-23_snippet_27\n\nLANGUAGE: jsx\nCODE:\n```\n...\nimport { ReactFlow,  Panel } from '@xyflow/react';\n...\n\nconst selector = (store) => ({\n  ...,\n  createNode: store.createNode,\n});\n\nexport default function App() {\n  const store = useStore(selector, shallow);\n\n  return (\n    <ReactFlow>\n      <Panel position=\"top-right\">\n        ...\n      </Panel>\n      <Background />\n    </ReactFlow>\n  );\n};\n```\n\n----------------------------------------\n\nTITLE: Importing Remote Code Viewer Component in Svelte\nDESCRIPTION: Imports a RemoteCodeViewer component from xy-shared/server to display edge marker examples for Svelte Flow.\nSOURCE: https://github.com/xyflow/web/blob/main/sites/svelteflow.dev/src/content/examples/edges/edge-markers.mdx#2025-04-23_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport { RemoteCodeViewer } from 'xy-shared/server';\n\n<RemoteCodeViewer\n  route=\"examples/edges/edge-markers\"\n  framework=\"svelte\"\n/>\n```\n\n----------------------------------------\n\nTITLE: Embedding Interactive React Flow Pro Example using JSX\nDESCRIPTION: This JSX snippet utilizes the `Bleed` and `Embed` components (likely from Nextra and xy-shared libraries) to embed an interactive React Flow Pro example (Editable Edge) from a specified URL. The `lazy` prop enables lazy loading for performance, and `className` applies styling (a shadow effect).\nSOURCE: https://github.com/xyflow/web/blob/main/sites/xyflow.com/src/content/update-react-flow-12-svelte-flow-1.mdx#2025-04-23_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\n<Bleed>\n  <Embed\n    lazy\n    src=\"https://pro-examples.reactflow.dev/editable-edge\"\n    className=\"shadow-xs\"\n  />\n</Bleed>\n```\n\n----------------------------------------\n\nTITLE: Refactoring ColorPreview Node with CustomHandle in React Flow (JSX)\nDESCRIPTION: This snippet shows the refactored `ColorPreview` custom node component. It utilizes the previously defined `CustomHandle` component to manage data fetching for each color channel (Red, Green, Blue). It maintains the combined color in local React state (`useState`). Each `CustomHandle` instance is configured with an `onChange` callback that updates the corresponding part (r, g, or b) of the local color state. The node's background color dynamically reflects this local state.\nSOURCE: https://github.com/xyflow/web/blob/main/sites/reactflow.dev/src/content/learn/advanced-use/computing-flows.mdx#2025-04-23_snippet_2\n\nLANGUAGE: jsx\nCODE:\n```\n// {...}\nfunction ColorPreview() {\n  const [color, setColor] = useState({ r: 0, g: 0, b: 0 });\n\n  return (\n    <div\n      className=\"node\"\n      style={{\n        background: `rgb(${color.r}, ${color.g}, ${color.b})`,\n      }}\n    >\n      <CustomHandle\n        id=\"red\"\n        label=\"R\"\n        onChange={(value) => setColor((c) => ({ ...c, r: value }))}\n      />\n      <CustomHandle\n        id=\"green\"\n        label=\"G\"\n        onChange={(value) => setColor((c) => ({ ...c, g: value }))}\n      />\n      <CustomHandle\n        id=\"blue\"\n        label=\"B\"\n        onChange={(value) => setColor((c) => ({ ...c, b: value }))}\n      />\n    </div>\n  );\n}\n\nexport default ColorPreview;\n```\n\n----------------------------------------\n\nTITLE: Forcefully Unpublishing an npm Package Version (Shell)\nDESCRIPTION: This command attempts to forcefully unpublish version 0.1.0 of an npm package. The `--force` flag is required when unpublishing the only version of a package. In the context of the article, this was used on the newly acquired 'reactflow' package to remove the old, placeholder version before publishing the author's code.\nSOURCE: https://github.com/xyflow/web/blob/main/sites/xyflow.com/src/content/reactflow-npm-package-name.mdx#2025-04-23_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\nnpm unpublish@0.1.0 —force\n```\n\n----------------------------------------\n\nTITLE: Using useOnViewportChange Hook in React\nDESCRIPTION: This snippet demonstrates how to use the useOnViewportChange hook to listen for viewport changes in a React component. It sets up callbacks for the start, change, and end phases of viewport changes, logging the viewport state to the console.\nSOURCE: https://github.com/xyflow/web/blob/main/sites/reactflow.dev/src/content/api-reference/hooks/use-on-viewport-change.mdx#2025-04-23_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nimport { useCallback } from 'react';\nimport { useOnViewportChange } from '@xyflow/react';\n\nfunction ViewportChangeLogger() {\n  useOnViewportChange({\n    onStart: (viewport: Viewport) => console.log('start', viewport),\n    onChange: (viewport: Viewport) => console.log('change', viewport),\n    onEnd: (viewport: Viewport) => console.log('end', viewport),\n  });\n\n  return null;\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Resizable Node with NodeResizer in React\nDESCRIPTION: This snippet demonstrates how to create a resizable node using the NodeResizer component. It includes handles for connections and displays a label passed through the data prop.\nSOURCE: https://github.com/xyflow/web/blob/main/sites/reactflow.dev/src/content/api-reference/components/node-resizer.mdx#2025-04-23_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport { memo } from 'react';\nimport { Handle, Position, NodeResizer } from '@xyflow/react';\n\nconst ResizableNode = ({ data }) => {\n  return (\n    <>\n      <NodeResizer minWidth={100} minHeight={30} />\n      <Handle type=\"target\" position={Position.Left} />\n      <div style={{ padding: 10 }}>{data.label}</div>\n      <Handle type=\"source\" position={Position.Right} />\n    </>\n  );\n};\n\nexport default memo(ResizableNode);\n```\n\n----------------------------------------\n\nTITLE: Importing EdgeLabelRenderer Component\nDESCRIPTION: Example showing how to import and reference the RemoteCodeViewer component for displaying edge label renderer examples. The component is configured to show examples specific to the Svelte framework.\nSOURCE: https://github.com/xyflow/web/blob/main/sites/svelteflow.dev/src/content/examples/edges/edge-label-renderer.mdx#2025-04-23_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport { RemoteCodeViewer } from 'xy-shared/server';\n\n<RemoteCodeViewer\n  route=\"examples/edges/edge-label-renderer\"\n  framework=\"svelte\"\n/>\n```\n\n----------------------------------------\n\nTITLE: Adding New Component with Custom Script\nDESCRIPTION: Command for creating a new component using the project's custom initialization script\nSOURCE: https://github.com/xyflow/web/blob/main/apps/ui-components/README.md#2025-04-23_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\npnpm add-component <component-name>\n```\n\n----------------------------------------\n\nTITLE: Handling Connection End Events in React Flow v11 (New API)\nDESCRIPTION: Shows the updated way to handle the end of a connection attempt in React Flow v11. The event handlers have been renamed to `onConnectEnd` and `onClickConnectEnd`.\nSOURCE: https://github.com/xyflow/web/blob/main/sites/reactflow.dev/src/content/learn/troubleshooting/migrate-to-v11.mdx#2025-04-23_snippet_8\n\nLANGUAGE: jsx\nCODE:\n```\nimport { ReactFlow } from '@xyflow/react';\n\nconst Flow = () => {\n  const onConnectEnd = () => console.log('on connect stop');\n\n  return (\n    <ReactFlow\n      defaultNodes={defaultNodes}\n      defaultEdges={defaultEdges}\n      onConnectEnd={onConnectEnd}\n      onClickConnectEnd={onConnectEnd}\n    />\n  );\n};\n\nexport default Flow;\n```\n\n----------------------------------------\n\nTITLE: Configuring Web Crawler Access for SvelteFlow Website\nDESCRIPTION: This robots.txt file defines the crawling policies for the SvelteFlow website. It allows all user agents complete access to the site, defines the host URL as https://svelteflow.dev, and points crawlers to the sitemap at https://svelteflow.dev/sitemap.xml.\nSOURCE: https://github.com/xyflow/web/blob/main/sites/svelteflow.dev/public/robots.txt#2025-04-23_snippet_0\n\nLANGUAGE: robots.txt\nCODE:\n```\n# *\nUser-agent: *\nAllow: /\n\n# Host\nHost: https://svelteflow.dev\n\n# Sitemaps\nSitemap: https://svelteflow.dev/sitemap.xml\n```\n\n----------------------------------------\n\nTITLE: Rendering Proximity Connect Component in JSX\nDESCRIPTION: Component import and usage for displaying an interactive node connection example that demonstrates proximity-based edge creation. Uses the RemoteCodeViewer component to load and display the example code.\nSOURCE: https://github.com/xyflow/web/blob/main/sites/svelteflow.dev/src/content/examples/nodes/proximity-connect.mdx#2025-04-23_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\n<RemoteCodeViewer\n  route=\"examples/nodes/proximity-connect\"\n  framework=\"svelte\"\n/>\n```\n\n----------------------------------------\n\nTITLE: Defining Robots.txt Rules for Crawler Access - Plaintext\nDESCRIPTION: This snippet specifies robots.txt directives allowing all user agents full access to the site's content. Additional metadata such as the preferred host and the sitemap location are provided to assist search engines in correctly indexing the website. There are no dependencies, and the directives must be placed at the root of the site's public folder for automatic discovery.\nSOURCE: https://github.com/xyflow/web/blob/main/sites/xyflow.com/public/robots.txt#2025-04-23_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\n# *\\nUser-agent: *\\nAllow: /\\n\\n# Host\\nHost: https://xyflow.com\\n\\n# Sitemaps\\nSitemap: https://xyflow.com/sitemap.xml\n```\n\n----------------------------------------\n\nTITLE: Importing Components for Simple Floating Edges Example in React\nDESCRIPTION: This snippet imports the RemoteCodeViewer component from a shared server module and a custom UnusedPropWarning component. These are used to display the floating edges example and show warnings for unused props.\nSOURCE: https://github.com/xyflow/web/blob/main/sites/svelteflow.dev/src/content/examples/edges/simple-floating-edges.mdx#2025-04-23_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport { RemoteCodeViewer } from 'xy-shared/server';\nimport UnusedPropWarning from '@/components/unused-prop-warning';\n```\n\n----------------------------------------\n\nTITLE: Using Viewport Animation Duration Parameter in XY Flow\nDESCRIPTION: Shows how to implement smooth viewport transitions by using the duration parameter. This option can be used with viewport manipulation functions like zoomIn, zoomOut, zoomTo, setViewport, fitView, setCenter, and fitBounds.\nSOURCE: https://github.com/xyflow/web/blob/main/apps/example-apps/react/examples/interaction/zoom-transitions/README.mdx#2025-04-23_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\n<RemoteCodeViewer\n  route=\"examples/interaction/zoom-transitions\"\n  framework=\"react\"\n/>\n```\n\n----------------------------------------\n\nTITLE: Defining Proximity Connect Example in Markdown\nDESCRIPTION: This markdown snippet defines the title, description, and purpose of the Proximity Connect example for XY Flow. It also includes a component for remotely viewing the code example.\nSOURCE: https://github.com/xyflow/web/blob/main/apps/example-apps/react/examples/nodes/proximity-connect/README.mdx#2025-04-23_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n---\ntitle: Proximity Connect\ndescription: Automatically create edges when nodes get close to each other\n---\n\nThis example shows how to automatically create edges when a node is dropped in close proximity to another one. While dragging, a dotted connection line is displayed to show which edge will be created if you drop the node.\n\n<RemoteCodeViewer route=\"examples/nodes/proximity-connect\" framework=\"react\" />\n```\n\n----------------------------------------\n\nTITLE: Rendering Remote Code Viewer for Svelte Example\nDESCRIPTION: This JSX code renders the RemoteCodeViewer component to display the Svelte example for downloading a flow as an image. It specifies the route to the example code and the framework used.\nSOURCE: https://github.com/xyflow/web/blob/main/sites/svelteflow.dev/src/content/examples/misc/download-image.mdx#2025-04-23_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\n<RemoteCodeViewer\n  route=\"examples/misc/download-image\"\n  framework=\"svelte\"\n/>\n```\n\n----------------------------------------\n\nTITLE: Fix: getIntersectingNodes Function with Rect Input\nDESCRIPTION: Resolves a bug in the `getIntersectingNodes` utility function that occurred when passing a `Rect` object (representing a rectangular area) as input instead of a node reference. The function now correctly identifies intersecting nodes using a `Rect`.\nSOURCE: https://github.com/xyflow/web/blob/main/sites/svelteflow.dev/src/content/whats-new/2023-12-13.mdx#2025-04-23_snippet_9\n\nLANGUAGE: typescript\nCODE:\n```\nRect\n```\n\n----------------------------------------\n\nTITLE: Markdown Structure - Terms of Use Document\nDESCRIPTION: Structured markdown document containing terms of use for React Flow Pro platform, including definitions, registration requirements, and user obligations.\nSOURCE: https://github.com/xyflow/web/blob/main/sites/xyflow.com/src/app/(content-pages)/terms-of-use/page.mdx#2025-04-23_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n# Terms of Use\\n\\nwebkid GmbH\\n\\n\\- Version: April 2023 -\\n\\nPLEASE READ AND MAKE SURE YOU UNDERSTAND ALL THE FOLLOWING TERMS OF USE CAREFULLY BEFORE ACCESSING OR USING WEBKID'S SERVICES. THE TERMS OF USE ARE PART OF A BINDING AGREEMENT ON THE USE OF WEBkID'S SERVICES. IF YOU ARE UNSURE OF ANY ASPECTS OF THE FOLLOWING GTC YOU SHOULD SEEK INDEPENDENT LEGAL ADVICE BEFORE REGISTERING.\n```\n\n----------------------------------------\n\nTITLE: Defining Node Configuration with Custom Type\nDESCRIPTION: Demonstrates how to configure a node to use the custom color picker type and initialize it with a writable store for the color value.\nSOURCE: https://github.com/xyflow/web/blob/main/sites/svelteflow.dev/src/content/learn/guides/custom-nodes.mdx#2025-04-23_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nconst nodes = writable([\n  {\n    id: 'node-1',\n    // this type needs to match the newly defined node type\n    type: 'color-picker',\n    position: { x: 0, y: 0 },\n    // data is used to store the current color value\n    data: { color: writable('#ff4000') },\n  },\n]);\n```\n\n----------------------------------------\n\nTITLE: Using RemoteCodeViewer for Dagre Layout Example in Svelte Flow\nDESCRIPTION: Renders a RemoteCodeViewer component to display a code example of dagre layout integration with Svelte Flow. The example is fetched from a specific route and framework.\nSOURCE: https://github.com/xyflow/web/blob/main/sites/svelteflow.dev/src/content/examples/layout/dagre.mdx#2025-04-23_snippet_1\n\nLANGUAGE: svelte\nCODE:\n```\n<RemoteCodeViewer route=\"examples/layout/dagre\" framework=\"svelte\" />\n```\n\n----------------------------------------\n\nTITLE: Rendering Remote Code Viewer for Stress Test in React\nDESCRIPTION: This snippet demonstrates the use of a RemoteCodeViewer component to display a stress test example for XY Flow. It loads a remote code file that renders hundreds of nodes and edges simultaneously.\nSOURCE: https://github.com/xyflow/web/blob/main/apps/example-apps/react/examples/nodes/stress/README.mdx#2025-04-23_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\n<RemoteCodeViewer route=\"examples/nodes/stress\" framework=\"react\" />\n```\n\n----------------------------------------\n\nTITLE: Importing Components for Connection Line Documentation in JSX\nDESCRIPTION: This snippet imports necessary components for displaying code examples and warnings related to Connection Lines. It uses a remote code viewer for Svelte examples and a custom warning component for unused props.\nSOURCE: https://github.com/xyflow/web/blob/main/sites/svelteflow.dev/src/content/examples/edges/custom-connectionline.mdx#2025-04-23_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport { RemoteCodeViewer } from 'xy-shared/server';\nimport UnusedPropWarning from '@/components/unused-prop-warning';\n```\n\n----------------------------------------\n\nTITLE: Scaffolding New React or Svelte Examples\nDESCRIPTION: Generates a new React or Svelte example under a specified path. It creates all necessary files for a new example, including the entry index.html and a minimal component.\nSOURCE: https://github.com/xyflow/web/blob/main/apps/example-apps/README.md#2025-04-23_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n### `pnpm scaffold`\n```\n\n----------------------------------------\n\nTITLE: Importing UiComponentViewer in React (MDX + TypeScript)\nDESCRIPTION: This import statement brings in the UiComponentViewer component from the project\\'s components directory using an alias path. UiComponentViewer is assumed to be a React component authored in MDX, possibly used for embedding live UI previews. No external dependencies outside of the local file structure are specified. This line enables the live component display in the remainder of the file.\nSOURCE: https://github.com/xyflow/web/blob/main/sites/reactflow.dev/src/content/components/nodes/labeled-group-node.mdx#2025-04-23_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nimport UiComponentViewer from '@/components/ui-component-viewer.mdx';\n```\n\n----------------------------------------\n\nTITLE: Installing xyflow Website Dependencies\nDESCRIPTION: Command to install project dependencies using pnpm package manager.\nSOURCE: https://github.com/xyflow/web/blob/main/sites/reactflow.dev/README.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n$ pnpm install\n```\n\n----------------------------------------\n\nTITLE: Displaying the Labeled Group Node with UiComponentViewer in MDX\nDESCRIPTION: This code snippet embeds the UiComponentViewer React component within the MDX document, supplying it an id of \\\"labeled-group-node\\\". This allows interactive or static display of the labeled group node UI, providing immediate feedback for documentation readers. Inputs include the identifier prop, and the output is a rendered visualization as part of the documentation page.\nSOURCE: https://github.com/xyflow/web/blob/main/sites/reactflow.dev/src/content/components/nodes/labeled-group-node.mdx#2025-04-23_snippet_1\n\nLANGUAGE: mdx\nCODE:\n```\n<UiComponentViewer id=\\\"labeled-group-node\\\" />\n```\n\n----------------------------------------\n\nTITLE: Importing Components for Drag Handle Documentation\nDESCRIPTION: Imports required components for displaying drag handle documentation, including a remote code viewer and an unused prop warning component.\nSOURCE: https://github.com/xyflow/web/blob/main/sites/svelteflow.dev/src/content/examples/nodes/drag-handle.mdx#2025-04-23_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport { RemoteCodeViewer } from 'xy-shared/server';\nimport UnusedPropWarning from '@/components/unused-prop-warning';\n```\n\n----------------------------------------\n\nTITLE: Importing API Reference Component for React Flow Hooks\nDESCRIPTION: A JSX code snippet that imports a server component called ApiReferenceSummary and renders it with the 'hooks' category parameter to display hook documentation.\nSOURCE: https://github.com/xyflow/web/blob/main/sites/svelteflow.dev/src/content/api-reference/hooks/index.mdx#2025-04-23_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport { ApiReferenceSummary } from 'xy-shared/server';\n\n# Hooks\n\n<ApiReferenceSummary category=\"hooks\" />\n```\n\n----------------------------------------\n\nTITLE: Importing RemoteCodeViewer Component in Svelte\nDESCRIPTION: Imports the RemoteCodeViewer component from the xy-shared/server module. This component is used to display remote code examples.\nSOURCE: https://github.com/xyflow/web/blob/main/sites/svelteflow.dev/src/content/examples/layout/dagre.mdx#2025-04-23_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport { RemoteCodeViewer } from 'xy-shared/server';\n```\n\n----------------------------------------\n\nTITLE: Configuring Node Types for React Flow\nDESCRIPTION: This code defines the custom node types available in the React Flow graph. It maps the 'custom' type to the CustomNode component.\nSOURCE: https://github.com/xyflow/web/blob/main/apps/example-apps/react/examples/layout/force-layout/README.mdx#2025-04-23_snippet_1\n\nLANGUAGE: JavaScript\nCODE:\n```\nconst nodeTypes = {\n  custom: CustomNode,\n};\n```\n\n----------------------------------------\n\nTITLE: Rendering UiComponentViewer for Zoom Slider in MDX\nDESCRIPTION: This MDX code renders the imported `UiComponentViewer` component. It passes the `id` prop with the value \"zoom-slider\", presumably to instruct the viewer component which specific UI element or documentation section (the Zoom Slider) to display. The exact output depends on the `UiComponentViewer` implementation.\nSOURCE: https://github.com/xyflow/web/blob/main/sites/reactflow.dev/src/content/components/controls/zoom-slider.mdx#2025-04-23_snippet_1\n\nLANGUAGE: mdx\nCODE:\n```\n<UiComponentViewer id=\"zoom-slider\" />\n```\n\n----------------------------------------\n\nTITLE: Importing Remote Code Viewer Component in Markdown\nDESCRIPTION: This code snippet imports a RemoteCodeViewer component from the xy-shared/server module. The component is used to display an interactive example of node intersections in Svelte Flow.\nSOURCE: https://github.com/xyflow/web/blob/main/sites/svelteflow.dev/src/content/examples/nodes/intersections.mdx#2025-04-23_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\nimport { RemoteCodeViewer } from 'xy-shared/server';\n```\n\n----------------------------------------\n\nTITLE: Running Development Servers\nDESCRIPTION: Various commands for running development servers for different parts of the project. Includes options for running all sites simultaneously or individual sites.\nSOURCE: https://github.com/xyflow/web/blob/main/README.md#2025-04-23_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\npnpm run dev\n```\n\nLANGUAGE: shell\nCODE:\n```\npnpm run dev:docs\n```\n\nLANGUAGE: shell\nCODE:\n```\npnpm run dev:reactflow.dev\npnpm run dev:svelteflow.dev\npnpm run dev:xyflow.com\npnpm run dev:style\n```\n\n----------------------------------------\n\nTITLE: Using RemoteCodeViewer Component\nDESCRIPTION: Component implementation to display context menu example code for SvelteFlow, specifying the framework and route parameters.\nSOURCE: https://github.com/xyflow/web/blob/main/sites/svelteflow.dev/src/content/examples/interaction/context-menu.mdx#2025-04-23_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\n<RemoteCodeViewer\n  route=\"examples/interaction/context-menu\"\n  framework=\"svelte\"\n/>\n```\n\n----------------------------------------\n\nTITLE: Remote Code Viewer Component Implementation\nDESCRIPTION: Component that loads and displays React Flow example code from a remote source, specifically for the overview example.\nSOURCE: https://github.com/xyflow/web/blob/main/apps/example-apps/react/examples/misc/overview/README.mdx#2025-04-23_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\n<RemoteCodeViewer route=\"examples/misc/overview\" framework=\"react\" />\n```\n\n----------------------------------------\n\nTITLE: Defining XYPosition Type in TypeScript\nDESCRIPTION: This snippet defines a TypeScript type called XYPosition, representing a 2D position with explicit x and y numeric properties. It is designed for use wherever positional data are handled in the project, requiring no external dependencies. Inputs are plain objects with x and y fields, and this type ensures compile-time validation for all objects representing positions, thus minimizing errors in coordinate manipulation.\nSOURCE: https://github.com/xyflow/web/blob/main/sites/reactflow.dev/src/content/api-reference/types/xy-position.mdx#2025-04-23_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\nexport type XYPosition = {\n  x: number;\n  y: number;\n};\n```\n\n----------------------------------------\n\nTITLE: Displaying Unused Prop Warning in JSX\nDESCRIPTION: This snippet renders an UnusedPropWarning component, which likely provides information about unused props in the context of Connection Lines or related components.\nSOURCE: https://github.com/xyflow/web/blob/main/sites/svelteflow.dev/src/content/examples/edges/custom-connectionline.mdx#2025-04-23_snippet_2\n\nLANGUAGE: jsx\nCODE:\n```\n<UnusedPropWarning />\n```\n\n----------------------------------------\n\nTITLE: Markdown Documentation for Node Creation on Edge Drop\nDESCRIPTION: Documentation markup defining the title and description for the feature of adding nodes when dropping connection lines. Includes a remote code viewer component reference.\nSOURCE: https://github.com/xyflow/web/blob/main/apps/example-apps/react/examples/nodes/add-node-on-edge-drop/README.mdx#2025-04-23_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n---\ntitle: Add Node On Edge Drop\ndescription: A new node appears wherever you drop the connection line\n---\n\nYou can create a new node when you drop the connection line on the pane by using the `onConnectStart` and `onConnectEnd` handlers.\n\n<RemoteCodeViewer\n  route=\"examples/nodes/add-node-on-edge-drop\"\n  framework=\"react\"\n/>\n```\n\n----------------------------------------\n\nTITLE: Importing Unused Prop Warning Component in Svelte\nDESCRIPTION: This snippet imports the UnusedPropWarning component from a local file, which is likely used to display warnings about unused props in the example.\nSOURCE: https://github.com/xyflow/web/blob/main/sites/svelteflow.dev/src/content/examples/misc/threlte-flow.mdx#2025-04-23_snippet_1\n\nLANGUAGE: svelte\nCODE:\n```\nimport UnusedPropWarning from '@/components/unused-prop-warning';\n```\n\n----------------------------------------\n\nTITLE: Rendering UiComponentViewer for Annotation Node in MDX\nDESCRIPTION: This MDX code snippet renders the previously imported `UiComponentViewer` component. It passes an `id` prop with the value \"annotation-node\", which likely instructs the component to display the specific UI or example related to the Annotation Node being documented. This depends on the `UiComponentViewer` component being successfully imported.\nSOURCE: https://github.com/xyflow/web/blob/main/sites/reactflow.dev/src/content/components/nodes/annotation-node.mdx#2025-04-23_snippet_1\n\nLANGUAGE: mdx\nCODE:\n```\n<UiComponentViewer id=\"annotation-node\" />\n```\n\n----------------------------------------\n\nTITLE: Rendering Examples Overview Component\nDESCRIPTION: Renders the ExamplesOverview component to display the collection of React Flow examples.\nSOURCE: https://github.com/xyflow/web/blob/main/sites/svelteflow.dev/src/content/examples/index.mdx#2025-04-23_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\n<ExamplesOverview />\n```\n\n----------------------------------------\n\nTITLE: Starting xyflow Development Server\nDESCRIPTION: Command to start the local development server for the xyflow website on port 3003. This allows for real-time development and testing.\nSOURCE: https://github.com/xyflow/web/blob/main/sites/svelteflow.dev/README.md#2025-04-23_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n$ pnpm start\n```\n\n----------------------------------------\n\nTITLE: Missing Edge Source/Target Warning (JSX)\nDESCRIPTION: This snippet illustrates an edge definition that causes the 'Can't create edge. An edge needs a source and a target' warning. The edge object uses incorrect property names (`nosource`, `notarget`) instead of the required `source` and `target` properties, making it impossible for React Flow to render the edge.\nSOURCE: https://github.com/xyflow/web/blob/main/sites/reactflow.dev/src/content/learn/troubleshooting/index.mdx#2025-04-23_snippet_13\n\nLANGUAGE: jsx\nCODE:\n```\nimport { ReactFlow } from '@xyflow/react';\nimport '@xyflow/react/dist/style.css';\n\nconst nodes = [\n  /* ... */\n];\n\nconst edges = [\n  {\n    nosource: '1',\n    notarget: '2',\n  },\n];\n\nfunction Flow(props) {\n  return <ReactFlow nodes={nodes} edges={edges} />;\n}\n```\n\n----------------------------------------\n\nTITLE: Importing Component for API Reference Display in JavaScript/JSX\nDESCRIPTION: Imports the ApiReferenceSummary React component from the 'xy-shared/server' module. This import enables the rendering of categorized API reference summaries, and the module dependency must be accessible in the project. Required for the component instantiation shown below. No additional parameters are involved at this stage.\nSOURCE: https://github.com/xyflow/web/blob/main/sites/reactflow.dev/src/content/api-reference/types/index.mdx#2025-04-23_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport { ApiReferenceSummary } from 'xy-shared/server';\n```\n\n----------------------------------------\n\nTITLE: Building xyflow Website for Production\nDESCRIPTION: Command to build the xyflow website for production deployment using pnpm.\nSOURCE: https://github.com/xyflow/web/blob/main/sites/svelteflow.dev/README.md#2025-04-23_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n$ pnpm build\n```\n\n----------------------------------------\n\nTITLE: Importing React Flow and D3 Force Layout\nDESCRIPTION: This snippet shows the necessary imports for using React Flow components and d3-force layout functions. It includes React hooks and custom components.\nSOURCE: https://github.com/xyflow/web/blob/main/apps/example-apps/react/examples/layout/force-layout/README.mdx#2025-04-23_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport { useCallback } from 'react';\nimport ReactFlow, {\n  MiniMap,\n  Controls,\n  Background,\n  useNodesState,\n  useEdgesState,\n  addEdge,\n} from 'reactflow';\nimport { forceSimulation, forceLink, forceManyBody, forceX, forceY } from 'd3-force';\n\nimport CustomNode from './CustomNode';\n\nimport 'reactflow/dist/style.css';\n```\n\n----------------------------------------\n\nTITLE: React Flow Hierarchical Data Structure Example Configuration\nDESCRIPTION: Markdown configuration for an interactive example demonstrating expandable/collapsible node functionality in React Flow. The example uses d3-hierarchy or dagre.js for layout with optional animations via d3-timer.\nSOURCE: https://github.com/xyflow/web/blob/main/apps/example-apps/react/examples/layout/expand-collapse/README.mdx#2025-04-23_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n---\ntitle: Expand and Collapse\ndescription: Click on parent nodes to toggle the visibility of their children\nis_pro_example: true\n---\n```\n\n----------------------------------------\n\nTITLE: Starting Development Server with Hot Reloading\nDESCRIPTION: Runs the Vite development server with hot reloading. It includes a custom plugin to regenerate the source.json file when examples are updated, but external apps consuming it won't hot-reload.\nSOURCE: https://github.com/xyflow/web/blob/main/apps/example-apps/README.md#2025-04-23_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n### `pnpm dev`\n```\n\n----------------------------------------\n\nTITLE: Configuring Connection Limits with isConnectable Prop\nDESCRIPTION: Example showing how to limit the number of connections a handle can have in React Flow. The isConnectable prop can accept a boolean value, a number for maximum connections, or a callback function that returns a boolean.\nSOURCE: https://github.com/xyflow/web/blob/main/apps/example-apps/react/examples/nodes/connection-limit/README.mdx#2025-04-23_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n---\ntitle: Connection Limit\ndescription: Use the `isConnectable` prop to limit the number of connections a handle can have\n---\n```\n\n----------------------------------------\n\nTITLE: Displaying Optimized Images using Next.js Image Component in MDX\nDESCRIPTION: Utilizes the Next.js `Image` component within MDX to render images with optimizations. Requires the `Image` component to be imported previously. Attributes like `alt`, `src`, `width`, `height`, and `className` are used for accessibility, source definition, explicit dimensions (preventing layout shift), and applying custom styles (Tailwind CSS in this case), respectively.\nSOURCE: https://github.com/xyflow/web/blob/main/sites/xyflow.com/src/content/why-svelte-flow.mdx#2025-04-23_snippet_2\n\nLANGUAGE: jsx\nCODE:\n```\n<Image\n  alt=\"A collection of messages on discord where people ask us to port React Flow to other front-end frameworks like solidjs, svelte, preact, flutter, and angular.\"\n  src=\"/img/blog/2023-why-svelte/discord-langs.png\"\n  width={800}\n  height={600}\n  className=\"mt-4\"\n/>\n```\n\nLANGUAGE: jsx\nCODE:\n```\n<Image\n  alt=\"An interactive map with the title Where do our products come from? It shows which countries this company's groceries come from, sorted by type of grocery like snacks, nuts, or dry fruits.\"\n  src=\"/img/blog/2023-why-svelte/svelte-project-koro.gif\"\n  width={933}\n  height={645}\n  className=\"mt-4\"\n/>\n```\n\nLANGUAGE: jsx\nCODE:\n```\n<Image\n  alt=\"A graph showing the ratio of retention over time for popular front-end technologies. Svelte and Solid have the highest retention around 90 percent. React is around 83 percent. Ember and Angular have the lowest at 19 and 42 percent, respectively.\"\n  src=\"/img/blog/2023-why-svelte/js2022-survey.png\"\n  width={1040}\n  height={959}\n  className=\"mt-4\"\n/>\n```\n\nLANGUAGE: jsx\nCODE:\n```\n<Image\n  alt=\"A prototype of Svelte Flow. There are 6 nodes in the viewport with a minimap, controls to zoom in and out, and nodes and edges with various colors\"\n  src=\"/img/blog/2023-why-svelte/svelte-zero.gif\"\n  width={1175}\n  height={753}\n  className=\"mt-4\"\n/>\n```\n\n----------------------------------------\n\nTITLE: Using updateNodeColor Action in React Component (TypeScript/React)\nDESCRIPTION: Demonstrates how a React component retrieves and invokes the updateNodeColor action from the Zustand store. The store's updateNodeColor function is accessed via the useStore hook and then called (typically in an event handler) with the node's id and the selected color. Prerequisite: store setup with updateNodeColor defined, useStore hook available. Inputs: nodeId and color. Output: triggers store update, causing UI to rerender. Intended for use inside functional components.\nSOURCE: https://github.com/xyflow/web/blob/main/sites/reactflow.dev/src/content/learn/advanced-use/state-management.mdx#2025-04-23_snippet_2\n\nLANGUAGE: typescriptreact\nCODE:\n```\nconst updateNodeColor = useStore((s) => s.updateNodeColor);\n...\n<button onClick={() => updateNodeColor(nodeId, color)} />;\n```\n\n----------------------------------------\n\nTITLE: Importing Emoji Component in JavaScript/React\nDESCRIPTION: This code snippet imports the named export `Emoji` from the `@xyflow/xy-ui` package. This component is likely used within a React application (specifically, this announcement page) to render emoji characters inline with text, enhancing the visual presentation. It requires the `@xyflow/xy-ui` package to be installed as a dependency.\nSOURCE: https://github.com/xyflow/web/blob/main/sites/reactflow.dev/src/content/whats-new/2024-03-15.mdx#2025-04-23_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport { Emoji } from '@xyflow/xy-ui';\n```\n\n----------------------------------------\n\nTITLE: Styling a Caption Div using Inline Styles\nDESCRIPTION: This JSX snippet renders a `div` element containing a caption for the preceding code example. It uses inline styles to set the font size to 12px, add negative top margin for positioning, center the text, and set the text color to a shade of gray.\nSOURCE: https://github.com/xyflow/web/blob/main/sites/xyflow.com/src/content/react-flow-v10.mdx#2025-04-23_snippet_2\n\nLANGUAGE: jsx\nCODE:\n```\n<div\n  style={{ fontSize: 12, marginTop: -24, textAlign: 'center', color: '#777' }}\n>\n  Some of the most awaited features: Sub Flows!\n</div>\n```\n\n----------------------------------------\n\nTITLE: JSX Image Link Component\nDESCRIPTION: Interactive link component containing an image of the survey results dashboard\nSOURCE: https://github.com/xyflow/web/blob/main/sites/xyflow.com/src/content/react-flow-developer-survey-2023.mdx#2025-04-23_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\n<Bleed>\n  <a\n    href=\"https://reactflow.dev/developer-survey-2023\"\n    target=\"_blank\"\n    rel=\"noopener noreferrer\"\n  >\n    <Image\n      src=\"/img/blog/2023-developer-survey/dev-survey-screenshot.jpg\"\n      alt=\"screenshot of the interactive survey results\"\n      imageClassName=\"border border-gray-200 rounded-sm\"\n    />\n  </a>\n</Bleed>\n```\n\n----------------------------------------\n\nTITLE: React Components Import for Documentation Page\nDESCRIPTION: Imports components from Nextra and custom UI libraries for building the documentation page. This includes Callout for warnings and ContentGrid/ContentGridItem for layout structure.\nSOURCE: https://github.com/xyflow/web/blob/main/sites/svelteflow.dev/src/content/api-reference/index.mdx#2025-04-23_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport { Callout } from 'nextra/components';\nimport { ContentGrid, ContentGridItem } from '@xyflow/xy-ui';\nimport { BlogPostPreview } from 'xy-shared';\n```\n\n----------------------------------------\n\nTITLE: Importing Components in Next.js Blog Post\nDESCRIPTION: Import statements for components from nextra, xy-shared, and next/image used in the blog post layout\nSOURCE: https://github.com/xyflow/web/blob/main/sites/xyflow.com/src/content/react-flow-pro-platform-open-source.mdx#2025-04-23_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport { Bleed } from 'nextra/components';\nimport { Embed, Text } from 'xy-shared';\nimport Image from 'next/image';\n```\n\n----------------------------------------\n\nTITLE: Markdown Frontmatter Configuration\nDESCRIPTION: YAML frontmatter configuration for the blog post defining metadata like title, intro, date, authors, tags, and featured image\nSOURCE: https://github.com/xyflow/web/blob/main/sites/xyflow.com/src/content/react-flow-pro-platform-open-source.mdx#2025-04-23_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n---\ntitle: 'React Flow Pro Platform goes open source'\nintro: 'We rebuilt the Pro Platform from the ground up and it is now open source. We hope some folks can take inspiration for their own OSS projects, and the pro subscribers enjoy the new look and features.'\ndate: 6 December 2023\nauthors: ['christopher', 'john']\ntags: ['react-flow', 'open-source']\nimage: '/img/blog/v11-reactflow-header.png'\n---\n```\n\n----------------------------------------\n\nTITLE: Importing Components in MDX Blog Post\nDESCRIPTION: Front matter and import statements for a blog post using MDX and Nextra components\nSOURCE: https://github.com/xyflow/web/blob/main/sites/xyflow.com/src/content/asking-for-money-for-open-source.mdx#2025-04-23_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport { Bleed } from 'nextra/components';\nimport { Image } from 'xy-shared';\n```"
  }
]