[
  {
    "owner": "sqldelight",
    "repo": "sqldelight",
    "content": "TITLE: Configuring SQLDelight Gradle Plugin in Kotlin\nDESCRIPTION: This snippet demonstrates how to apply the SQLDelight Gradle plugin in a Kotlin project file. It includes setting up repositories, defining the database configuration, and optionally specifying the dialect and enabling asynchronous code generation.\nSOURCE: https://github.com/sqldelight/sqldelight/blob/master/docs/common/index_gradle_database.md#2025-04-23_snippet_0\n\nLANGUAGE: kotlin\nCODE:\n```\nplugins {\n  id(\"app.cash.sqldelight\") version \"{{ versions.sqldelight }}\"\n}\n \nrepositories {\n  google()\n  mavenCentral()\n}\n\nsqldelight {\n  databases {\n    create(\"Database\") {\n      packageName.set(\"com.example\"){% if dialect %}\n      dialect(\"{{ dialect }}:{{ versions.sqldelight }}\"){% endif %}{% if async %}\n      generateAsync.set(true){% endif %}\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Custom Column Types in SQLDelight\nDESCRIPTION: This snippet demonstrates how to define custom column types in SQLDelight using the columnAdapter function. It shows an example of creating a custom type for a list of integers stored as a comma-separated string in the database.\nSOURCE: https://github.com/sqldelight/sqldelight/blob/master/docs/native_sqlite/types.md#2025-04-23_snippet_0\n\nLANGUAGE: kotlin\nCODE:\n```\nval listOfIntsAdapter = columnAdapter<List<Int>, String>(\n    decode = { string ->\n        string.split(\",\").map { it.toInt() }\n    },\n    encode = { list ->\n        list.joinToString(separator = \",\")\n    }\n)\n```\n\n----------------------------------------\n\nTITLE: Creating Hockey Player Table Schema in SQLite\nDESCRIPTION: SQL schema definition for a hockey_player table with auto-incrementing ID, player name, and jersey number. This demonstrates SQLDelight's basic table creation syntax with primary key and NOT NULL constraints.\nSOURCE: https://github.com/sqldelight/sqldelight/blob/master/README.md#2025-04-23_snippet_0\n\nLANGUAGE: sql\nCODE:\n```\nCREATE TABLE hockey_player (\n  id INTEGER NOT NULL PRIMARY KEY AUTOINCREMENT,\n  name TEXT NOT NULL,\n  number INTEGER NOT NULL\n);\n```\n\n----------------------------------------\n\nTITLE: Variable Arguments in SQLDelight Queries\nDESCRIPTION: Demonstrates how to pass collections as query parameters using the IN operator, allowing multiple values to be checked in a single query.\nSOURCE: https://github.com/sqldelight/sqldelight/blob/master/docs/common/query_arguments.md#2025-04-23_snippet_2\n\nLANGUAGE: sql\nCODE:\n```\nselectByNames:\nSELECT *\nFROM hockeyPlayer\nWHERE full_name IN ?;\n```\n\nLANGUAGE: kotlin\nCODE:\n```\nplayerQueries.selectByNames(listOf(\"Alec\", \"Jake\", \"Matt\"))\n```\n\n----------------------------------------\n\nTITLE: Implementing ColumnAdapter for Custom Types\nDESCRIPTION: Demonstrates the implementation of a ColumnAdapter to convert between database TEXT values and List<String> objects. Shows database initialization with the custom adapter.\nSOURCE: https://github.com/sqldelight/sqldelight/blob/master/docs/common/custom_column_types.md#2025-04-23_snippet_1\n\nLANGUAGE: kotlin\nCODE:\n```\nval listOfStringsAdapter = object : ColumnAdapter<List<String>, String> {\n  override fun decode(databaseValue: String) =\n    if (databaseValue.isEmpty()) {\n      listOf()\n    } else {\n      databaseValue.split(\",\")\n    }\n  override fun encode(value: List<String>) = value.joinToString(separator = \",\")\n}\n\nval queryWrapper: Database = Database(\n  driver = driver,\n  hockeyPlayerAdapter = hockeyPlayer.Adapter(\n    cup_winsAdapter = listOfStringsAdapter\n  )\n)\n```\n\n----------------------------------------\n\nTITLE: Creating Hockey Player Database Schema in SQLDelight\nDESCRIPTION: Demonstrates creating a hockey player database schema including a table definition with primary key, an index for player names, and initial data insertion. The schema includes player number and full name fields with appropriate constraints.\nSOURCE: https://github.com/sqldelight/sqldelight/blob/master/docs/common/index_schema_sq.md#2025-04-23_snippet_0\n\nLANGUAGE: sql\nCODE:\n```\nCREATE TABLE hockeyPlayer (\n  player_number INTEGER PRIMARY KEY NOT NULL,\n  full_name TEXT NOT NULL\n);\n\nCREATE INDEX hockeyPlayer_full_name ON hockeyPlayer(full_name);\n\nINSERT INTO hockeyPlayer (player_number, full_name)\nVALUES (15, 'Ryan Getzlaf');\n```\n\n----------------------------------------\n\nTITLE: Grouping SQL Statements in Transaction with Upsert Block\nDESCRIPTION: This example demonstrates how to group multiple SQL statements to be executed together in a transaction using the 'upsert' block in SQLDelight. The block contains an UPDATE statement followed by an INSERT OR IGNORE statement, implementing an upsert pattern where it first attempts to update an existing record and then inserts a new one if the update doesn't affect any rows.\nSOURCE: https://github.com/sqldelight/sqldelight/blob/master/docs/common/grouping_statements.md#2025-04-23_snippet_0\n\nLANGUAGE: sql\nCODE:\n```\nupsert {\n  UPDATE myTable\n  SET column1 = :column1,\n      column2 = :column2\n  WHERE id = :id;\n\n  INSERT OR IGNORE INTO myTable (id, column1, column2)\n  VALUES (:id, :column1, :column2);\n}\n```\n\n----------------------------------------\n\nTITLE: Returning Values from SQLDelight Transactions\nDESCRIPTION: Demonstrates how to use transactionWithResult to return data from a transaction. Returns a List<Player> by executing a select query within the transaction.\nSOURCE: https://github.com/sqldelight/sqldelight/blob/master/docs/common/transactions.md#2025-04-23_snippet_1\n\nLANGUAGE: kotlin\nCODE:\n```\nval players: List<Player> = database.playerQueries.transactionWithResult {\n  database.playerQueries.selectAll().executeAsList()\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring SQLDelight Gradle Plugin in Groovy\nDESCRIPTION: This snippet shows how to apply the SQLDelight Gradle plugin in a Groovy project file. It covers setting up repositories, configuring the database, and optionally specifying the dialect and enabling asynchronous code generation.\nSOURCE: https://github.com/sqldelight/sqldelight/blob/master/docs/common/index_gradle_database.md#2025-04-23_snippet_1\n\nLANGUAGE: groovy\nCODE:\n```\nplugins {\n  id \"app.cash.sqldelight\" version \"{{ versions.sqldelight }}\"\n}\n\nrepositories {\n  google()\n  mavenCentral()\n}\n\nsqldelight {\n  databases {\n    Database { // This will be the name of the generated database class.\n      packageName = \"com.example\"{% if dialect %}\n      dialect \"{{ dialect }}:{{ versions.sqldelight }}\"{% endif %}{% if async %}\n      generateAsync = true{% endif %}\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Initial Database Schema in SQLDelight\nDESCRIPTION: Creates an initial database schema with user and message tables that have foreign key relationships.\nSOURCE: https://github.com/sqldelight/sqldelight/blob/master/docs/js_sqlite/migrations.md#2025-04-23_snippet_0\n\nLANGUAGE: sql\nCODE:\n```\nCREATE TABLE user(\n  id INTEGER NOT NULL PRIMARY KEY AUTOINCREMENT,\n  name TEXT NOT NULL\n);\n\nCREATE TABLE message(\n  id INTEGER NOT NULL PRIMARY KEY AUTOINCREMENT,\n  userId INTEGER NOT NULL,\n  content TEXT NOT NULL,\n  FOREIGN KEY (userId) REFERENCES user(id)\n);\n```\n\n----------------------------------------\n\nTITLE: Executing SQLDelight Queries in Kotlin\nDESCRIPTION: Demonstrates how to use generated SQLDelight query objects to execute database operations in Kotlin. Shows examples of selecting all players and inserting new players using both parameter-based and object-based insertion methods.\nSOURCE: https://github.com/sqldelight/sqldelight/blob/master/docs/common/index_queries.md#2025-04-23_snippet_1\n\nLANGUAGE: kotlin\nCODE:\n```\n{% if async %}suspend {% endif %}fun doDatabaseThings(driver: SqlDriver) {\n  val database = Database(driver)\n  val playerQueries: PlayerQueries = database.playerQueries\n\n  println(playerQueries.selectAll().{% if async %}await{% else %}execute{% endif %}AsList()) \n  // [HockeyPlayer(15, \"Ryan Getzlaf\")]\n\n  playerQueries.insert(player_number = 10, full_name = \"Corey Perry\")\n  println(playerQueries.selectAll().{% if async %}await{% else %}execute{% endif %}AsList()) \n  // [HockeyPlayer(15, \"Ryan Getzlaf\"), HockeyPlayer(10, \"Corey Perry\")]\n\n  val player = HockeyPlayer(10, \"Ronald McDonald\")\n  playerQueries.insertFullPlayerObject(player)\n}\n```\n\n----------------------------------------\n\nTITLE: Returning Values from SQLDelight Transactions\nDESCRIPTION: Shows how to return values from a transaction block. The transaction will execute all operations and return the specified value if successful, or roll back if an exception occurs.\nSOURCE: https://github.com/sqldelight/sqldelight/blob/master/docs/android_sqlite/transactions.md#2025-04-23_snippet_1\n\nLANGUAGE: kotlin\nCODE:\n```\nval numberOfRows = db.transaction {\n  // Do some inserts and return the number of rows affected.\n  val rows = db.someQueries.insertA() + db.someQueries.insertB()\n  return@transaction rows\n}\n```\n\n----------------------------------------\n\nTITLE: Error Handling in SQLDelight Transactions with Kotlin\nDESCRIPTION: This snippet shows how to handle errors within a SQLDelight transaction using Kotlin. It demonstrates that if an exception is thrown, the entire transaction is rolled back.\nSOURCE: https://github.com/sqldelight/sqldelight/blob/master/docs/jvm_postgresql/transactions.md#2025-04-23_snippet_2\n\nLANGUAGE: kotlin\nCODE:\n```\ntry {\n    database.transaction {\n        database.someQueries.insertData()\n        if (someCondition) {\n            throw IllegalStateException(\"Error occurred\")\n        }\n        database.someQueries.updateData()\n    }\n} catch (e: IllegalStateException) {\n    // Handle the error\n    println(\"Transaction failed: ${e.message}\")\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a PagingSource with SQLDelight and Paging 3 Library in Kotlin\nDESCRIPTION: Implementation of a custom PagingSource using SQLDelight queries to load paged data. This example shows how to create a paging source for a Player entity using SQLDelight queries with offset-based pagination.\nSOURCE: https://github.com/sqldelight/sqldelight/blob/master/docs/jvm_h2/androidx_paging.md#2025-04-23_snippet_0\n\nLANGUAGE: kotlin\nCODE:\n```\nclass PlayerPagingSource(\n    private val queryProvider: () -> Query<Player>\n) : PagingSource<Int, Player>() {\n    override suspend fun load(params: LoadParams<Int>): LoadResult<Int, Player> {\n        val page = params.key ?: 0\n        val pageSize = params.loadSize\n\n        return try {\n            val data = queryProvider()\n                .copy(limit = pageSize.toLong(), offset = (page * pageSize).toLong())\n                .executeAsList()\n\n            LoadResult.Page(\n                data = data,\n                prevKey = if (page <= 0) null else page - 1,\n                nextKey = if (data.size < pageSize) null else page + 1\n            )\n        } catch (e: Exception) {\n            LoadResult.Error(e)\n        }\n    }\n\n    override fun getRefreshKey(state: PagingState<Int, Player>): Int? {\n        return state.anchorPosition?.let { anchorPosition ->\n            val anchorPage = state.closestPageToPosition(anchorPosition)\n            anchorPage?.prevKey?.plus(1) ?: anchorPage?.nextKey?.minus(1)\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Multiple Query Transaction in Kotlin with SQLDelight\nDESCRIPTION: This code snippet shows how to perform a transaction involving multiple queries in Kotlin using SQLDelight. It demonstrates the use of the 'transaction' function for maintaining data consistency across multiple operations.\nSOURCE: https://github.com/sqldelight/sqldelight/blob/master/docs/multiplatform_sqlite/transactions.md#2025-04-23_snippet_1\n\nLANGUAGE: kotlin\nCODE:\n```\ndatabase.transaction {\n    database.playerQueries.insert(\"Ryan\", \"Getzlaf\")\n    database.playerQueries.insert(\"Jonas\", \"Hiller\")\n}\n```\n\n----------------------------------------\n\nTITLE: Transaction Callbacks in SQLDelight\nDESCRIPTION: Shows how to implement afterRollback and afterCommit callbacks in a transaction. Logs messages after transaction completion or rollback.\nSOURCE: https://github.com/sqldelight/sqldelight/blob/master/docs/common/transactions.md#2025-04-23_snippet_4\n\nLANGUAGE: kotlin\nCODE:\n```\ndatabase.playerQueries.transaction {\n  afterRollback { log(\"No players were inserted.\") }\n  afterCommit { log(\"${players.size} players were inserted.\") }\n\n  players.forEach { player ->\n    database.playerQueries.insert(\n      player_number = player.number,\n      full_name = player.fullName\n    )\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing SQLDelight Driver Factory for Native Platforms\nDESCRIPTION: This snippet demonstrates the native platform implementation of the DriverFactory class, using NativeSqliteDriver to create a SqlDriver instance.\nSOURCE: https://github.com/sqldelight/sqldelight/blob/master/docs/multiplatform_sqlite/index.md#2025-04-23_snippet_4\n\nLANGUAGE: kotlin\nCODE:\n```\nactual class DriverFactory {\n  actual fun createDriver(): SqlDriver {\n    return NativeSqliteDriver(Database.Schema, \"test.db\")\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Creating SQL Table Schema in SQLDelight\nDESCRIPTION: Defines a hockey_player table schema with integer ID, text name, and integer number fields. This is a basic example of SQLDelight's SQL schema definition.\nSOURCE: https://github.com/sqldelight/sqldelight/blob/master/docs/index.md#2025-04-23_snippet_0\n\nLANGUAGE: sql\nCODE:\n```\nCREATE TABLE hockey_player (\n  id INTEGER NOT NULL PRIMARY KEY AUTOINCREMENT,\n  name TEXT NOT NULL,\n  number INTEGER NOT NULL\n);\n```\n\n----------------------------------------\n\nTITLE: Defining SQL Queries in SQLDelight\nDESCRIPTION: SQL query definitions for selecting all players and inserting player data into a hockey player database. Includes labeled statements for selecting all records and two different insertion patterns.\nSOURCE: https://github.com/sqldelight/sqldelight/blob/master/docs/common/index_queries.md#2025-04-23_snippet_0\n\nLANGUAGE: sql\nCODE:\n```\nselectAll:\nSELECT *\nFROM hockeyPlayer;\n\ninsert:\nINSERT INTO hockeyPlayer(player_number, full_name)\nVALUES (?, ?);\n\ninsertFullPlayerObject:\nINSERT INTO hockeyPlayer(player_number, full_name)\nVALUES ?;\n```\n\n----------------------------------------\n\nTITLE: Configuring SQLDelight for Multiplatform Projects with Kotlin DSL\nDESCRIPTION: Setup for SQLDelight in a Kotlin Multiplatform project. This configuration creates a database accessible from different platform targets and specifies source directory locations.\nSOURCE: https://github.com/sqldelight/sqldelight/blob/master/docs/jvm_h2/gradle.md#2025-04-23_snippet_4\n\nLANGUAGE: kotlin\nCODE:\n```\nkotlin {\n  sourceSets {\n    commonMain.dependencies {\n      implementation(\"app.cash.sqldelight:runtime:2.0.1\")\n    }\n    androidMain.dependencies {\n      implementation(\"app.cash.sqldelight:android-driver:2.0.1\")\n    }\n    iosMain.dependencies {\n      implementation(\"app.cash.sqldelight:native-driver:2.0.1\")\n    }\n    // JS Driver:\n    jsMain.dependencies {\n      implementation(\"app.cash.sqldelight:web-worker-driver:2.0.1\")\n      // or\n      implementation(\"app.cash.sqldelight:worker-driver:2.0.1\")\n    }\n    // Desktop Driver:\n    jvmMain.dependencies {\n      implementation(\"app.cash.sqldelight:sqlite-driver:2.0.1\")\n      // or\n      implementation(\"app.cash.sqldelight:jdbc-driver:2.0.1\")\n    }\n    // Native (desktop) Driver:\n    val nativeMain by creating {\n      dependencies {\n        implementation(\"app.cash.sqldelight:native-driver:2.0.1\")\n      }\n    }\n  }\n}\n\nsqldelight {\n  databases {\n    create(\"Database\") {\n      packageName.set(\"com.example.db\")\n      // By default, should be generated in commonMain\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Basic Transaction Implementation in SQLDelight\nDESCRIPTION: Shows how to execute multiple database insert operations within a single transaction. Uses a list of Player objects to perform batch inserts.\nSOURCE: https://github.com/sqldelight/sqldelight/blob/master/docs/common/transactions.md#2025-04-23_snippet_0\n\nLANGUAGE: kotlin\nCODE:\n```\nval players = listOf<Player>()\ndatabase.playerQueries.transaction {\n  players.forEach { player ->\n    database.playerQueries.insert(\n      player_number = player.number,\n      full_name = player.fullName\n    )\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Using Coroutines with SQLDelight Queries\nDESCRIPTION: This snippet shows how to use the coroutines extension to transform SQLDelight queries into asynchronous operations. It demonstrates executing a query as a suspending function and collecting query results as a Flow.\nSOURCE: https://github.com/sqldelight/sqldelight/blob/master/docs/js_sqlite/coroutines.md#2025-04-23_snippet_2\n\nLANGUAGE: kotlin\nCODE:\n```\nval query: Query<Person> = database.personQueries.selectAll()\n\n// Suspend until the query is executed and return the results:\nsuspend fun loadPeople(): List<Person> {\n  return query.awaitAsList()\n}\n\n// Alternatively, return a Flow of the query's listener.\n// If the query changes, the flow will emit.\nfun loadPeopleAsFlow(): Flow<List<Person>> {\n  return query.asFlow().mapToList(backgroundDispatcher)\n}\n```\n\n----------------------------------------\n\nTITLE: Handling Nested Transactions in SQLDelight with Kotlin\nDESCRIPTION: This example shows how to handle nested transactions in SQLDelight. It demonstrates that inner transactions are flattened into the outer transaction, maintaining ACID properties.\nSOURCE: https://github.com/sqldelight/sqldelight/blob/master/docs/native_sqlite/transactions.md#2025-04-23_snippet_1\n\nLANGUAGE: kotlin\nCODE:\n```\ndatabase.transaction {\n  personQueries.insert(\"Alec\", \"Strong\")\n  database.transaction {\n    personQueries.insert(\"Jake\", \"Wharton\")\n    personQueries.insert(\"Matt\", \"Precious\")\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Managing Transaction State with Rollback\nDESCRIPTION: Shows how to manually control transaction state by marking it for rollback. The transaction will roll back when completed if rollback() is called.\nSOURCE: https://github.com/sqldelight/sqldelight/blob/master/docs/jvm_mysql/transactions.md#2025-04-23_snippet_2\n\nLANGUAGE: kotlin\nCODE:\n```\ndatabase.transaction {\n  database.userQueries.insert(\"user\", \"name\")\n  rollback()\n  database.userQueries.insert(\"will_not_execute\", \"name\")\n  // Transaction automatically rolls back and second insert doesn't run\n}\n```\n\n----------------------------------------\n\nTITLE: Adding SQLDelight Driver Dependencies in Groovy DSL\nDESCRIPTION: This snippet demonstrates how to add SQLDelight driver dependencies for different platforms (Android, native, and JVM) using Groovy DSL in the build.gradle file.\nSOURCE: https://github.com/sqldelight/sqldelight/blob/master/docs/multiplatform_sqlite/index.md#2025-04-23_snippet_1\n\nLANGUAGE: groovy\nCODE:\n```\nkotlin {\n  sourceSets.androidMain.dependencies {\n    implementation \"app.cash.sqldelight:android-driver:{{ versions.sqldelight }}\"\n  }\n\n  // or iosMain, windowsMain, etc.\n  sourceSets.nativeMain.dependencies {\n    implementation \"app.cash.sqldelight:native-driver:{{ versions.sqldelight }}\"\n  }\n\n  sourceSets.jvmMain.dependencies {\n    implementation \"app.cash.sqldelight:sqlite-driver:{{ versions.sqldelight }}\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining a Custom Type Mapping in SQLDelight\nDESCRIPTION: Shows how to define a custom type mapping for a query result with the AS keyword in SQL. This allows for returning different types from a query beyond the default generated models.\nSOURCE: https://github.com/sqldelight/sqldelight/blob/master/docs/jvm_postgresql/custom_projections.md#2025-04-23_snippet_1\n\nLANGUAGE: sql\nCODE:\n```\nSELECT *\nFROM player\nWHERE team_id = :team_id\nORDER BY full_name;\n\nselectAll:\nSELECT *\nFROM player;\n```\n\n----------------------------------------\n\nTITLE: Implementing Optimistic Locking with SQLDelight\nDESCRIPTION: This snippet demonstrates how to use the LOCK keyword in SQLDelight to implement optimistic locking. It shows the table creation with a lock column and the correct way to perform updates using the lock.\nSOURCE: https://github.com/sqldelight/sqldelight/blob/master/docs/common/types_server_migrations.md#2025-04-23_snippet_0\n\nLANGUAGE: SQL\nCODE:\n```\nCREATE TABLE hockeyPlayer(\n  id INT AS VALUE,\n  version_number INT AS LOCK,\n  name VARCHAR(8)\n);\n\n-- This will fail (and the IDE plugin will suggest rewriting to the below)\nupdateName:\nUPDATE hockeyPlayer\nSET name = ?;\n\n-- This will pass compilation\nupdateNamePassing:\nUPDATE hockeyPlayer\nSET name = ?\n    version_number = :version_number + 1\nWHERE version_number = :version_number;\n```\n\n----------------------------------------\n\nTITLE: Basic Transaction Usage in SQLDelight\nDESCRIPTION: Demonstrates how to execute a basic transaction in SQLDelight. The transaction block ensures that all operations within it are executed atomically, with automatic rollback on failure.\nSOURCE: https://github.com/sqldelight/sqldelight/blob/master/docs/android_sqlite/transactions.md#2025-04-23_snippet_0\n\nLANGUAGE: kotlin\nCODE:\n```\nval db = driver.createDatabase()\n\ndb.transaction {\n  // Insert stuff.\n  // Update stuff.\n  // Delete stuff.\n}\n```\n\n----------------------------------------\n\nTITLE: Manual Transaction Rollback in SQLDelight\nDESCRIPTION: Shows how to manually trigger a transaction rollback based on a condition. Demonstrates rolling back when encountering a player with number 0.\nSOURCE: https://github.com/sqldelight/sqldelight/blob/master/docs/common/transactions.md#2025-04-23_snippet_2\n\nLANGUAGE: kotlin\nCODE:\n```\ndatabase.playerQueries.transaction {\n  players.forEach { player ->\n    if (player.number == 0) rollback()\n    database.playerQueries.insert(\n      player_number = player.number,\n      full_name = player.fullName\n    )\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Working with Nested Transactions in SQLDelight\nDESCRIPTION: Demonstrates nested transaction behavior in SQLDelight. This example shows how inner transactions are merged with their parent transaction, with rollbacks affecting the entire transaction chain.\nSOURCE: https://github.com/sqldelight/sqldelight/blob/master/docs/android_sqlite/transactions.md#2025-04-23_snippet_5\n\nLANGUAGE: kotlin\nCODE:\n```\ndb.transaction {\n  // Make some changes.\n\n  afterCommit {\n    // This is called once the outer transaction commits.\n  }\n\n  var ranInner = false\n  db.transaction {\n    // Make some more changes.\n\n    ranInner = true\n  }\n\n  if (!ranInner) rollback() // Rolls back the whole transaction\n}\n```\n\n----------------------------------------\n\nTITLE: Adding SQLDelight Driver Dependencies in Kotlin DSL\nDESCRIPTION: This snippet shows how to add SQLDelight driver dependencies for different platforms (Android, native, and JVM) using Kotlin DSL in the build.gradle.kts file.\nSOURCE: https://github.com/sqldelight/sqldelight/blob/master/docs/multiplatform_sqlite/index.md#2025-04-23_snippet_0\n\nLANGUAGE: kotlin\nCODE:\n```\nkotlin {\n  sourceSets.androidMain.dependencies {\n    implementation(\"app.cash.sqldelight:android-driver:{{ versions.sqldelight }}\")\n  }\n\n  // or iosMain, windowsMain, etc.\n  sourceSets.nativeMain.dependencies {\n    implementation(\"app.cash.sqldelight:native-driver:{{ versions.sqldelight }}\")\n  }\n\n  sourceSets.jvmMain.dependencies {\n    implementation(\"app.cash.sqldelight:sqlite-driver:{{ versions.sqldelight }}\")\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Custom TransactionWithResult in SQLDelight\nDESCRIPTION: Example of implementing a custom transactionWithResult function that encapsulates transaction logic for type safety and reuse across the application.\nSOURCE: https://github.com/sqldelight/sqldelight/blob/master/docs/jvm_h2/transactions.md#2025-04-23_snippet_3\n\nLANGUAGE: kotlin\nCODE:\n```\ninline fun <T> Database.transactionWithResult(body: () -> T): T {\n  val result = arrayOfNulls<T>(1)\n  transaction {\n    result[0] = body()\n  }\n  return result[0]!!\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring SQLDelight Dependencies for Multiplatform in Gradle (Groovy)\nDESCRIPTION: This snippet shows how to set up SQLDelight dependencies for different platforms (Android, Native, JVM, and JS) in a Kotlin multiplatform project's build.gradle file.\nSOURCE: https://github.com/sqldelight/sqldelight/blob/master/docs/js_sqlite/multiplatform.md#2025-04-23_snippet_0\n\nLANGUAGE: groovy\nCODE:\n```\nkotlin {\n  // The drivers needed will change depending on what platforms you target:\n\n  sourceSets.androidMain.dependencies {\n    implementation \"app.cash.sqldelight:android-driver:{{ versions.sqldelight }}\"\n  }\n\n  // or sourceSets.iosMain, sourceSets.windowsMain, etc.\n  sourceSets.nativeMain.dependencies {\n    implementation \"app.cash.sqldelight:native-driver:{{ versions.sqldelight }}\"\n  }\n\n  sourceSets.jvmMain.dependencies {\n    implementation \"app.cash.sqldelight:sqlite-driver:{{ versions.sqldelight }}\"\n  }\n\n  sourceSets.jsMain.dependencies {\n    implementation \"app.cash.sqldelight:sqljs-driver:{{ versions.sqldelight }}\"\n    implementation npm(\"sql.js\", \"1.6.2\")\n    implementation devNpm(\"copy-webpack-plugin\", \"9.1.0\")\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Executing Basic Transaction in SQLDelight (Kotlin)\nDESCRIPTION: Demonstrates how to execute a basic transaction in SQLDelight using the transactionWithResult function. It shows inserting two items within a transaction and returning a result.\nSOURCE: https://github.com/sqldelight/sqldelight/blob/master/docs/jvm_sqlite/transactions.md#2025-04-23_snippet_0\n\nLANGUAGE: kotlin\nCODE:\n```\nval newId = database.transactionWithResult {\n  val id1 = insertNewItem(item1)\n  val id2 = insertNewItem(item2)\n  id1 + id2\n}\n```\n\n----------------------------------------\n\nTITLE: Enabling Foreign Key Constraints for Native SQLite Driver in Kotlin\nDESCRIPTION: This code snippet demonstrates how to enable foreign key constraints when configuring a NativeSqliteDriver in SQLDelight. It uses the onConfiguration parameter to modify the DatabaseConfiguration and set foreignKeyConstraints to true.\nSOURCE: https://github.com/sqldelight/sqldelight/blob/master/docs/native_sqlite/foreign_keys.md#2025-04-23_snippet_0\n\nLANGUAGE: kotlin\nCODE:\n```\nNativeSqliteDriver(\n  schema = Database.Schema,\n  onConfiguration = { config: DatabaseConfiguration ->\n    config.copy(\n      extendedConfig = DatabaseConfiguration.Extended(foreignKeyConstraints = true)\n    )\n  }\n)\n```\n\n----------------------------------------\n\nTITLE: Creating a Common Driver Factory for SQLDelight\nDESCRIPTION: This snippet defines a common DriverFactory class and a createDatabase function to obtain a SqlDriver instance. It uses the expect keyword for platform-specific implementations.\nSOURCE: https://github.com/sqldelight/sqldelight/blob/master/docs/multiplatform_sqlite/index.md#2025-04-23_snippet_2\n\nLANGUAGE: kotlin\nCODE:\n```\nimport com.example.Database\n\nexpect class DriverFactory {\n  fun createDriver(): SqlDriver\n}\n\nfun createDatabase(driverFactory: DriverFactory): Database {\n  val driver = driverFactory.createDriver()\n  val database = Database(driver)\n\n  // Do more work with the database (see below).\n}\n```\n\n----------------------------------------\n\nTITLE: Transaction Observation in SQLDelight\nDESCRIPTION: Demonstrates how to observe database transactions using afterCommit and afterRollback callbacks, allowing for actions to be taken based on transaction completion status.\nSOURCE: https://github.com/sqldelight/sqldelight/blob/master/docs/jvm_h2/transactions.md#2025-04-23_snippet_5\n\nLANGUAGE: kotlin\nCODE:\n```\ndatabase.transaction {\n  // Do some database operations.\n  \n  afterCommit {\n    // This is called after the transaction successfully commits.\n  }\n  \n  afterRollback {\n    // This is called if the transaction was rolled back.\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Multiple Query Transaction in Swift with SQLDelight\nDESCRIPTION: This code snippet demonstrates how to perform a transaction involving multiple queries in Swift using SQLDelight. It shows the use of the 'transaction' method to maintain data consistency across multiple operations.\nSOURCE: https://github.com/sqldelight/sqldelight/blob/master/docs/multiplatform_sqlite/transactions.md#2025-04-23_snippet_3\n\nLANGUAGE: swift\nCODE:\n```\ntry! database.transaction { db in\n    try! db.playerQueries.insert(firstName: \"Ryan\", lastName: \"Getzlaf\")\n    try! db.playerQueries.insert(firstName: \"Jonas\", lastName: \"Hiller\")\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring SQLDelight for Multiplatform in Gradle\nDESCRIPTION: Configuration block for SQLDelight in a Kotlin Multiplatform project. Defines database name, package name and configures platform-specific drivers for Android, iOS, and JVM.\nSOURCE: https://github.com/sqldelight/sqldelight/blob/master/docs/jvm_mysql/gradle.md#2025-04-23_snippet_4\n\nLANGUAGE: gradle\nCODE:\n```\nkotlin {\n  sourceSets {\n    commonMain {\n      dependencies {\n        implementation \"app.cash.sqldelight:runtime:{{site.latest_version}}\"\n      }\n    }\n    androidMain {\n      dependencies {\n        implementation \"app.cash.sqldelight:android-driver:{{site.latest_version}}\"\n      }\n    }\n    iosMain {\n      dependencies {\n        implementation \"app.cash.sqldelight:native-driver:{{site.latest_version}}\"\n      }\n    }\n    jvmMain {\n      dependencies {\n        implementation \"app.cash.sqldelight:sqlite-driver:{{site.latest_version}}\"\n      }\n    }\n  }\n}\n\nsqldelight {\n  MyDatabase { // This will be the name of the generated database class.\n    packageName = \"com.example\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Enum Columns in SQLDelight\nDESCRIPTION: Shows how to create a table column that uses an enum type. The example maps a TEXT column to a custom enum Position from the HockeyPlayer class.\nSOURCE: https://github.com/sqldelight/sqldelight/blob/master/docs/common/custom_column_types.md#2025-04-23_snippet_2\n\nLANGUAGE: sql\nCODE:\n```\nimport com.example.hockey.HockeyPlayer;\n\nCREATE TABLE hockeyPlayer (\n  position TEXT AS HockeyPlayer.Position\n)\n```\n\n----------------------------------------\n\nTITLE: Handling Transaction Errors in SQLDelight with Kotlin\nDESCRIPTION: This snippet illustrates error handling in SQLDelight transactions. It shows how to use a try-catch block within a transaction to handle exceptions and perform rollback if needed.\nSOURCE: https://github.com/sqldelight/sqldelight/blob/master/docs/native_sqlite/transactions.md#2025-04-23_snippet_2\n\nLANGUAGE: kotlin\nCODE:\n```\ndatabase.transaction {\n  try {\n    personQueries.insert(\"Alec\", \"Strong\")\n    personQueries.insert(\"Jake\", \"Wharton\")\n    personQueries.insert(\"Matt\", \"Precious\")\n  } catch (e: SQLException) {\n    // Handle exception here.\n    // Transaction will automatically rollback.\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Single Query Transaction in Kotlin with SQLDelight\nDESCRIPTION: This snippet demonstrates how to perform a single query transaction in Kotlin using SQLDelight. It shows the usage of the 'transaction' function to ensure atomicity.\nSOURCE: https://github.com/sqldelight/sqldelight/blob/master/docs/multiplatform_sqlite/transactions.md#2025-04-23_snippet_0\n\nLANGUAGE: kotlin\nCODE:\n```\nval playerOne = database.transactionWithResult {\n    val player = database.playerQueries.selectById(1).executeAsOne()\n    database.playerQueries.updateName(player.name, player.id)\n    database.playerQueries.selectById(1).executeAsOne()\n}\n```\n\n----------------------------------------\n\nTITLE: Executing Basic Transaction in SQLDelight with Kotlin\nDESCRIPTION: This snippet demonstrates how to execute a basic transaction in SQLDelight using Kotlin. It shows the use of the 'transaction' block to ensure all operations are executed atomically.\nSOURCE: https://github.com/sqldelight/sqldelight/blob/master/docs/native_sqlite/transactions.md#2025-04-23_snippet_0\n\nLANGUAGE: kotlin\nCODE:\n```\ndatabase.transaction {\n  // Perform queries here:\n  personQueries.insert(\"Alec\", \"Strong\")\n  personQueries.insert(\"Jake\", \"Wharton\")\n  personQueries.insert(\"Matt\", \"Precious\")\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a QueryPagingSource for Keyset Paging in Kotlin\nDESCRIPTION: Kotlin implementation for creating a PagingSource that uses keyset paging. It requires a transacter, the page boundaries provider function, and the keyed query function, with an optional context parameter.\nSOURCE: https://github.com/sqldelight/sqldelight/blob/master/docs/common/androidx_paging_usage.md#2025-04-23_snippet_4\n\nLANGUAGE: kotlin\nCODE:\n```\nimport app.cash.sqldelight.android.paging3.QueryPagingSource\n\nval keyedSource = QueryPagingSource(\n  transacter = playerQueries,\n  context = Dispatchers.IO,\n  pageBoundariesProvider = playerQueries::pageBoundaries,\n  queryProvider = playerQueries::keyedQuery,\n)\n```\n\n----------------------------------------\n\nTITLE: Defining Custom Column Types in SQLDelight\nDESCRIPTION: Shows how to create a table with a custom column type that maps a TEXT field to a List<String> in Kotlin. The example demonstrates importing Kotlin types and defining a custom-typed column.\nSOURCE: https://github.com/sqldelight/sqldelight/blob/master/docs/common/custom_column_types.md#2025-04-23_snippet_0\n\nLANGUAGE: sql\nCODE:\n```\nimport kotlin.String;\nimport kotlin.collections.List;\n\nCREATE TABLE hockeyPlayer (\n  cup_wins TEXT AS List<String> NOT NULL\n);\n```\n\n----------------------------------------\n\nTITLE: Configuring SQLDelight for JVM in Gradle\nDESCRIPTION: Configuration block for SQLDelight in a JVM project. Specifies database name, package name, and includes the JDBC SQLite driver dependency.\nSOURCE: https://github.com/sqldelight/sqldelight/blob/master/docs/jvm_mysql/gradle.md#2025-04-23_snippet_2\n\nLANGUAGE: gradle\nCODE:\n```\nsqldelight {\n  MyDatabase { // This will be the name of the generated database class.\n    packageName = \"com.example\"\n  }\n}\n\ndependencies {\n  implementation \"app.cash.sqldelight:sqlite-driver:{{site.latest_version}}\"\n}\n```\n\n----------------------------------------\n\nTITLE: Using Custom Column Type in SQLDelight CREATE TABLE Statement\nDESCRIPTION: This SQL snippet shows how to use a custom column type (UUID in this case) when creating a table in SQLDelight. The custom type is specified using the AS keyword, indicating that it will be stored as TEXT in the database but represented as a UUID object in Kotlin.\nSOURCE: https://github.com/sqldelight/sqldelight/blob/master/docs/multiplatform_sqlite/types.md#2025-04-23_snippet_1\n\nLANGUAGE: sql\nCODE:\n```\nCREATE TABLE my_table (\n  id TEXT AS UUID NOT NULL\n);\n```\n\n----------------------------------------\n\nTITLE: Configuring SQLDelight for Android Projects with Groovy DSL\nDESCRIPTION: Configuration block for SQLDelight in an Android project using Groovy DSL. This defines the database name, package for generated code, and dialect settings for Android applications.\nSOURCE: https://github.com/sqldelight/sqldelight/blob/master/docs/jvm_h2/gradle.md#2025-04-23_snippet_3\n\nLANGUAGE: groovy\nCODE:\n```\nsqldelight {\n  databases {\n    Database {\n      packageName = \"com.example.db\"\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Grouping SQL Statements with BEGIN and END in SQLDelight\nDESCRIPTION: This code snippet demonstrates how to group multiple SQL statements using BEGIN and END keywords in SQLDelight. It shows a simple example of creating a statement group that inserts a user and their posts.\nSOURCE: https://github.com/sqldelight/sqldelight/blob/master/docs/jvm_postgresql/grouping_statements.md#2025-04-23_snippet_0\n\nLANGUAGE: sql\nCODE:\n```\nCREATE TABLE user (\n  id INTEGER NOT NULL PRIMARY KEY AUTOINCREMENT,\n  name TEXT NOT NULL\n);\n\nCREATE TABLE post (\n  id INTEGER NOT NULL PRIMARY KEY AUTOINCREMENT,\n  user_id INTEGER NOT NULL,\n  title TEXT NOT NULL\n);\n\ncreateUserWithPosts:\nBEGIN\n  INSERT INTO user (name) VALUES (?);\n  INSERT INTO post (user_id, title) VALUES (last_insert_rowid(), ?);\n  INSERT INTO post (user_id, title) VALUES (last_insert_rowid(), ?);\nEND;\n```\n\n----------------------------------------\n\nTITLE: Configuring SQLDelight Databases in Kotlin DSL\nDESCRIPTION: Basic configuration to create a SQLDelight database with a specified name using the Kotlin DSL. This is the container configuration where specific database settings can be defined.\nSOURCE: https://github.com/sqldelight/sqldelight/blob/master/docs/common/gradle.md#2025-04-23_snippet_0\n\nLANGUAGE: kotlin\nCODE:\n```\nsqldelight {\n  databases {\n    create(\"MyDatabase\") {\n      // Database configuration here.\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Basic SQL query with custom projection using constructor reference\nDESCRIPTION: This SQL query selects specific columns and uses a Kotlin constructor reference to map the results to a custom data class. The constructor reference approach allows SQLDelight to automatically map column values to constructor parameters.\nSOURCE: https://github.com/sqldelight/sqldelight/blob/master/docs/android_sqlite/custom_projections.md#2025-04-23_snippet_1\n\nLANGUAGE: sql\nCODE:\n```\nselectAll:\nSELECT *\nFROM hockeyPlayer;\n\nmapToCustomType:\nSELECT *\nFROM hockeyPlayer\nMAP TO CONSTRUCTOR(com.example.HockeyPlayer);\n```\n\n----------------------------------------\n\nTITLE: Defining a Custom Type Adapter for String-to-DateTime Conversion in SQLDelight\nDESCRIPTION: Shows how to create a custom adapter that converts between SQL TEXT columns and a custom DateTime type in Kotlin. The adapter handles serialization and deserialization of the DateTime object to and from a String.\nSOURCE: https://github.com/sqldelight/sqldelight/blob/master/docs/jvm_mysql/custom_projections.md#2025-04-23_snippet_0\n\nLANGUAGE: kotlin\nCODE:\n```\nval dateAdapter = object : ColumnAdapter<DateTime, String> {\n  override fun decode(databaseValue: String): DateTime = DateTime.parse(databaseValue)\n  override fun encode(value: DateTime): String = value.toString()\n}\n```\n\n----------------------------------------\n\nTITLE: Named Arguments in SQLDelight Queries\nDESCRIPTION: Shows how to use named parameters in SQL queries using the :name syntax for pattern matching in WHERE clauses.\nSOURCE: https://github.com/sqldelight/sqldelight/blob/master/docs/common/query_arguments.md#2025-04-23_snippet_1\n\nLANGUAGE: sql\nCODE:\n```\nfirstOrLastName:\nSELECT *\nFROM hockeyPlayer\nWHERE full_name LIKE ('% ' || :name)\nOR full_name LIKE (:name || ' %');\n```\n\nLANGUAGE: kotlin\nCODE:\n```\nplayerQueries.firstOrLastName(name = \"Ryan\")\n```\n\n----------------------------------------\n\nTITLE: Configuring SQLDelight Plugin in Gradle (Groovy)\nDESCRIPTION: Shows how to apply the SQLDelight plugin and add dependencies using Groovy DSL in build.gradle file\nSOURCE: https://github.com/sqldelight/sqldelight/blob/master/docs/native_sqlite/gradle.md#2025-04-23_snippet_0\n\nLANGUAGE: groovy\nCODE:\n```\nplugins {\n  id 'app.cash.sqldelight' version '2.0.0'\n}\n```\n\n----------------------------------------\n\nTITLE: Creating MySQL Table with Type Mappings in SQLDelight\nDESCRIPTION: Example CREATE TABLE statement demonstrating the mapping between MySQL data types and their corresponding Kotlin types in SQLDelight. Shows all supported MySQL types including numeric types, date/time types, string types, binary types, and special types like JSON and ENUM.\nSOURCE: https://github.com/sqldelight/sqldelight/blob/master/docs/jvm_mysql/types.md#2025-04-23_snippet_0\n\nLANGUAGE: sql\nCODE:\n```\nCREATE TABLE some_types (\n  some_bit BIT,                      -- Retrieved as Boolean\n  some_tiny_int TINYINT,             -- Retrieved as Byte \n  some_small_int SMALLINT,           -- Retrieved as Short\n  some_medium_int MEDIUMINT,         -- Retrieved as Int\n  some_integer INTEGER,              -- Retrieved as Int\n  some_int INT,                      -- Retrieved as Int\n  some_big_int BIGINT,               -- Retrieved as Long\n  some_decimal DECIMAL,              -- Retrieved as Double\n  some_dec DEC,                      -- Retrieved as Double\n  some_fixed FIXED,                  -- Retrieved as Double\n  some_numeric NUMERIC,              -- Retrieved as BigDecimal\n  some_float FLOAT,                  -- Retrieved as Double\n  some_real REAL,                    -- Retrieved as Double\n  some_double_prec DOUBLE PRECISION, -- Retrieved as Double\n  some_double DOUBLE,                -- Retrieved as Double\n  some_date DATE,                    -- Retrieved as LocalDate\n  some_time TIME,                    -- Retrieved as LocalTime\n  some_datetime DATETIME,            -- Retrieved as LocalDateTime\n  some_timestamp TIMESTAMP,          -- Retrieved as OffsetDateTime\n  some_year YEAR,                    -- Retrieved as String\n  some_char CHAR,                    -- Retrieved as String\n  some_varchar VARCHAR(16),          -- Retrieved as String\n  some_tiny_text TINYTEXT,           -- Retrieved as String\n  some_text TEXT,                    -- Retrieved as String\n  some_medium_text MEDIUMTEXT,       -- Retrieved as String\n  some_long_text LONGTEXT,           -- Retrieved as String\n  some_enum ENUM,                    -- Retrieved as String\n  some_set SET,                      -- Retrieved as String\n  some_varbinary VARBINARY(8),       -- Retrieved as ByteArray\n  some_blob BLOB(8, 8),              -- Retrieved as ByteArray\n  some_binary BINARY,                -- Retrieved as ByteArray\n  some_json JSON,                    -- Retrieved as String\n  some_boolean BOOLEAN,              -- Retrieved as Boolean\n);\n```\n\n----------------------------------------\n\nTITLE: Applying SQLDelight Plugin in build.gradle (Groovy)\nDESCRIPTION: This snippet shows how to apply the SQLDelight plugin in a Gradle build file using Groovy syntax. It also demonstrates how to add the SQLDelight Gradle plugin dependency to the buildscript classpath.\nSOURCE: https://github.com/sqldelight/sqldelight/blob/master/docs/android_sqlite/gradle.md#2025-04-23_snippet_0\n\nLANGUAGE: groovy\nCODE:\n```\nbuildscript {\n  repositories {\n    mavenCentral()\n  }\n  dependencies {\n    classpath \"app.cash.sqldelight:gradle-plugin:{{site.latest_version}}\"\n  }\n}\n\napply plugin: \"app.cash.sqldelight\"\n```\n\n----------------------------------------\n\nTITLE: Defining MySQL Data Types and Their Kotlin Type Mappings in SQLDelight\nDESCRIPTION: This SQL snippet demonstrates how to define a table with various MySQL data types and shows the corresponding Kotlin type that SQLDelight will use when retrieving each column. The comments indicate the Kotlin type that will be used for each SQL type.\nSOURCE: https://github.com/sqldelight/sqldelight/blob/master/docs/jvm_h2/types.md#2025-04-23_snippet_0\n\nLANGUAGE: sql\nCODE:\n```\nCREATE TABLE some_types (\n  some_tiny_int TINYINT,                           -- Retrieved as Byte\n  some_small_int SMALLINT,                         -- Retrieved as Short\n  some_integer INTEGER,                            -- Retrieved as Int\n  some_int INT,                                    -- Retrieved as Int\n  some_big_int BIGINT,                             -- Retrieved as Long\n  some_decimal DECIMAL(6,5),                       -- Retrieved as Int\n  some_dec DEC(6,5),                               -- Retrieved as Int\n  some_numeric NUMERIC(6,5),                       -- Retrieved as Int\n  some_float FLOAT(6),                             -- Retrieved as Double\n  some_real REAL,                                  -- Retrieved as Double\n  some_double DOUBLE,                              -- Retrieved as Double\n  some_double_precision DOUBLE PRECISION,          -- Retrieved as Double\n  some_boolean BOOLEAN,                            -- Retrieved as Boolean\n  some_date DATE,                                  -- Retrieved as String\n  some_time TIME,                                  -- Retrieved as String\n  some_timestamp2 TIMESTAMP(6),                    -- Retrieved as String\n  some_char CHAR,                                  -- Retrieved as String\n  some_character CHARACTER(6),                     -- Retrieved as String\n  some_char_varying CHAR VARYING(6),               -- Retrieved as String\n  some_longvarchar LONGVARCHAR,                    -- Retrieved as String\n  some_character_varying CHARACTER VARYING(6),     -- Retrieved as String\n  some_varchar VARCHAR(16),                        -- Retrieved as String\n  some_clo CHARACTER LARGE OBJECT(16),             -- Retrieved as String\n  some_clob clob(16 M CHARACTERS),                 -- Retrieved as String\n  some_binary BINARY,                              -- Retrieved as ByteArray\n  some_binary2 BINARY(6),                          -- Retrieved as ByteArray\n  some_longvarbinary LONGVARBINARY,                -- Retrieved as ByteArray\n  some_longvarbinary2 LONGVARBINARY(6),            -- Retrieved as ByteArray\n  some_binary_varying BINARY VARYING(6),           -- Retrieved as ByteArray\n  some_varbinary VARBINARY(8),                     -- Retrieved as ByteArray\n  some_uuid UUID,                                  -- Retrieved as ByteArray\n  some_blob BLOB,                                  -- Retrieved as ByteArray\n  some_blo BINARY LARGE OBJECT(6),                 -- Retrieved as ByteArray\n  some_bit BIT,                                    -- Retrieved as ByteArray\n  some_bit2 BIT(6),                                -- Retrieved as ByteArray\n  some_bit_varying BIT VARYING(6),                 -- Retrieved as ByteArray\n  some_interval INTERVAL YEAR TO MONTH,            -- Retrieved as ByteArray\n  some_interval2 INTERVAL YEAR(3),                 -- Retrieved as ByteArray\n  some_interval3 INTERVAL DAY(4) TO HOUR,          -- Retrieved as ByteArray\n  some_interval4 INTERVAL MINUTE(4) TO SECOND(6),  -- Retrieved as ByteArray\n  some_interval5 INTERVAL SECOND(4,6)              -- Retrieved as ByteArray\n);\n```\n\n----------------------------------------\n\nTITLE: Configuring SQLDelight for Android Projects with Kotlin DSL\nDESCRIPTION: Configuration block for SQLDelight in an Android project using Kotlin DSL. This setup specifies database name, package for generated code, and dialect configuration for Android compatibility.\nSOURCE: https://github.com/sqldelight/sqldelight/blob/master/docs/jvm_h2/gradle.md#2025-04-23_snippet_2\n\nLANGUAGE: kotlin\nCODE:\n```\nsqldelight {\n  databases {\n    create(\"Database\") {\n      packageName.set(\"com.example.db\")\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Using Multiple Aggregate Functions in SQLDelight\nDESCRIPTION: This snippet illustrates the use of multiple aggregate functions (AVG, MAX, MIN) along with GROUP BY to calculate statistics for each team, including average, maximum, and minimum scores.\nSOURCE: https://github.com/sqldelight/sqldelight/blob/master/docs/jvm_h2/grouping_statements.md#2025-04-23_snippet_2\n\nLANGUAGE: sql\nCODE:\n```\nSELECT\n  team,\n  AVG(score) AS average_score,\n  MAX(score) AS highest_score,\n  MIN(score) AS lowest_score\nFROM player\nGROUP BY team;\n```\n\n----------------------------------------\n\nTITLE: Transaction Rollback with Return Value in SQLDelight\nDESCRIPTION: Demonstrates how to rollback a transaction while providing a return value. Returns the count of inserted players or 0 if rolled back.\nSOURCE: https://github.com/sqldelight/sqldelight/blob/master/docs/common/transactions.md#2025-04-23_snippet_3\n\nLANGUAGE: kotlin\nCODE:\n```\nval numberInserted: Int = database.playerQueries.transactionWithResult {\n  players.forEach { player ->\n    if (player.number == 0) rollback(0)\n    database.playerQueries.insert(\n      player_number = player.number,\n      full_name = player.fullName\n    )\n  }\n  players.size\n}\n```\n\n----------------------------------------\n\nTITLE: Defining PostgreSQL Types with SQLDelight Kotlin Mappings\nDESCRIPTION: This SQL snippet creates a table named 'some_types' with various PostgreSQL data types. Each column is annotated with a comment indicating the corresponding Kotlin type that SQLDelight will use when generating the interface.\nSOURCE: https://github.com/sqldelight/sqldelight/blob/master/docs/jvm_postgresql/types.md#2025-04-23_snippet_0\n\nLANGUAGE: sql\nCODE:\n```\nCREATE TABLE some_types (\n  some_smallint SMALLINT,               -- Retrieved as Short\n  some_int2 INT2,                       -- Retrieved as Short\n  some_integer INTEGER,                 -- Retrieved as Int\n  some_int INT,                         -- Retrieved as Int\n  some_int4 INT4,                       -- Retrieved as Int\n  some_bigint BIGINT,                   -- Retrieved as Long\n  some_int8 INT8,                       -- Retrieved as Long\n  some_numeric NUMERIC,                 -- Retrieved as BigDecimal\n  some_decimal DECIMAL,                 -- Retrieved as Double\n  some_real REAL,                       -- Retrieved as Double\n  some_float4 FLOAT4,                   -- Retrieved as Double\n  some_double_prec DOUBLE PRECISION,    -- Retrieved as Double\n  some_float8 FLOAT8,                   -- Retrieved as Double\n  some_smallserial SMALLSERIAL,         -- Retrieved as Short\n  some_serial2 SERIAL2,                 -- Retrieved as Short\n  some_serial SERIAL,                   -- Retrieved as Int\n  some_serial4 SERIAL4,                 -- Retrieved as Int\n  some_bigserial BIGSERIAL,             -- Retrieved as Long\n  some_serial8 SERIAL8,                 -- Retrieved as Long\n  some_character CHARACTER,             -- Retrieved as String\n  some_char CHAR,                       -- Retrieved as String\n  some_char_var CHARACTER VARYING(16),  -- Retrieved as String\n  some_varchar VARCHAR(16),             -- Retrieved as String\n  some_text TEXT,                       -- Retrieved as String\n  some_date DATE,                       -- Retrieved as LocalDate\n  some_time TIME,                       -- Retrieved as LocalTime\n  some_timestamp TIMESTAMP,             -- Retrieved as LocalDateTime\n  some_timestamp TIMESTAMPTZ,           -- Retrieved as OffsetDateTime\n  some_json JSON,                       -- Retrieved as String\n  some_jsonb JSONB,                     -- Retrieved as String\n  some_interval INTERVAL,               -- Retrieved as PGInterval\n  some_uuid UUID                        -- Retrieved as UUID\n  some_bool BOOL,                       -- Retrieved as Boolean\n  some_boolean BOOLEAN,                 -- Retrieved as Boolean\n  some_bytea BYTEA                      -- Retrieved as ByteArray\n);\n```\n\n----------------------------------------\n\nTITLE: Applying SQLDelight Plugin in Gradle (Kotlin)\nDESCRIPTION: This snippet demonstrates how to apply the SQLDelight plugin in a Gradle build file using Kotlin DSL syntax. It shows the plugin application for both the current and legacy plugin syntax.\nSOURCE: https://github.com/sqldelight/sqldelight/blob/master/docs/js_sqlite/gradle.md#2025-04-23_snippet_1\n\nLANGUAGE: kotlin\nCODE:\n```\nplugins {\n  id(\"app.cash.sqldelight\") version \"$version\"\n}\n\n// Legacy plugin application:\n// buildscript {\n//   dependencies {\n//     classpath(\"app.cash.sqldelight:gradle-plugin:$version\")\n//   }\n// }\n// apply(plugin = \"app.cash.sqldelight\")\n```\n\n----------------------------------------\n\nTITLE: Creating Migration File in SQL for SQLDelight\nDESCRIPTION: Example of a migration file (1.sqm) that adds two new columns to the hockeyPlayer table. This demonstrates how to write SQL statements for altering table structure in SQLDelight migrations.\nSOURCE: https://github.com/sqldelight/sqldelight/blob/master/docs/common/migrations.md#2025-04-23_snippet_0\n\nLANGUAGE: sql\nCODE:\n```\nALTER TABLE hockeyPlayer ADD COLUMN draft_year INTEGER;\nALTER TABLE hockeyPlayer ADD COLUMN draft_order INTEGER;\n```\n\n----------------------------------------\n\nTITLE: Mapping Query Results with Kotlin Function\nDESCRIPTION: Example showing how to use a Kotlin mapper function to transform query results by converting player names to uppercase. Demonstrates custom projection using programmatic transformation.\nSOURCE: https://github.com/sqldelight/sqldelight/blob/master/docs/common/custom_projections.md#2025-04-23_snippet_0\n\nLANGUAGE: kotlin\nCODE:\n```\nval selectAllNames = playerQueries.selectAll(\n  mapper = { player_number, full_name -> full_name.toUppercase() }\n)\nprintln(selectAllNames.executeAsList())\n// Prints [\"RYAN GETZLAF\", \"COREY PERRY\"]\n```\n\n----------------------------------------\n\nTITLE: Executing Code-based Migrations in Kotlin for SQLDelight\nDESCRIPTION: Example of using the Database.Schema.migrate API to perform data migrations from code. This snippet shows how to execute custom SQL statements after a specific migration version.\nSOURCE: https://github.com/sqldelight/sqldelight/blob/master/docs/common/migrations.md#2025-04-23_snippet_1\n\nLANGUAGE: kotlin\nCODE:\n```\nDatabase.Schema.migrate(\n    driver = database,\n    oldVersion = 0,\n    newVersion = Database.Schema.version,\n    AfterVersion(3) { driver -> driver.execute(null, \"INSERT INTO test (value) VALUES('hello')\", 0) },\n)\n```\n\n----------------------------------------\n\nTITLE: Creating a Multi-Column Custom Projection with a Class Constructor in SQLDelight\nDESCRIPTION: Demonstrates how to map multiple columns from a query result to a custom class constructor. This approach allows combining multiple columns into a single custom type.\nSOURCE: https://github.com/sqldelight/sqldelight/blob/master/docs/jvm_mysql/custom_projections.md#2025-04-23_snippet_6\n\nLANGUAGE: sql\nCODE:\n```\nimport com.example.Name;\n\nselect_full_name:\nSELECT first_name, last_name\nFROM person;\n```\n\n----------------------------------------\n\nTITLE: Creating Type Aliases with Custom Mappers in SQLDelight\nDESCRIPTION: Demonstrates how to create a custom type alias in SQLDelight that can be used with queries. This allows for reusing type mappings across multiple queries.\nSOURCE: https://github.com/sqldelight/sqldelight/blob/master/docs/jvm_postgresql/custom_projections.md#2025-04-23_snippet_2\n\nLANGUAGE: sql\nCODE:\n```\nimport com.example.PlayerAndTeam;\n\nCREATE VIEW playerTeamView AS\nSELECT\n  player.*,\n  team.name AS teamName\nFROM player\nJOIN team ON player.team_id = team.id;\n\nselectPlayerAndTeams:\nSELECT *\nFROM playerTeamView AS PlayerAndTeam;\n```\n\n----------------------------------------\n\nTITLE: Implementing GROUP BY in SQLDelight\nDESCRIPTION: This snippet demonstrates how to use the GROUP BY clause in a SQLDelight query to group results by a specific column. It also shows how to use aggregate functions like COUNT() with grouping.\nSOURCE: https://github.com/sqldelight/sqldelight/blob/master/docs/jvm_mysql/grouping_statements.md#2025-04-23_snippet_0\n\nLANGUAGE: sql\nCODE:\n```\nSELECT department, COUNT(*)\nFROM employee\nGROUP BY department;\n```\n\n----------------------------------------\n\nTITLE: Creating Migration SQL File for Schema Version 2\nDESCRIPTION: SQL migration file that alters the message table to add a 'creation_time' column with current timestamp as default value.\nSOURCE: https://github.com/sqldelight/sqldelight/blob/master/docs/js_sqlite/migrations.md#2025-04-23_snippet_1\n\nLANGUAGE: sql\nCODE:\n```\nALTER TABLE message ADD COLUMN creation_time INTEGER NOT NULL DEFAULT 0;\n```\n\n----------------------------------------\n\nTITLE: Setting SQL Dialect in Groovy DSL\nDESCRIPTION: Configuration to specify the SQL dialect to target. Dialects are selected using a Gradle dependency, allowing compatibility with different database systems.\nSOURCE: https://github.com/sqldelight/sqldelight/blob/master/docs/common/gradle.md#2025-04-23_snippet_15\n\nLANGUAGE: groovy\nCODE:\n```\ndialect 'app.cash.sqldelight:sqlite-3-24-dialect:{{ versions.sqldelight }}'\n```\n\n----------------------------------------\n\nTITLE: Converting SQLDelight Query to Flow in Kotlin\nDESCRIPTION: Creates a Flow of HockeyPlayer objects by converting a SQLDelight query using asFlow() and mapToList(). The flow emits new values whenever the database changes for the associated query, providing reactive updates.\nSOURCE: https://github.com/sqldelight/sqldelight/blob/master/docs/common/coroutines-usage.md#2025-04-23_snippet_0\n\nLANGUAGE: kotlin\nCODE:\n```\nval players: Flow<List<HockeyPlayer>> = \n  playerQueries.selectAll()\n    .asFlow()\n    .mapToList(Dispatchers.IO)\n```\n\n----------------------------------------\n\nTITLE: Configuring NULL Equality Behavior in Groovy DSL\nDESCRIPTION: Configuration to control how NULL values are handled in equality comparisons. When true, SQLDelight won't replace equality comparisons with nullable types using IS.\nSOURCE: https://github.com/sqldelight/sqldelight/blob/master/docs/common/gradle.md#2025-04-23_snippet_19\n\nLANGUAGE: groovy\nCODE:\n```\ntreatNullAsUnknownForEquality = true\n```\n\n----------------------------------------\n\nTITLE: Handling Nested SQLDelight Transactions\nDESCRIPTION: Demonstrates how nested transactions work in SQLDelight. Nested transactions are ignored by default, meaning the first transaction wraps all nested ones.\nSOURCE: https://github.com/sqldelight/sqldelight/blob/master/docs/jvm_mysql/transactions.md#2025-04-23_snippet_1\n\nLANGUAGE: kotlin\nCODE:\n```\ndatabase.transaction {\n  database.userQueries.insert(\"user\", \"name\")\n  \n  database.transaction {\n    // Runs in the outer transaction\n    database.userQueries.insert(\"nested\", \"user\")\n  }\n  // If this throws, both inserts are reverted.\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Complex Migration with Foreign Key Handling\nDESCRIPTION: SQL migration that creates a new table 'new_message', copies data from old table, drops the original table, and renames the new table to maintain foreign key constraints.\nSOURCE: https://github.com/sqldelight/sqldelight/blob/master/docs/js_sqlite/migrations.md#2025-04-23_snippet_3\n\nLANGUAGE: sql\nCODE:\n```\nCREATE TABLE new_message(\n  id INTEGER NOT NULL PRIMARY KEY AUTOINCREMENT,\n  userId INTEGER NOT NULL,\n  content TEXT NOT NULL,\n  creation_time INTEGER NOT NULL DEFAULT 0,\n  FOREIGN KEY (userId) REFERENCES user(id)\n);\n\nINSERT INTO new_message(id, userId, content, creation_time)\nSELECT id, userId, content, creation_time FROM message;\n\nDROP TABLE message;\n\nALTER TABLE new_message RENAME TO message;\n```\n\n----------------------------------------\n\nTITLE: Configuring SQLDelight for Kotlin Multiplatform in Gradle\nDESCRIPTION: This snippet demonstrates how to configure the SQLDelight Gradle plugin for a Kotlin multiplatform project. It applies the necessary plugins and sets up a database configuration with a specific package name for code generation.\nSOURCE: https://github.com/sqldelight/sqldelight/blob/master/docs/common/multiplatform.md#2025-04-23_snippet_0\n\nLANGUAGE: groovy\nCODE:\n```\napply plugin: \"org.jetbrains.kotlin.multiplatform\"\napply plugin: \"app.cash.sqldelight\"\n\nsqldelight {\n  databases {\n    MyDatabase {\n      packageName = \"com.example.hockey\"\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Nested Transactions in SQLDelight\nDESCRIPTION: Shows how SQLDelight handles nested transactions by committing changes only when the outermost transaction commits, maintaining proper transaction nesting.\nSOURCE: https://github.com/sqldelight/sqldelight/blob/master/docs/jvm_h2/transactions.md#2025-04-23_snippet_4\n\nLANGUAGE: kotlin\nCODE:\n```\ndatabase.transaction {\n  // This outer transaction opens up:\n  // BEGIN TRANSACTION\n\n  // Do some inserts.\n\n  database.transaction {\n    // Nothing happens here because we're already in a transaction.\n\n    // Do some more inserts.\n  }\n  // Nothing happens here because the inner transaction is just a regular function call.\n\n  // Do some more inserts.\n}\n// The transaction commits and all the inserts happen at once:\n// COMMIT\n```\n\n----------------------------------------\n\nTITLE: SQL query with custom projection using lambda expression\nDESCRIPTION: This SQL query demonstrates using a lambda expression to map query results to a custom data class. The lambda approach allows for more flexibility in mapping column values, including column name transformations.\nSOURCE: https://github.com/sqldelight/sqldelight/blob/master/docs/android_sqlite/custom_projections.md#2025-04-23_snippet_2\n\nLANGUAGE: sql\nCODE:\n```\nusingLambda:\nSELECT *\nFROM hockeyPlayer\nMAP TO (name, number) -> com.example.HockeyPlayer(name, number);\n```\n\n----------------------------------------\n\nTITLE: Enabling Async Query Generation in Kotlin DSL\nDESCRIPTION: Configuration to generate suspending query methods for use with asynchronous drivers. When true, SQLDelight will create Kotlin coroutine-compatible database query methods.\nSOURCE: https://github.com/sqldelight/sqldelight/blob/master/docs/common/gradle.md#2025-04-23_snippet_20\n\nLANGUAGE: kotlin\nCODE:\n```\ngenerateAsync.set(true)\n```\n\n----------------------------------------\n\nTITLE: Querying Grouped Data in SQLDelight with Kotlin\nDESCRIPTION: This Kotlin code snippet demonstrates how to query grouped data using SQLDelight. It defines a data class for team statistics and a query function that returns a list of TeamStats objects.\nSOURCE: https://github.com/sqldelight/sqldelight/blob/master/docs/jvm_h2/grouping_statements.md#2025-04-23_snippet_3\n\nLANGUAGE: kotlin\nCODE:\n```\ndata class TeamStats(\n    val team: String,\n    val playerCount: Long,\n    val averageScore: Double,\n    val highestScore: Long,\n    val lowestScore: Long\n)\n\nfun Query.teamStats(): List<TeamStats> {\n    return teamStats().executeAsList().map { stats ->\n        TeamStats(\n            team = stats.team,\n            playerCount = stats.player_count,\n            averageScore = stats.average_score,\n            highestScore = stats.highest_score,\n            lowestScore = stats.lowest_score\n        )\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring SQLDelight Dependencies for Multiplatform Project in Gradle\nDESCRIPTION: This snippet shows how to configure SQLDelight dependencies for a Multiplatform project using Gradle. It includes the necessary plugins and dependencies for both the shared module and platform-specific modules.\nSOURCE: https://github.com/sqldelight/sqldelight/blob/master/docs/native_sqlite/coroutines.md#2025-04-23_snippet_0\n\nLANGUAGE: groovy\nCODE:\n```\nplugins {\n    id 'org.jetbrains.kotlin.multiplatform'\n    id 'com.squareup.sqldelight'\n}\n\nkotlin {\n    jvm()\n    // Other targets...\n\n    sourceSets {\n        commonMain {\n            dependencies {\n                implementation \"com.squareup.sqldelight:runtime:$sqldelight_version\"\n                implementation \"com.squareup.sqldelight:coroutines-extensions:$sqldelight_version\"\n            }\n        }\n        androidMain {\n            dependencies {\n                implementation \"com.squareup.sqldelight:android-driver:$sqldelight_version\"\n            }\n        }\n        jvmMain {\n            dependencies {\n                implementation \"com.squareup.sqldelight:sqlite-driver:$sqldelight_version\"\n            }\n        }\n        iosMain {\n            dependencies {\n                implementation \"com.squareup.sqldelight:native-driver:$sqldelight_version\"\n            }\n        }\n        // Other targets...\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a SqlDriver from a DataSource\nDESCRIPTION: Creates a SqlDriver instance from a DataSource object. This code connects SQLDelight to the database using a JDBC connection from a connection pool like HikariCP.\nSOURCE: https://github.com/sqldelight/sqldelight/blob/master/docs/common/index_server.md#2025-04-23_snippet_5\n\nLANGUAGE: kotlin\nCODE:\n```\nval driver: SqlDriver = dataSource.asJdbcDriver()\n```\n\n----------------------------------------\n\nTITLE: Handling Nested Transactions in SQLDelight with Kotlin\nDESCRIPTION: This example illustrates how SQLDelight handles nested transactions. It shows that inner transactions are treated as savepoints within the outermost transaction.\nSOURCE: https://github.com/sqldelight/sqldelight/blob/master/docs/jvm_postgresql/transactions.md#2025-04-23_snippet_1\n\nLANGUAGE: kotlin\nCODE:\n```\ndatabase.transaction {\n    // Outer transaction\n    database.someQueries.insertData()\n\n    database.transaction {\n        // Inner transaction (savepoint)\n        database.someQueries.updateData()\n    }\n\n    database.someQueries.deleteData()\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Custom Type Projection in SQLDelight\nDESCRIPTION: Shows how to define a custom type 'revenue' in a SQLDelight query file. The custom type is projected as a Kotlin BigDecimal.\nSOURCE: https://github.com/sqldelight/sqldelight/blob/master/docs/jvm_h2/custom_projections.md#2025-04-23_snippet_0\n\nLANGUAGE: SQL\nCODE:\n```\nCREATE TABLE data (\n  revenue TEXT AS kotlin.math.BigDecimal\n);\n\nSELECT *\nFROM data;\n```\n\n----------------------------------------\n\nTITLE: Manually Rolling Back Transactions in SQLDelight\nDESCRIPTION: Shows how to manually roll back a transaction when needed. This approach is useful when transaction success depends on conditions evaluated within the transaction block.\nSOURCE: https://github.com/sqldelight/sqldelight/blob/master/docs/android_sqlite/transactions.md#2025-04-23_snippet_3\n\nLANGUAGE: kotlin\nCODE:\n```\ndb.transaction {\n  // Make some changes.\n  val success = doSomeWork()\n  if (!success) rollback()\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring SQLDelight in build.gradle.kts (Kotlin DSL)\nDESCRIPTION: This example shows how to configure the SQLDelight plugin in Kotlin DSL, including setting up database source directories, package name for generated classes, dialect, and other configuration options.\nSOURCE: https://github.com/sqldelight/sqldelight/blob/master/docs/android_sqlite/gradle.md#2025-04-23_snippet_3\n\nLANGUAGE: kotlin\nCODE:\n```\nsqldelight {\n  databases {\n    create(\"myDatabase\") {\n      packageName.set(\"com.example.db\")\n      sourceFolders.set(listOf(\"sqldelight\"))\n      schemaOutputDirectory.set(file(\"build/dbs\"))\n      dialect(\"sqlite:3.24\")\n      verifyMigrations.set(true)\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring SQLDelight in build.gradle (Groovy)\nDESCRIPTION: This example shows how to configure the SQLDelight plugin in Groovy, including setting up database source directories, package name for generated classes, dialect, and other options.\nSOURCE: https://github.com/sqldelight/sqldelight/blob/master/docs/android_sqlite/gradle.md#2025-04-23_snippet_2\n\nLANGUAGE: groovy\nCODE:\n```\nsqldelight {\n  databases {\n    myDatabase {\n      packageName = \"com.example.db\"\n      sourceFolders = [\"sqldelight\"]\n      schemaOutputDirectory = file(\"build/dbs\")\n      dialect = \"sqlite:3.24\"\n      verifyMigrations = true\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Executing a Basic Transaction in SQLDelight with Kotlin\nDESCRIPTION: This snippet demonstrates how to execute a basic transaction in SQLDelight using Kotlin. It shows the use of the transactionWithResult function to perform multiple database operations atomically.\nSOURCE: https://github.com/sqldelight/sqldelight/blob/master/docs/jvm_postgresql/transactions.md#2025-04-23_snippet_0\n\nLANGUAGE: kotlin\nCODE:\n```\nval newId = database.transactionWithResult {\n    val statement = database.someQueries.insertNewData()\n    val id = statement.executeInsert()\n    database.someQueries.updateOtherTable(id)\n    return@transactionWithResult id\n}\n```\n\n----------------------------------------\n\nTITLE: HTTP GET Request Format for SQLDelight Migration Script Retrieval\nDESCRIPTION: Example of an HTTP GET request used by SQLDelight to retrieve a specific migration script from version 1 to version 2 for a database named 'myDatabase'.\nSOURCE: https://github.com/sqldelight/sqldelight/blob/master/docs/jvm_mysql/migrations.md#2025-04-23_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\nGET /migrations/from/1/to/2?db=myDatabase\n```\n\n----------------------------------------\n\nTITLE: Query Results Response Format\nDESCRIPTION: Example of a response message format containing query results. Shows the structure of returning multiple rows and columns from a SELECT query.\nSOURCE: https://github.com/sqldelight/sqldelight/blob/master/docs/js_sqlite/custom_worker.md#2025-04-23_snippet_4\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"id\": 5,\n  \"results\": [\n    [\"value\", \"this is the content of column_b\"],\n    [\"value\", \"this is a different row\"]\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Initializing On-Disk SQLite Database Driver\nDESCRIPTION: Creates a SQLite database driver instance for an on-disk database using a JDBC connection string to specify the database file location.\nSOURCE: https://github.com/sqldelight/sqldelight/blob/master/docs/jvm_sqlite/index.md#2025-04-23_snippet_2\n\nLANGUAGE: kotlin\nCODE:\n```\nval driver: SqlDriver = JdbcSqliteDriver(\"jdbc:sqlite:test.db\", Properties(), Database.Schema)\n```\n\n----------------------------------------\n\nTITLE: Implementing Custom Column Adapter in Kotlin for SQLDelight\nDESCRIPTION: Demonstrates how to create a custom column adapter in Kotlin to convert between SQL TEXT and Kotlin BigDecimal types. This adapter is used to handle the 'revenue' column in the 'data' table.\nSOURCE: https://github.com/sqldelight/sqldelight/blob/master/docs/jvm_h2/custom_projections.md#2025-04-23_snippet_1\n\nLANGUAGE: Kotlin\nCODE:\n```\nval bigDecimalAdapter = object : ColumnAdapter<BigDecimal, String> {\n  override fun decode(databaseValue: String): BigDecimal = BigDecimal(databaseValue)\n  override fun encode(value: BigDecimal): String = value.toString()\n}\n```\n\n----------------------------------------\n\nTITLE: Executing Migrations Programmatically in Kotlin with SQLDelight\nDESCRIPTION: Shows how to execute migrations programmatically using SQLDelight in Kotlin. It demonstrates creating a database with a specific schema version and handling migrations.\nSOURCE: https://github.com/sqldelight/sqldelight/blob/master/docs/multiplatform_sqlite/migrations.md#2025-04-23_snippet_1\n\nLANGUAGE: kotlin\nCODE:\n```\nval driver: SqlDriver = JdbcSqliteDriver(JdbcSqliteDriver.IN_MEMORY)\nDatabase.Schema.create(driver)\n\n// Create the database with schema version 1\nval database = Database(driver)\n\n// Migrate the database to version 2\nDatabase.Schema.migrate(driver, 1, 2)\n```\n\n----------------------------------------\n\nTITLE: Using afterRollback and afterCommit Callbacks in SQLDelight Transactions\nDESCRIPTION: Demonstrates how to use callback functions that execute after a transaction commits or rolls back. These callbacks are useful for performing actions that depend on the transaction's outcome.\nSOURCE: https://github.com/sqldelight/sqldelight/blob/master/docs/android_sqlite/transactions.md#2025-04-23_snippet_2\n\nLANGUAGE: kotlin\nCODE:\n```\ndb.transaction {\n  // Make some changes.\n  afterRollback { /* handle rollback */ }\n  afterCommit { /* handle successful commit */ }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Custom Projection in Swift for SQLDelight\nDESCRIPTION: This snippet shows how to implement a custom projection in Swift for SQLDelight. It includes the definition of a 'Custom' struct and its corresponding 'CustomAdapter' for encoding and decoding database values.\nSOURCE: https://github.com/sqldelight/sqldelight/blob/master/docs/native_sqlite/custom_projections.md#2025-04-23_snippet_1\n\nLANGUAGE: swift\nCODE:\n```\nstruct Custom: Hashable {\n    let name: String\n    let number: Int32?\n}\n\nclass CustomAdapter: ColumnAdapter {\n    func decode(databaseValue: String) -> Custom {\n        return Custom(name: databaseValue, number: nil)\n    }\n    \n    func encode(value: Custom) -> String {\n        return value.name\n    }\n}\n\nstruct QueryResult {\n    let custom: Custom\n    let number: Int32?\n    \n    init(custom: Custom, number: Int64?) {\n        self.custom = custom\n        self.number = number.map { Int32($0) }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring SQLDelight Migration Output in Gradle (Groovy)\nDESCRIPTION: This snippet shows how to configure SQLDelight in a Gradle build file to specify the output directory and file format for SQL migration files. It sets up the migrationOutputDirectory and migrationOutputFileFormat properties for the Database configuration.\nSOURCE: https://github.com/sqldelight/sqldelight/blob/master/docs/common/migrations_server.md#2025-04-23_snippet_0\n\nLANGUAGE: groovy\nCODE:\n```\nsqldelight {\n  databases {\n    Database {\n      migrationOutputDirectory = layout.buildDirectory.dir(\"resources/main/migrations\")\n      migrationOutputFileFormat = \".sql\" // Defaults to .sql\n  }\n}\n\n```\n\n----------------------------------------\n\nTITLE: Using a Custom Class Constructor in SQLDelight Custom Projections\nDESCRIPTION: Shows how to use a class constructor as a custom projection by importing the class and defining it as the return type for the query. This allows direct mapping of query results to a constructor.\nSOURCE: https://github.com/sqldelight/sqldelight/blob/master/docs/jvm_mysql/custom_projections.md#2025-04-23_snippet_4\n\nLANGUAGE: sql\nCODE:\n```\nimport com.example.Birthday;\n\nselect_birthday:\nSELECT birthday\nFROM person\nWHERE first_name = ?;\n```\n\n----------------------------------------\n\nTITLE: Setting Gradle Task Dependency for SQLDelight Migration Generation (Groovy)\nDESCRIPTION: This snippet demonstrates how to create a dependency between the compileKotlin task and the generateMainDatabaseMigrations task in Gradle. This ensures that the SQL migration files are generated before Kotlin compilation, making them available for services like Flyway.\nSOURCE: https://github.com/sqldelight/sqldelight/blob/master/docs/common/migrations_server.md#2025-04-23_snippet_1\n\nLANGUAGE: groovy\nCODE:\n```\ncompileKotlin.configure {\n  dependsOn \"generateMainDatabaseMigrations\"\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Database with Custom Column Adapter in SQLDelight\nDESCRIPTION: Shows how to create a SQLDelight database instance with a custom column adapter for the 'revenue' field. The adapter is applied to convert between SQL TEXT and Kotlin BigDecimal.\nSOURCE: https://github.com/sqldelight/sqldelight/blob/master/docs/jvm_h2/custom_projections.md#2025-04-23_snippet_2\n\nLANGUAGE: Kotlin\nCODE:\n```\nval database = Database(\n  driver = driver,\n  dataAdapter = Data.Adapter(\n    revenueAdapter = bigDecimalAdapter\n  )\n)\n```\n\n----------------------------------------\n\nTITLE: Initializing SQLDelight WebWorkerDriver with SQL.js Worker\nDESCRIPTION: Code snippet demonstrating how to initialize the WebWorkerDriver with a SQL.js Worker. The Worker is created using a URL that references the worker script from an NPM package, which Webpack will bundle at build time.\nSOURCE: https://github.com/sqldelight/sqldelight/blob/master/docs/js_sqlite/index.md#2025-04-23_snippet_2\n\nLANGUAGE: kotlin\nCODE:\n```\nval driver = WebWorkerDriver(\n  Worker(\n    js(\"\"\"new URL(\"@cashapp/sqldelight-sqljs-worker/sqljs.worker.js\", import.meta.url)\"\"\")\n  )\n)\n```\n\n----------------------------------------\n\nTITLE: Including SQLite Types Documentation Template\nDESCRIPTION: Jekyll template include statement for SQLite types documentation\nSOURCE: https://github.com/sqldelight/sqldelight/blob/master/docs/jvm_sqlite/types.md#2025-04-23_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n{% include 'common/types_sqlite.md' %}\n```\n\n----------------------------------------\n\nTITLE: Implementing Window Functions in SQLDelight\nDESCRIPTION: This snippet demonstrates the use of window functions in SQLDelight. It calculates a running total of salaries within each department, ordered by the hire date.\nSOURCE: https://github.com/sqldelight/sqldelight/blob/master/docs/jvm_mysql/grouping_statements.md#2025-04-23_snippet_2\n\nLANGUAGE: sql\nCODE:\n```\nSELECT\n  name,\n  department,\n  salary,\n  SUM(salary) OVER (\n    PARTITION BY department\n    ORDER BY hire_date\n  ) running_total\nFROM employee;\n```\n\n----------------------------------------\n\nTITLE: Implementing a Birthday Class Constructor for SQLDelight Custom Projections\nDESCRIPTION: Shows the implementation of a Birthday class with a constructor that takes a DateTime parameter. This class is used in SQLDelight custom projections to convert query results.\nSOURCE: https://github.com/sqldelight/sqldelight/blob/master/docs/jvm_mysql/custom_projections.md#2025-04-23_snippet_5\n\nLANGUAGE: kotlin\nCODE:\n```\ndata class Birthday(val date: DateTime)\n```\n\n----------------------------------------\n\nTITLE: Configuring Migration Schema in Gradle (Kotlin DSL)\nDESCRIPTION: Configures SQLDelight in Gradle to derive the database schema from migration files. This setup enables the use of .sqm migration files to progressively update an existing database schema.\nSOURCE: https://github.com/sqldelight/sqldelight/blob/master/docs/common/index_server.md#2025-04-23_snippet_0\n\nLANGUAGE: kotlin\nCODE:\n```\nsqldelight {\n  databases {\n    create(\"Database\") {\n      ...\n      srcDirs(\"sqldelight\")\n      deriveSchemaFromMigrations.set(true)\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Specifying Custom Kotlin Types in SQLDelight Migrations\nDESCRIPTION: This snippet shows how to specify custom Kotlin types when altering a table in SQLDelight migrations. It demonstrates importing Kotlin types and using them in the ALTER TABLE statement.\nSOURCE: https://github.com/sqldelight/sqldelight/blob/master/docs/common/types_server_migrations.md#2025-04-23_snippet_1\n\nLANGUAGE: SQL\nCODE:\n```\nimport kotlin.String;\nimport kotlin.collection.List;\n\nALTER TABLE my_table\n  ADD COLUMN new_column VARCHAR(8) AS List<String>;\n```\n\n----------------------------------------\n\nTITLE: Initializing JdbcSqliteDriver with Schema and Migration Callbacks in Kotlin\nDESCRIPTION: This snippet shows how to create a JdbcSqliteDriver instance with a specified schema and migration callbacks. It uses PRAGMA user_version to track the schema version and includes an example of a post-migration callback.\nSOURCE: https://github.com/sqldelight/sqldelight/blob/master/docs/jvm_sqlite/migrations.md#2025-04-23_snippet_0\n\nLANGUAGE: kotlin\nCODE:\n```\nval driver: SqlDriver = JdbcSqliteDriver(\n    url = \"jdbc:sqlite:test.db\",\n    properties = Properties(),\n    schema = Database.Schema,\n    callbacks = arrayOf(\n        AfterVersion(3) { driver -> driver.execute(null, \"INSERT INTO test (value) VALUES('hello')\", 0) }\n    )\n)\n```\n\n----------------------------------------\n\nTITLE: Applying HAVING Clause with Aggregate Function in SQLDelight\nDESCRIPTION: This example shows how to use the HAVING clause in conjunction with the GROUP BY clause to filter grouped results based on an aggregate condition, specifically selecting teams with more than 5 players.\nSOURCE: https://github.com/sqldelight/sqldelight/blob/master/docs/jvm_h2/grouping_statements.md#2025-04-23_snippet_1\n\nLANGUAGE: sql\nCODE:\n```\nSELECT team, COUNT(*) AS player_count\nFROM player\nGROUP BY team\nHAVING COUNT(*) > 5;\n```\n\n----------------------------------------\n\nTITLE: Defining a custom data class for query projections in Kotlin\nDESCRIPTION: This snippet shows how to define a simple data class that will be used as a custom projection for SQL query results. The class has two properties that match the expected SQL query columns.\nSOURCE: https://github.com/sqldelight/sqldelight/blob/master/docs/android_sqlite/custom_projections.md#2025-04-23_snippet_0\n\nLANGUAGE: kotlin\nCODE:\n```\ndata class HockeyPlayer(\n  val name: String,\n  val number: Int\n)\n```\n\n----------------------------------------\n\nTITLE: Defining Custom Projection in Kotlin for SQLDelight\nDESCRIPTION: This snippet demonstrates how to define a custom projection in Kotlin for SQLDelight. It shows the creation of a custom type 'Custom' and its mapping to database columns, including handling of nullable values.\nSOURCE: https://github.com/sqldelight/sqldelight/blob/master/docs/native_sqlite/custom_projections.md#2025-04-23_snippet_0\n\nLANGUAGE: kotlin\nCODE:\n```\ndata class Custom(\n  val name: String,\n  val number: Int?\n)\n\nval customAdapter = object : ColumnAdapter<Custom, String> {\n  override fun decode(databaseValue: String): Custom {\n    return Custom(databaseValue, null)\n  }\n  override fun encode(value: Custom): String {\n    return value.name\n  }\n}\n\ndata class QueryResult(\n  val custom: Custom,\n  val number: Int?\n) {\n  constructor(custom: Custom, number: Long?): this(\n    custom,\n    number?.toInt()\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Defining SQL Query for Page Boundaries Calculation in Keyset Paging\nDESCRIPTION: SQL query that pre-calculates page boundaries for keyset paging using SQLite Window Functions. This query identifies rows that should mark the start of each page based on the specified limit and anchor point.\nSOURCE: https://github.com/sqldelight/sqldelight/blob/master/docs/common/androidx_paging_usage.md#2025-04-23_snippet_3\n\nLANGUAGE: sql\nCODE:\n```\npageBoundaries:\nSELECT id \nFROM (\n  SELECT\n    id,\n    CASE\n      WHEN ((row_number() OVER(ORDER BY id ASC) - 0) % :limit) = 0 THEN 1\n      WHEN id = :anchor THEN 1\n      ELSE 0\n    END page_boundary;\n  FROM hockeyPlayer\n  ORDER BY id ASC\n)\nWHERE page_boundary = 1;\n```\n\n----------------------------------------\n\nTITLE: Implementing Single Query Transaction in Swift with SQLDelight\nDESCRIPTION: This snippet illustrates how to perform a single query transaction in Swift using SQLDelight. It demonstrates the usage of the 'transaction' method to ensure atomicity of the operation.\nSOURCE: https://github.com/sqldelight/sqldelight/blob/master/docs/multiplatform_sqlite/transactions.md#2025-04-23_snippet_2\n\nLANGUAGE: swift\nCODE:\n```\nlet playerOne = try! database.transactionWithResult { db -> Player in\n    let player = try! db.playerQueries.selectById(id: 1).executeAsOne()\n    try! db.playerQueries.updateName(name: player.name, id: player.id)\n    return try! db.playerQueries.selectById(id: 1).executeAsOne()\n}\n```\n\n----------------------------------------\n\nTITLE: Connecting to Database with VerifyMigrations Helper\nDESCRIPTION: Kotlin code to create a database connection with migration verification enabled, ensuring migrations from version 1 to the latest schema version are valid.\nSOURCE: https://github.com/sqldelight/sqldelight/blob/master/docs/js_sqlite/migrations.md#2025-04-23_snippet_5\n\nLANGUAGE: kotlin\nCODE:\n```\nval driver: SqlDriver = JdbcSqliteDriver(JdbcSqliteDriver.IN_MEMORY)\nMyDatabase.Schema.migrate(driver, 0, MyDatabase.Schema.version)\n\n// Or if you want to verify that your migrations are working correctly:\nval driver: SqlDriver = JdbcSqliteDriver(JdbcSqliteDriver.IN_MEMORY)\ndriver.execute(null, \"PRAGMA foreign_keys=ON\", 0)\nVerifyMigrations.MyDatabase(driver, 1)\n\nval database = MyDatabase(driver)\n```\n\n----------------------------------------\n\nTITLE: SQL Query with Direct Uppercase Projection\nDESCRIPTION: SQL query definition that performs uppercase transformation directly in SQL using the upper() function, demonstrating the preferred way to handle projections.\nSOURCE: https://github.com/sqldelight/sqldelight/blob/master/docs/common/custom_projections.md#2025-04-23_snippet_1\n\nLANGUAGE: sql\nCODE:\n```\nselectNames:\nSELECT upper(full_name)\nFROM hockeyPlayer;\n```\n\n----------------------------------------\n\nTITLE: Configuring SQLDelight Schema Dependencies in Kotlin Build Script\nDESCRIPTION: Shows how to set up a database in project-a that depends on the schema from project-b using Kotlin DSL in build.gradle.kts. The dependency is specified using the dependency() function in the database configuration.\nSOURCE: https://github.com/sqldelight/sqldelight/blob/master/docs/common/gradle-dependencies.md#2025-04-23_snippet_0\n\nLANGUAGE: kotlin\nCODE:\n```\n// project-a/build.gradle.kts\n\nsqldelight {\n  databases {\n    create(\"MyDatabase\") {\n      packageName.set(\"com.example.projecta\")\n      dependency(project(\":ProjectB\"))\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining SQL Queries for Offset-Based Paging in SQLDelight\nDESCRIPTION: SQL queries for implementing offset-based paging, including a count query to determine total items and a paged query that uses LIMIT and OFFSET clauses to retrieve specific page data.\nSOURCE: https://github.com/sqldelight/sqldelight/blob/master/docs/common/androidx_paging_usage.md#2025-04-23_snippet_0\n\nLANGUAGE: sql\nCODE:\n```\ncountPlayers:\nSELECT count(*) FROM hockeyPlayer;\n\nplayers:\nSELECT *\nFROM hockeyPlayer\nLIMIT :limit OFFSET :offset;\n```\n\n----------------------------------------\n\nTITLE: Registering a Custom Type Adapter in a SQLDelight Database Implementation\nDESCRIPTION: Demonstrates how to register a custom column adapter with a SQLDelight database. This allows SQLDelight to automatically convert between the database type and the Kotlin type when executing queries.\nSOURCE: https://github.com/sqldelight/sqldelight/blob/master/docs/jvm_mysql/custom_projections.md#2025-04-23_snippet_1\n\nLANGUAGE: kotlin\nCODE:\n```\nval database = Database(\n  driver = driver,\n  personAdapter = Person.Adapter(\n    birthdayAdapter = dateAdapter\n  )\n)\n```\n\n----------------------------------------\n\nTITLE: Initializing SQLDelight Android Driver\nDESCRIPTION: Creates an instance of the AndroidSqliteDriver with the Database Schema and application context. This driver connects to a SQLite database file and handles schema creation or migration automatically.\nSOURCE: https://github.com/sqldelight/sqldelight/blob/master/docs/android_sqlite/index.md#2025-04-23_snippet_2\n\nLANGUAGE: kotlin\nCODE:\n```\nval driver: SqlDriver = AndroidSqliteDriver(Database.Schema, context, \"test.db\")\n```\n\n----------------------------------------\n\nTITLE: Defining SQL Query with Keyset Pagination\nDESCRIPTION: SQL query that implements keyset pagination using a WHERE clause with a conditional parameter. This approach is more efficient than offset-based pagination for large datasets.\nSOURCE: https://github.com/sqldelight/sqldelight/blob/master/docs/js_sqlite/androidx_paging.md#2025-04-23_snippet_3\n\nLANGUAGE: sql\nCODE:\n```\npagedByValue:\nSELECT *\nFROM team\nWHERE\n  CASE WHEN :afterValue IS NULL THEN 1\n  ELSE value > :afterValue\n  END\nORDER BY value\nLIMIT :limit;\n```\n\n----------------------------------------\n\nTITLE: SQLDelight Schema File - Creating Index Schema\nDESCRIPTION: This code snippet demonstrates a typical SQLDelight schema file with index creation and table organization. SQLDelight uses these statements to generate a Database class and Schema object for database operations.\nSOURCE: https://github.com/sqldelight/sqldelight/blob/master/docs/common/index_schema.md#2025-04-23_snippet_0\n\nLANGUAGE: sql\nCODE:\n```\n{% include 'common/index_schema_sq.md' %}\n```\n\n----------------------------------------\n\nTITLE: Basic Transaction Usage in SQLDelight\nDESCRIPTION: Demonstrates how to perform a basic transaction in SQLDelight using the transaction() function. This ensures that either all operations within the transaction succeed, or none of them do.\nSOURCE: https://github.com/sqldelight/sqldelight/blob/master/docs/jvm_h2/transactions.md#2025-04-23_snippet_0\n\nLANGUAGE: kotlin\nCODE:\n```\n// To perform a transaction in SQLDelight, simply use the transaction() function:\ndatabase.transaction {\n  // Make some database calls.\n}\n```\n\n----------------------------------------\n\nTITLE: Transaction Rollback in SQLDelight\nDESCRIPTION: Demonstrates how to rollback a transaction when an error occurs, ensuring that no changes are persisted to the database in case of failure.\nSOURCE: https://github.com/sqldelight/sqldelight/blob/master/docs/jvm_h2/transactions.md#2025-04-23_snippet_2\n\nLANGUAGE: kotlin\nCODE:\n```\ndatabase.transaction {\n  // Make some database calls.\n  \n  // If an error occurs, roll back the transaction.\n  rollback()\n}\n```\n\n----------------------------------------\n\nTITLE: Transaction with Return Value in SQLDelight\nDESCRIPTION: Shows how to execute a transaction that returns a value, useful when you need to perform database operations and use their results.\nSOURCE: https://github.com/sqldelight/sqldelight/blob/master/docs/jvm_h2/transactions.md#2025-04-23_snippet_1\n\nLANGUAGE: kotlin\nCODE:\n```\nval result = database.transactionWithResult<ReturnType> {\n  // Make some database calls.\n  return@transactionWithResult ReturnType(...)\n}\n```\n\n----------------------------------------\n\nTITLE: Converting SQLDelight Query to RxJava Observable\nDESCRIPTION: Demonstrates how to convert a SQLDelight query into an RxJava Observable stream of results. The code uses the asObservable() extension function and mapToList() to transform query results into a list of HockeyPlayer objects.\nSOURCE: https://github.com/sqldelight/sqldelight/blob/master/docs/common/rxjava.md#2025-04-23_snippet_2\n\nLANGUAGE: kotlin\nCODE:\n```\nval players: Observable<List<HockeyPlayer>> = \n  playerQueries.selectAll()\n    .asObservable()\n    .mapToList()\n```\n\n----------------------------------------\n\nTITLE: Adding Multiple Source Directories in Kotlin DSL\nDESCRIPTION: Configuration to add multiple source directories where SQLDelight will look for SQL files (.sq and .sqm files). This is an alternative to setFrom() that allows specifying multiple locations.\nSOURCE: https://github.com/sqldelight/sqldelight/blob/master/docs/common/gradle.md#2025-04-23_snippet_8\n\nLANGUAGE: kotlin\nCODE:\n```\nsrcDirs(\"src/main/sqldelight\", \"main/sqldelight\")\n```\n\n----------------------------------------\n\nTITLE: Implementing Enum Column Adapter\nDESCRIPTION: Demonstrates how to use the built-in EnumColumnAdapter to handle enum type conversion in the database initialization.\nSOURCE: https://github.com/sqldelight/sqldelight/blob/master/docs/common/custom_column_types.md#2025-04-23_snippet_3\n\nLANGUAGE: kotlin\nCODE:\n```\nval queryWrapper: Database = Database(\n  driver = driver,\n  hockeyPlayerAdapter = HockeyPlayer.Adapter(\n    positionAdapter = EnumColumnAdapter()\n  )\n)\n```\n\n----------------------------------------\n\nTITLE: Creating a Multi-Column Projection with Renamed Parameters in SQLDelight\nDESCRIPTION: Demonstrates how to use column aliases (AS) in SQL to match parameter names in a constructor for custom projections. This allows more flexibility in naming columns while maintaining constructor compatibility.\nSOURCE: https://github.com/sqldelight/sqldelight/blob/master/docs/jvm_mysql/custom_projections.md#2025-04-23_snippet_8\n\nLANGUAGE: sql\nCODE:\n```\nimport com.example.Names;\n\nselect_names:\nSELECT\n  first_name AS firstName,\n  last_name AS lastName\nFROM person;\n```\n\n----------------------------------------\n\nTITLE: Using Extended Transactions in SQLDelight\nDESCRIPTION: Explains the useTransaction extension function which is available on QueryResult.Value objects. This allows for transaction initiation from query results.\nSOURCE: https://github.com/sqldelight/sqldelight/blob/master/docs/jvm_mysql/transactions.md#2025-04-23_snippet_5\n\nLANGUAGE: kotlin\nCODE:\n```\nval player = playerQueries.selectById(\"abc123\").executeAsOne()\n// or\nval playerOrNull = playerQueries.selectById(\"abc123\").executeAsOneOrNull()\n\n// Both of these queries return a `QueryResult.Value<T>`\nplayer.useTransaction {\n  // Do work in a transaction using this result\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Database with Enum Column Adapter in SQLDelight\nDESCRIPTION: Demonstrates how to create a SQLDelight database instance with a column adapter for the enum 'status' field. The adapter is applied to convert between SQL TEXT and the Kotlin enum Status.\nSOURCE: https://github.com/sqldelight/sqldelight/blob/master/docs/jvm_h2/custom_projections.md#2025-04-23_snippet_5\n\nLANGUAGE: Kotlin\nCODE:\n```\nval database = Database(\n  driver = driver,\n  dataAdapter = Data.Adapter(\n    statusAdapter = statusAdapter\n  )\n)\n```\n\n----------------------------------------\n\nTITLE: Custom projection data class with different property types\nDESCRIPTION: This Kotlin data class is designed to receive mapped query results where the number is converted to a String. It demonstrates how custom mappers can transform data types during projection.\nSOURCE: https://github.com/sqldelight/sqldelight/blob/master/docs/android_sqlite/custom_projections.md#2025-04-23_snippet_6\n\nLANGUAGE: kotlin\nCODE:\n```\ndata class PlayerData(\n  val name: String,\n  val number: String\n)\n```\n\n----------------------------------------\n\nTITLE: Implementing a Names Class for Custom Projection with Renamed Parameters\nDESCRIPTION: Shows the implementation of a Names class that corresponds to a SQL query with renamed columns. The constructor parameter names match the column aliases from the query.\nSOURCE: https://github.com/sqldelight/sqldelight/blob/master/docs/jvm_mysql/custom_projections.md#2025-04-23_snippet_9\n\nLANGUAGE: kotlin\nCODE:\n```\ndata class Names(val firstName: String, val lastName: String)\n```\n\n----------------------------------------\n\nTITLE: Implementing Enum Column Adapter in Kotlin for SQLDelight\nDESCRIPTION: Shows how to create a column adapter for an enum type in Kotlin. This adapter is used to convert between SQL TEXT and the Kotlin enum class Status.\nSOURCE: https://github.com/sqldelight/sqldelight/blob/master/docs/jvm_h2/custom_projections.md#2025-04-23_snippet_4\n\nLANGUAGE: Kotlin\nCODE:\n```\nenum class Status { VALID, INVALID }\n\nval statusAdapter = object : ColumnAdapter<Status, String> {\n  override fun decode(databaseValue: String) = Status.valueOf(databaseValue)\n  override fun encode(value: Status) = value.name\n}\n```\n\n----------------------------------------\n\nTITLE: Using GROUP BY with COUNT in SQLDelight\nDESCRIPTION: This snippet demonstrates how to use the GROUP BY clause with the COUNT aggregate function to group players by their team and count the number of players in each team.\nSOURCE: https://github.com/sqldelight/sqldelight/blob/master/docs/jvm_h2/grouping_statements.md#2025-04-23_snippet_0\n\nLANGUAGE: sql\nCODE:\n```\nSELECT team, COUNT(*) AS player_count\nFROM player\nGROUP BY team;\n```\n\n----------------------------------------\n\nTITLE: Creating a Table with SQLite Types in SQLDelight\nDESCRIPTION: Demonstrates how SQLite column types map to Kotlin types in SQLDelight. INTEGER values are retrieved as Long, REAL as Double, TEXT as String, and BLOB as ByteArray.\nSOURCE: https://github.com/sqldelight/sqldelight/blob/master/docs/common/types_sqlite.md#2025-04-23_snippet_0\n\nLANGUAGE: sql\nCODE:\n```\nCREATE TABLE some_types (\n  some_long INTEGER,           -- Stored as INTEGER in db, retrieved as Long\n  some_double REAL,            -- Stored as REAL in db, retrieved as Double\n  some_string TEXT,            -- Stored as TEXT in db, retrieved as String\n  some_blob BLOB               -- Stored as BLOB in db, retrieved as ByteArray\n);\n```\n\n----------------------------------------\n\nTITLE: Using SQLDelight Transactions with Coroutines\nDESCRIPTION: Demonstrates how to use SQLDelight transactions with Kotlin coroutines using the transactionWithContext function. This allows for suspending operations inside transactions.\nSOURCE: https://github.com/sqldelight/sqldelight/blob/master/docs/jvm_mysql/transactions.md#2025-04-23_snippet_3\n\nLANGUAGE: kotlin\nCODE:\n```\nval database = Database(driver)\n\nrunBlocking {\n  database.transactionWithContext(Dispatchers.IO) {\n    database.userQueries.insert(\"user\", \"name\")\n    // Some suspending operation\n    delay(10)\n    database.userQueries.insert(\"another\", \"name\")\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring SQLDelight Databases in Groovy DSL\nDESCRIPTION: Basic configuration to create a SQLDelight database with a specified name using the Groovy DSL. This is the container configuration where specific database settings can be defined.\nSOURCE: https://github.com/sqldelight/sqldelight/blob/master/docs/common/gradle.md#2025-04-23_snippet_1\n\nLANGUAGE: groovy\nCODE:\n```\nsqldelight {\n  databases {\n    MyDatabase {\n      // Database configuration here.\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing a Row Adapter for Custom Type Mapping in SQLDelight\nDESCRIPTION: Shows how to implement a RowAdapter to convert query results into a custom type. This approach is used when the mapping logic needs to be applied across multiple queries.\nSOURCE: https://github.com/sqldelight/sqldelight/blob/master/docs/jvm_postgresql/custom_projections.md#2025-04-23_snippet_3\n\nLANGUAGE: kotlin\nCODE:\n```\nval playerAndTeamAdapter = object : RowAdapter<PlayerAndTeam, Player, Team> {\n  override fun map(player: Player, team: Team) = PlayerAndTeam(player, team)\n}\n\nval selectPlayerAndTeams = playerQueries.selectPlayerAndTeams(playerAndTeamAdapter)\n```\n\n----------------------------------------\n\nTITLE: Configuring SQLDelight Web Worker Driver Dependencies in Kotlin\nDESCRIPTION: Kotlin DSL configuration for adding SQLDelight web worker driver and required webpack plugin dependencies to a Kotlin/JS project.\nSOURCE: https://github.com/sqldelight/sqldelight/blob/master/docs/js_sqlite/index.md#2025-04-23_snippet_0\n\nLANGUAGE: kotlin\nCODE:\n```\nkotlin {\n  sourceSets.jsMain.dependencies {\n    implementation(\"app.cash.sqldelight:web-worker-driver:{{ versions.sqldelight }}\")\n    implementation(devNpm(\"copy-webpack-plugin\", \"9.1.0\"))\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Reader Connection Pools in SQLDelight Native Driver\nDESCRIPTION: Initializes a SQLite driver with multiple reader connections by specifying the maximum number of reader connections in the pool.\nSOURCE: https://github.com/sqldelight/sqldelight/blob/master/docs/native_sqlite/index.md#2025-04-23_snippet_3\n\nLANGUAGE: kotlin\nCODE:\n```\nval driver: SqlDriver = NativeSqliteDriver(\n    Database.Schema, \n    \"test.db\", \n    maxReaderConnections = 4\n)\n```\n\n----------------------------------------\n\nTITLE: Implementing a Name Class for Multi-Column Custom Projections in SQLDelight\nDESCRIPTION: Shows the implementation of a Name class used in a multi-column custom projection. The constructor parameters match the column names and order from the SQL query.\nSOURCE: https://github.com/sqldelight/sqldelight/blob/master/docs/jvm_mysql/custom_projections.md#2025-04-23_snippet_7\n\nLANGUAGE: kotlin\nCODE:\n```\ndata class Name(val first_name: String, val last_name: String)\n```\n\n----------------------------------------\n\nTITLE: Using Custom Column Types in SQLDelight Queries\nDESCRIPTION: This snippet shows how to use a custom column type in a SQLDelight query. It defines a table with a column using the custom List<Int> type and demonstrates how to insert and select data using this custom type.\nSOURCE: https://github.com/sqldelight/sqldelight/blob/master/docs/native_sqlite/types.md#2025-04-23_snippet_1\n\nLANGUAGE: sql\nCODE:\n```\nCREATE TABLE item(\n  id INTEGER NOT NULL PRIMARY KEY AUTOINCREMENT,\n  list_of_ints TEXT AS List<Int> NOT NULL\n);\n\ninsertItem:\nINSERT INTO item(list_of_ints)\nVALUES (?);\n\nselectAllItems:\nSELECT *\nFROM item;\n```\n\n----------------------------------------\n\nTITLE: Implementing a Custom Projection with Custom Return Type in SQLDelight\nDESCRIPTION: Demonstrates how to define a query with a custom projection that returns a specific type. The type parameter after the colon in the query name specifies the return type for the generated function.\nSOURCE: https://github.com/sqldelight/sqldelight/blob/master/docs/jvm_mysql/custom_projections.md#2025-04-23_snippet_3\n\nLANGUAGE: sql\nCODE:\n```\nimport com.example.DateTime;\n\nselect_birthday:\nSELECT birthday\nFROM person\nWHERE first_name = ?;\n```\n\n----------------------------------------\n\nTITLE: Configuring SQLDelight JVM Driver Dependencies in Kotlin\nDESCRIPTION: Adds SQLite driver dependency for testing SQLDelight databases in JVM environment using Kotlin DSL.\nSOURCE: https://github.com/sqldelight/sqldelight/blob/master/docs/android_sqlite/testing.md#2025-04-23_snippet_0\n\nLANGUAGE: kotlin\nCODE:\n```\ndependencies {\n  testImplementation(\"app.cash.sqldelight:sqlite-driver:{{ versions.sqldelight }}\")\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing a mapper for Java classes using builder pattern\nDESCRIPTION: This Kotlin code implements a mapper function that constructs a Java object using the builder pattern. It shows how to create more complex object mappings beyond simple constructors.\nSOURCE: https://github.com/sqldelight/sqldelight/blob/master/docs/android_sqlite/custom_projections.md#2025-04-23_snippet_8\n\nLANGUAGE: kotlin\nCODE:\n```\nval javaModelMapper = { name: String, number: Int ->\n  JavaHockeyPlayer.newBuilder()\n    .name(name)\n    .number(number)\n    .build()\n}\n```\n\n----------------------------------------\n\nTITLE: Using Transactions with JVM JDBC in SQLDelight\nDESCRIPTION: Illustrates how to configure transaction management when using JDBC on the JVM. This example shows how to set explicit savepoints and configure isolation levels.\nSOURCE: https://github.com/sqldelight/sqldelight/blob/master/docs/android_sqlite/transactions.md#2025-04-23_snippet_4\n\nLANGUAGE: kotlin\nCODE:\n```\nval driver = JdbcSqliteDriver(\"jdbc:sqlite:file.db\")\n\nval db = AppDatabase.invoke(driver)\n\nval jdbcConnection = driver.getConnection()\ndb.someQueries.withTransaction(\n  noEnclosing = {}, // Called if this transaction is not nested in another.\n  enclosing = { jdbcConnection.setSavepoint(\"savepoint_name\") }, // Called if this transaction is nested in another.\n  bodyWithReturn = {\n    jdbcConnection.createStatement().execute(\"PRAGMA journal_mode = WAL\")\n    jdbcConnection.transactionIsolation = Connection.TRANSACTION_SERIALIZABLE\n    db.someQueries.insertInA()\n    db.someQueries.insertInB()\n    return@withTransaction 1 + 1\n  },\n  successfulReturn = {}, // Called if the transaction returns successfully with no exceptions.\n  exception = {}, // Called if an exception occurs in the transaction.\n  finallyAfter = {} // Called after all other callbacks.\n)\n```\n\n----------------------------------------\n\nTITLE: SQL query with custom projection for a Java class with builder pattern\nDESCRIPTION: This SQL query shows how to map query results to a Java class that uses the builder pattern. It demonstrates the flexibility of custom projections with different object creation patterns.\nSOURCE: https://github.com/sqldelight/sqldelight/blob/master/docs/android_sqlite/custom_projections.md#2025-04-23_snippet_7\n\nLANGUAGE: sql\nCODE:\n```\nmapToJavaModel:\nSELECT *\nFROM hockeyPlayer\nMAP TO TYPED(javaModelMapper);\n```\n\n----------------------------------------\n\nTITLE: Initializing In-Memory SQLite Database Driver\nDESCRIPTION: Creates a SQLite database driver instance for an in-memory database using the IN_MEMORY constant.\nSOURCE: https://github.com/sqldelight/sqldelight/blob/master/docs/jvm_sqlite/index.md#2025-04-23_snippet_3\n\nLANGUAGE: kotlin\nCODE:\n```\nval driver: SqlDriver = JdbcSqliteDriver(JdbcSqliteDriver.IN_MEMORY, Properties(), Database.Schema)\n```\n\n----------------------------------------\n\nTITLE: Configuring SQLDelight Schema Dependencies in Groovy Build Script\nDESCRIPTION: Shows how to set up a database in project-a that depends on the schema from project-b using Groovy syntax in build.gradle. The dependency is specified using the dependency keyword in the database configuration.\nSOURCE: https://github.com/sqldelight/sqldelight/blob/master/docs/common/gradle-dependencies.md#2025-04-23_snippet_1\n\nLANGUAGE: groovy\nCODE:\n```\n// project-a/build.gradle\n\nsqldelight {\n  databases {\n    MyDatabase {\n      packageName = \"com.example.projecta\"\n      dependency project(\":ProjectB\")\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Custom Column Type in Kotlin for SQLDelight\nDESCRIPTION: This snippet demonstrates how to define a custom column type in Kotlin for use with SQLDelight. It shows the creation of a ColumnAdapter for a custom UUID type, which converts between the database representation (TEXT) and the Kotlin object.\nSOURCE: https://github.com/sqldelight/sqldelight/blob/master/docs/multiplatform_sqlite/types.md#2025-04-23_snippet_0\n\nLANGUAGE: kotlin\nCODE:\n```\nimport com.squareup.sqldelight.ColumnAdapter\n\ndata class UUID(val value: String)\n\nval uuidAdapter = object : ColumnAdapter<UUID, String> {\n  override fun decode(databaseValue: String): UUID = UUID(databaseValue)\n  override fun encode(value: UUID): String = value.value\n}\n```\n\n----------------------------------------\n\nTITLE: Executing SQL Projection Query in Kotlin\nDESCRIPTION: Example showing how to execute the SQL-based uppercase projection query from Kotlin code, demonstrating the simpler implementation compared to using mapper functions.\nSOURCE: https://github.com/sqldelight/sqldelight/blob/master/docs/common/custom_projections.md#2025-04-23_snippet_2\n\nLANGUAGE: kotlin\nCODE:\n```\nval selectAllNames = playerQueries.selectNames()\nprintln(selectAllNames.executeAsList())\n// Prints [\"RYAN GETZLAF\", \"COREY PERRY\"]\n```\n\n----------------------------------------\n\nTITLE: Creating a Database Factory with Coroutine Support\nDESCRIPTION: This code demonstrates how to create a database factory with coroutine support by providing a CoroutineDispatcher. It shows the implementation for Android, iOS, and desktop platforms.\nSOURCE: https://github.com/sqldelight/sqldelight/blob/master/docs/js_sqlite/coroutines.md#2025-04-23_snippet_1\n\nLANGUAGE: kotlin\nCODE:\n```\nexpect fun createDb(driver: SqlDriver): Database\n\n// In your multiplatform code\nexpect val backgroundDispatcher: CoroutineDispatcher\n\n// In your Android-specific code\nactual val backgroundDispatcher = Dispatchers.IO\n\n// In your iOS-specific code\nactual val backgroundDispatcher = Dispatchers.Default\n\n// In your desktop-specific code\nactual val backgroundDispatcher = Dispatchers.IO\n```\n\n----------------------------------------\n\nTITLE: Implementing a custom mapper function for query results\nDESCRIPTION: This Kotlin code shows how to implement a custom mapper function that transforms a query result into a custom data class. The mapper function takes query columns as parameters and returns the constructed object.\nSOURCE: https://github.com/sqldelight/sqldelight/blob/master/docs/android_sqlite/custom_projections.md#2025-04-23_snippet_5\n\nLANGUAGE: kotlin\nCODE:\n```\nval playerMapper = { name: String, number: Int ->\n  PlayerData(name, number.toString())\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a Simple Single-Column Custom Projection in SQLDelight\nDESCRIPTION: Shows how to define a SQL query with a custom projection for a single column. This approach uses a parameter with the type name to cast the result directly to the desired type.\nSOURCE: https://github.com/sqldelight/sqldelight/blob/master/docs/jvm_mysql/custom_projections.md#2025-04-23_snippet_2\n\nLANGUAGE: sql\nCODE:\n```\nselect_birthday:\nSELECT birthday\nFROM person\nWHERE first_name = ?;\n\n```\n\n----------------------------------------\n\nTITLE: Implementing Database Driver Provider for Native in Kotlin\nDESCRIPTION: This snippet demonstrates the actual implementation of the database driver provider for native platforms, using NativeSqliteDriver with a synchronous schema adaptation.\nSOURCE: https://github.com/sqldelight/sqldelight/blob/master/docs/js_sqlite/multiplatform.md#2025-04-23_snippet_5\n\nLANGUAGE: kotlin\nCODE:\n```\nactual suspend fun provideDbDriver(\n  schema: SqlSchema<QueryResult.AsyncValue<Unit>>\n): SqlDriver {\n  return NativeSqliteDriver(schema.synchronous(), \"test.db\")\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Migration Schema in Gradle (Groovy DSL)\nDESCRIPTION: Configures SQLDelight in Gradle using Groovy to derive the database schema from migration files. This enables progressive database schema updates using .sqm migration files.\nSOURCE: https://github.com/sqldelight/sqldelight/blob/master/docs/common/index_server.md#2025-04-23_snippet_1\n\nLANGUAGE: groovy\nCODE:\n```\nsqldelight {\n  databases {\n    Database {\n      ...\n      srcDirs \"sqldelight\"\n      deriveSchemaFromMigrations = true\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Applying SQLDelight Plugin in build.gradle.kts (Kotlin DSL)\nDESCRIPTION: This snippet demonstrates how to apply the SQLDelight plugin in a Gradle build file using Kotlin DSL. It includes the plugins section to apply the plugin using the plugins DSL approach.\nSOURCE: https://github.com/sqldelight/sqldelight/blob/master/docs/android_sqlite/gradle.md#2025-04-23_snippet_1\n\nLANGUAGE: kotlin\nCODE:\n```\nplugins {\n  id(\"app.cash.sqldelight\") version \"{{site.latest_version}}\"\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Custom Mapper for Query Results in SQLDelight\nDESCRIPTION: Demonstrates how to create a custom mapper function that transforms a query result into a specialized object type. This approach allows for data transformation during query execution.\nSOURCE: https://github.com/sqldelight/sqldelight/blob/master/docs/jvm_postgresql/custom_projections.md#2025-04-23_snippet_0\n\nLANGUAGE: kotlin\nCODE:\n```\nval playerAndTeam: Query<PlayerAndTeam> = playersForTeam(3)\n    .customFunction { \n      cursor ->\n        PlayerAndTeam(\n          Player(\n            cursor.getLong(0)!!, // playerId\n            cursor.getString(1)!, // fullName\n            cursor.getLong(2)!!, // number\n            cursor.getLong(3)!, // teamId\n          ),\n          Team(\n            cursor.getLong(3)!!, // teamId\n            cursor.getString(4)!, // name\n          )\n        )\n    }\n```\n\n----------------------------------------\n\nTITLE: Adding Primitive Adapters Dependency in Kotlin\nDESCRIPTION: Shows how to add the primitive-adapters dependency to a Kotlin project using Kotlin DSL. This module provides adapters to convert between SQL and Kotlin primitive types.\nSOURCE: https://github.com/sqldelight/sqldelight/blob/master/docs/common/types_sqlite.md#2025-04-23_snippet_1\n\nLANGUAGE: kotlin\nCODE:\n```\ndependencies {\n  implementation(\"app.cash.sqldelight:primitive-adapters:{{ versions.sqldelight }}\")\n}\n```\n\n----------------------------------------\n\nTITLE: Type Inference in SQLDelight Queries\nDESCRIPTION: Demonstrates automatic type inference for query parameters in SQLDelight. The example shows a simple SELECT query with a numeric parameter for player_number.\nSOURCE: https://github.com/sqldelight/sqldelight/blob/master/docs/common/query_arguments.md#2025-04-23_snippet_0\n\nLANGUAGE: sql\nCODE:\n```\nselectByNumber:\nSELECT *\nFROM hockeyPlayer\nWHERE player_number = ?;\n```\n\nLANGUAGE: kotlin\nCODE:\n```\nval selectNumber10 = playerQueries.selectByNumber(player_number = 10)\nprintln(selectNumber10.executeAsOne())\n// Prints \"Corey Perry\"\n```\n\n----------------------------------------\n\nTITLE: Deriving Schema From Migrations in Groovy DSL\nDESCRIPTION: Configuration to derive database schema from migration files. When true, the schema is generated from .sqm files as if each migration had been applied, rather than from .sq files.\nSOURCE: https://github.com/sqldelight/sqldelight/blob/master/docs/common/gradle.md#2025-04-23_snippet_23\n\nLANGUAGE: groovy\nCODE:\n```\nderiveSchemaFromMigrations = true\n```\n\n----------------------------------------\n\nTITLE: Implementing Database Driver Provider for JavaScript in Kotlin\nDESCRIPTION: This snippet shows the actual implementation of the database driver provider for JavaScript, using WebWorkerDriver with a Web Worker.\nSOURCE: https://github.com/sqldelight/sqldelight/blob/master/docs/js_sqlite/multiplatform.md#2025-04-23_snippet_2\n\nLANGUAGE: kotlin\nCODE:\n```\nactual suspend fun provideDbDriver(\n  schema: SqlSchema<QueryResult.AsyncValue<Unit>>\n): SqlDriver {\n  return WebWorkerDriver(\n    Worker(\n      js(\"\"\"new URL(\"@cashapp/sqldelight-sqljs-worker/sqljs.worker.js\", import.meta.url)\"\"\")\n    )\n  ).also { schema.create(it).await() }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Webpack for SQL.js WebAssembly Binary\nDESCRIPTION: Sets up Webpack configuration to handle the SQL.js WebAssembly binary. Provides fallbacks for Node.js modules and uses CopyWebpackPlugin to copy the WebAssembly binary to the output directory.\nSOURCE: https://github.com/sqldelight/sqldelight/blob/master/docs/js_sqlite/sqljs_worker.md#2025-04-23_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\n// {project}/webpack.config.d/sqljs.js\nconfig.resolve = {\n    fallback: {\n        fs: false,\n        path: false,\n        crypto: false,\n    }\n};\n\nconst CopyWebpackPlugin = require('copy-webpack-plugin');\nconfig.plugins.push(\n    new CopyWebpackPlugin({\n        patterns: [\n            '../../node_modules/sql.js/dist/sql-wasm.wasm'\n        ]\n    })\n);\n```\n\n----------------------------------------\n\nTITLE: Configuring SQLDelight Plugin with Kotlin DSL\nDESCRIPTION: Setup for applying the SQLDelight Gradle plugin using the Kotlin DSL in a build.gradle.kts file. This is the first step in configuring SQLDelight for a project.\nSOURCE: https://github.com/sqldelight/sqldelight/blob/master/docs/jvm_h2/gradle.md#2025-04-23_snippet_0\n\nLANGUAGE: kotlin\nCODE:\n```\nplugins {\n  id(\"app.cash.sqldelight\") version \"2.0.1\"\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Database Driver Provider for Android in Kotlin\nDESCRIPTION: This snippet shows the actual implementation of the database driver provider for Android, using AndroidSqliteDriver with a synchronous schema adaptation.\nSOURCE: https://github.com/sqldelight/sqldelight/blob/master/docs/js_sqlite/multiplatform.md#2025-04-23_snippet_4\n\nLANGUAGE: kotlin\nCODE:\n```\nactual suspend fun provideDbDriver(\n  schema: SqlSchema<QueryResult.AsyncValue<Unit>>\n): SqlDriver {\n  return AndroidSqliteDriver(schema.synchronous(), context, \"test.db\")\n}\n```\n\n----------------------------------------\n\nTITLE: Enabling Migration Verification in Groovy DSL\nDESCRIPTION: Configuration to enable verification of migration files during build. When true, the build will fail if there are any errors in migration files.\nSOURCE: https://github.com/sqldelight/sqldelight/blob/master/docs/common/gradle.md#2025-04-23_snippet_17\n\nLANGUAGE: groovy\nCODE:\n```\nverifyMigrations = true\n```\n\n----------------------------------------\n\nTITLE: Using HAVING Clause with GROUP BY in SQLDelight\nDESCRIPTION: This example shows how to use the HAVING clause in conjunction with GROUP BY to filter grouped results based on a condition. It filters departments with more than 10 employees.\nSOURCE: https://github.com/sqldelight/sqldelight/blob/master/docs/jvm_mysql/grouping_statements.md#2025-04-23_snippet_1\n\nLANGUAGE: sql\nCODE:\n```\nSELECT department, COUNT(*)\nFROM employee\nGROUP BY department\nHAVING COUNT(*) > 10;\n```\n\n----------------------------------------\n\nTITLE: Defining Value Type Columns\nDESCRIPTION: Shows how to create a column that generates a value type wrapper around the underlying database type using the AS VALUE modifier.\nSOURCE: https://github.com/sqldelight/sqldelight/blob/master/docs/common/custom_column_types.md#2025-04-23_snippet_4\n\nLANGUAGE: sql\nCODE:\n```\nCREATE TABLE hockeyPlayer (\n  id INT AS VALUE\n);\n```\n\n----------------------------------------\n\nTITLE: Setting Package Name in Kotlin DSL\nDESCRIPTION: Configuration to set the package name used for the generated database class. This determines the package structure in which the database class will be placed.\nSOURCE: https://github.com/sqldelight/sqldelight/blob/master/docs/common/gradle.md#2025-04-23_snippet_4\n\nLANGUAGE: kotlin\nCODE:\n```\npackageName.set(\"com.example.db\")\n```\n\n----------------------------------------\n\nTITLE: Creating a Database Factory for Android in Kotlin\nDESCRIPTION: This code snippet demonstrates how to create a database factory for Android using SQLDelight. It utilizes the AndroidSqliteDriver to create the database connection.\nSOURCE: https://github.com/sqldelight/sqldelight/blob/master/docs/native_sqlite/coroutines.md#2025-04-23_snippet_1\n\nLANGUAGE: kotlin\nCODE:\n```\nimport com.squareup.sqldelight.android.AndroidSqliteDriver\nimport com.squareup.sqldelight.db.SqlDriver\n\nactual class DatabaseDriverFactory(private val context: Context) {\n    actual fun createDriver(): SqlDriver {\n        return AndroidSqliteDriver(Database.Schema, context, \"test.db\")\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Using SQLDelight Transactions with Complex Coroutine Logic\nDESCRIPTION: Shows a more complex example of using transactions with coroutines, including nested transaction logic with suspending operations. This handles transaction coordination across coroutine operations.\nSOURCE: https://github.com/sqldelight/sqldelight/blob/master/docs/jvm_mysql/transactions.md#2025-04-23_snippet_4\n\nLANGUAGE: kotlin\nCODE:\n```\nval database = Database(driver)\nval scope = CoroutineScope(Dispatchers.IO)\n\nscope.launch {\n  database.transactionWithContext(coroutineContext) {\n    database.userQueries.insert(\"user\", \"name\")\n    \n    withContext(Dispatchers.Default) {\n      database.transactionWithContext(coroutineContext) {\n        // Runs in the outer transaction\n        database.userQueries.insert(\"nested\", \"user\")\n      }\n    }\n    // If this throws, both inserts are reverted.\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a QueryPagingSource for Offset-Based Paging in Kotlin\nDESCRIPTION: Kotlin implementation for creating a PagingSource that uses offset-based paging. It requires a count query and the paged query, with an optional context parameter that defaults to Dispatchers.IO.\nSOURCE: https://github.com/sqldelight/sqldelight/blob/master/docs/common/androidx_paging_usage.md#2025-04-23_snippet_1\n\nLANGUAGE: kotlin\nCODE:\n```\nimport app.cash.sqldelight.android.paging3.QueryPagingSource\n\nval pagingSource: PagingSource = QueryPagingSource(\n  countQuery = playerQueries.countPlayers(),\n  transacter = playerQueries,\n  context = Dispatchers.IO,\n  queryProvider = playerQueries::players,\n)\n```\n\n----------------------------------------\n\nTITLE: Creating a Database Factory for JVM in Kotlin\nDESCRIPTION: This code snippet illustrates how to create a database factory for JVM platforms using SQLDelight. It employs the JdbcSqliteDriver to create the database connection.\nSOURCE: https://github.com/sqldelight/sqldelight/blob/master/docs/native_sqlite/coroutines.md#2025-04-23_snippet_3\n\nLANGUAGE: kotlin\nCODE:\n```\nimport com.squareup.sqldelight.db.SqlDriver\nimport com.squareup.sqldelight.sqlite.driver.JdbcSqliteDriver\n\nactual class DatabaseDriverFactory {\n    actual fun createDriver(): SqlDriver {\n        val driver: SqlDriver = JdbcSqliteDriver(JdbcSqliteDriver.IN_MEMORY)\n        Database.Schema.create(driver)\n        return driver\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing SQLDelight Driver Factory for JVM\nDESCRIPTION: This snippet shows the JVM-specific implementation of the DriverFactory class, using JdbcSqliteDriver to create a SqlDriver instance with JDBC.\nSOURCE: https://github.com/sqldelight/sqldelight/blob/master/docs/multiplatform_sqlite/index.md#2025-04-23_snippet_5\n\nLANGUAGE: kotlin\nCODE:\n```\nactual class DriverFactory {\n  actual fun createDriver(): SqlDriver {\n    val driver: SqlDriver = JdbcSqliteDriver(\"jdbc:sqlite:test.db\", Properties(), Database.Schema)\n    return driver\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Adding Multiple Source Directories in Groovy DSL\nDESCRIPTION: Configuration to add multiple source directories where SQLDelight will look for SQL files (.sq and .sqm files). This allows specifying multiple source locations.\nSOURCE: https://github.com/sqldelight/sqldelight/blob/master/docs/common/gradle.md#2025-04-23_snippet_9\n\nLANGUAGE: groovy\nCODE:\n```\nsrcDirs('src/main/sqldelight', 'main/sqldelight')\n```\n\n----------------------------------------\n\nTITLE: Using SQLDelight PagingSource with Paging 3 Components in Kotlin\nDESCRIPTION: Example showing how to use the custom PagingSource implementation with Pager and collect the PagingData. This demonstrates the integration of SQLDelight queries with the AndroidX Paging 3 components in a typical application architecture.\nSOURCE: https://github.com/sqldelight/sqldelight/blob/master/docs/jvm_h2/androidx_paging.md#2025-04-23_snippet_1\n\nLANGUAGE: kotlin\nCODE:\n```\nclass PlayerRepository(private val database: Database) {\n    fun getPlayersPagingFlow(): Flow<PagingData<Player>> = Pager(\n        config = PagingConfig(\n            pageSize = 20,\n            enablePlaceholders = false,\n            maxSize = 100\n        ),\n        pagingSourceFactory = {\n            PlayerPagingSource(\n                queryProvider = {\n                    database.playerQueries.selectAll()\n                }\n            )\n        }\n    ).flow\n}\n\nclass MyViewModel(private val repository: PlayerRepository) : ViewModel() {\n    val players: Flow<PagingData<Player>> = repository.getPlayersPagingFlow()\n        .cachedIn(viewModelScope)\n}\n\n// In your UI component (Activity/Fragment):\nfun setupRecyclerView() {\n    val adapter = PlayerAdapter()\n    recyclerView.adapter = adapter\n\n    viewLifecycleOwner.lifecycleScope.launch {\n        viewLifecycleOwner.repeatOnLifecycle(Lifecycle.State.STARTED) {\n            viewModel.players.collect { pagingData ->\n                adapter.submitData(pagingData)\n            }\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Setting SQLite Linking in Kotlin DSL\nDESCRIPTION: Configuration for native targets specifying whether SQLite should be automatically linked. This adds metadata for linking SQLite when compiled to a dynamic framework.\nSOURCE: https://github.com/sqldelight/sqldelight/blob/master/docs/common/gradle.md#2025-04-23_snippet_2\n\nLANGUAGE: kotlin\nCODE:\n```\nlinkSqlite.set(true)\n```\n\n----------------------------------------\n\nTITLE: Configuring PostgreSQL Dialect for SQLDelight\nDESCRIPTION: This YAML configuration specifies the PostgreSQL dialect for SQLDelight and indicates that it's a server-side implementation.\nSOURCE: https://github.com/sqldelight/sqldelight/blob/master/docs/jvm_postgresql/index.md#2025-04-23_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\ndialect: \"app.cash.sqldelight:postgresql-dialect\"\nserver: true\n```\n\n----------------------------------------\n\nTITLE: Creating AndroidSqliteDriver with Migration Callbacks in Kotlin\nDESCRIPTION: This snippet shows how to create an AndroidSqliteDriver instance with custom migration callbacks. It demonstrates setting up the driver with a schema, context, database name, and a callback for executing SQL after a specific version update.\nSOURCE: https://github.com/sqldelight/sqldelight/blob/master/docs/android_sqlite/migrations.md#2025-04-23_snippet_0\n\nLANGUAGE: kotlin\nCODE:\n```\nval driver: SqlDriver = AndroidSqliteDriver(\n    schema = Database.Schema,\n    context = context,\n    name = \"test.db\",\n    callback = AndroidSqliteDriver.Callback(\n        schema = Database.Schema,\n        AfterVersion(3) { driver -> driver.execute(null, \"INSERT INTO test (value) VALUES('hello')\", 0) },\n    )\n)\n```\n\n----------------------------------------\n\nTITLE: Defining Paged SQL Query with LIMIT and OFFSET\nDESCRIPTION: SQL query definition that includes LIMIT and OFFSET parameters for pagination. This allows retrieving a specific portion of query results at a time.\nSOURCE: https://github.com/sqldelight/sqldelight/blob/master/docs/js_sqlite/androidx_paging.md#2025-04-23_snippet_1\n\nLANGUAGE: sql\nCODE:\n```\nteamQueries:\nSELECT *\nFROM team\nORDER BY name\nLIMIT :limit OFFSET :offset;\n```\n\n----------------------------------------\n\nTITLE: Adding SQLDelight AndroidX Paging Dependencies in Kotlin DSL\nDESCRIPTION: This snippet shows how to add the SQLDelight AndroidX Paging 3 extension as a dependency in a Kotlin build script. The dependency is added to the commonMain sourceSet for multiplatform projects.\nSOURCE: https://github.com/sqldelight/sqldelight/blob/master/docs/common/androidx_paging_multiplatform.md#2025-04-23_snippet_0\n\nLANGUAGE: kotlin\nCODE:\n```\nkotlin {\n  sourceSets.commonMain.dependencies {\n    implementation(\"app.cash.sqldelight:androidx-paging3-extensions:{{ versions.sqldelight }}\")\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Adding SQLDelight AndroidX Paging 3 Dependency in Kotlin\nDESCRIPTION: Shows how to add the SQLDelight AndroidX Paging 3 extension dependency to a Kotlin-based Gradle build script. This extension enables integration between SQLDelight and Android's Paging 3 Library for efficient data pagination.\nSOURCE: https://github.com/sqldelight/sqldelight/blob/master/docs/common/androidx_paging.md#2025-04-23_snippet_0\n\nLANGUAGE: kotlin\nCODE:\n```\ndependencies {\n  implementation(\"app.cash.sqldelight:androidx-paging3-extensions:{{ versions.sqldelight }}\")\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Source Directories in Kotlin DSL\nDESCRIPTION: Configuration to specify the collection of folders that SQLDelight will look in for SQL files (.sq and .sqm files). This replaces the default source directory locations.\nSOURCE: https://github.com/sqldelight/sqldelight/blob/master/docs/common/gradle.md#2025-04-23_snippet_6\n\nLANGUAGE: kotlin\nCODE:\n```\nsrcDirs.setFrom(\"src/main/sqldelight\")\n```\n\n----------------------------------------\n\nTITLE: Setting SQLite Linking in Groovy DSL\nDESCRIPTION: Configuration for native targets specifying whether SQLite should be automatically linked. This adds metadata for linking SQLite when compiled to a dynamic framework.\nSOURCE: https://github.com/sqldelight/sqldelight/blob/master/docs/common/gradle.md#2025-04-23_snippet_3\n\nLANGUAGE: groovy\nCODE:\n```\nlinkSqlite = true\n```\n\n----------------------------------------\n\nTITLE: Implementing Database Driver Provider for JVM in Kotlin\nDESCRIPTION: This snippet demonstrates the actual implementation of the database driver provider for JVM, using JdbcSqliteDriver with an in-memory database.\nSOURCE: https://github.com/sqldelight/sqldelight/blob/master/docs/js_sqlite/multiplatform.md#2025-04-23_snippet_3\n\nLANGUAGE: kotlin\nCODE:\n```\nactual suspend fun provideDbDriver(\n  schema: SqlSchema<QueryResult.AsyncValue<Unit>>\n): SqlDriver {\n  return JdbcSqliteDriver(JdbcSqliteDriver.IN_MEMORY)\n    .also { schema.create(it).await() }\n}\n```\n\n----------------------------------------\n\nTITLE: Insert Operations with Data Classes in SQLDelight\nDESCRIPTION: Shows how to perform INSERT operations using data classes as parameters, binding entire objects to VALUE clauses.\nSOURCE: https://github.com/sqldelight/sqldelight/blob/master/docs/common/query_arguments.md#2025-04-23_snippet_3\n\nLANGUAGE: sql\nCODE:\n```\ninsertPlayer:\nINSERT INTO hockeyPlayer\nVALUES ?;\n```\n\nLANGUAGE: kotlin\nCODE:\n```\nval rickardRakell = HockeyPlayer(\n  full_name = \"Rickard Rakell\",\n  number = 67\n)\nplayerQueries.insertPlayer(rickardRakell)\n```\n\n----------------------------------------\n\nTITLE: SQL query with custom column names handled by lambda expression\nDESCRIPTION: This SQL query shows how to map columns with different names to a custom data class using a lambda expression. This approach is useful when column names don't match constructor parameter names.\nSOURCE: https://github.com/sqldelight/sqldelight/blob/master/docs/android_sqlite/custom_projections.md#2025-04-23_snippet_3\n\nLANGUAGE: sql\nCODE:\n```\ncolumnNamesDontMatch:\nSELECT\n  full_name as names,\n  jersey_number as numbers\nFROM hockeyPlayer\nMAP TO (names, numbers) -> com.example.HockeyPlayer(names, numbers);\n```\n\n----------------------------------------\n\nTITLE: Configuring SQLDelight for Native in Gradle\nDESCRIPTION: Configuration block for SQLDelight in a Kotlin/Native project. Specifies database name, package name, and includes the native driver dependency.\nSOURCE: https://github.com/sqldelight/sqldelight/blob/master/docs/jvm_mysql/gradle.md#2025-04-23_snippet_3\n\nLANGUAGE: gradle\nCODE:\n```\nsqldelight {\n  MyDatabase { // This will be the name of the generated database class.\n    packageName = \"com.example\"\n  }\n}\n\ndependencies {\n  implementation \"app.cash.sqldelight:native-driver:{{site.latest_version}}\"\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring SQLDelight JVM Driver Dependencies in Groovy\nDESCRIPTION: Adds SQLite driver dependency for testing SQLDelight databases in JVM environment using Groovy DSL.\nSOURCE: https://github.com/sqldelight/sqldelight/blob/master/docs/android_sqlite/testing.md#2025-04-23_snippet_1\n\nLANGUAGE: groovy\nCODE:\n```\ndependencies {\n  testImplementation \"app.cash.sqldelight:sqlite-driver:{{ versions.sqldelight }}\"\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Specific SQLite Version for Android Compatibility\nDESCRIPTION: Overrides the SQLite JDBC driver version to match specific Android API level SQLite version. Example shows configuration for Android API 23 compatibility.\nSOURCE: https://github.com/sqldelight/sqldelight/blob/master/docs/android_sqlite/testing.md#2025-04-23_snippet_3\n\nLANGUAGE: groovy\nCODE:\n```\ndependencies {\n  testImplementation('org.xerial:sqlite-jdbc') {\n    // Override the version of sqlite used by sqlite-driver to match Android API 23\n    version { strictly('3.8.10.2') }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Applying SQLDelight Plugin in Gradle\nDESCRIPTION: Shows how to apply the SQLDelight Gradle plugin to a project using either the plugins DSL or legacy approach. This is a prerequisite for using SQLDelight in any Gradle project.\nSOURCE: https://github.com/sqldelight/sqldelight/blob/master/docs/jvm_mysql/gradle.md#2025-04-23_snippet_0\n\nLANGUAGE: gradle\nCODE:\n```\nplugins {\n  id 'app.cash.sqldelight' version '{{site.latest_version}}'\n}\n```\n\nLANGUAGE: gradle\nCODE:\n```\nbuildscript {\n  repositories {\n    mavenCentral()\n  }\n  dependencies {\n    classpath 'app.cash.sqldelight:gradle-plugin:{{site.latest_version}}'\n  }\n}\n\napply plugin: 'app.cash.sqldelight'\n```\n\n----------------------------------------\n\nTITLE: Defining Common Database Driver Provider in Kotlin\nDESCRIPTION: This snippet defines an expect function in common Kotlin code for providing a SQLDelight database driver. It uses a SqlSchema with an asynchronous QueryResult type.\nSOURCE: https://github.com/sqldelight/sqldelight/blob/master/docs/js_sqlite/multiplatform.md#2025-04-23_snippet_1\n\nLANGUAGE: kotlin\nCODE:\n```\nexpect suspend fun provideDbDriver(\n  schema: SqlSchema<QueryResult.AsyncValue<Unit>>\n): SqlDriver\n```\n\n----------------------------------------\n\nTITLE: Defining SQL Query for Keyset Paging in SQLDelight\nDESCRIPTION: SQL query for implementing keyset paging that uses boundary keys instead of OFFSET. The query retrieves rows between beginInclusive and endExclusive keys, requiring a unique ordering column like id.\nSOURCE: https://github.com/sqldelight/sqldelight/blob/master/docs/common/androidx_paging_usage.md#2025-04-23_snippet_2\n\nLANGUAGE: sql\nCODE:\n```\nkeyedQuery:\nSELECT * FROM hockeyPlayer\nWHERE id >= :beginInclusive AND (id < :endExclusive OR :endExclusive IS NULL)\nORDER BY id ASC;\n```\n\n----------------------------------------\n\nTITLE: Configuring Foreign Keys in JVM SQLite Driver\nDESCRIPTION: Shows how to enable foreign key constraints when initializing a JdbcSqliteDriver. The code sets the 'foreign_keys' property to 'true' using Properties object.\nSOURCE: https://github.com/sqldelight/sqldelight/blob/master/docs/jvm_sqlite/foreign_keys.md#2025-04-23_snippet_0\n\nLANGUAGE: kotlin\nCODE:\n```\nJdbcSqliteDriver(\n  url = \"...\", \n  properties = Properties().apply { put(\"foreign_keys\", \"true\") }\n)\n```\n\n----------------------------------------\n\nTITLE: Initializing SQLite Driver for Testing\nDESCRIPTION: Sets up an in-memory SQLite database driver for testing and creates the database schema. Should be called in test setup method.\nSOURCE: https://github.com/sqldelight/sqldelight/blob/master/docs/android_sqlite/testing.md#2025-04-23_snippet_2\n\nLANGUAGE: kotlin\nCODE:\n```\n// When your test needs a driver\n@Before fun before() {\n  driver = JdbcSqliteDriver(JdbcSqliteDriver.IN_MEMORY)\n  Database.Schema.create(driver)\n}\n```\n\n----------------------------------------\n\nTITLE: Adding Primitive Adapters Dependency in Groovy\nDESCRIPTION: Shows how to add the primitive-adapters dependency to a Kotlin project using Groovy DSL. This module provides adapters to convert between SQL and Kotlin primitive types.\nSOURCE: https://github.com/sqldelight/sqldelight/blob/master/docs/common/types_sqlite.md#2025-04-23_snippet_2\n\nLANGUAGE: groovy\nCODE:\n```\ndependencies {\n  implementation \"app.cash.sqldelight:primitive-adapters:{{ versions.sqldelight }}\"\n}\n```\n\n----------------------------------------\n\nTITLE: Adding SQLDelight SQLite Driver Dependency in Groovy Gradle\nDESCRIPTION: Shows how to add the SQLDelight SQLite driver dependency to a Groovy-based Gradle project's build configuration.\nSOURCE: https://github.com/sqldelight/sqldelight/blob/master/docs/jvm_sqlite/index.md#2025-04-23_snippet_1\n\nLANGUAGE: groovy\nCODE:\n```\ndependencies {\n  implementation \"app.cash.sqldelight:sqlite-driver:{{ versions.sqldelight }}\"\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring SQLDelight for JVM-only Projects with Groovy DSL\nDESCRIPTION: Configuration block for SQLDelight in a JVM-only (non-Android, non-multiplatform) project using Groovy DSL. This specifies the required drivers and database configuration.\nSOURCE: https://github.com/sqldelight/sqldelight/blob/master/docs/jvm_h2/gradle.md#2025-04-23_snippet_7\n\nLANGUAGE: groovy\nCODE:\n```\ndependencies {\n  implementation \"app.cash.sqldelight:sqlite-driver:2.0.1\"\n  // or\n  implementation \"app.cash.sqldelight:jdbc-driver:2.0.1\"\n}\n\nsqldelight {\n  databases {\n    Database {\n      packageName = \"com.example.db\"\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Creating PagingSource from SQLDelight Query\nDESCRIPTION: Example of creating a PagingSource using the SQLDelight query extension function. This connects the SQLDelight query to the Paging library for automatic pagination handling.\nSOURCE: https://github.com/sqldelight/sqldelight/blob/master/docs/js_sqlite/androidx_paging.md#2025-04-23_snippet_2\n\nLANGUAGE: kotlin\nCODE:\n```\nval pagingSourceFactory = { database.teamQueries.teamQueries().asPagingSourceFactory(queryKey = \"teamQueries\") }\n```\n\n----------------------------------------\n\nTITLE: Enabling Foreign Key Constraints for Android SQLite Driver in SQLDelight\nDESCRIPTION: This code snippet demonstrates how to enable foreign key constraints for the Android SQLite driver in SQLDelight. It uses the driver's onOpen callback to set foreign key constraints to true when the database is opened.\nSOURCE: https://github.com/sqldelight/sqldelight/blob/master/docs/android_sqlite/foreign_keys.md#2025-04-23_snippet_0\n\nLANGUAGE: kotlin\nCODE:\n```\nAndroidSqliteDriver(\n  schema = Database.Schema,\n  callback = object : AndroidSqliteDriver.Callback(Database.Schema) {\n    override fun onOpen(db: SupportSQLiteDatabase) {\n      db.setForeignKeyConstraintsEnabled(true)\n    }\n  }\n)\n```\n\n----------------------------------------\n\nTITLE: Initializing WebWorkerDriver with SQL.js Worker\nDESCRIPTION: Creates a WebWorkerDriver instance using the SQL.js worker script. Uses the import.meta.url approach to reference the worker script from the npm package.\nSOURCE: https://github.com/sqldelight/sqldelight/blob/master/docs/js_sqlite/sqljs_worker.md#2025-04-23_snippet_4\n\nLANGUAGE: kotlin\nCODE:\n```\nval driver = WebWorkerDriver(\n  Worker(\n    js(\"\"\"new URL(\"@cashapp/sqldelight-sqljs-worker/sqljs.worker.js\", import.meta.url)\"\"\")\n  )\n)\n```\n\n----------------------------------------\n\nTITLE: HTTP GET Request Format for SQLDelight Migrations API\nDESCRIPTION: Example of an HTTP GET request used by SQLDelight to retrieve migrations information from a server, showing the URL structure and parameters.\nSOURCE: https://github.com/sqldelight/sqldelight/blob/master/docs/jvm_mysql/migrations.md#2025-04-23_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nGET /migrations/latest?db=myDatabase\n```\n\n----------------------------------------\n\nTITLE: Adding SQLDelight Android Driver Dependency in Groovy\nDESCRIPTION: Adds the SQLDelight Android driver as a dependency in a Groovy-based build.gradle file. This dependency is required to use the generated database in Android applications.\nSOURCE: https://github.com/sqldelight/sqldelight/blob/master/docs/android_sqlite/index.md#2025-04-23_snippet_1\n\nLANGUAGE: groovy\nCODE:\n```\ndependencies {\n  implementation \"app.cash.sqldelight:android-driver:{{ versions.sqldelight }}\"\n}\n```\n\n----------------------------------------\n\nTITLE: Source Directory Configuration in Kotlin\nDESCRIPTION: Shows how to configure source directories using the new srcDirs property in Kotlin.\nSOURCE: https://github.com/sqldelight/sqldelight/blob/master/docs/upgrading-2.0.md#2025-04-23_snippet_4\n\nLANGUAGE: groovy\nCODE:\n```\nsqldelight {\n  databases {\n    create(\"MyDatabase\") {\n      packageName.set(\"com.example\")\n      srcDirs.setFrom(\"src/main/sqldelight\")\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring SQLDelight for JVM-only Projects with Kotlin DSL\nDESCRIPTION: Configuration block for SQLDelight in a JVM-only (non-Android, non-multiplatform) project using Kotlin DSL. This includes required dependencies and database setup.\nSOURCE: https://github.com/sqldelight/sqldelight/blob/master/docs/jvm_h2/gradle.md#2025-04-23_snippet_6\n\nLANGUAGE: kotlin\nCODE:\n```\ndependencies {\n  implementation(\"app.cash.sqldelight:sqlite-driver:2.0.1\")\n  // or\n  implementation(\"app.cash.sqldelight:jdbc-driver:2.0.1\")\n}\n\nsqldelight {\n  databases {\n    create(\"Database\") {\n      packageName.set(\"com.example.db\")\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Handling Nested Transactions in SQLDelight (Kotlin)\nDESCRIPTION: Illustrates how SQLDelight handles nested transactions. The outer transaction is the only one that actually creates a new transaction, while inner transactions are treated as savepoints.\nSOURCE: https://github.com/sqldelight/sqldelight/blob/master/docs/jvm_sqlite/transactions.md#2025-04-23_snippet_1\n\nLANGUAGE: kotlin\nCODE:\n```\ndatabase.transaction {\n  // New transaction\n  database.transaction {\n    // Creates a savepoint\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring SQLDelight Database in Gradle (Groovy)\nDESCRIPTION: This code snippet shows how to configure a SQLDelight database in a Gradle build file using Groovy syntax. It demonstrates setting up the database name, package name, schema locations, and dialect.\nSOURCE: https://github.com/sqldelight/sqldelight/blob/master/docs/js_sqlite/gradle.md#2025-04-23_snippet_2\n\nLANGUAGE: groovy\nCODE:\n```\nsqldelight {\n  MyDatabase {\n    packageName = \"com.example.db\"\n    sourceFolders = [\"sqldelight\"]\n    schemaOutputDirectory = file(\"build/dbs\")\n    verifyMigrations = true\n    deriveSchemaFromMigrations = true // This is the default\n    dialect = \"sqlite:3.18\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Migration SQL File in SQLDelight\nDESCRIPTION: Demonstrates how to create a migration SQL file in SQLDelight, naming it with the version number and placing it in the appropriate directory.\nSOURCE: https://github.com/sqldelight/sqldelight/blob/master/docs/multiplatform_sqlite/migrations.md#2025-04-23_snippet_0\n\nLANGUAGE: sql\nCODE:\n```\nCREATE TABLE new_table(\n  value TEXT\n);\n```\n\n----------------------------------------\n\nTITLE: JSON Response Format for SQLDelight Latest Version API\nDESCRIPTION: Example of the JSON response format from a migrations server when querying for the latest database version, containing version number and schema information.\nSOURCE: https://github.com/sqldelight/sqldelight/blob/master/docs/jvm_mysql/migrations.md#2025-04-23_snippet_3\n\nLANGUAGE: yaml\nCODE:\n```\n{\n  \"version\": 2,\n  \"hash\": \"abc123\",\n  \"migration\": \"CREATE TABLE my_table (id INTEGER NOT NULL PRIMARY KEY);\"\n}\n```\n\n----------------------------------------\n\nTITLE: End Transaction Message Format\nDESCRIPTION: Example of an incoming message format for ending a SQL transaction. Contains an ID and action type 'end_transaction'.\nSOURCE: https://github.com/sqldelight/sqldelight/blob/master/docs/js_sqlite/custom_worker.md#2025-04-23_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"id\": 3,\n  \"action\": \"end_transaction\"\n}\n```\n\n----------------------------------------\n\nTITLE: Executing SQL Query Message Format\nDESCRIPTION: Example of an incoming message format for executing SQL queries. Contains an ID, action type 'exec', SQL statement, and parameters array.\nSOURCE: https://github.com/sqldelight/sqldelight/blob/master/docs/js_sqlite/custom_worker.md#2025-04-23_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"id\": 5,\n  \"action\": \"exec\",\n  \"sql\": \"SELECT column_a, column_b FROM some_table WHERE column_a = ?;\",\n  \"params\": [\"value\"]\n}\n```\n\n----------------------------------------\n\nTITLE: Adding SQLDelight Runtime Dependencies (Kotlin)\nDESCRIPTION: This snippet shows how to add SQLDelight runtime dependencies for various platforms including Android, JVM, iOS, and JavaScript using Kotlin DSL syntax in a Gradle build file.\nSOURCE: https://github.com/sqldelight/sqldelight/blob/master/docs/js_sqlite/gradle.md#2025-04-23_snippet_5\n\nLANGUAGE: kotlin\nCODE:\n```\ndependencies {\n  implementation(\"app.cash.sqldelight:android-driver:$version\")\n  implementation(\"app.cash.sqldelight:sqlite-driver:$version\")\n  implementation(\"app.cash.sqldelight:native-driver:$version\")\n  implementation(\"app.cash.sqldelight:sqljs-driver:$version\")\n  implementation(\"app.cash.sqldelight:primitive-adapters:$version\")\n  implementation(\"app.cash.sqldelight:coroutines-extensions:$version\")\n  implementation(\"app.cash.sqldelight:rxjava3-extensions:$version\")\n}\n```\n\n----------------------------------------\n\nTITLE: Adding Schema Dependencies in Kotlin DSL\nDESCRIPTION: Configuration to specify schema dependencies on other Gradle projects. This allows referencing schemas defined in other modules.\nSOURCE: https://github.com/sqldelight/sqldelight/blob/master/docs/common/gradle.md#2025-04-23_snippet_12\n\nLANGUAGE: kotlin\nCODE:\n```\ndependency(project(\":other-project\"))\n```\n\n----------------------------------------\n\nTITLE: Configuring SQLDelight Database in Gradle (Kotlin)\nDESCRIPTION: This snippet illustrates how to configure a SQLDelight database in a Gradle build file using Kotlin DSL syntax. It covers setting the database name, package name, schema locations, and dialect.\nSOURCE: https://github.com/sqldelight/sqldelight/blob/master/docs/js_sqlite/gradle.md#2025-04-23_snippet_3\n\nLANGUAGE: kotlin\nCODE:\n```\nsqldelight {\n  databases {\n    create(\"MyDatabase\") {\n      packageName.set(\"com.example.db\")\n      sourceFolders.set(listOf(\"sqldelight\"))\n      schemaOutputDirectory.set(file(\"build/dbs\"))\n      verifyMigrations.set(true)\n      deriveSchemaFromMigrations.set(true) // This is the default\n      dialect(\"sqlite:3.18\")\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Up Migration Database in build.gradle with Source Files\nDESCRIPTION: Gradle configuration for a database with migration source files specified, pointing to SQL migration scripts for different versions.\nSOURCE: https://github.com/sqldelight/sqldelight/blob/master/docs/js_sqlite/migrations.md#2025-04-23_snippet_4\n\nLANGUAGE: kotlin\nCODE:\n```\nsqldelight {\n  MyDatabase {\n    packageName = \"com.example\"\n    version = 3\n    schemaOutputDirectory = file(\"src/main/sqldelight/databases\")\n    migrationOutputDirectory = file(\"src/main/sqldelight/migrations\")\n    sourceFolders = [\"sqldelight\"]\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Adding JDBC Driver Dependency in Gradle (Groovy DSL)\nDESCRIPTION: Adds the SQLDelight JDBC driver dependency to the project using Groovy syntax. This dependency enables database connectivity at runtime.\nSOURCE: https://github.com/sqldelight/sqldelight/blob/master/docs/common/index_server.md#2025-04-23_snippet_4\n\nLANGUAGE: groovy\nCODE:\n```\ndependencies {\n  implementation \"app.cash.sqldelight:jdbc-driver:{{ versions.sqldelight }}\"\n}\n```\n\n----------------------------------------\n\nTITLE: Updating Import Statements for SQLDelight 2.0\nDESCRIPTION: Shows how to update import statements to use the new package names.\nSOURCE: https://github.com/sqldelight/sqldelight/blob/master/docs/upgrading-2.0.md#2025-04-23_snippet_1\n\nLANGUAGE: diff\nCODE:\n```\n-import com.squareup.sqldelight.db.SqlDriver\n+import app.cash.sqldelight.db.SqlDriver\n```\n\n----------------------------------------\n\nTITLE: Including AndroidX Paging Multiplatform Configuration\nDESCRIPTION: Markdown include directive that references a common configuration file for AndroidX paging multiplatform support\nSOURCE: https://github.com/sqldelight/sqldelight/blob/master/docs/multiplatform_sqlite/androidx_paging.md#2025-04-23_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n{% include 'common/androidx_paging_multiplatform.md' %}\n```\n\n----------------------------------------\n\nTITLE: Adding SQLDelight SQLite Driver Dependency in Kotlin Gradle\nDESCRIPTION: Demonstrates how to add the SQLDelight SQLite driver dependency to a Kotlin-based Gradle project's build configuration.\nSOURCE: https://github.com/sqldelight/sqldelight/blob/master/docs/jvm_sqlite/index.md#2025-04-23_snippet_0\n\nLANGUAGE: groovy\nCODE:\n```\ndependencies {\n  implementation(\"app.cash.sqldelight:sqlite-driver:{{ versions.sqldelight }}\")\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Schema Output Directory in Groovy DSL\nDESCRIPTION: Configuration to specify where .db schema files should be stored. These files are used to verify that migrations yield a database with the latest schema.\nSOURCE: https://github.com/sqldelight/sqldelight/blob/master/docs/common/gradle.md#2025-04-23_snippet_11\n\nLANGUAGE: groovy\nCODE:\n```\nschemaOutputDirectory = file(\"src/main/sqldelight/databases\")\n```\n\n----------------------------------------\n\nTITLE: Initializing SQLDelight Native Driver\nDESCRIPTION: Creates an instance of the SQLite driver for Kotlin/Native platforms by providing the database schema and filename.\nSOURCE: https://github.com/sqldelight/sqldelight/blob/master/docs/native_sqlite/index.md#2025-04-23_snippet_2\n\nLANGUAGE: kotlin\nCODE:\n```\nval driver: SqlDriver = NativeSqliteDriver(Database.Schema, \"test.db\")\n```\n\n----------------------------------------\n\nTITLE: Configuring SQLDelight with Migrations Server URL in Gradle\nDESCRIPTION: Gradle configuration for SQLDelight that specifies a migrations server URL. This allows the project to fetch migrations from a remote server rather than local files.\nSOURCE: https://github.com/sqldelight/sqldelight/blob/master/docs/jvm_mysql/migrations.md#2025-04-23_snippet_0\n\nLANGUAGE: kotlin\nCODE:\n```\nsqldelight {\n  databases {\n    myDatabase {\n      packageName = \"com.example.db\"\n      migrationsServer = \"https://my-server.example.com/migrations\"\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: SQL Dialect Configuration in Kotlin\nDESCRIPTION: Demonstrates how to specify SQL dialect using Gradle dependencies in Kotlin.\nSOURCE: https://github.com/sqldelight/sqldelight/blob/master/docs/upgrading-2.0.md#2025-04-23_snippet_6\n\nLANGUAGE: groovy\nCODE:\n```\nsqldelight {\n  databases {\n    create(\"MyDatabase\") {\n      packageName.set(\"com.example\")\n      dialect(\"app.cash.sqldelight:mysql-dialect:{{ versions.sqldelight }}\")\n\n      // Version catalogs also work!\n      dialect(libs.sqldelight.dialects.mysql)\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Including IntelliJ Plugin Documentation Template\nDESCRIPTION: A Liquid template include statement that pulls in common IntelliJ plugin documentation content from an external markdown file.\nSOURCE: https://github.com/sqldelight/sqldelight/blob/master/docs/jvm_sqlite/intellij_plugin.md#2025-04-23_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n{% include 'common/intellij_plugin.md' %}\n```\n\n----------------------------------------\n\nTITLE: Adding SQLDelight Coroutines Dependencies in Gradle\nDESCRIPTION: The code shows how to add the SQLDelight coroutines extension dependency to a Gradle build file. This dependency provides coroutine support for SQLDelight in multiplatform projects.\nSOURCE: https://github.com/sqldelight/sqldelight/blob/master/docs/js_sqlite/coroutines.md#2025-04-23_snippet_0\n\nLANGUAGE: groovy\nCODE:\n```\ndependencies {\n  implementation \"app.cash.sqldelight:coroutines-extensions:2.0.0\"\n}\n```\n\n----------------------------------------\n\nTITLE: Adding Schema Dependencies in Groovy DSL\nDESCRIPTION: Configuration to specify schema dependencies on other Gradle projects. This allows referencing schemas defined in other modules.\nSOURCE: https://github.com/sqldelight/sqldelight/blob/master/docs/common/gradle.md#2025-04-23_snippet_13\n\nLANGUAGE: groovy\nCODE:\n```\ndependency project(\":other-project\")\n```\n\n----------------------------------------\n\nTITLE: Setting SQL Dialect in Kotlin DSL\nDESCRIPTION: Configuration to specify the SQL dialect to target. Dialects are selected using a Gradle dependency, allowing compatibility with different database systems.\nSOURCE: https://github.com/sqldelight/sqldelight/blob/master/docs/common/gradle.md#2025-04-23_snippet_14\n\nLANGUAGE: kotlin\nCODE:\n```\ndialect(\"app.cash.sqldelight:sqlite-3-24-dialect:{{ versions.sqldelight }}\")\n```\n\n----------------------------------------\n\nTITLE: Configuring SQLDelight Native Driver Dependencies in Kotlin DSL\nDESCRIPTION: Adds the SQLDelight native driver dependency to the native source set in a Kotlin Multiplatform project using Kotlin DSL syntax.\nSOURCE: https://github.com/sqldelight/sqldelight/blob/master/docs/native_sqlite/index.md#2025-04-23_snippet_0\n\nLANGUAGE: kotlin\nCODE:\n```\nkotlin {\n  // or iosMain, windowsMain, etc.\n  sourceSets.nativeMain.dependencies {\n    implementation(\"app.cash.sqldelight:native-driver:{{ versions.sqldelight }}\")\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: IntelliJ Plugin Widget Script Import\nDESCRIPTION: HTML script tag to import the JetBrains marketplace widget JavaScript file required for plugin installation functionality.\nSOURCE: https://github.com/sqldelight/sqldelight/blob/master/docs/common/intellij_plugin.md#2025-04-23_snippet_1\n\nLANGUAGE: html\nCODE:\n```\n<script src=\"https://plugins.jetbrains.com/assets/scripts/mp-widget.js\"></script>\n```\n\n----------------------------------------\n\nTITLE: Using Exact Text Tokens in BNF Grammar\nDESCRIPTION: Shows how to require exact text in a grammar rule, which is useful when dialects cannot add their own tokens.\nSOURCE: https://github.com/sqldelight/sqldelight/blob/master/CONTRIBUTING.md#2025-04-23_snippet_3\n\nLANGUAGE: BNF\nCODE:\n```\nmy_rule ::= \"SOME_TOKEN\"\n```\n\n----------------------------------------\n\nTITLE: Configuring SQLDelight with Authenticated Migrations Server in Gradle\nDESCRIPTION: Gradle configuration for SQLDelight that includes authentication headers for accessing a protected migrations server, allowing secure retrieval of database migrations.\nSOURCE: https://github.com/sqldelight/sqldelight/blob/master/docs/jvm_mysql/migrations.md#2025-04-23_snippet_1\n\nLANGUAGE: kotlin\nCODE:\n```\nsqldelight {\n  databases {\n    myDatabase {\n      packageName = \"com.example.db\"\n      migrationsServer = \"https://my-server.example.com/migrations\"\n      migrationsServerHeader {\n        \"Authorization\" to \"Basic dXNlcm5hbWU6cGFzc3dvcmQ=\"\n      }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining the Dependency Target Database in Kotlin Build Script\nDESCRIPTION: Shows how to configure the target database in project-b that will be used as a dependency by project-a using Kotlin DSL. The database must have the same name but a different package.\nSOURCE: https://github.com/sqldelight/sqldelight/blob/master/docs/common/gradle-dependencies.md#2025-04-23_snippet_2\n\nLANGUAGE: kotlin\nCODE:\n```\n// project-b/build.gradle.kts\n\nsqldelight {\n  databases {\n    // Same database name\n    create(\"MyDatabase\") {\n      package = \"com.example.projectb\"\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Enabling Migration Verification in Kotlin DSL\nDESCRIPTION: Configuration to enable verification of migration files during build. When true, the build will fail if there are any errors in migration files.\nSOURCE: https://github.com/sqldelight/sqldelight/blob/master/docs/common/gradle.md#2025-04-23_snippet_16\n\nLANGUAGE: kotlin\nCODE:\n```\nverifyMigrations.set(true)\n```\n\n----------------------------------------\n\nTITLE: Adding SQLDelight Coroutines Extensions in Kotlin DSL\nDESCRIPTION: Configuration for adding the SQLDelight coroutines-extensions dependency in a Kotlin build script to enable Flow support.\nSOURCE: https://github.com/sqldelight/sqldelight/blob/master/docs/common/coroutines-multiplatform.md#2025-04-23_snippet_0\n\nLANGUAGE: kotlin\nCODE:\n```\nkotlin {\n  sourceSets.commonMain.dependencies {\n    implementation(\"app.cash.sqldelight:coroutines-extensions:{{ versions.sqldelight }}\")\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Importing Tokens from ANSI SQL in BNF Grammar\nDESCRIPTION: Demonstrates how to import tokens from the core ANSI SQL grammar when creating a dialect-specific grammar file, using SQL DELETE syntax as an example.\nSOURCE: https://github.com/sqldelight/sqldelight/blob/master/CONTRIBUTING.md#2025-04-23_snippet_2\n\nLANGUAGE: BNF\nCODE:\n```\n{\n  parserImports = [\n    \"static com.alecstrong.sql.psi.core.psi.SqlTypes.DELETE\"\n    \"static com.alecstrong.sql.psi.core.psi.SqlTypes.FROM\"\n  ]\n}\noverrides ::= delete\n\ndelete ::= DELETE FROM {table_name} {\n  override = true\n}\n```\n\n----------------------------------------\n\nTITLE: Using Mixins for Custom Rule Behavior in BNF Grammar\nDESCRIPTION: Shows how to define a rule that uses a mixin class instead of extends, allowing for custom logic implementation in a dialect-specific rule.\nSOURCE: https://github.com/sqldelight/sqldelight/blob/master/CONTRIBUTING.md#2025-04-23_snippet_5\n\nLANGUAGE: BNF\nCODE:\n```\nmy_rule ::= interal_rule {external_rule} {\n  mixin = \"com.alecstrong.sql.psi.MyRuleMixin\"\n  implements = \"com.alecstrong.sql.psi.core.psi.SqlMyRule\"\n  overrides = true\n}\n```\n\n----------------------------------------\n\nTITLE: Adding Versioned Database Class in build.gradle\nDESCRIPTION: Gradle configuration that defines a Database class with versioning enabled, specifying the schema version as 2.\nSOURCE: https://github.com/sqldelight/sqldelight/blob/master/docs/js_sqlite/migrations.md#2025-04-23_snippet_2\n\nLANGUAGE: kotlin\nCODE:\n```\nsqldelight {\n  MyDatabase {\n    packageName = \"com.example\"\n    version = 2\n    schemaOutputDirectory = file(\"src/main/sqldelight/databases\")\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: SQL query with custom projection using a mapper function\nDESCRIPTION: This SQL query demonstrates using a custom mapper function to transform query results. The MAP TO TYPED keyword allows referencing a custom mapper function defined elsewhere in the code.\nSOURCE: https://github.com/sqldelight/sqldelight/blob/master/docs/android_sqlite/custom_projections.md#2025-04-23_snippet_4\n\nLANGUAGE: sql\nCODE:\n```\ncustomMapper:\nSELECT *\nFROM hockeyPlayer\nMAP TO TYPED(playerMapper);\n```\n\n----------------------------------------\n\nTITLE: Enabling Async Query Generation in Groovy DSL\nDESCRIPTION: Configuration to generate suspending query methods for use with asynchronous drivers. When true, SQLDelight will create Kotlin coroutine-compatible database query methods.\nSOURCE: https://github.com/sqldelight/sqldelight/blob/master/docs/common/gradle.md#2025-04-23_snippet_21\n\nLANGUAGE: groovy\nCODE:\n```\ngenerateAsync = true\n```\n\n----------------------------------------\n\nTITLE: Adding SQLDelight Coroutines Extensions Dependency in Kotlin DSL\nDESCRIPTION: Demonstrates how to add the SQLDelight coroutines extensions artifact as a dependency in a Kotlin build script, which enables Flow functionality for SQLDelight queries.\nSOURCE: https://github.com/sqldelight/sqldelight/blob/master/docs/common/coroutines.md#2025-04-23_snippet_0\n\nLANGUAGE: kotlin\nCODE:\n```\ndependencies {\n  implementation(\"app.cash.sqldelight:coroutines-extensions:{{ versions.sqldelight }}\")\n}\n```\n\n----------------------------------------\n\nTITLE: Adding SQLDelight AndroidX Paging Dependencies in Groovy DSL\nDESCRIPTION: This snippet shows how to add the SQLDelight AndroidX Paging 3 extension as a dependency in a Groovy build script. The dependency is added to the commonMain sourceSet for multiplatform projects.\nSOURCE: https://github.com/sqldelight/sqldelight/blob/master/docs/common/androidx_paging_multiplatform.md#2025-04-23_snippet_1\n\nLANGUAGE: groovy\nCODE:\n```\nkotlin {\n  sourceSets.commonMain.dependencies {\n    implementation \"app.cash.sqldelight:androidx-paging3-extensions:{{ versions.sqldelight }}\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Including AndroidX Paging Multiplatform\nDESCRIPTION: Template include statement to load paging implementation code\nSOURCE: https://github.com/sqldelight/sqldelight/blob/master/docs/native_sqlite/androidx_paging.md#2025-04-23_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n{% include 'common/androidx_paging_multiplatform.md' %}\n```\n\n----------------------------------------\n\nTITLE: Implementing SQLDelight Driver Factory for Android\nDESCRIPTION: This snippet shows the Android-specific implementation of the DriverFactory class, using AndroidSqliteDriver to create a SqlDriver instance.\nSOURCE: https://github.com/sqldelight/sqldelight/blob/master/docs/multiplatform_sqlite/index.md#2025-04-23_snippet_3\n\nLANGUAGE: kotlin\nCODE:\n```\nactual class DriverFactory(private val context: Context) {\n  actual fun createDriver(): SqlDriver {\n    return AndroidSqliteDriver(Database.Schema, context, \"test.db\")\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Adding SQLDelight Coroutines Extensions in Groovy DSL\nDESCRIPTION: Configuration for adding the SQLDelight coroutines-extensions dependency in a Groovy build script to enable Flow support.\nSOURCE: https://github.com/sqldelight/sqldelight/blob/master/docs/common/coroutines-multiplatform.md#2025-04-23_snippet_1\n\nLANGUAGE: groovy\nCODE:\n```\nkotlin {\n  sourceSets.commonMain.dependencies {\n    implementation \"app.cash.sqldelight:coroutines-extensions:{{ versions.sqldelight }}\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Adding SQLDelight AndroidX Paging 3 Dependency in Groovy\nDESCRIPTION: Shows how to add the SQLDelight AndroidX Paging 3 extension dependency to a Groovy-based Gradle build script. This extension enables integration between SQLDelight and Android's Paging 3 Library for efficient data pagination.\nSOURCE: https://github.com/sqldelight/sqldelight/blob/master/docs/common/androidx_paging.md#2025-04-23_snippet_1\n\nLANGUAGE: groovy\nCODE:\n```\ndependencies {\n  implementation \"app.cash.sqldelight:androidx-paging3-extensions:{{ versions.sqldelight }}\"\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring SQLDelight for Android in Gradle\nDESCRIPTION: Configuration block for SQLDelight in an Android project. Specifies database name, package name, and project dependencies including the Android driver.\nSOURCE: https://github.com/sqldelight/sqldelight/blob/master/docs/jvm_mysql/gradle.md#2025-04-23_snippet_1\n\nLANGUAGE: gradle\nCODE:\n```\nsqldelight {\n  MyDatabase { // This will be the name of the generated database class.\n    packageName = \"com.example\"\n  }\n}\n\ndependencies {\n  implementation \"app.cash.sqldelight:android-driver:{{site.latest_version}}\"\n}\n```\n\n----------------------------------------\n\nTITLE: Creating KeyedPagingSource from SQLDelight Query\nDESCRIPTION: Example of creating a KeyedPagingSource using the SQLDelight query extension function. This uses value-based pagination rather than offset-based pagination for better performance.\nSOURCE: https://github.com/sqldelight/sqldelight/blob/master/docs/js_sqlite/androidx_paging.md#2025-04-23_snippet_4\n\nLANGUAGE: kotlin\nCODE:\n```\nval pagingSourceFactory = {\n  database.teamQueries.pagedByValue().asKeyedPagingSourceFactory(\n    queryKey = \"pagedByValue\",\n    keyColumn = \"value\",\n    tableColumns = listOf(\"name\", \"value\", \"id\"),\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Adding SQLDelight Coroutines Extensions Dependency in Groovy DSL\nDESCRIPTION: Demonstrates how to add the SQLDelight coroutines extensions artifact as a dependency in a Groovy build script, which enables Flow functionality for SQLDelight queries.\nSOURCE: https://github.com/sqldelight/sqldelight/blob/master/docs/common/coroutines.md#2025-04-23_snippet_1\n\nLANGUAGE: groovy\nCODE:\n```\ndependencies {\n  implementation \"app.cash.sqldelight:coroutines-extensions:{{ versions.sqldelight }}\"\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Karma for SQL.js Tests\nDESCRIPTION: Sets up Karma configuration for testing with SQL.js. Ensures the WebAssembly binary is properly served, configures proxies to access it, and sets up temporary output directories for Webpack during tests.\nSOURCE: https://github.com/sqldelight/sqldelight/blob/master/docs/js_sqlite/sqljs_worker.md#2025-04-23_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nconst path = require(\"path\");\nconst os = require(\"os\");\nconst dist = path.resolve(\"../../node_modules/sql.js/dist/\")\nconst wasm = path.join(dist, \"sql-wasm.wasm\")\n\nconfig.files.push({\n    pattern: wasm,\n    served: true,\n    watched: false,\n    included: false,\n    nocache: false,\n});\n\nconfig.proxies[\"/sql-wasm.wasm\"] = path.join(\"/absolute/\", wasm)\n\n// Adapted from: https://github.com/ryanclark/karma-webpack/issues/498#issuecomment-790040818\nconst output = {\n  path: path.join(os.tmpdir(), '_karma_webpack_') + Math.floor(Math.random() * 1000000),\n}\nconfig.set({\n  webpack: {...config.webpack, output}\n});\nconfig.files.push({\n  pattern: `${output.path}/**/*`,\n  watched: false,\n  included: false,\n});\n```\n\n----------------------------------------\n\nTITLE: Defining Enum Type in SQLDelight\nDESCRIPTION: Demonstrates how to define an enum type 'status' in a SQLDelight query file. The enum is projected as a Kotlin enum class Status.\nSOURCE: https://github.com/sqldelight/sqldelight/blob/master/docs/jvm_h2/custom_projections.md#2025-04-23_snippet_3\n\nLANGUAGE: SQL\nCODE:\n```\nimport kotlin.Enum;\n\nCREATE TABLE data (\n  status TEXT AS Status\n);\n\nSELECT *\nFROM data;\n```\n\n----------------------------------------\n\nTITLE: Non-Query Results Response Format\nDESCRIPTION: Example of a response message format for non-query operations. Shows how to return the number of affected rows from an UPDATE, INSERT, or DELETE operation.\nSOURCE: https://github.com/sqldelight/sqldelight/blob/master/docs/js_sqlite/custom_worker.md#2025-04-23_snippet_5\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"id\": 10,\n  \"results\": [ [1] ]\n}\n```\n\n----------------------------------------\n\nTITLE: Adding SQLDelight RxJava3 Extensions Dependency in Kotlin\nDESCRIPTION: Adds the SQLDelight RxJava3 extensions library as a dependency in a Kotlin-based Gradle build file. This library provides extension functions to convert SQLDelight queries into RxJava Observable streams.\nSOURCE: https://github.com/sqldelight/sqldelight/blob/master/docs/common/rxjava.md#2025-04-23_snippet_0\n\nLANGUAGE: kotlin\nCODE:\n```\ndependencies {\n  implementation(\"app.cash.sqldelight:rxjava3-extensions:{{ versions.sqldelight }}\")\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring SQLDelight MySQL Dialect for Server Applications\nDESCRIPTION: Front matter configuration for SQLDelight that specifies the MySQL dialect and enables server mode. This configuration tells SQLDelight to use MySQL-specific SQL syntax and features when generating code.\nSOURCE: https://github.com/sqldelight/sqldelight/blob/master/docs/jvm_mysql/index.md#2025-04-23_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n---\ndialect: \"app.cash.sqldelight:mysql-dialect\"\nserver: true\n---\n```\n\n----------------------------------------\n\nTITLE: Adding SQL.js Worker Dependencies in Kotlin DSL\nDESCRIPTION: Configures the necessary npm dependencies for the SQL.js worker in a Kotlin/JS project using Kotlin DSL. Includes both the SQLDelight worker package and the SQL.js library with specific version requirements.\nSOURCE: https://github.com/sqldelight/sqldelight/blob/master/docs/js_sqlite/sqljs_worker.md#2025-04-23_snippet_0\n\nLANGUAGE: kotlin\nCODE:\n```\nkotlin {\n  sourceSets.jsMain.dependencies {\n    implementation(npm(\"@cashapp/sqldelight-sqljs-worker\", \"{{ versions.sqldelight }}\"))\n    implementation(npm(\"sql.js\", \"1.8.0\"))\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring SQLDelight for Multiplatform Projects with Groovy DSL\nDESCRIPTION: Configuration of SQLDelight for Kotlin Multiplatform projects using Groovy DSL. This includes required drivers for each platform target and database setup.\nSOURCE: https://github.com/sqldelight/sqldelight/blob/master/docs/jvm_h2/gradle.md#2025-04-23_snippet_5\n\nLANGUAGE: groovy\nCODE:\n```\nkotlin {\n  sourceSets {\n    commonMain {\n      dependencies {\n        implementation \"app.cash.sqldelight:runtime:2.0.1\"\n      }\n    }\n    androidMain {\n      dependencies {\n        implementation \"app.cash.sqldelight:android-driver:2.0.1\"\n      }\n    }\n    iosMain {\n      dependencies {\n        implementation \"app.cash.sqldelight:native-driver:2.0.1\"\n      }\n    }\n    // JS Driver:\n    jsMain {\n      dependencies {\n        implementation \"app.cash.sqldelight:web-worker-driver:2.0.1\"\n        // or\n        implementation \"app.cash.sqldelight:worker-driver:2.0.1\"\n      }\n    }\n    // Desktop Driver:\n    jvmMain {\n      dependencies {\n        implementation \"app.cash.sqldelight:sqlite-driver:2.0.1\"\n        // or\n        implementation \"app.cash.sqldelight:jdbc-driver:2.0.1\"\n      }\n    }\n    // Native (desktop) Driver:\n    nativeMain {\n      dependencies {\n        implementation \"app.cash.sqldelight:native-driver:2.0.1\"\n      }\n    }\n  }\n}\n\nsqldelight {\n  databases {\n    Database {\n      packageName = \"com.example.db\"\n      // By default, will be generated in commonMain\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Adding AndroidX Paging Multiplatform Dependency for SQLDelight\nDESCRIPTION: Shows how to add the SQLDelight AndroidX Paging Multiplatform dependency to a Gradle project. This dependency enables the use of paging functionality with SQLDelight queries.\nSOURCE: https://github.com/sqldelight/sqldelight/blob/master/docs/js_sqlite/androidx_paging.md#2025-04-23_snippet_0\n\nLANGUAGE: kotlin\nCODE:\n```\ndependencies {\n  implementation(\"app.cash.sqldelight:androidx-paging-multiplatform:2.0.1\")\n}\n```\n\n----------------------------------------\n\nTITLE: Including Common Coroutines Documentation\nDESCRIPTION: Template include directive to import shared coroutines documentation content from a common location\nSOURCE: https://github.com/sqldelight/sqldelight/blob/master/docs/android_sqlite/coroutines.md#2025-04-23_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n{% include 'common/coroutines.md' %}\n```\n\n----------------------------------------\n\nTITLE: Configuring SQLDelight Native Driver Dependencies in Groovy\nDESCRIPTION: Adds the SQLDelight native driver dependency to the native source set in a Kotlin Multiplatform project using Groovy syntax.\nSOURCE: https://github.com/sqldelight/sqldelight/blob/master/docs/native_sqlite/index.md#2025-04-23_snippet_1\n\nLANGUAGE: groovy\nCODE:\n```\nkotlin {\n  // or iosMain, windowsMain, etc.\n  sourceSets.nativeMain.dependencies {\n    implementation \"app.cash.sqldelight:native-driver:{{ versions.sqldelight }}\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Updating Gradle Dependencies for SQLDelight 2.0\nDESCRIPTION: Shows the required changes to gradle dependency declarations, replacing the old com.squareup.sqldelight packages with app.cash.sqldelight.\nSOURCE: https://github.com/sqldelight/sqldelight/blob/master/docs/upgrading-2.0.md#2025-04-23_snippet_0\n\nLANGUAGE: diff\nCODE:\n```\nplugins {\n-  id(\"com.squareup.sqldelight\") version \"{{ versions.sqldelight }}\"\n+  id(\"app.cash.sqldelight\") version \"{{ versions.sqldelight }}\"\n}\n\ndependencies {\n-  implementation(\"com.squareup.sqldelight:sqlite-driver:{{ versions.sqldelight }}\")\n+  implementation(\"app.cash.sqldelight:sqlite-driver:{{ versions.sqldelight }}\")\n}\n\nFor pure-Android SqlDelight 1.x projects, use android-driver and coroutine-extensions-jvm:\ndependencies {\n-  implementation(\"com.squareup.sqldelight:android-driver:{{ versions.sqldelight }}\")\n+  implementation(\"app.cash.sqldelight:android-driver:{{ versions.sqldelight }}\")\n-  implementation(\"com.squareup.sqldelight:coroutines-extensions:{{ versions.sqldelight }}\")\n+  implementation(\"app.cash.sqldelight:coroutines-extensions-jvm:{{ versions.sqldelight }}\")\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring SQLDelight Version in Multiplatform Projects with Version Catalog\nDESCRIPTION: Shows how to use a Gradle version catalog to manage SQLDelight dependency versions in a Kotlin Multiplatform project. This ensures consistent version management across all modules.\nSOURCE: https://github.com/sqldelight/sqldelight/blob/master/docs/jvm_mysql/gradle.md#2025-04-23_snippet_5\n\nLANGUAGE: gradle\nCODE:\n```\n// In version catalog (e.g., gradle/libs.versions.toml)\n[versions]\nsqldelight = \"{{site.latest_version}}\"\n\n[libraries]\nsqldelight-runtime = { module = \"app.cash.sqldelight:runtime\", version.ref = \"sqldelight\" }\nsqldelight-android = { module = \"app.cash.sqldelight:android-driver\", version.ref = \"sqldelight\" }\nsqldelight-native = { module = \"app.cash.sqldelight:native-driver\", version.ref = \"sqldelight\" }\nsqldelight-sqlite = { module = \"app.cash.sqldelight:sqlite-driver\", version.ref = \"sqldelight\" }\n\n[plugins]\nsqldelight = { id = \"app.cash.sqldelight\", version.ref = \"sqldelight\" }\n```\n\nLANGUAGE: gradle\nCODE:\n```\nplugins {\n  alias(libs.plugins.sqldelight)\n}\n```\n\nLANGUAGE: gradle\nCODE:\n```\nkotlin {\n  sourceSets {\n    commonMain {\n      dependencies {\n        implementation(libs.sqldelight.runtime)\n      }\n    }\n    androidMain {\n      dependencies {\n        implementation(libs.sqldelight.android)\n      }\n    }\n    iosMain {\n      dependencies {\n        implementation(libs.sqldelight.native)\n      }\n    }\n    jvmMain {\n      dependencies {\n        implementation(libs.sqldelight.sqlite)\n      }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring SQLDelight Database Dialect in Gradle\nDESCRIPTION: Example of how to specify a database dialect dependency for SQLDelight in a Gradle build file. This configuration sets up a MySQL dialect for a database named 'MyDatabase'.\nSOURCE: https://github.com/sqldelight/sqldelight/blob/master/CHANGELOG.md#2025-04-23_snippet_1\n\nLANGUAGE: Gradle\nCODE:\n```\nsqldelight {\n  MyDatabase {\n    packageName = \"com.example\"\n    dialect = \"app.cash.sqldelight:mysql-dialect:2.0.0-alpha01\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Migration Files Directory Structure Example\nDESCRIPTION: Shows the expected directory structure for SQLDelight migration files with numbered versions. SQLDelight applies these migrations in sequential order to create the schema.\nSOURCE: https://github.com/sqldelight/sqldelight/blob/master/docs/common/index_server.md#2025-04-23_snippet_2\n\nLANGUAGE: plaintext\nCODE:\n```\nsrc\n`-- main\n    `-- sqldelight\n        |-- v1__backend.sqm\n        `-- v2__backend.sqm\n```\n\n----------------------------------------\n\nTITLE: New Gradle Configuration Syntax in Kotlin\nDESCRIPTION: Demonstrates the new Gradle configuration syntax using managed properties and DomainObjectCollection for databases in Kotlin.\nSOURCE: https://github.com/sqldelight/sqldelight/blob/master/docs/upgrading-2.0.md#2025-04-23_snippet_2\n\nLANGUAGE: kotlin\nCODE:\n```\nsqldelight {\n  databases { // (1)!\n    create(\"Database\") {\n      packageName.set(\"com.example\") // (2)!\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Adding SQLDelight Android Driver Dependency in Kotlin\nDESCRIPTION: Adds the SQLDelight Android driver as a dependency in a Kotlin-based build.gradle file. This dependency is required to use the generated database in Android applications.\nSOURCE: https://github.com/sqldelight/sqldelight/blob/master/docs/android_sqlite/index.md#2025-04-23_snippet_0\n\nLANGUAGE: kotlin\nCODE:\n```\ndependencies {\n  implementation(\"app.cash.sqldelight:android-driver:{{ versions.sqldelight }}\")\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring SQLDelight Dialect in Gradle\nDESCRIPTION: Example of how to configure a SQLDelight dialect as a Gradle dependency in version 2.0.\nSOURCE: https://github.com/sqldelight/sqldelight/blob/master/CHANGELOG.md#2025-04-23_snippet_0\n\nLANGUAGE: Gradle\nCODE:\n```\nsqldelight {\n  MyDatabase {\n    dialect(\"app.cash.sqldelight:postgres-dialect:2.0.0-alpha03\")\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Adding SQLDelight RxJava3 Extensions Dependency in Groovy\nDESCRIPTION: Adds the SQLDelight RxJava3 extensions library as a dependency in a Groovy-based Gradle build file. This library provides extension functions to convert SQLDelight queries into RxJava Observable streams.\nSOURCE: https://github.com/sqldelight/sqldelight/blob/master/docs/common/rxjava.md#2025-04-23_snippet_1\n\nLANGUAGE: groovy\nCODE:\n```\ndependencies {\n  implementation \"app.cash.sqldelight:rxjava3-extensions:{{ versions.sqldelight }}\"\n}\n```\n\n----------------------------------------\n\nTITLE: New Gradle Configuration Syntax in Groovy\nDESCRIPTION: Shows the new Gradle configuration syntax using DomainObjectCollection for databases in Groovy.\nSOURCE: https://github.com/sqldelight/sqldelight/blob/master/docs/upgrading-2.0.md#2025-04-23_snippet_3\n\nLANGUAGE: kotlin\nCODE:\n```\nsqldelight {\n  databases { // (1)!\n    Database {\n      packageName = \"com.example\"\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring SQLDelight Web Worker Driver Dependencies in Groovy\nDESCRIPTION: Groovy DSL configuration for adding SQLDelight web worker driver and required webpack plugin dependencies to a Kotlin/JS project.\nSOURCE: https://github.com/sqldelight/sqldelight/blob/master/docs/js_sqlite/index.md#2025-04-23_snippet_1\n\nLANGUAGE: groovy\nCODE:\n```\nkotlin {\n  sourceSets.jsMain.dependencies {\n    implementation \"app.cash.sqldelight:web-worker-driver:{{ versions.sqldelight }}\"\n    implementation devNpm(\"copy-webpack-plugin\", \"9.1.0\")\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring SQLDelight Snapshots in Groovy\nDESCRIPTION: Gradle configuration for using SQLDelight snapshot versions in a Groovy project. Sets up plugin management and repository configurations.\nSOURCE: https://github.com/sqldelight/sqldelight/blob/master/docs/index.md#2025-04-23_snippet_2\n\nLANGUAGE: groovy\nCODE:\n```\n// settings.gradle\npluginManagement {\n    repositories {\n        gradlePluginPortal()\n        maven { url \"https://oss.sonatype.org/content/repositories/snapshots\" }\n    }\n}\n\n// build.gradle\nplugins {\n    id \"app.cash.sqldelight\" version \"SNAPSHOT-VERSION\"\n}\n\nrepositories {\n    maven { url \"https://oss.sonatype.org/content/repositories/snapshots\" }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring SQLDelight Plugin in Gradle (Kotlin)\nDESCRIPTION: Shows how to apply the SQLDelight plugin and add dependencies using Kotlin DSL in build.gradle.kts file\nSOURCE: https://github.com/sqldelight/sqldelight/blob/master/docs/native_sqlite/gradle.md#2025-04-23_snippet_1\n\nLANGUAGE: kotlin\nCODE:\n```\nplugins {\n  id(\"app.cash.sqldelight\") version \"2.0.0\"\n}\n```\n\n----------------------------------------\n\nTITLE: Adding SQLDelight Runtime Dependencies (Groovy)\nDESCRIPTION: This code snippet demonstrates how to add SQLDelight runtime dependencies for various platforms including Android, JVM, iOS, and JavaScript using Groovy syntax in a Gradle build file.\nSOURCE: https://github.com/sqldelight/sqldelight/blob/master/docs/js_sqlite/gradle.md#2025-04-23_snippet_4\n\nLANGUAGE: groovy\nCODE:\n```\ndependencies {\n  implementation \"app.cash.sqldelight:android-driver:$version\"\n  implementation \"app.cash.sqldelight:sqlite-driver:$version\"\n  implementation \"app.cash.sqldelight:native-driver:$version\"\n  implementation \"app.cash.sqldelight:sqljs-driver:$version\"\n  implementation \"app.cash.sqldelight:primitive-adapters:$version\"\n  implementation \"app.cash.sqldelight:coroutines-extensions:$version\"\n  implementation \"app.cash.sqldelight:rxjava3-extensions:$version\"\n}\n```\n\n----------------------------------------\n\nTITLE: Including SQLDelight Migrations Template\nDESCRIPTION: A Liquid template include directive that references a common migrations documentation file.\nSOURCE: https://github.com/sqldelight/sqldelight/blob/master/docs/native_sqlite/migrations.md#2025-04-23_snippet_0\n\nLANGUAGE: liquid\nCODE:\n```\n{% include 'common/migrations.md' %}\n```\n\n----------------------------------------\n\nTITLE: Rollback Transaction Message Format\nDESCRIPTION: Example of an incoming message format for rolling back a SQL transaction. Contains an ID and action type 'rollback_transaction'.\nSOURCE: https://github.com/sqldelight/sqldelight/blob/master/docs/js_sqlite/custom_worker.md#2025-04-23_snippet_3\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"id\": 8,\n  \"action\": \"rollback_transaction\"\n}\n```\n\n----------------------------------------\n\nTITLE: Applying SQLDelight Plugin in Gradle (Groovy)\nDESCRIPTION: This snippet shows how to apply the SQLDelight plugin in a Gradle build file using Groovy syntax. It demonstrates the plugin application for both the legacy and the new plugin syntax.\nSOURCE: https://github.com/sqldelight/sqldelight/blob/master/docs/js_sqlite/gradle.md#2025-04-23_snippet_0\n\nLANGUAGE: groovy\nCODE:\n```\nplugins {\n  id 'app.cash.sqldelight' version '$version'\n}\n\n// Legacy plugin application:\n// buildscript {\n//   dependencies {\n//     classpath 'app.cash.sqldelight:gradle-plugin:$version'\n//   }\n// }\n// apply plugin: 'app.cash.sqldelight'\n```\n\n----------------------------------------\n\nTITLE: Configuring SQLDelight Plugin with Groovy DSL\nDESCRIPTION: Setup for applying the SQLDelight Gradle plugin using the Groovy DSL in a build.gradle file. This provides an alternative syntax for projects using the traditional Groovy build scripts.\nSOURCE: https://github.com/sqldelight/sqldelight/blob/master/docs/jvm_h2/gradle.md#2025-04-23_snippet_1\n\nLANGUAGE: groovy\nCODE:\n```\nplugins {\n  id 'app.cash.sqldelight' version '2.0.1'\n}\n```\n\n----------------------------------------\n\nTITLE: Including Migrations Documentation Template\nDESCRIPTION: Liquid template syntax to include a common markdown file containing SQL migration documentation for server implementations\nSOURCE: https://github.com/sqldelight/sqldelight/blob/master/docs/jvm_h2/migrations.md#2025-04-23_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n{% include 'common/migrations_server.md' %}\n```\n\n----------------------------------------\n\nTITLE: Configuring SQLDelight Snapshots in Kotlin\nDESCRIPTION: Gradle configuration for using SQLDelight snapshot versions in a Kotlin project. Sets up plugin management and repository configurations.\nSOURCE: https://github.com/sqldelight/sqldelight/blob/master/docs/index.md#2025-04-23_snippet_1\n\nLANGUAGE: kotlin\nCODE:\n```\n// settings.gradle.kts\npluginManagement {\n    repositories {\n        gradlePluginPortal()\n        maven(url = \"https://oss.sonatype.org/content/repositories/snapshots\")\n    }\n}\n\n// build.gradle.kts\nplugins {\n    id(\"app.cash.sqldelight\") version \"SNAPSHOT-VERSION\"\n}\n\nrepositories {\n    maven(url = \"https://oss.sonatype.org/content/repositories/snapshots\")\n}\n```\n\n----------------------------------------\n\nTITLE: Adding SQL.js Worker Dependencies in Groovy DSL\nDESCRIPTION: Configures the necessary npm dependencies for the SQL.js worker in a Kotlin/JS project using Groovy DSL. Includes both the SQLDelight worker package and the SQL.js library with specific version requirements.\nSOURCE: https://github.com/sqldelight/sqldelight/blob/master/docs/js_sqlite/sqljs_worker.md#2025-04-23_snippet_1\n\nLANGUAGE: groovy\nCODE:\n```\nkotlin { \n  sourceSets.jsMain.dependencies {\n    implementation npm(\"@cashapp/sqldelight-sqljs-worker\", \"{{ versions.sqldelight }}\")\n    implementation npm(\"sql.js\", \"1.8.0\")\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Deriving Schema From Migrations in Kotlin DSL\nDESCRIPTION: Configuration to derive database schema from migration files. When true, the schema is generated from .sqm files as if each migration had been applied, rather than from .sq files.\nSOURCE: https://github.com/sqldelight/sqldelight/blob/master/docs/common/gradle.md#2025-04-23_snippet_22\n\nLANGUAGE: kotlin\nCODE:\n```\nderiveSchemaFromMigrations.set(true)\n```\n\n----------------------------------------\n\nTITLE: Installing MarketplaceWidget for IntelliJ Plugin\nDESCRIPTION: JavaScript code to set up the JetBrains marketplace widget for installing the SQLDelight plugin. Uses the MarketplaceWidget.setupMarketplaceWidget function with specific parameters.\nSOURCE: https://github.com/sqldelight/sqldelight/blob/master/docs/common/intellij_plugin.md#2025-04-23_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nMarketplaceWidget.setupMarketplaceWidget('install', 8191, \"#intellij-plugin-button\");\n```\n\n----------------------------------------\n\nTITLE: Including Custom Projections Documentation\nDESCRIPTION: A Liquid template include statement that references a markdown file containing custom projections documentation.\nSOURCE: https://github.com/sqldelight/sqldelight/blob/master/docs/js_sqlite/custom_projections.md#2025-04-23_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n{% include 'common/custom_projections.md' %}\n```\n\n----------------------------------------\n\nTITLE: Creating a Database Factory for iOS in Kotlin\nDESCRIPTION: This code snippet shows how to create a database factory for iOS using SQLDelight. It uses the NativeSqliteDriver to establish the database connection.\nSOURCE: https://github.com/sqldelight/sqldelight/blob/master/docs/native_sqlite/coroutines.md#2025-04-23_snippet_2\n\nLANGUAGE: kotlin\nCODE:\n```\nimport com.squareup.sqldelight.db.SqlDriver\nimport com.squareup.sqldelight.drivers.native.NativeSqliteDriver\n\nactual class DatabaseDriverFactory {\n    actual fun createDriver(): SqlDriver {\n        return NativeSqliteDriver(Database.Schema, \"test.db\")\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring NULL Equality Behavior in Kotlin DSL\nDESCRIPTION: Configuration to control how NULL values are handled in equality comparisons. When true, SQLDelight won't replace equality comparisons with nullable types using IS.\nSOURCE: https://github.com/sqldelight/sqldelight/blob/master/docs/common/gradle.md#2025-04-23_snippet_18\n\nLANGUAGE: kotlin\nCODE:\n```\ntreatNullAsUnknownForEquality.set(true)\n```\n\n----------------------------------------\n\nTITLE: Including IntelliJ Plugin Documentation Using Jekyll Include Template\nDESCRIPTION: This code snippet uses Jekyll's include directive to reference an external markdown file containing documentation about the SQLDelight IntelliJ plugin.\nSOURCE: https://github.com/sqldelight/sqldelight/blob/master/docs/jvm_mysql/intellij_plugin.md#2025-04-23_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n{% include 'common/intellij_plugin.md' %}\n```\n\n----------------------------------------\n\nTITLE: Including RxJava Documentation Template\nDESCRIPTION: Markdown include directive to embed RxJava integration documentation from a common template file\nSOURCE: https://github.com/sqldelight/sqldelight/blob/master/docs/jvm_sqlite/rxjava.md#2025-04-23_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n{% include 'common/rxjava.md' %}\n```\n\n----------------------------------------\n\nTITLE: Adding JDBC Driver Dependency in Gradle (Kotlin DSL)\nDESCRIPTION: Adds the SQLDelight JDBC driver dependency to the project for database connectivity. This dependency is required to create a SqlDriver for connecting to the database at runtime.\nSOURCE: https://github.com/sqldelight/sqldelight/blob/master/docs/common/index_server.md#2025-04-23_snippet_3\n\nLANGUAGE: kotlin\nCODE:\n```\ndependencies {\n  implementation(\"app.cash.sqldelight:jdbc-driver:{{ versions.sqldelight }}\")\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Schema Output Directory in Kotlin DSL\nDESCRIPTION: Configuration to specify where .db schema files should be stored. These files are used to verify that migrations yield a database with the latest schema.\nSOURCE: https://github.com/sqldelight/sqldelight/blob/master/docs/common/gradle.md#2025-04-23_snippet_10\n\nLANGUAGE: kotlin\nCODE:\n```\nschemaOutputDirectory.set(file(\"src/main/sqldelight/databases\"))\n```\n\n----------------------------------------\n\nTITLE: Begin Transaction Message Format\nDESCRIPTION: Example of an incoming message format for beginning a SQL transaction. Contains an ID and action type 'begin_transaction'.\nSOURCE: https://github.com/sqldelight/sqldelight/blob/master/docs/js_sqlite/custom_worker.md#2025-04-23_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"id\": 2,\n  \"action\": \"begin_transaction\"\n}\n```\n\n----------------------------------------\n\nTITLE: SQLDelight Row ID Error Message\nDESCRIPTION: Error message indicating that no column named 'rowid' was found at line 12, character 7 in Test.s file\nSOURCE: https://github.com/sqldelight/sqldelight/blob/master/dialects/sqlite-3-18/src/testFixtures/resources/fixtures_sqlite_3_18/rowid/failure.txt#2025-04-23_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\nTest.s line 12:7 - No column found with name rowid\n```\n\n----------------------------------------\n\nTITLE: JSON Response Format for SQLDelight Migration Script API\nDESCRIPTION: Example of the JSON response format from a migrations server when requesting a specific migration script between versions, containing the SQL migration statements.\nSOURCE: https://github.com/sqldelight/sqldelight/blob/master/docs/jvm_mysql/migrations.md#2025-04-23_snippet_5\n\nLANGUAGE: yaml\nCODE:\n```\n{\n  \"migration\": \"ALTER TABLE my_table ADD COLUMN name TEXT;\"\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Source Directories in Groovy DSL\nDESCRIPTION: Configuration to specify the collection of folders that SQLDelight will look in for SQL files (.sq and .sqm files). This replaces the default source directory locations.\nSOURCE: https://github.com/sqldelight/sqldelight/blob/master/docs/common/gradle.md#2025-04-23_snippet_7\n\nLANGUAGE: groovy\nCODE:\n```\nsrcDirs = ['src/main/sqldelight']\n```\n\n----------------------------------------\n\nTITLE: SQL Error: Mismatched DISTINCT ON and ORDER BY expressions\nDESCRIPTION: Error messages indicating that the expressions used in DISTINCT ON clauses do not match the initial expressions in the corresponding ORDER BY clauses in a SELECT statement. This is a requirement for PostgreSQL-style DISTINCT ON queries.\nSOURCE: https://github.com/sqldelight/sqldelight/blob/master/dialects/postgresql/src/testFixtures/resources/fixtures_postgresql/select-distinct-on/failure.txt#2025-04-23_snippet_0\n\nLANGUAGE: sql\nCODE:\n```\nTest.s line 43:9 - SELECT DISTINCT ON expressions must match initial ORDER BY expressions\nTest.s line 48:9 - SELECT DISTINCT ON expressions must match initial ORDER BY expressions\nTest.s line 53:15 - SELECT DISTINCT ON expressions must match initial ORDER BY expressions\n```\n\n----------------------------------------\n\nTITLE: Including SQLDelight Plugin Documentation Template\nDESCRIPTION: Template include directive for the common IntelliJ plugin documentation markdown file\nSOURCE: https://github.com/sqldelight/sqldelight/blob/master/docs/android_sqlite/intellij_plugin.md#2025-04-23_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n{% include 'common/intellij_plugin.md' %}\n```\n\n----------------------------------------\n\nTITLE: Source Directory Configuration in Groovy\nDESCRIPTION: Shows how to configure source directories using the new srcDirs property in Groovy.\nSOURCE: https://github.com/sqldelight/sqldelight/blob/master/docs/upgrading-2.0.md#2025-04-23_snippet_5\n\nLANGUAGE: groovy\nCODE:\n```\nsqldelight {\n  databases {\n    MyDatabase {\n      packageName = \"com.example\"\n      srcDirs = ['src/main/sqldelight']\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Package Name in Groovy DSL\nDESCRIPTION: Configuration to set the package name used for the generated database class. This determines the package structure in which the database class will be placed.\nSOURCE: https://github.com/sqldelight/sqldelight/blob/master/docs/common/gradle.md#2025-04-23_snippet_5\n\nLANGUAGE: groovy\nCODE:\n```\npackageName = \"com.example.db\"\n```\n\n----------------------------------------\n\nTITLE: Managing Transactions with Coroutines in SQLDelight (Kotlin)\nDESCRIPTION: Shows how to manage transactions when using coroutines in SQLDelight. It demonstrates using the transactionWithContext function to execute a transaction within a coroutine scope.\nSOURCE: https://github.com/sqldelight/sqldelight/blob/master/docs/jvm_sqlite/transactions.md#2025-04-23_snippet_2\n\nLANGUAGE: kotlin\nCODE:\n```\nsuspend fun doSomeOperations() = withContext(Dispatchers.IO) {\n  database.transactionWithContext(coroutineContext) {\n    // Perform database operations\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Grammar Rules in SQL-PSI\nDESCRIPTION: Demonstrates how to override ANSI SQL rules in a dialect-specific grammar file. The example shows how to define overrides, reference external rules, and set attributes on rules.\nSOURCE: https://github.com/sqldelight/sqldelight/blob/master/CONTRIBUTING.md#2025-04-23_snippet_0\n\nLANGUAGE: BNF\nCODE:\n```\noverrides ::= my_rule\n\nmy_rule ::= SOME_TOKEN {\n  override = true\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring HSQL Dialect in SQLDelight\nDESCRIPTION: YAML configuration block specifying the HSQL dialect for SQLDelight and enabling server mode. This is an experimental feature that may have incomplete dialect support.\nSOURCE: https://github.com/sqldelight/sqldelight/blob/master/docs/jvm_h2/index.md#2025-04-23_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\ndialect: \"app.cash.sqldelight:hsql-dialect\"\nserver: true\n```\n\n----------------------------------------\n\nTITLE: Running CocoaPods Installation for iOS Sample in SQLDelight Project\nDESCRIPTION: This command installs the required CocoaPods dependencies for the iOS sample project. It should be executed in the root directory of the iOS app before opening the project workspace.\nSOURCE: https://github.com/sqldelight/sqldelight/blob/master/sample/iosApp/README.md#2025-04-23_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\npod install\n```\n\n----------------------------------------\n\nTITLE: Referencing External Rules in BNF Grammar\nDESCRIPTION: Shows how to reference internal and external rules when overriding an ANSI SQL rule in a dialect-specific grammar.\nSOURCE: https://github.com/sqldelight/sqldelight/blob/master/CONTRIBUTING.md#2025-04-23_snippet_1\n\nLANGUAGE: BNF\nCODE:\n```\nmy_rule ::= internal_rule {external_rule} {\n  override = true\n}\ninternal_rule ::= SOME_TOKEN\n```\n\n----------------------------------------\n\nTITLE: Extending and Implementing SQL Types in BNF Grammar\nDESCRIPTION: Demonstrates how to make overriding rules generate code that conforms to the original rule types by implementing and extending the existing types.\nSOURCE: https://github.com/sqldelight/sqldelight/blob/master/CONTRIBUTING.md#2025-04-23_snippet_4\n\nLANGUAGE: BNF\nCODE:\n```\nmy_rule ::= internal_rule {external_rule} {\n  extends = \"com.alecstrong.sql.psi.core.psi.impl.SqlMyRuleImpl\"\n  implements = \"com.alecstrong.sql.psi.core.psi.SqlMyRule\"\n  overrides = true\n}\n```\n\n----------------------------------------\n\nTITLE: Including Coroutines Multiplatform Configuration Template\nDESCRIPTION: A markdown include directive that references a common template file for coroutines multiplatform configuration settings.\nSOURCE: https://github.com/sqldelight/sqldelight/blob/master/docs/multiplatform_sqlite/coroutines.md#2025-04-23_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n{% include 'common/coroutines-multiplatform.md' %}\n```\n\n----------------------------------------\n\nTITLE: Opening iOS Project in Xcode\nDESCRIPTION: Commands to navigate to the iOS app directory and open the Xcode project file.\nSOURCE: https://github.com/sqldelight/sqldelight/blob/master/sample/README.md#2025-04-23_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\ncd sample/iosApp\nopen iosApp.xcodeproj\n```\n\n----------------------------------------\n\nTITLE: Building SQLDelight Mobile Sample with Gradle\nDESCRIPTION: Command to build the mobile sample application using Gradle build system.\nSOURCE: https://github.com/sqldelight/sqldelight/blob/master/sample/README.md#2025-04-23_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\n./gradlew build\n```\n\n----------------------------------------\n\nTITLE: Running SQLDelight Web Sample App with Gradle\nDESCRIPTION: This command launches the web sample application using Gradle. It starts a local development server, making the sample accessible at http://localhost:8080.\nSOURCE: https://github.com/sqldelight/sqldelight/blob/master/sample-web/README.md#2025-04-23_snippet_0\n\nLANGUAGE: Shell\nCODE:\n```\n./gradlew :jsBrowserRun\n```\n\n----------------------------------------\n\nTITLE: Defining the Dependency Target Database in Groovy Build Script\nDESCRIPTION: Shows how to configure the target database in project-b that will be used as a dependency by project-a using Groovy syntax. The database must have the same name but a different package.\nSOURCE: https://github.com/sqldelight/sqldelight/blob/master/docs/common/gradle-dependencies.md#2025-04-23_snippet_3\n\nLANGUAGE: groovy\nCODE:\n```\n// project-b/build.gradle\n\nsqldelight {\n  databases {\n    // Same database name\n    MyDatabase {\n      package = \"com.example.projectb\"\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing a Mixin Class for SQL Rules in Kotlin\nDESCRIPTION: Shows how to implement a mixin class that provides custom validation logic for a SQL rule, including error annotation generation for invalid values.\nSOURCE: https://github.com/sqldelight/sqldelight/blob/master/CONTRIBUTING.md#2025-04-23_snippet_6\n\nLANGUAGE: Kotlin\nCODE:\n```\nclass MyRule(\n  node: ASTNode\n) : SqlCompositeElementImpl(node),\n    SqlMyRule {\n  fun annotate(annotationHolder: SqlAnnotationHolder) {\n    if (internal_rule.text == \"bad_text\") {\n      annotationHolder.createErrorAnnotation(\"Invalid text value\", internal_rule)\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: SQLDelight Compilation Error - Missing Table Reference\nDESCRIPTION: An error message from the SQLDelight compiler indicating that a SQL query references a table named 'unknown_table' which doesn't exist in the schema. The error occurred in a file named 'Sample.s' at line 19, column 5.\nSOURCE: https://github.com/sqldelight/sqldelight/blob/master/dialects/postgresql/src/testFixtures/resources/fixtures_postgresql/cte-invalid-tables/failure.txt#2025-04-23_snippet_0\n\nLANGUAGE: plain\nCODE:\n```\nSample.s line 19:5 - No table found with name unknown_table\n```\n\n----------------------------------------\n\nTITLE: SQL Dialect Configuration in Groovy\nDESCRIPTION: Shows how to specify SQL dialect using Gradle dependencies in Groovy.\nSOURCE: https://github.com/sqldelight/sqldelight/blob/master/docs/upgrading-2.0.md#2025-04-23_snippet_7\n\nLANGUAGE: groovy\nCODE:\n```\nsqldelight {\n  databases {\n    MyDatabase {\n      packageName = \"com.example\"\n      dialect \"app.cash.sqldelight:mysql-dialect:{{ versions.sqldelight }}\"\n\n      // Version catalogs also work!\n      dialect libs.sqldelight.dialects.mysql\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Basic SQLDelight Transaction\nDESCRIPTION: Shows how to create a basic transaction in SQLDelight using the transaction block. The transaction will commit automatically if no exceptions are thrown.\nSOURCE: https://github.com/sqldelight/sqldelight/blob/master/docs/jvm_mysql/transactions.md#2025-04-23_snippet_0\n\nLANGUAGE: kotlin\nCODE:\n```\nval database = Database(driver)\n\ndatabase.transaction {\n  database.userQueries.insert(\"user\", \"name\")\n}\n```\n\n----------------------------------------\n\nTITLE: Including SQLDelight IntelliJ Plugin Documentation in Markdown\nDESCRIPTION: This is a Liquid template include directive that imports content from the 'common/intellij_plugin.md' file into the current document, which helps maintain consistent documentation across multiple files.\nSOURCE: https://github.com/sqldelight/sqldelight/blob/master/docs/jvm_h2/intellij_plugin.md#2025-04-23_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n{% include 'common/intellij_plugin.md' %}\n```\n\n----------------------------------------\n\nTITLE: Including Grouping Statements Documentation\nDESCRIPTION: An include statement referencing a markdown file containing SQLite grouping statements documentation.\nSOURCE: https://github.com/sqldelight/sqldelight/blob/master/docs/android_sqlite/grouping_statements.md#2025-04-23_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n{% include 'common/grouping_statements.md' %}\n```\n\n----------------------------------------\n\nTITLE: Including Custom Column Types Documentation Template\nDESCRIPTION: Jekyll template include statement for custom column types documentation\nSOURCE: https://github.com/sqldelight/sqldelight/blob/master/docs/jvm_sqlite/types.md#2025-04-23_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n{% include 'common/custom_column_types.md' %}\n```"
  }
]