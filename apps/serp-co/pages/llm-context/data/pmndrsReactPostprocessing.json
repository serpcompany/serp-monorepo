[
  {
    "owner": "pmndrs",
    "repo": "react-postprocessing",
    "content": "TITLE: Implementing Post-Processing Effects in React Three Fiber\nDESCRIPTION: Example showing how to combine multiple post-processing effects including Depth of Field, Bloom, Noise, and Vignette within a React Three Fiber Canvas component. The code demonstrates the composition of effects using EffectComposer.\nSOURCE: https://github.com/pmndrs/react-postprocessing/blob/master/docs/introduction.mdx#2025-04-11_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\nimport React from 'react'\nimport { Bloom, DepthOfField, EffectComposer, Noise, Vignette } from '@react-three/postprocessing'\nimport { Canvas } from '@react-three/fiber'\n\nfunction App() {\n  return (\n    <Canvas>\n      {/* Your regular scene contents go here, like always ... */}\n      <EffectComposer>\n        <DepthOfField focusDistance={0} focalLength={0.02} bokehScale={2} height={480} />\n        <Bloom luminanceThreshold={0} luminanceSmoothing={0.9} height={300} />\n        <Noise opacity={0.02} />\n        <Vignette eskil={false} offset={0.1} darkness={1.1} />\n      </EffectComposer>\n    </Canvas>\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Postprocessing Effects in React Three Fiber\nDESCRIPTION: Example of how to use react-postprocessing to add multiple effects to a React Three Fiber scene. This snippet demonstrates the usage of EffectComposer and various effects like DepthOfField, Bloom, Noise, and Vignette.\nSOURCE: https://github.com/pmndrs/react-postprocessing/blob/master/README.md#2025-04-11_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\nimport React from 'react'\nimport { Bloom, DepthOfField, EffectComposer, Noise, Vignette } from '@react-three/postprocessing'\nimport { Canvas } from '@react-three/fiber'\n\nfunction App() {\n  return (\n    <Canvas>\n      {/* Your regular scene contents go here, like always ... */}\n      <EffectComposer>\n        <DepthOfField focusDistance={0} focalLength={0.02} bokehScale={2} height={480} />\n        <Bloom luminanceThreshold={0} luminanceSmoothing={0.9} height={300} />\n        <Noise opacity={0.02} />\n        <Vignette eskil={false} offset={0.1} darkness={1.1} />\n      </EffectComposer>\n    </Canvas>\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing EffectComposer Component in React with JSX\nDESCRIPTION: This snippet demonstrates the usage of the EffectComposer component in React. It wraps all post-processing effects and manages them. The component accepts various props to configure its behavior, including enabling/disabling, buffer settings, and rendering options.\nSOURCE: https://github.com/pmndrs/react-postprocessing/blob/master/docs/effect-composer.mdx#2025-04-11_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\n<EffectComposer\n  enabled?: boolean\n  depthBuffer?: boolean\n  enableNormalPass?: boolean\n  stencilBuffer?: boolean\n  autoClear?: boolean\n  multisampling?: number\n  frameBufferType?: TextureDataType\n  /** For effects that support DepthDownsamplingPass */\n  resolutionScale?: number\n  renderPriority?: number\n  camera?: THREE.Camera\n  scene?: THREE.Scene\n>\n{/* your effects go here */}\n</EffectComposer>\n```\n\n----------------------------------------\n\nTITLE: Implementing Bloom Effect with Configuration in React Three Fiber\nDESCRIPTION: Shows how to import and implement the Bloom effect component with various configuration options including intensity, kernel size, luminance threshold, and resolution settings.\nSOURCE: https://github.com/pmndrs/react-postprocessing/blob/master/docs/effects/bloom.mdx#2025-04-11_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport { Bloom } from '@react-three/postprocessing'\nimport { BlurPass, Resizer, KernelSize, Resolution } from 'postprocessing'\n\nreturn (\n  <Bloom\n    intensity={1.0} // The bloom intensity.\n    blurPass={undefined} // A blur pass.\n    kernelSize={KernelSize.LARGE} // blur kernel size\n    luminanceThreshold={0.9} // luminance threshold. Raise this value to mask out darker elements in the scene.\n    luminanceSmoothing={0.025} // smoothness of the luminance threshold. Range is [0, 1]\n    mipmapBlur={false} // Enables or disables mipmap blur.\n    resolutionX={Resolution.AUTO_SIZE} // The horizontal resolution.\n    resolutionY={Resolution.AUTO_SIZE} // The vertical resolution.\n  />\n)\n```\n\n----------------------------------------\n\nTITLE: Implementing ChromaticAberration Effect in React Three Fiber\nDESCRIPTION: This code demonstrates how to use the ChromaticAberration component from @react-three/postprocessing. It shows setting up the effect with a normal blend mode and a specific color offset value.\nSOURCE: https://github.com/pmndrs/react-postprocessing/blob/master/docs/effects/chromatic-aberration.mdx#2025-04-11_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport { ChromaticAberration } from '@react-three/postprocessing'\nimport { BlendFunction } from 'postprocessing'\n\nreturn (\n  <ChromaticAberration\n    blendFunction={BlendFunction.NORMAL} // blend mode\n    offset={[0.02, 0.002]} // color offset\n  />\n)\n```\n\n----------------------------------------\n\nTITLE: Implementing Glitch Effect in React Three Fiber\nDESCRIPTION: Example showing how to import and implement the Glitch effect component with various configuration options including delay, duration, strength, and mode settings. The component allows for customization of glitch parameters and can be toggled on/off.\nSOURCE: https://github.com/pmndrs/react-postprocessing/blob/master/docs/effects/glitch.mdx#2025-04-11_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport { Glitch } from '@react-three/postprocessing'\nimport { GlitchMode } from 'postprocessing'\n\nreturn (\n  <Glitch\n    delay={[1.5, 3.5]} // min and max glitch delay\n    duration={[0.6, 1.0]} // min and max glitch duration\n    strength={[0.3, 1.0]} // min and max glitch strength\n    mode={GlitchMode.SPORADIC} // glitch mode\n    active // turn on/off the effect (switches between \"mode\" prop and GlitchMode.DISABLED)\n    ratio={0.85} // Threshold for strong glitches, 0 - no weak glitches, 1 - no strong glitches.\n  />\n)\n```\n\n----------------------------------------\n\nTITLE: Implementing DepthOfField Effect in React Three Fiber\nDESCRIPTION: Example showing how to add a depth of field post-processing effect to a React Three Fiber scene. The effect allows configuration of focus distance, focal length, and bokeh scale to create realistic depth blur effects.\nSOURCE: https://github.com/pmndrs/react-postprocessing/blob/master/docs/effects/depth-of-field.mdx#2025-04-11_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport { DepthOfField } from '@react-three/postprocessing'\n\nreturn (\n  <DepthOfField\n    focusDistance={0} // where to focus\n    focalLength={0.02} // focal length\n    bokehScale={2} // bokeh size\n  />\n)\n```\n\n----------------------------------------\n\nTITLE: Implementing SelectiveBloom Effect in React Three Fiber\nDESCRIPTION: This code demonstrates how to use the SelectiveBloom component from react-postprocessing to apply bloom effects to selected objects. It shows required parameters like lights and selection, along with optional configuration properties such as intensity, kernel size, and luminance settings.\nSOURCE: https://github.com/pmndrs/react-postprocessing/blob/master/docs/effects/selective-bloom.mdx#2025-04-11_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport { SelectiveBloom } from '@react-three/postprocessing'\nimport { BlurPass, Resizer, KernelSize } from 'postprocessing'\n\nreturn (\n  <SelectiveBloom\n    lights={[lightRef1, lightRef2]} // ⚠️ REQUIRED! all relevant lights\n    selection={[meshRef1, meshRef2]} // selection of objects that will have bloom effect\n    selectionLayer={10} // selection layer\n    intensity={1.0} // The bloom intensity.\n    blurPass={undefined} // A blur pass.\n    width={Resizer.AUTO_SIZE} // render width\n    height={Resizer.AUTO_SIZE} // render height\n    kernelSize={KernelSize.LARGE} // blur kernel size\n    luminanceThreshold={0.9} // luminance threshold. Raise this value to mask out darker elements in the scene.\n    luminanceSmoothing={0.025} // smoothness of the luminance threshold. Range is [0, 1]\n  />\n)\n```\n\n----------------------------------------\n\nTITLE: Implementing SSAO Effect in React Three Fiber\nDESCRIPTION: Example implementation of Screen Space Ambient Occlusion effect with configurable parameters including blend mode, sampling, distance thresholds, and luminance influence. The effect supports depth-aware upsampling and should typically be rendered at a lower resolution for optimal performance.\nSOURCE: https://github.com/pmndrs/react-postprocessing/blob/master/docs/effects/ssao.mdx#2025-04-11_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport { SSAO } from '@react-three/postprocessing'\nimport { BlendFunction } from 'postprocessing'\n\nreturn (\n  <SSAO\n    blendFunction={BlendFunction.MULTIPLY} // blend mode\n    samples={30} // amount of samples per pixel (shouldn't be a multiple of the ring count)\n    rings={4} // amount of rings in the occlusion sampling pattern\n    distanceThreshold={1.0} // global distance threshold at which the occlusion effect starts to fade out. min: 0, max: 1\n    distanceFalloff={0.0} // distance falloff. min: 0, max: 1\n    rangeThreshold={0.5} // local occlusion range threshold at which the occlusion starts to fade out. min: 0, max: 1\n    rangeFalloff={0.1} // occlusion range falloff. min: 0, max: 1\n    luminanceInfluence={0.9} // how much the luminance of the scene influences the ambient occlusion\n    radius={20} // occlusion sampling radius\n    scale={0.5} // scale of the ambient occlusion\n    bias={0.5} // occlusion bias\n  />\n)\n```\n\n----------------------------------------\n\nTITLE: Implementing GodRays Effect in React Three Fiber\nDESCRIPTION: This code snippet demonstrates how to use the GodRays component from @react-three/postprocessing. It shows the component with all available props and their typical values. The effect requires a mesh as an origin point for the rays, referenced by the 'sun' prop.\nSOURCE: https://github.com/pmndrs/react-postprocessing/blob/master/docs/effects/god-rays.mdx#2025-04-11_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport { GodRays } from '@react-three/postprocessing'\n\nreturn (\n  <GodRays\n    sun={sunRef}\n    blendFunction={BlendFunction.Screen} // The blend function of this effect.\n    samples={60} // The number of samples per pixel.\n    density={0.96} // The density of the light rays.\n    decay={0.9} // An illumination decay factor.\n    weight={0.4} // A light ray weight factor.\n    exposure={0.6} // A constant attenuation coefficient.\n    clampMax={1} // An upper bound for the saturation of the overall effect.\n    width={Resizer.AUTO_SIZE} // Render width.\n    height={Resizer.AUTO_SIZE} // Render height.\n    kernelSize={KernelSize.SMALL} // The blur kernel size. Has no effect if blur is disabled.\n    blur={true} // Whether the god rays should be blurred to reduce artifacts.\n  />\n)\n```\n\n----------------------------------------\n\nTITLE: Implementing Outline Effect in React Three Fiber\nDESCRIPTION: Example implementation of the Outline component for creating edge outlines around 3D objects. The component allows customization of outline appearance including colors, strength, blur effects, and X-ray visibility through various props.\nSOURCE: https://github.com/pmndrs/react-postprocessing/blob/master/docs/effects/outline.mdx#2025-04-11_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport { Outline } from '@react-three/postprocessing'\nimport { BlendFunction, Resizer, KernelSize } from 'postprocessing'\n\nreturn (\n  <Outline\n    selection={[meshRef1, meshRef2]} // selection of objects that will be outlined\n    selectionLayer={10} // selection layer\n    blendFunction={BlendFunction.SCREEN} // set this to BlendFunction.ALPHA for dark outlines\n    patternTexture={null} // a pattern texture\n    edgeStrength={2.5} // the edge strength\n    pulseSpeed={0.0} // a pulse speed. A value of zero disables the pulse effect\n    visibleEdgeColor={0xffffff} // the color of visible edges\n    hiddenEdgeColor={0x22090a} // the color of hidden edges\n    width={Resizer.AUTO_SIZE} // render width\n    height={Resizer.AUTO_SIZE} // render height\n    kernelSize={KernelSize.LARGE} // blur kernel size\n    blur={false} // whether the outline should be blurred\n    xRay={true} // indicates whether X-Ray outlines are enabled\n  />\n)\n```\n\n----------------------------------------\n\nTITLE: Using ToneMapping Component in React Three Fiber\nDESCRIPTION: Example of how to import and use the ToneMapping component from @react-three/postprocessing library. The snippet shows all available configuration props including blend mode, adaptive luminance settings, resolution, and various luminance parameters.\nSOURCE: https://github.com/pmndrs/react-postprocessing/blob/master/docs/effects/tone-mapping.mdx#2025-04-11_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport { ToneMapping } from '@react-three/postprocessing'\nimport { BlendFunction } from 'postprocessing'\n\nreturn (\n  <ToneMapping\n    blendFunction={BlendFunction.NORMAL} // blend mode\n    adaptive={true} // toggle adaptive luminance map usage\n    resolution={256} // texture resolution of the luminance map\n    middleGrey={0.6} // middle grey factor\n    maxLuminance={16.0} // maximum luminance\n    averageLuminance={1.0} // average luminance\n    adaptationRate={1.0} // luminance adaptation rate\n  />\n)\n```\n\n----------------------------------------\n\nTITLE: Basic Implementation of Autofocus Component\nDESCRIPTION: Example showing the basic implementation of the Autofocus component within an EffectComposer in a React application.\nSOURCE: https://github.com/pmndrs/react-postprocessing/blob/master/docs/effects/autofocus.mdx#2025-04-11_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\n<EffectComposer>\n  <Autofocus />\n</EffectComposer>\n```\n\n----------------------------------------\n\nTITLE: Configuring Materials for Selective Bloom in React Three Fiber\nDESCRIPTION: Demonstrates how to configure materials to work with the Bloom effect selectively. Shows examples of materials that will and won't glow based on their configuration, particularly focusing on the toneMapped property and color intensity.\nSOURCE: https://github.com/pmndrs/react-postprocessing/blob/master/docs/effects/bloom.mdx#2025-04-11_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\n<Bloom mipmapBlur luminanceThreshold={1} />\n\n// ❌ will not glow, same as RGB [1,0,0]\n<meshStandardMaterial color=\"red\"/>\n\n// ✅ will glow, same as RGB [2,0,0]\n<meshStandardMaterial emissive=\"red\" emissiveIntensity={2} toneMapped={false} />\n\n// ❌ will not glow, same as RGB [1,0,0]\n<meshBasicMaterial color=\"red\" />\n\n// ❌ will not glow, same as RGB [1,0,0], tone-mapping will clamp colors between 0 and 1\n<meshBasicMaterial color={[2,0,0]} />\n\n// ✅ will glow, same as RGB [2,0,0]\n<meshBasicMaterial color={[2,0,0]} toneMapped={false} />\n```\n\n----------------------------------------\n\nTITLE: Creating Custom Effect in React Postprocessing\nDESCRIPTION: This snippet shows how to create a custom effect by extending the Effect class from postprocessing. It includes the implementation of the effect itself (MyCustomEffectImpl) and a React component wrapper (MyCustomEffect).\nSOURCE: https://github.com/pmndrs/react-postprocessing/blob/master/docs/effects/custom-effects.mdx#2025-04-11_snippet_1\n\nLANGUAGE: js\nCODE:\n```\nimport React, { forwardRef, useMemo } from 'react'\nimport { Uniform } from 'three'\nimport { Effect } from 'postprocessing'\n\nconst fragmentShader = `some_shader_code`\n\nlet _uParam\n\n// Effect implementation\nclass MyCustomEffectImpl extends Effect {\n  constructor({ param = 0.1 } = {}) {\n    super('MyCustomEffect', fragmentShader, {\n      uniforms: new Map([['param', new Uniform(param)]]),\n    })\n\n    _uParam = param\n  }\n\n  update(renderer, inputBuffer, deltaTime) {\n    this.uniforms.get('param').value = _uParam\n  }\n}\n\n// Effect component\nexport const MyCustomEffect = forwardRef(({ param }, ref) => {\n  const effect = useMemo(() => new MyCustomEffectImpl(param), [param])\n  return <primitive ref={ref} object={effect} dispose={null} />\n})\n```\n\n----------------------------------------\n\nTITLE: Implementing SMAA with React Three Fiber postprocessing\nDESCRIPTION: This snippet demonstrates how to implement Subpixel Morphological Antialiasing (SMAA) in a React Three Fiber application using the postprocessing library. It disables the default multisampling by setting it to 0 and uses SMAA as an alternative. The effect is wrapped in a Suspense component as it loads asynchronously.\nSOURCE: https://github.com/pmndrs/react-postprocessing/blob/master/docs/effects/smaa.mdx#2025-04-11_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport React, { Suspense } from 'react'\nimport { EffectComposer, SMAA } from '@react-three/postprocessing'\n\nreturn (\n  <Suspense fallback={null}>\n    <EffectComposer multisampling={0}>\n      <SMAA />\n    </EffectComposer>\n  </Suspense>\n)\n```\n\n----------------------------------------\n\nTITLE: Implementing Vignette Effect in React Three Postprocessing\nDESCRIPTION: This code snippet demonstrates how to use the Vignette component from @react-three/postprocessing. It shows the import statements and the component usage with various props to control the vignette effect.\nSOURCE: https://github.com/pmndrs/react-postprocessing/blob/master/docs/effects/vignette.mdx#2025-04-11_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport { Vignette } from '@react-three/postprocessing'\nimport { BlendFunction } from 'postprocessing'\n\nreturn (\n  <Vignette\n    offset={0.5} // vignette offset\n    darkness={0.5} // vignette darkness\n    eskil={false} // Eskil's vignette technique\n    blendFunction={BlendFunction.NORMAL} // blend mode\n  />\n)\n```\n\n----------------------------------------\n\nTITLE: Implementing LensFlare Effect in React Three Fiber\nDESCRIPTION: Basic implementation of the LensFlare component from @react-three/postprocessing library. This adds a lens flare optical aberration effect to your 3D scene, simulating light dispersion through camera lens edges.\nSOURCE: https://github.com/pmndrs/react-postprocessing/blob/master/docs/effects/lensflare.mdx#2025-04-11_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport { LensFlare } from '@react-three/postprocessing'\n\nreturn <LensFlare />\n```\n\n----------------------------------------\n\nTITLE: Using BrightnessContrast Component in React Three Fiber\nDESCRIPTION: This snippet demonstrates how to import and use the BrightnessContrast effect in a React Three Fiber application. The component accepts brightness and contrast props to control the visual appearance of the scene, with both properties ranging from -1 to 1.\nSOURCE: https://github.com/pmndrs/react-postprocessing/blob/master/docs/effects/brightness-contrast.mdx#2025-04-11_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport { BrightnessContrast } from '@react-three/postprocessing'\n\nreturn (\n  <BrightnessContrast\n    brightness={0} // brightness. min: -1, max: 1\n    contrast={0} // contrast: min -1, max: 1\n  />\n)\n```\n\n----------------------------------------\n\nTITLE: Implementing Pixelation Effect in React Three Fiber\nDESCRIPTION: Demonstrates how to add a pixelation post-processing effect to a React Three Fiber scene. The effect allows controlling the pixel granularity to create retro-style graphics. Note that this effect cannot be merged with convolution effects.\nSOURCE: https://github.com/pmndrs/react-postprocessing/blob/master/docs/effects/pixelation.mdx#2025-04-11_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport { Pixelation } from '@react-three/postprocessing'\n\nreturn (\n  <Pixelation\n    granularity={5} // pixel granularity\n  />\n)\n```\n\n----------------------------------------\n\nTITLE: Implementing HueSaturation Effect in React Three Postprocessing\nDESCRIPTION: Demonstrates how to use the HueSaturation component for adjusting hue and saturation in a post-processing pipeline. The effect allows control over color hue and saturation values using radians, with configurable blend mode functionality.\nSOURCE: https://github.com/pmndrs/react-postprocessing/blob/master/docs/effects/hue-saturation.mdx#2025-04-11_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport { HueSaturation } from '@react-three/postprocessing'\nimport { BlendFunction } from 'postprocessing'\n\nreturn (\n  <HueSaturation\n    blendFunction={BlendFunction.NORMAL} // blend mode\n    hue={0} // hue in radians\n    saturation={0} // saturation in radians\n  />\n)\n```\n\n----------------------------------------\n\nTITLE: Implementing Noise Effect in React Three Fiber using @react-three/postprocessing\nDESCRIPTION: This snippet demonstrates how to use the Noise component from @react-three/postprocessing to add a noise effect to a React Three Fiber scene. It shows how to import the component and configure its properties such as premultiply and blend function.\nSOURCE: https://github.com/pmndrs/react-postprocessing/blob/master/docs/effects/noise.mdx#2025-04-11_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport { Noise } from '@react-three/postprocessing'\nimport { BlendFunction } from 'postprocessing'\n\nreturn (\n  <Noise\n    premultiply // enables or disables noise premultiplication\n    blendFunction={BlendFunction.ADD} // blend mode\n  />\n)\n```\n\n----------------------------------------\n\nTITLE: Implementing Sepia Post-Processing Effect in React Three Fiber\nDESCRIPTION: Example of how to use the Sepia component from @react-three/postprocessing to apply a sepia tone effect to a scene. The component accepts intensity and blendFunction props to control the strength and blending mode of the effect.\nSOURCE: https://github.com/pmndrs/react-postprocessing/blob/master/docs/effects/sepia.mdx#2025-04-11_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport { Sepia } from '@react-three/postprocessing'\n\nreturn (\n  <Sepia\n    intensity={1.0} // sepia intensity\n    blendFunction={BlendFunction.NORMAL} // blend mode\n  />\n)\n```\n\n----------------------------------------\n\nTITLE: Implementing Grid Effect with React Three Postprocessing\nDESCRIPTION: Example of implementing a Grid post-processing effect using the @react-three/postprocessing package. The component allows customization of blend mode, scale, line width, and dimensions of the grid pattern overlay.\nSOURCE: https://github.com/pmndrs/react-postprocessing/blob/master/docs/effects/grid.mdx#2025-04-11_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport { Grid } from '@react-three/postprocessing'\nimport { BlendFunction } from 'postprocessing'\n\nreturn (\n  <Grid\n    blendFunction={BlendFunction.OVERLAY} // blend mode\n    scale={1.0} // grid pattern scale\n    lineWidth={0.0} // grid pattern line width\n    size={{ width, height }} // overrides the default pass width and height\n  />\n)\n```\n\n----------------------------------------\n\nTITLE: Implementing Dot Screen Effect with React Postprocessing\nDESCRIPTION: This snippet demonstrates how to use the DotScreen component from the @react-three/postprocessing library. It shows how to configure the blend mode, angle of the dot pattern, and scale of the effect.\nSOURCE: https://github.com/pmndrs/react-postprocessing/blob/master/docs/effects/dot-screen.mdx#2025-04-11_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport { DotScreen } from '@react-three/postprocessing'\nimport { BlendFunction } from 'postprocessing'\n\nreturn (\n  <DotScreen\n    blendFunction={BlendFunction.NORMAL} // blend mode\n    angle={Math.PI * 0.5} // angle of the dot pattern\n    scale={1.0} // scale of the dot pattern\n  />\n)\n```\n\n----------------------------------------\n\nTITLE: Implementing ColorAverage Effect in React Three Fiber\nDESCRIPTION: This example shows how to import and use the ColorAverage effect in a React Three Fiber application. The component accepts a blendFunction prop to determine how the effect blends with the scene.\nSOURCE: https://github.com/pmndrs/react-postprocessing/blob/master/docs/effects/color-average.mdx#2025-04-11_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport { ColorAverage } from '@react-three/postprocessing'\nimport { BlendFunction } from 'postprocessing'\n\nreturn (\n  <ColorAverage\n    blendFunction={BlendFunction.NORMAL} // blend mode\n  />\n)\n```\n\n----------------------------------------\n\nTITLE: Implementing Scanline Effect in React Three Postprocessing\nDESCRIPTION: This code snippet demonstrates how to use the Scanline component from @react-three/postprocessing. It shows how to set the blend function and density of the scanline effect. The BlendFunction is imported from the 'postprocessing' library to specify the blend mode.\nSOURCE: https://github.com/pmndrs/react-postprocessing/blob/master/docs/effects/scanline.mdx#2025-04-11_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport { Scanline } from '@react-three/postprocessing'\nimport { BlendFunction } from 'postprocessing'\n\nreturn (\n  <Scanline\n    blendFunction={BlendFunction.OVERLAY} // blend mode\n    density={1.25} // scanline density\n  />\n)\n```\n\n----------------------------------------\n\nTITLE: Implementing Ramp Effect with React Postprocessing\nDESCRIPTION: Example of importing and using the Ramp component to create color gradients in a React Three Fiber scene. This snippet demonstrates setting up a linear ramp with custom start and end points, colors, and interpolation parameters.\nSOURCE: https://github.com/pmndrs/react-postprocessing/blob/master/docs/effects/ramp.mdx#2025-04-11_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport { Ramp, RampType } from '@react-three/postprocessing'\n\nreturn (\n  <Ramp\n    rampType={RampType.Linear}\n    rampStart={[0.5, 0.5]}\n    rampEnd={[1.0, 1.0]}\n    startColor={[0, 0, 0, 1]}\n    endColor={[1, 1, 1, 1]}\n    rampBias={0.5}\n    rampGain={0.5}\n    rampMask={false}\n    rampInvert={false}\n  />\n)\n```\n\n----------------------------------------\n\nTITLE: Implementing Pixelation Effect in React Postprocessing\nDESCRIPTION: This snippet demonstrates how to create a custom Pixelation effect component using the PixelationEffect from postprocessing. It uses React's forwardRef and useMemo hooks to optimize performance.\nSOURCE: https://github.com/pmndrs/react-postprocessing/blob/master/docs/effects/custom-effects.mdx#2025-04-11_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport React, { forwardRef, useMemo } from 'react'\nimport { PixelationEffect } from 'postprocessing'\n\nexport const Pixelation = forwardRef(({ granularity = 5 }, ref) => {\n  const effect = useMemo(() => new PixelationEffect(granularity), [granularity])\n  return <primitive ref={ref} object={effect} dispose={null} />\n})\n```\n\n----------------------------------------\n\nTITLE: Manual Control of Autofocus Target Animation\nDESCRIPTION: Example demonstrating how to manually control the DOF target animation using the ref API in conjunction with the 'manual' prop.\nSOURCE: https://github.com/pmndrs/react-postprocessing/blob/master/docs/effects/autofocus.mdx#2025-04-11_snippet_4\n\nLANGUAGE: tsx\nCODE:\n```\nuseFrame((_, delta) => {\n  const api = autofocusRef.current\n  api.update(delta, false) // update hitpoint only\n  easing.damp3(api.dofRef.curent.target, api.hitpoint, 0.5, delta) // custom easing\n})\n```\n\n----------------------------------------\n\nTITLE: Implementing Autofocus Component with Ref\nDESCRIPTION: Example showing how to use the Autofocus component with a ref to access its API for more control.\nSOURCE: https://github.com/pmndrs/react-postprocessing/blob/master/docs/effects/autofocus.mdx#2025-04-11_snippet_3\n\nLANGUAGE: tsx\nCODE:\n```\n<Autofocus ref={autofocusRef} />\n```\n\n----------------------------------------\n\nTITLE: Basic Selection with Outline Effect\nDESCRIPTION: Example showing how to use Selection and Select components with an Outline post-processing effect. Demonstrates wrapping a mesh in a selection structure.\nSOURCE: https://github.com/pmndrs/react-postprocessing/blob/master/docs/selection.mdx#2025-04-11_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\n<Selection>\n  <EffectComposer autoClear={false}>\n    <Outline blur edgeStrength={100} />\n  </EffectComposer>\n  <Select enabled>\n    <mesh />\n  </Select>\n</Selection>\n```\n\n----------------------------------------\n\nTITLE: Nested Selection Groups\nDESCRIPTION: Example demonstrating nested Select components with different enabled states, showing how selection hierarchy works with multiple mesh objects.\nSOURCE: https://github.com/pmndrs/react-postprocessing/blob/master/docs/selection.mdx#2025-04-11_snippet_2\n\nLANGUAGE: jsx\nCODE:\n```\n<Select enabled>\n  <Select enabled>\n    <mesh />\n    <mesh />\n  </Select>\n  <Select>\n    <mesh />\n  </Select>\n</Select>\n```\n\n----------------------------------------\n\nTITLE: Defining Autofocus Component Props in React Post-Processing\nDESCRIPTION: Type definition for the Autofocus component props, extending DepthOfField with options for target coordinates, mouse tracking, debugging, manual control, and transition smoothness.\nSOURCE: https://github.com/pmndrs/react-postprocessing/blob/master/docs/effects/autofocus.mdx#2025-04-11_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nexport type AutofocusProps = typeof DepthOfField & {\n  target?: [number, number, number] // undefined\n  mouse?: boolean // false\n  debug?: number // undefined\n  manual?: boolean // false\n  smoothTime?: number // .25\n}\n```\n\n----------------------------------------\n\nTITLE: Autofocus Component Ref API Type Definition\nDESCRIPTION: Type definition for the Autofocus component's ref API, which provides access to the depth of field reference, hit point, and update method.\nSOURCE: https://github.com/pmndrs/react-postprocessing/blob/master/docs/effects/autofocus.mdx#2025-04-11_snippet_2\n\nLANGUAGE: tsx\nCODE:\n```\ntype AutofocusApi = {\n  dofRef: RefObject<DepthOfFieldEffect>\n  hitpoint: THREE.Vector3\n  update: (delta: number, updateTarget: boolean) => void\n}\n```\n\n----------------------------------------\n\nTITLE: Selection and Select Component Types\nDESCRIPTION: TypeScript/JSX type definitions for Selection and Select components showing their props structure including children and enabled flag.\nSOURCE: https://github.com/pmndrs/react-postprocessing/blob/master/docs/selection.mdx#2025-04-11_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\n<Selection\n  children: JSX.Element | JSX.Element[]\n  enabled?: boolean\n>\n\n<Select\n  children: JSX.Element | JSX.Element[]\n  enabled?: boolean\n>\n```\n\n----------------------------------------\n\nTITLE: Installing React Postprocessing Library\nDESCRIPTION: Command to install the react-postprocessing library using npm. This is a prerequisite for using the library in your project.\nSOURCE: https://github.com/pmndrs/react-postprocessing/blob/master/README.md#2025-04-11_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm install @react-three/postprocessing\n```\n\n----------------------------------------\n\nTITLE: Installing React Postprocessing Package\nDESCRIPTION: Command to install the @react-three/postprocessing package via npm.\nSOURCE: https://github.com/pmndrs/react-postprocessing/blob/master/docs/introduction.mdx#2025-04-11_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm install @react-three/postprocessing\n```\n\n----------------------------------------\n\nTITLE: Installing Dependencies for react-postprocessing\nDESCRIPTION: Command to install project dependencies using Yarn package manager.\nSOURCE: https://github.com/pmndrs/react-postprocessing/blob/master/CONTRIBUTING.md#2025-04-11_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nyarn install\n```\n\n----------------------------------------\n\nTITLE: Creating a Branch for Pull Request in Git\nDESCRIPTION: Git command to create a new branch for a pull request, following the project's naming convention.\nSOURCE: https://github.com/pmndrs/react-postprocessing/blob/master/CONTRIBUTING.md#2025-04-11_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ngit checkout -b pr-type/issue-number-your-branch-name\n```"
  }
]