[
  {
    "owner": "spiral",
    "repo": "docs",
    "content": "TITLE: Basic CurrentDate Controller Implementation - Spiral PHP\nDESCRIPTION: Implementation of a simple controller that returns the current date and time\nSOURCE: https://github.com/spiral/docs/blob/3.14/docs/en/start/http-basics.md#2025-04-20_snippet_1\n\nLANGUAGE: php\nCODE:\n```\nnamespace App\\Endpoint\\Web;\n\nfinal class CurrentDateController \n{\n    public function show(): string\n    {\n        return \\date('Y-m-d H:i:s');\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Creating PSR-15 Middleware in Spiral\nDESCRIPTION: Example of implementing the PSR-15 MiddlewareInterface to create custom middleware that adds a header to the response.\nSOURCE: https://github.com/spiral/docs/blob/3.14/docs/en/http/middleware.md#2025-04-20_snippet_0\n\nLANGUAGE: php\nCODE:\n```\nnamespace App\\Endpoint\\Web\\Middleware;\n\nuse Psr\\Http\\Server\\MiddlewareInterface;\n\nclass MyMiddleware implements MiddlewareInterface\n{\n    public function process(\n        ServerRequestInterface $request, \n        RequestHandlerInterface $handler\n    ): ResponseInterface {\n        return $handler->handle($request)->withAddedHeader('My-Header', 'my-value');\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing UserController with RESTful Methods in PHP\nDESCRIPTION: Sample controller implementation showing load, store and delete methods for handling different HTTP verbs.\nSOURCE: https://github.com/spiral/docs/blob/3.14/docs/en/http/routing.md#2025-04-20_snippet_50\n\nLANGUAGE: php\nCODE:\n```\nnamespace App\\Endpoint\\Web;\n\nclass UserController\n{\n    public function load($id): string\n    {\n        return \"get {$id}\";\n    }\n\n    public function store($id): string\n    {\n        return \"post {$id}\";\n    }\n\n    public function delete($id): string\n    {\n        return \"delete {$id}\";\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Sending a Notification via Queue in PHP\nDESCRIPTION: This snippet shows how to send a notification asynchronously using a queue system. Queued notifications will be sent via the 'queueConnection' specified in the notification configuration.\nSOURCE: https://github.com/spiral/docs/blob/3.14/docs/en/advanced/notifications.md#2025-04-20_snippet_10\n\nLANGUAGE: php\nCODE:\n```\n$this->notifier->sendQueued(\n    new UserBannedNotification(subject: 'Your profile banned for activity that violates rules'),\n    $user\n);\n```\n\n----------------------------------------\n\nTITLE: Defining Controller Classes for Routing in PHP\nDESCRIPTION: Demonstrates the structure of controller classes that can be used as targets for routes in Spiral Framework.\nSOURCE: https://github.com/spiral/docs/blob/3.14/docs/en/http/routing.md#2025-04-20_snippet_41\n\nLANGUAGE: php\nCODE:\n```\nnamespace App\\Controller;\n\nclass HomeController\n{\n    public function index(): string\n    {\n        return 'index';\n    }\n\n    public function other(): string\n    {\n        return 'other';\n    }\n\n    public function user(int $id): string\n    {\n        return \"hello {$id}\";\n    }\n}\n```\n\nLANGUAGE: php\nCODE:\n```\nnamespace App\\Controller;\n\nclass DemoController\n{\n    public function test(): string\n    {\n        return 'demo test';\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Error Handler Middleware\nDESCRIPTION: Example of implementing middleware to handle exceptions and render them in appropriate format based on request headers.\nSOURCE: https://github.com/spiral/docs/blob/3.14/docs/en/basics/errors.md#2025-04-20_snippet_7\n\nLANGUAGE: php\nCODE:\n```\nnamespace App\\Endpoint\\Web\\Middleware;\n\nuse Psr\\Http\\Server\\MiddlewareInterface;\nuse Psr\\Http\\Message\\ResponseInterface as Response;\nuse Psr\\Http\\Message\\ServerRequestInterface as Request;\nuse Psr\\Http\\Server\\RequestHandlerInterface as Handler;\nuse Psr\\Http\\Message\\ResponseFactoryInterface;\nuse Spiral\\Exceptions\\ExceptionRendererInterface;\nuse Spiral\\Http\\Exception\\ClientException;\nuse Spiral\\Router\\Exception\\RouterException;\n\nclass ErrorHandlerMiddleware implements MiddlewareInterface\n{\n    public function __construct(\n        private readonly ExceptionRendererInterface $renderer,\n        private readonly ResponseFactoryInterface $responseFactory,\n    ) {\n    }\n\n    public function process(Request $request, Handler $handler): Response\n    {\n        try {\n            return $handler->handle($request);\n        } catch (ClientException|RouterException $e) {\n            $code = $e instanceof ClientException ? $e->getCode() : 404;\n        } catch (\\Throwable $e) {\n            $code = 500;\n        }\n        \n        $response = $this->responseFactory->createResponse($code);\n        $response->getBody()->write(\n            (string) $this->renderer->render(\n                exception: $e,\n                format: $request->getHeaderLine('Accept') ?? 'application/json'\n            )\n        );\n\n        return $response;\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Domain Core with Custom Interceptors in PHP\nDESCRIPTION: Example of registering HTTP interceptors in an AppBootloader class that extends DomainBootloader. This shows how to configure the order of execution for interceptors like exception handling and JSON response formatting.\nSOURCE: https://github.com/spiral/docs/blob/3.14/docs/en/http/interceptors.md#2025-04-20_snippet_0\n\nLANGUAGE: php\nCODE:\n```\nnamespace App\\Application\\Bootloader;\n\nuse App\\Interceptor\\CustomInterceptor;\nuse Spiral\\Bootloader\\DomainBootloader;\nuse Spiral\\Core\\CoreInterface;\n\nclass AppBootloader extends DomainBootloader\n{\n    protected const SINGLETONS = [\n        CoreInterface::class => [self::class, 'domainCore']\n    ];\n\n    protected const INTERCEPTORS = [\n        HandleExceptionsInterceptor::class,\n        JsonPayloadResponseInterceptor::class,\n    ];\n}\n```\n\n----------------------------------------\n\nTITLE: Rendering Views in Spiral PHP Controller (ViewsInterface)\nDESCRIPTION: Demonstrates how to inject ViewsInterface and use it to render a view in a Spiral PHP controller. Shows basic rendering and passing data to the view.\nSOURCE: https://github.com/spiral/docs/blob/3.14/docs/en/views/basics.md#2025-04-20_snippet_0\n\nLANGUAGE: php\nCODE:\n```\nnamespace App\\Endpoint\\Web;\n\nuse Spiral\\Views\\ViewsInterface;\n\nclass HomeController\n{\n    public function __construct(\n      private readonly ViewsInterface $views\n    ) {\n    }\n    \n    public function index(): string\n    {\n        return $this->views->render('home');\n    }\n}\n```\n\nLANGUAGE: php\nCODE:\n```\npublic function index(): string\n{\n    return $this->views->render('home', [\n        'key' => 'value'\n    ]);\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Rule to Check Post Author in Spiral Framework\nDESCRIPTION: This snippet implements a custom rule in Spiral Framework that checks if the current actor is the author of a post. It uses the context to compare the post's user with the current actor.\nSOURCE: https://github.com/spiral/docs/blob/3.14/docs/en/security/rbac.md#2025-04-20_snippet_12\n\nLANGUAGE: php\nCODE:\n```\nclass SampleRule implements RuleInterface\n{\n    public function allows(ActorInterface $actor, string $permission, array $context): bool\n    {\n        return $context['post']->user === $actor;\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Docker Compose Configuration for Spiral Application\nDESCRIPTION: This Docker Compose configuration example shows how to set up a Spiral application service, including port mapping and environment variables.\nSOURCE: https://github.com/spiral/docs/blob/3.14/docs/en/start/deployment.md#2025-04-20_snippet_10\n\nLANGUAGE: yaml\nCODE:\n```\nversion: '3'\nservices:\n  app:\n    image: my-application:1.0\n    ports:\n      - \"8080:8080\"\n    environment:\n      - DEBUG=false\n      - APP_ENV=production\n      - ...\n...\n```\n\n----------------------------------------\n\nTITLE: Implementing Guard Interceptor in PHP for GRPC Server Authentication\nDESCRIPTION: This code snippet shows how to create a guard interceptor for authentication in a GRPC server using Spiral Framework. It uses PHP attributes to determine which methods require authentication.\nSOURCE: https://github.com/spiral/docs/blob/3.14/docs/en/grpc/interceptors.md#2025-04-20_snippet_3\n\nLANGUAGE: php\nCODE:\n```\nnamespace App\\Endpoint\\GRPC\\Interceptor;\n\nuse App\\Attribute\\Guarded;\nuse Spiral\\Attributes\\ReaderInterface;\nuse Spiral\\Core\\CoreInterceptorInterface;\nuse Spiral\\Core\\CoreInterface;\nuse Spiral\\RoadRunner\\GRPC\\ContextInterface;\n\nfinal class GuardedInterceptor implements CoreInterceptorInterface\n{\n    public function __construct(\n        private readonly ReaderInterface $reader\n    ) {\n    }\n\n    public function process(string $class, string $method, array $parameters, CoreInterface $core): mixed\n    {\n        $reflMethod = new \\ReflectionMethod($class, $method);\n        $attribute = $this->reader->firstFunctionMetadata($reflMethod, Guarded::class);\n\n        if ($attribute !== null) {\n            $this->checkAuth($attribute, $parameters['ctx']);\n        }\n\n        return $core->callAction($class, $method, $parameters);\n    }\n\n    private function checkAuth(Guarded $attribute, ContextInterface $ctx): void\n    {\n        // Metadata always stores values as array. \n        $token = $ctx->getValue($attribute->tokenField)[0] ?? null;\n\n        // Here you can implement your own authentication logic\n        if ($token !== 'secret') {\n            throw new \\Exception('Unauthorized.');\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Dynamic Value Filters with ValueInterface\nDESCRIPTION: Example of creating a filter with a dynamic value using ValueInterface. This allows the filter to validate and convert incoming values according to the value interface's logic.\nSOURCE: https://github.com/spiral/docs/blob/3.14/docs/en/component/data-grid.md#2025-04-20_snippet_21\n\nLANGUAGE: php\nCODE:\n```\nuse Spiral\\DataGrid\\Specification\\Filter;\nuse Spiral\\DataGrid\\Specification\\Value;\n\n// price is not defined yet\n$filter = new Filter\\Equals('price', new Value\\NumericValue());\n\n// the value will be converted to int and the price should be equal to 7  \n$filter = $filter->withValue('7'); \n\n// this value is not applicable as it is not numeric  \n$filter = $filter->withValue([123]);\n```\n\n----------------------------------------\n\nTITLE: Configuring Session Handler with Autowire in PHP\nDESCRIPTION: This snippet demonstrates how to use the Spiral\\Core\\Container\\Autowire class to configure a FileHandler for session management. It shows how to pass specific configuration values like directory and lifetime to the class constructor without hardcoding them.\nSOURCE: https://github.com/spiral/docs/blob/3.14/docs/en/container/auto-wiring.md#2025-04-20_snippet_0\n\nLANGUAGE: php\nCODE:\n```\nuse Spiral\\Core\\Container\\Autowire;\nuse Spiral\\Session\\Handler\\FileHandler;\n\nreturn [\n    // ...\n    'handler' => new Autowire(\n        FileHandler::class,\n        [\n            'directory' => directory('runtime') . 'session',\n            'lifetime' => (int)env('SESSION_LIFETIME', 86400),\n        ]\n    ),\n];\n```\n\n----------------------------------------\n\nTITLE: Initializing Spiral Kernel\nDESCRIPTION: Example showing how to initialize a Spiral kernel instance with directory configuration and error handling options.\nSOURCE: https://github.com/spiral/docs/blob/3.14/docs/en/framework/kernel.md#2025-04-20_snippet_1\n\nLANGUAGE: php\nCODE:\n```\n$myapp = MyApp::create(\n    directories: [\n        'root' => __DIR__,\n    ],\n    handleErrors: false // do not mount error handler\n);\n\n$myapp->run(environment: null); // use default env \n\n\\dump($myapp->get(\\Spiral\\Boot\\DirectoriesInterface::class)->getAll());\n```\n\n----------------------------------------\n\nTITLE: Accessing PSR-7 Request in Spiral Controller\nDESCRIPTION: Demonstrates how to inject and use PSR-7 ServerRequestInterface in a Spiral Framework controller method to access request headers.\nSOURCE: https://github.com/spiral/docs/blob/3.14/docs/en/http/request-response.md#2025-04-20_snippet_0\n\nLANGUAGE: php\nCODE:\n```\nnamespace App\\Endpoint\\Web;\n\nuse Psr\\Http\\Message\\ServerRequestInterface;\nuse Spiral\\Core\\Container\\SingletonInterface;\n\nclass HomeController implements SingletonInterface\n{\n    public function index(ServerRequestInterface $request): void\n    {\n        dump($request->getHeaders());\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Generating Database Migrations\nDESCRIPTION: Command to generate migration files based on entity changes in Cycle ORM.\nSOURCE: https://github.com/spiral/docs/blob/3.14/docs/en/basics/orm.md#2025-04-20_snippet_19\n\nLANGUAGE: terminal\nCODE:\n```\nphp app.php cycle:migrate\n```\n\n----------------------------------------\n\nTITLE: Implementing Array Validation Rules in PHP with Spiral Framework\nDESCRIPTION: Example of a filter class implementing array validation rules for tags, person, and settings arrays. Demonstrates usage of array::range, array::isList, array::shorter, array::expectedValues, and array::isAssoc validators.\nSOURCE: https://github.com/spiral/docs/blob/3.14/docs/zh-CN/validation/spiral.md#2025-04-20_snippet_0\n\nLANGUAGE: php\nCODE:\n```\nnamespace App\\Filter;\n\nuse Spiral\\Filters\\Attribute\\Input\\Post;\nuse Spiral\\Filters\\Model\\Filter;\nuse Spiral\\Filters\\Model\\FilterDefinitionInterface;\nuse Spiral\\Filters\\Model\\HasFilterDefinition;\nuse Spiral\\Validator\\FilterDefinition;\n\nclass MyRequest extends Filter implements HasFilterDefinition\n{\n    #[Post]\n    public array $tags;\n    \n    #[Post]\n    public array $person = [];\n    \n    #[Post]\n    public array $settings = [];\n    \n    public function filterDefinition(): FilterDefinitionInterface\n    {\n        return new FilterDefinition([\n            'tags' => [\n                ['notEmpty'],\n                ['array::range', 1, 10]\n            ],\n            'person' => [  // <==== Request: ['ugly', 'old', 'long_hair']\n                ['array::isList'],\n                ['array::shorter', 3],\n                ['array::expectedValues', ['good', 'bad', 'ugly', 'long_hair', 'young', 'old', 'strong']]\n            ],\n            'settings' => [  // <====== Request ['setting1' => 'value', 'setting2' => 'value']\n                ['array::isAssoc'],\n            ]\n        ]);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: URL Generation Examples in UserController\nDESCRIPTION: Multiple examples showing different ways to generate URLs using RouterInterface, including query parameters and fragments.\nSOURCE: https://github.com/spiral/docs/blob/3.14/docs/en/http/routing.md#2025-04-20_snippet_52\n\nLANGUAGE: php\nCODE:\n```\nuse Spiral\\Router\\RouterInterface;\n\n// ...\n\npublic function index(RouterInterface $router)\n{\n    $uri = $router->uri('home', ['action' => 'index']);\n\n    dump((string)$uri); // /home/index\n\n    $uri = $router->uri('home', [\n        'action' => 'index',\n        'page'   => 123\n    ]);\n\n    dump((string)$uri); // /home/index?page=123\n\n    $uri = $router->uri('home', [\n        'action' => 'index',\n        'page'   => 123\n    ]);\n\n    dump((string)$uri->withFragment('hello')); // /home/index?page=123#hello\n\n    $uri = $router->uri('home', [\n        'action' => 'hello World',\n    ]);\n\n    dump((string)$uri); // /home/hello-world\n}\n```\n\n----------------------------------------\n\nTITLE: PSR-11 Container Usage in PHP Controller\nDESCRIPTION: Example of accessing the PSR-11 container interface within a controller class to retrieve dependencies.\nSOURCE: https://github.com/spiral/docs/blob/3.14/docs/en/container/overview.md#2025-04-20_snippet_0\n\nLANGUAGE: php\nCODE:\n```\nfinal class UserController\n{\n    public function __construct(\n        private readonly \\Psr\\Container\\ContainerInterface $container\n    ) {}\n\n    public function show(string $id): void\n    {\n       $repository = $this->container->get(UserRepository::class);\n       // ...\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Custom Application Kernel in PHP\nDESCRIPTION: Example of extending AbstractKernel to create a custom application kernel class with directory mapping and bootloader configuration.\nSOURCE: https://github.com/spiral/docs/blob/3.14/docs/en/framework/kernel.md#2025-04-20_snippet_0\n\nLANGUAGE: php\nCODE:\n```\nnamespace App\\Application;\n\nuse Spiral\\Boot\\AbstractKernel;\nuse Spiral\\Boot\\Exception\\BootException;\n\nfinal class MyApp extends AbstractKernel\n{\n    protected const LOAD = [\n        // bootloaders to initialize\n    ];\n\n    protected function bootstrap(): void\n    {\n        // custom initialization code\n        // invoked after all bootloaders are loaded\n    }\n\n    protected function mapDirectories(array $directories): array\n    {\n        if (!isset($directories['root'])) {\n            throw new BootException('Missing required directory `root`');\n        }\n\n        if (!isset($directories['app'])) {\n            $directories['app'] = $directories['root'] . '/app/';\n        }\n\n        return \\array_merge(\n            [\n                // public root\n                'public'    => $directories['root'] . '/public/',\n\n                // vendor libraries\n                'vendor'    => $directories['root'] . '/vendor/',\n\n                // data directories\n                'runtime'   => $directories['root'] . '/runtime/',\n                'cache'     => $directories['root'] . '/runtime/cache/',\n\n                // application directories\n                'config'    => $directories['app'] . '/config/',\n                'resources' => $directories['app'] . '/resources/',\n            ],\n            $directories\n        );\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Dockerfile for Spiral Application\nDESCRIPTION: This Dockerfile example builds a Docker image for a Spiral application. It sets up a PHP environment, installs necessary extensions, copies application files, and sets up the command to run the application using RoadRunner.\nSOURCE: https://github.com/spiral/docs/blob/3.14/docs/en/start/deployment.md#2025-04-20_snippet_8\n\nLANGUAGE: dockerfile\nCODE:\n```\n# This example will work with application root directory as docker context\nFROM php:8.2-cli-alpine3.17 as backend\n\nRUN  --mount=type=bind,from=mlocati/php-extension-installer:1.5,source=/usr/bin/install-php-extensions,target=/usr/local/bin/install-php-extensions \\\n      install-php-extensions opcache zip xsl dom exif intl pcntl bcmath sockets && \\\n     apk del --no-cache  ${PHPIZE_DEPS} ${BUILD_DEPENDS}\n\nWORKDIR /app\n\nENV COMPOSER_ALLOW_SUPERUSER=1\nCOPY --from=composer:2.3 /usr/bin/composer /usr/bin/composer\nCOPY ./composer.* .\nRUN composer config --no-plugins allow-plugins.spiral/composer-publish-plugin false && \\\n    composer install --optimize-autoloader --no-dev\n\nCOPY --from=spiralscout/roadrunner:latest /usr/bin/rr /app\n\nEXPOSE 8080/tcp\n\nCOPY ./ .\n\nCMD ./rr serve -c .rr.yaml\n```\n\n----------------------------------------\n\nTITLE: Invoking Container Services with InvokerInterface in PHP\nDESCRIPTION: Example showing how to invoke methods on classes managed by the container. This binds a service to the container and then invokes a method on it without manual instantiation.\nSOURCE: https://github.com/spiral/docs/blob/3.14/docs/en/container/overview.md#2025-04-20_snippet_14\n\nLANGUAGE: php\nCODE:\n```\n$container->bind('user-service', UserService::class);\n// ...\n$invoker->invoke(\n    ['user-service', 'store'], \n    $params\n);\n```\n\n----------------------------------------\n\nTITLE: Implementing UuidValue Filter in PHP\nDESCRIPTION: Shows how to use UuidValue to validate UUID-formatted strings with options to specify validation patterns for different UUID versions.\nSOURCE: https://github.com/spiral/docs/blob/3.14/docs/en/component/data-grid.md#2025-04-20_snippet_48\n\nLANGUAGE: php\nCODE:\n```\nuse Spiral\\DataGrid\\Specification\\Value;\n\n$v4 = new Value\\UuidValue('v4');\n$valid = new Value\\UuidValue();\n\n$v4->accepts('');                                        // false\n$v4->accepts('00000000-0000-0000-0000-000000000000');    // false\n$valid->accepts('');                                     // false\n$valid->accepts('00000000-0000-0000-0000-000000000000'); // true\n```\n\n----------------------------------------\n\nTITLE: Configuring Complex Role Permissions with Rules in Spiral\nDESCRIPTION: Advanced configuration of role permissions using wildcard patterns and custom rules in a Spiral Bootloader.\nSOURCE: https://github.com/spiral/docs/blob/3.14/docs/en/security/rbac.md#2025-04-20_snippet_7\n\nLANGUAGE: php\nCODE:\n```\nnamespace App\\Bootloader;\n\nuse Spiral\\Boot\\Bootloader\\Bootloader;\nuse Spiral\\Security\\PermissionsInterface;\nuse Spiral\\Security\\Rule;\n\nclass SecurityBootloader extends Bootloader\n{\n    public function boot(PermissionsInterface $rbac): void\n    {\n        $rbac->addRole('guest');\n\n        $rbac->associate('guest', 'home.*', Rule\\AllowRule::class);\n        $rbac->associate('guest', 'home.read', Rule\\ForbidRule::class);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Enhanced Post Entity with Relations to User and Comment\nDESCRIPTION: Extended Post entity with HasMany relation to Comments and BelongsTo relation to User. This implementation includes a collection for managing related comments and requires an author for creation.\nSOURCE: https://github.com/spiral/docs/blob/3.14/docs/en/cookbook/quick-start.md#2025-04-20_snippet_22\n\nLANGUAGE: php\nCODE:\n```\nuse App\\Repository\\PostRepository;\nuse Cycle\\Annotated\\Annotation\\Column;\nuse Cycle\\Annotated\\Annotation\\Entity;\nuse Cycle\\Annotated\\Annotation\\Relation;\nuse Doctrine\\Common\\Collections\\ArrayCollection;\nuse Doctrine\\Common\\Collections\\Collection;\n\n#[Entity(repository: PostRepository::class)]\nclass Post\n{\n    #[Column(type: 'primary')]\n    public int $id;\n\n    /**\n     * @var Collection|Comment[]\n     * @psalm-var Collection<int, Comment>\n     */\n    #[Relation\\HasMany(target: Comment::class)]\n    public Collection $comments;\n\n    public function __construct(\n        #[Column(type: 'string')]\n        public string $title,\n\n        #[Column(type: 'text')]\n        public string $content,\n\n        #[Relation\\BelongsTo(target: User::class, nullable: false)]\n        public User $author\n    ) {\n        $this->comments = new ArrayCollection();\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Route Configuration using Attributes - Spiral PHP\nDESCRIPTION: Configuring routes using PHP attributes in the controller method\nSOURCE: https://github.com/spiral/docs/blob/3.14/docs/en/start/http-basics.md#2025-04-20_snippet_2\n\nLANGUAGE: php\nCODE:\n```\nuse Spiral\\Router\\Annotation\\Route;\n\n// ...\n\n#[Route(route: '/date', name: 'current-date', methods: 'GET')]\npublic function show(): string\n{\n    return \\date('Y-m-d H:i:s');\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Between Filter in PHP and SQL\nDESCRIPTION: Demonstrates Between filter implementation with both field-based and value-based approaches.\nSOURCE: https://github.com/spiral/docs/blob/3.14/docs/en/component/data-grid.md#2025-04-20_snippet_30\n\nLANGUAGE: php\nCODE:\n```\nuse Spiral\\DataGrid\\Specification\\Filter;\n\n$fieldBetween  = new Filter\\Between('field', [10, 20]);\n$valueBetween  = new Filter\\ValueBetween('2020 Apr, 10th', ['start_date', 'end_date']);\n```\n\nLANGUAGE: sql\nCODE:\n```\n#\nfield-based\nselect *\nfrom table_name\nwhere field between 10 and 20;\n#\nor using gte/lte conversion\nselect *\nfrom table_name\nwhere field >= 10\n  and field <= 20;\n\n#\nvalue-based\nselect *\nfrom table_name\nwhere '2020 Apr, 10th' between start_date and end_date;\n```\n\n----------------------------------------\n\nTITLE: Automatic Dependency Resolution Example\nDESCRIPTION: Demonstrates how the container automatically resolves constructor dependencies for concrete classes and interfaces.\nSOURCE: https://github.com/spiral/docs/blob/3.14/docs/en/container/overview.md#2025-04-20_snippet_3\n\nLANGUAGE: php\nCODE:\n```\nclass MyController\n{\n    public function __construct(\n        OtherClass $class, \n        SomeInterface $some\n    ) {\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing DataGrid Interceptor in PHP Controller\nDESCRIPTION: Demonstrates how to use the DataGrid attribute and GridInterceptor to automatically apply datagrid specifications to an iterable output in a controller method.\nSOURCE: https://github.com/spiral/docs/blob/3.14/docs/en/http/interceptors.md#2025-04-20_snippet_11\n\nLANGUAGE: php\nCODE:\n```\nuse App\\Domain\\User\\Repository\\UserRepository;\nuse App\\Intergarion\\Keeper\\View\\UserGrid;\nuse Spiral\\DataGrid\\Annotation\\DataGrid;\nuse Spiral\\Router\\Annotation\\Route;\n\nclass UsersController\n{\n    #[Route(route: '/users', name: 'users')]\n    #[DataGrid(grid: UserGrid::class)]\n    public function list(UserRepository $userRepository): iterable\n    {\n        return $userRepository->select();\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Installing Spiral Framework using Composer\nDESCRIPTION: Command to create a new Spiral project using Composer. This initiates the installation process and launches the interactive installer.\nSOURCE: https://github.com/spiral/docs/blob/3.14/docs/en/start/installation.md#2025-04-20_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ncomposer create-project spiral/app my-app\n```\n\n----------------------------------------\n\nTITLE: Implementing a Guard Check Interceptor in Spiral\nDESCRIPTION: Implementation of a CoreInterceptorInterface to perform authorization checks on filters. The interceptor reads Guarded attributes from filter classes and validates user permissions using the GuardInterface.\nSOURCE: https://github.com/spiral/docs/blob/3.14/docs/en/filters/interceptors.md#2025-04-20_snippet_1\n\nLANGUAGE: php\nCODE:\n```\nnamespace App\\Filter;\n\nuse Spiral\\Attributes\\ReaderInterface;\nuse Spiral\\Core\\CoreInterceptorInterface;\nuse Spiral\\Core\\CoreInterface;\nuse Spiral\\Domain\\Annotation\\Guarded;\nuse Spiral\\Http\\Exception\\ClientException\\UnauthorizedException;\nuse Spiral\\Security\\GuardInterface;\n\nclass CheckGuardInterceptor implements CoreInterceptorInterface\n{\n    public function __construct(\n        private readonly GuardInterface $guard,\n        private readonly ReaderInterface $reader,\n    ) {\n    }\n\n    public function process(string $filterClass, string $action, array $parameters, CoreInterface $core): mixed\n    {\n        $refClass = new \\ReflectionClass($filterClass);\n        // Read attributes from the filter class and check if it has Guarded annotation\n        $guarded = $this->reader->firstClassMetadata($refClass, Guarded::class);\n\n        // If the filter has Guarded attributes, check if the user has the permission\n        if ($guarded && !$this->guard->allows($guarded->permission ?: $filterClass)) {\n            throw new UnauthorizedException($guarded->errorMessage ?: 'Access denied');\n        }\n\n        // If the filter has no Guarded attributes, or the user has the permission, continue\n        return $core->callAction($filterClass, $action, $parameters);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Validation Handler Middleware in Spiral\nDESCRIPTION: Shows how to register the ValidationHandlerMiddleware for automatic validation error handling.\nSOURCE: https://github.com/spiral/docs/blob/3.14/docs/en/filters/filter.md#2025-04-20_snippet_22\n\nLANGUAGE: php\nCODE:\n```\nnamespace App\\Application\\Bootloader;\n\nuse Spiral\\Bootloader\\Http\\RoutesBootloader as BaseRoutesBootloader;\nuse Spiral\\Filter\\ValidationHandlerMiddleware;\n\nfinal class RoutesBootloader extends BaseRoutesBootloader\n{\n    protected function globalMiddleware(): array\n    {\n        return [\n            // ...\n            ValidationHandlerMiddleware::class,\n        ];\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Authentication Interceptor for WebSocket Services in PHP\nDESCRIPTION: Authentication interceptor class that validates user tokens from WebSocket requests and provides user identity to the service. Implements CoreInterceptorInterface to integrate with Spiral's core functionality.\nSOURCE: https://github.com/spiral/docs/blob/3.14/docs/en/websockets/interceptors.md#2025-04-20_snippet_0\n\nLANGUAGE: php\nCODE:\n```\nnamespace App\\Entrypoint\\Centrifugo\\Interceptor;\n\nuse Psr\\EventDispatcher\\EventDispatcherInterface;\nuse RoadRunner\\Centrifugo\\Request\\RequestInterface;\nuse Spiral\\Auth\\ActorProviderInterface;\nuse Spiral\\Auth\\AuthContext;\nuse Spiral\\Auth\\AuthContextInterface;\nuse Spiral\\Core\\CoreInterceptorInterface;\nuse Spiral\\Core\\CoreInterface;\nuse Spiral\\Core\\ScopeInterface;\nuse Spiral\\Prototype\\Traits\\PrototypeTrait;\n\nfinal class AuthenticatorInterceptor implements CoreInterceptorInterface\n{\n    use PrototypeTrait;\n\n    public function __construct(\n        private readonly ScopeInterface $scope,\n        private readonly ActorProviderInterface $actorProvider,\n        private readonly ?EventDispatcherInterface $eventDispatcher = null,\n    ) {\n    }\n\n    public function process(string $controller, string $action, array $parameters, CoreInterface $core): mixed\n    {\n        $request = $parameters['request'];\n        \\assert($request instanceof RequestInterface);\n\n        $authToken = $request->getData()['authToken'] ?? null;\n\n        if (!$authToken || !$token = $this->authTokens->load($authToken)) {\n            $request->error(403, 'Unauthorized');\n            return null;\n        }\n\n        $auth = new AuthContext($this->actorProvider, $this->eventDispatcher);\n        $auth->start($token);\n\n        return $this->scope->runScope([\n            AuthContextInterface::class => $auth,\n        ], fn () => $core->callAction($controller, $action, $parameters));\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Environment Variables for Production\nDESCRIPTION: Essential environment variable configurations for running a Spiral application in production mode, including debug settings, environment type, and tokenizer cache.\nSOURCE: https://github.com/spiral/docs/blob/3.14/docs/en/start/deployment.md#2025-04-20_snippet_0\n\nLANGUAGE: dotenv\nCODE:\n```\nDEBUG=false\nAPP_ENV=production\nTOKENIZER_CACHE_TARGETS=true\nVERBOSITY_LEVEL=basic\nMONOLOG_DEFAULT_CHANNEL=roadrunner\nMONOLOG_DEFAULT_LEVEL=error\nCYCLE_SCHEMA_CACHE=true\nCYCLE_SCHEMA_WARMUP=true\n```\n\n----------------------------------------\n\nTITLE: Entity Transaction Management\nDESCRIPTION: Example of using EntityManagerInterface for persisting entity changes in a service class\nSOURCE: https://github.com/spiral/docs/blob/3.14/docs/en/basics/orm.md#2025-04-20_snippet_9\n\nLANGUAGE: php\nCODE:\n```\nuse Cycle\\ORM\\EntityManagerInterface;\n\nclass UserService\n{\n    public function __construct(\n        private readonly EntityManagerInterface $entityManager\n    ) {\n    }\n    \n    public function create(string $name, string $email): User\n    {\n        $user = new User($name, $email);\n        \n        $this->entityManager->persist($user);\n        $this->entityManager->run();\n        \n        return $user;\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Filter Class Implementation Example\nDESCRIPTION: Example of implementing a Filter class with validation rules\nSOURCE: https://github.com/spiral/docs/blob/3.14/docs/en/validation/spiral.md#2025-04-20_snippet_16\n\nLANGUAGE: php\nCODE:\n```\nnamespace App\\Filter;\n\nuse Spiral\\Filters\\Attribute\\Input\\Post;\nuse Spiral\\Filters\\Model\\Filter;\nuse Spiral\\Filters\\Model\\FilterDefinitionInterface;\nuse Spiral\\Filters\\Model\\HasFilterDefinition;\nuse Spiral\\Validator\\FilterDefinition;\n\nclass MyFilter extends Filter implements HasFilterDefinition\n{\n    #[Post]\n    public string $name;\n    \n    public function filterDefinition(): FilterDefinitionInterface\n    {\n        return new FilterDefinition([\n            'name' => ['required', 'my::abc']\n        ]);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Using ResponseWrapper via PrototypeTrait\nDESCRIPTION: Demonstrates accessing the ResponseWrapper via Spiral's PrototypeTrait, which provides a shorthand way to access common services. This example creates a temporary redirect response.\nSOURCE: https://github.com/spiral/docs/blob/3.14/docs/en/http/request-response.md#2025-04-20_snippet_12\n\nLANGUAGE: php\nCODE:\n```\nnamespace App\\Endpoint\\Web;\n\nuse Psr\\Http\\Message\\ResponseInterface;\nuse Spiral\\Prototype\\Traits\\PrototypeTrait;\n\nclass HomeController\n{\n    Use PrototypeTrait;\n\n    public function index(): ResponseInterface\n    {\n        // temporary redirect\n        return $this->response->redirect('https://google.com', 307);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: ORM Configuration Setup\nDESCRIPTION: Configuration file for Cycle ORM settings including schema, collections, and generators\nSOURCE: https://github.com/spiral/docs/blob/3.14/docs/en/basics/orm.md#2025-04-20_snippet_5\n\nLANGUAGE: php\nCODE:\n```\nuse Cycle\\ORM\\SchemaInterface;\n\nreturn [\n    'schema' => [\n        'cache' => false,\n        'defaults' => [\n            SchemaInterface::MAPPER => \\Cycle\\ORM\\Mapper\\Mapper::class,\n            SchemaInterface::REPOSITORY => \\Cycle\\ORM\\Select\\Repository::class,\n            SchemaInterface::SCOPE => null,\n            SchemaInterface::TYPECAST_HANDLER => [\n                \\Cycle\\ORM\\Parser\\Typecast::class\n            ],\n        ],\n        'collections' => [\n            'default' => 'array',\n            'factories' => [\n                'array' => new \\Cycle\\ORM\\Collection\\ArrayCollectionFactory(),\n            ],\n        ],\n        'generators' => null,\n    ],\n    'warmup' => false,\n];\n```\n\n----------------------------------------\n\nTITLE: Using Tracer Interface for Span Creation and Trace Collection\nDESCRIPTION: PHP example demonstrating how to use the TracerInterface to create spans, add attributes, and trace HTTP requests.\nSOURCE: https://github.com/spiral/docs/blob/3.14/docs/en/advanced/telemetry.md#2025-04-20_snippet_8\n\nLANGUAGE: php\nCODE:\n```\nuse Spiral\\Telemetry\\TracerInterface;\nuse Spiral\\Telemetry\\TraceKind;\nuse Spiral\\Telemetry\\SpanInterface;\n\n$tracer = $this->container->get(TracerInterface::class);\n$url = 'https://example.com';\n\n$result = $tracer->trace(\n    name: 'some.function'\n    callback: static function(\n        SpanInterface $span,\n        HttpClientInterface $httpClient\n    ) use($url): string {\n        // The code inside the callback will be executed in the span context and information about the span will be\n        // sent to the collector\n        \n        $response = $httpClient->get($url);\n        \n        // Attributes that will be added to the span object\n        $span->setAttribute('http.response.code', $response->getStatusCode());\n        $span->setAttribute('http.response.length', \\strlen($response->getContent()));\n        \n        return $response->getContent();\n    },\n    attributes: [\n        'http.url' => $url,\n    ],\n    scoped: true,\n    traceKind: TraceKind::CLIENT,\n);\n```\n\n----------------------------------------\n\nTITLE: Registering Dispatchers in Bootloader\nDESCRIPTION: Example of registering HTTP and Console dispatchers in the application bootloader class.\nSOURCE: https://github.com/spiral/docs/blob/3.14/docs/en/framework/dispatcher.md#2025-04-20_snippet_2\n\nLANGUAGE: php\nCODE:\n```\nuse Spiral\\Boot\\Bootloader\\Bootloader;\nuse Spiral\\Boot\\KernelInterface;\n\nclass AppBootloader extends Bootloader\n{\n    public function boot(\n      KernelInterface $kernel, \n      HttpDispatcher $http,\n      ConsoleDispatcher $console,\n    ): void  {\n        $kernel->addDispatcher($http)\n        $kernel->addDispatcher($console);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Database Query Execution in PHP\nDESCRIPTION: Examples of executing SELECT queries and UPDATE/DELETE statements using query and execute methods.\nSOURCE: https://github.com/spiral/docs/blob/3.14/docs/en/basics/orm.md#2025-04-20_snippet_15\n\nLANGUAGE: php\nCODE:\n```\ndump(\n    $db->query('SELECT * FROM users WHERE id > ?', [\n        1\n    ])->fetchAll()\n);\n\ndump(\n    $db->execute('DELETE FROM users WHERE id > ?', [\n        1,\n    ]) // number of affected rows \n);\n```\n\n----------------------------------------\n\nTITLE: Creating a Console Command in Spiral Framework\nDESCRIPTION: This snippet shows how to use the scaffolding command to create a new console command in Spiral Framework. It creates a command named 'CurrentDate'.\nSOURCE: https://github.com/spiral/docs/blob/3.14/docs/en/start/cli-basics.md#2025-04-20_snippet_0\n\nLANGUAGE: terminal\nCODE:\n```\nphp app.php create:command CurrentDate\n```\n\n----------------------------------------\n\nTITLE: Implementing Array Validation in PHP using Spiral Framework\nDESCRIPTION: This example shows how to create a filter class that validates multiple array fields using various array validation rules in Spiral Framework. It demonstrates the use of 'array::range', 'array::isList', 'array::shorter', 'array::expectedValues', and 'array::isAssoc' rules.\nSOURCE: https://github.com/spiral/docs/blob/3.14/docs/en/validation/spiral.md#2025-04-20_snippet_18\n\nLANGUAGE: php\nCODE:\n```\nnamespace App\\Filter;\n\nuse Spiral\\Filters\\Attribute\\Input\\Post;\nuse Spiral\\Filters\\Model\\Filter;\nuse Spiral\\Filters\\Model\\FilterDefinitionInterface;\nuse Spiral\\Filters\\Model\\HasFilterDefinition;\nuse Spiral\\Validator\\FilterDefinition;\n\nclass MyRequest extends Filter implements HasFilterDefinition\n{\n    #[Post]\n    public array $tags;\n    \n    #[Post]\n    public array $person = [];\n    \n    #[Post]\n    public array $settings = [];\n    \n    public function filterDefinition(): FilterDefinitionInterface\n    {\n        return new FilterDefinition([\n            'tags' => [\n                ['notEmpty'],\n                ['array::range', 1, 10]\n            ],\n            'person' => [  // <==== Request: ['ugly', 'old', 'long_hair']\n                ['array::isList'],\n                ['array::shorter', 3],\n                ['array::expectedValues', ['good', 'bad', 'ugly', 'long_hair', 'young', 'old', 'strong']]\n            ],\n            'settings' => [  // <====== Request ['setting1' => 'value', 'setting2' => 'value']\n                ['array::isAssoc'],\n            ]\n        ]);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Domain Core with AppBootloader in Spiral Framework\nDESCRIPTION: Example of the default AppBootloader that sets up domain core functionality including CycleInterceptor, GridInterceptor, and GuardInterceptor. This bootloader handles the fundamental domain logic and business rules of the application.\nSOURCE: https://github.com/spiral/docs/blob/3.14/docs/en/cookbook/quick-start.md#2025-04-20_snippet_9\n\nLANGUAGE: php\nCODE:\n```\nnamespace App\\Application\\Bootloader;\n\nuse Spiral\\Bootloader\\DomainBootloader;\nuse Spiral\\Core\\CoreInterface;\nuse Spiral\\Cycle\\Interceptor\\CycleInterceptor;\nuse Spiral\\DataGrid\\Interceptor\\GridInterceptor;\nuse Spiral\\Domain\\GuardInterceptor;\n\n/**\n * @link https://spiral.dev/docs/http-interceptors\n */\nfinal class AppBootloader extends DomainBootloader\n{\n    protected const SINGLETONS = [CoreInterface::class => [self::class, 'domainCore']];\n\n    protected const INTERCEPTORS = [\n        CycleInterceptor::class,\n        GridInterceptor::class,\n        GuardInterceptor::class,\n    ];\n}\n```\n\n----------------------------------------\n\nTITLE: WebSocket Connect Service Implementation with Authentication in PHP\nDESCRIPTION: Service class handling WebSocket connection requests with authentication checks. Uses the authenticated user data to create connection response with user details and channel access.\nSOURCE: https://github.com/spiral/docs/blob/3.14/docs/en/websockets/interceptors.md#2025-04-20_snippet_1\n\nLANGUAGE: php\nCODE:\n```\nnamespace App\\Endpoint\\Centrifugo;\n\nuse App\\Database\\User;\nuse RoadRunner\\Centrifugo\\Payload\\ConnectResponse;\nuse RoadRunner\\Centrifugo\\Request\\Connect;\nuse RoadRunner\\Centrifugo\\Request\\RequestInterface;\nuse Spiral\\Prototype\\Traits\\PrototypeTrait;\nuse Spiral\\RoadRunnerBridge\\Centrifugo\\ServiceInterface;\n\nfinal class ConnectService implements ServiceInterface\n{\n    use PrototypeTrait;\n\n    /** @param Connect $request */\n    public function handle(RequestInterface $request): void\n    {\n        try {\n            $user = $this->auth->getActor();\n\n            $request->respond(\n                new ConnectResponse(\n                    user: (string)$user->getId(),\n                    data: ['user' => $user->jsonSerialize()],\n                    channels: ['chat'],\n                ),\n            );\n        } catch (\\Throwable $e) {\n            $request->error($e->getCode(), $e->getMessage());\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Nginx Configuration for PHP-FPM\nDESCRIPTION: Comprehensive Nginx server configuration for running Spiral application with PHP-FPM.\nSOURCE: https://github.com/spiral/docs/blob/3.14/docs/en/start/deployment.md#2025-04-20_snippet_4\n\nLANGUAGE: nginx\nCODE:\n```\nserver {\n    listen 80;\n    listen [::]:80;\n    server_name example.com;\n    root /srv/example.com/public;\n \n    add_header X-Frame-Options \"SAMEORIGIN\";\n    add_header X-Content-Type-Options \"nosniff\";\n \n    index app.php;\n \n    charset utf-8;\n \n    location / {\n        try_files $uri $uri/ /app.php?$query_string;\n    }\n \n    location = /favicon.ico { access_log off; log_not_found off; }\n    location = /robots.txt  { access_log off; log_not_found off; }\n \n    error_page 404 /app.php;\n \n    location ~ \\.php$ {\n        fastcgi_pass unix:/var/run/php/php8.1-fpm.sock;\n        fastcgi_param SCRIPT_FILENAME $realpath_root$fastcgi_script_name;\n        include fastcgi_params;\n    }\n \n    location ~ /\\.(?!well-known).* {\n        deny all;\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Using Guarded Attribute for Automatic Access Control in Spiral Framework\nDESCRIPTION: This code demonstrates the use of the Guarded attribute in Spiral Framework to automatically check access to controller methods. It applies the 'home.index' permission check to the index method.\nSOURCE: https://github.com/spiral/docs/blob/3.14/docs/en/security/rbac.md#2025-04-20_snippet_15\n\nLANGUAGE: php\nCODE:\n```\nnamespace App\\Controller;\n\nuse Spiral\\Domain\\Annotation\\Guarded;\n\nclass HomeController\n{\n    #[Guarded(permission: 'home.index', else: 'notFound')]\n    public function index(): string\n    {\n        return 'OK';\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Custom Database Validation Checker in PHP\nDESCRIPTION: Implementation of a custom validation checker class that extends AbstractChecker to validate user existence in database. Includes definition of error messages and validation logic.\nSOURCE: https://github.com/spiral/docs/blob/3.14/docs/en/validation/spiral.md#2025-04-20_snippet_19\n\nLANGUAGE: php\nCODE:\n```\nnamespace App\\Security;\n\nuse Cycle\\Database\\Database;\nuse Spiral\\Validator\\AbstractChecker;\n\nclass DBChecker extends AbstractChecker\n{\n    public const MESSAGES = [\n        // Method => Error message\n        'user' => 'No such user.'\n    ];\n\n    public function user(int $id): bool\n    {\n        return $this->db->table('users')->select()->where('id', $id)->count() === 1;\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Command with Attributes (PHP)\nDESCRIPTION: Shows a complete example of a console command using PHP attributes for arguments, options, and other configuration.\nSOURCE: https://github.com/spiral/docs/blob/3.14/docs/en/console/commands.md#2025-04-20_snippet_4\n\nLANGUAGE: php\nCODE:\n```\nnamespace App\\Api\\Cli\\Command;\n\nuse Spiral\\Console\\Attribute\\Argument;\nuse Spiral\\Console\\Attribute\\AsCommand;\nuse Spiral\\Console\\Attribute\\Option;\nuse Spiral\\Console\\Attribute\\Question;\nuse Spiral\\Console\\Command;\nuse Symfony\\Component\\Console\\Input\\InputOption;\n\n#[AsCommand(\n    name: 'app:create:user', \n    description: 'Creates a user with the given data')\n]\nfinal class CreateUser extends Command\n{\n    #[Argument]\n    private string $email;\n\n    #[Argument(description: 'User password')]\n    private string $password;\n\n    #[Argument(name: 'username', description: 'The user name')]\n    private string $userName;\n\n    #[Option(shortcut: 'a', name: 'admin', description: 'Set the user as admin')]\n    private bool $isAdmin = false;\n\n    public function __invoke(): int\n    {\n        $user = new User(\n            email: $this->email,\n            password: $this->password,\n        );\n        \n        $user->setIsAdmin($this->isAdmin);\n        \n        // Save user to database...\n\n        return self::SUCCESS;\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a Route Attribute Listener in Spiral Framework\nDESCRIPTION: Example implementation of a TokenizationListenerInterface that collects route attributes from method annotations. The listener scans all classes, identifies methods with Route attributes, and registers them with the router.\nSOURCE: https://github.com/spiral/docs/blob/3.14/docs/en/advanced/tokenizer.md#2025-04-20_snippet_14\n\nLANGUAGE: php\nCODE:\n```\nuse Spiral\\Attributes\\ReaderInterface;\n\nfinal class RouteAttributeListener implements TokenizationListenerInterface\n{\n    private array $attributes = [];\n\n    public function __construct(\n        private readonly ReaderInterface $reader,\n        private readonly RouterInterface $router\n    ) {\n    }\n    \n    public function listen(\\ReflectionClass $class): void\n    {\n        foreach ($class->getMethods() as $method) {\n            $route = $this->reader->firstFunctionMetadata($method, Route::class);\n\n            if ($route === null) {\n                continue;\n            }\n\n            $this->attributes[] = [$method, $route];\n        }\n    }\n\n    public function finalize(): void\n    {\n        foreach ($this->attributes as [$method, $route]) {\n            $this->router->addRoute(...);\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: RoadRunner Docker Configuration\nDESCRIPTION: Dockerfile configuration for setting up RoadRunner with PHP 8.1.\nSOURCE: https://github.com/spiral/docs/blob/3.14/docs/en/start/server.md#2025-04-20_snippet_2\n\nLANGUAGE: docker\nCODE:\n```\nFROM spiralscout/roadrunner as roadrunner\n\nFROM php:8.1-cli\n\nCOPY --from=roadrunner /usr/bin/rr /usr/local/bin/rr\n\nCMD [\"rr\", \"serve\"]\n```\n\n----------------------------------------\n\nTITLE: Configuring Firewall Middleware\nDESCRIPTION: Examples of implementing different types of firewall middleware for route protection.\nSOURCE: https://github.com/spiral/docs/blob/3.14/docs/en/security/authentication.md#2025-04-20_snippet_23\n\nLANGUAGE: php\nCODE:\n```\nuse Spiral\\Auth\\Middleware\\Firewall\\OverwriteFirewall;\nuse Spiral\\Auth\\Middleware\\Firewall\\ExceptionFirewall;\nuse Spiral\\Http\\Exception\\ClientException\\ForbiddenException;\nuse Spiral\\Http\\Exception\\ClientException\\RedirectFirewall;\nuse Psr\\Http\\Message\\ResponseFactoryInterface;\n\n// Overwrite Firewall\n(new Route('/account/<controller>/<action>', $accountTarget))\n        ->withMiddleware(new OverwriteFirewall(new Uri('/account/login')));\n\n// Exception Firewall\n(new Route('/account/<controller>/<action>', $accountTarget))\n        ->withMiddleware(new ExceptionFirewall(new ForbiddenException()));\n\n// Redirect Firewall\n(new Route('/account/<controller>/<action>', $accountTarget))\n        ->withMiddleware(new RedirectFirewall(\n            uri: new Uri('/account/login'),\n            status: 302,\n            responseFactory: $container->get(ResponseFactoryInterface::class)\n        ));\n```\n\n----------------------------------------\n\nTITLE: Creating a Command using Scaffolding (Terminal)\nDESCRIPTION: Shows how to create a new command using Spiral's scaffolding feature via the terminal.\nSOURCE: https://github.com/spiral/docs/blob/3.14/docs/en/console/commands.md#2025-04-20_snippet_0\n\nLANGUAGE: terminal\nCODE:\n```\nphp app.php create:command My\n```\n\n----------------------------------------\n\nTITLE: Advanced Temporal Client Configuration in PHP\nDESCRIPTION: Detailed PHP configuration example for Temporal client including TLS, auth token, namespace, and retry options.\nSOURCE: https://github.com/spiral/docs/blob/3.14/docs/en/temporal/configuration.md#2025-04-20_snippet_6\n\nLANGUAGE: php\nCODE:\n```\nuse Spiral\\TemporalBridge\\Config\\TlsConfig;\nuse Spiral\\TemporalBridge\\Config\\ConnectionConfig;\nuse Spiral\\TemporalBridge\\Config\\ClientConfig;\nuse Temporal\\Client\\ClientOptions;\nuse Temporal\\Client\\Common\\RpcRetryOptions;\nuse Temporal\\Client\\GRPC\\Context;\n\nreturn [\n    // ...\n    'clients' => [\n        'default' => new ClientConfig(\n            connection: new ConnectionConfig(\n                address: 'foo-bar-default.baz.tmprl.cloud:7233',\n                tls: new TlsConfig(),\n                authToken: 'my-secret-token',\n            ),\n            options: (new ClientOptions())\n                ->withNamespace('default')\n                ->withIdentity('customer-service'),\n            context: Context::default()\n                ->withTimeout(4.5)\n                ->withRetryOptions(\n                    RpcRetryOptions::new()\n                        ->withMaximumAttempts(5)\n                        ->withInitialInterval(3)\n                        ->withMaximumInterval(10)\n                        ->withBackoffCoefficient(1.6)\n                ),\n];\n```\n\n----------------------------------------\n\nTITLE: Setting Default Route Parameters in PHP\nDESCRIPTION: Demonstrates how to set default values for route parameters using the defaults() method.\nSOURCE: https://github.com/spiral/docs/blob/3.14/docs/en/http/routing.md#2025-04-20_snippet_16\n\nLANGUAGE: php\nCODE:\n```\n$routes\n    ->add(name: 'html', pattern: '/<action>.html')\n    ->defaults(['action' => 'default'])\n    ->...;\n```\n\n----------------------------------------\n\nTITLE: Implementing Console Command with Filter in PHP\nDESCRIPTION: Updates the UserRegister command to use the UserRegisterFilter for input validation and processing.\nSOURCE: https://github.com/spiral/docs/blob/3.14/docs/en/cookbook/console-validation.md#2025-04-20_snippet_6\n\nLANGUAGE: php\nCODE:\n```\nnamespace App\\Command;\n\nuse Spiral\\Console\\Command;\n\nfinal class UserRegister extends Command\n{\n    protected const SIGNATURE = <<<CMD\n        user:register\n        {username : User username}\n        {email : User email address}\n        {--a|admin : Mark as admin}\n        {--s|send-verification-email : Send a verification email to the user}\nCMD;\n\n    public function perform(UserRegisterFilter $input): int\n    {\n        $this->writeln(\\sprintf('Username: %s', $input->username));\n        $this->writeln(\\sprintf('Email: %s', $input->email));\n        $this->writeln(\\sprintf('Is admin: %s', $input->admin ? 'yes' : 'no'));\n\n        // $user = new User(\n        //     username: $filter->username,\n        //     email: $filter->email,\n        //    admin: $filter->admin\n        // );\n\n        // Store the user in the database...\n\n        if ($input->sendVerificationEmail) {\n            $this->writeln('Sending verification email...');\n\n            // Send the verification email...\n        }\n\n        $this->writeln(\\sprintf('User %s registered', $input->username));\n\n        return self::SUCCESS;\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Activating HTTP Components Using Method in Kernel.php\nDESCRIPTION: Configuration for activating HTTP components by defining bootloaders using the method approach in the application kernel. Includes the Nyholm PSR-7 implementation, HTTP core, and Router bootloaders.\nSOURCE: https://github.com/spiral/docs/blob/3.14/docs/en/http/configuration.md#2025-04-20_snippet_1\n\nLANGUAGE: php\nCODE:\n```\npublic function defineBootloaders(): array\n{\n    return [\n        // ...\n        // Fast PSR-7 implementation\n        \\Spiral\\Nyholm\\Bootloader\\NyholmBootloader::class,\n    \n        // HTTP core\n        \\Spiral\\Bootloader\\Http\\HttpBootloader::class,\n    \n        // PSR-15 handler      \n        \\Spiral\\Bootloader\\Http\\RouterBootloader::class,\n        // ...\n    ];\n}\n```\n\n----------------------------------------\n\nTITLE: Registering Filter Validator in Bootloader in PHP\nDESCRIPTION: Example of a Bootloader class that registers a custom filter definition with a validator. This connects the filter definition to its validation implementation during application boot process.\nSOURCE: https://github.com/spiral/docs/blob/3.14/docs/en/filters/configuration.md#2025-04-20_snippet_7\n\nLANGUAGE: php\nCODE:\n```\nnamespace App\\Application\\Bootloader;\n\nuse App\\Validation;\nuse Spiral\\Boot\\Bootloader\\Bootloader;\nuse Spiral\\Validation\\Bootloader\\ValidationBootloader;\nuse Spiral\\Validation\\ValidationInterface;\nuse Spiral\\Validation\\ValidationProvider;\n\nfinal class ValidatorBootloader extends Bootloader\n{\n    public function boot(ValidationProvider $provider): void\n    {\n        $provider->register(\n            \\App\\Filter\\MyFilterDefinition::class,\n            static fn(Validation $validation): ValidationInterface => new MyValidation()\n        );\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Basic User Entity Implementation with Cycle ORM\nDESCRIPTION: Initial implementation of the User entity with primary ID and name column. This entity uses Cycle ORM annotations to define the database schema and repository association.\nSOURCE: https://github.com/spiral/docs/blob/3.14/docs/en/cookbook/quick-start.md#2025-04-20_snippet_14\n\nLANGUAGE: php\nCODE:\n```\nuse App\\Domain\\Blog\\Repository\\UserRepository;\nuse Cycle\\Annotated\\Annotation\\Column;\nuse Cycle\\Annotated\\Annotation\\Entity;\n\n#[Entity(repository: UserRepository::class)]\nclass User\n{\n    #[Column(type: 'primary')]\n    public int $id;\n\n    #[Column(type: 'string')]\n    public string $name;\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Route with Attribute in Controller\nDESCRIPTION: Demonstrates how to define a route using the Route attribute in a controller method.\nSOURCE: https://github.com/spiral/docs/blob/3.14/docs/en/http/routing.md#2025-04-20_snippet_3\n\nLANGUAGE: php\nCODE:\n```\nnamespace App\\Endpoint\\Web;\n\nuse Spiral\\Router\\Annotation\\Route;\n\nclass HomeController\n{\n    #[Route(route: '/', name: 'index', methods: 'GET')] \n    public function index(): string\n    {\n        return 'hello world';\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Locating Classes Implementing Specific Interface in PHP\nDESCRIPTION: Demonstrates how to use ClassesInterface to find classes implementing a specific interface, such as Psr\\Http\\Server\\MiddlewareInterface. It iterates through the found classes and dumps their file names.\nSOURCE: https://github.com/spiral/docs/blob/3.14/docs/en/advanced/tokenizer.md#2025-04-20_snippet_0\n\nLANGUAGE: php\nCODE:\n```\nuse Spiral\\Tokenizer\\ClassesInterfac;\n\npublic function findClasses(ClassesInterface $classes): void\n{\n    foreach ($classes->getClasses(\\Psr\\Http\\Server\\MiddlewareInterface::class) as $middleware) {\n        dump($middleware->getFileName());\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a Custom JWT Token Storage Implementation\nDESCRIPTION: Demonstrates how to create a custom token storage implementation using JWT for authentication tokens.\nSOURCE: https://github.com/spiral/docs/blob/3.14/docs/en/security/authentication.md#2025-04-20_snippet_11\n\nLANGUAGE: php\nCODE:\n```\nuse Firebase\\JWT\\JWT;\nuse Firebase\\JWT\\Key;\nuse Firebase\\JWT\\ExpiredException;\nuse Spiral\\Auth\\TokenInterface;\nuse Spiral\\Auth\\TokenStorageInterface;\n\nfinal class JwtTokenStorage implements TokenStorageInterface\n{\n    /** @var callable */\n    private $time;\n\n    public function __construct(\n        private readonly TokenEncoder $tokenEncoder,\n        private readonly string $secret,\n        private string $algorithm = 'HS256',\n        private readonly string $expiresAt = '+30 days',\n        callable $time = null\n    ) {\n        $this->tokenEncoder = $tokenEncoder;\n        $this->expiresAt = $expiresAt;\n        $this->time = $time ?? static function (string $offset): \\DateTimeImmutable {\n            return new \\DateTimeImmutable($offset);\n        };\n    }\n\n    public function load(string $id): ?TokenInterface\n    {\n        // ...\n    }\n\n    public function create(array $payload, \\DateTimeInterface $expiresAt = null): TokenInterface\n    {\n        // ...\n    }\n\n    public function delete(TokenInterface $token): void\n    {\n        // ...\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Factory Interface Usage Example\nDESCRIPTION: Shows how to use FactoryInterface to construct objects with specific dependencies.\nSOURCE: https://github.com/spiral/docs/blob/3.14/docs/en/container/overview.md#2025-04-20_snippet_6\n\nLANGUAGE: php\nCODE:\n```\npublic function makeClass(FactoryInterface $factory): MyClass\n{\n    return $factory->make(UserService::class, [\n        'table' => 'users'\n    ]); \n}\n```\n\n----------------------------------------\n\nTITLE: Registering Token Transport in AppBootloader\nDESCRIPTION: Implementation of token transport registration using cookie and header transport methods in the application bootloader.\nSOURCE: https://github.com/spiral/docs/blob/3.14/docs/en/security/authentication.md#2025-04-20_snippet_16\n\nLANGUAGE: php\nCODE:\n```\nuse Spiral\\Boot\\Bootloader;\nuse Spiral\\Bootloader\\Auth\\HttpAuthBootloader;\nuse Spiral\\Auth\\Transport\\CookieTransport;\nuse Spiral\\Auth\\Transport\\HeaderTransport;\n\nfinal class AppBootloader extends Bootloader\n{\n    public function boot(HttpAuthBootloader $httpAuth): void \n    {\n        $httpAuth->addTransport(\n          'cookie', \n          new CookieTransport(cookie: 'token', basePath: '/')\n        );\n\n        $httpAuth->addTransport(\n          'header', \n          new HeaderTransport(header: 'X-Auth-Token')\n        );\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing LoginController in PHP for Spiral Framework\nDESCRIPTION: This code snippet demonstrates the implementation of a LoginController class that handles user authentication using JWT in Spiral Framework.\nSOURCE: https://github.com/spiral/docs/blob/3.14/docs/en/cookbook/user-authentication.md#2025-04-20_snippet_4\n\nLANGUAGE: PHP\nCODE:\n```\nnamespace App\\Endpoint\\Web;\n\nuse App\\Filters\\LoginRequest;\nuse App\\Repository\\UserRepository;\nuse Spiral\\Auth\\AuthScope;\nuse Spiral\\Auth\\TokenStorageInterface;\nuse Spiral\\Router\\Annotation\\Route;\n\nclass LoginController\n{\n    public function __construct(\n        private readonly UserRepository $users,\n        private readonly AuthScope $auth,\n        private readonly TokenStorageInterface $tokens\n    ) {\n    }\n\n    #[Route(route: '/login', name: 'login.post', methods: ['POST'])]\n    public function login(LoginRequest $request)\n    {\n        // application specific login logic\n        $user = $this->users->findByUsername($request->username);\n\n        if (\n            $user === null\n            ||\n            !$user->verifyPassword($request->password)\n        ) {\n            // Invalid credentials ...\n        }\n        \n        // If credentials are valid, we can log the user in\n        \n        $this->auth->start(\n            $this->authTokens->create(['userID' => $user->id])\n        );\n        \n        // Send success response ...\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Interface Binding Example\nDESCRIPTION: Shows how to bind an interface to a concrete implementation in the container.\nSOURCE: https://github.com/spiral/docs/blob/3.14/docs/en/container/overview.md#2025-04-20_snippet_4\n\nLANGUAGE: php\nCODE:\n```\n$container->bind(SomeInterface::class, SomeClass::class);\n```\n\n----------------------------------------\n\nTITLE: Creating a Form with Various Input Types in Spiral Framework\nDESCRIPTION: This snippet demonstrates how to create a form with various input types including text inputs, password fields, checkboxes, select dropdowns, and radio buttons. It also shows how to add a submit button and wrap the form for ajax submission.\nSOURCE: https://github.com/spiral/docs/blob/3.14/docs/en/keeper/components.md#2025-04-20_snippet_18\n\nLANGUAGE: xhtml\nCODE:\n```\n<form:wrapper action=\"/\" method=\"PUT\">\n    <form:input name=\"firstName\" label=\"First Name\" value=\"\" size=\"6\" required=\"true\"/>\n    <form:input name=\"lastName\" label=\"Last Name\" value=\"\" size=\"6\" required=\"true\"/>\n    <form:input name=\"email\" label=\"Email\" value=\"\" required=\"true\"/>\n\n    <form:input type=\"password\" name=\"password\" label=\"New Password\" size=\"6\" required=\"true\"/>\n    <form:input type=\"password\" name=\"confirmPassword\" label=\"Confirm Password\" size=\"6\"/>\n\n    <form:label label=\"User Roles\" name=\"roles\" required=\"true\">\n        @foreach(['admin'=>'Admin', 'super-admin'=>'Super Admin'] as $role => $label)\n        <form:checkbox id=\"role-{{ $role }}\" name=\"roles[]\" value=\"{{ $role }}\" label=\"{{$label}}\"/>\n        @endforeach\n    </form:label>\n\n    <form:select\n            label=\"Select Something\"\n            values=\"{{ [1 => 'First', 2 => 'Second', 3 => 'Third'] }}\"\n            value=\"2\"\n            placeholder=\"Select Value\"\n    />\n\n    <form:radio-group\n            name=\"radios\"\n            values=\"{{ [1 => 'First', 2 => 'Second', 3 => 'Third'] }}\"\n            value=\"2\"\n    />\n\n    <form:button label=\"Create\"/>\n</form:wrapper>\n```\n\n----------------------------------------\n\nTITLE: RESTful Route Configuration\nDESCRIPTION: Setting up a RESTful route that maps HTTP methods to controller actions.\nSOURCE: https://github.com/spiral/docs/blob/3.14/docs/en/http/routing.md#2025-04-20_snippet_49\n\nLANGUAGE: php\nCODE:\n```\n$router->setRoute('user', new Route(\n    '/user/<id:\\d+>',\n    new Controller(UserController::class, Controller::RESTFUL),\n    ['action' => 'user']\n));\n```\n\n----------------------------------------\n\nTITLE: Initializing DataGrid with JavaScript in Spiral Framework\nDESCRIPTION: This snippet demonstrates how to initialize a DataGrid component using JavaScript in Spiral Framework. It includes custom column definitions, renderers, and action buttons with confirmation dialogs.\nSOURCE: https://github.com/spiral/docs/blob/3.14/docs/en/keeper/components.md#2025-04-20_snippet_16\n\nLANGUAGE: xhtml\nCODE:\n```\n<div class=\"sf-table\">\n    <div class=\"js-sf-datagrid\">\n        @declare(syntax=off)\n        <script type=\"text/javascript\" role=\"sf-options\">\n            (function () {\n                return {\n                    \"id\": \"custom\",\n                    \"url\": \"/keeper/users/list\",\n                    \"namespace\": \"custom\",\n                    \"method\": \"GET\",\n                    \"ui\": {\n                        \"headerCellClassName\": {\"actions\": \"text-right\"},\n                        \"cellClassName\": {\"actions\": \"text-right py-2\", \"created\": \"text-nowrap\"}\n                    },\n                    \"paginator\": {\"limitOptions\": [10, 20, 50, 100]},\n                    \"sort\": \"created\",\n                    \"columns\": [{\"id\": \"name\", \"title\": \"Name\", \"sortDir\": \"asc\"}, {\"id\": \"actions2\", \"title\": \" \"}, {\n                        \"id\": \"email\",\n                        \"title\": \"Email\",\n                        \"sortDir\": \"asc\"\n                    }, {\"id\": \"created\", \"title\": \"Created At\", \"sortDir\": \"desc\"}, {\n                        \"id\": \"roles\",\n                        \"title\": \"Roles\",\n                        \"sortDir\": null\n                    }, {\"id\": \"id\", \"title\": \"ID\", \"sortDir\": null}, {\"id\": \"actions\", \"title\": \" \"}],\n                    \"selectable\": {\n                        \"type\": \"multiple\",\n                        \"id\": \"id\"\n                    },\n                    \"renderers\": {\n                        \"cells\": {\n                            \"name\": {\n                                \"name\": \"link\",\n                                \"arguments\": {\n                                    \"title\": \"\",\n                                    \"body\": \"{{firstName}}&nbsp;{{lastName}}\",\n                                    \"href\": \"\\/keeper\\/users\\/{{id}}\"\n                                }\n                            },\n                            \"email\": {\n                                \"name\": \"link\",\n                                \"arguments\": {\"title\": \"\", \"body\": \"{{email}}\", \"href\": \"mailto:{{email}}\"}\n                            },\n                            \"created\": {\"name\": \"dateFormat\", \"arguments\": [\"LLL dd, yyyy HH:mm\"]},\n                            \"roles\": {\"name\": \"roles\", \"arguments\": []},\n                            \"id\": {\"name\": \"template\", \"arguments\": [\"{{id}}\"]},\n                            \"actions\": {\n                                \"name\": \"actions\",\n                                \"arguments\": {\n                                    \"kind\": \"\",\n                                    \"size\": \"sm\",\n                                    \"className\": \"\",\n                                    \"icon\": \"cog\",\n                                    \"label\": \"Actions\",\n                                    \"actions\": [{\n                                        \"type\": \"href\",\n                                        \"url\": \"\\/keeper\\/users\\/{{id}}\",\n                                        \"label\": \"Edit\",\n                                        \"target\": null,\n                                        \"icon\": \"edit\",\n                                        \"template\": \"\"\n                                    }, {\n                                        \"type\": \"action\",\n                                        \"url\": \"\\/keeper\\/users\\/{{id}}\",\n                                        \"method\": \"DELETE\",\n                                        \"label\": \"Delete\",\n                                        \"icon\": \"trash\",\n                                        \"template\": \"<span class=\\\"text-danger\\\"><i class=\\\"fa fw fa-trash\\\"><\\/i>&nbsp;&nbsp; Delete<\\/span>\",\n                                        \"condition\": null,\n                                        \"data\": [],\n                                        \"refresh\": true,\n                                        \"confirm\": {\n                                            \"body\": \"Are you sure to delete this entry?\",\n                                            \"title\": \"Confirmation Required\",\n                                            \"confirm\": \"Delete\",\n                                            \"confirmKind\": \"danger\",\n                                            \"cancel\": \"Cancel\"\n                                        },\n                                        \"toastSuccess\": \"<i class=\\\"fa fa-check-circle\\\"><\\/i>&nbsp; {{message}}\\n              \",\n                                        \"toastError\": \"<i class=\\\"fa fa-exclamation\\\"><\\/i>&nbsp; {{error}}\\n              \"\n                                    }]\n                                }\n                            },\n                            \"actions2\": {\n                                \"name\": \"actions\",\n                                \"arguments\": {\n                                    \"kind\": \"\",\n                                    \"size\": \"sm\",\n                                    \"className\": \"\",\n                                    \"icon\": \"cog\",\n                                    \"label\": \"Actions 2\",\n                                    \"actions\": [{\n                                        \"type\": \"href\",\n                                        \"url\": \"\\/keeper\\/users\\/{{id}}\",\n                                        \"label\": \"Edit\",\n                                        \"target\": null,\n                                        \"icon\": \"edit\",\n                                        \"template\": \"\"\n                                    }, {\n                                        \"type\": \"action\",\n                                        \"url\": \"\\/keeper\\/users\\/{{id}}\",\n                                        \"method\": \"DELETE\",\n                                        \"label\": \"Delete\",\n                                        \"icon\": \"trash\",\n                                        \"template\": \"<span class=\\\"text-danger\\\"><i class=\\\"fa fw fa-trash\\\"><\\/i>&nbsp;&nbsp; Delete<\\/span>\",\n                                        \"condition\": null,\n                                        \"data\": [],\n                                        \"refresh\": true,\n                                        \"confirm\": {\n                                            \"body\": \"Are you sure to delete this entry?\",\n                                            \"title\": \"Confirmation Required\",\n                                            \"confirm\": \"Delete\",\n                                            \"confirmKind\": \"danger\",\n                                            \"cancel\": \"Cancel\"\n                                        },\n                                        \"toastSuccess\": \"<i class=\\\"fa fa-check-circle\\\"><\\/i>&nbsp; {{message}}\\n              \",\n                                        \"toastError\": \"<i class=\\\"fa fa-exclamation\\\"><\\/i>&nbsp; {{error}}\\n              \"\n                                    }]\n                                }\n                            }\n                        },\n                        \"actions\": {\n                            \"delete\": {\n                                renderAs: \"<div class='btn btn-danger'>Delete</div>\",\n                                onClick: function (state, grid) {\n                                    console.log(state, grid);\n                                }\n                            }\n                        }\n                    }\n                };\n            });\n        </script>\n        @declare(syntax=on)\n    </div>\n</div>\n```\n\n----------------------------------------\n\nTITLE: Arguments Validation Example\nDESCRIPTION: Shows how to validate function arguments using the resolver.\nSOURCE: https://github.com/spiral/docs/blob/3.14/docs/en/container/overview.md#2025-04-20_snippet_12\n\nLANGUAGE: php\nCODE:\n```\n$resolver = $this->container->get(ResolverInterface::class);\n$function = static fn(int $bar) => $bar;\n\n$resolver->validateArguments(new \\ReflectionFunction($function), [42]);\n```\n\n----------------------------------------\n\nTITLE: Implementing Slow Query Detector Interceptor\nDESCRIPTION: Creates an interceptor that detects and logs slow database queries by measuring query execution time.\nSOURCE: https://github.com/spiral/docs/blob/3.14/docs/en/framework/interceptors.md#2025-04-20_snippet_3\n\nLANGUAGE: php\nCODE:\n```\nnamespace App\\Integration\\Database\\Interceptor;\n\nuse Psr\\Log\\LoggerInterface;\nuse Spiral\\Core\\CoreInterceptorInterface;\nuse Spiral\\Core\\CoreInterface;\n\nclass SlowQueryDetectorInterceptor implements CoreInterceptorInterface\n{\n    public function __construct(\n        private readonly LoggerInterface $logger\n    ) {\n    }\n\n    public function process(string $database, string $sql, array $parameters, CoreInterface $core): mixed\n    {\n        $startTime = \\microtime(true);\n\n        $result = $core->callAction($database, $sql, $parameters);\n        \n        $elapsed = \\microtime(true) - $startTime;\n\n        if ($elapsed > 0.1) {\n            $this->logger->warning(\n                'Slow query detected',\n                [\n                    'database' => $database,\n                    'sql' => $sql,\n                    'parameters' => $parameters,\n                    'elapsed' => $elapsed\n                ]\n            );\n        }\n\n        return $result;\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Guard Interceptor for RBAC Authorization in PHP\nDESCRIPTION: Setting up the Guard Interceptor for role-based access control in the application bootloader. This example defines roles and permission rules for different controller actions.\nSOURCE: https://github.com/spiral/docs/blob/3.14/docs/en/http/interceptors.md#2025-04-20_snippet_4\n\nLANGUAGE: php\nCODE:\n```\nnamespace App\\Application\\Bootloader;\n\nuse Spiral\\Bootloader\\DomainBootloader;\nuse Spiral\\Core\\CoreInterface;\nuse Spiral\\Domain\\GuardInterceptor;\nuse Spiral\\Security\\Actor\\Guest;\nuse Spiral\\Security\\PermissionsInterface;\nuse Spiral\\Security\\Rule;\n\nclass AppBootloader extends DomainBootloader\n{\n    protected const SINGLETONS = [\n        CoreInterface::class => [self::class, 'domainCore']\n    ];\n\n    protected const INTERCEPTORS = [\n        // ...\n        GuardInterceptor::class\n    ];\n\n    public function boot(PermissionsInterface $rbac): void\n    {\n        $rbac->addRole(Guest::ROLE);\n        $rbac->associate(Guest::ROLE, 'home.*', Rule\\AllowRule::class);\n        $rbac->associate(Guest::ROLE, 'home.about', Rule\\ForbidRule::class);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Website Status Monitoring Workflow in PHP\nDESCRIPTION: Detailed implementation of a Temporal workflow for monitoring website status, including downtime tracking and notification logic.\nSOURCE: https://github.com/spiral/docs/blob/3.14/docs/en/temporal/usage.md#2025-04-20_snippet_2\n\nLANGUAGE: php\nCODE:\n```\nnamespace App\\Endpoint\\Temporal\\Workflow;\n\nuse Carbon\\CarbonInterval;\nuse Temporal\\Workflow\\WorkflowInterface;\nuse Temporal\\Workflow\\WorkflowMethod;\nuse Temporal\\Workflow;\n\n#[WorkflowInterface]\nclass WebsiteStatusWorkflow\n{\n    private bool $isDownNotified = false;\n    private bool $isRecoveryNotified = false;\n    private int $downTime = 0;\n\n    #[WorkflowMethod]\n    public function handle(string $url, int $intervalInMinutes = 5)\n    {\n        while (true) {\n            // here we will ping the website and get the status\n            $status = ...\n\n            if ($status === false) {\n                // Send notification only once when the website goes down\n                if (!$this->isDownNotified) {\n                    // here we will send a notification about downtime\n                }\n\n                $this->isDownNotified = true;\n                // increase downtime by 5 minutes\n                $this->downTime += $intervalInMinutes;\n            } else {\n                // Send notification only once when the website goes up\n                if (!$this->isRecoveryNotified) {\n                    // here we will send a notification about recovery with total downtime\n                }\n\n                $this->downTime = 0;\n                $this->isRecoveryNotified = true;\n            }\n\n            // wait for 5 minutes\n            yield Workflow::timer(CarbonInterval::minutes($intervalInMinutes));\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Custom Event Dispatcher in Spiral\nDESCRIPTION: Examples of creating custom ListenerRegistry and EventDispatcher classes, along with a Bootloader to register them in the application container. This demonstrates how to implement a custom event dispatching system in Spiral.\nSOURCE: https://github.com/spiral/docs/blob/3.14/docs/zh-CN/advanced/events.md#2025-04-20_snippet_5\n\nLANGUAGE: php\nCODE:\n```\nnamespace App\\EventDispatcher;\n\nuse Spiral\\Events\\ListenerRegistryInterface;\nuse Psr\\EventDispatcher\\ListenerProviderInterface;\n\nfinal class ListenerRegistry implements ListenerRegistryInterface, ListenerProviderInterface\n{\n    public function addListener(string $event, callable $listener, int $priority = 0): void\n    {\n        // ...\n    }\n\n    public function getListenersForEvent(object $event): iterable\n    {\n        // ...\n    }\n}\n```\n\nLANGUAGE: php\nCODE:\n```\nnamespace App\\EventDispatcher;\n\nuse Psr\\EventDispatcher\\EventDispatcherInterface;\n\nfinal class EventDispatcher implements EventDispatcherInterface\n{\n    public function dispatch(object $event)\n    {\n        // ...\n    }\n}\n```\n\nLANGUAGE: php\nCODE:\n```\nnamespace App\\EventDispatcher\\Bootloader;\n\nuse App\\EventDispatcher\\ListenerRegistry;\nuse App\\EventDispatcher\\EventDispatcher;\n\nuse Psr\\EventDispatcher\\EventDispatcherInterface;\nuse Psr\\EventDispatcher\\ListenerProviderInterface;\nuse Spiral\\Boot\\Bootloader\\Bootloader;\nuse Spiral\\Events\\Bootloader\\EventsBootloader;\nuse Spiral\\Events\\ListenerRegistryInterface;\n\nfinal class EventBootloader extends Bootloader\n{\n    protected const DEPENDENCIES = [\n        EventsBootloader::class\n    ];\n\n    protected const SINGLETONS = [\n        ListenerRegistryInterface::class => ListenerRegistry::class,\n        ListenerRegistry::class => ListenerRegistry::class,\n        ListenerProviderInterface::class => ListenerRegistry::class,\n        EventDispatcherInterface::class => EventDispatcher::class,\n        EventDispatcher::class => EventDispatcherInterface::class\n    ];\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing a Container Injector for CacheInterface in Spiral PHP\nDESCRIPTION: This snippet demonstrates how to create a combined bootloader and injector that can instantiate different cache implementations based on the injection context. The injector implements InjectorInterface and binds itself to handle CacheInterface instantiation.\nSOURCE: https://github.com/spiral/docs/blob/3.14/docs/en/container/injectors.md#2025-04-20_snippet_0\n\nLANGUAGE: php\nCODE:\n```\nnamespace App\\Application\\Bootloader;\n\nuse Psr\\Container\\ContainerInterface;\nuse Psr\\SimpleCache\\CacheInterface;\nuse Spiral\\Boot\\Bootloader\\Bootloader;\nuse Spiral\\Core\\BinderInterface;\nuse Spiral\\Core\\Container\\InjectorInterface;\n\nclass CacheBootloader extends Bootloader implements InjectorInterface\n{\n    public function __construct(\n        private readonly ContainerInterface $container,\n    ) {}\n\n    public function boot(BinderInterface $binder): void\n    {\n        // Register injectable class\n        $binder->bindInjector(CacheInterface::class, self::class);\n    }\n\n    public function createInjection(\\ReflectionClass $class, string $context = null): CacheInterface\n    {\n        return match ($context) {\n            'redis' => new RedisCache(...),\n            'memcached' => new MemcachedCache(...),\n            default => new ArrayCache(...),\n        };\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining User Entity with Repository\nDESCRIPTION: Example of creating a User entity class with a repository annotation using Cycle ORM\nSOURCE: https://github.com/spiral/docs/blob/3.14/docs/en/basics/orm.md#2025-04-20_snippet_6\n\nLANGUAGE: php\nCODE:\n```\nuse Cycle\\Annotated\\Annotation as Cycle;\n\n#[Cycle\\Entity(repository: UserRepository::class)]\nclass User\n{\n    // ...\n}\n```\n\n----------------------------------------\n\nTITLE: Using Custom Bootloader Configuration in Kernel\nDESCRIPTION: Example of applying custom bootloader configuration directly in the Kernel class for different worker types.\nSOURCE: https://github.com/spiral/docs/blob/3.14/docs/en/framework/bootloaders.md#2025-04-20_snippet_9\n\nLANGUAGE: php\nCODE:\n```\nnamespace App\\Application;\n\nuse Spiral\\Framework\\Kernel;\n\nclass Kernel extends Kernel\n{\n    public function defineBootloaders(): array\n    {\n        return [\n            HttpBootloader::class => new TargetRRWorker(['http']),\n            RoutesBootloader::class => new TargetRRWorker(['http']),\n\n            GrpcBootloader::class => new TargetRRWorker(['grpc']),\n\n            TemporalBootloader::class => new TargetRRWorker(['temporal']),\n            \n            // Other bootloaders...\n        ];\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Authentication Middleware Groups in Spiral\nDESCRIPTION: Implementation of middleware groups for different authentication methods including basic auth, API token auth, and JWT auth in the RoutesBootloader.\nSOURCE: https://github.com/spiral/docs/blob/3.14/docs/en/security/authentication.md#2025-04-20_snippet_14\n\nLANGUAGE: php\nCODE:\n```\nnamespace App\\Application\\Bootloader;\n\nuse Spiral\\Auth\\Middleware\\AuthMiddleware;\nuse Spiral\\Auth\\Middleware\\AuthTransportMiddleware;\nuse Spiral\\Auth\\Middleware\\AuthTransportWithStorageMiddleware;\nuse Spiral\\Core\\Container\\Autowire;\n\nfinal class RoutesBootloader extends BaseRoutesBootloader\n{\n    protected function middlewareGroups(): array\n    {\n        return [\n            'web' => [\n                AuthMiddleware::class,\n            ],\n            'api' => [\n                new Autowire(AuthTransportMiddleware::class, ['transportName' => 'header']),\n            ],\n            'api_jwt' => [\n                new Autowire(AuthTransportWithStorageMiddleware::class, ['transportName' => 'header', 'storage' => 'jwt']),\n            ],\n        ];\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Using a Custom Counter Function with GridFactory\nDESCRIPTION: Example of how to use a custom counter function with the GridFactory to implement complex counting logic. This allows for customized item counting based on the selected data.\nSOURCE: https://github.com/spiral/docs/blob/3.14/docs/en/component/data-grid.md#2025-04-20_snippet_13\n\nLANGUAGE: php\nCODE:\n```\n/** @var Spiral\\DataGrid\\GridFactory $factory */\n$factory = $factory->withCounter(static function ($select): int {\n    return count($select) * 2;\n});\n```\n\n----------------------------------------\n\nTITLE: Login Request Filter Implementation\nDESCRIPTION: Filter class to validate login form data with username and password validation rules.\nSOURCE: https://github.com/spiral/docs/blob/3.14/docs/en/cookbook/simple-chat.md#2025-04-20_snippet_31\n\nLANGUAGE: php\nCODE:\n```\nnamespace App\\Entrypoint\\Web\\Filter;\n\nuse Spiral\\Filters\\Attribute\\Input\\Post;\nuse Spiral\\Filters\\Model\\Filter;\nuse Spiral\\Filters\\Model\\FilterDefinitionInterface;\nuse Spiral\\Filters\\Model\\HasFilterDefinition;\nuse Spiral\\Validator\\FilterDefinition;\n\nfinal class LoginRequest extends Filter implements HasFilterDefinition\n{\n    #[Post]\n    public string $username;\n    #[Post]\n    public string $password;\n\n    public function filterDefinition(): FilterDefinitionInterface\n    {\n        return new FilterDefinition([\n            'username' => ['notEmpty', 'string'],\n            'password' => ['notEmpty', 'string'],\n        ]);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: View Rendering Controller Method\nDESCRIPTION: Controller method showing how to render a view file using ViewsInterface without specifying file extension.\nSOURCE: https://github.com/spiral/docs/blob/3.14/docs/en/views/plain.md#2025-04-20_snippet_1\n\nLANGUAGE: php\nCODE:\n```\npublic function index(ViewsInterface $views): string\n{\n    return $views->render('test'); // no need to specify the extension\n}\n```\n\n----------------------------------------\n\nTITLE: Wildcard Action Route Configuration\nDESCRIPTION: Setting up a route that can handle multiple actions in the same controller with optional parameters.\nSOURCE: https://github.com/spiral/docs/blob/3.14/docs/en/http/routing.md#2025-04-20_snippet_44\n\nLANGUAGE: php\nCODE:\n```\n$router->setRoute(\n    'home',\n    new Route('/<action>[/<id>]', new Action(HomeController::class, ['index', 'user']))\n);\n```\n\n----------------------------------------\n\nTITLE: Configuring Routes in RoutesBootloader\nDESCRIPTION: Example of configuring application routes using a bootloader's boot method.\nSOURCE: https://github.com/spiral/docs/blob/3.14/docs/en/framework/bootloaders.md#2025-04-20_snippet_15\n\nLANGUAGE: php\nCODE:\n```\nnamespace App\\Application\\Bootloader;\n\nuse Spiral\\Router\\RouterInterface;\nuse Spiral\\Router\\Target\\Controller;\nuse Spiral\\Router\\Route;\n\nfinal class RoutesBootloader extends Bootloader \n{\n    public function boot(RouterInterface $router): void\n    {\n        $router->setRoute(\n            'my-route',\n            new Route('/<action>', new Controller(MyController::class))\n        );\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Complete DataGrid Configuration Example\nDESCRIPTION: Provides a comprehensive example of a ui:grid declaration with all available configuration options including custom namespace, HTTP method, pagination options, and action button customization.\nSOURCE: https://github.com/spiral/docs/blob/3.14/docs/en/keeper/components.md#2025-04-20_snippet_3\n\nLANGUAGE: xhtml\nCODE:\n```\n<ui:grid\n        url=\"/some/url\"\n        method=\"GET\"\n        id=\"my-grid\"\n        namespace=\"foo\"\n        capture-forms=\"['form1','form2']\"\n        capture-filters=\"['filter1','filter2']\"\n        paginate-options=\"[10,20,30]\"\n\n        actions-title=\"\"\n        actions-label=\"Actions\"\n        actions-kind=\"\"\n        actions-icon=\"cog\"\n        actions-size=\"sm\"\n        actions-class=\"\"\n        actions-cell-class=\"\">\n\n</ui:grid>\n```\n\n----------------------------------------\n\nTITLE: Broadcasting Messages to Multiple Centrifugo Channels in PHP\nDESCRIPTION: Demonstrates the use of the broadcast method to send the same message to multiple Centrifugo channels simultaneously. This method is useful for efficiently distributing data to multiple channels at once.\nSOURCE: https://github.com/spiral/docs/blob/3.14/docs/en/websockets/api.md#2025-04-20_snippet_2\n\nLANGUAGE: PHP\nCODE:\n```\npublic function handle(User $user, Channel ...$channels): void\n{\n    $this->api->broadcast(\n      \\array_map(fn (Channel $channel) => $channel->getName(), $channels),\n      'Hello world!'\n    );\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring GRPC for Spiral Applications\nDESCRIPTION: PHP configuration file that defines paths for generated files, service base paths, binary location, and services to be compiled.\nSOURCE: https://github.com/spiral/docs/blob/3.14/docs/en/grpc/configuration.md#2025-04-20_snippet_5\n\nLANGUAGE: php\nCODE:\n```\nreturn [\n    /**\n     * The path where generated DTO (Data Transfer Object) files will be stored.\n     */\n    'generatedPath' => directory('root') . '/GRPC',\n\n    /**\n     * The root dir for all proto files, where imports will be searched.\n     */\n    'servicesBasePath' => directory('root') . '/proto',\n\n    /**\n     * The path to the protoc-gen-php-grpc library.\n     */\n    'binaryPath' => directory('root').'/bin/protoc-gen-php-grpc',\n\n    /**\n     * An array of paths to proto files that should be compiled into PHP by the grpc:generate console command.\n     */\n    'services' => [\n        //directory('root').'proto/calculator.proto',\n    ],\n];\n```\n\n----------------------------------------\n\nTITLE: Registering League Event Bootloader Using Method\nDESCRIPTION: Code example showing how to register both Events and League Event bootloaders using the defineBootloaders method.\nSOURCE: https://github.com/spiral/docs/blob/3.14/docs/en/advanced/events.md#2025-04-20_snippet_3\n\nLANGUAGE: php\nCODE:\n```\npublic function defineBootloaders(): array\n{\n    return [\n        // ...\n        \\Spiral\\Events\\Bootloader\\EventsBootloader::class,\n        \\Spiral\\League\\Event\\Bootloader\\EventBootloader::class,\n        // ...\n    ];\n}\n```\n\n----------------------------------------\n\nTITLE: Route with Parameter to Controller Action\nDESCRIPTION: Example of configuring a route with a required numeric parameter that gets injected into the controller action.\nSOURCE: https://github.com/spiral/docs/blob/3.14/docs/en/http/routing.md#2025-04-20_snippet_43\n\nLANGUAGE: php\nCODE:\n```\n$router->setRoute(\n    'user',\n    new Route('/user/<id:\\d+>', new Action(HomeController::class, 'user'))\n);\n```\n\n----------------------------------------\n\nTITLE: Basic Job Handler Implementation\nDESCRIPTION: Example of a basic job handler class extending JobHandler with an invoke method\nSOURCE: https://github.com/spiral/docs/blob/3.14/docs/en/queue/jobs.md#2025-04-20_snippet_1\n\nLANGUAGE: php\nCODE:\n```\nnamespace App\\Endpoint\\Job;\n\nuse Spiral\\Queue\\JobHandler;\n\nfinal class SampleJob extends JobHandler\n{\n    public function invoke(string $id, array $payload, array $headers): void\n    {\n        // Do something with service\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Handling Errors in GRPC Service Methods\nDESCRIPTION: PHP code demonstrating error handling in GRPC service methods. This example shows input validation and throwing appropriate GRPC exceptions with error messages.\nSOURCE: https://github.com/spiral/docs/blob/3.14/docs/en/grpc/service.md#2025-04-20_snippet_10\n\nLANGUAGE: php\nCODE:\n```\nuse Spiral\\RoadRunner\\GRPC;\nuse GRPC\\Pinger\\PingRequest;\nuse GRPC\\Pinger\\PingResponse;\n\npublic function ping(GRPC\\ContextInterface $ctx, PingRequest $in): PingResponse\n{\n    if ($in->getUrl() === '') {\n        throw new GRPC\\ServiceException('URL is empty');\n    }\n    \n    if (!\\filter_var($url, FILTER_VALIDATE_URL)) {\n        throw new GRPC\\ServiceException(\\sprintf('URL \"%s\" is invalid', $url));\n    }\n\n    return new PingResponse([\n        'status_code' => $this->httpClient->get($in->getUrl())->getStatusCode(),\n    ]);\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing a Console Command in Spiral Framework (PHP)\nDESCRIPTION: This code snippet demonstrates the implementation of a console command in Spiral Framework. The command outputs the current date to the console with a configurable date format.\nSOURCE: https://github.com/spiral/docs/blob/3.14/docs/en/start/cli-basics.md#2025-04-20_snippet_1\n\nLANGUAGE: php\nCODE:\n```\nnamespace App\\Endpoint\\Console;\n\nuse Spiral\\Console\\Attribute\\Argument;\nuse Spiral\\Console\\Attribute\\AsCommand;\nuse Spiral\\Console\\Attribute\\Option;\nuse Spiral\\Console\\Attribute\\Question;\nuse Spiral\\Console\\Command;\n\n#[AsCommand(name: 'current:date')]\nfinal class CurrentDateCommand extends Command\n{\n    #[Argument(description: 'Date format')]\n    public string $format = 'Y-m-d';\n\n    public function __invoke(): int\n    {\n        $this->writeln(\\date($this->format));\n\n        return self::SUCCESS;\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Data Sanitization with Setter Attributes in PHP\nDESCRIPTION: Demonstrates how to use Spiral\\Filters\\Attribute\\Setter for data sanitization. Shows implementation of filter functions like trim, intval and custom sanitization methods for incoming data.\nSOURCE: https://github.com/spiral/docs/blob/3.14/docs/en/filters/filter.md#2025-04-20_snippet_19\n\nLANGUAGE: php\nCODE:\n```\nnamespace App\\Endpoint\\Web\\Filter;\n\nuse Spiral\\Filters\\Attribute\\Setter;\nuse Spiral\\Filters\\Attribute\\Input\\Query;\nuse Spiral\\Filters\\Model\\Filter;\n\nclass UserProfileFilter extends Filter\n{\n    #[Post]\n    #[Setter(filter: 'trim')]\n    public string $login;\n\n    #[Post]\n    #[Setter(filter: 'intval')]\n    public int $age;\n\n    #[Post]\n    #[Setter(filter: [self::class, 'sanitizeContent'])]\n    public string $bio = '';\n    \n    protected static function sanitizeContent(string $content): string\n    {\n        return \\strip_tags($content);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Using Pipeline Interceptor in PHP Controller\nDESCRIPTION: Demonstrates how to use the Pipeline attribute to customize interceptors for a specific controller action.\nSOURCE: https://github.com/spiral/docs/blob/3.14/docs/en/http/interceptors.md#2025-04-20_snippet_19\n\nLANGUAGE: php\nCODE:\n```\n#[Route(route: '/show/<user:int>/email/<email:int>', name: 'emails')]\n#[Pipeline(pipeline: [CycleInterceptor::class, GuardInterceptor::class], skipNext: true)]\npublic function email(User $user, Email $email, EmailFilter $filter): string\n{\n    $filter->setContext(compact('user', 'email'));\n    if (!$filter->isValid()) {\n        throw new ForbiddenException('Email doesn\\'t belong to a user.');\n    }\n    //...\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Filter Validation in Spiral Framework\nDESCRIPTION: Example of implementing validation rules in a filter class using FilterDefinition and validation rules.\nSOURCE: https://github.com/spiral/docs/blob/3.14/docs/en/filters/filter.md#2025-04-20_snippet_21\n\nLANGUAGE: php\nCODE:\n```\nnamespace App\\Endpoint\\Web\\Filter;\n\nuse Spiral\\Filters\\Attribute\\Input\\Post;\nuse Spiral\\Filters\\Model\\Filter;\nuse Spiral\\Filters\\Model\\FilterDefinitionInterface;\nuse Spiral\\Filters\\Model\\HasFilterDefinition;\nuse Spiral\\Validator\\FilterDefinition;\n\nclass MyFilter extends Filter implements HasFilterDefinition\n{\n    #[Post]\n    public string $name;\n    \n    public function filterDefinition(): FilterDefinitionInterface\n    {\n        return new FilterDefinition([\n            'name' => ['string', 'required']\n        ]);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Generating and Executing Database Migrations in Spiral\nDESCRIPTION: Commands for generating a migration based on entity definitions and executing it to create the database schema. The -v flag provides verbose output for better debugging.\nSOURCE: https://github.com/spiral/docs/blob/3.14/docs/en/cookbook/quick-start.md#2025-04-20_snippet_21\n\nLANGUAGE: terminal\nCODE:\n```\nphp app.php cycle:migrate -v\n```\n\nLANGUAGE: terminal\nCODE:\n```\nphp app.php migrate -vv\n```\n\n----------------------------------------\n\nTITLE: Queue Configuration File\nDESCRIPTION: Complete configuration file for queue system in Spiral, defining default connection, aliases, available connections, job handlers registry, and driver aliases.\nSOURCE: https://github.com/spiral/docs/blob/3.14/docs/en/queue/configuration.md#2025-04-20_snippet_2\n\nLANGUAGE: php\nCODE:\n```\nreturn [\n    /** Default queue connection name */\n    'default' => env('QUEUE_CONNECTION', 'sync'),\n\n    /** Aliases for queue connections, if you want to use domain specific queues */\n    'aliases' => [\n        // 'mailQueue' => 'null',\n        // 'ratingQueue' => 'sync',\n    ],\n    \n    'connections' => [\n        'sync' => [\n            // Job will be handled immediately without queueing\n            'driver' => 'sync',\n        ],\n        'null' => [\n            // Do nothing\n            'driver' => 'null',\n        ],\n    ],\n    \n    'registry' => [\n        'handlers' => [\n            'sample::job' => App\\Jobs\\SampleJob::class\n        ],\n        'serializers' => [\n            ObjectJob::class => 'json',\n        ]\n    ],\n    \n    'driverAliases' => [\n        'sync' => \\Spiral\\Queue\\Driver\\SyncDriver::class,\n        'null' => \\Spiral\\Queue\\Driver\\NullDriver::class,\n    ],\n];\n```\n\n----------------------------------------\n\nTITLE: Implementing GRPC Service in PHP\nDESCRIPTION: PHP class that implements the generated GRPC service interface. This example shows implementation of the Pinger service with dependency injection for an HTTP client to perform the ping operation.\nSOURCE: https://github.com/spiral/docs/blob/3.14/docs/en/grpc/service.md#2025-04-20_snippet_5\n\nLANGUAGE: php\nCODE:\n```\nnamespace App\\Endpoint\\GRPC;\n\nuse Spiral\\RoadRunner\\GRPC;\nuse GRPC\\Pinger\\PingerInterface;\nuse GRPC\\Pinger\\PingRequest;\nuse GRPC\\Pinger\\PingResponse;\n\nfinal class Pinger implements PingerInterface\n{\n    public function __construct(\n        private readonly HttpClientInterface $httpClient\n    ) {\n    }\n    \n    public function ping(GRPC\\ContextInterface $ctx, PingRequest $in): PingResponse\n    {\n        $statusCode = $this->httpClient->get($in->getUrl())->getStatusCode();\n    \n        return new PingResponse([\n            'status_code' => $statusCode\n        ]);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Get Method with Dependency Injection in PostController for Spiral Framework\nDESCRIPTION: This code snippet demonstrates an alternative implementation of the get method in PostController using dependency injection for the Post entity, enabled by the CycleInterceptor.\nSOURCE: https://github.com/spiral/docs/blob/3.14/docs/en/cookbook/quick-start.md#2025-04-20_snippet_36\n\nLANGUAGE: php\nCODE:\n```\nuse App\\Database\\Post;\nuse Spiral\\Prototype\\Traits\\PrototypeTrait;\nuse Spiral\\Router\\Annotation\\Route;\n\nfinal class PostController\n{\n    use PrototypeTrait;\n\n    #[Route(route: '/api/post/<post:\\d+>', name: 'post.get', methods: 'GET')]  \n    public function get(Post $post): array\n    {\n        return [\n            'post' => [\n                'id'      => $post->id,\n                'author'  => [\n                    'id'   => $post->author->id,\n                    'name' => $post->author->name\n                ],\n                'title'   => $post->title,\n                'content' => $post->content,\n            ]\n        ];\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Uploading Files Using Default Bucket in PHP\nDESCRIPTION: Example of uploading files using the default bucket in a Spiral controller. Demonstrates handling of uploaded files from a request.\nSOURCE: https://github.com/spiral/docs/blob/3.14/docs/en/advanced/storage.md#2025-04-20_snippet_10\n\nLANGUAGE: php\nCODE:\n```\nuse Spiral\\Storage\\BucketInterface;\nuse Psr\\Http\\Message\\ServerRequestInterface;\n\nclass UploadingController\n{\n    public function upload(ServerRequestInterface $request, BucketInterface $bucket): string\n    {\n        /** @var \\Psr\\Http\\Message\\UploadedFileInterface $file */\n        foreach ($request->getUploadedFiles() as $i => $file) {\n            $bucket->write(\"file-{$i}.txt\", $file->getStream());\n        }\n\n        return \\count($request->getUploadedFiles()) . ' files uploaded';\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a Custom Protocol Buffer Serializer\nDESCRIPTION: Implementation of a custom serializer that uses Google Protocol Buffers for serialization and deserialization, demonstrating how to create a serializer that implements the SerializerInterface.\nSOURCE: https://github.com/spiral/docs/blob/3.14/docs/en/advanced/serializer.md#2025-04-20_snippet_5\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\ndeclare(strict_types=1);\n\nnamespace App\\Application\\Serializer;\n\nuse Google\\Protobuf\\Internal\\Message;\nuse Spiral\\Serializer\\SerializerInterface;\n\nfinal class ProtoSerializer implements SerializerInterface\n{\n    public function serialize(mixed $payload): string|\\Stringable\n    {\n        \\assert($payload instanceof Message);\n\n        return $payload->serializeToString();\n    }\n\n    public function unserialize(\\Stringable|string $payload, object|string|null $type = null): mixed\n    {\n        \\assert(\n            $type !== null\n            && \\class_exists($type)\n            && \\is_a($type, Message::class, true),\n        );\n\n        $object = new $type();\n        $object->mergeFromString((string)$payload);\n\n        return $object;\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Error Handler Interceptor for WebSocket Services in PHP\nDESCRIPTION: Exception handling interceptor that catches and reports errors in WebSocket services. Implements CoreInterceptorInterface to provide centralized error handling functionality.\nSOURCE: https://github.com/spiral/docs/blob/3.14/docs/en/websockets/interceptors.md#2025-04-20_snippet_2\n\nLANGUAGE: php\nCODE:\n```\nnamespace App\\Entrypoint\\Centrifugo\\Interceptor;\n\nuse Spiral\\Core\\CoreInterceptorInterface;\nuse Spiral\\Core\\CoreInterface;\nuse Spiral\\Exceptions\\ExceptionReporterInterface;\nuse Spiral\\RoadRunner\\GRPC\\Exception\\GRPCException;\nuse Spiral\\RoadRunner\\GRPC\\Exception\\GRPCExceptionInterface;\n\nfinal class ExceptionHandlerInterceptor implements CoreInterceptorInterface\n{\n    public function __construct(\n        private readonly ExceptionReporterInterface $reporter\n    ) {\n    }\n\n    public function process(string $controller, string $action, array $parameters, CoreInterface $core): mixed\n    {\n        try {\n            \\assert($parameters['request'] instanceof RequestInterface);\n\n            return $core->callAction($controller, $action, $parameters);\n        } catch (\\Throwable $e) {\n            $this->reporter->report($e);\n\n            $request->error($e->getCode(), $e->getMessage());\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Post Repository Method in Spiral\nDESCRIPTION: Repository method to fetch a post with its comments and related author information, including comment sorting.\nSOURCE: https://github.com/spiral/docs/blob/3.14/docs/en/cookbook/quick-start.md#2025-04-20_snippet_40\n\nLANGUAGE: php\nCODE:\n```\npublic function findOneWithComments(string $id): ?Post\n{\n    return $this\n        ->select()\n        ->wherePK($id)\n        ->load('author')\n        ->load(\n            'comments.author',\n            [\n                'load' => function (Select\\QueryBuilder $q) {\n                    // last comments at top\n                    $q->orderBy('id', 'DESC');\n                }\n            ]\n        )\n        ->fetchOne();\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing JWTTokenStorage in PHP for Spiral Framework\nDESCRIPTION: This code snippet demonstrates how to implement a JWTTokenStorage class that conforms to Spiral's TokenStorageInterface. It handles token creation, loading, and deletion using JWT.\nSOURCE: https://github.com/spiral/docs/blob/3.14/docs/en/cookbook/user-authentication.md#2025-04-20_snippet_0\n\nLANGUAGE: PHP\nCODE:\n```\nnamespace App\\Auth\\Storage;\n\nuse Firebase\\JWT\\JWT;\nuse Firebase\\JWT\\Key;\nuse Firebase\\JWT\\ExpiredException;\nuse Spiral\\Auth\\TokenInterface;\nuse Spiral\\Auth\\TokenStorageInterface;\n\nfinal class JWTTokenStorage implements TokenStorageInterface\n{\n    /** @var callable */\n    private $time;\n\n    public function __construct(\n        private readonly TokenEncoder $tokenEncoder,\n        private readonly string $secret,\n        private string $algorithm = 'HS256',\n        private readonly string $expiresAt = '+30 days',\n        callable $time = null\n    ) {\n        $this->tokenEncoder = $tokenEncoder;\n        $this->expiresAt = $expiresAt;\n        $this->time = $time ?? static function (string $offset): \\DateTimeImmutable {\n            return new \\DateTimeImmutable($offset);\n        };\n    }\n\n    public function load(string $id): ?TokenInterface\n    {\n        try {\n            $token = (array) JWT::decode($id, new Key($this->secret, $this->algorithm));\n        } catch (ExpiredException $exception) {\n            throw $exception;\n        } catch (\\Throwable $exception) {\n            return null;\n        }\n\n        if (\n            false === isset($token['data'])\n            || false === isset($token['iat'])\n            || false === isset($token['exp'])\n        ) {\n            return null;\n        }\n\n        return new Token(\n            $id,\n            $token,\n            (array) $token['data'],\n            (new \\DateTimeImmutable())->setTimestamp($token['iat']),\n            (new \\DateTimeImmutable())->setTimestamp($token['exp'])\n        );\n    }\n\n    public function create(array $payload, \\DateTimeInterface $expiresAt = null): TokenInterface\n    {\n        $issuedAt = ($this->time)('now');\n        $expiresAt = $expiresAt ?? ($this->time)($this->expiresAt);\n        $token = [\n            'iat' => $issuedAt->getTimestamp(),\n            'exp' => $expiresAt->getTimestamp(),\n            'data' => $payload,\n        ];\n\n        return new Token(\n            JWT::encode($token,$this->secret,$this->algorithm),\n            $token,\n            $payload,\n            $issuedAt,\n            $expiresAt\n        );\n    }\n\n    public function delete(TokenInterface $token): void \n    {\n        // We don't need to do anything here since JWT tokens are self-contained.\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Creating FilterDefinition Class with Validation Support in PHP\nDESCRIPTION: Implementation of a custom filter definition class that supports validation. This class implements FilterDefinitionInterface and ShouldBeValidated, providing methods to define validation rules and mapping schema.\nSOURCE: https://github.com/spiral/docs/blob/3.14/docs/en/filters/configuration.md#2025-04-20_snippet_6\n\nLANGUAGE: php\nCODE:\n```\nnamespace App\\Filter;\n\nuse Spiral\\Filters\\Model\\FilterDefinitionInterface;\nuse Spiral\\Filters\\Model\\ShouldBeValidated;\n\nfinal class MyFilterDefinition implements FilterDefinitionInterface, ShouldBeValidated\n{\n    public function __construct(\n        private readonly array $validationRules = [],\n        private readonly array $mappingSchema = []\n    ) {\n    }\n\n    public function validationRules(): array\n    {\n        return $this->validationRules;\n    }\n\n    public function mappingSchema(): array\n    {\n        return $this->mappingSchema;\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Binding Interface to Closure in PHP\nDESCRIPTION: Demonstrates how to bind an interface to a closure for automatic class configuration.\nSOURCE: https://github.com/spiral/docs/blob/3.14/docs/en/container/configuration.md#2025-04-20_snippet_4\n\nLANGUAGE: php\nCODE:\n```\nuse Spiral\\Core\\BinderInterface;\n\npublic function boot(BinderInterface $binder): void\n{\n    $binder->bindSingleton(\n        UserRepositoryInterface::class, \n        static fn() => new CycleUserRepository(table: users)\n    );\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Custom Exception Handler in PHP\nDESCRIPTION: Example of creating a custom exception handler class that extends Spiral's ExceptionHandler. Shows basic implementation structure.\nSOURCE: https://github.com/spiral/docs/blob/3.14/docs/en/basics/errors.md#2025-04-20_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\ndeclare(strict_types=1);\n\nnamespace App\\Application\\Exception;\n\nuse Spiral\\Exceptions\\ExceptionHandler;\nuse Throwable;\n\nfinal class Handler extends ExceptionHandler\n{\n    // ...\n}\n```\n\n----------------------------------------\n\nTITLE: Defining MemoryInterface for Static Data Storage in PHP\nDESCRIPTION: Interface definition for MemoryInterface used to store computation results. It includes methods for loading and saving data in long-term memory cache.\nSOURCE: https://github.com/spiral/docs/blob/3.14/docs/zh-CN/advanced/memory.md#2025-04-20_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n/**\n * 长期内存缓存。使用此存储来记住您的计算结果，不要在此处存储用户或非静态数据 (!)。\n */\ninterface MemoryInterface\n{\n    /**\n     * 从长期内存缓存中读取数据。必须返回与保存值完全相同的值，或者为 null。目前的惯例允许存储可序列化（var_export-able）的数据。\n     *\n     * @param string $section 不区分大小写。\n     * @return string|array|null\n     */\n    public function loadData(string $section);\n\n    /**\n     * 将数据放入长期内存缓存。不允许内部引用或闭包。目前的惯例允许存储可序列化（var_export-able）的数据。\n     *\n     * @param string       $section 不区分大小写。\n     * @param string|array $data\n     */\n    public function saveData(string $section, $data);\n}\n```\n\n----------------------------------------\n\nTITLE: Setting default validator using ValidationBootloader\nDESCRIPTION: This code shows how to configure the default validator programmatically using the `setDefaultValidator` method of the `ValidationBootloader`. This provides a dynamic way to set the default validator.\nSOURCE: https://github.com/spiral/docs/blob/3.14/docs/zh-CN/validation/factory.md#2025-04-20_snippet_3\n\nLANGUAGE: php\nCODE:\n```\n```php app/src/Application/Bootloader/AppBootloader.php\nnamespace App\\Application\\Bootloader;\n\nuse Spiral\\Boot\\Bootloader\\Bootloader;\nuse Spiral\\Validation\\Bootloader\\ValidationBootloader;\n\nfinal class AppBootloader extends Bootloader\n{\n    public function boot(ValidationBootloader $validation): void\n    {\n        $validation->setDefaultValidator('my-validator');\n    }\n}\n```\n```\n\n----------------------------------------\n\nTITLE: Creating a Controller with Multiple Actions using Spiral CLI\nDESCRIPTION: Command to create a User controller with index, show, create, update, and delete actions. This generates a controller class with PSR-compliant HTTP response methods and route annotations.\nSOURCE: https://github.com/spiral/docs/blob/3.14/docs/en/basics/scaffolding.md#2025-04-20_snippet_13\n\nLANGUAGE: bash\nCODE:\n```\nphp app.php create:controller User \\\n      -a index \\\n      -a show \\\n      -a create \\\n      -a update \\\n      -a delete\n```\n\n----------------------------------------\n\nTITLE: Configuring Middleware Groups in RoutesBootloader\nDESCRIPTION: Example showing how to organize middleware into groups that can be applied to specific route sets.\nSOURCE: https://github.com/spiral/docs/blob/3.14/docs/en/http/middleware.md#2025-04-20_snippet_4\n\nLANGUAGE: php\nCODE:\n```\nnamespace App\\Application\\Bootloader;\n\nuse App\\Middleware\\LocaleSelector;\nuse Spiral\\Auth\\Middleware\\AuthTransportMiddleware;\nuse Spiral\\Bootloader\\Http\\RoutesBootloader as BaseRoutesBootloader;\nuse Spiral\\Cookies\\Middleware\\CookiesMiddleware;\nuse Spiral\\Core\\Container\\Autowire;\nuse Spiral\\Csrf\\Middleware\\CsrfMiddleware;\nuse Spiral\\Debug\\StateCollector\\HttpCollector;\nuse Spiral\\Http\\Middleware\\ErrorHandlerMiddleware;\nuse Spiral\\Http\\Middleware\\JsonPayloadMiddleware;\nuse Spiral\\Session\\Middleware\\SessionMiddleware;\nuse App\\Endpoint\\Web\\Middleware\\MyMiddleware;\n\nfinal class RoutesBootloader extends BaseRoutesBootloader\n{\n    // ...\n\n    protected function middlewareGroups(): array\n    {\n        return [\n            'web' => [\n                CookiesMiddleware::class,\n                SessionMiddleware::class,\n                CsrfMiddleware::class,\n                MyMiddleware::class,\n                // new Autowire(AuthTransportMiddleware::class, ['transportName' => 'cookie'])\n            ],\n            'api' => [\n                // new Autowire(AuthTransportMiddleware::class, ['transportName' => 'header'])\n            ],\n        ];\n    }\n    \n    // ...\n}\n```\n\n----------------------------------------\n\nTITLE: Activating AnnotatedRoutesBootloader in Kernel using Constant\nDESCRIPTION: Activates the AnnotatedRoutesBootloader in the application kernel using a protected constant.\nSOURCE: https://github.com/spiral/docs/blob/3.14/docs/en/http/routing.md#2025-04-20_snippet_2\n\nLANGUAGE: php\nCODE:\n```\nprotected const LOAD = [\n    // ...\n    \\Spiral\\Router\\Bootloader\\AnnotatedRoutesBootloader::class,\n    // ...\n];\n```\n\n----------------------------------------\n\nTITLE: Using InputInterface and InputManager in Spiral Controller\nDESCRIPTION: Demonstrates how to use both InputInterface and InputManager to access request data in a Spiral controller method.\nSOURCE: https://github.com/spiral/docs/blob/3.14/docs/en/http/request-response.md#2025-04-20_snippet_5\n\nLANGUAGE: php\nCODE:\n```\nuse Spiral\\Filters\\InputInterface;\nuse Spiral\\Http\\Request\\InputManager;\n\npublic function index(InputInterface $inputSource, InputManager $inputManager): void\n{\n    dump($inputManager->query('name'));\n    dump($inputSource->getValue('query', 'name'));\n\n    dump($inputManager->path());\n    dump($inputSource->getValue('path'));\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Fallback Route in PHP\nDESCRIPTION: Sets up a fallback route to handle requests that don't match any predefined routes. This example uses a callable function to return a 'Page not found' message.\nSOURCE: https://github.com/spiral/docs/blob/3.14/docs/en/http/routing.md#2025-04-20_snippet_21\n\nLANGUAGE: php\nCODE:\n```\nuse Psr\\Http\\Message\\ResponseInterface;\nuse Psr\\Http\\Message\\ServerRequestInterface;\n\n$routes->default('/<path:.*>')\n    ->callable(function (ServerRequestInterface $r, ResponseInterface $rsp) {\n        return 'Page not found!';\n    });\n```\n\n----------------------------------------\n\nTITLE: Setting Default Route in PHP\nDESCRIPTION: Shows how to set a default/fallback route that will be invoked after all other routes have been checked.\nSOURCE: https://github.com/spiral/docs/blob/3.14/docs/en/http/routing.md#2025-04-20_snippet_40\n\nLANGUAGE: php\nCODE:\n```\n$router->setRoute(\n    'home',\n    new Route('/<param>',\n        function (ServerRequestInterface $request, ResponseInterface $response): array {\n            return $request->getAttribute('route')->getMatches();\n        }\n    )\n);\n\n$router->setDefault(new Route('/', fn (): string => 'default'));\n```\n\n----------------------------------------\n\nTITLE: Implementing Inflector in Spiral Container (PHP)\nDESCRIPTION: Shows how to use an Inflector to manipulate objects after creation in the container. This example sets a logger for objects implementing LoggerAwareInterface.\nSOURCE: https://github.com/spiral/docs/blob/3.14/docs/en/container/configuration.md#2025-04-20_snippet_19\n\nLANGUAGE: php\nCODE:\n```\nuse Spiral\\Core\\Config\\Inflector;\n\n$container->bind(LoggerAwareInterface::class, new Inflector(\n    inflector: static function (LoggerAwareInterface $obj, LoggerInterface $logger): LoggerAwareInterface {\n        $obj->setLogger($logger);\n\n        return $obj;\n    }\n));\n```\n\n----------------------------------------\n\nTITLE: Creating a Select Component with Complex Props in Stempler\nDESCRIPTION: Demonstrates how to create a select component that uses complex props injection in Stempler. The component allows for dynamic generation of select options based on injected values.\nSOURCE: https://github.com/spiral/docs/blob/3.14/docs/en/views/stempler.md#2025-04-20_snippet_46\n\nLANGUAGE: html\nCODE:\n```\n<select name=\"${name}\">\n    @foreach(inject('values', []) as $key => $label)\n    <option value=\"{{ $key }}\">{{ $label }}</option>\n    @endforeach\n</select>\n```\n\n----------------------------------------\n\nTITLE: Implementing Custom SQL Collector for Sentry Reporting\nDESCRIPTION: Demonstrates the creation of a custom collector to gather SQL query information and send it to Sentry, implementing the StateCollectorInterface.\nSOURCE: https://github.com/spiral/docs/blob/3.14/docs/en/basics/errors.md#2025-04-20_snippet_23\n\nLANGUAGE: php\nCODE:\n```\nnamespace App\\Application\\Debug\\Collector;\n\nuse Spiral\\Logger\\Event\\LogEvent;\nuse Spiral\\Debug\\StateCollectorInterface;\n\nfinal class SqlCollector implements StateCollectorInterface\n{\n    public function __construct(\n        private readonly Database $db\n    ) {\n    }\n\n    public function collect(\\Spiral\\Debug\\StateInterface $state): void\n    {\n       foreach($this->db->getQueries() as $query) {\n            $state->addLogEvent(new LogEvent(\n                time: $query->getTime(),\n                channel: 'sql',\n                level: 'info',\n                message: $query->getQuery(),\n                context: $query->getParameters()\n            ));\n       }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Using Filters in Controller Methods\nDESCRIPTION: Example of requesting a filter as a dependency in a controller method where the filter will be automatically instantiated.\nSOURCE: https://github.com/spiral/docs/blob/3.14/docs/en/filters/filter.md#2025-04-20_snippet_4\n\nLANGUAGE: php\nCODE:\n```\nnamespace App\\Endpoint\\Web;\n\nuse App\\Endpoint\\Web\\Filter\\MyFilter;\n\nclass HomeController\n{\n    public function index(MyFilter $filter): void\n    {\n        dump($filter);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Application Entry Point Implementation\nDESCRIPTION: Example of the application entry point that initializes and runs the kernel with appropriate dispatcher.\nSOURCE: https://github.com/spiral/docs/blob/3.14/docs/en/framework/dispatcher.md#2025-04-20_snippet_3\n\nLANGUAGE: php\nCODE:\n```\nuse App\\Application\\Kernel;\n\n\\mb_internal_encoding('UTF-8');\n\\error_reporting(E_ALL | E_STRICT ^ E_DEPRECATED);\n\\ini_set('display_errors', 'stderr');\n\nrequire __DIR__ . '/vendor/autoload.php';\n$app = Kernel::create(\n    directories: ['root' => __DIR__],\n)->run();\n\n$code = (int)$app->serve();  // <========== Will run the appropriate dispatcher based on the current environment\nexit($code);\n```\n\n----------------------------------------\n\nTITLE: Implementing Authenticated Centrifugo Connection Requests in PHP\nDESCRIPTION: An example of a Centrifugo connection handler that only accepts authenticated requests. It demonstrates token validation, user authentication, and conditional channel subscription based on user roles.\nSOURCE: https://github.com/spiral/docs/blob/3.14/docs/en/websockets/services.md#2025-04-20_snippet_3\n\nLANGUAGE: php\nCODE:\n```\nnamespace App\\Endpoint\\Centrifugo;\n\nuse RoadRunner\\Centrifugo\\Request\\Connect;\nuse RoadRunner\\Centrifugo\\Payload\\ConnectResponse;\nuse RoadRunner\\Centrifugo\\Request\\RequestInterface;\nuse Spiral\\RoadRunnerBridge\\Centrifugo\\ServiceInterface;\nuse Spiral\\Auth\\TokenStorageInterface;\n\nclass ConnectService implements ServiceInterface\n{\n    public function __construct(\n        private readonly TokenStorageInterface $tokenStorage,\n    ) {\n    }\n    \n    /** @param Connect $request */\n    public function handle(RequestInterface $request): void\n    {\n        try {\n            $userId = null;\n            \n            // Authenticate user with a given token from the connection request\n            $authToken = $request->getData()['authToken'] ?? null;\n            if ($authToken && $token = $this->tokenStorage->load($authToken)) {\n                $userId = $token->getPayload()['userID'] ?? null;\n            }\n            \n            // You can also disconnect connection\n            if (!$userId) {\n                $request->disconnect('403', 'Connection is not allowed.');\n                return;\n            }\n            \n            $user = $this->users->getById($userId);\n            $roles = $user->getRoles();\n        \n            $request->respond(\n                new ConnectResponse(\n                    user: (string) $userId,\n                    channels: [\n                        (string) new UserChannel($user->uuid), // user-{uuid}\n                        (string) new ChatChannel($user->uuid), // chat-{uuid}\n                        'public',\n                    ],\n                )\n            );\n        } catch (\\Throwable $e) {\n            $request->error($e->getCode(), $e->getMessage());\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Generating and Running Migrations After Adding Relations\nDESCRIPTION: Commands for generating and executing migrations after defining entity relations. These commands update the database schema to include foreign keys and relationship tables.\nSOURCE: https://github.com/spiral/docs/blob/3.14/docs/en/cookbook/quick-start.md#2025-04-20_snippet_24\n\nLANGUAGE: terminal\nCODE:\n```\nphp app.php cycle:migrate -v\nphp app.php migrate -vv\n```\n\n----------------------------------------\n\nTITLE: Binding Interface to Implementation using BinderInterface in PHP\nDESCRIPTION: Demonstrates how to bind an interface to a concrete implementation using the BinderInterface within a bootloader.\nSOURCE: https://github.com/spiral/docs/blob/3.14/docs/en/container/configuration.md#2025-04-20_snippet_0\n\nLANGUAGE: php\nCODE:\n```\nuse Spiral\\Core\\BinderInterface;\n\npublic function boot(BinderInterface $binder): void\n{\n    $binder->bind(\n        UserRepositoryInterface::class, \n        CycleUserRepository::class\n    );\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a Nested Filter with Profile and Address\nDESCRIPTION: Demonstrates how to implement a parent filter (ProfileFilter) that contains a nested child filter (AddressFilter) using the NestedFilter attribute.\nSOURCE: https://github.com/spiral/docs/blob/3.14/docs/en/filters/composite.md#2025-04-20_snippet_1\n\nLANGUAGE: php\nCODE:\n```\nnamespace App\\Endpoint\\Web\\Filter;\n\nuse Spiral\\Filters\\Attribute\\Input\\Post;\nuse Spiral\\Filters\\Attribute\\NestedFilter;\nuse Spiral\\Filters\\Model\\Filter;\nuse Spiral\\Filters\\Model\\FilterDefinitionInterface;\nuse Spiral\\Filters\\Model\\HasFilterDefinition;\nuse Spiral\\Validator\\FilterDefinition;\n\nclass ProfileFilter extends Filter implements HasFilterDefinition\n{\n    #[Post]\n    public string $name;\n\n    #[NestedFilter(class: AddressFilter::class)]\n    public AddressFilter $address;\n\n    public function filterDefinition(): FilterDefinitionInterface\n    {\n        return new FilterDefinition(validationRules: [\n            'name' => ['required', 'string'],\n        ]);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Domain Interceptors in PHP Bootloader\nDESCRIPTION: Shows how to set up domain interceptors, including the PipelineInterceptor, in a Spiral Framework bootloader.\nSOURCE: https://github.com/spiral/docs/blob/3.14/docs/en/http/interceptors.md#2025-04-20_snippet_18\n\nLANGUAGE: php\nCODE:\n```\nnamespace App\\Application\\Bootloader;\n\nuse Spiral\\Bootloader\\DomainBootloader;\nuse Spiral\\Core\\CoreInterface;\nuse Spiral\\DataGrid\\Interceptor\\GridInterceptor;\nuse Spiral\\Domain;\nuse Spiral\\Cycle\\Interceptor\\CycleInterceptor;\n\nclass AppBootloader extends DomainBootloader\n{\n    protected const SINGLETONS = [\n        CoreInterface::class => [self::class, 'domainCore']\n    ];\n\n    protected const INTERCEPTORS = [\n        CycleInterceptor::class,\n        Domain\\PipelineInterceptor::class, //all annotated interceptors go here\n        Domain\\GuardInterceptor::class,\n        Domain\\FilterInterceptor::class,\n        GridInterceptor::class,\n    ];\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring MySQL Database Connection\nDESCRIPTION: PHP configuration for setting up a MySQL database connection using environment variables.\nSOURCE: https://github.com/spiral/docs/blob/3.14/docs/en/cookbook/quick-start.md#2025-04-20_snippet_5\n\nLANGUAGE: php\nCODE:\n```\nuse Cycle\\Database\\Config;\n\nreturn [\n    'default'   => 'default',\n    'databases' => [\n        'default' => ['driver' => 'mysql'],\n    ],\n    'drivers'   => [\n        'mysql' => new Config\\MySQLDriverConfig(\n            connection: new Config\\MySQL\\TcpConnectionConfig(\n                database: env('DB_NAME'),\n                host: env('DB_HOST'),\n                port: (int) env('DB_PORT', 3306),\n                user: env('DB_USER'),\n                password: env('DB_PASSWORD')\n            ),\n            queryCache: true\n        ),\n    ]\n];\n```\n\n----------------------------------------\n\nTITLE: Binding Interface to Implementation using BinderInterface\nDESCRIPTION: Demonstrates how to bind an interface to a concrete implementation using the BinderInterface in a bootloader.\nSOURCE: https://github.com/spiral/docs/blob/3.14/docs/zh-CN/container/configuration.md#2025-04-20_snippet_0\n\nLANGUAGE: php\nCODE:\n```\nuse Spiral\\Core\\BinderInterface;\n\npublic function boot(BinderInterface $binder): void\n{\n    $binder->bind(\n        UserRepositoryInterface::class, \n        CycleUserRepository::class\n    );\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Exception Handler in Application Bootstrap\nDESCRIPTION: Shows how to specify a custom exception handler class in the application's bootstrap file.\nSOURCE: https://github.com/spiral/docs/blob/3.14/docs/en/basics/errors.md#2025-04-20_snippet_1\n\nLANGUAGE: php\nCODE:\n```\nuse App\\Application\\Kernel;\nuse App\\Application\\Exception\\Handler;\n\n// ...\n\n$app = Kernel::create(\n    directories: ['root' => __DIR__],\n    exceptionHandler: Handler::class, // <--\n)->run();\n\n// ...\n```\n\n----------------------------------------\n\nTITLE: Defining User Entity Factory in Spiral\nDESCRIPTION: Example of creating a User entity factory that extends AbstractFactory. Implements entity creation, definition generation using Faker, and entity construction logic.\nSOURCE: https://github.com/spiral/docs/blob/3.14/docs/en/testing/database.md#2025-04-20_snippet_9\n\nLANGUAGE: php\nCODE:\n```\nnamespace Database\\Factory;\n\nuse App\\Entity\\User;\nuse Spiral\\DatabaseSeeder\\Factory\\AbstractFactory;\nuse Spiral\\DatabaseSeeder\\Factory\\FactoryInterface;\n\n/**\n * @implements FactoryInterface<User>\n */\nfinal class UserFactory extends AbstractFactory\n{\n    public function entity(): string\n    {\n        return User::class;\n    }\n    \n    public function makeEntity(array $definition): User\n    {\n        return new User(\n            username: $definition['username']\n        );\n    }\n\n    public function definition(): array\n    {\n        return [\n            'firstName' => $this->faker->firstName(),\n            'lastName' => $this->faker->lastName(),\n            'birthday' => \\DateTimeImmutable::createFromMutable($this->faker->dateTime()),\n            'comments' => CommentFactory::new()->times(3)->make(),\n        ];\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Associating Middleware with a Route in PHP\nDESCRIPTION: Demonstrates how to associate route-specific middleware using the withMiddleware method. The example includes a ParamWatcher middleware that checks route parameters.\nSOURCE: https://github.com/spiral/docs/blob/3.14/docs/en/http/routing.md#2025-04-20_snippet_37\n\nLANGUAGE: php\nCODE:\n```\nnamespace App\\Bootloader;\n\nuse App\\Middleware\\ParamWatcher;\nuse Psr\\Http\\Message\\ResponseInterface;\nuse Psr\\Http\\Message\\ServerRequestInterface;\nuse Spiral\\Boot\\Bootloader\\Bootloader;\nuse Spiral\\Router\\Route;\nuse Spiral\\Router\\RouterInterface;\n\nclass RoutesBootloader extends Bootloader\n{\n    public function boot(RouterInterface $router): void\n    {\n        $route = new Route('/<param>', function (ServerRequestInterface $request, ResponseInterface $response): array {\n            return $request->getAttribute('route')->getMatches();\n        });\n\n        $router->setRoute('home', $route->withMiddleware(\n            ParamWatcher::class\n        ));\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing DoctrineCollectionWriter for Spiral Data Grid\nDESCRIPTION: Example implementation of a custom writer for Doctrine Collections that handles sorting and filtering specifications. This class implements WriterInterface to transform collection data based on user-defined specifications.\nSOURCE: https://github.com/spiral/docs/blob/3.14/docs/en/component/data-grid.md#2025-04-20_snippet_11\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\ndeclare(strict_types=1);\n\nnamespace App\\Application\\Schema;\n\nuse Doctrine\\Common\\Collections\\Collection;\nuse Doctrine\\Common\\Collections\\Criteria;\nuse Doctrine\\Common\\Collections\\Expr\\Comparison;\nuse Spiral\\DataGrid\\Compiler;\nuse Spiral\\DataGrid\\Specification\\Filter\\Equals;\nuse Spiral\\DataGrid\\Specification\\Filter\\Like;\nuse Spiral\\DataGrid\\Specification\\Sorter\\AbstractSorter;\nuse Spiral\\DataGrid\\SpecificationInterface;\nuse Spiral\\DataGrid\\WriterInterface;\n\nfinal class DoctrineCollectionWriter implements WriterInterface\n{\n    public function write(mixed $source, SpecificationInterface $specification, Compiler $compiler): mixed\n    {\n        // If the data isn't in a collection, just return it as is.\n        if (!$source instanceof Collection) {\n            return $source;\n        }\n\n        // Prepare a set of rules to change the data.\n        $criteria = null;\n\n        // If the change is about sorting.\n        if ($specification instanceof AbstractSorter) {\n            $orders = [];\n            foreach ($specification->getExpressions() as $field) {\n                $orders[$field] = ($specification->getValue() === AbstractSorter::ASC)\n                    ? Criteria::ASC\n                    : Criteria::DESC;\n            }\n\n            if ($orders !== []) {\n                $criteria = (new Criteria())->orderBy($orders);\n            }\n        // If the change is about matching exact values.\n        } elseif ($specification instanceof Equals) {\n            $expr = new Comparison($specification->getExpression(), Comparison::EQ, $specification->getValue());\n            $criteria = (new Criteria())->where($expr);\n        // If the change is about checking if data contains certain text.\n        } elseif ($specification instanceof Like) {\n            $criteria = new Criteria(\n                Criteria::expr()->contains($specification->getExpression(), $specification->getValue())\n            );\n        } else {\n            // ... and so on.\n            return null;\n        }\n\n        // Apply the changes if there are any.\n        if ($criteria !== null) {\n            $source = $source->matching($criteria)->getValues();\n        }\n\n        return $source;\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing User Subscription Workflow with Temporal in PHP\nDESCRIPTION: This PHP class demonstrates a long-running process for managing user subscriptions using Temporal. It handles welcome emails, trial periods, monthly charges, and subscription cancellations. The workflow utilizes Temporal's timer functionality for scheduling periodic tasks.\nSOURCE: https://github.com/spiral/docs/blob/3.14/docs/en/cookbook/simple-queue-system.md#2025-04-20_snippet_25\n\nLANGUAGE: php\nCODE:\n```\n<?php\n/**\n * This file is part of Temporal package.\n *\n * For the full copyright and license information, please view the LICENSE\n * file that was distributed with this source code.\n */\ndeclare(strict_types=1);\n\nnamespace Temporal\\Samples\\Subscription;\n\nuse Carbon\\CarbonInterval;\nuse Temporal\\Activity\\ActivityOptions;\nuse Temporal\\Exception\\Failure\\CanceledFailure;\nuse Temporal\\Workflow;\n\n/**\n * Demonstrates a long-running process to represent a user subscription workflow.\n */\nclass SubscriptionWorkflow implements SubscriptionWorkflowInterface\n{\n    private $account;\n\n    // Workflow logic goes here...\n\n    public function subscribe(string $userID)\n    {\n        yield $this->account->sendWelcomeEmail($userID);\n\n        try {\n            $trialPeriod = true;\n            while (true) {\n                // Lower the period duration to observe workflow behavior\n                yield Workflow::timer(CarbonInterval::days(30));\n\n                if ($trialPeriod) {\n                    yield $this->account->sendEndOfTrialEmail($userID);\n                    $trialPeriod = false;\n                    continue;\n                }\n\n                yield $this->account->chargeMonthlyFee($userID);\n                yield $this->account->sendMonthlyChargeEmail($userID);\n            }\n        } catch (CanceledFailure $e) {\n            yield Workflow::asyncDetached(\n                function () use ($userID) {\n                    yield $this->account->processSubscriptionCancellation($userID);\n                    yield $this->account->sendSorryToSeeYouGoEmail($userID);\n                }\n            );\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Configuration Access in Service Class\nDESCRIPTION: Demonstrates how to access configuration values using ConfiguratorInterface in a service class.\nSOURCE: https://github.com/spiral/docs/blob/3.14/docs/en/framework/config.md#2025-04-20_snippet_1\n\nLANGUAGE: php\nCODE:\n```\nuse Spiral\\Config\\ConfiguratorInterface;\n\nfinal class GithubClient\n{\n    private readonly string $accessToken;\n    \n    public function __construct(ConfiguratorInterface $configurator)\n    {\n        if (!$configurator->exists('github')) {\n            throw new \\RuntimeException('Github configuration is missing');\n        }\n        \n        $config = $configurator->get('github');\n        $this->accessToken = $config['access_token'] ?? throw new \\RuntimeException('Missing access token');\n    }\n\n    // ...\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Container Bindings in GithubClientBootloader\nDESCRIPTION: Shows how to configure container bindings using the boot method to link interfaces with their implementations.\nSOURCE: https://github.com/spiral/docs/blob/3.14/docs/en/framework/bootloaders.md#2025-04-20_snippet_12\n\nLANGUAGE: php\nCODE:\n```\nnamespace App\\Application\\Bootloader;\n\n// ...\nuse Spiral\\Core\\BinderInterface;\nuse App\\Service\\Github\\GithubConfig;\nuse App\\Service\\Github\\ClientInterface;\nuse App\\Service\\Github\\Client;\n\nfinal class GithubClientBootloader extends Bootloader\n{\n    // See code above ...\n    \n    public function boot(BinderInterface $binder): void \n    {\n        $binder->bindSingleton(\n            ClientInterface::class, \n            static fn (GithubConfig $config) => new Client(\n                $config->getAccessToken(),\n                $config->getSecret(),\n            )\n        );\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Abstract Rule in Spiral Framework\nDESCRIPTION: This code demonstrates how to create an abstract rule in Spiral Framework by extending the Spiral\\Security\\Rule class. It simplifies rule creation by using method injection with the 'check' method.\nSOURCE: https://github.com/spiral/docs/blob/3.14/docs/en/security/rbac.md#2025-04-20_snippet_13\n\nLANGUAGE: php\nCODE:\n```\nnamespace App\\Security;\n\nuse Spiral\\Security\\Rule;\n\nclass SampleRule extends Rule\n{\n    public function check(string $key): bool\n    {\n        return $key === 'value';\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Enabling CSRF Firewall in Spiral Routes\nDESCRIPTION: How to add the CSRF Firewall middleware to protect routes against CSRF attacks in a Spiral application.\nSOURCE: https://github.com/spiral/docs/blob/3.14/docs/en/http/csrf.md#2025-04-20_snippet_5\n\nLANGUAGE: php\nCODE:\n```\nuse Spiral\\Csrf\\Middleware\\CsrfFirewall;\n\n'web' => [\n    CookiesMiddleware::class,\n    CsrfMiddleware::class,\n    CsrfFirewall::class,\n    // ...\n],\n```\n\n----------------------------------------\n\nTITLE: Route Usage Examples in PHP\nDESCRIPTION: Shows how to generate route URIs using both direct router calls and RouteBuilder helper class.\nSOURCE: https://github.com/spiral/docs/blob/3.14/docs/en/keeper/routing.md#2025-04-20_snippet_3\n\nLANGUAGE: php\nCODE:\n```\n/**\n * @var \\Spiral\\Router\\RouterInterface     $router \n * @var \\Spiral\\Keeper\\Helper\\RouteBuilder $routeBuilder\n */\n \n$router->uri('admin[user.create]');\n$routeBuilder->uri('admin', 'user.create');\n```\n\n----------------------------------------\n\nTITLE: Binding Singleton with Factory DTO in PHP\nDESCRIPTION: Demonstrates creating a singleton binding using the Factory DTO with the singleton option.\nSOURCE: https://github.com/spiral/docs/blob/3.14/docs/en/container/configuration.md#2025-04-20_snippet_14\n\nLANGUAGE: php\nCODE:\n```\n$container->bind('time', new Factory(\n    callable: static fn() => time(),\n    singleton: true,\n));\n```\n\n----------------------------------------\n\nTITLE: Registering Bootloaders Using Constants in Kernel Class\nDESCRIPTION: Example showing how to register bootloaders using LOAD and APP constants in the Kernel class.\nSOURCE: https://github.com/spiral/docs/blob/3.14/docs/en/framework/bootloaders.md#2025-04-20_snippet_3\n\nLANGUAGE: php\nCODE:\n```\nnamespace App\\Application;\n\nuse App\\Application\\Bootloader\\RoutesBootloader;\nuse App\\Application\\Bootloader\\LoggingBootloader;\nuse App\\Application\\Bootloader\\MyBootloader;\n\nclass Kernel extends \\Spiral\\Framework\\Kernel\n{\n    protected const LOAD = [\n        // ...\n        RoutesBootloader::class,\n    ];\n\n    protected const APP = [\n        // ...\n        LoggingBootloader::class,\n        MyBootloader::class,\n    ];\n}\n```\n\n----------------------------------------\n\nTITLE: Registering Custom Validator in ValidationBootloader\nDESCRIPTION: Bootloader implementation to register the custom validation checker and create an alias for easier usage. Shows how to integrate custom validation rules into the Spiral Framework.\nSOURCE: https://github.com/spiral/docs/blob/3.14/docs/en/validation/spiral.md#2025-04-20_snippet_20\n\nLANGUAGE: php\nCODE:\n```\nnamespace App\\Bootloader;\n\nuse App\\Security\\DBChecker;\nuse Spiral\\Boot\\Bootloader\\Bootloader;\nuse Spiral\\Validator\\Bootloader\\ValidatorBootloader;\n\nclass CheckerBootloader extends Bootloader\n{\n    public function boot(ValidationBootloader $validation): void\n    {\n        // Register custom checker\n        $validation->addChecker('db', DBChecker::class);\n        \n        // Register alias for checker\n        $validation->addAlias('db_user', 'db::user');\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Conditional Bootloader Loading with BootloadConfig Object\nDESCRIPTION: Using BootloadConfig class to conditionally load bootloaders based on environment variables.\nSOURCE: https://github.com/spiral/docs/blob/3.14/docs/en/framework/bootloaders.md#2025-04-20_snippet_4\n\nLANGUAGE: php\nCODE:\n```\nnamespace App\\Application;\n\nuse Spiral\\Boot\\Attribute\\BootloadConfig;\nuse Spiral\\Prototype\\Bootloader\\PrototypeBootloader;\n\nclass Kernel extends \\Spiral\\Framework\\Kernel\n{\n    public function defineBootloaders(): array\n    {\n        return [\n            // ...\n            PrototypeBootloader::class => new BootloadConfig(allowEnv: ['APP_ENV' => ['local', 'dev']]),\n            // ...\n        ];\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a Custom Event Class\nDESCRIPTION: Example of creating a simple event class that represents a UserWasCreated event with a User object.\nSOURCE: https://github.com/spiral/docs/blob/3.14/docs/en/advanced/events.md#2025-04-20_snippet_6\n\nLANGUAGE: php\nCODE:\n```\nnamespace App\\Event;\n\nuse App\\Database\\User;\n\nfinal class UserWasCreated\n{\n    public function __construct(\n        public readonly User $user\n    ) {\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a Complete PHP File with Namespaces and Use Statements\nDESCRIPTION: Demonstrates how to create a complete PHP file with namespace, use statements, class declaration, and strict types.\nSOURCE: https://github.com/spiral/docs/blob/3.14/docs/en/component/reactor.md#2025-04-20_snippet_23\n\nLANGUAGE: php\nCODE:\n```\n$namespace = new PhpNamespace('MyNamespace');\n$namespace\n    ->addUse(\\Countable::class)\n    ->addUse(Repository::class, 'Repo') // with alias\n    ->addUseFunction('count');\n\n$class = $namespace->addClass('MyClass');\n$class\n    ->addImplement(\\Countable::class)\n    ->addMethod('count')\n        ->setReturnType('int')\n        ->addBody('return 1;');\n\n$file = new FileDeclaration();\n$file\n    ->setStrictTypes()\n    ->addNamespace($namespace);\n\ndump((string) $file);\n```\n\n----------------------------------------\n\nTITLE: Attribute and Annotation Examples for Class and Trait\nDESCRIPTION: Examples showing how to use attributes and annotations with classes and traits.\nSOURCE: https://github.com/spiral/docs/blob/3.14/docs/en/advanced/attributes.md#2025-04-20_snippet_4\n\nLANGUAGE: php\nCODE:\n```\n#[Cycle\\Entity]\nclass Entity {\n    use TsTrait;\n}\n\n#[Behavior\\CreatedAt]\n#[Behavior\\UpdatedAt]\ntrait TsTrait\n{\n    #[Cycle\\Column(type: 'datetime')]\n    private DateTimeImmutable $createdAt;\n\n    #[Cycle\\Column(type: 'datetime', nullable: true)]\n    private ?DateTimeImmutable $updatedAt = null;\n}\n```\n\nLANGUAGE: php\nCODE:\n```\n/**\n * @Cycle\\Entity\n */\nclass Entity {\n    use TsTrait;\n}\n\n/**\n * @Behavior\\CreatedAt\n * @Behavior\\UpdatedAt\n */\ntrait TsTrait\n{\n    #[Cycle\\Column(type: 'datetime')]\n    private DateTimeImmutable $createdAt;\n\n    #[Cycle\\Column(type: 'datetime', nullable: true)]\n    private ?DateTimeImmutable $updatedAt = null;\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Filters with Spiral Validator\nDESCRIPTION: Example of creating a filter class using the Spiral validator bridge to validate form inputs including text fields and file uploads.\nSOURCE: https://github.com/spiral/docs/blob/3.14/docs/en/filters/filter.md#2025-04-20_snippet_0\n\nLANGUAGE: php\nCODE:\n```\nnamespace App\\Endpoint\\Web\\Filter;\n\nuse Spiral\\Filters\\Model\\FilterInterface;\nuse Spiral\\Filters\\Model\\HasFilterDefinition;\nuse Spiral\\Validator\\FilterDefinition;\nuse Spiral\\Filters\\Attribute\\Input\\Post;\nuse Spiral\\Filters\\Attribute\\Input\\File;\n\nclass CreatePostFilter implements FilterInterface, HasFilterDefinition\n{\n    #[Post(key: 'title')]\n    public string $title;\n    \n    #[Post(key: 'text')]\n    public string $text;\n    \n    #[File]\n    public UploadedFile $image;\n    \n    // ...\n\n    public function filterDefinition(): FilterDefinitionInterface\n    {\n        return new FilterDefinition(\n            validationRules: [\n                'title' => [\n                    ['notEmpty'],\n                    ['string::length', 50]\n                ],\n                'text' => [['notEmpty']],\n                'image' => [['image::valid'], ['file::size', 1024]]\n                \n                // ...\n            ]\n        );\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Accessing GRPC Request Metadata in Service Methods\nDESCRIPTION: PHP code demonstrating how to access metadata from a GRPC request context. This includes system properties and custom headers sent by the client.\nSOURCE: https://github.com/spiral/docs/blob/3.14/docs/en/grpc/service.md#2025-04-20_snippet_8\n\nLANGUAGE: php\nCODE:\n```\nuse Spiral\\RoadRunner\\GRPC;\nuse GRPC\\Pinger\\PingRequest;\nuse GRPC\\Pinger\\PingResponse;\n\npublic function ping(GRPC\\ContextInterface $ctx, PingRequest $in): PingResponse\n{\n    dump($ctx->getValue(':authority'));\n    dump($ctx->getValue(':peer.address'));\n    dump($ctx->getValue(':peer.auth-type'));\n\n    dump($ctx->getValue('user-agent'));\n    dump($ctx->getValue('content-type'));\n    \n    return new PingResponse([\n        'status_code' => $this->httpClient->get($in->getUrl())->getStatusCode()\n    ]);\n}\n```\n\n----------------------------------------\n\nTITLE: Invoking Console Commands within Spiral Application\nDESCRIPTION: This PHP snippet demonstrates how to invoke a console command from within a Spiral application or test using the Spiral\\Console\\Console service.\nSOURCE: https://github.com/spiral/docs/blob/3.14/docs/en/console/configuration.md#2025-04-20_snippet_3\n\nLANGUAGE: php\nCODE:\n```\nuse Spiral\\Console\\Console;\nuse Symfony\\Component\\Console\\Input\\ArrayInput;\nuse Symfony\\Component\\Console\\Output\\BufferedOutput;\n\n// ...\n\npublic function test(Console $console): string\n{\n    $input = new ArrayInput([\n        '--mount' => '.env',\n        '-p' => '{encrypt-key}'\n    ]);\n    \n    $output = new BufferedOutput();\n    \n    return $console->run('encrypt:key', $input, $output)->fetch();\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Injectable Enums in Spiral Framework\nDESCRIPTION: This example shows how to create an injectable enum in Spiral by implementing InjectableEnumInterface and using the ProvideFrom attribute. The enum can then be automatically resolved with the appropriate value based on the application environment.\nSOURCE: https://github.com/spiral/docs/blob/3.14/docs/en/container/injectors.md#2025-04-20_snippet_3\n\nLANGUAGE: php\nCODE:\n```\nuse Spiral\\Boot\\EnvironmentInterface;\nuse Spiral\\Boot\\Injector\\ProvideFrom;\nuse Spiral\\Boot\\Injector\\InjectableEnumInterface;\n\n#[ProvideFrom(method: 'detect')]\nenum AppEnvironment: string implements InjectableEnumInterface\n{\n    case Production = 'prod';\n    case Stage = 'stage';\n    case Testing = 'testing';\n    case Local = 'local';\n\n    public function isProduction(): bool\n    {\n        return $this === self::Production;\n    }\n\n    public function isTesting(): bool\n    {\n        return $this === self::Testing;\n    }\n\n    public function isLocal(): bool\n    {\n        return $this === self::Local;\n    }\n\n    public function isStage(): bool\n    {\n        return $this === self::Stage;\n    }\n\n    public static function detect(EnvironmentInterface $environment): self\n    {\n        $value = $environment->get('APP_ENV');\n\n        return \\is_string($value)\n            ? (self::tryFrom($value) ?? self::Local)\n            : self::Local;\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Custom InputBag for File Uploads in Spiral\nDESCRIPTION: Demonstrates how to create a custom InputBag class for handling file uploads using Symfony's UploadedFile in Spiral Framework.\nSOURCE: https://github.com/spiral/docs/blob/3.14/docs/en/http/request-response.md#2025-04-20_snippet_3\n\nLANGUAGE: php\nCODE:\n```\nnamespace App\\Http\\Request;\n\nuse Spiral\\Http\\Request\\InputBag;\nuse Symfony\\Bridge\\PsrHttpMessage\\Factory\\UploadedFile;\n\nfinal class FilesBag extends InputBag\n{\n    public function __construct(array $data, string $prefix = '')\n    {\n        foreach ($data as $name => $file) {\n            $data[$name] = new UploadedFile($file, fn(): string => $this->getTemporaryPath());\n        }\n\n        parent::__construct($data, $prefix);\n    }\n\n    protected function getTemporaryPath(): string\n    {\n        return \\tempnam(\\sys_get_temp_dir(), \\uniqid('symfony', true));\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Token class in PHP for Spiral Framework\nDESCRIPTION: This code snippet shows the implementation of a Token class that implements Spiral's TokenInterface. It represents a JWT token with its associated metadata.\nSOURCE: https://github.com/spiral/docs/blob/3.14/docs/en/cookbook/user-authentication.md#2025-04-20_snippet_1\n\nLANGUAGE: PHP\nCODE:\n```\nnamespace App\\Auth\\Storage;\n\nuse DateTimeInterface;\nuse Spiral\\Auth\\TokenInterface;\n\nfinal class Token implements TokenInterface\n{\n    public function __construct(\n        private readonly string $id,\n        private readonly array $token,\n        private readonly array $payload,\n        private readonly \\DateTimeImmutable $issuedAt,\n        private readonly \\DateTimeImmutable $expiresAt\n    ) {\n    }\n\n    public function getID(): string\n    {\n        return $this->id;\n    }\n\n    public function getToken(): array\n    {\n        return $this->token;\n    }\n\n    public function getPayload(): array\n    {\n        return $this->payload;\n    }\n\n    public function getIssuedAt(): \\DateTimeImmutable\n    {\n        return $this->issuedAt;\n    }\n\n    public function getExpiresAt(): DateTimeInterface\n    {\n        return $this->expiresAt;\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing LoginRequest Filter in PHP for Spiral Framework\nDESCRIPTION: This code snippet shows the implementation of a LoginRequest filter class that handles and validates login form data in Spiral Framework.\nSOURCE: https://github.com/spiral/docs/blob/3.14/docs/en/cookbook/user-authentication.md#2025-04-20_snippet_3\n\nLANGUAGE: PHP\nCODE:\n```\nnamespace App\\Filters;\n\nuse Spiral\\Filters\\Attribute\\Input\\Post;\nuse Spiral\\Filters\\Filter;\nuse Spiral\\Filters\\Model\\FilterDefinitionInterface;\nuse Spiral\\Filters\\Model\\HasFilterDefinition;\nuse Spiral\\Validator\\FilterDefinition;\n\nfinal class LoginRequest extends Filter implements HasFilterDefinition\n{\n    #[Post]\n    public string $username;\n\n    #[Post]\n    public string $password;\n\n    public function filterDefinition(): FilterDefinitionInterface\n    {\n        return new FilterDefinition(validationRules: [\n            'username' => ['required', 'string', ['string::longer', 3], ['string::shorter', 32]],\n            'password' => ['required'],\n        ]);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Compiling View Cache in Spiral PHP Console Command\nDESCRIPTION: Shows how to create a console command to compile cache versions of views. Demonstrates using LoaderInterface to list templates and ViewsInterface to compile them.\nSOURCE: https://github.com/spiral/docs/blob/3.14/docs/en/views/basics.md#2025-04-20_snippet_3\n\nLANGUAGE: php\nCODE:\n```\nnamespace App\\Endpoint\\Console;\n\nuse Spiral\\Console\\Command;\nuse Spiral\\Views\\LoaderInterface;\nuse Spiral\\Views\\ViewsInterface;\n\nclass WarmupViewsCommand extends Command\n{\n    protected const NAME = 'views:compile';\n    protected const DESCRIPTION = 'Compile all views in default namespace';\n\n    public function __invoke(LoaderInterface $loader, ViewsInterface $views): void\n    {\n        $templates = $loader->withExtension('dark.php')->list();\n        // or\n        $templates = $loader->withExtension('twig')->list(namespace: 'my-package');\n\n        foreach ($templates as $template) {\n            $views->compile($template);\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Grid Filter with Search and Form\nDESCRIPTION: Example of implementing a grid filter component with search functionality and additional filter form fields. Includes first name, last name and email input fields with validation.\nSOURCE: https://github.com/spiral/docs/blob/3.14/docs/en/keeper/components.md#2025-04-20_snippet_4\n\nLANGUAGE: xhtml\nCODE:\n```\n<ui:grid url=\"@action('users.list', inject('params', []))\" namespace=\"main\">\n    <grid:filter search=\"true\" immediate=\"300\" buttons=\"true\">\n        <form:input name=\"firstName\" label=\"First Name\" value=\"\" size=\"6\" required=\"true\"/>\n        <form:input name=\"lastName\" label=\"Last Name\" value=\"\" size=\"6\" required=\"true\"/>\n        <form:input name=\"email\" label=\"Email\" value=\"\" required=\"true\"/>\n    </grid:filter>\n</ui:grid>\n```\n\n----------------------------------------\n\nTITLE: Defining Routes using RoutingConfigurator\nDESCRIPTION: Shows how to define routes using the RoutingConfigurator in the RoutesBootloader class.\nSOURCE: https://github.com/spiral/docs/blob/3.14/docs/en/http/routing.md#2025-04-20_snippet_4\n\nLANGUAGE: php\nCODE:\n```\nnamespace App\\Application\\Bootloader;\n\nuse Spiral\\Bootloader\\Http\\RoutesBootloader as BaseRoutesBootloader;\nuse Spiral\\Router\\Loader\\Configurator\\RoutingConfigurator;\n\nfinal class RoutesBootloader extends BaseRoutesBootloader\n{\n    // ...\n \n    protected function defineRoutes(RoutingConfigurator $routes): void\n    {\n        $routes->add(name: 'news.show', pattern: '/news/<id:int>')\n            ->group('web')\n            ->methods(methods: ['GET'])\n            ->action(NewsController::class, 'show');\n            \n        ...\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Roles and Permissions in Spiral Bootloader\nDESCRIPTION: Example of configuring roles and associating permissions in a Spiral Bootloader using PermissionsInterface.\nSOURCE: https://github.com/spiral/docs/blob/3.14/docs/en/security/rbac.md#2025-04-20_snippet_6\n\nLANGUAGE: php\nCODE:\n```\nnamespace App\\Bootloader;\n\nuse Spiral\\Boot\\Bootloader\\Bootloader;\nuse Spiral\\Security\\PermissionsInterface;\n\nclass SecurityBootloader extends Bootloader\n{\n    public function boot(PermissionsInterface $rbac): void\n    {\n        $rbac->addRole('guest');\n        \n        $rbac->associate('guest', 'home.read');\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Assigning Routes to Groups Using Attributes in PHP\nDESCRIPTION: Demonstrates how to assign a route to a group using PHP attributes in a controller method.\nSOURCE: https://github.com/spiral/docs/blob/3.14/docs/en/http/routing.md#2025-04-20_snippet_24\n\nLANGUAGE: php\nCODE:\n```\n#[Route(route: '/', name: 'index', methods: 'GET', group: 'api')]  \npublic function index(): ResponseInterface\n{\n    // ...    \n}\n```\n\n----------------------------------------\n\nTITLE: Registering Custom Token Storage in a Bootloader\nDESCRIPTION: Shows how to register a custom token storage using a bootloader's init method.\nSOURCE: https://github.com/spiral/docs/blob/3.14/docs/en/security/authentication.md#2025-04-20_snippet_12\n\nLANGUAGE: php\nCODE:\n```\nuse Spiral\\Boot\\Bootloader;\nuse Spiral\\Bootloader\\Auth\\HttpAuthBootloader;\n\nfinal class AppBootloader extends Bootloader\n{\n    public function init(HttpAuthBootloader $httpAuth, JwtTokenStorage $storage): void \n    {\n        $httpAuth->addTokenStorage('jwt', $storage);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Checking Authority with Domain Entities in Spiral Framework\nDESCRIPTION: This code snippet shows how to pass domain entities as context when checking authority in Spiral Framework. It demonstrates checking if a user has permission to edit a post.\nSOURCE: https://github.com/spiral/docs/blob/3.14/docs/en/security/rbac.md#2025-04-20_snippet_11\n\nLANGUAGE: php\nCODE:\n```\nif ($this->guard->allows('post.edit', ['post' => $post])) {\n    echo 'yay';\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring GRPC Code Generation in Spiral\nDESCRIPTION: PHP configuration file that specifies paths and settings needed for generating GRPC service code from proto files. It defines the output directory, services base path, and proto files to be compiled.\nSOURCE: https://github.com/spiral/docs/blob/3.14/docs/en/grpc/service.md#2025-04-20_snippet_1\n\nLANGUAGE: php\nCODE:\n```\nreturn [\n    /**\n     * The path where generated DTO (Data Transfer Object) files will be stored.\n     */\n    'generatedPath' => directory('root') . '/generated',\n\n    /**\n     * The root dir for all proto files, where imports will be searched.\n     */\n    'servicesBasePath' => directory('root') . '/proto',\n\n    /**\n     * The path to the protoc-gen-php-grpc library.\n     */\n    'binaryPath' => directory('root').'protoc-gen-php-grpc',\n\n    /**\n     * An array of paths to proto files that should be compiled into PHP by the grpc:generate console command.\n     */\n    'services' => [\n        directory('root').'proto/pinger.proto',\n    ],\n];\n```\n\n----------------------------------------\n\nTITLE: Implementing HTTP Dispatcher in PHP\nDESCRIPTION: Example implementation of an HTTP dispatcher that handles web requests. It checks for RR_MODE environment variable to determine if it can serve HTTP requests.\nSOURCE: https://github.com/spiral/docs/blob/3.14/docs/en/framework/dispatcher.md#2025-04-20_snippet_0\n\nLANGUAGE: php\nCODE:\n```\nuse Spiral\\Boot\\EnvironmentInterface;\nuse Spiral\\Boot\\DispatcherInterface;\n\nfinal class HttpDispatcher implements DispatcherInterface\n{\n    public function __construct(\n        private readonly EnvironmentInterface $env\n    ) {\n    }\n    \n    public function canServe(): bool\n    {\n        return $this->env->get('RR_MODE') === 'http';\n    }\n    \n    public function serve(): void\n    {\n        // Handle HTTP requests\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Creating User Example\nDESCRIPTION: Example of creating a new user with password hashing using EntityManager.\nSOURCE: https://github.com/spiral/docs/blob/3.14/docs/en/security/authentication.md#2025-04-20_snippet_20\n\nLANGUAGE: php\nCODE:\n```\nuse Cycle\\ORM\\EntityManagerInterface;\n\npublic function index(EntityManagerInterface $entityManager)\n{\n    $user = new User();\n    \n    $user->name = 'Antony';\n    $user->username = 'username';\n    $user->password = \\password_hash('password', PASSWORD_DEFAULT);\n\n    $entityManager->persist($user)->run();\n}\n```\n\n----------------------------------------\n\nTITLE: Entity Resolution Interceptor Setup\nDESCRIPTION: Configuration of CycleInterceptor for automatic entity resolution in controllers\nSOURCE: https://github.com/spiral/docs/blob/3.14/docs/en/basics/orm.md#2025-04-20_snippet_11\n\nLANGUAGE: php\nCODE:\n```\nnamespace App\\Application\\Bootloader;\n\nuse Spiral\\Cycle\\Interceptor\\CycleInterceptor;\nuse Spiral\\Bootloader\\DomainBootloader;\nuse Spiral\\Core\\CoreInterface;\n\nclass AppBootloader extends DomainBootloader\n{\n    protected const SINGLETONS = [\n        CoreInterface::class => [self::class, 'domainCore']\n    ];\n\n    protected const INTERCEPTORS = [\n        CycleInterceptor::class,\n        // ...\n    ];\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Exception Handler Interceptor in PHP for GRPC Server\nDESCRIPTION: This code snippet shows how to create an exception handler interceptor for a GRPC server using Spiral Framework. It catches all exceptions and converts them to GRPC exceptions.\nSOURCE: https://github.com/spiral/docs/blob/3.14/docs/en/grpc/interceptors.md#2025-04-20_snippet_1\n\nLANGUAGE: php\nCODE:\n```\nnamespace App\\Endpoint\\GRPC\\Interceptor;\n\nuse Spiral\\Core\\CoreInterceptorInterface;\nuse Spiral\\Core\\CoreInterface;\nuse Spiral\\Exceptions\\ExceptionReporterInterface;\nuse Spiral\\RoadRunner\\GRPC\\Exception\\GRPCException;\nuse Spiral\\RoadRunner\\GRPC\\Exception\\GRPCExceptionInterface;\n\nfinal class ExceptionHandlerInterceptor implements CoreInterceptorInterface\n{\n    public function __construct(\n        private readonly ExceptionReporterInterface $reporter\n    ) {\n    }\n\n    public function process(string $controller, string $action, array $parameters, CoreInterface $core): mixed\n    {\n        try {\n            return $core->callAction($controller, $action, $parameters);\n        } catch (\\Throwable $e) {\n            $this->reporter->report($e);\n\n            if ($e instanceof GRPCExceptionInterface) {\n                throw $e;\n            }\n\n            throw new GRPCException(\n                message: $e->getMessage(),\n                previous: $e\n            );\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Filter with Casting Error Handling - PHP\nDESCRIPTION: Example of a filter using CastingErrorMessage attribute to handle type validation errors gracefully.\nSOURCE: https://github.com/spiral/docs/blob/3.14/docs/en/filters/configuration.md#2025-04-20_snippet_5\n\nLANGUAGE: php\nCODE:\n```\nnamespace App\\Endpoint\\Web\\Filter;\n\nuse Spiral\\Filters\\Attribute\\Input\\Query;\nuse Spiral\\Filters\\Model\\Filter;\nuse Spiral\\Filters\\Attribute\\CastingErrorMessage;\n\nfinal class UserFilter extends Filter\n{\n    #[Query(key: 'username')]\n    #[CastingErrorMessage('Invalid type')]\n    public string $username;\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Validation Error Handler for Console Commands in PHP\nDESCRIPTION: Example of an interceptor that handles validation exceptions and displays detailed error messages for console commands.\nSOURCE: https://github.com/spiral/docs/blob/3.14/docs/zh-CN/cookbook/console-validation.md#2025-04-20_snippet_8\n\nLANGUAGE: PHP\nCODE:\n```\nnamespace App\\Command;\n\nuse Spiral\\Console\\Command;\nuse Spiral\\Core\\CoreInterceptorInterface;\nuse Spiral\\Core\\CoreInterface;\nuse Symfony\\Component\\Console\\Output\\OutputInterface;\n\nclass HandleValidationExceptions implements CoreInterceptorInterface\n{\n    public function process(string $controller, string $action, array $parameters, CoreInterface $core): mixed\n    {\n        try {\n            return $core->callAction($controller, $action, $parameters);\n        } catch (\\Spiral\\Filters\\Exception\\ValidationException $e) {\n            $output = $parameters['output'];\n            \\assert($output instanceof OutputInterface);\n\n            $output->writeln('<fg=red>验证错误：</>');\n            foreach ($e->errors as $key => $error) {\n                $output->writeln(\\sprintf('<fg=red>%s: %s</>', $key, $error));\n            }\n\n            return Command::FAILURE;\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Manually Invoking HTTP Core in Spiral Framework\nDESCRIPTION: This code demonstrates how to manually invoke the HTTP core within a Spiral application. The example shows a controller with methods to handle the current request and redirect it to another URI, which can be useful for testing or running Spiral inside other frameworks.\nSOURCE: https://github.com/spiral/docs/blob/3.14/docs/en/http/lifecycle.md#2025-04-20_snippet_0\n\nLANGUAGE: php\nCODE:\n```\nnamespace App\\Endpoint\\Web;\n\nuse Nyholm\\Psr7\\Uri;\nuse Psr\\Http\\Message\\ServerRequestInterface;\nuse Spiral\\Http\\Http;\n\nclass HomeController implements SingletonInterface\n{\n    public function __construct(\n        private readonly Http $http\n    ) {\n    }\n\n    public function index(ServerRequestInterface $request): string\n    {\n        $response = $this->http->handle(\n            $request->withUri(new Uri('/home/other')) // modify Uri of current request\n        );\n\n        return (string) $response->getBody(); // \"other\"\n    }\n\n    public function other(): string\n    {\n        return 'other';\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Custom User Repository\nDESCRIPTION: Implementation of a custom repository class extending Cycle ORM's base repository with a custom finder method\nSOURCE: https://github.com/spiral/docs/blob/3.14/docs/en/basics/orm.md#2025-04-20_snippet_7\n\nLANGUAGE: php\nCODE:\n```\nclass UserRepository extends \\Cycle\\ORM\\Select\\Repository\n{\n    public function findByEmail(string $email): ?User\n    {\n        return $this->findOne(['email' => $email]);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Advanced Container Binding with Factory DTO in PHP\nDESCRIPTION: Demonstrates advanced container binding using the Factory DTO introduced in Spiral Framework 3.8.0.\nSOURCE: https://github.com/spiral/docs/blob/3.14/docs/en/container/configuration.md#2025-04-20_snippet_10\n\nLANGUAGE: php\nCODE:\n```\nuse Spiral\\Core\\Config\\Factory;\n\n$container->bind(LoggerInterface::class, new Factory(\n    callable: static function() {\n        return new Logger(....);\n    }, \n    singleton: true\n))\n```\n\n----------------------------------------\n\nTITLE: Setting GRPC Response Headers in Service Methods\nDESCRIPTION: PHP code showing how to add custom metadata to a GRPC response. This example retrieves the response headers object from the context and sets a key-value pair.\nSOURCE: https://github.com/spiral/docs/blob/3.14/docs/en/grpc/service.md#2025-04-20_snippet_9\n\nLANGUAGE: php\nCODE:\n```\nuse Spiral\\RoadRunner\\GRPC;\nuse GRPC\\Pinger\\PingRequest;\nuse GRPC\\Pinger\\PingResponse;\n\npublic function ping(GRPC\\ContextInterface $ctx, PingRequest $in): PingResponse\n{\n    /** @var GRPC\\ResponseHeaders $responseHeaders */\n    $responseHeaders = $ctx->getValue(GRPC\\ResponseHeaders::class);\n    $responseHeaders->set('key', 'value');\n    \n    return new PingResponse([\n        'status_code' => $this->httpClient->get($in->getUrl())->getStatusCode()\n    ]);\n}\n```\n\n----------------------------------------\n\nTITLE: Registering a Custom Notification Transport in PHP\nDESCRIPTION: This example demonstrates how to register a custom notification transport using Spiral's NotificationTransportRegistryInterface. This is useful when you need to use transport providers that aren't included in the symfony/notifier component.\nSOURCE: https://github.com/spiral/docs/blob/3.14/docs/en/advanced/notifications.md#2025-04-20_snippet_11\n\nLANGUAGE: php\nCODE:\n```\nuse Spiral\\Boot\\Bootloader\\Bootloader;\nuse Spiral\\Notifications\\NotificationTransportRegistryInterface;\nuse Spacetab\\SmsaeroNotifier\\SmsaeroTransportFactory;\n\nclass MyBootloader extends Bootloader\n{\n    public function boot(NotificationTransportRegistryInterface $registry): void\n    {\n        $registry->registerTransport(new SmsaeroTransportFactory());\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Global Middleware in RoutesBootloader\nDESCRIPTION: Example showing how to register global middleware in the RoutesBootloader class that will be applied to all routes.\nSOURCE: https://github.com/spiral/docs/blob/3.14/docs/en/http/middleware.md#2025-04-20_snippet_1\n\nLANGUAGE: php\nCODE:\n```\nnamespace App\\Application\\Bootloader;\n\nuse App\\Endpoint\\Web\\Middleware\\LocaleSelector;\nuse Spiral\\Auth\\Middleware\\AuthTransportMiddleware;\nuse Spiral\\Bootloader\\Http\\RoutesBootloader as BaseRoutesBootloader;\nuse Spiral\\Cookies\\Middleware\\CookiesMiddleware;\nuse Spiral\\Core\\Container\\Autowire;\nuse Spiral\\Csrf\\Middleware\\CsrfMiddleware;\nuse Spiral\\Debug\\StateCollector\\HttpCollector;\nuse Spiral\\Http\\Middleware\\ErrorHandlerMiddleware;\nuse Spiral\\Http\\Middleware\\JsonPayloadMiddleware;\nuse Spiral\\Session\\Middleware\\SessionMiddleware;\nuse App\\Endpoint\\Web\\Middleware\\MyMiddleware;\n\nfinal class RoutesBootloader extends BaseRoutesBootloader\n{\n    protected function globalMiddleware(): array\n    {\n        return [\n            LocaleSelector::class,\n            ErrorHandlerMiddleware::class,\n            JsonPayloadMiddleware::class,\n            HttpCollector::class,\n            MyMiddleware::class,\n        ];\n    }\n    \n    // ...\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring BootloadersConfig with Custom Directories in Spiral PHP\nDESCRIPTION: This snippet demonstrates how to configure the BootloadersConfig class to include custom directories for bootloader discovery. It shows how to specify directories from various sources including the application, packages, and modules.\nSOURCE: https://github.com/spiral/docs/blob/3.14/docs/en/cookbook/discoverer.md#2025-04-20_snippet_0\n\nLANGUAGE: php\nCODE:\n```\nuse Spiral\\Bootloader\\Config\\BootloadersConfig;\n\nreturn new BootloadersConfig([\n    // Application directory\n    directory('app/src/**/Bootloader'),\n    // Or a PSR-4 namespace\n    'App\\\\Module\\\\*\\\\Bootloader',\n    // Or app rootDirectory\n    directory('app'),\n    // Vendor directories (all packages)\n    directory('vendor/*/*/src/Bootloader'),\n]);\n```\n\n----------------------------------------\n\nTITLE: Registering Custom Console Input in Bootloader\nDESCRIPTION: Registers the custom ConsoleInput class in a bootloader for dependency injection.\nSOURCE: https://github.com/spiral/docs/blob/3.14/docs/en/cookbook/console-validation.md#2025-04-20_snippet_2\n\nLANGUAGE: php\nCODE:\n```\nnamespace App\\Application\\Bootloader;\n\nuse App\\Application\\Console\\ConsoleInput;\nuse Spiral\\Boot\\Bootloader\\Bootloader;\nuse Spiral\\Filters\\InputInterface;\n\nfinal class AppBootloader extends Bootloader\n{\n    protected const SINGLETONS = [\n        InputInterface::class => ConsoleInput::class,\n    ];\n}\n```\n\n----------------------------------------\n\nTITLE: Database Connection Finalizer Example in PHP\nDESCRIPTION: Example of implementing a finalizer in a bootloader to automatically close database connections after each request. This helps prevent consumption of all database sockets when running multiple workers or lambda functions.\nSOURCE: https://github.com/spiral/docs/blob/3.14/docs/en/framework/finalizers.md#2025-04-20_snippet_1\n\nLANGUAGE: php\nCODE:\n```\n// in bootloader\nuse Spiral\\Boot\\FinalizerInterface;\nuse Psr\\Container\\ContainerInterface;\nuse Cycle\\Database\\DatabaseManager;\n\npublic function boot(FinalizerInterface $finalizer, ContainerInterface $container): void\n{\n    $finalizer->addFinalizer(function () use ($container) {\n        /** @var DatabaseManager $dbal */\n        $dbal = $container->get(DatabaseManager::class);\n \n        foreach ($dbal->getDrivers() as $driver) {\n            $driver->disconnect();\n        }\n    });\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Serializer Component\nDESCRIPTION: Example configuration file for the serializer component showing how to set the default serializer and register various serializer implementations including JSON, PHP, and custom serializers.\nSOURCE: https://github.com/spiral/docs/blob/3.14/docs/en/advanced/serializer.md#2025-04-20_snippet_2\n\nLANGUAGE: php\nCODE:\n```\nuse Spiral\\Core\\Container\\Autowire;\nuse Spiral\\Serializer\\Serializer\\JsonSerializer;\nuse Spiral\\Serializer\\Serializer\\PhpSerializer; \nuse Spiral\\Serializer\\Serializer\\CallbackSerializer;\n\nreturn [\n    /**\n     * -------------------------------------------------------------------------\n     *  Default serializer\n     * -------------------------------------------------------------------------\n     * The key of one of the registered serializers.\n     */\n    'default' => 'json',\n    \n    /**\n     * -------------------------------------------------------------------------\n     *  Available serializers\n     * -------------------------------------------------------------------------\n     * List of available serializers.  \n     */\n    'serializers' => [\n        // via fully qualified class name\n        'json' => JsonSerializer::class,\n        \n        // via Autowire \n        'serializer' => new Autowire(PhpSerializer::class),\n        \n        // via Autowire with arguments\n        'encrypted_serializer' => new Autowire(EncryptedPhpSerializer::class, ['secret' => env('ENCRYPTION_KEY')]),\n        \n        // or manual instantiating object\n        'callback' => new CallbackSerializer(\n            serializeCallback: fn(mixed $payload): string => \\json_encode($payload),\n            unserializeCallback: fn(string|\\Stringable $payload, string|object|null $type = null) => \\json_decode($payload, true)\n        )\n    ],\n];\n```\n\n----------------------------------------\n\nTITLE: Implementing a Console Command to Push Jobs in PHP\nDESCRIPTION: PHP implementation of a console command that pushes a PingSiteJob to the queue with a site URL argument.\nSOURCE: https://github.com/spiral/docs/blob/3.14/docs/en/start/queue-basics.md#2025-04-20_snippet_6\n\nLANGUAGE: php\nCODE:\n```\nnamespace App\\Endpoint\\Console;\n\nuse App\\Endpoint\\Job\\PingSiteJob;\nuse Spiral\\Console\\Attribute\\Argument;\nuse Spiral\\Console\\Attribute\\AsCommand;\nuse Spiral\\Console\\Command;\nuse Spiral\\Queue\\QueueInterface;\n\n#[AsCommand(name: 'ping:site', description: 'Ping site')]\nfinal class PingSiteCommand extends Command\n{\n    #[Argument(description: 'Site to ping')]\n    public string $site;\n\n    public function __invoke(QueueInterface $queue): int\n    {\n        $id = $queue->push(PingSiteJob::class, [\n            'site' => $this->site,\n        ]);\n\n        $this->writeln(\\sprintf('Job %s pushed', $id));\n\n        return self::SUCCESS;\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Custom Security Rule in Bootloader in PHP\nDESCRIPTION: Example of registering a custom security rule in the application bootloader. This shows how to associate the rule with specific permissions and roles.\nSOURCE: https://github.com/spiral/docs/blob/3.14/docs/en/http/interceptors.md#2025-04-20_snippet_9\n\nLANGUAGE: php\nCODE:\n```\nnamespace App\\Application\\Bootloader;\n\nuse App\\Application\\Security\\SampleRule;\nuse Spiral\\Bootloader\\DomainBootloader;\nuse Spiral\\Core\\CoreInterface;\nuse Spiral\\Cycle\\Interceptor\\CycleInterceptor;\nuse Spiral\\Domain\\GuardInterceptor;\nuse Spiral\\Security\\Actor\\Guest;\nuse Spiral\\Security\\PermissionsInterface;\nuse Spiral\\Security\\Rule;\n\nclass AppBootloader extends DomainBootloader\n{\n    protected const SINGLETONS = [\n        CoreInterface::class => [self::class, 'domainCore']\n    ];\n\n    protected const INTERCEPTORS = [\n        //...\n        CycleInterceptor::class,\n        GuardInterceptor::class\n    ];\n\n    public function boot(PermissionsInterface $rbac): void\n    {\n        $rbac->addRole(Guest::ROLE);\n        $rbac->associate(Guest::ROLE, 'home.*', SampleRule::class);\n        $rbac->associate(Guest::ROLE, 'home.about', Rule\\ForbidRule::class);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Overriding Default Bindings in Named Scopes in PHP\nDESCRIPTION: Demonstrates how to override default bindings for a specific named scope using the runScoped method.\nSOURCE: https://github.com/spiral/docs/blob/3.14/docs/en/container/scopes.md#2025-04-20_snippet_4\n\nLANGUAGE: php\nCODE:\n```\n$container->bindSingleton(SomeInterface::class, SomeImplementation::class);\n\n$container->runScoped(closure: function ($container) {\n    $instance = $container->get(SomeInterface::class);\n    // Your code here\n}, bindings: [SomeInterface::class => AnotherImplementation::class], name: 'request');\n```\n\n----------------------------------------\n\nTITLE: Throwing HTTP NotFoundException in Controller\nDESCRIPTION: Demonstrates throwing a NotFoundException in a controller to trigger a 404 Not Found HTTP response. This is a proper way to handle resource not found scenarios.\nSOURCE: https://github.com/spiral/docs/blob/3.14/docs/en/http/errors.md#2025-04-20_snippet_6\n\nLANGUAGE: php\nCODE:\n```\nnamespace App\\Endpoint\\Web;\n\nuse Spiral\\Core\\Container\\SingletonInterface;\nuse Spiral\\Http\\Exception\\ClientException\\NotFoundException;\n\nclass HomeController implements SingletonInterface\n{\n    public function index()\n    {\n        throw new NotFoundException();\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Writing Cookies with CookieQuery\nDESCRIPTION: Demonstrates setting cookie values using CookieQuery for proper encryption and signing.\nSOURCE: https://github.com/spiral/docs/blob/3.14/docs/en/http/cookies.md#2025-04-20_snippet_4\n\nLANGUAGE: php\nCODE:\n```\npublic function index(CookieQuery $cookies): void\n{\n    $cookies->set('name', 'value');\n}\n```\n\n----------------------------------------\n\nTITLE: Asserting Response Properties in Spiral HTTP Tests\nDESCRIPTION: This set of snippets demonstrates various assertion methods available for testing HTTP responses in Spiral, including header, status code, and body assertions.\nSOURCE: https://github.com/spiral/docs/blob/3.14/docs/en/testing/http.md#2025-04-20_snippet_9\n\nLANGUAGE: php\nCODE:\n```\n$response->assertHasHeader(name: 'Content-type');\n$response->assertHasHeader(name: 'Content-type', value: 'application/json');\n$response->assertHeaderMissing(name: 'Content-type');\n$response->assertStatus(status: 200);\n$response->assertOk();\n$response->assertCreated();\n$response->assertAccepted();\n$response->assertNoContent(\n    status: 204 // Default value is 204\n);\n$response->assertNotFound();\n$response->assertForbidden();\n$response->assertUnauthorized();\n$response->assertUnprocessable();\n$response->assertBodySame(needle: \"<html>...</html>\");\n$response->assertBodyNotSame(needle: \"<html>...</html>\");\n$response->assertBodyContains(needle: \"<div>...</div>\");\n$response->assertCookieExists(key: 'theme');\n$response->assertCookieSame(key: 'theme', value: 'dark');\n$response->assertCookieMissed(key: 'theme');\n```\n\n----------------------------------------\n\nTITLE: Basic Unit Test Example in Spiral\nDESCRIPTION: Simple unit test demonstrating how to test a User class method without framework dependencies.\nSOURCE: https://github.com/spiral/docs/blob/3.14/docs/en/testing/start.md#2025-04-20_snippet_1\n\nLANGUAGE: php\nCODE:\n```\nnamespace Tests\\Unit;\n\nuse PHPUnit\\Framework\\TestCase;\n\nfinal class UserTest extends TestCase\n{\n    public function testGetId(): void\n    {\n        $user = new User(id: 101);\n        $this->assertSame(101, $user->getId());\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Monolog in PHP\nDESCRIPTION: Example configuration file for Monolog showing default handler setup, global logging level, handlers and processors configuration.\nSOURCE: https://github.com/spiral/docs/blob/3.14/docs/en/basics/logging.md#2025-04-20_snippet_0\n\nLANGUAGE: php\nCODE:\n```\nuse Monolog\\Handler\\ErrorLogHandler;\nuse Monolog\\Handler\\SyslogHandler;\nuse Monolog\\Logger;\nuse Monolog\\Processor\\PsrLogMessageProcessor;\n\nreturn [\n    'default' => env('MONOLOG_DEFAULT_CHANNEL', 'default'),\n    'globalLevel' => Logger::toMonologLevel(\n        env('MONOLOG_DEFAULT_LEVEL', \\Monolog\\Logger::DEBUG)\n    ),\n    'handlers' => [\n        'default' => [\n            [\n                'class' => 'log.rotate',\n                'options' => [\n                    'filename' => directory('runtime') . 'logs/app.log',\n                    'level' => \\Monolog\\Logger::DEBUG,\n                ],\n            ],\n        ],\n        'stderr' => [\n            ErrorLogHandler::class,\n        ],\n        'stdout' => [\n            [\n                'class' => SyslogHandler::class,\n                'options' => [\n                    'ident' => 'app',\n                    'facility' => LOG_USER,\n                ],\n            ],\n        ],\n    ],\n    'processors' => [\n        'default' => [\n            [\n                'class' => PsrLogMessageProcessor::class,\n                'options' => [\n                    'dateFormat' => 'Y-m-d\\TH:i:s.uP',\n                ],\n            ],\n        ],\n    ],\n];\n```\n\n----------------------------------------\n\nTITLE: Implementing Cascade Bootloading in Spiral Framework PHP\nDESCRIPTION: This code snippet shows how to create an AppBootloader class that conditionally loads the DebugBootloader based on the DEBUG environment variable. It uses the BootloadManager to control the bootload process.\nSOURCE: https://github.com/spiral/docs/blob/3.14/docs/en/framework/bootloaders.md#2025-04-20_snippet_18\n\nLANGUAGE: php\nCODE:\n```\nnamespace App\\Application\\Bootloader;\n\nuse Spiral\\Boot\\Bootloader\\Bootloader;\nuse Spiral\\Boot\\BootloadManager;\nuse Spiral\\Bootloader\\DebugBootloader;\nuse Spiral\\Boot\\EnvironmentInterface;\n\nclass AppBootloader extends Bootloader\n{\n    public function boot(BootloadManager $bootloadManager, EnvironmentInterface $env): void\n    {\n        if ($env->get('DEBUG')) {\n            $bootloadManager->bootload([\n                DebugBootloader::class\n            ]);\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Feature Test Example in Spiral\nDESCRIPTION: Example of a feature test showing how to test HTTP endpoints with the framework's testing utilities.\nSOURCE: https://github.com/spiral/docs/blob/3.14/docs/en/testing/start.md#2025-04-20_snippet_2\n\nLANGUAGE: php\nCODE:\n```\nnamespace Tests\\Feature\\Controller\\UserController;\n\nuse Tests\\TestCase;\n\nfinal class ShowActionTest extends TestCase\n{\n    public function testShowPageNotFoundIfUserNotExist(): void\n    {\n        $http = $this->fakeHttp();\n        $response = $http->get('/user/1');\n        $response->assertNotFound();\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Registering Metrics Decorators in Container\nDESCRIPTION: This PHP code demonstrates how to register metrics decorators in the container, providing a clean way to set up metrics with retry attempts and exception suppression.\nSOURCE: https://github.com/spiral/docs/blob/3.14/docs/en/advanced/prometheus-metrics.md#2025-04-20_snippet_10\n\nLANGUAGE: php\nCODE:\n```\nuse Spiral\\RoadRunner\\Metrics\\MetricsInterface;\nuse Spiral\\RoadRunner\\Metrics\\Collector;\nuse Spiral\\Goridge\\RPC\\RPCInterface;\n\nclass MetricsBootloader extends Bootloader\n{\n    const SINGLETONS = [\n        MetricsInterface::class => [self::class, 'createMetrics'],\n    ];\n    \n    private function createMetrics(RPCInterface $rpc): MetricsInterface\n    {\n        $factory = new \\Spiral\\RoadRunner\\Metrics\\MetricsFactory();\n        \n        return $factory->create(\n            $rpc,\n            new \\Spiral\\RoadRunner\\Metrics\\MetricsOptions(\n                suppressExceptions: true,\n                retryAttempts: 3,\n                retrySleepMicroseconds: 50,\n            ),\n        ));\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Database Access Using Provider in PHP\nDESCRIPTION: Demonstrates how to access databases using DatabaseProviderInterface in a UserService class. Shows methods to access default and secondary databases.\nSOURCE: https://github.com/spiral/docs/blob/3.14/docs/en/basics/orm.md#2025-04-20_snippet_12\n\nLANGUAGE: php\nCODE:\n```\nuse Cycle\\Database\\DatabaseProviderInterface;\n\nfinal class UserService \n{\n    public function __construct(\n        private readonly DatabaseProviderInterface $dbal\n    ) {}\n    \n    public function store(): void\n    {\n        // Default database\n        dump($this->dbal->database());\n    \n        // Using alias default which points to primary database\n        dump($this->dbal->database('default'));\n    \n        // Secondary\n        dump($this->dbal->database('slave'));\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Listing Routes Command - Spiral PHP\nDESCRIPTION: Command to display all registered routes in the application\nSOURCE: https://github.com/spiral/docs/blob/3.14/docs/en/start/http-basics.md#2025-04-20_snippet_4\n\nLANGUAGE: terminal\nCODE:\n```\nphp app.php route:list\n```\n\n----------------------------------------\n\nTITLE: Implementing UUID Casting Interceptor in PHP\nDESCRIPTION: Shows how to create an interceptor for casting string route parameters to Ramsey\\Uuid\\Uuid objects.\nSOURCE: https://github.com/spiral/docs/blob/3.14/docs/en/http/interceptors.md#2025-04-20_snippet_22\n\nLANGUAGE: php\nCODE:\n```\nuse Spiral\\Core\\CoreInterceptorInterface;\nuse Spiral\\Core\\CoreInterface;\nuse Ramsey\\Uuid\\UuidInterface;\nuse Ramsey\\Uuid\\Uuid;\n\nfinal class UuidParametersConverterInterceptor implements CoreInterceptorInterface\n{\n    public function process(string $controller, string $action, array $parameters, CoreInterface $core): mixed\n    {\n        $refMethod = new \\ReflectionMethod($controller, $action);\n\n        // Iterate all Controller action arguments\n        foreach ($refMethod->getParameters() as $parameter) {\n            // If an arguments has Ramsey\\Uuid\\UuidInterface type hint.\n            if ($parameter->getType()->getName() === UuidInterface::class) {\n                // Replace argument value with Uuid instance.\n                $parameters[$parameter->getName()] = Uuid::fromString($parameters[$parameter->getName()]);\n            }\n        }\n\n        return $core->callAction($controller, $action, $parameters);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Metrics to Suppress Exceptions in PHP\nDESCRIPTION: This PHP snippet shows how to configure metrics to suppress exceptions, preventing metric errors from disrupting the application.\nSOURCE: https://github.com/spiral/docs/blob/3.14/docs/en/advanced/prometheus-metrics.md#2025-04-20_snippet_9\n\nLANGUAGE: php\nCODE:\n```\n$factory = new \\Spiral\\RoadRunner\\Metrics\\MetricsFactory();\n$rpc = $container->get(\\Spiral\\Goridge\\RPC\\RPCInterface::class);\n\n$metrics = $factory->create(\n    $rpc,\n    new \\Spiral\\RoadRunner\\Metrics\\MetricsOptions(\n        suppressExceptions: true,\n    ),\n));\n```\n\n----------------------------------------\n\nTITLE: Storing Multiple Items in Cache in PHP\nDESCRIPTION: Sets multiple cache items at once by providing an array of key/value pairs. This is more efficient than setting items individually and allows specifying a single TTL for all items.\nSOURCE: https://github.com/spiral/docs/blob/3.14/docs/en/basics/cache.md#2025-04-20_snippet_10\n\nLANGUAGE: php\nCODE:\n```\n$this->cache->setMultiple(\n    values: [\n        'key' => ['some' => 'data'], \n        'other' => ['foo' => 'bar']\n    ], \n    ttl: 3600\n);\n```\n\n----------------------------------------\n\nTITLE: Implementing Database Connection Interceptor\nDESCRIPTION: Creates an interceptor that handles database connection exceptions and implements reconnection logic.\nSOURCE: https://github.com/spiral/docs/blob/3.14/docs/en/framework/interceptors.md#2025-04-20_snippet_4\n\nLANGUAGE: php\nCODE:\n```\nnamespace App\\Integration\\Database\\Interceptor;\n\nuse Spiral\\Core\\CoreInterceptorInterface;\nuse Spiral\\Core\\CoreInterface;\nuse Cycle\\Database\\Exception\\StatementException\\ConnectionException;\n\nfinal class DatabaseConnectionInterceptor implements CoreInterceptorInterface\n{\n    // ...\n\n    public function process(string $database, string $sql, array $parameters, CoreInterface $core): mixed\n    {\n        try {\n            return $core->callAction($database, $sql, $parameters);\n        } catch (ConnectionException $e) {\n            // Try to reconnect...\n\n            // For example, switch to another database...\n            return $this->process('slave', $sql, $parameters, $core);\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing LoggerTrait in a UserService class (PHP)\nDESCRIPTION: This snippet shows how to use the LoggerTrait in a UserService class to log user registration events. It demonstrates accessing the logger instance and logging an info message with context data.\nSOURCE: https://github.com/spiral/docs/blob/3.14/docs/en/basics/logging.md#2025-04-20_snippet_5\n\nLANGUAGE: php\nCODE:\n```\nuse Spiral\\Logger\\Traits\\LoggerTrait;\n\nfinal class UserService\n{\n    use LoggerTrait;\n\n    public function register(string $email, string $password): void\n    {\n        // Register user ...\n        \n        $this->getLogger()->info('User has been registered', ['email' => $email]);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: SSH Config for Deployer\nDESCRIPTION: SSH configuration for setting up identity file for deployment server access.\nSOURCE: https://github.com/spiral/docs/blob/3.14/docs/en/start/deployment.md#2025-04-20_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\nHost example.org\n  IdentityFile ~/.ssh/id_rsa\n```\n\n----------------------------------------\n\nTITLE: Configuring Validator Component\nDESCRIPTION: Example configuration file for the validator component, including checkers, conditions, and aliases.\nSOURCE: https://github.com/spiral/docs/blob/3.14/docs/en/validation/spiral.md#2025-04-20_snippet_3\n\nLANGUAGE: php\nCODE:\n```\nuse Spiral\\Validator;\n\nreturn [\n    'checkers'   => [\n        'type'     => Validator\\Checker\\TypeChecker::class,\n        'number'   => Validator\\Checker\\NumberChecker::class,\n        'mixed'    => Validator\\Checker\\MixedChecker::class,\n        'address'  => Validator\\Checker\\AddressChecker::class,\n        'string'   => Validator\\Checker\\StringChecker::class,\n        'file'     => Validator\\Checker\\FileChecker::class,\n        'image'    => Validator\\Checker\\ImageChecker::class,\n        'datetime' => Validator\\Checker\\DatetimeChecker::class,\n        'entity'   => Validator\\Checker\\EntityChecker::class,\n        'array'    => Validator\\Checker\\ArrayChecker::class,\n    ],\n\n    'conditions' => [\n        'absent'     => Validator\\Condition\\AbsentCondition::class,\n        'present'    => Validator\\Condition\\PresentCondition::class,\n        'anyOf'      => Validator\\Condition\\AnyOfCondition::class,\n        'noneOf'     => Validator\\Condition\\NoneOfCondition::class,\n        'withAny'    => Validator\\Condition\\WithAnyCondition::class,\n        'withoutAny' => Validator\\Condition\\WithoutAnyCondition::class,\n        'withAll'    => Validator\\Condition\\WithAllCondition::class,\n        'withoutAll' => Validator\\Condition\\WithoutAllCondition::class,\n    ],\n\n    'aliases'    => [\n        'notEmpty'   => 'type::notEmpty',\n        'notNull'    => 'type::notNull',\n        'required'   => 'type::notEmpty',\n        'datetime'   => 'type::datetime',\n        'timezone'   => 'type::timezone',\n        'bool'       => 'type::boolean',\n        'boolean'    => 'type::boolean',\n        'arrayOf'    => 'array::of',\n        'cardNumber' => 'mixed::cardNumber',\n        'regexp'     => 'string::regexp',\n        'email'      => 'address::email',\n        'url'        => 'address::url',\n        'file'       => 'file::exists',\n        'uploaded'   => 'file::uploaded',\n        'filesize'   => 'file::size',\n        'image'      => 'image::valid',\n        'array'      => 'is_array',\n        'callable'   => 'is_callable',\n        'double'     => 'is_double',\n        'float'      => 'is_float',\n        'int'        => 'is_int',\n        'integer'    => 'is_integer',\n        'numeric'    => 'is_numeric',\n        'long'       => 'is_long',\n        'null'       => 'is_null',\n        'object'     => 'is_object',\n        'real'       => 'is_real',\n        'resource'   => 'is_resource',\n        'scalar'     => 'is_scalar',\n        'string'     => 'is_string',\n        'match'      => 'mixed::match',\n    ]\n];\n```\n\n----------------------------------------\n\nTITLE: Checking Item Existence in Spiral Cache\nDESCRIPTION: Shows how to check if an item exists in the cache using the has method.\nSOURCE: https://github.com/spiral/docs/blob/3.14/docs/en/basics/cache.md#2025-04-20_snippet_6\n\nLANGUAGE: php\nCODE:\n```\nif ($this->cache->has('key')) {\n    // ...\n}\n```\n\n----------------------------------------\n\nTITLE: Registering Update Sequences in Spiral PHP\nDESCRIPTION: Example of registering update sequences in a bootloader class. Shows adding both command-based sequences for database migrations and closure-based sequences with auto-wiring support.\nSOURCE: https://github.com/spiral/docs/blob/3.14/docs/en/console/sequences.md#2025-04-20_snippet_1\n\nLANGUAGE: php\nCODE:\n```\nuse Symfony\\Component\\Console\\Output\\OutputInterface;\nuse Psr\\Container\\ContainerInterface;\nuse Spiral\\Boot\\Bootloader\\Bootloader;\nuse Spiral\\Console\\Bootloader\\ConsoleBootloader;\n\nclass AppBootloader extends Bootloader\n{\n    public function boot(ConsoleBootloader $console): void\n    {\n        $console->addUpdateSequence('db:migrate', '<info>Database migration...</info>');\n        \n        // Add closure in a sequence\n        // It supports auto-wiring of arguments\n        $console->addConfigureSequence(\n            static function(OutputInterface $output, ContainerInterface $container): void {\n                // do something\n            }, \n            '<info>Caching something...</info>'\n        );\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Job-Specific Serializer Configuration\nDESCRIPTION: Example of configuring serializers for specific job types in queue.php\nSOURCE: https://github.com/spiral/docs/blob/3.14/docs/en/queue/jobs.md#2025-04-20_snippet_7\n\nLANGUAGE: php\nCODE:\n```\nuse Spiral\\Core\\Container\\Autowire;\n\nreturn [\n    'registry' => [\n        'serializers' => [\n            'ping.job' => 'json',\n            TestJob::class => 'serializer',\n            OtherJob::class => CustomSerializer::class,\n            FooJob::class => new CustomSerializer(),\n            BarJob::class => new Autowire(CustomSerializer::class),\n        ]\n    ],\n];\n```\n\n----------------------------------------\n\nTITLE: Using Guarded Attribute for Controller Permissions in PHP\nDESCRIPTION: Example of applying the Guarded attribute to controller methods to specify required permissions. Each method requires specific permissions to be accessible.\nSOURCE: https://github.com/spiral/docs/blob/3.14/docs/en/http/interceptors.md#2025-04-20_snippet_5\n\nLANGUAGE: php\nCODE:\n```\nnamespace App\\Endpoint\\Web;\n\nuse Spiral\\Domain\\Annotation\\Guarded;\n\nclass HomeController\n{\n    #[Guarded(permission: 'home.index')]\n    public function index(): string\n    {\n        return 'OK';\n    }\n\n    #[Guarded(permission: 'home.about')]\n    public function about(): string\n    {\n        return 'OK';\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Testing File Upload with FakeHttp - Full Example\nDESCRIPTION: Complete example of a test class showing how to test file uploads using FakeHttp. Demonstrates setup and a test method for uploading an avatar image.\nSOURCE: https://github.com/spiral/docs/blob/3.14/docs/en/testing/http.md#2025-04-20_snippet_10\n\nLANGUAGE: php\nCODE:\n```\nnamespace Tests\\Feature;\n\nuse Spiral\\Testing\\Http\\FakeHttp;\nuse Tests\\TestCase;\n\nfinal class UserControllerTest extends TestCase\n{\n    private FakeHttp $http;\n\n    protected function setUp(): void\n    {\n        parent::setUp();\n        $this->http = $this->fakeHttp();\n    }\n\n    public function testUploadAvatar(): void\n    {\n        // Create a fake image 640x480\n        $image = $http->getFileFactory()->createImage('avatar.jpg', 640, 480);\n\n        $response = $http->post(uri: '/user/1', files: ['avatar' => $image]);\n        $response->assertOk();\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing PHP gRPC Client Class\nDESCRIPTION: PHP client class implementation that extends Grpc\\BaseStub and implements the PingerInterface for making gRPC calls to the Pinger service.\nSOURCE: https://github.com/spiral/docs/blob/3.14/docs/en/grpc/client.md#2025-04-20_snippet_0\n\nLANGUAGE: php\nCODE:\n```\nnamespace App\\Service;\n\nuse GRPC\\Pinger;\nuse Spiral\\Core\\CoreInterface;\nuse Spiral\\RoadRunner\\GRPC;\n\nfinal class PingerClient implements Pinger\\PingerInterface extends \\Grpc\\BaseStub\n{\n    public function ping(GRPC\\ContextInterface $ctx, Pinger\\PingRequest $in): Pinger\\PingResponse\n    {\n        [$response, $status] = $this->_simpleRequest(\n            '/' . self::NAME . '/ping',\n            $in,\n            [Pinger\\PingResponse::class, 'decode'],\n            (array) $ctx->getValue('metadata'),\n            (array) $ctx->getValue('options')\n        )->wait();\n\n        return $response;\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Adding Route-Specific Middleware with RouterInterface\nDESCRIPTION: Example showing how to apply middleware to a specific route using the RouterInterface directly.\nSOURCE: https://github.com/spiral/docs/blob/3.14/docs/en/http/middleware.md#2025-04-20_snippet_7\n\nLANGUAGE: php\nCODE:\n```\nuse App\\Controller\\HomeController;\nuse Spiral\\Router\\Route;\nuse Spiral\\Router\\RouterInterface;\nuse Spiral\\Router\\Target\\Action;\nuse App\\Endpoint\\Web\\Middleware\\MyMiddleware;\n\n// ...\n\npublic function boot(RouterInterface $router): void\n{\n    $route = new Route('/index', new Action(HomeController::class, 'index'));\n    $route = $route->withMiddleware(MyMiddleware::class);\n\n    $router->addRoute('index', $route);\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Filter with Attributes\nDESCRIPTION: Example of creating a filter object using PHP attributes for field mapping and validation rules.\nSOURCE: https://github.com/spiral/docs/blob/3.14/docs/en/validation/spiral.md#2025-04-20_snippet_5\n\nLANGUAGE: php\nCODE:\n```\nnamespace App\\Filter;\n\nuse Spiral\\Filters\\Attribute\\Input\\Post;\nuse Spiral\\Filters\\Model\\Filter;\nuse Spiral\\Filters\\Model\\FilterDefinitionInterface;\nuse Spiral\\Filters\\Model\\HasFilterDefinition;\nuse Spiral\\Validator\\FilterDefinition;\nuse Spiral\\Validator\\Attribute\\Input\\File;\n\nfinal class CreatePostFilter extends Filter implements HasFilterDefinition\n{\n    #[Post]\n    public string $title;\n\n    #[Post]\n    public string $slug;\n\n    #[Post]\n    public int $sort;\n\n    #[File]\n    public UploadedFile $image;\n\n    public function filterDefinition(): FilterDefinitionInterface\n    {\n        return new FilterDefinition([\n            'title' => ['required', ['string::length', 5]]\n            'slug' =>  ['required', ['string::length', 5]]\n            'sort' =>  ['required', 'integer']\n            'image' => ['required', 'image']\n        ]);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing the BootloadersConfig Provider in Spiral PHP\nDESCRIPTION: This snippet demonstrates how to create a provider for the BootloadersConfig that can be injected into the Kernel. It shows how to define and register the configuration provider in the application container.\nSOURCE: https://github.com/spiral/docs/blob/3.14/docs/en/cookbook/discoverer.md#2025-04-20_snippet_2\n\nLANGUAGE: php\nCODE:\n```\nnamespace App\\Provider;\n\nuse Spiral\\Bootloader\\Config\\BootloadersConfig;\nuse Spiral\\Core\\Container\\Autowire;\nuse Spiral\\Core\\Provider\\Provider;\n\nclass BootloadersConfigProvider extends Provider\n{\n    public function register(): array\n    {\n        return [\n            BootloadersConfig::class => new Autowire(\n                new BootloadersConfig([\n                    directory('app/src/Bootloader')\n                ])\n            )\n        ];\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a Listener with TargetClass in Spiral Framework\nDESCRIPTION: Example of using the TargetClass attribute to filter classes based on inheritance. This listener will only process classes that extend SymfonyCommand.\nSOURCE: https://github.com/spiral/docs/blob/3.14/docs/en/advanced/tokenizer.md#2025-04-20_snippet_18\n\nLANGUAGE: php\nCODE:\n```\nuse Spiral\\Tokenizer\\Attribute\\TargetClass;\n\n#[TargetClass(SymfonyCommand::class)]\nfinal class CommandLocatorListener implements TokenizationListenerInterface\n{\n    // ...\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Login Controller with Form Handling\nDESCRIPTION: Controller class for handling user authentication with login form rendering and CSRF protection.\nSOURCE: https://github.com/spiral/docs/blob/3.14/docs/en/cookbook/simple-chat.md#2025-04-20_snippet_28\n\nLANGUAGE: php\nCODE:\n```\nnamespace App\\Endpoint\\Web;\n\nuse Psr\\Http\\Message\\ServerRequestInterface;\n\nfinal class LoginController\n{\n    #[Route('/login', methods: ['GET'])]\n    public function loginForm(ServerRequestInterface $request): ResponseInterface|string\n    {\n        return $this->views->render('login', [\n            'csrf' => $request->getAttribute('csrfToken'),\n            'errors' => [],\n        ]);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Route to Controller Action in PHP\nDESCRIPTION: Example of setting up a route that points to a specific controller action using Action target. Shows basic route configuration in a bootloader class.\nSOURCE: https://github.com/spiral/docs/blob/3.14/docs/en/http/routing.md#2025-04-20_snippet_42\n\nLANGUAGE: php\nCODE:\n```\nnamespace App\\Bootloader;\n\nuse App\\Controller\\HomeController;\nuse Spiral\\Boot\\Bootloader\\Bootloader;\nuse Spiral\\Router\\Route;\nuse Spiral\\Router\\RouterInterface;\nuse Spiral\\Router\\Target\\Action;\n\nclass RoutesBootloader extends Bootloader\n{\n    public function boot(RouterInterface $router): void\n    {\n        $router->setRoute(\n            'index',\n            new Route('/index', new Action(HomeController::class, 'index'))\n        );\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Adding Route-Specific Middleware with Routing Configurator\nDESCRIPTION: Example showing how to apply middleware to a specific route using the routing configurator.\nSOURCE: https://github.com/spiral/docs/blob/3.14/docs/en/http/middleware.md#2025-04-20_snippet_5\n\nLANGUAGE: php\nCODE:\n```\nnamespace App\\Application\\Bootloader;\n\nuse Spiral\\Bootloader\\Http\\RoutesBootloader as BaseRoutesBootloader;\nuse Spiral\\Router\\Loader\\Configurator\\RoutingConfigurator;\nuse App\\Endpoint\\Web\\Middleware\\MyMiddleware;\n\nfinal class RoutesBootloader extends BaseRoutesBootloader\n{\n    // ...\n \n    protected function defineRoutes(RoutingConfigurator $routes): void\n    {\n        $routes->add(name: 'news.show', pattern: '/news/<id:int>')\n            ->middleware(['middleware:web', MyMiddleware::class]);\n        ...\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Cache Items with DateTime TTL in PHP\nDESCRIPTION: Sets a cache item using a DateTime object (Carbon instance) for TTL specification. This allows for more flexible expiration time definition by using a timestamp object.\nSOURCE: https://github.com/spiral/docs/blob/3.14/docs/en/basics/cache.md#2025-04-20_snippet_8\n\nLANGUAGE: php\nCODE:\n```\n$this->cache->set(\n    key: 'key', \n    value: ['some' => 'data'], \n    ttl: \\Carbon\\Carbon::now()->addHour()\n);\n```\n\n----------------------------------------\n\nTITLE: Arithmetic Value Accessor Examples in PHP\nDESCRIPTION: Shows how to chain multiple arithmetic accessors (multiply and add) and demonstrates their execution order. Includes examples of different accessor combinations and their resulting calculations.\nSOURCE: https://github.com/spiral/docs/blob/3.14/docs/en/component/data-grid.md#2025-04-20_snippet_52\n\nLANGUAGE: php\nCODE:\n```\nuse Spiral\\DataGrid\\Specification\\Value;\nuse Spiral\\DataGrid\\Specification\\Value\\Accessor;\n\n$multiply = new Accessor\\Multiply(new Accessor\\Add(new Value\\IntValue(), 2), 2);\n$add = new Accessor\\Add(new Accessor\\Multiply(new Value\\IntValue(), 2), 2);\n\n$multiply->convert(2); // 2*2+2=6\n$add->convert(2);      // (2+2)*2=8\n```\n\n----------------------------------------\n\nTITLE: Initializing Distribution Manager in PHP\nDESCRIPTION: Creates a new Distribution Manager instance and adds a custom resolver. Demonstrates how to retrieve the resolver by name.\nSOURCE: https://github.com/spiral/docs/blob/3.14/docs/en/advanced/storage.md#2025-04-20_snippet_24\n\nLANGUAGE: php\nCODE:\n```\n$manager = new \\Spiral\\Distribution\\Manager();\n\n$manager->add('resolver-name', new CustomResolver());\n\n$manager->resolver('resolver-name'); // object(CustomResolver)\n```\n\n----------------------------------------\n\nTITLE: Configuring AMQP Queue in YAML with RoadRunner\nDESCRIPTION: YAML configuration for setting up an AMQP queue pipeline in RoadRunner. The configuration specifies the AMQP connection address and enables job consumption from the default pipeline.\nSOURCE: https://github.com/spiral/docs/blob/3.14/docs/en/cookbook/simple-queue-system.md#2025-04-20_snippet_13\n\nLANGUAGE: yaml\nCODE:\n```\namqp:\n  addr: amqp://guest:guest@127.0.0.1:5672\n\njobs:\n  consume: [ default ]  # <===== Enables consuming\n  pipelines:\n    default:\n      driver: amqp\n      priority: 100\n      queue: default\n```\n\n----------------------------------------\n\nTITLE: Creating Route-Specific Core in PHP\nDESCRIPTION: Shows how to create a custom InterceptableCore for a specific route and add route-specific interceptors.\nSOURCE: https://github.com/spiral/docs/blob/3.14/docs/en/http/interceptors.md#2025-04-20_snippet_20\n\nLANGUAGE: php\nCODE:\n```\n$customCore = new InterceptableCore($core);\n$customCore->addInterceptor(new CustomInterceptor());\n\n$router->setRoute(\n    'home',\n    new Route(\n        '/home/<action>',\n        (new Controller(HomeController::class))->withCore($customCore)\n    )\n);\n```\n\n----------------------------------------\n\nTITLE: Pushing Jobs with Different Payload Types\nDESCRIPTION: Examples of pushing jobs with various payload types including arrays, objects, and strings\nSOURCE: https://github.com/spiral/docs/blob/3.14/docs/en/queue/jobs.md#2025-04-20_snippet_4\n\nLANGUAGE: php\nCODE:\n```\nuse App\\Endpoint\\Job\\SampleJob;\nuse Spiral\\Queue\\QueueInterface;\n\npublic function createJob(QueueInterface $queue): void\n{\n    // Array payload\n    $queue->push(SampleJob::class, ['value' => 123]);\n    \n    // Object payload\n    $queue->push(SampleJob::class, new User(id: 123, name: 'John'));\n    \n    // Some strig payload\n    $queue->push(SampleJob::class, 'some string');\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a Notification Class with Channel Specification in PHP\nDESCRIPTION: This snippet demonstrates how to create a notification class that extends Symfony's Notification class and implements SmsNotificationInterface. The class specifies which channels to use for sending notifications based on the recipient type.\nSOURCE: https://github.com/spiral/docs/blob/3.14/docs/en/advanced/notifications.md#2025-04-20_snippet_7\n\nLANGUAGE: php\nCODE:\n```\nuse Symfony\\Component\\Notifier\\Notification\\Notification;\nuse Symfony\\Component\\Notifier\\Notification\\SmsNotificationInterface;\nuse Symfony\\Component\\Notifier\\Message\\SmsMessage;\n\nclass UserBannedNotification extends Notification implements SmsNotificationInterface\n{\n    public function getChannels(RecipientInterface $recipient): array\n    {\n        if ($recipient instanceof SmsRecipientInterface) {\n            return ['nexmo_sms'];\n        }\n        \n        return ['chat/slack'];\n    }\n\n    public function asSmsMessage(SmsRecipientInterface $recipient, string $transport = null): ?SmsMessage\n    {\n        return SmsMessage::fromNotification($this, $recipient);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a Grid Table Component in Stempler\nDESCRIPTION: Shows how to create a reusable grid table component using Stempler's stacks and partials. This component forms the base of a more complex UI assembly system.\nSOURCE: https://github.com/spiral/docs/blob/3.14/docs/en/views/stempler.md#2025-04-20_snippet_51\n\nLANGUAGE: html\nCODE:\n```\n<table class=\"grid-table\">\n    <thead>\n    <stack:collect name=\"thead\" level=\"2\"/>\n    </thead>\n    <tbody>\n    <stack:collect name=\"tbody\" level=\"2\"/>\n    </tbody>\n    <hidden>${context}</hidden>\n</table>\n```\n\n----------------------------------------\n\nTITLE: Configuring Logger in LoggingBootloader (PHP)\nDESCRIPTION: This code demonstrates how to assign a logger to the UserService class using the LoggingBootloader. It shows how to add a handler for log rotation specific to the UserService.\nSOURCE: https://github.com/spiral/docs/blob/3.14/docs/en/basics/logging.md#2025-04-20_snippet_6\n\nLANGUAGE: php\nCODE:\n```\nnamespace App\\Application\\Bootloader;\n\nuse Spiral\\Boot\\Bootloader\\Bootloader;\nuse Spiral\\Monolog\\Bootloader\\MonologBootloader;\n\nfinal class LoggingBootloader extends Bootloader\n{\n    // ...\n    \n    public function boot(MonologBootloader $monolog): void\n    {\n        $monolog->addHandler(\n            UserService::class,\n            $monolog->logRotate(directory('runtime') . 'logs/user-dervice.log')\n        );\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Testing User Registration Event Dispatch in PHP\nDESCRIPTION: This snippet illustrates a complete test case for asserting that a UserRegistered event is dispatched during user registration. It sets up a fake event dispatcher and uses the assertDispatched method to verify the event.\nSOURCE: https://github.com/spiral/docs/blob/3.14/docs/en/testing/event.md#2025-04-20_snippet_2\n\nLANGUAGE: php\nCODE:\n```\nuse Tests\\TestCase;\n\nfinal class UserServiceTest extends TestCase\n{\n    private \\Spiral\\Testing\\Events\\FakeEventDispatcher $events;\n\n    protected function setUp(): void\n    {\n        parent::setUp();\n        $this->events = $this->fakeEventDispatcher();\n    }\n\n\n    public function testUserShouldBeRegistered(): void\n    {\n        // Perform user registration ...\n\n        $this->events->assertDispatched(UserRegistered::class);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Validator Configuration in PHP\nDESCRIPTION: Configuration setup for registering custom checkers and defining validation rule aliases in app/config/validator.php\nSOURCE: https://github.com/spiral/docs/blob/3.14/docs/en/validation/spiral.md#2025-04-20_snippet_11\n\nLANGUAGE: php\nCODE:\n```\nuse Spiral\\Validator;\n\nreturn [\n    'checkers' => [\n        'file' => Validator\\Checker\\FileChecker::class,\n    ],\n\n    // Register aliases if you need to simplify developer life.\n    'aliases' => [\n        'file' => 'file::exists',\n        'uploaded' => 'file::uploaded',\n        'filesize' => 'file::size',\n    ]\n];\n```\n\n----------------------------------------\n\nTITLE: Using TokenStorageScope for Request-Specific Token Operations\nDESCRIPTION: Shows how to use the TokenStorageScope in a controller to perform token operations specific to the current request.\nSOURCE: https://github.com/spiral/docs/blob/3.14/docs/en/security/authentication.md#2025-04-20_snippet_6\n\nLANGUAGE: php\nCODE:\n```\nuse Spiral\\Auth\\TokenStorageScope;\n\nfinal readonly class UserController {\n    public function __construct(\n        private \\Spiral\\Auth\\TokenStorageScope $tokenStorage,\n    ) {}\n    \n    public function currentUser() \n    {\n        $this->tokenStorage->load('some-id');\n      \n        $this->tokenStorage->create(['id' => 'some-id']);\n          \n        $this->tokenStorage->delete($token);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Method Dependency Injection Example\nDESCRIPTION: Shows method-based dependency injection where dependencies are injected directly into the method parameters.\nSOURCE: https://github.com/spiral/docs/blob/3.14/docs/en/container/overview.md#2025-04-20_snippet_2\n\nLANGUAGE: php\nCODE:\n```\nfinal class UserController\n{\n    public function show(UserRepository $users, string $id): void\n    {\n       $user = $users->findOrFail($id);\n       // ...\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Singleton Rule in Spiral Framework\nDESCRIPTION: This snippet shows how to implement a singleton rule in Spiral Framework for improved performance. It extends the abstract Rule class and implements the SingletonInterface.\nSOURCE: https://github.com/spiral/docs/blob/3.14/docs/en/security/rbac.md#2025-04-20_snippet_14\n\nLANGUAGE: php\nCODE:\n```\nnamespace App\\Security;\n\nuse Spiral\\Core\\Container\\SingletonInterface;\nuse Spiral\\Security\\Rule;\n\nclass SampleRule extends Rule implements SingletonInterface\n{\n    public function check(string $key): bool\n    {\n        return $key === 'value';\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Basic Cookie Management with CookieManager\nDESCRIPTION: Demonstrates basic cookie operations using CookieManager instance for getting all cookies and setting new ones.\nSOURCE: https://github.com/spiral/docs/blob/3.14/docs/en/http/cookies.md#2025-04-20_snippet_0\n\nLANGUAGE: php\nCODE:\n```\npublic function index(CookieManager $cookies): void\n{\n    dump($cookies->getAll());\n    $cookies->set('name', 'value'); // read about more options down below\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Trace from Incoming Context in Spiral PHP\nDESCRIPTION: Shows how to create a new trace using incoming request headers as context through TracerFactoryInterface. The code sets up a trace with HTTP-specific attributes and handles the request within the trace scope.\nSOURCE: https://github.com/spiral/docs/blob/3.14/docs/en/advanced/telemetry.md#2025-04-20_snippet_10\n\nLANGUAGE: php\nCODE:\n```\npublic function handle(ServerRequestInterface $request): ResponseInterface\n{\n    $tracerFactory = $this->container->get(\\Spiral\\Telemetry\\TracerFactoryInterface::class);\n    $tracer = $tracerFactory->make($request->getHeaders());\n    \n   $response = $tracer->trace(\n        name: \\sprintf('%s %s', $request->getMethod(), (string)$request->getUri()),\n        callback: $callback,\n        attributes: [\n            'http.method' => $request->getMethod(),\n            'http.url' => $request->getUri(),\n            'http.headers' => $request->getHeaders(),\n        ],\n        scoped: true,\n        traceKind: TraceKind::SERVER\n    );\n    \n    ...\n}\n```\n\n----------------------------------------\n\nTITLE: Custom URI Handler Configuration in AppBootloader\nDESCRIPTION: Implementation of a custom URI handler for non-Latin characters using a Bootloader configuration.\nSOURCE: https://github.com/spiral/docs/blob/3.14/docs/en/http/routing.md#2025-04-20_snippet_53\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\ndeclare(strict_types=1);\n\nnamespace App\\Application\\Bootloader;\n\nuse Psr\\Http\\Message\\UriFactoryInterface;\nuse Spiral\\Boot\\Bootloader\\Bootloader;\nuse Spiral\\Router\\UriHandler;\n\nfinal class AppBootloader extends Bootloader\n{\n    public function defineSingletons(): array\n    {\n        return [\n            UriHandler::class => static function (UriFactoryInterface $uriFactory) {\n                return (new UriHandler($uriFactory))->withPathSegmentEncoder(\n                    static fn(string $segment): string => \\rawurlencode($segment)\n                );\n            },\n        ];\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Asserting Scaffolder Command Content in Spiral Framework (PHP)\nDESCRIPTION: Shows how to test scaffolder commands by asserting that the generated code contains specific strings. This example tests the 'create:command' scaffolder with a custom namespace.\nSOURCE: https://github.com/spiral/docs/blob/3.14/docs/en/testing/start.md#2025-04-20_snippet_12\n\nLANGUAGE: php\nCODE:\n```\n$this->assertScaffolderCommandContains(\n    'create:command',\n    [\n        'name' => 'TestCommand',\n        '--namespace' => 'App\\Command',\n    ],\n    expectedStrings: [\n        'namespace App\\Command;',\n    ],\n    expectedFilename: 'app/src/TestCommand.php',\n);\n```\n\n----------------------------------------\n\nTITLE: Custom UUID Caster Implementation - PHP\nDESCRIPTION: Implementation of a custom caster for converting UUID strings into UUID objects.\nSOURCE: https://github.com/spiral/docs/blob/3.14/docs/en/filters/configuration.md#2025-04-20_snippet_4\n\nLANGUAGE: php\nCODE:\n```\nuse Spiral\\Filters\\Model\\FilterInterface;\nuse Spiral\\Filters\\Model\\Mapper\\CasterInterface;\nuse Ramsey\\Uuid\\UuidInterface;\nuse Ramsey\\Uuid\\Uuid;\n\nfinal class UuidCaster implements CasterInterface\n{\n    public function supports(\\ReflectionNamedType $type): bool\n    {\n        return $type->getName() === UuidInterface::class;\n    }\n\n    public function setValue(FilterInterface $filter, \\ReflectionProperty $property, mixed $value): void\n    {\n        $property->setValue($filter, Uuid::fromString($value));\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Filters with Container\nDESCRIPTION: Example of requesting a filter directly from the container to have it automatically instantiated with mapped data.\nSOURCE: https://github.com/spiral/docs/blob/3.14/docs/en/filters/filter.md#2025-04-20_snippet_6\n\nLANGUAGE: php\nCODE:\n```\ndump($container->get(MyFilter::class));\n```\n\n----------------------------------------\n\nTITLE: Storing Items in Cache Without TTL in PHP\nDESCRIPTION: Sets a cache item without specifying a TTL, which stores the value indefinitely or for as long as the underlying storage driver allows.\nSOURCE: https://github.com/spiral/docs/blob/3.14/docs/en/basics/cache.md#2025-04-20_snippet_9\n\nLANGUAGE: php\nCODE:\n```\n$this->cache->set(\n    key: 'key', \n    value: ['some' => 'data']\n);\n```\n\n----------------------------------------\n\nTITLE: Configuring WebSocket Interceptors in Spiral Framework\nDESCRIPTION: Configuration file showing how to register WebSocket interceptors for specific request types or globally using wildcards in the Spiral Framework.\nSOURCE: https://github.com/spiral/docs/blob/3.14/docs/en/websockets/interceptors.md#2025-04-20_snippet_4\n\nLANGUAGE: php\nCODE:\n```\nuse RoadRunner\\Centrifugo\\Request\\RequestType;\nuse App\\Centrifuge;\n\nreturn [\n    'services' => [\n        //...\n    ],\n    'interceptors' => [\n        RequestType::Connect->value => [\n            Centrifuge\\Interceptor\\AuthInterceptor::class,\n        ],\n        //...\n        '*' => [\n            Centrifuge\\Interceptor\\ExceptionHandlerInterceptor::class,\n            Centrifuge\\Interceptor\\TelemetryInterceptor::class,\n        ],\n    ],\n];\n```\n\n----------------------------------------\n\nTITLE: Creating a Temporal Activity in Spiral PHP\nDESCRIPTION: Command to generate a new Temporal activity class in the Spiral PHP framework.\nSOURCE: https://github.com/spiral/docs/blob/3.14/docs/en/temporal/usage.md#2025-04-20_snippet_3\n\nLANGUAGE: terminal\nCODE:\n```\nphp app.php create:activity PingWebsite --method=ping:bool\n```\n\n----------------------------------------\n\nTITLE: Implementing Bootloader Dependencies via Method Injection\nDESCRIPTION: Shows how to define bootloader dependencies by injecting them into the boot method.\nSOURCE: https://github.com/spiral/docs/blob/3.14/docs/en/framework/bootloaders.md#2025-04-20_snippet_16\n\nLANGUAGE: php\nCODE:\n```\nnamespace App\\Application\\Bootloader;\n\nuse Spiral\\Bootloader\\Http\\HttpBootloader;\nuse App\\Middleware\\MyMiddleware;\n\nclass MyBootloader extends Bootloader \n{\n    public function boot(HttpBootloader $http): void\n    {\n        $http->addMiddleware(MyMiddleware::class);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Supporting Class Inheritance in Spiral Injectors\nDESCRIPTION: This snippet demonstrates how to implement class inheritance support in an injector. The createInjection method can check if the requested class is a subclass of a specific interface and return an appropriate implementation.\nSOURCE: https://github.com/spiral/docs/blob/3.14/docs/en/container/injectors.md#2025-04-20_snippet_2\n\nLANGUAGE: php\nCODE:\n```\npublic function createInjection(\\ReflectionClass $class, string $context = null): CacheInterface\n{\n    if ($class->isSubclassOf(RedisCacheInterface::class)) {\n        return new RedisCache(...);\n    }\n    \n    return match ($context) {\n        'redis' => new RedisCache(...),\n        'memcached' => new MemcachedCache(...),\n        default => new ArrayCache(...),\n    };\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Lazy Singleton with Attribute in Spiral (PHP)\nDESCRIPTION: Shows how to use the Singleton attribute to mark a class as a singleton, ensuring only one instance is created and shared across the application.\nSOURCE: https://github.com/spiral/docs/blob/3.14/docs/en/container/configuration.md#2025-04-20_snippet_21\n\nLANGUAGE: php\nCODE:\n```\nuse Spiral\\Core\\Attribute\\Singleton;\n\n#[Singleton]\nfinal class UserService\n{\n    public function store(User $user): void\n    {\n        //...\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Copying and Moving Files in PHP using Spiral Storage\nDESCRIPTION: Shows how to use the copy() and move() methods to copy and move files between buckets. Includes an example of copying within the same bucket and moving to a different bucket.\nSOURCE: https://github.com/spiral/docs/blob/3.14/docs/en/advanced/storage.md#2025-04-20_snippet_12\n\nLANGUAGE: php\nCODE:\n```\n$backup = $firstBucket->copy('from.txt', 'backup.txt');\n\n$moved  = $firstBucket->move('backup.txt', 'to.txt', $secondBucket);\n```\n\n----------------------------------------\n\nTITLE: Regular Expression Validation Example\nDESCRIPTION: Example of using regular expression pattern validation\nSOURCE: https://github.com/spiral/docs/blob/3.14/docs/en/validation/spiral.md#2025-04-20_snippet_14\n\nLANGUAGE: php\nCODE:\n```\n$validator = $validation->validate(\n    ['name' => 'b'],\n    [\n        'name' => [\n            'notEmpty',\n            ['regexp', '/^a+$/'] // aaa...\n        ]\n    ]\n);\n```\n\n----------------------------------------\n\nTITLE: Registering Bootloaders Using Methods in Kernel Class\nDESCRIPTION: Example showing how to register bootloaders using defineBootloaders and defineAppBootloaders methods in the Kernel class.\nSOURCE: https://github.com/spiral/docs/blob/3.14/docs/en/framework/bootloaders.md#2025-04-20_snippet_2\n\nLANGUAGE: php\nCODE:\n```\nnamespace App\\Application;\n\nuse App\\Application\\Bootloader\\RoutesBootloader;\nuse App\\Application\\Bootloader\\LoggingBootloader;\nuse App\\Application\\Bootloader\\MyBootloader;\n\nclass Kernel extends \\Spiral\\Framework\\Kernel\n{\n    public function defineBootloaders(): array\n    {\n        return [\n            // ...\n           RoutesBootloader::class,\n        ];\n    }\n\n    public function defineAppBootloaders(): array\n    {\n        return [\n           LoggingBootloader::class,\n           MyBootloader::class,\n           \n           // anonymous bootloader via object instance\n           new class extends Bootloader {\n               // ...\n           },\n       ];\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Creating CSRF Token Middleware for Views in Spiral\nDESCRIPTION: A custom middleware class that sets the CSRF token as a global variable for views in a Spiral application.\nSOURCE: https://github.com/spiral/docs/blob/3.14/docs/en/http/csrf.md#2025-04-20_snippet_8\n\nLANGUAGE: php\nCODE:\n```\nuse Psr\\Http\\Server\\MiddlewareInterface;\nuse Spiral\\Views\\GlobalVariablesInterface ;\n\nclass ViewCsrfTokenMiddleware implements MiddlewareInterface\n{\n    public function __construct(\n        private readonly GlobalVariablesInterface $globalVariables\n    ) {}\n    \n    public function process(\n        ServerRequestInterface $request, \n        RequestHandlerInterface $handler\n    ): ResponseInterface {\n        $this->globalVariables->set('csrfToken', $request->getAttribute('csrfToken'));\n        \n        return $handler->handle($request)->withAddedHeader('My-Header', 'my-value');\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Dispatching Job to Default Queue\nDESCRIPTION: Example of pushing a job to the default queue using QueueInterface\nSOURCE: https://github.com/spiral/docs/blob/3.14/docs/en/queue/jobs.md#2025-04-20_snippet_2\n\nLANGUAGE: php\nCODE:\n```\nuse App\\Endpoint\\Job\\SampleJob;\nuse Spiral\\Queue\\QueueInterface;\n\npublic function createJob(QueueInterface $queue): void\n{\n    $queue->push(SampleJob::class);\n}\n```\n\n----------------------------------------\n\nTITLE: Using Serializer in a Queue Class\nDESCRIPTION: Shows how to use the new serializer component in a Queue class to serialize payloads before pushing them to a pipeline.\nSOURCE: https://github.com/spiral/docs/blob/3.14/docs/en/cookbook/migration-from-v2.md#2025-04-20_snippet_21\n\nLANGUAGE: php\nCODE:\n```\nclass Queue \n{\n    public function __construct(\n        private readonly PipelineInterface $pipeline,\n        private readonly \\Spiral\\Serializer\\SerializerInterface $serializer,\n    ) {}\n\n    public function push(array $payload): void\n    {\n        $this->pipeline->push(\n            $this-serializer->serialize($payload),\n        );\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Acquiring Read Locks in Spiral\nDESCRIPTION: Shows how to acquire read locks that allow multiple processes to access a resource simultaneously for reading, preventing exclusive write access.\nSOURCE: https://github.com/spiral/docs/blob/3.14/docs/en/advanced/locks.md#2025-04-20_snippet_7\n\nLANGUAGE: php\nCODE:\n```\n$id = $lock->lockRead('pdf:create', ttl: 100000);\n// or\n$id = $lock->lockRead('pdf:create', ttl: new \\DateInterval('PT10S'));\n\n// Acquire lock and wait 5 microseconds until lock will be released\n$id = $lock->lockRead('pdf:create', wait: 5);\n// or\n$id = $lock->lockRead('pdf:create', wait: new \\DateInterval('PT5S'));\n\n// Acquire lock with id - 14e1b600-9e97-11d8-9f32-f2801f1b9fd1\n$id = $lock->lockRead('pdf:create', id: '14e1b600-9e97-11d8-9f32-f2801f1b9fd1');\n```\n\n----------------------------------------\n\nTITLE: Defining Container Bindings Using Methods\nDESCRIPTION: Example of using defineBindings and defineSingletons methods for declarative container binding definition.\nSOURCE: https://github.com/spiral/docs/blob/3.14/docs/en/framework/bootloaders.md#2025-04-20_snippet_13\n\nLANGUAGE: php\nCODE:\n```\nnamespace App\\Application\\Bootloader;\n\n// ...\nuse Spiral\\Core\\BinderInterface;\nuse App\\Service\\Github\\GithubConfig;\nuse App\\Service\\Github\\ClientInterface;\nuse App\\Service\\Github\\Client;\n\nfinal class GithubClientBootloader extends Bootloader\n{\n    public function defineSingletons(): array\n    {\n        return [\n            MyInterface::class => MyClass::class\n        ];\n    }\n\n    public function defineSingletons(): array\n    {\n        return [\n            ClientInterface::class => [self::class, 'createClient'],\n            \n            // or\n            \n            ClientInterface::class => static fn(GithubConfig $config) => new Client(\n                $config->getAccessToken(),\n                $config->getSecret(),\n            )\n        ];\n    }\n\n    // See code above ...\n    \n    public function createClient(GithubConfig $config): ClientInterface \n    {\n        return new Client(\n            $config->getAccessToken(),\n            $config->getSecret(),\n        );\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Production Mode Confirmation\nDESCRIPTION: Example of implementing production mode confirmation in console commands.\nSOURCE: https://github.com/spiral/docs/blob/3.14/docs/en/console/commands.md#2025-04-20_snippet_17\n\nLANGUAGE: php\nCODE:\n```\nuse Spiral\\Console\\Confirmation\\ApplicationInProduction;\n\nfinal class MigrateCommand extends Command\n{\n    protected const NAME = 'db:migrate';\n\n    public function perform(ApplicationInProduction $confirmation): int\n    {\n        if (!$confirmation->confirmToProceed()) {\n            return self::FAILURE;\n        }\n        \n        // run migrations...\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Clearing All Cache Items in PHP\nDESCRIPTION: Removes all items from the cache using the clear method, which effectively empties the entire cache storage.\nSOURCE: https://github.com/spiral/docs/blob/3.14/docs/en/basics/cache.md#2025-04-20_snippet_13\n\nLANGUAGE: php\nCODE:\n```\n$this->cache->clear();\n```\n\n----------------------------------------\n\nTITLE: Creating ThreadFactory for Test Data Generation in PHP\nDESCRIPTION: This factory class generates Thread entities with fake sentence data for testing. It defines the entity structure and provides methods to create thread instances.\nSOURCE: https://github.com/spiral/docs/blob/3.14/docs/zh-CN/cookbook/simple-chat.md#2025-04-20_snippet_8\n\nLANGUAGE: terminal\nCODE:\n```\nphp app.php create:factory ThreadFactory\n```\n\nLANGUAGE: php\nCODE:\n```\nnamespace Database\\Factory;\n\nuse App\\Database\\Thread;\nuse Spiral\\DatabaseSeeder\\Factory\\AbstractFactory;\n\nfinal class ThreadFactory extends AbstractFactory\n{\n    public function entity(): string\n    {\n        return Thread::class;\n    }\n\n    public function makeEntity(array $definition): Thread\n    {\n        return new Thread(\n            name: $definition['name']\n        );\n    }\n\n    public function definition(): array\n    {\n        return [\n            'name' => $this->faker->sentence,\n        ];\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Converted Controller with Dependency Injection\nDESCRIPTION: Shows the same controller after converting prototype properties to proper dependency injection using the prototype:inject command.\nSOURCE: https://github.com/spiral/docs/blob/3.14/docs/en/basics/prototype.md#2025-04-20_snippet_3\n\nLANGUAGE: php\nCODE:\n```\nnamespace App\\Endpoint\\Web;\n\nuse App\\Database\\Repository\\UserRepository;\nuse Spiral\\Views\\ViewsInterface;\n\nclass HomeController\n{\n    public function __construct(\n        private readonly ViewsInterface $views, \n        private readonly UserRepository $users\n    ) {\n    }\n\n    public function index(): string\n    {\n        return $this->views->render('profile', [\n            'user' => $this->users->findByName('Antony')\n        ]);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Centrifugo\nDESCRIPTION: JSON configuration for Centrifugo server including API endpoints and connection settings.\nSOURCE: https://github.com/spiral/docs/blob/3.14/docs/en/cookbook/simple-chat.md#2025-04-20_snippet_3\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"allowed_origins\": [\n    \"*\"\n  ],\n  \"proxy_connect\": true,\n  \"address\": \"127.0.0.1\",\n  \"port\": 8081,\n  \"grpc_api\": true,\n  \"grpc_api_address\": \"127.0.0.1\",\n  \"grpc_api_port\": 10000,\n  \"proxy_connect_endpoint\": \"grpc://127.0.0.1:10001\",\n  \"proxy_connect_timeout\": \"10s\",\n  \"proxy_rpc_endpoint\": \"grpc://127.0.0.1:10001\",\n  \"proxy_rpc_timeout\": \"10s\"\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Default Actor and Roles in Spiral Bootloader\nDESCRIPTION: Bootloader class for setting up a default Actor with the 'user' role and configuring RBAC permissions in a Spiral application.\nSOURCE: https://github.com/spiral/docs/blob/3.14/docs/en/security/rbac.md#2025-04-20_snippet_2\n\nLANGUAGE: php\nCODE:\n```\nnamespace App\\Bootloader;\n\nuse Spiral\\Boot\\Bootloader\\Bootloader;\nuse Spiral\\Core\\Container;\nuse Spiral\\Security\\Actor\\Actor;\nuse Spiral\\Security\\ActorInterface;\nuse Spiral\\Security\\PermissionsInterface;\n\nclass ActorBootloader extends Bootloader\n{\n    public function boot(Container $container, PermissionsInterface $rbac): void\n    {\n        $container->bindSingleton(ActorInterface::class, new Actor(['user']));\n\n        $rbac->addRole('user');\n        $rbac->associate('user', 'home.read');\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: RoadRunner Bridge Integration\nDESCRIPTION: PHP code showing how to integrate RoadRunner bridge bootloaders in a Spiral application.\nSOURCE: https://github.com/spiral/docs/blob/3.14/docs/en/start/server.md#2025-04-20_snippet_5\n\nLANGUAGE: php\nCODE:\n```\nuse Spiral\\RoadRunnerBridge\\Bootloader as RoadRunnerBridge;\n\npublic function defineBootloaders(): array\n{\n    return [\n        RoadRunnerBridge\\HttpBootloader::class,\n        RoadRunnerBridge\\QueueBootloader::class,\n        RoadRunnerBridge\\CacheBootloader::class,\n        RoadRunnerBridge\\GRPCBootloader::class,\n        RoadRunnerBridge\\CommandBootloader::class,\n        RoadRunnerBridge\\TcpBootloader::class,\n        RoadRunnerBridge\\MetricsBootloader::class,\n        RoadRunnerBridge\\LoggerBootloader::class,\n    ];\n}\n```\n\n----------------------------------------\n\nTITLE: Dispatching an Event from a Service\nDESCRIPTION: Example of a service class that injects an EventDispatcherInterface and dispatches a UserWasCreated event after creating a user.\nSOURCE: https://github.com/spiral/docs/blob/3.14/docs/en/advanced/events.md#2025-04-20_snippet_7\n\nLANGUAGE: php\nCODE:\n```\nnamespace App\\Service;\n\nuse Psr\\EventDispatcher\\EventDispatcherInterface;\nuse App\\Event\\UserWasCreated;\n\nfinal class UserService \n{\n    public function __construct(\n        private readonly EventDispatcherInterface $dispatcher\n    ) {\n    }\n\n    public function create(string $username): User\n    {\n        $user = new User(username: $username);\n        // ...\n        $this->dispatcher->dispatch(new UserWasCreated($user));\n        \n        return $user;\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing BladeView Class in Spiral Framework\nDESCRIPTION: This class implements the ViewInterface for Blade views. It includes a constructor to initialize the Blade compiler engine and filepath, and a render method to generate the view output.\nSOURCE: https://github.com/spiral/docs/blob/3.14/docs/en/views/basics.md#2025-04-20_snippet_14\n\nLANGUAGE: php\nCODE:\n```\nuse Spiral\\Views\\ViewInterface;\nuse Illuminate\\View\\Engines\\CompilerEngine;\n\nclass BladeView implements ViewInterface\n{\n    public function __construct(\n        private readonly CompilerEngine $blade, \n        private readonly string $filepath\n    ) { \n    }\n    \n    public function render(array $data = []): string\n    {\n        return $this->blade->get($this->filepath, $data);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Event Listeners in Spiral\nDESCRIPTION: Examples of creating event listeners using PHP attributes. Shows different ways to configure listeners, including specifying the event, method, and priority.\nSOURCE: https://github.com/spiral/docs/blob/3.14/docs/zh-CN/advanced/events.md#2025-04-20_snippet_3\n\nLANGUAGE: php\nCODE:\n```\nnamespace App\\Listener;\n\nuse App\\Event\\UserWasCreated;\nuse Spiral\\Events\\Attribute\\Listener;\n\n#[Listener]\nclass UserWasCreatedListener\n{\n    public function __invoke(UserWasCreated $event): void\n    {\n        // ...\n    }\n}\n```\n\nLANGUAGE: php\nCODE:\n```\nnamespace App\\Listener;\n\nuse App\\Event\\UserWasCreated;\nuse Spiral\\Events\\Attribute\\Listener;\n\n#[Listener(event: UserWasCreated::class, method: 'onUserWasCreated', priority: 1)]\nclass UserWasCreatedListener\n{\n    public function onUserWasCreated(UserWasCreated $event): void\n    {\n        // ...\n    }\n}\n```\n\nLANGUAGE: php\nCODE:\n```\nnamespace App\\Listener;\n\nuse App\\Event\\UserWasCreated;\nuse Spiral\\Events\\Attribute\\Listener;\n\nclass UserWasCreatedListener\n{\n    #[Listener(event: UserWasCreated::class, priority: 1)]\n    public function onUserWasCreated(UserWasCreated $event): void\n    {\n        // ...\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Custom Mail Transport in Spiral PHP\nDESCRIPTION: Demonstrates how to create and use a custom mail transport using a Round Robin algorithm with multiple DSN transports.\nSOURCE: https://github.com/spiral/docs/blob/3.14/docs/zh-CN/advanced/sendit.md#2025-04-20_snippet_2\n\nLANGUAGE: php\nCODE:\n```\nuse Spiral\\Boot\\Bootloader\\Bootloader;\nuse Symfony\\Component\\Mailer\\Transport\\TransportInterface;\nuse Symfony\\Component\\Mailer\\Transport\\RoundRobinTransport;\nuse Symfony\\Component\\Mailer\\Transport;\n\nclass AppBootloader extends Bootloader\n{\n    protected const DEPENDENCIES = [\n        \\Spiral\\SendIt\\Bootloader\\MailerBootloader::class,\n    ];\n    \n    protected const SINGLETONS = [\n        TransportInterface::class => [self::class, 'initTransport'],\n    ];\n    \n    public function initTransport(): TransportInterface\n    {\n        $transports = [];\n        \n        $dsns = [\n            'smtp://...',\n            'smtp://...',\n            // ...\n        ];\n\n        foreach($dsns as $dsn) {\n            $transports[] = Transport::fromDsn($dsn);\n        }\n\n        return new RoundRobinTransport($transports);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: RESTful Controller Implementation\nDESCRIPTION: Example of a controller class implementing RESTful methods for different HTTP verbs.\nSOURCE: https://github.com/spiral/docs/blob/3.14/docs/en/http/routing.md#2025-04-20_snippet_48\n\nLANGUAGE: php\nCODE:\n```\nnamespace App\\Endpoint\\Web;\n\nclass UserController\n{\n    public function getUser($id): string\n    {\n        return \"get {$id}\";\n    }\n\n    public function postUser($id): string\n    {\n        return \"post {$id}\";\n    }\n\n    public function deleteUser($id): string\n    {\n        return \"delete {$id}\";\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining ActorInterface for Role-Based Access Control in PHP\nDESCRIPTION: Interface definition for ActorInterface, which is used to retrieve roles associated with the current actor in the Spiral security component.\nSOURCE: https://github.com/spiral/docs/blob/3.14/docs/en/security/rbac.md#2025-04-20_snippet_0\n\nLANGUAGE: php\nCODE:\n```\ninterface ActorInterface\n{\n    public function getRoles(): array;\n}\n```\n\n----------------------------------------\n\nTITLE: Session Error Handler Implementation\nDESCRIPTION: Service class for managing error messages in session storage with prototype pattern integration.\nSOURCE: https://github.com/spiral/docs/blob/3.14/docs/en/cookbook/simple-chat.md#2025-04-20_snippet_34\n\nLANGUAGE: php\nCODE:\n```\nnamespace App\\Entrypoint\\Web;\n\nuse Spiral\\Prototype\\Annotation\\Prototyped;\nuse Spiral\\Prototype\\Traits\\PrototypeTrait;\nuse Spiral\\Session\\SessionSectionInterface;\n\n#[Prototyped(property: 'errors')]\nfinal class SessionErrors\n{\n    use PrototypeTrait;\n    \n    public function clear(): void\n    {\n        $this->session()->clear();\n    }\n\n    /**\n     * @return array<non-empty-string, non-empty-string[]>\n     */\n    public function getErrors(): array\n    {\n        $errors = $this->session()->getAll();\n        \n        // clear errors after reading\n        $this->clear();\n\n        return $errors;\n    }\n\n    /**\n     * @param non-empty-string $key\n     * @param non-empty-string $error\n     */\n    public function addError(string $key, string $error): void\n    {\n        $this->session()->set($key, $error);\n    }\n    \n    private function session(): SessionSectionInterface\n    {\n        return $this->session->getSection('errors');\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Registering ErrorHandlerMiddleware in RoutesBootloader\nDESCRIPTION: Adds the ErrorHandlerMiddleware to the global middleware list via RoutesBootloader. This middleware intercepts and handles exceptions in the HTTP pipeline.\nSOURCE: https://github.com/spiral/docs/blob/3.14/docs/en/http/errors.md#2025-04-20_snippet_2\n\nLANGUAGE: php\nCODE:\n```\nnamespace App\\Application\\Bootloader;\n\nuse Spiral\\Http\\Middleware\\ErrorHandlerMiddleware;\n\nfinal class RoutesBootloader extends BaseRoutesBootloader\n{\n    protected function globalMiddleware(): array\n    {\n        return [\n            ErrorHandlerMiddleware::class,\n           // ...\n        ];\n    }\n\n    // ...\n}\n```\n\n----------------------------------------\n\nTITLE: Basic Temporal Workflow Structure in PHP\nDESCRIPTION: Initial structure of a Temporal workflow class in PHP, including the necessary namespace, interface, and method declarations.\nSOURCE: https://github.com/spiral/docs/blob/3.14/docs/en/temporal/usage.md#2025-04-20_snippet_1\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\ndeclare(strict_types=1);\n\nnamespace App\\Endpoint\\Temporal\\Workflow;\n\nuse Temporal\\Workflow\\WorkflowInterface;\nuse Temporal\\Workflow\\WorkflowMethod;\n\n#[WorkflowInterface]\nclass WebsiteStatusWorkflow\n{\n    #[WorkflowMethod]\n    public function handle()\n    {\n        // TODO: Implement handle method\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Database Logger Configuration in PHP\nDESCRIPTION: Configuration example for database logging drivers in app/config/database.php.\nSOURCE: https://github.com/spiral/docs/blob/3.14/docs/en/basics/orm.md#2025-04-20_snippet_16\n\nLANGUAGE: php\nCODE:\n```\nreturn [\n    'logger' => [\n        'default' => null,\n        'drivers' => [],\n    ],\n\n    // ...\n];\n```\n\n----------------------------------------\n\nTITLE: Implementing Route-Specific Middleware in PHP\nDESCRIPTION: Shows the implementation of a ParamWatcher middleware that checks the 'param' route parameter and throws an UnauthorizedException if it equals 'forbidden'.\nSOURCE: https://github.com/spiral/docs/blob/3.14/docs/en/http/routing.md#2025-04-20_snippet_38\n\nLANGUAGE: php\nCODE:\n```\nnamespace App\\Middleware;\n\nuse Psr\\Http\\Message\\ResponseInterface as Response;\nuse Psr\\Http\\Message\\ServerRequestInterface as Request;\nuse Psr\\Http\\Server\\MiddlewareInterface;\nuse Psr\\Http\\Server\\RequestHandlerInterface;\nuse Spiral\\Http\\Exception\\ClientException\\UnauthorizedException;\nuse Spiral\\Router\\RouteInterface;\n\nclass ParamWatcher implements MiddlewareInterface\n{\n    public function process(Request $request, RequestHandlerInterface $handler): Response\n    {\n        /** @var RouteInterface $route */\n        $route = $request->getAttribute('route');\n\n        if ($route->getMatches()['param'] === 'forbidden') {\n           throw new UnauthorizedException();\n        }\n\n        return $handler->handle($request);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Adding DumperBootloader to Kernel Using Method Approach\nDESCRIPTION: Registers the Spiral Dumper bootloader in the application kernel using the defineSystemBootloaders method.\nSOURCE: https://github.com/spiral/docs/blob/3.14/docs/en/basics/debug.md#2025-04-20_snippet_1\n\nLANGUAGE: php\nCODE:\n```\npublic function defineSystemBootloaders(): array\n{\n    return [\n        // ...\n        \\Spiral\\Debug\\Bootloader\\DumperBootloader::class,\n    ];\n}\n```\n\n----------------------------------------\n\nTITLE: Using Default Cache Storage in Spiral Service\nDESCRIPTION: Demonstrates injecting and using the default cache storage in a Spiral service class using PSR-16 CacheInterface.\nSOURCE: https://github.com/spiral/docs/blob/3.14/docs/en/basics/cache.md#2025-04-20_snippet_3\n\nLANGUAGE: php\nCODE:\n```\nnamespace App\\Service;\n\nuse Psr\\SimpleCache\\CacheInterface;\n\nfinal class UserService\n{\n    public function __construct(\n        private readonly CacheInterface $cache,\n    ) {\n    }\n\n    public function find(int $id): User\n    {\n        // ...\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Basic Stempler View Template\nDESCRIPTION: Simple template demonstrating basic variable interpolation in Stempler.\nSOURCE: https://github.com/spiral/docs/blob/3.14/docs/en/views/stempler.md#2025-04-20_snippet_0\n\nLANGUAGE: php\nCODE:\n```\nHello, {{ $name }}!\n```\n\n----------------------------------------\n\nTITLE: Registering gRPC Client in Container\nDESCRIPTION: Bootloader implementation for registering the PingerClient as a singleton in the application container with configuration options.\nSOURCE: https://github.com/spiral/docs/blob/3.14/docs/en/grpc/client.md#2025-04-20_snippet_1\n\nLANGUAGE: php\nCODE:\n```\nnamespace App\\Application\\Bootloader;\n\nuse App\\Service\\PingerClient;\nuse GRPC\\Pinger\\PingerInterface;\nuse Spiral\\Boot\\Bootloader\\Bootloader;\nuse Spiral\\Boot\\EnvironmentInterface;\n\nfinal class AppBootloader extends Bootloader\n{\n    protected const SINGLETONS = [\n        PingerInterface::class => [self::class, 'initPingService'],\n    ];\n\n    private function initPingService(\n        EnvironmentInterface $env\n    ): PingerInterface {\n        return new PingerClient(\n            $env->get('PING_SERVICE_HOST', '127.0.0.1:9001'),\n            ['credentials' => \\Grpc\\ChannelCredentials::createInsecure()],\n        );\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing PSR-14 EventDispatcherInterface in PHP\nDESCRIPTION: Core implementation of the EventDispatcher class that implements PSR-14 EventDispatcherInterface, providing the foundational structure for event dispatching.\nSOURCE: https://github.com/spiral/docs/blob/3.14/docs/en/advanced/events.md#2025-04-20_snippet_14\n\nLANGUAGE: php\nCODE:\n```\nnamespace App\\EventDispatcher;\n\nuse Psr\\EventDispatcher\\EventDispatcherInterface;\n\nfinal class EventDispatcher implements EventDispatcherInterface\n{\n    public function dispatch(object $event)\n    {\n        // ...\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Automatic Channel Subscription in Centrifugo Connect Handler\nDESCRIPTION: An example of a Centrifugo connection handler that automatically subscribes users to specified channels upon connection. It demonstrates how to use the 'channels' field in the ConnectResponse.\nSOURCE: https://github.com/spiral/docs/blob/3.14/docs/en/websockets/services.md#2025-04-20_snippet_2\n\nLANGUAGE: php\nCODE:\n```\nnamespace App\\Endpoint\\Centrifugo;\n\nuse RoadRunner\\Centrifugo\\Request\\Connect;\nuse RoadRunner\\Centrifugo\\Payload\\ConnectResponse;\nuse RoadRunner\\Centrifugo\\Request\\RequestInterface;\nuse Spiral\\RoadRunnerBridge\\Centrifugo\\ServiceInterface;\n\nclass ConnectService implements ServiceInterface\n{\n    /** @param Connect $request */\n    public function handle(RequestInterface $request): void\n    {\n        try {\n            $request->respond(\n                // Return an empty string for accepting unauthenticated requests\n                new ConnectResponse(\n                  user: '',\n                   // List of channels to subscribe to on connect to Centrifugo\n                  channels: [\n                     'public',\n                     ...\n                  ],\n                )\n            );\n        } catch (\\Throwable $e) {\n            $request->error($e->getCode(), $e->getMessage());\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Using SessionScope with PrototypeTrait in Spiral PHP\nDESCRIPTION: Shows how to use SessionScope with PrototypeTrait to access session data in singleton services and controllers without directly injecting the session.\nSOURCE: https://github.com/spiral/docs/blob/3.14/docs/en/basics/session.md#2025-04-20_snippet_2\n\nLANGUAGE: php\nCODE:\n```\nuse Spiral\\Prototype\\Traits\\PrototypeTrait;\n\nclass HomeController\n{\n    use PrototypeTrait;\n\n    public function index(): void\n    {\n        dump($this->session->getSection('cart')->getAll());\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Custom Input Bag for File Uploads in Spiral 3.0\nDESCRIPTION: Example demonstrating how to define a custom input bag for handling file uploads using Symfony's FilesBag, enhancing the framework's request handling capabilities.\nSOURCE: https://github.com/spiral/docs/blob/3.14/docs/en/cookbook/migration-from-v2.md#2025-04-20_snippet_4\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\ndeclare(strict_types=1);\n\nnamespace App\\Bootloader;\n\nuse Spiral\\Boot\\Bootloader\\Bootloader;\nuse Spiral\\Bootloader\\Http\\HttpBootloader;\nuse Spiral\\Validation\\Symfony\\Http\\Request\\FilesBag;\n\nclass SampleBootloader extends Bootloader\n{\n    public function init(HttpBootloader $http): void\n    {\n        $http->addInputBag('symfonyFiles', [\n            'class'  => FilesBag::class,\n            'source' => 'getUploadedFiles',\n            'alias' => 'symfony-file'\n        ]);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Simplified WebSocket Connect Service with Error Handling in PHP\nDESCRIPTION: Example of a WebSocket connection service utilizing the error handling interceptor, demonstrating simplified error handling without try/catch blocks.\nSOURCE: https://github.com/spiral/docs/blob/3.14/docs/en/websockets/interceptors.md#2025-04-20_snippet_3\n\nLANGUAGE: php\nCODE:\n```\nnamespace App\\Endpoint\\Centrifugo;\n/**\n * @param Connect $request\n */\npublic function handle(RequestInterface $request): void\n{\n    if (!$this->auth->isAuthenticated()) {\n        thorw new \\Exception('Unauthorized', 403);\n    }\n    \n    $request->respond(\n        ...\n    );\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Broadcast Authorization Guard in PHP\nDESCRIPTION: Implementation of GuardInterface for broadcast authorization. Handles topic authorization checks and request validation.\nSOURCE: https://github.com/spiral/docs/blob/3.14/docs/en/websockets/broadcasting.md#2025-04-20_snippet_11\n\nLANGUAGE: php\nCODE:\n```\nuse Pusher\\Pusher;\nuse Spiral\\Broadcasting\\AuthorizationStatus;\nuse Psr\\Http\\Message\\ServerRequestInterface;\nuse Spiral\\Core\\InvokerInterface;\nuse Spiral\\Core\\ScopeInterface;\nuse Spiral\\Broadcasting\\TopicRegistryInterface;\n\nfinal class PusherBroadcaster extends AbstractBroadcast implements \\Spiral\\Broadcasting\\GuardInterface\n{\n    public function __construct(\n        private readonly Pusher $pusher,\n        private readonly InvokerInterface $invoker,\n        private readonly ScopeInterface $scope,\n        private readonly TopicRegistryInterface $topics\n    ) {\n    }\n\n    // ...\n    \n    public function authorize(ServerRequestInterface $request): AuthorizationStatus\n    {\n        $topic = $request->getQueryParams()['channel_name'] ?? null;\n        \n        if (!\\is_string($topic)) {\n            return new AuthorizationStatus(false, []);\n        }\n        \n        if (!$this->authorizeTopic($request, $topic)) {\n            return new AuthorizationStatus(false, [$topic]);\n        }\n\n        return new AuthorizationStatus(true, [$topic]);\n    }\n    \n    \n    private function authorizeTopic(ServerRequestInterface $request, string $topic): bool\n    {\n        $parameters = [];\n        $callback = $this->topics->findCallback($topic, $parameters);\n        if ($callback === null) {\n            return false;\n        }\n\n        return $this->invoke($request, $callback, $parameters + ['topic' => $topic]);\n    }\n\n    private function invoke(ServerRequestInterface $request, callable $callback, array $parameters = []): bool\n    {\n        return $this->scope->runScope(\n            [\n                ServerRequestInterface::class => $request,\n            ],\n            fn (): bool => $this->invoker->invoke($callback, $parameters)\n        );\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Database Seeder in PHP\nDESCRIPTION: Example of creating a seeder class that extends AbstractSeeder to populate the database with test data. Demonstrates generating users with different states using factories.\nSOURCE: https://github.com/spiral/docs/blob/3.14/docs/en/testing/database.md#2025-04-20_snippet_11\n\nLANGUAGE: php\nCODE:\n```\nnamespace Database\\Seeder;\n\nuse Spiral\\DatabaseSeeder\\Seeder\\AbstractSeeder;\nuse Spiral\\DatabaseSeeder\\Attribute\\Seeder;\n\n#[Seeder]\nfinal class UserTableSeeder extends AbstractSeeder\n{\n    public function run(): \\Generator\n    {\n        foreach (UserFactory::new()->times(100)->make() as $user) {\n            yield $user;\n        }\n        \n        foreach (UserFactory::new()->admin()->times(10)->make() as $user) {\n            yield $user;\n        }\n        \n        foreach (UserFactory::new()->admin()->deleted()->times(1)->make() as $user) {\n            yield $user;\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring S3 Storage Server in PHP\nDESCRIPTION: Example configuration for an S3 storage server in Spiral, including required and optional parameters such as region, bucket, credentials, and additional options.\nSOURCE: https://github.com/spiral/docs/blob/3.14/docs/en/advanced/storage.md#2025-04-20_snippet_7\n\nLANGUAGE: php\nCODE:\n```\nreturn [\n    'servers' => [\n        'local' => [\n            'adapter' => 's3',\n            'region' => env('S3_REGION'),\n            'version' => env('S3_VERSION', 'latest'),\n            'bucket' => env('S3_BUCKET'),\n            'key' => env('S3_KEY'),\n            'secret' => env('S3_SECRET'),\n            'token' => env('S3_TOKEN', null),\n            'expires' => env('S3_EXPIRES', null),\n            'visibility' => env('S3_VISIBILITY', 'public'),\n            'prefix' => '',\n            'endpoint' => env('S3_ENDPOINT', null),\n            'options' => [\n                'use_path_style_endpoint' => true,\n            ]\n        ],\n    ],\n\n    'buckets' => [\n        'bucket' => [\n            'server' => 's3',\n            'visibility' => env('S3_VISIBILITY', 'public'),\n            'bucket' => env('S3_BUCKET', null),\n            'region' => env('S3_REGION', null),\n            'prefix' => 'custom-directory',\n        ]\n    ]\n];\n```\n\n----------------------------------------\n\nTITLE: Logging Out a User in PHP using Spiral Framework\nDESCRIPTION: This snippet shows how to log out a user by calling the close() method on the AuthContextInterface in a Spiral Framework controller.\nSOURCE: https://github.com/spiral/docs/blob/3.14/docs/en/cookbook/user-authentication.md#2025-04-20_snippet_6\n\nLANGUAGE: php\nCODE:\n```\npublic function logout(): void\n{\n    $this->auth->close();\n}\n```\n\n----------------------------------------\n\nTITLE: Publishing Messages to Centrifugo Channel in PHP\nDESCRIPTION: Shows how to use the publish method of the Centrifugo API to send a message to a specific channel. This method allows for publishing data with optional parameters like skipping history and adding tags.\nSOURCE: https://github.com/spiral/docs/blob/3.14/docs/en/websockets/api.md#2025-04-20_snippet_1\n\nLANGUAGE: PHP\nCODE:\n```\npublic function handle(User $user, Channel $channel): void\n{\n    $this->api->publish($channel->getName(), 'Hello world!');\n}\n```\n\n----------------------------------------\n\nTITLE: Declaring Metrics in PHP Bootloader\nDESCRIPTION: This PHP code demonstrates how to declare metrics in a Spiral bootloader class using the MetricsInterface.\nSOURCE: https://github.com/spiral/docs/blob/3.14/docs/en/advanced/prometheus-metrics.md#2025-04-20_snippet_3\n\nLANGUAGE: php\nCODE:\n```\nuse Spiral\\RoadRunner\\Metrics\\MetricsInterface;\nuse Spiral\\RoadRunner\\Metrics\\Collector;\n\nclass MetricsBootloader extends Bootloader\n{\n    //...\n\n    public function boot(MetricsInterface $metrics): void\n    {\n        $metrics->declare(\n            'registered_users',\n            Collector::counter()->withHelp('Total registered users counter.')\n        );\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Filter Schema with Attributes\nDESCRIPTION: Example of defining a filter schema using attributes to map request data to filter properties.\nSOURCE: https://github.com/spiral/docs/blob/3.14/docs/en/filters/filter.md#2025-04-20_snippet_7\n\nLANGUAGE: php\nCODE:\n```\nnamespace App\\Endpoint\\Web\\Filter;\n\nuse Spiral\\Filters\\Attribute\\Input\\Post;\n\nclass MyFilter implements FilterInterface\n{\n    #[Post(key: 'text')]\n    public string $text;\n}\n```\n\n----------------------------------------\n\nTITLE: Using an Injectable Enum in a Command Class\nDESCRIPTION: Demonstrates how to use an injectable enum in a command class to check the application environment.\nSOURCE: https://github.com/spiral/docs/blob/3.14/docs/en/cookbook/migration-from-v2.md#2025-04-20_snippet_18\n\nLANGUAGE: php\nCODE:\n```\nclass MigrateCommand extends Command \n{\n    const NAME = '...';\n\n    // Resolve and detect current environment\n    public function perform(AppEnvironment $appEnv): int\n    {\n        if ($appEnv->isProduction()) {\n            // Deny\n            return 0;\n        }\n\n        // ...\n        return 1;\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Basic Queue Job Push Example\nDESCRIPTION: Example of pushing a job to the queue using the job handler class name.\nSOURCE: https://github.com/spiral/docs/blob/3.14/docs/en/queue/jobs.md#2025-04-20_snippet_9\n\nLANGUAGE: php\nCODE:\n```\nuse Spiral\\Queue\\QueueInterface;\n\npublic function createJob(QueueInterface $queue): void\n{\n    $queue->push('sample::job');\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Custom Security Rule for RBAC in PHP\nDESCRIPTION: Example of implementing a custom rule for the RBAC system. This rule uses method parameters as context to determine if access is allowed based on a user's ID.\nSOURCE: https://github.com/spiral/docs/blob/3.14/docs/en/http/interceptors.md#2025-04-20_snippet_8\n\nLANGUAGE: php\nCODE:\n```\nnamespace App\\Application\\Security;\n\nuse Spiral\\Security\\ActorInterface;\nuse Spiral\\Security\\RuleInterface;\n\nclass SampleRule implements RuleInterface\n{\n    public function allows(ActorInterface $actor, string $permission, array $context): bool\n    {\n        return $context['user']->getID() !== 1;\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Route Bootloader for API Endpoints in PHP\nDESCRIPTION: Implementation of RoutesBootloader showing how to configure routes for different HTTP verbs targeting the same controller.\nSOURCE: https://github.com/spiral/docs/blob/3.14/docs/en/http/routing.md#2025-04-20_snippet_51\n\nLANGUAGE: php\nCODE:\n```\nnamespace App\\Application\\Bootloader;\n\nuse App\\Controller\\UserController;\nuse Spiral\\Boot\\Bootloader\\Bootloader;\nuse Spiral\\Router\\Route;\nuse Spiral\\Router\\RouterInterface;\nuse Spiral\\Router\\Target\\Group;\n\nclass RoutesBootloader extends Bootloader\n{\n    public function boot(RouterInterface $router): void\n    {\n        $resource = new Route('/v1/<controller>/<id>', new Group([\n            'user' => UserController::class,\n        ]));\n\n        $router->setRoute(\n            'resource.get',\n            $resource->withVerbs('GET')->withDefaults(['action' => 'load'])\n        );\n\n        $router->setRoute(\n            'resource.store',\n            $resource->withVerbs('POST')->withDefaults(['action' => 'store'])\n        );\n\n        $router->setRoute(\n            'resource.delete',\n            $resource->withVerbs('DELETE')->withDefaults(['action' => 'delete'])\n        );\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing GRPC Response Error Handling Interceptor in PHP\nDESCRIPTION: This class implements a GRPC interceptor that processes the response and throws a GRPCException if the status code is not OK. It requires the Spiral Framework and RoadRunner GRPC package.\nSOURCE: https://github.com/spiral/docs/blob/3.14/docs/en/grpc/interceptors.md#2025-04-20_snippet_9\n\nLANGUAGE: php\nCODE:\n```\nnamespace App\\Service\\Interceptor;\n\nuse Spiral\\Core\\CoreInterceptorInterface;\nuse Spiral\\Core\\CoreInterface;\nuse Spiral\\RoadRunner\\GRPC;\n\nfinal class HandleResponseErrorsInterceptor implements CoreInterceptorInterface\n{\n    public function process(string $controller, string $action, array $parameters, CoreInterface $core): mixed\n    {\n        [$response, $status] = $core->callAction($controller, $action, $parameters);\n\n        $code = $status->code ?? GRPC\\StatusCode::UNKNOWN;\n\n        if ($code !== GRPC\\StatusCode::OK) {\n            throw new GRPC\\Exception\\GRPCException(\n                message: $status->details,\n                code: $status->code\n            );\n        }\n\n        return [$response, $code];\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Using Session Sections in Spiral PHP\nDESCRIPTION: Demonstrates how to allocate and use a named section in a session for isolated data storage. The example shows storing and retrieving items in a 'cart' section.\nSOURCE: https://github.com/spiral/docs/blob/3.14/docs/en/basics/session.md#2025-04-20_snippet_1\n\nLANGUAGE: php\nCODE:\n```\npublic function index(SessionInterface $session): void\n{\n    $cart = $session->getSection('cart');\n\n    $cart->set('items', ['my-items']);\n\n    dump($cart->getAll());\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing UserFactory in PHP for Spiral Framework\nDESCRIPTION: This code snippet defines a UserFactory class that extends AbstractFactory to generate User entities. It includes methods for creating user entities with random names using Faker.\nSOURCE: https://github.com/spiral/docs/blob/3.14/docs/en/cookbook/quick-start.md#2025-04-20_snippet_29\n\nLANGUAGE: php\nCODE:\n```\nnamespace Database\\Factory;\n\nuse App\\Database\\User;\nuse Spiral\\DatabaseSeeder\\Factory\\AbstractFactory;\n\nclass UserFactory extends AbstractFactory\n{\n    /**\n     * Returns a fully qualified database entity class name\n     */\n    public function entity(): string\n    {\n        return User::class;\n    }\n\n    /**\n     * Returns an entity\n     */\n    public function makeEntity(array $definition): User\n    {\n        return new User($definition['name']);\n    }\n\n    /**\n     * Returns array with generation rules\n     */\n    public function definition(): array\n    {\n        return [\n            'name' => $this->faker->name(),\n        ];\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing a User Controller with Data Grid\nDESCRIPTION: Example of a User Controller implementation using Data Grid for fetching and presenting user data.\nSOURCE: https://github.com/spiral/docs/blob/3.14/docs/en/component/data-grid.md#2025-04-20_snippet_8\n\nLANGUAGE: php\nCODE:\n```\nuse Spiral\\DataGrid\\GridInterface;\nuse Spiral\\DataGrid\\GridFactoryInterface;\nuse App\\Database\\UserRepository;\n\nclass UserController\n{\n    #[Route('/users')]\n    public function index(UserSchema $schema, GridFactoryInterface $factory, UserRepository $users): array\n    {\n        /** @var GridInterface $result */\n        $result = $factory->create($users->select(), $schema);\n        \n        $values = [];\n\n        foreach ([\n            GridInterface::FILTERS, \n            GridInterface::SORTERS, \n            GridInterface::COUNT, \n            GridInterface::PAGINATOR\n        ] as $key) {\n             $values[$key] = $result->getOption($key);\n        }\n        \n        return [\n            'users' => iterator_to_array($result),\n            'grid' => [\n                'values' => $values,\n            ],\n        ];\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Deploying Spiral Application with Deployer\nDESCRIPTION: This snippet shows how to use Deployer to deploy a Spiral application. It includes the command to run the deployment process and a note about handling deployment failures.\nSOURCE: https://github.com/spiral/docs/blob/3.14/docs/en/start/deployment.md#2025-04-20_snippet_7\n\nLANGUAGE: terminal\nCODE:\n```\n./vendor/bin/dep deploy\n```\n\n----------------------------------------\n\nTITLE: Creating ORM Entities with Scaffolder in Spiral\nDESCRIPTION: Terminal commands for creating Post, User, and Comment entities with predefined fields using the Scaffolder extension. These commands generate entity classes with appropriate fields and repositories.\nSOURCE: https://github.com/spiral/docs/blob/3.14/docs/en/cookbook/quick-start.md#2025-04-20_snippet_11\n\nLANGUAGE: terminal\nCODE:\n```\nphp app.php create:entity post -f id:primary -f title:string -f content:text -e\nphp app.php create:entity user -f id:primary -f name:string -e\nphp app.php create:entity comment -f id:primary -f message:string\n```\n\n----------------------------------------\n\nTITLE: Creating an Event Listener with Custom Method and Priority\nDESCRIPTION: Example of an event listener with a custom method name and priority specified in the Listener attribute.\nSOURCE: https://github.com/spiral/docs/blob/3.14/docs/en/advanced/events.md#2025-04-20_snippet_9\n\nLANGUAGE: php\nCODE:\n```\nnamespace App\\Listener;\n\nuse App\\Event\\UserWasCreated;\nuse Spiral\\Events\\Attribute\\Listener;\n\n#[Listener(event: UserWasCreated::class, method: 'onUserWasCreated', priority: 1)]\nclass UserWasCreatedListener\n{\n    public function onUserWasCreated(UserWasCreated $event): void\n    {\n        // ...\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Creating JSON Response with ResponseWrapper\nDESCRIPTION: Demonstrates creating a JSON response using the ResponseWrapper's json method. This method automatically sets the content-type to application/json and encodes the provided data.\nSOURCE: https://github.com/spiral/docs/blob/3.14/docs/en/http/request-response.md#2025-04-20_snippet_14\n\nLANGUAGE: php\nCODE:\n```\npublic function index(): ResponseInterface\n{\n    return $this->response->json(\n        ['something' => 123],\n        200\n    );\n}\n```\n\n----------------------------------------\n\nTITLE: Creating DTO for Job Payload\nDESCRIPTION: PHP class definition for a Data Transfer Object to be used as job payload.\nSOURCE: https://github.com/spiral/docs/blob/3.14/docs/en/cookbook/simple-queue-system.md#2025-04-20_snippet_9\n\nLANGUAGE: php\nCODE:\n```\nnamespace App\\DTO;\n\nfinal class Ping \n{\n    public function __construct(\n        public readonly string $url,\n    ) {}\n}\n```\n\n----------------------------------------\n\nTITLE: Centrifugo Server Configuration\nDESCRIPTION: JSON configuration for Centrifugo server including proxy endpoints and timeout settings for different event types.\nSOURCE: https://github.com/spiral/docs/blob/3.14/docs/en/websockets/configuration.md#2025-04-20_snippet_3\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"allowed_origins\": [\"*\"],\n  \"publish\": true,\n  \"proxy_publish\": true,\n  \"proxy_subscribe\": true,\n  \"proxy_connect\": true,\n  \"allow_subscribe_for_client\": true,\n  \"grpc_api\": true,\n  \"grpc_api_address\": \"0.0.0.0\",\n  \"grpc_api_port\": 10000,\n  \"proxy_connect_endpoint\": \"grpc://127.0.0.1:10001\",\n  \"proxy_connect_timeout\": \"10s\",\n  \"proxy_publish_endpoint\": \"grpc://127.0.0.1:10001\",\n  \"proxy_publish_timeout\": \"10s\",\n  \"proxy_subscribe_endpoint\": \"grpc://127.0.0.1:10001\",\n  \"proxy_subscribe_timeout\": \"10s\",\n  \"proxy_refresh_endpoint\": \"grpc://127.0.0.1c:10001\",\n  \"proxy_refresh_timeout\": \"10s\",\n  \"proxy_rpc_endpoint\": \"grpc://127.0.0.1:10001\",\n  \"proxy_rpc_timeout\": \"10s\"\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Routes with Attributes in Controller\nDESCRIPTION: Example of using Route attributes to define routes in a controller class.\nSOURCE: https://github.com/spiral/docs/blob/3.14/docs/en/cookbook/quick-start.md#2025-04-20_snippet_7\n\nLANGUAGE: php\nCODE:\n```\nnamespace App\\Endpoint\\Web;\n\nuse Spiral\\Router\\Annotation\\Route;\n\nfinal class HomeController\n{\n    #[Route(route: '/', name: 'index', methods: 'GET')]\n    public function index(): string\n    {\n        return 'hello world';\n    }\n    \n    #[Route(route: '/open/<id>', name: 'open', methods: 'GET')] \n    public function open(string $id)\n    {\n        dump($id);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Rendered PHP Enum Output\nDESCRIPTION: Shows the output of an enum declaration with cases, constants, methods, and attributes.\nSOURCE: https://github.com/spiral/docs/blob/3.14/docs/en/component/reactor.md#2025-04-20_snippet_18\n\nLANGUAGE: php\nCODE:\n```\n/**\n * Description of enum\n */\n#[SomeAttribute]\nenum MyEnum: string\n{\n    public const FOO = 'bar';\n\n    case First = 'first';\n    case Second = 'second';\n\n    public function getCase(): string\n    {\n        return self::First->value;\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Destroying a Session in Spiral PHP\nDESCRIPTION: Demonstrates how to completely destroy a session and all its content.\nSOURCE: https://github.com/spiral/docs/blob/3.14/docs/en/basics/session.md#2025-04-20_snippet_8\n\nLANGUAGE: php\nCODE:\n```\n$this->session->destroy();\n```\n\n----------------------------------------\n\nTITLE: Implementing PSR-6 and PSR-16 Cache for Attribute Readers\nDESCRIPTION: Example of creating cached readers using PSR-6 and PSR-16 cache implementations. Caching helps optimize and speed up metadata reading operations, especially when dealing with large amounts of data.\nSOURCE: https://github.com/spiral/docs/blob/3.14/docs/en/advanced/attributes.md#2025-04-20_snippet_23\n\nLANGUAGE: php\nCODE:\n```\nuse Spiral\\Attributes\\Psr6CachedReader;\nuse Spiral\\Attributes\\Psr16CachedReader;\nuse Spiral\\Attributes\\AttributeReader;\n\n$psr6reader = new Psr6CachedReader(\n    new AttributeReader(),\n    new SomePsr6CacheImplementation() // Any PSR-6 cache implementation\n);\n\n$psr16reader = new Psr16CachedReader(\n    new AttributeReader(),\n    new SomePsr6CacheImplementation() // Any PSR-16 cache implementation\n);\n```\n\n----------------------------------------\n\nTITLE: Configuring Stempler in Spiral Framework\nDESCRIPTION: Configuration file for Stempler in Spiral Framework, defining directives, processors, and visitors for different stages of template processing.\nSOURCE: https://github.com/spiral/docs/blob/3.14/docs/en/views/stempler.md#2025-04-20_snippet_61\n\nLANGUAGE: php\nCODE:\n```\nuse Spiral\\Stempler\\Builder;\nuse Spiral\\Stempler\\Directive;\nuse Spiral\\Stempler\\Transform\\Finalizer;\nuse Spiral\\Stempler\\Transform\\Visitor;\nuse Spiral\\Views\\Processor;\n\nreturn [\n    'directives' => [\n        // available Blade-style directives\n        Directive\\PHPDirective::class,\n        Directive\\RouteDirective::class,\n        Directive\\LoopDirective::class,\n        Directive\\JsonDirective::class,\n        Directive\\ConditionalDirective::class,\n        Directive\\ContainerDirective::class\n    ],\n    'processors' => [\n        // cache depended source processors (i.e. LocaleProcessor)\n        Processor\\ContextProcessor::class\n    ],\n    'visitors'   => [\n        Builder::STAGE_PREPARE   => [\n            // visitors to be invoked before transformations\n            Visitor\\DefineBlocks::class,\n            Visitor\\DefineAttributes::class,\n            Visitor\\DefineHidden::class\n        ],\n        Builder::STAGE_TRANSFORM => [\n            // visitors to be invoked during transformations\n        ],\n        Builder::STAGE_FINALIZE  => [\n            // visitors to be invoked on after the transformations is over\n            Visitor\\DefineStacks::class,\n            Finalizer\\StackCollector::class,\n        ],\n        Builder::STAGE_COMPILE   => [\n            // visitors to be invoked on compilation stage\n        ]\n    ]\n];\n```\n\n----------------------------------------\n\nTITLE: Configuring Cycle Entity Resolution Interceptor in PHP\nDESCRIPTION: Example of activating the CycleInterceptor in the application bootloader to automatically resolve entity injections based on route parameters.\nSOURCE: https://github.com/spiral/docs/blob/3.14/docs/en/http/interceptors.md#2025-04-20_snippet_1\n\nLANGUAGE: php\nCODE:\n```\nnamespace App\\Application\\Bootloader;\n\nuse Spiral\\Bootloader\\DomainBootloader;\nuse Spiral\\Core\\CoreInterface;\nuse Spiral\\Cycle\\Interceptor\\CycleInterceptor;\n\nclass AppBootloader extends DomainBootloader\n{\n    protected const SINGLETONS = [\n        CoreInterface::class => [self::class, 'domainCore']\n    ];\n\n    protected const INTERCEPTORS = [\n        // ...\n        CycleInterceptor::class,\n    ];\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Authentication Middleware with Scoped Container in PHP\nDESCRIPTION: Demonstrates implementation of authentication middleware that creates an auth scope and binds user data.\nSOURCE: https://github.com/spiral/docs/blob/3.14/docs/en/container/attributes.md#2025-04-20_snippet_2\n\nLANGUAGE: php\nCODE:\n```\nuse Psr\\Http\\Server\\MiddlewareInterface;\nuse Psr\\Http\\Message\\ResponseInterface as Response;\nuse Psr\\Http\\Message\\ServerRequestInterface as Request;\nuse Psr\\Http\\Server\\RequestHandlerInterface as Handler;\n\nfinal class AuthMiddleware implements MiddlewareInterface\n{\n    public function __construct(\n        private readonly ContainerInterface $container\n    ) {\n    }\n\n    public function process(Request $request, Handler $handler): Response\n    {\n        if ($request->hasHeader('Authorization')) {\n            $user = new AuthenticatedUser(1, 'John Doe', 'john.doe@example.com');\n\n            return $this->container->runScoped(\n                closure: function (ContainerInterface $container) use ($next, $request) {\n                    $authenticatedUser = $container->get(AuthenticatedUser::class);\n                    \n                    return $handler($request);\n                },\n                bindings: [AuthenticatedUser::class => $user],\n                name: 'auth'\n            );\n\n        } else {\n            return $handler($request);\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Creating an HTTP Middleware using Spiral CLI\nDESCRIPTION: Command to create a middleware class that implements PSR-15 MiddlewareInterface. Middleware modifies HTTP requests and responses as they pass through the application.\nSOURCE: https://github.com/spiral/docs/blob/3.14/docs/en/basics/scaffolding.md#2025-04-20_snippet_23\n\nLANGUAGE: terminal\nCODE:\n```\nphp app.php create:middleware <name>\n```\n\n----------------------------------------\n\nTITLE: Implementing Custom Pusher Broadcast Driver in PHP\nDESCRIPTION: Creates a custom broadcast driver for Pusher by extending AbstractBroadcast class. Implements the publish method to handle topic broadcasting via Pusher.\nSOURCE: https://github.com/spiral/docs/blob/3.14/docs/en/websockets/broadcasting.md#2025-04-20_snippet_9\n\nLANGUAGE: php\nCODE:\n```\nnamespace App\\Broadcast;\n\nuse Pusher\\Pusher;\nuse Spiral\\Broadcasting\\Driver\\AbstractBroadcast;\n\nfinal class PusherBroadcast extends AbstractBroadcast\n{ \n    public function __construct(\n        private readonly Pusher $pusher\n    ){\n    }\n    \n    public function publish(iterable|string|\\Stringable $topics, iterable|string $messages): void\n    {\n        $topics = $this->formatTopics($this->toArray($topics));\n        \n        /** @var string $message */\n        foreach ($this->toArray($messages) as $message) {\n            \\assert(\\is_string($message), 'Message argument must be a type of string');\n\n            $this->pusher->trigger($topics, $message, []);\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing SuppressErrorsInterface\nDESCRIPTION: Creates a custom SuppressErrors class implementing SuppressErrorsInterface to control whether exception details should be displayed. This provides programmatic control over error suppression.\nSOURCE: https://github.com/spiral/docs/blob/3.14/docs/en/http/errors.md#2025-04-20_snippet_4\n\nLANGUAGE: php\nCODE:\n```\nuse Spiral\\Http\\Middleware\\ErrorHandlerMiddleware\\SuppressErrorsInterface;\n\nclass SuppressErrors implements SuppressErrorsInterface\n{\n    public function suppressed(): bool\n    {\n        return true;\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Using Specific Cache Storage in Spiral Service\nDESCRIPTION: Shows how to use CacheStorageProviderInterface to access a specific cache storage in a Spiral service class.\nSOURCE: https://github.com/spiral/docs/blob/3.14/docs/en/basics/cache.md#2025-04-20_snippet_4\n\nLANGUAGE: php\nCODE:\n```\nnamespace App\\Service;\n\nuse Spiral\\Cache\\CacheStorageProviderInterface;\n\nclass UserService\n{\n    private readonly CacheInterface $cache;\n  \n    public function __construct(CacheStorageProviderInterface $provider) \n    {\n        $this->cache = $provider->storage('user-data');\n    }\n\n    public function find(int $id): User\n    {\n        //...\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Checking if Container has Binding in PHP\nDESCRIPTION: Demonstrates how to check if a container has a specific binding.\nSOURCE: https://github.com/spiral/docs/blob/3.14/docs/en/container/configuration.md#2025-04-20_snippet_6\n\nLANGUAGE: php\nCODE:\n```\nuse Spiral\\Core\\Container;\n\npublic function boot(Container $container): void\n{\n    $container->has(UserRepositoryInterface::class)\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Files in PHP using Spiral Storage Buckets\nDESCRIPTION: Demonstrates how to create files using the create() and write() methods of a storage bucket. Includes examples of creating empty files, writing string content, and writing from resource streams.\nSOURCE: https://github.com/spiral/docs/blob/3.14/docs/en/advanced/storage.md#2025-04-20_snippet_11\n\nLANGUAGE: php\nCODE:\n```\n// Creating file from bucket\n$file = $bucket->create('file.txt');\n\n// Creating file from bucket with string content\n$file = $bucket->write('file.txt', 'message');\n\n// Creating file from bucket with resource stream content\n$file = $bucket->write('file.txt', fopen(__DIR__ . '/local/file.txt', 'rb+'));\n```\n\n----------------------------------------\n\nTITLE: Dynamic Bootloader Configuration Using Functions\nDESCRIPTION: Example of using a function that returns a BootloadConfig object for conditional bootloader loading.\nSOURCE: https://github.com/spiral/docs/blob/3.14/docs/en/framework/bootloaders.md#2025-04-20_snippet_5\n\nLANGUAGE: php\nCODE:\n```\nnamespace App\\Application;\n\nuse Spiral\\Boot\\Attribute\\BootloadConfig;\nuse Spiral\\Boot\\Environment\\AppEnvironment;\nuse Spiral\\Prototype\\Bootloader\\PrototypeBootloader;\n\nclass Kernel extends \\Spiral\\Framework\\Kernel\n{\n    public function defineBootloaders(): array\n    {\n        return [\n            // ...\n            PrototypeBootloader::class => static fn (AppEnvironment $env) => new BootloadConfig(enabled: $env->isLocal()),\n            // ...\n        ];\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a User Store Filter with Authorization Guard in Spiral\nDESCRIPTION: Example of a filter class using the Guarded attribute to enforce permission checks before allowing access to the filter. This filter validates user data submitted through POST requests.\nSOURCE: https://github.com/spiral/docs/blob/3.14/docs/en/filters/interceptors.md#2025-04-20_snippet_0\n\nLANGUAGE: php\nCODE:\n```\nnamespace App\\Endpoint\\Web\\Filter;\n\nuse Spiral\\Domain\\Annotation\\Guarded;\n\n#[Guarded(permission: 'user.store')]\nfinal class StoreUser extends Filter\n{\n    #[Post]\n    public string $username;\n    \n    #[Post]\n    public string $email;\n    \n    //...\n}\n```\n\n----------------------------------------\n\nTITLE: Accessing Route Parameters with Route Attribute in Spiral Filters\nDESCRIPTION: Example showing how to use the Route attribute to access route parameters defined in the route definition. This maps the 'id' parameter from the route to the 'routeId' property in the filter.\nSOURCE: https://github.com/spiral/docs/blob/3.14/docs/en/filters/filter.md#2025-04-20_snippet_14\n\nLANGUAGE: php\nCODE:\n```\nnamespace App\\Endpoint\\Web\\Filter;\n\nuse Spiral\\Filters\\Attribute\\Input\\Route;\nuse Spiral\\Filters\\Model\\Filter;\n\nclass MyFilter extends Filter\n{\n    #[Route(key: 'id')]\n    public string $routeId;\n}\n```\n\n----------------------------------------\n\nTITLE: Defining an Injectable Enum for Application Environment\nDESCRIPTION: Shows how to create an injectable enum for representing and checking the application environment.\nSOURCE: https://github.com/spiral/docs/blob/3.14/docs/en/cookbook/migration-from-v2.md#2025-04-20_snippet_17\n\nLANGUAGE: php\nCODE:\n```\nenum AppEnvironment: string\n{\n    case Production = 'prod';\n    case Stage = 'stage';\n    case Testing = 'testing';\n    case Local = 'local';\n\n    public function isProduction(): bool\n    {\n        return $this === self::Production;\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Custom Domain Core for Routes in PHP\nDESCRIPTION: Shows how to set up a custom domain core with interceptors for routes.\nSOURCE: https://github.com/spiral/docs/blob/3.14/docs/en/http/routing.md#2025-04-20_snippet_17\n\nLANGUAGE: php\nCODE:\n```\n$core = new \\Spiral\\Core\\InterceptableCore(...);\n$core->addInterceptor(...);\n\n$routes\n    ->add(name: 'html', pattern: '/<action>.html')\n    ->core($core)\n    ->...;\n```\n\n----------------------------------------\n\nTITLE: Creating HTML Response with ResponseWrapper\nDESCRIPTION: Shows how to create an HTML response using the ResponseWrapper's html method. This is a convenient way to generate responses with HTML content-type.\nSOURCE: https://github.com/spiral/docs/blob/3.14/docs/en/http/request-response.md#2025-04-20_snippet_13\n\nLANGUAGE: php\nCODE:\n```\npublic function index(): ResponseInterface\n{\n    return $this->response->html('hello world');\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Migration Strategy for Database Tests\nDESCRIPTION: PHP class definition for a database test case using the Migration strategy, which runs migrations before each test and rolls them back after.\nSOURCE: https://github.com/spiral/docs/blob/3.14/docs/en/testing/database.md#2025-04-20_snippet_6\n\nLANGUAGE: php\nCODE:\n```\ndeclare(strict_types=1);\n\nnamespace Tests;\n\nuse Spiral\\DatabaseSeeder\\Database\\Traits\\{\n    DatabaseAsserts, DatabaseMigrations, Helper, ShowQueries\n};\n\nabstract class DatabaseTestCase extends TestCase\n{\n    use DatabaseMigrations,\n        Helper,\n        DatabaseAsserts,\n        ShowQueries;\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Cache in Spiral Application\nDESCRIPTION: Shows a sample configuration file for cache settings in Spiral, including default storage, aliases, and storage types.\nSOURCE: https://github.com/spiral/docs/blob/3.14/docs/en/basics/cache.md#2025-04-20_snippet_1\n\nLANGUAGE: php\nCODE:\n```\nuse Spiral\\Cache\\Storage\\ArrayStorage;\nuse Spiral\\Cache\\Storage\\FileStorage;\n\nreturn [\n    'default' => env('CACHE_STORAGE', 'rr-redis'),\n    'aliases' => [\n        'user-data' => 'rr-redis',\n        'blog-data' => [\n            'storage' => 'rr-redis',\n            'prefix' => 'blog_'\n        ],\n    ],\n    'storages' => [\n        'rr-redis' => [\n            'type' => 'roadrunner',\n            'driver' => 'redis',\n        ],\n        'rr-local' => [\n            'type' => 'roadrunner',\n            'driver' => 'local',\n        ],\n        'local' => [\n            'type' => 'array',\n        ],\n        'file' => [\n            'type' => 'file',\n            'path' => directory('runtime') . 'cache',\n        ],\n    ],\n    'typeAliases' => [\n        'array' => ArrayStorage::class,\n        'file' => FileStorage::class,\n    ],\n];\n```\n\n----------------------------------------\n\nTITLE: Named Pattern Registration in Bootloader\nDESCRIPTION: Registering named patterns for route parameters using RoutePatternRegistryInterface.\nSOURCE: https://github.com/spiral/docs/blob/3.14/docs/en/http/routing.md#2025-04-20_snippet_47\n\nLANGUAGE: php\nCODE:\n```\nuse Spiral\\Router\\Registry\\RoutePatternRegistryInterface;\n\nclass AppBootloader extends Bootloader\n{\n   public function boot(RoutePatternRegistryInterface $patternRegistry): void\n   {\n      $patternRegistry->register(\n          'uuid', \n          '[0-9a-fA-F]{8}\\b-[0-9a-fA-F]{4}\\b-[0-9a-fA-F]{4}\\b-[0-9a-fA-F]{4}\\b-[0-9a-fA-F]{12}'\n      );\n      $patternRegistry->register(\n          'names', \n          new InArrayPattern(['tom', 'jerry'])\n      );\n   }\n}\n```\n\n----------------------------------------\n\nTITLE: Registering Job Handlers\nDESCRIPTION: Configuration snippet showing how to register handlers for specific jobs to associate which handler should process each job type.\nSOURCE: https://github.com/spiral/docs/blob/3.14/docs/en/queue/configuration.md#2025-04-20_snippet_6\n\nLANGUAGE: php\nCODE:\n```\n'registry' => [\n    'handlers' => [\n        'sample::job' => App\\Jobs\\SampleJob::class\n    ],\n],\n```\n\n----------------------------------------\n\nTITLE: Constructor Dependency Injection Example\nDESCRIPTION: Demonstrates constructor-based dependency injection in a controller class using type-hinted dependencies.\nSOURCE: https://github.com/spiral/docs/blob/3.14/docs/en/container/overview.md#2025-04-20_snippet_1\n\nLANGUAGE: php\nCODE:\n```\nuse Psr\\Container\\ContainerInterface;\n\nfinal class UserController\n{\n    public function __construct(\n        private readonly UserRepository $users\n    ) {}\n\n    public function show(string $id): void\n    {\n       $user = $this->users->findOrFail($id);\n       // ...\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Using Spiral Storage at Different Levels in PHP\nDESCRIPTION: Example of creating a file using Spiral's storage component at three different levels: Storage, Bucket, and File. Demonstrates the flexibility of the API.\nSOURCE: https://github.com/spiral/docs/blob/3.14/docs/en/advanced/storage.md#2025-04-20_snippet_9\n\nLANGUAGE: php\nCODE:\n```\nuse Spiral\\Storage\\StorageInterface;\n\nclass UploadController\n{\n    public function createFile(StorageInterface $storage): array\n    {\n        $result = [];\n        \n        // 1. Storage level\n        $result[] = $storage->create('bucket://example.txt');\n\n        // 2. Bucket level\n        $result[] = $storage->bucket('bucket')\n            ->create('example.txt');\n\n        // 3. File level\n        $result[] = $storage->bucket('bucket')\n            ->file('example.txt')\n            ->create();\n\n        return $result;\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Refresh Service Handler - PHP\nDESCRIPTION: Implementation of a Refresh service handler for Centrifugo connection refresh requests\nSOURCE: https://github.com/spiral/docs/blob/3.14/docs/en/websockets/services.md#2025-04-20_snippet_9\n\nLANGUAGE: php\nCODE:\n```\nnamespace App\\Endpoint\\Centrifugo;\n\nuse RoadRunner\\Centrifugo\\Request\\Refresh;\nuse RoadRunner\\Centrifugo\\Payload\\RefreshResponse;\nuse RoadRunner\\Centrifugo\\Request\\RequestInterface;\nuse Spiral\\RoadRunnerBridge\\Centrifugo\\ServiceInterface;\n\nclass RefreshService implements ServiceInterface\n{\n    /** @param Refresh $request */\n    public function handle(RequestInterface $request): void\n    {\n        try {\n            $request->respond(\n                new RefreshResponse(...)\n            );\n        } catch (\\Throwable $e) {\n            $request->error($e->getCode(), $e->getMessage());\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Registering Custom Template Engine in Spiral Framework\nDESCRIPTION: This code snippet demonstrates how to register a custom template engine using the ViewsBootloader in a Spiral Framework application. It uses the addEngine method to add the custom engine.\nSOURCE: https://github.com/spiral/docs/blob/3.14/docs/en/views/basics.md#2025-04-20_snippet_15\n\nLANGUAGE: php\nCODE:\n```\nnamespace App\\Application\\Bootloader;\n\nuse Spiral\\Boot\\Bootloader\\Bootloader;\nuse Spiral\\Views\\Bootloader\\ViewsBootloader;\n\nclass AppBootloader extends Bootloader\n{\n    public function boot(ViewsBootloader $views): void\n    {\n        $views->addEngine(MyEngine::class);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Up FakeMailer in Test Case\nDESCRIPTION: Example of setting up a test case with FakeMailer to verify email sending during user registration. Shows basic setup and assertion of sent email.\nSOURCE: https://github.com/spiral/docs/blob/3.14/docs/en/testing/mail.md#2025-04-20_snippet_0\n\nLANGUAGE: php\nCODE:\n```\nuse Spiral\\Mailer\\Message;\nuse Tests\\TestCase;\n\nfinal class UserServiceTest extends TestCase\n{\n    private \\Spiral\\Testing\\Mailer\\FakeMailer $mailer;\n\n    protected function setUp(): void\n    {\n        parent::setUp();\n        $this->mailer = $this->fakeMailer();\n    }\n\n    public function testRegisterUser(): void\n    {\n        // Perform user registration ...\n\n        $this->mailer->assertSent(WelсomeMessage::class);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Retrieving Help Information for a Spiral Console Command\nDESCRIPTION: This command demonstrates how to retrieve help information for a console command in Spiral Framework. It displays the command's signature, description, and available arguments or options.\nSOURCE: https://github.com/spiral/docs/blob/3.14/docs/en/start/cli-basics.md#2025-04-20_snippet_2\n\nLANGUAGE: terminal\nCODE:\n```\nphp app.php help current:date\n```\n\n----------------------------------------\n\nTITLE: Implementing Logging Interceptor in PHP for GRPC Server\nDESCRIPTION: This code snippet demonstrates how to create a simple logging interceptor for a GRPC server using Spiral Framework. It logs information before and after processing a request.\nSOURCE: https://github.com/spiral/docs/blob/3.14/docs/en/grpc/interceptors.md#2025-04-20_snippet_0\n\nLANGUAGE: php\nCODE:\n```\nnamespace App\\Endpoint\\GRPC\\Interceptor;\n\nuse Spiral\\Core\\CoreInterceptorInterface;\nuse Spiral\\Core\\CoreInterface;\n\nfinal class LogInterceptor implements CoreInterceptorInterface\n{\n    public function __construct(\n        private readonly \\Psr\\Log\\LoggerInterface $core,\n    ) {\n    }\n    \n    public function process(string $name, string $action, array $parameters, CoreInterface $core): string\n    {\n        $this->logger->info('Request received...', [\n            'name' => $name,\n            'action' => $action,\n        ]);\n        \n        $response = $core->callAction($name, $action, $parameters);\n        \n        $this->logger->info('Request processed', [\n            'name' => $name,\n            'action' => $action,\n        ]);\n\n        return $response;\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing a Custom Sequence Command in Spiral PHP\nDESCRIPTION: Example of creating a custom console command that extends SequenceCommand to run a predefined sequence. The command retrieves the sequence from the configuration and executes it.\nSOURCE: https://github.com/spiral/docs/blob/3.14/docs/en/console/sequences.md#2025-04-20_snippet_3\n\nLANGUAGE: php\nCODE:\n```\nnamespace App\\Command;\n\nuse Psr\\Container\\ContainerInterface;\nuse Spiral\\Console\\Config\\ConsoleConfig;\n\nfinal class CacheEverythingCommand extends SequenceCommand\n{\n    protected const NAME = 'cache:everything';\n    protected const DESCRIPTION = 'Cache everything in the project';\n\n    public function perform(ConsoleConfig $config, ContainerInterface $container): int\n    {\n        $this->info('Caching everything in the project...');\n        $this->newLine();\n\n        return $this->runSequence($config->getSequence('cache_everything'), $container);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Asserting Scaffolder Command Exception in Spiral Framework (PHP)\nDESCRIPTION: Demonstrates how to test that a scaffolder command throws an expected exception when required arguments are missing.\nSOURCE: https://github.com/spiral/docs/blob/3.14/docs/en/testing/start.md#2025-04-20_snippet_13\n\nLANGUAGE: php\nCODE:\n```\n$this->expectException(RuntimeException::class);\n$this->expectExceptionMessage('Not enough arguments (missing: \"name\").');\n\n$this->assertScaffolderCommandSame(\n    'create:command',\n    [],\n    '',\n);\n```\n\n----------------------------------------\n\nTITLE: Configuring Notifications System\nDESCRIPTION: Example configuration file for the notifications system. It defines channels, transports, policies, and type aliases for different notification methods including SMS, email, chat, browser, and push notifications.\nSOURCE: https://github.com/spiral/docs/blob/3.14/docs/en/advanced/notifications.md#2025-04-20_snippet_3\n\nLANGUAGE: php\nCODE:\n```\nuse Symfony\\Component\\Notifier\\Channel\\BrowserChannel;\nuse Symfony\\Component\\Notifier\\Channel\\ChatChannel;\nuse Symfony\\Component\\Notifier\\Channel\\EmailChannel;\nuse Symfony\\Component\\Notifier\\Channel\\PushChannel;\nuse Symfony\\Component\\Notifier\\Channel\\SmsChannel;\n\nreturn [\n    'channels' => [\n        'nexmo_sms' => [\n            'type' => 'sms',\n            'transport' => 'nexmo',\n        ],\n        'default_email' => [\n            'type' => 'email',\n            'transport' => 'smtp',\n        ],\n        'roundrobin_email' => [\n            'type' => 'email',\n            'transport' => ['smtp', 'smtp_1'], // will be used roundrobin algorithm\n        ],\n        'chat/slack' => [\n            'type' => 'chat',\n            'transport' => 'slack',\n        ],\n    ],\n\n    'transports' => [\n        'nexmo' => 'nexmo://KEY:SECRET@default?from=FROM',\n        'smtp' => 'smtp://user:pass@smtp.example.com:25',\n        'smtp_1' => 'smtp://user:pass@smtp.example.com:25',\n        'slack' => 'slack://TOKEN@default?channel=CHANNEL'\n    ],\n\n    'policies' => [\n        'urgent' => ['sms', 'chat/slack', 'email'],\n        'high' => ['chat/slack', 'push/firebase'],\n    ],\n\n    'queueConnection' => env('NOTIFICATIONS_QUEUE_CONNECTION', 'sync'),\n\n    'typeAliases' => [\n        'browser' => BrowserChannel::class,\n        'chat' => ChatChannel::class,\n        'email' => EmailChannel::class,\n        'push' => PushChannel::class,\n        'sms' => SmsChannel::class,\n    ],\n];\n```\n\n----------------------------------------\n\nTITLE: Implementing a Basic Centrifugo Connection Request Handler in PHP\nDESCRIPTION: A simple example of a service that accepts all connection requests. It implements the ServiceInterface and handles Connect requests, responding with a ConnectResponse object.\nSOURCE: https://github.com/spiral/docs/blob/3.14/docs/en/websockets/services.md#2025-04-20_snippet_1\n\nLANGUAGE: php\nCODE:\n```\nnamespace App\\Endpoint\\Centrifugo;\n\nuse RoadRunner\\Centrifugo\\Request\\Connect;\nuse RoadRunner\\Centrifugo\\Payload\\ConnectResponse;\nuse RoadRunner\\Centrifugo\\Request\\RequestInterface;\nuse Spiral\\RoadRunnerBridge\\Centrifugo\\ServiceInterface;\n\nclass ConnectService implements ServiceInterface\n{\n    /** @param Connect $request */\n    public function handle(RequestInterface $request): void\n    {\n        try {\n            $request->respond(\n                // Return an empty string for accepting unauthenticated requests\n                new ConnectResponse(\n                  user: ''\n                )\n            );\n        } catch (\\Throwable $e) {\n            $request->error($e->getCode(), $e->getMessage());\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Returning ResponseInterface in Spiral Controllers\nDESCRIPTION: Demonstrates how to manually create and return a PSR-7 ResponseInterface from a controller. This example creates a Response object with status code 200 and writes \"hello world\" to its body.\nSOURCE: https://github.com/spiral/docs/blob/3.14/docs/en/http/request-response.md#2025-04-20_snippet_6\n\nLANGUAGE: php\nCODE:\n```\nnamespace App\\Endpoint\\Web;\n\nuse Nyholm\\Psr7\\Response;\nuse Psr\\Http\\Message\\ResponseInterface;\n\nclass HomeController \n{\n    public function index(): ResponseInterface\n    {\n        $response = new Response(200);\n        $response->getBody()->write(\"hello world\");\n\n        return $response;\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Using GuardNamespace Attribute for Controller RBAC in PHP\nDESCRIPTION: Example of applying the GuardNamespace attribute to a controller to set a common permission namespace. This eliminates the need to specify the full permission path in each Guarded attribute.\nSOURCE: https://github.com/spiral/docs/blob/3.14/docs/en/http/interceptors.md#2025-04-20_snippet_7\n\nLANGUAGE: php\nCODE:\n```\nuse Spiral\\Domain\\Annotation\\Guarded;\nuse Spiral\\Domain\\Annotation\\GuardNamespace;\n\n#[GuardNamespace(namespace: 'home')]\nclass HomeController\n{\n    #[Guarded]\n    public function index(): string\n    {\n        return 'OK';\n    }\n\n    #[Guarded(else: 'notFound')]\n    public function about(): string\n    {\n        return 'OK';\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Installing Cache Bootloaders in Spiral Kernel\nDESCRIPTION: Demonstrates how to add the CacheBootloader and RoadRunnerBridge CacheBootloader to the Spiral application kernel.\nSOURCE: https://github.com/spiral/docs/blob/3.14/docs/en/basics/cache.md#2025-04-20_snippet_0\n\nLANGUAGE: php\nCODE:\n```\npublic function defineBootloaders(): array\n{\n    return [\n        // ...\n        \\Spiral\\Cache\\Bootloader\\CacheBootloader::class,\n        \\Spiral\\RoadRunnerBridge\\Bootloader\\CacheBootloader::class,\n        // ...\n    ];\n}\n```\n\n----------------------------------------\n\nTITLE: Selecting Filter Render Type in PHP\nDESCRIPTION: Demonstrates how to select a render type for Between filters, showing how they can be converted to gte+lte or presented as is.\nSOURCE: https://github.com/spiral/docs/blob/3.14/docs/en/component/data-grid.md#2025-04-20_snippet_33\n\nLANGUAGE: php\nCODE:\n```\nuse Spiral\\DataGrid\\Specification\\Filter;\n\n$between  = new Filter\\Between('price', [10, 20]);\n\n$between->getFilters();     // will be converted to gte+lte\n$between->getFilters(true); // will be presented as is\n\n$notIncludingBetween  = new Filter\\Between('price', [10, 20], false, false);\n\n// will be converted to gte+lte anyway\n$notIncludingBetween->getFilters();\n$notIncludingBetween->getFilters(true);\n```\n\n----------------------------------------\n\nTITLE: Basic Comment Entity Implementation with Cycle ORM\nDESCRIPTION: Initial implementation of the Comment entity with primary ID and message column. This entity uses Cycle ORM annotations to define the database schema without a custom repository.\nSOURCE: https://github.com/spiral/docs/blob/3.14/docs/en/cookbook/quick-start.md#2025-04-20_snippet_16\n\nLANGUAGE: php\nCODE:\n```\nuse Cycle\\Annotated\\Annotation\\Column;\nuse Cycle\\Annotated\\Annotation\\Entity;\n\n#[Entity]\nclass Comment\n{\n    #[Column(type: 'primary')]\n    public int $id;\n\n    #[Column(type: 'string')]\n    public string $message;\n}\n```\n\n----------------------------------------\n\nTITLE: Using Factory Binding\nDESCRIPTION: Shows how to use Factory binding for creating instances with a closure.\nSOURCE: https://github.com/spiral/docs/blob/3.14/docs/zh-CN/container/configuration.md#2025-04-20_snippet_13\n\nLANGUAGE: php\nCODE:\n```\nuse Spiral\\Core\\Config\\Factory;\n\n$container->bind('time', new Factory(\n    callable: static fn() => time(),\n));\n```\n\n----------------------------------------\n\nTITLE: Parallel Execution of Activities in Temporal Workflow in PHP\nDESCRIPTION: Example of executing multiple Temporal activities in parallel within a workflow using Promise::all.\nSOURCE: https://github.com/spiral/docs/blob/3.14/docs/en/temporal/usage.md#2025-04-20_snippet_8\n\nLANGUAGE: php\nCODE:\n```\nuse Temporal\\Promise\\Promise;\n\n[$statusEurope, $statusAsia, $statusAmerica] = yield Promise::all([\n    $this->pingActivity->pingFromEurope($url),\n    $this->pingActivity->pingFromAsia($url),\n    $this->pingActivity->pingFromAmerica($url),\n]);\n```\n\n----------------------------------------\n\nTITLE: Creating Filter with Array Mapping\nDESCRIPTION: Example of creating a filter object using array-based field mapping and validation rules.\nSOURCE: https://github.com/spiral/docs/blob/3.14/docs/en/validation/spiral.md#2025-04-20_snippet_6\n\nLANGUAGE: php\nCODE:\n```\nnamespace App\\Filter;\n\nuse Spiral\\Filters\\Model\\Filter;\nuse Spiral\\Filters\\Model\\FilterDefinitionInterface;\nuse Spiral\\Filters\\Model\\HasFilterDefinition;\nuse Spiral\\Validator\\FilterDefinition;\n\nfinal class CreatePostFilter extends Filter implements HasFilterDefinition\n{\n    public function filterDefinition(): FilterDefinitionInterface\n    {\n        return new FilterDefinition([\n            'title' => ['required', ['string::length', 5]]\n            'slug' =>  ['required', ['string::length', 5]]\n            'sort' =>  ['required', 'integer']\n            'image' => ['required', 'image']\n        ], [\n            'title' => 'title',\n            'slug' => 'slug',\n            'sort' => 'sort',\n            'image' => 'symfony-file:image',\n        ]);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining GridSchema for DataGrid in PHP\nDESCRIPTION: Shows how to create a GridSchema class with specifications for sorting, filtering, and pagination in the DataGrid.\nSOURCE: https://github.com/spiral/docs/blob/3.14/docs/en/http/interceptors.md#2025-04-20_snippet_12\n\nLANGUAGE: php\nCODE:\n```\nnamespace App\\Intergarion\\Keeper\\View;\n\nuse Spiral\\DataGrid\\GridSchema;\nuse Spiral\\DataGrid\\Specification\\Filter;\nuse Spiral\\DataGrid\\Specification\\Pagination\\PagePaginator;\nuse Spiral\\DataGrid\\Specification\\Sorter;\nuse Spiral\\DataGrid\\Specification\\Value;\n\nclass UserGrid extends GridSchema\n{\n    public function __construct()\n    {\n        $this->addSorter('email', new Sorter\\Sorter('email'));\n        $this->addSorter('name', new Sorter\\Sorter('name'));\n        $this->addFilter('status', new Filter\\Equals('status', new Value\\EnumValue(new Value\\StringValue(), 'active', 'disabled')));\n        $this->setPaginator(new PagePaginator(20, [10, 20, 50, 100]));\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Custom Round Robin Mailer Transport\nDESCRIPTION: Implementation of a custom mailer transport using Round Robin algorithm to distribute emails across multiple DSNs.\nSOURCE: https://github.com/spiral/docs/blob/3.14/docs/en/advanced/sendit.md#2025-04-20_snippet_4\n\nLANGUAGE: php\nCODE:\n```\nuse Spiral\\Boot\\Bootloader\\Bootloader;\nuse Symfony\\Component\\Mailer\\Transport\\TransportInterface;\nuse Symfony\\Component\\Mailer\\Transport\\RoundRobinTransport;\nuse Symfony\\Component\\Mailer\\Transport;\n\nclass AppBootloader extends Bootloader\n{\n    protected const DEPENDENCIES = [\n        \\Spiral\\SendIt\\Bootloader\\MailerBootloader::class,\n    ];\n    \n    protected const SINGLETONS = [\n        TransportInterface::class => [self::class, 'initTransport'],\n    ];\n    \n    public function initTransport(): TransportInterface\n    {\n        $transports = [];\n        \n        $dsns = [\n            'smtp://...',\n            'smtp://...',\n            // ...\n        ];\n\n        foreach($dsns as $dsn) {\n            $transports[] = Transport::fromDsn($dsn);\n        }\n\n        return new RoundRobinTransport($transports);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Custom Template Engine in Spiral\nDESCRIPTION: Example of implementing a custom template engine (Blade) with loader configuration and compilation methods.\nSOURCE: https://github.com/spiral/docs/blob/3.14/docs/en/views/basics.md#2025-04-20_snippet_12\n\nLANGUAGE: php\nCODE:\n```\nuse Spiral\\Views\\EngineInterface;\nuse Spiral\\Views\\LoaderInterface;\nuse Spiral\\Views\\ContextInterface;\nuse Illuminate\\View\\Compilers\\CompilerEngine;\n\nfinal class BladeEngine implements EngineInterface\n{\n    private ?LoaderInterface $loader = null;\n    private readonly CompilerEngine $blade;\n    \n    public function withLoader(LoaderInterface $loader): EngineInterface\n    {\n        $engine = clone $this;\n        $engine->loader = $loader->withExtension('blade.php');\n    \n        return $engine;\n    }\n    \n    public function getLoader(): LoaderInterface\n    {\n        return $this->loader;\n    }\n\n    public function compile(string $path, ContextInterface $context): mixed\n    {\n        $filepath = $this->getLoader()->load($path)->getFilename();\n        \n        $this->blade->getCompiler()->compile($filepath);\n    }\n\n    public function reset(string $path, ContextInterface $context): void\n    {\n        $filepath = $this->getLoader()->load($path)->getFilename();\n        \n        \\unlink($this->blade->getCompiler()->getCompiledPath($filepath));\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Using Tagged Metrics in PHP Application Code\nDESCRIPTION: This PHP snippet demonstrates how to use tagged metrics in the application code, differentiating between different types of users.\nSOURCE: https://github.com/spiral/docs/blob/3.14/docs/en/advanced/prometheus-metrics.md#2025-04-20_snippet_7\n\nLANGUAGE: php\nCODE:\n```\nuse Spiral\\RoadRunner\\Metrics\\MetricsInterface; \n\nclass UserRegistrationHandler\n{\n    public function __construct(\n        private readonly MetricsInterface $metrics\n    ) {\n    }\n\n    public function handle(User $user): void\n    {\n        // Store user in database\n\n        $this->metrics->add('registered_users', 1, ['customer']);\n        \n        // or\n        \n        $this->metrics->add('registered_users', 1, ['admin']);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Excluding Directories from Tokenizer Search in PHP Configuration\nDESCRIPTION: Demonstrates how to exclude specific directories from Tokenizer's search by modifying the tokenizer.php configuration file in a Spiral application.\nSOURCE: https://github.com/spiral/docs/blob/3.14/docs/en/advanced/tokenizer.md#2025-04-20_snippet_5\n\nLANGUAGE: php\nCODE:\n```\nreturn [\n    'directories' => [\n        //...\n    ],\n    'exclude' => [\n        directory('resources'),\n        directory('config'),\n        'tests',\n        'migrations',\n    ],\n];\n```\n\n----------------------------------------\n\nTITLE: Sending POST Request with FakeHttp in PHP\nDESCRIPTION: This snippet illustrates how to send a POST request using the FakeHttp class in Spiral. It shows how to set the URI, data, headers, cookies, and files.\nSOURCE: https://github.com/spiral/docs/blob/3.14/docs/en/testing/http.md#2025-04-20_snippet_3\n\nLANGUAGE: php\nCODE:\n```\n$http = $this->fakeHttp();\n$response = $http->post(\n    uri: '/user/1',\n    data: ['foo' => 'bar'],\n    headers: ['Content-type' => 'application/json'],\n    cookies: ['token' => 'xxx-xxxx'],\n    files: ['avatar' => ...],\n);\n```\n\n----------------------------------------\n\nTITLE: Implementing RBAC Security in User Entity\nDESCRIPTION: Extension of User entity to implement RBAC security interface for role-based access control.\nSOURCE: https://github.com/spiral/docs/blob/3.14/docs/en/security/authentication.md#2025-04-20_snippet_22\n\nLANGUAGE: php\nCODE:\n```\nnamespace App\\Database;\n\nuse Spiral\\Security\\ActorInterface;\nuse Cycle\\Annotated\\Annotation as Cycle;\n\n#[Cycle\\Entity(repository: UserRepository::class)]\n#[Index(columns: ['username'], unique: true)]\nclass User implements ActorInterface\n{\n    #[Cycle\\Column(type: 'primary')]\n    public int $id;\n\n    #[Cycle\\Column(type: \"string\")]\n    public string $name;\n\n    #[Cycle\\Column(type: \"string\")]\n    public string $username;\n\n    #[Cycle\\Column(type: \"string\")]\n    public string $password;\n\n    public function getRoles(): array\n    {\n        return ['user'];\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Generating Encryption Key for Spiral Framework\nDESCRIPTION: Command to generate a Base64 encoded encryption key and store it in the .env file for use with the Encrypter component.\nSOURCE: https://github.com/spiral/docs/blob/3.14/docs/en/security/encrypter.md#2025-04-20_snippet_1\n\nLANGUAGE: terminal\nCODE:\n```\nphp app.php encrypt:key -m .env\n```\n\n----------------------------------------\n\nTITLE: Enhanced Comment Entity with Relations to User and Post\nDESCRIPTION: Extended Comment entity with BelongsTo relations to both User and Post. This implementation requires both an author and a post for each comment, establishing the full relationship structure.\nSOURCE: https://github.com/spiral/docs/blob/3.14/docs/en/cookbook/quick-start.md#2025-04-20_snippet_23\n\nLANGUAGE: php\nCODE:\n```\nuse Cycle\\Annotated\\Annotation\\Column;\nuse Cycle\\Annotated\\Annotation\\Entity;\nuse Cycle\\Annotated\\Annotation\\Relation;\n\n#[Entity]\nclass Comment\n{\n    #[Column(type: 'primary')]\n    public int $id;\n\n    public function __construct(\n        #[Column(type: 'string')]\n        public string $message,\n\n        #[Relation\\BelongsTo(target: User::class, nullable: false)]\n        public User $author,\n\n        #[Relation\\BelongsTo(target: Post::class, nullable: false)]\n        public Post $post\n    ) {\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Registering HTTP Middleware in Spiral 3.0\nDESCRIPTION: Example of a RoutesBootloader class that manually registers middleware since bootloaders no longer automatically register them. It shows how to configure global middleware and middleware groups.\nSOURCE: https://github.com/spiral/docs/blob/3.14/docs/en/cookbook/migration-from-v2.md#2025-04-20_snippet_1\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\ndeclare(strict_types=1);\n\nnamespace App\\Bootloader;\n\nuse App\\Controller\\AuthController;\nuse App\\Controller\\HomeController;\nuse App\\Controller\\PageController;\nuse Spiral\\Auth\\Middleware\\AuthMiddleware;\nuse Spiral\\Bootloader\\Http\\RoutesBootloader as BaseRoutesBootloader;\nuse Spiral\\Cookies\\Middleware\\CookiesMiddleware;\nuse Spiral\\Csrf\\Middleware\\CsrfMiddleware;\nuse Spiral\\Debug\\StateCollector\\HttpCollector;\nuse Spiral\\Http\\Middleware\\ErrorHandlerMiddleware;\nuse Spiral\\Http\\Middleware\\JsonPayloadMiddleware;\nuse Spiral\\Router\\Loader\\Configurator\\RoutingConfigurator;\nuse Spiral\\Session\\Middleware\\SessionMiddleware;\n\nfinal class RoutesBootloader extends BaseRoutesBootloader\n{\n    protected function globalMiddleware(): array\n    {\n        return [\n            ErrorHandlerMiddleware::class,\n            JsonPayloadMiddleware::class,\n            HttpCollector::class\n        ];\n    }\n\n    protected function middlewareGroups(): array\n    {\n        return [\n            'web' => [\n                CookiesMiddleware::class,\n                SessionMiddleware::class,\n                CsrfMiddleware::class,\n                AuthMiddleware::class,\n            ],\n            'api' => [\n                //\n            ]\n        ];\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Validation with PHP Function\nDESCRIPTION: Example of using a PHP function (is_numeric) directly in the validation rules.\nSOURCE: https://github.com/spiral/docs/blob/3.14/docs/en/validation/spiral.md#2025-04-20_snippet_8\n\nLANGUAGE: php\nCODE:\n```\n$validator = $validation->validate(\n    ['key' => null],\n    [\n        'key' => [\n            'notEmpty',  // key must not be empty\n            'is_numeric' // must be numeric\n        ]\n    ]\n);\n```\n\n----------------------------------------\n\nTITLE: Optional Dependencies Example\nDESCRIPTION: Demonstrates various ways to handle optional dependencies in constructor injection.\nSOURCE: https://github.com/spiral/docs/blob/3.14/docs/en/container/overview.md#2025-04-20_snippet_5\n\nLANGUAGE: php\nCODE:\n```\n// will fail if `value` dependency not provided\n__construct(OtherClass $class, $value)\n\n// will use `null` as `value` if no other value provided\n__construct(OtherClass $class, $value = null) \n\n// will fail if SomeInterface does not point to the concrete implementation\n__construct(OtherClass $class, SomeInterface $some) \n\n// will use null as value of `some` if no concrete implementation is provided\n__construct(OtherClass $class, SomeInterface $some = null)\n```\n\n----------------------------------------\n\nTITLE: Registering Actor Provider in UserBootloader\nDESCRIPTION: Implementation of UserBootloader to register the actor provider for authentication.\nSOURCE: https://github.com/spiral/docs/blob/3.14/docs/en/security/authentication.md#2025-04-20_snippet_21\n\nLANGUAGE: php\nCODE:\n```\nnamespace App\\Application\\Bootloader;\n\nuse App\\Database\\Repository\\UserRepository;\nuse Spiral\\Boot\\Bootloader\\Bootloader;\nuse Spiral\\Bootloader\\Auth\\AuthBootloader;\n\nclass UserBootloader extends Bootloader\n{\n    public function boot(AuthBootloader $auth): void\n    {\n        $auth->addActorProvider(UserRepository::class);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Get Method in PostController for Spiral Framework\nDESCRIPTION: This code snippet shows how to implement the get method in PostController to retrieve post details using PostRepository and handle not found scenarios.\nSOURCE: https://github.com/spiral/docs/blob/3.14/docs/en/cookbook/quick-start.md#2025-04-20_snippet_35\n\nLANGUAGE: php\nCODE:\n```\nuse App\\Database\\Post;\nuse Spiral\\Http\\Exception\\ClientException\\NotFoundException;\nuse Spiral\\Prototype\\Traits\\PrototypeTrait;\nuse Spiral\\Router\\Annotation\\Route;\n\nfinal class PostController\n{\n    use PrototypeTrait;\n\n    #[Route(route: '/api/post/<id:\\d+>', name: 'post.get', methods: 'GET')]\n    public function get(string $id): array\n    {\n        /** @var Post $post */\n        $post = $this->posts->findByPK($id);\n        if ($post === null) {\n            throw new NotFoundException('post not found');\n        }\n\n        return [\n            'post' => [\n                'id'      => $post->id,\n                'author'  => [\n                    'id'   => $post->author->id,\n                    'name' => $post->author->name\n                ],\n                'title'   => $post->title,\n                'content' => $post->content,\n            ]\n        ];\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing a Custom Scheduler Bootloader\nDESCRIPTION: Complete example of creating a custom SchedulerBootloader that registers various types of scheduled tasks including commands and callable functions.\nSOURCE: https://github.com/spiral/docs/blob/3.14/docs/en/advanced/scheduler.md#2025-04-20_snippet_5\n\nLANGUAGE: php\nCODE:\n```\nuse Spiral\\Boot\\Bootloader\\Bootloader;\nuse Spiral\\Scheduler\\Schedule;\nuse Psr\\Log\\LoggerInterface;\nuse Spiral\\Boot\\DirectoriesInterface;\n\nfinal class SchedulerBootloader extends Bootloader\n{\n    public function boot(Schedule $schedule, DirectoriesInterface $dirs): void\n    {\n        // Run console command by name\n        $schedule->command('ping', ['https://google.com'])\n            ->everyFiveMinutes()\n            ->withoutOverlapping()\n            ->appendOutputTo($dirs->get('runtime').'logs/cron.log');\n            \n        // Run console command by class name\n        $schedule->command(PingCommand::class, ['https://google.com'])\n            ->everyFiveMinutes()\n            ->withoutOverlapping()\n            ->appendOutputTo($dirs->get('runtime').'logs/cron.log');\n            \n        // Run callable task\n        $schedule->call('Ping url', static function (LoggerInterface $logger, string $url) {\n            $headers = @get_headers($url);\n            $status = $headers && \\strpos($headers[0], '200');\n\n            $logger->info(\\sprintf('URL: %s %s', $url, $status ? 'Exists' : 'Does not exist'));\n\n            return $status;\n        }, ['url' => 'https://google.com'])\n           ->everyFiveMinutes()\n           ->withoutOverlapping();\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Nginx Reverse Proxy Configuration for RoadRunner\nDESCRIPTION: Nginx configuration for setting up a reverse proxy to the RoadRunner server running Spiral application.\nSOURCE: https://github.com/spiral/docs/blob/3.14/docs/en/start/deployment.md#2025-04-20_snippet_1\n\nLANGUAGE: nginx\nCODE:\n```\nserver {\n    listen 80;\n\n    server_name _;\n\n    location / {\n        proxy_pass http://127.0.0.1:8080;\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Comparison Filters in PHP\nDESCRIPTION: Shows usage of greater than, greater than or equal, less than, and less than or equal filters.\nSOURCE: https://github.com/spiral/docs/blob/3.14/docs/en/component/data-grid.md#2025-04-20_snippet_25\n\nLANGUAGE: php\nCODE:\n```\nuse Spiral\\DataGrid\\Specification\\Filter;\n\n$gt = new Filter\\Gt('price', 2);   // the price should be greater than 2\n$gte = new Filter\\Gte('price', 2); // the price should be greater than 2 or equal\n$lt = new Filter\\Lt('price', 2);   // the price should be less than 2\n$lte = new Filter\\Lte('price', 2); // the price should be less than 2 or equal\n```\n\nLANGUAGE: php\nCODE:\n```\nuse Spiral\\DataGrid\\Specification\\Filter;\nuse Spiral\\DataGrid\\Specification\\Value;\n\n// the price should be greater than 2\n$gt = new Filter\\Gt('price', new Value\\NumericValue());\n$gt = $gt->withValue('2');\n\n// the price should be greater than 2 or equal\n$gte = new Filter\\Gte('price', new Value\\NumericValue());\n$gte = $gte->withValue('2');\n\n// the price should be less than 2\n$lt = new Filter\\Lt('price', new Value\\NumericValue());\n$lt = $lt->withValue('2');\n\n// the price should be less than 2 or equal\n$lte = new Filter\\Lte('price', new Value\\NumericValue());\n$lte = $lte->withValue('2');\n```\n\n----------------------------------------\n\nTITLE: Implementing ThreadFactory for Thread Generation\nDESCRIPTION: Factory class for generating thread entities with fake data. Provides thread name generation using faker.\nSOURCE: https://github.com/spiral/docs/blob/3.14/docs/en/cookbook/simple-chat.md#2025-04-20_snippet_26\n\nLANGUAGE: php\nCODE:\n```\nnamespace Database\\Factory;\n\nuse App\\Database\\Thread;\nuse Spiral\\DatabaseSeeder\\Factory\\AbstractFactory;\n\nfinal class ThreadFactory extends AbstractFactory\n{\n    public function entity(): string\n    {\n        return Thread::class;\n    }\n\n    public function makeEntity(array $definition): Thread\n    {\n        return new Thread(\n            name: $definition['name']\n        );\n    }\n\n    public function definition(): array\n    {\n        return [\n            'name' => $this->faker->sentence,\n        ];\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Using Symfony Lock Component in Spiral\nDESCRIPTION: Demonstrates how to use the Symfony lock component in a Spiral application after setting up the integration.\nSOURCE: https://github.com/spiral/docs/blob/3.14/docs/en/advanced/locks.md#2025-04-20_snippet_14\n\nLANGUAGE: php\nCODE:\n```\nuse Symfony\\Component\\Lock\\LockFactory;\n\n$factory = $container->get(LockFactory::class);\n$lock = $factory->createLock('pdf-creation');\n\nif ($lock->acquire()) {\n    // The resource \"pdf-creation\" is locked.\n    // You can compute and generate the invoice safely here.\n\n    $lock->release();\n}\n```\n\n----------------------------------------\n\nTITLE: Initializing Centrifugo API in PHP with Dependency Injection\nDESCRIPTION: Demonstrates how to inject and use the CentrifugoApiInterface in a PHP class constructor. This setup allows for easy communication with the Centrifugo server.\nSOURCE: https://github.com/spiral/docs/blob/3.14/docs/en/websockets/api.md#2025-04-20_snippet_0\n\nLANGUAGE: PHP\nCODE:\n```\nfinal class SubscribeUserToChannelHandler\n{\n    public function __construct(\n        private \\RoadRunner\\Centrifugo\\CentrifugoApiInterface $api\n    ) {\n    }\n\n    public function handle(User $user, Channel $channel): void\n    {\n        $this->api->subscribe($channel->getName(), $user->getId());\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Singleton Pattern with ConfigurationManager in PHP\nDESCRIPTION: Demonstrates using the #[Singleton] attribute to ensure only one instance of ConfigurationManager exists, which loads and caches configuration settings from an INI file.\nSOURCE: https://github.com/spiral/docs/blob/3.14/docs/en/container/attributes.md#2025-04-20_snippet_0\n\nLANGUAGE: php\nCODE:\n```\nuse Spiral\\Core\\Attribute\\Singleton;\n\n#[Singleton]\nfinal class ConfigurationManager\n{\n    private readonly array $config;\n\n    public function __construct()\n    {\n        $this->config = parse_ini_file('config.ini');\n    }\n\n    public function get(string $key)\n    {\n        return $this->config[$key] ?? null;\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing User Class as Notification Recipient\nDESCRIPTION: Example of a User class that implements the necessary interfaces to receive notifications. This class implements RecipientInterface and SmsRecipientInterface, allowing the user to receive SMS notifications.\nSOURCE: https://github.com/spiral/docs/blob/3.14/docs/en/advanced/notifications.md#2025-04-20_snippet_6\n\nLANGUAGE: php\nCODE:\n```\nuse Symfony\\Component\\Notifier\\Recipient\\RecipientInterface;\nuse Symfony\\Component\\Notifier\\Recipient\\SmsRecipientInterface;\n\nfinal class User implements RecipientInterface, SmsRecipientInterface\n{\n    // ...\n\n    public function getPhone(): string\n    {\n        return '+8(000)000-00-00';\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a Console Interceptor in PHP for Spiral Framework\nDESCRIPTION: This snippet demonstrates how to create a custom interceptor class implementing the CoreInterceptorInterface. It includes the necessary method signatures and parameters for intercepting command execution.\nSOURCE: https://github.com/spiral/docs/blob/3.14/docs/en/console/interceptors.md#2025-04-20_snippet_0\n\nLANGUAGE: php\nCODE:\n```\nnamespace App;\n\nuse Spiral\\Console\\Command;\nuse Spiral\\Core\\CoreInterceptorInterface;\nuse Spiral\\Core\\CoreInterface;\nuse Symfony\\Component\\Console\\Input\\InputInterface;\nuse Symfony\\Component\\Console\\Output\\OutputInterface;\n\nclass CustomInterceptor implements CoreInterceptorInterface\n{\n\n    /**\n     * @param array{\n     *     input: InputInterface, \n     *     output: OutputInterface, \n     *     command: Command\n     * }|array<empty, empty> $parameters\n     */\n    public function process(\n        string $commandClass, \n        string $method, \n        array $parameters, CoreInterface $core\n    ): int {\n        // ...\n\n        $result = $core->callAction($commandClass, $method, $parameters);\n\n        // ...\n\n        return $result;\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Custom Failed Jobs Handler Implementation\nDESCRIPTION: Implementation of a custom failed jobs handler that stores failed jobs in a database.\nSOURCE: https://github.com/spiral/docs/blob/3.14/docs/en/queue/jobs.md#2025-04-20_snippet_13\n\nLANGUAGE: php\nCODE:\n```\nnamespace App\\Infrastructure\\Queue;\n\nuse Spiral\\Queue\\Failed\\FailedJobHandlerInterface;\nuse Cycle\\Database\\DatabaseInterface;\nuse Spiral\\Queue\\SerializerInterface;\n\nclass DatabaseFailedJobsHandler implements FailedJobHandlerInterface\n{\n    private DatabaseInterface $database;\n    private SerializerInterface $serializer;\n    \n    public function __construct(DatabaseInterface $database, SerializerInterface $serializer)\n    {\n        $this->database = $database;\n        $this->serializer = $serializer;\n    }\n\n    public function handle(string $driver, string $queue, string $job, array $payload, \\Throwable $e): void\n    {\n        $this->database\n            ->insert('failed_jobs')\n            ->values([\n                'driver' => $driver,\n                'queue' => $queue,\n                'job_name' => $job,\n                'payload' => $this->serializer->serialize($payload),\n                'error' => $e->getMessage(),\n            ])\n            ->run();\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Using the Sorter Specification for Bidirectional Sorting\nDESCRIPTION: Example of using the Sorter specification to apply bidirectional sorting on the same set of fields. This is a convenience wrapper for cases where the same fields are sorted in either direction.\nSOURCE: https://github.com/spiral/docs/blob/3.14/docs/en/component/data-grid.md#2025-04-20_snippet_18\n\nLANGUAGE: php\nCODE:\n```\nuse Spiral\\DataGrid\\Specification\\Sorter;\n\n$sorter = new Sorter\\Sorter('first_name', 'last_name');\n\n// will sort by first_name and last_name asc\n$ascSorter = $sorter->withDirection('asc');\n\n// will sort by first_name and last_name desc\n$descSorter = $sorter->withDirection('desc');\n```\n\n----------------------------------------\n\nTITLE: Configuring JWT Token Storage in PHP for Spiral Framework\nDESCRIPTION: This code snippet demonstrates how to register and configure the JWTTokenStorage in the Spiral Framework's auth configuration file.\nSOURCE: https://github.com/spiral/docs/blob/3.14/docs/en/cookbook/user-authentication.md#2025-04-20_snippet_2\n\nLANGUAGE: PHP\nCODE:\n```\nuse Spiral\\Core\\Container\\Autowire;\n\nreturn [\n    // ...\n    'storages' => [\n         'jwt' => new Autowire(\\App\\Auth\\Storage\\JWTTokenStorage::class, [\n             'secret' => 'secret', \n             'algorithm' => 'HS256',\n             'expiresAt' => '+30 days',\n         ]),\n         // ...\n    ]\n]\n```\n\n----------------------------------------\n\nTITLE: Configuring Route Groups in PHP\nDESCRIPTION: Demonstrates how to set up route groups with prefixes and middleware using the GroupRegistry in the RoutesBootloader.\nSOURCE: https://github.com/spiral/docs/blob/3.14/docs/en/http/routing.md#2025-04-20_snippet_22\n\nLANGUAGE: php\nCODE:\n```\nnamespace App\\Application\\Bootloader;\n\nuse Spiral\\Router\\GroupRegistry;\nuse Spiral\\Bootloader\\Http\\RoutesBootloader as BaseRoutesBootloader;\n\nfinal class RoutesBootloader extends BaseRoutesBootloader\n{\n    // ...\n\n    protected function configureRouteGroups(GroupRegistry $groups): void\n    {\n        $groups->getGroup('api')\n            ->setNamePrefix('api.')\n            ->setPrefix('/api');\n            \n        $groups->getGroup('web')\n            ->addMiddleware(MyMiddelware::class);\n            ->setPrefix('/api');\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Using Filter in Spiral Controller\nDESCRIPTION: Example demonstrating how to use a filter in a controller. The filter is automatically injected and validated, making the validated data available through the filter object properties.\nSOURCE: https://github.com/spiral/docs/blob/3.14/docs/en/filters/filter.md#2025-04-20_snippet_18\n\nLANGUAGE: php\nCODE:\n```\nnamespace App\\Endpoint\\Web;\n\nuse App\\Endpoint\\Web\\Filter\\MyFilter;\n\nclass HomeController\n{\n    public function index(MyFilter $filter): void\n    {\n        dump($filter->number); // always int\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Service Class with Queue Dependency\nDESCRIPTION: Example of a service class that requires a QueueInterface dependency, which can be provided through dependency injection.\nSOURCE: https://github.com/spiral/docs/blob/3.14/docs/en/queue/configuration.md#2025-04-20_snippet_5\n\nLANGUAGE: php\nCODE:\n```\nfinal class MyService\n{\n    public function __construct(\n        private readonly QueueInterface $queue\n    ) {\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Acquiring Lock with Time-to-Live (TTL)\nDESCRIPTION: Demonstrates how to acquire a lock with a specified TTL (Time-to-Live), using either a numeric value or a DateInterval object.\nSOURCE: https://github.com/spiral/docs/blob/3.14/docs/en/advanced/locks.md#2025-04-20_snippet_4\n\nLANGUAGE: php\nCODE:\n```\n$id = $lock->lock('pdf:create', ttl: 10);\n// or\n$id = $lock->lock('pdf:create', ttl: new \\DateInterval('PT10S'));\n```\n\n----------------------------------------\n\nTITLE: Resetting View Cache in Spiral PHP\nDESCRIPTION: Demonstrates how to reset the cache for a specific view using the reset method of ViewsInterface.\nSOURCE: https://github.com/spiral/docs/blob/3.14/docs/en/views/basics.md#2025-04-20_snippet_4\n\nLANGUAGE: php\nCODE:\n```\nuse Spiral\\Views\\ViewsInterface;\n\n$views->reset('home');\n```\n\n----------------------------------------\n\nTITLE: Configuring Token Transport in Configuration File\nDESCRIPTION: Alternative configuration for token transport setup using the auth.php configuration file.\nSOURCE: https://github.com/spiral/docs/blob/3.14/docs/en/security/authentication.md#2025-04-20_snippet_17\n\nLANGUAGE: php\nCODE:\n```\nuse Spiral\\Auth\\Transport\\CookieTransport;\nuse Spiral\\Auth\\Transport\\HeaderTransport;\n\nreturn [\n    // ...\n    'transports' => [\n         'header' => new HeaderTransport(header: 'X-Auth-Token'),\n         'cookie' => new CookieTransport(cookie: 'token', basePath: '/')\n         // ...\n    ]\n]\n```\n\n----------------------------------------\n\nTITLE: Basic Validation Example\nDESCRIPTION: Example of using the validator to validate a simple key-value pair with multiple rules.\nSOURCE: https://github.com/spiral/docs/blob/3.14/docs/en/validation/spiral.md#2025-04-20_snippet_7\n\nLANGUAGE: php\nCODE:\n```\n$validator = $validation->validate(\n    ['key' => null],\n    [\n        'key' => [\n            'notEmpty', // key must not be empty\n            'string'    // must be string\n        ]\n    ]\n);\n\nif (!$validator->isValid()) {\n    dump($validator->getErrors());\n}\n```\n\n----------------------------------------\n\nTITLE: Using Grid Factory with Cycle ORM Repository\nDESCRIPTION: Example of using the Grid Factory to connect a Grid Schema to data using a Cycle ORM Repository.\nSOURCE: https://github.com/spiral/docs/blob/3.14/docs/en/component/data-grid.md#2025-04-20_snippet_6\n\nLANGUAGE: php\nCODE:\n```\nuse Spiral\\DataGrid\\GridSchema;\nuse Spiral\\DataGrid\\GridFactoryInterface;\n\n$schema = new UserSchema();\n\n$factory = $container->get(GridFactoryInterface::class);\n$users = $container->get(\\App\\Database\\UserRepository::class);\n  \n/** @var Spiral\\DataGrid\\GridInterface $result */\n$result = $factory->create($users->select(), $schema);  \n\n// Fetch the refined data\nprint_r(iterator_to_array($result));\n```\n\n----------------------------------------\n\nTITLE: Configuring Monolog for Telemetry Integration\nDESCRIPTION: PHP configuration to add the TelemetryProcessor to Monolog for adding trace context to log messages.\nSOURCE: https://github.com/spiral/docs/blob/3.14/docs/en/advanced/telemetry.md#2025-04-20_snippet_7\n\nLANGUAGE: php\nCODE:\n```\nreturn [\n    ...\n\n    'processors' => [\n        'default' => [\n            \\Spiral\\Telemetry\\Monolog\\TelemetryProcessor::class,\n        ],\n    ],\n];\n```\n\n----------------------------------------\n\nTITLE: Implementing Job Handler with Array Payload\nDESCRIPTION: Implementation of a job handler that processes array payloads deserialized from JSON. The handler logs the received job information including ID, payload, and headers.\nSOURCE: https://github.com/spiral/docs/blob/3.14/docs/en/cookbook/simple-queue-system.md#2025-04-20_snippet_16\n\nLANGUAGE: php\nCODE:\n```\nnamespace App\\Endpoint\\Job;\n\nuse Psr\\Log\\LoggerInterface;\nuse Spiral\\Queue\\JobHandler;\nuse App\\DTO\\Ping;\n\nfinal class PingJob extends JobHandler\n{\n    public function invoke(\n        LoggerInterface $logger, \n        string $id, \n        Ping $payload, \n        array $headers,\n    ): void {\n        $logger->info('Ping job received', [\n            'id' => $id,\n            'url' => $payload->url,\n            'headers' => $headers,\n        ]);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Using DatetimeFormatValue Filter in PHP\nDESCRIPTION: Demonstrates the DatetimeFormatValue filter that validates and converts formatted datetime strings according to specified input and output formats.\nSOURCE: https://github.com/spiral/docs/blob/3.14/docs/en/component/data-grid.md#2025-04-20_snippet_41\n\nLANGUAGE: php\nCODE:\n```\nuse Spiral\\DataGrid\\Specification\\Value;\n\n$value = new Value\\DatetimeFormatValue('Y-m-d');\n \n$value->accepts('2020 Jan 21st');  // false\n$value->accepts('2020-01-21');     // true\n\n$value->convert('2020-01-21'); // DateTimeImmutable object\n\n$value = new Value\\DatetimeFormatValue('Y-m-d', 'F dS, y');\n$value->convert('2020-01-21'); // January 21st, 20\n```\n\n----------------------------------------\n\nTITLE: Sending GET Request with FakeHttp in PHP\nDESCRIPTION: This snippet shows how to send a GET request using the FakeHttp class in Spiral. It demonstrates setting various parameters like URI, query, headers, and cookies.\nSOURCE: https://github.com/spiral/docs/blob/3.14/docs/en/testing/http.md#2025-04-20_snippet_1\n\nLANGUAGE: php\nCODE:\n```\n$http = $this->fakeHttp();\n$response = $http->get(\n    uri: '/users',\n    query: ['sort' => 'desc'],\n    headers: ['Content-type' => 'application/json'],\n    cookies: ['token' => 'xxx-xxxx'],\n);\n```\n\n----------------------------------------\n\nTITLE: Binding Interface to Singleton in PHP\nDESCRIPTION: Demonstrates how to bind an interface to a singleton implementation using the BinderInterface.\nSOURCE: https://github.com/spiral/docs/blob/3.14/docs/en/container/configuration.md#2025-04-20_snippet_2\n\nLANGUAGE: php\nCODE:\n```\nuse Spiral\\Core\\BinderInterface;\n\npublic function boot(BinderInterface $binder): void\n{\n    $binder->bindSingleton(\n        UserRepositoryInterface::class, \n        CycleUserRepository::class\n    );\n}\n```\n\n----------------------------------------\n\nTITLE: Sending JSON POST Request with FakeHttp in PHP\nDESCRIPTION: This code shows how to send a POST request with JSON headers using the postJson method of FakeHttp class in Spiral.\nSOURCE: https://github.com/spiral/docs/blob/3.14/docs/en/testing/http.md#2025-04-20_snippet_4\n\nLANGUAGE: php\nCODE:\n```\n$http = $this->fakeHttp();\n$response = $http->postJson(\n    uri: '/user/1',\n    data: ['foo' => 'bar'],\n    headers: ['Content-type' => 'application/json'],\n    cookies: ['token' => 'xxx-xxxx'],\n    files: ['avatar' => ...],\n);\n```\n\n----------------------------------------\n\nTITLE: Accessing the Validator\nDESCRIPTION: This example demonstrates how to access the validator instance using `ValidationProviderInterface` and perform validation tasks within a controller. It shows how to retrieve the validator for a specific filter definition and initiate the validation process.\nSOURCE: https://github.com/spiral/docs/blob/3.14/docs/zh-CN/validation/laravel.md#2025-04-20_snippet_3\n\nLANGUAGE: PHP\nCODE:\n```\nuse Spiral\\Http\\Request\\InputManager;\nuse Spiral\\Validation\\ValidationProviderInterface;\n\nclass UserController\n{\n    public function create(InputManager $input, ValidationProviderInterface $provider)\n    {\n        $validator = $provider->getValidation(\\Spiral\\Validation\\Laravel\\FilterDefinition::class)\n            ->validate(...);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Command with Signature (PHP)\nDESCRIPTION: Demonstrates how to define a command using the SIGNATURE constant for specifying command name, arguments, and options in a declarative way.\nSOURCE: https://github.com/spiral/docs/blob/3.14/docs/en/console/commands.md#2025-04-20_snippet_5\n\nLANGUAGE: php\nCODE:\n```\nclass SomeCommand extends Command \n{\n    protected const SIGNATURE = <<<CMD\n        check:http \n            {url : Site url} \n            {--S|skip-ssl-errors : Skip SSL errors}\n        CMD;\n\n\n    public function perform(): int\n    {\n        $url = $this->argument('url');\n        $skipErrors = $this->option('skip-ssl-errors');\n\n        // ...\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Assigning Routes to Groups in PHP\nDESCRIPTION: Shows how to assign a route to a specific group using the group() method.\nSOURCE: https://github.com/spiral/docs/blob/3.14/docs/en/http/routing.md#2025-04-20_snippet_23\n\nLANGUAGE: php\nCODE:\n```\n$routes->add(name: 'news', pattern: '/news/<id:int>')\n    ->action(NewsController::class, 'show')\n    ->group('auth');\n    ->methods('GET');\n```\n\n----------------------------------------\n\nTITLE: Implementing Custom Security Rule in PHP for Spiral Framework\nDESCRIPTION: This snippet demonstrates how to create a custom security rule by implementing the RuleInterface. The rule allows access when the context has a 'key' that equals 'value'.\nSOURCE: https://github.com/spiral/docs/blob/3.14/docs/en/security/rbac.md#2025-04-20_snippet_8\n\nLANGUAGE: php\nCODE:\n```\nnamespace App\\Security;\n\nuse Spiral\\Security\\ActorInterface;\nuse Spiral\\Security\\RuleInterface;\n\nclass SampleRule implements RuleInterface\n{\n    public function allows(ActorInterface $actor, string $permission, array $context): bool\n    {\n        return $context['key'] === 'value';\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Simple RPC Service Handler - PHP\nDESCRIPTION: Implementation of a simple RPC service handler that responds to ping requests\nSOURCE: https://github.com/spiral/docs/blob/3.14/docs/en/websockets/services.md#2025-04-20_snippet_11\n\nLANGUAGE: php\nCODE:\n```\nnamespace App\\Endpoint\\Centrifugo;\n\nuse RoadRunner\\Centrifugo\\Payload\\RPCResponse;\nuse RoadRunner\\Centrifugo\\Request\\RequestInterface;\nuse RoadRunner\\Centrifugo\\Request\\RPC;\nuse Spiral\\RoadRunnerBridge\\Centrifugo\\ServiceInterface;\n\nfinal class RPCService implements ServiceInterface\n{\n    /**\n     * @param RPC $request\n     */\n    public function handle(RequestInterface $request): void\n    {\n        $result = match ($request->method) {\n            'ping' => 'pong',\n            default => ['error' => 'Not found', 'code' => 404]\n        };\n\n        try {\n            $request->respond(\n                new RPCResponse(\n                    data: $result\n                )\n            );\n        } catch (\\Throwable $e) {\n            $request->error($e->getCode(), $e->getMessage());\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Regenerating Session ID in Spiral PHP\nDESCRIPTION: Shows how to issue a new session ID without affecting the session content.\nSOURCE: https://github.com/spiral/docs/blob/3.14/docs/en/basics/session.md#2025-04-20_snippet_9\n\nLANGUAGE: php\nCODE:\n```\n$this->session->regenerateID();\n```\n\n----------------------------------------\n\nTITLE: Template Inheritance in Stempler\nDESCRIPTION: Demonstrates how to use template inheritance in Stempler, including extending layouts and replacing blocks.\nSOURCE: https://github.com/spiral/docs/blob/3.14/docs/en/views/stempler.md#2025-04-20_snippet_14\n\nLANGUAGE: html\nCODE:\n```\n<!DOCTYPE html>\n<html>\n    <head>\n        <title>This is homepage.</title>\n        <link rel=\"stylesheet\" href=\"/styles/welcome.css\"/>\n    </head>\n    <body>\n        Page content\n    </body>\n</html>\n```\n\nLANGUAGE: html\nCODE:\n```\n<!DOCTYPE html>\n    <html>\n    <head>\n        <title>This is homepage.</title>\n        <link rel=\"stylesheet\" href=\"/styles/welcome.css\"/>\n    </head>\n    <body>\n        Page content\n    </body>\n</html>\n```\n\nLANGUAGE: html\nCODE:\n```\n<extends:layout.base/>\n```\n\nLANGUAGE: html\nCODE:\n```\n<extends path=\"layout/base\"/>\n```\n\nLANGUAGE: html\nCODE:\n```\n<!DOCTYPE html>\n<html>\n<head>\n    <title><block:title/></title>\n    <link rel=\"stylesheet\" href=\"/styles/welcome.css\"/>\n</head>\n<body>\n<block:content>\n    Default content body.\n</block:content>\n</body>\n</html>\n```\n\nLANGUAGE: html\nCODE:\n```\n<extends:layout.base/>\n\n<block:title>Homepage</block:title>\n\n<block:content>\n    This is homepage content.\n</block:content>\n```\n\nLANGUAGE: html\nCODE:\n```\n<!DOCTYPE html>\n<html>\n<head>\n    <title>${title|Default title}</title>\n    <link rel=\"stylesheet\" href=\"/styles/welcome.css\"/>\n</head>\n<body class=\"${body-class|default}\">\n<block:content>\n    Default content.\n</block:content>\n</body>\n</html>\n```\n\nLANGUAGE: html\nCODE:\n```\n<extends:layout.base/>\n\n<block:title>Homepage</block:title>\n\n<block:body-class>homepage</block:body-class>\n\n<block:content>\n    This is homepage content.\n</block:content>\n```\n\nLANGUAGE: html\nCODE:\n```\n<extends:layout.base title=\"Homepage\" body-class=\"homepage\"/>\n\n<block:content>\n    This is homepage content.\n</block:content>\n```\n\nLANGUAGE: html\nCODE:\n```\n<!DOCTYPE html>\n<html>\n<head>\n    <title>Homepage</title>\n    <link rel=\"stylesheet\" href=\"/styles/welcome.css\"/>\n</head>\n<body class=\"homepage\">\nThis is homepage content.\n</body>\n</html>\n```\n\n----------------------------------------\n\nTITLE: Using Custom Security Rule in Spiral Framework Controller\nDESCRIPTION: This snippet demonstrates how to use a custom security rule in a Spiral Framework controller. It shows checking permissions with different contexts, which will result in either approval or denial based on the rule's logic.\nSOURCE: https://github.com/spiral/docs/blob/3.14/docs/en/security/rbac.md#2025-04-20_snippet_10\n\nLANGUAGE: php\nCODE:\n```\nnamespace App\\Controller;\n\nuse Spiral\\Prototype\\Traits\\PrototypeTrait;\n\nclass HomeController\n{\n    use PrototypeTrait;\n\n    public function index(): string\n    {\n        if ($this->guard->allows('home.read', ['key' => 'value'])) {\n            echo 'yay';\n        }\n\n        if ($this->guard->allows('home.read', ['key' => 'else'])) {\n            echo 'nope';\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Container Mocking in Feature Tests\nDESCRIPTION: Example showing how to mock container services in feature tests, specifically for authentication testing.\nSOURCE: https://github.com/spiral/docs/blob/3.14/docs/en/testing/start.md#2025-04-20_snippet_5\n\nLANGUAGE: php\nCODE:\n```\nnamespace Tests\\Feature\\Controller\\UserController;\n\nuse Tests\\TestCase;\n\nfinal class ProfileActionTest extends TestCase\n{\n    public function testShowPageNotFoundIfUserNotExist(): void\n    {\n        $auth = $this->mockContainer(\\Spiral\\Auth\\ActorProviderInterface::class);\n        $auth->shouldReceive('getActor')->with(...)->once()->andReturnNull();\n\n        $http = $this->fakeHttp();\n        $response = $http->get('/user/profile');\n\n        $response->assertNotFound();\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Registering Notifications Bootloader Using Method Approach\nDESCRIPTION: Code snippet showing how to register the NotificationsBootloader in the application kernel using the defineBootloaders method. This enables the notifications functionality in the Spiral application.\nSOURCE: https://github.com/spiral/docs/blob/3.14/docs/en/advanced/notifications.md#2025-04-20_snippet_1\n\nLANGUAGE: php\nCODE:\n```\npublic function defineBootloaders(): array\n{\n    return [\n        // ...\n        \\Spiral\\Notifications\\Bootloader\\NotificationsBootloader::class,\n        // ...\n    ];\n}\n```\n\n----------------------------------------\n\nTITLE: Using Injector-Managed Dependencies in a Controller\nDESCRIPTION: This example shows how to use context-aware dependency injection in a controller class. The injector provides different CacheInterface implementations based on the parameter names, allowing a single interface to resolve to different concrete implementations.\nSOURCE: https://github.com/spiral/docs/blob/3.14/docs/en/container/injectors.md#2025-04-20_snippet_1\n\nLANGUAGE: php\nCODE:\n```\nnamespace App\\Endpoint\\Web;\n\nuse Psr\\SimpleCache\\CacheInterface;\n\nclass BlogController\n{\n    public function __construct(\n        private readonly CacheInterface $redis,\n        private readonly CacheInterface $memcached,\n        private readonly CacheInterface $cache,\n    } {\n        \n        \\assert($redis instanceof RedisCache);\n\n        \\assert($memcached instanceof MemcachedCache);\n        \n        \\assert($cache instanceof ArrayCache);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Job Handler Attribute Configuration\nDESCRIPTION: Defining a job handler using the JobHandler attribute to specify the queue job name.\nSOURCE: https://github.com/spiral/docs/blob/3.14/docs/en/queue/jobs.md#2025-04-20_snippet_10\n\nLANGUAGE: php\nCODE:\n```\nuse Spiral\\Queue\\Attribute\\JobHandler as Handler;\nuse Spiral\\Queue\\JobHandler;\n\n#[Handler('sample::job')]\nfinal class Ping extends JobHandler\n{\n    public function invoke(array $payload): void\n    {\n        // ...\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring default validator\nDESCRIPTION: This snippet sets the default validator within the `validation.php` configuration file.  The key `defaultValidator` is assigned to the value `'my-validator'` indicating the default validator's name.\nSOURCE: https://github.com/spiral/docs/blob/3.14/docs/zh-CN/validation/factory.md#2025-04-20_snippet_2\n\nLANGUAGE: php\nCODE:\n```\n```php app/config/validation.php\nreturn [\n    'defaultValidator' => 'my-validator',\n    // ...\n];\n```\n```\n\n----------------------------------------\n\nTITLE: Customizing Exception Handler Boot Process\nDESCRIPTION: Demonstrates how to customize the exception handler initialization by overriding the bootBasicHandlers method.\nSOURCE: https://github.com/spiral/docs/blob/3.14/docs/en/basics/errors.md#2025-04-20_snippet_2\n\nLANGUAGE: php\nCODE:\n```\nfinal class Handler extends ExceptionHandler\n{\n    protected function bootBasicHandlers(): void\n    {\n        parent::bootBasicHandlers();\n        \n        // Register your renderers and reporters here\n        // $this->addRenderer(new MyRenderer());\n        // $this->addRenderer(new MyReporter());\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Basic Usage of runScoped Method with Autowiring in PHP\nDESCRIPTION: Shows how to use the runScoped method with autowiring enabled, automatically resolving and injecting dependencies based on type-hints.\nSOURCE: https://github.com/spiral/docs/blob/3.14/docs/en/container/scopes.md#2025-04-20_snippet_1\n\nLANGUAGE: php\nCODE:\n```\n$result = $container->runScoped(closure: function (SomeInterface $instance) {\n    // Your code here\n}, bindings: [SomeInterface::class => SomeImplementation::class]);\n```\n\n----------------------------------------\n\nTITLE: Configuring Symfony JSON Serializer for Object Payloads\nDESCRIPTION: Configuration setting to use the Symfony JSON serializer for handling object deserialization in queue job processing, which allows working with typed objects.\nSOURCE: https://github.com/spiral/docs/blob/3.14/docs/en/cookbook/simple-queue-system.md#2025-04-20_snippet_17\n\nLANGUAGE: php\nCODE:\n```\nreturn [\n    // ...\n    'defaultSerializer' => 'symfony-json',\n];\n```\n\n----------------------------------------\n\nTITLE: Creating Email Template with Stempler in Spiral PHP\nDESCRIPTION: Shows how to create a rich email template using Stempler view engine in Spiral Framework.\nSOURCE: https://github.com/spiral/docs/blob/3.14/docs/zh-CN/advanced/sendit.md#2025-04-20_snippet_3\n\nLANGUAGE: html\nCODE:\n```\n<extends:sendit:builder subject=\"I'm afraid I can't do that\"/>\n<use:bundle path=\"sendit:bundle\"/>\n\n<email:attach path=\"{{ $attachment }}\" name=\"attachment.txt\"/>\n\n<block:html>\n    <p>I'm sorry, {{ $name }}!</p>\n    <p>\n        <email:image path=\"path/to/image.png\"/>\n    </p>\n</block:html>\n```\n\n----------------------------------------\n\nTITLE: Implementing GRPC Telemetry Injection Interceptor in PHP\nDESCRIPTION: This class implements a GRPC interceptor that injects telemetry trace IDs into the request context. It requires the Spiral Framework, RoadRunner GRPC package, and a PSR-11 compatible container.\nSOURCE: https://github.com/spiral/docs/blob/3.14/docs/en/grpc/interceptors.md#2025-04-20_snippet_10\n\nLANGUAGE: php\nCODE:\n```\nnamespace App\\Service\\Interceptor;\n\nuse Psr\\Container\\ContainerInterface;\nuse Spiral\\Core\\CoreInterceptorInterface;\nuse Spiral\\RoadRunner\\GRPC\\ContextInterface;\nuse Spiral\\RoadRunner\\GRPC\\ResponseHeaders;\nuse Spiral\\Telemetry\\TraceKind;\nuse Spiral\\Telemetry\\TracerInterface;\nuse Spiral\\Core\\CoreInterface;\n\nclass InjectTelemetryIntoContextInterceptor implements CoreInterceptorInterface\n{\n    public function __construct(\n        private readonly ContainerInterface $container\n    ) {\n    }\n\n    public function process(string $controller, string $action, array $parameters, CoreInterface $core): mixed\n    {\n        $tracer = $this->container->get(TracerInterface::class);\n        \\assert($tracer instanceof TracerInterface);\n\n        if (isset($parameters['ctx']) and $parameters['ctx'] instanceof RequestContext) {\n            $metadata = $parameters['ctx']->getValue('metadata');\n            if(!\\is_array($metadata)) {\n                $metadata = [];\n            }\n            \n            $metadata['telemetry-trace-id'] = $tracer->getContext();\n            $parameters['ctx'] = $parameters['ctx']->withValue('metadata', $metadata);\n        }\n\n        return $tracer->trace(\n            name: \\sprintf('GRPC request %s', $action),\n            callback: static fn() => $core->callAction($controller, $action, $parameters),\n            attributes: compact('controller', 'action'),\n            traceKind: TraceKind::PRODUCER\n        );\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Custom Sequences in Spiral PHP\nDESCRIPTION: Example of creating custom sequences in a bootloader class. Shows how to add multiple commands to a named sequence with headers and footers for each step in the sequence.\nSOURCE: https://github.com/spiral/docs/blob/3.14/docs/en/console/sequences.md#2025-04-20_snippet_2\n\nLANGUAGE: php\nCODE:\n```\nuse Symfony\\Component\\Console\\Output\\OutputInterface;\nuse Psr\\Container\\ContainerInterface;\nuse Spiral\\Boot\\Bootloader\\Bootloader;\nuse Spiral\\Console\\Bootloader\\ConsoleBootloader;\n\nclass AppBootloader extends Bootloader\n{\n    public function boot(ConsoleBootloader $console): void\n    {\n        $console->addSequence(\n            name: 'cache_everything', \n            sequence: 'route:cache',\n            header: '<info>Route caching...</info>',\n            footer: '<info>Route caching completed.</info>'\n        );\n         \n        $console->addSequence(\n            name: 'cache_everything', \n            sequence: 'config:cache',\n            header: '<info>Config caching...</info>',\n            footer: '<info>Config caching completed.</info>'\n        );\n        \n        // ... \n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Grid Action with Server Request\nDESCRIPTION: Defines a server action with advanced features including confirmation dialogs, request method specification, and success/error handling.\nSOURCE: https://github.com/spiral/docs/blob/3.14/docs/en/keeper/components.md#2025-04-20_snippet_11\n\nLANGUAGE: xhtml\nCODE:\n```\n<grid:action.action\n        href=\"edit/{id}\"\n        template=\"{id}\"\n        label=\"Edit\"\n        title=\"Edit {firstName}\"\n        icon=\"edit\"\n        method=\"POST\"\n        data=\"{ foo: 1}\"\n        refresh=\"true\"\n        confirm=\"true\"\n        confirm-title=\"true\"\n        confirm-ok=\"true\"\n        confirm-cancel=\"true\"\n/>\n```\n\n----------------------------------------\n\nTITLE: Creating DTO Class for Job Payload Deserialization\nDESCRIPTION: Definition of a Data Transfer Object (DTO) class that will be used to deserialize the job payload received from the queue, providing type safety for job processing.\nSOURCE: https://github.com/spiral/docs/blob/3.14/docs/en/cookbook/simple-queue-system.md#2025-04-20_snippet_18\n\nLANGUAGE: php\nCODE:\n```\nnamespace App\\DTO;\n\nfinal class Ping \n{\n    public function __construct(\n        public readonly string $url,\n    ) {}\n}\n```\n\n----------------------------------------\n\nTITLE: Registering custom validator\nDESCRIPTION: This example shows how to register the custom validator within a bootloader using the `ValidationProvider`'s `register` method. This makes the custom validator available for use within the application.\nSOURCE: https://github.com/spiral/docs/blob/3.14/docs/zh-CN/validation/factory.md#2025-04-20_snippet_8\n\nLANGUAGE: php\nCODE:\n```\n```php app/src/Application/Bootloader/ValidatorBootloader.php\nnamespace App\\Application\\Bootloader;\n\nuse App\\Validation;\nuse Spiral\\Boot\\Bootloader\\Bootloader;\nuse Spiral\\Validation\\Bootloader\\ValidationBootloader;\nuse Spiral\\Validation\\ValidationInterface;\nuse Spiral\\Validation\\ValidationProvider;\n\nfinal class ValidatorBootloader extends Bootloader\n{\n    public function boot(ValidationProvider $provider): void\n    {\n        $provider->register(\n            'my-validator',\n            static fn(Validation $validation): ValidationInterface => new MyValidation()\n        );\n    }\n}\n```\n```\n\n----------------------------------------\n\nTITLE: Combining Multiple Request Data Sources in Spiral Filters\nDESCRIPTION: Example demonstrating how to use multiple attributes in a single filter class to map different parts of the request data (query parameters, cookies, and POST data) to class properties.\nSOURCE: https://github.com/spiral/docs/blob/3.14/docs/en/filters/filter.md#2025-04-20_snippet_13\n\nLANGUAGE: php\nCODE:\n```\nnamespace App\\Endpoint\\Web\\Filter;\n\nuse Spiral\\Filters\\Attribute\\Input\\Cookie;\nuse Spiral\\Filters\\Attribute\\Input\\Post;\nuse Spiral\\Filters\\Attribute\\Input\\Query;\nuse Spiral\\Filters\\Model\\Filter;\n\nclass MyFilter extends Filter\n{\n    #[Query(key: 'redirectURL')]\n    public string $redirectTo;\n\n    #[Cookie]\n    public string $memberCookie;\n\n    #[Post(key: 'user')]\n    public string $username;\n\n    #[Post]\n    public string $password;\n\n    #[Post(key: 'remember')]\n    public string $rememberMe;\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Queue for RoadRunner in PHP\nDESCRIPTION: PHP configuration for integrating RoadRunner with Spiral's queue system, setting up an in-memory pipeline for job processing.\nSOURCE: https://github.com/spiral/docs/blob/3.14/docs/en/start/queue-basics.md#2025-04-20_snippet_4\n\nLANGUAGE: php\nCODE:\n```\nuse Spiral\\RoadRunner\\Jobs\\Queue\\MemoryCreateInfo;\n\nreturn [\n    'default' => env('QUEUE_CONNECTION', 'roadrunner'),\n\n    pipelines' => [\n        'memory' => [\n            'connector' => new MemoryCreateInfo('local'),\n            'consume' => true,\n        ]\n    ],\n            \n    'connections' => [\n        'roadrunner' => [\n            'driver' => 'roadrunner',\n            'default' => 'memory',\n        ],\n    ],\n];\n```\n\n----------------------------------------\n\nTITLE: Subscribing Users to Centrifugo Channels in PHP\nDESCRIPTION: Illustrates how to use the subscribe method to add a user to a specific Centrifugo channel. This method supports optional parameters such as expiration time, additional info, and client identification.\nSOURCE: https://github.com/spiral/docs/blob/3.14/docs/en/websockets/api.md#2025-04-20_snippet_3\n\nLANGUAGE: PHP\nCODE:\n```\npublic function handle(User $user, Channel $channel): void\n{\n    $this->api->subscribe($channel->getName(), $user->getId(), ...);\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Nginx Proxy for Centrifugo WebSocket and RoadRunner HTTP\nDESCRIPTION: This Nginx configuration sets up a proxy for Centrifugo WebSocket connections and RoadRunner HTTP endpoints. It includes a map for upgrading connections and server block with locations for both services.\nSOURCE: https://github.com/spiral/docs/blob/3.14/docs/en/websockets/configuration.md#2025-04-20_snippet_5\n\nLANGUAGE: nginx\nCODE:\n```\nmap $http_upgrade $connection_upgrade {\n    default upgrade;\n    '' close;\n}\n\nserver {\n    listen 8000;\n\n    server_name _;\n\n    # Centrifugo WebSocket endpoint\n    location /connection {\n        proxy_pass http://127.0.0.1:8000/connection;\n        proxy_http_version 1.1;\n        proxy_set_header Upgrade $http_upgrade;\n        proxy_set_header Connection $connection_upgrade;\n        proxy_set_header Host $host;\n    }\n    \n    # RoadRunner HTTP endpoint\n    location / {\n        proxy_pass http://127.0.0.1:8080;\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Nested Nodes in Spiral Keeper Controller\nDESCRIPTION: This snippet demonstrates how to use Keeper annotations to define nested nodes within a controller. It shows how to set up parent-child relationships between actions and specify routing and view rendering.\nSOURCE: https://github.com/spiral/docs/blob/3.14/docs/en/keeper/sitemap.md#2025-04-20_snippet_8\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\ndeclare(strict_types=1);\n\nnamespace App\\Controller\\Keeper;\n\nuse Spiral\\Keeper\\Annotation as Keeper;\nuse Spiral\\Views\\ViewsInterface;\n\n#[Keeper\\Controller(name: \"users\", prefix: \"/users\")]\nclass UsersController\n{\n     #[Keeper\\Action(route: \"\", methods: \"GET\")]\n     #[Keeper\\Sitemap\\Link(title: \"Users\")]\n    public function index(ViewsInterface $views): string\n    {\n        return $views->render('keeper:users/list');\n    }\n\n     #[Keeper\\Action(route: \"/create\", methods: \"GET\")]\n     #[Keeper\\Sitemap\\View(title: \"Add new user\", parent: \"index\")]\n    public function new(ViewsInterface $views): string\n    {\n        return $views->render('keeper:users/create');\n    }\n\n     #[Keeper\\Action(route: \"/create\", methods: \"GET\")]\n     #[Keeper\\Sitemap\\View(title: \"Add new user\", parent: \"groups.index\")]\n    public function create(ViewsInterface $views): string\n    {\n        return $views->render('keeper:users/create');\n    }\n    // ...\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a Custom Lock Bootloader for Symfony Integration\nDESCRIPTION: Shows how to create a bootloader class that registers the lock driver in the container for Symfony lock component integration.\nSOURCE: https://github.com/spiral/docs/blob/3.14/docs/en/advanced/locks.md#2025-04-20_snippet_13\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\ndeclare(strict_types=1);\n\nnamespace App\\Application\\Bootloader;\n\nuse RoadRunner\\Lock\\LockInterface;\nuse Spiral\\Boot\\Bootloader\\Bootloader;\nuse Spiral\\Boot\\Environment\\AppEnvironment;\nuse Spiral\\Boot\\EnvironmentInterface;\nuse Spiral\\Goridge\\RPC\\RPCInterface;\nuse Spiral\\RoadRunner\\Symfony\\Lock\\RoadRunnerStore;\nuse Spiral\\RoadRunnerBridge\\Bootloader\\RoadRunnerBootloader;\nuse Symfony\\Component\\Lock\\LockFactory;\nuse Symfony\\Component\\Lock\\PersistingStoreInterface;\nuse Symfony\\Component\\Lock\\Store\\InMemoryStore;\nuse Symfony\\Component\\Lock\\Store\\RedisStore;\n\nfinal class LockBootloader extends Bootloader\n{\n    public function defineDependencies(): array\n    {\n        return [\n            \\Spiral\\RoadRunnerBridge\\Bootloader\\LockBootloader::class\n        ];\n    }\n\n    public function defineSingletons(): array\n    {\n        return [\n            LockFactory::class => [self::class, 'initLockFactory'],\n        ];\n    }\n\n    protected function initLockFactory(LockInterface $rrLock, EnvironmentInterface $env): LockFactory\n    {\n        $driver = $env->get('LOCK_DRIVER', 'roadrunner');\n        $defaultTtl = $env->get('LOCK_DRIVER_TTL', 100);\n\n        $store = match ($driver) {\n            'memory' => new InMemoryStore(), // for testing purposes\n            'roadrunner' => new RoadRunnerStore($rrLock, initialWaitTtl: $defaultTtl),\n            default => throw new \\InvalidArgumentException(\"Unknown lock driver: {$driver}\"),\n        };\n\n        return new LockFactory($store);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Default Headers in FakeHttp Requests in PHP\nDESCRIPTION: This snippet demonstrates how to set default headers for FakeHttp requests in Spiral. It shows both setting multiple headers and a single header.\nSOURCE: https://github.com/spiral/docs/blob/3.14/docs/en/testing/http.md#2025-04-20_snippet_5\n\nLANGUAGE: php\nCODE:\n```\n$http = $this->fakeHttp();\n$http->withHeaders(['Content-type' => 'application/json']);\n\n$http->get('/users');\n```\n\nLANGUAGE: php\nCODE:\n```\n$http = $this->fakeHttp();\n$http->withHeader('Content-type', 'application/json');\n$http->get('/users');\n```\n\n----------------------------------------\n\nTITLE: Asserting Event Dispatch Count in PHP\nDESCRIPTION: This snippet demonstrates how to assert that an event was dispatched a specific number of times using the assertDispatchedTimes method.\nSOURCE: https://github.com/spiral/docs/blob/3.14/docs/en/testing/event.md#2025-04-20_snippet_4\n\nLANGUAGE: php\nCODE:\n```\n$this->events->assertDispatchedTimes(UserRegistered::class, 1);\n```\n\n----------------------------------------\n\nTITLE: Dynamic Serializer Registration in Bootloader\nDESCRIPTION: Example of registering serializers programmatically in an application bootloader\nSOURCE: https://github.com/spiral/docs/blob/3.14/docs/en/queue/jobs.md#2025-04-20_snippet_8\n\nLANGUAGE: php\nCODE:\n```\nnamespace App\\Application\\Bootloader;\n\nuse Spiral\\Boot\\Bootloader\\Bootloader;\nuse Spiral\\Core\\Container\\Autowire;\nuse Spiral\\Queue\\QueueRegistry;\n\nclass AppBootloader extends Bootloader\n{\n    public function boot(QueueRegistry $registry): void\n    {\n        $registry->setSerializer('ping.job', 'json');\n        $registry->setSerializer(TestJob::class, 'serializer');\n        $registry->setSerializer(OtherJob::class, CustomSerializer::class);\n        $registry->setSerializer(FooJob::class, new CustomSerializer());\n        $registry->setSerializer(BarJob::class, new Autowire(CustomSerializer::class));\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Initializing and Managing Database Migrations in Spiral\nDESCRIPTION: Terminal commands for initializing migrations, listing database tables, and viewing the migration table structure. These commands prepare the database for schema configuration using migration files.\nSOURCE: https://github.com/spiral/docs/blob/3.14/docs/en/cookbook/quick-start.md#2025-04-20_snippet_10\n\nLANGUAGE: terminal\nCODE:\n```\nphp app.php migrate:init\n```\n\nLANGUAGE: terminal\nCODE:\n```\nphp app.php db:list\nphp app.php db:table migrations\n```\n\n----------------------------------------\n\nTITLE: Implementing Database Query Core in PHP\nDESCRIPTION: Creates a DatabaseQueryCore class that implements CoreInterface to handle database queries. The core class is responsible for executing SQL queries through a DatabaseManager.\nSOURCE: https://github.com/spiral/docs/blob/3.14/docs/en/framework/interceptors.md#2025-04-20_snippet_0\n\nLANGUAGE: php\nCODE:\n```\nnamespace App\\Integration\\Database;\n\nuse Spiral\\Core\\CoreInterface;\nuse Cycle\\Database\\DatabaseManager;\nuse Cycle\\Database\\StatementInterface;\n\nfinal class DatabaseQueryCore implements CoreInterface\n{\n    public function __construct(\n        private readonly DatabaseManager $manager\n    ) {\n    }\n\n    public function callAction(string $database, string $sql, array $parameters = []): StatementInterface\n    {\n        $sqlParameters = $parameters['sql_parameters'] ?? [];\n        \\assert(\\is_array($sqlParameters));\n\n        $database = $this->manager->database($database);\n        return $database->query(\n            $sql,\n            $sqlParameters\n        );\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Pushing Jobs to Queue with Array Payload\nDESCRIPTION: PHP code for a console command that pushes a job with an array payload to the queue.\nSOURCE: https://github.com/spiral/docs/blob/3.14/docs/en/cookbook/simple-queue-system.md#2025-04-20_snippet_5\n\nLANGUAGE: php\nCODE:\n```\nnamespace App\\Endpoint\\Console;\n\nuse Spiral\\Console\\Attribute\\AsCommand;\nuse Spiral\\Console\\Command;\nuse Spiral\\Queue\\QueueInterface;\n\n#[AsCommand(name: 'ping')]\nfinal class PingCommand extends Command\n{\n    public function __invoke(QueueInterface $queue): int\n    {\n        $queue->push('ping', [\n            'url' => 'https://spiral.dev',\n        ]);\n\n        return self::SUCCESS;\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Preventing Task Overlapping\nDESCRIPTION: Example of using withoutOverlapping method to prevent multiple instances of the same task from running simultaneously.\nSOURCE: https://github.com/spiral/docs/blob/3.14/docs/en/advanced/scheduler.md#2025-04-20_snippet_13\n\nLANGUAGE: php\nCODE:\n```\n$schedule->command('ping', ['https://google.com'])\n   ->everyMinute()\n   ->withoutOverlapping()\n   -> ...;\n```\n\n----------------------------------------\n\nTITLE: Asserting Jobs Were Pushed in Spiral Queue Tests\nDESCRIPTION: This snippet shows how to use the assertPushed method to check if a specific job was pushed to the queue and if it meets certain conditions.\nSOURCE: https://github.com/spiral/docs/blob/3.14/docs/en/testing/queue.md#2025-04-20_snippet_1\n\nLANGUAGE: php\nCODE:\n```\n$this->queue->assertPushed('mail.job', function (array $data) {\n    return $data['handler'] instanceof \\Spiral\\SendIt\\MailJob\n        && $data['options']->getQueue() === 'mail'\n        && $data['payload']['foo'] === 'bar';\n});\n```\n\n----------------------------------------\n\nTITLE: Configuring Storage Servers and Buckets\nDESCRIPTION: Configuration example for storage.php showing how to set up default storage, define storage servers (local and S3), and configure storage buckets with prefixes.\nSOURCE: https://github.com/spiral/docs/blob/3.14/docs/en/advanced/storage.md#2025-04-20_snippet_3\n\nLANGUAGE: php\nCODE:\n```\nreturn [\n\n    /**\n     * -------------------------------------------------------------------------\n     *  Default Storage Bucket Name\n     * -------------------------------------------------------------------------\n     *\n     * Here you can specify which of the buckets you want to use by default for\n     * all work with storages.\n     *\n     */\n\n    'default' => env('STORAGE_SERVER', 'uploads'),\n\n    /**\n     * -------------------------------------------------------------------------\n     *  Storage Servers\n     * -------------------------------------------------------------------------\n     *\n     * Here is each of the servers configured for your application. Of\n     * course, the examples of customizing each available server supported by\n     * Spiral are shown below to simplify development.\n     *\n     */\n\n    'servers' => [\n        'static' => [\n            'adapter' => 'local',\n            'directory' => __DIR__ . '/../../runtime/static',\n        ],\n\n        's3' => [\n            'adapter' => 's3', // or \"s3-async\"\n            'region' => env('S3_REGION'),\n            'bucket' => env('S3_BUCKET'),\n            'key' => env('S3_KEY'),\n            'secret' => env('S3_SECRET'),\n        ],\n    ],\n\n    /**\n     * -------------------------------------------------------------------------\n     *  Storage Buckets\n     * -------------------------------------------------------------------------\n     *\n     * Here is a list of specific buckets (or storages) that use the\n     * server settings above. Each \"server\" section in this list must refer to a\n     * valid server name in the list above.\n     *\n     * The list of settings in this case is also an example of use. You can\n     * freely change the number of buckets and the type of settings as you wish.\n     *\n     */\n\n    'buckets' => [\n        'uploads' => [\n            'server' => 'static',\n            'prefix' => 'upload',\n        ],\n\n        'images' => [\n            'server' => 'static',\n            'prefix' => 'img',\n        ],\n\n        'videos' => [\n            'server' => 's3',\n        ],\n    ],\n];\n```\n\n----------------------------------------\n\nTITLE: Using Logger Interface with Default Channel\nDESCRIPTION: Example showing how to inject and use LoggerInterface with default logging channel.\nSOURCE: https://github.com/spiral/docs/blob/3.14/docs/en/basics/logging.md#2025-04-20_snippet_3\n\nLANGUAGE: php\nCODE:\n```\nuse Psr\\Log\\LoggerInterface;\n\nfinal class UserService\n{\n    public function __construct(\n        private readonly LoggerInterface $logger\n    ) {}\n\n    public function register(string $email, string $password): void\n    {\n        // Register user ...\n        \n        $this->logger->info('User has been registered', ['email' => $email]);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Entity Assertion Examples in PHP\nDESCRIPTION: Various examples of asserting entity states in the database using DatabaseAsserts trait methods.\nSOURCE: https://github.com/spiral/docs/blob/3.14/docs/en/testing/database.md#2025-04-20_snippet_13\n\nLANGUAGE: php\nCODE:\n```\n$this->assertEntity(User::class)->where([\n    'uuid' => (string)$user->uuid,\n    'deleted_at' => ['!=' => null],\n])->assertExists();\n```\n\nLANGUAGE: php\nCODE:\n```\n$this->assertEntity(User::class)->where([\n    'uuid' => (string)$user->uuid,\n])->assertMissing();\n```\n\nLANGUAGE: php\nCODE:\n```\n$this->assertEntity(User::class)->where([\n    'uuid' => (string)$user->uuid,\n])->assertCount(1);\n```\n\nLANGUAGE: php\nCODE:\n```\n$this->assertEntity(User::class)->assertEmpty();\n```\n\nLANGUAGE: php\nCODE:\n```\n$total = $this->assertEntity(User::class)->where([\n    'deleted_at' => ['!=' => null],\n])->count();\n```\n\nLANGUAGE: php\nCODE:\n```\n$this->assertEntity(User::class)->select(function(\\Cycle\\ORM\\Select $select) {\n    $select->where('deleted_at', '!=', null);\n})->...;\n```\n\n----------------------------------------\n\nTITLE: Using Scoped Classes Locator in PHP\nDESCRIPTION: Demonstrates how to use the ScopedClassesInterface to find classes within a specific scope in a Spiral application.\nSOURCE: https://github.com/spiral/docs/blob/3.14/docs/en/advanced/tokenizer.md#2025-04-20_snippet_8\n\nLANGUAGE: php\nCODE:\n```\nuse Spiral\\Tokenizer\\ScopedClassesInterface;\n\nfinal class SomeLocator\n{\n    public function __construct(\n        private readonly ScopedClassesInterface $locator\n    ) {\n    }\n\n    public function findDeclarations(): array\n    {\n        foreach ($this->locator->getScopedClasses('scopeName') as $class) {\n            // ...\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Middleware in HTTP Configuration File\nDESCRIPTION: Example showing how to configure middleware in the HTTP configuration file using different approaches.\nSOURCE: https://github.com/spiral/docs/blob/3.14/docs/en/http/middleware.md#2025-04-20_snippet_3\n\nLANGUAGE: php\nCODE:\n```\nuse App\\Endpoint\\Web\\Middleware\\MyMiddleware;\nuse Spiral\\Core\\Container\\Autowire;\n\nreturn [\n    // ...\n    'middleware' => [\n        // via fully qualified class name\n        MyMiddleware::class,\n        \n        'my:middleware',\n        \n        // via Autowire \n        new Autowire(MyMiddleware::class, ['someParameter' => 'value']),\n        \n        // or manual instantiating object\n        new MyMiddleware(),\n    ],\n];\n```\n\n----------------------------------------\n\nTITLE: Checking Authentication Status in PHP using Spiral Framework\nDESCRIPTION: This snippet demonstrates how to check if a user is authenticated using the AuthContextInterface in a Spiral Framework controller. It throws a ForbiddenException if the user is not authenticated, otherwise it dumps the user object.\nSOURCE: https://github.com/spiral/docs/blob/3.14/docs/en/cookbook/user-authentication.md#2025-04-20_snippet_5\n\nLANGUAGE: php\nCODE:\n```\nuse Spiral\\Http\\Exception\\ClientException\\ForbiddenException;\n\npublic function index()\n{\n    if ($this->auth->getActor() === null) {\n        throw new ForbiddenException();\n    }\n    \n    dump($this->auth->getActor());\n}\n```\n\n----------------------------------------\n\nTITLE: Creating PostController in PHP for Spiral Framework\nDESCRIPTION: This command uses the Spiral scaffolder to create a PostController with pre-generated actions and prototype extension.\nSOURCE: https://github.com/spiral/docs/blob/3.14/docs/en/cookbook/quick-start.md#2025-04-20_snippet_32\n\nLANGUAGE: terminal\nCODE:\n```\nphp app.php create:controller post -a test -a get -p\n```\n\n----------------------------------------\n\nTITLE: Configuring Logger for Specific Log Levels (PHP)\nDESCRIPTION: This snippet illustrates how to configure the logger to handle only specific log levels. It demonstrates adding a handler for the default channel that only logs ERROR level and above messages.\nSOURCE: https://github.com/spiral/docs/blob/3.14/docs/en/basics/logging.md#2025-04-20_snippet_7\n\nLANGUAGE: php\nCODE:\n```\nnamespace App\\Application\\Bootloader;\n\nuse Monolog\\Logger;\nuse Spiral\\Boot\\Bootloader\\Bootloader;\nuse Spiral\\Monolog\\Bootloader\\MonologBootloader;\n\nfinal class LoggingBootloader extends Bootloader\n{\n    // ...\n    \n    public function boot(MonologBootloader $monolog): void\n    {\n        $monolog->addHandler(\n            'default',\n            $monolog->logRotate(directory('runtime') . 'logs/errors.log', Logger::ERROR) // only ERROR and above\n        );\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring RoadRunner for GRPC Server\nDESCRIPTION: YAML configuration for RoadRunner that sets up the GRPC server with the proto file path. This enables RoadRunner to serve the GRPC service on the specified port.\nSOURCE: https://github.com/spiral/docs/blob/3.14/docs/en/grpc/service.md#2025-04-20_snippet_6\n\nLANGUAGE: yaml\nCODE:\n```\ngrpc:\n  listen: tcp://0.0.0.0:9001\n  proto:\n    - \"proto/pinger.proto\"\n```\n\n----------------------------------------\n\nTITLE: Checking Permissions with Context in Spiral Guard\nDESCRIPTION: Demonstration of checking permissions with additional context information using GuardInterface in a Spiral controller.\nSOURCE: https://github.com/spiral/docs/blob/3.14/docs/en/security/rbac.md#2025-04-20_snippet_5\n\nLANGUAGE: php\nCODE:\n```\nnamespace App\\Controller;\n\nuse Spiral\\Security\\GuardInterface;\n\nclass HomeController\n{\n    public function index(GuardInterface $guard): string\n    {\n        if (!$guard->allows('home.read', ['key' => 'value'])) {\n            return 'can not read';\n        }\n\n        return 'can read';\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Creating an Event Listener with Method-Level Attribute\nDESCRIPTION: Example of an event listener with the Listener attribute applied directly to the method instead of the class.\nSOURCE: https://github.com/spiral/docs/blob/3.14/docs/en/advanced/events.md#2025-04-20_snippet_10\n\nLANGUAGE: php\nCODE:\n```\nnamespace App\\Listener;\n\nuse App\\Event\\UserWasCreated;\nuse Spiral\\Events\\Attribute\\Listener;\n\nclass UserWasCreatedListener\n{\n    #[Listener(event: UserWasCreated::class, priority: 1)]\n    public function onUserWasCreated(UserWasCreated $event): void\n    {\n        // ...\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Generated Config Class Implementation\nDESCRIPTION: Example of a generated configuration class that provides OOP abstraction for accessing config values.\nSOURCE: https://github.com/spiral/docs/blob/3.14/docs/en/framework/config.md#2025-04-20_snippet_2\n\nLANGUAGE: php\nCODE:\n```\nnamespace App\\Config;\n\nuse Spiral\\Core\\InjectableConfig;\n\nclass GithubConfig extends InjectableConfig\n{\n    public const CONFIG = 'github';\n\n    protected array $config = [\n        'access_token' => '',\n        // ...\n    ];\n\n    public function getAccessToken(): string\n    {\n        return $this->config['access_token'];\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing MemoryInterface in PHP\nDESCRIPTION: Interface definition for long-term memory cache storage in Spiral Framework. Provides methods for reading and writing serializable data with section-based organization.\nSOURCE: https://github.com/spiral/docs/blob/3.14/docs/en/advanced/memory.md#2025-04-20_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n/**\n * Long memory cache. Use this storage to remember results of your calculations, do not store user\n * or non-static data in here (!).\n */\ninterface MemoryInterface\n{\n    /**\n     * Read data from long memory cache. Must return exacts same value as saved or null. Current\n     * convention allows to store serializable (var_export-able) data.\n     *\n     * @param string $section Non case sensitive.\n     * @return string|array|null\n     */\n    public function loadData(string $section);\n\n    /**\n     * Put data to long memory cache. No inner references or closures are allowed. Current\n     * convention allows to store serializable (var_export-able) data.\n     *\n     * @param string       $section Non case sensitive.\n     * @param string|array $data\n     */\n    public function saveData(string $section, $data);\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a Job Handler using Spiral CLI\nDESCRIPTION: Command to create a job handler class for handling queued tasks. Job handlers extend the JobHandler base class and implement an invoke method.\nSOURCE: https://github.com/spiral/docs/blob/3.14/docs/en/basics/scaffolding.md#2025-04-20_snippet_27\n\nLANGUAGE: terminal\nCODE:\n```\nphp app.php create:jobHandler <name>\n```\n\n----------------------------------------\n\nTITLE: Registering Error Handler Bootloader Using Constant\nDESCRIPTION: Code example showing how to register the YiiErrorHandlerBootloader using a class constant\nSOURCE: https://github.com/spiral/docs/blob/3.14/docs/en/basics/errors.md#2025-04-20_snippet_10\n\nLANGUAGE: php\nCODE:\n```\nprotected const LOAD = [\n    // ...\n    \\Spiral\\YiiErrorHandler\\Bootloader\\YiiErrorHandlerBootloader::class,\n    // ...\n];\n```\n\n----------------------------------------\n\nTITLE: Implementing Custom ViewRenderer for Error Pages\nDESCRIPTION: Creates a custom ViewRenderer that implements RendererInterface to render error pages using view templates. It supports both HTML and JSON responses based on the Accept header.\nSOURCE: https://github.com/spiral/docs/blob/3.14/docs/en/http/errors.md#2025-04-20_snippet_7\n\nLANGUAGE: php\nCODE:\n```\nnamespace App\\Application\\Exception\\Renderer;\n\nuse Psr\\Http\\Message\\ResponseFactoryInterface;\nuse Psr\\Http\\Message\\ResponseInterface;\nuse Psr\\Http\\Message\\ServerRequestInterface as Request;\nuse Spiral\\Http\\ErrorHandler\\RendererInterface;\nuse Spiral\\Http\\Header\\AcceptHeader;\nuse Spiral\\Views\\Exception\\ViewException;\nuse Spiral\\Views\\ViewsInterface;\n\nfinal class ViewRenderer implements RendererInterface\n{\n    private const GENERAL_VIEW = 'exception/error';\n    private const VIEW = 'exception/%s';\n\n    public function __construct(\n        private readonly ViewsInterface $views,\n        private readonly ResponseFactoryInterface $responseFactory\n    ) {\n    }\n\n    public function renderException(Request $request, int $code, \\Throwable $exception): ResponseInterface\n    {\n        $acceptItems = AcceptHeader::fromString($request->getHeaderLine('Accept'))->getAll();\n        if ($acceptItems && $acceptItems[0]->getValue() === 'application/json') {\n            return $this->renderJson($code, $exception);\n        }\n\n        return $this->renderView($code, $exception);\n    }\n\n    private function renderJson(int $code, \\Throwable $exception): ResponseInterface\n    {\n        $response = $this->responseFactory->createResponse($code);\n\n        $response = $response->withHeader('Content-Type', 'application/json; charset=UTF-8');\n        $response->getBody()->write(\\json_encode(['status' => $code, 'error' => $exception->getMessage()]));\n\n        return $response;\n    }\n\n    private function renderView(int $code, \\Throwable $exception): ResponseInterface\n    {\n        $response = $this->responseFactory->createResponse($code);\n\n        try {\n            // Try to find view for specific code\n            $view = $this->views->get(\\sprintf(self::VIEW, $code));\n        } catch (ViewException) {\n            // Otherwise use default error page\n            $view = $this->views->get(self::GENERAL_VIEW);\n        }\n\n        $content = $view->render(['code' => $code, 'exception' => $exception]);\n        $response->getBody()->write($content);\n\n        return $response;\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Namespaced Route Target in PHP\nDESCRIPTION: Sets up a namespaced route target for a collection of controllers in the same namespace. It requires 'controller' and 'action' parameters in the route pattern.\nSOURCE: https://github.com/spiral/docs/blob/3.14/docs/en/http/routing.md#2025-04-20_snippet_7\n\nLANGUAGE: php\nCODE:\n```\n$routes->add(name: 'admin', pattern: '/admin/<controller>/<action>')\n    ->namespaced(\n        namespace: 'App\\Controllers\\Admin', // required\n    );\n```\n\n----------------------------------------\n\nTITLE: Configuring SQLite Database Connection\nDESCRIPTION: PHP configuration for setting up a SQLite database connection, storing the database file in the runtime directory.\nSOURCE: https://github.com/spiral/docs/blob/3.14/docs/en/cookbook/quick-start.md#2025-04-20_snippet_3\n\nLANGUAGE: php\nCODE:\n```\nuse Cycle\\Database\\Config;\n\nreturn [\n    'default'   => 'default',\n    'databases' => [\n        'default' => ['driver' => 'sqlite'],\n    ],\n    'drivers' => [\n        'sqlite' => new Config\\SQLiteDriverConfig(\n            connection: new Config\\SQLite\\FileConnectionConfig(\n                database: directory('runtime') . '/db.sqlite'\n            ),\n            queryCache: true\n        ),\n        // ...\n    ],\n];\n```\n\n----------------------------------------\n\nTITLE: Creating a Basic Grid Schema\nDESCRIPTION: Example of creating a basic Grid Schema with pagination, sorting, and filtering options using the GridSchema class.\nSOURCE: https://github.com/spiral/docs/blob/3.14/docs/en/component/data-grid.md#2025-04-20_snippet_4\n\nLANGUAGE: php\nCODE:\n```\nuse Spiral\\DataGrid\\GridSchema; \nuse Spiral\\DataGrid\\Specification\\Filter\\Like;\nuse Spiral\\DataGrid\\Specification\\Pagination\\PagePaginator;\nuse Spiral\\DataGrid\\Specification\\Sorter\\Sorter;\nuse Spiral\\DataGrid\\Specification\\Value\\StringValue;\n\n$schema = new GridSchema();\n\n// User pagination: limit results to 10 per page\n$schema->setPaginator(new PagePaginator(10));\n\n// Sorting option: by id\n$schema->addSorter('id', new Sorter('id'));\n\n// Filter option: find by name matching user input\n$schema->addFilter('name', new Like('name', new StringValue()));\n```\n\n----------------------------------------\n\nTITLE: Generated LoginController Structure in PHP\nDESCRIPTION: The scaffolded LoginController class with route annotations for the login form and login action. This uses the PrototypeTrait for dependency injection and defines ResponseInterface return types.\nSOURCE: https://github.com/spiral/docs/blob/3.14/docs/zh-CN/cookbook/simple-chat.md#2025-04-20_snippet_14\n\nLANGUAGE: php\nCODE:\n```\nnamespace App\\Endpoint\\Web;\n\nuse Psr\\Http\\Message\\ResponseInterface;\nuse Spiral\\Prototype\\Traits\\PrototypeTrait;\nuse Spiral\\Router\\Annotation\\Route;\n\nclass LoginController\n{\n    use PrototypeTrait;\n\n    #[Route(route: 'path', name: 'name')]\n    public function loginForm(): ResponseInterface\n    {\n    }\n\n    #[Route(route: 'path', name: 'name')]\n    public function login(): ResponseInterface\n    {\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring HTTP Extension in Spiral Framework\nDESCRIPTION: Configuration file for HTTP extension settings including base path, default headers, and application-level middleware. This configuration is placed in the app/config/http.php file.\nSOURCE: https://github.com/spiral/docs/blob/3.14/docs/en/http/configuration.md#2025-04-20_snippet_3\n\nLANGUAGE: php\nCODE:\n```\nreturn [\n    // default base path\n    'basePath'   => '/',\n    \n    // default headers\n    'headers'    => [\n        'Content-Type' => 'text/html; charset=UTF-8'\n    ],\n\n    // application level middleware\n    'middleware' => [\n        // middleware class name\n    ],\n];\n```\n\n----------------------------------------\n\nTITLE: Registering OpenTelemetry Bootloader Using Constant\nDESCRIPTION: Alternative approach to register the OpenTelemetry bootloader in the application kernel using the LOAD constant.\nSOURCE: https://github.com/spiral/docs/blob/3.14/docs/en/advanced/telemetry.md#2025-04-20_snippet_2\n\nLANGUAGE: php\nCODE:\n```\nprotected const LOAD = [\n    // ...\n    \\Spiral\\OpenTelemetry\\Bootloader\\OpenTelemetryBootloader::class,\n    // ...\n];\n```\n\n----------------------------------------\n\nTITLE: Generated Controller Class with Route Annotations\nDESCRIPTION: The output of the create:controller command, showing a User controller class with five action methods. Each method returns a ResponseInterface and includes Route attributes that need to be configured.\nSOURCE: https://github.com/spiral/docs/blob/3.14/docs/en/basics/scaffolding.md#2025-04-20_snippet_14\n\nLANGUAGE: php\nCODE:\n```\ndeclare(strict_types=1);\n\nnamespace App\\Endpoint\\Web;\n\nuse Psr\\Http\\Message\\ResponseInterface;\nuse Spiral\\Router\\Annotation\\Route;\n\nclass UserController\n{\n    /**\n     * Please, don't forget to configure the Route attribute or remove it and register the route manually.\n     */\n    #[Route(route: 'path', name: 'name')]\n    public function index(): ResponseInterface\n    {\n    }\n\n    /**\n     * Please, don't forget to configure the Route attribute or remove it and register the route manually.\n     */\n    #[Route(route: 'path', name: 'name')]\n    public function show(): ResponseInterface\n    {\n    }\n\n    /**\n     * Please, don't forget to configure the Route attribute or remove it and register the route manually.\n     */\n    #[Route(route: 'path', name: 'name')]\n    public function create(): ResponseInterface\n    {\n    }\n\n    /**\n     * Please, don't forget to configure the Route attribute or remove it and register the route manually.\n     */\n    #[Route(route: 'path', name: 'name')]\n    public function update(): ResponseInterface\n    {\n    }\n\n    /**\n     * Please, don't forget to configure the Route attribute or remove it and register the route manually.\n     */\n    #[Route(route: 'path', name: 'name')]\n    public function delete(): ResponseInterface\n    {\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Using Config Object in Service Class\nDESCRIPTION: Shows how to use the generated config class in a service class for better type safety and IDE support.\nSOURCE: https://github.com/spiral/docs/blob/3.14/docs/en/framework/config.md#2025-04-20_snippet_3\n\nLANGUAGE: php\nCODE:\n```\nuse App\\Config\\GithubConfig;\n\nfinal class GithubClient\n{\n    private readonly string $accessToken;\n    \n    public function __construct(GithubConfig $config)\n    {\n        $this->accessToken = $config->getAccessToken();\n    }\n\n    // ...\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Bindings for Named Scopes in PHP\nDESCRIPTION: Shows how to pre-configure bindings for named scopes using the getBinder method and BinderInterface.\nSOURCE: https://github.com/spiral/docs/blob/3.14/docs/en/container/scopes.md#2025-04-20_snippet_3\n\nLANGUAGE: php\nCODE:\n```\n// Configure `root` scope bindings (the current instance)\n$container->bindSingleton(Interface::class, Implementation::class);\n\n// Configure `request` scope default bindings\n// Prefer way to make many bindings\n$binder = $container->getBinder('request');\n$binder->bindSingleton(Interface::class, Implementation::class);\n$binder->bind(Interface::class, factory(...));\n```\n\n----------------------------------------\n\nTITLE: Configuring Spiral Distribution Component in PHP\nDESCRIPTION: Demonstrates the configuration file structure for the Spiral Distribution component, including default resolver and multiple resolver configurations.\nSOURCE: https://github.com/spiral/docs/blob/3.14/docs/en/advanced/storage.md#2025-04-20_snippet_23\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\nreturn [\n    'default' => env('DISTRIBUTION_RESOLVER', 'local'),\n\n    'resolvers' => [\n        'local' => [\n            'type' => 'static',\n            'uri'  => env('APP_URL', 'http://localhost')\n        ],\n\n        'cloudfront' => [\n            'type' => 'cloudfront',\n            'key' => env('AWS_CF_KEY'),\n            'domain' => env('AWS_CF_KEY'),\n            'private' => env('AWS_CF_PRIVATE_KEY'),\n        ],\n\n        's3' => [\n            'type' => 's3',\n            'region' => env('S3_REGION'),\n            'bucket' => env('S3_BUCKET'),\n            'key' => env('S3_KEY'),\n            'secret' => env('S3_SECRET'),\n        ],\n    ],\n];\n```\n\n----------------------------------------\n\nTITLE: Starting RoadRunner Server - Spiral PHP\nDESCRIPTION: Command to start the RoadRunner server for testing the controller\nSOURCE: https://github.com/spiral/docs/blob/3.14/docs/en/start/http-basics.md#2025-04-20_snippet_5\n\nLANGUAGE: terminal\nCODE:\n```\n./rr serve\n```\n\n----------------------------------------\n\nTITLE: Configuring Custom URI Resolver in Spiral Framework\nDESCRIPTION: PHP configuration for setting up a custom URI resolver in the Spiral Framework. It shows how to specify the resolver class and pass additional options.\nSOURCE: https://github.com/spiral/docs/blob/3.14/docs/en/advanced/storage.md#2025-04-20_snippet_38\n\nLANGUAGE: php\nCODE:\n```\nreturn [\n    // ...\n    'resolvers' => [\n        // ...\n        'custom' => [\n            'type' => \\Example\\CustomResolver::class,\n            'options' => [\n                // list of constructor arguments...\n            ],\n        ],\n    ]\n];\n```\n\n----------------------------------------\n\nTITLE: Implementing Custom Database Validator in PHP with Spiral Framework\nDESCRIPTION: Example of creating a custom database checker class for validation rules, including user existence validation and registration in the validation bootloader.\nSOURCE: https://github.com/spiral/docs/blob/3.14/docs/zh-CN/validation/spiral.md#2025-04-20_snippet_1\n\nLANGUAGE: php\nCODE:\n```\nnamespace App\\Security;\n\nuse Cycle\\Database\\Database;\nuse Spiral\\Validator\\AbstractChecker;\n\nclass DBChecker extends AbstractChecker\n{\n    public const MESSAGES = [\n        // Method => Error message\n        'user' => 'No such user.'\n    ];\n\n    public function user(int $id): bool\n    {\n        return $this->db->table('users')->select()->where('id', $id)->count() === 1;\n    }\n}\n```\n\nLANGUAGE: php\nCODE:\n```\nnamespace App\\Bootloader;\n\nuse App\\Security\\DBChecker;\nuse Spiral\\Boot\\Bootloader\\Bootloader;\nuse Spiral\\Validator\\Bootloader\\ValidatorBootloader;\n\nclass CheckerBootloader extends Bootloader\n{\n    public function boot(ValidationBootloader $validation): void\n    {\n        // 注册自定义检查器\n        $validation->addChecker('db', DBChecker::class);\n        \n        // 注册检查器的别名\n        $validation->addAlias('db_user', 'db::user');\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a custom ValidationInterface\nDESCRIPTION: This snippet demonstrates how to create a custom validation class by implementing the `ValidationInterface`. This interface requires a `validate` method that returns a `ValidatorInterface` instance.\nSOURCE: https://github.com/spiral/docs/blob/3.14/docs/zh-CN/validation/factory.md#2025-04-20_snippet_6\n\nLANGUAGE: php\nCODE:\n```\n```php\nnamespace App\\Validator;\n\nuse Spiral\\Validation\\ValidationInterface;\nuse Spiral\\Validation\\ValidatorInterface;\n\nfinal class MyValidation implements ValidationInterface\n{\n    public function validate(mixed $data, array $rules, $context = null): ValidatorInterface\n    {\n        return (new MyValidator(\n            new MyValidationService($rules)\n        ))\n          ->withData($data)\n          ->withContext($context);\n    }\n}\n```\n```\n\n----------------------------------------\n\nTITLE: Sending Email with Mailer in Spiral PHP\nDESCRIPTION: Demonstrates how to send an email using the MailerInterface in Spiral Framework.\nSOURCE: https://github.com/spiral/docs/blob/3.14/docs/zh-CN/advanced/sendit.md#2025-04-20_snippet_4\n\nLANGUAGE: php\nCODE:\n```\nuse Spiral\\Mailer\\MailerInterface;\nuse Spiral\\Mailer\\Message;\n\npublic function send(MailerInterface $mailer): void\n{\n    $mailer->send(new Message(\n        'template.dark.php', \n        'email@domain.com',\n        [\n            'name' => 'Dave',\n            'attachment' => __FILE__,\n        ]\n    ));\n}\n```\n\n----------------------------------------\n\nTITLE: Using runScoped Method without Autowiring in PHP\nDESCRIPTION: Demonstrates how to use the runScoped method with autowiring disabled, manually fetching dependencies from the container within the closure.\nSOURCE: https://github.com/spiral/docs/blob/3.14/docs/en/container/scopes.md#2025-04-20_snippet_2\n\nLANGUAGE: php\nCODE:\n```\n$container->runScoped(closure: function (Contaner $container) {\n    $instance = $container->get(SomeInterface::class);\n    // Your code here\n}, bindings: [SomeInterface::class => SomeImplementation::class], autowire: false);\n```\n\n----------------------------------------\n\nTITLE: Implementing Notification Logic\nDESCRIPTION: Implementation of notification sending logic with mailer dependency injection\nSOURCE: https://github.com/spiral/docs/blob/3.14/docs/en/temporal/usage.md#2025-04-20_snippet_11\n\nLANGUAGE: php\nCODE:\n```\nnamespace App\\Endpoint\\Temporal\\Activity;\n\nuse React\\Promise\\PromiseInterface;\nuse Spiral\\Mailer\\MailerInterface;\nuse Temporal\\Activity\\ActivityInterface;\nuse Temporal\\Activity\\ActivityMethod;\n\n#[ActivityInterface]\nclass SendNotificationActivity\n{\n    public function __construct(\n        private readonly MailerInterface $mailer,\n    ) {\n    }\n\n    /** @return PromiseInterface<void> */\n    #[ActivityMethod(name: 'sendFailedNotification')]\n    public function sendFailedNotification(string $domain): void\n    {\n        $text = \"Website {$domain} is down.\";\n\n        // $this->mailer->send(...);\n    }\n\n    /** @return PromiseInterface<void> */\n    #[ActivityMethod(name: 'sendRecoveryNotification')]\n    public function sendRecoveryNotification(string $domain, int $downTime): void\n    {\n        $text = \"Website {$domain} is up after {$downTime} minutes of downtime\";\n\n        // $this->mailer->send(...);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Generated Bootloader Class Example\nDESCRIPTION: Example of a generated bootloader class showing the basic structure\nSOURCE: https://github.com/spiral/docs/blob/3.14/docs/en/basics/scaffolding.md#2025-04-20_snippet_7\n\nLANGUAGE: php\nCODE:\n```\ndeclare(strict_types=1);\n\nnamespace App\\Application\\Bootloader;\n\nuse Spiral\\Boot\\Bootloader\\Bootloader;\n\nfinal class AppBootloader extends Bootloader\n{\n    protected const BINDINGS = [];\n    protected const SINGLETONS = [];\n    protected const DEPENDENCIES = [];\n\n    public function init(): void\n    {\n    }\n\n    public function boot(): void\n    {\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Creating File Attachment Response with ResponseWrapper\nDESCRIPTION: Shows how to send a file as an attachment using the ResponseWrapper's attachment method. This is useful for file downloads, where the method handles setting appropriate headers and streaming the file content.\nSOURCE: https://github.com/spiral/docs/blob/3.14/docs/en/http/request-response.md#2025-04-20_snippet_15\n\nLANGUAGE: php\nCODE:\n```\npublic function index(): ResponseInterface\n{\n    return $this->response->attachment(__FILE__, 'name.php');\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Attributes Reader with Factory\nDESCRIPTION: Example of creating an attributes reader using the Spiral\\Attributes\\Factory. This factory method returns a selective reader implementation that's suitable for most use cases.\nSOURCE: https://github.com/spiral/docs/blob/3.14/docs/en/advanced/attributes.md#2025-04-20_snippet_18\n\nLANGUAGE: php\nCODE:\n```\nuse Spiral\\Attributes\\Factory;\n\n$reader = (new Factory())->create();\n```\n\n----------------------------------------\n\nTITLE: Using Custom Attribute with Base64 Decoding in Spiral Filters\nDESCRIPTION: Example of using a custom attribute to handle base64-encoded query parameters. This filter automatically decodes the 'hash' parameter from the query string.\nSOURCE: https://github.com/spiral/docs/blob/3.14/docs/en/filters/filter.md#2025-04-20_snippet_16\n\nLANGUAGE: php\nCODE:\n```\nnamespace App\\Endpoint\\Web\\Filter;\n\nuse App\\Validation\\Attribute\\Base64DecodedQuery;\nuse Spiral\\Filters\\Model\\Filter;\n\nclass MyFilter extends Filter\n{\n    #[Base64DecodedQuery]\n    public ?string $hash = null;\n}\n```\n\n----------------------------------------\n\nTITLE: Using Entity Factory in Test Cases\nDESCRIPTION: Example of using entity factory in a feature test case to create and verify user entities. Demonstrates factory instantiation and assertion checking.\nSOURCE: https://github.com/spiral/docs/blob/3.14/docs/en/testing/database.md#2025-04-20_snippet_10\n\nLANGUAGE: php\nCODE:\n```\nfinal class UserServiceTest extends DatabaseTestCase\n{\n    // ...\n\n    public function testDeleteUser(): void\n    {\n        $user = UserFactory::new()\n            ->fromCity('New York')\n            ->createOne();\n\n        $this->userService->delete(\n            uuid: $user->uuid,\n        );\n\n        $this->assertEntity(User::class)->where([\n            'uuid' => (string)$user->uuid,\n            'deleted_at' => ['!=' => null],\n        ])->assertExists();\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing User Entity with Cycle ORM\nDESCRIPTION: Definition of User entity class using Cycle ORM annotations for database mapping.\nSOURCE: https://github.com/spiral/docs/blob/3.14/docs/en/security/authentication.md#2025-04-20_snippet_18\n\nLANGUAGE: php\nCODE:\n```\nnamespace App\\Database;\n\nuse Cycle\\Annotated\\Annotation as Cycle;\n\n#[Cycle\\Entity(repository: UserRepository::class)]\n#[Index(columns: ['username'], unique: true)]\nclass User\n{\n    #[Cycle\\Column(type: 'primary')]\n    public int $id;\n\n    #[Cycle\\Column(type: \"string\")]\n    public string $name;\n\n    #[Cycle\\Column(type: \"string\")]\n    public string $username;\n\n    #[Cycle\\Column(type: \"string\")]\n    public string $password;\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Test Method in PostController for Spiral Framework\nDESCRIPTION: This code snippet demonstrates how to implement the test method in PostController, returning an array with status and data, which will be treated as a JSON response.\nSOURCE: https://github.com/spiral/docs/blob/3.14/docs/en/cookbook/quick-start.md#2025-04-20_snippet_34\n\nLANGUAGE: php\nCODE:\n```\n#[Route(route: '/api/test/<id>', name: \"post.test\", methods: 'GET')]\npublic function test(string $id): array\n{\n    return [\n        'status' => 200,\n        'data'   => [\n            'id' => $id\n        ]\n    ];\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring AMQP Queue in PHP with RoadRunner\nDESCRIPTION: Configuration for setting up an AMQP queue pipeline in Spiral Framework using PHP. The code defines a default pipeline with AMQP connector and enables consuming to process incoming jobs.\nSOURCE: https://github.com/spiral/docs/blob/3.14/docs/en/cookbook/simple-queue-system.md#2025-04-20_snippet_12\n\nLANGUAGE: php\nCODE:\n```\nuse Spiral\\RoadRunner\\Jobs\\Queue\\AMQPCreateInfo;\n\nreturn [\n    'default' => env('QUEUE_CONNECTION', 'roadrunner'),\n\n    'pipelines' => [\n         'default' => [\n             'connector' => new AMQPCreateInfo(\n                  name: 'default',\n                  priority: 100,\n                  queue: 'default',\n             ),\n             'consume' => true, // <===== Enables consuming\n         ],\n    ],\n    \n    'connections' => [\n        'roadrunner' => [\n            'driver' => 'roadrunner',\n            'pipeline' => 'default',\n        ],\n    ],\n];\n```\n\n----------------------------------------\n\nTITLE: Registering Routes via KeeperBootloader in PHP\nDESCRIPTION: Demonstrates how to register Keeper routes using a bootloader class. Shows the setup of namespace, prefix, controller registration and route definition.\nSOURCE: https://github.com/spiral/docs/blob/3.14/docs/en/keeper/routing.md#2025-04-20_snippet_0\n\nLANGUAGE: php\nCODE:\n```\nuse Spiral\\Boot\\BootloadManager;\nuse Spiral\\Keeper\\Bootloader;\nuse Spiral\\Router\\RouterInterface;\n\nclass AdminBootloader extends Bootloader\\KeeperBootloader\n{\n    protected const NAMESPACE = 'admin';\n    protected const PREFIX    = '/admin';\n\n    public function boot(BootloadManager $bootloadManager, RouterInterface $appRouter): void\n    {\n        parent::boot($bootloadManager, $appRouter);\n\n        // Controllers are used via aliases\n        $this->addController('user', 'App\\Admin\\Controller\\User');\n        $this->addRoute('/users/new', 'user', 'new', ['GET'], 'createUser');\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Actor in IoC Scope for Role-Based Access Control in PHP\nDESCRIPTION: Example of setting an Actor with the 'admin' role within an IoC scope in a Spiral controller.\nSOURCE: https://github.com/spiral/docs/blob/3.14/docs/en/security/rbac.md#2025-04-20_snippet_1\n\nLANGUAGE: php\nCODE:\n```\nnamespace App\\Controller;\n\nuse Spiral\\Core\\ScopeInterface;\nuse Spiral\\Security\\Actor\\Actor;\nuse Spiral\\Security\\ActorInterface;\n\nclass HomeController\n{\n    public function index(ScopeInterface $scope): string\n    {\n        return $scope->runScope([ActorInterface::class => new Actor(['admin'])], function (): string {\n\n            // the actor has role `admin` in this scope\n            return 'ok';\n        });\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Filter for Console Command Input in PHP\nDESCRIPTION: Example of a filter class for validating and filtering console command input data using custom attributes.\nSOURCE: https://github.com/spiral/docs/blob/3.14/docs/zh-CN/cookbook/console-validation.md#2025-04-20_snippet_5\n\nLANGUAGE: PHP\nCODE:\n```\nnamespace App\\Command;\n\nuse App\\Application\\Console\\Attribute\\Argument;\nuse App\\Application\\Console\\Attribute\\Option;\nuse Spiral\\Filters\\Model\\Filter;\n\nclass UserRegisterFilter extends Filter\n{\n    #[Argument]\n    public string $username;\n\n    #[Argument]\n    public string $email;\n\n    #[Option]\n    public bool $admin = false;\n\n    #[Option(key: 'send-verification-email')]\n    public bool $sendVerificationEmail = false;\n}\n```\n\n----------------------------------------\n\nTITLE: Replacing Application Container in Spiral PHP\nDESCRIPTION: Example showing how to replace the default container instance when creating a Spiral application. This allows custom container configuration before application initialization.\nSOURCE: https://github.com/spiral/docs/blob/3.14/docs/en/container/overview.md#2025-04-20_snippet_16\n\nLANGUAGE: php\nCODE:\n```\nuse Spiral\\Core\\Container;\nuse App\\Application\\Kernel;\n\n$container = new Container();\n$container->bind(...);\n\n$app = Kernel::create(\n    directories: ['root' => __DIR__],\n    container: $container\n)\n```\n\n----------------------------------------\n\nTITLE: Fetching Centrifugo Channel Presence Statistics in PHP\nDESCRIPTION: Shows how to use the presenceStats method to retrieve summarized information about a channel's presence, including the number of clients and unique users. This is useful for quick channel activity overviews.\nSOURCE: https://github.com/spiral/docs/blob/3.14/docs/en/websockets/api.md#2025-04-20_snippet_7\n\nLANGUAGE: PHP\nCODE:\n```\npublic function handle(Channel $channel): void\n{\n   $stats = $this->api->presenceStats($channel->getName());\n   // ...\n}\n```\n\n----------------------------------------\n\nTITLE: Using Default Resolver in Spiral Controller\nDESCRIPTION: Shows how to use the default resolver directly in a Spiral Framework controller without getting the entire manager instance.\nSOURCE: https://github.com/spiral/docs/blob/3.14/docs/en/advanced/storage.md#2025-04-20_snippet_27\n\nLANGUAGE: php\nCODE:\n```\nuse Spiral\\Distribution\\UriResolverInterface;\n\nclass FilesController\n{\n    public function showImage(UriResolverInterface $resolver): string\n    {\n        return (string)$resolver->resolve('example/image.jpg');\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Using SerializerManager for Dynamic Serialization\nDESCRIPTION: Demonstrates how to use the SerializerManager to dynamically select a serializer based on runtime options.\nSOURCE: https://github.com/spiral/docs/blob/3.14/docs/en/cookbook/migration-from-v2.md#2025-04-20_snippet_22\n\nLANGUAGE: php\nCODE:\n```\nclass Queue \n{\n    public function __construct(\n        private readonly PipelineInterface $pipeline,\n        private readonly \\Spiral\\Serializer\\SerializerManager $manager\n    ) {}\n\n    public function push(array $payload, Options $options): void\n    {\n        // $options->format = 'json'\n        // $options->format = 'xml'\n        // ...\n\n        $this->pipeline->push(\n            $this-manager\n                ->getSerializer($options->format)\n                ->serialize($payload)\n        );\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Cookie Configuration File\nDESCRIPTION: Example configuration file for cookies showing domain settings, protection method, and whitelist options.\nSOURCE: https://github.com/spiral/docs/blob/3.14/docs/en/http/cookies.md#2025-04-20_snippet_6\n\nLANGUAGE: php\nCODE:\n```\nuse Spiral\\Cookies\\Config\\CookiesConfig;\n\nreturn [\n    // by default all cookies will be set as .domain.com\n    'domain'   => '.%s',\n\n    // protection method\n    'method'   => CookiesConfig::COOKIE_ENCRYPT,\n\n    // whitelisted cookies (no encrypt/decrypt)\n    'excluded' => ['PHPSESSID', 'csrf-token']\n];\n```\n\n----------------------------------------\n\nTITLE: Creating ORM Entities using Scaffolder in Spiral\nDESCRIPTION: These commands use the Spiral scaffolder component to create Thread, Message, and User entities with their respective repositories.\nSOURCE: https://github.com/spiral/docs/blob/3.14/docs/en/cookbook/simple-chat.md#2025-04-20_snippet_13\n\nLANGUAGE: terminal\nCODE:\n```\nphp app.php create:entity thread -f id:primary -f name:string -e\nphp app.php create:entity message -f id:primary -f message:string -e\nphp app.php create:entity user -f id:primary -f username:string -f password:string -e\n```\n\n----------------------------------------\n\nTITLE: Using GuardInterface for Permission Checking in Spiral Controller\nDESCRIPTION: Example of using GuardInterface to check if the current actor has permission to perform a specific action in a Spiral controller.\nSOURCE: https://github.com/spiral/docs/blob/3.14/docs/en/security/rbac.md#2025-04-20_snippet_3\n\nLANGUAGE: php\nCODE:\n```\nnamespace App\\Controller;\n\nuse Spiral\\Security\\GuardInterface;\n\nclass HomeController\n{\n    public function index(GuardInterface $guard): string\n    {\n        if (!$guard->allows('home.read')) {\n            return 'can not read';\n        }\n\n        return 'can read';\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Accessing UserContext in Controller\nDESCRIPTION: Example of accessing the UserContext through method injection in a controller.\nSOURCE: https://github.com/spiral/docs/blob/3.14/docs/en/http/middleware.md#2025-04-20_snippet_10\n\nLANGUAGE: php\nCODE:\n```\npublic function index(UserContext $ctx): void\n{\n    dump($ctx);\n}\n```\n\n----------------------------------------\n\nTITLE: Binding Interface to Implementation using Container in PHP\nDESCRIPTION: Shows how to bind an interface to a concrete implementation using the Container class within a bootloader.\nSOURCE: https://github.com/spiral/docs/blob/3.14/docs/en/container/configuration.md#2025-04-20_snippet_1\n\nLANGUAGE: php\nCODE:\n```\nuse Spiral\\Core\\Container;\n\npublic function boot(Container $container): void\n{\n    $container->bind(\n        UserRepositoryInterface::class, \n        CycleUserRepository::class\n    );\n}\n```\n\n----------------------------------------\n\nTITLE: Attribute-Based Prototype Registration\nDESCRIPTION: Shows how to use attributes to register prototype classes and services.\nSOURCE: https://github.com/spiral/docs/blob/3.14/docs/en/basics/prototype.md#2025-04-20_snippet_5\n\nLANGUAGE: php\nCODE:\n```\nnamespace App\\Domain\\User\\Service;\n\nuse Spiral\\Prototype\\Annotation\\Prototyped;\n\n#[Prototyped(property: 'userService')]\nfinal class UserService\n{\n    // ...\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Routes with Stempler in PHP\nDESCRIPTION: Demonstrates how to create routes using the @route directive in Stempler templates. It shows basic usage, parameter passing, and automatic slugification of route parameters.\nSOURCE: https://github.com/spiral/docs/blob/3.14/docs/en/views/stempler.md#2025-04-20_snippet_10\n\nLANGUAGE: php\nCODE:\n```\n<a href=\"@route('home:index')\">click me</a>\n```\n\nLANGUAGE: php\nCODE:\n```\n$router->addRoute(\n    'html',\n    new Route('/<action>.html', new Controller(HomeController::class))\n);\n```\n\nLANGUAGE: php\nCODE:\n```\n<a href=\"@route('html', ['action' => 'index'])\">click me</a>\n```\n\nLANGUAGE: php\nCODE:\n```\n<a href=\"@route('html', ['action' => 'index', 'id' => 10])\">click me</a>\n```\n\n----------------------------------------\n\nTITLE: Login Controller Implementation\nDESCRIPTION: Controller handling login authentication and token creation with redirect functionality.\nSOURCE: https://github.com/spiral/docs/blob/3.14/docs/en/cookbook/simple-chat.md#2025-04-20_snippet_33\n\nLANGUAGE: php\nCODE:\n```\nuse App\\Application\\Exception\\InvalidCredentialsException;\nuse App\\Entrypoint\\Web\\Filter\\LoginRequest;\n\nfinal class LoginController\n{\n    // ...\n    \n    #[Route('/login', methods: ['POST'])]\n    public function login(LoginRequest $filter): ResponseInterface\n    {\n        $user = $this->users->findByUsername($filter->username);\n\n        if (!$user || !\\password_verify($filter->password, $user->getPassword())) {\n            throw new InvalidCredentialsException('Invalid username or password!');\n        }\n    \n        $token = $this->authTokens->create($user->jsonSerialize());\n        $this->auth->start($token);\n    \n        return $this->response->redirect('/');\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Select Filter in PHP\nDESCRIPTION: Examples of Select filter for choosing specifications from a predefined set.\nSOURCE: https://github.com/spiral/docs/blob/3.14/docs/en/component/data-grid.md#2025-04-20_snippet_29\n\nLANGUAGE: php\nCODE:\n```\nuse Spiral\\DataGrid\\Specification\\Filter;\n\n// note, that we have integer keys here\n$select = new Filter\\Select([\n    new Filter\\Equals('name', 'value'),\n    new Filter\\Any(\n        new Filter\\Equals('price', 2),\n        new Filter\\Gt('quantity', 5)\n    ),\n    new Filter\\Equals('email', 'email@example.com'),\n]);\n\n// select the second filter, will be equal to 'any' specification.\n$filter = $select->withValue(1);\n```\n\nLANGUAGE: php\nCODE:\n```\nuse Spiral\\DataGrid\\Specification\\Filter;\n\n$select = new Filter\\Select([\n    'one'  => new Filter\\Equals('name', 'value'),\n    'two'  => new Filter\\Any(\n        new Filter\\Equals('price', 2),\n        new Filter\\Gt('quantity', 5)\n    ),\n    'three' => new Filter\\Equals('email', 'email@example.com'),\n]);\n\n// the filter will contain both sub-filters wrapped in 'all' specification\n$filter = $select->withValue(['one', 'two']);\n```\n\nLANGUAGE: php\nCODE:\n```\nuse Spiral\\DataGrid\\Specification\\Filter;\n\n$select = new Filter\\Select([\n    'one'  => new Filter\\Equals('name', 'value'),\n    'two'  => new Filter\\Any(\n        new Filter\\Equals('price', 2),\n        new Filter\\Gt('quantity', 5)\n    ),\n    'three' => new Filter\\Equals('email', 'email@example.com'),\n]);\n\n// filter will be equal to null\n$filter = $select->withValue('four');\n```\n\n----------------------------------------\n\nTITLE: Implementing an Injectable Enum for Debug Mode\nDESCRIPTION: Shows how to implement an injectable enum for representing and detecting the debug mode of an application.\nSOURCE: https://github.com/spiral/docs/blob/3.14/docs/en/cookbook/migration-from-v2.md#2025-04-20_snippet_19\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\ndeclare(strict_types=1);\n\nnamespace Spiral\\Boot\\Environment;\n\nuse Spiral\\Boot\\EnvironmentInterface;\nuse Spiral\\Boot\\Injector\\ProvideFrom;\nuse Spiral\\Boot\\Injector\\InjectableEnumInterface;\n\n#[ProvideFrom(method: 'detect')]\nenum DebugMode implements InjectableEnumInterface\n{\n    case Enabled;\n    case Disabled;\n\n    public function isEnabled(): bool\n    {\n        return $this === self::Enabled;\n    }\n\n    public static function detect(EnvironmentInterface $environment): self\n    {\n        return \\filter_var($environment->get('DEBUG'), \\FILTER_VALIDATE_BOOL) ? self::Enabled : self::Disabled;\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Job Handler with Object Payload\nDESCRIPTION: Implementation of a job handler that processes typed object payloads. The handler logs the received job information including ID, payload data, and headers.\nSOURCE: https://github.com/spiral/docs/blob/3.14/docs/en/cookbook/simple-queue-system.md#2025-04-20_snippet_19\n\nLANGUAGE: php\nCODE:\n```\nnamespace App\\Endpoint\\Job;\n\nuse Psr\\Log\\LoggerInterface;\nuse Spiral\\Queue\\JobHandler;\n\nfinal class PingJob extends JobHandler\n{\n    public function invoke(\n        LoggerInterface $logger, \n        string $id, \n        array $payload,\n        array $headers,\n    ): void {\n        $logger->info('Ping job received', [\n            'id' => $id,\n            'payload' => $payload,\n            'headers' => $headers,\n        ]);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Data Grid in Keeper Templates\nDESCRIPTION: Demonstrates how to create a powerful data grid with filtering, sorting, and custom cell rendering in Keeper templates.\nSOURCE: https://github.com/spiral/docs/blob/3.14/docs/en/keeper/views.md#2025-04-20_snippet_6\n\nLANGUAGE: html\nCODE:\n```\n//...\n<block:content>\n    <ui:grid url=\"@action('users.list')\">\n        <grid:filter search=\"true\" immediate=\"300\" buttons=\"true\">\n            @auth('keeper.statuses')\n            <form:select name=\"status\" label=\"[[Status]]\" placeholder=\"[[Select Status]]\"\n                         values=\"{{ ['active' => '[[Active]]', 'disabled' => '[[Disabled]]'] }}\"/>\n            @endauth\n        </grid:filter>\n\n        <grid:cell.text name=\"first_name\" label=\"[[First Name]]\" sort=\"true\" body=\"{firstName}\" sort-dir=\"asc\"\n                        sort-default=\"true\"/>\n        <grid:cell.text name=\"last_name\" label=\"[[Last Name]]\" sort=\"true\" body=\"{lastName}\"/>\n        <grid:cell.link name=\"email\" label=\"[[Email]]\" href=\"mailto:{email}\" body=\"{email}\" sort=\"true\"\n                        condition=\"showEmail\"/>\n        <grid:cell.render name=\"status\" label=\"[[Status]]\" renderer=\"status\"/>\n\n        <grid:action.link label=\"[[Edit]]\" icon=\"edit\" url=\"@action('users.edit', ['user' => '{id}'])\"\n                          permission=\"keeper.users.view\"/>\n    </ui:grid>\n</block:content>\n<stack:push name=\"scripts\" unique-id=\"datagrid-account-renderer\">\n    <script type=\"text/javascript\">\n        SFToolkit.tools._datagrid.register('status', function () {\n            return function (status, item) {\n                let map = {\n                    \"active\": 'badge-primary',\n                    \"disabled\": 'badge-warning',\n                }\n                let badge = (status.toLowerCase() in map) ? map[status.toLowerCase()] : 'badge-secondary';\n                return '<span class=\"badge ' + badge + ' mr-1\">' + status.toUpperCase() + '</span>';\n            }\n        });\n    </script>\n</stack:push>\n```\n\n----------------------------------------\n\nTITLE: Resolver Interface Implementation\nDESCRIPTION: Demonstrates using ResolverInterface for dynamic method argument resolution.\nSOURCE: https://github.com/spiral/docs/blob/3.14/docs/en/container/overview.md#2025-04-20_snippet_7\n\nLANGUAGE: php\nCODE:\n```\nabstract class Handler\n{\n    public function __construct(\n        protected readonly ResolverInterface $resolver\n    ) {\n    }\n\n    public function run(array $params): bool\n    {\n        $method = new \\ReflectionMethod($this, 'do');\n\n        return $method->invokeArgs(\n            $this, \n            $this->resolver->resolveArguments($method, $params) // resolve missing arguments\n        );\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Retrieving CSRF Token in Spiral Controller\nDESCRIPTION: Example of how to retrieve the CSRF token from a request in a Spiral controller method.\nSOURCE: https://github.com/spiral/docs/blob/3.14/docs/en/http/csrf.md#2025-04-20_snippet_6\n\nLANGUAGE: php\nCODE:\n```\npublic function index(ServerRequestInterface $request): void\n{\n    $csrfToken = $request->getAttribute('csrfToken');\n}\n```\n\n----------------------------------------\n\nTITLE: File Operations Service Example\nDESCRIPTION: Example service class showing file operations using FilesInterface dependency injection.\nSOURCE: https://github.com/spiral/docs/blob/3.14/docs/en/basics/files.md#2025-04-20_snippet_4\n\nLANGUAGE: php\nCODE:\n```\nuse Spiral\\Files\\FilesInterface;\n\nfinal class FileService\n{   \n    public function __construct(\n        private readonly FilesInterface $files,\n        private readonly AppDirectories $dirs\n    ) {}\n\n    public function getRootFiles()\n    {\n        // get all files from root directory recursively\n        dump(\n            $files->getFiles($dirs->getRoot())\n        );\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Reading Constant Metadata with Attributes\nDESCRIPTION: Examples of how to read constant metadata using the ReaderInterface methods.\nSOURCE: https://github.com/spiral/docs/blob/3.14/docs/zh-CN/advanced/attributes.md#2025-04-20_snippet_6\n\nLANGUAGE: php\nCODE:\n```\n$reflection = new ReflectionClassConstant(Example::class, 'CONSTANT_NAME');\n\n$attributes = $reader->getConstantMetadata($reflection); \n// returns iterable<object>\n```\n\nLANGUAGE: php\nCODE:\n```\n$reflection = new ReflectionClassConstant(Example::class, 'CONSTANT_NAME');\n\n$attributes = $reader->getConstantMetadata($reflection, Deprecated::class); \n// returns iterable<Deprecated>\n```\n\nLANGUAGE: php\nCODE:\n```\n$reflection = new ReflectionClassConstant(Example::class, 'CONSTANT_NAME');\n\n$getter = $reader->firstConstantMetadata($reflection, Deprecated::class); \n// returns Deprecated|null\n```\n\n----------------------------------------\n\nTITLE: Creating an Event Listener with Default Method\nDESCRIPTION: Example of a simple event listener class that uses the default __invoke method to handle a UserWasCreated event.\nSOURCE: https://github.com/spiral/docs/blob/3.14/docs/en/advanced/events.md#2025-04-20_snippet_8\n\nLANGUAGE: php\nCODE:\n```\nnamespace App\\Listener;\n\nuse App\\Event\\UserWasCreated;\nuse Spiral\\Events\\Attribute\\Listener;\n\n#[Listener]\nclass UserWasCreatedListener\n{\n    public function __invoke(UserWasCreated $event): void\n    {\n        // ...\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Tokenizer Search Options in Spiral Framework\nDESCRIPTION: Configuration for the tokenizer to define what types of elements to search for. You can enable or disable searching for classes, enums, and interfaces based on your project needs.\nSOURCE: https://github.com/spiral/docs/blob/3.14/docs/en/advanced/tokenizer.md#2025-04-20_snippet_11\n\nLANGUAGE: php\nCODE:\n```\nreturn [\n    'load' => [\n        'classes' => true, // Search for classes\n        'enums' => true, // Search for enums\n        'interfaces' => true, // Search for interfaces\n    ],\n];\n```\n\n----------------------------------------\n\nTITLE: Registering HttpAuthBootloader Using Method\nDESCRIPTION: Shows how to activate authentication by adding the HttpAuthBootloader to the kernel's bootloaders list using the defineBootloaders method.\nSOURCE: https://github.com/spiral/docs/blob/3.14/docs/en/security/authentication.md#2025-04-20_snippet_0\n\nLANGUAGE: php\nCODE:\n```\npublic function defineBootloaders(): array\n{\n    return [\n        // ...\n        \\Spiral\\Bootloader\\Auth\\HttpAuthBootloader::class,\n        // ...\n    ];\n}\n```\n\n----------------------------------------\n\nTITLE: Custom Redis Queue Driver Implementation\nDESCRIPTION: Example implementation of a custom queue driver for Redis, showing how to create a driver that implements the QueueInterface and handles serialization and job pushing.\nSOURCE: https://github.com/spiral/docs/blob/3.14/docs/en/queue/configuration.md#2025-04-20_snippet_7\n\nLANGUAGE: php\nCODE:\n```\nnamespace App\\Infrastructure\\Queue;\n\nuse Spiral\\Queue\\SerializerRegistryInterface;\nuse Spiral\\Queue\\QueueInterface;\n\nfinal class RedisQueue implements QueueInterface\n{\n    public function __construct(\n        private readonly SerializerRegistryInterface $redis,\n        private readonly Redis $redis,\n        private readonly string $server,\n        private readonly string $queueName,\n    ) {\n    }\n\n    public function push(string $name, array $payload = [], OptionsInterface $options = null): string\n    {\n        $payload = $this->serializerRegistry->getSerializer($name)->serialize($payload);\n        \n        $id = // generate job id\n        \n        // Push job to the redis broker and return job id\n        $this->redis->...\n        \n        return $id;\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Registering Custom InputBag in Spiral HttpBootloader\nDESCRIPTION: Shows how to register a custom InputBag for file uploads in Spiral's HttpBootloader within an application bootloader.\nSOURCE: https://github.com/spiral/docs/blob/3.14/docs/en/http/request-response.md#2025-04-20_snippet_4\n\nLANGUAGE: php\nCODE:\n```\nnamespace App\\Application\\Bootloader;\n\nuse App\\Http\\Request\\FilesBag;\nuse Spiral\\Boot\\Bootloader\\Bootloader;\nuse Spiral\\Bootloader\\Http\\HttpBootloader;\n\nclass AppBootloader extends Bootloader\n{\n    public function init(HttpBootloader $http): void\n    {\n        $http->addInputBag('symfonyFiles', [\n            'class'  => FilesBag::class,\n            'source' => 'getUploadedFiles',\n            'alias' => 'symfony-file'\n        ]);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Storing Items in Cache with TTL in PHP\nDESCRIPTION: Sets a single item in the cache with a specified time-to-live (TTL) of 3600 seconds. This method accepts a key, a value, and an optional TTL parameter.\nSOURCE: https://github.com/spiral/docs/blob/3.14/docs/en/basics/cache.md#2025-04-20_snippet_7\n\nLANGUAGE: php\nCODE:\n```\n$this->cache->set(\n    key: 'key', \n    value: ['some' => 'data'], \n    ttl: 3600\n);\n```\n\n----------------------------------------\n\nTITLE: Using Complex UI Components in Stempler Template\nDESCRIPTION: Demonstrates how to use complex UI components like tabs and grids in a Stempler template, showcasing the power of the custom DSL created for UI assembly.\nSOURCE: https://github.com/spiral/docs/blob/3.14/docs/en/views/stempler.md#2025-04-20_snippet_54\n\nLANGUAGE: html\nCODE:\n```\n<extends:tabs.layout title=\"Homepage\"/>\n<use:bundle path=\"grid/bundle\"/>\n<use:bundle path=\"tabs/bundle\"/>\n\n<import:style src=\"/resources/my-style.css\"/>\n<import:script src=\"/resources/my-script.js\"/>\n\n<ui:tab id=\"first\" title=\"Information\">\n    Hello world!\n</ui:tab>\n\n<ui:tab id=\"second\" title=\"Some Grid\">\n    <grid:table>\n        <grid:cell title=\"First cell\">my value</grid:cell>\n        <grid:cell title=\"Second cell\">second value</grid:cell>\n    </grid:table>\n</ui:tab>\n```\n\n----------------------------------------\n\nTITLE: Defining Console Command with PHP Attributes\nDESCRIPTION: Example of creating a console command using PHP attributes in Spiral 3.6+. Shows argument and option definitions with the new attribute-based syntax.\nSOURCE: https://github.com/spiral/docs/blob/3.14/docs/en/cookbook/migration-from-v2.md#2025-04-20_snippet_23\n\nLANGUAGE: php\nCODE:\n```\nnamespace App\\Api\\Cli\\Command;\n\nuse Spiral\\Console\\Attribute\\Argument;\nuse Spiral\\Console\\Attribute\\AsCommand;\nuse Spiral\\Console\\Attribute\\Option;\nuse Spiral\\Console\\Attribute\\Question;\nuse Spiral\\Console\\Command;\nuse Symfony\\Component\\Console\\Input\\InputOption;\n\n#[AsCommand(\n    name: 'app:create:user', \n    description: 'Creates a user with the given data')\n]\nfinal class CreateUser extends Command\n{\n    #[Argument]\n    private string $email;\n\n    #[Argument(description: 'User password')]\n    private string $password;\n\n    #[Argument(name: 'username', description: 'The user name')]\n    private string $userName;\n\n    #[Option(shortcut: 'a', name: 'admin', description: 'Set the user as admin')]\n    private bool $isAdmin = false;\n\n    public function __invoke(): int\n    {\n        $user = new User(\n            email: $this->email,\n            password: $this->password,\n        );\n        \n        $user->setIsAdmin($this->isAdmin);\n        \n        // Save user to database...\n\n        return self::SUCCESS;\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Filter with Validation in PHP\nDESCRIPTION: Example of a filter class that implements HasFilterDefinition to enable validation. This class defines a username field that will be validated as a required string using the custom filter definition.\nSOURCE: https://github.com/spiral/docs/blob/3.14/docs/en/filters/configuration.md#2025-04-20_snippet_8\n\nLANGUAGE: php\nCODE:\n```\nnamespace App\\Endpoint\\Web\\Filter;\n\nuse Spiral\\Filters\\Attribute\\Input\\Query;\nuse Spiral\\Filters\\Model\\Filter;\nuse Spiral\\Filters\\Model\\FilterDefinitionInterface;\nuse Spiral\\Filters\\Model\\HasFilterDefinition;\nuse App\\Filter\\MyFilterDefinition;\n\nfinal class UserFilter extends Filter implements HasFilterDefinition\n{\n    #[Query]\n    public string $username;\n\n    public function filterDefinition(): FilterDefinitionInterface\n    {\n        return new MyFilterDefinition([\n            'username' => ['string', 'required']\n        ]);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Autocomplete Component in Spiral Framework\nDESCRIPTION: Example of implementing an autocomplete form component with custom options including URL endpoint, search key, and value key configurations. The component allows for server-side data fetching and customizable display templates.\nSOURCE: https://github.com/spiral/docs/blob/3.14/docs/en/keeper/components.md#2025-04-20_snippet_24\n\nLANGUAGE: xhtml\nCODE:\n```\n<form:autocomplete\n        name=\"userId2\"\n        label=\"Simple Autocomplete\"\n        value=\"1\"\n>\n    <script role=\"sf-options\" type=\"application/json\">\n        {\n            \"url\": \"/keeper/users/list\",\n            \"searchKey\": \"firstName\",\n            \"valueKey\": \"id\"\n        }\n    \n    </script>\n</form:autocomplete>\n```\n\n----------------------------------------\n\nTITLE: Defining User Entity in Spiral ORM\nDESCRIPTION: This code defines the User entity using Cycle ORM annotations. It includes a unique index on the username field and implements JsonSerializable.\nSOURCE: https://github.com/spiral/docs/blob/3.14/docs/en/cookbook/simple-chat.md#2025-04-20_snippet_17\n\nLANGUAGE: php\nCODE:\n```\nnamespace App\\Database;\n\nuse App\\Repository\\UserRepository;\nuse Cycle\\Annotated\\Annotation\\Column;\nuse Cycle\\Annotated\\Annotation\\Entity;\nuse Cycle\\Annotated\\Annotation\\Table\\Index;\n\n#[Entity(repository: UserRepository::class)]\n#[Index(columns: ['username'], unique: true)]\nclass User implements \\JsonSerializable\n{\n    #[Column(type: 'primary')]\n    private int $id;\n\n    public function __construct(\n        #[Column(type: \"string\")]\n        private string $username,\n        #[Column(type: \"string\")]\n        private string $password,\n    ) {\n    }\n\n    public function getId(): int\n    {\n        return $this->id;\n    }\n\n    public function getPassword(): string\n    {\n        return $this->password;\n    }\n\n    public function jsonSerialize(): array\n    {\n        return [\n            'id' => $this->id,\n            'username' => $this->username,\n        ];\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Retry Policy Interceptor for Failed Jobs\nDESCRIPTION: Implementation of a queue interceptor that handles job failures and implements a retry policy. It catches exceptions, decrements retry attempts, and schedules job retries with a delay.\nSOURCE: https://github.com/spiral/docs/blob/3.14/docs/en/cookbook/simple-queue-system.md#2025-04-20_snippet_23\n\nLANGUAGE: php\nCODE:\n```\nnamespace App\\Endpoint\\Job\\Interceptor;\n\nuse Carbon\\Carbon;\nuse Psr\\Log\\LoggerInterface;\nuse Spiral\\Core\\CoreInterceptorInterface;\nuse Spiral\\Core\\CoreInterface;\nuse Spiral\\Exceptions\\ExceptionReporterInterface;\nuse Spiral\\Queue\\Exception\\FailException;\nuse Spiral\\Queue\\Exception\\RetryException;\nuse Spiral\\Queue\\Options;\n\nfinal class RetryPolicyInterceptor implements CoreInterceptorInterface\n{\n    public function __construct(\n        private readonly LoggerInterface $logger,\n        private readonly ExceptionReporterInterface $reporter,\n        private readonly int $maxAttempts = 3,\n        private readonly int $delayInSeconds = 5,\n    ) {\n    }\n\n    public function process(string $controller, string $action, array $parameters, CoreInterface $core): mixed\n    {\n        try {\n        \n            // Try to execute a job handler\n            return $core->callAction($controller, $action, $parameters);\n            \n        } catch (\\Throwable $e) {\n        \n            // Report an exception\n            $this->reporter->report($e);\n            \n            $headers = $parameters['headers'] ?? [];\n            \n            // Get attempts count from headers or if it the first attempt, use max attempts count\n            $attempts = (int)($headers['attempts'] ?? $this->maxAttempts);\n            \n            // If attempts are over, throw a FailException\n            if ($attempts === 0) {\n                $this->logger->warning('Job handling failed: ['.$e->getMessage().']');\n                \n                throw new FailException($e->getMessage(), $e->getCode(), $e);\n            }\n\n            throw new RetryException(\n                reason: $e->getMessage(),\n                options: (new Options())->withDelay($this->delay)->withHeader('attempts', (string)($attempts - 1))\n            );\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Data Grid Writers for Cycle ORM Bridge\nDESCRIPTION: Configuration example for setting up Data Grid writers for Cycle ORM Bridge in the dataGrid.php config file.\nSOURCE: https://github.com/spiral/docs/blob/3.14/docs/en/component/data-grid.md#2025-04-20_snippet_3\n\nLANGUAGE: php\nCODE:\n```\nreturn [\n    'writers' => [\n        \\Spiral\\Cycle\\DataGrid\\Writer\\QueryWriter::class,\n        \\Spiral\\Cycle\\DataGrid\\Writer\\PostgresQueryWriter::class,\n        \\Spiral\\Cycle\\DataGrid\\Writer\\BetweenWriter::class,\n    ],\n];\n```\n\n----------------------------------------\n\nTITLE: Invoking Closures with Dependency Resolution in PHP\nDESCRIPTION: Example demonstrating how to use InvokerInterface to invoke closures with automatic dependency resolution. The closure receives both container-resolved dependencies and explicitly provided parameters.\nSOURCE: https://github.com/spiral/docs/blob/3.14/docs/en/container/overview.md#2025-04-20_snippet_15\n\nLANGUAGE: php\nCODE:\n```\n$invoker->invoke(\n    function (MyClass $class, string $parameter) {\n        return new MyClassService($class);\n    },\n    [\n        'parameter' => 'value',\n    ]\n);\n```\n\n----------------------------------------\n\nTITLE: Creating a Custom Grid Schema Class\nDESCRIPTION: Example of creating a custom Grid Schema class by extending the GridSchema and setting up options in the constructor.\nSOURCE: https://github.com/spiral/docs/blob/3.14/docs/en/component/data-grid.md#2025-04-20_snippet_5\n\nLANGUAGE: php\nCODE:\n```\nuse Spiral\\DataGrid\\GridSchema; \nuse Spiral\\DataGrid\\Specification\\Pagination\\PagePaginator;\nuse Spiral\\DataGrid\\Specification\\Sorter\\Sorter;\nuse Spiral\\DataGrid\\Specification\\Filter\\Like;\nuse Spiral\\DataGrid\\Specification\\Value\\StringValue;\n\nclass UserSchema extends GridSchema\n{\n    public function __construct()\n    {\n        // User pagination: limit results to 10 per page\n        $this->setPaginator(new PagePaginator(10));\n        \n        // Sorting option: by id\n        $this->addSorter('id', new Sorter('id'));\n        \n        // Filter option: find by name matching user input\n        $this->addFilter('name', new Like('name', new StringValue()));\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Publishing Events with Specific Broadcasting Driver\nDESCRIPTION: Using BroadcastManagerInterface to publish events with a specific driver connection\nSOURCE: https://github.com/spiral/docs/blob/3.14/docs/zh-CN/websockets/broadcasting.md#2025-04-20_snippet_4\n\nLANGUAGE: php\nCODE:\n```\nuse Spiral\\Broadcasting\\BroadcastManagerInterface;\nuse Spiral\\Serializer\\SerializerInterface;\n\nclass OrderService\n{\n    public function __construct(\n        private readonly BroadcastManagerInterface $broadcast,\n        private readonly SerializerInterface $serializer\n    ) {\n    }\n\n    public function send(string $orderUuid): void\n    {\n        $this->broadcast\n            ->connection('log')\n            ->publish(\n               \"order.{$orderUuid}\",\n                $this->serializer->serialize(['status' => 'purchased'])\n            );\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Custom ScaffolderBootloader Implementation\nDESCRIPTION: Example of extending ScaffolderBootloader to add custom declarations\nSOURCE: https://github.com/spiral/docs/blob/3.14/docs/en/basics/scaffolding.md#2025-04-20_snippet_6\n\nLANGUAGE: php\nCODE:\n```\nnamespace App\\Application\\Bootloader;\n\nuse Spiral\\Boot\\Bootloader\\Bootloader;\nuse Spiral\\Scaffolder\\Bootloader\\ScaffolderBootloader as BaseScaffolderBootloader;\n\nfinal class ScaffolderBootloader extends Bootloader\n{\n    public function init(BaseScaffolderBootloader $scaffolder): void\n    {\n        $scaffolder->addDeclaration('Repository', [\n            'namespace' => 'App\\\\Repository',\n            'postfix'   => 'Repository',\n            'class'     => RepositoryDeclaration::class,\n            'options'   => [\n                'orm' => 'cycle',\n                // some custom options\n            ],\n        ]);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Filter Class with Validation Rules in PHP\nDESCRIPTION: Demonstrates creation of a UserRegisterFilter class that extends Filter and implements HasFilterDefinition. Includes argument and option attributes with validation rules for username and email fields.\nSOURCE: https://github.com/spiral/docs/blob/3.14/docs/en/cookbook/console-validation.md#2025-04-20_snippet_7\n\nLANGUAGE: php\nCODE:\n```\nuse App\\Application\\Console\\Attribute\\Argument;\nuse App\\Application\\Console\\Attribute\\Option;\nuse Spiral\\Filters\\Model\\Filter;\nuse Spiral\\Filters\\Model\\FilterDefinitionInterface;\nuse Spiral\\Filters\\Model\\HasFilterDefinition;\nuse Spiral\\Validator\\FilterDefinition;\n\nclass UserRegisterFilter extends Filter implements HasFilterDefinition\n{\n    #[Argument]\n    public string $username;\n\n    #[Argument]\n    public string $email;\n\n    #[Option]\n    public bool $admin = false;\n\n    #[Option(key: 'send-verification-email')]\n    public bool $sendVerificationEmail = false;\n\n    public function filterDefinition(): FilterDefinitionInterface\n    {\n        return new FilterDefinition([\n            'username' => ['required', 'string', ['string::longer', 3], ['string::shorter', 32]],\n            'email' => ['required', 'email'],\n        ]);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Initializing FakeEventDispatcher in PHP Test Setup\nDESCRIPTION: This snippet shows how to set up a fake event dispatcher in a test class's setUp method. It replaces the default event dispatcher with a fake one that records dispatched events for assertion.\nSOURCE: https://github.com/spiral/docs/blob/3.14/docs/en/testing/event.md#2025-04-20_snippet_0\n\nLANGUAGE: php\nCODE:\n```\nprivate \\Spiral\\Testing\\Events\\FakeEventDispatcher $events;\n    \nprotected function setUp(): void\n{\n    parent::setUp();\n    $this->events = $this->fakeEventDispatcher();\n}\n```\n\n----------------------------------------\n\nTITLE: Pushing Jobs to Queue with Object Payload\nDESCRIPTION: PHP code for a console command that pushes a job with an object payload to the queue.\nSOURCE: https://github.com/spiral/docs/blob/3.14/docs/en/cookbook/simple-queue-system.md#2025-04-20_snippet_10\n\nLANGUAGE: php\nCODE:\n```\nnamespace App\\Endpoint\\Console;\n\nuse Spiral\\Console\\Attribute\\AsCommand;\nuse Spiral\\Console\\Command;\nuse Spiral\\Queue\\QueueInterface;\nuse App\\DTO\\PingDTO;\n\n#[AsCommand(name: 'ping')]\nfinal class PingCommand extends Command\n{\n    public function __invoke(QueueInterface $queue): int\n    {\n        $queue->push('ping', new Ping(url: 'https://spiral.dev'));\n\n        return self::SUCCESS;\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Cache with Attributes Factory\nDESCRIPTION: Example of providing a cache implementation to the attributes factory. This allows for easy setup of cached readers without direct instantiation of specific cache reader classes.\nSOURCE: https://github.com/spiral/docs/blob/3.14/docs/en/advanced/attributes.md#2025-04-20_snippet_24\n\nLANGUAGE: php\nCODE:\n```\nuse Spiral\\Attributes\\Factory;\n\n$reader = (new Factory)\n    ->withCache($cacheDriver)\n    ->create();\n\n// Where $cacheDriver is PSR-6 or PSR-16 cache driver implementation\n```\n\n----------------------------------------\n\nTITLE: Automatic Response Generation from String Return\nDESCRIPTION: Shows how Spiral's PSR-15 handler automatically generates a response from a string returned by a controller method. This simplifies response creation when complex response objects aren't needed.\nSOURCE: https://github.com/spiral/docs/blob/3.14/docs/en/http/request-response.md#2025-04-20_snippet_7\n\nLANGUAGE: php\nCODE:\n```\nnamespace App\\Endpoint\\Web;\n\nclass HomeController\n{\n    public function index(): string\n    {\n        return \"hello world\";\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Using ResponseFactoryInterface for Response Generation\nDESCRIPTION: Demonstrates using PSR-17 ResponseFactoryInterface to abstract response creation. This approach provides dependency injection for the response factory, making code more testable and maintainable.\nSOURCE: https://github.com/spiral/docs/blob/3.14/docs/en/http/request-response.md#2025-04-20_snippet_10\n\nLANGUAGE: php\nCODE:\n```\nnamespace App\\Endpoint\\Web;\n\nuse Psr\\Http\\Message\\ResponseFactoryInterface;\nuse Psr\\Http\\Message\\ResponseInterface;\n\nclass HomeController\n{\n    public function index(ResponseFactoryInterface $responseFactory): ResponseInterface\n    {\n        $response = $responseFactory->createResponse(200);\n        $response->getBody()->write(\"hello world\");\n\n        return $response;\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Global View Variables in PHP\nDESCRIPTION: Example of setting global variables for views using configuration file approach.\nSOURCE: https://github.com/spiral/docs/blob/3.14/docs/en/views/basics.md#2025-04-20_snippet_8\n\nLANGUAGE: php\nCODE:\n```\nreturn [\n    // ...\n    'globalVariables' => [\n        'some_var' => env('SOME_VALUE'),\n        'other_var' => 'other_value'\n    ]\n];\n```\n\n----------------------------------------\n\nTITLE: Accessing Directory Paths in Spiral Services using DirectoriesInterface\nDESCRIPTION: Illustrates how to use the DirectoriesInterface to access directory paths within a service class. This example shows accessing the runtime directory for file uploads.\nSOURCE: https://github.com/spiral/docs/blob/3.14/docs/en/start/structure.md#2025-04-20_snippet_2\n\nLANGUAGE: php\nCODE:\n```\nuse Spiral\\Boot\\DirectoriesInterface;\n\nfinal class UploadService {\n    public function __construct(\n        private readonly DirectoriesInterface $dirs\n    ) {}\n    \n    public function store(UploadedFile $file) {\n        $filePath = $this->dirs->get('runtime') . 'uploads/' . $file->getFilename();\n        // ...\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Named Arguments Instantiator with Interface Marker\nDESCRIPTION: Example of a metadata class using named arguments instantiator with an interface marker.\nSOURCE: https://github.com/spiral/docs/blob/3.14/docs/zh-CN/advanced/attributes.md#2025-04-20_snippet_12\n\nLANGUAGE: php\nCODE:\n```\n/** @Annotation */\n#[\\Attribute]\nclass CustomMetadataClass implements \\Spiral\\Attributes\\NamedArgumentConstructorAttribute\n{\n    public function __construct($property)\n    {\n        // $property = \"value\"\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Basic Command Structure (PHP)\nDESCRIPTION: Shows the basic structure of a console command class in Spiral with attribute-based configuration.\nSOURCE: https://github.com/spiral/docs/blob/3.14/docs/en/console/commands.md#2025-04-20_snippet_2\n\nLANGUAGE: php\nCODE:\n```\nnamespace App\\Endpoint\\Console;\n\nuse Spiral\\Console\\Attribute\\Argument;\nuse Spiral\\Console\\Attribute\\AsCommand;\nuse Spiral\\Console\\Attribute\\Option;\nuse Spiral\\Console\\Attribute\\Question;\nuse Spiral\\Console\\Command;\n\n#[AsCommand(name: 'my')]\nfinal class MyCommand extends Command\n{\n    public function __invoke(): int\n    {\n        // Put your command logic here\n        $this->info('Command logic is not implemented yet');\n\n        return self::SUCCESS;\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Custom Bootloader Registry\nDESCRIPTION: Implementation of a custom bootloader registry class that reads bootloaders from a JSON file. It implements the BootloaderRegistryInterface and can be registered in the discoverer configuration.\nSOURCE: https://github.com/spiral/docs/blob/3.14/docs/en/component/discoverer.md#2025-04-20_snippet_5\n\nLANGUAGE: php\nCODE:\n```\nuse Spiral\\Discoverer\\Bootloader\\BootloaderRegistryInterface;\nuse Spiral\\Core\\Container;\nuse Spiral\\Files\\FilesInterface;\n\nfinal class JsonRegistry implements BootloaderRegistryInterface\n{\n    private array $bootloaders = [];\n\n    public function __construct(private string $jsonPath) {}\n\n    public function init(Container $container): void {\n        $files = $container->get(FilesInterface::class);\n        $data = json_decode($files->read($this->jsonPath), true);\n\n        $this->bootloaders = $data['bootloaders'] ?? [];\n    }\n\n    public function getBootloaders(): array {\n        return $this->bootloaders;\n    }\n\n    public function getIgnoredBootloaders(): array {\n        return [];\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Operation Service with Memory Caching\nDESCRIPTION: Example implementation of a service that uses MemoryInterface to cache operation class mappings. Demonstrates practical usage of memory caching for class analysis results.\nSOURCE: https://github.com/spiral/docs/blob/3.14/docs/en/advanced/memory.md#2025-04-20_snippet_1\n\nLANGUAGE: php\nCODE:\n```\nabstract class Operation\n{\n    /**\n     * Execute some operation.\n     */\n    abstract public function perform(mixed $request): void;\n}\n\nclass OperationService\n{\n    /**\n     * List of operation associated with their class.\n     * @var class-string[] \n     */\n    protected array $operations = [];\n\n    public function __construct(\n        MemoryInterface $memory, \n        ClassesInterface $classes\n    ) {\n        $this->operations = $memory->loadData('operations');\n\n        if (\\is_null($this->operations)) {\n            $this->operations = $this->locateOperations($classes); // slow operation\n            $memory->saveData('operations', $this->operations);\n        }      \n    }\n\n    public function run(string $operation, mixed $request): void\n    {\n        // Perform operation based on $operations property\n    }\n\n    /**\n     * @return class-string[]\n     */\n    protected function locateOperations(ClassesInterface $classes): array\n    {\n        // Generate list of available operations via scanning every available class\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Manual Storage Configuration Outside Framework\nDESCRIPTION: Example of how to initialize the storage component and add buckets manually when using it outside the Spiral Framework.\nSOURCE: https://github.com/spiral/docs/blob/3.14/docs/en/advanced/storage.md#2025-04-20_snippet_4\n\nLANGUAGE: php\nCODE:\n```\n$storage = new \\Spiral\\Storage\\Storage();\n\n$storage->add('example', \\Spiral\\Storage\\Bucket::fromAdapter(\n    new \\League\\Flysystem\\Local\\LocalFilesystemAdapter(__DIR__ . '/path/to/directory')\n));\n\n$file = $storage->bucket('example')\n    ->write('file.txt', 'content');\n```\n\n----------------------------------------\n\nTITLE: Application Directories Helper Class\nDESCRIPTION: A helper class that provides type-safe access to various application directories with path building functionality.\nSOURCE: https://github.com/spiral/docs/blob/3.14/docs/en/basics/files.md#2025-04-20_snippet_3\n\nLANGUAGE: php\nCODE:\n```\nnamespace App\\Application;\n\nuse Spiral\\Boot\\DirectoriesInterface;\n\nfinal class AppDirectories\n{\n    public function __construct(\n        private readonly DirectoriesInterface $directories\n    ) {\n    }\n\n    /**\n     * Application root directory.\n     * @return non-empty-string\n     */\n    public function getRoot(?string $path = null): string\n    {\n        return $this->buildPath('root', $path);\n    }\n\n    /**\n     * Application directory.\n     * @return non-empty-string\n     */\n    public function getApp(?string $path = null): string\n    {\n        return $this->buildPath('app', $path);\n    }\n\n    /**\n     * Public directory.\n     * @return non-empty-string\n     */\n    public function getPublic(?string $path = null): string\n    {\n        return $this->buildPath('public', $path);\n    }\n\n    /**\n     * Runtime directory.\n     * @return non-empty-string\n     */\n    public function getRuntime(?string $path = null): string\n    {\n        return $this->buildPath('runtime', $path);\n    }\n\n    /**\n     * Runtime cache directory.\n     * @return non-empty-string\n     */\n    public function getCache(?string $path = null): string\n    {\n        return $this->buildPath('cache', $path);\n    }\n\n    /**\n     * Vendor libraries directory.\n     * @return non-empty-string\n     */\n    public function getVendor(?string $path = null): string\n    {\n        return $this->buildPath('vendor', $path);\n    }\n\n    /**\n     * Config directory.\n     * @return non-empty-string\n     */\n    public function getConfig(?string $path = null): string\n    {\n        return $this->buildPath('config', $path);\n    }\n\n    /**\n     * Resources directory.\n     * @return non-empty-string\n     */\n    public function getResources(?string $path = null): string\n    {\n        return $this->buildPath('resources', $path);\n    }\n\n    private function buildPath(string $key, ?string $path = null): string\n    {\n        return \\rtrim($this->directories->get($key), '/') . ($path ? '/' . \\ltrim($path, '/') : '');\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Generating GRPC Service Code via CLI\nDESCRIPTION: Command to generate PHP code from proto definitions using Spiral's GRPC generator. This creates service interfaces and message classes in the specified output directory.\nSOURCE: https://github.com/spiral/docs/blob/3.14/docs/en/grpc/service.md#2025-04-20_snippet_2\n\nLANGUAGE: terminal\nCODE:\n```\nphp app.php grpc:generate\n```\n\n----------------------------------------\n\nTITLE: Sitemap Configuration Using Attributes\nDESCRIPTION: Shows how to configure sitemap nodes using PHP attributes in a controller class.\nSOURCE: https://github.com/spiral/docs/blob/3.14/docs/en/keeper/sitemap.md#2025-04-20_snippet_3\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\ndeclare(strict_types=1);\n\nnamespace App\\Controller\\Keeper;\n\nuse Spiral\\Keeper\\Annotation as Keeper;\nuse Spiral\\Views\\ViewsInterface;\n\n #[Keeper\\Controller(name: \"users\", prefix: \"/users\")]\n #[Keeper\\Sitemap\\Group(name: \"users\", title: \"Users and Groups\")]\nclass UsersController\n{\n     #[Keeper\\Action(route: \"\", methods: \"GET\")]\n     #[Keeper\\Sitemap\\Link(title: \"Users\", options: [\"icon\" => \"user-friends\"])]\n    public function index(ViewsInterface $views): string\n    {\n        return $views->render('keeper:users/list');\n    }\n\n     #[Keeper\\Action(route: \"/create\", methods: \"GET\")]\n     #[Keeper\\Sitemap\\View(title: \"Add new user\")]\n    public function new(ViewsInterface $views): string\n    {\n        return $views->render('keeper:users/create');\n    }\n    // ...\n}\n```\n\n----------------------------------------\n\nTITLE: Getting Queue Connection by Name or Alias\nDESCRIPTION: Shows how to obtain a queue instance by its name or alias using the QueueConnectionProviderInterface and binding it in the container.\nSOURCE: https://github.com/spiral/docs/blob/3.14/docs/en/queue/configuration.md#2025-04-20_snippet_4\n\nLANGUAGE: php\nCODE:\n```\nuse Spiral\\Queue\\QueueConnectionProviderInterface;\n\n$container->bind(MyService::class, function(QueueConnectionProviderInterface $provider) {\n    return new MyService($provider->getConnection('mailQueue'));\n})\n```\n\n----------------------------------------\n\nTITLE: Registering Retry Policy Interceptor in Queue Configuration\nDESCRIPTION: Configuration to register the retry policy interceptor for queue consumption, which will apply the retry logic to all jobs being consumed from the queue.\nSOURCE: https://github.com/spiral/docs/blob/3.14/docs/en/cookbook/simple-queue-system.md#2025-04-20_snippet_24\n\nLANGUAGE: php\nCODE:\n```\nuse App\\Endpoint\\Job\\Interceptor\\RetryPolicyInterceptor;\n\nreturn [    \n    // ...\n    'interceptors' => [\n        'consume' => [\n            RetryPolicyInterceptor::class,\n        ],\n    ],\n];\n```\n\n----------------------------------------\n\nTITLE: Setting Up Cron Entry for Scheduler\nDESCRIPTION: Bash command to set up a cron entry that runs the scheduler every minute.\nSOURCE: https://github.com/spiral/docs/blob/3.14/docs/en/advanced/scheduler.md#2025-04-20_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\n* * * * * cd /path-to-your-project && php app.php schedule:run >> /dev/null 2>&1\n```\n\n----------------------------------------\n\nTITLE: Implementing Filters with Laravel Validator\nDESCRIPTION: Example of creating a filter class using the Laravel validator bridge with rule strings for validating form inputs.\nSOURCE: https://github.com/spiral/docs/blob/3.14/docs/en/filters/filter.md#2025-04-20_snippet_2\n\nLANGUAGE: php\nCODE:\n```\nnamespace App\\Endpoint\\Web\\Filter;\n\nuse Spiral\\Filters\\Attribute\\Input\\Post;\nuse Spiral\\Filters\\Model\\Filter;\nuse Spiral\\Filters\\Model\\FilterDefinitionInterface;\nuse Spiral\\Filters\\Model\\HasFilterDefinition;\nuse Spiral\\Validation\\Laravel\\FilterDefinition;\nuse Spiral\\Validation\\Laravel\\Attribute\\Input\\File;\nuse Symfony\\Component\\HttpFoundation\\File\\UploadedFile;\n\nfinal class CreatePostFilter extends Filter implements HasFilterDefinition\n{\n    #[Post]\n    public string $title;\n\n    #[Post]\n    public string $slug;\n\n    #[Post]\n    public int $sort;\n\n    #[File]\n    public UploadedFile $image;\n\n    public function filterDefinition(): FilterDefinitionInterface\n    {\n        return new FilterDefinition([\n            'title' => 'string|required|min:5',\n            'slug' => 'string|required|min:5',\n            'sort' => 'integer|required',\n            'image' => 'required|image'\n        ]);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing a Context Manager for Scoped Instances in PHP\nDESCRIPTION: This example demonstrates the recommended approach of creating a context manager (UserScope) that provides access to IoC scopes from singletons. The manager uses the container to retrieve the current instance of the scoped object.\nSOURCE: https://github.com/spiral/docs/blob/3.14/docs/en/container/scopes.md#2025-04-20_snippet_8\n\nLANGUAGE: php\nCODE:\n```\nfinal class UserScope\n{\n    public function __construct(\n        private readonly ContainerInterface $container\n    ) {\n    }\n\n    public function getUserContext(): ?UserContext\n    {\n        // error checking is omitted\n        return $this->container->get(UserContext::class);\n    }\n\n    public function getName(): string\n    {\n        return $this->getUserContext()->getName();\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining a Route with Parameters in PHP\nDESCRIPTION: Demonstrates how to define a route with a simple 'name' parameter using Spiral Framework's RouterInterface. The route handler returns the matched parameters as JSON.\nSOURCE: https://github.com/spiral/docs/blob/3.14/docs/en/http/routing.md#2025-04-20_snippet_28\n\nLANGUAGE: php\nCODE:\n```\nnamespace App\\Bootloader;\n\nuse Psr\\Http\\Message\\ResponseInterface;\nuse Psr\\Http\\Message\\ServerRequestInterface;\nuse Spiral\\Boot\\Bootloader\\Bootloader;\nuse Spiral\\Router\\Route;\nuse Spiral\\Router\\RouterInterface;\n\nclass RoutesBootloader extends Bootloader\n{\n    public function boot(RouterInterface $router): void\n    {\n        $router->setRoute('home', new Route(\n            '/<name>',\n            function (ServerRequestInterface $request, ResponseInterface $response): array {\n                return $request->getAttribute('route')->getMatches(); // returns JSON ['name' => '']\n            }\n        ));\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Default Configuration Bootloader Implementation\nDESCRIPTION: Example of implementing a bootloader to set default configuration values and handle environment variables.\nSOURCE: https://github.com/spiral/docs/blob/3.14/docs/en/framework/config.md#2025-04-20_snippet_4\n\nLANGUAGE: php\nCODE:\n```\nnamespace App\\Application\\Bootloader;\n\nuse App\\Config\\GithubConfig;\nuse Spiral\\Boot\\Bootloader\\Bootloader;\nuse Spiral\\Boot\\EnvironmentInterface;\nuse Spiral\\Config\\ConfiguratorInterface;\n\nfinal class GithubBootloader extends Bootloader\n{\n    public function init(ConfiguratorInterface $configurator, EnvironmentInterface $env): void\n    {\n        $configurator->setDefaults(GithubConfig::CONFIG, [\n            'access_token' => $env->get('GITHUB_ACCESS_TOKEN')\n            'authentication_type' => $env->get('GITHUB_AUTHENTICATION_TYPE', 'token')\n        ]);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Using Static URI Resolver in PHP\nDESCRIPTION: Demonstrates how to use a Static URI Resolver to generate a full URL for a file.\nSOURCE: https://github.com/spiral/docs/blob/3.14/docs/en/advanced/storage.md#2025-04-20_snippet_29\n\nLANGUAGE: php\nCODE:\n```\n/** @var \\Spiral\\Distribution\\Resolver\\StaticResolver $resolver */\n$resolver = $manager->resolver('local');\n\necho $resolver->resolve('path/to/file.txt');\n//\n// Expected:\n//  string(33) \"http://localhost/path/to/file.txt\"\n//\n```\n\n----------------------------------------\n\nTITLE: Adding Custom Twig Extension in Bootloader\nDESCRIPTION: PHP code demonstrating how to add a custom Twig extension and set options using a custom bootloader.\nSOURCE: https://github.com/spiral/docs/blob/3.14/docs/en/views/twig.md#2025-04-20_snippet_3\n\nLANGUAGE: php\nCODE:\n```\nclass TwigExtensionBootloader extends Bootloader\n{\n    public function boot(TwigBootloader $twig): void\n    {\n        $twig->addExtension(MyExtension::class);\n    \n        // custom options\n        $twig->setOption('name', 'value');\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing File Checker Class in PHP\nDESCRIPTION: Example of implementing a custom FileChecker class with validation methods for file existence, upload status, and size checks.\nSOURCE: https://github.com/spiral/docs/blob/3.14/docs/en/validation/spiral.md#2025-04-20_snippet_10\n\nLANGUAGE: php\nCODE:\n```\nfinal class FileChecker extends AbstractChecker\n{\n    // ...\n    public function exists(mixed $file): bool // -> file::exists rule\n    {\n        return // check if the given file exists;\n    }\n    \n    public function uploaded(mixed $file): bool // -> file::uploaded rule\n    {\n        return // check if the given file uploaded;\n    }\n    \n    public function size(mixed $file, int $size): bool // -> file::size rule\n    {\n        return // check the given file size;\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Accessing InputManager via PrototypeTrait in Spiral\nDESCRIPTION: Illustrates how to use Spiral's PrototypeTrait to access the InputManager (aliased as 'request') in a controller method.\nSOURCE: https://github.com/spiral/docs/blob/3.14/docs/en/http/request-response.md#2025-04-20_snippet_2\n\nLANGUAGE: php\nCODE:\n```\nnamespace App\\Endpoint\\Web;\n\nuse Spiral\\Prototype\\Traits\\PrototypeTrait;\n\nclass HomeController\n{\n    use PrototypeTrait;\n\n    public function index(): void\n    {\n        // $this->request is alias to $this->input\n        dump($this->request->data->all());\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Keeper in PHP\nDESCRIPTION: This snippet shows the structure of a Keeper configuration file. It includes settings for route prefix, defaults, login view, middleware, modules, and interceptors. This configuration can be stored in the application's config directory.\nSOURCE: https://github.com/spiral/docs/blob/3.14/docs/zh-CN/keeper/bootloaders.md#2025-04-20_snippet_1\n\nLANGUAGE: php\nCODE:\n```\nreturn [\n   'routePrefix'   => '',\n   'routeDefaults' => ['controller' => '', 'action' => ''],\n   'loginView'     => 'keeper:login',\n   'middleware'    => [],\n   'modules'       => [],\n   'interceptors'  => [],\n];\n```\n\n----------------------------------------\n\nTITLE: Implementing Lazy Singleton with Interface in Spiral (PHP)\nDESCRIPTION: Demonstrates how to implement the SingletonInterface to make a class behave as a singleton without explicit binding, ensuring only one instance is created.\nSOURCE: https://github.com/spiral/docs/blob/3.14/docs/en/container/configuration.md#2025-04-20_snippet_22\n\nLANGUAGE: php\nCODE:\n```\nuse Spiral\\Core\\Container\\SingletonInterface;\n\nfinal class UserService implements SingletonInterface\n{\n    public function store(User $user): void\n    {\n        //...\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Migration Configuration File\nDESCRIPTION: Configuration file for customizing migration behavior including directory location, table name, strategy, and safety options.\nSOURCE: https://github.com/spiral/docs/blob/3.14/docs/en/basics/orm.md#2025-04-20_snippet_20\n\nLANGUAGE: php\nCODE:\n```\nuse Cycle\\Schema\\Generator\\Migrations\\Strategy\\SingleFileStrategy;\nuse Cycle\\Schema\\Generator\\Migrations\\NameBasedOnChangesGenerator;\n\nreturn [\n    /**\n     * Directory to store migration files\n     */\n    'directory' => directory('app').'migrations/',\n\n    /**\n     * Table name to store information about migrations status (per database)\n     */\n    'table' => 'migrations',\n    \n    /**\n     * Migration file generator strategy\n     */\n    'strategy' => SingleFileStrategy::class,\n    \n    /**\n     * Migration file name generator\n     */\n    'nameGenerator' => NameBasedOnChangesGenerator::class,\n\n    /**\n     * When set to true no confirmation will be requested on migration run.\n     */\n    'safe' => env('APP_ENV') === 'production',\n];\n```\n\n----------------------------------------\n\nTITLE: Implementing User Provider for Centrifugo Authentication in PHP\nDESCRIPTION: This code snippet demonstrates how to create a user provider that implements the ActorProviderInterface. It retrieves a user based on the authentication token payload.\nSOURCE: https://github.com/spiral/docs/blob/3.14/docs/en/cookbook/simple-chat.md#2025-04-20_snippet_38\n\nLANGUAGE: php\nCODE:\n```\nnamespace App\\Endpoint\\Centrifugo;\n\nuse Spiral\\Auth\\ActorProviderInterface;\nuse Spiral\\Auth\\TokenInterface;\nuse Spiral\\Prototype\\Traits\\PrototypeTrait;\n\nfinal class UserProvider implements ActorProviderInterface\n{\n    use PrototypeTrait;\n\n    public function getActor(TokenInterface $token): ?object\n    {\n        if (!isset($token->getPayload()['id'])) {\n            return null;\n        }\n\n        return $this->users->findByPK($token->getPayload()['id']);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Console Command Structure in PHP\nDESCRIPTION: Defines a console command class 'UserRegister' with a signature specifying input arguments and options.\nSOURCE: https://github.com/spiral/docs/blob/3.14/docs/en/cookbook/console-validation.md#2025-04-20_snippet_0\n\nLANGUAGE: php\nCODE:\n```\nnamespace App\\Command;\n\nuse Spiral\\Console\\Command;\n\nfinal class UserRegister extends Command\n{\n    protected const SIGNATURE = <<<CMD\n        user:register\n        {username : User username}\n        {email : User email address}\n        {--a|admin : Mark as admin}\n        {--s|send-verification-email : Send a verification email to the user}\nCMD;\n\n    public function perform(): int\n    {\n        // ...\n\n        return self::SUCCESS;\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Custom Keeper Bootloader in PHP\nDESCRIPTION: Example of creating a custom Keeper bootloader by extending the abstract KeeperBootloader class. This code demonstrates how to configure the namespace, route prefix, default controller, and register middleware and interceptors for the Keeper module.\nSOURCE: https://github.com/spiral/docs/blob/3.14/docs/en/keeper/bootloaders.md#2025-04-20_snippet_0\n\nLANGUAGE: php\nCODE:\n```\nuse App\\Bootloader\\Keeper;\nuse Spiral\\DataGrid\\Interceptor\\GridInterceptor;\nuse Spiral\\Domain\\CycleInterceptor;\nuse Spiral\\Domain\\FilterInterceptor;\nuse Spiral\\Domain\\GuardInterceptor;\nuse Spiral\\Keeper\\Bootloader;\nuse Spiral\\Keeper\\Middleware;\n\nclass KeeperBootloader extends Bootloader\\KeeperBootloader\n{\n    protected const NAMESPACE          = 'keeper';\n    protected const PREFIX             = 'keeper/';\n    protected const DEFAULT_CONTROLLER = 'dashboard';\n    protected const CONFIG_NAME        = '';\n\n    protected const LOAD = [\n        Bootloader\\SitemapBootloader::class,\n        Bootloader\\AnnotatedBootloader::class,\n    ];\n\n    protected const MIDDLEWARE = [\n        Middleware\\LoginMiddleware::class\n    ];\n\n    protected const INTERCEPTORS = [\n        CycleInterceptor::class,\n        GuardInterceptor::class,\n        FilterInterceptor::class,\n        GridInterceptor::class,\n    ];\n}\n```\n\n----------------------------------------\n\nTITLE: Registering Custom Command in Spiral Console Bootloader\nDESCRIPTION: This PHP snippet shows how to register a new custom command in the Spiral Console component using the ConsoleBootloader during application boot.\nSOURCE: https://github.com/spiral/docs/blob/3.14/docs/en/console/configuration.md#2025-04-20_snippet_5\n\nLANGUAGE: php\nCODE:\n```\npublic function boot(ConsoleBootloader $console): void\n{\n    $console->addCommand(MyCommand::class);\n}\n```\n\n----------------------------------------\n\nTITLE: Using ${parent} Variable for Attribute Inheritance\nDESCRIPTION: Demonstrates how to inherit parent attribute values using the ${parent} variable in short block definitions, allowing attributes to be extended rather than completely overridden.\nSOURCE: https://github.com/spiral/docs/blob/3.14/docs/en/views/stempler.md#2025-04-20_snippet_17\n\nLANGUAGE: html\nCODE:\n```\n<extends:layout.base title=\"Homepage\" body-class=\"homepage ${parent}\"/>\n\n<block:content>\n    This is homepage content.\n    <block:parent/>\n</block:content>\n```\n\n----------------------------------------\n\nTITLE: Implementing BlogSeeder in PHP for Spiral Framework\nDESCRIPTION: This code snippet defines a BlogSeeder class that extends AbstractSeeder to populate the database with test records for users, posts, and comments using the previously defined factories.\nSOURCE: https://github.com/spiral/docs/blob/3.14/docs/en/cookbook/quick-start.md#2025-04-20_snippet_30\n\nLANGUAGE: php\nCODE:\n```\nnamespace Database\\Seeder;\n\nuse Database\\Factory\\CommentFactory;\nuse Database\\Factory\\PostFactory;\nuse Database\\Factory\\UserFactory;\nuse Spiral\\DatabaseSeeder\\Attribute\\Seeder;\nuse Spiral\\DatabaseSeeder\\Seeder\\AbstractSeeder;\n\n#[Seeder]\nclass BlogSeeder extends AbstractSeeder\n{\n    public function run(): \\Generator\n    {\n        $users = UserFactory::new()->times(100)->make();\n        yield from $users;\n\n        $posts = [];\n        for ($i = 0; $i < 1000; $i++) {\n            $posts[] = PostFactory::new()\n                ->withAuthor($users[array_rand($users)])\n                ->makeOne();\n        }\n        yield from $posts;\n\n        for ($i = 0; $i < 1000; $i++) {\n            yield CommentFactory::new()\n                ->withAuthor($users[array_rand($users)])\n                ->withPost($posts[array_rand($posts)])\n                ->makeOne();\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Using Lazy Singleton in Controller\nDESCRIPTION: Shows how to use a lazy singleton in a controller method.\nSOURCE: https://github.com/spiral/docs/blob/3.14/docs/zh-CN/container/configuration.md#2025-04-20_snippet_21\n\nLANGUAGE: php\nCODE:\n```\nprotected function index(UserService $service): void\n{\n    dump($this->container->get(UserService::class) === $service);\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Validation Exception Handler in PHP\nDESCRIPTION: Shows implementation of a CoreInterceptorInterface to handle validation exceptions in console commands. The interceptor catches ValidationException and formats error messages for display.\nSOURCE: https://github.com/spiral/docs/blob/3.14/docs/en/cookbook/console-validation.md#2025-04-20_snippet_8\n\nLANGUAGE: php\nCODE:\n```\nnamespace App\\Command;\n\nuse Spiral\\Console\\Command;\nuse Spiral\\Core\\CoreInterceptorInterface;\nuse Spiral\\Core\\CoreInterface;\nuse Symfony\\Component\\Console\\Output\\OutputInterface;\n\nclass HandleValidationExceptions implements CoreInterceptorInterface\n{\n    public function process(string $controller, string $action, array $parameters, CoreInterface $core): mixed\n    {\n        try {\n            return $core->callAction($controller, $action, $parameters);\n        } catch (\\Spiral\\Filters\\Exception\\ValidationException $e) {\n            $output = $parameters['output'];\n            \\assert($output instanceof OutputInterface);\n\n            $output->writeln('<fg=red>Validation errors:</>');\n            foreach ($e->errors as $key => $error) {\n                $output->writeln(\\sprintf('<fg=red>%s: %s</>', $key, $error));\n            }\n\n            return Command::FAILURE;\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a Closure Route Handler in PHP\nDESCRIPTION: Shows how to create a route handler using a closure that receives ServerRequestInterface and ResponseInterface as arguments.\nSOURCE: https://github.com/spiral/docs/blob/3.14/docs/en/http/routing.md#2025-04-20_snippet_27\n\nLANGUAGE: php\nCODE:\n```\n$router->setRoute('home', new Route(\n    '/<name>',\n    function (ServerRequestInterface $request, ResponseInterface $response): ResponseInterface {\n        $response->getBody()->write('hello world');\n\n        return $response;\n    }\n));\n```\n\n----------------------------------------\n\nTITLE: Disconnecting Users from Centrifugo in PHP\nDESCRIPTION: Demonstrates how to use the disconnect method to remove a user from Centrifugo. This method supports disconnecting specific clients or sessions, and allows for a whitelist of clients to remain connected.\nSOURCE: https://github.com/spiral/docs/blob/3.14/docs/en/websockets/api.md#2025-04-20_snippet_5\n\nLANGUAGE: PHP\nCODE:\n```\npublic function handle(User $user): void\n{\n    $this->api->disconnect($user->getId(), ...);\n}\n```\n\n----------------------------------------\n\nTITLE: Adding QueueBootloader to Kernel (Method Approach)\nDESCRIPTION: Shows how to add the QueueBootloader to the application kernel using the defineBootloaders method to enable queue functionality in a Spiral application.\nSOURCE: https://github.com/spiral/docs/blob/3.14/docs/en/queue/configuration.md#2025-04-20_snippet_0\n\nLANGUAGE: php\nCODE:\n```\npublic function defineBootloaders(): array\n{\n    return [\n        // ...\n        \\Spiral\\Queue\\Bootloader\\QueueBootloader::class,\n        // ...\n    ];\n}\n```\n\n----------------------------------------\n\nTITLE: Extended Validation Declaration\nDESCRIPTION: Example of using extended validation declaration with arrays for each rule.\nSOURCE: https://github.com/spiral/docs/blob/3.14/docs/en/validation/spiral.md#2025-04-20_snippet_9\n\nLANGUAGE: php\nCODE:\n```\n$validator = $validation->validate(\n    ['key' => null],\n    [\n        'key' => [\n            ['notEmpty'],  // key must not be empty\n            ['is_numeric'] // must be numeric\n        ]\n    ]\n);\n```\n\n----------------------------------------\n\nTITLE: JSON Data for Root-Level Composite Filter\nDESCRIPTION: Shows the JSON structure for a request when using a root-level composite filter with the dot prefix.\nSOURCE: https://github.com/spiral/docs/blob/3.14/docs/en/filters/composite.md#2025-04-20_snippet_7\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"name\": \"Antony\",\n  \"city\": \"San Francisco\",\n  \"address\": \"Address\"\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Exception Interceptor in PHP\nDESCRIPTION: Shows implementation of an exception interceptor that determines if exceptions should trigger retries or stop workflow execution.\nSOURCE: https://github.com/spiral/docs/blob/3.14/docs/en/temporal/interceptors.md#2025-04-20_snippet_3\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\ndeclare(strict_types=1);\n\nnamespace App\\Temporal\\Interceptors;\n\nuse Temporal\\Exception\\ExceptionInterceptorInterface;\n\nclass ExceptionInterceptor implements ExceptionInterceptorInterface\n{\n    public function isRetryable(\\Throwable $e): bool\n    {\n        if ($e instanceof ApiRateLimitException) {\n            return true;\n        }\n        \n        return false;\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Simple DataGrid Declaration\nDESCRIPTION: Demonstrates a basic declaration of a data grid with text cells for user data. The grid connects to a users list endpoint and defines three columns for id, first name, and last name.\nSOURCE: https://github.com/spiral/docs/blob/3.14/docs/en/keeper/components.md#2025-04-20_snippet_1\n\nLANGUAGE: xhtml\nCODE:\n```\n<ui:grid url=\"@action('users.list', inject('params', []))\" namespace=\"main\">\n    <grid:cell.text name=\"id\" label=\"#\"/>\n    <grid:cell.text name=\"firstName\" label=\"First Name\"/>\n    <grid:cell.text name=\"lastName\" label=\"Last Name\"/>\n</ui:grid>\n```\n\n----------------------------------------\n\nTITLE: Defining Multiple Routes in PHP\nDESCRIPTION: Demonstrates defining multiple routes and the importance of route order. The second route ('/hello') will never trigger due to the more general first route.\nSOURCE: https://github.com/spiral/docs/blob/3.14/docs/en/http/routing.md#2025-04-20_snippet_39\n\nLANGUAGE: php\nCODE:\n```\n$router->setRoute(\n    'home',\n    new Route('/<param>',\n        function (ServerRequestInterface $request, ResponseInterface $response): array {\n            return $request->getAttribute('route')->getMatches();\n        }\n    )\n);\n\n// this route will never trigger\n$router->setRoute(\n    'hello',\n    new Route('/hello',\n        function (ServerRequestInterface $request, ResponseInterface $response): array {\n            return $request->getAttribute('route')->getMatches();\n        }\n    )\n);\n```\n\n----------------------------------------\n\nTITLE: Getting MIME Type in PHP using Spiral Storage\nDESCRIPTION: Shows how to retrieve the MIME type of a file using the getMimeType() method.\nSOURCE: https://github.com/spiral/docs/blob/3.14/docs/en/advanced/storage.md#2025-04-20_snippet_18\n\nLANGUAGE: php\nCODE:\n```\n$mime = $bucket->getMimeType('file.txt');\n```\n\n----------------------------------------\n\nTITLE: Configuring RoadRunner for GRPC in YAML\nDESCRIPTION: YAML configuration for RoadRunner's GRPC plugin, specifying the listen address and proto files to be used.\nSOURCE: https://github.com/spiral/docs/blob/3.14/docs/en/grpc/configuration.md#2025-04-20_snippet_6\n\nLANGUAGE: yaml\nCODE:\n```\nserver:\n  command: \"php app.php\"\n\ngrpc:\n  # GRPC address to listen\n  listen: \"tcp://0.0.0.0:9001\"\n  proto:\n    - \"proto/calculator.proto\"\n```\n\n----------------------------------------\n\nTITLE: Initializing InterceptableCore with DatabaseQueryCore\nDESCRIPTION: Shows how to initialize and use InterceptableCore with the DatabaseQueryCore for executing database queries.\nSOURCE: https://github.com/spiral/docs/blob/3.14/docs/en/framework/interceptors.md#2025-04-20_snippet_1\n\nLANGUAGE: php\nCODE:\n```\nuse Spiral\\Core\\InterceptableCore;\nuse App\\Application\\Database\\DatabaseQueryCore;\nuse Cycle\\Database\\DatabaseManager;\n\n$core = new InterceptableCore(\n  new DatabaseQueryCore(new DatabaseManager(...))\n);\n```\n\n----------------------------------------\n\nTITLE: Using LoaderInterface in Spiral PHP\nDESCRIPTION: Shows how to use LoaderInterface to check if a view exists, load its source, and list available views. Demonstrates specifying file extensions and working with namespaces.\nSOURCE: https://github.com/spiral/docs/blob/3.14/docs/en/views/basics.md#2025-04-20_snippet_5\n\nLANGUAGE: php\nCODE:\n```\nuse Spiral\\Views\\LoaderInterface;\n\npublic function index(LoaderInterface $loader): string\n{\n    $loader = $loader->withExtension('dark.php');\n    \n    // ...\n}\n```\n\nLANGUAGE: php\nCODE:\n```\nif (!$loader->exists('home')) {\n    throw new \\RuntimeException('View not found');\n}\n\n// ...\n```\n\nLANGUAGE: php\nCODE:\n```\n$loader->exists('my-package:home')\n```\n\nLANGUAGE: php\nCODE:\n```\n/** @var \\Spiral\\Views\\ViewSource $source */\n$source = $loader->load('home');\n\n$source->getNamespace(); // default\n$source->getName(); // home\n$source->getFilename(); // /app/views/home.dark.php\n$source->getCode(); // <html>...</html>\n```\n\nLANGUAGE: php\nCODE:\n```\n/** @var \\Spiral\\Views\\ViewSource $source */\n$source = $loader->load('home');\n\n$source = $source->withCode('<div>...</div>');\n$source->getCode(); // <div>...</div>\n```\n\nLANGUAGE: php\nCODE:\n```\n$views = $loader->list();\n```\n\nLANGUAGE: php\nCODE:\n```\n$views = $loader->list(namespace: 'my-package');\n```\n\n----------------------------------------\n\nTITLE: Configuring Environment Variables in Spiral\nDESCRIPTION: Example of configuring custom environment variables during kernel initialization.\nSOURCE: https://github.com/spiral/docs/blob/3.14/docs/en/framework/kernel.md#2025-04-20_snippet_4\n\nLANGUAGE: php\nCODE:\n```\nuse \\Spiral\\Boot\\Environment;\n\n// Create an application instance ...\n\n$app->run(new Environment(['DEBUG' => true]));\n\n\\dump($app->get(\\Spiral\\Boot\\EnvironmentInterface::class)->getAll());\n```\n\n----------------------------------------\n\nTITLE: Implementing Activity Attributes Interceptor in PHP\nDESCRIPTION: Demonstrates creation of a Temporal interceptor that configures activity options based on attributes. Implements WorkflowOutboundCallsInterceptor interface to modify activity execution parameters.\nSOURCE: https://github.com/spiral/docs/blob/3.14/docs/en/temporal/interceptors.md#2025-04-20_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\ndeclare(strict_types=1);\n\nnamespace App\\Temporal\\Interceptors;\n\nuse React\\Promise\\PromiseInterface;\nuse ReflectionAttribute;\nuse Temporal\\Interceptor\\Trait\\WorkflowOutboundCallsInterceptorTrait;\nuse Temporal\\Interceptor\\WorkflowOutboundCalls\\ExecuteActivityInput;\nuse Temporal\\Interceptor\\WorkflowOutboundCallsInterceptor;\nuse Temporal\\Samples\\Interceptors\\Attribute;\nuse Temporal\\Samples\\Interceptors\\Attribute\\ActivityOption;\n\n/**\n * implement {@see ActivityOption} interface.\n */\nfinal class ActivityAttributesInterceptor implements WorkflowOutboundCallsInterceptor\n{\n    use WorkflowOutboundCallsInterceptorTrait;\n\n    public function executeActivity(ExecuteActivityInput $input, callable $next): PromiseInterface\n    {\n        if ($input->method === null) {\n            return $next($input);\n        }\n\n        $options = $input->options;\n\n        foreach ($this->iterateOptions($input->method) as $attribute) {\n            if ($attribute instanceof Attribute\\StartToCloseTimeout) {\n                \\error_log(\\sprintf('Redeclare start_to_close timeout of %s to %s', $input->type, $attribute->timeout));\n                $options = $options->withStartToCloseTimeout($attribute->timeout);\n            }\n        }\n\n        return $next($input->with(options: $options));\n    }\n\n    /**\n     * @return iterable<int, ActivityOption>\n     */\n    private function iterateOptions(\\ReflectionMethod $method): iterable\n    {\n        $class = $method->getDeclaringClass();\n        foreach ($class->getAttributes(Attribute\\ActivityOption::class, ReflectionAttribute::IS_INSTANCEOF) as $attr) {\n            yield $attr->newInstance();\n        }\n\n        foreach ($method->getAttributes(Attribute\\ActivityOption::class, ReflectionAttribute::IS_INSTANCEOF) as $attr) {\n            yield $attr->newInstance();\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing a Custom ListenerRegistry\nDESCRIPTION: Example of implementing a custom ListenerRegistry that implements both the ListenerRegistryInterface and ListenerProviderInterface.\nSOURCE: https://github.com/spiral/docs/blob/3.14/docs/en/advanced/events.md#2025-04-20_snippet_13\n\nLANGUAGE: php\nCODE:\n```\nnamespace App\\EventDispatcher;\n\nuse Spiral\\Events\\ListenerRegistryInterface;\nuse Psr\\EventDispatcher\\ListenerProviderInterface;\n\nfinal class ListenerRegistry implements ListenerRegistryInterface, ListenerProviderInterface\n{\n    public function addListener(string $event, callable $listener, int $priority = 0): void\n    {\n        // ...\n    }\n    \n    public function getListenersForEvent(object $event): iterable\n    {\n        // ...\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Job Handler with Dependency Injection\nDESCRIPTION: Example of a job handler using dependency injection in the invoke method\nSOURCE: https://github.com/spiral/docs/blob/3.14/docs/en/queue/jobs.md#2025-04-20_snippet_5\n\nLANGUAGE: php\nCODE:\n```\nnamespace App\\Endpoint\\Job;\n\nuse Spiral\\Queue\\JobHandler;\nuse Psr\\Log\\LoggerInterface;\n\nclass SampleJob extends JobHandler\n{\n    public function invoke(LoggerInterface $logger, array $payload): void\n    {\n        $logger->debug('Job processing...', ['id' => $id]);\n        \n        // Do something with service\n        \n        $logger->debug('Job processed', ['id' => $id]);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Combining Multiple Container Attributes in Cache Service in PHP\nDESCRIPTION: Demonstrates combining #[Singleton], #[Scope], and #[Finalize] attributes in a cache service implementation.\nSOURCE: https://github.com/spiral/docs/blob/3.14/docs/en/container/attributes.md#2025-04-20_snippet_6\n\nLANGUAGE: php\nCODE:\n```\nnamespace App\\Services;\n\nuse Psr\\Log\\LoggerInterface;\nuse Spiral\\Core\\Attribute\\Finalize;\nuse Spiral\\Core\\Attribute\\Scope;\nuse Spiral\\Core\\Attribute\\Singleton;\n\n#[Singleton]\n#[Scope('http')]\n#[Finalize(method: 'shutdown')]\nfinal class CacheService\n{\n    private array $cache = [];\n    public function __construct(\n        private readonly LoggerInterface $logger,\n    ) {\n    }\n\n    public function get(string $key): ?string\n    {\n        return $this->cache[$key] ?? null;\n    }\n\n    public function set(string $key, string $value): void\n    {\n        $this->cache[$key] = $value;\n    }\n\n    public function shutdown(): void\n    {\n        $this->logger->info(\"CacheService is finalizing.\");\n        \n        // Flush the cache to a persistent storage, close any resources, etc.\n        $this->cache = [];\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Binding Shared Objects in Spiral Container (PHP)\nDESCRIPTION: Demonstrates how to bind a persistent object to a key in the container using the Shared binding. The object is reused for subsequent requests without allowing custom arguments.\nSOURCE: https://github.com/spiral/docs/blob/3.14/docs/en/container/configuration.md#2025-04-20_snippet_18\n\nLANGUAGE: php\nCODE:\n```\nuse Spiral\\Core\\Config\\Shared;\n\n$container->bind(MyClass::class, new Shared(value: new MyClass(...)));\n```\n\n----------------------------------------\n\nTITLE: Adding Middleware to Routes in PHP\nDESCRIPTION: Demonstrates how to add middleware to a route using the middleware() method.\nSOURCE: https://github.com/spiral/docs/blob/3.14/docs/en/http/routing.md#2025-04-20_snippet_20\n\nLANGUAGE: php\nCODE:\n```\n$routes->add(name: 'news', pattern: '/news/<id:int>')\n    ->middleware(LocaleSelector::class)\n    ->...;\n```\n\n----------------------------------------\n\nTITLE: Implementing a Context Manager in PHP\nDESCRIPTION: Shows how to create a context manager for providing access to IoC scopes from singletons, avoiding direct storage of scoped instances.\nSOURCE: https://github.com/spiral/docs/blob/3.14/docs/zh-CN/container/scopes.md#2025-04-20_snippet_7\n\nLANGUAGE: php\nCODE:\n```\nfinal class UserScope\n{\n    public function __construct(\n        private readonly ContainerInterface $container\n    ) {\n    }\n\n    public function getUserContext(): ?UserContext\n    {\n        // error checking is omitted\n        return $this->container->get(UserContext::class);\n    }\n\n    public function getName(): string\n    {\n        return $this->getUserContext()->getName();\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Binding with Autowire DTO in PHP\nDESCRIPTION: Demonstrates using the Autowire DTO for automated class instantiation with dependency injection.\nSOURCE: https://github.com/spiral/docs/blob/3.14/docs/en/container/configuration.md#2025-04-20_snippet_12\n\nLANGUAGE: php\nCODE:\n```\nuse Spiral\\Core\\Config\\Autowire;\nuse Spiral\\Core\\Container\\Autowire as AutowireAlias;\n\n$container->bind(MyClass::class, new Autowire(\n    autowire: new AutowireAlias(MyClass::class, ['foo' => 'bar']),\n    singleton: true\n));\n```\n\n----------------------------------------\n\nTITLE: Broadcasting Configuration Setup in PHP\nDESCRIPTION: Configuration file setup for broadcast drivers including driver aliases and connection settings. Defines default driver and available connections.\nSOURCE: https://github.com/spiral/docs/blob/3.14/docs/en/websockets/broadcasting.md#2025-04-20_snippet_10\n\nLANGUAGE: php\nCODE:\n```\nuse Spiral\\Broadcasting\\Driver\\LogBroadcast;\nuse Spiral\\Broadcasting\\Driver\\NullBroadcast;\nuse App\\Broadcast\\PusherBroadcast;\n\nreturn [\n    'default' => 'log',\n    'connections' => [\n        'log' => [\n            'driver' => 'log',\n        ],\n        'pusher' => [\n            'driver' => 'pusher',\n        ],\n        'null' => [\n            'driver' => NullBroadcast::class,\n        ],\n    ],\n    'driverAliases' => [\n        'log' => LogBroadcast::class,\n        'pusher' => PusherBroadcast::class,\n    ],\n];\n```\n\n----------------------------------------\n\nTITLE: Creating UserFactory for Database Seeding in PHP\nDESCRIPTION: Factory class for generating user entities with fake data. Extends AbstractFactory to provide username and hashed password generation.\nSOURCE: https://github.com/spiral/docs/blob/3.14/docs/en/cookbook/simple-chat.md#2025-04-20_snippet_25\n\nLANGUAGE: php\nCODE:\n```\nnamespace Database\\Factory;\n\nuse App\\Database\\User;\nuse Spiral\\DatabaseSeeder\\Factory\\AbstractFactory;\n\nfinal class UserFactory extends AbstractFactory\n{\n    public function entity(): string\n    {\n        return User::class;\n    }\n\n    public function makeEntity(array $definition): User\n    {\n        return new User(\n            username: $definition['username'],\n            password: $definition['password'],\n        );\n    }\n\n    public function definition(): array\n    {\n        return [\n            'username' => $this->faker->userName(),\n            'password' => \\password_hash('secret', \\PASSWORD_BCRYPT),\n        ];\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Accessing Session via SessionInterface in Spiral PHP\nDESCRIPTION: Shows how to inject and use SessionInterface to access session data in a controller. The example includes resuming the session and dumping the session ID.\nSOURCE: https://github.com/spiral/docs/blob/3.14/docs/en/basics/session.md#2025-04-20_snippet_0\n\nLANGUAGE: php\nCODE:\n```\nuse Spiral\\Session\\SessionInterface;\n\n// ...\n\npublic function index(SessionInterface $session): void\n{\n    $session->resume();\n    dump($session->getID());\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing a Site Ping Job Handler in PHP\nDESCRIPTION: PHP implementation of a job handler that sends a GET request to a specified site. It extends JobHandler and uses dependency injection to receive an HTTP client.\nSOURCE: https://github.com/spiral/docs/blob/3.14/docs/en/start/queue-basics.md#2025-04-20_snippet_2\n\nLANGUAGE: php\nCODE:\n```\nnamespace App\\Endpoint\\Job;\n\nuse Spiral\\Queue\\JobHandler;\n\nfinal class PingSiteJob extends JobHandler\n{\n    public function invoke(HttpClientInterface $client, string $site): void\n    {\n        $response = $client->request('GET', $site);\n        \n        // do something with response ...\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Queue Retry Policy Configuration\nDESCRIPTION: Example of configuring retry policies for queue jobs using attributes.\nSOURCE: https://github.com/spiral/docs/blob/3.14/docs/en/queue/jobs.md#2025-04-20_snippet_14\n\nLANGUAGE: php\nCODE:\n```\nuse Spiral\\Queue\\Attribute\\RetryPolicy;\nuse Spiral\\Queue\\JobHandler;\n\n#[RetryPolicy(maxAttempts: 3, delay: 5, multiplier: 2)]\nfinal class PingJob extends JobHandler\n{\n    public function invoke(array $payload): void\n    {\n        // ...\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Creating AuthBootloader for Centrifugo User Provider in PHP\nDESCRIPTION: This snippet shows how to create an AuthBootloader class that registers the UserProvider for authentication.\nSOURCE: https://github.com/spiral/docs/blob/3.14/docs/en/cookbook/simple-chat.md#2025-04-20_snippet_39\n\nLANGUAGE: php\nCODE:\n```\nnamespace App\\Application\\Bootloader;\n\nuse App\\Endpoint\\Centrifugo\\UserProvider;\nuse Spiral\\Boot\\Bootloader\\Bootloader;\nuse Spiral\\Bootloader\\Auth\\AuthBootloader as BaseAuthBootloader;\n\nfinal class AuthBootloader extends Bootloader\n{\n    public function init(BaseAuthBootloader $auth): void\n    {\n        $auth->addActorProvider(UserProvider::class);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Binding Custom Session Factory in Spiral PHP Container\nDESCRIPTION: Shows how to replace the default SessionFactoryInterface implementation in the container with a custom one. This allows for complete customization of how sessions are initialized.\nSOURCE: https://github.com/spiral/docs/blob/3.14/docs/en/basics/session.md#2025-04-20_snippet_13\n\nLANGUAGE: php\nCODE:\n```\n$container->bindSingleton(\\Spiral\\Session\\SessionFactoryInterface::class, CustomSessionFactory::class);\n```\n\n----------------------------------------\n\nTITLE: Asserting Jobs Were Not Pushed in Spiral Queue Tests\nDESCRIPTION: This code demonstrates how to use the assertNotPushed method to verify that a specific job was not pushed to the queue in Spiral Framework.\nSOURCE: https://github.com/spiral/docs/blob/3.14/docs/en/testing/queue.md#2025-04-20_snippet_4\n\nLANGUAGE: php\nCODE:\n```\n$this->queue->assertNotPushed('mail.job', function (array $data) {\n    return $data['handler'] instanceof \\Spiral\\SendIt\\MailJob\n        && $data['options']->getQueue() === 'mail'\n        && $data['payload']['foo'] === 'bar';\n});\n```\n\n----------------------------------------\n\nTITLE: Registering Custom Log Handler in PHP\nDESCRIPTION: Example bootloader showing how to register a custom log rotate handler.\nSOURCE: https://github.com/spiral/docs/blob/3.14/docs/en/basics/logging.md#2025-04-20_snippet_2\n\nLANGUAGE: php\nCODE:\n```\nnamespace App\\Application\\Bootloader;\n\nuse Spiral\\Boot\\Bootloader\\Bootloader;\nuse Spiral\\Monolog\\Bootloader\\MonologBootloader;\n\nfinal class LoggingBootloader extends Bootloader\n{\n    public function boot(MonologBootloader $monolog): void\n    {\n        $monolog->addHandler(\n            'my-channel',\n            $monolog->logRotate(directory('runtime') . 'logs/my-channel.log')\n        );\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Article Partial Component Definition\nDESCRIPTION: Reusable article component template with configurable content blocks.\nSOURCE: https://github.com/spiral/docs/blob/3.14/docs/en/views/stempler.md#2025-04-20_snippet_42\n\nLANGUAGE: html\nCODE:\n```\n<div class=\"article\">\n    <div class=\"title\">${title}</div>\n    <div class=\"preview\">\n        <block:preview>\n            default preview\n        </block:preview>\n    </div>\n</div>\n```\n\n----------------------------------------\n\nTITLE: RoadRunner Configuration for Centrifugo Integration\nDESCRIPTION: YAML configuration for RoadRunner server showing RPC, server, and centrifuge settings for Centrifugo integration.\nSOURCE: https://github.com/spiral/docs/blob/3.14/docs/en/websockets/configuration.md#2025-04-20_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\nrpc:\n  listen: tcp://0.0.0.0:6001\n\nserver:\n  command: \"php app.php\"\n  relay: pipes\n\ncentrifuge:\n  proxy_address: \"tcp://0.0.0.0:10001\"\n  grpc_api_address: \"centrifugo:10000\"\n```\n\n----------------------------------------\n\nTITLE: Cookie Whitelisting Configuration\nDESCRIPTION: Shows how to configure cookie whitelisting in a bootloader to disable protection for specific cookies.\nSOURCE: https://github.com/spiral/docs/blob/3.14/docs/en/http/cookies.md#2025-04-20_snippet_5\n\nLANGUAGE: php\nCODE:\n```\npublic function boot(CookiesBootloader $cookies): void\n{\n    $cookies->whitelistCookie('CustomCookie');\n}\n```\n\n----------------------------------------\n\nTITLE: Example PHP Console Command Using gRPC Client\nDESCRIPTION: Console command implementation demonstrating usage of the PingerClient to make gRPC calls with error handling.\nSOURCE: https://github.com/spiral/docs/blob/3.14/docs/en/grpc/client.md#2025-04-20_snippet_2\n\nLANGUAGE: php\nCODE:\n```\nnamespace App\\Endpoint\\Console;\n\nuse Spiral\\Console\\Attribute\\Argument;\nuse Spiral\\Console\\Attribute\\AsCommand;\nuse Spiral\\Console\\Attribute\\Question;\nuse GRPC\\Pinger\\PingerInterface;\nuse Spiral\\Console\\Command;\nuse GRPC\\Pinger\\PingRequest;\nuse Spiral\\RoadRunner\\GRPC\\Context;\nuse Spiral\\RoadRunner\\GRPC\\Exception\\GRPCException;\n\n#[AsCommand(name: 'ping')]\nfinal class PingCommand extends Command\n{\n    #[Argument(description: 'URL to ping')]\n    #[Question(question: 'Provide URL to ping')]\n    private string $url;\n\n    public function __invoke(\n        PingerInterface $client\n    ): int {\n        try {\n            $this->writeln(\\sprintf('Sending ping request [%s]...', $this->url));\n\n            $response = $client->ping(\n                new Context([]),\n                new PingRequest(['url' => $this->url])\n            );\n\n            $this->writeln(\\sprintf(\n                'Response: code - %d',\n                $response->getStatusCode()\n            ));\n        } catch (GRPCException $e) {\n            $this->writeln(\\sprintf(\n                'Error: code - %d, message - %s',\n                $e->getCode(),\n                $e->getMessage()\n            ));\n        }\n        return self::SUCCESS;\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: DataGrid with Filter Integration\nDESCRIPTION: Shows how to integrate a filter form directly with a DataGrid. This example includes search functionality, form fields for filtering by name and email, and buttons for applying filters.\nSOURCE: https://github.com/spiral/docs/blob/3.14/docs/zh-CN/keeper/components.md#2025-04-20_snippet_4\n\nLANGUAGE: xhtml\nCODE:\n```\n<ui:grid url=\"@action('users.list', inject('params', []))\" namespace=\"main\">\n    <grid:filter search=\"true\" immediate=\"300\" buttons=\"true\">\n        <form:input name=\"firstName\" label=\"First Name\" value=\"\" size=\"6\" required=\"true\"/>\n        <form:input name=\"lastName\" label=\"Last Name\" value=\"\" size=\"6\" required=\"true\"/>\n        <form:input name=\"email\" label=\"Email\" value=\"\" required=\"true\"/>\n    </grid:filter>\n</ui:grid>\n```\n\n----------------------------------------\n\nTITLE: Annotated Controller Route Definition in PHP\nDESCRIPTION: Demonstrates route registration using PHP attributes for controller and action definitions, including namespace, prefix, and route configurations.\nSOURCE: https://github.com/spiral/docs/blob/3.14/docs/en/keeper/routing.md#2025-04-20_snippet_2\n\nLANGUAGE: php\nCODE:\n```\nuse Spiral\\Keeper\\Annotation\\Action;\nuse Spiral\\Keeper\\Annotation\\Controller;\nuse Spiral\\Views\\ViewsInterface;\n\n#[Controller(namespace: \"admin\", name: \"user\", prefix: \"/users\")]\nclass User\n{\n\n     #[Action(route: \"/create\", name: \"createUser\", methods: \"GET\")]\n    public function create(ViewsInterface $views): string\n    {\n        return $views->render('admin:users/create');\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Refactored Post Entity with Constructor Injection\nDESCRIPTION: Refactored Post entity that moves properties into the constructor using constructor property promotion. This approach simplifies the entity definition while maintaining the same database schema.\nSOURCE: https://github.com/spiral/docs/blob/3.14/docs/en/cookbook/quick-start.md#2025-04-20_snippet_13\n\nLANGUAGE: php\nCODE:\n```\nuse App\\Domain\\Blog\\Repository\\PostRepository;\nuse Cycle\\Annotated\\Annotation\\Column;\nuse Cycle\\Annotated\\Annotation\\Entity;\n\n#[Entity(repository: PostRepository::class)]\nclass Post\n{\n    #[Column(type: 'primary')]\n    public int $id;\n\n    public function __construct(\n        #[Column(type: 'string')]\n        public string $title,\n\n        #[Column(type: 'text')]\n        public string $content\n    ) {\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: OpenTelemetry Collector Configuration\nDESCRIPTION: YAML configuration for the OpenTelemetry collector, defining receivers, processors, exporters, and service pipelines for trace data.\nSOURCE: https://github.com/spiral/docs/blob/3.14/docs/en/advanced/telemetry.md#2025-04-20_snippet_5\n\nLANGUAGE: yaml\nCODE:\n```\nreceivers:\n  otlp:\n    protocols:\n      grpc:\n      http:\n\nprocessors:\n  batch:\n    timeout: 1s\n\nexporters:\n  logging:\n    loglevel: debug\n\n  zipkin:\n    endpoint: \"http://zipkin:9411/api/v2/spans\"\n\n  datadog:\n    api:\n      site: datadoghq.eu\n      key: # your datadog api key\n\n  otlp:\n    endpoint: https://otlp.eu01.nr-data.net:443\n    headers:\n      api-key: # your new relic api key\n\nservice:\n  pipelines:\n    traces:\n      receivers: [ otlp ]\n      processors: [ batch ]\n      # Here you can set exporters where you want to send traces\n      exporters: [ zipkin, datadog, otlp, logging ]\n```\n\n----------------------------------------\n\nTITLE: Creating Basic Console Command in PHP\nDESCRIPTION: Demonstrates creating a basic console command without alias using the create:command scaffolder. Generates a command class with basic structure and invoke method.\nSOURCE: https://github.com/spiral/docs/blob/3.14/docs/en/basics/scaffolding.md#2025-04-20_snippet_9\n\nLANGUAGE: terminal\nCODE:\n```\nphp app.php create:command UserRegister\n```\n\nLANGUAGE: php\nCODE:\n```\ndeclare(strict_types=1);\n\nnamespace App\\Endpoint\\Console;\n\nuse Spiral\\Console\\Attribute\\Argument;\nuse Spiral\\Console\\Attribute\\AsCommand;\nuse Spiral\\Console\\Attribute\\Option;\nuse Spiral\\Console\\Attribute\\Question;\nuse Spiral\\Console\\Command;\n\n#[AsCommand(name: 'user:register')]\nfinal class UserRegisterCommand extends Command\n{\n    public function __invoke(): int\n    {\n        // Put your command logic here\n        $this->info('Command logic is not implemented yet');\n\n        return self::SUCCESS;\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Finalized Database Connection in PHP\nDESCRIPTION: Demonstrates using the #[Finalize] attribute to ensure proper cleanup of database connections when scope ends.\nSOURCE: https://github.com/spiral/docs/blob/3.14/docs/en/container/attributes.md#2025-04-20_snippet_4\n\nLANGUAGE: php\nCODE:\n```\nuse Spiral\\Core\\Attribute\\Finalize;\n\n#[Finalize(method: 'closeConnection')]\nfinal class DatabaseConnection\n{\n    private $connection;\n\n    public function __construct()\n    {\n        // Initialize the database connection\n    }\n\n    public function query($sql)\n    {\n        // Execute the query on the database\n    }\n\n    public function closeConnection(): void\n    {\n        // Close the connection\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Auto-Configuration Bootloader Implementation\nDESCRIPTION: Demonstrates implementing auto-configuration API in a bootloader for runtime configuration modifications.\nSOURCE: https://github.com/spiral/docs/blob/3.14/docs/en/framework/config.md#2025-04-20_snippet_5\n\nLANGUAGE: php\nCODE:\n```\nnamespace App\\Application\\Bootloader;\n\nuse App\\Config\\GithubConfig;\nuse Spiral\\Boot\\Bootloader\\Bootloader;\nuse Spiral\\Config\\ConfiguratorInterface;\nuse Spiral\\Config\\Patch\\Set;\nuse Spiral\\Core\\Container\\SingletonInterface;\n\nclass GithubBootloader extends Bootloader implements SingletonInterface\n{\n    public function __construct(\n        private readonly ConfiguratorInterface $configurator\n    ) {\n    }\n\n    public function init(): void\n    {\n        $configurator->setDefaults(GithubConfig::CONFIG, [\n            'access_token' => $env->get('GITHUB_ACCESS_TOKEN')\n            'authentication_type' => $env->get('GITHUB_AUTHENTICATION_TYPE', 'token')\n        ]);\n    }\n\n    public function setAccessToken(string $token): void\n    {\n        $this->configurator->modify(\n          GithubConfig::CONFIG, \n          new Set('access_token', $token)\n        );\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Deleting Files in PHP using Spiral Storage Buckets\nDESCRIPTION: Demonstrates how to delete a file using the delete() method of a storage bucket.\nSOURCE: https://github.com/spiral/docs/blob/3.14/docs/en/advanced/storage.md#2025-04-20_snippet_13\n\nLANGUAGE: php\nCODE:\n```\n$bucket->delete('file.txt');\n```\n\n----------------------------------------\n\nTITLE: Implementing Centrifugo Connect Handler in PHP\nDESCRIPTION: This code defines a ConnectHandler class that handles the Centrifugo connect event. It authenticates the user, retrieves user data, and responds with connection details.\nSOURCE: https://github.com/spiral/docs/blob/3.14/docs/en/cookbook/simple-chat.md#2025-04-20_snippet_41\n\nLANGUAGE: php\nCODE:\n```\nnamespace App\\Endpoint\\Centrifugo;\n\nuse App\\Database\\User;\nuse RoadRunner\\Centrifugo\\Payload\\ConnectResponse;\nuse RoadRunner\\Centrifugo\\Request\\Connect;\nuse RoadRunner\\Centrifugo\\Request\\RequestInterface;\nuse Spiral\\Auth\\ActorProviderInterface;\nuse Spiral\\Prototype\\Traits\\PrototypeTrait;\nuse Spiral\\RoadRunnerBridge\\Centrifugo\\ServiceInterface;\n\nfinal class ConnectHandler implements ServiceInterface\n{\n    use PrototypeTrait;\n\n    public function __construct(\n        private readonly ActorProviderInterface $actorProvider,\n    ) {\n    }\n\n    /** @param Connect $request */\n    public function handle(RequestInterface $request): void\n    {\n        try {\n            // Authenticate user with a given token from the connection request\n            $authToken = $request->getData()['authToken'] ?? null;\n            \n            if ($authToken && $user = $this->getActor($authToken)) {\n                $userId = $user->getId();\n            } else {\n                $request->error(403, 'Forbidden');\n                return;\n            }\n\n            $request->respond(\n                new ConnectResponse(\n                    user: (string)$userId,\n                    data: ['user' => $user->jsonSerialize()],\n                    channels: ['chat'],\n                ),\n            );\n        } catch (\\Throwable $e) {\n            $request->error($e->getCode(), $e->getMessage());\n        }\n    }\n\n    public function getActor(?string $authToken): ?User\n    {\n        if ($authToken && $token = $this->authTokens->load($authToken)) {\n            return $this->actorProvider->getActor($token);\n        }\n\n        return null;\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Non-Direct Scope Middleware Implementation\nDESCRIPTION: Alternative middleware implementation using request attributes for context storage.\nSOURCE: https://github.com/spiral/docs/blob/3.14/docs/en/http/middleware.md#2025-04-20_snippet_11\n\nLANGUAGE: php\nCODE:\n```\nnamespace App\\Endpoint\\Web\\Middleware;\n\nuse Psr\\Http\\Message\\ResponseInterface;\nuse Psr\\Http\\Message\\ServerRequestInterface;\nuse Psr\\Http\\Server\\MiddlewareInterface;\nuse Psr\\Http\\Server\\RequestHandlerInterface;\n\nclass MyMiddleware implements MiddlewareInterface\n{\n    public function process(\n        ServerRequestInterface $request,\n        RequestHandlerInterface $handler\n    ): ResponseInterface {\n        return $handler->handle($request->withAttribute('userContext', new UserContext(123, 'test')));\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a Basic Request Filter using Spiral CLI\nDESCRIPTION: Command to create a request filter class, which maps and validates HTTP requests before controller handling. This generates a basic filter class that can be customized to modify HTTP requests.\nSOURCE: https://github.com/spiral/docs/blob/3.14/docs/en/basics/scaffolding.md#2025-04-20_snippet_15\n\nLANGUAGE: terminal\nCODE:\n```\nphp app.php create:filter <name>\n```\n\n----------------------------------------\n\nTITLE: Directory Configuration for Locale Files\nDESCRIPTION: Configuration example showing how to set custom directories for locale files\nSOURCE: https://github.com/spiral/docs/blob/3.14/docs/en/advanced/i18n.md#2025-04-20_snippet_5\n\nLANGUAGE: php\nCODE:\n```\nreturn [\n    'directory' => directory('locale'),\n    'directories' => [\n        directory('vendor/package/name/locale'),\n        ...\n    ],\n];\n```\n\n----------------------------------------\n\nTITLE: Installing Encrypter Component via Composer in PHP\nDESCRIPTION: Command to install the Encrypter component using Composer for Spiral Framework projects that don't include it by default.\nSOURCE: https://github.com/spiral/docs/blob/3.14/docs/en/security/encrypter.md#2025-04-20_snippet_0\n\nLANGUAGE: terminal\nCODE:\n```\ncomposer require spiral/encrypter\n```\n\n----------------------------------------\n\nTITLE: Creating Custom S3 Signed Resolver in PHP\nDESCRIPTION: Example of creating a custom S3 signed resolver using PHP. It demonstrates how to initialize the AWS S3 client and create a resolver instance with specific parameters.\nSOURCE: https://github.com/spiral/docs/blob/3.14/docs/en/advanced/storage.md#2025-04-20_snippet_36\n\nLANGUAGE: php\nCODE:\n```\n$s3 = new \\Spiral\\Distribution\\Resolver\\S3SignedResolver(\n    client: new \\Aws\\S3\\S3Client([\n        'version' => 'latest',\n        'region'  => 'eu-north-1',\n        'credentials' => new \\Aws\\Credentials\\Credentials(\n            key: 'key',\n            secret: file_get_contents(__DIR__ . '/path/to/secret.pem')\n        )\n    ]),\n    bucket: 'bucket-name',\n    prefix: 'path/to/files'\n);\n\n$url = $s3->resolve(...);\n```\n\n----------------------------------------\n\nTITLE: Registering League Event Bootloader Using Constant\nDESCRIPTION: Code example showing how to register both Events and League Event bootloaders using the LOAD constant.\nSOURCE: https://github.com/spiral/docs/blob/3.14/docs/en/advanced/events.md#2025-04-20_snippet_4\n\nLANGUAGE: php\nCODE:\n```\nprotected const LOAD = [\n    // ...\n    \\Spiral\\Events\\Bootloader\\EventsBootloader::class,\n    \\Spiral\\League\\Event\\Bootloader\\EventBootloader::class,\n    // ...\n];\n```\n\n----------------------------------------\n\nTITLE: Configuring PSR-4 Autoloading in Composer for Spiral Application\nDESCRIPTION: Shows how to configure PSR-4 autoloading in composer.json for a Spiral application. This setup maps the 'App' namespace to the 'app/src' directory.\nSOURCE: https://github.com/spiral/docs/blob/3.14/docs/en/start/structure.md#2025-04-20_snippet_4\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"autoload\": {\n    \"psr-4\": {\n      \"App\\\\\": \"app/src/\"\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Using When Callback with Scheduler\nDESCRIPTION: Example of using the when callback to conditionally determine if a task should run.\nSOURCE: https://github.com/spiral/docs/blob/3.14/docs/en/advanced/scheduler.md#2025-04-20_snippet_10\n\nLANGUAGE: php\nCODE:\n```\n$schedule->command('email:digest')\n   ->everyFiveMinutes()\n   ->when(static fn(HolidaysCalendar $calendar) => !$calendar->isHoliday());\n   -> ...;\n```\n\n----------------------------------------\n\nTITLE: JSON Response Generation from Arrays\nDESCRIPTION: Shows how Spiral's PSR-15 handler automatically converts arrays or JsonSerializable objects into JSON responses. This example returns an array that will be converted to a JSON response with status and data properties.\nSOURCE: https://github.com/spiral/docs/blob/3.14/docs/en/http/request-response.md#2025-04-20_snippet_9\n\nLANGUAGE: php\nCODE:\n```\nnamespace App\\Endpoint\\Web;\n\nclass HomeController\n{\n    public function index(): array\n    {\n        return [\n            'status' => 200,\n            'data' => ['some' => 'json']\n        ];\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Adding CSRF Bootloader to Spiral Application\nDESCRIPTION: Code snippets showing how to add the CSRF Bootloader to a Spiral application, either using a method or a constant in the Kernel class.\nSOURCE: https://github.com/spiral/docs/blob/3.14/docs/en/http/csrf.md#2025-04-20_snippet_2\n\nLANGUAGE: php\nCODE:\n```\npublic function defineBootloaders(): array\n{\n    return [\n        // ...\n        \\Spiral\\Bootloader\\Http\\CsrfBootloader::class,\n        // ...\n    ];\n}\n```\n\nLANGUAGE: php\nCODE:\n```\nprotected const LOAD = [\n    // ...\n    \\Spiral\\Bootloader\\Http\\CsrfBootloader::class,\n    // ...\n];\n```\n\n----------------------------------------\n\nTITLE: Table Assertion Examples in PHP\nDESCRIPTION: Examples of asserting table states and schema in the database using DatabaseAsserts trait methods.\nSOURCE: https://github.com/spiral/docs/blob/3.14/docs/en/testing/database.md#2025-04-20_snippet_14\n\nLANGUAGE: php\nCODE:\n```\n$this->assertTable('users')->select(function(\\Cycle\\Database\\Query\\SelectQuery $query) {\n    $query->where('deleted_at', '!=', null);\n})->...;\n```\n\nLANGUAGE: php\nCODE:\n```\n$assertion->assertColumnSame(\n     column: 'id', \n     type: 'uuid', \n     size: 64,\n     ...\n);\n```\n\nLANGUAGE: php\nCODE:\n```\n$this->assertTable('users')->assertIndexPresent(['email']);\n```\n\nLANGUAGE: php\nCODE:\n```\n$this->assertTable('users')->assertForeignKeyPresent(['org_id']);\n```\n\nLANGUAGE: php\nCODE:\n```\n$this->assertTable('users')->assertPrimaryKeyExists('id');\n```\n\n----------------------------------------\n\nTITLE: Setting Default Specifications for Grid Factory\nDESCRIPTION: Example of setting default specifications for sorting, filtering, and pagination in the Grid Factory.\nSOURCE: https://github.com/spiral/docs/blob/3.14/docs/en/component/data-grid.md#2025-04-20_snippet_7\n\nLANGUAGE: php\nCODE:\n```\n/** @var Spiral\\DataGrid\\GridFactory $factory */\n$factory = $factory->withDefaults([\n    GridFactory::KEY_SORT     => ['id' => 'desc'],\n    GridFactory::KEY_FILTER   => ['name' => 'Antony'],\n    GridFactory::KEY_PAGINATE => ['page' => 3, 'limit' => 100]\n]);\n```\n\n----------------------------------------\n\nTITLE: Implementing Authentication Interceptor - PHP\nDESCRIPTION: Authentication interceptor implementation for validating user tokens in Centrifugo requests\nSOURCE: https://github.com/spiral/docs/blob/3.14/docs/en/cookbook/simple-chat.md#2025-04-20_snippet_45\n\nLANGUAGE: php\nCODE:\n```\nnamespace App\\Endpoint\\Centrifugo\\Interceptor;\n\nuse Psr\\EventDispatcher\\EventDispatcherInterface;\nuse RoadRunner\\Centrifugo\\Request\\RequestInterface;\nuse Spiral\\Auth\\ActorProviderInterface;\nuse Spiral\\Auth\\AuthContext;\nuse Spiral\\Auth\\AuthContextInterface;\nuse Spiral\\Core\\CoreInterceptorInterface;\nuse Spiral\\Core\\CoreInterface;\nuse Spiral\\Core\\ScopeInterface;\nuse Spiral\\Prototype\\Traits\\PrototypeTrait;\n\nfinal class AuthInterceptor implements CoreInterceptorInterface\n{\n    use PrototypeTrait;\n\n    public function __construct(\n        private readonly ScopeInterface $scope,\n        private readonly ActorProviderInterface $actorProvider,\n        private readonly ?EventDispatcherInterface $eventDispatcher = null,\n    ) {\n    }\n\n    public function process(string $controller, string $action, array $parameters, CoreInterface $core): mixed\n    {\n        $request = $parameters['request'];\n        \\assert($request instanceof RequestInterface);\n\n        $authToken = $request->getData()['authToken'] ?? null;\n\n        if (!$authToken || !$token = $this->authTokens->load($authToken)) {\n            $request->error(403, 'Unauthorized');\n            return null;\n        }\n\n        $auth = new AuthContext($this->actorProvider, $this->eventDispatcher);\n        $auth->start($token);\n\n        if ($auth->getActor() === null) {\n            $request->error(403, 'Unauthorized');\n            return null;\n        }\n\n        return $this->scope->runScope([\n            AuthContextInterface::class => $auth,\n        ], fn () => $core->callAction($controller, $action, $parameters));\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Using Guarded Attribute with Fallback Action in PHP\nDESCRIPTION: Example of using the Guarded attribute with a fallback action that executes when permission is denied. The 'else' parameter specifies what response to return.\nSOURCE: https://github.com/spiral/docs/blob/3.14/docs/en/http/interceptors.md#2025-04-20_snippet_6\n\nLANGUAGE: php\nCODE:\n```\n#[Guarded(permission: 'home.about', else: 'notFound')]\npublic function about(): string\n{\n    return 'OK';\n}\n```\n\n----------------------------------------\n\nTITLE: Specifying HTTP Methods for Routes in PHP\nDESCRIPTION: Shows how to restrict routes to specific HTTP methods using the methods() method.\nSOURCE: https://github.com/spiral/docs/blob/3.14/docs/en/http/routing.md#2025-04-20_snippet_19\n\nLANGUAGE: php\nCODE:\n```\n$routes->add(name: 'html', pattern: '/<action>.html')\n    ->methods('GET')\n    ->...;\n\n// or\n\n$routes->add(name: 'news', pattern: '/news/<id:int>')\n    ->methods(['GET', 'POST'])\n    ->...;\n```\n\n----------------------------------------\n\nTITLE: Configuring Ticker Plugin in RoadRunner Configuration\nDESCRIPTION: YAML configuration for the custom ticker plugin in RoadRunner, defining the tick interval and worker pool settings.\nSOURCE: https://github.com/spiral/docs/blob/3.14/docs/en/cookbook/custom-dispatcher.md#2025-04-20_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nserver:\n  command: php app.php\n\nticker:\n  interval: 1s\n  pool:\n    num_workers: 2\n```\n\n----------------------------------------\n\nTITLE: Binding Singleton with DeferredFactory DTO in PHP\nDESCRIPTION: Demonstrates creating a singleton binding using the DeferredFactory DTO.\nSOURCE: https://github.com/spiral/docs/blob/3.14/docs/en/container/configuration.md#2025-04-20_snippet_16\n\nLANGUAGE: php\nCODE:\n```\n$container->bind('some-binding', new DeferredFactory(\n    factory: ...,\n    singleton: true\n));\n```\n\n----------------------------------------\n\nTITLE: Defining Message Repository in Spiral ORM\nDESCRIPTION: This code defines a custom repository for the Message entity, extending Cycle ORM's Repository class. It includes a method to find all messages by thread ID.\nSOURCE: https://github.com/spiral/docs/blob/3.14/docs/en/cookbook/simple-chat.md#2025-04-20_snippet_16\n\nLANGUAGE: php\nCODE:\n```\nnamespace App\\Repository;\n\nuse App\\Database\\Message;\nuse Cycle\\ORM\\Select\\Repository;\n\nfinal class MessageRepository extends Repository\n{\n    /**\n     * @return Message[]\n     */\n    public function findAllByThread(int $threadId): array\n    {\n        return $this->findAll([\n            'thread_id' => $threadId,\n        ], [\n            'id' => 'ASC',\n        ]);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Checking Verbose Mode\nDESCRIPTION: Example of checking if current verbosity mode is higher than verbose.\nSOURCE: https://github.com/spiral/docs/blob/3.14/docs/en/console/commands.md#2025-04-20_snippet_11\n\nLANGUAGE: php\nCODE:\n```\ndump($this->isVerbose());\n```\n\n----------------------------------------\n\nTITLE: Using Cycle Entity Injection with Single Entity in PHP\nDESCRIPTION: Example of using Cycle entity injection in a controller method. The user entity is automatically resolved from the <id> route parameter, with a 404 exception thrown if not found.\nSOURCE: https://github.com/spiral/docs/blob/3.14/docs/en/http/interceptors.md#2025-04-20_snippet_2\n\nLANGUAGE: php\nCODE:\n```\nnamespace App\\Endpoint\\Web;\n\nuse App\\Domain\\Blog\\Entity\\User;\nuse Spiral\\Router\\Annotation\\Route;\n\nfinal class UserController\n{\n    #[Route(route: '/users/<id>')]\n    public function show(User $user)\n    {\n        dump($user);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Ticker Dispatcher for Spiral Application\nDESCRIPTION: PHP code for the Spiral Framework dispatcher that handles tick events from the RoadRunner ticker plugin and processes them in the application.\nSOURCE: https://github.com/spiral/docs/blob/3.14/docs/en/cookbook/custom-dispatcher.md#2025-04-20_snippet_4\n\nLANGUAGE: php\nCODE:\n```\nnamespace App\\Dispatcher;\n\nuse Psr\\Container\\ContainerInterface;\nuse Spiral\\Boot\\DispatcherInterface;\nuse Spiral\\Boot\\EnvironmentInterface;\nuse Spiral\\Boot\\FinalizerInterface;\nuse Spiral\\RoadRunner\\Worker;\n\nfinal class TickerDispatcher implements DispatcherInterface\n{\n    public function __construct(\n        private readonly EnvironmentInterface $env,\n        private readonly FinalizerInterface $finalizer,\n        private readonly ContainerInterface $container\n    ) {\n    }\n\n    public function canServe(): bool\n    {\n        return $this->env->get('RR_MODE') === 'ticker';\n    }\n\n    public function serve(): void\n    {\n        /** @var Worker $worker */\n        $worker = $this->container->get(Worker::class);\n\n        while ($payload = $worker->waitPayload()) {\n            $data = \\json_decode($payload->body, true);\n            \n            // Handle tick ... \n        \n            // Respond Answer\n            $worker->respond(new \\Spiral\\RoadRunner\\Payload('OK'));\n\n            // reset some stateful services\n            $this->finalizer->finalize();\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Custom JSON Error Renderer Implementation in PHP\nDESCRIPTION: Implementation of a custom error renderer for handling validation errors with JSON responses.\nSOURCE: https://github.com/spiral/docs/blob/3.14/docs/en/filters/filter.md#2025-04-20_snippet_23\n\nLANGUAGE: php\nCODE:\n```\nnamespace App\\Filter;\n\nuse Psr\\Http\\Message\\ResponseInterface;\nuse Spiral\\Filters\\ErrorsRendererInterface;\nuse Spiral\\Http\\ResponseWrapper;\n\nfinal class CustomJsonErrorsRenderer implements ErrorsRendererInterface\n{\n    public function __construct(\n        private readonly ResponseWrapper $wrapper\n    ) {\n    }\n\n    public function render(array $errors, mixed $context = null): ResponseInterface\n    {\n        return $this->wrapper->json([\n            'errors' => $errors,\n            'context' => (string) $context\n        ])\n            ->withStatus(422, 'The given data was invalid.');\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing HTTP Proxy RPC Service - PHP\nDESCRIPTION: Implementation of an RPC service handler that proxies requests to HTTP layer\nSOURCE: https://github.com/spiral/docs/blob/3.14/docs/en/websockets/services.md#2025-04-20_snippet_12\n\nLANGUAGE: php\nCODE:\n```\nnamespace App\\Endpoint\\Centrifugo;\n\nuse Psr\\Http\\Message\\ServerRequestFactoryInterface;\nuse Psr\\Http\\Message\\ServerRequestInterface;\nuse RoadRunner\\Centrifugo\\Payload\\RPCResponse;\nuse RoadRunner\\Centrifugo\\Request\\RPC;\nuse Spiral\\Filters\\Exception\\ValidationException;\nuse Spiral\\Http\\Http;\nuse Spiral\\RoadRunnerBridge\\Centrifugo\\ServiceInterface;\n\nfinal class RPCService implements ServiceInterface\n{\n    public function __construct(\n        private readonly Http $http,\n        private readonly ServerRequestFactoryInterface $requestFactory,\n    ) {\n    }\n\n    /**\n     * @param RPC $request\n     */\n    public function handle(Request\\RequestInterface $request): void\n    {\n        try {\n            $response = $this->http->handle($this->createHttpRequest($request));\n\n            $result = \\json_decode((string)$response->getBody(), true);\n            $result['code'] = $response->getStatusCode();\n        } catch (ValidationException $e) {\n            $result['code'] = $e->getCode();\n            $result['errors'] = $e->errors;\n            $result['message'] = $e->getMessage();\n        } catch (\\Throwable $e) {\n            $result['code'] = $e->getCode();\n            $result['message'] = $e->getMessage();\n        }\n\n        try {\n            $request->respond(new RPCResponse(data: $result));\n        } catch (\\Throwable $e) {\n            $request->error($e->getCode(), $e->getMessage());\n        }\n    }\n\n    public function createHttpRequest(Request\\RPC $request): ServerRequestInterface\n    {\n        if(!\\str_contains($request->method, ':')) {\n            throw new \\InvalidArgumentException('Method must be in format \"method:uri\"');\n        }\n\n        // Example of method string: get:users/1 , post:news/store, delete:news/1\n        // split received method string to HTTP method and uri  \n        [$method, $uri] = \\explode(':', $request->method, 2);\n        \n        $method = \\strtoupper($method);\n\n        $httpRequest = $this->requestFactory->createServerRequest($method, \\ltrim($uri, '/'))\n            ->withHeader('Content-Type', 'application/json');\n\n        return match ($method) {\n            'GET', 'HEAD' => $httpRequest->withQueryParams($request->getData()),\n            'POST', 'PUT', 'DELETE' => $httpRequest->withParsedBody($request->getData()),\n            default => throw new \\InvalidArgumentException('Unsupported method'),\n        };\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Mapping Query Parameters Using Attributes in Spiral Filters\nDESCRIPTION: Example of using the Query attribute to map a query string parameter to a class property in a filter class. The attribute specifies which query parameter should be mapped to the property.\nSOURCE: https://github.com/spiral/docs/blob/3.14/docs/en/filters/filter.md#2025-04-20_snippet_11\n\nLANGUAGE: php\nCODE:\n```\nnamespace App\\Endpoint\\Web\\Filter;\n\nuse Spiral\\Filters\\Attribute\\Input\\Query;\nuse Spiral\\Filters\\Model\\Filter;\n\nclass MyFilter extends Filter\n{\n    #[Query(key: 'username')]\n    public string $login;\n}\n```\n\n----------------------------------------\n\nTITLE: Installing Spiral Reactor Component\nDESCRIPTION: Command to install the spiral/reactor component using Composer.\nSOURCE: https://github.com/spiral/docs/blob/3.14/docs/zh-CN/component/reactor.md#2025-04-20_snippet_0\n\nLANGUAGE: terminal\nCODE:\n```\ncomposer require spiral/reactor\n```\n\n----------------------------------------\n\nTITLE: Resolving S3 URL with Expiration in PHP\nDESCRIPTION: Example of using the resolve method with an expiration time to generate a time-limited S3 URL.\nSOURCE: https://github.com/spiral/docs/blob/3.14/docs/en/advanced/storage.md#2025-04-20_snippet_37\n\nLANGUAGE: php\nCODE:\n```\n$url = $s3->resolve($file, new DateTime('+30 sec'));\n```\n\n----------------------------------------\n\nTITLE: Registering GRPC Interceptors in PHP Configuration File\nDESCRIPTION: This code snippet shows how to register GRPC interceptors in the Spiral Framework configuration file.\nSOURCE: https://github.com/spiral/docs/blob/3.14/docs/en/grpc/interceptors.md#2025-04-20_snippet_5\n\nLANGUAGE: php\nCODE:\n```\nreturn [    \n    'interceptors' => [\n        \\App\\Endpoint\\GRPC\\Interceptor\\LogInterceptor::class,\n        \\App\\Endpoint\\GRPC\\Interceptor\\ExceptionHandlerInterceptor::class,\n        \\App\\Endpoint\\GRPC\\Interceptor\\GuardedInterceptor::class,\n    ]\n];\n```\n\n----------------------------------------\n\nTITLE: Spiral Application Centrifugo Configuration\nDESCRIPTION: PHP configuration file for Centrifugo integration in Spiral application, defining services and interceptors for different request types.\nSOURCE: https://github.com/spiral/docs/blob/3.14/docs/en/websockets/configuration.md#2025-04-20_snippet_4\n\nLANGUAGE: php\nCODE:\n```\nuse RoadRunner\\Centrifugo\\Request\\RequestType;\n\nreturn [\n    'services' => [\n        RequestType::Connect->value => ConnectService::class,\n        RequestType::Subscribe->value => SubscribeService::class,\n        RequestType::Refresh->value => RefreshService::class,\n        RequestType::Publish->value => PublishService::class,\n        RequestType::RPC->value => RPCService::class,\n    ],\n    'interceptors' => [\n        RequestType::Connect->value => [\n            Interceptor\\AuthInterceptor::class,\n        ],\n        RequestType::Subscribe->value => [\n            Interceptor\\AuthInterceptor::class,\n        ],\n        RequestType::RPC->value => [\n            Interceptor\\AuthInterceptor::class,\n        ],\n        '*' => [\n            Interceptor\\TelemetryInterceptor::class,\n        ],\n    ],\n];\n```\n\n----------------------------------------\n\nTITLE: Adding CSRF Token Middleware to Spiral Routes\nDESCRIPTION: Example of how to add the custom CSRF token middleware to the 'web' middleware group in a Spiral application.\nSOURCE: https://github.com/spiral/docs/blob/3.14/docs/en/http/csrf.md#2025-04-20_snippet_9\n\nLANGUAGE: php\nCODE:\n```\n'web' => [\n    CookiesMiddleware::class,\n    CsrfMiddleware::class,\n    ViewCsrfTokenMiddleware::class,\n    CsrfFirewall::class,\n    // ...\n],\n```\n\n----------------------------------------\n\nTITLE: Deployer Configuration for Spiral\nDESCRIPTION: PHP deployment configuration file for automating Spiral application deployment using Deployer tool.\nSOURCE: https://github.com/spiral/docs/blob/3.14/docs/en/start/deployment.md#2025-04-20_snippet_5\n\nLANGUAGE: php\nCODE:\n```\nnamespace Deployer;\n\nrequire 'recipe/spiral.php';\n\nset('repository', 'https://github.com/xxx/my-app');\n\nadd('shared_files', []);\nadd('shared_dirs', []);\nadd('writable_dirs', []);\n\nhost('example.org')\n    ->set('remote_user', 'deployer')\n    ->set('deploy_path', '/var/www/my-app');\n\nafter('deploy:failed', 'deploy:unlock');\n\ndesc('Deploys your project');\ntask('deploy', [\n    'deploy:prepare',\n    'deploy:environment',\n    'deploy:vendors',\n    'spiral:encrypt-key',\n    'spiral:configure',\n    'deploy:download-rr',\n    'deploy:publish',\n    'deploy:restart-rr'\n]);\n```\n\n----------------------------------------\n\nTITLE: Using Scoped Enums Locator in PHP\nDESCRIPTION: Shows how to use the ScopedEnumsInterface to find enums within a specific scope in a Spiral application.\nSOURCE: https://github.com/spiral/docs/blob/3.14/docs/en/advanced/tokenizer.md#2025-04-20_snippet_9\n\nLANGUAGE: php\nCODE:\n```\nuse Spiral\\Tokenizer\\ScopedEnumsInterface;\n\nfinal class EnumSearcher\n{\n    public function __construct(\n        private readonly ScopedEnumsInterface $locator\n    ) {\n    }\n\n    public function pinpointEnums(): array\n    {\n        $foundEnums = [];\n\n        foreach ($this->locator->getScopedEnums('scopeName') as $enum) {\n            $foundEnums[] = $enum;\n            // or any other operations you want...\n        }\n\n        return $foundEnums;\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Using BoolValue Filter in PHP\nDESCRIPTION: Demonstrates the BoolValue filter that validates and converts boolean inputs, including string representations.\nSOURCE: https://github.com/spiral/docs/blob/3.14/docs/en/component/data-grid.md#2025-04-20_snippet_37\n\nLANGUAGE: php\nCODE:\n```\nuse Spiral\\DataGrid\\Specification\\Value;\n\n$value = new Value\\BoolValue();\n \n$value->accepts('123');   // false\n$value->accepts('0');     // true\n$value->accepts(['123']); // false\n$value->convert('1');     // true\n$value->convert('false'); // false\n```\n\n----------------------------------------\n\nTITLE: Using Skip Callback with Scheduler\nDESCRIPTION: Example of using the skip callback to conditionally skip a scheduled task.\nSOURCE: https://github.com/spiral/docs/blob/3.14/docs/en/advanced/scheduler.md#2025-04-20_snippet_11\n\nLANGUAGE: php\nCODE:\n```\n$schedule->command('email:digest')\n   ->everyFiveMinutes()\n   ->skip(static fn(HolidaysCalendar $calendar) => $calendar->isHoliday());\n   -> ...;\n```\n\n----------------------------------------\n\nTITLE: Using InputInterface in Controller - PHP\nDESCRIPTION: Example of accessing request attributes using InputInterface in a controller with dot notation support.\nSOURCE: https://github.com/spiral/docs/blob/3.14/docs/en/filters/configuration.md#2025-04-20_snippet_3\n\nLANGUAGE: php\nCODE:\n```\nnamespace App\\Endpoint\\Web;\n\nuse Spiral\\Filters\\InputInterface;\n\nclass HomeController\n{\n    public function index(InputInterface $input): void\n    {\n        dump($input->getValue('query', 'abc')); // ?abc=1\n\n        // dot notation\n        dump($input->getValue('query', 'a.b.c')); // ?a[b][c]=2\n\n        // same as above\n        dump($input->withPrefix('a')->getValue('query', 'b.c')); // ?a[b][c]=2\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Container Bindings Using Constants\nDESCRIPTION: Shows how to use BINDINGS and SINGLETONS constants for declarative container binding definition.\nSOURCE: https://github.com/spiral/docs/blob/3.14/docs/en/framework/bootloaders.md#2025-04-20_snippet_14\n\nLANGUAGE: php\nCODE:\n```\nnamespace App\\Application\\Bootloader;\n\n// ...\nuse Spiral\\Core\\BinderInterface;\nuse App\\Service\\Github\\GithubConfig;\nuse App\\Service\\Github\\ClientInterface;\nuse App\\Service\\Github\\Client;\n\nfinal class GithubClientBootloader extends Bootloader\n{\n    const BINDINGS = [\n        MyInterface::class => MyClass::class\n    ];\n    \n    const SINGLETONS = [\n        ClientInterface::class => [self::class, 'createClient'],\n    ];\n    \n    // See code above ...\n    \n    public function createClient(GithubConfig $config): ClientInterface \n    {\n        return new Client(\n            $config->getAccessToken(),\n            $config->getSecret(),\n        );\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Registering Custom Queue Driver in Configuration\nDESCRIPTION: Shows how to register a custom queue driver in the queue configuration file by defining a new connection with the custom driver class and its parameters.\nSOURCE: https://github.com/spiral/docs/blob/3.14/docs/en/queue/configuration.md#2025-04-20_snippet_8\n\nLANGUAGE: php\nCODE:\n```\n'connections' => [\n    'mail' => [\n        'driver' => \\App\\Infrastructure\\Queue\\RedisQueue::class,\n        'server' => 'redis://localhost:6379',\n        'queueName' => 'mail',\n    ],\n],\n```\n\n----------------------------------------\n\nTITLE: Creating a Filter with Custom Properties\nDESCRIPTION: Command to create a filter with properties from different sources (post, header, IP, query) and different types (string, array, int). Properties are defined using the format name:source:type.\nSOURCE: https://github.com/spiral/docs/blob/3.14/docs/en/basics/scaffolding.md#2025-04-20_snippet_19\n\nLANGUAGE: terminal\nCODE:\n```\nphp app.php create:filter CreateUser -p username:post -p tags:post:array -p ip:ip -p token:header -p status:query:int\n```\n\n----------------------------------------\n\nTITLE: Defining Routes with Specific HTTP Verbs in PHP\nDESCRIPTION: Shows how to create routes that only match specific HTTP verbs using the withVerbs method.\nSOURCE: https://github.com/spiral/docs/blob/3.14/docs/en/http/routing.md#2025-04-20_snippet_36\n\nLANGUAGE: php\nCODE:\n```\nnamespace App\\Bootloader;\n\nuse Psr\\Http\\Message\\ResponseInterface;\nuse Psr\\Http\\Message\\ServerRequestInterface;\nuse Spiral\\Boot\\Bootloader\\Bootloader;\nuse Spiral\\Router\\Route;\nuse Spiral\\Router\\RouterInterface;\n\nclass RoutesBootloader extends Bootloader\n{\n    public function boot(RouterInterface $router): void\n    {\n        $route = new Route('/[<action>]', function (ServerRequestInterface $request, ResponseInterface $response): array {\n            return $request->getAttribute('route')->getMatches();\n        });\n\n        $router->setRoute('get.route',\n            $route->withVerbs('GET')->withDefaults(['action' => 'GET'])\n        );\n\n        $router->setRoute(\n            'post.route',\n            $route->withVerbs('POST', 'PUT')->withDefaults(['action' => 'POST'])\n        );\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring FileHandler for Session Storage in Spiral PHP\nDESCRIPTION: Configuration example for using FileHandler to store sessions in the filesystem. Sessions are stored in the runtime/session folder with a specified lifetime.\nSOURCE: https://github.com/spiral/docs/blob/3.14/docs/en/basics/session.md#2025-04-20_snippet_10\n\nLANGUAGE: php\nCODE:\n```\nuse Spiral\\Core\\Container\\Autowire;\nuse Spiral\\Session\\Handler\\FileHandler;\n\nreturn [\n    'lifetime' => 86400,\n    'cookie' => 'sid',\n    'secure' => false,\n    'handler' => new Autowire(\n        FileHandler::class,\n        [\n            'directory' => directory('runtime') . 'session',\n            'lifetime'  => 86400\n        ]\n    )\n];\n```\n\n----------------------------------------\n\nTITLE: Database Access Using Prototype Pattern in PHP\nDESCRIPTION: Demonstrates database access using PrototypeTrait to access DatabaseProviderInterface and default database instance.\nSOURCE: https://github.com/spiral/docs/blob/3.14/docs/en/basics/orm.md#2025-04-20_snippet_14\n\nLANGUAGE: php\nCODE:\n```\nfinal class UserService \n{\n    use PrototypeTrait;\n    \n    public function store(): void\n    {\n        dump($this->dbal);\n        dump($this->db); // default db\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Using EncrypterInterface in PHP Controller for Spiral Framework\nDESCRIPTION: Example of using the Encrypter component in a controller method, demonstrating encryption and decryption of data.\nSOURCE: https://github.com/spiral/docs/blob/3.14/docs/en/security/encrypter.md#2025-04-20_snippet_3\n\nLANGUAGE: php\nCODE:\n```\nprotected function index(EncrypterInterface $encrypter): void\n{\n    $payload = $encrypter->encrypt(['abc']);\n    dump($payload);\n\n    dump($this->encrypter->decrypt($payload));\n}\n```\n\n----------------------------------------\n\nTITLE: Retrieving Specific Token Storage by Name\nDESCRIPTION: Demonstrates how to obtain a specific token storage instance using the TokenStorageProviderInterface.\nSOURCE: https://github.com/spiral/docs/blob/3.14/docs/en/security/authentication.md#2025-04-20_snippet_5\n\nLANGUAGE: php\nCODE:\n```\n$container->get(\\Spiral\\Auth\\TokenStorageProviderInterface::class)\n    ->getStorage('jwt');\n```\n\n----------------------------------------\n\nTITLE: Registering Exception Reporter Bootloader\nDESCRIPTION: Example of registering a custom exception reporter in a bootloader\nSOURCE: https://github.com/spiral/docs/blob/3.14/docs/en/basics/errors.md#2025-04-20_snippet_13\n\nLANGUAGE: php\nCODE:\n```\nnamespace App\\Application\\Bootloader;\n\nuse Spiral\\Boot\\Bootloader\\Bootloader;\nuse Spiral\\Exceptions\\ExceptionHandler;\nuse App\\Application\\Exception\\Reporter\\CustomReporter;\n\nfinal class ExceptionHandlerBootloader extends Bootloader\n{\n    public function init(ExceptionHandler $handler): void\n    {\n        $handler->addReporter(new CustomReporter());\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Registering Validation Error Handler in Console Configuration for PHP Spiral Framework\nDESCRIPTION: Example of registering the validation error handler interceptor in the console configuration file.\nSOURCE: https://github.com/spiral/docs/blob/3.14/docs/zh-CN/cookbook/console-validation.md#2025-04-20_snippet_9\n\nLANGUAGE: PHP\nCODE:\n```\nreturn [\n    'interceptors' => [\n        App\\Command\\HandleValidationExceptions::class,\n        // ...\n    ],\n];\n```\n\n----------------------------------------\n\nTITLE: Semantic Column Declaration with Link Cell\nDESCRIPTION: Shows how to create a semantic column that combines first and last name fields and renders them as a clickable link. This demonstrates combining multiple data fields into a single presentational column.\nSOURCE: https://github.com/spiral/docs/blob/3.14/docs/en/keeper/components.md#2025-04-20_snippet_2\n\nLANGUAGE: xhtml\nCODE:\n```\n<grid:cell.link name=\"name\" label=\"Name\" url=\"@action('users.edit', ['user' => '{id}'])\" sort=\"true\">\n    {firstName}&nbsp;{lastName}\n</grid:cell.link>\n```\n\n----------------------------------------\n\nTITLE: Using Guard Prototype for Quick Permission Checking in Spiral\nDESCRIPTION: Example of using the guard prototype property for faster permission checking in a Spiral controller.\nSOURCE: https://github.com/spiral/docs/blob/3.14/docs/en/security/rbac.md#2025-04-20_snippet_4\n\nLANGUAGE: php\nCODE:\n```\nnamespace App\\Controller;\n\nuse Spiral\\Prototype\\Traits\\PrototypeTrait;\n\nclass HomeController\n{\n    use PrototypeTrait;\n\n    public function index(): string\n    {\n        if (!$this->guard->allows('home.read')) {\n            return 'can not read';\n        }\n\n        return 'can read';\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Automatic Response Generation from Output Buffer\nDESCRIPTION: Demonstrates how Spiral's PSR-15 handler captures output buffer content when a controller method doesn't return a value. This approach is recommended only for development debugging purposes.\nSOURCE: https://github.com/spiral/docs/blob/3.14/docs/en/http/request-response.md#2025-04-20_snippet_8\n\nLANGUAGE: php\nCODE:\n```\nnamespace App\\Endpoint\\Web;\n\nclass HomeController\n{\n    public function index(): void\n    {\n        echo \"hello world\";\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Fake Image with FileFactory\nDESCRIPTION: Example of creating a fake image file with specified dimensions using FileFactory.\nSOURCE: https://github.com/spiral/docs/blob/3.14/docs/en/testing/http.md#2025-04-20_snippet_11\n\nLANGUAGE: php\nCODE:\n```\n$image = $http->getFileFactory()->createImage(\n    filename: 'avatar.jpg', \n    width: 640, \n    height: 480\n);\n```\n\n----------------------------------------\n\nTITLE: Registering SAPI Bootloader in Spiral Kernel\nDESCRIPTION: PHP code examples showing how to register the SAPI bootloader in the application kernel using either method or constant approach.\nSOURCE: https://github.com/spiral/docs/blob/3.14/docs/en/start/deployment.md#2025-04-20_snippet_3\n\nLANGUAGE: php\nCODE:\n```\npublic function defineBootloaders(): array\n{\n    return [\n        // ...\n        \\Spiral\\Sapi\\Bootloader\\SapiBootloader::class,\n        // ...\n    ];\n}\n```\n\nLANGUAGE: php\nCODE:\n```\nprotected const LOAD = [\n    // ...\n    \\Spiral\\Sapi\\Bootloader\\SapiBootloader::class,\n    // ...\n];\n```\n\n----------------------------------------\n\nTITLE: Using Activity in Workflow Logic\nDESCRIPTION: Implementation of notification sending logic within the workflow\nSOURCE: https://github.com/spiral/docs/blob/3.14/docs/en/temporal/usage.md#2025-04-20_snippet_15\n\nLANGUAGE: php\nCODE:\n```\nif ($status === false) {\n    // Send notification only once when the website goes down\n    if (!$this->isDownNotified) {\n        yield $this->mailActivity->sendFailedNotification($url);\n    }\n\n    $this->isDownNotified = true;\n    // increase downtime\n    $this->downTime += $intervalInMinutes;\n} else {\n    // Send notification only once when the website goes up\n    if (!$this->isRecoveryNotified) {\n        yield $this->mailActivity->sendRecoveryNotification($url, $this->downTime);\n    }\n\n    $this->downTime = 0;\n    $this->isRecoveryNotified = true;\n}\n```\n\n----------------------------------------\n\nTITLE: Using Between Filter with ValueInterface in PHP\nDESCRIPTION: Shows how to use the Between filter with ValueInterface to filter records by price range or date range in Spiral DataGrid.\nSOURCE: https://github.com/spiral/docs/blob/3.14/docs/en/component/data-grid.md#2025-04-20_snippet_32\n\nLANGUAGE: php\nCODE:\n```\nuse Spiral\\DataGrid\\Specification\\Filter;\nuse Spiral\\DataGrid\\Specification\\Value;\n\n// the price should be between 10 and 20\n$fieldBetween  = new Filter\\Between('price', new Value\\NumericValue());\n$fieldBetween = $fieldBetween->withValue([10, '20']);\n\n// the '2020 Apr, 10th' should be between start_date and end_date\n$valueBetween  = new Filter\\ValueBetween(new Value\\DatetimeValue(), ['start_date', 'end_date']);\n$valueBetween = $valueBetween->withValue('2020 Apr, 10th');\n```\n\n----------------------------------------\n\nTITLE: Running Tokenizer Info Command in Spiral Framework\nDESCRIPTION: Command to display the current configuration of the tokenizer including included directories, excluded directories, loaders, and cache status.\nSOURCE: https://github.com/spiral/docs/blob/3.14/docs/en/advanced/tokenizer.md#2025-04-20_snippet_20\n\nLANGUAGE: terminal\nCODE:\n```\nphp app.php tokenizer:info\n```\n\n----------------------------------------\n\nTITLE: RoadRunner Configuration for OpenTelemetry\nDESCRIPTION: RoadRunner YAML configuration to enable OpenTelemetry middleware and set up trace data collection and export.\nSOURCE: https://github.com/spiral/docs/blob/3.14/docs/en/advanced/telemetry.md#2025-04-20_snippet_6\n\nLANGUAGE: yaml\nCODE:\n```\nhttp:\n  address: 0.0.0.0:8080\n  middleware: [ \"otel\" ]\n  otel:\n    insecure: true\n    compress: false\n    client: http\n    exporter: otlp\n    service_name: rr-blog # your app name\n    service_version: 1.0.0 # your app version\n    endpoint: 127.0.0.1:4318 # otel collector server address\n```\n\n----------------------------------------\n\nTITLE: Implementing Refresh Strategy for Database Tests\nDESCRIPTION: PHP class definition for a database test case using the Refresh strategy, which cleans the database after each test.\nSOURCE: https://github.com/spiral/docs/blob/3.14/docs/en/testing/database.md#2025-04-20_snippet_7\n\nLANGUAGE: php\nCODE:\n```\ndeclare(strict_types=1);\n\nnamespace Tests;\n\nuse Spiral\\DatabaseSeeder\\Database\\Traits\\{\n    DatabaseAsserts, Helper, RefreshDatabase, ShowQueries\n};\n\nabstract class DatabaseTestCase extends TestCase\n{\n    use RefreshDatabase,\n        Helper,\n        DatabaseAsserts,\n        ShowQueries;\n}\n```\n\n----------------------------------------\n\nTITLE: Binding Interface with Autowire Parameters in PHP\nDESCRIPTION: Shows how to bind an interface using the Autowire class to provide specific parameters to the implementation.\nSOURCE: https://github.com/spiral/docs/blob/3.14/docs/en/container/configuration.md#2025-04-20_snippet_3\n\nLANGUAGE: php\nCODE:\n```\nuse Spiral\\Core\\BinderInterface;\nuse Spiral\\Core\\Container\\Autowire;\n\npublic function boot(BinderInterface $binder): void\n{\n    $binder->bindSingleton(\n        UserRepositoryInterface::class, \n        new Autowire(CycleUserRepository::class, ['table' => 'users'])\n    );\n}\n```\n\n----------------------------------------\n\nTITLE: Keeper Configuration Structure in PHP\nDESCRIPTION: Example of the Keeper configuration file structure. This configuration defines route prefixes, default routes, login view template, middleware, modules, and interceptors for the Keeper module.\nSOURCE: https://github.com/spiral/docs/blob/3.14/docs/en/keeper/bootloaders.md#2025-04-20_snippet_1\n\nLANGUAGE: php\nCODE:\n```\nreturn [\n   'routePrefix'   => '',\n   'routeDefaults' => ['controller' => '', 'action' => ''],\n   'loginView'     => 'keeper:login',\n   'middleware'    => [],\n   'modules'       => [],\n   'interceptors'  => [],\n];\n```\n\n----------------------------------------\n\nTITLE: Sending a Notification Synchronously in PHP\nDESCRIPTION: This code demonstrates how to send a notification synchronously using the NotifierInterface. The example shows a service that bans a user and sends them a notification about the ban.\nSOURCE: https://github.com/spiral/docs/blob/3.14/docs/en/advanced/notifications.md#2025-04-20_snippet_9\n\nLANGUAGE: php\nCODE:\n```\nuse Symfony\\Component\\Notifier\\NotifierInterface;\n\nfinal class UserBanService {\n\n    public function __construct(\n        private readonly UserRepository $repository\n        private readonly NotifierInterface $notifier\n    ) {}\n\n    public function handle(string $userUuid): void\n    {\n        $user = $this->repository->findByPK($userUuid);\n\n        $this->notifier->send(\n            new UserBannedNotification(subject: 'Your profile banned for activity that violates rules'),\n            $user\n        );\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Initializing Spiral Application with Custom Root Directory in PHP\nDESCRIPTION: Demonstrates how to create a Spiral application instance with a custom root directory. This code is typically used in the application's entry point to set up the initial directory structure.\nSOURCE: https://github.com/spiral/docs/blob/3.14/docs/en/start/structure.md#2025-04-20_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n$app = \\App\\Application\\Kernel::create(\n    directories: ['root' => __DIR__]\n)->run();\n```\n\n----------------------------------------\n\nTITLE: Using Metrics in PHP Application Code\nDESCRIPTION: This PHP snippet demonstrates how to use the MetricsInterface to populate a metric from within the application code.\nSOURCE: https://github.com/spiral/docs/blob/3.14/docs/en/advanced/prometheus-metrics.md#2025-04-20_snippet_4\n\nLANGUAGE: php\nCODE:\n```\nuse Spiral\\RoadRunner\\Metrics\\MetricsInterface; \n\nclass UserRegistrationHandler\n{\n    public function __construct(\n        private readonly MetricsInterface $metrics\n    ) {\n    }\n\n    public function handle(User $user): void\n    {\n        // Store user in database\n\n        $this->metrics->add('registered_users', 1);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Using Logger with Specific Channel\nDESCRIPTION: Examples showing two ways to use a specific logging channel: via factory and via attribute.\nSOURCE: https://github.com/spiral/docs/blob/3.14/docs/en/basics/logging.md#2025-04-20_snippet_4\n\nLANGUAGE: php\nCODE:\n```\nuse Psr\\Log\\LoggerInterface;\nuse Spiral\\Logger\\LogsInterface;\n\nfinal class UserService\n{\n    private readonly LoggerInterface $logger;\n\n    public function __construct(LogsInterface $logs) \n    {\n        $this->logger = $logs->channel('my-channel');\n    }\n\n    public function register(string $email, string $password): void\n    {\n        // Register user ...\n        \n        $this->logger->info('User has been registered', ['email' => $email]);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Named Arguments with Metadata Marker\nDESCRIPTION: Example of a metadata class that uses named constructor parameters with a metadata marker approach. This solution doesn't require direct interface implementation, making it more portable.\nSOURCE: https://github.com/spiral/docs/blob/3.14/docs/en/advanced/attributes.md#2025-04-20_snippet_17\n\nLANGUAGE: php\nCODE:\n```\n/**\n * @Annotation\n * @Spiral\\Attributes\\NamedArgumentConstructor\n */\n#[\\Attribute]\n#[\\Spiral\\Attributes\\NamedArgumentConstructor]\nclass CustomMetadataClass\n{\n    public function __construct($property)\n    {\n        // $property = \"value\"\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Rendered Complete PHP File Output\nDESCRIPTION: Shows the output of a complete PHP file with namespace, use statements, and class implementation.\nSOURCE: https://github.com/spiral/docs/blob/3.14/docs/en/component/reactor.md#2025-04-20_snippet_24\n\nLANGUAGE: php\nCODE:\n```\nnamespace MyNamespace;\n\nuse Countable;\nuse Cycle\\ORM\\Select\\Repository as Repo;\nuse function count;\n\nclass MyClass implements Countable\n{\n    public function count(): int\n    {\n        return 1;\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Named Arguments with Interface Marker\nDESCRIPTION: Example of a metadata class that uses named constructor parameters by implementing the NamedArgumentConstructorAttribute interface. This approach requires the spiral/attributes package.\nSOURCE: https://github.com/spiral/docs/blob/3.14/docs/en/advanced/attributes.md#2025-04-20_snippet_16\n\nLANGUAGE: php\nCODE:\n```\n/** @Annotation */\n#[\\Attribute]\nclass CustomMetadataClass implements \\Spiral\\Attributes\\NamedArgumentConstructorAttribute\n{\n    public function __construct($property)\n    {\n        // $property = \"value\"\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Registering Temporal Interceptors via Configuration\nDESCRIPTION: Shows how to register Temporal interceptors through the configuration file, including class-based, instance-based, and autowiring registration methods.\nSOURCE: https://github.com/spiral/docs/blob/3.14/docs/en/temporal/interceptors.md#2025-04-20_snippet_1\n\nLANGUAGE: php\nCODE:\n```\nuse App\\Temporal\\Interceptors\\ActivityAttributesInterceptor;\n\nreturn [\n  // ...\n  'interceptors' => [\n    ActivityAttributesInterceptor::class,\n  ],\n];\n```\n\n----------------------------------------\n\nTITLE: Centrifugo Broadcasting Configuration\nDESCRIPTION: Environment configuration for enabling Centrifugo as the broadcast driver.\nSOURCE: https://github.com/spiral/docs/blob/3.14/docs/en/websockets/broadcasting.md#2025-04-20_snippet_8\n\nLANGUAGE: dotenv\nCODE:\n```\n# Broadcasting\nBROADCAST_CONNECTION=centrifugo\n```\n\n----------------------------------------\n\nTITLE: Reading Cookies with PSR-7 ServerRequestInterface\nDESCRIPTION: Demonstrates reading cookie values using PSR-7 ServerRequestInterface for standard HTTP request handling.\nSOURCE: https://github.com/spiral/docs/blob/3.14/docs/en/http/cookies.md#2025-04-20_snippet_2\n\nLANGUAGE: php\nCODE:\n```\nuse Psr\\Http\\Message\\ServerRequestInterface;\n\n// ...\n\npublic function index(ServerRequestInterface $request): void\n{\n    dump($request->getCookieParams());\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Custom AST Visitor for Stempler in PHP\nDESCRIPTION: Implements a VisitorInterface to add 'alt' attributes to img tags in Stempler templates. The visitor checks for existing alt attributes and adds a default one if missing.\nSOURCE: https://github.com/spiral/docs/blob/3.14/docs/en/views/stempler.md#2025-04-20_snippet_55\n\nLANGUAGE: php\nCODE:\n```\nuse Spiral\\Stempler\\Node\\HTML;\nuse Spiral\\Stempler\\VisitorContext;\nuse Spiral\\Stempler\\VisitorInterface;\n\nclass AltImageVisitor implements VisitorInterface\n{\n    public function enterNode($node, VisitorContext $ctx)\n    {\n    }\n\n    public function leaveNode($node, VisitorContext $ctx)\n    {\n        if ($node instanceof HTML\\Tag && $node->name === 'img') {\n            $alt = null;\n            foreach ($node->attrs as $attr) {\n                if ($attr->name === 'alt') {\n                    $alt = $attr;\n                    break;\n                }\n            }\n\n            if ($alt === null) {\n                $node->attrs[] = new HTML\\Attr('alt', '\"this is image alt\"');\n            }\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Creating MessageFactory for Message Generation\nDESCRIPTION: Factory class for generating message entities with relationships to threads and users. Includes fake text generation.\nSOURCE: https://github.com/spiral/docs/blob/3.14/docs/en/cookbook/simple-chat.md#2025-04-20_snippet_27\n\nLANGUAGE: php\nCODE:\n```\nnamespace Database\\Factory;\n\nuse App\\Database\\Message;\nuse Spiral\\DatabaseSeeder\\Factory\\AbstractFactory;\n\nfinal class MessageFactory extends AbstractFactory\n{\n    public function makeEntity(array $definition): object\n    {\n        return new Message(\n            $definition['thread'],\n            $definition['user'],\n            $definition['text'],\n        );\n    }\n\n    public function entity(): string\n    {\n        return Message::class;\n    }\n\n    public function definition(): array\n    {\n        return [\n            'thread' => ThreadFactory::new()->make(),\n            'user' => UserFactory::new()->make(),\n            'text' => $this->faker->paragraph,\n        ];\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Non-Reportable Exceptions\nDESCRIPTION: Example of customizing exception reporting by skipping certain exception types.\nSOURCE: https://github.com/spiral/docs/blob/3.14/docs/en/basics/errors.md#2025-04-20_snippet_3\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\ndeclare(strict_types=1);\n\nnamespace App\\Application\\Exception;\n\nuse Spiral\\Exceptions\\ExceptionHandler;\nuse Spiral\\Http\\Exception\\ClientException;\n\nfinal class Handler extends ExceptionHandler\n{\n    /**\n     * @var class-string<\\Throwable>[]\n     */\n    private array $nonReportableExceptions = [\n        ClientException::class,\n        // ...\n    ];\n\n    public function report(\\Throwable $exception): void\n    {\n        foreach ($this->nonReportableExceptions as $nonReportableException) {\n            if ($exception instanceof $nonReportableException) {\n                return;\n            }\n        }\n\n        parent::report($exception);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Enabling AttributesBootloader in Spiral Framework\nDESCRIPTION: Code snippets showing how to enable the AttributesBootloader in a Spiral Framework application using two different methods.\nSOURCE: https://github.com/spiral/docs/blob/3.14/docs/en/advanced/attributes.md#2025-04-20_snippet_1\n\nLANGUAGE: php\nCODE:\n```\npublic function defineBootloaders(): array\n{\n    return [\n        // ...\n        \\Spiral\\Bootloader\\Attributes\\AttributesBootloader::class,\n        // ...\n    ];\n}\n```\n\nLANGUAGE: php\nCODE:\n```\nprotected const LOAD = [\n    // ...\n    \\Spiral\\Bootloader\\Attributes\\AttributesBootloader::class,\n    // ...\n];\n```\n\n----------------------------------------\n\nTITLE: Using ResponseWrapper for Complex Responses\nDESCRIPTION: Shows how to use Spiral's ResponseWrapper utility class that extends ResponseFactoryInterface with additional helper methods. This example creates a file attachment response with an added header.\nSOURCE: https://github.com/spiral/docs/blob/3.14/docs/en/http/request-response.md#2025-04-20_snippet_11\n\nLANGUAGE: php\nCODE:\n```\nnamespace App\\Endpoint\\Web;\n\nuse Psr\\Http\\Message\\ResponseInterface;\nuse Spiral\\Http\\ResponseWrapper;\n\nclass HomeController\n{\n    public function index(ResponseWrapper $response): ResponseInterface\n    {\n        return $response->attachment(\n            __FILE__,\n            'controller.php'\n        )->withAddedHeader('Key', 'value');\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Running Code in a Scoped Container Context in PHP\nDESCRIPTION: Demonstrates how to use the runScoped method of the ContainerScopeInterface to execute code within a temporary scope with specific bindings.\nSOURCE: https://github.com/spiral/docs/blob/3.14/docs/en/container/scopes.md#2025-04-20_snippet_0\n\nLANGUAGE: php\nCODE:\n```\nuse Psr\\Container\\ContainerInterface;\n\n$container->runScoped(\n    closure: function (ContainerInterface $container) {\n        dump($container->get(UserContext::class);\n    },\n    bindings: [UserContext::class => $user,],\n);\n```\n\n----------------------------------------\n\nTITLE: Registering Custom Token Storage in Configuration\nDESCRIPTION: Demonstrates how to register a custom token storage through the auth.php configuration file.\nSOURCE: https://github.com/spiral/docs/blob/3.14/docs/en/security/authentication.md#2025-04-20_snippet_13\n\nLANGUAGE: php\nCODE:\n```\nuse Spiral\\Core\\Container\\Autowire;\n\nreturn [\n    // ...\n    'storages' => [\n         'session' => \\Spiral\\Auth\\Session\\TokenStorage::class,\n         'jwt' => new Autowire(\\App\\JwtTokenStorage::class, [\n             'secret' => 'secret', \n             'algorithm' => 'HS256',\n             'expiresAt' => '+30 days',\n         ]),\n         // ...\n    ]\n]\n```\n\n----------------------------------------\n\nTITLE: Creating a Filter with Validation Rules\nDESCRIPTION: Command to create a filter with validation rules using the -s flag. This generates a filter class that implements HasFilterDefinition interface for adding validation rules.\nSOURCE: https://github.com/spiral/docs/blob/3.14/docs/en/basics/scaffolding.md#2025-04-20_snippet_21\n\nLANGUAGE: terminal\nCODE:\n```\nphp app.php create:filter CreateUser -p ... -s\n```\n\n----------------------------------------\n\nTITLE: Implementing Boot Method in GithubClientBootloader\nDESCRIPTION: Demonstrates the boot method implementation in a bootloader that runs after all init methods have completed.\nSOURCE: https://github.com/spiral/docs/blob/3.14/docs/en/framework/bootloaders.md#2025-04-20_snippet_11\n\nLANGUAGE: php\nCODE:\n```\nnamespace App\\Application\\Bootloader;\n\n// ...\nuse App\\Service\\Github\\GithubConfig;\n\nfinal class GithubClientBootloader extends Bootloader\n{\n    // See code above ...\n    \n    public function boot(GithubConfig $config): void \n    {\n        $token = $config->getAccessToken();\n        // ...\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Console Option Attribute in PHP\nDESCRIPTION: Creates a custom Option attribute for mapping console command options to filter properties.\nSOURCE: https://github.com/spiral/docs/blob/3.14/docs/en/cookbook/console-validation.md#2025-04-20_snippet_4\n\nLANGUAGE: php\nCODE:\n```\nnamespace App\\Application\\Console\\Attribute;\n\nuse Spiral\\Attributes\\NamedArgumentConstructor;\nuse Spiral\\Filters\\Attribute\\Input\\AbstractInput;\nuse Spiral\\Filters\\InputInterface;\n\n#[\\Attribute(\\Attribute::TARGET_PROPERTY), NamedArgumentConstructor]\nfinal class Option extends AbstractInput\n{\n    public function __construct(\n        public readonly ?string $key = null,\n    ) {\n    }\n\n    public function getValue(InputInterface $input, \\ReflectionProperty $property): mixed\n    {\n        return $input->getValue('option', $this->getKey($property));\n    }\n\n    public function getSchema(\\ReflectionProperty $property): string\n    {\n        return 'option:' . $this->getKey($property);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing String Length Validation in PHP using Spiral Framework\nDESCRIPTION: This example demonstrates how to create a filter class that validates the length of a 'name' field using Spiral Framework's validation system. It uses the 'string::length' rule to ensure the name is exactly 5 characters long.\nSOURCE: https://github.com/spiral/docs/blob/3.14/docs/en/validation/spiral.md#2025-04-20_snippet_17\n\nLANGUAGE: php\nCODE:\n```\nnamespace App\\Filter;\n\nuse Spiral\\Filters\\Attribute\\Input\\Post;\nuse Spiral\\Filters\\Model\\Filter;\nuse Spiral\\Filters\\Model\\FilterDefinitionInterface;\nuse Spiral\\Filters\\Model\\HasFilterDefinition;\nuse Spiral\\Validator\\FilterDefinition;\n\nclass MyFilter extends Filter implements HasFilterDefinition\n{\n    #[Post]\n    public string $name;\n    \n    public function filterDefinition(): FilterDefinitionInterface\n    {\n        return new FilterDefinition([\n            'name' => ['required', ['string::length', 5]]\n        ]);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Asserting Email Recipients with Closure\nDESCRIPTION: Demonstrates how to verify specific email recipients using a closure with assertSent(). Checks if an email was sent to a particular address.\nSOURCE: https://github.com/spiral/docs/blob/3.14/docs/en/testing/mail.md#2025-04-20_snippet_1\n\nLANGUAGE: php\nCODE:\n```\nuse Spiral\\Mailer\\Message;\n\n$this->mailer->assertSent(\n    WelcomeMessage::class,\n    static fn (Message $message) => \\in_array('user@site.com', $message->getTo())\n);\n```\n\n----------------------------------------\n\nTITLE: Creating a Basic Filter with FilterInterface\nDESCRIPTION: Example of creating a simple filter that implements FilterInterface to map POST data to filter properties.\nSOURCE: https://github.com/spiral/docs/blob/3.14/docs/en/filters/filter.md#2025-04-20_snippet_3\n\nLANGUAGE: php\nCODE:\n```\nnamespace App\\Endpoint\\Web\\Filter;\n\nuse Spiral\\Filters\\Model\\FilterInterface;\nuse Spiral\\Filters\\Attribute\\Input\\Post;\n\nclass MyFilter implements FilterInterface\n{\n    #[Post(key: 'text')]\n    public string $text;\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Temporal in PHP Application\nDESCRIPTION: PHP configuration file example for setting up Temporal client and worker options in a Spiral application.\nSOURCE: https://github.com/spiral/docs/blob/3.14/docs/en/temporal/configuration.md#2025-04-20_snippet_5\n\nLANGUAGE: php\nCODE:\n```\nuse Spiral\\TemporalBridge\\Config\\ConnectionConfig;\nuse Spiral\\TemporalBridge\\Config\\ClientConfig;\nuse Temporal\\Worker\\WorkerFactoryInterface;\nuse Temporal\\Worker\\WorkerOptions;\n\nreturn [\n    'client' => env('TEMPORAL_CONNECTION', 'default'),\n    'clients' => [\n        'default' => new ClientConfig(\n            new ConnectionConfig(\n                address: env('TEMPORAL_ADDRESS', 'localhost:7233'),\n            ),\n        ),\n    ],\n    'defaultWorker' => WorkerFactoryInterface::DEFAULT_TASK_QUEUE,\n    'workers' => [\n        'workerName' => WorkerOptions::new(),\n    ],\n];\n```\n\n----------------------------------------\n\nTITLE: Publishing Events Using BroadcastInterface\nDESCRIPTION: Example of publishing events using the BroadcastInterface in a service class\nSOURCE: https://github.com/spiral/docs/blob/3.14/docs/zh-CN/websockets/broadcasting.md#2025-04-20_snippet_3\n\nLANGUAGE: php\nCODE:\n```\nuse Spiral\\Broadcasting\\BroadcastInterface;\nuse Spiral\\Serializer\\SerializerInterface;\n\nclass OrderService\n{\n    public function __construct(\n        private readonly BroadcastInterface $broadcast,\n        private readonly SerializerInterface $serializer\n    ) {\n    }\n\n    public function purchase(string $orderUuid): void\n    {\n        // ...\n\n        $this->broadcast->publish(\n            \"order.{$orderUuid}\",\n            $this->serializer->serialize(['status' => 'purchased'])\n        );\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Round-Robin Email Transport\nDESCRIPTION: Example of setting up a round-robin email channel that alternates between multiple SMTP transports. This helps distribute the load across different email servers or accounts.\nSOURCE: https://github.com/spiral/docs/blob/3.14/docs/en/advanced/notifications.md#2025-04-20_snippet_5\n\nLANGUAGE: php\nCODE:\n```\n'roundrobin_email' => [\n  'type' => 'email',\n  'transport' => ['smtp', 'smtp_1'],\n],\n```\n\n----------------------------------------\n\nTITLE: Creating HTTP Controller with Prototype Trait\nDESCRIPTION: Shows how to create an HTTP controller with the PrototypeTrait using the -p flag. Generates a controller class with necessary imports and trait usage.\nSOURCE: https://github.com/spiral/docs/blob/3.14/docs/en/basics/scaffolding.md#2025-04-20_snippet_12\n\nLANGUAGE: terminal\nCODE:\n```\nphp app.php create:controller User -p\n```\n\nLANGUAGE: php\nCODE:\n```\ndeclare(strict_types=1);\n\nnamespace App\\Endpoint\\Web;\n\nuse Psr\\Http\\Message\\ResponseInterface;\nuse Spiral\\Prototype\\Traits\\PrototypeTrait;\nuse Spiral\\Router\\Annotation\\Route;\n\nclass UserController\n{\n    use PrototypeTrait;\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Console Command Structure in PHP\nDESCRIPTION: Example of a console command class that accepts username and email as arguments, and admin and send-verification-email as options.\nSOURCE: https://github.com/spiral/docs/blob/3.14/docs/zh-CN/cookbook/console-validation.md#2025-04-20_snippet_0\n\nLANGUAGE: PHP\nCODE:\n```\nnamespace App\\Command;\n\nuse Spiral\\Console\\Command;\n\nfinal class UserRegister extends Command\n{\n    protected const SIGNATURE = <<<CMD\n        user:register\n        {username : 用户名}\n        {email : 用户邮箱地址}\n        {--a|admin : 标记为管理员}\n        {--s|send-verification-email : 向用户发送验证邮件}\nCMD;\n\n    public function perform(): int\n    {\n        // ...\n\n        return self::SUCCESS;\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Notification Activity via Console Command\nDESCRIPTION: Console command to generate a new activity class for sending notifications\nSOURCE: https://github.com/spiral/docs/blob/3.14/docs/en/temporal/usage.md#2025-04-20_snippet_9\n\nLANGUAGE: terminal\nCODE:\n```\nphp app.php create:activity SendNotification --method=sendFailedNotification:void --method=sendRecoveryNotification:void\n```\n\n----------------------------------------\n\nTITLE: Implementing All Filter in PHP\nDESCRIPTION: Demonstrates usage of All filter for AND operations with both fixed values and ValueInterface.\nSOURCE: https://github.com/spiral/docs/blob/3.14/docs/en/component/data-grid.md#2025-04-20_snippet_22\n\nLANGUAGE: php\nCODE:\n```\nuse Spiral\\DataGrid\\Specification\\Filter;\n\n// the price should be equal to 2 and the quantity should be greater than 5\n$all = new Filter\\All(\n    new Filter\\Equals('price', 2),\n    new Filter\\Gt('quantity', 5)\n);\n```\n\nLANGUAGE: php\nCODE:\n```\nuse Spiral\\DataGrid\\Specification\\Filter;\nuse Spiral\\DataGrid\\Specification\\Value;\n\n$all = new Filter\\All(\n    new Filter\\Equals('price', new Value\\NumericValue()),\n    new Filter\\Gt('quantity', new Value\\IntValue()),\n    new Filter\\Lt('option_id', 4)\n);\n\n// the price should be equal to 5, the quantity should be greater than 5 and the option_id less than 4\n$all = $all->withValue(5);\n```\n\n----------------------------------------\n\nTITLE: Form Select Examples in XHTML\nDESCRIPTION: Examples demonstrating both single and multiple select dropdown implementations with placeholder and predefined values.\nSOURCE: https://github.com/spiral/docs/blob/3.14/docs/en/keeper/components.md#2025-04-20_snippet_20\n\nLANGUAGE: xhtml\nCODE:\n```\n<form:select\n        name=\"single\"\n        label=\"Select Something\"\n        values=\"{{ [1 => 'First', 2 => 'Second', 3 => 'Third'] }}\"\n        value=\"2\"\n        placeholder=\"Select Value\"\n/>\n\n<form:select\nmultiple\nname=\"multi[]\"\nlabel=\"Select Something\"\nvalues=\"{{ [1 => 'First', 2 => 'Second', 3 => 'Third'] }}\"\nvalue=\"{{[1,2]}}\"\nplaceholder=\"Select Value\"\n/>\n```\n\n----------------------------------------\n\nTITLE: Implementing Root-Level Composite Filters\nDESCRIPTION: Demonstrates how to create a composite filter that gets data from the root level of the request using the dot prefix.\nSOURCE: https://github.com/spiral/docs/blob/3.14/docs/en/filters/composite.md#2025-04-20_snippet_6\n\nLANGUAGE: php\nCODE:\n```\nclass MultipleAddressesFilter extends Filter implements HasFilterDefinition\n{\n    #[NestedFilter(class: AddressFilter::class, prefix: '.')]\n    public AddressFilter $address;\n    \n    // ...\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Queue Aliases\nDESCRIPTION: Example of configuring queue aliases to access the queue system in different ways using separate connections related to a single physical queue.\nSOURCE: https://github.com/spiral/docs/blob/3.14/docs/en/queue/configuration.md#2025-04-20_snippet_3\n\nLANGUAGE: php\nCODE:\n```\nreturn [\n    'aliases' => [\n        'mailQueue' => 'roadrunner',\n        'ratingQueue' => 'sync',\n    ],\n];\n```\n\n----------------------------------------\n\nTITLE: Adding Custom Locale Directory via Bootloader\nDESCRIPTION: Example of adding a custom locale directory using the I18nBootloader\nSOURCE: https://github.com/spiral/docs/blob/3.14/docs/en/advanced/i18n.md#2025-04-20_snippet_6\n\nLANGUAGE: php\nCODE:\n```\nuse Spiral\\Boot\\Bootloader\\Bootloader;\nuse Spiral\\Bootloader\\I18nBootloader;\n\nfinal class AppBootloader extends Bootloader\n{\n    public function init(I18nBootloader $i18n): void\n    {\n        $i18n->addDirectory('some/directory');\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Sending JSON GET Request with FakeHttp in PHP\nDESCRIPTION: This code demonstrates how to send a GET request with JSON headers using the getJson method of FakeHttp class in Spiral.\nSOURCE: https://github.com/spiral/docs/blob/3.14/docs/en/testing/http.md#2025-04-20_snippet_2\n\nLANGUAGE: php\nCODE:\n```\n$http = $this->fakeHttp();\n$response = $http->getJson(\n    uri: '/users',\n    query: ['sort' => 'desc'],\n    headers: ['Content-type' => 'application/json'],\n    cookies: ['token' => 'xxx-xxxx'],\n);\n```\n\n----------------------------------------\n\nTITLE: Using BootloadConfig as an Attribute\nDESCRIPTION: Example of using BootloadConfig as an attribute to control bootloader behavior at the class level.\nSOURCE: https://github.com/spiral/docs/blob/3.14/docs/en/framework/bootloaders.md#2025-04-20_snippet_6\n\nLANGUAGE: php\nCODE:\n```\nuse Spiral\\Boot\\Attribute\\BootloadConfig;\nuse Spiral\\Boot\\Bootloader\\Bootloader;\n\n#[BootloadConfig(allowEnv: ['APP_ENV' => 'local'])]\nfinal class SomeBootloader extends Bootloader\n{\n}\n```\n\n----------------------------------------\n\nTITLE: Database Access Using Method Injections in PHP\nDESCRIPTION: Shows how to access databases using IoC injections with DatabaseInterface based on database names and aliases.\nSOURCE: https://github.com/spiral/docs/blob/3.14/docs/en/basics/orm.md#2025-04-20_snippet_13\n\nLANGUAGE: php\nCODE:\n```\nuse Cycle\\Database\\DatabaseInterface;\n\npublic function store(\n    DatabaseInterface $database, \n    DatabaseInterface $primary,\n    DatabaseInterface $slave\n): void {\n    // Database is an alias for \"primary\"\n    dump($database === $primary);\n\n    dump($primary);\n    dump($slave);\n}\n```\n\n----------------------------------------\n\nTITLE: Installing Notifications Package with Composer\nDESCRIPTION: Command to install the spiral-packages/notifications package using Composer. This package provides notification functionality to Spiral applications.\nSOURCE: https://github.com/spiral/docs/blob/3.14/docs/en/advanced/notifications.md#2025-04-20_snippet_0\n\nLANGUAGE: terminal\nCODE:\n```\ncomposer require spiral-packages/notifications\n```\n\n----------------------------------------\n\nTITLE: Queue Registry Bootloader Configuration\nDESCRIPTION: Example of registering a job handler through a bootloader using QueueRegistry.\nSOURCE: https://github.com/spiral/docs/blob/3.14/docs/en/queue/jobs.md#2025-04-20_snippet_12\n\nLANGUAGE: php\nCODE:\n```\nuse Spiral\\Boot\\Bootloader\\Bootloader;\n\nclass MyBootloader extends Bootloader\n{\n    public function boot(\\Spiral\\Queue\\QueueRegistry $registry): void\n    {\n        $registry->setHandler('sample::job', \\App\\Endpoint\\Job\\SampleJob::class);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Creating User Registration Filter in PHP\nDESCRIPTION: Defines a UserRegisterFilter class extending Filter to validate and map console input for user registration.\nSOURCE: https://github.com/spiral/docs/blob/3.14/docs/en/cookbook/console-validation.md#2025-04-20_snippet_5\n\nLANGUAGE: php\nCODE:\n```\nnamespace App\\Command;\n\nuse App\\Application\\Console\\Attribute\\Argument;\nuse App\\Application\\Console\\Attribute\\Option;\nuse Spiral\\Filters\\Model\\Filter;\n\nclass UserRegisterFilter extends Filter\n{\n    #[Argument]\n    public string $username;\n\n    #[Argument]\n    public string $email;\n\n    #[Option]\n    public bool $admin = false;\n\n    #[Option(key: 'send-verification-email')]\n    public bool $sendVerificationEmail = false;\n}\n```\n\n----------------------------------------\n\nTITLE: Using CloudFront Resolver with Different Expiration Formats in PHP\nDESCRIPTION: Demonstrates various ways to specify expiration time when using the CloudFront Resolver.\nSOURCE: https://github.com/spiral/docs/blob/3.14/docs/en/advanced/storage.md#2025-04-20_snippet_32\n\nLANGUAGE: php\nCODE:\n```\n$file = 'path/to/file.txt';\n\n// DateInterval object\n$url = $cloudfront->resolve($file, new DateInterval('PT30S'));\n\n// Instance of DateTimeInterface\n$url = $cloudfront->resolve($file, new DateTime('+30 sec'));\n\n// Duration in string format\n$url = $cloudfront->resolve($file, 'PT30S');\n\n// Duration in int format\n$url = $cloudfront->resolve($file, 30);\n```\n\n----------------------------------------\n\nTITLE: Configuring PHPUnit Environment Variables in Spiral\nDESCRIPTION: Example PHPUnit configuration file showing environment variable setup for testing, including cache and queue settings.\nSOURCE: https://github.com/spiral/docs/blob/3.14/docs/en/testing/start.md#2025-04-20_snippet_0\n\nLANGUAGE: xml\nCODE:\n```\n<phpunit>\n    // ...\n    <php>\n        <env name=\"APP_ENV\" value=\"testing\"/>\n        <env name=\"QUEUE_CONNECTION\" value=\"sync\"/>\n        <env name=\"MONOLOG_DEFAULT_CHANNEL\" value=\"stderr\"/>\n        <env name=\"CACHE_STORAGE\" value=\"array\"/>\n        <env name=\"TOKENIZER_CACHE_TARGETS\" value=\"true\" />\n        <env name=\"CYCLE_SCHEMA_CACHE\" value=\"true\" />\n        // ...\n    </php>\n</phpunit>\n```\n\n----------------------------------------\n\nTITLE: Activating HTTP Components Using Constant in Kernel.php\nDESCRIPTION: Configuration for activating HTTP components by defining bootloaders using the constant approach in the application kernel. Includes the Nyholm PSR-7 implementation, HTTP core, and Router bootloaders.\nSOURCE: https://github.com/spiral/docs/blob/3.14/docs/en/http/configuration.md#2025-04-20_snippet_2\n\nLANGUAGE: php\nCODE:\n```\nprotected const LOAD = [\n    // ...\n    // Fast PSR-7 implementation\n    \\Spiral\\Nyholm\\Bootloader\\NyholmBootloader::class,\n\n    // HTTP core\n    \\Spiral\\Bootloader\\Http\\HttpBootloader::class,\n\n    // PSR-15 handler      \n    \\Spiral\\Bootloader\\Http\\RouterBootloader::class,\n    // ...\n];\n```\n\n----------------------------------------\n\nTITLE: Defining a Route with Pre-defined Options in PHP\nDESCRIPTION: Shows how to create a route with pre-defined options for a parameter, limiting the 'action' to either 'login' or 'logout'.\nSOURCE: https://github.com/spiral/docs/blob/3.14/docs/en/http/routing.md#2025-04-20_snippet_33\n\nLANGUAGE: php\nCODE:\n```\n$router->setRoute('home', new Route(\n    '/do/<action:login|logout>',\n    function (ServerRequestInterface $request, ResponseInterface $response): array {\n        return $request->getAttribute('route')->getMatches();\n    }\n));\n```\n\n----------------------------------------\n\nTITLE: Configuring CloudFront URI Resolver in Spiral\nDESCRIPTION: Configuration example for a CloudFront URI Resolver in Spiral Framework's distribution configuration file.\nSOURCE: https://github.com/spiral/docs/blob/3.14/docs/en/advanced/storage.md#2025-04-20_snippet_30\n\nLANGUAGE: php\nCODE:\n```\nreturn [\n    // ...\n    'resolvers' => [\n        // ...\n        'cloudfront' => [\n            'type' => 'cloudfront',\n            'key' => env('AWS_CF_KEY'),\n            'private' => env('AWS_CF_PRIVATE_KEY'),\n            'domain' => env('AWS_CF_DOMAIN'),\n            'prefix' => env('AWS_CF_PREFIX'),\n        ],\n    ]\n];\n```\n\n----------------------------------------\n\nTITLE: Listing Scheduled Jobs Command in Spiral\nDESCRIPTION: Console command to display all scheduled jobs in the application. This command provides an overview of all configured cron jobs.\nSOURCE: https://github.com/spiral/docs/blob/3.14/docs/en/advanced/scheduler.md#2025-04-20_snippet_16\n\nLANGUAGE: terminal\nCODE:\n```\nphp app.php schedule:list\n```\n\n----------------------------------------\n\nTITLE: Implementing Init Method in GithubClientBootloader\nDESCRIPTION: Example showing how to implement the init method in a bootloader to set default configuration values using environment variables.\nSOURCE: https://github.com/spiral/docs/blob/3.14/docs/en/framework/bootloaders.md#2025-04-20_snippet_10\n\nLANGUAGE: php\nCODE:\n```\nnamespace App\\Application\\Bootloader;\n\nuse Spiral\\Boot\\Bootloader\\Bootloader;\nuse Spiral\\Boot\\EnvironmentInterface;\nuse Spiral\\Config\\ConfiguratorInterface;\nuse App\\Service\\Github\\GithubConfig;\n\nfinal class GithubClientBootloader extends Bootloader\n{\n    public function __construct(\n        private readonly ConfiguratorInterface $config\n    ) {\n    }\n\n    public function init(EnvironmentInterface $env): void \n    {\n        $this->config->setDefaults(\n            GithubConfig::CONFIG,\n            [\n                'access_token' => $env->get('GITHUB_ACCESS_TOKEN'),\n                'secret' => $env->get('GITHUB_SECRET'),\n            ]\n        );\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Queue Pipelines in PHP\nDESCRIPTION: PHP configuration for defining queue pipelines in Spiral Framework.\nSOURCE: https://github.com/spiral/docs/blob/3.14/docs/en/cookbook/simple-queue-system.md#2025-04-20_snippet_3\n\nLANGUAGE: php\nCODE:\n```\nuse Spiral\\RoadRunner\\Jobs\\Queue\\AMQPCreateInfo;\n\nreturn [\n    'default' => env('QUEUE_CONNECTION', 'roadrunner'),\n\n    'pipelines' => [\n         'default' => [\n             'connector' => new AMQPCreateInfo(\n                  name: 'default',\n                  priority: 100,\n                  queue: 'default',\n             ),\n             // Do not consume jobs for this pipeline on startup\n             'consume' => false,\n         ],\n    ],\n    \n    'connections' => [\n        'roadrunner' => [\n            'driver' => 'roadrunner',\n            'pipeline' => 'default',\n        ],\n    ],\n];\n```\n\n----------------------------------------\n\nTITLE: Defining Thread Entity in Spiral ORM\nDESCRIPTION: This code defines the Thread entity using Cycle ORM annotations. It includes a primary key, a name field, and implements JsonSerializable for easy JSON conversion.\nSOURCE: https://github.com/spiral/docs/blob/3.14/docs/en/cookbook/simple-chat.md#2025-04-20_snippet_14\n\nLANGUAGE: php\nCODE:\n```\nnamespace App\\Database;\n\nuse App\\Repository\\ThreadRepository;\nuse Cycle\\Annotated\\Annotation\\Column;\nuse Cycle\\Annotated\\Annotation\\Entity;\n\n#[Entity(repository: ThreadRepository::class)]\nclass Thread implements \\JsonSerializable\n{\n    #[Column(type: 'primary')]\n    private int $id;\n\n    public function __construct(\n        #[Column(type: \"string\")]\n        private string $name,\n    ) {\n    }\n\n    public function getName(): string\n    {\n        return $this->name;\n    }\n\n    public function jsonSerialize(): array\n    {\n        return [\n            'id' => $this->id,\n            'name' => $this->name,\n        ];\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Registering Scheduler Bootloader Using Method\nDESCRIPTION: Code snippet showing how to register the Scheduler Bootloader in the kernel using the defineBootloaders method.\nSOURCE: https://github.com/spiral/docs/blob/3.14/docs/en/advanced/scheduler.md#2025-04-20_snippet_1\n\nLANGUAGE: php\nCODE:\n```\npublic function defineBootloaders(): array\n{\n    return [\n        // ...\n        \\Spiral\\Scheduler\\Bootloader\\SchedulerBootloader::class,\n        // ...\n    ];\n}\n```\n\n----------------------------------------\n\nTITLE: Using Distribution Manager in Spiral Controller\nDESCRIPTION: Demonstrates how to use the Distribution Manager in a Spiral Framework controller to resolve an image URL.\nSOURCE: https://github.com/spiral/docs/blob/3.14/docs/en/advanced/storage.md#2025-04-20_snippet_26\n\nLANGUAGE: php\nCODE:\n```\nuse Spiral\\Distribution\\DistributionInterface;\n\nclass FilesController\n{\n    public function showImage(DistributionInterface $dist): string\n    {\n        $resolver = $dist->resolver('local');\n\n        return (string)$resolver->resolve('example/image.jpg');\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Basic Lock Usage in Spiral\nDESCRIPTION: Demonstrates the basic usage of locks in a Spiral application, showing how to acquire and release a lock for a resource.\nSOURCE: https://github.com/spiral/docs/blob/3.14/docs/en/advanced/locks.md#2025-04-20_snippet_2\n\nLANGUAGE: php\nCODE:\n```\n$locks = $container->get(\\RoadRunner\\Lock\\LockInterface::class);\n$id = $lock->lock('pdf:create');\n\n// Your logic for creating a PDF file\n\n$lock->release('pdf:create', $id);\n```\n\n----------------------------------------\n\nTITLE: Configuring Event Processors in Spiral Framework\nDESCRIPTION: Configuration file that registers custom event processors in the Spiral application.\nSOURCE: https://github.com/spiral/docs/blob/3.14/docs/en/advanced/events.md#2025-04-20_snippet_17\n\nLANGUAGE: php\nCODE:\n```\nuse App\\Processor\\MyCustomProcessor;\n\nreturn [\n    // ...\n    'processors' => [\n        MyCustomProcessor::class,\n        // ...\n    ],\n    // ...\n];\n```\n\n----------------------------------------\n\nTITLE: Implementing Like Filter in PHP\nDESCRIPTION: Demonstrates usage of Like filter for pattern matching operations.\nSOURCE: https://github.com/spiral/docs/blob/3.14/docs/en/component/data-grid.md#2025-04-20_snippet_27\n\nLANGUAGE: php\nCODE:\n```\nuse Spiral\\DataGrid\\Specification\\Filter;\n\n$likeFull = new Filter\\Like('name', 'Tony', '%%%s%%'); // the name should be like '%Tony%'\n$likeEnding = new Filter\\Like('name', 'Tony', '%s%%'); // the name should be like 'Tony%'\n```\n\nLANGUAGE: php\nCODE:\n```\nuse Spiral\\DataGrid\\Specification\\Filter;\nuse Spiral\\DataGrid\\Specification\\Value;\n\n// the name should be like '%Tony%'\n$like = new Filter\\Like('name', new Value\\StringValue());\n$like = $like->withValue('Tony');\n```\n\n----------------------------------------\n\nTITLE: Asserting Jobs Were Pushed to Specific Queue in Spiral\nDESCRIPTION: This code demonstrates how to use the assertPushedOnQueue method to verify if a job was pushed to a specific queue in Spiral Framework.\nSOURCE: https://github.com/spiral/docs/blob/3.14/docs/en/testing/queue.md#2025-04-20_snippet_2\n\nLANGUAGE: php\nCODE:\n```\n$this->queue->assertPushedOnQueue('mail', 'mail.job', function (array $data) {\n    return $data['handler'] instanceof \\Spiral\\SendIt\\MailJob\n        && $data['payload']['foo'] === 'bar';\n});\n```\n\n----------------------------------------\n\nTITLE: Locating Interfaces in PHP using InterfacesInterface\nDESCRIPTION: Illustrates how to use InterfacesInterface to find interfaces in the codebase. It iterates through all found interfaces and dumps their file names.\nSOURCE: https://github.com/spiral/docs/blob/3.14/docs/en/advanced/tokenizer.md#2025-04-20_snippet_2\n\nLANGUAGE: php\nCODE:\n```\nuse Spiral\\Tokenizer\\InterfacesInterface;\n\npublic function findEnums(InterfacesInterface $interfaces): void\n{\n    foreach ($interfaces->getInterfaces() as $interface) {\n        dump($interface->getFileName());\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Profiler Environment Variables\nDESCRIPTION: Environment variables configuration for connecting profiler to Buggregator server.\nSOURCE: https://github.com/spiral/docs/blob/3.14/docs/en/basics/debug.md#2025-04-20_snippet_14\n\nLANGUAGE: dotenv\nCODE:\n```\nPROFILER_ENDPOINT=http://127.0.0.1:8000/api/profiler/store\nPROFILER_APP_NAME=My super app\n```\n\n----------------------------------------\n\nTITLE: Configuring Keeper Bootloader with Sitemap\nDESCRIPTION: Demonstrates how to set up the KeeperBootloader with sitemap functionality by including required bootloader dependencies.\nSOURCE: https://github.com/spiral/docs/blob/3.14/docs/en/keeper/sitemap.md#2025-04-20_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\ndeclare(strict_types=1);\n\nuse Spiral\\Keeper\\Bootloader;\n\nclass KeeperBootloader extends Bootloader\\KeeperBootloader\n{\n    protected const LOAD = [\n        Bootloader\\SitemapBootloader::class,\n        NavigationBootloader::class,\n    ];\n}\n```\n\n----------------------------------------\n\nTITLE: Installer Output for Spiral Framework Setup\nDESCRIPTION: Example output from the Spiral Framework installer, showing the creation of the project and the start of the interactive configuration process.\nSOURCE: https://github.com/spiral/docs/blob/3.14/docs/en/start/installation.md#2025-04-20_snippet_1\n\nLANGUAGE: output\nCODE:\n```\n[32mCreating a \"spiral/app\" project at \"./my-app\"[39m\n[32mInstalling spiral/app (1.1.1)[39m\n  - Installing [32mspiral/app[39m ([33m1.1.1[39m): Extracting archive\n[32mCreated project in /var/www/my-app[39m\n> Installer\\Installer::install\n\n  [30;46mWhich application preset do you want to install?[39;49m\n  [[33m1[39m] Web\n  [[33m2[39m] Cli\n  [[33m3[39m] gRPC\n  Make your selection [33m(1)[39m:\n```\n\n----------------------------------------\n\nTITLE: Directory Configuration via Bootloader\nDESCRIPTION: Demonstrates setting up directory paths using a Bootloader class. Configures upload directory relative to root.\nSOURCE: https://github.com/spiral/docs/blob/3.14/docs/en/basics/files.md#2025-04-20_snippet_1\n\nLANGUAGE: php\nCODE:\n```\nnamespace App\\Application\\Bootloader;\n\nuse Spiral\\Boot\\Bootloader\\Bootloader;\nuse Spiral\\Boot\\DirectoriesInterface;\n\nfinal class AppBootloader extends Bootloader\n{\n    public function boot(DirectoriesInterface $dirs): void\n    {\n        $dirs->set(\n            'uploadDir',\n            $dirs->get('root') . '/upload'\n        );\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Merge Reader for Combined Metadata\nDESCRIPTION: Example of using MergeReader to combine metadata from both annotation and attribute syntax. This is useful when working with libraries that support different syntax styles.\nSOURCE: https://github.com/spiral/docs/blob/3.14/docs/en/advanced/attributes.md#2025-04-20_snippet_22\n\nLANGUAGE: php\nCODE:\n```\n/** @DoctrineAnnotation */\n#[NativeAttribute]\nclass ExampleClass {}\n\n$reader = new \\Spiral\\Attributes\\Composite\\MergeReader([\n    new \\Spiral\\Attributes\\AnnotationReader(),\n    new \\Spiral\\Attributes\\AttributeReader(),\n]);\n\n$metadata = $reader->getClassMetadata(new ReflectionClass(ExampleClass::class));\n// returns iterable { DoctrineAnnotation, NativeAttribute }\n```\n\n----------------------------------------\n\nTITLE: Defining Bootloaders in Composer.json\nDESCRIPTION: Example of how to define bootloaders and tokenizer directories in a package's composer.json file to enable automatic discovery by the Discoverer package.\nSOURCE: https://github.com/spiral/docs/blob/3.14/docs/en/component/discoverer.md#2025-04-20_snippet_3\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"extra\": {\n    \"spiral\": {\n      \"bootloaders\": [\n        \"Spiral\\\\DotEnv\\\\Bootloader\\\\MonologBootloader\"\n      ],\n      \"directories\": [\n        \"src/Entities\"\n      ]\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring FiltersBootloader using constant in Spiral Framework\nDESCRIPTION: PHP code snippet demonstrating an alternative way to activate the FiltersBootloader in the Spiral Framework kernel using a constant. This method achieves the same result as the previous snippet.\nSOURCE: https://github.com/spiral/docs/blob/3.14/docs/en/filters/bridge.md#2025-04-20_snippet_2\n\nLANGUAGE: php\nCODE:\n```\nprotected const LOAD = [\n    // ...\n    \\Spiral\\Filters\\Bootloader\\FiltersBootloader::class,\n    // ...\n];\n```\n\n----------------------------------------\n\nTITLE: Using RangeValue Filter in PHP\nDESCRIPTION: Demonstrates the RangeValue filter that validates if an input falls within a specified range, with options for inclusive or exclusive boundaries.\nSOURCE: https://github.com/spiral/docs/blob/3.14/docs/en/component/data-grid.md#2025-04-20_snippet_49\n\nLANGUAGE: php\nCODE:\n```\nuse Spiral\\DataGrid\\Specification\\Value;\n\n// as it, expects the value be >=1 and <3\n$value = new Value\\RangeValue(\n    new Value\\IntValue(),\n    Value\\RangeValue\\Boundary::including(1),\n    Value\\RangeValue\\Boundary::excluding(3)\n);\n \n$value->accepts('3'); // false\n$value->accepts(1);   // false\n```\n\n----------------------------------------\n\nTITLE: Registering Console Interceptor via ConsoleBootloader in PHP for Spiral Framework\nDESCRIPTION: This snippet illustrates how to register a console interceptor using the ConsoleBootloader class. It shows the creation of an AppBootloader class that adds the interceptor in its boot method.\nSOURCE: https://github.com/spiral/docs/blob/3.14/docs/en/console/interceptors.md#2025-04-20_snippet_2\n\nLANGUAGE: php\nCODE:\n```\nnamespace App\\Application\\Bootloader;\n\nuse App\\CustomInterceptor;\nuse Spiral\\Boot\\Bootloader\\Bootloader;\nuse Spiral\\Console\\Bootloader\\ConsoleBootloader;\n\nclass AppBootloader extends Bootloader\n{\n    public function boot(ConsoleBootloader $console): void\n    {\n        $console->addInterceptor(CustomInterceptor::class);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Unsubscribing Users from Centrifugo Channels in PHP\nDESCRIPTION: Shows the usage of the unsubscribe method to remove a user from a Centrifugo channel. This method allows for optional parameters like client and session IDs for more specific unsubscription.\nSOURCE: https://github.com/spiral/docs/blob/3.14/docs/en/websockets/api.md#2025-04-20_snippet_4\n\nLANGUAGE: PHP\nCODE:\n```\npublic function handle(User $user, Channel $channel): void\n{\n    $this->api->unsubscribe($channel->getName(), $user->getId(), ...);\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Custom Session Handler in Spiral PHP\nDESCRIPTION: Example of configuring a custom session handler that implements PHP's SessionHandlerInterface. This allows for specialized session storage solutions based on application needs.\nSOURCE: https://github.com/spiral/docs/blob/3.14/docs/en/basics/session.md#2025-04-20_snippet_12\n\nLANGUAGE: php\nCODE:\n```\nreturn [\n    'handler' => new Autowire(\n        MemoryHandler::class,\n        [\n            'driver' => 'redis',\n            'database' => 1,\n            'lifetime' => 86400\n        ]\n    )\n];\n```\n\n----------------------------------------\n\nTITLE: Basic Controller with Prototype Trait\nDESCRIPTION: Example of a controller using the PrototypeTrait to enable prototyping features for rapid development.\nSOURCE: https://github.com/spiral/docs/blob/3.14/docs/en/basics/prototype.md#2025-04-20_snippet_2\n\nLANGUAGE: php\nCODE:\n```\nnamespace App\\Endpoint\\Web;\n\nuse Spiral\\Prototype\\Traits\\PrototypeTrait;\n\nclass HomeController\n{\n    use PrototypeTrait;\n\n    public function index()\n    {\n        return $this->views->render('profile', [\n            'user' => $this->users->findByName('Antony')\n        ]);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a Listener with Multiple TargetAttributes in Spiral Framework\nDESCRIPTION: Example of using multiple TargetAttribute annotations to filter classes. This listener will process classes that have either Route or SymfonyRoute attributes.\nSOURCE: https://github.com/spiral/docs/blob/3.14/docs/en/advanced/tokenizer.md#2025-04-20_snippet_17\n\nLANGUAGE: php\nCODE:\n```\nuse Spiral\\Tokenizer\\Attribute\\TargetAttribute;\nuse Spiral\\Tokenizer\\TokenizationListenerInterface;\n\n#[TargetAttribute(Route::class)]\n#[TargetAttribute(SymfonyRoute::class)]\nclass RouteLocatorListener implements TokenizationListenerInterface\n{\n    public function listen(\\ReflectionClass $class): void\n    {\n        // Do something with classes that have Route or SymfonyRoute attributes\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Subscribe Service Handler - PHP\nDESCRIPTION: Implementation of a Subscribe service handler that authenticates users based on TopicRegistry rules\nSOURCE: https://github.com/spiral/docs/blob/3.14/docs/en/websockets/services.md#2025-04-20_snippet_6\n\nLANGUAGE: php\nCODE:\n```\nnamespace App\\Endpoint\\Centrifugo;\n\nuse RoadRunner\\Centrifugo\\Payload\\SubscribeResponse;\nuse RoadRunner\\Centrifugo\\Request\\Subscribe;\nuse RoadRunner\\Centrifugo\\Request\\RequestInterface;\nuse Spiral\\RoadRunnerBridge\\Centrifugo\\ServiceInterface;\nuse Spiral\\Broadcasting\\TopicRegistryInterface;\n\nfinal class SubscribeService implements ServiceInterface\n{\n    public function __construct(\n        private readonly InvokerInterface $invoker,\n        private readonly ScopeInterface $scope,\n        private readonly TopicRegistryInterface $topics,\n    ) {\n    }\n\n    /**\n     * @param Subscribe $request\n     */\n    public function handle(RequestInterface $request): void\n    {\n        try {\n            if (!$this->authorizeTopic($request)) {\n                $request->disconnect('403', 'Channel is not allowed.');\n                return;\n            }\n        \n            $request->respond(\n                new SubscribeResponse()\n            );\n        } catch (\\Throwable $e) {\n            $request->error($e->getCode(), $e->getMessage());\n        }\n    }\n    \n    private function authorizeTopic(Subscribe $request): bool\n    {\n        $parameters = [];\n        $callback = $this->topics->findCallback($request->channel, $parameters);\n        if ($callback === null) {\n            return false;\n        }\n\n        return $this->invoke(\n            $request, \n            $callback, \n            $parameters + ['topic' => $request->channel, 'userId' => $request->user]\n        );\n    }\n\n    private function invoke(Subscribe $request, callable $callback, array $parameters = []): bool\n    {\n        return $this->scope->runScope(\n            [\n                RequestInterface::class => $request,\n            ],\n            fn (): bool => $this->invoker->invoke($callback, $parameters)\n        );\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Accessing Scoped Values via Dependency Injection in PHP\nDESCRIPTION: Demonstrates how to access values set in a scope directly through dependency injection in services or controllers.\nSOURCE: https://github.com/spiral/docs/blob/3.14/docs/en/container/scopes.md#2025-04-20_snippet_6\n\nLANGUAGE: php\nCODE:\n```\npublic function doSomething(UserContext $user): void\n{\n    \\dump($user);\n}\n```\n\n----------------------------------------\n\nTITLE: Using IntersectValue Filter in PHP\nDESCRIPTION: Demonstrates the IntersectValue filter that validates if at least one input element matches a predefined set of allowed values.\nSOURCE: https://github.com/spiral/docs/blob/3.14/docs/en/component/data-grid.md#2025-04-20_snippet_43\n\nLANGUAGE: php\nCODE:\n```\nuse Spiral\\DataGrid\\Specification\\Value;\n\n// expects an array of int values\n$value = new Value\\IntersectValue(new Value\\IntValue(), 1, '2', 3);\n \n$value->accepts('3');    // true\n$value->accepts(4);      // false\n$value->accepts([3, 4]); // true\n$value->convert('3');    // [3]\n```\n\n----------------------------------------\n\nTITLE: Starting RoadRunner Server on Windows\nDESCRIPTION: Command to start the RoadRunner application server on Windows systems using the 'rr.exe' executable.\nSOURCE: https://github.com/spiral/docs/blob/3.14/docs/en/start/installation.md#2025-04-20_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\n.\\rr.exe serve\n```\n\n----------------------------------------\n\nTITLE: Implementing Database-based View Loader in PHP\nDESCRIPTION: Custom implementation of LoaderInterface that loads view templates from a database. Includes methods for checking existence, loading views, and listing available templates.\nSOURCE: https://github.com/spiral/docs/blob/3.14/docs/en/views/basics.md#2025-04-20_snippet_6\n\nLANGUAGE: php\nCODE:\n```\nnamespace App\\Integration\\Database;\n\nuse Spiral\\Views\\LoaderInterface;\nuse Spiral\\Views\\Loader\\PathParser;\nuse Spiral\\Views\\ViewSource;\n\nfinal class DatabaseLoader implements LoaderInterface\n{\n    private ?PathParser $parser = null;\n    \n    public function __construct(\n        private readonly DatabaseInterface $database,\n        private readonly string $defaultNamespace = self::DEFAULT_NAMESPACE,\n    ) {}\n    \n    public function withExtension(string $extension): LoaderInterface\n    {\n        $loader = clone $this;\n        $loader->parser = new PathParser($this->defaultNamespace, $extension);\n\n        return $loader;\n    }\n    \n    public function getExtension(): ?string\n    {\n        return $this->parser?->getExtension();\n    }\n    \n    public function exists(string $path, string &$filename = null, ViewPath &$parsed = null): bool\n    {\n        if ($this->parser === null) {\n            throw new LoaderException(\n                'Unable to locate view source, no extension has been associated.'\n            );\n        }\n        \n        $parsed = $this->parser->parse($path);\n        if ($parsed === null) {\n            return false;\n        }\n        \n        if (!isset($this->namespaces[$parsed->getNamespace()])) {\n            return false;\n        }\n        \n        foreach ((array)$this->namespaces[$parsed->getNamespace()] as $namespace) {\n            $isExists = $this->getTemplate($namespace, $parsed->getBasename()) !== null;\n            if ($isExists) {\n                $filename = $parsed->getBasename();\n                return true;\n            }\n        }\n        \n        return false;\n    }\n    \n    public function load(string $path): ViewSource\n    {\n        if (!$this->exists($path, $filename, $parsed)) {\n            throw new LoaderException(\n                \\sprintf('Unable to load view `%s`, file does not exist.', $path)\n            );\n        }\n        \n        $view = $this->getTemplate($parsed->getNamespace(), $parsed->getBasename());\n        \n        return (new ViewSource(\n            $filename,\n            $parsed->getNamespace(),\n            $parsed->getName()\n        ))->withCode($view['html']);\n    }\n    \n    public function list(string $namespace = null): array\n    {\n        $views = [];\n        foreach ($this->namespaces as $namespace) {\n            $templates = $this->database->select()\n                ->from('views')\n                ->where('namespace', $namespace)\n                ->fetchAll();\n            \n            foreach ($templates as $template) {\n                $views[] = $namespace . ':' . $template['path'];\n            }\n        }\n        \n        return $views;\n    }\n    \n    private function getTemplate(string $namespace, string $path): ?array\n    {\n        return $this->database->select()\n            ->from('views')\n            ->where('namespace', $namespace)\n            ->where('path', $path)\n            ->fetchOne();\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring RoadRunner YAML for Jobs Plugin\nDESCRIPTION: YAML configuration for RoadRunner server to enable the jobs plugin and set up AMQP connection.\nSOURCE: https://github.com/spiral/docs/blob/3.14/docs/en/cookbook/simple-queue-system.md#2025-04-20_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\namqp:\n  addr: amqp://guest:guest@127.0.0.1:5672\n\njobs:\n  consume: [ ]\n  pipelines: { }\n```\n\n----------------------------------------\n\nTITLE: Default Scaffolder Configuration\nDESCRIPTION: Default configuration file for scaffolder showing declaration types and their configurations including namespaces, postfixes, and classes\nSOURCE: https://github.com/spiral/docs/blob/3.14/docs/en/basics/scaffolding.md#2025-04-20_snippet_2\n\nLANGUAGE: php\nCODE:\n```\nuse Spiral\\Scaffolder\\Declaration;\n\nreturn [\n    'declarations' => [\n        Declaration\\BootloaderDeclaration::TYPE => [\n            'namespace' => 'Bootloader',\n            'postfix' => 'Bootloader',\n            'class' => Declaration\\BootloaderDeclaration::class,\n        ],\n        Declaration\\ConfigDeclaration::TYPE => [\n            'namespace' => 'Config',\n            'postfix' => 'Config',\n            'class' => Declaration\\ConfigDeclaration::class,\n            'options' => [\n                'directory' => directory('config'),\n            ],\n        ],\n        Declaration\\ControllerDeclaration::TYPE => [\n            'namespace' => 'Controller',\n            'postfix' => 'Controller',\n            'class' => Declaration\\ControllerDeclaration::class,\n        ],\n        Declaration\\FilterDeclaration::TYPE => [\n            'namespace' => 'Filter',\n            'postfix' => 'Filter',\n            'class' => Declaration\\FilterDeclaration::class,\n        ],\n        Declaration\\MiddlewareDeclaration::TYPE => [\n            'namespace' => 'Middleware',\n            'postfix' => '',\n            'class' => Declaration\\MiddlewareDeclaration::class,\n        ],\n        Declaration\\CommandDeclaration::TYPE => [\n            'namespace' => 'Command',\n            'postfix' => 'Command',\n            'class' => Declaration\\CommandDeclaration::class,\n        ],\n        Declaration\\JobHandlerDeclaration::TYPE => [\n            'namespace' => 'Job',\n            'postfix' => 'Job',\n            'class' => Declaration\\JobHandlerDeclaration::class,\n        ],\n    ],\n];\n```\n\n----------------------------------------\n\nTITLE: Using Numeric Value Filters in PHP\nDESCRIPTION: Demonstrates the numeric value filters for validating and converting integer, float, and general numeric inputs.\nSOURCE: https://github.com/spiral/docs/blob/3.14/docs/en/component/data-grid.md#2025-04-20_snippet_39\n\nLANGUAGE: php\nCODE:\n```\nuse Spiral\\DataGrid\\Specification\\Value;\n\n$int = new Value\\IntValue();         // converts to int\n$float = new Value\\FloatValue();     // converts to float\n$numeric = new Value\\NumericValue(); // converts to int/float\n```\n\n----------------------------------------\n\nTITLE: Force Releasing a Lock\nDESCRIPTION: Demonstrates how to forcefully release a lock without knowing the lock identifier, useful in cases where a process crashes while holding a lock.\nSOURCE: https://github.com/spiral/docs/blob/3.14/docs/en/advanced/locks.md#2025-04-20_snippet_9\n\nLANGUAGE: php\nCODE:\n```\n$lock->forceRelease('pdf:create');\n```\n\n----------------------------------------\n\nTITLE: Creating Job Handler via Command Line\nDESCRIPTION: Command to scaffold a new job handler using Spiral's CLI tool\nSOURCE: https://github.com/spiral/docs/blob/3.14/docs/en/queue/jobs.md#2025-04-20_snippet_0\n\nLANGUAGE: terminal\nCODE:\n```\nphp app.php create:jobHandler Sample\n```\n\n----------------------------------------\n\nTITLE: Implementing RPC Handler Class - PHP\nDESCRIPTION: PHP implementation of RPC handler for processing thread history and message publishing in a chat application using Spiral Framework and Centrifugo\nSOURCE: https://github.com/spiral/docs/blob/3.14/docs/en/cookbook/simple-chat.md#2025-04-20_snippet_44\n\nLANGUAGE: php\nCODE:\n```\nnamespace App\\Endpoint\\Centrifugo;\n\nuse App\\Database\\Message;\nuse App\\Database\\User;\nuse RoadRunner\\Centrifugo\\Payload\\RPCResponse;\nuse RoadRunner\\Centrifugo\\Request\\RequestInterface;\nuse RoadRunner\\Centrifugo\\Request\\RPC;\nuse Spiral\\Core\\InvokerInterface;\nuse Spiral\\Prototype\\Traits\\PrototypeTrait;\nuse Spiral\\RoadRunnerBridge\\Centrifugo\\ServiceInterface;\n\nfinal class RpcHandler implements ServiceInterface\n{\n    use PrototypeTrait;\n\n    public function __construct(\n        private readonly InvokerInterface $invoker,\n    ) {\n    }\n\n    /**\n     * @param RPC $request\n     */\n    public function handle(RequestInterface $request): void\n    {\n        // Invoke a method based on the request method\n        $result = match ($request->method) {\n            // Return a list of messages in a given thread\n            'thread:history' => $this->invoker->invoke(\n                [$this, 'threadHistory'],\n                $request->getData(),\n            ),\n            // Store a new message in the database\n            'thread:publish' => $this->invoker->invoke(\n                [$this, 'threadNewMessage'],\n                $request->getData(),\n            ),\n            // Return an error if the method is not found\n            default => ['error' => 'Not found', 'code' => 404]\n        };\n\n        try {\n            $request->respond(new RPCResponse(data: $result));\n        } catch (\\Throwable $e) {\n            $request->error($e->getCode(), $e->getMessage());\n        }\n    }\n\n    private function threadNewMessage(\n        int $id,\n        string $message,\n    ): array {\n        $thread = $this->threads->findByPK($id);\n\n        /** @var User $user */\n        $user = $this->auth->getActor();\n\n        $message = new Message($thread, $user, $message);\n        $this->entityManager->persist($message)->run();\n\n        $this->broadcast->publish(\n            'chat',\n            \\json_encode([\n                'type' => 'message',\n                'message' => $message,\n                'thread' => $thread,\n            ]),\n        );\n\n        return ['message' => $message, 'thread' => $thread];\n    }\n\n    private function threadHistory(int $id): array\n    {\n        return ['messages' => $this->messages->findAllByThread($id)];\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Using Guarded Method with Entity Injection for Authorization in PHP\nDESCRIPTION: Example of using the Guarded attribute with Cycle entity injection for permission checking. The injected entity is passed to the security rule as context.\nSOURCE: https://github.com/spiral/docs/blob/3.14/docs/en/http/interceptors.md#2025-04-20_snippet_10\n\nLANGUAGE: php\nCODE:\n```\n#[Guarded] \npublic function index(User $user): string\n{\n    return 'OK';\n}\n```\n\n----------------------------------------\n\nTITLE: Using Ordered Sorters in Spiral Data Grid\nDESCRIPTION: Example of using AscSorter and DescSorter to define fixed-direction sorting on multiple fields. These sorters apply a specific direction to the provided field expressions.\nSOURCE: https://github.com/spiral/docs/blob/3.14/docs/en/component/data-grid.md#2025-04-20_snippet_16\n\nLANGUAGE: php\nCODE:\n```\nuse Spiral\\DataGrid\\Specification\\Sorter;\n\n$ascSorter = new Sorter\\AscSorter('first_name', 'last_name');\n$descSorter = new Sorter\\DescSorter('first_name', 'last_name');\n```\n\n----------------------------------------\n\nTITLE: Defining a Route with Optional Parameters in PHP\nDESCRIPTION: Shows how to create a route with an optional 'name' parameter using square brackets. The route will match both '/' and '/<name>' URLs.\nSOURCE: https://github.com/spiral/docs/blob/3.14/docs/en/http/routing.md#2025-04-20_snippet_29\n\nLANGUAGE: php\nCODE:\n```\n$router->setRoute('home', new Route(\n    '/[<name>]',\n    function (ServerRequestInterface $request, ResponseInterface $response): array {\n        return $request->getAttribute('route')->getMatches();\n    }\n));\n```\n\n----------------------------------------\n\nTITLE: Using ArrayInput with Grid Factory\nDESCRIPTION: Example of using ArrayInput to provide custom input data to the Grid Factory.\nSOURCE: https://github.com/spiral/docs/blob/3.14/docs/en/component/data-grid.md#2025-04-20_snippet_9\n\nLANGUAGE: php\nCODE:\n```\nuse Spiral\\DataGrid\\Input\\ArrayInput;\n\n/** @var Spiral\\DataGrid\\GridFactory $factory */\n$factory = $factory->withInput(new ArrayInput([\n    'name' => 'antony',\n    'id' => 'desc'\n]));\n\n/** @var Spiral\\DataGrid\\GridInterface $result */\n$result = $factory->create($users->select(), $schema);\n```\n\n----------------------------------------\n\nTITLE: Implementing CommentFactory in PHP for Spiral Framework\nDESCRIPTION: This code snippet defines a CommentFactory class that extends AbstractFactory to generate Comment entities with associated authors and posts. It includes methods for customizing the generated comments.\nSOURCE: https://github.com/spiral/docs/blob/3.14/docs/en/cookbook/quick-start.md#2025-04-20_snippet_27\n\nLANGUAGE: php\nCODE:\n```\nnamespace Database\\Factory;\n\nuse App\\Database\\Comment;\nuse App\\Database\\Post;\nuse App\\Database\\User;\nuse Faker\\Generator;\nuse Spiral\\DatabaseSeeder\\Factory\\AbstractFactory;\n\nclass CommentFactory extends AbstractFactory\n{\n    /**\n     * Returns a fully qualified database entity class name\n     */\n    public function entity(): string\n    {\n        return Comment::class;\n    }\n\n    /**\n     * Returns an entity\n     */\n    public function makeEntity(array $definition): Comment\n    {\n        return new Comment($definition['message'], $definition['author'], $definition['post']);\n    }\n\n    /**\n     * Generate Comment with given author\n     */\n    public function withAuthor(User $author): self\n    {\n        return $this->state(fn(Generator $faker, array $definition) => [\n            'author' => $author,\n        ]);\n    }\n\n    /**\n     * Generate Comment with given post\n     */\n    public function withPost(Post $post): self\n    {\n        return $this->state(fn(Generator $faker, array $definition) => [\n            'post' => $post,\n        ]);\n    }\n\n    /**\n     * Returns array with generation rules\n     */\n    public function definition(): array\n    {\n        return [\n            'message' => $this->faker->sentence(12),\n            'author' => UserFactory::new()->makeOne(),\n            'post' => PostFactory::new()->makeOne()\n        ];\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Managing File Visibility in PHP using Spiral Storage\nDESCRIPTION: Demonstrates how to get and set file visibility using getVisibility() and setVisibility() methods with Visibility constants.\nSOURCE: https://github.com/spiral/docs/blob/3.14/docs/en/advanced/storage.md#2025-04-20_snippet_19\n\nLANGUAGE: php\nCODE:\n```\n$visibility = $bucket->getVisibility('file.txt');\n\n// If file is \"private\" then publish it\nif ($visibility === Visibility::VISIBILITY_PRIVATE) {\n    $bucket->setVisibility('file.txt', Visibility::VISIBILITY_PUBLIC);\n}\n```\n\n----------------------------------------\n\nTITLE: Defining EncrypterInterface in PHP for Spiral Framework\nDESCRIPTION: Interface definition for the Encrypter component, specifying methods for key management, encryption, and decryption of data.\nSOURCE: https://github.com/spiral/docs/blob/3.14/docs/en/security/encrypter.md#2025-04-20_snippet_2\n\nLANGUAGE: php\nCODE:\n```\n/**\n * Immutable class responsible for encryption services.\n */\ninterface EncrypterInterface\n{\n    /**\n     * Create and encrypter instance with new key.\n     *\n     * @throws EncrypterException\n     */\n    public function withKey(string $key): EncrypterInterface;\n\n    /**\n     * Encryption ket value. Returns in a format of ANSI string.\n     */\n    public function getKey(): string;\n\n    /**\n     * Encrypt data into encrypter specific payload string. Can be decrypted only using decrypt()\n     * method.\n     *\n     * @param mixed $data\n     *\n     * @throws EncryptException\n     * @throws EncrypterException\n     */\n    public function encrypt($data): string;\n\n    /**\n     * Decrypt payload string. Payload should be generated by same encrypter using encrypt() method.\n     *\n     * @return mixed\n     *\n     * @throws DecryptException\n     * @throws EncrypterException\n     */\n    public function decrypt(string $payload);\n}\n```\n\n----------------------------------------\n\nTITLE: Adding Prototype Attribute to UserRepository in Spiral\nDESCRIPTION: Adding the Prototyped attribute to UserRepository allows using it as a 'users' property during development. This enables convenient access to the repository through the prototype design pattern.\nSOURCE: https://github.com/spiral/docs/blob/3.14/docs/en/cookbook/quick-start.md#2025-04-20_snippet_19\n\nLANGUAGE: php\nCODE:\n```\nuse Spiral\\Prototype\\Annotation\\Prototyped;\n\n#[Prototyped(property: 'users')]\nclass UserRepository extends Repository\n{\n}\n```\n\n----------------------------------------\n\nTITLE: Installing Symfony Lock Driver\nDESCRIPTION: Shows the command to install the RoadRunner Symfony lock driver package, which adds a lock driver to the Symfony lock component.\nSOURCE: https://github.com/spiral/docs/blob/3.14/docs/en/advanced/locks.md#2025-04-20_snippet_12\n\nLANGUAGE: terminal\nCODE:\n```\ncomposer require roadrunner-php/symfony-lock-driver\n```\n\n----------------------------------------\n\nTITLE: Configuring HTTP Middleware Declaration in Spiral Framework (PHP)\nDESCRIPTION: Configuration for the HTTP Middleware declaration in Spiral Framework. This sets the namespace and postfix for generated middleware classes.\nSOURCE: https://github.com/spiral/docs/blob/3.14/docs/zh-CN/basics/scaffolding.md#2025-04-20_snippet_1\n\nLANGUAGE: php\nCODE:\n```\nSpiral\\Scaffolder\\Declaration\\MiddlewareDeclaration::TYPE => [\n    'namespace' => 'Endpoint\\Web\\Middleware',\n    'postfix' => 'Middleware',\n],\n```\n\n----------------------------------------\n\nTITLE: Adding Routes in Separate File\nDESCRIPTION: Shows how to add routes in a separate file that is imported by the RoutingConfigurator.\nSOURCE: https://github.com/spiral/docs/blob/3.14/docs/en/http/routing.md#2025-04-20_snippet_6\n\nLANGUAGE: php\nCODE:\n```\nuse App\\Controller\\HomeController;\nuse Spiral\\Router\\Loader\\Configurator\\RoutingConfigurator;\n\nreturn function (RoutingConfigurator $routes): void {\n    $routes->add(name: 'news.show', pattern: '/news/<id:int>')\n        ->methods(methods: ['GET'])\n        ->action(NewsController::class, 'show');\n};\n```\n\n----------------------------------------\n\nTITLE: Basic Template Component Example in HTML\nDESCRIPTION: Example showing a basic homepage template with repeating article elements that can be refactored into a component.\nSOURCE: https://github.com/spiral/docs/blob/3.14/docs/en/views/stempler.md#2025-04-20_snippet_41\n\nLANGUAGE: html\nCODE:\n```\n<extends:layout.base title=\"Homepage\"/>\n\n<block:content>\n    This is the homepage.\n\n    <div class=\"article\">\n        <div class=\"title\">Article title</div>\n        <div class=\"preview\">article preview</div>\n    </div>\n\n    <div class=\"article\">\n        <div class=\"title\">Article title 2</div>\n        <div class=\"preview\">article preview 2</div>\n    </div>\n\n    <div class=\"article\">\n        <div class=\"title\">Article title 3</div>\n        <div class=\"preview\">article preview 3</div>\n    </div>\n</block:content>\n```\n\n----------------------------------------\n\nTITLE: Broadcasting Configuration File Setup\nDESCRIPTION: Configuring broadcasting connections and drivers in the configuration file\nSOURCE: https://github.com/spiral/docs/blob/3.14/docs/zh-CN/websockets/broadcasting.md#2025-04-20_snippet_2\n\nLANGUAGE: php\nCODE:\n```\nuse Spiral\\Broadcasting\\Driver\\LogBroadcast;\nuse Spiral\\Broadcasting\\Driver\\NullBroadcast;\n\nreturn [\n    'default' => 'log',\n    'authorize' => [],\n    'aliases' => [],\n    'connections' => [\n        'log' => [\n            'driver' => 'log',\n        ],\n        'null' => [\n            'driver' => NullBroadcast::class,\n        ],\n    ],\n    'driverAliases' => [\n        'log' => LogBroadcast::class,\n    ],\n];\n```\n\n----------------------------------------\n\nTITLE: Job Push Confirmation Output\nDESCRIPTION: Console output showing the successful pushing of a job with a unique identifier.\nSOURCE: https://github.com/spiral/docs/blob/3.14/docs/en/start/queue-basics.md#2025-04-20_snippet_9\n\nLANGUAGE: output\nCODE:\n```\nJob [32m3332e595-9774-434c-908c-3c419f80c967[39m pushed\n```\n\n----------------------------------------\n\nTITLE: Adding ExceptionHandlerBootloader to Kernel Using Method\nDESCRIPTION: Demonstrates how to add the ExceptionHandlerBootloader to your application's kernel using the defineBootloaders() method. This bootloader binds exception handling implementations to the container.\nSOURCE: https://github.com/spiral/docs/blob/3.14/docs/en/http/errors.md#2025-04-20_snippet_0\n\nLANGUAGE: php\nCODE:\n```\npublic function defineBootloaders(): array\n{\n    return [\n        // ...\n        \\App\\Application\\Bootloader\\ExceptionHandlerBootloader::class,\n        // ...\n    ];\n}\n```\n\n----------------------------------------\n\nTITLE: Updating Lock TTL\nDESCRIPTION: Demonstrates how to update the TTL of a lock, useful for extending the lock duration during long-running tasks.\nSOURCE: https://github.com/spiral/docs/blob/3.14/docs/en/advanced/locks.md#2025-04-20_snippet_11\n\nLANGUAGE: php\nCODE:\n```\n// Add 10 microseconds to lock ttl\n$lock->updateTTL('pdf:create', $id, 10);\n// or\n$lock->updateTTL('pdf:create', $id, new \\DateInterval('PT10S'));\n```\n\n----------------------------------------\n\nTITLE: Implementing Map Filter in PHP\nDESCRIPTION: Shows how to use Map filter for combining multiple filters with their own values.\nSOURCE: https://github.com/spiral/docs/blob/3.14/docs/en/component/data-grid.md#2025-04-20_snippet_28\n\nLANGUAGE: php\nCODE:\n```\nuse Spiral\\DataGrid\\Specification\\Filter;\n\n// the price should be greater than 2 and the quantity be less than 5\n$map = new Filter\\Map([\n    'from' => new Filter\\Gt('price', 2),\n    'to'   => new Filter\\Lt('quantity', 5)\n]);\n```\n\nLANGUAGE: php\nCODE:\n```\nuse Spiral\\DataGrid\\Specification\\Filter;\nuse Spiral\\DataGrid\\Specification\\Value;\n\n$map = new Filter\\Map([\n    'from' => new Filter\\Gt('price', new Value\\NumericValue()),\n    'to'   => new Filter\\Lt('quantity', new Value\\NumericValue())\n]);\n\n// the price should be greater than 2 and the quantity should be less than 5\n$map = $map->withValue(['from' => 2, 'to' => 5]);\n\n// invalid input, map will be set to null\n$map = $map->withValue(['to' => 5]);\n```\n\n----------------------------------------\n\nTITLE: Defining a Filter Class with Attributes in PHP\nDESCRIPTION: Shows how to create a filter class using attributes for input mapping and validation in the redesigned Filters component.\nSOURCE: https://github.com/spiral/docs/blob/3.14/docs/en/cookbook/migration-from-v2.md#2025-04-20_snippet_15\n\nLANGUAGE: php\nCODE:\n```\nuse Spiral\\Filters\\Attribute\\Input;\nuse Spiral\\Filters\\Attribute\\NestedArray;\nuse Spiral\\Filters\\Attribute\\NestedFilter;\nuse Spiral\\Filters\\Attribute\\Setter;\n\nclass CreateUserFilter extends SymfonyFilter \n{\n    #[Asset\\NotBlank]\n    #[Asset\\Length(['min' => 30])]\n    #[Input\\Post]\n    public string $username;\n\n    #[Asset\\NotBlank]\n    #[Asset\\Length(['min' => 30])]\n    #[Input\\Post(key: 'first_name')]\n    public string $name;\n\n    #[Asset\\NotBlank]\n    #[Asset\\Length(['min' => 30])]\n    #[Input\\Query(key: 'last_name')]\n    public string $lastName;\n\n    #[Input\\Query(key: 'page_num')]\n    public int $page;\n\n    #[Asset\\NotBlank]\n    #[Input\\Attribute]\n    private string $wsPath;\n\n    #[Asset\\NotBlank]\n    #[Input\\BearerToken]\n    public string $token;\n\n    #[Input\\Cookie(key: 'utm_source')]\n    public string $utmSource;\n\n    #[Input\\Cookie]\n    public string $utmId;\n\n    #[NestedArray(\n        class: UserTagsFilter::class,\n        input: new Inout\\Post('tags')\n    )]\n    public array $tags = [];\n\n    #[NestedFilter(class: UtmFilter::class)]\n    public UtmFilter $utm;\n\n    #[Input\\Post]\n    #[Setter(filter: 'md5')]\n    public string $password;\n}\n```\n\n----------------------------------------\n\nTITLE: Manual Repository Instantiation\nDESCRIPTION: Example of manually requesting a repository from the ORM instance in a service class\nSOURCE: https://github.com/spiral/docs/blob/3.14/docs/en/basics/orm.md#2025-04-20_snippet_8\n\nLANGUAGE: php\nCODE:\n```\nuse Cycle\\ORM\\ORMInterface;\nuse Cycle\\ORM\\RepositoryInterface;\n\nclass UserService\n{   \n    private readonly RepositoryInterface $repository;\n\n    public function __construct(\n        Cycle\\ORM\\ORMInterface $orm\n    ) {\n        $this->repository = $orm->getRepository(User::class);\n    }\n    \n    public function getProfile(string $email): User\n    {\n        $user = $this->repository->findOne(['email' => $email]);\n        // ...\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Using Doctrine Annotation Reader\nDESCRIPTION: Example of using the dedicated AnnotationReader to read Doctrine annotations from a class. This requires the doctrine/annotations package to be installed.\nSOURCE: https://github.com/spiral/docs/blob/3.14/docs/en/advanced/attributes.md#2025-04-20_snippet_19\n\nLANGUAGE: php\nCODE:\n```\n/** @ExampleAnnotation */\nclass Example {}\n\n$reader = new \\Spiral\\Attributes\\AnnotationReader();\n\n$annotations = $reader->getClassMetadata(new ReflectionClass(Example::class));\n// returns iterable<ExampleAnnotation>\n```\n\n----------------------------------------\n\nTITLE: Complex Sitemap Structure Declaration\nDESCRIPTION: Demonstrates declaring a complex sitemap structure with nested groups and links using the SitemapBootloader extension.\nSOURCE: https://github.com/spiral/docs/blob/3.14/docs/en/keeper/sitemap.md#2025-04-20_snippet_2\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\ndeclare(strict_types=1);\n\nuse Spiral\\Keeper\\Bootloader\\SitemapBootloader;\nuse Spiral\\Keeper\\Module\\Sitemap;\n\nclass NavigationBootloader extends SitemapBootloader\n{\n    public function declareSitemap(Sitemap $sitemap): void\n    {\n        $sitemap->link('dashboard.index', 'Dashboard', ['icon' => 'home']);\n\n        $group = $sitemap->group('users', 'Users and Groups', ['icon' => '...']);\n        if ($group !== null) {\n            $users = $group->link('users.index', 'Users', ['icon' => '...']);\n            if ($users !== null) {\n                $users->view('users.create', 'Create User');\n                $users->view('users.edit', 'Edit User');\n            }\n            $group->link('groups.index', 'Groups', ['icon' => '...']);\n        }\n        // ...\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Guarded Attribute in PHP for GRPC Method Authentication\nDESCRIPTION: This code snippet demonstrates how to create a Guarded attribute class for marking GRPC methods that require authentication in Spiral Framework.\nSOURCE: https://github.com/spiral/docs/blob/3.14/docs/en/grpc/interceptors.md#2025-04-20_snippet_4\n\nLANGUAGE: php\nCODE:\n```\nnamespace App\\Attribute;\n\nuse Doctrine\\Common\\Annotations\\Annotation\\NamedArgumentConstructor;\n\n#[\\Attribute(\\Attribute::TARGET_METHOD), NamedArgumentConstructor]\nclass Guarded\n{\n    public function __construct(\n        public readonly string $tokenField = 'token'\n    ) {\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Refactored User Entity with Constructor Injection\nDESCRIPTION: Refactored User entity that moves the name property into the constructor using constructor property promotion. This approach simplifies the entity definition while maintaining the same database schema.\nSOURCE: https://github.com/spiral/docs/blob/3.14/docs/en/cookbook/quick-start.md#2025-04-20_snippet_15\n\nLANGUAGE: php\nCODE:\n```\nuse App\\Domain\\Blog\\Repository\\UserRepository;\nuse Cycle\\Annotated\\Annotation\\Column;\nuse Cycle\\Annotated\\Annotation\\Entity;\n\n#[Entity(repository: UserRepository::class)]\nclass User\n{\n    #[Column(type: 'primary')]\n    public int $id;\n\n    public function __construct(\n        #[Column(type: 'string')]\n        public string $name\n    ) {\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Enabling Console Component in Spiral Application Kernel (Method Approach)\nDESCRIPTION: This snippet shows how to enable the Console component by adding the CommandBootloader to the application kernel using the defineBootloaders method.\nSOURCE: https://github.com/spiral/docs/blob/3.14/docs/en/console/configuration.md#2025-04-20_snippet_0\n\nLANGUAGE: php\nCODE:\n```\npublic function defineBootloaders(): array\n{\n    return [\n        // ...\n        \\Spiral\\Bootloader\\CommandBootloader::class,\n        // ...\n    ];\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring RoadRunner KV Plugin\nDESCRIPTION: Provides a YAML configuration for the RoadRunner Key-Value plugin, setting up local memory and Redis drivers.\nSOURCE: https://github.com/spiral/docs/blob/3.14/docs/en/basics/cache.md#2025-04-20_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\nkv:\n  local:\n    driver: memory\n    config:\n      interval: 60\n  redis:\n    driver: redis\n    config:\n      addrs:\n        - localhost:6379\n...\n```\n\n----------------------------------------\n\nTITLE: Registering Multiple Interceptors\nDESCRIPTION: Shows how to register multiple interceptors with the InterceptableCore instance.\nSOURCE: https://github.com/spiral/docs/blob/3.14/docs/en/framework/interceptors.md#2025-04-20_snippet_5\n\nLANGUAGE: php\nCODE:\n```\n$core->addInterceptor(new DatabaseConnectionInterceptor(...));\n$core->addInterceptor(new SlowQueryDetectorInterceptor(new Logger(...)));\n```\n\n----------------------------------------\n\nTITLE: Implementing DatetimeValue Filter in PHP\nDESCRIPTION: Shows how to use DatetimeValue to validate and convert string timestamps or datetime expressions into DateTimeImmutable objects.\nSOURCE: https://github.com/spiral/docs/blob/3.14/docs/en/component/data-grid.md#2025-04-20_snippet_40\n\nLANGUAGE: php\nCODE:\n```\nuse Spiral\\DataGrid\\Specification\\Value;\n\n$value = new Value\\DatetimeValue();\n \n$value->accepts('abc');     // false\n$value->accepts('123');     // true\n$value->accepts('-1 year'); // true\n$value->convert('-1 year'); // DateTimeImmutable object\n```\n\n----------------------------------------\n\nTITLE: Defining Filter Schema with Array\nDESCRIPTION: Example of defining a filter schema using an array for mapping request data to filter properties.\nSOURCE: https://github.com/spiral/docs/blob/3.14/docs/en/filters/filter.md#2025-04-20_snippet_9\n\nLANGUAGE: php\nCODE:\n```\nnamespace App\\Endpoint\\Web\\Filter;\n\nuse Spiral\\Filters\\Model\\Filter;\nuse Spiral\\Filters\\Model\\FilterDefinitionInterface;\nuse Spiral\\Filters\\Model\\HasFilterDefinition;\nuse Spiral\\Validator\\FilterDefinition;\n\nclass MyFilter extends Filter implements HasFilterDefinition\n{\n    public function filterDefinition(): FilterDefinitionInterface\n    {\n        return new FilterDefinition(\n            mappingSchema: ['text' => 'data:text']\n        );\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Views Component Configuration\nDESCRIPTION: Example configuration file for the views component showing cache settings, namespaces, engines and global variables\nSOURCE: https://github.com/spiral/docs/blob/3.14/docs/en/views/configuration.md#2025-04-20_snippet_3\n\nLANGUAGE: php\nCODE:\n```\nuse Spiral\\Views\\Engine\\Native\\NativeEngine;\n\nreturn [\n    'cache' => [\n        'enabled' => !env('DEBUG', false),\n        'directory' => directory('cache') . 'views'\n    ],\n    'namespaces' => [\n        'default' => [\n            directory('views')\n        ]\n    ],\n    'dependencies' => [],\n    'engines' => [\n        NativeEngine::class\n    ],\n    'globalVariables' => [\n        'some_var' => env('SOME_VALUE')\n    ]\n];\n```\n\n----------------------------------------\n\nTITLE: Configuring Temporal in RoadRunner YAML\nDESCRIPTION: YAML configuration for setting up Temporal in the RoadRunner configuration file.\nSOURCE: https://github.com/spiral/docs/blob/3.14/docs/en/temporal/configuration.md#2025-04-20_snippet_9\n\nLANGUAGE: yaml\nCODE:\n```\ntemporal:\n  address: ${TEMPORAL_ADDRESS:-localhost:7233}\n  activities:\n    num_workers: 10\n```\n\n----------------------------------------\n\nTITLE: Installing S3 Flysystem Adapters with Composer\nDESCRIPTION: Command to install either the AWS S3 v3 adapter or the AsyncAWS S3 adapter using Composer.\nSOURCE: https://github.com/spiral/docs/blob/3.14/docs/en/advanced/storage.md#2025-04-20_snippet_6\n\nLANGUAGE: terminal\nCODE:\n```\ncomposer require league/flysystem-aws-s3-v3 ^2.0\n// OR\ncomposer require league/flysystem-async-aws-s3 ^2.0\n```\n\n----------------------------------------\n\nTITLE: Using Activity in Temporal Workflow Method in PHP\nDESCRIPTION: Example of calling a Temporal activity within a workflow method, demonstrating the use of yield for asynchronous execution.\nSOURCE: https://github.com/spiral/docs/blob/3.14/docs/en/temporal/usage.md#2025-04-20_snippet_7\n\nLANGUAGE: php\nCODE:\n```\n// ...\n    #[WorkflowMethod]\n    public function handle(string $url, int $intervalInMinutes = 5)\n    {\n        while (true) {\n            // here we will ping the website and get the status\n            $status = yield $this->pingActivity->ping($url);\n\n            if ($status === false) {\n\n// ...\n```\n\n----------------------------------------\n\nTITLE: PHP Controller Integration\nDESCRIPTION: Example showing how to pass values from a PHP controller to the template.\nSOURCE: https://github.com/spiral/docs/blob/3.14/docs/en/views/stempler.md#2025-04-20_snippet_45\n\nLANGUAGE: php\nCODE:\n```\nreturn $this->views->render('home', ['value' => 'Hello&world!']);\n```\n\n----------------------------------------\n\nTITLE: Implementing SQL File Strategy for Database Testing in PHP\nDESCRIPTION: Abstract test case class implementing SQL file strategy for database testing. Uses traits for database assertions, helpers, and SQL file loading.\nSOURCE: https://github.com/spiral/docs/blob/3.14/docs/en/testing/database.md#2025-04-20_snippet_8\n\nLANGUAGE: php\nCODE:\n```\ndeclare(strict_types=1);\n\nnamespace Tests;\n\nuse Spiral\\DatabaseSeeder\\Database\\Traits\\{\n    DatabaseAsserts, Helper, DatabaseFromSQL, ShowQueries\n};\n\nabstract class DatabaseTestCase extends TestCase\n{\n    use DatabaseFromSQL,\n        Helper,\n        DatabaseAsserts,\n        ShowQueries;\n   \n   protected function getPrepareSQLFilePath(): string\n   {\n       return __DIR__ . '/database/prepare.sql';\n   }\n\n    protected function getDropSQLFilePath(): string\n    {\n        return __DIR__ . '/database/prepare.sql';\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Binding Custom ViewRenderer in ExceptionHandlerBootloader\nDESCRIPTION: Shows how to bind a custom ViewRenderer implementation to the container through ExceptionHandlerBootloader. This enables custom error page rendering for your application.\nSOURCE: https://github.com/spiral/docs/blob/3.14/docs/en/http/errors.md#2025-04-20_snippet_8\n\nLANGUAGE: php\nCODE:\n```\nuse Spiral\\Http\\ErrorHandler\\RendererInterface;\nuse App\\Application\\Exception\\Renderer\\ViewRenderer;\n\nclass ExceptionHandlerBootloader extends Bootloader\n{\n    protected const SINGLETONS = [\n        RendererInterface::class => ViewRenderer::class,\n        // ...\n    ];\n    \n    // ...\n}\n```\n\n----------------------------------------\n\nTITLE: Rendering Views with ViewsInterface\nDESCRIPTION: Example of rendering a view using ViewsInterface in a controller\nSOURCE: https://github.com/spiral/docs/blob/3.14/docs/en/views/stempler.md#2025-04-20_snippet_2\n\nLANGUAGE: php\nCODE:\n```\nnamespace App\\Endpoint\\Web;\\n\\nuse Spiral\\Views\\ViewsInterface;\\n\\nclass HomeController\\n{\\n    public function __construct(\\n        private readonly ViewsInterface $views\\n    ) {\\n    }\\n\\n    public function index(): string\\n    {\\n        return $this->views->render('welcome', [\\n            'name' => 'John',\\n        ]);\\n    }\\n}\n```\n\n----------------------------------------\n\nTITLE: Custom Broadcasting Driver Implementation\nDESCRIPTION: Creating a custom broadcasting driver by implementing BroadcastInterface\nSOURCE: https://github.com/spiral/docs/blob/3.14/docs/zh-CN/websockets/broadcasting.md#2025-04-20_snippet_6\n\nLANGUAGE: php\nCODE:\n```\nnamespace App\\Broadcast;\n\nuse Pusher\\Pusher;\nuse Spiral\\Broadcasting\\Driver\\AbstractBroadcast;\n\nfinal class PusherBroadcast extends AbstractBroadcast\n{ \n    public function __construct(\n        private readonly Pusher $pusher\n    ){\n    }\n    \n    public function publish(iterable|string|\\Stringable $topics, iterable|string $messages): void\n    {\n        $topics = $this->formatTopics($this->toArray($topics));\n        \n        /** @var string $message */\n        foreach ($this->toArray($messages) as $message) {\n            \\assert(\\is_string($message), 'Message argument must be a type of string');\n\n            $this->pusher->trigger($topics, $message, []);\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Cookie Management with PrototypeTrait\nDESCRIPTION: Shows cookie handling using the prototype trait for simplified access to CookieManager functionality.\nSOURCE: https://github.com/spiral/docs/blob/3.14/docs/en/http/cookies.md#2025-04-20_snippet_1\n\nLANGUAGE: php\nCODE:\n```\nuse PrototypeTrait;\n\npublic function index(): void\n{\n    dump($this->cookies->getAll());\n    $this->cookies->set('name', 'value'); // read about more options down below\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing an Event Interceptor for Broadcasting\nDESCRIPTION: Example of an event interceptor that broadcasts events implementing a ShouldBroadcastInterface after they are dispatched.\nSOURCE: https://github.com/spiral/docs/blob/3.14/docs/en/advanced/events.md#2025-04-20_snippet_11\n\nLANGUAGE: php\nCODE:\n```\nnamespace App\\Broadcasting;\n\nuse Spiral\\Broadcasting\\BroadcastInterface;\nuse Spiral\\Core\\CoreInterceptorInterface;\nuse Spiral\\Core\\CoreInterface;\nuse Spiral\\Queue\\SerializerRegistryInterface;\n\nfinal class BroadcastEventInterceptor implements CoreInterceptorInterface\n{\n    public function __construct(\n        private readonly BroadcastInterface $broadcast,\n        private readonly SerializerRegistryInterface $registry\n    ) {\n    }\n\n    public function process(string $controller, string $action, array $parameters, CoreInterface $core): mixed\n    {\n        $event = $parameters['event'];\n        \n        // Dispatch event first\n        $result = $core->callAction($controller, $action, $parameters);\n\n        // Broadcast event after dispatch\n        if ($event instanceof ShouldBroadcastInterface) {\n            $this->broadcast->publish(\n                $event->getBroadcastTopics(),\n                $this->registry->getSerializer('json')->serialize(\n                    ['event' => $event->getEventName(), 'data' => $event->getPayload()]\n                )\n            );\n        }\n\n        return $result;\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Link Cell Type\nDESCRIPTION: Example of implementing a link cell type with dynamic content and URL generation using templates.\nSOURCE: https://github.com/spiral/docs/blob/3.14/docs/en/keeper/components.md#2025-04-20_snippet_8\n\nLANGUAGE: xhtml\nCODE:\n```\n<grid:cell.link\n        name=\"user\"\n        title=\"Edit User {firstName}\"\n        body=\"{fistName}\"\n        href=\"/edit/{id}\"\n/>\n```\n\n----------------------------------------\n\nTITLE: Configuring Global Input Source for Grid Factory\nDESCRIPTION: Example of configuring a global input source for the Grid Factory using a custom ConsoleInput class.\nSOURCE: https://github.com/spiral/docs/blob/3.14/docs/en/component/data-grid.md#2025-04-20_snippet_10\n\nLANGUAGE: php\nCODE:\n```\nuse Spiral\\Boot\\Bootloader\\Bootloader;\n\nclass AppBootloader extends Bootloader\n{\n    protected const SINGLETONS = [\n        \\Spiral\\DataGrid\\InputInterface::class => ConsoleInput::class,\n    ];\n}\n```\n\n----------------------------------------\n\nTITLE: Using Cycle Entity Injection with Multiple Entities in PHP\nDESCRIPTION: Example of injecting multiple Cycle entities in a controller method. Named parameters in the route must match the method argument names for proper entity resolution.\nSOURCE: https://github.com/spiral/docs/blob/3.14/docs/en/http/interceptors.md#2025-04-20_snippet_3\n\nLANGUAGE: php\nCODE:\n```\nnamespace App\\Endpoint\\Web;\n\nuse App\\Domain\\Blog\\Entity\\Blog;\nuse App\\Domain\\Blog\\Entity\\Author;\nuse Spiral\\Router\\Annotation\\Route;\n\nfinal class BlogController\n{\n    #[Route(route: '/blog/<author>/<post>')]\n    public function show(Author $author, Blog $post)\n    {\n        dump($author, $blog);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Global Middleware Profiler\nDESCRIPTION: Adding ProfilerMiddleware as a global middleware in the routes bootloader.\nSOURCE: https://github.com/spiral/docs/blob/3.14/docs/en/basics/debug.md#2025-04-20_snippet_16\n\nLANGUAGE: php\nCODE:\n```\nnamespace App\\Application\\Bootloader;\n\nuse Spiral\\Bootloader\\Http\\RoutesBootloader as BaseRoutesBootloader;\nuse Spiral\\Profiler\\ProfilerMiddleware;\n\nfinal class RoutesBootloader extends BaseRoutesBootloader\n{\n    protected function globalMiddleware(): array\n    {\n        return [\n            ProfilerMiddleware::class,\n            // ...\n        ];\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Declaring a PHP Enum\nDESCRIPTION: Demonstrates how to create an enum declaration with cases, type, constants, comments, attributes, and methods.\nSOURCE: https://github.com/spiral/docs/blob/3.14/docs/en/component/reactor.md#2025-04-20_snippet_17\n\nLANGUAGE: php\nCODE:\n```\n$enum = new EnumDeclaration('MyEnum');\n\n$enum->addCase('First', 'first');\n$enum->addCase('Second', 'second');\n\n$enum\n    ->setType('string')\n    ->addConstant('FOO', 'bar')\n    ->addComment('Description of enum')\n    ->addAttribute('SomeAttribute');\n$enum\n    ->addMethod('getCase')\n    ->setReturnType('string')\n    ->addBody('return self::First->value;');\n\ndump((string) $enum);\n```\n\n----------------------------------------\n\nTITLE: Creating Nested Layouts in Stempler\nDESCRIPTION: Shows how to create a layout that extends another layout, allowing for multi-level template inheritance. The example creates a 'page' layout that extends the base layout.\nSOURCE: https://github.com/spiral/docs/blob/3.14/docs/en/views/stempler.md#2025-04-20_snippet_19\n\nLANGUAGE: html\nCODE:\n```\n<extends:layout.base body-class=\"page ${parent}\"/>\n\n<block:content>\n    <div class=\"page-wrapper\">\n        <block:page/>\n    </div>\n</block:content>\n```\n\n----------------------------------------\n\nTITLE: Using Scoped Database Connection with Finalization in PHP\nDESCRIPTION: Shows how to use a finalized database connection within a container scope.\nSOURCE: https://github.com/spiral/docs/blob/3.14/docs/en/container/attributes.md#2025-04-20_snippet_5\n\nLANGUAGE: php\nCODE:\n```\n$container->runScoped(\n    closure: function (DatabaseConnection $db) {\n        // Execute some database operations\n        $users = $db->query('SELECT * FROM users');\n        // ...  \n    },\n    bindings: [DatabaseConnection::class => new DatabaseConnection()],\n);\n```\n\n----------------------------------------\n\nTITLE: Registering Stempler Visitor in Spiral Application Bootloader\nDESCRIPTION: Creates a bootloader to register the custom AltImageVisitor with the Stempler engine. This ensures the visitor is applied to all templates processed by Stempler.\nSOURCE: https://github.com/spiral/docs/blob/3.14/docs/en/views/stempler.md#2025-04-20_snippet_56\n\nLANGUAGE: php\nCODE:\n```\nnamespace App\\Application\\Bootloader;\n\nuse App\\Visitor\\AltImageVisitor;\nuse Spiral\\Boot\\Bootloader\\Bootloader;\nuse Spiral\\Stempler\\Bootloader\\StemplerBootloader;\n\nclass AltImageBootloader extends Bootloader\n{\n    public function boot(StemplerBootloader $stempler)\n    {\n        $stempler->addVisitor(AltImageVisitor::class);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Installing Spiral Framework Application\nDESCRIPTION: Command to create a new Spiral Framework application using Composer.\nSOURCE: https://github.com/spiral/docs/blob/3.14/docs/en/cookbook/simple-queue-system.md#2025-04-20_snippet_0\n\nLANGUAGE: terminal\nCODE:\n```\ncomposer create-project spiral/app my-app\n```\n\n----------------------------------------\n\nTITLE: Config Lifecycle Example with Frozen Config\nDESCRIPTION: Demonstrates the security mechanism that prevents configuration changes after the config object is requested.\nSOURCE: https://github.com/spiral/docs/blob/3.14/docs/en/framework/config.md#2025-04-20_snippet_7\n\nLANGUAGE: php\nCODE:\n```\nnamespace App\\Application\\Bootloader;\n\nuse App\\Config\\GithubConfig;\nuse Spiral\\Boot\\Bootloader\\Bootloader;\n\nfinal class SomeBootloader extends Bootloader\n{\n    public function boot(GithubBootloader $github, GithubConfig $config): void\n    {\n        // forbidden\n        $github->setAccessToken(800);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Broadcasting Authorization Configuration in PHP\nDESCRIPTION: Configuration for topic authorization rules and path settings. Includes example authorization callbacks.\nSOURCE: https://github.com/spiral/docs/blob/3.14/docs/en/websockets/broadcasting.md#2025-04-20_snippet_12\n\nLANGUAGE: php\nCODE:\n```\nreturn [\n    'authorize' => [\n        'path' => env('BROADCAST_AUTHORIZE_PATH'),\n        'topics' => [\n            'topic' => static fn (ServerRequestInterface $request): bool => $request->getHeader('SECRET')[0] == 'secret',\n            'order.{uuid}' => static fn (string $uuid, Actor $actor): bool => $actor->getId() === $id\n        ],\n    ],\n];\n```\n\n----------------------------------------\n\nTITLE: Activating GRPC with Kernel Bootloaders Using Constant Approach\nDESCRIPTION: PHP code showing how to activate the GRPC component in Spiral by adding required bootloaders to the kernel's LOAD constant.\nSOURCE: https://github.com/spiral/docs/blob/3.14/docs/en/grpc/configuration.md#2025-04-20_snippet_3\n\nLANGUAGE: php\nCODE:\n```\nprotected const LOAD = [\n    // ...\n    \\Spiral\\RoadRunnerBridge\\Bootloader\\GRPCBootloader::class,\n    \\Spiral\\RoadRunnerBridge\\Bootloader\\CommandBootloader::class,\n    // ...\n];\n```\n\n----------------------------------------\n\nTITLE: Configuring Mailer Component in Spiral PHP\nDESCRIPTION: Shows how to configure the mailer component using environment variables and a configuration file.\nSOURCE: https://github.com/spiral/docs/blob/3.14/docs/zh-CN/advanced/sendit.md#2025-04-20_snippet_1\n\nLANGUAGE: dotenv\nCODE:\n```\nMAILER_DSN=smtp://username:password@example.com:25\nMAILER_FROM=John Smith\n\nMAILER_QUEUE_CONNECTION=roadrunner\nMAILER_QUEUE=emails\n```\n\nLANGUAGE: php\nCODE:\n```\nreturn [\n    'dsn' => env('MAILER_DSN'),\n    'from' => env('MAILER_FROM'),\n    'queue' => env('MAILER_QUEUE'),\n    'queueConnection' => env('MAILER_QUEUE_CONNECTION', 'sync'),\n];\n```\n\n----------------------------------------\n\nTITLE: Using Context Managers in Singleton Controllers in PHP\nDESCRIPTION: This example shows how to properly use a context manager (UserScope) in a singleton controller. This approach allows the controller to access the current scoped instance without storing a direct reference to it.\nSOURCE: https://github.com/spiral/docs/blob/3.14/docs/en/container/scopes.md#2025-04-20_snippet_9\n\nLANGUAGE: php\nCODE:\n```\nclass HomeController implements SingletonInterface\n{\n    public function __construct(\n        private readonly UserScope $userManager\n    ) {\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Tabbed Layout in Keeper\nDESCRIPTION: Shows how to implement a tabbed interface using Keeper's tabs layout with multiple content tabs.\nSOURCE: https://github.com/spiral/docs/blob/3.14/docs/en/keeper/views.md#2025-04-20_snippet_5\n\nLANGUAGE: html\nCODE:\n```\n<extends:keeper:layout.tabs title=\"[[Title]]\"/>\n<use:bundle path=\"keeper:bundle\"/>\n\n<ui:tab id=\"information\" icon=\"info\" title=\"[[Information]]\" active=\"true\">\n    [[Information tab content.]]\n</ui:tab>\n<ui:tab id=\"data\" icon=\"cog\" title=\"[[Data]]\">\n    [[Data tab content.]]\n</ui:tab>\n```\n\n----------------------------------------\n\nTITLE: Using PHP 8 Attribute Reader\nDESCRIPTION: Example of using the AttributeReader to read native PHP 8 attributes. This reader works on any PHP version that supports attributes (8.0+).\nSOURCE: https://github.com/spiral/docs/blob/3.14/docs/en/advanced/attributes.md#2025-04-20_snippet_20\n\nLANGUAGE: php\nCODE:\n```\n#[ExampleAttribute]\nclass Example {}\n\n$reader = new \\Spiral\\Attributes\\AttributeReader();\n\n$attributes = $reader->getClassMetadata(new ReflectionClass(Example::class));\n// returns iterable<ExampleAttribute>\n```\n\n----------------------------------------\n\nTITLE: Implementing UserRepository for Username Lookup in PHP\nDESCRIPTION: The UserRepository extends Cycle ORM's Repository class to provide a method for finding a user by their username, returning either a User object or null if not found.\nSOURCE: https://github.com/spiral/docs/blob/3.14/docs/zh-CN/cookbook/simple-chat.md#2025-04-20_snippet_3\n\nLANGUAGE: php\nCODE:\n```\nnamespace App\\Repository;\n\nuse App\\Database\\User;\nuse Cycle\\ORM\\Select\\Repository;\n\nfinal class UserRepository extends Repository\n{\n    public function findByUsername(string $username): ?User\n    {\n        return $this->findOne(['username' => $username]);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Filter Declaration Configuration in PHP\nDESCRIPTION: PHP configuration for filter declarations that specifies the namespace where filter classes will be generated. This configuration is used by the scaffolding command.\nSOURCE: https://github.com/spiral/docs/blob/3.14/docs/en/basics/scaffolding.md#2025-04-20_snippet_16\n\nLANGUAGE: php\nCODE:\n```\nSpiral\\Scaffolder\\Declaration\\FilterDeclaration::TYPE => [\n    'namespace' => 'Endpoint\\Web\\Filter',\n],\n```\n\n----------------------------------------\n\nTITLE: Creating a User Registration Notification Job Handler\nDESCRIPTION: Command to create a job handler for processing user registration notifications in the background. This generates a job handler class with an invoke method.\nSOURCE: https://github.com/spiral/docs/blob/3.14/docs/en/basics/scaffolding.md#2025-04-20_snippet_29\n\nLANGUAGE: terminal\nCODE:\n```\nphp app.php create:jobHandler UserRegisteredNotification\n```\n\n----------------------------------------\n\nTITLE: Updating Centrifugo Configuration - PHP Diff\nDESCRIPTION: Configuration changes to register RPC handler and auth interceptor for Centrifugo events\nSOURCE: https://github.com/spiral/docs/blob/3.14/docs/en/cookbook/simple-chat.md#2025-04-20_snippet_46\n\nLANGUAGE: diff\nCODE:\n```\n+use App\\Endpoint\\Centrifugo\\Interceptor\\AuthInterceptor;\nuse App\\Endpoint\\Centrifugo\\ConnectHandler;\n+use App\\Endpoint\\Centrifugo\\RpcHandler;\nuse RoadRunner\\Centrifugo\\Request\\RequestType;\n\nreturn [\n    'services' => [\n        RequestType::Connect->value => ConnectHandler::class,\n+       RequestType::RPC->value => RpcHandler::class,\n    ],\n+   'interceptors' => [\n+       RequestType::RPC->value => [\n+           AuthInterceptor::class,\n+       ],\n+       RequestType::Connect->value => [\n+           AuthInterceptor::class,\n+       ],\n+   ],\n];\n```\n\n----------------------------------------\n\nTITLE: Implementing Telemetry Injection Interceptor in PHP for Spiral Framework\nDESCRIPTION: This code defines an interceptor class that injects telemetry trace IDs into GRPC request contexts. It uses the Spiral framework's CoreInterceptorInterface and TracerInterface to intercept requests, retrieve telemetry context, and add it to the request metadata before processing the action.\nSOURCE: https://github.com/spiral/docs/blob/3.14/docs/zh-CN/grpc/interceptors.md#2025-04-20_snippet_0\n\nLANGUAGE: PHP\nCODE:\n```\nnamespace App\\Service\\Interceptor;\n\nuse Psr\\Container\\ContainerInterface;\nuse Spiral\\Core\\CoreInterceptorInterface;\nuse Spiral\\RoadRunner\\GRPC\\ContextInterface;\nuse Spiral\\RoadRunner\\GRPC\\ResponseHeaders;\nuse Spiral\\Telemetry\\TraceKind;\nuse Spiral\\Telemetry\\TracerInterface;\nuse Spiral\\Core\\CoreInterface;\n\nclass InjectTelemetryIntoContextInterceptor implements CoreInterceptorInterface\n{\n    public function __construct(\n        private readonly ContainerInterface $container\n    ) {\n    }\n\n    public function process(string $controller, string $action, array $parameters, CoreInterface $core): mixed\n    {\n        $tracer = $this->container->get(TracerInterface::class);\n        \\assert($tracer instanceof TracerInterface);\n\n        if (isset($parameters['ctx']) and $parameters['ctx'] instanceof RequestContext) {\n            $metadata = $parameters['ctx']->getValue('metadata');\n            if(!\\is_array($metadata)) {\n                $metadata = [];\n            }\n            \n            $metadata['telemetry-trace-id'] = $tracer->getContext();\n            $parameters['ctx'] = $parameters['ctx']->withValue('metadata', $metadata);\n        }\n\n        return $tracer->trace(\n            name: \\sprintf('GRPC request %s', $action),\n            callback: static fn() => $core->callAction($controller, $action, $parameters),\n            attributes: compact('controller', 'action'),\n            traceKind: TraceKind::PRODUCER\n        );\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Registering the BootloadersConfig Provider in App.php for Spiral PHP\nDESCRIPTION: This code sample shows how to register the BootloadersConfig provider in the application's App class. It demonstrates adding the provider to the list of application providers during initialization.\nSOURCE: https://github.com/spiral/docs/blob/3.14/docs/en/cookbook/discoverer.md#2025-04-20_snippet_3\n\nLANGUAGE: php\nCODE:\n```\nnamespace App;\n\nuse App\\Provider\\BootloadersConfigProvider;\nuse Spiral\\Boot\\App;\nuse Spiral\\Boot\\AppBuilder;\n\nfinal class Application\n{\n    public static function create(): App\n    {\n        $builder = AppBuilder::create()\n            // Add provider\n            ->addProvider(BootloadersConfigProvider::class)\n            // Or add all providers from directory\n            ->addProvider(directory('app/src/Provider'), App\\Provider::class);\n            \n        return $builder->build(\n            MyKernel::class,\n        );\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Asserting Email Not Sent\nDESCRIPTION: Demonstrates how to verify that a specific email was not sent to a particular address using assertNotSent().\nSOURCE: https://github.com/spiral/docs/blob/3.14/docs/en/testing/mail.md#2025-04-20_snippet_3\n\nLANGUAGE: php\nCODE:\n```\n$this->mailer->assertNotSent(\n    WelcomeMessage::class,\n    static fn (Message $message) => \\in_array('user@site.com', $message->getTo())\n);\n```\n\n----------------------------------------\n\nTITLE: Creating Fake File with MIME Type\nDESCRIPTION: Example of creating a fake file with a specific MIME type.\nSOURCE: https://github.com/spiral/docs/blob/3.14/docs/en/testing/http.md#2025-04-20_snippet_14\n\nLANGUAGE: php\nCODE:\n```\n// Create a file with size - 100kb\n$file = $http->getFileFactory()->createFile(\n    filename: 'foo.txt', \n    mimeType: 'text/plain'\n);\n```\n\n----------------------------------------\n\nTITLE: Cookie Reading with InputManager\nDESCRIPTION: Shows cookie access using InputManager for automatic request scope resolution in controllers.\nSOURCE: https://github.com/spiral/docs/blob/3.14/docs/en/http/cookies.md#2025-04-20_snippet_3\n\nLANGUAGE: php\nCODE:\n```\nclass HomeController\n{\n    private $input;\n\n    public function __construct(InputManager $input)\n    {\n        $this->input = $input;\n    }\n\n    public function index(): void\n    {\n        dump($this->input->cookies->all());\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Starting the GRPC Server with RoadRunner\nDESCRIPTION: Command to start the RoadRunner server which will serve the GRPC service. This runs RoadRunner with the configuration defined in .rr.yaml.\nSOURCE: https://github.com/spiral/docs/blob/3.14/docs/en/grpc/service.md#2025-04-20_snippet_7\n\nLANGUAGE: terminal\nCODE:\n```\n./rr serve\n```\n\n----------------------------------------\n\nTITLE: File Validation Usage Example\nDESCRIPTION: Example of using file validation rules with the registered FileChecker\nSOURCE: https://github.com/spiral/docs/blob/3.14/docs/en/validation/spiral.md#2025-04-20_snippet_12\n\nLANGUAGE: php\nCODE:\n```\n$validator = $validation->validate(\n    ['file' => null],\n    [\n        'file' => [\n            'file::uploaded', // you can use alias 'uploaded'\n            ['file::size', 1024] // FileChecker::size($file, 1024)\n        ]\n    ]\n);\n```\n\n----------------------------------------\n\nTITLE: Creating Fake File with Custom Content\nDESCRIPTION: Example of creating a fake file with specific content and MIME type.\nSOURCE: https://github.com/spiral/docs/blob/3.14/docs/en/testing/http.md#2025-04-20_snippet_15\n\nLANGUAGE: php\nCODE:\n```\n$file = $http->getFileFactory()->createFileWithContent(\n    filename: 'foo.txt', \n    content: 'Hello world', \n    mimeType: 'text/plain'\n);\n```\n\n----------------------------------------\n\nTITLE: Registering Custom Writer in Data Grid Configuration\nDESCRIPTION: Configuration example showing how to register a custom writer in the Spiral Data Grid configuration file. Writers are registered in order of execution priority.\nSOURCE: https://github.com/spiral/docs/blob/3.14/docs/en/component/data-grid.md#2025-04-20_snippet_12\n\nLANGUAGE: php\nCODE:\n```\nreturn [\n    'writers' => [\n        \\App\\Application\\Schema\\DoctrineCollectionWriter::class,\n    ],\n];\n```\n\n----------------------------------------\n\nTITLE: Registering OpenTelemetry Bootloader Using Method\nDESCRIPTION: Code snippet showing how to register the OpenTelemetry bootloader in the application kernel using the defineBootloaders method.\nSOURCE: https://github.com/spiral/docs/blob/3.14/docs/en/advanced/telemetry.md#2025-04-20_snippet_1\n\nLANGUAGE: php\nCODE:\n```\npublic function defineBootloaders(): array\n{\n    return [\n        // ...\n        \\Spiral\\OpenTelemetry\\Bootloader\\OpenTelemetryBootloader::class,\n        // ...\n    ];\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Centrifugo Publish Handler Service\nDESCRIPTION: PHP implementation of a Centrifugo publish request handler service that processes publish requests and returns appropriate responses. The service implements the ServiceInterface and handles Request\\Publish objects.\nSOURCE: https://github.com/spiral/docs/blob/3.14/docs/en/websockets/services.md#2025-04-20_snippet_15\n\nLANGUAGE: php\nCODE:\n```\nnamespace App\\Endpoint\\Centrifugo;\n\nuse RoadRunner\\Centrifugo\\Payload\\PublishResponse;\nuse RoadRunner\\Centrifugo\\Request;\nuse RoadRunner\\Centrifugo\\Request\\RequestInterface;\nuse Spiral\\RoadRunnerBridge\\Centrifugo\\ServiceInterface;\n\nfinal class PublishService implements ServiceInterface\n{\n    /**\n     * @param Request\\Publish $request\n     */\n    public function handle(RequestInterface $request): void\n    {\n        try {\n            $request->respond(\n                new PublishResponse(...)\n            );\n        } catch (\\Throwable $e) {\n            $request->error($e->getCode(), $e->getMessage());\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Binding Interface to Closure with Dependencies in PHP\nDESCRIPTION: Shows how to bind an interface to a closure that has dependencies which will be automatically resolved by the container.\nSOURCE: https://github.com/spiral/docs/blob/3.14/docs/en/container/configuration.md#2025-04-20_snippet_5\n\nLANGUAGE: php\nCODE:\n```\nuse Spiral\\Core\\BinderInterface;\nuse Spiral\\Core\\Container\\Autowire;\n\npublic function boot(BinderInterface $binder): void\n{\n    $binder->bindSingleton(\n        UserRepositoryInterface::class, \n        static fn(UserConfig $config) => new CycleUserRepository(table: $config->getTable())\n    );\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Message Entity with Cycle ORM Annotations in PHP\nDESCRIPTION: This class represents a message entity in the chat application using Cycle ORM annotations. It defines relationships to Thread and User entities and implements JsonSerializable for API responses.\nSOURCE: https://github.com/spiral/docs/blob/3.14/docs/zh-CN/cookbook/simple-chat.md#2025-04-20_snippet_0\n\nLANGUAGE: php\nCODE:\n```\nnamespace App\\Database;\n\nuse App\\Repository\\MessageRepository;\nuse Cycle\\Annotated\\Annotation\\Column;\nuse Cycle\\Annotated\\Annotation\\Entity;\nuse Cycle\\Annotated\\Annotation\\Relation\\BelongsTo;\n\n#[Entity(repository: MessageRepository::class)]\nclass Message implements \\JsonSerializable\n{\n    #[Column(type: 'primary')]\n    private int $id;\n\n    public function __construct(\n        #[BelongsTo(target: Thread::class)]\n        private Thread $thread,\n        #[BelongsTo(target: User::class)]\n        private User $user,\n        #[Column(type: \"text\")]\n        private string $text,\n    ) {\n    }\n\n    public function jsonSerialize(): array\n    {\n        return [\n            'id' => $this->id,\n            'user' => $this->user,\n            'text' => $this->text,\n        ];\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Messages List Component\nDESCRIPTION: Vue component for displaying message history and handling real-time message updates through Centrifugo subscription.\nSOURCE: https://github.com/spiral/docs/blob/3.14/docs/en/cookbook/simple-chat.md#2025-04-20_snippet_53\n\nLANGUAGE: html\nCODE:\n```\n<template>\n    <div id=\"messages\"\n         ref=\"messages\"\n         class=\"flex flex-col space-y-4 p-3 overflow-y-auto scrollbar-thumb-blue scrollbar-thumb-rounded scrollbar-track-blue-lighter scrollbar-w-2 scrolling-touch\">\n        <Message v-for=\"message in messages\" :key=\"message.id\" :message=\"message\"/>\n    </div>\n\n    <MessageForm :thread=\"thread\"/>\n</template>\n\n<script>\n    import MessageForm from \"./MessageForm.vue\";\n    import Message from \"./Message.vue\"\n\n    function delay(time) {\n        return new Promise(resolve => setTimeout(resolve, time));\n    }\n\n    export default {\n        components: {\n            Message, MessageForm\n        },\n        props: {\n            thread: Number\n        },\n        mounted() {\n            this.centrifuge.rpc('thread:history', {\n                id: this.thread,\n                authToken: this.authToken\n            }).then(ctx => {\n                this.messages = ctx.data.messages;\n                delay(10).then(() => this.scrollToBottom());\n            })\n\n            this.centrifuge.on('publication', ctx => {\n                if (\n                        ctx.channel !== 'chat' ||\n                        ctx.data.type !== 'message' ||\n                        ctx.data.thread.id !== this.thread\n                ) {\n                    return;\n                }\n\n                this.messages.push(ctx.data.message);\n\n                delay(10).then(() => this.scrollToBottom());\n            })\n        },\n        methods: {\n            scrollToBottom() {\n                this.$refs.messages.scrollTop = this.$refs.messages.scrollHeight;\n            }\n        },\n        data() {\n            return {\n                messages: []\n            }\n        },\n    }\n</script>\n```\n\n----------------------------------------\n\nTITLE: Adding Lock Bootloader to Kernel (Constant Approach)\nDESCRIPTION: Shows how to add the LockBootloader to the list of bootloaders in the Kernel class using the LOAD constant.\nSOURCE: https://github.com/spiral/docs/blob/3.14/docs/en/advanced/locks.md#2025-04-20_snippet_1\n\nLANGUAGE: php\nCODE:\n```\nprotected const LOAD = [\n    // ...\n    \\Spiral\\RoadRunnerBridge\\Bootloader\\LockBootloader::class,\n    // ...\n];\n```\n\n----------------------------------------\n\nTITLE: Implementing Selective Reader for Multiple Syntax Support\nDESCRIPTION: Example of using SelectiveReader to automatically choose the correct reader based on the syntax used. This is useful during migration from annotations to attributes.\nSOURCE: https://github.com/spiral/docs/blob/3.14/docs/en/advanced/attributes.md#2025-04-20_snippet_21\n\nLANGUAGE: php\nCODE:\n```\n$reader = new \\Spiral\\Attributes\\Composite\\SelectiveReader([\n    new \\Spiral\\Attributes\\AnnotationReader(),\n    new \\Spiral\\Attributes\\AttributeReader(),\n]);\n\n$annotations = $reader->getClassMetadata(new ReflectionClass(ClassWithAnnotations::class));\n// returns iterable<ExampleAnnotation>\n\n$attributes = $reader->getClassMetadata(new ReflectionClass(ClassWithAttributes::class));\n// returns iterable<ExampleAttribute>\n```\n\n----------------------------------------\n\nTITLE: Invoking Parent Content in Stempler Templates\nDESCRIPTION: Demonstrates how to preserve parent block content by using <block:parent/> within a redefined block. The example shows a template extending a base layout while keeping the original content.\nSOURCE: https://github.com/spiral/docs/blob/3.14/docs/en/views/stempler.md#2025-04-20_snippet_15\n\nLANGUAGE: html\nCODE:\n```\n<extends:layout.base title=\"Homepage\" body-class=\"homepage\"/>\n\n<block:content>\n    This is homepage content.\n    <block:parent/>\n</block:content>\n```\n\n----------------------------------------\n\nTITLE: Multiple Setter Attributes Example in PHP\nDESCRIPTION: Shows how to apply multiple setter attributes to a single property for sequential data filtering operations.\nSOURCE: https://github.com/spiral/docs/blob/3.14/docs/en/filters/filter.md#2025-04-20_snippet_20\n\nLANGUAGE: php\nCODE:\n```\n#[Post]\n#[Setter(filter: 'strval')]\n#[Setter('ltrim', '-')]\n#[Setter('rtrim', ' ')]\n#[Setter('htmlspecialchars')]\npublic string $name;\n```\n\n----------------------------------------\n\nTITLE: Defining a Route with Parameter Pattern in PHP\nDESCRIPTION: Demonstrates how to specify a pattern for a route parameter, in this case ensuring the 'id' parameter is numeric.\nSOURCE: https://github.com/spiral/docs/blob/3.14/docs/en/http/routing.md#2025-04-20_snippet_32\n\nLANGUAGE: php\nCODE:\n```\n$router->setRoute('home', new Route(\n    '/user/<id:\\d+>',\n    function (ServerRequestInterface $request, ResponseInterface $response): array {\n        return $request->getAttribute('route')->getMatches();\n    }\n));\n```\n\n----------------------------------------\n\nTITLE: Implementing Custom Console Input Interface in PHP\nDESCRIPTION: Creates a custom ConsoleInput class implementing FilterInputInterface to handle console input for filters.\nSOURCE: https://github.com/spiral/docs/blob/3.14/docs/en/cookbook/console-validation.md#2025-04-20_snippet_1\n\nLANGUAGE: php\nCODE:\n```\nnamespace App\\Application\\Console;\n\nuse Spiral\\Filters\\InputInterface as FilterInputInterface;\nuse Symfony\\Component\\Console\\Input\\InputInterface;\n\nfinal class ConsoleInput implements FilterInputInterface\n{\n    public function __construct(\n        private readonly InputInterface $input\n    ) {\n    }\n\n    public function withPrefix(string $prefix, bool $add = true): self\n    {\n        return $this;\n    }\n\n    public function getValue(string $source, string $name = null): mixed\n    {\n        return match ($source) {\n            'argument' => $this->input->getArgument($name),\n            'option' => $this->input->getOption($name),\n            default => throw new \\InvalidArgumentException('Invalid input source'),\n        };\n    }\n\n    public function hasValue(string $source, string $name): bool\n    {\n        return match ($source) {\n            'argument' => $this->input->hasArgument($name),\n            'option' => $this->input->hasOption($name),\n            default => throw new \\InvalidArgumentException('Invalid input source'),\n        };\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Zero-compare Filters in PHP\nDESCRIPTION: Shows how to use value filters that check for positive, negative, non-positive, or non-negative values based on a base type.\nSOURCE: https://github.com/spiral/docs/blob/3.14/docs/en/component/data-grid.md#2025-04-20_snippet_38\n\nLANGUAGE: php\nCODE:\n```\nuse Spiral\\DataGrid\\Specification\\Value;\n\n$positive = new Value\\PositiveValue(new Value\\IntValue());       // as int should be > 0\n$negative = new Value\\NegativeValue(new Value\\IntValue());       // as int should be < 0\n$nonPositive = new Value\\NonPositiveValue(new Value\\IntValue()); // as int should be >= 0\n$nonNegative = new Value\\NonNegativeValue(new Value\\IntValue()); // as int should be <= 0\n```\n\n----------------------------------------\n\nTITLE: Customizing CloudFront Resolver in PHP\nDESCRIPTION: Shows how to customize the CloudFront Resolver with custom time generators, expiration parsers, and default expiration time.\nSOURCE: https://github.com/spiral/docs/blob/3.14/docs/en/advanced/storage.md#2025-04-20_snippet_33\n\nLANGUAGE: php\nCODE:\n```\n$cloudfront = (new \\Spiral\\Distribution\\Resolver\\CloudFrontResolver(...))\n    ->withDateTimeFactory(new CustomCurrentDateGenerator())\n    ->withDateTimeIntervalFactory(new CustomExpirationParser())\n    ->withExpirationDate('PT30S');\n```\n\n----------------------------------------\n\nTITLE: Broadcasting with Specific Driver Connection\nDESCRIPTION: Example of broadcasting using a specific driver connection through BroadcastManagerInterface.\nSOURCE: https://github.com/spiral/docs/blob/3.14/docs/en/websockets/broadcasting.md#2025-04-20_snippet_5\n\nLANGUAGE: php\nCODE:\n```\nuse Spiral\\Broadcasting\\BroadcastManagerInterface;\nuse Spiral\\Serializer\\SerializerInterface;\n\nclass OrderService\n{\n    public function __construct(\n        private readonly BroadcastManagerInterface $broadcast,\n        private readonly SerializerInterface $serializer\n    ) {\n    }\n\n    public function send(string $orderUuid): void\n    {\n        $this->broadcast\n            ->connection('log')\n            ->publish(\n               \"order.{$orderUuid}\",\n                $this->serializer->serialize(['status' => 'purchased'])\n            );\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Grid Filter with Search and Modal\nDESCRIPTION: Implementation of grid filter combining search functionality with a modal window containing filter forms.\nSOURCE: https://github.com/spiral/docs/blob/3.14/docs/en/keeper/components.md#2025-04-20_snippet_6\n\nLANGUAGE: xhtml\nCODE:\n```\n<ui:grid url=\"@action('users.list', inject('params', []))\" namespace=\"main\">\n    <grid:filter search=\"true\" immediate=\"300\" buttons=\"true\">\n        <form:input name=\"firstName\" label=\"First Name\" value=\"\" size=\"6\" required=\"true\"/>\n        <form:input name=\"lastName\" label=\"Last Name\" value=\"\" size=\"6\" required=\"true\"/>\n        <form:input name=\"email\" label=\"Email\" value=\"\" required=\"true\"/>\n    </grid:filter>\n</ui:grid>\n```\n\n----------------------------------------\n\nTITLE: Accessing Default Token Storage from Container\nDESCRIPTION: Shows how to retrieve the default token storage instance from the application's service container.\nSOURCE: https://github.com/spiral/docs/blob/3.14/docs/en/security/authentication.md#2025-04-20_snippet_4\n\nLANGUAGE: php\nCODE:\n```\n$storage = $container->get(\\Spiral\\Auth\\TokenStorageInterface::class); \n// Will return a default Session token storage\n```\n\n----------------------------------------\n\nTITLE: Using Filtered Data in Spiral Framework\nDESCRIPTION: Demonstrates how to access filtered data from a Filter class using both direct property access and getData() method.\nSOURCE: https://github.com/spiral/docs/blob/3.14/docs/en/filters/filter.md#2025-04-20_snippet_24\n\nLANGUAGE: php\nCODE:\n```\npublic function index(MyFilter $filter): void\n{\n    dump($filter->getData()); // {name: ..., email: ...}\n\n    // or\n    dump($filter->email);\n    dump($filter->name);\n}\n```\n\n----------------------------------------\n\nTITLE: Using Auto-Configuration in Another Bootloader\nDESCRIPTION: Shows how to use the auto-configuration API from another bootloader to modify configuration values.\nSOURCE: https://github.com/spiral/docs/blob/3.14/docs/en/framework/config.md#2025-04-20_snippet_6\n\nLANGUAGE: php\nCODE:\n```\nnamespace App\\Application\\Bootloader;\n\nuse Spiral\\Boot\\Bootloader\\Bootloader;\n\nclass SomeBootloader extends Bootloader\n{\n    public function init(GithubBootloader $github): void\n    {\n        $github->setAccessToken('xxx-xxxx');\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Adding TokenizerListenerBootloader using Constant in Spiral Kernel\nDESCRIPTION: Alternative method to register the TokenizerListenerBootloader in your application kernel using a SYSTEM constant. This ensures the bootloader is loaded early in the bootstrap process.\nSOURCE: https://github.com/spiral/docs/blob/3.14/docs/en/advanced/tokenizer.md#2025-04-20_snippet_13\n\nLANGUAGE: php\nCODE:\n```\nprotected const SYSTEM = [\n    \\Spiral\\Tokenizer\\Bootloader\\TokenizerListenerBootloader::class,\n    // ...\n];\n```\n\n----------------------------------------\n\nTITLE: Job Handler Declaration Configuration in PHP\nDESCRIPTION: PHP configuration for job handler declarations that specifies the namespace for job handler classes. This configuration is used by the scaffolding command.\nSOURCE: https://github.com/spiral/docs/blob/3.14/docs/en/basics/scaffolding.md#2025-04-20_snippet_28\n\nLANGUAGE: php\nCODE:\n```\nSpiral\\Scaffolder\\Declaration\\JobHandlerDeclaration::TYPE => [\n    'namespace' => 'Endpoint\\Job',\n],\n```\n\n----------------------------------------\n\nTITLE: RoadRunner HTTP Server Configuration\nDESCRIPTION: YAML configuration for RoadRunner HTTP server settings.\nSOURCE: https://github.com/spiral/docs/blob/3.14/docs/en/start/deployment.md#2025-04-20_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\nhttp:\n  address: 127.0.0.1:8080\n```\n\n----------------------------------------\n\nTITLE: Generating HTML Form with CSRF Token in Spiral\nDESCRIPTION: A PHP function that generates an HTML form with a CSRF token included as a hidden input field.\nSOURCE: https://github.com/spiral/docs/blob/3.14/docs/en/http/csrf.md#2025-04-20_snippet_7\n\nLANGUAGE: php\nCODE:\n```\nuse Psr\\Http\\Message\\ServerRequestInterface;\n\n// ...\n\npublic function changePasswordForm(ServerRequestInterface $request): string\n{\n    $form = <<<FORM\n<form action=\"https://your-application.com/user/password\" method=\"POST\">\n    <input type=\"hidden\" name=\"csrf-token\" value=\"{csrfToken}\"/>\n    <input name=\"password\" type=\"password\">\n    // ...\n    <button type=\"submit\">Change password</button>\n</form>\nFORM;\n\n    return \\str_replace(\n        '{csrfToken}',\n        $request->getAttribute('csrfToken'),\n        $form\n    );\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Authentication Transport in Config File\nDESCRIPTION: Configuration setup for authentication transport settings in the auth.php config file.\nSOURCE: https://github.com/spiral/docs/blob/3.14/docs/en/security/authentication.md#2025-04-20_snippet_15\n\nLANGUAGE: php\nCODE:\n```\nreturn [\n    'defaultTransport' => env('AUTH_TOKEN_TRANSPORT', 'cookie'),\n    // ... storages\n]\n```\n\n----------------------------------------\n\nTITLE: Creating Basic PHP Configuration File\nDESCRIPTION: Example of creating a basic PHP configuration file for GitHub integration with access token.\nSOURCE: https://github.com/spiral/docs/blob/3.14/docs/en/framework/config.md#2025-04-20_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\nreturn [\n    'access_token' => 'xxx-xxxx',\n    // ...\n];\n```\n\n----------------------------------------\n\nTITLE: Implementing Integer Casting Interceptor in PHP\nDESCRIPTION: Demonstrates how to create an interceptor for casting string route parameters to integers.\nSOURCE: https://github.com/spiral/docs/blob/3.14/docs/en/http/interceptors.md#2025-04-20_snippet_21\n\nLANGUAGE: php\nCODE:\n```\nclass StringToIntParametersInterceptor implements CoreInterceptorInterface\n{\n    public function process(string $controller, string $action, array $parameters, CoreInterface $core): mixed\n    {\n        foreach ($parameters as $key => $parameter) {\n            if (ctype_digit($parameter)) {\n                $parameters[$key] = (int)$parameter;\n            }\n        }\n\n        return $core->callAction($controller, $action, $parameters);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Adding Bootloader to Kernel Configuration\nDESCRIPTION: Demonstrates two methods of adding the exception handler bootloader to the kernel configuration.\nSOURCE: https://github.com/spiral/docs/blob/3.14/docs/en/basics/errors.md#2025-04-20_snippet_6\n\nLANGUAGE: php\nCODE:\n```\npublic function defineBootloaders(): array\n{\n    return [\n        // ...\n        \\App\\Application\\Bootloader\\ExceptionHandlerBootloader::class,\n        // ...\n    ];\n}\n```\n\nLANGUAGE: php\nCODE:\n```\nprotected const LOAD = [\n    // ...\n    \\App\\Application\\Bootloader\\ExceptionHandlerBootloader::class,\n    // ...\n];\n```\n\n----------------------------------------\n\nTITLE: Setting Monolog Format in Environment File\nDESCRIPTION: Example of setting custom log message format using environment variable.\nSOURCE: https://github.com/spiral/docs/blob/3.14/docs/en/basics/logging.md#2025-04-20_snippet_1\n\nLANGUAGE: dotenv\nCODE:\n```\nMONOLOG_FORMAT=[%datetime%] %level_name%: %message% %context%\\n\n```\n\n----------------------------------------\n\nTITLE: Implementing Custom KeeperBootloader in PHP\nDESCRIPTION: This snippet demonstrates how to create a custom KeeperBootloader by extending the abstract Spiral\\Keeper\\Bootloader\\KeeperBootloader class. It shows how to configure namespace, prefix, default controller, and load other bootloaders. It also includes middleware and interceptor configurations.\nSOURCE: https://github.com/spiral/docs/blob/3.14/docs/zh-CN/keeper/bootloaders.md#2025-04-20_snippet_0\n\nLANGUAGE: php\nCODE:\n```\nuse App\\Bootloader\\Keeper;\nuse Spiral\\DataGrid\\Interceptor\\GridInterceptor;\nuse Spiral\\Domain\\CycleInterceptor;\nuse Spiral\\Domain\\FilterInterceptor;\nuse Spiral\\Domain\\GuardInterceptor;\nuse Spiral\\Keeper\\Bootloader;\nuse Spiral\\Keeper\\Middleware;\n\nclass KeeperBootloader extends Bootloader\\KeeperBootloader\n{\n    protected const NAMESPACE          = 'keeper';\n    protected const PREFIX             = 'keeper/';\n    protected const DEFAULT_CONTROLLER = 'dashboard';\n    protected const CONFIG_NAME        = '';\n\n    protected const LOAD = [\n        Bootloader\\SitemapBootloader::class,\n        Bootloader\\AnnotatedBootloader::class,\n    ];\n\n    protected const MIDDLEWARE = [\n        Middleware\\LoginMiddleware::class\n    ];\n\n    protected const INTERCEPTORS = [\n        CycleInterceptor::class,\n        GuardInterceptor::class,\n        FilterInterceptor::class,\n        GridInterceptor::class,\n    ];\n}\n```\n\n----------------------------------------\n\nTITLE: Generating Routes with Keeper Route Directive\nDESCRIPTION: Demonstrates how to use the route directive to generate URIs in a specified namespace.\nSOURCE: https://github.com/spiral/docs/blob/3.14/docs/en/keeper/views.md#2025-04-20_snippet_2\n\nLANGUAGE: html\nCODE:\n```\n<a href=\"@keeper('admin', 'createUser')\">[[+ User]]</a>\n```\n\n----------------------------------------\n\nTITLE: Reading Class Metadata Examples\nDESCRIPTION: Examples of how to read class metadata using the ReaderInterface methods.\nSOURCE: https://github.com/spiral/docs/blob/3.14/docs/en/advanced/attributes.md#2025-04-20_snippet_3\n\nLANGUAGE: php\nCODE:\n```\n$reflection = new ReflectionClass(User::class);\n\n$attributes = $reader->getClassMetadata($reflection); \n// returns iterable<object>\n```\n\nLANGUAGE: php\nCODE:\n```\n$reflection = new ReflectionClass(User::class);\n\n$attributes = $reader->getClassMetadata($reflection, Entity::class); \n// returns iterable<Entity>\n```\n\nLANGUAGE: php\nCODE:\n```\n$reflection = new ReflectionClass(User::class);\n\n$attribute = $reader->firstClassMetadata($reflection, Entity::class); \n// returns Entity|null\n```\n\n----------------------------------------\n\nTITLE: Defining Argument Attribute for Console Input in PHP\nDESCRIPTION: Custom attribute class for representing console command arguments in filter definitions.\nSOURCE: https://github.com/spiral/docs/blob/3.14/docs/zh-CN/cookbook/console-validation.md#2025-04-20_snippet_3\n\nLANGUAGE: PHP\nCODE:\n```\nnamespace App\\Application\\Console\\Attribute;\n\nuse Spiral\\Attributes\\NamedArgumentConstructor;\nuse Spiral\\Filters\\Attribute\\Input\\AbstractInput;\nuse Spiral\\Filters\\InputInterface;\n\n#[\\Attribute(\\Attribute::TARGET_PROPERTY), NamedArgumentConstructor]\nfinal class Argument extends AbstractInput\n{\n    public function __construct(\n        public readonly ?string $key = null,\n    ) {\n    }\n\n    public function getValue(InputInterface $input, \\ReflectionProperty $property): mixed\n    {\n        return $input->getValue('argument', $this->getKey($property));\n    }\n\n    public function getSchema(\\ReflectionProperty $property): string\n    {\n        return 'argument:' . $this->getKey($property);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Custom Grid Cell Renderer Implementation in XHTML\nDESCRIPTION: Demonstrates how to implement a custom renderer for grid cells, specifically for displaying roles. Uses a named renderer function to handle the cell content generation.\nSOURCE: https://github.com/spiral/docs/blob/3.14/docs/en/keeper/components.md#2025-04-20_snippet_14\n\nLANGUAGE: xhtml\nCODE:\n```\n<grid:cell.render\n        name=\"roles\"\n        label=\"Roles\"\n        renderer=\"roles\"\n/>\n```\n\n----------------------------------------\n\nTITLE: Configuring and Running Database Migrations in Spiral Framework\nDESCRIPTION: Terminal commands for configuring the application, generating database migrations from entity definitions, and executing those migrations to create the database schema.\nSOURCE: https://github.com/spiral/docs/blob/3.14/docs/zh-CN/cookbook/simple-chat.md#2025-04-20_snippet_4\n\nLANGUAGE: terminal\nCODE:\n```\nphp app.php configure\n```\n\nLANGUAGE: terminal\nCODE:\n```\nphp app.php cycle:migrate -v\n```\n\nLANGUAGE: terminal\nCODE:\n```\nphp app.php migrate -vv\n```\n\nLANGUAGE: terminal\nCODE:\n```\nphp app.php db:list\n```\n\n----------------------------------------\n\nTITLE: Configuring Directory Registry in Spiral Application\nDESCRIPTION: Shows how to configure application directories in the app entry point using app.php. Sets up root and upload directories.\nSOURCE: https://github.com/spiral/docs/blob/3.14/docs/en/basics/files.md#2025-04-20_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n$app = \\App\\Application\\Kernel::create(\n    directories: [\n        'root' => __DIR__,\n        'uploadDir' => __DIR__ . '/upload'\n    ]\n)->run();\n```\n\n----------------------------------------\n\nTITLE: Creating a Notification Class with Importance Level in PHP\nDESCRIPTION: This example shows how to create a notification class that specifies importance level instead of channels. The 'urgent' importance level can be mapped to specific channels in the configuration file's policies section.\nSOURCE: https://github.com/spiral/docs/blob/3.14/docs/en/advanced/notifications.md#2025-04-20_snippet_8\n\nLANGUAGE: php\nCODE:\n```\nuse Symfony\\Component\\Notifier\\Notification\\Notification;\nuse Symfony\\Component\\Notifier\\Notification\\SmsNotificationInterface;\nuse Symfony\\Component\\Notifier\\Message\\SmsMessage;\n\nclass UserBannedNotification extends Notification implements SmsNotificationInterface\n{\n    public function getImportance(): string\n    {\n        return 'urgent';\n    }\n\n    public function asSmsMessage(SmsRecipientInterface $recipient, string $transport = null): ?SmsMessage\n    {\n        return SmsMessage::fromNotification($this, $recipient);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Executing Database Query with Core\nDESCRIPTION: Demonstrates how to execute a SELECT statement using the InterceptableCore instance.\nSOURCE: https://github.com/spiral/docs/blob/3.14/docs/en/framework/interceptors.md#2025-04-20_snippet_2\n\nLANGUAGE: php\nCODE:\n```\n// Execute a SELECT statement on the 'default' database\n$result = $core->callAction(\n  'default', \n  'SELECT * FROM users WHERE id = ?', \n  ['sql_parameters' => [1]]\n);\n```\n\n----------------------------------------\n\nTITLE: Basic Lock Acquisition in Spiral\nDESCRIPTION: Shows how to acquire an exclusive lock on a specified resource, returning an identifier for the lock.\nSOURCE: https://github.com/spiral/docs/blob/3.14/docs/en/advanced/locks.md#2025-04-20_snippet_3\n\nLANGUAGE: php\nCODE:\n```\n$id = $lock->lock('pdf:create');\n```\n\n----------------------------------------\n\nTITLE: Handling Metadata in gRPC Service Method\nDESCRIPTION: Example of accessing request metadata and setting response headers in a gRPC service method.\nSOURCE: https://github.com/spiral/docs/blob/3.14/docs/zh-CN/grpc/service.md#2025-04-20_snippet_5\n\nLANGUAGE: php\nCODE:\n```\npublic function ping(GRPC\\ContextInterface $ctx, PingRequest $in): PingResponse\n{\n    dump($ctx->getValue(':authority'));\n    dump($ctx->getValue(':peer.address'));\n    dump($ctx->getValue(':peer.auth-type'));\n\n    dump($ctx->getValue('user-agent'));\n    dump($ctx->getValue('content-type'));\n    \n    /** @var GRPC\\ResponseHeaders $responseHeaders */\n    $responseHeaders = $ctx->getValue(GRPC\\ResponseHeaders::class);\n    $responseHeaders->set('key', 'value');\n    \n    return new PingResponse([\n        'status_code' => $this->httpClient->get($in->getUrl())->getStatusCode()\n    ]);\n}\n```\n\n----------------------------------------\n\nTITLE: Registering gRPC Client in Container via Bootloader\nDESCRIPTION: Registers the PingerClient as a singleton in the container through a bootloader, allowing for dependency injection. The client is configured with connection details and channel credentials from environment variables.\nSOURCE: https://github.com/spiral/docs/blob/3.14/docs/zh-CN/grpc/client.md#2025-04-20_snippet_1\n\nLANGUAGE: php\nCODE:\n```\nnamespace App\\Application\\Bootloader;\n\nuse App\\Service\\PingerClient;\nuse GRPC\\Pinger\\PingerInterface;\nuse Spiral\\Boot\\Bootloader\\Bootloader;\nuse Spiral\\Boot\\EnvironmentInterface;\n\nfinal class AppBootloader extends Bootloader\n{\n    protected const SINGLETONS = [\n        PingerInterface::class => [self::class, 'initPingService'],\n    ];\n\n    private function initPingService(\n        EnvironmentInterface $env\n    ): PingerInterface {\n        return new PingerClient(\n            $env->get('PING_SERVICE_HOST', '127.0.0.1:9001'),\n            ['credentials' => \\Grpc\\ChannelCredentials::createInsecure()],\n        );\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Registering HTTP Collector Bootloader for Sentry\nDESCRIPTION: Shows how to register the HTTP Collector bootloader to enable sending HTTP request information to Sentry, using Spiral's kernel configuration.\nSOURCE: https://github.com/spiral/docs/blob/3.14/docs/en/basics/errors.md#2025-04-20_snippet_22\n\nLANGUAGE: php\nCODE:\n```\npublic function defineBootloaders(): array\n{\n    return [\n        // ...\n        \\Spiral\\Bootloader\\Debug\\HttpCollectorBootloader::class,\n        \\Spiral\\Sentry\\Bootloader\\SentryReporterBootloader::class,\n        // ...\n    ];\n}\n```\n\n----------------------------------------\n\nTITLE: Rendering Views in Spiral PHP Controller (Prototype)\nDESCRIPTION: Shows how to use the prototype trait to access the views property for rendering views in a Spiral PHP controller.\nSOURCE: https://github.com/spiral/docs/blob/3.14/docs/en/views/basics.md#2025-04-20_snippet_1\n\nLANGUAGE: php\nCODE:\n```\nnamespace App\\Endpoint\\Web;\n\nuse Spiral\\Prototype\\Traits\\PrototypeTrait;\n\nclass HomeController\n{\n    use PrototypeTrait;\n    \n    public function index(): string\n    {\n        return $this->views->render('home');\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring FiltersBootloader using method in Spiral Framework\nDESCRIPTION: PHP code snippet showing how to activate the FiltersBootloader in the Spiral Framework kernel using the defineBootloaders method. This bootloader is necessary for using the spiral/filters-bridge package.\nSOURCE: https://github.com/spiral/docs/blob/3.14/docs/en/filters/bridge.md#2025-04-20_snippet_1\n\nLANGUAGE: php\nCODE:\n```\npublic function defineBootloaders(): array\n{\n    return [\n        // ...\n        \\Spiral\\Filters\\Bootloader\\FiltersBootloader::class,\n        // ...\n    ];\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a Simple Route Handler in PHP\nDESCRIPTION: Demonstrates how to create a basic route handler for the root path using the RouterInterface in a bootloader.\nSOURCE: https://github.com/spiral/docs/blob/3.14/docs/en/http/routing.md#2025-04-20_snippet_26\n\nLANGUAGE: php\nCODE:\n```\nnamespace App\\Application\\Bootloader;\n\nuse Spiral\\Boot\\Bootloader\\Bootloader;\nuse Spiral\\Router\\Route;\nuse Spiral\\Router\\RouterInterface;\n\nclass RoutesBootloader extends Bootloader\n{\n    public function boot(RouterInterface $router): void\n    {\n        $router->setRoute(\n            'home',                    // route name \n            new Route(\n                '/',                   // pattern\n                fn () => 'hello world' // handler\n            )\n        );\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Asserting Job Push Count in Spiral Queue Tests\nDESCRIPTION: This snippet shows how to use the assertPushedTimes method to check if a job was pushed a specific number of times in Spiral Framework queue tests.\nSOURCE: https://github.com/spiral/docs/blob/3.14/docs/en/testing/queue.md#2025-04-20_snippet_3\n\nLANGUAGE: php\nCODE:\n```\n$this->queue->assertPushedTimes('mail.job', 2);\n```\n\n----------------------------------------\n\nTITLE: Implementing ArrayValue Filter in PHP\nDESCRIPTION: Shows how to use ArrayValue to validate and convert array inputs according to a base value type.\nSOURCE: https://github.com/spiral/docs/blob/3.14/docs/en/component/data-grid.md#2025-04-20_snippet_36\n\nLANGUAGE: php\nCODE:\n```\nuse Spiral\\DataGrid\\Specification\\Value;\n\n// expects an array of int values\n$value = new Value\\ArrayValue(new Value\\IntValue());\n \n$value->accepts('123');   // false\n$value->accepts([]);      // false\n$value->accepts(['123']); // true\n$value->convert(['123']); // [123]\n```\n\n----------------------------------------\n\nTITLE: Custom Retryable Exception Implementation\nDESCRIPTION: Implementation of a custom exception that implements RetryableExceptionInterface for job retries.\nSOURCE: https://github.com/spiral/docs/blob/3.14/docs/en/queue/jobs.md#2025-04-20_snippet_15\n\nLANGUAGE: php\nCODE:\n```\nuse Spiral\\Queue\\Exception\\RetryableExceptionInterface;\nuse Spiral\\Queue\\RetryPolicy;\n\nclass RetryableException extends \\Exception implements RetryableExceptionInterface\n{\n    public function isRetryable(): bool\n    {\n        return true;\n    }\n\n    public function getRetryPolicy(): ?RetryPolicyInterface\n    {\n        return new RetryPolicy(\n            maxAttempts: 3,\n            delay: 5,\n            multiplier: 2\n        );\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Registering Custom Exception Renderer\nDESCRIPTION: Shows how to register a custom exception renderer using a bootloader class.\nSOURCE: https://github.com/spiral/docs/blob/3.14/docs/en/basics/errors.md#2025-04-20_snippet_5\n\nLANGUAGE: php\nCODE:\n```\nnamespace App\\Application\\Bootloader;\n\nuse Spiral\\Boot\\Bootloader\\Bootloader;\nuse Spiral\\Exceptions\\ExceptionHandler;\nuse Spiral\\YiiErrorHandler\\JsonRenderer;\n\nfinal class ExceptionHandlerBootloader extends Bootloader\n{\n    public function init(ExceptionHandler $handler): void\n    {\n        $handler->addRenderer(new JsonRenderer());\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Custom Login View in Keeper\nDESCRIPTION: Shows how to register a custom login view in the Keeper configuration file.\nSOURCE: https://github.com/spiral/docs/blob/3.14/docs/en/keeper/views.md#2025-04-20_snippet_3\n\nLANGUAGE: php\nCODE:\n```\n<?php\n// app/config/path/to/keeper/config.php\n\nreturn [\n    'loginView' => 'default:path/to/login/view'\n];\n```\n\n----------------------------------------\n\nTITLE: Setting Default Route Parameters in PHP\nDESCRIPTION: Illustrates how to set default route parameters outside the constructor using the withDefaults method, maintaining route immutability.\nSOURCE: https://github.com/spiral/docs/blob/3.14/docs/en/http/routing.md#2025-04-20_snippet_35\n\nLANGUAGE: php\nCODE:\n```\nnamespace App\\Bootloader;\n\nuse Psr\\Http\\Message\\ResponseInterface;\nuse Psr\\Http\\Message\\ServerRequestInterface;\nuse Spiral\\Boot\\Bootloader\\Bootloader;\nuse Spiral\\Router\\Route;\nuse Spiral\\Router\\RouterInterface;\n\nclass RoutesBootloader extends Bootloader\n{\n    public function boot(RouterInterface $router): void\n    {\n        $route = new Route('/[<action>]', function (ServerRequestInterface $request, ResponseInterface $response): array {\n            return $request->getAttribute('route')->getMatches();\n        });\n\n        $router->setRoute('home', $route->withDefaults([\n            'action' => 'default'\n        ]));\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Listing Temporal Workflows and Activities\nDESCRIPTION: This command lists all available Temporal workflows and activities in a Spiral PHP application using the --with-activities or -a option.\nSOURCE: https://github.com/spiral/docs/blob/3.14/docs/en/temporal/usage.md#2025-04-20_snippet_22\n\nLANGUAGE: terminal\nCODE:\n```\nphp app.php temporal:info --with-activities\n```\n\n----------------------------------------\n\nTITLE: Configuring Console Interceptors in PHP\nDESCRIPTION: Configuration snippet showing how to register the validation exception handler interceptor in the console configuration file.\nSOURCE: https://github.com/spiral/docs/blob/3.14/docs/en/cookbook/console-validation.md#2025-04-20_snippet_9\n\nLANGUAGE: php\nCODE:\n```\nreturn [\n    'interceptors' => [\n        App\\Command\\HandleValidationExceptions::class,\n        // ...\n    ],\n];\n```\n\n----------------------------------------\n\nTITLE: Implementing Doctrine Basic Instantiator for Metadata Class\nDESCRIPTION: Example of a metadata class using the Doctrine Basic Instantiator pattern, where annotation properties are directly filled when the class is instantiated. Compatible with both attribute and annotation syntax.\nSOURCE: https://github.com/spiral/docs/blob/3.14/docs/en/advanced/attributes.md#2025-04-20_snippet_14\n\nLANGUAGE: php\nCODE:\n```\n/** @Annotation */\n#[\\Attribute]\nclass CustomMetadataClass\n{\n    public $property;\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Custom Lock Expiration Time\nDESCRIPTION: Example of specifying a custom lock expiration time when preventing task overlapping.\nSOURCE: https://github.com/spiral/docs/blob/3.14/docs/en/advanced/scheduler.md#2025-04-20_snippet_14\n\nLANGUAGE: php\nCODE:\n```\n$schedule->command('ping', ['https://google.com'])\n   ->everyMinute()\n   ->withoutOverlapping(60)\n   -> ...;\n```\n\n----------------------------------------\n\nTITLE: Basic Stack Collection in Stempler\nDESCRIPTION: Demonstrates how to create a stack collection point using <stack:collect> and how to add content to it with <stack:push>. Stacks allow aggregating content across template segments.\nSOURCE: https://github.com/spiral/docs/blob/3.14/docs/en/views/stempler.md#2025-04-20_snippet_25\n\nLANGUAGE: html\nCODE:\n```\ncollect name=\"my-stack\">\n    default content\n</stack:collect>\n\n<stack:push name=\"my-stack\">\n    my value\n</stack:push>\n```\n\n----------------------------------------\n\nTITLE: UserContext Bootloader Implementation\nDESCRIPTION: Bootloader class that provides container binding for accessing UserContext from request attributes.\nSOURCE: https://github.com/spiral/docs/blob/3.14/docs/en/http/middleware.md#2025-04-20_snippet_12\n\nLANGUAGE: php\nCODE:\n```\nnamespace App\\Application\\Bootloader;\n\nuse Psr\\Http\\Message\\ServerRequestInterface;\nuse Spiral\\Boot\\Bootloader\\Bootloader;\nuse Spiral\\Core\\Exception\\ScopeException;\n\nclass UserContextBootloader extends Bootloader \n{\n    protected const BINDINGS = [\n        UserContext::class => [self::class, 'userContext']\n    ];\n    \n    private function userContext(ServerRequestInterface $request): UserContext\n    {\n        $userContext = $request->getAttribute('userContext', null);\n        if ($userContext === null) {\n            throw new ScopeException('Unable to resolve UserContext, invalid request scope');\n        }\n        \n        return $userContext;\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Registering FastRoute Bootloader Using Method\nDESCRIPTION: Adding the FastRoute bootloader to the application kernel using the defineBootloaders method.\nSOURCE: https://github.com/spiral/docs/blob/3.14/docs/en/cookbook/psr-15.md#2025-04-20_snippet_2\n\nLANGUAGE: php\nCODE:\n```\npublic function defineBootloaders(): array\n{\n    return [\n        // ...\n        \\Spiral\\Bootloader\\Http\\HttpBootloader::class,\n        \\App\\Bootloader\\FastRouteBootloader::class,\n        // ...\n    ];\n}\n```\n\n----------------------------------------\n\nTITLE: Generating SSL Certificate for GRPC Security\nDESCRIPTION: Bash command to generate a server key and certificate using OpenSSL for securing GRPC communications.\nSOURCE: https://github.com/spiral/docs/blob/3.14/docs/en/grpc/configuration.md#2025-04-20_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\nopenssl req -newkey rsa:2048 -nodes -keyout app.key -x509 -days 365 -out app.crt\n```\n\n----------------------------------------\n\nTITLE: Acquiring Lock with Custom ID\nDESCRIPTION: Demonstrates how to acquire a lock with a specific identifier, useful for tracking or logging purposes.\nSOURCE: https://github.com/spiral/docs/blob/3.14/docs/en/advanced/locks.md#2025-04-20_snippet_6\n\nLANGUAGE: php\nCODE:\n```\n$id = $lock->lock('pdf:create', id: '14e1b600-9e97-11d8-9f32-f2801f1b9fd1');\n```\n\n----------------------------------------\n\nTITLE: Configuring Route Group Middleware Profiler\nDESCRIPTION: Adding ProfilerMiddleware to a specific middleware group in the routes bootloader.\nSOURCE: https://github.com/spiral/docs/blob/3.14/docs/en/basics/debug.md#2025-04-20_snippet_17\n\nLANGUAGE: php\nCODE:\n```\nnamespace App\\Application\\Bootloader;\n\nuse Spiral\\Bootloader\\Http\\RoutesBootloader as BaseRoutesBootloader;\nuse Spiral\\Profiler\\ProfilerMiddleware;\n\nfinal class RoutesBootloader extends BaseRoutesBootloader\n{\n    protected function middlewareGroups(): array\n    {\n        return [\n            'web' => [\n                // ...\n            ],\n            'profiler' => [\n                ProfilerMiddleware::class,\n                'middleware:web',\n            ],\n        ];\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Registering Storage Bootloader Using Constant\nDESCRIPTION: Code example showing how to add the StorageBootloader to the application kernel using the LOAD constant.\nSOURCE: https://github.com/spiral/docs/blob/3.14/docs/en/advanced/storage.md#2025-04-20_snippet_2\n\nLANGUAGE: php\nCODE:\n```\nprotected const LOAD = [\n    // ...\n    \\Spiral\\Storage\\Bootloader\\StorageBootloader::class,\n    // ...\n];\n```\n\n----------------------------------------\n\nTITLE: Registering Configure Sequences in Spiral PHP\nDESCRIPTION: Example of registering configure sequences in a bootloader class. Shows how to add both command-based sequences and closure-based sequences with auto-wiring support.\nSOURCE: https://github.com/spiral/docs/blob/3.14/docs/en/console/sequences.md#2025-04-20_snippet_0\n\nLANGUAGE: php\nCODE:\n```\nuse Symfony\\Component\\Console\\Output\\OutputInterface;\nuse Psr\\Container\\ContainerInterface;\nuse Spiral\\Boot\\Bootloader\\Bootloader;\nuse Spiral\\Console\\Bootloader\\ConsoleBootloader;\n\nclass AppBootloader extends Bootloader\n{\n    public function boot(ConsoleBootloader $console): void\n    {\n        $console->addConfigureSequence(\n            sequence: 'generate:keys', \n            header: '<info>Generating SSH keys for the application...</info>'\n        );\n        \n        // Add closure in a sequence\n        // It supports auto-wiring of arguments\n        $console->addConfigureSequence(\n            static function(OutputInterface $output, ContainerInterface $container): void {\n                // do something\n            }, \n            '<info>Caching something...</info>'\n        );\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Metrics with Retry Decorator in PHP\nDESCRIPTION: This PHP code demonstrates how to use a retry decorator when creating a metrics instance, allowing for multiple attempts to send metrics.\nSOURCE: https://github.com/spiral/docs/blob/3.14/docs/en/advanced/prometheus-metrics.md#2025-04-20_snippet_8\n\nLANGUAGE: php\nCODE:\n```\n$factory = new \\Spiral\\RoadRunner\\Metrics\\MetricsFactory();\n$rpc = $container->get(\\Spiral\\Goridge\\RPC\\RPCInterface::class);\n\n$metrics = $factory->create($rpc, new \\Spiral\\RoadRunner\\Metrics\\MetricsOptions(\n    retryAttempts: 3,\n    retrySleepMicroseconds: 50,\n));\n```\n\n----------------------------------------\n\nTITLE: Registering a Listener in a Bootloader in Spiral Framework\nDESCRIPTION: Example of how to register a custom listener in a bootloader. The listener is added to the TokenizerListenerRegistryInterface for the tokenizer to utilize.\nSOURCE: https://github.com/spiral/docs/blob/3.14/docs/en/advanced/tokenizer.md#2025-04-20_snippet_19\n\nLANGUAGE: php\nCODE:\n```\nuse Spiral\\Tokenizer\\TokenizerListenerRegistryInterface;\n\nclass AppBootloader extends Bootloader\n{\n    public function init(\n        TokenizerListenerRegistryInterface $listenerRegistry,\n        RouteAttributeListener $listener\n    ): void {\n        $listenerRegistry->addListener($listener);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Asserting No Jobs Were Pushed in Spiral Queue Tests\nDESCRIPTION: This snippet shows how to use the assertNothingPushed method to check if no jobs were pushed to the queue in Spiral Framework queue tests.\nSOURCE: https://github.com/spiral/docs/blob/3.14/docs/en/testing/queue.md#2025-04-20_snippet_5\n\nLANGUAGE: php\nCODE:\n```\n$this->queue->assertNothingPushed();\n```\n\n----------------------------------------\n\nTITLE: Using Dot Notation with Post Attribute in Spiral Filters\nDESCRIPTION: Example showing how to use dot notation to access nested data structures in POST data. This maps the 'names.first' field from a JSON request body to the 'firstName' property.\nSOURCE: https://github.com/spiral/docs/blob/3.14/docs/en/filters/filter.md#2025-04-20_snippet_17\n\nLANGUAGE: php\nCODE:\n```\nnamespace App\\Endpoint\\Web\\Filter;\n\nuse Spiral\\Filters\\Attribute\\Input\\Post;\nuse Spiral\\Filters\\Model\\Filter;\nuse Spiral\\Filters\\Model\\FilterDefinitionInterface;\nuse Spiral\\Filters\\Model\\HasFilterDefinition;\nuse Spiral\\Validator\\FilterDefinition;\n\nclass MyFilter extends Filter implements HasFilterDefinition\n{\n    #[Post(key: 'names.first')]\n    public string $firstName;\n    \n    public function filterDefinition(): FilterDefinitionInterface\n    {\n        return new FilterDefinition([\n            'firstName' => ['string', 'required']\n        ]);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Message Component for Chat Interface\nDESCRIPTION: Vue component for rendering individual chat messages with user attribution and styling based on message ownership.\nSOURCE: https://github.com/spiral/docs/blob/3.14/docs/en/cookbook/simple-chat.md#2025-04-20_snippet_51\n\nLANGUAGE: html\nCODE:\n```\n<template>\n    <div class=\"chat-message\">\n        <div class=\"flex items-end\" :class=\"{'justify-end': isOwnMessage}\">\n            <div class=\"flex flex-col space-y-2 text-xs mx-2 order-2 items-start\">\n                <div>\n          <span class=\"px-4 py-2 rounded-lg inline-block rounded-bl-none\"\n                :class=\"{'bg-blue-600 text-white': isOwnMessage, 'bg-gray-300 text-gray-600': !isOwnMessage}\">\n             {{ message.text }}\n          </span>\n                </div>\n                <span>\n           {{ message.user.username }}\n        </span>\n            </div>\n        </div>\n    </div>\n</template>\n\n<script>\n    export default {\n        props: {\n            message: Object\n        },\n        computed: {\n            isOwnMessage() {\n                return this.message.user.id === this.user.id\n            }\n        }\n    }\n</script>\n```\n\n----------------------------------------\n\nTITLE: Configuring RoadRunner Metrics in YAML\nDESCRIPTION: This YAML configuration activates the metrics service in RoadRunner, setting up the prometheus client address.\nSOURCE: https://github.com/spiral/docs/blob/3.14/docs/en/advanced/prometheus-metrics.md#2025-04-20_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\nrpc:\n  listen: tcp://127.0.0.1:6001\n\n# ...\n\nmetrics:\n  # prometheus client address (path /metrics added automatically)\n  address: 127.0.0.1:2112\n```\n\n----------------------------------------\n\nTITLE: Registering Filter Interceptors in Spiral Configuration\nDESCRIPTION: Example configuration showing how to register custom and built-in filter interceptors in the Spiral filters configuration file. The configuration includes both a custom guard check interceptor and required system interceptors.\nSOURCE: https://github.com/spiral/docs/blob/3.14/docs/en/filters/interceptors.md#2025-04-20_snippet_2\n\nLANGUAGE: php\nCODE:\n```\nuse App\\Filter\\CheckGuardInterceptor;\nuse Spiral\\Filters\\Model\\Interceptor\\PopulateDataFromEntityInterceptor;\nuse Spiral\\Filters\\Model\\Interceptor\\ValidateFilterInterceptor;\n\nreturn [    \n     'interceptors' => [\n        CheckGuardInterceptor::class,\n        PopulateDataFromEntityInterceptor::class,\n        ValidateFilterInterceptor::class,\n     ],\n     // ...\n];\n```\n\n----------------------------------------\n\nTITLE: Exception Handling Interceptor for WebSocket Requests\nDESCRIPTION: An interceptor that provides centralized error handling and reporting for WebSocket service methods\nSOURCE: https://github.com/spiral/docs/blob/3.14/docs/zh-CN/websockets/interceptors.md#2025-04-20_snippet_2\n\nLANGUAGE: php\nCODE:\n```\nnamespace App\\Entrypoint\\Centrifugo\\Interceptor;\n\nuse Spiral\\Core\\CoreInterceptorInterface;\nuse Spiral\\Core\\CoreInterface;\nuse Spiral\\Exceptions\\ExceptionReporterInterface;\nuse Spiral\\RoadRunner\\GRPC\\Exception\\GRPCException;\nuse Spiral\\RoadRunner\\GRPC\\Exception\\GRPCExceptionInterface;\n\nfinal class ExceptionHandlerInterceptor implements CoreInterceptorInterface\n{\n    public function __construct(\n        private readonly ExceptionReporterInterface $reporter\n    ) {\n    }\n\n    public function process(string $controller, string $action, array $parameters, CoreInterface $core): mixed\n    {\n        try {\n            \\assert($parameters['request'] instanceof RequestInterface);\n\n            return $core->callAction($controller, $action, $parameters);\n        } catch (\\Throwable $e) {\n            $this->reporter->report($e);\n\n            $request->error($e->getCode(), $e->getMessage());\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Retrieving Blade View Instance in Spiral Framework\nDESCRIPTION: This method returns an instance of the view class associated with the view path. It uses the Blade compiler engine to create a BladeView instance.\nSOURCE: https://github.com/spiral/docs/blob/3.14/docs/en/views/basics.md#2025-04-20_snippet_13\n\nLANGUAGE: php\nCODE:\n```\nuse Spiral\\Views\\ViewInterface;\nuse Illuminate\\View\\Engines\\CompilerEngine;\n\nprivate readonly CompilerEngine $blade;\n\npublic function get(string $path, ContextInterface $context): ViewInterface\n{\n    $filepath = $this->getLoader()->load($path)->getFilename();\n    \n    return new BladeView($this->blade, $filepath);\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Tokenizer Search Directories in PHP Configuration File\nDESCRIPTION: Shows how to add additional directories for Tokenizer to search by modifying the tokenizer.php configuration file in a Spiral application.\nSOURCE: https://github.com/spiral/docs/blob/3.14/docs/en/advanced/tokenizer.md#2025-04-20_snippet_4\n\nLANGUAGE: php\nCODE:\n```\nreturn [\n    'directories' => [\n        directory('app'),\n        directory('vendor') . 'spiral/validator/src',\n    ],\n];\n```\n\n----------------------------------------\n\nTITLE: Creating Named Command Sequences\nDESCRIPTION: Implementation of named sequences for organizing and reusing command sequences in Spiral Framework\nSOURCE: https://github.com/spiral/docs/blob/3.14/docs/en/cookbook/migration-from-v2.md#2025-04-20_snippet_24\n\nLANGUAGE: php\nCODE:\n```\nuse Spiral\\Boot\\Bootloader\\Bootloader;\nuse Spiral\\Console\\Bootloader\\ConsoleBootloader;\n\nclass MyPackageAssetsBootloader extends Bootloader\n{\n    public function init(ConsoleBootloader $console): void\n    {\n        $console->addSequence('publish:assets', PublishCssFilesCommand::class);\n        $console->addSequence('publish:assets', PublishJsFilesCommand::class);\n    }\n}\n```\n\nLANGUAGE: php\nCODE:\n```\nuse Spiral\\Console\\Command\\SequenceCommand;\nuse Psr\\Container\\ContainerInterface;\nuse Spiral\\Console\\Config\\ConsoleConfig;\n\nclass PublishAssetsCommand extends SequenceCommand\n{\n    public function perform(ConsoleConfig $config, ContainerInterface $container): int\n    {\n        $this->info(\"Publishing assets:\");\n        $this->newLine();\n\n        return $this->runSequence(\n            $config->getSequence('publish:assets'), \n            $container\n        );\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Environment Variables Setup in Tests\nDESCRIPTION: Examples of setting environment variables for tests using both class constants and attributes.\nSOURCE: https://github.com/spiral/docs/blob/3.14/docs/en/testing/start.md#2025-04-20_snippet_3\n\nLANGUAGE: php\nCODE:\n```\nuse Tests\\TestCase;\n\nfinal class SomeTest extends TestCase\n{\n    public const ENV = [\n        'DEBUG' => false,\n        // ...\n    ];\n\n    public function testSomeFeature(): void\n    {\n        //\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Reading Constant Metadata Examples\nDESCRIPTION: Examples of how to read constant metadata using the ReaderInterface methods.\nSOURCE: https://github.com/spiral/docs/blob/3.14/docs/en/advanced/attributes.md#2025-04-20_snippet_7\n\nLANGUAGE: php\nCODE:\n```\n$reflection = new ReflectionClassConstant(Example::class, 'CONSTANT_NAME');\n\n$attributes = $reader->getConstantMetadata($reflection); \n// returns iterable<object>\n```\n\nLANGUAGE: php\nCODE:\n```\n$reflection = new ReflectionClassConstant(Example::class, 'CONSTANT_NAME');\n\n$attributes = $reader->getConstantMetadata($reflection, Deprecated::class); \n// returns iterable<Deprecated>\n```\n\nLANGUAGE: php\nCODE:\n```\n$reflection = new ReflectionClassConstant(Example::class, 'CONSTANT_NAME');\n\n$getter = $reader->firstConstantMetadata($reflection, Deprecated::class); \n// returns Deprecated|null\n```\n\n----------------------------------------\n\nTITLE: Asserting No Emails Sent\nDESCRIPTION: Shows how to verify that no emails were sent during test execution using assertNothingSent().\nSOURCE: https://github.com/spiral/docs/blob/3.14/docs/en/testing/mail.md#2025-04-20_snippet_4\n\nLANGUAGE: php\nCODE:\n```\n$this->mailer->assertNothingSent();\n```\n\n----------------------------------------\n\nTITLE: Obtaining View Instance in Spiral PHP\nDESCRIPTION: Demonstrates how to obtain a view instance using the get method for caching in stateless components. Shows rendering multiple instances of the same view with different data.\nSOURCE: https://github.com/spiral/docs/blob/3.14/docs/en/views/basics.md#2025-04-20_snippet_2\n\nLANGUAGE: php\nCODE:\n```\nuse Spiral\\Views\\ViewsInterface;\n\npublic function index(): string\n{\n    /** @var \\Spiral\\Views\\ViewInterface $view */\n    $view = $this->views->get('profile-card');\n    \n    $card1 = $view->render('name' => 'John']);\n    $card2 = $view->render(['name' => 'Jane']);\n    \n    return \"<html><body>{$card1} {$card2}</body></html>\";\n}\n```\n\n----------------------------------------\n\nTITLE: Authentication Interceptor for WebSocket Requests\nDESCRIPTION: An interceptor that validates user authentication tokens and provides user identity to the service before processing WebSocket requests\nSOURCE: https://github.com/spiral/docs/blob/3.14/docs/zh-CN/websockets/interceptors.md#2025-04-20_snippet_0\n\nLANGUAGE: php\nCODE:\n```\nnamespace App\\Entrypoint\\Centrifugo\\Interceptor;\n\nuse Psr\\EventDispatcher\\EventDispatcherInterface;\nuse RoadRunner\\Centrifugo\\Request\\RequestInterface;\nuse Spiral\\Auth\\ActorProviderInterface;\nuse Spiral\\Auth\\AuthContext;\nuse Spiral\\Auth\\AuthContextInterface;\nuse Spiral\\Core\\CoreInterceptorInterface;\nuse Spiral\\Core\\CoreInterface;\nuse Spiral\\Core\\ScopeInterface;\nuse Spiral\\Prototype\\Traits\\PrototypeTrait;\n\nfinal class AuthenticatorInterceptor implements CoreInterceptorInterface\n{\n    use PrototypeTrait;\n\n    public function __construct(\n        private readonly ScopeInterface $scope,\n        private readonly ActorProviderInterface $actorProvider,\n        private readonly ?EventDispatcherInterface $eventDispatcher = null,\n    ) {\n    }\n\n    public function process(string $controller, string $action, array $parameters, CoreInterface $core): mixed\n    {\n        $request = $parameters['request'];\n        \\assert($request instanceof RequestInterface);\n\n        $authToken = $request->getData()['authToken'] ?? null;\n\n        if (!$authToken || !$token = $this->authTokens->load($authToken)) {\n            $request->error(403, 'Unauthorized');\n            return null;\n        }\n\n        $auth = new AuthContext($this->actorProvider, $this->eventDispatcher);\n        $auth->start($token);\n\n        return $this->scope->runScope([\n            AuthContextInterface::class => $auth,\n        ], fn () => $core->callAction($controller, $action, $parameters));\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Registering Centrifugo Bootloader in Spiral Kernel (Constant Approach)\nDESCRIPTION: Shows how to register the CentrifugoBootloader in the Spiral application kernel using a constant declaration.\nSOURCE: https://github.com/spiral/docs/blob/3.14/docs/en/websockets/configuration.md#2025-04-20_snippet_1\n\nLANGUAGE: php\nCODE:\n```\nprotected const LOAD = [\n    // ...\n    \\Spiral\\RoadRunnerBridge\\Bootloader\\CentrifugoBootloader::class,\n    // ...\n];\n```\n\n----------------------------------------\n\nTITLE: Basic DataGrid Declaration\nDESCRIPTION: Demonstrates a simple DataGrid declaration with basic text cells. The grid fetches data from a users.list action and displays ID, first name, and last name columns.\nSOURCE: https://github.com/spiral/docs/blob/3.14/docs/zh-CN/keeper/components.md#2025-04-20_snippet_1\n\nLANGUAGE: xhtml\nCODE:\n```\n<ui:grid url=\"@action('users.list', inject('params', []))\" namespace=\"main\">\n    <grid:cell.text name=\"id\" label=\"#\"/>\n    <grid:cell.text name=\"firstName\" label=\"First Name\"/>\n    <grid:cell.text name=\"lastName\" label=\"Last Name\"/>\n</ui:grid>\n```\n\n----------------------------------------\n\nTITLE: Checking File Existence in PHP using Spiral Storage\nDESCRIPTION: Demonstrates how to check if a file exists in a storage bucket using the exists() method.\nSOURCE: https://github.com/spiral/docs/blob/3.14/docs/en/advanced/storage.md#2025-04-20_snippet_15\n\nLANGUAGE: php\nCODE:\n```\n$isExists = $bucket->exists('file.txt');\n```\n\n----------------------------------------\n\nTITLE: Running RoadRunner Server for Job Consumption\nDESCRIPTION: Command to start the RoadRunner server which will listen for and process jobs from the configured queues based on the pipeline settings.\nSOURCE: https://github.com/spiral/docs/blob/3.14/docs/en/cookbook/simple-queue-system.md#2025-04-20_snippet_21\n\nLANGUAGE: terminal\nCODE:\n```\n./rr serve\n```\n\n----------------------------------------\n\nTITLE: Running a Dispatcher with Bindings in Spiral Framework (PHP)\nDESCRIPTION: Shows how to run a dispatcher with custom bindings inside a scope. This example sets up an environment with a 'foo' => 'bar' configuration.\nSOURCE: https://github.com/spiral/docs/blob/3.14/docs/en/testing/start.md#2025-04-20_snippet_7\n\nLANGUAGE: php\nCODE:\n```\n$this->serveDispatcher(HttpDispatcher::class, [\n    \\Spiral\\Boot\\EnvironmentInterface::class => new \\Spiral\\Boot\\Environment([\n        'foo' => 'bar'\n    ]),\n]);\n```\n\n----------------------------------------\n\nTITLE: ReaderInterface Definition for Attribute Reading\nDESCRIPTION: Interface definition for the ReaderInterface, which provides methods for reading attributes from various PHP elements.\nSOURCE: https://github.com/spiral/docs/blob/3.14/docs/en/advanced/attributes.md#2025-04-20_snippet_2\n\nLANGUAGE: php\nCODE:\n```\ninterface ReaderInterface\n{\n    public function getClassMetadata(\\ReflectionClass $class, string $name = null): iterable;\n    public function getPropertyMetadata(\\ReflectionProperty $property, string $name = null): iterable;\n    public function getFunctionMetadata(\\ReflectionFunctionAbstract $function, string $name = null): iterable;\n    public function getConstantMetadata(\\ReflectionClassConstant $constant, string $name = null): iterable;\n    public function getParameterMetadata(\\ReflectionParameter $parameter, string $name = null): iterable;\n    \n    public function firstClassMetadata(\\ReflectionClass $class, string $name): ?object;\n    public function firstPropertyMetadata(\\ReflectionProperty $property, string $name): ?object;\n    public function firstFunctionMetadata(\\ReflectionFunctionAbstract $function, string $name): ?object;\n    public function firstConstantMetadata(\\ReflectionClassConstant $constant, string $name): ?object;\n    public function firstParameterMetadata(\\ReflectionParameter $parameter, string $name): ?object;\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Bootloader Dependencies via Constants\nDESCRIPTION: Demonstrates how to define bootloader dependencies using the DEPENDENCIES constant.\nSOURCE: https://github.com/spiral/docs/blob/3.14/docs/en/framework/bootloaders.md#2025-04-20_snippet_17\n\nLANGUAGE: php\nCODE:\n```\nnamespace App\\Application\\Bootloader;\n\nclass MyBootloader extends Bootloader \n{\n    protected const DEPENDENCIES = [\n        \\Spiral\\Bootloader\\Http\\HttpBootloader::class\n    ];\n    \n    public function boot(): void\n    {\n        // ...\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Queue Configuration Example\nDESCRIPTION: Configuration file showing how to set up job handlers in the queue config.\nSOURCE: https://github.com/spiral/docs/blob/3.14/docs/en/queue/jobs.md#2025-04-20_snippet_11\n\nLANGUAGE: php\nCODE:\n```\nreturn [\n    'registry' => [\n        'handlers' => [\n            'sample::job' => App\\Endpoint\\Job\\SampleJob::class\n        ],\n    ],\n];\n```\n\n----------------------------------------\n\nTITLE: Using Validator in Controller\nDESCRIPTION: Example of using the validator in a controller method to validate input data.\nSOURCE: https://github.com/spiral/docs/blob/3.14/docs/en/validation/spiral.md#2025-04-20_snippet_4\n\nLANGUAGE: php\nCODE:\n```\nuse Spiral\\Http\\Request\\InputManager;\nuse Spiral\\Validation\\ValidationProviderInterface;\n\nclass UserController\n{\n    public function create(InputManager $input, ValidationProviderInterface $provider)\n    {\n        $validator = $provider->getValidation(\\Spiral\\Validator\\FilterDefinition::class)\n            ->validate(...);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing PostController in PHP for Spiral Framework\nDESCRIPTION: This code snippet shows the initial structure of the PostController class with test and get methods, using the PrototypeTrait and Route annotations.\nSOURCE: https://github.com/spiral/docs/blob/3.14/docs/en/cookbook/quick-start.md#2025-04-20_snippet_33\n\nLANGUAGE: php\nCODE:\n```\nnamespace App\\Endpoint\\Web;\n\nuse Psr\\Http\\Message\\ResponseInterface;\nuse Spiral\\Prototype\\Traits\\PrototypeTrait;\nuse Spiral\\Router\\Annotation\\Route;\n\nfinal class PostController\n{\n    use PrototypeTrait;\n\n    #[Route(route: 'path', name: 'name')]\n    public function test(): ResponseInterface\n    {\n    }\n\n    #[Route(route: 'path', name: 'name')]\n    public function get(): ResponseInterface\n    {\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Rendering Twig Template in PHP Controller\nDESCRIPTION: PHP code snippet showing how to render a Twig template from a controller method.\nSOURCE: https://github.com/spiral/docs/blob/3.14/docs/en/views/twig.md#2025-04-20_snippet_5\n\nLANGUAGE: php\nCODE:\n```\npublic function index(): string\n{\n    return $this->views->render('filename', ['name' => 'User']);\n}\n```\n\n----------------------------------------\n\nTITLE: Registering Scheduler Bootloader Using Constant\nDESCRIPTION: Code snippet showing how to register the Scheduler Bootloader in the kernel using the LOAD constant.\nSOURCE: https://github.com/spiral/docs/blob/3.14/docs/en/advanced/scheduler.md#2025-04-20_snippet_2\n\nLANGUAGE: php\nCODE:\n```\nprotected const LOAD = [\n    // ...\n    \\Spiral\\Scheduler\\Bootloader\\SchedulerBootloader::class,\n    // ...\n];\n```\n\n----------------------------------------\n\nTITLE: Binding SuppressErrors to Container in ExceptionHandlerBootloader\nDESCRIPTION: Shows how to bind the SuppressErrors implementation to the container through ExceptionHandlerBootloader. This allows for custom error suppression logic.\nSOURCE: https://github.com/spiral/docs/blob/3.14/docs/en/http/errors.md#2025-04-20_snippet_5\n\nLANGUAGE: php\nCODE:\n```\nuse Spiral\\Http\\Middleware\\ErrorHandlerMiddleware\\SuppressErrorsInterface;\n\nclass ExceptionHandlerBootloader extends Bootloader\n{\n    protected const SINGLETONS = [\n        SuppressErrorsInterface::class => SuppressErrors::class,\n        // ...\n    ];\n    \n    // ...\n}\n```\n\n----------------------------------------\n\nTITLE: Using TranslatorTrait Example\nDESCRIPTION: Example of implementing translation capabilities in a controller using TranslatorTrait\nSOURCE: https://github.com/spiral/docs/blob/3.14/docs/en/advanced/i18n.md#2025-04-20_snippet_10\n\nLANGUAGE: php\nCODE:\n```\nnamespace App\\Endpoint\\Web;\n\nuse Spiral\\Translator\\Traits\\TranslatorTrait;\n\nclass HomeController\n{\n    use TranslatorTrait;\n\n    public function index(): string\n    {\n        return $this->say('hello world!');\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Activating GridBootloader in Spiral Application Kernel\nDESCRIPTION: Example of how to activate the GridBootloader in the Spiral application kernel using the defineBootloaders method.\nSOURCE: https://github.com/spiral/docs/blob/3.14/docs/en/component/data-grid.md#2025-04-20_snippet_1\n\nLANGUAGE: php\nCODE:\n```\npublic function defineBootloaders(): array\n{\n    return [\n        // ...\n        \\Spiral\\DataGrid\\Bootloader\\GridBootloader::class,\n        // ...\n    ];\n}\n```\n\n----------------------------------------\n\nTITLE: Broadcasting Configuration - PHP\nDESCRIPTION: Configuration for channel authorization rules in broadcasting.php\nSOURCE: https://github.com/spiral/docs/blob/3.14/docs/en/websockets/services.md#2025-04-20_snippet_7\n\nLANGUAGE: php\nCODE:\n```\nuse RoadRunner\\Centrifugo\\Request\\Subscribe;\nreturn [\n    'authorize' => [\n        'topics' => [\n            'topic' => static fn (Subscribe $request): bool => $request->getHeader('SECRET')[0] == 'secret',\n            'user.{uuid}' => static fn (string $uuid, string $userId): bool => $userId === $uuid\n        ],\n    ],\n];\n```\n\n----------------------------------------\n\nTITLE: Binding Interface to Singleton using Closure\nDESCRIPTION: Demonstrates how to bind an interface to a singleton using a closure for configuration.\nSOURCE: https://github.com/spiral/docs/blob/3.14/docs/zh-CN/container/configuration.md#2025-04-20_snippet_4\n\nLANGUAGE: php\nCODE:\n```\nuse Spiral\\Core\\BinderInterface;\n\npublic function boot(BinderInterface $binder): void\n{\n    $binder->bindSingleton(\n        UserRepositoryInterface::class, \n        static fn() => new CycleUserRepository(table: users)\n    );\n}\n```\n\n----------------------------------------\n\nTITLE: Controller Target Route Configuration\nDESCRIPTION: Example of routing all actions of a controller using the Controller target with optional parameters.\nSOURCE: https://github.com/spiral/docs/blob/3.14/docs/en/http/routing.md#2025-04-20_snippet_46\n\nLANGUAGE: php\nCODE:\n```\nnamespace App\\Bootloader;\n\nuse App\\Controller\\HomeController;\nuse Spiral\\Boot\\Bootloader\\Bootloader;\nuse Spiral\\Router\\Route;\nuse Spiral\\Router\\RouterInterface;\nuse Spiral\\Router\\Target\\Controller;\n\nclass RoutesBootloader extends Bootloader\n{\n    public function boot(RouterInterface $router): void\n    {\n        $router->setRoute(\n            'home',\n            new Route('/home/<action>[/<id>]', new Controller(HomeController::class))\n        );\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Workflow Start Command\nDESCRIPTION: Implementation of console command for starting website status check workflow\nSOURCE: https://github.com/spiral/docs/blob/3.14/docs/en/temporal/usage.md#2025-04-20_snippet_18\n\nLANGUAGE: php\nCODE:\n```\n#[AsCommand(name: 'check:status')]\nfinal class CheckStatusCommand extends Command\n{\n    #[Argument(description: 'Domain to check')]\n    #[Question(question: 'What domain do you want to check?')]\n    private string $domain;\n\n    #[Option(name: 'interval', shortcut: 'i', description: 'Interval in minutes')]\n    private int $intervalInMinutes = 5;\n\n    public function __invoke(WorkflowClientInterface $workflowClient): int\n    {\n        $workflow = $workflowClient->newWorkflowStub(\n            WebsiteStatusWorkflow::class,\n        );\n\n        $workflowClient->start(\n            $workflow,\n            $this->domain,\n            $this->intervalInMinutes\n        );\n\n        return self::SUCCESS;\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Registering Ticker Dispatcher in Spiral Application\nDESCRIPTION: PHP bootloader class to register the custom ticker dispatcher with the Spiral Framework kernel for handling ticker events.\nSOURCE: https://github.com/spiral/docs/blob/3.14/docs/en/cookbook/custom-dispatcher.md#2025-04-20_snippet_5\n\nLANGUAGE: php\nCODE:\n```\nnamespace App\\Application\\Bootloader;\n\nuse App\\Dispatcher\\TickerDispatcher;\nuse Spiral\\Boot\\Bootloader\\Bootloader;\nuse Spiral\\Boot\\KernelInterface;\n\nfinal class TickerBootloader extends Bootloader\n{\n    public function boot(KernelInterface $kernel, TickerDispatcher $ticker): void\n    {\n        $kernel->addDispatcher($ticker);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring RoadRunner YAML\nDESCRIPTION: RoadRunner configuration for Centrifugo service and connection settings.\nSOURCE: https://github.com/spiral/docs/blob/3.14/docs/en/cookbook/simple-chat.md#2025-04-20_snippet_4\n\nLANGUAGE: yaml\nCODE:\n```\nservice:\n  cetrifugo:\n    service_name_in_log: true\n    remain_after_exit: true\n    restart_sec: 1\n    command: \"./bin/centrifugo --config=centrifugo.json\"\n\ncentrifuge:\n  proxy_address: tcp://127.0.0.1:10001\n  grpc_api_address: tcp://127.0.0.1:10000\n  pool:\n    reset_timeout: 10\n    num_workers: 5\n```\n\n----------------------------------------\n\nTITLE: Creating Config Class with Reverse Engineering\nDESCRIPTION: Demonstrates creating a config class with reverse engineering capability using the -r flag. Generates getters and by-key-getters based on existing config structure.\nSOURCE: https://github.com/spiral/docs/blob/3.14/docs/en/basics/scaffolding.md#2025-04-20_snippet_11\n\nLANGUAGE: terminal\nCODE:\n```\nphp app.php create:config my -r\n```\n\nLANGUAGE: php\nCODE:\n```\ndeclare(strict_types=1);\n\nnamespace App\\Application\\Config;\n\nuse Spiral\\Core\\InjectableConfig;\n\nfinal class AppConfig extends InjectableConfig\n{\n    public const CONFIG = 'app';\n\n    protected array $config = [\n        'params' => [],\n        'parameter' => [],\n        'values' => [],\n        'value' => '',\n        'few' => [],\n        'mixedValues' => [],\n        'mixedKeys' => [],\n        'conflicts' => [],\n        'conflict' => '',\n        'conflictBy' => '',\n    ];\n\n    public function getParams(): array\n    {\n        return $this->config['params'];\n    }\n\n    public function getParameter(): array\n    {\n        return $this->config['parameter'];\n    }\n\n    public function getValues(): array\n    {\n        return $this->config['values'];\n    }\n\n    public function getValue(): string\n    {\n        return $this->config['value'];\n    }\n\n    public function getFew(): array\n    {\n        return $this->config['few'];\n    }\n\n    public function getMixedValues(): array\n    {\n        return $this->config['mixedValues'];\n    }\n\n    public function getMixedKeys(): array\n    {\n        return $this->config['mixedKeys'];\n    }\n\n    public function getConflicts(): array\n    {\n        return $this->config['conflicts'];\n    }\n\n    public function getConflict(): string\n    {\n        return $this->config['conflict'];\n    }\n\n    public function getConflictBy(): string\n    {\n        return $this->config['conflictBy'];\n    }\n\n    public function getParam(string $param): string\n    {\n        return $this->config['params'][$param];\n    }\n\n    public function getParameterBy(string $parameter): string\n    {\n        return $this->config['parameter'][$parameter];\n    }\n\n    public function getValueBy(int $value): string\n    {\n        return $this->config['values'][$value];\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Writing Output to Console\nDESCRIPTION: Example of writing output to console using writeln helper method.\nSOURCE: https://github.com/spiral/docs/blob/3.14/docs/en/console/commands.md#2025-04-20_snippet_8\n\nLANGUAGE: php\nCODE:\n```\n$this->writeln('hello world');\n```\n\n----------------------------------------\n\nTITLE: Setting Up Queue Testing in Spiral Framework\nDESCRIPTION: This snippet demonstrates how to set up a test case for queue testing in Spiral Framework. It uses the fakeQueue method to create a fake queue manager and queue for testing purposes.\nSOURCE: https://github.com/spiral/docs/blob/3.14/docs/en/testing/queue.md#2025-04-20_snippet_0\n\nLANGUAGE: php\nCODE:\n```\nuse Spiral\\Mailer\\Message;\nuse Tests\\TestCase;\n\nfinal class UserServiceTest extends TestCase\n{\n    private \\Spiral\\Testing\\Queue\\FakeQueueManager $connection;\n    private \\Spiral\\Testing\\Queue\\FakeQueue $queue;\n\n    protected function setUp(): void\n    {\n        parent::setUp();\n        $this->connection = $this->fakeQueue();\n        $this->queue = $this->connection->getConnection('default');\n    }\n\n    public function testUserShouldBeRegistered(): void\n    {\n        // Perform user registration ...\n\n        $this->queue->assertPushed('mail.job', function (array $data) {\n            return $data['handler'] instanceof \\Spiral\\SendIt\\MailJob\n                && $data['options']->getQueue() === 'mail'\n                && $data['payload']['foo'] === 'bar';\n        });\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing a Database Connection Finalizer in PHP\nDESCRIPTION: Example bootloader implementation that uses a finalizer to close database connections after each request. This is useful for applications with many workers that need to manage database socket usage efficiently.\nSOURCE: https://github.com/spiral/docs/blob/3.14/docs/zh-CN/framework/finalizers.md#2025-04-20_snippet_1\n\nLANGUAGE: php\nCODE:\n```\n// 在 bootloader 中\nuse Spiral\\Boot\\FinalizerInterface;\nuse Psr\\Container\\ContainerInterface;\nuse Cycle\\Database\\DatabaseManager;\n\npublic function boot(FinalizerInterface $finalizer, ContainerInterface $container): void\n{\n    $finalizer->addFinalizer(function () use ($container) {\n        /** @var DatabaseManager $dbal */\n        $dbal = $container->get(DatabaseManager::class);\n \n        foreach ($dbal->getDrivers() as $driver) {\n            $driver->disconnect();\n        }\n    });\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Default Serializer for Queue\nDESCRIPTION: PHP configuration to set the default serializer for queue jobs.\nSOURCE: https://github.com/spiral/docs/blob/3.14/docs/en/cookbook/simple-queue-system.md#2025-04-20_snippet_6\n\nLANGUAGE: php\nCODE:\n```\nreturn [\n    // ...\n    'defaultSerializer' => 'json',\n];\n```\n\n----------------------------------------\n\nTITLE: Implementing Request-Scoped Middleware in Spiral\nDESCRIPTION: Middleware implementation that sets up a request-specific context using Spiral's ScopeInterface.\nSOURCE: https://github.com/spiral/docs/blob/3.14/docs/en/http/middleware.md#2025-04-20_snippet_9\n\nLANGUAGE: php\nCODE:\n```\nnamespace App\\Endpoint\\Web\\Middleware;\n\nuse Psr\\Http\\Message\\ResponseInterface;\nuse Psr\\Http\\Message\\ServerRequestInterface;\nuse Psr\\Http\\Server\\MiddlewareInterface;\nuse Psr\\Http\\Server\\RequestHandlerInterface;\nuse Spiral\\Core\\ScopeInterface;\n\nclass MyMiddleware implements MiddlewareInterface\n{\n    public function __construct(\n        private readonly ScopeInterface $scope\n    ) {\n    }\n\n    public function process(\n        ServerRequestInterface $request,\n        RequestHandlerInterface $handler\n    ): ResponseInterface {\n        return $this->scope->runScope([\n            UserContext::class => new UserContext(123, 'test')\n        ], function () use ($handler, $request) {\n            return $handler->handle($request);\n        });\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing MessageRepository for Thread-based Message Retrieval in PHP\nDESCRIPTION: The MessageRepository extends Cycle ORM's Repository class to provide a method for finding all messages by thread ID, sorted by ascending ID.\nSOURCE: https://github.com/spiral/docs/blob/3.14/docs/zh-CN/cookbook/simple-chat.md#2025-04-20_snippet_1\n\nLANGUAGE: php\nCODE:\n```\nnamespace App\\Repository;\n\nuse App\\Database\\Message;\nuse Cycle\\ORM\\Select\\Repository;\n\nfinal class MessageRepository extends Repository\n{\n    /**\n     * @return Message[]\n     */\n    public function findAllByThread(int $threadId): array\n    {\n        return $this->findAll([\n            'thread_id' => $threadId,\n        ], [\n            'id' => 'ASC',\n        ]);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Using Dynamic Attributes in Stempler Components\nDESCRIPTION: Demonstrates how to use the attr:aggregate feature in Stempler to allow passing arbitrary attributes to a component.\nSOURCE: https://github.com/spiral/docs/blob/3.14/docs/en/views/stempler.md#2025-04-20_snippet_50\n\nLANGUAGE: html\nCODE:\n```\n<select name=\"${name}\" attr:aggregate>\n    @foreach(inject('values', []) as $key => $label)\n    <option value=\"{{ $key }}\">{{ $label }}</option>\n    @endforeach\n</select>\n```\n\n----------------------------------------\n\nTITLE: Defining Console Command Signature with Arguments and Options\nDESCRIPTION: Example showing how to define a console command signature with a URL argument and SSL skip option.\nSOURCE: https://github.com/spiral/docs/blob/3.14/docs/en/console/commands.md#2025-04-20_snippet_6\n\nLANGUAGE: php\nCODE:\n```\ncheck:http \n    {url : Site url} \n    {--S|skip-ssl-errors : Skip SSL errors}\n```\n\n----------------------------------------\n\nTITLE: Creating HTTP Middleware in Spiral Framework (Terminal)\nDESCRIPTION: Command to create a new HTTP Middleware class in the Spiral Framework. This generates a boilerplate middleware class that can be customized to modify HTTP requests and responses.\nSOURCE: https://github.com/spiral/docs/blob/3.14/docs/zh-CN/basics/scaffolding.md#2025-04-20_snippet_0\n\nLANGUAGE: terminal\nCODE:\n```\nphp app.php create:middleware <name>\n```\n\n----------------------------------------\n\nTITLE: Modifying PingerClient Class for GRPC Interceptors in PHP\nDESCRIPTION: This code snippet demonstrates how to modify the PingerClient class to support GRPC interceptors in Spiral Framework.\nSOURCE: https://github.com/spiral/docs/blob/3.14/docs/en/grpc/interceptors.md#2025-04-20_snippet_8\n\nLANGUAGE: php\nCODE:\n```\nnamespace App\\Service;\n\nuse App\\GRPC\\Pinger;\nuse Spiral\\Core\\CoreInterface;\nuse Spiral\\RoadRunner\\GRPC;\n\nfinal class PingerClient implements Pinger\\PingerInterface\n{\n    public function __construct(\n        private readonly RequestCore $core\n    ) {\n    }\n\n    public function ping(GRPC\\ContextInterface $ctx, Pinger\\PingRequest $in): Pinger\\PingResponse\n    {\n        return $this->sendRequest(\n            '/' . self::NAME . '/ping',\n            $in,\n            $ctx,\n            Pinger\\PingResponse::class\n        );\n    }\n\n    /**\n     * @template T of object\n     * @param non-empty-string $method\n     * @param class-string<T> $response\n     * @return T\n     */\n    public function sendRequest(\n        string $method,\n        \\GRPC\\Ping\\PingRequest $in,\n        GRPC\\ContextInterface $ctx,\n        string $response\n    ): object {\n        [$response, $status] = $this->core->callAction(\n            self::class, $method,\n            [\n                'responseClass' => $response,\n                'ctx' => $ctx,\n                'in' => $in,\n            ]\n        );\n\n        return $response;\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Listing Active Centrifugo Channels in PHP\nDESCRIPTION: Demonstrates the use of the channels method to retrieve a list of all active Centrifugo channels. This method can optionally filter channels based on a provided pattern, useful for monitoring and management purposes.\nSOURCE: https://github.com/spiral/docs/blob/3.14/docs/en/websockets/api.md#2025-04-20_snippet_8\n\nLANGUAGE: PHP\nCODE:\n```\npublic function handle(Channel $channel): void\n{\n   $channels = $this->api->channels();\n   // ...\n}\n```\n\n----------------------------------------\n\nTITLE: Accessing Filter Properties with Attributes\nDESCRIPTION: Example of accessing filter properties directly after they have been mapped from request data.\nSOURCE: https://github.com/spiral/docs/blob/3.14/docs/en/filters/filter.md#2025-04-20_snippet_8\n\nLANGUAGE: php\nCODE:\n```\npublic function index(MyFilter $filter): void\n{\n    dump($filter->text);\n}\n```\n\n----------------------------------------\n\nTITLE: Asserting File Copy in Storage\nDESCRIPTION: Example of asserting that a file was copied from one location to another in storage.\nSOURCE: https://github.com/spiral/docs/blob/3.14/docs/en/testing/storage.md#2025-04-20_snippet_9\n\nLANGUAGE: php\nCODE:\n```\n$uploads = $storage->bucket('uploads');\n$uploads->assertCopied('file.txt', 'folder/file.txt');\n```\n\n----------------------------------------\n\nTITLE: Using SerializerManager to Access Specific Serializers\nDESCRIPTION: Example showing how to use SerializerManager to access different serializers by their string keys as defined in the configuration.\nSOURCE: https://github.com/spiral/docs/blob/3.14/docs/en/advanced/serializer.md#2025-04-20_snippet_4\n\nLANGUAGE: php\nCODE:\n```\nnamespace App\\Service;\n\nuse Spiral\\Serializer\\SerializerManager;\n\nclass MyService\n{\n    public function __construct(\n        private readonly SerializerManager $serializer,\n    ) {\n    }\n\n    public function someMethod(): void\n    {\n        $serialized = $this->serializer->getSerializer('json')->serialize(['some' => 'data']);\n        $array = $this->serializer->getSerializer('json')->unserialize($serialized);\n\n        $serialized = $this->serializer->getSerializer('serializer')->serialize(['some' => 'data']);\n        $array = $this->serializer->getSerializer('serializer')->unserialize($serialized);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring DataGrid Options in PHP Controller\nDESCRIPTION: Shows how to customize the status code and property name in the DataGrid output using the options parameter.\nSOURCE: https://github.com/spiral/docs/blob/3.14/docs/en/http/interceptors.md#2025-04-20_snippet_16\n\nLANGUAGE: php\nCODE:\n```\n#[DataGrid(grid: UserGrid::class, options: ['status' => 201, 'property' => 'users'])]\n```\n\n----------------------------------------\n\nTITLE: Directory Access in Service Class\nDESCRIPTION: Example of accessing directory paths in a service class using DirectoriesInterface dependency injection.\nSOURCE: https://github.com/spiral/docs/blob/3.14/docs/en/basics/files.md#2025-04-20_snippet_2\n\nLANGUAGE: php\nCODE:\n```\nuse Spiral\\Boot\\DirectoriesInterface;\n\nfinal class UploadService {\n    public function __construct(\n        private readonly DirectoriesInterface $dirs\n    ) {}\n    \n    public function store(UploadedFile $file) {\n        $filePath = $this->dirs->get('uploadDir') . $file->getFilename();\n        // ...\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Using Attributes and Annotations\nDESCRIPTION: Examples of using attributes and annotations with the created MyEntityMetadata class.\nSOURCE: https://github.com/spiral/docs/blob/3.14/docs/zh-CN/advanced/attributes.md#2025-04-20_snippet_9\n\nLANGUAGE: php\nCODE:\n```\n#[MyEntityMetadata(table: 'users')] \nclass User {}\n```\n\nLANGUAGE: php\nCODE:\n```\n/**\n * @MyEntityMetadata(table=\"users\")\n */\nclass User {}\n```\n\n----------------------------------------\n\nTITLE: Creating a Temporal Workflow in Spiral PHP\nDESCRIPTION: Command to generate a new Temporal workflow class in the Spiral PHP framework.\nSOURCE: https://github.com/spiral/docs/blob/3.14/docs/en/temporal/usage.md#2025-04-20_snippet_0\n\nLANGUAGE: terminal\nCODE:\n```\nphp app.php create:workflow WebsiteStatus\n```\n\n----------------------------------------\n\nTITLE: Broadcasting with Stringable Topic Object\nDESCRIPTION: Example of broadcasting using a Stringable Order object as the topic.\nSOURCE: https://github.com/spiral/docs/blob/3.14/docs/en/websockets/broadcasting.md#2025-04-20_snippet_7\n\nLANGUAGE: php\nCODE:\n```\nuse Spiral\\Broadcasting\\BroadcastManagerInterface;\nuse Spiral\\Serializer\\SerializerInterface;\n\nclass OrderService\n{\n    public function __construct(\n        private readonly BroadcastManagerInterface $broadcast,\n        private readonly SerializerInterface $serializer\n    ) {\n    }\n\n    public function send(Order $order): void\n    {\n        $this->broadcast\n            ->connection('log')\n            ->publish(\n               $order,\n               $this->serializer->serialize(['status' => 'purchased'])\n            );\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Complete Grid Wrapper Configuration\nDESCRIPTION: Demonstrates all available configuration options for the ui:grid wrapper component, including URL, HTTP method, namespace, pagination options, and various settings for the actions button.\nSOURCE: https://github.com/spiral/docs/blob/3.14/docs/zh-CN/keeper/components.md#2025-04-20_snippet_3\n\nLANGUAGE: xhtml\nCODE:\n```\n<ui:grid\n        url=\"/some/url\"\n        method=\"GET\"\n        id=\"my-grid\"\n        namespace=\"foo\"\n        capture-forms=\"['form1','form2']\"\n        capture-filters=\"['filter1','filter2']\"\n        paginate-options=\"[10,20,30]\"\n\n        actions-title=\"\"\n        actions-label=\"Actions\"\n        actions-kind=\"\"\n        actions-icon=\"cog\"\n        actions-size=\"sm\"\n        actions-class=\"\"\n        actions-cell-class=\"\">\n\n</ui:grid>\n```\n\n----------------------------------------\n\nTITLE: Implementing Console Dispatcher in PHP\nDESCRIPTION: Example implementation of a Console dispatcher that handles CLI commands. It verifies the PHP SAPI is CLI and checks RR_MODE environment variable.\nSOURCE: https://github.com/spiral/docs/blob/3.14/docs/en/framework/dispatcher.md#2025-04-20_snippet_1\n\nLANGUAGE: php\nCODE:\n```\nuse Spiral\\Boot\\EnvironmentInterface;\nuse Spiral\\Boot\\DispatcherInterface;\n\nfinal class ConsoleDispatcher implements DispatcherInterface\n{\n    public function __construct(\n        private readonly EnvironmentInterface $env\n    ) {\n    }\n    \n    public function canServe(): bool\n    { \n        return (PHP_SAPI === 'cli' && $this->env->get('RR_MODE') === null);\n    }\n    \n    public function serve(InputInterface $input = null, OutputInterface $output = null): int\n    {\n        // Handle console command\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Accessing Filter Data with Array Schema\nDESCRIPTION: Example of accessing filter data using the getData method when using array-based schema mapping.\nSOURCE: https://github.com/spiral/docs/blob/3.14/docs/en/filters/filter.md#2025-04-20_snippet_10\n\nLANGUAGE: php\nCODE:\n```\npublic function index(MyFilter $filter): void\n{\n    dump($filter->getData());\n}\n```\n\n----------------------------------------\n\nTITLE: Using Fixed Value Filters in Data Grid\nDESCRIPTION: Example of creating a filter with a fixed value that cannot be changed through withValue() method. The filter will always use the value provided in the constructor.\nSOURCE: https://github.com/spiral/docs/blob/3.14/docs/en/component/data-grid.md#2025-04-20_snippet_20\n\nLANGUAGE: php\nCODE:\n```\nuse Spiral\\DataGrid\\Specification\\Filter;\n\n// name should be 'Antony'\n$filter = new Filter\\Equals('name', 'Antony');\n\n// name is still 'Antony' \n$filter = $filter->withValue('John');   \n```\n\n----------------------------------------\n\nTITLE: Mailer PHP Configuration\nDESCRIPTION: PHP configuration file for the mailer component with transport setup, from address, and queue settings.\nSOURCE: https://github.com/spiral/docs/blob/3.14/docs/en/advanced/sendit.md#2025-04-20_snippet_3\n\nLANGUAGE: php\nCODE:\n```\nreturn [\n    'dsn' => env('MAILER_DSN'),\n    'from' => env('MAILER_FROM'),\n    'queue' => env('MAILER_QUEUE'),\n    'queueConnection' => env('MAILER_QUEUE_CONNECTION', 'sync'),\n];\n```\n\n----------------------------------------\n\nTITLE: Implementing Any Filter in PHP\nDESCRIPTION: Shows how to use Any filter for OR operations with both fixed values and ValueInterface.\nSOURCE: https://github.com/spiral/docs/blob/3.14/docs/en/component/data-grid.md#2025-04-20_snippet_23\n\nLANGUAGE: php\nCODE:\n```\nuse Spiral\\DataGrid\\Specification\\Filter;\n\n// the price should be equal to 2 or the quantity be greater than 5\n$any = new Filter\\Any(\n    new Filter\\Equals('price', 2),\n    new Filter\\Gt('quantity', 5)\n);\n```\n\nLANGUAGE: php\nCODE:\n```\nuse Spiral\\DataGrid\\Specification\\Filter;\nuse Spiral\\DataGrid\\Specification\\Value;\n\n$any = new Filter\\Any(\n    new Filter\\Equals('price', new Value\\NumericValue()),\n    new Filter\\Gt('quantity', new Value\\IntValue()),\n    new Filter\\Lt('option_id', 4)\n);\n\n// the price should be equal to 5 or the quantity should be greater than 5 or the option_id less than 4\n$any = $any->withValue(5);\n```\n\n----------------------------------------\n\nTITLE: Adding Static Resolver to Distribution Manager in PHP\nDESCRIPTION: Initializes a Distribution Manager and adds a StaticResolver with a base URI for static content resolution.\nSOURCE: https://github.com/spiral/docs/blob/3.14/docs/en/advanced/storage.md#2025-04-20_snippet_25\n\nLANGUAGE: php\nCODE:\n```\nuse Nyholm\\Psr7\\Uri;\nuse Spiral\\Distribution\\Manager;\nuse Spiral\\Distribution\\Resolver\\StaticResolver;\n\n$manager = new Manager();\n$manager->add('local', new StaticResolver(new Uri('https://static.example.com')));\n```\n\n----------------------------------------\n\nTITLE: Creating Hybrid Metadata Class with PHP 8 Attributes and Doctrine Annotations\nDESCRIPTION: Example of creating a metadata class that works with both PHP 8 attributes and Doctrine annotations by using hybrid syntax. This approach ensures compatibility across different PHP versions.\nSOURCE: https://github.com/spiral/docs/blob/3.14/docs/en/advanced/attributes.md#2025-04-20_snippet_9\n\nLANGUAGE: php\nCODE:\n```\n/**\n * @Annotation\n * @Target({ \"CLASS\" })\n */\n#[\\Attribute(\\Attribute::TARGET_CLASS)]\nclass MyEntityMetadata\n{\n    public string $table;\n}\n```\n\n----------------------------------------\n\nTITLE: Registering Custom Serializer Using SerializerRegistryInterface\nDESCRIPTION: Example bootloader that shows how to register a custom serializer implementation using the SerializerRegistryInterface.\nSOURCE: https://github.com/spiral/docs/blob/3.14/docs/en/advanced/serializer.md#2025-04-20_snippet_6\n\nLANGUAGE: php\nCODE:\n```\nnamespace App\\Application\\Bootloader;\n\nuse App\\Application\\Serializer\\ProtoSerializer;\nuse Spiral\\Boot\\Bootloader\\Bootloader;\nuse Spiral\\Serializer\\SerializerRegistryInterface;\n\nclass SerializerBootloader extends Bootloader\n{\n    public function boot(SerializerRegistryInterface $registry): void\n    {\n        $registry->register('proto', new ProtoSerializer());\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Binding Interface to Singleton with Dependency Injection\nDESCRIPTION: Shows how to bind an interface to a singleton using a closure with dependency injection.\nSOURCE: https://github.com/spiral/docs/blob/3.14/docs/zh-CN/container/configuration.md#2025-04-20_snippet_5\n\nLANGUAGE: php\nCODE:\n```\nuse Spiral\\Core\\BinderInterface;\nuse Spiral\\Core\\Container\\Autowire;\n\npublic function boot(BinderInterface $binder): void\n{\n    $binder->bindSingleton(\n        UserRepositoryInterface::class, \n        static fn(UserConfig $config) => new CycleUserRepository(table: $config->getTable())\n    );\n}\n```\n\n----------------------------------------\n\nTITLE: Sending Trace Context via HTTP Headers in Spiral PHP\nDESCRIPTION: Demonstrates how to extract trace context from a Tracer instance and add it to HTTP response headers. This enables trace context propagation between different services.\nSOURCE: https://github.com/spiral/docs/blob/3.14/docs/en/advanced/telemetry.md#2025-04-20_snippet_9\n\nLANGUAGE: php\nCODE:\n```\npublic function handle(ServerRequestInterface $request): ResponseInterface\n{\n    $response = $responseFactory->createResponse();\n\n    $tracer = $this->container->get(TracerInterface::class);\n    \n    foreach ($tracer->getContext() as $key => $value) {\n        $response = $response->withHeader($key, $value);\n    }\n    \n    return $response;\n}\n```\n\n----------------------------------------\n\nTITLE: Multiple Files Migration Strategy Examples\nDESCRIPTION: Examples of migration files using the Multiple Files Strategy where changes are separated by table.\nSOURCE: https://github.com/spiral/docs/blob/3.14/docs/en/basics/orm.md#2025-04-20_snippet_22\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\ndeclare(strict_types=1);\n\nnamespace Migration;\n\nuse Cycle\\Migrations\\Migration;\n\nclass OrmDefaultA42b7e366d78543ca8c5a4b60d305083 extends Migration\n{\n    protected const DATABASE = 'default';\n\n    public function up(): void\n    {\n        $this->table('user_roles')\n            ->addColumn('created_at', 'datetime', ['nullable' => false, 'default' => 'CURRENT_TIMESTAMP'])\n            // ...\n            ->setPrimaryKeys(['uuid'])\n            ->create();\n    }\n\n    public function down(): void\n    {\n        $this->table('user_roles')->drop();\n    }\n}\n```\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\ndeclare(strict_types=1);\n\nnamespace Migration;\n\nuse Cycle\\Migrations\\Migration;\n\nclass OrmDefaultA42b7e366d78543ca8c5a4b60d305043 extends Migration\n{\n    protected const DATABASE = 'default';\n\n    public function up(): void\n    {\n        $this->table('users')\n            ->addColumn('created_at', 'datetime', ['nullable' => false, 'default' => 'CURRENT_TIMESTAMP'])\n            //...\n            ->setPrimaryKeys(['uuid'])\n            ->create();\n    }\n\n    public function down(): void\n    {\n        $this->table('users')->drop();\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Adding Prototype Attribute to PostRepository in Spiral\nDESCRIPTION: Adding the Prototyped attribute to PostRepository allows using it as a 'posts' property during development. This enables convenient access to the repository through the prototype design pattern.\nSOURCE: https://github.com/spiral/docs/blob/3.14/docs/en/cookbook/quick-start.md#2025-04-20_snippet_18\n\nLANGUAGE: php\nCODE:\n```\nuse Spiral\\Prototype\\Annotation\\Prototyped;\n\n#[Prototyped(property: 'posts')]\nclass PostRepository extends Repository\n{\n}\n```\n\n----------------------------------------\n\nTITLE: Creating CloudFront Resolver Instance in PHP\nDESCRIPTION: Shows how to create a CloudFront Resolver instance with configuration parameters.\nSOURCE: https://github.com/spiral/docs/blob/3.14/docs/en/advanced/storage.md#2025-04-20_snippet_31\n\nLANGUAGE: php\nCODE:\n```\n$cloudfront = new \\Spiral\\Distribution\\Resolver\\CloudFrontResolver(\n    keyPairId: 'AAAABBBBCCCCDDDDEEEE',\n    privateKey: \\file_get_contents(__DIR__ . '/path/to/key.pem'),\n    domain: 'example.cloudfront.net',\n    prefix: 'path/to/files'\n);\n\n$url = $cloudfront->resolve(...);\n```\n\n----------------------------------------\n\nTITLE: Activating TwigBootloader in Kernel using Method\nDESCRIPTION: PHP code snippet showing how to activate the TwigBootloader in the Kernel class using the defineBootloaders method.\nSOURCE: https://github.com/spiral/docs/blob/3.14/docs/en/views/twig.md#2025-04-20_snippet_1\n\nLANGUAGE: php\nCODE:\n```\npublic function defineBootloaders(): array\n{\n    return [\n        // ...\n        \\Spiral\\Views\\Bootloader\\ViewsBootloader::class,\n        \\Spiral\\Bootloader\\Views\\TranslatedCacheBootloader::class, // keep localized views in separate cache files\n        \\Spiral\\Twig\\Bootloader\\TwigBootloader::class,\n        // ...\n    ];\n}\n```\n\n----------------------------------------\n\nTITLE: Installing Stempler Bridge in Spiral Framework via Composer\nDESCRIPTION: Command to install Stempler Bridge extension in Spiral Framework using Composer package manager.\nSOURCE: https://github.com/spiral/docs/blob/3.14/docs/en/views/stempler.md#2025-04-20_snippet_58\n\nLANGUAGE: shell\nCODE:\n```\ncomposer require spiral/stempler-bridge\n```\n\n----------------------------------------\n\nTITLE: Using AnyValue Filter in PHP\nDESCRIPTION: Demonstrates the AnyValue filter that accepts any input without conversion in Spiral DataGrid.\nSOURCE: https://github.com/spiral/docs/blob/3.14/docs/en/component/data-grid.md#2025-04-20_snippet_35\n\nLANGUAGE: php\nCODE:\n```\nuse Spiral\\DataGrid\\Specification\\Value;\n\n$value = new Value\\AnyValue();\n \n$value->accepts('123'); // always true\n$value->convert('123'); // always equal to the input\n```\n\n----------------------------------------\n\nTITLE: Using Injectable Enums in Command Classes\nDESCRIPTION: This snippet demonstrates how to use an injectable enum in a Spiral command class. The Container automatically injects the AppEnvironment enum with the correct value, which can then be used for environment-specific logic.\nSOURCE: https://github.com/spiral/docs/blob/3.14/docs/en/container/injectors.md#2025-04-20_snippet_4\n\nLANGUAGE: php\nCODE:\n```\nfinal class MigrateCommand extends Command \n{\n     const NAME = '...';\n\n     public function perform(AppEnvironment $appEnv): int\n     {\n           if ($appEnv->isProduction()) {\n                 // Deny\n           }\n           \n           // Perform migration\n     }\n}\n```\n\n----------------------------------------\n\nTITLE: Integrating Activity in Temporal Workflow in PHP\nDESCRIPTION: Example of initializing and using a Temporal activity within a workflow, including activity options configuration.\nSOURCE: https://github.com/spiral/docs/blob/3.14/docs/en/temporal/usage.md#2025-04-20_snippet_6\n\nLANGUAGE: php\nCODE:\n```\nuse Temporal\\Internal\\Workflow\\ActivityProxy;\nuse Temporal\\Activity\\ActivityOptions;\nuse App\\Endpoint\\Temporal\\Activity\\PingWebsiteActivity;\n\n#[WorkflowInterface]\nclass WebsiteStatusWorkflow\n{\n    // ...\n    \n    private PingWebsiteActivity|ActivityProxy $pingActivity;\n\n    public function __construct()\n    {\n        $this->pingActivity = Workflow::newActivityStub(\n            PingWebsiteActivity::class,\n            ActivityOptions::new()\n                ->withStartToCloseTimeout(5)\n        );\n    }\n    \n    //...\n}\n```\n\n----------------------------------------\n\nTITLE: Installing Specific Protobuf Version to Avoid Segmentation Faults\nDESCRIPTION: Command to install a specific protobuf extension version (3.10.0) to avoid potential segmentation fault errors.\nSOURCE: https://github.com/spiral/docs/blob/3.14/docs/en/grpc/configuration.md#2025-04-20_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nsudo pecl install protobuf-3.10.0\n```\n\n----------------------------------------\n\nTITLE: Custom Error Message Example\nDESCRIPTION: Demonstration of setting custom error messages for validation rules\nSOURCE: https://github.com/spiral/docs/blob/3.14/docs/en/validation/spiral.md#2025-04-20_snippet_15\n\nLANGUAGE: php\nCODE:\n```\n$validator = $validation->validate(\n    ['file' => 'b'],\n    [\n        'file' => [\n            'notEmpty',\n            ['regexp', '/^a+$/', 'error' => 'Invalid pattern, \"a+\" wanted.'] // aaa...\n        ]\n    ]\n);\n```\n\n----------------------------------------\n\nTITLE: Creating Basic User Filter - PHP\nDESCRIPTION: Simple example of a filter class that maps data from HTTP request to filter properties using the Query attribute.\nSOURCE: https://github.com/spiral/docs/blob/3.14/docs/en/filters/configuration.md#2025-04-20_snippet_0\n\nLANGUAGE: php\nCODE:\n```\nnamespace App\\Endpoint\\Web\\Filter;\n\nuse Spiral\\Filters\\Attribute\\Input\\Query;\nuse Spiral\\Filters\\Model\\Filter;\n\nfinal class UserFilter extends Filter\n{\n    #[Query(key: 'username')]\n    public string $username;\n}\n```\n\n----------------------------------------\n\nTITLE: Using Hidden Tag for Context Content\nDESCRIPTION: Demonstrates how to hide context content from the final output using the <hidden> tag, which processes stack operations but prevents random strings and comments from appearing in the rendered HTML.\nSOURCE: https://github.com/spiral/docs/blob/3.14/docs/en/views/stempler.md#2025-04-20_snippet_40\n\nLANGUAGE: html\nCODE:\n```\n<!DOCTYPE html>\n<html>\n<head>\n    <title>${title|Default title}</title>\n    <stack:collect name=\"styles\" level=\"2\">\n        <link rel=\"stylesheet\" href=\"/styles/welcome.css\"/>\n    </stack:collect>\n</head>\n<body class=\"${body-class|default}\">\n<block:content>\n    Default content.\n</block:content>\n</body>\n<hidden>\n    <block:context/>\n</hidden>\n</html>\n```\n\n----------------------------------------\n\nTITLE: Registering Event Interceptors in Configuration\nDESCRIPTION: Example of how to register event interceptors in the events.php configuration file.\nSOURCE: https://github.com/spiral/docs/blob/3.14/docs/en/advanced/events.md#2025-04-20_snippet_12\n\nLANGUAGE: php\nCODE:\n```\nreturn [\n    // ...\n    'interceptors' => [\n        \\App\\Broadcasting\\BroadcastEventInterceptor::class\n    ]\n];\n```\n\n----------------------------------------\n\nTITLE: DataGrid with Search-Only Filter\nDESCRIPTION: Demonstrates a simplified DataGrid configuration with just a search filter. This provides a clean interface for simple data filtering needs.\nSOURCE: https://github.com/spiral/docs/blob/3.14/docs/zh-CN/keeper/components.md#2025-04-20_snippet_5\n\nLANGUAGE: xhtml\nCODE:\n```\n<ui:grid url=\"@action('users.list', inject('params', []))\" namespace=\"main\">\n    <grid:filter search=\"true\"/>\n</ui:grid>\n```\n\n----------------------------------------\n\nTITLE: Unescaped Content Output\nDESCRIPTION: Example of outputting unescaped HTML content in Stempler\nSOURCE: https://github.com/spiral/docs/blob/3.14/docs/en/views/stempler.md#2025-04-20_snippet_5\n\nLANGUAGE: php\nCODE:\n```\n{!! $html !!}\n```\n\n----------------------------------------\n\nTITLE: Input Component with PHP Integration\nDESCRIPTION: Example of a component that handles PHP values and uses macro functions for value injection.\nSOURCE: https://github.com/spiral/docs/blob/3.14/docs/en/views/stempler.md#2025-04-20_snippet_44\n\nLANGUAGE: html\nCODE:\n```\n<div class=\"input\">\n    <label>${label}</label>\n    <input type=\"text\" value=\"{{ strtoupper(inject('value')) }}\"/>\n</div>\n```\n\n----------------------------------------\n\nTITLE: Using SerializerInterface in Service Class\nDESCRIPTION: Example service class that demonstrates how to inject and use the default serializer via the SerializerInterface to serialize and unserialize data.\nSOURCE: https://github.com/spiral/docs/blob/3.14/docs/en/advanced/serializer.md#2025-04-20_snippet_3\n\nLANGUAGE: php\nCODE:\n```\nnamespace App\\Service;\n\nuse Spiral\\Serializer\\SerializerInterface;\n\nclass MyService\n{\n    public function __construct(\n        private readonly SerializerInterface $serializer,\n    ) {\n    }\n\n    public function someMethod(): void\n    {\n        // serialize\n        $serialized = $this->serializer->serialize(['some' => 'data']);\n        \n        // unserialize\n        $array = $this->serializer->unserialize($serialized);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring CacheHandler for Session Storage in Spiral PHP\nDESCRIPTION: Configuration example for using CacheHandler to store sessions in a cache-based storage. This allows sessions to be stored in various cache backends configured in the Cache component.\nSOURCE: https://github.com/spiral/docs/blob/3.14/docs/en/basics/session.md#2025-04-20_snippet_11\n\nLANGUAGE: php\nCODE:\n```\nuse Spiral\\Core\\Container\\Autowire;\nuse Spiral\\Session\\Handler\\CacheHandler;\n\n$ttl = 86400;\n\nreturn [\n    'lifetime' => $ttl,\n    'cookie' => 'sid',\n    'secure' => false,\n    'handler' => new Autowire(\n        CacheHandler::class,\n        [\n            'storage' => 'my-storage', // (Optional)  Cache storage name. Default - current cache storage\n            'ttl' => $ttl,\n            'prefix' => 'foo:' // (Optional) By default, session:\n        ]\n    )\n];\n```\n\n----------------------------------------\n\nTITLE: Implementing Text Cell Type\nDESCRIPTION: Example of implementing a basic text cell type in grid with user name display.\nSOURCE: https://github.com/spiral/docs/blob/3.14/docs/en/keeper/components.md#2025-04-20_snippet_7\n\nLANGUAGE: xhtml\nCODE:\n```\n<grid:cell.text\n        name=\"user\"\n        label=\"User Name\"\n/>\n```\n\n----------------------------------------\n\nTITLE: Setting Authorization Token in FakeHttp Requests in PHP\nDESCRIPTION: This code snippet shows how to set an authorization token for FakeHttp requests in Spiral, with an optional token type.\nSOURCE: https://github.com/spiral/docs/blob/3.14/docs/en/testing/http.md#2025-04-20_snippet_6\n\nLANGUAGE: php\nCODE:\n```\n$http = $this->fakeHttp();\n$http->withAuthorizationToken(\n    token: 'xxx-xxxx', \n    type: 'Bearer' // Default value is 'Bearer'\n);\n```\n\n----------------------------------------\n\nTITLE: Installing Broadcasting Bootloader in Spiral Kernel (Method Approach)\nDESCRIPTION: Shows how to add the BroadcastingBootloader to the application kernel using the defineBootloaders method.\nSOURCE: https://github.com/spiral/docs/blob/3.14/docs/en/websockets/broadcasting.md#2025-04-20_snippet_0\n\nLANGUAGE: php\nCODE:\n```\npublic function defineBootloaders(): array\n{\n    return [\n        // ...\n        \\Spiral\\Broadcasting\\Bootloader\\BroadcastingBootloader::class,\n        // ...\n    ];\n}\n```\n\n----------------------------------------\n\nTITLE: Binding ValidationInterface in AppBootloader in PHP\nDESCRIPTION: Shows how to bind the ValidationInterface with a chosen validation implementation in the application's bootloader.\nSOURCE: https://github.com/spiral/docs/blob/3.14/docs/en/cookbook/migration-from-v2.md#2025-04-20_snippet_12\n\nLANGUAGE: php\nCODE:\n```\nuse Spiral\\Validation\\ValidationInterface;\nuse Spiral\\Validation\\ValidationProviderInterface;\nuse Spiral\\Validator\\FilterDefinition;\n\nclass AppBootloader extends Bootloader\n{\n    protected const SINGLETONS = [\n        ValidationInterface::class => [self::class, 'initValidation'],\n    ];\n\n    // ...\n\n    public function initValidation(ValidationProviderInterface $provider): ValidationInterface\n    {\n        return $provider->getValidation(FilterDefinition::class);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring S3 URI Resolver in Spiral Framework\nDESCRIPTION: PHP configuration for setting up the S3 URI resolver in the Spiral Framework. It includes all necessary parameters such as region, bucket, credentials, and optional settings.\nSOURCE: https://github.com/spiral/docs/blob/3.14/docs/en/advanced/storage.md#2025-04-20_snippet_35\n\nLANGUAGE: php\nCODE:\n```\nreturn [\n    // ...\n    'resolvers' => [\n        // ...\n        's3' => [\n            'type' => 's3',\n            'region' => env('S3_REGION'),\n            'version' => env('S3_VERSION', 'latest'),\n            'bucket' => env('S3_BUCKET'),\n            'key' => env('S3_KEY'),\n            'secret' => env('S3_SECRET'),\n            'token' => env('S3_TOKEN', null),\n            'expires' => env('S3_EXPIRES', null),\n            'endpoint' => env('S3_ENDPOINT', null),\n            'prefix' => env('S3_PREFIX'),\n            'options' => [\n                'use_path_style_endpoint' => true,\n            ]\n        ],\n    ]\n];\n```\n\n----------------------------------------\n\nTITLE: Installing XHProf via PECL\nDESCRIPTION: Terminal commands to install XHProf extension using PECL package manager.\nSOURCE: https://github.com/spiral/docs/blob/3.14/docs/en/basics/debug.md#2025-04-20_snippet_10\n\nLANGUAGE: terminal\nCODE:\n```\npear channel-update pear.php.net\npecl install xhprof\n```\n\n----------------------------------------\n\nTITLE: Entity Behavior Configuration\nDESCRIPTION: Bootloader setup for enabling entity behaviors in Cycle ORM\nSOURCE: https://github.com/spiral/docs/blob/3.14/docs/en/basics/orm.md#2025-04-20_snippet_10\n\nLANGUAGE: php\nCODE:\n```\nnamespace App\\Application\\Bootloader;\n\nuse Cycle\\ORM\\Transaction\\CommandGeneratorInterface;\nuse Cycle\\ORM\\Entity\\Behavior\\EventDrivenCommandGenerator;\nuse Spiral\\Boot\\Bootloader\\Bootloader;\n\nfinal class EntityBehaviorBootloader extends Bootloader\n{\n    protected const BINDINGS = [\n        CommandGeneratorInterface::class => \\Cycle\\ORM\\Entity\\Behavior\\EventDrivenCommandGenerator::class,\n    ];\n}\n```\n\n----------------------------------------\n\nTITLE: Using Metadata Class with PHP 8 Attributes\nDESCRIPTION: Example of applying the metadata class to a User entity using PHP 8 attribute syntax. This modern approach is available in PHP 8.0 and higher.\nSOURCE: https://github.com/spiral/docs/blob/3.14/docs/en/advanced/attributes.md#2025-04-20_snippet_10\n\nLANGUAGE: php\nCODE:\n```\n#[MyEntityMetadata(table: 'users')] \nclass User {}\n```\n\n----------------------------------------\n\nTITLE: Adding CentrifugoBootloader in Kernel (using constant)\nDESCRIPTION: This code snippet shows how to add the CentrifugoBootloader to the LOAD constant within the Kernel class of a Spiral application. This alternative method achieves the same goal as the previous snippet, which is to register the Centrifugo bootloader.\nSOURCE: https://github.com/spiral/docs/blob/3.14/docs/zh-CN/websockets/configuration.md#2025-04-20_snippet_1\n\nLANGUAGE: php\nCODE:\n```\n```php app/src/Application/Kernel.php\nprotected const LOAD = [\n    // ...\n    \\Spiral\\RoadRunnerBridge\\Bootloader\\CentrifugoBootloader::class,\n    // ...\n];\n```\n```\n\n----------------------------------------\n\nTITLE: JSON Structure for Validation Errors in Nested Filters\nDESCRIPTION: Demonstrates how validation errors are nested in the response when using composite filters, with errors from nested filters appearing in sub-arrays.\nSOURCE: https://github.com/spiral/docs/blob/3.14/docs/en/filters/composite.md#2025-04-20_snippet_3\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"name\": \"This field is required.\",\n  \"address\": {\n    \"city\": \"This field is required.\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Scheduled Workflow\nDESCRIPTION: Implementation of scheduled workflow execution using Temporal Schedules\nSOURCE: https://github.com/spiral/docs/blob/3.14/docs/en/temporal/usage.md#2025-04-20_snippet_19\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\ndeclare(strict_types=1);\n\nnamespace App\\Endpoint\\Console;\n\nuse Spiral\\Console\\Attribute\\Argument;\nuse Spiral\\Console\\Attribute\\AsCommand;\nuse Spiral\\Console\\Attribute\\Option;\nuse Spiral\\Console\\Attribute\\Question;\nuse Spiral\\Console\\Command;\nuse Temporal\\Client\\ScheduleClientInterface;\nuse Temporal\\Client\\Schedule;\n\n#[AsCommand(name: 'check:status')]\nfinal class CheckStatusCommand extends Command\n{\n    #[Argument(description: 'Domain to check')]\n    #[Question(question: 'What domain do you want to check?')]\n    private string $domain;\n\n    #[Option(name: 'interval', shortcut: 'i', description: 'Interval in minutes')]\n    private int $intervalInMinutes = 5;\n\n    public function __invoke(ScheduleClientInterface $client): int\n    {\n        $client->createSchedule(\n            Schedule\\Schedule::new()->withAction(\n                Schedule\\Action\\StartWorkflowAction::new(WebsiteStatusWorkflow::class)\n                    ->withRetryPolicy(\\Temporal\\Common\\RetryOptions::new()->withMaximumAttempts(3))\n                    ->withWorkflowExecutionTimeout('40m')\n            )->withSpec(\n                Schedule\\Spec\\ScheduleSpec::new()\n                    ->withIntervalList(5 * 60) // every 5 minutes\n                    ->withJitter(60) // with jitter of 1 minute\n            ),\n        );\n\n        return self::SUCCESS;\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Asserting File Existence in Storage\nDESCRIPTION: Demonstrates how to assert that a file exists in a storage bucket.\nSOURCE: https://github.com/spiral/docs/blob/3.14/docs/en/testing/storage.md#2025-04-20_snippet_1\n\nLANGUAGE: php\nCODE:\n```\n$uploads = $storage->bucket('uploads');\n$uploads->assertExists('image.jpg');\n```\n\n----------------------------------------\n\nTITLE: Asserting Scaffolder Command with Options in Spiral Framework (PHP)\nDESCRIPTION: Shows how to test scaffolder commands with additional options and assert that the generated code contains expected strings based on these options.\nSOURCE: https://github.com/spiral/docs/blob/3.14/docs/en/testing/start.md#2025-04-20_snippet_14\n\nLANGUAGE: php\nCODE:\n```\n$this->assertScaffolderCommandContains(\n    'create:command',\n    [\n        'name' => 'TestCommand',\n        '-o' => 'foo',\n    ],\n    expectedStrings: [\n        \"#[Option(description: 'Argument description')]\",\n        'private bool $foo;'\n    ],\n);\n```\n\n----------------------------------------\n\nTITLE: Rendering Views with PrototypeTrait\nDESCRIPTION: Example of rendering a view using PrototypeTrait in a controller\nSOURCE: https://github.com/spiral/docs/blob/3.14/docs/en/views/stempler.md#2025-04-20_snippet_1\n\nLANGUAGE: php\nCODE:\n```\nnamespace App\\Endpoint\\Web;\\n\\nuse Spiral\\Prototype\\Traits\\PrototypeTrait;\\n\\nclass HomeController\\n{\\n    use PrototypeTrait;\\n\\n    public function index(): string\\n    {\\n        return $this->views->render('welcome', [\\n            'name' => 'John',\\n        ]);\\n    }\\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Up Bootloaders Discoverer in Kernel Configuration for Spiral PHP\nDESCRIPTION: This code snippet shows how to set up the Bootloaders Discoverer in a Spiral Framework application's Kernel class. It demonstrates how to pass the BootloadersConfig to the Kernel and initialize it with a custom Bootloaders Discoverer.\nSOURCE: https://github.com/spiral/docs/blob/3.14/docs/en/cookbook/discoverer.md#2025-04-20_snippet_1\n\nLANGUAGE: php\nCODE:\n```\nnamespace App;\n\nuse Spiral\\Bootloader\\Http\\HttpBootloader;\n// Import BootloadersConfig\nuse Spiral\\Bootloader\\Config\\BootloadersConfig;\n// Import Bootloaders Discoverer\nuse Spiral\\Boot\\Injector\\BootloaderDiscoverer\\BootloaderDiscoverer;\n// Import Kernel\nuse Spiral\\Boot\\Kernel;\n\nclass MyKernel extends Kernel\n{\n    public function __construct(BootloadersConfig $config)\n    {\n        parent::__construct(\n            // Create bootloaders Discover\n            new BootloaderDiscoverer(\n                $config->toArray(),\n                $this->definedBootloaders(),\n                directory('app')\n            ),\n            $this->defineBootloaders(),\n            $this->defineExceptionHandlers() + [\n                // handle exceptions\n            ]\n        );\n    }\n    \n    // ...Kernel logic\n}\n```\n\n----------------------------------------\n\nTITLE: Using Blocks for Resource Management\nDESCRIPTION: Shows how to use blocks to manage resources like stylesheets in a base layout template, allowing child templates to add or modify these resources.\nSOURCE: https://github.com/spiral/docs/blob/3.14/docs/en/views/stempler.md#2025-04-20_snippet_22\n\nLANGUAGE: html\nCODE:\n```\n<!DOCTYPE html>\n<html>\n<head>\n    <title>${title|Default title}</title>\n    <block:styles>\n        <link rel=\"stylesheet\" href=\"/styles/welcome.css\"/>\n    </block:styles>\n</head>\n<body class=\"${body-class|default}\">\n<block:content>\n    Default content.\n</block:content>\n</body>\n</html>\n```\n\n----------------------------------------\n\nTITLE: Including Toolkit Bundle in XHTML\nDESCRIPTION: Examples showing how to include the toolkit bundle for form components using different methods.\nSOURCE: https://github.com/spiral/docs/blob/3.14/docs/en/keeper/components.md#2025-04-20_snippet_21\n\nLANGUAGE: xhtml\nCODE:\n```\n<use:bundle path=\"toolkit:bundle\"/>\n```\n\n----------------------------------------\n\nTITLE: Installing Spiral Application with Terminal Commands\nDESCRIPTION: Command to create a new Spiral Framework project for the real-time chat application.\nSOURCE: https://github.com/spiral/docs/blob/3.14/docs/en/cookbook/simple-chat.md#2025-04-20_snippet_0\n\nLANGUAGE: terminal\nCODE:\n```\ncomposer create-project spiral/app realtime-chat\n```\n\n----------------------------------------\n\nTITLE: Using Custom Cron Expression\nDESCRIPTION: Example of using a custom cron expression to define a schedule.\nSOURCE: https://github.com/spiral/docs/blob/3.14/docs/en/advanced/scheduler.md#2025-04-20_snippet_15\n\nLANGUAGE: php\nCODE:\n```\n$schedule->command('email:send', expression: new \\Cron\\CronExpression('* * * * *'));\n```\n\n----------------------------------------\n\nTITLE: Implementing SubsetValue Filter in PHP\nDESCRIPTION: Shows how to use SubsetValue to validate if all input elements match a predefined set of allowed values.\nSOURCE: https://github.com/spiral/docs/blob/3.14/docs/en/component/data-grid.md#2025-04-20_snippet_44\n\nLANGUAGE: php\nCODE:\n```\nuse Spiral\\DataGrid\\Specification\\Value;\n\n// expects an array of int values\n$value = new Value\\SubsetValue(new Value\\IntValue(), 1, '2', 3);\n \n$value->accepts('3');    // true\n$value->accepts(4);      // false\n$value->accepts([3, 4]); // false\n$value->accepts([2, 3]); // true\n$value->convert('3');    // [3]\n```\n\n----------------------------------------\n\nTITLE: Delaying Email Sending in Spiral PHP\nDESCRIPTION: Shows how to delay the sending of an email message using different time formats in Spiral Framework.\nSOURCE: https://github.com/spiral/docs/blob/3.14/docs/zh-CN/advanced/sendit.md#2025-04-20_snippet_5\n\nLANGUAGE: php\nCODE:\n```\nuse Spiral\\Mailer\\Message;\n\n$message = new Message('test', 'email@domain.com');\n$message->setDelay(new \\DateTimeImmutable('+ 60 minute'));\n// or\n$message->setDelay(new \\DateInterval('PT60S'));\n// or\n$message->setDelay(100);\n```\n\n----------------------------------------\n\nTITLE: Autocomplete Form Component in XHTML\nDESCRIPTION: Example of implementing an autocomplete form component with custom options and server-side integration.\nSOURCE: https://github.com/spiral/docs/blob/3.14/docs/en/keeper/components.md#2025-04-20_snippet_22\n\nLANGUAGE: xhtml\nCODE:\n```\n<form:autocomplete\n        name=\"userId2\"\n        label=\"Simple Autocomplete\"\n        value=\"1\"\n>\n    <script role=\"sf-options\" type=\"application/json\">\n        {\n            \"url\": \"/keeper/users/list\",\n            \"searchKey\": \"firstName\",\n            \"valueKey\": \"id\"\n        }\n    \n    </script>\n</form:autocomplete>\n```\n\n----------------------------------------\n\nTITLE: Binding Interface to Singleton with Autowire\nDESCRIPTION: Shows how to bind an interface to a singleton using Autowire to specify parameters.\nSOURCE: https://github.com/spiral/docs/blob/3.14/docs/zh-CN/container/configuration.md#2025-04-20_snippet_3\n\nLANGUAGE: php\nCODE:\n```\nuse Spiral\\Core\\BinderInterface;\nuse Spiral\\Core\\Container\\Autowire;\n\npublic function boot(BinderInterface $binder): void\n{\n    $binder->bindSingleton(\n        UserRepositoryInterface::class, \n        new Autowire(CycleUserRepository::class, ['table' => 'users'])\n    );\n}\n```\n\n----------------------------------------\n\nTITLE: Creating User Profile Controller with Scoped Dependencies in PHP\nDESCRIPTION: Shows how to use scoped AuthenticatedUser in a controller context.\nSOURCE: https://github.com/spiral/docs/blob/3.14/docs/en/container/attributes.md#2025-04-20_snippet_3\n\nLANGUAGE: php\nCODE:\n```\nfinal class UserProfileController\n{\n    public function getProfile(AuthenticatedUser $user)\n    {\n        // Use the $user data to fetch and return the profile.\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: String Value Accessor Examples in PHP\nDESCRIPTION: Demonstrates usage of ToUpper accessor with different value types including StringValue and ScalarValue. Shows how accessors handle various input types and perform string transformations.\nSOURCE: https://github.com/spiral/docs/blob/3.14/docs/en/component/data-grid.md#2025-04-20_snippet_51\n\nLANGUAGE: php\nCODE:\n```\nuse Spiral\\DataGrid\\Specification\\Value;\nuse Spiral\\DataGrid\\Specification\\Value\\Accessor;\n\n(new Accessor\\ToUpper(new Value\\StringValue()))->convert('abc'); // 'ABC'\n(new Accessor\\ToUpper(new Value\\StringValue()))->convert('ABC'); // 'ABC'\n(new Accessor\\ToUpper(new Value\\StringValue()))->convert(123);   // '123'\n(new Accessor\\ToUpper(new Value\\ScalarValue()))->convert(123);   // 123\n```\n\n----------------------------------------\n\nTITLE: Creating Custom Bootloader Configuration Class\nDESCRIPTION: Example of extending BootloadConfig to create a custom configuration class for specific use cases.\nSOURCE: https://github.com/spiral/docs/blob/3.14/docs/en/framework/bootloaders.md#2025-04-20_snippet_7\n\nLANGUAGE: php\nCODE:\n```\nnamespace App\\Application\\Bootloader;\n\nuse Spiral\\Boot\\Attribute\\BootloadConfig;\nuse Spiral\\Boot\\Bootloader\\Bootloader;\n\nclass TargetRRWorker extends BootloadConfig \n{\n    public function __construct(array $modes)\n    {\n        parent::__construct(\n            env: ['RR_MODE' => $modes],\n        );\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Registering EventsBootloader Using Constant in Kernel\nDESCRIPTION: Code example showing how to register the Events component bootloader using the LOAD constant in the application kernel.\nSOURCE: https://github.com/spiral/docs/blob/3.14/docs/en/advanced/events.md#2025-04-20_snippet_1\n\nLANGUAGE: php\nCODE:\n```\nprotected const LOAD = [\n    // ...\n    \\Spiral\\Events\\Bootloader\\EventsBootloader::class,\n    // ...\n];\n```\n\n----------------------------------------\n\nTITLE: Creating a Basic QR Code with Custom Parameters in Spiral\nDESCRIPTION: Example of generating a QR code for a URL with custom size, colors, and error correction level. The component renders the QR code with custom foreground and background colors.\nSOURCE: https://github.com/spiral/docs/blob/3.14/docs/en/keeper/components.md#2025-04-20_snippet_31\n\nLANGUAGE: xhtml\nCODE:\n```\n<ui:qrcode\n        value=\"https://spiral.dev/\"\n        type=\"canvas\"\n        size=\"200\"\n        bgColor=\"#f8f9fa\"\n        fgColor=\"#49545f\"\n        ecLevel=\"H\"\n/>\n```\n\n----------------------------------------\n\nTITLE: Generated Filter Class with Properties and Input Attributes\nDESCRIPTION: The output of the create:filter command with properties, showing a filter class with typed properties and corresponding input attributes (Post, Header, RemoteAddress, Query) for data binding.\nSOURCE: https://github.com/spiral/docs/blob/3.14/docs/en/basics/scaffolding.md#2025-04-20_snippet_20\n\nLANGUAGE: php\nCODE:\n```\ndeclare(strict_types=1);\n\nnamespace App\\Endpoint\\Web\\Filter;\n\nuse Spiral\\Filters\\Attribute\\Input\\Header;\nuse Spiral\\Filters\\Attribute\\Input\\Post;\nuse Spiral\\Filters\\Attribute\\Input\\Query;\nuse Spiral\\Filters\\Attribute\\Input\\RemoteAddress;\nuse Spiral\\Filters\\Model\\Filter;\n\nfinal class CreateUserFilter extends Filter\n{\n    #[Post(key: 'username')]\n    public string $username;\n\n    #[Post(key: 'tags')]\n    public array $tags;\n\n    #[RemoteAddress(key: 'ip')]\n    public string $ip;\n\n    #[Header(key: 'token')]\n    public string $token;\n\n    #[Query(key: 'status')]\n    public int $status;\n}\n```\n\n----------------------------------------\n\nTITLE: Adding Global Middleware Using HttpBootloader\nDESCRIPTION: Example showing how to add global middleware using the HttpBootloader class in a custom application bootloader.\nSOURCE: https://github.com/spiral/docs/blob/3.14/docs/en/http/middleware.md#2025-04-20_snippet_2\n\nLANGUAGE: php\nCODE:\n```\nnamespace App\\Application\\Bootloader;\n\nuse Spiral\\Bootloader\\Http\\HttpBootloader;\nuse Spiral\\Core\\Container\\Autowire;\nuse Psr\\Container\\ContainerInterface;\nuse App\\Endpoint\\Web\\Middleware\\MyMiddleware;\n\nclass AppBootloader extends Bootloader\n{\n    public function boot(HttpBootloader $http, ContainerInterface $container): void\n    {\n        // automatically resolved by Container\n        $http->addMiddleware(MyMiddleware::class);\n        \n        // automatically resolved by Container\n        $container->bind('my:middleware', fn() => new MyMiddleware);\n        $http->addMiddleware('my:middleware');\n        \n        // Autowire allows creating an object with dependency resolving from the container\n        // and passing some parameters manually\n        $http->addMiddleware(new Autowire(MyMiddleware::class, ['someParameter' => 'value']));\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: User Input Question\nDESCRIPTION: Example of asking user a question with default value.\nSOURCE: https://github.com/spiral/docs/blob/3.14/docs/en/console/commands.md#2025-04-20_snippet_15\n\nLANGUAGE: php\nCODE:\n```\n$status = $this->ask('Are you sure?', default: 'no');\n```\n\n----------------------------------------\n\nTITLE: Using Context Block for Hidden Content\nDESCRIPTION: Shows how to use the special 'context' block to include content from outside defined blocks in child templates, useful for handling stacks and other directives.\nSOURCE: https://github.com/spiral/docs/blob/3.14/docs/en/views/stempler.md#2025-04-20_snippet_37\n\nLANGUAGE: html\nCODE:\n```\n<!DOCTYPE html>\n<html>\n<head>\n    <title>${title|Default title}</title>\n    <stack:collect name=\"styles\" level=\"2\">\n        <link rel=\"stylesheet\" href=\"/styles/welcome.css\"/>\n    </stack:collect>\n</head>\n<body class=\"${body-class|default}\">\n<block:content>\n    Default content.\n</block:content>\n</body>\n<block:context/>\n</html>\n```\n\n----------------------------------------\n\nTITLE: Implementing Finalize Method for Scope Destruction in PHP\nDESCRIPTION: Shows how to use the Finalize attribute to specify a method for cleanup when a scope is destroyed.\nSOURCE: https://github.com/spiral/docs/blob/3.14/docs/en/container/scopes.md#2025-04-20_snippet_5\n\nLANGUAGE: php\nCODE:\n```\n#[Finalize(method: 'finalize')]\nclass Foo\n{\n    public bool $finalized = false;\n\n    public function finalize(Logger $logger): void\n    {\n        $this->finalized = true;\n        $logger->log();\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Using WeakReference in Spiral Container (PHP)\nDESCRIPTION: Demonstrates the use of WeakReference for working with weak reference objects in the container. This allows objects to be garbage-collected when there are no strong references.\nSOURCE: https://github.com/spiral/docs/blob/3.14/docs/en/container/configuration.md#2025-04-20_snippet_20\n\nLANGUAGE: php\nCODE:\n```\nse Spiral\\Core\\Config\\WeakReference;\n\n$obj = new MyClass();\n\n$container->bind(MyClass::class, new WeakReference(\n    reference: new \\WeakReference($obj)\n));\n\n$obj === $container->get(MyClass::class); // true\n\nunset($obj);\n\n$obj1 = $container->get(MyClass::class); // A new object will be created\n$obj1 === $container->get(MyClass::class); // true\n```\n\n----------------------------------------\n\nTITLE: Chat Controller Implementation\nDESCRIPTION: Controller for the authenticated chat page with token handling.\nSOURCE: https://github.com/spiral/docs/blob/3.14/docs/en/cookbook/simple-chat.md#2025-04-20_snippet_36\n\nLANGUAGE: php\nCODE:\n```\nnamespace App\\Endpoint\\Web;\n\nuse Spiral\\Prototype\\Traits\\PrototypeTrait;\nuse Spiral\\Router\\Annotation\\Route;\n\nfinal class ChatController\n{\n    use PrototypeTrait;\n\n    #[Route('/', group: 'auth')]\n    public function index(): string\n    {\n        return $this->views->render('chat', [\n            'token' => $this->auth->getToken()->getID(),\n        ]);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Route-Specific Middleware Profiler\nDESCRIPTION: Adding ProfilerMiddleware to a specific route using PHP attributes.\nSOURCE: https://github.com/spiral/docs/blob/3.14/docs/en/basics/debug.md#2025-04-20_snippet_18\n\nLANGUAGE: php\nCODE:\n```\nuse Spiral\\Router\\Annotation\\Route;\n\nfinal class UserController\n{\n    #[Route(route: '/users', name: 'user.store', methods: ['POST'], middleware: \\Spiral\\Profiler\\ProfilerMiddleware::class)]\n    public function store(...): void \n    {\n        // ...\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Simplified Group Declaration with Bootloader\nDESCRIPTION: Shows how to declare groups in a bootloader for use with multiple controllers.\nSOURCE: https://github.com/spiral/docs/blob/3.14/docs/en/keeper/sitemap.md#2025-04-20_snippet_4\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\ndeclare(strict_types=1);\n\nuse Spiral\\Keeper\\Bootloader\\SitemapBootloader;\nuse Spiral\\Keeper\\Module\\Sitemap;\n\nclass NavigationBootloader extends SitemapBootloader\n{\n    public function declareSitemap(Sitemap $sitemap): void\n    {\n        $sitemap->group('users', 'Users and Groups', ['icon' => '...']);\n        // ...\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Using Shared Binding\nDESCRIPTION: Demonstrates how to use Shared binding for persistent objects in the container.\nSOURCE: https://github.com/spiral/docs/blob/3.14/docs/zh-CN/container/configuration.md#2025-04-20_snippet_16\n\nLANGUAGE: php\nCODE:\n```\nuse Spiral\\Core\\Config\\Shared;\n\n$container->bind(MyClass::class, new Shared(value: new MyClass(...)));\n```\n\n----------------------------------------\n\nTITLE: Registering View Namespaces in Spiral\nDESCRIPTION: Example of registering a custom namespace for views using ViewsBootloader.\nSOURCE: https://github.com/spiral/docs/blob/3.14/docs/en/views/basics.md#2025-04-20_snippet_11\n\nLANGUAGE: php\nCODE:\n```\nnamespace App\\Application\\Bootloader;\n\nuse Spiral\\Boot\\Bootloader\\Bootloader;\nuse Spiral\\Views\\Bootloader\\ViewsBootloader;\n\nclass AppBootloader extends Bootloader\n{\n    public function boot(ViewsBootloader $views): void\n    {\n        $views->addDirectory('my-package', directory('root') . 'my-package/views');\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Building and Pushing Docker Image for Spiral Application\nDESCRIPTION: These commands demonstrate how to build a Docker image for a Spiral application, tag it with version numbers, and push it to a Docker registry.\nSOURCE: https://github.com/spiral/docs/blob/3.14/docs/en/start/deployment.md#2025-04-20_snippet_9\n\nLANGUAGE: terminal\nCODE:\n```\ndocker build . -t my-application:latest\ndocker push my-application:latest\n\ndocker build . -t my-application:latest -t my-application:1.0\ndocker push my-application:latest\ndocker push my-application:1.0\n```\n\n----------------------------------------\n\nTITLE: Stack Order Independence\nDESCRIPTION: Demonstrates that stack collection and push/prepend operations can be defined in any order in the template, as long as they're properly scoped.\nSOURCE: https://github.com/spiral/docs/blob/3.14/docs/en/views/stempler.md#2025-04-20_snippet_29\n\nLANGUAGE: html\nCODE:\n```\n<stack:prepend name=\"my-stack\">\n    my value\n</stack:prepend>\n\n<stack:collect name=\"my-stack\">\n    default content\n</stack:collect>\n```\n\n----------------------------------------\n\nTITLE: Creating Logger Middleware in Spiral Framework (Terminal)\nDESCRIPTION: Example command to create a Logger middleware in the Spiral Framework. This generates a new LoggerMiddleware class.\nSOURCE: https://github.com/spiral/docs/blob/3.14/docs/zh-CN/basics/scaffolding.md#2025-04-20_snippet_2\n\nLANGUAGE: terminal\nCODE:\n```\nphp app.php create:middleware Logger\n```\n\n----------------------------------------\n\nTITLE: Pushing to Layout Stacks from Child Templates\nDESCRIPTION: Demonstrates how to push content to a stack defined in a parent layout from a child template, requiring the stack push to be within an extended block.\nSOURCE: https://github.com/spiral/docs/blob/3.14/docs/en/views/stempler.md#2025-04-20_snippet_36\n\nLANGUAGE: html\nCODE:\n```\n<extends:layout.base title=\"Homepage\" body-class=\"homepage ${parent}\"/>\n\n<block:resources>\n    <stack:push name=\"styles\">\n        <link rel=\"stylesheet\" href=\"/styles/homepage.css\"/>\n    </stack:push>\n</block:resources>\n\n<block:page>\n    Page content.\n</block:page>\n```\n\n----------------------------------------\n\nTITLE: Configuring Scoped Class Locator in PHP Configuration File\nDESCRIPTION: Illustrates how to set up scopes for the scoped class locator by defining them in the tokenizer.php configuration file of a Spiral application.\nSOURCE: https://github.com/spiral/docs/blob/3.14/docs/en/advanced/tokenizer.md#2025-04-20_snippet_6\n\nLANGUAGE: php\nCODE:\n```\nreturn [\n    'scopes' => [\n        'scopeName' => [\n            'directories' => [\n                directory('app') . 'Directory',\n            ],\n            'exclude' => [\n                directory('app') . 'Directory/Excluded',\n            ]\n        ],\n    ]\n];\n```\n\n----------------------------------------\n\nTITLE: Declaring Tagged Metrics in PHP Bootloader\nDESCRIPTION: This PHP code shows how to declare a tagged (labeled) metric in a Spiral bootloader class.\nSOURCE: https://github.com/spiral/docs/blob/3.14/docs/en/advanced/prometheus-metrics.md#2025-04-20_snippet_6\n\nLANGUAGE: php\nCODE:\n```\nuse Spiral\\RoadRunner\\Metrics\\MetricsInterface;\nuse Spiral\\RoadRunner\\Metrics\\Collector;\n\nclass MetricsBootloader extends Bootloader\n{\n    //...\n\n    public function boot(MetricsInterface $metrics): void\n    {\n        $metrics->declare(\n            'registered_users',\n            Collector::counter()->withHelp('Total registered users counter.')->withLabels('type')\n        );\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Refactored Comment Entity with Constructor Injection\nDESCRIPTION: Refactored Comment entity that moves the message property into the constructor using constructor property promotion. This approach simplifies the entity definition while maintaining the same database schema.\nSOURCE: https://github.com/spiral/docs/blob/3.14/docs/en/cookbook/quick-start.md#2025-04-20_snippet_17\n\nLANGUAGE: php\nCODE:\n```\nuse Cycle\\Annotated\\Annotation\\Column;\nuse Cycle\\Annotated\\Annotation\\Entity;\n\n#[Entity]\nclass Comment\n{\n    #[Column(type: 'primary')]\n    public int $id;\n\n    public function __construct(\n        #[Column(type: 'string')]\n        public string $message\n    ) {\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Using Auth Directive in Keeper Templates\nDESCRIPTION: Demonstrates how to use the auth directive to check permissions with context using GuardInterface under the hood.\nSOURCE: https://github.com/spiral/docs/blob/3.14/docs/en/keeper/views.md#2025-04-20_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n@auth('permision', ['some' => 'context'])\n<p>[[Allowed]]</p>\n@endauth\n```\n\n----------------------------------------\n\nTITLE: Setting Up HTTP Test for HomeController in PHP\nDESCRIPTION: This snippet demonstrates how to set up an HTTP test for a HomeController using Spiral's FakeHttp class. It shows the basic structure of a test case, including setup and a sample test method.\nSOURCE: https://github.com/spiral/docs/blob/3.14/docs/en/testing/http.md#2025-04-20_snippet_0\n\nLANGUAGE: php\nCODE:\n```\nnamespace Tests\\Feature;\n\nuse Spiral\\Testing\\Http\\FakeHttp;\nuse Tests\\TestCase;\n\nfinal class HomeControllerTest extends TestCase\n{\n    private FakeHttp $http;\n\n    protected function setUp(): void\n    {\n        parent::setUp();\n        $this->http = $this->fakeHttp();\n    }\n\n    public function testIndex(): void\n    {\n        $response = $this->http->get('/');\n        $response->assertOk();\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Asserting Email Send Count\nDESCRIPTION: Shows how to verify that a specific email type was sent an exact number of times using assertSentTimes().\nSOURCE: https://github.com/spiral/docs/blob/3.14/docs/en/testing/mail.md#2025-04-20_snippet_2\n\nLANGUAGE: php\nCODE:\n```\n$this->mailer->assertSentTimes(WelcomeMessage::class, 2);\n```\n\n----------------------------------------\n\nTITLE: Installing EventsBootloader in Spiral Application\nDESCRIPTION: Adding the EventsBootloader to the bootloader list in the application's kernel class. This enables the Events component in a Spiral application.\nSOURCE: https://github.com/spiral/docs/blob/3.14/docs/zh-CN/advanced/events.md#2025-04-20_snippet_0\n\nLANGUAGE: php\nCODE:\n```\npublic function defineBootloaders(): array\n{\n    return [\n        // ...\n        \\Spiral\\Events\\Bootloader\\EventsBootloader::class,\n        // ...\n    ];\n}\n```\n\nLANGUAGE: php\nCODE:\n```\nprotected const LOAD = [\n    // ...\n    \\Spiral\\Events\\Bootloader\\EventsBootloader::class,\n    // ...\n];\n```\n\n----------------------------------------\n\nTITLE: Configuring Callable Route Target in PHP\nDESCRIPTION: Sets up a route target using a callable function or closure. This is useful for handling routes with simple logic without creating a separate controller.\nSOURCE: https://github.com/spiral/docs/blob/3.14/docs/en/http/routing.md#2025-04-20_snippet_15\n\nLANGUAGE: php\nCODE:\n```\nuse Psr\\Http\\Message\\ResponseInterface;\nuse Psr\\Http\\Message\\ServerRequestInterface;\n\n$routes->add(name: 'greeting', pattern: '/greeting')\n    ->callable(function (ServerRequestInterface $r, ResponseInterface $rsp) {\n        return 'Hello, world!';\n    });\n```\n\n----------------------------------------\n\nTITLE: Using Then Callback with Scheduler\nDESCRIPTION: Example of using the then callback to execute code after a scheduled task completes.\nSOURCE: https://github.com/spiral/docs/blob/3.14/docs/en/advanced/scheduler.md#2025-04-20_snippet_9\n\nLANGUAGE: php\nCODE:\n```\n$schedule->command('backup:run')\n   ->everyFiveMinutes()\n   ->then(static fn(Notifier $notifier) => $notifier->send('Backup completed'));\n   -> ...;\n```\n\n----------------------------------------\n\nTITLE: Database Configuration Setup\nDESCRIPTION: Configuration file for database connections and drivers\nSOURCE: https://github.com/spiral/docs/blob/3.14/docs/en/basics/orm.md#2025-04-20_snippet_4\n\nLANGUAGE: php\nCODE:\n```\nuse Cycle\\Database\\Config;\n\nreturn [\n    'logger' => [\n        'default' => env('DB_LOGGER_DEFAULT'),\n        'drivers' => [],\n    ],\n    'default' => env('DB_DEFAULT', 'default'),\n    'databases' => [\n        'default' => [\n            'driver' => 'runtime',\n        ],\n    ],\n    'drivers' => [\n        'runtime' => new Config\\MySQLDriverConfig(\n            connection: new Config\\MySQL\\TcpConnectionConfig(\n                database: 'homestead',\n                host: '127.0.0.1',\n                port: 3307,\n                user: 'root',\n                password: 'secret',\n            ),\n            queryCache: true\n        ),\n    ],\n];\n```\n\n----------------------------------------\n\nTITLE: Defining Injectable Config with Predefined Values in PHP\nDESCRIPTION: Illustrates how to create an injectable config class with predefined values that will be merged with external configuration file contents.\nSOURCE: https://github.com/spiral/docs/blob/3.14/docs/en/cookbook/migration-from-v2.md#2025-04-20_snippet_9\n\nLANGUAGE: php\nCODE:\n```\nclass SomeConfig extends \\Spiral\\Core\\InjectableConfig\n{\n    // Predefined default configurations\n    protected array $config = [   // <=== Will be merged with data from some-config.php\n        'default' => 'sync',\n        'aliases' => []\n    ];\n}\n```\n\n----------------------------------------\n\nTITLE: Using ValueInterface with Between Filters in PHP\nDESCRIPTION: Demonstrates how to use ValueInterface with Between filters for both field-based and value-based comparisons.\nSOURCE: https://github.com/spiral/docs/blob/3.14/docs/zh-CN/component/data-grid.md#2025-04-20_snippet_5\n\nLANGUAGE: php\nCODE:\n```\nuse Spiral\\DataGrid\\Specification\\Filter;\nuse Spiral\\DataGrid\\Specification\\Value;\n\n// price 应该在 10 和 20 之间\n$fieldBetween  = new Filter\\Between('price', new Value\\NumericValue());\n$fieldBetween = $fieldBetween->withValue([10, '20']);\n\n// '2020 Apr, 10th' 应该在 start_date 和 end_date 之间\n$valueBetween  = new Filter\\ValueBetween(new Value\\DatetimeValue(), ['start_date', 'end_date']);\n$valueBetween = $valueBetween->withValue('2020 Apr, 10th');\n```\n\n----------------------------------------\n\nTITLE: Extending a Nested Layout\nDESCRIPTION: Demonstrates how to use a nested layout by extending the 'page' layout instead of directly extending the base layout, creating a hierarchical template structure.\nSOURCE: https://github.com/spiral/docs/blob/3.14/docs/en/views/stempler.md#2025-04-20_snippet_20\n\nLANGUAGE: html\nCODE:\n```\n<extends:layout.page title=\"Homepage\" body-class=\"homepage ${parent}\"/>\n\n<block:page>\n    Page content.\n</block:page>\n```\n\n----------------------------------------\n\nTITLE: Configuring Breadcrumbs in Spiral NavigationBootloader\nDESCRIPTION: This snippet demonstrates how to configure breadcrumbs using the SitemapBootloader class. It shows the creation of a multi-level hierarchy that will be rendered as breadcrumbs in the application.\nSOURCE: https://github.com/spiral/docs/blob/3.14/docs/en/keeper/sitemap.md#2025-04-20_snippet_10\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\ndeclare(strict_types=1);\n\nuse Spiral\\Keeper\\Bootloader\\SitemapBootloader;\nuse Spiral\\Keeper\\Module\\Sitemap;\n\nclass NavigationBootloader extends SitemapBootloader\n{\n    public function declareSitemap(Sitemap $sitemap): void\n    {\n        $sitemap\n            ->link('dashboard.index', 'Level 1')\n            ->link('users.index', 'Level 2')\n            ->link('groups.index', 'Level 3')\n            ->link('logs.index', 'Level 4')\n            ->link('system.index', 'Level 5');\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Console Command Example\nDESCRIPTION: Example of running a database migration command through the console dispatcher.\nSOURCE: https://github.com/spiral/docs/blob/3.14/docs/en/framework/dispatcher.md#2025-04-20_snippet_4\n\nLANGUAGE: terminal\nCODE:\n```\nphp app.php db:migrate\n```\n\n----------------------------------------\n\nTITLE: Implementing Custom Exception Reporter\nDESCRIPTION: Example of implementing a custom exception reporter class with logging functionality\nSOURCE: https://github.com/spiral/docs/blob/3.14/docs/en/basics/errors.md#2025-04-20_snippet_12\n\nLANGUAGE: php\nCODE:\n```\nnamespace App\\Application\\Exception\\Reporter;\n\nfinal class CustomReporter implements ExceptionReporterInterface\n{\n    public function __construct(\n        private readonly LoggerInterface $logger,\n    ) {}\n\n    public function report(\\Throwable $exception): void\n    {\n        // Store exception information in a file or send it to an external service\n        $this->logger->error($exception->getMessage(), ['exception' => $exception]);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Grid Date Cell with Formatting\nDESCRIPTION: Defines a date column cell with sorting capabilities and custom date formatting using Luxon. The component accepts ISO dates and allows customization of the display format.\nSOURCE: https://github.com/spiral/docs/blob/3.14/docs/en/keeper/components.md#2025-04-20_snippet_9\n\nLANGUAGE: xhtml\nCODE:\n```\n<grid:cell.link\n        name=\"created\"\n        label=\"Created At\"\n        format=\"LLL dd, yyyy HH:mm\"\n        sort=\"true\"\n        sort-dir=\"desc\"\n        sort-default=\"true\"\n/>\n```\n\n----------------------------------------\n\nTITLE: Passing AuthToken in Centrifugo JavaScript Client\nDESCRIPTION: Example of how to pass an authToken for client authentication using the Centrifugo JavaScript SDK. This demonstrates setting up a Centrifuge instance with additional authentication data.\nSOURCE: https://github.com/spiral/docs/blob/3.14/docs/en/websockets/services.md#2025-04-20_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nimport {Centrifuge} from 'centrifuge';\n\nconst centrifuge = new Centrifuge('http://127.0.0.18000/connection/websocket', {\n    data: {\n        authToken: 'my-app-auth-token'\n    }\n});\n```\n\n----------------------------------------\n\nTITLE: Dispatching Job to Specific Queue\nDESCRIPTION: Example of pushing a job to a specific queue connection using QueueConnectionProviderInterface\nSOURCE: https://github.com/spiral/docs/blob/3.14/docs/en/queue/jobs.md#2025-04-20_snippet_3\n\nLANGUAGE: php\nCODE:\n```\nuse App\\Endpoint\\Job\\SampleJob;\nuse Spiral\\Queue\\QueueConnectionProviderInterface;\n\nfinal class MyService\n{\n    public function __construct(\n        private readonly QueueConnectionProviderInterface $provider\n    ) {\n    }\n\n    public function createJob(): void\n    {\n        $this->provider->getConnection('sync')->push(SampleJob::class);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Binding with DeferredFactory DTO in PHP\nDESCRIPTION: Shows how to bind a deferred factory to the container using an array callable.\nSOURCE: https://github.com/spiral/docs/blob/3.14/docs/en/container/configuration.md#2025-04-20_snippet_15\n\nLANGUAGE: php\nCODE:\n```\nuse Spiral\\Core\\Config\\DeferredFactory;\n\n$container->bind('some-binding', new DeferredFactory(\n    factory: [MyClass::class, 'handle'],\n));\n```\n\n----------------------------------------\n\nTITLE: Accessing Custom Input Bag in Spiral 3.0\nDESCRIPTION: Example showing how to access files through a custom input bag after it has been registered in the application.\nSOURCE: https://github.com/spiral/docs/blob/3.14/docs/en/cookbook/migration-from-v2.md#2025-04-20_snippet_5\n\nLANGUAGE: php\nCODE:\n```\n$container->get(\\Spiral\\Http\\Request\\InputManager::class)->symfonyFiles('avatar');\n```\n\n----------------------------------------\n\nTITLE: Initial Console Command Structure\nDESCRIPTION: Basic structure of console command for starting workflows\nSOURCE: https://github.com/spiral/docs/blob/3.14/docs/en/temporal/usage.md#2025-04-20_snippet_17\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\ndeclare(strict_types=1);\n\nnamespace App\\Endpoint\\Console;\n\nuse Spiral\\Console\\Attribute\\Argument;\nuse Spiral\\Console\\Attribute\\AsCommand;\nuse Spiral\\Console\\Attribute\\Option;\nuse Spiral\\Console\\Attribute\\Question;\nuse Spiral\\Console\\Command;\n\n#[AsCommand(name: 'check:status')]\nfinal class CheckStatusCommand extends Command\n{\n    public function __invoke(): int\n    {\n        // Put your command logic here\n        $this->info('Command logic is not implemented yet');\n\n        return self::SUCCESS;\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Mixed Specifications with Filters and Sorters\nDESCRIPTION: Shows how to use SortedFilter and FilteredSorter to combine both filtering and sorting under a single filter name in the DataGrid schema.\nSOURCE: https://github.com/spiral/docs/blob/3.14/docs/en/component/data-grid.md#2025-04-20_snippet_34\n\nLANGUAGE: php\nCODE:\n```\n$schema->addFilter(\n    'filter',\n    new Filter\\Select(\n        [\n            'upcoming'      => new Sorter\\SortedFilter(\n                'upcoming',\n                new Filter\\Gt('date', new DateTimeImmutable('now')),\n                new Sorter\\AscSorter('date')\n            ),\n            'mostReviewed'  => new Sorter\\SortedFilter(\n                'mostReviewed',\n                new Filter\\Lte('date', new DateTimeImmutable('now')),\n                new Sorter\\DescSorter('count_reviews')\n            )\n        ]\n    )\n);\n```\n\n----------------------------------------\n\nTITLE: Creating UserRegisteredNotification Job Handler in Spiral Framework (Terminal)\nDESCRIPTION: Example command to create a UserRegisteredNotification job handler in the Spiral Framework. This generates a new UserRegisteredNotificationJob class.\nSOURCE: https://github.com/spiral/docs/blob/3.14/docs/zh-CN/basics/scaffolding.md#2025-04-20_snippet_6\n\nLANGUAGE: terminal\nCODE:\n```\nphp app.php create:jobHandler UserRegisteredNotification\n```\n\n----------------------------------------\n\nTITLE: Basic Temporal Activity Structure in PHP\nDESCRIPTION: Initial structure of a Temporal activity class in PHP, including the necessary namespace, interface, and method declarations.\nSOURCE: https://github.com/spiral/docs/blob/3.14/docs/en/temporal/usage.md#2025-04-20_snippet_4\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\ndeclare(strict_types=1);\n\nnamespace App\\Endpoint\\Temporal\\Activity;\n\nuse React\\Promise\\PromiseInterface;\nuse Temporal\\Activity\\ActivityInterface;\nuse Temporal\\Activity\\ActivityMethod;\n\n#[ActivityInterface]\nclass PingWebsiteActivity\n{\n    /**\n     * @return PromiseInterface<bool>\n     */\n    #[ActivityMethod(name: 'ping')]\n    public function ping(): bool\n    {\n        // TODO: Implement activity method\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Console Command for gRPC Client Usage\nDESCRIPTION: Implements a console command that uses the injected PingerInterface to make gRPC calls to the ping service. The command takes a URL argument, sends it to the gRPC service, and displays the response.\nSOURCE: https://github.com/spiral/docs/blob/3.14/docs/zh-CN/grpc/client.md#2025-04-20_snippet_4\n\nLANGUAGE: php\nCODE:\n```\nnamespace App\\Endpoint\\Console;\n\nuse Spiral\\Console\\Attribute\\Argument;\nuse Spiral\\Console\\Attribute\\AsCommand;\nuse Spiral\\Console\\Attribute\\Question;\nuse GRPC\\Pinger\\PingerInterface;\nuse Spiral\\Console\\Command;\nuse GRPC\\Pinger\\PingRequest;\nuse Spiral\\RoadRunner\\GRPC\\Context;\nuse Spiral\\RoadRunner\\GRPC\\Exception\\GRPCException;\n\n#[AsCommand(name: 'ping')]\nfinal class PingCommand extends Command\n{\n    #[Argument(description: 'URL to ping')]\n    #[Question(question: 'Provide URL to ping')]\n    private string $url;\n\n    public function __invoke(\n        PingerInterface $client\n    ): int {\n        try {\n\n            $this->writeln(\\sprintf('Sending ping request [%s]...', $this->url));\n\n            $response = $client->ping(\n                new Context([]),\n                new PingRequest(['url' => $this->url])\n            );\n\n            $this->writeln(\\sprintf(\n                'Response: code - %d',\n                $response->getStatusCode()\n            ));\n\n        } catch (GRPCException $e) {\n\n            $this->writeln(\\sprintf(\n                'Error: code - %d, message - %s',\n                $e->getCode(),\n                $e->getMessage()\n            ));\n\n        }\n\n        return self::SUCCESS;\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Modifying Client Class for GRPC Interceptors in PHP\nDESCRIPTION: This code snippet demonstrates how to modify a client class to support GRPC interceptors in Spiral Framework.\nSOURCE: https://github.com/spiral/docs/blob/3.14/docs/en/grpc/interceptors.md#2025-04-20_snippet_6\n\nLANGUAGE: php\nCODE:\n```\nnamespace App\\Application\\Bootloader;\n\nuse App\\Service\\PingerClient;\nuse App\\Service\\RequestCore;\nuse GRPC\\Pinger\\PingerInterface;\nuse Spiral\\Boot\\Bootloader\\Bootloader;\nuse Spiral\\Boot\\EnvironmentInterface;\nuse Spiral\\Core\\InterceptableCore;\n\nfinal class AppBootloader extends Bootloader\n{\n    protected const SINGLETONS = [\n        PingerInterface::class => [self::class, 'initPingService'],\n    ];\n\n    private function initPingService(\n        EnvironmentInterface $env\n    ): PingServiceInterface\n    {\n        $core = new InterceptableCore(\n            new RequestCore(\n                $env->get('PING_SERVICE_HOST', '127.0.0.1:9001'),\n                ['credentials' => \\Grpc\\ChannelCredentials::createInsecure()]\n            )\n        );\n\n        // Here you can register your interceptors\n        $core->addInterceptor(new \\App\\Service\\Interceptor\\HandleResponseErrorsInterceptor());\n\n        return new PingerClient($core);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Directional Sorter for Flexible Sorting\nDESCRIPTION: Example of using DirectionalSorter to dynamically choose between two sorters based on the provided direction. This allows for different field sets to be used for ascending and descending sorting.\nSOURCE: https://github.com/spiral/docs/blob/3.14/docs/en/component/data-grid.md#2025-04-20_snippet_17\n\nLANGUAGE: php\nCODE:\n```\nuse Spiral\\DataGrid\\Specification\\Sorter;\n\n$sorter = new Sorter\\DirectionalSorter(\n    new Sorter\\AscSorter('first_name'),\n    new Sorter\\DescSorter('last_name')\n);\n\n// will sort by first_name asc\n$ascSorter = $sorter->withDirection('asc');\n\n// will sort by last_name desc\n$descSorter = $sorter->withDirection('desc');\n```\n\n----------------------------------------\n\nTITLE: Asserting File Visibility Not Changed in Storage\nDESCRIPTION: Shows how to verify that a file's visibility remains unchanged in storage.\nSOURCE: https://github.com/spiral/docs/blob/3.14/docs/en/testing/storage.md#2025-04-20_snippet_12\n\nLANGUAGE: php\nCODE:\n```\n$uploads = $storage->bucket('uploads');\n$uploads->assertVisibilityNotChanged('file.txt');\n```\n\n----------------------------------------\n\nTITLE: Manually Resuming a Session in Spiral PHP\nDESCRIPTION: Shows how to manually resume or create a session using the session object.\nSOURCE: https://github.com/spiral/docs/blob/3.14/docs/en/basics/session.md#2025-04-20_snippet_3\n\nLANGUAGE: php\nCODE:\n```\n$this->session->resume();\n```\n\n----------------------------------------\n\nTITLE: Basic Golang gRPC Client Implementation\nDESCRIPTION: A simple Go implementation of a gRPC client that connects to the Pinger service, sends a ping request with a URL, and displays the response status code. It demonstrates basic client setup and error handling.\nSOURCE: https://github.com/spiral/docs/blob/3.14/docs/zh-CN/grpc/client.md#2025-04-20_snippet_7\n\nLANGUAGE: golang\nCODE:\n```\npackage main\n\nimport (\n\t\"context\"\n\t\"fmt\"\n\t\"log\"\n\n\t\"google.golang.org/grpc\"\n\t\"pinger\"\n)\n\nfunc main() {\n\t// Set up a connection to the server.\n\tconn, err := grpc.Dial(\"127.0.0.1:9001\", grpc.WithInsecure())\n\tif err != nil {\n\t\tlog.Fatalf(\"did not connect: %v\", err)\n\t}\n\t\n\tdefer conn.Close()\n\n\tclient := pinger.NewPingerClient(conn)\n\n\t// Call the ping method.\n\tresponse, err := client.Ping(context.Background(), &pinger.PingRequest{\n\t\tUrl: \"https://google.com\",\n\t})\n\n\tif err != nil {\n\t\tlog.Fatalf(\"error calling ping: %v\", err)\n\t}\n\n\t// Print the HTTP status code.\n\tfmt.Println(response.StatusCode)\n}\n```\n\n----------------------------------------\n\nTITLE: Reading Function Metadata with Attributes\nDESCRIPTION: Examples of how to read function metadata using the ReaderInterface methods.\nSOURCE: https://github.com/spiral/docs/blob/3.14/docs/zh-CN/advanced/attributes.md#2025-04-20_snippet_5\n\nLANGUAGE: php\nCODE:\n```\n$reflection = new ReflectionMethod(RequestData::class, 'getEmail');\n\n$attributes = $reader->getFunctionMetadata($reflection); \n// returns iterable<object>\n```\n\nLANGUAGE: php\nCODE:\n```\n$reflection = new ReflectionMethod(RequestData::class, 'getEmail');\n\n$attributes = $reader->getPropertyMetadata($reflection, DTOGetter::class); \n// returns iterable<DTOGetter>\n```\n\nLANGUAGE: php\nCODE:\n```\n$reflection = new ReflectionMethod(RequestData::class, 'getEmail');\n\n$getter = $reader->firstFunctionMetadata($reflection, DTOGetter::class); \n// returns DTOGetter|null\n```\n\n----------------------------------------\n\nTITLE: Implementing Equals and NotEquals Filters in PHP\nDESCRIPTION: Examples of Equals and NotEquals filters for equality comparison operations.\nSOURCE: https://github.com/spiral/docs/blob/3.14/docs/en/component/data-grid.md#2025-04-20_snippet_24\n\nLANGUAGE: php\nCODE:\n```\nuse Spiral\\DataGrid\\Specification\\Filter;\n\n$equals = new Filter\\Equals('price', 2);       // the price should be equal to 2\n$notEquals = new Filter\\NotEquals('price', 2); // the price should not be equal to 2\n```\n\nLANGUAGE: php\nCODE:\n```\nuse Spiral\\DataGrid\\Specification\\Filter;\nuse Spiral\\DataGrid\\Specification\\Value;\n\n// the price should be equal to 2\n$equals = new Filter\\Equals('price', new Value\\NumericValue());\n$equals = $equals->withValue('2');\n\n// the price should not be equal to 2\n$notEquals = new Filter\\NotEquals('price', new Value\\NumericValue());\n$notEquals = $notEquals->withValue('2');\n```\n\n----------------------------------------\n\nTITLE: Route List Output Example\nDESCRIPTION: Shows the generated routes output from the php app.php route:list command, displaying the route names, verbs, patterns and targets.\nSOURCE: https://github.com/spiral/docs/blob/3.14/docs/en/keeper/routing.md#2025-04-20_snippet_1\n\nLANGUAGE: text\nCODE:\n```\n+-------------------+--------+------------------+---------------------------------- +\n| Name:             | Verbs: | Pattern:         | Target:                           |\n+-------------------+--------+------------------+---------------------------------- +\n| admin[createUser] | POST   | /admin/users/new | App\\Admin\\Controller\\User->create |\n| admin[user.new]   | GET    | /admin/users/new | user->new                         |\n+-------------------+--------+------------------+---------------------------------- +\n```\n\n----------------------------------------\n\nTITLE: Implementing Logout Directive in Keeper\nDESCRIPTION: Shows how to use the logout directive to wrap logout URL parameters and add the current auth token.\nSOURCE: https://github.com/spiral/docs/blob/3.14/docs/en/keeper/views.md#2025-04-20_snippet_1\n\nLANGUAGE: html\nCODE:\n```\n<a href=\"@logout(admin['auth:logout'])\">[[Log out]]</a>\n```\n\n----------------------------------------\n\nTITLE: Creating UserFactory for Test Data Generation in PHP\nDESCRIPTION: This factory class extends AbstractFactory to generate User entities with fake data for testing, including a hashed password. It defines the entity structure and provides methods to create instances.\nSOURCE: https://github.com/spiral/docs/blob/3.14/docs/zh-CN/cookbook/simple-chat.md#2025-04-20_snippet_7\n\nLANGUAGE: terminal\nCODE:\n```\nphp app.php create:factory UserFactory\n```\n\nLANGUAGE: php\nCODE:\n```\nnamespace Database\\Factory;\n\nuse App\\Database\\User;\nuse Spiral\\DatabaseSeeder\\Factory\\AbstractFactory;\n\nfinal class UserFactory extends AbstractFactory\n{\n    public function entity(): string\n    {\n        return User::class;\n    }\n\n    public function makeEntity(array $definition): User\n    {\n        return new User(\n            username: $definition['username'],\n            password: $definition['password'],\n        );\n    }\n\n    public function definition(): array\n    {\n        return [\n            'username' => $this->faker->userName(),\n            'password' => \\password_hash('secret', \\PASSWORD_BCRYPT),\n        ];\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Using WeakReference Binding with Class Name Alias\nDESCRIPTION: Shows how to use WeakReference binding with a class name alias in the container.\nSOURCE: https://github.com/spiral/docs/blob/3.14/docs/zh-CN/container/configuration.md#2025-04-20_snippet_9\n\nLANGUAGE: php\nCODE:\n```\nuse Spiral\\Core\\Container;\nuse WeakReference;\n\npublic function boot(Container $container): void\n{\n    $object = new stdClass();\n    $hash = \\spl_object_hash($object);\n    $reference = WeakReference::create($object);\n\n    $container->bind(stdClass::class, $reference);\n    \n    dump($hash === \\spl_object_hash($container->get(stdClass::class))); // true\n    \n    unset($object);\n    // 使用别名类创建新实例\n    dump($hash === \\spl_object_hash($container->get(stdClass::class))); // false\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Prototype Classes in Spiral\nDESCRIPTION: Command to collect all available prototype classes for dependency injection. This step is necessary after adding the Prototyped attribute to repositories.\nSOURCE: https://github.com/spiral/docs/blob/3.14/docs/en/cookbook/quick-start.md#2025-04-20_snippet_20\n\nLANGUAGE: terminal\nCODE:\n```\nphp app.php configure\n```\n\n----------------------------------------\n\nTITLE: Rendered PHP Class with Trait Output\nDESCRIPTION: Shows the output of a class declaration with a trait use statement.\nSOURCE: https://github.com/spiral/docs/blob/3.14/docs/en/component/reactor.md#2025-04-20_snippet_8\n\nLANGUAGE: php\nCODE:\n```\nclass MyClass\n{\n    use Spiral\\Prototype\\Traits\\PrototypeTrait;\n}\n```\n\n----------------------------------------\n\nTITLE: JSON Directive Usage\nDESCRIPTION: Example of using the JSON directive in Stempler templates\nSOURCE: https://github.com/spiral/docs/blob/3.14/docs/en/views/stempler.md#2025-04-20_snippet_8\n\nLANGUAGE: php\nCODE:\n```\n<script type=\"text/javascript\">\\n    var value = @json($value);\\n    console.log(value.key);\\n</script>\n```\n\n----------------------------------------\n\nTITLE: Listing Available Temporal Workflows\nDESCRIPTION: This command lists all available Temporal workflows in a Spiral PHP application, showing workflow names, implementing classes, and task queues.\nSOURCE: https://github.com/spiral/docs/blob/3.14/docs/en/temporal/usage.md#2025-04-20_snippet_20\n\nLANGUAGE: terminal\nCODE:\n```\nphp app.php temporal:info\n```\n\n----------------------------------------\n\nTITLE: Implementing Post View Controller in Spiral\nDESCRIPTION: Controller method to handle individual post viewing, including error handling for non-existent posts.\nSOURCE: https://github.com/spiral/docs/blob/3.14/docs/en/cookbook/quick-start.md#2025-04-20_snippet_39\n\nLANGUAGE: php\nCODE:\n```\nuse Spiral\\Http\\Exception\\ClientException\\NotFoundException;\n// ...\n\n#[Route(route: '/post/<id:\\d+>', name: 'post.view', methods: 'GET')] \npublic function view(string $id): string\n{\n    $post = $this->posts->findOneWithComments($id);\n    if ($post === null) {\n        throw new NotFoundException();\n    }\n\n    return $this->views->render('post', ['post' => $post]);\n}\n```\n\n----------------------------------------\n\nTITLE: Adding Property to PHP Class\nDESCRIPTION: Demonstrates how to add a property to a class with type, visibility, readonly status, comments and attributes.\nSOURCE: https://github.com/spiral/docs/blob/3.14/docs/en/component/reactor.md#2025-04-20_snippet_3\n\nLANGUAGE: php\nCODE:\n```\n$class = new ClassDeclaration('MyClass');\n\n$class->addProperty('property', 'default')\n    ->setProtected()\n    ->setReadOnly()\n    ->setType('string')\n    ->setComment(['My property.', '@var string'])\n    ->addAttribute('SomeAttribute');\n\ndump((string) $class);\n```\n\n----------------------------------------\n\nTITLE: WebSocket Connect Service with Authentication\nDESCRIPTION: A service implementation demonstrating how to handle WebSocket connections using the authenticated user context\nSOURCE: https://github.com/spiral/docs/blob/3.14/docs/zh-CN/websockets/interceptors.md#2025-04-20_snippet_1\n\nLANGUAGE: php\nCODE:\n```\nnamespace App\\Endpoint\\Centrifugo;\n\nuse App\\Database\\User;\nuse RoadRunner\\Centrifugo\\Payload\\ConnectResponse;\nuse RoadRunner\\Centrifugo\\Request\\Connect;\nuse RoadRunner\\Centrifugo\\Request\\RequestInterface;\nuse Spiral\\Prototype\\Traits\\PrototypeTrait;\nuse Spiral\\RoadRunnerBridge\\Centrifugo\\ServiceInterface;\n\nfinal class ConnectService implements ServiceInterface\n{\n    use PrototypeTrait;\n\n    /** @param Connect $request */\n    public function handle(RequestInterface $request): void\n    {\n        try {\n            $user = $this->auth->getActor();\n\n            $request->respond(\n                new ConnectResponse(\n                    user: (string)$user->getId(),\n                    data: ['user' => $user->jsonSerialize()],\n                    channels: ['chat'],\n                ),\n            );\n        } catch (\\Throwable $e) {\n            $request->error($e->getCode(), $e->getMessage());\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing RequestCore Class for GRPC Client in PHP\nDESCRIPTION: This code snippet shows how to implement the RequestCore class for a GRPC client in Spiral Framework, which is used to support client-side interceptors.\nSOURCE: https://github.com/spiral/docs/blob/3.14/docs/en/grpc/interceptors.md#2025-04-20_snippet_7\n\nLANGUAGE: php\nCODE:\n```\nnamespace App\\Service;\n\nuse Spiral\\Core\\CoreInterface;\nuse Spiral\\RoadRunner\\GRPC\\ContextInterface;\n\nfinal class RequestCore extends \\Grpc\\BaseStub implements CoreInterface\n{\n    public function callAction(string $controller, string $action, array $parameters = []): mixed\n    {\n        $ctx = $parameters['ctx'];\n        \\assert($ctx instanceof ContextInterface);\n\n        return $this->_simpleRequest(\n            $action,\n            $parameters['in'],\n            [$parameters['responseClass'], 'decode'],\n            (array) $ctx->getValue('metadata'),\n            (array) $ctx->getValue('options')\n        )->wait();\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Adding Interface Implementation and Class Extension\nDESCRIPTION: Shows how to implement interfaces and extend classes in a class declaration.\nSOURCE: https://github.com/spiral/docs/blob/3.14/docs/en/component/reactor.md#2025-04-20_snippet_9\n\nLANGUAGE: php\nCODE:\n```\nuse Spiral\\Reactor\\ClassDeclaration;\nuse Cycle\\ORM\\Select\\Repository;\n\n$class = new ClassDeclaration('MyClass');\n\n$class\n    ->addImplement(\\Countable::class)\n    ->setExtends(Repository::class);\n\ndump((string) $class);\n```\n\n----------------------------------------\n\nTITLE: Creating Posts List View in Spiral\nDESCRIPTION: View template for displaying a list of posts, extending the base layout and iterating through posts to show titles and authors.\nSOURCE: https://github.com/spiral/docs/blob/3.14/docs/en/cookbook/quick-start.md#2025-04-20_snippet_38\n\nLANGUAGE: html\nCODE:\n```\n<extends:layout.base title=\"Posts\"/>\n\n<define:body>\n    @foreach($posts as $post)\n    <div class=\"post\">\n        <div class=\"title\">{{$post->title}}</div>\n        <div class=\"author\">{{$post->author->name}}</div>\n    </div>\n    @endforeach\n</define:body>\n```\n\n----------------------------------------\n\nTITLE: Implementing ActorProvider in UserRepository\nDESCRIPTION: Implementation of ActorProviderInterface in UserRepository for user authentication.\nSOURCE: https://github.com/spiral/docs/blob/3.14/docs/en/security/authentication.md#2025-04-20_snippet_19\n\nLANGUAGE: php\nCODE:\n```\nnamespace App\\Database\\Repository;\n\nuse Cycle\\ORM\\Select\\Repository;\nuse Spiral\\Auth\\ActorProviderInterface;\nuse Spiral\\Auth\\TokenInterface;\n\nclass UserRepository extends Repository implements ActorProviderInterface\n{\n    public function getActor(TokenInterface $token): ?object\n    {\n        if (!isset($token->getPayload()['userID'])) {\n            return null;\n        }\n\n        return $this->findByPK($token->getPayload()['userID']);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Parameter Usage in View Template\nDESCRIPTION: Example showing how to use passed parameters within a PHP view template.\nSOURCE: https://github.com/spiral/docs/blob/3.14/docs/en/views/plain.md#2025-04-20_snippet_3\n\nLANGUAGE: php\nCODE:\n```\nHello , <?= $name ?>!\n```\n\n----------------------------------------\n\nTITLE: Single File Migration Strategy Example\nDESCRIPTION: Example of a migration file using the Single File Strategy that combines multiple table changes in one file.\nSOURCE: https://github.com/spiral/docs/blob/3.14/docs/en/basics/orm.md#2025-04-20_snippet_21\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\ndeclare(strict_types=1);\n\nnamespace Migration;\n\nuse Cycle\\Migrations\\Migration;\n\nclass OrmDefaultA42b7e366d78543ca8c5a4b60d305083 extends Migration\n{\n    protected const DATABASE = 'default';\n\n    public function up(): void\n    {\n        $this->table('user_roles')\n            ->addColumn('created_at', 'datetime', ['nullable' => false, 'default' => 'CURRENT_TIMESTAMP'])\n            // ...\n            ->setPrimaryKeys(['uuid'])\n            ->create();\n        \n        $this->table('users')\n            ->addColumn('created_at', 'datetime', ['nullable' => false, 'default' => 'CURRENT_TIMESTAMP'])\n            //...\n            ->setPrimaryKeys(['uuid'])\n            ->create();\n    }\n\n    public function down(): void\n    {\n        $this->table('users')->drop();\n        $this->table('user_roles')->drop();\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Including Toolkit Bundle in XHTML\nDESCRIPTION: This snippet shows how to include the toolkit bundle, which contains the rich text input and QR code components. It's automatically included when using the keeper bundle.\nSOURCE: https://github.com/spiral/docs/blob/3.14/docs/en/keeper/components.md#2025-04-20_snippet_29\n\nLANGUAGE: xhtml\nCODE:\n```\n<use:bundle path=\"toolkit:bundle\"/>\n```\n\nLANGUAGE: xhtml\nCODE:\n```\n<use:bundle path=\"keeper:bundle\"/>\n```\n\n----------------------------------------\n\nTITLE: Defining Email Channel Configuration\nDESCRIPTION: Example of configuring an email channel in the notifications system. This defines the channel type as 'email' and specifies that it should use the 'smtp' transport for sending messages.\nSOURCE: https://github.com/spiral/docs/blob/3.14/docs/en/advanced/notifications.md#2025-04-20_snippet_4\n\nLANGUAGE: php\nCODE:\n```\n'email' => [\n    'type' => 'email',\n    'transport' => 'smtp',\n],\n```\n\n----------------------------------------\n\nTITLE: Removing Unused Bootloaders in Spiral Kernel\nDESCRIPTION: Modification of the Kernel class to remove unnecessary bootloaders for cookies, sessions, CSRF, and pagination.\nSOURCE: https://github.com/spiral/docs/blob/3.14/docs/en/cookbook/quick-start.md#2025-04-20_snippet_2\n\nLANGUAGE: php\nCODE:\n```\n// from http\nSpiral\\Bootloader\\Http\\CookiesBootloader::class,\nSpiral\\Bootloader\\Http\\SessionBootloader::class,\nSpiral\\Bootloader\\Http\\CsrfBootloader::class,\nSpiral\\Bootloader\\Http\\PaginationBootloader::class,\n```\n\n----------------------------------------\n\nTITLE: Configuring Serializers in PHP\nDESCRIPTION: Demonstrates how to configure serializers for the new serializer component in a PHP configuration file.\nSOURCE: https://github.com/spiral/docs/blob/3.14/docs/en/cookbook/migration-from-v2.md#2025-04-20_snippet_20\n\nLANGUAGE: php\nCODE:\n```\n// app/config/serializer.php\nuse Spiral\\Core\\Container\\Autowire;\n\nreturn [\n    'default' => env('DEFAULT_SERIALIZER_FORMAT', 'json'),\n    'serializers' => [\n        'json' => JsonSerializer::class,\n        'yaml' => new YamlSerializer(),\n        'custom' => new Autowire(CustomSerializer::class),\n    ],\n];\n```\n\n----------------------------------------\n\nTITLE: Installing HTTP Component in Spiral Framework\nDESCRIPTION: Command to install the Nyholm bridge package for HTTP support in Spiral Framework.\nSOURCE: https://github.com/spiral/docs/blob/3.14/docs/zh-CN/http/configuration.md#2025-04-20_snippet_0\n\nLANGUAGE: terminal\nCODE:\n```\ncomposer require spiral/nyholm-bridge\n```\n\n----------------------------------------\n\nTITLE: Workflow Constructor Implementation\nDESCRIPTION: Implementation of workflow constructor with activity initialization\nSOURCE: https://github.com/spiral/docs/blob/3.14/docs/en/temporal/usage.md#2025-04-20_snippet_14\n\nLANGUAGE: php\nCODE:\n```\nuse Temporal\\Internal\\Workflow\\ActivityProxy;\nuse Temporal\\Activity\\ActivityOptions;\nuse App\\Endpoint\\Temporal\\Activity\\SendNotificationActivity;\n\n#[WorkflowInterface]\nclass WebsiteStatusWorkflow\n{\n    // ...\n    \n    private SendNotificationActivity|ActivityProxy $mailActivity;\n\n    public function __construct()\n    {\n        // ...\n        \n        $this->mailActivity = Workflow::newActivityStub(\n            SendNotificationActivity::class,\n            ActivityOptions::new()\n                ->withStartToCloseTimeout(5)\n                ->withTaskQueue('mailer')\n        );\n    }\n    \n    //...\n}\n```\n\n----------------------------------------\n\nTITLE: Registering Console Interceptor via Configuration in PHP for Spiral Framework\nDESCRIPTION: This snippet shows how to register a console interceptor through the configuration file 'app/config/console.php'. It demonstrates two methods of adding interceptors: using a fully qualified class name and using the Autowire class.\nSOURCE: https://github.com/spiral/docs/blob/3.14/docs/en/console/interceptors.md#2025-04-20_snippet_1\n\nLANGUAGE: php\nCODE:\n```\nuse App\\CustomInterceptor;\nuse Spiral\\Core\\Container\\Autowire;\n\nreturn [    \n    /**\n     * -------------------------------------------------------------------------\n     *  List of all interceptors\n     * -------------------------------------------------------------------------\n     */\n    'interceptors' => [\n        // via fully qualified class name\n        CustomInterceptor::class,\n        \n        // via Autowire\n        new Autowire(CustomInterceptor::class),\n    ],\n];\n```\n\n----------------------------------------\n\nTITLE: Registering Centrifugo Event Handler Services in PHP\nDESCRIPTION: Example of how to register an event handler service in the Spiral application's Centrifugo configuration file. It demonstrates setting up a service for handling connection requests.\nSOURCE: https://github.com/spiral/docs/blob/3.14/docs/en/websockets/services.md#2025-04-20_snippet_0\n\nLANGUAGE: php\nCODE:\n```\nuse RoadRunner\\Centrifugo\\Request\\RequestType;\nuse App\\Centrifuge;\n\nreturn [\n    'services' => [\n        RequestType::Connect->value => Centrifuge\\ConnectService::class,\n        //...\n    ],\n    'interceptors' => [\n        //...\n    ],\n];\n```\n\n----------------------------------------\n\nTITLE: Activating Temporal Bridge Bootloader (Method Approach)\nDESCRIPTION: PHP code snippet showing how to activate the Temporal Bridge component using the bootloader method in the application kernel.\nSOURCE: https://github.com/spiral/docs/blob/3.14/docs/en/temporal/configuration.md#2025-04-20_snippet_1\n\nLANGUAGE: php\nCODE:\n```\npublic function defineBootloaders(): array\n{\n    return [\n        // ...\n        \\Spiral\\TemporalBridge\\Bootloader\\TemporalBridgeBootloader::class,\n        // ...\n    ];\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Message Form Component\nDESCRIPTION: Vue component for message input and submission, handling user message sending through Centrifugo RPC.\nSOURCE: https://github.com/spiral/docs/blob/3.14/docs/en/cookbook/simple-chat.md#2025-04-20_snippet_52\n\nLANGUAGE: html\nCODE:\n```\n<template>\n    <div class=\"border-t-2 border-gray-200 px-4 pt-4 mb-2 sm:mb-0\">\n        <div class=\"relative flex\">\n            <input v-model=\"message\"\n                   type=\"text\"\n                   @keyup.enter=\"sendMessage\"\n                   placeholder=\"Write your message!\"\n                   class=\"w-full focus:outline-none focus:placeholder-gray-400 text-gray-600 placeholder-gray-600 pl-6 bg-gray-200 rounded-md py-3\">\n            <div class=\"absolute right-0 items-center inset-y-0 hidden sm:flex\" v-if=\"message.length > 1\">\n                <button type=\"button\"\n                        @click=\"sendMessage\"\n                        class=\"inline-flex items-center justify-center rounded-lg px-4 py-3 transition duration-500 ease-in-out text-white bg-blue-500 hover:bg-blue-400 focus:outline-none\">\n                    <span class=\"font-bold\">Send</span>\n                </button>\n            </div>\n        </div>\n    </div>\n</template>\n\n<script>\n    export default {\n        props: {\n            thread: Number\n        },\n        data() {\n            return {\n                message: ''\n            }\n        },\n        methods: {\n            sendMessage() {\n                this.centrifuge.rpc('thread:publish', {\n                    id: this.thread,\n                    message: this.message,\n                    authToken: this.authToken\n                }).then(() => {\n                    this.message = ''\n                })\n            }\n        }\n    }\n</script>\n```\n\n----------------------------------------\n\nTITLE: Adding QueueBootloader to Kernel (Constant Approach)\nDESCRIPTION: Demonstrates adding the QueueBootloader to the application kernel using the LOAD constant to enable queue functionality in a Spiral application.\nSOURCE: https://github.com/spiral/docs/blob/3.14/docs/en/queue/configuration.md#2025-04-20_snippet_1\n\nLANGUAGE: php\nCODE:\n```\nprotected const LOAD = [\n    // ...\n    \\Spiral\\Queue\\Bootloader\\QueueBootloader::class,\n    // ...\n];\n```\n\n----------------------------------------\n\nTITLE: Delayed Email Messages\nDESCRIPTION: Examples of sending delayed email messages using different delay formats including DateTimeImmutable, DateInterval, and seconds.\nSOURCE: https://github.com/spiral/docs/blob/3.14/docs/en/advanced/sendit.md#2025-04-20_snippet_7\n\nLANGUAGE: php\nCODE:\n```\nuse Spiral\\Mailer\\Message;\n\n$message = new Message('test', 'email@domain.com');\n$message->setDelay(new \\DateTimeImmutable('+ 60 minute'));\n// or\n$message->setDelay(new \\DateInterval('PT60S'));\n// or\n$message->setDelay(100);\n```\n\n----------------------------------------\n\nTITLE: Creating Base Layout in Spiral Framework\nDESCRIPTION: Base layout template for Spiral application that defines the HTML structure with Bootstrap CSS and a body block placeholder.\nSOURCE: https://github.com/spiral/docs/blob/3.14/docs/en/cookbook/quick-start.md#2025-04-20_snippet_37\n\nLANGUAGE: html\nCODE:\n```\n<!DOCTYPE html>\n<html>\n<head>\n    <title>${title}</title>\n    <link href=\"https://stackpath.bootstrapcdn.com/bootstrap/4.4.1/css/bootstrap.min.css\" rel=\"stylesheet\">\n</head>\n<body>\n<block:body/>\n</body>\n</html>\n```\n\n----------------------------------------\n\nTITLE: Complex Nested Structure Declaration\nDESCRIPTION: Demonstrates declaring a complex nested structure in a bootloader for hierarchical navigation.\nSOURCE: https://github.com/spiral/docs/blob/3.14/docs/en/keeper/sitemap.md#2025-04-20_snippet_5\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\ndeclare(strict_types=1);\n\nuse Spiral\\Keeper\\Bootloader\\SitemapBootloader;\nuse Spiral\\Keeper\\Module\\Sitemap;\n\nclass NavigationBootloader extends SitemapBootloader\n{\n    public function declareSitemap(Sitemap $sitemap): void\n    {\n        $sitemap\n            ->group('one', 'SuperGroup')\n            ->segment('two', 'SuperSegment')\n            ->group('three', 'FinalGroup');\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Using Custom Bootloader Configuration as an Attribute\nDESCRIPTION: Example of applying a custom bootloader configuration attribute to a bootloader class.\nSOURCE: https://github.com/spiral/docs/blob/3.14/docs/en/framework/bootloaders.md#2025-04-20_snippet_8\n\nLANGUAGE: php\nCODE:\n```\nuse Spiral\\Boot\\Attribute\\BootloadConfig;\nuse Spiral\\Boot\\Bootloader\\Bootloader;\n\n#[TargetRRWorker(modes: ['http', 'grpc'])]\nfinal class SomeBootloader extends Bootloader\n{\n}\n```\n\n----------------------------------------\n\nTITLE: Correct Stack Level Usage\nDESCRIPTION: Shows the correct usage of the level attribute when multiple nesting levels need to be bridged, ensuring the stack is available at the required scope level.\nSOURCE: https://github.com/spiral/docs/blob/3.14/docs/en/views/stempler.md#2025-04-20_snippet_34\n\nLANGUAGE: html\nCODE:\n```\n<div>\n    // stack my-stack is active here\n    <div>\n        // stack my-stack is active here\n        <stack:collect name=\"my-stack\" level=\"2\">\n            default content\n        </stack:collect>\n    </div>\n</div>\n\n// stack my-stack is active here\n\n<stack:prepend name=\"my-stack\">\n    my value\n</stack:prepend>\n```\n\n----------------------------------------\n\nTITLE: Implementing Custom JSON Exception Renderer\nDESCRIPTION: Example of creating a custom JSON renderer for formatting exceptions in JSON format.\nSOURCE: https://github.com/spiral/docs/blob/3.14/docs/en/basics/errors.md#2025-04-20_snippet_4\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\nnamespace Spiral\\YiiErrorHandler;\n\nuse Spiral\\Exceptions\\ExceptionRendererInterface;\nuse Spiral\\Exceptions\\Verbosity;\nuse Yiisoft\\ErrorHandler\\Renderer\\JsonRenderer as YiiJsonRenderer;\nuse Yiisoft\\ErrorHandler\\ThrowableRendererInterface;\n\nfinal class JsonRenderer implements ExceptionRendererInterface\n{\n    public const FORMATS = ['application/json', 'json'];\n\n    public function __construct(\n        private readonly ?ThrowableRendererInterface $renderer = new YiiJsonRenderer()\n    ) {\n    }\n\n    public function render(\n        \\Throwable $exception,\n        ?Verbosity $verbosity = Verbosity::BASIC,\n        string $format = null,\n    ): string {\n        if ($verbosity >= Verbosity::VERBOSE) {\n            return (string)$this->renderer->renderVerbose($exception);\n        }\n\n        return (string)$this->renderer->render($exception);\n    }\n\n    public function canRender(string $format): bool\n    {\n        return \\in_array($format, self::FORMATS, true);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Default Object Value Example\nDESCRIPTION: Demonstrates handling of default object values in dependency resolution.\nSOURCE: https://github.com/spiral/docs/blob/3.14/docs/en/container/overview.md#2025-04-20_snippet_11\n\nLANGUAGE: php\nCODE:\n```\n$resolver = $this->container->get(ResolverInterface::class);\n$function = static fn(stdClass $std = new \\stdClass()) => $std;\n\n$args = $resolver->resolveArguments(new \\ReflectionFunction($function));\n\ndump($args);\n```\n\n----------------------------------------\n\nTITLE: Declaring Metrics in RoadRunner YAML Configuration\nDESCRIPTION: This YAML snippet shows how to declare application-specific metrics in the RoadRunner configuration file.\nSOURCE: https://github.com/spiral/docs/blob/3.14/docs/en/advanced/prometheus-metrics.md#2025-04-20_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\nmetrics:\n  address: 127.0.0.1:2112\n\n  collect:\n    registered_users:\n      type: counter\n      help: \"Total registered users counter.\"\n```\n\n----------------------------------------\n\nTITLE: Defining a GRPC Service with Protocol Buffers\nDESCRIPTION: Proto file that defines a simple Pinger service with ping method, including request and response message structures. The file includes PHP namespace options for proper code generation.\nSOURCE: https://github.com/spiral/docs/blob/3.14/docs/en/grpc/service.md#2025-04-20_snippet_0\n\nLANGUAGE: proto\nCODE:\n```\nsyntax = \"proto3\";\n\noption php_namespace = \"GRPC\\\\Pinger\";\noption php_metadata_namespace = \"GRPC\\\\GPBMetadata\";\n\npackage pinger;\n\nservice Pinger {\n  rpc ping (PingRequest) returns (PingResponse) {\n  }\n}\n\nmessage PingRequest {\n  string url = 1;\n}\n\nmessage PingResponse {\n  int32 status_code = 1;\n}\n```\n\n----------------------------------------\n\nTITLE: Authentication Directive in Keeper Framework\nDESCRIPTION: Directive for permission checking with context support using GuardInterface.\nSOURCE: https://github.com/spiral/docs/blob/3.14/docs/zh-CN/keeper/views.md#2025-04-20_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n@auth('permision', ['some' => 'context'])\n<p>[[Allowed]]</p>\n@endauth\n```\n\n----------------------------------------\n\nTITLE: Declaring a Basic PHP Class\nDESCRIPTION: Demonstrates how to create a simple PHP class declaration using ClassDeclaration and render it to a string.\nSOURCE: https://github.com/spiral/docs/blob/3.14/docs/en/component/reactor.md#2025-04-20_snippet_1\n\nLANGUAGE: php\nCODE:\n```\nuse Spiral\\Reactor\\ClassDeclaration;\n\n$class = new ClassDeclaration('MyClass');\n\ndump($class->render()); // or dump((string) $class);\n```\n\n----------------------------------------\n\nTITLE: Declaring Strict Types in PHP Files for Spiral Framework\nDESCRIPTION: Example of how to properly declare strict types at the top of PHP files in the Spiral framework. This is a required practice for all PHP files to ensure type safety and reduce bugs.\nSOURCE: https://github.com/spiral/docs/blob/3.14/docs/en/overview/contributing.md#2025-04-20_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\ndeclare(strict_types=1);\n\nnamespace App;\n\n// ...\n```\n\n----------------------------------------\n\nTITLE: Custom Property Registration\nDESCRIPTION: Demonstrates how to register custom prototype properties in a bootloader.\nSOURCE: https://github.com/spiral/docs/blob/3.14/docs/en/basics/prototype.md#2025-04-20_snippet_4\n\nLANGUAGE: php\nCODE:\n```\nuse Spiral\\Prototype\\Bootloader\\PrototypeBootloader;\n\npublic function boot(PrototypeBootloader $prototype): void\n{\n    $prototype->bindProperty('myService', MyService::class);\n}\n```\n\n----------------------------------------\n\nTITLE: Registering Storage Bootloader Using Method\nDESCRIPTION: Code example showing how to add the StorageBootloader to the application kernel using the defineBootloaders method.\nSOURCE: https://github.com/spiral/docs/blob/3.14/docs/en/advanced/storage.md#2025-04-20_snippet_1\n\nLANGUAGE: php\nCODE:\n```\npublic function defineBootloaders(): array\n{\n    return [\n        // ...\n        \\Spiral\\Storage\\Bootloader\\StorageBootloader::class,\n        // ...\n    ];\n}\n```\n\n----------------------------------------\n\nTITLE: Creating an Event Bootloader for Spiral Framework\nDESCRIPTION: Bootloader class that registers event dispatcher implementations in the application container with appropriate interface bindings and dependencies.\nSOURCE: https://github.com/spiral/docs/blob/3.14/docs/en/advanced/events.md#2025-04-20_snippet_15\n\nLANGUAGE: php\nCODE:\n```\nnamespace App\\EventDispatcher\\Bootloader;\n\nuse App\\EventDispatcher\\ListenerRegistry;\nuse App\\EventDispatcher\\EventDispatcher;\n\nuse Psr\\EventDispatcher\\EventDispatcherInterface;\nuse Psr\\EventDispatcher\\ListenerProviderInterface;\nuse Spiral\\Boot\\Bootloader\\Bootloader;\nuse Spiral\\Events\\Bootloader\\EventsBootloader;\nuse Spiral\\Events\\ListenerRegistryInterface;\n\nfinal class EventBootloader extends Bootloader\n{\n    protected const DEPENDENCIES = [\n        EventsBootloader::class\n    ];\n\n    protected const SINGLETONS = [\n        ListenerRegistryInterface::class => ListenerRegistry::class,\n        ListenerRegistry::class => ListenerRegistry::class,\n        ListenerProviderInterface::class => ListenerRegistry::class,\n        EventDispatcherInterface::class => EventDispatcher::class,\n        EventDispatcher::class => EventDispatcherInterface::class\n    ];\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Monolog in PHP Configuration Array\nDESCRIPTION: Demonstrates how to configure the default Monolog channel, handlers, and processors in a PHP configuration array.\nSOURCE: https://github.com/spiral/docs/blob/3.14/docs/en/cookbook/migration-from-v2.md#2025-04-20_snippet_14\n\nLANGUAGE: php\nCODE:\n```\n[\n    'default' => env('MONOLOG_DEFAULT_CHANNEL', 'stderr'),\n    'handlers' => [\n        'default' => [\n            // ...\n        ],\n        'stderr' => [\n            // ...\n        ],\n        'stdout' => [\n            // ...\n        ],\n    ],\n\n    'processors' => [\n        'default' => [\n            // ...\n        ],\n        'stdout' => [\n            // ...\n        ],\n    ],\n]\n```\n\n----------------------------------------\n\nTITLE: Configuring Vite for Vue.js Chat Application\nDESCRIPTION: Vite configuration setup for building the chat application frontend with Vue.js. Defines build parameters, aliases, and plugin settings.\nSOURCE: https://github.com/spiral/docs/blob/3.14/docs/en/cookbook/simple-chat.md#2025-04-20_snippet_49\n\nLANGUAGE: javascript\nCODE:\n```\nimport {fileURLToPath, URL} from 'node:url';\nimport {resolve} from 'path';\nimport {defineConfig} from 'vite';\nimport vue from '@vitejs/plugin-vue';\n\nexport default defineConfig({\n    plugins: [\n        vue()\n    ],\n    build: {\n        lib: {\n            entry: resolve(__dirname, 'src/main.js'),\n            name: 'Chat',\n            formats: ['cjs']\n        },\n        outDir: '../public'\n    },\n    resolve: {\n        alias: {\n            '@': fileURLToPath(new URL('./src', import.meta.url))\n        }\n    },\n    define: {\n        'process.env': {}\n    }\n})\n```\n\n----------------------------------------\n\nTITLE: Adding StemplerBootloader to Spiral Application Kernel using Method\nDESCRIPTION: Adds the StemplerBootloader to the Spiral application kernel's bootloaders list using the defineBootloaders method.\nSOURCE: https://github.com/spiral/docs/blob/3.14/docs/en/views/stempler.md#2025-04-20_snippet_59\n\nLANGUAGE: php\nCODE:\n```\npublic function defineBootloaders(): array\n{\n    return [\n        // ...\n        \\Spiral\\Stempler\\Bootloader\\StemplerBootloader::class,\n        // ...\n    ];\n}\n```\n\n----------------------------------------\n\nTITLE: User Input Confirmation\nDESCRIPTION: Example of asking for user confirmation with default value.\nSOURCE: https://github.com/spiral/docs/blob/3.14/docs/en/console/commands.md#2025-04-20_snippet_14\n\nLANGUAGE: php\nCODE:\n```\n$status = $this->confirm('Are you sure?', default: false);\n```\n\n----------------------------------------\n\nTITLE: Sending Email Messages\nDESCRIPTION: Example of sending email messages using the MailerInterface with template and parameters.\nSOURCE: https://github.com/spiral/docs/blob/3.14/docs/en/advanced/sendit.md#2025-04-20_snippet_6\n\nLANGUAGE: php\nCODE:\n```\nuse Spiral\\Mailer\\MailerInterface;\nuse Spiral\\Mailer\\Message;\n\npublic function send(MailerInterface $mailer): void\n{\n    $mailer->send(new Message(\n        'template.dark.php', \n        'email@domain.com',\n        [\n            'name' => 'Dave',\n            'attachment' => __FILE__,\n        ]\n    ));\n}\n```\n\n----------------------------------------\n\nTITLE: Production Environment Confirmation\nDESCRIPTION: Implementation of confirmation prompts for sensitive operations in production environment\nSOURCE: https://github.com/spiral/docs/blob/3.14/docs/en/cookbook/migration-from-v2.md#2025-04-20_snippet_25\n\nLANGUAGE: php\nCODE:\n```\nuse Spiral\\Console\\Confirmation\\ApplicationInProduction;\n\nfinal class MigrateCommand extends Command\n{\n    protected const NAME = 'db:migrate';\n    protected const DESCRIPTION = '...';\n\n    public function perform(ApplicationInProduction $confirmation): int\n    {\n        if (!$confirmation->confirmToProceed()) {\n            return self::FAILURE;\n        }\n        \n        // run migrations...\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a Job Handler with Scaffolder in Spiral\nDESCRIPTION: Command to generate a job handler class using Spiral's scaffolding functionality, which creates a basic handler structure to process jobs from the queue.\nSOURCE: https://github.com/spiral/docs/blob/3.14/docs/en/cookbook/simple-queue-system.md#2025-04-20_snippet_14\n\nLANGUAGE: terminal\nCODE:\n```\nphp app.php create:jobHandler Ping\n```\n\n----------------------------------------\n\nTITLE: Configuring Controller Route with Default Action\nDESCRIPTION: Sets up a controller route target with a custom default action 'list' instead of the default 'index'.\nSOURCE: https://github.com/spiral/docs/blob/3.14/docs/en/http/routing.md#2025-04-20_snippet_12\n\nLANGUAGE: php\nCODE:\n```\n$routes->add(name: 'user', pattern: '/user/list')\n    ->controller(controller: UserController::class)\n    ->defaults(['action' => 'list'])\n```\n\n----------------------------------------\n\nTITLE: Using Custom Prefix with NestedFilter\nDESCRIPTION: Shows how to configure a nested filter with a custom prefix to accept input data with a different key than the property name.\nSOURCE: https://github.com/spiral/docs/blob/3.14/docs/en/filters/composite.md#2025-04-20_snippet_4\n\nLANGUAGE: php\nCODE:\n```\nclass ProfileFilter extends Filter implements HasFilterDefinition\n{\n    #[NestedFilter(class: AddressFilter::class, prefix: 'addr')]\n    public AddressFilter $address;\n    \n    // ...\n}\n```\n\n----------------------------------------\n\nTITLE: Installing Mailer Bootloader via Constant\nDESCRIPTION: Adding the MailerBootloader class to the kernel bootloaders list using a constant definition.\nSOURCE: https://github.com/spiral/docs/blob/3.14/docs/en/advanced/sendit.md#2025-04-20_snippet_1\n\nLANGUAGE: php\nCODE:\n```\nprotected const LOAD = [\n    // ...\n    \\Spiral\\SendIt\\Bootloader\\MailerBootloader::class,\n    // ...\n];\n```\n\n----------------------------------------\n\nTITLE: Using InputManager in Spiral Controller Constructor\nDESCRIPTION: Shows how to inject and use Spiral's InputManager in a controller constructor to access query parameters.\nSOURCE: https://github.com/spiral/docs/blob/3.14/docs/en/http/request-response.md#2025-04-20_snippet_1\n\nLANGUAGE: php\nCODE:\n```\nnamespace App\\Endpoint\\Web;\n\nuse Spiral\\Core\\Container\\SingletonInterface;\nuse Spiral\\Http\\Request\\InputManager;\n\nclass HomeController implements SingletonInterface\n{\n    private InputManager $input;\n\n    public function __construct(InputManager $input)\n    {\n        $this->input = $input;\n    }\n\n    public function index(): void\n    {\n        dump($this->input->query->all());\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Static URI Resolver in Spiral\nDESCRIPTION: Configuration example for a Static URI Resolver in Spiral Framework's distribution configuration file.\nSOURCE: https://github.com/spiral/docs/blob/3.14/docs/en/advanced/storage.md#2025-04-20_snippet_28\n\nLANGUAGE: php\nCODE:\n```\nreturn [\n    // ...\n    'resolvers' => [\n        // ...\n        'local' => [\n            'type' => 'static',\n            'uri'  => env('APP_URL', 'http://localhost')\n        ],\n    ]\n];\n```\n\n----------------------------------------\n\nTITLE: Reading File Contents in PHP using Spiral Storage\nDESCRIPTION: Shows how to read file contents using getContents() for string data and getStream() for resource streams.\nSOURCE: https://github.com/spiral/docs/blob/3.14/docs/en/advanced/storage.md#2025-04-20_snippet_14\n\nLANGUAGE: php\nCODE:\n```\n$string = $bucket->getContents('text.txt');\n\n$resource = $bucket->getStream('music.mp3');\n```\n\n----------------------------------------\n\nTITLE: Running Database Seeders via CLI\nDESCRIPTION: Command line instruction for executing database seeders using the Spiral CLI tool.\nSOURCE: https://github.com/spiral/docs/blob/3.14/docs/en/testing/database.md#2025-04-20_snippet_12\n\nLANGUAGE: terminal\nCODE:\n```\nphp app.php db:seed\n```\n\n----------------------------------------\n\nTITLE: Configuring Bridge Bootloader Using Method\nDESCRIPTION: Adding the BridgeBootloader to the Kernel using the defineBootloaders method\nSOURCE: https://github.com/spiral/docs/blob/3.14/docs/en/basics/orm.md#2025-04-20_snippet_1\n\nLANGUAGE: php\nCODE:\n```\npublic function defineBootloaders(): array\n{\n    return [\n        // ...\n        \\Spiral\\Cycle\\Bootloader\\BridgeBootloader::class,\n        // ...\n    ];\n}\n```\n\n----------------------------------------\n\nTITLE: Using dump() Function with Spiral Dumper\nDESCRIPTION: Example of using the dump() helper function provided by the Spiral Dumper package to debug variables.\nSOURCE: https://github.com/spiral/docs/blob/3.14/docs/en/basics/debug.md#2025-04-20_snippet_3\n\nLANGUAGE: php\nCODE:\n```\ndump($variable);\n```\n\n----------------------------------------\n\nTITLE: Registering Exception Interceptor Configuration\nDESCRIPTION: Demonstrates how to register an exception interceptor in the Temporal worker configuration.\nSOURCE: https://github.com/spiral/docs/blob/3.14/docs/en/temporal/interceptors.md#2025-04-20_snippet_4\n\nLANGUAGE: php\nCODE:\n```\nuse Temporal\\Worker\\WorkerOptions;\nuse App\\Temporal\\Interceptors\\ExceptionInterceptor;\n\nreturn [\n    // ...\n    'workers' => [\n        'workerName' => [\n            'exception_interceptor' => new ExceptionInterceptor(),\n        ]\n    ],\n];\n```\n\n----------------------------------------\n\nTITLE: Acquiring Lock with Wait Time\nDESCRIPTION: Shows how to acquire a lock with a specified wait time, using either a numeric value or a DateInterval object.\nSOURCE: https://github.com/spiral/docs/blob/3.14/docs/en/advanced/locks.md#2025-04-20_snippet_5\n\nLANGUAGE: php\nCODE:\n```\n$id = $lock->lock('pdf:create', wait: 5);\n// or\n$id = $lock->lock('pdf:create', wait: new \\DateInterval('PT5S'));\n```\n\n----------------------------------------\n\nTITLE: Environment Configuration for OpenTelemetry\nDESCRIPTION: Environment variables required to configure OpenTelemetry integration, including service name, exporters, endpoints, and processors.\nSOURCE: https://github.com/spiral/docs/blob/3.14/docs/en/advanced/telemetry.md#2025-04-20_snippet_3\n\nLANGUAGE: dotenv\nCODE:\n```\n# Telemetry driver [log, null, otel]\nTELEMETRY_DRIVER=otel\n\n# OpenTelemetry\nOTEL_SERVICE_NAME=php # Your application name\nOTEL_TRACES_EXPORTER=otlp\nOTEL_EXPORTER_OTLP_PROTOCOL=http/protobuf\nOTEL_EXPORTER_OTLP_ENDPOINT=http://127.0.0.1:4318\nOTEL_PHP_TRACES_PROCESSOR=simple\n```\n\n----------------------------------------\n\nTITLE: Using Twig Debug Function\nDESCRIPTION: Twig template example showing how to use the dump() function for debugging variables.\nSOURCE: https://github.com/spiral/docs/blob/3.14/docs/en/views/twig.md#2025-04-20_snippet_10\n\nLANGUAGE: twig\nCODE:\n```\n<pre>\n    {{ dump(cats) }}\n</pr>\n```\n\n----------------------------------------\n\nTITLE: Setting Session Data in FakeHttp Requests in PHP\nDESCRIPTION: This snippet demonstrates how to set session data for FakeHttp requests in Spiral, including optional lifetime and session ID parameters.\nSOURCE: https://github.com/spiral/docs/blob/3.14/docs/en/testing/http.md#2025-04-20_snippet_7\n\nLANGUAGE: php\nCODE:\n```\n$http = $this->fakeHttp();\n$http->withSession(\n    data: ['fav_color' => 'blue'], \n    lifetime: 3600, // Default value is 3600\n    id: null // Default value is null\n)->get('/users');\n```\n\n----------------------------------------\n\nTITLE: Implementing ScalarValue Filter in PHP\nDESCRIPTION: Shows how to use ScalarValue to validate and convert scalar inputs, with an option to allow or disallow empty strings.\nSOURCE: https://github.com/spiral/docs/blob/3.14/docs/en/component/data-grid.md#2025-04-20_snippet_46\n\nLANGUAGE: php\nCODE:\n```\nuse Spiral\\DataGrid\\Specification\\Value;\n\n$value = new Value\\ScalarValue();\n$allowEmpty = new Value\\ScalarValue(true);\n\n$value->accepts('');       // false\n$value->accepts(false);    // true\n$value->accepts('3');      // true\n$value->accepts(4);        // true\n$value->convert(3);        // '3'\n$allowEmpty->accepts('');  // true\n```\n\n----------------------------------------\n\nTITLE: Nginx Configuration for Centrifugo WebSocket Proxy\nDESCRIPTION: This Nginx configuration sets up a proxy for WebSocket connections to the Centrifugo server. It includes mappings for upgrading HTTP connections to WebSockets and forwards requests to the Centrifugo and RoadRunner backends.\nSOURCE: https://github.com/spiral/docs/blob/3.14/docs/zh-CN/websockets/configuration.md#2025-04-20_snippet_6\n\nLANGUAGE: nginx\nCODE:\n```\n```\nmap $http_upgrade $connection_upgrade {\n    default upgrade;\n    '' close;\n}\n\nserver {\n    listen 8000;\n\n    server_name _;\n\n    # Centrifugo WebSocket endpoint\n    location /connection {\n        proxy_pass http://127.0.0.1:8000/connection;\n        proxy_http_version 1.1;\n        proxy_set_header Upgrade $http_upgrade;\n        proxy_set_header Connection $connection_upgrade;\n        proxy_set_header Host $host;\n    }\n    \n    # RoadRunner HTTP endpoint\n    location / {\n        proxy_pass http://127.0.0.1:8080;\n    }\n}\n```\n```\n\n----------------------------------------\n\nTITLE: Locating Enums in PHP using EnumsInterface\nDESCRIPTION: Shows how to use EnumsInterface to find enumerations in the codebase. It iterates through all found enums and dumps their file names.\nSOURCE: https://github.com/spiral/docs/blob/3.14/docs/en/advanced/tokenizer.md#2025-04-20_snippet_1\n\nLANGUAGE: php\nCODE:\n```\nuse Spiral\\Tokenizer\\EnumsInterface;\n\npublic function findEnums(EnumsInterface $enums): void\n{\n    foreach ($enums->getEnums() as $enum) {\n        dump($enum->getFileName());\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Using Global Directory Function in Spiral Configuration Files\nDESCRIPTION: Demonstrates the use of the global 'directory' function to access directory paths in configuration files. This example sets up a file cache storage path.\nSOURCE: https://github.com/spiral/docs/blob/3.14/docs/en/start/structure.md#2025-04-20_snippet_3\n\nLANGUAGE: php\nCODE:\n```\nreturn [\n    'storages' => [\n        'file' => [\n            'path' => directory('runtime') . 'cache',\n        ],   \n    ],\n];\n```\n\n----------------------------------------\n\nTITLE: Declaring a PHP Interface\nDESCRIPTION: Demonstrates how to create an interface declaration with method, extension, and comments.\nSOURCE: https://github.com/spiral/docs/blob/3.14/docs/en/component/reactor.md#2025-04-20_snippet_15\n\nLANGUAGE: php\nCODE:\n```\n$interface = new InterfaceDeclaration('MyInterface');\n$interface\n    ->addExtend(\\Countable::class)\n    ->addComment('My interface')\n    ->addMethod('someMethod')\n        ->setPublic()\n        ->setReturnType('int');\n\ndump((string) $interface);\n```\n\n----------------------------------------\n\nTITLE: Retrieving Centrifugo Channel Presence Information in PHP\nDESCRIPTION: Illustrates the use of the presence method to get a list of active clients connected to a specific Centrifugo channel. This is useful for monitoring channel activity and user presence.\nSOURCE: https://github.com/spiral/docs/blob/3.14/docs/en/websockets/api.md#2025-04-20_snippet_6\n\nLANGUAGE: PHP\nCODE:\n```\npublic function handle(Channel $channel): void\n{\n   $result = $this->api->presence($channel->getName());\n   // ...\n}\n```\n\n----------------------------------------\n\nTITLE: 配置缓存会话处理器 - PHP\nDESCRIPTION: 演示如何配置使用缓存作为会话存储的处理器。这个配置允许指定缓存存储名称、TTL 和前缀。\nSOURCE: https://github.com/spiral/docs/blob/3.14/docs/zh-CN/basics/session.md#2025-04-20_snippet_4\n\nLANGUAGE: php\nCODE:\n```\nuse Spiral\\Core\\Container\\Autowire;\nuse Spiral\\Session\\Handler\\CacheHandler;\n\n$ttl = 86400;\n\nreturn [\n    'lifetime' => $ttl,\n    'cookie' => 'sid',\n    'secure' => false,\n    'handler' => new Autowire(\n        CacheHandler::class,\n        [\n            'storage' => 'my-storage', // (Optional)  Cache storage name. Default - current cache storage\n            'ttl' => $ttl,\n            'prefix' => 'foo:' // (Optional) By default, session:\n        ]\n    )\n];\n```\n\n----------------------------------------\n\nTITLE: Implementing TinyMCE Rich Text Input in XHTML\nDESCRIPTION: This snippet demonstrates how to use the form:tinymce component to create a rich text input field using TinyMCE. It includes options for customizing the editor's appearance and functionality.\nSOURCE: https://github.com/spiral/docs/blob/3.14/docs/en/keeper/components.md#2025-04-20_snippet_30\n\nLANGUAGE: xhtml\nCODE:\n```\n<form:tinymce\n  name=\"date\"\n  label=\"Custom Options\"\n  value=\"\">\n      <script role=\"sf-options\" type=\"application/json\">\n          {\n              \"options\": {\n              \"menubar\": false,\n              \"height\": 300\n          }\n    </script>\n</form:tinymce>\n```\n\n----------------------------------------\n\nTITLE: Using Page Paginator with Different Limit Values\nDESCRIPTION: Examples of using the PagePaginator with different limit values, showing how it validates against allowed limits. The paginator will only apply limit values that are in the allowed list.\nSOURCE: https://github.com/spiral/docs/blob/3.14/docs/en/component/data-grid.md#2025-04-20_snippet_15\n\nLANGUAGE: php\nCODE:\n```\nuse Spiral\\DataGrid\\Specification\\Pagination\\PagePagination;\n\n$paginator = new PagePaginator(10, [25, 50, 100, 500]);\n\n$paginator->withValue(['limit' => 123]); // won't apply\n$paginator->withValue(['limit' => 50]);  // will apply\n$paginator->withValue(['limit' => 100]); // will apply\n\n$paginator->withValue(['limit' => 100, 'page' => 2]);\n```\n\n----------------------------------------\n\nTITLE: Adding Methods to a PHP Class\nDESCRIPTION: Shows how to add a method to a class with various modifiers, parameters, and a body.\nSOURCE: https://github.com/spiral/docs/blob/3.14/docs/zh-CN/component/reactor.md#2025-04-20_snippet_6\n\nLANGUAGE: php\nCODE:\n```\n$class = new ClassDeclaration('MyClass');\n\n$class->addMethod('ping')\n    ->setPublic()\n    ->setComment('My method')\n    ->setReturnType('string')\n    ->setReturnNullable()\n    ->setFinal()\n    ->setBody('return $a;')\n    ->addAttribute('SomeAttribute')\n        ->addParameter('a', null)\n        ->setType('string')\n        ->setNullable(true);\n\ndump((string) $class);\n```\n\n----------------------------------------\n\nTITLE: Email Template Example\nDESCRIPTION: Example of an email template using Stempler views with attachment and image support.\nSOURCE: https://github.com/spiral/docs/blob/3.14/docs/en/advanced/sendit.md#2025-04-20_snippet_5\n\nLANGUAGE: html\nCODE:\n```\n<extends:sendit:builder subject=\"I'm afraid I can't do that\"/>\n<use:bundle path=\"sendit:bundle\"/>\n\n<email:attach path=\"{{ $attachment }}\" name=\"attachment.txt\"/>\n\n<block:html>\n    <p>I'm sorry, {{ $name }}!</p>\n    <p>\n        <email:image path=\"path/to/image.png\"/>\n    </p>\n</block:html>\n```\n\n----------------------------------------\n\nTITLE: Asserting No Events Dispatched in PHP\nDESCRIPTION: This snippet shows how to assert that no events were dispatched at all using the assertNothingDispatched method.\nSOURCE: https://github.com/spiral/docs/blob/3.14/docs/en/testing/event.md#2025-04-20_snippet_6\n\nLANGUAGE: php\nCODE:\n```\n$this->events->assertNothingDispatched();\n```\n\n----------------------------------------\n\nTITLE: Container Injection in Template\nDESCRIPTION: Example of injecting container dependencies in Stempler templates\nSOURCE: https://github.com/spiral/docs/blob/3.14/docs/en/views/stempler.md#2025-04-20_snippet_9\n\nLANGUAGE: php\nCODE:\n```\n@inject($app, App\\App::class)\\n{{ get_class($app) }}\n```\n\n----------------------------------------\n\nTITLE: Generated Middleware Class implementing PSR-15\nDESCRIPTION: The output of the create:middleware command, showing a middleware class that implements PSR-15 MiddlewareInterface with a process method for handling HTTP requests and responses.\nSOURCE: https://github.com/spiral/docs/blob/3.14/docs/en/basics/scaffolding.md#2025-04-20_snippet_26\n\nLANGUAGE: php\nCODE:\n```\ndeclare(strict_types=1);\n\nnamespace App\\Endpoint\\Web\\Middleware;\n\nclass LoggerMiddleware implements \\Psr\\Http\\Server\\MiddlewareInterface\n{\n    public function process(\n        \\Psr\\Http\\Message\\ServerRequestInterface $request,\n        \\Psr\\Http\\Server\\RequestHandlerInterface $handler,\n    ): \\Psr\\Http\\Message\\ResponseInterface\n    {\n        return $handler->handle($request);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Adding TokenizerListenerBootloader using Method in Spiral Kernel\nDESCRIPTION: Example of registering the TokenizerListenerBootloader in your application kernel using the defineSystemBootloaders method. This bootloader must be included at the top of the bootloader list.\nSOURCE: https://github.com/spiral/docs/blob/3.14/docs/en/advanced/tokenizer.md#2025-04-20_snippet_12\n\nLANGUAGE: php\nCODE:\n```\npublic function defineSystemBootloaders(): array\n{\n    return [\n        \\Spiral\\Tokenizer\\Bootloader\\TokenizerListenerBootloader::class,\n        // ...\n    ];\n}\n```\n\n----------------------------------------\n\nTITLE: Disabling Package Discovery in Composer.json\nDESCRIPTION: Configuration in the application's composer.json file to disable automatic discovery for specific packages by listing them in the dont-discover array.\nSOURCE: https://github.com/spiral/docs/blob/3.14/docs/en/component/discoverer.md#2025-04-20_snippet_4\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"extra\": {\n    \"spiral\": {\n      \"dont-discover\": [\n        \"spiral/dotenv\",\n        \"spiral-packages/bar\"\n      ]\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Advanced Golang gRPC Client with Metadata Handling\nDESCRIPTION: An enhanced Go gRPC client that demonstrates how to pass metadata between client and server. It shows how to append metadata to outgoing contexts and receive response headers from the server.\nSOURCE: https://github.com/spiral/docs/blob/3.14/docs/zh-CN/grpc/client.md#2025-04-20_snippet_8\n\nLANGUAGE: golang\nCODE:\n```\npackage main\n\nimport (\n\t\"context\"\n\t\"fmt\"\n\t\"log\"\n\n\t\"google.golang.org/grpc\"\n\t\"google.golang.org/grpc/metadata\"\n\t\"pinger\"\n)\n\nfunc main() {\n\t// Set up a connection to the server.\n\tconn, err := grpc.Dial(\"127.0.0.1:9001\", grpc.WithInsecure())\n\tif err != nil {\n\t\tlog.Fatalf(\"did not connect: %v\", err)\n\t}\n\t\n\tdefer conn.Close()\n\n\tclient := pinger.NewPingerClient(conn)\n\t\n\t// attach value to the server\n\tctx := metadata.AppendToOutgoingContext(context.Background(), \"client-key\", \"client-value\")\n\n\tvar header metadata.MD\n\t\n\t// Call the ping method.\n\tresponse, err := client.Ping(ctx, &pinger.PingRequest{\n\t\tUrl: \"https://google.com\",\n\t}, grpc.Header(&header))\n\n\tif err != nil {\n\t\tlog.Fatalf(\"error calling ping: %v\", err)\n\t}\n\n\t// Print the HTTP status code.\n\tfmt.Println(response.StatusCode)\n}\n```\n\n----------------------------------------\n\nTITLE: Events Component Configuration File\nDESCRIPTION: Example of an events.php configuration file showing how to define event listeners and processors. Demonstrates both simple listener registration and configuration with EventListener class.\nSOURCE: https://github.com/spiral/docs/blob/3.14/docs/en/advanced/events.md#2025-04-20_snippet_5\n\nLANGUAGE: php\nCODE:\n```\nuse App\\Listener\\RouteListener;\nuse Spiral\\Events\\Config\\EventListener;\nuse Spiral\\Events\\Processor\\AttributeProcessor;\nuse Spiral\\Events\\Processor\\ConfigProcessor;\nuse Spiral\\Router\\Event\\RouteMatched;\n\nreturn [\n    /**\n     * -------------------------------------------------------------------------\n     *  Listeners\n     * -------------------------------------------------------------------------\n     * \n     * The list of event listeners to be registered in the application.\n     */\n    'listeners' => [\n        // without any options\n        RouteMatched::class => [\n            RouteListener::class,\n        ],\n\n        // OR\n\n        // with additional options\n        RouteMatched::class => [\n            new EventListener(\n                listener: RouteListener::class,\n                method: 'onRouteMatched',\n                priority: 1\n            ),\n        ],\n    ],\n    \n    /**\n     * -------------------------------------------------------------------------\n     *  Processors\n     * -------------------------------------------------------------------------\n     * \n     * Array of all available processors.  \n     */\n    'processors' => [\n        AttributeProcessor::class,\n        ConfigProcessor::class,\n    ],\n];\n```\n\n----------------------------------------\n\nTITLE: JSON Data for Custom Prefix NestedFilter\nDESCRIPTION: Shows the JSON structure for a request when using a custom prefix in a NestedFilter attribute.\nSOURCE: https://github.com/spiral/docs/blob/3.14/docs/en/filters/composite.md#2025-04-20_snippet_5\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"name\": \"Antony\",\n  \"addr\": {\n    \"city\": \"San Francisco\",\n    \"address\": \"Address\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Basic Broadcasting Implementation in OrderService\nDESCRIPTION: Example of implementing basic broadcasting functionality in an OrderService class using the BroadcastInterface.\nSOURCE: https://github.com/spiral/docs/blob/3.14/docs/en/websockets/broadcasting.md#2025-04-20_snippet_4\n\nLANGUAGE: php\nCODE:\n```\nuse Spiral\\Broadcasting\\BroadcastInterface;\nuse Spiral\\Serializer\\SerializerInterface;\n\nclass OrderService\n{\n    public function __construct(\n        private readonly BroadcastInterface $broadcast,\n        private readonly SerializerInterface $serializer\n    ) {\n    }\n\n    public function purchase(string $orderUuid): void\n    {\n        // ...\n\n        $this->broadcast->publish(\n            \"order.{$orderUuid}\",\n            $this->serializer->serialize(['status' => 'purchased'])\n        );\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a Namespaced PHP Class\nDESCRIPTION: Demonstrates how to create a class inside a specific namespace using PhpNamespace.\nSOURCE: https://github.com/spiral/docs/blob/3.14/docs/en/component/reactor.md#2025-04-20_snippet_13\n\nLANGUAGE: php\nCODE:\n```\nuse Spiral\\Reactor\\Partial\\PhpNamespace;\n\n$namespace = new PhpNamespace('App\\\\Some');\n$namespace->addClass('MyClass')\n\ndump((string) $namespace);\n```\n\n----------------------------------------\n\nTITLE: Listing Scheduled Tasks\nDESCRIPTION: Command to list all registered scheduled tasks in the application.\nSOURCE: https://github.com/spiral/docs/blob/3.14/docs/en/advanced/scheduler.md#2025-04-20_snippet_6\n\nLANGUAGE: terminal\nCODE:\n```\nphp app.php schedule:list\n```\n\n----------------------------------------\n\nTITLE: Registering Error Handler Bootloader Using Method\nDESCRIPTION: Code example showing how to register the YiiErrorHandlerBootloader using the defineBootloaders method\nSOURCE: https://github.com/spiral/docs/blob/3.14/docs/en/basics/errors.md#2025-04-20_snippet_9\n\nLANGUAGE: php\nCODE:\n```\npublic function defineBootloaders(): array\n{\n    return [\n        // ...\n        \\Spiral\\YiiErrorHandler\\Bootloader\\YiiErrorHandlerBootloader::class,\n        // ...\n    ];\n}\n```\n\n----------------------------------------\n\nTITLE: Defining UserContext Class in PHP\nDESCRIPTION: A simple class definition for storing user context with id and name properties.\nSOURCE: https://github.com/spiral/docs/blob/3.14/docs/en/http/middleware.md#2025-04-20_snippet_8\n\nLANGUAGE: php\nCODE:\n```\nclass UserContext\n{\n    public int $id;\n    public string $name;\n\n    public function __construct(int $id, string $name)\n    {\n        $this->id = $id;\n        $this->name = $name;\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Adding Database Namespace to Composer Autoload\nDESCRIPTION: Modification to the composer.json file to add a separate 'Database' namespace for factories and seeders. This change helps organize the codebase by separating application code from database utilities.\nSOURCE: https://github.com/spiral/docs/blob/3.14/docs/en/cookbook/quick-start.md#2025-04-20_snippet_26\n\nLANGUAGE: terminal\nCODE:\n```\ncomposer dump-autoload\n```\n\n----------------------------------------\n\nTITLE: Implementing a Basic Address Filter in Spiral\nDESCRIPTION: Creates a standalone AddressFilter class with validation rules for city and address fields using Spiral's Filter system and validator.\nSOURCE: https://github.com/spiral/docs/blob/3.14/docs/en/filters/composite.md#2025-04-20_snippet_0\n\nLANGUAGE: php\nCODE:\n```\nnamespace App\\Endpoint\\Web\\Filter;\n\nuse Spiral\\Filters\\Attribute\\Input\\Post;\nuse Spiral\\Filters\\Model\\Filter;\nuse Spiral\\Filters\\Model\\FilterDefinitionInterface;\nuse Spiral\\Filters\\Model\\HasFilterDefinition;\nuse Spiral\\Validator\\FilterDefinition;\n\nclass AddressFilter extends Filter implements HasFilterDefinition\n{\n    #[Post]\n    public string $city;\n\n    #[Post]\n    public string $address;\n\n    public function filterDefinition(): FilterDefinitionInterface\n    {\n        return new FilterDefinition(validationRules: [\n            'city' => ['required', 'string'],\n            'address' => ['required', 'string'],\n        ]);\n    }\n}\n\n```\n\n----------------------------------------\n\nTITLE: Generated Basic Filter Class\nDESCRIPTION: The output of the create:filter command without any properties, showing a basic filter class that extends the Spiral\\Filters\\Model\\Filter base class.\nSOURCE: https://github.com/spiral/docs/blob/3.14/docs/en/basics/scaffolding.md#2025-04-20_snippet_18\n\nLANGUAGE: php\nCODE:\n```\ndeclare(strict_types=1);\n\nnamespace App\\Endpoint\\Web\\Filter;\n\nuse Spiral\\Filters\\Model\\Filter;\n\nfinal class CreateUserFilter extends Filter\n{\n}\n```\n\n----------------------------------------\n\nTITLE: Enabling Console Component in Spiral Application Kernel (Constant Approach)\nDESCRIPTION: This snippet demonstrates how to enable the Console component by adding the CommandBootloader to the application kernel using a protected constant LOAD.\nSOURCE: https://github.com/spiral/docs/blob/3.14/docs/en/console/configuration.md#2025-04-20_snippet_1\n\nLANGUAGE: php\nCODE:\n```\nprotected const LOAD = [\n    // ...\n    \\Spiral\\Bootloader\\CommandBootloader::class,\n    // ...\n];\n```\n\n----------------------------------------\n\nTITLE: Accessing IoC Scope in Twig Template\nDESCRIPTION: Twig template example demonstrating how to access values from the IoC scope.\nSOURCE: https://github.com/spiral/docs/blob/3.14/docs/en/views/twig.md#2025-04-20_snippet_6\n\nLANGUAGE: twig\nCODE:\n```\nHello, {{ name }}!\n\n{{ get(\"Spiral\\\\Http\\\\Request\\\\InputManager\").attribute('csrfToken') }}\n```\n\n----------------------------------------\n\nTITLE: Generated Domain Bootloader Class Example\nDESCRIPTION: Example of a generated domain-specific bootloader class showing extended functionality\nSOURCE: https://github.com/spiral/docs/blob/3.14/docs/en/basics/scaffolding.md#2025-04-20_snippet_8\n\nLANGUAGE: php\nCODE:\n```\ndeclare(strict_types=1);\n\nnamespace App\\Application\\Bootloader;\n\nuse Spiral\\Bootloader\\DomainBootloader;\nuse Spiral\\Core\\CoreInterface;\n\nfinal class AppBootloader extends DomainBootloader\n{\n    protected const BINDINGS = [];\n    protected const SINGLETONS = [\n        CoreInterface::class => [self::class, 'domainCore']\n    ];\n    protected const DEPENDENCIES = [];\n    protected const INTERCEPTORS = [\n        // Put your interceptors here\n    ];\n\n    public function init(): void\n    {\n    }\n\n    public function boot(): void\n    {\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Binding Interface to Singleton\nDESCRIPTION: Illustrates how to bind an interface to a singleton implementation using the BinderInterface.\nSOURCE: https://github.com/spiral/docs/blob/3.14/docs/zh-CN/container/configuration.md#2025-04-20_snippet_2\n\nLANGUAGE: php\nCODE:\n```\nuse Spiral\\Core\\BinderInterface;\n\npublic function boot(BinderInterface $binder): void\n{\n    $binder->bindSingleton(\n        UserRepositoryInterface::class, \n        CycleUserRepository::class\n    );\n}\n```\n\n----------------------------------------\n\nTITLE: Doctrine Basic Instantiator for Metadata Class\nDESCRIPTION: Example of a metadata class using Doctrine's basic instantiator approach.\nSOURCE: https://github.com/spiral/docs/blob/3.14/docs/zh-CN/advanced/attributes.md#2025-04-20_snippet_10\n\nLANGUAGE: php\nCODE:\n```\n/** @Annotation */\n#[\\Attribute]\nclass CustomMetadataClass\n{\n    public $property;\n}\n```\n\n----------------------------------------\n\nTITLE: Selecting Rendering Type for Between Filters in PHP\nDESCRIPTION: Shows how to choose between gte+lte conversion and original rendering for Between filters.\nSOURCE: https://github.com/spiral/docs/blob/3.14/docs/zh-CN/component/data-grid.md#2025-04-20_snippet_6\n\nLANGUAGE: php\nCODE:\n```\nuse Spiral\\DataGrid\\Specification\\Filter;\n\n$between  = new Filter\\Between('price', [10, 20]);\n\n$between->getFilters();     // 将转换为 gte+lte\n$between->getFilters(true); // 将按原样呈现\n\n$notIncludingBetween  = new Filter\\Between('price', [10, 20], false, false);\n\n// 无论如何都将转换为 gte+lte\n$notIncludingBetween->getFilters();\n$notIncludingBetween->getFilters(true);\n```\n\n----------------------------------------\n\nTITLE: Custom Scaffolder Configuration\nDESCRIPTION: Example of customizing specific declaration types in the scaffolder configuration\nSOURCE: https://github.com/spiral/docs/blob/3.14/docs/en/basics/scaffolding.md#2025-04-20_snippet_3\n\nLANGUAGE: php\nCODE:\n```\nuse Spiral\\Scaffolder\\Declaration;\n\nreturn [\n    // ...\n    'declarations' => [\n        Declaration\\MiddlewareDeclaration::TYPE => [\n            'class' => Declaration\\MiddlewareDeclaration::class,\n        ],\n        Declaration\\CommandDeclaration::TYPE => [\n            'namespace' => 'Endpoint\\Console',\n        ],\n        Declaration\\JobHandlerDeclaration::TYPE => [\n            'namespace' => 'Endpoint\\Queue',\n            'postfix' => 'Job',\n        ],\n    ],\n];\n```\n\n----------------------------------------\n\nTITLE: Activating GRPC with Kernel Bootloaders Using Method Approach\nDESCRIPTION: PHP code showing how to activate the GRPC component in Spiral by adding required bootloaders to the kernel's defineBootloaders method.\nSOURCE: https://github.com/spiral/docs/blob/3.14/docs/en/grpc/configuration.md#2025-04-20_snippet_2\n\nLANGUAGE: php\nCODE:\n```\npublic function defineBootloaders(): array\n{\n    return [\n        // ...\n        \\Spiral\\RoadRunnerBridge\\Bootloader\\GRPCBootloader::class,\n        \\Spiral\\RoadRunnerBridge\\Bootloader\\CommandBootloader::class,\n        // ...\n    ];\n}\n```\n\n----------------------------------------\n\nTITLE: Example HTTP GET Request for Controller Route\nDESCRIPTION: Demonstrates a sample GET request that matches the controller route pattern.\nSOURCE: https://github.com/spiral/docs/blob/3.14/docs/en/http/routing.md#2025-04-20_snippet_11\n\nLANGUAGE: bash\nCODE:\n```\nGET /user/list\n```\n\n----------------------------------------\n\nTITLE: Prefixing Routes in PHP\nDESCRIPTION: Demonstrates how to add a prefix to a route pattern using the prefix() method.\nSOURCE: https://github.com/spiral/docs/blob/3.14/docs/en/http/routing.md#2025-04-20_snippet_18\n\nLANGUAGE: php\nCODE:\n```\n$routes->add(name: 'news', pattern: '/news/<id:int>')\n    ->prefix('/api')\n    ->...;\n```\n\n----------------------------------------\n\nTITLE: Installing Prototype Bootloader using Method\nDESCRIPTION: Shows how to add the PrototypeBootloader to the application kernel using the defineBootloaders method.\nSOURCE: https://github.com/spiral/docs/blob/3.14/docs/en/basics/prototype.md#2025-04-20_snippet_0\n\nLANGUAGE: php\nCODE:\n```\npublic function defineBootloaders(): array\n{\n    return [\n        // ...\n        \\Spiral\\Prototype\\Bootloader\\PrototypeBootloader::class,\n        // ...\n    ];\n}\n```\n\n----------------------------------------\n\nTITLE: Using Before Callback with Scheduler\nDESCRIPTION: Example of using the before callback to execute code before a scheduled task.\nSOURCE: https://github.com/spiral/docs/blob/3.14/docs/en/advanced/scheduler.md#2025-04-20_snippet_8\n\nLANGUAGE: php\nCODE:\n```\n$schedule->command('backup:run')\n   ->everyFiveMinutes()\n   ->before(static fn(Notifier $notifier) => $notifier->send('Starting backup...'));\n   -> ...;\n```\n\n----------------------------------------\n\nTITLE: Installing Prototype Bootloader using Constant\nDESCRIPTION: Shows how to add the PrototypeBootloader to the application kernel using a class constant.\nSOURCE: https://github.com/spiral/docs/blob/3.14/docs/en/basics/prototype.md#2025-04-20_snippet_1\n\nLANGUAGE: php\nCODE:\n```\nprotected const LOAD = [\n    // ...\n    \\Spiral\\Prototype\\Bootloader\\PrototypeBootloader::class,\n    // ...\n];\n```\n\n----------------------------------------\n\nTITLE: Broadcasting Configuration in Environment File\nDESCRIPTION: Environment variable configuration for setting the default broadcast connection.\nSOURCE: https://github.com/spiral/docs/blob/3.14/docs/en/websockets/broadcasting.md#2025-04-20_snippet_2\n\nLANGUAGE: dotenv\nCODE:\n```\n# Broadcasting\nBROADCAST_CONNECTION=log\n```\n\n----------------------------------------\n\nTITLE: Rendered PHP Class with Constant Output\nDESCRIPTION: Shows the output of a class declaration with a constant including comments and attributes.\nSOURCE: https://github.com/spiral/docs/blob/3.14/docs/en/component/reactor.md#2025-04-20_snippet_6\n\nLANGUAGE: php\nCODE:\n```\nclass MyClass\n{\n    /** My constant */\n    #[SomeAttribute]\n    final public const MY_CONSTANT = 'default';\n}\n```\n\n----------------------------------------\n\nTITLE: Registering Sentry Reporter Bootloader Using Constant\nDESCRIPTION: Code example showing how to register the SentryReporterBootloader using a class constant\nSOURCE: https://github.com/spiral/docs/blob/3.14/docs/en/basics/errors.md#2025-04-20_snippet_17\n\nLANGUAGE: php\nCODE:\n```\nprotected const LOAD = [\n    // ...\n    \\Spiral\\Sentry\\Bootloader\\SentryReporterBootloader::class,\n    // ...\n];\n```\n\n----------------------------------------\n\nTITLE: Implementing Trace Context Interceptor in PHP for GRPC Server\nDESCRIPTION: This code snippet demonstrates how to create an interceptor that receives trace context from the request in a GRPC server using Spiral Framework.\nSOURCE: https://github.com/spiral/docs/blob/3.14/docs/en/grpc/interceptors.md#2025-04-20_snippet_2\n\nLANGUAGE: php\nCODE:\n```\nnamespace App\\Endpoint\\GRPC\\Interceptor;\n\nuse Spiral\\Core\\CoreInterceptorInterface;\nuse Spiral\\Telemetry\\TraceKind;\nuse Spiral\\Telemetry\\TracerFactoryInterface;\nuse Spiral\\Core\\CoreInterface;\n\nclass InjectTelemetryFromContextInterceptor implements CoreInterceptorInterface\n{\n    public function __construct(\n        private readonly TracerFactoryInterface $tracerFactory\n    ) {\n    }\n\n    public function process(string $controller, string $action, array $parameters, CoreInterface $core): mixed\n    {\n        $traceContext = [];\n\n        if (isset($parameters['ctx']) and $parameters['ctx'] instanceof RequestContext) {\n            $traceContext = $parameters['ctx']->getValue('telemetry-trace-id') ?? [];\n        }\n\n        return $this->tracerFactory->make($traceContext)->trace(\n            name: \\sprintf('Interceptor [%s]', __CLASS__),\n            callback: static fn(): mixed => $core->callAction($controller, $action, $parameters),\n            attributes: [\n                'controller' => $controller,\n                'action' => $action,\n            ],\n            scoped: true,\n            traceKind: TraceKind::SERVER\n        );\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring CSRF Middleware in Spiral Routes\nDESCRIPTION: Example of how to add CSRF middleware to the 'web' middleware group in a Spiral application's RoutesBootloader.\nSOURCE: https://github.com/spiral/docs/blob/3.14/docs/en/http/csrf.md#2025-04-20_snippet_3\n\nLANGUAGE: php\nCODE:\n```\nnamespace App\\Application\\Bootloader;\n\nuse Spiral\\Cookies\\Middleware\\CookiesMiddleware;\nuse Spiral\\Csrf\\Middleware\\CsrfMiddleware;\n\nfinal class RoutesBootloader extends BaseRoutesBootloader\n{\n    protected function middlewareGroups(): array\n    {\n        return [\n            'web' => [\n                CookiesMiddleware::class,\n                CsrfMiddleware::class,\n                // ...\n            ],\n            // ...\n        ];\n    }\n\n    // ...\n}\n```\n\n----------------------------------------\n\nTITLE: Link Cell with Name Concatenation\nDESCRIPTION: Shows how to create a link cell that combines firstName and lastName fields with sorting capability. The link points to a user edit action with the user ID as parameter.\nSOURCE: https://github.com/spiral/docs/blob/3.14/docs/zh-CN/keeper/components.md#2025-04-20_snippet_2\n\nLANGUAGE: xhtml\nCODE:\n```\n<grid:cell.link name=\"name\" label=\"Name\" url=\"@action('users.edit', ['user' => '{id}'])\" sort=\"true\">\n    {firstName}&nbsp;{lastName}\n</grid:cell.link>\n```\n\n----------------------------------------\n\nTITLE: Implementing FinalizerInterface in Spiral Framework\nDESCRIPTION: Interface definition for the Finalizer component used to close resources and connections after request completion. It provides methods to add finalizers and execute finalization.\nSOURCE: https://github.com/spiral/docs/blob/3.14/docs/en/framework/finalizers.md#2025-04-20_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n/**\n * Used to close resources and connections for long-running processes.\n */\ninterface FinalizerInterface\n{\n    /**\n     * Finalizers are executed after every request and used for garbage collection\n     * or to close open connections.\n     *\n     * @param callable $finalizer\n     */\n    public function addFinalizer(callable $finalizer);\n    \n    /**\n     * Finalize execution.\n     *\n     * @param bool $terminate Set to true if finalization is caused on application termination.\n     */\n    public function finalize(bool $terminate = false);\n}\n```\n\n----------------------------------------\n\nTITLE: Getting Last Modified Time in PHP using Spiral Storage\nDESCRIPTION: Demonstrates how to get the last modification time of a file as a UNIX timestamp using getLastModified().\nSOURCE: https://github.com/spiral/docs/blob/3.14/docs/en/advanced/storage.md#2025-04-20_snippet_17\n\nLANGUAGE: php\nCODE:\n```\n$timestamp = $bucket->getLastModified('file.txt');\n```\n\n----------------------------------------\n\nTITLE: Initializing Vue Application with Centrifugo Integration\nDESCRIPTION: Main Vue.js application entry point that sets up Centrifugo WebSocket connection and global properties for authentication and user management.\nSOURCE: https://github.com/spiral/docs/blob/3.14/docs/en/cookbook/simple-chat.md#2025-04-20_snippet_50\n\nLANGUAGE: javascript\nCODE:\n```\nimport {createApp} from 'vue'\nimport App from './App.vue'\nimport {Centrifuge} from \"centrifuge\";\n\nconst app = createApp(App)\n\napp.use({\n    install(app, options) {\n        const authToken = document.getElementsByName('x-bearer')[0].getAttribute('content')\n        app.config.globalProperties.authToken = authToken\n        const centrifuge = new Centrifuge('ws://127.0.0.1:8081/connection/websocket', {\n            data: {authToken}\n        });\n        centrifuge.on('connected', (ctx) => {\n            app.config.globalProperties.user = ctx.data.user\n        })\n        centrifuge.connect();\n        app.config.globalProperties.centrifuge = centrifuge\n    }\n})\n\napp.mount('#app')\n```\n\n----------------------------------------\n\nTITLE: Using Context Manager in a Controller in PHP\nDESCRIPTION: Demonstrates how to use a context manager in a controller, which is a safe way to access scoped values from singletons.\nSOURCE: https://github.com/spiral/docs/blob/3.14/docs/zh-CN/container/scopes.md#2025-04-20_snippet_8\n\nLANGUAGE: php\nCODE:\n```\nclass HomeController implements SingletonInterface\n{\n    public function __construct(\n        private readonly UserScope $userManager\n    ) {\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Matching Host in PHP Route Definition\nDESCRIPTION: Demonstrates how to match a domain or subdomain in a route definition by prefixing the pattern with '//'.\nSOURCE: https://github.com/spiral/docs/blob/3.14/docs/en/http/routing.md#2025-04-20_snippet_34\n\nLANGUAGE: php\nCODE:\n```\n$router->setRoute('home', new Route(\n    '//<host>/',\n    function (ServerRequestInterface $request, ResponseInterface $response): array {\n        return $request->getAttribute('route')->getMatches();\n    }\n));\n```\n\n----------------------------------------\n\nTITLE: Exporting Locale Example\nDESCRIPTION: Terminal commands for exporting locale bundles in different formats\nSOURCE: https://github.com/spiral/docs/blob/3.14/docs/en/advanced/i18n.md#2025-04-20_snippet_7\n\nLANGUAGE: terminal\nCODE:\n```\nphp app.php i18n:export en ./\n```\n\nLANGUAGE: terminal\nCODE:\n```\nphp app.php i18n:export en ./ -d po\n```\n\n----------------------------------------\n\nTITLE: Creating ThreadTableSeeder for Database Population in PHP\nDESCRIPTION: This seeder class creates a single thread record ('First thread') using the ThreadFactory for database seeding. It extends AbstractSeeder and implements the run method.\nSOURCE: https://github.com/spiral/docs/blob/3.14/docs/zh-CN/cookbook/simple-chat.md#2025-04-20_snippet_11\n\nLANGUAGE: terminal\nCODE:\n```\nphp app.php create:seeder ThreadTableSeeder\n```\n\nLANGUAGE: php\nCODE:\n```\nnamespace Database\\Seeder;\n\nuse Database\\Factory\\ThreadFactory;\nuse Spiral\\DatabaseSeeder\\Seeder\\AbstractSeeder;\n\nfinal class ThreadTableSeeder extends AbstractSeeder\n{\n    public function run(): \\Generator\n    {\n        yield ThreadFactory::new(['name' => 'First thread'])->makeOne();\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a SorterSet for Combined Sorting Specifications\nDESCRIPTION: Example of using SorterSet to combine multiple sorters into one unit that can be controlled with a single direction specification. The direction is applied according to each sorter's implementation.\nSOURCE: https://github.com/spiral/docs/blob/3.14/docs/en/component/data-grid.md#2025-04-20_snippet_19\n\nLANGUAGE: php\nCODE:\n```\nuse Spiral\\DataGrid\\Specification\\Sorter;\n\n$sorter = new Sorter\\SorterSet(\n    new Sorter\\AscSorter('first_name'),\n    new Sorter\\DescSorter('last_name'),\n    new Sorter\\Sorter('email', 'username')\n    // ...\n);\n\n// will sort by first_name, email and username asc, also last_name desc\n$ascSorter = $sorter->withDirection('asc');\n\n// will sort by last_name, email and username desc, also first_name asc\n$descSorter = $sorter->withDirection('desc');\n```\n\n----------------------------------------\n\nTITLE: Configuring Activity in Workflow\nDESCRIPTION: Setup of activity stub with task queue in the workflow class\nSOURCE: https://github.com/spiral/docs/blob/3.14/docs/en/temporal/usage.md#2025-04-20_snippet_13\n\nLANGUAGE: php\nCODE:\n```\n$this->mailActivity = Workflow::newActivityStub(\n    SendNotificationActivity::class,\n    ActivityOptions::new()\n        ->withStartToCloseTimeout(5)\n        ->withTaskQueue('mailer')\n);\n```\n\n----------------------------------------\n\nTITLE: Implementing OperationService with Static Memory Caching in PHP\nDESCRIPTION: Example of a service that uses MemoryInterface to cache computed operations. It demonstrates loading cached data or computing and saving new data if cache is empty.\nSOURCE: https://github.com/spiral/docs/blob/3.14/docs/zh-CN/advanced/memory.md#2025-04-20_snippet_1\n\nLANGUAGE: php\nCODE:\n```\nabstract class Operation\n{\n    /**\n     * 执行某些操作。\n     */\n    abstract public function perform(mixed $request): void;\n}\n\nclass OperationService\n{\n    /**\n     * 与其类关联的操作列表。\n     * @var class-string[] \n     */\n    protected array $operations = [];\n\n    public function __construct(\n        MemoryInterface $memory, \n        ClassesInterface $classes\n    ) {\n        $this->operations = $memory->loadData('operations');\n\n        if (\\is_null($this->operations)) {\n            $this->operations = $this->locateOperations($classes); // 慢操作\n            $memory->saveData('operations', $this->operations);\n        }      \n    }\n\n    public function run(string $operation, mixed $request): void\n    {\n        // 根据 $operations 属性执行操作\n    }\n\n    /**\n     * @return class-string[]\n     */\n    protected function locateOperations(ClassesInterface $classes): array\n    {\n        // 通过扫描每个可用的类来生成可用操作的列表\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Accessing Merged Configuration in PHP\nDESCRIPTION: Demonstrates how to access the merged configuration values from an InjectableConfig instance.\nSOURCE: https://github.com/spiral/docs/blob/3.14/docs/en/cookbook/migration-from-v2.md#2025-04-20_snippet_11\n\nLANGUAGE: php\nCODE:\n```\nvar_dump($container->get(SomeConfig::class)->default); // sync\n```\n\n----------------------------------------\n\nTITLE: Installing Cycle Bridge Package\nDESCRIPTION: Command to install the cycle-bridge package via Composer\nSOURCE: https://github.com/spiral/docs/blob/3.14/docs/en/basics/orm.md#2025-04-20_snippet_0\n\nLANGUAGE: terminal\nCODE:\n```\ncomposer require spiral/cycle-bridge\n```\n\n----------------------------------------\n\nTITLE: Adding Resources in Child Templates\nDESCRIPTION: Demonstrates how to add custom resources in a child template by extending blocks and using <block:parent/> to retain parent resources while adding new ones.\nSOURCE: https://github.com/spiral/docs/blob/3.14/docs/en/views/stempler.md#2025-04-20_snippet_23\n\nLANGUAGE: html\nCODE:\n```\n<extends:layout.base title=\"Homepage\" body-class=\"homepage ${parent}\"/>\n\n<block:styles>\n    <block:parent/>\n    <link rel=\"stylesheet\" href=\"/styles/homepage.css\"/>\n</block:styles>\n\n<block:page>\n    Page content.\n</block:page>\n```\n\n----------------------------------------\n\nTITLE: Creating Fake File with Size Specification\nDESCRIPTION: Example of creating a fake file with specific size in kilobytes.\nSOURCE: https://github.com/spiral/docs/blob/3.14/docs/en/testing/http.md#2025-04-20_snippet_13\n\nLANGUAGE: php\nCODE:\n```\n// Create a file with size - 100kb\n$file = $http->getFileFactory()->createFile(\n    filename: 'foo.txt', \n    kilobytes: 100\n);\n```\n\n----------------------------------------\n\nTITLE: Using Mixed Specifications with SortedFilter in PHP\nDESCRIPTION: Demonstrates how to use SortedFilter to combine filtering and sorting specifications under a single name.\nSOURCE: https://github.com/spiral/docs/blob/3.14/docs/zh-CN/component/data-grid.md#2025-04-20_snippet_7\n\nLANGUAGE: php\nCODE:\n```\n$schema->addFilter(\n    'filter',\n    new Filter\\Select(\n        [\n            'upcoming'      => new Sorter\\SortedFilter(\n                'upcoming',\n                new Filter\\Gt('date', new DateTimeImmutable('now')),\n                new Sorter\\AscSorter('date')\n            ),\n            'mostReviewed'  => new Sorter\\SortedFilter(\n                'mostReviewed',\n                new Filter\\Lte('date', new DateTimeImmutable('now')),\n                new Sorter\\DescSorter('count_reviews')\n            )\n        ]\n    )\n);\n```\n\n----------------------------------------\n\nTITLE: Asserting Events Not Dispatched in PHP\nDESCRIPTION: These examples show how to assert that specific events were not dispatched, including using a callback to check for specific conditions.\nSOURCE: https://github.com/spiral/docs/blob/3.14/docs/en/testing/event.md#2025-04-20_snippet_5\n\nLANGUAGE: php\nCODE:\n```\n$this->events->assertNotDispatched(UserRegistered::class);\n\n$this->events->assertNotDispatched(\n    UserRegistered::class, \n    static function(UserRegistered $event): bool {\n        return $event->username === 'john_smith';\n    }\n);\n```\n\n----------------------------------------\n\nTITLE: Registering Notifications Bootloader Using Constant Approach\nDESCRIPTION: Alternative way to register the NotificationsBootloader in the application kernel using the LOAD constant. This method achieves the same result as the method approach.\nSOURCE: https://github.com/spiral/docs/blob/3.14/docs/en/advanced/notifications.md#2025-04-20_snippet_2\n\nLANGUAGE: php\nCODE:\n```\nprotected const LOAD = [\n    // ...\n    \\Spiral\\Notifications\\Bootloader\\NotificationsBootloader::class,\n    // ...\n];\n```\n\n----------------------------------------\n\nTITLE: Activating TwigDebugBootloader in Kernel using Constant\nDESCRIPTION: PHP code snippet showing how to activate the TwigDebugBootloader in the Kernel class using the LOAD constant.\nSOURCE: https://github.com/spiral/docs/blob/3.14/docs/en/views/twig.md#2025-04-20_snippet_9\n\nLANGUAGE: php\nCODE:\n```\nprotected const LOAD = [\n    // ...\n    \\App\\Application\\Bootloader\\TwigDebugBootloader::class,\n    // ...\n];\n```\n\n----------------------------------------\n\nTITLE: Adding MetricsBootloader to Kernel in PHP\nDESCRIPTION: This snippet shows how to add the MetricsBootloader to the list of bootloaders in the application kernel. It can be done either using a method or a constant.\nSOURCE: https://github.com/spiral/docs/blob/3.14/docs/en/advanced/prometheus-metrics.md#2025-04-20_snippet_0\n\nLANGUAGE: php\nCODE:\n```\npublic function defineBootloaders(): array\n{\n    return [\n        // ...\n        \\Spiral\\RoadRunnerBridge\\Bootloader\\MetricsBootloader::class,\n        // ...\n    ];\n}\n```\n\nLANGUAGE: php\nCODE:\n```\nprotected const LOAD = [\n    // ...\n    \\Spiral\\RoadRunnerBridge\\Bootloader\\MetricsBootloader::class,\n    // ...\n];\n```\n\n----------------------------------------\n\nTITLE: Translator Configuration\nDESCRIPTION: Complete configuration example for the translator component including loaders, dumpers, and domains\nSOURCE: https://github.com/spiral/docs/blob/3.14/docs/en/advanced/i18n.md#2025-04-20_snippet_4\n\nLANGUAGE: php\nCODE:\n```\nuse Symfony\\Component\\Translation\\Dumper;\nuse Symfony\\Component\\Translation\\Loader;\n\nreturn [\n    'locale' => env('LOCALE', 'en'),\n    'fallbackLocale' => env('LOCALE', 'en'),\n    'directory' => directory('locale'),\n    'autoRegister' => env('DEBUG', true),\n    'loaders' => [\n        'php'  => Loader\\PhpFileLoader::class,\n        'po'   => Loader\\PoFileLoader::class,\n        'csv'  => Loader\\CsvFileLoader::class,\n        'json' => Loader\\JsonFileLoader::class\n    ],\n    'dumpers'  => [\n        'php'  => Dumper\\PhpFileDumper::class,\n        'po'   => Dumper\\PoFileDumper::class,\n        'csv'  => Dumper\\CsvFileDumper::class,\n        'json' => Dumper\\JsonFileDumper::class,\n    ],\n    'domains' => [\n        'messages' => ['*']\n    ]\n];\n```\n\n----------------------------------------\n\nTITLE: Asserting Scaffolder Command Output in Spiral Framework (PHP)\nDESCRIPTION: Demonstrates how to test scaffolder commands by asserting the generated code matches the expected output. This example tests the 'create:command' scaffolder.\nSOURCE: https://github.com/spiral/docs/blob/3.14/docs/en/testing/start.md#2025-04-20_snippet_11\n\nLANGUAGE: php\nCODE:\n```\n$this->assertScaffolderCommandSame(\n    'create:command',\n    [\n        'name' => 'TestCommand',\n    ],\n    expected: <<<'PHP'\n    <?php\n    \n    declare(strict_types=1);\n    \n    namespace Spiral\\Testing\\Command;\n    \n    use Spiral\\Console\\Attribute\\Argument;\n    use Spiral\\Console\\Attribute\\AsCommand;\n    use Spiral\\Console\\Attribute\\Option;\n    use Spiral\\Console\\Attribute\\Question;\n    use Spiral\\Console\\Command;\n    \n    #[AsCommand(name: 'test:command')]\n    final class TestCommand extends Command\n    {\n        public function __invoke(): int\n        {\n            // Put your command logic here\n            $this->info('Command logic is not implemented yet');\n    \n            return self::SUCCESS;\n        }\n    }\n    \n    PHP,\n    expectedFilename: 'app/src/Command/TestCommand.php',\n    expectedOutputStrings: [\n        \"Declaration of 'TestCommand' has been successfully written into 'app/src/Command/TestCommand.php\",\n    ],\n);\n```\n\n----------------------------------------\n\nTITLE: Rendering Console Table\nDESCRIPTION: Example of creating and rendering a table in console output.\nSOURCE: https://github.com/spiral/docs/blob/3.14/docs/en/console/commands.md#2025-04-20_snippet_12\n\nLANGUAGE: php\nCODE:\n```\n$table = $this->table([\n    'Column #1:',\n    'Column #2:',\n]);\n\nforeach ($data as $row)\n{\n    $table->addRow([\n        $row[1],\n        $row[2]\n    ]);\n}\n\n$table->render();\n```\n\n----------------------------------------\n\nTITLE: Configuring Custom Storage Server in PHP\nDESCRIPTION: Example configuration for a custom storage server in Spiral, demonstrating how to specify a custom adapter class and its constructor arguments.\nSOURCE: https://github.com/spiral/docs/blob/3.14/docs/en/advanced/storage.md#2025-04-20_snippet_8\n\nLANGUAGE: php\nCODE:\n```\nreturn [\n    'servers' => [\n        'custom' => [\n            'adapter' => \\Custom\\FlysystemAdapter::Class,\n            'options' => [\n                // ...\n            ]\n        ],\n    ],\n\n    'buckets' => [\n        'bucket' => [\n            'server' => 'custom'\n        ]\n    ]\n];\n```\n\n----------------------------------------\n\nTITLE: Rendering JavaScript Date Picker in XHTML\nDESCRIPTION: This snippet demonstrates how to use the form:date-js component to render a JavaScript-powered date picker with extended functionality. It includes parameters for customizing the date format, enabling time input, and other options.\nSOURCE: https://github.com/spiral/docs/blob/3.14/docs/en/keeper/components.md#2025-04-20_snippet_27\n\nLANGUAGE: xhtml\nCODE:\n```\n<form:date-js\n        name=\"date1\"\n        label=\"Date\"\n        value=\"2020-10-29T14:14:14+0300\"\n        size=\"6\"\n/>\n```\n\n----------------------------------------\n\nTITLE: Implementing Grid Action Link\nDESCRIPTION: Creates a customizable action link in the grid's action column. Supports URL templates, custom labels, icons, and target specifications.\nSOURCE: https://github.com/spiral/docs/blob/3.14/docs/en/keeper/components.md#2025-04-20_snippet_10\n\nLANGUAGE: xhtml\nCODE:\n```\n<grid:action.link\n        href=\"edit/{id}\"\n        template=\"{id}\"\n        label=\"Edit\"\n        title=\"Edit {firstName}\"\n        icon=\"edit\"\n        target=\"_blank\"\n/>\n```\n\n----------------------------------------\n\nTITLE: Configuring Bootloader via Method\nDESCRIPTION: Adding ProfilerBootloader to the application kernel using a method definition.\nSOURCE: https://github.com/spiral/docs/blob/3.14/docs/en/basics/debug.md#2025-04-20_snippet_12\n\nLANGUAGE: php\nCODE:\n```\npublic function defineBootloaders(): array\n{\n    return [\n        // ...\n        \\Spiral\\Profiler\\ProfilerBootloader::class,\n        // ...\n    ];\n}\n```\n\n----------------------------------------\n\nTITLE: Declaring a PHP Interface\nDESCRIPTION: Shows how to declare an interface with methods and extensions.\nSOURCE: https://github.com/spiral/docs/blob/3.14/docs/zh-CN/component/reactor.md#2025-04-20_snippet_8\n\nLANGUAGE: php\nCODE:\n```\n$interface = new InterfaceDeclaration('MyInterface');\n$interface\n    ->addExtend(\\Countable::class)\n    ->addComment('My interface')\n    ->addMethod('someMethod')\n        ->setPublic()\n        ->setReturnType('int');\n\ndump((string) $interface);\n```\n\n----------------------------------------\n\nTITLE: Updated Posts List View with Routes in Spiral\nDESCRIPTION: Enhanced posts list view template that includes clickable links to individual posts using route generation.\nSOURCE: https://github.com/spiral/docs/blob/3.14/docs/en/cookbook/quick-start.md#2025-04-20_snippet_42\n\nLANGUAGE: html\nCODE:\n```\n<extends:layout.base title=\"Posts\"/>\n\n<define:body>\n    @foreach($posts as $post)\n    <div class=\"post\">\n        <div class=\"title\">\n            <a href=\"@route('post.view', ['id' => $post->id])\">{{$post->title}}</a>\n        </div>\n        <div class=\"author\">{{$post->author->name}}</div>\n    </div>\n    @endforeach\n</define:body>\n```\n\n----------------------------------------\n\nTITLE: Configuring Broadcasting Connection\nDESCRIPTION: PHP configuration for broadcasting connection settings using Centrifugo driver.\nSOURCE: https://github.com/spiral/docs/blob/3.14/docs/en/cookbook/simple-chat.md#2025-04-20_snippet_5\n\nLANGUAGE: php\nCODE:\n```\nreturn [\n    'connections' => [\n        'centrifugo' => [\n            'driver' => 'centrifugo',\n        ],\n    ],\n];\n```\n\n----------------------------------------\n\nTITLE: Implementing CSRF Protection in HTML Form\nDESCRIPTION: An example of how to include a CSRF token in an HTML form to protect against CSRF attacks. The token is added as a hidden input field.\nSOURCE: https://github.com/spiral/docs/blob/3.14/docs/en/http/csrf.md#2025-04-20_snippet_1\n\nLANGUAGE: html\nCODE:\n```\n<form action=\"https://your-application.com/user/password\" method=\"POST\">\n    <input type=\"hidden\" name=\"csrf-token\" value=\"{csrfToken}\"/>\n    <input name=\"password\" type=\"password\">\n    // ...\n    <button type=\"submit\">Change password</button>\n</form>\n```\n\n----------------------------------------\n\nTITLE: Registering Database Loader in Spiral Container\nDESCRIPTION: Configuration for registering the custom database loader in Spiral's container through a bootloader class.\nSOURCE: https://github.com/spiral/docs/blob/3.14/docs/en/views/basics.md#2025-04-20_snippet_7\n\nLANGUAGE: php\nCODE:\n```\nnamespace App\\Application\\Bootloader;\n\nuse Spiral\\Views\\LoaderInterface;\nuse App\\Integration\\Database\\DatabaseLoader;\n\nclass AppBootloader extends Bootloader \n{\n    protected const SINGLETONS = [\n        LoaderInterface::class => [self::class, 'initLoader'],\n    ];\n    \n    protected function initLoader(DatabaseInterface $database): LoaderInterface\n    {\n        return new DatabaseLoader($database);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Composer Autoload for Database Files\nDESCRIPTION: JSON configuration to add database-related files to Composer's autoload settings.\nSOURCE: https://github.com/spiral/docs/blob/3.14/docs/en/testing/database.md#2025-04-20_snippet_3\n\nLANGUAGE: json\nCODE:\n```\n{\n  // ...\n  \"autoload\": {\n    \"psr-4\": {\n      \"Database\\\\\": \"app/database/\"\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Running Tasks in Background\nDESCRIPTION: Example of configuring a scheduled task to run in the background.\nSOURCE: https://github.com/spiral/docs/blob/3.14/docs/en/advanced/scheduler.md#2025-04-20_snippet_12\n\nLANGUAGE: php\nCODE:\n```\n$schedule->command('ping', ['https://google.com'])\n   ->everyFiveMinutes()\n   ->runInBackground()\n   -> ...;\n```\n\n----------------------------------------\n\nTITLE: Implementing Stringable Topic Class\nDESCRIPTION: Implementation of a Stringable Order class for creating topic strings in broadcasting.\nSOURCE: https://github.com/spiral/docs/blob/3.14/docs/en/websockets/broadcasting.md#2025-04-20_snippet_6\n\nLANGUAGE: php\nCODE:\n```\nnamespace App\\Broadcast\\Topic;\n\nfinal class Order implements \\Stringable\n{\n    public function __construct(\n        public readonly string $orderUuid\n    ) {\n    }\n\n    public function __toString(): string\n    {\n        return \\sprintf('order.%s', $this->orderUuid);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Using Scalar Binding\nDESCRIPTION: Shows how to use Scalar binding for storing static scalar values in the container.\nSOURCE: https://github.com/spiral/docs/blob/3.14/docs/zh-CN/container/configuration.md#2025-04-20_snippet_15\n\nLANGUAGE: php\nCODE:\n```\nuse Spiral\\Core\\Config\\Scalar;\n\n$container->bind('app-path', new Scalar(value: '/var/www/my-app'));\n```\n\n----------------------------------------\n\nTITLE: Config Example in Spiral Tests\nDESCRIPTION: Sample configuration file for HTTP settings in Spiral application.\nSOURCE: https://github.com/spiral/docs/blob/3.14/docs/en/testing/start.md#2025-04-20_snippet_4\n\nLANGUAGE: php\nCODE:\n```\nreturn [\n    'basePath'   => '/',\n    'headers'    => [\n        'Content-Type' => 'text/html; charset=UTF-8',\n    ],\n    'middleware' => [],\n];\n```\n\n----------------------------------------\n\nTITLE: Adding SchedulerBootloader to Application Kernel\nDESCRIPTION: Example of how to add the SchedulerBootloader to the application's kernel using the defineBootloaders method.\nSOURCE: https://github.com/spiral/docs/blob/3.14/docs/zh-CN/advanced/scheduler.md#2025-04-20_snippet_1\n\nLANGUAGE: php\nCODE:\n```\npublic function defineBootloaders(): array\n{\n    return [\n        // ...\n        \\Spiral\\Scheduler\\Bootloader\\SchedulerBootloader::class,\n        // ...\n    ];\n}\n```\n\n----------------------------------------\n\nTITLE: Using Scoped Interfaces Locator in PHP\nDESCRIPTION: Illustrates how to use the ScopedInterfacesInterface to find interfaces within a specific scope in a Spiral application.\nSOURCE: https://github.com/spiral/docs/blob/3.14/docs/en/advanced/tokenizer.md#2025-04-20_snippet_10\n\nLANGUAGE: php\nCODE:\n```\nuse Spiral\\Tokenizer\\ScopedInterfacesInterface;\n\nfinal class InterfaceSearcher\n{\n    public function __construct(\n        private readonly ScopedInterfacesInterface $locator\n    ) {\n    }\n\n    public function findInterfaces(): array\n    {\n        $identifiedInterfaces = [];\n\n        foreach ($this->locator->getScopedInterfaces('scopeName') as $interface) {\n            $identifiedInterfaces[] = $interface;\n            // or add your desired actions...\n        }\n\n        return $identifiedInterfaces;\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Registering I18nBootloader Using Constant\nDESCRIPTION: Alternative approach to register I18nBootloader using a class constant\nSOURCE: https://github.com/spiral/docs/blob/3.14/docs/en/advanced/i18n.md#2025-04-20_snippet_2\n\nLANGUAGE: php\nCODE:\n```\nprotected const LOAD = [\n    // ...\n    \\Spiral\\Bootloader\\I18nBootloader::class,\n    // ...\n];\n```\n\n----------------------------------------\n\nTITLE: Configuring Spiral Console Component\nDESCRIPTION: This PHP configuration snippet shows the structure of the console.php config file used to customize the Console component in a Spiral application.\nSOURCE: https://github.com/spiral/docs/blob/3.14/docs/en/console/configuration.md#2025-04-20_snippet_4\n\nLANGUAGE: php\nCODE:\n```\nreturn [\n     // application name\n     'name'      => null,\n     \n     // application version\n     'version'   => null,\n     \n     // list of application commands (if auto-discover disabled)\n     'commands'  => [],\n     \n     // list of commands and sequences to run in `app configure`\n     'configure' => [],\n     \n     // list of commands and sequences to run in `app update`\n     'update'    => []\n];\n```\n\n----------------------------------------\n\nTITLE: View Rendering with Parameters\nDESCRIPTION: Controller method demonstrating how to pass parameters to a view file during rendering.\nSOURCE: https://github.com/spiral/docs/blob/3.14/docs/en/views/plain.md#2025-04-20_snippet_2\n\nLANGUAGE: php\nCODE:\n```\npublic function index(ViewsInterface $views): string\n{\n    return $views->render('test', ['name' => 'Antony']); \n}\n```\n\n----------------------------------------\n\nTITLE: Asserting File Deletion in Storage\nDESCRIPTION: Shows how to assert that a file was deleted from a storage bucket.\nSOURCE: https://github.com/spiral/docs/blob/3.14/docs/en/testing/storage.md#2025-04-20_snippet_5\n\nLANGUAGE: php\nCODE:\n```\n$uploads = $storage->bucket('uploads');\n$uploads->assertDeleted('image.jpg');\n```\n\n----------------------------------------\n\nTITLE: Using StringValue Filter in PHP\nDESCRIPTION: Demonstrates the StringValue filter that validates and converts string-like inputs, with an option to allow or disallow empty strings.\nSOURCE: https://github.com/spiral/docs/blob/3.14/docs/en/component/data-grid.md#2025-04-20_snippet_45\n\nLANGUAGE: php\nCODE:\n```\nuse Spiral\\DataGrid\\Specification\\Value;\n\n$value = new Value\\StringValue();\n$allowEmpty = new Value\\StringValue(true);\n\n$value->accepts('');      // false\n$value->accepts(false);   // false\n$value->accepts('3');     // true\n$value->accepts(4);       // true\n$value->convert(3);       // '3'\n$allowEmpty->accepts(''); // true\n```\n\n----------------------------------------\n\nTITLE: Creating Scoped Authentication User Class in PHP\nDESCRIPTION: Shows how to create a scoped authenticated user class that can only be resolved within an auth scope.\nSOURCE: https://github.com/spiral/docs/blob/3.14/docs/en/container/attributes.md#2025-04-20_snippet_1\n\nLANGUAGE: php\nCODE:\n```\nuse Spiral\\Core\\Attribute\\Scope;\n\n#[Scope('auth')]\nfinal readonly class AuthenticatedUser\n{\n    public function __construct(\n        private int $id,\n        private string $name, \n        private string $email,\n    ) {\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Global Variables via Interface\nDESCRIPTION: Alternative approach to setting global variables using GlobalVariablesInterface in a bootloader.\nSOURCE: https://github.com/spiral/docs/blob/3.14/docs/en/views/basics.md#2025-04-20_snippet_9\n\nLANGUAGE: php\nCODE:\n```\nnamespace App\\Application\\Bootloader;\n\nuse Spiral\\Boot\\Bootloader\\Bootloader;\nuse Spiral\\Views\\GlobalVariablesInterface;\nuse Spiral\\Boot\\EnvironmentInterface;\n\nclass AppBootloader extends Bootloader \n{\n    public function boot(GlobalVariablesInterface $vars, EnvironmentInterface $env): void\n    {\n         $vars->set('some_var', $env->get('SOME_VALUE'));\n         $vars->set('other_var', 'other_value');\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Updating Composer Autoload for gRPC Generated Code\nDESCRIPTION: JSON configuration in composer.json to include the generated gRPC code in the autoloader.\nSOURCE: https://github.com/spiral/docs/blob/3.14/docs/zh-CN/grpc/service.md#2025-04-20_snippet_4\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"autoload\": {\n        \"psr-4\": {\n            \"App\\\\\": \"app/src\",\n            \"GRPC\\\\\": \"generated\"\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Adding Route-Specific Middleware with Route Attributes\nDESCRIPTION: Example showing how to apply middleware to a specific route using PHP 8 attributes.\nSOURCE: https://github.com/spiral/docs/blob/3.14/docs/en/http/middleware.md#2025-04-20_snippet_6\n\nLANGUAGE: php\nCODE:\n```\nnamespace App\\Endpoint\\Web;\n\nuse Spiral\\Router\\Annotation\\Route;\nuse App\\Endpoint\\Web\\Middleware\\MyMiddleware;\n\nclass HomeController\n{\n    #[Route(route: '/', name: 'index', methods: 'GET', middleware: [MyMiddleware::class])] \n    public function index(): string\n    {\n        // ...\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Getting File Size in PHP using Spiral Storage\nDESCRIPTION: Shows how to retrieve the size of a file in bytes using the getSize() method.\nSOURCE: https://github.com/spiral/docs/blob/3.14/docs/en/advanced/storage.md#2025-04-20_snippet_16\n\nLANGUAGE: php\nCODE:\n```\n$bytes = $bucket->getSize('file.txt');\n```\n\n----------------------------------------\n\nTITLE: Registering Custom Tokenizer Registry\nDESCRIPTION: Configuration file for registering custom tokenizer directory registry in the discoverer.php config file. This example adds a JsonRegistry to the directories array.\nSOURCE: https://github.com/spiral/docs/blob/3.14/docs/en/component/discoverer.md#2025-04-20_snippet_8\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\nuse Spiral\\Discoverer\\Bootloader as BootloaderRegistry;\nuse Spiral\\Discoverer\\Tokenizer as TokenizerRegistry;\n\nreturn [\n    'registries' => [\n        'bootloaders' => [\n            BootloaderRegistry\\ComposerRegistry::class,\n            BootloaderRegistry\\ConfigRegistry::class,\n        ],\n        'directories' => [\n            TokenizerRegistry\\ComposerRegistry::class,\n            JsonRegistry::class,\n        ],\n    ],\n];\n```\n\n----------------------------------------\n\nTITLE: Configuring RoadRunner Fileserver Plugin\nDESCRIPTION: YAML configuration for the RoadRunner Fileserver plugin to serve files from local storage with specific URL prefixes.\nSOURCE: https://github.com/spiral/docs/blob/3.14/docs/en/advanced/storage.md#2025-04-20_snippet_5\n\nLANGUAGE: yaml\nCODE:\n```\nfileserver:\n  address: 127.0.0.1:10101\n  calculate_etag: true\n  weak: false\n  stream_request_body: true\n  serve:\n    - prefix: \"/avatars\"\n      root: \"/app/storage/user-profiles/avatars\"\n```\n\n----------------------------------------\n\nTITLE: RoadRunner YAML Configuration\nDESCRIPTION: Basic RoadRunner configuration including RPC, server settings, and HTTP plugin configuration.\nSOURCE: https://github.com/spiral/docs/blob/3.14/docs/en/start/server.md#2025-04-20_snippet_4\n\nLANGUAGE: yaml\nCODE:\n```\nrpc:\n  listen: tcp://127.0.0.1:6001\n\nserver:\n  command: \"php app.php\"\n  relay: pipes\n\nhttp:\n  address: 0.0.0.0:8080\n  middleware: [ \"gzip\", \"static\" ]\n  static:\n    dir: \"public\"\n    forbid: [ \".php\", \".htaccess\" ]\n  pool:\n    num_workers: 2\n    supervisor:\n      max_worker_memory: 100\n```\n\n----------------------------------------\n\nTITLE: Creating a QR Code with Custom Logo in Spiral\nDESCRIPTION: Advanced example of a QR code with a logo overlay. Demonstrates how to position and size a logo on top of the QR code, with custom colors and error correction level.\nSOURCE: https://github.com/spiral/docs/blob/3.14/docs/en/keeper/components.md#2025-04-20_snippet_33\n\nLANGUAGE: xhtml\nCODE:\n```\n<ui:qrcode\n        value=\"https://spiral.dev/\"\n        type=\"canvas\"\n        size=\"300\"\n        bgColor=\"#f8f9fa\"\n        fgColor=\"#578fca\"\n        ecLevel=\"H\"\n        logoUrl=\"/logo.svg\"\n        logoHeight=\"50\"\n        logoWidth=\"40\"\n        logoX=\"130\"\n        logoY=\"125\"\n        logoMargin=\"0\"\n/>\n```\n\n----------------------------------------\n\nTITLE: Asserting File Creation in Storage\nDESCRIPTION: Example of asserting that a file was created in a storage bucket.\nSOURCE: https://github.com/spiral/docs/blob/3.14/docs/en/testing/storage.md#2025-04-20_snippet_3\n\nLANGUAGE: php\nCODE:\n```\n$uploads = $storage->bucket('uploads');\n$uploads->assertCreated('image.jpg');\n```\n\n----------------------------------------\n\nTITLE: Using runScoped without Autowiring in PHP\nDESCRIPTION: Demonstrates how to use runScoped without autowiring. The entire container instance is passed as the first argument to the closure, allowing manual dependency retrieval.\nSOURCE: https://github.com/spiral/docs/blob/3.14/docs/zh-CN/container/scopes.md#2025-04-20_snippet_2\n\nLANGUAGE: php\nCODE:\n```\n$container->runScoped(closure: function (Contaner $container) {\n    $instance = $container->get(SomeInterface::class);\n    // Your code here\n}, bindings: [SomeInterface::class => SomeImplementation::class], autowire: false);\n```\n\n----------------------------------------\n\nTITLE: Viewing Table Schema using CLI Command\nDESCRIPTION: Command to display detailed information about a database table including columns, indexes, and foreign keys.\nSOURCE: https://github.com/spiral/docs/blob/3.14/docs/en/basics/orm.md#2025-04-20_snippet_18\n\nLANGUAGE: terminal\nCODE:\n```\nphp app.php db:table posts\n```\n\n----------------------------------------\n\nTITLE: Importing Routes from Separate Files\nDESCRIPTION: Demonstrates how to import routes from separate files using the RoutingConfigurator.\nSOURCE: https://github.com/spiral/docs/blob/3.14/docs/en/http/routing.md#2025-04-20_snippet_5\n\nLANGUAGE: php\nCODE:\n```\nuse Spiral\\Router\\Loader\\Configurator\\RoutingConfigurator;\n\nnamespace App\\Application\\Bootloader;\n\nuse Spiral\\Boot\\DirectoriesInterface;\nuse Spiral\\Bootloader\\Http\\RoutesBootloader as BaseRoutesBootloader;\nuse Spiral\\Router\\Loader\\Configurator\\RoutingConfigurator;\n\nfinal class RoutesBootloader extends BaseRoutesBootloader\n{\n    public function __construct(\n        private readonly DirectoriesInterface $dirs\n    ) {\n    }\n    \n    // ...\n\n    protected function defineRoutes(RoutingConfigurator $routes): void\n    {\n        $routes->import($this->dirs->get('app') . '/routes/web.php')\n            ->group('web');\n            \n        $routes->import($this->dirs->get('app') . '/routes/api.php')\n            ->prefix('/api');\n            ->group('api');\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Views Bootloader Using Method\nDESCRIPTION: Example of registering the ViewsBootloader using the defineBootloaders method in the application kernel\nSOURCE: https://github.com/spiral/docs/blob/3.14/docs/en/views/configuration.md#2025-04-20_snippet_1\n\nLANGUAGE: php\nCODE:\n```\npublic function defineBootloaders(): array\n{\n    return [\n        // ...\n        \\Spiral\\Views\\Bootloader\\ViewsBootloader::class,\n        // ...\n    ];\n}\n```\n\n----------------------------------------\n\nTITLE: Using a Filter in a Controller Method\nDESCRIPTION: Demonstrates how to use a filter object in a controller method to handle user creation with validated input.\nSOURCE: https://github.com/spiral/docs/blob/3.14/docs/en/cookbook/migration-from-v2.md#2025-04-20_snippet_16\n\nLANGUAGE: php\nCODE:\n```\nclass UserController\n{\n    public function createUser(CreateUserFilter $filter): array\n    {\n        $user = new User(\n            $filter->username,\n            $filter->firstName,\n            $filter->lastName\n        );\n\n        $user->setUtmData(\n            $filter->utm->id,\n            $filter->utm->source,\n            ...\n        );\n\n        foreach($filter->tags as $tag) {\n            $user->addTag($tag->role);\n        }\n\n        $this->em->persist($user);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Removing Multiple Cache Items in PHP\nDESCRIPTION: Deletes multiple items from the cache at once by providing an array of keys to remove.\nSOURCE: https://github.com/spiral/docs/blob/3.14/docs/en/basics/cache.md#2025-04-20_snippet_12\n\nLANGUAGE: php\nCODE:\n```\n$this->cache->deleteMultiple(['key', 'other']);\n```\n\n----------------------------------------\n\nTITLE: Union Types Support Example\nDESCRIPTION: Shows how the resolver handles union types in dependency injection.\nSOURCE: https://github.com/spiral/docs/blob/3.14/docs/en/container/overview.md#2025-04-20_snippet_8\n\nLANGUAGE: php\nCODE:\n```\nuse Doctrine\\Common\\Annotations\\Reader;\nuse Spiral\\Attributes\\ReaderInterface;\n\nfinal class Entities\n{\n    public function __construct(\n        private Reader|ReaderInterface $reader\n    ) {\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring XDebug in Docker Compose\nDESCRIPTION: Docker Compose configuration for enabling XDebug in a containerized environment.\nSOURCE: https://github.com/spiral/docs/blob/3.14/docs/en/basics/debug.md#2025-04-20_snippet_20\n\nLANGUAGE: yaml\nCODE:\n```\nversion: \"2\"\nservices:\n  ...\n  app:\n    ...\n    command:\n      - /usr/local/bin/rr\n      - serve\n      - -o\n      - server.command=php -d zend_extension=xdebug.so app.php\n    environment:\n      PHP_IDE_CONFIG: serverName=application.loc\n      XDEBUG_CONFIG: remote_host=host.docker.internal max_nesting_level=250 remote_enable=1 remote_connect_back=0 var_display_max_depth=5 idekey='PHPSTORM'\n```\n\n----------------------------------------\n\nTITLE: Registering Driver Alias via Bootloader\nDESCRIPTION: Shows how to register a custom queue driver alias through a bootloader class using the QueueBootloader's registerDriverAlias method.\nSOURCE: https://github.com/spiral/docs/blob/3.14/docs/en/queue/configuration.md#2025-04-20_snippet_10\n\nLANGUAGE: php\nCODE:\n```\nnamespace App\\Application\\Bootloader;\n\nuse Spiral\\Boot\\Bootloader\\Bootloader;\nuse App\\Infrastructure\\Queue\\RedisQueue;\nuse Spiral\\Queue\\Bootloader\\QueueBootloader;\n\nclass AppBootloader extends Bootloader\n{\n    public function init(QueueBootloader $queue): void\n    {\n        $queue->registerDriverAlias(RedisQueue::class, 'redis');\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Root App Component\nDESCRIPTION: Main Vue application component that serves as the root container for the chat interface.\nSOURCE: https://github.com/spiral/docs/blob/3.14/docs/en/cookbook/simple-chat.md#2025-04-20_snippet_54\n\nLANGUAGE: html\nCODE:\n```\n<script setup>\nimport Messages from \"./components/Messages.vue\";\n</script>\n\n<template>\n    <div class=\"flex-1 p:2 sm:p-6 justify-between flex flex-col h-screen\">\n        <Messages :thread=\"1\"/>\n    </div>\n</template>\n```\n\n----------------------------------------\n\nTITLE: Configuring Views Bootloader Using Constant\nDESCRIPTION: Alternative approach to register the ViewsBootloader using a constant in the application kernel\nSOURCE: https://github.com/spiral/docs/blob/3.14/docs/en/views/configuration.md#2025-04-20_snippet_2\n\nLANGUAGE: php\nCODE:\n```\nprotected const LOAD = [\n    // ...\n    \\Spiral\\Views\\Bootloader\\ViewsBootloader::class,\n    // ...\n];\n```\n\n----------------------------------------\n\nTITLE: Setting DEBUG Environment Variable\nDESCRIPTION: Shows how to disable the delivery of exception details to the browser by setting DEBUG to false in the .env file. This is important for production deployments.\nSOURCE: https://github.com/spiral/docs/blob/3.14/docs/en/http/errors.md#2025-04-20_snippet_3\n\nLANGUAGE: dotenv\nCODE:\n```\nDEBUG=false\n```\n\n----------------------------------------\n\nTITLE: Checking Container Binding\nDESCRIPTION: Demonstrates how to check if a container has a specific binding.\nSOURCE: https://github.com/spiral/docs/blob/3.14/docs/zh-CN/container/configuration.md#2025-04-20_snippet_6\n\nLANGUAGE: php\nCODE:\n```\nuse Spiral\\Core\\Container;\n\npublic function boot(Container $container): void\n{\n    $container->has(UserRepositoryInterface::class)\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring JSON Serializer for Queue Payloads\nDESCRIPTION: Configuration for setting the default serializer to JSON in the queue settings, allowing for simple array payload deserialization when receiving messages from the queue.\nSOURCE: https://github.com/spiral/docs/blob/3.14/docs/en/cookbook/simple-queue-system.md#2025-04-20_snippet_15\n\nLANGUAGE: php\nCODE:\n```\nreturn [\n    // ...\n    'defaultSerializer' => 'json',\n];\n```\n\n----------------------------------------\n\nTITLE: Asserting File Visibility Change in Storage\nDESCRIPTION: Demonstrates how to assert that a file's visibility was changed in storage.\nSOURCE: https://github.com/spiral/docs/blob/3.14/docs/en/testing/storage.md#2025-04-20_snippet_11\n\nLANGUAGE: php\nCODE:\n```\n$uploads = $storage->bucket('uploads');\n$uploads->assertVisibilityChanged('file.txt');\n```\n\n----------------------------------------\n\nTITLE: Registering Custom Mail Transport in Spiral PHP\nDESCRIPTION: Demonstrates how to register a custom mail transport using the TransportRegistryInterface in Spiral Framework.\nSOURCE: https://github.com/spiral/docs/blob/3.14/docs/zh-CN/advanced/sendit.md#2025-04-20_snippet_6\n\nLANGUAGE: php\nCODE:\n```\nuse Spiral\\Boot\\Bootloader\\Bootloader;\nuse Spiral\\SendIt\\TransportRegistryInterface;\nuse Symfony\\Component\\Mailer\\Transport\\SendmailTransportFactory;\n\nclass AppBootloader extends Bootloader \n{\n    public function boot(TransportRegistryInterface $registry): void\n    {\n        $registry->registerTransport(new SendmailTransportFactory(...));\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Binding Interface to Implementation using Container\nDESCRIPTION: Shows how to bind an interface to a concrete implementation using the Container class in a bootloader.\nSOURCE: https://github.com/spiral/docs/blob/3.14/docs/zh-CN/container/configuration.md#2025-04-20_snippet_1\n\nLANGUAGE: php\nCODE:\n```\nuse Spiral\\Core\\Container;\n\npublic function boot(Container $container): void\n{\n    $container->bind(\n        UserRepositoryInterface::class, \n        CycleUserRepository::class\n    );\n}\n```\n\n----------------------------------------\n\nTITLE: Verifying Database Connection in Spiral\nDESCRIPTION: This command is used to verify that the database connection has been successfully established in a Spiral project.\nSOURCE: https://github.com/spiral/docs/blob/3.14/docs/en/cookbook/simple-chat.md#2025-04-20_snippet_8\n\nLANGUAGE: terminal\nCODE:\n```\nphp app.php db:list\n```\n\n----------------------------------------\n\nTITLE: Rendered PHP Interface Output\nDESCRIPTION: Shows the output of an interface declaration with method, extension, and comments.\nSOURCE: https://github.com/spiral/docs/blob/3.14/docs/en/component/reactor.md#2025-04-20_snippet_16\n\nLANGUAGE: php\nCODE:\n```\n/**\n * My interface\n */\ninterface MyInterface extends Countable\n{\n    public function someMethod(): int;\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Native Date Picker in Spiral Framework\nDESCRIPTION: Example of implementing a native date picker form component with basic attributes. The component renders as a native HTML date input element.\nSOURCE: https://github.com/spiral/docs/blob/3.14/docs/en/keeper/components.md#2025-04-20_snippet_26\n\nLANGUAGE: xhtml\nCODE:\n```\n<form:date\n        name=\"date\"\n        label=\"Native Date Picker\"\n        value=\"\"\n        size=\"6\"\n/>\n```\n\n----------------------------------------\n\nTITLE: Using Custom Metadata with Doctrine Annotations\nDESCRIPTION: Example of using a custom metadata class with Doctrine annotation syntax, passing a property argument. This is the traditional way to define metadata with parameters.\nSOURCE: https://github.com/spiral/docs/blob/3.14/docs/en/advanced/attributes.md#2025-04-20_snippet_13\n\nLANGUAGE: php\nCODE:\n```\n/** @CustomMetadataClass(property=\"value\") */\nclass AnnotatedClass\n{\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing FastRoute Bootloader in Spiral\nDESCRIPTION: Custom bootloader implementation that integrates FastRoute with Spiral Framework. Defines routes and configures the PSR-15 request handler.\nSOURCE: https://github.com/spiral/docs/blob/3.14/docs/en/cookbook/psr-15.md#2025-04-20_snippet_1\n\nLANGUAGE: php\nCODE:\n```\nnamespace App\\Application\\Bootloader;\n\nuse FastRoute;\nuse Middlewares;\nuse Psr\\Http\\Message\\ResponseFactoryInterface;\nuse Psr\\Http\\Server\\RequestHandlerInterface;\nuse Spiral\\Boot\\Bootloader\\Bootloader;\nuse Psr\\Http\\Message\\ServerRequestInterface;\n\nfinal class FastRouteBootloader extends Bootloader\n{\n    protected const SINGLETONS = [\n        RequestHandlerInterface::class => [self::class, 'psr15Handler'],\n    ];\n\n    private function defineRoutes(FastRoute\\RouteCollector $router): void\n    {\n        $router->addRoute('GET', '/hello/{name}', static function (ServerRequestInterface $request): string {\n            $name = $request->getAttribute('name');\n\n            return \\sprintf('Hello %s', $name);\n        });\n    }\n\n    private function psr15Handler(ResponseFactoryInterface $responseFactory): RequestHandlerInterface\n    {\n        $dispatcher = FastRoute\\simpleDispatcher(function (FastRoute\\RouteCollector $r) {\n            $this->defineRoutes($r);\n        });\n\n        return new Middlewares\\Utils\\Dispatcher([\n            new Middlewares\\FastRoute($dispatcher, $responseFactory),\n            new Middlewares\\RequestHandler(),\n        ]);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Asserting File Non-Deletion in Storage\nDESCRIPTION: Example of verifying that a file was not deleted from a storage bucket.\nSOURCE: https://github.com/spiral/docs/blob/3.14/docs/en/testing/storage.md#2025-04-20_snippet_6\n\nLANGUAGE: php\nCODE:\n```\n$uploads = $storage->bucket('uploads');\n$uploads->assertNotDeleted('image.jpg');\n```\n\n----------------------------------------\n\nTITLE: Simple Autocomplete Implementation in XHTML\nDESCRIPTION: Basic example of autocomplete implementation with minimal required parameters.\nSOURCE: https://github.com/spiral/docs/blob/3.14/docs/en/keeper/components.md#2025-04-20_snippet_23\n\nLANGUAGE: xhtml\nCODE:\n```\n<form:autocomplete\n        name=\"userId2\"\n        label=\"Simple Autocomplete\"\n        value=\"1\"\n        url=\"/keeper/users/list\"\n></form:autocomplete>\n```\n\n----------------------------------------\n\nTITLE: Initializing Database Migrations in Spiral\nDESCRIPTION: This command initializes the migration configuration process in a Spiral application.\nSOURCE: https://github.com/spiral/docs/blob/3.14/docs/en/cookbook/simple-chat.md#2025-04-20_snippet_11\n\nLANGUAGE: terminal\nCODE:\n```\nphp app.php migrate:init\n```\n\n----------------------------------------\n\nTITLE: Registering Booting Callback in AppBootloader\nDESCRIPTION: Example of registering a booting callback within a bootloader class using the init method.\nSOURCE: https://github.com/spiral/docs/blob/3.14/docs/en/framework/kernel.md#2025-04-20_snippet_3\n\nLANGUAGE: php\nCODE:\n```\nnamespace App\\Application\\Bootloader;\n\nuse Spiral\\Boot\\Bootloader\\Bootloader;\nuse Spiral\\Boot\\KernelInterface;\n\nclass AppBootloader extends Bootloader\n{\n    public function init(KernelInterface $app): void\n    {\n        $app->booting(function () {\n            // ...\n        });\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Golang gRPC Client with Metadata\nDESCRIPTION: Enhanced Golang client implementation showing how to pass metadata between server and client in gRPC calls.\nSOURCE: https://github.com/spiral/docs/blob/3.14/docs/en/grpc/client.md#2025-04-20_snippet_4\n\nLANGUAGE: golang\nCODE:\n```\npackage main\n\nimport (\n\t\"context\"\n\t\"fmt\"\n\t\"log\"\n\n\t\"google.golang.org/grpc\"\n\t\"google.golang.org/grpc/metadata\"\n\t\"pinger\"\n)\n\nfunc main() {\n\t// Set up a connection to the server.\n\tconn, err := grpc.Dial(\"127.0.0.1:9001\", grpc.WithInsecure())\n\tif err != nil {\n\t\tlog.Fatalf(\"did not connect: %v\", err)\n\t}\n\t\n\tdefer conn.Close()\n\n\tclient := pinger.NewPingerClient(conn)\n\t\n\t// attach value to the server\n\tctx := metadata.AppendToOutgoingContext(context.Background(), \"client-key\", \"client-value\")\n\n\tvar header metadata.MD\n\t\n\t// Call the ping method.\n\tresponse, err := client.Ping(ctx, &pinger.PingRequest{\n\t\tUrl: \"https://google.com\",\n\t}, grpc.Header(&header))\n\n\tif err != nil {\n\t\tlog.Fatalf(\"error calling ping: %v\", err)\n\t}\n\n\t// Print the HTTP status code.\n\tfmt.Println(response.StatusCode)\n}\n```\n\n----------------------------------------\n\nTITLE: Running Scheduler in Foreground with RoadRunner\nDESCRIPTION: Command to run the scheduler in the foreground using RoadRunner.\nSOURCE: https://github.com/spiral/docs/blob/3.14/docs/en/advanced/scheduler.md#2025-04-20_snippet_4\n\nLANGUAGE: terminal\nCODE:\n```\nphp app.php schedule:work\n```\n\n----------------------------------------\n\nTITLE: Getting Available Locales Example\nDESCRIPTION: Controller example showing how to retrieve available locales using TranslatorInterface\nSOURCE: https://github.com/spiral/docs/blob/3.14/docs/en/advanced/i18n.md#2025-04-20_snippet_3\n\nLANGUAGE: php\nCODE:\n```\nnamespace App\\Endpoint\\Web;\n\nuse Spiral\\Translator\\TranslatorInterface;\n\nclass HomeController\n{\n    public function index(TranslatorInterface $translator): void\n    {\n        dump($translator->getCatalogueManager()->getLocales());\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Handling Unknown Values in Select Filter in PHP\nDESCRIPTION: Demonstrates how the Select filter handles an unknown value, resulting in a null filter.\nSOURCE: https://github.com/spiral/docs/blob/3.14/docs/zh-CN/component/data-grid.md#2025-04-20_snippet_2\n\nLANGUAGE: php\nCODE:\n```\nuse Spiral\\DataGrid\\Specification\\Filter;\n\n$select = new Filter\\Select([\n    'one'  => new Filter\\Equals('name', 'value'),\n    'two'  => new Filter\\Any(\n        new Filter\\Equals('price', 2),\n        new Filter\\Gt('quantity', 5)\n    ),\n    'three' => new Filter\\Equals('email', 'email@example.com'),\n]);\n\n// 过滤器将等于 null\n$filter = $select->withValue('four');\n```\n\n----------------------------------------\n\nTITLE: Container Access in View Template\nDESCRIPTION: Example demonstrating how to access the container and its services within a view template using $this->container.\nSOURCE: https://github.com/spiral/docs/blob/3.14/docs/en/views/plain.md#2025-04-20_snippet_4\n\nLANGUAGE: php\nCODE:\n```\nHello world, <?= $name ?>!\n\n<?php dump($this->container->get(MyService::class)); ?>\n```\n\n----------------------------------------\n\nTITLE: Installing AWS SDK for PHP using Composer\nDESCRIPTION: Command to install the aws/aws-sdk-php package using Composer, which is required for using the S3 URI resolver.\nSOURCE: https://github.com/spiral/docs/blob/3.14/docs/en/advanced/storage.md#2025-04-20_snippet_34\n\nLANGUAGE: terminal\nCODE:\n```\ncomposer require aws/aws-sdk-php ^3.0\n```\n\n----------------------------------------\n\nTITLE: Rendered Basic PHP Class Output\nDESCRIPTION: Shows the output of the basic class declaration render.\nSOURCE: https://github.com/spiral/docs/blob/3.14/docs/en/component/reactor.md#2025-04-20_snippet_2\n\nLANGUAGE: php\nCODE:\n```\nclass MyClass\n{\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Search-Only Grid Filter\nDESCRIPTION: Simple implementation of grid filter with only search functionality enabled.\nSOURCE: https://github.com/spiral/docs/blob/3.14/docs/en/keeper/components.md#2025-04-20_snippet_5\n\nLANGUAGE: xhtml\nCODE:\n```\n<ui:grid url=\"@action('users.list', inject('params', []))\" namespace=\"main\">\n    <grid:filter search=\"true\"/>\n</ui:grid>\n```\n\n----------------------------------------\n\nTITLE: Configuring Page Paginator in GridSchema\nDESCRIPTION: Example of setting up a page-based paginator in a GridSchema with a default limit and allowed limit values. This paginator handles page number and items per page specifications.\nSOURCE: https://github.com/spiral/docs/blob/3.14/docs/en/component/data-grid.md#2025-04-20_snippet_14\n\nLANGUAGE: php\nCODE:\n```\nuse Spiral\\DataGrid\\GridSchema;\nuse Spiral\\DataGrid\\Specification\\Pagination\\PagePaginator;\n\n$schema = new GridSchema();\n$schema->setPaginator(new PagePaginator(10, [25, 50, 100, 500]));\n// ...\n```\n\n----------------------------------------\n\nTITLE: Adding Bootloader to Kernel Using Method Approach\nDESCRIPTION: Demonstrates how to add the AppBootloader to the list of bootloaders in the application kernel using the defineBootloaders method approach, which is one way to configure bootloaders in Spiral.\nSOURCE: https://github.com/spiral/docs/blob/3.14/docs/zh-CN/grpc/client.md#2025-04-20_snippet_2\n\nLANGUAGE: php\nCODE:\n```\npublic function defineBootloaders(): array\n{\n    return [\n        // ...\n        \\App\\Application\\Bootloader\\AppBootloader::class,\n        // ...\n    ];\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Broadcasting Bootloader in Kernel\nDESCRIPTION: Adding the BroadcastingBootloader to the application's kernel to enable broadcasting functionality\nSOURCE: https://github.com/spiral/docs/blob/3.14/docs/zh-CN/websockets/broadcasting.md#2025-04-20_snippet_0\n\nLANGUAGE: php\nCODE:\n```\npublic function defineBootloaders(): array\n{\n    return [\n        // ...\n        \\Spiral\\Broadcasting\\Bootloader\\BroadcastingBootloader::class,\n        // ...\n    ];\n}\n```\n\nLANGUAGE: php\nCODE:\n```\nprotected const LOAD = [\n    // ...\n    \\Spiral\\Broadcasting\\Bootloader\\BroadcastingBootloader::class,\n    // ...\n];\n```\n\n----------------------------------------\n\nTITLE: Setting Database Environment Variables in Spiral\nDESCRIPTION: This snippet shows how to set up environment variables for the PostgreSQL database connection in the .env file.\nSOURCE: https://github.com/spiral/docs/blob/3.14/docs/en/cookbook/simple-chat.md#2025-04-20_snippet_7\n\nLANGUAGE: dotenv\nCODE:\n```\nDB_HOST=localhost\nDB_NAME=homestead\nDB_USER=homestead\nDB_PASSWORD=secret\nDB_PORT=5432\n```\n\n----------------------------------------\n\nTITLE: Getting Session ID in Spiral PHP\nDESCRIPTION: Demonstrates how to retrieve the session ID when the session is resumed.\nSOURCE: https://github.com/spiral/docs/blob/3.14/docs/en/basics/session.md#2025-04-20_snippet_6\n\nLANGUAGE: php\nCODE:\n```\ndump($this->session->getID());\n```\n\n----------------------------------------\n\nTITLE: Auth Token Storage Configuration in PHP\nDESCRIPTION: Demonstrates how to configure the default token storage mechanism in the auth.php configuration file.\nSOURCE: https://github.com/spiral/docs/blob/3.14/docs/en/security/authentication.md#2025-04-20_snippet_3\n\nLANGUAGE: php\nCODE:\n```\nreturn [\n    'defaultStorage' => env('AUTH_TOKEN_STORAGE', 'session'),\n    // ... other storage options\n]\n```\n\n----------------------------------------\n\nTITLE: Installing spiral/filters-bridge package via Composer\nDESCRIPTION: Command to install the spiral/filters-bridge package using Composer. This package provides support for request validation, composite validation, error message mapping, and locations.\nSOURCE: https://github.com/spiral/docs/blob/3.14/docs/en/filters/bridge.md#2025-04-20_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ncomposer require spiral/filters-bridge\n```\n\n----------------------------------------\n\nTITLE: Injecting Bootloader Dependencies in PHP\nDESCRIPTION: Demonstrates the new automatic bootloading of dependencies declared in init and boot methods, replacing the need for explicit DEPENDENCIES constant.\nSOURCE: https://github.com/spiral/docs/blob/3.14/docs/en/cookbook/migration-from-v2.md#2025-04-20_snippet_7\n\nLANGUAGE: php\nCODE:\n```\npublic function boot(AttributesBootloader $bootloader)\n// or\npublic function init(AttributesBootloader $bootloader)\n```\n\n----------------------------------------\n\nTITLE: Using Autowire Binding\nDESCRIPTION: Demonstrates how to use Autowire binding for automatic dependency resolution.\nSOURCE: https://github.com/spiral/docs/blob/3.14/docs/zh-CN/container/configuration.md#2025-04-20_snippet_12\n\nLANGUAGE: php\nCODE:\n```\nuse Spiral\\Core\\Config\\Autowire;\nuse Spiral\\Core\\Container\\Autowire as AutowireAlias;\n\n$container->bind(MyClass::class, new Autowire(\n    autowire: new AutowireAlias(MyClass::class, ['foo' => 'bar']),\n    singleton: true\n));\n```\n\n----------------------------------------\n\nTITLE: Configuring Events Component in Spiral\nDESCRIPTION: Example configuration file for the Events component, showing how to set up listeners and processors. It demonstrates registering event listeners with and without additional options.\nSOURCE: https://github.com/spiral/docs/blob/3.14/docs/zh-CN/advanced/events.md#2025-04-20_snippet_1\n\nLANGUAGE: php\nCODE:\n```\nuse App\\Listener\\RouteListener;\nuse Spiral\\Events\\Config\\EventListener;\nuse Spiral\\Events\\Processor\\AttributeProcessor;\nuse Spiral\\Events\\Processor\\ConfigProcessor;\nuse Spiral\\Router\\Event\\RouteMatched;\n\nreturn [\n    'listeners' => [\n        RouteMatched::class => [\n            RouteListener::class,\n        ],\n        RouteMatched::class => [\n            new EventListener(\n                listener: RouteListener::class,\n                method: 'onRouteMatched',\n                priority: 1\n            ),\n        ],\n    ],\n    'processors' => [\n        AttributeProcessor::class,\n        ConfigProcessor::class,\n    ],\n];\n```\n\n----------------------------------------\n\nTITLE: Registering Discoverer Bootloader Using Method\nDESCRIPTION: Code snippet showing how to register the DiscovererBootloader in a Spiral application by adding it to the system bootloaders array using the defineSystemBootloaders method.\nSOURCE: https://github.com/spiral/docs/blob/3.14/docs/en/component/discoverer.md#2025-04-20_snippet_1\n\nLANGUAGE: php\nCODE:\n```\npublic function defineSystemBootloaders(): array\n{\n    return [\n        // ...\n        \\Spiral\\Discoverer\\DiscovererBootloader::class,\n    ];\n}\n```\n\n----------------------------------------\n\nTITLE: Invalid Credentials Exception Class\nDESCRIPTION: Custom exception class for handling invalid login credentials.\nSOURCE: https://github.com/spiral/docs/blob/3.14/docs/en/cookbook/simple-chat.md#2025-04-20_snippet_32\n\nLANGUAGE: php\nCODE:\n```\nnamespace App\\Application\\Exception;\n\nfinal class InvalidCredentialsException extends \\Exception\n{\n\n}\n```\n\n----------------------------------------\n\nTITLE: JSON Structure for Nested Filter Request\nDESCRIPTION: Shows the expected JSON format for a request that will be processed by a ProfileFilter with a nested AddressFilter.\nSOURCE: https://github.com/spiral/docs/blob/3.14/docs/en/filters/composite.md#2025-04-20_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"name\": \"Antony\",\n  \"address\": {\n    \"city\": \"San Francisco\",\n    \"address\": \"Address\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Declaring a PHP Trait\nDESCRIPTION: Demonstrates how to create a trait declaration with methods and comments.\nSOURCE: https://github.com/spiral/docs/blob/3.14/docs/en/component/reactor.md#2025-04-20_snippet_21\n\nLANGUAGE: php\nCODE:\n```\n$trait = new TraitDeclaration('MyTrait');\n$trait\n    ->setComment('Some trait')\n    ->addMethod('myMethod')\n        ->setPublic()\n        ->setReturnType('void');\n\ndump((string) $trait);\n```\n\n----------------------------------------\n\nTITLE: Broadcasting Configuration Environment Setup\nDESCRIPTION: Configuring the default broadcasting connection using environment variables\nSOURCE: https://github.com/spiral/docs/blob/3.14/docs/zh-CN/websockets/broadcasting.md#2025-04-20_snippet_1\n\nLANGUAGE: dotenv\nCODE:\n```\n# Broadcasting\nBROADCAST_CONNECTION=log\n```\n\n----------------------------------------\n\nTITLE: Rendered Namespaced PHP Class Output\nDESCRIPTION: Shows the output of a class declaration inside a namespace.\nSOURCE: https://github.com/spiral/docs/blob/3.14/docs/en/component/reactor.md#2025-04-20_snippet_14\n\nLANGUAGE: php\nCODE:\n```\nnamespace App\\Some;\n\nclass MyClass\n{\n}\n```\n\n----------------------------------------\n\nTITLE: Adding Lock Bootloader to Kernel (Method Approach)\nDESCRIPTION: Shows how to add the LockBootloader to the list of bootloaders in the Kernel class using the defineBootloaders method.\nSOURCE: https://github.com/spiral/docs/blob/3.14/docs/en/advanced/locks.md#2025-04-20_snippet_0\n\nLANGUAGE: php\nCODE:\n```\npublic function defineBootloaders(): array\n{\n    return [\n        // ...\n        \\Spiral\\RoadRunnerBridge\\Bootloader\\LockBootloader::class,\n        // ...\n    ];\n}\n```\n\n----------------------------------------\n\nTITLE: Viewing Database Table Structure in Spiral\nDESCRIPTION: Command to check the structure of the 'comments' table after migrations, showing foreign keys and column definitions. This helps verify that the relations were properly established in the database.\nSOURCE: https://github.com/spiral/docs/blob/3.14/docs/en/cookbook/quick-start.md#2025-04-20_snippet_25\n\nLANGUAGE: terminal\nCODE:\n```\nphp app.php db:table comments\n```\n\n----------------------------------------\n\nTITLE: Defining Console Argument Attribute in PHP\nDESCRIPTION: Creates a custom Argument attribute for mapping console command arguments to filter properties.\nSOURCE: https://github.com/spiral/docs/blob/3.14/docs/en/cookbook/console-validation.md#2025-04-20_snippet_3\n\nLANGUAGE: php\nCODE:\n```\nnamespace App\\Application\\Console\\Attribute;\n\nuse Spiral\\Attributes\\NamedArgumentConstructor;\nuse Spiral\\Filters\\Attribute\\Input\\AbstractInput;\nuse Spiral\\Filters\\InputInterface;\n\n#[\\Attribute(\\Attribute::TARGET_PROPERTY), NamedArgumentConstructor]\nfinal class Argument extends AbstractInput\n{\n    public function __construct(\n        public readonly ?string $key = null,\n    ) {\n    }\n\n    public function getValue(InputInterface $input, \\ReflectionProperty $property): mixed\n    {\n        return $input->getValue('argument', $this->getKey($property));\n    }\n\n    public function getSchema(\\ReflectionProperty $property): string\n    {\n        return 'argument:' . $this->getKey($property);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Factories and Seeders via CLI\nDESCRIPTION: Command line instructions for generating factory and seeder class files using Spiral CLI commands.\nSOURCE: https://github.com/spiral/docs/blob/3.14/docs/en/testing/database.md#2025-04-20_snippet_15\n\nLANGUAGE: terminal\nCODE:\n```\nphp app.php create:factory UserFactory\n```\n\nLANGUAGE: terminal\nCODE:\n```\nphp app.php create:seeder UserSeeder\n```\n\n----------------------------------------\n\nTITLE: Declaring Sitemap Structure in Spiral NavigationBootloader\nDESCRIPTION: This code snippet shows how to declare a sitemap structure using the SitemapBootloader class. It demonstrates creating nested groups, links, and views with various attributes such as icons.\nSOURCE: https://github.com/spiral/docs/blob/3.14/docs/en/keeper/sitemap.md#2025-04-20_snippet_9\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\ndeclare(strict_types=1);\n\nuse Spiral\\Keeper\\Bootloader\\SitemapBootloader;\nuse Spiral\\Keeper\\Module\\Sitemap;\n\nclass NavigationBootloader extends SitemapBootloader\n{\n    public function declareSitemap(Sitemap $sitemap): void\n    {\n        // [root]->[link]\n        $sitemap->link('dashboard.index', 'Dashboard', ['icon' => 'home']);\n\n        $group = $sitemap->group('users', 'Users and Groups', ['icon' => '...']);\n        if ($group !== null) {\n            // [root]->[users group]\n            $users = $group->link('users.index', 'Users', ['icon' => '...']);\n            if ($users !== null) {\n                // [root]->[users group]->[view]\n                $users->view('users.create', 'Create User');\n                $users->view('users.edit', 'Edit User');\n            }\n            // [root]->[users group]\n            $group->link('groups.index', 'Groups', ['icon' => '...']);\n        }\n        // ...\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a Simple Bootloader with Scaffold Command\nDESCRIPTION: Command to generate a new bootloader class using Spiral's scaffolding functionality.\nSOURCE: https://github.com/spiral/docs/blob/3.14/docs/en/framework/bootloaders.md#2025-04-20_snippet_0\n\nLANGUAGE: terminal\nCODE:\n```\nphp app.php create:bootloader GithubClient\n```\n\n----------------------------------------\n\nTITLE: 访问会话接口 - PHP\nDESCRIPTION: 演示如何在控制器中访问和使用 SessionInterface。这个示例展示了如何恢复会话并获取会话 ID。\nSOURCE: https://github.com/spiral/docs/blob/3.14/docs/zh-CN/basics/session.md#2025-04-20_snippet_0\n\nLANGUAGE: php\nCODE:\n```\nuse Spiral\\Session\\SessionInterface;\n\n// ...\n\npublic function index(SessionInterface $session): void\n{\n    $session->resume();\n    dump($session->getID());\n}\n```\n\n----------------------------------------\n\nTITLE: Initializing FakeEventDispatcher with Specific Event Classes in PHP\nDESCRIPTION: This code demonstrates how to initialize a fake event dispatcher that only records specific event classes. It's useful for testing particular parts of code that dispatch certain events.\nSOURCE: https://github.com/spiral/docs/blob/3.14/docs/en/testing/event.md#2025-04-20_snippet_1\n\nLANGUAGE: php\nCODE:\n```\nprivate \\Spiral\\Testing\\Events\\FakeEventDispatcher $events;\n    \nprotected function setUp(): void\n{\n    parent::setUp();\n    $this->events = $this->fakeEventDispatcher([UserRegistered::class]);\n}\n```\n\n----------------------------------------\n\nTITLE: Default Controller Action Configuration in PHP\nDESCRIPTION: Demonstrates how to configure default controller actions in the routing configuration.\nSOURCE: https://github.com/spiral/docs/blob/3.14/docs/en/keeper/routing.md#2025-04-20_snippet_5\n\nLANGUAGE: php\nCODE:\n```\nreturn [\n     'routeDefaults' => ['controller' => 'App\\Admin\\Controller', 'action' => 'list'],\n];\n```\n\n----------------------------------------\n\nTITLE: Standalone Usage of Stempler for HTML Processing in PHP\nDESCRIPTION: Demonstrates how to use Stempler independently to process HTML content. It sets up the parser, adds a custom visitor, and compiles the processed template.\nSOURCE: https://github.com/spiral/docs/blob/3.14/docs/en/views/stempler.md#2025-04-20_snippet_57\n\nLANGUAGE: php\nCODE:\n```\nuse Spiral\\Stempler;\n\n$parser = new Stempler\\Parser();\n$parser->addSyntax(\n    new Stempler\\Lexer\\Grammar\\HTMLGrammar(), \n    new Stempler\\Parser\\Syntax\\HTMLSyntax()\n);\n\n$template = $parser->parse(new Stempler\\Lexer\\StringStream(\"<BODY>content</BODY>\"));\n\n$traverser = new Stempler\\Traverser();\n$traverser->addVisitor(new CustomVisitor());\n\n$template->nodes = $traverser->traverse($template->nodes);\n\n$compiler = new Stempler\\Compiler();\n$compiler->addRenderer(new Stempler\\Compiler\\Renderer\\CoreRenderer());\n$compiler->addRenderer(new Stempler\\Compiler\\Renderer\\HTMLRenderer());\n\ndump($compiler->compile($template)->getContent());\n```\n\n----------------------------------------\n\nTITLE: Configuring Bootloader via Constant\nDESCRIPTION: Adding ProfilerBootloader to the application kernel using a constant definition.\nSOURCE: https://github.com/spiral/docs/blob/3.14/docs/en/basics/debug.md#2025-04-20_snippet_13\n\nLANGUAGE: php\nCODE:\n```\nprotected const LOAD = [\n    // ...\n    \\Spiral\\Profiler\\ProfilerBootloader::class,\n    // ...\n];\n```\n\n----------------------------------------\n\nTITLE: Adding Validation Rules to Console Command Filter in PHP\nDESCRIPTION: Example of adding validation rules to a filter for console command input using the FilterDefinition interface.\nSOURCE: https://github.com/spiral/docs/blob/3.14/docs/zh-CN/cookbook/console-validation.md#2025-04-20_snippet_7\n\nLANGUAGE: PHP\nCODE:\n```\nuse App\\Application\\Console\\Attribute\\Argument;\nuse App\\Application\\Console\\Attribute\\Option;\nuse Spiral\\Filters\\Model\\Filter;\nuse Spiral\\Filters\\Model\\FilterDefinitionInterface;\nuse Spiral\\Filters\\Model\\HasFilterDefinition;\nuse Spiral\\Validator\\FilterDefinition;\n\nclass UserRegisterFilter extends Filter implements HasFilterDefinition\n{\n    #[Argument]\n    public string $username;\n\n    #[Argument]\n    public string $email;\n\n    #[Option]\n    public bool $admin = false;\n\n    #[Option(key: 'send-verification-email')]\n    public bool $sendVerificationEmail = false;\n\n    public function filterDefinition(): FilterDefinitionInterface\n    {\n        return new FilterDefinition([\n            'username' => ['required', 'string', ['string::longer', 3], ['string::shorter', 32]],\n            'email' => ['required', 'email'],\n        ]);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Incorrect Usage of Scoped Instances in Singleton Controllers in PHP\nDESCRIPTION: This example shows an incorrect approach where a scoped instance (UserContext) is directly injected into a controller. This is not allowed as it will cause the controller to lock on the first scope value.\nSOURCE: https://github.com/spiral/docs/blob/3.14/docs/en/container/scopes.md#2025-04-20_snippet_7\n\nLANGUAGE: php\nCODE:\n```\nclass HomeController\n{\n    public function __construct(\n        private readonly UserContext $userContext // <====== !!!not allowed!!!\n    ) {\n    }\n    \n    public function index(): void\n    {\n        dump($this->userContext);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Temporal Cloud in PHP\nDESCRIPTION: PHP configuration for connecting to Temporal Cloud with secure connection and specific namespace.\nSOURCE: https://github.com/spiral/docs/blob/3.14/docs/en/temporal/configuration.md#2025-04-20_snippet_10\n\nLANGUAGE: php\nCODE:\n```\nuse Spiral\\TemporalBridge\\Config\\TlsConfig;\nuse Spiral\\TemporalBridge\\Config\\ConnectionConfig;\nuse Spiral\\TemporalBridge\\Config\\ClientConfig;\nuse Temporal\\Client\\ClientOptions;\n\nreturn [\n    'client' => 'production',\n    'clients' => [\n        'production' => new ClientConfig(\n            connection: new ConnectionConfig(\n                address: 'foo-bar-default.baz.tmprl.cloud:7233',\n                tls: new TlsConfig(\n                    privateKey: '/my-project.key',\n                    certChain: '/my-project.pem',\n                ),\n            ),\n            options: (new ClientOptions())\n                ->withNamespace('foo-bar-default.baz'),\n    ],\n    // ...\n];\n```\n\n----------------------------------------\n\nTITLE: Adding Scoped Directories via Bootloader in PHP\nDESCRIPTION: Shows how to add scoped directories for the Tokenizer using the TokenizerBootloader in a Spiral application's AppBootloader.\nSOURCE: https://github.com/spiral/docs/blob/3.14/docs/en/advanced/tokenizer.md#2025-04-20_snippet_7\n\nLANGUAGE: php\nCODE:\n```\nuse Spiral\\Bootloader\\TokenizerBootloader;\nuse Spiral\\Boot\\DirectoriesInterface;\n\nclass AppBootloader extends Bootloader\n{\n    public function init(DirectoriesInterface $directories, TokenizerBootloader $tokenizer): void\n    {\n        $tokenizer->addScopedDirectory('scopeName', $directories->get('app') . 'Directory');\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Declaring a PHP Enum\nDESCRIPTION: Demonstrates how to declare an enum with cases, constants, and methods.\nSOURCE: https://github.com/spiral/docs/blob/3.14/docs/zh-CN/component/reactor.md#2025-04-20_snippet_9\n\nLANGUAGE: php\nCODE:\n```\n$enum = new EnumDeclaration('MyEnum');\n\n$enum->addCase('First', 'first');\n$enum->addCase('Second', 'second');\n\n$enum\n    ->setType('string')\n    ->addConstant('FOO', 'bar')\n    ->addComment('Description of enum')\n    ->addAttribute('SomeAttribute');\n$enum\n    ->addMethod('getCase')\n    ->setReturnType('string')\n    ->addBody('return self::First->value;');\n\ndump((string) $enum);\n```\n\n----------------------------------------\n\nTITLE: Implementing Job with Exception Reporting\nDESCRIPTION: Example of a job class that uses exception reporting functionality\nSOURCE: https://github.com/spiral/docs/blob/3.14/docs/en/basics/errors.md#2025-04-20_snippet_14\n\nLANGUAGE: php\nCODE:\n```\nnamespace App\\Job;\n\nuse Spiral\\Exceptions\\ExceptionReporterInterface;\n\nfinal class PingSiteJob\n{\n    public function __construct(\n        private PingClient $client,\n        private ExceptionReporterInterface $reporter,\n    ) {\n    }\n\n    public function handle(string $url): void\n    {\n        try {\n            $this->client->ping($url);\n        } catch (\\Throwble $e) {\n            $this->reporter->report($e);\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing EnumValue Filter in PHP\nDESCRIPTION: Shows how to use EnumValue to validate and convert inputs against a predefined set of allowed values.\nSOURCE: https://github.com/spiral/docs/blob/3.14/docs/en/component/data-grid.md#2025-04-20_snippet_42\n\nLANGUAGE: php\nCODE:\n```\nuse Spiral\\DataGrid\\Specification\\Value;\n\n// expects an array of int values\n$value = new Value\\EnumValue(new Value\\IntValue(), 1, '2', 3);\n \n$value->accepts('3'); // true\n$value->accepts(4);   // false\n$value->convert('3'); // 3\n```\n\n----------------------------------------\n\nTITLE: Using Default Property Name with Query Attribute in Spiral Filters\nDESCRIPTION: Example showing how the Query attribute uses the property name as the default key when no explicit key is provided. The attribute will map the query parameter 'login' to the $login property.\nSOURCE: https://github.com/spiral/docs/blob/3.14/docs/en/filters/filter.md#2025-04-20_snippet_12\n\nLANGUAGE: php\nCODE:\n```\nnamespace App\\Endpoint\\Web\\Filter;\n\nuse Spiral\\Filters\\Attribute\\Input\\Query;\nuse Spiral\\Filters\\Model\\Filter;\n\nclass MyFilter extends Filter\n{\n    #[Query]\n    public string $login;\n}\n```\n\n----------------------------------------\n\nTITLE: Retrieving Items from Cache in Spiral\nDESCRIPTION: Demonstrates how to retrieve single and multiple items from the cache using the get and getMultiple methods.\nSOURCE: https://github.com/spiral/docs/blob/3.14/docs/en/basics/cache.md#2025-04-20_snippet_5\n\nLANGUAGE: php\nCODE:\n```\n$data = $this->cache->get('key');\n\n$data = $this->cache->get('key', 'default');\n\n$data = $this->cache->getMultiple(['key', 'other']);\n```\n\n----------------------------------------\n\nTITLE: Embedding Raw PHP in Stempler Templates\nDESCRIPTION: Shows how to embed raw PHP code in Stempler templates using either classic PHP tags or the @php directive.\nSOURCE: https://github.com/spiral/docs/blob/3.14/docs/en/views/stempler.md#2025-04-20_snippet_11\n\nLANGUAGE: php\nCODE:\n```\n@php\n    echo \"hello world\";\n@endphp\n```\n\n----------------------------------------\n\nTITLE: Configuring RoadRunner for Developer Mode\nDESCRIPTION: YAML configuration for RoadRunner to enable debug mode, which uses only one worker and reloads it after every request.\nSOURCE: https://github.com/spiral/docs/blob/3.14/docs/en/cookbook/quick-start.md#2025-04-20_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\nhttp:\n  ...\n  pool:\n    debug: true\n```\n\n----------------------------------------\n\nTITLE: Implementing NotEmpty Filter in PHP\nDESCRIPTION: Shows how to use NotEmpty to wrap another value filter and ensure that the input is not empty before validation.\nSOURCE: https://github.com/spiral/docs/blob/3.14/docs/en/component/data-grid.md#2025-04-20_snippet_50\n\nLANGUAGE: php\nCODE:\n```\nuse Spiral\\DataGrid\\Specification\\Value;\n\n$int = new Value\\IntValue();\n$notEmpty = new Value\\NotEmpty($int);\n\n$int->accepts(0);      // true\n$notEmpty->accepts(0); // false\n```\n\n----------------------------------------\n\nTITLE: Enabling Validator Bootloader (Method Approach)\nDESCRIPTION: Adding the ValidatorBootloader to the bootloaders list using the defineBootloaders method in the application kernel.\nSOURCE: https://github.com/spiral/docs/blob/3.14/docs/en/validation/spiral.md#2025-04-20_snippet_1\n\nLANGUAGE: php\nCODE:\n```\npublic function defineBootloaders(): array\n{\n    return [\n        // ...\n        \\Spiral\\Validator\\Bootloader\\ValidatorBootloader::class,\n        // ...\n    ];\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Up Storage Test Class in PHP\nDESCRIPTION: Example of setting up a test class with fake storage bucket for testing file operations. Shows basic structure and assertion example for file creation.\nSOURCE: https://github.com/spiral/docs/blob/3.14/docs/en/testing/storage.md#2025-04-20_snippet_0\n\nLANGUAGE: php\nCODE:\n```\nuse Tests\\TestCase;\n\nfinal class UserServiceTest extends TestCase\n{\n    private \\Spiral\\Testing\\Storage\\FakeBucket $bucket;\n\n    protected function setUp(): void\n    {\n        parent::setUp();\n        $this->bucket = $this->fakeStorage()->bucket('avatars');\n    }\n\n\n    public function testUserShouldBeRegistered(): void\n    {\n        // Perform user registration ...\n\n        $this->bucket->assertCreated('avatars/john_smith.jpg');\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Adding Traits to a PHP Class\nDESCRIPTION: Shows how to add a trait to a class declaration.\nSOURCE: https://github.com/spiral/docs/blob/3.14/docs/zh-CN/component/reactor.md#2025-04-20_snippet_4\n\nLANGUAGE: php\nCODE:\n```\n$class = new ClassDeclaration('MyClass');\n\n$class->addTrait(PrototypeTrait::class);\n\ndump((string) $class);\n```\n\n----------------------------------------\n\nTITLE: Adding Constants to a PHP Class\nDESCRIPTION: Demonstrates how to add a constant to a class with modifiers and attributes.\nSOURCE: https://github.com/spiral/docs/blob/3.14/docs/zh-CN/component/reactor.md#2025-04-20_snippet_3\n\nLANGUAGE: php\nCODE:\n```\n$class = new ClassDeclaration('MyClass');\n\n$class->addConstant('MY_CONSTANT', 'default')\n    ->setPublic()\n    ->setFinal()\n    ->addAttribute('SomeAttribute')\n    ->setComment(['My constant']);\n\ndump((string) $class);\n```\n\n----------------------------------------\n\nTITLE: Broadcasting Authorization Configuration\nDESCRIPTION: Configuring topic authorization rules in the broadcasting configuration\nSOURCE: https://github.com/spiral/docs/blob/3.14/docs/zh-CN/websockets/broadcasting.md#2025-04-20_snippet_7\n\nLANGUAGE: php\nCODE:\n```\nreturn [\n    'authorize' => [\n        'path' => env('BROADCAST_AUTHORIZE_PATH'),\n        'topics' => [\n            'topic' => static fn (ServerRequestInterface $request): bool => $request->getHeader('SECRET')[0] == 'secret',\n            'order.{uuid}' => static fn (string $uuid, Actor $actor): bool => $actor->getId() === $id\n        ],\n    ],\n];\n```\n\n----------------------------------------\n\nTITLE: Rendered PHP Class with Method Output\nDESCRIPTION: Shows the output of a class declaration with a method including parameters, return type, and body.\nSOURCE: https://github.com/spiral/docs/blob/3.14/docs/en/component/reactor.md#2025-04-20_snippet_12\n\nLANGUAGE: php\nCODE:\n```\nclass MyClass\n{\n    /**\n     * My method\n     */\n    #[SomeAttribute]\n    final public function ping(?string $a = null): ?string\n    {\n        return $a;\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Registering Centrifugo Bootloader in Spiral Kernel (Method Approach)\nDESCRIPTION: Shows how to register the CentrifugoBootloader in the Spiral application kernel using the defineBootloaders method.\nSOURCE: https://github.com/spiral/docs/blob/3.14/docs/en/websockets/configuration.md#2025-04-20_snippet_0\n\nLANGUAGE: php\nCODE:\n```\npublic function defineBootloaders(): array\n{\n    return [\n        // ...\n        \\Spiral\\RoadRunnerBridge\\Bootloader\\CentrifugoBootloader::class,\n        // ...\n    ];\n}\n```\n\n----------------------------------------\n\nTITLE: Creating LoginController Scaffold in Spiral Framework\nDESCRIPTION: Terminal command to create a controller with login-related actions. The -a option pre-generates controller actions for loginForm and login, while -p pre-loads prototype extensions.\nSOURCE: https://github.com/spiral/docs/blob/3.14/docs/zh-CN/cookbook/simple-chat.md#2025-04-20_snippet_13\n\nLANGUAGE: terminal\nCODE:\n```\nphp app.php create:controller login -a loginForm -a login -p\n```\n\n----------------------------------------\n\nTITLE: Reading Function Metadata Examples\nDESCRIPTION: Examples of how to read function metadata using the ReaderInterface methods.\nSOURCE: https://github.com/spiral/docs/blob/3.14/docs/en/advanced/attributes.md#2025-04-20_snippet_6\n\nLANGUAGE: php\nCODE:\n```\n$reflection = new ReflectionMethod(RequestData::class, 'getEmail');\n\n$attributes = $reader->getFunctionMetadata($reflection); \n// returns iterable<object>\n```\n\nLANGUAGE: php\nCODE:\n```\n$reflection = new ReflectionMethod(RequestData::class, 'getEmail');\n\n$attributes = $reader->getPropertyMetadata($reflection, DTOGetter::class); \n// returns iterable<DTOGetter>\n```\n\nLANGUAGE: php\nCODE:\n```\n$reflection = new ReflectionMethod(RequestData::class, 'getEmail');\n\n$getter = $reader->firstFunctionMetadata($reflection, DTOGetter::class); \n// returns DTOGetter|null\n```\n\n----------------------------------------\n\nTITLE: Formatted Console Output\nDESCRIPTION: Example of writing formatted output using sprintf compatible method.\nSOURCE: https://github.com/spiral/docs/blob/3.14/docs/en/console/commands.md#2025-04-20_snippet_10\n\nLANGUAGE: php\nCODE:\n```\n$this->sprintf('Hello, <comment>%s</comment>', $name);\n```\n\n----------------------------------------\n\nTITLE: Invoking Class Methods with InvokerInterface in PHP\nDESCRIPTION: Example of using InvokerInterface to invoke methods on an object with dependency injection. The Handler class constructor receives an InvokerInterface instance and uses it to run methods with specified parameters.\nSOURCE: https://github.com/spiral/docs/blob/3.14/docs/en/container/overview.md#2025-04-20_snippet_13\n\nLANGUAGE: php\nCODE:\n```\nuse Spiral\\Core\\InvokerInterface;\n\nabstract class Handler\n{\n    public function __construct(\n        protected readonly InvokerInterface $invoker\n    ) {\n    }\n\n    public function run(array $params): bool\n    {\n        return $this->invoker->invoke([$this, 'do'], $params)\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing RoadRunner Ticker Plugin in Go\nDESCRIPTION: Complete Go implementation of the ticker plugin service for RoadRunner. It creates a worker pool and sends periodic payloads to PHP workers.\nSOURCE: https://github.com/spiral/docs/blob/3.14/docs/en/cookbook/custom-dispatcher.md#2025-04-20_snippet_2\n\nLANGUAGE: go\nCODE:\n```\npackage ticker\n\nimport (\n\t\"context\"\n\t\"fmt\"\n\t\"sync\"\n\t\"time\"\n\n\t\"github.com/roadrunner-server/errors\"\n\t\"github.com/roadrunner-server/sdk/v3/payload\"\n\t\"github.com/roadrunner-server/sdk/v3/pool\"\n\t\"github.com/roadrunner-server/sdk/v3/pool/static_pool\"\n\t\"github.com/roadrunner-server/sdk/v3/worker\"\n\t\"go.uber.org/zap\"\n)\n\ntype Configurer interface {\n\t// UnmarshalKey takes a single key and unmarshal it into a Struct.\n\tUnmarshalKey(name string, out any) error\n\n\t// Has checks if config section exists.\n\tHas(name string) bool\n}\n\n// Server creates workers for the application.\ntype Server interface {\n\tNewPool(ctx context.Context, cfg *pool.Config, env map[string]string, _ *zap.Logger) (*static_pool.Pool, error)\n}\n\ntype Pool interface {\n\t// Workers returns worker list associated with the pool.\n\tWorkers() (workers []*worker.Process)\n\n\t// Exec payload\n\tExec(ctx context.Context, p *payload.Payload) (*payload.Payload, error)\n\n\t// Reset kill all workers inside the watcher and replaces with new\n\tReset(ctx context.Context) error\n\n\t// Destroy all underlying stack (but let them to complete the task).\n\tDestroy(ctx context.Context)\n}\n\nconst (\n\trrMode     string = \"RR_MODE\"\n\tpluginName string = \"ticker\"\n)\n\ntype Plugin struct {\n\tmu     sync.RWMutex\n\tcfg    *Config\n\tserver Server\n\tstopCh chan struct{}\n\tpool   Pool\n}\n\nfunc (p *Plugin) Init(cfg Configurer, server Server) error {\n\t// If config file doesn't contain plugin section, ignore it\n    if !cfg.Has(pluginName) {\n\t\treturn errors.E(errors.Disabled)\n\t}\n\n\t// read plugin config\n\terr := cfg.UnmarshalKey(pluginName, &p.cfg)\n\tif err != nil {\n\t\treturn err\n\t}\n\n\tp.cfg.InitDefaults()\n\n\tp.stopCh = make(chan struct{}, 1)\n\tp.server = server\n\n\treturn nil\n}\n\nfunc (p *Plugin) Serve() chan error {\n\terrCh := make(chan error, 1)\n\n\tvar err error\n\tp.mu.Lock()\n    // Create workers pool\n\tp.pool, err = p.server.NewPool(context.Background(), p.cfg.Pool, map[string]string{rrMode: pluginName}, nil)\n\tp.mu.Unlock()\n\n\tif err != nil {\n\t\terrCh <- err\n\t\treturn errCh\n\t}\n\n\tgo func() {\n\t\tvar numTicks = 0\n\t\tvar lastTick time.Time\n        // Be careful with ticker! You should always stop it\n\t\tticker := time.NewTicker(p.cfg.Interval)\n\t\tdefer ticker.Stop()\n\n\t\tfor {\n\t\t\tselect {\n\t\t\tcase <-p.stopCh:\n\t\t\t\treturn\n\t\t\tcase <-ticker.C:\n\t\t\t\tp.mu.RLock()\n\t\t\t\t_, err2 := p.pool.Exec(context.Background(), &payload.Payload{\n\t\t\t\t\tContext: []byte(fmt.Sprintf(`{\"lastTick\": %v}`, lastTick.Unix())),\n\t\t\t\t\tBody:    []byte(fmt.Sprintf(`{\"tick\": %v}`, numTicks)),\n\t\t\t\t})\n\t\t\t\tp.mu.RUnlock()\n\t\t\t\tif err != nil {\n\t\t\t\t\terrCh <- err2\n\t\t\t\t\treturn\n\t\t\t\t}\n\n\t\t\t\tnumTicks++\n\t\t\t\tlastTick = time.Now()\n\t\t\t}\n\t\t}\n\t}()\n\n\treturn errCh\n}\n\nfunc (p *Plugin) Reset() error {\n\tp.mu.RLock()\n\tdefer p.mu.RUnlock()\n\n\tif p.pool == nil {\n\t\treturn nil\n\t}\n\n\tctx, cancel := context.WithTimeout(context.Background(), time.Second*10)\n\tdefer cancel()\n\terr := p.pool.Reset(ctx)\n\tif err != nil {\n\t\treturn err\n\t}\n\n\treturn nil\n}\n\nfunc (p *Plugin) Stop() error {\n\tp.stopCh <- struct{}{}\n\treturn nil\n}\n\nfunc (p *Plugin) Name() string {\n\treturn pluginName\n}\n\nfunc (p *Plugin) Weight() uint {\n\treturn 10\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Session Token Storage in .env\nDESCRIPTION: Shows how to configure the application to use session-based token storage.\nSOURCE: https://github.com/spiral/docs/blob/3.14/docs/en/security/authentication.md#2025-04-20_snippet_7\n\nLANGUAGE: dotenv\nCODE:\n```\nAUTH_TOKEN_STORAGE=session\n```\n\n----------------------------------------\n\nTITLE: Creating Custom Directives in Stempler\nDESCRIPTION: Explains how to create and use custom directives in Stempler. It includes creating a directive class, registering it, and using it in templates.\nSOURCE: https://github.com/spiral/docs/blob/3.14/docs/en/views/stempler.md#2025-04-20_snippet_13\n\nLANGUAGE: php\nCODE:\n```\nnamespace App\\Integration\\Stempler;\n\nuse Spiral\\Stempler\\Directive\\AbstractDirective;\nuse Spiral\\Stempler\\Node\\Dynamic\\Directive;\n\nfinal class DatetimeDirective extends AbstractDirective\n{\n    public function renderDateTime(Directive $directive): string\n    {\n        return '<?php echo date(\"Y-m-d H:i:s\"); ?>';\n    }\n}\n```\n\nLANGUAGE: php\nCODE:\n```\nnamespace App\\Application\\Bootloader;\n\nuse App\\Integration\\Stempler\\DatetimeDirective;\nuse Spiral\\Boot\\Bootloader\\Bootloader;\nuse Spiral\\Stempler\\Bootloader\\StemplerBootloader;\n\nfinal class CustomDirectiveBootloader extends Bootloader\n{\n    public function boot(StemplerBootloader $stempler): void\n    {\n        $stempler->addDirective(DatetimeDirective::class);\n    }\n}\n```\n\nLANGUAGE: php\nCODE:\n```\n<div>\n    @dateTime\n</div>\n```\n\nLANGUAGE: php\nCODE:\n```\n<div>\n    <?php echo date(\"Y-m-d H:i:s\"); ?>\n</div>\n```\n\n----------------------------------------\n\nTITLE: Rendered PHP Class with Interface and Extends Output\nDESCRIPTION: Shows the output of a class declaration with interface implementation and class extension.\nSOURCE: https://github.com/spiral/docs/blob/3.14/docs/en/component/reactor.md#2025-04-20_snippet_10\n\nLANGUAGE: php\nCODE:\n```\nclass MyClass extends Cycle\\ORM\\Select\\Repository implements Countable\n{\n}\n```\n\n----------------------------------------\n\nTITLE: Activating GridBootloader Using Constant in Spiral Application Kernel\nDESCRIPTION: Alternative method to activate the GridBootloader in the Spiral application kernel using a constant.\nSOURCE: https://github.com/spiral/docs/blob/3.14/docs/en/component/data-grid.md#2025-04-20_snippet_2\n\nLANGUAGE: php\nCODE:\n```\nprotected const LOAD = [\n    // ...\n    \\Spiral\\DataGrid\\Bootloader\\GridBootloader::class,\n    // ...\n];\n```\n\n----------------------------------------\n\nTITLE: Guard Namespace Controller Example\nDESCRIPTION: Demonstrates sitemap configuration with guard namespace for permission handling.\nSOURCE: https://github.com/spiral/docs/blob/3.14/docs/en/keeper/sitemap.md#2025-04-20_snippet_6\n\nLANGUAGE: php\nCODE:\n```\n #[Controller(name: \"with\", prefix: \"/with\", namespace: \"first\")]\n #[GuardNamespace(namespace: \"withNamespace\")]\nclass WithNamespaceController\n{\n     #[Link(title: \"A\")]\n    public function a(): void\n    {\n        // permission is \"withNamespace.a\"\n    }\n\n     #[Link(title: \"B\")]\n     #[Guarded(permission: \"permission\")]\n    public function b(): void\n    {\n        // permission is \"withNamespace.permission\"\n    }\n\n     #[Link(title: \"B\", permission: \"methodC\")]\n     #[Guarded(permission: \"permission\")]\n    public function с(): void\n    {\n        // permission is \"withNamespace.methodC\"\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Declaring a PHP Trait\nDESCRIPTION: Demonstrates how to declare a trait with methods.\nSOURCE: https://github.com/spiral/docs/blob/3.14/docs/zh-CN/component/reactor.md#2025-04-20_snippet_11\n\nLANGUAGE: php\nCODE:\n```\n$trait = new TraitDeclaration('MyTrait');\n$trait\n    ->setComment('Some trait')\n    ->addMethod('myMethod')\n        ->setPublic()\n        ->setReturnType('void');\n\ndump((string) $trait);\n```\n\n----------------------------------------\n\nTITLE: Using Global Variables in View Template\nDESCRIPTION: Example of how to use global variables within a view template file.\nSOURCE: https://github.com/spiral/docs/blob/3.14/docs/en/views/basics.md#2025-04-20_snippet_10\n\nLANGUAGE: php\nCODE:\n```\n<!doctype html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta http-equiv=\"X-UA-Compatible\" content=\"ie=edge\">\n    <title>Document</title>\n</head>\n<body>\n    <?=$some_var?>\n\n    <?=$other_var?>\n</body>\n</html>\n```\n\n----------------------------------------\n\nTITLE: Enabling Twig Debug Extension\nDESCRIPTION: PHP code for a custom bootloader that enables the Twig Debug extension and sets the debug option.\nSOURCE: https://github.com/spiral/docs/blob/3.14/docs/en/views/twig.md#2025-04-20_snippet_7\n\nLANGUAGE: php\nCODE:\n```\nnamespace App\\Application\\Bootloader;\n\nuse Spiral\\Boot\\Bootloader\\Bootloader;\nuse Spiral\\Twig\\Bootloader\\TwigBootloader;\nuse Twig\\Extension\\DebugExtension;\n\nfinal class TwigDebugBootloader extends Bootloader\n{\n    public function boot(TwigBootloader $twig)\n    {\n        $twig->addExtension(new DebugExtension());\n        $twig->setOption('debug', true);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Reading Property Metadata Examples\nDESCRIPTION: Examples of how to read property metadata using the ReaderInterface methods.\nSOURCE: https://github.com/spiral/docs/blob/3.14/docs/en/advanced/attributes.md#2025-04-20_snippet_5\n\nLANGUAGE: php\nCODE:\n```\n$reflection = new ReflectionProperty(User::class, 'name');\n\n$attributes = $reader->getPropertyMetadata($reflection); \n// returns iterable<object>\n```\n\nLANGUAGE: php\nCODE:\n```\n$reflection = new ReflectionProperty(User::class, 'name');\n\n$attributes = $reader->getPropertyMetadata($reflection, Column::class); \n// returns iterable<Column>\n```\n\nLANGUAGE: php\nCODE:\n```\n$reflection = new ReflectionProperty(User::class, 'name');\n\n$column = $reader->firstPropertyMetadata($reflection, Column::class); \n// returns Column|null\n```\n\n----------------------------------------\n\nTITLE: Configuring Action Route Target in PHP\nDESCRIPTION: Sets up a route target for a specific controller action. It can include route parameters like 'id'.\nSOURCE: https://github.com/spiral/docs/blob/3.14/docs/en/http/routing.md#2025-04-20_snippet_13\n\nLANGUAGE: php\nCODE:\n```\n$routes->add(name: 'post.show', pattern: '/post/<id:int>')\n    ->action(PostController::class, 'show');\n```\n\n----------------------------------------\n\nTITLE: Binding Scalar Value to Container in PHP\nDESCRIPTION: Shows how to store and retrieve static scalar values within the container using the Scalar DTO.\nSOURCE: https://github.com/spiral/docs/blob/3.14/docs/en/container/configuration.md#2025-04-20_snippet_17\n\nLANGUAGE: php\nCODE:\n```\nuse Spiral\\Core\\Config\\Scalar;\n\n$container->bind('app-path', new Scalar(value: '/var/www/my-app'));\n```\n\n----------------------------------------\n\nTITLE: Class Messages Translation Example\nDESCRIPTION: Example of using class constants for message translation\nSOURCE: https://github.com/spiral/docs/blob/3.14/docs/en/advanced/i18n.md#2025-04-20_snippet_11\n\nLANGUAGE: php\nCODE:\n```\nclass HomeController \n{\n    use TranslatorTrait;\n\n    protected const MESSAGES = [\n        'error'   => '[[An error]]',\n        'success' => '[[Success]]'\n    ];\n\n    public function index(): string\n    {\n        echo $this->say(self::MESSAGES['error']);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Adding SerializerBootloader to Kernel Using Constant\nDESCRIPTION: Code showing how to enable the serializer component by adding SerializerBootloader to the bootloaders list using the LOAD constant.\nSOURCE: https://github.com/spiral/docs/blob/3.14/docs/en/advanced/serializer.md#2025-04-20_snippet_1\n\nLANGUAGE: php\nCODE:\n```\nprotected const LOAD = [\n    // ...\n    \\Spiral\\Serializer\\Bootloader\\SerializerBootloader::class,\n    // ...\n];\n```\n\n----------------------------------------\n\nTITLE: Registering HttpAuthBootloader Using Constant\nDESCRIPTION: Demonstrates how to activate authentication by adding the HttpAuthBootloader to the kernel's protected LOAD constant.\nSOURCE: https://github.com/spiral/docs/blob/3.14/docs/en/security/authentication.md#2025-04-20_snippet_1\n\nLANGUAGE: php\nCODE:\n```\nprotected const LOAD = [\n    // ...\n    \\Spiral\\Bootloader\\Auth\\HttpAuthBootloader::class,\n    // ...\n];\n```\n\n----------------------------------------\n\nTITLE: Multi-level Stack Example with Working Scope\nDESCRIPTION: Shows how stack collectors work across different nesting levels, with push and prepend operations working as long as they're within the active scope of the stack.\nSOURCE: https://github.com/spiral/docs/blob/3.14/docs/en/views/stempler.md#2025-04-20_snippet_30\n\nLANGUAGE: html\nCODE:\n```\n<stack:collect name=\"my-stack\">\n    default content\n</stack:collect>\n\n// stack my-stack is active here\n<div>\n    // and here\n    <stack:prepend name=\"my-stack\">\n        my value\n    </stack:prepend>\n</div>\n```\n\n----------------------------------------\n\nTITLE: Broadcasting Authorization Path Configuration in PHP\nDESCRIPTION: Configuration setup for broadcast authorization endpoint path. Defines the HTTP endpoint for websocket authorization requests.\nSOURCE: https://github.com/spiral/docs/blob/3.14/docs/en/websockets/broadcasting.md#2025-04-20_snippet_13\n\nLANGUAGE: php\nCODE:\n```\nreturn [\n    'authorize' => [\n        'path' => '/pusher/user-auth', // <===============\n        'topics' => [\n            'topic' => static fn (ServerRequestInterface $request): bool => $request->getHeader('SECRET')[0] == 'secret',\n            'order.{uuid}' => static fn (string $uuid, Actor $actor): bool => $actor->getId() === $id\n        ],\n    ],\n];\n```\n\n----------------------------------------\n\nTITLE: Customizing Tokenizer Search Directories via Bootloader in PHP\nDESCRIPTION: Demonstrates how to add additional directories for Tokenizer to search using the TokenizerBootloader in a Spiral application's AppBootloader.\nSOURCE: https://github.com/spiral/docs/blob/3.14/docs/en/advanced/tokenizer.md#2025-04-20_snippet_3\n\nLANGUAGE: php\nCODE:\n```\nuse Spiral\\Bootloader\\TokenizerBootloader;\nuse Spiral\\Boot\\DirectoriesInterface;\n\nclass AppBootloader extends Bootloader\n{\n    public function init(DirectoriesInterface $directories, TokenizerBootloader $tokenizer): void\n    {\n        $tokenizer->addDirectory($directories->get('vendor') . 'spiral/validator/src');\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Registering Custom Input Source in Bootloader for PHP Spiral Framework\nDESCRIPTION: Example of registering the custom ConsoleInput implementation in a bootloader for use with console commands.\nSOURCE: https://github.com/spiral/docs/blob/3.14/docs/zh-CN/cookbook/console-validation.md#2025-04-20_snippet_2\n\nLANGUAGE: PHP\nCODE:\n```\nnamespace App\\Application\\Bootloader;\n\nuse App\\Application\\Console\\ConsoleInput;\nuse Spiral\\Boot\\Bootloader\\Bootloader;\nuse Spiral\\Filters\\InputInterface;\n\nfinal class AppBootloader extends Bootloader\n{\n    protected const SINGLETONS = [\n        InputInterface::class => ConsoleInput::class,\n    ];\n}\n```\n\n----------------------------------------\n\nTITLE: Using a Custom Select Component in Stempler Template\nDESCRIPTION: Demonstrates how to use a custom select component in a Stempler template, passing both the name and values as props.\nSOURCE: https://github.com/spiral/docs/blob/3.14/docs/en/views/stempler.md#2025-04-20_snippet_48\n\nLANGUAGE: html\nCODE:\n```\n<extends:layout.base title=\"Homepage\"/>\n<use:element path=\"partial/select\" as=\"my:select\"/>\n\n<block:content>\n    <my:select name=\"My Select\" values=\"{{ $values }}\"/>\n</block:content>\n```\n\n----------------------------------------\n\nTITLE: Initializing Between Filters in PHP\nDESCRIPTION: Shows how to create Between filters for both field-based and value-based comparisons.\nSOURCE: https://github.com/spiral/docs/blob/3.14/docs/zh-CN/component/data-grid.md#2025-04-20_snippet_3\n\nLANGUAGE: php\nCODE:\n```\nuse Spiral\\DataGrid\\Specification\\Filter;\n\n$fieldBetween  = new Filter\\Between('field', [10, 20]);\n$valueBetween  = new Filter\\ValueBetween('2020 Apr, 10th', ['start_date', 'end_date']);\n```\n\n----------------------------------------\n\nTITLE: Adding Properties to a PHP Class\nDESCRIPTION: Shows how to add a property to a class with various modifiers and attributes.\nSOURCE: https://github.com/spiral/docs/blob/3.14/docs/zh-CN/component/reactor.md#2025-04-20_snippet_2\n\nLANGUAGE: php\nCODE:\n```\n$class = new ClassDeclaration('MyClass');\n\n$class->addProperty('property', 'default')\n    ->setProtected()\n    ->setReadOnly()\n    ->setType('string')\n    ->setComment(['My property.', '@var string'])\n    ->addAttribute('SomeAttribute');\n\ndump((string) $class);\n```\n\n----------------------------------------\n\nTITLE: Conditional Directives Example\nDESCRIPTION: Examples of using conditional directives in Stempler templates\nSOURCE: https://github.com/spiral/docs/blob/3.14/docs/en/views/stempler.md#2025-04-20_snippet_7\n\nLANGUAGE: php\nCODE:\n```\n@if($value === 123)\\n    Hello World\\n@endif\\n\\n@unless($value === 124)\\n    Value is not 124\\n@endunless\\n\\n@switch($value)\\n    @case(123) value is 123 @break\\n    @case(124) value is 124 @break\\n    @case(125) value is 125 @break\\n@endswitch\n```\n\n----------------------------------------\n\nTITLE: Creating Centrifugo Refresh Handler - Terminal Command\nDESCRIPTION: Command to create a new Refresh handler service class for Centrifugo\nSOURCE: https://github.com/spiral/docs/blob/3.14/docs/en/websockets/services.md#2025-04-20_snippet_8\n\nLANGUAGE: terminal\nCODE:\n```\nphp app.php create:centrifugo-handler Refresh -t=refresh\n```\n\n----------------------------------------\n\nTITLE: Installing League Event PSR-14 Implementation\nDESCRIPTION: Terminal command for installing the spiral-packages/league-event package, which provides a PSR-14 compatible event dispatcher.\nSOURCE: https://github.com/spiral/docs/blob/3.14/docs/en/advanced/events.md#2025-04-20_snippet_2\n\nLANGUAGE: terminal\nCODE:\n```\ncomposer require spiral-packages/league-event\n```\n\n----------------------------------------\n\nTITLE: Running Database Seeder to Populate Database\nDESCRIPTION: Terminal command to execute the database seeders, which will populate the database with test data using the factories and seeders defined earlier.\nSOURCE: https://github.com/spiral/docs/blob/3.14/docs/zh-CN/cookbook/simple-chat.md#2025-04-20_snippet_12\n\nLANGUAGE: terminal\nCODE:\n```\nphp app.php db:seed\n```\n\n----------------------------------------\n\nTITLE: Configuring Named Scope Bindings in PHP\nDESCRIPTION: Shows how to configure default bindings for named scopes using the getBinder method and BinderInterface.\nSOURCE: https://github.com/spiral/docs/blob/3.14/docs/zh-CN/container/scopes.md#2025-04-20_snippet_3\n\nLANGUAGE: php\nCODE:\n```\n// Configure `root` scope bindings (the current instance)\n$container->bindSingleton(Interface::class, Implementation::class);\n\n// Configure `request` scope default bindings\n// Prefer way to make many bindings\n$binder = $container->getBinder('request');\n$binder->bindSingleton(Interface::class, Implementation::class);\n$binder->bind(Interface::class, factory(...));\n```\n\n----------------------------------------\n\nTITLE: Implementing an Array of Filters\nDESCRIPTION: Shows how to create a filter that accepts an array of child filters using the NestedArray attribute.\nSOURCE: https://github.com/spiral/docs/blob/3.14/docs/en/filters/composite.md#2025-04-20_snippet_8\n\nLANGUAGE: php\nCODE:\n```\nuse Spiral\\Filters\\Attribute\\Input\\Post;\nuse Spiral\\Filters\\Attribute\\NestedArray;\nuse Spiral\\Filters\\Model\\Filter;\nuse Spiral\\Filters\\Model\\FilterDefinitionInterface;\nuse Spiral\\Filters\\Model\\HasFilterDefinition;\nuse Spiral\\Validator\\FilterDefinition;\n\nfinal class MultipleAddressesFilter extends Filter implements HasFilterDefinition\n{\n    #[Post]\n    public string $name;\n\n    #[NestedArray(class: AddressFilter::class, input: new Post]\n    public array $addresses;\n\n    public function filterDefinition(): FilterDefinitionInterface\n    {\n        return new FilterDefinition(validationRules: [\n            'name' => ['required', 'string'],\n        ]);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Registering Database Token Storage Bootloader Using Method\nDESCRIPTION: Demonstrates how to activate database token storage by adding the AuthTokensBootloader to the kernel's bootloaders list.\nSOURCE: https://github.com/spiral/docs/blob/3.14/docs/en/security/authentication.md#2025-04-20_snippet_8\n\nLANGUAGE: php\nCODE:\n```\npublic function defineBootloaders(): array\n{\n    return [\n        // ...\n        \\Spiral\\Bootloader\\Auth\\HttpAuthBootloader::class,\n        \\Spiral\\Cycle\\Bootloader\\AuthTokensBootloader::class,\n        // ...\n    ];\n}\n```\n\n----------------------------------------\n\nTITLE: Customizing DataGrid Output in JSON\nDESCRIPTION: Demonstrates the default JSON output structure for a DataGrid and how to customize it using options.\nSOURCE: https://github.com/spiral/docs/blob/3.14/docs/en/http/interceptors.md#2025-04-20_snippet_15\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"status\": 200,\n  \"data\": [\n    {\n      ...\n    },\n    {\n      ...\n    },\n    {\n      ...\n    }\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Registering EventsBootloader Using Method in Kernel\nDESCRIPTION: Code example showing how to register the Events component bootloader using the defineBootloaders method in the application kernel.\nSOURCE: https://github.com/spiral/docs/blob/3.14/docs/en/advanced/events.md#2025-04-20_snippet_0\n\nLANGUAGE: php\nCODE:\n```\npublic function defineBootloaders(): array\n{\n    return [\n        // ...\n        \\Spiral\\Events\\Bootloader\\EventsBootloader::class,\n        // ...\n    ];\n}\n```\n\n----------------------------------------\n\nTITLE: Declaring a PHP Function\nDESCRIPTION: Demonstrates how to create a global function declaration with return type, body, attributes, and comments.\nSOURCE: https://github.com/spiral/docs/blob/3.14/docs/en/component/reactor.md#2025-04-20_snippet_19\n\nLANGUAGE: php\nCODE:\n```\n$function = new FunctionDeclaration('myFunction');\n$function\n    ->addBody('return \\'Hello world\\';')\n    ->setReturnType('string')\n    ->addAttribute('SomeAttribute')\n    ->addComment('Some function');\n\ndump((string) $function);\n```\n\n----------------------------------------\n\nTITLE: Creating a PHP Class in a Namespace\nDESCRIPTION: Demonstrates how to create a class within a specific namespace.\nSOURCE: https://github.com/spiral/docs/blob/3.14/docs/zh-CN/component/reactor.md#2025-04-20_snippet_7\n\nLANGUAGE: php\nCODE:\n```\nuse Spiral\\Reactor\\Partial\\PhpNamespace;\n\n$namespace = new PhpNamespace('App\\\\Some');\n$namespace->addClass('MyClass')\n\ndump((string) $namespace);\n```\n\n----------------------------------------\n\nTITLE: Injecting PHP Code in Stempler Component\nDESCRIPTION: Shows how to inject PHP code directly into a Stempler component, allowing for more complex logic within the template.\nSOURCE: https://github.com/spiral/docs/blob/3.14/docs/en/views/stempler.md#2025-04-20_snippet_49\n\nLANGUAGE: html\nCODE:\n```\n<select name=\"${name}\">\n    <?php\n  $selectValues = array_map('strtoupper', inject('values', []));\n  ?>\n    @foreach($selectValues as $key => $label)\n    <option value=\"{{ $key }}\">{{ $label }}</option>\n    @endforeach\n</select>\n```\n\n----------------------------------------\n\nTITLE: JSON Data with Custom Prefix for Array of Filters\nDESCRIPTION: Shows the JSON structure for a request when using a custom prefix with the NestedArray attribute.\nSOURCE: https://github.com/spiral/docs/blob/3.14/docs/en/filters/composite.md#2025-04-20_snippet_11\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"key\": \"value\",\n  \"addr\": [\n    {\n      \"city\": \"San Francisco\",\n      \"address\": \"Address\"\n    },\n    {\n      \"city\": \"Minsk\",\n      \"address\": \"Address #2\"\n    }\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Controller via CLI - Spiral PHP\nDESCRIPTION: Command to scaffold a new HTTP controller using Spiral's CLI tool\nSOURCE: https://github.com/spiral/docs/blob/3.14/docs/en/start/http-basics.md#2025-04-20_snippet_0\n\nLANGUAGE: terminal\nCODE:\n```\nphp app.php create:controller CurrentDate\n```\n\n----------------------------------------\n\nTITLE: Including Toolkit Bundle in Spiral Framework\nDESCRIPTION: Demonstrates how to include the toolkit bundle which contains form components. Shows both direct toolkit bundle inclusion and inclusion via the keeper bundle.\nSOURCE: https://github.com/spiral/docs/blob/3.14/docs/en/keeper/components.md#2025-04-20_snippet_25\n\nLANGUAGE: xhtml\nCODE:\n```\n<use:bundle path=\"toolkit:bundle\"/>\n```\n\nLANGUAGE: xhtml\nCODE:\n```\n<use:bundle path=\"keeper:bundle\"/>\n```\n\n----------------------------------------\n\nTITLE: Configuring XDebug in RoadRunner\nDESCRIPTION: RoadRunner YAML configuration for XDebug environment variables.\nSOURCE: https://github.com/spiral/docs/blob/3.14/docs/en/basics/debug.md#2025-04-20_snippet_19\n\nLANGUAGE: yaml\nCODE:\n```\nenv:\n  PHP_IDE_CONFIG: serverName=application.loc\n  XDEBUG_CONFIG: remote_host=localhost max_nesting_level=250 remote_enable=1 remote_connect_back=0 var_display_max_depth=5 idekey='PHPSTORM'\n```\n\n----------------------------------------\n\nTITLE: Registering Database Token Storage Bootloader Using Constant\nDESCRIPTION: Shows how to activate database token storage by adding the AuthTokensBootloader to the kernel's protected LOAD constant.\nSOURCE: https://github.com/spiral/docs/blob/3.14/docs/en/security/authentication.md#2025-04-20_snippet_9\n\nLANGUAGE: php\nCODE:\n```\nprotected const LOAD = [\n    // ...\n    \\Spiral\\Bootloader\\Auth\\HttpAuthBootloader::class,\n    \\Spiral\\Cycle\\Bootloader\\AuthTokensBootloader::class,\n    // ...\n];\n```\n\n----------------------------------------\n\nTITLE: Creating Page Layout in Keeper\nDESCRIPTION: Demonstrates how to extend the main page layout template in Keeper with a content block.\nSOURCE: https://github.com/spiral/docs/blob/3.14/docs/en/keeper/views.md#2025-04-20_snippet_4\n\nLANGUAGE: html\nCODE:\n```\n<extends:keeper:layout.page title=\"[[Title]]\"/>\n<use:bundle path=\"keeper:bundle\"/>\n\n<define:content>\n    [[Some page content.]]\n</define:content>\n```\n\n----------------------------------------\n\nTITLE: Generated Filter Class with Validation Support\nDESCRIPTION: The output of the create:filter command with validation rules, showing a filter class with a filterDefinition method that returns a new FilterDefinition object for adding validation rules.\nSOURCE: https://github.com/spiral/docs/blob/3.14/docs/en/basics/scaffolding.md#2025-04-20_snippet_22\n\nLANGUAGE: php\nCODE:\n```\ndeclare(strict_types=1);\n\nnamespace App\\Endpoint\\Web\\Filter;\n\nuse Spiral\\Filters\\Attribute\\Input\\Header;\nuse Spiral\\Filters\\Attribute\\Input\\Post;\nuse Spiral\\Filters\\Attribute\\Input\\Query;\nuse Spiral\\Filters\\Attribute\\Input\\RemoteAddress;\nuse Spiral\\Filters\\Model\\Filter;\nuse Spiral\\Filters\\Model\\FilterDefinitionInterface;\nuse Spiral\\Filters\\Model\\HasFilterDefinition;\nuse Spiral\\Validator\\FilterDefinition;\n\nfinal class CreateUserFilter extends Filter implements HasFilterDefinition\n{\n    // ...\n\n    public function filterDefinition(): FilterDefinitionInterface\n    {\n        return new FilterDefinition(validationRules: [\n            // Put your validation rules here\n        ]);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Centrifugo Publish Handler Command\nDESCRIPTION: Command to generate a new Centrifugo publish handler service class using the application CLI tool.\nSOURCE: https://github.com/spiral/docs/blob/3.14/docs/en/websockets/services.md#2025-04-20_snippet_14\n\nLANGUAGE: terminal\nCODE:\n```\nphp app.php create:centrifugo-handler Publish -t=publish\n```\n\n----------------------------------------\n\nTITLE: Creating Filters with Filter Provider\nDESCRIPTION: Example of manually creating a filter instance using the FilterProviderInterface from the container.\nSOURCE: https://github.com/spiral/docs/blob/3.14/docs/en/filters/filter.md#2025-04-20_snippet_5\n\nLANGUAGE: php\nCODE:\n```\n$provider = $container->get(\\Spiral\\Filters\\Model\\FilterProviderInterface::class);\n\n$provider->createFilter(\n    MyFilter::class, \n    $container->get(\\Spiral\\Filters\\InputInterface::class)\n);\n```\n\n----------------------------------------\n\nTITLE: Defining a Route with Multiple Optional Parameters in PHP\nDESCRIPTION: Demonstrates a route with multiple parameters where 'user' is optional. This setup allows matching URLs like '/group' and '/group/user'.\nSOURCE: https://github.com/spiral/docs/blob/3.14/docs/en/http/routing.md#2025-04-20_snippet_30\n\nLANGUAGE: php\nCODE:\n```\n$router->setRoute('home', new Route(\n    '/<group>[/<user>]',\n    function (ServerRequestInterface $request, ResponseInterface $response): array {\n        return $request->getAttribute('route')->getMatches();\n    }\n));\n```\n\n----------------------------------------\n\nTITLE: Adding SchedulerBootloader to Application Kernel using LOAD constant\nDESCRIPTION: Alternative method to add the SchedulerBootloader to the application's kernel using the LOAD constant.\nSOURCE: https://github.com/spiral/docs/blob/3.14/docs/zh-CN/advanced/scheduler.md#2025-04-20_snippet_2\n\nLANGUAGE: php\nCODE:\n```\nprotected const LOAD = [\n    // ...\n    \\Spiral\\Scheduler\\Bootloader\\SchedulerBootloader::class,\n    // ...\n];\n```\n\n----------------------------------------\n\nTITLE: Installing spiral-packages/scheduler via Composer\nDESCRIPTION: Command to install the spiral-packages/scheduler package using Composer.\nSOURCE: https://github.com/spiral/docs/blob/3.14/docs/zh-CN/advanced/scheduler.md#2025-04-20_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ncomposer require spiral-packages/scheduler\n```\n\n----------------------------------------\n\nTITLE: Variadic Arguments Resolution\nDESCRIPTION: Demonstrates how the resolver handles variadic arguments in different scenarios.\nSOURCE: https://github.com/spiral/docs/blob/3.14/docs/en/container/overview.md#2025-04-20_snippet_9\n\nLANGUAGE: php\nCODE:\n```\n$resolver = $this->container->get(ResolverInterface::class);\n$function = static fn(int ...$bar) => $bar;\n\n// array passed by parameter name\n$args = $resolver->resolveArguments(\n    new \\ReflectionFunction($function),\n    ['bar' => [1, 2]]\n);\n\ndump($args); // [1, 2]\n\n// array passed by parameter name with named arguments inside\n$args = $resolver->resolveArguments(\n    new \\ReflectionFunction($function),\n    ['bar' => ['ab' => 1, 'bc' => 2]]\n);\n\ndump($args); // ['ab' => 1 'bc' => 2]\n\n// value passed by parameter name\n$args = $resolver->resolveArguments(\n    new \\ReflectionFunction($function),\n    ['bar' => 1]\n);\n\ndump($args); // [1]\n```\n\n----------------------------------------\n\nTITLE: Accessing Route Parameters with Array Schema in Spiral Filters\nDESCRIPTION: Alternative approach to access route parameters using array mapping with the 'attribute:matches.{name}' notation in a filter definition instead of using attributes.\nSOURCE: https://github.com/spiral/docs/blob/3.14/docs/en/filters/filter.md#2025-04-20_snippet_15\n\nLANGUAGE: php\nCODE:\n```\nnamespace App\\Endpoint\\Web\\Filter;\n\nuse Spiral\\Filters\\Model\\Filter;\nuse Spiral\\Filters\\Model\\FilterDefinitionInterface;\nuse Spiral\\Filters\\Model\\HasFilterDefinition;\nuse Spiral\\Validator\\FilterDefinition;\n\nclass MyFilter extends Filter implements HasFilterDefinition\n{\n    public function filterDefinition(): FilterDefinitionInterface\n    {\n        return new FilterDefinition(mappingSchema: \n            [\n                'routeId' => 'attribute:matches.id'\n            ]\n        );\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Queue Serializer Configuration\nDESCRIPTION: Configuration example for setting up default serializers in queue.php\nSOURCE: https://github.com/spiral/docs/blob/3.14/docs/en/queue/jobs.md#2025-04-20_snippet_6\n\nLANGUAGE: php\nCODE:\n```\nuse Spiral\\Core\\Container\\Autowire;\nuse Spiral\\Serializer\\Serializer\\JsonSerializer;\nuse Spiral\\Serializer\\Serializer\\PhpSerializer;\n\nreturn [\n    // via serializer name\n    'defaultSerializer' => 'json',\n\n    // via class name\n    'defaultSerializer' => JsonSerializer::class,\n    \n    // via instance\n    'defaultSerializer' => new JsonSerializer(),\n    \n    // via Autowire\n    'defaultSerializer' => new Autowire(PhpSerializer::class)\n];\n```\n\n----------------------------------------\n\nTITLE: Using CSRF Token in Spiral View Template\nDESCRIPTION: An example of how to use the CSRF token variable in a Spiral view template file.\nSOURCE: https://github.com/spiral/docs/blob/3.14/docs/en/http/csrf.md#2025-04-20_snippet_10\n\nLANGUAGE: html\nCODE:\n```\n<form action=\"https://your-application.com/user/password\" method=\"POST\">\n    <input type=\"hidden\" name=\"csrf-token\" value=\"{csrfToken}\"/>\n    <input name=\"password\" type=\"password\">\n    // ...\n    <button type=\"submit\">Change password</button>\n</form>\n```\n\n----------------------------------------\n\nTITLE: Adding ExceptionHandlerBootloader to Kernel Using Constant\nDESCRIPTION: Shows how to add the ExceptionHandlerBootloader to your application's kernel using the LOAD constant. An alternative approach to register the exception handler bootloader.\nSOURCE: https://github.com/spiral/docs/blob/3.14/docs/en/http/errors.md#2025-04-20_snippet_1\n\nLANGUAGE: php\nCODE:\n```\nprotected const LOAD = [\n    // ...\n    \\App\\Application\\Bootloader\\ExceptionHandlerBootloader::class,\n    // ...\n];\n```\n\n----------------------------------------\n\nTITLE: Creating Centrifugo RPC Handler - Terminal Command\nDESCRIPTION: Command to create a new RPC handler service class for Centrifugo\nSOURCE: https://github.com/spiral/docs/blob/3.14/docs/en/websockets/services.md#2025-04-20_snippet_10\n\nLANGUAGE: terminal\nCODE:\n```\nphp app.php create:centrifugo-handler Rpc -t=rpc\n```\n\n----------------------------------------\n\nTITLE: Adding MailerBootloader to Kernel in Spiral PHP\nDESCRIPTION: Demonstrates how to add the MailerBootloader class to the bootloaders list in the application kernel.\nSOURCE: https://github.com/spiral/docs/blob/3.14/docs/zh-CN/advanced/sendit.md#2025-04-20_snippet_0\n\nLANGUAGE: php\nCODE:\n```\npublic function defineBootloaders(): array\n{\n    return [\n        // ...\n        \\Spiral\\SendIt\\Bootloader\\MailerBootloader::class,\n        // ...\n    ];\n}\n```\n\nLANGUAGE: php\nCODE:\n```\nprotected const LOAD = [\n    // ...\n    \\Spiral\\SendIt\\Bootloader\\MailerBootloader::class,\n    // ...\n];\n```\n\n----------------------------------------\n\nTITLE: Filter with Attributes\nDESCRIPTION: This code shows a filter object with attributes that define request field mappings using PHP attributes. It includes the filter definition specifying the validation rules for each field.  It leverages the Laravel validation rules.\nSOURCE: https://github.com/spiral/docs/blob/3.14/docs/zh-CN/validation/laravel.md#2025-04-20_snippet_4\n\nLANGUAGE: PHP\nCODE:\n```\nnamespace App\\Filter;\n\nuse Spiral\\Filters\\Attribute\\Input\\Post;\nuse Spiral\\Filters\\Model\\Filter;\nuse Spiral\\Filters\\Model\\FilterDefinitionInterface;\nuse Spiral\\Filters\\Model\\HasFilterDefinition;\nuse Spiral\\Validation\\Laravel\\FilterDefinition;\nuse Spiral\\Validation\\Laravel\\Attribute\\Input\\File;\nuse Symfony\\Component\\HttpFoundation\\File\\UploadedFile;\n\nfinal class CreatePostFilter extends Filter implements HasFilterDefinition\n{\n    #[Post]\n    public string $title;\n\n    #[Post]\n    public string $slug;\n\n    #[Post]\n    public int $sort;\n\n    #[File]\n    public UploadedFile $image;\n\n    public function filterDefinition(): FilterDefinitionInterface\n    {\n        return new FilterDefinition([\n            'title' => 'string|required|min:5',\n            'slug' => 'string|required|min:5',\n            'sort' => 'integer|required',\n            'image' => 'required|image'\n        ]);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Activating HTTP Components in Spiral Kernel (Constant Approach)\nDESCRIPTION: PHP code snippet demonstrating how to activate HTTP components by adding bootloaders to the kernel's LOAD constant.\nSOURCE: https://github.com/spiral/docs/blob/3.14/docs/zh-CN/http/configuration.md#2025-04-20_snippet_2\n\nLANGUAGE: php\nCODE:\n```\nprotected const LOAD = [\n    // ...\n    // 快速的 PSR-7 实现\n    \\Spiral\\Nyholm\\Bootloader\\NyholmBootloader::class,\n\n    // HTTP 核心\n    \\Spiral\\Bootloader\\Http\\HttpBootloader::class,\n\n    // PSR-15 handler\n    \\Spiral\\Bootloader\\Http\\RouterBootloader::class,\n    // ...\n];\n```\n\n----------------------------------------\n\nTITLE: Workflow Information Output Format\nDESCRIPTION: Sample output of the temporal:info command showing workflow details in a tabular format with name, class, and task queue columns.\nSOURCE: https://github.com/spiral/docs/blob/3.14/docs/en/temporal/usage.md#2025-04-20_snippet_21\n\nLANGUAGE: bash\nCODE:\n```\nWorkflows\n=========\n\n+-----------------+------------------------------------------------------+------------------+\n| Name            | Class                                                | Task Queue       |\n+-----------------+------------------------------------------------------+------------------+\n| fooWorkflow     | Spiral\\TemporalBridge\\Tests\\Commands\\Workflow        | worker2          |\n|                 | src/Commands/InfoCommandTest.php                     |                  |\n| AnotherWorkflow | Spiral\\TemporalBridge\\Tests\\Commands\\AnotherWorkflow | default, worker2 |\n|                 | src/Commands/InfoCommandTest.php                     |                  |\n+-----------------+------------------------------------------------------+------------------+\n```\n\n----------------------------------------\n\nTITLE: Checking Code Style with PHP-CS-Fixer for Spiral Framework\nDESCRIPTION: Command to check if code complies with PSR-12 coding standards using PHP-CS-Fixer without making changes. This is a dry run to identify style issues before submitting a pull request.\nSOURCE: https://github.com/spiral/docs/blob/3.14/docs/en/overview/contributing.md#2025-04-20_snippet_1\n\nLANGUAGE: terminal\nCODE:\n```\n./vendor/bin/php-cs-fixer fix --config=.php-cs-fixer.dist.php -vvv --dry-run --using-cache=no\n```\n\n----------------------------------------\n\nTITLE: Executing Database Migration in Spiral\nDESCRIPTION: This command executes the generated database migration in a Spiral application.\nSOURCE: https://github.com/spiral/docs/blob/3.14/docs/en/cookbook/simple-chat.md#2025-04-20_snippet_21\n\nLANGUAGE: terminal\nCODE:\n```\nphp app.php migrate -vv\n```\n\n----------------------------------------\n\nTITLE: Implementing PostFactory in PHP for Spiral Framework\nDESCRIPTION: This code snippet defines a PostFactory class that extends AbstractFactory to generate Post entities with associated authors. It includes a method for customizing the generated posts with a specific author.\nSOURCE: https://github.com/spiral/docs/blob/3.14/docs/en/cookbook/quick-start.md#2025-04-20_snippet_28\n\nLANGUAGE: php\nCODE:\n```\nnamespace Database\\Factory;\n\nuse App\\Database\\Post;\nuse App\\Database\\User;\nuse Faker\\Generator;\nuse Spiral\\DatabaseSeeder\\Factory\\AbstractFactory;\n\nclass PostFactory extends AbstractFactory\n{\n    /**\n     * Returns a fully qualified database entity class name\n     */\n    public function entity(): string\n    {\n        return Post::class;\n    }\n\n    /**\n     * Returns an entity\n     */\n    public function makeEntity(array $definition): Post\n    {\n        return new Post($definition['title'], $definition['content'], $definition['author']);\n    }\n\n    /**\n     * Generate Post with given author\n     */\n    public function withAuthor(User $author): self\n    {\n        return $this->state(fn(Generator $faker, array $definition) => [\n            'author' => $author,\n        ]);\n    }\n\n    /**\n     * Returns array with generation rules\n     */\n    public function definition(): array\n    {\n        return [\n            'title' => $this->faker->sentence(12),\n            'content' => $this->faker->text(900),\n            'author' => UserFactory::new()->makeOne()\n        ];\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Generating Database Migration in Spiral\nDESCRIPTION: This command generates a database migration based on the defined ORM entities in a Spiral application.\nSOURCE: https://github.com/spiral/docs/blob/3.14/docs/en/cookbook/simple-chat.md#2025-04-20_snippet_20\n\nLANGUAGE: terminal\nCODE:\n```\nphp app.php cycle:migrate -v\n```\n\n----------------------------------------\n\nTITLE: Retrieving Registered Dispatchers in Spiral Framework (PHP)\nDESCRIPTION: Illustrates how to get an array of registered dispatcher class names.\nSOURCE: https://github.com/spiral/docs/blob/3.14/docs/en/testing/start.md#2025-04-20_snippet_10\n\nLANGUAGE: php\nCODE:\n```\n/** @var class-string<\\Spiral\\Boot\\DispatcherInterface>[] $dispatchers */\n$dispatchers = $this->getRegisteredDispatchers();\n```\n\n----------------------------------------\n\nTITLE: Configuring Queue Pipelines in YAML\nDESCRIPTION: YAML configuration for defining queue pipelines in RoadRunner.\nSOURCE: https://github.com/spiral/docs/blob/3.14/docs/en/cookbook/simple-queue-system.md#2025-04-20_snippet_4\n\nLANGUAGE: yaml\nCODE:\n```\namqp:\n  addr: amqp://guest:guest@127.0.0.1:5672\n\njobs:\n  consume: [ ]\n  pipelines:\n    default:\n      driver: amqp\n      priority: 100\n      queue: default\n```\n\n----------------------------------------\n\nTITLE: Running Console Command to Push Job\nDESCRIPTION: Terminal command to execute the console command that pushes a job to the queue.\nSOURCE: https://github.com/spiral/docs/blob/3.14/docs/en/cookbook/simple-queue-system.md#2025-04-20_snippet_11\n\nLANGUAGE: terminal\nCODE:\n```\nphp app.php ping\n```\n\n----------------------------------------\n\nTITLE: Using RegexValue Filter in PHP\nDESCRIPTION: Demonstrates the RegexValue filter that validates string-like inputs against a regex pattern and converts them to strings.\nSOURCE: https://github.com/spiral/docs/blob/3.14/docs/en/component/data-grid.md#2025-04-20_snippet_47\n\nLANGUAGE: php\nCODE:\n```\nuse Spiral\\DataGrid\\Specification\\Value;\n\n$value = new Value\\RegexValue('/\\d+/');\n\n$value->accepts('');  // false\n$value->accepts(3);   // true\n$value->accepts('4'); // true\n$value->convert(3);   // '3'\n```\n\n----------------------------------------\n\nTITLE: Stack Prepend in Stempler\nDESCRIPTION: Demonstrates how to prepend content to a stack using <stack:prepend>, which adds content before the default content instead of after it.\nSOURCE: https://github.com/spiral/docs/blob/3.14/docs/en/views/stempler.md#2025-04-20_snippet_27\n\nLANGUAGE: html\nCODE:\n```\n<stack:collect name=\"my-stack\">\n    default content\n</stack:collect>\n\n<stack:prepend name=\"my-stack\">\n    my value\n</stack:prepend>\n```\n\n----------------------------------------\n\nTITLE: Asserting Dispatcher Unavailability in Spiral Framework (PHP)\nDESCRIPTION: Shows how to check if a dispatcher cannot be served with the current environment.\nSOURCE: https://github.com/spiral/docs/blob/3.14/docs/en/testing/start.md#2025-04-20_snippet_9\n\nLANGUAGE: php\nCODE:\n```\n$this->assertDispatcherCannotBeServed(HttpDispatcher::class);\n```\n\n----------------------------------------\n\nTITLE: Registering Job Handler in Queue Configuration\nDESCRIPTION: Configuration to register the job handler class and associate it with a specific task name, so that incoming jobs with the 'ping' task name are processed by the PingJob handler.\nSOURCE: https://github.com/spiral/docs/blob/3.14/docs/en/cookbook/simple-queue-system.md#2025-04-20_snippet_20\n\nLANGUAGE: php\nCODE:\n```\nreturn [\n    // ...\n    'registry' => [\n        'handlers' => [\n            'ping' => App\\Endpoint\\Job\\PingJob::class\n        ],\n    ],\n];\n```\n\n----------------------------------------\n\nTITLE: Creating Custom Sequences in PHP using Spiral Framework\nDESCRIPTION: Illustrates how to create custom sequences in a Spiral application. It shows adding multiple commands to a custom sequence named 'cache_everything'.\nSOURCE: https://github.com/spiral/docs/blob/3.14/docs/zh-CN/console/sequences.md#2025-04-20_snippet_2\n\nLANGUAGE: PHP\nCODE:\n```\nuse Symfony\\Component\\Console\\Output\\OutputInterface;\nuse Psr\\Container\\ContainerInterface;\nuse Spiral\\Boot\\Bootloader\\Bootloader;\nuse Spiral\\Console\\Bootloader\\ConsoleBootloader;\n\nclass AppBootloader extends Bootloader\n{\n    public function boot(ConsoleBootloader $console): void\n    {\n        $console->addSequence(\n            name: 'cache_everything', \n            sequence: 'route:cache',\n            header: '<info>Route caching...</info>',\n            footer: '<info>Route caching completed.</info>'\n        );\n         \n        $console->addSequence(\n            name: 'cache_everything', \n            sequence: 'config:cache',\n            header: '<info>Config caching...</info>',\n            footer: '<info>Config caching completed.</info>'\n        );\n        \n        // ... \n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Grid Delete Action\nDESCRIPTION: Provides a simplified delete action with predefined confirmation texts and danger styling. Requires only the href parameter for basic implementation.\nSOURCE: https://github.com/spiral/docs/blob/3.14/docs/en/keeper/components.md#2025-04-20_snippet_12\n\nLANGUAGE: xhtml\nCODE:\n```\n<grid:action.delete\n        href=\"edit/{id}\"\n/>\n```\n\n----------------------------------------\n\nTITLE: Running Spiral Application Server\nDESCRIPTION: Commands to navigate to the project directory and start the RoadRunner server.\nSOURCE: https://github.com/spiral/docs/blob/3.14/docs/en/cookbook/simple-chat.md#2025-04-20_snippet_1\n\nLANGUAGE: terminal\nCODE:\n```\ncd realtime-chat\n\n./rr serve\n```\n\n----------------------------------------\n\nTITLE: Custom Stringable Topic Implementation\nDESCRIPTION: Creating a custom Stringable topic class for use with broadcasting\nSOURCE: https://github.com/spiral/docs/blob/3.14/docs/zh-CN/websockets/broadcasting.md#2025-04-20_snippet_5\n\nLANGUAGE: php\nCODE:\n```\nnamespace App\\Broadcast\\Topic;\n\nfinal class Order implements \\Stringable\n{\n    public function __construct(\n        public readonly string $orderUuid\n    ) {\n    }\n\n    public function __toString(): string\n    {\n        return \\sprintf('order.%s', $this->orderUuid);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring HTTP Error Logging with Monolog\nDESCRIPTION: Shows how to configure error logging with Monolog in the LoggingBootloader. This sets up a rotating log file for HTTP errors in the runtime directory.\nSOURCE: https://github.com/spiral/docs/blob/3.14/docs/en/http/errors.md#2025-04-20_snippet_9\n\nLANGUAGE: php\nCODE:\n```\nnamespace App\\Application\\Bootloader;\n\nuse Spiral\\Boot\\Bootloader\\Bootloader;\nuse Spiral\\Http\\Middleware\\ErrorHandlerMiddleware;\nuse Spiral\\Monolog\\Bootloader\\MonologBootloader;\n\nclass LoggingBootloader extends Bootloader\n{\n    public function boot(MonologBootloader $monolog)\n    {\n        $monolog->addHandler(\n            ErrorHandlerMiddleware::class,\n            $monolog->logRotate(directory('runtime') . 'logs/http.log')\n        );\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring DataGrid Defaults in PHP Controller\nDESCRIPTION: Shows how to specify default sorting, filtering, and pagination for a DataGrid using the DataGrid attribute.\nSOURCE: https://github.com/spiral/docs/blob/3.14/docs/en/http/interceptors.md#2025-04-20_snippet_14\n\nLANGUAGE: php\nCODE:\n```\n#[DataGrid(\n    grid: UserGrid::class,\n    defaults: [\n        'sort' => ['name' => 'desc'],\n        'filter' => ['status' => 'active'],\n        'paginate' => ['limit' => 50, 'page' => 10]\n    ]\n)]\n```\n\n----------------------------------------\n\nTITLE: Registering Custom Collector in Spiral Bootloader\nDESCRIPTION: Shows how to register a custom collector (like the SQL collector) in a Spiral bootloader, integrating it into the debug system for Sentry reporting.\nSOURCE: https://github.com/spiral/docs/blob/3.14/docs/en/basics/errors.md#2025-04-20_snippet_24\n\nLANGUAGE: php\nCODE:\n```\nnamespace App\\Application\\Bootloader;\n\nuse Spiral\\Boot\\Bootloader\\Bootloader;\nuse Spiral\\Bootloader\\DebugBootloader;\nuse App\\Application\\Exception\\Reporter\\CustomReporter;\n\nfinal class AppBootloader extends Bootloader\n{\n    public function init(DebugBootloader $debug, SqlCollector $sqlCollector): void\n    {\n        $debug->addStateCollector($sqlCollector);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: HTML Output with Attribute Inheritance\nDESCRIPTION: Shows the HTML output when using ${parent} for attribute inheritance, where body class includes both the child-defined value and the parent default value.\nSOURCE: https://github.com/spiral/docs/blob/3.14/docs/en/views/stempler.md#2025-04-20_snippet_18\n\nLANGUAGE: html\nCODE:\n```\n<!DOCTYPE html>\n<html>\n<head>\n    <title>Homepage</title>\n    <link rel=\"stylesheet\" href=\"/styles/welcome.css\"/>\n</head>\n<body class=\"homepage default\">\nThis is homepage content.\nDefault content.\n</body>\n</html>\n```\n\n----------------------------------------\n\nTITLE: Configuring Temporal Cloud in RoadRunner YAML\nDESCRIPTION: YAML configuration for connecting to Temporal Cloud in the RoadRunner configuration file.\nSOURCE: https://github.com/spiral/docs/blob/3.14/docs/en/temporal/configuration.md#2025-04-20_snippet_11\n\nLANGUAGE: yaml\nCODE:\n```\ntemporal:\n  address: foo-bar-default.baz.tmprl.cloud:7233\n  namespace: foo-bar-default.baz\n  tls:\n    key: /my-project.key\n    cert: /my-project.pem\n```\n\n----------------------------------------\n\nTITLE: Viewing Database Structure in Spiral\nDESCRIPTION: These commands are used to view the structure of the database and the migrations table in a Spiral application.\nSOURCE: https://github.com/spiral/docs/blob/3.14/docs/en/cookbook/simple-chat.md#2025-04-20_snippet_12\n\nLANGUAGE: terminal\nCODE:\n```\nphp app.php db:list\nphp app.php db:table migrations\n```\n\n----------------------------------------\n\nTITLE: HTML Output with Custom Resources\nDESCRIPTION: Shows the generated HTML when using blocks for resource management, with both the base layout styles and the child template's additional styles included.\nSOURCE: https://github.com/spiral/docs/blob/3.14/docs/en/views/stempler.md#2025-04-20_snippet_24\n\nLANGUAGE: html\nCODE:\n```\n<!DOCTYPE html>\n<html>\n<head>\n    <title>Homepage</title>\n    <link rel=\"stylesheet\" href=\"/styles/welcome.css\"/>\n    <link rel=\"stylesheet\" href=\"/styles/homepage.css\"/>\n</head>\n<body class=\"homepage default\">\nDefault content.\n</body>\n</html>\n```\n\n----------------------------------------\n\nTITLE: Setting Verbosity Level in Environment\nDESCRIPTION: Environment configuration for setting error verbosity level\nSOURCE: https://github.com/spiral/docs/blob/3.14/docs/en/basics/errors.md#2025-04-20_snippet_11\n\nLANGUAGE: dotenv\nCODE:\n```\n# Verbosity level\nVERBOSITY_LEVEL=verbose # basic, verbose, debug\n```\n\n----------------------------------------\n\nTITLE: Adding DumperBootloader to Kernel Using Constant Approach\nDESCRIPTION: Alternative way to register the Spiral Dumper bootloader in the application kernel using the SYSTEM constant.\nSOURCE: https://github.com/spiral/docs/blob/3.14/docs/en/basics/debug.md#2025-04-20_snippet_2\n\nLANGUAGE: php\nCODE:\n```\nprotected const SYSTEM = [\n    // ...\n    \\Spiral\\Debug\\Bootloader\\DumperBootloader::class,\n];\n```\n\n----------------------------------------\n\nTITLE: Basic PHP View Output Example\nDESCRIPTION: Simple example demonstrating basic output in a PHP view file.\nSOURCE: https://github.com/spiral/docs/blob/3.14/docs/en/views/plain.md#2025-04-20_snippet_0\n\nLANGUAGE: php\nCODE:\n```\necho \"hello world\";\n```\n\n----------------------------------------\n\nTITLE: Enabling Tokenizer Cache in Spiral Framework\nDESCRIPTION: Environment variable configuration to enable caching of filtered classes. This improves application performance by reducing the time required for application bootstrapping.\nSOURCE: https://github.com/spiral/docs/blob/3.14/docs/en/advanced/tokenizer.md#2025-04-20_snippet_15\n\nLANGUAGE: dotenv\nCODE:\n```\nTOKENIZER_CACHE_TARGETS=true\n```\n\n----------------------------------------\n\nTITLE: 配置文件会话处理器 - PHP\nDESCRIPTION: 展示如何在配置文件中设置文件会话处理器。这个配置指定了会话的生命周期、cookie 名称和存储目录。\nSOURCE: https://github.com/spiral/docs/blob/3.14/docs/zh-CN/basics/session.md#2025-04-20_snippet_3\n\nLANGUAGE: php\nCODE:\n```\nuse Spiral\\Core\\Container\\Autowire;\nuse Spiral\\Session\\Handler\\FileHandler;\n\nreturn [\n    'lifetime' => 86400,\n    'cookie' => 'sid',\n    'secure' => false,\n    'handler' => new Autowire(\n        FileHandler::class,\n        [\n            'directory' => directory('runtime') . 'session',\n            'lifetime'  => 86400\n        ]\n    )\n];\n```\n\n----------------------------------------\n\nTITLE: Creating Login Form Template with Tailwind CSS\nDESCRIPTION: HTML template for the login form with Tailwind CSS styling and CSRF token integration.\nSOURCE: https://github.com/spiral/docs/blob/3.14/docs/en/cookbook/simple-chat.md#2025-04-20_snippet_29\n\nLANGUAGE: html\nCODE:\n```\n<html>\n<head>\n    <title>Login</title>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <script src=\"https://cdn.tailwindcss.com\"></script>\n</head>\n<body>\n<div class=\"min-h-screen bg-gray-100 flex flex-col justify-center sm:py-12\">\n    <div class=\"p-10 xs:p-0 mx-auto md:w-full md:max-w-md\">\n        <h1 class=\"font-bold text-center text-2xl mb-5\">Your Logo</h1>\n        <form action=\"/login\" method=\"POST\" class=\"bg-white shadow w-full rounded-lg divide-y divide-gray-200\">\n            <input type=\"hidden\" name=\"csrf-token\" value=\"{{ $csrf }}\"/>\n\n            @foreach ($errors ?? [] as $error)\n            <div class=\"bg-red-100 border border-red-400 text-red-700 px-4 py-3 rounded relative\" role=\"alert\">\n                <strong class=\"font-bold\">Error!</strong>\n                <span class=\"block sm:inline\">{{ $error }}</span>\n            </div>\n            @endforeach\n\n            <div class=\"px-5 py-7\">\n                <label class=\"font-semibold text-sm text-gray-600 pb-1 block\">Username</label>\n                <input type=\"text\" class=\"border rounded-lg px-3 py-2 mt-1 mb-5 text-sm w-full\" name=\"username\"/>\n\n                <label class=\"font-semibold text-sm text-gray-600 pb-1 block\">Password</label>\n                <input type=\"password\" name=\"password\" class=\"border rounded-lg px-3 py-2 mt-1 mb-5 text-sm w-full\"/>\n\n                <button type=\"submit\"\n                        class=\"bg-blue-500 hover:bg-blue-600 text-white w-full py-2.5 rounded-lg text-sm text-center inline-block\">\n                    <span class=\"inline-block mr-2\">Login</span>\n                </button>\n            </div>\n        </form>\n    </div>\n</div>\n</body>\n</html>\n```\n\n----------------------------------------\n\nTITLE: Registering SAPI Bootloader in Spiral 3.0\nDESCRIPTION: Example showing how to register the SapiBootloader in the application's bootstrap process after installing the sapi-bridge package.\nSOURCE: https://github.com/spiral/docs/blob/3.14/docs/en/cookbook/migration-from-v2.md#2025-04-20_snippet_3\n\nLANGUAGE: php\nCODE:\n```\nprotected const LOAD = [\n    // ...\n    \\Spiral\\Sapi\\Bootloader\\SapiBootloader::class,\n];\n```\n\n----------------------------------------\n\nTITLE: Importing Keeper Bundle in XHTML\nDESCRIPTION: Shows how to import the Keeper bundle which contains the DataGrid UI components.\nSOURCE: https://github.com/spiral/docs/blob/3.14/docs/zh-CN/keeper/components.md#2025-04-20_snippet_0\n\nLANGUAGE: xhtml\nCODE:\n```\n<use:bundle path=\"keeper:bundle\"/>\n```\n\n----------------------------------------\n\nTITLE: Using WeakReference Binding with String Alias\nDESCRIPTION: Demonstrates how to use WeakReference binding with a string alias in the container.\nSOURCE: https://github.com/spiral/docs/blob/3.14/docs/zh-CN/container/configuration.md#2025-04-20_snippet_8\n\nLANGUAGE: php\nCODE:\n```\nuse Spiral\\Core\\Container;\nuse WeakReference;\n\npublic function boot(Container $container): void\n{\n    $object = new stdClass();\n    $hash = \\spl_object_hash($object);\n    $reference = WeakReference::create($object);\n\n    $container->bind('test-alias', $reference);\n    \n    dump($hash === \\spl_object_hash($container->get('test-alias'))); // true\n    \n    unset($object);\n    // 新对象无法创建，因为类名未被存储\n    dump($container->get('test-alias')); // null\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Scaffolder Bootloader using Method\nDESCRIPTION: Example showing how to add ScaffolderBootloader to the bootloader list using a method approach in the Kernel class\nSOURCE: https://github.com/spiral/docs/blob/3.14/docs/en/basics/scaffolding.md#2025-04-20_snippet_0\n\nLANGUAGE: php\nCODE:\n```\npublic function defineBootloaders(): array\n{\n    return [\n        // ...\n        \\Spiral\\Scaffolder\\Bootloader\\ScaffolderBootloader::class,\n        // ...\n    ];\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Prototype Classes in Spiral\nDESCRIPTION: This command collects all available prototype classes in a Spiral application.\nSOURCE: https://github.com/spiral/docs/blob/3.14/docs/en/cookbook/simple-chat.md#2025-04-20_snippet_19\n\nLANGUAGE: terminal\nCODE:\n```\nphp app.php configure\n```\n\n----------------------------------------\n\nTITLE: Enabling Validator Bootloader (Constant Approach)\nDESCRIPTION: Adding the ValidatorBootloader to the bootloaders list using a constant in the application kernel.\nSOURCE: https://github.com/spiral/docs/blob/3.14/docs/en/validation/spiral.md#2025-04-20_snippet_2\n\nLANGUAGE: php\nCODE:\n```\nprotected const LOAD = [\n    // ...\n    \\Spiral\\Validator\\Bootloader\\ValidatorBootloader::class,\n    // ...\n];\n```\n\n----------------------------------------\n\nTITLE: Removing Container Binding in PHP\nDESCRIPTION: Shows how to remove a binding from the container.\nSOURCE: https://github.com/spiral/docs/blob/3.14/docs/en/container/configuration.md#2025-04-20_snippet_7\n\nLANGUAGE: php\nCODE:\n```\nuse Spiral\\Core\\BinderInterface;\n\npublic function boot(BinderInterface $binder): void\n{\n    $binder->removeBinding(UserRepositoryInterface::class)\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Buggregator in Docker Compose\nDESCRIPTION: Docker Compose configuration for adding the Buggregator service to an existing docker-compose.yaml file.\nSOURCE: https://github.com/spiral/docs/blob/3.14/docs/en/basics/debug.md#2025-04-20_snippet_9\n\nLANGUAGE: yaml\nCODE:\n```\nservices:\n  # ...\n  buggregator:\n    image: ghcr.io/buggregator/server:latest\n    ports:\n      - 8000:8000\n      - 1025:1025\n      - 9912:9912\n      - 9913:9913\n```\n\n----------------------------------------\n\nTITLE: Basic Sitemap Node Declaration\nDESCRIPTION: Shows basic sitemap node declaration using direct injection of the Sitemap module in a bootloader.\nSOURCE: https://github.com/spiral/docs/blob/3.14/docs/en/keeper/sitemap.md#2025-04-20_snippet_1\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\ndeclare(strict_types=1);\n\nuse Spiral\\Boot\\Bootloader\\Bootloader;\nuse Spiral\\Keeper\\Module\\Sitemap;\n\nclass NavigationBootloader extends Bootloader\n{\n    public function boot(Sitemap $sitemap): void\n    {\n        $sitemap->link('dashboard.index', 'Dashboard', ['icon' => 'home']);\n        // ...\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: HTML Output from Nested Layout\nDESCRIPTION: Shows the final HTML output when using nested layouts, including the cascading class attributes and nested content structure with proper inheritance.\nSOURCE: https://github.com/spiral/docs/blob/3.14/docs/en/views/stempler.md#2025-04-20_snippet_21\n\nLANGUAGE: html\nCODE:\n```\n<!DOCTYPE html>\n<html>\n<head>\n    <title>Homepage</title>\n    <link rel=\"stylesheet\" href=\"/styles/welcome.css\"/>\n</head>\n<body class=\"homepage page default\">\n<div class=\"page-wrapper\">\n    Page content.\n</div>\n</body>\n</html>\n```\n\n----------------------------------------\n\nTITLE: Reference Arguments Example\nDESCRIPTION: Shows how the resolver handles reference arguments.\nSOURCE: https://github.com/spiral/docs/blob/3.14/docs/en/container/overview.md#2025-04-20_snippet_10\n\nLANGUAGE: php\nCODE:\n```\n$resolver = $this->container->get(ResolverInterface::class);\n$function = static fn(int $bar) => $bar;\n\n$bar = 1;\n\n$args = $resolver->resolveArguments(\n    new \\ReflectionFunction($function),\n    ['bar' => &$bar]\n);\n\n$bar = 42;\ndump($args); // [42]\n```\n\n----------------------------------------\n\nTITLE: Registering Centrifugo Connect Handler in PHP Configuration\nDESCRIPTION: This PHP configuration snippet shows how to register the ConnectHandler as a service to handle the Centrifugo connect event.\nSOURCE: https://github.com/spiral/docs/blob/3.14/docs/en/cookbook/simple-chat.md#2025-04-20_snippet_42\n\nLANGUAGE: php\nCODE:\n```\nuse App\\Endpoint\\Centrifugo\\ConnectHandler;\nuse RoadRunner\\Centrifugo\\Request\\RequestType;\n\nreturn [\n    'services' => [\n        RequestType::Connect->value => ConnectHandler::class,\n    ],\n];\n```\n\n----------------------------------------\n\nTITLE: Adding SerializerBootloader to Kernel Using Method\nDESCRIPTION: Code showing how to enable the serializer component by adding SerializerBootloader to the bootloaders list using the defineBootloaders method.\nSOURCE: https://github.com/spiral/docs/blob/3.14/docs/en/advanced/serializer.md#2025-04-20_snippet_0\n\nLANGUAGE: php\nCODE:\n```\npublic function defineBootloaders(): array\n{\n    return [\n        // ...\n        \\Spiral\\Serializer\\Bootloader\\SerializerBootloader::class,\n        // ...\n    ];\n}\n```\n\n----------------------------------------\n\nTITLE: Detailed Bootloader Configuration Using Method\nDESCRIPTION: Comprehensive configuration of individual Cycle bootloaders for granular control\nSOURCE: https://github.com/spiral/docs/blob/3.14/docs/en/basics/orm.md#2025-04-20_snippet_3\n\nLANGUAGE: php\nCODE:\n```\nuse Spiral\\Cycle\\Bootloader as CycleBridge;\n\npublic function defineBootloaders(): array\n{\n    return [\n        // ...\n        // Database\n        CycleBridge\\DatabaseBootloader::class,\n        CycleBridge\\MigrationsBootloader::class,\n        // ORM\n        CycleBridge\\SchemaBootloader::class,\n        CycleBridge\\CycleOrmBootloader::class,\n        CycleBridge\\AnnotatedBootloader::class,\n        CycleBridge\\CommandBootloader::class,\n        CycleBridge\\AuthTokensBootloader::class,\n        CycleBridge\\ScaffolderBootloader::class,\n        CycleBridge\\PrototypeBootloader::class,\n    ];\n}\n```\n\n----------------------------------------\n\nTITLE: Custom Prefix with NestedArray\nDESCRIPTION: Demonstrates how to use a custom prefix with the NestedArray attribute to look for input data under a different key.\nSOURCE: https://github.com/spiral/docs/blob/3.14/docs/en/filters/composite.md#2025-04-20_snippet_10\n\nLANGUAGE: php\nCODE:\n```\nclass MultipleAddressesFilter extends Filter\n{\n    #[NestedArray(class: AddressFilter::class, input: new Post('addr'))]\n    public array $addresses;\n    \n    // ...\n}\n```\n\n----------------------------------------\n\nTITLE: Asserting File Non-Move in Storage\nDESCRIPTION: Shows how to verify that a file was not moved between locations in storage.\nSOURCE: https://github.com/spiral/docs/blob/3.14/docs/en/testing/storage.md#2025-04-20_snippet_8\n\nLANGUAGE: php\nCODE:\n```\n$uploads = $storage->bucket('uploads');\n$uploads->assertNotMoved('file.txt', 'folder/file.txt');\n```\n\n----------------------------------------\n\nTITLE: Invoking Spiral Console Commands\nDESCRIPTION: These terminal commands show how to invoke a console command, list all available commands, and get help for a specific command in a Spiral application.\nSOURCE: https://github.com/spiral/docs/blob/3.14/docs/en/console/configuration.md#2025-04-20_snippet_2\n\nLANGUAGE: terminal\nCODE:\n```\nphp app.php command:name\n```\n\nLANGUAGE: terminal\nCODE:\n```\nphp app.php list\n```\n\nLANGUAGE: terminal\nCODE:\n```\nphp app.php help command:name\n```\n\n----------------------------------------\n\nTITLE: Invalid Credentials Middleware\nDESCRIPTION: Middleware for handling invalid credentials exceptions and managing error messages.\nSOURCE: https://github.com/spiral/docs/blob/3.14/docs/en/cookbook/simple-chat.md#2025-04-20_snippet_35\n\nLANGUAGE: php\nCODE:\n```\nnamespace App\\Endpoint\\Web\\Middleware;\n\nuse App\\Application\\Exception\\InvalidCredentialsException;\nuse Psr\\Http\\Message\\ResponseInterface;\nuse Psr\\Http\\Message\\ServerRequestInterface;\nuse Psr\\Http\\Server\\MiddlewareInterface;\nuse Psr\\Http\\Server\\RequestHandlerInterface;\nuse Spiral\\Prototype\\Traits\\PrototypeTrait;\n\nfinal class HandleInvalidCredentialsMiddleware implements MiddlewareInterface\n{\n    use PrototypeTrait;\n\n    public function process(ServerRequestInterface $request, RequestHandlerInterface $handler): ResponseInterface\n    {\n        try {\n            $response = $handler->handle($request);\n            \n            // Flush errors after successful request\n            $this->errors->clear();\n\n            return $response;\n        } catch (InvalidCredentialsException $e) {\n            // Add error to the session and redirect to the login form\n            $this->errors->addError('username', $e->getMessage());\n\n            return $this->response->redirect('/login');\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: In Array Validation Example\nDESCRIPTION: Demonstration of using in_array validation rule with parameters\nSOURCE: https://github.com/spiral/docs/blob/3.14/docs/en/validation/spiral.md#2025-04-20_snippet_13\n\nLANGUAGE: php\nCODE:\n```\n$validator = $validation->validate(\n    ['name' => 'f'],\n    [\n        'name' => [\n            'notEmpty',\n            ['in_array', ['a', 'b', 'c'], true] // in_array($value, ['a', 'b', 'c'], true)\n        ]\n    ]\n);\n```\n\n----------------------------------------\n\nTITLE: Updating Composer Autoload for Generated GRPC Code\nDESCRIPTION: JSON configuration in composer.json to register the generated GRPC code namespace for autoloading, which is necessary for the application to use the generated classes.\nSOURCE: https://github.com/spiral/docs/blob/3.14/docs/en/grpc/service.md#2025-04-20_snippet_4\n\nLANGUAGE: json\nCODE:\n```\n{\n    ...\n    \"autoload\": {\n        \"psr-4\": {\n            \"App\\\\\": \"app/src\",\n            \"GRPC\\\\\": \"generated\"\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Declaring Tagged Metrics in RoadRunner YAML\nDESCRIPTION: This YAML configuration shows how to declare a tagged (labeled) metric in the RoadRunner configuration.\nSOURCE: https://github.com/spiral/docs/blob/3.14/docs/en/advanced/prometheus-metrics.md#2025-04-20_snippet_5\n\nLANGUAGE: yaml\nCODE:\n```\nmetrics:\n  address: 127.0.0.1:2112\n\n  collect:\n    registered_users:\n      type: histogram\n      help: \"Total registered users counter.\"\n      labels: [ \"type\" ]\n```\n\n----------------------------------------\n\nTITLE: Sitemap Node Sorting Configuration\nDESCRIPTION: Shows how to implement custom sorting of sitemap nodes using position attributes.\nSOURCE: https://github.com/spiral/docs/blob/3.14/docs/en/keeper/sitemap.md#2025-04-20_snippet_7\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\ndeclare(strict_types=1);\n\nnamespace App\\Controller\\Keeper;\n\nuse Spiral\\Keeper\\Annotation as Keeper;\nuse Spiral\\Views\\ViewsInterface;\n\n #[Keeper\\Controller(name: \"users\", prefix:\"/users\")]\n #[Keeper\\Sitemap\\Group(name: \"users\")]\nclass UsersController\n{\n     #[Keeper\\Action(route: \"\", methods: \"GET\")]\n     #[Keeper\\Sitemap\\Link(title: \"Users\", position: 2.7)]\n    public function index(ViewsInterface $views): string\n    {\n        return $views->render('keeper:users/list');\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Registering Custom Mail Transport in Spiral Framework PHP\nDESCRIPTION: Demonstrates how to register a custom mail transport using the TransportRegistryInterface in a Spiral Framework bootloader. This allows for the use of custom mail transports not provided by the symfony/mailer component.\nSOURCE: https://github.com/spiral/docs/blob/3.14/docs/en/advanced/sendit.md#2025-04-20_snippet_8\n\nLANGUAGE: php\nCODE:\n```\nuse Spiral\\Boot\\Bootloader\\Bootloader;\nuse Spiral\\SendIt\\TransportRegistryInterface;\nuse Symfony\\Component\\Mailer\\Transport\\c;\n\nclass AppBootloader extends Bootloader \n{\n    public function boot(TransportRegistryInterface $registry): void\n    {\n        $registry->registerTransport(new SendmailTransportFactory(...));\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Binding with Alias DTO in PHP\nDESCRIPTION: Shows how to create a link to another binding within the container using the Alias DTO.\nSOURCE: https://github.com/spiral/docs/blob/3.14/docs/en/container/configuration.md#2025-04-20_snippet_11\n\nLANGUAGE: php\nCODE:\n```\nuse Spiral\\Core\\Config\\Alias;\n\n$container->bind(\n    \\DatetimeImmutable::class, \n    static fn() => new \\DatetimeImmutable()\n);\n\n$container->bind(\n    'now', \n    new Alias(alias: \\DatetimeImmutable::class)\n);\n```\n\n----------------------------------------\n\nTITLE: Removing Cache Items in PHP\nDESCRIPTION: Deletes a single item from the cache by specifying its key.\nSOURCE: https://github.com/spiral/docs/blob/3.14/docs/en/basics/cache.md#2025-04-20_snippet_11\n\nLANGUAGE: php\nCODE:\n```\n$this->cache->delete('key');\n```\n\n----------------------------------------\n\nTITLE: Adding Database Namespace to Composer Autoload in Spiral\nDESCRIPTION: This code snippet shows how to add a separate Database namespace to Composer's autoload configuration for storing factories and seeders.\nSOURCE: https://github.com/spiral/docs/blob/3.14/docs/en/cookbook/simple-chat.md#2025-04-20_snippet_23\n\nLANGUAGE: diff\nCODE:\n```\n\"autoload-dev\": {\n    \"psr-4\": {\n        \"Tests\\\\\": \"tests\",\n+       \"Database\\\\\": \"app/database\"\n    },\n    //\n},\n```\n\n----------------------------------------\n\nTITLE: Configuring PostgreSQL Database Connection in Spiral\nDESCRIPTION: This snippet shows how to modify the database configuration file to use PostgreSQL instead of SQLite. It includes setting up environment variables for database credentials.\nSOURCE: https://github.com/spiral/docs/blob/3.14/docs/en/cookbook/simple-chat.md#2025-04-20_snippet_6\n\nLANGUAGE: diff\nCODE:\n```\nuse Cycle\\Database\\Config;\n\nreturn [\n    'logger' => [\n        'default' => env('DB_LOGGER_DRIVER'),\n        'drivers' => [\n            // 'runtime' => 'stdout'\n        ],\n    ],\n\n+    'default' => env('DB_CONNECTION', 'default'),\n    'databases' => [\n        'default' => [\n            'driver' => 'runtime',\n        ],\n    ],\n    'drivers' => [\n-        'runtime' => new Config\\SQLiteDriverConfig(\n-            connection: new Config\\SQLite\\FileConnectionConfig(\n-                database: directory('runtime') . '/db.sqlite'\n-            ),\n-            queryCache: true\n-        ),\n+        'runtime' => new Config\\PostgresDriverConfig(\n+            connection: new Config\\Postgres\\TcpConnectionConfig(\n+                database: env('DB_DATABASE', 'homestead'),\n+                user: env('DB_USERNAME', 'homestead'),\n+                password: env('DB_PASSWORD', 'secret'),\n+                port: (int) env('DB_PORT', 5432),\n+            ),\n+            schema: 'public',\n+            queryCache: true,\n+            options: [\n+                'withDatetimeMicroseconds' => true,\n+                'logQueryParameters' => env('DB_LOG_QUERY_PARAMETERS', false),\n+            ],\n+        ),\n    ],\n];\n```\n\n----------------------------------------\n\nTITLE: Enabling Validator Bootloader (Method)\nDESCRIPTION: This code snippet demonstrates how to enable the Laravel Validator component by adding the `ValidatorBootloader` to the application's bootloaders list using the method approach. This step is crucial to register the Laravel validator with the Spiral framework.\nSOURCE: https://github.com/spiral/docs/blob/3.14/docs/zh-CN/validation/laravel.md#2025-04-20_snippet_1\n\nLANGUAGE: PHP\nCODE:\n```\npublic function defineBootloaders(): array\n{\n    return [\n        // ...\n        \\Spiral\\Validation\\Laravel\\Bootloader\\ValidatorBootloader::class,\n        // ...\n    ];\n}\n```\n\n----------------------------------------\n\nTITLE: SQL Query for Date Range Filtering\nDESCRIPTION: Demonstrates a SQL query that filters records where a specific date falls between start_date and end_date columns.\nSOURCE: https://github.com/spiral/docs/blob/3.14/docs/en/component/data-grid.md#2025-04-20_snippet_31\n\nLANGUAGE: sql\nCODE:\n```\nselect *\nfrom table_name\nwhere start_date <= '2020 Apr, 10th'\n  and end_date >= '2020 Apr, 10th';\n```\n\n----------------------------------------\n\nTITLE: Starting Schedule Worker Command in Spiral\nDESCRIPTION: Console command to initiate the schedule worker process that executes the configured cron jobs. The worker runs continuously to handle scheduled tasks.\nSOURCE: https://github.com/spiral/docs/blob/3.14/docs/en/advanced/scheduler.md#2025-04-20_snippet_17\n\nLANGUAGE: terminal\nCODE:\n```\nphp app.php schedule:work\n```\n\n----------------------------------------\n\nTITLE: Rendering a View with Complex Props in PHP Controller\nDESCRIPTION: Shows how to pass an array of values from a PHP controller to be used in a Stempler template. This allows for dynamic generation of select options.\nSOURCE: https://github.com/spiral/docs/blob/3.14/docs/en/views/stempler.md#2025-04-20_snippet_47\n\nLANGUAGE: php\nCODE:\n```\nreturn $this->views->render('home', [\n    'values' => [1 => 'first', 2 => 'second']\n]);\n```\n\n----------------------------------------\n\nTITLE: Overriding Default Bindings in Scopes in PHP\nDESCRIPTION: Demonstrates how to override default bindings when creating a new scope using the runScoped method.\nSOURCE: https://github.com/spiral/docs/blob/3.14/docs/zh-CN/container/scopes.md#2025-04-20_snippet_4\n\nLANGUAGE: php\nCODE:\n```\n$container->bindSingleton(SomeInterface::class, SomeImplementation::class);\n\n$container->runScoped(closure: function ($container) {\n    $instance = $container->get(SomeInterface::class);\n    // Your code here\n}, bindings: [SomeInterface::class => AnotherImplementation::class], name: 'request');\n```\n\n----------------------------------------\n\nTITLE: Installing Spiral Keeper via Composer\nDESCRIPTION: Command to install the Spiral Keeper dependency using Composer package manager. This is the first step in setting up Keeper for your project.\nSOURCE: https://github.com/spiral/docs/blob/3.14/docs/en/keeper/intro.md#2025-04-20_snippet_0\n\nLANGUAGE: terminal\nCODE:\n```\ncomposer require spiral/keeper\n```\n\n----------------------------------------\n\nTITLE: Updating Composer Autoload Configuration for Database Namespace\nDESCRIPTION: This diff shows how to update the composer.json file to add a new Database namespace for factories and seeders, keeping them separate from the main application code.\nSOURCE: https://github.com/spiral/docs/blob/3.14/docs/zh-CN/cookbook/simple-chat.md#2025-04-20_snippet_5\n\nLANGUAGE: diff\nCODE:\n```\n--- a/composer.json\n+++ b/composer.json\n\"autoload-dev\": {\n    \"psr-4\": {\n        \"Tests\\\\\": \"tests\",\n+       \"Database\\\\\": \"app/database\"\n    },\n    //\n},\n```\n\n----------------------------------------\n\nTITLE: Asserting File Move in Storage\nDESCRIPTION: Demonstrates how to assert that a file was moved from one location to another in storage.\nSOURCE: https://github.com/spiral/docs/blob/3.14/docs/en/testing/storage.md#2025-04-20_snippet_7\n\nLANGUAGE: php\nCODE:\n```\n$uploads = $storage->bucket('uploads');\n$uploads->assertMoved('file.txt', 'folder/file.txt');\n```\n\n----------------------------------------\n\nTITLE: Generating Timed URIs in PHP using Spiral Distribution\nDESCRIPTION: Demonstrates how to generate URIs with expiration times for services like CloudFront using additional arguments in toUri() and toUriFrom() methods.\nSOURCE: https://github.com/spiral/docs/blob/3.14/docs/en/advanced/storage.md#2025-04-20_snippet_21\n\nLANGUAGE: php\nCODE:\n```\n$uri = $file->toUri(new \\DateInterval('PT30S'));\n// And\n$uri = $file->toUriFrom($resolver, new \\DateInterval('PT30S'));\n```\n\n----------------------------------------\n\nTITLE: Adding Trait to PHP Class\nDESCRIPTION: Demonstrates how to add a trait use statement to a class declaration.\nSOURCE: https://github.com/spiral/docs/blob/3.14/docs/en/component/reactor.md#2025-04-20_snippet_7\n\nLANGUAGE: php\nCODE:\n```\n$class = new ClassDeclaration('MyClass');\n\n$class->addTrait(PrototypeTrait::class);\n\ndump((string) $class);\n```\n\n----------------------------------------\n\nTITLE: Creating a Basic CreateUser Filter\nDESCRIPTION: Command to create a CreateUser filter class. This requires the ValidationBootloader to be enabled in the application for proper functionality.\nSOURCE: https://github.com/spiral/docs/blob/3.14/docs/en/basics/scaffolding.md#2025-04-20_snippet_17\n\nLANGUAGE: terminal\nCODE:\n```\nphp app.php create:filter CreateUser\n```\n\n----------------------------------------\n\nTITLE: Implementing Doctrine Constructor Instantiator for Metadata Class\nDESCRIPTION: Example of a metadata class using the Doctrine Constructor Instantiator pattern, where all data is passed to the constructor as an array. This provides more control over how data is processed.\nSOURCE: https://github.com/spiral/docs/blob/3.14/docs/en/advanced/attributes.md#2025-04-20_snippet_15\n\nLANGUAGE: php\nCODE:\n```\n/** @Annotation */\n#[\\Attribute]\nclass CustomMetadataClass\n{\n    public function __construct(array $properties)\n    {\n        // $properties = [ \"property\" => \"value\" ]\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Rendered PHP Class with Property Output\nDESCRIPTION: Shows the output of a class declaration with a property including comments and attributes.\nSOURCE: https://github.com/spiral/docs/blob/3.14/docs/en/component/reactor.md#2025-04-20_snippet_4\n\nLANGUAGE: php\nCODE:\n```\nclass MyClass\n{\n    /**\n     * My property.\n     * @var string\n     */\n    #[SomeAttribute]\n    protected readonly string $property = 'default';\n}\n```\n\n----------------------------------------\n\nTITLE: Asserting Dispatcher Availability in Spiral Framework (PHP)\nDESCRIPTION: Demonstrates how to check if a dispatcher can be served with the current environment.\nSOURCE: https://github.com/spiral/docs/blob/3.14/docs/en/testing/start.md#2025-04-20_snippet_8\n\nLANGUAGE: php\nCODE:\n```\n$this->assertDispatcherCanBeServed(HttpDispatcher::class);\n```\n\n----------------------------------------\n\nTITLE: Configuring Generated Classes Directory\nDESCRIPTION: Configuration example showing how to change the default directory for generated classes\nSOURCE: https://github.com/spiral/docs/blob/3.14/docs/en/basics/scaffolding.md#2025-04-20_snippet_4\n\nLANGUAGE: php\nCODE:\n```\nreturn [\n    'directory' => directpry('app') . '/Generated'\n];\n```\n\n----------------------------------------\n\nTITLE: Installing Spiral Profiler Package\nDESCRIPTION: Composer command to install the Spiral profiler package as a development dependency.\nSOURCE: https://github.com/spiral/docs/blob/3.14/docs/en/basics/debug.md#2025-04-20_snippet_11\n\nLANGUAGE: terminal\nCODE:\n```\ncomposer require --dev spiral/profiler:^3.0\n```\n\n----------------------------------------\n\nTITLE: Adding Table Separator\nDESCRIPTION: Example of adding a separator row to console table.\nSOURCE: https://github.com/spiral/docs/blob/3.14/docs/en/console/commands.md#2025-04-20_snippet_13\n\nLANGUAGE: php\nCODE:\n```\n$table->addRow(new Symfony\\Component\\Console\\Helper\\TableSeparator());\n```\n\n----------------------------------------\n\nTITLE: Running Task in Background\nDESCRIPTION: Example of using the runInBackground method to run a task in the background.\nSOURCE: https://github.com/spiral/docs/blob/3.14/docs/zh-CN/advanced/scheduler.md#2025-04-20_snippet_11\n\nLANGUAGE: php\nCODE:\n```\n$schedule->command('ping', ['https://google.com'])\n   ->everyFiveMinutes()\n   ->runInBackground()\n   -> ...;\n```\n\n----------------------------------------\n\nTITLE: Verifying Singleton Behavior in Spiral Container (PHP)\nDESCRIPTION: Shows how to verify that a class marked as a singleton is indeed treated as such by the container, returning the same instance for multiple requests.\nSOURCE: https://github.com/spiral/docs/blob/3.14/docs/en/container/configuration.md#2025-04-20_snippet_23\n\nLANGUAGE: php\nCODE:\n```\nprotected function index(UserService $service): void\n{\n    dump($this->container->get(UserService::class) === $service);\n}\n```\n\n----------------------------------------\n\nTITLE: Example HTTP GET Request for Namespaced Route\nDESCRIPTION: Demonstrates a sample GET request that matches the namespaced route pattern.\nSOURCE: https://github.com/spiral/docs/blob/3.14/docs/en/http/routing.md#2025-04-20_snippet_8\n\nLANGUAGE: bash\nCODE:\n```\nGET /admin/users/index\n```\n\n----------------------------------------\n\nTITLE: Basic Post Entity Implementation with Cycle ORM\nDESCRIPTION: Initial implementation of the Post entity with primary ID and title/content columns. This entity uses Cycle ORM annotations to define the database schema and repository association.\nSOURCE: https://github.com/spiral/docs/blob/3.14/docs/en/cookbook/quick-start.md#2025-04-20_snippet_12\n\nLANGUAGE: php\nCODE:\n```\nnamespace App\\Domain\\Blog\\Entity;\n\nuse App\\Repository\\PostRepository;\nuse Cycle\\Annotated\\Annotation\\Column;\nuse Cycle\\Annotated\\Annotation\\Entity;\n\n#[Entity(repository: PostRepository::class)]\nclass Post\n{\n    #[Column(type: 'primary')]\n    public int $id;\n\n    #[Column(type: 'string')]\n    public string $title;\n\n    #[Column(type: 'text')]\n    public string $content;\n}\n```\n\n----------------------------------------\n\nTITLE: Escaping @ Symbol in Stempler Templates\nDESCRIPTION: Demonstrates how to escape the @ symbol in Stempler templates by doubling it.\nSOURCE: https://github.com/spiral/docs/blob/3.14/docs/en/views/stempler.md#2025-04-20_snippet_12\n\nLANGUAGE: php\nCODE:\n```\n@@ // -> will be rendered as '@'\n```\n\n----------------------------------------\n\nTITLE: Setting Default Route Group in PHP\nDESCRIPTION: Shows how to set a default group for all routes in the RoutesBootloader.\nSOURCE: https://github.com/spiral/docs/blob/3.14/docs/en/http/routing.md#2025-04-20_snippet_25\n\nLANGUAGE: php\nCODE:\n```\nprotected function configureRouteGroups(GroupRegistry $groups): void\n{\n    // ...\n    \n    $groups->getGroup('api')\n        ->setNamePrefix('api.')\n        ->setPrefix('/api');\n    \n    $groups->setDefaultGroup('api');\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Sentry DSN in Environment Variables\nDESCRIPTION: Demonstrates how to set the Sentry Data Source Name (DSN) using an environment variable.\nSOURCE: https://github.com/spiral/docs/blob/3.14/docs/en/basics/errors.md#2025-04-20_snippet_18\n\nLANGUAGE: dotenv\nCODE:\n```\nSENTRY_DSN=https://...\n```\n\n----------------------------------------\n\nTITLE: Running Scheduler in Foreground\nDESCRIPTION: Command to run the scheduler in the foreground using the schedule:work command.\nSOURCE: https://github.com/spiral/docs/blob/3.14/docs/zh-CN/advanced/scheduler.md#2025-04-20_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\nphp app.php schedule:work\n```\n\n----------------------------------------\n\nTITLE: Installing Scheduler Package with Composer\nDESCRIPTION: Command to install the spiral-packages/scheduler package using Composer.\nSOURCE: https://github.com/spiral/docs/blob/3.14/docs/en/advanced/scheduler.md#2025-04-20_snippet_0\n\nLANGUAGE: terminal\nCODE:\n```\ncomposer require spiral-packages/scheduler\n```\n\n----------------------------------------\n\nTITLE: Using WeakReference with String Alias in PHP\nDESCRIPTION: Demonstrates using a WeakReference binding with a string alias in the container.\nSOURCE: https://github.com/spiral/docs/blob/3.14/docs/en/container/configuration.md#2025-04-20_snippet_8\n\nLANGUAGE: php\nCODE:\n```\nuse Spiral\\Core\\Container;\nuse WeakReference;\n\npublic function boot(Container $container): void\n{\n    $object = new stdClass();\n    $hash = \\spl_object_hash($object);\n    $reference = WeakReference::create($object);\n\n    $container->bind('test-alias', $reference);\n    \n    dump($hash === \\spl_object_hash($container->get('test-alias'))); // true\n    \n    unset($object);\n    // New object can't be created because classname has not been stored\n    dump($container->get('test-alias')); // null\n}\n```\n\n----------------------------------------\n\nTITLE: Adding Database Seeder Bootloader\nDESCRIPTION: Modification of the Kernel class to include the DatabaseSeederBootloader for sample data generation.\nSOURCE: https://github.com/spiral/docs/blob/3.14/docs/en/cookbook/quick-start.md#2025-04-20_snippet_6\n\nLANGUAGE: php\nCODE:\n```\nuse Spiral\\DatabaseSeeder\\Bootloader\\DatabaseSeederBootloader;\n\nclass Kernel extends \\Spiral\\Framework\\Kernel\n{\n    public function defineBootloaders(): array\n    { \n        return [\n            // ...\n            DatabaseSeederBootloader::class,\n            // ...\n        ];\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Installing Spiral Distribution Component using Composer\nDESCRIPTION: Shows the Composer command to install the Spiral Distribution component.\nSOURCE: https://github.com/spiral/docs/blob/3.14/docs/en/advanced/storage.md#2025-04-20_snippet_22\n\nLANGUAGE: shell\nCODE:\n```\ncomposer require spiral/distribution\n```\n\n----------------------------------------\n\nTITLE: Implementing InArray and NotInArray Filters in PHP\nDESCRIPTION: Examples of InArray and NotInArray filters for checking values against arrays.\nSOURCE: https://github.com/spiral/docs/blob/3.14/docs/en/component/data-grid.md#2025-04-20_snippet_26\n\nLANGUAGE: php\nCODE:\n```\nuse Spiral\\DataGrid\\Specification\\Filter;\n\n$inArray = new Filter\\InArray('price', [2, 5]);       // the price should be in array of 2 and 5\n$notInArray = new Filter\\NotInArray('price', [2, 5]); // the price should not be in array of 2 and 5\n```\n\nLANGUAGE: php\nCODE:\n```\nuse Spiral\\DataGrid\\Specification\\Filter;\nuse Spiral\\DataGrid\\Specification\\Value;\n\n// the price should be in array of 2 and 5\n$inArray = new Filter\\InArray('price', new Value\\NumericValue());\n$inArray = $inArray->withValue(['2', '5']);\n\n// the price should not be in array of 2 and 5\n$notInArray = new Filter\\NotInArray('price', new Value\\NumericValue());\n$notInArray = $notInArray->withValue(['2', '5']);\n```\n\nLANGUAGE: php\nCODE:\n```\nuse Spiral\\DataGrid\\Specification\\Filter;\nuse Spiral\\DataGrid\\Specification\\Value;\nuse Spiral\\DataGrid\\Specification\\Value\\Accessor\\Split;\nuse Spiral\\DataGrid\\SpecificationInterface;\n\n$inArray = new Filter\\InArray('field', new Split(new Value\\ArrayValue(new Value\\IntValue()), '|'), false);\n$inArray->withValue('1|2|3')->getValue(); // [1, 2, 3]\n```\n\n----------------------------------------\n\nTITLE: Listing Scheduled Jobs via Console\nDESCRIPTION: Command to list all scheduled jobs using the console.\nSOURCE: https://github.com/spiral/docs/blob/3.14/docs/zh-CN/advanced/scheduler.md#2025-04-20_snippet_15\n\nLANGUAGE: bash\nCODE:\n```\nphp app.php schedule:list\n```\n\n----------------------------------------\n\nTITLE: Installing Filters Bootloader - PHP Constant Approach\nDESCRIPTION: Shows how to activate the filters component by adding FiltersBootloader to the kernel using the constant approach.\nSOURCE: https://github.com/spiral/docs/blob/3.14/docs/en/filters/configuration.md#2025-04-20_snippet_2\n\nLANGUAGE: php\nCODE:\n```\nprotected const LOAD = [\n    // ...\n    \\Spiral\\Bootloader\\Security\\FiltersBootloader::class,\n    // ...\n];\n```\n\n----------------------------------------\n\nTITLE: Registering Temporal Interceptors via Bootloader\nDESCRIPTION: Demonstrates registration of Temporal interceptors using a bootloader class for application initialization.\nSOURCE: https://github.com/spiral/docs/blob/3.14/docs/en/temporal/interceptors.md#2025-04-20_snippet_2\n\nLANGUAGE: php\nCODE:\n```\nnamespace App\\Application\\Bootloader;\n\nuse App\\Temporal\\Interceptors\\ActivityAttributesInterceptor;\nuse Spiral\\Boot\\Bootloader\\Bootloader;\nuse Spiral\\TemporalBridge\\Bootloader\\TemporalBridgeBootloader;\nuse Spiral\\Core\\Container\\Autowire;\n\nclass AppBootloader extends Bootloader\n{\n    public function init(TemporalBridgeBootloader $temporal): void\n    {\n        $temporal->addInterceptor(ActivityAttributesInterceptor::class);\n        // or\n        $temporal->addInterceptor(new ActivityAttributesInterceptor());\n        // or\n        $temporal->addInterceptor(new Autowire(ActivityAttributesInterceptor::class));\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Demonstrating CSRF Vulnerability with Malicious HTML Form\nDESCRIPTION: An example of a malicious HTML page that could potentially exploit a CSRF vulnerability by submitting a form to change a user's password without their knowledge.\nSOURCE: https://github.com/spiral/docs/blob/3.14/docs/en/http/csrf.md#2025-04-20_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<form action=\"https://your-application.com/user/password\" method=\"POST\">\n    <input name=\"password\" type=\"password\" value=\"secret\">\n</form>\n\n<script>\n    document.forms[0].submit();\n</script>\n```\n\n----------------------------------------\n\nTITLE: Initializing Select Filter with Multiple Values in PHP\nDESCRIPTION: Shows how to create a Select filter with string keys and select multiple filters using an array of keys in the withValue() method.\nSOURCE: https://github.com/spiral/docs/blob/3.14/docs/zh-CN/component/data-grid.md#2025-04-20_snippet_1\n\nLANGUAGE: php\nCODE:\n```\nuse Spiral\\DataGrid\\Specification\\Filter;\n\n$select = new Filter\\Select([\n    'one'  => new Filter\\Equals('name', 'value'),\n    'two'  => new Filter\\Any(\n        new Filter\\Equals('price', 2),\n        new Filter\\Gt('quantity', 5)\n    ),\n    'three' => new Filter\\Equals('email', 'email@example.com'),\n]);\n\n// 过滤器将包含包装在 'all' 规范中的两个子过滤器\n$filter = $select->withValue(['one', 'two']);\n```\n\n----------------------------------------\n\nTITLE: Triggering a Job Push from Producer Application\nDESCRIPTION: Command to push a job into the queue from the producer application by calling a console command that sends a ping job.\nSOURCE: https://github.com/spiral/docs/blob/3.14/docs/en/cookbook/simple-queue-system.md#2025-04-20_snippet_22\n\nLANGUAGE: terminal\nCODE:\n```\nphp app.php ping\n```\n\n----------------------------------------\n\nTITLE: Implementing Website Ping Activity in PHP\nDESCRIPTION: Detailed implementation of a Temporal activity for pinging a website and checking its status using cURL.\nSOURCE: https://github.com/spiral/docs/blob/3.14/docs/en/temporal/usage.md#2025-04-20_snippet_5\n\nLANGUAGE: php\nCODE:\n```\nnamespace App\\Endpoint\\Temporal\\Activity;\n\nuse React\\Promise\\PromiseInterface;\nuse Temporal\\Activity\\ActivityInterface;\nuse Temporal\\Activity\\ActivityMethod;\n\n#[ActivityInterface]\nclass PingWebsiteActivity\n{\n    /**\n     * @return PromiseInterface<bool>\n     */\n    #[ActivityMethod(name: 'ping')]\n    public function ping(string $domain): bool\n    {\n        // here we will ping the website and get the status\n        $ch = curl_init();\n        curl_setopt($ch, CURLOPT_URL, $domain);\n        curl_setopt($ch, CURLOPT_HEADER, TRUE);\n        curl_setopt($ch, CURLOPT_NOBODY, TRUE); // remove body\n        curl_setopt($ch, CURLOPT_RETURNTRANSFER, TRUE);\n        $head = curl_exec($ch);\n        $httpCode = curl_getinfo($ch, CURLINFO_HTTP_CODE);\n\n        return $httpCode === 200;\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Asserting File Non-Existence in Storage\nDESCRIPTION: Shows how to verify that a file does not exist in a storage bucket.\nSOURCE: https://github.com/spiral/docs/blob/3.14/docs/en/testing/storage.md#2025-04-20_snippet_2\n\nLANGUAGE: php\nCODE:\n```\n$uploads = $storage->bucket('uploads');\n$uploads->assertNotExist('image.jpg');\n```\n\n----------------------------------------\n\nTITLE: Registering Custom Bootloader Registry\nDESCRIPTION: Configuration file for registering custom bootloader and tokenizer registries in the discoverer.php config file. This example adds a JsonRegistry to the bootloaders array.\nSOURCE: https://github.com/spiral/docs/blob/3.14/docs/en/component/discoverer.md#2025-04-20_snippet_6\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\nuse Spiral\\Discoverer\\Bootloader as BootloaderRegistry;\nuse Spiral\\Discoverer\\Tokenizer as TokenizerRegistry;\n\nreturn [\n    'registries' => [\n        'bootloaders' => [\n            BootloaderRegistry\\ComposerRegistry::class,\n            BootloaderRegistry\\ConfigRegistry::class,\n            JsonRegistry::class,\n        ],\n        'directories' => [\n            TokenizerRegistry\\ComposerRegistry::class,\n        ],\n    ],\n];\n```\n\n----------------------------------------\n\nTITLE: Implementing Transaction Strategy for Database Tests\nDESCRIPTION: PHP class definition for a database test case using the Transaction strategy, which wraps each test in a database transaction.\nSOURCE: https://github.com/spiral/docs/blob/3.14/docs/en/testing/database.md#2025-04-20_snippet_5\n\nLANGUAGE: php\nCODE:\n```\ndeclare(strict_types=1);\n\nnamespace Tests;\n\nuse Spiral\\DatabaseSeeder\\Database\\Traits\\{\n    DatabaseAsserts, Helper, ShowQueries, Transactions\n};\n\nabstract class DatabaseTestCase extends TestCase\n{\n    use Transactions,\n        Helper,\n        DatabaseAsserts,\n        ShowQueries;\n}\n```\n\n----------------------------------------\n\nTITLE: Registering Validation Bootloader using Constants\nDESCRIPTION: This code snippet shows how to register the `ValidationBootloader` using a constant named `LOAD` within the application kernel. This method achieves the same outcome as the previous snippet, enabling the validation component.\nSOURCE: https://github.com/spiral/docs/blob/3.14/docs/zh-CN/validation/factory.md#2025-04-20_snippet_1\n\nLANGUAGE: php\nCODE:\n```\n```php app/src/Application/Kernel.php\nprotected const LOAD = [\n    // ...\n    \\Spiral\\Validation\\Bootloader\\ValidationBootloader::class,\n    // ...\n];\n```\n```\n\n----------------------------------------\n\nTITLE: JavaScript Context Template\nDESCRIPTION: Template demonstrating Stempler's context-aware escaping in JavaScript context\nSOURCE: https://github.com/spiral/docs/blob/3.14/docs/en/views/stempler.md#2025-04-20_snippet_4\n\nLANGUAGE: php\nCODE:\n```\n<script>\\n    const value = {{ $name }};\\n</script>\n```\n\n----------------------------------------\n\nTITLE: View Translation Syntax Example\nDESCRIPTION: Example of using translation syntax in HTML templates\nSOURCE: https://github.com/spiral/docs/blob/3.14/docs/en/advanced/i18n.md#2025-04-20_snippet_9\n\nLANGUAGE: html\nCODE:\n```\n[[hello world]]\n```\n\n----------------------------------------\n\nTITLE: Basic Golang gRPC Client Implementation\nDESCRIPTION: Simple Golang client implementation for making gRPC calls to the Pinger service.\nSOURCE: https://github.com/spiral/docs/blob/3.14/docs/en/grpc/client.md#2025-04-20_snippet_3\n\nLANGUAGE: golang\nCODE:\n```\npackage main\n\nimport (\n\t\"context\"\n\t\"fmt\"\n\t\"log\"\n\n\t\"google.golang.org/grpc\"\n\t\"pinger\"\n)\n\nfunc main() {\n\t// Set up a connection to the server.\n\tconn, err := grpc.Dial(\"127.0.0.1:9001\", grpc.WithInsecure())\n\tif err != nil {\n\t\tlog.Fatalf(\"did not connect: %v\", err)\n\t}\n\t\n\tdefer conn.Close()\n\n\tclient := pinger.NewPingerClient(conn)\n\n\t// Call the ping method.\n\tresponse, err := client.Ping(context.Background(), &pinger.PingRequest{\n\t\tUrl: \"https://google.com\",\n\t})\n\n\tif err != nil {\n\t\tlog.Fatalf(\"error calling ping: %v\", err)\n\t}\n\n\t// Print the HTTP status code.\n\tfmt.Println(response.StatusCode)\n}\n```\n\n----------------------------------------\n\nTITLE: Using Skip Callback in Scheduled Task\nDESCRIPTION: Example of using the skip method to conditionally skip a scheduled task.\nSOURCE: https://github.com/spiral/docs/blob/3.14/docs/zh-CN/advanced/scheduler.md#2025-04-20_snippet_10\n\nLANGUAGE: php\nCODE:\n```\n$schedule->command('email:digest')\n   ->everyFiveMinutes()\n   ->skip(static fn(HolidaysCalendar $calendar) => $calendar->isHoliday());\n   -> ...;\n```\n\n----------------------------------------\n\nTITLE: Downloading GRPC Protoc Binary with RoadRunner CLI\nDESCRIPTION: Terminal command to download the protoc-gen-php-grpc binary using the RoadRunner CLI tool.\nSOURCE: https://github.com/spiral/docs/blob/3.14/docs/en/grpc/configuration.md#2025-04-20_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\n./vendor/bin/rr download-protoc-binary\n```\n\n----------------------------------------\n\nTITLE: JavaScript RPC Client Implementation\nDESCRIPTION: Example of using Centrifugo RPC methods from JavaScript client\nSOURCE: https://github.com/spiral/docs/blob/3.14/docs/en/websockets/services.md#2025-04-20_snippet_13\n\nLANGUAGE: javascript\nCODE:\n```\nimport {Centrifuge} from 'centrifuge';\n\nconst centrifuge = new Centrifuge('http://127.0.0.18000/connection/websocket');\n\n// Post request\ncentrifuge.rpc(\"post:news/store\", {\"title\": \"News title\"}).then(function (res) {\n    console.log('rpc result', res);\n}, function (err) {\n    console.error('rpc error', err);\n});\n\n// Get request with query params\ncentrifuge.rpc(\"get:news/123\", {\"lang\": \"en\"}).then(function (res) {\n    console.log('rpc result', res);\n}, function (err) {\n    console.error('rpc error', err);\n});\n```\n\n----------------------------------------\n\nTITLE: Creating Centrifugo Subscribe Handler - Terminal Command\nDESCRIPTION: Command to create a new Subscribe handler service class for Centrifugo\nSOURCE: https://github.com/spiral/docs/blob/3.14/docs/en/websockets/services.md#2025-04-20_snippet_5\n\nLANGUAGE: terminal\nCODE:\n```\nphp app.php create:centrifugo-handler Subscribe -t=subscribe\n```\n\n----------------------------------------\n\nTITLE: Reading Parameter Metadata with Attributes\nDESCRIPTION: Examples of how to read parameter metadata using the ReaderInterface methods.\nSOURCE: https://github.com/spiral/docs/blob/3.14/docs/zh-CN/advanced/attributes.md#2025-04-20_snippet_7\n\nLANGUAGE: php\nCODE:\n```\n$reflection = new ReflectionParameter('send_email', 'email');\n\n$attributes = $reader->getParameterMetadata($reflection); \n// returns iterable<object>\n```\n\nLANGUAGE: php\nCODE:\n```\n$reflection = new ReflectionParameter('send_email', 'email');\n\n$attributes = $reader->getParameterMetadata($reflection, PreCondition::class); \n// returns iterable<PreCondition>\n```\n\nLANGUAGE: php\nCODE:\n```\n$reflection = new ReflectionParameter('send_email', 'email');\n\n$getter = $reader->firstConstantMetadata($reflection, PreCondition::class); \n// returns PreCondition|null\n```\n\n----------------------------------------\n\nTITLE: Registering I18nBootloader Using Method\nDESCRIPTION: Example of registering the I18nBootloader in the application kernel using the defineBootloaders method\nSOURCE: https://github.com/spiral/docs/blob/3.14/docs/en/advanced/i18n.md#2025-04-20_snippet_1\n\nLANGUAGE: php\nCODE:\n```\npublic function defineBootloaders(): array\n{\n    return [\n        // ...\n        \\Spiral\\Bootloader\\I18nBootloader::class,\n        // ...\n    ];\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Authenticated User in FakeHttp Requests in PHP\nDESCRIPTION: This code shows how to set an authenticated user for FakeHttp requests in Spiral using the withActor method.\nSOURCE: https://github.com/spiral/docs/blob/3.14/docs/en/testing/http.md#2025-04-20_snippet_8\n\nLANGUAGE: php\nCODE:\n```\n$http = $this->fakeHttp();\n\n$user = new User();\n$http->withActor($user)->get('/profile');\n```\n\n----------------------------------------\n\nTITLE: Warming Up Views Cache\nDESCRIPTION: Command to warmup the view cache\nSOURCE: https://github.com/spiral/docs/blob/3.14/docs/en/views/configuration.md#2025-04-20_snippet_5\n\nLANGUAGE: terminal\nCODE:\n```\nphp app.php views:compile\n```\n\n----------------------------------------\n\nTITLE: Defining Lazy Singleton using SingletonInterface\nDESCRIPTION: Demonstrates how to define a lazy singleton by implementing the SingletonInterface.\nSOURCE: https://github.com/spiral/docs/blob/3.14/docs/zh-CN/container/configuration.md#2025-04-20_snippet_20\n\nLANGUAGE: php\nCODE:\n```\nuse Spiral\\Core\\Container\\SingletonInterface;\n\nfinal class UserService implements SingletonInterface\n{\n    public function store(User $user): void\n    {\n        //...\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Output of Scheduled Tasks List\nDESCRIPTION: Example output showing the list of scheduled tasks with their intervals and next execution times.\nSOURCE: https://github.com/spiral/docs/blob/3.14/docs/en/advanced/scheduler.md#2025-04-20_snippet_7\n\nLANGUAGE: output\nCODE:\n```\n+--------------------------------------------------------+-------------+-------------+----------------------------+\n|[32m Command                                                [39m|[32m Interval    [39m|[32m Description [39m|[32m Next Due                   [39m|\n+--------------------------------------------------------+-------------+-------------+----------------------------+\n| /usr/bin/php8.1 app.php ping 'https://google.com'      | */5 * * * * |             | 2023-01-12 12:55:00 +00:00 |\n| /usr/bin/php8.1 app.php ping:site 'https://google.com' | */5 * * * * | Ping site   | 2023-01-12 12:55:00 +00:00 |\n| callback: 'url'                                        | */5 * * * * | Ping url    | 2023-01-12 12:55:00 +00:00 |\n+--------------------------------------------------------+-------------+-------------+----------------------------+\n```\n\n----------------------------------------\n\nTITLE: Customized DataGrid Output in JSON\nDESCRIPTION: Demonstrates the customized JSON output structure for a DataGrid with modified status code and property name.\nSOURCE: https://github.com/spiral/docs/blob/3.14/docs/en/http/interceptors.md#2025-04-20_snippet_17\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"status\": 201,\n  \"users\": [\n    ...\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Asserting Dispatcher Registration in Spiral Framework (PHP)\nDESCRIPTION: Demonstrates how to check if a specific dispatcher is not registered in the application.\nSOURCE: https://github.com/spiral/docs/blob/3.14/docs/en/testing/start.md#2025-04-20_snippet_6\n\nLANGUAGE: php\nCODE:\n```\n$this->assertDispatcherMissed(HttpDispatcher::class);\n```\n\n----------------------------------------\n\nTITLE: Default Controller Configuration in PHP\nDESCRIPTION: Shows configuration examples for setting up default controllers and actions in Keeper routing system.\nSOURCE: https://github.com/spiral/docs/blob/3.14/docs/en/keeper/routing.md#2025-04-20_snippet_4\n\nLANGUAGE: php\nCODE:\n```\nreturn [\n     'routeDefaults' => ['controller' => 'App\\Admin\\Controller'],\n];\n```\n\n----------------------------------------\n\nTITLE: Configuring Bridge Bootloader Using Constant\nDESCRIPTION: Adding the BridgeBootloader to the Kernel using a constant definition\nSOURCE: https://github.com/spiral/docs/blob/3.14/docs/en/basics/orm.md#2025-04-20_snippet_2\n\nLANGUAGE: php\nCODE:\n```\nprotected const LOAD = [\n    // ...\n    \\Spiral\\Cycle\\Bootloader\\BridgeBootloader::class,\n    // ...\n];\n```\n\n----------------------------------------\n\nTITLE: Defining User Entity with Unique Username Index in PHP\nDESCRIPTION: This class represents a user entity with Cycle ORM annotations, including a unique index on the username field. It handles user authentication data and implements JsonSerializable.\nSOURCE: https://github.com/spiral/docs/blob/3.14/docs/zh-CN/cookbook/simple-chat.md#2025-04-20_snippet_2\n\nLANGUAGE: php\nCODE:\n```\nnamespace App\\Database;\n\nuse App\\Repository\\UserRepository;\nuse Cycle\\Annotated\\Annotation\\Column;\nuse Cycle\\Annotated\\Annotation\\Entity;\nuse Cycle\\Annotated\\Annotation\\Table\\Index;\n\n#[Entity(repository: UserRepository::class)]\n#[Index(columns: ['username'], unique: true)]\nclass User implements \\JsonSerializable\n{\n    #[Column(type: 'primary')]\n    private int $id;\n\n    public function __construct(\n        #[Column(type: \"string\")]\n        private string $username,\n        #[Column(type: \"string\")]\n        private string $password,\n    ) {\n    }\n\n    public function getId(): int\n    {\n        return $this->id;\n    }\n\n    public function getPassword(): string\n    {\n        return $this->password;\n    }\n\n    public function jsonSerialize(): array\n    {\n        return [\n            'id' => $this->id,\n            'username' => $this->username,\n        ];\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Route Generation Directive\nDESCRIPTION: Utility directive for generating URIs within specified namespaces.\nSOURCE: https://github.com/spiral/docs/blob/3.14/docs/zh-CN/keeper/views.md#2025-04-20_snippet_2\n\nLANGUAGE: html\nCODE:\n```\n<a href=\"@keeper('admin', 'createUser')\">[[+ User]]</a>\n```\n\n----------------------------------------\n\nTITLE: Starting RoadRunner Server on Linux\nDESCRIPTION: Command to start the RoadRunner application server on Linux systems. Ensures the 'rr' binary is executable.\nSOURCE: https://github.com/spiral/docs/blob/3.14/docs/en/start/installation.md#2025-04-20_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n./rr serve\n```\n\n----------------------------------------\n\nTITLE: Using When Callback in Scheduled Task\nDESCRIPTION: Example of using the when method to conditionally run a scheduled task.\nSOURCE: https://github.com/spiral/docs/blob/3.14/docs/zh-CN/advanced/scheduler.md#2025-04-20_snippet_9\n\nLANGUAGE: php\nCODE:\n```\n$schedule->command('email:digest')\n   ->everyFiveMinutes()\n   ->when(static fn(HolidaysCalendar $calendar) => !$calendar->isHoliday());\n   -> ...;\n```\n\n----------------------------------------\n\nTITLE: Alternative Worker Options Configuration with Exception Interceptor\nDESCRIPTION: PHP code demonstrating an alternative way to configure worker options including an exception interceptor.\nSOURCE: https://github.com/spiral/docs/blob/3.14/docs/en/temporal/configuration.md#2025-04-20_snippet_8\n\nLANGUAGE: php\nCODE:\n```\nuse Temporal\\Worker\\WorkerOptions;\n\nreturn [\n    // ...\n    'workers' => [\n        'workerName' => [\n            'options' => WorkerOptions::new(),\n            'exception_interceptor' => new ExceptionInterceptor(),\n        ]\n    ],\n];\n```\n\n----------------------------------------\n\nTITLE: Configuring Controller Route Target in PHP\nDESCRIPTION: Sets up a route target for all actions of a specific controller. It requires an 'action' parameter in the route pattern.\nSOURCE: https://github.com/spiral/docs/blob/3.14/docs/en/http/routing.md#2025-04-20_snippet_10\n\nLANGUAGE: php\nCODE:\n```\n$routes->add(name: 'user', pattern: '/user/<action>')\n    ->controller(controller: UserController::class);\n```\n\n----------------------------------------\n\nTITLE: Broadcasting Configuration File Setup\nDESCRIPTION: Configuration file setup for broadcasting drivers including log and null drivers with their respective settings.\nSOURCE: https://github.com/spiral/docs/blob/3.14/docs/en/websockets/broadcasting.md#2025-04-20_snippet_3\n\nLANGUAGE: php\nCODE:\n```\nuse Spiral\\Broadcasting\\Driver\\LogBroadcast;\nuse Spiral\\Broadcasting\\Driver\\NullBroadcast;\n\nreturn [\n    'default' => 'log',\n    'authorize' => [],\n    'aliases' => [],\n    'connections' => [\n        'log' => [\n            'driver' => 'log',\n        ],\n        'null' => [\n            'driver' => NullBroadcast::class,\n        ],\n    ],\n    'driverAliases' => [\n        'log' => LogBroadcast::class,\n    ],\n];\n```\n\n----------------------------------------\n\nTITLE: Reading Class Metadata with Attributes\nDESCRIPTION: Examples of how to read class metadata using the ReaderInterface methods.\nSOURCE: https://github.com/spiral/docs/blob/3.14/docs/zh-CN/advanced/attributes.md#2025-04-20_snippet_3\n\nLANGUAGE: php\nCODE:\n```\n$reflection = new ReflectionClass(User::class);\n\n$attributes = $reader->getClassMetadata($reflection); \n// returns iterable<object>\n```\n\nLANGUAGE: php\nCODE:\n```\n$reflection = new ReflectionClass(User::class);\n\n$attributes = $reader->getClassMetadata($reflection, Entity::class); \n// returns iterable<Entity>\n```\n\nLANGUAGE: php\nCODE:\n```\n$reflection = new ReflectionClass(User::class);\n\n$attribute = $reader->firstClassMetadata($reflection, Entity::class); \n// returns Entity|null\n```\n\n----------------------------------------\n\nTITLE: Executing Database Seeder in Spiral Framework via Terminal\nDESCRIPTION: This command runs the database seeder to populate the database with test records using the previously defined BlogSeeder.\nSOURCE: https://github.com/spiral/docs/blob/3.14/docs/en/cookbook/quick-start.md#2025-04-20_snippet_31\n\nLANGUAGE: terminal\nCODE:\n```\nphp app.php db:seed\n```\n\n----------------------------------------\n\nTITLE: Installing Spiral Dumper Package via Composer\nDESCRIPTION: Command to install the spiral/dumper package which is designed to work with RoadRunner's long-running processes.\nSOURCE: https://github.com/spiral/docs/blob/3.14/docs/en/basics/debug.md#2025-04-20_snippet_0\n\nLANGUAGE: terminal\nCODE:\n```\ncomposer require --dev spiral/dumper\n```\n\n----------------------------------------\n\nTITLE: Debugging Multiple Variables with Twig\nDESCRIPTION: Twig template example demonstrating how to debug multiple variables using the dump() function.\nSOURCE: https://github.com/spiral/docs/blob/3.14/docs/en/views/twig.md#2025-04-20_snippet_11\n\nLANGUAGE: twig\nCODE:\n```\n{{ dump(cats, dogs, birds) }}\n```\n\n----------------------------------------\n\nTITLE: Preventing Task Overlap\nDESCRIPTION: Example of using the withoutOverlapping method to prevent task overlap.\nSOURCE: https://github.com/spiral/docs/blob/3.14/docs/zh-CN/advanced/scheduler.md#2025-04-20_snippet_12\n\nLANGUAGE: php\nCODE:\n```\n$schedule->command('ping', ['https://google.com'])\n   ->everyMinute()\n   ->withoutOverlapping()\n   -> ...;\n```\n\n----------------------------------------\n\nTITLE: Default CSRF Configuration in Spiral\nDESCRIPTION: The default configuration for CSRF protection in Spiral, including cookie name, token length, lifetime, and security settings.\nSOURCE: https://github.com/spiral/docs/blob/3.14/docs/en/http/csrf.md#2025-04-20_snippet_4\n\nLANGUAGE: php\nCODE:\n```\nreturn [\n    'cookie'   => 'csrf-token',\n    'length'   => 16,\n    'lifetime' => 86400,\n    'secure'   => true,\n    'sameSite' => null,\n];\n```\n\n----------------------------------------\n\nTITLE: Velox Configuration for Building Custom RoadRunner Binary\nDESCRIPTION: TOML configuration file for Velox, the RoadRunner builder tool, to build a custom binary with the ticker plugin and other required plugins.\nSOURCE: https://github.com/spiral/docs/blob/3.14/docs/en/cookbook/custom-dispatcher.md#2025-04-20_snippet_3\n\nLANGUAGE: toml\nCODE:\n```\n[velox]\nbuild_args = ['-trimpath', '-ldflags', '-s -X github.com/roadrunner-server/roadrunner/v2/internal/meta.version=v2.12.1.custom -X github.com/roadrunner-server/roadrunner/v2/internal/meta.buildTime=00:00:00']\n\n[roadrunner]\nref = \"v2.12.1\"\n\n[github]\n[github.token]\ntoken = \"xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx\"\n\n# ref -> master, commit or tag\n[github.plugins]\nlogger = { ref = \"master\", owner = \"roadrunner-server\", repository = \"logger\" }\nserver = { ref = \"master\", owner = \"roadrunner-server\", repository = \"server\" }\nticker = { ref = \"main\", owner = \"roadrunner-php\", repository = \"rr-examples\", folder = \"ticker\" }\n\n\n[log]\nlevel = \"debug\"\nmode = \"development\"\n```\n\n----------------------------------------\n\nTITLE: Installing Symfony VarDumper Package\nDESCRIPTION: Command to install the symfony/var-dumper package which offers an alternative debugging approach with a standalone server.\nSOURCE: https://github.com/spiral/docs/blob/3.14/docs/en/basics/debug.md#2025-04-20_snippet_5\n\nLANGUAGE: terminal\nCODE:\n```\ncomposer require --dev symfony/var-dumper\n```\n\n----------------------------------------\n\nTITLE: Grid Data Structure Example\nDESCRIPTION: Example JSON response structure for the grid template.\nSOURCE: https://github.com/spiral/docs/blob/3.14/docs/zh-CN/keeper/views.md#2025-04-20_snippet_7\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"status\": 200,\n  \"data\": [\n    {\n      \"firstName\": \"John\",\n      \"lastName\": \"Smith\",\n      \"email\": \"john@smith.com\",\n      \"showEmail\": true,\n      \"status\": \"active\"\n    }\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Filters with Symfony Validator\nDESCRIPTION: Example of creating a filter class using the Symfony validator bridge with attribute-based validation constraints for form inputs.\nSOURCE: https://github.com/spiral/docs/blob/3.14/docs/en/filters/filter.md#2025-04-20_snippet_1\n\nLANGUAGE: php\nCODE:\n```\nnamespace App\\Endpoint\\Web\\Filter;\n\nuse Psr\\Http\\Message\\UploadedFileInterface;\nuse Spiral\\Filters\\Attribute\\Input\\Post;\nuse Spiral\\Validation\\Symfony\\Attribute\\Input\\File;\nuse Spiral\\Validation\\Symfony\\AttributesFilter;\nuse Symfony\\Component\\HttpFoundation\\File\\UploadedFile;\nuse Symfony\\Component\\Validator\\Constraints;\n\nfinal class CreatePostFilter extends AttributesFilter\n{\n    #[Post]\n    #[Constraints\\NotBlank]\n    #[Constraints\\Length(min: 5)]\n    public string $title;\n\n    #[Post]\n    #[Constraints\\NotBlank]\n    #[Constraints\\Length(min: 5)]\n    public string $slug;\n\n    #[Post]\n    #[Constraints\\NotBlank]\n    #[Constraints\\Positive]\n    public int $sort;\n    \n    #[File]\n    #[Constraints\\Image]\n    public UploadedFile $image;\n}\n```\n\n----------------------------------------\n\nTITLE: Demonstrating InputBag Behavior Changes in PHP\nDESCRIPTION: Shows the updated behavior of the InputBag class regarding keys with null values, highlighting the difference between the 'has' method and 'isset'.\nSOURCE: https://github.com/spiral/docs/blob/3.14/docs/en/cookbook/migration-from-v2.md#2025-04-20_snippet_6\n\nLANGUAGE: php\nCODE:\n```\nuse Spiral\\Http\\Request\\InputBag;\n\n$bag = new InputBag([4 => null]);\n\n$bag->has(4); // true\nisset($bag[4]); // false\n```\n\n----------------------------------------\n\nTITLE: 自定义会话工厂接口 - PHP\nDESCRIPTION: 定义了用于初始化会话的 SessionFactoryInterface 接口。这个接口包含一个 initSession 方法，用于创建新的会话实例。\nSOURCE: https://github.com/spiral/docs/blob/3.14/docs/zh-CN/basics/session.md#2025-04-20_snippet_6\n\nLANGUAGE: php\nCODE:\n```\nnamespace Spiral\\Session;\n\ninterface SessionFactoryInterface\n{\n    /**\n     * @param string $clientSignature User specific token, does not provide full security but\n     *                                     hardens session transfer.\n     * @param string|null $id When null - expect php to create session automatically.\n     */\n    public function initSession(string $clientSignature, string $id = null): SessionInterface;\n}\n```\n\n----------------------------------------\n\nTITLE: Creating UserTableSeeder for Database Population in PHP\nDESCRIPTION: This seeder class creates specific user records ('john' and 'bill') using the UserFactory for database seeding. It extends AbstractSeeder and implements the run method.\nSOURCE: https://github.com/spiral/docs/blob/3.14/docs/zh-CN/cookbook/simple-chat.md#2025-04-20_snippet_10\n\nLANGUAGE: terminal\nCODE:\n```\nphp app.php create:seeder UserTableSeeder\n```\n\nLANGUAGE: php\nCODE:\n```\nnamespace Database\\Seeder;\n\nuse Database\\Factory\\UserFactory;\nuse Spiral\\DatabaseSeeder\\Seeder\\AbstractSeeder;\n\nfinal class UserTableSeeder extends AbstractSeeder\n{\n    public function run(): \\Generator\n    {\n        yield UserFactory::new(['username' => 'john'])->makeOne();\n        yield UserFactory::new(['username' => 'bill'])->makeOne();\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Registering Validation Bootloader using methods\nDESCRIPTION: This snippet demonstrates how to register the `ValidationBootloader` within the `defineBootloaders` method of the application kernel. This registration enables the validation component within the Spiral application.\nSOURCE: https://github.com/spiral/docs/blob/3.14/docs/zh-CN/validation/factory.md#2025-04-20_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n```php app/src/Application/Kernel.php\npublic function defineBootloaders(): array\n{\n    return [\n        // ...\n        \\Spiral\\Validation\\Bootloader\\ValidationBootloader::class,\n        // ...\n    ];\n}\n```\n```\n\n----------------------------------------\n\nTITLE: Using Alias Binding\nDESCRIPTION: Shows how to create an alias binding in the container.\nSOURCE: https://github.com/spiral/docs/blob/3.14/docs/zh-CN/container/configuration.md#2025-04-20_snippet_11\n\nLANGUAGE: php\nCODE:\n```\nuse Spiral\\Core\\Config\\Alias;\n\n$container->bind(\n    \\DatetimeImmutable::class, \n    static fn() => new \\DatetimeImmutable()\n);\n\n$container->bind(\n    'now', \n    new Alias(alias: \\DatetimeImmutable::class)\n);\n```\n\n----------------------------------------\n\nTITLE: Configuring Cron to Run schedule:run Command\nDESCRIPTION: Cron configuration to run the schedule:run command every minute.\nSOURCE: https://github.com/spiral/docs/blob/3.14/docs/zh-CN/advanced/scheduler.md#2025-04-20_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\n* * * * * cd /path-to-your-project && php app.php schedule:run >> /dev/null 2>&1\n```\n\n----------------------------------------\n\nTITLE: Mailer Environment Configuration\nDESCRIPTION: Environment variables configuration for the mailer component including DSN, from address, and queue settings.\nSOURCE: https://github.com/spiral/docs/blob/3.14/docs/en/advanced/sendit.md#2025-04-20_snippet_2\n\nLANGUAGE: dotenv\nCODE:\n```\nMAILER_DSN=smtp://username:password@example.com:25\nMAILER_FROM=John Smith\n\nMAILER_QUEUE_CONNECTION=roadrunner\nMAILER_QUEUE=emails\n```\n\n----------------------------------------\n\nTITLE: Registering TranslatedCacheBootloader\nDESCRIPTION: Examples of registering the TranslatedCacheBootloader for view translation support\nSOURCE: https://github.com/spiral/docs/blob/3.14/docs/en/advanced/i18n.md#2025-04-20_snippet_8\n\nLANGUAGE: php\nCODE:\n```\npublic function defineBootloaders(): array\n{\n    return [\n         // ...\n         \\Spiral\\Views\\Bootloader\\ViewsBootloader::class,\n         \\Spiral\\Bootloader\\Views\\TranslatedCacheBootloader::class,\n         // ...\n    ];\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Scaffolder Bootloader using Constant\nDESCRIPTION: Example showing how to add ScaffolderBootloader to the bootloader list using a constant approach in the Kernel class\nSOURCE: https://github.com/spiral/docs/blob/3.14/docs/en/basics/scaffolding.md#2025-04-20_snippet_1\n\nLANGUAGE: php\nCODE:\n```\nprotected const LOAD = [\n    // ...\n    \\Spiral\\Scaffolder\\Bootloader\\ScaffolderBootloader::class,\n    // ...\n];\n```\n\n----------------------------------------\n\nTITLE: Updating Connect Handler - PHP Diff\nDESCRIPTION: Modifications to simplify ConnectHandler by leveraging the new authentication interceptor\nSOURCE: https://github.com/spiral/docs/blob/3.14/docs/en/cookbook/simple-chat.md#2025-04-20_snippet_47\n\nLANGUAGE: diff\nCODE:\n```\nnamespace App\\Endpoint\\Centrifugo;\n\nuse App\\Entity\\User;\nuse RoadRunner\\Centrifugo\\Payload\\ConnectResponse;\nuse RoadRunner\\Centrifugo\\Request\\Connect;\nuse RoadRunner\\Centrifugo\\Request\\RequestInterface;\nuse Spiral\\Auth\\ActorProviderInterface;\nuse Spiral\\Prototype\\Traits\\PrototypeTrait;\nuse Spiral\\RoadRunnerBridge\\Centrifugo\\ServiceInterface;\n\nfinal class ConnectHandler implements ServiceInterface\n{\n    use PrototypeTrait;\n\n-   public function __construct(\n-       private readonly ActorProviderInterface $actorProvider,\n-   ) {\n-   }\n\n    /** @param Connect $request */\n    public function handle(RequestInterface $request): void\n    {\n        try {\n-           // Authenticate user with a given token from the connection request\n-           $authToken = $request->getData()['authToken'] ?? null;\n-           if ($authToken && $user = $this->getActor($authToken)) {\n-               $userId = $user->getId();\n-           } else {\n-               $request->error(403, 'Forbidden');\n-               return;\n-           }\n+           $user = $this->auth->getActor();\n\n            $request->respond(\n                new ConnectResponse(\n+                   user: (string)$user->getId(),\n                    data: ['user' => $user->jsonSerialize()],\n                    channels: ['chat'],\n                ),\n            );\n        } catch (\\Throwable $e) {\n            $request->error($e->getCode(), $e->getMessage());\n        }\n    }\n\n-   public function getActor(?string $authToken): ?User\n-   {\n-       ...\n-   }\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Console Command with Arguments and Options\nDESCRIPTION: Shows how to create a console command with custom arguments and options using -a and -o flags. Generates a command class with defined arguments, options, and questions.\nSOURCE: https://github.com/spiral/docs/blob/3.14/docs/en/basics/scaffolding.md#2025-04-20_snippet_10\n\nLANGUAGE: terminal\nCODE:\n```\nphp app.php create:command UserRegister -a username -a password -o isAdmin\n```\n\nLANGUAGE: php\nCODE:\n```\ndeclare(strict_types=1);\n\nnamespace App\\Endpoint\\Console;\n\nuse Spiral\\Console\\Attribute\\Argument;\nuse Spiral\\Console\\Attribute\\AsCommand;\nuse Spiral\\Console\\Attribute\\Option;\nuse Spiral\\Console\\Attribute\\Question;\nuse Spiral\\Console\\Command;\n\n#[AsCommand(name: 'user:register')]\nfinal class UserRegisterCommand extends Command\n{\n    #[Argument(description: 'Argument description')]\n    #[Question(question: 'What would you like to name the username argument?')]\n    private string $username;\n\n    #[Argument(description: 'Argument description')]\n    #[Question(question: 'What would you like to name the password argument?')]\n    private string $password;\n\n    #[Option(description: 'Argument description')]\n    private bool $isAdmin;\n\n    public function __invoke(): int\n    {\n        // Put your command logic here\n        $this->info('Command logic is not implemented yet');\n\n        return self::SUCCESS;\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Mixed Syntax Annotation Class\nDESCRIPTION: Example of creating an annotation class using mixed syntax for compatibility with different PHP versions.\nSOURCE: https://github.com/spiral/docs/blob/3.14/docs/zh-CN/advanced/attributes.md#2025-04-20_snippet_8\n\nLANGUAGE: php\nCODE:\n```\n/**\n * @Annotation\n * @Target({ \"CLASS\" })\n */\n#[\\Attribute(\\Attribute::TARGET_CLASS)]\nclass MyEntityMetadata\n{\n    public string $table;\n}\n```\n\n----------------------------------------\n\nTITLE: 使用会话分区 - PHP\nDESCRIPTION: 展示如何使用会话分区来存储和检索数据。这个例子创建了一个名为 'cart' 的分区，并在其中设置了一些数据。\nSOURCE: https://github.com/spiral/docs/blob/3.14/docs/zh-CN/basics/session.md#2025-04-20_snippet_1\n\nLANGUAGE: php\nCODE:\n```\npublic function index(SessionInterface $session): void\n{\n    $cart = $session->getSection('cart');\n\n    $cart->set('items', ['my-items']);\n\n    dump($cart->getAll());\n}\n```\n\n----------------------------------------\n\nTITLE: Grid Template Implementation\nDESCRIPTION: Complex grid template for creating tables with filtering, sorting, and custom cell rendering.\nSOURCE: https://github.com/spiral/docs/blob/3.14/docs/zh-CN/keeper/views.md#2025-04-20_snippet_6\n\nLANGUAGE: html\nCODE:\n```\n<block:content>\n    <ui:grid url=\"@action('users.list')\">\n        <grid:filter search=\"true\" immediate=\"300\" buttons=\"true\">\n            @auth('keeper.permision')\n            <form:select name=\"status\" label=\"[[Status]]\" placeholder=\"[[Select Status]]\"\n                         values=\"{{ ['active' => '[[Active]]', 'disabled' => '[[Disabled]]'] }}\"/>\n            @endauth\n        </grid:filter>\n\n        <grid:cell.text name=\"first_name\" label=\"[[First Name]]\" sort=\"true\" body=\"{firstName}\" sort-dir=\"asc\"\n                        sort-default=\"true\"/>\n        <grid:cell.text name=\"last_name\" label=\"[[Last Name]]\" sort=\"true\" body=\"{lastName}\"/>\n        <grid:cell.link name=\"email\" label=\"[[Email]]\" href=\"mailto:{email}\" body=\"{email}\" sort=\"true\"\n                        condition=\"showEmail\"/>\n        <grid:cell.render name=\"status\" label=\"[[Status]]\" renderer=\"status\"/>\n\n        <grid:action.link label=\"[[Edit]]\" icon=\"edit\" url=\"@action('users.edit', ['user' => '{id}'])\"\n                          permission=\"keeper.users.view\"/>\n    </ui:grid>\n</block:content>\n<stack:push name=\"scripts\" unique-id=\"datagrid-account-renderer\">\n    <script type=\"text/javascript\">\n        SFToolkit.tools._datagrid.register('status', function () {\n            return function (status, item) {\n                let map = {\n                    \"active\": 'badge-primary',\n                    \"disabled\": 'badge-warning',\n                }\n                let badge = (status.toLowerCase() in map) ? map[status.toLowerCase()] : 'badge-secondary';\n                return '<span class=\"badge ' + badge + ' mr-1\">' + status.toUpperCase() + '</span>';\n            }\n        });\n    </script>\n</stack:push>\n```\n\n----------------------------------------\n\nTITLE: Viewing Generated Database Tables in Spiral\nDESCRIPTION: This command lists all the generated database tables in a Spiral application.\nSOURCE: https://github.com/spiral/docs/blob/3.14/docs/en/cookbook/simple-chat.md#2025-04-20_snippet_22\n\nLANGUAGE: terminal\nCODE:\n```\nphp app.php db:list\n```\n\n----------------------------------------\n\nTITLE: Creating a Console Command for Queue Jobs\nDESCRIPTION: Terminal command to create a console command for pushing jobs to the queue.\nSOURCE: https://github.com/spiral/docs/blob/3.14/docs/en/start/queue-basics.md#2025-04-20_snippet_5\n\nLANGUAGE: terminal\nCODE:\n```\nphp app.php create:command PingSite\n```\n\n----------------------------------------\n\nTITLE: Compiling Proto File for Go\nDESCRIPTION: Command to compile the .proto definition file into Go code using the protoc compiler with the gRPC plugin, generating the necessary client stubs and message types.\nSOURCE: https://github.com/spiral/docs/blob/3.14/docs/zh-CN/grpc/client.md#2025-04-20_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\nprotoc -I proto/ proto/pinger.proto --go_out=plugins=grpc:pinger\n```\n\n----------------------------------------\n\nTITLE: Implementing Custom Authentication Firewall in PHP\nDESCRIPTION: Example showing how to create a custom firewall by extending AbstractFirewall class. The implementation requires defining a constructor for dependencies and implementing the denyAccess method to handle unauthorized requests.\nSOURCE: https://github.com/spiral/docs/blob/3.14/docs/en/security/authentication.md#2025-04-20_snippet_24\n\nLANGUAGE: php\nCODE:\n```\nfinal class CustomFirewall extends AbstractFirewall\n{\n    public function __construct(\n        // args...\n    ) {\n    }\n\n    protected function denyAccess(Request $request, RequestHandlerInterface $handler): ResponseInterface\n    {\n        // return response\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Installing Twig Bridge Component via Composer\nDESCRIPTION: Command to install the Twig bridge component using Composer package manager.\nSOURCE: https://github.com/spiral/docs/blob/3.14/docs/en/views/twig.md#2025-04-20_snippet_0\n\nLANGUAGE: terminal\nCODE:\n```\ncomposer require spiral/twig-bridge\n```\n\n----------------------------------------\n\nTITLE: Starting the RoadRunner Server\nDESCRIPTION: Command to start the RoadRunner server that will process the queued jobs.\nSOURCE: https://github.com/spiral/docs/blob/3.14/docs/en/start/queue-basics.md#2025-04-20_snippet_7\n\nLANGUAGE: terminal\nCODE:\n```\n./rr serve\n```\n\n----------------------------------------\n\nTITLE: Configuring Symfony VarDumper in .env File\nDESCRIPTION: Setting the VAR_DUMPER_FORMAT environment variable to 'server' in the .env file to use the Symfony VarDumper server.\nSOURCE: https://github.com/spiral/docs/blob/3.14/docs/en/basics/debug.md#2025-04-20_snippet_7\n\nLANGUAGE: dotenv\nCODE:\n```\nVAR_DUMPER_FORMAT=server\n```\n\n----------------------------------------\n\nTITLE: Assigning Custom Security Rule to Role in Spiral Framework Bootloader\nDESCRIPTION: This code shows how to assign a custom security rule to a role-to-permission association in a Spiral Framework bootloader. It creates a 'guest' role and associates it with the 'home.*' permission using the SampleRule.\nSOURCE: https://github.com/spiral/docs/blob/3.14/docs/en/security/rbac.md#2025-04-20_snippet_9\n\nLANGUAGE: php\nCODE:\n```\nnamespace App\\Bootloader;\n\nuse App\\Security\\SampleRule;\nuse Spiral\\Boot\\Bootloader\\Bootloader;\nuse Spiral\\Security\\PermissionsInterface;\n\nclass SecurityBootloader extends Bootloader\n{\n    public function boot(PermissionsInterface $rbac): void\n    {\n        $rbac->addRole('guest');\n\n        $rbac->associate('guest', 'home.*', SampleRule::class);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Installing Laravel Validator Bridge\nDESCRIPTION: This command installs the spiral-packages/laravel-validator package, which bridges Laravel's validator with the Spiral framework. This is a necessary prerequisite for using Laravel validation within Spiral.\nSOURCE: https://github.com/spiral/docs/blob/3.14/docs/zh-CN/validation/laravel.md#2025-04-20_snippet_0\n\nLANGUAGE: Shell\nCODE:\n```\ncomposer require spiral-packages/laravel-validator\n```\n\n----------------------------------------\n\nTITLE: Starting RoadRunner Server\nDESCRIPTION: Command to start the RoadRunner server for the Spiral Framework application.\nSOURCE: https://github.com/spiral/docs/blob/3.14/docs/en/cookbook/quick-start.md#2025-04-20_snippet_8\n\nLANGUAGE: terminal\nCODE:\n```\n./rr serve\n```\n\n----------------------------------------\n\nTITLE: Asserting Event Dispatch with Conditions in PHP\nDESCRIPTION: These examples show how to assert that events were dispatched, including using callbacks to check specific conditions. It covers asserting single and multiple dispatches, as well as asserting that events were not dispatched.\nSOURCE: https://github.com/spiral/docs/blob/3.14/docs/en/testing/event.md#2025-04-20_snippet_3\n\nLANGUAGE: php\nCODE:\n```\n// Assert if an event dispatched one or more times\n$this->events->assertDispatched(SomeEvent::class);\n\n// Assert if an event dispatched one or more times based on a truth-test callback.\n$this->events->assertDispatched(\n    UserRegistered::class, \n    static function(UserRegistered $event): bool {\n        return $event->username === 'john_smith';\n    }\n);\n```\n\n----------------------------------------\n\nTITLE: Creating Plugin Configuration in Go\nDESCRIPTION: Go code for the ticker plugin configuration that defines the data structure for plugin settings and initializes default values.\nSOURCE: https://github.com/spiral/docs/blob/3.14/docs/en/cookbook/custom-dispatcher.md#2025-04-20_snippet_1\n\nLANGUAGE: go\nCODE:\n```\npackage ticker\n\nimport (\n\t\"time\"\n\t\"github.com/roadrunner-server/sdk/v3/pool\"\n)\n\ntype Config struct {\n\tInterval time.Duration `mapstructure:\"interval\"`\n\tPool     *pool.Config  `mapstructure:\"pool\"`\n}\n\nfunc (c *Config) InitDefaults() {\n\tif c.Pool == nil {\n\t\tc.Pool = &pool.Config{}\n\t}\n\n    // Init default pool settings\n\tc.Pool.InitDefaults()\n\n\t// use default interval 1s when inteval is not defined or defined with wrong value \n\tif c.Interval == 0 {\n\t\tc.Interval = time.Second\n\t}\n}\n```\n\n----------------------------------------\n\nTITLE: Installing Mailer Bootloader via Method\nDESCRIPTION: Adding the MailerBootloader class to the kernel bootloaders list using the defineBootloaders method.\nSOURCE: https://github.com/spiral/docs/blob/3.14/docs/en/advanced/sendit.md#2025-04-20_snippet_0\n\nLANGUAGE: php\nCODE:\n```\npublic function defineBootloaders(): array\n{\n    return [\n        // ...\n        \\Spiral\\SendIt\\Bootloader\\MailerBootloader::class,\n        // ...\n    ];\n}\n```\n\n----------------------------------------\n\nTITLE: Starting Temporal Development Server\nDESCRIPTION: Terminal command to start a Temporal development server using the Temporal CLI.\nSOURCE: https://github.com/spiral/docs/blob/3.14/docs/en/temporal/configuration.md#2025-04-20_snippet_3\n\nLANGUAGE: terminal\nCODE:\n```\ntemporal server start-dev\n```\n\n----------------------------------------\n\nTITLE: Implementing Presenter for DataGrid Records in PHP\nDESCRIPTION: Demonstrates how to create a presenter method for individual records in the DataGrid using the __invoke method.\nSOURCE: https://github.com/spiral/docs/blob/3.14/docs/en/http/interceptors.md#2025-04-20_snippet_13\n\nLANGUAGE: php\nCODE:\n```\nnamespace App\\Application\\View;\n\nuse Spiral\\DataGrid\\GridSchema;\nuse App\\Database\\User;\n\nclass UserGrid extends GridSchema\n{\n    //...\n    \n    public function __invoke(User $user): array\n    {\n        return [\n            'id'     => $user->id,\n            'name'   => $user->name,\n            'email'  => $user->email,\n            'status' => $user->status\n        ];\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Basic Fake File\nDESCRIPTION: Simple example of creating a basic fake file using FileFactory.\nSOURCE: https://github.com/spiral/docs/blob/3.14/docs/en/testing/http.md#2025-04-20_snippet_12\n\nLANGUAGE: php\nCODE:\n```\n$file = $http->getFileFactory()->createFile(\n    filename: 'foo.txt'\n);\n```\n\n----------------------------------------\n\nTITLE: Accessing Scoped Values in PHP\nDESCRIPTION: Demonstrates how to access values set in a scope directly from the container or through dependency injection in services or controllers.\nSOURCE: https://github.com/spiral/docs/blob/3.14/docs/zh-CN/container/scopes.md#2025-04-20_snippet_6\n\nLANGUAGE: php\nCODE:\n```\npublic function doSomething(UserContext $user): void\n{\n    \\dump($user);\n}\n```\n\n----------------------------------------\n\nTITLE: Using WeakReference with Class Name Alias in PHP\nDESCRIPTION: Shows how to use a WeakReference binding with a class name alias in the container.\nSOURCE: https://github.com/spiral/docs/blob/3.14/docs/en/container/configuration.md#2025-04-20_snippet_9\n\nLANGUAGE: php\nCODE:\n```\nuse Spiral\\Core\\Container;\nuse WeakReference;\n\npublic function boot(Container $container): void\n{\n    $object = new stdClass();\n    $hash = \\spl_object_hash($object);\n    $reference = WeakReference::create($object);\n\n    $container->bind(stdClass::class, $reference);\n    \n    dump($hash === \\spl_object_hash($container->get(stdClass::class))); // true\n    \n    unset($object);\n    // new instance created using alias class\n    dump($hash === \\spl_object_hash($container->get(stdClass::class))); // false\n}\n```\n\n----------------------------------------\n\nTITLE: Running PHPUnit Tests for Spiral Framework\nDESCRIPTION: Command to execute PHPUnit tests for validating code functionality. Contributors are required to include tests with their pull requests to ensure code quality and prevent regressions.\nSOURCE: https://github.com/spiral/docs/blob/3.14/docs/en/overview/contributing.md#2025-04-20_snippet_3\n\nLANGUAGE: terminal\nCODE:\n```\n./vendor/bin/phpunit \n```\n\n----------------------------------------\n\nTITLE: RoadRunner Configuration\nDESCRIPTION: YAML configuration for RoadRunner server with Temporal plugin\nSOURCE: https://github.com/spiral/docs/blob/3.14/docs/en/temporal/usage.md#2025-04-20_snippet_16\n\nLANGUAGE: yaml\nCODE:\n```\nversion: '3'\nrpc:\n  listen: 'tcp://127.0.0.1:6001'\n\nserver:\n  command: 'php app.php'\n  relay: pipes\n\ntemporal:\n  address: localhost:7233\n  activities:\n    num_workers: 10\n```\n\n----------------------------------------\n\nTITLE: Logout Directive Implementation\nDESCRIPTION: Directive for wrapping logout URLs with authentication tokens.\nSOURCE: https://github.com/spiral/docs/blob/3.14/docs/zh-CN/keeper/views.md#2025-04-20_snippet_1\n\nLANGUAGE: html\nCODE:\n```\n<a href=\"@logout(admin['auth:logout'])\">[[Log out]]</a>\n```\n\n----------------------------------------\n\nTITLE: Using Stacks in Layout Templates\nDESCRIPTION: Shows how to implement stacks in a base layout template, allowing child templates to add resources like stylesheets in a modular way across template inheritance.\nSOURCE: https://github.com/spiral/docs/blob/3.14/docs/en/views/stempler.md#2025-04-20_snippet_35\n\nLANGUAGE: html\nCODE:\n```\n<!DOCTYPE html>\n<html>\n<head>\n    <title>${title|Default title}</title>\n    <stack:collect name=\"styles\" level=\"2\">\n        <link rel=\"stylesheet\" href=\"/styles/welcome.css\"/>\n    </stack:collect>\n    <block:resources/>\n</head>\n<body class=\"${body-class|default}\">\n<block:content>\n    Default content.\n</block:content>\n</body>\n</html>\n```\n\n----------------------------------------\n\nTITLE: Registering Custom Serializer in Configuration File\nDESCRIPTION: Example showing how to register a custom serializer implementation by adding it to the serializers array in the configuration file.\nSOURCE: https://github.com/spiral/docs/blob/3.14/docs/en/advanced/serializer.md#2025-04-20_snippet_7\n\nLANGUAGE: php\nCODE:\n```\nuse App\\Application\\Serializer\\ProtoSerializer;\n\nreturn [\n    'serializers' => [\n        'proto' => ProtoSerializer::class,\n        // other serializers\n    ],\n];\n```\n\n----------------------------------------\n\nTITLE: Creating a Minimal QR Code in Spiral\nDESCRIPTION: A simple example of generating a QR code with only the required value parameter. This renders a QR code containing the alphanumeric code using default settings.\nSOURCE: https://github.com/spiral/docs/blob/3.14/docs/en/keeper/components.md#2025-04-20_snippet_32\n\nLANGUAGE: xhtml\nCODE:\n```\n<ui:qrcode value=\"HK3ARG6MYFMIDDHB\"/>\n```\n\n----------------------------------------\n\nTITLE: Centrifugo Server Configuration (config.json)\nDESCRIPTION: This JSON configuration file sets up the Centrifugo server for integration with RoadRunner. It defines settings such as allowed origins, proxy endpoints for various event types (connect, publish, subscribe, refresh, rpc), and timeouts. It specifies how Centrifugo communicates with RoadRunner.\nSOURCE: https://github.com/spiral/docs/blob/3.14/docs/zh-CN/websockets/configuration.md#2025-04-20_snippet_3\n\nLANGUAGE: json\nCODE:\n```\n```json config.json\n{\n  // ...\n  \"allowed_origins\": [\n    \"*\"\n  ],\n  \"publish\": true,\n  \"proxy_publish\": true,\n  \"proxy_subscribe\": true,\n  \"proxy_connect\": true,\n  \"allow_subscribe_for_client\": true,\n  \"grpc_api\": true,\n  \"grpc_api_address\": \"0.0.0.0\",\n  \"grpc_api_port\": 10000,\n  \"proxy_connect_endpoint\": \"grpc://127.0.0.1:10001\",\n  \"proxy_connect_timeout\": \"10s\",\n  \"proxy_publish_endpoint\": \"grpc://127.0.0.1:10001\",\n  \"proxy_publish_timeout\": \"10s\",\n  \"proxy_subscribe_endpoint\": \"grpc://127.0.0.1:10001\",\n  \"proxy_subscribe_timeout\": \"10s\",\n  \"proxy_refresh_endpoint\": \"grpc://127.0.0.1c:10001\",\n  \"proxy_refresh_timeout\": \"10s\",\n  \"proxy_rpc_endpoint\": \"grpc://127.0.0.1:10001\",\n  \"proxy_rpc_timeout\": \"10s\"\n}\n```\n```\n\n----------------------------------------\n\nTITLE: Monolog Configuration for Database Logging in PHP\nDESCRIPTION: Configuration of Monolog handlers for database query logging in app/config/monolog.php.\nSOURCE: https://github.com/spiral/docs/blob/3.14/docs/en/basics/orm.md#2025-04-20_snippet_17\n\nLANGUAGE: php\nCODE:\n```\nreturn [\n    'handlers' => [\n        // ...\n\n        \\Cycle\\Database\\Driver\\SQLite\\SQLiteDriver::class => [\n            [\n                'class' => 'log.rotate',\n                'options' => [\n                    'filename' => directory('runtime') . 'logs/db.log',\n                    'level' => Logger::DEBUG,\n                ],\n            ],\n        ],\n    ],\n    \n    // ...\n];\n```\n\n----------------------------------------\n\nTITLE: Installing Database Seeder Package in Spiral\nDESCRIPTION: This command installs the Database Seeder package as a development dependency in a Spiral project.\nSOURCE: https://github.com/spiral/docs/blob/3.14/docs/en/cookbook/simple-chat.md#2025-04-20_snippet_9\n\nLANGUAGE: terminal\nCODE:\n```\ncomposer require spiral-packages/database-seeder --dev\n```\n\n----------------------------------------\n\nTITLE: Releasing a Lock in Spiral\nDESCRIPTION: Shows how to release a previously acquired lock, ensuring that resources are freed up for use by other processes.\nSOURCE: https://github.com/spiral/docs/blob/3.14/docs/en/advanced/locks.md#2025-04-20_snippet_8\n\nLANGUAGE: php\nCODE:\n```\n$id = $lock->lock('pdf:create');\n\n// Your logic for creating a PDF file\n\n$lock->release('pdf:create', $id);\n```\n\n----------------------------------------\n\nTITLE: Retrieving Dispatched Events in PHP\nDESCRIPTION: These examples demonstrate how to retrieve all dispatched events that match certain criteria, including using a callback to filter events based on specific conditions.\nSOURCE: https://github.com/spiral/docs/blob/3.14/docs/en/testing/event.md#2025-04-20_snippet_7\n\nLANGUAGE: php\nCODE:\n```\n$events = $this->events->dispatched(UserRegistered::class);\n\n// or\n\n$events =  $this->events->dispatched(\n    UserRegistered::class, \n    static function(UserRegistered $event): bool {\n        return $event->someParam === 100;\n    }\n);\n```\n\n----------------------------------------\n\nTITLE: 使用会话作用域 - PHP\nDESCRIPTION: 演示如何在控制器中使用 SessionScope。这个方法通过 PrototypeTrait 提供的 session 属性来访问会话数据。\nSOURCE: https://github.com/spiral/docs/blob/3.14/docs/zh-CN/basics/session.md#2025-04-20_snippet_2\n\nLANGUAGE: php\nCODE:\n```\nuse Spiral\\Prototype\\Traits\\PrototypeTrait;\n\nclass HomeController\n{\n    use PrototypeTrait;\n\n    public function index(): void\n    {\n        dump($this->session->getSection('cart')->getAll());\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Installing Centrifugo via Bash Script\nDESCRIPTION: Script to download and install the Centrifugo binary in the application's bin directory.\nSOURCE: https://github.com/spiral/docs/blob/3.14/docs/en/cookbook/simple-chat.md#2025-04-20_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nwget --timeout=10 https://github.com/centrifugal/centrifugo/releases/download/v4.1.2/centrifugo_4.1.2_linux_amd64.tar.gz\nmkdir -p bin\ntar xvfz centrifugo_4.1.2_linux_amd64.tar.gz centrifugo \nrm -rf centrifugo_4.1.2_linux_amd64.tar.gz\nmv centrifugo bin/\nchmod +x ./bin/centrifugo\n```\n\n----------------------------------------\n\nTITLE: Creating Centrifugo RPC Handler - Terminal Command\nDESCRIPTION: Command to generate a new Centrifugo RPC handler class using Spiral Framework's CLI tool\nSOURCE: https://github.com/spiral/docs/blob/3.14/docs/en/cookbook/simple-chat.md#2025-04-20_snippet_43\n\nLANGUAGE: terminal\nCODE:\n```\nphp app.php create:centrifugo-handler Rpc -t=rpc\n```\n\n----------------------------------------\n\nTITLE: Data Grid JSON Response Format Example\nDESCRIPTION: Shows the expected JSON response format for a Keeper data grid with sample user data fields that map to the grid template.\nSOURCE: https://github.com/spiral/docs/blob/3.14/docs/en/keeper/views.md#2025-04-20_snippet_7\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"status\": 200,\n  \"data\": [\n    {\n      \"firstName\": \"John\",\n      \"lastName\": \"Smith\",\n      \"email\": \"john@smith.com\",\n      \"showEmail\": true,\n      \"status\": \"active\"\n    }\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Message Entity in Spiral ORM\nDESCRIPTION: This code defines the Message entity using Cycle ORM annotations. It includes relationships to Thread and User entities, and implements JsonSerializable.\nSOURCE: https://github.com/spiral/docs/blob/3.14/docs/en/cookbook/simple-chat.md#2025-04-20_snippet_15\n\nLANGUAGE: php\nCODE:\n```\nnamespace App\\Database;\n\nuse App\\Repository\\MessageRepository;\nuse Cycle\\Annotated\\Annotation\\Column;\nuse Cycle\\Annotated\\Annotation\\Entity;\nuse Cycle\\Annotated\\Annotation\\Relation\\BelongsTo;\n\n#[Entity(repository: MessageRepository::class)]\nclass Message implements \\JsonSerializable\n{\n    #[Column(type: 'primary')]\n    private int $id;\n\n    public function __construct(\n        #[BelongsTo(target: Thread::class)]\n        private Thread $thread,\n        #[BelongsTo(target: User::class)]\n        private User $user,\n        #[Column(type: \"text\")]\n        private string $text,\n    ) {\n    }\n\n    public function jsonSerialize(): array\n    {\n        return [\n            'id' => $this->id,\n            'user' => $this->user,\n            'text' => $this->text,\n        ];\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Starting RoadRunner Server\nDESCRIPTION: Command to start the RoadRunner server.\nSOURCE: https://github.com/spiral/docs/blob/3.14/docs/en/cookbook/simple-queue-system.md#2025-04-20_snippet_2\n\nLANGUAGE: terminal\nCODE:\n```\n./rr serve\n```\n\n----------------------------------------\n\nTITLE: Defining Option Attribute for Console Input in PHP\nDESCRIPTION: Custom attribute class for representing console command options in filter definitions.\nSOURCE: https://github.com/spiral/docs/blob/3.14/docs/zh-CN/cookbook/console-validation.md#2025-04-20_snippet_4\n\nLANGUAGE: PHP\nCODE:\n```\nnamespace App\\Application\\Console\\Attribute;\n\nuse Spiral\\Attributes\\NamedArgumentConstructor;\nuse Spiral\\Filters\\Attribute\\Input\\AbstractInput;\nuse Spiral\\Filters\\InputInterface;\n\n#[\\Attribute(\\Attribute::TARGET_PROPERTY), NamedArgumentConstructor]\nfinal class Option extends AbstractInput\n{\n    public function __construct(\n        public readonly ?string $key = null,\n    ) {\n    }\n\n    public function getValue(InputInterface $input, \\ReflectionProperty $property): mixed\n    {\n        return $input->getValue('option', $this->getKey($property));\n    }\n\n    public function getSchema(\\ReflectionProperty $property): string\n    {\n        return 'option:' . $this->getKey($property);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Starting and Stopping Docker Compose for Spiral Application\nDESCRIPTION: These commands show how to start and stop a Spiral application using Docker Compose.\nSOURCE: https://github.com/spiral/docs/blob/3.14/docs/en/start/deployment.md#2025-04-20_snippet_11\n\nLANGUAGE: terminal\nCODE:\n```\ndocker-compose up -d\n\ndocker-compose down\n```\n\n----------------------------------------\n\nTITLE: Creating MessageFactory for Test Data Generation in PHP\nDESCRIPTION: This factory generates Message entities for testing, composing them with Thread and User entities from their respective factories and adding fake paragraph text.\nSOURCE: https://github.com/spiral/docs/blob/3.14/docs/zh-CN/cookbook/simple-chat.md#2025-04-20_snippet_9\n\nLANGUAGE: terminal\nCODE:\n```\nphp app.php create:factory MessageFactory\n```\n\nLANGUAGE: php\nCODE:\n```\nnamespace Database\\Factory;\n\nuse App\\Database\\Message;\nuse Spiral\\DatabaseSeeder\\Factory\\AbstractFactory;\n\nfinal class MessageFactory extends AbstractFactory\n{\n    public function makeEntity(array $definition): object\n    {\n        return new Message(\n            $definition['thread'],\n            $definition['user'],\n            $definition['text'],\n        );\n    }\n\n    public function entity(): string\n    {\n        return Message::class;\n    }\n\n    public function definition(): array\n    {\n        return [\n            'thread' => ThreadFactory::new()->make(),\n            'user' => UserFactory::new()->make(),\n            'text' => $this->faker->paragraph,\n        ];\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Using DeferredFactory Binding\nDESCRIPTION: Demonstrates how to use DeferredFactory binding for lazy loading of factory methods.\nSOURCE: https://github.com/spiral/docs/blob/3.14/docs/zh-CN/container/configuration.md#2025-04-20_snippet_14\n\nLANGUAGE: php\nCODE:\n```\nuse Spiral\\Core\\Config\\DeferredFactory;\n\n$container->bind('some-binding', new DeferredFactory(\n    factory: [MyClass::class, 'handle'],\n));\n```\n\n----------------------------------------\n\nTITLE: Registering Custom Sentry Integration in Spiral Bootloader\nDESCRIPTION: Illustrates how to register a custom Sentry integration using Spiral's bootloader system, allowing for application-specific enhancements to Sentry's functionality.\nSOURCE: https://github.com/spiral/docs/blob/3.14/docs/en/basics/errors.md#2025-04-20_snippet_21\n\nLANGUAGE: php\nCODE:\n```\nuse Spiral\\Sentry\\Bootloader\\ClientBootloader;\n\nuse Spiral\\Boot\\Bootloader\\Bootloader;\n\nfinal class AppBootloader extends Bootloader\n{\n    public function init(ClientBootloader $sentry): void\n    {\n        $sentry->addIntegration(new ExceptionContextIntegration());\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Command Creation Output\nDESCRIPTION: The output displayed after successfully creating a command via scaffolding.\nSOURCE: https://github.com/spiral/docs/blob/3.14/docs/en/console/commands.md#2025-04-20_snippet_1\n\nLANGUAGE: output\nCODE:\n```\nDeclaration of '[32mMyCommand[39m' has been successfully written into '[33mapp/src/Endpoint/Console/MyCommand.php[39m'.\n```\n\n----------------------------------------\n\nTITLE: Registering Sentry Reporter Bootloader Using Method\nDESCRIPTION: Code example showing how to register the SentryReporterBootloader using the defineBootloaders method\nSOURCE: https://github.com/spiral/docs/blob/3.14/docs/en/basics/errors.md#2025-04-20_snippet_16\n\nLANGUAGE: php\nCODE:\n```\npublic function defineBootloaders(): array\n{\n    return [\n        // ...\n        \\Spiral\\Sentry\\Bootloader\\SentryReporterBootloader::class,\n        // ...\n    ];\n}\n```\n\n----------------------------------------\n\nTITLE: Generated HTML Output from Parent Block Example\nDESCRIPTION: Shows the final HTML output after template compilation, where the parent block content is preserved and combined with the child template's content.\nSOURCE: https://github.com/spiral/docs/blob/3.14/docs/en/views/stempler.md#2025-04-20_snippet_16\n\nLANGUAGE: html\nCODE:\n```\n<!DOCTYPE html>\n<html>\n<head>\n    <title>Homepage</title>\n    <link rel=\"stylesheet\" href=\"/styles/welcome.css\"/>\n</head>\n<body class=\"homepage\">\nThis is homepage content.\nDefault content.\n</body>\n</html>\n```\n\n----------------------------------------\n\nTITLE: Implementing a Custom Event Processor in Spiral Framework\nDESCRIPTION: Custom event processor implementation that extends AbstractProcessor to register event listeners from application-specific sources.\nSOURCE: https://github.com/spiral/docs/blob/3.14/docs/en/advanced/events.md#2025-04-20_snippet_16\n\nLANGUAGE: php\nCODE:\n```\nnamespace App\\Processor;\n\nuse Spiral\\Events\\ListenerFactoryInterface;\nuse Spiral\\Events\\ListenerRegistryInterface;\nuse Spiral\\Events\\Processor\\AbstractProcessor;\n\nfinal class MyCustomProcessor extends AbstractProcessor\n{\n    public function __construct(\n        private readonly ListenerFactoryInterface $factory,\n        private readonly ?ListenerRegistryInterface $registry = null,\n    ) {\n    }\n\n    public function process(): void\n    {\n        // If the EventDispatcher implementation is not registered in the application,\n        // this interface implementation will not be registered and the processor will stop working.\n        if ($this->registry === null) {\n            return;\n        }\n\n        // Using the ListenerRegistryInterface implementation, we can register event listeners.\n        $this->registry->addListener(\n            event: $event,\n            listener: $this->factory->create($listener, $method),\n            priority: $priority\n        );\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Environment Overwrite Behavior in Spiral 3.0\nDESCRIPTION: Example showing how to instantiate the Environment object with the overwrite parameter set to true, which allows .env file variables to overwrite external environment variables.\nSOURCE: https://github.com/spiral/docs/blob/3.14/docs/en/cookbook/migration-from-v2.md#2025-04-20_snippet_0\n\nLANGUAGE: php\nCODE:\n```\nApp::create(\n    directories: ['root' => __DIR__]\n)->run(new \\Spiral\\Boot\\Environment(overwrite: true));\n```\n\n----------------------------------------\n\nTITLE: Installing RoadRunner on Linux\nDESCRIPTION: Commands to install RoadRunner on Debian-based Linux distributions.\nSOURCE: https://github.com/spiral/docs/blob/3.14/docs/en/start/server.md#2025-04-20_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nwget https://github.com/roadrunner-server/roadrunner/releases/download/v2.X.X/roadrunner-2.X.X-linux-amd64.deb\nsudo dpkg -i roadrunner-2.X.X-linux-amd64.deb\n```\n\n----------------------------------------\n\nTITLE: Chat Page View Template\nDESCRIPTION: HTML template for the chat interface with authentication token integration.\nSOURCE: https://github.com/spiral/docs/blob/3.14/docs/en/cookbook/simple-chat.md#2025-04-20_snippet_37\n\nLANGUAGE: html\nCODE:\n```\n<html>\n<head>\n    <title>Chat</title>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <script src=\"https://cdn.tailwindcss.com\"></script>\n    <meta name=\"x-bearer\" content=\"{{ $token }}\">\n</head>\n<body>\n<div id=\"app\" class=\"w-full h-screen\"></div>\n<script type=\"module\" src=\"/frontend.js\"></script>\n</body>\n</html>\n```\n\n----------------------------------------\n\nTITLE: Installing OpenTelemetry Bridge in Spiral\nDESCRIPTION: Command for installing the spiral/otel-bridge package along with OpenTelemetry OTLP exporter using Composer.\nSOURCE: https://github.com/spiral/docs/blob/3.14/docs/en/advanced/telemetry.md#2025-04-20_snippet_0\n\nLANGUAGE: terminal\nCODE:\n```\ncomposer require spiral/otel-bridge open-telemetry/exporter-otlp\n```\n\n----------------------------------------\n\nTITLE: Custom Declaration Directory Configuration\nDESCRIPTION: Example of configuring a specific directory for command declarations\nSOURCE: https://github.com/spiral/docs/blob/3.14/docs/en/basics/scaffolding.md#2025-04-20_snippet_5\n\nLANGUAGE: php\nCODE:\n```\nreturn [\n    'declarations' => [\n        Declaration\\CommandDeclaration::TYPE => [\n            // ...\n            'directory' => directpry('app') . '/Endpoint/Console'\n        ],\n    ],\n];\n```\n\n----------------------------------------\n\nTITLE: Customizing Runtime Directory in Spiral Application Initialization\nDESCRIPTION: Shows how to modify the location of the runtime directory when initializing a Spiral application. This example sets the runtime directory to the system's temporary directory.\nSOURCE: https://github.com/spiral/docs/blob/3.14/docs/en/start/structure.md#2025-04-20_snippet_1\n\nLANGUAGE: php\nCODE:\n```\n$app = \\App\\Application\\Kernel::create(\n    directories: [\n        'root' => __DIR__, \n        'runtime' => \\sys_get_temp_dir()\n    ]\n)->run();\n```\n\n----------------------------------------\n\nTITLE: Implementing Profiler Interceptor\nDESCRIPTION: Example of registering ProfilerInterceptor in the application bootloader.\nSOURCE: https://github.com/spiral/docs/blob/3.14/docs/en/basics/debug.md#2025-04-20_snippet_15\n\nLANGUAGE: php\nCODE:\n```\nnamespace App\\Application\\Bootloader;\n\nuse Spiral\\Bootloader\\DomainBootloader;\nuse Spiral\\Core\\CoreInterface;\n\nclass AppBootloader extends DomainBootloader\n{\n    protected const SINGLETONS = [\n        CoreInterface::class => [self::class, 'domainCore']\n    ];\n\n    protected const INTERCEPTORS = [\n        \\Spiral\\Profiler\\ProfilerInterceptor::class\n    ];\n}\n```\n\n----------------------------------------\n\nTITLE: Updating Composer Autoloader in Spiral\nDESCRIPTION: This command updates the Composer autoloader after modifying the autoload configuration.\nSOURCE: https://github.com/spiral/docs/blob/3.14/docs/en/cookbook/simple-chat.md#2025-04-20_snippet_24\n\nLANGUAGE: terminal\nCODE:\n```\ncomposer dump-autoload\n```\n\n----------------------------------------\n\nTITLE: Adding Constant to PHP Class\nDESCRIPTION: Demonstrates how to add a constant to a class with visibility, final modifier, attributes, and comments.\nSOURCE: https://github.com/spiral/docs/blob/3.14/docs/en/component/reactor.md#2025-04-20_snippet_5\n\nLANGUAGE: php\nCODE:\n```\n$class = new ClassDeclaration('MyClass');\n\n$class->addConstant('MY_CONSTANT', 'default')\n    ->setPublic()\n    ->setFinal()\n    ->addAttribute('SomeAttribute')\n    ->setComment(['My constant']);\n\ndump((string) $class);\n```\n\n----------------------------------------\n\nTITLE: Setting up Vue.js Project - Terminal Commands\nDESCRIPTION: Commands for initializing a new Vue.js project and installing Centrifugo client dependency\nSOURCE: https://github.com/spiral/docs/blob/3.14/docs/en/cookbook/simple-chat.md#2025-04-20_snippet_48\n\nLANGUAGE: terminal\nCODE:\n```\nnpm init vue@latest\n```\n\nLANGUAGE: terminal\nCODE:\n```\ncd frontend\nnpm install centrifuge -s\n```\n\n----------------------------------------\n\nTITLE: Setting Default Parameter Values in PHP Route\nDESCRIPTION: Shows how to set a default value for an optional parameter in a route definition using the third argument of the Route constructor.\nSOURCE: https://github.com/spiral/docs/blob/3.14/docs/en/http/routing.md#2025-04-20_snippet_31\n\nLANGUAGE: php\nCODE:\n```\n$router->setRoute('home', new Route(\n    '/<group>[/<user>]',\n    function (ServerRequestInterface $request, ResponseInterface $response): array {\n        return $request->getAttribute('route')->getMatches();\n    },\n    [\n        'user' => 'default'\n    ]\n));\n```\n\n----------------------------------------\n\nTITLE: Reading Parameter Metadata Examples\nDESCRIPTION: Examples of how to read parameter metadata using the ReaderInterface methods.\nSOURCE: https://github.com/spiral/docs/blob/3.14/docs/en/advanced/attributes.md#2025-04-20_snippet_8\n\nLANGUAGE: php\nCODE:\n```\n$reflection = new ReflectionParameter('send_email', 'email');\n\n$attributes = $reader->getParameterMetadata($reflection); \n// returns iterable<object>\n```\n\nLANGUAGE: php\nCODE:\n```\n$reflection = new ReflectionParameter('send_email', 'email');\n\n$attributes = $reader->getParameterMetadata($reflection, PreCondition::class); \n// returns iterable<PreCondition>\n```\n\nLANGUAGE: php\nCODE:\n```\n$reflection = new ReflectionParameter('send_email', 'email');\n\n$getter = $reader->firstConstantMetadata($reflection, PreCondition::class); \n// returns PreCondition|null\n```\n\n----------------------------------------\n\nTITLE: Implementing Running Callback in Spiral\nDESCRIPTION: Example of implementing a running callback that executes during application initialization.\nSOURCE: https://github.com/spiral/docs/blob/3.14/docs/en/framework/kernel.md#2025-04-20_snippet_2\n\nLANGUAGE: php\nCODE:\n```\n$app = MyApp::create(directories: ['root' => __DIR__]);\n\n$app->running(static function (): void {\n    // Do something\n});\n\n$app->run();\n```\n\n----------------------------------------\n\nTITLE: Creating a custom ValidatorInterface\nDESCRIPTION: This code snippet shows the creation of a custom validator class implementing the `ValidatorInterface`. It includes methods for checking validity (`isValid`) and retrieving errors (`getErrors`).\nSOURCE: https://github.com/spiral/docs/blob/3.14/docs/zh-CN/validation/factory.md#2025-04-20_snippet_7\n\nLANGUAGE: php\nCODE:\n```\n```php\nnamespace App\\Validator;\n\nuse Spiral\\Validation\\ValidatorInterface;\n\nfinal class MyValidator implements ValidatorInterface\n{\n    protected array|object $data = [];\n    protected mixed $context = null;\n        \n    public function __construct(\n        private readonly MyValidationService $validationService\n    ) {}\n    \n    public function isValid(): bool\n    {\n        return $this->validationService->validate($this->data, $this->context);\n    }\n    \n    public function getErrors(): array\n    {\n        return $this->validationService->getErrors();\n    }\n    \n    // other required methods\n}\n```\n```\n\n----------------------------------------\n\nTITLE: Basic Twig Template Example\nDESCRIPTION: A simple Twig template example showing variable interpolation.\nSOURCE: https://github.com/spiral/docs/blob/3.14/docs/en/views/twig.md#2025-04-20_snippet_4\n\nLANGUAGE: twig\nCODE:\n```\nHello, {{ name }}!\n```\n\n----------------------------------------\n\nTITLE: Updating Composer Autoload Cache\nDESCRIPTION: Terminal command to update the Composer autoload cache after modifying the autoload configuration in composer.json.\nSOURCE: https://github.com/spiral/docs/blob/3.14/docs/zh-CN/cookbook/simple-chat.md#2025-04-20_snippet_6\n\nLANGUAGE: terminal\nCODE:\n```\ncomposer dump-autoload\n```\n\n----------------------------------------\n\nTITLE: Configuring gRPC Service Generation in PHP\nDESCRIPTION: Configuration file for generating gRPC service stubs in PHP, specifying paths and proto files.\nSOURCE: https://github.com/spiral/docs/blob/3.14/docs/zh-CN/grpc/service.md#2025-04-20_snippet_1\n\nLANGUAGE: php\nCODE:\n```\nreturn [\n    'generatedPath' => directory('root') . '/generated',\n    'servicesBasePath' => directory('root') . '/proto',\n    'binaryPath' => directory('root').'protoc-gen-php-grpc',\n    'services' => [\n        directory('root').'proto/pinger.proto',\n    ],\n];\n```\n\n----------------------------------------\n\nTITLE: Multiple Single Action Routes\nDESCRIPTION: Examples of configuring multiple single action routes with different controllers and actions.\nSOURCE: https://github.com/spiral/docs/blob/3.14/docs/en/http/routing.md#2025-04-20_snippet_45\n\nLANGUAGE: php\nCODE:\n```\n// match \"/index\"\n$router->setRoute(\n    'home',\n    new Route('/<action>', new Action(HomeController::class, 'index'))\n);\n\n// match \"/other\"\n$router->setRoute(\n    'home',\n    new Route('/<action>', new Action(HomeController::class, 'other'))\n);\n\n// match \"/test\"\n$router->setRoute(\n    'demo',\n    new Route('/<action>', new Action(DemoController::class, 'test'))\n);\n```\n\n----------------------------------------\n\nTITLE: Installing FastRoute Dependencies with Composer\nDESCRIPTION: Command to install required FastRoute packages and request handler middleware via Composer.\nSOURCE: https://github.com/spiral/docs/blob/3.14/docs/en/cookbook/psr-15.md#2025-04-20_snippet_0\n\nLANGUAGE: terminal\nCODE:\n```\ncomposer require middlewares/fast-route middlewares/request-handler\n```\n\n----------------------------------------\n\nTITLE: Named Arguments Instantiator with Metadata Marker\nDESCRIPTION: Example of a metadata class using named arguments instantiator with a metadata marker.\nSOURCE: https://github.com/spiral/docs/blob/3.14/docs/zh-CN/advanced/attributes.md#2025-04-20_snippet_13\n\nLANGUAGE: php\nCODE:\n```\n/**\n * @Annotation\n * @Spiral\\Attributes\\NamedArgumentConstructor\n */\n#[\\Attribute]\n#[\\Spiral\\Attributes\\NamedArgumentConstructor]\nclass CustomMetadataClass\n{\n    public function __construct($property)\n    {\n        // $property = \"value\"\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Custom Tokenizer Registry\nDESCRIPTION: Implementation of a custom tokenizer directory registry class that reads directory paths from a JSON file. It implements the DirectoryRegistryInterface for use with the Discoverer package.\nSOURCE: https://github.com/spiral/docs/blob/3.14/docs/en/component/discoverer.md#2025-04-20_snippet_7\n\nLANGUAGE: php\nCODE:\n```\nuse Spiral\\Discoverer\\Tokenizer\\DirectoryRegistryInterface;\nuse Spiral\\Core\\Container;\nuse Spiral\\Files\\FilesInterface;\n\nfinal class JsonRegistry implements DirectoryRegistryInterface\n{\n    private array $directories = [];\n\n    public function __construct(private string $jsonPath) {}\n\n    public function init(Container $container): void {\n        $files = $container->get(FilesInterface::class);\n        $data = json_decode($files->read($this->jsonPath), true);\n\n        $this->directories = $data['directories'] ?? [];\n    }\n\n    public function getDirectories(): array {\n        return $this->directories;\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Installing Spiral Validator Package\nDESCRIPTION: Command to install the spiral/validator package using Composer.\nSOURCE: https://github.com/spiral/docs/blob/3.14/docs/en/validation/spiral.md#2025-04-20_snippet_0\n\nLANGUAGE: terminal\nCODE:\n```\ncomposer require spiral/validator\n```\n\n----------------------------------------\n\nTITLE: Creating Single Post View in Spiral\nDESCRIPTION: View template for displaying a single post with its comments, extending the base layout.\nSOURCE: https://github.com/spiral/docs/blob/3.14/docs/en/cookbook/quick-start.md#2025-04-20_snippet_41\n\nLANGUAGE: html\nCODE:\n```\n<extends:layout.base title=\"Posts\"/>\n\n<define:body>\n    <div class=\"post\">\n        <div class=\"title\">{{$post->title}}</div>\n        <div class=\"author\">{{$post->author->name}}</div>\n    </div>\n    <div class=\"comments\">\n        @foreach($post->comments as $comment)\n        <div class=\"comment\">\n            <div class=\"message\">{{$comment->message}}</div>\n            <div class=\"author\">{{$comment->author->name}}</div>\n        </div>\n        @endforeach\n    </div>\n</define:body>\n```\n\n----------------------------------------\n\nTITLE: Checking if Session is Started in Spiral PHP\nDESCRIPTION: Shows how to check if a session has been started.\nSOURCE: https://github.com/spiral/docs/blob/3.14/docs/en/basics/session.md#2025-04-20_snippet_7\n\nLANGUAGE: php\nCODE:\n```\ndump($this->session->isStarted());\n```\n\n----------------------------------------\n\nTITLE: Registering Driver Alias in Configuration\nDESCRIPTION: Example of registering a custom driver as an alias in the driverAliases section of the queue configuration file for easier reference.\nSOURCE: https://github.com/spiral/docs/blob/3.14/docs/en/queue/configuration.md#2025-04-20_snippet_9\n\nLANGUAGE: php\nCODE:\n```\n'driverAliases' => [\n    'redis' => \\App\\Infrastructure\\Queue\\RedisQueue::class,\n    // ...\n],\n```\n\n----------------------------------------\n\nTITLE: Example HTTP GET Request for Action Route\nDESCRIPTION: Demonstrates a sample GET request that matches the action route pattern with a parameter.\nSOURCE: https://github.com/spiral/docs/blob/3.14/docs/en/http/routing.md#2025-04-20_snippet_14\n\nLANGUAGE: bash\nCODE:\n```\nGET /post/42\n```\n\n----------------------------------------\n\nTITLE: Registering FastRoute Bootloader Using Constant\nDESCRIPTION: Adding the FastRoute bootloader to the application kernel using the LOAD constant.\nSOURCE: https://github.com/spiral/docs/blob/3.14/docs/en/cookbook/psr-15.md#2025-04-20_snippet_3\n\nLANGUAGE: php\nCODE:\n```\nprotected const LOAD = [\n    // ...\n    \\Spiral\\Bootloader\\Http\\HttpBootloader::class,\n    \\App\\Bootloader\\FastRouteBootloader::class,\n    // ...\n];\n```\n\n----------------------------------------\n\nTITLE: Registering DatabaseSeederBootloader Using Method\nDESCRIPTION: PHP code snippet showing how to register the DatabaseSeederBootloader in the application kernel using the defineBootloaders method.\nSOURCE: https://github.com/spiral/docs/blob/3.14/docs/en/testing/database.md#2025-04-20_snippet_1\n\nLANGUAGE: php\nCODE:\n```\npublic function defineBootloaders(): array\n{\n    return [\n        // ...\n        \\Spiral\\DatabaseSeeder\\Bootloader\\DatabaseSeederBootloader::class,\n        // ...\n    ];\n}\n```\n\n----------------------------------------\n\nTITLE: Registering Serializer Bootloader\nDESCRIPTION: PHP code to register the Symfony Serializer bootloader in the Spiral application kernel.\nSOURCE: https://github.com/spiral/docs/blob/3.14/docs/en/cookbook/simple-queue-system.md#2025-04-20_snippet_8\n\nLANGUAGE: php\nCODE:\n```\npublic function defineBootloaders(): array\n{\n    return [\n        // ...\n        \\Spiral\\Serializer\\Symfony\\Bootloader\\SerializerBootloader::class,\n        // ...\n    ];\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Custom Sequence Command in PHP with Spiral Framework\nDESCRIPTION: Demonstrates how to create a custom sequence command by extending the SequenceCommand class. This command runs the 'cache_everything' sequence.\nSOURCE: https://github.com/spiral/docs/blob/3.14/docs/zh-CN/console/sequences.md#2025-04-20_snippet_3\n\nLANGUAGE: PHP\nCODE:\n```\nnamespace App\\Command;\n\nuse Psr\\Container\\ContainerInterface;\nuse Spiral\\Console\\Config\\ConsoleConfig;\n\nfinal class CacheEverythingCommand extends SequenceCommand\n{\n    protected const NAME = 'cache:everything';\n    protected const DESCRIPTION = 'Cache everything in the project';\n\n    public function perform(ConsoleConfig $config, ContainerInterface $container): int\n    {\n        $this->info('Caching everything in the project...');\n        $this->newLine();\n\n        return $this->runSequence($config->getSequence('cache_everything'), $container);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Installing SAPI Bridge for HTTP Emitter in Spiral 3.0\nDESCRIPTION: Command to install the spiral/sapi-bridge package which provides an implementation for the EmitterInterface when using Spiral with nginx.\nSOURCE: https://github.com/spiral/docs/blob/3.14/docs/en/cookbook/migration-from-v2.md#2025-04-20_snippet_2\n\nLANGUAGE: terminal\nCODE:\n```\ncomposer require spiral/sapi-bridge\n```\n\n----------------------------------------\n\nTITLE: Creating Job Handler in Spiral Framework (Terminal)\nDESCRIPTION: Command to create a new Job Handler class in the Spiral Framework. This generates a boilerplate job handler class that can be customized to process queued jobs.\nSOURCE: https://github.com/spiral/docs/blob/3.14/docs/zh-CN/basics/scaffolding.md#2025-04-20_snippet_4\n\nLANGUAGE: terminal\nCODE:\n```\nphp app.php create:jobHandler <name>\n```\n\n----------------------------------------\n\nTITLE: Fixing Code Style with PHP-CS-Fixer for Spiral Framework\nDESCRIPTION: Command to automatically fix code style issues using PHP-CS-Fixer according to PSR-12 standards. This command will modify files to enforce the proper style guidelines including CL line endings.\nSOURCE: https://github.com/spiral/docs/blob/3.14/docs/en/overview/contributing.md#2025-04-20_snippet_2\n\nLANGUAGE: terminal\nCODE:\n```\n./vendor/bin/php-cs-fixer fix --config=.php-cs-fixer.dist.php -vvv --using-cache=no\n```\n\n----------------------------------------\n\nTITLE: Generated Job Handler Class\nDESCRIPTION: The output of the create:jobHandler command, showing a job handler class that extends JobHandler with an invoke method for processing job payload and headers.\nSOURCE: https://github.com/spiral/docs/blob/3.14/docs/en/basics/scaffolding.md#2025-04-20_snippet_30\n\nLANGUAGE: php\nCODE:\n```\ndeclare(strict_types=1);\n\nnamespace App\\Endpoint\\Job;\n\nuse Spiral\\Queue\\JobHandler;\n\nfinal class UserRegisteredNotificationJob extends JobHandler\n{\n    public function invoke(string $id, array $payload, array $headers): void\n    {\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: JSON Data for Array of Filters\nDESCRIPTION: Shows the JSON structure for a request when using an array of filters with the NestedArray attribute.\nSOURCE: https://github.com/spiral/docs/blob/3.14/docs/en/filters/composite.md#2025-04-20_snippet_9\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"key\": \"value\",\n  \"addresses\": [\n    {\n      \"city\": \"San Francisco\",\n      \"address\": \"Address\"\n    },\n    {\n      \"city\": \"Minsk\",\n      \"address\": \"Address #2\"\n    }\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: SQL Equivalent for Between Filters\nDESCRIPTION: Demonstrates the SQL equivalents for field-based and value-based Between filters, including alternatives using gte/lte.\nSOURCE: https://github.com/spiral/docs/blob/3.14/docs/zh-CN/component/data-grid.md#2025-04-20_snippet_4\n\nLANGUAGE: sql\nCODE:\n```\n#\n基于字段\nselect *\nfrom table_name\nwhere field between 10 and 20;\n#\n或使用 gte/lte 转换\nselect *\nfrom table_name\nwhere field >= 10\n  and field <= 20;\n\n#\n基于值\nselect *\nfrom table_name\nwhere '2020 Apr, 10th' between start_date and end_date;\n#\n或使用 gte/lte 转换\nselect *\nfrom table_name\nwhere start_date <= '2020 Apr, 10th'\n  and end_date >= '2020 Apr, 10th';\n```\n\n----------------------------------------\n\nTITLE: Installing the Spiral Reactor Component\nDESCRIPTION: Shows how to install the spiral/reactor component via Composer. Note that Spiral Framework >= 2.7 already includes this component.\nSOURCE: https://github.com/spiral/docs/blob/3.14/docs/en/component/reactor.md#2025-04-20_snippet_0\n\nLANGUAGE: terminal\nCODE:\n```\ncomposer require spiral/reactor\n```\n\n----------------------------------------\n\nTITLE: Activating TwigBootloader in Kernel using Constant\nDESCRIPTION: PHP code snippet showing how to activate the TwigBootloader in the Kernel class using the LOAD constant.\nSOURCE: https://github.com/spiral/docs/blob/3.14/docs/en/views/twig.md#2025-04-20_snippet_2\n\nLANGUAGE: php\nCODE:\n```\nprotected const LOAD = [\n    // ...\n    \\Spiral\\Views\\Bootloader\\ViewsBootloader::class,\n    \\Spiral\\Bootloader\\Views\\TranslatedCacheBootloader::class, // keep localized views in separate cache files\n    \\Spiral\\Twig\\Bootloader\\TwigBootloader::class,\n    // ...\n];\n```\n\n----------------------------------------\n\nTITLE: Creating a Job Handler via Command Line in Spiral\nDESCRIPTION: Command to scaffold a new job handler using Spiral's built-in scaffolding tool.\nSOURCE: https://github.com/spiral/docs/blob/3.14/docs/en/start/queue-basics.md#2025-04-20_snippet_0\n\nLANGUAGE: terminal\nCODE:\n```\nphp app.php create:jobHandler PingSite\n```\n\n----------------------------------------\n\nTITLE: Configuring PHPUnit Environment Variables\nDESCRIPTION: XML configuration for phpunit.xml to set environment variables for optimizing test performance.\nSOURCE: https://github.com/spiral/docs/blob/3.14/docs/en/testing/database.md#2025-04-20_snippet_4\n\nLANGUAGE: xml\nCODE:\n```\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<phpunit>\n    <php>\n        <env name=\"CYCLE_SCHEMA_CACHE\" value=\"true\"/>\n        <env name=\"TOKENIZER_CACHE_TARGETS\" value=\"true\"/>\n        <!-- ... other configurations ... -->\n    </php>\n</phpunit>\n```\n\n----------------------------------------\n\nTITLE: Stack Push Output Example\nDESCRIPTION: Shows the HTML output when pushing content to a stack, which appends the pushed content after the default content from the stack collector.\nSOURCE: https://github.com/spiral/docs/blob/3.14/docs/en/views/stempler.md#2025-04-20_snippet_26\n\nLANGUAGE: html\nCODE:\n```\n  default content\nmy value\n```\n\n----------------------------------------\n\nTITLE: Adding Bootloader to Kernel Using Constant Approach\nDESCRIPTION: Shows an alternative way to add the AppBootloader to the application kernel by defining it in the LOAD constant, which is a more concise approach for registering bootloaders in Spiral.\nSOURCE: https://github.com/spiral/docs/blob/3.14/docs/zh-CN/grpc/client.md#2025-04-20_snippet_3\n\nLANGUAGE: php\nCODE:\n```\nprotected const LOAD = [\n    // ...\n    \\App\\Application\\Bootloader\\AppBootloader::class,\n    // ...\n];\n```\n\n----------------------------------------\n\nTITLE: Creating a Logger Middleware\nDESCRIPTION: Command to create a Logger middleware class that can be used to log HTTP requests and responses.\nSOURCE: https://github.com/spiral/docs/blob/3.14/docs/en/basics/scaffolding.md#2025-04-20_snippet_25\n\nLANGUAGE: terminal\nCODE:\n```\nphp app.php create:middleware Logger\n```\n\n----------------------------------------\n\nTITLE: Rendered PHP Function Output\nDESCRIPTION: Shows the output of a function declaration with return type, body, and attributes.\nSOURCE: https://github.com/spiral/docs/blob/3.14/docs/en/component/reactor.md#2025-04-20_snippet_20\n\nLANGUAGE: php\nCODE:\n```\n/**\n * Some function\n */\n#[SomeAttribute]\nfunction myFunction(): string\n{\n    return 'Hello world';\n}\n\n```\n\n----------------------------------------\n\nTITLE: Keeper Login View Configuration\nDESCRIPTION: PHP configuration for customizing the login view path in Keeper framework.\nSOURCE: https://github.com/spiral/docs/blob/3.14/docs/zh-CN/keeper/views.md#2025-04-20_snippet_3\n\nLANGUAGE: php\nCODE:\n```\n<?php\n// app/config/path/to/keeper/config.php\n\nreturn [\n    'loginView' => 'default:path/to/login/view'\n];\n```\n\n----------------------------------------\n\nTITLE: Using Metadata Class with Doctrine Annotations\nDESCRIPTION: Example of applying the metadata class to a User entity using Doctrine annotation syntax. This approach works on all PHP versions and is the traditional way to define metadata.\nSOURCE: https://github.com/spiral/docs/blob/3.14/docs/en/advanced/attributes.md#2025-04-20_snippet_11\n\nLANGUAGE: php\nCODE:\n```\n/**\n * @MyEntityMetadata(table=\"users\")\n */\nclass User {}\n```\n\n----------------------------------------\n\nTITLE: Declaring a Basic PHP Class\nDESCRIPTION: Demonstrates how to create a basic class declaration using ClassDeclaration.\nSOURCE: https://github.com/spiral/docs/blob/3.14/docs/zh-CN/component/reactor.md#2025-04-20_snippet_1\n\nLANGUAGE: php\nCODE:\n```\nuse Spiral\\Reactor\\ClassDeclaration;\n\n$class = new ClassDeclaration('MyClass');\n\ndump($class->render()); // or dump((string) $class);\n```\n\n----------------------------------------\n\nTITLE: Activating Database Seeder Bootloader in Spiral\nDESCRIPTION: This code snippet shows how to activate the Database Seeder package by adding its bootloader to the LOAD section of the application kernel.\nSOURCE: https://github.com/spiral/docs/blob/3.14/docs/en/cookbook/simple-chat.md#2025-04-20_snippet_10\n\nLANGUAGE: diff\nCODE:\n```\n         PrototypeBootloader::class,\n+        \\Spiral\\DatabaseSeeder\\Bootloader\\DatabaseSeederBootloader::class,\n```\n\n----------------------------------------\n\nTITLE: Listing Scheduled Cron Jobs\nDESCRIPTION: Command to list all registered cron jobs in the application.\nSOURCE: https://github.com/spiral/docs/blob/3.14/docs/zh-CN/advanced/scheduler.md#2025-04-20_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\nphp app.php schedule:list\n```\n\n----------------------------------------\n\nTITLE: Asserting File Non-Copy in Storage\nDESCRIPTION: Shows how to verify that a file was not copied between locations in storage.\nSOURCE: https://github.com/spiral/docs/blob/3.14/docs/en/testing/storage.md#2025-04-20_snippet_10\n\nLANGUAGE: php\nCODE:\n```\n$uploads = $storage->bucket('uploads');\n$uploads->assertNotCopied('file.txt', 'folder/file.txt');\n```\n\n----------------------------------------\n\nTITLE: Installing spiral/attributes Component\nDESCRIPTION: Command to install the spiral/attributes component using Composer.\nSOURCE: https://github.com/spiral/docs/blob/3.14/docs/en/advanced/attributes.md#2025-04-20_snippet_0\n\nLANGUAGE: terminal\nCODE:\n```\ncomposer require spiral/attributes\n```\n\n----------------------------------------\n\nTITLE: Activating AnnotatedRoutesBootloader in Kernel\nDESCRIPTION: Activates the AnnotatedRoutesBootloader in the application kernel using the defineBootloaders method.\nSOURCE: https://github.com/spiral/docs/blob/3.14/docs/en/http/routing.md#2025-04-20_snippet_1\n\nLANGUAGE: php\nCODE:\n```\npublic function defineBootloaders(): array\n{\n    return [\n        // ...\n        \\Spiral\\Router\\Bootloader\\AnnotatedRoutesBootloader::class,\n        // ...\n    ];\n}\n```\n\n----------------------------------------\n\nTITLE: Including UI Component Bundles in Spiral Framework\nDESCRIPTION: This snippet shows how to include the toolkit bundle for forms in Spiral Framework. It demonstrates two methods: including the toolkit bundle directly or using the keeper bundle which includes the toolkit.\nSOURCE: https://github.com/spiral/docs/blob/3.14/docs/en/keeper/components.md#2025-04-20_snippet_17\n\nLANGUAGE: xhtml\nCODE:\n```\n<use:bundle path=\"toolkit:bundle\"/>\n```\n\nLANGUAGE: xhtml\nCODE:\n```\n<use:bundle path=\"keeper:bundle\"/>\n```\n\n----------------------------------------\n\nTITLE: Manually Committing a Session in Spiral PHP\nDESCRIPTION: Demonstrates how to manually commit and close a session.\nSOURCE: https://github.com/spiral/docs/blob/3.14/docs/en/basics/session.md#2025-04-20_snippet_4\n\nLANGUAGE: php\nCODE:\n```\n$this->session->commit();\n```\n\n----------------------------------------\n\nTITLE: Configuring HTTP Settings in Spiral Framework\nDESCRIPTION: PHP configuration file content for HTTP settings in Spiral Framework, including base path, default headers, and middleware.\nSOURCE: https://github.com/spiral/docs/blob/3.14/docs/zh-CN/http/configuration.md#2025-04-20_snippet_3\n\nLANGUAGE: php\nCODE:\n```\nreturn [\n    // 默认的 base path\n    'basePath'   => '/',\n    \n    // 默认的 headers\n    'headers'    => [\n        'Content-Type' => 'text/html; charset=UTF-8'\n    ],\n\n    // 应用级别的 middleware\n    'middleware' => [\n        // middleware 类名\n    ],\n];\n```\n\n----------------------------------------\n\nTITLE: Enabling AttributesBootloader in Spiral Framework\nDESCRIPTION: Code snippets showing how to enable the AttributesBootloader in a Spiral Framework application.\nSOURCE: https://github.com/spiral/docs/blob/3.14/docs/zh-CN/advanced/attributes.md#2025-04-20_snippet_1\n\nLANGUAGE: php\nCODE:\n```\npublic function defineBootloaders(): array\n{\n    return [\n        // ...\n        \\Spiral\\Bootloader\\Attributes\\AttributesBootloader::class,\n        // ...\n    ];\n}\n```\n\nLANGUAGE: php\nCODE:\n```\nprotected const LOAD = [\n    // ...\n    \\Spiral\\Bootloader\\Attributes\\AttributesBootloader::class,\n    // ...\n];\n```\n\n----------------------------------------\n\nTITLE: Using Inflector Binding\nDESCRIPTION: Shows how to use Inflector binding for modifying objects after creation in the container.\nSOURCE: https://github.com/spiral/docs/blob/3.14/docs/zh-CN/container/configuration.md#2025-04-20_snippet_17\n\nLANGUAGE: php\nCODE:\n```\nuse Spiral\\Core\\Config\\Inflector;\n\n$container->bind(LoggerAwareInterface::class, new Inflector(\n    inflector: static function (LoggerAwareInterface $obj, LoggerInterface $logger): LoggerAwareInterface {\n        $obj->setLogger($logger);\n\n        return $obj;\n    }\n));\n```\n\n----------------------------------------\n\nTITLE: Using WeakReference Binding\nDESCRIPTION: Demonstrates how to use WeakReference binding in the container.\nSOURCE: https://github.com/spiral/docs/blob/3.14/docs/zh-CN/container/configuration.md#2025-04-20_snippet_18\n\nLANGUAGE: php\nCODE:\n```\nuse Spiral\\Core\\Config\\WeakReference;\n\n$obj = new MyClass();\n\n$container->bind(MyClass::class, new WeakReference(\n    reference: new \\WeakReference($obj)\n));\n\n$obj === $container->get(MyClass::class); // true\n\nunset($obj);\n\n$obj1 = $container->get(MyClass::class); // 将创建一个新对象\n$obj1 === $container->get(MyClass::class); // true\n```\n\n----------------------------------------\n\nTITLE: Registering AuthBootloader in Kernel (PHP)\nDESCRIPTION: This diff snippet shows how to register the AuthBootloader in the application's Kernel.\nSOURCE: https://github.com/spiral/docs/blob/3.14/docs/en/cookbook/simple-chat.md#2025-04-20_snippet_40\n\nLANGUAGE: diff\nCODE:\n```\n// ORM\nCycleBridge\\AuthTokensBootloader::class,\n+\\App\\Application\\Bootloader\\AuthBootloader::class,\n```\n\n----------------------------------------\n\nTITLE: Running Psalm Static Analysis for Spiral Framework\nDESCRIPTION: Command to run Psalm static analysis with error level 4 to check for code issues. This tool helps identify type errors and other potential problems before code submission.\nSOURCE: https://github.com/spiral/docs/blob/3.14/docs/en/overview/contributing.md#2025-04-20_snippet_4\n\nLANGUAGE: terminal\nCODE:\n```\n./vendor/bin/psalm --no-cache\n```\n\n----------------------------------------\n\nTITLE: Starting Scheduler Worker Process\nDESCRIPTION: Command to start the scheduler worker process using the console.\nSOURCE: https://github.com/spiral/docs/blob/3.14/docs/zh-CN/advanced/scheduler.md#2025-04-20_snippet_16\n\nLANGUAGE: bash\nCODE:\n```\nphp app.php schedule:work\n```\n\n----------------------------------------\n\nTITLE: Installing Discoverer Package via Composer\nDESCRIPTION: Command to install the spiral-packages/discoverer package using Composer package manager.\nSOURCE: https://github.com/spiral/docs/blob/3.14/docs/en/component/discoverer.md#2025-04-20_snippet_0\n\nLANGUAGE: terminal\nCODE:\n```\ncomposer require spiral-packages/discoverer\n```\n\n----------------------------------------\n\nTITLE: Generated Logger Middleware Class in Spiral Framework (PHP)\nDESCRIPTION: Example output of a generated Logger middleware class in Spiral Framework. This class implements the PSR-15 MiddlewareInterface and provides a basic process method.\nSOURCE: https://github.com/spiral/docs/blob/3.14/docs/zh-CN/basics/scaffolding.md#2025-04-20_snippet_3\n\nLANGUAGE: php\nCODE:\n```\ndeclare(strict_types=1);\n\nnamespace App\\Endpoint\\Web\\Middleware;\n\nclass LoggerMiddleware implements \\Psr\\Http\\Server\\MiddlewareInterface\n{\n    public function process(\n        \\Psr\\Http\\Message\\ServerRequestInterface $request,\n        \\Psr\\Http\\Server\\RequestHandlerInterface $handler,\n    ): \\Psr\\Http\\Message\\ResponseInterface\n    {\n        return $handler->handle($request);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Resetting Views Cache\nDESCRIPTION: Command to delete the view cache\nSOURCE: https://github.com/spiral/docs/blob/3.14/docs/en/views/configuration.md#2025-04-20_snippet_4\n\nLANGUAGE: terminal\nCODE:\n```\nphp app.php views:reset\n```\n\n----------------------------------------\n\nTITLE: Configuring RoadRunner for gRPC in YAML\nDESCRIPTION: YAML configuration for RoadRunner to serve gRPC, specifying the listen address and proto file path.\nSOURCE: https://github.com/spiral/docs/blob/3.14/docs/zh-CN/grpc/service.md#2025-04-20_snippet_3\n\nLANGUAGE: yaml\nCODE:\n```\ngrpc:\n  listen: tcp://0.0.0.0:9001\n  proto:\n    - \"proto/pinger.proto\"\n```\n\n----------------------------------------\n\nTITLE: Installing spiral/attributes Component\nDESCRIPTION: Command to install the spiral/attributes component via Composer.\nSOURCE: https://github.com/spiral/docs/blob/3.14/docs/zh-CN/advanced/attributes.md#2025-04-20_snippet_0\n\nLANGUAGE: terminal\nCODE:\n```\ncomposer require spiral/attributes\n```\n\n----------------------------------------\n\nTITLE: Using Custom Cron Expression\nDESCRIPTION: Example of using a custom cron expression to schedule a task.\nSOURCE: https://github.com/spiral/docs/blob/3.14/docs/zh-CN/advanced/scheduler.md#2025-04-20_snippet_14\n\nLANGUAGE: php\nCODE:\n```\n$schedule->command('email:send', expression: new \\Cron\\CronExpression('* * * * *'));\n```\n\n----------------------------------------\n\nTITLE: Configuring Temporal Server Address in .env File\nDESCRIPTION: Environment variable setting for specifying the Temporal server address in the .env file.\nSOURCE: https://github.com/spiral/docs/blob/3.14/docs/en/temporal/configuration.md#2025-04-20_snippet_4\n\nLANGUAGE: terminal\nCODE:\n```\nTEMPORAL_ADDRESS=127.0.0.1:7233\n```\n\n----------------------------------------\n\nTITLE: Installing Protobuf Extension via PECL\nDESCRIPTION: Command to install the protobuf PHP extension using PECL for better performance with larger messages.\nSOURCE: https://github.com/spiral/docs/blob/3.14/docs/en/grpc/configuration.md#2025-04-20_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nsudo pecl install protobuf\n```\n\n----------------------------------------\n\nTITLE: Rendering JavaScript Date Range Picker in XHTML\nDESCRIPTION: This snippet shows how to use the form:date-range-double component to create a JavaScript-powered date range picker. It allows setting start and end dates, customizing formats, and enabling time input.\nSOURCE: https://github.com/spiral/docs/blob/3.14/docs/en/keeper/components.md#2025-04-20_snippet_28\n\nLANGUAGE: xhtml\nCODE:\n```\n<form:date-range-double\n        startName=\"date1\"\n        endName=\"date1\"\n        label=\"Date\"\n        startValue=\"2020-10-29T14:14:14+0300\"\n        endValue=\"2020-10-29T14:14:14+0300\"\n        size=\"6\"\n/>\n```\n\n----------------------------------------\n\nTITLE: Configuring Temporal Worker Options in PHP\nDESCRIPTION: PHP code example showing how to configure Temporal worker options for different task queues.\nSOURCE: https://github.com/spiral/docs/blob/3.14/docs/en/temporal/configuration.md#2025-04-20_snippet_7\n\nLANGUAGE: php\nCODE:\n```\nuse Temporal\\Worker\\WorkerOptions;\n\nreturn [\n    // ...\n    'workers' => [\n        'workerName' => WorkerOptions::new(),\n        'default' => WorkerOptions::new()\n           ->withMaxConcurrentActivityExecutionSize(10)\n           ->withWorkerActivitiesPerSecond(100),\n    ],\n];\n```\n\n----------------------------------------\n\nTITLE: Generating URIs for Files in PHP using Spiral Distribution\nDESCRIPTION: Shows how to generate URIs for files using the toUri() and toUriFrom() methods, including examples with default and custom URI resolvers.\nSOURCE: https://github.com/spiral/docs/blob/3.14/docs/en/advanced/storage.md#2025-04-20_snippet_20\n\nLANGUAGE: php\nCODE:\n```\nuse Spiral\\Storage\\BucketInterface;\nuse Spiral\\Distribution\\UriResolverInterface;\n\nclass UriController\n{\n    // Using default URI resolver\n    public function getUri(BucketInterface $bucket): string\n    {\n        return (string)$bucket\n            ->file('picture.jpg')\n            ->toUri();\n    }\n\n    // Using another URI resolver\n    public function getAnotherUri(BucketInterface $bucket, UriResolverInterface $resolver): string\n    {\n        return (string)$bucket\n            ->file('picture.jpg')\n            ->toUriFrom($resolver);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Starting Symfony VarDumper Server\nDESCRIPTION: Command to start the Symfony VarDumper server that collects and displays dumped data in a separate console window.\nSOURCE: https://github.com/spiral/docs/blob/3.14/docs/en/basics/debug.md#2025-04-20_snippet_6\n\nLANGUAGE: terminal\nCODE:\n```\n./vendor/bin/var-dump-server\n```\n\n----------------------------------------\n\nTITLE: Configuring Job Handler Declaration in Spiral Framework (PHP)\nDESCRIPTION: Configuration for the Job Handler declaration in Spiral Framework. This sets the namespace for generated job handler classes.\nSOURCE: https://github.com/spiral/docs/blob/3.14/docs/zh-CN/basics/scaffolding.md#2025-04-20_snippet_5\n\nLANGUAGE: php\nCODE:\n```\nSpiral\\Scaffolder\\Declaration\\JobHandlerDeclaration::TYPE => [\n    'namespace' => 'Endpoint\\Job',\n],\n```\n\n----------------------------------------\n\nTITLE: Setting Custom Lock Expiration Time\nDESCRIPTION: Example of setting a custom lock expiration time for the withoutOverlapping method.\nSOURCE: https://github.com/spiral/docs/blob/3.14/docs/zh-CN/advanced/scheduler.md#2025-04-20_snippet_13\n\nLANGUAGE: php\nCODE:\n```\n$schedule->command('ping', ['https://google.com'])\n   ->everyMinute()\n   ->withoutOverlapping(60)\n   -> ...;\n```\n\n----------------------------------------\n\nTITLE: Running Buggregator Using Docker Command\nDESCRIPTION: Docker command to pull and run the Buggregator server container, which provides advanced debugging features through a web interface.\nSOURCE: https://github.com/spiral/docs/blob/3.14/docs/en/basics/debug.md#2025-04-20_snippet_8\n\nLANGUAGE: terminal\nCODE:\n```\ndocker run --pull always ghcr.io/buggregator/server:latest\n    -p 8000:8000 \n    -p 1025:1025 \n    -p 9912:9912 \n    -p 9913:9913 \n```\n\n----------------------------------------\n\nTITLE: Complete Workflow and Activity Information Output\nDESCRIPTION: Sample output of the temporal:info command with the --with-activities flag, showing both workflow and activity details in a tabular format.\nSOURCE: https://github.com/spiral/docs/blob/3.14/docs/en/temporal/usage.md#2025-04-20_snippet_23\n\nLANGUAGE: bash\nCODE:\n```\nWorkflows\n=========\n\n+-----------------+------------------------------------------------------+------------------+\n| Name            | Class                                                | Task Queue       |\n+-----------------+------------------------------------------------------+------------------+\n| fooWorkflow     | Spiral\\TemporalBridge\\Tests\\Commands\\Workflow        | worker2          |\n|                 | src/Commands/InfoCommandTest.php                     |                  |\n| AnotherWorkflow | Spiral\\TemporalBridge\\Tests\\Commands\\AnotherWorkflow | default, worker2 |\n|                 | src/Commands/InfoCommandTest.php                     |                  |\n+-----------------+------------------------------------------------------+------------------+\n\nActivities\n==========\n\n+------------------------+---------------------------------------------+------------+\n| Name                   | Class                                       | Task Queue |\n+------------------------+---------------------------------------------+------------+\n| fooActivity            | ActivityInterfaceWithWorker::foo            | worker1    |\n| bar                    | ActivityInterfaceWithWorker::bar            |            |\n+------------------------+---------------------------------------------+------------+\n| fooActivity__construct | ActivityInterfaceWithoutWorker::__construct | default    |\n| fooActivitybaz         | ActivityInterfaceWithoutWorker::baz         |            |\n+------------------------+---------------------------------------------+------------+\n```\n\n----------------------------------------\n\nTITLE: Installing Data Grid and Cycle Bridge Components\nDESCRIPTION: Command to install the spiral/data-grid-bridge and spiral/cycle-bridge components using Composer.\nSOURCE: https://github.com/spiral/docs/blob/3.14/docs/en/component/data-grid.md#2025-04-20_snippet_0\n\nLANGUAGE: terminal\nCODE:\n```\ncomposer require spiral/data-grid-bridge spiral/cycle-bridge\n```\n\n----------------------------------------\n\nTITLE: Generated UserRegisteredNotification Job Handler Class in Spiral Framework (PHP)\nDESCRIPTION: Example output of a generated UserRegisteredNotification job handler class in Spiral Framework. This class extends the JobHandler and provides an invoke method for processing the job.\nSOURCE: https://github.com/spiral/docs/blob/3.14/docs/zh-CN/basics/scaffolding.md#2025-04-20_snippet_7\n\nLANGUAGE: php\nCODE:\n```\ndeclare(strict_types=1);\n\nnamespace App\\Endpoint\\Job;\n\nuse Spiral\\Queue\\JobHandler;\n\nfinal class UserRegisteredNotificationJob extends JobHandler\n{\n    public function invoke(string $id, array $payload, array $headers): void\n    {\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Filter with Array Mapping\nDESCRIPTION: This code demonstrates a filter object using array mapping to define the request field mappings within the `filterDefinition` method.  The filter definition also specifies validation rules for each field, again utilizing Laravel's validation capabilities.\nSOURCE: https://github.com/spiral/docs/blob/3.14/docs/zh-CN/validation/laravel.md#2025-04-20_snippet_5\n\nLANGUAGE: PHP\nCODE:\n```\nnamespace App\\Filter;\n\nuse Spiral\\Filters\\Model\\Filter;\nuse Spiral\\Filters\\Model\\FilterDefinitionInterface;\nuse Spiral\\Filters\\Model\\HasFilterDefinition;\nuse Spiral\\Validation\\Laravel\\FilterDefinition;\n\nfinal class CreatePostFilter extends Filter implements HasFilterDefinition\n{\n    public function filterDefinition(): FilterDefinitionInterface\n    {\n        return new FilterDefinition([\n            'title' => 'string|required|min:5',\n            'slug' => 'string|required|min:5',\n            'sort' => 'integer|required',\n            'image' => 'required|image'\n        ], [\n            'title' => 'title',\n            'slug' => 'slug',\n            'sort' => 'sort',\n            'image' => 'symfony-file:image'\n        ]);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Initial Notification Activity Class Structure\nDESCRIPTION: Basic structure of the SendNotificationActivity class with placeholder methods for sending notifications\nSOURCE: https://github.com/spiral/docs/blob/3.14/docs/en/temporal/usage.md#2025-04-20_snippet_10\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\ndeclare(strict_types=1);\n\nnamespace App\\Endpoint\\Temporal\\Activity;\n\nuse React\\Promise\\PromiseInterface;\nuse Temporal\\Activity\\ActivityInterface;\nuse Temporal\\Activity\\ActivityMethod;\n\n#[ActivityInterface]\nclass SendNotificationActivity\n{\n    /**\n     * @return PromiseInterface<void>\n     */\n    #[ActivityMethod(name: 'sendFailedNotification')]\n    public function sendFailedNotification(): void\n    {\n        // TODO: Implement activity method\n    }\n    \n    /**\n     * @return PromiseInterface<void>\n     */\n    #[ActivityMethod(name: 'sendRecoveryNotification')]\n    public function sendRecoveryNotification(): void\n    {\n        // TODO: Implement activity method\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Component Usage with Props\nDESCRIPTION: Example showing how to use the article component with different prop passing methods.\nSOURCE: https://github.com/spiral/docs/blob/3.14/docs/en/views/stempler.md#2025-04-20_snippet_43\n\nLANGUAGE: html\nCODE:\n```\n<extends:layout.base title=\"Homepage\"/>\n<use:element path=\"partial/article\"/>\n\n<block:content>\n    This is the homepage.\n\n    <article>\n        <block:title>Article 1 title</block:title>\n        <block:preview>\n            This is article 1 preview.\n        </block:preview>\n    </article>\n\n    <article title=\"Article 2\">\n        <block:preview>\n            <block:parent/>\n            This is article 1 preview.\n        </block:preview>\n    </article>\n\n    <article title=\"Article 3\" preview=\"This is article 3 preview.\"/>\n</block:content>\n```\n\n----------------------------------------\n\nTITLE: Docker Compose Setup for OpenTelemetry Collector and Zipkin\nDESCRIPTION: Docker Compose configuration to run the OpenTelemetry collector and Zipkin tracing system for visualizing telemetry data.\nSOURCE: https://github.com/spiral/docs/blob/3.14/docs/en/advanced/telemetry.md#2025-04-20_snippet_4\n\nLANGUAGE: yaml\nCODE:\n```\nversion: \"3.6\"\n\nservices:\n  collector:\n    image: otel/opentelemetry-collector-contrib\n    command: [ \"--config=/etc/otel-collector-config.yml\" ]\n    volumes:\n      - ./otel-collector-config.yml:/etc/otel-collector-config.yml\n    ports:\n      - \"4318:4318\"\n\n  zipkin:\n    image: openzipkin/zipkin-slim\n    ports:\n      - \"9411:9411\"\n```\n\n----------------------------------------\n\nTITLE: Error Handling in gRPC Service Method\nDESCRIPTION: Example of throwing gRPC-specific exceptions for error handling in a service method.\nSOURCE: https://github.com/spiral/docs/blob/3.14/docs/zh-CN/grpc/service.md#2025-04-20_snippet_6\n\nLANGUAGE: php\nCODE:\n```\npublic function ping(GRPC\\ContextInterface $ctx, PingRequest $in): PingResponse\n{\n    if ($in->getUrl() === '') {\n        throw new GRPC\\ServiceException('URL is empty');\n    }\n    \n    if (!\\filter_var($url, FILTER_VALIDATE_URL)) {\n        throw new GRPC\\ServiceException(\\sprintf('URL \"%s\" is invalid', $url));\n    }\n\n    return new PingResponse([\n        'status_code' => $this->httpClient->get($in->getUrl())->getStatusCode(),\n    ]);\n}\n```\n\n----------------------------------------\n\nTITLE: Installing Spiral Framework Application\nDESCRIPTION: Command to create a new Spiral Framework project using Composer. This installs the default spiral/app bundle with most of the required components.\nSOURCE: https://github.com/spiral/docs/blob/3.14/docs/en/cookbook/quick-start.md#2025-04-20_snippet_0\n\nLANGUAGE: terminal\nCODE:\n```\ncomposer create-project spiral/app spiral-demo\n```\n\n----------------------------------------\n\nTITLE: Basic Form Input Example in XHTML\nDESCRIPTION: Example showing how to create a required text input field with a label using Spiral form components.\nSOURCE: https://github.com/spiral/docs/blob/3.14/docs/en/keeper/components.md#2025-04-20_snippet_19\n\nLANGUAGE: xhtml\nCODE:\n```\n<form:input name=\"firstName\" label=\"First Name\" value=\"\" size=\"6\" required=\"true\"/>\n```\n\n----------------------------------------\n\nTITLE: Enabling Validator Bootloader (Constant)\nDESCRIPTION: This code snippet shows an alternative method to enable the Laravel Validator component by adding the `ValidatorBootloader` to the application's bootloaders list using a constant. This is another way to register the Laravel validator with the Spiral framework.\nSOURCE: https://github.com/spiral/docs/blob/3.14/docs/zh-CN/validation/laravel.md#2025-04-20_snippet_2\n\nLANGUAGE: PHP\nCODE:\n```\nprotected const LOAD = [\n    // ...\n    \\Spiral\\Validation\\Laravel\\Bootloader\\ValidatorBootloader::class,\n    // ...\n];\n```\n\n----------------------------------------\n\nTITLE: Creating a Complex UI Layout with Tabs in Stempler\nDESCRIPTION: Shows how to create a complex UI layout with tabs using Stempler's stacks and custom components. This example demonstrates advanced DSL creation for UI assembly.\nSOURCE: https://github.com/spiral/docs/blob/3.14/docs/en/views/stempler.md#2025-04-20_snippet_53\n\nLANGUAGE: html\nCODE:\n```\n<!DOCTYPE html>\n<html>\n<head>\n    <title>${title|Default title}</title>\n    <stack:collect name=\"styles\" level=\"2\"/>\n</head>\n<body>\n<div class=\"tab-headers\">\n    <stack:collect name=\"tab-headers\" level=\"2\"/>\n</div>\n<div class=\"tab-body\">\n    <stack:collect name=\"tab-body\" level=\"2\"/>\n</div>\n</body>\n<stack:collect name=\"scripts\" level=\"2\"/>\n<hidden>${context}</hidden>\n</html>\n```\n\n----------------------------------------\n\nTITLE: Installing Sentry Bridge via Composer\nDESCRIPTION: Command to install the Sentry bridge package using Composer\nSOURCE: https://github.com/spiral/docs/blob/3.14/docs/en/basics/errors.md#2025-04-20_snippet_15\n\nLANGUAGE: terminal\nCODE:\n```\ncomposer require spiral/sentry-bridge\n```\n\n----------------------------------------\n\nTITLE: Installing Temporal Bridge Package for PHP\nDESCRIPTION: Command to install the spiral/temporal-bridge package using Composer.\nSOURCE: https://github.com/spiral/docs/blob/3.14/docs/en/temporal/configuration.md#2025-04-20_snippet_0\n\nLANGUAGE: terminal\nCODE:\n```\ncomposer require spiral/temporal-bridge\n```\n\n----------------------------------------\n\nTITLE: Creating a Grid Cell Component in Stempler\nDESCRIPTION: Demonstrates how to create a cell component for a grid table, using stacks to push content into the appropriate sections of the parent table.\nSOURCE: https://github.com/spiral/docs/blob/3.14/docs/en/views/stempler.md#2025-04-20_snippet_52\n\nLANGUAGE: html\nCODE:\n```\n<stack:push name=\"thead\">\n    <th>${title}</th>\n</stack:push>\n\n<stack:push name=\"tbody\">\n    <td>${value}${context}</td>\n</stack:push>\n```\n\n----------------------------------------\n\nTITLE: Configuring Sentry with Extended Environment Variables\nDESCRIPTION: Shows an example of setting multiple Sentry configuration options using environment variables, including sample rates, PII handling, environment, and release version.\nSOURCE: https://github.com/spiral/docs/blob/3.14/docs/en/basics/errors.md#2025-04-20_snippet_19\n\nLANGUAGE: dotenv\nCODE:\n```\nSENTRY_DSN=https://...\nSENTRY_SAMPLE_RATE=0.4\nSENTRY_TRACES_SAMPLE_RATE=1.0\nSENTRY_SEND_DEFAULT_PII=false\n\nSENTRY_ENVIRONMENT=develop\nSENTRY_RELEASE=1.0.0\n# or\nAPP_ENV=develop\nAPP_VERSION=1.0.0\n```\n\n----------------------------------------\n\nTITLE: Installing RoadRunner CLI via Composer\nDESCRIPTION: Commands to install RoadRunner CLI package and download the latest version of RoadRunner server.\nSOURCE: https://github.com/spiral/docs/blob/3.14/docs/en/start/server.md#2025-04-20_snippet_0\n\nLANGUAGE: terminal\nCODE:\n```\ncomposer require spiral/roadrunner-cli\n```\n\nLANGUAGE: terminal\nCODE:\n```\n./vendor/bin/rr get\n```\n\n----------------------------------------\n\nTITLE: Writing Output Without Line Break\nDESCRIPTION: Example of writing output to console without advancing to new line.\nSOURCE: https://github.com/spiral/docs/blob/3.14/docs/en/console/commands.md#2025-04-20_snippet_9\n\nLANGUAGE: php\nCODE:\n```\n$this->write('hello world');\n```\n\n----------------------------------------\n\nTITLE: Installing RoadRunner via cURL\nDESCRIPTION: Command to download the latest stable release of RoadRunner using cURL.\nSOURCE: https://github.com/spiral/docs/blob/3.14/docs/en/start/server.md#2025-04-20_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ncurl --proto '=https' --tlsv1.2 -sSf  https://raw.githubusercontent.com/roadrunner-server/roadrunner/master/download-latest.sh | sh\n```\n\n----------------------------------------\n\nTITLE: Including Keeper Bundle in Project\nDESCRIPTION: Shows how to include the Keeper bundle that contains the DataGrid components.\nSOURCE: https://github.com/spiral/docs/blob/3.14/docs/en/keeper/components.md#2025-04-20_snippet_0\n\nLANGUAGE: xhtml\nCODE:\n```\n<use:bundle path=\"keeper:bundle\"/>\n```\n\n----------------------------------------\n\nTITLE: Using Context Block with Stack Management\nDESCRIPTION: Demonstrates how to use stack operations outside of blocks in a child template, which will be included via the context block in the parent template.\nSOURCE: https://github.com/spiral/docs/blob/3.14/docs/en/views/stempler.md#2025-04-20_snippet_38\n\nLANGUAGE: html\nCODE:\n```\n<extends:layout.base title=\"Homepage\" body-class=\"homepage ${parent}\"/>\n\n<stack:push name=\"styles\">\n    <link rel=\"stylesheet\" href=\"/styles/homepage.css\"/>\n</stack:push>\n\nsome random string\n\n<block:page>\n    Page content.\n</block:page>\n```\n\n----------------------------------------\n\nTITLE: Installing Spiral Storage Component via Composer\nDESCRIPTION: Command to install the spiral/storage component using Composer package manager.\nSOURCE: https://github.com/spiral/docs/blob/3.14/docs/en/advanced/storage.md#2025-04-20_snippet_0\n\nLANGUAGE: terminal\nCODE:\n```\ncomposer require spiral/storage\n```\n\n----------------------------------------\n\nTITLE: Implementing SchedulerBootloader for Task Management\nDESCRIPTION: Example of a SchedulerBootloader class that defines and configures various scheduled tasks.\nSOURCE: https://github.com/spiral/docs/blob/3.14/docs/zh-CN/advanced/scheduler.md#2025-04-20_snippet_5\n\nLANGUAGE: php\nCODE:\n```\nuse Spiral\\Boot\\Bootloader\\Bootloader;\nuse Spiral\\Scheduler\\Schedule;\nuse Psr\\Log\\LoggerInterface;\nuse Spiral\\Boot\\DirectoriesInterface;\n\nfinal class SchedulerBootloader extends Bootloader\n{\n    public function boot(Schedule $schedule, DirectoriesInterface $dirs): void\n    {\n        // Run console command by name\n        $schedule->command('ping', ['https://google.com'])\n            ->everyFiveMinutes()\n            ->withoutOverlapping()\n            ->appendOutputTo($dirs->get('runtime').'logs/cron.log');\n            \n        // Run console command by class name\n        $schedule->command(PingCommand::class, ['https://google.com'])\n            ->everyFiveMinutes()\n            ->withoutOverlapping()\n            ->appendOutputTo($dirs->get('runtime').'logs/cron.log');\n            \n        // Run callable task\n        $schedule->call('Ping url', static function (LoggerInterface $logger, string $url) {\n            $headers = @get_headers($url);\n            $status = $headers && \\strpos($headers[0], '200');\n\n            $logger->info(\\sprintf('URL: %s %s', $url, $status ? 'Exists' : 'Does not exist'));\n\n            return $status;\n        }, ['url' => 'https://google.com'])\n           ->everyFiveMinutes()\n           ->withoutOverlapping();\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Insufficient Stack Level Example\nDESCRIPTION: Demonstrates a case where the level attribute is insufficient to extend the stack scope to the required level, resulting in the stack operation not working.\nSOURCE: https://github.com/spiral/docs/blob/3.14/docs/en/views/stempler.md#2025-04-20_snippet_33\n\nLANGUAGE: html\nCODE:\n```\n<div>\n    // stack my-stack is active here\n    <div>\n        // stack my-stack is active here\n        <stack:collect name=\"my-stack\" level=\"1\">\n            default content\n        </stack:collect>\n    </div>\n</div>\n\n// stack my-stack is no active at this level\n\n<stack:prepend name=\"my-stack\">\n    my value\n</stack:prepend>\n```\n\n----------------------------------------\n\nTITLE: Binding with Factory DTO in PHP\nDESCRIPTION: Shows how to use the Factory DTO to create mixed types using a closure.\nSOURCE: https://github.com/spiral/docs/blob/3.14/docs/en/container/configuration.md#2025-04-20_snippet_13\n\nLANGUAGE: php\nCODE:\n```\nuse Spiral\\Core\\Config\\Factory;\n\n$container->bind('time', new Factory(\n    callable: static fn() => time(),\n));\n```\n\n----------------------------------------\n\nTITLE: Configuring RoadRunner for Jobs in YAML\nDESCRIPTION: RoadRunner configuration in YAML format enabling the jobs plugin and RPC communication.\nSOURCE: https://github.com/spiral/docs/blob/3.14/docs/en/start/queue-basics.md#2025-04-20_snippet_3\n\nLANGUAGE: yaml\nCODE:\n```\nrpc:\n  listen: 'tcp://127.0.0.1:6001'\n\njobs:\n  consume: { }\n\n# ...\n```\n\n----------------------------------------\n\nTITLE: Using Stack Level Attribute to Extend Scope\nDESCRIPTION: Shows how to use the 'level' attribute on a stack collector to make it available at higher levels in the template structure, extending its scope.\nSOURCE: https://github.com/spiral/docs/blob/3.14/docs/en/views/stempler.md#2025-04-20_snippet_32\n\nLANGUAGE: html\nCODE:\n```\n<div>\n    <stack:collect name=\"my-stack\" level=\"1\">\n        default content\n    </stack:collect>\n</div>\n\n<stack:prepend name=\"my-stack\">\n    my value\n</stack:prepend>\n```\n\n----------------------------------------\n\nTITLE: Console Helper Methods Usage\nDESCRIPTION: Demonstration of various helper methods available for command line interactions in Spiral Console Commands\nSOURCE: https://github.com/spiral/docs/blob/3.14/docs/en/cookbook/migration-from-v2.md#2025-04-20_snippet_26\n\nLANGUAGE: php\nCODE:\n```\nclass SomeCommand extends Command \n{\n    // ...\n\n    public function perform(): int\n    {\n        // Determine if the input option is present.\n        $this->hasOption(...);\n\n        // Determine if the input argument is present.\n        $this->hasArgument(...);\n\n        // Ask for confirmation.\n        $status = $this->confirm('Are you sure?', default: false): bool;\n\n        // Ask a question.\n        $status = $this->ask('Are you sure?', default: 'no'): mixed;\n\n        // Prompt the user for input but hide the answer from the console.\n        $status = $this->secret('User password'): string;\n\n        // Write a message as information output.\n        $this->info(...);\n\n        // Write a message as comment output.\n        $this->comment(...);\n\n        // Write a message as question output.\n        $this->question(...);\n\n        // Write a message as error output.\n        $this->error(...);\n\n        // Write a message as warning output.\n        $this->warning(...);\n\n        // Write a message as alert output.\n        $this->alert(...);\n\n        // Write a message as standard output.\n        $this->line(..., 'error');\n\n        // Write a blank line.\n        $this->newLine();\n\n        $this->newLine(count: 5);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Stack Prepend Output Example\nDESCRIPTION: Shows the HTML output when prepending content to a stack, with the prepended content appearing before the default stack content.\nSOURCE: https://github.com/spiral/docs/blob/3.14/docs/en/views/stempler.md#2025-04-20_snippet_28\n\nLANGUAGE: html\nCODE:\n```\n  my value\ndefault content\n```\n\n----------------------------------------\n\nTITLE: Using Filter in Console Command for Input Validation in PHP\nDESCRIPTION: Example of using a filter to validate and access input data in a console command implementation.\nSOURCE: https://github.com/spiral/docs/blob/3.14/docs/zh-CN/cookbook/console-validation.md#2025-04-20_snippet_6\n\nLANGUAGE: PHP\nCODE:\n```\nnamespace App\\Command;\n\nuse Spiral\\Console\\Command;\n\nfinal class UserRegister extends Command\n{\n    protected const SIGNATURE = <<<CMD\n        user:register\n        {username : 用户名}\n        {email : 用户邮箱地址}\n        {--a|admin : 标记为管理员}\n        {--s|send-verification-email : 向用户发送验证邮件}\nCMD;\n\n    public function perform(UserRegisterFilter $input): int\n    {\n        $this->writeln(\\sprintf('Username: %s', $input->username));\n        $this->writeln(\\sprintf('Email: %s', $input->email));\n        $this->writeln(\\sprintf('Is admin: %s', $input->admin ? 'yes' : 'no'));\n\n        // $user = new User(\n        //     username: $filter->username,\n        //     email: $filter->email,\n        //    admin: $filter->admin\n        // );\n\n        // 将用户存储在数据库中...\n\n        if ($input->sendVerificationEmail) {\n            $this->writeln('发送验证电子邮件...');\n\n            // 发送验证电子邮件...\n        }\n\n        $this->writeln(\\sprintf('用户 %s 已注册', $input->username));\n\n        return self::SUCCESS;\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Custom Output Object Implementation\nDESCRIPTION: Example of replacing the output object in console commands for customized output handling\nSOURCE: https://github.com/spiral/docs/blob/3.14/docs/en/cookbook/migration-from-v2.md#2025-04-20_snippet_27\n\nLANGUAGE: php\nCODE:\n```\nuse Symfony\\Component\\Console\\Input\\InputInterface;\nuse Symfony\\Component\\Console\\Output\\OutputInterface;\n\nabstract class MyCommand extends \\Spiral\\Console\\Command \n{\n    protected function prepareOutput(InputInterface $input, OutputInterface $output): OutputInterface\n    {\n        return new \\App\\Console\\MyOutput($input, $output);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Event Interceptor in Spiral\nDESCRIPTION: Example of creating an event interceptor class that implements CoreInterceptorInterface. This demonstrates how to intercept and modify events or perform additional actions during event dispatching.\nSOURCE: https://github.com/spiral/docs/blob/3.14/docs/zh-CN/advanced/events.md#2025-04-20_snippet_4\n\nLANGUAGE: php\nCODE:\n```\nnamespace App\\Broadcasting;\n\nuse Spiral\\Broadcasting\\BroadcastInterface;\nuse Spiral\\Core\\CoreInterceptorInterface;\nuse Spiral\\Core\\CoreInterface;\nuse Spiral\\Queue\\SerializerRegistryInterface;\n\nfinal class BroadcastEventInterceptor implements CoreInterceptorInterface\n{\n    public function __construct(\n        private readonly BroadcastInterface $broadcast,\n        private readonly SerializerRegistryInterface $registry\n    ) {\n    }\n\n    public function process(string $controller, string $action, array $parameters, CoreInterface $core): mixed\n    {\n        $event = $parameters['event'];\n\n        // Dispatch event first\n        $result = $core->callAction($controller, $action, $parameters);\n\n        // Broadcast event after dispatch\n        if ($event instanceof ShouldBroadcastInterface) {\n            $this->broadcast->publish(\n                $event->getBroadcastTopics(),\n                $this->registry->getSerializer('json')->serialize(\n                    ['event' => $event->getEventName(), 'data' => $event->getPayload()]\n                )\n            );\n        }\n\n        return $result;\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Using Custom Metadata with PHP 8 Attributes\nDESCRIPTION: Example of using a custom metadata class with PHP 8 attribute syntax, passing a named property argument. This demonstrates how to provide parameters to attributes.\nSOURCE: https://github.com/spiral/docs/blob/3.14/docs/en/advanced/attributes.md#2025-04-20_snippet_12\n\nLANGUAGE: php\nCODE:\n```\n#[CustomMetadataClass(property: \"value\")]\nclass AnnotatedClass\n{\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Database Token Storage in .env\nDESCRIPTION: Shows how to configure the application to use Cycle ORM-based token storage.\nSOURCE: https://github.com/spiral/docs/blob/3.14/docs/en/security/authentication.md#2025-04-20_snippet_10\n\nLANGUAGE: dotenv\nCODE:\n```\nAUTH_TOKEN_STORAGE=cycle\n```\n\n----------------------------------------\n\nTITLE: Keeper Tabs Layout Template\nDESCRIPTION: Tab-based layout template with multiple content sections.\nSOURCE: https://github.com/spiral/docs/blob/3.14/docs/zh-CN/keeper/views.md#2025-04-20_snippet_5\n\nLANGUAGE: html\nCODE:\n```\n<extends:keeper:layout.tabs title=\"[[Title]]\"/>\n<use:bundle path=\"keeper:bundle\"/>\n\n<ui:tab id=\"information\" icon=\"info\" title=\"[[Information]]\" active=\"true\">\n    [[Information tab content.]]\n</ui:tab>\n<ui:tab id=\"data\" icon=\"cog\" title=\"[[Data]]\">\n    [[Data tab content.]]\n</ui:tab>\n```\n\n----------------------------------------\n\nTITLE: Implementing Custom Input Source for Console Commands in PHP\nDESCRIPTION: Implementation of a custom InputInterface for console commands, allowing integration with the filters component.\nSOURCE: https://github.com/spiral/docs/blob/3.14/docs/zh-CN/cookbook/console-validation.md#2025-04-20_snippet_1\n\nLANGUAGE: PHP\nCODE:\n```\nnamespace App\\Application\\Console;\n\nuse Spiral\\Filters\\InputInterface as FilterInputInterface;\nuse Symfony\\Component\\Console\\Input\\InputInterface;\n\nfinal class ConsoleInput implements FilterInputInterface\n{\n    public function __construct(\n        private readonly InputInterface $input\n    ) {\n    }\n\n    public function withPrefix(string $prefix, bool $add = true): self\n    {\n        return $this;\n    }\n\n    public function getValue(string $source, string $name = null): mixed\n    {\n        return match ($source) {\n            'argument' => $this->input->getArgument($name),\n            'option' => $this->input->getOption($name),\n            default => throw new \\InvalidArgumentException('Invalid input source'),\n        };\n    }\n\n    public function hasValue(string $source, string $name): bool\n    {\n        return match ($source) {\n            'argument' => $this->input->hasArgument($name),\n            'option' => $this->input->hasOption($name),\n            default => throw new \\InvalidArgumentException('Invalid input source'),\n        };\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Route Configuration using RoutingConfigurator - Spiral PHP\nDESCRIPTION: Defining routes programmatically using the RoutesBootloader class\nSOURCE: https://github.com/spiral/docs/blob/3.14/docs/en/start/http-basics.md#2025-04-20_snippet_3\n\nLANGUAGE: php\nCODE:\n```\nfinal class RoutesBootloader extends BaseRoutesBootloader\n{\n    // ...\n\n    protected function defineRoutes(RoutingConfigurator $routes): void\n    {\n        $routes->add(name: 'current-date', pattern: '/date')\n            ->action(controller: CurrentDateController::class, action: 'show');\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Keeper Page Layout Template\nDESCRIPTION: Basic page layout template structure with content block.\nSOURCE: https://github.com/spiral/docs/blob/3.14/docs/zh-CN/keeper/views.md#2025-04-20_snippet_4\n\nLANGUAGE: html\nCODE:\n```\n<extends:keeper:layout.page title=\"[[Title]]\"/>\n<use:bundle path=\"keeper:bundle\"/>\n\n<define:content>\n    [[Some page content.]]\n</define:content>\n```\n\n----------------------------------------\n\nTITLE: Validating data using specific validator\nDESCRIPTION: This snippet shows how to retrieve a specific validator instance from the `ValidationProviderInterface` and use it to validate data. This allows for using different validators within the same application.\nSOURCE: https://github.com/spiral/docs/blob/3.14/docs/zh-CN/validation/factory.md#2025-04-20_snippet_5\n\nLANGUAGE: php\nCODE:\n```\n```php app/src/Interface/Controller/UserController.php\nuse Spiral\\Http\\Request\\InputManager;\nuse Spiral\\Validation\\ValidationProviderInterface;\n\nclass UserController\n{\n    public function create(InputManager $input, ValidationProviderInterface $provider)\n    {\n        $validator = $provider->getValidation('my-validator')->validate([\n            'username' => $input->post('username'),\n            'email' => $input->post('email'),\n        ], [\n            'username' => 'required',\n            'email' => 'required|email',\n        ]);\n\n        // Validate the data...\n        // Store the user in the database...\n    }\n}\n```\n```\n\n----------------------------------------\n\nTITLE: Validating data using default validator\nDESCRIPTION: This example demonstrates how to validate user data within a controller using the default validator. It injects `ValidatorInterface`, defines validation rules, and checks for validation errors.\nSOURCE: https://github.com/spiral/docs/blob/3.14/docs/zh-CN/validation/factory.md#2025-04-20_snippet_4\n\nLANGUAGE: php\nCODE:\n```\n```php app/src/Interface/Controller/UserController.php\nuse Spiral\\Http\\Request\\InputManager;\nuse Spiral\\Validation\\ValidatorInterface;\n\nclass UserController\n{\n    public function create(InputManager $input, ValidatorInterface $validator)\n    {\n        $validator = $validator->validate([\n            'username' => $input->post('username'),\n            'email' => $input->post('email'),\n        ], [\n            'username' => 'required',\n            'email' => 'required|email',\n        ]);\n        \n        if (!$validator->isValid()) {\n            $errors = $validator->getErrors();\n            // ...\n        }\n\n        // Store the user in the database...\n    }\n}\n```\n```\n\n----------------------------------------\n\nTITLE: Implementing PHP gRPC Client Class\nDESCRIPTION: Creates a PHP client class that implements the generated PingerInterface to communicate with the gRPC service. The class extends Grpc\\BaseStub and implements the ping method to make requests to the server.\nSOURCE: https://github.com/spiral/docs/blob/3.14/docs/zh-CN/grpc/client.md#2025-04-20_snippet_0\n\nLANGUAGE: php\nCODE:\n```\nnamespace App\\Service;\n\nuse GRPC\\Pinger;\nuse Spiral\\Core\\CoreInterface;\nuse Spiral\\RoadRunner\\GRPC;\n\nfinal class PingerClient implements Pinger\\PingerInterface extends \\Grpc\\BaseStub\n{\n    public function ping(GRPC\\ContextInterface $ctx, Pinger\\PingRequest $in): Pinger\\PingResponse\n    {\n        [$response, $status] = $this->_simpleRequest(\n            '/' . self::NAME . '/ping',\n            $in,\n            [Pinger\\PingResponse::class, 'decode'],\n            (array) $ctx->getValue('metadata'),\n            (array) $ctx->getValue('options')\n        )->wait();\n\n        return $response;\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Adding CentrifugoBootloader in Kernel (using method)\nDESCRIPTION: This code snippet demonstrates how to add the CentrifugoBootloader to the list of bootloaders in the Kernel class of a Spiral application. This is done within the `defineBootloaders` method.\nSOURCE: https://github.com/spiral/docs/blob/3.14/docs/zh-CN/websockets/configuration.md#2025-04-20_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n```php app/src/Application/Kernel.php\npublic function defineBootloaders(): array\n{\n    return [\n        // ...\n        \\Spiral\\RoadRunnerBridge\\Bootloader\\CentrifugoBootloader::class,\n        // ...\n    ];\n}\n```\n```\n\n----------------------------------------\n\nTITLE: Context Block Output Example\nDESCRIPTION: Shows the HTML output when using the context block, including both the processed stacks and any unprocessed content that was outside of defined blocks in the child template.\nSOURCE: https://github.com/spiral/docs/blob/3.14/docs/en/views/stempler.md#2025-04-20_snippet_39\n\nLANGUAGE: html\nCODE:\n```\n<!DOCTYPE html>\n<html>\n<head>\n    <title>Homepage</title>\n    <link rel=\"stylesheet\" href=\"/styles/welcome.css\"/>\n    <link rel=\"stylesheet\" href=\"/styles/homepage.css\"/>\n</head>\n<body class=\"homepage default\">\nDefault content.\n</body>\nsome random string\n</html>\n```\n\n----------------------------------------\n\nTITLE: Implementing the FinalizerInterface in PHP\nDESCRIPTION: Definition of the FinalizerInterface in Spiral Framework that allows adding finalizers to be executed after request completion. The interface provides methods to register finalizer callables and trigger their execution.\nSOURCE: https://github.com/spiral/docs/blob/3.14/docs/zh-CN/framework/finalizers.md#2025-04-20_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n/**\n * Finalizers 用于关闭长时间运行的进程的资源和连接。\n */\ninterface FinalizerInterface\n{\n    /**\n     * 终结器会在每次请求之后执行，并用于垃圾回收\n     * 或者关闭打开的连接。\n     *\n     * @param callable $finalizer\n     */\n    public function addFinalizer(callable $finalizer);\n    \n    /**\n     * 终结执行。\n     *\n     * @param bool $terminate 如果在应用程序终止时触发，则设置为 true。\n     */\n    public function finalize(bool $terminate = false);\n}\n```\n\n----------------------------------------\n\nTITLE: ReaderInterface Definition for Attribute Handling\nDESCRIPTION: Interface definition for ReaderInterface, which provides methods for reading attributes from various PHP elements.\nSOURCE: https://github.com/spiral/docs/blob/3.14/docs/zh-CN/advanced/attributes.md#2025-04-20_snippet_2\n\nLANGUAGE: php\nCODE:\n```\ninterface ReaderInterface\n{\n    public function getClassMetadata(\\ReflectionClass $class, string $name = null): iterable;\n    public function getPropertyMetadata(\\ReflectionProperty $property, string $name = null): iterable;\n    public function getFunctionMetadata(\\ReflectionFunctionAbstract $function, string $name = null): iterable;\n    public function getConstantMetadata(\\ReflectionClassConstant $constant, string $name = null): iterable;\n    public function getParameterMetadata(\\ReflectionParameter $parameter, string $name = null): iterable;\n    \n    public function firstClassMetadata(\\ReflectionClass $class, string $name): ?object;\n    public function firstPropertyMetadata(\\ReflectionProperty $property, string $name): ?object;\n    public function firstFunctionMetadata(\\ReflectionFunctionAbstract $function, string $name): ?object;\n    public function firstConstantMetadata(\\ReflectionClassConstant $constant, string $name): ?object;\n    public function firstParameterMetadata(\\ReflectionParameter $parameter, string $name): ?object;\n}\n```\n\n----------------------------------------\n\nTITLE: DataGrid with Search and Modal Filter\nDESCRIPTION: Shows a comprehensive filter setup with both search functionality and a modal filter form. The filter includes field inputs and automatic buttons for applying and clearing filters.\nSOURCE: https://github.com/spiral/docs/blob/3.14/docs/zh-CN/keeper/components.md#2025-04-20_snippet_6\n\nLANGUAGE: xhtml\nCODE:\n```\n<ui:grid url=\"@action('users.list', inject('params', []))\" namespace=\"main\">\n    <grid:filter search=\"true\" immediate=\"300\" buttons=\"true\">\n        <form:input name=\"firstName\" label=\"First Name\" value=\"\" size=\"6\" required=\"true\"/>\n        <form:input name=\"lastName\" label=\"Last Name\" value=\"\" size=\"6\" required=\"true\"/>\n        <form:input name=\"email\" label=\"Email\" value=\"\" required=\"true\"/>\n    </grid:filter>\n</ui:grid>\n```\n\n----------------------------------------\n\nTITLE: Installing Broadcasting Bootloader in Spiral Kernel (Constant Approach)\nDESCRIPTION: Shows how to add the BroadcastingBootloader to the application kernel using a LOAD constant.\nSOURCE: https://github.com/spiral/docs/blob/3.14/docs/en/websockets/broadcasting.md#2025-04-20_snippet_1\n\nLANGUAGE: php\nCODE:\n```\nprotected const LOAD = [\n    // ...\n    \\Spiral\\Broadcasting\\Bootloader\\BroadcastingBootloader::class,\n    // ...\n];\n```\n\n----------------------------------------\n\nTITLE: Using Then Callback in Scheduled Task\nDESCRIPTION: Example of using the then method to register a callback that runs after the scheduled task.\nSOURCE: https://github.com/spiral/docs/blob/3.14/docs/zh-CN/advanced/scheduler.md#2025-04-20_snippet_8\n\nLANGUAGE: php\nCODE:\n```\n$schedule->command('backup:run')\n   ->everyFiveMinutes()\n   ->then(static fn(Notifier $notifier) => $notifier->send('Backup completed'));\n   -> ...;\n```\n\n----------------------------------------\n\nTITLE: Configuring Console Sequences in PHP using Spiral Framework\nDESCRIPTION: Demonstrates how to add configuration sequences to a Spiral application. It shows adding both command strings and closures to the sequence.\nSOURCE: https://github.com/spiral/docs/blob/3.14/docs/zh-CN/console/sequences.md#2025-04-20_snippet_0\n\nLANGUAGE: PHP\nCODE:\n```\nuse Symfony\\Component\\Console\\Output\\OutputInterface;\nuse Psr\\Container\\ContainerInterface;\nuse Spiral\\Boot\\Bootloader\\Bootloader;\nuse Spiral\\Console\\Bootloader\\ConsoleBootloader;\n\nclass AppBootloader extends Bootloader\n{\n    public function boot(ConsoleBootloader $console): void\n    {\n        $console->addConfigureSequence(\n            sequence: 'generate:keys', \n            header: '<info>Generating SSH keys for the application...</info>'\n        );\n        \n        // 在序列中添加闭包\n        // 它支持参数的自动注入\n        $console->addConfigureSequence(\n            static function(OutputInterface $output, ContainerInterface $container): void {\n                // do something\n            }, \n            '<info>Caching something...</info>'\n        );\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Installing Symfony Serializer Package\nDESCRIPTION: Composer command to install the Symfony Serializer package for object payload serialization.\nSOURCE: https://github.com/spiral/docs/blob/3.14/docs/en/cookbook/simple-queue-system.md#2025-04-20_snippet_7\n\nLANGUAGE: terminal\nCODE:\n```\ncomposer require spiral-packages/symfony-serializer\n```\n\n----------------------------------------\n\nTITLE: Implementing Update Sequences in PHP with Spiral Framework\nDESCRIPTION: Shows how to add update sequences to a Spiral application. It includes adding both command strings and closures to the sequence.\nSOURCE: https://github.com/spiral/docs/blob/3.14/docs/zh-CN/console/sequences.md#2025-04-20_snippet_1\n\nLANGUAGE: PHP\nCODE:\n```\nuse Symfony\\Component\\Console\\Output\\OutputInterface;\nuse Psr\\Container\\ContainerInterface;\nuse Spiral\\Boot\\Bootloader\\Bootloader;\nuse Spiral\\Console\\Bootloader\\ConsoleBootloader;\n\nclass AppBootloader extends Bootloader\n{\n    public function boot(ConsoleBootloader $console): void\n    {\n        $console->addUpdateSequence('db:migrate', '<info>Database migration...</info>');\n        \n        // 在序列中添加闭包\n        // 它支持参数的自动注入\n        $console->addConfigureSequence(\n            static function(OutputInterface $output, ContainerInterface $container): void {\n                // do something\n            }, \n            '<info>Caching something...</info>'\n        );\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Middleware Declaration Configuration in PHP\nDESCRIPTION: PHP configuration for middleware declarations that specifies the namespace and postfix for middleware classes. This configuration is used by the scaffolding command.\nSOURCE: https://github.com/spiral/docs/blob/3.14/docs/en/basics/scaffolding.md#2025-04-20_snippet_24\n\nLANGUAGE: php\nCODE:\n```\nSpiral\\Scaffolder\\Declaration\\MiddlewareDeclaration::TYPE => [\n    'namespace' => 'Endpoint\\Web\\Middleware',\n    'postfix' => 'Middleware',\n],\n```\n\n----------------------------------------\n\nTITLE: Rendered PHP Trait Output\nDESCRIPTION: Shows the output of a trait declaration with methods and comments.\nSOURCE: https://github.com/spiral/docs/blob/3.14/docs/en/component/reactor.md#2025-04-20_snippet_22\n\nLANGUAGE: php\nCODE:\n```\n/**\n * Some trait\n */\ntrait MyTrait\n{\n    public function myMethod(): void\n    {\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Custom Grid Cell Renderer Function\nDESCRIPTION: Shows how to register a custom renderer function for the datagrid that transforms role data into styled badges. The function must be defined before toolkit declarations to avoid 'renderer not found' errors.\nSOURCE: https://github.com/spiral/docs/blob/3.14/docs/en/keeper/components.md#2025-04-20_snippet_15\n\nLANGUAGE: xhtml\nCODE:\n```\n<stack:push name=\"scripts\" unique-id=\"datagrid-roles-renderer\">\n    <script type=\"text/javascript\">\n        window.SFToolkit_tools_datagrid = window.SFToolkit_tools_datagrid || {};\n        window.SFToolkit_tools_datagrid['roles'] = function () {\n            return function (roles) {\n                return roles.map(function (role) {\n                    return '<span class=\"badge badge-primary mr-1\">' + role.toUpperCase() + '</span>'\n                }).join('');\n            }\n        };\n    </script>\n</stack:push>\n```\n\n----------------------------------------\n\nTITLE: Initializing Select Filter with Single Value in PHP\nDESCRIPTION: Demonstrates how to create a Select filter with a single integer key and select a specific filter using withValue() method.\nSOURCE: https://github.com/spiral/docs/blob/3.14/docs/zh-CN/component/data-grid.md#2025-04-20_snippet_0\n\nLANGUAGE: php\nCODE:\n```\nuse Spiral\\DataGrid\\Specification\\Filter;\n\n// 注意，这里我们有整数键\n$select = new Filter\\Select([\n    new Filter\\Equals('name', 'value'),\n    new Filter\\Any(\n        new Filter\\Equals('price', 2),\n        new Filter\\Gt('quantity', 5)\n    ),\n    new Filter\\Equals('email', 'email@example.com'),\n]);\n\n// 选择第二个过滤器，将等于 'any' 规范。\n$filter = $select->withValue(1);\n```\n\n----------------------------------------\n\nTITLE: Adding StemplerBootloader to Spiral Application Kernel using Constant\nDESCRIPTION: Adds the StemplerBootloader to the Spiral application kernel's bootloaders list using the LOAD constant.\nSOURCE: https://github.com/spiral/docs/blob/3.14/docs/en/views/stempler.md#2025-04-20_snippet_60\n\nLANGUAGE: php\nCODE:\n```\nprotected const LOAD = [\n    // ...\n    \\Spiral\\Stempler\\Bootloader\\StemplerBootloader::class,\n    // ...\n];\n```\n\n----------------------------------------\n\nTITLE: Registering DatabaseSeederBootloader Using Constant\nDESCRIPTION: PHP code snippet demonstrating how to register the DatabaseSeederBootloader in the application kernel using a constant.\nSOURCE: https://github.com/spiral/docs/blob/3.14/docs/en/testing/database.md#2025-04-20_snippet_2\n\nLANGUAGE: php\nCODE:\n```\nprotected const LOAD = [\n    // ...\n    \\Spiral\\DatabaseSeeder\\Bootloader\\DatabaseSeederBootloader::class,\n    // ...\n];\n```\n\n----------------------------------------\n\nTITLE: Checking if a Lock Exists\nDESCRIPTION: Shows how to check if a lock exists on a resource using the exists() method.\nSOURCE: https://github.com/spiral/docs/blob/3.14/docs/en/advanced/locks.md#2025-04-20_snippet_10\n\nLANGUAGE: php\nCODE:\n```\n$status = $lock->exists('pdf:create');\n\nif ($status) {\n    // Lock exists\n} else {\n    // Lock not exists\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a PHP File with Namespace and Use Statements\nDESCRIPTION: Shows how to create a PHP file with namespace, use statements, and a class implementation.\nSOURCE: https://github.com/spiral/docs/blob/3.14/docs/zh-CN/component/reactor.md#2025-04-20_snippet_12\n\nLANGUAGE: php\nCODE:\n```\n$namespace = new PhpNamespace('MyNamespace');\n$namespace\n    ->addUse(\\Countable::class)\n    ->addUse(Repository::class, 'Repo') // with alias\n    ->addUseFunction('count');\n\n$class = $namespace->addClass('MyClass');\n$class\n    ->addImplement(\\Countable::class)\n    ->addMethod('count')\n        ->setReturnType('int')\n        ->addBody('return 1;');\n\n$file = new FileDeclaration();\n$file\n    ->setStrictTypes()\n    ->addNamespace($namespace);\n\ndump((string) $file);\n```\n\n----------------------------------------\n\nTITLE: Implementing gRPC Service in PHP\nDESCRIPTION: PHP class implementing the Pinger service interface generated from the proto file, including the ping method.\nSOURCE: https://github.com/spiral/docs/blob/3.14/docs/zh-CN/grpc/service.md#2025-04-20_snippet_2\n\nLANGUAGE: php\nCODE:\n```\nnamespace App\\Endpoint\\GRPC;\n\nuse Spiral\\RoadRunner\\GRPC;\nuse GRPC\\Pinger\\PingerInterface;\nuse GRPC\\Pinger\\PingRequest;\nuse GRPC\\Pinger\\PingResponse;\n\nfinal class Pinger implements PingerInterface\n{\n    public function __construct(\n        private readonly HttpClientInterface $httpClient\n    ) {\n    }\n    \n    public function ping(GRPC\\ContextInterface $ctx, PingRequest $in): PingResponse\n    {\n        $statusCode = $this->httpClient->get($in->getUrl())->getStatusCode();\n    \n        return new PingResponse([\n            'status_code' => $statusCode\n        ]);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Activating HTTP Components in Spiral Kernel (Method Approach)\nDESCRIPTION: PHP code snippet showing how to activate HTTP components by adding bootloaders to the kernel's defineBootloaders method.\nSOURCE: https://github.com/spiral/docs/blob/3.14/docs/zh-CN/http/configuration.md#2025-04-20_snippet_1\n\nLANGUAGE: php\nCODE:\n```\npublic function defineBootloaders(): array\n{\n    return [\n        // ...\n        // 快速的 PSR-7 实现\n        \\Spiral\\Nyholm\\Bootloader\\NyholmBootloader::class,\n    \n        // HTTP 核心\n        \\Spiral\\Bootloader\\Http\\HttpBootloader::class,\n    \n        // PSR-15 handler\n        \\Spiral\\Bootloader\\Http\\RouterBootloader::class,\n        // ...\n    ];\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a Temporary Scope with runScoped in PHP\nDESCRIPTION: Demonstrates how to create a temporary scope using the runScoped method of the ContainerScopeInterface. It binds a UserContext class to a user variable within the scope.\nSOURCE: https://github.com/spiral/docs/blob/3.14/docs/zh-CN/container/scopes.md#2025-04-20_snippet_0\n\nLANGUAGE: php\nCODE:\n```\nuse Psr\\Container\\ContainerInterface;\n\n$container->runScoped(\n    closure: function (ContainerInterface $container) {\n        dump($container->get(UserContext::class);\n    },\n    bindings: [UserContext::class => $user,],\n);\n```\n\n----------------------------------------\n\nTITLE: Registering Discoverer Bootloader Using Constant\nDESCRIPTION: Code snippet showing how to register the DiscovererBootloader in a Spiral application by adding it to the SYSTEM constant array in the Kernel class.\nSOURCE: https://github.com/spiral/docs/blob/3.14/docs/en/component/discoverer.md#2025-04-20_snippet_2\n\nLANGUAGE: php\nCODE:\n```\nprotected const SYSTEM = [\n    // ...\n    \\Spiral\\Discoverer\\DiscovererBootloader::class,\n];\n```\n\n----------------------------------------\n\nTITLE: Removing Container Binding\nDESCRIPTION: Shows how to remove a binding from the container.\nSOURCE: https://github.com/spiral/docs/blob/3.14/docs/zh-CN/container/configuration.md#2025-04-20_snippet_7\n\nLANGUAGE: php\nCODE:\n```\nuse Spiral\\Core\\BinderInterface;\n\npublic function boot(BinderInterface $binder): void\n{\n    $binder->removeBinding(UserRepositoryInterface::class)\n}\n```\n\n----------------------------------------\n\nTITLE: Doctrine Constructor Instantiator for Metadata Class\nDESCRIPTION: Example of a metadata class using Doctrine's constructor instantiator approach.\nSOURCE: https://github.com/spiral/docs/blob/3.14/docs/zh-CN/advanced/attributes.md#2025-04-20_snippet_11\n\nLANGUAGE: php\nCODE:\n```\n/** @Annotation */\n#[\\Attribute]\nclass CustomMetadataClass\n{\n    public function __construct(array $properties)\n    {\n        // $properties = [ \"property\" => \"value\" ]\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Using Finalize Attribute for Scope Destruction in PHP\nDESCRIPTION: Shows how to use the Finalize attribute to specify a method to be called when a scoped dependency is being destroyed.\nSOURCE: https://github.com/spiral/docs/blob/3.14/docs/zh-CN/container/scopes.md#2025-04-20_snippet_5\n\nLANGUAGE: php\nCODE:\n```\n#[Finalize(method: 'finalize')]\nclass Foo\n{\n    public bool $finalized = false;\n\n    public function finalize(Logger $logger): void\n    {\n        $this->finalized = true;\n        $logger->log();\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Basic Usage of runScoped with Autowiring in PHP\nDESCRIPTION: Shows how to use the runScoped method with autowiring enabled. The container automatically resolves and injects dependencies based on type hints.\nSOURCE: https://github.com/spiral/docs/blob/3.14/docs/zh-CN/container/scopes.md#2025-04-20_snippet_1\n\nLANGUAGE: php\nCODE:\n```\n$result = $container->runScoped(closure: function (SomeInterface $instance) {\n    // Your code here\n}, bindings: [SomeInterface::class => SomeImplementation::class]);\n```\n\n----------------------------------------\n\nTITLE: Setting Up MySQL Database Environment Variables\nDESCRIPTION: Environment variables configuration for MySQL database connection parameters.\nSOURCE: https://github.com/spiral/docs/blob/3.14/docs/en/cookbook/quick-start.md#2025-04-20_snippet_4\n\nLANGUAGE: dotenv\nCODE:\n```\nDB_HOST=localhost\nDB_NAME=name\nDB_USER=username\nDB_PASSWORD=password\nDB_PORT=3306\n```\n\n----------------------------------------\n\nTITLE: Configuring Sentry Using PHP Configuration File\nDESCRIPTION: Demonstrates how to configure Sentry options using a PHP configuration file, including DSN, environment, release, and sampling rates.\nSOURCE: https://github.com/spiral/docs/blob/3.14/docs/en/basics/errors.md#2025-04-20_snippet_20\n\nLANGUAGE: php\nCODE:\n```\nreturn [\n  'dsn' => 'http://...',\n  'environment' => 'develop',\n  'release' => '1.0.0',\n  'sample_rate' => 1.0,\n  'traces_sample_rate' => null,\n  'send_default_pii' => true,\n];\n```\n\n----------------------------------------\n\nTITLE: Asserting File Non-Creation in Storage\nDESCRIPTION: Demonstrates how to verify that a file was not created in a storage bucket.\nSOURCE: https://github.com/spiral/docs/blob/3.14/docs/en/testing/storage.md#2025-04-20_snippet_4\n\nLANGUAGE: php\nCODE:\n```\n$uploads = $storage->bucket('uploads');\n$uploads->assertNotCreated('image.jpg');\n```\n\n----------------------------------------\n\nTITLE: WebSocket Interceptors Configuration\nDESCRIPTION: Configuration for registering WebSocket interceptors in the Spiral Framework, allowing global and type-specific interceptor registration\nSOURCE: https://github.com/spiral/docs/blob/3.14/docs/zh-CN/websockets/interceptors.md#2025-04-20_snippet_3\n\nLANGUAGE: php\nCODE:\n```\nuse RoadRunner\\Centrifugo\\Request\\RequestType;\nuse App\\Centrifuge;\n\nreturn [\n    'services' => [\n        //...\n    ],\n    'interceptors' => [\n        RequestType::Connect->value => [\n            Centrifuge\\Interceptor\\AuthInterceptor::class,\n        ],\n        //...\n        '*' => [\n            Centrifuge\\Interceptor\\ExceptionHandlerInterceptor::class,\n            Centrifuge\\Interceptor\\TelemetryInterceptor::class,\n        ],\n    ],\n];\n```\n\n----------------------------------------\n\nTITLE: Implementing Interfaces and Extending Classes\nDESCRIPTION: Demonstrates how to make a class implement an interface and extend another class.\nSOURCE: https://github.com/spiral/docs/blob/3.14/docs/zh-CN/component/reactor.md#2025-04-20_snippet_5\n\nLANGUAGE: php\nCODE:\n```\nuse Spiral\\Reactor\\ClassDeclaration;\nuse Cycle\\ORM\\Select\\Repository;\n\n$class = new ClassDeclaration('MyClass');\n\n$class\n    ->addImplement(\\Countable::class)\n    ->setExtends(Repository::class);\n\ndump((string) $class);\n```\n\n----------------------------------------\n\nTITLE: Installing Go gRPC Dependencies\nDESCRIPTION: Commands to install the necessary Go dependencies for creating a gRPC client, including the gRPC library and the protocol buffer compiler plugin for Go.\nSOURCE: https://github.com/spiral/docs/blob/3.14/docs/zh-CN/grpc/client.md#2025-04-20_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\ngo get -u google.golang.org/grpc\ngo get -u github.com/golang/protobuf/protoc-gen-go\n```\n\n----------------------------------------\n\nTITLE: Creating and Dispatching an Event in Spiral\nDESCRIPTION: Example of creating a simple event class and dispatching it using the EventDispatcherInterface. This demonstrates how to create and use events in a Spiral application.\nSOURCE: https://github.com/spiral/docs/blob/3.14/docs/zh-CN/advanced/events.md#2025-04-20_snippet_2\n\nLANGUAGE: php\nCODE:\n```\nnamespace App\\Event;\n\nuse App\\Database\\User;\n\nfinal class UserWasCreated\n{\n    public function __construct(\n        public readonly User $user\n    ) {\n    }\n}\n```\n\nLANGUAGE: php\nCODE:\n```\nnamespace App\\Service;\n\nuse Psr\\EventDispatcher\\EventDispatcherInterface;\nuse App\\Event\\UserWasCreated;\n\nfinal class UserService\n{\n    public function __construct(\n        private readonly EventDispatcherInterface $dispatcher\n    ) {\n    }\n\n    public function create(string $username): User\n    {\n        $user = new User(username: $username);\n        // ...\n        $this->dispatcher->dispatch(new UserWasCreated($user));\n\n        return $user;\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Installing Filters Bootloader - PHP Method Approach\nDESCRIPTION: Demonstrates how to activate the filters component by adding FiltersBootloader to the kernel using the method approach.\nSOURCE: https://github.com/spiral/docs/blob/3.14/docs/en/filters/configuration.md#2025-04-20_snippet_1\n\nLANGUAGE: php\nCODE:\n```\npublic function defineBootloaders(): array\n{\n    return [\n        // ...\n        \\Spiral\\Bootloader\\Security\\FiltersBootloader::class,\n        // ...\n    ];\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Authentication Token Storage in Spiral\nDESCRIPTION: Environment configuration to set Cycle ORM as the authentication token storage mechanism.\nSOURCE: https://github.com/spiral/docs/blob/3.14/docs/en/cookbook/simple-chat.md#2025-04-20_snippet_30\n\nLANGUAGE: dotenv\nCODE:\n```\nAUTH_TOKEN_STORAGE=cycle\n```\n\n----------------------------------------\n\nTITLE: Scaffold Command Output\nDESCRIPTION: Example output after successfully creating a bootloader through scaffolding.\nSOURCE: https://github.com/spiral/docs/blob/3.14/docs/en/framework/bootloaders.md#2025-04-20_snippet_1\n\nLANGUAGE: output\nCODE:\n```\nDeclaration of '[32mGithubClientBootloader[39m' has been successfully written into '[33mapp/src/Application/Bootloader/GithubClientBootloader.php[39m'.\n```\n\n----------------------------------------\n\nTITLE: External Configuration File for Injectable Config in PHP\nDESCRIPTION: Shows an example of an external configuration file that will be merged with predefined config values in an InjectableConfig subclass.\nSOURCE: https://github.com/spiral/docs/blob/3.14/docs/en/cookbook/migration-from-v2.md#2025-04-20_snippet_10\n\nLANGUAGE: php\nCODE:\n```\n// app/config/some-config.php\n\nreturn [\n    'aliases' => [...]\n];\n```\n\n----------------------------------------\n\nTITLE: Running PHPUnit Tests in Spiral Framework (Terminal)\nDESCRIPTION: Provides the command to run PHPUnit tests in a Spiral Framework application. This command executes all tests in the 'tests' directory using the configuration specified in 'phpunit.xml'.\nSOURCE: https://github.com/spiral/docs/blob/3.14/docs/en/testing/start.md#2025-04-20_snippet_15\n\nLANGUAGE: terminal\nCODE:\n```\n./vendor/bin/phpunit\n```\n\n----------------------------------------\n\nTITLE: Loop Directives Example\nDESCRIPTION: Examples of using loop directives in Stempler templates\nSOURCE: https://github.com/spiral/docs/blob/3.14/docs/en/views/stempler.md#2025-04-20_snippet_6\n\nLANGUAGE: php\nCODE:\n```\n<ul>\\n    @foreach($items as $item)\\n    <li>{{ $item }}</li>\\n    @endforeach\\n</ul>\\n\\n<ul>\\n    @for($i = 0; $i < 10; $i++)\\n    <li>{{ $i }}</li>\\n    @endfor\\n</ul>\\n\\n<ul>\\n    @while($i < 10)\\n    <li>{{ $i }}</li>\\n    @php $i++; @endphp\\n    @endwhile\\n</ul>\n```\n\n----------------------------------------\n\nTITLE: Declaring a Global PHP Function\nDESCRIPTION: Shows how to declare a global function with attributes and return type.\nSOURCE: https://github.com/spiral/docs/blob/3.14/docs/zh-CN/component/reactor.md#2025-04-20_snippet_10\n\nLANGUAGE: php\nCODE:\n```\n$function = new FunctionDeclaration('myFunction');\n$function\n    ->addBody('return \\'Hello world\\';')\n    ->setReturnType('string')\n    ->addAttribute('SomeAttribute')\n    ->addComment('Some function');\n\ndump((string) $function);\n```\n\n----------------------------------------\n\nTITLE: Using Before Callback in Scheduled Task\nDESCRIPTION: Example of using the before method to register a callback that runs before the scheduled task.\nSOURCE: https://github.com/spiral/docs/blob/3.14/docs/zh-CN/advanced/scheduler.md#2025-04-20_snippet_7\n\nLANGUAGE: php\nCODE:\n```\n$schedule->command('backup:run')\n   ->everyFiveMinutes()\n   ->before(static fn(Notifier $notifier) => $notifier->send('Starting backup...'));\n   -> ...;\n```\n\n----------------------------------------\n\nTITLE: Auth Token Storage Configuration in .env File\nDESCRIPTION: Shows how to specify the default token storage mechanism in the .env file using the AUTH_TOKEN_STORAGE environment variable.\nSOURCE: https://github.com/spiral/docs/blob/3.14/docs/en/security/authentication.md#2025-04-20_snippet_2\n\nLANGUAGE: dotenv\nCODE:\n```\nAUTH_TOKEN_STORAGE=session\n```\n\n----------------------------------------\n\nTITLE: Defining User Repository in Spiral ORM\nDESCRIPTION: This code defines a custom repository for the User entity, extending Cycle ORM's Repository class. It includes a method to find a user by username.\nSOURCE: https://github.com/spiral/docs/blob/3.14/docs/en/cookbook/simple-chat.md#2025-04-20_snippet_18\n\nLANGUAGE: php\nCODE:\n```\nnamespace App\\Repository;\n\nuse App\\Database\\User;\nuse Cycle\\ORM\\Select\\Repository;\n\nfinal class UserRepository extends Repository\n{\n    public function findByUsername(string $username): ?User\n    {\n        return $this->findOne(['username' => $username]);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Using dd() Function with Spiral Dumper\nDESCRIPTION: Example of using the dd() function which dumps variables and stops execution, but safely in the RoadRunner environment.\nSOURCE: https://github.com/spiral/docs/blob/3.14/docs/en/basics/debug.md#2025-04-20_snippet_4\n\nLANGUAGE: php\nCODE:\n```\ndd($variable);\n```\n\n----------------------------------------\n\nTITLE: Installing Database Seeder Package via Composer\nDESCRIPTION: Command to install the database-seeder package using Composer, with the --dev flag for development use.\nSOURCE: https://github.com/spiral/docs/blob/3.14/docs/en/testing/database.md#2025-04-20_snippet_0\n\nLANGUAGE: terminal\nCODE:\n```\ncomposer require spiral-packages/database-seeder --dev\n```\n\n----------------------------------------\n\nTITLE: Prototype Pattern File Service\nDESCRIPTION: Service class using prototype trait for file operations.\nSOURCE: https://github.com/spiral/docs/blob/3.14/docs/en/basics/files.md#2025-04-20_snippet_5\n\nLANGUAGE: php\nCODE:\n```\nuse Spiral\\Prototype\\Traits\\PrototypeTrait;\n\nfinal class FileService\n{\n    use PrototypeTrait;\n   \n    public function __construct(\n        private readonly AppDirectories $dirs\n    ) {}\n    \n    public function store()\n    {\n        dump($this->files->exists(__FILE__)); // true\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Installing Nyholm HTTP Bridge in Spiral Framework\nDESCRIPTION: Command to install the Nyholm HTTP bridge extension, which provides a fast PSR-7 implementation for Spiral Framework.\nSOURCE: https://github.com/spiral/docs/blob/3.14/docs/en/http/configuration.md#2025-04-20_snippet_0\n\nLANGUAGE: terminal\nCODE:\n```\ncomposer require spiral/nyholm-bridge\n```\n\n----------------------------------------\n\nTITLE: Executing the Console Command to Push a Job\nDESCRIPTION: Command to run the console command and push a job to ping Google's website.\nSOURCE: https://github.com/spiral/docs/blob/3.14/docs/en/start/queue-basics.md#2025-04-20_snippet_8\n\nLANGUAGE: terminal\nCODE:\n```\nphp app.php ping:site \"https://google.com\"\n```\n\n----------------------------------------\n\nTITLE: Defining Command Arguments and Options\nDESCRIPTION: Example of defining command arguments and options using class constants.\nSOURCE: https://github.com/spiral/docs/blob/3.14/docs/en/console/commands.md#2025-04-20_snippet_18\n\nLANGUAGE: php\nCODE:\n```\nconst ARGUMENTS = [\n    ['argName', InputArgument::REQUIRED, 'Argument name.']\n];\n    \nconst OPTIONS = [\n    ['optName', 'c', InputOption::VALUE_NONE, 'Some option.']\n];\n```\n\n----------------------------------------\n\nTITLE: Creating a Listener with TargetAttribute in Spiral Framework\nDESCRIPTION: Example of a listener using the TargetAttribute to filter classes based on annotations. This listener will only process classes that have the Route attribute, reducing processing overhead.\nSOURCE: https://github.com/spiral/docs/blob/3.14/docs/en/advanced/tokenizer.md#2025-04-20_snippet_16\n\nLANGUAGE: php\nCODE:\n```\nuse Spiral\\Tokenizer\\Attribute\\TargetAttribute;\n\n#[TargetAttribute(Route::class, useAnnotations: true)]\nfinal class RouteLocatorListener implements TokenizationListenerInterface\n{\n    // ...\n}\n```\n\n----------------------------------------\n\nTITLE: Advanced Binding with Factory DTO\nDESCRIPTION: Demonstrates advanced container binding using the new Factory DTO structure.\nSOURCE: https://github.com/spiral/docs/blob/3.14/docs/zh-CN/container/configuration.md#2025-04-20_snippet_10\n\nLANGUAGE: php\nCODE:\n```\nuse Spiral\\Core\\Config\\Factory;\n\n$container->bind(LoggerInterface::class, new Factory(\n    callable: static function() {\n        return new Logger(....);\n    }, \n    singleton: true\n))\n```\n\n----------------------------------------\n\nTITLE: Defining Lazy Singleton using Attribute\nDESCRIPTION: Shows how to define a lazy singleton using the Singleton attribute.\nSOURCE: https://github.com/spiral/docs/blob/3.14/docs/zh-CN/container/configuration.md#2025-04-20_snippet_19\n\nLANGUAGE: php\nCODE:\n```\nuse Spiral\\Core\\Attribute\\Singleton;\n\n#[Singleton]\nfinal class UserService\n{\n    public function store(User $user): void\n    {\n        //...\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Reading Property Metadata with Attributes\nDESCRIPTION: Examples of how to read property metadata using the ReaderInterface methods.\nSOURCE: https://github.com/spiral/docs/blob/3.14/docs/zh-CN/advanced/attributes.md#2025-04-20_snippet_4\n\nLANGUAGE: php\nCODE:\n```\n$reflection = new ReflectionProperty(User::class, 'name');\n\n$attributes = $reader->getPropertyMetadata($reflection); \n// returns iterable<object>\n```\n\nLANGUAGE: php\nCODE:\n```\n$reflection = new ReflectionProperty(User::class, 'name');\n\n$attributes = $reader->getPropertyMetadata($reflection, Column::class); \n// returns iterable<Column>\n```\n\nLANGUAGE: php\nCODE:\n```\n$reflection = new ReflectionProperty(User::class, 'name');\n\n$column = $reader->firstPropertyMetadata($reflection, Column::class); \n// returns Column|null\n```\n\n----------------------------------------\n\nTITLE: Installing Yii Error Handler Bridge via Composer\nDESCRIPTION: Command to install the Yii error handler bridge package using Composer\nSOURCE: https://github.com/spiral/docs/blob/3.14/docs/en/basics/errors.md#2025-04-20_snippet_8\n\nLANGUAGE: terminal\nCODE:\n```\ncomposer require spiral-packages/yii-error-handler-bridge\n```\n\n----------------------------------------\n\nTITLE: Aborting Session Changes in Spiral PHP\nDESCRIPTION: Shows how to discard all changes and close a session.\nSOURCE: https://github.com/spiral/docs/blob/3.14/docs/en/basics/session.md#2025-04-20_snippet_5\n\nLANGUAGE: php\nCODE:\n```\n$this->session->abort();\n```\n\n----------------------------------------\n\nTITLE: Adding Method to PHP Class\nDESCRIPTION: Demonstrates how to add a method to a class with return type, parameters, visibility, final modifier, comments, and body.\nSOURCE: https://github.com/spiral/docs/blob/3.14/docs/en/component/reactor.md#2025-04-20_snippet_11\n\nLANGUAGE: php\nCODE:\n```\n$class = new ClassDeclaration('MyClass');\n\n$class->addMethod('ping')\n    ->setPublic()\n    ->setComment('My method')\n    ->setReturnType('string')\n    ->setReturnNullable()\n    ->setFinal()\n    ->setBody('return $a;')\n    ->addAttribute('SomeAttribute')\n        ->addParameter('a', null)\n        ->setType('string')\n        ->setNullable(true);\n\ndump((string) $class);\n```\n\n----------------------------------------\n\nTITLE: Activating TwigDebugBootloader in Kernel using Method\nDESCRIPTION: PHP code snippet showing how to activate the TwigDebugBootloader in the Kernel class using the defineBootloaders method.\nSOURCE: https://github.com/spiral/docs/blob/3.14/docs/en/views/twig.md#2025-04-20_snippet_8\n\nLANGUAGE: php\nCODE:\n```\npublic function defineBootloaders(): array\n{\n    return [\n        // ...\n        \\App\\Application\\Bootloader\\TwigDebugBootloader::class,\n        // ...\n    ];\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Attribute Reader with Factory\nDESCRIPTION: Example of creating an attribute reader using the Spiral\\Attributes\\Factory class.\nSOURCE: https://github.com/spiral/docs/blob/3.14/docs/zh-CN/advanced/attributes.md#2025-04-20_snippet_14\n\nLANGUAGE: php\nCODE:\n```\nuse Spiral\\Attributes\\Factory;\n\n$reader = (new Factory())->create();\n```\n\n----------------------------------------\n\nTITLE: Installing Router Component with Composer\nDESCRIPTION: Command to install the Spiral router component using Composer.\nSOURCE: https://github.com/spiral/docs/blob/3.14/docs/en/http/routing.md#2025-04-20_snippet_0\n\nLANGUAGE: terminal\nCODE:\n```\ncomposer require spiral/router\n```\n\n----------------------------------------\n\nTITLE: Installing Views Component\nDESCRIPTION: Command to install the spiral/views component via Composer\nSOURCE: https://github.com/spiral/docs/blob/3.14/docs/en/views/configuration.md#2025-04-20_snippet_0\n\nLANGUAGE: terminal\nCODE:\n```\ncomposer require spiral/views\n```\n\n----------------------------------------\n\nTITLE: 配置自定义会话处理器 - PHP\nDESCRIPTION: 展示如何在配置文件中设置自定义会话处理器。这个例子使用了一个假设的 MemoryHandler 类，并配置了相关参数。\nSOURCE: https://github.com/spiral/docs/blob/3.14/docs/zh-CN/basics/session.md#2025-04-20_snippet_5\n\nLANGUAGE: php\nCODE:\n```\nreturn [\n    'handler' => new Autowire(\n        MemoryHandler::class,\n        [\n            'driver' => 'redis',\n            'database' => 1,\n            'lifetime' => 86400\n        ]\n    )\n];\n```\n\n----------------------------------------\n\nTITLE: Initializing and Running Spiral Application in PHP\nDESCRIPTION: Shows the updated approach to initialize and run a Spiral application using the create method instead of the removed init method.\nSOURCE: https://github.com/spiral/docs/blob/3.14/docs/en/cookbook/migration-from-v2.md#2025-04-20_snippet_8\n\nLANGUAGE: php\nCODE:\n```\nApp::create(\n    directories: ['root' => __DIR__]\n)->run();\n```\n\n----------------------------------------\n\nTITLE: Activating Temporal Bridge Bootloader (Constant Approach)\nDESCRIPTION: PHP code snippet demonstrating how to activate the Temporal Bridge component using a constant in the application kernel.\nSOURCE: https://github.com/spiral/docs/blob/3.14/docs/en/temporal/configuration.md#2025-04-20_snippet_2\n\nLANGUAGE: php\nCODE:\n```\nprotected const LOAD = [\n    // ...\n    \\Spiral\\TemporalBridge\\Bootloader\\TemporalBridgeBootloader::class,\n    // ...\n];\n```\n\n----------------------------------------\n\nTITLE: PHP Style View Template\nDESCRIPTION: Template using traditional PHP syntax for variable output\nSOURCE: https://github.com/spiral/docs/blob/3.14/docs/en/views/stempler.md#2025-04-20_snippet_3\n\nLANGUAGE: php\nCODE:\n```\nHello, <?= $name ?>!\n```\n\n----------------------------------------\n\nTITLE: Implementing Command Perform Method with Dependency Injection\nDESCRIPTION: Example of implementing the perform method in a console command with service injection.\nSOURCE: https://github.com/spiral/docs/blob/3.14/docs/en/console/commands.md#2025-04-20_snippet_7\n\nLANGUAGE: php\nCODE:\n```\nprotected function perform(MyService $service): int\n{\n    $this->output->writeln($service->doSomething());\n    \n    return self::SUCCESS;\n}\n```\n\n----------------------------------------\n\nTITLE: Job Handler Creation Output\nDESCRIPTION: Console output showing successful creation of a job handler file.\nSOURCE: https://github.com/spiral/docs/blob/3.14/docs/en/start/queue-basics.md#2025-04-20_snippet_1\n\nLANGUAGE: output\nCODE:\n```\nDeclaration of '[32mPingSiteJob[39m' has been successfully written into '[33mapp/src/Endpoint/Job/PingSiteJob.php[39m'.\n```\n\n----------------------------------------\n\nTITLE: Container Configuration with Custom Resolver\nDESCRIPTION: Example of initializing a shared container with custom resolver implementation\nSOURCE: https://github.com/spiral/docs/blob/3.14/docs/en/cookbook/migration-from-v2.md#2025-04-20_snippet_28\n\nLANGUAGE: php\nCODE:\n```\n// Initialize shared container, bindings, directories and etc.\n$app = App::create(\n    directories: ['root' => __DIR__],\n    container: new Spiral\\Core\\Container(\n        config: new Spiral\\Core\\Config(\n            resolver: App\\CustomResolver::class\n        )\n    )\n)->run();\n```\n\n----------------------------------------\n\nTITLE: Defining gRPC Service in Proto File\nDESCRIPTION: Definition of a Pinger service in a .proto file, including message types and service method.\nSOURCE: https://github.com/spiral/docs/blob/3.14/docs/zh-CN/grpc/service.md#2025-04-20_snippet_0\n\nLANGUAGE: proto\nCODE:\n```\nsyntax = \"proto3\";\n\noption php_namespace = \"GRPC\\\\Pinger\";\noption php_metadata_namespace = \"GRPC\\\\GPBMetadata\";\n\npackage pinger;\n\nservice Pinger {\n  rpc ping (PingRequest) returns (PingResponse) {\n  }\n}\n\nmessage PingRequest {\n  string url = 1;\n}\n\nmessage PingResponse {\n  int32 status_code = 1;\n}\n```\n\n----------------------------------------\n\nTITLE: Invoking the Command (Terminal)\nDESCRIPTION: Shows how to invoke the created command in the terminal.\nSOURCE: https://github.com/spiral/docs/blob/3.14/docs/en/console/commands.md#2025-04-20_snippet_3\n\nLANGUAGE: terminal\nCODE:\n```\nphp app.php my\n```\n\n----------------------------------------\n\nTITLE: Expected GRPC Code Generation Output\nDESCRIPTION: The console output showing the PHP files generated from the proto definition, including service interfaces and message classes.\nSOURCE: https://github.com/spiral/docs/blob/3.14/docs/en/grpc/service.md#2025-04-20_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nCompiling `proto/pinger.proto`:\n• generated/GRPC/Pinger/PingerInterface.php\n• generated/GRPC/Pinger/PingRequest.php\n• generated/GRPC/Pinger/PingResponse.php\n• generated/GRPC/GPBMetadata/Pinger.php\n```\n\n----------------------------------------\n\nTITLE: Centrifugo Server Configuration with Multiple RoadRunner Servers\nDESCRIPTION: This JSON configuration demonstrates how to configure Centrifugo to use multiple RoadRunner servers for handling different types of events.  Specifically, it shows one server handling connect events and another handling RPC calls.\nSOURCE: https://github.com/spiral/docs/blob/3.14/docs/zh-CN/websockets/configuration.md#2025-04-20_snippet_4\n\nLANGUAGE: json\nCODE:\n```\n```json config.json\n{\n  // ...\n  \"proxy_connect_endpoint\": \"grpc://127.0.0.1:10001\",\n  \"proxy_connect_timeout\": \"10s\",\n  \"proxy_rpc_endpoint\": \"grpc://127.0.0.1:10002\",\n  \"proxy_rpc_timeout\": \"10s\"\n}\n```\n```\n\n----------------------------------------\n\nTITLE: Installing Translator Package via Composer\nDESCRIPTION: Command to install the Spiral translator package using Composer\nSOURCE: https://github.com/spiral/docs/blob/3.14/docs/en/advanced/i18n.md#2025-04-20_snippet_0\n\nLANGUAGE: terminal\nCODE:\n```\ncomposer require spiral/translator\n```\n\n----------------------------------------\n\nTITLE: Spiral Application Centrifugo Configuration\nDESCRIPTION: This PHP configuration file defines the services and interceptors to be used in a Spiral application for handling events from Centrifugo. It maps request types (Connect, Subscribe, Refresh, Publish, RPC) to their respective service classes and specifies interceptors to be applied to these requests.\nSOURCE: https://github.com/spiral/docs/blob/3.14/docs/zh-CN/websockets/configuration.md#2025-04-20_snippet_5\n\nLANGUAGE: php\nCODE:\n```\n```php app/config/centrifugo.php\nuse RoadRunner\\Centrifugo\\Request\\RequestType;\n\nreturn [\n    'services' => [\n        RequestType::Connect->value => ConnectService::class,\n        RequestType::Subscribe->value => SubscribeService::class,\n        RequestType::Refresh->value => RefreshService::class,\n        RequestType::Publish->value => PublishService::class,\n        RequestType::RPC->value => RPCService::class,\n    ],\n    'interceptors' => [\n        RequestType::Connect->value => [\n            Interceptor\\AuthInterceptor::class,\n        ],\n        RequestType::Subscribe->value => [\n            Interceptor\\AuthInterceptor::class,\n        ],\n        RequestType::RPC->value => [\n            Interceptor\\AuthInterceptor::class,\n        ],\n        '*' => [\n            Interceptor\\TelemetryInterceptor::class,\n        ],\n    ],\n];\n```\n```\n\n----------------------------------------\n\nTITLE: RoadRunner Configuration for Centrifugo Integration\nDESCRIPTION: This YAML snippet configures RoadRunner to communicate with Centrifugo. It defines the RPC listener, server command, and Centrifuge-specific settings like proxy and GRPC API addresses.\nSOURCE: https://github.com/spiral/docs/blob/3.14/docs/zh-CN/websockets/configuration.md#2025-04-20_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\n```yaml .rr.yaml\nrpc:\n  listen: tcp://0.0.0.0:6001\n\nserver:\n  command: \"php app.php\"\n  relay: pipes\n\ncentrifuge:\n  proxy_address: \"tcp://0.0.0.0:10001\"\n  grpc_api_address: \"centrifugo:10000\"\n```\n```\n\n----------------------------------------\n\nTITLE: Configuring Default Monolog Channel in Environment\nDESCRIPTION: Sets the default Monolog channel using an environment variable in a .env file.\nSOURCE: https://github.com/spiral/docs/blob/3.14/docs/en/cookbook/migration-from-v2.md#2025-04-20_snippet_13\n\nLANGUAGE: dotenv\nCODE:\n```\n# ...\nMONOLOG_DEFAULT_CHANNEL=stderr\n```\n\n----------------------------------------\n\nTITLE: Specifying Task Queue for Activity\nDESCRIPTION: Configuration of custom task queue for the notification activity\nSOURCE: https://github.com/spiral/docs/blob/3.14/docs/en/temporal/usage.md#2025-04-20_snippet_12\n\nLANGUAGE: php\nCODE:\n```\nuse Spiral\\TemporalBridge\\Attribute\\AssignWorker;\n\n#[AssignWorker('mailer')]\n#[ActivityInterface]\nclass SendNotificationActivity\n{\n}\n```\n\n----------------------------------------\n\nTITLE: Multiple Choice Question\nDESCRIPTION: Example of implementing a multiple choice question in console.\nSOURCE: https://github.com/spiral/docs/blob/3.14/docs/en/console/commands.md#2025-04-20_snippet_16\n\nLANGUAGE: php\nCODE:\n```\n$name = $this->choiceQuestion(\n    'Which of the following is package manager?',\n    ['composer', 'django', 'phoenix', 'maven', 'symfony'],\n    default: 2,\n    allowMultipleSelections: true\n);\n```\n\n----------------------------------------\n\nTITLE: 绑定自定义会话工厂 - PHP\nDESCRIPTION: 展示如何在容器中替换默认的 SessionFactoryInterface 实现。这允许使用自定义的会话初始化逻辑。\nSOURCE: https://github.com/spiral/docs/blob/3.14/docs/zh-CN/basics/session.md#2025-04-20_snippet_7\n\nLANGUAGE: php\nCODE:\n```\n$container->bindSingleton(\\Spiral\\Session\\SessionFactoryInterface::class, CustomSessionFactory::class);\n```\n\n----------------------------------------\n\nTITLE: Configuring Namespaced Route with Custom Controller Postfix\nDESCRIPTION: Sets up a namespaced route target with a custom controller postfix 'Handler' instead of the default 'Controller'.\nSOURCE: https://github.com/spiral/docs/blob/3.14/docs/en/http/routing.md#2025-04-20_snippet_9\n\nLANGUAGE: php\nCODE:\n```\n$routes->add(name: 'admin', pattern: '/admin/<controller>/<action>')\n    ->namespaced(\n        namespace: 'App\\Controllers\\Admin',\n        postfix: 'Handler'\n    );\n```\n\n----------------------------------------\n\nTITLE: Stack Scope Limitation Example\nDESCRIPTION: Demonstrates a case where stack operations won't work because the push operation is outside the active scope of the stack collector.\nSOURCE: https://github.com/spiral/docs/blob/3.14/docs/en/views/stempler.md#2025-04-20_snippet_31\n\nLANGUAGE: html\nCODE:\n```\n<div>\n    // stack my-stack is active here\n    <stack:collect name=\"my-stack\">\n        default content\n    </stack:collect>\n    // and here\n</div>\n\n// stack my-stack is not active at this level\n\n<stack:prepend name=\"my-stack\">\n    my value\n</stack:prepend>\n```\n\n----------------------------------------\n\nTITLE: Implementing Grid Cell Template in XHTML\nDESCRIPTION: Shows how to create a custom template for a grid cell that displays user information with an icon. Parameters include name, label, and template body that can combine static HTML with dynamic data fields.\nSOURCE: https://github.com/spiral/docs/blob/3.14/docs/en/keeper/components.md#2025-04-20_snippet_13\n\nLANGUAGE: xhtml\nCODE:\n```\n<grid:cell.template\n        name=\"user\"\n        label=\"User Name\"\n        body=\"<i class='fa fa-user'></i> {firstName} {lastName}\"\n/>\n```"
  }
]