[
  {
    "owner": "bekacru",
    "repo": "better-fetch",
    "content": "TITLE: Basic Better Fetch Usage with TypeScript\nDESCRIPTION: Example showing how to use Better Fetch with both generic types and schema validation\nSOURCE: https://github.com/bekacru/better-fetch/blob/main/doc/content/docs/getting-started.mdx#2025-04-16_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport { betterFetch } from '@better-fetch/fetch';\n\n// Using generic type\nconst { data, error } = await betterFetch<{\n    userId: string;\n    id: number;\n    title: string;\n    completed: boolean;\n}>(\"https://jsonplaceholder.typicode.com/todos/1\");\n\n\n// Using a Standard Schema validator (for example, zod)\nimport { z } from 'zod'; // or your preferred Standard Schema compliant library\n\nconst { data: todos, error: todoError } = await betterFetch(\"https://jsonplaceholder.typicode.com/todos/1\", {\n    output: z.object({\n        userId: z.string(),\n        id: z.number(),\n        title: z.string(),\n        completed: z.boolean(),\n    })  \n});\n```\n\n----------------------------------------\n\nTITLE: Creating Custom Fetch Instance\nDESCRIPTION: Example of creating a custom fetch instance with configuration options like baseURL and retry logic\nSOURCE: https://github.com/bekacru/better-fetch/blob/main/doc/content/docs/getting-started.mdx#2025-04-16_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nimport { createFetch } from \"@better-fetch/fetch\";\n\nexport const $fetch = createFetch({\n  baseURL: \"https://jsonplaceholder.typicode.com\",\n  retry: {\n      type: \"linear\",\n      attempts: 3,\n      delay: 1000 \n  }\n});\n\nconst { data, error } = await $fetch<{\n  userId: number;\n  id: number;\n  title: string;\n  completed: boolean;\n}>(\"/todos/1\");\n```\n\n----------------------------------------\n\nTITLE: Initializing Better-Fetch with All Hooks\nDESCRIPTION: Demonstrates the basic setup of Better-Fetch with all available lifecycle hooks including onRequest, onResponse, onError, and onSuccess hooks.\nSOURCE: https://github.com/bekacru/better-fetch/blob/main/doc/content/docs/hooks.mdx#2025-04-16_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { createFetch } from \"@better-fetch/fetch\";\n\nconst $fetch = createFetch({\n    baseURL: \"http://localhost:3000\",\n    onRequest(context) {\n        return context;\n    },\n    onResponse(context) {\n        return context.response\n    },\n    onError(context) {\n    },\n    onSuccess(context) {\n    },\n})\n```\n\n----------------------------------------\n\nTITLE: Creating Fetch Schema with Zod in TypeScript\nDESCRIPTION: Demonstrates how to create a fetch schema using the createSchema function from @better-fetch/fetch and Zod for validation. It defines input and output schemas for a specific path.\nSOURCE: https://github.com/bekacru/better-fetch/blob/main/doc/content/docs/fetch-schema.mdx#2025-04-16_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { createSchema, createFetch } from \"@better-fetch/fetch\";\nimport { z } from \"zod\";\n\nexport const schema = createSchema({\n    \"/path\": {\n        input: z.object({\n            userId: z.string(),\n            id: z.number(),\n            title: z.string(),\n            completed: z.boolean(),\n        }),\n        output: z.object({\n            userId: z.string(),\n            id: z.number(),\n            title: z.string(),\n            completed: z.boolean(),\n        }),\n    }\n})\n\nconst $fetch = createFetch({\n    baseURL: \"https://jsonplaceholder.typicode.com\",\n    schema: schema\n});\n```\n\n----------------------------------------\n\nTITLE: Implementing Dynamic Bearer Token Authorization in TypeScript with Better Fetch\nDESCRIPTION: This snippet shows how to use a function to dynamically provide a Bearer token for authorization. The function is called when the request is made, allowing for real-time token retrieval.\nSOURCE: https://github.com/bekacru/better-fetch/blob/main/doc/content/docs/authorization.mdx#2025-04-16_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { createFetch } from \"@better-fetch/fetch\";\n\nconst authStore = {\n    getToken: () => \"my-token\",\n}\n\nconst $fetch = createFetch({\n    baseURL: \"http://localhost:3000\",\n    auth: {\n        type: \"Bearer\",\n        token: () => authStore.getToken(),\n    },\n})\n```\n\n----------------------------------------\n\nTITLE: Demonstrating Default Error Type in Better Fetch (TypeScript)\nDESCRIPTION: This snippet shows how to use the default error type in Better Fetch. The error object returned includes 'status', 'statusText', and 'message' properties.\nSOURCE: https://github.com/bekacru/better-fetch/blob/main/doc/content/docs/handling-errors.mdx#2025-04-16_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { betterFetch } from '@better-fetch/fetch';\nimport { z } from 'zod';\n\nconst { error } = await betterFetch(\"https://jsonplaceholder.typicode.com/todos/1\");\n// @annotate: Hover over the error object to see the type\n```\n\n----------------------------------------\n\nTITLE: Setting Timeout in Better Fetch (TypeScript)\nDESCRIPTION: This snippet demonstrates how to set a timeout for a fetch request using Better Fetch. It shows setting a global timeout in the createFetch options and overriding it for a specific request.\nSOURCE: https://github.com/bekacru/better-fetch/blob/main/doc/content/docs/timeout-and-retry.mdx#2025-04-16_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { createFetch } from \"@better-fetch/fetch\";\n\nconst $fetch = createFetch({\n    baseURL: \"http://localhost:3000\",\n    timeout: 5000,\n})\n// ---cut---\nconst res = await $fetch(\"/api/users\", {\n    timeout: 10000,\n});\n```\n\n----------------------------------------\n\nTITLE: Implementing Better Fetch Plugin Hooks\nDESCRIPTION: Shows how to implement lifecycle hooks in a Better Fetch plugin. Includes hooks for request, response, error, and success handling that can modify the context at different stages.\nSOURCE: https://github.com/bekacru/better-fetch/blob/main/doc/content/docs/plugins.mdx#2025-04-16_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { createFetch, BetterFetchPlugin } from \"@better-fetch/fetch\";\n\nconst myPlugin = {\n    id: \"my-plugin\",\n    name: \"My Plugin\",\n    hooks: {\n        onRequest(context) {\n        // do something with the context\n        return context;\n        },\n        onResponse(context) {\n            // do something with the context\n            return context;\n        },\n        onError(context) {\n            // do something with the context\n        },\n        onSuccess(context) {\n            // do something with the context\n        },\n    }\n} satisfies BetterFetchPlugin;\n\nconst $fetch = createFetch({\n    baseURL: \"https://jsonplaceholder.typicode.com\",\n    plugins: [myPlugin],\n});\n```\n\n----------------------------------------\n\nTITLE: Implementing Fetch Schema\nDESCRIPTION: Example demonstrating how to create and use fetch schemas for request/response validation\nSOURCE: https://github.com/bekacru/better-fetch/blob/main/doc/content/docs/getting-started.mdx#2025-04-16_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nimport { createSchema, createFetch } from \"@better-fetch/fetch\";\n\n// ZOD example\nimport { z } from \"zod\";\n\nexport const zodSchema = createSchema({\n    \"/path\": {\n        input: z.object({\n            userId: z.string(),\n            id: z.number(),\n            title: z.string(),\n            completed: z.boolean(),\n        }),\n        output: z.object({\n            userId: z.string(),\n            id: z.number(),\n            title: z.string(),\n            completed: z.boolean(),\n        }),\n    }\n})\n\nconst $fetch = createFetch({\n    baseURL: \"https://jsonplaceholder.typicode.com\",\n    schema: zodSchema\n});\n\nconst { data, error } = await $fetch(\"/path\", {\n    body: {\n        userId: \"1\",\n        id: 1,\n        title: \"title\",\n        completed: true,\n    },\n});\n```\n\n----------------------------------------\n\nTITLE: Implementing Strict Schema in Better Fetch\nDESCRIPTION: Demonstrates how to use the strict option when creating a schema to enforce that only defined routes are valid. This prevents calls to undefined routes.\nSOURCE: https://github.com/bekacru/better-fetch/blob/main/doc/content/docs/fetch-schema.mdx#2025-04-16_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\nimport { createFetch, createSchema } from \"@better-fetch/fetch\";\nimport { z } from \"zod\";\n\nconst $fetch = createFetch({\n    baseURL: \"https://jsonplaceholder.typicode.com\",\n    schema: createSchema({\n        \"/path\": {\n            output: z.object({\n                userId: z.string(),\n                id: z.number(),\n                title: z.string(),\n                completed: z.boolean(),\n            }),\n        },\n    }, \n    {\n        strict: true\n    }), \n})\n\nconst { data, error } = await $fetch(\"/invalid-path\")\n```\n\n----------------------------------------\n\nTITLE: Implementing Basic Authentication in TypeScript with Better Fetch\nDESCRIPTION: This snippet illustrates how to set up Basic authentication with Better Fetch. It adds a username and password to the Authorization header of the request.\nSOURCE: https://github.com/bekacru/better-fetch/blob/main/doc/content/docs/authorization.mdx#2025-04-16_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport { createFetch } from \"@better-fetch/fetch\";\n\nconst $fetch = createFetch({\n    baseURL: \"http://localhost:3000\",\n    auth: {\n        type: \"Basic\",\n        username: \"my-username\",\n        password: \"my-password\",\n    },\n})\n```\n\n----------------------------------------\n\nTITLE: Using Dynamic Parameters with Better Fetch in TypeScript\nDESCRIPTION: This snippet demonstrates how to use dynamic parameters in URL paths with the Better Fetch library. It shows how to create a fetch instance with a base URL and make requests with dynamic parameters using the ':' prefix in the URL path and providing values through the 'params' option.\nSOURCE: https://github.com/bekacru/better-fetch/blob/main/doc/content/docs/dynamic-parameters.mdx#2025-04-16_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { createFetch } from \"@better-fetch/fetch\";\n\nconst $fetch = createFetch({\n    baseURL: \"http://localhost:3000\",\n})\n\nconst res = await $fetch(\"/path/:id\", {\n    params: {\n        id: \"1\"\n    }\n})\n\nconst res2 = await $fetch(\"/repos/:owner/:repo\", {\n    params: {\n        owner: \"octocat\",\n        repo: \"hello-world\"\n    }\n})\n```\n\n----------------------------------------\n\nTITLE: Exponential Backoff Retry Strategy in Better Fetch (TypeScript)\nDESCRIPTION: This snippet shows how to implement an exponential backoff retry strategy in Better Fetch, specifying the number of attempts, base delay, and maximum delay.\nSOURCE: https://github.com/bekacru/better-fetch/blob/main/doc/content/docs/timeout-and-retry.mdx#2025-04-16_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nimport { createFetch } from \"@better-fetch/fetch\";\n\nconst $fetch = createFetch({\n    baseURL: \"http://localhost:3000\",\n})\n// ---cut---\nconst res = await $fetch(\"https://jsonplaceholder.typicode.com/todos/1\", {\n    retry: {\n        count: 3,\n        interval: 1000, //optional\n    type: \"exponential\",\n    attempts: 5,\n    baseDelay: 1000, // Start with 1 second delay\n    maxDelay: 10000 // Cap the delay at 10 seconds, so requests would go out after 1s then 2s, 4s, 8s, 10s\n  }\n});\n```\n\n----------------------------------------\n\nTITLE: Implementing onRequest Hook\nDESCRIPTION: Shows how to implement the onRequest hook which is called before making a request. This hook receives and must return the request context, allowing for request modification before execution.\nSOURCE: https://github.com/bekacru/better-fetch/blob/main/doc/content/docs/hooks.mdx#2025-04-16_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { createFetch } from \"@better-fetch/fetch\";\n\nconst $fetch = createFetch({\n    baseURL: \"http://localhost:3000\",\n    onRequest(context) {\n        // do something with the context\n        return context;\n    },\n})\n```\n\n----------------------------------------\n\nTITLE: Implementing onResponse Hook\nDESCRIPTION: Demonstrates the implementation of the onResponse hook which handles the response after receiving it. This hook must return the response and has access to both response and request context.\nSOURCE: https://github.com/bekacru/better-fetch/blob/main/doc/content/docs/hooks.mdx#2025-04-16_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport { createFetch } from \"@better-fetch/fetch\";\n\nconst $fetch = createFetch({\n    baseURL: \"http://localhost:3000\",\n    onResponse(context) {        \n        // do something with the context\n        return context.response // return the response\n    },\n})\n```\n\n----------------------------------------\n\nTITLE: Implementing Success and Error Hooks\nDESCRIPTION: Shows how to implement onSuccess and onError hooks that handle successful responses and errors respectively. These hooks receive the response context but don't return any values.\nSOURCE: https://github.com/bekacru/better-fetch/blob/main/doc/content/docs/hooks.mdx#2025-04-16_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nimport { createFetch } from \"@better-fetch/fetch\";\n\nconst $fetch = createFetch({\n    baseURL: \"http://localhost:3000\",\n    onSuccess(context) {\n        // do something with the context\n    },\n    onError(context) {\n        // do something with the context\n    },\n})\n```\n\n----------------------------------------\n\nTITLE: Defining Input Schema for Fetch in TypeScript\nDESCRIPTION: Shows how to define an input schema for a fetch request. When an input schema is defined, the request will use the POST method by default.\nSOURCE: https://github.com/bekacru/better-fetch/blob/main/doc/content/docs/fetch-schema.mdx#2025-04-16_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport { createFetch, createSchema } from \"@better-fetch/fetch\";\nimport { z } from \"zod\";\n\nconst $fetch = createFetch({\n    baseURL: \"https://jsonplaceholder.typicode.com\",\n    schema: createSchema({\n        \"/path\": {\n            input: z.object({\n                userId: z.string(),\n                id: z.number(),\n                title: z.string(),\n                completed: z.boolean(),\n            }),\n        },\n    }), \n})\n\nconst { data, error } = await $fetch(\"/path\", {\n    body: {}\n})\n```\n\n----------------------------------------\n\nTITLE: Defining Output Schema for Fetch in TypeScript\nDESCRIPTION: Demonstrates how to define an output schema for a fetch request. The output schema describes the expected structure of the response data.\nSOURCE: https://github.com/bekacru/better-fetch/blob/main/doc/content/docs/fetch-schema.mdx#2025-04-16_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nimport { createFetch, createSchema } from \"@better-fetch/fetch\";\nimport { z } from \"zod\";\n\nconst $fetch = createFetch({\n    baseURL: \"https://jsonplaceholder.typicode.com\",\n    schema: createSchema({\n        \"/path\": {\n            output: z.object({\n                userId: z.string(),\n                id: z.number(),\n                title: z.string(),\n                completed: z.boolean(),\n            }),\n        },\n    }), \n})\n\nconst { data, error } = await $fetch(\"/path\")\n```\n\n----------------------------------------\n\nTITLE: Defining Query Schema for Fetch in TypeScript\nDESCRIPTION: Shows how to define a query schema for a fetch request. The query schema describes the expected structure of the query parameters.\nSOURCE: https://github.com/bekacru/better-fetch/blob/main/doc/content/docs/fetch-schema.mdx#2025-04-16_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nimport { createFetch, createSchema } from \"@better-fetch/fetch\";\nimport { z } from \"zod\";\n\nconst $fetch = createFetch({\n    baseURL: \"https://jsonplaceholder.typicode.com\",\n    schema: createSchema({\n        \"/path\": {\n            query: z.object({\n                userId: z.string(),\n                id: z.number(),\n                title: z.string(),\n                completed: z.boolean(),\n            }),\n        },\n    }), \n})\n\nconst { data, error } = await $fetch(\"/path\", {  \n    query: {}\n})\n```\n\n----------------------------------------\n\nTITLE: Handling Dynamic Path Parameters in Fetch Schema\nDESCRIPTION: Demonstrates how to define and use dynamic path parameters in a fetch schema. It shows different ways to specify path parameters and how to use them in requests.\nSOURCE: https://github.com/bekacru/better-fetch/blob/main/doc/content/docs/fetch-schema.mdx#2025-04-16_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nimport { createFetch, createSchema } from \"@better-fetch/fetch\";\nimport { z } from \"zod\";    \n\nconst schema = createSchema({\n    \"/user/:id\": {\n        output: z.object({\n            name: z.string(),\n        }),\n    },\n    \"/post\": {\n        params: z.object({\n            id: z.string(),\n            title: z.string(),\n        }),\n    },\n    \"/post/:id/:title\": {\n        output: z.object({\n            title: z.string(),\n        }),\n    }\n}) \n\n\nconst $fetch = createFetch({\n    baseURL: \"https://jsonplaceholder.typicode.com\",\n    schema: schema\n})\n\nconst response1 = await $fetch(\"/user/:id\", {\n    params: {\n        id: \"1\",\n    }\n})\n\nconst response2 = await $fetch(\"/post\", {\n    params: {\n        id: \"1\",\n        title: \"title\"\n    },\n})\n\nconst response3 = await $fetch(\"/post/:id/:title\", {\n    params: {\n        id: \"1\",\n        title: \"title\"\n    }\n})\n```\n\n----------------------------------------\n\nTITLE: Using Method Modifiers in Fetch Schema\nDESCRIPTION: Shows how to use method modifiers to specify HTTP methods for requests. It demonstrates using the @put modifier to define a PUT request.\nSOURCE: https://github.com/bekacru/better-fetch/blob/main/doc/content/docs/fetch-schema.mdx#2025-04-16_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\nimport { createFetch, createSchema } from \"@better-fetch/fetch\";\nimport { z } from \"zod\";\n\nconst $fetch = createFetch({\n    baseURL: \"https://jsonplaceholder.typicode.com\",\n    schema: createSchema({\n        \"@put/user\": {\n            input: z.object({\n                title: z.string(),\n                completed: z.boolean(),\n            }),\n            output: z.object({\n               title: z.string(),\n               completed: z.boolean(),\n            }),\n        },\n    }), \n})\n\nconst { data, error } = await $fetch(\"/@put/user\", {\n    body: {\n        title: \"title\",\n        completed: true,\n    }\n})\n```\n\n----------------------------------------\n\nTITLE: Implementing Custom Error Type in Better Fetch (TypeScript)\nDESCRIPTION: This example demonstrates how to pass a custom error type as a second generic argument to Better Fetch. The custom type overrides the default error type except for 'status' and 'statusText' properties.\nSOURCE: https://github.com/bekacru/better-fetch/blob/main/doc/content/docs/handling-errors.mdx#2025-04-16_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { betterFetch } from 'better-fetch';\n\nconst { error } = await betterFetch<{\n    id: number;\n    userId: string;\n    title: string;\n    completed: boolean;\n}, \n{ \n    message?: string; // [!code highlight]\n    error?: string;// [!code highlight]\n}>(\"https://jsonplaceholder.typicode.com/todos/1\");\n```\n\n----------------------------------------\n\nTITLE: Basic Retry with Number of Attempts in Better Fetch (TypeScript)\nDESCRIPTION: This snippet demonstrates the simplest form of retry in Better Fetch, specifying only the number of retry attempts.\nSOURCE: https://github.com/bekacru/better-fetch/blob/main/doc/content/docs/timeout-and-retry.mdx#2025-04-16_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport { createFetch } from \"@better-fetch/fetch\";\n\nconst $fetch = createFetch({\n    baseURL: \"http://localhost:3000\",\n})\n// ---cut---\nconst res = await $fetch(\"https://jsonplaceholder.typicode.com/todos/1\", {\n  retry: 3\n});\n```\n\n----------------------------------------\n\nTITLE: Using 'throw' Option in Better Fetch (TypeScript)\nDESCRIPTION: This snippet illustrates how to use the 'throw' option in Better Fetch to throw errors instead of returning them. When used, the function only returns the response data.\nSOURCE: https://github.com/bekacru/better-fetch/blob/main/doc/content/docs/handling-errors.mdx#2025-04-16_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport { betterFetch } from '@better-fetch/fetch';\nimport { z } from 'zod';\n\nconst data = await betterFetch(\"https://jsonplaceholder.typicode.com/todos/1\", {\n    throw: true, // [!code highlight]\n    output: z.object({  \n        userId: z.string(),\n        id: z.number(),\n        title: z.string(),\n        completed: z.boolean(),\n    }),\n});\n```\n\n----------------------------------------\n\nTITLE: Creating Custom Fetch Instance with 'throw' Option (TypeScript)\nDESCRIPTION: This example shows how to create a custom fetch instance with the 'throw' option to address type inference issues when using generics and the 'throw' option together.\nSOURCE: https://github.com/bekacru/better-fetch/blob/main/doc/content/docs/handling-errors.mdx#2025-04-16_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nimport { createFetch } from \"@better-fetch/fetch\";\n\nexport const $fetch = createFetch({\n  baseURL: \"https://jsonplaceholder.typicode.com\",\n  retry: 2,\n  throw: true,\n}); \n\n\nconst data = await $fetch<{\n  userId: number;\n  id: number;\n  title: string;\n  completed: boolean;\n}>(\"/todos/1\");\n```\n\n----------------------------------------\n\nTITLE: Using 'false' as Second Generic Argument in Better Fetch (TypeScript)\nDESCRIPTION: This snippet demonstrates how to pass 'false' as a second generic argument to Better Fetch to address type inference issues when using generics and the 'throw' option together.\nSOURCE: https://github.com/bekacru/better-fetch/blob/main/doc/content/docs/handling-errors.mdx#2025-04-16_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nimport { betterFetch } from '@better-fetch/fetch';\nimport { z } from 'zod';\n\nconst data = await betterFetch<{\n    userId: number;\n    id: number;\n    title: string;\n    completed: boolean;\n}, \nfalse // [!code highlight]\n>(\"https://jsonplaceholder.typicode.com/todos/1\");\n```\n\n----------------------------------------\n\nTITLE: Implementing Auto Retry in Better Fetch (TypeScript)\nDESCRIPTION: This code snippet shows how to implement auto retry functionality in Better Fetch. It sets the number of retry attempts for a specific request.\nSOURCE: https://github.com/bekacru/better-fetch/blob/main/doc/content/docs/timeout-and-retry.mdx#2025-04-16_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { createFetch } from \"@better-fetch/fetch\";\n\nconst $fetch = createFetch({\n    baseURL: \"http://localhost:3000\",\n})\n// ---cut---\nconst res = await $fetch(\"/api/users\", {\n    retry: 3\n});\n```\n\n----------------------------------------\n\nTITLE: Linear Retry Strategy in Better Fetch (TypeScript)\nDESCRIPTION: This code snippet illustrates how to implement a linear retry strategy in Better Fetch, specifying the number of attempts and delay between each attempt.\nSOURCE: https://github.com/bekacru/better-fetch/blob/main/doc/content/docs/timeout-and-retry.mdx#2025-04-16_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nimport { createFetch } from \"@better-fetch/fetch\";\n\nconst $fetch = createFetch({\n    baseURL: \"http://localhost:3000\",\n})\n// ---cut---\nconst res = await $fetch(\"https://jsonplaceholder.typicode.com/todos/1\", {\n  retry: {\n    type: \"linear\",\n    attempts: 3,\n    delay: 1000 // 1 second delay between each attempt\n  }\n});\n```\n\n----------------------------------------\n\nTITLE: Custom Retry Condition in Better Fetch (TypeScript)\nDESCRIPTION: This code demonstrates how to implement a custom retry condition in Better Fetch. It defines a shouldRetry function that determines whether to retry based on the response status and body content.\nSOURCE: https://github.com/bekacru/better-fetch/blob/main/doc/content/docs/timeout-and-retry.mdx#2025-04-16_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nimport { createFetch } from \"@better-fetch/fetch\";\n\nconst $fetch = createFetch({\n    baseURL: \"http://localhost:3000\",\n})\n// ---cut---\nconst res = await $fetch(\"https://jsonplaceholder.typicode.com/todos/1\", {\n  retry: {\n    type: \"linear\",\n    attempts: 3,\n    delay: 1000,\n    shouldRetry: (response) => {\n      if(response === null) return true; \n      if(response.status === 429) return true;\n      if(response.status !== 200) return true;\n      return response.json().then(\n        data => data.completed === false\n      ).catch(\n        err => true \n      )\n    }\n  }\n});\n```\n\n----------------------------------------\n\nTITLE: Retry with Callback in Better Fetch (TypeScript)\nDESCRIPTION: This snippet illustrates how to use a callback function with retry in Better Fetch. It logs a message each time a retry is attempted.\nSOURCE: https://github.com/bekacru/better-fetch/blob/main/doc/content/docs/timeout-and-retry.mdx#2025-04-16_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\nimport { createFetch } from \"@better-fetch/fetch\";\n\nconst $fetch = createFetch({\n    baseURL: \"http://localhost:3000\",\n})\n// ---cut---\nconst res = await $fetch(\"https://jsonplaceholder.typicode.com/todos/1\", {\n  retry: 3,\n  onRetry: (response) => {\n    console.log(`Retrying request.`);\n    }\n});\n```\n\n----------------------------------------\n\nTITLE: Initializing Better Fetch Plugin with URL Modification\nDESCRIPTION: Demonstrates how to create a plugin that modifies request URLs before they are processed. The plugin checks if URLs start with 'http://' and redirects them to a development URL.\nSOURCE: https://github.com/bekacru/better-fetch/blob/main/doc/content/docs/plugins.mdx#2025-04-16_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { createFetch, BetterFetchPlugin } from \"@better-fetch/fetch\";\n\nconst myPlugin = {\n    id: \"my-plugin\",\n    name: \"My Plugin\",\n    init: async (url, options) => {\n       if(url.startsWith(\"http://\")) {\n           const _url = new URL(url)\n           const DEV_URL = \"http://localhost:3000\"\n           return {\n               url: `${DEV_URL}/${_url.pathname}`,\n               options,\n           }\n       }\n        return {\n            url,\n            options,\n        }\n    },\n} satisfies BetterFetchPlugin;\n\nconst $fetch = createFetch({\n    baseURL: \"https://jsonplaceholder.typicode.com\",\n    plugins: [myPlugin],\n});\n```\n\n----------------------------------------\n\nTITLE: Defining Schema in Better Fetch Plugin\nDESCRIPTION: Demonstrates how to define a schema for API validation using Standard Schema specification. Uses Zod for schema validation and includes input/output validation rules.\nSOURCE: https://github.com/bekacru/better-fetch/blob/main/doc/content/docs/plugins.mdx#2025-04-16_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport { createFetch, createSchema, BetterFetchPlugin } from \"@better-fetch/fetch\";\n// Example using zod (or any Standard Schema compliant validator)\nimport { z } from \"zod\";\n\nconst plugin = {\n    id: \"my-plugin\",\n    name: \"My Plugin\",\n    schema: createSchema({\n            \"/path\": {\n                input: z.object({\n                    /**\n                     * You can write descriptions for the properties. Hover over the property to see \n                     * the description.\n                     */\n                    userId: z.string(),\n                    /**\n                     * The id property is required\n                     */\n                    id: z.number(),\n                }),\n                output: z.object({\n                    title: z.string(),\n                    completed: z.boolean(),\n                }),\n            }\n        },{\n            baseURL: \"https://jsonplaceholder.typicode.com\",\n        })\n} satisfies BetterFetchPlugin;\n\nconst $fetch = createFetch({    \n    baseURL: \"localhost:3000\"\n})\n\nconst { data, error } = await $fetch(\"https://jsonplaceholder.typicode.com/path\", {\n    body: {\n        userId: \"1\",\n        id: 1,\n        title: \"title\",\n        completed: true,\n    },\n});\n```\n\n----------------------------------------\n\nTITLE: Implementing Custom Options in Better Fetch Plugin\nDESCRIPTION: Shows how to add custom options to the fetch function using getOptions. Implements progress tracking for file uploads with type-safe option definitions.\nSOURCE: https://github.com/bekacru/better-fetch/blob/main/doc/content/docs/plugins.mdx#2025-04-16_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nimport { createFetch, createSchema, BetterFetchPlugin } from \"@better-fetch/fetch\";\nimport { z } from \"zod\";\n\nconst plugin = {\n    id: \"my-plugin\",\n    name: \"My Plugin\",\n    getOptions() {\n        return z.object({\n            onUploadProgress: z.function().args(z.object({\n                loaded: z.number(),\n                total: z.number(),\n            })),\n        });\n    },\n} satisfies BetterFetchPlugin;\n\nconst $fetch = createFetch({\n    baseURL: \"https://jsonplaceholder.typicode.com\",\n    plugins: [plugin],\n});\n\nconst { data, error } = await $fetch(\"https://jsonplaceholder.typicode.com/path\", {\n    onUploadProgress({\n        loaded,\n        total,\n    }) {\n        console.log(`Uploaded ${loaded} of ${total} bytes`);\n    },\n});\n```\n\n----------------------------------------\n\nTITLE: Implementing Bearer Token Authorization in TypeScript with Better Fetch\nDESCRIPTION: This snippet demonstrates how to create a fetch instance with Bearer token authorization. The token is added to the Authorization header of the request.\nSOURCE: https://github.com/bekacru/better-fetch/blob/main/doc/content/docs/authorization.mdx#2025-04-16_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { createFetch } from \"@better-fetch/fetch\";\n\nconst $fetch = createFetch({\n    baseURL: \"http://localhost:3000\",\n    auth: {\n        type: \"Bearer\",\n        token: \"my-token\",\n    },\n})\n```\n\n----------------------------------------\n\nTITLE: Configuring Default Output Type in Better Fetch\nDESCRIPTION: This example demonstrates how to set a default output type for the response data using the createFetch function. The defaultOutput option provides type information for the response data when no schema validation is provided.\nSOURCE: https://github.com/bekacru/better-fetch/blob/main/doc/content/docs/default-types.mdx#2025-04-16_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { createFetch } from \"@better-fetch/fetch\";\n// Example using zod (or any Standard Schema compliant library)\nimport { z } from \"zod\"; \n\nconst $fetch = createFetch({\n    baseURL: \"https://jsonplaceholder.typicode.com\",\n    defaultOutput: z.any(),\n})\n\nconst { data, error } = await $fetch(\"/todos/1\")\n\n// @annotate: Hover over the data object to see the type\n```\n\n----------------------------------------\n\nTITLE: Overriding Default Output Type with Schema Validation\nDESCRIPTION: This snippet shows how the output schema overrides the default output type when explicitly defined. It uses Zod to define a schema for a Todo item, providing stronger type safety than the default output type.\nSOURCE: https://github.com/bekacru/better-fetch/blob/main/doc/content/docs/default-types.mdx#2025-04-16_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { createFetch } from \"@better-fetch/fetch\";\nimport { z } from \"zod\";\n\nconst $fetch = createFetch({\n    baseURL: \"https://jsonplaceholder.typicode.com\",\n    defaultOutput: z.any(),\n});\n\nconst { data, error } = await $fetch(\"/todos/1\", {\n    output: z.object({\n        userId: z.string(),\n        id: z.number(),\n        title: z.string(),\n        completed: z.boolean(),\n    }),\n})\n// @annotate: Hover over the data object to see the type\n```\n\n----------------------------------------\n\nTITLE: Default Error Type Structure in Better Fetch\nDESCRIPTION: This code snippet shows the default error type structure in Better Fetch. The default error includes status code, status text, and an optional message property.\nSOURCE: https://github.com/bekacru/better-fetch/blob/main/doc/content/docs/default-types.mdx#2025-04-16_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\n{ status: number, statusText: string, message?: string }\n```\n\n----------------------------------------\n\nTITLE: Configuring Custom Error Types in Better Fetch\nDESCRIPTION: This example demonstrates how to set a custom error type using the defaultError option in createFetch. Custom error properties are merged with the default error properties when a JSON error is returned from the API.\nSOURCE: https://github.com/bekacru/better-fetch/blob/main/doc/content/docs/default-types.mdx#2025-04-16_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nimport { createFetch } from \"@better-fetch/fetch\";\nimport { z } from \"zod\"; // Example only\n\nconst $fetch = createFetch({\n    baseURL: \"https://jsonplaceholder.typicode.com\",\n    defaultError: z.object({\n        message: z.string().optional(),\n        error: z.string(),\n    }),\n})\n\nconst { data, error } = await $fetch(\"/todos/1\")\n// @annotate: Hover over the error object to see the type\n```\n\n----------------------------------------\n\nTITLE: Basic Usage of Logger Plugin with Better Fetch\nDESCRIPTION: Basic implementation showing how to create a fetch instance with the logger plugin enabled. This configures the logger with default settings.\nSOURCE: https://github.com/bekacru/better-fetch/blob/main/doc/content/docs/utility/logger.mdx#2025-04-16_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { createFetch } from \"@better-fetch/fetch\";\nimport { logger } from \"@better-fetch/logger\";\n\nconst $fetch = createFetch({\n    baseURL: \"http://localhost:3000\",\n    plugins: [\n        logger(),\n    ],\n});\n```\n\n----------------------------------------\n\nTITLE: Conditionally Enabling Logger Plugin\nDESCRIPTION: Example showing how to conditionally enable the logger plugin based on the environment. This is useful for only having logs in development mode.\nSOURCE: https://github.com/bekacru/better-fetch/blob/main/doc/content/docs/utility/logger.mdx#2025-04-16_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport { createFetch } from \"@better-fetch/fetch\";\nimport { logger } from \"@better-fetch/logger\";\n\nconst $fetch = createFetch({\n    baseURL: \"http://localhost:3000\",\n    plugins: [\n        logger({\n            enabled: process.env.NODE_ENV === \"development\",\n        }),\n    ],\n});\n```\n\n----------------------------------------\n\nTITLE: Customizing Logger Console Implementation\nDESCRIPTION: Example demonstrating how to provide a custom console implementation for the logger plugin. This allows using an alternative logging system instead of the default consola package.\nSOURCE: https://github.com/bekacru/better-fetch/blob/main/doc/content/docs/utility/logger.mdx#2025-04-16_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nimport { createFetch } from \"@better-fetch/fetch\";\nimport { logger } from \"@better-fetch/logger\";\n\nconst $fetch = createFetch({\n    baseURL: \"http://localhost:3000\",\n    plugins: [\n        logger({\n            console: {\n                log: (...args) => console.log(...args),\n                error: (...args) => console.error(...args),\n                warn: (...args) => console.warn(...args),\n            },\n        }),\n    ],\n});\n```\n\n----------------------------------------\n\nTITLE: Enabling Verbose Mode in Logger Plugin\nDESCRIPTION: Example showing how to enable verbose mode in the logger plugin. This provides more detailed logging information about requests and responses.\nSOURCE: https://github.com/bekacru/better-fetch/blob/main/doc/content/docs/utility/logger.mdx#2025-04-16_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nimport { createFetch } from \"@better-fetch/fetch\";\nimport { logger } from \"@better-fetch/logger\";\n\nconst $fetch = createFetch({\n    baseURL: \"http://localhost:3000\",\n    plugins: [\n        logger({\n            verbose: true,\n        }),\n    ],\n});\n```\n\n----------------------------------------\n\nTITLE: Installing Better Fetch Package\nDESCRIPTION: Installation command for the Better Fetch library using npm\nSOURCE: https://github.com/bekacru/better-fetch/blob/main/doc/content/docs/getting-started.mdx#2025-04-16_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm i @better-fetch/fetch\n```\n\n----------------------------------------\n\nTITLE: Installing Schema Validator\nDESCRIPTION: Installation command for schema validation library (zod) using npm\nSOURCE: https://github.com/bekacru/better-fetch/blob/main/doc/content/docs/getting-started.mdx#2025-04-16_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nnpm i zod # valibot, arktype...\n```\n\n----------------------------------------\n\nTITLE: Error Throwing Configuration\nDESCRIPTION: Example showing how to configure Better Fetch to throw errors instead of returning them\nSOURCE: https://github.com/bekacru/better-fetch/blob/main/doc/content/docs/getting-started.mdx#2025-04-16_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nimport { createFetch } from '@better-fetch/fetch';\nimport { z } from 'zod';\n\nconst $fetch = createFetch({\n    baseURL: \"https://jsonplaceholder.typicode.com\",\n    throw: true,\n});\n\nconst data = await $fetch<{\n    userId: number;\n}>(\"https://jsonplaceholder.typicode.com/todos/1\");\n```\n\n----------------------------------------\n\nTITLE: AutoTypeTable Component Usage for Better Fetch Options\nDESCRIPTION: A JSX component that renders the BetterFetchOptions type information from the better-fetch-options.ts file as a table. This provides API documentation for the available options in Better Fetch.\nSOURCE: https://github.com/bekacru/better-fetch/blob/main/doc/content/docs/extra-options.mdx#2025-04-16_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\n<AutoTypeTable path=\"./lib/better-fetch-options.ts\" name=\"BetterFetchOptions\" />\n```\n\n----------------------------------------\n\nTITLE: Installing Logger Plugin for Better Fetch\nDESCRIPTION: Command to install the Better Fetch logger plugin via npm.\nSOURCE: https://github.com/bekacru/better-fetch/blob/main/doc/content/docs/utility/logger.mdx#2025-04-16_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm i @better-fetch/logger\n```\n\n----------------------------------------\n\nTITLE: Installing Zod Dependency for Better Fetch\nDESCRIPTION: Command to install the Zod library, which is used for schema validation in Better Fetch.\nSOURCE: https://github.com/bekacru/better-fetch/blob/main/doc/content/docs/fetch-schema.mdx#2025-04-16_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm i zod\n```\n\n----------------------------------------\n\nTITLE: Better-Fetch Feature Enhancement Release Notes\nDESCRIPTION: Second release adding runtime schema validation with Zod, strict mode helpers, dynamic parameters, and method modifiers for request methods\nSOURCE: https://github.com/bekacru/better-fetch/blob/main/packages/better-fetch/CHANGELOG.md#2025-04-16_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n## v0.0.2\n\n### 🚀 Release\n\n- Fetch schema now has a runtime check with zod\n- Strict helper function to create a fetch schema with strict mode\n- Dynamic parameters can be defined with Fetch Schema.\n- Using method modifiers you can define the request method on the fetch schema.\n```\n\n----------------------------------------\n\nTITLE: Better-Fetch Initial Release Notes\nDESCRIPTION: Basic functionality release establishing core functionality of the Better-Fetch library\nSOURCE: https://github.com/bekacru/better-fetch/blob/main/packages/better-fetch/CHANGELOG.md#2025-04-16_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n# Changelog\n\n## v0.0.1\n\n### 🚀 First Release\n\n- Works\n```\n\n----------------------------------------\n\nTITLE: Installing and Starting the Better Fetch Documentation Development Environment\nDESCRIPTION: Commands to set up and run the development environment for the better-fetch documentation site. It uses pnpm as the package manager to install dependencies and start the development server.\nSOURCE: https://github.com/bekacru/better-fetch/blob/main/doc/README.md#2025-04-16_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\npnpm install\npnpm dev\n```\n\n----------------------------------------\n\nTITLE: Running the Project with Bun\nDESCRIPTION: Command to execute the project's main index.ts file using Bun runtime.\nSOURCE: https://github.com/bekacru/better-fetch/blob/main/dev/README.md#2025-04-16_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nbun run index.ts\n```\n\n----------------------------------------\n\nTITLE: Installing Dependencies with Bun\nDESCRIPTION: Command to install project dependencies using Bun package manager.\nSOURCE: https://github.com/bekacru/better-fetch/blob/main/dev/README.md#2025-04-16_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nbun install\n```"
  }
]