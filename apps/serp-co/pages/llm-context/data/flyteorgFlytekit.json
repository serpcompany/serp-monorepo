[
  {
    "owner": "flyteorg",
    "repo": "flytekit",
    "content": "TITLE: ML Training Workflow with W&B Integration\nDESCRIPTION: Complete example showing ML model training using XGBoost with Weights and Biases integration for experiment tracking. Demonstrates task decoration with W&B initialization, secret management, and metric logging.\nSOURCE: https://github.com/flyteorg/flytekit/blob/master/plugins/flytekit-wandb/README.md#2025-04-16_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nfrom flytekit import task, Secret, ImageSpec, workflow\n\nfrom flytekitplugins.wandb import wandb_init\n\nWANDB_PROJECT = \"flytekit-wandb-plugin\"\nWANDB_ENTITY = \"github-username\"\nWANDB_SECRET_KEY = \"wandb-api-key\"\nWANDB_SECRET_GROUP = \"wandb-api-group\"\nREGISTRY = \"localhost:30000\"\n\nimage = ImageSpec(\n    name=\"wandb_example\",\n    python_version=\"3.11\",\n    packages=[\"flytekitplugins-wandb\", \"xgboost\", \"scikit-learn\"],\n    registry=REGISTRY,\n)\nwandb_secret = Secret(key=WANDB_SECRET_KEY, group=WANDB_SECRET_GROUP)\n\n\n@task(\n    container_image=image,\n    secret_requests=[wandb_secret],\n)\n@wandb_init(\n    project=WANDB_PROJECT,\n    entity=WANDB_ENTITY,\n    secret=wandb_secret,\n)\ndef train() -> float:\n    from xgboost import XGBClassifier\n    from wandb.integration.xgboost import WandbCallback\n    from sklearn.datasets import load_iris\n    from sklearn.model_selection import train_test_split\n\n    import wandb\n\n    X, y = load_iris(return_X_y=True)\n    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2)\n    bst = XGBClassifier(\n        n_estimators=100,\n        objective=\"binary:logistic\",\n        callbacks=[WandbCallback(log_model=True)],\n    )\n    bst.fit(X_train, y_train)\n\n    test_score = bst.score(X_test, y_test)\n\n    # Log custom metrics\n    wandb.run.log({\"test_score\": test_score})\n    return test_score\n\n\n@workflow\ndef main() -> float:\n    return train()\n```\n\n----------------------------------------\n\nTITLE: Implementing Memory Profiling in Flyte Tasks\nDESCRIPTION: A complete example showing how to use the Memray profiling plugin with Flyte tasks to track memory usage and detect memory leaks. The example defines helper functions, decorated tasks, and a workflow that executes memory profiling.\nSOURCE: https://github.com/flyteorg/flytekit/blob/master/plugins/flytekit-memray/README.md#2025-04-16_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nfrom flytekit import workflow, task, ImageSpec\nfrom flytekitplugins.memray import memray_profiling\nimport time\n\n\nimage = ImageSpec(\n    name=\"memray_demo\",\n    packages=[\"flytekitplugins_memray\"],\n    registry=\"<your_cr_registry>\",\n)\n\n\ndef generate_data(n: int):\n    leak_list = []\n    for _ in range(n):  # Arbitrary large number for demonstration\n        large_data = \" \" * 10**6  # 1 MB string\n        leak_list.append(large_data)  # Keeps appending without releasing\n        time.sleep(0.1)  # Slow down the loop to observe memory changes\n\n\n@task(container_image=image, enable_deck=True)\n@memray_profiling(memray_html_reporter=\"table\")\ndef memory_usage(n: int) -> str:\n    generate_data(n=n)\n\n    return \"Well\"\n\n\n@task(container_image=image, enable_deck=True)\n@memray_profiling(trace_python_allocators=True, memray_reporter_args=[\"--leaks\"])\ndef memory_leakage(n: int) -> str:\n    generate_data(n=n)\n\n    return \"Well\"\n\n\n@workflow\ndef wf(n: int = 500):\n    memory_usage(n=n)\n    memory_leakage(n=n)\n```\n\n----------------------------------------\n\nTITLE: Creating Flyte Tasks and Workflow in Python\nDESCRIPTION: Example showing how to define tasks with caching and retry options, and compose them into a workflow. The example creates math operations (sum and square) as tasks and combines them in a workflow.\nSOURCE: https://github.com/flyteorg/flytekit/blob/master/README.md#2025-04-16_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nfrom flytekit import task, workflow\n\n@task(cache=True, cache_version=\"1\", retries=3)\ndef sum(x: int, y: int) -> int:\n    return x + y\n\n@task(cache=True, cache_version=\"1\", retries=3)\ndef square(z: int) -> int:\n    return z*z\n\n@workflow\ndef my_workflow(x: int, y: int) -> int:\n    return sum(x=square(z=x), y=square(z=y))\n```\n\n----------------------------------------\n\nTITLE: Creating a Simple Workflow with Task and Workflow Decorators\nDESCRIPTION: Example demonstrating how to define tasks and a workflow using Flytekit decorators. It creates two tasks (sum and square) and combines them in a workflow that squares two numbers and then adds them together.\nSOURCE: https://github.com/flyteorg/flytekit/blob/master/docs/source/index.rst#2025-04-16_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nfrom flytekit import task, workflow\n\n@task\ndef sum(x: int, y: int) -> int:\n   return x + y\n\n@task\ndef square(z: int) -> int:\n   return z * z\n\n@workflow\ndef my_workflow(x: int, y: int) -> int:\n   return sum(x=square(z=x), y=square(z=y))\n\nprint(f\"my_workflow output: {my_workflow(x=1, y=2)}\")\n```\n\n----------------------------------------\n\nTITLE: Registering Flyte Entities Using FlyteRemote\nDESCRIPTION: Demonstrates how to register tasks, workflows, and launch plans using FlyteRemote.\nSOURCE: https://github.com/flyteorg/flytekit/blob/master/docs/source/design/control_plane.rst#2025-04-16_snippet_7\n\nLANGUAGE: python\nCODE:\n```\nfrom flytekit.configuration import SerializationSettings\n\nflyte_entity = ...\nflyte_task = remote.register_task(\n    entity=flyte_entity,\n    serialization_settings=SerializationSettings(image_config=None),\n    version=\"v1\",\n)\nflyte_workflow = remote.register_workflow(\n    entity=flyte_entity,\n    serialization_settings=SerializationSettings(image_config=None),\n    version=\"v1\",\n)\nflyte_launch_plan = remote.register_launch_plan(entity=flyte_entity, version=\"v1\")\n```\n\n----------------------------------------\n\nTITLE: Configuring Flyte Workflow with Optuna Optimizer\nDESCRIPTION: Setup of a Flyte workflow that orchestrates parallel Optuna trials. Demonstrates parameter suggestion configuration and optimizer instantiation.\nSOURCE: https://github.com/flyteorg/flytekit/blob/master/plugins/flytekit-optuna/README.md#2025-04-16_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nimport flytekit as fl\nfrom flytekitplugins.optuna import Optimizer, suggest\n\n@fl.eager(container_image=image)\nasync def train(concurrency: int, n_trials: int) -> float:\n\n    optimizer = Optimizer(objective=objective, concurrency=concurrency, n_trials=n_trials)\n\n    await optimizer(\n        x=suggest.float(low=-10, high=10),\n        y=suggest.integer(low=-10, high=10),\n        z=suggest.category([-5, 0, 3, 6, 9]),\n        power=2,\n    )\n\n    print(optimizer.study.best_value)\n```\n\n----------------------------------------\n\nTITLE: Creating Workflow from Fetched Tasks\nDESCRIPTION: Demonstrates how to fetch tasks and create a new workflow using FlyteRemote.\nSOURCE: https://github.com/flyteorg/flytekit/blob/master/docs/source/design/control_plane.rst#2025-04-16_snippet_5\n\nLANGUAGE: python\nCODE:\n```\nfrom flytekit import workflow\n\ntask_1 = remote.fetch_task(name=\"core.basic.hello_world.say_hello\", version=\"v1\")\ntask_2 = remote.fetch_task(\n    name=\"core.basic.lp.greet\",\n    version=\"v13\",\n    project=\"flytesnacks\",\n    domain=\"development\",\n)\n\n\n@workflow\ndef my_remote_wf(name: str) -> int:\n    return task_2(task_1(name=name))\n```\n\n----------------------------------------\n\nTITLE: Configuring Neptune Authentication and Task Initialization\nDESCRIPTION: Python code example showing how to configure Neptune authentication using Flyte's Secret manager and decorate a task with Neptune run initialization. The task demonstrates how to access and write to the Neptune run context.\nSOURCE: https://github.com/flyteorg/flytekit/blob/master/plugins/flytekit-neptune/README.md#2025-04-16_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nfrom flytekit import Secret, current_context\n\nneptune_api_token = Secret(key=\"neptune_api_token\", group=\"neptune_group\")\n\n@task\n@neptune_init_run(project=\"flytekit/project\", secret=neptune_api_token)\ndef neptune_task() -> bool:\n    ctx = current_context()\n    run = ctx.neptune_run\n    run[\"algorithm\"] = \"my_algorithm\"\n    ...\n```\n\n----------------------------------------\n\nTITLE: Serving Local LLMs with Ollama in Flyte\nDESCRIPTION: Example of using the Ollama plugin to serve LLMs locally in Flyte. It demonstrates creating a custom model based on Llama 3 with a custom system prompt, and serving it with A10G GPU acceleration.\nSOURCE: https://github.com/flyteorg/flytekit/blob/master/plugins/flytekit-inference/README.md#2025-04-16_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nfrom textwrap import dedent\n\nfrom flytekit import ImageSpec, Resources, task, workflow\nfrom flytekitplugins.inference import Ollama, Model\nfrom flytekit.extras.accelerators import A10G\nfrom openai import OpenAI\n\n\nimage = ImageSpec(\n    name=\"ollama_serve\",\n    registry=\"...\",\n    packages=[\"flytekitplugins-inference\"],\n)\n\nollama_instance = Ollama(\n    model=Model(\n        name=\"llama3-mario\",\n        modelfile=dedent(\"\"\"\\\n        FROM llama3\n        ADAPTER {inputs.gguf}\n        PARAMETER temperature 1\n        PARAMETER num_ctx 4096\n        SYSTEM You are Mario from super mario bros, acting as an assistant.\\\n        \"\"\"),\n    )\n)\n\n\n@task(\n    container_image=image,\n    pod_template=ollama_instance.pod_template,\n    accelerator=A10G,\n    requests=Resources(gpu=\"0\"),\n)\ndef model_serving(questions: list[str], gguf: FlyteFile) -> list[str]:\n    responses = []\n    client = OpenAI(\n        base_url=f\"{ollama_instance.base_url}/v1\", api_key=\"ollama\"\n    )  # api key required but ignored\n\n    for question in questions:\n        completion = client.chat.completions.create(\n            model=\"llama3-mario\",\n            messages=[\n                {\"role\": \"user\", \"content\": question},\n            ],\n            max_tokens=256,\n        )\n        responses.append(completion.choices[0].message.content)\n\n    return responses\n```\n\n----------------------------------------\n\nTITLE: Serving HuggingFace Models with vLLM in Flyte\nDESCRIPTION: Example of using the vLLM plugin to serve an LLM hosted on HuggingFace in Flyte. It demonstrates setting up a vLLM instance to serve the Gemma 2B instruction-tuned model, handling HuggingFace authentication tokens, and using the OpenAI client interface.\nSOURCE: https://github.com/flyteorg/flytekit/blob/master/plugins/flytekit-inference/README.md#2025-04-16_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nimport flytekit as fl\nfrom openai import OpenAI\n\nmodel_name = \"google/gemma-2b-it\"\nhf_token_key = \"vllm_hf_token\"\n\nvllm_args = {\n    \"model\": model_name,\n    \"dtype\": \"half\",\n    \"max-model-len\": 2000,\n}\n\nhf_secrets = HFSecret(\n    secrets_prefix=\"_FSEC_\",\n    hf_token_key=hf_token_key\n)\n\nvllm_instance = VLLM(\n    hf_secret=hf_secrets,\n    arg_dict=vllm_args\n)\n\nimage = fl.ImageSpec(\n    name=\"vllm_serve\",\n    registry=\"...\",\n    packages=[\"flytekitplugins-inference\"],\n)\n\n\n@fl.task(\n    pod_template=vllm_instance.pod_template,\n    container_image=image,\n    secret_requests=[\n        fl.Secret(\n            key=hf_token_key, mount_requirement=fl.Secret.MountType.ENV_VAR  # must be mounted as an env var\n        )\n    ],\n)\ndef model_serving() -> str:\n    client = OpenAI(\n        base_url=f\"{vllm_instance.base_url}/v1\", api_key=\"vllm\"  # api key required but ignored\n    )\n\n    completion = client.chat.completions.create(\n        model=model_name,\n        messages=[\n            {\n                \"role\": \"user\",\n                \"content\": \"Compose a haiku about the power of AI.\",\n            }\n        ],\n        temperature=0.5,\n        top_p=1,\n        max_tokens=1024,\n    )\n    return completion.choices[0].message.content\n```\n\n----------------------------------------\n\nTITLE: Accessing Outputs from Launch Plan Executions\nDESCRIPTION: Shows how to retrieve and access outputs from launch plan executions that run as sub-workflows. This involves traversing the execution hierarchy to access node outputs at different levels of nesting.\nSOURCE: https://github.com/flyteorg/flytekit/blob/master/docs/source/design/control_plane.rst#2025-04-16_snippet_16\n\nLANGUAGE: python\nCODE:\n```\nexecution = remote.fetch_execution(name=\"adgswtrzfn99k2cws49q\", project=\"flytesnacks\", domain=\"development\")\nremote.sync_execution(execution, sync_nodes=True)\nremote.sync_execution(execution.node_executions['n1'].workflow_executions[0], sync_nodes=True)\nout = execution.node_executions['n1'].workflow_executions[0].node_executions['n0'].outputs['o0']\n```\n\n----------------------------------------\n\nTITLE: Configuring Flyte Entity Execution with Options\nDESCRIPTION: Demonstrates how to use the Options class to configure a Flyte entity execution with custom settings like data prefix, auth role, and labels. This allows for customization of execution parameters when running Flyte tasks, workflows, or launch plans remotely.\nSOURCE: https://github.com/flyteorg/flytekit/blob/master/docs/source/design/control_plane.rst#2025-04-16_snippet_10\n\nLANGUAGE: python\nCODE:\n```\nfrom flytekit.models.common import AuthRole, Labels\nfrom flytekit.tools.translator import Options\n\nflyte_entity = ...  # one of FlyteTask, FlyteWorkflow, or FlyteLaunchPlan\nexecution = remote.execute(\n    flyte_entity,\n    inputs={...},\n    execution_name=\"my_execution\",\n    wait=True,\n    options=Options(\n        raw_data_prefix=\"s3://my-bucket/my-prefix\",\n        auth_role=AuthRole(assumable_iam_role=\"my-role\"),\n        labels=Labels({\"my-label\": \"my-value\"}),\n    ),\n)\n```\n\n----------------------------------------\n\nTITLE: Serving Models with NVIDIA NIM in Flyte\nDESCRIPTION: Example of using the NIM plugin to serve optimized model containers that include NVIDIA software. It configures a Flyte task with NIM settings for inference with a Llama 3 model, using A10G GPU acceleration and handling necessary secrets.\nSOURCE: https://github.com/flyteorg/flytekit/blob/master/plugins/flytekit-inference/README.md#2025-04-16_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nfrom flytekit import ImageSpec, Secret, task, Resources\nfrom flytekitplugins.inference import NIM, NIMSecrets\nfrom flytekit.extras.accelerators import A10G\nfrom openai import OpenAI\n\n\nimage = ImageSpec(\n    name=\"nim\",\n    registry=\"...\",\n    packages=[\"flytekitplugins-inference\"],\n)\n\nnim_instance = NIM(\n    image=\"nvcr.io/nim/meta/llama3-8b-instruct:1.0.0\",\n    secrets=NIMSecrets(\n        ngc_image_secret=\"nvcrio-cred\",\n        ngc_secret_key=NGC_KEY,\n        secrets_prefix=\"_FSEC_\",\n    ),\n)\n\n\n@task(\n    container_image=image,\n    pod_template=nim_instance.pod_template,\n    accelerator=A10G,\n    secret_requests=[\n        Secret(\n            key=\"ngc_api_key\", mount_requirement=Secret.MountType.ENV_VAR\n        )  # must be mounted as an env var\n    ],\n    requests=Resources(gpu=\"0\"),\n)\ndef model_serving() -> str:\n    client = OpenAI(\n        base_url=f\"{nim_instance.base_url}/v1\", api_key=\"nim\"\n    )  # api key required but ignored\n\n    completion = client.chat.completions.create(\n        model=\"meta/llama3-8b-instruct\",\n        messages=[\n            {\n                \"role\": \"user\",\n                \"content\": \"Write a limerick about the wonders of GPU computing.\",\n            }\n        ],\n        temperature=0.5,\n        top_p=1,\n        max_tokens=1024,\n    )\n\n    return completion.choices[0].message.content\n```\n\n----------------------------------------\n\nTITLE: Initializing FlyteRemote Object for Specific Endpoint\nDESCRIPTION: Creates a FlyteRemote object for a specific Flyte endpoint with custom project and domain settings.\nSOURCE: https://github.com/flyteorg/flytekit/blob/master/docs/source/design/control_plane.rst#2025-04-16_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nfrom flytekit import FlyteRemote\n\nremote = FlyteRemote.for_endpoint(\n    endpoint=\"flyte.example.net\",\n    default_project=\"flytesnacks\",\n    default_domain=\"development\",\n)\n```\n\n----------------------------------------\n\nTITLE: Retrieving and Inspecting Flyte Executions\nDESCRIPTION: Shows how to fetch a completed execution by name, project, and domain, and access its inputs and outputs. This provides a way to retrieve execution results for further processing or analysis.\nSOURCE: https://github.com/flyteorg/flytekit/blob/master/docs/source/design/control_plane.rst#2025-04-16_snippet_11\n\nLANGUAGE: python\nCODE:\n```\nexecution = remote.fetch_execution(\n    name=\"fb22e306a0d91e1c6000\", project=\"flytesnacks\", domain=\"development\"\n)\ninput_keys = execution.inputs.keys()\noutput_keys = execution.outputs.keys()\n```\n\n----------------------------------------\n\nTITLE: Using OpenAI Batch API in Flyte Workflows\nDESCRIPTION: Example of using the OpenAI Batch API connector within Flyte workflows. The example shows how to create batch processing tasks that can accept either a JSONL file or a JSON iterator and process them asynchronously with OpenAI.\nSOURCE: https://github.com/flyteorg/flytekit/blob/master/plugins/flytekit-openai/README.md#2025-04-16_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nfrom typing import Iterator\n\nfrom flytekit import workflow, Secret\nfrom flytekit.types.file import JSONLFile\nfrom flytekit.types.iterator import JSON\nfrom flytekitplugins.openai import create_batch, BatchResult\n\n\ndef jsons():\n    for x in [\n        {\n            \"custom_id\": \"request-1\",\n            \"method\": \"POST\",\n            \"url\": \"/v1/chat/completions\",\n            \"body\": {\n                \"model\": \"gpt-3.5-turbo\",\n                \"messages\": [\n                    {\"role\": \"system\", \"content\": \"You are a helpful assistant.\"},\n                    {\"role\": \"user\", \"content\": \"What is 2+2?\"},\n                ],\n            },\n        },\n        {\n            \"custom_id\": \"request-2\",\n            \"method\": \"POST\",\n            \"url\": \"/v1/chat/completions\",\n            \"body\": {\n                \"model\": \"gpt-3.5-turbo\",\n                \"messages\": [\n                    {\"role\": \"system\", \"content\": \"You are a helpful assistant.\"},\n                    {\"role\": \"user\", \"content\": \"Who won the world series in 2020?\"},\n                ],\n            },\n        },\n    ]:\n        yield x\n\n\nit_batch = create_batch(\n    name=\"gpt-3.5-turbo\",\n    openai_organization=\"your-org\",\n    secret=Secret(group=\"openai-secret\", key=\"api-key\"),\n)\n\nfile_batch = create_batch(\n    name=\"gpt-3.5-turbo\",\n    openai_organization=\"your-org\",\n    secret=Secret(group=\"openai-secret\", key=\"api-key\"),\n    is_json_iterator=False,\n)\n\n\n@workflow\ndef json_iterator_wf(json_vals: Iterator[JSON] = jsons()) -> BatchResult:\n    return it_batch(jsonl_in=json_vals)\n\n\n@workflow\ndef jsonl_wf(jsonl_file: JSONLFile = \"data.jsonl\") -> BatchResult:\n    return file_batch(jsonl_in=jsonl_file)\n```\n\n----------------------------------------\n\nTITLE: Defining Tasks and Workflows for Launch Plan Example\nDESCRIPTION: Defines sample tasks and workflows to demonstrate how to access outputs from launch plan executions. The example includes a simple task, a sub-workflow, a launch plan, and a parent workflow that calls the launch plan.\nSOURCE: https://github.com/flyteorg/flytekit/blob/master/docs/source/design/control_plane.rst#2025-04-16_snippet_15\n\nLANGUAGE: python\nCODE:\n```\n@task\ndef add_random(x: int) -> int:\n    return x + random.randint(1, 100)\n\n@workflow\ndef sub_wf(x: int) -> int:\n    x = add_random(x=x)\n    return add_random(x=x)\n\nsub_wf_lp = LaunchPlan.get_or_create(\n    name=\"sub_wf_lp\",\n    workflow=sub_wf,\n)\n\n@workflow\ndef parent_wf(x: int = 1) -> int:\n    x = add_random(x=x)\n    return sub_wf_lp(x=x)\n```\n\n----------------------------------------\n\nTITLE: Flyte Configuration for W&B Integration\nDESCRIPTION: YAML configuration for enabling links between Flyte side panel and Weights and Biases interface. Defines templates for both execution ID and custom ID based linking.\nSOURCE: https://github.com/flyteorg/flytekit/blob/master/plugins/flytekit-wandb/README.md#2025-04-16_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\nplugins:\n  logs:\n    dynamic-log-links:\n      - wandb-execution-id:\n          displayName: Weights & Biases\n          templateUris: '{{ .taskConfig.host }}/{{ .taskConfig.entity }}/{{ .taskConfig.project }}/runs/{{ .executionName }}-{{ .nodeId }}-{{ .taskRetryAttempt }}'\n      - wandb-custom-id:\n          displayName: Weights & Biases\n          templateUris: '{{ .taskConfig.host }}/{{ .taskConfig.entity }}/{{ .taskConfig.project }}/runs/{{ .taskConfig.id }}'\n```\n\n----------------------------------------\n\nTITLE: Creating ChatGPT Tasks in Flyte Workflows\nDESCRIPTION: Example of creating and running ChatGPT tasks within a Flyte workflow. The example demonstrates configuring two different ChatGPT models (gpt-3.5-turbo and gpt-4) with different configurations and chaining them in a workflow.\nSOURCE: https://github.com/flyteorg/flytekit/blob/master/plugins/flytekit-openai/README.md#2025-04-16_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nfrom flytekit import task, workflow\nfrom flytekitplugins.openai import ChatGPTTask, ChatGPTConfig\n\nchatgpt_small_job = ChatGPTTask(\n    name=\"chatgpt gpt-3.5-turbo\",\n    openai_organization=\"org-NayNG68kGnVXMJ8Ak4PMgQv7\",\n    chatgpt_config={\n            \"model\": \"gpt-3.5-turbo\",\n            \"temperature\": 0.7,\n    },\n)\n\nchatgpt_big_job = ChatGPTTask(\n    name=\"chatgpt gpt-4\",\n    openai_organization=\"org-NayNG68kGnVXMJ8Ak4PMgQv7\",\n    chatgpt_config={\n            \"model\": \"gpt-4\",\n            \"temperature\": 0.7,\n    },\n)\n\n\n@workflow\ndef wf(message: str) -> str:\n    message = chatgpt_small_job(message=message)\n    message = chatgpt_big_job(message=message)\n    return message\n\n\nif __name__ == \"__main__\":\n    print(wf(message=\"hi\"))\n```\n\n----------------------------------------\n\nTITLE: Using OmegaConf DictConfig with Flyte Tasks and Workflows\nDESCRIPTION: Demonstrates how to use OmegaConf's DictConfig objects with Flyte tasks and workflows. The example shows creating a dataclass for configuration, defining tasks that accept DictConfig parameters, and orchestrating them in a workflow.\nSOURCE: https://github.com/flyteorg/flytekit/blob/master/plugins/flytekit-omegaconf/README.md#2025-04-16_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nfrom dataclasses import dataclass\nimport flytekitplugins.omegaconf  # noqa F401\nfrom flytekit import task, workflow\nfrom omegaconf import DictConfig\n\n@dataclass\nclass MySimpleConf:\n    _target_: str = \"lightning_module.MyEncoderModule\"\n    learning_rate: float = 0.0001\n\n@task\ndef my_task(cfg: DictConfig) -> None:\n    print(f\"Doing things with {cfg.learning_rate=}\")\n\n\n@workflow\ndef pipeline(cfg: DictConfig) -> None:\n    my_task(cfg=cfg)\n\n\nif __name__ == \"__main__\":\n    from omegaconf import OmegaConf\n\n    cfg = OmegaConf.structured(MySimpleConf)\n    pipeline(cfg=cfg)\n```\n\n----------------------------------------\n\nTITLE: Configuring Flyte UI Integration with Neptune\nDESCRIPTION: YAML configuration to enable linking from Flyte's side panel to Neptune experiments. This creates dynamic log links that associate Flyte executions with their corresponding Neptune runs.\nSOURCE: https://github.com/flyteorg/flytekit/blob/master/plugins/flytekit-neptune/README.md#2025-04-16_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\nplugins:\n  logs:\n    dynamic-log-links:\n      - neptune-run-id:\n          displayName: Neptune\n          templateUris: \"{{ .taskConfig.host }}/{{ .taskConfig.project }}?query=(%60flyte%2Fexecution_id%60%3Astring%20%3D%20%22{{ .executionName }}-{{ .nodeId }}-{{ .taskRetryAttempt }}%22)&lbViewUnpacked=true\"\n```\n\n----------------------------------------\n\nTITLE: Using Great Expectations as a Type in Flytekit\nDESCRIPTION: Example of implementing Great Expectations data validation using type annotations in a Flyte workflow. The code defines a task that accepts a GreatExpectationsType parameter with configuration and returns a message upon successful validation.\nSOURCE: https://github.com/flyteorg/flytekit/blob/master/plugins/flytekit-greatexpectations/README.md#2025-04-16_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nfrom flytekit import workflow\nfrom flytekitplugins.great_expectations import (\n    BatchRequestConfig,\n    GreatExpectationsFlyteConfig,\n    GreatExpectationsType,\n)\n\ndef simple_task(\n    directory: GreatExpectationsType[\n        str,\n        GreatExpectationsFlyteConfig(\n            datasource_name=\"data\",\n            expectation_suite_name=\"test.demo\",\n            data_connector_name=\"my_data_connector\",\n            batch_request_config=BatchRequestConfig(\n                data_connector_query={\n                    \"batch_filter_parameters\": {\n                        \"year\": \"2019\",\n                        \"month\": \"01\",\n                    },\n                    \"limit\": 10,\n                },\n            ),\n            context_root_dir=\"great_expectations\",\n        ),\n    ]\n) -> str:\n    return f\"Validation works for {directory}!\"\n\n\n@workflow\ndef simple_wf(directory: str = \"my_assets\") -> str:\n    return simple_task(directory=directory)\n```\n\n----------------------------------------\n\nTITLE: Configuring TensorFlow Distributed Training with Kubeflow Operator\nDESCRIPTION: Example of configuring a TensorFlow distributed training job using the Kubeflow TensorFlow Operator plugin. It defines worker, parameter server, and chief replicas with specific resource requirements and restart policies.\nSOURCE: https://github.com/flyteorg/flytekit/blob/master/plugins/flytekit-kf-tensorflow/README.md#2025-04-16_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nfrom flytekitplugins.kftensorflow import PS, Chief, CleanPodPolicy, RestartPolicy, RunPolicy, TfJob, Worker\n\n@task(\n    task_config=TfJob(\n        worker=Worker(\n            replicas=5,\n            requests=Resources(cpu=\"2\", mem=\"2Gi\"),\n            limits=Resources(cpu=\"2\", mem=\"2Gi\"),\n            restart_policy=RestartPolicy.FAILURE,\n        ),\n        ps=PS(replicas=1),\n        chief=Chief(replicas=1, restart_policy=RestartPolicy.ALWAYS),\n        run_policy=RunPolicy(clean_pod_policy=CleanPodPolicy.RUNNING),\n    ),\n    image=\"test_image\",\n    resources=Resources(cpu=\"1\", mem=\"1Gi\"),\n)\ndef tf_job():\n    ...\n```\n\n----------------------------------------\n\nTITLE: Implementing Custom Callbacks for Optuna Trial Suggestions\nDESCRIPTION: Advanced implementation showing how to define programmatic suggestions using custom callbacks with the optimize decorator.\nSOURCE: https://github.com/flyteorg/flytekit/blob/master/plugins/flytekit-optuna/README.md#2025-04-16_snippet_5\n\nLANGUAGE: python\nCODE:\n```\nimport flytekit as fl\nimport optuna\nfrom flytekitplugins.optuna import optimize\n\nimage = fl.ImageSpec(packages=[\"flytekitplugins.optuna\"])\n\n@fl.task(container_image=image)\nasync def objective(params: dict[str, int | float | str]) -> float:\n    ...\n\n@optimize\ndef optimizer(trial: optuna.Trial, verbosity: int, tree_method: str):\n\n    params = {\n        \"verbosity:\": verbosity,\n        \"tree_method\": tree_method,\n        \"objective\": \"binary:logistic\",\n        # defines booster, gblinear for linear functions.\n        \"booster\": trial.suggest_categorical(\"booster\", [\"gbtree\", \"gblinear\", \"dart\"]),\n        # sampling according to each tree.\n        \"colsample_bytree\": trial.suggest_float(\"colsample_bytree\", 0.2, 1.0),\n    }\n\n    if params[\"booster\"] in [\"gbtree\", \"dart\"]:\n        # maximum depth of the tree, signifies complexity of the tree.\n        params[\"max_depth\"] = trial.suggest_int(\"max_depth\", 3, 9, step=2)\n\n    if params[\"booster\"] == \"dart\":\n        params[\"sample_type\"] = trial.suggest_categorical(\"sample_type\", [\"uniform\", \"weighted\"])\n        params[\"normalize_type\"] = trial.suggest_categorical(\"normalize_type\", [\"tree\", \"forest\"])\n\n    return objective(params)\n\n\n@fl.eager(container_image=image)\nasync def train(concurrency: int, n_trials: int):\n\n    optimizer.concurrency = concurrency\n    optimizer.n_trials = n_trials\n\n    study = optuna.create_study(direction=\"maximize\")\n\n    await optimizer(verbosity=0, tree_method=\"exact\")\n```\n\n----------------------------------------\n\nTITLE: Creating a Flyte Workflow with MMCloud Task Execution\nDESCRIPTION: Example workflow demonstrating how to use the MMCloud plugin to execute Python tasks with different resource configurations and container images. The example includes data retrieval, processing, and model training.\nSOURCE: https://github.com/flyteorg/flytekit/blob/master/plugins/flytekit-mmcloud/README.md#2025-04-16_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nimport pandas as pd\nfrom flytekit import ImageSpec, Resources, task, workflow\nfrom sklearn.datasets import load_wine\nfrom sklearn.linear_model import LogisticRegression\n\nfrom flytekitplugins.mmcloud import MMCloudConfig\n\nimage_spec = ImageSpec(packages=[\"scikit-learn\"], registry=\"docker.io/memverge\")\n\n\n@task\ndef get_data() -> pd.DataFrame:\n    \"\"\"Get the wine dataset.\"\"\"\n    return load_wine(as_frame=True).frame\n\n\n@task(task_config=MMCloudConfig(), container_image=image_spec)  # Task will be submitted as MMCloud job\ndef process_data(data: pd.DataFrame) -> pd.DataFrame:\n    \"\"\"Simplify the task from a 3-class to a binary classification problem.\"\"\"\n    return data.assign(target=lambda x: x[\"target\"].where(x[\"target\"] == 0, 1))\n\n\n@task(\n    task_config=MMCloudConfig(submit_extra=\"--migratePolicy [enable=true]\"),\n    requests=Resources(cpu=\"1\", mem=\"1Gi\"),\n    limits=Resources(cpu=\"2\", mem=\"4Gi\"),\n    container_image=image_spec,\n    environment={\"KEY\": \"value\"},\n)\ndef train_model(data: pd.DataFrame, hyperparameters: dict) -> LogisticRegression:\n    \"\"\"Train a model on the wine dataset.\"\"\"\n    features = data.drop(\"target\", axis=\"columns\")\n    target = data[\"target\"]\n    return LogisticRegression(max_iter=3000, **hyperparameters).fit(features, target)\n\n\n@workflow\ndef training_workflow(hyperparameters: dict) -> LogisticRegression:\n    \"\"\"Put all of the steps together into a single workflow.\"\"\"\n    data = get_data()\n    processed_data = process_data(data=data)\n    return train_model(\n        data=processed_data,\n        hyperparameters=hyperparameters,\n    )\n```\n\n----------------------------------------\n\nTITLE: Creating SageMaker Deployment Workflow in Python\nDESCRIPTION: Sample workflow for deploying a model to AWS SageMaker. It demonstrates how to configure a model, endpoint configuration, and endpoint for inference using Flytekit's SageMaker deployment connector.\nSOURCE: https://github.com/flyteorg/flytekit/blob/master/plugins/flytekit-aws-sagemaker/README.md#2025-04-16_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nfrom flytekitplugins.awssagemaker_inference import create_sagemaker_deployment\n\n\nREGION = os.getenv(\"REGION\")\nMODEL_NAME = \"xgboost\"\nENDPOINT_CONFIG_NAME = \"xgboost-endpoint-config\"\nENDPOINT_NAME = \"xgboost-endpoint\"\n\nsagemaker_deployment_wf = create_sagemaker_deployment(\n    name=\"sagemaker-deployment\",\n    model_input_types=kwtypes(model_path=str, execution_role_arn=str),\n    model_config={\n        \"ModelName\": MODEL_NAME,\n        \"PrimaryContainer\": {\n            \"Image\": \"{images.deployment_image}\",\n            \"ModelDataUrl\": \"{inputs.model_path}\",\n        },\n        \"ExecutionRoleArn\": \"{inputs.execution_role_arn}\",\n    },\n    endpoint_config_input_types=kwtypes(instance_type=str),\n    endpoint_config_config={\n        \"EndpointConfigName\": ENDPOINT_CONFIG_NAME,\n        \"ProductionVariants\": [\n            {\n                \"VariantName\": \"variant-name-1\",\n                \"ModelName\": MODEL_NAME,\n                \"InitialInstanceCount\": 1,\n                \"InstanceType\": \"{inputs.instance_type}\",\n            },\n        ],\n        \"AsyncInferenceConfig\": {\n            \"OutputConfig\": {\"S3OutputPath\": os.getenv(\"S3_OUTPUT_PATH\")}\n        },\n    },\n    endpoint_config={\n        \"EndpointName\": ENDPOINT_NAME,\n        \"EndpointConfigName\": ENDPOINT_CONFIG_NAME,\n    },\n    images={\"deployment_image\": custom_image},\n    region=REGION,\n)\n\n\n@workflow\ndef model_deployment_workflow(\n    model_path: str = os.getenv(\"MODEL_DATA_URL\"),\n    execution_role_arn: str = os.getenv(\"EXECUTION_ROLE_ARN\"),\n) -> str:\n    return sagemaker_deployment_wf(\n        model_path=model_path,\n        execution_role_arn=execution_role_arn,\n        instance_type=\"ml.m4.xlarge\",\n    )\n```\n\n----------------------------------------\n\nTITLE: Provisioning a Kubernetes Stateful Data Service in Flyte\nDESCRIPTION: Complete example demonstrating how to create a Kubernetes StatefulSet service within a Flyte workflow, including configuration, task definition, and cleanup. The example provisions a busybox container that outputs a message and sleeps.\nSOURCE: https://github.com/flyteorg/flytekit/blob/master/plugins/flytekit-k8sdataservice/README.md#2025-04-16_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nfrom flytekitplugins.k8sdataservice import DataServiceConfig, DataServiceTask, CleanupSensor\nfrom utils.infra import gen_infra_name\nfrom flytekit import kwtypes, Resources, task, workflow\n\n# Generate a unique infrastructure name\nname = gen_infra_name()\n\ndef k8s_data_service():\n    gnn_config = DataServiceConfig(\n        Name=name,\n        Requests=Resources(cpu='1', mem='1Gi'),\n        Limits=Resources(cpu='2', mem='2Gi'),\n        Replicas=1,\n        Image=\"busybox:latest\",\n        Command=[\n            \"bash\",\n            \"-c\",\n            \"echo Hello Flyte K8s Stateful Service! && sleep 3600\"\n        ],\n    )\n\n    gnn_task = DataServiceTask(\n        name=\"K8s Stateful Data Service\",\n        inputs=kwtypes(ds=str),\n        task_config=gnn_config,\n    )\n    return gnn_task\n\n# Define a cleanup sensor\ngnn_sensor = CleanupSensor(name=\"Cleanup\")\n\n# Define a workflow to test the data service\n@workflow\ndef test_dataservice_wf(name: str):\n    k8s_data_service()(ds=\"OSS Flyte K8s Data Service Demo\") \\\n          >> gnn_sensor(\n              release_name=name,\n              cleanup_data_service=True,\n          )\n\nif __name__ == \"__main__\":\n    out = test_dataservice_wf(name=\"example\")\n    print(f\"Running test_dataservice_wf() {out}\")\n```\n\n----------------------------------------\n\nTITLE: Implementing Data Validation with whylogs Constraints in Flytekit\nDESCRIPTION: Shows how to create a validation task that applies constraints to a whylogs profile. The task uses the ConstraintsBuilder to define rules like minimum values and range checks, then validates the data against these constraints.\nSOURCE: https://github.com/flyteorg/flytekit/blob/master/plugins/flytekit-whylogs/README.md#2025-04-16_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nfrom whylogs.core.constraints.factories import greater_than_number, mean_between_range\n\n@task\ndef validate_data(profile_view: DatasetProfileView):\n    builder = ConstraintsBuilder(dataset_profile_view=profile_view)\n    builder.add_constraint(greater_than_number(column_name=\"my_column\", number=0.14))\n    builder.add_constraint(mean_between_range(column_name=\"my_other_column\", lower=2, upper=3))\n    constraint = builder.build()\n    valid = constraint.validate()\n\n    if valid is False:\n        print(constraint.report())\n        raise Exception(\"Invalid data found\")\n```\n\n----------------------------------------\n\nTITLE: Basic PyTorch Task Configuration\nDESCRIPTION: Example showing how to configure a PyTorch task with 5 worker replicas using the PyTorch plugin. Demonstrates basic task configuration with worker specifications and resource allocation.\nSOURCE: https://github.com/flyteorg/flytekit/blob/master/plugins/flytekit-kf-pytorch/README.md#2025-04-16_snippet_1\n\nLANGUAGE: python\nCODE:\n```\n@task(\n    task_config = PyTorch(\n        worker=Worker(replicas=5)\n    )\n    image=\"test_image\",\n    resources=Resources(cpu=\"1\", mem=\"1Gi\"),\n)\ndef pytorch_job():\n    ...\n```\n\n----------------------------------------\n\nTITLE: Executing Flyte Tasks with pyflyte-execute CLI\nDESCRIPTION: This command shows how Flyte executes a task at runtime. It invokes the pyflyte-execute CLI with arguments that specify the task module, task name, input paths, and output destinations. The command is templated with placeholders that get filled in by the Flyte execution engine at runtime.\nSOURCE: https://github.com/flyteorg/flytekit/blob/master/docs/source/design/execution.rst#2025-04-16_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nflytekit_venv pyflyte-execute --task-module app.workflows.failing_workflows --task-name divider --inputs {{.input}} --output-prefix {{.outputPrefix}} --raw-output-data-prefix {{.rawOutputDataPrefix}}\n```\n\n----------------------------------------\n\nTITLE: Using MLflow Autologging in Flyte Tasks\nDESCRIPTION: Example showing how to use the MLflow autologging decorator with a Flyte task. The example demonstrates applying the mlflow_autolog decorator to enable automatic logging of metrics when using the Keras framework.\nSOURCE: https://github.com/flyteorg/flytekit/blob/master/plugins/flytekit-mlflow/README.md#2025-04-16_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nfrom flytekit import task, workflow\nfrom flytekitplugins.mlflow import mlflow_autolog\nimport mlflow\n\n@task(enable_deck=True)\n@mlflow_autolog(framework=mlflow.keras)\ndef train_model():\n    ...\n```\n\n----------------------------------------\n\nTITLE: Using Great Expectations as a Task in Flytekit\nDESCRIPTION: Example of implementing Great Expectations data validation as a task in a Flyte workflow. The code creates a GreatExpectationsTask object, a task that processes the validation result, and a workflow that combines them.\nSOURCE: https://github.com/flyteorg/flytekit/blob/master/plugins/flytekit-greatexpectations/README.md#2025-04-16_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nimport os\n\nimport pandas as pd\nfrom flytekit import Resources, kwtypes, task, workflow\nfrom flytekitplugins.great_expectations import BatchRequestConfig, GreatExpectationsTask\n\nsimple_task_object = GreatExpectationsTask(\n    name=\"great_expectations_task_simple\",\n    datasource_name=\"data\",\n    inputs=kwtypes(dataset=str),\n    expectation_suite_name=\"test.demo\",\n    data_connector_name=\"data_example_data_connector\",\n    context_root_dir=\"great_expectations\",\n)\n\n@task(limits=Resources(mem=\"500Mi\"))\ndef simple_task(csv_file: str) -> int:\n    result = simple_task_object(dataset=csv_file)\n    df = pd.read_csv(os.path.join(\"greatexpectations\", \"data\", csv_file))\n    return df.shape[0]\n\n@workflow\ndef simple_wf(dataset: str = \"yellow_tripdata_sample_2019-01.csv\") -> int:\n    return simple_task(csv_file=dataset)\n```\n\n----------------------------------------\n\nTITLE: Creating a Data Profiling Task with whylogs and Flytekit\nDESCRIPTION: Defines a Flytekit task that generates a whylogs profile for a pandas DataFrame. The task logs the data using whylogs and returns a DatasetProfileView that can be used for downstream analysis or validation.\nSOURCE: https://github.com/flyteorg/flytekit/blob/master/plugins/flytekit-whylogs/README.md#2025-04-16_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nimport whylogs as why\nfrom whylogs.core import DatasetProfileView\n\nimport pandas as pd\n\nfrom flytekit import task\n\n@task\ndef profile(df: pd.DataFrame) -> DatasetProfileView:\n    result = why.log(df) # Various overloads for different common data types exist\n    profile_view = result.view()\n    return profile\n```\n\n----------------------------------------\n\nTITLE: Creating Visualization Deck for Optuna Study\nDESCRIPTION: Code for generating visualizations of the Optuna study results using Plotly and Flyte Decks.\nSOURCE: https://github.com/flyteorg/flytekit/blob/master/plugins/flytekit-optuna/README.md#2025-04-16_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nimport plotly\n\nfig = optuna.visualization.plot_timeline(optimizer.study)\nfl.Deck(name, plotly.io.to_html(fig))\n```\n\n----------------------------------------\n\nTITLE: Markdown Pull Request Template\nDESCRIPTION: A structured template for submitting pull requests to the Flytekit repository. Includes sections for issue tracking, change justification, implementation details, testing methodology, and a compliance checklist.\nSOURCE: https://github.com/flyteorg/flytekit/blob/master/pull_request_template.md#2025-04-16_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n## Tracking issue\n<!--\nIf your PR fixes an open issue, use `Closes flyteorg/flyte#999` to link your PR with the issue.\nExample: Closes flyteorg/flyte#999\n\nIf your PR is related to an issue or PR, use `Related to flyteorg/flyte#999` to link your PR.\nExample: Related to flyteorg/flyte#999\n-->\n<!-- Remove this section if not applicable -->\n\n## Why are the changes needed?\n\n<!--\nPlease clarify why the changes are needed. For instance,\n1. If you propose a new API, clarify the use case for a new API.\n2. If you fix a bug, you can clarify why it is a bug.\n-->\n\n## What changes were proposed in this pull request?\n\n<!--\nPlease clarify what changes you are proposing. The purpose of this section is to outline the changes and how this PR fixes the issue.\nIf possible, please consider writing useful notes for better and faster reviews in your PR. See the examples below.\n1. If you refactor some codes with changing classes, showing the class hierarchy will help reviewers.\n2. If there is design documentation, please add the link.\n-->\n\n## How was this patch tested?\n\n<!--\nIf tests were added, say they were added here. Please make sure to add some test cases that check the changes thoroughly including negative and positive cases if possible.\nIf it was tested in a way different from regular unit tests, please clarify how you tested step by step, ideally copy and paste-able, so that other reviewers can test and check, and descendants can verify in the future.\nIf tests were not added, please describe why they were not added and/or why it was difficult to add.\n-->\n\n### Setup process\n\n### Screenshots\n\n## Check all the applicable boxes <!-- Follow the above conventions to check the box -->\n\n- [ ] I updated the documentation accordingly.\n- [ ] All new and existing tests passed.\n- [ ] All commits are signed-off.\n\n## Related PRs\n\n<!-- Add related pull requests for reviewers to check -->\n\n## Docs link\n\n<!-- Add documentation link built by CI jobs here, and specify the changed place -->\n```\n\n----------------------------------------\n\nTITLE: Configuring MPI Task with Resource Allocation\nDESCRIPTION: Example of configuring an MPI task with launcher and worker specifications, including CPU and memory resource allocation. The task includes caching configuration and defines input/output parameters.\nSOURCE: https://github.com/flyteorg/flytekit/blob/master/plugins/flytekit-kf-mpi/README.md#2025-04-16_snippet_1\n\nLANGUAGE: python\nCODE:\n```\n@task(\n    task_config=MPIJob(\n        launcher=Launcher(\n            replicas=1,\n        ),\n        worker=Worker(\n            replicas=5,\n            requests=Resources(cpu=\"2\", mem=\"2Gi\"),\n            limits=Resources(cpu=\"4\", mem=\"2Gi\"),\n        ),\n        slots=2,\n    ),\n    cache=True,\n    requests=Resources(cpu=\"1\"),\n    cache_version=\"1\",\n)\ndef my_mpi_task(x: int, y: str) -> int:\n    return x\n```\n\n----------------------------------------\n\nTITLE: Defining Tasks and Workflows in Python with Flytekit\nDESCRIPTION: A simple example of defining tasks and a workflow using Flytekit decorators. The example shows two tasks (t1 and t2) and a workflow that connects them together, demonstrating how tasks return tuple values and how to use Promise objects implicitly.\nSOURCE: https://github.com/flyteorg/flytekit/blob/master/docs/source/design/authoring.rst#2025-04-16_snippet_0\n\nLANGUAGE: python\nCODE:\n```\n@task\ndef t1(a: int) -> Tuple[int, str]:\n    return a + 2, \"world\"\n\n@task\ndef t2(a: str, b: str) -> str:\n    return b + a\n\n@workflow\ndef my_wf(a: int, b: str) -> Tuple[int, str]:\n    x, y = t1(a=a).with_overrides(...)\n    d = t2(a=y, b=b)\n    return x, d\n```\n\n----------------------------------------\n\nTITLE: Integrating Airflow FileSensor with Flyte Task in a Workflow\nDESCRIPTION: This example demonstrates how to use an Airflow FileSensor within a Flyte workflow. The code creates a simple Flyte task, defines a workflow that uses an Airflow FileSensor to check for a file, and chains them together using Airflow's flow control operator.\nSOURCE: https://github.com/flyteorg/flytekit/blob/master/plugins/flytekit-airflow/README.md#2025-04-16_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nfrom airflow.sensors.filesystem import FileSensor\nfrom flytekit import task, workflow\n\n@task()\ndef t1():\n    print(\"flyte\")\n\n\n@workflow\ndef wf():\n    sensor = FileSensor(task_id=\"id\", filepath=\"/tmp/1234\")\n    sensor >> t1()\n\n\nif __name__ == '__main__':\n    wf()\n```\n\n----------------------------------------\n\nTITLE: V0 to V1 Migration Example\nDESCRIPTION: Code examples showing how to migrate from PyTorch plugin v0 to v1 format. Demonstrates the changes in task configuration syntax for the updated version.\nSOURCE: https://github.com/flyteorg/flytekit/blob/master/plugins/flytekit-kf-pytorch/README.md#2025-04-16_snippet_3\n\nLANGUAGE: python\nCODE:\n```\ntask_config=Pytorch(num_workers=10),\n\n# New format:\ntask_config=PyTorch(worker=Worker(replicas=10)),\n```\n\n----------------------------------------\n\nTITLE: Recording Outputs with Papermill Plugin in Python\nDESCRIPTION: Demonstrates the use of the Papermill plugin's record_outputs function to capture variables. Converts the notebook path to a PythonNotebook type and records the greeting, notebook, and custom object.\nSOURCE: https://github.com/flyteorg/flytekit/blob/master/plugins/flytekit-papermill/tests/testdata/nb-complex.ipynb#2025-04-16_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nfrom flytekitplugins.papermill  import record_outputs\nfrom flytekit.types.file import PythonNotebook\n\nrecord_outputs(h=h, w=PythonNotebook(w), x=x)\n```\n\n----------------------------------------\n\nTITLE: Terminating a Flyte Execution\nDESCRIPTION: Demonstrates how to terminate an ongoing execution with a specified cause. This is useful for stopping executions that are no longer needed or that have issues requiring code updates.\nSOURCE: https://github.com/flyteorg/flytekit/blob/master/docs/source/design/control_plane.rst#2025-04-16_snippet_19\n\nLANGUAGE: python\nCODE:\n```\nexecution = remote.fetch_execution(name=\"fb22e306a0d91e1c6000\", project=\"flytesnacks\", domain=\"development\")\nremote.terminate(execution, cause=\"Code needs to be updated\")\n```\n\n----------------------------------------\n\nTITLE: Accessing a Kubernetes Stateful Service via Environment Variables\nDESCRIPTION: Example showing how to access a Kubernetes StatefulSet service from another task using environment variables passed to the container. It demonstrates setting up a Kubernetes pod specification with environment variables containing service endpoints.\nSOURCE: https://github.com/flyteorg/flytekit/blob/master/plugins/flytekit-k8sdataservice/README.md#2025-04-16_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nfrom kubernetes.client import V1PodSpec, V1Container, V1EnvVar\n\nPRIMARY_CONTAINER_NAME = \"primary\"\nFLYTE_POD_SPEC = V1PodSpec(\n    containers=[\n        V1Container(\n            name=PRIMARY_CONTAINER_NAME,\n            env=[\n                V1EnvVar(name=\"MY_DATASERVICES\", value=f\"{name}-0.{name}:40000 {name}-1.{name}:40000\"),\n            ],\n        )\n    ],\n)\n\ntask_config = MPIJob(\n    launcher=Launcher(replicas=1, pod_template=FLYTE_POD_SPEC),\n    worker=Worker(replicas=1, pod_template=FLYTE_POD_SPEC),\n)\n\n@task(task_config=task_config)\ndef mpi_task() -> str:\n    return \"your script uses the envs to communicate with the data service \"\n```\n\n----------------------------------------\n\nTITLE: Decorating a Flyte Task with Jupyter Interactive Mode\nDESCRIPTION: Example of using the @jupyter decorator to enable interactive Jupyter Notebook development for a Flyte task.\nSOURCE: https://github.com/flyteorg/flytekit/blob/master/plugins/flytekit-flyteinteractive/README.md#2025-04-16_snippet_7\n\nLANGUAGE: python\nCODE:\n```\nfrom flytekit import task\nfrom flytekitplugins.flyteinteractive import jupyter\n\n@task\n@jupyter\ndef train():\n    ...\n```\n\n----------------------------------------\n\nTITLE: Implementing Xarray Workflow with Dask Integration\nDESCRIPTION: Example implementation showing how to create tasks and workflows using Xarray with Dask distributed computing. The example includes tasks for generating and preprocessing xarray datasets, configured with Dask worker groups and deck visualization enabled.\nSOURCE: https://github.com/flyteorg/flytekit/blob/master/plugins/community/flytekit-xarray-zarr/README.md#2025-04-16_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nimport dask.array as da\nimport xarray as xr\nfrom flytekit import task, workflow\nfrom flytekitplugins.dask import Dask, WorkerGroup\n\n\n@task(\n    task_config=Dask(workers=WorkerGroup(number_of_workers=6)),\n    enable_deck=True,\n)\ndef generate_xarray_task() -> xr.Dataset:\n    return xr.Dataset(\n        {\n            \"variable\": (\n                (\"time\", \"x\", \"y\"),\n                da.random.uniform(size=(1024, 1024, 1024)),\n            )\n        },\n    )\n\n\n@task(\n    task_config=Dask(workers=WorkerGroup(number_of_workers=6)),\n    enable_deck=True,\n)\ndef preprocess_xarray_task(ds: xr.Dataset) -> xr.Dataset:\n    return ds * 2\n\n\n@workflow\ndef xarray_workflow() -> xr.Dataset:\n    ds = generate_xarray_task()\n    return preprocess_xarray_task(ds=ds)\n```\n\n----------------------------------------\n\nTITLE: Loading Flyte Input Data Types\nDESCRIPTION: Loads the input parameters using the appropriate Flyte papermill functions. Each input is loaded with its corresponding function: files with load_flytefile, directories with load_flytedirectory, and structured datasets with load_structureddataset.\nSOURCE: https://github.com/flyteorg/flytekit/blob/master/plugins/flytekit-papermill/tests/testdata/nb-types.ipynb#2025-04-16_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nff = load_flytefile(ff)\nfd = load_flytedirectory(fd)\nsd = load_structureddataset(sd)\n```\n\n----------------------------------------\n\nTITLE: Accessing Specific Execution Outputs\nDESCRIPTION: Demonstrates how to access a specific output file from a Flyte execution and use it in subsequent code. This is useful for retrieving artifacts like models, data files, or other execution outputs.\nSOURCE: https://github.com/flyteorg/flytekit/blob/master/docs/source/design/control_plane.rst#2025-04-16_snippet_12\n\nLANGUAGE: python\nCODE:\n```\nmodel_file = execution.outputs[\"model_file\"]\nwith open(model_file) as f:\n    # use mode\n    ...\n```\n\n----------------------------------------\n\nTITLE: Advanced PyTorch Task Configuration with Policies\nDESCRIPTION: Extended configuration example showing how to set restart and run policies for PyTorch tasks. Includes worker replica configuration, restart policy for failure cases, and clean pod policy settings.\nSOURCE: https://github.com/flyteorg/flytekit/blob/master/plugins/flytekit-kf-pytorch/README.md#2025-04-16_snippet_2\n\nLANGUAGE: python\nCODE:\n```\n@task(\n    task_config = PyTorch(\n        worker=Worker(replicas=5, restart_policy=RestartPolicy.FAILURE),\n        run_policy=RunPolicy(\n            clean_pod_policy=CleanPodPolicy.ALL,\n        )\n    )\n    image=\"test_image\",\n    resources=Resources(cpu=\"1\", mem=\"1Gi\"),\n)\ndef pytorch_job():\n    ...\n```\n\n----------------------------------------\n\nTITLE: Defining Optuna Objective Function in Flyte\nDESCRIPTION: Implementation of an objective function for Optuna optimization using Flyte tasks. The function takes numeric parameters and returns a calculated value to optimize.\nSOURCE: https://github.com/flyteorg/flytekit/blob/master/plugins/flytekit-optuna/README.md#2025-04-16_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nimport math\n\nimport flytekit as fl\n\nimage = fl.ImageSpec(packages=[\"flytekitplugins.optuna\"])\n\n@fl.task(container_image=image)\nasync def objective(x: float, y: int, z: int, power: int) -> float:\n    return math.log((((x - 5) ** 2) + (y + 4) ** 4 + (3 * z - 3) ** 2)) ** power\n```\n\n----------------------------------------\n\nTITLE: Decorating a Flyte Task with VSCode Interactive Mode\nDESCRIPTION: Example of using the @vscode decorator to enable interactive VSCode development for a Flyte task.\nSOURCE: https://github.com/flyteorg/flytekit/blob/master/plugins/flytekit-flyteinteractive/README.md#2025-04-16_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nfrom flytekit import task\nfrom flytekitplugins.flyteinteractive import vscode\n\n@task\n@vscode\ndef train():\n    ...\n```\n\n----------------------------------------\n\nTITLE: Creating Spark Session and DataFrame\nDESCRIPTION: Initializes a new Spark session using the configuration and creates a sample DataFrame with name and age columns\nSOURCE: https://github.com/flyteorg/flytekit/blob/master/plugins/flytekit-papermill/tests/testdata/nb-spark.ipynb#2025-04-16_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nfrom flytekitplugins.spark import new_spark_session\n\nsession = new_spark_session(name=\"notebook\", conf=local_spark_conf)\nnew_df = session.createDataFrame([(\"Bob\", 10)], [\"name\", \"age\"])\n```\n\n----------------------------------------\n\nTITLE: Migrating TensorFlow Plugin from V0 to V1\nDESCRIPTION: Code example showing how to migrate from v0 to v1 of the TensorFlow plugin by updating the task configuration syntax. The newer version provides more configuration options for distributed training.\nSOURCE: https://github.com/flyteorg/flytekit/blob/master/plugins/flytekit-kf-tensorflow/README.md#2025-04-16_snippet_2\n\nLANGUAGE: python\nCODE:\n```\ntask_config=TfJob(num_workers=10, num_ps_replicas=1, num_chief_replicas=1),\n```\n\nLANGUAGE: python\nCODE:\n```\ntask_config=TfJob(worker=Worker(replicas=10), ps=PS(replicas=1), chief=Chief(replicas=1)),\n```\n\n----------------------------------------\n\nTITLE: Executing Flyte Entities Using FlyteRemote\nDESCRIPTION: Demonstrates how to execute a Flyte entity (task, workflow, or launch plan) using FlyteRemote.\nSOURCE: https://github.com/flyteorg/flytekit/blob/master/docs/source/design/control_plane.rst#2025-04-16_snippet_9\n\nLANGUAGE: python\nCODE:\n```\nflyte_entity = ...  # one of FlyteTask, FlyteWorkflow, or FlyteLaunchPlan\nexecution = remote.execute(\n    flyte_entity, inputs={...}, execution_name=\"my_execution\", wait=True\n)\n```\n\n----------------------------------------\n\nTITLE: MPI Plugin V0 to V1 Migration Code Changes\nDESCRIPTION: Code example showing the required changes when upgrading from MPI Plugin V0 to V1, demonstrating the new worker configuration syntax.\nSOURCE: https://github.com/flyteorg/flytekit/blob/master/plugins/flytekit-kf-mpi/README.md#2025-04-16_snippet_3\n\nLANGUAGE: python\nCODE:\n```\ntask_config=MPIJob(num_workers=10),\n```\n\nLANGUAGE: python\nCODE:\n```\ntask_config=MPIJob(worker=Worker(replicas=10)),\n```\n\n----------------------------------------\n\nTITLE: Defining Flyte Task with Conda Packages\nDESCRIPTION: Example of defining a Flyte task with image specification using conda packages. This snippet demonstrates how to specify a base image, Python version, Flytekit package, and conda packages including PyTorch with CUDA support.\nSOURCE: https://github.com/flyteorg/flytekit/blob/master/plugins/flytekit-envd/README.md#2025-04-16_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nfrom flytekit import task, ImageSpec\n\nimage_spec = ImageSpec(\n    base_image=\"ubuntu:20.04\",\n    python_version=\"3.11\",\n    packages=[\"flytekit\"],\n    conda_packages=[\"pytorch\", \"pytorch-cuda=12.1\"],\n    conda_channels=[\"pytorch\", \"nvidia\"]\n)\n\n@task(container_image=image_spec)\ndef run_pytorch():\n    ...\n```\n\n----------------------------------------\n\nTITLE: Defining TaskTemplate Class in Python for Flytekit Models\nDESCRIPTION: This code snippet shows the structure of a typical model class in Flytekit, using TaskTemplate as an example. It includes the constructor, properties, and IDL interaction methods.\nSOURCE: https://github.com/flyteorg/flytekit/blob/master/docs/source/design/models.rst#2025-04-16_snippet_0\n\nLANGUAGE: Python\nCODE:\n```\nclass TaskTemplate:\n    def __init__(self, ...):  # All elements of the Protobuf object\n        self._attribute = attribute\n        # ... other attributes\n\n    @property\n    def attribute(self):\n        return self._attribute\n    # ... other properties\n\n    def to_flyte_idl(self):\n        # Convert to Protobuf-generated Python class\n        pass\n\n    @classmethod\n    def from_flyte_idl(cls, proto):\n        # Convert from Protobuf-generated Python class\n        pass\n```\n\n----------------------------------------\n\nTITLE: Running Flytekit make commands\nDESCRIPTION: List of helpful make commands for common development tasks such as setup, formatting, linting, testing, and compiling requirements.\nSOURCE: https://github.com/flyteorg/flytekit/blob/master/docs/source/contributing.rst#2025-04-16_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n$ make\n  setup        Install requirements\n  fmt          Format code with ruff\n  lint         Run linters\n  test         Run tests\n  requirements Compile requirements\n```\n\n----------------------------------------\n\nTITLE: Installing Huggingface Plugin for Flytekit\nDESCRIPTION: Command to install the Huggingface plugin for Flytekit using pip. This plugin allows reading and writing Huggingface Datasets as Flyte StructuredDatasets.\nSOURCE: https://github.com/flyteorg/flytekit/blob/master/plugins/README.md#2025-04-16_snippet_16\n\nLANGUAGE: bash\nCODE:\n```\npip install flytekitplugins-huggingface\n```\n\n----------------------------------------\n\nTITLE: Advanced FlyteInteractive VSCode Examples\nDESCRIPTION: Examples demonstrating various configurations of FlyteInteractive VSCode tasks, including custom container images, environment variables, idle timeout, and extension configuration.\nSOURCE: https://github.com/flyteorg/flytekit/blob/master/plugins/flytekit-flyteinteractive/README.md#2025-04-16_snippet_6\n\nLANGUAGE: python\nCODE:\n```\nfrom flytekit import task, workflow\nfrom flytekitplugins.flyteinteractive import vscode, VscodeConfig, DEFAULT_CODE_SERVER_EXTENSIONS\n\n@task(\n    container_image=\"localhost:30000/flytekit-vscode:0.0.2\",\n    environment={\"FLYTE_SDK_LOGGING_LEVEL\": \"20\"}\n)\n@vscode(\n\n)\ndef t():\n    ...\n\n\n\n# this vscode task will be killed within 10 secs\n@task(\n    container_image=\"localhost:30000/flytekit-vscode:0.0.2\",\n    environment={\"FLYTE_SDK_LOGGING_LEVEL\": \"20\"}\n)\n@vscode(\n    max_idle_seconds=10,\n)\ndef t_short_live():\n    ...\n\n\n\n# this vscode task will download default extension + vim extension\nconfig_with_vim = VscodeConfig(\n    extension_remote_paths=DEFAULT_CODE_SERVER_EXTENSIONS+[\"https://open-vsx.org/api/vscodevim/vim/1.27.0/file/vscodevim.vim-1.27.0.vsix\"]\n)\n\n@task(\n    container_image=\"localhost:30000/flytekit-vscode:0.0.2\",\n    environment={\"FLYTE_SDK_LOGGING_LEVEL\": \"20\"}\n)\n@vscode(\n    config=config_with_vim\n)\ndef t_vim():\n    ...\n\n\n\n@workflow\ndef wf():\n    t()\n    t_short_live()\n    t_vim()\n```\n\n----------------------------------------\n\nTITLE: Configuring Horovod Task with Custom Command\nDESCRIPTION: Example of setting up a Horovod distributed training task with custom command configuration, including resource specifications and SSH daemon setup for worker nodes.\nSOURCE: https://github.com/flyteorg/flytekit/blob/master/plugins/flytekit-kf-mpi/README.md#2025-04-16_snippet_2\n\nLANGUAGE: python\nCODE:\n```\n@task(\n    task_config=HorovodJob(\n        launcher=Launcher(\n            replicas=1,\n            requests=Resources(cpu=\"1\"),\n            limits=Resources(cpu=\"2\"),\n        ),\n        worker=Worker(\n            replicas=1,\n            command=[\"/usr/sbin/sshd\", \"-De\", \"-f\", \"/home/jobuser/.sshd_config\"],\n            restart_policy=RestartPolicy.NEVER,\n        ),\n        slots=2,\n        verbose=False,\n        log_level=\"INFO\",\n    ),\n)\ndef my_horovod_task():\n    ...\n```\n\n----------------------------------------\n\nTITLE: Creating GCP Ingress with HTTPS Redirect and TLS\nDESCRIPTION: YAML configuration for Kubernetes Ingress and FrontendConfig resources that set up the GCP load balancer with HTTPS redirect, managed certificate, and IAP integration. Directs all traffic to the Istio ingress gateway running inside the cluster.\nSOURCE: https://github.com/flyteorg/flytekit/blob/master/plugins/flytekit-identity-aware-proxy/README.md#2025-04-16_snippet_11\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: networking.k8s.io/v1\nkind: Ingress\nmetadata:\n  annotations:\n    kubernetes.io/ingress.allow-http: \"true\"\n    kubernetes.io/ingress.global-static-ip-name: \"< fill in >\"\n    networking.gke.io/managed-certificates: flyte-managed-certificate\n    networking.gke.io/v1beta1.FrontendConfig: ingress-frontend-config\n  name: flyte-ingress\n  namespace: istio-system\nspec:\n  rules:\n  - http:\n      paths:\n      - backend:\n          service:\n            name: istio-ingress\n            port:\n              number: 443\n        path: /\n        pathType: Prefix\n---\napiVersion: networking.gke.io/v1beta1\nkind: FrontendConfig\nmetadata:\n  name: ingress-frontend-config\n  namespace: istio-system\nspec:\n  redirectToHttps:\n    enabled: true\n    responseCodeName: MOVED_PERMANENTLY_DEFAULT\n```\n\n----------------------------------------\n\nTITLE: Configuring Istio Gateway with TLS Certificate\nDESCRIPTION: YAML configuration for an Istio Gateway resource that defines how the Istio ingress gateway handles incoming HTTPS traffic. It references the self-signed certificate created by Cert Manager for TLS termination.\nSOURCE: https://github.com/flyteorg/flytekit/blob/master/plugins/flytekit-identity-aware-proxy/README.md#2025-04-16_snippet_9\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: networking.istio.io/v1beta1\nkind: Gateway\nmetadata:\n  name: default-gateway\n  namespace: istio-system\nspec:\n  selector:\n    app: istio-ingress\n    istio: ingress\n  servers:\n  - hosts:\n    - '*'\n    port:\n      name: https\n      number: 443\n      protocol: HTTPS\n    tls:\n      credentialName: istio-ingress-cert\n      mode: SIMPLE\n```\n\n----------------------------------------\n\nTITLE: Installing Snowflake Plugin for Flytekit\nDESCRIPTION: Command to install the Snowflake plugin for Flytekit using pip. This plugin allows using Snowflake as a 'data warehouse-as-a-service' within Flyte.\nSOURCE: https://github.com/flyteorg/flytekit/blob/master/plugins/README.md#2025-04-16_snippet_14\n\nLANGUAGE: bash\nCODE:\n```\npip install flytekitplugins-snowflake\n```\n\n----------------------------------------\n\nTITLE: Implementing Custom Dictionary Inputs for Optuna\nDESCRIPTION: Advanced configuration showing how to define suggestions using recursive dictionaries for complex parameter spaces.\nSOURCE: https://github.com/flyteorg/flytekit/blob/master/plugins/flytekit-optuna/README.md#2025-04-16_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nimport flytekit as fl\nfrom flytekitplugins.optuna import Optimizer, suggest\n\nimage = fl.ImageSpec(packages=[\"flytekitplugins.optuna\"])\n\n\n@fl.task(container_image=image)\nasync def objective(params: dict[str, int | float | str]) -> float:\n    ...\n\n\n@fl.eager(container_image=image)\nasync def train(concurrency: int, n_trials: int):\n\n    study = optuna.create_study(direction=\"maximize\")\n\n    optimizer = Optimizer(objective=objective, concurrency=concurrency, n_trials=n_trials, study=study)\n\n    params = {\n        \"lambda\": suggest.float(1e-8, 1.0, log=True),\n        \"alpha\": suggest.float(1e-8, 1.0, log=True),\n        \"subsample\": suggest.float(0.2, 1.0),\n        \"colsample_bytree\": suggest.float(0.2, 1.0),\n        \"max_depth\": suggest.integer(3, 9, step=2),\n        \"objective\": \"binary:logistic\",\n        \"tree_method\": \"exact\",\n        \"booster\": \"dart\",\n    }\n\n    await optimizer(params=params)\n```\n\n----------------------------------------\n\nTITLE: Initializing FlyteRemote Object for Sandbox Environment\nDESCRIPTION: Creates a FlyteRemote object specifically configured for a Flyte sandbox environment.\nSOURCE: https://github.com/flyteorg/flytekit/blob/master/docs/source/design/control_plane.rst#2025-04-16_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nfrom flytekit import FlyteRemote\n\nremote = FlyteRemote.for_sandbox()\n```\n\n----------------------------------------\n\nTITLE: Configuring Istio VirtualService for Flyte Components\nDESCRIPTION: YAML configuration for an Istio VirtualService that routes traffic from the Istio ingress gateway to Flyte components (flyteconsole and flyteadmin) based on URL path prefixes. Enables proper request routing within the service mesh.\nSOURCE: https://github.com/flyteorg/flytekit/blob/master/plugins/flytekit-identity-aware-proxy/README.md#2025-04-16_snippet_12\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: networking.istio.io/v1beta1\nkind: VirtualService\nmetadata:\n  name: flyte-virtualservice\n  namespace: flyte\nspec:\n  gateways:\n  - istio-system/default-gateway\n  hosts:\n  - <fill in your flyte domain>\n  http:\n  - match:\n    - uri:\n        prefix: /console\n    name: console-routes\n    route:\n    - destination:\n        host: flyteconsole\n        port:\n          number: 80\n  - match:\n    - uri:\n        prefix: /api\n    - uri:\n        prefix: /healthcheck\n    - uri:\n        prefix: /v1/*\n    - uri:\n        prefix: /.well-known\n    - uri:\n        prefix: /login\n    - uri:\n        prefix: /logout\n    - uri:\n        prefix: /callback\n    - uri:\n        prefix: /me\n    - uri:\n```\n\n----------------------------------------\n\nTITLE: Initializing Variables in Python\nDESCRIPTION: Sets up initial variables including integers, a string, and a datetime object. These variables will be used for subsequent operations and eventually recorded as outputs.\nSOURCE: https://github.com/flyteorg/flytekit/blob/master/plugins/flytekit-papermill/tests/testdata/nb-multi.ipynb#2025-04-16_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nfrom datetime import datetime, timedelta\n\nx = 10\ny = 16\nh = \"hello\"\nn = datetime(2020, 10, 10, 10, 10, 10)\n```\n\n----------------------------------------\n\nTITLE: Testing Flyte Deployment with IAP using Python\nDESCRIPTION: Python script to test the Flyte deployment with Identity-Aware Proxy (IAP). It uses FlyteRemote to connect to the Flyte instance and retrieve recent executions. This script triggers the IAP login process.\nSOURCE: https://github.com/flyteorg/flytekit/blob/master/plugins/flytekit-identity-aware-proxy/README.md#2025-04-16_snippet_14\n\nLANGUAGE: python\nCODE:\n```\nfrom flytekit.remote import FlyteRemote\n\nfrom flytekit.configuration import Config\n\n\nremote = FlyteRemote(\n    config=Config.auto(),\n    default_project=\"flytesnacks\",\n    default_domain=\"development\",\n)\n\n\nprint(remote.recent_executions())\n```\n\n----------------------------------------\n\nTITLE: Creating IAP Backend Configuration for Istio Ingress\nDESCRIPTION: YAML definition for a GCP BackendConfig resource that enables Identity-Aware Proxy (IAP) for the Istio ingress gateway. Includes custom health check configuration and references a secret containing OAuth client credentials.\nSOURCE: https://github.com/flyteorg/flytekit/blob/master/plugins/flytekit-identity-aware-proxy/README.md#2025-04-16_snippet_6\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: cloud.google.com/v1\nkind: BackendConfig\nmetadata:\n  name: ingress-backend-config\n  namespace: istio-system\nspec:\n  healthCheck:\n    port: 15021\n    requestPath: /healthz/ready\n    type: HTTP\n  iap:\n    enabled: true\n    oauthclientCredentials:\n      secretName: iap-oauth-client-id\n```\n\n----------------------------------------\n\nTITLE: Registering Workflow with Custom Image Configuration\nDESCRIPTION: Shows how to register a workflow using a custom image configuration.\nSOURCE: https://github.com/flyteorg/flytekit/blob/master/docs/source/design/control_plane.rst#2025-04-16_snippet_8\n\nLANGUAGE: python\nCODE:\n```\nfrom flytekit.configuration import ImageConfig\n\nimg = ImageConfig.from_images(\n    \"docker.io/xyz:latest\", {\"spark\": \"docker.io/spark:latest\"}\n)\nwf2 = remote.register_workflow(\n    my_remote_wf,\n    serialization_settings=SerializationSettings(image_config=img),\n    version=\"v1\",\n)\n```\n\n----------------------------------------\n\nTITLE: Creating GCP Managed Certificate for Flyte Domain\nDESCRIPTION: YAML configuration for a GCP ManagedCertificate resource that provisions a Google-managed TLS certificate for the Flyte domain, used for securing external traffic to the GCP load balancer.\nSOURCE: https://github.com/flyteorg/flytekit/blob/master/plugins/flytekit-identity-aware-proxy/README.md#2025-04-16_snippet_10\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: networking.gke.io/v1\nkind: ManagedCertificate\nmetadata:\n  name: flyte-managed-certificate\n  namespace: istio-system\nspec:\n  domains:\n    - < fill in your domain >\n```\n\n----------------------------------------\n\nTITLE: Importing Dependencies for Flyte Papermill Plugin\nDESCRIPTION: Imports the necessary modules and functions from the papermill plugin to handle file operations. This includes functions to load files, directories, and structured datasets, as well as to record outputs.\nSOURCE: https://github.com/flyteorg/flytekit/blob/master/plugins/flytekit-papermill/tests/testdata/nb-types.ipynb#2025-04-16_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nimport os\nimport pandas as pd\nfrom flytekitplugins.papermill import (\n    load_flytefile, load_flytedirectory, load_structureddataset,\n    record_outputs\n)\n```\n\n----------------------------------------\n\nTITLE: Installing dbt Plugin for Flytekit\nDESCRIPTION: Command to install the dbt plugin for Flytekit using pip. This plugin enables running dbt within Flyte.\nSOURCE: https://github.com/flyteorg/flytekit/blob/master/plugins/README.md#2025-04-16_snippet_15\n\nLANGUAGE: bash\nCODE:\n```\npip install flytekitplugins-dbt\n```\n\n----------------------------------------\n\nTITLE: Port Forwarding for FlyteInteractive Jupyter Server\nDESCRIPTION: Kubernetes command to forward a local port to the FlyteInteractive Jupyter Notebook server pod.\nSOURCE: https://github.com/flyteorg/flytekit/blob/master/plugins/flytekit-flyteinteractive/README.md#2025-04-16_snippet_8\n\nLANGUAGE: bash\nCODE:\n```\nkubectl port-forward -n [NAMESPACE] [PODNAME] 8888:8888\n```\n\n----------------------------------------\n\nTITLE: Creating Launch Plan from Fetched Workflow\nDESCRIPTION: Shows how to fetch a workflow and create a launch plan using FlyteRemote.\nSOURCE: https://github.com/flyteorg/flytekit/blob/master/docs/source/design/control_plane.rst#2025-04-16_snippet_6\n\nLANGUAGE: python\nCODE:\n```\nfrom flytekit import LaunchPlan\n\nflyte_workflow = remote.fetch_workflow(\n    name=\"my_workflow\", version=\"v1\", project=\"flytesnacks\", domain=\"development\"\n)\nlaunch_plan = LaunchPlan.get_or_create(name=\"my_launch_plan\", workflow=flyte_workflow)\n```\n\n----------------------------------------\n\nTITLE: Creating Self-Signed Certificate Issuer for Istio\nDESCRIPTION: YAML configuration for a Cert Manager Issuer resource that enables creation of self-signed certificates for secure communication between the GCP load balancer and the Istio ingress gateway.\nSOURCE: https://github.com/flyteorg/flytekit/blob/master/plugins/flytekit-identity-aware-proxy/README.md#2025-04-16_snippet_7\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: cert-manager.io/v1\nkind: Issuer\nmetadata:\n  name: selfsigned-issuer\n  namespace: istio-system\nspec:\n  selfSigned: {}\n```\n\n----------------------------------------\n\nTITLE: Initializing Variables for Papermill Notebook Processing in Python\nDESCRIPTION: Sets up initial variables for later use with the Papermill plugin. Defines a string greeting, a path to a Jupyter notebook file, and a numeric value.\nSOURCE: https://github.com/flyteorg/flytekit/blob/master/plugins/flytekit-papermill/tests/testdata/nb-complex.ipynb#2025-04-16_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nh = \"hello\"\nw = \"./nb-simple.ipynb\"\nn = 5\n```\n\n----------------------------------------\n\nTITLE: Installing DuckDB Plugin for Flytekit\nDESCRIPTION: Command to install the DuckDB plugin for Flytekit using pip. This plugin enables running analytical workloads with ease using DuckDB.\nSOURCE: https://github.com/flyteorg/flytekit/blob/master/plugins/README.md#2025-04-16_snippet_17\n\nLANGUAGE: bash\nCODE:\n```\npip install flytekitplugins-duckdb\n```\n\n----------------------------------------\n\nTITLE: Installing Memray Profiling Plugin\nDESCRIPTION: Command to install the Memray profiling plugin for Flytekit via pip.\nSOURCE: https://github.com/flyteorg/flytekit/blob/master/plugins/flytekit-memray/README.md#2025-04-16_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\npip install flytekitplugins-memray\n```\n\n----------------------------------------\n\nTITLE: Syncing Execution State with Remote Flyte Server\nDESCRIPTION: Shows how to synchronize an execution object with the current state on the remote Flyte server, including node executions. This ensures that the local object reflects the most up-to-date execution state.\nSOURCE: https://github.com/flyteorg/flytekit/blob/master/docs/source/design/control_plane.rst#2025-04-16_snippet_13\n\nLANGUAGE: python\nCODE:\n```\nsynced_execution = remote.sync(execution, sync_nodes=True)\nnode_keys = synced_execution.node_executions.keys()\n```\n\n----------------------------------------\n\nTITLE: Recording Output Status in Flyte Papermill\nDESCRIPTION: Records the execution status as successful using the record_outputs function from the papermill plugin. This function marks the workflow execution as complete and successful.\nSOURCE: https://github.com/flyteorg/flytekit/blob/master/plugins/flytekit-papermill/tests/testdata/nb-types.ipynb#2025-04-16_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nrecord_outputs(success=True)\n```\n\n----------------------------------------\n\nTITLE: Initializing Variables in Flyte Papermill Workflow\nDESCRIPTION: Initializes the placeholder variables that will be filled with Flyte inputs. These variables are used as input parameters for files, directories, and structured datasets.\nSOURCE: https://github.com/flyteorg/flytekit/blob/master/plugins/flytekit-papermill/tests/testdata/nb-types.ipynb#2025-04-16_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nff = None\nfd = None\nsd = None\n```\n\n----------------------------------------\n\nTITLE: Installing DOLT Plugin for Flytekit\nDESCRIPTION: Command to install the DOLT plugin for Flytekit using pip. This plugin allows reading and writing DOLT data sets and using DOLT tables as native types.\nSOURCE: https://github.com/flyteorg/flytekit/blob/master/plugins/README.md#2025-04-16_snippet_10\n\nLANGUAGE: bash\nCODE:\n```\npip install flytekitplugins-dolt\n```\n\n----------------------------------------\n\nTITLE: Configuring Dolt User Information\nDESCRIPTION: Required commands to set up global user configuration for Dolt before initialization. This configuration provides user email and name information needed for Dolt operations.\nSOURCE: https://github.com/flyteorg/flytekit/blob/master/plugins/flytekit-dolt/README.md#2025-04-16_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ndolt config --global --add user.email <email>\ndolt config --global --add user.name <name>\n```\n\n----------------------------------------\n\nTITLE: Initializing FlyteRemote Object Using Auto Method\nDESCRIPTION: Creates a FlyteRemote object automatically using environment variables or default configuration.\nSOURCE: https://github.com/flyteorg/flytekit/blob/master/docs/source/design/control_plane.rst#2025-04-16_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nfrom flytekit import FlyteRemote\n\nremote = FlyteRemote.auto()\n```\n\n----------------------------------------\n\nTITLE: Performing Basic Operations on Variables\nDESCRIPTION: Performs arithmetic operations on integers, concatenates a string, and adds a timedelta to a datetime object. The operations include addition, multiplication, string concatenation, and date manipulation.\nSOURCE: https://github.com/flyteorg/flytekit/blob/master/plugins/flytekit-papermill/tests/testdata/nb-multi.ipynb#2025-04-16_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nz = x + y\nm = x * y\nprint(f\"{z},{m}\")\nh = h + \" world!\"\nn = n + timedelta(days=1)\n```\n\n----------------------------------------\n\nTITLE: Expected Workflow Output\nDESCRIPTION: Shows the expected console output when running the example workflow with inputs x=1 and y=2, which calculates 1² + 2² = 5.\nSOURCE: https://github.com/flyteorg/flytekit/blob/master/docs/source/index.rst#2025-04-16_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nmy_workflow output: 5\n```\n\n----------------------------------------\n\nTITLE: Creating Self-Signed Certificate for Istio Ingress\nDESCRIPTION: YAML configuration for a Cert Manager Certificate resource that creates a self-signed TLS certificate for secure communication between the GCP load balancer and the Istio ingress gateway. It includes the necessary DNS names for the Istio ingress service.\nSOURCE: https://github.com/flyteorg/flytekit/blob/master/plugins/flytekit-identity-aware-proxy/README.md#2025-04-16_snippet_8\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: cert-manager.io/v1\nkind: Certificate\nmetadata:\n  name: istio-ingress-cert\n  namespace: istio-system\nspec:\n  commonName: istio-ingress\n  dnsNames:\n  - istio-ingress\n  - istio-ingress.istio-system.svc\n  - istio-ingress.istio-system.svc.cluster.local\n  issuerRef:\n    kind: Issuer\n    name: selfsigned-issuer\n  secretName: istio-ingress-cert\n```\n\n----------------------------------------\n\nTITLE: Dockerfile Instructions for Including VSCode in Custom Image\nDESCRIPTION: Dockerfile commands to include VSCode in a custom image, allowing users to skip the VSCode download process at runtime.\nSOURCE: https://github.com/flyteorg/flytekit/blob/master/plugins/flytekit-flyteinteractive/README.md#2025-04-16_snippet_5\n\nLANGUAGE: dockerfile\nCODE:\n```\n# Include this line if the image does not already have 'curl' installed.\nRUN apt-get -y install curl\n# Download and extract the binary, and ensure it's added to the system's $PATH.\nRUN mkdir /tmp/code-server\nRUN curl -kfL -o /tmp/code-server/code-server-4.18.0-linux-amd64.tar.gz https://github.com/coder/code-server/releases/download/v4.18.0/code-server-4.18.0-linux-amd64.tar.gz\nRUN tar -xzf /tmp/code-server/code-server-4.18.0-linux-amd64.tar.gz -C /tmp/code-server/\nENV PATH=\"/tmp/code-server/code-server-4.18.0-linux-amd64/bin:${PATH}\"\n```\n\n----------------------------------------\n\nTITLE: Initializing FlyteRemote Object with Custom Configuration\nDESCRIPTION: Creates a FlyteRemote object with custom platform and secrets configuration.\nSOURCE: https://github.com/flyteorg/flytekit/blob/master/docs/source/design/control_plane.rst#2025-04-16_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nfrom flytekit.remote import FlyteRemote\nfrom flytekit.configuration import Config, PlatformConfig\n\nremote = FlyteRemote(\n    config=Config(\n        platform=PlatformConfig(\n            endpoint=\"flyte.example.net\",\n            insecure=False,\n            client_id=\"my-client-id\",\n            client_credentials_secret=\"my-client-secret\",\n            auth_mode=\"client_credentials\",\n        ),\n        secrets=SecretsConfig(default_dir=\"/etc/secrets\"),\n    )\n)\n```\n\n----------------------------------------\n\nTITLE: Importing Custom Data Type and Manipulating Variables in Python\nDESCRIPTION: Imports a custom data type 'X' from test data, appends to the greeting string, and instantiates an object of the custom type with the numeric value.\nSOURCE: https://github.com/flyteorg/flytekit/blob/master/plugins/flytekit-papermill/tests/testdata/nb-complex.ipynb#2025-04-16_snippet_1\n\nLANGUAGE: python\nCODE:\n```\n# We're importing from the root folder because tests aren't released as part of the package, so there's nothing to\n# import from in the actual package. Assume that we're in the root of the papermill plugin project.\nfrom tests.testdata.datatype import X\n\nh = h + \" world!\"\nx = X(x=n)\n```\n\n----------------------------------------\n\nTITLE: Loading Sample Data with DBT Seed\nDESCRIPTION: Command to load CSV data into the target schema using DBT's seed functionality.\nSOURCE: https://github.com/flyteorg/flytekit/blob/master/plugins/flytekit-dbt/tests/testdata/jaffle_shop/README.md#2025-04-16_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n$ dbt seed\n```\n\n----------------------------------------\n\nTITLE: Installing Flytekit PyTorch Plugin\nDESCRIPTION: Command to install the Flytekit Kubeflow PyTorch plugin using pip package manager.\nSOURCE: https://github.com/flyteorg/flytekit/blob/master/plugins/flytekit-kf-pytorch/README.md#2025-04-16_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\npip install flytekitplugins-kfpytorch\n```\n\n----------------------------------------\n\nTITLE: Configuring Flyte Admin with Proxy Authorization\nDESCRIPTION: YAML configuration for Flyte admin to use proxy authorization with the flyte-iap token generation command.\nSOURCE: https://github.com/flyteorg/flytekit/blob/master/plugins/flytekit-identity-aware-proxy/README.md#2025-04-16_snippet_3\n\nLANGUAGE: yaml\nCODE:\n```\nadmin:\n  endpoint: dns:///<fill in your flyte domain >.com\n  insecure: false\n  insecureSkipVerify: true\n  authType: Pkce\n  proxyCommand: [\"flyte-iap\", \"generate-user-id-token\", \"--desktop_client_id\", ...]  # Add this line\n```\n\n----------------------------------------\n\nTITLE: Listing Recent Flyte Executions\nDESCRIPTION: Demonstrates how to list recent executions from a specific project and domain with a limit on the number of results. This is useful for monitoring and tracking the history of executions.\nSOURCE: https://github.com/flyteorg/flytekit/blob/master/docs/source/design/control_plane.rst#2025-04-16_snippet_17\n\nLANGUAGE: python\nCODE:\n```\nrecent_executions = remote.recent_executions(project=\"flytesnacks\", domain=\"development\", limit=10)\n```\n\n----------------------------------------\n\nTITLE: Decoding JWT Token using jq\nDESCRIPTION: Command to decode a JWT token using jq, splitting and base64 decoding the token parts.\nSOURCE: https://github.com/flyteorg/flytekit/blob/master/plugins/flytekit-identity-aware-proxy/README.md#2025-04-16_snippet_2\n\nLANGUAGE: console\nCODE:\n```\njq -R 'split(\".\") | select(length > 0) | .[0],.[1] | @base64d | fromjson' <<< \"eyJhbG...\"\n```\n\n----------------------------------------\n\nTITLE: Generating DBT Documentation\nDESCRIPTION: Command to generate documentation for the DBT project.\nSOURCE: https://github.com/flyteorg/flytekit/blob/master/plugins/flytekit-dbt/tests/testdata/jaffle_shop/README.md#2025-04-16_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\n$ dbt docs generate\n```\n\n----------------------------------------\n\nTITLE: Installing Flytekit Spark Plugin via pip\nDESCRIPTION: Command to install the Flytekit Spark plugin using pip package manager. This plugin enables native Spark job execution on Kubernetes clusters.\nSOURCE: https://github.com/flyteorg/flytekit/blob/master/plugins/flytekit-spark/README.md#2025-04-16_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\npip install flytekitplugins-spark\n```\n\n----------------------------------------\n\nTITLE: Generating User ID Token with flyte-iap CLI\nDESCRIPTION: Command to generate a user ID token using the flyte-iap CLI tool, specifying client IDs and secret information.\nSOURCE: https://github.com/flyteorg/flytekit/blob/master/plugins/flytekit-identity-aware-proxy/README.md#2025-04-16_snippet_1\n\nLANGUAGE: console\nCODE:\n```\nflyte-iap generate-user-id-token \\\n    --desktop_client_id < fill in desktop client id> \\\n    --desktop_client_secret_gcp_secret_name <fill in the secret name > \\\n    --webapp_client_id < fill in the web app client id> \\\n    --project < fill in the gcp project id where the secret was saved >\n```\n\n----------------------------------------\n\nTITLE: Validating Flyte Input Data Content\nDESCRIPTION: Validates the content of the loaded inputs by reading and checking their contents. This includes checking the content of a file, verifying a file inside a directory, and validating a pandas DataFrame from a structured dataset.\nSOURCE: https://github.com/flyteorg/flytekit/blob/master/plugins/flytekit-papermill/tests/testdata/nb-types.ipynb#2025-04-16_snippet_3\n\nLANGUAGE: python\nCODE:\n```\n# read file\nwith open(ff.download(), 'r') as f:\n    text = f.read()\n    assert text == \"abc\", \"Text does not match\"\n\n# check file inside directory\nwith open(os.path.join(fd.download(),\"file.txt\"), 'r') as f:\n    text = f.read()\n    assert text == \"abc\", \"Text does not match\"\n\n# check dataset\ndf = sd.open(pd.DataFrame).all()\nexpected = pd.DataFrame({\"a\": [1, 2], \"b\": [3, 4]})\nassert df.equals(expected), \"Dataframes do not match\"\n```\n\n----------------------------------------\n\nTITLE: Port Forwarding for FlyteInteractive VSCode Server\nDESCRIPTION: Kubernetes command to forward a local port to the FlyteInteractive VSCode server pod.\nSOURCE: https://github.com/flyteorg/flytekit/blob/master/plugins/flytekit-flyteinteractive/README.md#2025-04-16_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\nkubectl port-forward -n [NAMESPACE] [PODNAME] 8080:8080\n```\n\n----------------------------------------\n\nTITLE: Running Flytekit unit tests\nDESCRIPTION: Commands to activate the virtual environment and run the Flytekit unit tests using the make command.\nSOURCE: https://github.com/flyteorg/flytekit/blob/master/docs/source/contributing.rst#2025-04-16_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nsource ~/.virtualenvs/flytekit/bin/activate\nmake test\n```\n\n----------------------------------------\n\nTITLE: Installing Flytekit SQLAlchemy Plugin\nDESCRIPTION: Command to install the Flytekit SQLAlchemy plugin via pip package manager. This plugin enables integration between Flyte and SQLAlchemy, allowing applications to connect to various SQL databases.\nSOURCE: https://github.com/flyteorg/flytekit/blob/master/plugins/flytekit-sqlalchemy/README.md#2025-04-16_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\npip install flytekitplugins-sqlalchemy\n```\n\n----------------------------------------\n\nTITLE: Configuring Flytekit Plugin Setup.py\nDESCRIPTION: Template for setup.py configuration file for Flytekit plugins. Includes package naming, version handling, dependencies, and optional auto-loading configuration.\nSOURCE: https://github.com/flyteorg/flytekit/blob/master/plugins/README.md#2025-04-16_snippet_20\n\nLANGUAGE: python\nCODE:\n```\nfrom setuptools import setup\n\n# TODO put the plugin name here\nPLUGIN_NAME = \"<plugin-name e.g. pandera>\"\n\n# TODO decide if the plugin is regular or `data`\n# for regular plugins\nmicrolib_name = f\"flytekitplugins-{PLUGIN_NAME}\"\n# For data/persistence plugins\n# microlib_name = f\"flytekitplugins-data-{PLUGIN_NAME}\"\n\n# TODO add additional requirements\nplugin_requires = [\"flytekit>=1.1.0b0,<2.0.0, \"<other requirements>\"]\n\n__version__ = \"0.0.0+develop\"\n\nsetup(\n    name=microlib_name,\n    version=__version__,\n    author=\"flyteorg\",\n    author_email=\"admin@flyte.org\",\n    # TODO Edit the description\n    description=\"My awesome plugin.....\",\n    # TODO alter the last part of the following URL\n    url=\"https://github.com/flyteorg/flytekit/tree/master/plugins/flytekit-...\",\n    long_description=open(\"README.md\").read(),\n    long_description_content_type=\"text/markdown\",\n    namespace_packages=[\"flytekitplugins\"],\n    packages=[f\"flytekitplugins.{PLUGIN_NAME}\"],\n    install_requires=plugin_requires,\n    license=\"apache2\",\n    python_requires=\">=3.9\",\n    classifiers=[\n        \"Intended Audience :: Science/Research\",\n        \"Intended Audience :: Developers\",\n        \"License :: OSI Approved :: Apache Software License\",\n        \"Programming Language :: Python :: 3.9\",\n        \"Programming Language :: Python :: 3.10\",\n        \"Topic :: Scientific/Engineering\",\n        \"Topic :: Scientific/Engineering :: Artificial Intelligence\",\n        \"Topic :: Software Development\",\n        \"Topic :: Software Development :: Libraries\",\n        \"Topic :: Software Development :: Libraries :: Python Modules\",\n    ],\n    # TODO OPTIONAL\n    # FOR Plugins where auto-loading on installation is desirable, please uncomment this line and ensure that the\n    # __init__.py has the right modules available to be loaded, or point to the right module\n    # entry_points={\"flytekit.plugins\": [f\"{PLUGIN_NAME}=flytekitplugins.{PLUGIN_NAME}\"]},\n)\n```\n\n----------------------------------------\n\nTITLE: Recording Output with Flytekit Papermill Plugin\nDESCRIPTION: Imports and uses the record_outputs function from the Flytekit Papermill plugin to save the calculated square value with the name 'square'. This allows the output to be tracked and managed within the Flyte workflow system.\nSOURCE: https://github.com/flyteorg/flytekit/blob/master/plugins/flytekit-papermill/tests/testdata/nb-simple.ipynb#2025-04-16_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nfrom flytekitplugins.papermill import record_outputs\nrecord_outputs(square=out)\n```\n\n----------------------------------------\n\nTITLE: Installing Kubeflow PyTorch Plugin for Flytekit\nDESCRIPTION: Command to install the Kubeflow PyTorch plugin for Flytekit using pip. This plugin enables authoring distributed PyTorch jobs in Python using the Kubeflow PyTorch Operator.\nSOURCE: https://github.com/flyteorg/flytekit/blob/master/plugins/README.md#2025-04-16_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\npip install flytekitplugins-kfpytorch\n```\n\n----------------------------------------\n\nTITLE: Defining Order Statuses in Markdown\nDESCRIPTION: This markdown snippet defines a table of order statuses with their descriptions. It covers the entire lifecycle of an order from placement to potential return.\nSOURCE: https://github.com/flyteorg/flytekit/blob/master/plugins/flytekit-dbt/tests/testdata/jaffle_shop/models/docs.md#2025-04-16_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n| status         | description                                                                                                            |\n|----------------|------------------------------------------------------------------------------------------------------------------------|\n| placed         | The order has been placed but has not yet left the warehouse                                                           |\n| shipped        | The order has ben shipped to the customer and is currently in transit                                                  |\n| completed      | The order has been received by the customer                                                                            |\n| return_pending | The customer has indicated that they would like to return the order, but it has not yet been received at the warehouse |\n| returned       | The order has been returned by the customer and received at the warehouse                                              |\n```\n\n----------------------------------------\n\nTITLE: Creating a Dockerfile for MMCloud Connector\nDESCRIPTION: Sample Dockerfile for building a connector image that includes the MMCloud plugin and the required float binary from the OpCenter.\nSOURCE: https://github.com/flyteorg/flytekit/blob/master/plugins/flytekit-mmcloud/README.md#2025-04-16_snippet_2\n\nLANGUAGE: dockerfile\nCODE:\n```\nFROM python:3.11-slim-bookworm\n\nWORKDIR /root\nENV PYTHONPATH /root\n\n# flytekit will autoload the connector if package is installed.\nRUN pip install flytekitplugins-mmcloud\nCOPY float /usr/local/bin/float\n\nCMD pyflyte serve connector --port 8000\n```\n\n----------------------------------------\n\nTITLE: Installing Flytekit MLflow Plugin using pip\nDESCRIPTION: Command to install the Flytekit MLflow plugin using pip package manager.\nSOURCE: https://github.com/flyteorg/flytekit/blob/master/plugins/flytekit-mlflow/README.md#2025-04-16_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\npip install flytekitplugins-mlflow\n```\n\n----------------------------------------\n\nTITLE: Defining Flyte Task with Image Specification\nDESCRIPTION: Example of defining a Flyte task with image specification using the Envd plugin. This snippet is commented out and shows how to specify packages and apt packages for the task's container image.\nSOURCE: https://github.com/flyteorg/flytekit/blob/master/plugins/flytekit-envd/README.md#2025-04-16_snippet_1\n\nLANGUAGE: python\nCODE:\n```\n# from flytekit import task\n# from flytekit.image_spec import ImageSpec\n#\n# @task(image_spec=ImageSpec(packages=[\"pandas\", \"numpy\"], apt_packages=[\"git\"], registry=\"flyteorg\"))\n# def t1() -> str:\n#     return \"hello\"\n```\n\n----------------------------------------\n\nTITLE: Using pyflyte register command in Bash\nDESCRIPTION: Example of registering workflows using the pyflyte register command. This command registers all workflows in a repository with specific container images and data prefix configurations.\nSOURCE: https://github.com/flyteorg/flytekit/blob/master/docs/source/design/clis.rst#2025-04-16_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\npyflyte register --image ghcr.io/flyteorg/flytecookbook:core-latest --image trainer=ghcr.io/flyteorg/flytecookbook:core-latest --image predictor=ghcr.io/flyteorg/flytecookbook:core-latest --raw-data-prefix s3://development-service-flyte/reltsts flyte_basics\n```\n\n----------------------------------------\n\nTITLE: Installing Great Expectations Plugin for Flytekit\nDESCRIPTION: Command to install the Great Expectations plugin for Flytekit using pip. This plugin enables enforcing data quality for various data types within Flyte.\nSOURCE: https://github.com/flyteorg/flytekit/blob/master/plugins/README.md#2025-04-16_snippet_13\n\nLANGUAGE: bash\nCODE:\n```\npip install flytekitplugins-great-expectations\n```\n\n----------------------------------------\n\nTITLE: Installing Flytekit BigQuery Plugin with pip\nDESCRIPTION: Command to install the Flytekit BigQuery plugin package using pip. This enables integration between Flyte and Google BigQuery service for querying BigQuery tables.\nSOURCE: https://github.com/flyteorg/flytekit/blob/master/plugins/flytekit-bigquery/README.md#2025-04-16_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\npip install flytekitplugins-bigquery\n```\n\n----------------------------------------\n\nTITLE: Installing OpenAI Plugins for Flytekit\nDESCRIPTION: Command to install the OpenAI plugins for Flytekit using pip.\nSOURCE: https://github.com/flyteorg/flytekit/blob/master/plugins/flytekit-openai/README.md#2025-04-16_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\npip install flytekitplugins-openai\n```\n\n----------------------------------------\n\nTITLE: Recording DataFrame Outputs with Papermill\nDESCRIPTION: Uses Flytekit's Papermill plugin to record the DataFrame outputs for further processing or analysis\nSOURCE: https://github.com/flyteorg/flytekit/blob/master/plugins/flytekit-papermill/tests/testdata/nb-spark.ipynb#2025-04-16_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nfrom flytekitplugins.papermill import record_outputs\n\nrecord_outputs(df=new_df)\n```\n\n----------------------------------------\n\nTITLE: Configuring Flyte to Link with Comet.ml\nDESCRIPTION: YAML configuration for enabling links from Flyte's side panel to Comet.ml. This configuration sets up dynamic log links with templated URIs to connect Flyte executions with their corresponding Comet experiments.\nSOURCE: https://github.com/flyteorg/flytekit/blob/master/plugins/flytekit-comet-ml/README.md#2025-04-16_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\nplugins:\n  logs:\n    dynamic-log-links:\n      - comet-ml-execution-id:\n          displayName: Comet\n          templateUris: \"{{ .taskConfig.host }}/{{ .taskConfig.workspace }}/{{ .taskConfig.project_name }}/{{ .executionName }}{{ .nodeId }}{{ .taskRetryAttempt }}{{ .taskConfig.link_suffix }}\"\n      - comet-ml-custom-id:\n          displayName: Comet\n          templateUris: \"{{ .taskConfig.host }}/{{ .taskConfig.workspace }}/{{ .taskConfig.project_name }}/{{ .taskConfig.experiment_key }}\"\n```\n\n----------------------------------------\n\nTITLE: Installing AWS Athena Plugin for Flytekit\nDESCRIPTION: Command to install the AWS Athena plugin for Flytekit using pip. This plugin enables authoring queries executed on AWS Athena.\nSOURCE: https://github.com/flyteorg/flytekit/blob/master/plugins/README.md#2025-04-16_snippet_9\n\nLANGUAGE: bash\nCODE:\n```\npip install flytekitplugins-athena\n```\n\n----------------------------------------\n\nTITLE: Installing Flyte Inference Plugins with pip\nDESCRIPTION: Command to install the Flyte inference plugins package using pip. This is required before using any of the inference providers in your Flyte tasks.\nSOURCE: https://github.com/flyteorg/flytekit/blob/master/plugins/flytekit-inference/README.md#2025-04-16_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\npip install flytekitplugins-inference\n```\n\n----------------------------------------\n\nTITLE: Installing Flytekit Kubernetes Pod Plugin with pip\nDESCRIPTION: Command to install the Flytekit Kubernetes Pod Plugin using pip package manager. This plugin allows users to run tasks with multiple containers in a Kubernetes pod.\nSOURCE: https://github.com/flyteorg/flytekit/blob/master/plugins/flytekit-k8s-pod/README.md#2025-04-16_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\npip install flytekitplugins-pod\n```\n\n----------------------------------------\n\nTITLE: Configuring Istio Gateway Service with GCP Annotations\nDESCRIPTION: YAML configuration for Istio gateway service settings, including GCP-specific annotations for backend configuration and HTTP2 protocol support. Sets service type to NodePort to ensure traffic flows through the GCP load balancer with IAP authentication.\nSOURCE: https://github.com/flyteorg/flytekit/blob/master/plugins/flytekit-identity-aware-proxy/README.md#2025-04-16_snippet_5\n\nLANGUAGE: yaml\nCODE:\n```\nservice:\n  annotations:\n    beta.cloud.google.com/backend-config: '{\"default\": \"ingress-backend-config\"}'\n    cloud.google.com/app-protocols: '{\"https\": \"HTTP2\"}'\n  type:\n    NodePort\n```\n\n----------------------------------------\n\nTITLE: Installing Pod Tasks Plugin for Flytekit\nDESCRIPTION: Command to install the Pod Tasks plugin for Flytekit using pip. This plugin enables authoring Pods in Python, which can have multiple containers, use volumes, and have non-exiting side-cars.\nSOURCE: https://github.com/flyteorg/flytekit/blob/master/plugins/README.md#2025-04-16_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\npip install flytekitplugins-pod\n```\n\n----------------------------------------\n\nTITLE: Installing Flytekit ONNX ScikitLearn Plugin with pip\nDESCRIPTION: Command to install the Flytekit ONNX ScikitLearn Plugin using pip package manager. This plugin enables the conversion of ScikitLearn models to ONNX format for use with Flytekit workflows.\nSOURCE: https://github.com/flyteorg/flytekit/blob/master/plugins/flytekit-onnx-scikitlearn/README.md#2025-04-16_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\npip install flytekitplugins-onnxscikitlearn\n```\n\n----------------------------------------\n\nTITLE: Installing Flytekit Great Expectations Plugin with pip\nDESCRIPTION: Command to install the Flytekit Great Expectations plugin using pip package manager.\nSOURCE: https://github.com/flyteorg/flytekit/blob/master/plugins/flytekit-greatexpectations/README.md#2025-04-16_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\npip install flytekitplugins-great-expectations\n```\n\n----------------------------------------\n\nTITLE: Defining E-commerce Database Tables and Relationships with SQL\nDESCRIPTION: Creates a complete database schema for an e-commerce system with orders, payments, and customers tables including primary keys and foreign key relationships. The schema establishes relationships where orders reference customers and payments reference orders.\nSOURCE: https://github.com/flyteorg/flytekit/blob/master/plugins/flytekit-dbt/tests/testdata/jaffle_shop/etc/dbdiagram_definition.txt#2025-04-16_snippet_0\n\nLANGUAGE: sql\nCODE:\n```\nTable orders {\n  id int PK\n  user_id int\n  order_date date\n  status varchar\n}\n\nTable payments {\n  id int\n  order_id int\n  payment_method int\n  amount int\n}\n\nTable customers {\n  id int PK\n  first_name varchar\n  last_name varchar\n}\n\nRef: orders.user_id > customers.id\n\nRef: payments.order_id > orders.id\n```\n\n----------------------------------------\n\nTITLE: Configuring VirtualService for Flyte Admin and Console in YAML\nDESCRIPTION: YAML configuration for a VirtualService object that sets up routing rules for flyteadmin and flyteconsole. It defines routes for various URI prefixes and specifies destination hosts and ports.\nSOURCE: https://github.com/flyteorg/flytekit/blob/master/plugins/flytekit-identity-aware-proxy/README.md#2025-04-16_snippet_13\n\nLANGUAGE: yaml\nCODE:\n```\nprefix: /config\n        - uri:\n            prefix: /oauth2\n        name: admin-routes\n        route:\n        - destination:\n            host: flyteadmin\n            port:\n              number: 80\n      - match:\n        - uri:\n            prefix: /flyteidl.service.SignalService\n        - uri:\n            prefix: /flyteidl.service.AdminService\n        - uri:\n            prefix: /flyteidl.service.DataProxyService\n        - uri:\n            prefix: /flyteidl.service.AuthMetadataService\n        - uri:\n            prefix: /flyteidl.service.IdentityService\n        - uri:\n            prefix: /grpc.health.v1.Health\n        name: admin-grpc-routes\n        route:\n        - destination:\n            host: flyteadmin\n            port:\n              number: 81\n```\n\n----------------------------------------\n\nTITLE: Installing Papermill Plugin for Flytekit\nDESCRIPTION: Command to install the Papermill plugin for Flytekit using pip. This plugin allows executing entire notebooks as Flyte Tasks and passing inputs and outputs between them and Python tasks.\nSOURCE: https://github.com/flyteorg/flytekit/blob/master/plugins/README.md#2025-04-16_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\npip install flytekitplugins-papermill\n```\n\n----------------------------------------\n\nTITLE: Installing Hive Queries Plugin for Flytekit\nDESCRIPTION: Command to install the Hive Queries plugin for Flytekit using pip. This plugin allows authoring Hive Queries that can be executed on a configured Hive backend using the Flyte backend plugin.\nSOURCE: https://github.com/flyteorg/flytekit/blob/master/plugins/README.md#2025-04-16_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\npip install flytekitplugins-hive\n```\n\n----------------------------------------\n\nTITLE: Auto-loading Flytekit Plugin Configuration\nDESCRIPTION: Example of entry_points configuration in setup.py for auto-loading plugin modules on installation, commonly used for data-plugins and type-plugins.\nSOURCE: https://github.com/flyteorg/flytekit/blob/master/plugins/README.md#2025-04-16_snippet_21\n\nLANGUAGE: python\nCODE:\n```\nsetup(\n    entry_points={\"flytekit.plugins\": [f\"{PLUGIN_NAME}=flytekitplugins.{PLUGIN_NAME}\"]},\n)\n```\n\n----------------------------------------\n\nTITLE: Installing Flytekit Hugging Face Plugin via pip\nDESCRIPTION: Command to install the Flytekit Hugging Face plugin using pip package manager. This installation enables support for Hugging Face datasets.Dataset type with Flyte's StructuredDataset.\nSOURCE: https://github.com/flyteorg/flytekit/blob/master/plugins/flytekit-huggingface/README.md#2025-04-16_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\npip install flytekitplugins-huggingface\n```\n\n----------------------------------------\n\nTITLE: Installing Flytekit with pip\nDESCRIPTION: Command to install the Flytekit Python SDK using pip package manager.\nSOURCE: https://github.com/flyteorg/flytekit/blob/master/README.md#2025-04-16_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\npip install flytekit\n```\n\n----------------------------------------\n\nTITLE: Installing Dask Plugin for Flytekit\nDESCRIPTION: Command to install the Dask plugin for Flytekit using pip. This plugin enables authoring Dask jobs that can be executed natively on Kubernetes using the Flyte backend plugin.\nSOURCE: https://github.com/flyteorg/flytekit/blob/master/plugins/README.md#2025-04-16_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\npip install flytekitplugins-dask\n```\n\n----------------------------------------\n\nTITLE: Installing AWS SageMaker Plugin for Flytekit\nDESCRIPTION: Command to install the AWS SageMaker plugin for Flytekit using pip. This plugin allows deploying SageMaker models and managing inference endpoints.\nSOURCE: https://github.com/flyteorg/flytekit/blob/master/plugins/README.md#2025-04-16_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\npip install flytekitplugins-awssagemaker\n```\n\n----------------------------------------\n\nTITLE: Installing specific Flytekit version for testing\nDESCRIPTION: Commands to install a specific version of Flytekit or a plugin from a GitHub commit for testing purposes. This is useful for cookbook testing with custom Flytekit versions.\nSOURCE: https://github.com/flyteorg/flytekit/blob/master/docs/source/contributing.rst#2025-04-16_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\npip install https://github.com/flyteorg/flytekit/archive/a32ab82bef4d9ff53c2b7b4e69ff11f1e93858ea.zip#egg=flytekit\n# Or for a plugin\npip install https://github.com/flyteorg/flytekit/archive/e128f66dda48bbfc6076d240d39e4221d6af2d2b.zip#subdirectory=plugins/pod&egg=flytekitplugins-pod\n```\n\n----------------------------------------\n\nTITLE: Configuring OmegaConf Transformer Mode in Flytekit\nDESCRIPTION: Shows how to configure the OmegaConf transformer mode in Flytekit, which controls how DictConfig objects are serialized and deserialized. The example demonstrates both global and context-local configuration of transformer modes.\nSOURCE: https://github.com/flyteorg/flytekit/blob/master/plugins/flytekit-omegaconf/README.md#2025-04-16_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nfrom flytekitplugins.omegaconf import set_transformer_mode, set_local_transformer_mode, OmegaConfTransformerMode\n\n# Set the global transformer mode using the new function\nset_transformer_mode(OmegaConfTransformerMode.DictConfig)\n\n# You can also the mode for the current context only\nwith set_local_transformer_mode(OmegaConfTransformerMode.Dataclass):\n    # This will use the Dataclass mode\n    pass\n```\n\n----------------------------------------\n\nTITLE: Installing Flytekit DuckDB Plugin via pip\nDESCRIPTION: Command to install the Flytekit DuckDB plugin using pip package manager. This enables DuckDB analytical workload capabilities in Flytekit workflows.\nSOURCE: https://github.com/flyteorg/flytekit/blob/master/plugins/flytekit-duckdb/README.md#2025-04-16_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\npip install flytekitplugins-duckdb\n```\n\n----------------------------------------\n\nTITLE: Installing Flytekit with pip\nDESCRIPTION: Command to install the Flytekit Python SDK using pip package manager.\nSOURCE: https://github.com/flyteorg/flytekit/blob/master/docs/source/index.rst#2025-04-16_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\npip install flytekit\n```\n\n----------------------------------------\n\nTITLE: Installing Flytekit Async fsspec Plugin via pip\nDESCRIPTION: This command installs the Flytekit Async fsspec Plugin using pip. Once installed, the plugin automatically overrides the original file system and registers optimized ones for seamless integration with Flyte workflows.\nSOURCE: https://github.com/flyteorg/flytekit/blob/master/plugins/flytekit-async-fsspec/README.md#2025-04-16_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\npip install flytekitplugins-async-fsspec\n```\n\n----------------------------------------\n\nTITLE: Installing Flytekit Papermill Plugin with pip\nDESCRIPTION: Command to install the Flytekit Papermill plugin using pip package manager. This plugin allows Jupyter notebooks to be executed as Flyte tasks through Papermill.\nSOURCE: https://github.com/flyteorg/flytekit/blob/master/plugins/flytekit-papermill/README.md#2025-04-16_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\npip install flytekitplugins-papermill\n```\n\n----------------------------------------\n\nTITLE: Installing Flytekit Airflow Plugin\nDESCRIPTION: Command to install the Flytekit Airflow plugin using pip. This plugin enables the integration of Airflow tasks into Flyte workflows.\nSOURCE: https://github.com/flyteorg/flytekit/blob/master/plugins/flytekit-airflow/README.md#2025-04-16_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\npip install flytekitplugins-airflow\n```\n\n----------------------------------------\n\nTITLE: Installing FlyteInteractive Plugin with pip\nDESCRIPTION: Command to install the FlyteInteractive plugin using pip package manager.\nSOURCE: https://github.com/flyteorg/flytekit/blob/master/plugins/flytekit-flyteinteractive/README.md#2025-04-16_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\npip install flytekitplugins-flyteinteractive\n```\n\n----------------------------------------\n\nTITLE: Running Flytekit code formatters\nDESCRIPTION: Commands to activate the virtual environment and run the code formatters using the make command. This uses ruff to autoformat the code.\nSOURCE: https://github.com/flyteorg/flytekit/blob/master/docs/source/contributing.rst#2025-04-16_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\nsource ~/.virtualenvs/flytekit/bin/activate\nmake fmt\n```\n\n----------------------------------------\n\nTITLE: Installing Flytekit AWS Batch Plugin using pip\nDESCRIPTION: Command to install the Flytekit AWS Batch plugin via pip package manager, which allows Flyte tasks to run on AWS Batch service.\nSOURCE: https://github.com/flyteorg/flytekit/blob/master/plugins/flytekit-aws-batch/README.md#2025-04-16_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\npip install flytekitplugins-awsbatch\n```\n\n----------------------------------------\n\nTITLE: Installing Flytekit Ray Plugin with pip\nDESCRIPTION: Command to install the Flytekit Ray plugin using pip. This package enables integration between Flyte and Ray, allowing Flyte tasks to be executed on a Ray cluster.\nSOURCE: https://github.com/flyteorg/flytekit/blob/master/plugins/flytekit-ray/README.md#2025-04-16_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\npip install flytekitplugins-ray\n```\n\n----------------------------------------\n\nTITLE: Installing Flytekit W&B Plugin\nDESCRIPTION: Command to install the Flytekit Weights and Biases plugin via pip\nSOURCE: https://github.com/flyteorg/flytekit/blob/master/plugins/flytekit-wandb/README.md#2025-04-16_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\npip install flytekitplugins-wandb\n```\n\n----------------------------------------\n\nTITLE: Installing Flytekit Comet Plugin via pip\nDESCRIPTION: Command to install the Flytekit Comet ML plugin using pip package manager.\nSOURCE: https://github.com/flyteorg/flytekit/blob/master/plugins/flytekit-comet-ml/README.md#2025-04-16_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\npip install flytekitplugins-comet-ml\n```\n\n----------------------------------------\n\nTITLE: Setting up Flytekit plugin development\nDESCRIPTION: Commands to activate the virtual environment, navigate to the plugins directory, and install all plugins in editable mode. This is necessary for developing Flytekit plugins.\nSOURCE: https://github.com/flyteorg/flytekit/blob/master/docs/source/contributing.rst#2025-04-16_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nsource ~/.virtualenvs/flytekit/bin/activate\ncd plugins\npip install -e .\n```\n\n----------------------------------------\n\nTITLE: Installing the Flytekit MMCloud Plugin\nDESCRIPTION: Command to install the Flytekit plugin for MemVerge Memory Machine Cloud integration via pip.\nSOURCE: https://github.com/flyteorg/flytekit/blob/master/plugins/flytekit-mmcloud/README.md#2025-04-16_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\npip install flytekitplugins-mmcloud\n```\n\n----------------------------------------\n\nTITLE: Installing Flytekit whylogs Plugin with pip\nDESCRIPTION: Command to install the Flytekit whylogs plugin via pip. This is required before using whylogs functionality in Flytekit tasks.\nSOURCE: https://github.com/flyteorg/flytekit/blob/master/plugins/flytekit-whylogs/README.md#2025-04-16_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\npip install flytekitplugins-whylogs\n```\n\n----------------------------------------\n\nTITLE: Creating Flytekit Plugin Directory Structure\nDESCRIPTION: Standard directory structure for a Flytekit plugin project, showing the required folders and files. Note that the flytekitplugins directory should not contain an __init__.py file.\nSOURCE: https://github.com/flyteorg/flytekit/blob/master/plugins/README.md#2025-04-16_snippet_19\n\nLANGUAGE: text\nCODE:\n```\nflytekit-myplugin/\n   - README.md\n   - setup.py\n   - flytekitplugins/\n       - myplugin/\n          - __init__.py\n   - tests\n       - __init__.py\n```\n\n----------------------------------------\n\nTITLE: Installing Flytekit Modin Plugin via pip\nDESCRIPTION: Command to install the Flytekit Modin Plugin using pip package manager. This plugin enables Modin as a data type in Flytekit.\nSOURCE: https://github.com/flyteorg/flytekit/blob/master/plugins/flytekit-modin/README.md#2025-04-16_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\npip install flytekitplugins-modin\n```\n\n----------------------------------------\n\nTITLE: Installing Flytekit dbt Plugin with pip\nDESCRIPTION: Command to install the Flytekit dbt plugin using pip package manager. This allows users to integrate dbt tasks into their Flyte workflows.\nSOURCE: https://github.com/flyteorg/flytekit/blob/master/plugins/flytekit-dbt/README.md#2025-04-16_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\npip install flytekitplugins-dbt\n```\n\n----------------------------------------\n\nTITLE: Installing Flytekit Dolt Plugin and Dolt CLI\nDESCRIPTION: Commands to install the Flytekit Dolt Plugin via pip and the Dolt command-line tool via the official installation script. These are required to use Dolt functionality within Flytekit workflows.\nSOURCE: https://github.com/flyteorg/flytekit/blob/master/plugins/flytekit-dolt/README.md#2025-04-16_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\npip install flytekitplugins.dolt\nsudo bash -c 'curl -L https://github.com/dolthub/dolt/releases/latest/download/install.sh | sudo bash'\n```\n\n----------------------------------------\n\nTITLE: Installing Flytekit Snowflake Plugin via pip\nDESCRIPTION: Command to install the Flytekit Snowflake plugin using pip package manager\nSOURCE: https://github.com/flyteorg/flytekit/blob/master/plugins/flytekit-snowflake/README.md#2025-04-16_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\npip install flytekitplugins-snowflake\n```\n\n----------------------------------------\n\nTITLE: Installing OpenAI Plugin for Flytekit\nDESCRIPTION: Command to install the OpenAI plugin for Flytekit using pip. This plugin allows interaction with OpenAI's ChatGPT and submission of requests for asynchronous batch processing.\nSOURCE: https://github.com/flyteorg/flytekit/blob/master/plugins/README.md#2025-04-16_snippet_18\n\nLANGUAGE: bash\nCODE:\n```\npip install flytekitplugins-openai\n```\n\n----------------------------------------\n\nTITLE: Installing Flytekit Deck Plugin\nDESCRIPTION: Command to install the Flytekit Deck Plugin using pip package manager. This installs the standard deck renderers package.\nSOURCE: https://github.com/flyteorg/flytekit/blob/master/plugins/flytekit-deck-standard/README.md#2025-04-16_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\npip install flytekitplugins-deck-standard\n```\n\n----------------------------------------\n\nTITLE: Installing Flytekit Hive Plugin with pip\nDESCRIPTION: Command to install the Flytekit Hive plugin using pip package manager. This plugin enables connectivity with Hive services and allows for querying with typed schema retrieval.\nSOURCE: https://github.com/flyteorg/flytekit/blob/master/plugins/flytekit-hive/README.md#2025-04-16_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\npip install flytekitplugins-hive\n```\n\n----------------------------------------\n\nTITLE: Installing Flytekit Neptune Plugin\nDESCRIPTION: Command to install the Flytekit plugin for Neptune integration via pip package manager.\nSOURCE: https://github.com/flyteorg/flytekit/blob/master/plugins/flytekit-neptune/README.md#2025-04-16_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\npip install flytekitplugins-neptune\n```\n\n----------------------------------------\n\nTITLE: Pip-compile Command for Generating Development Requirements\nDESCRIPTION: The command used to generate this pip-compiled requirements file for Flytekit development dependencies. It uses pip-compile to process the dev-requirements.in file with Python 3.12.\nSOURCE: https://github.com/flyteorg/flytekit/blob/master/dev-requirements.txt#2025-04-16_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\npip-compile dev-requirements.in\n```\n\n----------------------------------------\n\nTITLE: Installing Kubeflow MPI Plugin for Flytekit\nDESCRIPTION: Command to install the Kubeflow MPI plugin for Flytekit using pip. This plugin enables authoring distributed MPI jobs in Python using the Kubeflow MPI Operator.\nSOURCE: https://github.com/flyteorg/flytekit/blob/master/plugins/README.md#2025-04-16_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\npip install flytekitplugins-kfmpi\n```\n\n----------------------------------------\n\nTITLE: Installing Flytekit Kubeflow TensorFlow Plugin\nDESCRIPTION: Command to install the Flytekit Kubeflow TensorFlow plugin via pip.\nSOURCE: https://github.com/flyteorg/flytekit/blob/master/plugins/flytekit-kf-tensorflow/README.md#2025-04-16_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\npip install flytekitplugins-kftensorflow\n```\n\n----------------------------------------\n\nTITLE: Installing Flytekit Pandera Plugin using pip\nDESCRIPTION: Command to install the Flytekit Pandera plugin using pip package manager. This package enables integration between Flytekit and Pandera for DataFrame schema validation.\nSOURCE: https://github.com/flyteorg/flytekit/blob/master/plugins/flytekit-pandera/README.md#2025-04-16_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\npip install flytekitplugins-pandera\n```\n\n----------------------------------------\n\nTITLE: Installing Flytekit GeoPandas Plugin\nDESCRIPTION: Command to install the Flytekit GeoPandas plugin using pip. This plugin enables support for GeoPandas GeoDataFrame as a data type with StructuredDataset in Flyte workflows.\nSOURCE: https://github.com/flyteorg/flytekit/blob/master/plugins/flytekit-geopandas/README.md#2025-04-16_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\npip install flytekitplugins-geopandas\n```\n\n----------------------------------------\n\nTITLE: Installing Flytekit Polars Plugin\nDESCRIPTION: Command to install the Flytekit Polars plugin using pip. This plugin enables support for polars.DataFrame as a data type with StructuredDataset in Flyte workflows.\nSOURCE: https://github.com/flyteorg/flytekit/blob/master/plugins/flytekit-polars/README.md#2025-04-16_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\npip install flytekitplugins-polars\n```\n\n----------------------------------------\n\nTITLE: Installing Kubeflow TensorFlow Plugin for Flytekit\nDESCRIPTION: Command to install the Kubeflow TensorFlow plugin for Flytekit using pip. This plugin allows authoring distributed TensorFlow jobs in Python using the Kubeflow TensorFlow Operator.\nSOURCE: https://github.com/flyteorg/flytekit/blob/master/plugins/README.md#2025-04-16_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\npip install flytekitplugins-kftensorflow\n```\n\n----------------------------------------\n\nTITLE: Installing Flytekit IAP Plugin via pip\nDESCRIPTION: Command to install the Flytekit Identity Aware Proxy plugin using pip package manager.\nSOURCE: https://github.com/flyteorg/flytekit/blob/master/plugins/flytekit-identity-aware-proxy/README.md#2025-04-16_snippet_0\n\nLANGUAGE: console\nCODE:\n```\npip install flytekitplugins-identity-aware-proxy\n```\n\n----------------------------------------\n\nTITLE: Installing Flytekit Vaex Plugin\nDESCRIPTION: Command to install the Flytekit Vaex plugin using pip package manager. This plugin enables support for vaex.DataFrame as a data type with Flyte's StructuredDataset.\nSOURCE: https://github.com/flyteorg/flytekit/blob/master/plugins/flytekit-vaex/README.md#2025-04-16_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\npip install flytekitplugins-vaex\n```\n\n----------------------------------------\n\nTITLE: Installing Flytekit ONNX PyTorch Plugin\nDESCRIPTION: Command to install the Flytekit ONNX PyTorch plugin using pip. This plugin enables conversion of PyTorch models to the ONNX format.\nSOURCE: https://github.com/flyteorg/flytekit/blob/master/plugins/flytekit-onnx-pytorch/README.md#2025-04-16_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\npip install flytekitplugins-onnxpytorch\n```\n\n----------------------------------------\n\nTITLE: Listing Python Package Dependencies for Flytekit\nDESCRIPTION: This snippet provides a comprehensive list of Python package dependencies for the Flytekit project. It includes package names, versions, and the hierarchy of dependencies, showing which packages are required by others.\nSOURCE: https://github.com/flyteorg/flytekit/blob/master/plugins/flytekit-airflow/dev-requirements.txt#2025-04-16_snippet_0\n\nLANGUAGE: plain text\nCODE:\n```\n#    uv pip compile dev-requirements.in\naiofiles==23.2.1\n    # via gcloud-aio-storage\naiohappyeyeballs==2.4.3\n    # via aiohttp\naiohttp==3.10.10\n    # via\n    #   apache-airflow-providers-http\n    #   gcloud-aio-auth\n    #   gcsfs\naiosignal==1.3.1\n    # via aiohttp\nalembic==1.13.3\n    # via\n    #   apache-airflow\n    #   sqlalchemy-spanner\nannotated-types==0.7.0\n    # via pydantic\nanyio==4.6.0\n    # via httpx\napache-airflow[google]==2.10.3\n    # via\n    #   -r dev-requirements.in\n    #   apache-airflow-providers-apache-beam\n    #   apache-airflow-providers-common-compat\n    #   apache-airflow-providers-common-io\n    #   apache-airflow-providers-common-sql\n    #   apache-airflow-providers-fab\n    #   apache-airflow-providers-ftp\n    #   apache-airflow-providers-google\n    #   apache-airflow-providers-http\n    #   apache-airflow-providers-imap\n    #   apache-airflow-providers-smtp\n    #   apache-airflow-providers-sqlite\napache-airflow-providers-apache-beam[google]==5.8.0\n    # via -r dev-requirements.in\napache-airflow-providers-common-compat==1.2.0\n    # via\n    #   apache-airflow\n    #   apache-airflow-providers-google\napache-airflow-providers-common-io==1.4.1\n    # via apache-airflow\napache-airflow-providers-common-sql==1.25.0rc1\n    # via\n    #   apache-airflow\n    #   apache-airflow-providers-google\n    #   apache-airflow-providers-sqlite\napache-airflow-providers-fab==1.4.0\n    # via apache-airflow\napache-airflow-providers-ftp==3.11.1\n    # via apache-airflow\napache-airflow-providers-google==10.23.0\n    # via\n    #   apache-airflow\n    #   apache-airflow-providers-apache-beam\napache-airflow-providers-http==4.13.1\n    # via apache-airflow\napache-airflow-providers-imap==3.7.0\n    # via apache-airflow\napache-airflow-providers-smtp==1.8.0\n    # via apache-airflow\napache-airflow-providers-sqlite==3.9.0\n    # via apache-airflow\napache-beam[gcp]==2.59.0\n    # via apache-airflow-providers-apache-beam\napispec[yaml]==6.6.1\n    # via flask-appbuilder\nargcomplete==3.5.1\n    # via apache-airflow\nasgiref==3.8.1\n    # via\n    #   apache-airflow\n    #   apache-airflow-providers-google\n    #   apache-airflow-providers-http\nasync-timeout==4.0.3\n    # via\n    #   aiohttp\n    #   redis\nattrs==24.2.0\n    # via\n    #   aiohttp\n    #   apache-airflow\n    #   cattrs\n    #   jsonschema\n    #   looker-sdk\n    #   referencing\nbabel==2.16.0\n    # via flask-babel\nbackoff==2.2.1\n    # via\n    #   gcloud-aio-auth\n    #   opentelemetry-exporter-otlp-proto-grpc\n    #   opentelemetry-exporter-otlp-proto-http\nblinker==1.8.2\n    # via apache-airflow\ncachelib==0.9.0\n    # via\n    #   flask-caching\n    #   flask-session\ncachetools==5.5.0\n    # via\n    #   apache-beam\n    #   google-auth\ncattrs==24.1.2\n    # via looker-sdk\ncertifi==2024.8.30\n    # via\n    #   httpcore\n    #   httpx\n    #   requests\ncffi==1.17.1\n    # via cryptography\nchardet==5.2.0\n    # via gcloud-aio-auth\ncharset-normalizer==3.4.0\n    # via requests\nclick==8.1.7\n    # via\n    #   clickclick\n    #   flask\n    #   flask-appbuilder\nclickclick==20.10.2\n    # via connexion\ncloudpickle==2.2.1\n    # via apache-beam\ncolorama==0.4.6\n    # via flask-appbuilder\ncolorlog==6.8.2\n    # via apache-airflow\nconfigupdater==3.2\n    # via apache-airflow\nconnexion[flask]==2.14.2\n    # via apache-airflow\ncrcmod==1.7\n    # via apache-beam\ncron-descriptor==1.4.5\n    # via apache-airflow\ncroniter==3.0.3\n    # via apache-airflow\ncryptography==43.0.1\n    # via\n    #   apache-airflow\n    #   gcloud-aio-auth\n    #   pyopenssl\ndb-dtypes==1.3.0\n    # via pandas-gbq\ndecorator==5.1.1\n    # via gcsfs\ndeprecated==1.2.14\n    # via\n    #   apache-airflow\n    #   limits\n    #   opentelemetry-api\ndill==0.3.1.1\n    # via\n    #   apache-airflow\n    #   apache-airflow-providers-google\n    #   apache-beam\ndnspython==2.7.0\n    # via\n    #   email-validator\n    #   pymongo\ndocopt==0.6.2\n    # via hdfs\ndocstring-parser==0.16\n    # via google-cloud-aiplatform\ndocutils==0.21.2\n    # via python-daemon\nemail-validator==2.2.0\n    # via flask-appbuilder\nexceptiongroup==1.2.2\n    # via\n    #   anyio\n    #   cattrs\nfastavro==1.9.7\n    # via apache-beam\nfasteners==0.19\n    # via\n    #   apache-beam\n    #   google-apitools\nflask==2.2.5\n    # via\n    #   apache-airflow\n    #   apache-airflow-providers-fab\n    #   connexion\n    #   flask-appbuilder\n    #   flask-babel\n    #   flask-caching\n    #   flask-jwt-extended\n    #   flask-limiter\n    #   flask-login\n    #   flask-session\n    #   flask-sqlalchemy\n    #   flask-wtf\nflask-appbuilder==4.5.0\n    # via apache-airflow-providers-fab\nflask-babel==2.0.0\n    # via flask-appbuilder\nflask-caching==2.3.0\n    # via apache-airflow\nflask-jwt-extended==4.6.0\n    # via flask-appbuilder\nflask-limiter==3.8.0\n    # via flask-appbuilder\nflask-login==0.6.3\n    # via\n    #   apache-airflow-providers-fab\n    #   flask-appbuilder\nflask-session==0.5.0\n    # via apache-airflow\nflask-sqlalchemy==2.5.1\n    # via flask-appbuilder\nflask-wtf==1.2.1\n    # via\n    #   apache-airflow\n    #   flask-appbuilder\nfrozenlist==1.4.1\n    # via\n    #   aiohttp\n    #   aiosignal\nfsspec==2024.9.0\n    # via\n    #   apache-airflow\n    #   gcsfs\n    #   universal-pathlib\ngcloud-aio-auth==5.3.2\n    # via\n    #   apache-airflow-providers-google\n    #   gcloud-aio-bigquery\n    #   gcloud-aio-storage\ngcloud-aio-bigquery==7.1.0\n    # via apache-airflow-providers-google\ngcloud-aio-storage==9.3.0\n    # via apache-airflow-providers-google\ngcsfs==2024.9.0.post1\n    # via apache-airflow-providers-google\ngoogle-ads==25.0.0\n    # via apache-airflow-providers-google\ngoogle-analytics-admin==0.23.0\n    # via apache-airflow-providers-google\ngoogle-api-core[grpc]==2.21.0\n    # via\n    #   apache-airflow-providers-google\n    #   apache-beam\n    #   google-ads\n    #   google-analytics-admin\n    #   google-api-python-client\n    #   google-cloud-aiplatform\n    #   google-cloud-appengine-logging\n    #   google-cloud-automl\n    #   google-cloud-batch\n    #   google-cloud-bigquery\n    #   google-cloud-bigquery-datatransfer\n    #   google-cloud-bigquery-storage\n    #   google-cloud-bigtable\n    #   google-cloud-build\n    #   google-cloud-compute\n    #   google-cloud-container\n    #   google-cloud-core\n    #   google-cloud-datacatalog\n    #   google-cloud-dataflow-client\n    #   google-cloud-dataform\n    #   google-cloud-dataplex\n    #   google-cloud-dataproc\n    #   google-cloud-dataproc-metastore\n    #   google-cloud-datastore\n    #   google-cloud-dlp\n    #   google-cloud-kms\n    #   google-cloud-language\n    #   google-cloud-logging\n    #   google-cloud-memcache\n    #   google-cloud-monitoring\n    #   google-cloud-orchestration-airflow\n    #   google-cloud-os-login\n    #   google-cloud-pubsub\n    #   google-cloud-pubsublite\n    #   google-cloud-recommendations-ai\n    #   google-cloud-redis\n    #   google-cloud-resource-manager\n    #   google-cloud-run\n    #   google-cloud-secret-manager\n    #   google-cloud-spanner\n    #   google-cloud-speech\n    #   google-cloud-storage\n    #   google-cloud-storage-transfer\n    #   google-cloud-tasks\n    #   google-cloud-texttospeech\n    #   google-cloud-translate\n    #   google-cloud-videointelligence\n    #   google-cloud-vision\n    #   google-cloud-workflows\n    #   pandas-gbq\n    #   sqlalchemy-bigquery\ngoogle-api-python-client==2.149.0\n    # via apache-airflow-providers-google\ngoogle-apitools==0.5.31\n    # via apache-beam\ngoogle-auth==2.35.0\n    # via\n    #   apache-airflow-providers-google\n    #   apache-beam\n    #   gcsfs\n    #   google-analytics-admin\n    #   google-api-core\n    #   google-api-python-client\n    #   google-auth-httplib2\n    #   google-auth-oauthlib\n    #   google-cloud-aiplatform\n    #   google-cloud-appengine-logging\n    #   google-cloud-automl\n    #   google-cloud-batch\n    #   google-cloud-bigquery\n    #   google-cloud-bigquery-datatransfer\n    #   google-cloud-bigquery-storage\n    #   google-cloud-bigtable\n    #   google-cloud-build\n    #   google-cloud-compute\n    #   google-cloud-container\n    #   google-cloud-core\n    #   google-cloud-datacatalog\n    #   google-cloud-dataflow-client\n    #   google-cloud-dataform\n    #   google-cloud-dataplex\n    #   google-cloud-dataproc\n    #   google-cloud-dataproc-metastore\n    #   google-cloud-datastore\n    #   google-cloud-dlp\n    #   google-cloud-kms\n    #   google-cloud-language\n    #   google-cloud-logging\n    #   google-cloud-memcache\n    #   google-cloud-monitoring\n    #   google-cloud-orchestration-airflow\n    #   google-cloud-os-login\n    #   google-cloud-pubsub\n    #   google-cloud-recommendations-ai\n    #   google-cloud-redis\n    #   google-cloud-resource-manager\n    #   google-cloud-run\n    #   google-cloud-secret-manager\n    #   google-cloud-speech\n    #   google-cloud-storage\n    #   google-cloud-storage-transfer\n    #   google-cloud-tasks\n    #   google-cloud-texttospeech\n    #   google-cloud-translate\n    #   google-cloud-videointelligence\n    #   google-cloud-vision\n    #   google-cloud-workflows\n    #   pandas-gbq\n    #   pydata-google-auth\n    #   sqlalchemy-bigquery\ngoogle-auth-httplib2==0.2.0\n    # via\n    #   apache-airflow-providers-google\n    #   apache-beam\n    #   google-api-python-client\ngoogle-auth-oauthlib==1.2.1\n    # via\n    #   gcsfs\n    #   google-ads\n    #   pandas-gbq\n    #   pydata-google-auth\ngoogle-cloud-aiplatform==1.70.0\n    # via\n    #   apache-airflow-providers-google\n    #   apache-beam\ngoogle-cloud-appengine-logging==1.4.5\n    # via google-cloud-logging\ngoogle-cloud-audit-log==0.3.0\n    # via google-cloud-logging\ngoogle-cloud-automl==2.13.5\n    # via apache-airflow-providers-google\ngoogle-cloud-batch==0.17.29\n    # via apache-airflow-providers-google\ngoogle-cloud-bigquery==3.26.0\n    # via\n    #   apache-airflow-providers-google\n    #   apache-beam\n    #   google-cloud-aiplatform\n    #   pandas-gbq\n    #   sqlalchemy-bigquery\ngoogle-cloud-bigquery-datatransfer==3.16.0\n    # via apache-airflow-providers-google\ngoogle-cloud-bigquery-storage==2.26.0\n    # via apache-beam\ngoogle-cloud-bigtable==2.26.0\n```\n\n----------------------------------------\n\nTITLE: Installing Spark Plugin for Flytekit\nDESCRIPTION: Command to install the Spark plugin for Flytekit using pip. This plugin allows authoring Spark jobs that can be executed natively on Kubernetes with a supported backend Flyte plugin.\nSOURCE: https://github.com/flyteorg/flytekit/blob/master/plugins/README.md#2025-04-16_snippet_8\n\nLANGUAGE: bash\nCODE:\n```\npip install flytekitplugins-spark\n```\n\n----------------------------------------\n\nTITLE: Running a FlyteInteractive Task Remotely\nDESCRIPTION: Command to run a FlyteInteractive-decorated task on a remote Flyte cluster.\nSOURCE: https://github.com/flyteorg/flytekit/blob/master/plugins/flytekit-flyteinteractive/README.md#2025-04-16_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\npyflyte run --remote --image localhost:30000/flytekit:dev [PYTHONFILE] [WORKFLOW|TASK] [ARGS]...\n```\n\n----------------------------------------\n\nTITLE: Installing the K8s Stateful Service Plugin with pip\nDESCRIPTION: Simple pip command to install the Flyte Kubernetes Data Service plugin package.\nSOURCE: https://github.com/flyteorg/flytekit/blob/master/plugins/flytekit-k8sdataservice/README.md#2025-04-16_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\npip install flytekitplugins-k8sdataservice\n```\n\n----------------------------------------\n\nTITLE: Installing Flytekit Xarray Zarr Plugin\nDESCRIPTION: Command to install the Flytekit Xarray Zarr plugin using pip package manager.\nSOURCE: https://github.com/flyteorg/flytekit/blob/master/plugins/community/flytekit-xarray-zarr/README.md#2025-04-16_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\npip install flytekitplugins-xarray-zarr\n```\n\n----------------------------------------\n\nTITLE: Configuring Sphinx automodule directive for flytekit\nDESCRIPTION: Sphinx directive that automatically documents the flytekit module while excluding members, inherited members, and special members from the documentation. This configuration provides cleaner API documentation by focusing only on the main module components.\nSOURCE: https://github.com/flyteorg/flytekit/blob/master/docs/source/flytekit.rst#2025-04-16_snippet_0\n\nLANGUAGE: restructuredtext\nCODE:\n```\n.. automodule:: flytekit\n   :no-members:\n   :no-inherited-members:\n   :no-special-members:\n```\n\n----------------------------------------\n\nTITLE: Documentation Issues in Flytekit-KF Plugins\nDESCRIPTION: Documentation issues in RunPolicy, MPIJob, HorovodJob, and PyTorch classes, including missing class attributes and formatting errors.\nSOURCE: https://github.com/flyteorg/flytekit/blob/master/pydoclint-errors-baseline.txt#2025-04-16_snippet_6\n\n\n\n----------------------------------------\n\nTITLE: Building Docker Image for FlyteInteractive Development\nDESCRIPTION: Docker command to build a development image for use with FlyteInteractive plugin.\nSOURCE: https://github.com/flyteorg/flytekit/blob/master/plugins/flytekit-flyteinteractive/README.md#2025-04-16_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\ndocker buildx build --push . -f Dockerfile.dev -t localhost:30000/flytekit:dev --build-arg PYTHON_VERSION=3.9\n```\n\n----------------------------------------\n\nTITLE: Installing Flytekit Envd Plugin using pip\nDESCRIPTION: Command to install the Flytekit Envd plugin using pip package manager.\nSOURCE: https://github.com/flyteorg/flytekit/blob/master/plugins/flytekit-envd/README.md#2025-04-16_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\npip install flytekitplugins-envd\n```\n\n----------------------------------------\n\nTITLE: RST Documentation Structure for Modin API\nDESCRIPTION: ReStructuredText documentation structure defining the Modin API reference page with automodule directive for generating documentation from the flytekitplugins.modin module.\nSOURCE: https://github.com/flyteorg/flytekit/blob/master/docs/source/plugins/modin.rst#2025-04-16_snippet_0\n\nLANGUAGE: rst\nCODE:\n```\n.. _modin:\n\n###################################################\nModin API reference\n###################################################\n\n.. tags:: Integration, DataFrame\n\n.. automodule:: flytekitplugins.modin\n   :no-members:\n   :no-inherited-members:\n   :no-special-members:\n```\n\n----------------------------------------\n\nTITLE: Importing PyTorch ONNX Module in Flytekit\nDESCRIPTION: This snippet demonstrates how to import the PyTorch ONNX module in Flytekit. It uses the automodule directive to generate documentation for the flytekitplugins.onnxpytorch module, excluding members, inherited members, and special members.\nSOURCE: https://github.com/flyteorg/flytekit/blob/master/docs/source/plugins/onnxpytorch.rst#2025-04-16_snippet_0\n\nLANGUAGE: Python\nCODE:\n```\n.. automodule:: flytekitplugins.onnxpytorch\n   :no-members:\n   :no-inherited-members:\n   :no-special-members:\n```\n\n----------------------------------------\n\nTITLE: Listing Flyte Tasks by Version\nDESCRIPTION: Shows how to list all tasks by a specific version in a project and domain. This helps in discovering and working with tasks that match certain version criteria.\nSOURCE: https://github.com/flyteorg/flytekit/blob/master/docs/source/design/control_plane.rst#2025-04-16_snippet_18\n\nLANGUAGE: python\nCODE:\n```\ntasks = remote.list_tasks_by_version(project=\"flytesnacks\", domain=\"development\", version=\"v1\")\n```\n\n----------------------------------------\n\nTITLE: Installing Flytekit Kubeflow MPI Plugin\nDESCRIPTION: Command to install the Flytekit Kubeflow MPI plugin using pip package manager.\nSOURCE: https://github.com/flyteorg/flytekit/blob/master/plugins/flytekit-kf-mpi/README.md#2025-04-16_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\npip install flytekitplugins-kfmpi\n```\n\n----------------------------------------\n\nTITLE: Pip-compiled Development Requirements for Flytekit\nDESCRIPTION: This requirements file lists all the frozen dependencies for flytekit development. It was automatically generated using pip-compile from a dev-requirements.in file and includes packages such as aiohttp, pytest, and their dependencies with specific version requirements.\nSOURCE: https://github.com/flyteorg/flytekit/blob/master/plugins/flytekit-spark/dev-requirements.txt#2025-04-16_snippet_0\n\nLANGUAGE: pip\nCODE:\n```\n#\n# This file is autogenerated by pip-compile with Python 3.9\n# by the following command:\n#\n#    pip-compile dev-requirements.in\n#\naiohappyeyeballs==2.4.3\n    # via aiohttp\naiohttp==3.10.11\n    # via aioresponses\naioresponses==0.7.6\n    # via -r dev-requirements.in\naiosignal==1.3.1\n    # via aiohttp\nasync-timeout==4.0.3\n    # via aiohttp\nattrs==23.1.0\n    # via aiohttp\nexceptiongroup==1.2.0\n    # via pytest\nfrozenlist==1.4.0\n    # via\n    #   aiohttp\n    #   aiosignal\nidna==3.7\n    # via yarl\niniconfig==2.0.0\n    # via pytest\nmultidict==6.0.4\n    # via\n    #   aiohttp\n    #   yarl\npackaging==23.2\n    # via pytest\npluggly==1.3.0\n    # via pytest\npropcache==0.2.0\n    # via yarl\npytest==7.4.3\n    # via pytest-asyncio\npytest-asyncio==0.21.1\n    # via -r dev-requirements.in\ntomli==2.0.1\n    # via pytest\nyarl==1.17.2\n    # via aiohttp\n```\n\n----------------------------------------\n\nTITLE: Configuring Ray Module Documentation with reStructuredText\nDESCRIPTION: reStructuredText directives for configuring the documentation of the flytekitplugins.ray module. Specifies module documentation settings excluding members, inherited members, and special members.\nSOURCE: https://github.com/flyteorg/flytekit/blob/master/docs/source/plugins/ray.rst#2025-04-16_snippet_0\n\nLANGUAGE: restructuredtext\nCODE:\n```\n.. automodule:: flytekitplugins.ray\n   :no-members:\n   :no-inherited-members:\n   :no-special-members:\n```\n\n----------------------------------------\n\nTITLE: Importing PyTorch Module in Flyte Documentation\nDESCRIPTION: ReStructuredText directive for automatically documenting the PyTorch module in Flytekit. The directive excludes members, inherited members, and special members from the documentation.\nSOURCE: https://github.com/flyteorg/flytekit/blob/master/docs/source/extras.pytorch.rst#2025-04-16_snippet_0\n\nLANGUAGE: rst\nCODE:\n```\n.. automodule:: flytekit.extras.pytorch\n   :no-members:\n   :no-inherited-members:\n   :no-special-members:\n```\n\n----------------------------------------\n\nTITLE: Accessing Node Execution Outputs\nDESCRIPTION: Demonstrates how to access outputs from specific node executions within a workflow. This allows for retrieving intermediate results from individual tasks or subworkflows that make up the execution.\nSOURCE: https://github.com/flyteorg/flytekit/blob/master/docs/source/design/control_plane.rst#2025-04-16_snippet_14\n\nLANGUAGE: python\nCODE:\n```\nnode_execution_output = synced_execution.node_executions[\"n1\"].outputs[\"model_file\"]\n```\n\n----------------------------------------\n\nTITLE: Installing SQLAlchemy Plugin for Flytekit\nDESCRIPTION: Command to install the SQLAlchemy plugin for Flytekit using pip. This plugin allows writing queries for any database that supports SQLAlchemy.\nSOURCE: https://github.com/flyteorg/flytekit/blob/master/plugins/README.md#2025-04-16_snippet_12\n\nLANGUAGE: bash\nCODE:\n```\npip install flytekitplugins-sqlalchemy\n```\n\n----------------------------------------\n\nTITLE: Installing Pandera Plugin for Flytekit\nDESCRIPTION: Command to install the Pandera plugin for Flytekit using pip. This plugin enables using Pandera schemas as native Flyte types, which allow for data quality checks.\nSOURCE: https://github.com/flyteorg/flytekit/blob/master/plugins/README.md#2025-04-16_snippet_11\n\nLANGUAGE: bash\nCODE:\n```\npip install flytekitplugins-pandera\n```\n\n----------------------------------------\n\nTITLE: Configuring Sphinx AutoModule for Flytekit Testing\nDESCRIPTION: RST directive for automatically generating documentation from the flytekit.testing module. Configures Sphinx to include module members while excluding inherited and special members.\nSOURCE: https://github.com/flyteorg/flytekit/blob/master/docs/source/testing.rst#2025-04-16_snippet_0\n\nLANGUAGE: rst\nCODE:\n```\n.. automodule:: flytekit.testing\n   :members:\n   :no-inherited-members:\n   :no-special-members:\n```\n\n----------------------------------------\n\nTITLE: Configuring Sphinx Automodule for flytekit.remote in reStructuredText\nDESCRIPTION: This snippet configures the Sphinx automodule directive for the flytekit.remote module. It excludes members, inherited members, and special members from the documentation generation.\nSOURCE: https://github.com/flyteorg/flytekit/blob/master/docs/source/remote.rst#2025-04-16_snippet_0\n\nLANGUAGE: reStructuredText\nCODE:\n```\n.. automodule:: flytekit.remote\n    :no-members:\n    :no-inherited-members:\n    :no-special-members:\n```\n\n----------------------------------------\n\nTITLE: Fetching Flyte Entities Using FlyteRemote\nDESCRIPTION: Demonstrates how to fetch various Flyte entities (tasks, workflows, launch plans, executions) using FlyteRemote.\nSOURCE: https://github.com/flyteorg/flytekit/blob/master/docs/source/design/control_plane.rst#2025-04-16_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nflyte_task = remote.fetch_task(name=\"my_task\", version=\"v1\")\nflyte_workflow = remote.fetch_workflow(name=\"my_workflow\", version=\"v1\")\nflyte_launch_plan = remote.fetch_launch_plan(name=\"my_launch_plan\", version=\"v1\")\nflyte_execution = remote.fetch_execution(name=\"my_execution\")\n```\n\n----------------------------------------\n\nTITLE: Testing DBT Model Outputs\nDESCRIPTION: Command to run tests on the output of the DBT models.\nSOURCE: https://github.com/flyteorg/flytekit/blob/master/plugins/flytekit-dbt/tests/testdata/jaffle_shop/README.md#2025-04-16_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\n$ dbt test\n```\n\n----------------------------------------\n\nTITLE: Setting up Sphinx Documentation for Flytekit Experimental Features\nDESCRIPTION: This RST (reStructuredText) snippet configures Sphinx documentation for experimental features in Flytekit. It sets the current module, displays an important warning about API stability, and uses autosummary to generate documentation.\nSOURCE: https://github.com/flyteorg/flytekit/blob/master/docs/source/experimental.rst#2025-04-16_snippet_0\n\nLANGUAGE: rst\nCODE:\n```\nExperimental Features\n=====================\n\n.. currentmodule:: flytekit\n\n.. important::\n\n   The constructs below are experimental and the API is subject to breaking changes.\n\n.. autosummary::\n   :nosignatures:\n   :toctree: generated/\n```\n\n----------------------------------------\n\nTITLE: Configuring Sphinx Automodule for Flytekit Iterator Types\nDESCRIPTION: A Sphinx directive that sets up automatic documentation generation for the flytekit.types.iterator module. The directive specifies to exclude member documentation, inherited members, and special members from the generated documentation.\nSOURCE: https://github.com/flyteorg/flytekit/blob/master/docs/source/types.builtins.iterator.rst#2025-04-16_snippet_0\n\nLANGUAGE: rst\nCODE:\n```\n.. automodule:: flytekit.types.iterator\n   :no-members:\n   :no-inherited-members:\n   :no-special-members:\n```\n\n----------------------------------------\n\nTITLE: Installing Flytekit AWS Athena Plugin\nDESCRIPTION: Command to install the Flytekit AWS Athena plugin using pip package manager. This plugin enables integration between Flyte and AWS Athena service for executing SQL queries and retrieving typed schemas.\nSOURCE: https://github.com/flyteorg/flytekit/blob/master/plugins/flytekit-aws-athena/README.md#2025-04-16_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\npip install flytekitplugins-athena\n```\n\n----------------------------------------\n\nTITLE: Installing Flytekit ONNX TensorFlow Plugin via pip\nDESCRIPTION: Command to install the Flytekit plugin for converting TensorFlow Keras models to ONNX format using pip package manager.\nSOURCE: https://github.com/flyteorg/flytekit/blob/master/plugins/flytekit-onnx-tensorflow/README.md#2025-04-16_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\npip install flytekitplugins-onnxtensorflow\n```\n\n----------------------------------------\n\nTITLE: Sphinx Documentation Template for Classes and Functions in Flytekit\nDESCRIPTION: A Jinja2 template that defines how Sphinx should render documentation for classes (including their methods and attributes) and functions in the Flytekit project. The template uses conditional blocks to handle different object types and iterates through methods and attributes when present.\nSOURCE: https://github.com/flyteorg/flytekit/blob/master/docs/source/_templates/custom.rst#2025-04-16_snippet_0\n\nLANGUAGE: jinja2\nCODE:\n```\n{{ fullname | escape | underline}}\n\n.. currentmodule:: {{ module }}\n\n{% if objtype == 'class' %}\n\n.. autoclass:: {{ objname }}\n\n   {% block methods %}\n   {% if methods %}\n\n   .. rubric:: {{ _('Methods') }}\n   {% for item in methods %}\n\n   {% if item != '__init__' %}\n   .. automethod:: {{ item }}\n   {% endif %}\n\n   {%- endfor %}\n   {% endif %}\n   {% endblock %}\n\n   {% block attributes %}\n   {% if attributes %}\n\n   .. rubric:: {{ _('Attributes') }}\n   {% for item in attributes %}\n   .. autoattribute:: {{ item }}\n      :noindex:\n   {%- endfor %}\n\n   {% endif %}\n   {% endblock %}\n\n\n{% endif %}\n\n{% if objtype == 'function' %}\n\n.. autofunction:: {{ objname }}\n\n{% endif %}\n\n```\n\n----------------------------------------\n\nTITLE: Configuring Autodoc for flytekit.image_spec Module\nDESCRIPTION: Sphinx autodoc directive that configures documentation generation for the flytekit.image_spec module. The configuration excludes members, inherited members, and special members from the documentation.\nSOURCE: https://github.com/flyteorg/flytekit/blob/master/docs/source/imagespec.rst#2025-04-16_snippet_0\n\nLANGUAGE: restructuredtext\nCODE:\n```\n.. automodule:: flytekit.image_spec\n   :no-members:\n   :no-inherited-members:\n   :no-special-members:\n```\n\n----------------------------------------\n\nTITLE: ReStructuredText Module Documentation Directive\nDESCRIPTION: Sphinx documentation directive that specifies the documentation settings for the flytekit.extras.tensorflow module. It excludes members, inherited members, and special members from the documentation.\nSOURCE: https://github.com/flyteorg/flytekit/blob/master/docs/source/extras.tensorflow.rst#2025-04-16_snippet_0\n\nLANGUAGE: restructuredtext\nCODE:\n```\n.. automodule:: flytekit.extras.tensorflow\n   :no-members:\n   :no-inherited-members:\n   :no-special-members:\n```\n\n----------------------------------------\n\nTITLE: Initializing Spark Configuration\nDESCRIPTION: Sets up a basic local Spark configuration dictionary with a simple key-value pair\nSOURCE: https://github.com/flyteorg/flytekit/blob/master/plugins/flytekit-papermill/tests/testdata/nb-spark.ipynb#2025-04-16_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nlocal_spark_conf = {\"x\": \"y\"}\n```\n\n----------------------------------------\n\nTITLE: Creating Table of Contents in ReStructuredText for Flytekit API Reference\nDESCRIPTION: This code snippet defines a table of contents for Flytekit API documentation using ReStructuredText markup. It uses the toctree directive with a maxdepth parameter to organize and link to various documentation sections.\nSOURCE: https://github.com/flyteorg/flytekit/blob/master/docs/source/docs_index.rst#2025-04-16_snippet_0\n\nLANGUAGE: restructuredtext\nCODE:\n```\n.. toctree::\n   :maxdepth: 2\n\n   design/index\n   flytekit\n   configuration\n   imagespec\n   remote\n   clients\n   testing\n   extras.accelerators\n   extend\n   deck\n   plugins/index\n   tasks.extend\n   types.extend\n   experimental\n   pyflyte\n   contributing\n```\n\n----------------------------------------\n\nTITLE: Configuring Sphinx automodule for Flytekit Structured Types Module\nDESCRIPTION: This RST directive configures Sphinx to document the flytekit.types.structured module without including members, inherited members, or special members. This creates a cleaner documentation page that focuses only on the module-level documentation.\nSOURCE: https://github.com/flyteorg/flytekit/blob/master/docs/source/types.builtins.structured.rst#2025-04-16_snippet_0\n\nLANGUAGE: rst\nCODE:\n```\n.. automodule:: flytekit.types.structured\n   :no-members:\n   :no-inherited-members:\n   :no-special-members:\n```\n\n----------------------------------------\n\nTITLE: Configuring Sphinx AutoModule for flytekit.clients\nDESCRIPTION: Sphinx directive to generate module documentation for flytekit.clients while excluding members, inherited members, and special members. This is used to create focused API documentation.\nSOURCE: https://github.com/flyteorg/flytekit/blob/master/docs/source/clients.rst#2025-04-16_snippet_0\n\nLANGUAGE: rst\nCODE:\n```\n.. automodule:: flytekit.clients\n    :no-members:\n    :no-inherited-members:\n    :no-special-members:\n```\n\n----------------------------------------\n\nTITLE: Calculating and Printing Square of Pi in Python\nDESCRIPTION: Takes the previously defined pi constant, squares it by multiplying it by itself, and prints the result to the console.\nSOURCE: https://github.com/flyteorg/flytekit/blob/master/plugins/flytekit-papermill/tests/testdata/nb-simple.ipynb#2025-04-16_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nout = pi * pi\nprint(out)\n```\n\n----------------------------------------\n\nTITLE: Configuring Sphinx autodoc for Flytekit Directory Types\nDESCRIPTION: Sphinx automodule directive for documenting flytekit.types.directory module. Excludes members, inherited members, and special members from the generated documentation.\nSOURCE: https://github.com/flyteorg/flytekit/blob/master/docs/source/types.builtins.directory.rst#2025-04-16_snippet_0\n\nLANGUAGE: rst\nCODE:\n```\n.. automodule:: flytekit.types.directory\n   :no-members:\n   :no-inherited-members:\n   :no-special-members:\n```\n\n----------------------------------------\n\nTITLE: Configuring Sphinx automodule for sklearn Types in Flytekit\nDESCRIPTION: RST directive that configures Sphinx's automodule to document the flytekit.extras.sklearn module without displaying members, inherited members, or special members. This is used to generate API documentation with specific exclusions.\nSOURCE: https://github.com/flyteorg/flytekit/blob/master/docs/source/extras.sklearn.rst#2025-04-16_snippet_0\n\nLANGUAGE: rst\nCODE:\n```\n.. automodule:: flytekit.extras.sklearn\n   :no-members:\n   :no-inherited-members:\n   :no-special-members:\n```\n\n----------------------------------------\n\nTITLE: Importing SQLite3 Module in Flytekit Documentation\nDESCRIPTION: reStructuredText directive to import and document the SQLite3 module from Flytekit extras. The directive specifies that no members, inherited members, or special members should be included in the documentation.\nSOURCE: https://github.com/flyteorg/flytekit/blob/master/docs/source/extras.sqlite3.rst#2025-04-16_snippet_0\n\nLANGUAGE: reStructuredText\nCODE:\n```\n.. automodule:: flytekit.extras.sqlite3\n   :no-members:\n   :no-inherited-members:\n   :no-special-members:\n```\n\n----------------------------------------\n\nTITLE: Installing Flytekit Dask Plugin via pip\nDESCRIPTION: Command to install the Flytekit Dask plugin using pip package manager. This installation is required to enable Dask support in Flytekit.\nSOURCE: https://github.com/flyteorg/flytekit/blob/master/plugins/flytekit-dask/README.md#2025-04-16_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\npip install flytekitplugins-dask\n```\n\n----------------------------------------\n\nTITLE: Recording Outputs with Flytekit Papermill Plugin\nDESCRIPTION: Uses the record_outputs function from flytekitplugins.papermill to record the computed variables. This function is part of Flytekit's integration with papermill for tracking and recording outputs from notebook executions.\nSOURCE: https://github.com/flyteorg/flytekit/blob/master/plugins/flytekit-papermill/tests/testdata/nb-multi.ipynb#2025-04-16_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nfrom flytekitplugins.papermill import record_outputs\n\nrecord_outputs(z=z, m=m, h=h, n=n)\n```\n\n----------------------------------------\n\nTITLE: Configuring OpenAI Plugin Documentation in reStructuredText\nDESCRIPTION: This snippet sets up the documentation structure for the OpenAI plugin in Flytekit. It includes a title, tags for categorization, and an automodule directive to automatically generate documentation from the plugin's Python module.\nSOURCE: https://github.com/flyteorg/flytekit/blob/master/docs/source/plugins/openai.rst#2025-04-16_snippet_0\n\nLANGUAGE: reStructuredText\nCODE:\n```\n.. _openai:\n\n################\nOpenAI reference\n################\n\n.. tags:: Integration, OpenAI\n\n.. automodule:: flytekitplugins.openai\n   :no-members:\n   :no-inherited-members:\n   :no-special-members:\n```\n\n----------------------------------------\n\nTITLE: Updating Flytekit Version Dependencies\nDESCRIPTION: Bash command for updating Flytekit version dependencies across multiple plugin setup files using sed.\nSOURCE: https://github.com/flyteorg/flytekit/blob/master/plugins/README.md#2025-04-16_snippet_22\n\nLANGUAGE: bash\nCODE:\n```\nfor f in $(ls **/setup.py); do sed -i \"s/flytekit>.*,<1.1/flytekit>=1.1.0b0,<1.2/\" $f; done\n```\n\n----------------------------------------\n\nTITLE: Importing Pandera Plugin Module in reStructuredText\nDESCRIPTION: Automodule directive that imports the Pandera plugin module for documentation generation. The directive is configured to exclude members, inherited members, and special members from the documentation.\nSOURCE: https://github.com/flyteorg/flytekit/blob/master/docs/source/plugins/pandera.rst#2025-04-16_snippet_0\n\nLANGUAGE: restructuredtext\nCODE:\n```\n.. automodule:: flytekitplugins.pandera\n   :no-members:\n   :no-inherited-members:\n   :no-special-members:\n```\n\n----------------------------------------\n\nTITLE: Sphinx Documentation for Weights & Biases Flytekit Plugin\nDESCRIPTION: Sphinx reStructuredText markup for the Weights & Biases (WandB) Flytekit plugin API documentation. The document uses automodule to automatically generate API documentation from the flytekitplugins.wandb module without including members, inherited members, or special members.\nSOURCE: https://github.com/flyteorg/flytekit/blob/master/docs/source/plugins/wandb.rst#2025-04-16_snippet_0\n\nLANGUAGE: rst\nCODE:\n```\n.. _wandb:\n\n###################################################\nWeights & Biases API reference\n###################################################\n\n.. tags:: Integration\n\n.. automodule:: flytekitplugins.wandb\n   :no-members:\n   :no-inherited-members:\n   :no-special-members:\n```\n\n----------------------------------------\n\nTITLE: Configuring Sphinx Documentation for Snowflake Plugin\nDESCRIPTION: This RST (reStructuredText) code configures Sphinx documentation generation for the Snowflake plugin in Flytekit. It includes tags for categorization and sets up automodule directives to generate API documentation.\nSOURCE: https://github.com/flyteorg/flytekit/blob/master/docs/source/plugins/snowflake.rst#2025-04-16_snippet_0\n\nLANGUAGE: rst\nCODE:\n```\n.. _snowflake:\n\n###################################################\nSnowflake API reference\n###################################################\n\n.. tags:: Integration, Data\n\n.. automodule:: flytekitplugins.snowflake\n   :no-members:\n   :no-inherited-members:\n   :no-special-members:\n```\n\n----------------------------------------\n\nTITLE: Specifying Kubernetes Package Version Requirement\nDESCRIPTION: Defines version constraint for Kubernetes package dependency using tilde equals operator (~=) to specify version 23.6.0 with patch level flexibility.\nSOURCE: https://github.com/flyteorg/flytekit/blob/master/plugins/flytekit-k8sdataservice/dev-requirements.txt#2025-04-16_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\nkubernetes~=23.6.0\n```\n\n----------------------------------------\n\nTITLE: Configuring Automodule for Inference Plugin in reStructuredText\nDESCRIPTION: Sets up the automodule directive for the flytekitplugins.inference package, excluding members, inherited members, and special members. This is used to generate API documentation for the inference plugin.\nSOURCE: https://github.com/flyteorg/flytekit/blob/master/docs/source/plugins/inference.rst#2025-04-16_snippet_0\n\nLANGUAGE: reStructuredText\nCODE:\n```\n.. automodule:: flytekitplugins.inference\n   :no-members:\n   :no-inherited-members:\n   :no-special-members:\n```\n\n----------------------------------------\n\nTITLE: Importing Neptune Plugin Module in Sphinx Documentation\nDESCRIPTION: This directive imports the Neptune plugin module for Sphinx documentation generation. It configures the autodoc extension to import the module without documenting its members, inherited members, or special members.\nSOURCE: https://github.com/flyteorg/flytekit/blob/master/docs/source/plugins/neptune.rst#2025-04-16_snippet_0\n\nLANGUAGE: restructuredtext\nCODE:\n```\n.. automodule:: flytekitplugins.neptune\n   :no-members:\n   :no-inherited-members:\n   :no-special-members:\n```\n\n----------------------------------------\n\nTITLE: Defining Custom Types Table of Contents in reStructuredText\nDESCRIPTION: This code snippet defines a table of contents in reStructuredText format, listing various custom types available in Flytekit. It includes built-in types like structured data, files, directories, and iterators, as well as extra types for PyTorch, TensorFlow, and scikit-learn.\nSOURCE: https://github.com/flyteorg/flytekit/blob/master/docs/source/types.extend.rst#2025-04-16_snippet_0\n\nLANGUAGE: restructuredtext\nCODE:\n```\n.. toctree::\n   :maxdepth: 1\n\n   types.builtins.structured\n   types.builtins.file\n   types.builtins.directory\n   types.builtins.iterator\n   extras.pytorch\n   extras.tensorflow\n   extras.sklearn\n```\n\n----------------------------------------\n\nTITLE: Sphinx Documentation Structure for AWS Athena Plugin\nDESCRIPTION: Sphinx reStructuredText (rst) documentation template that defines the AWS Athena plugin API reference page. It includes a title, tags for categorization, and an automodule directive to generate API documentation from the flytekitplugins.athena module.\nSOURCE: https://github.com/flyteorg/flytekit/blob/master/docs/source/plugins/athena.rst#2025-04-16_snippet_0\n\nLANGUAGE: rst\nCODE:\n```\n.. _athena:\n\n###################################################\nAWS Athena Plugin API reference\n###################################################\n\n.. tags:: Integration, AWS, Data\n\n.. automodule:: flytekitplugins.athena\n   :no-members:\n   :no-inherited-members:\n   :no-special-members:\n```\n\n----------------------------------------\n\nTITLE: Python Package Requirements for Flytekit Development\nDESCRIPTION: A pip requirements file specifying exact versions of all Python packages needed for Flytekit development. Includes direct dependencies and their transitive requirements with hash-pinned versions for reproducible builds.\nSOURCE: https://github.com/flyteorg/flytekit/blob/master/plugins/flytekit-papermill/dev-requirements.txt#2025-04-16_snippet_0\n\nLANGUAGE: pip\nCODE:\n```\n-e file:../../.#egg=flytekitplugins-awsbatch&subdirectory=plugins/flytekit-aws-batch\n-e file:../../.#egg=flytekitplugins-pod&subdirectory=plugins/flytekit-k8s-pod\n-e file:../../.#egg=flytekitplugins-spark&subdirectory=plugins/flytekit-spark\nadlfs==2023.10.0\naiobotocore==2.5.4\naiohttp==3.9.0\naioitertools==0.11.0\naiosignal==1.3.1\narrow==1.3.0\nasync-timeout==4.0.3\nattrs==23.1.0\nazure-core==1.29.5\nazure-datalake-store==0.0.53\nazure-identity==1.15.0\nazure-storage-blob==12.19.0\nbinaryornot==0.4.4\nbotocore==1.31.17\ncachetools==5.3.2\ncertifi==2023.11.17\ncffi==1.16.0\nchardet==5.2.0\ncharset-normalizer==3.3.2\nclick==8.1.7\ncloudpickle==3.0.0\ncookiecutter==2.4.0\ncroniter==2.0.1\ncryptography==41.0.5\ndataclasses-json==0.5.9\ndecorator==5.1.1\ndeprecated==1.2.14\ndiskcache==5.6.3\ndocker==6.1.3\ndocker-image-py==0.1.12\ndocstring-parser==0.15\nflyteidl==1.10.7b0\nflytekit==1.10.1\n```\n\n----------------------------------------\n\nTITLE: RST Documentation Directives for Dask API\nDESCRIPTION: ReStructuredText directives defining the documentation structure for Dask API reference, including module auto-documentation settings and tags.\nSOURCE: https://github.com/flyteorg/flytekit/blob/master/docs/source/plugins/dask.rst#2025-04-16_snippet_0\n\nLANGUAGE: rst\nCODE:\n```\n.. _dask:\n\n###################################################\nDask API reference\n###################################################\n\n.. tags:: Integration, DistributedComputing, KubernetesOperator\n\n.. automodule:: flytekitplugins.dask\n   :no-members:\n   :no-inherited-members:\n   :no-special-members:\n```\n\n----------------------------------------\n\nTITLE: Configuring Sphinx AutoModule for Flytekit Configuration\nDESCRIPTION: Sphinx directive to automatically document the flytekit.configuration module. Excludes members, inherited members, and special members from the generated documentation.\nSOURCE: https://github.com/flyteorg/flytekit/blob/master/docs/source/configuration.rst#2025-04-16_snippet_0\n\nLANGUAGE: rst\nCODE:\n```\n.. automodule:: flytekit.configuration\n    :no-members:\n    :no-inherited-members:\n    :no-special-members:\n```\n\n----------------------------------------\n\nTITLE: Sphinx Documentation for DuckDB Plugin Module\nDESCRIPTION: ReStructuredText directive for documenting the flytekitplugins.duckdb module, configured to hide members, inherited members, and special members.\nSOURCE: https://github.com/flyteorg/flytekit/blob/master/docs/source/plugins/duckdb.rst#2025-04-16_snippet_0\n\nLANGUAGE: rst\nCODE:\n```\n.. automodule:: flytekitplugins.duckdb\n   :no-members:\n   :no-inherited-members:\n   :no-special-members:\n```\n\n----------------------------------------\n\nTITLE: Pip-compiled Development Dependencies for ONNX Runtime\nDESCRIPTION: This requirements file lists all packages needed for development with ONNX Runtime. Each dependency is specified with an exact version, and comments indicate the source package that requires each dependency.\nSOURCE: https://github.com/flyteorg/flytekit/blob/master/plugins/flytekit-onnx-scikitlearn/dev-requirements.txt#2025-04-16_snippet_0\n\nLANGUAGE: requirements.txt\nCODE:\n```\n#\n# This file is autogenerated by pip-compile with Python 3.10\n# by the following command:\n#\n#    pip-compile dev-requirements.in\n#\ncoloredlogs==15.0.1\n    # via onnxruntime\nflatbuffers==23.5.26\n    # via onnxruntime\nhumanfriendly==10.0\n    # via coloredlogs\nmpmath==1.3.0\n    # via sympy\nnumpy==1.23.5\n    # via onnxruntime\nonnxruntime==1.16.1\n    # via -r dev-requirements.in\npackaging==23.2\n    # via onnxruntime\nprotobuf==4.25.0\n    # via onnxruntime\nsympy==1.12\n    # via onnxruntime\n```\n\n----------------------------------------\n\nTITLE: Sphinx Automodule Directive for Flyte Accelerators\nDESCRIPTION: Sphinx documentation configuration directive that generates API documentation for the flytekit.extras.accelerators module. Excludes members, inherited members and special members from the documentation.\nSOURCE: https://github.com/flyteorg/flytekit/blob/master/docs/source/extras.accelerators.rst#2025-04-16_snippet_0\n\nLANGUAGE: rst\nCODE:\n```\n.. automodule:: flytekit.extras.accelerators\n   :no-members:\n   :no-inherited-members:\n   :no-special-members:\n```\n\n----------------------------------------\n\nTITLE: Generating Service Account ID Token with gcloud\nDESCRIPTION: Command to generate a service account ID token using the gcloud SDK for CICD systems.\nSOURCE: https://github.com/flyteorg/flytekit/blob/master/plugins/flytekit-identity-aware-proxy/README.md#2025-04-16_snippet_4\n\nLANGUAGE: console\nCODE:\n```\ngcloud auth print-identity-token --token-format=full  --audiences=\"<webapp client id used by IAP>.apps.googleusercontent.com\"\n```\n\n----------------------------------------\n\nTITLE: RST Directive for Automodule Documentation of fsspec Plugin\nDESCRIPTION: ReStructuredText directive that generates API documentation for the flytekitplugins.fsspec module. The directive is configured to exclude member elements, inherited members, and special members from the documentation.\nSOURCE: https://github.com/flyteorg/flytekit/blob/master/docs/source/plugins/fsspec.rst#2025-04-16_snippet_0\n\nLANGUAGE: rst\nCODE:\n```\n.. automodule:: flytekitplugins.fsspec\n   :no-members:\n   :no-inherited-members:\n   :no-special-members:\n```\n\n----------------------------------------\n\nTITLE: Importing ScikitLearn ONNX Module in Flytekit\nDESCRIPTION: This RST directive imports and documents the flytekitplugins.onnxscikitlearn module. It excludes members, inherited members, and special members from the documentation.\nSOURCE: https://github.com/flyteorg/flytekit/blob/master/docs/source/plugins/onnxscikitlearn.rst#2025-04-16_snippet_0\n\nLANGUAGE: rst\nCODE:\n```\n.. automodule:: flytekitplugins.onnxscikitlearn\n   :no-members:\n   :no-inherited-members:\n   :no-special-members:\n```\n\n----------------------------------------\n\nTITLE: Documentation Issues in Flytekit-IAP Plugin\nDESCRIPTION: Documentation issues in GCPIdentityAwareProxyAuthenticator class and get_service_account_id_token function, including missing return documentation.\nSOURCE: https://github.com/flyteorg/flytekit/blob/master/pydoclint-errors-baseline.txt#2025-04-16_snippet_4\n\n\n\n----------------------------------------\n\nTITLE: Configuring Sphinx automodule for Vaex Plugin Documentation in reStructuredText\nDESCRIPTION: This snippet configures the Sphinx automodule directive to generate API documentation for the flytekitplugins.vaex module. It specifies that no members, inherited members, or special members should be displayed in the generated documentation.\nSOURCE: https://github.com/flyteorg/flytekit/blob/master/docs/source/plugins/vaex.rst#2025-04-16_snippet_0\n\nLANGUAGE: rst\nCODE:\n```\n.. automodule:: flytekitplugins.vaex\n   :no-members:\n   :no-inherited-members:\n   :no-special-members:\n```\n\n----------------------------------------\n\nTITLE: Installing AWS SageMaker Plugin for Flytekit\nDESCRIPTION: Command to install the AWS SageMaker plugin for Flytekit using pip.\nSOURCE: https://github.com/flyteorg/flytekit/blob/master/plugins/flytekit-aws-sagemaker/README.md#2025-04-16_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\npip install flytekitplugins-awssagemaker\n```\n\n----------------------------------------\n\nTITLE: Configuring Click Documentation for Pyflyte CLI\nDESCRIPTION: ReStructuredText directive configuration for generating CLI documentation using Click. It references the main entry point at flytekit.clis.sdk_in_container.pyflyte:main and enables full nested command documentation.\nSOURCE: https://github.com/flyteorg/flytekit/blob/master/docs/source/pyflyte.rst#2025-04-16_snippet_0\n\nLANGUAGE: restructuredtext\nCODE:\n```\n.. click:: flytekit.clis.sdk_in_container.pyflyte:main\n    :prog: pyflyte\n    :nested: full\n```\n\n----------------------------------------\n\nTITLE: Documentation Issues in Flytekit-Inference Plugin\nDESCRIPTION: Documentation issues in NIM, Ollama, and VLLM classes related to improper __init__ docstring placement.\nSOURCE: https://github.com/flyteorg/flytekit/blob/master/pydoclint-errors-baseline.txt#2025-04-16_snippet_5\n\n\n\n----------------------------------------\n\nTITLE: Generating Sphinx Documentation for FlyteFile and FlyteDirectory in Jinja2\nDESCRIPTION: This Jinja2 template creates Sphinx documentation for FlyteFile and FlyteDirectory classes. It includes sections for methods and attributes, with special handling for these specific classes. For other objects, it uses a simpler autodata directive.\nSOURCE: https://github.com/flyteorg/flytekit/blob/master/docs/source/_templates/file_types.rst#2025-04-16_snippet_0\n\nLANGUAGE: jinja2\nCODE:\n```\n{{ fullname | escape | underline}}\n\n.. currentmodule:: {{ module }}\n\n{% if objname == 'FlyteFile' or  objname == 'FlyteDirectory' %}\n\n.. autoclass:: {{ objname }}\n\n   {% block methods %}\n   {% if methods %}\n\n   .. rubric:: {{ _('Methods') }}\n   {% for item in methods %}\n\n   {% if item != '__init__' %}\n   .. automethod:: {{ item }}\n   {% endif %}\n\n   {%- endfor %}\n   {% endif %}\n   {% endblock %}\n\n   {% block attributes %}\n   {% if attributes %}\n\n   .. rubric:: {{ _('Attributes') }}\n   {% for item in attributes %}\n   .. autoattribute:: {{ item }}\n   {%- endfor %}\n\n   {% endif %}\n   {% endblock %}\n\n\n{% else %}\n\n.. autodata:: {{ objname }}\n\n{% endif %}\n```\n\n----------------------------------------\n\nTITLE: Running DBT Models\nDESCRIPTION: Command to execute the DBT models and transform the data.\nSOURCE: https://github.com/flyteorg/flytekit/blob/master/plugins/flytekit-dbt/tests/testdata/jaffle_shop/README.md#2025-04-16_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\n$ dbt run\n```\n\n----------------------------------------\n\nTITLE: Documentation Style Issues in Documentation Class\nDESCRIPTION: Class docstring attributes mismatch with actual class attributes. Missing documentation for long_description, short_description, and source_code attributes.\nSOURCE: https://github.com/flyteorg/flytekit/blob/master/pydoclint-errors-baseline.txt#2025-04-16_snippet_0\n\nLANGUAGE: Python\nCODE:\n```\nclass Documentation:\n    # Missing attributes in docstring:\n    # long_description: Optional[Description]\n    # short_description: Optional[str]\n    # source_code: Optional[SourceCode]\n```\n\n----------------------------------------\n\nTITLE: Google Cloud Dependencies Requirements\nDESCRIPTION: Requirements file containing Google Cloud package dependencies with pinned versions. Each dependency is annotated with comments indicating which parent packages require it, primarily for Apache Airflow providers and Apache Beam integration.\nSOURCE: https://github.com/flyteorg/flytekit/blob/master/plugins/flytekit-airflow/dev-requirements.txt#2025-04-16_snippet_1\n\nLANGUAGE: plaintext\nCODE:\n```\ngoogle-cloud-build==3.25.0\ngoogle-cloud-compute==1.19.2\ngoogle-cloud-container==2.52.0\ngoogle-cloud-core==2.4.1\ngoogle-cloud-datacatalog==3.20.1\ngoogle-cloud-dataflow-client==0.8.12\ngoogle-cloud-dataform==0.5.11\ngoogle-cloud-dataplex==2.2.2\ngoogle-cloud-dataproc==5.13.0\ngoogle-cloud-dataproc-metastore==1.15.5\ngoogle-cloud-datastore==2.20.1\ngoogle-cloud-dlp==3.23.0\ngoogle-cloud-kms==3.0.0\ngoogle-cloud-language==2.14.0\ngoogle-cloud-logging==3.11.2\ngoogle-cloud-memcache==1.9.5\ngoogle-cloud-monitoring==2.22.2\ngoogle-cloud-orchestration-airflow==1.14.0\ngoogle-cloud-os-login==2.14.6\ngoogle-cloud-pubsub==2.25.0\ngoogle-cloud-pubsublite==1.11.1\ngoogle-cloud-recommendations-ai==0.10.12\ngoogle-cloud-redis==2.15.5\ngoogle-cloud-resource-manager==1.12.5\ngoogle-cloud-run==0.10.9\ngoogle-cloud-secret-manager==2.20.2\ngoogle-cloud-spanner==3.49.1\ngoogle-cloud-speech==2.27.0\ngoogle-cloud-storage==2.18.2\ngoogle-cloud-storage-transfer==1.12.0\ngoogle-cloud-tasks==2.16.5\ngoogle-cloud-texttospeech==2.18.0\ngoogle-cloud-translate==3.16.0\ngoogle-cloud-videointelligence==2.13.5\ngoogle-cloud-vision==3.7.4\ngoogle-cloud-workflows==1.14.5\n```\n\n----------------------------------------\n\nTITLE: Secret Class Documentation Issues\nDESCRIPTION: Documentation formatting errors and attribute mismatches in Secret class. Missing documentation for env_var, group, group_version, key, and mount_requirement attributes.\nSOURCE: https://github.com/flyteorg/flytekit/blob/master/pydoclint-errors-baseline.txt#2025-04-16_snippet_1\n\nLANGUAGE: Python\nCODE:\n```\nclass Secret:\n    # Incorrectly formatted docstring and missing attributes:\n    # env_var: Optional[str]\n    # group: Optional[str]\n    # group_version: Optional[str]\n    # key: Optional[str]\n    # mount_requirement: MountType\n```\n\n----------------------------------------\n\nTITLE: Package Requirements Configuration for Flytekit Project\nDESCRIPTION: Comprehensive list of Python package dependencies with exact version pins generated by uv. Includes core Flytekit dependencies, cloud storage connectors (AWS, Azure, GCP), and WhyLogs integration requirements.\nSOURCE: https://github.com/flyteorg/flytekit/blob/master/plugins/flytekit-whylogs/requirements.txt#2025-04-16_snippet_0\n\nLANGUAGE: pip\nCODE:\n```\n-e file:.#egg=flytekitplugins-whylogs\nadlfs==2024.7.0\naiobotocore==2.15.2\naiohappyeyeballs==2.4.3\naiohttp==3.10.10\naioitertools==0.12.0\naiosignal==1.3.1\nasttokens==2.4.1\nattrs==24.2.0\nazure-core==1.31.0\nazure-datalake-store==0.0.53\nazure-identity==1.19.0\nazure-storage-blob==12.23.1\nbackoff==2.2.1\nbackports-tarfile==1.2.0\nbotocore==1.35.36\ncachetools==5.5.0\ncertifi==2024.8.30\ncffi==1.17.1\ncharset-normalizer==3.4.0\nclick==8.1.7\ncloudpickle==3.1.0\ncroniter==3.0.3\ncryptography==43.0.1\ndataclasses-json==0.5.9\ndecorator==5.1.1\ndiskcache==5.6.3\ndocker==7.1.0\ndocstring-parser==0.16\nexecuting==2.1.0\nflyteidl==1.13.4\nflytekit==1.14.0b0\nfrozenlist==1.4.1\nfsspec==2024.9.0\ngcsfs==2024.9.0.post1\ngoogle-api-core==2.21.0\ngoogle-auth==2.35.0\ngoogle-auth-oauthlib==1.2.1\ngoogle-cloud-core==2.4.1\ngoogle-cloud-storage==2.18.2\ngoogle-crc32c==1.6.0\ngoogle-resumable-media==2.7.2\ngoogleapis-common-protos==1.65.0\ngrpcio==1.66.2\ngrpcio-status==1.66.2\nidna==3.10\nimportlib-metadata==8.5.0\nipython==8.28.0\nisodate==0.7.2\njaraco-classes==3.4.0\njaraco-context==6.0.1\njaraco-functools==4.1.0\njedi==0.19.1\njmespath==1.0.1\njoblib==1.4.2\njsonlines==4.0.0\njsonpickle==3.3.0\nkeyring==25.4.1\nmarkdown-it-py==3.0.0\nmarshmallow==3.22.0\nmarshmallow-enum==1.5.1\nmarshmallow-jsonschema==0.13.0\nmashumaro==3.13.1\nmatplotlib-inline==0.1.7\nmdurl==0.1.2\nmore-itertools==10.5.0\nmsal==1.31.0\nmsal-extensions==1.2.0\nmultidict==6.1.0\nmypy-extensions==1.0.0\nnumpy==2.1.2\noauthlib==3.2.2\npackaging==24.1\nparso==0.8.4\npexpect==4.9.0\npillow==10.4.0\nplatformdirs==3.11.0\nportalocker==2.10.1\nprompt-toolkit==3.0.48\npropcache==0.2.0\nproto-plus==1.24.0\nprotobuf==5.28.2\nprotoc-gen-openapiv2==0.0.1\nptyprocess==0.7.0\npure-eval==0.2.3\npyasn1==0.6.1\npyasn1-modules==0.4.1\npybars3==0.9.7\npycparser==2.22\npygments==2.18.0\npyjwt==2.9.0\npymeta3==0.5.1\npython-dateutil==2.9.0.post0\npython-json-logger==2.0.7\npytimeparse==1.1.8\npytz==2024.2\npyyaml==6.0.2\nrequests==2.32.3\nrequests-oauthlib==2.0.0\nrich==13.9.2\nrich-click==1.8.3\nrsa==4.9\ns3fs==2024.9.0\nscipy==1.14.1\nsix==1.16.0\nstack-data==0.6.3\nstatsd==4.0.1\ntraitlets==5.14.3\ntyping-extensions==4.12.2\ntyping-inspect==0.9.0\nurllib3==2.2.3\nwcwidth==0.2.13\nwhylabs-client==0.6.10\nwhylogs==1.5.1\nwhylogs-sketching==3.4.1.dev3\nwrapt==1.16.0\nyarl==1.14.0\nzipp==3.20.2\n```\n\n----------------------------------------\n\nTITLE: Verifying DBT Profile Configuration\nDESCRIPTION: Command to verify that the DBT profile is configured correctly using the debug command.\nSOURCE: https://github.com/flyteorg/flytekit/blob/master/plugins/flytekit-dbt/tests/testdata/jaffle_shop/README.md#2025-04-16_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n$ dbt debug\n```\n\n----------------------------------------\n\nTITLE: Documentation Issues in Flytekit-GreatExpectations Plugin\nDESCRIPTION: Documentation inconsistencies in BatchRequestConfig and GreatExpectationsTask classes, including missing class attributes and incomplete method documentation.\nSOURCE: https://github.com/flyteorg/flytekit/blob/master/pydoclint-errors-baseline.txt#2025-04-16_snippet_2\n\n\n\n----------------------------------------\n\nTITLE: Specifying pytest-asyncio Dependency for Python Testing\nDESCRIPTION: Simple specification of the pytest-asyncio package as a dependency. This plugin extends pytest to support testing of asyncio code, allowing test functions to be defined with the 'async def' syntax.\nSOURCE: https://github.com/flyteorg/flytekit/blob/master/plugins/flytekit-openai/dev-requirements.txt#2025-04-16_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\npytest-asyncio\n```\n\n----------------------------------------\n\nTITLE: Serving DBT Documentation\nDESCRIPTION: Command to serve the generated DBT documentation locally.\nSOURCE: https://github.com/flyteorg/flytekit/blob/master/plugins/flytekit-dbt/tests/testdata/jaffle_shop/README.md#2025-04-16_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\n$ dbt docs serve\n```\n\n----------------------------------------\n\nTITLE: Documentation Issues in Flytekit-Hive Plugin\nDESCRIPTION: Documentation issues in HiveConfig, HiveTask, and HiveSelectTask classes, including missing class attributes and improper __init__ docstring placement.\nSOURCE: https://github.com/flyteorg/flytekit/blob/master/pydoclint-errors-baseline.txt#2025-04-16_snippet_3\n\n\n\n----------------------------------------\n\nTITLE: Python Package Dependencies List\nDESCRIPTION: Comprehensive list of Python package dependencies with specific version requirements and their dependency chains through comments. The list appears to be for a Flytekit project and includes various data science, cloud and development tools.\nSOURCE: https://github.com/flyteorg/flytekit/blob/master/dev-requirements.txt#2025-04-16_snippet_1\n\nLANGUAGE: plaintext\nCODE:\n```\nthreadpoolctl==3.5.0\n    # via scikit-learn\ntomlkit==0.13.2\n    # via snowflake-connector-python\ntornado==6.4.1\n    # via\n    #   ipykernel\n    #   jupyter-client\ntraitlets==5.14.3\n    # via\n    #   comm\n    #   ipykernel\n    #   ipython\n    #   jupyter-client\n    #   jupyter-core\n    #   matplotlib-inline\ntypes-croniter==2.0.0.20240423\n    # via -r dev-requirements.in\ntypes-decorator==5.1.8.20240310\n    # via -r dev-requirements.in\ntypes-mock==5.1.0.20240425\n    # via -r dev-requirements.in\ntypes-protobuf==4.25.0.20240417\n    # via -r dev-requirements.in\ntypes-requests==2.32.0.20240523\n    # via -r dev-requirements.in\ntyping-extensions==4.12.0\n    # via\n    #   azure-core\n    #   azure-storage-blob\n    #   flytekit\n    #   mashumaro\n    #   mypy\n    #   pydantic\n    #   pydantic-core\n    #   rich-click\n    #   snowflake-connector-python\n    #   typing-inspect\ntyping-inspect==0.9.0\n    # via dataclasses-json\ntzdata==2024.1\n    # via pandas\nurllib3==2.2.1\n    # via\n    #   botocore\n    #   docker\n    #   flytekit\n    #   kubernetes\n    #   requests\n    #   types-requests\nvirtualenv==20.26.6\n    # via pre-commit\nwcwidth==0.2.13\n    # via prompt-toolkit\nwebsocket-client==1.8.0\n    # via\n    #   docker\n    #   kubernetes\nwrapt==1.16.0\n    # via aiobotocore\nyarl==1.18.3\n    # via aiohttp\nzipp==3.19.1\n    # via importlib-metadata\n\n# The following packages are considered to be unsafe in a requirements file:\n# setuptools\n```\n\n----------------------------------------\n\nTITLE: Importing Spark Plugin Module in Python\nDESCRIPTION: This code snippet demonstrates how to import the Spark plugin module in Flytekit. It uses the automodule directive to automatically generate documentation for the flytekitplugins.spark module.\nSOURCE: https://github.com/flyteorg/flytekit/blob/master/docs/source/plugins/spark.rst#2025-04-16_snippet_0\n\nLANGUAGE: Python\nCODE:\n```\n.. automodule:: flytekitplugins.spark\n   :no-members:\n   :no-inherited-members:\n   :no-special-members:\n```\n\n----------------------------------------\n\nTITLE: Python Package Dependencies with Version Constraints\nDESCRIPTION: Comprehensive list of Python package dependencies with exact version numbers and nested dependency relationships. Generated using pip-compile from dev-requirements.in for Python 3.10.\nSOURCE: https://github.com/flyteorg/flytekit/blob/master/plugins/flytekit-onnx-pytorch/dev-requirements.txt#2025-04-16_snippet_0\n\nLANGUAGE: pip\nCODE:\n```\ncertifi==2024.7.4\n    # via requests\ncharset-normalizer==3.3.2\n    # via requests\ncoloredlogs==15.0.1\n    # via onnxruntime\nfilelock==3.13.1\n    # via\n    #   torch\n    #   triton\nflatbuffers==23.5.26\n    # via onnxruntime\nfsspec==2023.10.0\n    # via torch\nhumanfriendly==10.0\n    # via coloredlogs\nidna==3.4\n    # via requests\njinja2==3.1.5\n    # via torch\nmarkupsafe==2.1.3\n    # via jinja2\nmpmath==1.3.0\n    # via sympy\nnetworkx==3.1\n    # via torch\nnumpy==1.23.5\n    # via\n    #   onnxruntime\n    #   torchvision\nnvidia-cublas-cu12==12.1.3.1\n    # via\n    #   nvidia-cudnn-cu12\n    #   nvidia-cusolver-cu12\n    #   torch\nnvidia-cuda-cupti-cu12==12.1.105\n    # via torch\nnvidia-cuda-nvrtc-cu12==12.1.105\n    # via torch\nnvidia-cuda-runtime-cu12==12.1.105\n    # via torch\nnvidia-cudnn-cu12==8.9.2.26\n    # via torch\nnvidia-cufft-cu12==11.0.2.54\n    # via torch\nnvidia-curand-cu12==10.3.2.106\n    # via torch\nnvidia-cusolver-cu12==11.4.5.107\n    # via torch\nnvidia-cusparse-cu12==12.1.0.106\n    # via\n    #   nvidia-cusolver-cu12\n    #   torch\nnvidia-nccl-cu12==2.18.1\n    # via torch\nnvidia-nvjitlink-cu12==12.3.101\n    # via\n    #   nvidia-cusolver-cu12\n    #   nvidia-cusparse-cu12\nnvidia-nvtx-cu12==12.1.105\n    # via torch\nonnxruntime==1.16.1\n    # via -r dev-requirements.in\npackaging==23.2\n    # via onnxruntime\npillow==10.3.0\n    # via\n    #   -r dev-requirements.in\n    #   torchvision\nprotobuf==4.25.0\n    # via onnxruntime\nrequests==2.32.2\n    # via torchvision\nsympy==1.12\n    # via\n    #   onnxruntime\n    #   torch\ntorch==2.1.0\n    # via torchvision\ntorchvision==0.16.0\n    # via -r dev-requirements.in\ntriton==2.1.0\n    # via torch\ntyping-extensions==4.8.0\n    # via torch\nurllib3==2.0.7\n    # via requests\n```\n\n----------------------------------------\n\nTITLE: RST Tags Directive for DuckDB Documentation\nDESCRIPTION: ReStructuredText tag directive indicating the document's categorization under Integration, Data, and Analytics topics.\nSOURCE: https://github.com/flyteorg/flytekit/blob/master/docs/source/plugins/duckdb.rst#2025-04-16_snippet_1\n\nLANGUAGE: rst\nCODE:\n```\n.. tags:: Integration, Data, Analytics\n```\n\n----------------------------------------\n\nTITLE: Configuring Sphinx autodoc for AWS Batch Plugin\nDESCRIPTION: Sphinx autodoc directive that generates API reference documentation for the flytekitplugins.awsbatch module. It excludes inherited members and special members from the documentation.\nSOURCE: https://github.com/flyteorg/flytekit/blob/master/docs/source/plugins/awsbatch.rst#2025-04-16_snippet_0\n\nLANGUAGE: rst\nCODE:\n```\n.. automodule:: flytekitplugins.awsbatch\n   :no-inherited-members:\n   :no-special-members:\n```\n\n----------------------------------------\n\nTITLE: Configuring Sphinx Documentation for SQLAlchemy Plugin\nDESCRIPTION: Sphinx documentation configuration for the SQLAlchemy plugin module in Flytekit. The configuration uses automodule directive to generate API documentation from the flytekitplugins.sqlalchemy module.\nSOURCE: https://github.com/flyteorg/flytekit/blob/master/docs/source/plugins/sqlalchemy.rst#2025-04-16_snippet_0\n\nLANGUAGE: restructuredtext\nCODE:\n```\n.. automodule:: flytekitplugins.sqlalchemy\n   :no-members:\n   :no-inherited-members:\n   :no-special-members:\n```\n\n----------------------------------------\n\nTITLE: Configuring RST Documentation for Dolt Plugin\nDESCRIPTION: RST documentation configuration for the Dolt plugin module, setting up automodule documentation without members, inherited members, or special members.\nSOURCE: https://github.com/flyteorg/flytekit/blob/master/docs/source/plugins/dolt.rst#2025-04-16_snippet_0\n\nLANGUAGE: rst\nCODE:\n```\n.. automodule:: flytekitplugins.dolt\n   :no-members:\n   :no-inherited-members:\n   :no-special-members:\n```\n\n----------------------------------------\n\nTITLE: Configuring Sphinx AutoModule for TensorFlow ONNX Plugin Documentation\nDESCRIPTION: Sphinx directive for automatically generating API documentation from the flytekitplugins.onnxtensorflow module. The configuration excludes members, inherited members, and special members.\nSOURCE: https://github.com/flyteorg/flytekit/blob/master/docs/source/plugins/onnxtensorflow.rst#2025-04-16_snippet_0\n\nLANGUAGE: reStructuredText\nCODE:\n```\n.. automodule:: flytekitplugins.onnxtensorflow\n   :no-members:\n   :no-inherited-members:\n   :no-special-members:\n```\n\n----------------------------------------\n\nTITLE: Sphinx Documentation Configuration for Papermill Plugin API Reference\nDESCRIPTION: A Sphinx documentation file that sets up the auto-documentation for the flytekitplugins.papermill module. The configuration includes tags for Integration and Jupyter, and automodule directives to generate API documentation.\nSOURCE: https://github.com/flyteorg/flytekit/blob/master/docs/source/plugins/papermill.rst#2025-04-16_snippet_0\n\nLANGUAGE: rst\nCODE:\n```\n.. _papermill:\n\n###################################################\nPapermill API reference\n###################################################\n\n.. tags:: Integration, Jupyter\n\n.. automodule:: flytekitplugins.papermill\n   :no-members:\n   :no-inherited-members:\n   :no-special-members:\n```\n\n----------------------------------------\n\nTITLE: Documenting Great Expectations Plugin in reStructuredText\nDESCRIPTION: reStructuredText documentation file for the Great Expectations plugin in Flytekit. The file sets up API reference documentation with appropriate tags and configuration for autodoc.\nSOURCE: https://github.com/flyteorg/flytekit/blob/master/docs/source/plugins/greatexpectations.rst#2025-04-16_snippet_0\n\nLANGUAGE: rst\nCODE:\n```\n.. _greatexpectations:\n\n###################################################\nGreat expectations API reference\n###################################################\n\n.. tags:: Integration, Data, SQL\n\n.. automodule:: flytekitplugins.great_expectations\n   :no-members:\n   :no-inherited-members:\n   :no-special-members:\n```\n\n----------------------------------------\n\nTITLE: Including KFTensorflow Module Documentation in RST\nDESCRIPTION: RST directive to include API documentation for the flytekitplugins.kftensorflow module, excluding member details, inherited members, and special members.\nSOURCE: https://github.com/flyteorg/flytekit/blob/master/docs/source/plugins/kftensorflow.rst#2025-04-16_snippet_0\n\nLANGUAGE: rst\nCODE:\n```\n.. automodule:: flytekitplugins.kftensorflow\n   :no-members:\n   :no-inherited-members:\n   :no-special-members:\n```\n\n----------------------------------------\n\nTITLE: Configuring Sphinx Automodule for Flytekit Shell Tasks\nDESCRIPTION: A Sphinx restructured text directive that configures automatic documentation generation for the flytekit.extras.tasks module. The directive is configured to exclude members, inherited members, and special members from the generated documentation.\nSOURCE: https://github.com/flyteorg/flytekit/blob/master/docs/source/extras.tasks.rst#2025-04-16_snippet_0\n\nLANGUAGE: rst\nCODE:\n```\n.. automodule:: flytekit.extras.tasks\n   :no-members:\n   :no-inherited-members:\n   :no-special-members:\n```\n\n----------------------------------------\n\nTITLE: Configuring Sphinx automodule for flytekit.extend\nDESCRIPTION: This RST directive configures Sphinx to automatically generate documentation for the flytekit.extend module. It specifies to exclude member documentation, inherited members, and special members from the generated output.\nSOURCE: https://github.com/flyteorg/flytekit/blob/master/docs/source/extend.rst#2025-04-16_snippet_0\n\nLANGUAGE: rst\nCODE:\n```\n.. automodule:: flytekit.extend\n   :no-members:\n   :no-inherited-members:\n   :no-special-members:\n```\n\n----------------------------------------\n\nTITLE: Configuring Sphinx automodule for flytekit.deck Documentation\nDESCRIPTION: Sphinx directive to automatically generate documentation for the flytekit.deck module. The configuration excludes members, inherited members, and special members from the documentation output.\nSOURCE: https://github.com/flyteorg/flytekit/blob/master/docs/source/deck.rst#2025-04-16_snippet_0\n\nLANGUAGE: restructuredtext\nCODE:\n```\n.. automodule:: flytekit.deck\n   :no-members:\n   :no-inherited-members:\n   :no-special-members:\n```\n\n----------------------------------------\n\nTITLE: Setting up Flytekit development environment\nDESCRIPTION: Commands to create a virtual environment, activate it, and set up Flytekit for development. This process installs dependencies and Flytekit in editable mode, linking the local repo to the Python environment.\nSOURCE: https://github.com/flyteorg/flytekit/blob/master/docs/source/contributing.rst#2025-04-16_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nvirtualenv ~/.virtualenvs/flytekit\nsource ~/.virtualenvs/flytekit/bin/activate\nmake setup\n```\n\n----------------------------------------\n\nTITLE: Running Flytekit spell-checker\nDESCRIPTION: Commands to activate the virtual environment and run the spell-checker using the make command. This uses codespell to catch spelling mistakes in code and documentation.\nSOURCE: https://github.com/flyteorg/flytekit/blob/master/docs/source/contributing.rst#2025-04-16_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\nsource ~/.virtualenvs/flytekit/bin/activate\nmake spellcheck\n```\n\n----------------------------------------\n\nTITLE: Navigating to Project Directory - Bash Command\nDESCRIPTION: Command to change into the jaffle_shop project directory from the command line.\nSOURCE: https://github.com/flyteorg/flytekit/blob/master/plugins/flytekit-dbt/tests/testdata/jaffle_shop/README.md#2025-04-16_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n$ cd jaffle_shop\n```\n\n----------------------------------------\n\nTITLE: Registering and Executing Flyte Workflow\nDESCRIPTION: Commands for registering and running the Flyte workflow in the deployment environment.\nSOURCE: https://github.com/flyteorg/flytekit/blob/master/plugins/flytekit-optuna/README.md#2025-04-16_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\npyflyte register files .\npyflyte run --name train\n```\n\n----------------------------------------\n\nTITLE: Defining Pi Constant in Python\nDESCRIPTION: Initializes the mathematical constant pi with an approximate value of 3.14.\nSOURCE: https://github.com/flyteorg/flytekit/blob/master/plugins/flytekit-papermill/tests/testdata/nb-simple.ipynb#2025-04-16_snippet_0\n\nLANGUAGE: python\nCODE:\n```\npi = 3.14\n```"
  }
]