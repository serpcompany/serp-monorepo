[
  {
    "owner": "juspay",
    "repo": "hyperswitch",
    "content": "TITLE: Documentation Structure in Markdown\nDESCRIPTION: Markdown documentation outlining the architecture of the HyperSwitch payment processing system. Covers all major components including Router, Scheduler, Database, Locker and Monitoring systems with detailed explanations of their functionalities and interactions.\nSOURCE: https://github.com/juspay/hyperswitch/blob/main/docs/architecture.md#2025-04-16_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n# HyperSwitch Architecture\n\n- [Introduction](#introduction)\n- [Router](#router)\n- [Scheduler](#scheduler)\n  - [Producer (Job scheduler)](#producer-job-scheduler)\n  - [Consumer (Job executor)](#consumer-job-executor)\n- [Database](#database)\n  - [Postgres](#postgres)\n  - [Redis](#redis)\n- [Locker](#locker)\n- [Monitoring](#monitoring)\n```\n\n----------------------------------------\n\nTITLE: OpenAPI POST Endpoint Specification for Payment Intent Creation\nDESCRIPTION: OpenAPI specification defining the POST endpoint for creating payment intents in Hyperswitch. The endpoint path is /v2/payments/create-intent.\nSOURCE: https://github.com/juspay/hyperswitch/blob/main/api-reference-v2/api-reference/payments/payments--create-intent.mdx#2025-04-16_snippet_0\n\nLANGUAGE: openapi\nCODE:\n```\nopenapi: post /v2/payments/create-intent\n```\n\n----------------------------------------\n\nTITLE: OpenAPI Specification for GET /payments/list Endpoint in Hyperswitch\nDESCRIPTION: YAML specification that defines the API contract for retrieving a list of payments from Hyperswitch. This indicates that the endpoint allows querying payments with pagination support.\nSOURCE: https://github.com/juspay/hyperswitch/blob/main/api-reference/api-reference/payments/payments--list.mdx#2025-04-16_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nopenapi: openapi_spec get /payments/list\n```\n\n----------------------------------------\n\nTITLE: OpenAPI Endpoint Definition - Payment Intent Confirmation\nDESCRIPTION: Defines the API endpoint for confirming payment intents in Hyperswitch system. The endpoint path includes the payment ID as a parameter.\nSOURCE: https://github.com/juspay/hyperswitch/blob/main/api-reference-v2/api-reference/payments/payments--confirm-intent.mdx#2025-04-16_snippet_0\n\nLANGUAGE: openapi\nCODE:\n```\nopenapi: post /v2/payments/{id}/confirm-intent\n```\n\n----------------------------------------\n\nTITLE: OpenAPI Path Definition - POST /organization\nDESCRIPTION: OpenAPI/Swagger specification defining the POST endpoint for the /organization path\nSOURCE: https://github.com/juspay/hyperswitch/blob/main/api-reference/api-reference/organization/organization--create.mdx#2025-04-16_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nopenapi: post /organization\n```\n\n----------------------------------------\n\nTITLE: Defining Connector Request Types in Rust\nDESCRIPTION: Example code showing how to define request structures for the Billwerk payment connector. These structures represent the format expected by the connector's API.\nSOURCE: https://github.com/juspay/hyperswitch/blob/main/add_connector_updated.md#2025-04-16_snippet_1\n\nLANGUAGE: rust\nCODE:\n```\n#[derive(Debug, Serialize)]\npub struct BillwerkCustomerObject {\n    handle: Option<id_type::CustomerId>,\n    email: Option<Email>,\n    address: Option<Secret<String>>,\n    address2: Option<Secret<String>>,\n    city: Option<String>,\n    country: Option<common_enums::CountryAlpha2>,\n    first_name: Option<Secret<String>>,\n    last_name: Option<Secret<String>>,\n}\n\n#[derive(Debug, Serialize)]\npub struct BillwerkPaymentsRequest {\n    handle: String,\n    amount: MinorUnit,\n    source: Secret<String>,\n    currency: common_enums::Currency,\n    customer: BillwerkCustomerObject,\n    metadata: Option<SecretSerdeValue>,\n    settle: bool,\n}\n```\n\n----------------------------------------\n\nTITLE: OpenAPI Payment Cancel Endpoint Path Definition\nDESCRIPTION: OpenAPI specification defining the /payments/{payment_id}/cancel endpoint path. Used for payment cancellation operations via API.\nSOURCE: https://github.com/juspay/hyperswitch/blob/main/api-reference/api-reference/payments/payments--cancel.mdx#2025-04-16_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nopenapi: openapi_spec post /payments/{payment_id}/cancel\n```\n\n----------------------------------------\n\nTITLE: Defining OpenAPI Specification for GET /payouts/list Endpoint in Hyperswitch\nDESCRIPTION: This YAML snippet defines the OpenAPI specification for the GET /payouts/list endpoint in the Hyperswitch payment system. It specifies the API structure for retrieving a list of payouts, including request parameters and expected response format.\nSOURCE: https://github.com/juspay/hyperswitch/blob/main/api-reference/api-reference/payouts/payouts--list.mdx#2025-04-16_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nopenapi: get /payouts/list\n```\n\n----------------------------------------\n\nTITLE: OpenAPI PUT Endpoint Path Definition\nDESCRIPTION: Defines the OpenAPI path specification for updating a payment intent by ID via PUT request\nSOURCE: https://github.com/juspay/hyperswitch/blob/main/api-reference-v2/api-reference/payments/payments--update-intent.mdx#2025-04-16_snippet_0\n\nLANGUAGE: openapi\nCODE:\n```\nopenapi: put /v2/payments/{id}/update-intent\n```\n\n----------------------------------------\n\nTITLE: OpenAPI Specification for POST /refunds Endpoint in Hyperswitch\nDESCRIPTION: Defines the OpenAPI specification for creating refunds in the Hyperswitch payment system. This specification outlines the endpoint path, required parameters, request body structure, and possible response scenarios for refund creation.\nSOURCE: https://github.com/juspay/hyperswitch/blob/main/api-reference/api-reference/refunds/refunds--create.mdx#2025-04-16_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nopenapi: openapi_spec post /refunds\n```\n\n----------------------------------------\n\nTITLE: Defining GET /routing/default Endpoint in OpenAPI YAML\nDESCRIPTION: This YAML snippet defines the OpenAPI specification for the GET /routing/default endpoint. It includes the operation ID, summary, description, and response schema for the default routing configuration.\nSOURCE: https://github.com/juspay/hyperswitch/blob/main/api-reference/api-reference/routing/routing--retrieve-default-config.mdx#2025-04-16_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nopenapi: get /routing/default\n```\n\n----------------------------------------\n\nTITLE: OpenAPI GET Payment Endpoint Definition\nDESCRIPTION: OpenAPI specification defining the GET endpoint for retrieving payment details by ID. The path includes a dynamic ID parameter for looking up specific payments.\nSOURCE: https://github.com/juspay/hyperswitch/blob/main/api-reference-v2/api-reference/payments/payments--get.mdx#2025-04-16_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nopenapi: get /v2/payments/{id}\n```\n\n----------------------------------------\n\nTITLE: Testing Payment Authorization in Rust\nDESCRIPTION: Example test case showing how to implement payment authorization testing for a connector using serial tests and actix framework\nSOURCE: https://github.com/juspay/hyperswitch/blob/main/add_connector_updated.md#2025-04-16_snippet_17\n\nLANGUAGE: rust\nCODE:\n```\n#[serial_test::serial]\n#[actix_web::test]\nasync fn should_only_authorize_payment() {\n    let response = CONNECTOR\n        .authorize_payment(payment_method_details(), get_default_payment_info())\n        .await\n        .expect(\"Authorize payment response\");\n    assert_eq!(response.status, enums::AttemptStatus::Authorized);\n}\n```\n\n----------------------------------------\n\nTITLE: Defining OpenAPI Specification for POST /payment_methods Endpoint in YAML\nDESCRIPTION: This YAML snippet defines the OpenAPI specification for the POST /payment_methods endpoint. It includes the endpoint path, HTTP method, and likely contains details about request parameters, responses, and other API-related information.\nSOURCE: https://github.com/juspay/hyperswitch/blob/main/api-reference/api-reference/payment-methods/paymentmethods--create.mdx#2025-04-16_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nopenapi: openapi_spec post /payment_methods\n```\n\n----------------------------------------\n\nTITLE: OpenAPI Payment Confirmation Endpoint Specification\nDESCRIPTION: OpenAPI specification defining the endpoint POST /payments/{payment_id}/confirm. The endpoint is used to confirm payments using a payment ID parameter.\nSOURCE: https://github.com/juspay/hyperswitch/blob/main/api-reference/api-reference/payments/payments--confirm.mdx#2025-04-16_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nopenapi: openapi_spec post /payments/{payment_id}/confirm\n```\n\n----------------------------------------\n\nTITLE: Defining OpenAPI Specification for POST /payouts/create Endpoint in YAML\nDESCRIPTION: This YAML snippet defines the OpenAPI specification for the POST /payouts/create endpoint. It includes details about the API endpoint, request parameters, and response schema for creating payouts in the Hyperswitch system.\nSOURCE: https://github.com/juspay/hyperswitch/blob/main/api-reference/api-reference/payouts/payouts--create.mdx#2025-04-16_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nopenapi: openapi_spec post /payouts/create\n```\n\n----------------------------------------\n\nTITLE: OpenAPI Payment List Endpoint Definition\nDESCRIPTION: YAML specification for the GET /v2/payments/list endpoint that retrieves a list of payments.\nSOURCE: https://github.com/juspay/hyperswitch/blob/main/api-reference-v2/api-reference/payments/payments--list.mdx#2025-04-16_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nopenapi: get /v2/payments/list\n```\n\n----------------------------------------\n\nTITLE: OpenAPI Path Specification for Payment Capture\nDESCRIPTION: Defines the API endpoint path specification for capturing a previously authorized payment using the payment ID parameter\nSOURCE: https://github.com/juspay/hyperswitch/blob/main/api-reference/api-reference/payments/payments--capture.mdx#2025-04-16_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nopenapi: openapi_spec post /payments/{payment_id}/capture\n```\n\n----------------------------------------\n\nTITLE: Defining DELETE Customer Endpoint in OpenAPI Specification for Hyperswitch\nDESCRIPTION: YAML specification for the DELETE /customers/{customer_id} endpoint. This endpoint allows for the removal of a customer record by specifying the customer_id parameter in the path.\nSOURCE: https://github.com/juspay/hyperswitch/blob/main/api-reference/api-reference/customers/customers--delete.mdx#2025-04-16_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nopenapi: openapi_spec delete /customers/{customer_id}\n```\n\n----------------------------------------\n\nTITLE: OpenAPI GET Payment Link Endpoint Specification\nDESCRIPTION: Defines the OpenAPI specification for retrieving payment link details via a GET request using a payment link ID parameter. Includes path, parameters, responses and error scenarios.\nSOURCE: https://github.com/juspay/hyperswitch/blob/main/api-reference/api-reference/payments/payments-link--retrieve.mdx#2025-04-16_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nopenapi: openapi_spec get /payment_link/{payment_link_id}\n```\n\n----------------------------------------\n\nTITLE: Defining OpenAPI Specification for POST /v2/routing-algorithm Endpoint\nDESCRIPTION: This YAML snippet defines the OpenAPI specification for the POST /v2/routing-algorithm endpoint. It includes the request body schema and response structure for the routing algorithm API.\nSOURCE: https://github.com/juspay/hyperswitch/blob/main/api-reference-v2/api-reference/routing/routing--create.mdx#2025-04-16_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nopenapi: post /v2/routing-algorithm\n```\n\n----------------------------------------\n\nTITLE: OpenAPI Payment Method Intent Creation Endpoint\nDESCRIPTION: OpenAPI specification defining the POST endpoint for creating payment method intents. Located at path /v2/payment-methods/create-intent.\nSOURCE: https://github.com/juspay/hyperswitch/blob/main/api-reference-v2/api-reference/payment-methods/payment-method--create-intent.mdx#2025-04-16_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nopenapi: post /v2/payment-methods/create-intent\n```\n\n----------------------------------------\n\nTITLE: Implementing TryFrom for RouterData in Rust\nDESCRIPTION: Implements the TryFrom trait to transform ResponseRouterData into RouterData for the Billwerk connector. This transformation handles error responses and maps the connector's response to the standardized PaymentsResponseData.\nSOURCE: https://github.com/juspay/hyperswitch/blob/main/add_connector_updated.md#2025-04-16_snippet_5\n\nLANGUAGE: rust\nCODE:\n```\nimpl<F, T> TryFrom<ResponseRouterData<F, BillwerkPaymentsResponse, T, PaymentsResponseData>>\n    for RouterData<F, T, PaymentsResponseData>\n{\n    type Error = error_stack::Report<errors::ConnectorError>;\n    fn try_from(\n        item: ResponseRouterData<F, BillwerkPaymentsResponse, T, PaymentsResponseData>,\n    ) -> Result<Self, Self::Error> {\n        let error_response = if item.response.error.is_some() || item.response.error_state.is_some()\n        {\n            Some(ErrorResponse {\n                code: item\n                    .response\n                    .error_state\n                    .clone()\n                    .unwrap_or(NO_ERROR_CODE.to_string()),\n                message: item\n                    .response\n                    .error_state\n                    .unwrap_or(NO_ERROR_MESSAGE.to_string()),\n                reason: item.response.error,\n                status_code: item.http_code,\n                attempt_status: None,\n                connector_transaction_id: Some(item.response.handle.clone()),\n            })\n        } else {\n            None\n        };\n        let payments_response = PaymentsResponseData::TransactionResponse {\n            resource_id: ResponseId::ConnectorTransactionId(item.response.handle.clone()),\n            redirection_data: Box::new(None),\n            mandate_reference: Box::new(None),\n            connector_metadata: None,\n            network_txn_id: None,\n            connector_response_reference_id: Some(item.response.handle),\n            incremental_authorization_allowed: None,\n            charges: None,\n        };\n        Ok(Self {\n            status: enums::AttemptStatus::from(item.response.state),\n            response: error_response.map_or_else(|| Ok(payments_response), Err),\n            ..item.data\n        })\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining OpenAPI Specification for GET /customers/{customer_id}/payment_methods Endpoint\nDESCRIPTION: This YAML snippet defines the OpenAPI specification for retrieving a customer's payment methods. It specifies the endpoint path, HTTP method (GET), and includes a customer_id path parameter.\nSOURCE: https://github.com/juspay/hyperswitch/blob/main/api-reference/api-reference/payment-methods/list-payment-methods-for-a-customer.mdx#2025-04-16_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nopenapi: openapi_spec get /customers/{customer_id}/payment_methods\n```\n\n----------------------------------------\n\nTITLE: Defining OpenAPI Endpoint for Updating Payment Metadata in YAML\nDESCRIPTION: This YAML snippet defines an OpenAPI endpoint for updating metadata of a specific payment. It specifies the HTTP POST method and the path including a payment_id parameter.\nSOURCE: https://github.com/juspay/hyperswitch/blob/main/api-reference/api-reference/payments/payments--update-metadata.mdx#2025-04-16_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nopenapi: post /payments/{payment_id}/update_metadata\n```\n\n----------------------------------------\n\nTITLE: Defining GET /routing API Endpoint in OpenAPI Specification\nDESCRIPTION: OpenAPI specification for the GET /routing endpoint that retrieves merchant routing information. The endpoint requires authentication via Bearer token and returns routing information with different response schemas for success and error cases.\nSOURCE: https://github.com/juspay/hyperswitch/blob/main/api-reference/api-reference/routing/routing--list.mdx#2025-04-16_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nopenapi: get /routing\n```\n\n----------------------------------------\n\nTITLE: Defining OpenAPI Specification for POST /v2/payment-methods Endpoint in YAML\nDESCRIPTION: This YAML snippet defines the OpenAPI specification for the POST /v2/payment-methods endpoint. It specifies the endpoint path, HTTP method, and potentially includes details about request/response schemas, parameters, and other API-related information.\nSOURCE: https://github.com/juspay/hyperswitch/blob/main/api-reference-v2/api-reference/payment-methods/payment-method--create.mdx#2025-04-16_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nopenapi: post /v2/payment-methods\n```\n\n----------------------------------------\n\nTITLE: Defining POST Endpoint for Creating Payment Connector\nDESCRIPTION: OpenAPI route specification for adding a payment connector configuration to an existing merchant account, specified by the account_id path parameter.\nSOURCE: https://github.com/juspay/hyperswitch/blob/main/api-reference/api-reference/merchant-connector-account/merchant-connector--create.mdx#2025-04-16_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nopenapi: post /accounts/{account_id}/connectors\n```\n\n----------------------------------------\n\nTITLE: OpenAPI GET Refund Endpoint Specification\nDESCRIPTION: Defines the OpenAPI specification for retrieving refund details using a refund ID. The path includes a refund_id parameter.\nSOURCE: https://github.com/juspay/hyperswitch/blob/main/api-reference/api-reference/refunds/refunds--retrieve.mdx#2025-04-16_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nopenapi: openapi_spec get /refunds/{refund_id}\n```\n\n----------------------------------------\n\nTITLE: Defining GET /accounts/{account_id} Endpoint in OpenAPI\nDESCRIPTION: This YAML snippet defines the OpenAPI specification for the GET /accounts/{account_id} endpoint. It specifies the path, HTTP method, and likely includes details about parameters, responses, and security requirements for retrieving account information.\nSOURCE: https://github.com/juspay/hyperswitch/blob/main/api-reference/api-reference/merchant-account/merchant-account--retrieve.mdx#2025-04-16_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nopenapi: get /accounts/{account_id}\n```\n\n----------------------------------------\n\nTITLE: OpenAPI PATCH Endpoint Definition - Update Saved Payment Method\nDESCRIPTION: OpenAPI specification for a PATCH endpoint that handles updating saved payment method details. The endpoint takes a payment method ID as a path parameter.\nSOURCE: https://github.com/juspay/hyperswitch/blob/main/api-reference-v2/api-reference/payment-methods/payment-method--update.mdx#2025-04-16_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nopenapi: patch /v2/payment-methods/{id}/update-saved-payment-method\n```\n\n----------------------------------------\n\nTITLE: Defining OpenAPI Endpoint for Deleting Connector (YAML)\nDESCRIPTION: This YAML snippet defines the OpenAPI specification for the DELETE endpoint to remove a connector from an account. It includes the path parameters for account_id and connector_id.\nSOURCE: https://github.com/juspay/hyperswitch/blob/main/api-reference/api-reference/merchant-connector-account/merchant-connector--delete.mdx#2025-04-16_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nopenapi: delete /accounts/{account_id}/connectors/{connector_id}\n```\n\n----------------------------------------\n\nTITLE: Installing Hyperswitch Locally with Docker Compose\nDESCRIPTION: Shell commands to clone the Hyperswitch repository, start the services using Docker Compose, and verify the setup. This provides a local development environment for the payment orchestration platform.\nSOURCE: https://github.com/juspay/hyperswitch/blob/main/README.md#2025-04-16_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\ngit clone --depth 1 --branch latest https://github.com/juspay/hyperswitch\ncd hyperswitch\ndocker compose up -d\n# This script verifies the setup and provides links to the individual components.\nscripts/docker_output.sh\n```\n\n----------------------------------------\n\nTITLE: Setting Up Development Environment with Docker Compose\nDESCRIPTION: Commands to clone and set up a development environment using Docker Compose.\nSOURCE: https://github.com/juspay/hyperswitch/blob/main/docs/try_local_system.md#2025-04-16_snippet_6\n\nLANGUAGE: shell\nCODE:\n```\ngit clone https://github.com/juspay/hyperswitch\ncd hyperswitch\ndocker compose --file docker-compose-development.yml up -d\n```\n\n----------------------------------------\n\nTITLE: Logging Example in Rust for Payment Router\nDESCRIPTION: This snippet demonstrates how to use the custom logger in a payment router environment. It shows the usage of the 'instrument' attribute for tracing and how to log various payment-related information using structured logging.\nSOURCE: https://github.com/juspay/hyperswitch/blob/main/crates/router_env/README.md#2025-04-16_snippet_0\n\nLANGUAGE: rust\nCODE:\n```\nuse router_env::logger;\nuse tracing::{self, instrument};\n\n#[instrument]\npub fn sample() -> () {\n    logger::log!(\n        logger::Level::INFO,\n        payment_id = 8565654,\n        payment_attempt_id = 596456465,\n        merchant_id = 954865,\n        tag = ?logger::Tag::ApiIncomingRequest,\n        category = ?logger::Category::Api,\n        flow = \"some_flow\",\n        session_id = \"some_session\",\n    );\n}\n```\n\n----------------------------------------\n\nTITLE: Defining POST Endpoint for Account Key-Value Pairs in OpenAPI\nDESCRIPTION: This YAML snippet defines the OpenAPI specification for a POST endpoint to create or update key-value pairs for a specific account. It includes the path parameter for the account ID, request body structure, and possible response codes.\nSOURCE: https://github.com/juspay/hyperswitch/blob/main/api-reference/api-reference/merchant-account/merchant-account--kv-status.mdx#2025-04-16_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nopenapi: post /accounts/{account_id}/kv\n```\n\n----------------------------------------\n\nTITLE: Defining OpenAPI Endpoint for Deleting Payment Methods\nDESCRIPTION: This YAML snippet specifies the OpenAPI endpoint for deleting a payment method. It defines the HTTP DELETE method and the path with a parameter for the payment method ID.\nSOURCE: https://github.com/juspay/hyperswitch/blob/main/api-reference-v2/api-reference/payment-methods/payment-method--delete.mdx#2025-04-16_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nopenapi: delete /v2/payment-methods/{id}\n```\n\n----------------------------------------\n\nTITLE: Defining GET Endpoint for Customer Retrieval in OpenAPI\nDESCRIPTION: Specifies the OpenAPI structure for a GET request to retrieve customer details using their ID. The endpoint is defined as '/v2/customers/{id}' where {id} is a path parameter representing the unique customer identifier.\nSOURCE: https://github.com/juspay/hyperswitch/blob/main/api-reference-v2/api-reference/customers/customers--retrieve.mdx#2025-04-16_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nopenapi: get /v2/customers/{id}\n```\n\n----------------------------------------\n\nTITLE: OpenAPI POST Endpoint Definition - API Keys\nDESCRIPTION: OpenAPI specification for an endpoint that generates or manages API keys for a specific merchant ID. The endpoint is defined with the POST method.\nSOURCE: https://github.com/juspay/hyperswitch/blob/main/api-reference/api-reference/api-key/api-key--create.mdx#2025-04-16_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nopenapi: post /api_keys/{merchant_id}\n```\n\n----------------------------------------\n\nTITLE: OpenAPI Specification for POST /v2/customers Endpoint\nDESCRIPTION: This YAML snippet defines the OpenAPI specification for the POST /v2/customers endpoint. It specifies the HTTP method, path, and likely includes details about request body, parameters, responses, and security requirements.\nSOURCE: https://github.com/juspay/hyperswitch/blob/main/api-reference-v2/api-reference/customers/customers--create.mdx#2025-04-16_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nopenapi: post /v2/customers\n```\n\n----------------------------------------\n\nTITLE: OpenAPI GET Endpoint for Customer Payment Methods\nDESCRIPTION: OpenAPI/Swagger specification defining the endpoint path for retrieving a customer's saved payment methods using their ID.\nSOURCE: https://github.com/juspay/hyperswitch/blob/main/api-reference-v2/api-reference/payment-methods/list-saved-payment-methods-for-a-customer.mdx#2025-04-16_snippet_0\n\nLANGUAGE: openapi\nCODE:\n```\nopenapi: get /v2/customers/{id}/saved-payment-methods\n```\n\n----------------------------------------\n\nTITLE: Complete Request Assembly for Connector in Rust\nDESCRIPTION: Implementation of build_request method that combines URL, headers, and body into a complete API request.\nSOURCE: https://github.com/juspay/hyperswitch/blob/main/add_connector_updated.md#2025-04-16_snippet_11\n\nLANGUAGE: rust\nCODE:\n```\nfn build_request(\n    &self,\n    req: &TokenizationRouterData,\n    connectors: &Connectors,\n) -> CustomResult<Option<Request>, errors::ConnectorError> {\n    Ok(Some(\n        RequestBuilder::new()\n            .method(Method::Post)\n            .url(&types::TokenizationType::get_url(self, req, connectors)?)\n            .attach_default_headers()\n            .headers(types::TokenizationType::get_headers(self, req, connectors)?)\n            .set_body(types::TokenizationType::get_request_body(\n                self, req, connectors,\n            )?)\n            .build(),\n    ))\n}\n```\n\n----------------------------------------\n\nTITLE: OpenAPI GET Endpoint for Payment Intent Retrieval\nDESCRIPTION: OpenAPI specification defining the endpoint path for retrieving payment intent details using a payment ID. The endpoint follows RESTful conventions with the path /v2/payments/{id}/get-intent.\nSOURCE: https://github.com/juspay/hyperswitch/blob/main/api-reference-v2/api-reference/payments/payments--get-intent.mdx#2025-04-16_snippet_0\n\nLANGUAGE: openapi\nCODE:\n```\nopenapi: get /v2/payments/{id}/get-intent\n```\n\n----------------------------------------\n\nTITLE: Defining OpenAPI GET Endpoint for API Key Retrieval in YAML\nDESCRIPTION: Specifies the OpenAPI path for retrieving an API key. The endpoint requires merchant_id and key_id as path parameters.\nSOURCE: https://github.com/juspay/hyperswitch/blob/main/api-reference/api-reference/api-key/api-key--retrieve.mdx#2025-04-16_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nopenapi: get /api_keys/{merchant_id}/{key_id}\n```\n\n----------------------------------------\n\nTITLE: Defining OpenAPI GET Endpoint for Customer List in YAML\nDESCRIPTION: This YAML snippet specifies the OpenAPI definition for a GET endpoint to retrieve a list of customers. It includes the path, HTTP method, and likely contains additional details such as parameters, responses, and security requirements.\nSOURCE: https://github.com/juspay/hyperswitch/blob/main/api-reference-v2/api-reference/customers/customers--list.mdx#2025-04-16_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nopenapi: get /v2/customers/list\n```\n\n----------------------------------------\n\nTITLE: Defining OpenAPI GET Endpoint for Customer Saved Payment Methods in YAML\nDESCRIPTION: This YAML snippet defines an OpenAPI endpoint for retrieving saved payment methods for a specific customer. It specifies the path parameters, request details, and possible response scenarios.\nSOURCE: https://github.com/juspay/hyperswitch/blob/main/api-reference-v2/api-reference/payment-methods/list-payment-methods-for-a-customer.mdx#2025-04-16_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nopenapi: get /v2/customers/{id}/saved-payment-methods\n```\n\n----------------------------------------\n\nTITLE: OpenAPI GET Endpoint Definition for Business Profile\nDESCRIPTION: OpenAPI path specification for retrieving business profile data using account ID and profile ID parameters.\nSOURCE: https://github.com/juspay/hyperswitch/blob/main/api-reference/api-reference/business-profile/business-profile--retrieve.mdx#2025-04-16_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nopenapi: get /account/{account_id}/business_profile/{profile_id}\n```\n\n----------------------------------------\n\nTITLE: OpenAPI Customer Endpoint Specification\nDESCRIPTION: YAML specification defining the POST endpoint for customer operations with a customer_id path parameter.\nSOURCE: https://github.com/juspay/hyperswitch/blob/main/api-reference/api-reference/customers/customers--update.mdx#2025-04-16_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nopenapi: openapi_spec post /customers/{customer_id}\n```\n\n----------------------------------------\n\nTITLE: Error Code Table - Hyperswitch Error Classification\nDESCRIPTION: Table defining the unified error code system used in Hyperswitch, including error codes, categories, and standardized error messages. The codes range from customer errors (1000 series) to general system errors (9000 series).\nSOURCE: https://github.com/juspay/hyperswitch/blob/main/api-reference/essentials/error_codes.mdx#2025-04-16_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n| Unified Error Code | Unified Error Categorisation          | Unified Error message               |\n| ------------------ | ------------------------------------- | ----------------------------------- |\n| UE_1000            | Customer Error                        | Issue with payment method details.  |\n| UE_2000            | Connector Declines                    | Issue with Configurations.          |\n| UE_3000            | Connector Error                       | Technical issue with PSP.           |\n| UE_4000            | Integration Error                     | Issue in the integration.           |\n| UE_9000            | Others                                | Something went wrong.               |\n```\n\n----------------------------------------\n\nTITLE: OpenAPI GET Endpoint Path Definition\nDESCRIPTION: OpenAPI path definition for retrieving a list of enabled payment methods for a given ID. The endpoint is versioned as v2 and uses path parameters.\nSOURCE: https://github.com/juspay/hyperswitch/blob/main/api-reference-v2/api-reference/payment-methods/payment-methods--payment-methods-list.mdx#2025-04-16_snippet_0\n\nLANGUAGE: openapi\nCODE:\n```\nopenapi: get /v2/payment-methods/{id}/list-enabled-payment-methods\n```\n\n----------------------------------------\n\nTITLE: Error Response Handling for Connector in Rust\nDESCRIPTION: Implementation of get_error_response method that manages error responses using common error handling logic.\nSOURCE: https://github.com/juspay/hyperswitch/blob/main/add_connector_updated.md#2025-04-16_snippet_13\n\nLANGUAGE: rust\nCODE:\n```\nfn get_error_response(\n    &self,\n    res: Response,\n    event_builder: Option<&mut ConnectorEvent>,\n) -> CustomResult<ErrorResponse, errors::ConnectorError> {\n    self.build_error_response(res, event_builder)\n}\n```\n\n----------------------------------------\n\nTITLE: OpenAPI Endpoint Definition - PUT /v2/connector-accounts/{id}\nDESCRIPTION: OpenAPI/Swagger path specification for updating connector account records in the Hyperswitch payment system.\nSOURCE: https://github.com/juspay/hyperswitch/blob/main/api-reference-v2/api-reference/connector-account/connector-account--update.mdx#2025-04-16_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nopenapi: put /v2/connector-accounts/{id}\n```\n\n----------------------------------------\n\nTITLE: OpenAPI Payout ID Endpoint Specification\nDESCRIPTION: YAML specification defining the OpenAPI endpoint structure for retrieving payout details via a payout ID path parameter.\nSOURCE: https://github.com/juspay/hyperswitch/blob/main/api-reference/api-reference/payouts/payouts--retrieve.mdx#2025-04-16_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nopenapi: openapi_spec get /payouts/{payout_id}\n```\n\n----------------------------------------\n\nTITLE: OpenAPI Specification for Payment Methods Update Endpoint\nDESCRIPTION: This YAML snippet defines the OpenAPI specification for updating payment methods via a POST request to the /payment_methods/{method_id}/update endpoint. It includes path parameter definition for the method_id.\nSOURCE: https://github.com/juspay/hyperswitch/blob/main/api-reference/api-reference/payment-methods/payment-method--update.mdx#2025-04-16_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nopenapi: openapi_spec post /payment_methods/{method_id}/update\n```\n\n----------------------------------------\n\nTITLE: Defining GET Endpoint for Saved Payment Methods in OpenAPI YAML\nDESCRIPTION: This YAML snippet specifies the OpenAPI definition for the GET /v2/customers/{id}/saved-payment-methods endpoint. It includes path parameters, query parameters, and response schemas for successful and error cases.\nSOURCE: https://github.com/juspay/hyperswitch/blob/main/api-reference-v2/api-reference/customers/customers--list-saved-payment-methods.mdx#2025-04-16_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nopenapi: get /v2/customers/{id}/saved-payment-methods\n```\n\n----------------------------------------\n\nTITLE: Card Types Documentation\nDESCRIPTION: Documentation header explaining the purpose of the card types module for masking and validation.\nSOURCE: https://github.com/juspay/hyperswitch/blob/main/crates/cards/README.md#2025-04-16_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n# Cards\n\nTypes to handle card masking and validation.\n```\n\n----------------------------------------\n\nTITLE: Delete Payment Method Session Endpoint\nDESCRIPTION: OpenAPI specification for the DELETE endpoint to remove a payment method session. The endpoint takes a session ID as a path parameter.\nSOURCE: https://github.com/juspay/hyperswitch/blob/main/api-reference-v2/api-reference/payment-method-session/payment-method-session--delete-a-saved-payment-method.mdx#2025-04-16_snippet_0\n\nLANGUAGE: openapi\nCODE:\n```\nopenapi: delete /v2/payment-method-session/:id\n```\n\n----------------------------------------\n\nTITLE: Implementing ConnectorCommon Trait for Billwerk in Rust\nDESCRIPTION: Implements the ConnectorCommon trait for the Billwerk connector. This trait provides common functionality such as connector ID, currency unit, content type, authentication headers, and error response handling.\nSOURCE: https://github.com/juspay/hyperswitch/blob/main/add_connector_updated.md#2025-04-16_snippet_7\n\nLANGUAGE: rust\nCODE:\n```\nfn id(&self) -> &'static str {\n    \"Billwerk\"\n}\n\nfn get_currency_unit(&self) -> api::CurrencyUnit {\n    api::CurrencyUnit::Minor\n}\n\nfn common_get_content_type(&self) -> &'static str {\n    \"application/json\"\n}\n\nfn get_auth_header(\n    &self,\n    auth_type: &ConnectorAuthType,\n) -> CustomResult<Vec<(String, masking::Maskable<String>)>, errors::ConnectorError> {\n    let auth = BillwerkAuthType::try_from(auth_type)\n        .change_context(errors::ConnectorError::FailedToObtainAuthType)?;\n    let encoded_api_key = BASE64_ENGINE.encode(format!(\"{}\", auth.api_key.peek()));\n    Ok(vec![(headers::AUTHORIZATION.to_string(), format!(\"Basic {encoded_api_key}\").into_masked(),)])\n}\n\nfn base_url<'a>(&self, connectors: &'a Connectors) -> &'a str {\n    connectors.billwerk.base_url.as_ref()\n}\n\nfn build_error_response(\n    &self,\n    res: Response,\n    event_builder: Option<&mut ConnectorEvent>,\n) -> CustomResult<ErrorResponse, errors::ConnectorError> {\n    let response: BillwerkErrorResponse = res\n        .response\n        .parse_struct(\"BillwerkErrorResponse\")\n        .change_context(errors::ConnectorError::ResponseDeserializationFailed)?;\n\n    event_builder.map(|i| i.set_response_body(&response));\n    router_env::logger::info!(connector_response=?response);\n\n    Ok(ErrorResponse {\n        status_code: res.status_code,\n        code: response\n            .code\n            .map_or(NO_ERROR_CODE.to_string(), |code| code.to_string()),\n        message: response.message.unwrap_or(NO_ERROR_MESSAGE.to_string()),\n        reason: Some(response.error),\n        attempt_status: None,\n        connector_transaction_id: None,\n    })\n}\n```\n\n----------------------------------------\n\nTITLE: OpenAPI DELETE Payment Method Endpoint Specification\nDESCRIPTION: OpenAPI specification defining the endpoint for deleting a payment method using its unique identifier. The path includes method_id as a path parameter.\nSOURCE: https://github.com/juspay/hyperswitch/blob/main/api-reference/api-reference/payment-methods/payment-method--delete.mdx#2025-04-16_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nopenapi: openapi_spec delete /payment_methods/{method_id}\n```\n\n----------------------------------------\n\nTITLE: Defining POST /v2/organization Endpoint in OpenAPI YAML\nDESCRIPTION: This YAML snippet defines the OpenAPI specification for the POST /v2/organization endpoint. It includes the request body schema and potential response codes.\nSOURCE: https://github.com/juspay/hyperswitch/blob/main/api-reference-v2/api-reference/organization/organization--create.mdx#2025-04-16_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nopenapi: post /v2/organization\n```\n\n----------------------------------------\n\nTITLE: Request Body Construction for Connector in Rust\nDESCRIPTION: Implementation of get_request_body method that transforms Hyperswitch payment request into connector format.\nSOURCE: https://github.com/juspay/hyperswitch/blob/main/add_connector_updated.md#2025-04-16_snippet_10\n\nLANGUAGE: rust\nCODE:\n```\nfn get_request_body(\n    &self,\n    req: &TokenizationRouterData,\n    _connectors: &Connectors,\n) -> CustomResult<RequestContent, errors::ConnectorError> {\n    let connector_req = BillwerkTokenRequest::try_from(req)?;\n    Ok(RequestContent::Json(Box::new(connector_req)))\n}\n```\n\n----------------------------------------\n\nTITLE: Delete Account OpenAPI Specification\nDESCRIPTION: OpenAPI specification defining the DELETE endpoint for removing an account by its account_id parameter.\nSOURCE: https://github.com/juspay/hyperswitch/blob/main/api-reference/api-reference/merchant-account/merchant-account--delete.mdx#2025-04-16_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nopenapi: delete /accounts/{account_id}\n```\n\n----------------------------------------\n\nTITLE: URL Generation for Connector Integration in Rust\nDESCRIPTION: Implementation of get_url method that constructs the endpoint URL for authorize flow using the connector's base URL.\nSOURCE: https://github.com/juspay/hyperswitch/blob/main/add_connector_updated.md#2025-04-16_snippet_8\n\nLANGUAGE: rust\nCODE:\n```\nfn get_url(\n    &self,\n    _req: &TokenizationRouterData,\n    connectors: &Connectors,\n) -> CustomResult<String, errors::ConnectorError> {\n    let base_url = connectors\n        .billwerk\n        .secondary_base_url\n        .as_ref()\n        .ok_or(errors::ConnectorError::FailedToObtainIntegrationUrl)?;\n    Ok(format!(\"{base_url}v1/token\"))\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Hyperswitch Consumer in Docker Compose\nDESCRIPTION: YAML snippet for configuring the Hyperswitch consumer service in a Docker Compose file, including image, command, volume mapping, and environment variables.\nSOURCE: https://github.com/juspay/hyperswitch/blob/main/config/deployments/README.md#2025-04-16_snippet_6\n\nLANGUAGE: yaml\nCODE:\n```\nhyperswitch-consumer:\n  image: docker.juspay.io/juspaydotin/hyperswitch-consumer:latest\n  command: /local/bin/scheduler --config-path /local/config/deployments/consumer_sandbox_release.toml\n  volumes:\n    - ./config:/local/config\n  environment:\n    - SCHEDULER_FLOW=consumer\n```\n\n----------------------------------------\n\nTITLE: OpenAPI Payment Method Confirmation Endpoint Path\nDESCRIPTION: OpenAPI specification defining the endpoint path for confirming a payment method with a payment intent.\nSOURCE: https://github.com/juspay/hyperswitch/blob/main/api-reference-v2/api-reference/payment-methods/payment-method--confirm-intent.mdx#2025-04-16_snippet_0\n\nLANGUAGE: openapi\nCODE:\n```\nopenapi: post /v2/payment-methods/{id}/confirm-intent\n```\n\n----------------------------------------\n\nTITLE: OpenAPI Specification for GET Dispute Endpoint in YAML\nDESCRIPTION: This snippet defines the OpenAPI specification for retrieving dispute information by ID. It specifies the endpoint path format where 'dispute_id' is a path parameter.\nSOURCE: https://github.com/juspay/hyperswitch/blob/main/api-reference/api-reference/disputes/disputes--retrieve.mdx#2025-04-16_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nopenapi: openapi_spec get /disputes/{dispute_id}\n```\n\n----------------------------------------\n\nTITLE: OpenAPI GET Organization Endpoint Definition\nDESCRIPTION: OpenAPI specification for an endpoint that retrieves organization details by ID. Uses path parameter {id} to identify the target organization.\nSOURCE: https://github.com/juspay/hyperswitch/blob/main/api-reference-v2/api-reference/organization/organization--retrieve.mdx#2025-04-16_snippet_0\n\nLANGUAGE: openapi\nCODE:\n```\nopenapi: get /v2/organization/{id}\n```\n\n----------------------------------------\n\nTITLE: Header Management for Connector Requests in Rust\nDESCRIPTION: Implementation of get_headers method that retrieves HTTP headers for the authorize flow using common headers from ConnectorCommonExt trait.\nSOURCE: https://github.com/juspay/hyperswitch/blob/main/add_connector_updated.md#2025-04-16_snippet_9\n\nLANGUAGE: rust\nCODE:\n```\nfn get_headers(\n    &self,\n    req: &TokenizationRouterData,\n    connectors: &Connectors,\n) -> CustomResult<Vec<(String, masking::Maskable<String>)>, errors::ConnectorError> {\n    self.build_headers(req, connectors)\n}\n```\n\n----------------------------------------\n\nTITLE: Starting Nix Development Environment\nDESCRIPTION: Command to initialize the Nix development environment with project dependencies.\nSOURCE: https://github.com/juspay/hyperswitch/blob/main/docs/try_local_system.md#2025-04-16_snippet_8\n\nLANGUAGE: shell\nCODE:\n```\nnix develop\n```\n\n----------------------------------------\n\nTITLE: OpenAPI GET Business Profile Endpoint\nDESCRIPTION: OpenAPI route definition for retrieving business profile data for a specific account. The endpoint follows a RESTful pattern using the account_id path parameter.\nSOURCE: https://github.com/juspay/hyperswitch/blob/main/api-reference/api-reference/business-profile/business-profile--list.mdx#2025-04-16_snippet_0\n\nLANGUAGE: openapi\nCODE:\n```\nopenapi: get /account/{account_id}/business_profile\n```\n\n----------------------------------------\n\nTITLE: OpenAPI GET Mandate Endpoint Definition\nDESCRIPTION: OpenAPI specification for the GET /mandates/{mandate_id} endpoint to retrieve mandate details by ID.\nSOURCE: https://github.com/juspay/hyperswitch/blob/main/api-reference/api-reference/mandates/mandates--retrieve-mandate.mdx#2025-04-16_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nopenapi: openapi_spec get /mandates/{mandate_id}\n```\n\n----------------------------------------\n\nTITLE: Defining GET Endpoint for Organization Merchant Accounts in OpenAPI\nDESCRIPTION: Specifies the OpenAPI structure for a GET request to retrieve merchant accounts for a given organization ID. The endpoint is defined as '/v2/organization/{id}/merchant-accounts', where {id} is a path parameter representing the organization's unique identifier.\nSOURCE: https://github.com/juspay/hyperswitch/blob/main/api-reference-v2/api-reference/organization/organization--merchant-account--list.mdx#2025-04-16_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nopenapi: get /v2/organization/{id}/merchant-accounts\n```\n\n----------------------------------------\n\nTITLE: Common Header Construction Extension in Rust\nDESCRIPTION: Implementation of ConnectorCommonExt trait for building common and authorization headers.\nSOURCE: https://github.com/juspay/hyperswitch/blob/main/add_connector_updated.md#2025-04-16_snippet_14\n\nLANGUAGE: rust\nCODE:\n```\nimpl<Flow, Request, Response> ConnectorCommonExt<Flow, Request, Response> for Billwerk\nwhere\n    Self: ConnectorIntegration<Flow, Request, Response>,\n{\n    fn build_headers(\n        &self,\n        req: &RouterData<Flow, Request, Response>,\n        _connectors: &Connectors,\n    ) -> CustomResult<Vec<(String, masking::Maskable<String>)>, errors::ConnectorError> {\n        let mut header = vec![\n            headers::CONTENT_TYPE.to_string(),\n            self.get_content_type().to_string().into(),\n        ];\n        let mut api_key = self.get_auth_header(&req.connector_auth_type)?;\n        header.append(&mut api_key);\n        Ok(header)\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Verifying Hyperswitch Server Health\nDESCRIPTION: Shell command to check the health of the Hyperswitch server by sending a GET request to the health check endpoint.\nSOURCE: https://github.com/juspay/hyperswitch/blob/main/config/deployments/README.md#2025-04-16_snippet_8\n\nLANGUAGE: shell\nCODE:\n```\ncurl --head --request GET 'http://localhost:8080/health'\n```\n\n----------------------------------------\n\nTITLE: Response Handling for Connector in Rust\nDESCRIPTION: Implementation of handle_response method that transforms connector response data into Hyperswitch format.\nSOURCE: https://github.com/juspay/hyperswitch/blob/main/add_connector_updated.md#2025-04-16_snippet_12\n\nLANGUAGE: rust\nCODE:\n```\nfn handle_response(\n    &self,\n    data: &TokenizationRouterData,\n    event_builder: Option<&mut ConnectorEvent>,\n    res: Response,\n) -> CustomResult<TokenizationRouterData, errors::ConnectorError>\nwhere\n    PaymentsResponseData: Clone,\n{\n    let response: BillwerkTokenResponse = res\n        .response\n        .parse_struct(\"BillwerkTokenResponse\")\n        .change_context(errors::ConnectorError::ResponseDeserializationFailed)?;\n    event_builder.map(|i| i.set_response_body(&response));\n    router_env::logger::info!(connector_response=?response);\n    RouterData::try_from(ResponseRouterData {\n        response,\n        data: data.clone(),\n        http_code: res.status_code,\n    })\n    .change_context(errors::ConnectorError::ResponseHandlingFailed)\n}\n```\n\n----------------------------------------\n\nTITLE: Generating OpenAPI Specification File for Hyperswitch\nDESCRIPTION: Command to manually generate the OpenAPI specification file for Hyperswitch API. This uses the Rust crate 'openapi' with the 'v2' feature enabled.\nSOURCE: https://github.com/juspay/hyperswitch/blob/main/api-reference-v2/README.md#2025-04-16_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ncargo r -p openapi --features v2\n```\n\n----------------------------------------\n\nTITLE: Defining OpenAPI Endpoint for Revoking Mandates\nDESCRIPTION: This YAML snippet specifies the OpenAPI structure for a POST request to revoke a mandate. It includes the endpoint path with a mandate_id parameter.\nSOURCE: https://github.com/juspay/hyperswitch/blob/main/api-reference/api-reference/mandates/mandates--revoke-mandate.mdx#2025-04-16_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nopenapi: openapi_spec post /mandates/revoke/{mandate_id}\n```\n\n----------------------------------------\n\nTITLE: OpenAPI GET Endpoint - Merchant Account Retrieval\nDESCRIPTION: YAML definition for a GET endpoint that retrieves merchant account details by ID. The endpoint path includes an ID parameter for specifying which account to fetch.\nSOURCE: https://github.com/juspay/hyperswitch/blob/main/api-reference-v2/api-reference/merchant-account/merchant-account--retrieve.mdx#2025-04-16_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nopenapi: get /v2/merchant-accounts/{id}\n```\n\n----------------------------------------\n\nTITLE: Defining GET Endpoint for API Key List in OpenAPI\nDESCRIPTION: This YAML snippet specifies the OpenAPI definition for the GET /v2/api-keys/list endpoint. It outlines the path, HTTP method, and likely includes details about request parameters, responses, and authentication requirements for retrieving a list of API keys.\nSOURCE: https://github.com/juspay/hyperswitch/blob/main/api-reference-v2/api-reference/api-key/api-key--list.mdx#2025-04-16_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nopenapi: get /v2/api-keys/list\n```\n\n----------------------------------------\n\nTITLE: Defining OpenAPI GET Endpoint for Profile Retrieval in YAML\nDESCRIPTION: This YAML snippet specifies the OpenAPI structure for a GET endpoint used to retrieve profile information by ID. It defines the route path '/v2/profiles/{id}' where {id} is a path parameter representing the unique identifier of the profile to be retrieved.\nSOURCE: https://github.com/juspay/hyperswitch/blob/main/api-reference-v2/api-reference/profile/profile--retrieve.mdx#2025-04-16_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nopenapi: get /v2/profiles/{id}\n```\n\n----------------------------------------\n\nTITLE: Error Code Documentation Table in Markdown\nDESCRIPTION: Tabular documentation of error codes with their corresponding HTTP status codes, error types, descriptions, and resolution steps.\nSOURCE: https://github.com/juspay/hyperswitch/blob/main/api-reference-v2/essentials/error_codes.mdx#2025-04-16_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n| CE_02       | 400                                   | processing_error      | Payment failed during authentication with the connector. Retry payment                                                                                              | Retry the payment again as payment failed at the connector during authentication                                                                                                     |\n| CE_03       | 400                                   | processing_error      | Capture attempt failed while processing with the connector                                                                                                          | Capture failed for the payment at the connector. Please retry the payment                                                                                                            |\n| CE_04       | 400                                   | processing_error      | The card data is invalid                                                                                                                                            | Invalid card data passed. Please pass valid card data                                                                                                                                |\n| CE_05       | 400                                   | processing_error      | The card has expired                                                                                                                                                | Card expired. Please pass valid card data                                                                                                                                            |\n| CE_06       | 400                                   | processing_error      | Refund failed while processing with the connector. Retry refund                                                                                                     | Refund failed to process at the connector. Please retry refund                                                                                                                       |\n| CE_07       | 400                                   | processing_error      | Verification failed while processing with the connector. Retry operation                                                                                            | Retry the operation again as verification failed at the connector                                                                                                                    |\n| CE_08       | 400                                      | processing_error      | Dispute operation failed while processing with connector. Retry operation                                                                                           | Retry the operation again as dispute failed at the connector                                                                                                                                   |\n| CE_09       | 400                                      | invalid_request_error      | Payout validation failed                                                                                                                                       | Retry the operation again with correct Payout details.                                                                                                                                    |\n| HE_00       | 422,500                                   | server_not_available      | Resource not available right now, Please try again later.                                                                                                         | Please Wait for a few moments and try again. If the error still persists, please reach out to Hyperswitch support                                                                              |\n| HE_01       | 400,422                                   | duplicate_request       | Requested operation(Customer, Payments, Merchants, Refunds etc.) for these identifier already exists.                                                              | Please verify the Details(Customer, Payments, Merchants, Refunds, as applicable on the basis of request) and enter valid details.                                                                                         |\n| HE_02       | 404                                   | object_not_found      | Requested object(Customer, Payments, Merchants, Refunds etc.) does not exist in our records                                                                         | Please verify the Details(Customer, Payments, Merchants, Refunds, as applicable on the basis of request) and enter valid details.                                                                               |\n| HE_03       | 500                                   | validation_error      | Validation Failed for the requested operation with the given details.                                                                                               | Please verify the details again and enter valid details                                                                                                                      |\n| HE_04       | 404                                   | object_not_found          | Requested object(Customer, Payments, Merchants, Refunds etc.) does not exist in our records                                                                     | Please verify the Details(Customer, Payments, Merchants, Refunds, as applicable on the basis of request) and enter valid details.                                                                                                                 |\n| HE_05       | 500                                   | processing_error          | Missing or invalid tenant details.                                                                                                                               | Please verify the tenant Details and try again.                                                                                                                 |\n| WE_01       | 400                                   | invalid_request_error    | Failed to authenticate the webhook                                                                                                                         | Please verify the authentication credentials and try again.                                                                         |\n| WE_02       | 400                                   | invalid_request_error              | Bad request received in webhook                                                                                                                            | Check the request parameters and format, then try again.                                                                            |\n| WE_03       | 500                                   | router_error       | There was some issue processing the webhook                                                                                                                | Please try again later. If the issue persists, contact Hyperswitch support.                                                                     |\n| WE_04       | 404                                   | object_not_found        | Webhook resource not found                                                                                                                                 | Ensure the webhook URL is correct and the resource exists.                                                                          |\n| WE_05       | 400                                   | invalid_request_error     | Unable to process the webhook body                                                                                                                         | Ensure the webhook body is correctly formatted and try again.                                                                       |\n| WE_06       | 400                                   | invalid_request_error   | Merchant Secret set by merchant for webhook source verification is invalid                                                                                 | Verify the Merchant Secret, then try again.                                                              |\n```\n\n----------------------------------------\n\nTITLE: Error Code Documentation Table\nDESCRIPTION: Tabular representation of error codes with their corresponding status codes, error types, descriptions, and resolution steps.\nSOURCE: https://github.com/juspay/hyperswitch/blob/main/api-reference/essentials/error_codes.mdx#2025-04-16_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n| IR_39       | 400                                    | invalid_request_error | required payment method is not configured or configured incorrectly for all configured connectors                                                                   | Verify that the required payment method is correctly configured for all connectors in use.                                                                                       |\n| CE_00       | Status codes shared by the connectors | connector_error       | \"message\"                                                                                                                                                           | The error code and message passed from the connectors. Refer to the respective connector's documentation for more information on the error                                           |\n| CE_01       | 400                                   | processing_error      | Payment failed during authorization with the connector. Retry payment                                                                                               | Retry the payment again as payment failed at the connector during authorization                                                                                                      |\n```\n\n----------------------------------------\n\nTITLE: Defining OpenAPI Spec for /refunds/list Endpoint\nDESCRIPTION: OpenAPI specification header declaration showing the endpoint path /refunds/list. This appears to be a snippet from a larger OpenAPI/Swagger specification file for the HyperSwitch payment system's refund listing functionality.\nSOURCE: https://github.com/juspay/hyperswitch/blob/main/api-reference/api-reference/refunds/refunds--list.mdx#2025-04-16_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nopenapi: openapi_spec post /refunds/list\n```\n\n----------------------------------------\n\nTITLE: OpenAPI GET Endpoint Definition for Merchant Account Profiles\nDESCRIPTION: OpenAPI specification defining the endpoint path for retrieving merchant account profiles using the account ID.\nSOURCE: https://github.com/juspay/hyperswitch/blob/main/api-reference-v2/api-reference/merchant-account/merchant-account--profile-list.mdx#2025-04-16_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nopenapi: get /v2/merchant-accounts/{id}/profiles\n```\n\n----------------------------------------\n\nTITLE: Generating Connector Template with Shell Script\nDESCRIPTION: Shell script command to create the initial connector structure and files in the Hyperswitch codebase. This generates boilerplate code with todo!() placeholders to be implemented.\nSOURCE: https://github.com/juspay/hyperswitch/blob/main/add_connector_updated.md#2025-04-16_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nsh scripts/add_connector.sh <connector-name> <connector-base-url>\n```\n\n----------------------------------------\n\nTITLE: OpenAPI DELETE API Key Endpoint Definition\nDESCRIPTION: OpenAPI YAML specification defining the delete endpoint for removing API keys by their ID. The endpoint path includes a dynamic ID parameter.\nSOURCE: https://github.com/juspay/hyperswitch/blob/main/api-reference-v2/api-reference/api-key/api-key--revoke.mdx#2025-04-16_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nopenapi: delete /v2/api-keys/{id}\n```\n\n----------------------------------------\n\nTITLE: Defining BillwerkPaymentsResponse Struct in Rust\nDESCRIPTION: Defines the BillwerkPaymentsResponse struct to represent the response format from the Billwerk connector. This struct is used in the transformers.rs file.\nSOURCE: https://github.com/juspay/hyperswitch/blob/main/add_connector_updated.md#2025-04-16_snippet_4\n\nLANGUAGE: rust\nCODE:\n```\n#[derive(Debug, Clone, Serialize, Deserialize, PartialEq)]\npub struct BillwerkPaymentsResponse {\n    state: BillwerkPaymentState,\n    handle: String,\n    error: Option<String>,\n    error_state: Option<String>,\n}\n```\n\n----------------------------------------\n\nTITLE: Displaying Hyperswitch Project File Structure in Markdown\nDESCRIPTION: This code snippet shows the file tree layout of the Hyperswitch project, providing an overview of the directory structure and the purpose of each main directory.\nSOURCE: https://github.com/juspay/hyperswitch/blob/main/docs/CONTRIBUTING.md#2025-04-16_snippet_0\n\nLANGUAGE: Markdown\nCODE:\n```\n```text\n.\n├── config                             : Initial startup config files for the router\n├── connector-template                 : boilerplate code for connectors\n├── crates                             : sub-crates\n│   ├── api_models                     : Request/response models for the `router` crate\n│   ├── cards                          : Types to handle card masking and validation\n│   ├── common_enums                   : Enums shared across the request/response types and database types\n│   ├── common_utils                   : Utilities shared across `router` and other crates\n│   ├── data_models                    : Represents the data/domain models used by the business/domain layer\n│   ├── diesel_models                  : Database models shared across `router` and other crates\n│   ├── drainer                        : Application that reads Redis streams and executes queries in database\n│   ├── external_services              : Interactions with external systems like emails, AWS KMS, etc.\n│   ├── masking                        : Personal Identifiable Information protection\n│   ├── redis_interface                : A user-friendly interface to Redis\n│   ├── router                         : Main crate of the project\n│   ├── router_derive                  : Utility macros for the `router` crate\n│   ├── router_env                     : Environment of payment router: logger, basic config, its environment awareness\n│   ├── scheduler                      : Scheduling and executing deferred tasks like mail scheduling\n│   ├── storage_impl                   : Storage backend implementations for data structures & objects\n│   └── test_utils                     : Utilities to run Postman and connector UI tests\n├── docs                               : hand-written documentation\n├── loadtest                           : performance benchmarking setup\n├── migrations                         : diesel DB setup\n├── monitoring                         : Grafana & Loki monitoring related configuration files\n├── openapi                            : automatically generated OpenAPI spec\n├── postman                            : postman scenarios API\n└── scripts                            : automation, testing, and other utility scripts\n```\n```\n\n----------------------------------------\n\nTITLE: Defining GET Endpoint for Routing Algorithm in OpenAPI YAML\nDESCRIPTION: This YAML snippet defines the OpenAPI specification for a GET endpoint to retrieve a specific routing algorithm by its ID. It includes the endpoint path and uses a path parameter for the routing_algorithm_id.\nSOURCE: https://github.com/juspay/hyperswitch/blob/main/api-reference/api-reference/routing/routing--retrieve.mdx#2025-04-16_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nopenapi: get /routing/{routing_algorithm_id}\n```\n\n----------------------------------------\n\nTITLE: OpenAPI Endpoint Path Definition for Connector Accounts Update\nDESCRIPTION: Defines the OpenAPI path specification for the PUT endpoint that updates connector accounts by ID.\nSOURCE: https://github.com/juspay/hyperswitch/blob/main/api-reference-v2/api-reference/merchant-connector-account/connector-account--update.mdx#2025-04-16_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nopenapi: put /v2/connector-accounts/{id}\n```\n\n----------------------------------------\n\nTITLE: Defining POST /payouts/list Endpoint in OpenAPI\nDESCRIPTION: This YAML snippet defines the OpenAPI specification for the POST /payouts/list endpoint. It includes request body parameters, response schema, and possible error responses for retrieving a list of payouts.\nSOURCE: https://github.com/juspay/hyperswitch/blob/main/api-reference/api-reference/payouts/payouts--filter.mdx#2025-04-16_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nopenapi: post /payouts/list\n```\n\n----------------------------------------\n\nTITLE: GET Routing Algorithm Profile Endpoint Definition\nDESCRIPTION: OpenAPI endpoint definition for retrieving routing algorithm configuration by profile ID. The endpoint path includes a required ID parameter.\nSOURCE: https://github.com/juspay/hyperswitch/blob/main/api-reference-v2/api-reference/profile/profile--retrieve-active-routing-algorithm.mdx#2025-04-16_snippet_0\n\nLANGUAGE: openapi\nCODE:\n```\nopenapi: get /v2/profiles/{id}/routing-algorithm\n```\n\n----------------------------------------\n\nTITLE: OpenAPI GET Endpoint Definition for Profile Connector Accounts\nDESCRIPTION: YAML definition for a GET endpoint that retrieves connector accounts associated with a specific profile ID. The path includes a required ID parameter.\nSOURCE: https://github.com/juspay/hyperswitch/blob/main/api-reference-v2/api-reference/profile/merchant-connector--list.mdx#2025-04-16_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nopenapi: get /v2/profiles/{id}/connector-accounts\n```\n\n----------------------------------------\n\nTITLE: OpenAPI Endpoint Path Definition\nDESCRIPTION: OpenAPI specification defining the endpoint path for activating routing algorithms on payment profiles via PATCH method\nSOURCE: https://github.com/juspay/hyperswitch/blob/main/api-reference-v2/api-reference/profile/profile--activate-routing-algorithm.mdx#2025-04-16_snippet_0\n\nLANGUAGE: openapi\nCODE:\n```\nopenapi: patch /v2/profiles/{id}/activate-routing-algorithm\n```\n\n----------------------------------------\n\nTITLE: Running Hyperswitch Application with Cargo\nDESCRIPTION: Commands to compile and run the Hyperswitch application using either Cargo or Nix, followed by a health check verification.\nSOURCE: https://github.com/juspay/hyperswitch/blob/main/docs/try_local_system.md#2025-04-16_snippet_17\n\nLANGUAGE: shell\nCODE:\n```\ncargo run\n```\n\nLANGUAGE: shell\nCODE:\n```\nnix run\n```\n\nLANGUAGE: shell\nCODE:\n```\ncurl --head --request GET 'http://localhost:8080/health'\n```\n\n----------------------------------------\n\nTITLE: Defining OpenAPI GET Endpoint for Fallback Routing Profiles\nDESCRIPTION: OpenAPI specification for the GET /v2/profiles/{id}/fallback-routing endpoint that retrieves fallback routing profile information by ID.\nSOURCE: https://github.com/juspay/hyperswitch/blob/main/api-reference-v2/api-reference/profile/profile--retrieve-default-fallback-routing-algorithm.mdx#2025-04-16_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nopenapi: get /v2/profiles/{id}/fallback-routing\n```\n\n----------------------------------------\n\nTITLE: GET Profile Connector Accounts API Definition\nDESCRIPTION: OpenAPI specification for the GET endpoint that retrieves connector accounts associated with a specific profile ID. The endpoint path includes a profile_id parameter.\nSOURCE: https://github.com/juspay/hyperswitch/blob/main/api-reference-v2/api-reference/business-profile/merchant-connector--list.mdx#2025-04-16_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nopenapi: get /v2/profiles/{profile_id}/connector-accounts\n```\n\n----------------------------------------\n\nTITLE: OpenAPI Path Definition for Deactivating Routing Algorithm\nDESCRIPTION: OpenAPI specification path definition for deactivating a routing algorithm profile via a PATCH request to /v2/profiles/{id}/deactivate-routing-algorithm endpoint.\nSOURCE: https://github.com/juspay/hyperswitch/blob/main/api-reference-v2/api-reference/profile/profile--deactivate-routing-algorithm.mdx#2025-04-16_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nopenapi: patch /v2/profiles/{id}/deactivate-routing-algorithm\n```\n\n----------------------------------------\n\nTITLE: Defining OpenAPI Customer Mandates POST Endpoint\nDESCRIPTION: YAML specification defining the path, structure and format for the customer mandates endpoint.\nSOURCE: https://github.com/juspay/hyperswitch/blob/main/api-reference/api-reference/mandates/mandates--customer-mandates-list.mdx#2025-04-16_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nopenapi: post /customers/{customer_id}/mandates\n```\n\n----------------------------------------\n\nTITLE: OpenAPI Route Definition for Post Session Tokens\nDESCRIPTION: YAML definition for a POST endpoint that handles post-session token creation for payments. The endpoint path includes a payment_id parameter.\nSOURCE: https://github.com/juspay/hyperswitch/blob/main/api-reference/api-reference/payments/payments--post-session-tokens.mdx#2025-04-16_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nopenapi: post /payments/{payment_id}/post_session_tokens\n```\n\n----------------------------------------\n\nTITLE: Defining POST /v2/connector-accounts Endpoint in OpenAPI YAML\nDESCRIPTION: This YAML snippet specifies the OpenAPI definition for the POST /v2/connector-accounts endpoint. It includes the request body schema, required fields, and response schemas for various HTTP status codes.\nSOURCE: https://github.com/juspay/hyperswitch/blob/main/api-reference-v2/api-reference/merchant-connector-account/connector-account--create.mdx#2025-04-16_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nopenapi: post /v2/connector-accounts\n```\n\n----------------------------------------\n\nTITLE: OpenAPI Route Specification\nDESCRIPTION: OpenAPI specification defining the path for a connector accounts endpoint\nSOURCE: https://github.com/juspay/hyperswitch/blob/main/api-reference-v2/api-reference/connector-account/connector-account--create.mdx#2025-04-16_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nopenapi: post /v2/connector-accounts\n```\n\n----------------------------------------\n\nTITLE: Defining PATCH Endpoint for Fallback Routing in OpenAPI YAML\nDESCRIPTION: This YAML snippet specifies the OpenAPI structure for a PATCH endpoint to update fallback routing for a profile. It includes the endpoint path, HTTP method, and likely contains details about request parameters and response schemas.\nSOURCE: https://github.com/juspay/hyperswitch/blob/main/api-reference-v2/api-reference/profile/profile--update-default-fallback-routing-algorithm.mdx#2025-04-16_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nopenapi: patch /v2/profiles/{id}/fallback-routing\n```\n\n----------------------------------------\n\nTITLE: Project Setup and Migration\nDESCRIPTION: Clones the Hyperswitch repository and runs database migrations\nSOURCE: https://github.com/juspay/hyperswitch/blob/main/docs/try_local_system.md#2025-04-16_snippet_16\n\nLANGUAGE: shell\nCODE:\n```\ngit clone https://github.com/juspay/hyperswitch\ncd hyperswitch\nexport DATABASE_URL=postgres://$DB_USER:$DB_PASS@localhost:5432/$DB_NAME\njust migrate\n```\n\n----------------------------------------\n\nTITLE: OpenAPI Path Definition for Event Retry Endpoint\nDESCRIPTION: Defines the OpenAPI specification for the POST endpoint to retry a specific event for a merchant. The endpoint path includes parameters for merchant_id and event_id to uniquely identify the event to be retried.\nSOURCE: https://github.com/juspay/hyperswitch/blob/main/api-reference/api-reference/event/events--manual-retry.mdx#2025-04-16_snippet_0\n\nLANGUAGE: openapi\nCODE:\n```\nopenapi: post /events/{merchant_id}/{event_id}/retry\n```\n\n----------------------------------------\n\nTITLE: OpenAPI Delete API Key Route Specification\nDESCRIPTION: OpenAPI route specification for deleting an API key using merchant_id and key_id path parameters. The path follows the format /api_keys/{merchant_id}/{key_id}.\nSOURCE: https://github.com/juspay/hyperswitch/blob/main/api-reference/api-reference/api-key/api-key--revoke.mdx#2025-04-16_snippet_0\n\nLANGUAGE: openapi\nCODE:\n```\nopenapi: delete /api_keys/{merchant_id}/{key_id}\n```\n\n----------------------------------------\n\nTITLE: Defining Incremental Authorization Endpoint in OpenAPI\nDESCRIPTION: Specifies the OpenAPI endpoint for incremental authorization of payments. The endpoint is a POST request to '/payments/{payment_id}/incremental_authorization', where {payment_id} is a path parameter representing the ID of the payment to be incrementally authorized.\nSOURCE: https://github.com/juspay/hyperswitch/blob/main/api-reference/api-reference/payments/payments--incremental-authorization.mdx#2025-04-16_snippet_0\n\nLANGUAGE: openapi\nCODE:\n```\nopenapi: post /payments/{payment_id}/incremental_authorization\n```\n\n----------------------------------------\n\nTITLE: Defining OpenAPI Specification for GET Payment Method Endpoint in YAML\nDESCRIPTION: This YAML snippet defines the OpenAPI specification for retrieving payment method details using a GET request to /payment_methods/{method_id}. It outlines the API structure for fetching specific payment method information based on a method ID parameter.\nSOURCE: https://github.com/juspay/hyperswitch/blob/main/api-reference/api-reference/payment-methods/payment-method--retrieve.mdx#2025-04-16_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nopenapi: openapi_spec get /payment_methods/{method_id}\n```\n\n----------------------------------------\n\nTITLE: OpenAPI POST Endpoint Definition for API Keys\nDESCRIPTION: OpenAPI specification defining the POST /v2/api-keys endpoint path and version.\nSOURCE: https://github.com/juspay/hyperswitch/blob/main/api-reference-v2/api-reference/api-key/api-key--create.mdx#2025-04-16_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nopenapi: post /v2/api-keys\n```\n\n----------------------------------------\n\nTITLE: OpenAPI Path Definition - Create External SDK Tokens\nDESCRIPTION: OpenAPI specification defining the endpoint path for generating external SDK tokens for a payment using the payment ID.\nSOURCE: https://github.com/juspay/hyperswitch/blob/main/api-reference-v2/api-reference/payments/payments--session-token.mdx#2025-04-16_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nopenapi: post /v2/payments/{payment_id}/create-external-sdk-tokens\n```\n\n----------------------------------------\n\nTITLE: Building Docker Router Image\nDESCRIPTION: Command to build the Hyperswitch router Docker image using the Dockerfile with specific build arguments.\nSOURCE: https://github.com/juspay/hyperswitch/blob/main/docs/building_docker_images.md#2025-04-16_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\ndocker build \\\n    --load \\\n    --file Dockerfile \\\n    --build-arg \"BINARY=router\" \\\n    --tag hyperswitch-router \\\n    .\n```\n\n----------------------------------------\n\nTITLE: Defining GET Endpoint for Routing Algorithm in OpenAPI YAML\nDESCRIPTION: This snippet defines the OpenAPI specification for the GET /v2/routing-algorithm/{id} endpoint. It specifies the path, HTTP method, and likely includes details about request parameters and response schema.\nSOURCE: https://github.com/juspay/hyperswitch/blob/main/api-reference-v2/api-reference/routing/routing--retrieve.mdx#2025-04-16_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nopenapi: get /v2/routing-algorithm/{id}\n```\n\n----------------------------------------\n\nTITLE: Defining OpenAPI POST Endpoint for Invalidating Windows in YAML\nDESCRIPTION: This YAML snippet specifies the OpenAPI route for a POST request to invalidate windows in the SuccessRateCalculator service. It defines the endpoint '/success_rate.SuccessRateCalculator/InvalidateWindows'.\nSOURCE: https://github.com/juspay/hyperswitch/blob/main/api-reference/intelligent-router-api-reference/success-rate/invalidate-windows.mdx#2025-04-16_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nopenapi: post /success_rate.SuccessRateCalculator/InvalidateWindows\n```\n\n----------------------------------------\n\nTITLE: Defining OpenAPI Spec for POST /payouts/{payout_id}/cancel Endpoint\nDESCRIPTION: This YAML snippet specifies the OpenAPI details for the POST endpoint used to cancel a payout. It includes the path parameter 'payout_id' to identify the specific payout to be canceled.\nSOURCE: https://github.com/juspay/hyperswitch/blob/main/api-reference/api-reference/payouts/payouts--cancel.mdx#2025-04-16_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nopenapi: openapi_spec post /payouts/{payout_id}/cancel\n```\n\n----------------------------------------\n\nTITLE: Defining OpenAPI GET Endpoint for Default Routing Profile\nDESCRIPTION: OpenAPI specification defining the GET endpoint for retrieving the default routing profile configuration in Hyperswitch routing system.\nSOURCE: https://github.com/juspay/hyperswitch/blob/main/api-reference/api-reference/routing/routing--retrieve-default-for-profile.mdx#2025-04-16_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nopenapi: get /routing/default/profile\n```\n\n----------------------------------------\n\nTITLE: OpenAPI POST Endpoint Path Definition\nDESCRIPTION: Defines the OpenAPI path specification for confirming a payment method session via POST request with ID parameter.\nSOURCE: https://github.com/juspay/hyperswitch/blob/main/api-reference-v2/api-reference/payment-method-session/payment-method-session--confirm-a-payment-method-session.mdx#2025-04-16_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nopenapi: post /v2/payment-method-session/:id/confirm\n```\n\n----------------------------------------\n\nTITLE: Defining OpenAPI Specification for POST /accounts Endpoint\nDESCRIPTION: This YAML snippet specifies the OpenAPI definition for the POST /accounts endpoint. It defines the structure and metadata for creating a new account in the Hyperswitch system.\nSOURCE: https://github.com/juspay/hyperswitch/blob/main/api-reference/api-reference/merchant-account/merchant-account--create.mdx#2025-04-16_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nopenapi: post /accounts\n```\n\n----------------------------------------\n\nTITLE: OpenAPI GET Endpoint Definition - Merchant Account Profiles\nDESCRIPTION: OpenAPI specification for GET endpoint to retrieve merchant account profiles using an ID parameter. Represents a RESTful API endpoint definition.\nSOURCE: https://github.com/juspay/hyperswitch/blob/main/api-reference-v2/api-reference/merchant-account/business-profile--list.mdx#2025-04-16_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nopenapi: get /v2/merchant-accounts/{id}/profiles\n```\n\n----------------------------------------\n\nTITLE: Making a success rate-based routing decision using gRPCurl (Bash)\nDESCRIPTION: This example shows how to use gRPCurl to make a routing decision based on success rates. It sends a request to the FetchSuccessRate method of the SuccessRateCalculator service.\nSOURCE: https://github.com/juspay/hyperswitch/blob/main/api-reference/intelligent-router-api-reference/overview.mdx#2025-04-16_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n# Make a routing decision based on success rates\ngrpcurl -d '{\"id\": \"merchant1\", \"params\": \"card\", \"labels\": [\"stripe\", \"adyen\"], \"config\": {\"min_aggregates_size\": 5, \"default_success_rate\": 100}}' \\\n  -plaintext localhost:8000 success_rate.SuccessRateCalculator/FetchSuccessRate\n```\n\n----------------------------------------\n\nTITLE: OpenAPI Endpoint Path Definition for Payment Authorization\nDESCRIPTION: Defines the API endpoint path structure for completing payment authorization using a payment ID parameter\nSOURCE: https://github.com/juspay/hyperswitch/blob/main/api-reference/api-reference/payments/payments--complete-authorize.mdx#2025-04-16_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nopenapi: post /{payment_id}/complete_authorize\n```\n\n----------------------------------------\n\nTITLE: OpenAPI Specification for 3DS Authentication Endpoint\nDESCRIPTION: Defines the OpenAPI structure for the POST /payments/{payment_id}/3ds/authentication endpoint. This endpoint is used to initiate 3D Secure authentication for a specific payment identified by the payment_id parameter.\nSOURCE: https://github.com/juspay/hyperswitch/blob/main/api-reference/api-reference/payments/payments--external-3ds-authentication.mdx#2025-04-16_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nopenapi: post /payments/{payment_id}/3ds/authentication\n```\n\n----------------------------------------\n\nTITLE: Generating Sandbox Config for Hyperswitch Router\nDESCRIPTION: Shell commands to duplicate the env_specific.toml file, rename it, and merge it with the sandbox.toml file to create the final sandbox configuration.\nSOURCE: https://github.com/juspay/hyperswitch/blob/main/config/deployments/README.md#2025-04-16_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\ncp config/deployments/env_specific.toml config/deployments/sandbox_config.toml\nvi config/deployments/sandbox_config.toml\ncat config/deployments/sandbox.toml config/deployments/sandbox_config.toml > config/deployments/sandbox_release.toml\n```\n\n----------------------------------------\n\nTITLE: OpenAPI POST Route Definition - Elimination Bucket Update\nDESCRIPTION: OpenAPI specification for a POST endpoint that updates an elimination bucket. The route is defined under the EliminationAnalyser service with path /elimination.EliminationAnalyser/UpdateEliminationBucket.\nSOURCE: https://github.com/juspay/hyperswitch/blob/main/api-reference/intelligent-router-api-reference/elimination/update-elimination-bucket.mdx#2025-04-16_snippet_0\n\nLANGUAGE: openapi\nCODE:\n```\nopenapi: post /elimination.EliminationAnalyser/UpdateEliminationBucket\n```\n\n----------------------------------------\n\nTITLE: Defining GET Endpoint for Connector Accounts in OpenAPI YAML\nDESCRIPTION: This YAML snippet defines an OpenAPI endpoint for retrieving connector accounts associated with a specific profile ID. It specifies the path parameters, HTTP method, and expected responses.\nSOURCE: https://github.com/juspay/hyperswitch/blob/main/api-reference-v2/api-reference/business-profile/profile--connector-accounts-list.mdx#2025-04-16_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nopenapi: get /v2/profiles/{id}/connector-accounts\n```\n\n----------------------------------------\n\nTITLE: Defining OpenAPI POST endpoint for payout confirmation\nDESCRIPTION: OpenAPI/Swagger specification defining the POST /payouts/{payout_id}/confirm endpoint, indicating a REST API endpoint for confirming payouts by their ID.\nSOURCE: https://github.com/juspay/hyperswitch/blob/main/api-reference/api-reference/payouts/payouts--confirm.mdx#2025-04-16_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nopenapi: openapi_spec post /payouts/{payout_id}/confirm\n```\n\n----------------------------------------\n\nTITLE: Delete API Key Path Specification in OpenAPI\nDESCRIPTION: OpenAPI path specification for deleting an API key using merchant_id and key_id parameters\nSOURCE: https://github.com/juspay/hyperswitch/blob/main/api-reference/api-reference/api-key/api-key--update.mdx#2025-04-16_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nopenapi: post /api_keys/{merchant_id}/{key_id}\n```\n\n----------------------------------------\n\nTITLE: GET Payment Endpoint OpenAPI Specification\nDESCRIPTION: OpenAPI specification defining the endpoint for retrieving payment details by payment ID. The path parameter payment_id is used to identify the specific payment to retrieve.\nSOURCE: https://github.com/juspay/hyperswitch/blob/main/api-reference/api-reference/payments/payments--retrieve.mdx#2025-04-16_snippet_0\n\nLANGUAGE: openapi\nCODE:\n```\nopenapi: openapi_spec get /payments/{payment_id}\n```\n\n----------------------------------------\n\nTITLE: Generating Sandbox Config for Hyperswitch Scheduler Producer\nDESCRIPTION: Shell command to merge the producer.toml file with the sandbox_release.toml file to create the final producer configuration for the sandbox environment.\nSOURCE: https://github.com/juspay/hyperswitch/blob/main/config/deployments/README.md#2025-04-16_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\ncat config/deployments/scheduler/producer.toml config/deployments/sandbox_release.toml > config/deployments/producer_sandbox_release.toml\n```\n\n----------------------------------------\n\nTITLE: Defining POST Endpoint for Invalidating Bucket in YAML\nDESCRIPTION: This YAML snippet defines an OpenAPI endpoint for a POST request to invalidate a bucket in the Elimination Analyzer service. It specifies the path for the endpoint, which includes the service name 'EliminationAnalyser' and the operation 'InvalidateBucket'.\nSOURCE: https://github.com/juspay/hyperswitch/blob/main/api-reference/intelligent-router-api-reference/elimination/invalidate-elimination-bucket.mdx#2025-04-16_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nopenapi: post /elimination.EliminationAnalyser/InvalidateBucket\n```\n\n----------------------------------------\n\nTITLE: Defining GET Endpoint for Retrieving Account Connector in OpenAPI\nDESCRIPTION: OpenAPI specification for a GET endpoint that retrieves connector information for a specific account. The endpoint requires account_id and connector_id path parameters.\nSOURCE: https://github.com/juspay/hyperswitch/blob/main/api-reference/api-reference/merchant-connector-account/merchant-connector--retrieve.mdx#2025-04-16_snippet_0\n\nLANGUAGE: openapi\nCODE:\n```\nopenapi: get /accounts/{account_id}/connectors/{connector_id}\n```\n\n----------------------------------------\n\nTITLE: Defining OpenAPI Endpoint for Default Payment Method in YAML\nDESCRIPTION: OpenAPI specification for the endpoint that gets or sets a specific payment method as the default for a customer. The endpoint requires customer_id and payment_method_id parameters.\nSOURCE: https://github.com/juspay/hyperswitch/blob/main/api-reference/api-reference/payment-methods/payment-method--set-default-payment-method-for-customer.mdx#2025-04-16_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nopenapi: get /{customer_id}/payment_methods/{payment_method_id}/default\n```\n\n----------------------------------------\n\nTITLE: Defining GET /routing/active Endpoint in OpenAPI\nDESCRIPTION: This YAML snippet defines the OpenAPI specification for the GET /routing/active endpoint. It specifies the path, HTTP method, and likely includes details about request parameters, responses, and authentication requirements.\nSOURCE: https://github.com/juspay/hyperswitch/blob/main/api-reference/api-reference/routing/routing--retrieve-config.mdx#2025-04-16_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nopenapi: get /routing/active\n```\n\n----------------------------------------\n\nTITLE: Defining OpenAPI Specification for POST /data/add Endpoint in YAML\nDESCRIPTION: This YAML snippet specifies the OpenAPI details for a POST endpoint at /data/add. It's part of a Rust-based API called Locker, used for adding data to the system.\nSOURCE: https://github.com/juspay/hyperswitch/blob/main/api-reference/locker-api-reference/cards/add-data-in-locker.mdx#2025-04-16_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nopenapi: rust_locker_open_api_spec post /data/add\n```\n\n----------------------------------------\n\nTITLE: Setting up Dynamo using Docker (Bash)\nDESCRIPTION: This snippet demonstrates how to clone the Dynamo repository, build a Docker image, and run Dynamo using Docker. It includes options for running with default or custom configurations.\nSOURCE: https://github.com/juspay/hyperswitch/blob/main/api-reference/intelligent-router-api-reference/overview.mdx#2025-04-16_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n# Clone the repository\ngit clone https://github.com/yourusername/dynamo.git\ncd dynamo\n\n# Build the Docker image\ndocker build -t dynamo:latest .\n\n# Run with default configuration\ndocker run -p 8000:8000 -p 9000:9000 dynamo:latest\n\n# Run with custom configuration\ndocker run -p 8000:8000 -p 9000:9000 -v $(pwd)/config:/app/config dynamo:latest\n```\n\n----------------------------------------\n\nTITLE: OpenAPI Route Definition for Get Saved Payment Methods\nDESCRIPTION: OpenAPI specification defining the endpoint path for retrieving saved payment methods. The endpoint accepts a payment ID parameter and uses GET HTTP method.\nSOURCE: https://github.com/juspay/hyperswitch/blob/main/api-reference-v2/api-reference/payment-methods/list-customer-saved-payment-methods-for-a-payment.mdx#2025-04-16_snippet_0\n\nLANGUAGE: openapi\nCODE:\n```\nopenapi: get /v2/payments/{id}/saved-payment-methods\n```\n\n----------------------------------------\n\nTITLE: OpenAPI Path Definition - Get Payment Methods\nDESCRIPTION: API endpoint specification for retrieving payment methods associated with a specific payment ID. Uses OpenAPI syntax to define the path, indicating a GET request to /v2/payments/{id}/payment-methods.\nSOURCE: https://github.com/juspay/hyperswitch/blob/main/api-reference-v2/api-reference/payments/payments--payment-methods-list.mdx#2025-04-16_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nopenapi: get /v2/payments/{id}/payment-methods\n```\n\n----------------------------------------\n\nTITLE: OpenAPI Endpoint Specification - POST /custodian/key2\nDESCRIPTION: YAML specification defining the OpenAPI endpoint for key custodian operations in the rust_locker service.\nSOURCE: https://github.com/juspay/hyperswitch/blob/main/api-reference/locker-api-reference/key-custodian/provide-key-2.mdx#2025-04-16_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nopenapi: rust_locker_open_api_spec post /custodian/key2\n```\n\n----------------------------------------\n\nTITLE: Defining POST Endpoint for Business Profile in OpenAPI\nDESCRIPTION: This YAML snippet defines the OpenAPI specification for a POST endpoint to create or update a business profile. It includes the HTTP method (POST) and the path with a dynamic account_id parameter.\nSOURCE: https://github.com/juspay/hyperswitch/blob/main/api-reference/api-reference/business-profile/business-profile--create.mdx#2025-04-16_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nopenapi: post /account/{account_id}/business_profile\n```\n\n----------------------------------------\n\nTITLE: OpenAPI Session Token Endpoint Specification\nDESCRIPTION: OpenAPI YAML specification declaring the path and method for creating payment session tokens. Indicates this is a POST endpoint to /payments/session_tokens.\nSOURCE: https://github.com/juspay/hyperswitch/blob/main/api-reference/api-reference/payments/payments--session-token.mdx#2025-04-16_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nopenapi: openapi_spec post /payments/session_tokens\n```\n\n----------------------------------------\n\nTITLE: Defining OpenAPI Specification for Data Deletion Endpoint in Rust Locker\nDESCRIPTION: This YAML snippet specifies the OpenAPI configuration for the POST /data/delete endpoint in the Rust Locker project. It defines the API contract for data deletion operations.\nSOURCE: https://github.com/juspay/hyperswitch/blob/main/api-reference/locker-api-reference/cards/delete-data-from-locker.mdx#2025-04-16_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nopenapi: rust_locker_open_api_spec post /data/delete\n```\n\n----------------------------------------\n\nTITLE: Setting up Dynamo locally using Git and Cargo (Bash)\nDESCRIPTION: This snippet shows how to clone the Dynamo repository, build the core service using Cargo, and run it with development configuration. It assumes Redis is running on localhost:6379.\nSOURCE: https://github.com/juspay/hyperswitch/blob/main/api-reference/intelligent-router-api-reference/overview.mdx#2025-04-16_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n# Clone the repository\ngit clone https://github.com/yourusername/dynamo.git\ncd dynamo\n\n# Configure Redis\n# Make sure Redis is running on localhost:6379 or update the config file\n\n# Build the core service\ncargo build --release\n\n# Run with development configuration\n./target/release/dynamo\n```\n\n----------------------------------------\n\nTITLE: Defining OpenAPI Endpoint for Default Payment Method\nDESCRIPTION: This OpenAPI definition specifies the endpoint path for setting a payment method as the default for a customer. It requires both a customer ID and payment method ID as path parameters.\nSOURCE: https://github.com/juspay/hyperswitch/blob/main/api-reference/api-reference/customer-set-default-payment-method/customers--set-default-payment-method.mdx#2025-04-16_snippet_0\n\nLANGUAGE: openapi\nCODE:\n```\nopenapi: get /{customer_id}/payment_methods/{payment_method_id}/default\n```\n\n----------------------------------------\n\nTITLE: OpenAPI POST Endpoint Definition for /data/fingerprint\nDESCRIPTION: YAML definition specifying a POST endpoint path for handling fingerprint data submission. The endpoint appears to be part of a RESTful API structure.\nSOURCE: https://github.com/juspay/hyperswitch/blob/main/api-reference/locker-api-reference/cards/get-or-insert-the-card-fingerprint.mdx#2025-04-16_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nopenapi: post /data/fingerprint\n```\n\n----------------------------------------\n\nTITLE: Defining GET /blocklist Endpoint in OpenAPI YAML\nDESCRIPTION: This YAML snippet specifies the OpenAPI definition for the GET /blocklist endpoint. It includes the endpoint path, HTTP method, and a placeholder for further specifications.\nSOURCE: https://github.com/juspay/hyperswitch/blob/main/api-reference/api-reference/blocklist/get-blocklist.mdx#2025-04-16_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nopenapi: get /blocklist\n```\n\n----------------------------------------\n\nTITLE: Installing PostgreSQL on Ubuntu\nDESCRIPTION: Installs PostgreSQL database server and required development libraries\nSOURCE: https://github.com/juspay/hyperswitch/blob/main/docs/try_local_system.md#2025-04-16_snippet_10\n\nLANGUAGE: shell\nCODE:\n```\nsudo apt update\nsudo apt install postgresql postgresql-contrib libpq-dev\nsystemctl start postgresql.service\n```\n\n----------------------------------------\n\nTITLE: Defining POST Endpoint for /custodian/key1 in OpenAPI\nDESCRIPTION: This YAML snippet defines the OpenAPI specification for a POST endpoint at /custodian/key1. It likely describes the request and response structure for a key management operation in a custodian service.\nSOURCE: https://github.com/juspay/hyperswitch/blob/main/api-reference/locker-api-reference/key-custodian/provide-key-1.mdx#2025-04-16_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nopenapi: rust_locker_open_api_spec post /custodian/key1\n```\n\n----------------------------------------\n\nTITLE: Currency Unit Conversion in Rust\nDESCRIPTION: Implementation of currency unit conversion between base and minor units for payment processing.\nSOURCE: https://github.com/juspay/hyperswitch/blob/main/add_connector_updated.md#2025-04-16_snippet_15\n\nLANGUAGE: rust\nCODE:\n```\nimpl<T>\n    TryFrom<(\n        &types::api::CurrencyUnit,\n        types::storage::enums::Currency,\n        i64,\n        T,\n    )> for PaypalRouterData<T>\n{\n    type Error = error_stack::Report<errors::ConnectorError>;\n    fn try_from(\n        (currency_unit, currency, amount, item): (\n            &types::api::CurrencyUnit,\n            types::storage::enums::Currency,\n            i64,\n            T,\n        ),\n    ) -> Result<Self, Self::Error> {\n        let amount = utils::get_amount_as_string(currency_unit, amount, currency)?;\n        Ok(Self {\n            amount,\n            router_data: item,\n        })\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: OpenAPI Specification for POST /customers Endpoint\nDESCRIPTION: YAML specification defining the structure and metadata for the POST /customers endpoint in the Hyperswitch API.\nSOURCE: https://github.com/juspay/hyperswitch/blob/main/api-reference/api-reference/customers/customers--create.mdx#2025-04-16_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nopenapi: openapi_spec post /customers\n```\n\n----------------------------------------\n\nTITLE: Creating New Secret in Rust\nDESCRIPTION: Demonstrates how to create a new Secret type from a non-secret variable using Secret::new(). The example shows how the debug formatting masks the secret value.\nSOURCE: https://github.com/juspay/hyperswitch/blob/main/crates/masking/README.md#2025-04-16_snippet_0\n\nLANGUAGE: rust\nCODE:\n```\nuse masking::Secret;\n\nlet card_number: Secret<String> = Secret::new(String::from(\"1234 5678 9012 3456\"));\nassert_eq!(format!(\"{:?}\", card_number), \"*** alloc::string::String ***\");\n```\n\n----------------------------------------\n\nTITLE: Defining POST /blocklist Endpoint in OpenAPI\nDESCRIPTION: OpenAPI specification for the POST /blocklist endpoint. It outlines the request body structure, required fields, and possible response codes.\nSOURCE: https://github.com/juspay/hyperswitch/blob/main/api-reference/api-reference/blocklist/post-blocklist.mdx#2025-04-16_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nopenapi: post /blocklist\n```\n\n----------------------------------------\n\nTITLE: Defining OpenAPI POST /v2/refunds Endpoint\nDESCRIPTION: OpenAPI/Swagger specification for the POST /v2/refunds endpoint which defines the structure and metadata for creating refunds.\nSOURCE: https://github.com/juspay/hyperswitch/blob/main/api-reference-v2/api-reference/refunds/refunds--create.mdx#2025-04-16_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nopenapi: post /v2/refunds\n```\n\n----------------------------------------\n\nTITLE: OpenAPI Specification for Custodian Decrypt Endpoint\nDESCRIPTION: YAML specification defining the POST /custodian/decrypt endpoint for the Rust Locker custodian service.\nSOURCE: https://github.com/juspay/hyperswitch/blob/main/api-reference/locker-api-reference/key-custodian/unlock-the-locker.mdx#2025-04-16_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nopenapi: rust_locker_open_api_spec post /custodian/decrypt\n```\n\n----------------------------------------\n\nTITLE: Defining DELETE Endpoint for Business Profile in OpenAPI\nDESCRIPTION: OpenAPI specification for a DELETE endpoint that removes a business profile for a specific account. The endpoint uses path parameters to identify both the account and the profile to be deleted.\nSOURCE: https://github.com/juspay/hyperswitch/blob/main/api-reference/api-reference/business-profile/business-profile--delete.mdx#2025-04-16_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nopenapi: delete /account/{account_id}/business_profile/{profile_id}\n```\n\n----------------------------------------\n\nTITLE: Defining OpenAPI GET /customers/list Endpoint\nDESCRIPTION: OpenAPI/Swagger specification for the GET /customers/list endpoint that retrieves a list of customers.\nSOURCE: https://github.com/juspay/hyperswitch/blob/main/api-reference/api-reference/customers/customers--list.mdx#2025-04-16_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nopenapi: openapi_spec get /customers/list\n```\n\n----------------------------------------\n\nTITLE: Accessing Secret Reference in Rust\nDESCRIPTION: Shows how to safely access a reference to the inner value of a Secret using the peek() method from PeekInterface trait.\nSOURCE: https://github.com/juspay/hyperswitch/blob/main/crates/masking/README.md#2025-04-16_snippet_1\n\nLANGUAGE: rust\nCODE:\n```\nuse masking::{PeekInterface, Secret};\n\nlet card_number: Secret<String> = Secret::new(String::from(\"1234 5678 9012 3456\"));\nlet last4_digits: &str = card_number.peek();\n```\n\n----------------------------------------\n\nTITLE: Defining OpenAPI Blocklist Deletion Endpoint\nDESCRIPTION: OpenAPI specification defining a DELETE endpoint for removing items from a blocklist.\nSOURCE: https://github.com/juspay/hyperswitch/blob/main/api-reference/api-reference/blocklist/delete-blocklist.mdx#2025-04-16_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nopenapi: delete /blocklist\n```\n\n----------------------------------------\n\nTITLE: Creating a Test Scenario for Listing Mandates\nDESCRIPTION: JavaScript code demonstrating how to create a test scenario for listing mandates using the custom Cypress command.\nSOURCE: https://github.com/juspay/hyperswitch/blob/main/cypress-tests-v2/README.md#2025-04-16_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\ndescribe(\"Payment Scenarios\", () => {\n  it(\"list-mandate-call-test\", () => {\n    cy.listMandateCallTest(globalState);\n  });\n});\n```\n\n----------------------------------------\n\nTITLE: Starting Monitoring Services with Docker Compose\nDESCRIPTION: Commands to start the monitoring service containers using Docker Compose. This needs to be executed from the monitoring directory.\nSOURCE: https://github.com/juspay/hyperswitch/blob/main/monitoring/README.md#2025-04-16_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ncd monitoring\n\n# start containers\ndocker-compose up -d\n\n# FIXME: maybe we can remove manual setups with help of a config or automation?\n```\n\n----------------------------------------\n\nTITLE: OpenAPI GET Endpoint Definition - Account Connectors\nDESCRIPTION: OpenAPI specification for endpoint that retrieves connector configurations for a specific account. The endpoint accepts an account_id path parameter to identify the target account.\nSOURCE: https://github.com/juspay/hyperswitch/blob/main/api-reference/api-reference/merchant-connector-account/merchant-connector--list.mdx#2025-04-16_snippet_0\n\nLANGUAGE: openapi\nCODE:\n```\nopenapi: get /accounts/{account_id}/connectors\n```\n\n----------------------------------------\n\nTITLE: Redis Interface Documentation in Markdown\nDESCRIPTION: Basic markdown documentation explaining the purpose of the Redis interface implementation, indicating it provides a user-friendly way to interact with Redis.\nSOURCE: https://github.com/juspay/hyperswitch/blob/main/crates/redis_interface/README.md#2025-04-16_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n# Redis Interface\n\nA user-friendly interface to Redis.\n```\n\n----------------------------------------\n\nTITLE: Defining OpenAPI POST Endpoint for Updating Success Rate Window in YAML\nDESCRIPTION: This YAML snippet defines an OpenAPI specification for a POST endpoint to update the success rate window in the SuccessRateCalculator service. It specifies the path and HTTP method for the API endpoint.\nSOURCE: https://github.com/juspay/hyperswitch/blob/main/api-reference/intelligent-router-api-reference/success-rate/update-success-rate-window.mdx#2025-04-16_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nopenapi: post /success_rate.SuccessRateCalculator/UpdateSuccessRateWindow\n```\n\n----------------------------------------\n\nTITLE: OpenAPI Endpoint Definition for Retrieving API Keys by Merchant ID\nDESCRIPTION: Defines the OpenAPI specification for the GET endpoint that retrieves a list of API keys associated with a specific merchant ID. This endpoint uses path parameters to identify the merchant whose API keys should be returned.\nSOURCE: https://github.com/juspay/hyperswitch/blob/main/api-reference/api-reference/api-key/api-key--list.mdx#2025-04-16_snippet_0\n\nLANGUAGE: openapi\nCODE:\n```\nopenapi: get /api_keys/{merchant_id}/list\n```\n\n----------------------------------------\n\nTITLE: Adding Connector Details to creds.json\nDESCRIPTION: Example JSON structure for adding a new connector (Stripe) to the creds.json file, including authentication type and API key.\nSOURCE: https://github.com/juspay/hyperswitch/blob/main/cypress-tests-v2/README.md#2025-04-16_snippet_3\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"stripe\": {\n    \"auth_type\": \"HeaderKey\",\n    \"api_key\": \"SK_134\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Monitoring System Management Commands\nDESCRIPTION: Collection of helpful Docker commands for managing monitoring containers and checking service status.\nSOURCE: https://github.com/juspay/hyperswitch/blob/main/monitoring/README.md#2025-04-16_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nhttp://127.0.0.1:3100/ready\n: To get status of Loki, it should give \"Ready\".\n\ndocker container ls -as\n: List running containers.\n\ndocker exec -it monitoring_promtail_1 bash\n: Look inside of promtail container.\n\ndocker-compose down\n: Stop containers\n```\n\n----------------------------------------\n\nTITLE: OpenAPI Delete Connector Account Endpoint Specification\nDESCRIPTION: OpenAPI specification for DELETE endpoint to remove a connector account using its ID. The endpoint path includes a path parameter for the account ID.\nSOURCE: https://github.com/juspay/hyperswitch/blob/main/api-reference-v2/api-reference/merchant-connector-account/merchant-connector--delete.mdx#2025-04-16_snippet_0\n\nLANGUAGE: openapi\nCODE:\n```\nopenapi: delete /v2/connector-accounts/{id}\n```\n\n----------------------------------------\n\nTITLE: Payment Method Auth Services Description\nDESCRIPTION: Markdown description explaining the purpose of the payment method authentication services.\nSOURCE: https://github.com/juspay/hyperswitch/blob/main/crates/pm_auth/README.md#2025-04-16_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\nAn open banking services for payment method auth validation\n```\n\n----------------------------------------\n\nTITLE: Handling Optional Secrets in Rust\nDESCRIPTION: Shows how to work with Option<Secret<T>> types using expose_option() method, including handling of None cases with unwrap_or_default().\nSOURCE: https://github.com/juspay/hyperswitch/blob/main/crates/masking/README.md#2025-04-16_snippet_3\n\nLANGUAGE: rust\nCODE:\n```\nuse masking::{ExposeOptionInterface, Secret};\n\nlet card_number: Option<Secret<String>> = Some(Secret::new(String::from(\"1234 5678 9012 3456\")));\nlet card_number_str: String = card_number.expose_option().unwrap_or_default();\nassert_eq!(format!(\"{}\", card_number_str), \"1234 5678 9012 3456\");\n\nlet card_number: Option<Secret<String>> = None;\nlet card_number_str: String = card_number.expose_option().unwrap_or_default();\nassert_eq!(format!(\"{}\", card_number_str), \"\");\n```\n\n----------------------------------------\n\nTITLE: Exposing Secret Value in Rust\nDESCRIPTION: Demonstrates how to get the owned inner value from a Secret using the expose() method from ExposeInterface trait.\nSOURCE: https://github.com/juspay/hyperswitch/blob/main/crates/masking/README.md#2025-04-16_snippet_2\n\nLANGUAGE: rust\nCODE:\n```\nuse masking::{ExposeInterface, Secret};\n\nlet card_number: Secret<String> = Secret::new(String::from(\"1234 5678 9012 3456\"));\nlet last4_digits: String = card_number.expose();\n```\n\n----------------------------------------\n\nTITLE: Displaying File Tree Layout for Router Crate\nDESCRIPTION: This code snippet shows the directory structure of the router crate, including source code and test directories. It provides a hierarchical view of the project's organization, highlighting key components such as configs, connectors, core functionality, routes, and utilities.\nSOURCE: https://github.com/juspay/hyperswitch/blob/main/crates/router/README.md#2025-04-16_snippet_0\n\nLANGUAGE: text\nCODE:\n```\n├── src                        : source code\n│   ├── configs                : config loading\n│   ├── connector              : various connector (gateway) specific transformations implementations.\n│   │   ├── adyen              : adyen connector\n│   │   └── stripe             : stripe connector\n│   ├── core                   : the core router / orchestrator code. All common code/flow should exist here. only minimal code in connector implementations.\n│   │   ├── customers          : ?\n│   │   ├── payment_methods    : ?\n│   │   ├── payments           : ?\n│   │   └── refunds            : ?\n│   ├── routes                 : the API endpoints exposed by router. currently uses actix_web.\n│   ├── scheduler              : ?\n│   │   └── types              : ?\n│   ├── services               : ?\n│   │   └── redis              : ?\n│   ├── types                  : the objects/API type definitions\n│   │   ├── api                : the router API\n│   │   └── storage            : definitions for using DB/Storage. Currently uses Diesel.\n│   └── utils                  : utilities\n└── tests                      : unit and integration tests\n```\n\n----------------------------------------\n\nTITLE: OpenAPI PUT Endpoint Definition for API Key Updates\nDESCRIPTION: OpenAPI specification for the PUT endpoint that updates an existing API key identified by ID.\nSOURCE: https://github.com/juspay/hyperswitch/blob/main/api-reference-v2/api-reference/api-key/api-key--update.mdx#2025-04-16_snippet_0\n\nLANGUAGE: openapi\nCODE:\n```\nopenapi: put /v2/api-keys/{id}\n```\n\n----------------------------------------\n\nTITLE: Running Config Importer with Help Flag in Shell\nDESCRIPTION: Demonstrates how to run the config_importer utility with the --help flag to display usage information.\nSOURCE: https://github.com/juspay/hyperswitch/blob/main/crates/config_importer/README.md#2025-04-16_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\ncargo run --bin config_importer -- --help\n```\n\n----------------------------------------\n\nTITLE: Issuing an RFC Template in Hyperswitch\nDESCRIPTION: This template provides a structure for submitting an RFC proposal in the Hyperswitch project. It includes sections for the title, objective, proposal details, open questions, and additional context.\nSOURCE: https://github.com/juspay/hyperswitch/blob/main/docs/rfcs/guidelines.md#2025-04-16_snippet_0\n\nLANGUAGE: text\nCODE:\n```\n**Title**\n\n**Objective**\nA clear and concise title for the RFC\n\n**Proposal**\nA detailed description of the proposed changes, discussion time frame, technical details and potential drawbacks or alternative solutions that were considered\n\n**Open Questions**\nAny questions or concerns that are still open for discussion and debate within the community\n\n**Additional Context / Previous Improvements**\nAny relevant external resources or references like slack / discord threads that support the proposal\n```\n\n----------------------------------------\n\nTITLE: Setting Environment Variables for Cypress Tests\nDESCRIPTION: Shell commands to set necessary environment variables for running Cypress tests, including connector ID, base URL, and API keys.\nSOURCE: https://github.com/juspay/hyperswitch/blob/main/cypress-tests-v2/README.md#2025-04-16_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nexport CYPRESS_CONNECTOR=\"connector_id\"\nexport CYPRESS_BASEURL=\"base_url\"\nexport DEBUG=cypress:cli\nexport CYPRESS_ADMINAPIKEY=\"admin_api_key\"\nexport CYPRESS_CONNECTOR_AUTH_FILE_PATH=\"path/to/creds.json\"\n```\n\n----------------------------------------\n\nTITLE: Defining Payment Method Auth Services Header\nDESCRIPTION: Markdown header defining the main purpose of the payment method authentication services documentation.\nSOURCE: https://github.com/juspay/hyperswitch/blob/main/crates/pm_auth/README.md#2025-04-16_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n# Payment Method Auth Services\n```\n\n----------------------------------------\n\nTITLE: Adding Custom Cypress Command for List Mandate Test\nDESCRIPTION: JavaScript code to add a custom Cypress command for testing the List Mandate functionality, including API request and response assertions.\nSOURCE: https://github.com/juspay/hyperswitch/blob/main/cypress-tests-v2/README.md#2025-04-16_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nCypress.Commands.add(\"listMandateCallTest\", (globalState) => {\n  const customerId = globalState.get(\"customerId\");\n  cy.request({\n    method: \"GET\",\n    url: `${globalState.get(\"baseUrl\")}/customers/${customerId}/mandates`,\n    headers: {\n      \"Content-Type\": \"application/json\",\n      \"api-key\": globalState.get(\"apiKey\"),\n    },\n  }).then((response) => {\n    const xRequestId = response.headers[\"x-request-id\"];\n    if (xRequestId) {\n      cy.task(\"cli_log\", \"x-request-id ->> \" + xRequestId);\n    } else {\n      cy.task(\n        \"cli_log\",\n        \"x-request-id is not available in the response headers\"\n      );\n    }\n    expect(response.headers[\"content-type\"]).to.include(\"application/json\");\n    console.log(response.body);\n    let i = 0;\n    for (i in response.body) {\n      if (response.body[i].mandate_id === globalState.get(\"mandateId\")) {\n        expect(response.body[i].status).to.equal(\"active\");\n      }\n    }\n  });\n});\n```\n\n----------------------------------------\n\nTITLE: OpenAPI Specification for Refund Retrieval Endpoint\nDESCRIPTION: An OpenAPI specification defining the GET /refunds/{refund_id} endpoint that allows retrieving information about a specific refund by its unique identifier. The specification includes path parameters and potential response structures.\nSOURCE: https://github.com/juspay/hyperswitch/blob/main/api-reference/api-reference/refunds/refunds--update.mdx#2025-04-16_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nopenapi: openapi_spec post /refunds/{refund_id}\n```\n\n----------------------------------------\n\nTITLE: Exporting Config to JSON File in Shell\nDESCRIPTION: Shows how to use the config_importer to convert a TOML file to JSON format and save it to a specified output file.\nSOURCE: https://github.com/juspay/hyperswitch/blob/main/crates/config_importer/README.md#2025-04-16_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\ncargo run --bin config_importer -- --input-file config/development.toml --output-file config/development.json\n```\n\n----------------------------------------\n\nTITLE: Running Cargo Commands with Features\nDESCRIPTION: Common cargo commands that require the --all-features flag for the Hyperswitch project, plus cargo fmt command that needs nightly toolchain.\nSOURCE: https://github.com/juspay/hyperswitch/blob/main/docs/CONTRIBUTING.md#2025-04-16_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\ncargo check --all-features\ncargo clippy --all-features\ncargo test --all-features\n```\n\nLANGUAGE: shell\nCODE:\n```\ncargo +nightly fmt\n```\n\n----------------------------------------\n\nTITLE: Building Docker Drainer Image\nDESCRIPTION: Command to build the Hyperswitch drainer Docker image using the Dockerfile.\nSOURCE: https://github.com/juspay/hyperswitch/blob/main/docs/building_docker_images.md#2025-04-16_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\ndocker build \\\n    --load \\\n    --file Dockerfile \\\n    --build-arg \"BINARY=drainer\" \\\n    --tag hyperswitch-drainer \\\n    .\n```\n\n----------------------------------------\n\nTITLE: Example creds.json Structure for Multiple Connectors\nDESCRIPTION: Comprehensive JSON structure showing the creds.json file format for multiple payment connectors with different authentication types and required keys.\nSOURCE: https://github.com/juspay/hyperswitch/blob/main/cypress-tests-v2/README.md#2025-04-16_snippet_6\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"adyen\": {\n    \"auth_type\": \"SignatureKey\",\n    \"api_key\": \"api_key\",\n    \"key1\": \"key1\",\n    \"api_secret\": \"api_secret\"\n  },\n  \"bankofamerica\": {\n    \"auth_type\": \"SignatureKey\",\n    \"api_key\": \"api_key\",\n    \"key1\": \"key1\",\n    \"api_secret\": \"api_secret\"\n  },\n  \"bluesnap\": {\n    \"auth_type\": \"BodyKey\",\n    \"api_key\": \"api_key\",\n    \"key1\": \"key1\"\n  },\n  \"cybersource\": {\n    \"auth_type\": \"SignatureKey\",\n    \"api_key\": \"api_key\",\n    \"key1\": \"key1\",\n    \"api_secret\": \"api_secret\"\n  },\n  \"nmi\": {\n    \"auth_type\": \"BodyKey\",\n    \"api_key\": \"api_key\",\n    \"key1\": \"key1\"\n  },\n  \"paypal\": {\n    \"auth_type\": \"BodyKey\",\n    \"api_key\": \"api_key\",\n    \"key1\": \"key1\"\n  },\n  \"stripe\": {\n    \"auth_type\": \"HeaderKey\",\n    \"api_key\": \"api_key\"\n  },\n  \"trustpay\": {\n    \"auth_type\": \"SignatureKey\",\n    \"api_key\": \"api_key\",\n    \"key1\": \"key1\",\n    \"api_secret\": \"api_secret\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining GET /events/{merchant_id} Endpoint in OpenAPI YAML\nDESCRIPTION: This YAML snippet defines the OpenAPI specification for the GET /events/{merchant_id} endpoint. It specifies the path, HTTP method, and likely includes details about parameters, responses, and other API-related information for retrieving events associated with a specific merchant ID.\nSOURCE: https://github.com/juspay/hyperswitch/blob/main/api-reference/api-reference/event/events--list.mdx#2025-04-16_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nopenapi: get /events/{merchant_id}\n```\n\n----------------------------------------\n\nTITLE: Installing Diesel CLI\nDESCRIPTION: Installs Diesel CLI with PostgreSQL support using cargo\nSOURCE: https://github.com/juspay/hyperswitch/blob/main/docs/try_local_system.md#2025-04-16_snippet_12\n\nLANGUAGE: shell\nCODE:\n```\ncargo install diesel_cli --no-default-features --features postgres\n```\n\n----------------------------------------\n\nTITLE: Setting Up Code Coverage Tools\nDESCRIPTION: Commands for installing required code coverage tools grcov and llvm-tools-preview.\nSOURCE: https://github.com/juspay/hyperswitch/blob/main/docs/CONTRIBUTING.md#2025-04-16_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\nrustup component add llvm-tools-preview\ncargo install grcov\n```\n\n----------------------------------------\n\nTITLE: Running Cypress Tests in Different Modes\nDESCRIPTION: npm commands to run Cypress tests in interactive mode, headless mode, and specific test suites for payments, payouts, and routing.\nSOURCE: https://github.com/juspay/hyperswitch/blob/main/cypress-tests-v2/README.md#2025-04-16_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\nnpm run cypress\nnpm run cypress:ci\nnpm run cypress:payments\nnpm run cypress:payouts\nnpm run cypress:routing\n```\n\n----------------------------------------\n\nTITLE: Newman Directory Export Command\nDESCRIPTION: Command to export a Postman collection to its directory structure\nSOURCE: https://github.com/juspay/hyperswitch/blob/main/postman/README.md#2025-04-16_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nnewman dir-export /path/to/collection.json\n```\n\n----------------------------------------\n\nTITLE: Building Docker Producer Image\nDESCRIPTION: Command to build the Hyperswitch producer Docker image using the Dockerfile with producer scheduler flow.\nSOURCE: https://github.com/juspay/hyperswitch/blob/main/docs/building_docker_images.md#2025-04-16_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\ndocker build \\\n    --load \\\n    --file Dockerfile \\\n    --build-arg \"BINARY=scheduler\" \\\n    --build-arg \"SCHEDULER_FLOW=producer\" \\\n    --tag hyperswitch-producer \\\n    .\n```\n\n----------------------------------------\n\nTITLE: OpenAPI GET Endpoint Definition for Event Attempts\nDESCRIPTION: YAML definition specifying the endpoint path for retrieving event attempt records using merchant_id and event_id path parameters\nSOURCE: https://github.com/juspay/hyperswitch/blob/main/api-reference/api-reference/event/events--delivery-attempt-list.mdx#2025-04-16_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nopenapi: get /events/{merchant_id}/{event_id}/attempts\n```\n\n----------------------------------------\n\nTITLE: Database Setup Commands\nDESCRIPTION: Creates database user and database for Hyperswitch application\nSOURCE: https://github.com/juspay/hyperswitch/blob/main/docs/try_local_system.md#2025-04-16_snippet_15\n\nLANGUAGE: shell\nCODE:\n```\nexport DB_USER=\"db_user\"\nexport DB_PASS=\"db_pass\"\nexport DB_NAME=\"hyperswitch_db\"\n\nsudo -u postgres psql -e -c \\\n   \"CREATE USER $DB_USER WITH PASSWORD '$DB_PASS' SUPERUSER CREATEDB CREATEROLE INHERIT LOGIN;\"\nsudo -u postgres psql -e -c \\\n   \"CREATE DATABASE $DB_NAME;\"\n```\n\n----------------------------------------\n\nTITLE: Cleaning Up Coverage Data Files\nDESCRIPTION: Command to remove generated coverage raw data files.\nSOURCE: https://github.com/juspay/hyperswitch/blob/main/docs/CONTRIBUTING.md#2025-04-16_snippet_6\n\nLANGUAGE: shell\nCODE:\n```\nrm **/*.profraw\n```\n\n----------------------------------------\n\nTITLE: Generating Environment Variables with Custom Prefix in Shell\nDESCRIPTION: Illustrates how to use the config_importer with a custom prefix for generating environment variables, specifically for the drainer application.\nSOURCE: https://github.com/juspay/hyperswitch/blob/main/crates/config_importer/README.md#2025-04-16_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\ncargo run --bin config_importer -- --input-file config/drainer.toml --prefix drainer\n```\n\n----------------------------------------\n\nTITLE: Dynamic Configuration Management\nDESCRIPTION: JSON configuration for managing dynamic test configurations including delays and credential selection.\nSOURCE: https://github.com/juspay/hyperswitch/blob/main/cypress-tests/README.md#2025-04-16_snippet_10\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"Configs\": {\n    \"DELAY\": {\n      \"STATUS\": true,\n      \"TIMEOUT\": 15000\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining OpenAPI Specification for GET /relay/{relay_id} Endpoint in YAML\nDESCRIPTION: This YAML snippet specifies the OpenAPI documentation for the GET /relay/{relay_id} endpoint. It defines the path, HTTP method, and likely includes details about parameters, responses, and other API-related information.\nSOURCE: https://github.com/juspay/hyperswitch/blob/main/api-reference/api-reference/relay/relay--retrieve.mdx#2025-04-16_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nopenapi: openapi_spec get /relay/{relay_id}\n```\n\n----------------------------------------\n\nTITLE: Running Docker Compose with Scheduler Profile\nDESCRIPTION: Command to run Docker Compose with the scheduler components profile enabled.\nSOURCE: https://github.com/juspay/hyperswitch/blob/main/docs/try_local_system.md#2025-04-16_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\ndocker compose --profile scheduler up -d\n```\n\n----------------------------------------\n\nTITLE: Installing System Dependencies on Ubuntu\nDESCRIPTION: Installs required system packages pkg-config and OpenSSL development libraries\nSOURCE: https://github.com/juspay/hyperswitch/blob/main/docs/try_local_system.md#2025-04-16_snippet_13\n\nLANGUAGE: shell\nCODE:\n```\nsudo apt install pkg-config libssl-dev\n```\n\n----------------------------------------\n\nTITLE: Cloning Repository and Installing Dependencies for Cypress Tests\nDESCRIPTION: Commands to clone the Hyperswitch repository and install Cypress dependencies in the cypress-tests directory.\nSOURCE: https://github.com/juspay/hyperswitch/blob/main/cypress-tests-v2/README.md#2025-04-16_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\ngit clone https://github.com/juspay/hyperswitch\ncd cypress-tests\nnpm install\n```\n\n----------------------------------------\n\nTITLE: Running UI Tests - All Connector Tests\nDESCRIPTION: Example command for running all UI tests for the Adyen connector\nSOURCE: https://github.com/juspay/hyperswitch/blob/main/crates/test_utils/README.md#2025-04-16_snippet_4\n\nLANGUAGE: shell\nCODE:\n```\ncargo test --package test_utils --test connectors -- adyen_uk_ui:: --test-threads=1\n```\n\n----------------------------------------\n\nTITLE: Enabling Dashboard Data Features in TOML\nDESCRIPTION: TOML configuration for enabling various data features in the Hyperswitch dashboard.\nSOURCE: https://github.com/juspay/hyperswitch/blob/main/crates/analytics/docs/README.md#2025-04-16_snippet_5\n\nLANGUAGE: toml\nCODE:\n```\n[default.features]\naudit_trail=true\nsystem_metrics=true\nglobal_search=true\n```\n\n----------------------------------------\n\nTITLE: OpenAPI GET Endpoint for Poll Status\nDESCRIPTION: Defines an OpenAPI endpoint specification for retrieving poll status using a poll_id parameter.\nSOURCE: https://github.com/juspay/hyperswitch/blob/main/api-reference/api-reference/poll/poll--retrieve-poll-status.mdx#2025-04-16_snippet_0\n\nLANGUAGE: openapi\nCODE:\n```\nopenapi: get /poll/status/{poll_id}\n```\n\n----------------------------------------\n\nTITLE: Verifying Hyperswitch Server Health\nDESCRIPTION: Command to check if the Hyperswitch server is running properly by making a request to the health endpoint.\nSOURCE: https://github.com/juspay/hyperswitch/blob/main/docs/try_local_system.md#2025-04-16_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\ncurl --head --request GET 'http://localhost:8080/health'\n```\n\n----------------------------------------\n\nTITLE: Installing Rust Toolchain on Ubuntu\nDESCRIPTION: Downloads and installs the stable Rust toolchain using rustup script\nSOURCE: https://github.com/juspay/hyperswitch/blob/main/docs/try_local_system.md#2025-04-16_snippet_9\n\nLANGUAGE: shell\nCODE:\n```\ncurl --proto '=https' --tlsv1.2 -sSf https://sh.rustup.rs | sh\n```\n\n----------------------------------------\n\nTITLE: Defining Hyperswitch Domain Models Header\nDESCRIPTION: Markdown header defining the purpose of domain models documentation for Hyperswitch's business layer components.\nSOURCE: https://github.com/juspay/hyperswitch/blob/main/crates/hyperswitch_domain_models/README.md#2025-04-16_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n# Hyperswitch domain models\n```\n\n----------------------------------------\n\nTITLE: API Models Header in Markdown\nDESCRIPTION: Markdown header and description for API models documentation, indicating that this file contains request/response model definitions for the router crate\nSOURCE: https://github.com/juspay/hyperswitch/blob/main/crates/api_models/README.md#2025-04-16_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n# API Models\n\nRequest/response models for the `router` crate.\n```\n\n----------------------------------------\n\nTITLE: Accessing Clickhouse Client in Docker Container\nDESCRIPTION: Commands to access the Clickhouse client within the Docker container and show available tables.\nSOURCE: https://github.com/juspay/hyperswitch/blob/main/crates/analytics/docs/README.md#2025-04-16_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n# On your local terminal\ndocker compose exec clickhouse-server bash\n\n# Inside the clickhouse-server container shell\nclickhouse-client --user default\n\n# Inside the clickhouse-client shell\nSHOW TABLES;\n```\n\n----------------------------------------\n\nTITLE: Defining OpenAPI Specification for POST /gsm/get Endpoint in YAML\nDESCRIPTION: This YAML snippet specifies the OpenAPI definition for the POST /gsm/get endpoint. It includes the API version, endpoint path, and likely contains further details about request/response schemas and parameters.\nSOURCE: https://github.com/juspay/hyperswitch/blob/main/api-reference/api-reference/gsm/gsm--get.mdx#2025-04-16_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nopenapi: openapi_spec post /gsm/get\n```\n\n----------------------------------------\n\nTITLE: Building Project with Coverage Instrumentation\nDESCRIPTION: Command to build the router binary with code coverage instrumentation enabled.\nSOURCE: https://github.com/juspay/hyperswitch/blob/main/docs/CONTRIBUTING.md#2025-04-16_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\nRUSTFLAGS=\"-Cinstrument-coverage\" cargo build --bin=router --package=router\n```\n\n----------------------------------------\n\nTITLE: Running Docker Compose with OLAP Profile\nDESCRIPTION: Command to run Docker Compose with data services (OLAP) profile enabled.\nSOURCE: https://github.com/juspay/hyperswitch/blob/main/docs/try_local_system.md#2025-04-16_snippet_4\n\nLANGUAGE: shell\nCODE:\n```\ndocker compose --profile olap up -d\n```\n\n----------------------------------------\n\nTITLE: Running Test Utils Command\nDESCRIPTION: Command to execute test utilities with required and optional parameters including connector name, base URL, and admin API key\nSOURCE: https://github.com/juspay/hyperswitch/blob/main/crates/test_utils/README.md#2025-04-16_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\ncargo run --package test_utils --bin test_utils -- --connector-name=<connector_name> --base-url=<base_url> --admin-api-key=<admin_api_key> \\\n# optionally\n--folder \"<folder_name_1>,<folder_name_2>,...<folder_name_n>\" --verbose\n```\n\n----------------------------------------\n\nTITLE: Enabling Forex Functionality in TOML Configuration\nDESCRIPTION: TOML configuration for enabling Forex functionality and setting up API keys for primary and fallback services.\nSOURCE: https://github.com/juspay/hyperswitch/blob/main/crates/analytics/docs/README.md#2025-04-16_snippet_3\n\nLANGUAGE: toml\nCODE:\n```\n[analytics]\nforex_enabled = true # default set to false \n\n[forex_api]\napi_key = \"\"\nfallback_api_key = \"\"\n```\n\n----------------------------------------\n\nTITLE: Defining OpenAPI Specification for GSM Delete Endpoint in YAML\nDESCRIPTION: This YAML header defines an OpenAPI specification for a POST endpoint at /gsm/delete. The specification would typically include details about request parameters, response formats, and authentication requirements for deleting GSM resources.\nSOURCE: https://github.com/juspay/hyperswitch/blob/main/api-reference/api-reference/gsm/gsm--delete.mdx#2025-04-16_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nopenapi: openapi_spec post /gsm/delete\n```\n\n----------------------------------------\n\nTITLE: Setting Up Hyperswitch Cypress Test Environment\nDESCRIPTION: Commands to clone the repository, install dependencies, set up the cards database, and configure environment variables for Cypress tests.\nSOURCE: https://github.com/juspay/hyperswitch/blob/main/cypress-tests/README.md#2025-04-16_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\ngit clone https://github.com/juspay/hyperswitch.git\ncd hyperswitch/cypress-tests\nnpm ci\n\npsql --host=localhost --port=5432 --username=db_user --dbname=hyperswitch_db --command \"\\copy cards_info FROM '.github/data/cards_info.csv' DELIMITER ',' CSV HEADER;\"\n\nexport CYPRESS_CONNECTOR=\"connector_id\"\nexport CYPRESS_BASEURL=\"base_url\"\nexport DEBUG=cypress:cli\nexport CYPRESS_ADMINAPIKEY=\"admin_api_key\"\nexport CYPRESS_CONNECTOR_AUTH_FILE_PATH=\"path/to/creds.json\"\n```\n\n----------------------------------------\n\nTITLE: Cargo Build Release Command\nDESCRIPTION: The cargo build command used within the Dockerfile to build optimized release binaries with specified features.\nSOURCE: https://github.com/juspay/hyperswitch/blob/main/docs/building_docker_images.md#2025-04-16_snippet_4\n\nLANGUAGE: shell\nCODE:\n```\ncargo build --release --features release ${EXTRA_FEATURES}\n```\n\n----------------------------------------\n\nTITLE: Defining Common Utilities Path in Markdown\nDESCRIPTION: Markdown header and description defining the common utilities module location and its purpose in the HyperSwitch project.\nSOURCE: https://github.com/juspay/hyperswitch/blob/main/crates/common_utils/README.md#2025-04-16_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n# Common Utils\n\nUtilities shared across `router` and other crates.\n```\n\n----------------------------------------\n\nTITLE: Setting Connector Authentication Environment\nDESCRIPTION: Bash commands for configuring connector authentication and running tests\nSOURCE: https://github.com/juspay/hyperswitch/blob/main/add_connector_updated.md#2025-04-16_snippet_18\n\nLANGUAGE: bash\nCODE:\n```\nexport CONNECTOR_AUTH_FILE_PATH=\"/hyperswitch/crates/router/tests/connectors/sample_auth.toml\"\ncargo test --package router --test connectors -- checkout --test-threads=1\n```\n\n----------------------------------------\n\nTITLE: Defining OpenAPI Specification for Routing Deactivation Endpoint in YAML\nDESCRIPTION: This YAML snippet specifies the OpenAPI definition for the POST /routing/deactivate endpoint. It likely includes details on request body, parameters, responses, and security requirements for deactivating a routing configuration.\nSOURCE: https://github.com/juspay/hyperswitch/blob/main/api-reference/api-reference/routing/routing--deactivate.mdx#2025-04-16_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nopenapi: post /routing/deactivate\n```\n\n----------------------------------------\n\nTITLE: Running Hyperswitch Cypress Tests in Different Modes\nDESCRIPTION: Commands to run Cypress tests in development (interactive) mode and CI (headless) mode for different test suites.\nSOURCE: https://github.com/juspay/hyperswitch/blob/main/cypress-tests/README.md#2025-04-16_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\n# Development Mode (Interactive)\nnpm run cypress\n\n# CI Mode (Headless)\n# All tests\nnpm run cypress:ci\n\n# Specific test suites\nnpm run cypress:misc                # Miscellaneous tests (e.g. health check, memory cache etc.)\nnpm run cypress:payment-method-list # Payment method list tests\nnpm run cypress:payments            # Payment tests\nnpm run cypress:payouts             # Payout tests\nnpm run cypress:routing             # Routing tests\n```\n\n----------------------------------------\n\nTITLE: Demonstrating Directory Structure\nDESCRIPTION: Shows the expected directory structure for adding connector icons in the project\nSOURCE: https://github.com/juspay/hyperswitch/blob/main/add_connector_updated.md#2025-04-16_snippet_16\n\nLANGUAGE: plaintext\nCODE:\n```\npublic\n└── hyperswitch\n    └── Gateway\n        └── YOURCONNECTOR.SVG\n```\n\n----------------------------------------\n\nTITLE: Running Docker Compose with Monitoring Profile\nDESCRIPTION: Command to run Docker Compose with monitoring services profile enabled.\nSOURCE: https://github.com/juspay/hyperswitch/blob/main/docs/try_local_system.md#2025-04-16_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\ndocker compose --profile monitoring up -d\n```\n\n----------------------------------------\n\nTITLE: Installing hsdev using Cargo\nDESCRIPTION: Command to install hsdev using Cargo package manager with force flag from a local path.\nSOURCE: https://github.com/juspay/hyperswitch/blob/main/crates/hsdev/README.md#2025-04-16_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\ncargo install --force --path crates/hsdev\n```\n\n----------------------------------------\n\nTITLE: Defining OpenAPI Schema for Outgoing Webhook\nDESCRIPTION: Schema definition showing that this file represents an OpenAPI specification for outgoing webhook events in HyperSwitch\nSOURCE: https://github.com/juspay/hyperswitch/blob/main/api-reference/api-reference/schemas/outgoing--webhook.mdx#2025-04-16_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nopenapi-schema: OutgoingWebhook\n```\n\n----------------------------------------\n\nTITLE: Adding Custom Cypress Commands\nDESCRIPTION: Example of adding a new custom Cypress command with API request handling and global state access.\nSOURCE: https://github.com/juspay/hyperswitch/blob/main/cypress-tests/README.md#2025-04-16_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\n// cypress/support/commands.js\nCypress.Commands.add(\"newCommand\", (params, globalState) => {\n  const baseUrl = globalState.get(\"baseUrl\");\n  const apiKey = globalState.get(\"apiKey\");\n  const url = `${baseUrl}/endpoint`;\n\n  cy.request({\n    method: \"POST\",\n    url: url,\n    headers: {\n      \"api-key\": apiKey,\n    },\n    body: params,\n  }).then((response) => {\n    // Assertions\n  });\n});\n```\n\n----------------------------------------\n\nTITLE: Generating Rust Code from Schema\nDESCRIPTION: Script for generating Rust code from OpenAPI schema and formatting it according to project standards\nSOURCE: https://github.com/juspay/hyperswitch/blob/main/add_connector_updated.md#2025-04-16_snippet_20\n\nLANGUAGE: bash\nCODE:\n```\nexport CONNECTOR_NAME=\"<CONNECTOR-NAME>\"\nexport SCHEMA_PATH=\"<PATH-TO-SCHEMA>\"\nopenapi-generator generate -g rust -i ${SCHEMA_PATH} -o temp && cat temp/src/models/* > crates/router/src/connector/${CONNECTOR_NAME}/temp.rs && rm -rf temp && sed -i'' -r \"s/^pub use.*//;s/^pub mod.*//;s/^/.*//;s/^.\\*.*//;s/crate::models:://g;\" crates/router/src/connector/${CONNECTOR_NAME}/temp.rs && cargo +nightly fmt\n```\n\n----------------------------------------\n\nTITLE: Commit Message Format Template\nDESCRIPTION: Template showing the structure of a commit message with header, body and footer sections.\nSOURCE: https://github.com/juspay/hyperswitch/blob/main/docs/CONTRIBUTING.md#2025-04-16_snippet_8\n\nLANGUAGE: text\nCODE:\n```\n<header>\n<BLANK LINE>\n<optional body>\n<BLANK LINE>\n<optional footer>\n```\n\n----------------------------------------\n\nTITLE: Resolving an RFC Template in Hyperswitch\nDESCRIPTION: This template provides a structure for resolving an RFC in the Hyperswitch project. It includes sections for the title, status, resolution, implementation details, and acknowledgements.\nSOURCE: https://github.com/juspay/hyperswitch/blob/main/docs/rfcs/guidelines.md#2025-04-16_snippet_1\n\nLANGUAGE: text\nCODE:\n```\n**Title**\nThe title of the resolved RFC\n\n**Status**\nThe final status of the RFC (Accepted / Rejected)\n\n**Resolution**\nA description of the final resolution of the RFC, including any modifications or adjustments made during the discussion and review process\n\n**Implementation**\nA description of how the resolution will be implemented, including any relevant future scope for the solution\n\n**Acknowledgements**\nAny final thoughts or acknowledgements for the community and contributors who participated in the RFC process\n```\n\n----------------------------------------\n\nTITLE: Defining OpenAPI Specification for GetEliminationStatus Endpoint in YAML\nDESCRIPTION: This YAML snippet specifies the OpenAPI definition for the GetEliminationStatus endpoint of the EliminationAnalyser service. It defines the HTTP method as POST and the path for the endpoint.\nSOURCE: https://github.com/juspay/hyperswitch/blob/main/api-reference/intelligent-router-api-reference/elimination/fetch-eliminated-processor-list.mdx#2025-04-16_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nopenapi: post /elimination.EliminationAnalyser/GetEliminationStatus\n```\n\n----------------------------------------\n\nTITLE: Running All Performance Test Comparisons\nDESCRIPTION: Command to run and compare all performance test scripts against their baselines.\nSOURCE: https://github.com/juspay/hyperswitch/blob/main/loadtest/README.md#2025-04-16_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\nbash loadtest.sh -ca\n```\n\n----------------------------------------\n\nTITLE: Defining BillwerkPaymentState Enum in Rust\nDESCRIPTION: Defines the BillwerkPaymentState enum representing different payment states returned by the Billwerk connector. It also implements the From trait to map these states to AttemptStatus.\nSOURCE: https://github.com/juspay/hyperswitch/blob/main/add_connector_updated.md#2025-04-16_snippet_3\n\nLANGUAGE: rust\nCODE:\n```\n#[derive(Debug, Clone, Serialize, Deserialize, PartialEq)]\n#[serde(rename_all = \"lowercase\")]\npub enum BillwerkPaymentState {\n    Created,\n    Authorized,\n    Pending,\n    Settled,\n    Failed,\n    Cancelled,\n}\n\nimpl From<BillwerkPaymentState> for enums::AttemptStatus {\n    fn from(item: BillwerkPaymentState) -> Self {\n        match item {\n            BillwerkPaymentState::Created | BillwerkPaymentState::Pending => Self::Pending,\n            BillwerkPaymentState::Authorized => Self::Authorized,\n            BillwerkPaymentState::Settled => Self::Charged,\n            BillwerkPaymentState::Failed => Self::Failure,\n            BillwerkPaymentState::Cancelled => Self::Voided,\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Running Multiple Docker Compose Profiles\nDESCRIPTION: Command to run Docker Compose with multiple profiles enabled simultaneously.\nSOURCE: https://github.com/juspay/hyperswitch/blob/main/docs/try_local_system.md#2025-04-16_snippet_5\n\nLANGUAGE: shell\nCODE:\n```\ndocker compose --profile scheduler --profile monitoring up -d\n```\n\n----------------------------------------\n\nTITLE: Connector Credentials Configuration\nDESCRIPTION: JSON configuration example for different payment connector credentials with single and multiple credential support.\nSOURCE: https://github.com/juspay/hyperswitch/blob/main/cypress-tests/README.md#2025-04-16_snippet_9\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"connector_name\": {\n    \"connector_1\": {\n      \"connector_account_details\": {\n        \"auth_type\": \"SignatureKey\",\n        \"api_key\": \"api_key\",\n        \"key1\": \"key1\",\n        \"api_secret\": \"api_secret\"\n      }\n    },\n    \"connector_2\": {\n      \"connector_account_details\": {\n        \"auth_type\": \"SignatureKey\",\n        \"api_key\": \"api_key\",\n        \"key1\": \"key1\",\n        \"api_secret\": \"api_secret\"\n      }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining OpenAPI POST Endpoint for Success Rate Calculation\nDESCRIPTION: OpenAPI specification for a POST endpoint that calculates and returns success rate metrics through the SuccessRateCalculator service using the /success_rate path\nSOURCE: https://github.com/juspay/hyperswitch/blob/main/api-reference/intelligent-router-api-reference/success-rate/fetch-success-rate-for-an-entity.mdx#2025-04-16_snippet_0\n\nLANGUAGE: openapi\nCODE:\n```\nopenapi: post /success_rate.SuccessRateCalculator/FetchSuccessRate\n```\n\n----------------------------------------\n\nTITLE: Custom Named Performance Test Run\nDESCRIPTION: Example of running performance test with a custom run name for the payment confirmation script.\nSOURCE: https://github.com/juspay/hyperswitch/blob/main/loadtest/README.md#2025-04-16_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nbash loadtest.sh -r made_calls_asyns -s payment-confirm\n```\n\n----------------------------------------\n\nTITLE: Defining BillwerkErrorResponse Struct in Rust\nDESCRIPTION: Defines the BillwerkErrorResponse struct to handle error responses from the Billwerk connector. This struct is used for error handling and parsing error messages from the connector.\nSOURCE: https://github.com/juspay/hyperswitch/blob/main/add_connector_updated.md#2025-04-16_snippet_6\n\nLANGUAGE: rust\nCODE:\n```\n#[derive(Debug, Serialize, Deserialize)]\npub struct BillwerkErrorResponse {\n    pub code: Option<i32>,\n    pub error: String,\n    pub message: Option<String>,\n}\n```\n\n----------------------------------------\n\nTITLE: OpenAPI POST Endpoint for Success Rate Calculation\nDESCRIPTION: Defines a POST endpoint path for fetching success rate metrics through the SuccessRateCalculator service. The endpoint combines entity-specific and global success rate calculations.\nSOURCE: https://github.com/juspay/hyperswitch/blob/main/api-reference/intelligent-router-api-reference/success-rate/fetch-entity-and-global-success-rates.mdx#2025-04-16_snippet_0\n\nLANGUAGE: openapi\nCODE:\n```\nopenapi: post /success_rate.SuccessRateCalculator/FetchEntityAndGlobalSuccessRate\n```\n\n----------------------------------------\n\nTITLE: Comparing Performance Test Results\nDESCRIPTION: Command to compare new performance test results with baseline using commit numbers for reference.\nSOURCE: https://github.com/juspay/hyperswitch/blob/main/loadtest/README.md#2025-04-16_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\nbash loadtest.sh -c -s payment-confirm\n```\n\n----------------------------------------\n\nTITLE: OpenAPI Specification for Rust Locker Data Retrieval\nDESCRIPTION: OpenAPI specification defining the POST endpoint /data/retrieve for the Rust Locker service.\nSOURCE: https://github.com/juspay/hyperswitch/blob/main/api-reference/locker-api-reference/cards/retrieve-data-from-locker.mdx#2025-04-16_snippet_0\n\nLANGUAGE: openapi\nCODE:\n```\nopenapi: rust_locker_open_api_spec post /data/retrieve\n```\n\n----------------------------------------\n\nTITLE: Running Default Health Check Script\nDESCRIPTION: Command to run the default health.js script for baseline performance testing.\nSOURCE: https://github.com/juspay/hyperswitch/blob/main/loadtest/README.md#2025-04-16_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nbash loadtest.sh\n```\n\n----------------------------------------\n\nTITLE: Implementing TryFrom Trait for Request Transformation\nDESCRIPTION: Implementation of the TryFrom trait that transforms Hyperswitch's router data into the connector's payment request format. This handles data mapping and validation.\nSOURCE: https://github.com/juspay/hyperswitch/blob/main/add_connector_updated.md#2025-04-16_snippet_2\n\nLANGUAGE: rust\nCODE:\n```\nimpl TryFrom<&BillwerkRouterData<&types::PaymentsAuthorizeRouterData>> for BillwerkPaymentsRequest {\n    type Error = error_stack::Report<errors::ConnectorError>;\n    fn try_from(\n        item: &BillwerkRouterData<&types::PaymentsAuthorizeRouterData>,\n    ) -> Result<Self, Self::Error> {\n        if item.router_data.is_three_ds() {\n            return Err(errors::ConnectorError::NotImplemented(\n                \"Three_ds payments through Billwerk\".to_string(),\n            )\n            .into());\n        };\n        let source = match item.router_data.get_payment_method_token()? {\n            PaymentMethodToken::Token(pm_token) => Ok(pm_token),\n            _ => Err(errors::ConnectorError::MissingRequiredField {\n                field_name: \"payment_method_token\",\n            }),\n        }?;\n        Ok(Self {\n            handle: item.router_data.connector_request_reference_id.clone(),\n            amount: item.amount,\n            source,\n            currency: item.router_data.request.currency,\n            customer: BillwerkCustomerObject {\n                handle: item.router_data.customer_id.clone(),\n                email: item.router_data.request.email.clone(),\n                address: item.router_data.get_optional_billing_line1(),\n                address2: item.router_data.get_optional_billing_line2(),\n                city: item.router_data.get_optional_billing_city(),\n                country: item.router_data.get_optional_billing_country(),\n                first_name: item.router_data.get_optional_billing_first_name(),\n                last_name: item.router_data.get_optional_billing_last_name(),\n            },\n            metadata: item.router_data.request.metadata.clone().map(Into::into),\n            settle: item.router_data.request.is_auto_capture()?,\n        })\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Generating OpenAPI Specification File using Cargo\nDESCRIPTION: Command to generate the OpenAPI specification file from the codebase using Cargo with v1 features enabled.\nSOURCE: https://github.com/juspay/hyperswitch/blob/main/api-reference/README.md#2025-04-16_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ncargo r -p openapi --features v1\n```\n\n----------------------------------------\n\nTITLE: Defining OpenAPI Endpoint for Updating Saved Payment Method\nDESCRIPTION: This YAML snippet specifies the OpenAPI endpoint for updating a saved payment method. It uses the PUT HTTP method and includes a path parameter ':id' to identify the specific payment method session.\nSOURCE: https://github.com/juspay/hyperswitch/blob/main/api-reference-v2/api-reference/payment-method-session/payment-method-session--update-a-saved-payment-method.mdx#2025-04-16_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nopenapi: put /v2/payment-method-session/:id/update-saved-payment-method\n```\n\n----------------------------------------\n\nTITLE: Generating Sandbox Config for Hyperswitch Scheduler Consumer\nDESCRIPTION: Shell command to merge the consumer.toml file with the sandbox_release.toml file to create the final consumer configuration for the sandbox environment.\nSOURCE: https://github.com/juspay/hyperswitch/blob/main/config/deployments/README.md#2025-04-16_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\ncat config/deployments/scheduler/consumer.toml config/deployments/sandbox_release.toml > config/deployments/consumer_sandbox_release.toml\n```\n\n----------------------------------------\n\nTITLE: Hyperswitch Cypress Tests Folder Structure\nDESCRIPTION: Overview of the folder structure for the Hyperswitch Cypress testing framework, including test files, configurations, and utilities.\nSOURCE: https://github.com/juspay/hyperswitch/blob/main/cypress-tests/README.md#2025-04-16_snippet_4\n\nLANGUAGE: txt\nCODE:\n```\n.\n├── .prettierrc                             # prettier configs\n├── README.md                               # this file\n├── cypress\n│   ├── e2e\n│   │   ├── configs                         # Directory for utility functions related to connectors.\n│   │   │   ├── PaymentMethodList\n│   │   │   │   ├── connector_<1>.js\n│   │   │   │   ├── ...\n│   │   │   │   └── connector_<n>.js\n│   │   │   ├── Payment\n│   │   │   ├── Payout\n│   │   │   └── Routing\n│   │   └── spec                            # Directory for test scenarios related to connectors.\n│   │       ├── Misc\n│   │       │   ├── 00000-test_<0>.cy.js\n│   │       │   ├── ...\n│   │       │   └── 0000n-test_<n>.cy.js\n│   │       ├── Payment\n│   │       ├── PaymentMethodList\n│   │       ├── Payout\n│   │       └── Routing\n│   ├── fixtures                      # Directory for storing test data API request.\n│   │   ├── fixture_<1>.json\n│   │   ├── ...\n│   │   └── fixture_<n>.json\n│   ├── support                       # Directory for Cypress support files.\n│   │   ├── commands.js               # File containing custom Cypress commands and utilities.\n│   │   ├── e2e.js\n│   │   └── redirectionHandler.js     # Functions for handling redirections in tests\n│   └── utils\n│       ├── RequestBodyUtils.js       # Utility Functions for handling request bodies\n│       ├── State.js\n│       └── featureFlags.js           # Functions for validating and controlling feature flags\n├── screenshots\n│   └── <connector-name>              # Connector directory for storing screenshots of test failures\n│       └── <test-name>.png\n├── cypress.config.js                 # Cypress configuration file.\n├── eslint.config.js                  # linter configuration file.\n└── package.json                      # Node.js package file.\n```\n\n----------------------------------------\n\nTITLE: Delete Connector Account Endpoint Definition\nDESCRIPTION: OpenAPI specification for the DELETE /v2/connector-accounts/{id} endpoint that handles the deletion of connector accounts from the system.\nSOURCE: https://github.com/juspay/hyperswitch/blob/main/api-reference-v2/api-reference/connector-account/connector-account--delete.mdx#2025-04-16_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nopenapi: delete /v2/connector-accounts/{id}\n```\n\n----------------------------------------\n\nTITLE: Generating LCOV Coverage Report\nDESCRIPTION: Command to generate LCOV format coverage report for VSCode integration.\nSOURCE: https://github.com/juspay/hyperswitch/blob/main/docs/CONTRIBUTING.md#2025-04-16_snippet_7\n\nLANGUAGE: shell\nCODE:\n```\ngrcov . -s . -t lcov --output-path lcov.info --binary-path ./target/debug --keep-only \"crates/*\"\n```\n\n----------------------------------------\n\nTITLE: Parsing Redirect URL in HTTPS\nDESCRIPTION: This snippet demonstrates the structure of a redirect URL after a payment process. It includes parameters such as status, payment intent client secret, amount, manual retry allowance, signature, and signature algorithm.\nSOURCE: https://github.com/juspay/hyperswitch/blob/main/api-reference/introduction.mdx#2025-04-16_snippet_0\n\nLANGUAGE: https\nCODE:\n```\nhttps://app.hyperswitch.io?status=succeeded&payment_intent_client_secret=pay_NCv9vc19f8aa75OpFxH8_secret_V4zAc7V0C8WAw6FECMKM&amount=10000&manual_retry_allowed=false&signature=4fae0cfa775e4551db9356563d4b98b55662fe3c1c945fe215d90ccf3541282c535909ae901d82174d6b1e46ba1684aa0aa4c8861be0e2a9ef6f950a975d5014&signature_algorithm=HMAC-SHA512\n```\n\n----------------------------------------\n\nTITLE: Setting Environment Variable for Auth File Path\nDESCRIPTION: Sets the environment variable pointing to the connector authentication configuration file path\nSOURCE: https://github.com/juspay/hyperswitch/blob/main/crates/test_utils/README.md#2025-04-16_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nexport CONNECTOR_AUTH_FILE_PATH=/path/to/auth.toml\n```\n\n----------------------------------------\n\nTITLE: Debugging with Cypress Logging\nDESCRIPTION: Examples of debugging techniques using Cypress logging and screenshot capabilities.\nSOURCE: https://github.com/juspay/hyperswitch/blob/main/cypress-tests/README.md#2025-04-16_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\ncy.task(\"cli_log\", \"Debug message\");\ncy.log(\"Test state:\", globalState.data);\n```\n\nLANGUAGE: javascript\nCODE:\n```\ncy.screenshot(\"debug-state\");\n```\n\nLANGUAGE: javascript\nCODE:\n```\nbeforeEach(() => {\n  cy.log(\"Current state:\", JSON.stringify(globalState.data));\n});\n```\n\n----------------------------------------\n\nTITLE: Starting Mintlify Development Server\nDESCRIPTION: Command to start the Mintlify development server for rendering the OpenAPI specification.\nSOURCE: https://github.com/juspay/hyperswitch/blob/main/api-reference/README.md#2025-04-16_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nmintlify dev\n```\n\n----------------------------------------\n\nTITLE: Defining OpenAPI Specification for POST /accounts/{account_id} in YAML\nDESCRIPTION: This YAML snippet specifies the OpenAPI structure for the POST /accounts/{account_id} endpoint. It includes the endpoint path, HTTP method, and indicates that more detailed specifications are to be provided.\nSOURCE: https://github.com/juspay/hyperswitch/blob/main/api-reference/api-reference/merchant-account/merchant-account--update.mdx#2025-04-16_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nopenapi: post /accounts/{account_id}\n```\n\n----------------------------------------\n\nTITLE: Running UI Tests - Specific Payment Test\nDESCRIPTION: Example command for running a specific Google Pay payment test for the Adyen connector\nSOURCE: https://github.com/juspay/hyperswitch/blob/main/crates/test_utils/README.md#2025-04-16_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\ncargo test --package test_utils --test connectors -- adyen_uk_ui::should_make_gpay_payment_test --test-threads=1\n```\n\n----------------------------------------\n\nTITLE: API Locking Error Message Example in Hyperswitch\nDESCRIPTION: This snippet shows the error message returned when an API is locked due to ongoing utilization. It explains that access to the object is restricted and advises retrying after some time if the error persists.\nSOURCE: https://github.com/juspay/hyperswitch/blob/main/api-reference/essentials/rate_limit.mdx#2025-04-16_snippet_0\n\nLANGUAGE: text\nCODE:\n```\nAt this moment, access to this object is restricted due to ongoing utilization by another API request or an ongoing Hyperswitch process. Retry after some time if this error persists.\n```\n\n----------------------------------------\n\nTITLE: OpenAPI Specification Frontmatter for GSM Endpoint\nDESCRIPTION: Frontmatter defining an OpenAPI specification for the POST /gsm endpoint. This appears to be a placeholder or header for the actual specification details.\nSOURCE: https://github.com/juspay/hyperswitch/blob/main/api-reference/api-reference/gsm/gsm--create.mdx#2025-04-16_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n---\nopenapi: openapi_spec post /gsm\n---\n```\n\n----------------------------------------\n\nTITLE: Running External Services through Nix\nDESCRIPTION: Command to start external services like PostgreSQL and Redis using Nix flakes.\nSOURCE: https://github.com/juspay/hyperswitch/blob/main/docs/try_local_system.md#2025-04-16_snippet_7\n\nLANGUAGE: shell\nCODE:\n```\nnix run .#ext-services\n```\n\n----------------------------------------\n\nTITLE: Configuring Analytics and Events Source in TOML\nDESCRIPTION: TOML configuration for enabling Clickhouse as the analytics source and Kafka as the events source in the Hyperswitch project.\nSOURCE: https://github.com/juspay/hyperswitch/blob/main/crates/analytics/docs/README.md#2025-04-16_snippet_2\n\nLANGUAGE: toml\nCODE:\n```\n[analytics]\nsource = \"clickhouse\"\n\n[events]\nsource = \"kafka\"\n```\n\n----------------------------------------\n\nTITLE: Generating Route Files from OpenAPI Spec for Hyperswitch\nDESCRIPTION: Command to generate route files from the OpenAPI specification using Mintlify's scraping tool. This is necessary when new routes are added to the API.\nSOURCE: https://github.com/juspay/hyperswitch/blob/main/api-reference-v2/README.md#2025-04-16_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nnpx @mintlify/scraping@latest openapi-file openapi_spec.json  -o api-reference\n```\n\n----------------------------------------\n\nTITLE: Updating payment results using gRPCurl (Bash)\nDESCRIPTION: This example demonstrates how to update success rate data with payment results using gRPCurl. It sends a request to the UpdateSuccessRateWindow method of the SuccessRateCalculator service.\nSOURCE: https://github.com/juspay/hyperswitch/blob/main/api-reference/intelligent-router-api-reference/overview.mdx#2025-04-16_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\n# Update success rate data with payment results\ngrpcurl -d '{\"id\": \"merchant1\", \"params\": \"card\", \"labels_with_status\": [{\"label\": \"stripe\", \"status\": true}], \"config\": {\"max_aggregates_size\": 10, \"current_block_threshold\": {\"max_total_count\": 5}}}' \\\n  -plaintext localhost:8000 success_rate.SuccessRateCalculator/UpdateSuccessRateWindow\n```\n\n----------------------------------------\n\nTITLE: Generating HTML Coverage Report\nDESCRIPTION: Commands for generating and viewing HTML coverage report using grcov.\nSOURCE: https://github.com/juspay/hyperswitch/blob/main/docs/CONTRIBUTING.md#2025-04-16_snippet_5\n\nLANGUAGE: shell\nCODE:\n```\ngrcov . --source-dir . --output-type html --binary-path ./target/debug\ncd html && python3 -m http.server 8000\n```\n\n----------------------------------------\n\nTITLE: Configuring Hyperswitch Router in Docker Compose\nDESCRIPTION: YAML snippet for configuring the Hyperswitch router service in a Docker Compose file, including image, command, ports, and volume mapping.\nSOURCE: https://github.com/juspay/hyperswitch/blob/main/config/deployments/README.md#2025-04-16_snippet_4\n\nLANGUAGE: yaml\nCODE:\n```\nhyperswitch-server:\n  image: docker.juspay.io/juspaydotin/hyperswitch-router:latest\n  command: /local/bin/router --config-path /local/config/deployments/sandbox_release.toml\n  ports:\n    - \"8080:8080\"\n  volumes:\n    - ./config:/local/config\n```\n\n----------------------------------------\n\nTITLE: Installing Ubuntu on WSL\nDESCRIPTION: Installs Ubuntu distribution on Windows Subsystem for Linux 2\nSOURCE: https://github.com/juspay/hyperswitch/blob/main/docs/try_local_system.md#2025-04-16_snippet_14\n\nLANGUAGE: shell\nCODE:\n```\nwsl --install -d Ubuntu\n```\n\n----------------------------------------\n\nTITLE: Configuring Hyperswitch Producer in Docker Compose\nDESCRIPTION: YAML snippet for configuring the Hyperswitch producer service in a Docker Compose file, including image, command, volume mapping, and environment variables.\nSOURCE: https://github.com/juspay/hyperswitch/blob/main/config/deployments/README.md#2025-04-16_snippet_5\n\nLANGUAGE: yaml\nCODE:\n```\nhyperswitch-producer:\n  image: docker.juspay.io/juspaydotin/hyperswitch-producer:latest\n  command: /local/bin/scheduler --config-path /local/config/deployments/producer_sandbox_release.toml\n  volumes:\n    - ./config:/local/config\n  environment:\n    - SCHEDULER_FLOW=producer\n```\n\n----------------------------------------\n\nTITLE: Labels Documentation in Markdown\nDESCRIPTION: A structured list of GitHub labels used in the HyperSwitch project for categorizing issues and pull requests. Includes area labels, category labels, priority levels, and status indicators.\nSOURCE: https://github.com/juspay/hyperswitch/blob/main/docs/CONTRIBUTING.md#2025-04-16_snippet_9\n\nLANGUAGE: markdown\nCODE:\n```\n### Area\n- **A-CI-CD**: This issue/PR concerns our CI/CD setup.\n- **A-connector-compatibility**: This issue/PR concerns connector compatibility code.\n- **A-connector-integration**: This issue/PR concerns connector integrations.\n[...]\n\n### Category\n- **C-bug**: This issue is a bug report or this PR is a bug fix.\n- **C-doc**: This issue/PR concerns changes to the documentation.\n[...]\n\n### Priority\n- **P-low**: This is a low priority issue.\n- **P-medium**: This is not `P-low` or `P-high`.\n- **P-high**: This is a high priority issue and must be addressed quickly.\n```\n\n----------------------------------------\n\nTITLE: Installing OpenAPI Generator\nDESCRIPTION: Command to install the OpenAPI generator using Homebrew\nSOURCE: https://github.com/juspay/hyperswitch/blob/main/add_connector_updated.md#2025-04-16_snippet_19\n\nLANGUAGE: bash\nCODE:\n```\nbrew install openapi-generator\n```\n\n----------------------------------------\n\nTITLE: Configuring Hyperswitch Drainer in Docker Compose\nDESCRIPTION: YAML snippet for configuring the Hyperswitch drainer service in a Docker Compose file, including image, command, and volume mapping.\nSOURCE: https://github.com/juspay/hyperswitch/blob/main/config/deployments/README.md#2025-04-16_snippet_7\n\nLANGUAGE: yaml\nCODE:\n```\nhyperswitch-drainer:\n  image: docker.juspay.io/juspaydotin/hyperswitch-drainer:latest\n  command: /local/bin/drainer --config-path /local/config/deployments/drainer.toml\n  volumes:\n    - ./config:/local/config\n```\n\n----------------------------------------\n\nTITLE: Running UI Tests - General Format\nDESCRIPTION: Command format for running UI tests with optional specific function targeting\nSOURCE: https://github.com/juspay/hyperswitch/blob/main/crates/test_utils/README.md#2025-04-16_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\ncargo test --package test_utils --test connectors -- <connector_ui_name>::<optionally_name_of_specific_function_run> --test-threads=1\n```\n\n----------------------------------------\n\nTITLE: RFC Template Structure in Markdown\nDESCRIPTION: Basic markdown template showing the required sections and structure for creating new RFCs in the hyperswitch project. Includes sections for status, resolution, implementation details, and acknowledgements.\nSOURCE: https://github.com/juspay/hyperswitch/blob/main/docs/rfcs/000-resolution-template.md#2025-04-16_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n## RFC 000: [Title]\n\n### I. Status\nThe final status of the RFC (Accepted / Rejected)\n\n### II. Resolution\nA description of the final resolution of the RFC, including any modifications or adjustments made during the discussion and review process\n\n### III. Implementation\nA description of how the resolution will be implemented, including any relevant future scope for the solution\n\n### IV. Acknowledgements\nAny final thoughts or acknowledgements for the community and contributors who participated in the RFC process\n```\n\n----------------------------------------\n\nTITLE: Displaying Hyperswitch Deployment Config Directory Structure\nDESCRIPTION: Shows the tree structure of the deployment configuration directory, including files for different components and environments.\nSOURCE: https://github.com/juspay/hyperswitch/blob/main/config/deployments/README.md#2025-04-16_snippet_0\n\nLANGUAGE: text\nCODE:\n```\nconfig/deployments            # Root directory for the deployment configs\n├── README.md                 # This file\n├── drainer.toml              # Config specific to drainer\n├── env_specific.toml         # Config for environment specific values which are meant to be sensitive (to be set by the user)\n├── integration_test.toml     # Config specific to integration_test environment\n├── production.toml           # Config specific to production environment\n├── sandbox.toml              # Config specific to sandbox environment\n└── scheduler                 # Directory for scheduler configs\n    ├── consumer.toml         # Config specific to consumer\n    └── producer.toml         # Config specific to producer\n```\n\n----------------------------------------\n\nTITLE: Generating Route Files from OpenAPI Spec\nDESCRIPTION: Command to generate route files from OpenAPI specification using Mintlify scraping tool. The generated files need to be added to mint.json under navigation groups.\nSOURCE: https://github.com/juspay/hyperswitch/blob/main/api-reference/README.md#2025-04-16_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nnpx @mintlify/scraping@latest openapi-file openapi_spec.json  -o api-reference\n```\n\n----------------------------------------\n\nTITLE: Creating New Cypress Test File\nDESCRIPTION: Template for creating a new test file with basic structure including global state management and test hooks.\nSOURCE: https://github.com/juspay/hyperswitch/blob/main/cypress-tests/README.md#2025-04-16_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\n// cypress/e2e/<Service>Test/NewFeature.cy.js\nimport * as fixtures from \"../../../fixtures/imports\";\nimport State from \"../../../utils/State\";\n\ndescribe(\"New Feature\", () => {\n  let globalState;\n\n  before(() => {\n    cy.task(\"getGlobalState\").then((state) => {\n      globalState = new State(state);\n    });\n  });\n\n  after(\"flush global state\", () => {\n    cy.task(\"setGlobalState\", globalState.data);\n  });\n\n  it(\"tests new functionality\", () => {\n    // Test implementation\n  });\n});\n```\n\n----------------------------------------\n\nTITLE: Linting and Formatting Commands\nDESCRIPTION: Shell commands for code formatting and linting in the project.\nSOURCE: https://github.com/juspay/hyperswitch/blob/main/cypress-tests/README.md#2025-04-16_snippet_8\n\nLANGUAGE: shell\nCODE:\n```\n# Format the code\nnpm run format\n\n# Check the formatting\nnpm run format:check\n\n# Lint the code. This wont fix the logic issues, unused imports or variables\nnpm run lint -- --fix\n```\n\n----------------------------------------\n\nTITLE: Executing Hyperswitch Cypress Tests Against Multiple Connectors\nDESCRIPTION: Commands to set up environment variables and execute Cypress tests against multiple connectors, optionally in parallel.\nSOURCE: https://github.com/juspay/hyperswitch/blob/main/cypress-tests/README.md#2025-04-16_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\nexport PAYMENTS_CONNECTORS=\"payment_connector_1 payment_connector_2 payment_connector_3 payment_connector_4\"\nexport PAYOUTS_CONNECTORS=\"payout_connector_1 payout_connector_2 payout_connector_3\"\nexport PAYMENT_METHOD_LIST=\"\"\nexport ROUTING=\"\"\n\nsource .env\n../scripts/execute_cypress.sh\n```\n\n----------------------------------------\n\nTITLE: Navigating to API Reference Directory\nDESCRIPTION: Command to change directory to where mint.json configuration file is located.\nSOURCE: https://github.com/juspay/hyperswitch/blob/main/api-reference/README.md#2025-04-16_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ncd api-reference\n```\n\n----------------------------------------\n\nTITLE: Installing and Running Hyperswitch Cypress Tests\nDESCRIPTION: Commands to clone the Hyperswitch repository, install dependencies, and run Cypress tests for a specific connector in CI mode.\nSOURCE: https://github.com/juspay/hyperswitch/blob/main/cypress-tests/README.md#2025-04-16_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\ngit clone https://github.com/juspay/hyperswitch.git\ncd hyperswitch/cypress-tests\nnpm ci\n# connector_id must be replaced with the connector name that is being tested (e.g. stripe, paypal, etc.)\nCYPRESS_CONNECTOR=\"connector_id\" npm run cypress:ci\n```\n\n----------------------------------------\n\nTITLE: Navigating to API Reference Directory in Hyperswitch\nDESCRIPTION: Command to change the current directory to where the 'mint.json' file is located, which is necessary for rendering the OpenAPI spec with Mintlify.\nSOURCE: https://github.com/juspay/hyperswitch/blob/main/api-reference-v2/README.md#2025-04-16_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ncd api-reference-v2\n```\n\n----------------------------------------\n\nTITLE: Cloning Hyperswitch Repository with Docker Compose\nDESCRIPTION: Commands to clone the Hyperswitch repository and navigate to the project directory for Docker Compose setup.\nSOURCE: https://github.com/juspay/hyperswitch/blob/main/docs/try_local_system.md#2025-04-16_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\ngit clone --depth 1 --branch latest https://github.com/juspay/hyperswitch\ncd hyperswitch\n```\n\n----------------------------------------\n\nTITLE: Running Payment Confirmation Performance Test\nDESCRIPTION: Command to run performance test for payment-confirm.js script to establish baseline metrics.\nSOURCE: https://github.com/juspay/hyperswitch/blob/main/loadtest/README.md#2025-04-16_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nbash loadtest.sh -s payment-confirm\n```\n\n----------------------------------------\n\nTITLE: Defining Code of Conduct Header in Markdown\nDESCRIPTION: Markdown heading and content establishing the Code of Conduct policy for the Hyperswitch project by referencing the Rust Code of Conduct.\nSOURCE: https://github.com/juspay/hyperswitch/blob/main/docs/CODE_OF_CONDUCT.md#2025-04-16_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n# Code of Conduct\n\nThe hyperswitch project adheres to the\n[Rust Code of Conduct](https://www.rust-lang.org/policies/code-of-conduct).\nThis describes the minimum behavior expected from all contributors.\n```\n\n----------------------------------------\n\nTITLE: Installing Redis on Ubuntu\nDESCRIPTION: Installs and starts Redis server service\nSOURCE: https://github.com/juspay/hyperswitch/blob/main/docs/try_local_system.md#2025-04-16_snippet_11\n\nLANGUAGE: shell\nCODE:\n```\nsudo apt install redis-server\nsystemctl start redis.service\n```\n\n----------------------------------------\n\nTITLE: Markdown CLA Document Structure\nDESCRIPTION: Structured markdown document containing the full Contributor License Agreement text with sections for definitions, copyright license, patent license, and contributor obligations.\nSOURCE: https://github.com/juspay/hyperswitch/blob/main/docs/CONTRIBUTOR_LICENSE_AGREEMENT.md#2025-04-16_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n# Contributor License Agreement\n\nYou accept and agree to the following terms and conditions for Your present and\nfuture Contributions submitted to Juspay Technologies Private Limited, Except\nfor the license granted herein to Juspay Technologies Private Limited and\nrecipients of software distributed by Juspay Technologies Private Limited, You\nreserve all right, title, and interest in and to Your Contributions.\n```\n\n----------------------------------------\n\nTITLE: Starting Docker Containers for Kafka, Clickhouse, and OpenSearch\nDESCRIPTION: Command to start Kafka, Clickhouse, and OpenSearch services using Docker Compose with the OLAP profile.\nSOURCE: https://github.com/juspay/hyperswitch/blob/main/crates/analytics/docs/README.md#2025-04-16_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ndocker compose --profile olap up -d\n```\n\n----------------------------------------\n\nTITLE: OpenAPI Route Specification for Profile Update\nDESCRIPTION: Defines the OpenAPI route specification for updating profiles via PUT /v2/profiles/{id}\nSOURCE: https://github.com/juspay/hyperswitch/blob/main/api-reference-v2/api-reference/profile/profile--update.mdx#2025-04-16_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nopenapi: put /v2/profiles/{id}\n```\n\n----------------------------------------\n\nTITLE: Clearing Redis Cache Lock for Forex\nDESCRIPTION: Command to clear the Redis cache lock if encountering a specific error related to Forex cache.\nSOURCE: https://github.com/juspay/hyperswitch/blob/main/crates/analytics/docs/README.md#2025-04-16_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\nredis-cli del \"{forex_cache}_lock\"\n```\n\n----------------------------------------\n\nTITLE: Defining OpenAPI Specification for POST /v2/profiles Endpoint in YAML\nDESCRIPTION: This YAML snippet defines the OpenAPI specification for the POST /v2/profiles endpoint. It specifies the API version, endpoint path, and HTTP method used for creating or updating customer profiles in the Hyperswitch project.\nSOURCE: https://github.com/juspay/hyperswitch/blob/main/api-reference-v2/api-reference/profile/profile--create.mdx#2025-04-16_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nopenapi: post /v2/profiles\n```\n\n----------------------------------------\n\nTITLE: Rendering OpenAPI Specification with Mintlify for Hyperswitch\nDESCRIPTION: Command to start the Mintlify development server, which renders the OpenAPI specification for local viewing and development.\nSOURCE: https://github.com/juspay/hyperswitch/blob/main/api-reference-v2/README.md#2025-04-16_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nmintlify dev\n```\n\n----------------------------------------\n\nTITLE: OpenAPI GET Endpoint Definition for API Key Retrieval\nDESCRIPTION: YAML definition specifying the API endpoint path for retrieving an API key by its ID using the GET HTTP method\nSOURCE: https://github.com/juspay/hyperswitch/blob/main/api-reference-v2/api-reference/api-key/api-key--retrieve.mdx#2025-04-16_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nopenapi: get /v2/api-keys/{id}\n```\n\n----------------------------------------\n\nTITLE: Building Docker Consumer Image\nDESCRIPTION: Command to build the Hyperswitch consumer Docker image using the Dockerfile with scheduler flow configuration.\nSOURCE: https://github.com/juspay/hyperswitch/blob/main/docs/building_docker_images.md#2025-04-16_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\ndocker build \\\n    --load \\\n    --file Dockerfile \\\n    --build-arg \"BINARY=scheduler\" \\\n    --build-arg \"SCHEDULER_FLOW=consumer\" \\\n    --tag hyperswitch-consumer \\\n    .\n```\n\n----------------------------------------\n\nTITLE: Defining POST Endpoint for Updating Account Business Profile in OpenAPI\nDESCRIPTION: This YAML snippet defines the OpenAPI specification for a POST endpoint to update a business profile associated with an account. It specifies the path parameters for account_id and profile_id.\nSOURCE: https://github.com/juspay/hyperswitch/blob/main/api-reference/api-reference/business-profile/business-profile--update.mdx#2025-04-16_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nopenapi: post /account/{account_id}/business_profile/{profile_id}\n```\n\n----------------------------------------\n\nTITLE: Running hsdev Migration Tool\nDESCRIPTION: Command to run hsdev with a specified TOML configuration file path.\nSOURCE: https://github.com/juspay/hyperswitch/blob/main/crates/hsdev/README.md#2025-04-16_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nhsdev --toml-file [path/to/TOML/file]\n```\n\n----------------------------------------\n\nTITLE: Executing Binary with Coverage Profiling\nDESCRIPTION: Command to run the router binary while generating coverage profile data.\nSOURCE: https://github.com/juspay/hyperswitch/blob/main/docs/CONTRIBUTING.md#2025-04-16_snippet_4\n\nLANGUAGE: shell\nCODE:\n```\nLLVM_PROFILE_FILE=\"coverage.profraw\" target/debug/router\n```\n\n----------------------------------------\n\nTITLE: Defining OpenAPI Specification for POST /routing/default Endpoint\nDESCRIPTION: This YAML snippet defines the OpenAPI specification for the POST /routing/default endpoint. It includes the request body schema, response codes, and content types.\nSOURCE: https://github.com/juspay/hyperswitch/blob/main/api-reference/api-reference/routing/routing--update-default-config.mdx#2025-04-16_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nopenapi: post /routing/default\n```\n\n----------------------------------------\n\nTITLE: Building Docker Image for Performance Testing\nDESCRIPTION: Command to build Docker image from the checked out branch for performance testing.\nSOURCE: https://github.com/juspay/hyperswitch/blob/main/loadtest/README.md#2025-04-16_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ndocker compose build\n```\n\n----------------------------------------\n\nTITLE: OpenAPI POST Route Definition for Routing Profile\nDESCRIPTION: Defines the OpenAPI specification for the POST /routing/default/profile/{profile_id} endpoint path. Includes path parameter for profile ID.\nSOURCE: https://github.com/juspay/hyperswitch/blob/main/api-reference/api-reference/routing/routing--update-default-for-profile.mdx#2025-04-16_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nopenapi: post /routing/default/profile/{profile_id}\n```\n\n----------------------------------------\n\nTITLE: Installing Newman CLI Fork Command\nDESCRIPTION: Command to install a custom fork of Newman CLI from npm, required for collection development\nSOURCE: https://github.com/juspay/hyperswitch/blob/main/postman/README.md#2025-04-16_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm install -g 'https://github.com/knutties/newman.git#feature/newman-dir'\n```\n\n----------------------------------------\n\nTITLE: Defining OpenAPI GET Endpoint for Connector Account Retrieval\nDESCRIPTION: This YAML snippet specifies the OpenAPI definition for a GET endpoint to retrieve a specific connector account by its ID. It defines the path, parameters, and expected responses.\nSOURCE: https://github.com/juspay/hyperswitch/blob/main/api-reference-v2/api-reference/merchant-connector-account/connector-account--retrieve.mdx#2025-04-16_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nopenapi: get /v2/connector-accounts/{id}\n```\n\n----------------------------------------\n\nTITLE: OpenAPI Definition for GET Organization Endpoint in YAML\nDESCRIPTION: OpenAPI specification that defines the endpoint for retrieving organization data by ID. The specification shows an endpoint structure but contains no implementation details.\nSOURCE: https://github.com/juspay/hyperswitch/blob/main/api-reference/api-reference/organization/organization--retrieve.mdx#2025-04-16_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nopenapi: get /organization/{id}\n```\n\n----------------------------------------\n\nTITLE: Defining OpenAPI Specification for POST /v2/payments Endpoint\nDESCRIPTION: This YAML snippet specifies the OpenAPI definition for the POST /v2/payments endpoint. It outlines the structure and requirements for payment processing requests in the Hyperswitch API.\nSOURCE: https://github.com/juspay/hyperswitch/blob/main/api-reference-v2/api-reference/payments/payments--create-and-confirm-intent.mdx#2025-04-16_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nopenapi: post /v2/payments\n```\n\n----------------------------------------\n\nTITLE: OpenAPI Specification for GET /customers/{customer_id} Endpoint in YAML\nDESCRIPTION: OpenAPI specification defining the GET endpoint for retrieving customer information by customer ID. This endpoint specification is part of the Hyperswitch payment infrastructure API documentation.\nSOURCE: https://github.com/juspay/hyperswitch/blob/main/api-reference/api-reference/customers/customers--retrieve.mdx#2025-04-16_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nopenapi: openapi_spec get /customers/{customer_id}\n```\n\n----------------------------------------\n\nTITLE: OpenAPI GET Payment Methods Endpoint Definition\nDESCRIPTION: Defines the OpenAPI/Swagger specification for retrieving payment method details by ID. Shows the endpoint path and HTTP method for accessing payment method information.\nSOURCE: https://github.com/juspay/hyperswitch/blob/main/api-reference-v2/api-reference/payment-methods/payment-method--retrieve.mdx#2025-04-16_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nopenapi: get /v2/payment-methods/{id}\n```\n\n----------------------------------------\n\nTITLE: Defining OpenAPI Route for GSM Update\nDESCRIPTION: Basic OpenAPI specification header defining the path for GSM update endpoint using POST method.\nSOURCE: https://github.com/juspay/hyperswitch/blob/main/api-reference/api-reference/gsm/gsm--update.mdx#2025-04-16_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nopenapi: openapi_spec post /gsm/update\n```\n\n----------------------------------------\n\nTITLE: OpenAPI Path Specification for Payment Details Endpoint\nDESCRIPTION: YAML specification defining the /payments/{payment_id} endpoint path in OpenAPI format. This appears to be a fragment of a larger OpenAPI specification document.\nSOURCE: https://github.com/juspay/hyperswitch/blob/main/api-reference/api-reference/payments/payments--update.mdx#2025-04-16_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nopenapi: openapi_spec post /payments/{payment_id}\n```\n\n----------------------------------------\n\nTITLE: Defining OpenAPI Spec for Disputes List Endpoint\nDESCRIPTION: OpenAPI specification entry that defines the API endpoint path for retrieving a list of disputes. This is a minimal YAML specification that establishes the path /disputes/list.\nSOURCE: https://github.com/juspay/hyperswitch/blob/main/api-reference/api-reference/disputes/disputes--list.mdx#2025-04-16_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nopenapi: openapi_spec get /disputes/list\n```\n\n----------------------------------------\n\nTITLE: Deleting Customer Resources with OpenAPI\nDESCRIPTION: OpenAPI specification for DELETE endpoint to remove customer records. Path includes dynamic customer ID parameter.\nSOURCE: https://github.com/juspay/hyperswitch/blob/main/api-reference-v2/api-reference/customers/customers--delete.mdx#2025-04-16_snippet_0\n\nLANGUAGE: openapi\nCODE:\n```\nopenapi: delete /v2/customers/{id}\n```\n\n----------------------------------------\n\nTITLE: OpenAPI Path Definition - POST /payouts/filter\nDESCRIPTION: OpenAPI path specification for filtering payouts with request parameters and response format.\nSOURCE: https://github.com/juspay/hyperswitch/blob/main/api-reference/api-reference/payouts/payouts--list-filters.mdx#2025-04-16_snippet_0\n\nLANGUAGE: openapi\nCODE:\n```\nopenapi: post /payouts/filter\n```\n\n----------------------------------------\n\nTITLE: Defining Health Check API Endpoint in OpenAPI for Hyperswitch\nDESCRIPTION: This YAML snippet defines the OpenAPI specification for the GET /health endpoint in the Hyperswitch project. It specifies the API path, HTTP method, and likely includes details about the response format and possible status codes.\nSOURCE: https://github.com/juspay/hyperswitch/blob/main/api-reference/locker-api-reference/locker-health/get-health.mdx#2025-04-16_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nopenapi: rust_locker_open_api_spec get /health\n```\n\n----------------------------------------\n\nTITLE: OpenAPI PUT Organization Endpoint Definition\nDESCRIPTION: OpenAPI path specification for updating an organization via PUT request to /organization/{id}\nSOURCE: https://github.com/juspay/hyperswitch/blob/main/api-reference/api-reference/organization/organization--update.mdx#2025-04-16_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nopenapi: put /organization/{id}\n```\n\n----------------------------------------\n\nTITLE: Defining GET Endpoint for Customer Payment Methods in OpenAPI\nDESCRIPTION: This YAML snippet defines the OpenAPI specification for the GET /customers/payment_methods endpoint. It includes the operation ID, summary, parameters, and response schema for retrieving a customer's payment methods.\nSOURCE: https://github.com/juspay/hyperswitch/blob/main/api-reference/api-reference/payment-methods/list-customer-saved-payment-methods-for-a-payment.mdx#2025-04-16_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nopenapi: get /customers/payment_methods\n```\n\n----------------------------------------\n\nTITLE: Defining OpenAPI Specification for POST /payouts/{payout_id} Endpoint in YAML\nDESCRIPTION: This YAML snippet defines the OpenAPI specification for the POST /payouts/{payout_id} endpoint. It includes the HTTP method, path parameters, and likely contains request body schema, response schemas, and other API details not shown in this excerpt.\nSOURCE: https://github.com/juspay/hyperswitch/blob/main/api-reference/api-reference/payouts/payouts--update.mdx#2025-04-16_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nopenapi: openapi_spec post /payouts/{payout_id}\n```\n\n----------------------------------------\n\nTITLE: Email Domain List - Plain Text\nDESCRIPTION: A sorted list of email service provider domains, including both current and historical services across different countries. The list includes commercial providers, regional ISPs, and country-specific email services.\nSOURCE: https://github.com/juspay/hyperswitch/blob/main/crates/router/src/utils/user/blocker_emails.txt#2025-04-16_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\ninterfree.it\ninteria.pl\ninterlap.com.ar\nintermail.hu\ninternet-e-mail.com\ninternet-mail.org\ninternet.lu\ninternetegypt.com\ninternetemails.net\ninternetkeno.com\ninternetmailing.net\ninwind.it\niobox.com\niobox.fi\niol.it\niol.pt\niowa.usa.com\nip3.com\nipermitmail.com\niqemail.com\niquebec.com\niran.com\nirangate.net\niscool.net\nislandmama.com\nismart.net\nisonews2.com\nisonfire.com\nisp9.net\nispey.com\nitelgua.com\nitloox.com\nitmom.com\nivenus.com\niwan-fals.com\niwon.com\nixp.net\n[...continued...]\n```\n\n----------------------------------------\n\nTITLE: hsdev Configuration Template\nDESCRIPTION: TOML configuration file template containing database connection parameters including username, password, and database name.\nSOURCE: https://github.com/juspay/hyperswitch/blob/main/crates/hsdev/README.md#2025-04-16_snippet_2\n\nLANGUAGE: toml\nCODE:\n```\nusername = \"your_username\"\npassword = \"your_password\"\ndbname = \"your_db_name\"\n```\n\n----------------------------------------\n\nTITLE: Error Message for API Locking in Hyperswitch\nDESCRIPTION: Sample error message returned when an API request encounters a lock due to concurrent access. This message indicates that the requested resource is temporarily unavailable due to ongoing operations.\nSOURCE: https://github.com/juspay/hyperswitch/blob/main/api-reference-v2/essentials/rate_limit.mdx#2025-04-16_snippet_0\n\nLANGUAGE: text\nCODE:\n```\nAt this moment, access to this object is restricted due to ongoing utilization by another API request or an ongoing Hyperswitch process. Retry after some time if this error persists.\n```\n\n----------------------------------------\n\nTITLE: Defining GET Endpoint for Connector Account Retrieval in OpenAPI YAML\nDESCRIPTION: This YAML snippet defines the OpenAPI specification for a GET endpoint to retrieve a specific connector account by its ID. It includes the path parameter, potential response codes, and schema references for the response body.\nSOURCE: https://github.com/juspay/hyperswitch/blob/main/api-reference-v2/api-reference/connector-account/connector-account--retrieve.mdx#2025-04-16_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nopenapi: get /v2/connector-accounts/{id}\n```"
  }
]