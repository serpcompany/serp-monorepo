[
  {
    "owner": "sergioteula",
    "repo": "python-amazon-paapi",
    "content": "TITLE: Fetching Multiple Amazon Items in Python\nDESCRIPTION: Shows how to retrieve information for multiple items simultaneously using a list of ASINs. Demonstrates accessing image URLs and price information from the response.\nSOURCE: https://github.com/sergioteula/python-amazon-paapi/blob/master/README.md#2025-04-22_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nitems = amazon.get_items(['B01N5IB20Q', 'B01F9G43WU'])\nfor item in items:\n    print(item.images.primary.large.url) # Primary image url\n    print(item.offers.listings[0].price.amount) # Current price\n```\n\n----------------------------------------\n\nTITLE: Basic Amazon API Usage in Python\nDESCRIPTION: Demonstrates how to initialize the Amazon API client and fetch basic item information using an ASIN number. Shows how to access the item's title from the response.\nSOURCE: https://github.com/sergioteula/python-amazon-paapi/blob/master/README.md#2025-04-22_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nfrom amazon_paapi import AmazonApi\namazon = AmazonApi(KEY, SECRET, TAG, COUNTRY)\nitem = amazon.get_items('B01N5IB20Q')[0]\nprint(item.item_info.title.display_value) # Item title\n```\n\n----------------------------------------\n\nTITLE: Retrieving Multiple Items from Amazon PAAPI\nDESCRIPTION: Shows how to fetch multiple items at once by providing a list of ASINs, and how to access image URLs and pricing information.\nSOURCE: https://github.com/sergioteula/python-amazon-paapi/blob/master/docs/pages/usage-guide.md#2025-04-22_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nitems = amazon.get_items(['B01N5IB20Q', 'B01F9G43WU'])\nfor item in items:\n    print(item.images.primary.large.url) # Primary image url\n    print(item.offers.listings[0].price.amount) # Current price\n```\n\n----------------------------------------\n\nTITLE: Basic Usage of Amazon PAAPI in Python\nDESCRIPTION: Demonstrates how to initialize the AmazonApi class and retrieve basic item information like the title.\nSOURCE: https://github.com/sergioteula/python-amazon-paapi/blob/master/docs/pages/usage-guide.md#2025-04-22_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nfrom amazon_paapi import AmazonApi\namazon = AmazonApi(KEY, SECRET, TAG, COUNTRY)\nitem = amazon.get_items('B01N5IB20Q')[0]\nprint(item.item_info.title.display_value) # Item title\n```\n\n----------------------------------------\n\nTITLE: Searching Amazon Items in Python\nDESCRIPTION: Demonstrates how to search for items on Amazon using keywords and access product information from the search results.\nSOURCE: https://github.com/sergioteula/python-amazon-paapi/blob/master/README.md#2025-04-22_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nsearch_result = amazon.search_items(keywords='nintendo')\nfor item in search_result.items:\n    print(item.item_info.product_info.color) # Item color\n```\n\n----------------------------------------\n\nTITLE: Searching Items Using Amazon PAAPI\nDESCRIPTION: Demonstrates how to search for items using keywords and access product information from search results.\nSOURCE: https://github.com/sergioteula/python-amazon-paapi/blob/master/docs/pages/usage-guide.md#2025-04-22_snippet_5\n\nLANGUAGE: python\nCODE:\n```\nsearch_result = amazon.search_items(keywords='nintendo')\nfor item in search_result.items:\n    print(item.item_info.product_info.color) # Item color\n```\n\n----------------------------------------\n\nTITLE: Using Amazon URLs Instead of ASINs in Python\nDESCRIPTION: Demonstrates how to fetch item information using an Amazon product URL instead of an ASIN number.\nSOURCE: https://github.com/sergioteula/python-amazon-paapi/blob/master/README.md#2025-04-22_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nitem = amazon.get_items('https://www.amazon.com/dp/B01N5IB20Q')\n```\n\n----------------------------------------\n\nTITLE: Using Amazon Product URLs Instead of ASINs\nDESCRIPTION: Demonstrates how to use a full Amazon product URL instead of an ASIN to retrieve item information.\nSOURCE: https://github.com/sergioteula/python-amazon-paapi/blob/master/docs/pages/usage-guide.md#2025-04-22_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nitem = amazon.get_items('https://www.amazon.com/dp/B01N5IB20Q')\n```\n\n----------------------------------------\n\nTITLE: Retrieving Amazon Item Variations in Python\nDESCRIPTION: Shows how to fetch variations of a product using its ASIN and access the detail page URLs for each variation.\nSOURCE: https://github.com/sergioteula/python-amazon-paapi/blob/master/README.md#2025-04-22_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nvariations = amazon.get_variations('B01N5IB20Q')\nfor item in variations.items:\n    print(item.detail_page_url) # Affiliate url\n```\n\n----------------------------------------\n\nTITLE: Fetching Product Variations with Amazon PAAPI\nDESCRIPTION: Shows how to retrieve and iterate through product variations for a given ASIN.\nSOURCE: https://github.com/sergioteula/python-amazon-paapi/blob/master/docs/pages/usage-guide.md#2025-04-22_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nvariations = amazon.get_variations('B01N5IB20Q')\nfor item in variations.items:\n    print(item.detail_page_url) # Affiliate url\n```\n\n----------------------------------------\n\nTITLE: Configuring Amazon API Throttling in Python\nDESCRIPTION: Shows how to configure request throttling to control the rate of API calls and avoid hitting Amazon's request limits.\nSOURCE: https://github.com/sergioteula/python-amazon-paapi/blob/master/README.md#2025-04-22_snippet_7\n\nLANGUAGE: python\nCODE:\n```\namazon = AmazonApi(KEY, SECRET, TAG, COUNTRY, throttling=4)  # Makes 1 request every 4 seconds\namazon = AmazonApi(KEY, SECRET, TAG, COUNTRY, throttling=0)  # No wait time between requests\n```\n\n----------------------------------------\n\nTITLE: Implementing Throttling for Amazon PAAPI Requests\nDESCRIPTION: Shows how to configure request throttling to avoid reaching Amazon's API request limits by controlling the wait time between requests.\nSOURCE: https://github.com/sergioteula/python-amazon-paapi/blob/master/docs/pages/usage-guide.md#2025-04-22_snippet_8\n\nLANGUAGE: python\nCODE:\n```\namazon = AmazonApi(KEY, SECRET, TAG, COUNTRY, throttling=4)  # Makes 1 request every 4 seconds\namazon = AmazonApi(KEY, SECRET, TAG, COUNTRY, throttling=0)  # No wait time between requests\n```\n\n----------------------------------------\n\nTITLE: Extracting ASIN from Amazon URL in Python\nDESCRIPTION: Demonstrates how to extract the ASIN number from an Amazon product URL using a utility function.\nSOURCE: https://github.com/sergioteula/python-amazon-paapi/blob/master/README.md#2025-04-22_snippet_6\n\nLANGUAGE: python\nCODE:\n```\nfrom amazon_paapi import get_asin\nasin = get_asin('https://www.amazon.com/dp/B01N5IB20Q')\n```\n\n----------------------------------------\n\nTITLE: Extracting ASIN from Amazon Product URL\nDESCRIPTION: Utility function to extract the ASIN from a complete Amazon product URL.\nSOURCE: https://github.com/sergioteula/python-amazon-paapi/blob/master/docs/pages/usage-guide.md#2025-04-22_snippet_7\n\nLANGUAGE: python\nCODE:\n```\nfrom amazon_paapi import get_asin\nasin = get_asin('https://www.amazon.com/dp/B01N5IB20Q')\n```\n\n----------------------------------------\n\nTITLE: Fetching Amazon Browse Node Information in Python\nDESCRIPTION: Shows how to retrieve information about Amazon browse nodes using their IDs.\nSOURCE: https://github.com/sergioteula/python-amazon-paapi/blob/master/README.md#2025-04-22_snippet_5\n\nLANGUAGE: python\nCODE:\n```\nbrowse_nodes = amazon.get_browse_nodes(['667049031', '599385031'])\nfor browse_node in browse_nodes:\n    print(browse_node.display_name) # The name of the node\n```\n\n----------------------------------------\n\nTITLE: Retrieving Browse Node Information from Amazon PAAPI\nDESCRIPTION: Shows how to fetch and display information about Amazon browse nodes using their IDs.\nSOURCE: https://github.com/sergioteula/python-amazon-paapi/blob/master/docs/pages/usage-guide.md#2025-04-22_snippet_6\n\nLANGUAGE: python\nCODE:\n```\nbrowse_nodes = amazon.get_browse_nodes(['667049031', '599385031'])\nfor browse_node in browse_nodes:\n    print(browse_node.display_name) # The name of the node\n```\n\n----------------------------------------\n\nTITLE: Handling Single Item Results in Python Amazon PAAPI 4.x\nDESCRIPTION: Demonstrates how to handle the return value change for single item retrieval. In 4.x, get_items() always returns an array, even for single items.\nSOURCE: https://github.com/sergioteula/python-amazon-paapi/blob/master/docs/pages/migration-guide-4.md#2025-04-22_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nresult = get_product(asin) -> result = get_items(asin)[0]\n```\n\n----------------------------------------\n\nTITLE: Exception Name Updates in Python Amazon PAAPI\nDESCRIPTION: Mapping of old exception names to new names in version 5.x, showing how exception class names have been simplified by removing 'Exception' suffix or replacing it with 'Error'.\nSOURCE: https://github.com/sergioteula/python-amazon-paapi/blob/master/docs/pages/migration-guide-5.md#2025-04-22_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nAmazonException                 ->  AmazonError\nAsinNotFoundException           ->  AsinNotFound\nAssociateValidationException    ->  AssociateValidationError\nInvalidArgumentException        ->  InvalidArgument\nInvalidPartnerTagException      ->  InvalidPartnerTag\nItemsNotFoundException          ->  ItemsNotFound\nMalformedRequestException       ->  MalformedRequest\nApiRequestException             ->  RequestError\nTooManyRequestsException        ->  TooManyRequests\n```\n\n----------------------------------------\n\nTITLE: Installing the Python Amazon PAAPI Library\nDESCRIPTION: Command to install or upgrade the python-amazon-paapi module using pip.\nSOURCE: https://github.com/sergioteula/python-amazon-paapi/blob/master/docs/pages/usage-guide.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\npip install python-amazon-paapi --upgrade\n```\n\n----------------------------------------\n\nTITLE: Configuring Throttling in Python Amazon PAAPI 4.x\nDESCRIPTION: Shows how to configure throttling in version 4.x. The throttling parameter now represents the seconds to wait between API calls instead of the frequency.\nSOURCE: https://github.com/sergioteula/python-amazon-paapi/blob/master/docs/pages/migration-guide-4.md#2025-04-22_snippet_3\n\nLANGUAGE: python\nCODE:\n```\namazon = AmazonApi(KEY, SECRET, TAG, COUNTRY, throttling=4)  # Makes 1 request every 4 seconds\namazon = AmazonApi(KEY, SECRET, TAG, COUNTRY, throttling=0)  # No wait time between requests\n```\n\n----------------------------------------\n\nTITLE: Updating Import Statements for Python Amazon PAAPI 4.x\nDESCRIPTION: Shows how to update import statements when migrating from version 3.x to 4.x. The module name has changed from 'amazon' to 'amazon_paapi' to avoid module clashes.\nSOURCE: https://github.com/sergioteula/python-amazon-paapi/blob/master/docs/pages/migration-guide-4.md#2025-04-22_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nfrom amazon.paapi import AmazonApi  ->  from amazon_paapi import AmazonApi\nfrom amazon.tools import get_asin   ->  from amazon_paapi import get_asin\n```\n\n----------------------------------------\n\nTITLE: Updating Method Names for Python Amazon PAAPI 4.x\nDESCRIPTION: Shows how to update method names when migrating from version 3.x to 4.x. Several methods have been renamed to follow the official Amazon API standards.\nSOURCE: https://github.com/sergioteula/python-amazon-paapi/blob/master/docs/pages/migration-guide-4.md#2025-04-22_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nget_product()       ->  get_items()\nget_products()      ->  get_items()\nsearch_products()   ->  search_items()\nget_browsenodes()   ->  get_browse_nodes()\n```\n\n----------------------------------------\n\nTITLE: Installing Python Amazon PAAPI Update\nDESCRIPTION: Command to upgrade the python-amazon-paapi package to the latest version using pip package manager.\nSOURCE: https://github.com/sergioteula/python-amazon-paapi/blob/master/docs/pages/migration-guide-5.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\npip install python-amazon-paapi --upgrade\n```\n\n----------------------------------------\n\nTITLE: Setting Up Git Hooks for Development\nDESCRIPTION: Shows how to configure Git hooks for development to run pre-commit checks for code formatting and tests.\nSOURCE: https://github.com/sergioteula/python-amazon-paapi/blob/master/README.md#2025-04-22_snippet_8\n\nLANGUAGE: bash\nCODE:\n```\ngit config core.hooksPath .githooks\n```\n\n----------------------------------------\n\nTITLE: Documenting the ASIN Tools Module with reStructuredText\nDESCRIPTION: This directive configures the documentation generator to include the amazon_paapi.tools.asin module in the API documentation, showing all members, undocumented members, and inheritance relationships.\nSOURCE: https://github.com/sergioteula/python-amazon-paapi/blob/master/docs/amazon_paapi.tools.rst#2025-04-22_snippet_0\n\nLANGUAGE: reStructuredText\nCODE:\n```\n.. automodule:: amazon_paapi.tools.asin\n   :members:\n   :undoc-members:\n   :show-inheritance:\n```\n\n----------------------------------------\n\nTITLE: Configuring Sphinx Documentation for PAAPI Exceptions Module\nDESCRIPTION: ReStructuredText directive for auto-documenting the Amazon PAAPI exceptions module. Includes configuration to show all members, undocumented members and inheritance relationships.\nSOURCE: https://github.com/sergioteula/python-amazon-paapi/blob/master/docs/amazon_paapi.errors.rst#2025-04-22_snippet_0\n\nLANGUAGE: rst\nCODE:\n```\n.. automodule:: amazon_paapi.errors.exceptions\n   :members:\n   :undoc-members:\n   :show-inheritance:\n```\n\n----------------------------------------\n\nTITLE: Initializing RST Documentation Structure\nDESCRIPTION: Sphinx documentation root file that sets up the documentation structure using reStructuredText. It defines the table of contents tree and includes various documentation sections.\nSOURCE: https://github.com/sergioteula/python-amazon-paapi/blob/master/docs/index.rst#2025-04-22_snippet_0\n\nLANGUAGE: rst\nCODE:\n```\n.. python-amazon-paapi documentation master file, created by\n   sphinx-quickstart on Mon Nov 22 18:33:43 2021.\n   You can adapt this file completely to your liking, but it should at least\n   contain the root `toctree` directive.\n\n.. toctree::\n\n   amazon_paapi\n   amazon_paapi.errors\n   amazon_paapi.tools\n\n.. toctree::\n    :maxdepth: 1\n\n    ./pages/usage-guide.md\n\n.. toctree::\n    :maxdepth: 1\n\n    ./pages/migration-guide-4.md\n    ./pages/migration-guide-5.md\n```\n\n----------------------------------------\n\nTITLE: Defining Sphinx Documentation Requirements\nDESCRIPTION: Lists the Python packages and their specific versions required for building project documentation. The file includes Sphinx 4.3.0 as the documentation generator, the Read the Docs theme 1.0.0 for styling, and MyST Parser 0.15.2 for Markdown support.\nSOURCE: https://github.com/sergioteula/python-amazon-paapi/blob/master/docs/requirements.txt#2025-04-22_snippet_0\n\nLANGUAGE: Plain Text\nCODE:\n```\nsphinx==4.3.0\nsphinx_rtd_theme==1.0.0\nmyst-parser==0.15.2\n```"
  }
]